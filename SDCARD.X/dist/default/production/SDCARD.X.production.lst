

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Apr 14 15:19:57 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   104                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   113                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   114  0000                     
   115                           ; Version 1.45
   116                           ; Generated 16/11/2017 GMT
   117                           ; 
   118                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC18F4550 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     
   150                           	psect	idataCOMRAM
   151  005070                     __pidataCOMRAM:
   152                           	opt stack 0
   153                           
   154                           ;initializer for leitura_sdcard@size
   155  005070  58                 	db	88
   156                           
   157                           	psect	idataBANK1
   158  004D88                     __pidataBANK1:
   159                           	opt stack 0
   160                           
   161                           ;initializer for verifica_fence_externo@F4367
   162  004D88  2D                 	db	45
   163  004D89  34                 	db	52
   164  004D8A  36                 	db	54
   165  004D8B  35                 	db	53
   166  004D8C  33                 	db	51
   167  004D8D  2E                 	db	46
   168  004D8E  31                 	db	49
   169  004D8F  36                 	db	54
   170  004D90  36                 	db	54
   171  004D91  32                 	db	50
   172  004D92  32                 	db	50
   173                           
   174                           ;initializer for verifica_fence_externo@F4365
   175  004D93  2D                 	db	45
   176  004D94  34                 	db	52
   177  004D95  36                 	db	54
   178  004D96  35                 	db	53
   179  004D97  33                 	db	51
   180  004D98  2E                 	db	46
   181  004D99  31                 	db	49
   182  004D9A  36                 	db	54
   183  004D9B  36                 	db	54
   184  004D9C  32                 	db	50
   185  004D9D  32                 	db	50
   186                           
   187                           ;initializer for escreve_inteiro_uart@F3958
   188  004D9E  30                 	db	48
   189  004D9F  30                 	db	48
   190  004DA0  30                 	db	48
   191  004DA1  30                 	db	48
   192  004DA2  30                 	db	48
   193  004DA3  30                 	db	48
   194  004DA4  00                 	db	0
   195                           
   196                           ;initializer for escreve_inteiro_lcd@F3966
   197  004DA5  30                 	db	48
   198  004DA6  30                 	db	48
   199  004DA7  30                 	db	48
   200  004DA8  30                 	db	48
   201  004DA9  30                 	db	48
   202  004DAA  30                 	db	48
   203  004DAB  00                 	db	0
   204                           
   205                           ;initializer for _filename
   206  004DAC  74                 	db	116
   207  004DAD  65                 	db	101
   208  004DAE  73                 	db	115
   209  004DAF  74                 	db	116
   210  004DB0  65                 	db	101
   211  004DB1  31                 	db	49
   212  004DB2  2E                 	db	46
   213  004DB3  74                 	db	116
   214  004DB4  78                 	db	120
   215  004DB5  74                 	db	116
   216  004DB6  00                 	db	0
   217  004DB7  00                 	db	0
   218  004DB8  00                 	db	0
   219  004DB9  00                 	db	0
   220  004DBA  00                 	db	0
   221                           
   222                           	psect	mediumconst
   223  00615E                     __pmediumconst:
   224                           	opt stack 0
   225  00615E  00                 	db	0
   226  00615F                     mensagem_inicial@F4353:
   227                           	opt stack 0
   228  00615F  54                 	db	84
   229  006160  43                 	db	67
   230  006161  43                 	db	67
   231  006162  2D                 	db	45
   232  006163  2D                 	db	45
   233  006164  54                 	db	84
   234  006165  45                 	db	69
   235  006166  4C                 	db	76
   236  006167  45                 	db	69
   237  006168  4D                 	db	77
   238  006169  54                 	db	84
   239  00616A  52                 	db	82
   240  00616B  49                 	db	73
   241  00616C  41                 	db	65
   242  00616D  00                 	db	0
   243  00616E  00                 	db	0
   244  00616F  00                 	db	0
   245  006170                     __end_ofmensagem_inicial@F4353:
   246                           	opt stack 0
   247  006170                     mensagem_inicial@F4351:
   248                           	opt stack 0
   249  006170  46                 	db	70
   250  006171  41                 	db	65
   251  006172  54                 	db	84
   252  006173  45                 	db	69
   253  006174  43                 	db	67
   254  006175  20                 	db	32
   255  006176  53                 	db	83
   256  006177  54                 	db	84
   257  006178  20                 	db	32
   258  006179  41                 	db	65
   259  00617A  4E                 	db	78
   260  00617B  44                 	db	68
   261  00617C  52                 	db	82
   262  00617D  45                 	db	69
   263  00617E  00                 	db	0
   264  00617F  00                 	db	0
   265  006180  00                 	db	0
   266  006181                     __end_ofmensagem_inicial@F4351:
   267                           	opt stack 0
   268  0000                     _RCSTA	set	4011
   269  0000                     _TXSTA	set	4012
   270  0000                     _RCREG	set	4014
   271  0000                     _RCSTAbits	set	4011
   272  0000                     _TXREG	set	4013
   273  0000                     _SPBRG	set	4015
   274  0000                     _PR2	set	4043
   275  0000                     _TMR2	set	4044
   276  0000                     _T2CON	set	4042
   277  0000                     _OSCCONbits	set	4051
   278  0000                     _TRISE	set	3990
   279  0000                     _TRISC	set	3988
   280  0000                     _TRISA	set	3986
   281  0000                     _TRISD	set	3989
   282  0000                     _LATB	set	3978
   283  0000                     _TRISB	set	3987
   284  0000                     _ADCON1	set	4033
   285  0000                     _TMR0L	set	4054
   286  0000                     _TMR0H	set	4055
   287  0000                     _PIE1	set	3997
   288  0000                     _INTCON3	set	4080
   289  0000                     _INTCON2	set	4081
   290  0000                     _INTCON	set	4082
   291  0000                     _SPPCFG	set	3939
   292  0000                     _SPPCON	set	3941
   293  0000                     _T0CON	set	4053
   294  0000                     _PORTDbits	set	3971
   295  0000                     _TRISDbits	set	3989
   296  0000                     _LATCbits	set	3979
   297  0000                     _SSPBUF	set	4041
   298  0000                     _SSPCON1bits	set	4038
   299  0000                     _SSPSTATbits	set	4039
   300  0000                     _SSPCON1	set	4038
   301  0000                     _SSPSTAT	set	4039
   302  0000                     _TRISCbits	set	3988
   303  0000                     _TRISBbits	set	3987
   304  0000                     _LATBbits	set	3978
   305  0000                     _T0CONbits	set	4053
   306  0000                     _PCL	set	4089
   307  0000                     _PCLATH	set	4090
   308  0000                     _INTCONbits	set	4082
   309  0000                     _PORTBbits	set	3969
   310  0000                     _PIR1bits	set	3998
   311  0000                     _PIE1bits	set	3997
   312  0000                     _RCIF	set	31989
   313  0000                     _TRMT	set	32097
   314  0000                     _TXEN	set	32101
   315  0000                     _CREN	set	32092
   316  0000                     _SPEN	set	32095
   317  0000                     _SYNC	set	32100
   318  0000                     _BRGH	set	32098
   319  0000                     _TMR2IF	set	31985
   320  0000                     _INT0IE	set	32660
   321  0000                     _INT0IF	set	32657
   322  0000                     _T0IF	set	32658
   323  0000                     _TMR0IF	set	32658
   324  006181                     STR_18:
   325  006181  0A                 	db	10
   326  006182  25                 	db	37
   327  006183  73                 	db	115	;'s'
   328  006184  20                 	db	32
   329  006185  3B                 	db	59	;';'
   330  006186  20                 	db	32
   331  006187  25                 	db	37
   332  006188  73                 	db	115	;'s'
   333  006189  20                 	db	32
   334  00618A  3B                 	db	59	;';'
   335  00618B  20                 	db	32
   336  00618C  25                 	db	37
   337  00618D  73                 	db	115	;'s'
   338  00618E  20                 	db	32
   339  00618F  3B                 	db	59	;';'
   340  006190  20                 	db	32
   341  006191  25                 	db	37
   342  006192  73                 	db	115	;'s'
   343  006193  20                 	db	32
   344  006194  3B                 	db	59	;';'
   345  006195  00                 	db	0
   346  006196  6F                 	db	111	;'o'
   347  006197  20                 	db	32
   348  006198  53                 	db	83	;'S'
   349  006199  69                 	db	105	;'i'
   350  00619A  73                 	db	115	;'s'
   351  00619B  74                 	db	116	;'t'
   352  00619C  65                 	db	101	;'e'
   353  00619D  6D                 	db	109	;'m'
   354  00619E  61                 	db	97	;'a'
   355  00619F  20                 	db	32
   356  0061A0  64                 	db	100	;'d'
   357  0061A1  65                 	db	101	;'e'
   358  0061A2  20                 	db	32
   359  0061A3  61                 	db	97	;'a'
   360  0061A4  72                 	db	114	;'r'
   361  0061A5  71                 	db	113	;'q'
   362  0061A6  75                 	db	117	;'u'
   363  0061A7  69                 	db	105	;'i'
   364  0061A8  76                 	db	118	;'v'
   365  0061A9  6F                 	db	111	;'o'
   366  0061AA  00                 	db	0
   367  0061AB                     STR_21:
   368  0061AB  49                 	db	73	;'I'
   369  0061AC  6E                 	db	110	;'n'
   370  0061AD  73                 	db	115	;'s'
   371  0061AE  69                 	db	105	;'i'
   372  0061AF  72                 	db	114	;'r'
   373  0061B0  61                 	db	97	;'a'
   374  0061B1  20                 	db	32
   375  0061B2  6F                 	db	111	;'o'
   376  0061B3  20                 	db	32
   377  0061B4  43                 	db	67	;'C'
   378  0061B5  61                 	db	97	;'a'
   379  0061B6  72                 	db	114	;'r'
   380  0061B7  74                 	db	116	;'t'
   381  0061B8  61                 	db	97	;'a'
   382  0061B9  6F                 	db	111	;'o'
   383  0061BA  00                 	db	0
   384  0061BB  45                 	db	69	;'E'
   385  0061BC  72                 	db	114	;'r'
   386  0061BD  72                 	db	114	;'r'
   387  0061BE  6F                 	db	111	;'o'
   388  0061BF  20                 	db	32
   389  0061C0  61                 	db	97	;'a'
   390  0061C1  6F                 	db	111	;'o'
   391  0061C2  20                 	db	32
   392  0061C3  6D                 	db	109	;'m'
   393  0061C4  6F                 	db	111	;'o'
   394  0061C5  6E                 	db	110	;'n'
   395  0061C6  74                 	db	116	;'t'
   396  0061C7  61                 	db	97	;'a'
   397  0061C8  72                 	db	114	;'r'
   398  0061C9  00                 	db	0
   399  0061CA  45                 	db	69	;'E'
   400  0061CB  72                 	db	114	;'r'
   401  0061CC  72                 	db	114	;'r'
   402  0061CD  6F                 	db	111	;'o'
   403  0061CE  20                 	db	32
   404  0061CF  61                 	db	97	;'a'
   405  0061D0  6F                 	db	111	;'o'
   406  0061D1  20                 	db	32
   407  0061D2  63                 	db	99	;'c'
   408  0061D3  72                 	db	114	;'r'
   409  0061D4  69                 	db	105	;'i'
   410  0061D5  61                 	db	97	;'a'
   411  0061D6  72                 	db	114	;'r'
   412  0061D7  00                 	db	0
   413  0061D8                     STR_9:
   414  0061D8  52                 	db	82	;'R'
   415  0061D9  45                 	db	69	;'E'
   416  0061DA  47                 	db	71	;'G'
   417  0061DB  49                 	db	73	;'I'
   418  0061DC  41                 	db	65	;'A'
   419  0061DD  4F                 	db	79	;'O'
   420  0061DE  20                 	db	32
   421  0061DF  4E                 	db	78	;'N'
   422  0061E0  45                 	db	69	;'E'
   423  0061E1  47                 	db	71	;'G'
   424  0061E2  41                 	db	65	;'A'
   425  0061E3  44                 	db	68	;'D'
   426  0061E4  41                 	db	65	;'A'
   427  0061E5  00                 	db	0
   428  0061E6  65                 	db	101	;'e'
   429  0061E7  78                 	db	120	;'x'
   430  0061E8  74                 	db	116	;'t'
   431  0061E9  66                 	db	102	;'f'
   432  0061EA  65                 	db	101	;'e'
   433  0061EB  6E                 	db	110	;'n'
   434  0061EC  63                 	db	99	;'c'
   435  0061ED  65                 	db	101	;'e'
   436  0061EE  2E                 	db	46
   437  0061EF  74                 	db	116	;'t'
   438  0061F0  78                 	db	120	;'x'
   439  0061F1  74                 	db	116	;'t'
   440  0061F2  00                 	db	0
   441  0061F3                     STR_7:
   442  0061F3  2D                 	db	45
   443  0061F4  32                 	db	50	;'2'
   444  0061F5  33                 	db	51	;'3'
   445  0061F6  36                 	db	54	;'6'
   446  0061F7  35                 	db	53	;'5'
   447  0061F8  2E                 	db	46
   448  0061F9  39                 	db	57	;'9'
   449  0061FA  39                 	db	57	;'9'
   450  0061FB  37                 	db	55	;'7'
   451  0061FC  33                 	db	51	;'3'
   452  0061FD  31                 	db	49	;'1'
   453  0061FE  00                 	db	0
   454  0061FF                     STR_1:
   455  0061FF  2D                 	db	45
   456  006200  32                 	db	50	;'2'
   457  006201  33                 	db	51	;'3'
   458  006202  36                 	db	54	;'6'
   459  006203  35                 	db	53	;'5'
   460  006204  2E                 	db	46
   461  006205  38                 	db	56	;'8'
   462  006206  34                 	db	52	;'4'
   463  006207  39                 	db	57	;'9'
   464  006208  39                 	db	57	;'9'
   465  006209  31                 	db	49	;'1'
   466  00620A  00                 	db	0
   467  00620B                     STR_2:
   468  00620B  2D                 	db	45
   469  00620C  34                 	db	52	;'4'
   470  00620D  36                 	db	54	;'6'
   471  00620E  35                 	db	53	;'5'
   472  00620F  33                 	db	51	;'3'
   473  006210  2E                 	db	46
   474  006211  31                 	db	49	;'1'
   475  006212  36                 	db	54	;'6'
   476  006213  36                 	db	54	;'6'
   477  006214  32                 	db	50	;'2'
   478  006215  32                 	db	50	;'2'
   479  006216  00                 	db	0
   480  006217                     STR_5:
   481  006217  2D                 	db	45
   482  006218  32                 	db	50	;'2'
   483  006219  33                 	db	51	;'3'
   484  00621A  36                 	db	54	;'6'
   485  00621B  35                 	db	53	;'5'
   486  00621C  2E                 	db	46
   487  00621D  39                 	db	57	;'9'
   488  00621E  39                 	db	57	;'9'
   489  00621F  36                 	db	54	;'6'
   490  006220  38                 	db	56	;'8'
   491  006221  32                 	db	50	;'2'
   492  006222  00                 	db	0
   493  006223                     STR_4:
   494  006223  2D                 	db	45
   495  006224  34                 	db	52	;'4'
   496  006225  36                 	db	54	;'6'
   497  006226  35                 	db	53	;'5'
   498  006227  33                 	db	51	;'3'
   499  006228  2E                 	db	46
   500  006229  30                 	db	48	;'0'
   501  00622A  30                 	db	48	;'0'
   502  00622B  34                 	db	52	;'4'
   503  00622C  37                 	db	55	;'7'
   504  00622D  35                 	db	53	;'5'
   505  00622E  00                 	db	0
   506  00622F                     STR_23:
   507  00622F  4D                 	db	77	;'M'
   508  006230  4D                 	db	77	;'M'
   509  006231  43                 	db	67	;'C'
   510  006232  20                 	db	32
   511  006233  56                 	db	86	;'V'
   512  006234  65                 	db	101	;'e'
   513  006235  72                 	db	114	;'r'
   514  006236  2E                 	db	46
   515  006237  20                 	db	32
   516  006238  33                 	db	51	;'3'
   517  006239  00                 	db	0
   518  00623A                     STR_20:
   519  00623A  53                 	db	83	;'S'
   520  00623B  65                 	db	101	;'e'
   521  00623C  6D                 	db	109	;'m'
   522  00623D  20                 	db	32
   523  00623E  43                 	db	67	;'C'
   524  00623F  61                 	db	97	;'a'
   525  006240  72                 	db	114	;'r'
   526  006241  74                 	db	116	;'t'
   527  006242  61                 	db	97	;'a'
   528  006243  6F                 	db	111	;'o'
   529  006244  00                 	db	0
   530  006245                     STR_22:
   531  006245  53                 	db	83	;'S'
   532  006246  44                 	db	68	;'D'
   533  006247  20                 	db	32
   534  006248  56                 	db	86	;'V'
   535  006249  45                 	db	69	;'E'
   536  00624A  52                 	db	82	;'R'
   537  00624B  2E                 	db	46
   538  00624C  20                 	db	32
   539  00624D  31                 	db	49	;'1'
   540  00624E  00                 	db	0
   541  00624F  56                 	db	86	;'V'
   542  006250  65                 	db	101	;'e'
   543  006251  72                 	db	114	;'r'
   544  006252  69                 	db	105	;'i'
   545  006253  66                 	db	102	;'f'
   546  006254  69                 	db	105	;'i'
   547  006255  71                 	db	113	;'q'
   548  006256  75                 	db	117	;'u'
   549  006257  65                 	db	101	;'e'
   550  006258  00                 	db	0
   551  006259  6F                 	db	111	;'o'
   552  00625A  20                 	db	32
   553  00625B  61                 	db	97	;'a'
   554  00625C  72                 	db	114	;'r'
   555  00625D  71                 	db	113	;'q'
   556  00625E  75                 	db	117	;'u'
   557  00625F  69                 	db	105	;'i'
   558  006260  76                 	db	118	;'v'
   559  006261  6F                 	db	111	;'o'
   560  006262  00                 	db	0
   561  006263  6F                 	db	111	;'o'
   562  006264  20                 	db	32
   563  006265  63                 	db	99	;'c'
   564  006266  61                 	db	97	;'a'
   565  006267  72                 	db	114	;'r'
   566  006268  74                 	db	116	;'t'
   567  006269  61                 	db	97	;'a'
   568  00626A  6F                 	db	111	;'o'
   569  00626B  00                 	db	0
   570  00626C                     STR_11:
   571  00626C  47                 	db	71	;'G'
   572  00626D  50                 	db	80	;'P'
   573  00626E  47                 	db	71	;'G'
   574  00626F  47                 	db	71	;'G'
   575  006270  41                 	db	65	;'A'
   576  006271  00                 	db	0
   577  006272                     STR_10:
   578  006272  47                 	db	71	;'G'
   579  006273  50                 	db	80	;'P'
   580  006274  52                 	db	82	;'R'
   581  006275  4D                 	db	77	;'M'
   582  006276  43                 	db	67	;'C'
   583  006277  00                 	db	0
   584  006278                     STR_25:
   585  006278  46                 	db	70	;'F'
   586  006279  41                 	db	65	;'A'
   587  00627A  54                 	db	84	;'T'
   588  00627B  00                 	db	0
   589  00627C  0D                 	db	13
   590  00627D  0A                 	db	10
   591  00627E  00                 	db	0
   592  00627F  00                 	db	0	; dummy byte at the end
   593  0000                     
   594                           ; #config settings
   595                           
   596                           	psect	cinit
   597  004552                     __pcinit:
   598                           	opt stack 0
   599  004552                     start_initialization:
   600                           	opt stack 0
   601  004552                     __initialization:
   602                           	opt stack 0
   603                           
   604                           ; Initialize objects allocated to BANK1 (51 bytes)
   605                           ; load TBLPTR registers with __pidataBANK1
   606  004552  0E88               	movlw	low __pidataBANK1
   607  004554  6EF6               	movwf	tblptrl,c
   608  004556  0E4D               	movlw	high __pidataBANK1
   609  004558  6EF7               	movwf	tblptrh,c
   610  00455A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   611  00455C  6EF8               	movwf	tblptru,c
   612  00455E  EE01  F099         	lfsr	0,__pdataBANK1
   613  004562  EE10 F033          	lfsr	1,51
   614  004566                     copy_data0:
   615  004566  0009               	tblrd		*+
   616  004568  CFF5 FFEE          	movff	tablat,postinc0
   617  00456C  50E5               	movf	postdec1,w,c
   618  00456E  50E1               	movf	fsr1l,w,c
   619  004570  E1FA               	bnz	copy_data0
   620                           
   621                           ; Initialize objects allocated to COMRAM (1 bytes)
   622                           ; load TBLPTR registers with __pidataCOMRAM
   623  004572  0E70               	movlw	low __pidataCOMRAM
   624  004574  6EF6               	movwf	tblptrl,c
   625  004576  0E50               	movlw	high __pidataCOMRAM
   626  004578  6EF7               	movwf	tblptrh,c
   627  00457A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   628  00457C  6EF8               	movwf	tblptru,c
   629  00457E  0009               	tblrd		*+	;fetch initializer
   630  004580  CFF5 F03E          	movff	tablat,__pdataCOMRAM
   631                           
   632                           ; Clear objects allocated to BIGRAM (848 bytes)
   633  004584  EE02  F037         	lfsr	0,__pbssBIGRAM
   634  004588  EE13 F050          	lfsr	1,848
   635  00458C                     clear_0:
   636  00458C  6AEE               	clrf	postinc0,c
   637  00458E  50E5               	movf	postdec1,w,c
   638  004590  50E1               	movf	fsr1l,w,c
   639  004592  E1FC               	bnz	clear_0
   640  004594  50E2               	movf	fsr1h,w,c
   641  004596  E1FA               	bnz	clear_0
   642                           
   643                           ; Clear objects allocated to BANK2 (20 bytes)
   644  004598  EE02  F023         	lfsr	0,__pbssBANK2
   645  00459C  0E14               	movlw	20
   646  00459E                     clear_1:
   647  00459E  6AEE               	clrf	postinc0,c
   648  0045A0  06E8               	decf	wreg,f,c
   649  0045A2  E1FD               	bnz	clear_1
   650                           
   651                           ; Clear objects allocated to BANK1 (153 bytes)
   652  0045A4  EE01  F000         	lfsr	0,__pbssBANK1
   653  0045A8  0E99               	movlw	153
   654  0045AA                     clear_2:
   655  0045AA  6AEE               	clrf	postinc0,c
   656  0045AC  06E8               	decf	wreg,f,c
   657  0045AE  E1FD               	bnz	clear_2
   658                           
   659                           ; Clear objects allocated to BANK0 (20 bytes)
   660  0045B0  EE00  F0EC         	lfsr	0,__pbssBANK0
   661  0045B4  0E14               	movlw	20
   662  0045B6                     clear_3:
   663  0045B6  6AEE               	clrf	postinc0,c
   664  0045B8  06E8               	decf	wreg,f,c
   665  0045BA  E1FD               	bnz	clear_3
   666                           
   667                           ; Clear objects allocated to COMRAM (28 bytes)
   668  0045BC  EE00  F022         	lfsr	0,__pbssCOMRAM
   669  0045C0  0E1C               	movlw	28
   670  0045C2                     clear_4:
   671  0045C2  6AEE               	clrf	postinc0,c
   672  0045C4  06E8               	decf	wreg,f,c
   673  0045C6  E1FD               	bnz	clear_4
   674  0045C8                     end_of_initialization:
   675                           	opt stack 0
   676  0045C8                     __end_of__initialization:
   677                           	opt stack 0
   678  0045C8  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   679  0045CA  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   680  0045CC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   681  0045CE  6EF8               	movwf	tblptru,c
   682  0045D0  0100               	movlb	0
   683  0045D2  EFF6  F026         	goto	_main	;jump to C main() function
   684                           tblptru	equ	0xFF8
   685                           tblptrh	equ	0xFF7
   686                           tblptrl	equ	0xFF6
   687                           tablat	equ	0xFF5
   688                           postinc0	equ	0xFEE
   689                           wreg	equ	0xFE8
   690                           postdec1	equ	0xFE5
   691                           fsr1h	equ	0xFE2
   692                           fsr1l	equ	0xFE1
   693                           
   694                           	psect	bssCOMRAM
   695  000022                     __pbssCOMRAM:
   696                           	opt stack 0
   697  000022                     _tempo_tarefa:
   698                           	opt stack 0
   699  000022                     	ds	6
   700  000028                     _data_buff:
   701                           	opt stack 0
   702  000028                     	ds	2
   703  00002A                     _GPGGA_ok:
   704                           	opt stack 0
   705  00002A                     	ds	2
   706  00002C                     _GPRMC_ok:
   707                           	opt stack 0
   708  00002C                     	ds	2
   709  00002E                     _time_sd:
   710                           	opt stack 0
   711  00002E                     	ds	2
   712  000030                     _timeout_tarefa:
   713                           	opt stack 0
   714  000030                     	ds	2
   715  000032                     _dado:
   716                           	opt stack 0
   717  000032                     	ds	1
   718  000033                     timer_dois@flag:
   719                           	opt stack 0
   720  000033                     	ds	1
   721  000034                     _estado:
   722                           	opt stack 0
   723  000034                     	ds	1
   724  000035                     _data_hoje:
   725                           	opt stack 0
   726  000035                     	ds	1
   727  000036                     _Term:
   728                           	opt stack 0
   729  000036                     	ds	1
   730  000037                     _SentenceType:
   731                           	opt stack 0
   732  000037                     	ds	1
   733  000038                     _char_number:
   734                           	opt stack 0
   735  000038                     	ds	1
   736  000039                     _tarefa_em_execucao:
   737                           	opt stack 0
   738  000039                     	ds	1
   739  00003A                     _data_uart_recebe:
   740                           	opt stack 0
   741  00003A                     	ds	1
   742  00003B                     _rawSatellites:
   743                           	opt stack 0
   744  00003B                     	ds	3
   745                           tblptru	equ	0xFF8
   746                           tblptrh	equ	0xFF7
   747                           tblptrl	equ	0xFF6
   748                           tablat	equ	0xFF5
   749                           postinc0	equ	0xFEE
   750                           wreg	equ	0xFE8
   751                           postdec1	equ	0xFE5
   752                           fsr1h	equ	0xFE2
   753                           fsr1l	equ	0xFE1
   754                           
   755                           	psect	dataCOMRAM
   756  00003E                     __pdataCOMRAM:
   757                           	opt stack 0
   758  00003E                     leitura_sdcard@size:
   759                           	opt stack 0
   760  00003E                     	ds	1
   761                           tblptru	equ	0xFF8
   762                           tblptrh	equ	0xFF7
   763                           tblptrl	equ	0xFF6
   764                           tablat	equ	0xFF5
   765                           postinc0	equ	0xFEE
   766                           wreg	equ	0xFE8
   767                           postdec1	equ	0xFE5
   768                           fsr1h	equ	0xFE2
   769                           fsr1l	equ	0xFE1
   770                           
   771                           	psect	bssBANK0
   772  0000EC                     __pbssBANK0:
   773                           	opt stack 0
   774  0000EC                     _tempo_backup:
   775                           	opt stack 0
   776  0000EC                     	ds	6
   777  0000F2                     _p_tarefas:
   778                           	opt stack 0
   779  0000F2                     	ds	6
   780  0000F8                     _flag:
   781                           	opt stack 0
   782  0000F8                     	ds	3
   783  0000FB                     _fsid:
   784                           	opt stack 0
   785  0000FB                     	ds	2
   786  0000FD                     _FatFs:
   787                           	opt stack 0
   788  0000FD                     	ds	2
   789  0000FF                     _sinaliza_int_timer:
   790                           	opt stack 0
   791  0000FF                     	ds	1
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           postdec1	equ	0xFE5
   799                           fsr1h	equ	0xFE2
   800                           fsr1l	equ	0xFE1
   801                           
   802                           	psect	bssBANK1
   803  000100                     __pbssBANK1:
   804                           	opt stack 0
   805  000100                     _string_dado:
   806                           	opt stack 0
   807  000100                     	ds	44
   808  00012C                     _fil:
   809                           	opt stack 0
   810  00012C                     	ds	28
   811  000148                     _rawLongitude:
   812                           	opt stack 0
   813  000148                     	ds	13
   814  000155                     _rawLatitude:
   815                           	opt stack 0
   816  000155                     	ds	13
   817  000162                     _buffer:
   818                           	opt stack 0
   819  000162                     	ds	12
   820  00016E                     _rawTime:
   821                           	opt stack 0
   822  00016E                     	ds	11
   823  000179                     _rawAltitude:
   824                           	opt stack 0
   825  000179                     	ds	7
   826  000180                     _rawDate:
   827                           	opt stack 0
   828  000180                     	ds	7
   829  000187                     _rawCourse:
   830                           	opt stack 0
   831  000187                     	ds	6
   832  00018D                     _rawSpeed:
   833                           	opt stack 0
   834  00018D                     	ds	6
   835  000193                     _sentence:
   836                           	opt stack 0
   837  000193                     	ds	6
   838                           tblptru	equ	0xFF8
   839                           tblptrh	equ	0xFF7
   840                           tblptrl	equ	0xFF6
   841                           tablat	equ	0xFF5
   842                           postinc0	equ	0xFEE
   843                           wreg	equ	0xFE8
   844                           postdec1	equ	0xFE5
   845                           fsr1h	equ	0xFE2
   846                           fsr1l	equ	0xFE1
   847                           
   848                           	psect	dataBANK1
   849  000199                     __pdataBANK1:
   850                           	opt stack 0
   851  000199                     verifica_fence_externo@F4367:
   852                           	opt stack 0
   853  000199                     	ds	11
   854  0001A4                     verifica_fence_externo@F4365:
   855                           	opt stack 0
   856  0001A4                     	ds	11
   857  0001AF                     escreve_inteiro_uart@F3958:
   858                           	opt stack 0
   859  0001AF                     	ds	7
   860  0001B6                     escreve_inteiro_lcd@F3966:
   861                           	opt stack 0
   862  0001B6                     	ds	7
   863  0001BD                     _filename:
   864                           	opt stack 0
   865  0001BD                     	ds	15
   866                           tblptru	equ	0xFF8
   867                           tblptrh	equ	0xFF7
   868                           tblptrl	equ	0xFF6
   869                           tablat	equ	0xFF5
   870                           postinc0	equ	0xFEE
   871                           wreg	equ	0xFE8
   872                           postdec1	equ	0xFE5
   873                           fsr1h	equ	0xFE2
   874                           fsr1l	equ	0xFE1
   875                           
   876                           	psect	bssBANK2
   877  000223                     __pbssBANK2:
   878                           	opt stack 0
   879  000223                     _dado_arquivo:
   880                           	opt stack 0
   881  000223                     	ds	20
   882                           tblptru	equ	0xFF8
   883                           tblptrh	equ	0xFF7
   884                           tblptrl	equ	0xFF6
   885                           tablat	equ	0xFF5
   886                           postinc0	equ	0xFEE
   887                           wreg	equ	0xFE8
   888                           postdec1	equ	0xFE5
   889                           fsr1h	equ	0xFE2
   890                           fsr1l	equ	0xFE1
   891                           
   892                           	psect	bssBIGRAM
   893  000237                     __pbssBIGRAM:
   894                           	opt stack 0
   895  000237                     _fs:
   896                           	opt stack 0
   897  000237                     	ds	544
   898  000457                     _poligono_ext:
   899                           	opt stack 0
   900  000457                     	ds	304
   901                           tblptru	equ	0xFF8
   902                           tblptrh	equ	0xFF7
   903                           tblptrl	equ	0xFF6
   904                           tablat	equ	0xFF5
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           postdec1	equ	0xFE5
   908                           fsr1h	equ	0xFE2
   909                           fsr1l	equ	0xFE1
   910                           
   911                           	psect	cstackBANK2
   912  000200                     __pcstackBANK2:
   913                           	opt stack 0
   914  000200                     fprintf@s:
   915                           	opt stack 0
   916                           
   917                           ; 16 bytes @ 0x0
   918  000200                     	ds	16
   919  000210                     fprintf@res:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x10
   923  000210                     	ds	2
   924  000212                     _fprintf$2495:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x12
   928  000212                     	ds	2
   929  000214                     fprintf@w:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x14
   933  000214                     	ds	2
   934  000216                     fprintf@f:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x16
   938  000216                     	ds	1
   939  000217                     fprintf@r:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x17
   943  000217                     	ds	1
   944  000218                     fprintf@val:
   945                           	opt stack 0
   946                           
   947                           ; 4 bytes @ 0x18
   948  000218                     	ds	4
   949  00021C                     fprintf@arp:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x1C
   953  00021C                     	ds	2
   954  00021E                     fprintf@cc:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x1E
   958  00021E                     	ds	2
   959  000220                     fprintf@i:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x20
   963  000220                     	ds	2
   964  000222                     fprintf@c:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x22
   968  000222                     	ds	1
   969                           tblptru	equ	0xFF8
   970                           tblptrh	equ	0xFF7
   971                           tblptrl	equ	0xFF6
   972                           tablat	equ	0xFF5
   973                           postinc0	equ	0xFEE
   974                           wreg	equ	0xFE8
   975                           postdec1	equ	0xFE5
   976                           fsr1h	equ	0xFE2
   977                           fsr1l	equ	0xFE1
   978                           
   979                           	psect	cstackBANK1
   980  0001CC                     __pcstackBANK1:
   981                           	opt stack 0
   982  0001CC                     ?_fputs:
   983                           	opt stack 0
   984  0001CC                     fputs@str:
   985                           	opt stack 0
   986  0001CC                     f_open@fn:
   987                           	opt stack 0
   988                           
   989                           ; 12 bytes @ 0x0
   990  0001CC                     	ds	2
   991  0001CE                     fputs@fil:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x2
   995  0001CE                     	ds	2
   996  0001D0                     ??_fputs:
   997                           
   998                           ; 1 bytes @ 0x4
   999  0001D0                     	ds	1
  1000  0001D1                     fputs@n:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x5
  1004  0001D1                     	ds	2
  1005  0001D3                     ?_fprintf:
  1006                           	opt stack 0
  1007  0001D3                     fprintf@fil:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x7
  1011  0001D3                     	ds	2
  1012  0001D5                     fprintf@str:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x9
  1016  0001D5                     	ds	3
  1017  0001D8                     f_open@rs:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0xC
  1021  0001D8                     	ds	2
  1022  0001DA                     f_open@dw:
  1023                           	opt stack 0
  1024                           
  1025                           ; 4 bytes @ 0xE
  1026  0001DA                     	ds	4
  1027  0001DE                     f_open@res:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x12
  1031  0001DE                     	ds	1
  1032  0001DF                     ??_fprintf:
  1033  0001DF                     f_open@dir:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x13
  1037  0001DF                     	ds	2
  1038  0001E1                     f_open@dj:
  1039                           	opt stack 0
  1040                           
  1041                           ; 14 bytes @ 0x15
  1042  0001E1                     	ds	14
  1043  0001EF                     
  1044                           ; 1 bytes @ 0x23
  1045  0001EF                     	ds	2
  1046  0001F1                     escalonador@cont:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x25
  1050  0001F1                     	ds	1
  1051                           tblptru	equ	0xFF8
  1052                           tblptrh	equ	0xFF7
  1053                           tblptrl	equ	0xFF6
  1054                           tablat	equ	0xFF5
  1055                           postinc0	equ	0xFEE
  1056                           wreg	equ	0xFE8
  1057                           postdec1	equ	0xFE5
  1058                           fsr1h	equ	0xFE2
  1059                           fsr1l	equ	0xFE1
  1060                           
  1061                           	psect	cstackBANK0
  1062  000060                     __pcstackBANK0:
  1063                           	opt stack 0
  1064  000060                     ??_dummy_clocks:
  1065  000060                     ?_Latitude:
  1066                           	opt stack 0
  1067  000060                     ?_Longitude:
  1068                           	opt stack 0
  1069  000060                     ?_strlen:
  1070                           	opt stack 0
  1071  000060                     ?_memcmp:
  1072                           	opt stack 0
  1073  000060                     ?___wmul:
  1074                           	opt stack 0
  1075  000060                     ?_get_fattime:
  1076                           	opt stack 0
  1077  000060                     ?___lmul:
  1078                           	opt stack 0
  1079  000060                     ?___aldiv:
  1080                           	opt stack 0
  1081  000060                     ?___lldiv:
  1082                           	opt stack 0
  1083  000060                     ?___llmod:
  1084                           	opt stack 0
  1085  000060                     escreve_SPI@TempVar:
  1086                           	opt stack 0
  1087  000060                     disk_ioctl@cmd:
  1088                           	opt stack 0
  1089  000060                     sdc_disk_status@stat:
  1090                           	opt stack 0
  1091  000060                     delay@contador_ext:
  1092                           	opt stack 0
  1093  000060                     _isdigit$2833:
  1094                           	opt stack 0
  1095  000060                     write_timer_zero@timer0:
  1096                           	opt stack 0
  1097  000060                     f_mount@fs:
  1098                           	opt stack 0
  1099  000060                     ___wmul@multiplier:
  1100                           	opt stack 0
  1101  000060                     memcmp@s1:
  1102                           	opt stack 0
  1103  000060                     memcpy@d1:
  1104                           	opt stack 0
  1105  000060                     memset@p1:
  1106                           	opt stack 0
  1107  000060                     strlen@s:
  1108                           	opt stack 0
  1109  000060                     wait_ready@timeout:
  1110                           	opt stack 0
  1111  000060                     ___lmul@multiplier:
  1112                           	opt stack 0
  1113  000060                     ___aldiv@dividend:
  1114                           	opt stack 0
  1115  000060                     ___lldiv@dividend:
  1116                           	opt stack 0
  1117  000060                     ___llmod@dividend:
  1118                           	opt stack 0
  1119                           
  1120                           ; 4 bytes @ 0x0
  1121  000060                     	ds	1
  1122  000061                     escreve_SPI@dado:
  1123                           	opt stack 0
  1124  000061                     sdc_disk_status@pdrv:
  1125                           	opt stack 0
  1126  000061                     delay@contador_int:
  1127                           	opt stack 0
  1128  000061                     isdigit@c:
  1129                           	opt stack 0
  1130  000061                     disk_ioctl@buff:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x1
  1134  000061                     	ds	1
  1135  000062                     ??_init_lcd:
  1136  000062                     ??_strlen:
  1137  000062                     dummy_clocks@n:
  1138                           	opt stack 0
  1139  000062                     posicao_cursor_lcd@coluna:
  1140                           	opt stack 0
  1141  000062                     disk_status@result:
  1142                           	opt stack 0
  1143  000062                     escreve_frase_ram_lcd@buffer:
  1144                           	opt stack 0
  1145  000062                     write_timer_zero@timer:
  1146                           	opt stack 0
  1147  000062                     ___wmul@multiplicand:
  1148                           	opt stack 0
  1149  000062                     memcmp@s2:
  1150                           	opt stack 0
  1151  000062                     memcpy@s1:
  1152                           	opt stack 0
  1153  000062                     memset@c:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x2
  1157  000062                     	ds	1
  1158  000063                     disk_ioctl@pdrv:
  1159                           	opt stack 0
  1160  000063                     posicao_cursor_lcd@linha:
  1161                           	opt stack 0
  1162  000063                     dummy_clocks@i:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x3
  1166  000063                     	ds	1
  1167  000064                     ??_get_fattime:
  1168  000064                     wait_ready@res:
  1169                           	opt stack 0
  1170  000064                     disk_status@pdrv:
  1171                           	opt stack 0
  1172  000064                     disk_ioctl@res:
  1173                           	opt stack 0
  1174  000064                     posicao_cursor_lcd@endereco:
  1175                           	opt stack 0
  1176  000064                     ___wmul@product:
  1177                           	opt stack 0
  1178  000064                     memcmp@n:
  1179                           	opt stack 0
  1180  000064                     memcpy@n:
  1181                           	opt stack 0
  1182  000064                     memset@n:
  1183                           	opt stack 0
  1184  000064                     strlen@cp:
  1185                           	opt stack 0
  1186  000064                     ___lmul@multiplicand:
  1187                           	opt stack 0
  1188  000064                     ___aldiv@divisor:
  1189                           	opt stack 0
  1190  000064                     ___lldiv@divisor:
  1191                           	opt stack 0
  1192  000064                     ___llmod@divisor:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x4
  1196  000064                     	ds	1
  1197  000065                     ??_mensagem_inicial:
  1198  000065                     disk_status@stat:
  1199                           	opt stack 0
  1200  000065                     command@arg:
  1201                           	opt stack 0
  1202                           
  1203                           ; 4 bytes @ 0x5
  1204  000065                     	ds	1
  1205  000066                     ??_memcmp:
  1206  000066                     ?_atoi:
  1207                           	opt stack 0
  1208  000066                     memcpy@tmp:
  1209                           	opt stack 0
  1210  000066                     monta_sd@dado:
  1211                           	opt stack 0
  1212  000066                     validate@fs:
  1213                           	opt stack 0
  1214  000066                     atoi@s:
  1215                           	opt stack 0
  1216  000066                     memset@p:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x6
  1220  000066                     	ds	1
  1221  000067                     memcpy@d:
  1222                           	opt stack 0
  1223  000067                     mensagem_inicial@msg_linha_um:
  1224                           	opt stack 0
  1225                           
  1226                           ; 17 bytes @ 0x7
  1227  000067                     	ds	1
  1228  000068                     ??_atoi:
  1229  000068                     monta_sd@index:
  1230                           	opt stack 0
  1231  000068                     ___aldiv@counter:
  1232                           	opt stack 0
  1233  000068                     make_dirfile@path:
  1234                           	opt stack 0
  1235  000068                     validate@id:
  1236                           	opt stack 0
  1237  000068                     ___lmul@product:
  1238                           	opt stack 0
  1239  000068                     ___lldiv@quotient:
  1240                           	opt stack 0
  1241                           
  1242                           ; 4 bytes @ 0x8
  1243  000068                     	ds	1
  1244  000069                     command@CRC:
  1245                           	opt stack 0
  1246  000069                     monta_sd@size:
  1247                           	opt stack 0
  1248  000069                     ___aldiv@sign:
  1249                           	opt stack 0
  1250  000069                     memcpy@s:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x9
  1254  000069                     	ds	1
  1255  00006A                     ??_validate:
  1256  00006A                     command@CMD:
  1257                           	opt stack 0
  1258  00006A                     monta_sd@i:
  1259                           	opt stack 0
  1260  00006A                     atoi@sign:
  1261                           	opt stack 0
  1262  00006A                     make_dirfile@dirname:
  1263                           	opt stack 0
  1264  00006A                     ___aldiv@quotient:
  1265                           	opt stack 0
  1266                           
  1267                           ; 4 bytes @ 0xA
  1268  00006A                     	ds	1
  1269  00006B                     command@argument:
  1270                           	opt stack 0
  1271  00006B                     atoi@a:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0xB
  1275  00006B                     	ds	1
  1276  00006C                     ??_make_dirfile:
  1277  00006C                     ?_clust2sect:
  1278                           	opt stack 0
  1279  00006C                     ___lldiv@counter:
  1280                           	opt stack 0
  1281  00006C                     sdc_reset@i:
  1282                           	opt stack 0
  1283  00006C                     sdc_disk_read@p_buff:
  1284                           	opt stack 0
  1285  00006C                     sdc_disk_write@p_buff:
  1286                           	opt stack 0
  1287  00006C                     clust2sect@clust:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0xC
  1291  00006C                     	ds	1
  1292  00006D                     ??_verifica_fence_externo:
  1293                           
  1294                           ; 1 bytes @ 0xD
  1295  00006D                     	ds	1
  1296  00006E                     sdc_reset@count_nosd:
  1297                           	opt stack 0
  1298  00006E                     _make_dirfile$2007:
  1299                           	opt stack 0
  1300  00006E                     sdc_disk_read@sector:
  1301                           	opt stack 0
  1302  00006E                     sdc_disk_write@sector:
  1303                           	opt stack 0
  1304  00006E                     configura_baudrate_uart@baudrate:
  1305                           	opt stack 0
  1306                           
  1307                           ; 4 bytes @ 0xE
  1308  00006E                     	ds	2
  1309  000070                     ??_clust2sect:
  1310  000070                     make_dirfile@b:
  1311                           	opt stack 0
  1312  000070                     sdc_reset@count:
  1313                           	opt stack 0
  1314                           
  1315                           ; 2 bytes @ 0x10
  1316  000070                     	ds	1
  1317  000071                     make_dirfile@t:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x11
  1321  000071                     	ds	1
  1322  000072                     ??_configura_baudrate_uart:
  1323  000072                     sdc_reset@buff:
  1324                           	opt stack 0
  1325  000072                     sdc_disk_read@count:
  1326                           	opt stack 0
  1327  000072                     sdc_disk_write@count:
  1328                           	opt stack 0
  1329  000072                     make_dirfile@a:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x12
  1333  000072                     	ds	1
  1334  000073                     ??_sdc_disk_initialize:
  1335  000073                     ??_sdc_disk_read:
  1336  000073                     ??_sdc_disk_write:
  1337  000073                     make_dirfile@n:
  1338                           	opt stack 0
  1339  000073                     verifica_fence_externo@temp_buff_lat:
  1340                           	opt stack 0
  1341                           
  1342                           ; 11 bytes @ 0x13
  1343  000073                     	ds	1
  1344  000074                     make_dirfile@c:
  1345                           	opt stack 0
  1346  000074                     sdc_disk_initialize@i:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x14
  1350  000074                     	ds	1
  1351  000075                     clust2sect@fs:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x15
  1355  000075                     	ds	1
  1356  000076                     sdc_disk_initialize@stat:
  1357                           	opt stack 0
  1358                           
  1359                           ; 1 bytes @ 0x16
  1360  000076                     	ds	1
  1361  000077                     sdc_disk_read@ptr:
  1362                           	opt stack 0
  1363  000077                     sdc_disk_initialize@count1:
  1364                           	opt stack 0
  1365  000077                     sdc_disk_write@i:
  1366                           	opt stack 0
  1367                           
  1368                           ; 2 bytes @ 0x17
  1369  000077                     	ds	1
  1370  000078                     sdc_disk_read@start_add:
  1371                           	opt stack 0
  1372  000078                     mensagem_inicial@msg_dois:
  1373                           	opt stack 0
  1374                           
  1375                           ; 17 bytes @ 0x18
  1376  000078                     	ds	1
  1377  000079                     sdc_disk_initialize@crc_number:
  1378                           	opt stack 0
  1379  000079                     sdc_disk_write@count1:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x19
  1383  000079                     	ds	1
  1384  00007A                     configura_baudrate_uart@x:
  1385                           	opt stack 0
  1386                           
  1387                           ; 2 bytes @ 0x1A
  1388  00007A                     	ds	1
  1389  00007B                     sdc_disk_initialize@buff_i:
  1390                           	opt stack 0
  1391  00007B                     sdc_disk_write@res:
  1392                           	opt stack 0
  1393                           
  1394                           ; 1 bytes @ 0x1B
  1395  00007B                     	ds	1
  1396  00007C                     sdc_disk_initialize@ocr:
  1397                           	opt stack 0
  1398  00007C                     sdc_disk_read@length:
  1399                           	opt stack 0
  1400  00007C                     sdc_disk_write@j:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x1C
  1404  00007C                     	ds	1
  1405  00007D                     sdc_disk_initialize@count2:
  1406                           	opt stack 0
  1407                           
  1408                           ; 2 bytes @ 0x1D
  1409  00007D                     	ds	1
  1410  00007E                     sdc_disk_read@buff:
  1411                           	opt stack 0
  1412  00007E                     sdc_disk_write@buff:
  1413                           	opt stack 0
  1414  00007E                     verifica_fence_externo@temp_buff_long:
  1415                           	opt stack 0
  1416                           
  1417                           ; 11 bytes @ 0x1E
  1418  00007E                     	ds	1
  1419  00007F                     sdc_disk_initialize@buff:
  1420                           	opt stack 0
  1421  00007F                     disk_read@buff:
  1422                           	opt stack 0
  1423  00007F                     disk_write@buff:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x1F
  1427  00007F                     	ds	1
  1428  000080                     disk_initialize@pdrv:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x20
  1432  000080                     	ds	1
  1433  000081                     disk_initialize@stat:
  1434                           	opt stack 0
  1435  000081                     disk_read@sector:
  1436                           	opt stack 0
  1437  000081                     disk_write@sector:
  1438                           	opt stack 0
  1439                           
  1440                           ; 4 bytes @ 0x21
  1441  000081                     	ds	4
  1442  000085                     disk_read@count:
  1443                           	opt stack 0
  1444  000085                     disk_write@count:
  1445                           	opt stack 0
  1446                           
  1447                           ; 1 bytes @ 0x25
  1448  000085                     	ds	1
  1449  000086                     ??_disk_read:
  1450  000086                     ??_disk_write:
  1451                           
  1452                           ; 1 bytes @ 0x26
  1453  000086                     	ds	1
  1454  000087                     disk_read@pdrv:
  1455                           	opt stack 0
  1456  000087                     disk_write@pdrv:
  1457                           	opt stack 0
  1458                           
  1459                           ; 1 bytes @ 0x27
  1460  000087                     	ds	1
  1461  000088                     disk_read@result:
  1462                           	opt stack 0
  1463  000088                     disk_write@result:
  1464                           	opt stack 0
  1465                           
  1466                           ; 2 bytes @ 0x28
  1467  000088                     	ds	1
  1468  000089                     verifica_fence_externo@count:
  1469                           	opt stack 0
  1470                           
  1471                           ; 1 bytes @ 0x29
  1472  000089                     	ds	1
  1473  00008A                     disk_read@res:
  1474                           	opt stack 0
  1475  00008A                     disk_write@res:
  1476                           	opt stack 0
  1477  00008A                     verifica_fence_externo@point_buff_gps_lat:
  1478                           	opt stack 0
  1479  00008A                     get_fattime@f_time:
  1480                           	opt stack 0
  1481                           
  1482                           ; 9 bytes @ 0x2A
  1483  00008A                     	ds	1
  1484  00008B                     move_window@sector:
  1485                           	opt stack 0
  1486  00008B                     check_fs@sect:
  1487                           	opt stack 0
  1488                           
  1489                           ; 4 bytes @ 0x2B
  1490  00008B                     	ds	1
  1491  00008C                     verifica_fence_externo@point_buff_gps_long:
  1492                           	opt stack 0
  1493                           
  1494                           ; 2 bytes @ 0x2C
  1495  00008C                     	ds	2
  1496  00008E                     verifica_fence_externo@j:
  1497                           	opt stack 0
  1498                           
  1499                           ; 1 bytes @ 0x2E
  1500  00008E                     	ds	1
  1501  00008F                     ??_move_window:
  1502  00008F                     verifica_fence_externo@point:
  1503                           	opt stack 0
  1504                           
  1505                           ; 1 bytes @ 0x2F
  1506  00008F                     	ds	1
  1507  000090                     verifica_fence_externo@i:
  1508                           	opt stack 0
  1509                           
  1510                           ; 1 bytes @ 0x30
  1511  000090                     	ds	1
  1512  000091                     check_fs@fs:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x31
  1516  000091                     	ds	2
  1517  000093                     auto_mount@path:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x33
  1521  000093                     	ds	2
  1522  000095                     auto_mount@chk_wp:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x35
  1526  000095                     	ds	1
  1527  000096                     ??_auto_mount:
  1528                           
  1529                           ; 1 bytes @ 0x36
  1530  000096                     	ds	3
  1531  000099                     move_window@n:
  1532                           	opt stack 0
  1533                           
  1534                           ; 1 bytes @ 0x39
  1535  000099                     	ds	1
  1536  00009A                     move_window@wsect:
  1537                           	opt stack 0
  1538                           
  1539                           ; 4 bytes @ 0x3A
  1540  00009A                     	ds	4
  1541  00009E                     move_window@fs:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x3E
  1545  00009E                     	ds	2
  1546  0000A0                     ?_get_cluster:
  1547                           	opt stack 0
  1548  0000A0                     sync@fs:
  1549                           	opt stack 0
  1550  0000A0                     get_cluster@clust:
  1551                           	opt stack 0
  1552  0000A0                     put_cluster@clust:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x40
  1556  0000A0                     	ds	2
  1557  0000A2                     ??_get_cluster:
  1558  0000A2                     put_cluster@val:
  1559                           	opt stack 0
  1560  0000A2                     f_sync@fp:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x42
  1564  0000A2                     	ds	2
  1565  0000A4                     ??_put_cluster:
  1566  0000A4                     f_sync@tim:
  1567                           	opt stack 0
  1568                           
  1569                           ; 4 bytes @ 0x44
  1570  0000A4                     	ds	1
  1571  0000A5                     auto_mount@maxclust:
  1572                           	opt stack 0
  1573                           
  1574                           ; 4 bytes @ 0x45
  1575  0000A5                     	ds	3
  1576  0000A8                     f_sync@res:
  1577                           	opt stack 0
  1578  0000A8                     _put_cluster$1897:
  1579                           	opt stack 0
  1580                           
  1581                           ; 2 bytes @ 0x48
  1582  0000A8                     	ds	1
  1583  0000A9                     get_cluster@wc:
  1584                           	opt stack 0
  1585  0000A9                     f_sync@dir:
  1586                           	opt stack 0
  1587  0000A9                     auto_mount@bootsect:
  1588                           	opt stack 0
  1589                           
  1590                           ; 4 bytes @ 0x49
  1591  0000A9                     	ds	1
  1592  0000AA                     _put_cluster$1898:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x4A
  1596  0000AA                     	ds	1
  1597  0000AB                     f_close@fp:
  1598                           	opt stack 0
  1599  0000AB                     get_cluster@fatsect:
  1600                           	opt stack 0
  1601                           
  1602                           ; 4 bytes @ 0x4B
  1603  0000AB                     	ds	1
  1604  0000AC                     put_cluster@fatsect:
  1605                           	opt stack 0
  1606                           
  1607                           ; 4 bytes @ 0x4C
  1608  0000AC                     	ds	1
  1609  0000AD                     f_close@res:
  1610                           	opt stack 0
  1611  0000AD                     auto_mount@totalsect:
  1612                           	opt stack 0
  1613                           
  1614                           ; 4 bytes @ 0x4D
  1615  0000AD                     	ds	2
  1616  0000AF                     get_cluster@bc:
  1617                           	opt stack 0
  1618                           
  1619                           ; 2 bytes @ 0x4F
  1620  0000AF                     	ds	1
  1621  0000B0                     put_cluster@bc:
  1622                           	opt stack 0
  1623                           
  1624                           ; 2 bytes @ 0x50
  1625  0000B0                     	ds	1
  1626  0000B1                     get_cluster@fs:
  1627                           	opt stack 0
  1628  0000B1                     auto_mount@p:
  1629                           	opt stack 0
  1630                           
  1631                           ; 2 bytes @ 0x51
  1632  0000B1                     	ds	1
  1633  0000B2                     put_cluster@p:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0x52
  1637  0000B2                     	ds	1
  1638  0000B3                     auto_mount@fmt:
  1639                           	opt stack 0
  1640  0000B3                     next_dir_entry@dj:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x53
  1644  0000B3                     	ds	1
  1645  0000B4                     auto_mount@stat:
  1646                           	opt stack 0
  1647  0000B4                     put_cluster@fs:
  1648                           	opt stack 0
  1649                           
  1650                           ; 2 bytes @ 0x54
  1651  0000B4                     	ds	1
  1652  0000B5                     ??_next_dir_entry:
  1653  0000B5                     auto_mount@fatsize:
  1654                           	opt stack 0
  1655                           
  1656                           ; 4 bytes @ 0x55
  1657  0000B5                     	ds	1
  1658  0000B6                     ?_create_chain:
  1659                           	opt stack 0
  1660  0000B6                     remove_chain@clust:
  1661                           	opt stack 0
  1662  0000B6                     create_chain@clust:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x56
  1666  0000B6                     	ds	2
  1667  0000B8                     
  1668                           ; 1 bytes @ 0x58
  1669  0000B8                     	ds	1
  1670  0000B9                     auto_mount@fs:
  1671                           	opt stack 0
  1672                           
  1673                           ; 2 bytes @ 0x59
  1674  0000B9                     	ds	1
  1675  0000BA                     remove_chain@nxt:
  1676                           	opt stack 0
  1677  0000BA                     create_chain@mcl:
  1678                           	opt stack 0
  1679                           
  1680                           ; 2 bytes @ 0x5A
  1681  0000BA                     	ds	2
  1682  0000BC                     remove_chain@fs:
  1683                           	opt stack 0
  1684  0000BC                     create_chain@fs:
  1685                           	opt stack 0
  1686  0000BC                     next_dir_entry@clust:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x5C
  1690  0000BC                     	ds	2
  1691  0000BE                     create_chain@cstat:
  1692                           	opt stack 0
  1693  0000BE                     next_dir_entry@idx:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x5E
  1697  0000BE                     	ds	2
  1698  0000C0                     create_chain@scl:
  1699                           	opt stack 0
  1700  0000C0                     trace_path@dj:
  1701                           	opt stack 0
  1702                           
  1703                           ; 2 bytes @ 0x60
  1704  0000C0                     	ds	2
  1705  0000C2                     create_chain@ncl:
  1706                           	opt stack 0
  1707  0000C2                     trace_path@fn:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0x62
  1711  0000C2                     	ds	2
  1712  0000C4                     trace_path@path:
  1713                           	opt stack 0
  1714  0000C4                     reserve_direntry@dj:
  1715                           	opt stack 0
  1716  0000C4                     f_write@fp:
  1717                           	opt stack 0
  1718  0000C4                     f_lseek@fp:
  1719                           	opt stack 0
  1720                           
  1721                           ; 2 bytes @ 0x64
  1722  0000C4                     	ds	2
  1723  0000C6                     trace_path@dir:
  1724                           	opt stack 0
  1725  0000C6                     reserve_direntry@dir:
  1726                           	opt stack 0
  1727  0000C6                     f_write@buff:
  1728                           	opt stack 0
  1729  0000C6                     f_lseek@ofs:
  1730                           	opt stack 0
  1731                           
  1732                           ; 4 bytes @ 0x66
  1733  0000C6                     	ds	2
  1734  0000C8                     ??_trace_path:
  1735  0000C8                     ??_reserve_direntry:
  1736  0000C8                     f_write@btw:
  1737                           	opt stack 0
  1738                           
  1739                           ; 2 bytes @ 0x68
  1740  0000C8                     	ds	2
  1741  0000CA                     ??_f_lseek:
  1742  0000CA                     f_write@bw:
  1743                           	opt stack 0
  1744  0000CA                     reserve_direntry@sector:
  1745                           	opt stack 0
  1746                           
  1747                           ; 4 bytes @ 0x6A
  1748  0000CA                     	ds	2
  1749  0000CC                     ??_f_write:
  1750  0000CC                     _trace_path$2054:
  1751                           	opt stack 0
  1752                           
  1753                           ; 2 bytes @ 0x6C
  1754  0000CC                     	ds	2
  1755  0000CE                     reserve_direntry@n:
  1756                           	opt stack 0
  1757  0000CE                     _trace_path$2056:
  1758                           	opt stack 0
  1759                           
  1760                           ; 2 bytes @ 0x6E
  1761  0000CE                     	ds	1
  1762  0000CF                     reserve_direntry@dptr:
  1763                           	opt stack 0
  1764                           
  1765                           ; 2 bytes @ 0x6F
  1766  0000CF                     	ds	1
  1767  0000D0                     trace_path@fs:
  1768                           	opt stack 0
  1769                           
  1770                           ; 2 bytes @ 0x70
  1771  0000D0                     	ds	1
  1772  0000D1                     reserve_direntry@c:
  1773                           	opt stack 0
  1774                           
  1775                           ; 1 bytes @ 0x71
  1776  0000D1                     	ds	1
  1777  0000D2                     trace_path@clust:
  1778                           	opt stack 0
  1779  0000D2                     reserve_direntry@clust:
  1780                           	opt stack 0
  1781                           
  1782                           ; 2 bytes @ 0x72
  1783  0000D2                     	ds	2
  1784  0000D4                     trace_path@ds:
  1785                           	opt stack 0
  1786  0000D4                     reserve_direntry@fs:
  1787                           	opt stack 0
  1788                           
  1789                           ; 2 bytes @ 0x74
  1790  0000D4                     	ds	1
  1791  0000D5                     trace_path@dptr:
  1792                           	opt stack 0
  1793                           
  1794                           ; 2 bytes @ 0x75
  1795  0000D5                     	ds	1
  1796  0000D6                     f_lseek@res:
  1797                           	opt stack 0
  1798                           
  1799                           ; 1 bytes @ 0x76
  1800  0000D6                     	ds	1
  1801  0000D7                     f_open@fp:
  1802                           	opt stack 0
  1803  0000D7                     f_lseek@ifptr:
  1804                           	opt stack 0
  1805                           
  1806                           ; 4 bytes @ 0x77
  1807  0000D7                     	ds	1
  1808  0000D8                     f_write@res:
  1809                           	opt stack 0
  1810                           
  1811                           ; 1 bytes @ 0x78
  1812  0000D8                     	ds	1
  1813  0000D9                     f_open@path:
  1814                           	opt stack 0
  1815  0000D9                     f_write@wbuff:
  1816                           	opt stack 0
  1817                           
  1818                           ; 2 bytes @ 0x79
  1819  0000D9                     	ds	2
  1820  0000DB                     f_open@mode:
  1821                           	opt stack 0
  1822  0000DB                     f_write@sect:
  1823                           	opt stack 0
  1824  0000DB                     f_lseek@csize:
  1825                           	opt stack 0
  1826                           
  1827                           ; 4 bytes @ 0x7B
  1828  0000DB                     	ds	1
  1829  0000DC                     ??_f_open:
  1830                           
  1831                           ; 1 bytes @ 0x7C
  1832  0000DC                     	ds	3
  1833  0000DF                     f_write@cc:
  1834                           	opt stack 0
  1835  0000DF                     f_lseek@clust:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x7F
  1839  0000DF                     	ds	2
  1840  0000E1                     f_write@clust:
  1841                           	opt stack 0
  1842                           
  1843                           ; 2 bytes @ 0x81
  1844  0000E1                     	ds	2
  1845  0000E3                     f_write@wcnt:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0x83
  1849  0000E3                     	ds	2
  1850  0000E5                     ?_fputc:
  1851                           	opt stack 0
  1852  0000E5                     fputc@chr:
  1853                           	opt stack 0
  1854                           
  1855                           ; 2 bytes @ 0x85
  1856  0000E5                     	ds	2
  1857  0000E7                     fputc@fil:
  1858                           	opt stack 0
  1859                           
  1860                           ; 2 bytes @ 0x87
  1861  0000E7                     	ds	2
  1862  0000E9                     fputc@c:
  1863                           	opt stack 0
  1864                           
  1865                           ; 1 bytes @ 0x89
  1866  0000E9                     	ds	1
  1867  0000EA                     fputc@bw:
  1868                           	opt stack 0
  1869                           
  1870                           ; 2 bytes @ 0x8A
  1871  0000EA                     	ds	2
  1872                           tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           postdec1	equ	0xFE5
  1879                           fsr1h	equ	0xFE2
  1880                           fsr1l	equ	0xFE1
  1881                           
  1882                           	psect	cstackCOMRAM
  1883  000001                     __pcstackCOMRAM:
  1884                           	opt stack 0
  1885  000001                     ?_strcmp:
  1886                           	opt stack 0
  1887  000001                     stringcpy@str1:
  1888                           	opt stack 0
  1889  000001                     strcmp@s1:
  1890                           	opt stack 0
  1891  000001                     i2write_timer_zero@timer0:
  1892                           	opt stack 0
  1893                           
  1894                           ; 2 bytes @ 0x0
  1895  000001                     	ds	2
  1896  000003                     stringcpy@str2:
  1897                           	opt stack 0
  1898  000003                     strcmp@s2:
  1899                           	opt stack 0
  1900  000003                     i2write_timer_zero@timer:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x2
  1904  000003                     	ds	2
  1905  000005                     ??_strcmp:
  1906  000005                     stringcpy@dir:
  1907                           	opt stack 0
  1908                           
  1909                           ; 2 bytes @ 0x4
  1910  000005                     	ds	1
  1911  000006                     strcmp@r:
  1912                           	opt stack 0
  1913                           
  1914                           ; 1 bytes @ 0x5
  1915  000006                     	ds	1
  1916  000007                     ??_stringcpy:
  1917                           
  1918                           ; 1 bytes @ 0x6
  1919  000007                     	ds	2
  1920  000009                     stringcpy@chr:
  1921                           	opt stack 0
  1922                           
  1923                           ; 1 bytes @ 0x8
  1924  000009                     	ds	1
  1925  00000A                     GPSRead@buff:
  1926                           	opt stack 0
  1927                           
  1928                           ; 1 bytes @ 0x9
  1929  00000A                     	ds	1
  1930  00000B                     GPSRead@c:
  1931                           	opt stack 0
  1932                           
  1933                           ; 1 bytes @ 0xA
  1934  00000B                     	ds	1
  1935  00000C                     ??_isr:
  1936                           
  1937                           ; 1 bytes @ 0xB
  1938  00000C                     	ds	20
  1939  000020                     isr@cont:
  1940                           	opt stack 0
  1941                           
  1942                           ; 1 bytes @ 0x1F
  1943  000020                     	ds	1
  1944  000021                     ??_isdigit:
  1945  000021                     ??_disk_status:
  1946  000021                     response@buff:
  1947                           	opt stack 0
  1948  000021                     escreve_cmd_lcd@comando:
  1949                           	opt stack 0
  1950  000021                     endereco_cursor_lcd@endereco:
  1951                           	opt stack 0
  1952  000021                     escreve_caractere_lcd@data:
  1953                           	opt stack 0
  1954  000021                     f_mount@drv:
  1955                           	opt stack 0
  1956  000021                     ___llmod@counter:
  1957                           	opt stack 0
  1958                           
  1959                           ; 1 bytes @ 0x20
  1960  000021                     	ds	1
  1961  000022                     tblptru	equ	0xFF8
  1962                           tblptrh	equ	0xFF7
  1963                           tblptrl	equ	0xFF6
  1964                           tablat	equ	0xFF5
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           postdec1	equ	0xFE5
  1968                           fsr1h	equ	0xFE2
  1969                           fsr1l	equ	0xFE1
  1970                           
  1971                           ; 1 bytes @ 0x21
  1972 ;;
  1973 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1974 ;;
  1975 ;; *************** function _main *****************
  1976 ;; Defined at:
  1977 ;;		line 214 in file "main.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;		None
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;		None
  1982 ;; Return value:  Size  Location     Type
  1983 ;;                  1    wreg      void 
  1984 ;; Registers used:
  1985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1991 ;;      Params:         0       0       0       0       0       0       0       0       0
  1992 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1993 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1994 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1995 ;;Total ram usage:        0 bytes
  1996 ;; Hardware stack levels required when called:   18
  1997 ;; This function calls:
  1998 ;;		_dados_gps_to_sd
  1999 ;;		_escalonador
  2000 ;;		_inicializa_tarefas
  2001 ;;		_inicializa_uart
  2002 ;;		_init_hardware
  2003 ;;		_init_lcd
  2004 ;;		_mensagem_inicial
  2005 ;; This function is called by:
  2006 ;;		Startup code after reset
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text0
  2011  004DEC                     __ptext0:
  2012                           	opt stack 0
  2013  004DEC                     _main:
  2014                           	opt stack 13
  2015                           
  2016                           ;main.c: 216: init_hardware();
  2017                           
  2018                           ;incstack = 0
  2019  004DEC  ECBD  F027         	call	_init_hardware	;wreg free
  2020                           
  2021                           ;main.c: 217: T0CONbits.TMR0ON = 0;
  2022  004DF0  9ED5               	bcf	4053,7,c	;volatile
  2023                           
  2024                           ;main.c: 218: init_lcd();
  2025  004DF2  ECFF  F020         	call	_init_lcd	;wreg free
  2026                           
  2027                           ;main.c: 219: mensagem_inicial();
  2028  004DF6  EC66  F022         	call	_mensagem_inicial	;wreg free
  2029                           
  2030                           ;main.c: 220: inicializa_tarefas();
  2031  004DFA  EC21  F025         	call	_inicializa_tarefas	;wreg free
  2032                           
  2033                           ;main.c: 221: inicializa_uart();
  2034  004DFE  EC62  F027         	call	_inicializa_uart	;wreg free
  2035                           
  2036                           ;main.c: 222: T0CONbits.TMR0ON = 1;
  2037  004E02  8ED5               	bsf	4053,7,c	;volatile
  2038  004E04                     
  2039                           ;main.c: 224: {
  2040                           ;main.c: 226: if ((sinaliza_int_timer == 1) && (3))
  2041  004E04  0100               	movlb	0	; () banked
  2042  004E06  05FF               	decf	_sinaliza_int_timer& (0+255),w,b
  2043  004E08  A4D8               	btfss	status,2,c
  2044  004E0A  D004               	goto	l109
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;main.c: 227: {
  2048                           ;main.c: 228: sinaliza_int_timer = 0;
  2049  004E0C  0E00               	movlw	0
  2050  004E0E  6FFF               	movwf	_sinaliza_int_timer& (0+255),b
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;main.c: 229: escalonador();
  2054  004E10  EC09  F020         	call	_escalonador	;wreg free
  2055  004E14                     l109:
  2056                           
  2057                           ;main.c: 230: }
  2058                           ;main.c: 231: dados_gps_to_sd();
  2059  004E14  EC49  F026         	call	_dados_gps_to_sd	;wreg free
  2060  004E18  D7F5               	goto	l108
  2061  004E1A                     __end_of_main:
  2062                           	opt stack 0
  2063                           tblptru	equ	0xFF8
  2064                           tblptrh	equ	0xFF7
  2065                           tblptrl	equ	0xFF6
  2066                           tablat	equ	0xFF5
  2067                           postinc0	equ	0xFEE
  2068                           wreg	equ	0xFE8
  2069                           postdec1	equ	0xFE5
  2070                           fsr1h	equ	0xFE2
  2071                           fsr1l	equ	0xFE1
  2072                           status	equ	0xFD8
  2073                           
  2074 ;; *************** function _mensagem_inicial *****************
  2075 ;; Defined at:
  2076 ;;		line 241 in file "main.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;		None
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  msg_dois       17   24[BANK0 ] const unsigned char [17]
  2081 ;;  msg_linha_um   17    7[BANK0 ] const unsigned char [17]
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2091 ;;      Params:         0       0       0       0       0       0       0       0       0
  2092 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2093 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2094 ;;      Totals:         0      36       0       0       0       0       0       0       0
  2095 ;;Total ram usage:       36 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    6
  2098 ;; This function calls:
  2099 ;;		_escreve_cmd_lcd
  2100 ;;		_escreve_frase_ram_lcd
  2101 ;;		_posicao_cursor_lcd
  2102 ;; This function is called by:
  2103 ;;		_main
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text1
  2108  0044CC                     __ptext1:
  2109                           	opt stack 0
  2110  0044CC                     _mensagem_inicial:
  2111                           	opt stack 24
  2112                           
  2113                           ;main.c: 243: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  2114                           
  2115                           ;incstack = 0
  2116  0044CC  0E70               	movlw	low mensagem_inicial@F4351
  2117  0044CE  6EF6               	movwf	tblptrl,c
  2118  0044D0                     	if	1	;There is more than 1 active tblptr byte
  2119  0044D0  0E61               	movlw	high mensagem_inicial@F4351
  2120  0044D2  6EF7               	movwf	tblptrh,c
  2121  0044D4                     	endif
  2122  0044D4                     	if	0	;There are less than 3 active tblptr bytes
  2123  0044D4                     	endif
  2124  0044D4  EE20  F067         	lfsr	2,mensagem_inicial@msg_linha_um
  2125  0044D8  0E10               	movlw	16
  2126  0044DA                     u14740:
  2127  0044DA  0009               	tblrd		*+
  2128  0044DC  CFF5 FFDE          	movff	tablat,postinc2
  2129  0044E0  06E8               	decf	wreg,f,c
  2130  0044E2  E2FB               	bc	u14740
  2131                           
  2132                           ;main.c: 244: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  2133  0044E4  0E5F               	movlw	low mensagem_inicial@F4353
  2134  0044E6  6EF6               	movwf	tblptrl,c
  2135  0044E8                     	if	1	;There is more than 1 active tblptr byte
  2136  0044E8  0E61               	movlw	high mensagem_inicial@F4353
  2137  0044EA  6EF7               	movwf	tblptrh,c
  2138  0044EC                     	endif
  2139  0044EC                     	if	0	;There are less than 3 active tblptr bytes
  2140  0044EC                     	endif
  2141  0044EC  EE20  F078         	lfsr	2,mensagem_inicial@msg_dois
  2142  0044F0  0E10               	movlw	16
  2143  0044F2                     u14750:
  2144  0044F2  0009               	tblrd		*+
  2145  0044F4  CFF5 FFDE          	movff	tablat,postinc2
  2146  0044F8  06E8               	decf	wreg,f,c
  2147  0044FA  E2FB               	bc	u14750
  2148                           
  2149                           ;main.c: 246: posicao_cursor_lcd(1,0);
  2150  0044FC  0E00               	movlw	0
  2151  0044FE  0100               	movlb	0	; () banked
  2152  004500  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2153  004502  0E01               	movlw	1
  2154  004504  EC2D  F023         	call	_posicao_cursor_lcd
  2155                           
  2156                           ;main.c: 247: escreve_frase_ram_lcd(msg_linha_um);
  2157  004508  0E67               	movlw	low mensagem_inicial@msg_linha_um
  2158  00450A  0100               	movlb	0	; () banked
  2159  00450C  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2160  00450E  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2161  004510  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2162  004512  ECF7  F024         	call	_escreve_frase_ram_lcd	;wreg free
  2163                           
  2164                           ;main.c: 249: posicao_cursor_lcd(2,0);
  2165  004516  0E00               	movlw	0
  2166  004518  0100               	movlb	0	; () banked
  2167  00451A  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2168  00451C  0E02               	movlw	2
  2169  00451E  EC2D  F023         	call	_posicao_cursor_lcd
  2170                           
  2171                           ;main.c: 250: escreve_frase_ram_lcd(msg_dois);
  2172  004522  0E78               	movlw	low mensagem_inicial@msg_dois
  2173  004524  0100               	movlb	0	; () banked
  2174  004526  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2175  004528  0E00               	movlw	high mensagem_inicial@msg_dois
  2176  00452A  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2177  00452C  ECF7  F024         	call	_escreve_frase_ram_lcd	;wreg free
  2178                           
  2179                           ;main.c: 251: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2180  004530  0E3D               	movlw	61
  2181  004532  0100               	movlb	0	; () banked
  2182  004534  6F66               	movwf	(??_mensagem_inicial+1)& (0+255),b
  2183  004536  0EE1               	movlw	225
  2184  004538  6F65               	movwf	??_mensagem_inicial& (0+255),b
  2185  00453A  0E3F               	movlw	63
  2186  00453C                     u15357:
  2187  00453C  2EE8               	decfsz	wreg,f,c
  2188  00453E  D7FE               	bra	u15357
  2189  004540  2F65               	decfsz	??_mensagem_inicial& (0+255),f,b
  2190  004542  D7FC               	bra	u15357
  2191  004544  2F66               	decfsz	(??_mensagem_inicial+1)& (0+255),f,b
  2192  004546  D7FA               	bra	u15357
  2193  004548  D000               	nop2	
  2194                           
  2195                           ;main.c: 252: escreve_cmd_lcd(0b00000001);
  2196  00454A  0E01               	movlw	1
  2197  00454C  EC96  F021         	call	_escreve_cmd_lcd
  2198  004550  0012               	return		;funcret
  2199  004552                     __end_of_mensagem_inicial:
  2200                           	opt stack 0
  2201                           tblptru	equ	0xFF8
  2202                           tblptrh	equ	0xFF7
  2203                           tblptrl	equ	0xFF6
  2204                           tablat	equ	0xFF5
  2205                           postinc0	equ	0xFEE
  2206                           wreg	equ	0xFE8
  2207                           postdec1	equ	0xFE5
  2208                           fsr1h	equ	0xFE2
  2209                           fsr1l	equ	0xFE1
  2210                           postinc2	equ	0xFDE
  2211                           status	equ	0xFD8
  2212                           
  2213 ;; *************** function _init_lcd *****************
  2214 ;; Defined at:
  2215 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;		None
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;		None
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  1    wreg      void 
  2222 ;; Registers used:
  2223 ;;		wreg, status,2, status,0, cstack
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2229 ;;      Params:         0       0       0       0       0       0       0       0       0
  2230 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2231 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2232 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2233 ;;Total ram usage:        1 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; Hardware stack levels required when called:    5
  2236 ;; This function calls:
  2237 ;;		_delay
  2238 ;;		_escreve_cmd_lcd
  2239 ;; This function is called by:
  2240 ;;		_main
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text2
  2245  0041FE                     __ptext2:
  2246                           	opt stack 0
  2247  0041FE                     _init_lcd:
  2248                           	opt stack 25
  2249                           
  2250                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2251                           
  2252                           ;incstack = 0
  2253  0041FE  9495               	bcf	3989,2,c	;volatile
  2254                           
  2255                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2256  004200  9295               	bcf	3989,1,c	;volatile
  2257                           
  2258                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2259  004202  9095               	bcf	3989,0,c	;volatile
  2260                           
  2261                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2262  004204  9895               	bcf	3989,4,c	;volatile
  2263                           
  2264                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2265  004206  9A95               	bcf	3989,5,c	;volatile
  2266                           
  2267                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2268  004208  9C95               	bcf	3989,6,c	;volatile
  2269                           
  2270                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2271  00420A  9E95               	bcf	3989,7,c	;volatile
  2272                           
  2273                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2274  00420C  9483               	bcf	3971,2,c	;volatile
  2275                           
  2276                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2277  00420E  9283               	bcf	3971,1,c	;volatile
  2278                           
  2279                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2280  004210  9083               	bcf	3971,0,c	;volatile
  2281                           
  2282                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2283  004212  9E83               	bcf	3971,7,c	;volatile
  2284                           
  2285                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2286  004214  9C83               	bcf	3971,6,c	;volatile
  2287                           
  2288                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2289  004216  8A83               	bsf	3971,5,c	;volatile
  2290                           
  2291                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2292  004218  8883               	bsf	3971,4,c	;volatile
  2293                           
  2294                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2295  00421A  0EEA               	movlw	234
  2296  00421C  0100               	movlb	0	; () banked
  2297  00421E  6F62               	movwf	??_init_lcd& (0+255),b
  2298  004220  0EC3               	movlw	195
  2299  004222                     u15367:
  2300  004222  2EE8               	decfsz	wreg,f,c
  2301  004224  D7FE               	bra	u15367
  2302  004226  2F62               	decfsz	??_init_lcd& (0+255),f,b
  2303  004228  D7FC               	bra	u15367
  2304                           
  2305                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2306  00422A  8083               	bsf	3971,0,c	;volatile
  2307                           
  2308                           ;display_lcd.c: 108: delay();
  2309  00422C  EC39  F027         	call	_delay	;wreg free
  2310                           
  2311                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2312  004230  9083               	bcf	3971,0,c	;volatile
  2313                           
  2314                           ;display_lcd.c: 110: delay();
  2315  004232  EC39  F027         	call	_delay	;wreg free
  2316                           
  2317                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2318  004236  0E4E               	movlw	78
  2319  004238  0100               	movlb	0	; () banked
  2320  00423A  6F62               	movwf	??_init_lcd& (0+255),b
  2321  00423C  0EEB               	movlw	235
  2322  00423E                     u15377:
  2323  00423E  2EE8               	decfsz	wreg,f,c
  2324  004240  D7FE               	bra	u15377
  2325  004242  2F62               	decfsz	??_init_lcd& (0+255),f,b
  2326  004244  D7FC               	bra	u15377
  2327                           
  2328                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2329  004246  8083               	bsf	3971,0,c	;volatile
  2330                           
  2331                           ;display_lcd.c: 119: delay();
  2332  004248  EC39  F027         	call	_delay	;wreg free
  2333                           
  2334                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2335  00424C  9083               	bcf	3971,0,c	;volatile
  2336                           
  2337                           ;display_lcd.c: 121: delay();
  2338  00424E  EC39  F027         	call	_delay	;wreg free
  2339                           
  2340                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2341  004252  0E4E               	movlw	78
  2342  004254  0100               	movlb	0	; () banked
  2343  004256  6F62               	movwf	??_init_lcd& (0+255),b
  2344  004258  0EEB               	movlw	235
  2345  00425A                     u15387:
  2346  00425A  2EE8               	decfsz	wreg,f,c
  2347  00425C  D7FE               	bra	u15387
  2348  00425E  2F62               	decfsz	??_init_lcd& (0+255),f,b
  2349  004260  D7FC               	bra	u15387
  2350                           
  2351                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2352  004262  8083               	bsf	3971,0,c	;volatile
  2353                           
  2354                           ;display_lcd.c: 130: delay();
  2355  004264  EC39  F027         	call	_delay	;wreg free
  2356                           
  2357                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2358  004268  9083               	bcf	3971,0,c	;volatile
  2359                           
  2360                           ;display_lcd.c: 132: delay();
  2361  00426A  EC39  F027         	call	_delay	;wreg free
  2362                           
  2363                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2364  00426E  9E83               	bcf	3971,7,c	;volatile
  2365                           
  2366                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2367  004270  9C83               	bcf	3971,6,c	;volatile
  2368                           
  2369                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2370  004272  8A83               	bsf	3971,5,c	;volatile
  2371                           
  2372                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2373  004274  9883               	bcf	3971,4,c	;volatile
  2374                           
  2375                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2376  004276  8083               	bsf	3971,0,c	;volatile
  2377                           
  2378                           ;display_lcd.c: 143: delay();
  2379  004278  EC39  F027         	call	_delay	;wreg free
  2380                           
  2381                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2382  00427C  9083               	bcf	3971,0,c	;volatile
  2383                           
  2384                           ;display_lcd.c: 145: delay();
  2385  00427E  EC39  F027         	call	_delay	;wreg free
  2386                           
  2387                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2388  004282  0E28               	movlw	40
  2389  004284  EC96  F021         	call	_escreve_cmd_lcd
  2390                           
  2391                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2392  004288  0E06               	movlw	6
  2393  00428A  EC96  F021         	call	_escreve_cmd_lcd
  2394                           
  2395                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2396  00428E  0E0E               	movlw	14
  2397  004290  EC96  F021         	call	_escreve_cmd_lcd
  2398                           
  2399                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2400  004294  0E01               	movlw	1
  2401  004296  EC96  F021         	call	_escreve_cmd_lcd
  2402  00429A  0012               	return		;funcret
  2403  00429C                     __end_of_init_lcd:
  2404                           	opt stack 0
  2405                           tblptru	equ	0xFF8
  2406                           tblptrh	equ	0xFF7
  2407                           tblptrl	equ	0xFF6
  2408                           tablat	equ	0xFF5
  2409                           postinc0	equ	0xFEE
  2410                           wreg	equ	0xFE8
  2411                           postdec1	equ	0xFE5
  2412                           fsr1h	equ	0xFE2
  2413                           fsr1l	equ	0xFE1
  2414                           postinc2	equ	0xFDE
  2415                           status	equ	0xFD8
  2416                           
  2417 ;; *************** function _escreve_cmd_lcd *****************
  2418 ;; Defined at:
  2419 ;;		line 162 in file "bibliotecas/display_lcd.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;  comando         1    wreg     unsigned char 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  comando         1   32[COMRAM] unsigned char 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg, status,2, status,0, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2433 ;;      Params:         0       0       0       0       0       0       0       0       0
  2434 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2435 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2436 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2437 ;;Total ram usage:        1 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; Hardware stack levels required when called:    4
  2440 ;; This function calls:
  2441 ;;		_delay
  2442 ;; This function is called by:
  2443 ;;		_mensagem_inicial
  2444 ;;		_init_lcd
  2445 ;;		_cria_caractere_lcd
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           	psect	text3
  2450  00432C                     __ptext3:
  2451                           	opt stack 0
  2452  00432C                     _escreve_cmd_lcd:
  2453                           	opt stack 25
  2454                           
  2455                           ;incstack = 0
  2456                           ;escreve_cmd_lcd@comando stored from wreg
  2457  00432C  6E21               	movwf	escreve_cmd_lcd@comando,c
  2458                           
  2459                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  2460  00432E  9483               	bcf	3971,2,c	;volatile
  2461                           
  2462                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  2463  004330  9283               	bcf	3971,1,c	;volatile
  2464                           
  2465                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  2466  004332  9083               	bcf	3971,0,c	;volatile
  2467                           
  2468                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  2469  004334  A821               	btfss	escreve_cmd_lcd@comando,4,c
  2470  004336  D002               	goto	l597
  2471  004338  8883               	bsf	3971,4,c	;volatile
  2472  00433A  D001               	goto	l598
  2473  00433C                     l597:
  2474                           
  2475                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  2476  00433C  9883               	bcf	3971,4,c	;volatile
  2477  00433E                     l598:
  2478                           
  2479                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  2480  00433E  AA21               	btfss	escreve_cmd_lcd@comando,5,c
  2481  004340  D002               	goto	l599
  2482  004342  8A83               	bsf	3971,5,c	;volatile
  2483  004344  D001               	goto	l600
  2484  004346                     l599:
  2485                           
  2486                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  2487  004346  9A83               	bcf	3971,5,c	;volatile
  2488  004348                     l600:
  2489                           
  2490                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  2491  004348  AC21               	btfss	escreve_cmd_lcd@comando,6,c
  2492  00434A  D002               	goto	l601
  2493  00434C  8C83               	bsf	3971,6,c	;volatile
  2494  00434E  D001               	goto	l602
  2495  004350                     l601:
  2496                           
  2497                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  2498  004350  9C83               	bcf	3971,6,c	;volatile
  2499  004352                     l602:
  2500                           
  2501                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  2502  004352  AE21               	btfss	escreve_cmd_lcd@comando,7,c
  2503  004354  D002               	goto	l603
  2504  004356  8E83               	bsf	3971,7,c	;volatile
  2505  004358  D001               	goto	l604
  2506  00435A                     l603:
  2507                           
  2508                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  2509  00435A  9E83               	bcf	3971,7,c	;volatile
  2510  00435C                     l604:
  2511                           
  2512                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  2513  00435C  8083               	bsf	3971,0,c	;volatile
  2514                           
  2515                           ;display_lcd.c: 181: delay();
  2516  00435E  EC39  F027         	call	_delay	;wreg free
  2517                           
  2518                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  2519  004362  9083               	bcf	3971,0,c	;volatile
  2520                           
  2521                           ;display_lcd.c: 183: delay();
  2522  004364  EC39  F027         	call	_delay	;wreg free
  2523                           
  2524                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  2525  004368  A021               	btfss	escreve_cmd_lcd@comando,0,c
  2526  00436A  D002               	goto	l605
  2527  00436C  8883               	bsf	3971,4,c	;volatile
  2528  00436E  D001               	goto	l606
  2529  004370                     l605:
  2530                           
  2531                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  2532  004370  9883               	bcf	3971,4,c	;volatile
  2533  004372                     l606:
  2534                           
  2535                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  2536  004372  A221               	btfss	escreve_cmd_lcd@comando,1,c
  2537  004374  D002               	goto	l607
  2538  004376  8A83               	bsf	3971,5,c	;volatile
  2539  004378  D001               	goto	l608
  2540  00437A                     l607:
  2541                           
  2542                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  2543  00437A  9A83               	bcf	3971,5,c	;volatile
  2544  00437C                     l608:
  2545                           
  2546                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  2547  00437C  A421               	btfss	escreve_cmd_lcd@comando,2,c
  2548  00437E  D002               	goto	l609
  2549  004380  8C83               	bsf	3971,6,c	;volatile
  2550  004382  D001               	goto	l610
  2551  004384                     l609:
  2552                           
  2553                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  2554  004384  9C83               	bcf	3971,6,c	;volatile
  2555  004386                     l610:
  2556                           
  2557                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  2558  004386  A621               	btfss	escreve_cmd_lcd@comando,3,c
  2559  004388  D002               	goto	l611
  2560  00438A  8E83               	bsf	3971,7,c	;volatile
  2561  00438C  D001               	goto	l612
  2562  00438E                     l611:
  2563                           
  2564                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  2565  00438E  9E83               	bcf	3971,7,c	;volatile
  2566  004390                     l612:
  2567                           
  2568                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  2569  004390  8083               	bsf	3971,0,c	;volatile
  2570                           
  2571                           ;display_lcd.c: 197: delay();
  2572  004392  EC39  F027         	call	_delay	;wreg free
  2573                           
  2574                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  2575  004396  9083               	bcf	3971,0,c	;volatile
  2576                           
  2577                           ;display_lcd.c: 199: delay();
  2578  004398  EC39  F027         	call	_delay	;wreg free
  2579                           
  2580                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  2581  00439C  0421               	decf	escreve_cmd_lcd@comando,w,c
  2582  00439E  B4D8               	btfsc	status,2,c
  2583  0043A0  D008               	goto	u14280
  2584  0043A2  0E02               	movlw	2
  2585  0043A4  1821               	xorwf	escreve_cmd_lcd@comando,w,c
  2586  0043A6  B4D8               	btfsc	status,2,c
  2587  0043A8  D004               	goto	u14280
  2588  0043AA  0E03               	movlw	3
  2589  0043AC  1821               	xorwf	escreve_cmd_lcd@comando,w,c
  2590  0043AE  A4D8               	btfss	status,2,c
  2591  0043B0  0012               	return	
  2592  0043B2                     u14280:
  2593                           
  2594                           ;display_lcd.c: 205: { delay(); }
  2595  0043B2  EC39  F027         	call	_delay	;wreg free
  2596  0043B6  0012               	return	
  2597  0043B8                     __end_of_escreve_cmd_lcd:
  2598                           	opt stack 0
  2599                           tblptru	equ	0xFF8
  2600                           tblptrh	equ	0xFF7
  2601                           tblptrl	equ	0xFF6
  2602                           tablat	equ	0xFF5
  2603                           postinc0	equ	0xFEE
  2604                           wreg	equ	0xFE8
  2605                           postdec1	equ	0xFE5
  2606                           fsr1h	equ	0xFE2
  2607                           fsr1l	equ	0xFE1
  2608                           postinc2	equ	0xFDE
  2609                           status	equ	0xFD8
  2610                           
  2611 ;; *************** function _init_hardware *****************
  2612 ;; Defined at:
  2613 ;;		line 55 in file "bibliotecas/hardware.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;		None
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;		None
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  1    wreg      void 
  2620 ;; Registers used:
  2621 ;;		wreg, status,2, cstack
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2627 ;;      Params:         0       0       0       0       0       0       0       0       0
  2628 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2629 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2630 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2631 ;;Total ram usage:        0 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; Hardware stack levels required when called:    5
  2634 ;; This function calls:
  2635 ;;		_config_timer_dois
  2636 ;;		_config_timer_zero
  2637 ;;		_init_interrupt
  2638 ;;		_init_oscilador
  2639 ;;		_init_ports
  2640 ;; This function is called by:
  2641 ;;		_main
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text4
  2646  004F7A                     __ptext4:
  2647                           	opt stack 0
  2648  004F7A                     _init_hardware:
  2649                           	opt stack 25
  2650                           
  2651                           ;hardware.c: 58: init_oscilador();
  2652                           
  2653                           ;incstack = 0
  2654  004F7A  EC33  F028         	call	_init_oscilador	;wreg free
  2655                           
  2656                           ;hardware.c: 61: init_ports();
  2657  004F7E  EC95  F027         	call	_init_ports	;wreg free
  2658                           
  2659                           ;hardware.c: 64: config_timer_zero();
  2660  004F82  ECA3  F027         	call	_config_timer_zero	;wreg free
  2661                           
  2662                           ;hardware.c: 67: config_timer_dois();
  2663  004F86  EC01  F028         	call	_config_timer_dois	;wreg free
  2664                           
  2665                           ;hardware.c: 70: init_interrupt();
  2666  004F8A  ECDD  F027         	call	_init_interrupt	;wreg free
  2667  004F8E  0012               	return		;funcret
  2668  004F90                     __end_of_init_hardware:
  2669                           	opt stack 0
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           postinc0	equ	0xFEE
  2675                           wreg	equ	0xFE8
  2676                           postdec1	equ	0xFE5
  2677                           fsr1h	equ	0xFE2
  2678                           fsr1l	equ	0xFE1
  2679                           postinc2	equ	0xFDE
  2680                           status	equ	0xFD8
  2681                           
  2682 ;; *************** function _init_ports *****************
  2683 ;; Defined at:
  2684 ;;		line 154 in file "bibliotecas/hardware.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;		None
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;		None
  2689 ;; Return value:  Size  Location     Type
  2690 ;;                  1    wreg      void 
  2691 ;; Registers used:
  2692 ;;		wreg, status,2
  2693 ;; Tracked objects:
  2694 ;;		On entry : 0/0
  2695 ;;		On exit  : 0/0
  2696 ;;		Unchanged: 0/0
  2697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2698 ;;      Params:         0       0       0       0       0       0       0       0       0
  2699 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2700 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2701 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2702 ;;Total ram usage:        0 bytes
  2703 ;; Hardware stack levels used:    1
  2704 ;; Hardware stack levels required when called:    3
  2705 ;; This function calls:
  2706 ;;		Nothing
  2707 ;; This function is called by:
  2708 ;;		_init_hardware
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           	psect	text5
  2713  004F2A                     __ptext5:
  2714                           	opt stack 0
  2715  004F2A                     _init_ports:
  2716                           	opt stack 26
  2717                           
  2718                           ;hardware.c: 156: ADCON1 = 0X0F;
  2719                           
  2720                           ;incstack = 0
  2721  004F2A  0E0F               	movlw	15
  2722  004F2C  6EC1               	movwf	4033,c	;volatile
  2723                           
  2724                           ;hardware.c: 157: TRISB = 0b00100001;
  2725  004F2E  0E21               	movlw	33
  2726  004F30  6E93               	movwf	3987,c	;volatile
  2727                           
  2728                           ;hardware.c: 158: LATB = 0xFF;
  2729  004F32  688A               	setf	3978,c	;volatile
  2730                           
  2731                           ;hardware.c: 159: TRISD = 0x00;
  2732  004F34  0E00               	movlw	0
  2733  004F36  6E95               	movwf	3989,c	;volatile
  2734                           
  2735                           ;hardware.c: 160: TRISA = 0b00000111;
  2736  004F38  0E07               	movlw	7
  2737  004F3A  6E92               	movwf	3986,c	;volatile
  2738                           
  2739                           ;hardware.c: 161: TRISC = 0x01111111;
  2740  004F3C  0E11               	movlw	17
  2741  004F3E  6E94               	movwf	3988,c	;volatile
  2742                           
  2743                           ;hardware.c: 162: TRISE = 0b00000011;
  2744  004F40  0E03               	movlw	3
  2745  004F42  6E96               	movwf	3990,c	;volatile
  2746  004F44  0012               	return		;funcret
  2747  004F46                     __end_of_init_ports:
  2748                           	opt stack 0
  2749                           tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           postinc0	equ	0xFEE
  2754                           wreg	equ	0xFE8
  2755                           postdec1	equ	0xFE5
  2756                           fsr1h	equ	0xFE2
  2757                           fsr1l	equ	0xFE1
  2758                           postinc2	equ	0xFDE
  2759                           status	equ	0xFD8
  2760                           
  2761 ;; *************** function _init_oscilador *****************
  2762 ;; Defined at:
  2763 ;;		line 172 in file "bibliotecas/hardware.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;		None
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		None
  2772 ;; Tracked objects:
  2773 ;;		On entry : 0/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2777 ;;      Params:         0       0       0       0       0       0       0       0       0
  2778 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2779 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2780 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2781 ;;Total ram usage:        0 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    3
  2784 ;; This function calls:
  2785 ;;		Nothing
  2786 ;; This function is called by:
  2787 ;;		_init_hardware
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text6
  2792  005066                     __ptext6:
  2793                           	opt stack 0
  2794  005066                     _init_oscilador:
  2795                           	opt stack 26
  2796                           
  2797                           ;hardware.c: 175: OSCCONbits.IRCF0 = 1;
  2798                           
  2799                           ;incstack = 0
  2800  005066  88D3               	bsf	4051,4,c	;volatile
  2801                           
  2802                           ;hardware.c: 176: OSCCONbits.IRCF1 = 1;
  2803  005068  8AD3               	bsf	4051,5,c	;volatile
  2804                           
  2805                           ;hardware.c: 177: OSCCONbits.IRCF2 = 1;
  2806  00506A  8CD3               	bsf	4051,6,c	;volatile
  2807  00506C  0012               	return		;funcret
  2808  00506E                     __end_of_init_oscilador:
  2809                           	opt stack 0
  2810                           tblptru	equ	0xFF8
  2811                           tblptrh	equ	0xFF7
  2812                           tblptrl	equ	0xFF6
  2813                           tablat	equ	0xFF5
  2814                           postinc0	equ	0xFEE
  2815                           wreg	equ	0xFE8
  2816                           postdec1	equ	0xFE5
  2817                           fsr1h	equ	0xFE2
  2818                           fsr1l	equ	0xFE1
  2819                           postinc2	equ	0xFDE
  2820                           status	equ	0xFD8
  2821                           
  2822 ;; *************** function _init_interrupt *****************
  2823 ;; Defined at:
  2824 ;;		line 98 in file "bibliotecas/hardware.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;		None
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;		None
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      void 
  2831 ;; Registers used:
  2832 ;;		wreg, status,2
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2838 ;;      Params:         0       0       0       0       0       0       0       0       0
  2839 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2840 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2841 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2842 ;;Total ram usage:        0 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    3
  2845 ;; This function calls:
  2846 ;;		Nothing
  2847 ;; This function is called by:
  2848 ;;		_init_hardware
  2849 ;; This function uses a non-reentrant model
  2850 ;;
  2851                           
  2852                           	psect	text7
  2853  004FBA                     __ptext7:
  2854                           	opt stack 0
  2855  004FBA                     _init_interrupt:
  2856                           	opt stack 26
  2857                           
  2858                           ;hardware.c: 100: INTCON = 0b10110000;
  2859                           
  2860                           ;incstack = 0
  2861  004FBA  0EB0               	movlw	176
  2862  004FBC  6EF2               	movwf	intcon,c	;volatile
  2863                           
  2864                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2865  004FBE  0E00               	movlw	0
  2866  004FC0  6EF1               	movwf	intcon2,c	;volatile
  2867                           
  2868                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2869  004FC2  0E00               	movlw	0
  2870  004FC4  6EF0               	movwf	intcon3,c	;volatile
  2871                           
  2872                           ;hardware.c: 104: PIE1 = 0b00101000;
  2873  004FC6  0E28               	movlw	40
  2874  004FC8  6E9D               	movwf	3997,c	;volatile
  2875  004FCA  0012               	return		;funcret
  2876  004FCC                     __end_of_init_interrupt:
  2877                           	opt stack 0
  2878                           tblptru	equ	0xFF8
  2879                           tblptrh	equ	0xFF7
  2880                           tblptrl	equ	0xFF6
  2881                           tablat	equ	0xFF5
  2882                           intcon	equ	0xFF2
  2883                           intcon2	equ	0xFF1
  2884                           intcon3	equ	0xFF0
  2885                           postinc0	equ	0xFEE
  2886                           wreg	equ	0xFE8
  2887                           postdec1	equ	0xFE5
  2888                           fsr1h	equ	0xFE2
  2889                           fsr1l	equ	0xFE1
  2890                           postinc2	equ	0xFDE
  2891                           status	equ	0xFD8
  2892                           
  2893 ;; *************** function _config_timer_zero *****************
  2894 ;; Defined at:
  2895 ;;		line 83 in file "bibliotecas/hardware.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;		None
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;		None
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, status,2, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2909 ;;      Params:         0       0       0       0       0       0       0       0       0
  2910 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2912 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2913 ;;Total ram usage:        0 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    4
  2916 ;; This function calls:
  2917 ;;		_write_timer_zero
  2918 ;; This function is called by:
  2919 ;;		_init_hardware
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           	psect	text8
  2924  004F46                     __ptext8:
  2925                           	opt stack 0
  2926  004F46                     _config_timer_zero:
  2927                           	opt stack 25
  2928                           
  2929                           ;hardware.c: 85: T0CON = 0b11000011;
  2930                           
  2931                           ;incstack = 0
  2932  004F46  0EC3               	movlw	195
  2933  004F48  6ED5               	movwf	4053,c	;volatile
  2934                           
  2935                           ;hardware.c: 86: SPPCON = 0b00000000;
  2936  004F4A  0E00               	movlw	0
  2937  004F4C  6E65               	movwf	3941,c	;volatile
  2938                           
  2939                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2940  004F4E  0E00               	movlw	0
  2941  004F50  6E63               	movwf	3939,c	;volatile
  2942                           
  2943                           ;hardware.c: 88: write_timer_zero(0x0083);
  2944  004F52  0E00               	movlw	0
  2945  004F54  0100               	movlb	0	; () banked
  2946  004F56  6F61               	movwf	(write_timer_zero@timer0+1)& (0+255),b
  2947  004F58  0E83               	movlw	131
  2948  004F5A  6F60               	movwf	write_timer_zero@timer0& (0+255),b
  2949  004F5C  ECE6  F027         	call	_write_timer_zero	;wreg free
  2950  004F60  0012               	return		;funcret
  2951  004F62                     __end_of_config_timer_zero:
  2952                           	opt stack 0
  2953                           tblptru	equ	0xFF8
  2954                           tblptrh	equ	0xFF7
  2955                           tblptrl	equ	0xFF6
  2956                           tablat	equ	0xFF5
  2957                           intcon	equ	0xFF2
  2958                           intcon2	equ	0xFF1
  2959                           intcon3	equ	0xFF0
  2960                           postinc0	equ	0xFEE
  2961                           wreg	equ	0xFE8
  2962                           postdec1	equ	0xFE5
  2963                           fsr1h	equ	0xFE2
  2964                           fsr1l	equ	0xFE1
  2965                           postinc2	equ	0xFDE
  2966                           status	equ	0xFD8
  2967                           
  2968 ;; *************** function _write_timer_zero *****************
  2969 ;; Defined at:
  2970 ;;		line 138 in file "bibliotecas/hardware.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;  timer0          2    0[BANK0 ] unsigned int 
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;  timer           2    2[BANK0 ] struct Timers
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      void 
  2977 ;; Registers used:
  2978 ;;		None
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2984 ;;      Params:         0       2       0       0       0       0       0       0       0
  2985 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2986 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2987 ;;      Totals:         0       4       0       0       0       0       0       0       0
  2988 ;;Total ram usage:        4 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    3
  2991 ;; This function calls:
  2992 ;;		Nothing
  2993 ;; This function is called by:
  2994 ;;		_config_timer_zero
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text9
  2999  004FCC                     __ptext9:
  3000                           	opt stack 0
  3001  004FCC                     _write_timer_zero:
  3002                           	opt stack 25
  3003                           
  3004                           ;hardware.c: 140: union Timers timer;
  3005                           ;hardware.c: 142: timer.lt = timer0;
  3006                           
  3007                           ;incstack = 0
  3008  004FCC  C060  F062         	movff	write_timer_zero@timer0,write_timer_zero@timer
  3009  004FD0  C061  F063         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  3010                           
  3011                           ;hardware.c: 144: TMR0H = timer.bt[1];
  3012  004FD4  C063  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  3013                           
  3014                           ;hardware.c: 145: TMR0L = timer.bt[0];
  3015  004FD8  C062  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  3016  004FDC  0012               	return		;funcret
  3017  004FDE                     __end_of_write_timer_zero:
  3018                           	opt stack 0
  3019                           tblptru	equ	0xFF8
  3020                           tblptrh	equ	0xFF7
  3021                           tblptrl	equ	0xFF6
  3022                           tablat	equ	0xFF5
  3023                           intcon	equ	0xFF2
  3024                           intcon2	equ	0xFF1
  3025                           intcon3	equ	0xFF0
  3026                           postinc0	equ	0xFEE
  3027                           wreg	equ	0xFE8
  3028                           postdec1	equ	0xFE5
  3029                           fsr1h	equ	0xFE2
  3030                           fsr1l	equ	0xFE1
  3031                           postinc2	equ	0xFDE
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _config_timer_dois *****************
  3035 ;; Defined at:
  3036 ;;		line 201 in file "bibliotecas/hardware.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;		None
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, status,2
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3050 ;;      Params:         0       0       0       0       0       0       0       0       0
  3051 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3053 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3054 ;;Total ram usage:        0 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    3
  3057 ;; This function calls:
  3058 ;;		Nothing
  3059 ;; This function is called by:
  3060 ;;		_init_hardware
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text10
  3065  005002                     __ptext10:
  3066                           	opt stack 0
  3067  005002                     _config_timer_dois:
  3068                           	opt stack 26
  3069                           
  3070                           ;hardware.c: 203: T2CON = 0b00000100;
  3071                           
  3072                           ;incstack = 0
  3073  005002  0E04               	movlw	4
  3074  005004  6ECA               	movwf	4042,c	;volatile
  3075                           
  3076                           ;hardware.c: 204: TMR2 = 0;
  3077  005006  0E00               	movlw	0
  3078  005008  6ECC               	movwf	4044,c	;volatile
  3079                           
  3080                           ;hardware.c: 205: PR2 = 0x01;
  3081  00500A  0E01               	movlw	1
  3082  00500C  6ECB               	movwf	4043,c	;volatile
  3083  00500E  0012               	return		;funcret
  3084  005010                     __end_of_config_timer_dois:
  3085                           	opt stack 0
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           intcon	equ	0xFF2
  3091                           intcon2	equ	0xFF1
  3092                           intcon3	equ	0xFF0
  3093                           postinc0	equ	0xFEE
  3094                           wreg	equ	0xFE8
  3095                           postdec1	equ	0xFE5
  3096                           fsr1h	equ	0xFE2
  3097                           fsr1l	equ	0xFE1
  3098                           postinc2	equ	0xFDE
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _inicializa_tarefas *****************
  3102 ;; Defined at:
  3103 ;;		line 161 in file "main.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;		None
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;		None
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      void 
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3117 ;;      Params:         0       0       0       0       0       0       0       0       0
  3118 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3120 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3121 ;;Total ram usage:        0 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    3
  3124 ;; This function calls:
  3125 ;;		Nothing
  3126 ;; This function is called by:
  3127 ;;		_main
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text11
  3132  004A42                     __ptext11:
  3133                           	opt stack 0
  3134  004A42                     _inicializa_tarefas:
  3135                           	opt stack 27
  3136                           
  3137                           ;main.c: 164: p_tarefas[0] = verifica_dados_operacionais;
  3138                           
  3139                           ;incstack = 0
  3140  004A42  0E6E               	movlw	low _verifica_dados_operacionais
  3141  004A44  0100               	movlb	0	; () banked
  3142  004A46  6FF2               	movwf	_p_tarefas& (0+255),b
  3143  004A48  0E50               	movlw	high _verifica_dados_operacionais
  3144  004A4A  6FF3               	movwf	(_p_tarefas+1)& (0+255),b
  3145                           
  3146                           ;main.c: 165: p_tarefas[1] = disparo_gravacao;
  3147  004A4C  0E90               	movlw	low _disparo_gravacao
  3148  004A4E  6FF4               	movwf	(_p_tarefas+2)& (0+255),b
  3149  004A50  0E4F               	movlw	high _disparo_gravacao
  3150  004A52  6FF5               	movwf	(_p_tarefas+3)& (0+255),b
  3151                           
  3152                           ;main.c: 166: p_tarefas[2] = verifica_fence_externo;
  3153  004A54  0E12               	movlw	low _verifica_fence_externo
  3154  004A56  6FF6               	movwf	(_p_tarefas+4)& (0+255),b
  3155  004A58  0E00               	movlw	high _verifica_fence_externo
  3156  004A5A  6FF7               	movwf	(_p_tarefas+5)& (0+255),b
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;main.c: 171: tempo_backup[0] = 5000;
  3160  004A5C  0E13               	movlw	19
  3161  004A5E  6FED               	movwf	(_tempo_backup+1)& (0+255),b
  3162  004A60  0E88               	movlw	136
  3163  004A62  6FEC               	movwf	_tempo_backup& (0+255),b
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;main.c: 172: tempo_backup[1] = 1000;
  3167  004A64  0E03               	movlw	3
  3168  004A66  6FEF               	movwf	(_tempo_backup+3)& (0+255),b
  3169  004A68  0EE8               	movlw	232
  3170  004A6A  6FEE               	movwf	(_tempo_backup+2)& (0+255),b
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;main.c: 173: tempo_backup[2] = 10000;
  3174  004A6C  0E27               	movlw	39
  3175  004A6E  6FF1               	movwf	(_tempo_backup+5)& (0+255),b
  3176  004A70  0E10               	movlw	16
  3177  004A72  6FF0               	movwf	(_tempo_backup+4)& (0+255),b
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;main.c: 177: tempo_tarefa[0] = 5000;
  3181  004A74  0E13               	movlw	19
  3182  004A76  6E23               	movwf	_tempo_tarefa+1,c
  3183  004A78  0E88               	movlw	136
  3184  004A7A  6E22               	movwf	_tempo_tarefa,c
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 178: tempo_tarefa[1] = 1000;
  3188  004A7C  0E03               	movlw	3
  3189  004A7E  6E25               	movwf	_tempo_tarefa+3,c
  3190  004A80  0EE8               	movlw	232
  3191  004A82  6E24               	movwf	_tempo_tarefa+2,c
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;main.c: 179: tempo_tarefa[2] = 10000;
  3195  004A84  0E27               	movlw	39
  3196  004A86  6E27               	movwf	_tempo_tarefa+5,c
  3197  004A88  0E10               	movlw	16
  3198  004A8A  6E26               	movwf	_tempo_tarefa+4,c
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;main.c: 182: tarefa_em_execucao = 0;
  3202  004A8C  0E00               	movlw	0
  3203  004A8E  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3204                           
  3205                           ; BSR set to: 0
  3206  004A90  0012               	return		;funcret
  3207  004A92                     __end_of_inicializa_tarefas:
  3208                           	opt stack 0
  3209                           tblptru	equ	0xFF8
  3210                           tblptrh	equ	0xFF7
  3211                           tblptrl	equ	0xFF6
  3212                           tablat	equ	0xFF5
  3213                           intcon	equ	0xFF2
  3214                           intcon2	equ	0xFF1
  3215                           intcon3	equ	0xFF0
  3216                           postinc0	equ	0xFEE
  3217                           wreg	equ	0xFE8
  3218                           postdec1	equ	0xFE5
  3219                           fsr1h	equ	0xFE2
  3220                           fsr1l	equ	0xFE1
  3221                           postinc2	equ	0xFDE
  3222                           status	equ	0xFD8
  3223                           
  3224 ;; *************** function _escalonador *****************
  3225 ;; Defined at:
  3226 ;;		line 193 in file "main.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;		None
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;  cont            1   37[BANK1 ] unsigned char 
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  1    wreg      void 
  3233 ;; Registers used:
  3234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3240 ;;      Params:         0       0       0       0       0       0       0       0       0
  3241 ;;      Locals:         0       0       1       0       0       0       0       0       0
  3242 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3243 ;;      Totals:         0       0       3       0       0       0       0       0       0
  3244 ;;Total ram usage:        3 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; Hardware stack levels required when called:   17
  3247 ;; This function calls:
  3248 ;;		_disparo_gravacao
  3249 ;;		_verifica_dados_operacionais
  3250 ;;		_verifica_fence_externo
  3251 ;; This function is called by:
  3252 ;;		_main
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           	psect	text12
  3257  004012                     __ptext12:
  3258                           	opt stack 0
  3259  004012                     _escalonador:
  3260                           	opt stack 13
  3261                           
  3262                           ;main.c: 195: unsigned char cont;
  3263                           ;main.c: 196: for(cont = 0; cont<3;cont++)
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;incstack = 0
  3267  004012  0E00               	movlw	0
  3268  004014  0101               	movlb	1	; () banked
  3269  004016  6FF1               	movwf	escalonador@cont& (0+255),b
  3270  004018                     l11310:
  3271                           
  3272                           ; BSR set to: 1
  3273  004018  0E02               	movlw	2
  3274  00401A  65F1               	cpfsgt	escalonador@cont& (0+255),b
  3275  00401C  D001               	goto	l100
  3276  00401E  0012               	return	
  3277  004020                     l100:
  3278                           
  3279                           ; BSR set to: 1
  3280                           ;main.c: 197: {
  3281                           ;main.c: 198: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3282                           
  3283                           ; BSR set to: 1
  3284  004020  51F1               	movf	escalonador@cont& (0+255),w,b
  3285  004022  0D02               	mullw	2
  3286  004024  0EF2               	movlw	low _p_tarefas
  3287  004026  24F3               	addwf	prodl,w,c
  3288  004028  6ED9               	movwf	fsr2l,c
  3289  00402A  0E00               	movlw	high _p_tarefas
  3290  00402C  20F4               	addwfc	prodh,w,c
  3291  00402E  6EDA               	movwf	fsr2h,c
  3292  004030  50DE               	movf	postinc2,w,c
  3293  004032  10DE               	iorwf	postinc2,w,c
  3294  004034  B4D8               	btfsc	status,2,c
  3295  004036  D03D               	goto	l102
  3296                           
  3297                           ; BSR set to: 1
  3298  004038  51F1               	movf	escalonador@cont& (0+255),w,b
  3299  00403A  0D02               	mullw	2
  3300  00403C  0E22               	movlw	low _tempo_tarefa
  3301  00403E  24F3               	addwf	prodl,w,c
  3302  004040  6ED9               	movwf	fsr2l,c
  3303  004042  0E00               	movlw	high _tempo_tarefa
  3304  004044  20F4               	addwfc	prodh,w,c
  3305  004046  6EDA               	movwf	fsr2h,c
  3306  004048  50DE               	movf	postinc2,w,c
  3307  00404A  10DE               	iorwf	postinc2,w,c
  3308  00404C  A4D8               	btfss	status,2,c
  3309  00404E  D031               	goto	l102
  3310                           
  3311                           ; BSR set to: 1
  3312                           ;main.c: 199: {
  3313                           ;main.c: 200: tarefa_em_execucao = 1;
  3314  004050  0E01               	movlw	1
  3315  004052  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3316                           
  3317                           ;main.c: 201: timeout_tarefa = 60000;
  3318  004054  0EEA               	movlw	234
  3319  004056  6E31               	movwf	_timeout_tarefa+1,c
  3320  004058  0E60               	movlw	96
  3321  00405A  6E30               	movwf	_timeout_tarefa,c
  3322                           
  3323                           ; BSR set to: 1
  3324                           ;main.c: 202: p_tarefas[cont]();
  3325  00405C  51F1               	movf	escalonador@cont& (0+255),w,b
  3326  00405E  0D02               	mullw	2
  3327  004060  0EF2               	movlw	low _p_tarefas
  3328  004062  24F3               	addwf	prodl,w,c
  3329  004064  6ED9               	movwf	fsr2l,c
  3330  004066  0E00               	movlw	high _p_tarefas
  3331  004068  20F4               	addwfc	prodh,w,c
  3332  00406A  6EDA               	movwf	fsr2h,c
  3333  00406C  D801               	call	u14728
  3334  00406E  D00A               	goto	u14729
  3335  004070                     u14728:
  3336  004070  0005               	push	
  3337  004072  6EFA               	movwf	pclath,c
  3338  004074  50DE               	movf	postinc2,w,c
  3339  004076  6EFD               	movwf	tosl,c
  3340  004078  50DE               	movf	postinc2,w,c
  3341  00407A  6EFE               	movwf	tosh,c
  3342  00407C  50F8               	movf	tblptru,w,c
  3343  00407E  6EFF               	movwf	tosu,c
  3344  004080  50FA               	movf	pclath,w,c
  3345  004082  0012               	return		;indir
  3346  004084                     u14729:
  3347                           
  3348                           ;main.c: 203: tarefa_em_execucao = 0;
  3349  004084  0E00               	movlw	0
  3350  004086  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3351                           
  3352                           ;main.c: 204: tempo_tarefa[cont] = tempo_backup[cont];
  3353  004088  0101               	movlb	1	; () banked
  3354  00408A  51F1               	movf	escalonador@cont& (0+255),w,b
  3355  00408C  0D02               	mullw	2
  3356  00408E  0EEC               	movlw	low _tempo_backup
  3357  004090  24F3               	addwf	prodl,w,c
  3358  004092  6ED9               	movwf	fsr2l,c
  3359  004094  0E00               	movlw	high _tempo_backup
  3360  004096  20F4               	addwfc	prodh,w,c
  3361  004098  6EDA               	movwf	fsr2h,c
  3362  00409A  51F1               	movf	escalonador@cont& (0+255),w,b
  3363  00409C  0D02               	mullw	2
  3364  00409E  0E22               	movlw	low _tempo_tarefa
  3365  0040A0  24F3               	addwf	prodl,w,c
  3366  0040A2  6EE1               	movwf	fsr1l,c
  3367  0040A4  0E00               	movlw	high _tempo_tarefa
  3368  0040A6  20F4               	addwfc	prodh,w,c
  3369  0040A8  6EE2               	movwf	fsr1h,c
  3370  0040AA  CFDE FFE6          	movff	postinc2,postinc1
  3371  0040AE  CFDD FFE5          	movff	postdec2,postdec1
  3372  0040B2                     l102:
  3373                           
  3374                           ; BSR set to: 1
  3375                           
  3376                           ; BSR set to: 1
  3377  0040B2  2BF1               	incf	escalonador@cont& (0+255),f,b
  3378  0040B4  D7B1               	goto	l11310
  3379  0040B6                     __end_of_escalonador:
  3380                           	opt stack 0
  3381                           tosu	equ	0xFFF
  3382                           tosh	equ	0xFFE
  3383                           tosl	equ	0xFFD
  3384                           pclath	equ	0xFFA
  3385                           tblptru	equ	0xFF8
  3386                           tblptrh	equ	0xFF7
  3387                           tblptrl	equ	0xFF6
  3388                           tablat	equ	0xFF5
  3389                           prodh	equ	0xFF4
  3390                           prodl	equ	0xFF3
  3391                           intcon	equ	0xFF2
  3392                           intcon2	equ	0xFF1
  3393                           intcon3	equ	0xFF0
  3394                           postinc0	equ	0xFEE
  3395                           wreg	equ	0xFE8
  3396                           postinc1	equ	0xFE6
  3397                           postdec1	equ	0xFE5
  3398                           fsr1h	equ	0xFE2
  3399                           fsr1l	equ	0xFE1
  3400                           postinc2	equ	0xFDE
  3401                           postdec2	equ	0xFDD
  3402                           fsr2h	equ	0xFDA
  3403                           fsr2l	equ	0xFD9
  3404                           status	equ	0xFD8
  3405                           
  3406 ;; *************** function _disparo_gravacao *****************
  3407 ;; Defined at:
  3408 ;;		line 541 in file "main.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;		None
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      void 
  3415 ;; Registers used:
  3416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3422 ;;      Params:         0       0       0       0       0       0       0       0       0
  3423 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3424 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3425 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3426 ;;Total ram usage:        0 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:   16
  3429 ;; This function calls:
  3430 ;;		_escrita_sdcard
  3431 ;; This function is called by:
  3432 ;;		_inicializa_tarefas
  3433 ;;		_escalonador
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           	psect	text13
  3438  004F90                     __ptext13:
  3439                           	opt stack 0
  3440  004F90                     _disparo_gravacao:
  3441                           	opt stack 13
  3442                           
  3443                           ;main.c: 543: if(!time_sd)
  3444                           
  3445                           ; BSR set to: 1
  3446                           ;incstack = 0
  3447  004F90  502E               	movf	_time_sd,w,c
  3448  004F92  102F               	iorwf	_time_sd+1,w,c
  3449  004F94  A4D8               	btfss	status,2,c
  3450  004F96  0012               	return	
  3451                           
  3452                           ;main.c: 544: {
  3453                           ;main.c: 545: escrita_sdcard();
  3454  004F98  EC62  F01F         	call	_escrita_sdcard	;wreg free
  3455                           
  3456                           ;main.c: 546: time_sd = 30000;
  3457  004F9C  0E75               	movlw	117
  3458  004F9E  6E2F               	movwf	_time_sd+1,c
  3459  004FA0  0E30               	movlw	48
  3460  004FA2  6E2E               	movwf	_time_sd,c
  3461  004FA4  0012               	return	
  3462  004FA6                     __end_of_disparo_gravacao:
  3463                           	opt stack 0
  3464                           tosu	equ	0xFFF
  3465                           tosh	equ	0xFFE
  3466                           tosl	equ	0xFFD
  3467                           pclath	equ	0xFFA
  3468                           tblptru	equ	0xFF8
  3469                           tblptrh	equ	0xFF7
  3470                           tblptrl	equ	0xFF6
  3471                           tablat	equ	0xFF5
  3472                           prodh	equ	0xFF4
  3473                           prodl	equ	0xFF3
  3474                           intcon	equ	0xFF2
  3475                           intcon2	equ	0xFF1
  3476                           intcon3	equ	0xFF0
  3477                           postinc0	equ	0xFEE
  3478                           wreg	equ	0xFE8
  3479                           postinc1	equ	0xFE6
  3480                           postdec1	equ	0xFE5
  3481                           fsr1h	equ	0xFE2
  3482                           fsr1l	equ	0xFE1
  3483                           postinc2	equ	0xFDE
  3484                           postdec2	equ	0xFDD
  3485                           fsr2h	equ	0xFDA
  3486                           fsr2l	equ	0xFD9
  3487                           status	equ	0xFD8
  3488                           
  3489 ;; *************** function _verifica_dados_operacionais *****************
  3490 ;; Defined at:
  3491 ;;		line 526 in file "main.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;		None
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;		None
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  1    wreg      void 
  3498 ;; Registers used:
  3499 ;;		None
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3505 ;;      Params:         0       0       0       0       0       0       0       0       0
  3506 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3507 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3508 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3509 ;;Total ram usage:        0 bytes
  3510 ;; Hardware stack levels used:    1
  3511 ;; Hardware stack levels required when called:    3
  3512 ;; This function calls:
  3513 ;;		Nothing
  3514 ;; This function is called by:
  3515 ;;		_inicializa_tarefas
  3516 ;;		_escalonador
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text14
  3521  00506E                     __ptext14:
  3522                           	opt stack 0
  3523  00506E                     _verifica_dados_operacionais:
  3524                           	opt stack 26
  3525                           
  3526                           ;incstack = 0
  3527  00506E  0012               	return		;funcret
  3528  005070                     __end_of_verifica_dados_operacionais:
  3529                           	opt stack 0
  3530                           tosu	equ	0xFFF
  3531                           tosh	equ	0xFFE
  3532                           tosl	equ	0xFFD
  3533                           pclath	equ	0xFFA
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           prodh	equ	0xFF4
  3539                           prodl	equ	0xFF3
  3540                           intcon	equ	0xFF2
  3541                           intcon2	equ	0xFF1
  3542                           intcon3	equ	0xFF0
  3543                           postinc0	equ	0xFEE
  3544                           wreg	equ	0xFE8
  3545                           postinc1	equ	0xFE6
  3546                           postdec1	equ	0xFE5
  3547                           fsr1h	equ	0xFE2
  3548                           fsr1l	equ	0xFE1
  3549                           postinc2	equ	0xFDE
  3550                           postdec2	equ	0xFDD
  3551                           fsr2h	equ	0xFDA
  3552                           fsr2l	equ	0xFD9
  3553                           status	equ	0xFD8
  3554                           
  3555 ;; *************** function _verifica_fence_externo *****************
  3556 ;; Defined at:
  3557 ;;		line 264 in file "main.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;		None
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  temp_buff_lo   11   30[BANK0 ] unsigned char [11]
  3562 ;;  temp_buff_la   11   19[BANK0 ] unsigned char [11]
  3563 ;;  point_buff      3    0        PTR unsigned char 
  3564 ;;  point_buff_g    2   44[BANK0 ] PTR unsigned char 
  3565 ;;		 -> rawLongitude(13), 
  3566 ;;  point_buff_g    2   42[BANK0 ] PTR unsigned char 
  3567 ;;		 -> rawLatitude(13), 
  3568 ;;  i               1   48[BANK0 ] unsigned char 
  3569 ;;  point           1   47[BANK0 ] unsigned char 
  3570 ;;  j               1   46[BANK0 ] unsigned char 
  3571 ;;  count           1   41[BANK0 ] unsigned char 
  3572 ;;  count_index     1    0        unsigned char 
  3573 ;; Return value:  Size  Location     Type
  3574 ;;                  1    wreg      void 
  3575 ;; Registers used:
  3576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3577 ;; Tracked objects:
  3578 ;;		On entry : 0/0
  3579 ;;		On exit  : 0/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3582 ;;      Params:         0       0       0       0       0       0       0       0       0
  3583 ;;      Locals:         0      30       0       0       0       0       0       0       0
  3584 ;;      Temps:          0       6       0       0       0       0       0       0       0
  3585 ;;      Totals:         0      36       0       0       0       0       0       0       0
  3586 ;;Total ram usage:       36 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    6
  3589 ;; This function calls:
  3590 ;;		_Latitude
  3591 ;;		_Longitude
  3592 ;;		_atoi
  3593 ;;		_escreve_frase_ram_lcd
  3594 ;;		_posicao_cursor_lcd
  3595 ;; This function is called by:
  3596 ;;		_inicializa_tarefas
  3597 ;;		_escalonador
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           	psect	text15
  3602  000012                     __ptext15:
  3603                           	opt stack 0
  3604  000012                     _verifica_fence_externo:
  3605                           	opt stack 23
  3606                           
  3607                           ;main.c: 266: poligono_ext[0].fence_diff_lat[11] = "-2365.84991";
  3608                           
  3609                           ;incstack = 0
  3610  000012  0EFF               	movlw	low STR_1
  3611  000014  CFE8 F478          	movff	wreg,_poligono_ext+33
  3612                           
  3613                           ;main.c: 267: poligono_ext[0].fence_diff_long[11] = "-4653.16622";
  3614  000018  0E0B               	movlw	low STR_2
  3615  00001A  CFE8 F483          	movff	wreg,_poligono_ext+44
  3616                           
  3617                           ;main.c: 268: poligono_ext[1].fence_diff_lat[11] = "-2365.84991";
  3618  00001E  0EFF               	movlw	low STR_1
  3619  000020  CFE8 F4C4          	movff	wreg,_poligono_ext+109
  3620                           
  3621                           ;main.c: 269: poligono_ext[1].fence_diff_long[11] = "-4653.00475";
  3622  000024  0E23               	movlw	low STR_4
  3623  000026  CFE8 F4CF          	movff	wreg,_poligono_ext+120
  3624                           
  3625                           ;main.c: 270: poligono_ext[2].fence_diff_lat[11] = "-2365.99682";
  3626  00002A  0E17               	movlw	low STR_5
  3627  00002C  CFE8 F510          	movff	wreg,_poligono_ext+185
  3628                           
  3629                           ;main.c: 271: poligono_ext[2].fence_diff_long[11] = "-4653.00475";
  3630  000030  0E23               	movlw	low STR_4
  3631  000032  CFE8 F51B          	movff	wreg,_poligono_ext+196
  3632                           
  3633                           ;main.c: 272: poligono_ext[3].fence_diff_lat[11] = "-2365.99731";
  3634  000036  0EF3               	movlw	low STR_7
  3635  000038  CFE8 F55C          	movff	wreg,_poligono_ext+261
  3636                           
  3637                           ;main.c: 273: poligono_ext[3].fence_diff_long[11] = "-4653.16622";
  3638  00003C  0E0B               	movlw	low STR_2
  3639  00003E  CFE8 F567          	movff	wreg,_poligono_ext+272
  3640                           
  3641                           ;main.c: 276: unsigned char *point_buff, i, j, count, count_index;
  3642                           ;main.c: 277: unsigned char *point_buff_gps_lat, *point_buff_gps_long;
  3643                           ;main.c: 278: unsigned char point;
  3644                           ;main.c: 280: unsigned char temp_buff_lat[11] = "-4653.16622";
  3645  000042  EE21  F0A4         	lfsr	2,verifica_fence_externo@F4365
  3646  000046  EE10  F073         	lfsr	1,verifica_fence_externo@temp_buff_lat
  3647  00004A  0E0A               	movlw	10
  3648  00004C                     u14291:
  3649  00004C  CFDB FFE3          	movff	plusw2,plusw1
  3650  000050  06E8               	decf	wreg,f,c
  3651  000052  E2FC               	bc	u14291
  3652                           
  3653                           ;main.c: 281: unsigned char temp_buff_long[11] = "-4653.16622";
  3654  000054  EE21  F099         	lfsr	2,verifica_fence_externo@F4367
  3655  000058  EE10  F07E         	lfsr	1,verifica_fence_externo@temp_buff_long
  3656  00005C  0E0A               	movlw	10
  3657  00005E                     u14301:
  3658  00005E  CFDB FFE3          	movff	plusw2,plusw1
  3659  000062  06E8               	decf	wreg,f,c
  3660  000064  E2FC               	bc	u14301
  3661                           
  3662                           ;main.c: 282: count = 0;
  3663  000066  0E00               	movlw	0
  3664  000068  0100               	movlb	0	; () banked
  3665  00006A  6F89               	movwf	verifica_fence_externo@count& (0+255),b
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;main.c: 283: point = 0;
  3669  00006C  0E00               	movlw	0
  3670  00006E  6F8F               	movwf	verifica_fence_externo@point& (0+255),b
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;main.c: 284: j= 0;
  3674  000070  0E00               	movlw	0
  3675  000072  6F8E               	movwf	verifica_fence_externo@j& (0+255),b
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;main.c: 287: point_buff_gps_lat = Latitude();
  3679  000074  EC15  F028         	call	_Latitude	;wreg free
  3680  000078  C060  F08A         	movff	?_Latitude,verifica_fence_externo@point_buff_gps_lat
  3681  00007C  C061  F08B         	movff	?_Latitude+1,verifica_fence_externo@point_buff_gps_lat+1
  3682                           
  3683                           ;main.c: 288: point_buff_gps_long = Longitude();
  3684  000080  EC0F  F028         	call	_Longitude	;wreg free
  3685  000084  C060  F08C         	movff	?_Longitude,verifica_fence_externo@point_buff_gps_long
  3686  000088  C061  F08D         	movff	?_Longitude+1,verifica_fence_externo@point_buff_gps_long+1
  3687                           
  3688                           ;main.c: 290: for(i=0; i<11; i++)
  3689  00008C  0E00               	movlw	0
  3690  00008E  0100               	movlb	0	; () banked
  3691  000090  6F90               	movwf	verifica_fence_externo@i& (0+255),b
  3692  000092                     l11074:
  3693                           
  3694                           ; BSR set to: 0
  3695  000092  0E0A               	movlw	10
  3696  000094  6590               	cpfsgt	verifica_fence_externo@i& (0+255),b
  3697  000096  D001               	goto	l126
  3698  000098  D022               	goto	u14320
  3699  00009A                     l126:
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;main.c: 291: {
  3703                           ;main.c: 292: temp_buff_lat[i] = *point_buff_gps_lat;
  3704                           
  3705                           ; BSR set to: 0
  3706  00009A  C08A  FFD9         	movff	verifica_fence_externo@point_buff_gps_lat,fsr2l
  3707  00009E  C08B  FFDA         	movff	verifica_fence_externo@point_buff_gps_lat+1,fsr2h
  3708  0000A2  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3709  0000A4  0D01               	mullw	1
  3710  0000A6  0E73               	movlw	low verifica_fence_externo@temp_buff_lat
  3711  0000A8  24F3               	addwf	prodl,w,c
  3712  0000AA  6EE1               	movwf	fsr1l,c
  3713  0000AC  0E00               	movlw	high verifica_fence_externo@temp_buff_lat
  3714  0000AE  20F4               	addwfc	prodh,w,c
  3715  0000B0  6EE2               	movwf	fsr1h,c
  3716  0000B2  CFDF FFE7          	movff	indf2,indf1
  3717                           
  3718                           ;main.c: 293: temp_buff_long[i] = *point_buff_gps_long;
  3719  0000B6  C08C  FFD9         	movff	verifica_fence_externo@point_buff_gps_long,fsr2l
  3720  0000BA  C08D  FFDA         	movff	verifica_fence_externo@point_buff_gps_long+1,fsr2h
  3721  0000BE  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3722  0000C0  0D01               	mullw	1
  3723  0000C2  0E7E               	movlw	low verifica_fence_externo@temp_buff_long
  3724  0000C4  24F3               	addwf	prodl,w,c
  3725  0000C6  6EE1               	movwf	fsr1l,c
  3726  0000C8  0E00               	movlw	high verifica_fence_externo@temp_buff_long
  3727  0000CA  20F4               	addwfc	prodh,w,c
  3728  0000CC  6EE2               	movwf	fsr1h,c
  3729  0000CE  CFDF FFE7          	movff	indf2,indf1
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;main.c: 294: point_buff_gps_lat++;
  3733  0000D2  4B8A               	infsnz	verifica_fence_externo@point_buff_gps_lat& (0+255),f,b
  3734  0000D4  2B8B               	incf	(verifica_fence_externo@point_buff_gps_lat+1)& (0+255),f,b
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;main.c: 295: point_buff_gps_long++;
  3738  0000D6  4B8C               	infsnz	verifica_fence_externo@point_buff_gps_long& (0+255),f,b
  3739  0000D8  2B8D               	incf	(verifica_fence_externo@point_buff_gps_long+1)& (0+255),f,b
  3740                           
  3741                           ; BSR set to: 0
  3742  0000DA  2B90               	incf	verifica_fence_externo@i& (0+255),f,b
  3743  0000DC  D7DA               	goto	l11074
  3744  0000DE                     u14320:
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;main.c: 296: }
  3748                           ;main.c: 300: for(i=0; i<5; i++)
  3749                           
  3750                           ; BSR set to: 0
  3751  0000DE  0E00               	movlw	0
  3752  0000E0  6F90               	movwf	verifica_fence_externo@i& (0+255),b
  3753  0000E2                     l11090:
  3754                           
  3755                           ; BSR set to: 0
  3756  0000E2  0E04               	movlw	4
  3757  0000E4  6590               	cpfsgt	verifica_fence_externo@i& (0+255),b
  3758  0000E6  D001               	goto	l128
  3759  0000E8  D062               	goto	u14380
  3760  0000EA                     l128:
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;main.c: 301: {
  3764                           ;main.c: 302: if((poligono_ext[0].fence_diff_long[i] != temp_buff_long[i]) &&
  3765                           ;main.c: 303: (poligono_ext[1].fence_diff_long[i] != temp_buff_long[i]) &&
  3766                           ;main.c: 304: (poligono_ext[2].fence_diff_long[i] != temp_buff_long[i]) &&
  3767                           ;main.c: 305: (poligono_ext[3].fence_diff_long[i] != temp_buff_long[i])
  3768                           ;main.c: 306: )
  3769                           
  3770                           ; BSR set to: 0
  3771  0000EA  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3772  0000EC  0D01               	mullw	1
  3773  0000EE  0E7E               	movlw	low verifica_fence_externo@temp_buff_long
  3774  0000F0  24F3               	addwf	prodl,w,c
  3775  0000F2  6ED9               	movwf	fsr2l,c
  3776  0000F4  0E00               	movlw	high verifica_fence_externo@temp_buff_long
  3777  0000F6  20F4               	addwfc	prodh,w,c
  3778  0000F8  6EDA               	movwf	fsr2h,c
  3779  0000FA  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3780  0000FC  0D01               	mullw	1
  3781  0000FE  0E21               	movlw	33
  3782  000100  26F3               	addwf	prodl,f,c
  3783  000102  0E00               	movlw	0
  3784  000104  22F4               	addwfc	prodh,f,c
  3785  000106  0E57               	movlw	low _poligono_ext
  3786  000108  24F3               	addwf	prodl,w,c
  3787  00010A  6EE1               	movwf	fsr1l,c
  3788  00010C  0E04               	movlw	high _poligono_ext
  3789  00010E  20F4               	addwfc	prodh,w,c
  3790  000110  6EE2               	movwf	fsr1h,c
  3791  000112  50DE               	movf	postinc2,w,c
  3792  000114  18E6               	xorwf	postinc1,w,c
  3793  000116  B4D8               	btfsc	status,2,c
  3794  000118  D048               	goto	l130
  3795                           
  3796                           ; BSR set to: 0
  3797  00011A  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3798  00011C  0D01               	mullw	1
  3799  00011E  0E7E               	movlw	low verifica_fence_externo@temp_buff_long
  3800  000120  24F3               	addwf	prodl,w,c
  3801  000122  6ED9               	movwf	fsr2l,c
  3802  000124  0E00               	movlw	high verifica_fence_externo@temp_buff_long
  3803  000126  20F4               	addwfc	prodh,w,c
  3804  000128  6EDA               	movwf	fsr2h,c
  3805  00012A  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3806  00012C  0D01               	mullw	1
  3807  00012E  0E21               	movlw	33
  3808  000130  26F3               	addwf	prodl,f,c
  3809  000132  0E00               	movlw	0
  3810  000134  22F4               	addwfc	prodh,f,c
  3811  000136  0EA3               	movlw	low (_poligono_ext+76)
  3812  000138  24F3               	addwf	prodl,w,c
  3813  00013A  6EE1               	movwf	fsr1l,c
  3814  00013C  0E04               	movlw	high (_poligono_ext+76)
  3815  00013E  20F4               	addwfc	prodh,w,c
  3816  000140  6EE2               	movwf	fsr1h,c
  3817  000142  50DE               	movf	postinc2,w,c
  3818  000144  18E6               	xorwf	postinc1,w,c
  3819  000146  B4D8               	btfsc	status,2,c
  3820  000148  D030               	goto	l130
  3821                           
  3822                           ; BSR set to: 0
  3823  00014A  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3824  00014C  0D01               	mullw	1
  3825  00014E  0E7E               	movlw	low verifica_fence_externo@temp_buff_long
  3826  000150  24F3               	addwf	prodl,w,c
  3827  000152  6ED9               	movwf	fsr2l,c
  3828  000154  0E00               	movlw	high verifica_fence_externo@temp_buff_long
  3829  000156  20F4               	addwfc	prodh,w,c
  3830  000158  6EDA               	movwf	fsr2h,c
  3831  00015A  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3832  00015C  0D01               	mullw	1
  3833  00015E  0E21               	movlw	33
  3834  000160  26F3               	addwf	prodl,f,c
  3835  000162  0E00               	movlw	0
  3836  000164  22F4               	addwfc	prodh,f,c
  3837  000166  0EEF               	movlw	low (_poligono_ext+152)
  3838  000168  24F3               	addwf	prodl,w,c
  3839  00016A  6EE1               	movwf	fsr1l,c
  3840  00016C  0E04               	movlw	high (_poligono_ext+152)
  3841  00016E  20F4               	addwfc	prodh,w,c
  3842  000170  6EE2               	movwf	fsr1h,c
  3843  000172  50DE               	movf	postinc2,w,c
  3844  000174  18E6               	xorwf	postinc1,w,c
  3845  000176  B4D8               	btfsc	status,2,c
  3846  000178  D018               	goto	l130
  3847                           
  3848                           ; BSR set to: 0
  3849  00017A  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3850  00017C  0D01               	mullw	1
  3851  00017E  0E7E               	movlw	low verifica_fence_externo@temp_buff_long
  3852  000180  24F3               	addwf	prodl,w,c
  3853  000182  6ED9               	movwf	fsr2l,c
  3854  000184  0E00               	movlw	high verifica_fence_externo@temp_buff_long
  3855  000186  20F4               	addwfc	prodh,w,c
  3856  000188  6EDA               	movwf	fsr2h,c
  3857  00018A  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3858  00018C  0D01               	mullw	1
  3859  00018E  0E21               	movlw	33
  3860  000190  26F3               	addwf	prodl,f,c
  3861  000192  0E00               	movlw	0
  3862  000194  22F4               	addwfc	prodh,f,c
  3863  000196  0E3B               	movlw	low (_poligono_ext+228)
  3864  000198  24F3               	addwf	prodl,w,c
  3865  00019A  6EE1               	movwf	fsr1l,c
  3866  00019C  0E05               	movlw	high (_poligono_ext+228)
  3867  00019E  20F4               	addwfc	prodh,w,c
  3868  0001A0  6EE2               	movwf	fsr1h,c
  3869  0001A2  50DE               	movf	postinc2,w,c
  3870  0001A4  18E6               	xorwf	postinc1,w,c
  3871  0001A6  A4D8               	btfss	status,2,c
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;main.c: 307: {
  3875                           ;main.c: 308: flag[2].point = 1;
  3876  0001A8  81FA               	bsf	(_flag+2)& (0+255),0,b
  3877  0001AA                     l130:
  3878                           
  3879                           ; BSR set to: 0
  3880                           
  3881                           ; BSR set to: 0
  3882  0001AA  2B90               	incf	verifica_fence_externo@i& (0+255),f,b
  3883  0001AC  D79A               	goto	l11090
  3884  0001AE                     u14380:
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;main.c: 309: }
  3888                           ;main.c: 310: }
  3889                           ;main.c: 312: for(i=0; i<5; i++)
  3890                           
  3891                           ; BSR set to: 0
  3892  0001AE  0E00               	movlw	0
  3893  0001B0  6F90               	movwf	verifica_fence_externo@i& (0+255),b
  3894  0001B2                     l11110:
  3895                           
  3896                           ; BSR set to: 0
  3897  0001B2  0E04               	movlw	4
  3898  0001B4  6590               	cpfsgt	verifica_fence_externo@i& (0+255),b
  3899  0001B6  D001               	goto	l131
  3900  0001B8  D21F               	goto	l134
  3901  0001BA                     l131:
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;main.c: 313: {
  3905                           ;main.c: 314: if((poligono_ext[0].fence_diff_lat[i] != temp_buff_lat[i]) &&
  3906                           ;main.c: 315: (poligono_ext[1].fence_diff_lat[i] != temp_buff_lat[i]) &&
  3907                           ;main.c: 316: (poligono_ext[2].fence_diff_lat[i] != temp_buff_lat[i]) &&
  3908                           ;main.c: 317: (poligono_ext[3].fence_diff_lat[i] != temp_buff_lat[i])
  3909                           ;main.c: 318: )
  3910                           
  3911                           ; BSR set to: 0
  3912  0001BA  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3913  0001BC  0D01               	mullw	1
  3914  0001BE  0E73               	movlw	low verifica_fence_externo@temp_buff_lat
  3915  0001C0  24F3               	addwf	prodl,w,c
  3916  0001C2  6ED9               	movwf	fsr2l,c
  3917  0001C4  0E00               	movlw	high verifica_fence_externo@temp_buff_lat
  3918  0001C6  20F4               	addwfc	prodh,w,c
  3919  0001C8  6EDA               	movwf	fsr2h,c
  3920  0001CA  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3921  0001CC  0D01               	mullw	1
  3922  0001CE  0E16               	movlw	22
  3923  0001D0  26F3               	addwf	prodl,f,c
  3924  0001D2  0E00               	movlw	0
  3925  0001D4  22F4               	addwfc	prodh,f,c
  3926  0001D6  0E57               	movlw	low _poligono_ext
  3927  0001D8  24F3               	addwf	prodl,w,c
  3928  0001DA  6EE1               	movwf	fsr1l,c
  3929  0001DC  0E04               	movlw	high _poligono_ext
  3930  0001DE  20F4               	addwfc	prodh,w,c
  3931  0001E0  6EE2               	movwf	fsr1h,c
  3932  0001E2  50DE               	movf	postinc2,w,c
  3933  0001E4  18E6               	xorwf	postinc1,w,c
  3934  0001E6  B4D8               	btfsc	status,2,c
  3935  0001E8  D048               	goto	l133
  3936                           
  3937                           ; BSR set to: 0
  3938  0001EA  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3939  0001EC  0D01               	mullw	1
  3940  0001EE  0E73               	movlw	low verifica_fence_externo@temp_buff_lat
  3941  0001F0  24F3               	addwf	prodl,w,c
  3942  0001F2  6ED9               	movwf	fsr2l,c
  3943  0001F4  0E00               	movlw	high verifica_fence_externo@temp_buff_lat
  3944  0001F6  20F4               	addwfc	prodh,w,c
  3945  0001F8  6EDA               	movwf	fsr2h,c
  3946  0001FA  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3947  0001FC  0D01               	mullw	1
  3948  0001FE  0E16               	movlw	22
  3949  000200  26F3               	addwf	prodl,f,c
  3950  000202  0E00               	movlw	0
  3951  000204  22F4               	addwfc	prodh,f,c
  3952  000206  0EA3               	movlw	low (_poligono_ext+76)
  3953  000208  24F3               	addwf	prodl,w,c
  3954  00020A  6EE1               	movwf	fsr1l,c
  3955  00020C  0E04               	movlw	high (_poligono_ext+76)
  3956  00020E  20F4               	addwfc	prodh,w,c
  3957  000210  6EE2               	movwf	fsr1h,c
  3958  000212  50DE               	movf	postinc2,w,c
  3959  000214  18E6               	xorwf	postinc1,w,c
  3960  000216  B4D8               	btfsc	status,2,c
  3961  000218  D030               	goto	l133
  3962                           
  3963                           ; BSR set to: 0
  3964  00021A  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3965  00021C  0D01               	mullw	1
  3966  00021E  0E73               	movlw	low verifica_fence_externo@temp_buff_lat
  3967  000220  24F3               	addwf	prodl,w,c
  3968  000222  6ED9               	movwf	fsr2l,c
  3969  000224  0E00               	movlw	high verifica_fence_externo@temp_buff_lat
  3970  000226  20F4               	addwfc	prodh,w,c
  3971  000228  6EDA               	movwf	fsr2h,c
  3972  00022A  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3973  00022C  0D01               	mullw	1
  3974  00022E  0E16               	movlw	22
  3975  000230  26F3               	addwf	prodl,f,c
  3976  000232  0E00               	movlw	0
  3977  000234  22F4               	addwfc	prodh,f,c
  3978  000236  0EEF               	movlw	low (_poligono_ext+152)
  3979  000238  24F3               	addwf	prodl,w,c
  3980  00023A  6EE1               	movwf	fsr1l,c
  3981  00023C  0E04               	movlw	high (_poligono_ext+152)
  3982  00023E  20F4               	addwfc	prodh,w,c
  3983  000240  6EE2               	movwf	fsr1h,c
  3984  000242  50DE               	movf	postinc2,w,c
  3985  000244  18E6               	xorwf	postinc1,w,c
  3986  000246  B4D8               	btfsc	status,2,c
  3987  000248  D018               	goto	l133
  3988                           
  3989                           ; BSR set to: 0
  3990  00024A  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3991  00024C  0D01               	mullw	1
  3992  00024E  0E73               	movlw	low verifica_fence_externo@temp_buff_lat
  3993  000250  24F3               	addwf	prodl,w,c
  3994  000252  6ED9               	movwf	fsr2l,c
  3995  000254  0E00               	movlw	high verifica_fence_externo@temp_buff_lat
  3996  000256  20F4               	addwfc	prodh,w,c
  3997  000258  6EDA               	movwf	fsr2h,c
  3998  00025A  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3999  00025C  0D01               	mullw	1
  4000  00025E  0E16               	movlw	22
  4001  000260  26F3               	addwf	prodl,f,c
  4002  000262  0E00               	movlw	0
  4003  000264  22F4               	addwfc	prodh,f,c
  4004  000266  0E3B               	movlw	low (_poligono_ext+228)
  4005  000268  24F3               	addwf	prodl,w,c
  4006  00026A  6EE1               	movwf	fsr1l,c
  4007  00026C  0E05               	movlw	high (_poligono_ext+228)
  4008  00026E  20F4               	addwfc	prodh,w,c
  4009  000270  6EE2               	movwf	fsr1h,c
  4010  000272  50DE               	movf	postinc2,w,c
  4011  000274  18E6               	xorwf	postinc1,w,c
  4012  000276  A4D8               	btfss	status,2,c
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;main.c: 319: {
  4016                           ;main.c: 320: flag[2].point = 1;
  4017  000278  81FA               	bsf	(_flag+2)& (0+255),0,b
  4018  00027A                     l133:
  4019                           
  4020                           ; BSR set to: 0
  4021                           
  4022                           ; BSR set to: 0
  4023  00027A  2B90               	incf	verifica_fence_externo@i& (0+255),f,b
  4024  00027C  D79A               	goto	l11110
  4025  00027E                     
  4026                           ; BSR set to: 0
  4027                           ;main.c: 326: {
  4028                           ;main.c: 327: for(i=6; i<11; i++)
  4029                           
  4030                           ; BSR set to: 0
  4031  00027E  0E06               	movlw	6
  4032  000280  6F90               	movwf	verifica_fence_externo@i& (0+255),b
  4033  000282                     l11130:
  4034                           
  4035                           ; BSR set to: 0
  4036  000282  0E0A               	movlw	10
  4037  000284  6590               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4038  000286  D001               	goto	l136
  4039  000288  D08F               	goto	u14490
  4040  00028A                     l136:
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;main.c: 328: {
  4044                           ;main.c: 329: if(poligono_ext[point].fence_diff_lat[i] != poligono_ext[point].latitude[i
      +                          ])
  4045                           
  4046                           ; BSR set to: 0
  4047  00028A  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4048  00028C  0D4C               	mullw	76
  4049  00028E  0E57               	movlw	low _poligono_ext
  4050  000290  6F6D               	movwf	??_verifica_fence_externo& (0+255),b
  4051  000292  0E04               	movlw	high _poligono_ext
  4052  000294  6F6E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4053  000296  50F3               	movf	prodl,w,c
  4054  000298  276D               	addwf	??_verifica_fence_externo& (0+255),f,b
  4055  00029A  50F4               	movf	prodh,w,c
  4056  00029C  236E               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4057  00029E  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  4058  0002A0  0D01               	mullw	1
  4059  0002A2  50F3               	movf	prodl,w,c
  4060  0002A4  256D               	addwf	??_verifica_fence_externo& (0+255),w,b
  4061  0002A6  6ED9               	movwf	fsr2l,c
  4062  0002A8  50F4               	movf	prodh,w,c
  4063  0002AA  216E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4064  0002AC  6EDA               	movwf	fsr2h,c
  4065  0002AE  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  4066  0002B0  0D01               	mullw	1
  4067  0002B2  0E16               	movlw	22
  4068  0002B4  26F3               	addwf	prodl,f,c
  4069  0002B6  0E00               	movlw	0
  4070  0002B8  22F4               	addwfc	prodh,f,c
  4071  0002BA  0E57               	movlw	low _poligono_ext
  4072  0002BC  6F70               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4073  0002BE  0E04               	movlw	high _poligono_ext
  4074  0002C0  6F71               	movwf	(??_verifica_fence_externo+4)& (0+255),b
  4075  0002C2  50F3               	movf	prodl,w,c
  4076  0002C4  2770               	addwf	(??_verifica_fence_externo+3)& (0+255),f,b
  4077  0002C6  50F4               	movf	prodh,w,c
  4078  0002C8  2371               	addwfc	(??_verifica_fence_externo+4)& (0+255),f,b
  4079  0002CA  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4080  0002CC  0D4C               	mullw	76
  4081  0002CE  50F3               	movf	prodl,w,c
  4082  0002D0  2570               	addwf	(??_verifica_fence_externo+3)& (0+255),w,b
  4083  0002D2  6EE1               	movwf	fsr1l,c
  4084  0002D4  50F4               	movf	prodh,w,c
  4085  0002D6  2171               	addwfc	(??_verifica_fence_externo+4)& (0+255),w,b
  4086  0002D8  6EE2               	movwf	fsr1h,c
  4087  0002DA  50DE               	movf	postinc2,w,c
  4088  0002DC  18E6               	xorwf	postinc1,w,c
  4089  0002DE  B4D8               	btfsc	status,2,c
  4090  0002E0  D061               	goto	u14480
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;main.c: 330: {
  4094                           ;main.c: 331: for(j= 0; i < 11; j++)
  4095  0002E2  0E00               	movlw	0
  4096  0002E4  6F8E               	movwf	verifica_fence_externo@j& (0+255),b
  4097  0002E6                     l11138:
  4098                           
  4099                           ; BSR set to: 0
  4100  0002E6  0E0A               	movlw	10
  4101  0002E8  6590               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4102  0002EA  D001               	goto	l139
  4103  0002EC  D05B               	goto	u14480
  4104  0002EE                     l139:
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;main.c: 332: {
  4108                           ;main.c: 333: poligono_ext[point].fence_lat_min[j] = poligono_ext[point].fence_diff_lat[
      +                          i];
  4109                           
  4110                           ; BSR set to: 0
  4111  0002EE  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  4112  0002F0  0D01               	mullw	1
  4113  0002F2  0E16               	movlw	22
  4114  0002F4  26F3               	addwf	prodl,f,c
  4115  0002F6  0E00               	movlw	0
  4116  0002F8  22F4               	addwfc	prodh,f,c
  4117  0002FA  0E57               	movlw	low _poligono_ext
  4118  0002FC  6F6D               	movwf	??_verifica_fence_externo& (0+255),b
  4119  0002FE  0E04               	movlw	high _poligono_ext
  4120  000300  6F6E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4121  000302  50F3               	movf	prodl,w,c
  4122  000304  276D               	addwf	??_verifica_fence_externo& (0+255),f,b
  4123  000306  50F4               	movf	prodh,w,c
  4124  000308  236E               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4125  00030A  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4126  00030C  0D4C               	mullw	76
  4127  00030E  50F3               	movf	prodl,w,c
  4128  000310  256D               	addwf	??_verifica_fence_externo& (0+255),w,b
  4129  000312  6ED9               	movwf	fsr2l,c
  4130  000314  50F4               	movf	prodh,w,c
  4131  000316  216E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4132  000318  6EDA               	movwf	fsr2h,c
  4133  00031A  518E               	movf	verifica_fence_externo@j& (0+255),w,b
  4134  00031C  0D01               	mullw	1
  4135  00031E  0E2C               	movlw	44
  4136  000320  26F3               	addwf	prodl,f,c
  4137  000322  0E00               	movlw	0
  4138  000324  22F4               	addwfc	prodh,f,c
  4139  000326  0E57               	movlw	low _poligono_ext
  4140  000328  6F6F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4141  00032A  0E04               	movlw	high _poligono_ext
  4142  00032C  6F70               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4143  00032E  50F3               	movf	prodl,w,c
  4144  000330  276F               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  4145  000332  50F4               	movf	prodh,w,c
  4146  000334  2370               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  4147  000336  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4148  000338  0D4C               	mullw	76
  4149  00033A  50F3               	movf	prodl,w,c
  4150  00033C  256F               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  4151  00033E  6EE1               	movwf	fsr1l,c
  4152  000340  50F4               	movf	prodh,w,c
  4153  000342  2170               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  4154  000344  6EE2               	movwf	fsr1h,c
  4155  000346  CFDF FFE7          	movff	indf2,indf1
  4156                           
  4157                           ;main.c: 334: poligono_ext[point].point_lat_min[j] = poligono_ext[point].latitude[i];
  4158  00034A  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4159  00034C  0D4C               	mullw	76
  4160  00034E  0E57               	movlw	low _poligono_ext
  4161  000350  6F6D               	movwf	??_verifica_fence_externo& (0+255),b
  4162  000352  0E04               	movlw	high _poligono_ext
  4163  000354  6F6E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4164  000356  50F3               	movf	prodl,w,c
  4165  000358  276D               	addwf	??_verifica_fence_externo& (0+255),f,b
  4166  00035A  50F4               	movf	prodh,w,c
  4167  00035C  236E               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4168  00035E  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  4169  000360  0D01               	mullw	1
  4170  000362  50F3               	movf	prodl,w,c
  4171  000364  256D               	addwf	??_verifica_fence_externo& (0+255),w,b
  4172  000366  6ED9               	movwf	fsr2l,c
  4173  000368  50F4               	movf	prodh,w,c
  4174  00036A  216E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4175  00036C  6EDA               	movwf	fsr2h,c
  4176  00036E  518E               	movf	verifica_fence_externo@j& (0+255),w,b
  4177  000370  0D01               	mullw	1
  4178  000372  0E38               	movlw	56
  4179  000374  26F3               	addwf	prodl,f,c
  4180  000376  0E00               	movlw	0
  4181  000378  22F4               	addwfc	prodh,f,c
  4182  00037A  0E57               	movlw	low _poligono_ext
  4183  00037C  6F6F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4184  00037E  0E04               	movlw	high _poligono_ext
  4185  000380  6F70               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4186  000382  50F3               	movf	prodl,w,c
  4187  000384  276F               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  4188  000386  50F4               	movf	prodh,w,c
  4189  000388  2370               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  4190  00038A  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4191  00038C  0D4C               	mullw	76
  4192  00038E  50F3               	movf	prodl,w,c
  4193  000390  256F               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  4194  000392  6EE1               	movwf	fsr1l,c
  4195  000394  50F4               	movf	prodh,w,c
  4196  000396  2170               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  4197  000398  6EE2               	movwf	fsr1h,c
  4198  00039A  CFDF FFE7          	movff	indf2,indf1
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;main.c: 335: i++;
  4202  00039E  2B90               	incf	verifica_fence_externo@i& (0+255),f,b
  4203                           
  4204                           ; BSR set to: 0
  4205  0003A0  2B8E               	incf	verifica_fence_externo@j& (0+255),f,b
  4206  0003A2  D7A1               	goto	l11138
  4207  0003A4                     u14480:
  4208                           
  4209                           ; BSR set to: 0
  4210                           
  4211                           ; BSR set to: 0
  4212                           
  4213                           ; BSR set to: 0
  4214  0003A4  2B90               	incf	verifica_fence_externo@i& (0+255),f,b
  4215  0003A6  D76D               	goto	l11130
  4216  0003A8                     u14490:
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;main.c: 336: }
  4220                           ;main.c: 338: }
  4221                           ;main.c: 339: }
  4222                           ;main.c: 341: for(i=6; i<11; i++)
  4223                           
  4224                           ; BSR set to: 0
  4225  0003A8  0E06               	movlw	6
  4226  0003AA  6F90               	movwf	verifica_fence_externo@i& (0+255),b
  4227  0003AC                     l11156:
  4228                           
  4229                           ; BSR set to: 0
  4230  0003AC  0E0A               	movlw	10
  4231  0003AE  6590               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4232  0003B0  D001               	goto	l141
  4233  0003B2  D097               	goto	u14540
  4234  0003B4                     l141:
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;main.c: 342: {
  4238                           ;main.c: 343: if(poligono_ext[point].fence_diff_long[i] != poligono_ext[point].longitude
      +                          [i])
  4239                           
  4240                           ; BSR set to: 0
  4241  0003B4  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  4242  0003B6  0D01               	mullw	1
  4243  0003B8  0E0B               	movlw	11
  4244  0003BA  26F3               	addwf	prodl,f,c
  4245  0003BC  0E00               	movlw	0
  4246  0003BE  22F4               	addwfc	prodh,f,c
  4247  0003C0  0E57               	movlw	low _poligono_ext
  4248  0003C2  6F6D               	movwf	??_verifica_fence_externo& (0+255),b
  4249  0003C4  0E04               	movlw	high _poligono_ext
  4250  0003C6  6F6E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4251  0003C8  50F3               	movf	prodl,w,c
  4252  0003CA  276D               	addwf	??_verifica_fence_externo& (0+255),f,b
  4253  0003CC  50F4               	movf	prodh,w,c
  4254  0003CE  236E               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4255  0003D0  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4256  0003D2  0D4C               	mullw	76
  4257  0003D4  50F3               	movf	prodl,w,c
  4258  0003D6  256D               	addwf	??_verifica_fence_externo& (0+255),w,b
  4259  0003D8  6ED9               	movwf	fsr2l,c
  4260  0003DA  50F4               	movf	prodh,w,c
  4261  0003DC  216E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4262  0003DE  6EDA               	movwf	fsr2h,c
  4263  0003E0  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  4264  0003E2  0D01               	mullw	1
  4265  0003E4  0E21               	movlw	33
  4266  0003E6  26F3               	addwf	prodl,f,c
  4267  0003E8  0E00               	movlw	0
  4268  0003EA  22F4               	addwfc	prodh,f,c
  4269  0003EC  0E57               	movlw	low _poligono_ext
  4270  0003EE  6F70               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4271  0003F0  0E04               	movlw	high _poligono_ext
  4272  0003F2  6F71               	movwf	(??_verifica_fence_externo+4)& (0+255),b
  4273  0003F4  50F3               	movf	prodl,w,c
  4274  0003F6  2770               	addwf	(??_verifica_fence_externo+3)& (0+255),f,b
  4275  0003F8  50F4               	movf	prodh,w,c
  4276  0003FA  2371               	addwfc	(??_verifica_fence_externo+4)& (0+255),f,b
  4277  0003FC  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4278  0003FE  0D4C               	mullw	76
  4279  000400  50F3               	movf	prodl,w,c
  4280  000402  2570               	addwf	(??_verifica_fence_externo+3)& (0+255),w,b
  4281  000404  6EE1               	movwf	fsr1l,c
  4282  000406  50F4               	movf	prodh,w,c
  4283  000408  2171               	addwfc	(??_verifica_fence_externo+4)& (0+255),w,b
  4284  00040A  6EE2               	movwf	fsr1h,c
  4285  00040C  50DE               	movf	postinc2,w,c
  4286  00040E  18E6               	xorwf	postinc1,w,c
  4287  000410  B4D8               	btfsc	status,2,c
  4288  000412  D065               	goto	u14530
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;main.c: 344: {
  4292                           ;main.c: 345: for(j= 0; i < 11; j++)
  4293  000414  0E00               	movlw	0
  4294  000416  6F8E               	movwf	verifica_fence_externo@j& (0+255),b
  4295  000418                     l11164:
  4296                           
  4297                           ; BSR set to: 0
  4298  000418  0E0A               	movlw	10
  4299  00041A  6590               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4300  00041C  D001               	goto	l144
  4301  00041E  D05F               	goto	u14530
  4302  000420                     l144:
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;main.c: 346: {
  4306                           ;main.c: 347: poligono_ext[point].fence_long_min[j] = poligono_ext[point].fence_diff_lon
      +                          g[i];
  4307                           
  4308                           ; BSR set to: 0
  4309  000420  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  4310  000422  0D01               	mullw	1
  4311  000424  0E21               	movlw	33
  4312  000426  26F3               	addwf	prodl,f,c
  4313  000428  0E00               	movlw	0
  4314  00042A  22F4               	addwfc	prodh,f,c
  4315  00042C  0E57               	movlw	low _poligono_ext
  4316  00042E  6F6D               	movwf	??_verifica_fence_externo& (0+255),b
  4317  000430  0E04               	movlw	high _poligono_ext
  4318  000432  6F6E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4319  000434  50F3               	movf	prodl,w,c
  4320  000436  276D               	addwf	??_verifica_fence_externo& (0+255),f,b
  4321  000438  50F4               	movf	prodh,w,c
  4322  00043A  236E               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4323  00043C  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4324  00043E  0D4C               	mullw	76
  4325  000440  50F3               	movf	prodl,w,c
  4326  000442  256D               	addwf	??_verifica_fence_externo& (0+255),w,b
  4327  000444  6ED9               	movwf	fsr2l,c
  4328  000446  50F4               	movf	prodh,w,c
  4329  000448  216E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4330  00044A  6EDA               	movwf	fsr2h,c
  4331  00044C  518E               	movf	verifica_fence_externo@j& (0+255),w,b
  4332  00044E  0D01               	mullw	1
  4333  000450  0E32               	movlw	50
  4334  000452  26F3               	addwf	prodl,f,c
  4335  000454  0E00               	movlw	0
  4336  000456  22F4               	addwfc	prodh,f,c
  4337  000458  0E57               	movlw	low _poligono_ext
  4338  00045A  6F6F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4339  00045C  0E04               	movlw	high _poligono_ext
  4340  00045E  6F70               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4341  000460  50F3               	movf	prodl,w,c
  4342  000462  276F               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  4343  000464  50F4               	movf	prodh,w,c
  4344  000466  2370               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  4345  000468  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4346  00046A  0D4C               	mullw	76
  4347  00046C  50F3               	movf	prodl,w,c
  4348  00046E  256F               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  4349  000470  6EE1               	movwf	fsr1l,c
  4350  000472  50F4               	movf	prodh,w,c
  4351  000474  2170               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  4352  000476  6EE2               	movwf	fsr1h,c
  4353  000478  CFDF FFE7          	movff	indf2,indf1
  4354                           
  4355                           ;main.c: 348: poligono_ext[point].point_long_min[j] = poligono_ext[point].longitude[i];
  4356  00047C  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  4357  00047E  0D01               	mullw	1
  4358  000480  0E0B               	movlw	11
  4359  000482  26F3               	addwf	prodl,f,c
  4360  000484  0E00               	movlw	0
  4361  000486  22F4               	addwfc	prodh,f,c
  4362  000488  0E57               	movlw	low _poligono_ext
  4363  00048A  6F6D               	movwf	??_verifica_fence_externo& (0+255),b
  4364  00048C  0E04               	movlw	high _poligono_ext
  4365  00048E  6F6E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4366  000490  50F3               	movf	prodl,w,c
  4367  000492  276D               	addwf	??_verifica_fence_externo& (0+255),f,b
  4368  000494  50F4               	movf	prodh,w,c
  4369  000496  236E               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4370  000498  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4371  00049A  0D4C               	mullw	76
  4372  00049C  50F3               	movf	prodl,w,c
  4373  00049E  256D               	addwf	??_verifica_fence_externo& (0+255),w,b
  4374  0004A0  6ED9               	movwf	fsr2l,c
  4375  0004A2  50F4               	movf	prodh,w,c
  4376  0004A4  216E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4377  0004A6  6EDA               	movwf	fsr2h,c
  4378  0004A8  518E               	movf	verifica_fence_externo@j& (0+255),w,b
  4379  0004AA  0D01               	mullw	1
  4380  0004AC  0E3E               	movlw	62
  4381  0004AE  26F3               	addwf	prodl,f,c
  4382  0004B0  0E00               	movlw	0
  4383  0004B2  22F4               	addwfc	prodh,f,c
  4384  0004B4  0E57               	movlw	low _poligono_ext
  4385  0004B6  6F6F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4386  0004B8  0E04               	movlw	high _poligono_ext
  4387  0004BA  6F70               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4388  0004BC  50F3               	movf	prodl,w,c
  4389  0004BE  276F               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  4390  0004C0  50F4               	movf	prodh,w,c
  4391  0004C2  2370               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  4392  0004C4  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4393  0004C6  0D4C               	mullw	76
  4394  0004C8  50F3               	movf	prodl,w,c
  4395  0004CA  256F               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  4396  0004CC  6EE1               	movwf	fsr1l,c
  4397  0004CE  50F4               	movf	prodh,w,c
  4398  0004D0  2170               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  4399  0004D2  6EE2               	movwf	fsr1h,c
  4400  0004D4  CFDF FFE7          	movff	indf2,indf1
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;main.c: 349: i++;
  4404  0004D8  2B90               	incf	verifica_fence_externo@i& (0+255),f,b
  4405                           
  4406                           ; BSR set to: 0
  4407  0004DA  2B8E               	incf	verifica_fence_externo@j& (0+255),f,b
  4408  0004DC  D79D               	goto	l11164
  4409  0004DE                     u14530:
  4410                           
  4411                           ; BSR set to: 0
  4412                           
  4413                           ; BSR set to: 0
  4414                           
  4415                           ; BSR set to: 0
  4416  0004DE  2B90               	incf	verifica_fence_externo@i& (0+255),f,b
  4417  0004E0  D765               	goto	l11156
  4418  0004E2                     u14540:
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;main.c: 350: }
  4422                           ;main.c: 352: }
  4423                           ;main.c: 353: }
  4424                           ;main.c: 354: poligono_ext[point].diff_lat = (atoi(poligono_ext[point].fence_lat_min)) -
      +                           (atoi(poligono_ext[point].point_lat_min));
  4425                           
  4426                           ; BSR set to: 0
  4427  0004E2  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4428  0004E4  0D4C               	mullw	76
  4429  0004E6  0E2C               	movlw	44
  4430  0004E8  26F3               	addwf	prodl,f,c
  4431  0004EA  0E00               	movlw	0
  4432  0004EC  22F4               	addwfc	prodh,f,c
  4433  0004EE  0E57               	movlw	low _poligono_ext
  4434  0004F0  24F3               	addwf	prodl,w,c
  4435  0004F2  6F66               	movwf	atoi@s& (0+255),b
  4436  0004F4  0E04               	movlw	high _poligono_ext
  4437  0004F6  20F4               	addwfc	prodh,w,c
  4438  0004F8  6F67               	movwf	(atoi@s+1)& (0+255),b
  4439  0004FA  EC34  F01E         	call	_atoi	;wreg free
  4440  0004FE  C066  F06D         	movff	?_atoi,??_verifica_fence_externo
  4441  000502  C067  F06E         	movff	?_atoi+1,??_verifica_fence_externo+1
  4442  000506  0100               	movlb	0	; () banked
  4443  000508  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4444  00050A  0D4C               	mullw	76
  4445  00050C  0E38               	movlw	56
  4446  00050E  26F3               	addwf	prodl,f,c
  4447  000510  0E00               	movlw	0
  4448  000512  22F4               	addwfc	prodh,f,c
  4449  000514  0E57               	movlw	low _poligono_ext
  4450  000516  24F3               	addwf	prodl,w,c
  4451  000518  6F66               	movwf	atoi@s& (0+255),b
  4452  00051A  0E04               	movlw	high _poligono_ext
  4453  00051C  20F4               	addwfc	prodh,w,c
  4454  00051E  6F67               	movwf	(atoi@s+1)& (0+255),b
  4455  000520  EC34  F01E         	call	_atoi	;wreg free
  4456  000524  0100               	movlb	0	; () banked
  4457  000526  1F66               	comf	?_atoi& (0+255),f,b
  4458  000528  1F67               	comf	(?_atoi+1)& (0+255),f,b
  4459  00052A  4B66               	infsnz	?_atoi& (0+255),f,b
  4460  00052C  2B67               	incf	(?_atoi+1)& (0+255),f,b
  4461  00052E  5166               	movf	?_atoi& (0+255),w,b
  4462  000530  256D               	addwf	??_verifica_fence_externo& (0+255),w,b
  4463  000532  6F6F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4464  000534  5167               	movf	(?_atoi+1)& (0+255),w,b
  4465  000536  216E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4466  000538  6F70               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4467  00053A  6B71               	clrf	(??_verifica_fence_externo+4)& (0+255),b
  4468  00053C  BF70               	btfsc	(??_verifica_fence_externo+3)& (0+255),7,b
  4469  00053E  0771               	decf	(??_verifica_fence_externo+4)& (0+255),f,b
  4470  000540  5171               	movf	(??_verifica_fence_externo+4)& (0+255),w,b
  4471  000542  6F72               	movwf	(??_verifica_fence_externo+5)& (0+255),b
  4472  000544  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4473  000546  0D4C               	mullw	76
  4474  000548  0E44               	movlw	68
  4475  00054A  26F3               	addwf	prodl,f,c
  4476  00054C  0E00               	movlw	0
  4477  00054E  22F4               	addwfc	prodh,f,c
  4478  000550  0E57               	movlw	low _poligono_ext
  4479  000552  24F3               	addwf	prodl,w,c
  4480  000554  6ED9               	movwf	fsr2l,c
  4481  000556  0E04               	movlw	high _poligono_ext
  4482  000558  20F4               	addwfc	prodh,w,c
  4483  00055A  6EDA               	movwf	fsr2h,c
  4484  00055C  C06F  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  4485  000560  C070  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  4486  000564  C071  FFDE         	movff	??_verifica_fence_externo+4,postinc2
  4487  000568  C072  FFDE         	movff	??_verifica_fence_externo+5,postinc2
  4488                           
  4489                           ;main.c: 355: poligono_ext[point].diff_long = (atoi(poligono_ext[point].fence_long_min))
      +                           - (atoi(poligono_ext[point].point_long_min));
  4490  00056C  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4491  00056E  0D4C               	mullw	76
  4492  000570  0E32               	movlw	50
  4493  000572  26F3               	addwf	prodl,f,c
  4494  000574  0E00               	movlw	0
  4495  000576  22F4               	addwfc	prodh,f,c
  4496  000578  0E57               	movlw	low _poligono_ext
  4497  00057A  24F3               	addwf	prodl,w,c
  4498  00057C  6F66               	movwf	atoi@s& (0+255),b
  4499  00057E  0E04               	movlw	high _poligono_ext
  4500  000580  20F4               	addwfc	prodh,w,c
  4501  000582  6F67               	movwf	(atoi@s+1)& (0+255),b
  4502  000584  EC34  F01E         	call	_atoi	;wreg free
  4503  000588  C066  F06D         	movff	?_atoi,??_verifica_fence_externo
  4504  00058C  C067  F06E         	movff	?_atoi+1,??_verifica_fence_externo+1
  4505  000590  0100               	movlb	0	; () banked
  4506  000592  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4507  000594  0D4C               	mullw	76
  4508  000596  0E3E               	movlw	62
  4509  000598  26F3               	addwf	prodl,f,c
  4510  00059A  0E00               	movlw	0
  4511  00059C  22F4               	addwfc	prodh,f,c
  4512  00059E  0E57               	movlw	low _poligono_ext
  4513  0005A0  24F3               	addwf	prodl,w,c
  4514  0005A2  6F66               	movwf	atoi@s& (0+255),b
  4515  0005A4  0E04               	movlw	high _poligono_ext
  4516  0005A6  20F4               	addwfc	prodh,w,c
  4517  0005A8  6F67               	movwf	(atoi@s+1)& (0+255),b
  4518  0005AA  EC34  F01E         	call	_atoi	;wreg free
  4519  0005AE  0100               	movlb	0	; () banked
  4520  0005B0  1F66               	comf	?_atoi& (0+255),f,b
  4521  0005B2  1F67               	comf	(?_atoi+1)& (0+255),f,b
  4522  0005B4  4B66               	infsnz	?_atoi& (0+255),f,b
  4523  0005B6  2B67               	incf	(?_atoi+1)& (0+255),f,b
  4524  0005B8  5166               	movf	?_atoi& (0+255),w,b
  4525  0005BA  256D               	addwf	??_verifica_fence_externo& (0+255),w,b
  4526  0005BC  6F6F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4527  0005BE  5167               	movf	(?_atoi+1)& (0+255),w,b
  4528  0005C0  216E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4529  0005C2  6F70               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4530  0005C4  6B71               	clrf	(??_verifica_fence_externo+4)& (0+255),b
  4531  0005C6  BF70               	btfsc	(??_verifica_fence_externo+3)& (0+255),7,b
  4532  0005C8  0771               	decf	(??_verifica_fence_externo+4)& (0+255),f,b
  4533  0005CA  5171               	movf	(??_verifica_fence_externo+4)& (0+255),w,b
  4534  0005CC  6F72               	movwf	(??_verifica_fence_externo+5)& (0+255),b
  4535  0005CE  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4536  0005D0  0D4C               	mullw	76
  4537  0005D2  0E48               	movlw	72
  4538  0005D4  26F3               	addwf	prodl,f,c
  4539  0005D6  0E00               	movlw	0
  4540  0005D8  22F4               	addwfc	prodh,f,c
  4541  0005DA  0E57               	movlw	low _poligono_ext
  4542  0005DC  24F3               	addwf	prodl,w,c
  4543  0005DE  6ED9               	movwf	fsr2l,c
  4544  0005E0  0E04               	movlw	high _poligono_ext
  4545  0005E2  20F4               	addwfc	prodh,w,c
  4546  0005E4  6EDA               	movwf	fsr2h,c
  4547  0005E6  C06F  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  4548  0005EA  C070  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  4549  0005EE  C071  FFDE         	movff	??_verifica_fence_externo+4,postinc2
  4550  0005F2  C072  FFDE         	movff	??_verifica_fence_externo+5,postinc2
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;main.c: 356: point++;
  4554  0005F6  2B8F               	incf	verifica_fence_externo@point& (0+255),f,b
  4555  0005F8                     l134:
  4556                           
  4557                           ; BSR set to: 0
  4558                           
  4559                           ; BSR set to: 0
  4560  0005F8  0E03               	movlw	3
  4561  0005FA  658F               	cpfsgt	verifica_fence_externo@point& (0+255),b
  4562  0005FC  D640               	goto	l135
  4563  0005FE  D002               	goto	l147
  4564  000600                     l153:
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;main.c: 386: else
  4568                           ;main.c: 387: {
  4569                           ;main.c: 388: flag[0].point = 0;
  4570  000600  91F8               	bcf	_flag& (0+255),0,b
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;main.c: 392: }
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;main.c: 389: }
  4577                           ;main.c: 390: break;
  4578  000602  D011               	goto	l155
  4579  000604                     l147:
  4580                           
  4581                           ; BSR set to: 0
  4582                           
  4583                           ; BSR set to: 0
  4584  000604  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4585  000606  0D4C               	mullw	76
  4586  000608  0E0B               	movlw	11
  4587  00060A  26F3               	addwf	prodl,f,c
  4588  00060C  0E00               	movlw	0
  4589  00060E  22F4               	addwfc	prodh,f,c
  4590  000610  0E57               	movlw	low _poligono_ext
  4591  000612  24F3               	addwf	prodl,w,c
  4592  000614  6ED9               	movwf	fsr2l,c
  4593  000616  0E04               	movlw	high _poligono_ext
  4594  000618  20F4               	addwfc	prodh,w,c
  4595  00061A  6EDA               	movwf	fsr2h,c
  4596  00061C  50DF               	movf	indf2,w,c
  4597                           
  4598                           ; Switch size 1, requested type "space"
  4599                           ; Number of cases is 1, Range of values is 45 to 45
  4600                           ; switch strategies available:
  4601                           ; Name         Instructions Cycles
  4602                           ; simple_byte            4     3 (average)
  4603                           ;	Chosen strategy is simple_byte
  4604  00061E  0A2D               	xorlw	45	; case 45
  4605  000620  D7EF               	goto	l153
  4606  000622                     l161:
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;main.c: 421: else
  4610                           ;main.c: 422: {
  4611                           ;main.c: 423: flag[1].point = 0;
  4612  000622  91F9               	bcf	(_flag+1)& (0+255),0,b
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;main.c: 427: }
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;main.c: 424: }
  4619                           ;main.c: 425: break;
  4620  000624  D00B               	goto	l159
  4621  000626                     l155:
  4622                           
  4623                           ; BSR set to: 0
  4624                           
  4625                           ; BSR set to: 0
  4626  000626  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4627  000628  0D4C               	mullw	76
  4628  00062A  0E57               	movlw	low _poligono_ext
  4629  00062C  24F3               	addwf	prodl,w,c
  4630  00062E  6ED9               	movwf	fsr2l,c
  4631  000630  0E04               	movlw	high _poligono_ext
  4632  000632  20F4               	addwfc	prodh,w,c
  4633  000634  6EDA               	movwf	fsr2h,c
  4634  000636  50DF               	movf	indf2,w,c
  4635                           
  4636                           ; Switch size 1, requested type "space"
  4637                           ; Number of cases is 1, Range of values is 45 to 45
  4638                           ; switch strategies available:
  4639                           ; Name         Instructions Cycles
  4640                           ; simple_byte            4     3 (average)
  4641                           ;	Chosen strategy is simple_byte
  4642  000638  0A2D               	xorlw	45	; case 45
  4643  00063A  D7F3               	goto	l161
  4644  00063C                     l159:
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;main.c: 430: if((flag[0].point && flag[1].point) || flag[2].point)
  4648  00063C  A1F8               	btfss	_flag& (0+255),0,b
  4649  00063E  D002               	goto	u14570
  4650                           
  4651                           ; BSR set to: 0
  4652  000640  B1F9               	btfsc	(_flag+1)& (0+255),0,b
  4653  000642  D002               	goto	u14580
  4654  000644                     u14570:
  4655                           
  4656                           ; BSR set to: 0
  4657  000644  A1FA               	btfss	(_flag+2)& (0+255),0,b
  4658  000646  0012               	return	
  4659  000648                     u14580:
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;main.c: 431: {
  4663                           ;main.c: 432: posicao_cursor_lcd(1,0);
  4664                           
  4665                           ; BSR set to: 0
  4666  000648  0E00               	movlw	0
  4667  00064A  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4668  00064C  0E01               	movlw	1
  4669  00064E  EC2D  F023         	call	_posicao_cursor_lcd
  4670                           
  4671                           ;main.c: 433: escreve_frase_ram_lcd("REGIAO NEGADA");
  4672  000652  0ED8               	movlw	low STR_9
  4673  000654  0100               	movlb	0	; () banked
  4674  000656  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  4675  000658  0E61               	movlw	high STR_9
  4676  00065A  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4677  00065C  ECF7  F024         	call	_escreve_frase_ram_lcd	;wreg free
  4678  000660  0012               	return	
  4679  000662                     __end_of_verifica_fence_externo:
  4680                           	opt stack 0
  4681                           tosu	equ	0xFFF
  4682                           tosh	equ	0xFFE
  4683                           tosl	equ	0xFFD
  4684                           pclath	equ	0xFFA
  4685                           tblptru	equ	0xFF8
  4686                           tblptrh	equ	0xFF7
  4687                           tblptrl	equ	0xFF6
  4688                           tablat	equ	0xFF5
  4689                           prodh	equ	0xFF4
  4690                           prodl	equ	0xFF3
  4691                           intcon	equ	0xFF2
  4692                           intcon2	equ	0xFF1
  4693                           intcon3	equ	0xFF0
  4694                           postinc0	equ	0xFEE
  4695                           wreg	equ	0xFE8
  4696                           indf1	equ	0xFE7
  4697                           postinc1	equ	0xFE6
  4698                           postdec1	equ	0xFE5
  4699                           plusw1	equ	0xFE3
  4700                           fsr1h	equ	0xFE2
  4701                           fsr1l	equ	0xFE1
  4702                           indf2	equ	0xFDF
  4703                           postinc2	equ	0xFDE
  4704                           postdec2	equ	0xFDD
  4705                           plusw2	equ	0xFDB
  4706                           fsr2h	equ	0xFDA
  4707                           fsr2l	equ	0xFD9
  4708                           status	equ	0xFD8
  4709                           
  4710 ;; *************** function _atoi *****************
  4711 ;; Defined at:
  4712 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  4715 ;;		 -> poligono_ext.point_long_min(6), poligono_ext.fence_long_min(6), poligono_ext.point_lat_min(6), poligono_ext.fenc
      +e_lat_min(6), 
  4716 ;;		 -> poligono_ext(304), 
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;  a               2   11[BANK0 ] int 
  4719 ;;  sign            1   10[BANK0 ] unsigned char 
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  2    6[BANK0 ] int 
  4722 ;; Registers used:
  4723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4729 ;;      Params:         0       2       0       0       0       0       0       0       0
  4730 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4731 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4732 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4733 ;;Total ram usage:        7 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; Hardware stack levels required when called:    4
  4736 ;; This function calls:
  4737 ;;		___wmul
  4738 ;;		_isdigit
  4739 ;; This function is called by:
  4740 ;;		_verifica_fence_externo
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text16
  4745  003C68                     __ptext16:
  4746                           	opt stack 0
  4747  003C68                     _atoi:
  4748                           	opt stack 24
  4749                           
  4750                           ;incstack = 0
  4751  003C68  D003               	goto	l1579
  4752  003C6A  0100               	movlb	0	; () banked
  4753  003C6C  4B66               	infsnz	atoi@s& (0+255),f,b
  4754  003C6E  2B67               	incf	(atoi@s+1)& (0+255),f,b
  4755  003C70                     l1579:
  4756                           
  4757                           ; BSR set to: 0
  4758  003C70  C066  FFD9         	movff	atoi@s,fsr2l
  4759  003C74  C067  FFDA         	movff	atoi@s+1,fsr2h
  4760  003C78  0E20               	movlw	32
  4761  003C7A  18DE               	xorwf	postinc2,w,c
  4762  003C7C  B4D8               	btfsc	status,2,c
  4763  003C7E  D7F5               	goto	l1580
  4764  003C80  C066  FFD9         	movff	atoi@s,fsr2l
  4765  003C84  C067  FFDA         	movff	atoi@s+1,fsr2h
  4766  003C88  0E09               	movlw	9
  4767  003C8A  18DE               	xorwf	postinc2,w,c
  4768  003C8C  B4D8               	btfsc	status,2,c
  4769  003C8E  D7ED               	goto	l1580
  4770  003C90  0E00               	movlw	0
  4771  003C92  0100               	movlb	0	; () banked
  4772  003C94  6F6C               	movwf	(atoi@a+1)& (0+255),b
  4773  003C96  0E00               	movlw	0
  4774  003C98  6F6B               	movwf	atoi@a& (0+255),b
  4775  003C9A  0E00               	movlw	0
  4776  003C9C  6F6A               	movwf	atoi@sign& (0+255),b
  4777                           
  4778                           ; BSR set to: 0
  4779  003C9E  C066  FFD9         	movff	atoi@s,fsr2l
  4780  003CA2  C067  FFDA         	movff	atoi@s+1,fsr2h
  4781  003CA6  0E2D               	movlw	45
  4782  003CA8  18DE               	xorwf	postinc2,w,c
  4783  003CAA  A4D8               	btfss	status,2,c
  4784  003CAC  D002               	goto	l1582
  4785                           
  4786                           ; BSR set to: 0
  4787  003CAE  2B6A               	incf	atoi@sign& (0+255),f,b
  4788  003CB0  D026               	goto	l10972
  4789  003CB2                     l1582:
  4790                           
  4791                           ; BSR set to: 0
  4792                           
  4793                           ; BSR set to: 0
  4794  003CB2  C066  FFD9         	movff	atoi@s,fsr2l
  4795  003CB6  C067  FFDA         	movff	atoi@s+1,fsr2h
  4796  003CBA  0E2B               	movlw	43
  4797  003CBC  18DE               	xorwf	postinc2,w,c
  4798  003CBE  A4D8               	btfss	status,2,c
  4799  003CC0  D020               	goto	l1585
  4800  003CC2  D01D               	goto	l10972
  4801  003CC4                     
  4802                           ; BSR set to: 0
  4803  003CC4  C06B  F060         	movff	atoi@a,___wmul@multiplier
  4804  003CC8  C06C  F061         	movff	atoi@a+1,___wmul@multiplier+1
  4805  003CCC  0E00               	movlw	0
  4806  003CCE  0100               	movlb	0	; () banked
  4807  003CD0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4808  003CD2  0E0A               	movlw	10
  4809  003CD4  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4810  003CD6  EC4E  F027         	call	___wmul	;wreg free
  4811  003CDA  C066  FFD9         	movff	atoi@s,fsr2l
  4812  003CDE  C067  FFDA         	movff	atoi@s+1,fsr2h
  4813  003CE2  50DF               	movf	indf2,w,c
  4814  003CE4  0100               	movlb	0	; () banked
  4815  003CE6  6F68               	movwf	??_atoi& (0+255),b
  4816  003CE8  6B69               	clrf	(??_atoi+1)& (0+255),b
  4817  003CEA  5160               	movf	?___wmul& (0+255),w,b
  4818  003CEC  2768               	addwf	??_atoi& (0+255),f,b
  4819  003CEE  5161               	movf	(?___wmul+1)& (0+255),w,b
  4820  003CF0  2369               	addwfc	(??_atoi+1)& (0+255),f,b
  4821  003CF2  0ED0               	movlw	208
  4822  003CF4  2568               	addwf	??_atoi& (0+255),w,b
  4823  003CF6  6F6B               	movwf	atoi@a& (0+255),b
  4824  003CF8  0EFF               	movlw	255
  4825  003CFA  2169               	addwfc	(??_atoi+1)& (0+255),w,b
  4826  003CFC  6F6C               	movwf	(atoi@a+1)& (0+255),b
  4827  003CFE                     l10972:
  4828                           
  4829                           ; BSR set to: 0
  4830  003CFE  4B66               	infsnz	atoi@s& (0+255),f,b
  4831  003D00  2B67               	incf	(atoi@s+1)& (0+255),f,b
  4832  003D02                     l1585:
  4833                           
  4834                           ; BSR set to: 0
  4835                           
  4836                           ; BSR set to: 0
  4837  003D02  C066  FFD9         	movff	atoi@s,fsr2l
  4838  003D06  C067  FFDA         	movff	atoi@s+1,fsr2h
  4839  003D0A  50DF               	movf	indf2,w,c
  4840  003D0C  EC74  F027         	call	_isdigit
  4841  003D10  B0D8               	btfsc	status,0,c
  4842  003D12  D7D8               	goto	l1586
  4843  003D14  0100               	movlb	0	; () banked
  4844  003D16  516A               	movf	atoi@sign& (0+255),w,b
  4845  003D18  B4D8               	btfsc	status,2,c
  4846  003D1A  D00D               	goto	l1588
  4847                           
  4848                           ; BSR set to: 0
  4849  003D1C  C06B  F068         	movff	atoi@a,??_atoi
  4850  003D20  C06C  F069         	movff	atoi@a+1,??_atoi+1
  4851  003D24  1F68               	comf	??_atoi& (0+255),f,b
  4852  003D26  1F69               	comf	(??_atoi+1)& (0+255),f,b
  4853  003D28  4B68               	infsnz	??_atoi& (0+255),f,b
  4854  003D2A  2B69               	incf	(??_atoi+1)& (0+255),f,b
  4855  003D2C  C068  F066         	movff	??_atoi,?_atoi
  4856  003D30  C069  F067         	movff	??_atoi+1,?_atoi+1
  4857  003D34  0012               	return	
  4858  003D36                     l1588:
  4859                           
  4860                           ; BSR set to: 0
  4861  003D36  C06B  F066         	movff	atoi@a,?_atoi
  4862  003D3A  C06C  F067         	movff	atoi@a+1,?_atoi+1
  4863                           
  4864                           ; BSR set to: 0
  4865  003D3E  0012               	return		;funcret
  4866  003D40                     __end_of_atoi:
  4867                           	opt stack 0
  4868                           tosu	equ	0xFFF
  4869                           tosh	equ	0xFFE
  4870                           tosl	equ	0xFFD
  4871                           pclath	equ	0xFFA
  4872                           tblptru	equ	0xFF8
  4873                           tblptrh	equ	0xFF7
  4874                           tblptrl	equ	0xFF6
  4875                           tablat	equ	0xFF5
  4876                           prodh	equ	0xFF4
  4877                           prodl	equ	0xFF3
  4878                           intcon	equ	0xFF2
  4879                           intcon2	equ	0xFF1
  4880                           intcon3	equ	0xFF0
  4881                           postinc0	equ	0xFEE
  4882                           wreg	equ	0xFE8
  4883                           indf1	equ	0xFE7
  4884                           postinc1	equ	0xFE6
  4885                           postdec1	equ	0xFE5
  4886                           plusw1	equ	0xFE3
  4887                           fsr1h	equ	0xFE2
  4888                           fsr1l	equ	0xFE1
  4889                           indf2	equ	0xFDF
  4890                           postinc2	equ	0xFDE
  4891                           postdec2	equ	0xFDD
  4892                           plusw2	equ	0xFDB
  4893                           fsr2h	equ	0xFDA
  4894                           fsr2l	equ	0xFD9
  4895                           status	equ	0xFD8
  4896                           
  4897 ;; *************** function _isdigit *****************
  4898 ;; Defined at:
  4899 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4900 ;; Parameters:    Size  Location     Type
  4901 ;;  c               1    wreg     unsigned char 
  4902 ;; Auto vars:     Size  Location     Type
  4903 ;;  c               1    1[BANK0 ] unsigned char 
  4904 ;; Return value:  Size  Location     Type
  4905 ;;		None               void
  4906 ;; Registers used:
  4907 ;;		wreg, status,2, status,0
  4908 ;; Tracked objects:
  4909 ;;		On entry : 0/0
  4910 ;;		On exit  : 0/0
  4911 ;;		Unchanged: 0/0
  4912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4913 ;;      Params:         0       0       0       0       0       0       0       0       0
  4914 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4915 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4916 ;;      Totals:         1       2       0       0       0       0       0       0       0
  4917 ;;Total ram usage:        3 bytes
  4918 ;; Hardware stack levels used:    1
  4919 ;; Hardware stack levels required when called:    3
  4920 ;; This function calls:
  4921 ;;		Nothing
  4922 ;; This function is called by:
  4923 ;;		_atoi
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text17
  4928  004EE8                     __ptext17:
  4929                           	opt stack 0
  4930  004EE8                     _isdigit:
  4931                           	opt stack 24
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;incstack = 0
  4935                           ;isdigit@c stored from wreg
  4936  004EE8  0100               	movlb	0	; () banked
  4937  004EEA  6F61               	movwf	isdigit@c& (0+255),b
  4938  004EEC  0E00               	movlw	0
  4939  004EEE  0100               	movlb	0	; () banked
  4940  004EF0  6F60               	movwf	_isdigit$2833& (0+255),b
  4941                           
  4942                           ; BSR set to: 0
  4943  004EF2  0E3A               	movlw	58
  4944  004EF4  6161               	cpfslt	isdigit@c& (0+255),b
  4945  004EF6  D005               	goto	l1760
  4946                           
  4947                           ; BSR set to: 0
  4948  004EF8  0E2F               	movlw	47
  4949  004EFA  6561               	cpfsgt	isdigit@c& (0+255),b
  4950  004EFC  D002               	goto	l1760
  4951                           
  4952                           ; BSR set to: 0
  4953  004EFE  0E01               	movlw	1
  4954  004F00  6F60               	movwf	_isdigit$2833& (0+255),b
  4955  004F02                     l1760:
  4956                           
  4957                           ; BSR set to: 0
  4958                           
  4959                           ; BSR set to: 0
  4960  004F02  C060  F021         	movff	_isdigit$2833,??_isdigit
  4961  004F06  3021               	rrcf	??_isdigit,w,c
  4962  004F08  0012               	return	
  4963  004F0A                     __end_of_isdigit:
  4964                           	opt stack 0
  4965                           tosu	equ	0xFFF
  4966                           tosh	equ	0xFFE
  4967                           tosl	equ	0xFFD
  4968                           pclath	equ	0xFFA
  4969                           tblptru	equ	0xFF8
  4970                           tblptrh	equ	0xFF7
  4971                           tblptrl	equ	0xFF6
  4972                           tablat	equ	0xFF5
  4973                           prodh	equ	0xFF4
  4974                           prodl	equ	0xFF3
  4975                           intcon	equ	0xFF2
  4976                           intcon2	equ	0xFF1
  4977                           intcon3	equ	0xFF0
  4978                           postinc0	equ	0xFEE
  4979                           wreg	equ	0xFE8
  4980                           indf1	equ	0xFE7
  4981                           postinc1	equ	0xFE6
  4982                           postdec1	equ	0xFE5
  4983                           plusw1	equ	0xFE3
  4984                           fsr1h	equ	0xFE2
  4985                           fsr1l	equ	0xFE1
  4986                           indf2	equ	0xFDF
  4987                           postinc2	equ	0xFDE
  4988                           postdec2	equ	0xFDD
  4989                           plusw2	equ	0xFDB
  4990                           fsr2h	equ	0xFDA
  4991                           fsr2l	equ	0xFD9
  4992                           status	equ	0xFD8
  4993                           
  4994 ;; *************** function _Longitude *****************
  4995 ;; Defined at:
  4996 ;;		line 605 in file "bibliotecas/GPS.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;		None
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;		None
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  2    0[BANK0 ] PTR unsigned char 
  5003 ;; Registers used:
  5004 ;;		wreg, status,2, status,0
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5010 ;;      Params:         0       2       0       0       0       0       0       0       0
  5011 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5012 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5013 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5014 ;;Total ram usage:        2 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    3
  5017 ;; This function calls:
  5018 ;;		Nothing
  5019 ;; This function is called by:
  5020 ;;		_verifica_fence_externo
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           	psect	text18
  5025  00501E                     __ptext18:
  5026                           	opt stack 0
  5027  00501E                     _Longitude:
  5028                           	opt stack 25
  5029                           
  5030                           ;GPS.c: 607: return rawLongitude;
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;incstack = 0
  5034  00501E  0E48               	movlw	low _rawLongitude
  5035  005020  0100               	movlb	0	; () banked
  5036  005022  6F60               	movwf	?_Longitude& (0+255),b
  5037  005024  0E01               	movlw	high _rawLongitude
  5038  005026  6F61               	movwf	(?_Longitude+1)& (0+255),b
  5039  005028  0012               	return	
  5040  00502A                     __end_of_Longitude:
  5041                           	opt stack 0
  5042                           tosu	equ	0xFFF
  5043                           tosh	equ	0xFFE
  5044                           tosl	equ	0xFFD
  5045                           pclath	equ	0xFFA
  5046                           tblptru	equ	0xFF8
  5047                           tblptrh	equ	0xFF7
  5048                           tblptrl	equ	0xFF6
  5049                           tablat	equ	0xFF5
  5050                           prodh	equ	0xFF4
  5051                           prodl	equ	0xFF3
  5052                           intcon	equ	0xFF2
  5053                           intcon2	equ	0xFF1
  5054                           intcon3	equ	0xFF0
  5055                           postinc0	equ	0xFEE
  5056                           wreg	equ	0xFE8
  5057                           indf1	equ	0xFE7
  5058                           postinc1	equ	0xFE6
  5059                           postdec1	equ	0xFE5
  5060                           plusw1	equ	0xFE3
  5061                           fsr1h	equ	0xFE2
  5062                           fsr1l	equ	0xFE1
  5063                           indf2	equ	0xFDF
  5064                           postinc2	equ	0xFDE
  5065                           postdec2	equ	0xFDD
  5066                           plusw2	equ	0xFDB
  5067                           fsr2h	equ	0xFDA
  5068                           fsr2l	equ	0xFD9
  5069                           status	equ	0xFD8
  5070                           
  5071 ;; *************** function _Latitude *****************
  5072 ;; Defined at:
  5073 ;;		line 600 in file "bibliotecas/GPS.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;		None
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  2    0[BANK0 ] PTR unsigned char 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2, status,0
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5087 ;;      Params:         0       2       0       0       0       0       0       0       0
  5088 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5089 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5090 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5091 ;;Total ram usage:        2 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    3
  5094 ;; This function calls:
  5095 ;;		Nothing
  5096 ;; This function is called by:
  5097 ;;		_verifica_fence_externo
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text19
  5102  00502A                     __ptext19:
  5103                           	opt stack 0
  5104  00502A                     _Latitude:
  5105                           	opt stack 25
  5106                           
  5107                           ;GPS.c: 602: return rawLatitude;
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;incstack = 0
  5111  00502A  0E55               	movlw	low _rawLatitude
  5112  00502C  0100               	movlb	0	; () banked
  5113  00502E  6F60               	movwf	?_Latitude& (0+255),b
  5114  005030  0E01               	movlw	high _rawLatitude
  5115  005032  6F61               	movwf	(?_Latitude+1)& (0+255),b
  5116  005034  0012               	return	
  5117  005036                     __end_of_Latitude:
  5118                           	opt stack 0
  5119                           tosu	equ	0xFFF
  5120                           tosh	equ	0xFFE
  5121                           tosl	equ	0xFFD
  5122                           pclath	equ	0xFFA
  5123                           tblptru	equ	0xFF8
  5124                           tblptrh	equ	0xFF7
  5125                           tblptrl	equ	0xFF6
  5126                           tablat	equ	0xFF5
  5127                           prodh	equ	0xFF4
  5128                           prodl	equ	0xFF3
  5129                           intcon	equ	0xFF2
  5130                           intcon2	equ	0xFF1
  5131                           intcon3	equ	0xFF0
  5132                           postinc0	equ	0xFEE
  5133                           wreg	equ	0xFE8
  5134                           indf1	equ	0xFE7
  5135                           postinc1	equ	0xFE6
  5136                           postdec1	equ	0xFE5
  5137                           plusw1	equ	0xFE3
  5138                           fsr1h	equ	0xFE2
  5139                           fsr1l	equ	0xFE1
  5140                           indf2	equ	0xFDF
  5141                           postinc2	equ	0xFDE
  5142                           postdec2	equ	0xFDD
  5143                           plusw2	equ	0xFDB
  5144                           fsr2h	equ	0xFDA
  5145                           fsr2l	equ	0xFD9
  5146                           status	equ	0xFD8
  5147                           
  5148 ;; *************** function _escrita_sdcard *****************
  5149 ;; Defined at:
  5150 ;;		line 206 in file "bibliotecas/SDCard.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;		None
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;  bw              2    0        unsigned short 
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  1    wreg      void 
  5157 ;; Registers used:
  5158 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5164 ;;      Params:         0       0       0       0       0       0       0       0       0
  5165 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5167 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5168 ;;Total ram usage:        0 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:   15
  5171 ;; This function calls:
  5172 ;;		_desliga_SPI
  5173 ;;		_desliga_uart
  5174 ;;		_f_close
  5175 ;;		_f_lseek
  5176 ;;		_f_mount
  5177 ;;		_f_open
  5178 ;;		_fprintf
  5179 ;;		_inicializa_SPI
  5180 ;;		_inicializa_uart
  5181 ;; This function is called by:
  5182 ;;		_disparo_gravacao
  5183 ;; This function uses a non-reentrant model
  5184 ;;
  5185                           
  5186                           	psect	text20
  5187  003EC4                     __ptext20:
  5188                           	opt stack 0
  5189  003EC4                     _escrita_sdcard:
  5190                           	opt stack 13
  5191                           
  5192                           ;SDCard.c: 208: WORD bw;
  5193                           ;SDCard.c: 209: PORTBbits.RB3 = 0;
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;incstack = 0
  5197  003EC4  9681               	bcf	3969,3,c	;volatile
  5198                           
  5199                           ;SDCard.c: 210: desliga_uart();
  5200  003EC6  EC08  F028         	call	_desliga_uart	;wreg free
  5201                           
  5202                           ;SDCard.c: 211: inicializa_SPI();
  5203  003ECA  EC85  F027         	call	_inicializa_SPI	;wreg free
  5204                           
  5205                           ;SDCard.c: 212: f_mount(0,&fs);
  5206  003ECE  0E37               	movlw	low _fs
  5207  003ED0  0100               	movlb	0	; () banked
  5208  003ED2  6F60               	movwf	f_mount@fs& (0+255),b
  5209  003ED4  0E02               	movlw	high _fs
  5210  003ED6  6F61               	movwf	(f_mount@fs+1)& (0+255),b
  5211  003ED8  0E00               	movlw	0
  5212  003EDA  EC96  F025         	call	_f_mount
  5213                           
  5214                           ;SDCard.c: 216: if (f_open(&fil, filename, 0x10 | 0x02 ) == FR_OK)
  5215  003EDE  0E2C               	movlw	low _fil
  5216  003EE0  0100               	movlb	0	; () banked
  5217  003EE2  6FD7               	movwf	f_open@fp& (0+255),b
  5218  003EE4  0E01               	movlw	high _fil
  5219  003EE6  6FD8               	movwf	(f_open@fp+1)& (0+255),b
  5220  003EE8  0EBD               	movlw	low _filename
  5221  003EEA  6FD9               	movwf	f_open@path& (0+255),b
  5222  003EEC  0E01               	movlw	high _filename
  5223  003EEE  6FDA               	movwf	(f_open@path+1)& (0+255),b
  5224  003EF0  0E12               	movlw	18
  5225  003EF2  6FDB               	movwf	f_open@mode& (0+255),b
  5226  003EF4  ECDB  F00C         	call	_f_open	;wreg free
  5227  003EF8  0900               	iorlw	0
  5228  003EFA  A4D8               	btfss	status,2,c
  5229  003EFC  D031               	goto	l339
  5230                           
  5231                           ;SDCard.c: 217: {
  5232                           ;SDCard.c: 219: f_lseek(&fil, ((&fil)->fsize));
  5233  003EFE  0E2C               	movlw	low _fil
  5234  003F00  0100               	movlb	0	; () banked
  5235  003F02  6FC4               	movwf	f_lseek@fp& (0+255),b
  5236  003F04  0E01               	movlw	high _fil
  5237  003F06  6FC5               	movwf	(f_lseek@fp+1)& (0+255),b
  5238  003F08  C136  F0C6         	movff	_fil+10,f_lseek@ofs
  5239  003F0C  C137  F0C7         	movff	_fil+11,f_lseek@ofs+1
  5240  003F10  C138  F0C8         	movff	_fil+12,f_lseek@ofs+2
  5241  003F14  C139  F0C9         	movff	_fil+13,f_lseek@ofs+3
  5242  003F18  ECA7  F008         	call	_f_lseek	;wreg free
  5243                           
  5244                           ;SDCard.c: 224: fprintf(&fil, "\n%s ; %s ; %s ; %s ;", string_dado.hora, string_dado.dat
      +                          a,string_dado.LAT, string_dado.LONG);
  5245  003F1C  0E2C               	movlw	low _fil
  5246  003F1E  0101               	movlb	1	; () banked
  5247  003F20  6FD3               	movwf	fprintf@fil& (0+255),b
  5248  003F22  0E01               	movlw	high _fil
  5249  003F24  6FD4               	movwf	(fprintf@fil+1)& (0+255),b
  5250  003F26  0E81               	movlw	low STR_18
  5251  003F28  6FD5               	movwf	fprintf@str& (0+255),b
  5252  003F2A  0E61               	movlw	high STR_18
  5253  003F2C  6FD6               	movwf	(fprintf@str+1)& (0+255),b
  5254  003F2E  0E07               	movlw	low (_string_dado+7)
  5255  003F30  6FD7               	movwf	(?_fprintf+4)& (0+255),b
  5256  003F32  0E01               	movlw	high (_string_dado+7)
  5257  003F34  6FD8               	movwf	(?_fprintf+5)& (0+255),b
  5258  003F36  0E00               	movlw	low _string_dado
  5259  003F38  6FD9               	movwf	(?_fprintf+6)& (0+255),b
  5260  003F3A  0E01               	movlw	high _string_dado
  5261  003F3C  6FDA               	movwf	(?_fprintf+7)& (0+255),b
  5262  003F3E  0E12               	movlw	low (_string_dado+18)
  5263  003F40  6FDB               	movwf	(?_fprintf+8)& (0+255),b
  5264  003F42  0E01               	movlw	high (_string_dado+18)
  5265  003F44  6FDC               	movwf	(?_fprintf+9)& (0+255),b
  5266  003F46  0E1F               	movlw	low (_string_dado+31)
  5267  003F48  6FDD               	movwf	(?_fprintf+10)& (0+255),b
  5268  003F4A  0E01               	movlw	high (_string_dado+31)
  5269  003F4C  6FDE               	movwf	(?_fprintf+11)& (0+255),b
  5270  003F4E  ECEC  F00A         	call	_fprintf	;wreg free
  5271                           
  5272                           ;SDCard.c: 227: f_close(&fil);
  5273  003F52  0E2C               	movlw	low _fil
  5274  003F54  0100               	movlb	0	; () banked
  5275  003F56  6FAB               	movwf	f_close@fp& (0+255),b
  5276  003F58  0E01               	movlw	high _fil
  5277  003F5A  6FAC               	movwf	(f_close@fp+1)& (0+255),b
  5278  003F5C  EC0D  F027         	call	_f_close	;wreg free
  5279  003F60                     l339:
  5280                           
  5281                           ;SDCard.c: 228: }
  5282                           ;SDCard.c: 230: PORTBbits.RB3 = 1;
  5283  003F60  8681               	bsf	3969,3,c	;volatile
  5284                           
  5285                           ;SDCard.c: 231: desliga_SPI();
  5286  003F62  EC2D  F028         	call	_desliga_SPI	;wreg free
  5287                           
  5288                           ;SDCard.c: 232: inicializa_uart();
  5289  003F66  EC62  F027         	call	_inicializa_uart	;wreg free
  5290  003F6A  0012               	return	
  5291  003F6C                     __end_of_escrita_sdcard:
  5292                           	opt stack 0
  5293                           tosu	equ	0xFFF
  5294                           tosh	equ	0xFFE
  5295                           tosl	equ	0xFFD
  5296                           pclath	equ	0xFFA
  5297                           tblptru	equ	0xFF8
  5298                           tblptrh	equ	0xFF7
  5299                           tblptrl	equ	0xFF6
  5300                           tablat	equ	0xFF5
  5301                           prodh	equ	0xFF4
  5302                           prodl	equ	0xFF3
  5303                           intcon	equ	0xFF2
  5304                           intcon2	equ	0xFF1
  5305                           intcon3	equ	0xFF0
  5306                           postinc0	equ	0xFEE
  5307                           wreg	equ	0xFE8
  5308                           indf1	equ	0xFE7
  5309                           postinc1	equ	0xFE6
  5310                           postdec1	equ	0xFE5
  5311                           plusw1	equ	0xFE3
  5312                           fsr1h	equ	0xFE2
  5313                           fsr1l	equ	0xFE1
  5314                           indf2	equ	0xFDF
  5315                           postinc2	equ	0xFDE
  5316                           postdec2	equ	0xFDD
  5317                           plusw2	equ	0xFDB
  5318                           fsr2h	equ	0xFDA
  5319                           fsr2l	equ	0xFD9
  5320                           status	equ	0xFD8
  5321                           
  5322 ;; *************** function _inicializa_uart *****************
  5323 ;; Defined at:
  5324 ;;		line 206 in file "bibliotecas/uart.c"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;		None
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;		None
  5329 ;; Return value:  Size  Location     Type
  5330 ;;                  1    wreg      void 
  5331 ;; Registers used:
  5332 ;;		wreg, status,2, status,0, cstack
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5338 ;;      Params:         0       0       0       0       0       0       0       0       0
  5339 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5341 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5342 ;;Total ram usage:        0 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; Hardware stack levels required when called:    5
  5345 ;; This function calls:
  5346 ;;		_configura_baudrate_uart
  5347 ;; This function is called by:
  5348 ;;		_main
  5349 ;;		_escrita_sdcard
  5350 ;;		_leitura_sdcard
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           	psect	text21
  5355  004EC4                     __ptext21:
  5356                           	opt stack 0
  5357  004EC4                     _inicializa_uart:
  5358                           	opt stack 25
  5359                           
  5360                           ;uart.c: 208: TRISCbits.RC6 = 0;
  5361                           
  5362                           ;incstack = 0
  5363  004EC4  9C94               	bcf	3988,6,c	;volatile
  5364                           
  5365                           ;uart.c: 209: TRISCbits.RC7 = 0;
  5366  004EC6  9E94               	bcf	3988,7,c	;volatile
  5367                           
  5368                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  5369  004EC8  0E80               	movlw	128
  5370  004ECA  0100               	movlb	0	; () banked
  5371  004ECC  6F6E               	movwf	configura_baudrate_uart@baudrate& (0+255),b
  5372  004ECE  0E25               	movlw	37
  5373  004ED0  6F6F               	movwf	(configura_baudrate_uart@baudrate+1)& (0+255),b
  5374  004ED2  0E00               	movlw	0
  5375  004ED4  6F70               	movwf	(configura_baudrate_uart@baudrate+2)& (0+255),b
  5376  004ED6  0E00               	movlw	0
  5377  004ED8  6F71               	movwf	(configura_baudrate_uart@baudrate+3)& (0+255),b
  5378  004EDA  ECE9  F01B         	call	_configura_baudrate_uart	;wreg free
  5379                           
  5380                           ;uart.c: 213: TXSTA = 0x20;
  5381  004EDE  0E20               	movlw	32
  5382  004EE0  6EAC               	movwf	4012,c	;volatile
  5383                           
  5384                           ;uart.c: 214: RCSTA = 0x90;
  5385  004EE2  0E90               	movlw	144
  5386  004EE4  6EAB               	movwf	4011,c	;volatile
  5387  004EE6  0012               	return		;funcret
  5388  004EE8                     __end_of_inicializa_uart:
  5389                           	opt stack 0
  5390                           tosu	equ	0xFFF
  5391                           tosh	equ	0xFFE
  5392                           tosl	equ	0xFFD
  5393                           pclath	equ	0xFFA
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           prodh	equ	0xFF4
  5399                           prodl	equ	0xFF3
  5400                           intcon	equ	0xFF2
  5401                           intcon2	equ	0xFF1
  5402                           intcon3	equ	0xFF0
  5403                           postinc0	equ	0xFEE
  5404                           wreg	equ	0xFE8
  5405                           indf1	equ	0xFE7
  5406                           postinc1	equ	0xFE6
  5407                           postdec1	equ	0xFE5
  5408                           plusw1	equ	0xFE3
  5409                           fsr1h	equ	0xFE2
  5410                           fsr1l	equ	0xFE1
  5411                           indf2	equ	0xFDF
  5412                           postinc2	equ	0xFDE
  5413                           postdec2	equ	0xFDD
  5414                           plusw2	equ	0xFDB
  5415                           fsr2h	equ	0xFDA
  5416                           fsr2l	equ	0xFD9
  5417                           status	equ	0xFD8
  5418                           
  5419 ;; *************** function _configura_baudrate_uart *****************
  5420 ;; Defined at:
  5421 ;;		line 50 in file "bibliotecas/uart.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;  baudrate        4   14[BANK0 ] const long 
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  x               2   26[BANK0 ] unsigned int 
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  1    wreg      unsigned char 
  5428 ;; Registers used:
  5429 ;;		wreg, status,2, status,0, cstack
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5435 ;;      Params:         0       4       0       0       0       0       0       0       0
  5436 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5437 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5438 ;;      Totals:         0      14       0       0       0       0       0       0       0
  5439 ;;Total ram usage:       14 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; Hardware stack levels required when called:    4
  5442 ;; This function calls:
  5443 ;;		___aldiv
  5444 ;; This function is called by:
  5445 ;;		_inicializa_uart
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           	psect	text22
  5450  0037D2                     __ptext22:
  5451                           	opt stack 0
  5452  0037D2                     _configura_baudrate_uart:
  5453                           	opt stack 25
  5454                           
  5455                           ;uart.c: 52: unsigned int x;
  5456                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  5457                           
  5458                           ;incstack = 0
  5459  0037D2  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  5460  0037D6  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  5461  0037DA  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  5462  0037DE  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  5463  0037E2  0E06               	movlw	6
  5464  0037E4                     u12735:
  5465  0037E4  90D8               	bcf	status,0,c
  5466  0037E6  0100               	movlb	0	; () banked
  5467  0037E8  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  5468  0037EA  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5469  0037EC  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5470  0037EE  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5471  0037F0  2EE8               	decfsz	wreg,f,c
  5472  0037F2  D7F8               	goto	u12735
  5473  0037F4  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  5474  0037F6  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5475  0037F8  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5476  0037FA  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5477  0037FC  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  5478  0037FE  0E00               	movlw	0
  5479  003800  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  5480  003802  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  5481  003804  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  5482  003806  0E00               	movlw	0
  5483  003808  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  5484  00380A  6F60               	movwf	___aldiv@dividend& (0+255),b
  5485  00380C  0E6C               	movlw	108
  5486  00380E  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  5487  003810  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  5488  003812  0EDC               	movlw	220
  5489  003814  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  5490  003816  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  5491  003818  0E02               	movlw	2
  5492  00381A  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  5493  00381C  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  5494  00381E  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  5495  003822  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  5496  003826  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  5497  00382A  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  5498  00382E  0E06               	movlw	6
  5499  003830                     u12745:
  5500  003830  90D8               	bcf	status,0,c
  5501  003832  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  5502  003834  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  5503  003836  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  5504  003838  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  5505  00383A  2EE8               	decfsz	wreg,f,c
  5506  00383C  D7F9               	goto	u12745
  5507  00383E  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  5508  003842  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  5509  003846  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  5510  00384A  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  5511  00384E  ECA0  F01E         	call	___aldiv	;wreg free
  5512  003852  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  5513  003856  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  5514                           
  5515                           ;uart.c: 55: if(x > 255)
  5516  00385A  0100               	movlb	0	; () banked
  5517  00385C  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  5518  00385E  A0D8               	btfss	status,0,c
  5519  003860  D044               	goto	l852
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;uart.c: 56: {
  5523                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  5524  003862  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  5525  003866  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  5526  00386A  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  5527  00386E  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  5528  003872  0E04               	movlw	4
  5529  003874                     u12765:
  5530  003874  90D8               	bcf	status,0,c
  5531  003876  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  5532  003878  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5533  00387A  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5534  00387C  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5535  00387E  2EE8               	decfsz	wreg,f,c
  5536  003880  D7F9               	goto	u12765
  5537  003882  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  5538  003884  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5539  003886  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5540  003888  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5541  00388A  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  5542  00388C  0E00               	movlw	0
  5543  00388E  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  5544  003890  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  5545  003892  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  5546  003894  0E00               	movlw	0
  5547  003896  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  5548  003898  6F60               	movwf	___aldiv@dividend& (0+255),b
  5549  00389A  0E6C               	movlw	108
  5550  00389C  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  5551  00389E  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  5552  0038A0  0EDC               	movlw	220
  5553  0038A2  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  5554  0038A4  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  5555  0038A6  0E02               	movlw	2
  5556  0038A8  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  5557  0038AA  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  5558  0038AC  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  5559  0038B0  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  5560  0038B4  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  5561  0038B8  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  5562  0038BC  0E04               	movlw	4
  5563  0038BE                     u12775:
  5564  0038BE  90D8               	bcf	status,0,c
  5565  0038C0  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  5566  0038C2  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  5567  0038C4  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  5568  0038C6  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  5569  0038C8  2EE8               	decfsz	wreg,f,c
  5570  0038CA  D7F9               	goto	u12775
  5571  0038CC  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  5572  0038D0  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  5573  0038D4  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  5574  0038D8  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  5575  0038DC  ECA0  F01E         	call	___aldiv	;wreg free
  5576  0038E0  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  5577  0038E4  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  5578                           
  5579                           ;uart.c: 58: BRGH = 1;
  5580  0038E8  84AC               	bsf	4012,2,c	;volatile
  5581  0038EA                     l852:
  5582                           
  5583                           ;uart.c: 59: }
  5584                           ;uart.c: 60: if(x < 256)
  5585  0038EA  0100               	movlb	0	; () banked
  5586  0038EC  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  5587  0038EE  B0D8               	btfsc	status,0,c
  5588  0038F0  0012               	return	
  5589                           
  5590                           ; BSR set to: 0
  5591                           ;uart.c: 61: {
  5592                           ;uart.c: 62: SPBRG = x;
  5593  0038F2  C07A  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  5594                           
  5595                           ;uart.c: 63: SYNC = 0;
  5596  0038F6  98AC               	bcf	4012,4,c	;volatile
  5597                           
  5598                           ;uart.c: 64: SPEN = 1;
  5599  0038F8  8EAB               	bsf	4011,7,c	;volatile
  5600                           
  5601                           ;uart.c: 65: TRISCbits.RC7 = 1;
  5602  0038FA  8E94               	bsf	3988,7,c	;volatile
  5603                           
  5604                           ;uart.c: 66: TRISCbits.RC6 = 0;
  5605  0038FC  9C94               	bcf	3988,6,c	;volatile
  5606                           
  5607                           ;uart.c: 67: CREN = 1;
  5608  0038FE  88AB               	bsf	4011,4,c	;volatile
  5609                           
  5610                           ;uart.c: 68: TXEN = 1;
  5611  003900  8AAC               	bsf	4012,5,c	;volatile
  5612                           
  5613                           ;uart.c: 70: return (1);
  5614                           ;	Return value of _configura_baudrate_uart is never used
  5615  003902  0012               	return	
  5616  003904                     __end_of_configura_baudrate_uart:
  5617                           	opt stack 0
  5618                           tosu	equ	0xFFF
  5619                           tosh	equ	0xFFE
  5620                           tosl	equ	0xFFD
  5621                           pclath	equ	0xFFA
  5622                           tblptru	equ	0xFF8
  5623                           tblptrh	equ	0xFF7
  5624                           tblptrl	equ	0xFF6
  5625                           tablat	equ	0xFF5
  5626                           prodh	equ	0xFF4
  5627                           prodl	equ	0xFF3
  5628                           intcon	equ	0xFF2
  5629                           intcon2	equ	0xFF1
  5630                           intcon3	equ	0xFF0
  5631                           postinc0	equ	0xFEE
  5632                           wreg	equ	0xFE8
  5633                           indf1	equ	0xFE7
  5634                           postinc1	equ	0xFE6
  5635                           postdec1	equ	0xFE5
  5636                           plusw1	equ	0xFE3
  5637                           fsr1h	equ	0xFE2
  5638                           fsr1l	equ	0xFE1
  5639                           indf2	equ	0xFDF
  5640                           postinc2	equ	0xFDE
  5641                           postdec2	equ	0xFDD
  5642                           plusw2	equ	0xFDB
  5643                           fsr2h	equ	0xFDA
  5644                           fsr2l	equ	0xFD9
  5645                           status	equ	0xFD8
  5646                           
  5647 ;; *************** function ___aldiv *****************
  5648 ;; Defined at:
  5649 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;  dividend        4    0[BANK0 ] long 
  5652 ;;  divisor         4    4[BANK0 ] long 
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;  quotient        4   10[BANK0 ] long 
  5655 ;;  sign            1    9[BANK0 ] unsigned char 
  5656 ;;  counter         1    8[BANK0 ] unsigned char 
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  4    0[BANK0 ] long 
  5659 ;; Registers used:
  5660 ;;		wreg, status,2, status,0
  5661 ;; Tracked objects:
  5662 ;;		On entry : 0/0
  5663 ;;		On exit  : 0/0
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5666 ;;      Params:         0       8       0       0       0       0       0       0       0
  5667 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5668 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5669 ;;      Totals:         0      14       0       0       0       0       0       0       0
  5670 ;;Total ram usage:       14 bytes
  5671 ;; Hardware stack levels used:    1
  5672 ;; Hardware stack levels required when called:    3
  5673 ;; This function calls:
  5674 ;;		Nothing
  5675 ;; This function is called by:
  5676 ;;		_configura_baudrate_uart
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680                           	psect	text23
  5681  003D40                     __ptext23:
  5682                           	opt stack 0
  5683  003D40                     ___aldiv:
  5684                           	opt stack 25
  5685                           
  5686                           ; BSR set to: 0
  5687                           ;incstack = 0
  5688  003D40  0E00               	movlw	0
  5689  003D42  0100               	movlb	0	; () banked
  5690  003D44  6F69               	movwf	___aldiv@sign& (0+255),b
  5691                           
  5692                           ; BSR set to: 0
  5693  003D46  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  5694  003D48  D00A               	goto	l1471
  5695                           
  5696                           ; BSR set to: 0
  5697  003D4A  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  5698  003D4C  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  5699  003D4E  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  5700  003D50  6D64               	negf	___aldiv@divisor& (0+255),b
  5701  003D52  0E00               	movlw	0
  5702  003D54  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  5703  003D56  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  5704  003D58  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  5705                           
  5706                           ; BSR set to: 0
  5707  003D5A  0E01               	movlw	1
  5708  003D5C  6F69               	movwf	___aldiv@sign& (0+255),b
  5709  003D5E                     l1471:
  5710                           
  5711                           ; BSR set to: 0
  5712                           
  5713                           ; BSR set to: 0
  5714  003D5E  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  5715  003D60  D00A               	goto	l1472
  5716                           
  5717                           ; BSR set to: 0
  5718  003D62  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  5719  003D64  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  5720  003D66  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  5721  003D68  6D60               	negf	___aldiv@dividend& (0+255),b
  5722  003D6A  0E00               	movlw	0
  5723  003D6C  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  5724  003D6E  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  5725  003D70  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  5726                           
  5727                           ; BSR set to: 0
  5728  003D72  0E01               	movlw	1
  5729  003D74  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  5730  003D76                     l1472:
  5731                           
  5732                           ; BSR set to: 0
  5733                           
  5734                           ; BSR set to: 0
  5735  003D76  0E00               	movlw	0
  5736  003D78  6F6A               	movwf	___aldiv@quotient& (0+255),b
  5737  003D7A  0E00               	movlw	0
  5738  003D7C  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  5739  003D7E  0E00               	movlw	0
  5740  003D80  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  5741  003D82  0E00               	movlw	0
  5742  003D84  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  5743                           
  5744                           ; BSR set to: 0
  5745  003D86  5164               	movf	___aldiv@divisor& (0+255),w,b
  5746  003D88  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  5747  003D8A  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  5748  003D8C  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  5749  003D8E  B4D8               	btfsc	status,2,c
  5750  003D90  D02A               	goto	l1479
  5751                           
  5752                           ; BSR set to: 0
  5753  003D92  0E01               	movlw	1
  5754  003D94  6F68               	movwf	___aldiv@counter& (0+255),b
  5755  003D96  D006               	goto	l1474
  5756  003D98                     
  5757                           ; BSR set to: 0
  5758                           
  5759                           ; BSR set to: 0
  5760  003D98  90D8               	bcf	status,0,c
  5761  003D9A  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  5762  003D9C  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  5763  003D9E  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  5764  003DA0  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  5765  003DA2  2B68               	incf	___aldiv@counter& (0+255),f,b
  5766  003DA4                     l1474:
  5767                           
  5768                           ; BSR set to: 0
  5769                           
  5770                           ; BSR set to: 0
  5771  003DA4  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  5772  003DA6  D7F8               	goto	l1475
  5773  003DA8                     u12670:
  5774                           
  5775                           ; BSR set to: 0
  5776                           
  5777                           ; BSR set to: 0
  5778                           
  5779                           ; BSR set to: 0
  5780  003DA8  90D8               	bcf	status,0,c
  5781  003DAA  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  5782  003DAC  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  5783  003DAE  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  5784  003DB0  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  5785                           
  5786                           ; BSR set to: 0
  5787  003DB2  5164               	movf	___aldiv@divisor& (0+255),w,b
  5788  003DB4  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  5789  003DB6  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  5790  003DB8  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  5791  003DBA  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  5792  003DBC  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  5793  003DBE  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  5794  003DC0  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  5795  003DC2  A0D8               	btfss	status,0,c
  5796  003DC4  D009               	goto	l1478
  5797                           
  5798                           ; BSR set to: 0
  5799  003DC6  5164               	movf	___aldiv@divisor& (0+255),w,b
  5800  003DC8  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  5801  003DCA  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  5802  003DCC  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  5803  003DCE  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  5804  003DD0  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  5805  003DD2  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  5806  003DD4  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  5807                           
  5808                           ; BSR set to: 0
  5809  003DD6  816A               	bsf	___aldiv@quotient& (0+255),0,b
  5810  003DD8                     l1478:
  5811                           
  5812                           ; BSR set to: 0
  5813                           
  5814                           ; BSR set to: 0
  5815  003DD8  90D8               	bcf	status,0,c
  5816  003DDA  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  5817  003DDC  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  5818  003DDE  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  5819  003DE0  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  5820                           
  5821                           ; BSR set to: 0
  5822  003DE2  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  5823  003DE4  D7E1               	goto	u12670
  5824  003DE6                     l1479:
  5825                           
  5826                           ; BSR set to: 0
  5827                           
  5828                           ; BSR set to: 0
  5829                           
  5830                           ; BSR set to: 0
  5831  003DE6  5169               	movf	___aldiv@sign& (0+255),w,b
  5832  003DE8  B4D8               	btfsc	status,2,c
  5833  003DEA  D008               	goto	l1480
  5834                           
  5835                           ; BSR set to: 0
  5836  003DEC  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  5837  003DEE  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  5838  003DF0  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  5839  003DF2  6D6A               	negf	___aldiv@quotient& (0+255),b
  5840  003DF4  0E00               	movlw	0
  5841  003DF6  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  5842  003DF8  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  5843  003DFA  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  5844  003DFC                     l1480:
  5845                           
  5846                           ; BSR set to: 0
  5847                           
  5848                           ; BSR set to: 0
  5849  003DFC  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  5850  003E00  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  5851  003E04  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  5852  003E08  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  5853  003E0C  0012               	return	
  5854  003E0E                     __end_of___aldiv:
  5855                           	opt stack 0
  5856                           tosu	equ	0xFFF
  5857                           tosh	equ	0xFFE
  5858                           tosl	equ	0xFFD
  5859                           pclath	equ	0xFFA
  5860                           tblptru	equ	0xFF8
  5861                           tblptrh	equ	0xFF7
  5862                           tblptrl	equ	0xFF6
  5863                           tablat	equ	0xFF5
  5864                           prodh	equ	0xFF4
  5865                           prodl	equ	0xFF3
  5866                           intcon	equ	0xFF2
  5867                           intcon2	equ	0xFF1
  5868                           intcon3	equ	0xFF0
  5869                           postinc0	equ	0xFEE
  5870                           wreg	equ	0xFE8
  5871                           indf1	equ	0xFE7
  5872                           postinc1	equ	0xFE6
  5873                           postdec1	equ	0xFE5
  5874                           plusw1	equ	0xFE3
  5875                           fsr1h	equ	0xFE2
  5876                           fsr1l	equ	0xFE1
  5877                           indf2	equ	0xFDF
  5878                           postinc2	equ	0xFDE
  5879                           postdec2	equ	0xFDD
  5880                           plusw2	equ	0xFDB
  5881                           fsr2h	equ	0xFDA
  5882                           fsr2l	equ	0xFD9
  5883                           status	equ	0xFD8
  5884                           
  5885 ;; *************** function _inicializa_SPI *****************
  5886 ;; Defined at:
  5887 ;;		line 49 in file "bibliotecas/SPI.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;		None
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;		None
  5892 ;; Return value:  Size  Location     Type
  5893 ;;                  1    wreg      void 
  5894 ;; Registers used:
  5895 ;;		wreg, status,2, status,0
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5901 ;;      Params:         0       0       0       0       0       0       0       0       0
  5902 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5903 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5904 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5905 ;;Total ram usage:        0 bytes
  5906 ;; Hardware stack levels used:    1
  5907 ;; Hardware stack levels required when called:    3
  5908 ;; This function calls:
  5909 ;;		Nothing
  5910 ;; This function is called by:
  5911 ;;		_escrita_sdcard
  5912 ;;		_sdcard_init
  5913 ;;		_leitura_sdcard
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917                           	psect	text24
  5918  004F0A                     __ptext24:
  5919                           	opt stack 0
  5920  004F0A                     _inicializa_SPI:
  5921                           	opt stack 24
  5922                           
  5923                           ;SPI.c: 51: TRISBbits.RB1 = 0;
  5924                           
  5925                           ; BSR set to: 0
  5926                           ;incstack = 0
  5927  004F0A  9293               	bcf	3987,1,c	;volatile
  5928                           
  5929                           ;SPI.c: 52: TRISBbits.RB4 = 0;
  5930  004F0C  9893               	bcf	3987,4,c	;volatile
  5931                           
  5932                           ;SPI.c: 53: TRISBbits.RB0 = 1;
  5933  004F0E  8093               	bsf	3987,0,c	;volatile
  5934                           
  5935                           ;SPI.c: 54: TRISCbits.RC7 = 0;
  5936  004F10  9E94               	bcf	3988,7,c	;volatile
  5937                           
  5938                           ;SPI.c: 56: LATBbits.LATB4 = 1;
  5939  004F12  888A               	bsf	3978,4,c	;volatile
  5940                           
  5941                           ;SPI.c: 57: SSPSTAT &= 0x3F;
  5942  004F14  0E3F               	movlw	63
  5943  004F16  16C7               	andwf	4039,f,c	;volatile
  5944                           
  5945                           ;SPI.c: 58: SSPCON1 = 0x00;
  5946  004F18  0E00               	movlw	0
  5947  004F1A  6EC6               	movwf	4038,c	;volatile
  5948                           
  5949                           ;SPI.c: 60: SSPSTATbits.SMP = 0;
  5950  004F1C  9EC7               	bcf	4039,7,c	;volatile
  5951                           
  5952                           ;SPI.c: 61: SSPSTATbits.CKE = 1;
  5953  004F1E  8CC7               	bsf	4039,6,c	;volatile
  5954                           
  5955                           ;SPI.c: 62: SSPCON1bits.CKP = 0;
  5956  004F20  98C6               	bcf	4038,4,c	;volatile
  5957                           
  5958                           ;SPI.c: 64: SSPCON1 = 0b00000011;
  5959  004F22  0E03               	movlw	3
  5960  004F24  6EC6               	movwf	4038,c	;volatile
  5961                           
  5962                           ;SPI.c: 66: SSPCON1bits.SSPEN = 1;
  5963  004F26  8AC6               	bsf	4038,5,c	;volatile
  5964  004F28  0012               	return		;funcret
  5965  004F2A                     __end_of_inicializa_SPI:
  5966                           	opt stack 0
  5967                           tosu	equ	0xFFF
  5968                           tosh	equ	0xFFE
  5969                           tosl	equ	0xFFD
  5970                           pclath	equ	0xFFA
  5971                           tblptru	equ	0xFF8
  5972                           tblptrh	equ	0xFF7
  5973                           tblptrl	equ	0xFF6
  5974                           tablat	equ	0xFF5
  5975                           prodh	equ	0xFF4
  5976                           prodl	equ	0xFF3
  5977                           intcon	equ	0xFF2
  5978                           intcon2	equ	0xFF1
  5979                           intcon3	equ	0xFF0
  5980                           postinc0	equ	0xFEE
  5981                           wreg	equ	0xFE8
  5982                           indf1	equ	0xFE7
  5983                           postinc1	equ	0xFE6
  5984                           postdec1	equ	0xFE5
  5985                           plusw1	equ	0xFE3
  5986                           fsr1h	equ	0xFE2
  5987                           fsr1l	equ	0xFE1
  5988                           indf2	equ	0xFDF
  5989                           postinc2	equ	0xFDE
  5990                           postdec2	equ	0xFDD
  5991                           plusw2	equ	0xFDB
  5992                           fsr2h	equ	0xFDA
  5993                           fsr2l	equ	0xFD9
  5994                           status	equ	0xFD8
  5995                           
  5996 ;; *************** function _fprintf *****************
  5997 ;; Defined at:
  5998 ;;		line 1808 in file "bibliotecas/tff.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;  fil             2    7[BANK1 ] PTR struct _FIL
  6001 ;;		 -> fil(28), 
  6002 ;;  str             2    9[BANK1 ] PTR const unsigned char 
  6003 ;;		 -> STR_18(21), 
  6004 ;; Auto vars:     Size  Location     Type
  6005 ;;  s              16    0[BANK2 ] unsigned char [16]
  6006 ;;  val             4   24[BANK2 ] unsigned long 
  6007 ;;  i               2   32[BANK2 ] int 
  6008 ;;  cc              2   30[BANK2 ] int 
  6009 ;;  arp             2   28[BANK2 ] PTR void [1]
  6010 ;;		 -> ?_fprintf(2), 
  6011 ;;  w               2   20[BANK2 ] int 
  6012 ;;  res             2   16[BANK2 ] int 
  6013 ;;  c               1   34[BANK2 ] unsigned char 
  6014 ;;  r               1   23[BANK2 ] unsigned char 
  6015 ;;  f               1   22[BANK2 ] unsigned char 
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  2    7[BANK1 ] int 
  6018 ;; Registers used:
  6019 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6025 ;;      Params:         0       0      12       0       0       0       0       0       0
  6026 ;;      Locals:         0       0       0      35       0       0       0       0       0
  6027 ;;      Temps:          0       0       2       0       0       0       0       0       0
  6028 ;;      Totals:         0       0      14      35       0       0       0       0       0
  6029 ;;Total ram usage:       49 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:   14
  6032 ;; This function calls:
  6033 ;;		___lldiv
  6034 ;;		___llmod
  6035 ;;		___wmul
  6036 ;;		_fputc
  6037 ;;		_fputs
  6038 ;; This function is called by:
  6039 ;;		_escrita_sdcard
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           	psect	text25
  6044  0015D8                     __ptext25:
  6045                           	opt stack 0
  6046  0015D8                     _fprintf:
  6047                           	opt stack 13
  6048                           
  6049                           ;tff.c: 1814: va_list arp;
  6050                           ;tff.c: 1815: UCHAR c, f, r;
  6051                           ;tff.c: 1816: ULONG val;
  6052                           ;tff.c: 1817: char s[16];
  6053                           ;tff.c: 1818: int i, w, res, cc;
  6054                           ;tff.c: 1821: *arp = __va_start();
  6055                           
  6056                           ;incstack = 0
  6057  0015D8  0ED7               	movlw	low (?_fprintf+4)
  6058  0015DA  0102               	movlb	2	; () banked
  6059  0015DC  6F1C               	movwf	fprintf@arp& (0+255),b
  6060  0015DE  0E01               	movlw	high (?_fprintf+4)
  6061  0015E0  6F1D               	movwf	(fprintf@arp+1)& (0+255),b
  6062                           
  6063                           ; BSR set to: 2
  6064                           ;tff.c: 1823: for (cc = res = 0; cc != -1; res += cc) {
  6065  0015E2  0E00               	movlw	0
  6066  0015E4  6F11               	movwf	(fprintf@res+1)& (0+255),b
  6067  0015E6  0E00               	movlw	0
  6068  0015E8  6F10               	movwf	fprintf@res& (0+255),b
  6069  0015EA  C210  F21E         	movff	fprintf@res,fprintf@cc
  6070  0015EE  C211  F21F         	movff	fprintf@res+1,fprintf@cc+1
  6071                           
  6072                           ; BSR set to: 2
  6073  0015F2  291E               	incf	fprintf@cc& (0+255),w,b
  6074  0015F4  E103               	bnz	l10780
  6075  0015F6  291F               	incf	(fprintf@cc+1)& (0+255),w,b
  6076  0015F8  B4D8               	btfsc	status,2,c
  6077  0015FA  0012               	return	
  6078  0015FC                     l10780:
  6079                           
  6080                           ; BSR set to: 2
  6081                           ;tff.c: 1824: c = *str++;
  6082  0015FC  C1D5  FFF6         	movff	fprintf@str,tblptrl
  6083  001600  C1D6  FFF7         	movff	fprintf@str+1,tblptrh
  6084  001604                     	if	0	;tblptru may be non-zero
  6085  001604                     	endif
  6086  001604                     	if	0	;tblptru may be non-zero
  6087  001604                     	endif
  6088  001604  0008               	tblrd		*
  6089  001606  CFF5 F222          	movff	tablat,fprintf@c
  6090                           
  6091                           ; BSR set to: 2
  6092  00160A  0101               	movlb	1	; () banked
  6093  00160C  4BD5               	infsnz	fprintf@str& (0+255),f,b
  6094  00160E  2BD6               	incf	(fprintf@str+1)& (0+255),f,b
  6095                           
  6096                           ; BSR set to: 1
  6097                           ;tff.c: 1825: if (c == 0) break;
  6098  001610  0102               	movlb	2	; () banked
  6099  001612  5122               	movf	fprintf@c& (0+255),w,b
  6100  001614  B4D8               	btfsc	status,2,c
  6101  001616  0012               	return	
  6102                           
  6103                           ; BSR set to: 2
  6104                           ;tff.c: 1826: if (c != '%') {
  6105                           
  6106                           ; BSR set to: 2
  6107                           
  6108                           ; BSR set to: 2
  6109  001618  0E25               	movlw	37
  6110  00161A  1922               	xorwf	fprintf@c& (0+255),w,b
  6111  00161C  B4D8               	btfsc	status,2,c
  6112  00161E  D015               	goto	l1338
  6113                           
  6114                           ; BSR set to: 2
  6115                           ;tff.c: 1827: cc = fputc(c, fil);
  6116  001620  C222  F0E5         	movff	fprintf@c,fputc@chr
  6117  001624  0100               	movlb	0	; () banked
  6118  001626  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  6119  001628  C1D3  F0E7         	movff	fprintf@fil,fputc@fil
  6120  00162C  C1D4  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  6121  001630  ECCC  F024         	call	_fputc	;wreg free
  6122  001634  C0E5  F21E         	movff	?_fputc,fprintf@cc
  6123  001638  C0E6  F21F         	movff	?_fputc+1,fprintf@cc+1
  6124                           
  6125                           ;tff.c: 1828: if (cc != -1) cc = 1;
  6126  00163C  0102               	movlb	2	; () banked
  6127  00163E  291E               	incf	fprintf@cc& (0+255),w,b
  6128  001640  E103               	bnz	u13830
  6129  001642  291F               	incf	(fprintf@cc+1)& (0+255),w,b
  6130  001644  B4D8               	btfsc	status,2,c
  6131  001646  D1AE               	goto	l1340
  6132  001648                     u13830:
  6133  001648  D096               	goto	u13900
  6134  00164A                     l1338:
  6135                           
  6136                           ; BSR set to: 2
  6137                           ;tff.c: 1830: }
  6138                           ;tff.c: 1831: w = f = 0;
  6139                           
  6140                           ; BSR set to: 2
  6141  00164A  0E00               	movlw	0
  6142  00164C  6F16               	movwf	fprintf@f& (0+255),b
  6143  00164E  C216  F214         	movff	fprintf@f,fprintf@w
  6144  001652  6B15               	clrf	(fprintf@w+1)& (0+255),b
  6145                           
  6146                           ; BSR set to: 2
  6147                           ;tff.c: 1832: c = *str++;
  6148  001654  C1D5  FFF6         	movff	fprintf@str,tblptrl
  6149  001658  C1D6  FFF7         	movff	fprintf@str+1,tblptrh
  6150  00165C                     	if	0	;tblptru may be non-zero
  6151  00165C                     	endif
  6152  00165C                     	if	0	;tblptru may be non-zero
  6153  00165C                     	endif
  6154  00165C  0008               	tblrd		*
  6155  00165E  CFF5 F222          	movff	tablat,fprintf@c
  6156                           
  6157                           ; BSR set to: 2
  6158  001662  0101               	movlb	1	; () banked
  6159  001664  4BD5               	infsnz	fprintf@str& (0+255),f,b
  6160  001666  2BD6               	incf	(fprintf@str+1)& (0+255),f,b
  6161                           
  6162                           ; BSR set to: 1
  6163                           ;tff.c: 1833: if (c == '0') {
  6164  001668  0E30               	movlw	48
  6165  00166A  0102               	movlb	2	; () banked
  6166  00166C  1922               	xorwf	fprintf@c& (0+255),w,b
  6167  00166E  A4D8               	btfss	status,2,c
  6168  001670  D02E               	goto	l1342
  6169                           
  6170                           ; BSR set to: 2
  6171                           ;tff.c: 1834: f = 1; c = *str++;
  6172  001672  0E01               	movlw	1
  6173  001674  6F16               	movwf	fprintf@f& (0+255),b
  6174  001676  D021               	goto	l10812
  6175  001678                     
  6176                           ;tff.c: 1837: w = w * 10 + (c - '0');
  6177                           
  6178                           ; BSR set to: 1
  6179  001678  C214  F060         	movff	fprintf@w,___wmul@multiplier
  6180  00167C  C215  F061         	movff	fprintf@w+1,___wmul@multiplier+1
  6181  001680  0E00               	movlw	0
  6182  001682  0100               	movlb	0	; () banked
  6183  001684  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6184  001686  0E0A               	movlw	10
  6185  001688  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6186  00168A  EC4E  F027         	call	___wmul	;wreg free
  6187  00168E  0102               	movlb	2	; () banked
  6188  001690  5122               	movf	fprintf@c& (0+255),w,b
  6189  001692  0101               	movlb	1	; () banked
  6190  001694  6FDF               	movwf	??_fprintf& (0+255),b
  6191  001696  6BE0               	clrf	(??_fprintf+1)& (0+255),b
  6192  001698  0100               	movlb	0	; () banked
  6193  00169A  5160               	movf	?___wmul& (0+255),w,b
  6194  00169C  0101               	movlb	1	; () banked
  6195  00169E  27DF               	addwf	??_fprintf& (0+255),f,b
  6196  0016A0  0100               	movlb	0	; () banked
  6197  0016A2  5161               	movf	(?___wmul+1)& (0+255),w,b
  6198  0016A4  0101               	movlb	1	; () banked
  6199  0016A6  23E0               	addwfc	(??_fprintf+1)& (0+255),f,b
  6200  0016A8  0ED0               	movlw	208
  6201  0016AA  25DF               	addwf	??_fprintf& (0+255),w,b
  6202  0016AC  0102               	movlb	2	; () banked
  6203  0016AE  6F14               	movwf	fprintf@w& (0+255),b
  6204  0016B0  0EFF               	movlw	255
  6205  0016B2  0101               	movlb	1	; () banked
  6206  0016B4  21E0               	addwfc	(??_fprintf+1)& (0+255),w,b
  6207  0016B6  0102               	movlb	2	; () banked
  6208  0016B8  6F15               	movwf	(fprintf@w+1)& (0+255),b
  6209  0016BA                     l10812:
  6210                           
  6211                           ; BSR set to: 2
  6212                           ;tff.c: 1838: c = *str++;
  6213  0016BA  C1D5  FFF6         	movff	fprintf@str,tblptrl
  6214  0016BE  C1D6  FFF7         	movff	fprintf@str+1,tblptrh
  6215  0016C2                     	if	0	;tblptru may be non-zero
  6216  0016C2                     	endif
  6217  0016C2                     	if	0	;tblptru may be non-zero
  6218  0016C2                     	endif
  6219  0016C2  0008               	tblrd		*
  6220  0016C4  CFF5 F222          	movff	tablat,fprintf@c
  6221                           
  6222                           ; BSR set to: 2
  6223  0016C8  0101               	movlb	1	; () banked
  6224  0016CA  4BD5               	infsnz	fprintf@str& (0+255),f,b
  6225  0016CC  2BD6               	incf	(fprintf@str+1)& (0+255),f,b
  6226  0016CE                     l1342:
  6227                           
  6228                           ; BSR set to: 1
  6229  0016CE  0E2F               	movlw	47
  6230  0016D0  0102               	movlb	2	; () banked
  6231  0016D2  6522               	cpfsgt	fprintf@c& (0+255),b
  6232  0016D4  D003               	goto	u13860
  6233                           
  6234                           ; BSR set to: 2
  6235  0016D6  0E39               	movlw	57
  6236  0016D8  6522               	cpfsgt	fprintf@c& (0+255),b
  6237  0016DA  D7CE               	goto	l1343
  6238  0016DC                     u13860:
  6239                           
  6240                           ; BSR set to: 2
  6241                           ;tff.c: 1839: }
  6242                           ;tff.c: 1840: if (c == 'l') {
  6243                           
  6244                           ; BSR set to: 2
  6245                           
  6246                           ; BSR set to: 2
  6247  0016DC  0E6C               	movlw	108
  6248  0016DE  1922               	xorwf	fprintf@c& (0+255),w,b
  6249  0016E0  A4D8               	btfss	status,2,c
  6250  0016E2  D00B               	goto	l1347
  6251                           
  6252                           ; BSR set to: 2
  6253                           ;tff.c: 1841: f |= 2; c = *str++;
  6254  0016E4  8316               	bsf	fprintf@f& (0+255),1,b
  6255                           
  6256                           ; BSR set to: 2
  6257  0016E6  C1D5  FFF6         	movff	fprintf@str,tblptrl
  6258  0016EA  C1D6  FFF7         	movff	fprintf@str+1,tblptrh
  6259  0016EE                     	if	0	;tblptru may be non-zero
  6260  0016EE                     	endif
  6261  0016EE                     	if	0	;tblptru may be non-zero
  6262  0016EE                     	endif
  6263  0016EE  0008               	tblrd		*
  6264  0016F0  CFF5 F222          	movff	tablat,fprintf@c
  6265                           
  6266                           ; BSR set to: 2
  6267  0016F4  0101               	movlb	1	; () banked
  6268  0016F6  4BD5               	infsnz	fprintf@str& (0+255),f,b
  6269  0016F8  2BD6               	incf	(fprintf@str+1)& (0+255),f,b
  6270  0016FA                     l1347:
  6271                           
  6272                           ;tff.c: 1842: }
  6273                           ;tff.c: 1843: if (c == 's') {
  6274                           
  6275                           ; BSR set to: 1
  6276  0016FA  0E73               	movlw	115
  6277  0016FC  0102               	movlb	2	; () banked
  6278  0016FE  1922               	xorwf	fprintf@c& (0+255),w,b
  6279  001700  A4D8               	btfss	status,2,c
  6280  001702  D018               	goto	l1348
  6281                           
  6282                           ; BSR set to: 2
  6283                           ;tff.c: 1844: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  6284  001704  C21C  FFD9         	movff	fprintf@arp,fsr2l
  6285  001708  C21D  FFDA         	movff	fprintf@arp+1,fsr2h
  6286  00170C  CFDE F1CC          	movff	postinc2,fputs@str
  6287  001710  CFDD F1CD          	movff	postdec2,fputs@str+1
  6288  001714  C1D3  F1CE         	movff	fprintf@fil,fputs@fil
  6289  001718  C1D4  F1CF         	movff	fprintf@fil+1,fputs@fil+1
  6290  00171C  EC42  F024         	call	_fputs	;wreg free
  6291  001720  C1CC  F21E         	movff	?_fputs,fprintf@cc
  6292  001724  C1CD  F21F         	movff	?_fputs+1,fprintf@cc+1
  6293  001728  0E02               	movlw	2
  6294  00172A  0102               	movlb	2	; () banked
  6295  00172C  271C               	addwf	fprintf@arp& (0+255),f,b
  6296  00172E  0E00               	movlw	0
  6297  001730  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  6298                           
  6299                           ;tff.c: 1845: continue;
  6300  001732  D138               	goto	l1340
  6301  001734                     l1348:
  6302                           
  6303                           ; BSR set to: 2
  6304                           ;tff.c: 1846: }
  6305                           ;tff.c: 1847: if (c == 'c') {
  6306                           
  6307                           ; BSR set to: 2
  6308  001734  0E63               	movlw	99
  6309  001736  1922               	xorwf	fprintf@c& (0+255),w,b
  6310  001738  A4D8               	btfss	status,2,c
  6311  00173A  D022               	goto	l1349
  6312                           
  6313                           ; BSR set to: 2
  6314                           ;tff.c: 1848: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  6315  00173C  C21C  FFD9         	movff	fprintf@arp,fsr2l
  6316  001740  C21D  FFDA         	movff	fprintf@arp+1,fsr2h
  6317  001744  50DF               	movf	indf2,w,c
  6318  001746  0101               	movlb	1	; () banked
  6319  001748  6FDF               	movwf	??_fprintf& (0+255),b
  6320  00174A  51DF               	movf	??_fprintf& (0+255),w,b
  6321  00174C  0100               	movlb	0	; () banked
  6322  00174E  6FE5               	movwf	fputc@chr& (0+255),b
  6323  001750  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  6324  001752  C1D3  F0E7         	movff	fprintf@fil,fputc@fil
  6325  001756  C1D4  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  6326  00175A  ECCC  F024         	call	_fputc	;wreg free
  6327  00175E  C0E5  F21E         	movff	?_fputc,fprintf@cc
  6328  001762  C0E6  F21F         	movff	?_fputc+1,fprintf@cc+1
  6329  001766  0E02               	movlw	2
  6330  001768  0102               	movlb	2	; () banked
  6331  00176A  271C               	addwf	fprintf@arp& (0+255),f,b
  6332  00176C  0E00               	movlw	0
  6333  00176E  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  6334                           
  6335                           ; BSR set to: 2
  6336                           ;tff.c: 1849: if (cc != -1) cc = 1;
  6337  001770  291E               	incf	fprintf@cc& (0+255),w,b
  6338  001772  E101               	bnz	u13900
  6339  001774  D766               	goto	L1
  6340  001776                     u13900:
  6341                           
  6342                           ; BSR set to: 2
  6343  001776  0E00               	movlw	0
  6344  001778  6F1F               	movwf	(fprintf@cc+1)& (0+255),b
  6345  00177A  0E01               	movlw	1
  6346  00177C  6F1E               	movwf	fprintf@cc& (0+255),b
  6347                           
  6348                           ; BSR set to: 2
  6349                           ;tff.c: 1850: continue;
  6350  00177E  D112               	goto	l1340
  6351  001780                     l1349:
  6352                           
  6353                           ; BSR set to: 2
  6354                           ;tff.c: 1851: }
  6355                           ;tff.c: 1852: r = 0;
  6356                           
  6357                           ; BSR set to: 2
  6358  001780  0E00               	movlw	0
  6359  001782  6F17               	movwf	fprintf@r& (0+255),b
  6360                           
  6361                           ; BSR set to: 2
  6362                           ;tff.c: 1853: if (c == 'd') r = 10;
  6363  001784  0E64               	movlw	100
  6364  001786  1922               	xorwf	fprintf@c& (0+255),w,b
  6365  001788  A4D8               	btfss	status,2,c
  6366  00178A  D002               	goto	l1351
  6367                           
  6368                           ; BSR set to: 2
  6369  00178C  0E0A               	movlw	10
  6370  00178E  6F17               	movwf	fprintf@r& (0+255),b
  6371  001790                     l1351:
  6372                           
  6373                           ; BSR set to: 2
  6374                           ;tff.c: 1854: if (c == 'u') r = 10;
  6375                           
  6376                           ; BSR set to: 2
  6377  001790  0E75               	movlw	117
  6378  001792  1922               	xorwf	fprintf@c& (0+255),w,b
  6379  001794  A4D8               	btfss	status,2,c
  6380  001796  D002               	goto	l1352
  6381                           
  6382                           ; BSR set to: 2
  6383  001798  0E0A               	movlw	10
  6384  00179A  6F17               	movwf	fprintf@r& (0+255),b
  6385  00179C                     l1352:
  6386                           
  6387                           ; BSR set to: 2
  6388                           ;tff.c: 1855: if (c == 'X') r = 16;
  6389                           
  6390                           ; BSR set to: 2
  6391  00179C  0E58               	movlw	88
  6392  00179E  1922               	xorwf	fprintf@c& (0+255),w,b
  6393  0017A0  A4D8               	btfss	status,2,c
  6394  0017A2  D002               	goto	l1353
  6395                           
  6396                           ; BSR set to: 2
  6397  0017A4  0E10               	movlw	16
  6398  0017A6  6F17               	movwf	fprintf@r& (0+255),b
  6399  0017A8                     l1353:
  6400                           
  6401                           ; BSR set to: 2
  6402                           ;tff.c: 1856: if (r == 0) break;
  6403  0017A8  5117               	movf	fprintf@r& (0+255),w,b
  6404  0017AA  B4D8               	btfsc	status,2,c
  6405  0017AC  0012               	return	
  6406                           
  6407                           ; BSR set to: 2
  6408                           ;tff.c: 1857: if (f & 2) {
  6409                           
  6410                           ; BSR set to: 2
  6411  0017AE  A316               	btfss	fprintf@f& (0+255),1,b
  6412  0017B0  D00E               	goto	l1355
  6413                           
  6414                           ; BSR set to: 2
  6415                           ;tff.c: 1858: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  6416  0017B2  C21C  FFD9         	movff	fprintf@arp,fsr2l
  6417  0017B6  C21D  FFDA         	movff	fprintf@arp+1,fsr2h
  6418  0017BA  CFDE F218          	movff	postinc2,fprintf@val
  6419  0017BE  CFDE F219          	movff	postinc2,fprintf@val+1
  6420  0017C2  CFDE F21A          	movff	postinc2,fprintf@val+2
  6421  0017C6  CFDE F21B          	movff	postinc2,fprintf@val+3
  6422                           
  6423                           ; BSR set to: 2
  6424  0017CA  0E04               	movlw	4
  6425  0017CC  D021               	goto	L5
  6426  0017CE                     l1355:
  6427                           
  6428                           ; BSR set to: 2
  6429                           ;tff.c: 1860: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  6430                           
  6431                           ; BSR set to: 2
  6432  0017CE  0E64               	movlw	100
  6433  0017D0  1922               	xorwf	fprintf@c& (0+255),w,b
  6434  0017D2  B4D8               	btfsc	status,2,c
  6435  0017D4  D00F               	goto	l1358
  6436                           
  6437                           ; BSR set to: 2
  6438  0017D6  C21C  FFD9         	movff	fprintf@arp,fsr2l
  6439  0017DA  C21D  FFDA         	movff	fprintf@arp+1,fsr2h
  6440  0017DE  CFDE F1DF          	movff	postinc2,??_fprintf
  6441  0017E2  CFDD F1E0          	movff	postdec2,??_fprintf+1
  6442  0017E6  C1DF  F218         	movff	??_fprintf,fprintf@val
  6443  0017EA  C1E0  F219         	movff	??_fprintf+1,fprintf@val+1
  6444  0017EE  6B1A               	clrf	(fprintf@val+2)& (0+255),b
  6445  0017F0  6B1B               	clrf	(fprintf@val+3)& (0+255),b
  6446  0017F2  D00D               	goto	l10872
  6447  0017F4                     l1358:
  6448                           
  6449                           ; BSR set to: 2
  6450                           
  6451                           ; BSR set to: 2
  6452  0017F4  C21C  FFD9         	movff	fprintf@arp,fsr2l
  6453  0017F8  C21D  FFDA         	movff	fprintf@arp+1,fsr2h
  6454  0017FC  CFDE F218          	movff	postinc2,fprintf@val
  6455  001800  CFDD F219          	movff	postdec2,fprintf@val+1
  6456  001804  0E00               	movlw	0
  6457  001806  BF19               	btfsc	(fprintf@val+1)& (0+255),7,b
  6458  001808  0EFF               	movlw	-1
  6459  00180A  6F1A               	movwf	(fprintf@val+2)& (0+255),b
  6460  00180C  6F1B               	movwf	(fprintf@val+3)& (0+255),b
  6461  00180E                     l10872:
  6462                           
  6463                           ; BSR set to: 2
  6464  00180E  0E02               	movlw	2
  6465  001810                     L5:
  6466  001810  271C               	addwf	fprintf@arp& (0+255),f,b
  6467  001812  0E00               	movlw	0
  6468  001814  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  6469                           
  6470                           ; BSR set to: 2
  6471                           ;tff.c: 1861: }
  6472                           ;tff.c: 1863: if (c == 'd') {
  6473                           
  6474                           ; BSR set to: 2
  6475                           
  6476                           ; BSR set to: 2
  6477  001816  0E64               	movlw	100
  6478  001818  1922               	xorwf	fprintf@c& (0+255),w,b
  6479  00181A  A4D8               	btfss	status,2,c
  6480  00181C  D00D               	goto	l1362
  6481                           
  6482                           ; BSR set to: 2
  6483                           ;tff.c: 1864: if (val >= 0x80000000) {
  6484  00181E  0E80               	movlw	128
  6485  001820  5D1B               	subwf	(fprintf@val+3)& (0+255),w,b
  6486  001822  A0D8               	btfss	status,0,c
  6487  001824  D009               	goto	l1362
  6488                           
  6489                           ; BSR set to: 2
  6490                           ;tff.c: 1865: val = 0 - val;
  6491  001826  1F1B               	comf	(fprintf@val+3)& (0+255),f,b
  6492  001828  1F1A               	comf	(fprintf@val+2)& (0+255),f,b
  6493  00182A  1F19               	comf	(fprintf@val+1)& (0+255),f,b
  6494  00182C  6D18               	negf	fprintf@val& (0+255),b
  6495  00182E  0E00               	movlw	0
  6496  001830  2319               	addwfc	(fprintf@val+1)& (0+255),f,b
  6497  001832  231A               	addwfc	(fprintf@val+2)& (0+255),f,b
  6498  001834  231B               	addwfc	(fprintf@val+3)& (0+255),f,b
  6499                           
  6500                           ;tff.c: 1866: f |= 4;
  6501  001836  8516               	bsf	fprintf@f& (0+255),2,b
  6502  001838                     l1362:
  6503                           
  6504                           ; BSR set to: 2
  6505                           ;tff.c: 1867: }
  6506                           ;tff.c: 1868: }
  6507                           ;tff.c: 1869: i = sizeof(s) - 1; s[i] = 0;
  6508                           
  6509                           ; BSR set to: 2
  6510                           
  6511                           ; BSR set to: 2
  6512  001838  0E00               	movlw	0
  6513  00183A  6F21               	movwf	(fprintf@i+1)& (0+255),b
  6514  00183C  0E0F               	movlw	15
  6515  00183E  6F20               	movwf	fprintf@i& (0+255),b
  6516                           
  6517                           ; BSR set to: 2
  6518  001840  0E00               	movlw	low fprintf@s
  6519  001842  2520               	addwf	fprintf@i& (0+255),w,b
  6520  001844  6ED9               	movwf	fsr2l,c
  6521  001846  0E02               	movlw	high fprintf@s
  6522  001848  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  6523  00184A  6EDA               	movwf	fsr2h,c
  6524  00184C  0E00               	movlw	0
  6525  00184E  6EDF               	movwf	indf2,c
  6526  001850                     
  6527                           ; BSR set to: 2
  6528                           ;tff.c: 1871: c = (UCHAR)(val % r + '0');
  6529                           
  6530                           ; BSR set to: 2
  6531  001850  C218  F060         	movff	fprintf@val,___llmod@dividend
  6532  001854  C219  F061         	movff	fprintf@val+1,___llmod@dividend+1
  6533  001858  C21A  F062         	movff	fprintf@val+2,___llmod@dividend+2
  6534  00185C  C21B  F063         	movff	fprintf@val+3,___llmod@dividend+3
  6535  001860  5117               	movf	fprintf@r& (0+255),w,b
  6536  001862  0100               	movlb	0	; () banked
  6537  001864  6F64               	movwf	___llmod@divisor& (0+255),b
  6538  001866  6B65               	clrf	(___llmod@divisor+1)& (0+255),b
  6539  001868  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
  6540  00186A  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
  6541  00186C  ECDA  F023         	call	___llmod	;wreg free
  6542  001870  0100               	movlb	0	; () banked
  6543  001872  5160               	movf	?___llmod& (0+255),w,b
  6544  001874  0F30               	addlw	48
  6545  001876  0102               	movlb	2	; () banked
  6546  001878  6F22               	movwf	fprintf@c& (0+255),b
  6547                           
  6548                           ; BSR set to: 2
  6549                           ;tff.c: 1872: if (c > '9') c += 7;
  6550  00187A  0E39               	movlw	57
  6551  00187C  6522               	cpfsgt	fprintf@c& (0+255),b
  6552  00187E  D002               	goto	l1364
  6553                           
  6554                           ; BSR set to: 2
  6555  001880  0E07               	movlw	7
  6556  001882  2722               	addwf	fprintf@c& (0+255),f,b
  6557  001884                     l1364:
  6558                           
  6559                           ; BSR set to: 2
  6560                           ;tff.c: 1873: s[--i] = c;
  6561                           
  6562                           ; BSR set to: 2
  6563  001884  0720               	decf	fprintf@i& (0+255),f,b
  6564  001886  A0D8               	btfss	status,0,c
  6565  001888  0721               	decf	(fprintf@i+1)& (0+255),f,b
  6566  00188A  0E00               	movlw	low fprintf@s
  6567  00188C  2520               	addwf	fprintf@i& (0+255),w,b
  6568  00188E  6ED9               	movwf	fsr2l,c
  6569  001890  0E02               	movlw	high fprintf@s
  6570  001892  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  6571  001894  6EDA               	movwf	fsr2h,c
  6572  001896  C222  FFDF         	movff	fprintf@c,indf2
  6573                           
  6574                           ; BSR set to: 2
  6575                           ;tff.c: 1874: val /= r;
  6576  00189A  C218  F060         	movff	fprintf@val,___lldiv@dividend
  6577  00189E  C219  F061         	movff	fprintf@val+1,___lldiv@dividend+1
  6578  0018A2  C21A  F062         	movff	fprintf@val+2,___lldiv@dividend+2
  6579  0018A6  C21B  F063         	movff	fprintf@val+3,___lldiv@dividend+3
  6580  0018AA  5117               	movf	fprintf@r& (0+255),w,b
  6581  0018AC  0100               	movlb	0	; () banked
  6582  0018AE  6F64               	movwf	___lldiv@divisor& (0+255),b
  6583  0018B0  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
  6584  0018B2  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
  6585  0018B4  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
  6586  0018B6  ECEB  F022         	call	___lldiv	;wreg free
  6587  0018BA  C060  F218         	movff	?___lldiv,fprintf@val
  6588  0018BE  C061  F219         	movff	?___lldiv+1,fprintf@val+1
  6589  0018C2  C062  F21A         	movff	?___lldiv+2,fprintf@val+2
  6590  0018C6  C063  F21B         	movff	?___lldiv+3,fprintf@val+3
  6591                           
  6592                           ;tff.c: 1875: } while (i && val);
  6593  0018CA  0102               	movlb	2	; () banked
  6594  0018CC  5120               	movf	fprintf@i& (0+255),w,b
  6595  0018CE  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  6596  0018D0  B4D8               	btfsc	status,2,c
  6597  0018D2  D006               	goto	u14010
  6598                           
  6599                           ; BSR set to: 2
  6600  0018D4  5118               	movf	fprintf@val& (0+255),w,b
  6601  0018D6  1119               	iorwf	(fprintf@val+1)& (0+255),w,b
  6602  0018D8  111A               	iorwf	(fprintf@val+2)& (0+255),w,b
  6603  0018DA  111B               	iorwf	(fprintf@val+3)& (0+255),w,b
  6604  0018DC  A4D8               	btfss	status,2,c
  6605  0018DE  D7B8               	goto	l1363
  6606  0018E0                     u14010:
  6607                           
  6608                           ; BSR set to: 2
  6609                           ;tff.c: 1876: if (i && (f & 4)) s[--i] = '-';
  6610                           
  6611                           ; BSR set to: 2
  6612                           
  6613                           ; BSR set to: 2
  6614  0018E0  5120               	movf	fprintf@i& (0+255),w,b
  6615  0018E2  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  6616  0018E4  A4D8               	btfss	status,2,c
  6617                           
  6618                           ; BSR set to: 2
  6619  0018E6  A516               	btfss	fprintf@f& (0+255),2,b
  6620  0018E8  D00B               	goto	l1368
  6621                           
  6622                           ; BSR set to: 2
  6623  0018EA  0720               	decf	fprintf@i& (0+255),f,b
  6624  0018EC  A0D8               	btfss	status,0,c
  6625  0018EE  0721               	decf	(fprintf@i+1)& (0+255),f,b
  6626  0018F0  0E00               	movlw	low fprintf@s
  6627  0018F2  2520               	addwf	fprintf@i& (0+255),w,b
  6628  0018F4  6ED9               	movwf	fsr2l,c
  6629  0018F6  0E02               	movlw	high fprintf@s
  6630  0018F8  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  6631  0018FA  6EDA               	movwf	fsr2h,c
  6632  0018FC  0E2D               	movlw	45
  6633  0018FE  6EDF               	movwf	indf2,c
  6634  001900                     l1368:
  6635                           
  6636                           ; BSR set to: 2
  6637                           ;tff.c: 1877: w = sizeof(s) - 1 - w;
  6638                           
  6639                           ; BSR set to: 2
  6640  001900  0E01               	movlw	1
  6641  001902  2514               	addwf	fprintf@w& (0+255),w,b
  6642  001904  0101               	movlb	1	; () banked
  6643  001906  6FDF               	movwf	??_fprintf& (0+255),b
  6644  001908  0E00               	movlw	0
  6645  00190A  0102               	movlb	2	; () banked
  6646  00190C  2115               	addwfc	(fprintf@w+1)& (0+255),w,b
  6647  00190E  0101               	movlb	1	; () banked
  6648  001910  6FE0               	movwf	(??_fprintf+1)& (0+255),b
  6649  001912  1FDF               	comf	??_fprintf& (0+255),f,b
  6650  001914  1FE0               	comf	(??_fprintf+1)& (0+255),f,b
  6651  001916  4BDF               	infsnz	??_fprintf& (0+255),f,b
  6652  001918  2BE0               	incf	(??_fprintf+1)& (0+255),f,b
  6653  00191A  0E10               	movlw	16
  6654  00191C  25DF               	addwf	??_fprintf& (0+255),w,b
  6655  00191E  0102               	movlb	2	; () banked
  6656  001920  6F14               	movwf	fprintf@w& (0+255),b
  6657  001922  0E00               	movlw	0
  6658  001924  0101               	movlb	1	; () banked
  6659  001926  21E0               	addwfc	(??_fprintf+1)& (0+255),w,b
  6660  001928  0102               	movlb	2	; () banked
  6661  00192A  6F15               	movwf	(fprintf@w+1)& (0+255),b
  6662                           
  6663                           ;tff.c: 1878: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
  6664  00192C  D016               	goto	l1369
  6665  00192E                     l1370:
  6666                           
  6667                           ; BSR set to: 1
  6668  00192E  0102               	movlb	2	; () banked
  6669  001930  B116               	btfsc	fprintf@f& (0+255),0,b
  6670  001932  D004               	goto	l1372
  6671                           
  6672                           ; BSR set to: 2
  6673  001934  0E00               	movlw	0
  6674  001936  6F13               	movwf	(_fprintf$2495+1)& (0+255),b
  6675  001938  0E20               	movlw	32
  6676  00193A  D003               	goto	L3
  6677  00193C                     l1372:
  6678                           
  6679                           ; BSR set to: 2
  6680                           
  6681                           ; BSR set to: 2
  6682  00193C  0E00               	movlw	0
  6683  00193E  6F13               	movwf	(_fprintf$2495+1)& (0+255),b
  6684  001940  0E30               	movlw	48
  6685  001942                     L3:
  6686  001942  6F12               	movwf	_fprintf$2495& (0+255),b
  6687                           
  6688                           ; BSR set to: 2
  6689                           
  6690                           ; BSR set to: 2
  6691  001944  0720               	decf	fprintf@i& (0+255),f,b
  6692  001946  A0D8               	btfss	status,0,c
  6693  001948  0721               	decf	(fprintf@i+1)& (0+255),f,b
  6694  00194A  0E00               	movlw	low fprintf@s
  6695  00194C  2520               	addwf	fprintf@i& (0+255),w,b
  6696  00194E  6ED9               	movwf	fsr2l,c
  6697  001950  0E02               	movlw	high fprintf@s
  6698  001952  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  6699  001954  6EDA               	movwf	fsr2h,c
  6700  001956  C212  FFDF         	movff	_fprintf$2495,indf2
  6701  00195A                     l1369:
  6702                           
  6703                           ; BSR set to: 2
  6704                           
  6705                           ; BSR set to: 2
  6706  00195A  5120               	movf	fprintf@i& (0+255),w,b
  6707  00195C  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  6708  00195E  B4D8               	btfsc	status,2,c
  6709  001960  D00D               	goto	u14060
  6710                           
  6711                           ; BSR set to: 2
  6712  001962  5120               	movf	fprintf@i& (0+255),w,b
  6713  001964  5D14               	subwf	fprintf@w& (0+255),w,b
  6714  001966  5115               	movf	(fprintf@w+1)& (0+255),w,b
  6715  001968  0A80               	xorlw	128
  6716  00196A  0101               	movlb	1	; () banked
  6717  00196C  6FDF               	movwf	??_fprintf& (0+255),b
  6718  00196E  0102               	movlb	2	; () banked
  6719  001970  5121               	movf	(fprintf@i+1)& (0+255),w,b
  6720  001972  0A80               	xorlw	128
  6721  001974  0101               	movlb	1	; () banked
  6722  001976  59DF               	subwfb	??_fprintf& (0+255),w,b
  6723  001978  A0D8               	btfss	status,0,c
  6724  00197A  D7D9               	goto	l1370
  6725  00197C                     u14060:
  6726                           
  6727                           ;tff.c: 1879: cc = fputs(&s[i], fil);
  6728                           
  6729                           ; BSR set to: 1
  6730                           
  6731                           ; BSR set to: 1
  6732  00197C  0E00               	movlw	low fprintf@s
  6733  00197E  0102               	movlb	2	; () banked
  6734  001980  2520               	addwf	fprintf@i& (0+255),w,b
  6735  001982  0101               	movlb	1	; () banked
  6736  001984  6FCC               	movwf	fputs@str& (0+255),b
  6737  001986  0E02               	movlw	high fprintf@s
  6738  001988  0102               	movlb	2	; () banked
  6739  00198A  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  6740  00198C  0101               	movlb	1	; () banked
  6741  00198E  6FCD               	movwf	(fputs@str+1)& (0+255),b
  6742  001990  C1D3  F1CE         	movff	fprintf@fil,fputs@fil
  6743  001994  C1D4  F1CF         	movff	fprintf@fil+1,fputs@fil+1
  6744  001998  EC42  F024         	call	_fputs	;wreg free
  6745  00199C  C1CC  F21E         	movff	?_fputs,fprintf@cc
  6746  0019A0  C1CD  F21F         	movff	?_fputs+1,fprintf@cc+1
  6747  0019A4                     l1340:
  6748  0019A4  0102               	movlb	2	; () banked
  6749  0019A6  511E               	movf	fprintf@cc& (0+255),w,b
  6750  0019A8  2710               	addwf	fprintf@res& (0+255),f,b
  6751  0019AA  511F               	movf	(fprintf@cc+1)& (0+255),w,b
  6752  0019AC  2311               	addwfc	(fprintf@res+1)& (0+255),f,b
  6753                           
  6754                           ; BSR set to: 2
  6755  0019AE  291E               	incf	fprintf@cc& (0+255),w,b
  6756  0019B0  E101               	bnz	u14071
  6757  0019B2  D621               	goto	L4
  6758  0019B4                     u14071:
  6759  0019B4  D623               	goto	l1335
  6760  0019B6                     __end_of_fprintf:
  6761                           	opt stack 0
  6762                           tosu	equ	0xFFF
  6763                           tosh	equ	0xFFE
  6764                           tosl	equ	0xFFD
  6765                           pclath	equ	0xFFA
  6766                           tblptru	equ	0xFF8
  6767                           tblptrh	equ	0xFF7
  6768                           tblptrl	equ	0xFF6
  6769                           tablat	equ	0xFF5
  6770                           prodh	equ	0xFF4
  6771                           prodl	equ	0xFF3
  6772                           intcon	equ	0xFF2
  6773                           intcon2	equ	0xFF1
  6774                           intcon3	equ	0xFF0
  6775                           postinc0	equ	0xFEE
  6776                           wreg	equ	0xFE8
  6777                           indf1	equ	0xFE7
  6778                           postinc1	equ	0xFE6
  6779                           postdec1	equ	0xFE5
  6780                           plusw1	equ	0xFE3
  6781                           fsr1h	equ	0xFE2
  6782                           fsr1l	equ	0xFE1
  6783                           indf2	equ	0xFDF
  6784                           postinc2	equ	0xFDE
  6785                           postdec2	equ	0xFDD
  6786                           plusw2	equ	0xFDB
  6787                           fsr2h	equ	0xFDA
  6788                           fsr2l	equ	0xFD9
  6789                           status	equ	0xFD8
  6790                           
  6791 ;; *************** function _fputs *****************
  6792 ;; Defined at:
  6793 ;;		line 1788 in file "bibliotecas/tff.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;  str             2    0[BANK1 ] PTR const unsigned char 
  6796 ;;		 -> fprintf@s(16), string_dado(44), 
  6797 ;;  fil             2    2[BANK1 ] PTR struct _FIL
  6798 ;;		 -> fil(28), 
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;  n               2    5[BANK1 ] int 
  6801 ;; Return value:  Size  Location     Type
  6802 ;;                  2    0[BANK1 ] int 
  6803 ;; Registers used:
  6804 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6810 ;;      Params:         0       0       4       0       0       0       0       0       0
  6811 ;;      Locals:         0       0       2       0       0       0       0       0       0
  6812 ;;      Temps:          0       0       1       0       0       0       0       0       0
  6813 ;;      Totals:         0       0       7       0       0       0       0       0       0
  6814 ;;Total ram usage:        7 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; Hardware stack levels required when called:   13
  6817 ;; This function calls:
  6818 ;;		_fputc
  6819 ;; This function is called by:
  6820 ;;		_fprintf
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           	psect	text26
  6825  004884                     __ptext26:
  6826                           	opt stack 0
  6827  004884                     _fputs:
  6828                           	opt stack 13
  6829                           
  6830                           ;tff.c: 1793: int n;
  6831                           ;tff.c: 1796: for (n = 0; *str; str++, n++) {
  6832                           
  6833                           ; BSR set to: 2
  6834                           ;incstack = 0
  6835  004884  0E00               	movlw	0
  6836  004886  0101               	movlb	1	; () banked
  6837  004888  6FD2               	movwf	(fputs@n+1)& (0+255),b
  6838  00488A  0E00               	movlw	0
  6839  00488C  6FD1               	movwf	fputs@n& (0+255),b
  6840  00488E  D01F               	goto	l1328
  6841  004890                     
  6842                           ; BSR set to: 1
  6843                           ;tff.c: 1797: if (fputc(*str, fil) == -1) return -1;
  6844                           
  6845                           ; BSR set to: 1
  6846  004890  C1CC  FFD9         	movff	fputs@str,fsr2l
  6847  004894  C1CD  FFDA         	movff	fputs@str+1,fsr2h
  6848  004898  50DF               	movf	indf2,w,c
  6849  00489A  6FD0               	movwf	??_fputs& (0+255),b
  6850  00489C  51D0               	movf	??_fputs& (0+255),w,b
  6851  00489E  0100               	movlb	0	; () banked
  6852  0048A0  6FE5               	movwf	fputc@chr& (0+255),b
  6853  0048A2  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  6854  0048A4  C1CE  F0E7         	movff	fputs@fil,fputc@fil
  6855  0048A8  C1CF  F0E8         	movff	fputs@fil+1,fputc@fil+1
  6856  0048AC  ECCC  F024         	call	_fputc	;wreg free
  6857  0048B0  0100               	movlb	0	; () banked
  6858  0048B2  29E5               	incf	?_fputc& (0+255),w,b
  6859  0048B4  E107               	bnz	l10504
  6860  0048B6  29E6               	incf	(?_fputc+1)& (0+255),w,b
  6861  0048B8  A4D8               	btfss	status,2,c
  6862  0048BA  D004               	goto	l1330
  6863                           
  6864                           ; BSR set to: 0
  6865  0048BC  0101               	movlb	1	; () banked
  6866  0048BE  69CC               	setf	?_fputs& (0+255),b
  6867  0048C0  69CD               	setf	(?_fputs+1)& (0+255),b
  6868  0048C2  0012               	return	
  6869  0048C4                     l1330:
  6870  0048C4                     l10504:
  6871  0048C4  0101               	movlb	1	; () banked
  6872  0048C6  4BCC               	infsnz	fputs@str& (0+255),f,b
  6873  0048C8  2BCD               	incf	(fputs@str+1)& (0+255),f,b
  6874  0048CA  4BD1               	infsnz	fputs@n& (0+255),f,b
  6875  0048CC  2BD2               	incf	(fputs@n+1)& (0+255),f,b
  6876  0048CE                     l1328:
  6877                           
  6878                           ; BSR set to: 1
  6879                           
  6880                           ; BSR set to: 1
  6881  0048CE  C1CC  FFD9         	movff	fputs@str,fsr2l
  6882  0048D2  C1CD  FFDA         	movff	fputs@str+1,fsr2h
  6883  0048D6  50DF               	movf	indf2,w,c
  6884  0048D8  A4D8               	btfss	status,2,c
  6885  0048DA  D7DA               	goto	l1329
  6886                           
  6887                           ; BSR set to: 1
  6888                           ;tff.c: 1798: }
  6889                           ;tff.c: 1799: return n;
  6890  0048DC  C1D1  F1CC         	movff	fputs@n,?_fputs
  6891  0048E0  C1D2  F1CD         	movff	fputs@n+1,?_fputs+1
  6892                           
  6893                           ; BSR set to: 1
  6894  0048E4  0012               	return		;funcret
  6895  0048E6                     __end_of_fputs:
  6896                           	opt stack 0
  6897                           tosu	equ	0xFFF
  6898                           tosh	equ	0xFFE
  6899                           tosl	equ	0xFFD
  6900                           pclath	equ	0xFFA
  6901                           tblptru	equ	0xFF8
  6902                           tblptrh	equ	0xFF7
  6903                           tblptrl	equ	0xFF6
  6904                           tablat	equ	0xFF5
  6905                           prodh	equ	0xFF4
  6906                           prodl	equ	0xFF3
  6907                           intcon	equ	0xFF2
  6908                           intcon2	equ	0xFF1
  6909                           intcon3	equ	0xFF0
  6910                           postinc0	equ	0xFEE
  6911                           wreg	equ	0xFE8
  6912                           indf1	equ	0xFE7
  6913                           postinc1	equ	0xFE6
  6914                           postdec1	equ	0xFE5
  6915                           plusw1	equ	0xFE3
  6916                           fsr1h	equ	0xFE2
  6917                           fsr1l	equ	0xFE1
  6918                           indf2	equ	0xFDF
  6919                           postinc2	equ	0xFDE
  6920                           postdec2	equ	0xFDD
  6921                           plusw2	equ	0xFDB
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8
  6925                           
  6926 ;; *************** function _fputc *****************
  6927 ;; Defined at:
  6928 ;;		line 1761 in file "bibliotecas/tff.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;  chr             2  133[BANK0 ] int 
  6931 ;;  fil             2  135[BANK0 ] PTR struct _FIL
  6932 ;;		 -> fil(28), 
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;  bw              2  138[BANK0 ] unsigned int 
  6935 ;;  c               1  137[BANK0 ] unsigned char 
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  2  133[BANK0 ] int 
  6938 ;; Registers used:
  6939 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6945 ;;      Params:         0       4       0       0       0       0       0       0       0
  6946 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6947 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6948 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6949 ;;Total ram usage:        7 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:   12
  6952 ;; This function calls:
  6953 ;;		_f_write
  6954 ;; This function is called by:
  6955 ;;		_fputs
  6956 ;;		_fprintf
  6957 ;; This function uses a non-reentrant model
  6958 ;;
  6959                           
  6960                           	psect	text27
  6961  004998                     __ptext27:
  6962                           	opt stack 0
  6963  004998                     _fputc:
  6964                           	opt stack 13
  6965                           
  6966                           ;tff.c: 1766: UINT bw;
  6967                           ;tff.c: 1767: char c;
  6968                           ;tff.c: 1773: if (!fil) {
  6969                           
  6970                           ; BSR set to: 1
  6971                           ;incstack = 0
  6972  004998  0100               	movlb	0	; () banked
  6973  00499A  51E7               	movf	fputc@fil& (0+255),w,b
  6974  00499C  11E8               	iorwf	(fputc@fil+1)& (0+255),w,b
  6975  00499E  A4D8               	btfss	status,2,c
  6976  0049A0  D005               	goto	l1320
  6977                           
  6978                           ; BSR set to: 0
  6979                           ;tff.c: 1775: return chr;
  6980  0049A2  C0E5  F0E5         	movff	fputc@chr,?_fputc
  6981  0049A6  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  6982  0049AA  0012               	return	
  6983  0049AC                     l1320:
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;tff.c: 1776: }
  6987                           ;tff.c: 1777: c = (char)chr;
  6988  0049AC  C0E5  F0E9         	movff	fputc@chr,fputc@c
  6989                           
  6990                           ; BSR set to: 0
  6991                           ;tff.c: 1778: f_write(fil, &c, 1, &bw);
  6992  0049B0  C0E7  F0C4         	movff	fputc@fil,f_write@fp
  6993  0049B4  C0E8  F0C5         	movff	fputc@fil+1,f_write@fp+1
  6994  0049B8  0EE9               	movlw	low fputc@c
  6995  0049BA  6FC6               	movwf	f_write@buff& (0+255),b
  6996  0049BC  0E00               	movlw	high fputc@c
  6997  0049BE  6FC7               	movwf	(f_write@buff+1)& (0+255),b
  6998  0049C0  0E00               	movlw	0
  6999  0049C2  6FC9               	movwf	(f_write@btw+1)& (0+255),b
  7000  0049C4  0E01               	movlw	1
  7001  0049C6  6FC8               	movwf	f_write@btw& (0+255),b
  7002  0049C8  0EEA               	movlw	low fputc@bw
  7003  0049CA  6FCA               	movwf	f_write@bw& (0+255),b
  7004  0049CC  0E00               	movlw	high fputc@bw
  7005  0049CE  6FCB               	movwf	(f_write@bw+1)& (0+255),b
  7006  0049D0  EC31  F003         	call	_f_write	;wreg free
  7007                           
  7008                           ;tff.c: 1779: return bw ? chr : -1;
  7009  0049D4  0100               	movlb	0	; () banked
  7010  0049D6  51EA               	movf	fputc@bw& (0+255),w,b
  7011  0049D8  11EB               	iorwf	(fputc@bw+1)& (0+255),w,b
  7012  0049DA  A4D8               	btfss	status,2,c
  7013  0049DC  D003               	goto	l1323
  7014                           
  7015                           ; BSR set to: 0
  7016  0049DE  69E5               	setf	?_fputc& (0+255),b
  7017  0049E0  69E6               	setf	(?_fputc+1)& (0+255),b
  7018  0049E2  0012               	return	
  7019  0049E4                     l1323:
  7020                           
  7021                           ; BSR set to: 0
  7022  0049E4  C0E5  F0E5         	movff	fputc@chr,?_fputc
  7023  0049E8  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  7024  0049EC  0012               	return	
  7025  0049EE                     __end_of_fputc:
  7026                           	opt stack 0
  7027                           tosu	equ	0xFFF
  7028                           tosh	equ	0xFFE
  7029                           tosl	equ	0xFFD
  7030                           pclath	equ	0xFFA
  7031                           tblptru	equ	0xFF8
  7032                           tblptrh	equ	0xFF7
  7033                           tblptrl	equ	0xFF6
  7034                           tablat	equ	0xFF5
  7035                           prodh	equ	0xFF4
  7036                           prodl	equ	0xFF3
  7037                           intcon	equ	0xFF2
  7038                           intcon2	equ	0xFF1
  7039                           intcon3	equ	0xFF0
  7040                           postinc0	equ	0xFEE
  7041                           wreg	equ	0xFE8
  7042                           indf1	equ	0xFE7
  7043                           postinc1	equ	0xFE6
  7044                           postdec1	equ	0xFE5
  7045                           plusw1	equ	0xFE3
  7046                           fsr1h	equ	0xFE2
  7047                           fsr1l	equ	0xFE1
  7048                           indf2	equ	0xFDF
  7049                           postinc2	equ	0xFDE
  7050                           postdec2	equ	0xFDD
  7051                           plusw2	equ	0xFDB
  7052                           fsr2h	equ	0xFDA
  7053                           fsr2l	equ	0xFD9
  7054                           status	equ	0xFD8
  7055                           
  7056 ;; *************** function _f_write *****************
  7057 ;; Defined at:
  7058 ;;		line 991 in file "bibliotecas/tff.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;  fp              2  100[BANK0 ] PTR struct _FIL
  7061 ;;		 -> fil(28), 
  7062 ;;  buff            2  102[BANK0 ] PTR const void 
  7063 ;;		 -> fputc@c(1), 
  7064 ;;  btw             2  104[BANK0 ] unsigned int 
  7065 ;;  bw              2  106[BANK0 ] PTR unsigned int 
  7066 ;;		 -> fputc@bw(2), 
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;  sect            4  123[BANK0 ] unsigned long 
  7069 ;;  wcnt            2  131[BANK0 ] unsigned int 
  7070 ;;  clust           2  129[BANK0 ] unsigned short 
  7071 ;;  cc              2  127[BANK0 ] unsigned int 
  7072 ;;  wbuff           2  121[BANK0 ] PTR const unsigned char 
  7073 ;;		 -> fputc@c(1), 
  7074 ;;  res             1  120[BANK0 ] enum E155
  7075 ;; Return value:  Size  Location     Type
  7076 ;;                  1    wreg      enum E155
  7077 ;; Registers used:
  7078 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7084 ;;      Params:         0       8       0       0       0       0       0       0       0
  7085 ;;      Locals:         0      13       0       0       0       0       0       0       0
  7086 ;;      Temps:          0      12       0       0       0       0       0       0       0
  7087 ;;      Totals:         0      33       0       0       0       0       0       0       0
  7088 ;;Total ram usage:       33 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; Hardware stack levels required when called:   11
  7091 ;; This function calls:
  7092 ;;		_clust2sect
  7093 ;;		_create_chain
  7094 ;;		_disk_write
  7095 ;;		_memcpy
  7096 ;;		_move_window
  7097 ;;		_validate
  7098 ;; This function is called by:
  7099 ;;		_fputc
  7100 ;; This function uses a non-reentrant model
  7101 ;;
  7102                           
  7103                           	psect	text28
  7104  000662                     __ptext28:
  7105                           	opt stack 0
  7106  000662                     _f_write:
  7107                           	opt stack 13
  7108                           
  7109                           ;tff.c: 998: FRESULT res;
  7110                           ;tff.c: 999: DWORD sect;
  7111                           ;tff.c: 1000: UINT wcnt, cc;
  7112                           ;tff.c: 1001: CLUST clust;
  7113                           ;tff.c: 1002: const BYTE *wbuff = buff;
  7114                           
  7115                           ; BSR set to: 0
  7116                           ;incstack = 0
  7117  000662  C0C6  F0D9         	movff	f_write@buff,f_write@wbuff
  7118  000666  C0C7  F0DA         	movff	f_write@buff+1,f_write@wbuff+1
  7119                           
  7120                           ;tff.c: 1005: *bw = 0;
  7121  00066A  C0CA  FFD9         	movff	f_write@bw,fsr2l
  7122  00066E  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  7123  000672  0E00               	movlw	0
  7124  000674  6EDE               	movwf	postinc2,c
  7125  000676  0E00               	movlw	0
  7126  000678  6EDD               	movwf	postdec2,c
  7127                           
  7128                           ;tff.c: 1006: res = validate(fp->fs, fp->id);
  7129  00067A  0100               	movlb	0	; () banked
  7130  00067C  EE20 F004          	lfsr	2,4
  7131  000680  51C4               	movf	f_write@fp& (0+255),w,b
  7132  000682  26D9               	addwf	fsr2l,f,c
  7133  000684  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7134  000686  22DA               	addwfc	fsr2h,f,c
  7135  000688  CFDE F066          	movff	postinc2,validate@fs
  7136  00068C  CFDD F067          	movff	postdec2,validate@fs+1
  7137  000690  C0C4  FFD9         	movff	f_write@fp,fsr2l
  7138  000694  C0C5  FFDA         	movff	f_write@fp+1,fsr2h
  7139  000698  CFDE F068          	movff	postinc2,validate@id
  7140  00069C  CFDD F069          	movff	postdec2,validate@id+1
  7141  0006A0  EC70  F025         	call	_validate	;wreg free
  7142  0006A4  0100               	movlb	0	; () banked
  7143  0006A6  6FD8               	movwf	f_write@res& (0+255),b
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;tff.c: 1007: if (res != FR_OK) return res;
  7147  0006A8  51D8               	movf	f_write@res& (0+255),w,b
  7148  0006AA  A4D8               	btfss	status,2,c
  7149  0006AC  0012               	return	
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;tff.c: 1008: if (fp->flag & 0x80) return FR_RW_ERROR;
  7153                           
  7154                           ; BSR set to: 0
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;	Return value of _f_write is never used
  7158  0006AE  EE20 F002          	lfsr	2,2
  7159  0006B2  51C4               	movf	f_write@fp& (0+255),w,b
  7160  0006B4  26D9               	addwf	fsr2l,f,c
  7161  0006B6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7162  0006B8  22DA               	addwfc	fsr2h,f,c
  7163  0006BA  BEDF               	btfsc	indf2,7,c
  7164  0006BC  0012               	return	
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;tff.c: 1009: if (!(fp->flag & 0x02)) return FR_DENIED;
  7168                           
  7169                           ; BSR set to: 0
  7170                           
  7171                           ; BSR set to: 0
  7172                           ;	Return value of _f_write is never used
  7173  0006BE  EE20 F002          	lfsr	2,2
  7174  0006C2  51C4               	movf	f_write@fp& (0+255),w,b
  7175  0006C4  26D9               	addwf	fsr2l,f,c
  7176  0006C6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7177  0006C8  22DA               	addwfc	fsr2h,f,c
  7178  0006CA  A2DF               	btfss	indf2,1,c
  7179  0006CC  0012               	return	
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;tff.c: 1010: if (fp->fsize + btw < fp->fsize) return FR_OK;
  7183                           
  7184                           ; BSR set to: 0
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;	Return value of _f_write is never used
  7188  0006CE  EE20 F00A          	lfsr	2,10
  7189  0006D2  51C4               	movf	f_write@fp& (0+255),w,b
  7190  0006D4  26D9               	addwf	fsr2l,f,c
  7191  0006D6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7192  0006D8  22DA               	addwfc	fsr2h,f,c
  7193  0006DA  EE10 F00A          	lfsr	1,10
  7194  0006DE  51C4               	movf	f_write@fp& (0+255),w,b
  7195  0006E0  26E1               	addwf	fsr1l,f,c
  7196  0006E2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7197  0006E4  22E2               	addwfc	fsr1h,f,c
  7198  0006E6  CFE6 F0D0          	movff	postinc1,??_f_write+4
  7199  0006EA  CFE6 F0D1          	movff	postinc1,??_f_write+5
  7200  0006EE  CFE6 F0D2          	movff	postinc1,??_f_write+6
  7201  0006F2  CFE6 F0D3          	movff	postinc1,??_f_write+7
  7202  0006F6  51C8               	movf	f_write@btw& (0+255),w,b
  7203  0006F8  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  7204  0006FA  6FD4               	movwf	(??_f_write+8)& (0+255),b
  7205  0006FC  51C9               	movf	(f_write@btw+1)& (0+255),w,b
  7206  0006FE  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  7207  000700  6FD5               	movwf	(??_f_write+9)& (0+255),b
  7208  000702  0E00               	movlw	0
  7209  000704  21D2               	addwfc	(??_f_write+6)& (0+255),w,b
  7210  000706  6FD6               	movwf	(??_f_write+10)& (0+255),b
  7211  000708  0E00               	movlw	0
  7212  00070A  21D3               	addwfc	(??_f_write+7)& (0+255),w,b
  7213  00070C  6FD7               	movwf	(??_f_write+11)& (0+255),b
  7214  00070E  50DE               	movf	postinc2,w,c
  7215  000710  5DD4               	subwf	(??_f_write+8)& (0+255),w,b
  7216  000712  50DE               	movf	postinc2,w,c
  7217  000714  59D5               	subwfb	(??_f_write+9)& (0+255),w,b
  7218  000716  50DE               	movf	postinc2,w,c
  7219  000718  59D6               	subwfb	(??_f_write+10)& (0+255),w,b
  7220  00071A  50DE               	movf	postinc2,w,c
  7221  00071C  59D7               	subwfb	(??_f_write+11)& (0+255),w,b
  7222  00071E  A0D8               	btfss	status,0,c
  7223  000720  0012               	return	
  7224  000722  D23B               	goto	l1230
  7225  000724                     
  7226                           ; BSR set to: 0
  7227                           ;tff.c: 1014: if ((fp->fptr % 512U) == 0) {
  7228                           
  7229                           ; BSR set to: 0
  7230  000724  EE20 F006          	lfsr	2,6
  7231  000728  51C4               	movf	f_write@fp& (0+255),w,b
  7232  00072A  26D9               	addwf	fsr2l,f,c
  7233  00072C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7234  00072E  22DA               	addwfc	fsr2h,f,c
  7235  000730  0EFF               	movlw	255
  7236  000732  14DE               	andwf	postinc2,w,c
  7237  000734  6FCC               	movwf	??_f_write& (0+255),b
  7238  000736  0E01               	movlw	1
  7239  000738  14DE               	andwf	postinc2,w,c
  7240  00073A  6FCD               	movwf	(??_f_write+1)& (0+255),b
  7241  00073C  0E00               	movlw	0
  7242  00073E  14DE               	andwf	postinc2,w,c
  7243  000740  6FCE               	movwf	(??_f_write+2)& (0+255),b
  7244  000742  0E00               	movlw	0
  7245  000744  14DE               	andwf	postinc2,w,c
  7246  000746  6FCF               	movwf	(??_f_write+3)& (0+255),b
  7247  000748  51CC               	movf	??_f_write& (0+255),w,b
  7248  00074A  11CD               	iorwf	(??_f_write+1)& (0+255),w,b
  7249  00074C  11CE               	iorwf	(??_f_write+2)& (0+255),w,b
  7250  00074E  11CF               	iorwf	(??_f_write+3)& (0+255),w,b
  7251  000750  A4D8               	btfss	status,2,c
  7252  000752  D166               	goto	l1232
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;tff.c: 1015: if (fp->csect >= fp->fs->csize) {
  7256  000754  EE20 F004          	lfsr	2,4
  7257  000758  51C4               	movf	f_write@fp& (0+255),w,b
  7258  00075A  26D9               	addwf	fsr2l,f,c
  7259  00075C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7260  00075E  22DA               	addwfc	fsr2h,f,c
  7261  000760  EE10 F01D          	lfsr	1,29
  7262  000764  50DE               	movf	postinc2,w,c
  7263  000766  26E1               	addwf	fsr1l,f,c
  7264  000768  50DD               	movf	postdec2,w,c
  7265  00076A  22E2               	addwfc	fsr1h,f,c
  7266  00076C  EE20 F003          	lfsr	2,3
  7267  000770  51C4               	movf	f_write@fp& (0+255),w,b
  7268  000772  26D9               	addwf	fsr2l,f,c
  7269  000774  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7270  000776  22DA               	addwfc	fsr2h,f,c
  7271  000778  50E6               	movf	postinc1,w,c
  7272  00077A  5CDE               	subwf	postinc2,w,c
  7273  00077C  A0D8               	btfss	status,0,c
  7274  00077E  D06D               	goto	l1233
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;tff.c: 1016: if (fp->fptr == 0) {
  7278  000780  EE20 F006          	lfsr	2,6
  7279  000784  51C4               	movf	f_write@fp& (0+255),w,b
  7280  000786  26D9               	addwf	fsr2l,f,c
  7281  000788  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7282  00078A  22DA               	addwfc	fsr2h,f,c
  7283  00078C  50DE               	movf	postinc2,w,c
  7284  00078E  10DE               	iorwf	postinc2,w,c
  7285  000790  10DE               	iorwf	postinc2,w,c
  7286  000792  10DE               	iorwf	postinc2,w,c
  7287  000794  A4D8               	btfss	status,2,c
  7288  000796  D024               	goto	l1234
  7289                           
  7290                           ; BSR set to: 0
  7291                           ;tff.c: 1017: clust = fp->org_clust;
  7292  000798  EE20 F00E          	lfsr	2,14
  7293  00079C  51C4               	movf	f_write@fp& (0+255),w,b
  7294  00079E  26D9               	addwf	fsr2l,f,c
  7295  0007A0  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7296  0007A2  22DA               	addwfc	fsr2h,f,c
  7297  0007A4  CFDE F0E1          	movff	postinc2,f_write@clust
  7298  0007A8  CFDD F0E2          	movff	postdec2,f_write@clust+1
  7299                           
  7300                           ; BSR set to: 0
  7301                           ;tff.c: 1018: if (clust == 0)
  7302  0007AC  51E1               	movf	f_write@clust& (0+255),w,b
  7303  0007AE  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  7304  0007B0  A4D8               	btfss	status,2,c
  7305  0007B2  D026               	goto	l1236
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;tff.c: 1019: fp->org_clust = clust = create_chain(0);
  7309  0007B4  0E00               	movlw	0
  7310  0007B6  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
  7311  0007B8  0E00               	movlw	0
  7312  0007BA  6FB6               	movwf	create_chain@clust& (0+255),b
  7313  0007BC  EC69  F017         	call	_create_chain	;wreg free
  7314  0007C0  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  7315  0007C4  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  7316  0007C8  0100               	movlb	0	; () banked
  7317  0007CA  EE20 F00E          	lfsr	2,14
  7318  0007CE  51C4               	movf	f_write@fp& (0+255),w,b
  7319  0007D0  26D9               	addwf	fsr2l,f,c
  7320  0007D2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7321  0007D4  22DA               	addwfc	fsr2h,f,c
  7322  0007D6  C0E1  FFDE         	movff	f_write@clust,postinc2
  7323  0007DA  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  7324                           
  7325                           ; BSR set to: 0
  7326                           ;tff.c: 1020: } else {
  7327  0007DE  D010               	goto	l1236
  7328  0007E0                     l1234:
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;tff.c: 1021: clust = create_chain(fp->curr_clust);
  7332                           
  7333                           ; BSR set to: 0
  7334  0007E0  EE20 F010          	lfsr	2,16
  7335  0007E4  51C4               	movf	f_write@fp& (0+255),w,b
  7336  0007E6  26D9               	addwf	fsr2l,f,c
  7337  0007E8  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7338  0007EA  22DA               	addwfc	fsr2h,f,c
  7339  0007EC  CFDE F0B6          	movff	postinc2,create_chain@clust
  7340  0007F0  CFDD F0B7          	movff	postdec2,create_chain@clust+1
  7341  0007F4  EC69  F017         	call	_create_chain	;wreg free
  7342  0007F8  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  7343  0007FC  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  7344  000800                     l1236:
  7345                           
  7346                           ;tff.c: 1022: }
  7347                           ;tff.c: 1023: if (clust == 0) break;
  7348  000800  0100               	movlb	0	; () banked
  7349  000802  51E1               	movf	f_write@clust& (0+255),w,b
  7350  000804  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  7351  000806  B4D8               	btfsc	status,2,c
  7352  000808  D1CC               	goto	u12120
  7353                           
  7354                           ; BSR set to: 0
  7355                           ;tff.c: 1024: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
  7356                           
  7357                           ; BSR set to: 0
  7358                           
  7359                           ; BSR set to: 0
  7360  00080A  05E1               	decf	f_write@clust& (0+255),w,b
  7361  00080C  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  7362  00080E  B4D8               	btfsc	status,2,c
  7363  000810  D1FB               	goto	l1242
  7364                           
  7365                           ; BSR set to: 0
  7366  000812  EE20 F004          	lfsr	2,4
  7367  000816  51C4               	movf	f_write@fp& (0+255),w,b
  7368  000818  26D9               	addwf	fsr2l,f,c
  7369  00081A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7370  00081C  22DA               	addwfc	fsr2h,f,c
  7371  00081E  EE10 F016          	lfsr	1,22
  7372  000822  50DE               	movf	postinc2,w,c
  7373  000824  26E1               	addwf	fsr1l,f,c
  7374  000826  50DD               	movf	postdec2,w,c
  7375  000828  22E2               	addwfc	fsr1h,f,c
  7376  00082A  50E6               	movf	postinc1,w,c
  7377  00082C  5DE1               	subwf	f_write@clust& (0+255),w,b
  7378  00082E  50E6               	movf	postinc1,w,c
  7379  000830  59E2               	subwfb	(f_write@clust+1)& (0+255),w,b
  7380  000832  B0D8               	btfsc	status,0,c
  7381  000834  D1E9               	goto	l1242
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;tff.c: 1025: fp->curr_clust = clust;
  7385                           
  7386                           ; BSR set to: 0
  7387                           
  7388                           ; BSR set to: 0
  7389  000836  EE20 F010          	lfsr	2,16
  7390  00083A  51C4               	movf	f_write@fp& (0+255),w,b
  7391  00083C  26D9               	addwf	fsr2l,f,c
  7392  00083E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7393  000840  22DA               	addwfc	fsr2h,f,c
  7394  000842  C0E1  FFDE         	movff	f_write@clust,postinc2
  7395  000846  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  7396                           
  7397                           ;tff.c: 1026: fp->csect = 0;
  7398  00084A  EE20 F003          	lfsr	2,3
  7399  00084E  51C4               	movf	f_write@fp& (0+255),w,b
  7400  000850  26D9               	addwf	fsr2l,f,c
  7401  000852  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7402  000854  22DA               	addwfc	fsr2h,f,c
  7403  000856  0E00               	movlw	0
  7404  000858  6EDF               	movwf	indf2,c
  7405  00085A                     l1233:
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;tff.c: 1027: }
  7409                           ;tff.c: 1028: sect = clust2sect(fp->curr_clust) + fp->csect;
  7410                           
  7411                           ; BSR set to: 0
  7412  00085A  EE20 F010          	lfsr	2,16
  7413  00085E  51C4               	movf	f_write@fp& (0+255),w,b
  7414  000860  26D9               	addwf	fsr2l,f,c
  7415  000862  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7416  000864  22DA               	addwfc	fsr2h,f,c
  7417  000866  CFDE F06C          	movff	postinc2,clust2sect@clust
  7418  00086A  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  7419  00086E  EC07  F01F         	call	_clust2sect	;wreg free
  7420  000872  0100               	movlb	0	; () banked
  7421  000874  EE20 F003          	lfsr	2,3
  7422  000878  51C4               	movf	f_write@fp& (0+255),w,b
  7423  00087A  26D9               	addwf	fsr2l,f,c
  7424  00087C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7425  00087E  22DA               	addwfc	fsr2h,f,c
  7426  000880  50DF               	movf	indf2,w,c
  7427  000882  6FCC               	movwf	??_f_write& (0+255),b
  7428  000884  51CC               	movf	??_f_write& (0+255),w,b
  7429  000886  256C               	addwf	?_clust2sect& (0+255),w,b
  7430  000888  6FDB               	movwf	f_write@sect& (0+255),b
  7431  00088A  0E00               	movlw	0
  7432  00088C  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  7433  00088E  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  7434  000890  0E00               	movlw	0
  7435  000892  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  7436  000894  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  7437  000896  0E00               	movlw	0
  7438  000898  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  7439  00089A  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  7440                           
  7441                           ; BSR set to: 0
  7442                           ;tff.c: 1029: cc = btw / 512U;
  7443  00089C  C0C8  F0CC         	movff	f_write@btw,??_f_write
  7444  0008A0  C0C9  F0CD         	movff	f_write@btw+1,??_f_write+1
  7445  0008A4  0E09               	movlw	9
  7446  0008A6  6FCE               	movwf	(??_f_write+2)& (0+255),b
  7447  0008A8                     u12035:
  7448  0008A8  90D8               	bcf	status,0,c
  7449  0008AA  33CD               	rrcf	(??_f_write+1)& (0+255),f,b
  7450  0008AC  33CC               	rrcf	??_f_write& (0+255),f,b
  7451  0008AE  2FCE               	decfsz	(??_f_write+2)& (0+255),f,b
  7452  0008B0  D7FB               	goto	u12035
  7453  0008B2  C0CC  F0DF         	movff	??_f_write,f_write@cc
  7454  0008B6  C0CD  F0E0         	movff	??_f_write+1,f_write@cc+1
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;tff.c: 1030: if (cc) {
  7458  0008BA  51DF               	movf	f_write@cc& (0+255),w,b
  7459  0008BC  11E0               	iorwf	(f_write@cc+1)& (0+255),w,b
  7460  0008BE  B4D8               	btfsc	status,2,c
  7461  0008C0  D070               	goto	l1243
  7462                           
  7463                           ; BSR set to: 0
  7464                           ;tff.c: 1031: if (fp->csect + cc > fp->fs->csize)
  7465  0008C2  EE20 F003          	lfsr	2,3
  7466  0008C6  51C4               	movf	f_write@fp& (0+255),w,b
  7467  0008C8  26D9               	addwf	fsr2l,f,c
  7468  0008CA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7469  0008CC  22DA               	addwfc	fsr2h,f,c
  7470  0008CE  50DF               	movf	indf2,w,c
  7471  0008D0  6FCC               	movwf	??_f_write& (0+255),b
  7472  0008D2  51CC               	movf	??_f_write& (0+255),w,b
  7473  0008D4  25DF               	addwf	f_write@cc& (0+255),w,b
  7474  0008D6  6FCD               	movwf	(??_f_write+1)& (0+255),b
  7475  0008D8  0E00               	movlw	0
  7476  0008DA  21E0               	addwfc	(f_write@cc+1)& (0+255),w,b
  7477  0008DC  6FCE               	movwf	(??_f_write+2)& (0+255),b
  7478  0008DE  EE20 F004          	lfsr	2,4
  7479  0008E2  51C4               	movf	f_write@fp& (0+255),w,b
  7480  0008E4  26D9               	addwf	fsr2l,f,c
  7481  0008E6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7482  0008E8  22DA               	addwfc	fsr2h,f,c
  7483  0008EA  EE10 F01D          	lfsr	1,29
  7484  0008EE  50DE               	movf	postinc2,w,c
  7485  0008F0  26E1               	addwf	fsr1l,f,c
  7486  0008F2  50DD               	movf	postdec2,w,c
  7487  0008F4  22E2               	addwfc	fsr1h,f,c
  7488  0008F6  50E7               	movf	indf1,w,c
  7489  0008F8  6FCF               	movwf	(??_f_write+3)& (0+255),b
  7490  0008FA  6BD0               	clrf	(??_f_write+4)& (0+255),b
  7491  0008FC  51CD               	movf	(??_f_write+1)& (0+255),w,b
  7492  0008FE  5DCF               	subwf	(??_f_write+3)& (0+255),w,b
  7493  000900  51CE               	movf	(??_f_write+2)& (0+255),w,b
  7494  000902  59D0               	subwfb	(??_f_write+4)& (0+255),w,b
  7495  000904  B0D8               	btfsc	status,0,c
  7496  000906  D021               	goto	l1244
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;tff.c: 1032: cc = fp->fs->csize - fp->csect;
  7500  000908  EE20 F003          	lfsr	2,3
  7501  00090C  51C4               	movf	f_write@fp& (0+255),w,b
  7502  00090E  26D9               	addwf	fsr2l,f,c
  7503  000910  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7504  000912  22DA               	addwfc	fsr2h,f,c
  7505  000914  50DF               	movf	indf2,w,c
  7506  000916  6FCC               	movwf	??_f_write& (0+255),b
  7507  000918  6BCD               	clrf	(??_f_write+1)& (0+255),b
  7508  00091A  1FCC               	comf	??_f_write& (0+255),f,b
  7509  00091C  1FCD               	comf	(??_f_write+1)& (0+255),f,b
  7510  00091E  4BCC               	infsnz	??_f_write& (0+255),f,b
  7511  000920  2BCD               	incf	(??_f_write+1)& (0+255),f,b
  7512  000922  EE20 F004          	lfsr	2,4
  7513  000926  51C4               	movf	f_write@fp& (0+255),w,b
  7514  000928  26D9               	addwf	fsr2l,f,c
  7515  00092A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7516  00092C  22DA               	addwfc	fsr2h,f,c
  7517  00092E  EE10 F01D          	lfsr	1,29
  7518  000932  50DE               	movf	postinc2,w,c
  7519  000934  26E1               	addwf	fsr1l,f,c
  7520  000936  50DD               	movf	postdec2,w,c
  7521  000938  22E2               	addwfc	fsr1h,f,c
  7522  00093A  50E7               	movf	indf1,w,c
  7523  00093C  6FCE               	movwf	(??_f_write+2)& (0+255),b
  7524  00093E  51CE               	movf	(??_f_write+2)& (0+255),w,b
  7525  000940  25CC               	addwf	??_f_write& (0+255),w,b
  7526  000942  6FDF               	movwf	f_write@cc& (0+255),b
  7527  000944  0E00               	movlw	0
  7528  000946  21CD               	addwfc	(??_f_write+1)& (0+255),w,b
  7529  000948  6FE0               	movwf	(f_write@cc+1)& (0+255),b
  7530  00094A                     l1244:
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;tff.c: 1033: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
  7534                           
  7535                           ; BSR set to: 0
  7536  00094A  C0D9  F07F         	movff	f_write@wbuff,disk_write@buff
  7537  00094E  C0DA  F080         	movff	f_write@wbuff+1,disk_write@buff+1
  7538  000952  C0DB  F081         	movff	f_write@sect,disk_write@sector
  7539  000956  C0DC  F082         	movff	f_write@sect+1,disk_write@sector+1
  7540  00095A  C0DD  F083         	movff	f_write@sect+2,disk_write@sector+2
  7541  00095E  C0DE  F084         	movff	f_write@sect+3,disk_write@sector+3
  7542  000962  C0DF  F085         	movff	f_write@cc,disk_write@count
  7543  000966  0E00               	movlw	0
  7544  000968  EC22  F022         	call	_disk_write
  7545  00096C  0900               	iorlw	0
  7546  00096E  A4D8               	btfss	status,2,c
  7547  000970  D14B               	goto	l1242
  7548                           
  7549                           ;tff.c: 1035: fp->csect += (BYTE)cc;
  7550                           
  7551                           ;tff.c: 1034: goto fw_error;
  7552  000972  0100               	movlb	0	; () banked
  7553  000974  EE20 F003          	lfsr	2,3
  7554  000978  51C4               	movf	f_write@fp& (0+255),w,b
  7555  00097A  26D9               	addwf	fsr2l,f,c
  7556  00097C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7557  00097E  22DA               	addwfc	fsr2h,f,c
  7558  000980  51DF               	movf	f_write@cc& (0+255),w,b
  7559  000982  26DF               	addwf	indf2,f,c
  7560                           
  7561                           ; BSR set to: 0
  7562                           ;tff.c: 1036: wcnt = 512U * cc;
  7563  000984  C0DF  F0CC         	movff	f_write@cc,??_f_write
  7564  000988  C0E0  F0CD         	movff	f_write@cc+1,??_f_write+1
  7565  00098C  0E09               	movlw	9
  7566  00098E                     u12075:
  7567  00098E  90D8               	bcf	status,0,c
  7568  000990  37CC               	rlcf	??_f_write& (0+255),f,b
  7569  000992  37CD               	rlcf	(??_f_write+1)& (0+255),f,b
  7570  000994  2EE8               	decfsz	wreg,f,c
  7571  000996  D7FB               	goto	u12075
  7572  000998  C0CC  F0E3         	movff	??_f_write,f_write@wcnt
  7573  00099C  C0CD  F0E4         	movff	??_f_write+1,f_write@wcnt+1
  7574                           
  7575                           ;tff.c: 1037: continue;
  7576  0009A0  D0DF               	goto	l1246
  7577  0009A2                     l1243:
  7578                           
  7579                           ; BSR set to: 0
  7580                           ;tff.c: 1038: }
  7581                           ;tff.c: 1039: if (fp->fptr >= fp->fsize) {
  7582                           
  7583                           ; BSR set to: 0
  7584  0009A2  EE20 F00A          	lfsr	2,10
  7585  0009A6  51C4               	movf	f_write@fp& (0+255),w,b
  7586  0009A8  26D9               	addwf	fsr2l,f,c
  7587  0009AA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7588  0009AC  22DA               	addwfc	fsr2h,f,c
  7589  0009AE  EE10 F006          	lfsr	1,6
  7590  0009B2  51C4               	movf	f_write@fp& (0+255),w,b
  7591  0009B4  26E1               	addwf	fsr1l,f,c
  7592  0009B6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7593  0009B8  22E2               	addwfc	fsr1h,f,c
  7594  0009BA  50DE               	movf	postinc2,w,c
  7595  0009BC  5CE6               	subwf	postinc1,w,c
  7596  0009BE  50DE               	movf	postinc2,w,c
  7597  0009C0  58E6               	subwfb	postinc1,w,c
  7598  0009C2  50DE               	movf	postinc2,w,c
  7599  0009C4  58E6               	subwfb	postinc1,w,c
  7600  0009C6  50DE               	movf	postinc2,w,c
  7601  0009C8  58E6               	subwfb	postinc1,w,c
  7602  0009CA  A0D8               	btfss	status,0,c
  7603  0009CC  D022               	goto	l1247
  7604                           
  7605                           ; BSR set to: 0
  7606                           ;tff.c: 1040: if (!move_window(0)) goto fw_error;
  7607  0009CE  0E00               	movlw	0
  7608  0009D0  6F8B               	movwf	move_window@sector& (0+255),b
  7609  0009D2  0E00               	movlw	0
  7610  0009D4  6F8C               	movwf	(move_window@sector+1)& (0+255),b
  7611  0009D6  0E00               	movlw	0
  7612  0009D8  6F8D               	movwf	(move_window@sector+2)& (0+255),b
  7613  0009DA  0E00               	movlw	0
  7614  0009DC  6F8E               	movwf	(move_window@sector+3)& (0+255),b
  7615  0009DE  EC49  F018         	call	_move_window	;wreg free
  7616  0009E2  0900               	iorlw	0
  7617  0009E4  B4D8               	btfsc	status,2,c
  7618  0009E6  D110               	goto	l1242
  7619                           
  7620                           ;tff.c: 1041: fp->fs->winsect = sect;
  7621  0009E8  0100               	movlb	0	; () banked
  7622  0009EA  EE20 F004          	lfsr	2,4
  7623  0009EE  51C4               	movf	f_write@fp& (0+255),w,b
  7624  0009F0  26D9               	addwf	fsr2l,f,c
  7625  0009F2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7626  0009F4  22DA               	addwfc	fsr2h,f,c
  7627  0009F6  EE10 F004          	lfsr	1,4
  7628  0009FA  50DE               	movf	postinc2,w,c
  7629  0009FC  26E1               	addwf	fsr1l,f,c
  7630  0009FE  50DD               	movf	postdec2,w,c
  7631  000A00  22E2               	addwfc	fsr1h,f,c
  7632  000A02  C0DB  FFE6         	movff	f_write@sect,postinc1
  7633  000A06  C0DC  FFE6         	movff	f_write@sect+1,postinc1
  7634  000A0A  C0DD  FFE6         	movff	f_write@sect+2,postinc1
  7635  000A0E  C0DE  FFE6         	movff	f_write@sect+3,postinc1
  7636  000A12                     l1247:
  7637                           
  7638                           ; BSR set to: 0
  7639                           ;tff.c: 1042: }
  7640                           ;tff.c: 1043: fp->csect++;
  7641                           
  7642                           ; BSR set to: 0
  7643  000A12  EE20 F003          	lfsr	2,3
  7644  000A16  51C4               	movf	f_write@fp& (0+255),w,b
  7645  000A18  26D9               	addwf	fsr2l,f,c
  7646  000A1A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7647  000A1C  22DA               	addwfc	fsr2h,f,c
  7648  000A1E  2ADF               	incf	indf2,f,c
  7649  000A20                     l1232:
  7650                           
  7651                           ; BSR set to: 0
  7652                           ;tff.c: 1044: }
  7653                           ;tff.c: 1045: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  7654                           
  7655                           ; BSR set to: 0
  7656  000A20  EE20 F010          	lfsr	2,16
  7657  000A24  51C4               	movf	f_write@fp& (0+255),w,b
  7658  000A26  26D9               	addwf	fsr2l,f,c
  7659  000A28  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7660  000A2A  22DA               	addwfc	fsr2h,f,c
  7661  000A2C  CFDE F06C          	movff	postinc2,clust2sect@clust
  7662  000A30  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  7663  000A34  EC07  F01F         	call	_clust2sect	;wreg free
  7664  000A38  0100               	movlb	0	; () banked
  7665  000A3A  EE20 F003          	lfsr	2,3
  7666  000A3E  51C4               	movf	f_write@fp& (0+255),w,b
  7667  000A40  26D9               	addwf	fsr2l,f,c
  7668  000A42  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7669  000A44  22DA               	addwfc	fsr2h,f,c
  7670  000A46  50DF               	movf	indf2,w,c
  7671  000A48  6FCC               	movwf	??_f_write& (0+255),b
  7672  000A4A  51CC               	movf	??_f_write& (0+255),w,b
  7673  000A4C  256C               	addwf	?_clust2sect& (0+255),w,b
  7674  000A4E  6FCD               	movwf	(??_f_write+1)& (0+255),b
  7675  000A50  0E00               	movlw	0
  7676  000A52  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  7677  000A54  6FCE               	movwf	(??_f_write+2)& (0+255),b
  7678  000A56  0E00               	movlw	0
  7679  000A58  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  7680  000A5A  6FCF               	movwf	(??_f_write+3)& (0+255),b
  7681  000A5C  0E00               	movlw	0
  7682  000A5E  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  7683  000A60  6FD0               	movwf	(??_f_write+4)& (0+255),b
  7684  000A62  0EFF               	movlw	255
  7685  000A64  25CD               	addwf	(??_f_write+1)& (0+255),w,b
  7686  000A66  6FDB               	movwf	f_write@sect& (0+255),b
  7687  000A68  0EFF               	movlw	255
  7688  000A6A  21CE               	addwfc	(??_f_write+2)& (0+255),w,b
  7689  000A6C  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  7690  000A6E  0EFF               	movlw	255
  7691  000A70  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
  7692  000A72  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  7693  000A74  0EFF               	movlw	255
  7694  000A76  21D0               	addwfc	(??_f_write+4)& (0+255),w,b
  7695  000A78  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  7696                           
  7697                           ; BSR set to: 0
  7698                           ;tff.c: 1046: if (!move_window(sect)) goto fw_error;
  7699  000A7A  C0DB  F08B         	movff	f_write@sect,move_window@sector
  7700  000A7E  C0DC  F08C         	movff	f_write@sect+1,move_window@sector+1
  7701  000A82  C0DD  F08D         	movff	f_write@sect+2,move_window@sector+2
  7702  000A86  C0DE  F08E         	movff	f_write@sect+3,move_window@sector+3
  7703  000A8A  EC49  F018         	call	_move_window	;wreg free
  7704  000A8E  0900               	iorlw	0
  7705  000A90  B4D8               	btfsc	status,2,c
  7706  000A92  D0BA               	goto	l1242
  7707                           
  7708                           ;tff.c: 1047: wcnt = 512U - (fp->fptr % 512U);
  7709  000A94  0EFF               	movlw	255
  7710  000A96  0100               	movlb	0	; () banked
  7711  000A98  6FCC               	movwf	??_f_write& (0+255),b
  7712  000A9A  0E01               	movlw	1
  7713  000A9C  6FCD               	movwf	(??_f_write+1)& (0+255),b
  7714  000A9E  EE20 F006          	lfsr	2,6
  7715  000AA2  51C4               	movf	f_write@fp& (0+255),w,b
  7716  000AA4  26D9               	addwf	fsr2l,f,c
  7717  000AA6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7718  000AA8  22DA               	addwfc	fsr2h,f,c
  7719  000AAA  CFDE F0CE          	movff	postinc2,??_f_write+2
  7720  000AAE  CFDD F0CF          	movff	postdec2,??_f_write+3
  7721  000AB2  51CC               	movf	??_f_write& (0+255),w,b
  7722  000AB4  17CE               	andwf	(??_f_write+2)& (0+255),f,b
  7723  000AB6  51CD               	movf	(??_f_write+1)& (0+255),w,b
  7724  000AB8  17CF               	andwf	(??_f_write+3)& (0+255),f,b
  7725  000ABA  1FCE               	comf	(??_f_write+2)& (0+255),f,b
  7726  000ABC  1FCF               	comf	(??_f_write+3)& (0+255),f,b
  7727  000ABE  4BCE               	infsnz	(??_f_write+2)& (0+255),f,b
  7728  000AC0  2BCF               	incf	(??_f_write+3)& (0+255),f,b
  7729  000AC2  0E00               	movlw	0
  7730  000AC4  25CE               	addwf	(??_f_write+2)& (0+255),w,b
  7731  000AC6  6FE3               	movwf	f_write@wcnt& (0+255),b
  7732  000AC8  0E02               	movlw	2
  7733  000ACA  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
  7734  000ACC  6FE4               	movwf	(f_write@wcnt+1)& (0+255),b
  7735                           
  7736                           ; BSR set to: 0
  7737                           ;tff.c: 1048: if (wcnt > btw) wcnt = btw;
  7738  000ACE  51E3               	movf	f_write@wcnt& (0+255),w,b
  7739  000AD0  5DC8               	subwf	f_write@btw& (0+255),w,b
  7740  000AD2  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7741  000AD4  59C9               	subwfb	(f_write@btw+1)& (0+255),w,b
  7742  000AD6  B0D8               	btfsc	status,0,c
  7743  000AD8  D004               	goto	l1250
  7744                           
  7745                           ; BSR set to: 0
  7746  000ADA  C0C8  F0E3         	movff	f_write@btw,f_write@wcnt
  7747  000ADE  C0C9  F0E4         	movff	f_write@btw+1,f_write@wcnt+1
  7748  000AE2                     l1250:
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;tff.c: 1049: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
  7752                           
  7753                           ; BSR set to: 0
  7754  000AE2  0EFF               	movlw	255
  7755  000AE4  6FCC               	movwf	??_f_write& (0+255),b
  7756  000AE6  0E01               	movlw	1
  7757  000AE8  6FCD               	movwf	(??_f_write+1)& (0+255),b
  7758  000AEA  EE20 F006          	lfsr	2,6
  7759  000AEE  51C4               	movf	f_write@fp& (0+255),w,b
  7760  000AF0  26D9               	addwf	fsr2l,f,c
  7761  000AF2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7762  000AF4  22DA               	addwfc	fsr2h,f,c
  7763  000AF6  CFDE F0CE          	movff	postinc2,??_f_write+2
  7764  000AFA  CFDD F0CF          	movff	postdec2,??_f_write+3
  7765  000AFE  51CC               	movf	??_f_write& (0+255),w,b
  7766  000B00  17CE               	andwf	(??_f_write+2)& (0+255),f,b
  7767  000B02  51CD               	movf	(??_f_write+1)& (0+255),w,b
  7768  000B04  17CF               	andwf	(??_f_write+3)& (0+255),f,b
  7769  000B06  0E20               	movlw	32
  7770  000B08  27CE               	addwf	(??_f_write+2)& (0+255),f,b
  7771  000B0A  0E00               	movlw	0
  7772  000B0C  23CF               	addwfc	(??_f_write+3)& (0+255),f,b
  7773  000B0E  EE20 F004          	lfsr	2,4
  7774  000B12  51C4               	movf	f_write@fp& (0+255),w,b
  7775  000B14  26D9               	addwf	fsr2l,f,c
  7776  000B16  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7777  000B18  22DA               	addwfc	fsr2h,f,c
  7778  000B1A  CFDE F0D0          	movff	postinc2,??_f_write+4
  7779  000B1E  CFDD F0D1          	movff	postdec2,??_f_write+5
  7780  000B22  51CE               	movf	(??_f_write+2)& (0+255),w,b
  7781  000B24  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  7782  000B26  6F60               	movwf	memcpy@d1& (0+255),b
  7783  000B28  51CF               	movf	(??_f_write+3)& (0+255),w,b
  7784  000B2A  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  7785  000B2C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  7786  000B2E  C0D9  F062         	movff	f_write@wbuff,memcpy@s1
  7787  000B32  C0DA  F063         	movff	f_write@wbuff+1,memcpy@s1+1
  7788  000B36  C0E3  F064         	movff	f_write@wcnt,memcpy@n
  7789  000B3A  C0E4  F065         	movff	f_write@wcnt+1,memcpy@n+1
  7790  000B3E  ECBB  F025         	call	_memcpy	;wreg free
  7791                           
  7792                           ;tff.c: 1050: fp->fs->winflag = 1;
  7793  000B42  0100               	movlb	0	; () banked
  7794  000B44  EE20 F004          	lfsr	2,4
  7795  000B48  51C4               	movf	f_write@fp& (0+255),w,b
  7796  000B4A  26D9               	addwf	fsr2l,f,c
  7797  000B4C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7798  000B4E  22DA               	addwfc	fsr2h,f,c
  7799  000B50  EE10 F01F          	lfsr	1,31
  7800  000B54  50DE               	movf	postinc2,w,c
  7801  000B56  26E1               	addwf	fsr1l,f,c
  7802  000B58  50DD               	movf	postdec2,w,c
  7803  000B5A  22E2               	addwfc	fsr1h,f,c
  7804  000B5C  0E01               	movlw	1
  7805  000B5E  6EE7               	movwf	indf1,c
  7806  000B60                     l1246:
  7807                           
  7808                           ; BSR set to: 0
  7809                           
  7810                           ; BSR set to: 0
  7811  000B60  51E3               	movf	f_write@wcnt& (0+255),w,b
  7812  000B62  27D9               	addwf	f_write@wbuff& (0+255),f,b
  7813  000B64  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7814  000B66  23DA               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  7815                           
  7816                           ; BSR set to: 0
  7817  000B68  EE20 F006          	lfsr	2,6
  7818  000B6C  51C4               	movf	f_write@fp& (0+255),w,b
  7819  000B6E  26D9               	addwf	fsr2l,f,c
  7820  000B70  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7821  000B72  22DA               	addwfc	fsr2h,f,c
  7822  000B74  51E3               	movf	f_write@wcnt& (0+255),w,b
  7823  000B76  26DE               	addwf	postinc2,f,c
  7824  000B78  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7825  000B7A  22DE               	addwfc	postinc2,f,c
  7826  000B7C  0E00               	movlw	0
  7827  000B7E  22DE               	addwfc	postinc2,f,c
  7828  000B80  22DE               	addwfc	postinc2,f,c
  7829                           
  7830                           ; BSR set to: 0
  7831  000B82  C0CA  FFD9         	movff	f_write@bw,fsr2l
  7832  000B86  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  7833  000B8A  51E3               	movf	f_write@wcnt& (0+255),w,b
  7834  000B8C  26DE               	addwf	postinc2,f,c
  7835  000B8E  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7836  000B90  22DD               	addwfc	postdec2,f,c
  7837                           
  7838                           ; BSR set to: 0
  7839  000B92  51E3               	movf	f_write@wcnt& (0+255),w,b
  7840  000B94  5FC8               	subwf	f_write@btw& (0+255),f,b
  7841  000B96  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7842  000B98  5BC9               	subwfb	(f_write@btw+1)& (0+255),f,b
  7843  000B9A                     l1230:
  7844                           
  7845                           ; BSR set to: 0
  7846                           
  7847                           ; BSR set to: 0
  7848  000B9A  51C8               	movf	f_write@btw& (0+255),w,b
  7849  000B9C  11C9               	iorwf	(f_write@btw+1)& (0+255),w,b
  7850  000B9E  A4D8               	btfss	status,2,c
  7851  000BA0  D5C1               	goto	l1231
  7852  000BA2                     u12120:
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;tff.c: 1051: }
  7856                           ;tff.c: 1053: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  7857                           
  7858                           ; BSR set to: 0
  7859  000BA2  EE20 F006          	lfsr	2,6
  7860  000BA6  51C4               	movf	f_write@fp& (0+255),w,b
  7861  000BA8  26D9               	addwf	fsr2l,f,c
  7862  000BAA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7863  000BAC  22DA               	addwfc	fsr2h,f,c
  7864  000BAE  EE10 F00A          	lfsr	1,10
  7865  000BB2  51C4               	movf	f_write@fp& (0+255),w,b
  7866  000BB4  26E1               	addwf	fsr1l,f,c
  7867  000BB6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7868  000BB8  22E2               	addwfc	fsr1h,f,c
  7869  000BBA  50DE               	movf	postinc2,w,c
  7870  000BBC  5CE6               	subwf	postinc1,w,c
  7871  000BBE  50DE               	movf	postinc2,w,c
  7872  000BC0  58E6               	subwfb	postinc1,w,c
  7873  000BC2  50DE               	movf	postinc2,w,c
  7874  000BC4  58E6               	subwfb	postinc1,w,c
  7875  000BC6  50DE               	movf	postinc2,w,c
  7876  000BC8  58E6               	subwfb	postinc1,w,c
  7877  000BCA  B0D8               	btfsc	status,0,c
  7878  000BCC  D014               	goto	l1251
  7879                           
  7880                           ; BSR set to: 0
  7881  000BCE  EE20 F006          	lfsr	2,6
  7882  000BD2  51C4               	movf	f_write@fp& (0+255),w,b
  7883  000BD4  26D9               	addwf	fsr2l,f,c
  7884  000BD6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7885  000BD8  22DA               	addwfc	fsr2h,f,c
  7886  000BDA  EE10 F00A          	lfsr	1,10
  7887  000BDE  51C4               	movf	f_write@fp& (0+255),w,b
  7888  000BE0  26E1               	addwf	fsr1l,f,c
  7889  000BE2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7890  000BE4  22E2               	addwfc	fsr1h,f,c
  7891  000BE6  CFDE FFE6          	movff	postinc2,postinc1
  7892  000BEA  CFDE FFE6          	movff	postinc2,postinc1
  7893  000BEE  CFDE FFE6          	movff	postinc2,postinc1
  7894  000BF2  CFDE FFE6          	movff	postinc2,postinc1
  7895  000BF6                     l1251:
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;tff.c: 1054: fp->flag |= 0x20;
  7899                           
  7900                           ; BSR set to: 0
  7901  000BF6  EE20 F002          	lfsr	2,2
  7902  000BFA  51C4               	movf	f_write@fp& (0+255),w,b
  7903  000BFC  26D9               	addwf	fsr2l,f,c
  7904  000BFE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7905  000C00  22DA               	addwfc	fsr2h,f,c
  7906  000C02  0E00               	movlw	0
  7907  000C04  8ADB               	bsf	plusw2,5,c
  7908                           
  7909                           ; BSR set to: 0
  7910                           ;tff.c: 1055: return res;
  7911                           ;	Return value of _f_write is never used
  7912  000C06  0012               	return	
  7913  000C08                     l1242:
  7914                           
  7915                           ;tff.c: 1058: fp->flag |= 0x80;
  7916                           
  7917                           ; BSR set to: 0
  7918  000C08  0100               	movlb	0	; () banked
  7919  000C0A  EE20 F002          	lfsr	2,2
  7920  000C0E  51C4               	movf	f_write@fp& (0+255),w,b
  7921  000C10  26D9               	addwf	fsr2l,f,c
  7922  000C12  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7923  000C14  22DA               	addwfc	fsr2h,f,c
  7924  000C16  0E00               	movlw	0
  7925  000C18  8EDB               	bsf	plusw2,7,c
  7926  000C1A  0012               	return	
  7927  000C1C                     __end_of_f_write:
  7928                           	opt stack 0
  7929                           tosu	equ	0xFFF
  7930                           tosh	equ	0xFFE
  7931                           tosl	equ	0xFFD
  7932                           pclath	equ	0xFFA
  7933                           tblptru	equ	0xFF8
  7934                           tblptrh	equ	0xFF7
  7935                           tblptrl	equ	0xFF6
  7936                           tablat	equ	0xFF5
  7937                           prodh	equ	0xFF4
  7938                           prodl	equ	0xFF3
  7939                           intcon	equ	0xFF2
  7940                           intcon2	equ	0xFF1
  7941                           intcon3	equ	0xFF0
  7942                           postinc0	equ	0xFEE
  7943                           wreg	equ	0xFE8
  7944                           indf1	equ	0xFE7
  7945                           postinc1	equ	0xFE6
  7946                           postdec1	equ	0xFE5
  7947                           plusw1	equ	0xFE3
  7948                           fsr1h	equ	0xFE2
  7949                           fsr1l	equ	0xFE1
  7950                           indf2	equ	0xFDF
  7951                           postinc2	equ	0xFDE
  7952                           postdec2	equ	0xFDD
  7953                           plusw2	equ	0xFDB
  7954                           fsr2h	equ	0xFDA
  7955                           fsr2l	equ	0xFD9
  7956                           status	equ	0xFD8
  7957                           
  7958 ;; *************** function ___llmod *****************
  7959 ;; Defined at:
  7960 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  7961 ;; Parameters:    Size  Location     Type
  7962 ;;  dividend        4    0[BANK0 ] unsigned long 
  7963 ;;  divisor         4    4[BANK0 ] unsigned long 
  7964 ;; Auto vars:     Size  Location     Type
  7965 ;;  counter         1   32[COMRAM] unsigned char 
  7966 ;; Return value:  Size  Location     Type
  7967 ;;                  4    0[BANK0 ] unsigned long 
  7968 ;; Registers used:
  7969 ;;		wreg, status,2, status,0
  7970 ;; Tracked objects:
  7971 ;;		On entry : 0/0
  7972 ;;		On exit  : 0/0
  7973 ;;		Unchanged: 0/0
  7974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7975 ;;      Params:         0       8       0       0       0       0       0       0       0
  7976 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7977 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7978 ;;      Totals:         1       8       0       0       0       0       0       0       0
  7979 ;;Total ram usage:        9 bytes
  7980 ;; Hardware stack levels used:    1
  7981 ;; Hardware stack levels required when called:    3
  7982 ;; This function calls:
  7983 ;;		Nothing
  7984 ;; This function is called by:
  7985 ;;		_fprintf
  7986 ;; This function uses a non-reentrant model
  7987 ;;
  7988                           
  7989                           	psect	text29
  7990  0047B4                     __ptext29:
  7991                           	opt stack 0
  7992  0047B4                     ___llmod:
  7993                           	opt stack 23
  7994                           
  7995                           ; BSR set to: 0
  7996                           ;incstack = 0
  7997  0047B4  0100               	movlb	0	; () banked
  7998  0047B6  5164               	movf	___llmod@divisor& (0+255),w,b
  7999  0047B8  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  8000  0047BA  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  8001  0047BC  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  8002  0047BE  B4D8               	btfsc	status,2,c
  8003  0047C0  D024               	goto	l1815
  8004                           
  8005                           ; BSR set to: 0
  8006  0047C2  0E01               	movlw	1
  8007  0047C4  6E21               	movwf	___llmod@counter,c
  8008  0047C6  D006               	goto	l1810
  8009  0047C8                     
  8010                           ; BSR set to: 0
  8011                           
  8012                           ; BSR set to: 0
  8013  0047C8  90D8               	bcf	status,0,c
  8014  0047CA  3764               	rlcf	___llmod@divisor& (0+255),f,b
  8015  0047CC  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  8016  0047CE  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  8017  0047D0  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  8018  0047D2  2A21               	incf	___llmod@counter,f,c
  8019  0047D4                     l1810:
  8020                           
  8021                           ; BSR set to: 0
  8022                           
  8023                           ; BSR set to: 0
  8024  0047D4  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  8025  0047D6  D7F8               	goto	l1811
  8026  0047D8                     u13380:
  8027                           
  8028                           ; BSR set to: 0
  8029                           
  8030                           ; BSR set to: 0
  8031                           
  8032                           ; BSR set to: 0
  8033  0047D8  5164               	movf	___llmod@divisor& (0+255),w,b
  8034  0047DA  5D60               	subwf	___llmod@dividend& (0+255),w,b
  8035  0047DC  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  8036  0047DE  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  8037  0047E0  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  8038  0047E2  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  8039  0047E4  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  8040  0047E6  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  8041  0047E8  A0D8               	btfss	status,0,c
  8042  0047EA  D008               	goto	l1814
  8043                           
  8044                           ; BSR set to: 0
  8045  0047EC  5164               	movf	___llmod@divisor& (0+255),w,b
  8046  0047EE  5F60               	subwf	___llmod@dividend& (0+255),f,b
  8047  0047F0  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  8048  0047F2  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  8049  0047F4  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  8050  0047F6  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  8051  0047F8  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  8052  0047FA  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  8053  0047FC                     l1814:
  8054                           
  8055                           ; BSR set to: 0
  8056                           
  8057                           ; BSR set to: 0
  8058  0047FC  90D8               	bcf	status,0,c
  8059  0047FE  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  8060  004800  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  8061  004802  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  8062  004804  3364               	rrcf	___llmod@divisor& (0+255),f,b
  8063                           
  8064                           ; BSR set to: 0
  8065  004806  2E21               	decfsz	___llmod@counter,f,c
  8066  004808  D7E7               	goto	u13380
  8067  00480A                     l1815:
  8068                           
  8069                           ; BSR set to: 0
  8070                           
  8071                           ; BSR set to: 0
  8072  00480A  C060  F060         	movff	___llmod@dividend,?___llmod
  8073  00480E  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  8074  004812  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  8075  004816  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  8076                           
  8077                           ; BSR set to: 0
  8078  00481A  0012               	return		;funcret
  8079  00481C                     __end_of___llmod:
  8080                           	opt stack 0
  8081                           tosu	equ	0xFFF
  8082                           tosh	equ	0xFFE
  8083                           tosl	equ	0xFFD
  8084                           pclath	equ	0xFFA
  8085                           tblptru	equ	0xFF8
  8086                           tblptrh	equ	0xFF7
  8087                           tblptrl	equ	0xFF6
  8088                           tablat	equ	0xFF5
  8089                           prodh	equ	0xFF4
  8090                           prodl	equ	0xFF3
  8091                           intcon	equ	0xFF2
  8092                           intcon2	equ	0xFF1
  8093                           intcon3	equ	0xFF0
  8094                           postinc0	equ	0xFEE
  8095                           wreg	equ	0xFE8
  8096                           indf1	equ	0xFE7
  8097                           postinc1	equ	0xFE6
  8098                           postdec1	equ	0xFE5
  8099                           plusw1	equ	0xFE3
  8100                           fsr1h	equ	0xFE2
  8101                           fsr1l	equ	0xFE1
  8102                           indf2	equ	0xFDF
  8103                           postinc2	equ	0xFDE
  8104                           postdec2	equ	0xFDD
  8105                           plusw2	equ	0xFDB
  8106                           fsr2h	equ	0xFDA
  8107                           fsr2l	equ	0xFD9
  8108                           status	equ	0xFD8
  8109                           
  8110 ;; *************** function _f_open *****************
  8111 ;; Defined at:
  8112 ;;		line 825 in file "bibliotecas/tff.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;  fp              2  119[BANK0 ] PTR struct _FIL
  8115 ;;		 -> fil(28), 
  8116 ;;  path            2  121[BANK0 ] PTR const unsigned char 
  8117 ;;		 -> STR_19(13), filename(15), 
  8118 ;;  mode            1  123[BANK0 ] unsigned char 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  dw              4   14[BANK1 ] unsigned long 
  8121 ;;  rs              2   12[BANK1 ] unsigned short 
  8122 ;;  dj             14   21[BANK1 ] struct _DIR_E
  8123 ;;  fn             12    0[BANK1 ] unsigned char [12]
  8124 ;;  dir             2   19[BANK1 ] PTR unsigned char 
  8125 ;;		 -> NULL(0), fs(544), 
  8126 ;;  res             1   18[BANK1 ] enum E155
  8127 ;; Return value:  Size  Location     Type
  8128 ;;                  1    wreg      enum E3974
  8129 ;; Registers used:
  8130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8131 ;; Tracked objects:
  8132 ;;		On entry : 0/0
  8133 ;;		On exit  : 0/0
  8134 ;;		Unchanged: 0/0
  8135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8136 ;;      Params:         0       5       0       0       0       0       0       0       0
  8137 ;;      Locals:         0       0      35       0       0       0       0       0       0
  8138 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8139 ;;      Totals:         0       9      35       0       0       0       0       0       0
  8140 ;;Total ram usage:       44 bytes
  8141 ;; Hardware stack levels used:    1
  8142 ;; Hardware stack levels required when called:   12
  8143 ;; This function calls:
  8144 ;;		_auto_mount
  8145 ;;		_get_fattime
  8146 ;;		_memcpy
  8147 ;;		_memset
  8148 ;;		_move_window
  8149 ;;		_remove_chain
  8150 ;;		_reserve_direntry
  8151 ;;		_trace_path
  8152 ;; This function is called by:
  8153 ;;		_escrita_sdcard
  8154 ;;		_sdcard_init
  8155 ;;		_leitura_sdcard
  8156 ;; This function uses a non-reentrant model
  8157 ;;
  8158                           
  8159                           	psect	text30
  8160  0019B6                     __ptext30:
  8161                           	opt stack 0
  8162  0019B6                     _f_open:
  8163                           	opt stack 15
  8164                           
  8165                           ;tff.c: 831: FRESULT res;
  8166                           ;tff.c: 832: DIR_E dj;
  8167                           ;tff.c: 833: BYTE *dir;
  8168                           ;tff.c: 834: char fn[8+3+1];
  8169                           ;tff.c: 837: fp->fs = (0);
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;incstack = 0
  8173  0019B6  0100               	movlb	0	; () banked
  8174  0019B8  EE20 F004          	lfsr	2,4
  8175  0019BC  51D7               	movf	f_open@fp& (0+255),w,b
  8176  0019BE  26D9               	addwf	fsr2l,f,c
  8177  0019C0  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8178  0019C2  22DA               	addwfc	fsr2h,f,c
  8179  0019C4  0E00               	movlw	0
  8180  0019C6  6EDE               	movwf	postinc2,c
  8181  0019C8  0E00               	movlw	0
  8182  0019CA  6EDD               	movwf	postdec2,c
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;tff.c: 839: mode &= (0x01|0x02|0x08|0x10|0x04);
  8186  0019CC  0E1F               	movlw	31
  8187  0019CE  17DB               	andwf	f_open@mode& (0+255),f,b
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;tff.c: 840: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
  8191  0019D0  0ED9               	movlw	low f_open@path
  8192  0019D2  6F93               	movwf	auto_mount@path& (0+255),b
  8193  0019D4  0E00               	movlw	high f_open@path
  8194  0019D6  6F94               	movwf	(auto_mount@path+1)& (0+255),b
  8195  0019D8  51DB               	movf	f_open@mode& (0+255),w,b
  8196  0019DA  0B1E               	andlw	30
  8197  0019DC  6F95               	movwf	auto_mount@chk_wp& (0+255),b
  8198  0019DE  EC0E  F006         	call	_auto_mount	;wreg free
  8199  0019E2  0101               	movlb	1	; () banked
  8200  0019E4  6FDE               	movwf	f_open@res& (0+255),b
  8201                           
  8202                           ; BSR set to: 1
  8203                           ;tff.c: 845: if (res != FR_OK) return res;
  8204  0019E6  51DE               	movf	f_open@res& (0+255),w,b
  8205  0019E8  B4D8               	btfsc	status,2,c
  8206  0019EA  D002               	goto	l1175
  8207                           
  8208                           ; BSR set to: 1
  8209  0019EC  51DE               	movf	f_open@res& (0+255),w,b
  8210                           
  8211                           ; BSR set to: 1
  8212  0019EE  0012               	return	
  8213  0019F0                     l1175:
  8214                           
  8215                           ; BSR set to: 1
  8216                           ;tff.c: 846: res = trace_path(&dj, fn, path, &dir);
  8217                           
  8218                           ; BSR set to: 1
  8219  0019F0  0EE1               	movlw	low f_open@dj
  8220  0019F2  0100               	movlb	0	; () banked
  8221  0019F4  6FC0               	movwf	trace_path@dj& (0+255),b
  8222  0019F6  0E01               	movlw	high f_open@dj
  8223  0019F8  6FC1               	movwf	(trace_path@dj+1)& (0+255),b
  8224  0019FA  0ECC               	movlw	low f_open@fn
  8225  0019FC  6FC2               	movwf	trace_path@fn& (0+255),b
  8226  0019FE  0E01               	movlw	high f_open@fn
  8227  001A00  6FC3               	movwf	(trace_path@fn+1)& (0+255),b
  8228  001A02  C0D9  F0C4         	movff	f_open@path,trace_path@path
  8229  001A06  C0DA  F0C5         	movff	f_open@path+1,trace_path@path+1
  8230  001A0A  0EDF               	movlw	low f_open@dir
  8231  001A0C  6FC6               	movwf	trace_path@dir& (0+255),b
  8232  001A0E  0E01               	movlw	high f_open@dir
  8233  001A10  6FC7               	movwf	(trace_path@dir+1)& (0+255),b
  8234  001A12  EC49  F010         	call	_trace_path	;wreg free
  8235  001A16  0101               	movlb	1	; () banked
  8236  001A18  6FDE               	movwf	f_open@res& (0+255),b
  8237                           
  8238                           ; BSR set to: 1
  8239                           ;tff.c: 850: if (mode & (0x08|0x10|0x04)) {
  8240  001A1A  C0DB  F0DC         	movff	f_open@mode,??_f_open
  8241  001A1E  0E1C               	movlw	28
  8242  001A20  0100               	movlb	0	; () banked
  8243  001A22  17DC               	andwf	??_f_open& (0+255),f,b
  8244  001A24  B4D8               	btfsc	status,2,c
  8245  001A26  D0F6               	goto	l1177
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;tff.c: 851: CLUST rs;
  8249                           ;tff.c: 852: DWORD dw;
  8250                           ;tff.c: 853: if (res != FR_OK) {
  8251  001A28  0101               	movlb	1	; () banked
  8252  001A2A  51DE               	movf	f_open@res& (0+255),w,b
  8253  001A2C  B4D8               	btfsc	status,2,c
  8254  001A2E  D042               	goto	l1178
  8255                           
  8256                           ; BSR set to: 1
  8257                           ;tff.c: 854: if (res != FR_NO_FILE) return res;
  8258  001A30  0E02               	movlw	2
  8259  001A32  19DE               	xorwf	f_open@res& (0+255),w,b
  8260  001A34  B4D8               	btfsc	status,2,c
  8261  001A36  D002               	goto	l1179
  8262                           
  8263                           ; BSR set to: 1
  8264  001A38  51DE               	movf	f_open@res& (0+255),w,b
  8265                           
  8266                           ; BSR set to: 1
  8267  001A3A  0012               	return	
  8268  001A3C                     l1179:
  8269                           
  8270                           ; BSR set to: 1
  8271                           ;tff.c: 855: res = reserve_direntry(&dj, &dir);
  8272                           
  8273                           ; BSR set to: 1
  8274  001A3C  0EE1               	movlw	low f_open@dj
  8275  001A3E  0100               	movlb	0	; () banked
  8276  001A40  6FC4               	movwf	reserve_direntry@dj& (0+255),b
  8277  001A42  0E01               	movlw	high f_open@dj
  8278  001A44  6FC5               	movwf	(reserve_direntry@dj+1)& (0+255),b
  8279  001A46  0EDF               	movlw	low f_open@dir
  8280  001A48  6FC6               	movwf	reserve_direntry@dir& (0+255),b
  8281  001A4A  0E01               	movlw	high f_open@dir
  8282  001A4C  6FC7               	movwf	(reserve_direntry@dir+1)& (0+255),b
  8283  001A4E  EC9F  F011         	call	_reserve_direntry	;wreg free
  8284  001A52  0101               	movlb	1	; () banked
  8285  001A54  6FDE               	movwf	f_open@res& (0+255),b
  8286                           
  8287                           ; BSR set to: 1
  8288                           ;tff.c: 856: if (res != FR_OK) return res;
  8289  001A56  51DE               	movf	f_open@res& (0+255),w,b
  8290  001A58  B4D8               	btfsc	status,2,c
  8291  001A5A  D002               	goto	l1180
  8292                           
  8293                           ; BSR set to: 1
  8294  001A5C  51DE               	movf	f_open@res& (0+255),w,b
  8295                           
  8296                           ; BSR set to: 1
  8297  001A5E  0012               	return	
  8298  001A60                     l1180:
  8299                           
  8300                           ; BSR set to: 1
  8301                           ;tff.c: 857: memset(dir, 0, 32);
  8302                           
  8303                           ; BSR set to: 1
  8304  001A60  C1DF  F060         	movff	f_open@dir,memset@p1
  8305  001A64  C1E0  F061         	movff	f_open@dir+1,memset@p1+1
  8306  001A68  0E00               	movlw	0
  8307  001A6A  0100               	movlb	0	; () banked
  8308  001A6C  6F63               	movwf	(memset@c+1)& (0+255),b
  8309  001A6E  0E00               	movlw	0
  8310  001A70  6F62               	movwf	memset@c& (0+255),b
  8311  001A72  0E00               	movlw	0
  8312  001A74  6F65               	movwf	(memset@n+1)& (0+255),b
  8313  001A76  0E20               	movlw	32
  8314  001A78  6F64               	movwf	memset@n& (0+255),b
  8315  001A7A  ECDE  F026         	call	_memset	;wreg free
  8316                           
  8317                           ;tff.c: 858: memcpy(&dir[0], fn, 8+3);
  8318  001A7E  C1DF  F060         	movff	f_open@dir,memcpy@d1
  8319  001A82  C1E0  F061         	movff	f_open@dir+1,memcpy@d1+1
  8320  001A86  0ECC               	movlw	low f_open@fn
  8321  001A88  0100               	movlb	0	; () banked
  8322  001A8A  6F62               	movwf	memcpy@s1& (0+255),b
  8323  001A8C  0E01               	movlw	high f_open@fn
  8324  001A8E  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  8325  001A90  0E00               	movlw	0
  8326  001A92  6F65               	movwf	(memcpy@n+1)& (0+255),b
  8327  001A94  0E0B               	movlw	11
  8328  001A96  6F64               	movwf	memcpy@n& (0+255),b
  8329  001A98  ECBB  F025         	call	_memcpy	;wreg free
  8330                           
  8331                           ;tff.c: 859: dir[12] = fn[11];
  8332  001A9C  0101               	movlb	1	; () banked
  8333  001A9E  EE20 F00C          	lfsr	2,12
  8334  001AA2  51DF               	movf	f_open@dir& (0+255),w,b
  8335  001AA4  26D9               	addwf	fsr2l,f,c
  8336  001AA6  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8337  001AA8  22DA               	addwfc	fsr2h,f,c
  8338  001AAA  C1D7  FFDF         	movff	f_open@fn+11,indf2
  8339                           
  8340                           ; BSR set to: 1
  8341                           ;tff.c: 860: mode |= 0x08;
  8342  001AAE  0100               	movlb	0	; () banked
  8343  001AB0  87DB               	bsf	f_open@mode& (0+255),3,b
  8344                           
  8345                           ;tff.c: 861: }
  8346  001AB2  D080               	goto	l1186
  8347  001AB4                     l1178:
  8348                           
  8349                           ; BSR set to: 1
  8350                           ;tff.c: 862: else {
  8351                           ;tff.c: 863: if (mode & 0x04)
  8352  001AB4  0100               	movlb	0	; () banked
  8353  001AB6  A5DB               	btfss	f_open@mode& (0+255),2,b
  8354  001AB8  D002               	goto	l1182
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;tff.c: 864: return FR_EXIST;
  8358  001ABA  0E07               	movlw	7
  8359                           
  8360                           ; BSR set to: 0
  8361  001ABC  0012               	return	
  8362  001ABE                     l1182:
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;tff.c: 865: if (!dir || (dir[11] & (0x01|0x10)))
  8366                           
  8367                           ; BSR set to: 0
  8368  001ABE  0101               	movlb	1	; () banked
  8369  001AC0  51DF               	movf	f_open@dir& (0+255),w,b
  8370  001AC2  11E0               	iorwf	(f_open@dir+1)& (0+255),w,b
  8371  001AC4  B4D8               	btfsc	status,2,c
  8372  001AC6  D00D               	goto	u13500
  8373                           
  8374                           ; BSR set to: 1
  8375  001AC8  EE20 F00B          	lfsr	2,11
  8376  001ACC  51DF               	movf	f_open@dir& (0+255),w,b
  8377  001ACE  26D9               	addwf	fsr2l,f,c
  8378  001AD0  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8379  001AD2  22DA               	addwfc	fsr2h,f,c
  8380  001AD4  50DF               	movf	indf2,w,c
  8381  001AD6  0100               	movlb	0	; () banked
  8382  001AD8  6FDC               	movwf	??_f_open& (0+255),b
  8383  001ADA  0E11               	movlw	17
  8384  001ADC  17DC               	andwf	??_f_open& (0+255),f,b
  8385  001ADE  B4D8               	btfsc	status,2,c
  8386  001AE0  D002               	goto	l1183
  8387  001AE2                     u13500:
  8388                           
  8389                           ;tff.c: 866: return FR_DENIED;
  8390                           
  8391                           ; BSR set to: 0
  8392  001AE2  0E06               	movlw	6
  8393  001AE4  0012               	return	
  8394  001AE6                     l1183:
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;tff.c: 867: if (mode & 0x08) {
  8398  001AE6  A7DB               	btfss	f_open@mode& (0+255),3,b
  8399  001AE8  D065               	goto	l1186
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;tff.c: 872: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  8403  001AEA  0101               	movlb	1	; () banked
  8404  001AEC  EE20 F01A          	lfsr	2,26
  8405  001AF0  51DF               	movf	f_open@dir& (0+255),w,b
  8406  001AF2  26D9               	addwf	fsr2l,f,c
  8407  001AF4  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8408  001AF6  22DA               	addwfc	fsr2h,f,c
  8409  001AF8  CFDE F1D8          	movff	postinc2,f_open@rs
  8410  001AFC  CFDD F1D9          	movff	postdec2,f_open@rs+1
  8411                           
  8412                           ;tff.c: 874: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
  8413  001B00  EE20 F01A          	lfsr	2,26
  8414  001B04  51DF               	movf	f_open@dir& (0+255),w,b
  8415  001B06  26D9               	addwf	fsr2l,f,c
  8416  001B08  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8417  001B0A  22DA               	addwfc	fsr2h,f,c
  8418  001B0C  0E00               	movlw	0
  8419  001B0E  6EDE               	movwf	postinc2,c
  8420  001B10  0E00               	movlw	0
  8421  001B12  6EDD               	movwf	postdec2,c
  8422                           
  8423                           ;tff.c: 875: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
  8424  001B14  EE20 F01C          	lfsr	2,28
  8425  001B18  51DF               	movf	f_open@dir& (0+255),w,b
  8426  001B1A  26D9               	addwf	fsr2l,f,c
  8427  001B1C  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8428  001B1E  22DA               	addwfc	fsr2h,f,c
  8429  001B20  6ADE               	clrf	postinc2,c
  8430  001B22  6ADE               	clrf	postinc2,c
  8431  001B24  6ADE               	clrf	postinc2,c
  8432  001B26  6ADD               	clrf	postdec2,c
  8433                           
  8434                           ;tff.c: 876: dj.fs->winflag = 1;
  8435  001B28  EE20 F01F          	lfsr	2,31
  8436  001B2C  51E5               	movf	(f_open@dj+4)& (0+255),w,b
  8437  001B2E  26D9               	addwf	fsr2l,f,c
  8438  001B30  51E6               	movf	(f_open@dj+5)& (0+255),w,b
  8439  001B32  22DA               	addwfc	fsr2h,f,c
  8440  001B34  0E01               	movlw	1
  8441  001B36  6EDF               	movwf	indf2,c
  8442                           
  8443                           ;tff.c: 877: dw = dj.fs->winsect;
  8444  001B38  EE20 F004          	lfsr	2,4
  8445  001B3C  51E5               	movf	(f_open@dj+4)& (0+255),w,b
  8446  001B3E  26D9               	addwf	fsr2l,f,c
  8447  001B40  51E6               	movf	(f_open@dj+5)& (0+255),w,b
  8448  001B42  22DA               	addwfc	fsr2h,f,c
  8449  001B44  CFDE F1DA          	movff	postinc2,f_open@dw
  8450  001B48  CFDE F1DB          	movff	postinc2,f_open@dw+1
  8451  001B4C  CFDE F1DC          	movff	postinc2,f_open@dw+2
  8452  001B50  CFDE F1DD          	movff	postinc2,f_open@dw+3
  8453                           
  8454                           ; BSR set to: 1
  8455                           ;tff.c: 878: if (!remove_chain(rs) || !move_window(dw))
  8456  001B54  C1D8  F0B6         	movff	f_open@rs,remove_chain@clust
  8457  001B58  C1D9  F0B7         	movff	f_open@rs+1,remove_chain@clust+1
  8458  001B5C  ECB6  F01F         	call	_remove_chain	;wreg free
  8459  001B60  0900               	iorlw	0
  8460  001B62  B4D8               	btfsc	status,2,c
  8461  001B64  D00D               	goto	u13530
  8462  001B66  C1DA  F08B         	movff	f_open@dw,move_window@sector
  8463  001B6A  C1DB  F08C         	movff	f_open@dw+1,move_window@sector+1
  8464  001B6E  C1DC  F08D         	movff	f_open@dw+2,move_window@sector+2
  8465  001B72  C1DD  F08E         	movff	f_open@dw+3,move_window@sector+3
  8466  001B76  EC49  F018         	call	_move_window	;wreg free
  8467  001B7A  0900               	iorlw	0
  8468  001B7C  A4D8               	btfss	status,2,c
  8469  001B7E  D002               	goto	l1187
  8470  001B80                     u13530:
  8471                           
  8472                           ;tff.c: 879: return FR_RW_ERROR;
  8473  001B80  0E08               	movlw	8
  8474  001B82  0012               	return	
  8475  001B84                     l1187:
  8476                           
  8477                           ;tff.c: 880: dj.fs->last_clust = rs - 1;
  8478  001B84  0EFF               	movlw	255
  8479  001B86  0100               	movlb	0	; () banked
  8480  001B88  6FDC               	movwf	??_f_open& (0+255),b
  8481  001B8A  0EFF               	movlw	255
  8482  001B8C  6FDD               	movwf	(??_f_open+1)& (0+255),b
  8483  001B8E  C1D8  F0DE         	movff	f_open@rs,??_f_open+2
  8484  001B92  C1D9  F0DF         	movff	f_open@rs+1,??_f_open+3
  8485  001B96  51DC               	movf	??_f_open& (0+255),w,b
  8486  001B98  27DE               	addwf	(??_f_open+2)& (0+255),f,b
  8487  001B9A  51DD               	movf	(??_f_open+1)& (0+255),w,b
  8488  001B9C  23DF               	addwfc	(??_f_open+3)& (0+255),f,b
  8489  001B9E  0101               	movlb	1	; () banked
  8490  001BA0  EE20 F018          	lfsr	2,24
  8491  001BA4  51E5               	movf	(f_open@dj+4)& (0+255),w,b
  8492  001BA6  26D9               	addwf	fsr2l,f,c
  8493  001BA8  51E6               	movf	(f_open@dj+5)& (0+255),w,b
  8494  001BAA  22DA               	addwfc	fsr2h,f,c
  8495  001BAC  C0DE  FFDE         	movff	??_f_open+2,postinc2
  8496  001BB0  C0DF  FFDD         	movff	??_f_open+3,postdec2
  8497  001BB4                     l1186:
  8498                           
  8499                           ;tff.c: 881: }
  8500                           ;tff.c: 882: }
  8501                           ;tff.c: 883: if (mode & 0x08) {
  8502                           
  8503                           ; BSR set to: 1
  8504                           
  8505                           ; BSR set to: 1
  8506  001BB4  0100               	movlb	0	; () banked
  8507  001BB6  A7DB               	btfss	f_open@mode& (0+255),3,b
  8508  001BB8  D04F               	goto	l1196
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;tff.c: 884: dir[11] = 0;
  8512  001BBA  0101               	movlb	1	; () banked
  8513  001BBC  EE20 F00B          	lfsr	2,11
  8514  001BC0  51DF               	movf	f_open@dir& (0+255),w,b
  8515  001BC2  26D9               	addwf	fsr2l,f,c
  8516  001BC4  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8517  001BC6  22DA               	addwfc	fsr2h,f,c
  8518  001BC8  0E00               	movlw	0
  8519  001BCA  6EDF               	movwf	indf2,c
  8520                           
  8521                           ; BSR set to: 1
  8522                           ;tff.c: 885: dw = get_fattime();
  8523  001BCC  ECB0  F01D         	call	_get_fattime	;wreg free
  8524  001BD0  C060  F1DA         	movff	?_get_fattime,f_open@dw
  8525  001BD4  C061  F1DB         	movff	?_get_fattime+1,f_open@dw+1
  8526  001BD8  C062  F1DC         	movff	?_get_fattime+2,f_open@dw+2
  8527  001BDC  C063  F1DD         	movff	?_get_fattime+3,f_open@dw+3
  8528                           
  8529                           ;tff.c: 886: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
  8530  001BE0  0101               	movlb	1	; () banked
  8531  001BE2  EE20 F00E          	lfsr	2,14
  8532  001BE6  51DF               	movf	f_open@dir& (0+255),w,b
  8533  001BE8  26D9               	addwf	fsr2l,f,c
  8534  001BEA  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8535  001BEC  22DA               	addwfc	fsr2h,f,c
  8536  001BEE  C1DA  FFDE         	movff	f_open@dw,postinc2
  8537  001BF2  C1DB  FFDE         	movff	f_open@dw+1,postinc2
  8538  001BF6  C1DC  FFDE         	movff	f_open@dw+2,postinc2
  8539  001BFA  C1DD  FFDE         	movff	f_open@dw+3,postinc2
  8540                           
  8541                           ; BSR set to: 1
  8542                           ;tff.c: 887: dj.fs->winflag = 1;
  8543  001BFE  EE20 F01F          	lfsr	2,31
  8544  001C02  51E5               	movf	(f_open@dj+4)& (0+255),w,b
  8545  001C04  26D9               	addwf	fsr2l,f,c
  8546  001C06  51E6               	movf	(f_open@dj+5)& (0+255),w,b
  8547  001C08  22DA               	addwfc	fsr2h,f,c
  8548  001C0A  0E01               	movlw	1
  8549  001C0C  6EDF               	movwf	indf2,c
  8550                           
  8551                           ; BSR set to: 1
  8552                           ;tff.c: 888: mode |= 0x20;
  8553  001C0E  0100               	movlb	0	; () banked
  8554  001C10  8BDB               	bsf	f_open@mode& (0+255),5,b
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;tff.c: 889: }
  8558                           ;tff.c: 890: }
  8559  001C12  D022               	goto	l1196
  8560  001C14                     l1177:
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;tff.c: 892: else {
  8564                           ;tff.c: 894: if (res != FR_OK) return res;
  8565                           
  8566                           ; BSR set to: 0
  8567  001C14  0101               	movlb	1	; () banked
  8568  001C16  51DE               	movf	f_open@res& (0+255),w,b
  8569  001C18  B4D8               	btfsc	status,2,c
  8570  001C1A  D002               	goto	l1192
  8571                           
  8572                           ; BSR set to: 1
  8573  001C1C  51DE               	movf	f_open@res& (0+255),w,b
  8574                           
  8575                           ; BSR set to: 1
  8576  001C1E  0012               	return	
  8577  001C20                     l1192:
  8578                           
  8579                           ; BSR set to: 1
  8580                           ;tff.c: 895: if (!dir || (dir[11] & 0x10))
  8581                           
  8582                           ; BSR set to: 1
  8583  001C20  51DF               	movf	f_open@dir& (0+255),w,b
  8584  001C22  11E0               	iorwf	(f_open@dir+1)& (0+255),w,b
  8585  001C24  B4D8               	btfsc	status,2,c
  8586  001C26  D008               	goto	u13570
  8587                           
  8588                           ; BSR set to: 1
  8589  001C28  EE20 F00B          	lfsr	2,11
  8590  001C2C  51DF               	movf	f_open@dir& (0+255),w,b
  8591  001C2E  26D9               	addwf	fsr2l,f,c
  8592  001C30  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8593  001C32  22DA               	addwfc	fsr2h,f,c
  8594  001C34  A8DF               	btfss	indf2,4,c
  8595  001C36  D002               	goto	l1193
  8596  001C38                     u13570:
  8597                           
  8598                           ; BSR set to: 1
  8599                           ;tff.c: 896: return FR_NO_FILE;
  8600                           
  8601                           ; BSR set to: 1
  8602  001C38  0E02               	movlw	2
  8603                           
  8604                           ; BSR set to: 1
  8605  001C3A  0012               	return	
  8606  001C3C                     l1193:
  8607                           
  8608                           ; BSR set to: 1
  8609                           ;tff.c: 898: if ((mode & 0x02) && (dir[11] & 0x01))
  8610  001C3C  0100               	movlb	0	; () banked
  8611  001C3E  A3DB               	btfss	f_open@mode& (0+255),1,b
  8612  001C40  D00B               	goto	l1196
  8613                           
  8614                           ; BSR set to: 0
  8615  001C42  0101               	movlb	1	; () banked
  8616  001C44  EE20 F00B          	lfsr	2,11
  8617  001C48  51DF               	movf	f_open@dir& (0+255),w,b
  8618  001C4A  26D9               	addwf	fsr2l,f,c
  8619  001C4C  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8620  001C4E  22DA               	addwfc	fsr2h,f,c
  8621  001C50  A0DF               	btfss	indf2,0,c
  8622  001C52  D002               	goto	l1196
  8623                           
  8624                           ; BSR set to: 1
  8625                           ;tff.c: 899: return FR_DENIED;
  8626  001C54  0E06               	movlw	6
  8627                           
  8628                           ; BSR set to: 1
  8629  001C56  0012               	return	
  8630  001C58                     l1196:
  8631                           
  8632                           ;tff.c: 900: }
  8633                           ;tff.c: 901: fp->dir_sect = dj.fs->winsect;
  8634                           
  8635                           ; BSR set to: 1
  8636                           
  8637                           ; BSR set to: 1
  8638  001C58  0101               	movlb	1	; () banked
  8639  001C5A  EE20 F004          	lfsr	2,4
  8640  001C5E  51E5               	movf	(f_open@dj+4)& (0+255),w,b
  8641  001C60  26D9               	addwf	fsr2l,f,c
  8642  001C62  51E6               	movf	(f_open@dj+5)& (0+255),w,b
  8643  001C64  22DA               	addwfc	fsr2h,f,c
  8644  001C66  0100               	movlb	0	; () banked
  8645  001C68  EE10 F016          	lfsr	1,22
  8646  001C6C  51D7               	movf	f_open@fp& (0+255),w,b
  8647  001C6E  26E1               	addwf	fsr1l,f,c
  8648  001C70  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8649  001C72  22E2               	addwfc	fsr1h,f,c
  8650  001C74  CFDE FFE6          	movff	postinc2,postinc1
  8651  001C78  CFDE FFE6          	movff	postinc2,postinc1
  8652  001C7C  CFDE FFE6          	movff	postinc2,postinc1
  8653  001C80  CFDE FFE6          	movff	postinc2,postinc1
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;tff.c: 902: fp->dir_ptr = dir;
  8657  001C84  EE20 F01A          	lfsr	2,26
  8658  001C88  51D7               	movf	f_open@fp& (0+255),w,b
  8659  001C8A  26D9               	addwf	fsr2l,f,c
  8660  001C8C  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8661  001C8E  22DA               	addwfc	fsr2h,f,c
  8662  001C90  C1DF  FFDE         	movff	f_open@dir,postinc2
  8663  001C94  C1E0  FFDD         	movff	f_open@dir+1,postdec2
  8664                           
  8665                           ; BSR set to: 0
  8666                           ;tff.c: 904: fp->flag = mode;
  8667  001C98  EE20 F002          	lfsr	2,2
  8668  001C9C  51D7               	movf	f_open@fp& (0+255),w,b
  8669  001C9E  26D9               	addwf	fsr2l,f,c
  8670  001CA0  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8671  001CA2  22DA               	addwfc	fsr2h,f,c
  8672  001CA4  C0DB  FFDF         	movff	f_open@mode,indf2
  8673                           
  8674                           ;tff.c: 905: fp->org_clust =
  8675                           ;tff.c: 909: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  8676  001CA8  0101               	movlb	1	; () banked
  8677  001CAA  EE20 F01A          	lfsr	2,26
  8678  001CAE  51DF               	movf	f_open@dir& (0+255),w,b
  8679  001CB0  26D9               	addwf	fsr2l,f,c
  8680  001CB2  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8681  001CB4  22DA               	addwfc	fsr2h,f,c
  8682  001CB6  0100               	movlb	0	; () banked
  8683  001CB8  EE10 F00E          	lfsr	1,14
  8684  001CBC  51D7               	movf	f_open@fp& (0+255),w,b
  8685  001CBE  26E1               	addwf	fsr1l,f,c
  8686  001CC0  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8687  001CC2  22E2               	addwfc	fsr1h,f,c
  8688  001CC4  CFDE FFE6          	movff	postinc2,postinc1
  8689  001CC8  CFDD FFE5          	movff	postdec2,postdec1
  8690                           
  8691                           ;tff.c: 910: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
  8692  001CCC  0101               	movlb	1	; () banked
  8693  001CCE  EE20 F01C          	lfsr	2,28
  8694  001CD2  51DF               	movf	f_open@dir& (0+255),w,b
  8695  001CD4  26D9               	addwf	fsr2l,f,c
  8696  001CD6  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8697  001CD8  22DA               	addwfc	fsr2h,f,c
  8698  001CDA  0100               	movlb	0	; () banked
  8699  001CDC  EE10 F00A          	lfsr	1,10
  8700  001CE0  51D7               	movf	f_open@fp& (0+255),w,b
  8701  001CE2  26E1               	addwf	fsr1l,f,c
  8702  001CE4  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8703  001CE6  22E2               	addwfc	fsr1h,f,c
  8704  001CE8  CFDE FFE6          	movff	postinc2,postinc1
  8705  001CEC  CFDE FFE6          	movff	postinc2,postinc1
  8706  001CF0  CFDE FFE6          	movff	postinc2,postinc1
  8707  001CF4  CFDE FFE6          	movff	postinc2,postinc1
  8708                           
  8709                           ; BSR set to: 0
  8710                           ;tff.c: 911: fp->fptr = 0; fp->csect = 255;
  8711  001CF8  EE20 F006          	lfsr	2,6
  8712  001CFC  51D7               	movf	f_open@fp& (0+255),w,b
  8713  001CFE  26D9               	addwf	fsr2l,f,c
  8714  001D00  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8715  001D02  22DA               	addwfc	fsr2h,f,c
  8716  001D04  6ADE               	clrf	postinc2,c
  8717  001D06  6ADE               	clrf	postinc2,c
  8718  001D08  6ADE               	clrf	postinc2,c
  8719  001D0A  6ADD               	clrf	postdec2,c
  8720                           
  8721                           ; BSR set to: 0
  8722  001D0C  EE20 F003          	lfsr	2,3
  8723  001D10  51D7               	movf	f_open@fp& (0+255),w,b
  8724  001D12  26D9               	addwf	fsr2l,f,c
  8725  001D14  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8726  001D16  22DA               	addwfc	fsr2h,f,c
  8727  001D18  0EFF               	movlw	255
  8728  001D1A  6EDF               	movwf	indf2,c
  8729                           
  8730                           ; BSR set to: 0
  8731                           ;tff.c: 912: fp->fs = dj.fs; fp->id = dj.fs->id;
  8732  001D1C  EE20 F004          	lfsr	2,4
  8733  001D20  51D7               	movf	f_open@fp& (0+255),w,b
  8734  001D22  26D9               	addwf	fsr2l,f,c
  8735  001D24  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8736  001D26  22DA               	addwfc	fsr2h,f,c
  8737  001D28  C1E5  FFDE         	movff	f_open@dj+4,postinc2
  8738  001D2C  C1E6  FFDD         	movff	f_open@dj+5,postdec2
  8739                           
  8740                           ; BSR set to: 0
  8741  001D30  C1E5  FFD9         	movff	f_open@dj+4,fsr2l
  8742  001D34  C1E6  FFDA         	movff	f_open@dj+5,fsr2h
  8743  001D38  C0D7  FFE1         	movff	f_open@fp,fsr1l
  8744  001D3C  C0D8  FFE2         	movff	f_open@fp+1,fsr1h
  8745  001D40  CFDE FFE6          	movff	postinc2,postinc1
  8746  001D44  CFDD FFE5          	movff	postdec2,postdec1
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;tff.c: 914: return FR_OK;
  8750  001D48  0E00               	movlw	0
  8751  001D4A  0012               	return	
  8752  001D4C                     __end_of_f_open:
  8753                           	opt stack 0
  8754                           tosu	equ	0xFFF
  8755                           tosh	equ	0xFFE
  8756                           tosl	equ	0xFFD
  8757                           pclath	equ	0xFFA
  8758                           tblptru	equ	0xFF8
  8759                           tblptrh	equ	0xFF7
  8760                           tblptrl	equ	0xFF6
  8761                           tablat	equ	0xFF5
  8762                           prodh	equ	0xFF4
  8763                           prodl	equ	0xFF3
  8764                           intcon	equ	0xFF2
  8765                           intcon2	equ	0xFF1
  8766                           intcon3	equ	0xFF0
  8767                           postinc0	equ	0xFEE
  8768                           wreg	equ	0xFE8
  8769                           indf1	equ	0xFE7
  8770                           postinc1	equ	0xFE6
  8771                           postdec1	equ	0xFE5
  8772                           plusw1	equ	0xFE3
  8773                           fsr1h	equ	0xFE2
  8774                           fsr1l	equ	0xFE1
  8775                           indf2	equ	0xFDF
  8776                           postinc2	equ	0xFDE
  8777                           postdec2	equ	0xFDD
  8778                           plusw2	equ	0xFDB
  8779                           fsr2h	equ	0xFDA
  8780                           fsr2l	equ	0xFD9
  8781                           status	equ	0xFD8
  8782                           
  8783 ;; *************** function _trace_path *****************
  8784 ;; Defined at:
  8785 ;;		line 501 in file "bibliotecas/tff.c"
  8786 ;; Parameters:    Size  Location     Type
  8787 ;;  dj              2   96[BANK0 ] PTR struct _DIR_E
  8788 ;;		 -> f_open@dj(14), 
  8789 ;;  fn              2   98[BANK0 ] PTR unsigned char 
  8790 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  8791 ;;  path            2  100[BANK0 ] PTR const unsigned char 
  8792 ;;		 -> STR_19(13), filename(15), 
  8793 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
  8794 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
  8795 ;; Auto vars:     Size  Location     Type
  8796 ;;  dptr            2  117[BANK0 ] PTR unsigned char 
  8797 ;;		 -> fs.win(512), NULL(0), fs(544), 
  8798 ;;  clust           2  114[BANK0 ] unsigned short 
  8799 ;;  fs              2  112[BANK0 ] PTR struct _FATFS
  8800 ;;		 -> NULL(0), fs(544), 
  8801 ;;  ds              1  116[BANK0 ] unsigned char 
  8802 ;; Return value:  Size  Location     Type
  8803 ;;                  1    wreg      enum E155
  8804 ;; Registers used:
  8805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8806 ;; Tracked objects:
  8807 ;;		On entry : 0/0
  8808 ;;		On exit  : 0/0
  8809 ;;		Unchanged: 0/0
  8810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8811 ;;      Params:         0       8       0       0       0       0       0       0       0
  8812 ;;      Locals:         0      11       0       0       0       0       0       0       0
  8813 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8814 ;;      Totals:         0      23       0       0       0       0       0       0       0
  8815 ;;Total ram usage:       23 bytes
  8816 ;; Hardware stack levels used:    1
  8817 ;; Hardware stack levels required when called:   11
  8818 ;; This function calls:
  8819 ;;		_clust2sect
  8820 ;;		_make_dirfile
  8821 ;;		_memcmp
  8822 ;;		_move_window
  8823 ;;		_next_dir_entry
  8824 ;; This function is called by:
  8825 ;;		_f_open
  8826 ;;		_f_opendir
  8827 ;; This function uses a non-reentrant model
  8828 ;;
  8829                           
  8830                           	psect	text31
  8831  002092                     __ptext31:
  8832                           	opt stack 0
  8833  002092                     _trace_path:
  8834                           	opt stack 15
  8835                           
  8836                           ;tff.c: 508: CLUST clust;
  8837                           ;tff.c: 509: char ds;
  8838                           ;tff.c: 510: BYTE *dptr = (0);
  8839                           
  8840                           ;incstack = 0
  8841  002092  0E00               	movlw	0
  8842  002094  0100               	movlb	0	; () banked
  8843  002096  6FD5               	movwf	trace_path@dptr& (0+255),b
  8844  002098  0E00               	movlw	0
  8845  00209A  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
  8846                           
  8847                           ;tff.c: 511: FATFS *fs = FatFs;
  8848  00209C  C0FD  F0D0         	movff	_FatFs,trace_path@fs
  8849  0020A0  C0FE  F0D1         	movff	_FatFs+1,trace_path@fs+1
  8850                           
  8851                           ; BSR set to: 0
  8852                           ;tff.c: 514: dj->fs = fs;
  8853  0020A4  EE20 F004          	lfsr	2,4
  8854  0020A8  51C0               	movf	trace_path@dj& (0+255),w,b
  8855  0020AA  26D9               	addwf	fsr2l,f,c
  8856  0020AC  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8857  0020AE  22DA               	addwfc	fsr2h,f,c
  8858  0020B0  C0D0  FFDE         	movff	trace_path@fs,postinc2
  8859  0020B4  C0D1  FFDD         	movff	trace_path@fs+1,postdec2
  8860                           
  8861                           ; BSR set to: 0
  8862                           ;tff.c: 515: clust = fs->dirbase;
  8863  0020B8  EE20 F00C          	lfsr	2,12
  8864  0020BC  51D0               	movf	trace_path@fs& (0+255),w,b
  8865  0020BE  26D9               	addwf	fsr2l,f,c
  8866  0020C0  51D1               	movf	(trace_path@fs+1)& (0+255),w,b
  8867  0020C2  22DA               	addwfc	fsr2h,f,c
  8868  0020C4  CFDE F0D2          	movff	postinc2,trace_path@clust
  8869  0020C8  CFDD F0D3          	movff	postdec2,trace_path@clust+1
  8870                           
  8871                           ; BSR set to: 0
  8872                           ;tff.c: 522: {
  8873                           ;tff.c: 523: dj->clust = dj->sclust = 0;
  8874  0020CC  EE20 F006          	lfsr	2,6
  8875  0020D0  51C0               	movf	trace_path@dj& (0+255),w,b
  8876  0020D2  26D9               	addwf	fsr2l,f,c
  8877  0020D4  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8878  0020D6  22DA               	addwfc	fsr2h,f,c
  8879  0020D8  0E00               	movlw	0
  8880  0020DA  6EDE               	movwf	postinc2,c
  8881  0020DC  0E00               	movlw	0
  8882  0020DE  6EDD               	movwf	postdec2,c
  8883  0020E0  EE10 F008          	lfsr	1,8
  8884  0020E4  51C0               	movf	trace_path@dj& (0+255),w,b
  8885  0020E6  26E1               	addwf	fsr1l,f,c
  8886  0020E8  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8887  0020EA  22E2               	addwfc	fsr1h,f,c
  8888  0020EC  CFDE FFE6          	movff	postinc2,postinc1
  8889  0020F0  CFDD FFE5          	movff	postdec2,postdec1
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;tff.c: 524: dj->sect = clust;
  8893  0020F4  51D2               	movf	trace_path@clust& (0+255),w,b
  8894  0020F6  6FC8               	movwf	??_trace_path& (0+255),b
  8895  0020F8  51D3               	movf	(trace_path@clust+1)& (0+255),w,b
  8896  0020FA  6FC9               	movwf	(??_trace_path+1)& (0+255),b
  8897  0020FC  6BCA               	clrf	(??_trace_path+2)& (0+255),b
  8898  0020FE  6BCB               	clrf	(??_trace_path+3)& (0+255),b
  8899  002100  EE20 F00A          	lfsr	2,10
  8900  002104  51C0               	movf	trace_path@dj& (0+255),w,b
  8901  002106  26D9               	addwf	fsr2l,f,c
  8902  002108  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8903  00210A  22DA               	addwfc	fsr2h,f,c
  8904  00210C  C0C8  FFDE         	movff	??_trace_path,postinc2
  8905  002110  C0C9  FFDE         	movff	??_trace_path+1,postinc2
  8906  002114  C0CA  FFDE         	movff	??_trace_path+2,postinc2
  8907  002118  C0CB  FFDE         	movff	??_trace_path+3,postinc2
  8908                           
  8909                           ; BSR set to: 0
  8910                           ;tff.c: 525: }
  8911                           ;tff.c: 526: dj->index = 0;
  8912  00211C  EE20 F002          	lfsr	2,2
  8913  002120  51C0               	movf	trace_path@dj& (0+255),w,b
  8914  002122  26D9               	addwf	fsr2l,f,c
  8915  002124  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8916  002126  22DA               	addwfc	fsr2h,f,c
  8917  002128  0E00               	movlw	0
  8918  00212A  6EDE               	movwf	postinc2,c
  8919  00212C  0E00               	movlw	0
  8920  00212E  6EDD               	movwf	postdec2,c
  8921                           
  8922                           ; BSR set to: 0
  8923                           ;tff.c: 528: if (*path == '\0') {
  8924  002130  C0C4  FFF6         	movff	trace_path@path,tblptrl
  8925  002134  C0C5  FFF7         	movff	trace_path@path+1,tblptrh
  8926  002138  6AF8               	clrf	tblptru,c
  8927  00213A  0E07               	movlw	(high __ramtop+-1)
  8928  00213C  64F7               	cpfsgt	tblptrh,c
  8929  00213E  D003               	bra	u12847
  8930  002140  0008               	tblrd		*
  8931  002142  50F5               	movf	tablat,w,c
  8932  002144  D005               	bra	u12840
  8933  002146                     u12847:
  8934  002146  CFF6 FFE9          	movff	tblptrl,fsr0l
  8935  00214A  CFF7 FFEA          	movff	tblptrh,fsr0h
  8936  00214E  50EF               	movf	indf0,w,c
  8937  002150                     u12840:
  8938  002150  0900               	iorlw	0
  8939  002152  A4D8               	btfss	status,2,c
  8940  002154  D00A               	goto	l1087
  8941                           
  8942                           ;tff.c: 529: *dir = (0); return FR_OK;
  8943  002156  C0C6  FFD9         	movff	trace_path@dir,fsr2l
  8944  00215A  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
  8945  00215E  0E00               	movlw	0
  8946  002160  6EDE               	movwf	postinc2,c
  8947  002162  0E00               	movlw	0
  8948  002164  6EDD               	movwf	postdec2,c
  8949  002166  0E00               	movlw	0
  8950  002168  0012               	return	
  8951  00216A                     l1087:
  8952                           
  8953                           ;tff.c: 533: ds = make_dirfile(&path, fn);
  8954                           
  8955                           ;tff.c: 530: }
  8956                           ;tff.c: 532: for (;;) {
  8957  00216A  0EC4               	movlw	low trace_path@path
  8958  00216C  0100               	movlb	0	; () banked
  8959  00216E  6F68               	movwf	make_dirfile@path& (0+255),b
  8960  002170  0E00               	movlw	high trace_path@path
  8961  002172  6F69               	movwf	(make_dirfile@path+1)& (0+255),b
  8962  002174  C0C2  F06A         	movff	trace_path@fn,make_dirfile@dirname
  8963  002178  C0C3  F06B         	movff	trace_path@fn+1,make_dirfile@dirname+1
  8964  00217C  ECE8  F019         	call	_make_dirfile	;wreg free
  8965  002180  0100               	movlb	0	; () banked
  8966  002182  6FD4               	movwf	trace_path@ds& (0+255),b
  8967                           
  8968                           ; BSR set to: 0
  8969                           ;tff.c: 534: if (ds == 1) return FR_INVALID_NAME;
  8970  002184  05D4               	decf	trace_path@ds& (0+255),w,b
  8971  002186  A4D8               	btfss	status,2,c
  8972  002188  D002               	goto	l1090
  8973                           
  8974                           ; BSR set to: 0
  8975  00218A  0E04               	movlw	4
  8976                           
  8977                           ; BSR set to: 0
  8978  00218C  0012               	return	
  8979  00218E                     l1090:
  8980                           
  8981                           ;tff.c: 536: if (!move_window(dj->sect)) return FR_RW_ERROR;
  8982                           
  8983                           ; BSR set to: 0
  8984                           
  8985                           ;tff.c: 535: for (;;) {
  8986                           
  8987                           ; BSR set to: 0
  8988  00218E  0100               	movlb	0	; () banked
  8989  002190  EE20 F00A          	lfsr	2,10
  8990  002194  51C0               	movf	trace_path@dj& (0+255),w,b
  8991  002196  26D9               	addwf	fsr2l,f,c
  8992  002198  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8993  00219A  22DA               	addwfc	fsr2h,f,c
  8994  00219C  CFDE F08B          	movff	postinc2,move_window@sector
  8995  0021A0  CFDE F08C          	movff	postinc2,move_window@sector+1
  8996  0021A4  CFDE F08D          	movff	postinc2,move_window@sector+2
  8997  0021A8  CFDE F08E          	movff	postinc2,move_window@sector+3
  8998  0021AC  EC49  F018         	call	_move_window	;wreg free
  8999  0021B0  0900               	iorlw	0
  9000  0021B2  A4D8               	btfss	status,2,c
  9001  0021B4  D002               	goto	l1092
  9002  0021B6  0E08               	movlw	8
  9003  0021B8  0012               	return	
  9004  0021BA                     l1092:
  9005                           
  9006                           ;tff.c: 537: dptr = &fs->win[(dj->index & 15) * 32];
  9007  0021BA  0100               	movlb	0	; () banked
  9008  0021BC  EE20 F002          	lfsr	2,2
  9009  0021C0  51C0               	movf	trace_path@dj& (0+255),w,b
  9010  0021C2  26D9               	addwf	fsr2l,f,c
  9011  0021C4  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  9012  0021C6  22DA               	addwfc	fsr2h,f,c
  9013  0021C8  CFDE F0C8          	movff	postinc2,??_trace_path
  9014  0021CC  CFDD F0C9          	movff	postdec2,??_trace_path+1
  9015  0021D0  0E0F               	movlw	15
  9016  0021D2  17C8               	andwf	??_trace_path& (0+255),f,b
  9017  0021D4  0E00               	movlw	0
  9018  0021D6  17C9               	andwf	(??_trace_path+1)& (0+255),f,b
  9019  0021D8  0E05               	movlw	5
  9020  0021DA                     u12885:
  9021  0021DA  90D8               	bcf	status,0,c
  9022  0021DC  37C8               	rlcf	??_trace_path& (0+255),f,b
  9023  0021DE  37C9               	rlcf	(??_trace_path+1)& (0+255),f,b
  9024  0021E0  2EE8               	decfsz	wreg,f,c
  9025  0021E2  D7FB               	goto	u12885
  9026  0021E4  0E20               	movlw	32
  9027  0021E6  27C8               	addwf	??_trace_path& (0+255),f,b
  9028  0021E8  0E00               	movlw	0
  9029  0021EA  23C9               	addwfc	(??_trace_path+1)& (0+255),f,b
  9030  0021EC  51C8               	movf	??_trace_path& (0+255),w,b
  9031  0021EE  25D0               	addwf	trace_path@fs& (0+255),w,b
  9032  0021F0  6FD5               	movwf	trace_path@dptr& (0+255),b
  9033  0021F2  51C9               	movf	(??_trace_path+1)& (0+255),w,b
  9034  0021F4  21D1               	addwfc	(trace_path@fs+1)& (0+255),w,b
  9035  0021F6  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
  9036                           
  9037                           ; BSR set to: 0
  9038                           ;tff.c: 538: if (dptr[0] == 0)
  9039  0021F8  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
  9040  0021FC  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
  9041  002200  50DF               	movf	indf2,w,c
  9042  002202  A4D8               	btfss	status,2,c
  9043  002204  D00D               	goto	l1093
  9044                           
  9045                           ; BSR set to: 0
  9046                           ;tff.c: 539: return !ds ? FR_NO_FILE : FR_NO_PATH;
  9047  002206  51D4               	movf	trace_path@ds& (0+255),w,b
  9048  002208  B4D8               	btfsc	status,2,c
  9049  00220A  D004               	goto	l1095
  9050                           
  9051                           ; BSR set to: 0
  9052  00220C  0E00               	movlw	0
  9053  00220E  6FCD               	movwf	(_trace_path$2054+1)& (0+255),b
  9054  002210  0E03               	movlw	3
  9055  002212  D003               	goto	L6
  9056  002214                     l1095:
  9057                           
  9058                           ; BSR set to: 0
  9059                           
  9060                           ; BSR set to: 0
  9061  002214  0E00               	movlw	0
  9062  002216  6FCD               	movwf	(_trace_path$2054+1)& (0+255),b
  9063  002218  0E02               	movlw	2
  9064  00221A                     L6:
  9065  00221A  6FCC               	movwf	_trace_path$2054& (0+255),b
  9066                           
  9067                           ; BSR set to: 0
  9068  00221C  51CC               	movf	_trace_path$2054& (0+255),w,b
  9069                           
  9070                           ; BSR set to: 0
  9071  00221E  0012               	return	
  9072  002220                     l1093:
  9073                           
  9074                           ; BSR set to: 0
  9075                           ;tff.c: 540: if (dptr[0] != 0xE5
  9076                           ;tff.c: 541: && !(dptr[11] & 0x08)
  9077                           ;tff.c: 542: && !memcmp(&dptr[0], fn, 8+3) ) break;
  9078                           
  9079                           ; BSR set to: 0
  9080  002220  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
  9081  002224  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
  9082  002228  0EE5               	movlw	229
  9083  00222A  18DE               	xorwf	postinc2,w,c
  9084  00222C  B4D8               	btfsc	status,2,c
  9085  00222E  D01B               	goto	l1098
  9086                           
  9087                           ; BSR set to: 0
  9088  002230  EE20 F00B          	lfsr	2,11
  9089  002234  51D5               	movf	trace_path@dptr& (0+255),w,b
  9090  002236  26D9               	addwf	fsr2l,f,c
  9091  002238  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  9092  00223A  22DA               	addwfc	fsr2h,f,c
  9093  00223C  B6DF               	btfsc	indf2,3,c
  9094  00223E  D013               	goto	l1098
  9095                           
  9096                           ; BSR set to: 0
  9097  002240  C0D5  F060         	movff	trace_path@dptr,memcmp@s1
  9098  002244  C0D6  F061         	movff	trace_path@dptr+1,memcmp@s1+1
  9099  002248  C0C2  F062         	movff	trace_path@fn,memcmp@s2
  9100  00224C  C0C3  F063         	movff	trace_path@fn+1,memcmp@s2+1
  9101  002250  0E00               	movlw	0
  9102  002252  6F65               	movwf	(memcmp@n+1)& (0+255),b
  9103  002254  0E0B               	movlw	11
  9104  002256  6F64               	movwf	memcmp@n& (0+255),b
  9105  002258  ECAD  F020         	call	_memcmp	;wreg free
  9106  00225C  0100               	movlb	0	; () banked
  9107  00225E  5160               	movf	?_memcmp& (0+255),w,b
  9108  002260  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
  9109  002262  B4D8               	btfsc	status,2,c
  9110  002264  D017               	goto	l1099
  9111  002266                     l1098:
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;tff.c: 543: if (!next_dir_entry(dj))
  9115                           
  9116                           ; BSR set to: 0
  9117  002266  C0C0  F0B3         	movff	trace_path@dj,next_dir_entry@dj
  9118  00226A  C0C1  F0B4         	movff	trace_path@dj+1,next_dir_entry@dj+1
  9119  00226E  EC24  F019         	call	_next_dir_entry	;wreg free
  9120  002272  0900               	iorlw	0
  9121  002274  A4D8               	btfss	status,2,c
  9122  002276  D78B               	goto	l1090
  9123                           
  9124                           ;tff.c: 544: return !ds ? FR_NO_FILE : FR_NO_PATH;
  9125  002278  0100               	movlb	0	; () banked
  9126  00227A  51D4               	movf	trace_path@ds& (0+255),w,b
  9127  00227C  B4D8               	btfsc	status,2,c
  9128  00227E  D004               	goto	l1102
  9129                           
  9130                           ; BSR set to: 0
  9131  002280  0E00               	movlw	0
  9132  002282  6FCF               	movwf	(_trace_path$2056+1)& (0+255),b
  9133  002284  0E03               	movlw	3
  9134  002286  D003               	goto	L7
  9135  002288                     l1102:
  9136                           
  9137                           ; BSR set to: 0
  9138                           
  9139                           ; BSR set to: 0
  9140  002288  0E00               	movlw	0
  9141  00228A  6FCF               	movwf	(_trace_path$2056+1)& (0+255),b
  9142  00228C  0E02               	movlw	2
  9143  00228E                     L7:
  9144  00228E  6FCE               	movwf	_trace_path$2056& (0+255),b
  9145                           
  9146                           ; BSR set to: 0
  9147  002290  51CE               	movf	_trace_path$2056& (0+255),w,b
  9148                           
  9149                           ; BSR set to: 0
  9150  002292  0012               	return	
  9151  002294                     l1099:
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;tff.c: 546: if (!ds) { *dir = dptr; return FR_OK; }
  9155                           
  9156                           ; BSR set to: 0
  9157  002294  51D4               	movf	trace_path@ds& (0+255),w,b
  9158  002296  A4D8               	btfss	status,2,c
  9159  002298  D00A               	goto	l1105
  9160                           
  9161                           ; BSR set to: 0
  9162  00229A  C0C6  FFD9         	movff	trace_path@dir,fsr2l
  9163  00229E  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
  9164  0022A2  C0D5  FFDE         	movff	trace_path@dptr,postinc2
  9165  0022A6  C0D6  FFDD         	movff	trace_path@dptr+1,postdec2
  9166                           
  9167                           ; BSR set to: 0
  9168  0022AA  0E00               	movlw	0
  9169                           
  9170                           ; BSR set to: 0
  9171  0022AC  0012               	return	
  9172  0022AE                     l1105:
  9173                           
  9174                           ; BSR set to: 0
  9175                           ;tff.c: 547: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
  9176                           
  9177                           ; BSR set to: 0
  9178  0022AE  EE20 F00B          	lfsr	2,11
  9179  0022B2  51D5               	movf	trace_path@dptr& (0+255),w,b
  9180  0022B4  26D9               	addwf	fsr2l,f,c
  9181  0022B6  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  9182  0022B8  22DA               	addwfc	fsr2h,f,c
  9183  0022BA  B8DF               	btfsc	indf2,4,c
  9184  0022BC  D002               	goto	l1106
  9185                           
  9186                           ; BSR set to: 0
  9187  0022BE  0E03               	movlw	3
  9188                           
  9189                           ; BSR set to: 0
  9190  0022C0  0012               	return	
  9191  0022C2                     l1106:
  9192                           
  9193                           ; BSR set to: 0
  9194                           ;tff.c: 548: clust =
  9195                           ;tff.c: 552: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
  9196                           
  9197                           ; BSR set to: 0
  9198  0022C2  EE20 F01A          	lfsr	2,26
  9199  0022C6  51D5               	movf	trace_path@dptr& (0+255),w,b
  9200  0022C8  26D9               	addwf	fsr2l,f,c
  9201  0022CA  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  9202  0022CC  22DA               	addwfc	fsr2h,f,c
  9203  0022CE  CFDE F0D2          	movff	postinc2,trace_path@clust
  9204  0022D2  CFDD F0D3          	movff	postdec2,trace_path@clust+1
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;tff.c: 553: dj->clust = dj->sclust = clust;
  9208  0022D6  EE20 F006          	lfsr	2,6
  9209  0022DA  51C0               	movf	trace_path@dj& (0+255),w,b
  9210  0022DC  26D9               	addwf	fsr2l,f,c
  9211  0022DE  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  9212  0022E0  22DA               	addwfc	fsr2h,f,c
  9213  0022E2  C0D2  FFDE         	movff	trace_path@clust,postinc2
  9214  0022E6  C0D3  FFDD         	movff	trace_path@clust+1,postdec2
  9215  0022EA  EE10 F008          	lfsr	1,8
  9216  0022EE  51C0               	movf	trace_path@dj& (0+255),w,b
  9217  0022F0  26E1               	addwf	fsr1l,f,c
  9218  0022F2  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  9219  0022F4  22E2               	addwfc	fsr1h,f,c
  9220  0022F6  CFDE FFE6          	movff	postinc2,postinc1
  9221  0022FA  CFDD FFE5          	movff	postdec2,postdec1
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;tff.c: 554: dj->sect = clust2sect(clust);
  9225  0022FE  C0D2  F06C         	movff	trace_path@clust,clust2sect@clust
  9226  002302  C0D3  F06D         	movff	trace_path@clust+1,clust2sect@clust+1
  9227  002306  EC07  F01F         	call	_clust2sect	;wreg free
  9228  00230A  0100               	movlb	0	; () banked
  9229  00230C  EE20 F00A          	lfsr	2,10
  9230  002310  51C0               	movf	trace_path@dj& (0+255),w,b
  9231  002312  26D9               	addwf	fsr2l,f,c
  9232  002314  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  9233  002316  22DA               	addwfc	fsr2h,f,c
  9234  002318  C06C  FFDE         	movff	?_clust2sect,postinc2
  9235  00231C  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  9236  002320  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  9237  002324  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  9238                           
  9239                           ; BSR set to: 0
  9240                           ;tff.c: 555: dj->index = 2;
  9241  002328  EE20 F002          	lfsr	2,2
  9242  00232C  51C0               	movf	trace_path@dj& (0+255),w,b
  9243  00232E  26D9               	addwf	fsr2l,f,c
  9244  002330  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  9245  002332  22DA               	addwfc	fsr2h,f,c
  9246  002334  0E02               	movlw	2
  9247  002336  6EDE               	movwf	postinc2,c
  9248  002338  0E00               	movlw	0
  9249  00233A  6EDD               	movwf	postdec2,c
  9250                           
  9251                           ;tff.c: 556: }
  9252  00233C  D716               	goto	l1087
  9253  00233E                     __end_of_trace_path:
  9254                           	opt stack 0
  9255                           tosu	equ	0xFFF
  9256                           tosh	equ	0xFFE
  9257                           tosl	equ	0xFFD
  9258                           pclath	equ	0xFFA
  9259                           tblptru	equ	0xFF8
  9260                           tblptrh	equ	0xFF7
  9261                           tblptrl	equ	0xFF6
  9262                           tablat	equ	0xFF5
  9263                           prodh	equ	0xFF4
  9264                           prodl	equ	0xFF3
  9265                           intcon	equ	0xFF2
  9266                           intcon2	equ	0xFF1
  9267                           intcon3	equ	0xFF0
  9268                           indf0	equ	0xFEF
  9269                           postinc0	equ	0xFEE
  9270                           fsr0h	equ	0xFEA
  9271                           fsr0l	equ	0xFE9
  9272                           wreg	equ	0xFE8
  9273                           indf1	equ	0xFE7
  9274                           postinc1	equ	0xFE6
  9275                           postdec1	equ	0xFE5
  9276                           plusw1	equ	0xFE3
  9277                           fsr1h	equ	0xFE2
  9278                           fsr1l	equ	0xFE1
  9279                           indf2	equ	0xFDF
  9280                           postinc2	equ	0xFDE
  9281                           postdec2	equ	0xFDD
  9282                           plusw2	equ	0xFDB
  9283                           fsr2h	equ	0xFDA
  9284                           fsr2l	equ	0xFD9
  9285                           status	equ	0xFD8
  9286                           
  9287 ;; *************** function _make_dirfile *****************
  9288 ;; Defined at:
  9289 ;;		line 438 in file "bibliotecas/tff.c"
  9290 ;; Parameters:    Size  Location     Type
  9291 ;;  path            2    8[BANK0 ] PTR PTR const unsigned c
  9292 ;;		 -> trace_path@path(2), 
  9293 ;;  dirname         2   10[BANK0 ] PTR unsigned char 
  9294 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  9295 ;; Auto vars:     Size  Location     Type
  9296 ;;  c               1   20[BANK0 ] unsigned char 
  9297 ;;  n               1   19[BANK0 ] unsigned char 
  9298 ;;  a               1   18[BANK0 ] unsigned char 
  9299 ;;  t               1   17[BANK0 ] unsigned char 
  9300 ;;  b               1   16[BANK0 ] unsigned char 
  9301 ;; Return value:  Size  Location     Type
  9302 ;;                  1    wreg      unsigned char 
  9303 ;; Registers used:
  9304 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9305 ;; Tracked objects:
  9306 ;;		On entry : 0/0
  9307 ;;		On exit  : 0/0
  9308 ;;		Unchanged: 0/0
  9309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9310 ;;      Params:         0       4       0       0       0       0       0       0       0
  9311 ;;      Locals:         0       7       0       0       0       0       0       0       0
  9312 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9313 ;;      Totals:         0      13       0       0       0       0       0       0       0
  9314 ;;Total ram usage:       13 bytes
  9315 ;; Hardware stack levels used:    1
  9316 ;; Hardware stack levels required when called:    4
  9317 ;; This function calls:
  9318 ;;		_memset
  9319 ;; This function is called by:
  9320 ;;		_trace_path
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           	psect	text32
  9325  0033D0                     __ptext32:
  9326                           	opt stack 0
  9327  0033D0                     _make_dirfile:
  9328                           	opt stack 21
  9329                           
  9330                           ;tff.c: 443: BYTE n, t, c, a, b;
  9331                           ;tff.c: 446: memset(dirname, ' ', 8+3);
  9332                           
  9333                           ;incstack = 0
  9334  0033D0  C06A  F060         	movff	make_dirfile@dirname,memset@p1
  9335  0033D4  C06B  F061         	movff	make_dirfile@dirname+1,memset@p1+1
  9336  0033D8  0E00               	movlw	0
  9337  0033DA  0100               	movlb	0	; () banked
  9338  0033DC  6F63               	movwf	(memset@c+1)& (0+255),b
  9339  0033DE  0E20               	movlw	32
  9340  0033E0  6F62               	movwf	memset@c& (0+255),b
  9341  0033E2  0E00               	movlw	0
  9342  0033E4  6F65               	movwf	(memset@n+1)& (0+255),b
  9343  0033E6  0E0B               	movlw	11
  9344  0033E8  6F64               	movwf	memset@n& (0+255),b
  9345  0033EA  ECDE  F026         	call	_memset	;wreg free
  9346                           
  9347                           ;tff.c: 447: a = 0; b = 0x18;
  9348  0033EE  0E00               	movlw	0
  9349  0033F0  0100               	movlb	0	; () banked
  9350  0033F2  6F72               	movwf	make_dirfile@a& (0+255),b
  9351                           
  9352                           ; BSR set to: 0
  9353  0033F4  0E18               	movlw	24
  9354  0033F6  6F70               	movwf	make_dirfile@b& (0+255),b
  9355                           
  9356                           ; BSR set to: 0
  9357                           ;tff.c: 448: n = 0; t = 8;
  9358  0033F8  0E00               	movlw	0
  9359  0033FA  6F73               	movwf	make_dirfile@n& (0+255),b
  9360                           
  9361                           ; BSR set to: 0
  9362  0033FC  0E08               	movlw	8
  9363  0033FE  6F71               	movwf	make_dirfile@t& (0+255),b
  9364  003400                     
  9365                           ; BSR set to: 0
  9366                           ;tff.c: 450: c = *(*path)++;
  9367                           
  9368                           ; BSR set to: 0
  9369  003400  C068  FFD9         	movff	make_dirfile@path,fsr2l
  9370  003404  C069  FFDA         	movff	make_dirfile@path+1,fsr2h
  9371  003408  CFDF F06C          	movff	indf2,??_make_dirfile
  9372  00340C  0E01               	movlw	1
  9373  00340E  26DE               	addwf	postinc2,f,c
  9374  003410  CFDF F06D          	movff	indf2,??_make_dirfile+1
  9375  003414  0E00               	movlw	0
  9376  003416  22DD               	addwfc	postdec2,f,c
  9377  003418  C06C  FFF6         	movff	??_make_dirfile,tblptrl
  9378  00341C  C06D  FFF7         	movff	??_make_dirfile+1,tblptrh
  9379  003420  6AF8               	clrf	tblptru,c
  9380  003422  0E07               	movlw	(high __ramtop+-1)
  9381  003424  64F7               	cpfsgt	tblptrh,c
  9382  003426  D003               	bra	u12237
  9383  003428  0008               	tblrd		*
  9384  00342A  50F5               	movf	tablat,w,c
  9385  00342C  D005               	bra	u12230
  9386  00342E                     u12237:
  9387  00342E  CFF6 FFE9          	movff	tblptrl,fsr0l
  9388  003432  CFF7 FFEA          	movff	tblptrh,fsr0h
  9389  003436  50EF               	movf	indf0,w,c
  9390  003438                     u12230:
  9391  003438  0100               	movlb	0	; () banked
  9392  00343A  6F74               	movwf	make_dirfile@c& (0+255),b
  9393                           
  9394                           ; BSR set to: 0
  9395                           ;tff.c: 451: if (c == '\0' || c == '/') {
  9396  00343C  5174               	movf	make_dirfile@c& (0+255),w,b
  9397  00343E  B4D8               	btfsc	status,2,c
  9398  003440  D004               	goto	u12250
  9399                           
  9400                           ; BSR set to: 0
  9401  003442  0E2F               	movlw	47
  9402  003444  1974               	xorwf	make_dirfile@c& (0+255),w,b
  9403  003446  A4D8               	btfss	status,2,c
  9404  003448  D013               	goto	l1041
  9405  00344A                     u12250:
  9406                           
  9407                           ; BSR set to: 0
  9408                           ;tff.c: 452: if (n == 0) break;
  9409                           
  9410                           ; BSR set to: 0
  9411  00344A  5173               	movf	make_dirfile@n& (0+255),w,b
  9412  00344C  B4D8               	btfsc	status,2,c
  9413  00344E  D075               	goto	l1045
  9414                           
  9415                           ; BSR set to: 0
  9416                           
  9417                           ; BSR set to: 0
  9418                           
  9419                           ; BSR set to: 0
  9420                           
  9421                           ; BSR set to: 0
  9422                           ;tff.c: 453: dirname[11] = 1 ? (a & b) : 0;
  9423                           
  9424                           ; BSR set to: 0
  9425  003450  5172               	movf	make_dirfile@a& (0+255),w,b
  9426  003452  1570               	andwf	make_dirfile@b& (0+255),w,b
  9427  003454  6F6C               	movwf	??_make_dirfile& (0+255),b
  9428  003456  516C               	movf	??_make_dirfile& (0+255),w,b
  9429  003458  6F6E               	movwf	_make_dirfile$2007& (0+255),b
  9430  00345A  6B6F               	clrf	(_make_dirfile$2007+1)& (0+255),b
  9431                           
  9432                           ; BSR set to: 0
  9433                           
  9434                           ; BSR set to: 0
  9435  00345C  EE20 F00B          	lfsr	2,11
  9436  003460  516A               	movf	make_dirfile@dirname& (0+255),w,b
  9437  003462  26D9               	addwf	fsr2l,f,c
  9438  003464  516B               	movf	(make_dirfile@dirname+1)& (0+255),w,b
  9439  003466  22DA               	addwfc	fsr2h,f,c
  9440  003468  C06E  FFDF         	movff	_make_dirfile$2007,indf2
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;tff.c: 454: return c;
  9444  00346C  5174               	movf	make_dirfile@c& (0+255),w,b
  9445                           
  9446                           ; BSR set to: 0
  9447  00346E  0012               	return	
  9448  003470                     l1041:
  9449                           
  9450                           ; BSR set to: 0
  9451                           ;tff.c: 455: }
  9452                           ;tff.c: 456: if (c <= ' ' || c == 0x7F) break;
  9453                           
  9454                           ; BSR set to: 0
  9455  003470  0E20               	movlw	32
  9456  003472  6574               	cpfsgt	make_dirfile@c& (0+255),b
  9457  003474  D062               	goto	l1045
  9458                           
  9459                           ; BSR set to: 0
  9460  003476  0E7F               	movlw	127
  9461  003478  1974               	xorwf	make_dirfile@c& (0+255),w,b
  9462  00347A  B4D8               	btfsc	status,2,c
  9463  00347C  D05E               	goto	l1045
  9464                           
  9465                           ; BSR set to: 0
  9466                           ;tff.c: 457: if (c == '.') {
  9467                           
  9468                           ; BSR set to: 0
  9469                           
  9470                           ; BSR set to: 0
  9471  00347E  0E2E               	movlw	46
  9472  003480  1974               	xorwf	make_dirfile@c& (0+255),w,b
  9473  003482  A4D8               	btfss	status,2,c
  9474  003484  D00C               	goto	l1057
  9475                           
  9476                           ; BSR set to: 0
  9477                           ;tff.c: 458: if (!(a & 1) && n >= 1 && n <= 8) {
  9478  003486  B172               	btfsc	make_dirfile@a& (0+255),0,b
  9479  003488  D058               	goto	l1045
  9480                           
  9481                           ; BSR set to: 0
  9482  00348A  5173               	movf	make_dirfile@n& (0+255),w,b
  9483  00348C  B4D8               	btfsc	status,2,c
  9484  00348E  D055               	goto	l1045
  9485                           
  9486                           ; BSR set to: 0
  9487  003490  0E09               	movlw	9
  9488  003492  6173               	cpfslt	make_dirfile@n& (0+255),b
  9489  003494  D052               	goto	l1045
  9490                           
  9491                           ; BSR set to: 0
  9492                           ;tff.c: 459: n = 8; t = 11; continue;
  9493  003496  0E08               	movlw	8
  9494  003498  6F73               	movwf	make_dirfile@n& (0+255),b
  9495  00349A  0E0B               	movlw	11
  9496  00349C  D7B0               	goto	L8
  9497  00349E                     l1057:
  9498                           
  9499                           ; BSR set to: 0
  9500                           ;tff.c: 469: }
  9501                           ;tff.c: 470: if (c == '"') break;
  9502                           
  9503                           ; BSR set to: 0
  9504  00349E  0E22               	movlw	34
  9505  0034A0  1974               	xorwf	make_dirfile@c& (0+255),w,b
  9506  0034A2  B4D8               	btfsc	status,2,c
  9507  0034A4  D04A               	goto	l1045
  9508                           
  9509                           ; BSR set to: 0
  9510                           ;tff.c: 471: if (c <= ')') goto md_l1;
  9511                           
  9512                           ; BSR set to: 0
  9513                           
  9514                           ; BSR set to: 0
  9515  0034A6  0E2A               	movlw	42
  9516  0034A8  6174               	cpfslt	make_dirfile@c& (0+255),b
  9517  0034AA  D001               	goto	l1065
  9518  0034AC  D035               	goto	l1083
  9519  0034AE                     l1065:
  9520                           
  9521                           ; BSR set to: 0
  9522                           ;tff.c: 472: if (c <= ',') break;
  9523                           
  9524                           ; BSR set to: 0
  9525  0034AE  0E2D               	movlw	45
  9526  0034B0  6174               	cpfslt	make_dirfile@c& (0+255),b
  9527  0034B2  D001               	goto	l1067
  9528  0034B4  D042               	goto	l1045
  9529  0034B6                     l1067:
  9530                           
  9531                           ; BSR set to: 0
  9532                           ;tff.c: 473: if (c <= '9') goto md_l1;
  9533                           
  9534                           ; BSR set to: 0
  9535  0034B6  0E3A               	movlw	58
  9536  0034B8  6174               	cpfslt	make_dirfile@c& (0+255),b
  9537  0034BA  D001               	goto	l1068
  9538  0034BC  D02D               	goto	l1083
  9539  0034BE                     l1068:
  9540                           
  9541                           ; BSR set to: 0
  9542                           ;tff.c: 474: if (c <= '?') break;
  9543                           
  9544                           ; BSR set to: 0
  9545  0034BE  0E40               	movlw	64
  9546  0034C0  6174               	cpfslt	make_dirfile@c& (0+255),b
  9547  0034C2  D001               	goto	l1069
  9548  0034C4  D03A               	goto	l1045
  9549  0034C6                     l1069:
  9550                           
  9551                           ; BSR set to: 0
  9552                           ;tff.c: 475: if (!(a & 1)) {
  9553  0034C6  B172               	btfsc	make_dirfile@a& (0+255),0,b
  9554  0034C8  D027               	goto	l1083
  9555                           
  9556                           ; BSR set to: 0
  9557                           ;tff.c: 476: if (c == '|') break;
  9558  0034CA  0E7C               	movlw	124
  9559  0034CC  1974               	xorwf	make_dirfile@c& (0+255),w,b
  9560  0034CE  B4D8               	btfsc	status,2,c
  9561  0034D0  D034               	goto	l1045
  9562                           
  9563                           ; BSR set to: 0
  9564                           ;tff.c: 477: if (c >= '[' && c <= ']') break;
  9565                           
  9566                           ; BSR set to: 0
  9567                           
  9568                           ; BSR set to: 0
  9569  0034D2  0E5A               	movlw	90
  9570  0034D4  6574               	cpfsgt	make_dirfile@c& (0+255),b
  9571  0034D6  D004               	goto	l1072
  9572                           
  9573                           ; BSR set to: 0
  9574  0034D8  0E5E               	movlw	94
  9575  0034DA  6174               	cpfslt	make_dirfile@c& (0+255),b
  9576  0034DC  D001               	goto	l1072
  9577  0034DE  D02D               	goto	l1045
  9578  0034E0                     l1072:
  9579                           
  9580                           ; BSR set to: 0
  9581                           
  9582                           ; BSR set to: 0
  9583  0034E0  0E40               	movlw	64
  9584  0034E2  6574               	cpfsgt	make_dirfile@c& (0+255),b
  9585  0034E4  D00A               	goto	l1077
  9586                           
  9587                           ; BSR set to: 0
  9588  0034E6  0E5B               	movlw	91
  9589  0034E8  6174               	cpfslt	make_dirfile@c& (0+255),b
  9590  0034EA  D007               	goto	l1077
  9591                           
  9592                           ; BSR set to: 0
  9593                           ;tff.c: 479: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
  9594  0034EC  0E08               	movlw	8
  9595  0034EE  1971               	xorwf	make_dirfile@t& (0+255),w,b
  9596  0034F0  A4D8               	btfss	status,2,c
  9597  0034F2  D002               	goto	l1075
  9598                           
  9599                           ; BSR set to: 0
  9600  0034F4  9770               	bcf	make_dirfile@b& (0+255),3,b
  9601  0034F6  D001               	goto	l1077
  9602  0034F8                     l1075:
  9603                           
  9604                           ; BSR set to: 0
  9605                           
  9606                           ; BSR set to: 0
  9607  0034F8  9970               	bcf	make_dirfile@b& (0+255),4,b
  9608  0034FA                     l1077:
  9609                           
  9610                           ; BSR set to: 0
  9611                           ;tff.c: 480: if (c >= 'a' && c <= 'z') {
  9612                           
  9613                           ; BSR set to: 0
  9614                           
  9615                           ; BSR set to: 0
  9616  0034FA  0E60               	movlw	96
  9617  0034FC  6574               	cpfsgt	make_dirfile@c& (0+255),b
  9618  0034FE  D00C               	goto	l1083
  9619                           
  9620                           ; BSR set to: 0
  9621  003500  0E7B               	movlw	123
  9622  003502  6174               	cpfslt	make_dirfile@c& (0+255),b
  9623  003504  D009               	goto	l1083
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;tff.c: 482: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
  9627  003506  0E20               	movlw	32
  9628  003508  5F74               	subwf	make_dirfile@c& (0+255),f,b
  9629  00350A  0E08               	movlw	8
  9630  00350C  1971               	xorwf	make_dirfile@t& (0+255),w,b
  9631  00350E  A4D8               	btfss	status,2,c
  9632  003510  D002               	goto	l1081
  9633                           
  9634                           ; BSR set to: 0
  9635  003512  8772               	bsf	make_dirfile@a& (0+255),3,b
  9636  003514  D001               	goto	l1083
  9637  003516                     l1081:
  9638                           
  9639                           ; BSR set to: 0
  9640                           
  9641                           ; BSR set to: 0
  9642  003516  8972               	bsf	make_dirfile@a& (0+255),4,b
  9643  003518                     l1083:
  9644                           
  9645                           ; BSR set to: 0
  9646                           ;tff.c: 486: a &= 0xFE;
  9647                           
  9648                           ; BSR set to: 0
  9649                           ;tff.c: 483: }
  9650                           ;tff.c: 484: }
  9651                           ;tff.c: 485: md_l1:
  9652                           
  9653                           ; BSR set to: 0
  9654                           
  9655                           ; BSR set to: 0
  9656                           
  9657                           ; BSR set to: 0
  9658  003518  9172               	bcf	make_dirfile@a& (0+255),0,b
  9659                           
  9660                           ; BSR set to: 0
  9661                           ;tff.c: 488: if (n >= t) break;
  9662                           
  9663                           ; BSR set to: 0
  9664                           
  9665                           ;tff.c: 487: md_l2:
  9666  00351A  5171               	movf	make_dirfile@t& (0+255),w,b
  9667  00351C  5D73               	subwf	make_dirfile@n& (0+255),w,b
  9668  00351E  B0D8               	btfsc	status,0,c
  9669  003520  D00C               	goto	l1045
  9670                           
  9671                           ; BSR set to: 0
  9672                           ;tff.c: 489: dirname[n++] = c;
  9673                           
  9674                           ; BSR set to: 0
  9675                           
  9676                           ; BSR set to: 0
  9677  003522  5173               	movf	make_dirfile@n& (0+255),w,b
  9678  003524  0D01               	mullw	1
  9679  003526  50F3               	movf	prodl,w,c
  9680  003528  256A               	addwf	make_dirfile@dirname& (0+255),w,b
  9681  00352A  6ED9               	movwf	fsr2l,c
  9682  00352C  50F4               	movf	prodh,w,c
  9683  00352E  216B               	addwfc	(make_dirfile@dirname+1)& (0+255),w,b
  9684  003530  6EDA               	movwf	fsr2h,c
  9685  003532  C074  FFDF         	movff	make_dirfile@c,indf2
  9686                           
  9687                           ; BSR set to: 0
  9688  003536  2B73               	incf	make_dirfile@n& (0+255),f,b
  9689                           
  9690                           ; BSR set to: 0
  9691                           ;tff.c: 490: }
  9692  003538  D763               	goto	l1040
  9693  00353A                     l1045:
  9694                           
  9695                           ; BSR set to: 0
  9696                           ;tff.c: 491: return 1;
  9697                           
  9698                           ; BSR set to: 0
  9699  00353A  0E01               	movlw	1
  9700  00353C  0012               	return	
  9701  00353E                     __end_of_make_dirfile:
  9702                           	opt stack 0
  9703                           tosu	equ	0xFFF
  9704                           tosh	equ	0xFFE
  9705                           tosl	equ	0xFFD
  9706                           pclath	equ	0xFFA
  9707                           tblptru	equ	0xFF8
  9708                           tblptrh	equ	0xFF7
  9709                           tblptrl	equ	0xFF6
  9710                           tablat	equ	0xFF5
  9711                           prodh	equ	0xFF4
  9712                           prodl	equ	0xFF3
  9713                           intcon	equ	0xFF2
  9714                           intcon2	equ	0xFF1
  9715                           intcon3	equ	0xFF0
  9716                           indf0	equ	0xFEF
  9717                           postinc0	equ	0xFEE
  9718                           fsr0h	equ	0xFEA
  9719                           fsr0l	equ	0xFE9
  9720                           wreg	equ	0xFE8
  9721                           indf1	equ	0xFE7
  9722                           postinc1	equ	0xFE6
  9723                           postdec1	equ	0xFE5
  9724                           plusw1	equ	0xFE3
  9725                           fsr1h	equ	0xFE2
  9726                           fsr1l	equ	0xFE1
  9727                           indf2	equ	0xFDF
  9728                           postinc2	equ	0xFDE
  9729                           postdec2	equ	0xFDD
  9730                           plusw2	equ	0xFDB
  9731                           fsr2h	equ	0xFDA
  9732                           fsr2l	equ	0xFD9
  9733                           status	equ	0xFD8
  9734                           
  9735 ;; *************** function _reserve_direntry *****************
  9736 ;; Defined at:
  9737 ;;		line 567 in file "bibliotecas/tff.c"
  9738 ;; Parameters:    Size  Location     Type
  9739 ;;  dj              2  100[BANK0 ] PTR struct _DIR_E
  9740 ;;		 -> f_open@dj(14), 
  9741 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
  9742 ;;		 -> f_open@dir(2), 
  9743 ;; Auto vars:     Size  Location     Type
  9744 ;;  sector          4  106[BANK0 ] unsigned long 
  9745 ;;  fs              2  116[BANK0 ] PTR struct _FATFS
  9746 ;;		 -> NULL(0), fs(544), 
  9747 ;;  clust           2  114[BANK0 ] unsigned short 
  9748 ;;  dptr            2  111[BANK0 ] PTR unsigned char 
  9749 ;;		 -> fs.win(512), NULL(0), fs(544), 
  9750 ;;  c               1  113[BANK0 ] unsigned char 
  9751 ;;  n               1  110[BANK0 ] unsigned char 
  9752 ;; Return value:  Size  Location     Type
  9753 ;;                  1    wreg      enum E155
  9754 ;; Registers used:
  9755 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9756 ;; Tracked objects:
  9757 ;;		On entry : 0/0
  9758 ;;		On exit  : 0/0
  9759 ;;		Unchanged: 0/0
  9760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9761 ;;      Params:         0       4       0       0       0       0       0       0       0
  9762 ;;      Locals:         0      12       0       0       0       0       0       0       0
  9763 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9764 ;;      Totals:         0      18       0       0       0       0       0       0       0
  9765 ;;Total ram usage:       18 bytes
  9766 ;; Hardware stack levels used:    1
  9767 ;; Hardware stack levels required when called:   11
  9768 ;; This function calls:
  9769 ;;		_clust2sect
  9770 ;;		_create_chain
  9771 ;;		_disk_write
  9772 ;;		_memset
  9773 ;;		_move_window
  9774 ;;		_next_dir_entry
  9775 ;; This function is called by:
  9776 ;;		_f_open
  9777 ;; This function uses a non-reentrant model
  9778 ;;
  9779                           
  9780                           	psect	text33
  9781  00233E                     __ptext33:
  9782                           	opt stack 0
  9783  00233E                     _reserve_direntry:
  9784                           	opt stack 15
  9785                           
  9786                           ;tff.c: 572: CLUST clust;
  9787                           ;tff.c: 573: DWORD sector;
  9788                           ;tff.c: 574: BYTE c, n, *dptr;
  9789                           ;tff.c: 575: FATFS *fs = dj->fs;
  9790                           
  9791                           ; BSR set to: 0
  9792                           ;incstack = 0
  9793  00233E  0100               	movlb	0	; () banked
  9794  002340  EE20 F004          	lfsr	2,4
  9795  002344  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9796  002346  26D9               	addwf	fsr2l,f,c
  9797  002348  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9798  00234A  22DA               	addwfc	fsr2h,f,c
  9799  00234C  CFDE F0D4          	movff	postinc2,reserve_direntry@fs
  9800  002350  CFDD F0D5          	movff	postdec2,reserve_direntry@fs+1
  9801                           
  9802                           ;tff.c: 579: clust = dj->sclust;
  9803  002354  EE20 F006          	lfsr	2,6
  9804  002358  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9805  00235A  26D9               	addwf	fsr2l,f,c
  9806  00235C  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9807  00235E  22DA               	addwfc	fsr2h,f,c
  9808  002360  CFDE F0D2          	movff	postinc2,reserve_direntry@clust
  9809  002364  CFDD F0D3          	movff	postdec2,reserve_direntry@clust+1
  9810                           
  9811                           ; BSR set to: 0
  9812                           ;tff.c: 580: if (clust != 0) {
  9813  002368  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  9814  00236A  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9815  00236C  B4D8               	btfsc	status,2,c
  9816  00236E  D020               	goto	l1110
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;tff.c: 581: dj->clust = clust;
  9820  002370  EE20 F008          	lfsr	2,8
  9821  002374  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9822  002376  26D9               	addwf	fsr2l,f,c
  9823  002378  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9824  00237A  22DA               	addwfc	fsr2h,f,c
  9825  00237C  C0D2  FFDE         	movff	reserve_direntry@clust,postinc2
  9826  002380  C0D3  FFDD         	movff	reserve_direntry@clust+1,postdec2
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;tff.c: 582: dj->sect = clust2sect(clust);
  9830  002384  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
  9831  002388  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
  9832  00238C  EC07  F01F         	call	_clust2sect	;wreg free
  9833  002390  0100               	movlb	0	; () banked
  9834  002392  EE20 F00A          	lfsr	2,10
  9835  002396  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9836  002398  26D9               	addwf	fsr2l,f,c
  9837  00239A  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9838  00239C  22DA               	addwfc	fsr2h,f,c
  9839  00239E  C06C  FFDE         	movff	?_clust2sect,postinc2
  9840  0023A2  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  9841  0023A6  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  9842  0023AA  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  9843                           
  9844                           ;tff.c: 583: } else {
  9845  0023AE  D014               	goto	l1111
  9846  0023B0                     l1110:
  9847                           
  9848                           ; BSR set to: 0
  9849                           ;tff.c: 584: dj->sect = fs->dirbase;
  9850                           
  9851                           ; BSR set to: 0
  9852  0023B0  EE20 F00C          	lfsr	2,12
  9853  0023B4  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  9854  0023B6  26D9               	addwf	fsr2l,f,c
  9855  0023B8  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  9856  0023BA  22DA               	addwfc	fsr2h,f,c
  9857  0023BC  EE10 F00A          	lfsr	1,10
  9858  0023C0  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9859  0023C2  26E1               	addwf	fsr1l,f,c
  9860  0023C4  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9861  0023C6  22E2               	addwfc	fsr1h,f,c
  9862  0023C8  CFDE FFE6          	movff	postinc2,postinc1
  9863  0023CC  CFDE FFE6          	movff	postinc2,postinc1
  9864  0023D0  CFDE FFE6          	movff	postinc2,postinc1
  9865  0023D4  CFDE FFE6          	movff	postinc2,postinc1
  9866  0023D8                     l1111:
  9867                           
  9868                           ; BSR set to: 0
  9869                           ;tff.c: 585: }
  9870                           ;tff.c: 586: dj->index = 0;
  9871                           
  9872                           ; BSR set to: 0
  9873  0023D8  EE20 F002          	lfsr	2,2
  9874  0023DC  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9875  0023DE  26D9               	addwf	fsr2l,f,c
  9876  0023E0  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9877  0023E2  22DA               	addwfc	fsr2h,f,c
  9878  0023E4  0E00               	movlw	0
  9879  0023E6  6EDE               	movwf	postinc2,c
  9880  0023E8  0E00               	movlw	0
  9881  0023EA  6EDD               	movwf	postdec2,c
  9882  0023EC                     
  9883                           ;tff.c: 589: if (!move_window(dj->sect)) return FR_RW_ERROR;
  9884                           
  9885                           ; BSR set to: 0
  9886  0023EC  0100               	movlb	0	; () banked
  9887  0023EE  EE20 F00A          	lfsr	2,10
  9888  0023F2  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9889  0023F4  26D9               	addwf	fsr2l,f,c
  9890  0023F6  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9891  0023F8  22DA               	addwfc	fsr2h,f,c
  9892  0023FA  CFDE F08B          	movff	postinc2,move_window@sector
  9893  0023FE  CFDE F08C          	movff	postinc2,move_window@sector+1
  9894  002402  CFDE F08D          	movff	postinc2,move_window@sector+2
  9895  002406  CFDE F08E          	movff	postinc2,move_window@sector+3
  9896  00240A  EC49  F018         	call	_move_window	;wreg free
  9897  00240E  0900               	iorlw	0
  9898  002410  A4D8               	btfss	status,2,c
  9899  002412  D002               	goto	l1113
  9900  002414  0E08               	movlw	8
  9901  002416  0012               	return	
  9902  002418                     l1113:
  9903                           
  9904                           ;tff.c: 590: dptr = &fs->win[(dj->index & 15) * 32];
  9905  002418  0100               	movlb	0	; () banked
  9906  00241A  EE20 F002          	lfsr	2,2
  9907  00241E  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9908  002420  26D9               	addwf	fsr2l,f,c
  9909  002422  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9910  002424  22DA               	addwfc	fsr2h,f,c
  9911  002426  CFDE F0C8          	movff	postinc2,??_reserve_direntry
  9912  00242A  CFDD F0C9          	movff	postdec2,??_reserve_direntry+1
  9913  00242E  0E0F               	movlw	15
  9914  002430  17C8               	andwf	??_reserve_direntry& (0+255),f,b
  9915  002432  0E00               	movlw	0
  9916  002434  17C9               	andwf	(??_reserve_direntry+1)& (0+255),f,b
  9917  002436  0E05               	movlw	5
  9918  002438                     u13005:
  9919  002438  90D8               	bcf	status,0,c
  9920  00243A  37C8               	rlcf	??_reserve_direntry& (0+255),f,b
  9921  00243C  37C9               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
  9922  00243E  2EE8               	decfsz	wreg,f,c
  9923  002440  D7FB               	goto	u13005
  9924  002442  0E20               	movlw	32
  9925  002444  27C8               	addwf	??_reserve_direntry& (0+255),f,b
  9926  002446  0E00               	movlw	0
  9927  002448  23C9               	addwfc	(??_reserve_direntry+1)& (0+255),f,b
  9928  00244A  51C8               	movf	??_reserve_direntry& (0+255),w,b
  9929  00244C  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  9930  00244E  6FCF               	movwf	reserve_direntry@dptr& (0+255),b
  9931  002450  51C9               	movf	(??_reserve_direntry+1)& (0+255),w,b
  9932  002452  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  9933  002454  6FD0               	movwf	(reserve_direntry@dptr+1)& (0+255),b
  9934                           
  9935                           ; BSR set to: 0
  9936                           ;tff.c: 591: c = dptr[0];
  9937  002456  C0CF  FFD9         	movff	reserve_direntry@dptr,fsr2l
  9938  00245A  C0D0  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
  9939  00245E  50DF               	movf	indf2,w,c
  9940  002460  6FD1               	movwf	reserve_direntry@c& (0+255),b
  9941                           
  9942                           ; BSR set to: 0
  9943                           ;tff.c: 592: if (c == 0 || c == 0xE5) {
  9944  002462  51D1               	movf	reserve_direntry@c& (0+255),w,b
  9945  002464  B4D8               	btfsc	status,2,c
  9946  002466  D004               	goto	u13020
  9947                           
  9948                           ; BSR set to: 0
  9949  002468  0EE5               	movlw	229
  9950  00246A  19D1               	xorwf	reserve_direntry@c& (0+255),w,b
  9951  00246C  A4D8               	btfss	status,2,c
  9952  00246E  D00A               	goto	l1115
  9953  002470                     u13020:
  9954                           
  9955                           ; BSR set to: 0
  9956                           ;tff.c: 593: *dir = dptr; return FR_OK;
  9957                           
  9958                           ; BSR set to: 0
  9959  002470  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
  9960  002474  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
  9961  002478  C0CF  FFDE         	movff	reserve_direntry@dptr,postinc2
  9962  00247C  C0D0  FFDD         	movff	reserve_direntry@dptr+1,postdec2
  9963                           
  9964                           ; BSR set to: 0
  9965  002480  0E00               	movlw	0
  9966                           
  9967                           ; BSR set to: 0
  9968  002482  0012               	return	
  9969  002484                     l1115:
  9970                           
  9971                           ; BSR set to: 0
  9972                           ;tff.c: 594: }
  9973                           ;tff.c: 595: } while (next_dir_entry(dj));
  9974                           
  9975                           ; BSR set to: 0
  9976  002484  C0C4  F0B3         	movff	reserve_direntry@dj,next_dir_entry@dj
  9977  002488  C0C5  F0B4         	movff	reserve_direntry@dj+1,next_dir_entry@dj+1
  9978  00248C  EC24  F019         	call	_next_dir_entry	;wreg free
  9979  002490  0900               	iorlw	0
  9980  002492  A4D8               	btfss	status,2,c
  9981  002494  D7AB               	goto	l1112
  9982                           
  9983                           ;tff.c: 599: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
  9984  002496  0100               	movlb	0	; () banked
  9985  002498  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  9986  00249A  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9987  00249C  B4D8               	btfsc	status,2,c
  9988  00249E  D015               	goto	u13050
  9989                           
  9990                           ; BSR set to: 0
  9991  0024A0  EE20 F008          	lfsr	2,8
  9992  0024A4  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9993  0024A6  26D9               	addwf	fsr2l,f,c
  9994  0024A8  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9995  0024AA  22DA               	addwfc	fsr2h,f,c
  9996  0024AC  CFDE F0B6          	movff	postinc2,create_chain@clust
  9997  0024B0  CFDD F0B7          	movff	postdec2,create_chain@clust+1
  9998  0024B4  EC69  F017         	call	_create_chain	;wreg free
  9999  0024B8  C0B6  F0D2         	movff	?_create_chain,reserve_direntry@clust
 10000  0024BC  C0B7  F0D3         	movff	?_create_chain+1,reserve_direntry@clust+1
 10001  0024C0  0100               	movlb	0	; () banked
 10002  0024C2  51D2               	movf	reserve_direntry@clust& (0+255),w,b
 10003  0024C4  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 10004  0024C6  A4D8               	btfss	status,2,c
 10005  0024C8  D002               	goto	l1119
 10006  0024CA                     u13050:
 10007                           
 10008                           ; BSR set to: 0
 10009                           
 10010                           ; BSR set to: 0
 10011  0024CA  0E06               	movlw	6
 10012                           
 10013                           ; BSR set to: 0
 10014  0024CC  0012               	return	
 10015  0024CE                     l1119:
 10016                           
 10017                           ; BSR set to: 0
 10018                           ;tff.c: 600: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
 10019                           
 10020                           ; BSR set to: 0
 10021  0024CE  05D2               	decf	reserve_direntry@clust& (0+255),w,b
 10022  0024D0  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 10023  0024D2  B4D8               	btfsc	status,2,c
 10024  0024D4  D00D               	goto	u13070
 10025                           
 10026                           ; BSR set to: 0
 10027  0024D6  0E00               	movlw	0
 10028  0024D8  6F8B               	movwf	move_window@sector& (0+255),b
 10029  0024DA  0E00               	movlw	0
 10030  0024DC  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 10031  0024DE  0E00               	movlw	0
 10032  0024E0  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 10033  0024E2  0E00               	movlw	0
 10034  0024E4  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 10035  0024E6  EC49  F018         	call	_move_window	;wreg free
 10036  0024EA  0900               	iorlw	0
 10037  0024EC  A4D8               	btfss	status,2,c
 10038  0024EE  D002               	goto	l1122
 10039  0024F0                     u13070:
 10040  0024F0  0E08               	movlw	8
 10041  0024F2  0012               	return	
 10042  0024F4                     l1122:
 10043                           
 10044                           ;tff.c: 602: fs->winsect = sector = clust2sect(clust);
 10045  0024F4  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
 10046  0024F8  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 10047  0024FC  EC07  F01F         	call	_clust2sect	;wreg free
 10048  002500  C06C  F0CA         	movff	?_clust2sect,reserve_direntry@sector
 10049  002504  C06D  F0CB         	movff	?_clust2sect+1,reserve_direntry@sector+1
 10050  002508  C06E  F0CC         	movff	?_clust2sect+2,reserve_direntry@sector+2
 10051  00250C  C06F  F0CD         	movff	?_clust2sect+3,reserve_direntry@sector+3
 10052  002510  0100               	movlb	0	; () banked
 10053  002512  EE20 F004          	lfsr	2,4
 10054  002516  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 10055  002518  26D9               	addwf	fsr2l,f,c
 10056  00251A  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10057  00251C  22DA               	addwfc	fsr2h,f,c
 10058  00251E  C0CA  FFDE         	movff	reserve_direntry@sector,postinc2
 10059  002522  C0CB  FFDE         	movff	reserve_direntry@sector+1,postinc2
 10060  002526  C0CC  FFDE         	movff	reserve_direntry@sector+2,postinc2
 10061  00252A  C0CD  FFDE         	movff	reserve_direntry@sector+3,postinc2
 10062                           
 10063                           ;tff.c: 603: memset(fs->win, 0, 512U);
 10064  00252E  0E20               	movlw	32
 10065  002530  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 10066  002532  6F60               	movwf	memset@p1& (0+255),b
 10067  002534  0E00               	movlw	0
 10068  002536  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 10069  002538  6F61               	movwf	(memset@p1+1)& (0+255),b
 10070  00253A  0E00               	movlw	0
 10071  00253C  6F63               	movwf	(memset@c+1)& (0+255),b
 10072  00253E  0E00               	movlw	0
 10073  002540  6F62               	movwf	memset@c& (0+255),b
 10074  002542  0E02               	movlw	2
 10075  002544  6F65               	movwf	(memset@n+1)& (0+255),b
 10076  002546  0E00               	movlw	0
 10077  002548  6F64               	movwf	memset@n& (0+255),b
 10078  00254A  ECDE  F026         	call	_memset	;wreg free
 10079                           
 10080                           ;tff.c: 604: for (n = fs->csize; n; n--) {
 10081  00254E  0100               	movlb	0	; () banked
 10082  002550  EE20 F01D          	lfsr	2,29
 10083  002554  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 10084  002556  26D9               	addwf	fsr2l,f,c
 10085  002558  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10086  00255A  22DA               	addwfc	fsr2h,f,c
 10087  00255C  50DF               	movf	indf2,w,c
 10088  00255E  6FCE               	movwf	reserve_direntry@n& (0+255),b
 10089  002560  D020               	goto	l1125
 10090  002562                     
 10091                           ; BSR set to: 0
 10092                           ;tff.c: 605: if (disk_write(0, fs->win, sector, 1) != RES_OK)
 10093                           
 10094                           ; BSR set to: 0
 10095  002562  0E20               	movlw	32
 10096  002564  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 10097  002566  6F7F               	movwf	disk_write@buff& (0+255),b
 10098  002568  0E00               	movlw	0
 10099  00256A  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 10100  00256C  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 10101  00256E  C0CA  F081         	movff	reserve_direntry@sector,disk_write@sector
 10102  002572  C0CB  F082         	movff	reserve_direntry@sector+1,disk_write@sector+1
 10103  002576  C0CC  F083         	movff	reserve_direntry@sector+2,disk_write@sector+2
 10104  00257A  C0CD  F084         	movff	reserve_direntry@sector+3,disk_write@sector+3
 10105  00257E  0E01               	movlw	1
 10106  002580  6F85               	movwf	disk_write@count& (0+255),b
 10107  002582  0E00               	movlw	0
 10108  002584  EC22  F022         	call	_disk_write
 10109  002588  0900               	iorlw	0
 10110  00258A  B4D8               	btfsc	status,2,c
 10111  00258C  D002               	goto	l1127
 10112                           
 10113                           ;tff.c: 606: return FR_RW_ERROR;
 10114  00258E  0E08               	movlw	8
 10115  002590  0012               	return	
 10116  002592                     l1127:
 10117                           
 10118                           ;tff.c: 607: sector++;
 10119  002592  0E01               	movlw	1
 10120  002594  0100               	movlb	0	; () banked
 10121  002596  27CA               	addwf	reserve_direntry@sector& (0+255),f,b
 10122  002598  0E00               	movlw	0
 10123  00259A  23CB               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
 10124  00259C  23CC               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
 10125  00259E  23CD               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
 10126                           
 10127                           ; BSR set to: 0
 10128  0025A0  07CE               	decf	reserve_direntry@n& (0+255),f,b
 10129  0025A2                     l1125:
 10130                           
 10131                           ; BSR set to: 0
 10132                           
 10133                           ; BSR set to: 0
 10134  0025A2  51CE               	movf	reserve_direntry@n& (0+255),w,b
 10135  0025A4  A4D8               	btfss	status,2,c
 10136  0025A6  D7DD               	goto	l1126
 10137                           
 10138                           ; BSR set to: 0
 10139                           ;tff.c: 608: }
 10140                           ;tff.c: 609: fs->winflag = 1;
 10141                           
 10142                           ; BSR set to: 0
 10143  0025A8  EE20 F01F          	lfsr	2,31
 10144  0025AC  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 10145  0025AE  26D9               	addwf	fsr2l,f,c
 10146  0025B0  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10147  0025B2  22DA               	addwfc	fsr2h,f,c
 10148  0025B4  0E01               	movlw	1
 10149  0025B6  6EDF               	movwf	indf2,c
 10150                           
 10151                           ;tff.c: 610: *dir = fs->win;
 10152  0025B8  0E20               	movlw	32
 10153  0025BA  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 10154  0025BC  6FC8               	movwf	??_reserve_direntry& (0+255),b
 10155  0025BE  0E00               	movlw	0
 10156  0025C0  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 10157  0025C2  6FC9               	movwf	(??_reserve_direntry+1)& (0+255),b
 10158  0025C4  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
 10159  0025C8  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
 10160  0025CC  C0C8  FFDE         	movff	??_reserve_direntry,postinc2
 10161  0025D0  C0C9  FFDD         	movff	??_reserve_direntry+1,postdec2
 10162                           
 10163                           ; BSR set to: 0
 10164                           ;tff.c: 611: return FR_OK;
 10165  0025D4  0E00               	movlw	0
 10166  0025D6  0012               	return	
 10167  0025D8                     __end_of_reserve_direntry:
 10168                           	opt stack 0
 10169                           tosu	equ	0xFFF
 10170                           tosh	equ	0xFFE
 10171                           tosl	equ	0xFFD
 10172                           pclath	equ	0xFFA
 10173                           tblptru	equ	0xFF8
 10174                           tblptrh	equ	0xFF7
 10175                           tblptrl	equ	0xFF6
 10176                           tablat	equ	0xFF5
 10177                           prodh	equ	0xFF4
 10178                           prodl	equ	0xFF3
 10179                           intcon	equ	0xFF2
 10180                           intcon2	equ	0xFF1
 10181                           intcon3	equ	0xFF0
 10182                           indf0	equ	0xFEF
 10183                           postinc0	equ	0xFEE
 10184                           fsr0h	equ	0xFEA
 10185                           fsr0l	equ	0xFE9
 10186                           wreg	equ	0xFE8
 10187                           indf1	equ	0xFE7
 10188                           postinc1	equ	0xFE6
 10189                           postdec1	equ	0xFE5
 10190                           plusw1	equ	0xFE3
 10191                           fsr1h	equ	0xFE2
 10192                           fsr1l	equ	0xFE1
 10193                           indf2	equ	0xFDF
 10194                           postinc2	equ	0xFDE
 10195                           postdec2	equ	0xFDD
 10196                           plusw2	equ	0xFDB
 10197                           fsr2h	equ	0xFDA
 10198                           fsr2l	equ	0xFD9
 10199                           status	equ	0xFD8
 10200                           
 10201 ;; *************** function _next_dir_entry *****************
 10202 ;; Defined at:
 10203 ;;		line 358 in file "bibliotecas/tff.c"
 10204 ;; Parameters:    Size  Location     Type
 10205 ;;  dj              2   83[BANK0 ] PTR struct _DIR_E
 10206 ;;		 -> f_open@dj(14), 
 10207 ;; Auto vars:     Size  Location     Type
 10208 ;;  idx             2   94[BANK0 ] unsigned short 
 10209 ;;  clust           2   92[BANK0 ] unsigned short 
 10210 ;; Return value:  Size  Location     Type
 10211 ;;                  1    wreg      enum E105
 10212 ;; Registers used:
 10213 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10214 ;; Tracked objects:
 10215 ;;		On entry : 0/0
 10216 ;;		On exit  : 0/0
 10217 ;;		Unchanged: 0/0
 10218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10219 ;;      Params:         0       2       0       0       0       0       0       0       0
 10220 ;;      Locals:         0       4       0       0       0       0       0       0       0
 10221 ;;      Temps:          0       7       0       0       0       0       0       0       0
 10222 ;;      Totals:         0      13       0       0       0       0       0       0       0
 10223 ;;Total ram usage:       13 bytes
 10224 ;; Hardware stack levels used:    1
 10225 ;; Hardware stack levels required when called:   10
 10226 ;; This function calls:
 10227 ;;		_clust2sect
 10228 ;;		_get_cluster
 10229 ;; This function is called by:
 10230 ;;		_trace_path
 10231 ;;		_reserve_direntry
 10232 ;;		_f_readdir
 10233 ;; This function uses a non-reentrant model
 10234 ;;
 10235                           
 10236                           	psect	text34
 10237  003248                     __ptext34:
 10238                           	opt stack 0
 10239  003248                     _next_dir_entry:
 10240                           	opt stack 15
 10241                           
 10242                           ;tff.c: 362: CLUST clust;
 10243                           ;tff.c: 363: WORD idx;
 10244                           ;tff.c: 366: idx = dj->index + 1;
 10245                           
 10246                           ;incstack = 0
 10247  003248  0100               	movlb	0	; () banked
 10248  00324A  EE20 F002          	lfsr	2,2
 10249  00324E  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10250  003250  26D9               	addwf	fsr2l,f,c
 10251  003252  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10252  003254  22DA               	addwfc	fsr2h,f,c
 10253  003256  CFDE F0B5          	movff	postinc2,??_next_dir_entry
 10254  00325A  CFDD F0B6          	movff	postdec2,??_next_dir_entry+1
 10255  00325E  0E01               	movlw	1
 10256  003260  25B5               	addwf	??_next_dir_entry& (0+255),w,b
 10257  003262  6FBE               	movwf	next_dir_entry@idx& (0+255),b
 10258  003264  0E00               	movlw	0
 10259  003266  21B6               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
 10260  003268  6FBF               	movwf	(next_dir_entry@idx+1)& (0+255),b
 10261                           
 10262                           ; BSR set to: 0
 10263                           ;tff.c: 367: if ((idx & 15) == 0) {
 10264  00326A  0E0F               	movlw	15
 10265  00326C  15BE               	andwf	next_dir_entry@idx& (0+255),w,b
 10266  00326E  6FB5               	movwf	??_next_dir_entry& (0+255),b
 10267  003270  0E00               	movlw	0
 10268  003272  15BF               	andwf	(next_dir_entry@idx+1)& (0+255),w,b
 10269  003274  6FB6               	movwf	(??_next_dir_entry+1)& (0+255),b
 10270  003276  51B5               	movf	??_next_dir_entry& (0+255),w,b
 10271  003278  11B6               	iorwf	(??_next_dir_entry+1)& (0+255),w,b
 10272  00327A  A4D8               	btfss	status,2,c
 10273  00327C  D09D               	goto	l1017
 10274                           
 10275                           ; BSR set to: 0
 10276                           ;tff.c: 368: dj->sect++;
 10277  00327E  EE20 F00A          	lfsr	2,10
 10278  003282  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10279  003284  26D9               	addwf	fsr2l,f,c
 10280  003286  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10281  003288  22DA               	addwfc	fsr2h,f,c
 10282  00328A  2ADE               	incf	postinc2,f,c
 10283  00328C  0E00               	movlw	0
 10284  00328E  22DE               	addwfc	postinc2,f,c
 10285  003290  22DE               	addwfc	postinc2,f,c
 10286  003292  22DE               	addwfc	postinc2,f,c
 10287                           
 10288                           ;tff.c: 369: if (dj->clust == 0) {
 10289  003294  EE20 F008          	lfsr	2,8
 10290  003298  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10291  00329A  26D9               	addwf	fsr2l,f,c
 10292  00329C  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10293  00329E  22DA               	addwfc	fsr2h,f,c
 10294  0032A0  50DE               	movf	postinc2,w,c
 10295  0032A2  10DE               	iorwf	postinc2,w,c
 10296  0032A4  A4D8               	btfss	status,2,c
 10297  0032A6  D014               	goto	l1013
 10298                           
 10299                           ; BSR set to: 0
 10300                           ;tff.c: 370: if (idx >= dj->fs->n_rootdir) return FALSE;
 10301  0032A8  EE20 F004          	lfsr	2,4
 10302  0032AC  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10303  0032AE  26D9               	addwf	fsr2l,f,c
 10304  0032B0  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10305  0032B2  22DA               	addwfc	fsr2h,f,c
 10306  0032B4  EE10 F002          	lfsr	1,2
 10307  0032B8  50DE               	movf	postinc2,w,c
 10308  0032BA  26E1               	addwf	fsr1l,f,c
 10309  0032BC  50DD               	movf	postdec2,w,c
 10310  0032BE  22E2               	addwfc	fsr1h,f,c
 10311  0032C0  50E6               	movf	postinc1,w,c
 10312  0032C2  5DBE               	subwf	next_dir_entry@idx& (0+255),w,b
 10313  0032C4  50E6               	movf	postinc1,w,c
 10314  0032C6  59BF               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
 10315  0032C8  A0D8               	btfss	status,0,c
 10316  0032CA  D076               	goto	l1017
 10317                           
 10318                           ; BSR set to: 0
 10319  0032CC  0E00               	movlw	0
 10320                           
 10321                           ; BSR set to: 0
 10322  0032CE  0012               	return	
 10323  0032D0                     l1013:
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;tff.c: 372: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
 10327                           
 10328                           ; BSR set to: 0
 10329  0032D0  C0BE  F0B5         	movff	next_dir_entry@idx,??_next_dir_entry
 10330  0032D4  C0BF  F0B6         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
 10331  0032D8  0E04               	movlw	4
 10332  0032DA  6FB7               	movwf	(??_next_dir_entry+2)& (0+255),b
 10333  0032DC                     u12195:
 10334  0032DC  90D8               	bcf	status,0,c
 10335  0032DE  33B6               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
 10336  0032E0  33B5               	rrcf	??_next_dir_entry& (0+255),f,b
 10337  0032E2  2FB7               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
 10338  0032E4  D7FB               	goto	u12195
 10339  0032E6  0EFF               	movlw	255
 10340  0032E8  6FB8               	movwf	(??_next_dir_entry+3)& (0+255),b
 10341  0032EA  0EFF               	movlw	255
 10342  0032EC  6FB9               	movwf	(??_next_dir_entry+4)& (0+255),b
 10343  0032EE  EE20 F004          	lfsr	2,4
 10344  0032F2  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10345  0032F4  26D9               	addwf	fsr2l,f,c
 10346  0032F6  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10347  0032F8  22DA               	addwfc	fsr2h,f,c
 10348  0032FA  EE10 F01D          	lfsr	1,29
 10349  0032FE  50DE               	movf	postinc2,w,c
 10350  003300  26E1               	addwf	fsr1l,f,c
 10351  003302  50DD               	movf	postdec2,w,c
 10352  003304  22E2               	addwfc	fsr1h,f,c
 10353  003306  50E7               	movf	indf1,w,c
 10354  003308  6FBA               	movwf	(??_next_dir_entry+5)& (0+255),b
 10355  00330A  6BBB               	clrf	(??_next_dir_entry+6)& (0+255),b
 10356  00330C  51B8               	movf	(??_next_dir_entry+3)& (0+255),w,b
 10357  00330E  27BA               	addwf	(??_next_dir_entry+5)& (0+255),f,b
 10358  003310  51B9               	movf	(??_next_dir_entry+4)& (0+255),w,b
 10359  003312  23BB               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
 10360  003314  51B5               	movf	??_next_dir_entry& (0+255),w,b
 10361  003316  17BA               	andwf	(??_next_dir_entry+5)& (0+255),f,b
 10362  003318  51B6               	movf	(??_next_dir_entry+1)& (0+255),w,b
 10363  00331A  17BB               	andwf	(??_next_dir_entry+6)& (0+255),f,b
 10364  00331C  51BA               	movf	(??_next_dir_entry+5)& (0+255),w,b
 10365  00331E  11BB               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
 10366  003320  A4D8               	btfss	status,2,c
 10367  003322  D04A               	goto	l1017
 10368                           
 10369                           ; BSR set to: 0
 10370                           ;tff.c: 373: clust = get_cluster(dj->clust);
 10371  003324  EE20 F008          	lfsr	2,8
 10372  003328  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10373  00332A  26D9               	addwf	fsr2l,f,c
 10374  00332C  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10375  00332E  22DA               	addwfc	fsr2h,f,c
 10376  003330  CFDE F0A0          	movff	postinc2,get_cluster@clust
 10377  003334  CFDD F0A1          	movff	postdec2,get_cluster@clust+1
 10378  003338  EC73  F015         	call	_get_cluster	;wreg free
 10379  00333C  C0A0  F0BC         	movff	?_get_cluster,next_dir_entry@clust
 10380  003340  C0A1  F0BD         	movff	?_get_cluster+1,next_dir_entry@clust+1
 10381                           
 10382                           ;tff.c: 374: if (clust < 2 || clust >= dj->fs->max_clust)
 10383  003344  0100               	movlb	0	; () banked
 10384  003346  51BD               	movf	(next_dir_entry@clust+1)& (0+255),w,b
 10385  003348  E104               	bnz	u12210
 10386  00334A  0E02               	movlw	2
 10387  00334C  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
 10388  00334E  A0D8               	btfss	status,0,c
 10389  003350  D012               	goto	u12220
 10390  003352                     u12210:
 10391                           
 10392                           ; BSR set to: 0
 10393  003352  EE20 F004          	lfsr	2,4
 10394  003356  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10395  003358  26D9               	addwf	fsr2l,f,c
 10396  00335A  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10397  00335C  22DA               	addwfc	fsr2h,f,c
 10398  00335E  EE10 F016          	lfsr	1,22
 10399  003362  50DE               	movf	postinc2,w,c
 10400  003364  26E1               	addwf	fsr1l,f,c
 10401  003366  50DD               	movf	postdec2,w,c
 10402  003368  22E2               	addwfc	fsr1h,f,c
 10403  00336A  50E6               	movf	postinc1,w,c
 10404  00336C  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
 10405  00336E  50E6               	movf	postinc1,w,c
 10406  003370  59BD               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
 10407  003372  A0D8               	btfss	status,0,c
 10408  003374  D002               	goto	l1018
 10409  003376                     u12220:
 10410                           
 10411                           ; BSR set to: 0
 10412                           ;tff.c: 375: return FALSE;
 10413                           
 10414                           ; BSR set to: 0
 10415  003376  0E00               	movlw	0
 10416                           
 10417                           ; BSR set to: 0
 10418  003378  0012               	return	
 10419  00337A                     l1018:
 10420                           
 10421                           ; BSR set to: 0
 10422                           ;tff.c: 376: dj->clust = clust;
 10423                           
 10424                           ; BSR set to: 0
 10425  00337A  EE20 F008          	lfsr	2,8
 10426  00337E  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10427  003380  26D9               	addwf	fsr2l,f,c
 10428  003382  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10429  003384  22DA               	addwfc	fsr2h,f,c
 10430  003386  C0BC  FFDE         	movff	next_dir_entry@clust,postinc2
 10431  00338A  C0BD  FFDD         	movff	next_dir_entry@clust+1,postdec2
 10432                           
 10433                           ; BSR set to: 0
 10434                           ;tff.c: 377: dj->sect = clust2sect(clust);
 10435  00338E  C0BC  F06C         	movff	next_dir_entry@clust,clust2sect@clust
 10436  003392  C0BD  F06D         	movff	next_dir_entry@clust+1,clust2sect@clust+1
 10437  003396  EC07  F01F         	call	_clust2sect	;wreg free
 10438  00339A  0100               	movlb	0	; () banked
 10439  00339C  EE20 F00A          	lfsr	2,10
 10440  0033A0  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10441  0033A2  26D9               	addwf	fsr2l,f,c
 10442  0033A4  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10443  0033A6  22DA               	addwfc	fsr2h,f,c
 10444  0033A8  C06C  FFDE         	movff	?_clust2sect,postinc2
 10445  0033AC  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 10446  0033B0  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 10447  0033B4  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 10448  0033B8                     l1017:
 10449                           
 10450                           ; BSR set to: 0
 10451                           ;tff.c: 378: }
 10452                           ;tff.c: 379: }
 10453                           ;tff.c: 380: }
 10454                           ;tff.c: 381: dj->index = idx;
 10455                           
 10456                           ; BSR set to: 0
 10457                           
 10458                           ; BSR set to: 0
 10459                           
 10460                           ; BSR set to: 0
 10461  0033B8  EE20 F002          	lfsr	2,2
 10462  0033BC  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10463  0033BE  26D9               	addwf	fsr2l,f,c
 10464  0033C0  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10465  0033C2  22DA               	addwfc	fsr2h,f,c
 10466  0033C4  C0BE  FFDE         	movff	next_dir_entry@idx,postinc2
 10467  0033C8  C0BF  FFDD         	movff	next_dir_entry@idx+1,postdec2
 10468                           
 10469                           ; BSR set to: 0
 10470                           ;tff.c: 382: return TRUE;
 10471  0033CC  0E01               	movlw	1
 10472  0033CE  0012               	return	
 10473  0033D0                     __end_of_next_dir_entry:
 10474                           	opt stack 0
 10475                           tosu	equ	0xFFF
 10476                           tosh	equ	0xFFE
 10477                           tosl	equ	0xFFD
 10478                           pclath	equ	0xFFA
 10479                           tblptru	equ	0xFF8
 10480                           tblptrh	equ	0xFF7
 10481                           tblptrl	equ	0xFF6
 10482                           tablat	equ	0xFF5
 10483                           prodh	equ	0xFF4
 10484                           prodl	equ	0xFF3
 10485                           intcon	equ	0xFF2
 10486                           intcon2	equ	0xFF1
 10487                           intcon3	equ	0xFF0
 10488                           indf0	equ	0xFEF
 10489                           postinc0	equ	0xFEE
 10490                           fsr0h	equ	0xFEA
 10491                           fsr0l	equ	0xFE9
 10492                           wreg	equ	0xFE8
 10493                           indf1	equ	0xFE7
 10494                           postinc1	equ	0xFE6
 10495                           postdec1	equ	0xFE5
 10496                           plusw1	equ	0xFE3
 10497                           fsr1h	equ	0xFE2
 10498                           fsr1l	equ	0xFE1
 10499                           indf2	equ	0xFDF
 10500                           postinc2	equ	0xFDE
 10501                           postdec2	equ	0xFDD
 10502                           plusw2	equ	0xFDB
 10503                           fsr2h	equ	0xFDA
 10504                           fsr2l	equ	0xFD9
 10505                           status	equ	0xFD8
 10506                           
 10507 ;; *************** function _clust2sect *****************
 10508 ;; Defined at:
 10509 ;;		line 338 in file "bibliotecas/tff.c"
 10510 ;; Parameters:    Size  Location     Type
 10511 ;;  clust           2   12[BANK0 ] unsigned short 
 10512 ;; Auto vars:     Size  Location     Type
 10513 ;;  fs              2   21[BANK0 ] PTR struct _FATFS
 10514 ;;		 -> NULL(0), fs(544), 
 10515 ;; Return value:  Size  Location     Type
 10516 ;;                  4   12[BANK0 ] unsigned long 
 10517 ;; Registers used:
 10518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10519 ;; Tracked objects:
 10520 ;;		On entry : 0/0
 10521 ;;		On exit  : 0/0
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10524 ;;      Params:         0       4       0       0       0       0       0       0       0
 10525 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10526 ;;      Temps:          0       5       0       0       0       0       0       0       0
 10527 ;;      Totals:         0      11       0       0       0       0       0       0       0
 10528 ;;Total ram usage:       11 bytes
 10529 ;; Hardware stack levels used:    1
 10530 ;; Hardware stack levels required when called:    4
 10531 ;; This function calls:
 10532 ;;		___lmul
 10533 ;; This function is called by:
 10534 ;;		_next_dir_entry
 10535 ;;		_trace_path
 10536 ;;		_reserve_direntry
 10537 ;;		_f_write
 10538 ;;		_f_read
 10539 ;;		_f_opendir
 10540 ;; This function uses a non-reentrant model
 10541 ;;
 10542                           
 10543                           	psect	text35
 10544  003E0E                     __ptext35:
 10545                           	opt stack 0
 10546  003E0E                     _clust2sect:
 10547                           	opt stack 19
 10548                           
 10549                           ;tff.c: 342: FATFS *fs = FatFs;
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;incstack = 0
 10553  003E0E  C0FD  F075         	movff	_FatFs,clust2sect@fs
 10554  003E12  C0FE  F076         	movff	_FatFs+1,clust2sect@fs+1
 10555                           
 10556                           ;tff.c: 345: clust -= 2;
 10557  003E16  0E02               	movlw	2
 10558  003E18  0100               	movlb	0	; () banked
 10559  003E1A  5F6C               	subwf	clust2sect@clust& (0+255),f,b
 10560  003E1C  0E00               	movlw	0
 10561  003E1E  5B6D               	subwfb	(clust2sect@clust+1)& (0+255),f,b
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;tff.c: 346: if (clust >= (fs->max_clust - 2)) return 0;
 10565  003E20  0EFE               	movlw	254
 10566  003E22  6F70               	movwf	??_clust2sect& (0+255),b
 10567  003E24  0EFF               	movlw	255
 10568  003E26  6F71               	movwf	(??_clust2sect+1)& (0+255),b
 10569  003E28  EE20 F016          	lfsr	2,22
 10570  003E2C  5175               	movf	clust2sect@fs& (0+255),w,b
 10571  003E2E  26D9               	addwf	fsr2l,f,c
 10572  003E30  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 10573  003E32  22DA               	addwfc	fsr2h,f,c
 10574  003E34  CFDE F072          	movff	postinc2,??_clust2sect+2
 10575  003E38  CFDD F073          	movff	postdec2,??_clust2sect+3
 10576  003E3C  5170               	movf	??_clust2sect& (0+255),w,b
 10577  003E3E  2772               	addwf	(??_clust2sect+2)& (0+255),f,b
 10578  003E40  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 10579  003E42  2373               	addwfc	(??_clust2sect+3)& (0+255),f,b
 10580  003E44  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 10581  003E46  5D6C               	subwf	clust2sect@clust& (0+255),w,b
 10582  003E48  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 10583  003E4A  596D               	subwfb	(clust2sect@clust+1)& (0+255),w,b
 10584  003E4C  A0D8               	btfss	status,0,c
 10585  003E4E  D009               	goto	l1008
 10586                           
 10587                           ; BSR set to: 0
 10588  003E50  0E00               	movlw	0
 10589  003E52  6F6C               	movwf	?_clust2sect& (0+255),b
 10590  003E54  0E00               	movlw	0
 10591  003E56  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 10592  003E58  0E00               	movlw	0
 10593  003E5A  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 10594  003E5C  0E00               	movlw	0
 10595  003E5E  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 10596                           
 10597                           ; BSR set to: 0
 10598  003E60  0012               	return	
 10599  003E62                     l1008:
 10600                           
 10601                           ; BSR set to: 0
 10602                           ;tff.c: 347: return (DWORD)clust * fs->csize + fs->database;
 10603                           
 10604                           ; BSR set to: 0
 10605  003E62  EE20 F010          	lfsr	2,16
 10606  003E66  5175               	movf	clust2sect@fs& (0+255),w,b
 10607  003E68  26D9               	addwf	fsr2l,f,c
 10608  003E6A  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 10609  003E6C  22DA               	addwfc	fsr2h,f,c
 10610  003E6E  CFDE F070          	movff	postinc2,??_clust2sect
 10611  003E72  CFDE F071          	movff	postinc2,??_clust2sect+1
 10612  003E76  CFDE F072          	movff	postinc2,??_clust2sect+2
 10613  003E7A  CFDE F073          	movff	postinc2,??_clust2sect+3
 10614  003E7E  C06C  F060         	movff	clust2sect@clust,___lmul@multiplier
 10615  003E82  C06D  F061         	movff	clust2sect@clust+1,___lmul@multiplier+1
 10616  003E86  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
 10617  003E88  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
 10618  003E8A  EE20 F01D          	lfsr	2,29
 10619  003E8E  5175               	movf	clust2sect@fs& (0+255),w,b
 10620  003E90  26D9               	addwf	fsr2l,f,c
 10621  003E92  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 10622  003E94  22DA               	addwfc	fsr2h,f,c
 10623  003E96  50DF               	movf	indf2,w,c
 10624  003E98  6F74               	movwf	(??_clust2sect+4)& (0+255),b
 10625  003E9A  5174               	movf	(??_clust2sect+4)& (0+255),w,b
 10626  003E9C  6F64               	movwf	___lmul@multiplicand& (0+255),b
 10627  003E9E  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 10628  003EA0  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 10629  003EA2  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 10630  003EA4  ECA0  F024         	call	___lmul	;wreg free
 10631  003EA8  0100               	movlb	0	; () banked
 10632  003EAA  5170               	movf	??_clust2sect& (0+255),w,b
 10633  003EAC  2560               	addwf	?___lmul& (0+255),w,b
 10634  003EAE  6F6C               	movwf	?_clust2sect& (0+255),b
 10635  003EB0  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 10636  003EB2  2161               	addwfc	(?___lmul+1)& (0+255),w,b
 10637  003EB4  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 10638  003EB6  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 10639  003EB8  2162               	addwfc	(?___lmul+2)& (0+255),w,b
 10640  003EBA  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 10641  003EBC  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 10642  003EBE  2163               	addwfc	(?___lmul+3)& (0+255),w,b
 10643  003EC0  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 10644  003EC2  0012               	return	
 10645  003EC4                     __end_of_clust2sect:
 10646                           	opt stack 0
 10647                           tosu	equ	0xFFF
 10648                           tosh	equ	0xFFE
 10649                           tosl	equ	0xFFD
 10650                           pclath	equ	0xFFA
 10651                           tblptru	equ	0xFF8
 10652                           tblptrh	equ	0xFF7
 10653                           tblptrl	equ	0xFF6
 10654                           tablat	equ	0xFF5
 10655                           prodh	equ	0xFF4
 10656                           prodl	equ	0xFF3
 10657                           intcon	equ	0xFF2
 10658                           intcon2	equ	0xFF1
 10659                           intcon3	equ	0xFF0
 10660                           indf0	equ	0xFEF
 10661                           postinc0	equ	0xFEE
 10662                           fsr0h	equ	0xFEA
 10663                           fsr0l	equ	0xFE9
 10664                           wreg	equ	0xFE8
 10665                           indf1	equ	0xFE7
 10666                           postinc1	equ	0xFE6
 10667                           postdec1	equ	0xFE5
 10668                           plusw1	equ	0xFE3
 10669                           fsr1h	equ	0xFE2
 10670                           fsr1l	equ	0xFE1
 10671                           indf2	equ	0xFDF
 10672                           postinc2	equ	0xFDE
 10673                           postdec2	equ	0xFDD
 10674                           plusw2	equ	0xFDB
 10675                           fsr2h	equ	0xFDA
 10676                           fsr2l	equ	0xFD9
 10677                           status	equ	0xFD8
 10678                           
 10679 ;; *************** function _remove_chain *****************
 10680 ;; Defined at:
 10681 ;;		line 249 in file "bibliotecas/tff.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;  clust           2   86[BANK0 ] unsigned short 
 10684 ;; Auto vars:     Size  Location     Type
 10685 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 10686 ;;		 -> NULL(0), fs(544), 
 10687 ;;  nxt             2   90[BANK0 ] unsigned short 
 10688 ;; Return value:  Size  Location     Type
 10689 ;;                  1    wreg      enum E105
 10690 ;; Registers used:
 10691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10697 ;;      Params:         0       2       0       0       0       0       0       0       0
 10698 ;;      Locals:         0       4       0       0       0       0       0       0       0
 10699 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10700 ;;      Totals:         0       8       0       0       0       0       0       0       0
 10701 ;;Total ram usage:        8 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:   10
 10704 ;; This function calls:
 10705 ;;		_get_cluster
 10706 ;;		_put_cluster
 10707 ;; This function is called by:
 10708 ;;		_f_open
 10709 ;; This function uses a non-reentrant model
 10710 ;;
 10711                           
 10712                           	psect	text36
 10713  003F6C                     __ptext36:
 10714                           	opt stack 0
 10715  003F6C                     _remove_chain:
 10716                           	opt stack 16
 10717                           
 10718                           ;tff.c: 253: CLUST nxt;
 10719                           ;tff.c: 254: FATFS *fs = FatFs;
 10720                           
 10721                           ; BSR set to: 0
 10722                           ;incstack = 0
 10723  003F6C  C0FD  F0BC         	movff	_FatFs,remove_chain@fs
 10724  003F70  C0FE  F0BD         	movff	_FatFs+1,remove_chain@fs+1
 10725                           
 10726                           ;tff.c: 257: while (clust >= 2 && clust < fs->max_clust) {
 10727  003F74  D039               	goto	l977
 10728  003F76                     
 10729                           ;tff.c: 258: nxt = get_cluster(clust);
 10730  003F76  C0B6  F0A0         	movff	remove_chain@clust,get_cluster@clust
 10731  003F7A  C0B7  F0A1         	movff	remove_chain@clust+1,get_cluster@clust+1
 10732  003F7E  EC73  F015         	call	_get_cluster	;wreg free
 10733  003F82  C0A0  F0BA         	movff	?_get_cluster,remove_chain@nxt
 10734  003F86  C0A1  F0BB         	movff	?_get_cluster+1,remove_chain@nxt+1
 10735                           
 10736                           ;tff.c: 259: if (nxt == 1) return FALSE;
 10737  003F8A  0100               	movlb	0	; () banked
 10738  003F8C  05BA               	decf	remove_chain@nxt& (0+255),w,b
 10739  003F8E  11BB               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 10740  003F90  A4D8               	btfss	status,2,c
 10741  003F92  D002               	goto	l979
 10742                           
 10743                           ; BSR set to: 0
 10744  003F94  0E00               	movlw	0
 10745                           
 10746                           ; BSR set to: 0
 10747  003F96  0012               	return	
 10748  003F98                     l979:
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;tff.c: 260: if (!put_cluster(clust, 0)) return FALSE;
 10752                           
 10753                           ; BSR set to: 0
 10754  003F98  C0B6  F0A0         	movff	remove_chain@clust,put_cluster@clust
 10755  003F9C  C0B7  F0A1         	movff	remove_chain@clust+1,put_cluster@clust+1
 10756  003FA0  0E00               	movlw	0
 10757  003FA2  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 10758  003FA4  0E00               	movlw	0
 10759  003FA6  6FA2               	movwf	put_cluster@val& (0+255),b
 10760  003FA8  EC36  F014         	call	_put_cluster	;wreg free
 10761  003FAC  0900               	iorlw	0
 10762  003FAE  A4D8               	btfss	status,2,c
 10763  003FB0  D002               	goto	l981
 10764  003FB2  0E00               	movlw	0
 10765  003FB4  0012               	return	
 10766  003FB6                     l981:
 10767                           
 10768                           ;tff.c: 261: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 10769  003FB6  0100               	movlb	0	; () banked
 10770  003FB8  EE20 F01A          	lfsr	2,26
 10771  003FBC  51BC               	movf	remove_chain@fs& (0+255),w,b
 10772  003FBE  26D9               	addwf	fsr2l,f,c
 10773  003FC0  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 10774  003FC2  22DA               	addwfc	fsr2h,f,c
 10775  003FC4  28DE               	incf	postinc2,w,c
 10776  003FC6  E103               	bnz	u12810
 10777  003FC8  28DE               	incf	postinc2,w,c
 10778  003FCA  B4D8               	btfsc	status,2,c
 10779  003FCC  D009               	goto	l982
 10780  003FCE                     u12810:
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;tff.c: 262: fs->free_clust++;
 10784  003FCE  EE20 F01A          	lfsr	2,26
 10785  003FD2  51BC               	movf	remove_chain@fs& (0+255),w,b
 10786  003FD4  26D9               	addwf	fsr2l,f,c
 10787  003FD6  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 10788  003FD8  22DA               	addwfc	fsr2h,f,c
 10789  003FDA  2ADE               	incf	postinc2,f,c
 10790  003FDC  0E00               	movlw	0
 10791  003FDE  22DD               	addwfc	postdec2,f,c
 10792  003FE0                     l982:
 10793                           
 10794                           ; BSR set to: 0
 10795                           ;tff.c: 266: }
 10796                           ;tff.c: 267: clust = nxt;
 10797                           
 10798                           ; BSR set to: 0
 10799  003FE0  C0BA  F0B6         	movff	remove_chain@nxt,remove_chain@clust
 10800  003FE4  C0BB  F0B7         	movff	remove_chain@nxt+1,remove_chain@clust+1
 10801  003FE8                     l977:
 10802                           
 10803                           ; BSR set to: 0
 10804  003FE8  0100               	movlb	0	; () banked
 10805  003FEA  51B7               	movf	(remove_chain@clust+1)& (0+255),w,b
 10806  003FEC  E104               	bnz	u12820
 10807  003FEE  0E02               	movlw	2
 10808  003FF0  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 10809  003FF2  A0D8               	btfss	status,0,c
 10810  003FF4  D00C               	goto	u12830
 10811  003FF6                     u12820:
 10812                           
 10813                           ; BSR set to: 0
 10814  003FF6  EE20 F016          	lfsr	2,22
 10815  003FFA  51BC               	movf	remove_chain@fs& (0+255),w,b
 10816  003FFC  26D9               	addwf	fsr2l,f,c
 10817  003FFE  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 10818  004000  22DA               	addwfc	fsr2h,f,c
 10819  004002  50DE               	movf	postinc2,w,c
 10820  004004  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 10821  004006  50DE               	movf	postinc2,w,c
 10822  004008  59B7               	subwfb	(remove_chain@clust+1)& (0+255),w,b
 10823  00400A  A0D8               	btfss	status,0,c
 10824  00400C  D7B4               	goto	l978
 10825  00400E                     u12830:
 10826                           
 10827                           ; BSR set to: 0
 10828                           ;tff.c: 268: }
 10829                           ;tff.c: 269: return TRUE;
 10830                           
 10831                           ; BSR set to: 0
 10832                           
 10833                           ; BSR set to: 0
 10834  00400E  0E01               	movlw	1
 10835  004010  0012               	return	
 10836  004012                     __end_of_remove_chain:
 10837                           	opt stack 0
 10838                           tosu	equ	0xFFF
 10839                           tosh	equ	0xFFE
 10840                           tosl	equ	0xFFD
 10841                           pclath	equ	0xFFA
 10842                           tblptru	equ	0xFF8
 10843                           tblptrh	equ	0xFF7
 10844                           tblptrl	equ	0xFF6
 10845                           tablat	equ	0xFF5
 10846                           prodh	equ	0xFF4
 10847                           prodl	equ	0xFF3
 10848                           intcon	equ	0xFF2
 10849                           intcon2	equ	0xFF1
 10850                           intcon3	equ	0xFF0
 10851                           indf0	equ	0xFEF
 10852                           postinc0	equ	0xFEE
 10853                           fsr0h	equ	0xFEA
 10854                           fsr0l	equ	0xFE9
 10855                           wreg	equ	0xFE8
 10856                           indf1	equ	0xFE7
 10857                           postinc1	equ	0xFE6
 10858                           postdec1	equ	0xFE5
 10859                           plusw1	equ	0xFE3
 10860                           fsr1h	equ	0xFE2
 10861                           fsr1l	equ	0xFE1
 10862                           indf2	equ	0xFDF
 10863                           postinc2	equ	0xFDE
 10864                           postdec2	equ	0xFDD
 10865                           plusw2	equ	0xFDB
 10866                           fsr2h	equ	0xFDA
 10867                           fsr2l	equ	0xFD9
 10868                           status	equ	0xFD8
 10869                           
 10870 ;; *************** function _memcpy *****************
 10871 ;; Defined at:
 10872 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
 10873 ;; Parameters:    Size  Location     Type
 10874 ;;  d1              2    0[BANK0 ] PTR void 
 10875 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 10876 ;;  s1              2    2[BANK0 ] PTR const void 
 10877 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 10878 ;;		 -> fs(544), 
 10879 ;;  n               2    4[BANK0 ] unsigned int 
 10880 ;; Auto vars:     Size  Location     Type
 10881 ;;  s               2    9[BANK0 ] PTR const unsigned char 
 10882 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 10883 ;;		 -> fs(544), 
 10884 ;;  d               2    7[BANK0 ] PTR unsigned char 
 10885 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 10886 ;;  tmp             1    6[BANK0 ] unsigned char 
 10887 ;; Return value:  Size  Location     Type
 10888 ;;                  2    0[BANK0 ] PTR void 
 10889 ;; Registers used:
 10890 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10891 ;; Tracked objects:
 10892 ;;		On entry : 0/0
 10893 ;;		On exit  : 0/0
 10894 ;;		Unchanged: 0/0
 10895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10896 ;;      Params:         0       6       0       0       0       0       0       0       0
 10897 ;;      Locals:         0       5       0       0       0       0       0       0       0
 10898 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10899 ;;      Totals:         0      11       0       0       0       0       0       0       0
 10900 ;;Total ram usage:       11 bytes
 10901 ;; Hardware stack levels used:    1
 10902 ;; Hardware stack levels required when called:    3
 10903 ;; This function calls:
 10904 ;;		Nothing
 10905 ;; This function is called by:
 10906 ;;		_f_open
 10907 ;;		_f_write
 10908 ;;		_f_read
 10909 ;; This function uses a non-reentrant model
 10910 ;;
 10911                           
 10912                           	psect	text37
 10913  004B76                     __ptext37:
 10914                           	opt stack 0
 10915  004B76                     _memcpy:
 10916                           	opt stack 20
 10917                           
 10918                           ;incstack = 0
 10919  004B76  C062  F069         	movff	memcpy@s1,memcpy@s
 10920  004B7A  C063  F06A         	movff	memcpy@s1+1,memcpy@s+1
 10921  004B7E  C060  F067         	movff	memcpy@d1,memcpy@d
 10922  004B82  C061  F068         	movff	memcpy@d1+1,memcpy@d+1
 10923  004B86  D011               	goto	l1884
 10924  004B88                     l9526:
 10925  004B88  C069  FFD9         	movff	memcpy@s,fsr2l
 10926  004B8C  C06A  FFDA         	movff	memcpy@s+1,fsr2h
 10927  004B90  50DF               	movf	indf2,w,c
 10928  004B92  0100               	movlb	0	; () banked
 10929  004B94  6F66               	movwf	memcpy@tmp& (0+255),b
 10930                           
 10931                           ; BSR set to: 0
 10932  004B96  4B69               	infsnz	memcpy@s& (0+255),f,b
 10933  004B98  2B6A               	incf	(memcpy@s+1)& (0+255),f,b
 10934                           
 10935                           ; BSR set to: 0
 10936  004B9A  C067  FFD9         	movff	memcpy@d,fsr2l
 10937  004B9E  C068  FFDA         	movff	memcpy@d+1,fsr2h
 10938  004BA2  C066  FFDF         	movff	memcpy@tmp,indf2
 10939                           
 10940                           ; BSR set to: 0
 10941  004BA6  4B67               	infsnz	memcpy@d& (0+255),f,b
 10942  004BA8  2B68               	incf	(memcpy@d+1)& (0+255),f,b
 10943  004BAA                     l1884:
 10944                           
 10945                           ; BSR set to: 0
 10946  004BAA  0100               	movlb	0	; () banked
 10947  004BAC  0764               	decf	memcpy@n& (0+255),f,b
 10948  004BAE  A0D8               	btfss	status,0,c
 10949  004BB0  0765               	decf	(memcpy@n+1)& (0+255),f,b
 10950  004BB2  2964               	incf	memcpy@n& (0+255),w,b
 10951  004BB4  E1E9               	bnz	l9526
 10952  004BB6  2965               	incf	(memcpy@n+1)& (0+255),w,b
 10953  004BB8  B4D8               	btfsc	status,2,c
 10954  004BBA  0012               	return	
 10955  004BBC  D7E5               	goto	l1885
 10956  004BBE                     __end_of_memcpy:
 10957                           	opt stack 0
 10958                           tosu	equ	0xFFF
 10959                           tosh	equ	0xFFE
 10960                           tosl	equ	0xFFD
 10961                           pclath	equ	0xFFA
 10962                           tblptru	equ	0xFF8
 10963                           tblptrh	equ	0xFF7
 10964                           tblptrl	equ	0xFF6
 10965                           tablat	equ	0xFF5
 10966                           prodh	equ	0xFF4
 10967                           prodl	equ	0xFF3
 10968                           intcon	equ	0xFF2
 10969                           intcon2	equ	0xFF1
 10970                           intcon3	equ	0xFF0
 10971                           indf0	equ	0xFEF
 10972                           postinc0	equ	0xFEE
 10973                           fsr0h	equ	0xFEA
 10974                           fsr0l	equ	0xFE9
 10975                           wreg	equ	0xFE8
 10976                           indf1	equ	0xFE7
 10977                           postinc1	equ	0xFE6
 10978                           postdec1	equ	0xFE5
 10979                           plusw1	equ	0xFE3
 10980                           fsr1h	equ	0xFE2
 10981                           fsr1l	equ	0xFE1
 10982                           indf2	equ	0xFDF
 10983                           postinc2	equ	0xFDE
 10984                           postdec2	equ	0xFDD
 10985                           plusw2	equ	0xFDB
 10986                           fsr2h	equ	0xFDA
 10987                           fsr2l	equ	0xFD9
 10988                           status	equ	0xFD8
 10989                           
 10990 ;; *************** function _auto_mount *****************
 10991 ;; Defined at:
 10992 ;;		line 651 in file "bibliotecas/tff.c"
 10993 ;; Parameters:    Size  Location     Type
 10994 ;;  path            2   51[BANK0 ] PTR PTR const unsigned c
 10995 ;;		 -> f_opendir@path(2), f_open@path(2), 
 10996 ;;  chk_wp          1   53[BANK0 ] unsigned char 
 10997 ;; Auto vars:     Size  Location     Type
 10998 ;;  fatsize         4   85[BANK0 ] unsigned long 
 10999 ;;  totalsect       4   77[BANK0 ] unsigned long 
 11000 ;;  bootsect        4   73[BANK0 ] unsigned long 
 11001 ;;  maxclust        4   69[BANK0 ] unsigned long 
 11002 ;;  fs              2   89[BANK0 ] PTR struct _FATFS
 11003 ;;		 -> NULL(0), fs(544), 
 11004 ;;  p               2   81[BANK0 ] PTR const unsigned char 
 11005 ;;		 -> STR_19(13), filename(15), 
 11006 ;;  stat            1   84[BANK0 ] unsigned char 
 11007 ;;  fmt             1   83[BANK0 ] unsigned char 
 11008 ;; Return value:  Size  Location     Type
 11009 ;;                  1    wreg      enum E155
 11010 ;; Registers used:
 11011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11012 ;; Tracked objects:
 11013 ;;		On entry : 0/0
 11014 ;;		On exit  : 0/0
 11015 ;;		Unchanged: 0/0
 11016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11017 ;;      Params:         0       3       0       0       0       0       0       0       0
 11018 ;;      Locals:         0      22       0       0       0       0       0       0       0
 11019 ;;      Temps:          0      15       0       0       0       0       0       0       0
 11020 ;;      Totals:         0      40       0       0       0       0       0       0       0
 11021 ;;Total ram usage:       40 bytes
 11022 ;; Hardware stack levels used:    1
 11023 ;; Hardware stack levels required when called:    9
 11024 ;; This function calls:
 11025 ;;		___lldiv
 11026 ;;		___lmul
 11027 ;;		_check_fs
 11028 ;;		_disk_initialize
 11029 ;;		_disk_status
 11030 ;;		_memset
 11031 ;; This function is called by:
 11032 ;;		_f_open
 11033 ;;		_f_opendir
 11034 ;; This function uses a non-reentrant model
 11035 ;;
 11036                           
 11037                           	psect	text38
 11038  000C1C                     __ptext38:
 11039                           	opt stack 0
 11040  000C1C                     _auto_mount:
 11041                           	opt stack 17
 11042                           
 11043                           ;tff.c: 656: BYTE fmt;
 11044                           ;tff.c: 657: DSTATUS stat;
 11045                           ;tff.c: 658: DWORD bootsect, fatsize, totalsect, maxclust;
 11046                           ;tff.c: 659: const char *p = *path;
 11047                           
 11048                           ; BSR set to: 0
 11049                           ;incstack = 0
 11050  000C1C  C093  FFD9         	movff	auto_mount@path,fsr2l
 11051  000C20  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 11052  000C24  CFDE F0B1          	movff	postinc2,auto_mount@p
 11053  000C28  CFDD F0B2          	movff	postdec2,auto_mount@p+1
 11054                           
 11055                           ;tff.c: 660: FATFS *fs;
 11056                           ;tff.c: 663: while (*p == ' ') p++;
 11057  000C2C  D003               	goto	l1137
 11058  000C2E  0100               	movlb	0	; () banked
 11059  000C30  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 11060  000C32  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 11061  000C34                     l1137:
 11062                           
 11063                           ; BSR set to: 0
 11064  000C34  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 11065  000C38  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 11066  000C3C  6AF8               	clrf	tblptru,c
 11067  000C3E  0E07               	movlw	(high __ramtop+-1)
 11068  000C40  64F7               	cpfsgt	tblptrh,c
 11069  000C42  D003               	bra	u13107
 11070  000C44  0008               	tblrd		*
 11071  000C46  50F5               	movf	tablat,w,c
 11072  000C48  D005               	bra	u13100
 11073  000C4A                     u13107:
 11074  000C4A  CFF6 FFE9          	movff	tblptrl,fsr0l
 11075  000C4E  CFF7 FFEA          	movff	tblptrh,fsr0h
 11076  000C52  50EF               	movf	indf0,w,c
 11077  000C54                     u13100:
 11078  000C54  0A20               	xorlw	32
 11079  000C56  B4D8               	btfsc	status,2,c
 11080  000C58  D7EA               	goto	l1138
 11081                           
 11082                           ;tff.c: 664: if (*p == '/') p++;
 11083  000C5A  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 11084  000C5E  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 11085  000C62  6AF8               	clrf	tblptru,c
 11086  000C64  0E07               	movlw	(high __ramtop+-1)
 11087  000C66  64F7               	cpfsgt	tblptrh,c
 11088  000C68  D003               	bra	u13127
 11089  000C6A  0008               	tblrd		*
 11090  000C6C  50F5               	movf	tablat,w,c
 11091  000C6E  D005               	bra	u13120
 11092  000C70                     u13127:
 11093  000C70  CFF6 FFE9          	movff	tblptrl,fsr0l
 11094  000C74  CFF7 FFEA          	movff	tblptrh,fsr0h
 11095  000C78  50EF               	movf	indf0,w,c
 11096  000C7A                     u13120:
 11097  000C7A  0A2F               	xorlw	47
 11098  000C7C  A4D8               	btfss	status,2,c
 11099  000C7E  D003               	goto	l1140
 11100  000C80  0100               	movlb	0	; () banked
 11101  000C82  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 11102  000C84  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 11103  000C86                     l1140:
 11104                           
 11105                           ;tff.c: 665: *path = p;
 11106                           
 11107                           ; BSR set to: 0
 11108  000C86  C093  FFD9         	movff	auto_mount@path,fsr2l
 11109  000C8A  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 11110  000C8E  C0B1  FFDE         	movff	auto_mount@p,postinc2
 11111  000C92  C0B2  FFDD         	movff	auto_mount@p+1,postdec2
 11112                           
 11113                           ;tff.c: 668: fs = FatFs;
 11114  000C96  C0FD  F0B9         	movff	_FatFs,auto_mount@fs
 11115  000C9A  C0FE  F0BA         	movff	_FatFs+1,auto_mount@fs+1
 11116                           
 11117                           ;tff.c: 669: if (!fs) return FR_NOT_ENABLED;
 11118  000C9E  0100               	movlb	0	; () banked
 11119  000CA0  51B9               	movf	auto_mount@fs& (0+255),w,b
 11120  000CA2  11BA               	iorwf	(auto_mount@fs+1)& (0+255),w,b
 11121  000CA4  A4D8               	btfss	status,2,c
 11122  000CA6  D002               	goto	l1141
 11123                           
 11124                           ; BSR set to: 0
 11125  000CA8  0E0A               	movlw	10
 11126                           
 11127                           ; BSR set to: 0
 11128  000CAA  0012               	return	
 11129  000CAC                     l1141:
 11130                           
 11131                           ; BSR set to: 0
 11132                           ;tff.c: 671: if (fs->fs_type) {
 11133                           
 11134                           ; BSR set to: 0
 11135  000CAC  EE20 F01C          	lfsr	2,28
 11136  000CB0  51B9               	movf	auto_mount@fs& (0+255),w,b
 11137  000CB2  26D9               	addwf	fsr2l,f,c
 11138  000CB4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11139  000CB6  22DA               	addwfc	fsr2h,f,c
 11140  000CB8  50DF               	movf	indf2,w,c
 11141  000CBA  B4D8               	btfsc	status,2,c
 11142  000CBC  D00F               	goto	l1144
 11143                           
 11144                           ; BSR set to: 0
 11145                           ;tff.c: 672: stat = disk_status(0);
 11146  000CBE  0E00               	movlw	0
 11147  000CC0  ECDF  F025         	call	_disk_status
 11148  000CC4  0100               	movlb	0	; () banked
 11149  000CC6  6FB4               	movwf	auto_mount@stat& (0+255),b
 11150                           
 11151                           ; BSR set to: 0
 11152                           ;tff.c: 673: if (!(stat & 0x01)) {
 11153  000CC8  B1B4               	btfsc	auto_mount@stat& (0+255),0,b
 11154  000CCA  D008               	goto	l1144
 11155                           
 11156                           ; BSR set to: 0
 11157                           ;tff.c: 675: if (chk_wp && (stat & 0x04))
 11158  000CCC  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 11159  000CCE  A4D8               	btfss	status,2,c
 11160                           
 11161                           ; BSR set to: 0
 11162  000CD0  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 11163  000CD2  D002               	goto	l1145
 11164                           
 11165                           ; BSR set to: 0
 11166                           ;tff.c: 676: return FR_WRITE_PROTECTED;
 11167  000CD4  0E09               	movlw	9
 11168                           
 11169                           ; BSR set to: 0
 11170  000CD6  0012               	return	
 11171  000CD8                     l1145:
 11172                           
 11173                           ; BSR set to: 0
 11174                           ;tff.c: 678: return FR_OK;
 11175                           
 11176                           ; BSR set to: 0
 11177  000CD8  0E00               	movlw	0
 11178                           
 11179                           ; BSR set to: 0
 11180  000CDA  0012               	return	
 11181  000CDC                     l1144:
 11182                           
 11183                           ; BSR set to: 0
 11184                           ;tff.c: 679: }
 11185                           ;tff.c: 680: }
 11186                           ;tff.c: 684: memset(fs, 0, sizeof(FATFS));
 11187                           
 11188                           ; BSR set to: 0
 11189                           
 11190                           ; BSR set to: 0
 11191  000CDC  C0B9  F060         	movff	auto_mount@fs,memset@p1
 11192  000CE0  C0BA  F061         	movff	auto_mount@fs+1,memset@p1+1
 11193  000CE4  0E00               	movlw	0
 11194  000CE6  6F63               	movwf	(memset@c+1)& (0+255),b
 11195  000CE8  0E00               	movlw	0
 11196  000CEA  6F62               	movwf	memset@c& (0+255),b
 11197  000CEC  0E02               	movlw	2
 11198  000CEE  6F65               	movwf	(memset@n+1)& (0+255),b
 11199  000CF0  0E20               	movlw	32
 11200  000CF2  6F64               	movwf	memset@n& (0+255),b
 11201  000CF4  ECDE  F026         	call	_memset	;wreg free
 11202                           
 11203                           ;tff.c: 685: stat = disk_initialize(0);
 11204  000CF8  0E00               	movlw	0
 11205  000CFA  EC89  F026         	call	_disk_initialize
 11206  000CFE  0100               	movlb	0	; () banked
 11207  000D00  6FB4               	movwf	auto_mount@stat& (0+255),b
 11208                           
 11209                           ; BSR set to: 0
 11210                           ;tff.c: 686: if (stat & 0x01)
 11211  000D02  A1B4               	btfss	auto_mount@stat& (0+255),0,b
 11212  000D04  D002               	goto	l1146
 11213                           
 11214                           ; BSR set to: 0
 11215                           ;tff.c: 687: return FR_NOT_READY;
 11216  000D06  0E01               	movlw	1
 11217                           
 11218                           ; BSR set to: 0
 11219  000D08  0012               	return	
 11220  000D0A                     l1146:
 11221                           
 11222                           ; BSR set to: 0
 11223                           ;tff.c: 689: if (chk_wp && (stat & 0x04))
 11224                           
 11225                           ; BSR set to: 0
 11226  000D0A  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 11227  000D0C  A4D8               	btfss	status,2,c
 11228                           
 11229                           ; BSR set to: 0
 11230  000D0E  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 11231  000D10  D002               	goto	l1147
 11232                           
 11233                           ; BSR set to: 0
 11234                           ;tff.c: 690: return FR_WRITE_PROTECTED;
 11235  000D12  0E09               	movlw	9
 11236                           
 11237                           ; BSR set to: 0
 11238  000D14  0012               	return	
 11239  000D16                     l1147:
 11240                           
 11241                           ; BSR set to: 0
 11242                           ;tff.c: 694: fmt = check_fs(bootsect = 0);
 11243                           
 11244                           ; BSR set to: 0
 11245  000D16  0E00               	movlw	0
 11246  000D18  6FA9               	movwf	auto_mount@bootsect& (0+255),b
 11247  000D1A  0E00               	movlw	0
 11248  000D1C  6FAA               	movwf	(auto_mount@bootsect+1)& (0+255),b
 11249  000D1E  0E00               	movlw	0
 11250  000D20  6FAB               	movwf	(auto_mount@bootsect+2)& (0+255),b
 11251  000D22  0E00               	movlw	0
 11252  000D24  6FAC               	movwf	(auto_mount@bootsect+3)& (0+255),b
 11253  000D26  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 11254  000D2A  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 11255  000D2E  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 11256  000D32  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 11257  000D36  ECDC  F021         	call	_check_fs	;wreg free
 11258  000D3A  0100               	movlb	0	; () banked
 11259  000D3C  6FB3               	movwf	auto_mount@fmt& (0+255),b
 11260                           
 11261                           ; BSR set to: 0
 11262                           ;tff.c: 696: if (fmt == 1) {
 11263  000D3E  05B3               	decf	auto_mount@fmt& (0+255),w,b
 11264  000D40  A4D8               	btfss	status,2,c
 11265  000D42  D023               	goto	l1149
 11266                           
 11267                           ; BSR set to: 0
 11268                           ;tff.c: 698: if (fs->win[446+4]) {
 11269  000D44  EE21 F0E2          	lfsr	2,482
 11270  000D48  51B9               	movf	auto_mount@fs& (0+255),w,b
 11271  000D4A  26D9               	addwf	fsr2l,f,c
 11272  000D4C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11273  000D4E  22DA               	addwfc	fsr2h,f,c
 11274  000D50  50DF               	movf	indf2,w,c
 11275  000D52  B4D8               	btfsc	status,2,c
 11276  000D54  D01A               	goto	l1149
 11277                           
 11278                           ; BSR set to: 0
 11279                           ;tff.c: 699: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 11280  000D56  EE21 F0E6          	lfsr	2,486
 11281  000D5A  51B9               	movf	auto_mount@fs& (0+255),w,b
 11282  000D5C  26D9               	addwf	fsr2l,f,c
 11283  000D5E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11284  000D60  22DA               	addwfc	fsr2h,f,c
 11285  000D62  CFDE F0A9          	movff	postinc2,auto_mount@bootsect
 11286  000D66  CFDE F0AA          	movff	postinc2,auto_mount@bootsect+1
 11287  000D6A  CFDE F0AB          	movff	postinc2,auto_mount@bootsect+2
 11288  000D6E  CFDE F0AC          	movff	postinc2,auto_mount@bootsect+3
 11289                           
 11290                           ; BSR set to: 0
 11291                           ;tff.c: 700: fmt = check_fs(bootsect);
 11292  000D72  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 11293  000D76  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 11294  000D7A  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 11295  000D7E  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 11296  000D82  ECDC  F021         	call	_check_fs	;wreg free
 11297  000D86  0100               	movlb	0	; () banked
 11298  000D88  6FB3               	movwf	auto_mount@fmt& (0+255),b
 11299  000D8A                     l1149:
 11300                           
 11301                           ; BSR set to: 0
 11302                           ;tff.c: 701: }
 11303                           ;tff.c: 702: }
 11304                           ;tff.c: 703: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])) != 512U)
 11305                           
 11306                           ; BSR set to: 0
 11307                           
 11308                           ; BSR set to: 0
 11309  000D8A  51B3               	movf	auto_mount@fmt& (0+255),w,b
 11310  000D8C  A4D8               	btfss	status,2,c
 11311  000D8E  D00C               	goto	u13250
 11312                           
 11313                           ; BSR set to: 0
 11314  000D90  EE20 F02B          	lfsr	2,43
 11315  000D94  51B9               	movf	auto_mount@fs& (0+255),w,b
 11316  000D96  26D9               	addwf	fsr2l,f,c
 11317  000D98  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11318  000D9A  22DA               	addwfc	fsr2h,f,c
 11319  000D9C  50DE               	movf	postinc2,w,c
 11320  000D9E  E104               	bnz	l10422
 11321  000DA0  0E02               	movlw	2
 11322  000DA2  18DE               	xorwf	postinc2,w,c
 11323  000DA4  B4D8               	btfsc	status,2,c
 11324  000DA6  D002               	goto	l1150
 11325  000DA8                     u13250:
 11326  000DA8                     l10422:
 11327                           
 11328                           ; BSR set to: 0
 11329                           ;tff.c: 704: return FR_NO_FILESYSTEM;
 11330  000DA8  0E0B               	movlw	11
 11331                           
 11332                           ; BSR set to: 0
 11333  000DAA  0012               	return	
 11334  000DAC                     l1150:
 11335                           
 11336                           ; BSR set to: 0
 11337                           ;tff.c: 707: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 11338                           
 11339                           ; BSR set to: 0
 11340  000DAC  EE20 F036          	lfsr	2,54
 11341  000DB0  51B9               	movf	auto_mount@fs& (0+255),w,b
 11342  000DB2  26D9               	addwf	fsr2l,f,c
 11343  000DB4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11344  000DB6  22DA               	addwfc	fsr2h,f,c
 11345  000DB8  CFDE F096          	movff	postinc2,??_auto_mount
 11346  000DBC  CFDD F097          	movff	postdec2,??_auto_mount+1
 11347  000DC0  C096  F0B5         	movff	??_auto_mount,auto_mount@fatsize
 11348  000DC4  C097  F0B6         	movff	??_auto_mount+1,auto_mount@fatsize+1
 11349  000DC8  6BB7               	clrf	(auto_mount@fatsize+2)& (0+255),b
 11350  000DCA  6BB8               	clrf	(auto_mount@fatsize+3)& (0+255),b
 11351                           
 11352                           ; BSR set to: 0
 11353                           ;tff.c: 708: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 11354  000DCC  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 11355  000DCE  11B6               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 11356  000DD0  11B7               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 11357  000DD2  11B8               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 11358  000DD4  A4D8               	btfss	status,2,c
 11359  000DD6  D00E               	goto	l1153
 11360                           
 11361                           ; BSR set to: 0
 11362  000DD8  EE20 F044          	lfsr	2,68
 11363  000DDC  51B9               	movf	auto_mount@fs& (0+255),w,b
 11364  000DDE  26D9               	addwf	fsr2l,f,c
 11365  000DE0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11366  000DE2  22DA               	addwfc	fsr2h,f,c
 11367  000DE4  CFDE F0B5          	movff	postinc2,auto_mount@fatsize
 11368  000DE8  CFDE F0B6          	movff	postinc2,auto_mount@fatsize+1
 11369  000DEC  CFDE F0B7          	movff	postinc2,auto_mount@fatsize+2
 11370  000DF0  CFDE F0B8          	movff	postinc2,auto_mount@fatsize+3
 11371  000DF4                     l1153:
 11372                           
 11373                           ; BSR set to: 0
 11374                           ;tff.c: 709: fs->sects_fat = (CLUST)fatsize;
 11375  000DF4  EE20 F014          	lfsr	2,20
 11376  000DF8  51B9               	movf	auto_mount@fs& (0+255),w,b
 11377  000DFA  26D9               	addwf	fsr2l,f,c
 11378  000DFC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11379  000DFE  22DA               	addwfc	fsr2h,f,c
 11380  000E00  C0B5  FFDE         	movff	auto_mount@fatsize,postinc2
 11381  000E04  C0B6  FFDD         	movff	auto_mount@fatsize+1,postdec2
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;tff.c: 710: fs->n_fats = fs->win[16];
 11385  000E08  EE20 F030          	lfsr	2,48
 11386  000E0C  51B9               	movf	auto_mount@fs& (0+255),w,b
 11387  000E0E  26D9               	addwf	fsr2l,f,c
 11388  000E10  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11389  000E12  22DA               	addwfc	fsr2h,f,c
 11390  000E14  EE10 F01E          	lfsr	1,30
 11391  000E18  51B9               	movf	auto_mount@fs& (0+255),w,b
 11392  000E1A  26E1               	addwf	fsr1l,f,c
 11393  000E1C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11394  000E1E  22E2               	addwfc	fsr1h,f,c
 11395  000E20  CFDF FFE7          	movff	indf2,indf1
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;tff.c: 711: fatsize *= fs->n_fats;
 11399  000E24  C0B5  F060         	movff	auto_mount@fatsize,___lmul@multiplier
 11400  000E28  C0B6  F061         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 11401  000E2C  C0B7  F062         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 11402  000E30  C0B8  F063         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 11403  000E34  EE20 F01E          	lfsr	2,30
 11404  000E38  51B9               	movf	auto_mount@fs& (0+255),w,b
 11405  000E3A  26D9               	addwf	fsr2l,f,c
 11406  000E3C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11407  000E3E  22DA               	addwfc	fsr2h,f,c
 11408  000E40  50DF               	movf	indf2,w,c
 11409  000E42  6F96               	movwf	??_auto_mount& (0+255),b
 11410  000E44  5196               	movf	??_auto_mount& (0+255),w,b
 11411  000E46  6F64               	movwf	___lmul@multiplicand& (0+255),b
 11412  000E48  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 11413  000E4A  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 11414  000E4C  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 11415  000E4E  ECA0  F024         	call	___lmul	;wreg free
 11416  000E52  C060  F0B5         	movff	?___lmul,auto_mount@fatsize
 11417  000E56  C061  F0B6         	movff	?___lmul+1,auto_mount@fatsize+1
 11418  000E5A  C062  F0B7         	movff	?___lmul+2,auto_mount@fatsize+2
 11419  000E5E  C063  F0B8         	movff	?___lmul+3,auto_mount@fatsize+3
 11420                           
 11421                           ;tff.c: 712: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 11422  000E62  0100               	movlb	0	; () banked
 11423  000E64  EE20 F02E          	lfsr	2,46
 11424  000E68  51B9               	movf	auto_mount@fs& (0+255),w,b
 11425  000E6A  26D9               	addwf	fsr2l,f,c
 11426  000E6C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11427  000E6E  22DA               	addwfc	fsr2h,f,c
 11428  000E70  CFDE F096          	movff	postinc2,??_auto_mount
 11429  000E74  CFDD F097          	movff	postdec2,??_auto_mount+1
 11430  000E78  5196               	movf	??_auto_mount& (0+255),w,b
 11431  000E7A  25A9               	addwf	auto_mount@bootsect& (0+255),w,b
 11432  000E7C  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 11433  000E7E  5197               	movf	(??_auto_mount+1)& (0+255),w,b
 11434  000E80  21AA               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 11435  000E82  6F99               	movwf	(??_auto_mount+3)& (0+255),b
 11436  000E84  0E00               	movlw	0
 11437  000E86  21AB               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 11438  000E88  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 11439  000E8A  0E00               	movlw	0
 11440  000E8C  21AC               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 11441  000E8E  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 11442  000E90  EE20 F008          	lfsr	2,8
 11443  000E94  51B9               	movf	auto_mount@fs& (0+255),w,b
 11444  000E96  26D9               	addwf	fsr2l,f,c
 11445  000E98  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11446  000E9A  22DA               	addwfc	fsr2h,f,c
 11447  000E9C  C098  FFDE         	movff	??_auto_mount+2,postinc2
 11448  000EA0  C099  FFDE         	movff	??_auto_mount+3,postinc2
 11449  000EA4  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 11450  000EA8  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 11451                           
 11452                           ; BSR set to: 0
 11453                           ;tff.c: 713: fs->csize = fs->win[13];
 11454  000EAC  EE20 F02D          	lfsr	2,45
 11455  000EB0  51B9               	movf	auto_mount@fs& (0+255),w,b
 11456  000EB2  26D9               	addwf	fsr2l,f,c
 11457  000EB4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11458  000EB6  22DA               	addwfc	fsr2h,f,c
 11459  000EB8  EE10 F01D          	lfsr	1,29
 11460  000EBC  51B9               	movf	auto_mount@fs& (0+255),w,b
 11461  000EBE  26E1               	addwf	fsr1l,f,c
 11462  000EC0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11463  000EC2  22E2               	addwfc	fsr1h,f,c
 11464  000EC4  CFDF FFE7          	movff	indf2,indf1
 11465                           
 11466                           ; BSR set to: 0
 11467                           ;tff.c: 714: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 11468  000EC8  EE20 F031          	lfsr	2,49
 11469  000ECC  51B9               	movf	auto_mount@fs& (0+255),w,b
 11470  000ECE  26D9               	addwf	fsr2l,f,c
 11471  000ED0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11472  000ED2  22DA               	addwfc	fsr2h,f,c
 11473  000ED4  EE10 F002          	lfsr	1,2
 11474  000ED8  51B9               	movf	auto_mount@fs& (0+255),w,b
 11475  000EDA  26E1               	addwf	fsr1l,f,c
 11476  000EDC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11477  000EDE  22E2               	addwfc	fsr1h,f,c
 11478  000EE0  CFDE FFE6          	movff	postinc2,postinc1
 11479  000EE4  CFDD FFE5          	movff	postdec2,postdec1
 11480                           
 11481                           ; BSR set to: 0
 11482                           ;tff.c: 715: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 11483  000EE8  EE20 F033          	lfsr	2,51
 11484  000EEC  51B9               	movf	auto_mount@fs& (0+255),w,b
 11485  000EEE  26D9               	addwf	fsr2l,f,c
 11486  000EF0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11487  000EF2  22DA               	addwfc	fsr2h,f,c
 11488  000EF4  CFDE F096          	movff	postinc2,??_auto_mount
 11489  000EF8  CFDD F097          	movff	postdec2,??_auto_mount+1
 11490  000EFC  C096  F0AD         	movff	??_auto_mount,auto_mount@totalsect
 11491  000F00  C097  F0AE         	movff	??_auto_mount+1,auto_mount@totalsect+1
 11492  000F04  6BAF               	clrf	(auto_mount@totalsect+2)& (0+255),b
 11493  000F06  6BB0               	clrf	(auto_mount@totalsect+3)& (0+255),b
 11494                           
 11495                           ; BSR set to: 0
 11496                           ;tff.c: 716: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 11497  000F08  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 11498  000F0A  11AE               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 11499  000F0C  11AF               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 11500  000F0E  11B0               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 11501  000F10  A4D8               	btfss	status,2,c
 11502  000F12  D00E               	goto	l1154
 11503                           
 11504                           ; BSR set to: 0
 11505  000F14  EE20 F040          	lfsr	2,64
 11506  000F18  51B9               	movf	auto_mount@fs& (0+255),w,b
 11507  000F1A  26D9               	addwf	fsr2l,f,c
 11508  000F1C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11509  000F1E  22DA               	addwfc	fsr2h,f,c
 11510  000F20  CFDE F0AD          	movff	postinc2,auto_mount@totalsect
 11511  000F24  CFDE F0AE          	movff	postinc2,auto_mount@totalsect+1
 11512  000F28  CFDE F0AF          	movff	postinc2,auto_mount@totalsect+2
 11513  000F2C  CFDE F0B0          	movff	postinc2,auto_mount@totalsect+3
 11514  000F30                     l1154:
 11515                           
 11516                           ; BSR set to: 0
 11517                           ;tff.c: 717: fs->max_clust = maxclust = (totalsect
 11518                           ;tff.c: 718: - (WORD)(*(WORD*)(BYTE*)(&fs->win[14])) - fatsize - fs->n_rootdir / 16
 11519                           ;tff.c: 719: ) / fs->csize + 2;
 11520                           
 11521                           ; BSR set to: 0
 11522  000F30  EE20 F002          	lfsr	2,2
 11523  000F34  51B9               	movf	auto_mount@fs& (0+255),w,b
 11524  000F36  26D9               	addwf	fsr2l,f,c
 11525  000F38  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11526  000F3A  22DA               	addwfc	fsr2h,f,c
 11527  000F3C  CFDE F096          	movff	postinc2,??_auto_mount
 11528  000F40  CFDD F097          	movff	postdec2,??_auto_mount+1
 11529  000F44  0E04               	movlw	4
 11530  000F46  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 11531  000F48                     u13285:
 11532  000F48  90D8               	bcf	status,0,c
 11533  000F4A  3397               	rrcf	(??_auto_mount+1)& (0+255),f,b
 11534  000F4C  3396               	rrcf	??_auto_mount& (0+255),f,b
 11535  000F4E  2F98               	decfsz	(??_auto_mount+2)& (0+255),f,b
 11536  000F50  D7FB               	goto	u13285
 11537  000F52  EE20 F02E          	lfsr	2,46
 11538  000F56  51B9               	movf	auto_mount@fs& (0+255),w,b
 11539  000F58  26D9               	addwf	fsr2l,f,c
 11540  000F5A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11541  000F5C  22DA               	addwfc	fsr2h,f,c
 11542  000F5E  CFDE F099          	movff	postinc2,??_auto_mount+3
 11543  000F62  CFDD F09A          	movff	postdec2,??_auto_mount+4
 11544  000F66  5199               	movf	(??_auto_mount+3)& (0+255),w,b
 11545  000F68  2596               	addwf	??_auto_mount& (0+255),w,b
 11546  000F6A  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 11547  000F6C  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 11548  000F6E  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11549  000F70  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 11550  000F72  6B9D               	clrf	(??_auto_mount+7)& (0+255),b
 11551  000F74  B0D8               	btfsc	status,0,c
 11552  000F76  2B9D               	incf	(??_auto_mount+7)& (0+255),f,b
 11553  000F78  6B9E               	clrf	(??_auto_mount+8)& (0+255),b
 11554  000F7A  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 11555  000F7C  259B               	addwf	(??_auto_mount+5)& (0+255),w,b
 11556  000F7E  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 11557  000F80  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11558  000F82  219C               	addwfc	(??_auto_mount+6)& (0+255),w,b
 11559  000F84  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 11560  000F86  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11561  000F88  219D               	addwfc	(??_auto_mount+7)& (0+255),w,b
 11562  000F8A  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 11563  000F8C  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11564  000F8E  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 11565  000F90  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 11566  000F92  1F9F               	comf	(??_auto_mount+9)& (0+255),f,b
 11567  000F94  1FA0               	comf	(??_auto_mount+10)& (0+255),f,b
 11568  000F96  1FA1               	comf	(??_auto_mount+11)& (0+255),f,b
 11569  000F98  1FA2               	comf	(??_auto_mount+12)& (0+255),f,b
 11570  000F9A  2B9F               	incf	(??_auto_mount+9)& (0+255),f,b
 11571  000F9C  0E00               	movlw	0
 11572  000F9E  23A0               	addwfc	(??_auto_mount+10)& (0+255),f,b
 11573  000FA0  23A1               	addwfc	(??_auto_mount+11)& (0+255),f,b
 11574  000FA2  23A2               	addwfc	(??_auto_mount+12)& (0+255),f,b
 11575  000FA4  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 11576  000FA6  259F               	addwf	(??_auto_mount+9)& (0+255),w,b
 11577  000FA8  6F60               	movwf	___lldiv@dividend& (0+255),b
 11578  000FAA  51AE               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 11579  000FAC  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 11580  000FAE  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 11581  000FB0  51AF               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 11582  000FB2  21A1               	addwfc	(??_auto_mount+11)& (0+255),w,b
 11583  000FB4  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 11584  000FB6  51B0               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 11585  000FB8  21A2               	addwfc	(??_auto_mount+12)& (0+255),w,b
 11586  000FBA  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 11587  000FBC  EE20 F01D          	lfsr	2,29
 11588  000FC0  51B9               	movf	auto_mount@fs& (0+255),w,b
 11589  000FC2  26D9               	addwf	fsr2l,f,c
 11590  000FC4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11591  000FC6  22DA               	addwfc	fsr2h,f,c
 11592  000FC8  50DF               	movf	indf2,w,c
 11593  000FCA  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 11594  000FCC  51A3               	movf	(??_auto_mount+13)& (0+255),w,b
 11595  000FCE  6F64               	movwf	___lldiv@divisor& (0+255),b
 11596  000FD0  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 11597  000FD2  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 11598  000FD4  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 11599  000FD6  ECEB  F022         	call	___lldiv	;wreg free
 11600  000FDA  0E02               	movlw	2
 11601  000FDC  0100               	movlb	0	; () banked
 11602  000FDE  2560               	addwf	?___lldiv& (0+255),w,b
 11603  000FE0  6FA5               	movwf	auto_mount@maxclust& (0+255),b
 11604  000FE2  0E00               	movlw	0
 11605  000FE4  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 11606  000FE6  6FA6               	movwf	(auto_mount@maxclust+1)& (0+255),b
 11607  000FE8  0E00               	movlw	0
 11608  000FEA  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
 11609  000FEC  6FA7               	movwf	(auto_mount@maxclust+2)& (0+255),b
 11610  000FEE  0E00               	movlw	0
 11611  000FF0  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
 11612  000FF2  6FA8               	movwf	(auto_mount@maxclust+3)& (0+255),b
 11613  000FF4  EE20 F016          	lfsr	2,22
 11614  000FF8  51B9               	movf	auto_mount@fs& (0+255),w,b
 11615  000FFA  26D9               	addwf	fsr2l,f,c
 11616  000FFC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11617  000FFE  22DA               	addwfc	fsr2h,f,c
 11618  001000  C0A5  FFDE         	movff	auto_mount@maxclust,postinc2
 11619  001004  C0A6  FFDD         	movff	auto_mount@maxclust+1,postdec2
 11620                           
 11621                           ; BSR set to: 0
 11622                           ;tff.c: 721: fmt = 1;
 11623  001008  0E01               	movlw	1
 11624  00100A  6FB3               	movwf	auto_mount@fmt& (0+255),b
 11625                           
 11626                           ; BSR set to: 0
 11627                           ;tff.c: 722: if (maxclust >= 0xFF7) fmt = 2;
 11628  00100C  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 11629  00100E  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 11630  001010  E106               	bnz	u13290
 11631  001012  0EF7               	movlw	247
 11632  001014  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 11633  001016  0E0F               	movlw	15
 11634  001018  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 11635  00101A  A0D8               	btfss	status,0,c
 11636  00101C  D002               	goto	l1155
 11637  00101E                     u13290:
 11638                           
 11639                           ; BSR set to: 0
 11640  00101E  0E02               	movlw	2
 11641  001020  6FB3               	movwf	auto_mount@fmt& (0+255),b
 11642  001022                     l1155:
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;tff.c: 723: if (maxclust >= 0xFFF7)
 11646                           
 11647                           ; BSR set to: 0
 11648  001022  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 11649  001024  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 11650  001026  E106               	bnz	u13300
 11651  001028  0EF7               	movlw	247
 11652  00102A  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 11653  00102C  0EFF               	movlw	255
 11654  00102E  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 11655  001030  A0D8               	btfss	status,0,c
 11656  001032  D002               	goto	l1156
 11657  001034                     u13300:
 11658                           
 11659                           ; BSR set to: 0
 11660                           ;tff.c: 725: return FR_NO_FILESYSTEM;
 11661  001034  0E0B               	movlw	11
 11662                           
 11663                           ; BSR set to: 0
 11664  001036  0012               	return	
 11665  001038                     l1156:
 11666                           
 11667                           ; BSR set to: 0
 11668                           ;tff.c: 732: fs->dirbase = fs->fatbase + fatsize;
 11669                           
 11670                           ; BSR set to: 0
 11671  001038  EE20 F008          	lfsr	2,8
 11672  00103C  51B9               	movf	auto_mount@fs& (0+255),w,b
 11673  00103E  26D9               	addwf	fsr2l,f,c
 11674  001040  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11675  001042  22DA               	addwfc	fsr2h,f,c
 11676  001044  CFDE F096          	movff	postinc2,??_auto_mount
 11677  001048  CFDE F097          	movff	postinc2,??_auto_mount+1
 11678  00104C  CFDE F098          	movff	postinc2,??_auto_mount+2
 11679  001050  CFDE F099          	movff	postinc2,??_auto_mount+3
 11680  001054  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 11681  001056  2596               	addwf	??_auto_mount& (0+255),w,b
 11682  001058  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 11683  00105A  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11684  00105C  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11685  00105E  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 11686  001060  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11687  001062  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 11688  001064  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 11689  001066  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11690  001068  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 11691  00106A  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 11692  00106C  EE20 F00C          	lfsr	2,12
 11693  001070  51B9               	movf	auto_mount@fs& (0+255),w,b
 11694  001072  26D9               	addwf	fsr2l,f,c
 11695  001074  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11696  001076  22DA               	addwfc	fsr2h,f,c
 11697  001078  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 11698  00107C  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 11699  001080  C09C  FFDE         	movff	??_auto_mount+6,postinc2
 11700  001084  C09D  FFDE         	movff	??_auto_mount+7,postinc2
 11701                           
 11702                           ;tff.c: 733: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 11703  001088  EE20 F008          	lfsr	2,8
 11704  00108C  51B9               	movf	auto_mount@fs& (0+255),w,b
 11705  00108E  26D9               	addwf	fsr2l,f,c
 11706  001090  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11707  001092  22DA               	addwfc	fsr2h,f,c
 11708  001094  CFDE F096          	movff	postinc2,??_auto_mount
 11709  001098  CFDE F097          	movff	postinc2,??_auto_mount+1
 11710  00109C  CFDE F098          	movff	postinc2,??_auto_mount+2
 11711  0010A0  CFDE F099          	movff	postinc2,??_auto_mount+3
 11712  0010A4  EE20 F002          	lfsr	2,2
 11713  0010A8  51B9               	movf	auto_mount@fs& (0+255),w,b
 11714  0010AA  26D9               	addwf	fsr2l,f,c
 11715  0010AC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11716  0010AE  22DA               	addwfc	fsr2h,f,c
 11717  0010B0  CFDE F09A          	movff	postinc2,??_auto_mount+4
 11718  0010B4  CFDD F09B          	movff	postdec2,??_auto_mount+5
 11719  0010B8  0E04               	movlw	4
 11720  0010BA  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 11721  0010BC                     u13315:
 11722  0010BC  90D8               	bcf	status,0,c
 11723  0010BE  339B               	rrcf	(??_auto_mount+5)& (0+255),f,b
 11724  0010C0  339A               	rrcf	(??_auto_mount+4)& (0+255),f,b
 11725  0010C2  2F9C               	decfsz	(??_auto_mount+6)& (0+255),f,b
 11726  0010C4  D7FB               	goto	u13315
 11727  0010C6  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 11728  0010C8  2596               	addwf	??_auto_mount& (0+255),w,b
 11729  0010CA  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 11730  0010CC  519B               	movf	(??_auto_mount+5)& (0+255),w,b
 11731  0010CE  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11732  0010D0  6F9E               	movwf	(??_auto_mount+8)& (0+255),b
 11733  0010D2  0E00               	movlw	0
 11734  0010D4  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 11735  0010D6  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 11736  0010D8  0E00               	movlw	0
 11737  0010DA  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 11738  0010DC  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 11739  0010DE  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 11740  0010E0  259D               	addwf	(??_auto_mount+7)& (0+255),w,b
 11741  0010E2  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 11742  0010E4  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11743  0010E6  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 11744  0010E8  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 11745  0010EA  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11746  0010EC  219F               	addwfc	(??_auto_mount+9)& (0+255),w,b
 11747  0010EE  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 11748  0010F0  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11749  0010F2  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 11750  0010F4  6FA4               	movwf	(??_auto_mount+14)& (0+255),b
 11751  0010F6  EE20 F010          	lfsr	2,16
 11752  0010FA  51B9               	movf	auto_mount@fs& (0+255),w,b
 11753  0010FC  26D9               	addwf	fsr2l,f,c
 11754  0010FE  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11755  001100  22DA               	addwfc	fsr2h,f,c
 11756  001102  C0A1  FFDE         	movff	??_auto_mount+11,postinc2
 11757  001106  C0A2  FFDE         	movff	??_auto_mount+12,postinc2
 11758  00110A  C0A3  FFDE         	movff	??_auto_mount+13,postinc2
 11759  00110E  C0A4  FFDE         	movff	??_auto_mount+14,postinc2
 11760                           
 11761                           ;tff.c: 737: fs->free_clust = (CLUST)0xFFFFFFFF;
 11762  001112  EE20 F01A          	lfsr	2,26
 11763  001116  51B9               	movf	auto_mount@fs& (0+255),w,b
 11764  001118  26D9               	addwf	fsr2l,f,c
 11765  00111A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11766  00111C  22DA               	addwfc	fsr2h,f,c
 11767  00111E  0EFF               	movlw	255
 11768  001120  6EDE               	movwf	postinc2,c
 11769  001122  0EFF               	movlw	255
 11770  001124  6EDD               	movwf	postdec2,c
 11771                           
 11772                           ;tff.c: 753: fs->fs_type = fmt;
 11773  001126  EE20 F01C          	lfsr	2,28
 11774  00112A  51B9               	movf	auto_mount@fs& (0+255),w,b
 11775  00112C  26D9               	addwf	fsr2l,f,c
 11776  00112E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11777  001130  22DA               	addwfc	fsr2h,f,c
 11778  001132  C0B3  FFDF         	movff	auto_mount@fmt,indf2
 11779                           
 11780                           ; BSR set to: 0
 11781                           ;tff.c: 754: fs->id = ++fsid;
 11782  001136  4BFB               	infsnz	_fsid& (0+255),f,b
 11783  001138  2BFC               	incf	(_fsid+1)& (0+255),f,b
 11784  00113A  C0B9  FFD9         	movff	auto_mount@fs,fsr2l
 11785  00113E  C0BA  FFDA         	movff	auto_mount@fs+1,fsr2h
 11786  001142  C0FB  FFDE         	movff	_fsid,postinc2
 11787  001146  C0FC  FFDD         	movff	_fsid+1,postdec2
 11788                           
 11789                           ;tff.c: 755: return FR_OK;
 11790  00114A  0E00               	movlw	0
 11791  00114C  0012               	return	
 11792  00114E                     __end_of_auto_mount:
 11793                           	opt stack 0
 11794                           tosu	equ	0xFFF
 11795                           tosh	equ	0xFFE
 11796                           tosl	equ	0xFFD
 11797                           pclath	equ	0xFFA
 11798                           tblptru	equ	0xFF8
 11799                           tblptrh	equ	0xFF7
 11800                           tblptrl	equ	0xFF6
 11801                           tablat	equ	0xFF5
 11802                           prodh	equ	0xFF4
 11803                           prodl	equ	0xFF3
 11804                           intcon	equ	0xFF2
 11805                           intcon2	equ	0xFF1
 11806                           intcon3	equ	0xFF0
 11807                           indf0	equ	0xFEF
 11808                           postinc0	equ	0xFEE
 11809                           fsr0h	equ	0xFEA
 11810                           fsr0l	equ	0xFE9
 11811                           wreg	equ	0xFE8
 11812                           indf1	equ	0xFE7
 11813                           postinc1	equ	0xFE6
 11814                           postdec1	equ	0xFE5
 11815                           plusw1	equ	0xFE3
 11816                           fsr1h	equ	0xFE2
 11817                           fsr1l	equ	0xFE1
 11818                           indf2	equ	0xFDF
 11819                           postinc2	equ	0xFDE
 11820                           postdec2	equ	0xFDD
 11821                           plusw2	equ	0xFDB
 11822                           fsr2h	equ	0xFDA
 11823                           fsr2l	equ	0xFD9
 11824                           status	equ	0xFD8
 11825                           
 11826 ;; *************** function _memset *****************
 11827 ;; Defined at:
 11828 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 11829 ;; Parameters:    Size  Location     Type
 11830 ;;  p1              2    0[BANK0 ] PTR void 
 11831 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 11832 ;;  c               2    2[BANK0 ] int 
 11833 ;;  n               2    4[BANK0 ] unsigned int 
 11834 ;; Auto vars:     Size  Location     Type
 11835 ;;  p               2    6[BANK0 ] PTR unsigned char 
 11836 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 11837 ;; Return value:  Size  Location     Type
 11838 ;;                  2    0[BANK0 ] PTR void 
 11839 ;; Registers used:
 11840 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11841 ;; Tracked objects:
 11842 ;;		On entry : 0/0
 11843 ;;		On exit  : 0/0
 11844 ;;		Unchanged: 0/0
 11845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11846 ;;      Params:         0       6       0       0       0       0       0       0       0
 11847 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11848 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11849 ;;      Totals:         0       8       0       0       0       0       0       0       0
 11850 ;;Total ram usage:        8 bytes
 11851 ;; Hardware stack levels used:    1
 11852 ;; Hardware stack levels required when called:    3
 11853 ;; This function calls:
 11854 ;;		Nothing
 11855 ;; This function is called by:
 11856 ;;		_make_dirfile
 11857 ;;		_reserve_direntry
 11858 ;;		_auto_mount
 11859 ;;		_f_open
 11860 ;; This function uses a non-reentrant model
 11861 ;;
 11862                           
 11863                           	psect	text39
 11864  004DBC                     __ptext39:
 11865                           	opt stack 0
 11866  004DBC                     _memset:
 11867                           	opt stack 21
 11868                           
 11869                           ; BSR set to: 0
 11870                           ;incstack = 0
 11871  004DBC  C060  F066         	movff	memset@p1,memset@p
 11872  004DC0  C061  F067         	movff	memset@p1+1,memset@p+1
 11873  004DC4  D009               	goto	l1890
 11874  004DC6                     l9712:
 11875  004DC6  C066  FFD9         	movff	memset@p,fsr2l
 11876  004DCA  C067  FFDA         	movff	memset@p+1,fsr2h
 11877  004DCE  C062  FFDF         	movff	memset@c,indf2
 11878  004DD2  0100               	movlb	0	; () banked
 11879  004DD4  4B66               	infsnz	memset@p& (0+255),f,b
 11880  004DD6  2B67               	incf	(memset@p+1)& (0+255),f,b
 11881  004DD8                     l1890:
 11882                           
 11883                           ; BSR set to: 0
 11884  004DD8  0100               	movlb	0	; () banked
 11885  004DDA  0764               	decf	memset@n& (0+255),f,b
 11886  004DDC  A0D8               	btfss	status,0,c
 11887  004DDE  0765               	decf	(memset@n+1)& (0+255),f,b
 11888  004DE0  2964               	incf	memset@n& (0+255),w,b
 11889  004DE2  E1F1               	bnz	l9712
 11890  004DE4  2965               	incf	(memset@n+1)& (0+255),w,b
 11891  004DE6  B4D8               	btfsc	status,2,c
 11892  004DE8  0012               	return	
 11893  004DEA  D7ED               	goto	l1891
 11894  004DEC                     __end_of_memset:
 11895                           	opt stack 0
 11896                           tosu	equ	0xFFF
 11897                           tosh	equ	0xFFE
 11898                           tosl	equ	0xFFD
 11899                           pclath	equ	0xFFA
 11900                           tblptru	equ	0xFF8
 11901                           tblptrh	equ	0xFF7
 11902                           tblptrl	equ	0xFF6
 11903                           tablat	equ	0xFF5
 11904                           prodh	equ	0xFF4
 11905                           prodl	equ	0xFF3
 11906                           intcon	equ	0xFF2
 11907                           intcon2	equ	0xFF1
 11908                           intcon3	equ	0xFF0
 11909                           indf0	equ	0xFEF
 11910                           postinc0	equ	0xFEE
 11911                           fsr0h	equ	0xFEA
 11912                           fsr0l	equ	0xFE9
 11913                           wreg	equ	0xFE8
 11914                           indf1	equ	0xFE7
 11915                           postinc1	equ	0xFE6
 11916                           postdec1	equ	0xFE5
 11917                           plusw1	equ	0xFE3
 11918                           fsr1h	equ	0xFE2
 11919                           fsr1l	equ	0xFE1
 11920                           indf2	equ	0xFDF
 11921                           postinc2	equ	0xFDE
 11922                           postdec2	equ	0xFDD
 11923                           plusw2	equ	0xFDB
 11924                           fsr2h	equ	0xFDA
 11925                           fsr2l	equ	0xFD9
 11926                           status	equ	0xFD8
 11927                           
 11928 ;; *************** function _disk_initialize *****************
 11929 ;; Defined at:
 11930 ;;		line 59 in file "bibliotecas/diskio.c"
 11931 ;; Parameters:    Size  Location     Type
 11932 ;;  pdrv            1    wreg     unsigned char 
 11933 ;; Auto vars:     Size  Location     Type
 11934 ;;  pdrv            1   32[BANK0 ] unsigned char 
 11935 ;;  result          2    0        int 
 11936 ;;  stat            1   33[BANK0 ] unsigned char 
 11937 ;; Return value:  Size  Location     Type
 11938 ;;                  1    wreg      unsigned char 
 11939 ;; Registers used:
 11940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11941 ;; Tracked objects:
 11942 ;;		On entry : 0/0
 11943 ;;		On exit  : 0/0
 11944 ;;		Unchanged: 0/0
 11945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11946 ;;      Params:         0       0       0       0       0       0       0       0       0
 11947 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11948 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11949 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11950 ;;Total ram usage:        2 bytes
 11951 ;; Hardware stack levels used:    1
 11952 ;; Hardware stack levels required when called:    8
 11953 ;; This function calls:
 11954 ;;		_sdc_disk_initialize
 11955 ;; This function is called by:
 11956 ;;		_auto_mount
 11957 ;; This function uses a non-reentrant model
 11958 ;;
 11959                           
 11960                           	psect	text40
 11961  004D12                     __ptext40:
 11962                           	opt stack 0
 11963  004D12                     _disk_initialize:
 11964                           	opt stack 17
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;incstack = 0
 11968                           ;disk_initialize@pdrv stored from wreg
 11969  004D12  0100               	movlb	0	; () banked
 11970  004D14  6F80               	movwf	disk_initialize@pdrv& (0+255),b
 11971                           
 11972                           ;diskio.c: 63: DSTATUS stat;
 11973                           ;diskio.c: 64: int result;
 11974                           ;diskio.c: 66: switch (pdrv) {
 11975  004D16  D00E               	goto	l449
 11976  004D18                     
 11977                           ;diskio.c: 68: stat = sdc_disk_initialize();
 11978  004D18  ECA6  F00E         	call	_sdc_disk_initialize	;wreg free
 11979  004D1C  0100               	movlb	0	; () banked
 11980  004D1E  6F81               	movwf	disk_initialize@stat& (0+255),b
 11981                           
 11982                           ; BSR set to: 0
 11983                           ;diskio.c: 72: return stat;
 11984  004D20  5181               	movf	disk_initialize@stat& (0+255),w,b
 11985                           
 11986                           ; BSR set to: 0
 11987  004D22  0012               	return	
 11988  004D24                     
 11989                           ; BSR set to: 0
 11990                           ;diskio.c: 75: stat = sdc_disk_initialize();
 11991                           
 11992                           ; BSR set to: 0
 11993  004D24  ECA6  F00E         	call	_sdc_disk_initialize	;wreg free
 11994  004D28  0100               	movlb	0	; () banked
 11995  004D2A  6F81               	movwf	disk_initialize@stat& (0+255),b
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;diskio.c: 79: return stat;
 11999  004D2C  5181               	movf	disk_initialize@stat& (0+255),w,b
 12000                           
 12001                           ; BSR set to: 0
 12002  004D2E  0012               	return	
 12003  004D30                     
 12004                           ; BSR set to: 0
 12005                           ;diskio.c: 86: return stat;
 12006                           
 12007                           ; BSR set to: 0
 12008  004D30  5181               	movf	disk_initialize@stat& (0+255),w,b
 12009                           
 12010                           ; BSR set to: 0
 12011  004D32  0012               	return	
 12012  004D34                     l449:
 12013                           
 12014                           ; BSR set to: 0
 12015  004D34  0100               	movlb	0	; () banked
 12016  004D36  5180               	movf	disk_initialize@pdrv& (0+255),w,b
 12017                           
 12018                           ; Switch size 1, requested type "space"
 12019                           ; Number of cases is 3, Range of values is 0 to 2
 12020                           ; switch strategies available:
 12021                           ; Name         Instructions Cycles
 12022                           ; simple_byte           10     6 (average)
 12023                           ;	Chosen strategy is simple_byte
 12024  004D38  0A00               	xorlw	0	; case 0
 12025  004D3A  B4D8               	btfsc	status,2,c
 12026  004D3C  D7ED               	goto	l450
 12027  004D3E  0A01               	xorlw	1	; case 1
 12028  004D40  B4D8               	btfsc	status,2,c
 12029  004D42  D7F0               	goto	l452
 12030  004D44  0A03               	xorlw	3	; case 2
 12031  004D46  B4D8               	btfsc	status,2,c
 12032  004D48  D7F3               	goto	l453
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;diskio.c: 88: return 0x01;
 12036                           
 12037                           ; BSR set to: 0
 12038  004D4A  0E01               	movlw	1
 12039  004D4C  0012               	return	
 12040  004D4E                     __end_of_disk_initialize:
 12041                           	opt stack 0
 12042                           tosu	equ	0xFFF
 12043                           tosh	equ	0xFFE
 12044                           tosl	equ	0xFFD
 12045                           pclath	equ	0xFFA
 12046                           tblptru	equ	0xFF8
 12047                           tblptrh	equ	0xFF7
 12048                           tblptrl	equ	0xFF6
 12049                           tablat	equ	0xFF5
 12050                           prodh	equ	0xFF4
 12051                           prodl	equ	0xFF3
 12052                           intcon	equ	0xFF2
 12053                           intcon2	equ	0xFF1
 12054                           intcon3	equ	0xFF0
 12055                           indf0	equ	0xFEF
 12056                           postinc0	equ	0xFEE
 12057                           fsr0h	equ	0xFEA
 12058                           fsr0l	equ	0xFE9
 12059                           wreg	equ	0xFE8
 12060                           indf1	equ	0xFE7
 12061                           postinc1	equ	0xFE6
 12062                           postdec1	equ	0xFE5
 12063                           plusw1	equ	0xFE3
 12064                           fsr1h	equ	0xFE2
 12065                           fsr1l	equ	0xFE1
 12066                           indf2	equ	0xFDF
 12067                           postinc2	equ	0xFDE
 12068                           postdec2	equ	0xFDD
 12069                           plusw2	equ	0xFDB
 12070                           fsr2h	equ	0xFDA
 12071                           fsr2l	equ	0xFD9
 12072                           status	equ	0xFD8
 12073                           
 12074 ;; *************** function _sdc_disk_initialize *****************
 12075 ;; Defined at:
 12076 ;;		line 275 in file "bibliotecas/diskio.c"
 12077 ;; Parameters:    Size  Location     Type
 12078 ;;		None
 12079 ;; Auto vars:     Size  Location     Type
 12080 ;;  count2          2   29[BANK0 ] int 
 12081 ;;  crc_number      2   25[BANK0 ] int 
 12082 ;;  count1          2   23[BANK0 ] int 
 12083 ;;  i               2   20[BANK0 ] int 
 12084 ;;  buff            1   31[BANK0 ] unsigned char 
 12085 ;;  ocr             1   28[BANK0 ] unsigned char 
 12086 ;;  buff_i          1   27[BANK0 ] unsigned char 
 12087 ;;  stat            1   22[BANK0 ] unsigned char 
 12088 ;; Return value:  Size  Location     Type
 12089 ;;                  1    wreg      unsigned char 
 12090 ;; Registers used:
 12091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12092 ;; Tracked objects:
 12093 ;;		On entry : 0/0
 12094 ;;		On exit  : 0/0
 12095 ;;		Unchanged: 0/0
 12096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12097 ;;      Params:         0       0       0       0       0       0       0       0       0
 12098 ;;      Locals:         0      12       0       0       0       0       0       0       0
 12099 ;;      Temps:          0       1       0       0       0       0       0       0       0
 12100 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12101 ;;Total ram usage:       13 bytes
 12102 ;; Hardware stack levels used:    1
 12103 ;; Hardware stack levels required when called:    7
 12104 ;; This function calls:
 12105 ;;		_command
 12106 ;;		_dummy_clocks
 12107 ;;		_escreve_frase_ram_lcd
 12108 ;;		_posicao_cursor_lcd
 12109 ;;		_proceed
 12110 ;;		_response
 12111 ;;		_sdc_reset
 12112 ;; This function is called by:
 12113 ;;		_disk_initialize
 12114 ;; This function uses a non-reentrant model
 12115 ;;
 12116                           
 12117                           	psect	text41
 12118  001D4C                     __ptext41:
 12119                           	opt stack 0
 12120  001D4C                     _sdc_disk_initialize:
 12121                           	opt stack 17
 12122                           
 12123                           ;diskio.c: 277: BYTE ocr;
 12124                           ;diskio.c: 278: DSTATUS stat;
 12125                           ;diskio.c: 279: int i = 0, count1 = 0, count2 = 0;
 12126                           
 12127                           ; BSR set to: 0
 12128                           ;incstack = 0
 12129  001D4C  0E00               	movlw	0
 12130  001D4E  0100               	movlb	0	; () banked
 12131  001D50  6F75               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
 12132  001D52  0E00               	movlw	0
 12133  001D54  6F74               	movwf	sdc_disk_initialize@i& (0+255),b
 12134  001D56  0E00               	movlw	0
 12135  001D58  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 12136  001D5A  0E00               	movlw	0
 12137  001D5C  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 12138  001D5E  0E00               	movlw	0
 12139  001D60  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12140  001D62  0E00               	movlw	0
 12141  001D64  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12142                           
 12143                           ;diskio.c: 280: BYTE buff = 0;
 12144  001D66  0E00               	movlw	0
 12145  001D68  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12146                           
 12147                           ; BSR set to: 0
 12148                           ;diskio.c: 281: BYTE buff_i;
 12149                           ;diskio.c: 282: int crc_number;
 12150                           ;diskio.c: 283: _delay((unsigned long)((1)*(48000000/4000.0)));
 12151  001D6A  0E10               	movlw	16
 12152  001D6C  0100               	movlb	0	; () banked
 12153  001D6E  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 12154  001D70  0E94               	movlw	148
 12155  001D72                     u15397:
 12156  001D72  2EE8               	decfsz	wreg,f,c
 12157  001D74  D7FE               	bra	u15397
 12158  001D76  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 12159  001D78  D7FC               	bra	u15397
 12160  001D7A  F000               	nop	
 12161                           
 12162                           ;diskio.c: 284: dummy_clocks(100);
 12163  001D7C  0E64               	movlw	100
 12164  001D7E  EC27  F026         	call	_dummy_clocks
 12165                           
 12166                           ;diskio.c: 287: sdc_reset();
 12167  001D82  EC5B  F020         	call	_sdc_reset	;wreg free
 12168                           
 12169                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 12170  001D86  0EAA               	movlw	170
 12171  001D88  0100               	movlb	0	; () banked
 12172  001D8A  6F65               	movwf	command@arg& (0+255),b
 12173  001D8C  0E01               	movlw	1
 12174  001D8E  6F66               	movwf	(command@arg+1)& (0+255),b
 12175  001D90  0E00               	movlw	0
 12176  001D92  6F67               	movwf	(command@arg+2)& (0+255),b
 12177  001D94  0E00               	movlw	0
 12178  001D96  6F68               	movwf	(command@arg+3)& (0+255),b
 12179  001D98  0E87               	movlw	135
 12180  001D9A  6F69               	movwf	command@CRC& (0+255),b
 12181  001D9C  0E48               	movlw	72
 12182  001D9E  EC0E  F024         	call	_command
 12183                           
 12184                           ;diskio.c: 289: proceed();
 12185  001DA2  EC21  F028         	call	_proceed	;wreg free
 12186  001DA6                     
 12187                           ;diskio.c: 291: buff_i = response();
 12188  001DA6  EC1B  F028         	call	_response	;wreg free
 12189  001DAA  0100               	movlb	0	; () banked
 12190  001DAC  6F7B               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 12191                           
 12192                           ; BSR set to: 0
 12193                           ;diskio.c: 292: if(buff_i == 1)
 12194  001DAE  057B               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 12195  001DB0  A4D8               	btfss	status,2,c
 12196  001DB2  D004               	goto	l492
 12197                           
 12198                           ; BSR set to: 0
 12199                           ;diskio.c: 293: {
 12200                           ;diskio.c: 294: crc_number = buff_i<<8;
 12201  001DB4  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 12202  001DB6  6F7A               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 12203  001DB8  6B79               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 12204                           
 12205                           ;diskio.c: 295: }
 12206  001DBA  D006               	goto	l494
 12207  001DBC                     l492:
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;diskio.c: 296: else if(buff_i==0xAA)
 12211                           
 12212                           ; BSR set to: 0
 12213  001DBC  0EAA               	movlw	170
 12214  001DBE  197B               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 12215  001DC0  A4D8               	btfss	status,2,c
 12216  001DC2  D002               	goto	l494
 12217                           
 12218                           ; BSR set to: 0
 12219                           ;diskio.c: 297: {
 12220                           ;diskio.c: 298: crc_number |= buff_i;
 12221  001DC4  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 12222  001DC6  1379               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 12223  001DC8                     l494:
 12224                           
 12225                           ; BSR set to: 0
 12226                           ;diskio.c: 299: }
 12227                           ;diskio.c: 300: count1++;
 12228                           
 12229                           ; BSR set to: 0
 12230                           
 12231                           ; BSR set to: 0
 12232  001DC8  4B77               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 12233  001DCA  2B78               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 12237  001DCC  0EAA               	movlw	170
 12238  001DCE  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 12239  001DD0  E103               	bnz	u11660
 12240  001DD2  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 12241  001DD4  B4D8               	btfsc	status,2,c
 12242  001DD6  D008               	goto	u11670
 12243  001DD8                     u11660:
 12244                           
 12245                           ; BSR set to: 0
 12246  001DD8  BF78               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 12247  001DDA  D7E5               	goto	l491
 12248  001DDC  0EE8               	movlw	232
 12249  001DDE  5D77               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 12250  001DE0  0E03               	movlw	3
 12251  001DE2  5978               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 12252  001DE4  A0D8               	btfss	status,0,c
 12253  001DE6  D7DF               	goto	l491
 12254  001DE8                     u11670:
 12255                           
 12256                           ; BSR set to: 0
 12257                           ;diskio.c: 306: if (crc_number == 0x1AA)
 12258                           
 12259                           ; BSR set to: 0
 12260                           
 12261                           ; BSR set to: 0
 12262  001DE8  0EAA               	movlw	170
 12263  001DEA  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 12264  001DEC  E102               	bnz	u11681
 12265  001DEE  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 12266  001DF0  A4D8               	btfss	status,2,c
 12267  001DF2                     u11681:
 12268  001DF2  D0B1               	goto	l498
 12269                           
 12270                           ; BSR set to: 0
 12271                           ;diskio.c: 307: {
 12272                           ;diskio.c: 308: count1 = 0;
 12273  001DF4  0E00               	movlw	0
 12274  001DF6  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 12275  001DF8  0E00               	movlw	0
 12276  001DFA  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 12277  001DFC                     l499:
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;diskio.c: 310: count2 = 0;
 12281  001DFC  0E00               	movlw	0
 12282  001DFE  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12283  001E00  0E00               	movlw	0
 12284  001E02  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12285                           
 12286                           ; BSR set to: 0
 12287                           ;diskio.c: 311: buff = 0XFF;
 12288  001E04  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12289  001E06                     
 12290                           ; BSR set to: 0
 12291                           ;diskio.c: 319: dummy_clocks(10);
 12292                           
 12293                           ; BSR set to: 0
 12294  001E06  0E0A               	movlw	10
 12295  001E08  EC27  F026         	call	_dummy_clocks
 12296                           
 12297                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 12298  001E0C  0E00               	movlw	0
 12299  001E0E  0100               	movlb	0	; () banked
 12300  001E10  6F65               	movwf	command@arg& (0+255),b
 12301  001E12  0E00               	movlw	0
 12302  001E14  6F66               	movwf	(command@arg+1)& (0+255),b
 12303  001E16  0E00               	movlw	0
 12304  001E18  6F67               	movwf	(command@arg+2)& (0+255),b
 12305  001E1A  0E00               	movlw	0
 12306  001E1C  6F68               	movwf	(command@arg+3)& (0+255),b
 12307  001E1E  0E00               	movlw	0
 12308  001E20  6F69               	movwf	command@CRC& (0+255),b
 12309  001E22  0E77               	movlw	119
 12310  001E24  EC0E  F024         	call	_command
 12311                           
 12312                           ;diskio.c: 321: buff = 0XFF;
 12313  001E28  0100               	movlb	0	; () banked
 12314  001E2A  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12315                           
 12316                           ; BSR set to: 0
 12317                           ;diskio.c: 323: proceed();
 12318  001E2C  EC21  F028         	call	_proceed	;wreg free
 12319  001E30                     
 12320                           ;diskio.c: 325: buff = response();
 12321  001E30  EC1B  F028         	call	_response	;wreg free
 12322  001E34  0100               	movlb	0	; () banked
 12323  001E36  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12324                           
 12325                           ; BSR set to: 0
 12326                           ;diskio.c: 326: count2++;
 12327  001E38  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12328  001E3A  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12329                           
 12330                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 12331  001E3C  057F               	decf	sdc_disk_initialize@buff& (0+255),w,b
 12332  001E3E  B4D8               	btfsc	status,2,c
 12333  001E40  D008               	goto	u11700
 12334                           
 12335                           ; BSR set to: 0
 12336  001E42  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12337  001E44  D7F5               	goto	l501
 12338  001E46  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12339  001E48  E104               	bnz	l9584
 12340  001E4A  0E0A               	movlw	10
 12341  001E4C  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12342  001E4E  A0D8               	btfss	status,0,c
 12343  001E50  D7EF               	goto	l501
 12344  001E52                     u11700:
 12345  001E52                     l9584:
 12346                           
 12347                           ; BSR set to: 0
 12348                           ;diskio.c: 328: count2 = 0;
 12349  001E52  0E00               	movlw	0
 12350  001E54  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12351  001E56  0E00               	movlw	0
 12352  001E58  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12353                           
 12354                           ; BSR set to: 0
 12355                           ;diskio.c: 332: dummy_clocks(10);
 12356  001E5A  0E0A               	movlw	10
 12357  001E5C  EC27  F026         	call	_dummy_clocks
 12358                           
 12359                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 12360  001E60  0E00               	movlw	0
 12361  001E62  0100               	movlb	0	; () banked
 12362  001E64  6F65               	movwf	command@arg& (0+255),b
 12363  001E66  0E00               	movlw	0
 12364  001E68  6F66               	movwf	(command@arg+1)& (0+255),b
 12365  001E6A  0E00               	movlw	0
 12366  001E6C  6F67               	movwf	(command@arg+2)& (0+255),b
 12367  001E6E  0E40               	movlw	64
 12368  001E70  6F68               	movwf	(command@arg+3)& (0+255),b
 12369  001E72  0E00               	movlw	0
 12370  001E74  6F69               	movwf	command@CRC& (0+255),b
 12371  001E76  0E69               	movlw	105
 12372  001E78  EC0E  F024         	call	_command
 12373                           
 12374                           ;diskio.c: 334: proceed();
 12375  001E7C  EC21  F028         	call	_proceed	;wreg free
 12376                           
 12377                           ;diskio.c: 335: buff = response();
 12378  001E80  EC1B  F028         	call	_response	;wreg free
 12379  001E84  0100               	movlb	0	; () banked
 12380  001E86  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12381                           
 12382                           ; BSR set to: 0
 12383                           ;diskio.c: 336: count2++;
 12384  001E88  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12385  001E8A  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12386                           
 12387                           ; BSR set to: 0
 12388                           ;diskio.c: 337: }while(buff!=0X00);
 12389  001E8C  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12390  001E8E  A4D8               	btfss	status,2,c
 12391  001E90  D7BA               	goto	l500
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;diskio.c: 339: buff = 0xFF;
 12395  001E92  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12396                           
 12397                           ; BSR set to: 0
 12398                           ;diskio.c: 342: dummy_clocks(10);
 12399  001E94  0E0A               	movlw	10
 12400  001E96  EC27  F026         	call	_dummy_clocks
 12401                           
 12402                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 12403  001E9A  0E00               	movlw	0
 12404  001E9C  0100               	movlb	0	; () banked
 12405  001E9E  6F65               	movwf	command@arg& (0+255),b
 12406  001EA0  0E00               	movlw	0
 12407  001EA2  6F66               	movwf	(command@arg+1)& (0+255),b
 12408  001EA4  0E00               	movlw	0
 12409  001EA6  6F67               	movwf	(command@arg+2)& (0+255),b
 12410  001EA8  0E00               	movlw	0
 12411  001EAA  6F68               	movwf	(command@arg+3)& (0+255),b
 12412  001EAC  0EFF               	movlw	255
 12413  001EAE  6F69               	movwf	command@CRC& (0+255),b
 12414  001EB0  0E7A               	movlw	122
 12415  001EB2  EC0E  F024         	call	_command
 12416                           
 12417                           ;diskio.c: 344: proceed();
 12418  001EB6  EC21  F028         	call	_proceed	;wreg free
 12419  001EBA                     
 12420                           ;diskio.c: 346: buff = response();
 12421  001EBA  EC1B  F028         	call	_response	;wreg free
 12422  001EBE  0100               	movlb	0	; () banked
 12423  001EC0  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12424                           
 12425                           ; BSR set to: 0
 12426                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 12427  001EC2  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12428  001EC4  257F               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 12429  001EC6  0B80               	andlw	128
 12430  001EC8  6F7C               	movwf	sdc_disk_initialize@ocr& (0+255),b
 12431                           
 12432                           ; BSR set to: 0
 12433                           ;diskio.c: 348: count2++;
 12434  001ECA  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12435  001ECC  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12436                           
 12437                           ; BSR set to: 0
 12438                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 12439  001ECE  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12440  001ED0  B4D8               	btfsc	status,2,c
 12441  001ED2  D00B               	goto	u11740
 12442                           
 12443                           ; BSR set to: 0
 12444  001ED4  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 12445  001ED6  B4D8               	btfsc	status,2,c
 12446  001ED8  D008               	goto	u11740
 12447                           
 12448                           ; BSR set to: 0
 12449  001EDA  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12450  001EDC  D7EE               	goto	l506
 12451  001EDE  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12452  001EE0  E104               	bnz	l9614
 12453  001EE2  0E0A               	movlw	10
 12454  001EE4  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12455  001EE6  A0D8               	btfss	status,0,c
 12456  001EE8  D7E8               	goto	l506
 12457  001EEA                     u11740:
 12458  001EEA                     l9614:
 12459                           
 12460                           ; BSR set to: 0
 12461                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 12462  001EEA  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12463  001EEC  B4D8               	btfsc	status,2,c
 12464  001EEE  D003               	goto	u11760
 12465                           
 12466                           ; BSR set to: 0
 12467  001EF0  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 12468  001EF2  A4D8               	btfss	status,2,c
 12469  001EF4  D783               	goto	l499
 12470  001EF6                     u11760:
 12471                           
 12472                           ; BSR set to: 0
 12473                           ;diskio.c: 353: count1 = 0;
 12474                           
 12475                           ; BSR set to: 0
 12476                           
 12477                           ; BSR set to: 0
 12478  001EF6  0E00               	movlw	0
 12479  001EF8  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 12480  001EFA  0E00               	movlw	0
 12481  001EFC  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 12482                           
 12483                           ; BSR set to: 0
 12484                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 12485  001EFE  0E10               	movlw	16
 12486  001F00  0100               	movlb	0	; () banked
 12487  001F02  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 12488  001F04  0E94               	movlw	148
 12489  001F06                     u15407:
 12490  001F06  2EE8               	decfsz	wreg,f,c
 12491  001F08  D7FE               	bra	u15407
 12492  001F0A  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 12493  001F0C  D7FC               	bra	u15407
 12494  001F0E  F000               	nop	
 12495                           
 12496                           ;diskio.c: 356: stat = 0X00;
 12497  001F10  0E00               	movlw	0
 12498  001F12  0100               	movlb	0	; () banked
 12499  001F14  6F76               	movwf	sdc_disk_initialize@stat& (0+255),b
 12500                           
 12501                           ; BSR set to: 0
 12502                           ;diskio.c: 358: if(!ocr)
 12503  001F16  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12504  001F18  A4D8               	btfss	status,2,c
 12505  001F1A  D0B9               	goto	u11860
 12506                           
 12507                           ; BSR set to: 0
 12508                           ;diskio.c: 359: {
 12509                           ;diskio.c: 361: dummy_clocks(10);
 12510  001F1C  0E0A               	movlw	10
 12511  001F1E  EC27  F026         	call	_dummy_clocks
 12512                           
 12513                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 12514  001F22  0E00               	movlw	0
 12515  001F24  0100               	movlb	0	; () banked
 12516  001F26  6F65               	movwf	command@arg& (0+255),b
 12517  001F28  0E02               	movlw	2
 12518  001F2A  6F66               	movwf	(command@arg+1)& (0+255),b
 12519  001F2C  0E00               	movlw	0
 12520  001F2E  6F67               	movwf	(command@arg+2)& (0+255),b
 12521  001F30  0E00               	movlw	0
 12522  001F32  6F68               	movwf	(command@arg+3)& (0+255),b
 12523  001F34  0EFF               	movlw	255
 12524  001F36  6F69               	movwf	command@CRC& (0+255),b
 12525  001F38  0E50               	movlw	80
 12526  001F3A  EC0E  F024         	call	_command
 12527                           
 12528                           ;diskio.c: 363: proceed();
 12529  001F3E  EC21  F028         	call	_proceed	;wreg free
 12530                           
 12531                           ;diskio.c: 365: buff = 0xFF;
 12532  001F42  0100               	movlb	0	; () banked
 12533  001F44  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12534  001F46                     
 12535                           ; BSR set to: 0
 12536                           ;diskio.c: 367: buff = response();
 12537                           
 12538                           ; BSR set to: 0
 12539  001F46  EC1B  F028         	call	_response	;wreg free
 12540  001F4A  0100               	movlb	0	; () banked
 12541  001F4C  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12542                           
 12543                           ; BSR set to: 0
 12544                           ;diskio.c: 368: }while(buff!=0X00);
 12545  001F4E  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12546  001F50  B4D8               	btfsc	status,2,c
 12547  001F52  D09D               	goto	u11860
 12548  001F54  D7F8               	goto	l514
 12549  001F56                     l498:
 12550                           
 12551                           ; BSR set to: 0
 12552                           ;diskio.c: 373: else
 12553                           ;diskio.c: 374: {
 12554                           ;diskio.c: 376: count2 = 0;
 12555                           
 12556                           ; BSR set to: 0
 12557  001F56  0E00               	movlw	0
 12558  001F58  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12559  001F5A  0E00               	movlw	0
 12560  001F5C  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12561                           
 12562                           ; BSR set to: 0
 12563                           ;diskio.c: 377: buff = 0XFF;
 12564  001F5E  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12565                           
 12566                           ; BSR set to: 0
 12567                           ;diskio.c: 378: dummy_clocks(1);
 12568  001F60  0E01               	movlw	1
 12569  001F62  EC27  F026         	call	_dummy_clocks
 12570                           
 12571                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 12572  001F66  0E00               	movlw	0
 12573  001F68  0100               	movlb	0	; () banked
 12574  001F6A  6F65               	movwf	command@arg& (0+255),b
 12575  001F6C  0E00               	movlw	0
 12576  001F6E  6F66               	movwf	(command@arg+1)& (0+255),b
 12577  001F70  0E00               	movlw	0
 12578  001F72  6F67               	movwf	(command@arg+2)& (0+255),b
 12579  001F74  0E00               	movlw	0
 12580  001F76  6F68               	movwf	(command@arg+3)& (0+255),b
 12581  001F78  0EFF               	movlw	255
 12582  001F7A  6F69               	movwf	command@CRC& (0+255),b
 12583  001F7C  0E69               	movlw	105
 12584  001F7E  EC0E  F024         	call	_command
 12585                           
 12586                           ;diskio.c: 380: proceed();
 12587  001F82  EC21  F028         	call	_proceed	;wreg free
 12588  001F86                     
 12589                           ;diskio.c: 382: buff = response();
 12590  001F86  EC1B  F028         	call	_response	;wreg free
 12591  001F8A  0100               	movlb	0	; () banked
 12592  001F8C  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12593                           
 12594                           ; BSR set to: 0
 12595                           ;diskio.c: 383: count2++;
 12596  001F8E  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12597  001F90  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12598                           
 12599                           ; BSR set to: 0
 12600                           ;diskio.c: 384: if(buff==0x00)
 12601  001F92  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12602  001F94  A4D8               	btfss	status,2,c
 12603  001F96  D00C               	goto	l518
 12604                           
 12605                           ; BSR set to: 0
 12606                           ;diskio.c: 385: {
 12607                           ;diskio.c: 386: posicao_cursor_lcd(1,0);
 12608  001F98  0E00               	movlw	0
 12609  001F9A  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12610  001F9C  0E01               	movlw	1
 12611  001F9E  EC2D  F023         	call	_posicao_cursor_lcd
 12612                           
 12613                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 12614  001FA2  0E45               	movlw	low STR_22
 12615  001FA4  0100               	movlb	0	; () banked
 12616  001FA6  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12617  001FA8  0E62               	movlw	high STR_22
 12618  001FAA  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12619  001FAC  ECF7  F024         	call	_escreve_frase_ram_lcd	;wreg free
 12620  001FB0                     l518:
 12621                           
 12622                           ;diskio.c: 388: }
 12623                           ;diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 12624  001FB0  0E10               	movlw	16
 12625  001FB2  0100               	movlb	0	; () banked
 12626  001FB4  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 12627  001FB6  0E94               	movlw	148
 12628  001FB8                     u15417:
 12629  001FB8  2EE8               	decfsz	wreg,f,c
 12630  001FBA  D7FE               	bra	u15417
 12631  001FBC  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 12632  001FBE  D7FC               	bra	u15417
 12633  001FC0  F000               	nop	
 12634                           
 12635                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 12636  001FC2  0100               	movlb	0	; () banked
 12637  001FC4  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12638  001FC6  B4D8               	btfsc	status,2,c
 12639  001FC8  D008               	goto	u11810
 12640                           
 12641                           ; BSR set to: 0
 12642  001FCA  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12643  001FCC  D7DC               	goto	l517
 12644  001FCE  0E10               	movlw	16
 12645  001FD0  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12646  001FD2  0E27               	movlw	39
 12647  001FD4  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12648  001FD6  A0D8               	btfss	status,0,c
 12649  001FD8  D7D6               	goto	l517
 12650  001FDA                     u11810:
 12651                           
 12652                           ; BSR set to: 0
 12653                           ;diskio.c: 392: buff = 0xFF;
 12654                           
 12655                           ; BSR set to: 0
 12656  001FDA  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12657                           
 12658                           ; BSR set to: 0
 12659                           ;diskio.c: 393: if(count2==10)
 12660  001FDC  0E0A               	movlw	10
 12661  001FDE  197D               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 12662  001FE0  117E               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12663  001FE2  A4D8               	btfss	status,2,c
 12664  001FE4  D038               	goto	u11850
 12665                           
 12666                           ; BSR set to: 0
 12667                           ;diskio.c: 394: {
 12668                           ;diskio.c: 395: count2 = 0;
 12669  001FE6  0E00               	movlw	0
 12670  001FE8  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12671  001FEA  0E00               	movlw	0
 12672  001FEC  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12673                           
 12674                           ; BSR set to: 0
 12675                           ;diskio.c: 396: dummy_clocks(10);
 12676  001FEE  0E0A               	movlw	10
 12677  001FF0  EC27  F026         	call	_dummy_clocks
 12678                           
 12679                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 12680  001FF4  0E00               	movlw	0
 12681  001FF6  0100               	movlb	0	; () banked
 12682  001FF8  6F65               	movwf	command@arg& (0+255),b
 12683  001FFA  0E00               	movlw	0
 12684  001FFC  6F66               	movwf	(command@arg+1)& (0+255),b
 12685  001FFE  0E00               	movlw	0
 12686  002000  6F67               	movwf	(command@arg+2)& (0+255),b
 12687  002002  0E00               	movlw	0
 12688  002004  6F68               	movwf	(command@arg+3)& (0+255),b
 12689  002006  0EFF               	movlw	255
 12690  002008  6F69               	movwf	command@CRC& (0+255),b
 12691  00200A  0E41               	movlw	65
 12692  00200C  EC0E  F024         	call	_command
 12693                           
 12694                           ;diskio.c: 398: proceed();
 12695  002010  EC21  F028         	call	_proceed	;wreg free
 12696  002014                     
 12697                           ;diskio.c: 400: buff = response();
 12698  002014  EC1B  F028         	call	_response	;wreg free
 12699  002018  0100               	movlb	0	; () banked
 12700  00201A  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12701                           
 12702                           ; BSR set to: 0
 12703                           ;diskio.c: 401: count2++;
 12704  00201C  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12705  00201E  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12706                           
 12707                           ; BSR set to: 0
 12708                           ;diskio.c: 402: if(buff==0x00)
 12709  002020  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12710  002022  A4D8               	btfss	status,2,c
 12711  002024  D00C               	goto	l524
 12712                           
 12713                           ; BSR set to: 0
 12714                           ;diskio.c: 403: {
 12715                           ;diskio.c: 404: posicao_cursor_lcd(1,0);
 12716  002026  0E00               	movlw	0
 12717  002028  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12718  00202A  0E01               	movlw	1
 12719  00202C  EC2D  F023         	call	_posicao_cursor_lcd
 12720                           
 12721                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 12722  002030  0E2F               	movlw	low STR_23
 12723  002032  0100               	movlb	0	; () banked
 12724  002034  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12725  002036  0E62               	movlw	high STR_23
 12726  002038  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12727  00203A  ECF7  F024         	call	_escreve_frase_ram_lcd	;wreg free
 12728  00203E                     l524:
 12729                           
 12730                           ;diskio.c: 406: }
 12731                           ;diskio.c: 408: }while(buff!=0X00 && count2<10000);
 12732  00203E  0100               	movlb	0	; () banked
 12733  002040  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12734  002042  B4D8               	btfsc	status,2,c
 12735  002044  D008               	goto	u11850
 12736                           
 12737                           ; BSR set to: 0
 12738  002046  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12739  002048  D7E5               	goto	l523
 12740  00204A  0E10               	movlw	16
 12741  00204C  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12742  00204E  0E27               	movlw	39
 12743  002050  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12744  002052  A0D8               	btfss	status,0,c
 12745  002054  D7DF               	goto	l523
 12746  002056                     u11850:
 12747                           
 12748                           ; BSR set to: 0
 12749                           ;diskio.c: 409: }
 12750                           ;diskio.c: 412: dummy_clocks(10);
 12751                           
 12752                           ; BSR set to: 0
 12753                           
 12754                           ; BSR set to: 0
 12755                           
 12756                           ; BSR set to: 0
 12757  002056  0E0A               	movlw	10
 12758  002058  EC27  F026         	call	_dummy_clocks
 12759                           
 12760                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 12761  00205C  0E00               	movlw	0
 12762  00205E  0100               	movlb	0	; () banked
 12763  002060  6F65               	movwf	command@arg& (0+255),b
 12764  002062  0E02               	movlw	2
 12765  002064  6F66               	movwf	(command@arg+1)& (0+255),b
 12766  002066  0E00               	movlw	0
 12767  002068  6F67               	movwf	(command@arg+2)& (0+255),b
 12768  00206A  0E00               	movlw	0
 12769  00206C  6F68               	movwf	(command@arg+3)& (0+255),b
 12770  00206E  0EFF               	movlw	255
 12771  002070  6F69               	movwf	command@CRC& (0+255),b
 12772  002072  0E50               	movlw	80
 12773  002074  EC0E  F024         	call	_command
 12774                           
 12775                           ;diskio.c: 414: proceed();
 12776  002078  EC21  F028         	call	_proceed	;wreg free
 12777                           
 12778                           ;diskio.c: 416: buff = 0xFF;
 12779  00207C  0100               	movlb	0	; () banked
 12780  00207E  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12781  002080                     
 12782                           ; BSR set to: 0
 12783                           ;diskio.c: 418: buff = response();
 12784                           
 12785                           ; BSR set to: 0
 12786  002080  EC1B  F028         	call	_response	;wreg free
 12787  002084  0100               	movlb	0	; () banked
 12788  002086  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12789                           
 12790                           ; BSR set to: 0
 12791                           ;diskio.c: 419: }while(buff!=0X00);
 12792  002088  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12793  00208A  A4D8               	btfss	status,2,c
 12794  00208C  D7F9               	goto	l528
 12795  00208E                     u11860:
 12796                           
 12797                           ; BSR set to: 0
 12798                           ;diskio.c: 421: }
 12799                           ;diskio.c: 425: return stat;
 12800                           
 12801                           ; BSR set to: 0
 12802                           
 12803                           ; BSR set to: 0
 12804  00208E  5176               	movf	sdc_disk_initialize@stat& (0+255),w,b
 12805  002090  0012               	return	
 12806  002092                     __end_of_sdc_disk_initialize:
 12807                           	opt stack 0
 12808                           tosu	equ	0xFFF
 12809                           tosh	equ	0xFFE
 12810                           tosl	equ	0xFFD
 12811                           pclath	equ	0xFFA
 12812                           tblptru	equ	0xFF8
 12813                           tblptrh	equ	0xFF7
 12814                           tblptrl	equ	0xFF6
 12815                           tablat	equ	0xFF5
 12816                           prodh	equ	0xFF4
 12817                           prodl	equ	0xFF3
 12818                           intcon	equ	0xFF2
 12819                           intcon2	equ	0xFF1
 12820                           intcon3	equ	0xFF0
 12821                           indf0	equ	0xFEF
 12822                           postinc0	equ	0xFEE
 12823                           fsr0h	equ	0xFEA
 12824                           fsr0l	equ	0xFE9
 12825                           wreg	equ	0xFE8
 12826                           indf1	equ	0xFE7
 12827                           postinc1	equ	0xFE6
 12828                           postdec1	equ	0xFE5
 12829                           plusw1	equ	0xFE3
 12830                           fsr1h	equ	0xFE2
 12831                           fsr1l	equ	0xFE1
 12832                           indf2	equ	0xFDF
 12833                           postinc2	equ	0xFDE
 12834                           postdec2	equ	0xFDD
 12835                           plusw2	equ	0xFDB
 12836                           fsr2h	equ	0xFDA
 12837                           fsr2l	equ	0xFD9
 12838                           status	equ	0xFD8
 12839                           
 12840 ;; *************** function _sdc_reset *****************
 12841 ;; Defined at:
 12842 ;;		line 238 in file "bibliotecas/diskio.c"
 12843 ;; Parameters:    Size  Location     Type
 12844 ;;		None
 12845 ;; Auto vars:     Size  Location     Type
 12846 ;;  teste          10    0        unsigned char [10]
 12847 ;;  count           2   16[BANK0 ] int 
 12848 ;;  count_nosd      2   14[BANK0 ] int 
 12849 ;;  i               2   12[BANK0 ] int 
 12850 ;;  receive         2    0        unsigned int 
 12851 ;;  buff            1   18[BANK0 ] unsigned char 
 12852 ;;  stat            1    0        unsigned char 
 12853 ;; Return value:  Size  Location     Type
 12854 ;;                  1    wreg      void 
 12855 ;; Registers used:
 12856 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12857 ;; Tracked objects:
 12858 ;;		On entry : 0/0
 12859 ;;		On exit  : 0/0
 12860 ;;		Unchanged: 0/0
 12861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12862 ;;      Params:         0       0       0       0       0       0       0       0       0
 12863 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12864 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12865 ;;      Totals:         0       7       0       0       0       0       0       0       0
 12866 ;;Total ram usage:        7 bytes
 12867 ;; Hardware stack levels used:    1
 12868 ;; Hardware stack levels required when called:    6
 12869 ;; This function calls:
 12870 ;;		_command
 12871 ;;		_escreve_frase_ram_lcd
 12872 ;;		_posicao_cursor_lcd
 12873 ;;		_proceed
 12874 ;;		_response
 12875 ;; This function is called by:
 12876 ;;		_sdc_disk_initialize
 12877 ;; This function uses a non-reentrant model
 12878 ;;
 12879                           
 12880                           	psect	text42
 12881  0040B6                     __ptext42:
 12882                           	opt stack 0
 12883  0040B6                     _sdc_reset:
 12884                           	opt stack 17
 12885                           
 12886                           ;diskio.c: 240: int i = 0, count = 0, count_nosd = 0;
 12887                           
 12888                           ; BSR set to: 0
 12889                           ;incstack = 0
 12890  0040B6  0E00               	movlw	0
 12891  0040B8  0100               	movlb	0	; () banked
 12892  0040BA  6F6D               	movwf	(sdc_reset@i+1)& (0+255),b
 12893  0040BC  0E00               	movlw	0
 12894  0040BE  6F6C               	movwf	sdc_reset@i& (0+255),b
 12895  0040C0  0E00               	movlw	0
 12896  0040C2  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 12897  0040C4  0E00               	movlw	0
 12898  0040C6  6F70               	movwf	sdc_reset@count& (0+255),b
 12899  0040C8  0E00               	movlw	0
 12900  0040CA  6F6F               	movwf	(sdc_reset@count_nosd+1)& (0+255),b
 12901  0040CC  0E00               	movlw	0
 12902  0040CE  6F6E               	movwf	sdc_reset@count_nosd& (0+255),b
 12903  0040D0                     
 12904                           ; BSR set to: 0
 12905                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 12906                           
 12907                           ; BSR set to: 0
 12908  0040D0  0E00               	movlw	0
 12909  0040D2  6F65               	movwf	command@arg& (0+255),b
 12910  0040D4  0E00               	movlw	0
 12911  0040D6  6F66               	movwf	(command@arg+1)& (0+255),b
 12912  0040D8  0E00               	movlw	0
 12913  0040DA  6F67               	movwf	(command@arg+2)& (0+255),b
 12914  0040DC  0E00               	movlw	0
 12915  0040DE  6F68               	movwf	(command@arg+3)& (0+255),b
 12916  0040E0  0E95               	movlw	149
 12917  0040E2  6F69               	movwf	command@CRC& (0+255),b
 12918  0040E4  0E40               	movlw	64
 12919  0040E6  EC0E  F024         	call	_command
 12920                           
 12921                           ;diskio.c: 249: proceed();
 12922  0040EA  EC21  F028         	call	_proceed	;wreg free
 12923  0040EE                     
 12924                           ;diskio.c: 251: buff = response();
 12925  0040EE  EC1B  F028         	call	_response	;wreg free
 12926  0040F2  0100               	movlb	0	; () banked
 12927  0040F4  6F72               	movwf	sdc_reset@buff& (0+255),b
 12928                           
 12929                           ; BSR set to: 0
 12930                           ;diskio.c: 252: count++;
 12931  0040F6  4B70               	infsnz	sdc_reset@count& (0+255),f,b
 12932  0040F8  2B71               	incf	(sdc_reset@count+1)& (0+255),f,b
 12933                           
 12934                           ; BSR set to: 0
 12935                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 12936  0040FA  0572               	decf	sdc_reset@buff& (0+255),w,b
 12937  0040FC  B4D8               	btfsc	status,2,c
 12938  0040FE  D008               	goto	u11410
 12939                           
 12940                           ; BSR set to: 0
 12941  004100  BF71               	btfsc	(sdc_reset@count+1)& (0+255),7,b
 12942  004102  D7F5               	goto	l482
 12943  004104  5171               	movf	(sdc_reset@count+1)& (0+255),w,b
 12944  004106  E104               	bnz	l9402
 12945  004108  0E0A               	movlw	10
 12946  00410A  5D70               	subwf	sdc_reset@count& (0+255),w,b
 12947  00410C  A0D8               	btfss	status,0,c
 12948  00410E  D7EF               	goto	l482
 12949  004110                     u11410:
 12950  004110                     l9402:
 12951                           
 12952                           ; BSR set to: 0
 12953                           ;diskio.c: 254: count = 0;
 12954  004110  0E00               	movlw	0
 12955  004112  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 12956  004114  0E00               	movlw	0
 12957  004116  6F70               	movwf	sdc_reset@count& (0+255),b
 12958                           
 12959                           ; BSR set to: 0
 12960                           ;diskio.c: 255: if(buff != 0x01)
 12961  004118  0572               	decf	sdc_reset@buff& (0+255),w,b
 12962  00411A  B4D8               	btfsc	status,2,c
 12963  00411C  D019               	goto	l486
 12964                           
 12965                           ; BSR set to: 0
 12966                           ;diskio.c: 256: {
 12967                           ;diskio.c: 257: posicao_cursor_lcd(1,0);
 12968  00411E  0E00               	movlw	0
 12969  004120  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12970  004122  0E01               	movlw	1
 12971  004124  EC2D  F023         	call	_posicao_cursor_lcd
 12972                           
 12973                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 12974  004128  0E3A               	movlw	low STR_20
 12975  00412A  0100               	movlb	0	; () banked
 12976  00412C  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12977  00412E  0E62               	movlw	high STR_20
 12978  004130  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12979  004132  ECF7  F024         	call	_escreve_frase_ram_lcd	;wreg free
 12980                           
 12981                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 12982  004136  0E00               	movlw	0
 12983  004138  0100               	movlb	0	; () banked
 12984  00413A  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12985  00413C  0E02               	movlw	2
 12986  00413E  EC2D  F023         	call	_posicao_cursor_lcd
 12987                           
 12988                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 12989  004142  0EAB               	movlw	low STR_21
 12990  004144  0100               	movlb	0	; () banked
 12991  004146  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12992  004148  0E61               	movlw	high STR_21
 12993  00414A  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12994  00414C  ECF7  F024         	call	_escreve_frase_ram_lcd	;wreg free
 12995  004150                     l486:
 12996                           
 12997                           ;diskio.c: 261: }
 12998                           ;diskio.c: 263: }while(buff!=0X01);
 12999  004150  0100               	movlb	0	; () banked
 13000  004152  0572               	decf	sdc_reset@buff& (0+255),w,b
 13001  004154  B4D8               	btfsc	status,2,c
 13002  004156  0012               	return	
 13003  004158  D7BB               	goto	l481
 13004  00415A                     __end_of_sdc_reset:
 13005                           	opt stack 0
 13006                           tosu	equ	0xFFF
 13007                           tosh	equ	0xFFE
 13008                           tosl	equ	0xFFD
 13009                           pclath	equ	0xFFA
 13010                           tblptru	equ	0xFF8
 13011                           tblptrh	equ	0xFF7
 13012                           tblptrl	equ	0xFF6
 13013                           tablat	equ	0xFF5
 13014                           prodh	equ	0xFF4
 13015                           prodl	equ	0xFF3
 13016                           intcon	equ	0xFF2
 13017                           intcon2	equ	0xFF1
 13018                           intcon3	equ	0xFF0
 13019                           indf0	equ	0xFEF
 13020                           postinc0	equ	0xFEE
 13021                           fsr0h	equ	0xFEA
 13022                           fsr0l	equ	0xFE9
 13023                           wreg	equ	0xFE8
 13024                           indf1	equ	0xFE7
 13025                           postinc1	equ	0xFE6
 13026                           postdec1	equ	0xFE5
 13027                           plusw1	equ	0xFE3
 13028                           fsr1h	equ	0xFE2
 13029                           fsr1l	equ	0xFE1
 13030                           indf2	equ	0xFDF
 13031                           postinc2	equ	0xFDE
 13032                           postdec2	equ	0xFDD
 13033                           plusw2	equ	0xFDB
 13034                           fsr2h	equ	0xFDA
 13035                           fsr2l	equ	0xFD9
 13036                           status	equ	0xFD8
 13037                           
 13038 ;; *************** function _posicao_cursor_lcd *****************
 13039 ;; Defined at:
 13040 ;;		line 271 in file "bibliotecas/display_lcd.c"
 13041 ;; Parameters:    Size  Location     Type
 13042 ;;  linha           1    wreg     unsigned char 
 13043 ;;  coluna          1    2[BANK0 ] unsigned char 
 13044 ;; Auto vars:     Size  Location     Type
 13045 ;;  linha           1    3[BANK0 ] unsigned char 
 13046 ;;  endereco        1    4[BANK0 ] unsigned char 
 13047 ;; Return value:  Size  Location     Type
 13048 ;;                  1    wreg      void 
 13049 ;; Registers used:
 13050 ;;		wreg, status,2, status,0, cstack
 13051 ;; Tracked objects:
 13052 ;;		On entry : 0/0
 13053 ;;		On exit  : 0/0
 13054 ;;		Unchanged: 0/0
 13055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13056 ;;      Params:         0       1       0       0       0       0       0       0       0
 13057 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13058 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13059 ;;      Totals:         0       3       0       0       0       0       0       0       0
 13060 ;;Total ram usage:        3 bytes
 13061 ;; Hardware stack levels used:    1
 13062 ;; Hardware stack levels required when called:    5
 13063 ;; This function calls:
 13064 ;;		_endereco_cursor_lcd
 13065 ;; This function is called by:
 13066 ;;		_mensagem_inicial
 13067 ;;		_verifica_fence_externo
 13068 ;;		_sdc_reset
 13069 ;;		_sdc_disk_initialize
 13070 ;;		_sdcard_init
 13071 ;; This function uses a non-reentrant model
 13072 ;;
 13073                           
 13074                           	psect	text43
 13075  00465A                     __ptext43:
 13076                           	opt stack 0
 13077  00465A                     _posicao_cursor_lcd:
 13078                           	opt stack 24
 13079                           
 13080                           ; BSR set to: 0
 13081                           ;incstack = 0
 13082                           ;posicao_cursor_lcd@linha stored from wreg
 13083  00465A  0100               	movlb	0	; () banked
 13084  00465C  6F63               	movwf	posicao_cursor_lcd@linha& (0+255),b
 13085                           
 13086                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 13087  00465E  0E00               	movlw	0
 13088  004660  0100               	movlb	0	; () banked
 13089  004662  6F64               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 13090                           
 13091                           ; BSR set to: 0
 13092                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 13093  004664  0E11               	movlw	17
 13094  004666  6162               	cpfslt	posicao_cursor_lcd@coluna& (0+255),b
 13095  004668  D034               	goto	l636
 13096  00466A  D022               	goto	l637
 13097  00466C                     l638:
 13098                           
 13099                           ; BSR set to: 0
 13100                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 13101  00466C  C062  F064         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 13105  004670  5164               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 13106  004672  ECA5  F023         	call	_endereco_cursor_lcd
 13107                           
 13108                           ;display_lcd.c: 284: break;
 13109  004676  D02A               	goto	l639
 13110  004678                     
 13111                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 13112  004678  0100               	movlb	0	; () banked
 13113  00467A  5162               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 13114  00467C  0F40               	addlw	64
 13115  00467E  6F64               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 13116                           
 13117                           ; BSR set to: 0
 13118                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 13119  004680  5164               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 13120  004682  ECA5  F023         	call	_endereco_cursor_lcd
 13121                           
 13122                           ;display_lcd.c: 289: break;
 13123  004686  D022               	goto	l639
 13124  004688                     
 13125                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 13126  004688  0100               	movlb	0	; () banked
 13127  00468A  5162               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 13128  00468C  0F14               	addlw	20
 13129  00468E  6F64               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 13130                           
 13131                           ; BSR set to: 0
 13132                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 13133  004690  5164               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 13134  004692  ECA5  F023         	call	_endereco_cursor_lcd
 13135                           
 13136                           ;display_lcd.c: 294: break;
 13137  004696  D01A               	goto	l639
 13138  004698                     
 13139                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 13140  004698  0100               	movlb	0	; () banked
 13141  00469A  5162               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 13142  00469C  0F54               	addlw	84
 13143  00469E  6F64               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 13144                           
 13145                           ; BSR set to: 0
 13146                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 13147  0046A0  5164               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 13148  0046A2  ECA5  F023         	call	_endereco_cursor_lcd
 13149                           
 13150                           ;display_lcd.c: 299: break;
 13151  0046A6  D012               	goto	l639
 13152  0046A8                     
 13153                           ;display_lcd.c: 302: endereco = 0x00U;
 13154  0046A8  0E00               	movlw	0
 13155  0046AA  0100               	movlb	0	; () banked
 13156  0046AC  6F64               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 13157                           
 13158                           ; BSR set to: 0
 13159                           ;display_lcd.c: 304: }
 13160                           
 13161                           ;display_lcd.c: 303: break;
 13162  0046AE  D00E               	goto	l639
 13163  0046B0                     l637:
 13164                           
 13165                           ; BSR set to: 0
 13166                           
 13167                           ; BSR set to: 0
 13168  0046B0  5163               	movf	posicao_cursor_lcd@linha& (0+255),w,b
 13169                           
 13170                           ; Switch size 1, requested type "space"
 13171                           ; Number of cases is 4, Range of values is 1 to 4
 13172                           ; switch strategies available:
 13173                           ; Name         Instructions Cycles
 13174                           ; simple_byte           13     7 (average)
 13175                           ;	Chosen strategy is simple_byte
 13176  0046B2  0A01               	xorlw	1	; case 1
 13177  0046B4  B4D8               	btfsc	status,2,c
 13178  0046B6  D7DA               	goto	l638
 13179  0046B8  0A03               	xorlw	3	; case 2
 13180  0046BA  B4D8               	btfsc	status,2,c
 13181  0046BC  D7DD               	goto	l640
 13182  0046BE  0A01               	xorlw	1	; case 3
 13183  0046C0  B4D8               	btfsc	status,2,c
 13184  0046C2  D7E2               	goto	l641
 13185  0046C4  0A07               	xorlw	7	; case 4
 13186  0046C6  B4D8               	btfsc	status,2,c
 13187  0046C8  D7E7               	goto	l642
 13188  0046CA  D7EE               	goto	l643
 13189  0046CC                     l639:
 13190                           
 13191                           ;display_lcd.c: 306: coluna++;
 13192                           
 13193                           ; BSR set to: 0
 13194  0046CC  0100               	movlb	0	; () banked
 13195  0046CE  2B62               	incf	posicao_cursor_lcd@coluna& (0+255),f,b
 13196                           
 13197                           ;display_lcd.c: 307: }
 13198  0046D0  0012               	return	
 13199  0046D2                     l636:
 13200                           
 13201                           ; BSR set to: 0
 13202                           ;display_lcd.c: 308: else
 13203                           ;display_lcd.c: 309: {
 13204                           ;display_lcd.c: 310: endereco = 0x00U;
 13205                           
 13206                           ; BSR set to: 0
 13207  0046D2  0E00               	movlw	0
 13208  0046D4  6F64               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 13209  0046D6  0012               	return	
 13210  0046D8                     __end_of_posicao_cursor_lcd:
 13211                           	opt stack 0
 13212                           tosu	equ	0xFFF
 13213                           tosh	equ	0xFFE
 13214                           tosl	equ	0xFFD
 13215                           pclath	equ	0xFFA
 13216                           tblptru	equ	0xFF8
 13217                           tblptrh	equ	0xFF7
 13218                           tblptrl	equ	0xFF6
 13219                           tablat	equ	0xFF5
 13220                           prodh	equ	0xFF4
 13221                           prodl	equ	0xFF3
 13222                           intcon	equ	0xFF2
 13223                           intcon2	equ	0xFF1
 13224                           intcon3	equ	0xFF0
 13225                           indf0	equ	0xFEF
 13226                           postinc0	equ	0xFEE
 13227                           fsr0h	equ	0xFEA
 13228                           fsr0l	equ	0xFE9
 13229                           wreg	equ	0xFE8
 13230                           indf1	equ	0xFE7
 13231                           postinc1	equ	0xFE6
 13232                           postdec1	equ	0xFE5
 13233                           plusw1	equ	0xFE3
 13234                           fsr1h	equ	0xFE2
 13235                           fsr1l	equ	0xFE1
 13236                           indf2	equ	0xFDF
 13237                           postinc2	equ	0xFDE
 13238                           postdec2	equ	0xFDD
 13239                           plusw2	equ	0xFDB
 13240                           fsr2h	equ	0xFDA
 13241                           fsr2l	equ	0xFD9
 13242                           status	equ	0xFD8
 13243                           
 13244 ;; *************** function _endereco_cursor_lcd *****************
 13245 ;; Defined at:
 13246 ;;		line 218 in file "bibliotecas/display_lcd.c"
 13247 ;; Parameters:    Size  Location     Type
 13248 ;;  endereco        1    wreg     unsigned char 
 13249 ;; Auto vars:     Size  Location     Type
 13250 ;;  endereco        1   32[COMRAM] unsigned char 
 13251 ;; Return value:  Size  Location     Type
 13252 ;;                  1    wreg      void 
 13253 ;; Registers used:
 13254 ;;		wreg, status,2, status,0, cstack
 13255 ;; Tracked objects:
 13256 ;;		On entry : 0/0
 13257 ;;		On exit  : 0/0
 13258 ;;		Unchanged: 0/0
 13259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13260 ;;      Params:         0       0       0       0       0       0       0       0       0
 13261 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13262 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13263 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13264 ;;Total ram usage:        1 bytes
 13265 ;; Hardware stack levels used:    1
 13266 ;; Hardware stack levels required when called:    4
 13267 ;; This function calls:
 13268 ;;		_delay
 13269 ;; This function is called by:
 13270 ;;		_posicao_cursor_lcd
 13271 ;;		_cria_caractere_lcd
 13272 ;; This function uses a non-reentrant model
 13273 ;;
 13274                           
 13275                           	psect	text44
 13276  00474A                     __ptext44:
 13277                           	opt stack 0
 13278  00474A                     _endereco_cursor_lcd:
 13279                           	opt stack 24
 13280                           
 13281                           ; BSR set to: 0
 13282                           ;incstack = 0
 13283                           ;endereco_cursor_lcd@endereco stored from wreg
 13284  00474A  6E21               	movwf	endereco_cursor_lcd@endereco,c
 13285                           
 13286                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 13287  00474C  9483               	bcf	3971,2,c	;volatile
 13288                           
 13289                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 13290  00474E  9283               	bcf	3971,1,c	;volatile
 13291                           
 13292                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 13293  004750  9083               	bcf	3971,0,c	;volatile
 13294                           
 13295                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 13296  004752  8E83               	bsf	3971,7,c	;volatile
 13297                           
 13298                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 13299  004754  A821               	btfss	endereco_cursor_lcd@endereco,4,c
 13300  004756  D002               	goto	l619
 13301  004758  8883               	bsf	3971,4,c	;volatile
 13302  00475A  D001               	goto	l620
 13303  00475C                     l619:
 13304                           
 13305                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 13306  00475C  9883               	bcf	3971,4,c	;volatile
 13307  00475E                     l620:
 13308                           
 13309                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 13310  00475E  AA21               	btfss	endereco_cursor_lcd@endereco,5,c
 13311  004760  D002               	goto	l621
 13312  004762  8A83               	bsf	3971,5,c	;volatile
 13313  004764  D001               	goto	l622
 13314  004766                     l621:
 13315                           
 13316                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 13317  004766  9A83               	bcf	3971,5,c	;volatile
 13318  004768                     l622:
 13319                           
 13320                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 13321  004768  AC21               	btfss	endereco_cursor_lcd@endereco,6,c
 13322  00476A  D002               	goto	l623
 13323  00476C  8C83               	bsf	3971,6,c	;volatile
 13324  00476E  D001               	goto	l624
 13325  004770                     l623:
 13326                           
 13327                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 13328  004770  9C83               	bcf	3971,6,c	;volatile
 13329  004772                     l624:
 13330                           
 13331                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 13332  004772  8083               	bsf	3971,0,c	;volatile
 13333                           
 13334                           ;display_lcd.c: 236: delay();
 13335  004774  EC39  F027         	call	_delay	;wreg free
 13336                           
 13337                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 13338  004778  9083               	bcf	3971,0,c	;volatile
 13339                           
 13340                           ;display_lcd.c: 238: delay();
 13341  00477A  EC39  F027         	call	_delay	;wreg free
 13342                           
 13343                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 13344  00477E  A021               	btfss	endereco_cursor_lcd@endereco,0,c
 13345  004780  D002               	goto	l625
 13346  004782  8883               	bsf	3971,4,c	;volatile
 13347  004784  D001               	goto	l626
 13348  004786                     l625:
 13349                           
 13350                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 13351  004786  9883               	bcf	3971,4,c	;volatile
 13352  004788                     l626:
 13353                           
 13354                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 13355  004788  A221               	btfss	endereco_cursor_lcd@endereco,1,c
 13356  00478A  D002               	goto	l627
 13357  00478C  8A83               	bsf	3971,5,c	;volatile
 13358  00478E  D001               	goto	l628
 13359  004790                     l627:
 13360                           
 13361                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 13362  004790  9A83               	bcf	3971,5,c	;volatile
 13363  004792                     l628:
 13364                           
 13365                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 13366  004792  A421               	btfss	endereco_cursor_lcd@endereco,2,c
 13367  004794  D002               	goto	l629
 13368  004796  8C83               	bsf	3971,6,c	;volatile
 13369  004798  D001               	goto	l630
 13370  00479A                     l629:
 13371                           
 13372                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 13373  00479A  9C83               	bcf	3971,6,c	;volatile
 13374  00479C                     l630:
 13375                           
 13376                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 13377  00479C  A621               	btfss	endereco_cursor_lcd@endereco,3,c
 13378  00479E  D002               	goto	l631
 13379  0047A0  8E83               	bsf	3971,7,c	;volatile
 13380  0047A2  D001               	goto	l632
 13381  0047A4                     l631:
 13382                           
 13383                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 13384  0047A4  9E83               	bcf	3971,7,c	;volatile
 13385  0047A6                     l632:
 13386                           
 13387                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 13388  0047A6  8083               	bsf	3971,0,c	;volatile
 13389                           
 13390                           ;display_lcd.c: 252: delay();
 13391  0047A8  EC39  F027         	call	_delay	;wreg free
 13392                           
 13393                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 13394  0047AC  9083               	bcf	3971,0,c	;volatile
 13395                           
 13396                           ;display_lcd.c: 254: delay();
 13397  0047AE  EC39  F027         	call	_delay	;wreg free
 13398  0047B2  0012               	return		;funcret
 13399  0047B4                     __end_of_endereco_cursor_lcd:
 13400                           	opt stack 0
 13401                           tosu	equ	0xFFF
 13402                           tosh	equ	0xFFE
 13403                           tosl	equ	0xFFD
 13404                           pclath	equ	0xFFA
 13405                           tblptru	equ	0xFF8
 13406                           tblptrh	equ	0xFF7
 13407                           tblptrl	equ	0xFF6
 13408                           tablat	equ	0xFF5
 13409                           prodh	equ	0xFF4
 13410                           prodl	equ	0xFF3
 13411                           intcon	equ	0xFF2
 13412                           intcon2	equ	0xFF1
 13413                           intcon3	equ	0xFF0
 13414                           indf0	equ	0xFEF
 13415                           postinc0	equ	0xFEE
 13416                           fsr0h	equ	0xFEA
 13417                           fsr0l	equ	0xFE9
 13418                           wreg	equ	0xFE8
 13419                           indf1	equ	0xFE7
 13420                           postinc1	equ	0xFE6
 13421                           postdec1	equ	0xFE5
 13422                           plusw1	equ	0xFE3
 13423                           fsr1h	equ	0xFE2
 13424                           fsr1l	equ	0xFE1
 13425                           indf2	equ	0xFDF
 13426                           postinc2	equ	0xFDE
 13427                           postdec2	equ	0xFDD
 13428                           plusw2	equ	0xFDB
 13429                           fsr2h	equ	0xFDA
 13430                           fsr2l	equ	0xFD9
 13431                           status	equ	0xFD8
 13432                           
 13433 ;; *************** function _escreve_frase_ram_lcd *****************
 13434 ;; Defined at:
 13435 ;;		line 445 in file "bibliotecas/display_lcd.c"
 13436 ;; Parameters:    Size  Location     Type
 13437 ;;  buffer          2    2[BANK0 ] PTR unsigned char 
 13438 ;;		 -> escreve_inteiro_lcd@texto(7), STR_23(11), STR_22(10), STR_21(16), 
 13439 ;;		 -> STR_20(11), STR_17(9), STR_16(10), STR_15(10), 
 13440 ;;		 -> STR_14(14), STR_13(21), STR_12(15), STR_9(14), 
 13441 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 13442 ;; Auto vars:     Size  Location     Type
 13443 ;;		None
 13444 ;; Return value:  Size  Location     Type
 13445 ;;                  1    wreg      void 
 13446 ;; Registers used:
 13447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13448 ;; Tracked objects:
 13449 ;;		On entry : 0/0
 13450 ;;		On exit  : 0/0
 13451 ;;		Unchanged: 0/0
 13452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13453 ;;      Params:         0       2       0       0       0       0       0       0       0
 13454 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13455 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13456 ;;      Totals:         0       2       0       0       0       0       0       0       0
 13457 ;;Total ram usage:        2 bytes
 13458 ;; Hardware stack levels used:    1
 13459 ;; Hardware stack levels required when called:    5
 13460 ;; This function calls:
 13461 ;;		_escreve_caractere_lcd
 13462 ;; This function is called by:
 13463 ;;		_mensagem_inicial
 13464 ;;		_verifica_fence_externo
 13465 ;;		_sdc_reset
 13466 ;;		_sdc_disk_initialize
 13467 ;;		_sdcard_init
 13468 ;;		_escreve_inteiro_lcd
 13469 ;; This function uses a non-reentrant model
 13470 ;;
 13471                           
 13472                           	psect	text45
 13473  0049EE                     __ptext45:
 13474                           	opt stack 0
 13475  0049EE                     _escreve_frase_ram_lcd:
 13476                           	opt stack 24
 13477                           
 13478                           ;display_lcd.c: 447: while(*buffer)
 13479                           
 13480                           ;incstack = 0
 13481  0049EE  D015               	goto	l681
 13482  0049F0                     
 13483                           ;display_lcd.c: 448: {
 13484                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 13485  0049F0  C062  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13486  0049F4  C063  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13487  0049F8  6AF8               	clrf	tblptru,c
 13488  0049FA  0E07               	movlw	(high __ramtop+-1)
 13489  0049FC  64F7               	cpfsgt	tblptrh,c
 13490  0049FE  D003               	bra	u11187
 13491  004A00  0008               	tblrd		*
 13492  004A02  50F5               	movf	tablat,w,c
 13493  004A04  D005               	bra	u11180
 13494  004A06                     u11187:
 13495  004A06  CFF6 FFE9          	movff	tblptrl,fsr0l
 13496  004A0A  CFF7 FFEA          	movff	tblptrh,fsr0h
 13497  004A0E  50EF               	movf	indf0,w,c
 13498  004A10                     u11180:
 13499  004A10  EC6C  F023         	call	_escreve_caractere_lcd
 13500                           
 13501                           ;display_lcd.c: 450: buffer++;
 13502  004A14  0100               	movlb	0	; () banked
 13503  004A16  4B62               	infsnz	escreve_frase_ram_lcd@buffer& (0+255),f,b
 13504  004A18  2B63               	incf	(escreve_frase_ram_lcd@buffer+1)& (0+255),f,b
 13505  004A1A                     l681:
 13506                           
 13507                           ; BSR set to: 0
 13508  004A1A  C062  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13509  004A1E  C063  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13510  004A22  6AF8               	clrf	tblptru,c
 13511  004A24  0E07               	movlw	(high __ramtop+-1)
 13512  004A26  64F7               	cpfsgt	tblptrh,c
 13513  004A28  D003               	bra	u11197
 13514  004A2A  0008               	tblrd		*
 13515  004A2C  50F5               	movf	tablat,w,c
 13516  004A2E  D005               	bra	u11190
 13517  004A30                     u11197:
 13518  004A30  CFF6 FFE9          	movff	tblptrl,fsr0l
 13519  004A34  CFF7 FFEA          	movff	tblptrh,fsr0h
 13520  004A38  50EF               	movf	indf0,w,c
 13521  004A3A                     u11190:
 13522  004A3A  0900               	iorlw	0
 13523  004A3C  B4D8               	btfsc	status,2,c
 13524  004A3E  0012               	return	
 13525  004A40  D7D7               	goto	l682
 13526  004A42                     __end_of_escreve_frase_ram_lcd:
 13527                           	opt stack 0
 13528                           tosu	equ	0xFFF
 13529                           tosh	equ	0xFFE
 13530                           tosl	equ	0xFFD
 13531                           pclath	equ	0xFFA
 13532                           tblptru	equ	0xFF8
 13533                           tblptrh	equ	0xFF7
 13534                           tblptrl	equ	0xFF6
 13535                           tablat	equ	0xFF5
 13536                           prodh	equ	0xFF4
 13537                           prodl	equ	0xFF3
 13538                           intcon	equ	0xFF2
 13539                           intcon2	equ	0xFF1
 13540                           intcon3	equ	0xFF0
 13541                           indf0	equ	0xFEF
 13542                           postinc0	equ	0xFEE
 13543                           fsr0h	equ	0xFEA
 13544                           fsr0l	equ	0xFE9
 13545                           wreg	equ	0xFE8
 13546                           indf1	equ	0xFE7
 13547                           postinc1	equ	0xFE6
 13548                           postdec1	equ	0xFE5
 13549                           plusw1	equ	0xFE3
 13550                           fsr1h	equ	0xFE2
 13551                           fsr1l	equ	0xFE1
 13552                           indf2	equ	0xFDF
 13553                           postinc2	equ	0xFDE
 13554                           postdec2	equ	0xFDD
 13555                           plusw2	equ	0xFDB
 13556                           fsr2h	equ	0xFDA
 13557                           fsr2l	equ	0xFD9
 13558                           status	equ	0xFD8
 13559                           
 13560 ;; *************** function _escreve_caractere_lcd *****************
 13561 ;; Defined at:
 13562 ;;		line 323 in file "bibliotecas/display_lcd.c"
 13563 ;; Parameters:    Size  Location     Type
 13564 ;;  data            1    wreg     unsigned char 
 13565 ;; Auto vars:     Size  Location     Type
 13566 ;;  data            1   32[COMRAM] unsigned char 
 13567 ;; Return value:  Size  Location     Type
 13568 ;;                  1    wreg      void 
 13569 ;; Registers used:
 13570 ;;		wreg, status,2, status,0, cstack
 13571 ;; Tracked objects:
 13572 ;;		On entry : 0/0
 13573 ;;		On exit  : 0/0
 13574 ;;		Unchanged: 0/0
 13575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13576 ;;      Params:         0       0       0       0       0       0       0       0       0
 13577 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13578 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13579 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13580 ;;Total ram usage:        1 bytes
 13581 ;; Hardware stack levels used:    1
 13582 ;; Hardware stack levels required when called:    4
 13583 ;; This function calls:
 13584 ;;		_delay
 13585 ;; This function is called by:
 13586 ;;		_escreve_frase_ram_lcd
 13587 ;;		_escreve_float_lcd
 13588 ;;		_escreve_frase_lcd
 13589 ;;		_cria_caractere_lcd
 13590 ;; This function uses a non-reentrant model
 13591 ;;
 13592                           
 13593                           	psect	text46
 13594  0046D8                     __ptext46:
 13595                           	opt stack 0
 13596  0046D8                     _escreve_caractere_lcd:
 13597                           	opt stack 24
 13598                           
 13599                           ;incstack = 0
 13600                           ;escreve_caractere_lcd@data stored from wreg
 13601  0046D8  6E21               	movwf	escreve_caractere_lcd@data,c
 13602                           
 13603                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 13604  0046DA  9483               	bcf	3971,2,c	;volatile
 13605                           
 13606                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 13607  0046DC  8283               	bsf	3971,1,c	;volatile
 13608                           
 13609                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 13610  0046DE  9083               	bcf	3971,0,c	;volatile
 13611                           
 13612                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 13613  0046E0  A821               	btfss	escreve_caractere_lcd@data,4,c
 13614  0046E2  D002               	goto	l648
 13615  0046E4  8883               	bsf	3971,4,c	;volatile
 13616  0046E6  D001               	goto	l649
 13617  0046E8                     l648:
 13618                           
 13619                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 13620  0046E8  9883               	bcf	3971,4,c	;volatile
 13621  0046EA                     l649:
 13622                           
 13623                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 13624  0046EA  AA21               	btfss	escreve_caractere_lcd@data,5,c
 13625  0046EC  D002               	goto	l650
 13626  0046EE  8A83               	bsf	3971,5,c	;volatile
 13627  0046F0  D001               	goto	l651
 13628  0046F2                     l650:
 13629                           
 13630                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 13631  0046F2  9A83               	bcf	3971,5,c	;volatile
 13632  0046F4                     l651:
 13633                           
 13634                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 13635  0046F4  AC21               	btfss	escreve_caractere_lcd@data,6,c
 13636  0046F6  D002               	goto	l652
 13637  0046F8  8C83               	bsf	3971,6,c	;volatile
 13638  0046FA  D001               	goto	l653
 13639  0046FC                     l652:
 13640                           
 13641                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 13642  0046FC  9C83               	bcf	3971,6,c	;volatile
 13643  0046FE                     l653:
 13644                           
 13645                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 13646  0046FE  AE21               	btfss	escreve_caractere_lcd@data,7,c
 13647  004700  D002               	goto	l654
 13648  004702  8E83               	bsf	3971,7,c	;volatile
 13649  004704  D001               	goto	l655
 13650  004706                     l654:
 13651                           
 13652                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 13653  004706  9E83               	bcf	3971,7,c	;volatile
 13654  004708                     l655:
 13655                           
 13656                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 13657  004708  8083               	bsf	3971,0,c	;volatile
 13658                           
 13659                           ;display_lcd.c: 342: delay();
 13660  00470A  EC39  F027         	call	_delay	;wreg free
 13661                           
 13662                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 13663  00470E  9083               	bcf	3971,0,c	;volatile
 13664                           
 13665                           ;display_lcd.c: 344: delay();
 13666  004710  EC39  F027         	call	_delay	;wreg free
 13667                           
 13668                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 13669  004714  A021               	btfss	escreve_caractere_lcd@data,0,c
 13670  004716  D002               	goto	l656
 13671  004718  8883               	bsf	3971,4,c	;volatile
 13672  00471A  D001               	goto	l657
 13673  00471C                     l656:
 13674                           
 13675                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 13676  00471C  9883               	bcf	3971,4,c	;volatile
 13677  00471E                     l657:
 13678                           
 13679                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 13680  00471E  A221               	btfss	escreve_caractere_lcd@data,1,c
 13681  004720  D002               	goto	l658
 13682  004722  8A83               	bsf	3971,5,c	;volatile
 13683  004724  D001               	goto	l659
 13684  004726                     l658:
 13685                           
 13686                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 13687  004726  9A83               	bcf	3971,5,c	;volatile
 13688  004728                     l659:
 13689                           
 13690                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 13691  004728  A421               	btfss	escreve_caractere_lcd@data,2,c
 13692  00472A  D002               	goto	l660
 13693  00472C  8C83               	bsf	3971,6,c	;volatile
 13694  00472E  D001               	goto	l661
 13695  004730                     l660:
 13696                           
 13697                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 13698  004730  9C83               	bcf	3971,6,c	;volatile
 13699  004732                     l661:
 13700                           
 13701                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 13702  004732  A621               	btfss	escreve_caractere_lcd@data,3,c
 13703  004734  D002               	goto	l662
 13704  004736  8E83               	bsf	3971,7,c	;volatile
 13705  004738  D001               	goto	l663
 13706  00473A                     l662:
 13707                           
 13708                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 13709  00473A  9E83               	bcf	3971,7,c	;volatile
 13710  00473C                     l663:
 13711                           
 13712                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 13713  00473C  8083               	bsf	3971,0,c	;volatile
 13714                           
 13715                           ;display_lcd.c: 359: delay();
 13716  00473E  EC39  F027         	call	_delay	;wreg free
 13717                           
 13718                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 13719  004742  9083               	bcf	3971,0,c	;volatile
 13720                           
 13721                           ;display_lcd.c: 361: delay();
 13722  004744  EC39  F027         	call	_delay	;wreg free
 13723  004748  0012               	return		;funcret
 13724  00474A                     __end_of_escreve_caractere_lcd:
 13725                           	opt stack 0
 13726                           tosu	equ	0xFFF
 13727                           tosh	equ	0xFFE
 13728                           tosl	equ	0xFFD
 13729                           pclath	equ	0xFFA
 13730                           tblptru	equ	0xFF8
 13731                           tblptrh	equ	0xFF7
 13732                           tblptrl	equ	0xFF6
 13733                           tablat	equ	0xFF5
 13734                           prodh	equ	0xFF4
 13735                           prodl	equ	0xFF3
 13736                           intcon	equ	0xFF2
 13737                           intcon2	equ	0xFF1
 13738                           intcon3	equ	0xFF0
 13739                           indf0	equ	0xFEF
 13740                           postinc0	equ	0xFEE
 13741                           fsr0h	equ	0xFEA
 13742                           fsr0l	equ	0xFE9
 13743                           wreg	equ	0xFE8
 13744                           indf1	equ	0xFE7
 13745                           postinc1	equ	0xFE6
 13746                           postdec1	equ	0xFE5
 13747                           plusw1	equ	0xFE3
 13748                           fsr1h	equ	0xFE2
 13749                           fsr1l	equ	0xFE1
 13750                           indf2	equ	0xFDF
 13751                           postinc2	equ	0xFDE
 13752                           postdec2	equ	0xFDD
 13753                           plusw2	equ	0xFDB
 13754                           fsr2h	equ	0xFDA
 13755                           fsr2l	equ	0xFD9
 13756                           status	equ	0xFD8
 13757                           
 13758 ;; *************** function _delay *****************
 13759 ;; Defined at:
 13760 ;;		line 45 in file "bibliotecas/display_lcd.c"
 13761 ;; Parameters:    Size  Location     Type
 13762 ;;		None
 13763 ;; Auto vars:     Size  Location     Type
 13764 ;;  contador_int    1    1[BANK0 ] unsigned char 
 13765 ;;  contador_ext    1    0[BANK0 ] unsigned char 
 13766 ;; Return value:  Size  Location     Type
 13767 ;;                  1    wreg      void 
 13768 ;; Registers used:
 13769 ;;		wreg, status,2, status,0
 13770 ;; Tracked objects:
 13771 ;;		On entry : 0/0
 13772 ;;		On exit  : 0/0
 13773 ;;		Unchanged: 0/0
 13774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13775 ;;      Params:         0       0       0       0       0       0       0       0       0
 13776 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13777 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13778 ;;      Totals:         0       2       0       0       0       0       0       0       0
 13779 ;;Total ram usage:        2 bytes
 13780 ;; Hardware stack levels used:    1
 13781 ;; Hardware stack levels required when called:    3
 13782 ;; This function calls:
 13783 ;;		Nothing
 13784 ;; This function is called by:
 13785 ;;		_init_lcd
 13786 ;;		_escreve_cmd_lcd
 13787 ;;		_endereco_cursor_lcd
 13788 ;;		_escreve_caractere_lcd
 13789 ;; This function uses a non-reentrant model
 13790 ;;
 13791                           
 13792                           	psect	text47
 13793  004E72                     __ptext47:
 13794                           	opt stack 0
 13795  004E72                     _delay:
 13796                           	opt stack 24
 13797                           
 13798                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 13799                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 13800                           
 13801                           ;incstack = 0
 13802  004E72  0E00               	movlw	0
 13803  004E74  0100               	movlb	0	; () banked
 13804  004E76  6F60               	movwf	delay@contador_ext& (0+255),b
 13805  004E78                     l9056:
 13806                           
 13807                           ; BSR set to: 0
 13808  004E78  0E63               	movlw	99
 13809  004E7A  6560               	cpfsgt	delay@contador_ext& (0+255),b
 13810  004E7C  D001               	goto	l587
 13811  004E7E  0012               	return	
 13812  004E80                     l587:
 13813                           
 13814                           ; BSR set to: 0
 13815                           ;display_lcd.c: 50: {
 13816                           ;display_lcd.c: 51: __nop();
 13817  004E80  F000               	nop	
 13818                           
 13819                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 13820  004E82  0E00               	movlw	0
 13821  004E84  0100               	movlb	0	; () banked
 13822  004E86  6F61               	movwf	delay@contador_int& (0+255),b
 13823  004E88                     l9062:
 13824                           
 13825                           ; BSR set to: 0
 13826  004E88  0E31               	movlw	49
 13827  004E8A  6561               	cpfsgt	delay@contador_int& (0+255),b
 13828  004E8C  D001               	goto	l589
 13829  004E8E  D004               	goto	u10910
 13830  004E90                     l589:
 13831                           
 13832                           ; BSR set to: 0
 13833                           ;display_lcd.c: 53: {
 13834                           ;display_lcd.c: 54: __nop();
 13835  004E90  F000               	nop	
 13836  004E92  0100               	movlb	0	; () banked
 13837  004E94  2B61               	incf	delay@contador_int& (0+255),f,b
 13838  004E96  D7F8               	goto	l9062
 13839  004E98                     u10910:
 13840                           
 13841                           ; BSR set to: 0
 13842                           
 13843                           ; BSR set to: 0
 13844  004E98  2B60               	incf	delay@contador_ext& (0+255),f,b
 13845  004E9A  D7EE               	goto	l9056
 13846  004E9C                     __end_of_delay:
 13847                           	opt stack 0
 13848                           tosu	equ	0xFFF
 13849                           tosh	equ	0xFFE
 13850                           tosl	equ	0xFFD
 13851                           pclath	equ	0xFFA
 13852                           tblptru	equ	0xFF8
 13853                           tblptrh	equ	0xFF7
 13854                           tblptrl	equ	0xFF6
 13855                           tablat	equ	0xFF5
 13856                           prodh	equ	0xFF4
 13857                           prodl	equ	0xFF3
 13858                           intcon	equ	0xFF2
 13859                           intcon2	equ	0xFF1
 13860                           intcon3	equ	0xFF0
 13861                           indf0	equ	0xFEF
 13862                           postinc0	equ	0xFEE
 13863                           fsr0h	equ	0xFEA
 13864                           fsr0l	equ	0xFE9
 13865                           wreg	equ	0xFE8
 13866                           indf1	equ	0xFE7
 13867                           postinc1	equ	0xFE6
 13868                           postdec1	equ	0xFE5
 13869                           plusw1	equ	0xFE3
 13870                           fsr1h	equ	0xFE2
 13871                           fsr1l	equ	0xFE1
 13872                           indf2	equ	0xFDF
 13873                           postinc2	equ	0xFDE
 13874                           postdec2	equ	0xFDD
 13875                           plusw2	equ	0xFDB
 13876                           fsr2h	equ	0xFDA
 13877                           fsr2l	equ	0xFD9
 13878                           status	equ	0xFD8
 13879                           
 13880 ;; *************** function _check_fs *****************
 13881 ;; Defined at:
 13882 ;;		line 623 in file "bibliotecas/tff.c"
 13883 ;; Parameters:    Size  Location     Type
 13884 ;;  sect            4   43[BANK0 ] unsigned long 
 13885 ;; Auto vars:     Size  Location     Type
 13886 ;;  fs              2   49[BANK0 ] PTR struct _FATFS
 13887 ;;		 -> NULL(0), fs(544), 
 13888 ;; Return value:  Size  Location     Type
 13889 ;;                  1    wreg      unsigned char 
 13890 ;; Registers used:
 13891 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13892 ;; Tracked objects:
 13893 ;;		On entry : 0/0
 13894 ;;		On exit  : 0/0
 13895 ;;		Unchanged: 0/0
 13896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13897 ;;      Params:         0       4       0       0       0       0       0       0       0
 13898 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13899 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13900 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13901 ;;Total ram usage:        8 bytes
 13902 ;; Hardware stack levels used:    1
 13903 ;; Hardware stack levels required when called:    8
 13904 ;; This function calls:
 13905 ;;		_disk_read
 13906 ;;		_memcmp
 13907 ;; This function is called by:
 13908 ;;		_auto_mount
 13909 ;; This function uses a non-reentrant model
 13910 ;;
 13911                           
 13912                           	psect	text48
 13913  0043B8                     __ptext48:
 13914                           	opt stack 0
 13915  0043B8                     _check_fs:
 13916                           	opt stack 17
 13917                           
 13918                           ;tff.c: 627: FATFS *fs = FatFs;
 13919                           
 13920                           ; BSR set to: 0
 13921                           ;incstack = 0
 13922  0043B8  C0FD  F091         	movff	_FatFs,check_fs@fs
 13923  0043BC  C0FE  F092         	movff	_FatFs+1,check_fs@fs+1
 13924                           
 13925                           ;tff.c: 629: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 13926  0043C0  0E20               	movlw	32
 13927  0043C2  0100               	movlb	0	; () banked
 13928  0043C4  2591               	addwf	check_fs@fs& (0+255),w,b
 13929  0043C6  6F7F               	movwf	disk_read@buff& (0+255),b
 13930  0043C8  0E00               	movlw	0
 13931  0043CA  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 13932  0043CC  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 13933  0043CE  C08B  F081         	movff	check_fs@sect,disk_read@sector
 13934  0043D2  C08C  F082         	movff	check_fs@sect+1,disk_read@sector+1
 13935  0043D6  C08D  F083         	movff	check_fs@sect+2,disk_read@sector+2
 13936  0043DA  C08E  F084         	movff	check_fs@sect+3,disk_read@sector+3
 13937  0043DE  0E01               	movlw	1
 13938  0043E0  6F85               	movwf	disk_read@count& (0+255),b
 13939  0043E2  0E00               	movlw	0
 13940  0043E4  EC4E  F021         	call	_disk_read
 13941  0043E8  0900               	iorlw	0
 13942  0043EA  B4D8               	btfsc	status,2,c
 13943  0043EC  D002               	goto	l1131
 13944                           
 13945                           ;tff.c: 630: return 2;
 13946  0043EE  0E02               	movlw	2
 13947  0043F0  0012               	return	
 13948  0043F2                     l1131:
 13949                           
 13950                           ;tff.c: 631: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 13951  0043F2  0100               	movlb	0	; () banked
 13952  0043F4  EE22 F01E          	lfsr	2,542
 13953  0043F8  5191               	movf	check_fs@fs& (0+255),w,b
 13954  0043FA  26D9               	addwf	fsr2l,f,c
 13955  0043FC  5192               	movf	(check_fs@fs+1)& (0+255),w,b
 13956  0043FE  22DA               	addwfc	fsr2h,f,c
 13957  004400  0E55               	movlw	85
 13958  004402  18DE               	xorwf	postinc2,w,c
 13959  004404  E104               	bnz	u12560
 13960  004406  0EAA               	movlw	170
 13961  004408  18DE               	xorwf	postinc2,w,c
 13962  00440A  B4D8               	btfsc	status,2,c
 13963  00440C  D002               	goto	l1133
 13964  00440E                     u12560:
 13965                           
 13966                           ; BSR set to: 0
 13967                           ;tff.c: 632: return 2;
 13968  00440E  0E02               	movlw	2
 13969                           
 13970                           ; BSR set to: 0
 13971  004410  0012               	return	
 13972  004412                     l1133:
 13973                           
 13974                           ; BSR set to: 0
 13975                           ;tff.c: 634: if (!memcmp(&fs->win[54], "FAT", 3))
 13976                           
 13977                           ; BSR set to: 0
 13978  004412  0E56               	movlw	86
 13979  004414  2591               	addwf	check_fs@fs& (0+255),w,b
 13980  004416  6F60               	movwf	memcmp@s1& (0+255),b
 13981  004418  0E00               	movlw	0
 13982  00441A  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 13983  00441C  6F61               	movwf	(memcmp@s1+1)& (0+255),b
 13984  00441E  0E78               	movlw	low STR_25
 13985  004420  6F62               	movwf	memcmp@s2& (0+255),b
 13986  004422  0E62               	movlw	high STR_25
 13987  004424  6F63               	movwf	(memcmp@s2+1)& (0+255),b
 13988  004426  0E00               	movlw	0
 13989  004428  6F65               	movwf	(memcmp@n+1)& (0+255),b
 13990  00442A  0E03               	movlw	3
 13991  00442C  6F64               	movwf	memcmp@n& (0+255),b
 13992  00442E  ECAD  F020         	call	_memcmp	;wreg free
 13993  004432  0100               	movlb	0	; () banked
 13994  004434  5160               	movf	?_memcmp& (0+255),w,b
 13995  004436  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 13996  004438  A4D8               	btfss	status,2,c
 13997  00443A  D002               	goto	l1134
 13998                           
 13999                           ; BSR set to: 0
 14000                           ;tff.c: 635: return 0;
 14001  00443C  0E00               	movlw	0
 14002                           
 14003                           ; BSR set to: 0
 14004  00443E  0012               	return	
 14005  004440                     l1134:
 14006                           
 14007                           ; BSR set to: 0
 14008                           ;tff.c: 640: return 1;
 14009                           
 14010                           ; BSR set to: 0
 14011  004440  0E01               	movlw	1
 14012  004442  0012               	return	
 14013  004444                     __end_of_check_fs:
 14014                           	opt stack 0
 14015                           tosu	equ	0xFFF
 14016                           tosh	equ	0xFFE
 14017                           tosl	equ	0xFFD
 14018                           pclath	equ	0xFFA
 14019                           tblptru	equ	0xFF8
 14020                           tblptrh	equ	0xFF7
 14021                           tblptrl	equ	0xFF6
 14022                           tablat	equ	0xFF5
 14023                           prodh	equ	0xFF4
 14024                           prodl	equ	0xFF3
 14025                           intcon	equ	0xFF2
 14026                           intcon2	equ	0xFF1
 14027                           intcon3	equ	0xFF0
 14028                           indf0	equ	0xFEF
 14029                           postinc0	equ	0xFEE
 14030                           fsr0h	equ	0xFEA
 14031                           fsr0l	equ	0xFE9
 14032                           wreg	equ	0xFE8
 14033                           indf1	equ	0xFE7
 14034                           postinc1	equ	0xFE6
 14035                           postdec1	equ	0xFE5
 14036                           plusw1	equ	0xFE3
 14037                           fsr1h	equ	0xFE2
 14038                           fsr1l	equ	0xFE1
 14039                           indf2	equ	0xFDF
 14040                           postinc2	equ	0xFDE
 14041                           postdec2	equ	0xFDD
 14042                           plusw2	equ	0xFDB
 14043                           fsr2h	equ	0xFDA
 14044                           fsr2l	equ	0xFD9
 14045                           status	equ	0xFD8
 14046                           
 14047 ;; *************** function _memcmp *****************
 14048 ;; Defined at:
 14049 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
 14050 ;; Parameters:    Size  Location     Type
 14051 ;;  s1              2    0[BANK0 ] PTR const void 
 14052 ;;		 -> fs.win(512), NULL(0), fs(544), 
 14053 ;;  s2              2    2[BANK0 ] PTR const void 
 14054 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_25(4), 
 14055 ;;  n               2    4[BANK0 ] unsigned int 
 14056 ;; Auto vars:     Size  Location     Type
 14057 ;;		None
 14058 ;; Return value:  Size  Location     Type
 14059 ;;                  2    0[BANK0 ] int 
 14060 ;; Registers used:
 14061 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14062 ;; Tracked objects:
 14063 ;;		On entry : 0/0
 14064 ;;		On exit  : 0/0
 14065 ;;		Unchanged: 0/0
 14066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14067 ;;      Params:         0       6       0       0       0       0       0       0       0
 14068 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14069 ;;      Temps:          0       3       0       0       0       0       0       0       0
 14070 ;;      Totals:         0       9       0       0       0       0       0       0       0
 14071 ;;Total ram usage:        9 bytes
 14072 ;; Hardware stack levels used:    1
 14073 ;; Hardware stack levels required when called:    3
 14074 ;; This function calls:
 14075 ;;		Nothing
 14076 ;; This function is called by:
 14077 ;;		_trace_path
 14078 ;;		_check_fs
 14079 ;; This function uses a non-reentrant model
 14080 ;;
 14081                           
 14082                           	psect	text49
 14083  00415A                     __ptext49:
 14084                           	opt stack 0
 14085  00415A                     _memcmp:
 14086                           	opt stack 22
 14087                           
 14088                           ;incstack = 0
 14089  00415A  D043               	goto	l1877
 14090  00415C                     l9720:
 14091  00415C  C060  FFD9         	movff	memcmp@s1,fsr2l
 14092  004160  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 14093  004164  50DF               	movf	indf2,w,c
 14094  004166  0100               	movlb	0	; () banked
 14095  004168  6F66               	movwf	??_memcmp& (0+255),b
 14096  00416A  C062  FFF6         	movff	memcmp@s2,tblptrl
 14097  00416E  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 14098  004172  6AF8               	clrf	tblptru,c
 14099  004174  0E07               	movlw	(high __ramtop+-1)
 14100  004176  64F7               	cpfsgt	tblptrh,c
 14101  004178  D003               	bra	u11887
 14102  00417A  0008               	tblrd		*
 14103  00417C  50F5               	movf	tablat,w,c
 14104  00417E  D005               	bra	u11880
 14105  004180                     u11887:
 14106  004180  CFF6 FFE9          	movff	tblptrl,fsr0l
 14107  004184  CFF7 FFEA          	movff	tblptrh,fsr0h
 14108  004188  50EF               	movf	indf0,w,c
 14109  00418A                     u11880:
 14110  00418A  0100               	movlb	0	; () banked
 14111  00418C  1966               	xorwf	??_memcmp& (0+255),w,b
 14112  00418E  B4D8               	btfsc	status,2,c
 14113  004190  D024               	goto	l1879
 14114                           
 14115                           ; BSR set to: 0
 14116  004192  C062  FFF6         	movff	memcmp@s2,tblptrl
 14117  004196  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 14118  00419A  6AF8               	clrf	tblptru,c
 14119  00419C  0E07               	movlw	(high __ramtop+-1)
 14120  00419E  64F7               	cpfsgt	tblptrh,c
 14121  0041A0  D003               	bra	u11907
 14122  0041A2  0008               	tblrd		*
 14123  0041A4  50F5               	movf	tablat,w,c
 14124  0041A6  D005               	bra	u11900
 14125  0041A8                     u11907:
 14126  0041A8  CFF6 FFE9          	movff	tblptrl,fsr0l
 14127  0041AC  CFF7 FFEA          	movff	tblptrh,fsr0h
 14128  0041B0  50EF               	movf	indf0,w,c
 14129  0041B2                     u11900:
 14130  0041B2  0100               	movlb	0	; () banked
 14131  0041B4  6F66               	movwf	??_memcmp& (0+255),b
 14132  0041B6  6B67               	clrf	(??_memcmp+1)& (0+255),b
 14133  0041B8  1F66               	comf	??_memcmp& (0+255),f,b
 14134  0041BA  1F67               	comf	(??_memcmp+1)& (0+255),f,b
 14135  0041BC  4B66               	infsnz	??_memcmp& (0+255),f,b
 14136  0041BE  2B67               	incf	(??_memcmp+1)& (0+255),f,b
 14137  0041C0  C060  FFD9         	movff	memcmp@s1,fsr2l
 14138  0041C4  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 14139  0041C8  50DF               	movf	indf2,w,c
 14140  0041CA  6F68               	movwf	(??_memcmp+2)& (0+255),b
 14141  0041CC  5168               	movf	(??_memcmp+2)& (0+255),w,b
 14142  0041CE  2566               	addwf	??_memcmp& (0+255),w,b
 14143  0041D0  6F60               	movwf	?_memcmp& (0+255),b
 14144  0041D2  0E00               	movlw	0
 14145  0041D4  2167               	addwfc	(??_memcmp+1)& (0+255),w,b
 14146  0041D6  6F61               	movwf	(?_memcmp+1)& (0+255),b
 14147                           
 14148                           ; BSR set to: 0
 14149  0041D8  0012               	return	
 14150  0041DA                     l1879:
 14151                           
 14152                           ; BSR set to: 0
 14153                           
 14154                           ; BSR set to: 0
 14155  0041DA  4B60               	infsnz	memcmp@s1& (0+255),f,b
 14156  0041DC  2B61               	incf	(memcmp@s1+1)& (0+255),f,b
 14157  0041DE  4B62               	infsnz	memcmp@s2& (0+255),f,b
 14158  0041E0  2B63               	incf	(memcmp@s2+1)& (0+255),f,b
 14159  0041E2                     l1877:
 14160                           
 14161                           ; BSR set to: 0
 14162  0041E2  0100               	movlb	0	; () banked
 14163  0041E4  0764               	decf	memcmp@n& (0+255),f,b
 14164  0041E6  A0D8               	btfss	status,0,c
 14165  0041E8  0765               	decf	(memcmp@n+1)& (0+255),f,b
 14166  0041EA  2964               	incf	memcmp@n& (0+255),w,b
 14167  0041EC  E1B7               	bnz	l9720
 14168  0041EE  2965               	incf	(memcmp@n+1)& (0+255),w,b
 14169  0041F0  A4D8               	btfss	status,2,c
 14170  0041F2  D7B4               	goto	l1878
 14171                           
 14172                           ; BSR set to: 0
 14173                           
 14174                           ; BSR set to: 0
 14175  0041F4  0E00               	movlw	0
 14176  0041F6  6F61               	movwf	(?_memcmp+1)& (0+255),b
 14177  0041F8  0E00               	movlw	0
 14178  0041FA  6F60               	movwf	?_memcmp& (0+255),b
 14179  0041FC  0012               	return	
 14180  0041FE                     __end_of_memcmp:
 14181                           	opt stack 0
 14182                           tosu	equ	0xFFF
 14183                           tosh	equ	0xFFE
 14184                           tosl	equ	0xFFD
 14185                           pclath	equ	0xFFA
 14186                           tblptru	equ	0xFF8
 14187                           tblptrh	equ	0xFF7
 14188                           tblptrl	equ	0xFF6
 14189                           tablat	equ	0xFF5
 14190                           prodh	equ	0xFF4
 14191                           prodl	equ	0xFF3
 14192                           intcon	equ	0xFF2
 14193                           intcon2	equ	0xFF1
 14194                           intcon3	equ	0xFF0
 14195                           indf0	equ	0xFEF
 14196                           postinc0	equ	0xFEE
 14197                           fsr0h	equ	0xFEA
 14198                           fsr0l	equ	0xFE9
 14199                           wreg	equ	0xFE8
 14200                           indf1	equ	0xFE7
 14201                           postinc1	equ	0xFE6
 14202                           postdec1	equ	0xFE5
 14203                           plusw1	equ	0xFE3
 14204                           fsr1h	equ	0xFE2
 14205                           fsr1l	equ	0xFE1
 14206                           indf2	equ	0xFDF
 14207                           postinc2	equ	0xFDE
 14208                           postdec2	equ	0xFDD
 14209                           plusw2	equ	0xFDB
 14210                           fsr2h	equ	0xFDA
 14211                           fsr2l	equ	0xFD9
 14212                           status	equ	0xFD8
 14213                           
 14214 ;; *************** function ___lmul *****************
 14215 ;; Defined at:
 14216 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 14217 ;; Parameters:    Size  Location     Type
 14218 ;;  multiplier      4    0[BANK0 ] unsigned long 
 14219 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 14220 ;; Auto vars:     Size  Location     Type
 14221 ;;  product         4    8[BANK0 ] unsigned long 
 14222 ;; Return value:  Size  Location     Type
 14223 ;;                  4    0[BANK0 ] unsigned long 
 14224 ;; Registers used:
 14225 ;;		wreg, status,2, status,0
 14226 ;; Tracked objects:
 14227 ;;		On entry : 0/0
 14228 ;;		On exit  : 0/0
 14229 ;;		Unchanged: 0/0
 14230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14231 ;;      Params:         0       8       0       0       0       0       0       0       0
 14232 ;;      Locals:         0       4       0       0       0       0       0       0       0
 14233 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14234 ;;      Totals:         0      12       0       0       0       0       0       0       0
 14235 ;;Total ram usage:       12 bytes
 14236 ;; Hardware stack levels used:    1
 14237 ;; Hardware stack levels required when called:    3
 14238 ;; This function calls:
 14239 ;;		Nothing
 14240 ;; This function is called by:
 14241 ;;		_clust2sect
 14242 ;;		_auto_mount
 14243 ;; This function uses a non-reentrant model
 14244 ;;
 14245                           
 14246                           	psect	text50
 14247  004940                     __ptext50:
 14248                           	opt stack 0
 14249  004940                     ___lmul:
 14250                           	opt stack 19
 14251                           
 14252                           ; BSR set to: 0
 14253                           ;incstack = 0
 14254  004940  0E00               	movlw	0
 14255  004942  0100               	movlb	0	; () banked
 14256  004944  6F68               	movwf	___lmul@product& (0+255),b
 14257  004946  0E00               	movlw	0
 14258  004948  6F69               	movwf	(___lmul@product+1)& (0+255),b
 14259  00494A  0E00               	movlw	0
 14260  00494C  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 14261  00494E  0E00               	movlw	0
 14262  004950  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 14263  004952                     
 14264                           ; BSR set to: 0
 14265                           
 14266                           ; BSR set to: 0
 14267  004952  A160               	btfss	___lmul@multiplier& (0+255),0,b
 14268  004954  D008               	goto	l1424
 14269                           
 14270                           ; BSR set to: 0
 14271  004956  5164               	movf	___lmul@multiplicand& (0+255),w,b
 14272  004958  2768               	addwf	___lmul@product& (0+255),f,b
 14273  00495A  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 14274  00495C  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 14275  00495E  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 14276  004960  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 14277  004962  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 14278  004964  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 14279  004966                     l1424:
 14280                           
 14281                           ; BSR set to: 0
 14282                           
 14283                           ; BSR set to: 0
 14284  004966  90D8               	bcf	status,0,c
 14285  004968  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 14286  00496A  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 14287  00496C  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 14288  00496E  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 14289                           
 14290                           ; BSR set to: 0
 14291  004970  90D8               	bcf	status,0,c
 14292  004972  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 14293  004974  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 14294  004976  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 14295  004978  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 14296  00497A  5160               	movf	___lmul@multiplier& (0+255),w,b
 14297  00497C  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 14298  00497E  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 14299  004980  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 14300  004982  A4D8               	btfss	status,2,c
 14301  004984  D7E6               	goto	l1423
 14302                           
 14303                           ; BSR set to: 0
 14304  004986  C068  F060         	movff	___lmul@product,?___lmul
 14305  00498A  C069  F061         	movff	___lmul@product+1,?___lmul+1
 14306  00498E  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 14307  004992  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 14308                           
 14309                           ; BSR set to: 0
 14310  004996  0012               	return		;funcret
 14311  004998                     __end_of___lmul:
 14312                           	opt stack 0
 14313                           tosu	equ	0xFFF
 14314                           tosh	equ	0xFFE
 14315                           tosl	equ	0xFFD
 14316                           pclath	equ	0xFFA
 14317                           tblptru	equ	0xFF8
 14318                           tblptrh	equ	0xFF7
 14319                           tblptrl	equ	0xFF6
 14320                           tablat	equ	0xFF5
 14321                           prodh	equ	0xFF4
 14322                           prodl	equ	0xFF3
 14323                           intcon	equ	0xFF2
 14324                           intcon2	equ	0xFF1
 14325                           intcon3	equ	0xFF0
 14326                           indf0	equ	0xFEF
 14327                           postinc0	equ	0xFEE
 14328                           fsr0h	equ	0xFEA
 14329                           fsr0l	equ	0xFE9
 14330                           wreg	equ	0xFE8
 14331                           indf1	equ	0xFE7
 14332                           postinc1	equ	0xFE6
 14333                           postdec1	equ	0xFE5
 14334                           plusw1	equ	0xFE3
 14335                           fsr1h	equ	0xFE2
 14336                           fsr1l	equ	0xFE1
 14337                           indf2	equ	0xFDF
 14338                           postinc2	equ	0xFDE
 14339                           postdec2	equ	0xFDD
 14340                           plusw2	equ	0xFDB
 14341                           fsr2h	equ	0xFDA
 14342                           fsr2l	equ	0xFD9
 14343                           status	equ	0xFD8
 14344                           
 14345 ;; *************** function _f_mount *****************
 14346 ;; Defined at:
 14347 ;;		line 793 in file "bibliotecas/tff.c"
 14348 ;; Parameters:    Size  Location     Type
 14349 ;;  drv             1    wreg     unsigned char 
 14350 ;;  fs              2    0[BANK0 ] PTR struct _FATFS
 14351 ;;		 -> fs(544), 
 14352 ;; Auto vars:     Size  Location     Type
 14353 ;;  drv             1   32[COMRAM] unsigned char 
 14354 ;; Return value:  Size  Location     Type
 14355 ;;                  1    wreg      enum E3974
 14356 ;; Registers used:
 14357 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14358 ;; Tracked objects:
 14359 ;;		On entry : 0/0
 14360 ;;		On exit  : 0/0
 14361 ;;		Unchanged: 0/0
 14362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14363 ;;      Params:         0       2       0       0       0       0       0       0       0
 14364 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14365 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14366 ;;      Totals:         1       2       0       0       0       0       0       0       0
 14367 ;;Total ram usage:        3 bytes
 14368 ;; Hardware stack levels used:    1
 14369 ;; Hardware stack levels required when called:    3
 14370 ;; This function calls:
 14371 ;;		Nothing
 14372 ;; This function is called by:
 14373 ;;		_escrita_sdcard
 14374 ;;		_sdcard_init
 14375 ;;		_leitura_sdcard
 14376 ;; This function uses a non-reentrant model
 14377 ;;
 14378                           
 14379                           	psect	text51
 14380  004B2C                     __ptext51:
 14381                           	opt stack 0
 14382  004B2C                     _f_mount:
 14383                           	opt stack 24
 14384                           
 14385                           ; BSR set to: 0
 14386                           ;incstack = 0
 14387                           ;f_mount@drv stored from wreg
 14388  004B2C  6E21               	movwf	f_mount@drv,c
 14389                           
 14390                           ;tff.c: 798: if (drv) return FR_INVALID_DRIVE;
 14391  004B2E  5021               	movf	f_mount@drv,w,c
 14392  004B30  B4D8               	btfsc	status,2,c
 14393  004B32  D002               	goto	l1166
 14394  004B34  0E05               	movlw	5
 14395  004B36  0012               	return	
 14396  004B38                     l1166:
 14397                           
 14398                           ;tff.c: 800: if (FatFs) FatFs->fs_type = 0;
 14399  004B38  0100               	movlb	0	; () banked
 14400  004B3A  51FD               	movf	_FatFs& (0+255),w,b
 14401  004B3C  11FE               	iorwf	(_FatFs+1)& (0+255),w,b
 14402  004B3E  B4D8               	btfsc	status,2,c
 14403  004B40  D008               	goto	l1168
 14404                           
 14405                           ; BSR set to: 0
 14406  004B42  EE20 F01C          	lfsr	2,28
 14407  004B46  51FD               	movf	_FatFs& (0+255),w,b
 14408  004B48  26D9               	addwf	fsr2l,f,c
 14409  004B4A  51FE               	movf	(_FatFs+1)& (0+255),w,b
 14410  004B4C  22DA               	addwfc	fsr2h,f,c
 14411  004B4E  0E00               	movlw	0
 14412  004B50  6EDF               	movwf	indf2,c
 14413  004B52                     l1168:
 14414                           
 14415                           ; BSR set to: 0
 14416                           ;tff.c: 802: FatFs = fs;
 14417                           
 14418                           ; BSR set to: 0
 14419  004B52  C060  F0FD         	movff	f_mount@fs,_FatFs
 14420  004B56  C061  F0FE         	movff	f_mount@fs+1,_FatFs+1
 14421                           
 14422                           ; BSR set to: 0
 14423                           ;tff.c: 803: if (fs) fs->fs_type = 0;
 14424  004B5A  5160               	movf	f_mount@fs& (0+255),w,b
 14425  004B5C  1161               	iorwf	(f_mount@fs+1)& (0+255),w,b
 14426  004B5E  B4D8               	btfsc	status,2,c
 14427  004B60  D008               	goto	l1169
 14428                           
 14429                           ; BSR set to: 0
 14430  004B62  EE20 F01C          	lfsr	2,28
 14431  004B66  5160               	movf	f_mount@fs& (0+255),w,b
 14432  004B68  26D9               	addwf	fsr2l,f,c
 14433  004B6A  5161               	movf	(f_mount@fs+1)& (0+255),w,b
 14434  004B6C  22DA               	addwfc	fsr2h,f,c
 14435  004B6E  0E00               	movlw	0
 14436  004B70  6EDF               	movwf	indf2,c
 14437  004B72                     l1169:
 14438                           
 14439                           ; BSR set to: 0
 14440                           ;tff.c: 805: return FR_OK;
 14441                           
 14442                           ; BSR set to: 0
 14443  004B72  0E00               	movlw	0
 14444  004B74  0012               	return	
 14445  004B76                     __end_of_f_mount:
 14446                           	opt stack 0
 14447                           tosu	equ	0xFFF
 14448                           tosh	equ	0xFFE
 14449                           tosl	equ	0xFFD
 14450                           pclath	equ	0xFFA
 14451                           tblptru	equ	0xFF8
 14452                           tblptrh	equ	0xFF7
 14453                           tblptrl	equ	0xFF6
 14454                           tablat	equ	0xFF5
 14455                           prodh	equ	0xFF4
 14456                           prodl	equ	0xFF3
 14457                           intcon	equ	0xFF2
 14458                           intcon2	equ	0xFF1
 14459                           intcon3	equ	0xFF0
 14460                           indf0	equ	0xFEF
 14461                           postinc0	equ	0xFEE
 14462                           fsr0h	equ	0xFEA
 14463                           fsr0l	equ	0xFE9
 14464                           wreg	equ	0xFE8
 14465                           indf1	equ	0xFE7
 14466                           postinc1	equ	0xFE6
 14467                           postdec1	equ	0xFE5
 14468                           plusw1	equ	0xFE3
 14469                           fsr1h	equ	0xFE2
 14470                           fsr1l	equ	0xFE1
 14471                           indf2	equ	0xFDF
 14472                           postinc2	equ	0xFDE
 14473                           postdec2	equ	0xFDD
 14474                           plusw2	equ	0xFDB
 14475                           fsr2h	equ	0xFDA
 14476                           fsr2l	equ	0xFD9
 14477                           status	equ	0xFD8
 14478                           
 14479 ;; *************** function _f_lseek *****************
 14480 ;; Defined at:
 14481 ;;		line 1132 in file "bibliotecas/tff.c"
 14482 ;; Parameters:    Size  Location     Type
 14483 ;;  fp              2  100[BANK0 ] PTR struct _FIL
 14484 ;;		 -> fil(28), 
 14485 ;;  ofs             4  102[BANK0 ] unsigned long 
 14486 ;; Auto vars:     Size  Location     Type
 14487 ;;  csize           4  123[BANK0 ] unsigned long 
 14488 ;;  ifptr           4  119[BANK0 ] unsigned long 
 14489 ;;  clust           2  127[BANK0 ] unsigned short 
 14490 ;;  res             1  118[BANK0 ] enum E155
 14491 ;; Return value:  Size  Location     Type
 14492 ;;                  1    wreg      enum E3974
 14493 ;; Registers used:
 14494 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14495 ;; Tracked objects:
 14496 ;;		On entry : 0/0
 14497 ;;		On exit  : 0/0
 14498 ;;		Unchanged: 0/0
 14499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14500 ;;      Params:         0       6       0       0       0       0       0       0       0
 14501 ;;      Locals:         0      11       0       0       0       0       0       0       0
 14502 ;;      Temps:          0      12       0       0       0       0       0       0       0
 14503 ;;      Totals:         0      29       0       0       0       0       0       0       0
 14504 ;;Total ram usage:       29 bytes
 14505 ;; Hardware stack levels used:    1
 14506 ;; Hardware stack levels required when called:   11
 14507 ;; This function calls:
 14508 ;;		___lldiv
 14509 ;;		_create_chain
 14510 ;;		_get_cluster
 14511 ;;		_validate
 14512 ;; This function is called by:
 14513 ;;		_escrita_sdcard
 14514 ;; This function uses a non-reentrant model
 14515 ;;
 14516                           
 14517                           	psect	text52
 14518  00114E                     __ptext52:
 14519                           	opt stack 0
 14520  00114E                     _f_lseek:
 14521                           	opt stack 16
 14522                           
 14523                           ;tff.c: 1137: FRESULT res;
 14524                           ;tff.c: 1138: CLUST clust;
 14525                           ;tff.c: 1139: DWORD csize, ifptr;
 14526                           ;tff.c: 1142: res = validate(fp->fs, fp->id);
 14527                           
 14528                           ;incstack = 0
 14529  00114E  0100               	movlb	0	; () banked
 14530  001150  EE20 F004          	lfsr	2,4
 14531  001154  51C4               	movf	f_lseek@fp& (0+255),w,b
 14532  001156  26D9               	addwf	fsr2l,f,c
 14533  001158  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14534  00115A  22DA               	addwfc	fsr2h,f,c
 14535  00115C  CFDE F066          	movff	postinc2,validate@fs
 14536  001160  CFDD F067          	movff	postdec2,validate@fs+1
 14537  001164  C0C4  FFD9         	movff	f_lseek@fp,fsr2l
 14538  001168  C0C5  FFDA         	movff	f_lseek@fp+1,fsr2h
 14539  00116C  CFDE F068          	movff	postinc2,validate@id
 14540  001170  CFDD F069          	movff	postdec2,validate@id+1
 14541  001174  EC70  F025         	call	_validate	;wreg free
 14542  001178  0100               	movlb	0	; () banked
 14543  00117A  6FD6               	movwf	f_lseek@res& (0+255),b
 14544                           
 14545                           ; BSR set to: 0
 14546                           ;tff.c: 1143: if (res != FR_OK) return res;
 14547  00117C  51D6               	movf	f_lseek@res& (0+255),w,b
 14548  00117E  A4D8               	btfss	status,2,c
 14549  001180  0012               	return	
 14550                           
 14551                           ; BSR set to: 0
 14552                           ;tff.c: 1144: if (fp->flag & 0x80) return FR_RW_ERROR;
 14553                           
 14554                           ; BSR set to: 0
 14555                           
 14556                           ; BSR set to: 0
 14557                           ;	Return value of _f_lseek is never used
 14558  001182  EE20 F002          	lfsr	2,2
 14559  001186  51C4               	movf	f_lseek@fp& (0+255),w,b
 14560  001188  26D9               	addwf	fsr2l,f,c
 14561  00118A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14562  00118C  22DA               	addwfc	fsr2h,f,c
 14563  00118E  BEDF               	btfsc	indf2,7,c
 14564  001190  0012               	return	
 14565                           
 14566                           ; BSR set to: 0
 14567                           ;tff.c: 1145: if (ofs > fp->fsize
 14568                           ;tff.c: 1147: && !(fp->flag & 0x02)
 14569                           ;tff.c: 1149: ) ofs = fp->fsize;
 14570                           
 14571                           ; BSR set to: 0
 14572                           
 14573                           ; BSR set to: 0
 14574                           ;	Return value of _f_lseek is never used
 14575  001192  EE20 F00A          	lfsr	2,10
 14576  001196  51C4               	movf	f_lseek@fp& (0+255),w,b
 14577  001198  26D9               	addwf	fsr2l,f,c
 14578  00119A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14579  00119C  22DA               	addwfc	fsr2h,f,c
 14580  00119E  51C6               	movf	f_lseek@ofs& (0+255),w,b
 14581  0011A0  5CDE               	subwf	postinc2,w,c
 14582  0011A2  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14583  0011A4  58DE               	subwfb	postinc2,w,c
 14584  0011A6  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14585  0011A8  58DE               	subwfb	postinc2,w,c
 14586  0011AA  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14587  0011AC  58DE               	subwfb	postinc2,w,c
 14588  0011AE  B0D8               	btfsc	status,0,c
 14589  0011B0  D016               	goto	l1267
 14590                           
 14591                           ; BSR set to: 0
 14592  0011B2  EE20 F002          	lfsr	2,2
 14593  0011B6  51C4               	movf	f_lseek@fp& (0+255),w,b
 14594  0011B8  26D9               	addwf	fsr2l,f,c
 14595  0011BA  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14596  0011BC  22DA               	addwfc	fsr2h,f,c
 14597  0011BE  B2DF               	btfsc	indf2,1,c
 14598  0011C0  D00E               	goto	l1267
 14599                           
 14600                           ; BSR set to: 0
 14601  0011C2  EE20 F00A          	lfsr	2,10
 14602  0011C6  51C4               	movf	f_lseek@fp& (0+255),w,b
 14603  0011C8  26D9               	addwf	fsr2l,f,c
 14604  0011CA  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14605  0011CC  22DA               	addwfc	fsr2h,f,c
 14606  0011CE  CFDE F0C6          	movff	postinc2,f_lseek@ofs
 14607  0011D2  CFDE F0C7          	movff	postinc2,f_lseek@ofs+1
 14608  0011D6  CFDE F0C8          	movff	postinc2,f_lseek@ofs+2
 14609  0011DA  CFDE F0C9          	movff	postinc2,f_lseek@ofs+3
 14610  0011DE                     l1267:
 14611                           
 14612                           ; BSR set to: 0
 14613                           ;tff.c: 1151: ifptr = fp->fptr;
 14614  0011DE  EE20 F006          	lfsr	2,6
 14615  0011E2  51C4               	movf	f_lseek@fp& (0+255),w,b
 14616  0011E4  26D9               	addwf	fsr2l,f,c
 14617  0011E6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14618  0011E8  22DA               	addwfc	fsr2h,f,c
 14619  0011EA  CFDE F0D7          	movff	postinc2,f_lseek@ifptr
 14620  0011EE  CFDE F0D8          	movff	postinc2,f_lseek@ifptr+1
 14621  0011F2  CFDE F0D9          	movff	postinc2,f_lseek@ifptr+2
 14622  0011F6  CFDE F0DA          	movff	postinc2,f_lseek@ifptr+3
 14623                           
 14624                           ;tff.c: 1152: fp->fptr = 0; fp->csect = 255;
 14625  0011FA  EE20 F006          	lfsr	2,6
 14626  0011FE  51C4               	movf	f_lseek@fp& (0+255),w,b
 14627  001200  26D9               	addwf	fsr2l,f,c
 14628  001202  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14629  001204  22DA               	addwfc	fsr2h,f,c
 14630  001206  6ADE               	clrf	postinc2,c
 14631  001208  6ADE               	clrf	postinc2,c
 14632  00120A  6ADE               	clrf	postinc2,c
 14633  00120C  6ADD               	clrf	postdec2,c
 14634  00120E  EE20 F003          	lfsr	2,3
 14635  001212  51C4               	movf	f_lseek@fp& (0+255),w,b
 14636  001214  26D9               	addwf	fsr2l,f,c
 14637  001216  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14638  001218  22DA               	addwfc	fsr2h,f,c
 14639  00121A  0EFF               	movlw	255
 14640  00121C  6EDF               	movwf	indf2,c
 14641                           
 14642                           ; BSR set to: 0
 14643                           ;tff.c: 1153: if (ofs > 0) {
 14644  00121E  51C6               	movf	f_lseek@ofs& (0+255),w,b
 14645  001220  11C7               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 14646  001222  11C8               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 14647  001224  11C9               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 14648  001226  B4D8               	btfsc	status,2,c
 14649  001228  D19B               	goto	l1284
 14650                           
 14651                           ; BSR set to: 0
 14652                           ;tff.c: 1154: csize = (DWORD)fp->fs->csize * 512U;
 14653  00122A  EE20 F004          	lfsr	2,4
 14654  00122E  51C4               	movf	f_lseek@fp& (0+255),w,b
 14655  001230  26D9               	addwf	fsr2l,f,c
 14656  001232  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14657  001234  22DA               	addwfc	fsr2h,f,c
 14658  001236  EE10 F01D          	lfsr	1,29
 14659  00123A  50DE               	movf	postinc2,w,c
 14660  00123C  26E1               	addwf	fsr1l,f,c
 14661  00123E  50DD               	movf	postdec2,w,c
 14662  001240  22E2               	addwfc	fsr1h,f,c
 14663  001242  50E7               	movf	indf1,w,c
 14664  001244  6FCA               	movwf	??_f_lseek& (0+255),b
 14665  001246  C0CA  F0CB         	movff	??_f_lseek,??_f_lseek+1
 14666  00124A  6BCC               	clrf	(??_f_lseek+2)& (0+255),b
 14667  00124C  6BCD               	clrf	(??_f_lseek+3)& (0+255),b
 14668  00124E  6BCE               	clrf	(??_f_lseek+4)& (0+255),b
 14669  001250  0E09               	movlw	9
 14670  001252                     u13665:
 14671  001252  90D8               	bcf	status,0,c
 14672  001254  37CB               	rlcf	(??_f_lseek+1)& (0+255),f,b
 14673  001256  37CC               	rlcf	(??_f_lseek+2)& (0+255),f,b
 14674  001258  37CD               	rlcf	(??_f_lseek+3)& (0+255),f,b
 14675  00125A  37CE               	rlcf	(??_f_lseek+4)& (0+255),f,b
 14676  00125C  2EE8               	decfsz	wreg,f,c
 14677  00125E  D7F9               	goto	u13665
 14678  001260  C0CB  F0DB         	movff	??_f_lseek+1,f_lseek@csize
 14679  001264  C0CC  F0DC         	movff	??_f_lseek+2,f_lseek@csize+1
 14680  001268  C0CD  F0DD         	movff	??_f_lseek+3,f_lseek@csize+2
 14681  00126C  C0CE  F0DE         	movff	??_f_lseek+4,f_lseek@csize+3
 14682                           
 14683                           ; BSR set to: 0
 14684                           ;tff.c: 1155: if (ifptr > 0 &&
 14685                           ;tff.c: 1156: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 14686  001270  51D7               	movf	f_lseek@ifptr& (0+255),w,b
 14687  001272  11D8               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 14688  001274  11D9               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 14689  001276  11DA               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 14690  001278  B4D8               	btfsc	status,2,c
 14691  00127A  D08F               	goto	l1269
 14692                           
 14693                           ; BSR set to: 0
 14694  00127C  0EFF               	movlw	255
 14695  00127E  25C6               	addwf	f_lseek@ofs& (0+255),w,b
 14696  001280  6F60               	movwf	___lldiv@dividend& (0+255),b
 14697  001282  0EFF               	movlw	255
 14698  001284  21C7               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 14699  001286  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 14700  001288  0EFF               	movlw	255
 14701  00128A  21C8               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 14702  00128C  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 14703  00128E  0EFF               	movlw	255
 14704  001290  21C9               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 14705  001292  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 14706  001294  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 14707  001298  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14708  00129C  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14709  0012A0  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14710  0012A4  ECEB  F022         	call	___lldiv	;wreg free
 14711  0012A8  C060  F0CA         	movff	?___lldiv,??_f_lseek
 14712  0012AC  C061  F0CB         	movff	?___lldiv+1,??_f_lseek+1
 14713  0012B0  C062  F0CC         	movff	?___lldiv+2,??_f_lseek+2
 14714  0012B4  C063  F0CD         	movff	?___lldiv+3,??_f_lseek+3
 14715  0012B8  0EFF               	movlw	255
 14716  0012BA  0100               	movlb	0	; () banked
 14717  0012BC  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 14718  0012BE  6F60               	movwf	___lldiv@dividend& (0+255),b
 14719  0012C0  0EFF               	movlw	255
 14720  0012C2  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14721  0012C4  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 14722  0012C6  0EFF               	movlw	255
 14723  0012C8  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14724  0012CA  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 14725  0012CC  0EFF               	movlw	255
 14726  0012CE  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14727  0012D0  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 14728  0012D2  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 14729  0012D6  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14730  0012DA  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14731  0012DE  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14732  0012E2  ECEB  F022         	call	___lldiv	;wreg free
 14733  0012E6  0100               	movlb	0	; () banked
 14734  0012E8  5160               	movf	?___lldiv& (0+255),w,b
 14735  0012EA  5DCA               	subwf	??_f_lseek& (0+255),w,b
 14736  0012EC  5161               	movf	(?___lldiv+1)& (0+255),w,b
 14737  0012EE  59CB               	subwfb	(??_f_lseek+1)& (0+255),w,b
 14738  0012F0  5162               	movf	(?___lldiv+2)& (0+255),w,b
 14739  0012F2  59CC               	subwfb	(??_f_lseek+2)& (0+255),w,b
 14740  0012F4  5163               	movf	(?___lldiv+3)& (0+255),w,b
 14741  0012F6  59CD               	subwfb	(??_f_lseek+3)& (0+255),w,b
 14742  0012F8  A0D8               	btfss	status,0,c
 14743  0012FA  D04F               	goto	l1269
 14744                           
 14745                           ; BSR set to: 0
 14746                           ;tff.c: 1157: fp->fptr = (ifptr - 1) & ~(csize - 1);
 14747  0012FC  0EFF               	movlw	255
 14748  0012FE  25DB               	addwf	f_lseek@csize& (0+255),w,b
 14749  001300  6FCA               	movwf	??_f_lseek& (0+255),b
 14750  001302  0EFF               	movlw	255
 14751  001304  21DC               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 14752  001306  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 14753  001308  0EFF               	movlw	255
 14754  00130A  21DD               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 14755  00130C  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 14756  00130E  0EFF               	movlw	255
 14757  001310  21DE               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 14758  001312  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 14759  001314  1FCA               	comf	??_f_lseek& (0+255),f,b
 14760  001316  1FCB               	comf	(??_f_lseek+1)& (0+255),f,b
 14761  001318  1FCC               	comf	(??_f_lseek+2)& (0+255),f,b
 14762  00131A  1FCD               	comf	(??_f_lseek+3)& (0+255),f,b
 14763  00131C  0EFF               	movlw	255
 14764  00131E  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 14765  001320  6FCE               	movwf	(??_f_lseek+4)& (0+255),b
 14766  001322  0EFF               	movlw	255
 14767  001324  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14768  001326  6FCF               	movwf	(??_f_lseek+5)& (0+255),b
 14769  001328  0EFF               	movlw	255
 14770  00132A  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14771  00132C  6FD0               	movwf	(??_f_lseek+6)& (0+255),b
 14772  00132E  0EFF               	movlw	255
 14773  001330  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14774  001332  6FD1               	movwf	(??_f_lseek+7)& (0+255),b
 14775  001334  51CA               	movf	??_f_lseek& (0+255),w,b
 14776  001336  15CE               	andwf	(??_f_lseek+4)& (0+255),w,b
 14777  001338  6FD2               	movwf	(??_f_lseek+8)& (0+255),b
 14778  00133A  51CB               	movf	(??_f_lseek+1)& (0+255),w,b
 14779  00133C  15CF               	andwf	(??_f_lseek+5)& (0+255),w,b
 14780  00133E  6FD3               	movwf	(??_f_lseek+9)& (0+255),b
 14781  001340  51CC               	movf	(??_f_lseek+2)& (0+255),w,b
 14782  001342  15D0               	andwf	(??_f_lseek+6)& (0+255),w,b
 14783  001344  6FD4               	movwf	(??_f_lseek+10)& (0+255),b
 14784  001346  51CD               	movf	(??_f_lseek+3)& (0+255),w,b
 14785  001348  15D1               	andwf	(??_f_lseek+7)& (0+255),w,b
 14786  00134A  6FD5               	movwf	(??_f_lseek+11)& (0+255),b
 14787  00134C  EE20 F006          	lfsr	2,6
 14788  001350  51C4               	movf	f_lseek@fp& (0+255),w,b
 14789  001352  26D9               	addwf	fsr2l,f,c
 14790  001354  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14791  001356  22DA               	addwfc	fsr2h,f,c
 14792  001358  C0D2  FFDE         	movff	??_f_lseek+8,postinc2
 14793  00135C  C0D3  FFDE         	movff	??_f_lseek+9,postinc2
 14794  001360  C0D4  FFDE         	movff	??_f_lseek+10,postinc2
 14795  001364  C0D5  FFDE         	movff	??_f_lseek+11,postinc2
 14796                           
 14797                           ;tff.c: 1158: ofs -= fp->fptr;
 14798  001368  EE20 F006          	lfsr	2,6
 14799  00136C  51C4               	movf	f_lseek@fp& (0+255),w,b
 14800  00136E  26D9               	addwf	fsr2l,f,c
 14801  001370  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14802  001372  22DA               	addwfc	fsr2h,f,c
 14803  001374  50DE               	movf	postinc2,w,c
 14804  001376  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 14805  001378  50DE               	movf	postinc2,w,c
 14806  00137A  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 14807  00137C  50DE               	movf	postinc2,w,c
 14808  00137E  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 14809  001380  50DD               	movf	postdec2,w,c
 14810  001382  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 14811                           
 14812                           ;tff.c: 1159: clust = fp->curr_clust;
 14813  001384  EE20 F010          	lfsr	2,16
 14814  001388  51C4               	movf	f_lseek@fp& (0+255),w,b
 14815  00138A  26D9               	addwf	fsr2l,f,c
 14816  00138C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14817  00138E  22DA               	addwfc	fsr2h,f,c
 14818  001390  CFDE F0DF          	movff	postinc2,f_lseek@clust
 14819  001394  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 14820                           
 14821                           ;tff.c: 1160: } else {
 14822  001398  D031               	goto	l1270
 14823  00139A                     l1269:
 14824                           
 14825                           ; BSR set to: 0
 14826                           ;tff.c: 1161: clust = fp->org_clust;
 14827                           
 14828                           ; BSR set to: 0
 14829  00139A  EE20 F00E          	lfsr	2,14
 14830  00139E  51C4               	movf	f_lseek@fp& (0+255),w,b
 14831  0013A0  26D9               	addwf	fsr2l,f,c
 14832  0013A2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14833  0013A4  22DA               	addwfc	fsr2h,f,c
 14834  0013A6  CFDE F0DF          	movff	postinc2,f_lseek@clust
 14835  0013AA  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 14836                           
 14837                           ; BSR set to: 0
 14838                           ;tff.c: 1163: if (clust == 0) {
 14839  0013AE  51DF               	movf	f_lseek@clust& (0+255),w,b
 14840  0013B0  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14841  0013B2  A4D8               	btfss	status,2,c
 14842  0013B4  D019               	goto	l1271
 14843                           
 14844                           ; BSR set to: 0
 14845                           ;tff.c: 1164: clust = create_chain(0);
 14846  0013B6  0E00               	movlw	0
 14847  0013B8  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
 14848  0013BA  0E00               	movlw	0
 14849  0013BC  6FB6               	movwf	create_chain@clust& (0+255),b
 14850  0013BE  EC69  F017         	call	_create_chain	;wreg free
 14851  0013C2  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 14852  0013C6  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 14853                           
 14854                           ;tff.c: 1165: if (clust == 1) goto fk_error;
 14855  0013CA  0100               	movlb	0	; () banked
 14856  0013CC  05DF               	decf	f_lseek@clust& (0+255),w,b
 14857  0013CE  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14858  0013D0  B4D8               	btfsc	status,2,c
 14859  0013D2  D0F9               	goto	l1273
 14860                           
 14861                           ; BSR set to: 0
 14862                           ;tff.c: 1166: fp->org_clust = clust;
 14863                           
 14864                           ; BSR set to: 0
 14865                           
 14866                           ; BSR set to: 0
 14867  0013D4  EE20 F00E          	lfsr	2,14
 14868  0013D8  51C4               	movf	f_lseek@fp& (0+255),w,b
 14869  0013DA  26D9               	addwf	fsr2l,f,c
 14870  0013DC  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14871  0013DE  22DA               	addwfc	fsr2h,f,c
 14872  0013E0  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 14873  0013E4  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 14874  0013E8                     l1271:
 14875                           
 14876                           ; BSR set to: 0
 14877                           ;tff.c: 1167: }
 14878                           ;tff.c: 1169: fp->curr_clust = clust;
 14879  0013E8  EE20 F010          	lfsr	2,16
 14880  0013EC  51C4               	movf	f_lseek@fp& (0+255),w,b
 14881  0013EE  26D9               	addwf	fsr2l,f,c
 14882  0013F0  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14883  0013F2  22DA               	addwfc	fsr2h,f,c
 14884  0013F4  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 14885  0013F8  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 14886  0013FC                     l1270:
 14887                           
 14888                           ; BSR set to: 0
 14889                           ;tff.c: 1170: }
 14890                           ;tff.c: 1171: if (clust != 0) {
 14891                           
 14892                           ; BSR set to: 0
 14893  0013FC  51DF               	movf	f_lseek@clust& (0+255),w,b
 14894  0013FE  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14895  001400  A4D8               	btfss	status,2,c
 14896  001402  D064               	goto	l1275
 14897  001404  D0AD               	goto	l1284
 14898  001406                     
 14899                           ; BSR set to: 0
 14900                           ;tff.c: 1174: if (fp->flag & 0x02) {
 14901                           
 14902                           ; BSR set to: 0
 14903  001406  EE20 F002          	lfsr	2,2
 14904  00140A  51C4               	movf	f_lseek@fp& (0+255),w,b
 14905  00140C  26D9               	addwf	fsr2l,f,c
 14906  00140E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14907  001410  22DA               	addwfc	fsr2h,f,c
 14908  001412  A2DF               	btfss	indf2,1,c
 14909  001414  D018               	goto	l1277
 14910                           
 14911                           ; BSR set to: 0
 14912                           ;tff.c: 1175: clust = create_chain(clust);
 14913  001416  C0DF  F0B6         	movff	f_lseek@clust,create_chain@clust
 14914  00141A  C0E0  F0B7         	movff	f_lseek@clust+1,create_chain@clust+1
 14915  00141E  EC69  F017         	call	_create_chain	;wreg free
 14916  001422  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 14917  001426  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 14918                           
 14919                           ;tff.c: 1176: if (clust == 0) {
 14920  00142A  0100               	movlb	0	; () banked
 14921  00142C  51DF               	movf	f_lseek@clust& (0+255),w,b
 14922  00142E  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14923  001430  A4D8               	btfss	status,2,c
 14924  001432  D013               	goto	l1280
 14925                           
 14926                           ; BSR set to: 0
 14927                           ;tff.c: 1177: ofs = csize; break;
 14928  001434  C0DB  F0C6         	movff	f_lseek@csize,f_lseek@ofs
 14929  001438  C0DC  F0C7         	movff	f_lseek@csize+1,f_lseek@ofs+1
 14930  00143C  C0DD  F0C8         	movff	f_lseek@csize+2,f_lseek@ofs+2
 14931  001440  C0DE  F0C9         	movff	f_lseek@csize+3,f_lseek@ofs+3
 14932  001444  D04D               	goto	u13760
 14933  001446                     l1277:
 14934                           
 14935                           ; BSR set to: 0
 14936                           ;tff.c: 1181: clust = get_cluster(clust);
 14937                           
 14938                           ; BSR set to: 0
 14939  001446  C0DF  F0A0         	movff	f_lseek@clust,get_cluster@clust
 14940  00144A  C0E0  F0A1         	movff	f_lseek@clust+1,get_cluster@clust+1
 14941  00144E  EC73  F015         	call	_get_cluster	;wreg free
 14942  001452  C0A0  F0DF         	movff	?_get_cluster,f_lseek@clust
 14943  001456  C0A1  F0E0         	movff	?_get_cluster+1,f_lseek@clust+1
 14944  00145A                     l1280:
 14945                           
 14946                           ;tff.c: 1182: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 14947  00145A  0100               	movlb	0	; () banked
 14948  00145C  51E0               	movf	(f_lseek@clust+1)& (0+255),w,b
 14949  00145E  E104               	bnz	u13740
 14950  001460  0E02               	movlw	2
 14951  001462  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 14952  001464  A0D8               	btfss	status,0,c
 14953  001466  D0AF               	goto	l1273
 14954  001468                     u13740:
 14955                           
 14956                           ; BSR set to: 0
 14957  001468  EE20 F004          	lfsr	2,4
 14958  00146C  51C4               	movf	f_lseek@fp& (0+255),w,b
 14959  00146E  26D9               	addwf	fsr2l,f,c
 14960  001470  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14961  001472  22DA               	addwfc	fsr2h,f,c
 14962  001474  EE10 F016          	lfsr	1,22
 14963  001478  50DE               	movf	postinc2,w,c
 14964  00147A  26E1               	addwf	fsr1l,f,c
 14965  00147C  50DD               	movf	postdec2,w,c
 14966  00147E  22E2               	addwfc	fsr1h,f,c
 14967  001480  50E6               	movf	postinc1,w,c
 14968  001482  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 14969  001484  50E6               	movf	postinc1,w,c
 14970  001486  59E0               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 14971  001488  B0D8               	btfsc	status,0,c
 14972  00148A  D09D               	goto	l1273
 14973                           
 14974                           ; BSR set to: 0
 14975                           ;tff.c: 1183: fp->curr_clust = clust;
 14976                           
 14977                           ; BSR set to: 0
 14978                           
 14979                           ; BSR set to: 0
 14980  00148C  EE20 F010          	lfsr	2,16
 14981  001490  51C4               	movf	f_lseek@fp& (0+255),w,b
 14982  001492  26D9               	addwf	fsr2l,f,c
 14983  001494  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14984  001496  22DA               	addwfc	fsr2h,f,c
 14985  001498  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 14986  00149C  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 14987                           
 14988                           ;tff.c: 1184: fp->fptr += csize;
 14989  0014A0  EE20 F006          	lfsr	2,6
 14990  0014A4  51C4               	movf	f_lseek@fp& (0+255),w,b
 14991  0014A6  26D9               	addwf	fsr2l,f,c
 14992  0014A8  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14993  0014AA  22DA               	addwfc	fsr2h,f,c
 14994  0014AC  51DB               	movf	f_lseek@csize& (0+255),w,b
 14995  0014AE  26DE               	addwf	postinc2,f,c
 14996  0014B0  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 14997  0014B2  22DE               	addwfc	postinc2,f,c
 14998  0014B4  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 14999  0014B6  22DE               	addwfc	postinc2,f,c
 15000  0014B8  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 15001  0014BA  22DE               	addwfc	postinc2,f,c
 15002                           
 15003                           ; BSR set to: 0
 15004                           ;tff.c: 1185: ofs -= csize;
 15005  0014BC  51DB               	movf	f_lseek@csize& (0+255),w,b
 15006  0014BE  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 15007  0014C0  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 15008  0014C2  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 15009  0014C4  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 15010  0014C6  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 15011  0014C8  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 15012  0014CA  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 15013  0014CC                     l1275:
 15014                           
 15015                           ; BSR set to: 0
 15016                           
 15017                           ; BSR set to: 0
 15018  0014CC  51C6               	movf	f_lseek@ofs& (0+255),w,b
 15019  0014CE  5DDB               	subwf	f_lseek@csize& (0+255),w,b
 15020  0014D0  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 15021  0014D2  59DC               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 15022  0014D4  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 15023  0014D6  59DD               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 15024  0014D8  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 15025  0014DA  59DE               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 15026  0014DC  A0D8               	btfss	status,0,c
 15027  0014DE  D793               	goto	l1276
 15028  0014E0                     u13760:
 15029                           
 15030                           ; BSR set to: 0
 15031                           ;tff.c: 1186: }
 15032                           ;tff.c: 1187: fp->fptr += ofs;
 15033                           
 15034                           ; BSR set to: 0
 15035  0014E0  EE20 F006          	lfsr	2,6
 15036  0014E4  51C4               	movf	f_lseek@fp& (0+255),w,b
 15037  0014E6  26D9               	addwf	fsr2l,f,c
 15038  0014E8  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 15039  0014EA  22DA               	addwfc	fsr2h,f,c
 15040  0014EC  51C6               	movf	f_lseek@ofs& (0+255),w,b
 15041  0014EE  26DE               	addwf	postinc2,f,c
 15042  0014F0  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 15043  0014F2  22DE               	addwfc	postinc2,f,c
 15044  0014F4  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 15045  0014F6  22DE               	addwfc	postinc2,f,c
 15046  0014F8  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 15047  0014FA  22DE               	addwfc	postinc2,f,c
 15048                           
 15049                           ;tff.c: 1188: fp->csect = (BYTE)(ofs / 512U);
 15050  0014FC  EE20 F003          	lfsr	2,3
 15051  001500  51C4               	movf	f_lseek@fp& (0+255),w,b
 15052  001502  26D9               	addwf	fsr2l,f,c
 15053  001504  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 15054  001506  22DA               	addwfc	fsr2h,f,c
 15055  001508  C0C6  F0CA         	movff	f_lseek@ofs,??_f_lseek
 15056  00150C  C0C7  F0CB         	movff	f_lseek@ofs+1,??_f_lseek+1
 15057  001510  C0C8  F0CC         	movff	f_lseek@ofs+2,??_f_lseek+2
 15058  001514  C0C9  F0CD         	movff	f_lseek@ofs+3,??_f_lseek+3
 15059  001518  0E0A               	movlw	10
 15060  00151A  D005               	goto	u13770
 15061  00151C                     u13775:
 15062  00151C  90D8               	bcf	status,0,c
 15063  00151E  33CD               	rrcf	(??_f_lseek+3)& (0+255),f,b
 15064  001520  33CC               	rrcf	(??_f_lseek+2)& (0+255),f,b
 15065  001522  33CB               	rrcf	(??_f_lseek+1)& (0+255),f,b
 15066  001524  33CA               	rrcf	??_f_lseek& (0+255),f,b
 15067  001526                     u13770:
 15068  001526  2EE8               	decfsz	wreg,f,c
 15069  001528  D7F9               	goto	u13775
 15070  00152A  51CA               	movf	??_f_lseek& (0+255),w,b
 15071  00152C  6EDF               	movwf	indf2,c
 15072                           
 15073                           ; BSR set to: 0
 15074                           ;tff.c: 1189: if (ofs % 512U) fp->csect++;
 15075  00152E  0EFF               	movlw	255
 15076  001530  15C6               	andwf	f_lseek@ofs& (0+255),w,b
 15077  001532  6FCA               	movwf	??_f_lseek& (0+255),b
 15078  001534  0E01               	movlw	1
 15079  001536  15C7               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 15080  001538  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 15081  00153A  0E00               	movlw	0
 15082  00153C  15C8               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 15083  00153E  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 15084  001540  0E00               	movlw	0
 15085  001542  15C9               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 15086  001544  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 15087  001546  51CA               	movf	??_f_lseek& (0+255),w,b
 15088  001548  11CB               	iorwf	(??_f_lseek+1)& (0+255),w,b
 15089  00154A  11CC               	iorwf	(??_f_lseek+2)& (0+255),w,b
 15090  00154C  11CD               	iorwf	(??_f_lseek+3)& (0+255),w,b
 15091  00154E  B4D8               	btfsc	status,2,c
 15092  001550  D007               	goto	l1284
 15093                           
 15094                           ; BSR set to: 0
 15095  001552  EE20 F003          	lfsr	2,3
 15096  001556  51C4               	movf	f_lseek@fp& (0+255),w,b
 15097  001558  26D9               	addwf	fsr2l,f,c
 15098  00155A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 15099  00155C  22DA               	addwfc	fsr2h,f,c
 15100  00155E  2ADF               	incf	indf2,f,c
 15101  001560                     l1284:
 15102                           
 15103                           ; BSR set to: 0
 15104                           ;tff.c: 1190: }
 15105                           ;tff.c: 1191: }
 15106                           ;tff.c: 1194: if (fp->fptr > fp->fsize) {
 15107                           
 15108                           ; BSR set to: 0
 15109                           
 15110                           ; BSR set to: 0
 15111                           
 15112                           ; BSR set to: 0
 15113  001560  EE20 F006          	lfsr	2,6
 15114  001564  51C4               	movf	f_lseek@fp& (0+255),w,b
 15115  001566  26D9               	addwf	fsr2l,f,c
 15116  001568  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 15117  00156A  22DA               	addwfc	fsr2h,f,c
 15118  00156C  EE10 F00A          	lfsr	1,10
 15119  001570  51C4               	movf	f_lseek@fp& (0+255),w,b
 15120  001572  26E1               	addwf	fsr1l,f,c
 15121  001574  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 15122  001576  22E2               	addwfc	fsr1h,f,c
 15123  001578  50DE               	movf	postinc2,w,c
 15124  00157A  5CE6               	subwf	postinc1,w,c
 15125  00157C  50DE               	movf	postinc2,w,c
 15126  00157E  58E6               	subwfb	postinc1,w,c
 15127  001580  50DE               	movf	postinc2,w,c
 15128  001582  58E6               	subwfb	postinc1,w,c
 15129  001584  50DE               	movf	postinc2,w,c
 15130  001586  58E6               	subwfb	postinc1,w,c
 15131  001588  B0D8               	btfsc	status,0,c
 15132  00158A  0012               	return	
 15133                           
 15134                           ; BSR set to: 0
 15135                           ;tff.c: 1195: fp->fsize = fp->fptr;
 15136  00158C  EE20 F006          	lfsr	2,6
 15137  001590  51C4               	movf	f_lseek@fp& (0+255),w,b
 15138  001592  26D9               	addwf	fsr2l,f,c
 15139  001594  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 15140  001596  22DA               	addwfc	fsr2h,f,c
 15141  001598  EE10 F00A          	lfsr	1,10
 15142  00159C  51C4               	movf	f_lseek@fp& (0+255),w,b
 15143  00159E  26E1               	addwf	fsr1l,f,c
 15144  0015A0  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 15145  0015A2  22E2               	addwfc	fsr1h,f,c
 15146  0015A4  CFDE FFE6          	movff	postinc2,postinc1
 15147  0015A8  CFDE FFE6          	movff	postinc2,postinc1
 15148  0015AC  CFDE FFE6          	movff	postinc2,postinc1
 15149  0015B0  CFDE FFE6          	movff	postinc2,postinc1
 15150                           
 15151                           ; BSR set to: 0
 15152                           ;tff.c: 1196: fp->flag |= 0x20;
 15153  0015B4  EE20 F002          	lfsr	2,2
 15154  0015B8  51C4               	movf	f_lseek@fp& (0+255),w,b
 15155  0015BA  26D9               	addwf	fsr2l,f,c
 15156  0015BC  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 15157  0015BE  22DA               	addwfc	fsr2h,f,c
 15158  0015C0  0E00               	movlw	0
 15159  0015C2  8ADB               	bsf	plusw2,5,c
 15160                           
 15161                           ; BSR set to: 0
 15162                           ;tff.c: 1197: }
 15163                           ;tff.c: 1200: return FR_OK;
 15164                           ;	Return value of _f_lseek is never used
 15165                           
 15166                           ; BSR set to: 0
 15167  0015C4  0012               	return	
 15168  0015C6                     l1273:
 15169                           
 15170                           ; BSR set to: 0
 15171                           ;tff.c: 1203: fp->flag |= 0x80;
 15172                           
 15173                           ; BSR set to: 0
 15174  0015C6  EE20 F002          	lfsr	2,2
 15175  0015CA  51C4               	movf	f_lseek@fp& (0+255),w,b
 15176  0015CC  26D9               	addwf	fsr2l,f,c
 15177  0015CE  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 15178  0015D0  22DA               	addwfc	fsr2h,f,c
 15179  0015D2  0E00               	movlw	0
 15180  0015D4  8EDB               	bsf	plusw2,7,c
 15181  0015D6  0012               	return	
 15182  0015D8                     __end_of_f_lseek:
 15183                           	opt stack 0
 15184                           tosu	equ	0xFFF
 15185                           tosh	equ	0xFFE
 15186                           tosl	equ	0xFFD
 15187                           pclath	equ	0xFFA
 15188                           tblptru	equ	0xFF8
 15189                           tblptrh	equ	0xFF7
 15190                           tblptrl	equ	0xFF6
 15191                           tablat	equ	0xFF5
 15192                           prodh	equ	0xFF4
 15193                           prodl	equ	0xFF3
 15194                           intcon	equ	0xFF2
 15195                           intcon2	equ	0xFF1
 15196                           intcon3	equ	0xFF0
 15197                           indf0	equ	0xFEF
 15198                           postinc0	equ	0xFEE
 15199                           fsr0h	equ	0xFEA
 15200                           fsr0l	equ	0xFE9
 15201                           wreg	equ	0xFE8
 15202                           indf1	equ	0xFE7
 15203                           postinc1	equ	0xFE6
 15204                           postdec1	equ	0xFE5
 15205                           plusw1	equ	0xFE3
 15206                           fsr1h	equ	0xFE2
 15207                           fsr1l	equ	0xFE1
 15208                           indf2	equ	0xFDF
 15209                           postinc2	equ	0xFDE
 15210                           postdec2	equ	0xFDD
 15211                           plusw2	equ	0xFDB
 15212                           fsr2h	equ	0xFDA
 15213                           fsr2l	equ	0xFD9
 15214                           status	equ	0xFD8
 15215                           
 15216 ;; *************** function _create_chain *****************
 15217 ;; Defined at:
 15218 ;;		line 282 in file "bibliotecas/tff.c"
 15219 ;; Parameters:    Size  Location     Type
 15220 ;;  clust           2   86[BANK0 ] unsigned short 
 15221 ;; Auto vars:     Size  Location     Type
 15222 ;;  ncl             2   98[BANK0 ] unsigned short 
 15223 ;;  scl             2   96[BANK0 ] unsigned short 
 15224 ;;  cstat           2   94[BANK0 ] unsigned short 
 15225 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 15226 ;;		 -> NULL(0), fs(544), 
 15227 ;;  mcl             2   90[BANK0 ] unsigned short 
 15228 ;; Return value:  Size  Location     Type
 15229 ;;                  2   86[BANK0 ] unsigned short 
 15230 ;; Registers used:
 15231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15232 ;; Tracked objects:
 15233 ;;		On entry : 0/0
 15234 ;;		On exit  : 0/0
 15235 ;;		Unchanged: 0/0
 15236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15237 ;;      Params:         0       2       0       0       0       0       0       0       0
 15238 ;;      Locals:         0      10       0       0       0       0       0       0       0
 15239 ;;      Temps:          0       2       0       0       0       0       0       0       0
 15240 ;;      Totals:         0      14       0       0       0       0       0       0       0
 15241 ;;Total ram usage:       14 bytes
 15242 ;; Hardware stack levels used:    1
 15243 ;; Hardware stack levels required when called:   10
 15244 ;; This function calls:
 15245 ;;		_get_cluster
 15246 ;;		_put_cluster
 15247 ;; This function is called by:
 15248 ;;		_reserve_direntry
 15249 ;;		_f_write
 15250 ;;		_f_lseek
 15251 ;; This function uses a non-reentrant model
 15252 ;;
 15253                           
 15254                           	psect	text53
 15255  002ED2                     __ptext53:
 15256                           	opt stack 0
 15257  002ED2                     _create_chain:
 15258                           	opt stack 13
 15259                           
 15260                           ;tff.c: 286: CLUST cstat, ncl, scl, mcl;
 15261                           ;tff.c: 287: FATFS *fs = FatFs;
 15262                           
 15263                           ; BSR set to: 0
 15264                           ;incstack = 0
 15265  002ED2  C0FD  F0BC         	movff	_FatFs,create_chain@fs
 15266  002ED6  C0FE  F0BD         	movff	_FatFs+1,create_chain@fs+1
 15267                           
 15268                           ;tff.c: 290: mcl = fs->max_clust;
 15269  002EDA  0100               	movlb	0	; () banked
 15270  002EDC  EE20 F016          	lfsr	2,22
 15271  002EE0  51BC               	movf	create_chain@fs& (0+255),w,b
 15272  002EE2  26D9               	addwf	fsr2l,f,c
 15273  002EE4  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 15274  002EE6  22DA               	addwfc	fsr2h,f,c
 15275  002EE8  CFDE F0BA          	movff	postinc2,create_chain@mcl
 15276  002EEC  CFDD F0BB          	movff	postdec2,create_chain@mcl+1
 15277                           
 15278                           ; BSR set to: 0
 15279                           ;tff.c: 291: if (clust == 0) {
 15280  002EF0  51B6               	movf	create_chain@clust& (0+255),w,b
 15281  002EF2  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 15282  002EF4  A4D8               	btfss	status,2,c
 15283  002EF6  D01B               	goto	l988
 15284                           
 15285                           ; BSR set to: 0
 15286                           ;tff.c: 292: scl = fs->last_clust;
 15287  002EF8  EE20 F018          	lfsr	2,24
 15288  002EFC  51BC               	movf	create_chain@fs& (0+255),w,b
 15289  002EFE  26D9               	addwf	fsr2l,f,c
 15290  002F00  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 15291  002F02  22DA               	addwfc	fsr2h,f,c
 15292  002F04  CFDE F0C0          	movff	postinc2,create_chain@scl
 15293  002F08  CFDD F0C1          	movff	postdec2,create_chain@scl+1
 15294                           
 15295                           ; BSR set to: 0
 15296                           ;tff.c: 293: if (scl < 2 || scl >= mcl) scl = 1;
 15297  002F0C  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 15298  002F0E  E104               	bnz	u11450
 15299  002F10  0E02               	movlw	2
 15300  002F12  5DC0               	subwf	create_chain@scl& (0+255),w,b
 15301  002F14  A0D8               	btfss	status,0,c
 15302  002F16  D006               	goto	u11460
 15303  002F18                     u11450:
 15304                           
 15305                           ; BSR set to: 0
 15306  002F18  51BA               	movf	create_chain@mcl& (0+255),w,b
 15307  002F1A  5DC0               	subwf	create_chain@scl& (0+255),w,b
 15308  002F1C  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 15309  002F1E  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 15310  002F20  A0D8               	btfss	status,0,c
 15311  002F22  D02A               	goto	l992
 15312  002F24                     u11460:
 15313                           
 15314                           ; BSR set to: 0
 15315                           
 15316                           ; BSR set to: 0
 15317  002F24  0E00               	movlw	0
 15318  002F26  6FC1               	movwf	(create_chain@scl+1)& (0+255),b
 15319  002F28  0E01               	movlw	1
 15320  002F2A  6FC0               	movwf	create_chain@scl& (0+255),b
 15321                           
 15322                           ; BSR set to: 0
 15323                           ;tff.c: 294: }
 15324  002F2C  D025               	goto	l992
 15325  002F2E                     l988:
 15326                           
 15327                           ; BSR set to: 0
 15328                           ;tff.c: 295: else {
 15329                           ;tff.c: 296: cstat = get_cluster(clust);
 15330                           
 15331                           ; BSR set to: 0
 15332  002F2E  C0B6  F0A0         	movff	create_chain@clust,get_cluster@clust
 15333  002F32  C0B7  F0A1         	movff	create_chain@clust+1,get_cluster@clust+1
 15334  002F36  EC73  F015         	call	_get_cluster	;wreg free
 15335  002F3A  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 15336  002F3E  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 15337                           
 15338                           ;tff.c: 297: if (cstat < 2) return 1;
 15339  002F42  0100               	movlb	0	; () banked
 15340  002F44  51BF               	movf	(create_chain@cstat+1)& (0+255),w,b
 15341  002F46  E109               	bnz	l9436
 15342  002F48  0E02               	movlw	2
 15343  002F4A  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 15344  002F4C  B0D8               	btfsc	status,0,c
 15345  002F4E  D005               	goto	l993
 15346                           
 15347                           ; BSR set to: 0
 15348  002F50  0E00               	movlw	0
 15349  002F52  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 15350  002F54  0E01               	movlw	1
 15351  002F56  6FB6               	movwf	?_create_chain& (0+255),b
 15352                           
 15353                           ; BSR set to: 0
 15354  002F58  0012               	return	
 15355  002F5A                     l993:
 15356  002F5A                     l9436:
 15357                           
 15358                           ; BSR set to: 0
 15359                           ;tff.c: 298: if (cstat < mcl) return cstat;
 15360  002F5A  51BA               	movf	create_chain@mcl& (0+255),w,b
 15361  002F5C  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 15362  002F5E  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 15363  002F60  59BF               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 15364  002F62  B0D8               	btfsc	status,0,c
 15365  002F64  D005               	goto	l995
 15366                           
 15367                           ; BSR set to: 0
 15368  002F66  C0BE  F0B6         	movff	create_chain@cstat,?_create_chain
 15369  002F6A  C0BF  F0B7         	movff	create_chain@cstat+1,?_create_chain+1
 15370  002F6E  0012               	return	
 15371  002F70                     l995:
 15372                           
 15373                           ; BSR set to: 0
 15374                           ;tff.c: 299: scl = clust;
 15375  002F70  C0B6  F0C0         	movff	create_chain@clust,create_chain@scl
 15376  002F74  C0B7  F0C1         	movff	create_chain@clust+1,create_chain@scl+1
 15377  002F78                     l992:
 15378                           
 15379                           ; BSR set to: 0
 15380                           ;tff.c: 300: }
 15381                           ;tff.c: 302: ncl = scl;
 15382  002F78  C0C0  F0C2         	movff	create_chain@scl,create_chain@ncl
 15383  002F7C  C0C1  F0C3         	movff	create_chain@scl+1,create_chain@ncl+1
 15384  002F80                     l9440:
 15385                           
 15386                           ; BSR set to: 0
 15387                           ;tff.c: 304: ncl++;
 15388  002F80  4BC2               	infsnz	create_chain@ncl& (0+255),f,b
 15389  002F82  2BC3               	incf	(create_chain@ncl+1)& (0+255),f,b
 15390                           
 15391                           ; BSR set to: 0
 15392                           ;tff.c: 305: if (ncl >= mcl) {
 15393  002F84  51BA               	movf	create_chain@mcl& (0+255),w,b
 15394  002F86  5DC2               	subwf	create_chain@ncl& (0+255),w,b
 15395  002F88  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 15396  002F8A  59C3               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 15397  002F8C  A0D8               	btfss	status,0,c
 15398  002F8E  D00F               	goto	l998
 15399                           
 15400                           ; BSR set to: 0
 15401                           ;tff.c: 306: ncl = 2;
 15402  002F90  0E00               	movlw	0
 15403  002F92  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 15404  002F94  0E02               	movlw	2
 15405  002F96  6FC2               	movwf	create_chain@ncl& (0+255),b
 15406                           
 15407                           ; BSR set to: 0
 15408                           ;tff.c: 307: if (ncl > scl) return 0;
 15409  002F98  51C2               	movf	create_chain@ncl& (0+255),w,b
 15410  002F9A  5DC0               	subwf	create_chain@scl& (0+255),w,b
 15411  002F9C  51C3               	movf	(create_chain@ncl+1)& (0+255),w,b
 15412  002F9E  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 15413  002FA0  B0D8               	btfsc	status,0,c
 15414  002FA2  D005               	goto	l998
 15415                           
 15416                           ; BSR set to: 0
 15417  002FA4  0E00               	movlw	0
 15418  002FA6  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 15419  002FA8  0E00               	movlw	0
 15420  002FAA  6FB6               	movwf	?_create_chain& (0+255),b
 15421                           
 15422                           ; BSR set to: 0
 15423  002FAC  0012               	return	
 15424  002FAE                     l998:
 15425                           
 15426                           ; BSR set to: 0
 15427                           ;tff.c: 308: }
 15428                           ;tff.c: 309: cstat = get_cluster(ncl);
 15429                           
 15430                           ; BSR set to: 0
 15431                           
 15432                           ; BSR set to: 0
 15433  002FAE  C0C2  F0A0         	movff	create_chain@ncl,get_cluster@clust
 15434  002FB2  C0C3  F0A1         	movff	create_chain@ncl+1,get_cluster@clust+1
 15435  002FB6  EC73  F015         	call	_get_cluster	;wreg free
 15436  002FBA  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 15437  002FBE  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 15438                           
 15439                           ;tff.c: 310: if (cstat == 0) break;
 15440  002FC2  0100               	movlb	0	; () banked
 15441  002FC4  51BE               	movf	create_chain@cstat& (0+255),w,b
 15442  002FC6  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 15443  002FC8  B4D8               	btfsc	status,2,c
 15444  002FCA  D015               	goto	l1000
 15445                           
 15446                           ; BSR set to: 0
 15447                           ;tff.c: 311: if (cstat == 1) return 1;
 15448                           
 15449                           ; BSR set to: 0
 15450                           
 15451                           ; BSR set to: 0
 15452  002FCC  05BE               	decf	create_chain@cstat& (0+255),w,b
 15453  002FCE  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 15454  002FD0  A4D8               	btfss	status,2,c
 15455  002FD2  D005               	goto	l1001
 15456                           
 15457                           ; BSR set to: 0
 15458  002FD4  0E00               	movlw	0
 15459  002FD6  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 15460  002FD8  0E01               	movlw	1
 15461  002FDA  6FB6               	movwf	?_create_chain& (0+255),b
 15462                           
 15463                           ; BSR set to: 0
 15464  002FDC  0012               	return	
 15465  002FDE                     l1001:
 15466                           
 15467                           ; BSR set to: 0
 15468                           ;tff.c: 312: if (ncl == scl) return 0;
 15469                           
 15470                           ; BSR set to: 0
 15471  002FDE  51C0               	movf	create_chain@scl& (0+255),w,b
 15472  002FE0  19C2               	xorwf	create_chain@ncl& (0+255),w,b
 15473  002FE2  E1CE               	bnz	l9440
 15474  002FE4  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 15475  002FE6  19C3               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 15476  002FE8  A4D8               	btfss	status,2,c
 15477  002FEA  D7CA               	goto	l996
 15478                           
 15479                           ; BSR set to: 0
 15480  002FEC  0E00               	movlw	0
 15481  002FEE  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 15482  002FF0  0E00               	movlw	0
 15483  002FF2  6FB6               	movwf	?_create_chain& (0+255),b
 15484                           
 15485                           ; BSR set to: 0
 15486  002FF4  0012               	return	
 15487  002FF6                     l1000:
 15488                           
 15489                           ; BSR set to: 0
 15490                           ;tff.c: 315: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 15491                           
 15492                           ; BSR set to: 0
 15493  002FF6  C0C2  F0A0         	movff	create_chain@ncl,put_cluster@clust
 15494  002FFA  C0C3  F0A1         	movff	create_chain@ncl+1,put_cluster@clust+1
 15495  002FFE  0EFF               	movlw	255
 15496  003000  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 15497  003002  69A2               	setf	put_cluster@val& (0+255),b
 15498  003004  EC36  F014         	call	_put_cluster	;wreg free
 15499  003008  0900               	iorlw	0
 15500  00300A  A4D8               	btfss	status,2,c
 15501  00300C  D006               	goto	l1003
 15502  00300E  0E00               	movlw	0
 15503  003010  0100               	movlb	0	; () banked
 15504  003012  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 15505  003014  0E01               	movlw	1
 15506  003016  6FB6               	movwf	?_create_chain& (0+255),b
 15507                           
 15508                           ; BSR set to: 0
 15509  003018  0012               	return	
 15510  00301A                     l1003:
 15511                           
 15512                           ;tff.c: 316: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 15513                           
 15514                           ; BSR set to: 0
 15515  00301A  0100               	movlb	0	; () banked
 15516  00301C  51B6               	movf	create_chain@clust& (0+255),w,b
 15517  00301E  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 15518  003020  B4D8               	btfsc	status,2,c
 15519  003022  D013               	goto	l1004
 15520                           
 15521                           ; BSR set to: 0
 15522  003024  C0B6  F0A0         	movff	create_chain@clust,put_cluster@clust
 15523  003028  C0B7  F0A1         	movff	create_chain@clust+1,put_cluster@clust+1
 15524  00302C  C0C2  F0A2         	movff	create_chain@ncl,put_cluster@val
 15525  003030  C0C3  F0A3         	movff	create_chain@ncl+1,put_cluster@val+1
 15526  003034  EC36  F014         	call	_put_cluster	;wreg free
 15527  003038  0900               	iorlw	0
 15528  00303A  A4D8               	btfss	status,2,c
 15529  00303C  D006               	goto	l1004
 15530  00303E  0E00               	movlw	0
 15531  003040  0100               	movlb	0	; () banked
 15532  003042  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 15533  003044  0E01               	movlw	1
 15534  003046  6FB6               	movwf	?_create_chain& (0+255),b
 15535                           
 15536                           ; BSR set to: 0
 15537  003048  0012               	return	
 15538  00304A                     l1004:
 15539                           
 15540                           ;tff.c: 318: fs->last_clust = ncl;
 15541                           
 15542                           ; BSR set to: 0
 15543  00304A  0100               	movlb	0	; () banked
 15544  00304C  EE20 F018          	lfsr	2,24
 15545  003050  51BC               	movf	create_chain@fs& (0+255),w,b
 15546  003052  26D9               	addwf	fsr2l,f,c
 15547  003054  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 15548  003056  22DA               	addwfc	fsr2h,f,c
 15549  003058  C0C2  FFDE         	movff	create_chain@ncl,postinc2
 15550  00305C  C0C3  FFDD         	movff	create_chain@ncl+1,postdec2
 15551                           
 15552                           ;tff.c: 319: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 15553  003060  EE20 F01A          	lfsr	2,26
 15554  003064  51BC               	movf	create_chain@fs& (0+255),w,b
 15555  003066  26D9               	addwf	fsr2l,f,c
 15556  003068  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 15557  00306A  22DA               	addwfc	fsr2h,f,c
 15558  00306C  28DE               	incf	postinc2,w,c
 15559  00306E  E103               	bnz	u11570
 15560  003070  28DE               	incf	postinc2,w,c
 15561  003072  B4D8               	btfsc	status,2,c
 15562  003074  D009               	goto	l1005
 15563  003076                     u11570:
 15564                           
 15565                           ; BSR set to: 0
 15566                           ;tff.c: 320: fs->free_clust--;
 15567  003076  EE20 F01A          	lfsr	2,26
 15568  00307A  51BC               	movf	create_chain@fs& (0+255),w,b
 15569  00307C  26D9               	addwf	fsr2l,f,c
 15570  00307E  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 15571  003080  22DA               	addwfc	fsr2h,f,c
 15572  003082  06DE               	decf	postinc2,f,c
 15573  003084  0E00               	movlw	0
 15574  003086  5ADD               	subwfb	postdec2,f,c
 15575  003088                     l1005:
 15576                           
 15577                           ; BSR set to: 0
 15578                           ;tff.c: 324: }
 15579                           ;tff.c: 326: return ncl;
 15580                           
 15581                           ; BSR set to: 0
 15582  003088  C0C2  F0B6         	movff	create_chain@ncl,?_create_chain
 15583  00308C  C0C3  F0B7         	movff	create_chain@ncl+1,?_create_chain+1
 15584  003090  0012               	return	
 15585  003092                     __end_of_create_chain:
 15586                           	opt stack 0
 15587                           tosu	equ	0xFFF
 15588                           tosh	equ	0xFFE
 15589                           tosl	equ	0xFFD
 15590                           pclath	equ	0xFFA
 15591                           tblptru	equ	0xFF8
 15592                           tblptrh	equ	0xFF7
 15593                           tblptrl	equ	0xFF6
 15594                           tablat	equ	0xFF5
 15595                           prodh	equ	0xFF4
 15596                           prodl	equ	0xFF3
 15597                           intcon	equ	0xFF2
 15598                           intcon2	equ	0xFF1
 15599                           intcon3	equ	0xFF0
 15600                           indf0	equ	0xFEF
 15601                           postinc0	equ	0xFEE
 15602                           fsr0h	equ	0xFEA
 15603                           fsr0l	equ	0xFE9
 15604                           wreg	equ	0xFE8
 15605                           indf1	equ	0xFE7
 15606                           postinc1	equ	0xFE6
 15607                           postdec1	equ	0xFE5
 15608                           plusw1	equ	0xFE3
 15609                           fsr1h	equ	0xFE2
 15610                           fsr1l	equ	0xFE1
 15611                           indf2	equ	0xFDF
 15612                           postinc2	equ	0xFDE
 15613                           postdec2	equ	0xFDD
 15614                           plusw2	equ	0xFDB
 15615                           fsr2h	equ	0xFDA
 15616                           fsr2l	equ	0xFD9
 15617                           status	equ	0xFD8
 15618                           
 15619 ;; *************** function _put_cluster *****************
 15620 ;; Defined at:
 15621 ;;		line 197 in file "bibliotecas/tff.c"
 15622 ;; Parameters:    Size  Location     Type
 15623 ;;  clust           2   64[BANK0 ] unsigned short 
 15624 ;;  val             2   66[BANK0 ] unsigned short 
 15625 ;; Auto vars:     Size  Location     Type
 15626 ;;  fatsect         4   76[BANK0 ] unsigned long 
 15627 ;;  fs              2   84[BANK0 ] PTR struct _FATFS
 15628 ;;		 -> NULL(0), fs(544), 
 15629 ;;  p               2   82[BANK0 ] PTR unsigned char 
 15630 ;;		 -> fs.win(512), NULL(0), fs(544), 
 15631 ;;  bc              2   80[BANK0 ] unsigned short 
 15632 ;; Return value:  Size  Location     Type
 15633 ;;                  1    wreg      enum E105
 15634 ;; Registers used:
 15635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15636 ;; Tracked objects:
 15637 ;;		On entry : 0/0
 15638 ;;		On exit  : 0/0
 15639 ;;		Unchanged: 0/0
 15640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15641 ;;      Params:         0       4       0       0       0       0       0       0       0
 15642 ;;      Locals:         0      14       0       0       0       0       0       0       0
 15643 ;;      Temps:          0       4       0       0       0       0       0       0       0
 15644 ;;      Totals:         0      22       0       0       0       0       0       0       0
 15645 ;;Total ram usage:       22 bytes
 15646 ;; Hardware stack levels used:    1
 15647 ;; Hardware stack levels required when called:    9
 15648 ;; This function calls:
 15649 ;;		___wmul
 15650 ;;		_move_window
 15651 ;; This function is called by:
 15652 ;;		_remove_chain
 15653 ;;		_create_chain
 15654 ;; This function uses a non-reentrant model
 15655 ;;
 15656                           
 15657                           	psect	text54
 15658  00286C                     __ptext54:
 15659                           	opt stack 0
 15660  00286C                     _put_cluster:
 15661                           	opt stack 13
 15662                           
 15663                           ;tff.c: 202: WORD bc;
 15664                           ;tff.c: 203: BYTE *p;
 15665                           ;tff.c: 204: DWORD fatsect;
 15666                           ;tff.c: 205: FATFS *fs = FatFs;
 15667                           
 15668                           ; BSR set to: 0
 15669                           ;incstack = 0
 15670  00286C  C0FD  F0B4         	movff	_FatFs,put_cluster@fs
 15671  002870  C0FE  F0B5         	movff	_FatFs+1,put_cluster@fs+1
 15672                           
 15673                           ;tff.c: 208: fatsect = fs->fatbase;
 15674  002874  0100               	movlb	0	; () banked
 15675  002876  EE20 F008          	lfsr	2,8
 15676  00287A  51B4               	movf	put_cluster@fs& (0+255),w,b
 15677  00287C  26D9               	addwf	fsr2l,f,c
 15678  00287E  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 15679  002880  22DA               	addwfc	fsr2h,f,c
 15680  002882  CFDE F0AC          	movff	postinc2,put_cluster@fatsect
 15681  002886  CFDE F0AD          	movff	postinc2,put_cluster@fatsect+1
 15682  00288A  CFDE F0AE          	movff	postinc2,put_cluster@fatsect+2
 15683  00288E  CFDE F0AF          	movff	postinc2,put_cluster@fatsect+3
 15684                           
 15685                           ;tff.c: 209: switch (fs->fs_type) {
 15686  002892  D111               	goto	l958
 15687  002894                     
 15688                           ; BSR set to: 0
 15689                           ;tff.c: 211: bc = (WORD)clust * 3 / 2;
 15690                           
 15691                           ; BSR set to: 0
 15692  002894  C0A0  F060         	movff	put_cluster@clust,___wmul@multiplier
 15693  002898  C0A1  F061         	movff	put_cluster@clust+1,___wmul@multiplier+1
 15694  00289C  0E00               	movlw	0
 15695  00289E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15696  0028A0  0E03               	movlw	3
 15697  0028A2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15698  0028A4  EC4E  F027         	call	___wmul	;wreg free
 15699  0028A8  90D8               	bcf	status,0,c
 15700  0028AA  0100               	movlb	0	; () banked
 15701  0028AC  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 15702  0028AE  6FA4               	movwf	??_put_cluster& (0+255),b
 15703  0028B0  3160               	rrcf	?___wmul& (0+255),w,b
 15704  0028B2  6FB0               	movwf	put_cluster@bc& (0+255),b
 15705  0028B4  C0A4  F0B1         	movff	??_put_cluster,put_cluster@bc+1
 15706                           
 15707                           ; BSR set to: 0
 15708                           ;tff.c: 212: if (!move_window(fatsect + bc / 512U)) return FALSE;
 15709  0028B8  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 15710  0028BC  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 15711  0028C0  0E09               	movlw	9
 15712  0028C2  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15713  0028C4                     u11305:
 15714  0028C4  90D8               	bcf	status,0,c
 15715  0028C6  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15716  0028C8  33A4               	rrcf	??_put_cluster& (0+255),f,b
 15717  0028CA  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15718  0028CC  D7FB               	goto	u11305
 15719  0028CE  51A4               	movf	??_put_cluster& (0+255),w,b
 15720  0028D0  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 15721  0028D2  6F8B               	movwf	move_window@sector& (0+255),b
 15722  0028D4  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15723  0028D6  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15724  0028D8  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15725  0028DA  0E00               	movlw	0
 15726  0028DC  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15727  0028DE  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15728  0028E0  0E00               	movlw	0
 15729  0028E2  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15730  0028E4  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15731  0028E6  EC49  F018         	call	_move_window	;wreg free
 15732  0028EA  0900               	iorlw	0
 15733  0028EC  A4D8               	btfss	status,2,c
 15734  0028EE  D002               	goto	l960
 15735  0028F0  0E00               	movlw	0
 15736  0028F2  0012               	return	
 15737  0028F4                     l960:
 15738                           
 15739                           ;tff.c: 213: p = &fs->win[bc % 512U];
 15740  0028F4  0EFF               	movlw	255
 15741  0028F6  0100               	movlb	0	; () banked
 15742  0028F8  6FA4               	movwf	??_put_cluster& (0+255),b
 15743  0028FA  0E01               	movlw	1
 15744  0028FC  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 15745  0028FE  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 15746  002902  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 15747  002906  51A4               	movf	??_put_cluster& (0+255),w,b
 15748  002908  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 15749  00290A  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15750  00290C  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 15751  00290E  0E20               	movlw	32
 15752  002910  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 15753  002912  0E00               	movlw	0
 15754  002914  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 15755  002916  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 15756  002918  25B4               	addwf	put_cluster@fs& (0+255),w,b
 15757  00291A  6FB2               	movwf	put_cluster@p& (0+255),b
 15758  00291C  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 15759  00291E  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 15760  002920  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 15761                           
 15762                           ; BSR set to: 0
 15763                           ;tff.c: 214: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 15764  002922  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 15765  002924  D004               	goto	l963
 15766                           
 15767                           ; BSR set to: 0
 15768  002926  C0A2  F0A8         	movff	put_cluster@val,_put_cluster$1897
 15769  00292A  6BA9               	clrf	(_put_cluster$1897+1)& (0+255),b
 15770  00292C  D01A               	goto	l965
 15771  00292E                     l963:
 15772                           
 15773                           ; BSR set to: 0
 15774                           
 15775                           ; BSR set to: 0
 15776  00292E  51A2               	movf	put_cluster@val& (0+255),w,b
 15777  002930  6FA4               	movwf	??_put_cluster& (0+255),b
 15778  002932  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 15779  002934  3BA4               	swapf	??_put_cluster& (0+255),f,b
 15780  002936  3BA5               	swapf	(??_put_cluster+1)& (0+255),f,b
 15781  002938  0EF0               	movlw	240
 15782  00293A  17A5               	andwf	(??_put_cluster+1)& (0+255),f,b
 15783  00293C  51A4               	movf	??_put_cluster& (0+255),w,b
 15784  00293E  0B0F               	andlw	15
 15785  002940  13A5               	iorwf	(??_put_cluster+1)& (0+255),f,b
 15786  002942  0EF0               	movlw	240
 15787  002944  17A4               	andwf	??_put_cluster& (0+255),f,b
 15788  002946  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 15789  00294A  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 15790  00294E  50DF               	movf	indf2,w,c
 15791  002950  0B0F               	andlw	15
 15792  002952  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15793  002954  6BA7               	clrf	(??_put_cluster+3)& (0+255),b
 15794  002956  51A4               	movf	??_put_cluster& (0+255),w,b
 15795  002958  11A6               	iorwf	(??_put_cluster+2)& (0+255),w,b
 15796  00295A  6FA8               	movwf	_put_cluster$1897& (0+255),b
 15797  00295C  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15798  00295E  11A7               	iorwf	(??_put_cluster+3)& (0+255),w,b
 15799  002960  6FA9               	movwf	(_put_cluster$1897+1)& (0+255),b
 15800  002962                     l965:
 15801                           
 15802                           ; BSR set to: 0
 15803                           
 15804                           ; BSR set to: 0
 15805  002962  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 15806  002966  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 15807  00296A  C0A8  FFDF         	movff	_put_cluster$1897,indf2
 15808                           
 15809                           ; BSR set to: 0
 15810                           ;tff.c: 215: bc++;
 15811  00296E  4BB0               	infsnz	put_cluster@bc& (0+255),f,b
 15812  002970  2BB1               	incf	(put_cluster@bc+1)& (0+255),f,b
 15813                           
 15814                           ; BSR set to: 0
 15815                           ;tff.c: 216: fs->winflag = 1;
 15816  002972  EE20 F01F          	lfsr	2,31
 15817  002976  51B4               	movf	put_cluster@fs& (0+255),w,b
 15818  002978  26D9               	addwf	fsr2l,f,c
 15819  00297A  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 15820  00297C  22DA               	addwfc	fsr2h,f,c
 15821  00297E  0E01               	movlw	1
 15822  002980  6EDF               	movwf	indf2,c
 15823                           
 15824                           ; BSR set to: 0
 15825                           ;tff.c: 217: if (!move_window(fatsect + bc / 512U)) return FALSE;
 15826  002982  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 15827  002986  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 15828  00298A  0E09               	movlw	9
 15829  00298C  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15830  00298E                     u11335:
 15831  00298E  90D8               	bcf	status,0,c
 15832  002990  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15833  002992  33A4               	rrcf	??_put_cluster& (0+255),f,b
 15834  002994  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15835  002996  D7FB               	goto	u11335
 15836  002998  51A4               	movf	??_put_cluster& (0+255),w,b
 15837  00299A  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 15838  00299C  6F8B               	movwf	move_window@sector& (0+255),b
 15839  00299E  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15840  0029A0  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15841  0029A2  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15842  0029A4  0E00               	movlw	0
 15843  0029A6  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15844  0029A8  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15845  0029AA  0E00               	movlw	0
 15846  0029AC  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15847  0029AE  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15848  0029B0  EC49  F018         	call	_move_window	;wreg free
 15849  0029B4  0900               	iorlw	0
 15850  0029B6  A4D8               	btfss	status,2,c
 15851  0029B8  D002               	goto	l966
 15852  0029BA  0E00               	movlw	0
 15853  0029BC  0012               	return	
 15854  0029BE                     l966:
 15855                           
 15856                           ;tff.c: 218: p = &fs->win[bc % 512U];
 15857  0029BE  0EFF               	movlw	255
 15858  0029C0  0100               	movlb	0	; () banked
 15859  0029C2  6FA4               	movwf	??_put_cluster& (0+255),b
 15860  0029C4  0E01               	movlw	1
 15861  0029C6  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 15862  0029C8  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 15863  0029CC  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 15864  0029D0  51A4               	movf	??_put_cluster& (0+255),w,b
 15865  0029D2  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 15866  0029D4  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15867  0029D6  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 15868  0029D8  0E20               	movlw	32
 15869  0029DA  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 15870  0029DC  0E00               	movlw	0
 15871  0029DE  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 15872  0029E0  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 15873  0029E2  25B4               	addwf	put_cluster@fs& (0+255),w,b
 15874  0029E4  6FB2               	movwf	put_cluster@p& (0+255),b
 15875  0029E6  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 15876  0029E8  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 15877  0029EA  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 15878                           
 15879                           ; BSR set to: 0
 15880                           ;tff.c: 219: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 15881  0029EC  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 15882  0029EE  D013               	goto	l968
 15883                           
 15884                           ; BSR set to: 0
 15885  0029F0  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 15886  0029F4  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 15887  0029F8  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 15888  0029FC  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 15889  0029FE  0E0F               	movlw	15
 15890  002A00  17A4               	andwf	??_put_cluster& (0+255),f,b
 15891  002A02  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 15892  002A06  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 15893  002A0A  50DF               	movf	indf2,w,c
 15894  002A0C  0BF0               	andlw	240
 15895  002A0E  11A4               	iorwf	??_put_cluster& (0+255),w,b
 15896  002A10  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15897  002A12  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 15898  002A14  D00C               	goto	L9
 15899  002A16                     l968:
 15900                           
 15901                           ; BSR set to: 0
 15902                           
 15903                           ; BSR set to: 0
 15904  002A16  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 15905  002A1A  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 15906  002A1E  0E04               	movlw	4
 15907  002A20  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15908  002A22                     u11365:
 15909  002A22  90D8               	bcf	status,0,c
 15910  002A24  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15911  002A26  33A4               	rrcf	??_put_cluster& (0+255),f,b
 15912  002A28  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15913  002A2A  D7FB               	goto	u11365
 15914  002A2C  51A4               	movf	??_put_cluster& (0+255),w,b
 15915  002A2E                     L9:
 15916  002A2E  6FAA               	movwf	_put_cluster$1898& (0+255),b
 15917  002A30  6BAB               	clrf	(_put_cluster$1898+1)& (0+255),b
 15918                           
 15919                           ; BSR set to: 0
 15920                           
 15921                           ; BSR set to: 0
 15922  002A32  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 15923  002A36  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 15924  002A3A  C0AA  FFDF         	movff	_put_cluster$1898,indf2
 15925                           
 15926                           ;tff.c: 220: break;
 15927  002A3E  D049               	goto	l971
 15928  002A40                     
 15929                           ; BSR set to: 0
 15930                           ;tff.c: 223: if (!move_window(fatsect + clust / 256)) return FALSE;
 15931                           
 15932                           ; BSR set to: 0
 15933  002A40  C0A0  F0A4         	movff	put_cluster@clust,??_put_cluster
 15934  002A44  C0A1  F0A5         	movff	put_cluster@clust+1,??_put_cluster+1
 15935  002A48  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 15936  002A4C  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 15937  002A4E  51A4               	movf	??_put_cluster& (0+255),w,b
 15938  002A50  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 15939  002A52  6F8B               	movwf	move_window@sector& (0+255),b
 15940  002A54  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15941  002A56  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15942  002A58  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15943  002A5A  0E00               	movlw	0
 15944  002A5C  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15945  002A5E  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15946  002A60  0E00               	movlw	0
 15947  002A62  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15948  002A64  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15949  002A66  EC49  F018         	call	_move_window	;wreg free
 15950  002A6A  0900               	iorlw	0
 15951  002A6C  A4D8               	btfss	status,2,c
 15952  002A6E  D002               	goto	l973
 15953  002A70  0E00               	movlw	0
 15954  002A72  0012               	return	
 15955  002A74                     l973:
 15956                           
 15957                           ;tff.c: 224: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 15958  002A74  0EFF               	movlw	255
 15959  002A76  0100               	movlb	0	; () banked
 15960  002A78  6FA4               	movwf	??_put_cluster& (0+255),b
 15961  002A7A  0E01               	movlw	1
 15962  002A7C  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 15963  002A7E  C0A0  F0A6         	movff	put_cluster@clust,??_put_cluster+2
 15964  002A82  C0A1  F0A7         	movff	put_cluster@clust+1,??_put_cluster+3
 15965  002A86  90D8               	bcf	status,0,c
 15966  002A88  37A6               	rlcf	(??_put_cluster+2)& (0+255),f,b
 15967  002A8A  37A7               	rlcf	(??_put_cluster+3)& (0+255),f,b
 15968  002A8C  51A4               	movf	??_put_cluster& (0+255),w,b
 15969  002A8E  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 15970  002A90  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15971  002A92  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 15972  002A94  0E20               	movlw	32
 15973  002A96  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 15974  002A98  0E00               	movlw	0
 15975  002A9A  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 15976  002A9C  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 15977  002A9E  25B4               	addwf	put_cluster@fs& (0+255),w,b
 15978  002AA0  6ED9               	movwf	fsr2l,c
 15979  002AA2  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 15980  002AA4  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 15981  002AA6  6EDA               	movwf	fsr2h,c
 15982  002AA8  C0A2  FFDE         	movff	put_cluster@val,postinc2
 15983  002AAC  C0A3  FFDD         	movff	put_cluster@val+1,postdec2
 15984                           
 15985                           ;tff.c: 225: break;
 15986  002AB0  D010               	goto	l971
 15987  002AB2                     
 15988                           ; BSR set to: 0
 15989                           ;tff.c: 233: return FALSE;
 15990                           
 15991                           ; BSR set to: 0
 15992  002AB2  0E00               	movlw	0
 15993                           
 15994                           ; BSR set to: 0
 15995  002AB4  0012               	return	
 15996  002AB6                     l958:
 15997                           
 15998                           ; BSR set to: 0
 15999                           
 16000                           ; BSR set to: 0
 16001  002AB6  EE20 F01C          	lfsr	2,28
 16002  002ABA  51B4               	movf	put_cluster@fs& (0+255),w,b
 16003  002ABC  26D9               	addwf	fsr2l,f,c
 16004  002ABE  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 16005  002AC0  22DA               	addwfc	fsr2h,f,c
 16006  002AC2  50DF               	movf	indf2,w,c
 16007                           
 16008                           ; Switch size 1, requested type "space"
 16009                           ; Number of cases is 2, Range of values is 1 to 2
 16010                           ; switch strategies available:
 16011                           ; Name         Instructions Cycles
 16012                           ; simple_byte            7     4 (average)
 16013                           ;	Chosen strategy is simple_byte
 16014  002AC4  0A01               	xorlw	1	; case 1
 16015  002AC6  B4D8               	btfsc	status,2,c
 16016  002AC8  D6E5               	goto	l959
 16017  002ACA  0A03               	xorlw	3	; case 2
 16018  002ACC  B4D8               	btfsc	status,2,c
 16019  002ACE  D7B8               	goto	l972
 16020  002AD0  D7F0               	goto	l974
 16021  002AD2                     l971:
 16022                           
 16023                           ; BSR set to: 0
 16024                           ;tff.c: 235: fs->winflag = 1;
 16025                           
 16026                           ; BSR set to: 0
 16027  002AD2  EE20 F01F          	lfsr	2,31
 16028  002AD6  51B4               	movf	put_cluster@fs& (0+255),w,b
 16029  002AD8  26D9               	addwf	fsr2l,f,c
 16030  002ADA  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 16031  002ADC  22DA               	addwfc	fsr2h,f,c
 16032  002ADE  0E01               	movlw	1
 16033  002AE0  6EDF               	movwf	indf2,c
 16034                           
 16035                           ; BSR set to: 0
 16036                           ;tff.c: 236: return TRUE;
 16037  002AE2  0E01               	movlw	1
 16038  002AE4  0012               	return	
 16039  002AE6                     __end_of_put_cluster:
 16040                           	opt stack 0
 16041                           tosu	equ	0xFFF
 16042                           tosh	equ	0xFFE
 16043                           tosl	equ	0xFFD
 16044                           pclath	equ	0xFFA
 16045                           tblptru	equ	0xFF8
 16046                           tblptrh	equ	0xFF7
 16047                           tblptrl	equ	0xFF6
 16048                           tablat	equ	0xFF5
 16049                           prodh	equ	0xFF4
 16050                           prodl	equ	0xFF3
 16051                           intcon	equ	0xFF2
 16052                           intcon2	equ	0xFF1
 16053                           intcon3	equ	0xFF0
 16054                           indf0	equ	0xFEF
 16055                           postinc0	equ	0xFEE
 16056                           fsr0h	equ	0xFEA
 16057                           fsr0l	equ	0xFE9
 16058                           wreg	equ	0xFE8
 16059                           indf1	equ	0xFE7
 16060                           postinc1	equ	0xFE6
 16061                           postdec1	equ	0xFE5
 16062                           plusw1	equ	0xFE3
 16063                           fsr1h	equ	0xFE2
 16064                           fsr1l	equ	0xFE1
 16065                           indf2	equ	0xFDF
 16066                           postinc2	equ	0xFDE
 16067                           postdec2	equ	0xFDD
 16068                           plusw2	equ	0xFDB
 16069                           fsr2h	equ	0xFDA
 16070                           fsr2l	equ	0xFD9
 16071                           status	equ	0xFD8
 16072                           
 16073 ;; *************** function _get_cluster *****************
 16074 ;; Defined at:
 16075 ;;		line 154 in file "bibliotecas/tff.c"
 16076 ;; Parameters:    Size  Location     Type
 16077 ;;  clust           2   64[BANK0 ] unsigned short 
 16078 ;; Auto vars:     Size  Location     Type
 16079 ;;  fatsect         4   75[BANK0 ] unsigned long 
 16080 ;;  fs              2   81[BANK0 ] PTR struct _FATFS
 16081 ;;		 -> NULL(0), fs(544), 
 16082 ;;  bc              2   79[BANK0 ] unsigned short 
 16083 ;;  wc              2   73[BANK0 ] unsigned short 
 16084 ;; Return value:  Size  Location     Type
 16085 ;;                  2   64[BANK0 ] unsigned short 
 16086 ;; Registers used:
 16087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16088 ;; Tracked objects:
 16089 ;;		On entry : 0/0
 16090 ;;		On exit  : 0/0
 16091 ;;		Unchanged: 0/0
 16092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16093 ;;      Params:         0       2       0       0       0       0       0       0       0
 16094 ;;      Locals:         0      10       0       0       0       0       0       0       0
 16095 ;;      Temps:          0       7       0       0       0       0       0       0       0
 16096 ;;      Totals:         0      19       0       0       0       0       0       0       0
 16097 ;;Total ram usage:       19 bytes
 16098 ;; Hardware stack levels used:    1
 16099 ;; Hardware stack levels required when called:    9
 16100 ;; This function calls:
 16101 ;;		___wmul
 16102 ;;		_move_window
 16103 ;; This function is called by:
 16104 ;;		_remove_chain
 16105 ;;		_create_chain
 16106 ;;		_next_dir_entry
 16107 ;;		_f_lseek
 16108 ;;		_f_read
 16109 ;; This function uses a non-reentrant model
 16110 ;;
 16111                           
 16112                           	psect	text55
 16113  002AE6                     __ptext55:
 16114                           	opt stack 0
 16115  002AE6                     _get_cluster:
 16116                           	opt stack 13
 16117                           
 16118                           ;tff.c: 158: WORD wc, bc;
 16119                           ;tff.c: 159: DWORD fatsect;
 16120                           ;tff.c: 160: FATFS *fs = FatFs;
 16121                           
 16122                           ;incstack = 0
 16123  002AE6  C0FD  F0B1         	movff	_FatFs,get_cluster@fs
 16124  002AEA  C0FE  F0B2         	movff	_FatFs+1,get_cluster@fs+1
 16125                           
 16126                           ;tff.c: 163: if (clust >= 2 && clust < fs->max_clust) {
 16127  002AEE  0100               	movlb	0	; () banked
 16128  002AF0  51A1               	movf	(get_cluster@clust+1)& (0+255),w,b
 16129  002AF2  E104               	bnz	u11210
 16130  002AF4  0E02               	movlw	2
 16131  002AF6  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 16132  002AF8  A0D8               	btfss	status,0,c
 16133  002AFA  D100               	goto	l947
 16134  002AFC                     u11210:
 16135                           
 16136                           ; BSR set to: 0
 16137  002AFC  EE20 F016          	lfsr	2,22
 16138  002B00  51B1               	movf	get_cluster@fs& (0+255),w,b
 16139  002B02  26D9               	addwf	fsr2l,f,c
 16140  002B04  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 16141  002B06  22DA               	addwfc	fsr2h,f,c
 16142  002B08  50DE               	movf	postinc2,w,c
 16143  002B0A  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 16144  002B0C  50DE               	movf	postinc2,w,c
 16145  002B0E  59A1               	subwfb	(get_cluster@clust+1)& (0+255),w,b
 16146  002B10  B0D8               	btfsc	status,0,c
 16147  002B12  D0F4               	goto	l947
 16148                           
 16149                           ; BSR set to: 0
 16150                           ;tff.c: 164: fatsect = fs->fatbase;
 16151  002B14  EE20 F008          	lfsr	2,8
 16152  002B18  51B1               	movf	get_cluster@fs& (0+255),w,b
 16153  002B1A  26D9               	addwf	fsr2l,f,c
 16154  002B1C  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 16155  002B1E  22DA               	addwfc	fsr2h,f,c
 16156  002B20  CFDE F0AB          	movff	postinc2,get_cluster@fatsect
 16157  002B24  CFDE F0AC          	movff	postinc2,get_cluster@fatsect+1
 16158  002B28  CFDE F0AD          	movff	postinc2,get_cluster@fatsect+2
 16159  002B2C  CFDE F0AE          	movff	postinc2,get_cluster@fatsect+3
 16160                           
 16161                           ;tff.c: 165: switch (fs->fs_type) {
 16162  002B30  D0D8               	goto	l944
 16163  002B32                     
 16164                           ; BSR set to: 0
 16165                           ;tff.c: 167: bc = (WORD)clust * 3 / 2;
 16166                           
 16167                           ; BSR set to: 0
 16168  002B32  C0A0  F060         	movff	get_cluster@clust,___wmul@multiplier
 16169  002B36  C0A1  F061         	movff	get_cluster@clust+1,___wmul@multiplier+1
 16170  002B3A  0E00               	movlw	0
 16171  002B3C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 16172  002B3E  0E03               	movlw	3
 16173  002B40  6F62               	movwf	___wmul@multiplicand& (0+255),b
 16174  002B42  EC4E  F027         	call	___wmul	;wreg free
 16175  002B46  90D8               	bcf	status,0,c
 16176  002B48  0100               	movlb	0	; () banked
 16177  002B4A  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 16178  002B4C  6FA2               	movwf	??_get_cluster& (0+255),b
 16179  002B4E  3160               	rrcf	?___wmul& (0+255),w,b
 16180  002B50  6FAF               	movwf	get_cluster@bc& (0+255),b
 16181  002B52  C0A2  F0B0         	movff	??_get_cluster,get_cluster@bc+1
 16182                           
 16183                           ; BSR set to: 0
 16184                           ;tff.c: 168: if (!move_window(fatsect + bc / 512U)) break;
 16185  002B56  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 16186  002B5A  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 16187  002B5E  0E09               	movlw	9
 16188  002B60  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 16189  002B62                     u11235:
 16190  002B62  90D8               	bcf	status,0,c
 16191  002B64  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 16192  002B66  33A2               	rrcf	??_get_cluster& (0+255),f,b
 16193  002B68  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 16194  002B6A  D7FB               	goto	u11235
 16195  002B6C  51A2               	movf	??_get_cluster& (0+255),w,b
 16196  002B6E  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 16197  002B70  6F8B               	movwf	move_window@sector& (0+255),b
 16198  002B72  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 16199  002B74  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 16200  002B76  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 16201  002B78  0E00               	movlw	0
 16202  002B7A  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 16203  002B7C  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 16204  002B7E  0E00               	movlw	0
 16205  002B80  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 16206  002B82  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 16207  002B84  EC49  F018         	call	_move_window	;wreg free
 16208  002B88  0900               	iorlw	0
 16209  002B8A  B4D8               	btfsc	status,2,c
 16210  002B8C  D0B7               	goto	l947
 16211                           
 16212                           ;tff.c: 169: wc = fs->win[bc % 512U]; bc++;
 16213  002B8E  0EFF               	movlw	255
 16214  002B90  0100               	movlb	0	; () banked
 16215  002B92  6FA2               	movwf	??_get_cluster& (0+255),b
 16216  002B94  0E01               	movlw	1
 16217  002B96  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 16218  002B98  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 16219  002B9C  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 16220  002BA0  51A2               	movf	??_get_cluster& (0+255),w,b
 16221  002BA2  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 16222  002BA4  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 16223  002BA6  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 16224  002BA8  0E20               	movlw	32
 16225  002BAA  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 16226  002BAC  0E00               	movlw	0
 16227  002BAE  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 16228  002BB0  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 16229  002BB2  25B1               	addwf	get_cluster@fs& (0+255),w,b
 16230  002BB4  6ED9               	movwf	fsr2l,c
 16231  002BB6  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 16232  002BB8  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 16233  002BBA  6EDA               	movwf	fsr2h,c
 16234  002BBC  50DF               	movf	indf2,w,c
 16235  002BBE  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 16236  002BC0  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 16237  002BC2  6FA9               	movwf	get_cluster@wc& (0+255),b
 16238  002BC4  6BAA               	clrf	(get_cluster@wc+1)& (0+255),b
 16239                           
 16240                           ; BSR set to: 0
 16241  002BC6  4BAF               	infsnz	get_cluster@bc& (0+255),f,b
 16242  002BC8  2BB0               	incf	(get_cluster@bc+1)& (0+255),f,b
 16243                           
 16244                           ; BSR set to: 0
 16245                           ;tff.c: 170: if (!move_window(fatsect + bc / 512U)) break;
 16246  002BCA  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 16247  002BCE  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 16248  002BD2  0E09               	movlw	9
 16249  002BD4  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 16250  002BD6                     u11255:
 16251  002BD6  90D8               	bcf	status,0,c
 16252  002BD8  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 16253  002BDA  33A2               	rrcf	??_get_cluster& (0+255),f,b
 16254  002BDC  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 16255  002BDE  D7FB               	goto	u11255
 16256  002BE0  51A2               	movf	??_get_cluster& (0+255),w,b
 16257  002BE2  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 16258  002BE4  6F8B               	movwf	move_window@sector& (0+255),b
 16259  002BE6  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 16260  002BE8  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 16261  002BEA  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 16262  002BEC  0E00               	movlw	0
 16263  002BEE  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 16264  002BF0  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 16265  002BF2  0E00               	movlw	0
 16266  002BF4  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 16267  002BF6  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 16268  002BF8  EC49  F018         	call	_move_window	;wreg free
 16269  002BFC  0900               	iorlw	0
 16270  002BFE  B4D8               	btfsc	status,2,c
 16271  002C00  D07D               	goto	l947
 16272                           
 16273                           ;tff.c: 171: wc |= (WORD)fs->win[bc % 512U] << 8;
 16274  002C02  0EFF               	movlw	255
 16275  002C04  0100               	movlb	0	; () banked
 16276  002C06  6FA2               	movwf	??_get_cluster& (0+255),b
 16277  002C08  0E01               	movlw	1
 16278  002C0A  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 16279  002C0C  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 16280  002C10  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 16281  002C14  51A2               	movf	??_get_cluster& (0+255),w,b
 16282  002C16  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 16283  002C18  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 16284  002C1A  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 16285  002C1C  0E20               	movlw	32
 16286  002C1E  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 16287  002C20  0E00               	movlw	0
 16288  002C22  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 16289  002C24  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 16290  002C26  25B1               	addwf	get_cluster@fs& (0+255),w,b
 16291  002C28  6ED9               	movwf	fsr2l,c
 16292  002C2A  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 16293  002C2C  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 16294  002C2E  6EDA               	movwf	fsr2h,c
 16295  002C30  50DF               	movf	indf2,w,c
 16296  002C32  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 16297  002C34  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 16298  002C36  6FA8               	movwf	(??_get_cluster+6)& (0+255),b
 16299  002C38  6BA7               	clrf	(??_get_cluster+5)& (0+255),b
 16300  002C3A  51A7               	movf	(??_get_cluster+5)& (0+255),w,b
 16301  002C3C  13A9               	iorwf	get_cluster@wc& (0+255),f,b
 16302  002C3E  51A8               	movf	(??_get_cluster+6)& (0+255),w,b
 16303  002C40  13AA               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 16304                           
 16305                           ; BSR set to: 0
 16306                           ;tff.c: 172: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 16307  002C42  B1A0               	btfsc	get_cluster@clust& (0+255),0,b
 16308  002C44  D007               	goto	l950
 16309                           
 16310                           ; BSR set to: 0
 16311  002C46  0EFF               	movlw	255
 16312  002C48  15A9               	andwf	get_cluster@wc& (0+255),w,b
 16313  002C4A  6FA0               	movwf	?_get_cluster& (0+255),b
 16314  002C4C  0E0F               	movlw	15
 16315  002C4E  15AA               	andwf	(get_cluster@wc+1)& (0+255),w,b
 16316  002C50  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 16317  002C52  0012               	return	
 16318  002C54                     l950:
 16319                           
 16320                           ; BSR set to: 0
 16321                           
 16322                           ; BSR set to: 0
 16323  002C54  C0A9  F0A2         	movff	get_cluster@wc,??_get_cluster
 16324  002C58  C0AA  F0A3         	movff	get_cluster@wc+1,??_get_cluster+1
 16325  002C5C  0E04               	movlw	4
 16326  002C5E  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 16327  002C60                     u11285:
 16328  002C60  90D8               	bcf	status,0,c
 16329  002C62  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 16330  002C64  33A2               	rrcf	??_get_cluster& (0+255),f,b
 16331  002C66  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 16332  002C68  D7FB               	goto	u11285
 16333  002C6A  C0A2  F0A0         	movff	??_get_cluster,?_get_cluster
 16334  002C6E  C0A3  F0A1         	movff	??_get_cluster+1,?_get_cluster+1
 16335                           
 16336                           ; BSR set to: 0
 16337                           
 16338                           ; BSR set to: 0
 16339  002C72  0012               	return	
 16340  002C74                     
 16341                           ; BSR set to: 0
 16342                           ;tff.c: 175: if (!move_window(fatsect + clust / 256)) break;
 16343                           
 16344                           ; BSR set to: 0
 16345  002C74  C0A0  F0A2         	movff	get_cluster@clust,??_get_cluster
 16346  002C78  C0A1  F0A3         	movff	get_cluster@clust+1,??_get_cluster+1
 16347  002C7C  C0A3  F0A2         	movff	??_get_cluster+1,??_get_cluster
 16348  002C80  6BA3               	clrf	(??_get_cluster+1)& (0+255),b
 16349  002C82  51A2               	movf	??_get_cluster& (0+255),w,b
 16350  002C84  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 16351  002C86  6F8B               	movwf	move_window@sector& (0+255),b
 16352  002C88  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 16353  002C8A  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 16354  002C8C  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 16355  002C8E  0E00               	movlw	0
 16356  002C90  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 16357  002C92  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 16358  002C94  0E00               	movlw	0
 16359  002C96  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 16360  002C98  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 16361  002C9A  EC49  F018         	call	_move_window	;wreg free
 16362  002C9E  0900               	iorlw	0
 16363  002CA0  B4D8               	btfsc	status,2,c
 16364  002CA2  D02C               	goto	l947
 16365                           
 16366                           ;tff.c: 176: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 16367  002CA4  0EFF               	movlw	255
 16368  002CA6  0100               	movlb	0	; () banked
 16369  002CA8  6FA2               	movwf	??_get_cluster& (0+255),b
 16370  002CAA  0E01               	movlw	1
 16371  002CAC  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 16372  002CAE  C0A0  F0A4         	movff	get_cluster@clust,??_get_cluster+2
 16373  002CB2  C0A1  F0A5         	movff	get_cluster@clust+1,??_get_cluster+3
 16374  002CB6  90D8               	bcf	status,0,c
 16375  002CB8  37A4               	rlcf	(??_get_cluster+2)& (0+255),f,b
 16376  002CBA  37A5               	rlcf	(??_get_cluster+3)& (0+255),f,b
 16377  002CBC  51A2               	movf	??_get_cluster& (0+255),w,b
 16378  002CBE  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 16379  002CC0  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 16380  002CC2  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 16381  002CC4  0E20               	movlw	32
 16382  002CC6  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 16383  002CC8  0E00               	movlw	0
 16384  002CCA  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 16385  002CCC  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 16386  002CCE  25B1               	addwf	get_cluster@fs& (0+255),w,b
 16387  002CD0  6ED9               	movwf	fsr2l,c
 16388  002CD2  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 16389  002CD4  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 16390  002CD6  6EDA               	movwf	fsr2h,c
 16391  002CD8  CFDE F0A0          	movff	postinc2,?_get_cluster
 16392  002CDC  CFDD F0A1          	movff	postdec2,?_get_cluster+1
 16393                           
 16394                           ; BSR set to: 0
 16395  002CE0  0012               	return	
 16396  002CE2                     l944:
 16397                           
 16398                           ; BSR set to: 0
 16399                           
 16400                           ; BSR set to: 0
 16401  002CE2  EE20 F01C          	lfsr	2,28
 16402  002CE6  51B1               	movf	get_cluster@fs& (0+255),w,b
 16403  002CE8  26D9               	addwf	fsr2l,f,c
 16404  002CEA  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 16405  002CEC  22DA               	addwfc	fsr2h,f,c
 16406  002CEE  50DF               	movf	indf2,w,c
 16407                           
 16408                           ; Switch size 1, requested type "space"
 16409                           ; Number of cases is 2, Range of values is 1 to 2
 16410                           ; switch strategies available:
 16411                           ; Name         Instructions Cycles
 16412                           ; simple_byte            7     4 (average)
 16413                           ;	Chosen strategy is simple_byte
 16414  002CF0  0A01               	xorlw	1	; case 1
 16415  002CF2  B4D8               	btfsc	status,2,c
 16416  002CF4  D71E               	goto	l945
 16417  002CF6  0A03               	xorlw	3	; case 2
 16418  002CF8  B4D8               	btfsc	status,2,c
 16419  002CFA  D7BC               	goto	l954
 16420  002CFC                     l947:
 16421                           
 16422                           ;tff.c: 183: }
 16423                           ;tff.c: 185: return 1;
 16424                           
 16425                           ; BSR set to: 0
 16426                           
 16427                           ; BSR set to: 0
 16428  002CFC  0E00               	movlw	0
 16429  002CFE  0100               	movlb	0	; () banked
 16430  002D00  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 16431  002D02  0E01               	movlw	1
 16432  002D04  6FA0               	movwf	?_get_cluster& (0+255),b
 16433  002D06  0012               	return	
 16434  002D08                     __end_of_get_cluster:
 16435                           	opt stack 0
 16436                           tosu	equ	0xFFF
 16437                           tosh	equ	0xFFE
 16438                           tosl	equ	0xFFD
 16439                           pclath	equ	0xFFA
 16440                           tblptru	equ	0xFF8
 16441                           tblptrh	equ	0xFF7
 16442                           tblptrl	equ	0xFF6
 16443                           tablat	equ	0xFF5
 16444                           prodh	equ	0xFF4
 16445                           prodl	equ	0xFF3
 16446                           intcon	equ	0xFF2
 16447                           intcon2	equ	0xFF1
 16448                           intcon3	equ	0xFF0
 16449                           indf0	equ	0xFEF
 16450                           postinc0	equ	0xFEE
 16451                           fsr0h	equ	0xFEA
 16452                           fsr0l	equ	0xFE9
 16453                           wreg	equ	0xFE8
 16454                           indf1	equ	0xFE7
 16455                           postinc1	equ	0xFE6
 16456                           postdec1	equ	0xFE5
 16457                           plusw1	equ	0xFE3
 16458                           fsr1h	equ	0xFE2
 16459                           fsr1l	equ	0xFE1
 16460                           indf2	equ	0xFDF
 16461                           postinc2	equ	0xFDE
 16462                           postdec2	equ	0xFDD
 16463                           plusw2	equ	0xFDB
 16464                           fsr2h	equ	0xFDA
 16465                           fsr2l	equ	0xFD9
 16466                           status	equ	0xFD8
 16467                           
 16468 ;; *************** function ___wmul *****************
 16469 ;; Defined at:
 16470 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16471 ;; Parameters:    Size  Location     Type
 16472 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16473 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16474 ;; Auto vars:     Size  Location     Type
 16475 ;;  product         2    4[BANK0 ] unsigned int 
 16476 ;; Return value:  Size  Location     Type
 16477 ;;                  2    0[BANK0 ] unsigned int 
 16478 ;; Registers used:
 16479 ;;		wreg, status,2, status,0, prodl, prodh
 16480 ;; Tracked objects:
 16481 ;;		On entry : 0/0
 16482 ;;		On exit  : 0/0
 16483 ;;		Unchanged: 0/0
 16484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16485 ;;      Params:         0       4       0       0       0       0       0       0       0
 16486 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16487 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16488 ;;      Totals:         0       6       0       0       0       0       0       0       0
 16489 ;;Total ram usage:        6 bytes
 16490 ;; Hardware stack levels used:    1
 16491 ;; Hardware stack levels required when called:    3
 16492 ;; This function calls:
 16493 ;;		Nothing
 16494 ;; This function is called by:
 16495 ;;		_get_cluster
 16496 ;;		_put_cluster
 16497 ;;		_fprintf
 16498 ;;		_atoi
 16499 ;; This function uses a non-reentrant model
 16500 ;;
 16501                           
 16502                           	psect	text56
 16503  004E9C                     __ptext56:
 16504                           	opt stack 0
 16505  004E9C                     ___wmul:
 16506                           	opt stack 24
 16507                           
 16508                           ; BSR set to: 0
 16509                           ;incstack = 0
 16510  004E9C  0100               	movlb	0	; () banked
 16511  004E9E  5160               	movf	___wmul@multiplier& (0+255),w,b
 16512  004EA0  0362               	mulwf	___wmul@multiplicand& (0+255),b
 16513  004EA2  CFF3 F064          	movff	prodl,___wmul@product
 16514  004EA6  CFF4 F065          	movff	prodh,___wmul@product+1
 16515  004EAA  5160               	movf	___wmul@multiplier& (0+255),w,b
 16516  004EAC  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16517  004EAE  50F3               	movf	prodl,w,c
 16518  004EB0  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 16519  004EB2  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16520  004EB4  0362               	mulwf	___wmul@multiplicand& (0+255),b
 16521  004EB6  50F3               	movf	prodl,w,c
 16522  004EB8  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 16523                           
 16524                           ; BSR set to: 0
 16525  004EBA  C064  F060         	movff	___wmul@product,?___wmul
 16526  004EBE  C065  F061         	movff	___wmul@product+1,?___wmul+1
 16527  004EC2  0012               	return	
 16528  004EC4                     __end_of___wmul:
 16529                           	opt stack 0
 16530                           tosu	equ	0xFFF
 16531                           tosh	equ	0xFFE
 16532                           tosl	equ	0xFFD
 16533                           pclath	equ	0xFFA
 16534                           tblptru	equ	0xFF8
 16535                           tblptrh	equ	0xFF7
 16536                           tblptrl	equ	0xFF6
 16537                           tablat	equ	0xFF5
 16538                           prodh	equ	0xFF4
 16539                           prodl	equ	0xFF3
 16540                           intcon	equ	0xFF2
 16541                           intcon2	equ	0xFF1
 16542                           intcon3	equ	0xFF0
 16543                           indf0	equ	0xFEF
 16544                           postinc0	equ	0xFEE
 16545                           fsr0h	equ	0xFEA
 16546                           fsr0l	equ	0xFE9
 16547                           wreg	equ	0xFE8
 16548                           indf1	equ	0xFE7
 16549                           postinc1	equ	0xFE6
 16550                           postdec1	equ	0xFE5
 16551                           plusw1	equ	0xFE3
 16552                           fsr1h	equ	0xFE2
 16553                           fsr1l	equ	0xFE1
 16554                           indf2	equ	0xFDF
 16555                           postinc2	equ	0xFDE
 16556                           postdec2	equ	0xFDD
 16557                           plusw2	equ	0xFDB
 16558                           fsr2h	equ	0xFDA
 16559                           fsr2l	equ	0xFD9
 16560                           status	equ	0xFD8
 16561                           
 16562 ;; *************** function ___lldiv *****************
 16563 ;; Defined at:
 16564 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 16565 ;; Parameters:    Size  Location     Type
 16566 ;;  dividend        4    0[BANK0 ] unsigned long 
 16567 ;;  divisor         4    4[BANK0 ] unsigned long 
 16568 ;; Auto vars:     Size  Location     Type
 16569 ;;  quotient        4    8[BANK0 ] unsigned long 
 16570 ;;  counter         1   12[BANK0 ] unsigned char 
 16571 ;; Return value:  Size  Location     Type
 16572 ;;                  4    0[BANK0 ] unsigned long 
 16573 ;; Registers used:
 16574 ;;		wreg, status,2, status,0
 16575 ;; Tracked objects:
 16576 ;;		On entry : 0/0
 16577 ;;		On exit  : 0/0
 16578 ;;		Unchanged: 0/0
 16579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16580 ;;      Params:         0       8       0       0       0       0       0       0       0
 16581 ;;      Locals:         0       5       0       0       0       0       0       0       0
 16582 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16583 ;;      Totals:         0      13       0       0       0       0       0       0       0
 16584 ;;Total ram usage:       13 bytes
 16585 ;; Hardware stack levels used:    1
 16586 ;; Hardware stack levels required when called:    3
 16587 ;; This function calls:
 16588 ;;		Nothing
 16589 ;; This function is called by:
 16590 ;;		_auto_mount
 16591 ;;		_f_lseek
 16592 ;;		_fprintf
 16593 ;; This function uses a non-reentrant model
 16594 ;;
 16595                           
 16596                           	psect	text57
 16597  0045D6                     __ptext57:
 16598                           	opt stack 0
 16599  0045D6                     ___lldiv:
 16600                           	opt stack 23
 16601                           
 16602                           ; BSR set to: 0
 16603                           ;incstack = 0
 16604  0045D6  0E00               	movlw	0
 16605  0045D8  0100               	movlb	0	; () banked
 16606  0045DA  6F68               	movwf	___lldiv@quotient& (0+255),b
 16607  0045DC  0E00               	movlw	0
 16608  0045DE  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 16609  0045E0  0E00               	movlw	0
 16610  0045E2  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 16611  0045E4  0E00               	movlw	0
 16612  0045E6  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 16613                           
 16614                           ; BSR set to: 0
 16615  0045E8  5164               	movf	___lldiv@divisor& (0+255),w,b
 16616  0045EA  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 16617  0045EC  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 16618  0045EE  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 16619  0045F0  B4D8               	btfsc	status,2,c
 16620  0045F2  D02A               	goto	l1805
 16621                           
 16622                           ; BSR set to: 0
 16623  0045F4  0E01               	movlw	1
 16624  0045F6  6F6C               	movwf	___lldiv@counter& (0+255),b
 16625  0045F8  D006               	goto	l1800
 16626  0045FA                     
 16627                           ; BSR set to: 0
 16628                           
 16629                           ; BSR set to: 0
 16630  0045FA  90D8               	bcf	status,0,c
 16631  0045FC  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 16632  0045FE  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 16633  004600  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 16634  004602  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 16635  004604  2B6C               	incf	___lldiv@counter& (0+255),f,b
 16636  004606                     l1800:
 16637                           
 16638                           ; BSR set to: 0
 16639                           
 16640                           ; BSR set to: 0
 16641  004606  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 16642  004608  D7F8               	goto	l1801
 16643  00460A                     u12710:
 16644                           
 16645                           ; BSR set to: 0
 16646                           
 16647                           ; BSR set to: 0
 16648                           
 16649                           ; BSR set to: 0
 16650  00460A  90D8               	bcf	status,0,c
 16651  00460C  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 16652  00460E  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 16653  004610  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 16654  004612  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 16655                           
 16656                           ; BSR set to: 0
 16657  004614  5164               	movf	___lldiv@divisor& (0+255),w,b
 16658  004616  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 16659  004618  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16660  00461A  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 16661  00461C  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16662  00461E  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 16663  004620  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16664  004622  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 16665  004624  A0D8               	btfss	status,0,c
 16666  004626  D009               	goto	l1804
 16667                           
 16668                           ; BSR set to: 0
 16669  004628  5164               	movf	___lldiv@divisor& (0+255),w,b
 16670  00462A  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 16671  00462C  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16672  00462E  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 16673  004630  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16674  004632  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 16675  004634  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16676  004636  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 16677                           
 16678                           ; BSR set to: 0
 16679  004638  8168               	bsf	___lldiv@quotient& (0+255),0,b
 16680  00463A                     l1804:
 16681                           
 16682                           ; BSR set to: 0
 16683                           
 16684                           ; BSR set to: 0
 16685  00463A  90D8               	bcf	status,0,c
 16686  00463C  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 16687  00463E  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 16688  004640  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 16689  004642  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 16690                           
 16691                           ; BSR set to: 0
 16692  004644  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 16693  004646  D7E1               	goto	u12710
 16694  004648                     l1805:
 16695                           
 16696                           ; BSR set to: 0
 16697                           
 16698                           ; BSR set to: 0
 16699  004648  C068  F060         	movff	___lldiv@quotient,?___lldiv
 16700  00464C  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 16701  004650  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 16702  004654  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 16703                           
 16704                           ; BSR set to: 0
 16705  004658  0012               	return		;funcret
 16706  00465A                     __end_of___lldiv:
 16707                           	opt stack 0
 16708                           tosu	equ	0xFFF
 16709                           tosh	equ	0xFFE
 16710                           tosl	equ	0xFFD
 16711                           pclath	equ	0xFFA
 16712                           tblptru	equ	0xFF8
 16713                           tblptrh	equ	0xFF7
 16714                           tblptrl	equ	0xFF6
 16715                           tablat	equ	0xFF5
 16716                           prodh	equ	0xFF4
 16717                           prodl	equ	0xFF3
 16718                           intcon	equ	0xFF2
 16719                           intcon2	equ	0xFF1
 16720                           intcon3	equ	0xFF0
 16721                           indf0	equ	0xFEF
 16722                           postinc0	equ	0xFEE
 16723                           fsr0h	equ	0xFEA
 16724                           fsr0l	equ	0xFE9
 16725                           wreg	equ	0xFE8
 16726                           indf1	equ	0xFE7
 16727                           postinc1	equ	0xFE6
 16728                           postdec1	equ	0xFE5
 16729                           plusw1	equ	0xFE3
 16730                           fsr1h	equ	0xFE2
 16731                           fsr1l	equ	0xFE1
 16732                           indf2	equ	0xFDF
 16733                           postinc2	equ	0xFDE
 16734                           postdec2	equ	0xFDD
 16735                           plusw2	equ	0xFDB
 16736                           fsr2h	equ	0xFDA
 16737                           fsr2l	equ	0xFD9
 16738                           status	equ	0xFD8
 16739                           
 16740 ;; *************** function _f_close *****************
 16741 ;; Defined at:
 16742 ;;		line 1108 in file "bibliotecas/tff.c"
 16743 ;; Parameters:    Size  Location     Type
 16744 ;;  fp              2   75[BANK0 ] PTR struct _FIL
 16745 ;;		 -> fil(28), 
 16746 ;; Auto vars:     Size  Location     Type
 16747 ;;  res             1   77[BANK0 ] enum E155
 16748 ;; Return value:  Size  Location     Type
 16749 ;;                  1    wreg      enum E3974
 16750 ;; Registers used:
 16751 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16752 ;; Tracked objects:
 16753 ;;		On entry : 0/0
 16754 ;;		On exit  : 0/0
 16755 ;;		Unchanged: 0/0
 16756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16757 ;;      Params:         0       2       0       0       0       0       0       0       0
 16758 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16759 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16760 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16761 ;;Total ram usage:        3 bytes
 16762 ;; Hardware stack levels used:    1
 16763 ;; Hardware stack levels required when called:   11
 16764 ;; This function calls:
 16765 ;;		_f_sync
 16766 ;; This function is called by:
 16767 ;;		_escrita_sdcard
 16768 ;;		_sdcard_init
 16769 ;;		_leitura_sdcard
 16770 ;; This function uses a non-reentrant model
 16771 ;;
 16772                           
 16773                           	psect	text58
 16774  004E1A                     __ptext58:
 16775                           	opt stack 0
 16776  004E1A                     _f_close:
 16777                           	opt stack 16
 16778                           
 16779                           ;tff.c: 1112: FRESULT res;
 16780                           ;tff.c: 1116: res = f_sync(fp);
 16781                           
 16782                           ; BSR set to: 0
 16783                           ;incstack = 0
 16784  004E1A  C0AB  F0A2         	movff	f_close@fp,f_sync@fp
 16785  004E1E  C0AC  F0A3         	movff	f_close@fp+1,f_sync@fp+1
 16786  004E22  EC1B  F01D         	call	_f_sync	;wreg free
 16787  004E26  0100               	movlb	0	; () banked
 16788  004E28  6FAD               	movwf	f_close@res& (0+255),b
 16789                           
 16790                           ; BSR set to: 0
 16791                           ;tff.c: 1120: if (res == FR_OK) fp->fs = (0);
 16792  004E2A  51AD               	movf	f_close@res& (0+255),w,b
 16793  004E2C  A4D8               	btfss	status,2,c
 16794  004E2E  0012               	return	
 16795                           
 16796                           ; BSR set to: 0
 16797  004E30  EE20 F004          	lfsr	2,4
 16798  004E34  51AB               	movf	f_close@fp& (0+255),w,b
 16799  004E36  26D9               	addwf	fsr2l,f,c
 16800  004E38  51AC               	movf	(f_close@fp+1)& (0+255),w,b
 16801  004E3A  22DA               	addwfc	fsr2h,f,c
 16802  004E3C  0E00               	movlw	0
 16803  004E3E  6EDE               	movwf	postinc2,c
 16804  004E40  0E00               	movlw	0
 16805  004E42  6EDD               	movwf	postdec2,c
 16806                           
 16807                           ; BSR set to: 0
 16808  004E44  0012               	return	
 16809  004E46                     __end_of_f_close:
 16810                           	opt stack 0
 16811                           tosu	equ	0xFFF
 16812                           tosh	equ	0xFFE
 16813                           tosl	equ	0xFFD
 16814                           pclath	equ	0xFFA
 16815                           tblptru	equ	0xFF8
 16816                           tblptrh	equ	0xFF7
 16817                           tblptrl	equ	0xFF6
 16818                           tablat	equ	0xFF5
 16819                           prodh	equ	0xFF4
 16820                           prodl	equ	0xFF3
 16821                           intcon	equ	0xFF2
 16822                           intcon2	equ	0xFF1
 16823                           intcon3	equ	0xFF0
 16824                           indf0	equ	0xFEF
 16825                           postinc0	equ	0xFEE
 16826                           fsr0h	equ	0xFEA
 16827                           fsr0l	equ	0xFE9
 16828                           wreg	equ	0xFE8
 16829                           indf1	equ	0xFE7
 16830                           postinc1	equ	0xFE6
 16831                           postdec1	equ	0xFE5
 16832                           plusw1	equ	0xFE3
 16833                           fsr1h	equ	0xFE2
 16834                           fsr1l	equ	0xFE1
 16835                           indf2	equ	0xFDF
 16836                           postinc2	equ	0xFDE
 16837                           postdec2	equ	0xFDD
 16838                           plusw2	equ	0xFDB
 16839                           fsr2h	equ	0xFDA
 16840                           fsr2l	equ	0xFD9
 16841                           status	equ	0xFD8
 16842                           
 16843 ;; *************** function _f_sync *****************
 16844 ;; Defined at:
 16845 ;;		line 1069 in file "bibliotecas/tff.c"
 16846 ;; Parameters:    Size  Location     Type
 16847 ;;  fp              2   66[BANK0 ] PTR struct _FIL
 16848 ;;		 -> fil(28), 
 16849 ;; Auto vars:     Size  Location     Type
 16850 ;;  tim             4   68[BANK0 ] unsigned long 
 16851 ;;  dir             2   73[BANK0 ] PTR unsigned char 
 16852 ;;		 -> NULL(0), fs(544), 
 16853 ;;  res             1   72[BANK0 ] enum E155
 16854 ;; Return value:  Size  Location     Type
 16855 ;;                  1    wreg      enum E155
 16856 ;; Registers used:
 16857 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16858 ;; Tracked objects:
 16859 ;;		On entry : 0/0
 16860 ;;		On exit  : 0/0
 16861 ;;		Unchanged: 0/0
 16862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16863 ;;      Params:         0       2       0       0       0       0       0       0       0
 16864 ;;      Locals:         0       7       0       0       0       0       0       0       0
 16865 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16866 ;;      Totals:         0       9       0       0       0       0       0       0       0
 16867 ;;Total ram usage:        9 bytes
 16868 ;; Hardware stack levels used:    1
 16869 ;; Hardware stack levels required when called:   10
 16870 ;; This function calls:
 16871 ;;		_get_fattime
 16872 ;;		_move_window
 16873 ;;		_sync
 16874 ;;		_validate
 16875 ;; This function is called by:
 16876 ;;		_f_close
 16877 ;; This function uses a non-reentrant model
 16878 ;;
 16879                           
 16880                           	psect	text59
 16881  003A36                     __ptext59:
 16882                           	opt stack 0
 16883  003A36                     _f_sync:
 16884                           	opt stack 16
 16885                           
 16886                           ;tff.c: 1073: FRESULT res;
 16887                           ;tff.c: 1074: DWORD tim;
 16888                           ;tff.c: 1075: BYTE *dir;
 16889                           ;tff.c: 1078: res = validate(fp->fs, fp->id);
 16890                           
 16891                           ; BSR set to: 0
 16892                           ;incstack = 0
 16893  003A36  0100               	movlb	0	; () banked
 16894  003A38  EE20 F004          	lfsr	2,4
 16895  003A3C  51A2               	movf	f_sync@fp& (0+255),w,b
 16896  003A3E  26D9               	addwf	fsr2l,f,c
 16897  003A40  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16898  003A42  22DA               	addwfc	fsr2h,f,c
 16899  003A44  CFDE F066          	movff	postinc2,validate@fs
 16900  003A48  CFDD F067          	movff	postdec2,validate@fs+1
 16901  003A4C  C0A2  FFD9         	movff	f_sync@fp,fsr2l
 16902  003A50  C0A3  FFDA         	movff	f_sync@fp+1,fsr2h
 16903  003A54  CFDE F068          	movff	postinc2,validate@id
 16904  003A58  CFDD F069          	movff	postdec2,validate@id+1
 16905  003A5C  EC70  F025         	call	_validate	;wreg free
 16906  003A60  0100               	movlb	0	; () banked
 16907  003A62  6FA8               	movwf	f_sync@res& (0+255),b
 16908                           
 16909                           ; BSR set to: 0
 16910                           ;tff.c: 1079: if (res == FR_OK) {
 16911  003A64  51A8               	movf	f_sync@res& (0+255),w,b
 16912  003A66  A4D8               	btfss	status,2,c
 16913  003A68  D079               	goto	l1255
 16914                           
 16915                           ; BSR set to: 0
 16916                           ;tff.c: 1080: if (fp->flag & 0x20) {
 16917  003A6A  EE20 F002          	lfsr	2,2
 16918  003A6E  51A2               	movf	f_sync@fp& (0+255),w,b
 16919  003A70  26D9               	addwf	fsr2l,f,c
 16920  003A72  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16921  003A74  22DA               	addwfc	fsr2h,f,c
 16922  003A76  AADF               	btfss	indf2,5,c
 16923  003A78  D071               	goto	l1255
 16924                           
 16925                           ; BSR set to: 0
 16926                           ;tff.c: 1082: if (!move_window(fp->dir_sect))
 16927  003A7A  EE20 F016          	lfsr	2,22
 16928  003A7E  51A2               	movf	f_sync@fp& (0+255),w,b
 16929  003A80  26D9               	addwf	fsr2l,f,c
 16930  003A82  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16931  003A84  22DA               	addwfc	fsr2h,f,c
 16932  003A86  CFDE F08B          	movff	postinc2,move_window@sector
 16933  003A8A  CFDE F08C          	movff	postinc2,move_window@sector+1
 16934  003A8E  CFDE F08D          	movff	postinc2,move_window@sector+2
 16935  003A92  CFDE F08E          	movff	postinc2,move_window@sector+3
 16936  003A96  EC49  F018         	call	_move_window	;wreg free
 16937  003A9A  0900               	iorlw	0
 16938  003A9C  A4D8               	btfss	status,2,c
 16939  003A9E  D002               	goto	l1256
 16940                           
 16941                           ;tff.c: 1083: return FR_RW_ERROR;
 16942  003AA0  0E08               	movlw	8
 16943  003AA2  0012               	return	
 16944  003AA4                     l1256:
 16945                           
 16946                           ;tff.c: 1084: dir = fp->dir_ptr;
 16947  003AA4  0100               	movlb	0	; () banked
 16948  003AA6  EE20 F01A          	lfsr	2,26
 16949  003AAA  51A2               	movf	f_sync@fp& (0+255),w,b
 16950  003AAC  26D9               	addwf	fsr2l,f,c
 16951  003AAE  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16952  003AB0  22DA               	addwfc	fsr2h,f,c
 16953  003AB2  CFDE F0A9          	movff	postinc2,f_sync@dir
 16954  003AB6  CFDD F0AA          	movff	postdec2,f_sync@dir+1
 16955                           
 16956                           ;tff.c: 1085: dir[11] |= 0x20;
 16957  003ABA  EE20 F00B          	lfsr	2,11
 16958  003ABE  51A9               	movf	f_sync@dir& (0+255),w,b
 16959  003AC0  26D9               	addwf	fsr2l,f,c
 16960  003AC2  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 16961  003AC4  22DA               	addwfc	fsr2h,f,c
 16962  003AC6  0E00               	movlw	0
 16963  003AC8  8ADB               	bsf	plusw2,5,c
 16964                           
 16965                           ; BSR set to: 0
 16966                           ;tff.c: 1086: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 16967  003ACA  EE20 F00A          	lfsr	2,10
 16968  003ACE  51A2               	movf	f_sync@fp& (0+255),w,b
 16969  003AD0  26D9               	addwf	fsr2l,f,c
 16970  003AD2  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16971  003AD4  22DA               	addwfc	fsr2h,f,c
 16972  003AD6  EE10 F01C          	lfsr	1,28
 16973  003ADA  51A9               	movf	f_sync@dir& (0+255),w,b
 16974  003ADC  26E1               	addwf	fsr1l,f,c
 16975  003ADE  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 16976  003AE0  22E2               	addwfc	fsr1h,f,c
 16977  003AE2  CFDE FFE6          	movff	postinc2,postinc1
 16978  003AE6  CFDE FFE6          	movff	postinc2,postinc1
 16979  003AEA  CFDE FFE6          	movff	postinc2,postinc1
 16980  003AEE  CFDE FFE6          	movff	postinc2,postinc1
 16981                           
 16982                           ; BSR set to: 0
 16983                           ;tff.c: 1087: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 16984  003AF2  EE20 F00E          	lfsr	2,14
 16985  003AF6  51A2               	movf	f_sync@fp& (0+255),w,b
 16986  003AF8  26D9               	addwf	fsr2l,f,c
 16987  003AFA  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16988  003AFC  22DA               	addwfc	fsr2h,f,c
 16989  003AFE  EE10 F01A          	lfsr	1,26
 16990  003B02  51A9               	movf	f_sync@dir& (0+255),w,b
 16991  003B04  26E1               	addwf	fsr1l,f,c
 16992  003B06  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 16993  003B08  22E2               	addwfc	fsr1h,f,c
 16994  003B0A  CFDE FFE6          	movff	postinc2,postinc1
 16995  003B0E  CFDD FFE5          	movff	postdec2,postdec1
 16996                           
 16997                           ; BSR set to: 0
 16998                           ;tff.c: 1091: tim = get_fattime();
 16999  003B12  ECB0  F01D         	call	_get_fattime	;wreg free
 17000  003B16  C060  F0A4         	movff	?_get_fattime,f_sync@tim
 17001  003B1A  C061  F0A5         	movff	?_get_fattime+1,f_sync@tim+1
 17002  003B1E  C062  F0A6         	movff	?_get_fattime+2,f_sync@tim+2
 17003  003B22  C063  F0A7         	movff	?_get_fattime+3,f_sync@tim+3
 17004                           
 17005                           ;tff.c: 1092: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 17006  003B26  0100               	movlb	0	; () banked
 17007  003B28  EE20 F016          	lfsr	2,22
 17008  003B2C  51A9               	movf	f_sync@dir& (0+255),w,b
 17009  003B2E  26D9               	addwf	fsr2l,f,c
 17010  003B30  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 17011  003B32  22DA               	addwfc	fsr2h,f,c
 17012  003B34  C0A4  FFDE         	movff	f_sync@tim,postinc2
 17013  003B38  C0A5  FFDE         	movff	f_sync@tim+1,postinc2
 17014  003B3C  C0A6  FFDE         	movff	f_sync@tim+2,postinc2
 17015  003B40  C0A7  FFDE         	movff	f_sync@tim+3,postinc2
 17016                           
 17017                           ; BSR set to: 0
 17018                           ;tff.c: 1093: fp->flag &= (BYTE)~0x20;
 17019  003B44  EE20 F002          	lfsr	2,2
 17020  003B48  51A2               	movf	f_sync@fp& (0+255),w,b
 17021  003B4A  26D9               	addwf	fsr2l,f,c
 17022  003B4C  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 17023  003B4E  22DA               	addwfc	fsr2h,f,c
 17024  003B50  0EDF               	movlw	223
 17025  003B52  16DF               	andwf	indf2,f,c
 17026                           
 17027                           ; BSR set to: 0
 17028                           ;tff.c: 1094: res = sync();
 17029  003B54  EC73  F024         	call	_sync	;wreg free
 17030  003B58  0100               	movlb	0	; () banked
 17031  003B5A  6FA8               	movwf	f_sync@res& (0+255),b
 17032  003B5C                     l1255:
 17033                           
 17034                           ; BSR set to: 0
 17035                           ;tff.c: 1095: }
 17036                           ;tff.c: 1096: }
 17037                           ;tff.c: 1097: return res;
 17038                           
 17039                           ; BSR set to: 0
 17040                           
 17041                           ; BSR set to: 0
 17042  003B5C  51A8               	movf	f_sync@res& (0+255),w,b
 17043  003B5E  0012               	return	
 17044  003B60                     __end_of_f_sync:
 17045                           	opt stack 0
 17046                           tosu	equ	0xFFF
 17047                           tosh	equ	0xFFE
 17048                           tosl	equ	0xFFD
 17049                           pclath	equ	0xFFA
 17050                           tblptru	equ	0xFF8
 17051                           tblptrh	equ	0xFF7
 17052                           tblptrl	equ	0xFF6
 17053                           tablat	equ	0xFF5
 17054                           prodh	equ	0xFF4
 17055                           prodl	equ	0xFF3
 17056                           intcon	equ	0xFF2
 17057                           intcon2	equ	0xFF1
 17058                           intcon3	equ	0xFF0
 17059                           indf0	equ	0xFEF
 17060                           postinc0	equ	0xFEE
 17061                           fsr0h	equ	0xFEA
 17062                           fsr0l	equ	0xFE9
 17063                           wreg	equ	0xFE8
 17064                           indf1	equ	0xFE7
 17065                           postinc1	equ	0xFE6
 17066                           postdec1	equ	0xFE5
 17067                           plusw1	equ	0xFE3
 17068                           fsr1h	equ	0xFE2
 17069                           fsr1l	equ	0xFE1
 17070                           indf2	equ	0xFDF
 17071                           postinc2	equ	0xFDE
 17072                           postdec2	equ	0xFDD
 17073                           plusw2	equ	0xFDB
 17074                           fsr2h	equ	0xFDA
 17075                           fsr2l	equ	0xFD9
 17076                           status	equ	0xFD8
 17077                           
 17078 ;; *************** function _validate *****************
 17079 ;; Defined at:
 17080 ;;		line 766 in file "bibliotecas/tff.c"
 17081 ;; Parameters:    Size  Location     Type
 17082 ;;  fs              2    6[BANK0 ] PTR const struct _FATFS
 17083 ;;		 -> NULL(0), fs(544), 
 17084 ;;  id              2    8[BANK0 ] unsigned short 
 17085 ;; Auto vars:     Size  Location     Type
 17086 ;;		None
 17087 ;; Return value:  Size  Location     Type
 17088 ;;                  1    wreg      enum E155
 17089 ;; Registers used:
 17090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17091 ;; Tracked objects:
 17092 ;;		On entry : 0/0
 17093 ;;		On exit  : 0/0
 17094 ;;		Unchanged: 0/0
 17095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17096 ;;      Params:         0       4       0       0       0       0       0       0       0
 17097 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17098 ;;      Temps:          0       2       0       0       0       0       0       0       0
 17099 ;;      Totals:         0       6       0       0       0       0       0       0       0
 17100 ;;Total ram usage:        6 bytes
 17101 ;; Hardware stack levels used:    1
 17102 ;; Hardware stack levels required when called:    5
 17103 ;; This function calls:
 17104 ;;		_disk_status
 17105 ;; This function is called by:
 17106 ;;		_f_write
 17107 ;;		_f_sync
 17108 ;;		_f_lseek
 17109 ;;		_f_read
 17110 ;;		_f_readdir
 17111 ;; This function uses a non-reentrant model
 17112 ;;
 17113                           
 17114                           	psect	text60
 17115  004AE0                     __ptext60:
 17116                           	opt stack 0
 17117  004AE0                     _validate:
 17118                           	opt stack 18
 17119                           
 17120                           ;tff.c: 771: if (!fs || !fs->fs_type || fs->id != id)
 17121                           
 17122                           ;incstack = 0
 17123  004AE0  0100               	movlb	0	; () banked
 17124  004AE2  5166               	movf	validate@fs& (0+255),w,b
 17125  004AE4  1167               	iorwf	(validate@fs+1)& (0+255),w,b
 17126  004AE6  B4D8               	btfsc	status,2,c
 17127  004AE8  D014               	goto	u11610
 17128                           
 17129                           ; BSR set to: 0
 17130  004AEA  EE20 F01C          	lfsr	2,28
 17131  004AEE  5166               	movf	validate@fs& (0+255),w,b
 17132  004AF0  26D9               	addwf	fsr2l,f,c
 17133  004AF2  5167               	movf	(validate@fs+1)& (0+255),w,b
 17134  004AF4  22DA               	addwfc	fsr2h,f,c
 17135  004AF6  50DF               	movf	indf2,w,c
 17136  004AF8  B4D8               	btfsc	status,2,c
 17137  004AFA  D00B               	goto	u11610
 17138                           
 17139                           ; BSR set to: 0
 17140  004AFC  C066  FFD9         	movff	validate@fs,fsr2l
 17141  004B00  C067  FFDA         	movff	validate@fs+1,fsr2h
 17142  004B04  5168               	movf	validate@id& (0+255),w,b
 17143  004B06  18DE               	xorwf	postinc2,w,c
 17144  004B08  E104               	bnz	l9510
 17145  004B0A  5169               	movf	(validate@id+1)& (0+255),w,b
 17146  004B0C  18DE               	xorwf	postinc2,w,c
 17147  004B0E  B4D8               	btfsc	status,2,c
 17148  004B10  D002               	goto	l1159
 17149  004B12                     u11610:
 17150  004B12                     l9510:
 17151                           
 17152                           ; BSR set to: 0
 17153                           ;tff.c: 772: return FR_INVALID_OBJECT;
 17154  004B12  0E0C               	movlw	12
 17155                           
 17156                           ; BSR set to: 0
 17157  004B14  0012               	return	
 17158  004B16                     l1159:
 17159                           
 17160                           ; BSR set to: 0
 17161                           ;tff.c: 773: if (disk_status(0) & 0x01)
 17162                           
 17163                           ; BSR set to: 0
 17164  004B16  0E00               	movlw	0
 17165  004B18  ECDF  F025         	call	_disk_status
 17166  004B1C  0100               	movlb	0	; () banked
 17167  004B1E  6F6A               	movwf	??_validate& (0+255),b
 17168  004B20  A16A               	btfss	??_validate& (0+255),0,b
 17169  004B22  D002               	goto	l1163
 17170                           
 17171                           ; BSR set to: 0
 17172                           ;tff.c: 774: return FR_NOT_READY;
 17173  004B24  0E01               	movlw	1
 17174                           
 17175                           ; BSR set to: 0
 17176  004B26  0012               	return	
 17177  004B28                     l1163:
 17178                           
 17179                           ; BSR set to: 0
 17180                           ;tff.c: 776: return FR_OK;
 17181                           
 17182                           ; BSR set to: 0
 17183  004B28  0E00               	movlw	0
 17184  004B2A  0012               	return	
 17185  004B2C                     __end_of_validate:
 17186                           	opt stack 0
 17187                           tosu	equ	0xFFF
 17188                           tosh	equ	0xFFE
 17189                           tosl	equ	0xFFD
 17190                           pclath	equ	0xFFA
 17191                           tblptru	equ	0xFF8
 17192                           tblptrh	equ	0xFF7
 17193                           tblptrl	equ	0xFF6
 17194                           tablat	equ	0xFF5
 17195                           prodh	equ	0xFF4
 17196                           prodl	equ	0xFF3
 17197                           intcon	equ	0xFF2
 17198                           intcon2	equ	0xFF1
 17199                           intcon3	equ	0xFF0
 17200                           indf0	equ	0xFEF
 17201                           postinc0	equ	0xFEE
 17202                           fsr0h	equ	0xFEA
 17203                           fsr0l	equ	0xFE9
 17204                           wreg	equ	0xFE8
 17205                           indf1	equ	0xFE7
 17206                           postinc1	equ	0xFE6
 17207                           postdec1	equ	0xFE5
 17208                           plusw1	equ	0xFE3
 17209                           fsr1h	equ	0xFE2
 17210                           fsr1l	equ	0xFE1
 17211                           indf2	equ	0xFDF
 17212                           postinc2	equ	0xFDE
 17213                           postdec2	equ	0xFDD
 17214                           plusw2	equ	0xFDB
 17215                           fsr2h	equ	0xFDA
 17216                           fsr2l	equ	0xFD9
 17217                           status	equ	0xFD8
 17218                           
 17219 ;; *************** function _disk_status *****************
 17220 ;; Defined at:
 17221 ;;		line 27 in file "bibliotecas/diskio.c"
 17222 ;; Parameters:    Size  Location     Type
 17223 ;;  pdrv            1    wreg     unsigned char 
 17224 ;; Auto vars:     Size  Location     Type
 17225 ;;  pdrv            1    4[BANK0 ] unsigned char 
 17226 ;;  result          2    2[BANK0 ] int 
 17227 ;;  stat            1    5[BANK0 ] unsigned char 
 17228 ;; Return value:  Size  Location     Type
 17229 ;;                  1    wreg      unsigned char 
 17230 ;; Registers used:
 17231 ;;		wreg, status,2, status,0, cstack
 17232 ;; Tracked objects:
 17233 ;;		On entry : 0/0
 17234 ;;		On exit  : 0/0
 17235 ;;		Unchanged: 0/0
 17236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17237 ;;      Params:         0       0       0       0       0       0       0       0       0
 17238 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17239 ;;      Temps:          1       0       0       0       0       0       0       0       0
 17240 ;;      Totals:         1       4       0       0       0       0       0       0       0
 17241 ;;Total ram usage:        5 bytes
 17242 ;; Hardware stack levels used:    1
 17243 ;; Hardware stack levels required when called:    4
 17244 ;; This function calls:
 17245 ;;		_sdc_disk_status
 17246 ;; This function is called by:
 17247 ;;		_auto_mount
 17248 ;;		_validate
 17249 ;; This function uses a non-reentrant model
 17250 ;;
 17251                           
 17252                           	psect	text61
 17253  004BBE                     __ptext61:
 17254                           	opt stack 0
 17255  004BBE                     _disk_status:
 17256                           	opt stack 18
 17257                           
 17258                           ; BSR set to: 0
 17259                           ;incstack = 0
 17260                           ;disk_status@pdrv stored from wreg
 17261  004BBE  0100               	movlb	0	; () banked
 17262  004BC0  6F64               	movwf	disk_status@pdrv& (0+255),b
 17263                           
 17264                           ;diskio.c: 31: DSTATUS stat;
 17265                           ;diskio.c: 32: int result;
 17266                           ;diskio.c: 34: switch (pdrv) {
 17267  004BC2  D014               	goto	l441
 17268  004BC4                     
 17269                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 17270  004BC4  0100               	movlb	0	; () banked
 17271  004BC6  5164               	movf	disk_status@pdrv& (0+255),w,b
 17272  004BC8  ECB1  F027         	call	_sdc_disk_status
 17273  004BCC  0100               	movlb	0	; () banked
 17274  004BCE  6F65               	movwf	disk_status@stat& (0+255),b
 17275                           
 17276                           ; BSR set to: 0
 17277                           ;diskio.c: 39: return stat;
 17278  004BD0  5165               	movf	disk_status@stat& (0+255),w,b
 17279                           
 17280                           ; BSR set to: 0
 17281  004BD2  0012               	return	
 17282  004BD4                     
 17283                           ; BSR set to: 0
 17284                           ;diskio.c: 42: result = sdc_disk_status(pdrv);
 17285                           
 17286                           ; BSR set to: 0
 17287  004BD4  5164               	movf	disk_status@pdrv& (0+255),w,b
 17288  004BD6  ECB1  F027         	call	_sdc_disk_status
 17289  004BDA  6E21               	movwf	??_disk_status& (0+255),c
 17290  004BDC  5021               	movf	??_disk_status,w,c
 17291  004BDE  0100               	movlb	0	; () banked
 17292  004BE0  6F62               	movwf	disk_status@result& (0+255),b
 17293  004BE2  6B63               	clrf	(disk_status@result+1)& (0+255),b
 17294                           
 17295                           ; BSR set to: 0
 17296                           ;diskio.c: 44: return stat;
 17297  004BE4  5165               	movf	disk_status@stat& (0+255),w,b
 17298                           
 17299                           ; BSR set to: 0
 17300  004BE6  0012               	return	
 17301  004BE8                     
 17302                           ; BSR set to: 0
 17303                           ;diskio.c: 48: return stat;
 17304                           
 17305                           ; BSR set to: 0
 17306  004BE8  5165               	movf	disk_status@stat& (0+255),w,b
 17307                           
 17308                           ; BSR set to: 0
 17309  004BEA  0012               	return	
 17310  004BEC                     l441:
 17311                           
 17312                           ; BSR set to: 0
 17313  004BEC  0100               	movlb	0	; () banked
 17314  004BEE  5164               	movf	disk_status@pdrv& (0+255),w,b
 17315                           
 17316                           ; Switch size 1, requested type "space"
 17317                           ; Number of cases is 3, Range of values is 0 to 2
 17318                           ; switch strategies available:
 17319                           ; Name         Instructions Cycles
 17320                           ; simple_byte           10     6 (average)
 17321                           ;	Chosen strategy is simple_byte
 17322  004BF0  0A00               	xorlw	0	; case 0
 17323  004BF2  B4D8               	btfsc	status,2,c
 17324  004BF4  D7E7               	goto	l442
 17325  004BF6  0A01               	xorlw	1	; case 1
 17326  004BF8  B4D8               	btfsc	status,2,c
 17327  004BFA  D7EC               	goto	l444
 17328  004BFC  0A03               	xorlw	3	; case 2
 17329  004BFE  B4D8               	btfsc	status,2,c
 17330  004C00  D7F3               	goto	l445
 17331                           
 17332                           ; BSR set to: 0
 17333                           ;diskio.c: 50: return 0x01;
 17334                           
 17335                           ; BSR set to: 0
 17336  004C02  0E01               	movlw	1
 17337  004C04  0012               	return	
 17338  004C06                     __end_of_disk_status:
 17339                           	opt stack 0
 17340                           tosu	equ	0xFFF
 17341                           tosh	equ	0xFFE
 17342                           tosl	equ	0xFFD
 17343                           pclath	equ	0xFFA
 17344                           tblptru	equ	0xFF8
 17345                           tblptrh	equ	0xFF7
 17346                           tblptrl	equ	0xFF6
 17347                           tablat	equ	0xFF5
 17348                           prodh	equ	0xFF4
 17349                           prodl	equ	0xFF3
 17350                           intcon	equ	0xFF2
 17351                           intcon2	equ	0xFF1
 17352                           intcon3	equ	0xFF0
 17353                           indf0	equ	0xFEF
 17354                           postinc0	equ	0xFEE
 17355                           fsr0h	equ	0xFEA
 17356                           fsr0l	equ	0xFE9
 17357                           wreg	equ	0xFE8
 17358                           indf1	equ	0xFE7
 17359                           postinc1	equ	0xFE6
 17360                           postdec1	equ	0xFE5
 17361                           plusw1	equ	0xFE3
 17362                           fsr1h	equ	0xFE2
 17363                           fsr1l	equ	0xFE1
 17364                           indf2	equ	0xFDF
 17365                           postinc2	equ	0xFDE
 17366                           postdec2	equ	0xFDD
 17367                           plusw2	equ	0xFDB
 17368                           fsr2h	equ	0xFDA
 17369                           fsr2l	equ	0xFD9
 17370                           status	equ	0xFD8
 17371                           
 17372 ;; *************** function _sdc_disk_status *****************
 17373 ;; Defined at:
 17374 ;;		line 588 in file "bibliotecas/diskio.c"
 17375 ;; Parameters:    Size  Location     Type
 17376 ;;  pdrv            1    wreg     unsigned char 
 17377 ;; Auto vars:     Size  Location     Type
 17378 ;;  pdrv            1    1[BANK0 ] unsigned char 
 17379 ;;  stat            1    0[BANK0 ] unsigned char 
 17380 ;;  cont            1    0        unsigned char 
 17381 ;;  buff            1    0        unsigned char 
 17382 ;; Return value:  Size  Location     Type
 17383 ;;                  1    wreg      unsigned char 
 17384 ;; Registers used:
 17385 ;;		wreg, status,2
 17386 ;; Tracked objects:
 17387 ;;		On entry : 0/0
 17388 ;;		On exit  : 0/0
 17389 ;;		Unchanged: 0/0
 17390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17391 ;;      Params:         0       0       0       0       0       0       0       0       0
 17392 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17393 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17394 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17395 ;;Total ram usage:        2 bytes
 17396 ;; Hardware stack levels used:    1
 17397 ;; Hardware stack levels required when called:    3
 17398 ;; This function calls:
 17399 ;;		Nothing
 17400 ;; This function is called by:
 17401 ;;		_disk_status
 17402 ;; This function uses a non-reentrant model
 17403 ;;
 17404                           
 17405                           	psect	text62
 17406  004F62                     __ptext62:
 17407                           	opt stack 0
 17408  004F62                     _sdc_disk_status:
 17409                           	opt stack 18
 17410                           
 17411                           ; BSR set to: 0
 17412                           ;incstack = 0
 17413                           ;sdc_disk_status@pdrv stored from wreg
 17414  004F62  0100               	movlb	0	; () banked
 17415  004F64  6F61               	movwf	sdc_disk_status@pdrv& (0+255),b
 17416                           
 17417                           ;diskio.c: 590: DSTATUS stat = 0;
 17418  004F66  0E00               	movlw	0
 17419  004F68  0100               	movlb	0	; () banked
 17420  004F6A  6F60               	movwf	sdc_disk_status@stat& (0+255),b
 17421                           
 17422                           ; BSR set to: 0
 17423                           ;diskio.c: 591: unsigned char buff, cont;
 17424                           ;diskio.c: 593: if (pdrv != 0) return 0x01;
 17425  004F6C  5161               	movf	sdc_disk_status@pdrv& (0+255),w,b
 17426  004F6E  B4D8               	btfsc	status,2,c
 17427  004F70  D002               	goto	l567
 17428                           
 17429                           ; BSR set to: 0
 17430  004F72  0E01               	movlw	1
 17431                           
 17432                           ; BSR set to: 0
 17433  004F74  0012               	return	
 17434  004F76                     l567:
 17435                           
 17436                           ; BSR set to: 0
 17437                           ;diskio.c: 595: return FR_OK;
 17438                           
 17439                           ; BSR set to: 0
 17440  004F76  0E00               	movlw	0
 17441  004F78  0012               	return	
 17442  004F7A                     __end_of_sdc_disk_status:
 17443                           	opt stack 0
 17444                           tosu	equ	0xFFF
 17445                           tosh	equ	0xFFE
 17446                           tosl	equ	0xFFD
 17447                           pclath	equ	0xFFA
 17448                           tblptru	equ	0xFF8
 17449                           tblptrh	equ	0xFF7
 17450                           tblptrl	equ	0xFF6
 17451                           tablat	equ	0xFF5
 17452                           prodh	equ	0xFF4
 17453                           prodl	equ	0xFF3
 17454                           intcon	equ	0xFF2
 17455                           intcon2	equ	0xFF1
 17456                           intcon3	equ	0xFF0
 17457                           indf0	equ	0xFEF
 17458                           postinc0	equ	0xFEE
 17459                           fsr0h	equ	0xFEA
 17460                           fsr0l	equ	0xFE9
 17461                           wreg	equ	0xFE8
 17462                           indf1	equ	0xFE7
 17463                           postinc1	equ	0xFE6
 17464                           postdec1	equ	0xFE5
 17465                           plusw1	equ	0xFE3
 17466                           fsr1h	equ	0xFE2
 17467                           fsr1l	equ	0xFE1
 17468                           indf2	equ	0xFDF
 17469                           postinc2	equ	0xFDE
 17470                           postdec2	equ	0xFDD
 17471                           plusw2	equ	0xFDB
 17472                           fsr2h	equ	0xFDA
 17473                           fsr2l	equ	0xFD9
 17474                           status	equ	0xFD8
 17475                           
 17476 ;; *************** function _sync *****************
 17477 ;; Defined at:
 17478 ;;		line 118 in file "bibliotecas/tff.c"
 17479 ;; Parameters:    Size  Location     Type
 17480 ;;		None
 17481 ;; Auto vars:     Size  Location     Type
 17482 ;;  fs              2   64[BANK0 ] PTR struct _FATFS
 17483 ;;		 -> NULL(0), fs(544), 
 17484 ;; Return value:  Size  Location     Type
 17485 ;;                  1    wreg      enum E155
 17486 ;; Registers used:
 17487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17488 ;; Tracked objects:
 17489 ;;		On entry : 0/0
 17490 ;;		On exit  : 0/0
 17491 ;;		Unchanged: 0/0
 17492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17493 ;;      Params:         0       0       0       0       0       0       0       0       0
 17494 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17495 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17496 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17497 ;;Total ram usage:        2 bytes
 17498 ;; Hardware stack levels used:    1
 17499 ;; Hardware stack levels required when called:    9
 17500 ;; This function calls:
 17501 ;;		_disk_ioctl
 17502 ;;		_move_window
 17503 ;; This function is called by:
 17504 ;;		_f_sync
 17505 ;; This function uses a non-reentrant model
 17506 ;;
 17507                           
 17508                           	psect	text63
 17509  0048E6                     __ptext63:
 17510                           	opt stack 0
 17511  0048E6                     _sync:
 17512                           	opt stack 16
 17513                           
 17514                           ;tff.c: 120: FATFS *fs = FatFs;
 17515                           
 17516                           ; BSR set to: 0
 17517                           ;incstack = 0
 17518  0048E6  C0FD  F0A0         	movff	_FatFs,sync@fs
 17519  0048EA  C0FE  F0A1         	movff	_FatFs+1,sync@fs+1
 17520                           
 17521                           ;tff.c: 123: fs->winflag = 1;
 17522  0048EE  0100               	movlb	0	; () banked
 17523  0048F0  EE20 F01F          	lfsr	2,31
 17524  0048F4  51A0               	movf	sync@fs& (0+255),w,b
 17525  0048F6  26D9               	addwf	fsr2l,f,c
 17526  0048F8  51A1               	movf	(sync@fs+1)& (0+255),w,b
 17527  0048FA  22DA               	addwfc	fsr2h,f,c
 17528  0048FC  0E01               	movlw	1
 17529  0048FE  6EDF               	movwf	indf2,c
 17530                           
 17531                           ; BSR set to: 0
 17532                           ;tff.c: 124: if (!move_window(0)) return FR_RW_ERROR;
 17533  004900  0E00               	movlw	0
 17534  004902  6F8B               	movwf	move_window@sector& (0+255),b
 17535  004904  0E00               	movlw	0
 17536  004906  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 17537  004908  0E00               	movlw	0
 17538  00490A  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 17539  00490C  0E00               	movlw	0
 17540  00490E  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 17541  004910  EC49  F018         	call	_move_window	;wreg free
 17542  004914  0900               	iorlw	0
 17543  004916  A4D8               	btfss	status,2,c
 17544  004918  D002               	goto	l938
 17545  00491A  0E08               	movlw	8
 17546  00491C  0012               	return	
 17547  00491E                     l938:
 17548                           
 17549                           ;tff.c: 140: if (disk_ioctl(0, 0, (0)) != RES_OK)
 17550  00491E  0E00               	movlw	0
 17551  004920  0100               	movlb	0	; () banked
 17552  004922  6F60               	movwf	disk_ioctl@cmd& (0+255),b
 17553  004924  0E00               	movlw	0
 17554  004926  6F61               	movwf	disk_ioctl@buff& (0+255),b
 17555  004928  0E00               	movlw	0
 17556  00492A  6F62               	movwf	(disk_ioctl@buff+1)& (0+255),b
 17557  00492C  0E00               	movlw	0
 17558  00492E  EC23  F027         	call	_disk_ioctl
 17559  004932  0900               	iorlw	0
 17560  004934  B4D8               	btfsc	status,2,c
 17561  004936  D002               	goto	l940
 17562                           
 17563                           ;tff.c: 141: return FR_RW_ERROR;
 17564  004938  0E08               	movlw	8
 17565  00493A  0012               	return	
 17566  00493C                     l940:
 17567                           
 17568                           ;tff.c: 142: return FR_OK;
 17569  00493C  0E00               	movlw	0
 17570  00493E  0012               	return	
 17571  004940                     __end_of_sync:
 17572                           	opt stack 0
 17573                           tosu	equ	0xFFF
 17574                           tosh	equ	0xFFE
 17575                           tosl	equ	0xFFD
 17576                           pclath	equ	0xFFA
 17577                           tblptru	equ	0xFF8
 17578                           tblptrh	equ	0xFF7
 17579                           tblptrl	equ	0xFF6
 17580                           tablat	equ	0xFF5
 17581                           prodh	equ	0xFF4
 17582                           prodl	equ	0xFF3
 17583                           intcon	equ	0xFF2
 17584                           intcon2	equ	0xFF1
 17585                           intcon3	equ	0xFF0
 17586                           indf0	equ	0xFEF
 17587                           postinc0	equ	0xFEE
 17588                           fsr0h	equ	0xFEA
 17589                           fsr0l	equ	0xFE9
 17590                           wreg	equ	0xFE8
 17591                           indf1	equ	0xFE7
 17592                           postinc1	equ	0xFE6
 17593                           postdec1	equ	0xFE5
 17594                           plusw1	equ	0xFE3
 17595                           fsr1h	equ	0xFE2
 17596                           fsr1l	equ	0xFE1
 17597                           indf2	equ	0xFDF
 17598                           postinc2	equ	0xFDE
 17599                           postdec2	equ	0xFDD
 17600                           plusw2	equ	0xFDB
 17601                           fsr2h	equ	0xFDA
 17602                           fsr2l	equ	0xFD9
 17603                           status	equ	0xFD8
 17604                           
 17605 ;; *************** function _move_window *****************
 17606 ;; Defined at:
 17607 ;;		line 76 in file "bibliotecas/tff.c"
 17608 ;; Parameters:    Size  Location     Type
 17609 ;;  sector          4   43[BANK0 ] unsigned long 
 17610 ;; Auto vars:     Size  Location     Type
 17611 ;;  n               1   57[BANK0 ] unsigned char 
 17612 ;;  wsect           4   58[BANK0 ] unsigned long 
 17613 ;;  fs              2   62[BANK0 ] PTR struct _FATFS
 17614 ;;		 -> NULL(0), fs(544), 
 17615 ;; Return value:  Size  Location     Type
 17616 ;;                  1    wreg      enum E105
 17617 ;; Registers used:
 17618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17619 ;; Tracked objects:
 17620 ;;		On entry : 0/0
 17621 ;;		On exit  : 0/0
 17622 ;;		Unchanged: 0/0
 17623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17624 ;;      Params:         0       4       0       0       0       0       0       0       0
 17625 ;;      Locals:         0       7       0       0       0       0       0       0       0
 17626 ;;      Temps:          0      10       0       0       0       0       0       0       0
 17627 ;;      Totals:         0      21       0       0       0       0       0       0       0
 17628 ;;Total ram usage:       21 bytes
 17629 ;; Hardware stack levels used:    1
 17630 ;; Hardware stack levels required when called:    8
 17631 ;; This function calls:
 17632 ;;		_disk_read
 17633 ;;		_disk_write
 17634 ;; This function is called by:
 17635 ;;		_sync
 17636 ;;		_get_cluster
 17637 ;;		_put_cluster
 17638 ;;		_trace_path
 17639 ;;		_reserve_direntry
 17640 ;;		_f_open
 17641 ;;		_f_write
 17642 ;;		_f_sync
 17643 ;;		_f_read
 17644 ;;		_f_readdir
 17645 ;; This function uses a non-reentrant model
 17646 ;;
 17647                           
 17648                           	psect	text64
 17649  003092                     __ptext64:
 17650                           	opt stack 0
 17651  003092                     _move_window:
 17652                           	opt stack 15
 17653                           
 17654                           ;tff.c: 80: DWORD wsect;
 17655                           ;tff.c: 81: FATFS *fs = FatFs;
 17656                           
 17657                           ;incstack = 0
 17658  003092  C0FD  F09E         	movff	_FatFs,move_window@fs
 17659  003096  C0FE  F09F         	movff	_FatFs+1,move_window@fs+1
 17660                           
 17661                           ;tff.c: 84: wsect = fs->winsect;
 17662  00309A  0100               	movlb	0	; () banked
 17663  00309C  EE20 F004          	lfsr	2,4
 17664  0030A0  519E               	movf	move_window@fs& (0+255),w,b
 17665  0030A2  26D9               	addwf	fsr2l,f,c
 17666  0030A4  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17667  0030A6  22DA               	addwfc	fsr2h,f,c
 17668  0030A8  CFDE F09A          	movff	postinc2,move_window@wsect
 17669  0030AC  CFDE F09B          	movff	postinc2,move_window@wsect+1
 17670  0030B0  CFDE F09C          	movff	postinc2,move_window@wsect+2
 17671  0030B4  CFDE F09D          	movff	postinc2,move_window@wsect+3
 17672                           
 17673                           ; BSR set to: 0
 17674                           ;tff.c: 85: if (wsect != sector) {
 17675  0030B8  518B               	movf	move_window@sector& (0+255),w,b
 17676  0030BA  199A               	xorwf	move_window@wsect& (0+255),w,b
 17677  0030BC  E10A               	bnz	u11090
 17678  0030BE  518C               	movf	(move_window@sector+1)& (0+255),w,b
 17679  0030C0  199B               	xorwf	(move_window@wsect+1)& (0+255),w,b
 17680  0030C2  E107               	bnz	u11090
 17681  0030C4  518D               	movf	(move_window@sector+2)& (0+255),w,b
 17682  0030C6  199C               	xorwf	(move_window@wsect+2)& (0+255),w,b
 17683  0030C8  E104               	bnz	u11090
 17684  0030CA  518E               	movf	(move_window@sector+3)& (0+255),w,b
 17685  0030CC  199D               	xorwf	(move_window@wsect+3)& (0+255),w,b
 17686  0030CE  B4D8               	btfsc	status,2,c
 17687  0030D0  D0B9               	goto	l934
 17688  0030D2                     u11090:
 17689                           
 17690                           ; BSR set to: 0
 17691                           ;tff.c: 87: BYTE n;
 17692                           ;tff.c: 88: if (fs->winflag) {
 17693  0030D2  EE20 F01F          	lfsr	2,31
 17694  0030D6  519E               	movf	move_window@fs& (0+255),w,b
 17695  0030D8  26D9               	addwf	fsr2l,f,c
 17696  0030DA  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17697  0030DC  22DA               	addwfc	fsr2h,f,c
 17698  0030DE  50DF               	movf	indf2,w,c
 17699  0030E0  B4D8               	btfsc	status,2,c
 17700  0030E2  D083               	goto	u11140
 17701                           
 17702                           ; BSR set to: 0
 17703                           ;tff.c: 89: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 17704  0030E4  0E20               	movlw	32
 17705  0030E6  259E               	addwf	move_window@fs& (0+255),w,b
 17706  0030E8  6F7F               	movwf	disk_write@buff& (0+255),b
 17707  0030EA  0E00               	movlw	0
 17708  0030EC  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 17709  0030EE  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 17710  0030F0  C09A  F081         	movff	move_window@wsect,disk_write@sector
 17711  0030F4  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 17712  0030F8  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 17713  0030FC  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 17714  003100  0E01               	movlw	1
 17715  003102  6F85               	movwf	disk_write@count& (0+255),b
 17716  003104  0E00               	movlw	0
 17717  003106  EC22  F022         	call	_disk_write
 17718  00310A  0900               	iorlw	0
 17719  00310C  B4D8               	btfsc	status,2,c
 17720  00310E  D002               	goto	l929
 17721                           
 17722                           ;tff.c: 90: return FALSE;
 17723  003110  0E00               	movlw	0
 17724  003112  0012               	return	
 17725  003114                     l929:
 17726                           
 17727                           ;tff.c: 91: fs->winflag = 0;
 17728  003114  0100               	movlb	0	; () banked
 17729  003116  EE20 F01F          	lfsr	2,31
 17730  00311A  519E               	movf	move_window@fs& (0+255),w,b
 17731  00311C  26D9               	addwf	fsr2l,f,c
 17732  00311E  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17733  003120  22DA               	addwfc	fsr2h,f,c
 17734  003122  0E00               	movlw	0
 17735  003124  6EDF               	movwf	indf2,c
 17736                           
 17737                           ;tff.c: 92: if (wsect < (fs->fatbase + fs->sects_fat)) {
 17738  003126  EE20 F008          	lfsr	2,8
 17739  00312A  519E               	movf	move_window@fs& (0+255),w,b
 17740  00312C  26D9               	addwf	fsr2l,f,c
 17741  00312E  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17742  003130  22DA               	addwfc	fsr2h,f,c
 17743  003132  CFDE F08F          	movff	postinc2,??_move_window
 17744  003136  CFDE F090          	movff	postinc2,??_move_window+1
 17745  00313A  CFDE F091          	movff	postinc2,??_move_window+2
 17746  00313E  CFDE F092          	movff	postinc2,??_move_window+3
 17747  003142  EE20 F014          	lfsr	2,20
 17748  003146  519E               	movf	move_window@fs& (0+255),w,b
 17749  003148  26D9               	addwf	fsr2l,f,c
 17750  00314A  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17751  00314C  22DA               	addwfc	fsr2h,f,c
 17752  00314E  CFDE F093          	movff	postinc2,??_move_window+4
 17753  003152  CFDD F094          	movff	postdec2,??_move_window+5
 17754  003156  5193               	movf	(??_move_window+4)& (0+255),w,b
 17755  003158  258F               	addwf	??_move_window& (0+255),w,b
 17756  00315A  6F95               	movwf	(??_move_window+6)& (0+255),b
 17757  00315C  5194               	movf	(??_move_window+5)& (0+255),w,b
 17758  00315E  2190               	addwfc	(??_move_window+1)& (0+255),w,b
 17759  003160  6F96               	movwf	(??_move_window+7)& (0+255),b
 17760  003162  0E00               	movlw	0
 17761  003164  2191               	addwfc	(??_move_window+2)& (0+255),w,b
 17762  003166  6F97               	movwf	(??_move_window+8)& (0+255),b
 17763  003168  0E00               	movlw	0
 17764  00316A  2192               	addwfc	(??_move_window+3)& (0+255),w,b
 17765  00316C  6F98               	movwf	(??_move_window+9)& (0+255),b
 17766  00316E  5195               	movf	(??_move_window+6)& (0+255),w,b
 17767  003170  5D9A               	subwf	move_window@wsect& (0+255),w,b
 17768  003172  5196               	movf	(??_move_window+7)& (0+255),w,b
 17769  003174  599B               	subwfb	(move_window@wsect+1)& (0+255),w,b
 17770  003176  5197               	movf	(??_move_window+8)& (0+255),w,b
 17771  003178  599C               	subwfb	(move_window@wsect+2)& (0+255),w,b
 17772  00317A  5198               	movf	(??_move_window+9)& (0+255),w,b
 17773  00317C  599D               	subwfb	(move_window@wsect+3)& (0+255),w,b
 17774  00317E  B0D8               	btfsc	status,0,c
 17775  003180  D034               	goto	u11140
 17776                           
 17777                           ; BSR set to: 0
 17778                           ;tff.c: 93: for (n = fs->n_fats; n >= 2; n--) {
 17779  003182  EE20 F01E          	lfsr	2,30
 17780  003186  519E               	movf	move_window@fs& (0+255),w,b
 17781  003188  26D9               	addwf	fsr2l,f,c
 17782  00318A  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17783  00318C  22DA               	addwfc	fsr2h,f,c
 17784  00318E  50DF               	movf	indf2,w,c
 17785  003190  6F99               	movwf	move_window@n& (0+255),b
 17786  003192                     l9172:
 17787                           
 17788                           ; BSR set to: 0
 17789  003192  0E02               	movlw	2
 17790  003194  6199               	cpfslt	move_window@n& (0+255),b
 17791  003196  D001               	goto	l932
 17792  003198  D028               	goto	u11140
 17793  00319A                     l932:
 17794                           
 17795                           ; BSR set to: 0
 17796                           ;tff.c: 94: wsect += fs->sects_fat;
 17797                           
 17798                           ; BSR set to: 0
 17799  00319A  EE20 F014          	lfsr	2,20
 17800  00319E  519E               	movf	move_window@fs& (0+255),w,b
 17801  0031A0  26D9               	addwf	fsr2l,f,c
 17802  0031A2  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17803  0031A4  22DA               	addwfc	fsr2h,f,c
 17804  0031A6  CFDE F08F          	movff	postinc2,??_move_window
 17805  0031AA  CFDD F090          	movff	postdec2,??_move_window+1
 17806  0031AE  518F               	movf	??_move_window& (0+255),w,b
 17807  0031B0  279A               	addwf	move_window@wsect& (0+255),f,b
 17808  0031B2  5190               	movf	(??_move_window+1)& (0+255),w,b
 17809  0031B4  239B               	addwfc	(move_window@wsect+1)& (0+255),f,b
 17810  0031B6  0E00               	movlw	0
 17811  0031B8  239C               	addwfc	(move_window@wsect+2)& (0+255),f,b
 17812  0031BA  0E00               	movlw	0
 17813  0031BC  239D               	addwfc	(move_window@wsect+3)& (0+255),f,b
 17814                           
 17815                           ; BSR set to: 0
 17816                           ;tff.c: 95: disk_write(0, fs->win, wsect, 1);
 17817  0031BE  0E20               	movlw	32
 17818  0031C0  259E               	addwf	move_window@fs& (0+255),w,b
 17819  0031C2  6F7F               	movwf	disk_write@buff& (0+255),b
 17820  0031C4  0E00               	movlw	0
 17821  0031C6  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 17822  0031C8  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 17823  0031CA  C09A  F081         	movff	move_window@wsect,disk_write@sector
 17824  0031CE  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 17825  0031D2  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 17826  0031D6  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 17827  0031DA  0E01               	movlw	1
 17828  0031DC  6F85               	movwf	disk_write@count& (0+255),b
 17829  0031DE  0E00               	movlw	0
 17830  0031E0  EC22  F022         	call	_disk_write
 17831  0031E4  0100               	movlb	0	; () banked
 17832  0031E6  0799               	decf	move_window@n& (0+255),f,b
 17833  0031E8  D7D4               	goto	l9172
 17834  0031EA                     u11140:
 17835                           
 17836                           ; BSR set to: 0
 17837                           ;tff.c: 96: }
 17838                           ;tff.c: 97: }
 17839                           ;tff.c: 98: }
 17840                           ;tff.c: 100: if (sector) {
 17841                           
 17842                           ; BSR set to: 0
 17843                           
 17844                           ; BSR set to: 0
 17845                           
 17846                           ; BSR set to: 0
 17847  0031EA  518B               	movf	move_window@sector& (0+255),w,b
 17848  0031EC  118C               	iorwf	(move_window@sector+1)& (0+255),w,b
 17849  0031EE  118D               	iorwf	(move_window@sector+2)& (0+255),w,b
 17850  0031F0  118E               	iorwf	(move_window@sector+3)& (0+255),w,b
 17851  0031F2  B4D8               	btfsc	status,2,c
 17852  0031F4  D027               	goto	l934
 17853                           
 17854                           ; BSR set to: 0
 17855                           ;tff.c: 101: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 17856  0031F6  0E20               	movlw	32
 17857  0031F8  259E               	addwf	move_window@fs& (0+255),w,b
 17858  0031FA  6F7F               	movwf	disk_read@buff& (0+255),b
 17859  0031FC  0E00               	movlw	0
 17860  0031FE  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 17861  003200  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 17862  003202  C08B  F081         	movff	move_window@sector,disk_read@sector
 17863  003206  C08C  F082         	movff	move_window@sector+1,disk_read@sector+1
 17864  00320A  C08D  F083         	movff	move_window@sector+2,disk_read@sector+2
 17865  00320E  C08E  F084         	movff	move_window@sector+3,disk_read@sector+3
 17866  003212  0E01               	movlw	1
 17867  003214  6F85               	movwf	disk_read@count& (0+255),b
 17868  003216  0E00               	movlw	0
 17869  003218  EC4E  F021         	call	_disk_read
 17870  00321C  0900               	iorlw	0
 17871  00321E  B4D8               	btfsc	status,2,c
 17872  003220  D002               	goto	l935
 17873                           
 17874                           ;tff.c: 102: return FALSE;
 17875  003222  0E00               	movlw	0
 17876  003224  0012               	return	
 17877  003226                     l935:
 17878                           
 17879                           ;tff.c: 103: fs->winsect = sector;
 17880  003226  0100               	movlb	0	; () banked
 17881  003228  EE20 F004          	lfsr	2,4
 17882  00322C  519E               	movf	move_window@fs& (0+255),w,b
 17883  00322E  26D9               	addwf	fsr2l,f,c
 17884  003230  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17885  003232  22DA               	addwfc	fsr2h,f,c
 17886  003234  C08B  FFDE         	movff	move_window@sector,postinc2
 17887  003238  C08C  FFDE         	movff	move_window@sector+1,postinc2
 17888  00323C  C08D  FFDE         	movff	move_window@sector+2,postinc2
 17889  003240  C08E  FFDE         	movff	move_window@sector+3,postinc2
 17890  003244                     l934:
 17891                           
 17892                           ; BSR set to: 0
 17893                           ;tff.c: 104: }
 17894                           ;tff.c: 105: }
 17895                           ;tff.c: 106: return TRUE;
 17896                           
 17897                           ; BSR set to: 0
 17898                           
 17899                           ; BSR set to: 0
 17900  003244  0E01               	movlw	1
 17901  003246  0012               	return	
 17902  003248                     __end_of_move_window:
 17903                           	opt stack 0
 17904                           tosu	equ	0xFFF
 17905                           tosh	equ	0xFFE
 17906                           tosl	equ	0xFFD
 17907                           pclath	equ	0xFFA
 17908                           tblptru	equ	0xFF8
 17909                           tblptrh	equ	0xFF7
 17910                           tblptrl	equ	0xFF6
 17911                           tablat	equ	0xFF5
 17912                           prodh	equ	0xFF4
 17913                           prodl	equ	0xFF3
 17914                           intcon	equ	0xFF2
 17915                           intcon2	equ	0xFF1
 17916                           intcon3	equ	0xFF0
 17917                           indf0	equ	0xFEF
 17918                           postinc0	equ	0xFEE
 17919                           fsr0h	equ	0xFEA
 17920                           fsr0l	equ	0xFE9
 17921                           wreg	equ	0xFE8
 17922                           indf1	equ	0xFE7
 17923                           postinc1	equ	0xFE6
 17924                           postdec1	equ	0xFE5
 17925                           plusw1	equ	0xFE3
 17926                           fsr1h	equ	0xFE2
 17927                           fsr1l	equ	0xFE1
 17928                           indf2	equ	0xFDF
 17929                           postinc2	equ	0xFDE
 17930                           postdec2	equ	0xFDD
 17931                           plusw2	equ	0xFDB
 17932                           fsr2h	equ	0xFDA
 17933                           fsr2l	equ	0xFD9
 17934                           status	equ	0xFD8
 17935                           
 17936 ;; *************** function _disk_write *****************
 17937 ;; Defined at:
 17938 ;;		line 150 in file "bibliotecas/diskio.c"
 17939 ;; Parameters:    Size  Location     Type
 17940 ;;  pdrv            1    wreg     unsigned char 
 17941 ;;  buff            2   31[BANK0 ] PTR const unsigned char 
 17942 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 17943 ;;  sector          4   33[BANK0 ] unsigned long 
 17944 ;;  count           1   37[BANK0 ] unsigned char 
 17945 ;; Auto vars:     Size  Location     Type
 17946 ;;  pdrv            1   39[BANK0 ] unsigned char 
 17947 ;;  result          2   40[BANK0 ] int 
 17948 ;;  res             1   42[BANK0 ] enum E25
 17949 ;; Return value:  Size  Location     Type
 17950 ;;                  1    wreg      enum E25
 17951 ;; Registers used:
 17952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17953 ;; Tracked objects:
 17954 ;;		On entry : 0/0
 17955 ;;		On exit  : 0/0
 17956 ;;		Unchanged: 0/0
 17957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17958 ;;      Params:         0       7       0       0       0       0       0       0       0
 17959 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17960 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17961 ;;      Totals:         0      12       0       0       0       0       0       0       0
 17962 ;;Total ram usage:       12 bytes
 17963 ;; Hardware stack levels used:    1
 17964 ;; Hardware stack levels required when called:    7
 17965 ;; This function calls:
 17966 ;;		_sdc_disk_write
 17967 ;; This function is called by:
 17968 ;;		_move_window
 17969 ;;		_reserve_direntry
 17970 ;;		_f_write
 17971 ;; This function uses a non-reentrant model
 17972 ;;
 17973                           
 17974                           	psect	text65
 17975  004444                     __ptext65:
 17976                           	opt stack 0
 17977  004444                     _disk_write:
 17978                           	opt stack 15
 17979                           
 17980                           ;incstack = 0
 17981                           ;disk_write@pdrv stored from wreg
 17982  004444  0100               	movlb	0	; () banked
 17983  004446  6F87               	movwf	disk_write@pdrv& (0+255),b
 17984                           
 17985                           ;diskio.c: 157: DRESULT res;
 17986                           ;diskio.c: 158: int result;
 17987                           ;diskio.c: 160: switch (pdrv) {
 17988  004448  D034               	goto	l465
 17989  00444A                     
 17990                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 17991  00444A  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 17992  00444E  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 17993  004452  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 17994  004456  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 17995  00445A  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 17996  00445E  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 17997  004462  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 17998  004466  EC84  F016         	call	_sdc_disk_write	;wreg free
 17999  00446A  0100               	movlb	0	; () banked
 18000  00446C  6F86               	movwf	??_disk_write& (0+255),b
 18001  00446E  5186               	movf	??_disk_write& (0+255),w,b
 18002  004470  6F88               	movwf	disk_write@result& (0+255),b
 18003  004472  6B89               	clrf	(disk_write@result+1)& (0+255),b
 18004                           
 18005                           ; BSR set to: 0
 18006                           ;diskio.c: 165: res = result;
 18007  004474  C088  F08A         	movff	disk_write@result,disk_write@res
 18008                           
 18009                           ; BSR set to: 0
 18010                           ;diskio.c: 168: return res;
 18011  004478  518A               	movf	disk_write@res& (0+255),w,b
 18012                           
 18013                           ; BSR set to: 0
 18014  00447A  0012               	return	
 18015  00447C                     
 18016                           ; BSR set to: 0
 18017                           ;diskio.c: 173: result = sdc_disk_write(buff, sector, count);
 18018                           
 18019                           ; BSR set to: 0
 18020  00447C  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 18021  004480  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 18022  004484  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 18023  004488  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 18024  00448C  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 18025  004490  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 18026  004494  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 18027  004498  EC84  F016         	call	_sdc_disk_write	;wreg free
 18028  00449C  0100               	movlb	0	; () banked
 18029  00449E  6F86               	movwf	??_disk_write& (0+255),b
 18030  0044A0  5186               	movf	??_disk_write& (0+255),w,b
 18031  0044A2  6F88               	movwf	disk_write@result& (0+255),b
 18032  0044A4  6B89               	clrf	(disk_write@result+1)& (0+255),b
 18033                           
 18034                           ; BSR set to: 0
 18035                           ;diskio.c: 174: res = result;
 18036  0044A6  C088  F08A         	movff	disk_write@result,disk_write@res
 18037                           
 18038                           ; BSR set to: 0
 18039                           ;diskio.c: 177: return res;
 18040  0044AA  518A               	movf	disk_write@res& (0+255),w,b
 18041                           
 18042                           ; BSR set to: 0
 18043  0044AC  0012               	return	
 18044  0044AE                     
 18045                           ; BSR set to: 0
 18046                           ;diskio.c: 186: return res;
 18047                           
 18048                           ; BSR set to: 0
 18049  0044AE  518A               	movf	disk_write@res& (0+255),w,b
 18050                           
 18051                           ; BSR set to: 0
 18052  0044B0  0012               	return	
 18053  0044B2                     l465:
 18054                           
 18055                           ; BSR set to: 0
 18056  0044B2  0100               	movlb	0	; () banked
 18057  0044B4  5187               	movf	disk_write@pdrv& (0+255),w,b
 18058                           
 18059                           ; Switch size 1, requested type "space"
 18060                           ; Number of cases is 3, Range of values is 0 to 2
 18061                           ; switch strategies available:
 18062                           ; Name         Instructions Cycles
 18063                           ; simple_byte           10     6 (average)
 18064                           ;	Chosen strategy is simple_byte
 18065  0044B6  0A00               	xorlw	0	; case 0
 18066  0044B8  B4D8               	btfsc	status,2,c
 18067  0044BA  D7C7               	goto	l466
 18068  0044BC  0A01               	xorlw	1	; case 1
 18069  0044BE  B4D8               	btfsc	status,2,c
 18070  0044C0  D7DD               	goto	l468
 18071  0044C2  0A03               	xorlw	3	; case 2
 18072  0044C4  B4D8               	btfsc	status,2,c
 18073  0044C6  D7F3               	goto	l469
 18074                           
 18075                           ; BSR set to: 0
 18076                           ;diskio.c: 189: return RES_PARERR;
 18077                           
 18078                           ; BSR set to: 0
 18079  0044C8  0E04               	movlw	4
 18080  0044CA  0012               	return	
 18081  0044CC                     __end_of_disk_write:
 18082                           	opt stack 0
 18083                           tosu	equ	0xFFF
 18084                           tosh	equ	0xFFE
 18085                           tosl	equ	0xFFD
 18086                           pclath	equ	0xFFA
 18087                           tblptru	equ	0xFF8
 18088                           tblptrh	equ	0xFF7
 18089                           tblptrl	equ	0xFF6
 18090                           tablat	equ	0xFF5
 18091                           prodh	equ	0xFF4
 18092                           prodl	equ	0xFF3
 18093                           intcon	equ	0xFF2
 18094                           intcon2	equ	0xFF1
 18095                           intcon3	equ	0xFF0
 18096                           indf0	equ	0xFEF
 18097                           postinc0	equ	0xFEE
 18098                           fsr0h	equ	0xFEA
 18099                           fsr0l	equ	0xFE9
 18100                           wreg	equ	0xFE8
 18101                           indf1	equ	0xFE7
 18102                           postinc1	equ	0xFE6
 18103                           postdec1	equ	0xFE5
 18104                           plusw1	equ	0xFE3
 18105                           fsr1h	equ	0xFE2
 18106                           fsr1l	equ	0xFE1
 18107                           indf2	equ	0xFDF
 18108                           postinc2	equ	0xFDE
 18109                           postdec2	equ	0xFDD
 18110                           plusw2	equ	0xFDB
 18111                           fsr2h	equ	0xFDA
 18112                           fsr2l	equ	0xFD9
 18113                           status	equ	0xFD8
 18114                           
 18115 ;; *************** function _sdc_disk_write *****************
 18116 ;; Defined at:
 18117 ;;		line 509 in file "bibliotecas/diskio.c"
 18118 ;; Parameters:    Size  Location     Type
 18119 ;;  p_buff          2   12[BANK0 ] PTR const unsigned char 
 18120 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 18121 ;;  sector          4   14[BANK0 ] unsigned long 
 18122 ;;  count           1   18[BANK0 ] unsigned char 
 18123 ;; Auto vars:     Size  Location     Type
 18124 ;;  j               2   28[BANK0 ] int 
 18125 ;;  count1          2   25[BANK0 ] int 
 18126 ;;  i               2   23[BANK0 ] int 
 18127 ;;  buff            1   30[BANK0 ] unsigned char 
 18128 ;;  res             1   27[BANK0 ] enum E25
 18129 ;; Return value:  Size  Location     Type
 18130 ;;                  1    wreg      enum E25
 18131 ;; Registers used:
 18132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18133 ;; Tracked objects:
 18134 ;;		On entry : 0/0
 18135 ;;		On exit  : 0/0
 18136 ;;		Unchanged: 0/0
 18137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18138 ;;      Params:         0       7       0       0       0       0       0       0       0
 18139 ;;      Locals:         0       8       0       0       0       0       0       0       0
 18140 ;;      Temps:          0       4       0       0       0       0       0       0       0
 18141 ;;      Totals:         0      19       0       0       0       0       0       0       0
 18142 ;;Total ram usage:       19 bytes
 18143 ;; Hardware stack levels used:    1
 18144 ;; Hardware stack levels required when called:    6
 18145 ;; This function calls:
 18146 ;;		_command
 18147 ;;		_dummy_clocks
 18148 ;;		_escreve_SPI
 18149 ;;		_leitura_SPI
 18150 ;;		_proceed
 18151 ;;		_response
 18152 ;; This function is called by:
 18153 ;;		_disk_write
 18154 ;; This function uses a non-reentrant model
 18155 ;;
 18156                           
 18157                           	psect	text66
 18158  002D08                     __ptext66:
 18159                           	opt stack 0
 18160  002D08                     _sdc_disk_write:
 18161                           	opt stack 15
 18162                           
 18163                           ;diskio.c: 511: DRESULT res;
 18164                           ;diskio.c: 512: unsigned char buff;
 18165                           ;diskio.c: 513: int i=0,j, count1 = 0;
 18166                           
 18167                           ; BSR set to: 0
 18168                           ;incstack = 0
 18169  002D08  0E00               	movlw	0
 18170  002D0A  0100               	movlb	0	; () banked
 18171  002D0C  6F78               	movwf	(sdc_disk_write@i+1)& (0+255),b
 18172  002D0E  0E00               	movlw	0
 18173  002D10  6F77               	movwf	sdc_disk_write@i& (0+255),b
 18174  002D12  0E00               	movlw	0
 18175  002D14  6F7A               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 18176  002D16  0E00               	movlw	0
 18177  002D18  6F79               	movwf	sdc_disk_write@count1& (0+255),b
 18178                           
 18179                           ; BSR set to: 0
 18180                           ;diskio.c: 515: if(count>1)
 18181  002D1A  0E01               	movlw	1
 18182  002D1C  6572               	cpfsgt	sdc_disk_write@count& (0+255),b
 18183  002D1E  D06C               	goto	l550
 18184                           
 18185                           ; BSR set to: 0
 18186                           ;diskio.c: 516: {
 18187                           ;diskio.c: 517: LATCbits.LATC7 = 0;
 18188  002D20  9E8B               	bcf	3979,7,c	;volatile
 18189                           
 18190                           ;diskio.c: 518: LATBbits.LATB4 = 0;
 18191  002D22  988A               	bcf	3978,4,c	;volatile
 18192                           
 18193                           ; BSR set to: 0
 18194                           ;diskio.c: 519: dummy_clocks(10);
 18195  002D24  0E0A               	movlw	10
 18196  002D26  EC27  F026         	call	_dummy_clocks
 18197                           
 18198                           ;diskio.c: 520: command(0X57, count, 0XFF);
 18199  002D2A  0100               	movlb	0	; () banked
 18200  002D2C  5172               	movf	sdc_disk_write@count& (0+255),w,b
 18201  002D2E  6F65               	movwf	command@arg& (0+255),b
 18202  002D30  6B66               	clrf	(command@arg+1)& (0+255),b
 18203  002D32  6B67               	clrf	(command@arg+2)& (0+255),b
 18204  002D34  6B68               	clrf	(command@arg+3)& (0+255),b
 18205  002D36  0EFF               	movlw	255
 18206  002D38  6F69               	movwf	command@CRC& (0+255),b
 18207  002D3A  0E57               	movlw	87
 18208  002D3C  EC0E  F024         	call	_command
 18209                           
 18210                           ;diskio.c: 521: proceed();
 18211  002D40  EC21  F028         	call	_proceed	;wreg free
 18212  002D44                     
 18213                           ;diskio.c: 523: buff = response();
 18214  002D44  EC1B  F028         	call	_response	;wreg free
 18215  002D48  0100               	movlb	0	; () banked
 18216  002D4A  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 18217                           
 18218                           ; BSR set to: 0
 18219                           ;diskio.c: 524: }while(buff!=0X00);
 18220  002D4C  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 18221  002D4E  A4D8               	btfss	status,2,c
 18222  002D50  D7F9               	goto	l551
 18223                           
 18224                           ; BSR set to: 0
 18225                           ;diskio.c: 526: dummy_clocks(10);
 18226                           
 18227                           ; BSR set to: 0
 18228  002D52  0E0A               	movlw	10
 18229  002D54  EC27  F026         	call	_dummy_clocks
 18230                           
 18231                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 18232  002D58  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 18233  002D5C  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 18234  002D60  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 18235  002D64  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 18236  002D68  0E09               	movlw	9
 18237  002D6A                     u10805:
 18238  002D6A  90D8               	bcf	status,0,c
 18239  002D6C  0100               	movlb	0	; () banked
 18240  002D6E  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 18241  002D70  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 18242  002D72  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 18243  002D74  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 18244  002D76  2EE8               	decfsz	wreg,f,c
 18245  002D78  D7F8               	goto	u10805
 18246  002D7A  C073  F065         	movff	??_sdc_disk_write,command@arg
 18247  002D7E  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 18248  002D82  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 18249  002D86  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 18250  002D8A  0EFF               	movlw	255
 18251  002D8C  6F69               	movwf	command@CRC& (0+255),b
 18252  002D8E  0E59               	movlw	89
 18253  002D90  EC0E  F024         	call	_command
 18254                           
 18255                           ;diskio.c: 528: proceed();
 18256  002D94  EC21  F028         	call	_proceed	;wreg free
 18257  002D98                     
 18258                           ;diskio.c: 530: buff = response();
 18259  002D98  EC1B  F028         	call	_response	;wreg free
 18260  002D9C  0100               	movlb	0	; () banked
 18261  002D9E  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 18262                           
 18263                           ; BSR set to: 0
 18264                           ;diskio.c: 531: }while(buff!=0X00);
 18265  002DA0  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 18266  002DA2  A4D8               	btfss	status,2,c
 18267  002DA4  D7F9               	goto	l553
 18268                           
 18269                           ; BSR set to: 0
 18270                           ;diskio.c: 533: dummy_clocks(1);
 18271                           
 18272                           ; BSR set to: 0
 18273  002DA6  0E01               	movlw	1
 18274  002DA8  EC27  F026         	call	_dummy_clocks
 18275                           
 18276                           ;diskio.c: 534: escreve_SPI(0XFC);
 18277  002DAC  0EFC               	movlw	252
 18278  002DAE  ECD3  F027         	call	_escreve_SPI
 18279                           
 18280                           ;diskio.c: 535: for(j=0;j<512;j++)
 18281  002DB2  0E00               	movlw	0
 18282  002DB4  0100               	movlb	0	; () banked
 18283  002DB6  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 18284  002DB8  0E00               	movlw	0
 18285  002DBA  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 18286  002DBC                     l8932:
 18287                           
 18288                           ; BSR set to: 0
 18289  002DBC  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 18290  002DBE  D004               	goto	l555
 18291  002DC0  0E02               	movlw	2
 18292  002DC2  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 18293  002DC4  B0D8               	btfsc	status,0,c
 18294  002DC6  D00D               	goto	u10830
 18295  002DC8                     l555:
 18296                           
 18297                           ; BSR set to: 0
 18298                           ;diskio.c: 536: {
 18299                           ;diskio.c: 537: escreve_SPI(*p_buff);
 18300                           
 18301                           ; BSR set to: 0
 18302  002DC8  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 18303  002DCC  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 18304  002DD0  50DF               	movf	indf2,w,c
 18305  002DD2  ECD3  F027         	call	_escreve_SPI
 18306                           
 18307                           ;diskio.c: 538: p_buff++;
 18308  002DD6  0100               	movlb	0	; () banked
 18309  002DD8  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 18310  002DDA  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 18311                           
 18312                           ; BSR set to: 0
 18313  002DDC  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 18314  002DDE  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 18315  002DE0  D7ED               	goto	l8932
 18316  002DE2                     u10830:
 18317                           
 18318                           ; BSR set to: 0
 18319                           ;diskio.c: 539: }
 18320                           ;diskio.c: 540: leitura_SPI();
 18321                           
 18322                           ; BSR set to: 0
 18323  002DE2  EC27  F028         	call	_leitura_SPI	;wreg free
 18324                           
 18325                           ;diskio.c: 541: leitura_SPI();
 18326  002DE6  EC27  F028         	call	_leitura_SPI	;wreg free
 18327                           
 18328                           ;diskio.c: 543: dummy_clocks(1);
 18329  002DEA  0E01               	movlw	1
 18330  002DEC  EC27  F026         	call	_dummy_clocks
 18331                           
 18332                           ;diskio.c: 544: escreve_SPI(0XFD);
 18333  002DF0  0EFD               	movlw	253
 18334  002DF2  ECD3  F027         	call	_escreve_SPI
 18335                           
 18336                           ;diskio.c: 546: }
 18337  002DF6  D06A               	goto	u10880
 18338  002DF8                     l550:
 18339                           
 18340                           ; BSR set to: 0
 18341                           ;diskio.c: 547: else
 18342                           ;diskio.c: 548: {
 18343                           ;diskio.c: 549: LATCbits.LATC7 = 0;
 18344  002DF8  9E8B               	bcf	3979,7,c	;volatile
 18345                           
 18346                           ;diskio.c: 550: LATBbits.LATB4 = 0;
 18347  002DFA  988A               	bcf	3978,4,c	;volatile
 18348                           
 18349                           ; BSR set to: 0
 18350                           ;diskio.c: 551: dummy_clocks(10);
 18351  002DFC  0E0A               	movlw	10
 18352  002DFE  EC27  F026         	call	_dummy_clocks
 18353                           
 18354                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 18355  002E02  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 18356  002E06  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 18357  002E0A  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 18358  002E0E  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 18359  002E12  0E09               	movlw	9
 18360  002E14                     u10845:
 18361  002E14  90D8               	bcf	status,0,c
 18362  002E16  0100               	movlb	0	; () banked
 18363  002E18  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 18364  002E1A  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 18365  002E1C  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 18366  002E1E  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 18367  002E20  2EE8               	decfsz	wreg,f,c
 18368  002E22  D7F8               	goto	u10845
 18369  002E24  C073  F065         	movff	??_sdc_disk_write,command@arg
 18370  002E28  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 18371  002E2C  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 18372  002E30  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 18373  002E34  0E00               	movlw	0
 18374  002E36  6F69               	movwf	command@CRC& (0+255),b
 18375  002E38  0E58               	movlw	88
 18376  002E3A  EC0E  F024         	call	_command
 18377                           
 18378                           ;diskio.c: 553: proceed();
 18379  002E3E  EC21  F028         	call	_proceed	;wreg free
 18380  002E42                     
 18381                           ;diskio.c: 555: buff = response();
 18382  002E42  EC1B  F028         	call	_response	;wreg free
 18383  002E46  0100               	movlb	0	; () banked
 18384  002E48  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 18385                           
 18386                           ; BSR set to: 0
 18387                           ;diskio.c: 556: }while(buff!=0X00);
 18388  002E4A  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 18389  002E4C  A4D8               	btfss	status,2,c
 18390  002E4E  D7F9               	goto	l558
 18391                           
 18392                           ; BSR set to: 0
 18393                           ;diskio.c: 558: LATBbits.LATB4 = 0;
 18394  002E50  988A               	bcf	3978,4,c	;volatile
 18395                           
 18396                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 18397  002E52  9E8B               	bcf	3979,7,c	;volatile
 18398                           
 18399                           ; BSR set to: 0
 18400                           ;diskio.c: 560: dummy_clocks(1);
 18401  002E54  0E01               	movlw	1
 18402  002E56  EC27  F026         	call	_dummy_clocks
 18403                           
 18404                           ;diskio.c: 561: escreve_SPI(0XFE);
 18405  002E5A  0EFE               	movlw	254
 18406  002E5C  ECD3  F027         	call	_escreve_SPI
 18407                           
 18408                           ;diskio.c: 562: for(j=0;j<512;j++)
 18409  002E60  0E00               	movlw	0
 18410  002E62  0100               	movlb	0	; () banked
 18411  002E64  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 18412  002E66  0E00               	movlw	0
 18413  002E68  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 18414  002E6A                     l8964:
 18415                           
 18416                           ; BSR set to: 0
 18417  002E6A  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 18418  002E6C  D004               	goto	l560
 18419  002E6E  0E02               	movlw	2
 18420  002E70  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 18421  002E72  B0D8               	btfsc	status,0,c
 18422  002E74  D00D               	goto	u10870
 18423  002E76                     l560:
 18424                           
 18425                           ; BSR set to: 0
 18426                           ;diskio.c: 563: {
 18427                           ;diskio.c: 564: escreve_SPI(*p_buff);
 18428                           
 18429                           ; BSR set to: 0
 18430  002E76  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 18431  002E7A  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 18432  002E7E  50DF               	movf	indf2,w,c
 18433  002E80  ECD3  F027         	call	_escreve_SPI
 18434                           
 18435                           ;diskio.c: 565: p_buff++;
 18436  002E84  0100               	movlb	0	; () banked
 18437  002E86  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 18438  002E88  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 18439                           
 18440                           ; BSR set to: 0
 18441  002E8A  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 18442  002E8C  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 18443  002E8E  D7ED               	goto	l8964
 18444  002E90                     u10870:
 18445                           
 18446                           ; BSR set to: 0
 18447                           ;diskio.c: 566: }
 18448                           ;diskio.c: 567: leitura_SPI();
 18449                           
 18450                           ; BSR set to: 0
 18451  002E90  EC27  F028         	call	_leitura_SPI	;wreg free
 18452                           
 18453                           ;diskio.c: 568: leitura_SPI();
 18454  002E94  EC27  F028         	call	_leitura_SPI	;wreg free
 18455                           
 18456                           ;diskio.c: 570: dummy_clocks(10);
 18457  002E98  0E0A               	movlw	10
 18458  002E9A  EC27  F026         	call	_dummy_clocks
 18459                           
 18460                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 18461  002E9E  0E00               	movlw	0
 18462  002EA0  0100               	movlb	0	; () banked
 18463  002EA2  6F65               	movwf	command@arg& (0+255),b
 18464  002EA4  0E00               	movlw	0
 18465  002EA6  6F66               	movwf	(command@arg+1)& (0+255),b
 18466  002EA8  0E00               	movlw	0
 18467  002EAA  6F67               	movwf	(command@arg+2)& (0+255),b
 18468  002EAC  0E00               	movlw	0
 18469  002EAE  6F68               	movwf	(command@arg+3)& (0+255),b
 18470  002EB0  0E00               	movlw	0
 18471  002EB2  6F69               	movwf	command@CRC& (0+255),b
 18472  002EB4  0E4D               	movlw	77
 18473  002EB6  EC0E  F024         	call	_command
 18474                           
 18475                           ;diskio.c: 572: proceed();
 18476  002EBA  EC21  F028         	call	_proceed	;wreg free
 18477  002EBE                     
 18478                           ;diskio.c: 574: buff = response();
 18479  002EBE  EC1B  F028         	call	_response	;wreg free
 18480  002EC2  0100               	movlb	0	; () banked
 18481  002EC4  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 18482                           
 18483                           ; BSR set to: 0
 18484                           ;diskio.c: 575: }while(buff!=0X00 );
 18485  002EC6  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 18486  002EC8  A4D8               	btfss	status,2,c
 18487  002ECA  D7F9               	goto	l562
 18488  002ECC                     u10880:
 18489                           
 18490                           ;diskio.c: 576: }
 18491                           ;diskio.c: 577: return res;
 18492                           
 18493                           ; BSR set to: 0
 18494                           
 18495                           ; BSR set to: 0
 18496  002ECC  0100               	movlb	0	; () banked
 18497  002ECE  517B               	movf	sdc_disk_write@res& (0+255),w,b
 18498  002ED0  0012               	return	
 18499  002ED2                     __end_of_sdc_disk_write:
 18500                           	opt stack 0
 18501                           tosu	equ	0xFFF
 18502                           tosh	equ	0xFFE
 18503                           tosl	equ	0xFFD
 18504                           pclath	equ	0xFFA
 18505                           tblptru	equ	0xFF8
 18506                           tblptrh	equ	0xFF7
 18507                           tblptrl	equ	0xFF6
 18508                           tablat	equ	0xFF5
 18509                           prodh	equ	0xFF4
 18510                           prodl	equ	0xFF3
 18511                           intcon	equ	0xFF2
 18512                           intcon2	equ	0xFF1
 18513                           intcon3	equ	0xFF0
 18514                           indf0	equ	0xFEF
 18515                           postinc0	equ	0xFEE
 18516                           fsr0h	equ	0xFEA
 18517                           fsr0l	equ	0xFE9
 18518                           wreg	equ	0xFE8
 18519                           indf1	equ	0xFE7
 18520                           postinc1	equ	0xFE6
 18521                           postdec1	equ	0xFE5
 18522                           plusw1	equ	0xFE3
 18523                           fsr1h	equ	0xFE2
 18524                           fsr1l	equ	0xFE1
 18525                           indf2	equ	0xFDF
 18526                           postinc2	equ	0xFDE
 18527                           postdec2	equ	0xFDD
 18528                           plusw2	equ	0xFDB
 18529                           fsr2h	equ	0xFDA
 18530                           fsr2l	equ	0xFD9
 18531                           status	equ	0xFD8
 18532                           
 18533 ;; *************** function _disk_read *****************
 18534 ;; Defined at:
 18535 ;;		line 97 in file "bibliotecas/diskio.c"
 18536 ;; Parameters:    Size  Location     Type
 18537 ;;  pdrv            1    wreg     unsigned char 
 18538 ;;  buff            2   31[BANK0 ] PTR unsigned char 
 18539 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 18540 ;;  sector          4   33[BANK0 ] unsigned long 
 18541 ;;  count           1   37[BANK0 ] unsigned char 
 18542 ;; Auto vars:     Size  Location     Type
 18543 ;;  pdrv            1   39[BANK0 ] unsigned char 
 18544 ;;  result          2   40[BANK0 ] int 
 18545 ;;  res             1   42[BANK0 ] enum E25
 18546 ;; Return value:  Size  Location     Type
 18547 ;;                  1    wreg      enum E25
 18548 ;; Registers used:
 18549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18550 ;; Tracked objects:
 18551 ;;		On entry : 0/0
 18552 ;;		On exit  : 0/0
 18553 ;;		Unchanged: 0/0
 18554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18555 ;;      Params:         0       7       0       0       0       0       0       0       0
 18556 ;;      Locals:         0       4       0       0       0       0       0       0       0
 18557 ;;      Temps:          0       1       0       0       0       0       0       0       0
 18558 ;;      Totals:         0      12       0       0       0       0       0       0       0
 18559 ;;Total ram usage:       12 bytes
 18560 ;; Hardware stack levels used:    1
 18561 ;; Hardware stack levels required when called:    7
 18562 ;; This function calls:
 18563 ;;		_sdc_disk_read
 18564 ;; This function is called by:
 18565 ;;		_move_window
 18566 ;;		_check_fs
 18567 ;;		_f_read
 18568 ;; This function uses a non-reentrant model
 18569 ;;
 18570                           
 18571                           	psect	text67
 18572  00429C                     __ptext67:
 18573                           	opt stack 0
 18574  00429C                     _disk_read:
 18575                           	opt stack 15
 18576                           
 18577                           ; BSR set to: 0
 18578                           ;incstack = 0
 18579                           ;disk_read@pdrv stored from wreg
 18580  00429C  0100               	movlb	0	; () banked
 18581  00429E  6F87               	movwf	disk_read@pdrv& (0+255),b
 18582                           
 18583                           ;diskio.c: 104: DRESULT res;
 18584                           ;diskio.c: 105: int result;
 18585                           ;diskio.c: 107: switch (pdrv) {
 18586  0042A0  D038               	goto	l457
 18587  0042A2                     
 18588                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 18589  0042A2  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 18590  0042A6  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 18591  0042AA  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 18592  0042AE  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 18593  0042B2  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 18594  0042B6  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 18595  0042BA  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 18596  0042BE  EC46  F01B         	call	_sdc_disk_read	;wreg free
 18597  0042C2  0100               	movlb	0	; () banked
 18598  0042C4  6F86               	movwf	??_disk_read& (0+255),b
 18599  0042C6  5186               	movf	??_disk_read& (0+255),w,b
 18600  0042C8  6F88               	movwf	disk_read@result& (0+255),b
 18601  0042CA  6B89               	clrf	(disk_read@result+1)& (0+255),b
 18602                           
 18603                           ; BSR set to: 0
 18604                           ;diskio.c: 115: res = result;
 18605  0042CC  C088  F08A         	movff	disk_read@result,disk_read@res
 18606                           
 18607                           ; BSR set to: 0
 18608                           ;diskio.c: 117: return res;
 18609  0042D0  518A               	movf	disk_read@res& (0+255),w,b
 18610                           
 18611                           ; BSR set to: 0
 18612  0042D2  0012               	return	
 18613  0042D4                     
 18614                           ; BSR set to: 0
 18615                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 18616                           
 18617                           ; BSR set to: 0
 18618  0042D4  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 18619  0042D8  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 18620  0042DC  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 18621  0042E0  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 18622  0042E4  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 18623  0042E8  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 18624  0042EC  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 18625  0042F0  EC46  F01B         	call	_sdc_disk_read	;wreg free
 18626  0042F4  0100               	movlb	0	; () banked
 18627  0042F6  6F86               	movwf	??_disk_read& (0+255),b
 18628  0042F8  5186               	movf	??_disk_read& (0+255),w,b
 18629  0042FA  6F88               	movwf	disk_read@result& (0+255),b
 18630  0042FC  6B89               	clrf	(disk_read@result+1)& (0+255),b
 18631                           
 18632                           ; BSR set to: 0
 18633                           ;diskio.c: 126: res = result;
 18634  0042FE  C088  F08A         	movff	disk_read@result,disk_read@res
 18635                           
 18636                           ; BSR set to: 0
 18637                           ;diskio.c: 128: buff = data_buff;
 18638  004302  C028  F07F         	movff	_data_buff,disk_read@buff
 18639  004306  C029  F080         	movff	_data_buff+1,disk_read@buff+1
 18640                           
 18641                           ; BSR set to: 0
 18642                           ;diskio.c: 129: return res;
 18643  00430A  518A               	movf	disk_read@res& (0+255),w,b
 18644                           
 18645                           ; BSR set to: 0
 18646  00430C  0012               	return	
 18647  00430E                     
 18648                           ; BSR set to: 0
 18649                           ;diskio.c: 138: return res;
 18650                           
 18651                           ; BSR set to: 0
 18652  00430E  518A               	movf	disk_read@res& (0+255),w,b
 18653                           
 18654                           ; BSR set to: 0
 18655  004310  0012               	return	
 18656  004312                     l457:
 18657                           
 18658                           ; BSR set to: 0
 18659  004312  0100               	movlb	0	; () banked
 18660  004314  5187               	movf	disk_read@pdrv& (0+255),w,b
 18661                           
 18662                           ; Switch size 1, requested type "space"
 18663                           ; Number of cases is 3, Range of values is 0 to 2
 18664                           ; switch strategies available:
 18665                           ; Name         Instructions Cycles
 18666                           ; simple_byte           10     6 (average)
 18667                           ;	Chosen strategy is simple_byte
 18668  004316  0A00               	xorlw	0	; case 0
 18669  004318  B4D8               	btfsc	status,2,c
 18670  00431A  D7C3               	goto	l458
 18671  00431C  0A01               	xorlw	1	; case 1
 18672  00431E  B4D8               	btfsc	status,2,c
 18673  004320  D7D9               	goto	l460
 18674  004322  0A03               	xorlw	3	; case 2
 18675  004324  B4D8               	btfsc	status,2,c
 18676  004326  D7F3               	goto	l461
 18677                           
 18678                           ; BSR set to: 0
 18679                           ;diskio.c: 141: return RES_PARERR;
 18680                           
 18681                           ; BSR set to: 0
 18682  004328  0E04               	movlw	4
 18683  00432A  0012               	return	
 18684  00432C                     __end_of_disk_read:
 18685                           	opt stack 0
 18686                           tosu	equ	0xFFF
 18687                           tosh	equ	0xFFE
 18688                           tosl	equ	0xFFD
 18689                           pclath	equ	0xFFA
 18690                           tblptru	equ	0xFF8
 18691                           tblptrh	equ	0xFF7
 18692                           tblptrl	equ	0xFF6
 18693                           tablat	equ	0xFF5
 18694                           prodh	equ	0xFF4
 18695                           prodl	equ	0xFF3
 18696                           intcon	equ	0xFF2
 18697                           intcon2	equ	0xFF1
 18698                           intcon3	equ	0xFF0
 18699                           indf0	equ	0xFEF
 18700                           postinc0	equ	0xFEE
 18701                           fsr0h	equ	0xFEA
 18702                           fsr0l	equ	0xFE9
 18703                           wreg	equ	0xFE8
 18704                           indf1	equ	0xFE7
 18705                           postinc1	equ	0xFE6
 18706                           postdec1	equ	0xFE5
 18707                           plusw1	equ	0xFE3
 18708                           fsr1h	equ	0xFE2
 18709                           fsr1l	equ	0xFE1
 18710                           indf2	equ	0xFDF
 18711                           postinc2	equ	0xFDE
 18712                           postdec2	equ	0xFDD
 18713                           plusw2	equ	0xFDB
 18714                           fsr2h	equ	0xFDA
 18715                           fsr2l	equ	0xFD9
 18716                           status	equ	0xFD8
 18717                           
 18718 ;; *************** function _sdc_disk_read *****************
 18719 ;; Defined at:
 18720 ;;		line 439 in file "bibliotecas/diskio.c"
 18721 ;; Parameters:    Size  Location     Type
 18722 ;;  p_buff          2   12[BANK0 ] PTR unsigned char 
 18723 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 18724 ;;  sector          4   14[BANK0 ] unsigned long 
 18725 ;;  count           1   18[BANK0 ] unsigned char 
 18726 ;; Auto vars:     Size  Location     Type
 18727 ;;  start_add       4   24[BANK0 ] unsigned long 
 18728 ;;  length          2   28[BANK0 ] int 
 18729 ;;  count1          2    0        int 
 18730 ;;  i               2    0        int 
 18731 ;;  buff            1   30[BANK0 ] unsigned char 
 18732 ;;  ptr             1   23[BANK0 ] unsigned char 
 18733 ;;  res             1    0        enum E25
 18734 ;; Return value:  Size  Location     Type
 18735 ;;                  1    wreg      enum E25
 18736 ;; Registers used:
 18737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18738 ;; Tracked objects:
 18739 ;;		On entry : 0/0
 18740 ;;		On exit  : 0/0
 18741 ;;		Unchanged: 0/0
 18742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18743 ;;      Params:         0       7       0       0       0       0       0       0       0
 18744 ;;      Locals:         0       8       0       0       0       0       0       0       0
 18745 ;;      Temps:          0       4       0       0       0       0       0       0       0
 18746 ;;      Totals:         0      19       0       0       0       0       0       0       0
 18747 ;;Total ram usage:       19 bytes
 18748 ;; Hardware stack levels used:    1
 18749 ;; Hardware stack levels required when called:    6
 18750 ;; This function calls:
 18751 ;;		_command
 18752 ;;		_dummy_clocks
 18753 ;;		_proceed
 18754 ;;		_response
 18755 ;; This function is called by:
 18756 ;;		_disk_read
 18757 ;; This function uses a non-reentrant model
 18758 ;;
 18759                           
 18760                           	psect	text68
 18761  00368C                     __ptext68:
 18762                           	opt stack 0
 18763  00368C                     _sdc_disk_read:
 18764                           	opt stack 15
 18765                           
 18766                           ;diskio.c: 446: DRESULT res;
 18767                           ;diskio.c: 447: unsigned char ptr=0X00, buff;
 18768                           
 18769                           ; BSR set to: 0
 18770                           ;incstack = 0
 18771  00368C  0E00               	movlw	0
 18772  00368E  0100               	movlb	0	; () banked
 18773  003690  6F77               	movwf	sdc_disk_read@ptr& (0+255),b
 18774                           
 18775                           ; BSR set to: 0
 18776                           ;diskio.c: 448: unsigned long int start_add;
 18777                           ;diskio.c: 449: int length,i, count1;
 18778                           ;diskio.c: 450: dummy_clocks(10);
 18779  003692  0E0A               	movlw	10
 18780  003694  EC27  F026         	call	_dummy_clocks
 18781                           
 18782                           ;diskio.c: 452: start_add = sector*512;
 18783  003698  C06E  F073         	movff	sdc_disk_read@sector,??_sdc_disk_read
 18784  00369C  C06F  F074         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 18785  0036A0  C070  F075         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 18786  0036A4  C071  F076         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 18787  0036A8  0E09               	movlw	9
 18788  0036AA                     u10715:
 18789  0036AA  90D8               	bcf	status,0,c
 18790  0036AC  0100               	movlb	0	; () banked
 18791  0036AE  3773               	rlcf	??_sdc_disk_read& (0+255),f,b
 18792  0036B0  3774               	rlcf	(??_sdc_disk_read+1)& (0+255),f,b
 18793  0036B2  3775               	rlcf	(??_sdc_disk_read+2)& (0+255),f,b
 18794  0036B4  3776               	rlcf	(??_sdc_disk_read+3)& (0+255),f,b
 18795  0036B6  2EE8               	decfsz	wreg,f,c
 18796  0036B8  D7F8               	goto	u10715
 18797  0036BA  C073  F078         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 18798  0036BE  C074  F079         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 18799  0036C2  C075  F07A         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 18800  0036C6  C076  F07B         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 18801                           
 18802                           ; BSR set to: 0
 18803                           ;diskio.c: 455: if(sector != 1)
 18804  0036CA  056E               	decf	sdc_disk_read@sector& (0+255),w,b
 18805  0036CC  116F               	iorwf	(sdc_disk_read@sector+1)& (0+255),w,b
 18806  0036CE  1170               	iorwf	(sdc_disk_read@sector+2)& (0+255),w,b
 18807  0036D0  1171               	iorwf	(sdc_disk_read@sector+3)& (0+255),w,b
 18808  0036D2  B4D8               	btfsc	status,2,c
 18809  0036D4  D01D               	goto	l533
 18810                           
 18811                           ; BSR set to: 0
 18812                           ;diskio.c: 456: {
 18813                           ;diskio.c: 457: dummy_clocks(10);
 18814  0036D6  0E0A               	movlw	10
 18815  0036D8  EC27  F026         	call	_dummy_clocks
 18816                           
 18817                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 18818  0036DC  C078  F065         	movff	sdc_disk_read@start_add,command@arg
 18819  0036E0  C079  F066         	movff	sdc_disk_read@start_add+1,command@arg+1
 18820  0036E4  C07A  F067         	movff	sdc_disk_read@start_add+2,command@arg+2
 18821  0036E8  C07B  F068         	movff	sdc_disk_read@start_add+3,command@arg+3
 18822  0036EC  0E00               	movlw	0
 18823  0036EE  0100               	movlb	0	; () banked
 18824  0036F0  6F69               	movwf	command@CRC& (0+255),b
 18825  0036F2  0E52               	movlw	82
 18826  0036F4  EC0E  F024         	call	_command
 18827                           
 18828                           ;diskio.c: 459: proceed();
 18829  0036F8  EC21  F028         	call	_proceed	;wreg free
 18830  0036FC                     
 18831                           ;diskio.c: 461: buff = response();
 18832  0036FC  EC1B  F028         	call	_response	;wreg free
 18833  003700  0100               	movlb	0	; () banked
 18834  003702  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18835                           
 18836                           ; BSR set to: 0
 18837                           ;diskio.c: 462: }while(buff!=0X00);
 18838  003704  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 18839  003706  A4D8               	btfss	status,2,c
 18840  003708  D7F9               	goto	l534
 18841                           
 18842                           ; BSR set to: 0
 18843                           ;diskio.c: 463: proceed();
 18844                           
 18845                           ; BSR set to: 0
 18846  00370A  EC21  F028         	call	_proceed	;wreg free
 18847                           
 18848                           ;diskio.c: 464: }
 18849  00370E  D021               	goto	l539
 18850  003710                     l533:
 18851                           
 18852                           ;diskio.c: 465: else
 18853                           ;diskio.c: 466: {
 18854                           ;diskio.c: 467: dummy_clocks(10);
 18855  003710  0E0A               	movlw	10
 18856  003712  EC27  F026         	call	_dummy_clocks
 18857                           
 18858                           ;diskio.c: 468: command(0X51,sector ,0X00);
 18859  003716  C06E  F065         	movff	sdc_disk_read@sector,command@arg
 18860  00371A  C06F  F066         	movff	sdc_disk_read@sector+1,command@arg+1
 18861  00371E  C070  F067         	movff	sdc_disk_read@sector+2,command@arg+2
 18862  003722  C071  F068         	movff	sdc_disk_read@sector+3,command@arg+3
 18863  003726  0E00               	movlw	0
 18864  003728  0100               	movlb	0	; () banked
 18865  00372A  6F69               	movwf	command@CRC& (0+255),b
 18866  00372C  0E51               	movlw	81
 18867  00372E  EC0E  F024         	call	_command
 18868                           
 18869                           ;diskio.c: 469: proceed();
 18870  003732  EC21  F028         	call	_proceed	;wreg free
 18871  003736                     
 18872                           ;diskio.c: 471: buff = response();
 18873  003736  EC1B  F028         	call	_response	;wreg free
 18874  00373A  0100               	movlb	0	; () banked
 18875  00373C  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18876                           
 18877                           ; BSR set to: 0
 18878                           ;diskio.c: 472: }while(buff!=0X00);
 18879  00373E  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 18880  003740  A4D8               	btfss	status,2,c
 18881  003742  D7F9               	goto	l537
 18882                           
 18883                           ; BSR set to: 0
 18884                           ;diskio.c: 473: proceed();
 18885                           
 18886                           ; BSR set to: 0
 18887  003744  EC21  F028         	call	_proceed	;wreg free
 18888                           
 18889                           ;diskio.c: 474: }
 18890                           ;diskio.c: 478: while(buff!=0xFE)
 18891  003748  D004               	goto	l539
 18892  00374A                     
 18893                           ;diskio.c: 479: {
 18894                           ;diskio.c: 480: buff = response();
 18895  00374A  EC1B  F028         	call	_response	;wreg free
 18896  00374E  0100               	movlb	0	; () banked
 18897  003750  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18898  003752                     l539:
 18899                           
 18900                           ; BSR set to: 0
 18901  003752  0EFE               	movlw	254
 18902  003754  0100               	movlb	0	; () banked
 18903  003756  197E               	xorwf	sdc_disk_read@buff& (0+255),w,b
 18904  003758  A4D8               	btfss	status,2,c
 18905  00375A  D7F7               	goto	l540
 18906                           
 18907                           ; BSR set to: 0
 18908                           ;diskio.c: 481: }
 18909                           ;diskio.c: 483: length = 0;
 18910                           
 18911                           ; BSR set to: 0
 18912  00375C  0E00               	movlw	0
 18913  00375E  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18914  003760  0E00               	movlw	0
 18915  003762  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 18916                           
 18917                           ;diskio.c: 484: while ( length < 512 )
 18918  003764  D00C               	goto	l542
 18919  003766                     
 18920                           ; BSR set to: 0
 18921                           ;diskio.c: 485: {
 18922                           ;diskio.c: 486: p_buff[length] = response();
 18923                           
 18924                           ; BSR set to: 0
 18925  003766  517C               	movf	sdc_disk_read@length& (0+255),w,b
 18926  003768  256C               	addwf	sdc_disk_read@p_buff& (0+255),w,b
 18927  00376A  6ED9               	movwf	fsr2l,c
 18928  00376C  517D               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 18929  00376E  216D               	addwfc	(sdc_disk_read@p_buff+1)& (0+255),w,b
 18930  003770  6EDA               	movwf	fsr2h,c
 18931  003772  EC1B  F028         	call	_response	;wreg free
 18932  003776  6EDF               	movwf	indf2,c
 18933                           
 18934                           ;diskio.c: 487: length++;
 18935  003778  0100               	movlb	0	; () banked
 18936  00377A  4B7C               	infsnz	sdc_disk_read@length& (0+255),f,b
 18937  00377C  2B7D               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 18938  00377E                     l542:
 18939                           
 18940                           ; BSR set to: 0
 18941                           
 18942                           ; BSR set to: 0
 18943  00377E  BF7D               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 18944  003780  D7F2               	goto	l543
 18945  003782  0E02               	movlw	2
 18946  003784  5D7D               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 18947  003786  A0D8               	btfss	status,0,c
 18948  003788  D7EE               	goto	l543
 18949                           
 18950                           ; BSR set to: 0
 18951                           ;diskio.c: 488: }
 18952                           ;diskio.c: 490: length = 0;
 18953                           
 18954                           ; BSR set to: 0
 18955  00378A  0E00               	movlw	0
 18956  00378C  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18957  00378E  0E00               	movlw	0
 18958  003790  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 18959                           
 18960                           ; BSR set to: 0
 18961                           ;diskio.c: 491: dummy_clocks(10);
 18962  003792  0E0A               	movlw	10
 18963  003794  EC27  F026         	call	_dummy_clocks
 18964                           
 18965                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 18966  003798  0E00               	movlw	0
 18967  00379A  0100               	movlb	0	; () banked
 18968  00379C  6F65               	movwf	command@arg& (0+255),b
 18969  00379E  0E00               	movlw	0
 18970  0037A0  6F66               	movwf	(command@arg+1)& (0+255),b
 18971  0037A2  0E00               	movlw	0
 18972  0037A4  6F67               	movwf	(command@arg+2)& (0+255),b
 18973  0037A6  0E00               	movlw	0
 18974  0037A8  6F68               	movwf	(command@arg+3)& (0+255),b
 18975  0037AA  0E00               	movlw	0
 18976  0037AC  6F69               	movwf	command@CRC& (0+255),b
 18977  0037AE  0E4C               	movlw	76
 18978  0037B0  EC0E  F024         	call	_command
 18979                           
 18980                           ;diskio.c: 494: proceed();
 18981  0037B4  EC21  F028         	call	_proceed	;wreg free
 18982  0037B8                     
 18983                           ;diskio.c: 496: buff = response();
 18984  0037B8  EC1B  F028         	call	_response	;wreg free
 18985  0037BC  0100               	movlb	0	; () banked
 18986  0037BE  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18987                           
 18988                           ; BSR set to: 0
 18989                           ;diskio.c: 497: }while(buff!=0xFF);
 18990  0037C0  297E               	incf	sdc_disk_read@buff& (0+255),w,b
 18991  0037C2  A4D8               	btfss	status,2,c
 18992  0037C4  D7F9               	goto	l545
 18993                           
 18994                           ; BSR set to: 0
 18995                           ;diskio.c: 499: length = 0;
 18996                           
 18997                           ; BSR set to: 0
 18998  0037C6  0E00               	movlw	0
 18999  0037C8  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 19000  0037CA  0E00               	movlw	0
 19001  0037CC  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 19002                           
 19003                           ; BSR set to: 0
 19004                           ;diskio.c: 500: return RES_OK;
 19005  0037CE  0E00               	movlw	0
 19006  0037D0  0012               	return	
 19007  0037D2                     __end_of_sdc_disk_read:
 19008                           	opt stack 0
 19009                           tosu	equ	0xFFF
 19010                           tosh	equ	0xFFE
 19011                           tosl	equ	0xFFD
 19012                           pclath	equ	0xFFA
 19013                           tblptru	equ	0xFF8
 19014                           tblptrh	equ	0xFF7
 19015                           tblptrl	equ	0xFF6
 19016                           tablat	equ	0xFF5
 19017                           prodh	equ	0xFF4
 19018                           prodl	equ	0xFF3
 19019                           intcon	equ	0xFF2
 19020                           intcon2	equ	0xFF1
 19021                           intcon3	equ	0xFF0
 19022                           indf0	equ	0xFEF
 19023                           postinc0	equ	0xFEE
 19024                           fsr0h	equ	0xFEA
 19025                           fsr0l	equ	0xFE9
 19026                           wreg	equ	0xFE8
 19027                           indf1	equ	0xFE7
 19028                           postinc1	equ	0xFE6
 19029                           postdec1	equ	0xFE5
 19030                           plusw1	equ	0xFE3
 19031                           fsr1h	equ	0xFE2
 19032                           fsr1l	equ	0xFE1
 19033                           indf2	equ	0xFDF
 19034                           postinc2	equ	0xFDE
 19035                           postdec2	equ	0xFDD
 19036                           plusw2	equ	0xFDB
 19037                           fsr2h	equ	0xFDA
 19038                           fsr2l	equ	0xFD9
 19039                           status	equ	0xFD8
 19040                           
 19041 ;; *************** function _response *****************
 19042 ;; Defined at:
 19043 ;;		line 59 in file "bibliotecas/SDCard.c"
 19044 ;; Parameters:    Size  Location     Type
 19045 ;;		None
 19046 ;; Auto vars:     Size  Location     Type
 19047 ;;  buff            1   32[COMRAM] unsigned char 
 19048 ;; Return value:  Size  Location     Type
 19049 ;;                  1    wreg      unsigned char 
 19050 ;; Registers used:
 19051 ;;		wreg, status,2, cstack
 19052 ;; Tracked objects:
 19053 ;;		On entry : 0/0
 19054 ;;		On exit  : 0/0
 19055 ;;		Unchanged: 0/0
 19056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19057 ;;      Params:         0       0       0       0       0       0       0       0       0
 19058 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19059 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19060 ;;      Totals:         1       0       0       0       0       0       0       0       0
 19061 ;;Total ram usage:        1 bytes
 19062 ;; Hardware stack levels used:    1
 19063 ;; Hardware stack levels required when called:    4
 19064 ;; This function calls:
 19065 ;;		_leitura_SPI
 19066 ;; This function is called by:
 19067 ;;		_sdc_reset
 19068 ;;		_sdc_disk_initialize
 19069 ;;		_sdc_disk_read
 19070 ;;		_sdc_disk_write
 19071 ;; This function uses a non-reentrant model
 19072 ;;
 19073                           
 19074                           	psect	text69
 19075  005036                     __ptext69:
 19076                           	opt stack 0
 19077  005036                     _response:
 19078                           	opt stack 16
 19079                           
 19080                           ;SDCard.c: 61: unsigned char buff;
 19081                           ;SDCard.c: 62: LATBbits.LATB4 = 0;
 19082                           
 19083                           ; BSR set to: 0
 19084                           ;incstack = 0
 19085  005036  988A               	bcf	3978,4,c	;volatile
 19086                           
 19087                           ;SDCard.c: 63: buff= leitura_SPI();
 19088  005038  EC27  F028         	call	_leitura_SPI	;wreg free
 19089  00503C  6E21               	movwf	response@buff,c
 19090                           
 19091                           ;SDCard.c: 64: return buff;
 19092  00503E  5021               	movf	response@buff,w,c
 19093  005040  0012               	return	
 19094  005042                     __end_of_response:
 19095                           	opt stack 0
 19096                           tosu	equ	0xFFF
 19097                           tosh	equ	0xFFE
 19098                           tosl	equ	0xFFD
 19099                           pclath	equ	0xFFA
 19100                           tblptru	equ	0xFF8
 19101                           tblptrh	equ	0xFF7
 19102                           tblptrl	equ	0xFF6
 19103                           tablat	equ	0xFF5
 19104                           prodh	equ	0xFF4
 19105                           prodl	equ	0xFF3
 19106                           intcon	equ	0xFF2
 19107                           intcon2	equ	0xFF1
 19108                           intcon3	equ	0xFF0
 19109                           indf0	equ	0xFEF
 19110                           postinc0	equ	0xFEE
 19111                           fsr0h	equ	0xFEA
 19112                           fsr0l	equ	0xFE9
 19113                           wreg	equ	0xFE8
 19114                           indf1	equ	0xFE7
 19115                           postinc1	equ	0xFE6
 19116                           postdec1	equ	0xFE5
 19117                           plusw1	equ	0xFE3
 19118                           fsr1h	equ	0xFE2
 19119                           fsr1l	equ	0xFE1
 19120                           indf2	equ	0xFDF
 19121                           postinc2	equ	0xFDE
 19122                           postdec2	equ	0xFDD
 19123                           plusw2	equ	0xFDB
 19124                           fsr2h	equ	0xFDA
 19125                           fsr2l	equ	0xFD9
 19126                           status	equ	0xFD8
 19127                           
 19128 ;; *************** function _proceed *****************
 19129 ;; Defined at:
 19130 ;;		line 92 in file "bibliotecas/SDCard.c"
 19131 ;; Parameters:    Size  Location     Type
 19132 ;;		None
 19133 ;; Auto vars:     Size  Location     Type
 19134 ;;		None
 19135 ;; Return value:  Size  Location     Type
 19136 ;;                  1    wreg      void 
 19137 ;; Registers used:
 19138 ;;		wreg, cstack
 19139 ;; Tracked objects:
 19140 ;;		On entry : 0/0
 19141 ;;		On exit  : 0/0
 19142 ;;		Unchanged: 0/0
 19143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19144 ;;      Params:         0       0       0       0       0       0       0       0       0
 19145 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19146 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19147 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19148 ;;Total ram usage:        0 bytes
 19149 ;; Hardware stack levels used:    1
 19150 ;; Hardware stack levels required when called:    4
 19151 ;; This function calls:
 19152 ;;		_escreve_SPI
 19153 ;; This function is called by:
 19154 ;;		_sdc_reset
 19155 ;;		_sdc_disk_initialize
 19156 ;;		_sdc_disk_read
 19157 ;;		_sdc_disk_write
 19158 ;;		_sdcard_init
 19159 ;; This function uses a non-reentrant model
 19160 ;;
 19161                           
 19162                           	psect	text70
 19163  005042                     __ptext70:
 19164                           	opt stack 0
 19165  005042                     _proceed:
 19166                           	opt stack 16
 19167                           
 19168                           ;SDCard.c: 94: LATBbits.LATB4 = 0;
 19169                           
 19170                           ;incstack = 0
 19171  005042  988A               	bcf	3978,4,c	;volatile
 19172                           
 19173                           ;SDCard.c: 95: escreve_SPI(0xFF);
 19174  005044  0EFF               	movlw	255
 19175  005046  ECD3  F027         	call	_escreve_SPI
 19176                           
 19177                           ;SDCard.c: 96: LATBbits.LATB4 = 1;
 19178  00504A  888A               	bsf	3978,4,c	;volatile
 19179  00504C  0012               	return		;funcret
 19180  00504E                     __end_of_proceed:
 19181                           	opt stack 0
 19182                           tosu	equ	0xFFF
 19183                           tosh	equ	0xFFE
 19184                           tosl	equ	0xFFD
 19185                           pclath	equ	0xFFA
 19186                           tblptru	equ	0xFF8
 19187                           tblptrh	equ	0xFF7
 19188                           tblptrl	equ	0xFF6
 19189                           tablat	equ	0xFF5
 19190                           prodh	equ	0xFF4
 19191                           prodl	equ	0xFF3
 19192                           intcon	equ	0xFF2
 19193                           intcon2	equ	0xFF1
 19194                           intcon3	equ	0xFF0
 19195                           indf0	equ	0xFEF
 19196                           postinc0	equ	0xFEE
 19197                           fsr0h	equ	0xFEA
 19198                           fsr0l	equ	0xFE9
 19199                           wreg	equ	0xFE8
 19200                           indf1	equ	0xFE7
 19201                           postinc1	equ	0xFE6
 19202                           postdec1	equ	0xFE5
 19203                           plusw1	equ	0xFE3
 19204                           fsr1h	equ	0xFE2
 19205                           fsr1l	equ	0xFE1
 19206                           indf2	equ	0xFDF
 19207                           postinc2	equ	0xFDE
 19208                           postdec2	equ	0xFDD
 19209                           plusw2	equ	0xFDB
 19210                           fsr2h	equ	0xFDA
 19211                           fsr2l	equ	0xFD9
 19212                           status	equ	0xFD8
 19213                           
 19214 ;; *************** function _command *****************
 19215 ;; Defined at:
 19216 ;;		line 125 in file "bibliotecas/SDCard.c"
 19217 ;; Parameters:    Size  Location     Type
 19218 ;;  CMD             1    wreg     unsigned char 
 19219 ;;  arg             4    5[BANK0 ] unsigned long 
 19220 ;;  CRC             1    9[BANK0 ] unsigned char 
 19221 ;; Auto vars:     Size  Location     Type
 19222 ;;  CMD             1   10[BANK0 ] unsigned char 
 19223 ;;  argument        1   11[BANK0 ] unsigned char 
 19224 ;; Return value:  Size  Location     Type
 19225 ;;                  1    wreg      void 
 19226 ;; Registers used:
 19227 ;;		wreg, status,2, status,0, cstack
 19228 ;; Tracked objects:
 19229 ;;		On entry : 0/0
 19230 ;;		On exit  : 0/0
 19231 ;;		Unchanged: 0/0
 19232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19233 ;;      Params:         0       5       0       0       0       0       0       0       0
 19234 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19235 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19236 ;;      Totals:         0       7       0       0       0       0       0       0       0
 19237 ;;Total ram usage:        7 bytes
 19238 ;; Hardware stack levels used:    1
 19239 ;; Hardware stack levels required when called:    5
 19240 ;; This function calls:
 19241 ;;		_dummy_clocks
 19242 ;;		_escreve_SPI
 19243 ;;		_wait_ready
 19244 ;; This function is called by:
 19245 ;;		_sdc_reset
 19246 ;;		_sdc_disk_initialize
 19247 ;;		_sdc_disk_read
 19248 ;;		_sdc_disk_write
 19249 ;; This function uses a non-reentrant model
 19250 ;;
 19251                           
 19252                           	psect	text71
 19253  00481C                     __ptext71:
 19254                           	opt stack 0
 19255  00481C                     _command:
 19256                           	opt stack 15
 19257                           
 19258                           ;incstack = 0
 19259                           ;command@CMD stored from wreg
 19260  00481C  0100               	movlb	0	; () banked
 19261  00481E  6F6A               	movwf	command@CMD& (0+255),b
 19262                           
 19263                           ;SDCard.c: 127: unsigned char argument;
 19264                           ;SDCard.c: 129: if (wait_ready() != 0xFF)
 19265  004820  ECA7  F026         	call	_wait_ready	;wreg free
 19266  004824  0AFF               	xorlw	255
 19267  004826  A4D8               	btfss	status,2,c
 19268  004828  D004               	goto	l325
 19269  00482A  D008               	goto	u10700
 19270  00482C                     
 19271                           ;SDCard.c: 132: {
 19272                           ;SDCard.c: 133: dummy_clocks(10);
 19273  00482C  0E0A               	movlw	10
 19274  00482E  EC27  F026         	call	_dummy_clocks
 19275  004832                     l325:
 19276  004832  ECA7  F026         	call	_wait_ready	;wreg free
 19277  004836  0AFF               	xorlw	255
 19278  004838  A4D8               	btfss	status,2,c
 19279  00483A  D7F8               	goto	l326
 19280  00483C                     u10700:
 19281                           
 19282                           ;SDCard.c: 134: }
 19283                           ;SDCard.c: 135: }
 19284                           ;SDCard.c: 136: escreve_SPI(0xFF);
 19285  00483C  0EFF               	movlw	255
 19286  00483E  ECD3  F027         	call	_escreve_SPI
 19287                           
 19288                           ;SDCard.c: 137: escreve_SPI(CMD);
 19289  004842  0100               	movlb	0	; () banked
 19290  004844  516A               	movf	command@CMD& (0+255),w,b
 19291  004846  ECD3  F027         	call	_escreve_SPI
 19292                           
 19293                           ;SDCard.c: 138: argument = arg>>24;
 19294  00484A  C068  F06B         	movff	command@arg+3,command@argument
 19295                           
 19296                           ;SDCard.c: 139: escreve_SPI(argument);
 19297  00484E  0100               	movlb	0	; () banked
 19298  004850  516B               	movf	command@argument& (0+255),w,b
 19299  004852  ECD3  F027         	call	_escreve_SPI
 19300                           
 19301                           ;SDCard.c: 140: argument = arg>>16;
 19302  004856  C067  F06B         	movff	command@arg+2,command@argument
 19303                           
 19304                           ;SDCard.c: 141: escreve_SPI(argument);
 19305  00485A  0100               	movlb	0	; () banked
 19306  00485C  516B               	movf	command@argument& (0+255),w,b
 19307  00485E  ECD3  F027         	call	_escreve_SPI
 19308                           
 19309                           ;SDCard.c: 142: argument = arg>>8;
 19310  004862  C066  F06B         	movff	command@arg+1,command@argument
 19311                           
 19312                           ;SDCard.c: 143: escreve_SPI(argument);
 19313  004866  0100               	movlb	0	; () banked
 19314  004868  516B               	movf	command@argument& (0+255),w,b
 19315  00486A  ECD3  F027         	call	_escreve_SPI
 19316                           
 19317                           ;SDCard.c: 144: argument = arg;
 19318  00486E  C065  F06B         	movff	command@arg,command@argument
 19319                           
 19320                           ;SDCard.c: 145: escreve_SPI(argument);
 19321  004872  0100               	movlb	0	; () banked
 19322  004874  516B               	movf	command@argument& (0+255),w,b
 19323  004876  ECD3  F027         	call	_escreve_SPI
 19324                           
 19325                           ;SDCard.c: 146: escreve_SPI(CRC);
 19326  00487A  0100               	movlb	0	; () banked
 19327  00487C  5169               	movf	command@CRC& (0+255),w,b
 19328  00487E  ECD3  F027         	call	_escreve_SPI
 19329  004882  0012               	return		;funcret
 19330  004884                     __end_of_command:
 19331                           	opt stack 0
 19332                           tosu	equ	0xFFF
 19333                           tosh	equ	0xFFE
 19334                           tosl	equ	0xFFD
 19335                           pclath	equ	0xFFA
 19336                           tblptru	equ	0xFF8
 19337                           tblptrh	equ	0xFF7
 19338                           tblptrl	equ	0xFF6
 19339                           tablat	equ	0xFF5
 19340                           prodh	equ	0xFF4
 19341                           prodl	equ	0xFF3
 19342                           intcon	equ	0xFF2
 19343                           intcon2	equ	0xFF1
 19344                           intcon3	equ	0xFF0
 19345                           indf0	equ	0xFEF
 19346                           postinc0	equ	0xFEE
 19347                           fsr0h	equ	0xFEA
 19348                           fsr0l	equ	0xFE9
 19349                           wreg	equ	0xFE8
 19350                           indf1	equ	0xFE7
 19351                           postinc1	equ	0xFE6
 19352                           postdec1	equ	0xFE5
 19353                           plusw1	equ	0xFE3
 19354                           fsr1h	equ	0xFE2
 19355                           fsr1l	equ	0xFE1
 19356                           indf2	equ	0xFDF
 19357                           postinc2	equ	0xFDE
 19358                           postdec2	equ	0xFDD
 19359                           plusw2	equ	0xFDB
 19360                           fsr2h	equ	0xFDA
 19361                           fsr2l	equ	0xFD9
 19362                           status	equ	0xFD8
 19363                           
 19364 ;; *************** function _wait_ready *****************
 19365 ;; Defined at:
 19366 ;;		line 105 in file "bibliotecas/SDCard.c"
 19367 ;; Parameters:    Size  Location     Type
 19368 ;;		None
 19369 ;; Auto vars:     Size  Location     Type
 19370 ;;  msg            10    0        unsigned char [10]
 19371 ;;  timeout         4    0[BANK0 ] unsigned long 
 19372 ;;  res             1    4[BANK0 ] unsigned char 
 19373 ;; Return value:  Size  Location     Type
 19374 ;;                  1    wreg      unsigned char 
 19375 ;; Registers used:
 19376 ;;		wreg, status,2, status,0, cstack
 19377 ;; Tracked objects:
 19378 ;;		On entry : 0/0
 19379 ;;		On exit  : 0/0
 19380 ;;		Unchanged: 0/0
 19381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19382 ;;      Params:         0       0       0       0       0       0       0       0       0
 19383 ;;      Locals:         0       5       0       0       0       0       0       0       0
 19384 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19385 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19386 ;;Total ram usage:        5 bytes
 19387 ;; Hardware stack levels used:    1
 19388 ;; Hardware stack levels required when called:    4
 19389 ;; This function calls:
 19390 ;;		_leitura_SPI
 19391 ;; This function is called by:
 19392 ;;		_command
 19393 ;; This function uses a non-reentrant model
 19394 ;;
 19395                           
 19396                           	psect	text72
 19397  004D4E                     __ptext72:
 19398                           	opt stack 0
 19399  004D4E                     _wait_ready:
 19400                           	opt stack 15
 19401                           
 19402                           ;SDCard.c: 107: BYTE res;
 19403                           ;SDCard.c: 108: DWORD timeout = 0x7FFF;
 19404                           
 19405                           ;incstack = 0
 19406  004D4E  0EFF               	movlw	255
 19407  004D50  0100               	movlb	0	; () banked
 19408  004D52  6F60               	movwf	wait_ready@timeout& (0+255),b
 19409  004D54  0E7F               	movlw	127
 19410  004D56  6F61               	movwf	(wait_ready@timeout+1)& (0+255),b
 19411  004D58  0E00               	movlw	0
 19412  004D5A  6F62               	movwf	(wait_ready@timeout+2)& (0+255),b
 19413  004D5C  0E00               	movlw	0
 19414  004D5E  6F63               	movwf	(wait_ready@timeout+3)& (0+255),b
 19415  004D60                     
 19416                           ; BSR set to: 0
 19417                           ;SDCard.c: 112: res = leitura_SPI();
 19418                           
 19419                           ; BSR set to: 0
 19420  004D60  EC27  F028         	call	_leitura_SPI	;wreg free
 19421  004D64  0100               	movlb	0	; () banked
 19422  004D66  6F64               	movwf	wait_ready@res& (0+255),b
 19423                           
 19424                           ; BSR set to: 0
 19425                           ;SDCard.c: 113: while ((res != 0xFF) && (--timeout));
 19426  004D68  2964               	incf	wait_ready@res& (0+255),w,b
 19427  004D6A  B4D8               	btfsc	status,2,c
 19428  004D6C  D00B               	goto	u10680
 19429                           
 19430                           ; BSR set to: 0
 19431  004D6E  0760               	decf	wait_ready@timeout& (0+255),f,b
 19432  004D70  0E00               	movlw	0
 19433  004D72  5B61               	subwfb	(wait_ready@timeout+1)& (0+255),f,b
 19434  004D74  5B62               	subwfb	(wait_ready@timeout+2)& (0+255),f,b
 19435  004D76  5B63               	subwfb	(wait_ready@timeout+3)& (0+255),f,b
 19436  004D78  5160               	movf	wait_ready@timeout& (0+255),w,b
 19437  004D7A  1161               	iorwf	(wait_ready@timeout+1)& (0+255),w,b
 19438  004D7C  1162               	iorwf	(wait_ready@timeout+2)& (0+255),w,b
 19439  004D7E  1163               	iorwf	(wait_ready@timeout+3)& (0+255),w,b
 19440  004D80  A4D8               	btfss	status,2,c
 19441  004D82  D7EE               	goto	l317
 19442  004D84                     u10680:
 19443                           
 19444                           ; BSR set to: 0
 19445                           ;SDCard.c: 115: return res;
 19446                           
 19447                           ; BSR set to: 0
 19448                           
 19449                           ; BSR set to: 0
 19450  004D84  5164               	movf	wait_ready@res& (0+255),w,b
 19451  004D86  0012               	return	
 19452  004D88                     __end_of_wait_ready:
 19453                           	opt stack 0
 19454                           tosu	equ	0xFFF
 19455                           tosh	equ	0xFFE
 19456                           tosl	equ	0xFFD
 19457                           pclath	equ	0xFFA
 19458                           tblptru	equ	0xFF8
 19459                           tblptrh	equ	0xFF7
 19460                           tblptrl	equ	0xFF6
 19461                           tablat	equ	0xFF5
 19462                           prodh	equ	0xFF4
 19463                           prodl	equ	0xFF3
 19464                           intcon	equ	0xFF2
 19465                           intcon2	equ	0xFF1
 19466                           intcon3	equ	0xFF0
 19467                           indf0	equ	0xFEF
 19468                           postinc0	equ	0xFEE
 19469                           fsr0h	equ	0xFEA
 19470                           fsr0l	equ	0xFE9
 19471                           wreg	equ	0xFE8
 19472                           indf1	equ	0xFE7
 19473                           postinc1	equ	0xFE6
 19474                           postdec1	equ	0xFE5
 19475                           plusw1	equ	0xFE3
 19476                           fsr1h	equ	0xFE2
 19477                           fsr1l	equ	0xFE1
 19478                           indf2	equ	0xFDF
 19479                           postinc2	equ	0xFDE
 19480                           postdec2	equ	0xFDD
 19481                           plusw2	equ	0xFDB
 19482                           fsr2h	equ	0xFDA
 19483                           fsr2l	equ	0xFD9
 19484                           status	equ	0xFD8
 19485                           
 19486 ;; *************** function _escreve_SPI *****************
 19487 ;; Defined at:
 19488 ;;		line 98 in file "bibliotecas/SPI.c"
 19489 ;; Parameters:    Size  Location     Type
 19490 ;;  dado            1    wreg     unsigned char 
 19491 ;; Auto vars:     Size  Location     Type
 19492 ;;  dado            1    1[BANK0 ] unsigned char 
 19493 ;;  TempVar         1    0[BANK0 ] unsigned char 
 19494 ;; Return value:  Size  Location     Type
 19495 ;;                  1    wreg      void 
 19496 ;; Registers used:
 19497 ;;		wreg
 19498 ;; Tracked objects:
 19499 ;;		On entry : 0/0
 19500 ;;		On exit  : 0/0
 19501 ;;		Unchanged: 0/0
 19502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19503 ;;      Params:         0       0       0       0       0       0       0       0       0
 19504 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19505 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19506 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19507 ;;Total ram usage:        2 bytes
 19508 ;; Hardware stack levels used:    1
 19509 ;; Hardware stack levels required when called:    3
 19510 ;; This function calls:
 19511 ;;		Nothing
 19512 ;; This function is called by:
 19513 ;;		_proceed
 19514 ;;		_command
 19515 ;;		_sdc_disk_write
 19516 ;; This function uses a non-reentrant model
 19517 ;;
 19518                           
 19519                           	psect	text73
 19520  004FA6                     __ptext73:
 19521                           	opt stack 0
 19522  004FA6                     _escreve_SPI:
 19523                           	opt stack 16
 19524                           
 19525                           ; BSR set to: 0
 19526                           ;incstack = 0
 19527                           ;escreve_SPI@dado stored from wreg
 19528  004FA6  0100               	movlb	0	; () banked
 19529  004FA8  6F61               	movwf	escreve_SPI@dado& (0+255),b
 19530                           
 19531                           ;SPI.c: 100: unsigned char TempVar;
 19532                           ;SPI.c: 101: TempVar = SSPBUF;
 19533  004FAA  CFC9 F060          	movff	4041,escreve_SPI@TempVar	;volatile
 19534                           
 19535                           ;SPI.c: 102: PIR1bits.SSPIF = 0;
 19536  004FAE  969E               	bcf	3998,3,c	;volatile
 19537                           
 19538                           ;SPI.c: 104: SSPBUF = dado;
 19539  004FB0  C061  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 19540  004FB4  B69E               	btfsc	3998,3,c	;volatile
 19541  004FB6  0012               	return	
 19542  004FB8  D7FD               	goto	l404
 19543  004FBA                     __end_of_escreve_SPI:
 19544                           	opt stack 0
 19545                           tosu	equ	0xFFF
 19546                           tosh	equ	0xFFE
 19547                           tosl	equ	0xFFD
 19548                           pclath	equ	0xFFA
 19549                           tblptru	equ	0xFF8
 19550                           tblptrh	equ	0xFF7
 19551                           tblptrl	equ	0xFF6
 19552                           tablat	equ	0xFF5
 19553                           prodh	equ	0xFF4
 19554                           prodl	equ	0xFF3
 19555                           intcon	equ	0xFF2
 19556                           intcon2	equ	0xFF1
 19557                           intcon3	equ	0xFF0
 19558                           indf0	equ	0xFEF
 19559                           postinc0	equ	0xFEE
 19560                           fsr0h	equ	0xFEA
 19561                           fsr0l	equ	0xFE9
 19562                           wreg	equ	0xFE8
 19563                           indf1	equ	0xFE7
 19564                           postinc1	equ	0xFE6
 19565                           postdec1	equ	0xFE5
 19566                           plusw1	equ	0xFE3
 19567                           fsr1h	equ	0xFE2
 19568                           fsr1l	equ	0xFE1
 19569                           indf2	equ	0xFDF
 19570                           postinc2	equ	0xFDE
 19571                           postdec2	equ	0xFDD
 19572                           plusw2	equ	0xFDB
 19573                           fsr2h	equ	0xFDA
 19574                           fsr2l	equ	0xFD9
 19575                           status	equ	0xFD8
 19576                           
 19577 ;; *************** function _dummy_clocks *****************
 19578 ;; Defined at:
 19579 ;;		line 74 in file "bibliotecas/SDCard.c"
 19580 ;; Parameters:    Size  Location     Type
 19581 ;;  n               1    wreg     unsigned char 
 19582 ;; Auto vars:     Size  Location     Type
 19583 ;;  n               1    2[BANK0 ] unsigned char 
 19584 ;;  i               2    3[BANK0 ] unsigned int 
 19585 ;; Return value:  Size  Location     Type
 19586 ;;                  1    wreg      void 
 19587 ;; Registers used:
 19588 ;;		wreg, status,2, status,0, cstack
 19589 ;; Tracked objects:
 19590 ;;		On entry : 0/0
 19591 ;;		On exit  : 0/0
 19592 ;;		Unchanged: 0/0
 19593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19594 ;;      Params:         0       0       0       0       0       0       0       0       0
 19595 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19596 ;;      Temps:          0       2       0       0       0       0       0       0       0
 19597 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19598 ;;Total ram usage:        5 bytes
 19599 ;; Hardware stack levels used:    1
 19600 ;; Hardware stack levels required when called:    4
 19601 ;; This function calls:
 19602 ;;		_leitura_SPI
 19603 ;; This function is called by:
 19604 ;;		_command
 19605 ;;		_sdc_disk_initialize
 19606 ;;		_sdc_disk_read
 19607 ;;		_sdc_disk_write
 19608 ;; This function uses a non-reentrant model
 19609 ;;
 19610                           
 19611                           	psect	text74
 19612  004C4E                     __ptext74:
 19613                           	opt stack 0
 19614  004C4E                     _dummy_clocks:
 19615                           	opt stack 16
 19616                           
 19617                           ;incstack = 0
 19618                           ;dummy_clocks@n stored from wreg
 19619  004C4E  0100               	movlb	0	; () banked
 19620  004C50  6F62               	movwf	dummy_clocks@n& (0+255),b
 19621                           
 19622                           ;SDCard.c: 76: unsigned int i;
 19623                           ;SDCard.c: 77: _delay((unsigned long)((1)*(48000000/4000.0)));
 19624  004C52  0E10               	movlw	16
 19625  004C54  0100               	movlb	0	; () banked
 19626  004C56  6F60               	movwf	??_dummy_clocks& (0+255),b
 19627  004C58  0E94               	movlw	148
 19628  004C5A                     u15427:
 19629  004C5A  2EE8               	decfsz	wreg,f,c
 19630  004C5C  D7FE               	bra	u15427
 19631  004C5E  2F60               	decfsz	??_dummy_clocks& (0+255),f,b
 19632  004C60  D7FC               	bra	u15427
 19633  004C62  F000               	nop	
 19634                           
 19635                           ;SDCard.c: 78: for(i=0;i<n;i++)
 19636  004C64  0E00               	movlw	0
 19637  004C66  0100               	movlb	0	; () banked
 19638  004C68  6F64               	movwf	(dummy_clocks@i+1)& (0+255),b
 19639  004C6A  0E00               	movlw	0
 19640  004C6C  6F63               	movwf	dummy_clocks@i& (0+255),b
 19641  004C6E  D007               	goto	l308
 19642  004C70                     l309:
 19643                           
 19644                           ; BSR set to: 0
 19645                           ;SDCard.c: 79: {
 19646                           ;SDCard.c: 80: LATBbits.LATB4 = 1;
 19647  004C70  888A               	bsf	3978,4,c	;volatile
 19648                           
 19649                           ; BSR set to: 0
 19650                           ;SDCard.c: 81: leitura_SPI();
 19651  004C72  EC27  F028         	call	_leitura_SPI	;wreg free
 19652                           
 19653                           ;SDCard.c: 82: LATBbits.LATB4 = 0;
 19654  004C76  988A               	bcf	3978,4,c	;volatile
 19655  004C78  0100               	movlb	0	; () banked
 19656  004C7A  4B63               	infsnz	dummy_clocks@i& (0+255),f,b
 19657  004C7C  2B64               	incf	(dummy_clocks@i+1)& (0+255),f,b
 19658  004C7E                     l308:
 19659                           
 19660                           ; BSR set to: 0
 19661                           
 19662                           ; BSR set to: 0
 19663  004C7E  5162               	movf	dummy_clocks@n& (0+255),w,b
 19664  004C80  6F60               	movwf	??_dummy_clocks& (0+255),b
 19665  004C82  6B61               	clrf	(??_dummy_clocks+1)& (0+255),b
 19666  004C84  5160               	movf	??_dummy_clocks& (0+255),w,b
 19667  004C86  5D63               	subwf	dummy_clocks@i& (0+255),w,b
 19668  004C88  5161               	movf	(??_dummy_clocks+1)& (0+255),w,b
 19669  004C8A  5964               	subwfb	(dummy_clocks@i+1)& (0+255),w,b
 19670  004C8C  B0D8               	btfsc	status,0,c
 19671  004C8E  0012               	return	
 19672  004C90  D7EF               	goto	l309
 19673  004C92                     __end_of_dummy_clocks:
 19674                           	opt stack 0
 19675                           tosu	equ	0xFFF
 19676                           tosh	equ	0xFFE
 19677                           tosl	equ	0xFFD
 19678                           pclath	equ	0xFFA
 19679                           tblptru	equ	0xFF8
 19680                           tblptrh	equ	0xFF7
 19681                           tblptrl	equ	0xFF6
 19682                           tablat	equ	0xFF5
 19683                           prodh	equ	0xFF4
 19684                           prodl	equ	0xFF3
 19685                           intcon	equ	0xFF2
 19686                           intcon2	equ	0xFF1
 19687                           intcon3	equ	0xFF0
 19688                           indf0	equ	0xFEF
 19689                           postinc0	equ	0xFEE
 19690                           fsr0h	equ	0xFEA
 19691                           fsr0l	equ	0xFE9
 19692                           wreg	equ	0xFE8
 19693                           indf1	equ	0xFE7
 19694                           postinc1	equ	0xFE6
 19695                           postdec1	equ	0xFE5
 19696                           plusw1	equ	0xFE3
 19697                           fsr1h	equ	0xFE2
 19698                           fsr1l	equ	0xFE1
 19699                           indf2	equ	0xFDF
 19700                           postinc2	equ	0xFDE
 19701                           postdec2	equ	0xFDD
 19702                           plusw2	equ	0xFDB
 19703                           fsr2h	equ	0xFDA
 19704                           fsr2l	equ	0xFD9
 19705                           status	equ	0xFD8
 19706                           
 19707 ;; *************** function _leitura_SPI *****************
 19708 ;; Defined at:
 19709 ;;		line 83 in file "bibliotecas/SPI.c"
 19710 ;; Parameters:    Size  Location     Type
 19711 ;;		None
 19712 ;; Auto vars:     Size  Location     Type
 19713 ;;		None
 19714 ;; Return value:  Size  Location     Type
 19715 ;;                  1    wreg      unsigned char 
 19716 ;; Registers used:
 19717 ;;		wreg, status,2
 19718 ;; Tracked objects:
 19719 ;;		On entry : 0/0
 19720 ;;		On exit  : 0/0
 19721 ;;		Unchanged: 0/0
 19722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19723 ;;      Params:         0       0       0       0       0       0       0       0       0
 19724 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19725 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19726 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19727 ;;Total ram usage:        0 bytes
 19728 ;; Hardware stack levels used:    1
 19729 ;; Hardware stack levels required when called:    3
 19730 ;; This function calls:
 19731 ;;		Nothing
 19732 ;; This function is called by:
 19733 ;;		_response
 19734 ;;		_dummy_clocks
 19735 ;;		_wait_ready
 19736 ;;		_sdc_disk_write
 19737 ;; This function uses a non-reentrant model
 19738 ;;
 19739                           
 19740                           	psect	text75
 19741  00504E                     __ptext75:
 19742                           	opt stack 0
 19743  00504E                     _leitura_SPI:
 19744                           	opt stack 16
 19745                           
 19746                           ;SPI.c: 85: SSPBUF = 0xFF;
 19747                           
 19748                           ; BSR set to: 0
 19749                           ;incstack = 0
 19750  00504E  68C9               	setf	4041,c	;volatile
 19751                           
 19752                           ;SPI.c: 86: SSPSTATbits.BF = 0;
 19753  005050  90C7               	bcf	4039,0,c	;volatile
 19754  005052  A0C7               	btfss	4039,0,c	;volatile
 19755  005054  D7FE               	goto	l398
 19756                           
 19757                           ;SPI.c: 88: return (SSPBUF);
 19758  005056  50C9               	movf	4041,w,c	;volatile
 19759  005058  0012               	return	
 19760  00505A                     __end_of_leitura_SPI:
 19761                           	opt stack 0
 19762                           tosu	equ	0xFFF
 19763                           tosh	equ	0xFFE
 19764                           tosl	equ	0xFFD
 19765                           pclath	equ	0xFFA
 19766                           tblptru	equ	0xFF8
 19767                           tblptrh	equ	0xFF7
 19768                           tblptrl	equ	0xFF6
 19769                           tablat	equ	0xFF5
 19770                           prodh	equ	0xFF4
 19771                           prodl	equ	0xFF3
 19772                           intcon	equ	0xFF2
 19773                           intcon2	equ	0xFF1
 19774                           intcon3	equ	0xFF0
 19775                           indf0	equ	0xFEF
 19776                           postinc0	equ	0xFEE
 19777                           fsr0h	equ	0xFEA
 19778                           fsr0l	equ	0xFE9
 19779                           wreg	equ	0xFE8
 19780                           indf1	equ	0xFE7
 19781                           postinc1	equ	0xFE6
 19782                           postdec1	equ	0xFE5
 19783                           plusw1	equ	0xFE3
 19784                           fsr1h	equ	0xFE2
 19785                           fsr1l	equ	0xFE1
 19786                           indf2	equ	0xFDF
 19787                           postinc2	equ	0xFDE
 19788                           postdec2	equ	0xFDD
 19789                           plusw2	equ	0xFDB
 19790                           fsr2h	equ	0xFDA
 19791                           fsr2l	equ	0xFD9
 19792                           status	equ	0xFD8
 19793                           
 19794 ;; *************** function _disk_ioctl *****************
 19795 ;; Defined at:
 19796 ;;		line 198 in file "bibliotecas/diskio.c"
 19797 ;; Parameters:    Size  Location     Type
 19798 ;;  pdrv            1    wreg     unsigned char 
 19799 ;;  cmd             1    0[BANK0 ] unsigned char 
 19800 ;;  buff            2    1[BANK0 ] PTR void 
 19801 ;;		 -> NULL(0), 
 19802 ;; Auto vars:     Size  Location     Type
 19803 ;;  pdrv            1    3[BANK0 ] unsigned char 
 19804 ;;  result          2    0        int 
 19805 ;;  res             1    4[BANK0 ] enum E25
 19806 ;; Return value:  Size  Location     Type
 19807 ;;                  1    wreg      enum E25
 19808 ;; Registers used:
 19809 ;;		wreg, status,2, status,0
 19810 ;; Tracked objects:
 19811 ;;		On entry : 0/0
 19812 ;;		On exit  : 0/0
 19813 ;;		Unchanged: 0/0
 19814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19815 ;;      Params:         0       3       0       0       0       0       0       0       0
 19816 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19817 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19818 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19819 ;;Total ram usage:        5 bytes
 19820 ;; Hardware stack levels used:    1
 19821 ;; Hardware stack levels required when called:    3
 19822 ;; This function calls:
 19823 ;;		Nothing
 19824 ;; This function is called by:
 19825 ;;		_sync
 19826 ;; This function uses a non-reentrant model
 19827 ;;
 19828                           
 19829                           	psect	text76
 19830  004E46                     __ptext76:
 19831                           	opt stack 0
 19832  004E46                     _disk_ioctl:
 19833                           	opt stack 21
 19834                           
 19835                           ;incstack = 0
 19836                           ;disk_ioctl@pdrv stored from wreg
 19837  004E46  0100               	movlb	0	; () banked
 19838  004E48  6F63               	movwf	disk_ioctl@pdrv& (0+255),b
 19839                           
 19840                           ;diskio.c: 204: DRESULT res;
 19841                           ;diskio.c: 205: int result;
 19842                           ;diskio.c: 207: switch (pdrv) {
 19843  004E4A  D006               	goto	l473
 19844  004E4C                     l474:
 19845                           
 19846                           ; BSR set to: 0
 19847                           ;diskio.c: 212: return res;
 19848  004E4C  5164               	movf	disk_ioctl@res& (0+255),w,b
 19849  004E4E  0012               	return	
 19850  004E50                     l476:
 19851                           
 19852                           ; BSR set to: 0
 19853                           ;diskio.c: 218: return res;
 19854  004E50  5164               	movf	disk_ioctl@res& (0+255),w,b
 19855  004E52  0012               	return	
 19856  004E54                     l477:
 19857                           
 19858                           ; BSR set to: 0
 19859                           ;diskio.c: 224: return res;
 19860  004E54  5164               	movf	disk_ioctl@res& (0+255),w,b
 19861  004E56  0012               	return	
 19862  004E58                     l473:
 19863                           
 19864                           ; BSR set to: 0
 19865  004E58  0100               	movlb	0	; () banked
 19866  004E5A  5163               	movf	disk_ioctl@pdrv& (0+255),w,b
 19867                           
 19868                           ; Switch size 1, requested type "space"
 19869                           ; Number of cases is 3, Range of values is 0 to 2
 19870                           ; switch strategies available:
 19871                           ; Name         Instructions Cycles
 19872                           ; simple_byte           10     6 (average)
 19873                           ;	Chosen strategy is simple_byte
 19874  004E5C  0A00               	xorlw	0	; case 0
 19875  004E5E  B4D8               	btfsc	status,2,c
 19876  004E60  D7F5               	goto	l474
 19877  004E62  0A01               	xorlw	1	; case 1
 19878  004E64  B4D8               	btfsc	status,2,c
 19879  004E66  D7F4               	goto	l476
 19880  004E68  0A03               	xorlw	3	; case 2
 19881  004E6A  B4D8               	btfsc	status,2,c
 19882  004E6C  D7F3               	goto	l477
 19883                           
 19884                           ; BSR set to: 0
 19885                           ;diskio.c: 227: return RES_PARERR;
 19886                           
 19887                           ; BSR set to: 0
 19888  004E6E  0E04               	movlw	4
 19889  004E70  0012               	return	
 19890  004E72                     __end_of_disk_ioctl:
 19891                           	opt stack 0
 19892                           tosu	equ	0xFFF
 19893                           tosh	equ	0xFFE
 19894                           tosl	equ	0xFFD
 19895                           pclath	equ	0xFFA
 19896                           tblptru	equ	0xFF8
 19897                           tblptrh	equ	0xFF7
 19898                           tblptrl	equ	0xFF6
 19899                           tablat	equ	0xFF5
 19900                           prodh	equ	0xFF4
 19901                           prodl	equ	0xFF3
 19902                           intcon	equ	0xFF2
 19903                           intcon2	equ	0xFF1
 19904                           intcon3	equ	0xFF0
 19905                           indf0	equ	0xFEF
 19906                           postinc0	equ	0xFEE
 19907                           fsr0h	equ	0xFEA
 19908                           fsr0l	equ	0xFE9
 19909                           wreg	equ	0xFE8
 19910                           indf1	equ	0xFE7
 19911                           postinc1	equ	0xFE6
 19912                           postdec1	equ	0xFE5
 19913                           plusw1	equ	0xFE3
 19914                           fsr1h	equ	0xFE2
 19915                           fsr1l	equ	0xFE1
 19916                           indf2	equ	0xFDF
 19917                           postinc2	equ	0xFDE
 19918                           postdec2	equ	0xFDD
 19919                           plusw2	equ	0xFDB
 19920                           fsr2h	equ	0xFDA
 19921                           fsr2l	equ	0xFD9
 19922                           status	equ	0xFD8
 19923                           
 19924 ;; *************** function _get_fattime *****************
 19925 ;; Defined at:
 19926 ;;		line 809 in file "bibliotecas/tff.c"
 19927 ;; Parameters:    Size  Location     Type
 19928 ;;		None
 19929 ;; Auto vars:     Size  Location     Type
 19930 ;;  f_time          9   42[BANK0 ] struct .
 19931 ;; Return value:  Size  Location     Type
 19932 ;;                  4    0[BANK0 ] unsigned long 
 19933 ;; Registers used:
 19934 ;;		wreg, status,2, status,0
 19935 ;; Tracked objects:
 19936 ;;		On entry : 0/0
 19937 ;;		On exit  : 0/0
 19938 ;;		Unchanged: 0/0
 19939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19940 ;;      Params:         0       4       0       0       0       0       0       0       0
 19941 ;;      Locals:         0       9       0       0       0       0       0       0       0
 19942 ;;      Temps:          0      38       0       0       0       0       0       0       0
 19943 ;;      Totals:         0      51       0       0       0       0       0       0       0
 19944 ;;Total ram usage:       51 bytes
 19945 ;; Hardware stack levels used:    1
 19946 ;; Hardware stack levels required when called:    3
 19947 ;; This function calls:
 19948 ;;		Nothing
 19949 ;; This function is called by:
 19950 ;;		_f_open
 19951 ;;		_f_sync
 19952 ;; This function uses a non-reentrant model
 19953 ;;
 19954                           
 19955                           	psect	text77
 19956  003B60                     __ptext77:
 19957                           	opt stack 0
 19958  003B60                     _get_fattime:
 19959                           	opt stack 23
 19960                           
 19961                           ;tff.c: 811: fat_time f_time;
 19962                           ;tff.c: 813: return (DWORD)(f_time.ano ) << 25 |
 19963                           ;tff.c: 814: (DWORD)(f_time.mes) << 21 |
 19964                           ;tff.c: 815: (DWORD)(f_time.mes) << 16 |
 19965                           ;tff.c: 816: (DWORD)(f_time.hora) << 11 |
 19966                           ;tff.c: 817: (DWORD)(f_time.min) << 5 |
 19967                           ;tff.c: 818: (DWORD)(f_time.seg) >> 1;
 19968                           
 19969                           ; BSR set to: 0
 19970                           ;incstack = 0
 19971  003B60  90D8               	bcf	status,0,c
 19972  003B62  0100               	movlb	0	; () banked
 19973  003B64  318F               	rrcf	(get_fattime@f_time+5)& (0+255),w,b
 19974  003B66  6F65               	movwf	(??_get_fattime+1)& (0+255),b
 19975  003B68  318E               	rrcf	(get_fattime@f_time+4)& (0+255),w,b
 19976  003B6A  6F64               	movwf	??_get_fattime& (0+255),b
 19977  003B6C  518C               	movf	(get_fattime@f_time+2)& (0+255),w,b
 19978  003B6E  6F66               	movwf	(??_get_fattime+2)& (0+255),b
 19979  003B70  518D               	movf	(get_fattime@f_time+3)& (0+255),w,b
 19980  003B72  6F67               	movwf	(??_get_fattime+3)& (0+255),b
 19981  003B74  6B68               	clrf	(??_get_fattime+4)& (0+255),b
 19982  003B76  6B69               	clrf	(??_get_fattime+5)& (0+255),b
 19983  003B78  0E05               	movlw	5
 19984  003B7A                     u12585:
 19985  003B7A  90D8               	bcf	status,0,c
 19986  003B7C  3766               	rlcf	(??_get_fattime+2)& (0+255),f,b
 19987  003B7E  3767               	rlcf	(??_get_fattime+3)& (0+255),f,b
 19988  003B80  3768               	rlcf	(??_get_fattime+4)& (0+255),f,b
 19989  003B82  3769               	rlcf	(??_get_fattime+5)& (0+255),f,b
 19990  003B84  2EE8               	decfsz	wreg,f,c
 19991  003B86  D7F9               	goto	u12585
 19992  003B88  518A               	movf	get_fattime@f_time& (0+255),w,b
 19993  003B8A  6F6A               	movwf	(??_get_fattime+6)& (0+255),b
 19994  003B8C  518B               	movf	(get_fattime@f_time+1)& (0+255),w,b
 19995  003B8E  6F6B               	movwf	(??_get_fattime+7)& (0+255),b
 19996  003B90  6B6C               	clrf	(??_get_fattime+8)& (0+255),b
 19997  003B92  6B6D               	clrf	(??_get_fattime+9)& (0+255),b
 19998  003B94  0E0B               	movlw	11
 19999  003B96                     u12595:
 20000  003B96  90D8               	bcf	status,0,c
 20001  003B98  376A               	rlcf	(??_get_fattime+6)& (0+255),f,b
 20002  003B9A  376B               	rlcf	(??_get_fattime+7)& (0+255),f,b
 20003  003B9C  376C               	rlcf	(??_get_fattime+8)& (0+255),f,b
 20004  003B9E  376D               	rlcf	(??_get_fattime+9)& (0+255),f,b
 20005  003BA0  2EE8               	decfsz	wreg,f,c
 20006  003BA2  D7F9               	goto	u12595
 20007  003BA4  C091  F06E         	movff	get_fattime@f_time+7,??_get_fattime+10
 20008  003BA8  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 20009  003BAA  6B70               	clrf	(??_get_fattime+12)& (0+255),b
 20010  003BAC  6B71               	clrf	(??_get_fattime+13)& (0+255),b
 20011  003BAE  C06F  F071         	movff	??_get_fattime+11,??_get_fattime+13
 20012  003BB2  C06E  F070         	movff	??_get_fattime+10,??_get_fattime+12
 20013  003BB6  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 20014  003BB8  6B6E               	clrf	(??_get_fattime+10)& (0+255),b
 20015  003BBA  C091  F072         	movff	get_fattime@f_time+7,??_get_fattime+14
 20016  003BBE  6B73               	clrf	(??_get_fattime+15)& (0+255),b
 20017  003BC0  6B74               	clrf	(??_get_fattime+16)& (0+255),b
 20018  003BC2  6B75               	clrf	(??_get_fattime+17)& (0+255),b
 20019  003BC4  0E15               	movlw	21
 20020  003BC6                     u12605:
 20021  003BC6  90D8               	bcf	status,0,c
 20022  003BC8  3772               	rlcf	(??_get_fattime+14)& (0+255),f,b
 20023  003BCA  3773               	rlcf	(??_get_fattime+15)& (0+255),f,b
 20024  003BCC  3774               	rlcf	(??_get_fattime+16)& (0+255),f,b
 20025  003BCE  3775               	rlcf	(??_get_fattime+17)& (0+255),f,b
 20026  003BD0  2EE8               	decfsz	wreg,f,c
 20027  003BD2  D7F9               	goto	u12605
 20028  003BD4  C092  F076         	movff	get_fattime@f_time+8,??_get_fattime+18
 20029  003BD8  6B77               	clrf	(??_get_fattime+19)& (0+255),b
 20030  003BDA  6B78               	clrf	(??_get_fattime+20)& (0+255),b
 20031  003BDC  6B79               	clrf	(??_get_fattime+21)& (0+255),b
 20032  003BDE  0E19               	movlw	25
 20033  003BE0                     u12615:
 20034  003BE0  90D8               	bcf	status,0,c
 20035  003BE2  3776               	rlcf	(??_get_fattime+18)& (0+255),f,b
 20036  003BE4  3777               	rlcf	(??_get_fattime+19)& (0+255),f,b
 20037  003BE6  3778               	rlcf	(??_get_fattime+20)& (0+255),f,b
 20038  003BE8  3779               	rlcf	(??_get_fattime+21)& (0+255),f,b
 20039  003BEA  2EE8               	decfsz	wreg,f,c
 20040  003BEC  D7F9               	goto	u12615
 20041  003BEE  5172               	movf	(??_get_fattime+14)& (0+255),w,b
 20042  003BF0  1176               	iorwf	(??_get_fattime+18)& (0+255),w,b
 20043  003BF2  6F7A               	movwf	(??_get_fattime+22)& (0+255),b
 20044  003BF4  5173               	movf	(??_get_fattime+15)& (0+255),w,b
 20045  003BF6  1177               	iorwf	(??_get_fattime+19)& (0+255),w,b
 20046  003BF8  6F7B               	movwf	(??_get_fattime+23)& (0+255),b
 20047  003BFA  5174               	movf	(??_get_fattime+16)& (0+255),w,b
 20048  003BFC  1178               	iorwf	(??_get_fattime+20)& (0+255),w,b
 20049  003BFE  6F7C               	movwf	(??_get_fattime+24)& (0+255),b
 20050  003C00  5175               	movf	(??_get_fattime+17)& (0+255),w,b
 20051  003C02  1179               	iorwf	(??_get_fattime+21)& (0+255),w,b
 20052  003C04  6F7D               	movwf	(??_get_fattime+25)& (0+255),b
 20053  003C06  516E               	movf	(??_get_fattime+10)& (0+255),w,b
 20054  003C08  117A               	iorwf	(??_get_fattime+22)& (0+255),w,b
 20055  003C0A  6F7E               	movwf	(??_get_fattime+26)& (0+255),b
 20056  003C0C  516F               	movf	(??_get_fattime+11)& (0+255),w,b
 20057  003C0E  117B               	iorwf	(??_get_fattime+23)& (0+255),w,b
 20058  003C10  6F7F               	movwf	(??_get_fattime+27)& (0+255),b
 20059  003C12  5170               	movf	(??_get_fattime+12)& (0+255),w,b
 20060  003C14  117C               	iorwf	(??_get_fattime+24)& (0+255),w,b
 20061  003C16  6F80               	movwf	(??_get_fattime+28)& (0+255),b
 20062  003C18  5171               	movf	(??_get_fattime+13)& (0+255),w,b
 20063  003C1A  117D               	iorwf	(??_get_fattime+25)& (0+255),w,b
 20064  003C1C  6F81               	movwf	(??_get_fattime+29)& (0+255),b
 20065  003C1E  516A               	movf	(??_get_fattime+6)& (0+255),w,b
 20066  003C20  117E               	iorwf	(??_get_fattime+26)& (0+255),w,b
 20067  003C22  6F82               	movwf	(??_get_fattime+30)& (0+255),b
 20068  003C24  516B               	movf	(??_get_fattime+7)& (0+255),w,b
 20069  003C26  117F               	iorwf	(??_get_fattime+27)& (0+255),w,b
 20070  003C28  6F83               	movwf	(??_get_fattime+31)& (0+255),b
 20071  003C2A  516C               	movf	(??_get_fattime+8)& (0+255),w,b
 20072  003C2C  1180               	iorwf	(??_get_fattime+28)& (0+255),w,b
 20073  003C2E  6F84               	movwf	(??_get_fattime+32)& (0+255),b
 20074  003C30  516D               	movf	(??_get_fattime+9)& (0+255),w,b
 20075  003C32  1181               	iorwf	(??_get_fattime+29)& (0+255),w,b
 20076  003C34  6F85               	movwf	(??_get_fattime+33)& (0+255),b
 20077  003C36  5166               	movf	(??_get_fattime+2)& (0+255),w,b
 20078  003C38  1182               	iorwf	(??_get_fattime+30)& (0+255),w,b
 20079  003C3A  6F86               	movwf	(??_get_fattime+34)& (0+255),b
 20080  003C3C  5167               	movf	(??_get_fattime+3)& (0+255),w,b
 20081  003C3E  1183               	iorwf	(??_get_fattime+31)& (0+255),w,b
 20082  003C40  6F87               	movwf	(??_get_fattime+35)& (0+255),b
 20083  003C42  5168               	movf	(??_get_fattime+4)& (0+255),w,b
 20084  003C44  1184               	iorwf	(??_get_fattime+32)& (0+255),w,b
 20085  003C46  6F88               	movwf	(??_get_fattime+36)& (0+255),b
 20086  003C48  5169               	movf	(??_get_fattime+5)& (0+255),w,b
 20087  003C4A  1185               	iorwf	(??_get_fattime+33)& (0+255),w,b
 20088  003C4C  6F89               	movwf	(??_get_fattime+37)& (0+255),b
 20089  003C4E  5164               	movf	??_get_fattime& (0+255),w,b
 20090  003C50  1186               	iorwf	(??_get_fattime+34)& (0+255),w,b
 20091  003C52  6F60               	movwf	?_get_fattime& (0+255),b
 20092  003C54  5165               	movf	(??_get_fattime+1)& (0+255),w,b
 20093  003C56  1187               	iorwf	(??_get_fattime+35)& (0+255),w,b
 20094  003C58  6F61               	movwf	(?_get_fattime+1)& (0+255),b
 20095  003C5A  0E00               	movlw	0
 20096  003C5C  1188               	iorwf	(??_get_fattime+36)& (0+255),w,b
 20097  003C5E  6F62               	movwf	(?_get_fattime+2)& (0+255),b
 20098  003C60  0E00               	movlw	0
 20099  003C62  1189               	iorwf	(??_get_fattime+37)& (0+255),w,b
 20100  003C64  6F63               	movwf	(?_get_fattime+3)& (0+255),b
 20101  003C66  0012               	return	
 20102  003C68                     __end_of_get_fattime:
 20103                           	opt stack 0
 20104                           tosu	equ	0xFFF
 20105                           tosh	equ	0xFFE
 20106                           tosl	equ	0xFFD
 20107                           pclath	equ	0xFFA
 20108                           tblptru	equ	0xFF8
 20109                           tblptrh	equ	0xFF7
 20110                           tblptrl	equ	0xFF6
 20111                           tablat	equ	0xFF5
 20112                           prodh	equ	0xFF4
 20113                           prodl	equ	0xFF3
 20114                           intcon	equ	0xFF2
 20115                           intcon2	equ	0xFF1
 20116                           intcon3	equ	0xFF0
 20117                           indf0	equ	0xFEF
 20118                           postinc0	equ	0xFEE
 20119                           fsr0h	equ	0xFEA
 20120                           fsr0l	equ	0xFE9
 20121                           wreg	equ	0xFE8
 20122                           indf1	equ	0xFE7
 20123                           postinc1	equ	0xFE6
 20124                           postdec1	equ	0xFE5
 20125                           plusw1	equ	0xFE3
 20126                           fsr1h	equ	0xFE2
 20127                           fsr1l	equ	0xFE1
 20128                           indf2	equ	0xFDF
 20129                           postinc2	equ	0xFDE
 20130                           postdec2	equ	0xFDD
 20131                           plusw2	equ	0xFDB
 20132                           fsr2h	equ	0xFDA
 20133                           fsr2l	equ	0xFD9
 20134                           status	equ	0xFD8
 20135                           
 20136 ;; *************** function _desliga_uart *****************
 20137 ;; Defined at:
 20138 ;;		line 219 in file "bibliotecas/uart.c"
 20139 ;; Parameters:    Size  Location     Type
 20140 ;;		None
 20141 ;; Auto vars:     Size  Location     Type
 20142 ;;		None
 20143 ;; Return value:  Size  Location     Type
 20144 ;;                  1    wreg      void 
 20145 ;; Registers used:
 20146 ;;		wreg, status,2
 20147 ;; Tracked objects:
 20148 ;;		On entry : 0/0
 20149 ;;		On exit  : 0/0
 20150 ;;		Unchanged: 0/0
 20151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20152 ;;      Params:         0       0       0       0       0       0       0       0       0
 20153 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20154 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20155 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20156 ;;Total ram usage:        0 bytes
 20157 ;; Hardware stack levels used:    1
 20158 ;; Hardware stack levels required when called:    3
 20159 ;; This function calls:
 20160 ;;		Nothing
 20161 ;; This function is called by:
 20162 ;;		_escrita_sdcard
 20163 ;;		_sdcard_init
 20164 ;;		_leitura_sdcard
 20165 ;; This function uses a non-reentrant model
 20166 ;;
 20167                           
 20168                           	psect	text78
 20169  005010                     __ptext78:
 20170                           	opt stack 0
 20171  005010                     _desliga_uart:
 20172                           	opt stack 24
 20173                           
 20174                           ;uart.c: 221: TRISCbits.RC6 = 1;
 20175                           
 20176                           ; BSR set to: 0
 20177                           ;incstack = 0
 20178  005010  8C94               	bsf	3988,6,c	;volatile
 20179                           
 20180                           ;uart.c: 222: TRISCbits.RC7 = 1;
 20181  005012  8E94               	bsf	3988,7,c	;volatile
 20182                           
 20183                           ;uart.c: 225: TXSTA = 0x00;
 20184  005014  0E00               	movlw	0
 20185  005016  6EAC               	movwf	4012,c	;volatile
 20186                           
 20187                           ;uart.c: 227: RCSTA = 0x00;
 20188  005018  0E00               	movlw	0
 20189  00501A  6EAB               	movwf	4011,c	;volatile
 20190  00501C  0012               	return		;funcret
 20191  00501E                     __end_of_desliga_uart:
 20192                           	opt stack 0
 20193                           tosu	equ	0xFFF
 20194                           tosh	equ	0xFFE
 20195                           tosl	equ	0xFFD
 20196                           pclath	equ	0xFFA
 20197                           tblptru	equ	0xFF8
 20198                           tblptrh	equ	0xFF7
 20199                           tblptrl	equ	0xFF6
 20200                           tablat	equ	0xFF5
 20201                           prodh	equ	0xFF4
 20202                           prodl	equ	0xFF3
 20203                           intcon	equ	0xFF2
 20204                           intcon2	equ	0xFF1
 20205                           intcon3	equ	0xFF0
 20206                           indf0	equ	0xFEF
 20207                           postinc0	equ	0xFEE
 20208                           fsr0h	equ	0xFEA
 20209                           fsr0l	equ	0xFE9
 20210                           wreg	equ	0xFE8
 20211                           indf1	equ	0xFE7
 20212                           postinc1	equ	0xFE6
 20213                           postdec1	equ	0xFE5
 20214                           plusw1	equ	0xFE3
 20215                           fsr1h	equ	0xFE2
 20216                           fsr1l	equ	0xFE1
 20217                           indf2	equ	0xFDF
 20218                           postinc2	equ	0xFDE
 20219                           postdec2	equ	0xFDD
 20220                           plusw2	equ	0xFDB
 20221                           fsr2h	equ	0xFDA
 20222                           fsr2l	equ	0xFD9
 20223                           status	equ	0xFD8
 20224                           
 20225 ;; *************** function _desliga_SPI *****************
 20226 ;; Defined at:
 20227 ;;		line 69 in file "bibliotecas/SPI.c"
 20228 ;; Parameters:    Size  Location     Type
 20229 ;;		None
 20230 ;; Auto vars:     Size  Location     Type
 20231 ;;		None
 20232 ;; Return value:  Size  Location     Type
 20233 ;;                  1    wreg      void 
 20234 ;; Registers used:
 20235 ;;		wreg, status,2
 20236 ;; Tracked objects:
 20237 ;;		On entry : 0/0
 20238 ;;		On exit  : 0/0
 20239 ;;		Unchanged: 0/0
 20240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20241 ;;      Params:         0       0       0       0       0       0       0       0       0
 20242 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20243 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20244 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20245 ;;Total ram usage:        0 bytes
 20246 ;; Hardware stack levels used:    1
 20247 ;; Hardware stack levels required when called:    3
 20248 ;; This function calls:
 20249 ;;		Nothing
 20250 ;; This function is called by:
 20251 ;;		_escrita_sdcard
 20252 ;;		_leitura_sdcard
 20253 ;; This function uses a non-reentrant model
 20254 ;;
 20255                           
 20256                           	psect	text79
 20257  00505A                     __ptext79:
 20258                           	opt stack 0
 20259  00505A                     _desliga_SPI:
 20260                           	opt stack 24
 20261                           
 20262                           ;SPI.c: 71: SSPSTAT = 0x00;
 20263                           
 20264                           ;incstack = 0
 20265  00505A  0E00               	movlw	0
 20266  00505C  6EC7               	movwf	4039,c	;volatile
 20267                           
 20268                           ;SPI.c: 72: SSPCON1 = 0x00;
 20269  00505E  0E00               	movlw	0
 20270  005060  6EC6               	movwf	4038,c	;volatile
 20271                           
 20272                           ;SPI.c: 73: SSPCON1bits.SSPEN = 0;
 20273  005062  9AC6               	bcf	4038,5,c	;volatile
 20274  005064  0012               	return		;funcret
 20275  005066                     __end_of_desliga_SPI:
 20276                           	opt stack 0
 20277                           tosu	equ	0xFFF
 20278                           tosh	equ	0xFFE
 20279                           tosl	equ	0xFFD
 20280                           pclath	equ	0xFFA
 20281                           tblptru	equ	0xFF8
 20282                           tblptrh	equ	0xFF7
 20283                           tblptrl	equ	0xFF6
 20284                           tablat	equ	0xFF5
 20285                           prodh	equ	0xFF4
 20286                           prodl	equ	0xFF3
 20287                           intcon	equ	0xFF2
 20288                           intcon2	equ	0xFF1
 20289                           intcon3	equ	0xFF0
 20290                           indf0	equ	0xFEF
 20291                           postinc0	equ	0xFEE
 20292                           fsr0h	equ	0xFEA
 20293                           fsr0l	equ	0xFE9
 20294                           wreg	equ	0xFE8
 20295                           indf1	equ	0xFE7
 20296                           postinc1	equ	0xFE6
 20297                           postdec1	equ	0xFE5
 20298                           plusw1	equ	0xFE3
 20299                           fsr1h	equ	0xFE2
 20300                           fsr1l	equ	0xFE1
 20301                           indf2	equ	0xFDF
 20302                           postinc2	equ	0xFDE
 20303                           postdec2	equ	0xFDD
 20304                           plusw2	equ	0xFDB
 20305                           fsr2h	equ	0xFDA
 20306                           fsr2l	equ	0xFD9
 20307                           status	equ	0xFD8
 20308                           
 20309 ;; *************** function _dados_gps_to_sd *****************
 20310 ;; Defined at:
 20311 ;;		line 632 in file "bibliotecas/GPS.c"
 20312 ;; Parameters:    Size  Location     Type
 20313 ;;		None
 20314 ;; Auto vars:     Size  Location     Type
 20315 ;;		None
 20316 ;; Return value:  Size  Location     Type
 20317 ;;                  1    wreg      void 
 20318 ;; Registers used:
 20319 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20320 ;; Tracked objects:
 20321 ;;		On entry : 0/0
 20322 ;;		On exit  : 0/0
 20323 ;;		Unchanged: 0/0
 20324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20325 ;;      Params:         0       0       0       0       0       0       0       0       0
 20326 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20327 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20328 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20329 ;;Total ram usage:        0 bytes
 20330 ;; Hardware stack levels used:    1
 20331 ;; Hardware stack levels required when called:    5
 20332 ;; This function calls:
 20333 ;;		_monta_sd
 20334 ;; This function is called by:
 20335 ;;		_main
 20336 ;; This function uses a non-reentrant model
 20337 ;;
 20338                           
 20339                           	psect	text80
 20340  004C92                     __ptext80:
 20341                           	opt stack 0
 20342  004C92                     _dados_gps_to_sd:
 20343                           	opt stack 25
 20344                           
 20345                           ;GPS.c: 634: monta_sd(0, rawTime);
 20346                           
 20347                           ;incstack = 0
 20348  004C92  0E6E               	movlw	low _rawTime
 20349  004C94  0100               	movlb	0	; () banked
 20350  004C96  6F66               	movwf	monta_sd@dado& (0+255),b
 20351  004C98  0E01               	movlw	high _rawTime
 20352  004C9A  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 20353  004C9C  0E00               	movlw	0
 20354  004C9E  EC82  F01C         	call	_monta_sd
 20355                           
 20356                           ;GPS.c: 635: monta_sd(1, rawDate);
 20357  004CA2  0E80               	movlw	low _rawDate
 20358  004CA4  0100               	movlb	0	; () banked
 20359  004CA6  6F66               	movwf	monta_sd@dado& (0+255),b
 20360  004CA8  0E01               	movlw	high _rawDate
 20361  004CAA  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 20362  004CAC  0E01               	movlw	1
 20363  004CAE  EC82  F01C         	call	_monta_sd
 20364                           
 20365                           ;GPS.c: 636: monta_sd(2, rawLatitude);
 20366  004CB2  0E55               	movlw	low _rawLatitude
 20367  004CB4  0100               	movlb	0	; () banked
 20368  004CB6  6F66               	movwf	monta_sd@dado& (0+255),b
 20369  004CB8  0E01               	movlw	high _rawLatitude
 20370  004CBA  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 20371  004CBC  0E02               	movlw	2
 20372  004CBE  EC82  F01C         	call	_monta_sd
 20373                           
 20374                           ;GPS.c: 637: monta_sd(3, rawLongitude);
 20375  004CC2  0E48               	movlw	low _rawLongitude
 20376  004CC4  0100               	movlb	0	; () banked
 20377  004CC6  6F66               	movwf	monta_sd@dado& (0+255),b
 20378  004CC8  0E01               	movlw	high _rawLongitude
 20379  004CCA  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 20380  004CCC  0E03               	movlw	3
 20381  004CCE  EC82  F01C         	call	_monta_sd
 20382  004CD2  0012               	return	
 20383  004CD4                     __end_of_dados_gps_to_sd:
 20384                           	opt stack 0
 20385                           tosu	equ	0xFFF
 20386                           tosh	equ	0xFFE
 20387                           tosl	equ	0xFFD
 20388                           pclath	equ	0xFFA
 20389                           tblptru	equ	0xFF8
 20390                           tblptrh	equ	0xFF7
 20391                           tblptrl	equ	0xFF6
 20392                           tablat	equ	0xFF5
 20393                           prodh	equ	0xFF4
 20394                           prodl	equ	0xFF3
 20395                           intcon	equ	0xFF2
 20396                           intcon2	equ	0xFF1
 20397                           intcon3	equ	0xFF0
 20398                           indf0	equ	0xFEF
 20399                           postinc0	equ	0xFEE
 20400                           fsr0h	equ	0xFEA
 20401                           fsr0l	equ	0xFE9
 20402                           wreg	equ	0xFE8
 20403                           indf1	equ	0xFE7
 20404                           postinc1	equ	0xFE6
 20405                           postdec1	equ	0xFE5
 20406                           plusw1	equ	0xFE3
 20407                           fsr1h	equ	0xFE2
 20408                           fsr1l	equ	0xFE1
 20409                           indf2	equ	0xFDF
 20410                           postinc2	equ	0xFDE
 20411                           postdec2	equ	0xFDD
 20412                           plusw2	equ	0xFDB
 20413                           fsr2h	equ	0xFDA
 20414                           fsr2l	equ	0xFD9
 20415                           status	equ	0xFD8
 20416                           
 20417 ;; *************** function _monta_sd *****************
 20418 ;; Defined at:
 20419 ;;		line 286 in file "bibliotecas/SDCard.c"
 20420 ;; Parameters:    Size  Location     Type
 20421 ;;  index           1    wreg     unsigned char 
 20422 ;;  dado            2    6[BANK0 ] PTR unsigned char 
 20423 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 20424 ;; Auto vars:     Size  Location     Type
 20425 ;;  index           1    8[BANK0 ] unsigned char 
 20426 ;;  i               1   10[BANK0 ] unsigned char 
 20427 ;;  size            1    9[BANK0 ] unsigned char 
 20428 ;; Return value:  Size  Location     Type
 20429 ;;                  1    wreg      void 
 20430 ;; Registers used:
 20431 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20432 ;; Tracked objects:
 20433 ;;		On entry : 0/0
 20434 ;;		On exit  : 0/0
 20435 ;;		Unchanged: 0/0
 20436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20437 ;;      Params:         0       2       0       0       0       0       0       0       0
 20438 ;;      Locals:         0       3       0       0       0       0       0       0       0
 20439 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20440 ;;      Totals:         0       5       0       0       0       0       0       0       0
 20441 ;;Total ram usage:        5 bytes
 20442 ;; Hardware stack levels used:    1
 20443 ;; Hardware stack levels required when called:    4
 20444 ;; This function calls:
 20445 ;;		_strlen
 20446 ;; This function is called by:
 20447 ;;		_dados_gps_to_sd
 20448 ;; This function uses a non-reentrant model
 20449 ;;
 20450                           
 20451                           	psect	text81
 20452  003904                     __ptext81:
 20453                           	opt stack 0
 20454  003904                     _monta_sd:
 20455                           	opt stack 25
 20456                           
 20457                           ;incstack = 0
 20458                           ;monta_sd@index stored from wreg
 20459  003904  0100               	movlb	0	; () banked
 20460  003906  6F68               	movwf	monta_sd@index& (0+255),b
 20461                           
 20462                           ;SDCard.c: 288: unsigned char i, size;
 20463                           ;SDCard.c: 289: size = strlen(dado);
 20464  003908  C066  F060         	movff	monta_sd@dado,strlen@s
 20465  00390C  C067  F061         	movff	monta_sd@dado+1,strlen@s+1
 20466  003910  EC6A  F026         	call	_strlen	;wreg free
 20467  003914  0100               	movlb	0	; () banked
 20468  003916  5160               	movf	?_strlen& (0+255),w,b
 20469  003918  6F69               	movwf	monta_sd@size& (0+255),b
 20470                           
 20471                           ;SDCard.c: 290: switch(index)
 20472  00391A  D07C               	goto	l349
 20473  00391C                     
 20474                           ; BSR set to: 0
 20475                           ;SDCard.c: 293: for(i=0; i<6;i++)
 20476                           
 20477                           ; BSR set to: 0
 20478  00391C  0E00               	movlw	0
 20479  00391E  6F6A               	movwf	monta_sd@i& (0+255),b
 20480  003920                     l11218:
 20481                           
 20482                           ; BSR set to: 0
 20483  003920  0E05               	movlw	5
 20484  003922  656A               	cpfsgt	monta_sd@i& (0+255),b
 20485  003924  D001               	goto	l351
 20486  003926  0012               	return	
 20487  003928                     l351:
 20488                           
 20489                           ; BSR set to: 0
 20490                           ;SDCard.c: 294: {
 20491                           ;SDCard.c: 295: string_dado.hora[i] = *dado;
 20492                           
 20493                           ; BSR set to: 0
 20494  003928  C066  FFD9         	movff	monta_sd@dado,fsr2l
 20495  00392C  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 20496  003930  516A               	movf	monta_sd@i& (0+255),w,b
 20497  003932  0D01               	mullw	1
 20498  003934  0E07               	movlw	low (_string_dado+7)
 20499  003936  24F3               	addwf	prodl,w,c
 20500  003938  6EE1               	movwf	fsr1l,c
 20501  00393A  0E01               	movlw	high (_string_dado+7)
 20502  00393C  20F4               	addwfc	prodh,w,c
 20503  00393E  6EE2               	movwf	fsr1h,c
 20504  003940  CFDF FFE7          	movff	indf2,indf1
 20505                           
 20506                           ; BSR set to: 0
 20507                           ;SDCard.c: 296: dado++;
 20508  003944  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 20509  003946  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 20510                           
 20511                           ; BSR set to: 0
 20512  003948  2B6A               	incf	monta_sd@i& (0+255),f,b
 20513  00394A  D7EA               	goto	l11218
 20514  00394C                     
 20515                           ; BSR set to: 0
 20516                           ;SDCard.c: 301: for(i=0; i<6;i++)
 20517                           
 20518                           ; BSR set to: 0
 20519  00394C  0E00               	movlw	0
 20520  00394E  6F6A               	movwf	monta_sd@i& (0+255),b
 20521  003950                     l11232:
 20522                           
 20523                           ; BSR set to: 0
 20524  003950  0E05               	movlw	5
 20525  003952  656A               	cpfsgt	monta_sd@i& (0+255),b
 20526  003954  D001               	goto	l355
 20527  003956  D012               	goto	u14630
 20528  003958                     l355:
 20529                           
 20530                           ; BSR set to: 0
 20531                           ;SDCard.c: 302: {
 20532                           ;SDCard.c: 303: string_dado.data[i] = *dado;
 20533                           
 20534                           ; BSR set to: 0
 20535  003958  C066  FFD9         	movff	monta_sd@dado,fsr2l
 20536  00395C  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 20537  003960  516A               	movf	monta_sd@i& (0+255),w,b
 20538  003962  0D01               	mullw	1
 20539  003964  0E00               	movlw	low _string_dado
 20540  003966  24F3               	addwf	prodl,w,c
 20541  003968  6EE1               	movwf	fsr1l,c
 20542  00396A  0E01               	movlw	high _string_dado
 20543  00396C  20F4               	addwfc	prodh,w,c
 20544  00396E  6EE2               	movwf	fsr1h,c
 20545  003970  CFDF FFE7          	movff	indf2,indf1
 20546                           
 20547                           ; BSR set to: 0
 20548                           ;SDCard.c: 304: dado++;
 20549  003974  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 20550  003976  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 20551                           
 20552                           ; BSR set to: 0
 20553  003978  2B6A               	incf	monta_sd@i& (0+255),f,b
 20554  00397A  D7EA               	goto	l11232
 20555  00397C                     u14630:
 20556                           
 20557                           ; BSR set to: 0
 20558                           ;SDCard.c: 307: {
 20559                           ;SDCard.c: 308: data_hoje = 1;
 20560                           
 20561                           ; BSR set to: 0
 20562                           
 20563                           ;SDCard.c: 305: }
 20564                           ;SDCard.c: 306: if(string_dado.data)
 20565  00397C  0E01               	movlw	1
 20566  00397E  6E35               	movwf	_data_hoje,c
 20567                           
 20568                           ; BSR set to: 0
 20569                           ;SDCard.c: 311: }
 20570                           ;SDCard.c: 312: break;
 20571  003980  0012               	return	
 20572  003982                     
 20573                           ; BSR set to: 0
 20574                           ;SDCard.c: 315: for(i=0; i<13;i++)
 20575                           
 20576                           ; BSR set to: 0
 20577  003982  0E00               	movlw	0
 20578  003984  6F6A               	movwf	monta_sd@i& (0+255),b
 20579  003986                     l11248:
 20580                           
 20581                           ; BSR set to: 0
 20582  003986  0E0C               	movlw	12
 20583  003988  656A               	cpfsgt	monta_sd@i& (0+255),b
 20584  00398A  D001               	goto	l359
 20585  00398C  0012               	return	
 20586  00398E                     l359:
 20587                           
 20588                           ; BSR set to: 0
 20589                           ;SDCard.c: 316: {
 20590                           ;SDCard.c: 317: string_dado.LAT[i] = *dado;
 20591                           
 20592                           ; BSR set to: 0
 20593  00398E  C066  FFD9         	movff	monta_sd@dado,fsr2l
 20594  003992  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 20595  003996  516A               	movf	monta_sd@i& (0+255),w,b
 20596  003998  0D01               	mullw	1
 20597  00399A  0E12               	movlw	low (_string_dado+18)
 20598  00399C  24F3               	addwf	prodl,w,c
 20599  00399E  6EE1               	movwf	fsr1l,c
 20600  0039A0  0E01               	movlw	high (_string_dado+18)
 20601  0039A2  20F4               	addwfc	prodh,w,c
 20602  0039A4  6EE2               	movwf	fsr1h,c
 20603  0039A6  CFDF FFE7          	movff	indf2,indf1
 20604                           
 20605                           ; BSR set to: 0
 20606                           ;SDCard.c: 318: dado++;
 20607  0039AA  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 20608  0039AC  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 20609                           
 20610                           ; BSR set to: 0
 20611  0039AE  2B6A               	incf	monta_sd@i& (0+255),f,b
 20612  0039B0  D7EA               	goto	l11248
 20613  0039B2                     
 20614                           ; BSR set to: 0
 20615                           ;SDCard.c: 324: for(i=0; i<13;i++)
 20616                           
 20617                           ; BSR set to: 0
 20618  0039B2  0E00               	movlw	0
 20619  0039B4  6F6A               	movwf	monta_sd@i& (0+255),b
 20620  0039B6                     l11262:
 20621                           
 20622                           ; BSR set to: 0
 20623  0039B6  0E0C               	movlw	12
 20624  0039B8  656A               	cpfsgt	monta_sd@i& (0+255),b
 20625  0039BA  D001               	goto	l362
 20626  0039BC  0012               	return	
 20627  0039BE                     l362:
 20628                           
 20629                           ; BSR set to: 0
 20630                           ;SDCard.c: 325: {
 20631                           ;SDCard.c: 326: string_dado.LONG[i] = *dado;
 20632                           
 20633                           ; BSR set to: 0
 20634  0039BE  C066  FFD9         	movff	monta_sd@dado,fsr2l
 20635  0039C2  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 20636  0039C6  516A               	movf	monta_sd@i& (0+255),w,b
 20637  0039C8  0D01               	mullw	1
 20638  0039CA  0E1F               	movlw	low (_string_dado+31)
 20639  0039CC  24F3               	addwf	prodl,w,c
 20640  0039CE  6EE1               	movwf	fsr1l,c
 20641  0039D0  0E01               	movlw	high (_string_dado+31)
 20642  0039D2  20F4               	addwfc	prodh,w,c
 20643  0039D4  6EE2               	movwf	fsr1h,c
 20644  0039D6  CFDF FFE7          	movff	indf2,indf1
 20645                           
 20646                           ; BSR set to: 0
 20647                           ;SDCard.c: 327: dado++;
 20648  0039DA  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 20649  0039DC  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 20650                           
 20651                           ; BSR set to: 0
 20652  0039DE  2B6A               	incf	monta_sd@i& (0+255),f,b
 20653  0039E0  D7EA               	goto	l11262
 20654  0039E2                     
 20655                           ; BSR set to: 0
 20656                           ;SDCard.c: 333: for(i=0; i<size;i++)
 20657                           
 20658                           ; BSR set to: 0
 20659  0039E2  0E00               	movlw	0
 20660  0039E4  6F6A               	movwf	monta_sd@i& (0+255),b
 20661  0039E6  D011               	goto	l365
 20662  0039E8                     
 20663                           ; BSR set to: 0
 20664                           ;SDCard.c: 334: {
 20665                           ;SDCard.c: 335: string_dado.LONG[i] = *dado;
 20666                           
 20667                           ; BSR set to: 0
 20668  0039E8  C066  FFD9         	movff	monta_sd@dado,fsr2l
 20669  0039EC  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 20670  0039F0  516A               	movf	monta_sd@i& (0+255),w,b
 20671  0039F2  0D01               	mullw	1
 20672  0039F4  0E1F               	movlw	low (_string_dado+31)
 20673  0039F6  24F3               	addwf	prodl,w,c
 20674  0039F8  6EE1               	movwf	fsr1l,c
 20675  0039FA  0E01               	movlw	high (_string_dado+31)
 20676  0039FC  20F4               	addwfc	prodh,w,c
 20677  0039FE  6EE2               	movwf	fsr1h,c
 20678  003A00  CFDF FFE7          	movff	indf2,indf1
 20679                           
 20680                           ; BSR set to: 0
 20681                           ;SDCard.c: 336: dado++;
 20682  003A04  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 20683  003A06  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 20684                           
 20685                           ; BSR set to: 0
 20686  003A08  2B6A               	incf	monta_sd@i& (0+255),f,b
 20687  003A0A                     l365:
 20688                           
 20689                           ; BSR set to: 0
 20690                           
 20691                           ; BSR set to: 0
 20692  003A0A  5169               	movf	monta_sd@size& (0+255),w,b
 20693  003A0C  5D6A               	subwf	monta_sd@i& (0+255),w,b
 20694  003A0E  B0D8               	btfsc	status,0,c
 20695  003A10  0012               	return	
 20696  003A12  D7EA               	goto	l366
 20697  003A14                     l349:
 20698                           
 20699                           ; BSR set to: 0
 20700                           
 20701                           ; BSR set to: 0
 20702  003A14  5168               	movf	monta_sd@index& (0+255),w,b
 20703                           
 20704                           ; Switch size 1, requested type "space"
 20705                           ; Number of cases is 5, Range of values is 0 to 4
 20706                           ; switch strategies available:
 20707                           ; Name         Instructions Cycles
 20708                           ; simple_byte           16     9 (average)
 20709                           ;	Chosen strategy is simple_byte
 20710  003A16  0A00               	xorlw	0	; case 0
 20711  003A18  B4D8               	btfsc	status,2,c
 20712  003A1A  D780               	goto	l350
 20713  003A1C  0A01               	xorlw	1	; case 1
 20714  003A1E  B4D8               	btfsc	status,2,c
 20715  003A20  D795               	goto	l354
 20716  003A22  0A03               	xorlw	3	; case 2
 20717  003A24  B4D8               	btfsc	status,2,c
 20718  003A26  D7AD               	goto	l358
 20719  003A28  0A01               	xorlw	1	; case 3
 20720  003A2A  B4D8               	btfsc	status,2,c
 20721  003A2C  D7C2               	goto	l361
 20722  003A2E  0A07               	xorlw	7	; case 4
 20723  003A30  A4D8               	btfss	status,2,c
 20724  003A32  0012               	return	
 20725  003A34  D7D6               	goto	l364
 20726  003A36                     __end_of_monta_sd:
 20727                           	opt stack 0
 20728                           tosu	equ	0xFFF
 20729                           tosh	equ	0xFFE
 20730                           tosl	equ	0xFFD
 20731                           pclath	equ	0xFFA
 20732                           tblptru	equ	0xFF8
 20733                           tblptrh	equ	0xFF7
 20734                           tblptrl	equ	0xFF6
 20735                           tablat	equ	0xFF5
 20736                           prodh	equ	0xFF4
 20737                           prodl	equ	0xFF3
 20738                           intcon	equ	0xFF2
 20739                           intcon2	equ	0xFF1
 20740                           intcon3	equ	0xFF0
 20741                           indf0	equ	0xFEF
 20742                           postinc0	equ	0xFEE
 20743                           fsr0h	equ	0xFEA
 20744                           fsr0l	equ	0xFE9
 20745                           wreg	equ	0xFE8
 20746                           indf1	equ	0xFE7
 20747                           postinc1	equ	0xFE6
 20748                           postdec1	equ	0xFE5
 20749                           plusw1	equ	0xFE3
 20750                           fsr1h	equ	0xFE2
 20751                           fsr1l	equ	0xFE1
 20752                           indf2	equ	0xFDF
 20753                           postinc2	equ	0xFDE
 20754                           postdec2	equ	0xFDD
 20755                           plusw2	equ	0xFDB
 20756                           fsr2h	equ	0xFDA
 20757                           fsr2l	equ	0xFD9
 20758                           status	equ	0xFD8
 20759                           
 20760 ;; *************** function _strlen *****************
 20761 ;; Defined at:
 20762 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 20763 ;; Parameters:    Size  Location     Type
 20764 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20765 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 20766 ;; Auto vars:     Size  Location     Type
 20767 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 20768 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 20769 ;; Return value:  Size  Location     Type
 20770 ;;                  2    0[BANK0 ] unsigned int 
 20771 ;; Registers used:
 20772 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20773 ;; Tracked objects:
 20774 ;;		On entry : 0/0
 20775 ;;		On exit  : 0/0
 20776 ;;		Unchanged: 0/0
 20777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20778 ;;      Params:         0       2       0       0       0       0       0       0       0
 20779 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20780 ;;      Temps:          0       2       0       0       0       0       0       0       0
 20781 ;;      Totals:         0       6       0       0       0       0       0       0       0
 20782 ;;Total ram usage:        6 bytes
 20783 ;; Hardware stack levels used:    1
 20784 ;; Hardware stack levels required when called:    3
 20785 ;; This function calls:
 20786 ;;		Nothing
 20787 ;; This function is called by:
 20788 ;;		_monta_sd
 20789 ;; This function uses a non-reentrant model
 20790 ;;
 20791                           
 20792                           	psect	text82
 20793  004CD4                     __ptext82:
 20794                           	opt stack 0
 20795  004CD4                     _strlen:
 20796                           	opt stack 25
 20797                           
 20798                           ; BSR set to: 0
 20799                           ;incstack = 0
 20800  004CD4  C060  F064         	movff	strlen@s,strlen@cp
 20801  004CD8  C061  F065         	movff	strlen@s+1,strlen@cp+1
 20802  004CDC  D003               	goto	l2024
 20803  004CDE  0100               	movlb	0	; () banked
 20804  004CE0  4B64               	infsnz	strlen@cp& (0+255),f,b
 20805  004CE2  2B65               	incf	(strlen@cp+1)& (0+255),f,b
 20806  004CE4                     l2024:
 20807                           
 20808                           ; BSR set to: 0
 20809  004CE4  C064  FFD9         	movff	strlen@cp,fsr2l
 20810  004CE8  C065  FFDA         	movff	strlen@cp+1,fsr2h
 20811  004CEC  50DF               	movf	indf2,w,c
 20812  004CEE  A4D8               	btfss	status,2,c
 20813  004CF0  D7F6               	goto	l2025
 20814  004CF2  C060  F062         	movff	strlen@s,??_strlen
 20815  004CF6  C061  F063         	movff	strlen@s+1,??_strlen+1
 20816  004CFA  0100               	movlb	0	; () banked
 20817  004CFC  1F62               	comf	??_strlen& (0+255),f,b
 20818  004CFE  1F63               	comf	(??_strlen+1)& (0+255),f,b
 20819  004D00  4B62               	infsnz	??_strlen& (0+255),f,b
 20820  004D02  2B63               	incf	(??_strlen+1)& (0+255),f,b
 20821  004D04  5164               	movf	strlen@cp& (0+255),w,b
 20822  004D06  2562               	addwf	??_strlen& (0+255),w,b
 20823  004D08  6F60               	movwf	?_strlen& (0+255),b
 20824  004D0A  5165               	movf	(strlen@cp+1)& (0+255),w,b
 20825  004D0C  2163               	addwfc	(??_strlen+1)& (0+255),w,b
 20826  004D0E  6F61               	movwf	(?_strlen+1)& (0+255),b
 20827  004D10  0012               	return	
 20828  004D12                     __end_of_strlen:
 20829                           	opt stack 0
 20830                           tosu	equ	0xFFF
 20831                           tosh	equ	0xFFE
 20832                           tosl	equ	0xFFD
 20833                           pclath	equ	0xFFA
 20834                           tblptru	equ	0xFF8
 20835                           tblptrh	equ	0xFF7
 20836                           tblptrl	equ	0xFF6
 20837                           tablat	equ	0xFF5
 20838                           prodh	equ	0xFF4
 20839                           prodl	equ	0xFF3
 20840                           intcon	equ	0xFF2
 20841                           intcon2	equ	0xFF1
 20842                           intcon3	equ	0xFF0
 20843                           indf0	equ	0xFEF
 20844                           postinc0	equ	0xFEE
 20845                           fsr0h	equ	0xFEA
 20846                           fsr0l	equ	0xFE9
 20847                           wreg	equ	0xFE8
 20848                           indf1	equ	0xFE7
 20849                           postinc1	equ	0xFE6
 20850                           postdec1	equ	0xFE5
 20851                           plusw1	equ	0xFE3
 20852                           fsr1h	equ	0xFE2
 20853                           fsr1l	equ	0xFE1
 20854                           indf2	equ	0xFDF
 20855                           postinc2	equ	0xFDE
 20856                           postdec2	equ	0xFDD
 20857                           plusw2	equ	0xFDB
 20858                           fsr2h	equ	0xFDA
 20859                           fsr2l	equ	0xFD9
 20860                           status	equ	0xFD8
 20861                           
 20862 ;; *************** function _isr *****************
 20863 ;; Defined at:
 20864 ;;		line 102 in file "main.c"
 20865 ;; Parameters:    Size  Location     Type
 20866 ;;		None
 20867 ;; Auto vars:     Size  Location     Type
 20868 ;;  cont            1   31[COMRAM] unsigned char 
 20869 ;; Return value:  Size  Location     Type
 20870 ;;                  1    wreg      void 
 20871 ;; Registers used:
 20872 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20873 ;; Tracked objects:
 20874 ;;		On entry : 0/0
 20875 ;;		On exit  : 0/0
 20876 ;;		Unchanged: 0/0
 20877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20878 ;;      Params:         0       0       0       0       0       0       0       0       0
 20879 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20880 ;;      Temps:         20       0       0       0       0       0       0       0       0
 20881 ;;      Totals:        21       0       0       0       0       0       0       0       0
 20882 ;;Total ram usage:       21 bytes
 20883 ;; Hardware stack levels used:    1
 20884 ;; Hardware stack levels required when called:    2
 20885 ;; This function calls:
 20886 ;;		_GPSRead
 20887 ;;		_recebe_dado_uart
 20888 ;;		i2_write_timer_zero
 20889 ;; This function is called by:
 20890 ;;		Interrupt level 2
 20891 ;; This function uses a non-reentrant model
 20892 ;;
 20893                           
 20894                           	psect	intcode
 20895  000008                     __pintcode:
 20896                           	opt stack 0
 20897  000008                     _isr:
 20898                           	opt stack 13
 20899                           
 20900                           ; BSR set to: 0
 20901                           ;incstack = 0
 20902  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20903  00000A  ED9F  F01A         	call	int_func,f	;refresh shadow registers
 20904                           tosu	equ	0xFFF
 20905                           tosh	equ	0xFFE
 20906                           tosl	equ	0xFFD
 20907                           pclath	equ	0xFFA
 20908                           tblptru	equ	0xFF8
 20909                           tblptrh	equ	0xFF7
 20910                           tblptrl	equ	0xFF6
 20911                           tablat	equ	0xFF5
 20912                           prodh	equ	0xFF4
 20913                           prodl	equ	0xFF3
 20914                           intcon	equ	0xFF2
 20915                           intcon2	equ	0xFF1
 20916                           intcon3	equ	0xFF0
 20917                           indf0	equ	0xFEF
 20918                           postinc0	equ	0xFEE
 20919                           fsr0h	equ	0xFEA
 20920                           fsr0l	equ	0xFE9
 20921                           wreg	equ	0xFE8
 20922                           indf1	equ	0xFE7
 20923                           postinc1	equ	0xFE6
 20924                           postdec1	equ	0xFE5
 20925                           plusw1	equ	0xFE3
 20926                           fsr1h	equ	0xFE2
 20927                           fsr1l	equ	0xFE1
 20928                           indf2	equ	0xFDF
 20929                           postinc2	equ	0xFDE
 20930                           postdec2	equ	0xFDD
 20931                           plusw2	equ	0xFDB
 20932                           fsr2h	equ	0xFDA
 20933                           fsr2l	equ	0xFD9
 20934                           status	equ	0xFD8
 20935                           
 20936                           	psect	intcode_body
 20937  00353E                     __pintcode_body:
 20938                           	opt stack 13
 20939  00353E                     int_func:
 20940                           	opt stack 13
 20941  00353E  0006               	pop		; remove dummy address from shadow register refresh
 20942  003540  CFFA F00E          	movff	pclath,??_isr+2
 20943  003544  CFFB F00F          	movff	pclatu,??_isr+3
 20944  003548  CFE9 F010          	movff	fsr0l,??_isr+4
 20945  00354C  CFEA F011          	movff	fsr0h,??_isr+5
 20946  003550  CFE1 F012          	movff	fsr1l,??_isr+6
 20947  003554  CFE2 F013          	movff	fsr1h,??_isr+7
 20948  003558  CFD9 F014          	movff	fsr2l,??_isr+8
 20949  00355C  CFDA F015          	movff	fsr2h,??_isr+9
 20950  003560  CFF3 F016          	movff	prodl,??_isr+10
 20951  003564  CFF4 F017          	movff	prodh,??_isr+11
 20952  003568  CFF6 F018          	movff	tblptrl,??_isr+12
 20953  00356C  CFF7 F019          	movff	tblptrh,??_isr+13
 20954  003570  CFF8 F01A          	movff	tblptru,??_isr+14
 20955  003574  CFF5 F01B          	movff	tablat,??_isr+15
 20956  003578  C03F  F01C         	movff	btemp,??_isr+16
 20957  00357C  C040  F01D         	movff	btemp+1,??_isr+17
 20958  003580  C041  F01E         	movff	btemp+2,??_isr+18
 20959  003584  C042  F01F         	movff	btemp+3,??_isr+19
 20960                           
 20961                           ;main.c: 104: unsigned char cont;
 20962                           ;main.c: 107: if (PIE1bits.RCIE && PIR1bits.RCIF)
 20963  003588  BA9D               	btfsc	3997,5,c	;volatile
 20964  00358A  AA9E               	btfss	3998,5,c	;volatile
 20965  00358C  D014               	goto	i2l85
 20966                           
 20967                           ;main.c: 108: {
 20968                           ;main.c: 109: PIR1bits.RCIF = 0;
 20969  00358E  9A9E               	bcf	3998,5,c	;volatile
 20970                           
 20971                           ;main.c: 110: data_uart_recebe = recebe_dado_uart();
 20972  003590  ECF8  F027         	call	_recebe_dado_uart	;wreg free
 20973  003594  6E3A               	movwf	_data_uart_recebe,c
 20974                           
 20975                           ;main.c: 111: GPSRead(data_uart_recebe);
 20976  003596  503A               	movf	_data_uart_recebe,w,c
 20977  003598  ECEC  F012         	call	_GPSRead
 20978                           
 20979                           ;main.c: 112: PORTBbits.RB2 = !PORTBbits.RB2;
 20980  00359C  B481               	btfsc	3969,2,c	;volatile
 20981  00359E  D003               	goto	i2u1496_40
 20982  0035A0  6A0C               	clrf	??_isr& (0+255),c
 20983  0035A2  2A0C               	incf	??_isr& (0+255),f,c
 20984  0035A4  D001               	goto	i2u1497_48
 20985  0035A6                     i2u1496_40:
 20986  0035A6  6A0C               	clrf	??_isr& (0+255),c
 20987  0035A8                     i2u1497_48:
 20988  0035A8  460C               	rlncf	??_isr,f,c
 20989  0035AA  460C               	rlncf	??_isr,f,c
 20990  0035AC  5081               	movf	3969,w,c	;volatile
 20991  0035AE  180C               	xorwf	??_isr,w,c
 20992  0035B0  0BFB               	andlw	-5
 20993  0035B2  180C               	xorwf	??_isr,w,c
 20994  0035B4  6E81               	movwf	3969,c	;volatile
 20995  0035B6                     i2l85:
 20996                           
 20997                           ;main.c: 113: }
 20998                           ;main.c: 116: unsigned char cont;
 20999                           ;main.c: 118: if (TMR0IF && T0IF)
 21000  0035B6  B4F2               	btfsc	intcon,2,c	;volatile
 21001  0035B8  A4F2               	btfss	intcon,2,c	;volatile
 21002  0035BA  D03E               	goto	i2l86
 21003                           
 21004                           ;main.c: 119: {
 21005                           ;main.c: 120: INTCONbits.TMR0IF = 0;
 21006  0035BC  94F2               	bcf	intcon,2,c	;volatile
 21007                           
 21008                           ;main.c: 121: sinaliza_int_timer = 1;
 21009  0035BE  0E01               	movlw	1
 21010  0035C0  0100               	movlb	0	; () banked
 21011  0035C2  6FFF               	movwf	_sinaliza_int_timer& (0+255),b
 21012                           
 21013                           ;main.c: 123: for(cont= 0; cont<3;cont++)
 21014  0035C4  0E00               	movlw	0
 21015  0035C6  6E20               	movwf	isr@cont,c
 21016  0035C8                     i2l11526:
 21017                           
 21018                           ; BSR set to: 0
 21019  0035C8  0E02               	movlw	2
 21020  0035CA  6420               	cpfsgt	isr@cont,c
 21021  0035CC  D001               	goto	i2l87
 21022  0035CE  D020               	goto	i2u1503_40
 21023  0035D0                     i2l87:
 21024                           
 21025                           ;main.c: 124: {
 21026                           ;main.c: 125: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 21027                           
 21028                           ; BSR set to: 0
 21029  0035D0  5020               	movf	isr@cont,w,c
 21030  0035D2  0D02               	mullw	2
 21031  0035D4  0E22               	movlw	low _tempo_tarefa
 21032  0035D6  24F3               	addwf	prodl,w,c
 21033  0035D8  6ED9               	movwf	fsr2l,c
 21034  0035DA  0E00               	movlw	high _tempo_tarefa
 21035  0035DC  20F4               	addwfc	prodh,w,c
 21036  0035DE  6EDA               	movwf	fsr2h,c
 21037  0035E0  50DE               	movf	postinc2,w,c
 21038  0035E2  10DE               	iorwf	postinc2,w,c
 21039  0035E4  B4D8               	btfsc	status,2,c
 21040  0035E6  D00B               	goto	i2l89
 21041  0035E8  5020               	movf	isr@cont,w,c
 21042  0035EA  0D02               	mullw	2
 21043  0035EC  0E22               	movlw	low _tempo_tarefa
 21044  0035EE  24F3               	addwf	prodl,w,c
 21045  0035F0  6ED9               	movwf	fsr2l,c
 21046  0035F2  0E00               	movlw	high _tempo_tarefa
 21047  0035F4  20F4               	addwfc	prodh,w,c
 21048  0035F6  6EDA               	movwf	fsr2h,c
 21049  0035F8  06DE               	decf	postinc2,f,c
 21050  0035FA  0E00               	movlw	0
 21051  0035FC  5ADD               	subwfb	postdec2,f,c
 21052  0035FE                     i2l89:
 21053                           
 21054                           ;main.c: 126: if(time_sd > 0) time_sd--;
 21055  0035FE  502E               	movf	_time_sd,w,c
 21056  003600  102F               	iorwf	_time_sd+1,w,c
 21057  003602  B4D8               	btfsc	status,2,c
 21058  003604  D003               	goto	i2l90
 21059  003606  062E               	decf	_time_sd,f,c
 21060  003608  A0D8               	btfss	status,0,c
 21061  00360A  062F               	decf	_time_sd+1,f,c
 21062  00360C                     i2l90:
 21063  00360C  2A20               	incf	isr@cont,f,c
 21064  00360E  D7DC               	goto	i2l11526
 21065  003610                     i2u1503_40:
 21066                           
 21067                           ;main.c: 127: }
 21068                           ;main.c: 129: if(tarefa_em_execucao == 1)
 21069  003610  0439               	decf	_tarefa_em_execucao,w,c	;volatile
 21070  003612  A4D8               	btfss	status,2,c
 21071  003614  D00B               	goto	i2l92
 21072                           
 21073                           ;main.c: 130: {
 21074                           ;main.c: 131: timeout_tarefa--;
 21075  003616  0630               	decf	_timeout_tarefa,f,c
 21076  003618  A0D8               	btfss	status,0,c
 21077  00361A  0631               	decf	_timeout_tarefa+1,f,c
 21078                           
 21079                           ;main.c: 132: if(!timeout_tarefa)
 21080  00361C  5030               	movf	_timeout_tarefa,w,c
 21081  00361E  1031               	iorwf	_timeout_tarefa+1,w,c
 21082  003620  A4D8               	btfss	status,2,c
 21083  003622  D004               	goto	i2l92
 21084                           
 21085                           ;main.c: 133: {
 21086                           ;main.c: 135: PCLATH = 0;
 21087  003624  0E00               	movlw	0
 21088  003626  6EFA               	movwf	pclath,c	;volatile
 21089                           
 21090                           ;main.c: 136: PCL = 0;
 21091  003628  0E00               	movlw	0
 21092  00362A  6EF9               	movwf	pcl,c	;volatile
 21093  00362C                     i2l92:
 21094                           
 21095                           ;main.c: 137: }
 21096                           ;main.c: 138: }
 21097                           ;main.c: 141: write_timer_zero(0x0083);
 21098  00362C  0E00               	movlw	0
 21099  00362E  6E02               	movwf	i2write_timer_zero@timer0+1,c
 21100  003630  0E83               	movlw	131
 21101  003632  6E01               	movwf	i2write_timer_zero@timer0,c
 21102  003634  ECEF  F027         	call	i2_write_timer_zero	;wreg free
 21103  003638                     i2l86:
 21104                           
 21105                           ;main.c: 143: }
 21106                           ;main.c: 145: if (INT0IF && INT0IE)
 21107  003638  B2F2               	btfsc	intcon,1,c	;volatile
 21108  00363A  A8F2               	btfss	intcon,4,c	;volatile
 21109  00363C  D001               	goto	i2l93
 21110                           
 21111                           ;main.c: 146: {
 21112                           ;main.c: 147: INT0IF = 0;
 21113  00363E  92F2               	bcf	intcon,1,c	;volatile
 21114  003640                     i2l93:
 21115  003640  C01F  F042         	movff	??_isr+19,btemp+3
 21116  003644  C01E  F041         	movff	??_isr+18,btemp+2
 21117  003648  C01D  F040         	movff	??_isr+17,btemp+1
 21118  00364C  C01C  F03F         	movff	??_isr+16,btemp
 21119  003650  C01B  FFF5         	movff	??_isr+15,tablat
 21120  003654  C01A  FFF8         	movff	??_isr+14,tblptru
 21121  003658  C019  FFF7         	movff	??_isr+13,tblptrh
 21122  00365C  C018  FFF6         	movff	??_isr+12,tblptrl
 21123  003660  C017  FFF4         	movff	??_isr+11,prodh
 21124  003664  C016  FFF3         	movff	??_isr+10,prodl
 21125  003668  C015  FFDA         	movff	??_isr+9,fsr2h
 21126  00366C  C014  FFD9         	movff	??_isr+8,fsr2l
 21127  003670  C013  FFE2         	movff	??_isr+7,fsr1h
 21128  003674  C012  FFE1         	movff	??_isr+6,fsr1l
 21129  003678  C011  FFEA         	movff	??_isr+5,fsr0h
 21130  00367C  C010  FFE9         	movff	??_isr+4,fsr0l
 21131  003680  C00F  FFFB         	movff	??_isr+3,pclatu
 21132  003684  C00E  FFFA         	movff	??_isr+2,pclath
 21133  003688  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21134  00368A  0011               	retfie		f
 21135  00368C                     __end_of_isr:
 21136                           	opt stack 0
 21137                           tosu	equ	0xFFF
 21138                           tosh	equ	0xFFE
 21139                           tosl	equ	0xFFD
 21140                           pclatu	equ	0xFFB
 21141                           pclath	equ	0xFFA
 21142                           pcl	equ	0xFF9
 21143                           tblptru	equ	0xFF8
 21144                           tblptrh	equ	0xFF7
 21145                           tblptrl	equ	0xFF6
 21146                           tablat	equ	0xFF5
 21147                           prodh	equ	0xFF4
 21148                           prodl	equ	0xFF3
 21149                           intcon	equ	0xFF2
 21150                           intcon2	equ	0xFF1
 21151                           intcon3	equ	0xFF0
 21152                           indf0	equ	0xFEF
 21153                           postinc0	equ	0xFEE
 21154                           fsr0h	equ	0xFEA
 21155                           fsr0l	equ	0xFE9
 21156                           wreg	equ	0xFE8
 21157                           indf1	equ	0xFE7
 21158                           postinc1	equ	0xFE6
 21159                           postdec1	equ	0xFE5
 21160                           plusw1	equ	0xFE3
 21161                           fsr1h	equ	0xFE2
 21162                           fsr1l	equ	0xFE1
 21163                           indf2	equ	0xFDF
 21164                           postinc2	equ	0xFDE
 21165                           postdec2	equ	0xFDD
 21166                           plusw2	equ	0xFDB
 21167                           fsr2h	equ	0xFDA
 21168                           fsr2l	equ	0xFD9
 21169                           status	equ	0xFD8
 21170                           
 21171 ;; *************** function i2_write_timer_zero *****************
 21172 ;; Defined at:
 21173 ;;		line 138 in file "bibliotecas/hardware.c"
 21174 ;; Parameters:    Size  Location     Type
 21175 ;;  timer0          2    0[COMRAM] unsigned int 
 21176 ;; Auto vars:     Size  Location     Type
 21177 ;;  write_timer_    2    2[COMRAM] struct Timers
 21178 ;; Return value:  Size  Location     Type
 21179 ;;                  1    wreg      void 
 21180 ;; Registers used:
 21181 ;;		None
 21182 ;; Tracked objects:
 21183 ;;		On entry : 0/0
 21184 ;;		On exit  : 0/0
 21185 ;;		Unchanged: 0/0
 21186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21187 ;;      Params:         2       0       0       0       0       0       0       0       0
 21188 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21189 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21190 ;;      Totals:         4       0       0       0       0       0       0       0       0
 21191 ;;Total ram usage:        4 bytes
 21192 ;; Hardware stack levels used:    1
 21193 ;; This function calls:
 21194 ;;		Nothing
 21195 ;; This function is called by:
 21196 ;;		_isr
 21197 ;; This function uses a non-reentrant model
 21198 ;;
 21199                           
 21200                           	psect	text84
 21201  004FDE                     __ptext84:
 21202                           	opt stack 0
 21203  004FDE                     i2_write_timer_zero:
 21204                           	opt stack 14
 21205                           
 21206                           ;hardware.c: 140: union Timers timer;
 21207                           ;hardware.c: 142: timer.lt = timer0;
 21208                           
 21209                           ;incstack = 0
 21210  004FDE  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 21211  004FE2  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 21212                           
 21213                           ;hardware.c: 144: TMR0H = timer.bt[1];
 21214  004FE6  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 21215                           
 21216                           ;hardware.c: 145: TMR0L = timer.bt[0];
 21217  004FEA  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 21218  004FEE  0012               	return		;funcret
 21219  004FF0                     __end_ofi2_write_timer_zero:
 21220                           	opt stack 0
 21221                           tosu	equ	0xFFF
 21222                           tosh	equ	0xFFE
 21223                           tosl	equ	0xFFD
 21224                           pclatu	equ	0xFFB
 21225                           pclath	equ	0xFFA
 21226                           pcl	equ	0xFF9
 21227                           tblptru	equ	0xFF8
 21228                           tblptrh	equ	0xFF7
 21229                           tblptrl	equ	0xFF6
 21230                           tablat	equ	0xFF5
 21231                           prodh	equ	0xFF4
 21232                           prodl	equ	0xFF3
 21233                           intcon	equ	0xFF2
 21234                           intcon2	equ	0xFF1
 21235                           intcon3	equ	0xFF0
 21236                           indf0	equ	0xFEF
 21237                           postinc0	equ	0xFEE
 21238                           fsr0h	equ	0xFEA
 21239                           fsr0l	equ	0xFE9
 21240                           wreg	equ	0xFE8
 21241                           indf1	equ	0xFE7
 21242                           postinc1	equ	0xFE6
 21243                           postdec1	equ	0xFE5
 21244                           plusw1	equ	0xFE3
 21245                           fsr1h	equ	0xFE2
 21246                           fsr1l	equ	0xFE1
 21247                           indf2	equ	0xFDF
 21248                           postinc2	equ	0xFDE
 21249                           postdec2	equ	0xFDD
 21250                           plusw2	equ	0xFDB
 21251                           fsr2h	equ	0xFDA
 21252                           fsr2l	equ	0xFD9
 21253                           status	equ	0xFD8
 21254                           
 21255 ;; *************** function _recebe_dado_uart *****************
 21256 ;; Defined at:
 21257 ;;		line 138 in file "bibliotecas/uart.c"
 21258 ;; Parameters:    Size  Location     Type
 21259 ;;		None
 21260 ;; Auto vars:     Size  Location     Type
 21261 ;;		None
 21262 ;; Return value:  Size  Location     Type
 21263 ;;                  1    wreg      unsigned char 
 21264 ;; Registers used:
 21265 ;;		wreg, status,2
 21266 ;; Tracked objects:
 21267 ;;		On entry : 0/0
 21268 ;;		On exit  : 0/0
 21269 ;;		Unchanged: 0/0
 21270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21271 ;;      Params:         0       0       0       0       0       0       0       0       0
 21272 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21273 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21274 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21275 ;;Total ram usage:        0 bytes
 21276 ;; Hardware stack levels used:    1
 21277 ;; This function calls:
 21278 ;;		Nothing
 21279 ;; This function is called by:
 21280 ;;		_isr
 21281 ;;		_recebe_string_uart
 21282 ;; This function uses a non-reentrant model
 21283 ;;
 21284                           
 21285                           	psect	text85
 21286  004FF0                     __ptext85:
 21287                           	opt stack 0
 21288  004FF0                     _recebe_dado_uart:
 21289                           	opt stack 14
 21290                           
 21291                           ;uart.c: 140: while(RCIF==0);
 21292                           
 21293                           ;incstack = 0
 21294  004FF0  AA9E               	btfss	3998,5,c	;volatile
 21295  004FF2  D7FE               	goto	_recebe_dado_uart
 21296                           
 21297                           ;uart.c: 141: if(RCSTAbits.OERR)
 21298  004FF4  A2AB               	btfss	4011,1,c	;volatile
 21299  004FF6  D003               	goto	i2l878
 21300                           
 21301                           ;uart.c: 142: {
 21302                           ;uart.c: 143: CREN = 0;
 21303  004FF8  98AB               	bcf	4011,4,c	;volatile
 21304                           
 21305                           ;uart.c: 144: __nop();
 21306  004FFA  F000               	nop	
 21307                           
 21308                           ;uart.c: 145: CREN=1;
 21309  004FFC  88AB               	bsf	4011,4,c	;volatile
 21310  004FFE                     i2l878:
 21311                           
 21312                           ;uart.c: 146: }
 21313                           ;uart.c: 147: return(RCREG);
 21314  004FFE  50AE               	movf	4014,w,c	;volatile
 21315  005000  0012               	return	
 21316  005002                     __end_of_recebe_dado_uart:
 21317                           	opt stack 0
 21318                           tosu	equ	0xFFF
 21319                           tosh	equ	0xFFE
 21320                           tosl	equ	0xFFD
 21321                           pclatu	equ	0xFFB
 21322                           pclath	equ	0xFFA
 21323                           pcl	equ	0xFF9
 21324                           tblptru	equ	0xFF8
 21325                           tblptrh	equ	0xFF7
 21326                           tblptrl	equ	0xFF6
 21327                           tablat	equ	0xFF5
 21328                           prodh	equ	0xFF4
 21329                           prodl	equ	0xFF3
 21330                           intcon	equ	0xFF2
 21331                           intcon2	equ	0xFF1
 21332                           intcon3	equ	0xFF0
 21333                           indf0	equ	0xFEF
 21334                           postinc0	equ	0xFEE
 21335                           fsr0h	equ	0xFEA
 21336                           fsr0l	equ	0xFE9
 21337                           wreg	equ	0xFE8
 21338                           indf1	equ	0xFE7
 21339                           postinc1	equ	0xFE6
 21340                           postdec1	equ	0xFE5
 21341                           plusw1	equ	0xFE3
 21342                           fsr1h	equ	0xFE2
 21343                           fsr1l	equ	0xFE1
 21344                           indf2	equ	0xFDF
 21345                           postinc2	equ	0xFDE
 21346                           postdec2	equ	0xFDD
 21347                           plusw2	equ	0xFDB
 21348                           fsr2h	equ	0xFDA
 21349                           fsr2l	equ	0xFD9
 21350                           status	equ	0xFD8
 21351                           
 21352 ;; *************** function _GPSRead *****************
 21353 ;; Defined at:
 21354 ;;		line 468 in file "bibliotecas/GPS.c"
 21355 ;; Parameters:    Size  Location     Type
 21356 ;;  buff            1    wreg     unsigned char 
 21357 ;; Auto vars:     Size  Location     Type
 21358 ;;  buff            1    9[COMRAM] unsigned char 
 21359 ;;  c               1   10[COMRAM] unsigned char 
 21360 ;; Return value:  Size  Location     Type
 21361 ;;                  2    8[None  ] int 
 21362 ;; Registers used:
 21363 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21364 ;; Tracked objects:
 21365 ;;		On entry : 0/0
 21366 ;;		On exit  : 0/0
 21367 ;;		Unchanged: 0/0
 21368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21369 ;;      Params:         0       0       0       0       0       0       0       0       0
 21370 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21371 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21372 ;;      Totals:         2       0       0       0       0       0       0       0       0
 21373 ;;Total ram usage:        2 bytes
 21374 ;; Hardware stack levels used:    1
 21375 ;; Hardware stack levels required when called:    1
 21376 ;; This function calls:
 21377 ;;		_strcmp
 21378 ;;		_stringcpy
 21379 ;; This function is called by:
 21380 ;;		_isr
 21381 ;; This function uses a non-reentrant model
 21382 ;;
 21383                           
 21384                           	psect	text86
 21385  0025D8                     __ptext86:
 21386                           	opt stack 0
 21387  0025D8                     _GPSRead:
 21388                           	opt stack 13
 21389                           
 21390                           ;incstack = 0
 21391                           ;GPSRead@buff stored from wreg
 21392  0025D8  6E0A               	movwf	GPSRead@buff,c
 21393                           
 21394                           ;GPS.c: 470: uint8_t c = buff;
 21395  0025DA  C00A  F00B         	movff	GPSRead@buff,GPSRead@c
 21396                           
 21397                           ;GPS.c: 472: switch(c) {
 21398  0025DE  D13B               	goto	i2l217
 21399  0025E0                     
 21400                           ;GPS.c: 474: if(SentenceType == 1)
 21401  0025E0  0437               	decf	_SentenceType,w,c
 21402  0025E2  A4D8               	btfss	status,2,c
 21403  0025E4  D004               	goto	i2l219
 21404                           
 21405                           ;GPS.c: 475: GPRMC_ok = 1;
 21406  0025E6  0E00               	movlw	0
 21407  0025E8  6E2D               	movwf	_GPRMC_ok+1,c
 21408  0025EA  0E01               	movlw	1
 21409  0025EC  6E2C               	movwf	_GPRMC_ok,c
 21410  0025EE                     i2l219:
 21411                           
 21412                           ;GPS.c: 476: if(SentenceType == 2)
 21413  0025EE  0E02               	movlw	2
 21414  0025F0  1837               	xorwf	_SentenceType,w,c
 21415  0025F2  A4D8               	btfss	status,2,c
 21416  0025F4  D004               	goto	i2l220
 21417                           
 21418                           ;GPS.c: 477: GPGGA_ok = 1;
 21419  0025F6  0E00               	movlw	0
 21420  0025F8  6E2B               	movwf	_GPGGA_ok+1,c
 21421  0025FA  0E01               	movlw	1
 21422  0025FC  6E2A               	movwf	_GPGGA_ok,c
 21423  0025FE                     i2l220:
 21424                           
 21425                           ;GPS.c: 478: if(GPRMC_ok && GPGGA_ok) {
 21426  0025FE  502C               	movf	_GPRMC_ok,w,c
 21427  002600  102D               	iorwf	_GPRMC_ok+1,w,c
 21428  002602  B4D8               	btfsc	status,2,c
 21429  002604  0012               	return	
 21430  002606  502A               	movf	_GPGGA_ok,w,c
 21431  002608  102B               	iorwf	_GPGGA_ok+1,w,c
 21432  00260A  B4D8               	btfsc	status,2,c
 21433  00260C  0012               	return	
 21434                           
 21435                           ;GPS.c: 479: GPRMC_ok = GPGGA_ok = 0;
 21436  00260E  0E00               	movlw	0
 21437  002610  6E2B               	movwf	_GPGGA_ok+1,c
 21438  002612  0E00               	movlw	0
 21439  002614  6E2A               	movwf	_GPGGA_ok,c
 21440  002616  C02A  F02C         	movff	_GPGGA_ok,_GPRMC_ok
 21441  00261A  C02B  F02D         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 21442                           
 21443                           ;GPS.c: 481: }
 21444                           ;GPS.c: 482: break;
 21445                           
 21446                           ;GPS.c: 480: return 1;
 21447                           ;	Return value of _GPSRead is never used
 21448  00261E  0012               	return	
 21449  002620                     
 21450                           ;GPS.c: 485: Term = char_number = 0;
 21451  002620  0E00               	movlw	0
 21452  002622  6E38               	movwf	_char_number,c
 21453  002624  C038  F036         	movff	_char_number,_Term
 21454                           
 21455                           ;GPS.c: 486: break;
 21456  002628  0012               	return	
 21457  00262A                     
 21458                           ;GPS.c: 489: buffer[char_number] = '\0';
 21459  00262A  5038               	movf	_char_number,w,c
 21460  00262C  0D01               	mullw	1
 21461  00262E  0E62               	movlw	low _buffer
 21462  002630  24F3               	addwf	prodl,w,c
 21463  002632  6ED9               	movwf	fsr2l,c
 21464  002634  0E01               	movlw	high _buffer
 21465  002636  20F4               	addwfc	prodh,w,c
 21466  002638  6EDA               	movwf	fsr2h,c
 21467  00263A  0E00               	movlw	0
 21468  00263C  6EDF               	movwf	indf2,c
 21469                           
 21470                           ;GPS.c: 490: if(Term == 0) {
 21471  00263E  5036               	movf	_Term,w,c
 21472  002640  A4D8               	btfss	status,2,c
 21473  002642  D030               	goto	i2l230
 21474                           
 21475                           ;GPS.c: 491: stringcpy(buffer, sentence, 0);
 21476  002644  0E62               	movlw	low _buffer
 21477  002646  6E01               	movwf	stringcpy@str1,c
 21478  002648  0E01               	movlw	high _buffer
 21479  00264A  6E02               	movwf	stringcpy@str1+1,c
 21480  00264C  0E93               	movlw	low _sentence
 21481  00264E  6E03               	movwf	stringcpy@str2,c
 21482  002650  0E01               	movlw	high _sentence
 21483  002652  6E04               	movwf	stringcpy@str2+1,c
 21484  002654  0E00               	movlw	0
 21485  002656  6E06               	movwf	stringcpy@dir+1,c
 21486  002658  0E00               	movlw	0
 21487  00265A  6E05               	movwf	stringcpy@dir,c
 21488  00265C  EC49  F025         	call	_stringcpy	;wreg free
 21489                           
 21490                           ;GPS.c: 492: if(strcmp(sentence, "GPRMC") == 0)
 21491  002660  0E93               	movlw	low _sentence
 21492  002662  6E01               	movwf	strcmp@s1,c
 21493  002664  0E01               	movlw	high _sentence
 21494  002666  6E02               	movwf	strcmp@s1+1,c
 21495  002668  0E72               	movlw	low STR_10
 21496  00266A  6E03               	movwf	strcmp@s2,c
 21497  00266C  0E62               	movlw	high STR_10
 21498  00266E  6E04               	movwf	strcmp@s2+1,c
 21499  002670  EC03  F026         	call	_strcmp	;wreg free
 21500  002674  5001               	movf	?_strcmp,w,c
 21501  002676  1002               	iorwf	?_strcmp+1,w,c
 21502  002678  A4D8               	btfss	status,2,c
 21503  00267A  D002               	goto	i2l227
 21504                           
 21505                           ;GPS.c: 493: SentenceType = 1;
 21506  00267C  0E01               	movlw	1
 21507  00267E  D011               	goto	L11
 21508  002680                     i2l227:
 21509                           
 21510                           ;GPS.c: 494: else if(strcmp(sentence, "GPGGA") == 0)
 21511  002680  0E93               	movlw	low _sentence
 21512  002682  6E01               	movwf	strcmp@s1,c
 21513  002684  0E01               	movlw	high _sentence
 21514  002686  6E02               	movwf	strcmp@s1+1,c
 21515  002688  0E6C               	movlw	low STR_11
 21516  00268A  6E03               	movwf	strcmp@s2,c
 21517  00268C  0E62               	movlw	high STR_11
 21518  00268E  6E04               	movwf	strcmp@s2+1,c
 21519  002690  EC03  F026         	call	_strcmp	;wreg free
 21520  002694  5001               	movf	?_strcmp,w,c
 21521  002696  1002               	iorwf	?_strcmp+1,w,c
 21522  002698  A4D8               	btfss	status,2,c
 21523  00269A  D002               	goto	i2l229
 21524                           
 21525                           ;GPS.c: 495: SentenceType = 2;
 21526  00269C  0E02               	movlw	2
 21527  00269E  D001               	goto	L11
 21528  0026A0                     i2l229:
 21529                           
 21530                           ;GPS.c: 496: else
 21531                           ;GPS.c: 497: SentenceType = 3;
 21532  0026A0  0E03               	movlw	3
 21533  0026A2                     L11:
 21534  0026A2  6E37               	movwf	_SentenceType,c
 21535  0026A4                     i2l230:
 21536                           
 21537                           ;GPS.c: 498: }
 21538                           ;GPS.c: 501: if(Term == 1 && SentenceType == 1) {
 21539  0026A4  0436               	decf	_Term,w,c
 21540  0026A6  A4D8               	btfss	status,2,c
 21541  0026A8  D011               	goto	i2l231
 21542  0026AA  0437               	decf	_SentenceType,w,c
 21543  0026AC  A4D8               	btfss	status,2,c
 21544  0026AE  D00E               	goto	i2l231
 21545                           
 21546                           ;GPS.c: 502: stringcpy(buffer, rawTime, 0);
 21547  0026B0  0E62               	movlw	low _buffer
 21548  0026B2  6E01               	movwf	stringcpy@str1,c
 21549  0026B4  0E01               	movlw	high _buffer
 21550  0026B6  6E02               	movwf	stringcpy@str1+1,c
 21551  0026B8  0E6E               	movlw	low _rawTime
 21552  0026BA  6E03               	movwf	stringcpy@str2,c
 21553  0026BC  0E01               	movlw	high _rawTime
 21554  0026BE  6E04               	movwf	stringcpy@str2+1,c
 21555  0026C0  0E00               	movlw	0
 21556  0026C2  6E06               	movwf	stringcpy@dir+1,c
 21557  0026C4  0E00               	movlw	0
 21558  0026C6  6E05               	movwf	stringcpy@dir,c
 21559  0026C8  EC49  F025         	call	_stringcpy	;wreg free
 21560  0026CC                     i2l231:
 21561                           
 21562                           ;GPS.c: 503: }
 21563                           ;GPS.c: 506: if((Term == 3) && (SentenceType == 1)) {
 21564  0026CC  0E03               	movlw	3
 21565  0026CE  1836               	xorwf	_Term,w,c
 21566  0026D0  A4D8               	btfss	status,2,c
 21567  0026D2  D011               	goto	i2l232
 21568  0026D4  0437               	decf	_SentenceType,w,c
 21569  0026D6  A4D8               	btfss	status,2,c
 21570  0026D8  D00E               	goto	i2l232
 21571                           
 21572                           ;GPS.c: 507: stringcpy(buffer, rawLatitude, 1);
 21573  0026DA  0E62               	movlw	low _buffer
 21574  0026DC  6E01               	movwf	stringcpy@str1,c
 21575  0026DE  0E01               	movlw	high _buffer
 21576  0026E0  6E02               	movwf	stringcpy@str1+1,c
 21577  0026E2  0E55               	movlw	low _rawLatitude
 21578  0026E4  6E03               	movwf	stringcpy@str2,c
 21579  0026E6  0E01               	movlw	high _rawLatitude
 21580  0026E8  6E04               	movwf	stringcpy@str2+1,c
 21581  0026EA  0E00               	movlw	0
 21582  0026EC  6E06               	movwf	stringcpy@dir+1,c
 21583  0026EE  0E01               	movlw	1
 21584  0026F0  6E05               	movwf	stringcpy@dir,c
 21585  0026F2  EC49  F025         	call	_stringcpy	;wreg free
 21586  0026F6                     i2l232:
 21587                           
 21588                           ;GPS.c: 508: }
 21589                           ;GPS.c: 510: if((Term == 4) && (SentenceType == 1)) {
 21590  0026F6  0E04               	movlw	4
 21591  0026F8  1836               	xorwf	_Term,w,c
 21592  0026FA  A4D8               	btfss	status,2,c
 21593  0026FC  D00C               	goto	i2l235
 21594  0026FE  0437               	decf	_SentenceType,w,c
 21595  002700  A4D8               	btfss	status,2,c
 21596  002702  D009               	goto	i2l235
 21597                           
 21598                           ;GPS.c: 511: if(buffer[0] == 'N')
 21599  002704  0E4E               	movlw	78
 21600  002706  0101               	movlb	1	; () banked
 21601  002708  1962               	xorwf	_buffer& (0+255),w,b
 21602  00270A  A4D8               	btfss	status,2,c
 21603  00270C  D002               	goto	i2l234
 21604                           
 21605                           ; BSR set to: 1
 21606                           ;GPS.c: 512: rawLatitude[0] = '0';
 21607  00270E  0E30               	movlw	48
 21608  002710  D001               	goto	L12
 21609  002712                     i2l234:
 21610                           
 21611                           ; BSR set to: 1
 21612                           ;GPS.c: 513: else
 21613                           ;GPS.c: 514: rawLatitude[0] = '-';
 21614                           
 21615                           ; BSR set to: 1
 21616  002712  0E2D               	movlw	45
 21617  002714                     L12:
 21618  002714  6F55               	movwf	_rawLatitude& (0+255),b
 21619  002716                     i2l235:
 21620                           
 21621                           ;GPS.c: 515: }
 21622                           ;GPS.c: 518: if((Term == 5) && (SentenceType == 1)) {
 21623                           
 21624                           ; BSR set to: 1
 21625                           
 21626                           ; BSR set to: 1
 21627  002716  0E05               	movlw	5
 21628  002718  1836               	xorwf	_Term,w,c
 21629  00271A  A4D8               	btfss	status,2,c
 21630  00271C  D011               	goto	i2l236
 21631  00271E  0437               	decf	_SentenceType,w,c
 21632  002720  A4D8               	btfss	status,2,c
 21633  002722  D00E               	goto	i2l236
 21634                           
 21635                           ;GPS.c: 519: stringcpy(buffer, rawLongitude, 1);
 21636  002724  0E62               	movlw	low _buffer
 21637  002726  6E01               	movwf	stringcpy@str1,c
 21638  002728  0E01               	movlw	high _buffer
 21639  00272A  6E02               	movwf	stringcpy@str1+1,c
 21640  00272C  0E48               	movlw	low _rawLongitude
 21641  00272E  6E03               	movwf	stringcpy@str2,c
 21642  002730  0E01               	movlw	high _rawLongitude
 21643  002732  6E04               	movwf	stringcpy@str2+1,c
 21644  002734  0E00               	movlw	0
 21645  002736  6E06               	movwf	stringcpy@dir+1,c
 21646  002738  0E01               	movlw	1
 21647  00273A  6E05               	movwf	stringcpy@dir,c
 21648  00273C  EC49  F025         	call	_stringcpy	;wreg free
 21649  002740                     i2l236:
 21650                           
 21651                           ;GPS.c: 520: }
 21652                           ;GPS.c: 522: if((Term == 6) && (SentenceType == 1)) {
 21653  002740  0E06               	movlw	6
 21654  002742  1836               	xorwf	_Term,w,c
 21655  002744  A4D8               	btfss	status,2,c
 21656  002746  D00C               	goto	i2l239
 21657  002748  0437               	decf	_SentenceType,w,c
 21658  00274A  A4D8               	btfss	status,2,c
 21659  00274C  D009               	goto	i2l239
 21660                           
 21661                           ;GPS.c: 523: if(buffer[0] == 'E')
 21662  00274E  0E45               	movlw	69
 21663  002750  0101               	movlb	1	; () banked
 21664  002752  1962               	xorwf	_buffer& (0+255),w,b
 21665  002754  A4D8               	btfss	status,2,c
 21666  002756  D002               	goto	i2l238
 21667                           
 21668                           ; BSR set to: 1
 21669                           ;GPS.c: 524: rawLongitude[0] = '0';
 21670  002758  0E30               	movlw	48
 21671  00275A  D001               	goto	L13
 21672  00275C                     i2l238:
 21673                           
 21674                           ; BSR set to: 1
 21675                           ;GPS.c: 525: else
 21676                           ;GPS.c: 526: rawLongitude[0] = '-';
 21677                           
 21678                           ; BSR set to: 1
 21679  00275C  0E2D               	movlw	45
 21680  00275E                     L13:
 21681  00275E  6F48               	movwf	_rawLongitude& (0+255),b
 21682  002760                     i2l239:
 21683                           
 21684                           ;GPS.c: 527: }
 21685                           ;GPS.c: 530: if((Term == 7) && (SentenceType == 1)) {
 21686                           
 21687                           ; BSR set to: 1
 21688                           
 21689                           ; BSR set to: 1
 21690  002760  0E07               	movlw	7
 21691  002762  1836               	xorwf	_Term,w,c
 21692  002764  A4D8               	btfss	status,2,c
 21693  002766  D011               	goto	i2l240
 21694  002768  0437               	decf	_SentenceType,w,c
 21695  00276A  A4D8               	btfss	status,2,c
 21696  00276C  D00E               	goto	i2l240
 21697                           
 21698                           ;GPS.c: 531: stringcpy(buffer, rawSpeed, 0);
 21699  00276E  0E62               	movlw	low _buffer
 21700  002770  6E01               	movwf	stringcpy@str1,c
 21701  002772  0E01               	movlw	high _buffer
 21702  002774  6E02               	movwf	stringcpy@str1+1,c
 21703  002776  0E8D               	movlw	low _rawSpeed
 21704  002778  6E03               	movwf	stringcpy@str2,c
 21705  00277A  0E01               	movlw	high _rawSpeed
 21706  00277C  6E04               	movwf	stringcpy@str2+1,c
 21707  00277E  0E00               	movlw	0
 21708  002780  6E06               	movwf	stringcpy@dir+1,c
 21709  002782  0E00               	movlw	0
 21710  002784  6E05               	movwf	stringcpy@dir,c
 21711  002786  EC49  F025         	call	_stringcpy	;wreg free
 21712  00278A                     i2l240:
 21713                           
 21714                           ;GPS.c: 532: }
 21715                           ;GPS.c: 535: if((Term == 8) && (SentenceType == 1)) {
 21716  00278A  0E08               	movlw	8
 21717  00278C  1836               	xorwf	_Term,w,c
 21718  00278E  A4D8               	btfss	status,2,c
 21719  002790  D011               	goto	i2l241
 21720  002792  0437               	decf	_SentenceType,w,c
 21721  002794  A4D8               	btfss	status,2,c
 21722  002796  D00E               	goto	i2l241
 21723                           
 21724                           ;GPS.c: 536: stringcpy(buffer, rawCourse, 0);
 21725  002798  0E62               	movlw	low _buffer
 21726  00279A  6E01               	movwf	stringcpy@str1,c
 21727  00279C  0E01               	movlw	high _buffer
 21728  00279E  6E02               	movwf	stringcpy@str1+1,c
 21729  0027A0  0E87               	movlw	low _rawCourse
 21730  0027A2  6E03               	movwf	stringcpy@str2,c
 21731  0027A4  0E01               	movlw	high _rawCourse
 21732  0027A6  6E04               	movwf	stringcpy@str2+1,c
 21733  0027A8  0E00               	movlw	0
 21734  0027AA  6E06               	movwf	stringcpy@dir+1,c
 21735  0027AC  0E00               	movlw	0
 21736  0027AE  6E05               	movwf	stringcpy@dir,c
 21737  0027B0  EC49  F025         	call	_stringcpy	;wreg free
 21738  0027B4                     i2l241:
 21739                           
 21740                           ;GPS.c: 537: }
 21741                           ;GPS.c: 540: if(Term == 9 && SentenceType == 1) {
 21742  0027B4  0E09               	movlw	9
 21743  0027B6  1836               	xorwf	_Term,w,c
 21744  0027B8  A4D8               	btfss	status,2,c
 21745  0027BA  D011               	goto	i2l242
 21746  0027BC  0437               	decf	_SentenceType,w,c
 21747  0027BE  A4D8               	btfss	status,2,c
 21748  0027C0  D00E               	goto	i2l242
 21749                           
 21750                           ;GPS.c: 541: stringcpy(buffer, rawDate, 0);
 21751  0027C2  0E62               	movlw	low _buffer
 21752  0027C4  6E01               	movwf	stringcpy@str1,c
 21753  0027C6  0E01               	movlw	high _buffer
 21754  0027C8  6E02               	movwf	stringcpy@str1+1,c
 21755  0027CA  0E80               	movlw	low _rawDate
 21756  0027CC  6E03               	movwf	stringcpy@str2,c
 21757  0027CE  0E01               	movlw	high _rawDate
 21758  0027D0  6E04               	movwf	stringcpy@str2+1,c
 21759  0027D2  0E00               	movlw	0
 21760  0027D4  6E06               	movwf	stringcpy@dir+1,c
 21761  0027D6  0E00               	movlw	0
 21762  0027D8  6E05               	movwf	stringcpy@dir,c
 21763  0027DA  EC49  F025         	call	_stringcpy	;wreg free
 21764  0027DE                     i2l242:
 21765                           
 21766                           ;GPS.c: 542: }
 21767                           ;GPS.c: 545: if((Term == 7) && (SentenceType == 2)) {
 21768  0027DE  0E07               	movlw	7
 21769  0027E0  1836               	xorwf	_Term,w,c
 21770  0027E2  A4D8               	btfss	status,2,c
 21771  0027E4  D012               	goto	i2l243
 21772  0027E6  0E02               	movlw	2
 21773  0027E8  1837               	xorwf	_SentenceType,w,c
 21774  0027EA  A4D8               	btfss	status,2,c
 21775  0027EC  D00E               	goto	i2l243
 21776                           
 21777                           ;GPS.c: 546: stringcpy(buffer, rawSatellites, 0);
 21778  0027EE  0E62               	movlw	low _buffer
 21779  0027F0  6E01               	movwf	stringcpy@str1,c
 21780  0027F2  0E01               	movlw	high _buffer
 21781  0027F4  6E02               	movwf	stringcpy@str1+1,c
 21782  0027F6  0E3B               	movlw	low _rawSatellites
 21783  0027F8  6E03               	movwf	stringcpy@str2,c
 21784  0027FA  0E00               	movlw	high _rawSatellites
 21785  0027FC  6E04               	movwf	stringcpy@str2+1,c
 21786  0027FE  0E00               	movlw	0
 21787  002800  6E06               	movwf	stringcpy@dir+1,c
 21788  002802  0E00               	movlw	0
 21789  002804  6E05               	movwf	stringcpy@dir,c
 21790  002806  EC49  F025         	call	_stringcpy	;wreg free
 21791  00280A                     i2l243:
 21792                           
 21793                           ;GPS.c: 547: }
 21794                           ;GPS.c: 550: if((Term == 9) && (SentenceType == 2)) {
 21795  00280A  0E09               	movlw	9
 21796  00280C  1836               	xorwf	_Term,w,c
 21797  00280E  A4D8               	btfss	status,2,c
 21798  002810  D012               	goto	i2l244
 21799  002812  0E02               	movlw	2
 21800  002814  1837               	xorwf	_SentenceType,w,c
 21801  002816  A4D8               	btfss	status,2,c
 21802  002818  D00E               	goto	i2l244
 21803                           
 21804                           ;GPS.c: 551: stringcpy(buffer, rawAltitude, 0);
 21805  00281A  0E62               	movlw	low _buffer
 21806  00281C  6E01               	movwf	stringcpy@str1,c
 21807  00281E  0E01               	movlw	high _buffer
 21808  002820  6E02               	movwf	stringcpy@str1+1,c
 21809  002822  0E79               	movlw	low _rawAltitude
 21810  002824  6E03               	movwf	stringcpy@str2,c
 21811  002826  0E01               	movlw	high _rawAltitude
 21812  002828  6E04               	movwf	stringcpy@str2+1,c
 21813  00282A  0E00               	movlw	0
 21814  00282C  6E06               	movwf	stringcpy@dir+1,c
 21815  00282E  0E00               	movlw	0
 21816  002830  6E05               	movwf	stringcpy@dir,c
 21817  002832  EC49  F025         	call	_stringcpy	;wreg free
 21818  002836                     i2l244:
 21819                           
 21820                           ;GPS.c: 552: }
 21821                           ;GPS.c: 553: Term++;
 21822  002836  2A36               	incf	_Term,f,c
 21823                           
 21824                           ;GPS.c: 554: char_number = 0;
 21825  002838  0E00               	movlw	0
 21826  00283A  6E38               	movwf	_char_number,c
 21827                           
 21828                           ;GPS.c: 555: break;
 21829  00283C  0012               	return	
 21830  00283E                     
 21831                           ;GPS.c: 558: buffer[char_number++] = c;
 21832  00283E  5038               	movf	_char_number,w,c
 21833  002840  0D01               	mullw	1
 21834  002842  0E62               	movlw	low _buffer
 21835  002844  24F3               	addwf	prodl,w,c
 21836  002846  6ED9               	movwf	fsr2l,c
 21837  002848  0E01               	movlw	high _buffer
 21838  00284A  20F4               	addwfc	prodh,w,c
 21839  00284C  6EDA               	movwf	fsr2h,c
 21840  00284E  C00B  FFDF         	movff	GPSRead@c,indf2
 21841  002852  2A38               	incf	_char_number,f,c
 21842                           
 21843                           ;GPS.c: 560: }
 21844                           
 21845                           ;GPS.c: 559: break;
 21846  002854  0012               	return	
 21847  002856                     i2l217:
 21848  002856  500B               	movf	GPSRead@c,w,c
 21849                           
 21850                           ; Switch size 1, requested type "space"
 21851                           ; Number of cases is 3, Range of values is 13 to 44
 21852                           ; switch strategies available:
 21853                           ; Name         Instructions Cycles
 21854                           ; simple_byte           10     6 (average)
 21855                           ;	Chosen strategy is simple_byte
 21856  002858  0A0D               	xorlw	13	; case 13
 21857  00285A  B4D8               	btfsc	status,2,c
 21858  00285C  D6C1               	goto	i2l218
 21859  00285E  0A29               	xorlw	41	; case 36
 21860  002860  B4D8               	btfsc	status,2,c
 21861  002862  D6DE               	goto	i2l224
 21862  002864  0A08               	xorlw	8	; case 44
 21863  002866  B4D8               	btfsc	status,2,c
 21864  002868  D6E0               	goto	i2l225
 21865  00286A  D7E9               	goto	i2l245
 21866  00286C                     __end_of_GPSRead:
 21867                           	opt stack 0
 21868                           tosu	equ	0xFFF
 21869                           tosh	equ	0xFFE
 21870                           tosl	equ	0xFFD
 21871                           pclatu	equ	0xFFB
 21872                           pclath	equ	0xFFA
 21873                           pcl	equ	0xFF9
 21874                           tblptru	equ	0xFF8
 21875                           tblptrh	equ	0xFF7
 21876                           tblptrl	equ	0xFF6
 21877                           tablat	equ	0xFF5
 21878                           prodh	equ	0xFF4
 21879                           prodl	equ	0xFF3
 21880                           intcon	equ	0xFF2
 21881                           intcon2	equ	0xFF1
 21882                           intcon3	equ	0xFF0
 21883                           indf0	equ	0xFEF
 21884                           postinc0	equ	0xFEE
 21885                           fsr0h	equ	0xFEA
 21886                           fsr0l	equ	0xFE9
 21887                           wreg	equ	0xFE8
 21888                           indf1	equ	0xFE7
 21889                           postinc1	equ	0xFE6
 21890                           postdec1	equ	0xFE5
 21891                           plusw1	equ	0xFE3
 21892                           fsr1h	equ	0xFE2
 21893                           fsr1l	equ	0xFE1
 21894                           indf2	equ	0xFDF
 21895                           postinc2	equ	0xFDE
 21896                           postdec2	equ	0xFDD
 21897                           plusw2	equ	0xFDB
 21898                           fsr2h	equ	0xFDA
 21899                           fsr2l	equ	0xFD9
 21900                           status	equ	0xFD8
 21901                           
 21902 ;; *************** function _stringcpy *****************
 21903 ;; Defined at:
 21904 ;;		line 459 in file "bibliotecas/GPS.c"
 21905 ;; Parameters:    Size  Location     Type
 21906 ;;  str1            2    0[COMRAM] PTR unsigned char 
 21907 ;;		 -> buffer(12), 
 21908 ;;  str2            2    2[COMRAM] PTR unsigned char 
 21909 ;;		 -> rawAltitude(7), rawSatellites(3), rawDate(7), rawCourse(6), 
 21910 ;;		 -> rawSpeed(6), rawLongitude(13), rawLatitude(13), rawTime(11), 
 21911 ;;		 -> sentence(6), 
 21912 ;;  dir             2    4[COMRAM] int 
 21913 ;; Auto vars:     Size  Location     Type
 21914 ;;  chr             1    8[COMRAM] unsigned char 
 21915 ;; Return value:  Size  Location     Type
 21916 ;;                  1    wreg      void 
 21917 ;; Registers used:
 21918 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21919 ;; Tracked objects:
 21920 ;;		On entry : 0/0
 21921 ;;		On exit  : 0/0
 21922 ;;		Unchanged: 0/0
 21923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21924 ;;      Params:         6       0       0       0       0       0       0       0       0
 21925 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21926 ;;      Temps:          2       0       0       0       0       0       0       0       0
 21927 ;;      Totals:         9       0       0       0       0       0       0       0       0
 21928 ;;Total ram usage:        9 bytes
 21929 ;; Hardware stack levels used:    1
 21930 ;; This function calls:
 21931 ;;		Nothing
 21932 ;; This function is called by:
 21933 ;;		_GPSRead
 21934 ;; This function uses a non-reentrant model
 21935 ;;
 21936                           
 21937                           	psect	text87
 21938  004A92                     __ptext87:
 21939                           	opt stack 0
 21940  004A92                     _stringcpy:
 21941                           	opt stack 13
 21942                           
 21943                           ;GPS.c: 461: uint8_t chr = 0;
 21944                           
 21945                           ;incstack = 0
 21946  004A92  0E00               	movlw	0
 21947  004A94  6E09               	movwf	stringcpy@chr,c
 21948  004A96                     
 21949                           ;GPS.c: 464: str2[chr + dir] = str1[chr];
 21950  004A96  5009               	movf	stringcpy@chr,w,c
 21951  004A98  0D01               	mullw	1
 21952  004A9A  50F3               	movf	prodl,w,c
 21953  004A9C  2401               	addwf	stringcpy@str1,w,c
 21954  004A9E  6ED9               	movwf	fsr2l,c
 21955  004AA0  50F4               	movf	prodh,w,c
 21956  004AA2  2002               	addwfc	stringcpy@str1+1,w,c
 21957  004AA4  6EDA               	movwf	fsr2h,c
 21958  004AA6  5009               	movf	stringcpy@chr,w,c
 21959  004AA8  2405               	addwf	stringcpy@dir,w,c
 21960  004AAA  6E07               	movwf	??_stringcpy& (0+255),c
 21961  004AAC  0E00               	movlw	0
 21962  004AAE  2006               	addwfc	stringcpy@dir+1,w,c
 21963  004AB0  6E08               	movwf	(??_stringcpy+1)& (0+255),c
 21964  004AB2  5007               	movf	??_stringcpy,w,c
 21965  004AB4  2403               	addwf	stringcpy@str2,w,c
 21966  004AB6  6EE1               	movwf	fsr1l,c
 21967  004AB8  5008               	movf	??_stringcpy+1,w,c
 21968  004ABA  2004               	addwfc	stringcpy@str2+1,w,c
 21969  004ABC  6EE2               	movwf	fsr1h,c
 21970  004ABE  CFDF FFE7          	movff	indf2,indf1
 21971                           
 21972                           ;GPS.c: 465: } while(str1[chr++] != '\0');
 21973  004AC2  2A09               	incf	stringcpy@chr,f,c
 21974  004AC4  0409               	decf	stringcpy@chr,w,c
 21975  004AC6  6E07               	movwf	??_stringcpy& (0+255),c
 21976  004AC8  5007               	movf	??_stringcpy,w,c
 21977  004ACA  0D01               	mullw	1
 21978  004ACC  50F3               	movf	prodl,w,c
 21979  004ACE  2401               	addwf	stringcpy@str1,w,c
 21980  004AD0  6ED9               	movwf	fsr2l,c
 21981  004AD2  50F4               	movf	prodh,w,c
 21982  004AD4  2002               	addwfc	stringcpy@str1+1,w,c
 21983  004AD6  6EDA               	movwf	fsr2h,c
 21984  004AD8  50DF               	movf	indf2,w,c
 21985  004ADA  B4D8               	btfsc	status,2,c
 21986  004ADC  0012               	return	
 21987  004ADE  D7DB               	goto	i2l212
 21988  004AE0                     __end_of_stringcpy:
 21989                           	opt stack 0
 21990                           tosu	equ	0xFFF
 21991                           tosh	equ	0xFFE
 21992                           tosl	equ	0xFFD
 21993                           pclatu	equ	0xFFB
 21994                           pclath	equ	0xFFA
 21995                           pcl	equ	0xFF9
 21996                           tblptru	equ	0xFF8
 21997                           tblptrh	equ	0xFF7
 21998                           tblptrl	equ	0xFF6
 21999                           tablat	equ	0xFF5
 22000                           prodh	equ	0xFF4
 22001                           prodl	equ	0xFF3
 22002                           intcon	equ	0xFF2
 22003                           intcon2	equ	0xFF1
 22004                           intcon3	equ	0xFF0
 22005                           indf0	equ	0xFEF
 22006                           postinc0	equ	0xFEE
 22007                           fsr0h	equ	0xFEA
 22008                           fsr0l	equ	0xFE9
 22009                           wreg	equ	0xFE8
 22010                           indf1	equ	0xFE7
 22011                           postinc1	equ	0xFE6
 22012                           postdec1	equ	0xFE5
 22013                           plusw1	equ	0xFE3
 22014                           fsr1h	equ	0xFE2
 22015                           fsr1l	equ	0xFE1
 22016                           indf2	equ	0xFDF
 22017                           postinc2	equ	0xFDE
 22018                           postdec2	equ	0xFDD
 22019                           plusw2	equ	0xFDB
 22020                           fsr2h	equ	0xFDA
 22021                           fsr2l	equ	0xFD9
 22022                           status	equ	0xFD8
 22023                           
 22024 ;; *************** function _strcmp *****************
 22025 ;; Defined at:
 22026 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
 22027 ;; Parameters:    Size  Location     Type
 22028 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 22029 ;;		 -> sentence(6), 
 22030 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 22031 ;;		 -> STR_11(6), STR_10(6), 
 22032 ;; Auto vars:     Size  Location     Type
 22033 ;;  r               1    5[COMRAM] char 
 22034 ;; Return value:  Size  Location     Type
 22035 ;;                  2    0[COMRAM] int 
 22036 ;; Registers used:
 22037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 22038 ;; Tracked objects:
 22039 ;;		On entry : 0/0
 22040 ;;		On exit  : 0/0
 22041 ;;		Unchanged: 0/0
 22042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22043 ;;      Params:         4       0       0       0       0       0       0       0       0
 22044 ;;      Locals:         1       0       0       0       0       0       0       0       0
 22045 ;;      Temps:          1       0       0       0       0       0       0       0       0
 22046 ;;      Totals:         6       0       0       0       0       0       0       0       0
 22047 ;;Total ram usage:        6 bytes
 22048 ;; Hardware stack levels used:    1
 22049 ;; This function calls:
 22050 ;;		Nothing
 22051 ;; This function is called by:
 22052 ;;		_GPSRead
 22053 ;; This function uses a non-reentrant model
 22054 ;;
 22055                           
 22056                           	psect	text88
 22057  004C06                     __ptext88:
 22058                           	opt stack 0
 22059  004C06                     _strcmp:
 22060                           	opt stack 13
 22061                           
 22062                           ;incstack = 0
 22063  004C06  D004               	goto	i2l2016
 22064  004C08  4A01               	infsnz	strcmp@s1,f,c
 22065  004C0A  2A02               	incf	strcmp@s1+1,f,c
 22066  004C0C  4A03               	infsnz	strcmp@s2,f,c
 22067  004C0E  2A04               	incf	strcmp@s2+1,f,c
 22068  004C10                     i2l2016:
 22069  004C10  C001  FFD9         	movff	strcmp@s1,fsr2l
 22070  004C14  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 22071  004C18  50DF               	movf	indf2,w,c
 22072  004C1A  6E05               	movwf	??_strcmp& (0+255),c
 22073  004C1C  C003  FFF6         	movff	strcmp@s2,tblptrl
 22074  004C20  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 22075  004C24                     	if	0	;tblptru may be non-zero
 22076  004C24                     	endif
 22077  004C24                     	if	0	;tblptru may be non-zero
 22078  004C24                     	endif
 22079  004C24  0008               	tblrd		*
 22080  004C26  50F5               	movf	tablat,w,c
 22081  004C28  0800               	sublw	0
 22082  004C2A  2405               	addwf	??_strcmp,w,c
 22083  004C2C  6E06               	movwf	strcmp@r,c
 22084  004C2E  5006               	movf	strcmp@r,w,c
 22085  004C30  A4D8               	btfss	status,2,c
 22086  004C32  D007               	goto	i2u939_40
 22087  004C34  C001  FFD9         	movff	strcmp@s1,fsr2l
 22088  004C38  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 22089  004C3C  50DF               	movf	indf2,w,c
 22090  004C3E  A4D8               	btfss	status,2,c
 22091  004C40  D7E3               	goto	i2l2017
 22092  004C42                     i2u939_40:
 22093  004C42  5006               	movf	strcmp@r,w,c
 22094  004C44  6E01               	movwf	?_strcmp,c
 22095  004C46  6A02               	clrf	?_strcmp+1,c
 22096  004C48  BE01               	btfsc	?_strcmp,7,c
 22097  004C4A  0602               	decf	?_strcmp+1,f,c
 22098  004C4C  0012               	return	
 22099  004C4E                     __end_of_strcmp:
 22100                           	opt stack 0
 22101                           tosu	equ	0xFFF
 22102                           tosh	equ	0xFFE
 22103                           tosl	equ	0xFFD
 22104                           pclatu	equ	0xFFB
 22105                           pclath	equ	0xFFA
 22106                           pcl	equ	0xFF9
 22107                           tblptru	equ	0xFF8
 22108                           tblptrh	equ	0xFF7
 22109                           tblptrl	equ	0xFF6
 22110                           tablat	equ	0xFF5
 22111                           prodh	equ	0xFF4
 22112                           prodl	equ	0xFF3
 22113                           intcon	equ	0xFF2
 22114                           intcon2	equ	0xFF1
 22115                           intcon3	equ	0xFF0
 22116                           indf0	equ	0xFEF
 22117                           postinc0	equ	0xFEE
 22118                           fsr0h	equ	0xFEA
 22119                           fsr0l	equ	0xFE9
 22120                           wreg	equ	0xFE8
 22121                           indf1	equ	0xFE7
 22122                           postinc1	equ	0xFE6
 22123                           postdec1	equ	0xFE5
 22124                           plusw1	equ	0xFE3
 22125                           fsr1h	equ	0xFE2
 22126                           fsr1l	equ	0xFE1
 22127                           indf2	equ	0xFDF
 22128                           postinc2	equ	0xFDE
 22129                           postdec2	equ	0xFDD
 22130                           plusw2	equ	0xFDB
 22131                           fsr2h	equ	0xFDA
 22132                           fsr2l	equ	0xFD9
 22133                           status	equ	0xFD8
 22134                           tosu	equ	0xFFF
 22135                           tosh	equ	0xFFE
 22136                           tosl	equ	0xFFD
 22137                           pclatu	equ	0xFFB
 22138                           pclath	equ	0xFFA
 22139                           pcl	equ	0xFF9
 22140                           tblptru	equ	0xFF8
 22141                           tblptrh	equ	0xFF7
 22142                           tblptrl	equ	0xFF6
 22143                           tablat	equ	0xFF5
 22144                           prodh	equ	0xFF4
 22145                           prodl	equ	0xFF3
 22146                           intcon	equ	0xFF2
 22147                           intcon2	equ	0xFF1
 22148                           intcon3	equ	0xFF0
 22149                           indf0	equ	0xFEF
 22150                           postinc0	equ	0xFEE
 22151                           fsr0h	equ	0xFEA
 22152                           fsr0l	equ	0xFE9
 22153                           wreg	equ	0xFE8
 22154                           indf1	equ	0xFE7
 22155                           postinc1	equ	0xFE6
 22156                           postdec1	equ	0xFE5
 22157                           plusw1	equ	0xFE3
 22158                           fsr1h	equ	0xFE2
 22159                           fsr1l	equ	0xFE1
 22160                           indf2	equ	0xFDF
 22161                           postinc2	equ	0xFDE
 22162                           postdec2	equ	0xFDD
 22163                           plusw2	equ	0xFDB
 22164                           fsr2h	equ	0xFDA
 22165                           fsr2l	equ	0xFD9
 22166                           status	equ	0xFD8
 22167                           
 22168                           	psect	text89
 22169  000000                     __ptext89:
 22170                           	opt stack 0
 22171                           tosu	equ	0xFFF
 22172                           tosh	equ	0xFFE
 22173                           tosl	equ	0xFFD
 22174                           pclatu	equ	0xFFB
 22175                           pclath	equ	0xFFA
 22176                           pcl	equ	0xFF9
 22177                           tblptru	equ	0xFF8
 22178                           tblptrh	equ	0xFF7
 22179                           tblptrl	equ	0xFF6
 22180                           tablat	equ	0xFF5
 22181                           prodh	equ	0xFF4
 22182                           prodl	equ	0xFF3
 22183                           intcon	equ	0xFF2
 22184                           intcon2	equ	0xFF1
 22185                           intcon3	equ	0xFF0
 22186                           indf0	equ	0xFEF
 22187                           postinc0	equ	0xFEE
 22188                           fsr0h	equ	0xFEA
 22189                           fsr0l	equ	0xFE9
 22190                           wreg	equ	0xFE8
 22191                           indf1	equ	0xFE7
 22192                           postinc1	equ	0xFE6
 22193                           postdec1	equ	0xFE5
 22194                           plusw1	equ	0xFE3
 22195                           fsr1h	equ	0xFE2
 22196                           fsr1l	equ	0xFE1
 22197                           indf2	equ	0xFDF
 22198                           postinc2	equ	0xFDE
 22199                           postdec2	equ	0xFDD
 22200                           plusw2	equ	0xFDB
 22201                           fsr2h	equ	0xFDA
 22202                           fsr2l	equ	0xFD9
 22203                           status	equ	0xFD8
 22204                           
 22205                           	psect	rparam
 22206  0000                     tosu	equ	0xFFF
 22207                           tosh	equ	0xFFE
 22208                           tosl	equ	0xFFD
 22209                           pclatu	equ	0xFFB
 22210                           pclath	equ	0xFFA
 22211                           pcl	equ	0xFF9
 22212                           tblptru	equ	0xFF8
 22213                           tblptrh	equ	0xFF7
 22214                           tblptrl	equ	0xFF6
 22215                           tablat	equ	0xFF5
 22216                           prodh	equ	0xFF4
 22217                           prodl	equ	0xFF3
 22218                           intcon	equ	0xFF2
 22219                           intcon2	equ	0xFF1
 22220                           intcon3	equ	0xFF0
 22221                           indf0	equ	0xFEF
 22222                           postinc0	equ	0xFEE
 22223                           fsr0h	equ	0xFEA
 22224                           fsr0l	equ	0xFE9
 22225                           wreg	equ	0xFE8
 22226                           indf1	equ	0xFE7
 22227                           postinc1	equ	0xFE6
 22228                           postdec1	equ	0xFE5
 22229                           plusw1	equ	0xFE3
 22230                           fsr1h	equ	0xFE2
 22231                           fsr1l	equ	0xFE1
 22232                           indf2	equ	0xFDF
 22233                           postinc2	equ	0xFDE
 22234                           postdec2	equ	0xFDD
 22235                           plusw2	equ	0xFDB
 22236                           fsr2h	equ	0xFDA
 22237                           fsr2l	equ	0xFD9
 22238                           status	equ	0xFD8
 22239                           
 22240                           	psect	temp
 22241  00003F                     btemp:
 22242                           	opt stack 0
 22243  00003F                     	ds	1
 22244  0000                     int$flags	set	btemp
 22245  0000                     wtemp6	set	btemp+1
 22246                           tosu	equ	0xFFF
 22247                           tosh	equ	0xFFE
 22248                           tosl	equ	0xFFD
 22249                           pclatu	equ	0xFFB
 22250                           pclath	equ	0xFFA
 22251                           pcl	equ	0xFF9
 22252                           tblptru	equ	0xFF8
 22253                           tblptrh	equ	0xFF7
 22254                           tblptrl	equ	0xFF6
 22255                           tablat	equ	0xFF5
 22256                           prodh	equ	0xFF4
 22257                           prodl	equ	0xFF3
 22258                           intcon	equ	0xFF2
 22259                           intcon2	equ	0xFF1
 22260                           intcon3	equ	0xFF0
 22261                           indf0	equ	0xFEF
 22262                           postinc0	equ	0xFEE
 22263                           fsr0h	equ	0xFEA
 22264                           fsr0l	equ	0xFE9
 22265                           wreg	equ	0xFE8
 22266                           indf1	equ	0xFE7
 22267                           postinc1	equ	0xFE6
 22268                           postdec1	equ	0xFE5
 22269                           plusw1	equ	0xFE3
 22270                           fsr1h	equ	0xFE2
 22271                           fsr1l	equ	0xFE1
 22272                           indf2	equ	0xFDF
 22273                           postinc2	equ	0xFDE
 22274                           postdec2	equ	0xFDD
 22275                           plusw2	equ	0xFDB
 22276                           fsr2h	equ	0xFDA
 22277                           fsr2l	equ	0xFD9
 22278                           status	equ	0xFD8


Data Sizes:
    Strings     254
    Constant    34
    Data        52
    BSS         1069
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      62
    BANK0           160    140     160
    BANK1           256     38     242
    BANK2           256     35      55
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3331	PTR FTN()void  size(2) Largest target is 1
		 -> verifica_fence_externo(), disparo_gravacao(), verifica_dados_operacionais(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_11(CODE[6]), STR_10(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK1[6]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), STR_25(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(COMRAM[7]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 304
		 -> poligono_ext.point_long_min(BIGRAM[6]), poligono_ext.fence_long_min(BIGRAM[6]), poligono_ext.point_lat_min(BIGRAM[6]), poligono_ext.fence_lat_min(BIGRAM[6]), 
		 -> poligono_ext(BIGRAM[304]), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_18(CODE[21]), 

    fprintf@arp	PTR void [1] size(2) Largest target is 2
		 -> ?_fprintf(BANK1[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 44
		 -> fprintf@s(BANK2[16]), string_dado(BANK1[44]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_19(CODE[13]), filename(BANK1[15]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_19(CODE[13]), filename(BANK1[15]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_open@dir(BANK1[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    trace_path@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK1[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_19(CODE[13]), filename(BANK1[15]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    S1747_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 21
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), STR_23(CODE[11]), STR_22(CODE[10]), STR_21(CODE[16]), 
		 -> STR_20(CODE[11]), STR_17(CODE[9]), STR_16(CODE[10]), STR_15(CODE[10]), 
		 -> STR_14(CODE[14]), STR_13(CODE[21]), STR_12(CODE[15]), STR_9(CODE[14]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(COMRAM[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK2[20]), 

    S481_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S481_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK1[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 13
		 -> rawAltitude(BANK1[7]), rawSatellites(COMRAM[3]), rawDate(BANK1[7]), rawCourse(BANK1[6]), 
		 -> rawSpeed(BANK1[6]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 
		 -> sentence(BANK1[6]), 

    sp__Longitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK1[13]), 

    verifica_fence_externo@point_buff_gps_long	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK1[13]), 

    sp__Latitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK1[13]), 

    verifica_fence_externo@point_buff_gps_lat	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK1[13]), 

    p_tarefas	PTR FTN()void [3] size(2) Largest target is 1
		 -> verifica_fence_externo(), disparo_gravacao(), verifica_dados_operacionais(), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_escreve_cmd_lcd
    _init_lcd->_escreve_cmd_lcd
    _atoi->_isdigit
    _escrita_sdcard->_f_mount
    _fprintf->___llmod
    _auto_mount->_disk_status
    _sdc_disk_initialize->_response
    _sdc_reset->_response
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _validate->_disk_status
    _sdc_disk_write->_response
    _sdc_disk_read->_response

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_delay
    _escreve_cmd_lcd->_delay
    _config_timer_zero->_write_timer_zero
    _verifica_fence_externo->_atoi
    _atoi->___wmul
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _fprintf->_fputc
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_trace_path
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _clust2sect->___lmul
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _endereco_cursor_lcd->_delay
    _escreve_caractere_lcd->_delay
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_wait_ready
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_escalonador
    _escrita_sdcard->_f_open
    _fprintf->_fputs

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _escrita_sdcard->_fprintf

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  426987
                    _dados_gps_to_sd
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    4123
                                              5 BANK0     36    36      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                              2 BANK0      1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             32 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     247
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     247
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     247
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  419576
                                             35 BANK1      3     3      0
                   _disparo_gravacao *
        _verifica_dados_operacionais *
             _verifica_fence_externo *
 ---------------------------------------------------------------------------------
 (2) _verifica_fence_externo                              40    40      0    8142
                                             13 BANK0     36    36      0
                           _Latitude
                          _Longitude
                               _atoi
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    2075
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             32 COMRAM     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Longitude                                            2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Latitude                                             2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _verifica_dados_operacionais                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _disparo_gravacao                                     0     0      0  411211
                     _escrita_sdcard
 ---------------------------------------------------------------------------------
 (3) _escrita_sdcard                                       2     2      0  411211
                        _desliga_SPI
                       _desliga_uart
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                     _inicializa_SPI
                    _inicializa_uart
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             14 BANK0     14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _fprintf                                             49    37     12  128372
                                              7 BANK1     14     2     12
                                              0 BANK2     35    35      0
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (5) _fputs                                                7     3      4   61931
                                              0 BANK1      7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                7     3      4   61438
                                            133 BANK0      7     3      4
                            _f_write
 ---------------------------------------------------------------------------------
 (7) _f_write                                             33    25      8   60626
                                            100 BANK0     33    25      8
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     412
                                             32 COMRAM     1     1      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) _f_open                                              44    39      5  196066
                                            119 BANK0      9     4      5
                                              0 BANK1     35    35      0
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (5) _trace_path                                          23    15      8   39318
                                             96 BANK0     23    15      8
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _make_dirfile                                        13     9      4    2753
                                              8 BANK0     13     9      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _reserve_direntry                                    18    14      4   76831
                                            100 BANK0     18    14      4
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _next_dir_entry                                      13    11      2   18643
                                             83 BANK0     13    11      2
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (8) _clust2sect                                          11     7      4    1487
                                             12 BANK0     11     7      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _remove_chain                                         8     6      2   33313
                                             86 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (8) _memcpy                                              11     5      6    1018
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (5) _auto_mount                                          40    37      3   27083
                                             51 BANK0     40    37      3
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (7) _memset                                               8     2      6    1217
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (6) _disk_initialize                                      4     4      0   15356
                                             32 BANK0      2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (7) _sdc_disk_initialize                                 13    13      0   15226
                                             19 BANK0     13    13      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (8) _sdc_reset                                           20    20      0    7179
                                             12 BANK0      7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    1857
                                              2 BANK0      3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             32 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    1709
                                              2 BANK0      2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             32 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _check_fs                                             8     4      4    6655
                                             43 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (6) _memcmp                                               9     3      6     701
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     516
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) _f_mount                                              3     1      2     394
                                             32 COMRAM     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _f_lseek                                             29    23      6   54870
                                            100 BANK0     29    23      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (8) _create_chain                                        14    12      2   34376
                                             86 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (9) _put_cluster                                         22    18      4   16613
                                             64 BANK0     22    18      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (9) _get_cluster                                         19    17      2   16322
                                             64 BANK0     19    17      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1282
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     901
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _f_close                                              3     1      2   30391
                                             75 BANK0      3     1      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (5) _f_sync                                               9     7      2   30018
                                             66 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (8) _validate                                             6     2      4    1250
                                              6 BANK0      6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (9) _disk_status                                          5     5      0     226
                                             32 COMRAM     1     1      0
                                              2 BANK0      4     4      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_status                                     4     4      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _sync                                                 2     2      0   14169
                                             64 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (8) _move_window                                         21    17      4   13831
                                             43 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (9) _disk_write                                          12     5      7    6078
                                             31 BANK0     12     5      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_write                                     19    12      7    4614
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (9) _disk_read                                           12     5      7    5647
                                             31 BANK0     12     5      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_read                                      24    17      7    4450
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (11) _response                                            1     1      0      34
                                             32 COMRAM     1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (11) _proceed                                             0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (11) _command                                             7     2      5    3403
                                              5 BANK0      7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (12) _wait_ready                                         15    15      0      99
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _escreve_SPI                                         2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _dummy_clocks                                        5     5      0      68
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _disk_ioctl                                           7     4      3     304
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (5) _get_fattime                                         51    47      4     201
                                              0 BANK0     51    47      4
 ---------------------------------------------------------------------------------
 (4) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dados_gps_to_sd                                      0     0      0    1310
                           _monta_sd
 ---------------------------------------------------------------------------------
 (2) _monta_sd                                             5     3      2    1310
                                              6 BANK0      5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     220
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                21    21      0    2930
                                             11 COMRAM    21    21      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (17) i2_write_timer_zero                                  4     2      2     131
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (17) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _GPSRead                                             2     2      0    2669
                                              9 COMRAM     2     2      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (18) _stringcpy                                           9     3      6    2207
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (18) _strcmp                                              6     2      4     395
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dados_gps_to_sd
     _monta_sd
       _strlen
   _escalonador
     _disparo_gravacao *
       _escrita_sdcard
         _desliga_SPI
         _desliga_uart
         _f_close
           _f_sync
             _get_fattime
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _sync
               _disk_ioctl
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _f_lseek
           ___lldiv
           _create_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _validate
             _disk_status
               _sdc_disk_status
         _f_mount
         _f_open
           _auto_mount
             ___lldiv
             ___lmul
             _check_fs
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcmp
             _disk_initialize
               _sdc_disk_initialize
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
                 _sdc_reset
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _disk_status
               _sdc_disk_status
             _memset
           _get_fattime
           _memcpy
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _remove_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _reserve_direntry
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
           _trace_path
             _clust2sect
               ___lmul
             _make_dirfile
               _memset
             _memcmp
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
         _fprintf
           ___lldiv
           ___llmod
           ___wmul
           _fputc
             _f_write
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcpy
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
           _fputs
             _fputc
               _f_write
                 _clust2sect
                   ___lmul
                 _create_chain
                   _get_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                   _put_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcpy
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                 _validate
                   _disk_status
                     _sdc_disk_status
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
     _verifica_dados_operacionais *
     _verifica_fence_externo *
       _Latitude
       _Longitude
       _atoi
         ___wmul
         _isdigit
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     350      21       41.4%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     23      37       9       21.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100     26      F2       7       94.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8C      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      3E       1       66.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     207      20        0.0%
DATA                 0      0     557       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Apr 14 15:19:57 2022

                        next_dir_entry@idx 00BE                   __end_of_mensagem_inicial 4552  
                      next_dir_entry@clust 00BC                                _SSPSTATbits 000FC7  
                         ??_init_interrupt 0021                                         _fs 0237  
                      ___wmul@multiplicand 0062                                _put_cluster 286C  
                         disk_write@sector 0081                               ?_escalonador 0001  
                           create_chain@fs 00BC                           disk_write@result 0088  
                         ?_inicializa_uart 0001                                        l100 4020  
                                      l102 40B2                                        l130 01AA  
                                      l131 01BA                                        l108 4E04  
                                      l141 03B4                                        l133 027A  
                                      l109 4E14                                        l134 05F8  
                                      l126 009A                                        l135 027E  
                                      l144 0420                                        l136 028A  
                                      l128 00EA                                        l161 0622  
                                      l153 0600                                        l155 0626  
                                      l147 0604                                        l139 02EE  
                                      l308 4C7E                                        l404 4FB4  
                                      l500 1E06                                        l309 4C70  
                                      l317 4D60                                        l325 4832  
                                      l501 1E30                                        l350 391C  
                                      l326 482C                                        l351 3928  
                                      l159 063C                                        l600 4348  
                                      l361 39B2                                        l441 4BEC  
                                      l601 4350                                        l362 39BE  
                                      l354 394C                                        l442 4BC4  
                                      l514 1F46                                        l506 1EBA  
                                      l450 4D18                                        l610 4386  
                                      l602 4352                                        l355 3958  
                                      l523 2014                                        l339 3F60  
                                      l611 438E                                        l603 435A  
                                      l364 39E2                                        l540 374A  
                                      l460 42D4                                        l444 4BD4  
                                      l620 475E                                        l524 203E  
                                      l452 4D24                                        l612 4390  
                                      l604 435C                                        l349 3A14  
                                      l365 3A0A                                        l533 3710  
                                      l461 430E                                        l445 4BE8  
                                      l621 4766                                        l517 1F86  
                                      l453 4D30                                        l605 4370  
                                      l366 39E8                                        l358 3982  
                                      l542 377E                                        l534 36FC  
                                      l550 2DF8                                        l630 479C  
                                      l622 4768                                        l518 1FB0  
                                      l606 4372                                        l359 398E  
                                      l543 3766                                        l551 2D44  
                                      l631 47A4                                        l623 4770  
                                      l607 437A                                        l560 2E76  
                                      l632 47A6                                        l624 4772  
                                      l640 4678                                        l528 2080  
                                      l608 437C                                        l473 4E58  
                                      l545 37B8                                        l537 3736  
                                      l457 4312                                        l553 2D98  
                                      l465 44B2                                        l625 4786  
                                      l641 4688                                        l481 40D0  
                                      l449 4D34                                        l609 4384  
                                      l474 4E4C                                        l458 42A2  
                                      l562 2EBE                                        l466 444A  
                                      l650 46F2                                        l626 4788  
                                      l642 4698                                        l482 40EE  
                                      l539 3752                                        l555 2DC8  
                                      l651 46F4                                        l627 4790  
                                      l619 475C                                        l643 46A8  
                                      l491 1DA6                                        l476 4E50  
                                      l468 447C                                        l660 4730  
                                      l652 46FC                                        l628 4792  
                                      l636 46D2                                        l492 1DBC  
                                      l477 4E54                                        l469 44AE  
                                      l661 4732                                        l653 46FE  
                                      l629 479A                                        l637 46B0  
                                      l398 5052                                        l558 2E42  
                                      l662 473A                                        l654 4706  
                                      l638 466C                                        l486 4150  
                                      l494 1DC8                                        l567 4F76  
                                      l663 473C                                        l655 4708  
                                      l639 46CC                                        l656 471C  
                                      l648 46E8                                        l657 471E  
                                      l649 46EA                                        l681 4A1A  
                                      l658 4726                                        l682 49F0  
                                      l498 1F56                                        l587 4E80  
                                      l659 4728                                        l499 1DFC  
                                      l932 319A                                        l940 493C  
                                      l852 38EA                                        l589 4E90  
                                      l597 433C                                        l934 3244  
                                      l950 2C54                                        l598 433E  
                                      l935 3226                                        l599 4346  
                                      l944 2CE2                                        l960 28F4  
                                      l929 3114                                        l945 2B32  
                                      l938 491E                                        l954 2C74  
                                      l947 2CFC                                        l971 2AD2  
                                      l963 292E                                        l972 2A40  
                                      l973 2A74                                        l965 2962  
                                      l981 3FB6                                        l958 2AB6  
                                      l974 2AB2                                        l966 29BE  
                                      l982 3FE0                                        l959 2894  
                                      l968 2A16                                        l992 2F78  
                                      l993 2F5A                                        l977 3FE8  
                                      l978 3F76                                        l995 2F70  
                                      l979 3F98                                        l996 2F80  
                                      l988 2F2E                                        l998 2FAE  
                                      _PCL 000FF9                                        _PR2 000FCB  
                                      _fil 012C                           ??_init_oscilador 0021  
                                      _isr 0008                               disk_read@res 008A  
                                      prod 000FF3                             ??_create_chain 00B8  
                                      tosl 000FFD                                        wreg 000FE8  
                __size_of_write_timer_zero 0012                            create_chain@mcl 00BA  
                          create_chain@ncl 00C2                            create_chain@scl 00C0  
                  ??_escreve_frase_ram_lcd 0022                                       l1000 2FF6  
                                     l1001 2FDE                                       l1003 301A  
                                     l1004 304A                                       l1005 3088  
                                     l1013 32D0                                       l1110 23B0  
                                     l1102 2288                                       l1111 23D8  
                                     l1008 3E62                                       l1112 23EC  
                                     l1040 3400                                       l1017 33B8  
                                     l1113 2418                                       l1041 3470  
                                     l1105 22AE                                       l1018 337A  
                                     l1122 24F4                                       l1106 22C2  
                                     l1131 43F2                                       l1115 2484  
                                     l1140 0C86                                       l1133 4412  
                                     l1141 0CAC                                       l1125 25A2  
                                     l1045 353A                                       l1134 4440  
                                     l1150 0DAC                                       l1126 2562  
                                     l1230 0B9A                                       l1127 2592  
                                     l1119 24CE                                       l1231 0724  
                                     l2024 4CE4                                       l1144 0CDC  
                                     l1072 34E0                                       l1232 0A20  
                                     l1320 49AC                                       l2025 4CDE  
                                     l1153 0DF4                                       l1145 0CD8  
                                     l1137 0C34                                       l1081 3516  
                                     l1065 34AE                                       l1057 349E  
                                     l1233 085A                                       l1154 0F30  
                                     l1146 0D0A                                       l1138 0C2E  
                                     l1090 218E                                       l1242 0C08  
                                     l1250 0AE2                                       l1234 07E0  
                                     l1330 48C4                                       l1163 4B28  
                                     l1155 1022                                       l1147 0D16  
                                     l1083 3518                                       l1075 34F8  
                                     l1067 34B6                                       l1251 0BF6  
                                     l1243 09A2                                       l1323 49E4  
                                     l1156 1038                                       l1068 34BE  
                                     l1092 21BA                                       l1180 1A60  
                                     l1244 094A                                       l1236 0800  
                                     l1340 19A4                                       l1149 0D8A  
                                     l1077 34FA                                       l1069 34C6  
                                     l1093 2220                                       l1270 13FC  
                                     l1166 4B38                                       l1182 1ABE  
                                     l1246 0B60                                       l1342 16CE  
                                     l1159 4B16                                       l1255 3B5C  
                                     l1271 13E8                                       l1423 4952  
                                     l1095 2214                                       l1087 216A  
                                     l1183 1AE6                                       l1175 19F0  
                                     l1247 0A12                                       l1351 1790  
                                     l1343 1678                                       l1335 15FC  
                                     l1256 3AA4                                       l1280 145A  
                                     l1168 4B52                                       l1424 4966  
                                     l1192 1C20                                       l1328 48CE  
                                     l1352 179C                                       l1273 15C6  
                                     l1169 4B72                                       l1193 1C3C  
                                     l1177 1C14                                       l1329 4890  
                                     l1353 17A8                                       l1098 2266  
                                     l1186 1BB4                                       l1178 1AB4  
                                     l1370 192E                                       l1362 1838  
                                     l1338 164A                                       l1275 14CC  
                                     l1267 11DE                                       l1099 2294  
                                     l1187 1B84                                       l1179 1A3C  
                                     l1363 1850                                       l1355 17CE  
                                     l1347 16FA                                       l1284 1560  
                                     l1276 1406                                       l1196 1C58  
                                     l1372 193C                                       l1364 1884  
                                     l1348 1734                                       l1277 1446  
                                     l1269 139A                                       l1349 1780  
                                     l1358 17F4                                       l1471 3D5E  
                                     l1800 4606                                       l1368 1900  
                                     l1480 3DFC                                       l1472 3D76  
                                     l1801 45FA                                       l1369 195A  
                                     l1810 47D4                                       l1474 3DA4  
                                     l1811 47C8                                       l1475 3D98  
                                     l1804 463A                                       l1580 3C6A  
                                     l1805 4648                                       l1814 47FC  
                                     l1478 3DD8                                       l1582 3CB2  
                                     l1815 480A                                       l1479 3DE6  
                                     l1760 4F02                                       l1585 3D02  
                                     l1586 3CC4                                       l1579 3C70  
                                     l1588 3D36                                       l1890 4DD8  
                                     l1891 4DC6                                       l1884 4BAA  
                                     l1877 41E2                                       l1885 4B88  
                                     l1878 415C                                       l1879 41DA  
                                     ?_isr 0001                                       l9062 4E88  
                                     l9056 4E78                                       l9402 4110  
                                     l9172 3192                                       l9510 4B12  
                                     l9440 2F80                                       l9436 2F5A  
                                     l9614 1EEA                                       l9526 4B88  
                                     l9720 415C                                       l9712 4DC6  
                                     l8932 2DBC                                       l9584 1E52  
                    _escreve_caractere_lcd 46D8                                       l8964 2E6A  
                                     STR_1 61FF                                       STR_2 620B  
                                     STR_3 61FF                                       STR_4 6223  
                                     STR_5 6217                                       STR_6 6223  
                                     STR_7 61F3                                       STR_8 620B  
                                     STR_9 61D8                             timer_dois@flag 0033  
                                     _BRGH 007D62                            __end_of_GPSRead 286C  
                                     _T0IF 007F92                                       _CREN 007D5C  
                             ?_escreve_SPI 0001                                       _LATB 000F8A  
                                     _PIE1 000F9D                                       _RCIF 007CF5  
                                     i2l90 360C                                       i2l92 362C  
                                     i2l93 3640                                       i2l85 35B6  
                                     i2l86 3638                                       i2l87 35D0  
                                     i2l89 35FE                                       _TMR2 000FCC  
                                     _SPEN 007D5F                                       _TRMT 007D61  
                                     _TXEN 007D65                                       _SYNC 007D64  
                             trace_path@dj 00C0                               trace_path@fn 00C2  
                             trace_path@ds 00D4                               trace_path@fs 00D0  
                            ?_make_dirfile 0068                                       _Term 0036  
                                     _dado 0032                                       _flag 00F8  
                                     _atoi 3C68                                       _main 4DEC  
                                     _fsid 00FB                                       fsr0h 000FEA  
                                     fsr1h 000FE2                                       indf0 000FEF  
                                     fsr2h 000FDA                                       fsr0l 000FE9  
                                     indf1 000FE7                                       indf2 000FDF  
                                     fsr1l 000FE1                                       fsr2l 000FD9  
                                     btemp 003F                                       _sync 48E6  
                            disk_ioctl@cmd 0060                              disk_read@buff 007F  
                            disk_ioctl@res 0064                              disk_read@pdrv 0087  
                                     prodh 000FF4                                       prodl 000FF3  
                                     start 000E                    ?_verifica_fence_externo 0001  
                sdc_disk_initialize@buff_i 007B                               ___param_bank 000000  
                sdc_disk_initialize@count1 0077                  sdc_disk_initialize@count2 007D  
                              _string_dado 0100                                      ??_isr 000C  
                  __size_of_escrita_sdcard 00A8           __size_of_configura_baudrate_uart 0132  
                                    l11110 01B2                                      l11130 0282  
                                    l10422 0DA8                                      l11310 4018  
                                    l11232 3950                                      l10504 48C4  
                                    l11218 3920                                      l11138 02E6  
                                    l11090 00E2                                      l11074 0092  
                                    l11164 0418                                      l11156 03AC  
                                    l11262 39B6                                      l11248 3986  
                                    l10812 16BA                                      l10780 15FC  
                                    l10872 180E                                      l10972 3CFE  
                          __end_of___aldiv 3E0E                                      ?_atoi 0066  
                                    ?_main 0001                                      STR_10 6272  
                                    STR_11 626C                                      STR_20 623A  
                                    STR_12 61BB                                      STR_21 61AB  
                                    STR_13 6196                                      STR_22 6245  
                                    STR_14 61CA                                      STR_15 6259  
                                    STR_23 622F                                      STR_24 627C  
                                    STR_16 624F                                      STR_25 6278  
                                    STR_17 6263                                      STR_18 6181  
                                    STR_19 61E6                               ?_leitura_SPI 0001  
                          __end_of___lldiv 465A                                      ?_sync 0001  
                                    u11210 2AFC                                      u11140 31EA  
                                    u12120 0BA2                                      _T0CON 000FD5  
                                    u11305 28C4                                      u11090 30D2  
                                    u11410 4110                                      u12210 3352  
                                    u11235 2B62                                      u12035 08A8  
                                    u10700 483C                                      u11180 4A10  
                                    u13100 0C54                                      u12220 3376  
                                    u13020 2470                                      u13005 2438  
                                    u11190 4A3A                                      u12230 3438  
                                    u11255 2BD6                                      u11335 298E  
                                    u13120 0C7A                            __end_of___llmod 481C  
                                    u11610 4B12                                      u11450 2F18  
                                    u13050 24CA                                      u12250 344A  
                                    u14010 18E0                                      u10715 36AA  
                                    u11187 4A06                                      u13107 0C4A  
                                    u12075 098E                                      u11460 2F24  
                                    u11700 1E52                                      u13300 1034  
                                    u10805 2D6A                                      u11285 2C60  
                                    u11365 2A22                                      u11197 4A30  
                                    u12237 342E                                      u10830 2DE2  
                                    u10910 4E98                                      u13070 24F0  
                                    u13127 0C70                                      u10680 4D84  
                                    _T2CON 000FCA                                      u11570 3076  
                                    u11810 1FDA                                      u13250 0DA8  
                                    u13315 10BC                                      u12195 32DC  
                                    u11900 41B2                                      u11740 1EEA  
                                    u11660 1DD8                                      u13500 1AE2  
                                    u14060 197C                                      u12605 3BC6  
                                    u10845 2E14                                      u14301 005E  
                                    u10870 2E90                                      u12710 460A  
                                    u11670 1DE8                                      u12615 3BE0  
                                    u14071 19B4                                      u10880 2ECC  
                                    u12560 440E                                      u11760 1EF6  
                                    u14320 00DE                                      u11681 1DF2  
                                    u11850 2056                                      u13290 101E  
                                    u12810 3FCE                                      u13530 1B80  
                                    u11907 41A8                                      u11860 208E  
                                    u12820 3FF6                                      u13380 47D8  
                                    u13285 0F48                                      u12830 400E  
                                    u12670 3DA8                                      u12735 37E4  
                                    u11880 418A                                      u12840 2150  
                                    u14280 43B2                                      u12585 3B7A  
                                    u12745 3830                                      u13570 1C38  
                                    u14530 04DE                                      u12595 3B96  
                                    u14291 004C                                      u13740 1468  
                                    u13900 1776                                      u14540 04E2  
                                    u14380 01AE                                      u12765 3874  
                                    u14630 397C                                      u13830 1648  
                                    u11887 4180                                      u15407 1F06  
                                    u12847 2146                                      u12775 38BE  
                                    u13760 14E0                                      u14480 03A4  
                                    u13665 1252                                      u15417 1FB8  
                                    u13770 1526                                      u14570 0644  
                                    u14490 03A8                                      u15427 4C5A  
                                    u13860 16DC                                      u14580 0648  
                                    u14740 44DA                                      u12885 21DA  
                                    u15357 453C                                      u14750 44F2  
                                    u13775 151C                                      u15367 4222  
                                    u14728 4070                                      u14729 4084  
                                    u15377 423E                                      u15387 425A  
                                    u15397 1D72                                      i2l212 4A96  
                                    i2l220 25FE                                      i2l230 26A4  
                                    i2l231 26CC                                      i2l240 278A  
                                    i2l232 26F6                                      i2l224 2620  
                                    i2l217 2856                                      i2l241 27B4  
                                    i2l225 262A                                      i2l242 27DE  
                                    i2l234 2712                                      i2l218 25E0  
                                    i2l243 280A                                      i2l235 2716  
                                    i2l227 2680                                      i2l219 25EE  
                                    i2l244 2836                                      i2l236 2740  
                                    i2l245 283E                                      i2l229 26A0  
                                    i2l238 275C                                      i2l239 2760  
                                    i2l878 4FFE                                      _RCREG 000FAE  
                                    _RCSTA 000FAB                                      _TMR0H 000FD7  
                                    _TMR0L 000FD6                                      _SPBRG 000FAF  
                                    _TRISA 000F92                                      _TRISB 000F93  
                                    _TRISC 000F94                                      _TRISD 000F95  
                                    _TRISE 000F96                            __end_of_f_close 4E46  
                                    _TXREG 000FAD                              trace_path@dir 00C6  
                                    _TXSTA 000FAC                                      _FatFs 00FD  
                          __end_of_f_lseek 15D8                        ___lmul@multiplicand 0064  
               __size_of_config_timer_dois 000E                            __end_of_f_mount 4B76  
                          __end_of_f_write 0C1C                 __size_of_config_timer_zero 001C  
                            get_cluster@bc 00AF                              get_cluster@fs 00B1  
                            get_cluster@wc 00A9                            __end_of_command 4884  
                                    _delay 4E72                            clust2sect@clust 006C  
                          __end_of_fprintf 19B6                                      _fputc 4998  
                                    _fputs 4884                            __end_of_isdigit 4F0A  
                 __size_of_escreve_cmd_lcd 008C                                      atoi@a 006B  
                                    atoi@s 0066                             ??_make_dirfile 006C  
                           disk_ioctl@buff 0061                                      pclath 000FFA  
                           disk_read@count 0085                                      tablat 000FF5  
                           disk_ioctl@pdrv 0063                           ?_dados_gps_to_sd 0001  
                          __end_of_proceed 504E                                      plusw1 000FE3  
                                    plusw2 000FDB                                      status 000FD8  
                                    wtemp6 0040                              disk_write@res 008A  
           __end_of_verifica_fence_externo 0662                            __initialization 4552  
                      disk_initialize@pdrv 0080                        disk_initialize@stat 0081  
                             __end_of_atoi 3D40                               __end_of_main 4E1A  
                             clust2sect@fs 0075                               __end_of_sync 4940  
                       _inicializa_tarefas 4A42                            escalonador@cont 01F1  
                         __end_of_Latitude 5036                        reserve_direntry@dir 00C6  
                        create_chain@clust 00B6                                auto_mount@p 00B1  
                        create_chain@cstat 00BE   verifica_fence_externo@point_buff_gps_lat 008A  
                            sdc_reset@buff 0072                                     ??_atoi 0068  
                                   ??_main 0022                                     ??_sync 0022  
                            __activetblptr 000002                        ?_inicializa_tarefas 0001  
                     __end_of_desliga_uart 501E                                  ??_GPSRead 000A  
                           _next_dir_entry 3248                       __size_of_desliga_SPI 000C  
                        get_fattime@f_time 008A                           ??_sdc_disk_write 0073  
                                   ?_delay 0001                     ?_escreve_caractere_lcd 0001  
                                   _ADCON1 000FC1                                     ?_fputc 00E5  
                         ___llmod@dividend 0060                                     ?_fputs 01CC  
                       auto_mount@bootsect 00A9                                     _INT0IE 007F94  
                                   _INT0IF 007F91                              ?_dummy_clocks 0001  
                                   i2l2016 4C10                                     i2l2017 4C08  
                                   _PCLATH 000FFA                                     _INTCON 000FF2  
                  __size_of_inicializa_SPI 0020                                     _TMR0IF 007F92  
                                   _TMR2IF 007CF1                         auto_mount@maxclust 00A5  
                 __end_of_recebe_dado_uart 5002                                     _SPPCFG 000F63  
                                   _SPPCON 000F65                                     _SSPBUF 000FC9  
                 __size_of_sdc_disk_status 0018                           __end_of_check_fs 4444  
                     ??_inicializa_tarefas 0021                          ?_disparo_gravacao 0001  
                           trace_path@dptr 00D5                             trace_path@path 00C4  
                   reserve_direntry@sector 00CA                   __size_of_disk_initialize 003C  
               __end_of_posicao_cursor_lcd 46D8                         ??_disparo_gravacao 0022  
                           auto_mount@path 0093                               ?_move_window 008B  
                     __end_of_create_chain 3092                               _dado_arquivo 0223  
                   __size_of_init_hardware 0016                             auto_mount@stat 00B4  
                     __size_of_get_fattime 0108                               put_cluster@p 00B2  
             ?_verifica_dados_operacionais 0001                       __size_of_get_cluster 0222  
                                   ___lmul 4940                                  ??___aldiv 0021  
                     __size_of_disk_status 0048                                     ___wmul 4E9C  
                       __size_of_Longitude 000C                                  ??___lldiv 0021  
                                   _f_open 19B6                                  ??___llmod 0021  
                                   _f_sync 3A36                                     _buffer 0162  
                                   _estado 0034                                     _memcmp 415A  
                                   _memcpy 4B76                           __end_of_init_lcd 429C  
                                   _memset 4DBC                                  ??_f_close 0022  
                                   clear_0 458C                                     clear_1 459E  
                                   clear_2 45AA                                     clear_3 45B6  
                                   clear_4 45C2                                  ??_f_lseek 00CA  
                                ??_f_mount 0021                   configura_baudrate_uart@x 007A  
                                ??_f_write 00CC                                     _strcmp 4C06  
                      _sdc_disk_initialize 1D4C                                  ??_command 0021  
                              GPSRead@buff 000A                                     _strlen 4CD4  
                         put_cluster@clust 00A0                                     fputc@c 00E9  
                       get_cluster@fatsect 00AB                           __end_of_monta_sd 3A36  
                 __end_of_reserve_direntry 25D8                           __end_of_validate 4B2C  
                   __end_of_next_dir_entry 33D0                                  ??_fprintf 01DF  
                             __pdataCOMRAM 003E                                     fputs@n 01D1  
                                ??_isdigit 0021                       __size_of_escalonador 00A4  
                         __end_of_response 5042                               __mediumconst 615E  
                    write_timer_zero@timer 0062                            disk_read@sector 0081  
                          disk_read@result 0088                                     tblptrh 000FF7  
                                   tblptrl 000FF6                                     tblptru 000FF8  
                                ??_proceed 0021                           _write_timer_zero 4FCC  
                                   sync@fs 00A0                  escreve_caractere_lcd@data 0021  
                           ??_dummy_clocks 0060                            sdc_disk_write@i 0077  
                          sdc_disk_write@j 007C                                 __accesstop 0060  
                  __end_of__initialization 45C8                       ?_sdc_disk_initialize 0001  
                           disk_write@buff 007F                             disk_write@pdrv 0087  
                     __size_of_escreve_SPI 0014                              ___rparam_used 000001  
                        ??_escreve_cmd_lcd 0021                             __pcstackCOMRAM 0001  
              __end_of_endereco_cursor_lcd 47B4                               __pidataBANK1 4D88  
                        ?_mensagem_inicial 0001                    _configura_baudrate_uart 37D2  
                            __end_of_delay 4E9C                             _escrita_sdcard 3EC4  
                            __end_of_fputc 49EE                              __end_of_fputs 48E6  
            ??_verifica_dados_operacionais 0021                         ??_mensagem_inicial 0065  
                     __end_of_make_dirfile 353E                               ?_put_cluster 00A0  
                        reserve_direntry@c 00D1                          reserve_direntry@n 00CE  
                       _tarefa_em_execucao 0039                 __end_ofi2_write_timer_zero 4FF0  
                          ?_next_dir_entry 00B3                     __size_of_sdc_disk_read 0146  
          configura_baudrate_uart@baudrate 006E                       reserve_direntry@dptr 00CF  
                     __size_of_leitura_SPI 000C                              _init_hardware 4F7A  
                             auto_mount@fs 00B9                         __size_of_disk_read 0090  
                                  ??_delay 0021                             sdc_reset@count 0070  
                                  ??_fputc 0022                                    ??_fputs 01D0  
                        __end_of_Longitude 502A               mensagem_inicial@msg_linha_um 0067  
                               __pbssBANK0 00EC                                 __pbssBANK1 0100  
                               __pbssBANK2 0223             __size_of_escreve_frase_ram_lcd 0054  
            __end_of_escreve_frase_ram_lcd 4A42                      ??_sdc_disk_initialize 0073  
                                ?_Latitude 0060                  escreve_inteiro_uart@F3958 01AF  
                   __end_of_escrita_sdcard 3F6C                         __size_of_sdc_reset 00A4  
                                  ?___lmul 0060                          ??_sdc_disk_status 0021  
                            make_dirfile@a 0072                              make_dirfile@b 0070  
                            make_dirfile@c 0074                              make_dirfile@n 0073  
                            make_dirfile@t 0071                                    ?___wmul 0060  
                    mensagem_inicial@F4351 6170                      mensagem_inicial@F4353 615F  
                                  ?_f_open 00D7                                    ?_f_sync 00A2  
                        ??_disk_initialize 0022                      __size_of_desliga_uart 000E  
                                  ?_memcmp 0060                                    ?_memcpy 0060  
                                  ?_memset 0060                             ___lmul@product 0068  
                                  ?_strcmp 0001                                    ?_strlen 0060  
                                  i2l11526 35C8                                    _INTCON2 000FF1  
                                  _INTCON3 000FF0                             ?_init_hardware 0001  
                                ?_check_fs 008B                                 _disk_ioctl 4E46  
                                  _GPSRead 25D8                                 _disk_write 4444  
                           remove_chain@fs 00BC       __size_of_verifica_dados_operacionais 0002  
                                  _SSPCON1 000FC6                   __size_of_inicializa_uart 0024  
                                  _SSPSTAT 000FC7                                 _clust2sect 3E0E  
                           _inicializa_SPI 4F0A                            trace_path@clust 00D2  
                               ??_Latitude 0021                              ?_remove_chain 00B6  
                    __size_of_create_chain 01C0                                  ?_init_lcd 0001  
                       __size_of_stringcpy 004E                              _sdc_disk_read 368C  
                             _desliga_uart 5010                                 _auto_mount 0C1C  
                                  __Hparam 0000                  ??_configura_baudrate_uart 0072  
                                  __Lparam 0000                                  ?_monta_sd 0066  
                                ?_validate 0066                            ?_escrita_sdcard 0001  
                        __end_of_disk_read 432C                              put_cluster@bc 00B0  
                                ?_response 0001                              put_cluster@fs 00B4  
                                  ___aldiv 3D40                                 f_close@res 00AD  
                          __size_of___lmul 0058                                    ___lldiv 45D6  
                          __size_of___wmul 0028                                    ___llmod 47B4  
                     __size_of_move_window 01B6                                 check_fs@fs 0091  
                          __size_of_f_open 0396                            __size_of_f_sync 012A  
                     __end_of_dummy_clocks 4C92                                    _f_close 4E1A  
                                  __pcinit 4552                            __size_of_memcmp 00A4  
                          __size_of_memcpy 0048                            __size_of_memset 0030  
                                  _f_lseek 114E                                 _init_ports 4F2A  
                                  __ramtop 0800                                    _f_mount 4B2C  
                                  __ptext0 4DEC                                    __ptext1 44CC  
                                  __ptext2 41FE                                    __ptext3 432C  
                                  __ptext4 4F7A                                    __ptext5 4F2A  
                                  __ptext6 5066                                    __ptext7 4FBA  
                                  __ptext8 4F46                                    __ptext9 4FCC  
                                  _f_write 0662                                    _command 481C  
                                _T0CONbits 000FD5                        auto_mount@totalsect 00AD  
                          __size_of_strcmp 0048                            __size_of_strlen 003E  
                  i2write_timer_zero@timer 0003                endereco_cursor_lcd@endereco 0021  
                                  _fprintf 15D8                                    _rawDate 0180  
                                  _isdigit 4EE8                               __size_of_isr 3684  
                  ??_escreve_caractere_lcd 0021                                 ??_check_fs 008F  
                                  _rawTime 016E                           ___aldiv@dividend 0060  
                             stringcpy@chr 0009                               stringcpy@dir 0005  
                                  _time_sd 002E                               _create_chain 2ED2  
                                  _proceed 5042                    __size_of_init_interrupt 0012  
                        __end_of_sdc_reset 415A                     __end_of_inicializa_SPI 4F2A  
                               f_lseek@ofs 00C6                             __pintcode_body 353E  
                               f_lseek@res 00D6                       end_of_initialization 45C8  
                               f_open@mode 00DB                                 f_open@path 00D9  
                           ??_remove_chain 00B8                                    isr@cont 0020  
                                  memcmp@n 0064                                    memcpy@d 0067  
                                  memcpy@n 0064                                    memcpy@s 0069  
                  __size_of_init_oscilador 0008                                    fputc@bw 00EA  
                                  memset@c 0062                                    memset@n 0064  
                                  memset@p 0066                       sdc_disk_initialize@i 0074  
                            __Lmediumconst 615E                                 ??_init_lcd 0062  
                                  int_func 353E                          ?_recebe_dado_uart 0001  
                          disk_status@pdrv 0064                            disk_status@stat 0065  
                           ?_sdc_disk_read 006C                                  i2u1503_40 3610  
                                i2u1496_40 35A6                                  i2u1497_48 35A8  
                   write_timer_zero@timer0 0060                            ___lldiv@divisor 0064  
                            _rawSatellites 003B                                 f_mount@drv 0021  
                       ??_recebe_dado_uart 0001                           sdc_disk_read@ptr 0077  
                          ___lldiv@counter 006C                                 ??_monta_sd 0021  
              verifica_fence_externo@F4365 01A4                verifica_fence_externo@F4367 0199  
                               ??_validate 006A                      __size_of_make_dirfile 016E  
                 __size_of_dados_gps_to_sd 0042                                 ??_response 0021  
                                _RCSTAbits 000FAB                   __end_of_write_timer_zero 4FDE  
                         ___aldiv@quotient 006A                                    postdec1 000FE5  
                                  postdec2 000FDD                                    postinc0 000FEE  
                                  postinc1 000FE6                                    postinc2 000FDE  
                               _wait_ready 4D4E                                    strcmp@r 0006  
                                  strlen@s 0060                                  _PORTBbits 000F81  
                __size_of_disparo_gravacao 0016                                  _PORTDbits 000F83  
                          ??_init_hardware 0021                verifica_fence_externo@count 0089  
                               _trace_path 2092                         _posicao_cursor_lcd 465A  
                        __end_of_stringcpy 4AE0                verifica_fence_externo@point 008F  
                            ??_desliga_SPI 0021                       __size_of_put_cluster 027A  
          __end_of_configura_baudrate_uart 3904                                ?_disk_ioctl 0060  
                        ?_reserve_direntry 00C4                                 f_write@btw 00C8  
                               f_write@res 00D8                                  _TRISBbits 000F93  
                              ?_disk_write 007F                                  _TRISCbits 000F94  
                                _TRISDbits 000F95                           next_dir_entry@dj 00B3  
                          _escreve_cmd_lcd 432C                         ??_reserve_direntry 00C8  
                      ?_posicao_cursor_lcd 0062                            ?_inicializa_SPI 0001  
                          disk_write@count 0085                                ?_clust2sect 006C  
                         _put_cluster$1897 00A8                           _put_cluster$1898 00AA  
                               command@CMD 006A                                 command@CRC 0069  
                               command@arg 0065                               _make_dirfile 33D0  
                            ??_get_fattime 0064                          ??_inicializa_uart 0021  
              __size_of_inicializa_tarefas 0050                              ??_get_cluster 00A2  
                            ??_disk_status 0021                                ?_auto_mount 0093  
                        _make_dirfile$2007 006E                            command@argument 006B  
                     ??_posicao_cursor_lcd 0022                             __end_of___lmul 4998  
                         ??_next_dir_entry 00B5                             __end_of___wmul 4EC4  
                           __end_of_f_open 1D4C                              __pidataCOMRAM 5070  
                            ??_escalonador 01EF                                ?_init_ports 0001  
                           __end_of_f_sync 3B60                             __end_of_memcmp 41FE  
                           __end_of_memcpy 4BBE                             __end_of_memset 4DEC  
                           __end_of_strcmp 4C4E                             __end_of_strlen 4D12  
                      start_initialization 4552                                __end_of_isr 368C  
                __size_of_mensagem_inicial 0086                         reserve_direntry@dj 00C4  
                       reserve_direntry@fs 00D4                        __end_of_desliga_SPI 5066  
                            ??_escreve_SPI 0021                   ??_verifica_fence_externo 006D  
                          _sdc_disk_status 4F62                            ??_sdc_disk_read 0073  
                        auto_mount@fatsize 00B5                         i2_write_timer_zero 4FDE  
                          ___llmod@divisor 0064                                  _Longitude 501E  
                          _disk_initialize 4D12                            ___llmod@counter 0021  
                        __size_of_Latitude 000C                      reserve_direntry@clust 00D2  
                  __size_of_sdc_disk_write 01CA                           _data_uart_recebe 003A  
                        wait_ready@timeout 0060                      __size_of_dummy_clocks 0044  
                            auto_mount@fmt 00B3                        __size_of_disk_ioctl 002C  
                      ?i2_write_timer_zero 0001                        __size_of_disk_write 0088  
                                 ??___lmul 0021                                 fprintf@fil 01D3  
                               fprintf@arp 021C                                   ??___wmul 0021  
                               fprintf@res 0210                                 fprintf@val 0218  
                               fprintf@str 01D5                        __end_of_get_fattime 3C68  
                                 ??_f_open 00DC                                   ??_f_sync 0022  
                              ?_wait_ready 0001                                __pdataBANK1 0199  
                      __end_of_get_cluster 2D08                                   ??_memcmp 0066  
                      __end_of_disk_status 4C06                                   ??_memcpy 0021  
                      __size_of_clust2sect 00B6                                   ??_memset 0021  
                   sdc_disk_read@start_add 0078                       __end_of_remove_chain 4012  
                        ??_dados_gps_to_sd 0021                    sdc_disk_initialize@buff 007F  
                            ??_leitura_SPI 0021                    __end_of_escreve_cmd_lcd 43B8  
                                 ??_strcmp 0005                                   ??_strlen 0062  
                  sdc_disk_initialize@stat 0076                                ?_trace_path 00C0  
             __size_of_endereco_cursor_lcd 006A                               _fprintf$2495 0212  
                              __pbssBIGRAM 0237                              monta_sd@index 0068  
                              __pbssCOMRAM 0022                            _trace_path$2054 00CC  
                          _trace_path$2056 00CE                                   ?_GPSRead 0001  
                            __pcstackBANK0 0060                              __pcstackBANK1 01CC  
                            __pcstackBANK2 0200                             _init_interrupt 4FBA  
                      __size_of_auto_mount 0532                       ??i2_write_timer_zero 0003  
                      __end_of_escalonador 40B6                __end_of_sdc_disk_initialize 2092  
                        __size_of_check_fs 008C                               _isdigit$2833 0060  
                             check_fs@sect 008B                                _char_number 0038  
                               sdc_reset@i 006C                               _dummy_clocks 4C4E  
                           _init_oscilador 5066                                   GPSRead@c 000B  
                         ??_escrita_sdcard 0022                        __size_of_init_ports 001C  
                               ?_Longitude 0060                      _escreve_frase_ram_lcd 49EE  
                                _data_buff 0028                                  _data_hoje 0035  
                      __end_of_escreve_SPI 4FBA                          __size_of_init_lcd 009E  
                        delay@contador_int 0061                          delay@contador_ext 0060  
      __end_of_verifica_dados_operacionais 5070                _verifica_dados_operacionais 506E  
                                __pintcode 0008                              __pmediumconst 615E  
      verifica_fence_externo@temp_buff_lat 0073                                   ?___aldiv 0060  
                        __size_of_monta_sd 0132                                   ?___lldiv 0060  
                                 ?___llmod 0060                          __size_of_validate 004C  
                        __size_of_response 000C                                   ?_f_close 00AB  
                                _disk_read 429C                         _sinaliza_int_timer 00FF  
                                 ?_f_lseek 00C4                                   ?_f_mount 0060  
                         _disparo_gravacao 4F90                                   ?_f_write 00C4  
                                 ?_command 0065                     __end_of_init_interrupt 4FCC  
                                 ?_fprintf 01D3                                   ?_isdigit 0001  
                              _desliga_SPI 505A                        sdc_disk_read@p_buff 006C  
                      sdc_disk_read@length 007C                        sdc_disk_read@sector 006E  
                  __end_of_sdc_disk_status 4F7A             __size_of_escreve_caractere_lcd 0072  
            __end_of_escreve_caractere_lcd 474A                                   ?_proceed 0001  
                                f_close@fp 00AB                        __end_of_leitura_SPI 505A  
                           __size_of_delay 002A                    __end_of_disk_initialize 4D4E  
                   __end_of_init_oscilador 506E                             __size_of_fputc 0056  
                           __size_of_fputs 0062                        make_dirfile@dirname 006A  
                               validate@id 0068                                 validate@fs 0066  
                                _p_tarefas 00F2                                  _rawCourse 0187  
          __size_of_verifica_fence_externo 0650                           make_dirfile@path 0068  
                                 _GPGGA_ok 002A                                  _sdc_reset 40B6  
                      __size_of_wait_ready 003A                            ___aldiv@divisor 0064  
                          ___aldiv@counter 0068                             ___wmul@product 0064  
                                 _LATBbits 000F8A                                  f_lseek@fp 00C4  
                                 _LATCbits 000F8B                                   _GPRMC_ok 002C  
                                f_open@dir 01DF                                  f_open@res 01DE  
                                 _PIE1bits 000F9D                                _get_fattime 3B60  
                             _rawLongitude 0148                        __size_of_trace_path 02AC  
                              _get_cluster 2AE6                                _disk_status 4BBE  
                            ??_move_window 008F                                  f_mount@fs 0060  
                                 _PIR1bits 000F9E                                   i2u939_40 4C42  
                            move_window@fs 009E                          ?_write_timer_zero 0060  
                          remove_chain@nxt 00BA                                  f_sync@dir 00A9  
                                f_sync@res 00A8                                  f_sync@tim 00A4  
                 posicao_cursor_lcd@coluna 0062                                 ?_disk_read 007F  
                       ??_write_timer_zero 0021                                  f_write@cc 00DF  
               posicao_cursor_lcd@endereco 0064                                  f_write@bw 00CA  
                                f_write@fp 00C4                  __size_of_recebe_dado_uart 0012  
                              _escalonador 4012                          ___wmul@multiplier 0060  
                         ?_escreve_cmd_lcd 0001                escreve_frase_ram_lcd@buffer 0062  
                         ??_inicializa_SPI 0021                            ?_init_interrupt 0001  
                             ??_disk_ioctl 0021                               ??_disk_write 0086  
                             f_lseek@clust 00DF                            _inicializa_uart 4EC4  
                             f_lseek@csize 00DB                               f_lseek@ifptr 00D7  
                                _stringcpy 4A92                           __size_of_GPSRead 0294  
                         _mensagem_inicial 44CC                            ?_init_oscilador 0001  
                             ??_clust2sect 0070                          ___lmul@multiplier 0060  
                                copy_data0 4566                                _escreve_SPI 4FA6  
                               ?_sdc_reset 0001                        sdc_reset@count_nosd 006E  
                                 _Latitude 502A                   ?_configura_baudrate_uart 006E  
                   ?_escreve_frase_ram_lcd 0062                                ??_Longitude 0021  
                         auto_mount@chk_wp 0095                          move_window@sector 008B  
                           _sdc_disk_write 2D08                  __size_of_reserve_direntry 029A  
                 escreve_inteiro_lcd@F3966 01B6                               ??_auto_mount 0096  
                                 __Hrparam 0000                                  memcpy@tmp 0066  
                                 __Lrparam 0000                                  fprintf@cc 021E  
                       __end_of_disk_ioctl 4E72                      __size_of_remove_chain 00A6  
                           put_cluster@val 00A2                           get_cluster@clust 00A0  
                       __end_of_disk_write 44CC                    verifica_fence_externo@i 0090  
                  verifica_fence_externo@j 008E                               _SentenceType 0037  
                         __size_of___aldiv 00CE                     sdc_disk_initialize@ocr 007C  
                             monta_sd@dado 0066                     _verifica_fence_externo 0012  
                         __size_of___lldiv 0084                           __size_of___llmod 0068  
                            ??_put_cluster 00A4                               monta_sd@size 0069  
                             ??_init_ports 0021                        __end_of_move_window 3248  
                       __end_of_clust2sect 3EC4                           __size_of_f_close 002C  
                         __size_of_f_lseek 048A                           __size_of_f_mount 004A  
                              _leitura_SPI 504E                           __size_of_f_write 05BA  
                        disk_status@result 0062                           __size_of_command 0068  
                    __end_of_init_hardware 4F90                                   _check_fs 43B8  
                         __size_of_fprintf 03DE                           __size_of_isdigit 0022  
                         ?_sdc_disk_status 0001                                 ?_stringcpy 0001  
                       __end_of_auto_mount 114E                                   __ptext10 5002  
                                 __ptext11 4A42                                   __ptext20 3EC4  
                                 __ptext12 4012                                   __ptext21 4EC4  
                                 __ptext13 4F90                                   __ptext30 19B6  
                                 __ptext22 37D2                                   __ptext14 506E  
                                 __ptext31 2092                                   __ptext23 3D40  
                                 __ptext15 0012                                   __ptext40 4D12  
                                 __ptext32 33D0                                   __ptext24 4F0A  
                                 __ptext16 3C68                                   __ptext41 1D4C  
                                 __ptext33 233E                                   __ptext25 15D8  
                                 __ptext17 4EE8                                   __ptext50 4940  
                                 __ptext42 40B6                                   __ptext34 3248  
                                 __ptext26 4884                                   __ptext18 501E  
                                 __ptext51 4B2C                                   __ptext43 465A  
                                 __ptext35 3E0E                                   __ptext27 4998  
                                 __ptext19 502A                                   __ptext60 4AE0  
                                 __ptext52 114E                                   __ptext44 474A  
                                 __ptext36 3F6C                                   __ptext28 0662  
                                 __ptext61 4BBE                                   __ptext53 2ED2  
                                 __ptext45 49EE                                   __ptext37 4B76  
                                 __ptext29 47B4                                   __ptext70 5042  
                                 __ptext62 4F62                                   __ptext54 286C  
                                 __ptext46 46D8                                   __ptext38 0C1C  
                                 __ptext71 481C                                   __ptext63 48E6  
                                 __ptext55 2AE6                                   __ptext47 4E72  
                                 __ptext39 4DBC                                   __ptext80 4C92  
                                 __ptext72 4D4E                                   __ptext64 3092  
                                 __ptext56 4E9C                                   __ptext48 43B8  
                                 __ptext81 3904                                   __ptext73 4FA6  
                                 __ptext65 4444                                   __ptext57 45D6  
                                 __ptext49 415A                                   __ptext82 4CD4  
                                 __ptext74 4C4E                                   __ptext66 2D08  
                                 __ptext58 4E1A                                   __ptext75 504E  
                                 __ptext67 429C                                   __ptext59 3A36  
                                 __ptext84 4FDE                                   __ptext76 4E46  
                                 __ptext68 368C                                   __ptext85 4FF0  
                                 __ptext77 3B60                                   __ptext69 5036  
                                 __ptext86 25D8                                   __ptext78 5010  
                                 __ptext87 4A92                                   __ptext79 505A  
                                 __ptext88 4C06                                   __ptext89 0000  
                         __size_of_proceed 000C                                   _filename 01BD  
                              _rawAltitude 0179                           ?_disk_initialize 0001  
                           _timeout_tarefa 0030                         sdc_disk_read@count 0072  
               __end_of_inicializa_tarefas 4A92                   i2write_timer_zero@timer0 0001  
                   __end_of_sdc_disk_write 2ED2                                  monta_sd@i 006A  
                              _rawLatitude 0155                                   _init_lcd 41FE  
                            __size_of_atoi 00D8                              __size_of_main 002E  
                             _remove_chain 3F6C                              __size_of_sync 005A  
                      _endereco_cursor_lcd 474A                         __end_of_init_ports 4F46  
                                 _rawSpeed 018D                              dummy_clocks@i 0063  
                                 f_open@dj 01E1                              dummy_clocks@n 0062  
                                 f_open@fn 01CC                                   f_open@fp 00D7  
                                 f_open@dw 01DA                                   f_open@rs 01D8  
                          _dados_gps_to_sd 4C92                                   _monta_sd 3904  
                                 _validate 4AE0                                   _sentence 0193  
                             move_window@n 0099                              stringcpy@str1 0001  
                            stringcpy@str2 0003                                   _response 5036  
                                 f_sync@fp 00A2                __size_of_posicao_cursor_lcd 007E  
                                 int$flags 003F                    posicao_cursor_lcd@linha 0063  
                                 atoi@sign 006A                               ??_wait_ready 0021  
                              ??_disk_read 0086                    __end_of_inicializa_uart 4EE8  
                             ??_trace_path 00C8                       ?_endereco_cursor_lcd 0001  
                       put_cluster@fatsect 00AC                                 _INTCONbits 000FF2  
verifica_fence_externo@point_buff_gps_long 008C                                   memcmp@s1 0060  
                                 memcmp@s2 0062                           move_window@wsect 009A  
                                 memcpy@d1 0060                                   memcpy@s1 0062  
                      __end_of_put_cluster 2AE6                                   fprintf@c 0222  
                                 fprintf@f 0216                                   fprintf@i 0220  
                                 fprintf@r 0217                                   fprintf@s 0200  
                                 fprintf@w 0214                                   fputc@chr 00E5  
                                 fputc@fil 00E7                                   isdigit@c 0061  
                                 memset@p1 0060                          _config_timer_dois 5002  
                             _tempo_backup 00EC                                   fputs@fil 01CE  
                                 fputs@str 01CC                          _config_timer_zero 4F46  
                             _poligono_ext 0457                              wait_ready@res 0064  
                                 intlevel2 0000                         ?_config_timer_dois 0001  
                 mensagem_inicial@msg_dois 0078                                ??_sdc_reset 0022  
                       ?_config_timer_zero 0001                               _tempo_tarefa 0022  
                          ?_sdc_disk_write 006C                         __end_of_wait_ready 4D88  
                 __end_of_disparo_gravacao 4FA6                           ___lldiv@dividend 0060  
                        sdc_disk_read@buff 007E                      __end_of_sdc_disk_read 37D2  
                      sdc_disk_status@pdrv 0061                        sdc_disk_status@stat 0060  
                            ?_desliga_uart 0001                        ??_config_timer_dois 0021  
                               _OSCCONbits 000FD3                         __end_of_trace_path 233E  
                      ??_config_timer_zero 0021                                _move_window 3092  
     verifica_fence_externo@temp_buff_long 007E                       sdc_disk_write@count1 0079  
                     sdc_disk_write@p_buff 006C                           _recebe_dado_uart 4FF0  
                     sdc_disk_write@sector 006E                      ??_endereco_cursor_lcd 0021  
                             response@buff 0021                                   strcmp@s1 0001  
                                 strcmp@s2 0003                               ?_desliga_SPI 0001  
                         ___lldiv@quotient 0068                                   strlen@cp 0064  
                        remove_chain@clust 00B6                  __end_of_config_timer_dois 5010  
                             ___aldiv@sign 0069                              ?_create_chain 00B6  
                __end_of_config_timer_zero 4F62                                ??_stringcpy 0007  
              __size_ofi2_write_timer_zero 0012                                _SSPCON1bits 000FC6  
                  __size_of_next_dir_entry 0188                     escreve_cmd_lcd@comando 0021  
                       escreve_SPI@TempVar 0060                        sdc_disk_write@count 0072  
            sdc_disk_initialize@crc_number 0079                    __end_of_dados_gps_to_sd 4CD4  
                       sdc_disk_write@buff 007E               __size_of_sdc_disk_initialize 0346  
                             f_write@clust 00E1                             ??_desliga_uart 0021  
                       leitura_sdcard@size 003E                               f_write@wbuff 00D9  
                             ?_get_fattime 0060                           _reserve_direntry 233E  
                              f_write@buff 00C6                          sdc_disk_write@res 007B  
                             ?_get_cluster 00A0                                f_write@sect 00DB  
                              f_write@wcnt 00E3                               ?_disk_status 0001  
            __end_ofmensagem_inicial@F4351 6181              __end_ofmensagem_inicial@F4353 6170  
                          escreve_SPI@dado 0061  
