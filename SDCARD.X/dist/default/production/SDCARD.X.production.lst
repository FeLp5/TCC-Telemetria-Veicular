

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 23 15:23:37 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   100                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   109                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   110  0000                     
   111                           ; Version 1.45
   112                           ; Generated 16/11/2017 GMT
   113                           ; 
   114                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18F4550 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     
   146                           	psect	idataBANK1
   147  0052E2                     __pidataBANK1:
   148                           	opt stack 0
   149                           
   150                           ;initializer for escreve_inteiro_uart@F3958
   151  0052E2  30                 	db	48
   152  0052E3  30                 	db	48
   153  0052E4  30                 	db	48
   154  0052E5  30                 	db	48
   155  0052E6  30                 	db	48
   156  0052E7  30                 	db	48
   157  0052E8  00                 	db	0
   158                           
   159                           ;initializer for escreve_inteiro_lcd@F3966
   160  0052E9  30                 	db	48
   161  0052EA  30                 	db	48
   162  0052EB  30                 	db	48
   163  0052EC  30                 	db	48
   164  0052ED  30                 	db	48
   165  0052EE  30                 	db	48
   166  0052EF  00                 	db	0
   167                           
   168                           	psect	smallconst
   169  000800                     __psmallconst:
   170                           	opt stack 0
   171  000800  00                 	db	0
   172  000801                     mensagem_inicial@F4121:
   173                           	opt stack 0
   174  000801  20                 	db	32
   175  000802  31                 	db	49
   176  000803  38                 	db	56
   177  000804  2F                 	db	47
   178  000805  30                 	db	48
   179  000806  31                 	db	49
   180  000807  2F                 	db	47
   181  000808  32                 	db	50
   182  000809  30                 	db	48
   183  00080A  32                 	db	50
   184  00080B  32                 	db	50
   185  00080C  20                 	db	32
   186  00080D  20                 	db	32
   187  00080E  20                 	db	32
   188  00080F  00                 	db	0
   189  000810  00                 	db	0
   190  000811  00                 	db	0
   191  000812                     __end_ofmensagem_inicial@F4121:
   192                           	opt stack 0
   193  000812                     mensagem_inicial@F4119:
   194                           	opt stack 0
   195  000812  54                 	db	84
   196  000813  43                 	db	67
   197  000814  43                 	db	67
   198  000815  2D                 	db	45
   199  000816  2D                 	db	45
   200  000817  54                 	db	84
   201  000818  45                 	db	69
   202  000819  4C                 	db	76
   203  00081A  45                 	db	69
   204  00081B  4D                 	db	77
   205  00081C  54                 	db	84
   206  00081D  52                 	db	82
   207  00081E  49                 	db	73
   208  00081F  41                 	db	65
   209  000820  00                 	db	0
   210  000821  00                 	db	0
   211  000822  00                 	db	0
   212  000823                     __end_ofmensagem_inicial@F4119:
   213                           	opt stack 0
   214  0000                     _RCSTA	set	4011
   215  0000                     _TXSTA	set	4012
   216  0000                     _RCREG	set	4014
   217  0000                     _RCSTAbits	set	4011
   218  0000                     _TXREG	set	4013
   219  0000                     _SPBRG	set	4015
   220  0000                     _PR2	set	4043
   221  0000                     _TMR2	set	4044
   222  0000                     _T2CON	set	4042
   223  0000                     _OSCCONbits	set	4051
   224  0000                     _TRISE	set	3990
   225  0000                     _TRISC	set	3988
   226  0000                     _TRISA	set	3986
   227  0000                     _TRISD	set	3989
   228  0000                     _LATB	set	3978
   229  0000                     _TRISB	set	3987
   230  0000                     _ADCON1	set	4033
   231  0000                     _TMR0L	set	4054
   232  0000                     _TMR0H	set	4055
   233  0000                     _PIE1	set	3997
   234  0000                     _INTCON3	set	4080
   235  0000                     _INTCON2	set	4081
   236  0000                     _INTCON	set	4082
   237  0000                     _SPPCFG	set	3939
   238  0000                     _SPPCON	set	3941
   239  0000                     _T0CON	set	4053
   240  0000                     _PORTDbits	set	3971
   241  0000                     _TRISDbits	set	3989
   242  0000                     _LATCbits	set	3979
   243  0000                     _SSPBUF	set	4041
   244  0000                     _SSPCON1bits	set	4038
   245  0000                     _SSPSTATbits	set	4039
   246  0000                     _SSPCON1	set	4038
   247  0000                     _SSPSTAT	set	4039
   248  0000                     _TRISCbits	set	3988
   249  0000                     _TRISBbits	set	3987
   250  0000                     _LATBbits	set	3978
   251  0000                     _T0CONbits	set	4053
   252  0000                     _PCL	set	4089
   253  0000                     _PCLATH	set	4090
   254  0000                     _INTCONbits	set	4082
   255  0000                     _PORTBbits	set	3969
   256  0000                     _PIR1bits	set	3998
   257  0000                     _PIE1bits	set	3997
   258  0000                     _RCIF	set	31989
   259  0000                     _TRMT	set	32097
   260  0000                     _TXEN	set	32101
   261  0000                     _CREN	set	32092
   262  0000                     _SPEN	set	32095
   263  0000                     _SYNC	set	32100
   264  0000                     _BRGH	set	32098
   265  0000                     _TMR2IF	set	31985
   266  0000                     _INT0IE	set	32660
   267  0000                     _INT0IF	set	32657
   268  0000                     _T0IF	set	32658
   269  0000                     _TMR0IF	set	32658
   270  000823                     STR_9:
   271  000823  0A                 	db	10
   272  000824  25                 	db	37
   273  000825  73                 	db	115	;'s'
   274  000826  20                 	db	32
   275  000827  3B                 	db	59	;';'
   276  000828  20                 	db	32
   277  000829  25                 	db	37
   278  00082A  73                 	db	115	;'s'
   279  00082B  20                 	db	32
   280  00082C  3B                 	db	59	;';'
   281  00082D  20                 	db	32
   282  00082E  25                 	db	37
   283  00082F  73                 	db	115	;'s'
   284  000830  20                 	db	32
   285  000831  3B                 	db	59	;';'
   286  000832  20                 	db	32
   287  000833  25                 	db	37
   288  000834  73                 	db	115	;'s'
   289  000835  20                 	db	32
   290  000836  3B                 	db	59	;';'
   291  000837  00                 	db	0
   292  000838  6F                 	db	111	;'o'
   293  000839  20                 	db	32
   294  00083A  53                 	db	83	;'S'
   295  00083B  69                 	db	105	;'i'
   296  00083C  73                 	db	115	;'s'
   297  00083D  74                 	db	116	;'t'
   298  00083E  65                 	db	101	;'e'
   299  00083F  6D                 	db	109	;'m'
   300  000840  61                 	db	97	;'a'
   301  000841  20                 	db	32
   302  000842  64                 	db	100	;'d'
   303  000843  65                 	db	101	;'e'
   304  000844  20                 	db	32
   305  000845  61                 	db	97	;'a'
   306  000846  72                 	db	114	;'r'
   307  000847  71                 	db	113	;'q'
   308  000848  75                 	db	117	;'u'
   309  000849  69                 	db	105	;'i'
   310  00084A  76                 	db	118	;'v'
   311  00084B  6F                 	db	111	;'o'
   312  00084C  00                 	db	0
   313  00084D                     STR_12:
   314  00084D  49                 	db	73	;'I'
   315  00084E  6E                 	db	110	;'n'
   316  00084F  73                 	db	115	;'s'
   317  000850  69                 	db	105	;'i'
   318  000851  72                 	db	114	;'r'
   319  000852  61                 	db	97	;'a'
   320  000853  20                 	db	32
   321  000854  6F                 	db	111	;'o'
   322  000855  20                 	db	32
   323  000856  43                 	db	67	;'C'
   324  000857  61                 	db	97	;'a'
   325  000858  72                 	db	114	;'r'
   326  000859  74                 	db	116	;'t'
   327  00085A  61                 	db	97	;'a'
   328  00085B  6F                 	db	111	;'o'
   329  00085C  00                 	db	0
   330  00085D  45                 	db	69	;'E'
   331  00085E  72                 	db	114	;'r'
   332  00085F  72                 	db	114	;'r'
   333  000860  6F                 	db	111	;'o'
   334  000861  20                 	db	32
   335  000862  61                 	db	97	;'a'
   336  000863  6F                 	db	111	;'o'
   337  000864  20                 	db	32
   338  000865  6D                 	db	109	;'m'
   339  000866  6F                 	db	111	;'o'
   340  000867  6E                 	db	110	;'n'
   341  000868  74                 	db	116	;'t'
   342  000869  61                 	db	97	;'a'
   343  00086A  72                 	db	114	;'r'
   344  00086B  00                 	db	0
   345  00086C  45                 	db	69	;'E'
   346  00086D  72                 	db	114	;'r'
   347  00086E  72                 	db	114	;'r'
   348  00086F  6F                 	db	111	;'o'
   349  000870  20                 	db	32
   350  000871  61                 	db	97	;'a'
   351  000872  6F                 	db	111	;'o'
   352  000873  20                 	db	32
   353  000874  63                 	db	99	;'c'
   354  000875  72                 	db	114	;'r'
   355  000876  69                 	db	105	;'i'
   356  000877  61                 	db	97	;'a'
   357  000878  72                 	db	114	;'r'
   358  000879  00                 	db	0
   359  00087A                     STR_14:
   360  00087A  4D                 	db	77	;'M'
   361  00087B  4D                 	db	77	;'M'
   362  00087C  43                 	db	67	;'C'
   363  00087D  20                 	db	32
   364  00087E  56                 	db	86	;'V'
   365  00087F  65                 	db	101	;'e'
   366  000880  72                 	db	114	;'r'
   367  000881  2E                 	db	46
   368  000882  20                 	db	32
   369  000883  33                 	db	51	;'3'
   370  000884  00                 	db	0
   371  000885                     STR_11:
   372  000885  53                 	db	83	;'S'
   373  000886  65                 	db	101	;'e'
   374  000887  6D                 	db	109	;'m'
   375  000888  20                 	db	32
   376  000889  43                 	db	67	;'C'
   377  00088A  61                 	db	97	;'a'
   378  00088B  72                 	db	114	;'r'
   379  00088C  74                 	db	116	;'t'
   380  00088D  61                 	db	97	;'a'
   381  00088E  6F                 	db	111	;'o'
   382  00088F  00                 	db	0
   383  000890                     STR_13:
   384  000890  53                 	db	83	;'S'
   385  000891  44                 	db	68	;'D'
   386  000892  20                 	db	32
   387  000893  56                 	db	86	;'V'
   388  000894  45                 	db	69	;'E'
   389  000895  52                 	db	82	;'R'
   390  000896  2E                 	db	46
   391  000897  20                 	db	32
   392  000898  31                 	db	49	;'1'
   393  000899  00                 	db	0
   394  00089A  56                 	db	86	;'V'
   395  00089B  65                 	db	101	;'e'
   396  00089C  72                 	db	114	;'r'
   397  00089D  69                 	db	105	;'i'
   398  00089E  66                 	db	102	;'f'
   399  00089F  69                 	db	105	;'i'
   400  0008A0  71                 	db	113	;'q'
   401  0008A1  75                 	db	117	;'u'
   402  0008A2  65                 	db	101	;'e'
   403  0008A3  00                 	db	0
   404  0008A4  6F                 	db	111	;'o'
   405  0008A5  20                 	db	32
   406  0008A6  61                 	db	97	;'a'
   407  0008A7  72                 	db	114	;'r'
   408  0008A8  71                 	db	113	;'q'
   409  0008A9  75                 	db	117	;'u'
   410  0008AA  69                 	db	105	;'i'
   411  0008AB  76                 	db	118	;'v'
   412  0008AC  6F                 	db	111	;'o'
   413  0008AD  00                 	db	0
   414  0008AE  6F                 	db	111	;'o'
   415  0008AF  20                 	db	32
   416  0008B0  63                 	db	99	;'c'
   417  0008B1  61                 	db	97	;'a'
   418  0008B2  72                 	db	114	;'r'
   419  0008B3  74                 	db	116	;'t'
   420  0008B4  61                 	db	97	;'a'
   421  0008B5  6F                 	db	111	;'o'
   422  0008B6  00                 	db	0
   423  0008B7                     STR_2:
   424  0008B7  47                 	db	71	;'G'
   425  0008B8  50                 	db	80	;'P'
   426  0008B9  47                 	db	71	;'G'
   427  0008BA  47                 	db	71	;'G'
   428  0008BB  41                 	db	65	;'A'
   429  0008BC  00                 	db	0
   430  0008BD                     STR_1:
   431  0008BD  47                 	db	71	;'G'
   432  0008BE  50                 	db	80	;'P'
   433  0008BF  52                 	db	82	;'R'
   434  0008C0  4D                 	db	77	;'M'
   435  0008C1  43                 	db	67	;'C'
   436  0008C2  00                 	db	0
   437  0008C3                     STR_10:
   438  0008C3  2E                 	db	46
   439  0008C4  74                 	db	116	;'t'
   440  0008C5  78                 	db	120	;'x'
   441  0008C6  74                 	db	116	;'t'
   442  0008C7  00                 	db	0
   443  0008C8                     STR_16:
   444  0008C8  46                 	db	70	;'F'
   445  0008C9  41                 	db	65	;'A'
   446  0008CA  54                 	db	84	;'T'
   447  0008CB  00                 	db	0
   448  0008CC  0D                 	db	13
   449  0008CD  0A                 	db	10
   450  0008CE  00                 	db	0
   451  0008CF  00                 	db	0	; dummy byte at the end
   452  0000                     
   453                           ; #config settings
   454                           
   455                           	psect	cinit
   456  004A10                     __pcinit:
   457                           	opt stack 0
   458  004A10                     start_initialization:
   459                           	opt stack 0
   460  004A10                     __initialization:
   461                           	opt stack 0
   462                           
   463                           ; Initialize objects allocated to BANK1 (14 bytes)
   464                           ; load TBLPTR registers with __pidataBANK1
   465  004A10  0EE2               	movlw	low __pidataBANK1
   466  004A12  6EF6               	movwf	tblptrl,c
   467  004A14  0E52               	movlw	high __pidataBANK1
   468  004A16  6EF7               	movwf	tblptrh,c
   469  004A18  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   470  004A1A  6EF8               	movwf	tblptru,c
   471  004A1C  EE01  F0DB         	lfsr	0,__pdataBANK1
   472  004A20  EE10 F00E          	lfsr	1,14
   473  004A24                     copy_data0:
   474  004A24  0009               	tblrd		*+
   475  004A26  CFF5 FFEE          	movff	tablat,postinc0
   476  004A2A  50E5               	movf	postdec1,w,c
   477  004A2C  50E1               	movf	fsr1l,w,c
   478  004A2E  E1FA               	bnz	copy_data0
   479                           
   480                           ; Clear objects allocated to BIGRAM (544 bytes)
   481  004A30  EE01  F0E9         	lfsr	0,__pbssBIGRAM
   482  004A34  EE12 F020          	lfsr	1,544
   483  004A38                     clear_0:
   484  004A38  6AEE               	clrf	postinc0,c
   485  004A3A  50E5               	movf	postdec1,w,c
   486  004A3C  50E1               	movf	fsr1l,w,c
   487  004A3E  E1FC               	bnz	clear_0
   488  004A40  50E2               	movf	fsr1h,w,c
   489  004A42  E1FA               	bnz	clear_0
   490                           
   491                           ; Clear objects allocated to BANK1 (156 bytes)
   492  004A44  EE01  F000         	lfsr	0,__pbssBANK1
   493  004A48  0E9C               	movlw	156
   494  004A4A                     clear_1:
   495  004A4A  6AEE               	clrf	postinc0,c
   496  004A4C  06E8               	decf	wreg,f,c
   497  004A4E  E1FD               	bnz	clear_1
   498                           
   499                           ; Clear objects allocated to BANK0 (24 bytes)
   500  004A50  EE00  F0E8         	lfsr	0,__pbssBANK0
   501  004A54  0E18               	movlw	24
   502  004A56                     clear_2:
   503  004A56  6AEE               	clrf	postinc0,c
   504  004A58  06E8               	decf	wreg,f,c
   505  004A5A  E1FD               	bnz	clear_2
   506                           
   507                           ; Clear objects allocated to COMRAM (28 bytes)
   508  004A5C  EE00  F023         	lfsr	0,__pbssCOMRAM
   509  004A60  0E1C               	movlw	28
   510  004A62                     clear_3:
   511  004A62  6AEE               	clrf	postinc0,c
   512  004A64  06E8               	decf	wreg,f,c
   513  004A66  E1FD               	bnz	clear_3
   514  004A68                     end_of_initialization:
   515                           	opt stack 0
   516  004A68                     __end_of__initialization:
   517                           	opt stack 0
   518  004A68  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   519  004A6A  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   520  004A6C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   521  004A6E  6EF8               	movwf	tblptru,c
   522  004A70  0100               	movlb	0
   523  004A72  EF8C  F028         	goto	_main	;jump to C main() function
   524                           tblptru	equ	0xFF8
   525                           tblptrh	equ	0xFF7
   526                           tblptrl	equ	0xFF6
   527                           tablat	equ	0xFF5
   528                           postinc0	equ	0xFEE
   529                           wreg	equ	0xFE8
   530                           postdec1	equ	0xFE5
   531                           fsr1h	equ	0xFE2
   532                           fsr1l	equ	0xFE1
   533                           
   534                           	psect	bssCOMRAM
   535  000023                     __pbssCOMRAM:
   536                           	opt stack 0
   537  000023                     _tempo_tarefa:
   538                           	opt stack 0
   539  000023                     	ds	4
   540  000027                     _data_buff:
   541                           	opt stack 0
   542  000027                     	ds	2
   543  000029                     _time:
   544                           	opt stack 0
   545  000029                     	ds	2
   546  00002B                     _GPGGA_ok:
   547                           	opt stack 0
   548  00002B                     	ds	2
   549  00002D                     _GPRMC_ok:
   550                           	opt stack 0
   551  00002D                     	ds	2
   552  00002F                     _timeout_tarefa:
   553                           	opt stack 0
   554  00002F                     	ds	2
   555  000031                     _dado:
   556                           	opt stack 0
   557  000031                     	ds	1
   558  000032                     timer_dois@flag:
   559                           	opt stack 0
   560  000032                     	ds	1
   561  000033                     _estado:
   562                           	opt stack 0
   563  000033                     	ds	1
   564  000034                     	ds	1
   565  000035                     _data_hoje:
   566                           	opt stack 0
   567  000035                     	ds	1
   568  000036                     _Term:
   569                           	opt stack 0
   570  000036                     	ds	1
   571  000037                     _SentenceType:
   572                           	opt stack 0
   573  000037                     	ds	1
   574  000038                     _char_number:
   575                           	opt stack 0
   576  000038                     	ds	1
   577  000039                     _tarefa_em_execucao:
   578                           	opt stack 0
   579  000039                     	ds	1
   580  00003A                     _sinaliza_int_timer:
   581                           	opt stack 0
   582  00003A                     	ds	1
   583  00003B                     _data_uart_recebe:
   584                           	opt stack 0
   585  00003B                     	ds	1
   586  00003C                     _rawSatellites:
   587                           	opt stack 0
   588  00003C                     	ds	3
   589                           tblptru	equ	0xFF8
   590                           tblptrh	equ	0xFF7
   591                           tblptrl	equ	0xFF6
   592                           tablat	equ	0xFF5
   593                           postinc0	equ	0xFEE
   594                           wreg	equ	0xFE8
   595                           postdec1	equ	0xFE5
   596                           fsr1h	equ	0xFE2
   597                           fsr1l	equ	0xFE1
   598                           
   599                           	psect	bssBANK0
   600  0000E8                     __pbssBANK0:
   601                           	opt stack 0
   602  0000E8                     _tempo_backup:
   603                           	opt stack 0
   604  0000E8                     	ds	4
   605  0000EC                     _p_tarefas:
   606                           	opt stack 0
   607  0000EC                     	ds	4
   608  0000F0                     _fsid:
   609                           	opt stack 0
   610  0000F0                     	ds	2
   611  0000F2                     _FatFs:
   612                           	opt stack 0
   613  0000F2                     	ds	2
   614  0000F4                     _buffer:
   615                           	opt stack 0
   616  0000F4                     	ds	12
   617                           tblptru	equ	0xFF8
   618                           tblptrh	equ	0xFF7
   619                           tblptrl	equ	0xFF6
   620                           tablat	equ	0xFF5
   621                           postinc0	equ	0xFEE
   622                           wreg	equ	0xFE8
   623                           postdec1	equ	0xFE5
   624                           fsr1h	equ	0xFE2
   625                           fsr1l	equ	0xFE1
   626                           
   627                           	psect	bssBANK1
   628  000100                     __pbssBANK1:
   629                           	opt stack 0
   630  000100                     _string_dado:
   631                           	opt stack 0
   632  000100                     	ds	44
   633  00012C                     _fil:
   634                           	opt stack 0
   635  00012C                     	ds	28
   636  000148                     _filename:
   637                           	opt stack 0
   638  000148                     	ds	15
   639  000157                     _rawLongitude:
   640                           	opt stack 0
   641  000157                     	ds	13
   642  000164                     _rawLatitude:
   643                           	opt stack 0
   644  000164                     	ds	13
   645  000171                     _rawTime:
   646                           	opt stack 0
   647  000171                     	ds	11
   648  00017C                     _rawAltitude:
   649                           	opt stack 0
   650  00017C                     	ds	7
   651  000183                     _rawDate:
   652                           	opt stack 0
   653  000183                     	ds	7
   654  00018A                     _rawCourse:
   655                           	opt stack 0
   656  00018A                     	ds	6
   657  000190                     _rawSpeed:
   658                           	opt stack 0
   659  000190                     	ds	6
   660  000196                     _sentence:
   661                           	opt stack 0
   662  000196                     	ds	6
   663                           tblptru	equ	0xFF8
   664                           tblptrh	equ	0xFF7
   665                           tblptrl	equ	0xFF6
   666                           tablat	equ	0xFF5
   667                           postinc0	equ	0xFEE
   668                           wreg	equ	0xFE8
   669                           postdec1	equ	0xFE5
   670                           fsr1h	equ	0xFE2
   671                           fsr1l	equ	0xFE1
   672                           
   673                           	psect	dataBANK1
   674  0001DB                     __pdataBANK1:
   675                           	opt stack 0
   676  0001DB                     escreve_inteiro_uart@F3958:
   677                           	opt stack 0
   678  0001DB                     	ds	7
   679  0001E2                     escreve_inteiro_lcd@F3966:
   680                           	opt stack 0
   681  0001E2                     	ds	7
   682                           tblptru	equ	0xFF8
   683                           tblptrh	equ	0xFF7
   684                           tblptrl	equ	0xFF6
   685                           tablat	equ	0xFF5
   686                           postinc0	equ	0xFEE
   687                           wreg	equ	0xFE8
   688                           postdec1	equ	0xFE5
   689                           fsr1h	equ	0xFE2
   690                           fsr1l	equ	0xFE1
   691                           
   692                           	psect	bssBIGRAM
   693  0001E9                     __pbssBIGRAM:
   694                           	opt stack 0
   695  0001E9                     _fs:
   696                           	opt stack 0
   697  0001E9                     	ds	544
   698                           tblptru	equ	0xFF8
   699                           tblptrh	equ	0xFF7
   700                           tblptrl	equ	0xFF6
   701                           tablat	equ	0xFF5
   702                           postinc0	equ	0xFEE
   703                           wreg	equ	0xFE8
   704                           postdec1	equ	0xFE5
   705                           fsr1h	equ	0xFE2
   706                           fsr1l	equ	0xFE1
   707                           
   708                           	psect	cstackBANK1
   709  00019C                     __pcstackBANK1:
   710                           	opt stack 0
   711  00019C                     ?_fputc:
   712                           	opt stack 0
   713  00019C                     fputc@chr:
   714                           	opt stack 0
   715  00019C                     f_open@fn:
   716                           	opt stack 0
   717                           
   718                           ; 12 bytes @ 0x0
   719  00019C                     	ds	2
   720  00019E                     fputc@fil:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x2
   724  00019E                     	ds	2
   725  0001A0                     ?_fputs:
   726                           	opt stack 0
   727  0001A0                     fputs@str:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x4
   731  0001A0                     	ds	2
   732  0001A2                     fputs@fil:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x6
   736  0001A2                     	ds	2
   737  0001A4                     ??_fputs:
   738                           
   739                           ; 1 bytes @ 0x8
   740  0001A4                     	ds	1
   741  0001A5                     fputs@n:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x9
   745  0001A5                     	ds	2
   746  0001A7                     ?_fprintf:
   747                           	opt stack 0
   748  0001A7                     fprintf@fil:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0xB
   752  0001A7                     	ds	1
   753  0001A8                     f_open@rs:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0xC
   757  0001A8                     	ds	1
   758  0001A9                     fprintf@str:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0xD
   762  0001A9                     	ds	1
   763  0001AA                     f_open@dw:
   764                           	opt stack 0
   765                           
   766                           ; 4 bytes @ 0xE
   767  0001AA                     	ds	4
   768  0001AE                     f_open@res:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x12
   772  0001AE                     	ds	1
   773  0001AF                     f_open@dir:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x13
   777  0001AF                     	ds	2
   778  0001B1                     f_open@dj:
   779                           	opt stack 0
   780                           
   781                           ; 14 bytes @ 0x15
   782  0001B1                     	ds	2
   783  0001B3                     ??_fprintf:
   784                           
   785                           ; 1 bytes @ 0x17
   786  0001B3                     	ds	2
   787  0001B5                     fprintf@s:
   788                           	opt stack 0
   789                           
   790                           ; 16 bytes @ 0x19
   791  0001B5                     	ds	16
   792  0001C5                     fprintf@res:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x29
   796  0001C5                     	ds	2
   797  0001C7                     _fprintf$2426:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0x2B
   801  0001C7                     	ds	2
   802  0001C9                     fprintf@w:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x2D
   806  0001C9                     	ds	2
   807  0001CB                     fprintf@f:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x2F
   811  0001CB                     	ds	1
   812  0001CC                     fprintf@r:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0x30
   816  0001CC                     	ds	1
   817  0001CD                     fprintf@val:
   818                           	opt stack 0
   819                           
   820                           ; 4 bytes @ 0x31
   821  0001CD                     	ds	4
   822  0001D1                     fprintf@arp:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0x35
   826  0001D1                     	ds	2
   827  0001D3                     fprintf@cc:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x37
   831  0001D3                     	ds	2
   832  0001D5                     fprintf@i:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x39
   836  0001D5                     	ds	2
   837  0001D7                     fprintf@c:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x3B
   841  0001D7                     	ds	1
   842  0001D8                     
   843                           ; 1 bytes @ 0x3C
   844  0001D8                     	ds	2
   845  0001DA                     escalonador@cont:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x3E
   849  0001DA                     	ds	1
   850                           tblptru	equ	0xFF8
   851                           tblptrh	equ	0xFF7
   852                           tblptrl	equ	0xFF6
   853                           tablat	equ	0xFF5
   854                           postinc0	equ	0xFEE
   855                           wreg	equ	0xFE8
   856                           postdec1	equ	0xFE5
   857                           fsr1h	equ	0xFE2
   858                           fsr1l	equ	0xFE1
   859                           
   860                           	psect	cstackBANK0
   861  000060                     __pcstackBANK0:
   862                           	opt stack 0
   863  000060                     ??_strlen:
   864  000060                     ??_disk_status:
   865  000060                     ?_memcmp:
   866                           	opt stack 0
   867  000060                     ?___wmul:
   868                           	opt stack 0
   869  000060                     ?___lwdiv:
   870                           	opt stack 0
   871  000060                     ?___lwmod:
   872                           	opt stack 0
   873  000060                     ?_get_fattime:
   874                           	opt stack 0
   875  000060                     ?___lmul:
   876                           	opt stack 0
   877  000060                     ?___aldiv:
   878                           	opt stack 0
   879  000060                     ?___lldiv:
   880                           	opt stack 0
   881  000060                     ?___llmod:
   882                           	opt stack 0
   883  000060                     dummy_clocks@n:
   884                           	opt stack 0
   885  000060                     disk_ioctl@cmd:
   886                           	opt stack 0
   887  000060                     escreve_cmd_lcd@comando:
   888                           	opt stack 0
   889  000060                     endereco_cursor_lcd@endereco:
   890                           	opt stack 0
   891  000060                     escreve_caractere_lcd@data:
   892                           	opt stack 0
   893  000060                     f_mount@drv:
   894                           	opt stack 0
   895  000060                     write_timer_zero@timer:
   896                           	opt stack 0
   897  000060                     ___wmul@multiplier:
   898                           	opt stack 0
   899  000060                     ___lwdiv@dividend:
   900                           	opt stack 0
   901  000060                     ___lwmod@dividend:
   902                           	opt stack 0
   903  000060                     memcmp@s1:
   904                           	opt stack 0
   905  000060                     memcpy@d1:
   906                           	opt stack 0
   907  000060                     memset@p1:
   908                           	opt stack 0
   909  000060                     strcat@to:
   910                           	opt stack 0
   911  000060                     strcpy@to:
   912                           	opt stack 0
   913  000060                     wait_ready@timeout:
   914                           	opt stack 0
   915  000060                     ___lmul@multiplier:
   916                           	opt stack 0
   917  000060                     ___aldiv@dividend:
   918                           	opt stack 0
   919  000060                     ___lldiv@dividend:
   920                           	opt stack 0
   921  000060                     ___llmod@dividend:
   922                           	opt stack 0
   923                           
   924                           ; 4 bytes @ 0x0
   925  000060                     	ds	1
   926  000061                     ??_init_lcd:
   927  000061                     posicao_cursor_lcd@coluna:
   928                           	opt stack 0
   929  000061                     dummy_clocks@i:
   930                           	opt stack 0
   931  000061                     disk_status@result:
   932                           	opt stack 0
   933  000061                     disk_ioctl@buff:
   934                           	opt stack 0
   935  000061                     escreve_frase_ram_lcd@buffer:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x1
   939  000061                     	ds	1
   940  000062                     posicao_cursor_lcd@linha:
   941                           	opt stack 0
   942  000062                     ___wmul@multiplicand:
   943                           	opt stack 0
   944  000062                     ___lwdiv@divisor:
   945                           	opt stack 0
   946  000062                     ___lwmod@divisor:
   947                           	opt stack 0
   948  000062                     memcmp@s2:
   949                           	opt stack 0
   950  000062                     memcpy@s1:
   951                           	opt stack 0
   952  000062                     memset@c:
   953                           	opt stack 0
   954  000062                     strcat@from:
   955                           	opt stack 0
   956  000062                     strcpy@from:
   957                           	opt stack 0
   958  000062                     strlen@cp:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x2
   962  000062                     	ds	1
   963  000063                     disk_status@pdrv:
   964                           	opt stack 0
   965  000063                     posicao_cursor_lcd@endereco:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x3
   969  000063                     	ds	1
   970  000064                     ??_mensagem_inicial:
   971  000064                     ??_get_fattime:
   972  000064                     wait_ready@res:
   973                           	opt stack 0
   974  000064                     disk_status@stat:
   975                           	opt stack 0
   976  000064                     ___lwdiv@counter:
   977                           	opt stack 0
   978  000064                     monta_sd@dado:
   979                           	opt stack 0
   980  000064                     memcmp@n:
   981                           	opt stack 0
   982  000064                     memcpy@n:
   983                           	opt stack 0
   984  000064                     memset@n:
   985                           	opt stack 0
   986  000064                     ___lmul@multiplicand:
   987                           	opt stack 0
   988  000064                     ___aldiv@divisor:
   989                           	opt stack 0
   990  000064                     ___lldiv@divisor:
   991                           	opt stack 0
   992  000064                     ___llmod@divisor:
   993                           	opt stack 0
   994                           
   995                           ; 4 bytes @ 0x4
   996  000064                     	ds	1
   997  000065                     validate@fs:
   998                           	opt stack 0
   999  000065                     ___lwdiv@quotient:
  1000                           	opt stack 0
  1001  000065                     command@arg:
  1002                           	opt stack 0
  1003                           
  1004                           ; 4 bytes @ 0x5
  1005  000065                     	ds	1
  1006  000066                     ??_memcmp:
  1007  000066                     monta_sd@index:
  1008                           	opt stack 0
  1009  000066                     memcpy@tmp:
  1010                           	opt stack 0
  1011  000066                     make_dirfile@path:
  1012                           	opt stack 0
  1013  000066                     mensagem_inicial@msg_linha_um:
  1014                           	opt stack 0
  1015                           
  1016                           ; 17 bytes @ 0x6
  1017  000066                     	ds	1
  1018  000067                     monta_sd@size:
  1019                           	opt stack 0
  1020  000067                     validate@id:
  1021                           	opt stack 0
  1022  000067                     utoa@buf:
  1023                           	opt stack 0
  1024  000067                     memcpy@d:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x7
  1028  000067                     	ds	1
  1029  000068                     monta_sd@i:
  1030                           	opt stack 0
  1031  000068                     ___aldiv@counter:
  1032                           	opt stack 0
  1033  000068                     make_dirfile@dirname:
  1034                           	opt stack 0
  1035  000068                     ___lmul@product:
  1036                           	opt stack 0
  1037  000068                     ___lldiv@quotient:
  1038                           	opt stack 0
  1039                           
  1040                           ; 4 bytes @ 0x8
  1041  000068                     	ds	1
  1042  000069                     ??_validate:
  1043  000069                     command@CRC:
  1044                           	opt stack 0
  1045  000069                     ___aldiv@sign:
  1046                           	opt stack 0
  1047  000069                     utoa@val:
  1048                           	opt stack 0
  1049  000069                     memcpy@s:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x9
  1053  000069                     	ds	1
  1054  00006A                     ??_make_dirfile:
  1055  00006A                     command@CMD:
  1056                           	opt stack 0
  1057  00006A                     ___aldiv@quotient:
  1058                           	opt stack 0
  1059                           
  1060                           ; 4 bytes @ 0xA
  1061  00006A                     	ds	1
  1062  00006B                     command@argument:
  1063                           	opt stack 0
  1064  00006B                     utoa@base:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0xB
  1068  00006B                     	ds	1
  1069  00006C                     ?_clust2sect:
  1070                           	opt stack 0
  1071  00006C                     ___lldiv@counter:
  1072                           	opt stack 0
  1073  00006C                     sdc_reset@i:
  1074                           	opt stack 0
  1075  00006C                     sdc_disk_read@p_buff:
  1076                           	opt stack 0
  1077  00006C                     sdc_disk_write@p_buff:
  1078                           	opt stack 0
  1079  00006C                     clust2sect@clust:
  1080                           	opt stack 0
  1081  00006C                     _make_dirfile$1937:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0xC
  1085  00006C                     	ds	1
  1086  00006D                     utoa@v:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0xD
  1090  00006D                     	ds	1
  1091  00006E                     make_dirfile@b:
  1092                           	opt stack 0
  1093  00006E                     sdc_reset@count_nosd:
  1094                           	opt stack 0
  1095  00006E                     sdc_disk_read@sector:
  1096                           	opt stack 0
  1097  00006E                     sdc_disk_write@sector:
  1098                           	opt stack 0
  1099  00006E                     configura_baudrate_uart@baudrate:
  1100                           	opt stack 0
  1101                           
  1102                           ; 4 bytes @ 0xE
  1103  00006E                     	ds	1
  1104  00006F                     make_dirfile@t:
  1105                           	opt stack 0
  1106  00006F                     utoa@c:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0xF
  1110  00006F                     	ds	1
  1111  000070                     ??_clust2sect:
  1112  000070                     make_dirfile@a:
  1113                           	opt stack 0
  1114  000070                     sdc_reset@count:
  1115                           	opt stack 0
  1116  000070                     itoa@buf:
  1117                           	opt stack 0
  1118                           
  1119                           ; 2 bytes @ 0x10
  1120  000070                     	ds	1
  1121  000071                     make_dirfile@n:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0x11
  1125  000071                     	ds	1
  1126  000072                     ??_configura_baudrate_uart:
  1127  000072                     sdc_reset@buff:
  1128                           	opt stack 0
  1129  000072                     sdc_disk_read@count:
  1130                           	opt stack 0
  1131  000072                     sdc_disk_write@count:
  1132                           	opt stack 0
  1133  000072                     make_dirfile@c:
  1134                           	opt stack 0
  1135  000072                     itoa@val:
  1136                           	opt stack 0
  1137                           
  1138                           ; 2 bytes @ 0x12
  1139  000072                     	ds	1
  1140  000073                     ??_sdc_disk_initialize:
  1141  000073                     ??_sdc_disk_read:
  1142  000073                     ??_sdc_disk_write:
  1143                           
  1144                           ; 1 bytes @ 0x13
  1145  000073                     	ds	1
  1146  000074                     sdc_disk_initialize@i:
  1147                           	opt stack 0
  1148  000074                     itoa@base:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x14
  1152  000074                     	ds	2
  1153  000076                     sdc_disk_initialize@stat:
  1154                           	opt stack 0
  1155  000076                     itoa@cp:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0x16
  1159  000076                     	ds	1
  1160  000077                     sdc_disk_read@ptr:
  1161                           	opt stack 0
  1162  000077                     sdc_disk_initialize@count1:
  1163                           	opt stack 0
  1164  000077                     sdc_disk_write@i:
  1165                           	opt stack 0
  1166  000077                     mensagem_inicial@msg_dois:
  1167                           	opt stack 0
  1168                           
  1169                           ; 17 bytes @ 0x17
  1170  000077                     	ds	1
  1171  000078                     escreve_inteiro_lcd@valor:
  1172                           	opt stack 0
  1173  000078                     sdc_disk_read@start_add:
  1174                           	opt stack 0
  1175                           
  1176                           ; 4 bytes @ 0x18
  1177  000078                     	ds	1
  1178  000079                     sdc_disk_initialize@crc_number:
  1179                           	opt stack 0
  1180  000079                     sdc_disk_write@count1:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x19
  1184  000079                     	ds	1
  1185  00007A                     escreve_inteiro_lcd@texto:
  1186                           	opt stack 0
  1187                           
  1188                           ; 7 bytes @ 0x1A
  1189  00007A                     	ds	1
  1190  00007B                     sdc_disk_initialize@buff_i:
  1191                           	opt stack 0
  1192  00007B                     sdc_disk_write@res:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x1B
  1196  00007B                     	ds	1
  1197  00007C                     sdc_disk_initialize@ocr:
  1198                           	opt stack 0
  1199  00007C                     sdc_disk_read@length:
  1200                           	opt stack 0
  1201  00007C                     sdc_disk_write@j:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0x1C
  1205  00007C                     	ds	1
  1206  00007D                     sdc_disk_initialize@count2:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0x1D
  1210  00007D                     	ds	1
  1211  00007E                     sdc_disk_read@buff:
  1212                           	opt stack 0
  1213  00007E                     sdc_disk_write@buff:
  1214                           	opt stack 0
  1215                           
  1216                           ; 1 bytes @ 0x1E
  1217  00007E                     	ds	1
  1218  00007F                     sdc_disk_initialize@buff:
  1219                           	opt stack 0
  1220  00007F                     disk_read@buff:
  1221                           	opt stack 0
  1222  00007F                     disk_write@buff:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x1F
  1226  00007F                     	ds	1
  1227  000080                     disk_initialize@pdrv:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x20
  1231  000080                     	ds	1
  1232  000081                     disk_initialize@stat:
  1233                           	opt stack 0
  1234  000081                     disk_read@sector:
  1235                           	opt stack 0
  1236  000081                     disk_write@sector:
  1237                           	opt stack 0
  1238                           
  1239                           ; 4 bytes @ 0x21
  1240  000081                     	ds	4
  1241  000085                     disk_read@count:
  1242                           	opt stack 0
  1243  000085                     disk_write@count:
  1244                           	opt stack 0
  1245                           
  1246                           ; 1 bytes @ 0x25
  1247  000085                     	ds	1
  1248  000086                     ??_disk_read:
  1249  000086                     ??_disk_write:
  1250                           
  1251                           ; 1 bytes @ 0x26
  1252  000086                     	ds	1
  1253  000087                     disk_read@pdrv:
  1254                           	opt stack 0
  1255  000087                     disk_write@pdrv:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x27
  1259  000087                     	ds	1
  1260  000088                     disk_read@result:
  1261                           	opt stack 0
  1262  000088                     disk_write@result:
  1263                           	opt stack 0
  1264                           
  1265                           ; 2 bytes @ 0x28
  1266  000088                     	ds	2
  1267  00008A                     disk_read@res:
  1268                           	opt stack 0
  1269  00008A                     disk_write@res:
  1270                           	opt stack 0
  1271  00008A                     get_fattime@f_time:
  1272                           	opt stack 0
  1273                           
  1274                           ; 9 bytes @ 0x2A
  1275  00008A                     	ds	1
  1276  00008B                     move_window@sector:
  1277                           	opt stack 0
  1278  00008B                     check_fs@sect:
  1279                           	opt stack 0
  1280                           
  1281                           ; 4 bytes @ 0x2B
  1282  00008B                     	ds	4
  1283  00008F                     ??_move_window:
  1284  00008F                     
  1285                           ; 1 bytes @ 0x2F
  1286  00008F                     	ds	2
  1287  000091                     check_fs@fs:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x31
  1291  000091                     	ds	2
  1292  000093                     auto_mount@path:
  1293                           	opt stack 0
  1294                           
  1295                           ; 2 bytes @ 0x33
  1296  000093                     	ds	2
  1297  000095                     auto_mount@chk_wp:
  1298                           	opt stack 0
  1299                           
  1300                           ; 1 bytes @ 0x35
  1301  000095                     	ds	1
  1302  000096                     ??_auto_mount:
  1303                           
  1304                           ; 1 bytes @ 0x36
  1305  000096                     	ds	3
  1306  000099                     move_window@n:
  1307                           	opt stack 0
  1308                           
  1309                           ; 1 bytes @ 0x39
  1310  000099                     	ds	1
  1311  00009A                     move_window@wsect:
  1312                           	opt stack 0
  1313                           
  1314                           ; 4 bytes @ 0x3A
  1315  00009A                     	ds	4
  1316  00009E                     move_window@fs:
  1317                           	opt stack 0
  1318                           
  1319                           ; 2 bytes @ 0x3E
  1320  00009E                     	ds	2
  1321  0000A0                     ?_get_cluster:
  1322                           	opt stack 0
  1323  0000A0                     sync@fs:
  1324                           	opt stack 0
  1325  0000A0                     get_cluster@clust:
  1326                           	opt stack 0
  1327  0000A0                     put_cluster@clust:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0x40
  1331  0000A0                     	ds	2
  1332  0000A2                     ??_get_cluster:
  1333  0000A2                     put_cluster@val:
  1334                           	opt stack 0
  1335  0000A2                     f_sync@fp:
  1336                           	opt stack 0
  1337                           
  1338                           ; 2 bytes @ 0x42
  1339  0000A2                     	ds	2
  1340  0000A4                     ??_put_cluster:
  1341  0000A4                     f_sync@tim:
  1342                           	opt stack 0
  1343                           
  1344                           ; 4 bytes @ 0x44
  1345  0000A4                     	ds	1
  1346  0000A5                     auto_mount@maxclust:
  1347                           	opt stack 0
  1348                           
  1349                           ; 4 bytes @ 0x45
  1350  0000A5                     	ds	3
  1351  0000A8                     f_sync@res:
  1352                           	opt stack 0
  1353  0000A8                     _put_cluster$1827:
  1354                           	opt stack 0
  1355                           
  1356                           ; 2 bytes @ 0x48
  1357  0000A8                     	ds	1
  1358  0000A9                     get_cluster@wc:
  1359                           	opt stack 0
  1360  0000A9                     f_sync@dir:
  1361                           	opt stack 0
  1362  0000A9                     auto_mount@bootsect:
  1363                           	opt stack 0
  1364                           
  1365                           ; 4 bytes @ 0x49
  1366  0000A9                     	ds	1
  1367  0000AA                     _put_cluster$1828:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x4A
  1371  0000AA                     	ds	1
  1372  0000AB                     f_close@fp:
  1373                           	opt stack 0
  1374  0000AB                     get_cluster@fatsect:
  1375                           	opt stack 0
  1376                           
  1377                           ; 4 bytes @ 0x4B
  1378  0000AB                     	ds	1
  1379  0000AC                     put_cluster@fatsect:
  1380                           	opt stack 0
  1381                           
  1382                           ; 4 bytes @ 0x4C
  1383  0000AC                     	ds	1
  1384  0000AD                     f_close@res:
  1385                           	opt stack 0
  1386  0000AD                     auto_mount@totalsect:
  1387                           	opt stack 0
  1388                           
  1389                           ; 4 bytes @ 0x4D
  1390  0000AD                     	ds	2
  1391  0000AF                     get_cluster@bc:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x4F
  1395  0000AF                     	ds	1
  1396  0000B0                     put_cluster@bc:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x50
  1400  0000B0                     	ds	1
  1401  0000B1                     get_cluster@fs:
  1402                           	opt stack 0
  1403  0000B1                     auto_mount@p:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x51
  1407  0000B1                     	ds	1
  1408  0000B2                     put_cluster@p:
  1409                           	opt stack 0
  1410                           
  1411                           ; 2 bytes @ 0x52
  1412  0000B2                     	ds	1
  1413  0000B3                     auto_mount@fmt:
  1414                           	opt stack 0
  1415  0000B3                     next_dir_entry@dj:
  1416                           	opt stack 0
  1417                           
  1418                           ; 2 bytes @ 0x53
  1419  0000B3                     	ds	1
  1420  0000B4                     auto_mount@stat:
  1421                           	opt stack 0
  1422  0000B4                     put_cluster@fs:
  1423                           	opt stack 0
  1424                           
  1425                           ; 2 bytes @ 0x54
  1426  0000B4                     	ds	1
  1427  0000B5                     ??_next_dir_entry:
  1428  0000B5                     auto_mount@fatsize:
  1429                           	opt stack 0
  1430                           
  1431                           ; 4 bytes @ 0x55
  1432  0000B5                     	ds	1
  1433  0000B6                     ?_create_chain:
  1434                           	opt stack 0
  1435  0000B6                     remove_chain@clust:
  1436                           	opt stack 0
  1437  0000B6                     create_chain@clust:
  1438                           	opt stack 0
  1439                           
  1440                           ; 2 bytes @ 0x56
  1441  0000B6                     	ds	2
  1442  0000B8                     
  1443                           ; 1 bytes @ 0x58
  1444  0000B8                     	ds	1
  1445  0000B9                     auto_mount@fs:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x59
  1449  0000B9                     	ds	1
  1450  0000BA                     remove_chain@nxt:
  1451                           	opt stack 0
  1452  0000BA                     create_chain@mcl:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x5A
  1456  0000BA                     	ds	2
  1457  0000BC                     remove_chain@fs:
  1458                           	opt stack 0
  1459  0000BC                     create_chain@fs:
  1460                           	opt stack 0
  1461  0000BC                     next_dir_entry@clust:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x5C
  1465  0000BC                     	ds	2
  1466  0000BE                     create_chain@cstat:
  1467                           	opt stack 0
  1468  0000BE                     next_dir_entry@idx:
  1469                           	opt stack 0
  1470                           
  1471                           ; 2 bytes @ 0x5E
  1472  0000BE                     	ds	2
  1473  0000C0                     create_chain@scl:
  1474                           	opt stack 0
  1475  0000C0                     trace_path@dj:
  1476                           	opt stack 0
  1477                           
  1478                           ; 2 bytes @ 0x60
  1479  0000C0                     	ds	2
  1480  0000C2                     create_chain@ncl:
  1481                           	opt stack 0
  1482  0000C2                     trace_path@fn:
  1483                           	opt stack 0
  1484                           
  1485                           ; 2 bytes @ 0x62
  1486  0000C2                     	ds	2
  1487  0000C4                     trace_path@path:
  1488                           	opt stack 0
  1489  0000C4                     reserve_direntry@dj:
  1490                           	opt stack 0
  1491  0000C4                     f_write@fp:
  1492                           	opt stack 0
  1493  0000C4                     f_lseek@fp:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x64
  1497  0000C4                     	ds	2
  1498  0000C6                     trace_path@dir:
  1499                           	opt stack 0
  1500  0000C6                     reserve_direntry@dir:
  1501                           	opt stack 0
  1502  0000C6                     f_write@buff:
  1503                           	opt stack 0
  1504  0000C6                     f_lseek@ofs:
  1505                           	opt stack 0
  1506                           
  1507                           ; 4 bytes @ 0x66
  1508  0000C6                     	ds	2
  1509  0000C8                     ??_trace_path:
  1510  0000C8                     ??_reserve_direntry:
  1511  0000C8                     f_write@btw:
  1512                           	opt stack 0
  1513                           
  1514                           ; 2 bytes @ 0x68
  1515  0000C8                     	ds	2
  1516  0000CA                     ??_f_lseek:
  1517  0000CA                     f_write@bw:
  1518                           	opt stack 0
  1519  0000CA                     reserve_direntry@sector:
  1520                           	opt stack 0
  1521                           
  1522                           ; 4 bytes @ 0x6A
  1523  0000CA                     	ds	2
  1524  0000CC                     ??_f_write:
  1525  0000CC                     _trace_path$1984:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0x6C
  1529  0000CC                     	ds	2
  1530  0000CE                     reserve_direntry@n:
  1531                           	opt stack 0
  1532  0000CE                     _trace_path$1986:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x6E
  1536  0000CE                     	ds	1
  1537  0000CF                     reserve_direntry@dptr:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x6F
  1541  0000CF                     	ds	1
  1542  0000D0                     trace_path@fs:
  1543                           	opt stack 0
  1544                           
  1545                           ; 2 bytes @ 0x70
  1546  0000D0                     	ds	1
  1547  0000D1                     reserve_direntry@c:
  1548                           	opt stack 0
  1549                           
  1550                           ; 1 bytes @ 0x71
  1551  0000D1                     	ds	1
  1552  0000D2                     trace_path@clust:
  1553                           	opt stack 0
  1554  0000D2                     reserve_direntry@clust:
  1555                           	opt stack 0
  1556                           
  1557                           ; 2 bytes @ 0x72
  1558  0000D2                     	ds	2
  1559  0000D4                     trace_path@ds:
  1560                           	opt stack 0
  1561  0000D4                     reserve_direntry@fs:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x74
  1565  0000D4                     	ds	1
  1566  0000D5                     trace_path@dptr:
  1567                           	opt stack 0
  1568                           
  1569                           ; 2 bytes @ 0x75
  1570  0000D5                     	ds	1
  1571  0000D6                     f_lseek@res:
  1572                           	opt stack 0
  1573                           
  1574                           ; 1 bytes @ 0x76
  1575  0000D6                     	ds	1
  1576  0000D7                     f_open@fp:
  1577                           	opt stack 0
  1578  0000D7                     f_lseek@ifptr:
  1579                           	opt stack 0
  1580                           
  1581                           ; 4 bytes @ 0x77
  1582  0000D7                     	ds	1
  1583  0000D8                     f_write@res:
  1584                           	opt stack 0
  1585                           
  1586                           ; 1 bytes @ 0x78
  1587  0000D8                     	ds	1
  1588  0000D9                     f_open@path:
  1589                           	opt stack 0
  1590  0000D9                     f_write@wbuff:
  1591                           	opt stack 0
  1592                           
  1593                           ; 2 bytes @ 0x79
  1594  0000D9                     	ds	2
  1595  0000DB                     f_open@mode:
  1596                           	opt stack 0
  1597  0000DB                     f_write@sect:
  1598                           	opt stack 0
  1599  0000DB                     f_lseek@csize:
  1600                           	opt stack 0
  1601                           
  1602                           ; 4 bytes @ 0x7B
  1603  0000DB                     	ds	1
  1604  0000DC                     ??_f_open:
  1605                           
  1606                           ; 1 bytes @ 0x7C
  1607  0000DC                     	ds	3
  1608  0000DF                     f_write@cc:
  1609                           	opt stack 0
  1610  0000DF                     f_lseek@clust:
  1611                           	opt stack 0
  1612                           
  1613                           ; 2 bytes @ 0x7F
  1614  0000DF                     	ds	2
  1615  0000E1                     f_write@clust:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x81
  1619  0000E1                     	ds	2
  1620  0000E3                     f_write@wcnt:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x83
  1624  0000E3                     	ds	2
  1625  0000E5                     fputc@c:
  1626                           	opt stack 0
  1627                           
  1628                           ; 1 bytes @ 0x85
  1629  0000E5                     	ds	1
  1630  0000E6                     fputc@bw:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x86
  1634  0000E6                     	ds	2
  1635                           tblptru	equ	0xFF8
  1636                           tblptrh	equ	0xFF7
  1637                           tblptrl	equ	0xFF6
  1638                           tablat	equ	0xFF5
  1639                           postinc0	equ	0xFEE
  1640                           wreg	equ	0xFE8
  1641                           postdec1	equ	0xFE5
  1642                           fsr1h	equ	0xFE2
  1643                           fsr1l	equ	0xFE1
  1644                           
  1645                           	psect	cstackCOMRAM
  1646  000001                     __pcstackCOMRAM:
  1647                           	opt stack 0
  1648  000001                     ?_strcmp:
  1649                           	opt stack 0
  1650  000001                     stringcpy@str1:
  1651                           	opt stack 0
  1652  000001                     strcmp@s1:
  1653                           	opt stack 0
  1654  000001                     i2write_timer_zero@timer0:
  1655                           	opt stack 0
  1656                           
  1657                           ; 2 bytes @ 0x0
  1658  000001                     	ds	2
  1659  000003                     stringcpy@str2:
  1660                           	opt stack 0
  1661  000003                     strcmp@s2:
  1662                           	opt stack 0
  1663  000003                     i2write_timer_zero@timer:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x2
  1667  000003                     	ds	2
  1668  000005                     ??_strcmp:
  1669  000005                     stringcpy@dir:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x4
  1673  000005                     	ds	1
  1674  000006                     strcmp@r:
  1675                           	opt stack 0
  1676                           
  1677                           ; 1 bytes @ 0x5
  1678  000006                     	ds	1
  1679  000007                     ??_stringcpy:
  1680                           
  1681                           ; 1 bytes @ 0x6
  1682  000007                     	ds	2
  1683  000009                     stringcpy@chr:
  1684                           	opt stack 0
  1685                           
  1686                           ; 1 bytes @ 0x8
  1687  000009                     	ds	1
  1688  00000A                     GPSRead@buff:
  1689                           	opt stack 0
  1690                           
  1691                           ; 1 bytes @ 0x9
  1692  00000A                     	ds	1
  1693  00000B                     GPSRead@c:
  1694                           	opt stack 0
  1695                           
  1696                           ; 1 bytes @ 0xA
  1697  00000B                     	ds	1
  1698  00000C                     ??_isr:
  1699                           
  1700                           ; 1 bytes @ 0xB
  1701  00000C                     	ds	20
  1702  000020                     isr@cont:
  1703                           	opt stack 0
  1704                           
  1705                           ; 1 bytes @ 0x1F
  1706  000020                     	ds	1
  1707  000021                     ??_dummy_clocks:
  1708  000021                     ?_strlen:
  1709                           	opt stack 0
  1710  000021                     response@buff:
  1711                           	opt stack 0
  1712  000021                     escreve_SPI@TempVar:
  1713                           	opt stack 0
  1714  000021                     disk_ioctl@pdrv:
  1715                           	opt stack 0
  1716  000021                     sdc_disk_status@stat:
  1717                           	opt stack 0
  1718  000021                     delay@contador_ext:
  1719                           	opt stack 0
  1720  000021                     ___llmod@counter:
  1721                           	opt stack 0
  1722  000021                     ___lwmod@counter:
  1723                           	opt stack 0
  1724  000021                     write_timer_zero@timer0:
  1725                           	opt stack 0
  1726  000021                     configura_baudrate_uart@x:
  1727                           	opt stack 0
  1728  000021                     clust2sect@fs:
  1729                           	opt stack 0
  1730  000021                     f_mount@fs:
  1731                           	opt stack 0
  1732  000021                     ___wmul@product:
  1733                           	opt stack 0
  1734  000021                     memset@p:
  1735                           	opt stack 0
  1736  000021                     strcat@cp:
  1737                           	opt stack 0
  1738  000021                     strcpy@cp:
  1739                           	opt stack 0
  1740  000021                     strlen@s:
  1741                           	opt stack 0
  1742                           
  1743                           ; 2 bytes @ 0x20
  1744  000021                     	ds	1
  1745  000022                     escreve_SPI@dado:
  1746                           	opt stack 0
  1747  000022                     disk_ioctl@res:
  1748                           	opt stack 0
  1749  000022                     sdc_disk_status@pdrv:
  1750                           	opt stack 0
  1751  000022                     delay@contador_int:
  1752                           	opt stack 0
  1753                           
  1754                           ; 1 bytes @ 0x21
  1755  000022                     	ds	1
  1756  000023                     tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           fsr1h	equ	0xFE2
  1764                           fsr1l	equ	0xFE1
  1765                           
  1766                           ; 1 bytes @ 0x22
  1767 ;;
  1768 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1769 ;;
  1770 ;; *************** function _main *****************
  1771 ;; Defined at:
  1772 ;;		line 197 in file "main.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;		None
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1    wreg      void 
  1779 ;; Registers used:
  1780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1786 ;;      Params:         0       0       0       0       0       0       0       0       0
  1787 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1788 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1789 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1790 ;;Total ram usage:        0 bytes
  1791 ;; Hardware stack levels required when called:   17
  1792 ;; This function calls:
  1793 ;;		_escalonador
  1794 ;;		_inicializa_tarefas
  1795 ;;		_inicializa_uart
  1796 ;;		_init_hardware
  1797 ;;		_init_lcd
  1798 ;;		_mensagem_inicial
  1799 ;;		_transf_dados_sd
  1800 ;; This function is called by:
  1801 ;;		Startup code after reset
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           	psect	text0
  1806  005118                     __ptext0:
  1807                           	opt stack 0
  1808  005118                     _main:
  1809                           	opt stack 14
  1810                           
  1811                           ;main.c: 199: init_hardware();
  1812                           
  1813                           ;incstack = 0
  1814  005118  EC2F  F029         	call	_init_hardware	;wreg free
  1815                           
  1816                           ;main.c: 200: T0CONbits.TMR0ON = 0;
  1817  00511C  9ED5               	bcf	4053,7,c	;volatile
  1818                           
  1819                           ;main.c: 201: init_lcd();
  1820  00511E  ECFD  F021         	call	_init_lcd	;wreg free
  1821                           
  1822                           ;main.c: 202: mensagem_inicial();
  1823  005122  EC68  F023         	call	_mensagem_inicial	;wreg free
  1824                           
  1825                           ;main.c: 203: inicializa_tarefas();
  1826  005126  EC5D  F028         	call	_inicializa_tarefas	;wreg free
  1827                           
  1828                           ;main.c: 204: inicializa_uart();
  1829  00512A  ECE0  F028         	call	_inicializa_uart	;wreg free
  1830                           
  1831                           ;main.c: 205: T0CONbits.TMR0ON = 1;
  1832  00512E  8ED5               	bsf	4053,7,c	;volatile
  1833  005130                     
  1834                           ;main.c: 207: {
  1835                           ;main.c: 209: if ((sinaliza_int_timer == 1) && (2))
  1836  005130  043A               	decf	_sinaliza_int_timer,w,c
  1837  005132  A4D8               	btfss	status,2,c
  1838  005134  D004               	goto	l90
  1839                           
  1840                           ;main.c: 210: {
  1841                           ;main.c: 211: sinaliza_int_timer = 0;
  1842  005136  0E00               	movlw	0
  1843  005138  6E3A               	movwf	_sinaliza_int_timer,c
  1844                           
  1845                           ;main.c: 212: escalonador();
  1846  00513A  EC07  F021         	call	_escalonador	;wreg free
  1847  00513E                     l90:
  1848                           
  1849                           ;main.c: 213: }
  1850                           ;main.c: 214: transf_dados_sd();
  1851  00513E  EC89  F027         	call	_transf_dados_sd	;wreg free
  1852  005142  D7F6               	goto	l89
  1853  005144                     __end_of_main:
  1854                           	opt stack 0
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           postinc0	equ	0xFEE
  1860                           wreg	equ	0xFE8
  1861                           postdec1	equ	0xFE5
  1862                           fsr1h	equ	0xFE2
  1863                           fsr1l	equ	0xFE1
  1864                           status	equ	0xFD8
  1865                           
  1866 ;; *************** function _transf_dados_sd *****************
  1867 ;; Defined at:
  1868 ;;		line 632 in file "bibliotecas/GPS.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;		None
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;		None
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  1    wreg      void 
  1875 ;; Registers used:
  1876 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1882 ;;      Params:         0       0       0       0       0       0       0       0       0
  1883 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1884 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1885 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1886 ;;Total ram usage:        0 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    5
  1889 ;; This function calls:
  1890 ;;		_monta_sd
  1891 ;; This function is called by:
  1892 ;;		_main
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text1
  1897  004F12                     __ptext1:
  1898                           	opt stack 0
  1899  004F12                     _transf_dados_sd:
  1900                           	opt stack 25
  1901                           
  1902                           ;GPS.c: 634: monta_sd(0, rawTime);
  1903                           
  1904                           ;incstack = 0
  1905  004F12  0E71               	movlw	low _rawTime
  1906  004F14  0100               	movlb	0	; () banked
  1907  004F16  6F64               	movwf	monta_sd@dado& (0+255),b
  1908  004F18  0E01               	movlw	high _rawTime
  1909  004F1A  6F65               	movwf	(monta_sd@dado+1)& (0+255),b
  1910  004F1C  0E00               	movlw	0
  1911  004F1E  ECE1  F01A         	call	_monta_sd
  1912                           
  1913                           ;GPS.c: 635: monta_sd(1, rawDate);
  1914  004F22  0E83               	movlw	low _rawDate
  1915  004F24  0100               	movlb	0	; () banked
  1916  004F26  6F64               	movwf	monta_sd@dado& (0+255),b
  1917  004F28  0E01               	movlw	high _rawDate
  1918  004F2A  6F65               	movwf	(monta_sd@dado+1)& (0+255),b
  1919  004F2C  0E01               	movlw	1
  1920  004F2E  ECE1  F01A         	call	_monta_sd
  1921                           
  1922                           ;GPS.c: 636: monta_sd(2, rawLatitude);
  1923  004F32  0E64               	movlw	low _rawLatitude
  1924  004F34  0100               	movlb	0	; () banked
  1925  004F36  6F64               	movwf	monta_sd@dado& (0+255),b
  1926  004F38  0E01               	movlw	high _rawLatitude
  1927  004F3A  6F65               	movwf	(monta_sd@dado+1)& (0+255),b
  1928  004F3C  0E02               	movlw	2
  1929  004F3E  ECE1  F01A         	call	_monta_sd
  1930                           
  1931                           ;GPS.c: 637: monta_sd(3, rawLongitude);
  1932  004F42  0E57               	movlw	low _rawLongitude
  1933  004F44  0100               	movlb	0	; () banked
  1934  004F46  6F64               	movwf	monta_sd@dado& (0+255),b
  1935  004F48  0E01               	movlw	high _rawLongitude
  1936  004F4A  6F65               	movwf	(monta_sd@dado+1)& (0+255),b
  1937  004F4C  0E03               	movlw	3
  1938  004F4E  ECE1  F01A         	call	_monta_sd
  1939  004F52  0012               	return	
  1940  004F54                     __end_of_transf_dados_sd:
  1941                           	opt stack 0
  1942                           tblptru	equ	0xFF8
  1943                           tblptrh	equ	0xFF7
  1944                           tblptrl	equ	0xFF6
  1945                           tablat	equ	0xFF5
  1946                           postinc0	equ	0xFEE
  1947                           wreg	equ	0xFE8
  1948                           postdec1	equ	0xFE5
  1949                           fsr1h	equ	0xFE2
  1950                           fsr1l	equ	0xFE1
  1951                           status	equ	0xFD8
  1952                           
  1953 ;; *************** function _monta_sd *****************
  1954 ;; Defined at:
  1955 ;;		line 248 in file "bibliotecas/SDCard.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;  index           1    wreg     unsigned char 
  1958 ;;  dado            2    4[BANK0 ] PTR unsigned char 
  1959 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;  index           1    6[BANK0 ] unsigned char 
  1962 ;;  i               1    8[BANK0 ] unsigned char 
  1963 ;;  size            1    7[BANK0 ] unsigned char 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1973 ;;      Params:         0       2       0       0       0       0       0       0       0
  1974 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1975 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1976 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1977 ;;Total ram usage:        5 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    4
  1980 ;; This function calls:
  1981 ;;		_strcat
  1982 ;;		_strcpy
  1983 ;;		_strlen
  1984 ;; This function is called by:
  1985 ;;		_transf_dados_sd
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           	psect	text2
  1990  0035C2                     __ptext2:
  1991                           	opt stack 0
  1992  0035C2                     _monta_sd:
  1993                           	opt stack 25
  1994                           
  1995                           ;incstack = 0
  1996                           ;monta_sd@index stored from wreg
  1997  0035C2  0100               	movlb	0	; () banked
  1998  0035C4  6F66               	movwf	monta_sd@index& (0+255),b
  1999                           
  2000                           ;SDCard.c: 250: unsigned char i, size;
  2001                           ;SDCard.c: 251: size = strlen(dado);
  2002  0035C6  C064  F021         	movff	monta_sd@dado,strlen@s
  2003  0035CA  C065  F022         	movff	monta_sd@dado+1,strlen@s+1
  2004  0035CE  ECEB  F027         	call	_strlen	;wreg free
  2005  0035D2  5021               	movf	?_strlen,w,c
  2006  0035D4  0100               	movlb	0	; () banked
  2007  0035D6  6F67               	movwf	monta_sd@size& (0+255),b
  2008                           
  2009                           ;SDCard.c: 252: switch(index)
  2010  0035D8  D092               	goto	l269
  2011  0035DA                     
  2012                           ; BSR set to: 0
  2013                           ;SDCard.c: 255: for(i=0; i<6;i++)
  2014                           
  2015                           ; BSR set to: 0
  2016  0035DA  0E00               	movlw	0
  2017  0035DC  6F68               	movwf	monta_sd@i& (0+255),b
  2018  0035DE                     l10621:
  2019                           
  2020                           ; BSR set to: 0
  2021  0035DE  0E05               	movlw	5
  2022  0035E0  6568               	cpfsgt	monta_sd@i& (0+255),b
  2023  0035E2  D001               	goto	l271
  2024  0035E4  0012               	return	
  2025  0035E6                     l271:
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;SDCard.c: 256: {
  2029                           ;SDCard.c: 257: string_dado.hora[i] = *dado;
  2030                           
  2031                           ; BSR set to: 0
  2032  0035E6  C064  FFD9         	movff	monta_sd@dado,fsr2l
  2033  0035EA  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
  2034  0035EE  5168               	movf	monta_sd@i& (0+255),w,b
  2035  0035F0  0D01               	mullw	1
  2036  0035F2  0E07               	movlw	low (_string_dado+7)
  2037  0035F4  24F3               	addwf	prodl,w,c
  2038  0035F6  6EE1               	movwf	fsr1l,c
  2039  0035F8  0E01               	movlw	high (_string_dado+7)
  2040  0035FA  20F4               	addwfc	prodh,w,c
  2041  0035FC  6EE2               	movwf	fsr1h,c
  2042  0035FE  CFDF FFE7          	movff	indf2,indf1
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;SDCard.c: 258: dado++;
  2046  003602  4B64               	infsnz	monta_sd@dado& (0+255),f,b
  2047  003604  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
  2048                           
  2049                           ; BSR set to: 0
  2050  003606  2B68               	incf	monta_sd@i& (0+255),f,b
  2051  003608  D7EA               	goto	l10621
  2052  00360A                     
  2053                           ; BSR set to: 0
  2054                           ;SDCard.c: 263: for(i=0; i<6;i++)
  2055                           
  2056                           ; BSR set to: 0
  2057  00360A  0E00               	movlw	0
  2058  00360C  6F68               	movwf	monta_sd@i& (0+255),b
  2059  00360E                     l10635:
  2060                           
  2061                           ; BSR set to: 0
  2062  00360E  0E05               	movlw	5
  2063  003610  6568               	cpfsgt	monta_sd@i& (0+255),b
  2064  003612  D001               	goto	l275
  2065  003614  D012               	goto	u13560
  2066  003616                     l275:
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;SDCard.c: 264: {
  2070                           ;SDCard.c: 265: string_dado.data[i] = *dado;
  2071                           
  2072                           ; BSR set to: 0
  2073  003616  C064  FFD9         	movff	monta_sd@dado,fsr2l
  2074  00361A  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
  2075  00361E  5168               	movf	monta_sd@i& (0+255),w,b
  2076  003620  0D01               	mullw	1
  2077  003622  0E00               	movlw	low _string_dado
  2078  003624  24F3               	addwf	prodl,w,c
  2079  003626  6EE1               	movwf	fsr1l,c
  2080  003628  0E01               	movlw	high _string_dado
  2081  00362A  20F4               	addwfc	prodh,w,c
  2082  00362C  6EE2               	movwf	fsr1h,c
  2083  00362E  CFDF FFE7          	movff	indf2,indf1
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;SDCard.c: 266: dado++;
  2087  003632  4B64               	infsnz	monta_sd@dado& (0+255),f,b
  2088  003634  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
  2089                           
  2090                           ; BSR set to: 0
  2091  003636  2B68               	incf	monta_sd@i& (0+255),f,b
  2092  003638  D7EA               	goto	l10635
  2093  00363A                     u13560:
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;SDCard.c: 269: {
  2097                           ;SDCard.c: 270: data_hoje = 1;
  2098                           
  2099                           ; BSR set to: 0
  2100                           
  2101                           ;SDCard.c: 267: }
  2102                           ;SDCard.c: 268: if(string_dado.data)
  2103  00363A  0E01               	movlw	1
  2104  00363C  6E35               	movwf	_data_hoje,c
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;SDCard.c: 271: strcpy(filename, string_dado.data);
  2108  00363E  0E48               	movlw	low _filename
  2109  003640  6F60               	movwf	strcpy@to& (0+255),b
  2110  003642  0E01               	movlw	high _filename
  2111  003644  6F61               	movwf	(strcpy@to+1)& (0+255),b
  2112  003646  0E00               	movlw	low _string_dado
  2113  003648  6F62               	movwf	strcpy@from& (0+255),b
  2114  00364A  0E01               	movlw	high _string_dado
  2115  00364C  6F63               	movwf	(strcpy@from+1)& (0+255),b
  2116  00364E  EC45  F028         	call	_strcpy	;wreg free
  2117                           
  2118                           ;SDCard.c: 272: strcat(filename, ".txt");
  2119  003652  0E48               	movlw	low _filename
  2120  003654  0100               	movlb	0	; () banked
  2121  003656  6F60               	movwf	strcat@to& (0+255),b
  2122  003658  0E01               	movlw	high _filename
  2123  00365A  6F61               	movwf	(strcat@to+1)& (0+255),b
  2124  00365C  0EC3               	movlw	low STR_10
  2125  00365E  6F62               	movwf	strcat@from& (0+255),b
  2126  003660  0E08               	movlw	high STR_10
  2127  003662  6F63               	movwf	(strcat@from+1)& (0+255),b
  2128  003664  EC22  F027         	call	_strcat	;wreg free
  2129                           
  2130                           ;SDCard.c: 273: }
  2131                           ;SDCard.c: 274: break;
  2132  003668  0012               	return	
  2133  00366A                     
  2134                           ;SDCard.c: 277: for(i=0; i<13;i++)
  2135  00366A  0E00               	movlw	0
  2136  00366C  0100               	movlb	0	; () banked
  2137  00366E  6F68               	movwf	monta_sd@i& (0+255),b
  2138  003670                     l10655:
  2139                           
  2140                           ; BSR set to: 0
  2141  003670  0E0C               	movlw	12
  2142  003672  6568               	cpfsgt	monta_sd@i& (0+255),b
  2143  003674  D001               	goto	l279
  2144  003676  0012               	return	
  2145  003678                     l279:
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;SDCard.c: 278: {
  2149                           ;SDCard.c: 279: string_dado.LAT[i] = *dado;
  2150                           
  2151                           ; BSR set to: 0
  2152  003678  C064  FFD9         	movff	monta_sd@dado,fsr2l
  2153  00367C  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
  2154  003680  5168               	movf	monta_sd@i& (0+255),w,b
  2155  003682  0D01               	mullw	1
  2156  003684  0E12               	movlw	low (_string_dado+18)
  2157  003686  24F3               	addwf	prodl,w,c
  2158  003688  6EE1               	movwf	fsr1l,c
  2159  00368A  0E01               	movlw	high (_string_dado+18)
  2160  00368C  20F4               	addwfc	prodh,w,c
  2161  00368E  6EE2               	movwf	fsr1h,c
  2162  003690  CFDF FFE7          	movff	indf2,indf1
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;SDCard.c: 280: dado++;
  2166  003694  4B64               	infsnz	monta_sd@dado& (0+255),f,b
  2167  003696  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
  2168                           
  2169                           ; BSR set to: 0
  2170  003698  2B68               	incf	monta_sd@i& (0+255),f,b
  2171  00369A  D7EA               	goto	l10655
  2172  00369C                     
  2173                           ; BSR set to: 0
  2174                           ;SDCard.c: 286: for(i=0; i<13;i++)
  2175                           
  2176                           ; BSR set to: 0
  2177  00369C  0E00               	movlw	0
  2178  00369E  6F68               	movwf	monta_sd@i& (0+255),b
  2179  0036A0                     l10669:
  2180                           
  2181                           ; BSR set to: 0
  2182  0036A0  0E0C               	movlw	12
  2183  0036A2  6568               	cpfsgt	monta_sd@i& (0+255),b
  2184  0036A4  D001               	goto	l282
  2185  0036A6  0012               	return	
  2186  0036A8                     l282:
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;SDCard.c: 287: {
  2190                           ;SDCard.c: 288: string_dado.LONG[i] = *dado;
  2191                           
  2192                           ; BSR set to: 0
  2193  0036A8  C064  FFD9         	movff	monta_sd@dado,fsr2l
  2194  0036AC  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
  2195  0036B0  5168               	movf	monta_sd@i& (0+255),w,b
  2196  0036B2  0D01               	mullw	1
  2197  0036B4  0E1F               	movlw	low (_string_dado+31)
  2198  0036B6  24F3               	addwf	prodl,w,c
  2199  0036B8  6EE1               	movwf	fsr1l,c
  2200  0036BA  0E01               	movlw	high (_string_dado+31)
  2201  0036BC  20F4               	addwfc	prodh,w,c
  2202  0036BE  6EE2               	movwf	fsr1h,c
  2203  0036C0  CFDF FFE7          	movff	indf2,indf1
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;SDCard.c: 289: dado++;
  2207  0036C4  4B64               	infsnz	monta_sd@dado& (0+255),f,b
  2208  0036C6  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
  2209                           
  2210                           ; BSR set to: 0
  2211  0036C8  2B68               	incf	monta_sd@i& (0+255),f,b
  2212  0036CA  D7EA               	goto	l10669
  2213  0036CC                     
  2214                           ; BSR set to: 0
  2215                           ;SDCard.c: 295: for(i=0; i<size;i++)
  2216                           
  2217                           ; BSR set to: 0
  2218  0036CC  0E00               	movlw	0
  2219  0036CE  6F68               	movwf	monta_sd@i& (0+255),b
  2220  0036D0  D011               	goto	l285
  2221  0036D2                     
  2222                           ; BSR set to: 0
  2223                           ;SDCard.c: 296: {
  2224                           ;SDCard.c: 297: string_dado.LONG[i] = *dado;
  2225                           
  2226                           ; BSR set to: 0
  2227  0036D2  C064  FFD9         	movff	monta_sd@dado,fsr2l
  2228  0036D6  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
  2229  0036DA  5168               	movf	monta_sd@i& (0+255),w,b
  2230  0036DC  0D01               	mullw	1
  2231  0036DE  0E1F               	movlw	low (_string_dado+31)
  2232  0036E0  24F3               	addwf	prodl,w,c
  2233  0036E2  6EE1               	movwf	fsr1l,c
  2234  0036E4  0E01               	movlw	high (_string_dado+31)
  2235  0036E6  20F4               	addwfc	prodh,w,c
  2236  0036E8  6EE2               	movwf	fsr1h,c
  2237  0036EA  CFDF FFE7          	movff	indf2,indf1
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;SDCard.c: 298: dado++;
  2241  0036EE  4B64               	infsnz	monta_sd@dado& (0+255),f,b
  2242  0036F0  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
  2243                           
  2244                           ; BSR set to: 0
  2245  0036F2  2B68               	incf	monta_sd@i& (0+255),f,b
  2246  0036F4                     l285:
  2247                           
  2248                           ; BSR set to: 0
  2249                           
  2250                           ; BSR set to: 0
  2251  0036F4  5167               	movf	monta_sd@size& (0+255),w,b
  2252  0036F6  5D68               	subwf	monta_sd@i& (0+255),w,b
  2253  0036F8  B0D8               	btfsc	status,0,c
  2254  0036FA  0012               	return	
  2255  0036FC  D7EA               	goto	l286
  2256  0036FE                     l269:
  2257                           
  2258                           ; BSR set to: 0
  2259                           
  2260                           ; BSR set to: 0
  2261  0036FE  5166               	movf	monta_sd@index& (0+255),w,b
  2262                           
  2263                           ; Switch size 1, requested type "space"
  2264                           ; Number of cases is 5, Range of values is 0 to 4
  2265                           ; switch strategies available:
  2266                           ; Name         Instructions Cycles
  2267                           ; simple_byte           16     9 (average)
  2268                           ;	Chosen strategy is simple_byte
  2269  003700  0A00               	xorlw	0	; case 0
  2270  003702  B4D8               	btfsc	status,2,c
  2271  003704  D76A               	goto	l270
  2272  003706  0A01               	xorlw	1	; case 1
  2273  003708  B4D8               	btfsc	status,2,c
  2274  00370A  D77F               	goto	l274
  2275  00370C  0A03               	xorlw	3	; case 2
  2276  00370E  B4D8               	btfsc	status,2,c
  2277  003710  D7AC               	goto	l278
  2278  003712  0A01               	xorlw	1	; case 3
  2279  003714  B4D8               	btfsc	status,2,c
  2280  003716  D7C2               	goto	l281
  2281  003718  0A07               	xorlw	7	; case 4
  2282  00371A  A4D8               	btfss	status,2,c
  2283  00371C  0012               	return	
  2284  00371E  D7D6               	goto	l284
  2285  003720                     __end_of_monta_sd:
  2286                           	opt stack 0
  2287                           tblptru	equ	0xFF8
  2288                           tblptrh	equ	0xFF7
  2289                           tblptrl	equ	0xFF6
  2290                           tablat	equ	0xFF5
  2291                           prodh	equ	0xFF4
  2292                           prodl	equ	0xFF3
  2293                           postinc0	equ	0xFEE
  2294                           wreg	equ	0xFE8
  2295                           indf1	equ	0xFE7
  2296                           postdec1	equ	0xFE5
  2297                           fsr1h	equ	0xFE2
  2298                           fsr1l	equ	0xFE1
  2299                           indf2	equ	0xFDF
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           
  2304 ;; *************** function _strlen *****************
  2305 ;; Defined at:
  2306 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  s               2   32[COMRAM] PTR const unsigned char 
  2309 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
  2312 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
  2313 ;; Return value:  Size  Location     Type
  2314 ;;                  2   32[COMRAM] unsigned int 
  2315 ;; Registers used:
  2316 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2317 ;; Tracked objects:
  2318 ;;		On entry : 0/0
  2319 ;;		On exit  : 0/0
  2320 ;;		Unchanged: 0/0
  2321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2322 ;;      Params:         2       0       0       0       0       0       0       0       0
  2323 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2324 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2325 ;;      Totals:         2       4       0       0       0       0       0       0       0
  2326 ;;Total ram usage:        6 bytes
  2327 ;; Hardware stack levels used:    1
  2328 ;; Hardware stack levels required when called:    3
  2329 ;; This function calls:
  2330 ;;		Nothing
  2331 ;; This function is called by:
  2332 ;;		_monta_sd
  2333 ;; This function uses a non-reentrant model
  2334 ;;
  2335                           
  2336                           	psect	text3
  2337  004FD6                     __ptext3:
  2338                           	opt stack 0
  2339  004FD6                     _strlen:
  2340                           	opt stack 25
  2341                           
  2342                           ;incstack = 0
  2343  004FD6  C021  F062         	movff	strlen@s,strlen@cp
  2344  004FDA  C022  F063         	movff	strlen@s+1,strlen@cp+1
  2345  004FDE  D003               	goto	l1939
  2346  004FE0  0100               	movlb	0	; () banked
  2347  004FE2  4B62               	infsnz	strlen@cp& (0+255),f,b
  2348  004FE4  2B63               	incf	(strlen@cp+1)& (0+255),f,b
  2349  004FE6                     l1939:
  2350                           
  2351                           ; BSR set to: 0
  2352  004FE6  C062  FFD9         	movff	strlen@cp,fsr2l
  2353  004FEA  C063  FFDA         	movff	strlen@cp+1,fsr2h
  2354  004FEE  50DF               	movf	indf2,w,c
  2355  004FF0  A4D8               	btfss	status,2,c
  2356  004FF2  D7F6               	goto	l1940
  2357  004FF4  C021  F060         	movff	strlen@s,??_strlen
  2358  004FF8  C022  F061         	movff	strlen@s+1,??_strlen+1
  2359  004FFC  0100               	movlb	0	; () banked
  2360  004FFE  1F60               	comf	??_strlen& (0+255),f,b
  2361  005000  1F61               	comf	(??_strlen+1)& (0+255),f,b
  2362  005002  4B60               	infsnz	??_strlen& (0+255),f,b
  2363  005004  2B61               	incf	(??_strlen+1)& (0+255),f,b
  2364  005006  5162               	movf	strlen@cp& (0+255),w,b
  2365  005008  2560               	addwf	??_strlen& (0+255),w,b
  2366  00500A  6E21               	movwf	?_strlen,c
  2367  00500C  5163               	movf	(strlen@cp+1)& (0+255),w,b
  2368  00500E  2161               	addwfc	(??_strlen+1)& (0+255),w,b
  2369  005010  6E22               	movwf	?_strlen+1,c
  2370  005012  0012               	return	
  2371  005014                     __end_of_strlen:
  2372                           	opt stack 0
  2373                           tblptru	equ	0xFF8
  2374                           tblptrh	equ	0xFF7
  2375                           tblptrl	equ	0xFF6
  2376                           tablat	equ	0xFF5
  2377                           prodh	equ	0xFF4
  2378                           prodl	equ	0xFF3
  2379                           postinc0	equ	0xFEE
  2380                           wreg	equ	0xFE8
  2381                           indf1	equ	0xFE7
  2382                           postdec1	equ	0xFE5
  2383                           fsr1h	equ	0xFE2
  2384                           fsr1l	equ	0xFE1
  2385                           indf2	equ	0xFDF
  2386                           fsr2h	equ	0xFDA
  2387                           fsr2l	equ	0xFD9
  2388                           status	equ	0xFD8
  2389                           
  2390 ;; *************** function _strcpy *****************
  2391 ;; Defined at:
  2392 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;  to              2    0[BANK0 ] PTR unsigned char 
  2395 ;;		 -> filename(15), 
  2396 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  2397 ;;		 -> string_dado.data(7), string_dado(44), 
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  cp              2   32[COMRAM] PTR unsigned char 
  2400 ;;		 -> filename(15), 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  2    0[BANK0 ] PTR unsigned char 
  2403 ;; Registers used:
  2404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2410 ;;      Params:         0       4       0       0       0       0       0       0       0
  2411 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2412 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2413 ;;      Totals:         2       4       0       0       0       0       0       0       0
  2414 ;;Total ram usage:        6 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    3
  2417 ;; This function calls:
  2418 ;;		Nothing
  2419 ;; This function is called by:
  2420 ;;		_monta_sd
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text4
  2425  00508A                     __ptext4:
  2426                           	opt stack 0
  2427  00508A                     _strcpy:
  2428                           	opt stack 25
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;incstack = 0
  2432  00508A  C060  F021         	movff	strcpy@to,strcpy@cp
  2433  00508E  C061  F022         	movff	strcpy@to+1,strcpy@cp+1
  2434  005092  D005               	goto	l1933
  2435  005094  4A21               	infsnz	strcpy@cp,f,c
  2436  005096  2A22               	incf	strcpy@cp+1,f,c
  2437  005098  0100               	movlb	0	; () banked
  2438  00509A  4B62               	infsnz	strcpy@from& (0+255),f,b
  2439  00509C  2B63               	incf	(strcpy@from+1)& (0+255),f,b
  2440  00509E                     l1933:
  2441                           
  2442                           ; BSR set to: 0
  2443  00509E  C062  FFD9         	movff	strcpy@from,fsr2l
  2444  0050A2  C063  FFDA         	movff	strcpy@from+1,fsr2h
  2445  0050A6  C021  FFE1         	movff	strcpy@cp,fsr1l
  2446  0050AA  C022  FFE2         	movff	strcpy@cp+1,fsr1h
  2447  0050AE  CFDF FFE7          	movff	indf2,indf1
  2448  0050B2  50E7               	movf	indf1,w,c
  2449  0050B4  B4D8               	btfsc	status,2,c
  2450  0050B6  0012               	return	
  2451  0050B8  D7ED               	goto	l1934
  2452  0050BA                     __end_of_strcpy:
  2453                           	opt stack 0
  2454                           tblptru	equ	0xFF8
  2455                           tblptrh	equ	0xFF7
  2456                           tblptrl	equ	0xFF6
  2457                           tablat	equ	0xFF5
  2458                           prodh	equ	0xFF4
  2459                           prodl	equ	0xFF3
  2460                           postinc0	equ	0xFEE
  2461                           wreg	equ	0xFE8
  2462                           indf1	equ	0xFE7
  2463                           postdec1	equ	0xFE5
  2464                           fsr1h	equ	0xFE2
  2465                           fsr1l	equ	0xFE1
  2466                           indf2	equ	0xFDF
  2467                           fsr2h	equ	0xFDA
  2468                           fsr2l	equ	0xFD9
  2469                           status	equ	0xFD8
  2470                           
  2471 ;; *************** function _strcat *****************
  2472 ;; Defined at:
  2473 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcat.c"
  2474 ;; Parameters:    Size  Location     Type
  2475 ;;  to              2    0[BANK0 ] PTR unsigned char 
  2476 ;;		 -> filename(15), 
  2477 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  2478 ;;		 -> STR_10(5), 
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;  cp              2   32[COMRAM] PTR unsigned char 
  2481 ;;		 -> filename(15), 
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  2    0[BANK0 ] PTR unsigned char 
  2484 ;; Registers used:
  2485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2491 ;;      Params:         0       4       0       0       0       0       0       0       0
  2492 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2493 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2494 ;;      Totals:         2       4       0       0       0       0       0       0       0
  2495 ;;Total ram usage:        6 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    3
  2498 ;; This function calls:
  2499 ;;		Nothing
  2500 ;; This function is called by:
  2501 ;;		_monta_sd
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text5
  2506  004E44                     __ptext5:
  2507                           	opt stack 0
  2508  004E44                     _strcat:
  2509                           	opt stack 25
  2510                           
  2511                           ;incstack = 0
  2512  004E44  C060  F021         	movff	strcat@to,strcat@cp
  2513  004E48  C061  F022         	movff	strcat@to+1,strcat@cp+1
  2514  004E4C  D002               	goto	l1916
  2515  004E4E  4A21               	infsnz	strcat@cp,f,c
  2516  004E50  2A22               	incf	strcat@cp+1,f,c
  2517  004E52                     l1916:
  2518  004E52  C021  FFD9         	movff	strcat@cp,fsr2l
  2519  004E56  C022  FFDA         	movff	strcat@cp+1,fsr2h
  2520  004E5A  50DF               	movf	indf2,w,c
  2521  004E5C  B4D8               	btfsc	status,2,c
  2522  004E5E  D006               	goto	l1919
  2523  004E60  D7F6               	goto	l1917
  2524  004E62  4A21               	infsnz	strcat@cp,f,c
  2525  004E64  2A22               	incf	strcat@cp+1,f,c
  2526  004E66  0100               	movlb	0	; () banked
  2527  004E68  4B62               	infsnz	strcat@from& (0+255),f,b
  2528  004E6A  2B63               	incf	(strcat@from+1)& (0+255),f,b
  2529  004E6C                     l1919:
  2530                           
  2531                           ; BSR set to: 0
  2532  004E6C  C062  FFF6         	movff	strcat@from,tblptrl
  2533  004E70  C063  FFF7         	movff	strcat@from+1,tblptrh
  2534  004E74                     	if	0	;tblptru may be non-zero
  2535  004E74                     	endif
  2536  004E74                     	if	0	;tblptru may be non-zero
  2537  004E74                     	endif
  2538  004E74  C021  FFD9         	movff	strcat@cp,fsr2l
  2539  004E78  C022  FFDA         	movff	strcat@cp+1,fsr2h
  2540  004E7C  0008               	tblrd		*
  2541  004E7E  CFF5 FFDF          	movff	tablat,indf2
  2542  004E82  50DF               	movf	indf2,w,c
  2543  004E84  B4D8               	btfsc	status,2,c
  2544  004E86  0012               	return	
  2545  004E88  D7EC               	goto	l1920
  2546  004E8A                     __end_of_strcat:
  2547                           	opt stack 0
  2548                           tblptru	equ	0xFF8
  2549                           tblptrh	equ	0xFF7
  2550                           tblptrl	equ	0xFF6
  2551                           tablat	equ	0xFF5
  2552                           prodh	equ	0xFF4
  2553                           prodl	equ	0xFF3
  2554                           postinc0	equ	0xFEE
  2555                           wreg	equ	0xFE8
  2556                           indf1	equ	0xFE7
  2557                           postdec1	equ	0xFE5
  2558                           fsr1h	equ	0xFE2
  2559                           fsr1l	equ	0xFE1
  2560                           indf2	equ	0xFDF
  2561                           fsr2h	equ	0xFDA
  2562                           fsr2l	equ	0xFD9
  2563                           status	equ	0xFD8
  2564                           
  2565 ;; *************** function _mensagem_inicial *****************
  2566 ;; Defined at:
  2567 ;;		line 223 in file "main.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;		None
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;  msg_dois       17   23[BANK0 ] const unsigned char [17]
  2572 ;;  msg_linha_um   17    6[BANK0 ] const unsigned char [17]
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  1    wreg      void 
  2575 ;; Registers used:
  2576 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2582 ;;      Params:         0       0       0       0       0       0       0       0       0
  2583 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2584 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2585 ;;      Totals:         0      36       0       0       0       0       0       0       0
  2586 ;;Total ram usage:       36 bytes
  2587 ;; Hardware stack levels used:    1
  2588 ;; Hardware stack levels required when called:    6
  2589 ;; This function calls:
  2590 ;;		_escreve_cmd_lcd
  2591 ;;		_escreve_frase_ram_lcd
  2592 ;;		_posicao_cursor_lcd
  2593 ;; This function is called by:
  2594 ;;		_main
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           	psect	text6
  2599  0046D0                     __ptext6:
  2600                           	opt stack 0
  2601  0046D0                     _mensagem_inicial:
  2602                           	opt stack 24
  2603                           
  2604                           ;main.c: 225: const unsigned char msg_linha_um[17] = "TCC--TELEMTRIA";
  2605                           
  2606                           ;incstack = 0
  2607  0046D0  0E12               	movlw	low mensagem_inicial@F4119
  2608  0046D2  6EF6               	movwf	tblptrl,c
  2609  0046D4                     	if	1	;There is more than 1 active tblptr byte
  2610  0046D4  0E08               	movlw	high mensagem_inicial@F4119
  2611  0046D6  6EF7               	movwf	tblptrh,c
  2612  0046D8                     	endif
  2613  0046D8                     	if	0	;There are less than 3 active tblptr bytes
  2614  0046D8                     	endif
  2615  0046D8  EE20  F066         	lfsr	2,mensagem_inicial@msg_linha_um
  2616  0046DC  0E10               	movlw	16
  2617  0046DE                     u13690:
  2618  0046DE  0009               	tblrd		*+
  2619  0046E0  CFF5 FFDE          	movff	tablat,postinc2
  2620  0046E4  06E8               	decf	wreg,f,c
  2621  0046E6  E2FB               	bc	u13690
  2622                           
  2623                           ;main.c: 226: const unsigned char msg_dois[17] = " 18/01/2022   ";
  2624  0046E8  0E01               	movlw	low mensagem_inicial@F4121
  2625  0046EA  6EF6               	movwf	tblptrl,c
  2626  0046EC                     	if	1	;There is more than 1 active tblptr byte
  2627  0046EC  0E08               	movlw	high mensagem_inicial@F4121
  2628  0046EE  6EF7               	movwf	tblptrh,c
  2629  0046F0                     	endif
  2630  0046F0                     	if	0	;There are less than 3 active tblptr bytes
  2631  0046F0                     	endif
  2632  0046F0  EE20  F077         	lfsr	2,mensagem_inicial@msg_dois
  2633  0046F4  0E10               	movlw	16
  2634  0046F6                     u13700:
  2635  0046F6  0009               	tblrd		*+
  2636  0046F8  CFF5 FFDE          	movff	tablat,postinc2
  2637  0046FC  06E8               	decf	wreg,f,c
  2638  0046FE  E2FB               	bc	u13700
  2639                           
  2640                           ;main.c: 228: posicao_cursor_lcd(1,0);
  2641  004700  0E00               	movlw	0
  2642  004702  0100               	movlb	0	; () banked
  2643  004704  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2644  004706  0E01               	movlw	1
  2645  004708  ECED  F023         	call	_posicao_cursor_lcd
  2646                           
  2647                           ;main.c: 229: escreve_frase_ram_lcd(msg_linha_um);
  2648  00470C  0E66               	movlw	low mensagem_inicial@msg_linha_um
  2649  00470E  0100               	movlb	0	; () banked
  2650  004710  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2651  004712  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2652  004714  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2653  004716  EC19  F026         	call	_escreve_frase_ram_lcd	;wreg free
  2654                           
  2655                           ;main.c: 231: posicao_cursor_lcd(2,0);
  2656  00471A  0E00               	movlw	0
  2657  00471C  0100               	movlb	0	; () banked
  2658  00471E  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2659  004720  0E02               	movlw	2
  2660  004722  ECED  F023         	call	_posicao_cursor_lcd
  2661                           
  2662                           ;main.c: 232: escreve_frase_ram_lcd(msg_dois);
  2663  004726  0E77               	movlw	low mensagem_inicial@msg_dois
  2664  004728  0100               	movlb	0	; () banked
  2665  00472A  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2666  00472C  0E00               	movlw	high mensagem_inicial@msg_dois
  2667  00472E  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2668  004730  EC19  F026         	call	_escreve_frase_ram_lcd	;wreg free
  2669                           
  2670                           ;main.c: 233: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2671  004734  0E3D               	movlw	61
  2672  004736  0100               	movlb	0	; () banked
  2673  004738  6F65               	movwf	(??_mensagem_inicial+1)& (0+255),b
  2674  00473A  0EE1               	movlw	225
  2675  00473C  6F64               	movwf	??_mensagem_inicial& (0+255),b
  2676  00473E  0E3F               	movlw	63
  2677  004740                     u14287:
  2678  004740  2EE8               	decfsz	wreg,f,c
  2679  004742  D7FE               	bra	u14287
  2680  004744  2F64               	decfsz	??_mensagem_inicial& (0+255),f,b
  2681  004746  D7FC               	bra	u14287
  2682  004748  2F65               	decfsz	(??_mensagem_inicial+1)& (0+255),f,b
  2683  00474A  D7FA               	bra	u14287
  2684  00474C  D000               	nop2	
  2685                           
  2686                           ;main.c: 234: escreve_cmd_lcd(0b00000001);
  2687  00474E  0E01               	movlw	1
  2688  004750  EC4C  F022         	call	_escreve_cmd_lcd
  2689  004754  0012               	return		;funcret
  2690  004756                     __end_of_mensagem_inicial:
  2691                           	opt stack 0
  2692                           tblptru	equ	0xFF8
  2693                           tblptrh	equ	0xFF7
  2694                           tblptrl	equ	0xFF6
  2695                           tablat	equ	0xFF5
  2696                           prodh	equ	0xFF4
  2697                           prodl	equ	0xFF3
  2698                           postinc0	equ	0xFEE
  2699                           wreg	equ	0xFE8
  2700                           indf1	equ	0xFE7
  2701                           postdec1	equ	0xFE5
  2702                           fsr1h	equ	0xFE2
  2703                           fsr1l	equ	0xFE1
  2704                           indf2	equ	0xFDF
  2705                           postinc2	equ	0xFDE
  2706                           fsr2h	equ	0xFDA
  2707                           fsr2l	equ	0xFD9
  2708                           status	equ	0xFD8
  2709                           
  2710 ;; *************** function _init_lcd *****************
  2711 ;; Defined at:
  2712 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		wreg, status,2, status,0, cstack
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2726 ;;      Params:         0       0       0       0       0       0       0       0       0
  2727 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2728 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2729 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2730 ;;Total ram usage:        1 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    5
  2733 ;; This function calls:
  2734 ;;		_delay
  2735 ;;		_escreve_cmd_lcd
  2736 ;; This function is called by:
  2737 ;;		_main
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text7
  2742  0043FA                     __ptext7:
  2743                           	opt stack 0
  2744  0043FA                     _init_lcd:
  2745                           	opt stack 25
  2746                           
  2747                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2748                           
  2749                           ;incstack = 0
  2750  0043FA  9495               	bcf	3989,2,c	;volatile
  2751                           
  2752                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2753  0043FC  9295               	bcf	3989,1,c	;volatile
  2754                           
  2755                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2756  0043FE  9095               	bcf	3989,0,c	;volatile
  2757                           
  2758                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2759  004400  9895               	bcf	3989,4,c	;volatile
  2760                           
  2761                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2762  004402  9A95               	bcf	3989,5,c	;volatile
  2763                           
  2764                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2765  004404  9C95               	bcf	3989,6,c	;volatile
  2766                           
  2767                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2768  004406  9E95               	bcf	3989,7,c	;volatile
  2769                           
  2770                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2771  004408  9483               	bcf	3971,2,c	;volatile
  2772                           
  2773                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2774  00440A  9283               	bcf	3971,1,c	;volatile
  2775                           
  2776                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2777  00440C  9083               	bcf	3971,0,c	;volatile
  2778                           
  2779                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2780  00440E  9E83               	bcf	3971,7,c	;volatile
  2781                           
  2782                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2783  004410  9C83               	bcf	3971,6,c	;volatile
  2784                           
  2785                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2786  004412  8A83               	bsf	3971,5,c	;volatile
  2787                           
  2788                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2789  004414  8883               	bsf	3971,4,c	;volatile
  2790                           
  2791                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2792  004416  0EEA               	movlw	234
  2793  004418  0100               	movlb	0	; () banked
  2794  00441A  6F61               	movwf	??_init_lcd& (0+255),b
  2795  00441C  0EC3               	movlw	195
  2796  00441E                     u14297:
  2797  00441E  2EE8               	decfsz	wreg,f,c
  2798  004420  D7FE               	bra	u14297
  2799  004422  2F61               	decfsz	??_init_lcd& (0+255),f,b
  2800  004424  D7FC               	bra	u14297
  2801                           
  2802                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2803  004426  8083               	bsf	3971,0,c	;volatile
  2804                           
  2805                           ;display_lcd.c: 108: delay();
  2806  004428  ECF2  F028         	call	_delay	;wreg free
  2807                           
  2808                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2809  00442C  9083               	bcf	3971,0,c	;volatile
  2810                           
  2811                           ;display_lcd.c: 110: delay();
  2812  00442E  ECF2  F028         	call	_delay	;wreg free
  2813                           
  2814                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2815  004432  0E4E               	movlw	78
  2816  004434  0100               	movlb	0	; () banked
  2817  004436  6F61               	movwf	??_init_lcd& (0+255),b
  2818  004438  0EEB               	movlw	235
  2819  00443A                     u14307:
  2820  00443A  2EE8               	decfsz	wreg,f,c
  2821  00443C  D7FE               	bra	u14307
  2822  00443E  2F61               	decfsz	??_init_lcd& (0+255),f,b
  2823  004440  D7FC               	bra	u14307
  2824                           
  2825                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2826  004442  8083               	bsf	3971,0,c	;volatile
  2827                           
  2828                           ;display_lcd.c: 119: delay();
  2829  004444  ECF2  F028         	call	_delay	;wreg free
  2830                           
  2831                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2832  004448  9083               	bcf	3971,0,c	;volatile
  2833                           
  2834                           ;display_lcd.c: 121: delay();
  2835  00444A  ECF2  F028         	call	_delay	;wreg free
  2836                           
  2837                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2838  00444E  0E4E               	movlw	78
  2839  004450  0100               	movlb	0	; () banked
  2840  004452  6F61               	movwf	??_init_lcd& (0+255),b
  2841  004454  0EEB               	movlw	235
  2842  004456                     u14317:
  2843  004456  2EE8               	decfsz	wreg,f,c
  2844  004458  D7FE               	bra	u14317
  2845  00445A  2F61               	decfsz	??_init_lcd& (0+255),f,b
  2846  00445C  D7FC               	bra	u14317
  2847                           
  2848                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2849  00445E  8083               	bsf	3971,0,c	;volatile
  2850                           
  2851                           ;display_lcd.c: 130: delay();
  2852  004460  ECF2  F028         	call	_delay	;wreg free
  2853                           
  2854                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2855  004464  9083               	bcf	3971,0,c	;volatile
  2856                           
  2857                           ;display_lcd.c: 132: delay();
  2858  004466  ECF2  F028         	call	_delay	;wreg free
  2859                           
  2860                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2861  00446A  9E83               	bcf	3971,7,c	;volatile
  2862                           
  2863                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2864  00446C  9C83               	bcf	3971,6,c	;volatile
  2865                           
  2866                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2867  00446E  8A83               	bsf	3971,5,c	;volatile
  2868                           
  2869                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2870  004470  9883               	bcf	3971,4,c	;volatile
  2871                           
  2872                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2873  004472  8083               	bsf	3971,0,c	;volatile
  2874                           
  2875                           ;display_lcd.c: 143: delay();
  2876  004474  ECF2  F028         	call	_delay	;wreg free
  2877                           
  2878                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2879  004478  9083               	bcf	3971,0,c	;volatile
  2880                           
  2881                           ;display_lcd.c: 145: delay();
  2882  00447A  ECF2  F028         	call	_delay	;wreg free
  2883                           
  2884                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2885  00447E  0E28               	movlw	40
  2886  004480  EC4C  F022         	call	_escreve_cmd_lcd
  2887                           
  2888                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2889  004484  0E06               	movlw	6
  2890  004486  EC4C  F022         	call	_escreve_cmd_lcd
  2891                           
  2892                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2893  00448A  0E0E               	movlw	14
  2894  00448C  EC4C  F022         	call	_escreve_cmd_lcd
  2895                           
  2896                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2897  004490  0E01               	movlw	1
  2898  004492  EC4C  F022         	call	_escreve_cmd_lcd
  2899  004496  0012               	return		;funcret
  2900  004498                     __end_of_init_lcd:
  2901                           	opt stack 0
  2902                           tblptru	equ	0xFF8
  2903                           tblptrh	equ	0xFF7
  2904                           tblptrl	equ	0xFF6
  2905                           tablat	equ	0xFF5
  2906                           prodh	equ	0xFF4
  2907                           prodl	equ	0xFF3
  2908                           postinc0	equ	0xFEE
  2909                           wreg	equ	0xFE8
  2910                           indf1	equ	0xFE7
  2911                           postdec1	equ	0xFE5
  2912                           fsr1h	equ	0xFE2
  2913                           fsr1l	equ	0xFE1
  2914                           indf2	equ	0xFDF
  2915                           postinc2	equ	0xFDE
  2916                           fsr2h	equ	0xFDA
  2917                           fsr2l	equ	0xFD9
  2918                           status	equ	0xFD8
  2919                           
  2920 ;; *************** function _escreve_cmd_lcd *****************
  2921 ;; Defined at:
  2922 ;;		line 162 in file "bibliotecas/display_lcd.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;  comando         1    wreg     unsigned char 
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;  comando         1    0[BANK0 ] unsigned char 
  2927 ;; Return value:  Size  Location     Type
  2928 ;;                  1    wreg      void 
  2929 ;; Registers used:
  2930 ;;		wreg, status,2, status,0, cstack
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2936 ;;      Params:         0       0       0       0       0       0       0       0       0
  2937 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2938 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2939 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2940 ;;Total ram usage:        1 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; Hardware stack levels required when called:    4
  2943 ;; This function calls:
  2944 ;;		_delay
  2945 ;; This function is called by:
  2946 ;;		_mensagem_inicial
  2947 ;;		_init_lcd
  2948 ;;		_cria_caractere_lcd
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text8
  2953  004498                     __ptext8:
  2954                           	opt stack 0
  2955  004498                     _escreve_cmd_lcd:
  2956                           	opt stack 25
  2957                           
  2958                           ;incstack = 0
  2959                           ;escreve_cmd_lcd@comando stored from wreg
  2960  004498  0100               	movlb	0	; () banked
  2961  00449A  6F60               	movwf	escreve_cmd_lcd@comando& (0+255),b
  2962                           
  2963                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  2964  00449C  9483               	bcf	3971,2,c	;volatile
  2965                           
  2966                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  2967  00449E  9283               	bcf	3971,1,c	;volatile
  2968                           
  2969                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  2970  0044A0  9083               	bcf	3971,0,c	;volatile
  2971                           
  2972                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  2973  0044A2  0100               	movlb	0	; () banked
  2974  0044A4  A960               	btfss	escreve_cmd_lcd@comando& (0+255),4,b
  2975  0044A6  D002               	goto	l517
  2976                           
  2977                           ; BSR set to: 0
  2978  0044A8  8883               	bsf	3971,4,c	;volatile
  2979  0044AA  D001               	goto	l518
  2980  0044AC                     l517:
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  2984  0044AC  9883               	bcf	3971,4,c	;volatile
  2985  0044AE                     l518:
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  2989                           
  2990                           ; BSR set to: 0
  2991  0044AE  AB60               	btfss	escreve_cmd_lcd@comando& (0+255),5,b
  2992  0044B0  D002               	goto	l519
  2993                           
  2994                           ; BSR set to: 0
  2995  0044B2  8A83               	bsf	3971,5,c	;volatile
  2996  0044B4  D001               	goto	l520
  2997  0044B6                     l519:
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  3001  0044B6  9A83               	bcf	3971,5,c	;volatile
  3002  0044B8                     l520:
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  3006                           
  3007                           ; BSR set to: 0
  3008  0044B8  AD60               	btfss	escreve_cmd_lcd@comando& (0+255),6,b
  3009  0044BA  D002               	goto	l521
  3010                           
  3011                           ; BSR set to: 0
  3012  0044BC  8C83               	bsf	3971,6,c	;volatile
  3013  0044BE  D001               	goto	l522
  3014  0044C0                     l521:
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  3018  0044C0  9C83               	bcf	3971,6,c	;volatile
  3019  0044C2                     l522:
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  3023                           
  3024                           ; BSR set to: 0
  3025  0044C2  AF60               	btfss	escreve_cmd_lcd@comando& (0+255),7,b
  3026  0044C4  D002               	goto	l523
  3027                           
  3028                           ; BSR set to: 0
  3029  0044C6  8E83               	bsf	3971,7,c	;volatile
  3030  0044C8  D001               	goto	l524
  3031  0044CA                     l523:
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  3035  0044CA  9E83               	bcf	3971,7,c	;volatile
  3036  0044CC                     l524:
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  3040  0044CC  8083               	bsf	3971,0,c	;volatile
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;display_lcd.c: 181: delay();
  3044  0044CE  ECF2  F028         	call	_delay	;wreg free
  3045                           
  3046                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  3047  0044D2  9083               	bcf	3971,0,c	;volatile
  3048                           
  3049                           ;display_lcd.c: 183: delay();
  3050  0044D4  ECF2  F028         	call	_delay	;wreg free
  3051                           
  3052                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  3053  0044D8  0100               	movlb	0	; () banked
  3054  0044DA  A160               	btfss	escreve_cmd_lcd@comando& (0+255),0,b
  3055  0044DC  D002               	goto	l525
  3056                           
  3057                           ; BSR set to: 0
  3058  0044DE  8883               	bsf	3971,4,c	;volatile
  3059  0044E0  D001               	goto	l526
  3060  0044E2                     l525:
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  3064  0044E2  9883               	bcf	3971,4,c	;volatile
  3065  0044E4                     l526:
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  3069  0044E4  A360               	btfss	escreve_cmd_lcd@comando& (0+255),1,b
  3070  0044E6  D002               	goto	l527
  3071                           
  3072                           ; BSR set to: 0
  3073  0044E8  8A83               	bsf	3971,5,c	;volatile
  3074  0044EA  D001               	goto	l528
  3075  0044EC                     l527:
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  3079  0044EC  9A83               	bcf	3971,5,c	;volatile
  3080  0044EE                     l528:
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  3084  0044EE  A560               	btfss	escreve_cmd_lcd@comando& (0+255),2,b
  3085  0044F0  D002               	goto	l529
  3086                           
  3087                           ; BSR set to: 0
  3088  0044F2  8C83               	bsf	3971,6,c	;volatile
  3089  0044F4  D001               	goto	l530
  3090  0044F6                     l529:
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  3094  0044F6  9C83               	bcf	3971,6,c	;volatile
  3095  0044F8                     l530:
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  3099  0044F8  A760               	btfss	escreve_cmd_lcd@comando& (0+255),3,b
  3100  0044FA  D002               	goto	l531
  3101                           
  3102                           ; BSR set to: 0
  3103  0044FC  8E83               	bsf	3971,7,c	;volatile
  3104  0044FE  D001               	goto	l532
  3105  004500                     l531:
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  3109  004500  9E83               	bcf	3971,7,c	;volatile
  3110  004502                     l532:
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  3114  004502  8083               	bsf	3971,0,c	;volatile
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;display_lcd.c: 197: delay();
  3118  004504  ECF2  F028         	call	_delay	;wreg free
  3119                           
  3120                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  3121  004508  9083               	bcf	3971,0,c	;volatile
  3122                           
  3123                           ;display_lcd.c: 199: delay();
  3124  00450A  ECF2  F028         	call	_delay	;wreg free
  3125                           
  3126                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  3127  00450E  0100               	movlb	0	; () banked
  3128  004510  0560               	decf	escreve_cmd_lcd@comando& (0+255),w,b
  3129  004512  B4D8               	btfsc	status,2,c
  3130  004514  D008               	goto	u13520
  3131                           
  3132                           ; BSR set to: 0
  3133  004516  0E02               	movlw	2
  3134  004518  1960               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  3135  00451A  B4D8               	btfsc	status,2,c
  3136  00451C  D004               	goto	u13520
  3137                           
  3138                           ; BSR set to: 0
  3139  00451E  0E03               	movlw	3
  3140  004520  1960               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  3141  004522  A4D8               	btfss	status,2,c
  3142  004524  0012               	return	
  3143  004526                     u13520:
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;display_lcd.c: 205: { delay(); }
  3147                           
  3148                           ; BSR set to: 0
  3149  004526  ECF2  F028         	call	_delay	;wreg free
  3150  00452A  0012               	return	
  3151  00452C                     __end_of_escreve_cmd_lcd:
  3152                           	opt stack 0
  3153                           tblptru	equ	0xFF8
  3154                           tblptrh	equ	0xFF7
  3155                           tblptrl	equ	0xFF6
  3156                           tablat	equ	0xFF5
  3157                           prodh	equ	0xFF4
  3158                           prodl	equ	0xFF3
  3159                           postinc0	equ	0xFEE
  3160                           wreg	equ	0xFE8
  3161                           indf1	equ	0xFE7
  3162                           postdec1	equ	0xFE5
  3163                           fsr1h	equ	0xFE2
  3164                           fsr1l	equ	0xFE1
  3165                           indf2	equ	0xFDF
  3166                           postinc2	equ	0xFDE
  3167                           fsr2h	equ	0xFDA
  3168                           fsr2l	equ	0xFD9
  3169                           status	equ	0xFD8
  3170                           
  3171 ;; *************** function _init_hardware *****************
  3172 ;; Defined at:
  3173 ;;		line 55 in file "bibliotecas/hardware.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;		None
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;		None
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  1    wreg      void 
  3180 ;; Registers used:
  3181 ;;		wreg, status,2, cstack
  3182 ;; Tracked objects:
  3183 ;;		On entry : 0/0
  3184 ;;		On exit  : 0/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3187 ;;      Params:         0       0       0       0       0       0       0       0       0
  3188 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3189 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3190 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3191 ;;Total ram usage:        0 bytes
  3192 ;; Hardware stack levels used:    1
  3193 ;; Hardware stack levels required when called:    5
  3194 ;; This function calls:
  3195 ;;		_config_timer_dois
  3196 ;;		_config_timer_zero
  3197 ;;		_init_interrupt
  3198 ;;		_init_oscilador
  3199 ;;		_init_ports
  3200 ;; This function is called by:
  3201 ;;		_main
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           	psect	text9
  3206  00525E                     __ptext9:
  3207                           	opt stack 0
  3208  00525E                     _init_hardware:
  3209                           	opt stack 25
  3210                           
  3211                           ;hardware.c: 58: init_oscilador();
  3212                           
  3213                           ;incstack = 0
  3214  00525E  EC9E  F029         	call	_init_oscilador	;wreg free
  3215                           
  3216                           ;hardware.c: 61: init_ports();
  3217  005262  EC14  F029         	call	_init_ports	;wreg free
  3218                           
  3219                           ;hardware.c: 64: config_timer_zero();
  3220  005266  EC22  F029         	call	_config_timer_zero	;wreg free
  3221                           
  3222                           ;hardware.c: 67: config_timer_dois();
  3223  00526A  EC78  F029         	call	_config_timer_dois	;wreg free
  3224                           
  3225                           ;hardware.c: 70: init_interrupt();
  3226  00526E  EC44  F029         	call	_init_interrupt	;wreg free
  3227  005272  0012               	return		;funcret
  3228  005274                     __end_of_init_hardware:
  3229                           	opt stack 0
  3230                           tblptru	equ	0xFF8
  3231                           tblptrh	equ	0xFF7
  3232                           tblptrl	equ	0xFF6
  3233                           tablat	equ	0xFF5
  3234                           prodh	equ	0xFF4
  3235                           prodl	equ	0xFF3
  3236                           postinc0	equ	0xFEE
  3237                           wreg	equ	0xFE8
  3238                           indf1	equ	0xFE7
  3239                           postdec1	equ	0xFE5
  3240                           fsr1h	equ	0xFE2
  3241                           fsr1l	equ	0xFE1
  3242                           indf2	equ	0xFDF
  3243                           postinc2	equ	0xFDE
  3244                           fsr2h	equ	0xFDA
  3245                           fsr2l	equ	0xFD9
  3246                           status	equ	0xFD8
  3247                           
  3248 ;; *************** function _init_ports *****************
  3249 ;; Defined at:
  3250 ;;		line 154 in file "bibliotecas/hardware.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;		None
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;		None
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  1    wreg      void 
  3257 ;; Registers used:
  3258 ;;		wreg, status,2
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3264 ;;      Params:         0       0       0       0       0       0       0       0       0
  3265 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3266 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3267 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3268 ;;Total ram usage:        0 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    3
  3271 ;; This function calls:
  3272 ;;		Nothing
  3273 ;; This function is called by:
  3274 ;;		_init_hardware
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text10
  3279  005228                     __ptext10:
  3280                           	opt stack 0
  3281  005228                     _init_ports:
  3282                           	opt stack 26
  3283                           
  3284                           ;hardware.c: 156: ADCON1 = 0X0F;
  3285                           
  3286                           ;incstack = 0
  3287  005228  0E0F               	movlw	15
  3288  00522A  6EC1               	movwf	4033,c	;volatile
  3289                           
  3290                           ;hardware.c: 157: TRISB = 0b00100001;
  3291  00522C  0E21               	movlw	33
  3292  00522E  6E93               	movwf	3987,c	;volatile
  3293                           
  3294                           ;hardware.c: 158: LATB = 0xFF;
  3295  005230  688A               	setf	3978,c	;volatile
  3296                           
  3297                           ;hardware.c: 159: TRISD = 0x00;
  3298  005232  0E00               	movlw	0
  3299  005234  6E95               	movwf	3989,c	;volatile
  3300                           
  3301                           ;hardware.c: 160: TRISA = 0b00000111;
  3302  005236  0E07               	movlw	7
  3303  005238  6E92               	movwf	3986,c	;volatile
  3304                           
  3305                           ;hardware.c: 161: TRISC = 0x01111111;
  3306  00523A  0E11               	movlw	17
  3307  00523C  6E94               	movwf	3988,c	;volatile
  3308                           
  3309                           ;hardware.c: 162: TRISE = 0b00000011;
  3310  00523E  0E03               	movlw	3
  3311  005240  6E96               	movwf	3990,c	;volatile
  3312  005242  0012               	return		;funcret
  3313  005244                     __end_of_init_ports:
  3314                           	opt stack 0
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           postinc0	equ	0xFEE
  3322                           wreg	equ	0xFE8
  3323                           indf1	equ	0xFE7
  3324                           postdec1	equ	0xFE5
  3325                           fsr1h	equ	0xFE2
  3326                           fsr1l	equ	0xFE1
  3327                           indf2	equ	0xFDF
  3328                           postinc2	equ	0xFDE
  3329                           fsr2h	equ	0xFDA
  3330                           fsr2l	equ	0xFD9
  3331                           status	equ	0xFD8
  3332                           
  3333 ;; *************** function _init_oscilador *****************
  3334 ;; Defined at:
  3335 ;;		line 172 in file "bibliotecas/hardware.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;		None
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;		None
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      void 
  3342 ;; Registers used:
  3343 ;;		None
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3349 ;;      Params:         0       0       0       0       0       0       0       0       0
  3350 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3351 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3352 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3353 ;;Total ram usage:        0 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; Hardware stack levels required when called:    3
  3356 ;; This function calls:
  3357 ;;		Nothing
  3358 ;; This function is called by:
  3359 ;;		_init_hardware
  3360 ;; This function uses a non-reentrant model
  3361 ;;
  3362                           
  3363                           	psect	text11
  3364  00533C                     __ptext11:
  3365                           	opt stack 0
  3366  00533C                     _init_oscilador:
  3367                           	opt stack 26
  3368                           
  3369                           ;hardware.c: 175: OSCCONbits.IRCF0 = 1;
  3370                           
  3371                           ;incstack = 0
  3372  00533C  88D3               	bsf	4051,4,c	;volatile
  3373                           
  3374                           ;hardware.c: 176: OSCCONbits.IRCF1 = 1;
  3375  00533E  8AD3               	bsf	4051,5,c	;volatile
  3376                           
  3377                           ;hardware.c: 177: OSCCONbits.IRCF2 = 1;
  3378  005340  8CD3               	bsf	4051,6,c	;volatile
  3379  005342  0012               	return		;funcret
  3380  005344                     __end_of_init_oscilador:
  3381                           	opt stack 0
  3382                           tblptru	equ	0xFF8
  3383                           tblptrh	equ	0xFF7
  3384                           tblptrl	equ	0xFF6
  3385                           tablat	equ	0xFF5
  3386                           prodh	equ	0xFF4
  3387                           prodl	equ	0xFF3
  3388                           postinc0	equ	0xFEE
  3389                           wreg	equ	0xFE8
  3390                           indf1	equ	0xFE7
  3391                           postdec1	equ	0xFE5
  3392                           fsr1h	equ	0xFE2
  3393                           fsr1l	equ	0xFE1
  3394                           indf2	equ	0xFDF
  3395                           postinc2	equ	0xFDE
  3396                           fsr2h	equ	0xFDA
  3397                           fsr2l	equ	0xFD9
  3398                           status	equ	0xFD8
  3399                           
  3400 ;; *************** function _init_interrupt *****************
  3401 ;; Defined at:
  3402 ;;		line 98 in file "bibliotecas/hardware.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;		None
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;		None
  3407 ;; Return value:  Size  Location     Type
  3408 ;;                  1    wreg      void 
  3409 ;; Registers used:
  3410 ;;		wreg, status,2
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3416 ;;      Params:         0       0       0       0       0       0       0       0       0
  3417 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3418 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3419 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3420 ;;Total ram usage:        0 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; Hardware stack levels required when called:    3
  3423 ;; This function calls:
  3424 ;;		Nothing
  3425 ;; This function is called by:
  3426 ;;		_init_hardware
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text12
  3431  005288                     __ptext12:
  3432                           	opt stack 0
  3433  005288                     _init_interrupt:
  3434                           	opt stack 26
  3435                           
  3436                           ;hardware.c: 100: INTCON = 0b10110000;
  3437                           
  3438                           ;incstack = 0
  3439  005288  0EB0               	movlw	176
  3440  00528A  6EF2               	movwf	intcon,c	;volatile
  3441                           
  3442                           ;hardware.c: 101: INTCON2 = 0b00000000;
  3443  00528C  0E00               	movlw	0
  3444  00528E  6EF1               	movwf	intcon2,c	;volatile
  3445                           
  3446                           ;hardware.c: 102: INTCON3 = 0b00000000;
  3447  005290  0E00               	movlw	0
  3448  005292  6EF0               	movwf	intcon3,c	;volatile
  3449                           
  3450                           ;hardware.c: 104: PIE1 = 0b00101000;
  3451  005294  0E28               	movlw	40
  3452  005296  6E9D               	movwf	3997,c	;volatile
  3453  005298  0012               	return		;funcret
  3454  00529A                     __end_of_init_interrupt:
  3455                           	opt stack 0
  3456                           tblptru	equ	0xFF8
  3457                           tblptrh	equ	0xFF7
  3458                           tblptrl	equ	0xFF6
  3459                           tablat	equ	0xFF5
  3460                           prodh	equ	0xFF4
  3461                           prodl	equ	0xFF3
  3462                           intcon	equ	0xFF2
  3463                           intcon2	equ	0xFF1
  3464                           intcon3	equ	0xFF0
  3465                           postinc0	equ	0xFEE
  3466                           wreg	equ	0xFE8
  3467                           indf1	equ	0xFE7
  3468                           postdec1	equ	0xFE5
  3469                           fsr1h	equ	0xFE2
  3470                           fsr1l	equ	0xFE1
  3471                           indf2	equ	0xFDF
  3472                           postinc2	equ	0xFDE
  3473                           fsr2h	equ	0xFDA
  3474                           fsr2l	equ	0xFD9
  3475                           status	equ	0xFD8
  3476                           
  3477 ;; *************** function _config_timer_zero *****************
  3478 ;; Defined at:
  3479 ;;		line 83 in file "bibliotecas/hardware.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;		None
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;		None
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, cstack
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3493 ;;      Params:         0       0       0       0       0       0       0       0       0
  3494 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3495 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3496 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3497 ;;Total ram usage:        0 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    4
  3500 ;; This function calls:
  3501 ;;		_write_timer_zero
  3502 ;; This function is called by:
  3503 ;;		_init_hardware
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           	psect	text13
  3508  005244                     __ptext13:
  3509                           	opt stack 0
  3510  005244                     _config_timer_zero:
  3511                           	opt stack 25
  3512                           
  3513                           ;hardware.c: 85: T0CON = 0b11000011;
  3514                           
  3515                           ;incstack = 0
  3516  005244  0EC3               	movlw	195
  3517  005246  6ED5               	movwf	4053,c	;volatile
  3518                           
  3519                           ;hardware.c: 86: SPPCON = 0b00000000;
  3520  005248  0E00               	movlw	0
  3521  00524A  6E65               	movwf	3941,c	;volatile
  3522                           
  3523                           ;hardware.c: 87: SPPCFG = 0b00000000;
  3524  00524C  0E00               	movlw	0
  3525  00524E  6E63               	movwf	3939,c	;volatile
  3526                           
  3527                           ;hardware.c: 88: write_timer_zero(0x0083);
  3528  005250  0E00               	movlw	0
  3529  005252  6E22               	movwf	write_timer_zero@timer0+1,c
  3530  005254  0E83               	movlw	131
  3531  005256  6E21               	movwf	write_timer_zero@timer0,c
  3532  005258  EC4D  F029         	call	_write_timer_zero	;wreg free
  3533  00525C  0012               	return		;funcret
  3534  00525E                     __end_of_config_timer_zero:
  3535                           	opt stack 0
  3536                           tblptru	equ	0xFF8
  3537                           tblptrh	equ	0xFF7
  3538                           tblptrl	equ	0xFF6
  3539                           tablat	equ	0xFF5
  3540                           prodh	equ	0xFF4
  3541                           prodl	equ	0xFF3
  3542                           intcon	equ	0xFF2
  3543                           intcon2	equ	0xFF1
  3544                           intcon3	equ	0xFF0
  3545                           postinc0	equ	0xFEE
  3546                           wreg	equ	0xFE8
  3547                           indf1	equ	0xFE7
  3548                           postdec1	equ	0xFE5
  3549                           fsr1h	equ	0xFE2
  3550                           fsr1l	equ	0xFE1
  3551                           indf2	equ	0xFDF
  3552                           postinc2	equ	0xFDE
  3553                           fsr2h	equ	0xFDA
  3554                           fsr2l	equ	0xFD9
  3555                           status	equ	0xFD8
  3556                           
  3557 ;; *************** function _write_timer_zero *****************
  3558 ;; Defined at:
  3559 ;;		line 138 in file "bibliotecas/hardware.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;  timer0          2   32[COMRAM] unsigned int 
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  timer           2    0[BANK0 ] struct Timers
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  1    wreg      void 
  3566 ;; Registers used:
  3567 ;;		None
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3573 ;;      Params:         2       0       0       0       0       0       0       0       0
  3574 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3575 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3576 ;;      Totals:         2       2       0       0       0       0       0       0       0
  3577 ;;Total ram usage:        4 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    3
  3580 ;; This function calls:
  3581 ;;		Nothing
  3582 ;; This function is called by:
  3583 ;;		_config_timer_zero
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text14
  3588  00529A                     __ptext14:
  3589                           	opt stack 0
  3590  00529A                     _write_timer_zero:
  3591                           	opt stack 25
  3592                           
  3593                           ;hardware.c: 140: union Timers timer;
  3594                           ;hardware.c: 142: timer.lt = timer0;
  3595                           
  3596                           ;incstack = 0
  3597  00529A  C021  F060         	movff	write_timer_zero@timer0,write_timer_zero@timer
  3598  00529E  C022  F061         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  3599                           
  3600                           ;hardware.c: 144: TMR0H = timer.bt[1];
  3601  0052A2  C061  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  3602                           
  3603                           ;hardware.c: 145: TMR0L = timer.bt[0];
  3604  0052A6  C060  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  3605  0052AA  0012               	return		;funcret
  3606  0052AC                     __end_of_write_timer_zero:
  3607                           	opt stack 0
  3608                           tblptru	equ	0xFF8
  3609                           tblptrh	equ	0xFF7
  3610                           tblptrl	equ	0xFF6
  3611                           tablat	equ	0xFF5
  3612                           prodh	equ	0xFF4
  3613                           prodl	equ	0xFF3
  3614                           intcon	equ	0xFF2
  3615                           intcon2	equ	0xFF1
  3616                           intcon3	equ	0xFF0
  3617                           postinc0	equ	0xFEE
  3618                           wreg	equ	0xFE8
  3619                           indf1	equ	0xFE7
  3620                           postdec1	equ	0xFE5
  3621                           fsr1h	equ	0xFE2
  3622                           fsr1l	equ	0xFE1
  3623                           indf2	equ	0xFDF
  3624                           postinc2	equ	0xFDE
  3625                           fsr2h	equ	0xFDA
  3626                           fsr2l	equ	0xFD9
  3627                           status	equ	0xFD8
  3628                           
  3629 ;; *************** function _config_timer_dois *****************
  3630 ;; Defined at:
  3631 ;;		line 201 in file "bibliotecas/hardware.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;		None
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;		None
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  1    wreg      void 
  3638 ;; Registers used:
  3639 ;;		wreg, status,2
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3645 ;;      Params:         0       0       0       0       0       0       0       0       0
  3646 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3647 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3648 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3649 ;;Total ram usage:        0 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    3
  3652 ;; This function calls:
  3653 ;;		Nothing
  3654 ;; This function is called by:
  3655 ;;		_init_hardware
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           	psect	text15
  3660  0052F0                     __ptext15:
  3661                           	opt stack 0
  3662  0052F0                     _config_timer_dois:
  3663                           	opt stack 26
  3664                           
  3665                           ;hardware.c: 203: T2CON = 0b00000100;
  3666                           
  3667                           ;incstack = 0
  3668  0052F0  0E04               	movlw	4
  3669  0052F2  6ECA               	movwf	4042,c	;volatile
  3670                           
  3671                           ;hardware.c: 204: TMR2 = 0;
  3672  0052F4  0E00               	movlw	0
  3673  0052F6  6ECC               	movwf	4044,c	;volatile
  3674                           
  3675                           ;hardware.c: 205: PR2 = 0x01;
  3676  0052F8  0E01               	movlw	1
  3677  0052FA  6ECB               	movwf	4043,c	;volatile
  3678  0052FC  0012               	return		;funcret
  3679  0052FE                     __end_of_config_timer_dois:
  3680                           	opt stack 0
  3681                           tblptru	equ	0xFF8
  3682                           tblptrh	equ	0xFF7
  3683                           tblptrl	equ	0xFF6
  3684                           tablat	equ	0xFF5
  3685                           prodh	equ	0xFF4
  3686                           prodl	equ	0xFF3
  3687                           intcon	equ	0xFF2
  3688                           intcon2	equ	0xFF1
  3689                           intcon3	equ	0xFF0
  3690                           postinc0	equ	0xFEE
  3691                           wreg	equ	0xFE8
  3692                           indf1	equ	0xFE7
  3693                           postdec1	equ	0xFE5
  3694                           fsr1h	equ	0xFE2
  3695                           fsr1l	equ	0xFE1
  3696                           indf2	equ	0xFDF
  3697                           postinc2	equ	0xFDE
  3698                           fsr2h	equ	0xFDA
  3699                           fsr2l	equ	0xFD9
  3700                           status	equ	0xFD8
  3701                           
  3702 ;; *************** function _inicializa_tarefas *****************
  3703 ;; Defined at:
  3704 ;;		line 144 in file "main.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;		None
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;		None
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  1    wreg      void 
  3711 ;; Registers used:
  3712 ;;		wreg, status,2, status,0
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3718 ;;      Params:         0       0       0       0       0       0       0       0       0
  3719 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3720 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3721 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3722 ;;Total ram usage:        0 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; Hardware stack levels required when called:    3
  3725 ;; This function calls:
  3726 ;;		Nothing
  3727 ;; This function is called by:
  3728 ;;		_main
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text16
  3733  0050BA                     __ptext16:
  3734                           	opt stack 0
  3735  0050BA                     _inicializa_tarefas:
  3736                           	opt stack 27
  3737                           
  3738                           ;main.c: 147: p_tarefas[0] = escrita_sdcard;
  3739                           
  3740                           ;incstack = 0
  3741  0050BA  0E5C               	movlw	low _escrita_sdcard
  3742  0050BC  0100               	movlb	0	; () banked
  3743  0050BE  6FEC               	movwf	_p_tarefas& (0+255),b
  3744  0050C0  0E3E               	movlw	high _escrita_sdcard
  3745  0050C2  6FED               	movwf	(_p_tarefas+1)& (0+255),b
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;main.c: 154: tempo_backup[0] = 5000;
  3749  0050C4  0E13               	movlw	19
  3750  0050C6  6FE9               	movwf	(_tempo_backup+1)& (0+255),b
  3751  0050C8  0E88               	movlw	136
  3752  0050CA  6FE8               	movwf	_tempo_backup& (0+255),b
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;main.c: 155: tempo_backup[1] = 1000;
  3756  0050CC  0E03               	movlw	3
  3757  0050CE  6FEB               	movwf	(_tempo_backup+3)& (0+255),b
  3758  0050D0  0EE8               	movlw	232
  3759  0050D2  6FEA               	movwf	(_tempo_backup+2)& (0+255),b
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;main.c: 160: tempo_tarefa[0] = 5000;
  3763  0050D4  0E13               	movlw	19
  3764  0050D6  6E24               	movwf	_tempo_tarefa+1,c
  3765  0050D8  0E88               	movlw	136
  3766  0050DA  6E23               	movwf	_tempo_tarefa,c
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;main.c: 161: tempo_tarefa[1] = 1000;
  3770  0050DC  0E03               	movlw	3
  3771  0050DE  6E26               	movwf	_tempo_tarefa+3,c
  3772  0050E0  0EE8               	movlw	232
  3773  0050E2  6E25               	movwf	_tempo_tarefa+2,c
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;main.c: 165: tarefa_em_execucao = 0;
  3777  0050E4  0E00               	movlw	0
  3778  0050E6  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3779                           
  3780                           ; BSR set to: 0
  3781  0050E8  0012               	return		;funcret
  3782  0050EA                     __end_of_inicializa_tarefas:
  3783                           	opt stack 0
  3784                           tblptru	equ	0xFF8
  3785                           tblptrh	equ	0xFF7
  3786                           tblptrl	equ	0xFF6
  3787                           tablat	equ	0xFF5
  3788                           prodh	equ	0xFF4
  3789                           prodl	equ	0xFF3
  3790                           intcon	equ	0xFF2
  3791                           intcon2	equ	0xFF1
  3792                           intcon3	equ	0xFF0
  3793                           postinc0	equ	0xFEE
  3794                           wreg	equ	0xFE8
  3795                           indf1	equ	0xFE7
  3796                           postdec1	equ	0xFE5
  3797                           fsr1h	equ	0xFE2
  3798                           fsr1l	equ	0xFE1
  3799                           indf2	equ	0xFDF
  3800                           postinc2	equ	0xFDE
  3801                           fsr2h	equ	0xFDA
  3802                           fsr2l	equ	0xFD9
  3803                           status	equ	0xFD8
  3804                           
  3805 ;; *************** function _escalonador *****************
  3806 ;; Defined at:
  3807 ;;		line 176 in file "main.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;		None
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;  cont            1   62[BANK1 ] unsigned char 
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3821 ;;      Params:         0       0       0       0       0       0       0       0       0
  3822 ;;      Locals:         0       0       1       0       0       0       0       0       0
  3823 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3824 ;;      Totals:         0       0       3       0       0       0       0       0       0
  3825 ;;Total ram usage:        3 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:   16
  3828 ;; This function calls:
  3829 ;;		_escrita_sdcard
  3830 ;; This function is called by:
  3831 ;;		_main
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           	psect	text17
  3836  00420E                     __ptext17:
  3837                           	opt stack 0
  3838  00420E                     _escalonador:
  3839                           	opt stack 14
  3840                           
  3841                           ;main.c: 178: unsigned char cont;
  3842                           ;main.c: 179: for(cont = 0; cont<2;cont++)
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;incstack = 0
  3846  00420E  0E00               	movlw	0
  3847  004210  0101               	movlb	1	; () banked
  3848  004212  6FDA               	movwf	escalonador@cont& (0+255),b
  3849  004214                     l10747:
  3850                           
  3851                           ; BSR set to: 1
  3852  004214  0E01               	movlw	1
  3853  004216  65DA               	cpfsgt	escalonador@cont& (0+255),b
  3854  004218  D001               	goto	l81
  3855  00421A  0012               	return	
  3856  00421C                     l81:
  3857                           
  3858                           ; BSR set to: 1
  3859                           ;main.c: 180: {
  3860                           ;main.c: 181: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3861                           
  3862                           ; BSR set to: 1
  3863  00421C  51DA               	movf	escalonador@cont& (0+255),w,b
  3864  00421E  0D02               	mullw	2
  3865  004220  0EEC               	movlw	low _p_tarefas
  3866  004222  24F3               	addwf	prodl,w,c
  3867  004224  6ED9               	movwf	fsr2l,c
  3868  004226  0E00               	movlw	high _p_tarefas
  3869  004228  20F4               	addwfc	prodh,w,c
  3870  00422A  6EDA               	movwf	fsr2h,c
  3871  00422C  50DE               	movf	postinc2,w,c
  3872  00422E  10DE               	iorwf	postinc2,w,c
  3873  004230  B4D8               	btfsc	status,2,c
  3874  004232  D03D               	goto	l83
  3875                           
  3876                           ; BSR set to: 1
  3877  004234  51DA               	movf	escalonador@cont& (0+255),w,b
  3878  004236  0D02               	mullw	2
  3879  004238  0E23               	movlw	low _tempo_tarefa
  3880  00423A  24F3               	addwf	prodl,w,c
  3881  00423C  6ED9               	movwf	fsr2l,c
  3882  00423E  0E00               	movlw	high _tempo_tarefa
  3883  004240  20F4               	addwfc	prodh,w,c
  3884  004242  6EDA               	movwf	fsr2h,c
  3885  004244  50DE               	movf	postinc2,w,c
  3886  004246  10DE               	iorwf	postinc2,w,c
  3887  004248  A4D8               	btfss	status,2,c
  3888  00424A  D031               	goto	l83
  3889                           
  3890                           ; BSR set to: 1
  3891                           ;main.c: 182: {
  3892                           ;main.c: 183: tarefa_em_execucao = 1;
  3893  00424C  0E01               	movlw	1
  3894  00424E  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3895                           
  3896                           ;main.c: 184: timeout_tarefa = 60000;
  3897  004250  0EEA               	movlw	234
  3898  004252  6E30               	movwf	_timeout_tarefa+1,c
  3899  004254  0E60               	movlw	96
  3900  004256  6E2F               	movwf	_timeout_tarefa,c
  3901                           
  3902                           ; BSR set to: 1
  3903                           ;main.c: 185: p_tarefas[cont]();
  3904  004258  51DA               	movf	escalonador@cont& (0+255),w,b
  3905  00425A  0D02               	mullw	2
  3906  00425C  0EEC               	movlw	low _p_tarefas
  3907  00425E  24F3               	addwf	prodl,w,c
  3908  004260  6ED9               	movwf	fsr2l,c
  3909  004262  0E00               	movlw	high _p_tarefas
  3910  004264  20F4               	addwfc	prodh,w,c
  3911  004266  6EDA               	movwf	fsr2h,c
  3912  004268  D801               	call	u13678
  3913  00426A  D00A               	goto	u13679
  3914  00426C                     u13678:
  3915  00426C  0005               	push	
  3916  00426E  6EFA               	movwf	pclath,c
  3917  004270  50DE               	movf	postinc2,w,c
  3918  004272  6EFD               	movwf	tosl,c
  3919  004274  50DE               	movf	postinc2,w,c
  3920  004276  6EFE               	movwf	tosh,c
  3921  004278  50F8               	movf	tblptru,w,c
  3922  00427A  6EFF               	movwf	tosu,c
  3923  00427C  50FA               	movf	pclath,w,c
  3924  00427E  0012               	return		;indir
  3925  004280                     u13679:
  3926                           
  3927                           ;main.c: 186: tarefa_em_execucao = 0;
  3928  004280  0E00               	movlw	0
  3929  004282  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3930                           
  3931                           ;main.c: 187: tempo_tarefa[cont] = tempo_backup[cont];
  3932  004284  0101               	movlb	1	; () banked
  3933  004286  51DA               	movf	escalonador@cont& (0+255),w,b
  3934  004288  0D02               	mullw	2
  3935  00428A  0EE8               	movlw	low _tempo_backup
  3936  00428C  24F3               	addwf	prodl,w,c
  3937  00428E  6ED9               	movwf	fsr2l,c
  3938  004290  0E00               	movlw	high _tempo_backup
  3939  004292  20F4               	addwfc	prodh,w,c
  3940  004294  6EDA               	movwf	fsr2h,c
  3941  004296  51DA               	movf	escalonador@cont& (0+255),w,b
  3942  004298  0D02               	mullw	2
  3943  00429A  0E23               	movlw	low _tempo_tarefa
  3944  00429C  24F3               	addwf	prodl,w,c
  3945  00429E  6EE1               	movwf	fsr1l,c
  3946  0042A0  0E00               	movlw	high _tempo_tarefa
  3947  0042A2  20F4               	addwfc	prodh,w,c
  3948  0042A4  6EE2               	movwf	fsr1h,c
  3949  0042A6  CFDE FFE6          	movff	postinc2,postinc1
  3950  0042AA  CFDD FFE5          	movff	postdec2,postdec1
  3951  0042AE                     l83:
  3952                           
  3953                           ; BSR set to: 1
  3954                           
  3955                           ; BSR set to: 1
  3956  0042AE  2BDA               	incf	escalonador@cont& (0+255),f,b
  3957  0042B0  D7B1               	goto	l10747
  3958  0042B2                     __end_of_escalonador:
  3959                           	opt stack 0
  3960                           tosu	equ	0xFFF
  3961                           tosh	equ	0xFFE
  3962                           tosl	equ	0xFFD
  3963                           pclath	equ	0xFFA
  3964                           tblptru	equ	0xFF8
  3965                           tblptrh	equ	0xFF7
  3966                           tblptrl	equ	0xFF6
  3967                           tablat	equ	0xFF5
  3968                           prodh	equ	0xFF4
  3969                           prodl	equ	0xFF3
  3970                           intcon	equ	0xFF2
  3971                           intcon2	equ	0xFF1
  3972                           intcon3	equ	0xFF0
  3973                           postinc0	equ	0xFEE
  3974                           wreg	equ	0xFE8
  3975                           indf1	equ	0xFE7
  3976                           postinc1	equ	0xFE6
  3977                           postdec1	equ	0xFE5
  3978                           fsr1h	equ	0xFE2
  3979                           fsr1l	equ	0xFE1
  3980                           indf2	equ	0xFDF
  3981                           postinc2	equ	0xFDE
  3982                           postdec2	equ	0xFDD
  3983                           fsr2h	equ	0xFDA
  3984                           fsr2l	equ	0xFD9
  3985                           status	equ	0xFD8
  3986                           
  3987 ;; *************** function _escrita_sdcard *****************
  3988 ;; Defined at:
  3989 ;;		line 205 in file "bibliotecas/SDCard.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;		None
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;  i               1    0        unsigned char 
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  1    wreg      void 
  3996 ;; Registers used:
  3997 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4003 ;;      Params:         0       0       0       0       0       0       0       0       0
  4004 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4005 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4006 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4007 ;;Total ram usage:        0 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:   15
  4010 ;; This function calls:
  4011 ;;		_desliga_SPI
  4012 ;;		_desliga_uart
  4013 ;;		_escreve_frase_ram_lcd
  4014 ;;		_escreve_inteiro_lcd
  4015 ;;		_f_close
  4016 ;;		_f_lseek
  4017 ;;		_f_mount
  4018 ;;		_f_open
  4019 ;;		_fprintf
  4020 ;;		_inicializa_SPI
  4021 ;;		_inicializa_uart
  4022 ;;		_posicao_cursor_lcd
  4023 ;; This function is called by:
  4024 ;;		_inicializa_tarefas
  4025 ;;		_escalonador
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029                           	psect	text18
  4030  003E5C                     __ptext18:
  4031                           	opt stack 0
  4032  003E5C                     _escrita_sdcard:
  4033                           	opt stack 14
  4034                           
  4035                           ;SDCard.c: 207: unsigned char i;
  4036                           ;SDCard.c: 208: static unsigned char flag;
  4037                           ;SDCard.c: 209: PORTBbits.RB3 = 0;
  4038                           
  4039                           ; BSR set to: 1
  4040                           ;incstack = 0
  4041  003E5C  9681               	bcf	3969,3,c	;volatile
  4042                           
  4043                           ;SDCard.c: 211: desliga_uart();
  4044  003E5E  EC7F  F029         	call	_desliga_uart	;wreg free
  4045                           
  4046                           ;SDCard.c: 212: inicializa_SPI();
  4047  003E62  EC04  F029         	call	_inicializa_SPI	;wreg free
  4048                           
  4049                           ;SDCard.c: 213: f_mount(0,&fs);
  4050  003E66  0EE9               	movlw	low _fs
  4051  003E68  6E21               	movwf	f_mount@fs,c
  4052  003E6A  0E01               	movlw	high _fs
  4053  003E6C  6E22               	movwf	f_mount@fs+1,c
  4054  003E6E  0E00               	movlw	0
  4055  003E70  EC6A  F026         	call	_f_mount
  4056                           
  4057                           ;SDCard.c: 216: if(data_hoje)
  4058  003E74  5035               	movf	_data_hoje,w,c
  4059  003E76  B4D8               	btfsc	status,2,c
  4060  003E78  D05A               	goto	l265
  4061                           
  4062                           ;SDCard.c: 217: {
  4063                           ;SDCard.c: 218: if (f_open(&fil, filename, 0x10 | 0x02 ) == FR_OK)
  4064  003E7A  0E2C               	movlw	low _fil
  4065  003E7C  0100               	movlb	0	; () banked
  4066  003E7E  6FD7               	movwf	f_open@fp& (0+255),b
  4067  003E80  0E01               	movlw	high _fil
  4068  003E82  6FD8               	movwf	(f_open@fp+1)& (0+255),b
  4069  003E84  0E48               	movlw	low _filename
  4070  003E86  6FD9               	movwf	f_open@path& (0+255),b
  4071  003E88  0E01               	movlw	high _filename
  4072  003E8A  6FDA               	movwf	(f_open@path+1)& (0+255),b
  4073  003E8C  0E12               	movlw	18
  4074  003E8E  6FDB               	movwf	f_open@mode& (0+255),b
  4075  003E90  ECDF  F00D         	call	_f_open	;wreg free
  4076  003E94  0900               	iorlw	0
  4077  003E96  A4D8               	btfss	status,2,c
  4078  003E98  D04A               	goto	l265
  4079                           
  4080                           ;SDCard.c: 219: {
  4081                           ;SDCard.c: 221: f_lseek(&fil, ((&fil)->fsize));
  4082  003E9A  0E2C               	movlw	low _fil
  4083  003E9C  0100               	movlb	0	; () banked
  4084  003E9E  6FC4               	movwf	f_lseek@fp& (0+255),b
  4085  003EA0  0E01               	movlw	high _fil
  4086  003EA2  6FC5               	movwf	(f_lseek@fp+1)& (0+255),b
  4087  003EA4  C136  F0C6         	movff	_fil+10,f_lseek@ofs
  4088  003EA8  C137  F0C7         	movff	_fil+11,f_lseek@ofs+1
  4089  003EAC  C138  F0C8         	movff	_fil+12,f_lseek@ofs+2
  4090  003EB0  C139  F0C9         	movff	_fil+13,f_lseek@ofs+3
  4091  003EB4  ECC8  F009         	call	_f_lseek	;wreg free
  4092                           
  4093                           ;SDCard.c: 222: posicao_cursor_lcd(2,0);
  4094  003EB8  0E00               	movlw	0
  4095  003EBA  0100               	movlb	0	; () banked
  4096  003EBC  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4097  003EBE  0E02               	movlw	2
  4098  003EC0  ECED  F023         	call	_posicao_cursor_lcd
  4099                           
  4100                           ;SDCard.c: 223: escreve_inteiro_lcd(((&fil)->fsize));
  4101  003EC4  C136  F078         	movff	_fil+10,escreve_inteiro_lcd@valor
  4102  003EC8  C137  F079         	movff	_fil+11,escreve_inteiro_lcd@valor+1
  4103  003ECC  ECCB  F027         	call	_escreve_inteiro_lcd	;wreg free
  4104                           
  4105                           ;SDCard.c: 224: posicao_cursor_lcd(1,0);
  4106  003ED0  0E00               	movlw	0
  4107  003ED2  0100               	movlb	0	; () banked
  4108  003ED4  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4109  003ED6  0E01               	movlw	1
  4110  003ED8  ECED  F023         	call	_posicao_cursor_lcd
  4111                           
  4112                           ;SDCard.c: 225: escreve_frase_ram_lcd(string_dado.hora);
  4113  003EDC  0E07               	movlw	low (_string_dado+7)
  4114  003EDE  0100               	movlb	0	; () banked
  4115  003EE0  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  4116  003EE2  0E01               	movlw	high (_string_dado+7)
  4117  003EE4  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4118  003EE6  EC19  F026         	call	_escreve_frase_ram_lcd	;wreg free
  4119                           
  4120                           ;SDCard.c: 226: fprintf(&fil, "\n%s ; %s ; %s ; %s ;", string_dado.hora, string_dado.dat
      +                          a,string_dado.LAT, string_dado.LONG);
  4121  003EEA  0E2C               	movlw	low _fil
  4122  003EEC  0101               	movlb	1	; () banked
  4123  003EEE  6FA7               	movwf	fprintf@fil& (0+255),b
  4124  003EF0  0E01               	movlw	high _fil
  4125  003EF2  6FA8               	movwf	(fprintf@fil+1)& (0+255),b
  4126  003EF4  0E23               	movlw	low STR_9
  4127  003EF6  6FA9               	movwf	fprintf@str& (0+255),b
  4128  003EF8  0E08               	movlw	high STR_9
  4129  003EFA  6FAA               	movwf	(fprintf@str+1)& (0+255),b
  4130  003EFC  0E07               	movlw	low (_string_dado+7)
  4131  003EFE  6FAB               	movwf	(?_fprintf+4)& (0+255),b
  4132  003F00  0E01               	movlw	high (_string_dado+7)
  4133  003F02  6FAC               	movwf	(?_fprintf+5)& (0+255),b
  4134  003F04  0E00               	movlw	low _string_dado
  4135  003F06  6FAD               	movwf	(?_fprintf+6)& (0+255),b
  4136  003F08  0E01               	movlw	high _string_dado
  4137  003F0A  6FAE               	movwf	(?_fprintf+7)& (0+255),b
  4138  003F0C  0E12               	movlw	low (_string_dado+18)
  4139  003F0E  6FAF               	movwf	(?_fprintf+8)& (0+255),b
  4140  003F10  0E01               	movlw	high (_string_dado+18)
  4141  003F12  6FB0               	movwf	(?_fprintf+9)& (0+255),b
  4142  003F14  0E1F               	movlw	low (_string_dado+31)
  4143  003F16  6FB1               	movwf	(?_fprintf+10)& (0+255),b
  4144  003F18  0E01               	movlw	high (_string_dado+31)
  4145  003F1A  6FB2               	movwf	(?_fprintf+11)& (0+255),b
  4146  003F1C  EC0D  F00C         	call	_fprintf	;wreg free
  4147                           
  4148                           ;SDCard.c: 229: f_close(&fil);
  4149  003F20  0E2C               	movlw	low _fil
  4150  003F22  0100               	movlb	0	; () banked
  4151  003F24  6FAB               	movwf	f_close@fp& (0+255),b
  4152  003F26  0E01               	movlw	high _fil
  4153  003F28  6FAC               	movwf	(f_close@fp+1)& (0+255),b
  4154  003F2A  ECA2  F028         	call	_f_close	;wreg free
  4155  003F2E                     l265:
  4156                           
  4157                           ;SDCard.c: 230: }
  4158                           ;SDCard.c: 231: }
  4159                           ;SDCard.c: 232: PORTBbits.RB3 = 1;
  4160  003F2E  8681               	bsf	3969,3,c	;volatile
  4161                           
  4162                           ;SDCard.c: 233: desliga_SPI();
  4163  003F30  EC98  F029         	call	_desliga_SPI	;wreg free
  4164                           
  4165                           ;SDCard.c: 234: inicializa_uart();
  4166  003F34  ECE0  F028         	call	_inicializa_uart	;wreg free
  4167  003F38  0012               	return	
  4168  003F3A                     __end_of_escrita_sdcard:
  4169                           	opt stack 0
  4170                           tosu	equ	0xFFF
  4171                           tosh	equ	0xFFE
  4172                           tosl	equ	0xFFD
  4173                           pclath	equ	0xFFA
  4174                           tblptru	equ	0xFF8
  4175                           tblptrh	equ	0xFF7
  4176                           tblptrl	equ	0xFF6
  4177                           tablat	equ	0xFF5
  4178                           prodh	equ	0xFF4
  4179                           prodl	equ	0xFF3
  4180                           intcon	equ	0xFF2
  4181                           intcon2	equ	0xFF1
  4182                           intcon3	equ	0xFF0
  4183                           postinc0	equ	0xFEE
  4184                           wreg	equ	0xFE8
  4185                           indf1	equ	0xFE7
  4186                           postinc1	equ	0xFE6
  4187                           postdec1	equ	0xFE5
  4188                           fsr1h	equ	0xFE2
  4189                           fsr1l	equ	0xFE1
  4190                           indf2	equ	0xFDF
  4191                           postinc2	equ	0xFDE
  4192                           postdec2	equ	0xFDD
  4193                           fsr2h	equ	0xFDA
  4194                           fsr2l	equ	0xFD9
  4195                           status	equ	0xFD8
  4196                           
  4197 ;; *************** function _inicializa_uart *****************
  4198 ;; Defined at:
  4199 ;;		line 206 in file "bibliotecas/uart.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;		None
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  1    wreg      void 
  4206 ;; Registers used:
  4207 ;;		wreg, status,2, status,0, cstack
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4213 ;;      Params:         0       0       0       0       0       0       0       0       0
  4214 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4215 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4216 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4217 ;;Total ram usage:        0 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    5
  4220 ;; This function calls:
  4221 ;;		_configura_baudrate_uart
  4222 ;; This function is called by:
  4223 ;;		_main
  4224 ;;		_escrita_sdcard
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text19
  4229  0051C0                     __ptext19:
  4230                           	opt stack 0
  4231  0051C0                     _inicializa_uart:
  4232                           	opt stack 25
  4233                           
  4234                           ;uart.c: 208: TRISCbits.RC6 = 0;
  4235                           
  4236                           ;incstack = 0
  4237  0051C0  9C94               	bcf	3988,6,c	;volatile
  4238                           
  4239                           ;uart.c: 209: TRISCbits.RC7 = 0;
  4240  0051C2  9E94               	bcf	3988,7,c	;volatile
  4241                           
  4242                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  4243  0051C4  0E80               	movlw	128
  4244  0051C6  0100               	movlb	0	; () banked
  4245  0051C8  6F6E               	movwf	configura_baudrate_uart@baudrate& (0+255),b
  4246  0051CA  0E25               	movlw	37
  4247  0051CC  6F6F               	movwf	(configura_baudrate_uart@baudrate+1)& (0+255),b
  4248  0051CE  0E00               	movlw	0
  4249  0051D0  6F70               	movwf	(configura_baudrate_uart@baudrate+2)& (0+255),b
  4250  0051D2  0E00               	movlw	0
  4251  0051D4  6F71               	movwf	(configura_baudrate_uart@baudrate+3)& (0+255),b
  4252  0051D6  EC7D  F01D         	call	_configura_baudrate_uart	;wreg free
  4253                           
  4254                           ;uart.c: 213: TXSTA = 0x20;
  4255  0051DA  0E20               	movlw	32
  4256  0051DC  6EAC               	movwf	4012,c	;volatile
  4257                           
  4258                           ;uart.c: 214: RCSTA = 0x90;
  4259  0051DE  0E90               	movlw	144
  4260  0051E0  6EAB               	movwf	4011,c	;volatile
  4261  0051E2  0012               	return		;funcret
  4262  0051E4                     __end_of_inicializa_uart:
  4263                           	opt stack 0
  4264                           tosu	equ	0xFFF
  4265                           tosh	equ	0xFFE
  4266                           tosl	equ	0xFFD
  4267                           pclath	equ	0xFFA
  4268                           tblptru	equ	0xFF8
  4269                           tblptrh	equ	0xFF7
  4270                           tblptrl	equ	0xFF6
  4271                           tablat	equ	0xFF5
  4272                           prodh	equ	0xFF4
  4273                           prodl	equ	0xFF3
  4274                           intcon	equ	0xFF2
  4275                           intcon2	equ	0xFF1
  4276                           intcon3	equ	0xFF0
  4277                           postinc0	equ	0xFEE
  4278                           wreg	equ	0xFE8
  4279                           indf1	equ	0xFE7
  4280                           postinc1	equ	0xFE6
  4281                           postdec1	equ	0xFE5
  4282                           fsr1h	equ	0xFE2
  4283                           fsr1l	equ	0xFE1
  4284                           indf2	equ	0xFDF
  4285                           postinc2	equ	0xFDE
  4286                           postdec2	equ	0xFDD
  4287                           fsr2h	equ	0xFDA
  4288                           fsr2l	equ	0xFD9
  4289                           status	equ	0xFD8
  4290                           
  4291 ;; *************** function _configura_baudrate_uart *****************
  4292 ;; Defined at:
  4293 ;;		line 50 in file "bibliotecas/uart.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;  baudrate        4   14[BANK0 ] const long 
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;  x               2   32[COMRAM] unsigned int 
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  1    wreg      unsigned char 
  4300 ;; Registers used:
  4301 ;;		wreg, status,2, status,0, cstack
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4307 ;;      Params:         0       4       0       0       0       0       0       0       0
  4308 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4309 ;;      Temps:          0       8       0       0       0       0       0       0       0
  4310 ;;      Totals:         2      12       0       0       0       0       0       0       0
  4311 ;;Total ram usage:       14 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; Hardware stack levels required when called:    4
  4314 ;; This function calls:
  4315 ;;		___aldiv
  4316 ;; This function is called by:
  4317 ;;		_inicializa_uart
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           	psect	text20
  4322  003AFA                     __ptext20:
  4323                           	opt stack 0
  4324  003AFA                     _configura_baudrate_uart:
  4325                           	opt stack 25
  4326                           
  4327                           ;uart.c: 52: unsigned int x;
  4328                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  4329                           
  4330                           ;incstack = 0
  4331  003AFA  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  4332  003AFE  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  4333  003B02  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  4334  003B06  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  4335  003B0A  0E06               	movlw	6
  4336  003B0C                     u12055:
  4337  003B0C  90D8               	bcf	status,0,c
  4338  003B0E  0100               	movlb	0	; () banked
  4339  003B10  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  4340  003B12  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  4341  003B14  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  4342  003B16  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  4343  003B18  2EE8               	decfsz	wreg,f,c
  4344  003B1A  D7F8               	goto	u12055
  4345  003B1C  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  4346  003B1E  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  4347  003B20  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  4348  003B22  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  4349  003B24  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  4350  003B26  0E00               	movlw	0
  4351  003B28  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  4352  003B2A  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  4353  003B2C  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  4354  003B2E  0E00               	movlw	0
  4355  003B30  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  4356  003B32  6F60               	movwf	___aldiv@dividend& (0+255),b
  4357  003B34  0E6C               	movlw	108
  4358  003B36  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  4359  003B38  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  4360  003B3A  0EDC               	movlw	220
  4361  003B3C  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  4362  003B3E  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  4363  003B40  0E02               	movlw	2
  4364  003B42  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  4365  003B44  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  4366  003B46  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  4367  003B4A  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  4368  003B4E  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  4369  003B52  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  4370  003B56  0E06               	movlw	6
  4371  003B58                     u12065:
  4372  003B58  90D8               	bcf	status,0,c
  4373  003B5A  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  4374  003B5C  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  4375  003B5E  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  4376  003B60  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  4377  003B62  2EE8               	decfsz	wreg,f,c
  4378  003B64  D7F9               	goto	u12065
  4379  003B66  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  4380  003B6A  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  4381  003B6E  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  4382  003B72  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  4383  003B76  EC9D  F01F         	call	___aldiv	;wreg free
  4384  003B7A  C060  F021         	movff	?___aldiv,configura_baudrate_uart@x
  4385  003B7E  C061  F022         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  4386                           
  4387                           ;uart.c: 55: if(x > 255)
  4388  003B82  0422               	decf	configura_baudrate_uart@x+1,w,c
  4389  003B84  A0D8               	btfss	status,0,c
  4390  003B86  D045               	goto	l772
  4391                           
  4392                           ;uart.c: 56: {
  4393                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  4394  003B88  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  4395  003B8C  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  4396  003B90  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  4397  003B94  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  4398  003B98  0E04               	movlw	4
  4399  003B9A                     u12085:
  4400  003B9A  90D8               	bcf	status,0,c
  4401  003B9C  0100               	movlb	0	; () banked
  4402  003B9E  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  4403  003BA0  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  4404  003BA2  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  4405  003BA4  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  4406  003BA6  2EE8               	decfsz	wreg,f,c
  4407  003BA8  D7F8               	goto	u12085
  4408  003BAA  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  4409  003BAC  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  4410  003BAE  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  4411  003BB0  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  4412  003BB2  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  4413  003BB4  0E00               	movlw	0
  4414  003BB6  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  4415  003BB8  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  4416  003BBA  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  4417  003BBC  0E00               	movlw	0
  4418  003BBE  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  4419  003BC0  6F60               	movwf	___aldiv@dividend& (0+255),b
  4420  003BC2  0E6C               	movlw	108
  4421  003BC4  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  4422  003BC6  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  4423  003BC8  0EDC               	movlw	220
  4424  003BCA  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  4425  003BCC  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  4426  003BCE  0E02               	movlw	2
  4427  003BD0  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  4428  003BD2  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  4429  003BD4  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  4430  003BD8  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  4431  003BDC  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  4432  003BE0  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  4433  003BE4  0E04               	movlw	4
  4434  003BE6                     u12095:
  4435  003BE6  90D8               	bcf	status,0,c
  4436  003BE8  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  4437  003BEA  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  4438  003BEC  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  4439  003BEE  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  4440  003BF0  2EE8               	decfsz	wreg,f,c
  4441  003BF2  D7F9               	goto	u12095
  4442  003BF4  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  4443  003BF8  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  4444  003BFC  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  4445  003C00  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  4446  003C04  EC9D  F01F         	call	___aldiv	;wreg free
  4447  003C08  C060  F021         	movff	?___aldiv,configura_baudrate_uart@x
  4448  003C0C  C061  F022         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  4449                           
  4450                           ;uart.c: 58: BRGH = 1;
  4451  003C10  84AC               	bsf	4012,2,c	;volatile
  4452  003C12                     l772:
  4453                           
  4454                           ;uart.c: 59: }
  4455                           ;uart.c: 60: if(x < 256)
  4456  003C12  0422               	decf	configura_baudrate_uart@x+1,w,c
  4457  003C14  B0D8               	btfsc	status,0,c
  4458  003C16  0012               	return	
  4459                           
  4460                           ;uart.c: 61: {
  4461                           ;uart.c: 62: SPBRG = x;
  4462  003C18  C021  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  4463                           
  4464                           ;uart.c: 63: SYNC = 0;
  4465  003C1C  98AC               	bcf	4012,4,c	;volatile
  4466                           
  4467                           ;uart.c: 64: SPEN = 1;
  4468  003C1E  8EAB               	bsf	4011,7,c	;volatile
  4469                           
  4470                           ;uart.c: 65: TRISCbits.RC7 = 1;
  4471  003C20  8E94               	bsf	3988,7,c	;volatile
  4472                           
  4473                           ;uart.c: 66: TRISCbits.RC6 = 0;
  4474  003C22  9C94               	bcf	3988,6,c	;volatile
  4475                           
  4476                           ;uart.c: 67: CREN = 1;
  4477  003C24  88AB               	bsf	4011,4,c	;volatile
  4478                           
  4479                           ;uart.c: 68: TXEN = 1;
  4480  003C26  8AAC               	bsf	4012,5,c	;volatile
  4481                           
  4482                           ;uart.c: 70: return (1);
  4483                           ;	Return value of _configura_baudrate_uart is never used
  4484  003C28  0012               	return	
  4485  003C2A                     __end_of_configura_baudrate_uart:
  4486                           	opt stack 0
  4487                           tosu	equ	0xFFF
  4488                           tosh	equ	0xFFE
  4489                           tosl	equ	0xFFD
  4490                           pclath	equ	0xFFA
  4491                           tblptru	equ	0xFF8
  4492                           tblptrh	equ	0xFF7
  4493                           tblptrl	equ	0xFF6
  4494                           tablat	equ	0xFF5
  4495                           prodh	equ	0xFF4
  4496                           prodl	equ	0xFF3
  4497                           intcon	equ	0xFF2
  4498                           intcon2	equ	0xFF1
  4499                           intcon3	equ	0xFF0
  4500                           postinc0	equ	0xFEE
  4501                           wreg	equ	0xFE8
  4502                           indf1	equ	0xFE7
  4503                           postinc1	equ	0xFE6
  4504                           postdec1	equ	0xFE5
  4505                           fsr1h	equ	0xFE2
  4506                           fsr1l	equ	0xFE1
  4507                           indf2	equ	0xFDF
  4508                           postinc2	equ	0xFDE
  4509                           postdec2	equ	0xFDD
  4510                           fsr2h	equ	0xFDA
  4511                           fsr2l	equ	0xFD9
  4512                           status	equ	0xFD8
  4513                           
  4514 ;; *************** function ___aldiv *****************
  4515 ;; Defined at:
  4516 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  dividend        4    0[BANK0 ] long 
  4519 ;;  divisor         4    4[BANK0 ] long 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  quotient        4   10[BANK0 ] long 
  4522 ;;  sign            1    9[BANK0 ] unsigned char 
  4523 ;;  counter         1    8[BANK0 ] unsigned char 
  4524 ;; Return value:  Size  Location     Type
  4525 ;;                  4    0[BANK0 ] long 
  4526 ;; Registers used:
  4527 ;;		wreg, status,2, status,0
  4528 ;; Tracked objects:
  4529 ;;		On entry : 0/0
  4530 ;;		On exit  : 0/0
  4531 ;;		Unchanged: 0/0
  4532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4533 ;;      Params:         0       8       0       0       0       0       0       0       0
  4534 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4535 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4536 ;;      Totals:         0      14       0       0       0       0       0       0       0
  4537 ;;Total ram usage:       14 bytes
  4538 ;; Hardware stack levels used:    1
  4539 ;; Hardware stack levels required when called:    3
  4540 ;; This function calls:
  4541 ;;		Nothing
  4542 ;; This function is called by:
  4543 ;;		_configura_baudrate_uart
  4544 ;; This function uses a non-reentrant model
  4545 ;;
  4546                           
  4547                           	psect	text21
  4548  003F3A                     __ptext21:
  4549                           	opt stack 0
  4550  003F3A                     ___aldiv:
  4551                           	opt stack 25
  4552                           
  4553                           ;incstack = 0
  4554  003F3A  0E00               	movlw	0
  4555  003F3C  0100               	movlb	0	; () banked
  4556  003F3E  6F69               	movwf	___aldiv@sign& (0+255),b
  4557                           
  4558                           ; BSR set to: 0
  4559  003F40  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  4560  003F42  D00A               	goto	l1391
  4561                           
  4562                           ; BSR set to: 0
  4563  003F44  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  4564  003F46  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  4565  003F48  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  4566  003F4A  6D64               	negf	___aldiv@divisor& (0+255),b
  4567  003F4C  0E00               	movlw	0
  4568  003F4E  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  4569  003F50  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  4570  003F52  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  4571                           
  4572                           ; BSR set to: 0
  4573  003F54  0E01               	movlw	1
  4574  003F56  6F69               	movwf	___aldiv@sign& (0+255),b
  4575  003F58                     l1391:
  4576                           
  4577                           ; BSR set to: 0
  4578                           
  4579                           ; BSR set to: 0
  4580  003F58  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  4581  003F5A  D00A               	goto	l1392
  4582                           
  4583                           ; BSR set to: 0
  4584  003F5C  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  4585  003F5E  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  4586  003F60  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  4587  003F62  6D60               	negf	___aldiv@dividend& (0+255),b
  4588  003F64  0E00               	movlw	0
  4589  003F66  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  4590  003F68  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  4591  003F6A  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  4592                           
  4593                           ; BSR set to: 0
  4594  003F6C  0E01               	movlw	1
  4595  003F6E  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  4596  003F70                     l1392:
  4597                           
  4598                           ; BSR set to: 0
  4599                           
  4600                           ; BSR set to: 0
  4601  003F70  0E00               	movlw	0
  4602  003F72  6F6A               	movwf	___aldiv@quotient& (0+255),b
  4603  003F74  0E00               	movlw	0
  4604  003F76  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  4605  003F78  0E00               	movlw	0
  4606  003F7A  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  4607  003F7C  0E00               	movlw	0
  4608  003F7E  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  4609                           
  4610                           ; BSR set to: 0
  4611  003F80  5164               	movf	___aldiv@divisor& (0+255),w,b
  4612  003F82  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  4613  003F84  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  4614  003F86  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  4615  003F88  B4D8               	btfsc	status,2,c
  4616  003F8A  D02A               	goto	l1399
  4617                           
  4618                           ; BSR set to: 0
  4619  003F8C  0E01               	movlw	1
  4620  003F8E  6F68               	movwf	___aldiv@counter& (0+255),b
  4621  003F90  D006               	goto	l1394
  4622  003F92                     
  4623                           ; BSR set to: 0
  4624                           
  4625                           ; BSR set to: 0
  4626  003F92  90D8               	bcf	status,0,c
  4627  003F94  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  4628  003F96  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  4629  003F98  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  4630  003F9A  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  4631  003F9C  2B68               	incf	___aldiv@counter& (0+255),f,b
  4632  003F9E                     l1394:
  4633                           
  4634                           ; BSR set to: 0
  4635                           
  4636                           ; BSR set to: 0
  4637  003F9E  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  4638  003FA0  D7F8               	goto	l1395
  4639  003FA2                     u11950:
  4640                           
  4641                           ; BSR set to: 0
  4642                           
  4643                           ; BSR set to: 0
  4644                           
  4645                           ; BSR set to: 0
  4646  003FA2  90D8               	bcf	status,0,c
  4647  003FA4  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  4648  003FA6  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  4649  003FA8  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  4650  003FAA  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  4651                           
  4652                           ; BSR set to: 0
  4653  003FAC  5164               	movf	___aldiv@divisor& (0+255),w,b
  4654  003FAE  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  4655  003FB0  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  4656  003FB2  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  4657  003FB4  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  4658  003FB6  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  4659  003FB8  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  4660  003FBA  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  4661  003FBC  A0D8               	btfss	status,0,c
  4662  003FBE  D009               	goto	l1398
  4663                           
  4664                           ; BSR set to: 0
  4665  003FC0  5164               	movf	___aldiv@divisor& (0+255),w,b
  4666  003FC2  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  4667  003FC4  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  4668  003FC6  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  4669  003FC8  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  4670  003FCA  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  4671  003FCC  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  4672  003FCE  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  4673                           
  4674                           ; BSR set to: 0
  4675  003FD0  816A               	bsf	___aldiv@quotient& (0+255),0,b
  4676  003FD2                     l1398:
  4677                           
  4678                           ; BSR set to: 0
  4679                           
  4680                           ; BSR set to: 0
  4681  003FD2  90D8               	bcf	status,0,c
  4682  003FD4  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  4683  003FD6  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  4684  003FD8  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  4685  003FDA  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  4686                           
  4687                           ; BSR set to: 0
  4688  003FDC  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  4689  003FDE  D7E1               	goto	u11950
  4690  003FE0                     l1399:
  4691                           
  4692                           ; BSR set to: 0
  4693                           
  4694                           ; BSR set to: 0
  4695                           
  4696                           ; BSR set to: 0
  4697  003FE0  5169               	movf	___aldiv@sign& (0+255),w,b
  4698  003FE2  B4D8               	btfsc	status,2,c
  4699  003FE4  D008               	goto	l1400
  4700                           
  4701                           ; BSR set to: 0
  4702  003FE6  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  4703  003FE8  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  4704  003FEA  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  4705  003FEC  6D6A               	negf	___aldiv@quotient& (0+255),b
  4706  003FEE  0E00               	movlw	0
  4707  003FF0  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  4708  003FF2  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  4709  003FF4  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  4710  003FF6                     l1400:
  4711                           
  4712                           ; BSR set to: 0
  4713                           
  4714                           ; BSR set to: 0
  4715  003FF6  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  4716  003FFA  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  4717  003FFE  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  4718  004002  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  4719  004006  0012               	return	
  4720  004008                     __end_of___aldiv:
  4721                           	opt stack 0
  4722                           tosu	equ	0xFFF
  4723                           tosh	equ	0xFFE
  4724                           tosl	equ	0xFFD
  4725                           pclath	equ	0xFFA
  4726                           tblptru	equ	0xFF8
  4727                           tblptrh	equ	0xFF7
  4728                           tblptrl	equ	0xFF6
  4729                           tablat	equ	0xFF5
  4730                           prodh	equ	0xFF4
  4731                           prodl	equ	0xFF3
  4732                           intcon	equ	0xFF2
  4733                           intcon2	equ	0xFF1
  4734                           intcon3	equ	0xFF0
  4735                           postinc0	equ	0xFEE
  4736                           wreg	equ	0xFE8
  4737                           indf1	equ	0xFE7
  4738                           postinc1	equ	0xFE6
  4739                           postdec1	equ	0xFE5
  4740                           fsr1h	equ	0xFE2
  4741                           fsr1l	equ	0xFE1
  4742                           indf2	equ	0xFDF
  4743                           postinc2	equ	0xFDE
  4744                           postdec2	equ	0xFDD
  4745                           fsr2h	equ	0xFDA
  4746                           fsr2l	equ	0xFD9
  4747                           status	equ	0xFD8
  4748                           
  4749 ;; *************** function _inicializa_SPI *****************
  4750 ;; Defined at:
  4751 ;;		line 49 in file "bibliotecas/SPI.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;		None
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;		None
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  1    wreg      void 
  4758 ;; Registers used:
  4759 ;;		wreg, status,2, status,0
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4765 ;;      Params:         0       0       0       0       0       0       0       0       0
  4766 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4767 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4768 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4769 ;;Total ram usage:        0 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; Hardware stack levels required when called:    3
  4772 ;; This function calls:
  4773 ;;		Nothing
  4774 ;; This function is called by:
  4775 ;;		_escrita_sdcard
  4776 ;;		_sdcard_init
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           	psect	text22
  4781  005208                     __ptext22:
  4782                           	opt stack 0
  4783  005208                     _inicializa_SPI:
  4784                           	opt stack 25
  4785                           
  4786                           ;SPI.c: 51: TRISBbits.RB1 = 0;
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;incstack = 0
  4790  005208  9293               	bcf	3987,1,c	;volatile
  4791                           
  4792                           ;SPI.c: 52: TRISBbits.RB4 = 0;
  4793  00520A  9893               	bcf	3987,4,c	;volatile
  4794                           
  4795                           ;SPI.c: 53: TRISBbits.RB0 = 1;
  4796  00520C  8093               	bsf	3987,0,c	;volatile
  4797                           
  4798                           ;SPI.c: 54: TRISCbits.RC7 = 0;
  4799  00520E  9E94               	bcf	3988,7,c	;volatile
  4800                           
  4801                           ;SPI.c: 56: LATBbits.LATB4 = 1;
  4802  005210  888A               	bsf	3978,4,c	;volatile
  4803                           
  4804                           ;SPI.c: 57: SSPSTAT &= 0x3F;
  4805  005212  0E3F               	movlw	63
  4806  005214  16C7               	andwf	4039,f,c	;volatile
  4807                           
  4808                           ;SPI.c: 58: SSPCON1 = 0x00;
  4809  005216  0E00               	movlw	0
  4810  005218  6EC6               	movwf	4038,c	;volatile
  4811                           
  4812                           ;SPI.c: 60: SSPSTATbits.SMP = 0;
  4813  00521A  9EC7               	bcf	4039,7,c	;volatile
  4814                           
  4815                           ;SPI.c: 61: SSPSTATbits.CKE = 1;
  4816  00521C  8CC7               	bsf	4039,6,c	;volatile
  4817                           
  4818                           ;SPI.c: 62: SSPCON1bits.CKP = 0;
  4819  00521E  98C6               	bcf	4038,4,c	;volatile
  4820                           
  4821                           ;SPI.c: 64: SSPCON1 = 0b00000011;
  4822  005220  0E03               	movlw	3
  4823  005222  6EC6               	movwf	4038,c	;volatile
  4824                           
  4825                           ;SPI.c: 66: SSPCON1bits.SSPEN = 1;
  4826  005224  8AC6               	bsf	4038,5,c	;volatile
  4827  005226  0012               	return		;funcret
  4828  005228                     __end_of_inicializa_SPI:
  4829                           	opt stack 0
  4830                           tosu	equ	0xFFF
  4831                           tosh	equ	0xFFE
  4832                           tosl	equ	0xFFD
  4833                           pclath	equ	0xFFA
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           intcon2	equ	0xFF1
  4842                           intcon3	equ	0xFF0
  4843                           postinc0	equ	0xFEE
  4844                           wreg	equ	0xFE8
  4845                           indf1	equ	0xFE7
  4846                           postinc1	equ	0xFE6
  4847                           postdec1	equ	0xFE5
  4848                           fsr1h	equ	0xFE2
  4849                           fsr1l	equ	0xFE1
  4850                           indf2	equ	0xFDF
  4851                           postinc2	equ	0xFDE
  4852                           postdec2	equ	0xFDD
  4853                           fsr2h	equ	0xFDA
  4854                           fsr2l	equ	0xFD9
  4855                           status	equ	0xFD8
  4856                           
  4857 ;; *************** function _fprintf *****************
  4858 ;; Defined at:
  4859 ;;		line 1808 in file "bibliotecas/tff.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  fil             2   11[BANK1 ] PTR struct _FIL
  4862 ;;		 -> fil(28), 
  4863 ;;  str             2   13[BANK1 ] PTR const unsigned char 
  4864 ;;		 -> STR_9(21), 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  s              16   25[BANK1 ] unsigned char [16]
  4867 ;;  val             4   49[BANK1 ] unsigned long 
  4868 ;;  i               2   57[BANK1 ] int 
  4869 ;;  cc              2   55[BANK1 ] int 
  4870 ;;  arp             2   53[BANK1 ] PTR void [1]
  4871 ;;		 -> ?_fprintf(2), 
  4872 ;;  w               2   45[BANK1 ] int 
  4873 ;;  res             2   41[BANK1 ] int 
  4874 ;;  c               1   59[BANK1 ] unsigned char 
  4875 ;;  r               1   48[BANK1 ] unsigned char 
  4876 ;;  f               1   47[BANK1 ] unsigned char 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  2   11[BANK1 ] int 
  4879 ;; Registers used:
  4880 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4886 ;;      Params:         0       0      12       0       0       0       0       0       0
  4887 ;;      Locals:         0       0      35       0       0       0       0       0       0
  4888 ;;      Temps:          0       0       2       0       0       0       0       0       0
  4889 ;;      Totals:         0       0      49       0       0       0       0       0       0
  4890 ;;Total ram usage:       49 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; Hardware stack levels required when called:   14
  4893 ;; This function calls:
  4894 ;;		___lldiv
  4895 ;;		___llmod
  4896 ;;		___wmul
  4897 ;;		_fputc
  4898 ;;		_fputs
  4899 ;; This function is called by:
  4900 ;;		_escrita_sdcard
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           	psect	text23
  4905  00181A                     __ptext23:
  4906                           	opt stack 0
  4907  00181A                     _fprintf:
  4908                           	opt stack 14
  4909                           
  4910                           ;tff.c: 1814: va_list arp;
  4911                           ;tff.c: 1815: UCHAR c, f, r;
  4912                           ;tff.c: 1816: ULONG val;
  4913                           ;tff.c: 1817: char s[16];
  4914                           ;tff.c: 1818: int i, w, res, cc;
  4915                           ;tff.c: 1821: *arp = __va_start();
  4916                           
  4917                           ;incstack = 0
  4918  00181A  0EAB               	movlw	low (?_fprintf+4)
  4919  00181C  0101               	movlb	1	; () banked
  4920  00181E  6FD1               	movwf	fprintf@arp& (0+255),b
  4921  001820  0E01               	movlw	high (?_fprintf+4)
  4922  001822  6FD2               	movwf	(fprintf@arp+1)& (0+255),b
  4923                           
  4924                           ; BSR set to: 1
  4925                           ;tff.c: 1823: for (cc = res = 0; cc != -1; res += cc) {
  4926  001824  0E00               	movlw	0
  4927  001826  6FC6               	movwf	(fprintf@res+1)& (0+255),b
  4928  001828  0E00               	movlw	0
  4929  00182A  6FC5               	movwf	fprintf@res& (0+255),b
  4930  00182C  C1C5  F1D3         	movff	fprintf@res,fprintf@cc
  4931  001830  C1C6  F1D4         	movff	fprintf@res+1,fprintf@cc+1
  4932                           
  4933                           ; BSR set to: 1
  4934  001834  29D3               	incf	fprintf@cc& (0+255),w,b
  4935  001836  E103               	bnz	l10397
  4936  001838  29D4               	incf	(fprintf@cc+1)& (0+255),w,b
  4937  00183A  B4D8               	btfsc	status,2,c
  4938  00183C  0012               	return	
  4939  00183E                     l10397:
  4940                           
  4941                           ; BSR set to: 1
  4942                           ;tff.c: 1824: c = *str++;
  4943  00183E  C1A9  FFF6         	movff	fprintf@str,tblptrl
  4944  001842  C1AA  FFF7         	movff	fprintf@str+1,tblptrh
  4945  001846                     	if	0	;tblptru may be non-zero
  4946  001846                     	endif
  4947  001846                     	if	0	;tblptru may be non-zero
  4948  001846                     	endif
  4949  001846  0008               	tblrd		*
  4950  001848  CFF5 F1D7          	movff	tablat,fprintf@c
  4951                           
  4952                           ; BSR set to: 1
  4953  00184C  4BA9               	infsnz	fprintf@str& (0+255),f,b
  4954  00184E  2BAA               	incf	(fprintf@str+1)& (0+255),f,b
  4955                           
  4956                           ; BSR set to: 1
  4957                           ;tff.c: 1825: if (c == 0) break;
  4958  001850  51D7               	movf	fprintf@c& (0+255),w,b
  4959  001852  B4D8               	btfsc	status,2,c
  4960  001854  0012               	return	
  4961                           
  4962                           ; BSR set to: 1
  4963                           ;tff.c: 1826: if (c != '%') {
  4964                           
  4965                           ; BSR set to: 1
  4966                           
  4967                           ; BSR set to: 1
  4968  001856  0E25               	movlw	37
  4969  001858  19D7               	xorwf	fprintf@c& (0+255),w,b
  4970  00185A  B4D8               	btfsc	status,2,c
  4971  00185C  D014               	goto	l1258
  4972                           
  4973                           ; BSR set to: 1
  4974                           ;tff.c: 1827: cc = fputc(c, fil);
  4975  00185E  C1D7  F19C         	movff	fprintf@c,fputc@chr
  4976  001862  6B9D               	clrf	(fputc@chr+1)& (0+255),b
  4977  001864  C1A7  F19E         	movff	fprintf@fil,fputc@fil
  4978  001868  C1A8  F19F         	movff	fprintf@fil+1,fputc@fil+1
  4979  00186C  EC69  F025         	call	_fputc	;wreg free
  4980  001870  C19C  F1D3         	movff	?_fputc,fprintf@cc
  4981  001874  C19D  F1D4         	movff	?_fputc+1,fprintf@cc+1
  4982                           
  4983                           ;tff.c: 1828: if (cc != -1) cc = 1;
  4984  001878  0101               	movlb	1	; () banked
  4985  00187A  29D3               	incf	fprintf@cc& (0+255),w,b
  4986  00187C  E103               	bnz	u13130
  4987  00187E  29D4               	incf	(fprintf@cc+1)& (0+255),w,b
  4988  001880  B4D8               	btfsc	status,2,c
  4989  001882  D194               	goto	l1260
  4990  001884                     u13130:
  4991  001884  D08A               	goto	u13200
  4992  001886                     l1258:
  4993                           
  4994                           ; BSR set to: 1
  4995                           ;tff.c: 1830: }
  4996                           ;tff.c: 1831: w = f = 0;
  4997                           
  4998                           ; BSR set to: 1
  4999  001886  0E00               	movlw	0
  5000  001888  6FCB               	movwf	fprintf@f& (0+255),b
  5001  00188A  C1CB  F1C9         	movff	fprintf@f,fprintf@w
  5002  00188E  6BCA               	clrf	(fprintf@w+1)& (0+255),b
  5003                           
  5004                           ; BSR set to: 1
  5005                           ;tff.c: 1832: c = *str++;
  5006  001890  C1A9  FFF6         	movff	fprintf@str,tblptrl
  5007  001894  C1AA  FFF7         	movff	fprintf@str+1,tblptrh
  5008  001898                     	if	0	;tblptru may be non-zero
  5009  001898                     	endif
  5010  001898                     	if	0	;tblptru may be non-zero
  5011  001898                     	endif
  5012  001898  0008               	tblrd		*
  5013  00189A  CFF5 F1D7          	movff	tablat,fprintf@c
  5014                           
  5015                           ; BSR set to: 1
  5016  00189E  4BA9               	infsnz	fprintf@str& (0+255),f,b
  5017  0018A0  2BAA               	incf	(fprintf@str+1)& (0+255),f,b
  5018                           
  5019                           ; BSR set to: 1
  5020                           ;tff.c: 1833: if (c == '0') {
  5021  0018A2  0E30               	movlw	48
  5022  0018A4  19D7               	xorwf	fprintf@c& (0+255),w,b
  5023  0018A6  A4D8               	btfss	status,2,c
  5024  0018A8  D029               	goto	l1262
  5025                           
  5026                           ; BSR set to: 1
  5027                           ;tff.c: 1834: f = 1; c = *str++;
  5028  0018AA  0E01               	movlw	1
  5029  0018AC  6FCB               	movwf	fprintf@f& (0+255),b
  5030  0018AE  D01D               	goto	l10429
  5031  0018B0                     
  5032                           ; BSR set to: 1
  5033                           ;tff.c: 1837: w = w * 10 + (c - '0');
  5034                           
  5035                           ; BSR set to: 1
  5036  0018B0  C1C9  F060         	movff	fprintf@w,___wmul@multiplier
  5037  0018B4  C1CA  F061         	movff	fprintf@w+1,___wmul@multiplier+1
  5038  0018B8  0E00               	movlw	0
  5039  0018BA  0100               	movlb	0	; () banked
  5040  0018BC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5041  0018BE  0E0A               	movlw	10
  5042  0018C0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5043  0018C2  ECB8  F028         	call	___wmul	;wreg free
  5044  0018C6  0101               	movlb	1	; () banked
  5045  0018C8  51D7               	movf	fprintf@c& (0+255),w,b
  5046  0018CA  6FB3               	movwf	??_fprintf& (0+255),b
  5047  0018CC  6BB4               	clrf	(??_fprintf+1)& (0+255),b
  5048  0018CE  0100               	movlb	0	; () banked
  5049  0018D0  5160               	movf	?___wmul& (0+255),w,b
  5050  0018D2  0101               	movlb	1	; () banked
  5051  0018D4  27B3               	addwf	??_fprintf& (0+255),f,b
  5052  0018D6  0100               	movlb	0	; () banked
  5053  0018D8  5161               	movf	(?___wmul+1)& (0+255),w,b
  5054  0018DA  0101               	movlb	1	; () banked
  5055  0018DC  23B4               	addwfc	(??_fprintf+1)& (0+255),f,b
  5056  0018DE  0ED0               	movlw	208
  5057  0018E0  25B3               	addwf	??_fprintf& (0+255),w,b
  5058  0018E2  6FC9               	movwf	fprintf@w& (0+255),b
  5059  0018E4  0EFF               	movlw	255
  5060  0018E6  21B4               	addwfc	(??_fprintf+1)& (0+255),w,b
  5061  0018E8  6FCA               	movwf	(fprintf@w+1)& (0+255),b
  5062  0018EA                     l10429:
  5063                           
  5064                           ; BSR set to: 1
  5065                           ;tff.c: 1838: c = *str++;
  5066  0018EA  C1A9  FFF6         	movff	fprintf@str,tblptrl
  5067  0018EE  C1AA  FFF7         	movff	fprintf@str+1,tblptrh
  5068  0018F2                     	if	0	;tblptru may be non-zero
  5069  0018F2                     	endif
  5070  0018F2                     	if	0	;tblptru may be non-zero
  5071  0018F2                     	endif
  5072  0018F2  0008               	tblrd		*
  5073  0018F4  CFF5 F1D7          	movff	tablat,fprintf@c
  5074                           
  5075                           ; BSR set to: 1
  5076  0018F8  4BA9               	infsnz	fprintf@str& (0+255),f,b
  5077  0018FA  2BAA               	incf	(fprintf@str+1)& (0+255),f,b
  5078  0018FC                     l1262:
  5079                           
  5080                           ; BSR set to: 1
  5081                           
  5082                           ; BSR set to: 1
  5083  0018FC  0E2F               	movlw	47
  5084  0018FE  65D7               	cpfsgt	fprintf@c& (0+255),b
  5085  001900  D003               	goto	u13160
  5086                           
  5087                           ; BSR set to: 1
  5088  001902  0E39               	movlw	57
  5089  001904  65D7               	cpfsgt	fprintf@c& (0+255),b
  5090  001906  D7D4               	goto	l1263
  5091  001908                     u13160:
  5092                           
  5093                           ; BSR set to: 1
  5094                           ;tff.c: 1839: }
  5095                           ;tff.c: 1840: if (c == 'l') {
  5096                           
  5097                           ; BSR set to: 1
  5098                           
  5099                           ; BSR set to: 1
  5100  001908  0E6C               	movlw	108
  5101  00190A  19D7               	xorwf	fprintf@c& (0+255),w,b
  5102  00190C  A4D8               	btfss	status,2,c
  5103  00190E  D00A               	goto	l1267
  5104                           
  5105                           ; BSR set to: 1
  5106                           ;tff.c: 1841: f |= 2; c = *str++;
  5107  001910  83CB               	bsf	fprintf@f& (0+255),1,b
  5108                           
  5109                           ; BSR set to: 1
  5110  001912  C1A9  FFF6         	movff	fprintf@str,tblptrl
  5111  001916  C1AA  FFF7         	movff	fprintf@str+1,tblptrh
  5112  00191A                     	if	0	;tblptru may be non-zero
  5113  00191A                     	endif
  5114  00191A                     	if	0	;tblptru may be non-zero
  5115  00191A                     	endif
  5116  00191A  0008               	tblrd		*
  5117  00191C  CFF5 F1D7          	movff	tablat,fprintf@c
  5118                           
  5119                           ; BSR set to: 1
  5120  001920  4BA9               	infsnz	fprintf@str& (0+255),f,b
  5121  001922  2BAA               	incf	(fprintf@str+1)& (0+255),f,b
  5122  001924                     l1267:
  5123                           
  5124                           ; BSR set to: 1
  5125                           ;tff.c: 1842: }
  5126                           ;tff.c: 1843: if (c == 's') {
  5127                           
  5128                           ; BSR set to: 1
  5129  001924  0E73               	movlw	115
  5130  001926  19D7               	xorwf	fprintf@c& (0+255),w,b
  5131  001928  A4D8               	btfss	status,2,c
  5132  00192A  D018               	goto	l1268
  5133                           
  5134                           ; BSR set to: 1
  5135                           ;tff.c: 1844: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  5136  00192C  C1D1  FFD9         	movff	fprintf@arp,fsr2l
  5137  001930  C1D2  FFDA         	movff	fprintf@arp+1,fsr2h
  5138  001934  CFDE F1A0          	movff	postinc2,fputs@str
  5139  001938  CFDD F1A1          	movff	postdec2,fputs@str+1
  5140  00193C  C1A7  F1A2         	movff	fprintf@fil,fputs@fil
  5141  001940  C1A8  F1A3         	movff	fprintf@fil+1,fputs@fil+1
  5142  001944  EC3B  F025         	call	_fputs	;wreg free
  5143  001948  C1A0  F1D3         	movff	?_fputs,fprintf@cc
  5144  00194C  C1A1  F1D4         	movff	?_fputs+1,fprintf@cc+1
  5145  001950  0E02               	movlw	2
  5146  001952  0101               	movlb	1	; () banked
  5147  001954  27D1               	addwf	fprintf@arp& (0+255),f,b
  5148  001956  0E00               	movlw	0
  5149  001958  23D2               	addwfc	(fprintf@arp+1)& (0+255),f,b
  5150                           
  5151                           ;tff.c: 1845: continue;
  5152  00195A  D128               	goto	l1260
  5153  00195C                     l1268:
  5154                           
  5155                           ; BSR set to: 1
  5156                           ;tff.c: 1846: }
  5157                           ;tff.c: 1847: if (c == 'c') {
  5158                           
  5159                           ; BSR set to: 1
  5160  00195C  0E63               	movlw	99
  5161  00195E  19D7               	xorwf	fprintf@c& (0+255),w,b
  5162  001960  A4D8               	btfss	status,2,c
  5163  001962  D020               	goto	l1269
  5164                           
  5165                           ; BSR set to: 1
  5166                           ;tff.c: 1848: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  5167  001964  C1D1  FFD9         	movff	fprintf@arp,fsr2l
  5168  001968  C1D2  FFDA         	movff	fprintf@arp+1,fsr2h
  5169  00196C  50DF               	movf	indf2,w,c
  5170  00196E  6FB3               	movwf	??_fprintf& (0+255),b
  5171  001970  51B3               	movf	??_fprintf& (0+255),w,b
  5172  001972  6F9C               	movwf	fputc@chr& (0+255),b
  5173  001974  6B9D               	clrf	(fputc@chr+1)& (0+255),b
  5174  001976  C1A7  F19E         	movff	fprintf@fil,fputc@fil
  5175  00197A  C1A8  F19F         	movff	fprintf@fil+1,fputc@fil+1
  5176  00197E  EC69  F025         	call	_fputc	;wreg free
  5177  001982  C19C  F1D3         	movff	?_fputc,fprintf@cc
  5178  001986  C19D  F1D4         	movff	?_fputc+1,fprintf@cc+1
  5179  00198A  0E02               	movlw	2
  5180  00198C  0101               	movlb	1	; () banked
  5181  00198E  27D1               	addwf	fprintf@arp& (0+255),f,b
  5182  001990  0E00               	movlw	0
  5183  001992  23D2               	addwfc	(fprintf@arp+1)& (0+255),f,b
  5184                           
  5185                           ; BSR set to: 1
  5186                           ;tff.c: 1849: if (cc != -1) cc = 1;
  5187  001994  29D3               	incf	fprintf@cc& (0+255),w,b
  5188  001996  E101               	bnz	u13200
  5189  001998  D772               	goto	L1
  5190  00199A                     u13200:
  5191                           
  5192                           ; BSR set to: 1
  5193  00199A  0E00               	movlw	0
  5194  00199C  6FD4               	movwf	(fprintf@cc+1)& (0+255),b
  5195  00199E  0E01               	movlw	1
  5196  0019A0  6FD3               	movwf	fprintf@cc& (0+255),b
  5197                           
  5198                           ; BSR set to: 1
  5199                           ;tff.c: 1850: continue;
  5200  0019A2  D104               	goto	l1260
  5201  0019A4                     l1269:
  5202                           
  5203                           ; BSR set to: 1
  5204                           ;tff.c: 1851: }
  5205                           ;tff.c: 1852: r = 0;
  5206                           
  5207                           ; BSR set to: 1
  5208  0019A4  0E00               	movlw	0
  5209  0019A6  6FCC               	movwf	fprintf@r& (0+255),b
  5210                           
  5211                           ; BSR set to: 1
  5212                           ;tff.c: 1853: if (c == 'd') r = 10;
  5213  0019A8  0E64               	movlw	100
  5214  0019AA  19D7               	xorwf	fprintf@c& (0+255),w,b
  5215  0019AC  A4D8               	btfss	status,2,c
  5216  0019AE  D002               	goto	l1271
  5217                           
  5218                           ; BSR set to: 1
  5219  0019B0  0E0A               	movlw	10
  5220  0019B2  6FCC               	movwf	fprintf@r& (0+255),b
  5221  0019B4                     l1271:
  5222                           
  5223                           ; BSR set to: 1
  5224                           ;tff.c: 1854: if (c == 'u') r = 10;
  5225                           
  5226                           ; BSR set to: 1
  5227  0019B4  0E75               	movlw	117
  5228  0019B6  19D7               	xorwf	fprintf@c& (0+255),w,b
  5229  0019B8  A4D8               	btfss	status,2,c
  5230  0019BA  D002               	goto	l1272
  5231                           
  5232                           ; BSR set to: 1
  5233  0019BC  0E0A               	movlw	10
  5234  0019BE  6FCC               	movwf	fprintf@r& (0+255),b
  5235  0019C0                     l1272:
  5236                           
  5237                           ; BSR set to: 1
  5238                           ;tff.c: 1855: if (c == 'X') r = 16;
  5239                           
  5240                           ; BSR set to: 1
  5241  0019C0  0E58               	movlw	88
  5242  0019C2  19D7               	xorwf	fprintf@c& (0+255),w,b
  5243  0019C4  A4D8               	btfss	status,2,c
  5244  0019C6  D002               	goto	l1273
  5245                           
  5246                           ; BSR set to: 1
  5247  0019C8  0E10               	movlw	16
  5248  0019CA  6FCC               	movwf	fprintf@r& (0+255),b
  5249  0019CC                     l1273:
  5250                           
  5251                           ; BSR set to: 1
  5252                           ;tff.c: 1856: if (r == 0) break;
  5253  0019CC  51CC               	movf	fprintf@r& (0+255),w,b
  5254  0019CE  B4D8               	btfsc	status,2,c
  5255  0019D0  0012               	return	
  5256                           
  5257                           ; BSR set to: 1
  5258                           ;tff.c: 1857: if (f & 2) {
  5259                           
  5260                           ; BSR set to: 1
  5261  0019D2  A3CB               	btfss	fprintf@f& (0+255),1,b
  5262  0019D4  D00E               	goto	l1275
  5263                           
  5264                           ; BSR set to: 1
  5265                           ;tff.c: 1858: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  5266  0019D6  C1D1  FFD9         	movff	fprintf@arp,fsr2l
  5267  0019DA  C1D2  FFDA         	movff	fprintf@arp+1,fsr2h
  5268  0019DE  CFDE F1CD          	movff	postinc2,fprintf@val
  5269  0019E2  CFDE F1CE          	movff	postinc2,fprintf@val+1
  5270  0019E6  CFDE F1CF          	movff	postinc2,fprintf@val+2
  5271  0019EA  CFDE F1D0          	movff	postinc2,fprintf@val+3
  5272                           
  5273                           ; BSR set to: 1
  5274  0019EE  0E04               	movlw	4
  5275  0019F0  D021               	goto	L5
  5276  0019F2                     l1275:
  5277                           
  5278                           ; BSR set to: 1
  5279                           ;tff.c: 1860: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  5280                           
  5281                           ; BSR set to: 1
  5282  0019F2  0E64               	movlw	100
  5283  0019F4  19D7               	xorwf	fprintf@c& (0+255),w,b
  5284  0019F6  B4D8               	btfsc	status,2,c
  5285  0019F8  D00F               	goto	l1278
  5286                           
  5287                           ; BSR set to: 1
  5288  0019FA  C1D1  FFD9         	movff	fprintf@arp,fsr2l
  5289  0019FE  C1D2  FFDA         	movff	fprintf@arp+1,fsr2h
  5290  001A02  CFDE F1B3          	movff	postinc2,??_fprintf
  5291  001A06  CFDD F1B4          	movff	postdec2,??_fprintf+1
  5292  001A0A  C1B3  F1CD         	movff	??_fprintf,fprintf@val
  5293  001A0E  C1B4  F1CE         	movff	??_fprintf+1,fprintf@val+1
  5294  001A12  6BCF               	clrf	(fprintf@val+2)& (0+255),b
  5295  001A14  6BD0               	clrf	(fprintf@val+3)& (0+255),b
  5296  001A16  D00D               	goto	l10489
  5297  001A18                     l1278:
  5298                           
  5299                           ; BSR set to: 1
  5300                           
  5301                           ; BSR set to: 1
  5302  001A18  C1D1  FFD9         	movff	fprintf@arp,fsr2l
  5303  001A1C  C1D2  FFDA         	movff	fprintf@arp+1,fsr2h
  5304  001A20  CFDE F1CD          	movff	postinc2,fprintf@val
  5305  001A24  CFDD F1CE          	movff	postdec2,fprintf@val+1
  5306  001A28  0E00               	movlw	0
  5307  001A2A  BFCE               	btfsc	(fprintf@val+1)& (0+255),7,b
  5308  001A2C  0EFF               	movlw	-1
  5309  001A2E  6FCF               	movwf	(fprintf@val+2)& (0+255),b
  5310  001A30  6FD0               	movwf	(fprintf@val+3)& (0+255),b
  5311  001A32                     l10489:
  5312                           
  5313                           ; BSR set to: 1
  5314  001A32  0E02               	movlw	2
  5315  001A34                     L5:
  5316  001A34  27D1               	addwf	fprintf@arp& (0+255),f,b
  5317  001A36  0E00               	movlw	0
  5318  001A38  23D2               	addwfc	(fprintf@arp+1)& (0+255),f,b
  5319                           
  5320                           ; BSR set to: 1
  5321                           ;tff.c: 1861: }
  5322                           ;tff.c: 1863: if (c == 'd') {
  5323                           
  5324                           ; BSR set to: 1
  5325                           
  5326                           ; BSR set to: 1
  5327  001A3A  0E64               	movlw	100
  5328  001A3C  19D7               	xorwf	fprintf@c& (0+255),w,b
  5329  001A3E  A4D8               	btfss	status,2,c
  5330  001A40  D00D               	goto	l1282
  5331                           
  5332                           ; BSR set to: 1
  5333                           ;tff.c: 1864: if (val >= 0x80000000) {
  5334  001A42  0E80               	movlw	128
  5335  001A44  5DD0               	subwf	(fprintf@val+3)& (0+255),w,b
  5336  001A46  A0D8               	btfss	status,0,c
  5337  001A48  D009               	goto	l1282
  5338                           
  5339                           ; BSR set to: 1
  5340                           ;tff.c: 1865: val = 0 - val;
  5341  001A4A  1FD0               	comf	(fprintf@val+3)& (0+255),f,b
  5342  001A4C  1FCF               	comf	(fprintf@val+2)& (0+255),f,b
  5343  001A4E  1FCE               	comf	(fprintf@val+1)& (0+255),f,b
  5344  001A50  6DCD               	negf	fprintf@val& (0+255),b
  5345  001A52  0E00               	movlw	0
  5346  001A54  23CE               	addwfc	(fprintf@val+1)& (0+255),f,b
  5347  001A56  23CF               	addwfc	(fprintf@val+2)& (0+255),f,b
  5348  001A58  23D0               	addwfc	(fprintf@val+3)& (0+255),f,b
  5349                           
  5350                           ;tff.c: 1866: f |= 4;
  5351  001A5A  85CB               	bsf	fprintf@f& (0+255),2,b
  5352  001A5C                     l1282:
  5353                           
  5354                           ; BSR set to: 1
  5355                           ;tff.c: 1867: }
  5356                           ;tff.c: 1868: }
  5357                           ;tff.c: 1869: i = sizeof(s) - 1; s[i] = 0;
  5358                           
  5359                           ; BSR set to: 1
  5360                           
  5361                           ; BSR set to: 1
  5362  001A5C  0E00               	movlw	0
  5363  001A5E  6FD6               	movwf	(fprintf@i+1)& (0+255),b
  5364  001A60  0E0F               	movlw	15
  5365  001A62  6FD5               	movwf	fprintf@i& (0+255),b
  5366                           
  5367                           ; BSR set to: 1
  5368  001A64  0EB5               	movlw	low fprintf@s
  5369  001A66  25D5               	addwf	fprintf@i& (0+255),w,b
  5370  001A68  6ED9               	movwf	fsr2l,c
  5371  001A6A  0E01               	movlw	high fprintf@s
  5372  001A6C  21D6               	addwfc	(fprintf@i+1)& (0+255),w,b
  5373  001A6E  6EDA               	movwf	fsr2h,c
  5374  001A70  0E00               	movlw	0
  5375  001A72  6EDF               	movwf	indf2,c
  5376  001A74                     
  5377                           ; BSR set to: 1
  5378                           ;tff.c: 1871: c = (UCHAR)(val % r + '0');
  5379                           
  5380                           ; BSR set to: 1
  5381  001A74  C1CD  F060         	movff	fprintf@val,___llmod@dividend
  5382  001A78  C1CE  F061         	movff	fprintf@val+1,___llmod@dividend+1
  5383  001A7C  C1CF  F062         	movff	fprintf@val+2,___llmod@dividend+2
  5384  001A80  C1D0  F063         	movff	fprintf@val+3,___llmod@dividend+3
  5385  001A84  51CC               	movf	fprintf@r& (0+255),w,b
  5386  001A86  0100               	movlb	0	; () banked
  5387  001A88  6F64               	movwf	___llmod@divisor& (0+255),b
  5388  001A8A  6B65               	clrf	(___llmod@divisor+1)& (0+255),b
  5389  001A8C  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
  5390  001A8E  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
  5391  001A90  ECA0  F024         	call	___llmod	;wreg free
  5392  001A94  0100               	movlb	0	; () banked
  5393  001A96  5160               	movf	?___llmod& (0+255),w,b
  5394  001A98  0F30               	addlw	48
  5395  001A9A  0101               	movlb	1	; () banked
  5396  001A9C  6FD7               	movwf	fprintf@c& (0+255),b
  5397                           
  5398                           ; BSR set to: 1
  5399                           ;tff.c: 1872: if (c > '9') c += 7;
  5400  001A9E  0E39               	movlw	57
  5401  001AA0  65D7               	cpfsgt	fprintf@c& (0+255),b
  5402  001AA2  D002               	goto	l1284
  5403                           
  5404                           ; BSR set to: 1
  5405  001AA4  0E07               	movlw	7
  5406  001AA6  27D7               	addwf	fprintf@c& (0+255),f,b
  5407  001AA8                     l1284:
  5408                           
  5409                           ; BSR set to: 1
  5410                           ;tff.c: 1873: s[--i] = c;
  5411                           
  5412                           ; BSR set to: 1
  5413  001AA8  07D5               	decf	fprintf@i& (0+255),f,b
  5414  001AAA  A0D8               	btfss	status,0,c
  5415  001AAC  07D6               	decf	(fprintf@i+1)& (0+255),f,b
  5416  001AAE  0EB5               	movlw	low fprintf@s
  5417  001AB0  25D5               	addwf	fprintf@i& (0+255),w,b
  5418  001AB2  6ED9               	movwf	fsr2l,c
  5419  001AB4  0E01               	movlw	high fprintf@s
  5420  001AB6  21D6               	addwfc	(fprintf@i+1)& (0+255),w,b
  5421  001AB8  6EDA               	movwf	fsr2h,c
  5422  001ABA  C1D7  FFDF         	movff	fprintf@c,indf2
  5423                           
  5424                           ; BSR set to: 1
  5425                           ;tff.c: 1874: val /= r;
  5426  001ABE  C1CD  F060         	movff	fprintf@val,___lldiv@dividend
  5427  001AC2  C1CE  F061         	movff	fprintf@val+1,___lldiv@dividend+1
  5428  001AC6  C1CF  F062         	movff	fprintf@val+2,___lldiv@dividend+2
  5429  001ACA  C1D0  F063         	movff	fprintf@val+3,___lldiv@dividend+3
  5430  001ACE  51CC               	movf	fprintf@r& (0+255),w,b
  5431  001AD0  0100               	movlb	0	; () banked
  5432  001AD2  6F64               	movwf	___lldiv@divisor& (0+255),b
  5433  001AD4  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
  5434  001AD6  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
  5435  001AD8  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
  5436  001ADA  ECAB  F023         	call	___lldiv	;wreg free
  5437  001ADE  C060  F1CD         	movff	?___lldiv,fprintf@val
  5438  001AE2  C061  F1CE         	movff	?___lldiv+1,fprintf@val+1
  5439  001AE6  C062  F1CF         	movff	?___lldiv+2,fprintf@val+2
  5440  001AEA  C063  F1D0         	movff	?___lldiv+3,fprintf@val+3
  5441                           
  5442                           ;tff.c: 1875: } while (i && val);
  5443  001AEE  0101               	movlb	1	; () banked
  5444  001AF0  51D5               	movf	fprintf@i& (0+255),w,b
  5445  001AF2  11D6               	iorwf	(fprintf@i+1)& (0+255),w,b
  5446  001AF4  B4D8               	btfsc	status,2,c
  5447  001AF6  D006               	goto	u13310
  5448                           
  5449                           ; BSR set to: 1
  5450  001AF8  51CD               	movf	fprintf@val& (0+255),w,b
  5451  001AFA  11CE               	iorwf	(fprintf@val+1)& (0+255),w,b
  5452  001AFC  11CF               	iorwf	(fprintf@val+2)& (0+255),w,b
  5453  001AFE  11D0               	iorwf	(fprintf@val+3)& (0+255),w,b
  5454  001B00  A4D8               	btfss	status,2,c
  5455  001B02  D7B8               	goto	l1283
  5456  001B04                     u13310:
  5457                           
  5458                           ; BSR set to: 1
  5459                           ;tff.c: 1876: if (i && (f & 4)) s[--i] = '-';
  5460                           
  5461                           ; BSR set to: 1
  5462                           
  5463                           ; BSR set to: 1
  5464  001B04  51D5               	movf	fprintf@i& (0+255),w,b
  5465  001B06  11D6               	iorwf	(fprintf@i+1)& (0+255),w,b
  5466  001B08  A4D8               	btfss	status,2,c
  5467                           
  5468                           ; BSR set to: 1
  5469  001B0A  A5CB               	btfss	fprintf@f& (0+255),2,b
  5470  001B0C  D00B               	goto	l1288
  5471                           
  5472                           ; BSR set to: 1
  5473  001B0E  07D5               	decf	fprintf@i& (0+255),f,b
  5474  001B10  A0D8               	btfss	status,0,c
  5475  001B12  07D6               	decf	(fprintf@i+1)& (0+255),f,b
  5476  001B14  0EB5               	movlw	low fprintf@s
  5477  001B16  25D5               	addwf	fprintf@i& (0+255),w,b
  5478  001B18  6ED9               	movwf	fsr2l,c
  5479  001B1A  0E01               	movlw	high fprintf@s
  5480  001B1C  21D6               	addwfc	(fprintf@i+1)& (0+255),w,b
  5481  001B1E  6EDA               	movwf	fsr2h,c
  5482  001B20  0E2D               	movlw	45
  5483  001B22  6EDF               	movwf	indf2,c
  5484  001B24                     l1288:
  5485                           
  5486                           ; BSR set to: 1
  5487                           ;tff.c: 1877: w = sizeof(s) - 1 - w;
  5488                           
  5489                           ; BSR set to: 1
  5490  001B24  0E01               	movlw	1
  5491  001B26  25C9               	addwf	fprintf@w& (0+255),w,b
  5492  001B28  6FB3               	movwf	??_fprintf& (0+255),b
  5493  001B2A  0E00               	movlw	0
  5494  001B2C  21CA               	addwfc	(fprintf@w+1)& (0+255),w,b
  5495  001B2E  6FB4               	movwf	(??_fprintf+1)& (0+255),b
  5496  001B30  1FB3               	comf	??_fprintf& (0+255),f,b
  5497  001B32  1FB4               	comf	(??_fprintf+1)& (0+255),f,b
  5498  001B34  4BB3               	infsnz	??_fprintf& (0+255),f,b
  5499  001B36  2BB4               	incf	(??_fprintf+1)& (0+255),f,b
  5500  001B38  0E10               	movlw	16
  5501  001B3A  25B3               	addwf	??_fprintf& (0+255),w,b
  5502  001B3C  6FC9               	movwf	fprintf@w& (0+255),b
  5503  001B3E  0E00               	movlw	0
  5504  001B40  21B4               	addwfc	(??_fprintf+1)& (0+255),w,b
  5505  001B42  6FCA               	movwf	(fprintf@w+1)& (0+255),b
  5506                           
  5507                           ;tff.c: 1878: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
  5508  001B44  D015               	goto	l1289
  5509  001B46                     l1290:
  5510                           
  5511                           ; BSR set to: 1
  5512  001B46  B1CB               	btfsc	fprintf@f& (0+255),0,b
  5513  001B48  D004               	goto	l1292
  5514                           
  5515                           ; BSR set to: 1
  5516  001B4A  0E00               	movlw	0
  5517  001B4C  6FC8               	movwf	(_fprintf$2426+1)& (0+255),b
  5518  001B4E  0E20               	movlw	32
  5519  001B50  D003               	goto	L3
  5520  001B52                     l1292:
  5521                           
  5522                           ; BSR set to: 1
  5523                           
  5524                           ; BSR set to: 1
  5525  001B52  0E00               	movlw	0
  5526  001B54  6FC8               	movwf	(_fprintf$2426+1)& (0+255),b
  5527  001B56  0E30               	movlw	48
  5528  001B58                     L3:
  5529  001B58  6FC7               	movwf	_fprintf$2426& (0+255),b
  5530                           
  5531                           ; BSR set to: 1
  5532                           
  5533                           ; BSR set to: 1
  5534  001B5A  07D5               	decf	fprintf@i& (0+255),f,b
  5535  001B5C  A0D8               	btfss	status,0,c
  5536  001B5E  07D6               	decf	(fprintf@i+1)& (0+255),f,b
  5537  001B60  0EB5               	movlw	low fprintf@s
  5538  001B62  25D5               	addwf	fprintf@i& (0+255),w,b
  5539  001B64  6ED9               	movwf	fsr2l,c
  5540  001B66  0E01               	movlw	high fprintf@s
  5541  001B68  21D6               	addwfc	(fprintf@i+1)& (0+255),w,b
  5542  001B6A  6EDA               	movwf	fsr2h,c
  5543  001B6C  C1C7  FFDF         	movff	_fprintf$2426,indf2
  5544  001B70                     l1289:
  5545                           
  5546                           ; BSR set to: 1
  5547                           
  5548                           ; BSR set to: 1
  5549  001B70  51D5               	movf	fprintf@i& (0+255),w,b
  5550  001B72  11D6               	iorwf	(fprintf@i+1)& (0+255),w,b
  5551  001B74  B4D8               	btfsc	status,2,c
  5552  001B76  D00A               	goto	u13360
  5553                           
  5554                           ; BSR set to: 1
  5555  001B78  51D5               	movf	fprintf@i& (0+255),w,b
  5556  001B7A  5DC9               	subwf	fprintf@w& (0+255),w,b
  5557  001B7C  51CA               	movf	(fprintf@w+1)& (0+255),w,b
  5558  001B7E  0A80               	xorlw	128
  5559  001B80  6FB3               	movwf	??_fprintf& (0+255),b
  5560  001B82  51D6               	movf	(fprintf@i+1)& (0+255),w,b
  5561  001B84  0A80               	xorlw	128
  5562  001B86  59B3               	subwfb	??_fprintf& (0+255),w,b
  5563  001B88  A0D8               	btfss	status,0,c
  5564  001B8A  D7DD               	goto	l1290
  5565  001B8C                     u13360:
  5566                           
  5567                           ; BSR set to: 1
  5568                           ;tff.c: 1879: cc = fputs(&s[i], fil);
  5569                           
  5570                           ; BSR set to: 1
  5571                           
  5572                           ; BSR set to: 1
  5573  001B8C  0EB5               	movlw	low fprintf@s
  5574  001B8E  25D5               	addwf	fprintf@i& (0+255),w,b
  5575  001B90  6FA0               	movwf	fputs@str& (0+255),b
  5576  001B92  0E01               	movlw	high fprintf@s
  5577  001B94  21D6               	addwfc	(fprintf@i+1)& (0+255),w,b
  5578  001B96  6FA1               	movwf	(fputs@str+1)& (0+255),b
  5579  001B98  C1A7  F1A2         	movff	fprintf@fil,fputs@fil
  5580  001B9C  C1A8  F1A3         	movff	fprintf@fil+1,fputs@fil+1
  5581  001BA0  EC3B  F025         	call	_fputs	;wreg free
  5582  001BA4  C1A0  F1D3         	movff	?_fputs,fprintf@cc
  5583  001BA8  C1A1  F1D4         	movff	?_fputs+1,fprintf@cc+1
  5584  001BAC                     l1260:
  5585  001BAC  0101               	movlb	1	; () banked
  5586  001BAE  51D3               	movf	fprintf@cc& (0+255),w,b
  5587  001BB0  27C5               	addwf	fprintf@res& (0+255),f,b
  5588  001BB2  51D4               	movf	(fprintf@cc+1)& (0+255),w,b
  5589  001BB4  23C6               	addwfc	(fprintf@res+1)& (0+255),f,b
  5590                           
  5591                           ; BSR set to: 1
  5592  001BB6  29D3               	incf	fprintf@cc& (0+255),w,b
  5593  001BB8  E101               	bnz	u13371
  5594  001BBA  D63E               	goto	L4
  5595  001BBC                     u13371:
  5596  001BBC  D640               	goto	l1255
  5597  001BBE                     __end_of_fprintf:
  5598                           	opt stack 0
  5599                           tosu	equ	0xFFF
  5600                           tosh	equ	0xFFE
  5601                           tosl	equ	0xFFD
  5602                           pclath	equ	0xFFA
  5603                           tblptru	equ	0xFF8
  5604                           tblptrh	equ	0xFF7
  5605                           tblptrl	equ	0xFF6
  5606                           tablat	equ	0xFF5
  5607                           prodh	equ	0xFF4
  5608                           prodl	equ	0xFF3
  5609                           intcon	equ	0xFF2
  5610                           intcon2	equ	0xFF1
  5611                           intcon3	equ	0xFF0
  5612                           postinc0	equ	0xFEE
  5613                           wreg	equ	0xFE8
  5614                           indf1	equ	0xFE7
  5615                           postinc1	equ	0xFE6
  5616                           postdec1	equ	0xFE5
  5617                           fsr1h	equ	0xFE2
  5618                           fsr1l	equ	0xFE1
  5619                           indf2	equ	0xFDF
  5620                           postinc2	equ	0xFDE
  5621                           postdec2	equ	0xFDD
  5622                           fsr2h	equ	0xFDA
  5623                           fsr2l	equ	0xFD9
  5624                           status	equ	0xFD8
  5625                           
  5626 ;; *************** function _fputs *****************
  5627 ;; Defined at:
  5628 ;;		line 1788 in file "bibliotecas/tff.c"
  5629 ;; Parameters:    Size  Location     Type
  5630 ;;  str             2    4[BANK1 ] PTR const unsigned char 
  5631 ;;		 -> fprintf@s(16), string_dado(44), 
  5632 ;;  fil             2    6[BANK1 ] PTR struct _FIL
  5633 ;;		 -> fil(28), 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  n               2    9[BANK1 ] int 
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  2    4[BANK1 ] int 
  5638 ;; Registers used:
  5639 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5645 ;;      Params:         0       0       4       0       0       0       0       0       0
  5646 ;;      Locals:         0       0       2       0       0       0       0       0       0
  5647 ;;      Temps:          0       0       1       0       0       0       0       0       0
  5648 ;;      Totals:         0       0       7       0       0       0       0       0       0
  5649 ;;Total ram usage:        7 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; Hardware stack levels required when called:   13
  5652 ;; This function calls:
  5653 ;;		_fputc
  5654 ;; This function is called by:
  5655 ;;		_fprintf
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           	psect	text24
  5660  004A76                     __ptext24:
  5661                           	opt stack 0
  5662  004A76                     _fputs:
  5663                           	opt stack 14
  5664                           
  5665                           ;tff.c: 1793: int n;
  5666                           ;tff.c: 1796: for (n = 0; *str; str++, n++) {
  5667                           
  5668                           ; BSR set to: 1
  5669                           ;incstack = 0
  5670  004A76  0E00               	movlw	0
  5671  004A78  0101               	movlb	1	; () banked
  5672  004A7A  6FA6               	movwf	(fputs@n+1)& (0+255),b
  5673  004A7C  0E00               	movlw	0
  5674  004A7E  6FA5               	movwf	fputs@n& (0+255),b
  5675  004A80  D01C               	goto	l1248
  5676  004A82                     
  5677                           ; BSR set to: 1
  5678                           ;tff.c: 1797: if (fputc(*str, fil) == -1) return -1;
  5679                           
  5680                           ; BSR set to: 1
  5681  004A82  C1A0  FFD9         	movff	fputs@str,fsr2l
  5682  004A86  C1A1  FFDA         	movff	fputs@str+1,fsr2h
  5683  004A8A  50DF               	movf	indf2,w,c
  5684  004A8C  6FA4               	movwf	??_fputs& (0+255),b
  5685  004A8E  51A4               	movf	??_fputs& (0+255),w,b
  5686  004A90  6F9C               	movwf	fputc@chr& (0+255),b
  5687  004A92  6B9D               	clrf	(fputc@chr+1)& (0+255),b
  5688  004A94  C1A2  F19E         	movff	fputs@fil,fputc@fil
  5689  004A98  C1A3  F19F         	movff	fputs@fil+1,fputc@fil+1
  5690  004A9C  EC69  F025         	call	_fputc	;wreg free
  5691  004AA0  0101               	movlb	1	; () banked
  5692  004AA2  299C               	incf	?_fputc& (0+255),w,b
  5693  004AA4  E106               	bnz	l10113
  5694  004AA6  299D               	incf	(?_fputc+1)& (0+255),w,b
  5695  004AA8  A4D8               	btfss	status,2,c
  5696  004AAA  D003               	goto	l1250
  5697                           
  5698                           ; BSR set to: 1
  5699  004AAC  69A0               	setf	?_fputs& (0+255),b
  5700  004AAE  69A1               	setf	(?_fputs+1)& (0+255),b
  5701  004AB0  0012               	return	
  5702  004AB2                     l1250:
  5703  004AB2                     l10113:
  5704                           
  5705                           ; BSR set to: 1
  5706  004AB2  4BA0               	infsnz	fputs@str& (0+255),f,b
  5707  004AB4  2BA1               	incf	(fputs@str+1)& (0+255),f,b
  5708  004AB6  4BA5               	infsnz	fputs@n& (0+255),f,b
  5709  004AB8  2BA6               	incf	(fputs@n+1)& (0+255),f,b
  5710  004ABA                     l1248:
  5711                           
  5712                           ; BSR set to: 1
  5713                           
  5714                           ; BSR set to: 1
  5715  004ABA  C1A0  FFD9         	movff	fputs@str,fsr2l
  5716  004ABE  C1A1  FFDA         	movff	fputs@str+1,fsr2h
  5717  004AC2  50DF               	movf	indf2,w,c
  5718  004AC4  A4D8               	btfss	status,2,c
  5719  004AC6  D7DD               	goto	l1249
  5720                           
  5721                           ; BSR set to: 1
  5722                           ;tff.c: 1798: }
  5723                           ;tff.c: 1799: return n;
  5724  004AC8  C1A5  F1A0         	movff	fputs@n,?_fputs
  5725  004ACC  C1A6  F1A1         	movff	fputs@n+1,?_fputs+1
  5726                           
  5727                           ; BSR set to: 1
  5728  004AD0  0012               	return		;funcret
  5729  004AD2                     __end_of_fputs:
  5730                           	opt stack 0
  5731                           tosu	equ	0xFFF
  5732                           tosh	equ	0xFFE
  5733                           tosl	equ	0xFFD
  5734                           pclath	equ	0xFFA
  5735                           tblptru	equ	0xFF8
  5736                           tblptrh	equ	0xFF7
  5737                           tblptrl	equ	0xFF6
  5738                           tablat	equ	0xFF5
  5739                           prodh	equ	0xFF4
  5740                           prodl	equ	0xFF3
  5741                           intcon	equ	0xFF2
  5742                           intcon2	equ	0xFF1
  5743                           intcon3	equ	0xFF0
  5744                           postinc0	equ	0xFEE
  5745                           wreg	equ	0xFE8
  5746                           indf1	equ	0xFE7
  5747                           postinc1	equ	0xFE6
  5748                           postdec1	equ	0xFE5
  5749                           fsr1h	equ	0xFE2
  5750                           fsr1l	equ	0xFE1
  5751                           indf2	equ	0xFDF
  5752                           postinc2	equ	0xFDE
  5753                           postdec2	equ	0xFDD
  5754                           fsr2h	equ	0xFDA
  5755                           fsr2l	equ	0xFD9
  5756                           status	equ	0xFD8
  5757                           
  5758 ;; *************** function _fputc *****************
  5759 ;; Defined at:
  5760 ;;		line 1761 in file "bibliotecas/tff.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;  chr             2    0[BANK1 ] int 
  5763 ;;  fil             2    2[BANK1 ] PTR struct _FIL
  5764 ;;		 -> fil(28), 
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;  bw              2  134[BANK0 ] unsigned int 
  5767 ;;  c               1  133[BANK0 ] unsigned char 
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  2    0[BANK1 ] int 
  5770 ;; Registers used:
  5771 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5777 ;;      Params:         0       0       4       0       0       0       0       0       0
  5778 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5779 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5780 ;;      Totals:         0       3       4       0       0       0       0       0       0
  5781 ;;Total ram usage:        7 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:   12
  5784 ;; This function calls:
  5785 ;;		_f_write
  5786 ;; This function is called by:
  5787 ;;		_fputs
  5788 ;;		_fprintf
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           	psect	text25
  5793  004AD2                     __ptext25:
  5794                           	opt stack 0
  5795  004AD2                     _fputc:
  5796                           	opt stack 14
  5797                           
  5798                           ;tff.c: 1766: UINT bw;
  5799                           ;tff.c: 1767: char c;
  5800                           ;tff.c: 1773: if (!fil) {
  5801                           
  5802                           ; BSR set to: 1
  5803                           ;incstack = 0
  5804  004AD2  0101               	movlb	1	; () banked
  5805  004AD4  519E               	movf	fputc@fil& (0+255),w,b
  5806  004AD6  119F               	iorwf	(fputc@fil+1)& (0+255),w,b
  5807  004AD8  A4D8               	btfss	status,2,c
  5808  004ADA  D005               	goto	l1240
  5809                           
  5810                           ; BSR set to: 1
  5811                           ;tff.c: 1775: return chr;
  5812  004ADC  C19C  F19C         	movff	fputc@chr,?_fputc
  5813  004AE0  C19D  F19D         	movff	fputc@chr+1,?_fputc+1
  5814  004AE4  0012               	return	
  5815  004AE6                     l1240:
  5816                           
  5817                           ; BSR set to: 1
  5818                           ;tff.c: 1776: }
  5819                           ;tff.c: 1777: c = (char)chr;
  5820  004AE6  C19C  F0E5         	movff	fputc@chr,fputc@c
  5821                           
  5822                           ; BSR set to: 1
  5823                           ;tff.c: 1778: f_write(fil, &c, 1, &bw);
  5824  004AEA  C19E  F0C4         	movff	fputc@fil,f_write@fp
  5825  004AEE  C19F  F0C5         	movff	fputc@fil+1,f_write@fp+1
  5826  004AF2  0EE5               	movlw	low fputc@c
  5827  004AF4  0100               	movlb	0	; () banked
  5828  004AF6  6FC6               	movwf	f_write@buff& (0+255),b
  5829  004AF8  0E00               	movlw	high fputc@c
  5830  004AFA  6FC7               	movwf	(f_write@buff+1)& (0+255),b
  5831  004AFC  0E00               	movlw	0
  5832  004AFE  6FC9               	movwf	(f_write@btw+1)& (0+255),b
  5833  004B00  0E01               	movlw	1
  5834  004B02  6FC8               	movwf	f_write@btw& (0+255),b
  5835  004B04  0EE6               	movlw	low fputc@bw
  5836  004B06  6FCA               	movwf	f_write@bw& (0+255),b
  5837  004B08  0E00               	movlw	high fputc@bw
  5838  004B0A  6FCB               	movwf	(f_write@bw+1)& (0+255),b
  5839  004B0C  EC68  F004         	call	_f_write	;wreg free
  5840                           
  5841                           ;tff.c: 1779: return bw ? chr : -1;
  5842  004B10  0100               	movlb	0	; () banked
  5843  004B12  51E6               	movf	fputc@bw& (0+255),w,b
  5844  004B14  11E7               	iorwf	(fputc@bw+1)& (0+255),w,b
  5845  004B16  A4D8               	btfss	status,2,c
  5846  004B18  D004               	goto	l1243
  5847                           
  5848                           ; BSR set to: 0
  5849  004B1A  0101               	movlb	1	; () banked
  5850  004B1C  699C               	setf	?_fputc& (0+255),b
  5851  004B1E  699D               	setf	(?_fputc+1)& (0+255),b
  5852  004B20  0012               	return	
  5853  004B22                     l1243:
  5854                           
  5855                           ; BSR set to: 0
  5856  004B22  C19C  F19C         	movff	fputc@chr,?_fputc
  5857  004B26  C19D  F19D         	movff	fputc@chr+1,?_fputc+1
  5858  004B2A  0012               	return	
  5859  004B2C                     __end_of_fputc:
  5860                           	opt stack 0
  5861                           tosu	equ	0xFFF
  5862                           tosh	equ	0xFFE
  5863                           tosl	equ	0xFFD
  5864                           pclath	equ	0xFFA
  5865                           tblptru	equ	0xFF8
  5866                           tblptrh	equ	0xFF7
  5867                           tblptrl	equ	0xFF6
  5868                           tablat	equ	0xFF5
  5869                           prodh	equ	0xFF4
  5870                           prodl	equ	0xFF3
  5871                           intcon	equ	0xFF2
  5872                           intcon2	equ	0xFF1
  5873                           intcon3	equ	0xFF0
  5874                           postinc0	equ	0xFEE
  5875                           wreg	equ	0xFE8
  5876                           indf1	equ	0xFE7
  5877                           postinc1	equ	0xFE6
  5878                           postdec1	equ	0xFE5
  5879                           fsr1h	equ	0xFE2
  5880                           fsr1l	equ	0xFE1
  5881                           indf2	equ	0xFDF
  5882                           postinc2	equ	0xFDE
  5883                           postdec2	equ	0xFDD
  5884                           fsr2h	equ	0xFDA
  5885                           fsr2l	equ	0xFD9
  5886                           status	equ	0xFD8
  5887                           
  5888 ;; *************** function _f_write *****************
  5889 ;; Defined at:
  5890 ;;		line 991 in file "bibliotecas/tff.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  fp              2  100[BANK0 ] PTR struct _FIL
  5893 ;;		 -> fil(28), 
  5894 ;;  buff            2  102[BANK0 ] PTR const void 
  5895 ;;		 -> fputc@c(1), 
  5896 ;;  btw             2  104[BANK0 ] unsigned int 
  5897 ;;  bw              2  106[BANK0 ] PTR unsigned int 
  5898 ;;		 -> fputc@bw(2), 
  5899 ;; Auto vars:     Size  Location     Type
  5900 ;;  sect            4  123[BANK0 ] unsigned long 
  5901 ;;  wcnt            2  131[BANK0 ] unsigned int 
  5902 ;;  clust           2  129[BANK0 ] unsigned short 
  5903 ;;  cc              2  127[BANK0 ] unsigned int 
  5904 ;;  wbuff           2  121[BANK0 ] PTR const unsigned char 
  5905 ;;		 -> fputc@c(1), 
  5906 ;;  res             1  120[BANK0 ] enum E155
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  1    wreg      enum E155
  5909 ;; Registers used:
  5910 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5916 ;;      Params:         0       8       0       0       0       0       0       0       0
  5917 ;;      Locals:         0      13       0       0       0       0       0       0       0
  5918 ;;      Temps:          0      12       0       0       0       0       0       0       0
  5919 ;;      Totals:         0      33       0       0       0       0       0       0       0
  5920 ;;Total ram usage:       33 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:   11
  5923 ;; This function calls:
  5924 ;;		_clust2sect
  5925 ;;		_create_chain
  5926 ;;		_disk_write
  5927 ;;		_memcpy
  5928 ;;		_move_window
  5929 ;;		_validate
  5930 ;; This function is called by:
  5931 ;;		_fputc
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           	psect	text26
  5936  0008D0                     __ptext26:
  5937                           	opt stack 0
  5938  0008D0                     _f_write:
  5939                           	opt stack 14
  5940                           
  5941                           ;tff.c: 998: FRESULT res;
  5942                           ;tff.c: 999: DWORD sect;
  5943                           ;tff.c: 1000: UINT wcnt, cc;
  5944                           ;tff.c: 1001: CLUST clust;
  5945                           ;tff.c: 1002: const BYTE *wbuff = buff;
  5946                           
  5947                           ;incstack = 0
  5948  0008D0  C0C6  F0D9         	movff	f_write@buff,f_write@wbuff
  5949  0008D4  C0C7  F0DA         	movff	f_write@buff+1,f_write@wbuff+1
  5950                           
  5951                           ;tff.c: 1005: *bw = 0;
  5952  0008D8  C0CA  FFD9         	movff	f_write@bw,fsr2l
  5953  0008DC  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  5954  0008E0  0E00               	movlw	0
  5955  0008E2  6EDE               	movwf	postinc2,c
  5956  0008E4  0E00               	movlw	0
  5957  0008E6  6EDD               	movwf	postdec2,c
  5958                           
  5959                           ;tff.c: 1006: res = validate(fp->fs, fp->id);
  5960  0008E8  0100               	movlb	0	; () banked
  5961  0008EA  EE20 F004          	lfsr	2,4
  5962  0008EE  51C4               	movf	f_write@fp& (0+255),w,b
  5963  0008F0  26D9               	addwf	fsr2l,f,c
  5964  0008F2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5965  0008F4  22DA               	addwfc	fsr2h,f,c
  5966  0008F6  CFDE F065          	movff	postinc2,validate@fs
  5967  0008FA  CFDD F066          	movff	postdec2,validate@fs+1
  5968  0008FE  C0C4  FFD9         	movff	f_write@fp,fsr2l
  5969  000902  C0C5  FFDA         	movff	f_write@fp+1,fsr2h
  5970  000906  CFDE F067          	movff	postinc2,validate@id
  5971  00090A  CFDD F068          	movff	postdec2,validate@id+1
  5972  00090E  EC90  F026         	call	_validate	;wreg free
  5973  000912  0100               	movlb	0	; () banked
  5974  000914  6FD8               	movwf	f_write@res& (0+255),b
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;tff.c: 1007: if (res != FR_OK) return res;
  5978  000916  51D8               	movf	f_write@res& (0+255),w,b
  5979  000918  A4D8               	btfss	status,2,c
  5980  00091A  0012               	return	
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;tff.c: 1008: if (fp->flag & 0x80) return FR_RW_ERROR;
  5984                           
  5985                           ; BSR set to: 0
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;	Return value of _f_write is never used
  5989  00091C  EE20 F002          	lfsr	2,2
  5990  000920  51C4               	movf	f_write@fp& (0+255),w,b
  5991  000922  26D9               	addwf	fsr2l,f,c
  5992  000924  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5993  000926  22DA               	addwfc	fsr2h,f,c
  5994  000928  BEDF               	btfsc	indf2,7,c
  5995  00092A  0012               	return	
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;tff.c: 1009: if (!(fp->flag & 0x02)) return FR_DENIED;
  5999                           
  6000                           ; BSR set to: 0
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;	Return value of _f_write is never used
  6004  00092C  EE20 F002          	lfsr	2,2
  6005  000930  51C4               	movf	f_write@fp& (0+255),w,b
  6006  000932  26D9               	addwf	fsr2l,f,c
  6007  000934  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6008  000936  22DA               	addwfc	fsr2h,f,c
  6009  000938  A2DF               	btfss	indf2,1,c
  6010  00093A  0012               	return	
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;tff.c: 1010: if (fp->fsize + btw < fp->fsize) return FR_OK;
  6014                           
  6015                           ; BSR set to: 0
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;	Return value of _f_write is never used
  6019  00093C  EE20 F00A          	lfsr	2,10
  6020  000940  51C4               	movf	f_write@fp& (0+255),w,b
  6021  000942  26D9               	addwf	fsr2l,f,c
  6022  000944  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6023  000946  22DA               	addwfc	fsr2h,f,c
  6024  000948  EE10 F00A          	lfsr	1,10
  6025  00094C  51C4               	movf	f_write@fp& (0+255),w,b
  6026  00094E  26E1               	addwf	fsr1l,f,c
  6027  000950  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6028  000952  22E2               	addwfc	fsr1h,f,c
  6029  000954  CFE6 F0D0          	movff	postinc1,??_f_write+4
  6030  000958  CFE6 F0D1          	movff	postinc1,??_f_write+5
  6031  00095C  CFE6 F0D2          	movff	postinc1,??_f_write+6
  6032  000960  CFE6 F0D3          	movff	postinc1,??_f_write+7
  6033  000964  51C8               	movf	f_write@btw& (0+255),w,b
  6034  000966  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  6035  000968  6FD4               	movwf	(??_f_write+8)& (0+255),b
  6036  00096A  51C9               	movf	(f_write@btw+1)& (0+255),w,b
  6037  00096C  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  6038  00096E  6FD5               	movwf	(??_f_write+9)& (0+255),b
  6039  000970  0E00               	movlw	0
  6040  000972  21D2               	addwfc	(??_f_write+6)& (0+255),w,b
  6041  000974  6FD6               	movwf	(??_f_write+10)& (0+255),b
  6042  000976  0E00               	movlw	0
  6043  000978  21D3               	addwfc	(??_f_write+7)& (0+255),w,b
  6044  00097A  6FD7               	movwf	(??_f_write+11)& (0+255),b
  6045  00097C  50DE               	movf	postinc2,w,c
  6046  00097E  5DD4               	subwf	(??_f_write+8)& (0+255),w,b
  6047  000980  50DE               	movf	postinc2,w,c
  6048  000982  59D5               	subwfb	(??_f_write+9)& (0+255),w,b
  6049  000984  50DE               	movf	postinc2,w,c
  6050  000986  59D6               	subwfb	(??_f_write+10)& (0+255),w,b
  6051  000988  50DE               	movf	postinc2,w,c
  6052  00098A  59D7               	subwfb	(??_f_write+11)& (0+255),w,b
  6053  00098C  A0D8               	btfss	status,0,c
  6054  00098E  0012               	return	
  6055  000990  D23B               	goto	l1150
  6056  000992                     
  6057                           ; BSR set to: 0
  6058                           ;tff.c: 1014: if ((fp->fptr % 512U) == 0) {
  6059                           
  6060                           ; BSR set to: 0
  6061  000992  EE20 F006          	lfsr	2,6
  6062  000996  51C4               	movf	f_write@fp& (0+255),w,b
  6063  000998  26D9               	addwf	fsr2l,f,c
  6064  00099A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6065  00099C  22DA               	addwfc	fsr2h,f,c
  6066  00099E  0EFF               	movlw	255
  6067  0009A0  14DE               	andwf	postinc2,w,c
  6068  0009A2  6FCC               	movwf	??_f_write& (0+255),b
  6069  0009A4  0E01               	movlw	1
  6070  0009A6  14DE               	andwf	postinc2,w,c
  6071  0009A8  6FCD               	movwf	(??_f_write+1)& (0+255),b
  6072  0009AA  0E00               	movlw	0
  6073  0009AC  14DE               	andwf	postinc2,w,c
  6074  0009AE  6FCE               	movwf	(??_f_write+2)& (0+255),b
  6075  0009B0  0E00               	movlw	0
  6076  0009B2  14DE               	andwf	postinc2,w,c
  6077  0009B4  6FCF               	movwf	(??_f_write+3)& (0+255),b
  6078  0009B6  51CC               	movf	??_f_write& (0+255),w,b
  6079  0009B8  11CD               	iorwf	(??_f_write+1)& (0+255),w,b
  6080  0009BA  11CE               	iorwf	(??_f_write+2)& (0+255),w,b
  6081  0009BC  11CF               	iorwf	(??_f_write+3)& (0+255),w,b
  6082  0009BE  A4D8               	btfss	status,2,c
  6083  0009C0  D166               	goto	l1152
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;tff.c: 1015: if (fp->csect >= fp->fs->csize) {
  6087  0009C2  EE20 F004          	lfsr	2,4
  6088  0009C6  51C4               	movf	f_write@fp& (0+255),w,b
  6089  0009C8  26D9               	addwf	fsr2l,f,c
  6090  0009CA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6091  0009CC  22DA               	addwfc	fsr2h,f,c
  6092  0009CE  EE10 F01D          	lfsr	1,29
  6093  0009D2  50DE               	movf	postinc2,w,c
  6094  0009D4  26E1               	addwf	fsr1l,f,c
  6095  0009D6  50DD               	movf	postdec2,w,c
  6096  0009D8  22E2               	addwfc	fsr1h,f,c
  6097  0009DA  EE20 F003          	lfsr	2,3
  6098  0009DE  51C4               	movf	f_write@fp& (0+255),w,b
  6099  0009E0  26D9               	addwf	fsr2l,f,c
  6100  0009E2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6101  0009E4  22DA               	addwfc	fsr2h,f,c
  6102  0009E6  50E6               	movf	postinc1,w,c
  6103  0009E8  5CDE               	subwf	postinc2,w,c
  6104  0009EA  A0D8               	btfss	status,0,c
  6105  0009EC  D06D               	goto	l1153
  6106                           
  6107                           ; BSR set to: 0
  6108                           ;tff.c: 1016: if (fp->fptr == 0) {
  6109  0009EE  EE20 F006          	lfsr	2,6
  6110  0009F2  51C4               	movf	f_write@fp& (0+255),w,b
  6111  0009F4  26D9               	addwf	fsr2l,f,c
  6112  0009F6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6113  0009F8  22DA               	addwfc	fsr2h,f,c
  6114  0009FA  50DE               	movf	postinc2,w,c
  6115  0009FC  10DE               	iorwf	postinc2,w,c
  6116  0009FE  10DE               	iorwf	postinc2,w,c
  6117  000A00  10DE               	iorwf	postinc2,w,c
  6118  000A02  A4D8               	btfss	status,2,c
  6119  000A04  D024               	goto	l1154
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;tff.c: 1017: clust = fp->org_clust;
  6123  000A06  EE20 F00E          	lfsr	2,14
  6124  000A0A  51C4               	movf	f_write@fp& (0+255),w,b
  6125  000A0C  26D9               	addwf	fsr2l,f,c
  6126  000A0E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6127  000A10  22DA               	addwfc	fsr2h,f,c
  6128  000A12  CFDE F0E1          	movff	postinc2,f_write@clust
  6129  000A16  CFDD F0E2          	movff	postdec2,f_write@clust+1
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;tff.c: 1018: if (clust == 0)
  6133  000A1A  51E1               	movf	f_write@clust& (0+255),w,b
  6134  000A1C  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  6135  000A1E  A4D8               	btfss	status,2,c
  6136  000A20  D026               	goto	l1156
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;tff.c: 1019: fp->org_clust = clust = create_chain(0);
  6140  000A22  0E00               	movlw	0
  6141  000A24  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
  6142  000A26  0E00               	movlw	0
  6143  000A28  6FB6               	movwf	create_chain@clust& (0+255),b
  6144  000A2A  EC62  F018         	call	_create_chain	;wreg free
  6145  000A2E  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  6146  000A32  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  6147  000A36  0100               	movlb	0	; () banked
  6148  000A38  EE20 F00E          	lfsr	2,14
  6149  000A3C  51C4               	movf	f_write@fp& (0+255),w,b
  6150  000A3E  26D9               	addwf	fsr2l,f,c
  6151  000A40  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6152  000A42  22DA               	addwfc	fsr2h,f,c
  6153  000A44  C0E1  FFDE         	movff	f_write@clust,postinc2
  6154  000A48  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;tff.c: 1020: } else {
  6158  000A4C  D010               	goto	l1156
  6159  000A4E                     l1154:
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;tff.c: 1021: clust = create_chain(fp->curr_clust);
  6163                           
  6164                           ; BSR set to: 0
  6165  000A4E  EE20 F010          	lfsr	2,16
  6166  000A52  51C4               	movf	f_write@fp& (0+255),w,b
  6167  000A54  26D9               	addwf	fsr2l,f,c
  6168  000A56  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6169  000A58  22DA               	addwfc	fsr2h,f,c
  6170  000A5A  CFDE F0B6          	movff	postinc2,create_chain@clust
  6171  000A5E  CFDD F0B7          	movff	postdec2,create_chain@clust+1
  6172  000A62  EC62  F018         	call	_create_chain	;wreg free
  6173  000A66  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  6174  000A6A  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  6175  000A6E                     l1156:
  6176                           
  6177                           ;tff.c: 1022: }
  6178                           ;tff.c: 1023: if (clust == 0) break;
  6179  000A6E  0100               	movlb	0	; () banked
  6180  000A70  51E1               	movf	f_write@clust& (0+255),w,b
  6181  000A72  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  6182  000A74  B4D8               	btfsc	status,2,c
  6183  000A76  D1CC               	goto	u11350
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;tff.c: 1024: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
  6187                           
  6188                           ; BSR set to: 0
  6189                           
  6190                           ; BSR set to: 0
  6191  000A78  05E1               	decf	f_write@clust& (0+255),w,b
  6192  000A7A  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  6193  000A7C  B4D8               	btfsc	status,2,c
  6194  000A7E  D1FB               	goto	l1162
  6195                           
  6196                           ; BSR set to: 0
  6197  000A80  EE20 F004          	lfsr	2,4
  6198  000A84  51C4               	movf	f_write@fp& (0+255),w,b
  6199  000A86  26D9               	addwf	fsr2l,f,c
  6200  000A88  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6201  000A8A  22DA               	addwfc	fsr2h,f,c
  6202  000A8C  EE10 F016          	lfsr	1,22
  6203  000A90  50DE               	movf	postinc2,w,c
  6204  000A92  26E1               	addwf	fsr1l,f,c
  6205  000A94  50DD               	movf	postdec2,w,c
  6206  000A96  22E2               	addwfc	fsr1h,f,c
  6207  000A98  50E6               	movf	postinc1,w,c
  6208  000A9A  5DE1               	subwf	f_write@clust& (0+255),w,b
  6209  000A9C  50E6               	movf	postinc1,w,c
  6210  000A9E  59E2               	subwfb	(f_write@clust+1)& (0+255),w,b
  6211  000AA0  B0D8               	btfsc	status,0,c
  6212  000AA2  D1E9               	goto	l1162
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;tff.c: 1025: fp->curr_clust = clust;
  6216                           
  6217                           ; BSR set to: 0
  6218                           
  6219                           ; BSR set to: 0
  6220  000AA4  EE20 F010          	lfsr	2,16
  6221  000AA8  51C4               	movf	f_write@fp& (0+255),w,b
  6222  000AAA  26D9               	addwf	fsr2l,f,c
  6223  000AAC  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6224  000AAE  22DA               	addwfc	fsr2h,f,c
  6225  000AB0  C0E1  FFDE         	movff	f_write@clust,postinc2
  6226  000AB4  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  6227                           
  6228                           ;tff.c: 1026: fp->csect = 0;
  6229  000AB8  EE20 F003          	lfsr	2,3
  6230  000ABC  51C4               	movf	f_write@fp& (0+255),w,b
  6231  000ABE  26D9               	addwf	fsr2l,f,c
  6232  000AC0  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6233  000AC2  22DA               	addwfc	fsr2h,f,c
  6234  000AC4  0E00               	movlw	0
  6235  000AC6  6EDF               	movwf	indf2,c
  6236  000AC8                     l1153:
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;tff.c: 1027: }
  6240                           ;tff.c: 1028: sect = clust2sect(fp->curr_clust) + fp->csect;
  6241                           
  6242                           ; BSR set to: 0
  6243  000AC8  EE20 F010          	lfsr	2,16
  6244  000ACC  51C4               	movf	f_write@fp& (0+255),w,b
  6245  000ACE  26D9               	addwf	fsr2l,f,c
  6246  000AD0  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6247  000AD2  22DA               	addwfc	fsr2h,f,c
  6248  000AD4  CFDE F06C          	movff	postinc2,clust2sect@clust
  6249  000AD8  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  6250  000ADC  EC04  F020         	call	_clust2sect	;wreg free
  6251  000AE0  0100               	movlb	0	; () banked
  6252  000AE2  EE20 F003          	lfsr	2,3
  6253  000AE6  51C4               	movf	f_write@fp& (0+255),w,b
  6254  000AE8  26D9               	addwf	fsr2l,f,c
  6255  000AEA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6256  000AEC  22DA               	addwfc	fsr2h,f,c
  6257  000AEE  50DF               	movf	indf2,w,c
  6258  000AF0  6FCC               	movwf	??_f_write& (0+255),b
  6259  000AF2  51CC               	movf	??_f_write& (0+255),w,b
  6260  000AF4  256C               	addwf	?_clust2sect& (0+255),w,b
  6261  000AF6  6FDB               	movwf	f_write@sect& (0+255),b
  6262  000AF8  0E00               	movlw	0
  6263  000AFA  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  6264  000AFC  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  6265  000AFE  0E00               	movlw	0
  6266  000B00  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  6267  000B02  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  6268  000B04  0E00               	movlw	0
  6269  000B06  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  6270  000B08  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;tff.c: 1029: cc = btw / 512U;
  6274  000B0A  C0C8  F0CC         	movff	f_write@btw,??_f_write
  6275  000B0E  C0C9  F0CD         	movff	f_write@btw+1,??_f_write+1
  6276  000B12  0E09               	movlw	9
  6277  000B14  6FCE               	movwf	(??_f_write+2)& (0+255),b
  6278  000B16                     u11265:
  6279  000B16  90D8               	bcf	status,0,c
  6280  000B18  33CD               	rrcf	(??_f_write+1)& (0+255),f,b
  6281  000B1A  33CC               	rrcf	??_f_write& (0+255),f,b
  6282  000B1C  2FCE               	decfsz	(??_f_write+2)& (0+255),f,b
  6283  000B1E  D7FB               	goto	u11265
  6284  000B20  C0CC  F0DF         	movff	??_f_write,f_write@cc
  6285  000B24  C0CD  F0E0         	movff	??_f_write+1,f_write@cc+1
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;tff.c: 1030: if (cc) {
  6289  000B28  51DF               	movf	f_write@cc& (0+255),w,b
  6290  000B2A  11E0               	iorwf	(f_write@cc+1)& (0+255),w,b
  6291  000B2C  B4D8               	btfsc	status,2,c
  6292  000B2E  D070               	goto	l1163
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;tff.c: 1031: if (fp->csect + cc > fp->fs->csize)
  6296  000B30  EE20 F003          	lfsr	2,3
  6297  000B34  51C4               	movf	f_write@fp& (0+255),w,b
  6298  000B36  26D9               	addwf	fsr2l,f,c
  6299  000B38  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6300  000B3A  22DA               	addwfc	fsr2h,f,c
  6301  000B3C  50DF               	movf	indf2,w,c
  6302  000B3E  6FCC               	movwf	??_f_write& (0+255),b
  6303  000B40  51CC               	movf	??_f_write& (0+255),w,b
  6304  000B42  25DF               	addwf	f_write@cc& (0+255),w,b
  6305  000B44  6FCD               	movwf	(??_f_write+1)& (0+255),b
  6306  000B46  0E00               	movlw	0
  6307  000B48  21E0               	addwfc	(f_write@cc+1)& (0+255),w,b
  6308  000B4A  6FCE               	movwf	(??_f_write+2)& (0+255),b
  6309  000B4C  EE20 F004          	lfsr	2,4
  6310  000B50  51C4               	movf	f_write@fp& (0+255),w,b
  6311  000B52  26D9               	addwf	fsr2l,f,c
  6312  000B54  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6313  000B56  22DA               	addwfc	fsr2h,f,c
  6314  000B58  EE10 F01D          	lfsr	1,29
  6315  000B5C  50DE               	movf	postinc2,w,c
  6316  000B5E  26E1               	addwf	fsr1l,f,c
  6317  000B60  50DD               	movf	postdec2,w,c
  6318  000B62  22E2               	addwfc	fsr1h,f,c
  6319  000B64  50E7               	movf	indf1,w,c
  6320  000B66  6FCF               	movwf	(??_f_write+3)& (0+255),b
  6321  000B68  6BD0               	clrf	(??_f_write+4)& (0+255),b
  6322  000B6A  51CD               	movf	(??_f_write+1)& (0+255),w,b
  6323  000B6C  5DCF               	subwf	(??_f_write+3)& (0+255),w,b
  6324  000B6E  51CE               	movf	(??_f_write+2)& (0+255),w,b
  6325  000B70  59D0               	subwfb	(??_f_write+4)& (0+255),w,b
  6326  000B72  B0D8               	btfsc	status,0,c
  6327  000B74  D021               	goto	l1164
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;tff.c: 1032: cc = fp->fs->csize - fp->csect;
  6331  000B76  EE20 F003          	lfsr	2,3
  6332  000B7A  51C4               	movf	f_write@fp& (0+255),w,b
  6333  000B7C  26D9               	addwf	fsr2l,f,c
  6334  000B7E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6335  000B80  22DA               	addwfc	fsr2h,f,c
  6336  000B82  50DF               	movf	indf2,w,c
  6337  000B84  6FCC               	movwf	??_f_write& (0+255),b
  6338  000B86  6BCD               	clrf	(??_f_write+1)& (0+255),b
  6339  000B88  1FCC               	comf	??_f_write& (0+255),f,b
  6340  000B8A  1FCD               	comf	(??_f_write+1)& (0+255),f,b
  6341  000B8C  4BCC               	infsnz	??_f_write& (0+255),f,b
  6342  000B8E  2BCD               	incf	(??_f_write+1)& (0+255),f,b
  6343  000B90  EE20 F004          	lfsr	2,4
  6344  000B94  51C4               	movf	f_write@fp& (0+255),w,b
  6345  000B96  26D9               	addwf	fsr2l,f,c
  6346  000B98  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6347  000B9A  22DA               	addwfc	fsr2h,f,c
  6348  000B9C  EE10 F01D          	lfsr	1,29
  6349  000BA0  50DE               	movf	postinc2,w,c
  6350  000BA2  26E1               	addwf	fsr1l,f,c
  6351  000BA4  50DD               	movf	postdec2,w,c
  6352  000BA6  22E2               	addwfc	fsr1h,f,c
  6353  000BA8  50E7               	movf	indf1,w,c
  6354  000BAA  6FCE               	movwf	(??_f_write+2)& (0+255),b
  6355  000BAC  51CE               	movf	(??_f_write+2)& (0+255),w,b
  6356  000BAE  25CC               	addwf	??_f_write& (0+255),w,b
  6357  000BB0  6FDF               	movwf	f_write@cc& (0+255),b
  6358  000BB2  0E00               	movlw	0
  6359  000BB4  21CD               	addwfc	(??_f_write+1)& (0+255),w,b
  6360  000BB6  6FE0               	movwf	(f_write@cc+1)& (0+255),b
  6361  000BB8                     l1164:
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;tff.c: 1033: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
  6365                           
  6366                           ; BSR set to: 0
  6367  000BB8  C0D9  F07F         	movff	f_write@wbuff,disk_write@buff
  6368  000BBC  C0DA  F080         	movff	f_write@wbuff+1,disk_write@buff+1
  6369  000BC0  C0DB  F081         	movff	f_write@sect,disk_write@sector
  6370  000BC4  C0DC  F082         	movff	f_write@sect+1,disk_write@sector+1
  6371  000BC8  C0DD  F083         	movff	f_write@sect+2,disk_write@sector+2
  6372  000BCC  C0DE  F084         	movff	f_write@sect+3,disk_write@sector+3
  6373  000BD0  C0DF  F085         	movff	f_write@cc,disk_write@count
  6374  000BD4  0E00               	movlw	0
  6375  000BD6  EC24  F023         	call	_disk_write
  6376  000BDA  0900               	iorlw	0
  6377  000BDC  A4D8               	btfss	status,2,c
  6378  000BDE  D14B               	goto	l1162
  6379                           
  6380                           ;tff.c: 1035: fp->csect += (BYTE)cc;
  6381                           
  6382                           ;tff.c: 1034: goto fw_error;
  6383  000BE0  0100               	movlb	0	; () banked
  6384  000BE2  EE20 F003          	lfsr	2,3
  6385  000BE6  51C4               	movf	f_write@fp& (0+255),w,b
  6386  000BE8  26D9               	addwf	fsr2l,f,c
  6387  000BEA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6388  000BEC  22DA               	addwfc	fsr2h,f,c
  6389  000BEE  51DF               	movf	f_write@cc& (0+255),w,b
  6390  000BF0  26DF               	addwf	indf2,f,c
  6391                           
  6392                           ; BSR set to: 0
  6393                           ;tff.c: 1036: wcnt = 512U * cc;
  6394  000BF2  C0DF  F0CC         	movff	f_write@cc,??_f_write
  6395  000BF6  C0E0  F0CD         	movff	f_write@cc+1,??_f_write+1
  6396  000BFA  0E09               	movlw	9
  6397  000BFC                     u11305:
  6398  000BFC  90D8               	bcf	status,0,c
  6399  000BFE  37CC               	rlcf	??_f_write& (0+255),f,b
  6400  000C00  37CD               	rlcf	(??_f_write+1)& (0+255),f,b
  6401  000C02  2EE8               	decfsz	wreg,f,c
  6402  000C04  D7FB               	goto	u11305
  6403  000C06  C0CC  F0E3         	movff	??_f_write,f_write@wcnt
  6404  000C0A  C0CD  F0E4         	movff	??_f_write+1,f_write@wcnt+1
  6405                           
  6406                           ;tff.c: 1037: continue;
  6407  000C0E  D0DF               	goto	l1166
  6408  000C10                     l1163:
  6409                           
  6410                           ; BSR set to: 0
  6411                           ;tff.c: 1038: }
  6412                           ;tff.c: 1039: if (fp->fptr >= fp->fsize) {
  6413                           
  6414                           ; BSR set to: 0
  6415  000C10  EE20 F00A          	lfsr	2,10
  6416  000C14  51C4               	movf	f_write@fp& (0+255),w,b
  6417  000C16  26D9               	addwf	fsr2l,f,c
  6418  000C18  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6419  000C1A  22DA               	addwfc	fsr2h,f,c
  6420  000C1C  EE10 F006          	lfsr	1,6
  6421  000C20  51C4               	movf	f_write@fp& (0+255),w,b
  6422  000C22  26E1               	addwf	fsr1l,f,c
  6423  000C24  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6424  000C26  22E2               	addwfc	fsr1h,f,c
  6425  000C28  50DE               	movf	postinc2,w,c
  6426  000C2A  5CE6               	subwf	postinc1,w,c
  6427  000C2C  50DE               	movf	postinc2,w,c
  6428  000C2E  58E6               	subwfb	postinc1,w,c
  6429  000C30  50DE               	movf	postinc2,w,c
  6430  000C32  58E6               	subwfb	postinc1,w,c
  6431  000C34  50DE               	movf	postinc2,w,c
  6432  000C36  58E6               	subwfb	postinc1,w,c
  6433  000C38  A0D8               	btfss	status,0,c
  6434  000C3A  D022               	goto	l1167
  6435                           
  6436                           ; BSR set to: 0
  6437                           ;tff.c: 1040: if (!move_window(0)) goto fw_error;
  6438  000C3C  0E00               	movlw	0
  6439  000C3E  6F8B               	movwf	move_window@sector& (0+255),b
  6440  000C40  0E00               	movlw	0
  6441  000C42  6F8C               	movwf	(move_window@sector+1)& (0+255),b
  6442  000C44  0E00               	movlw	0
  6443  000C46  6F8D               	movwf	(move_window@sector+2)& (0+255),b
  6444  000C48  0E00               	movlw	0
  6445  000C4A  6F8E               	movwf	(move_window@sector+3)& (0+255),b
  6446  000C4C  EC42  F019         	call	_move_window	;wreg free
  6447  000C50  0900               	iorlw	0
  6448  000C52  B4D8               	btfsc	status,2,c
  6449  000C54  D110               	goto	l1162
  6450                           
  6451                           ;tff.c: 1041: fp->fs->winsect = sect;
  6452  000C56  0100               	movlb	0	; () banked
  6453  000C58  EE20 F004          	lfsr	2,4
  6454  000C5C  51C4               	movf	f_write@fp& (0+255),w,b
  6455  000C5E  26D9               	addwf	fsr2l,f,c
  6456  000C60  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6457  000C62  22DA               	addwfc	fsr2h,f,c
  6458  000C64  EE10 F004          	lfsr	1,4
  6459  000C68  50DE               	movf	postinc2,w,c
  6460  000C6A  26E1               	addwf	fsr1l,f,c
  6461  000C6C  50DD               	movf	postdec2,w,c
  6462  000C6E  22E2               	addwfc	fsr1h,f,c
  6463  000C70  C0DB  FFE6         	movff	f_write@sect,postinc1
  6464  000C74  C0DC  FFE6         	movff	f_write@sect+1,postinc1
  6465  000C78  C0DD  FFE6         	movff	f_write@sect+2,postinc1
  6466  000C7C  C0DE  FFE6         	movff	f_write@sect+3,postinc1
  6467  000C80                     l1167:
  6468                           
  6469                           ; BSR set to: 0
  6470                           ;tff.c: 1042: }
  6471                           ;tff.c: 1043: fp->csect++;
  6472                           
  6473                           ; BSR set to: 0
  6474  000C80  EE20 F003          	lfsr	2,3
  6475  000C84  51C4               	movf	f_write@fp& (0+255),w,b
  6476  000C86  26D9               	addwf	fsr2l,f,c
  6477  000C88  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6478  000C8A  22DA               	addwfc	fsr2h,f,c
  6479  000C8C  2ADF               	incf	indf2,f,c
  6480  000C8E                     l1152:
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;tff.c: 1044: }
  6484                           ;tff.c: 1045: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  6485                           
  6486                           ; BSR set to: 0
  6487  000C8E  EE20 F010          	lfsr	2,16
  6488  000C92  51C4               	movf	f_write@fp& (0+255),w,b
  6489  000C94  26D9               	addwf	fsr2l,f,c
  6490  000C96  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6491  000C98  22DA               	addwfc	fsr2h,f,c
  6492  000C9A  CFDE F06C          	movff	postinc2,clust2sect@clust
  6493  000C9E  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  6494  000CA2  EC04  F020         	call	_clust2sect	;wreg free
  6495  000CA6  0100               	movlb	0	; () banked
  6496  000CA8  EE20 F003          	lfsr	2,3
  6497  000CAC  51C4               	movf	f_write@fp& (0+255),w,b
  6498  000CAE  26D9               	addwf	fsr2l,f,c
  6499  000CB0  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6500  000CB2  22DA               	addwfc	fsr2h,f,c
  6501  000CB4  50DF               	movf	indf2,w,c
  6502  000CB6  6FCC               	movwf	??_f_write& (0+255),b
  6503  000CB8  51CC               	movf	??_f_write& (0+255),w,b
  6504  000CBA  256C               	addwf	?_clust2sect& (0+255),w,b
  6505  000CBC  6FCD               	movwf	(??_f_write+1)& (0+255),b
  6506  000CBE  0E00               	movlw	0
  6507  000CC0  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  6508  000CC2  6FCE               	movwf	(??_f_write+2)& (0+255),b
  6509  000CC4  0E00               	movlw	0
  6510  000CC6  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  6511  000CC8  6FCF               	movwf	(??_f_write+3)& (0+255),b
  6512  000CCA  0E00               	movlw	0
  6513  000CCC  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  6514  000CCE  6FD0               	movwf	(??_f_write+4)& (0+255),b
  6515  000CD0  0EFF               	movlw	255
  6516  000CD2  25CD               	addwf	(??_f_write+1)& (0+255),w,b
  6517  000CD4  6FDB               	movwf	f_write@sect& (0+255),b
  6518  000CD6  0EFF               	movlw	255
  6519  000CD8  21CE               	addwfc	(??_f_write+2)& (0+255),w,b
  6520  000CDA  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  6521  000CDC  0EFF               	movlw	255
  6522  000CDE  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
  6523  000CE0  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  6524  000CE2  0EFF               	movlw	255
  6525  000CE4  21D0               	addwfc	(??_f_write+4)& (0+255),w,b
  6526  000CE6  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  6527                           
  6528                           ; BSR set to: 0
  6529                           ;tff.c: 1046: if (!move_window(sect)) goto fw_error;
  6530  000CE8  C0DB  F08B         	movff	f_write@sect,move_window@sector
  6531  000CEC  C0DC  F08C         	movff	f_write@sect+1,move_window@sector+1
  6532  000CF0  C0DD  F08D         	movff	f_write@sect+2,move_window@sector+2
  6533  000CF4  C0DE  F08E         	movff	f_write@sect+3,move_window@sector+3
  6534  000CF8  EC42  F019         	call	_move_window	;wreg free
  6535  000CFC  0900               	iorlw	0
  6536  000CFE  B4D8               	btfsc	status,2,c
  6537  000D00  D0BA               	goto	l1162
  6538                           
  6539                           ;tff.c: 1047: wcnt = 512U - (fp->fptr % 512U);
  6540  000D02  0EFF               	movlw	255
  6541  000D04  0100               	movlb	0	; () banked
  6542  000D06  6FCC               	movwf	??_f_write& (0+255),b
  6543  000D08  0E01               	movlw	1
  6544  000D0A  6FCD               	movwf	(??_f_write+1)& (0+255),b
  6545  000D0C  EE20 F006          	lfsr	2,6
  6546  000D10  51C4               	movf	f_write@fp& (0+255),w,b
  6547  000D12  26D9               	addwf	fsr2l,f,c
  6548  000D14  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6549  000D16  22DA               	addwfc	fsr2h,f,c
  6550  000D18  CFDE F0CE          	movff	postinc2,??_f_write+2
  6551  000D1C  CFDD F0CF          	movff	postdec2,??_f_write+3
  6552  000D20  51CC               	movf	??_f_write& (0+255),w,b
  6553  000D22  17CE               	andwf	(??_f_write+2)& (0+255),f,b
  6554  000D24  51CD               	movf	(??_f_write+1)& (0+255),w,b
  6555  000D26  17CF               	andwf	(??_f_write+3)& (0+255),f,b
  6556  000D28  1FCE               	comf	(??_f_write+2)& (0+255),f,b
  6557  000D2A  1FCF               	comf	(??_f_write+3)& (0+255),f,b
  6558  000D2C  4BCE               	infsnz	(??_f_write+2)& (0+255),f,b
  6559  000D2E  2BCF               	incf	(??_f_write+3)& (0+255),f,b
  6560  000D30  0E00               	movlw	0
  6561  000D32  25CE               	addwf	(??_f_write+2)& (0+255),w,b
  6562  000D34  6FE3               	movwf	f_write@wcnt& (0+255),b
  6563  000D36  0E02               	movlw	2
  6564  000D38  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
  6565  000D3A  6FE4               	movwf	(f_write@wcnt+1)& (0+255),b
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;tff.c: 1048: if (wcnt > btw) wcnt = btw;
  6569  000D3C  51E3               	movf	f_write@wcnt& (0+255),w,b
  6570  000D3E  5DC8               	subwf	f_write@btw& (0+255),w,b
  6571  000D40  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  6572  000D42  59C9               	subwfb	(f_write@btw+1)& (0+255),w,b
  6573  000D44  B0D8               	btfsc	status,0,c
  6574  000D46  D004               	goto	l1170
  6575                           
  6576                           ; BSR set to: 0
  6577  000D48  C0C8  F0E3         	movff	f_write@btw,f_write@wcnt
  6578  000D4C  C0C9  F0E4         	movff	f_write@btw+1,f_write@wcnt+1
  6579  000D50                     l1170:
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;tff.c: 1049: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
  6583                           
  6584                           ; BSR set to: 0
  6585  000D50  0EFF               	movlw	255
  6586  000D52  6FCC               	movwf	??_f_write& (0+255),b
  6587  000D54  0E01               	movlw	1
  6588  000D56  6FCD               	movwf	(??_f_write+1)& (0+255),b
  6589  000D58  EE20 F006          	lfsr	2,6
  6590  000D5C  51C4               	movf	f_write@fp& (0+255),w,b
  6591  000D5E  26D9               	addwf	fsr2l,f,c
  6592  000D60  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6593  000D62  22DA               	addwfc	fsr2h,f,c
  6594  000D64  CFDE F0CE          	movff	postinc2,??_f_write+2
  6595  000D68  CFDD F0CF          	movff	postdec2,??_f_write+3
  6596  000D6C  51CC               	movf	??_f_write& (0+255),w,b
  6597  000D6E  17CE               	andwf	(??_f_write+2)& (0+255),f,b
  6598  000D70  51CD               	movf	(??_f_write+1)& (0+255),w,b
  6599  000D72  17CF               	andwf	(??_f_write+3)& (0+255),f,b
  6600  000D74  0E20               	movlw	32
  6601  000D76  27CE               	addwf	(??_f_write+2)& (0+255),f,b
  6602  000D78  0E00               	movlw	0
  6603  000D7A  23CF               	addwfc	(??_f_write+3)& (0+255),f,b
  6604  000D7C  EE20 F004          	lfsr	2,4
  6605  000D80  51C4               	movf	f_write@fp& (0+255),w,b
  6606  000D82  26D9               	addwf	fsr2l,f,c
  6607  000D84  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6608  000D86  22DA               	addwfc	fsr2h,f,c
  6609  000D88  CFDE F0D0          	movff	postinc2,??_f_write+4
  6610  000D8C  CFDD F0D1          	movff	postdec2,??_f_write+5
  6611  000D90  51CE               	movf	(??_f_write+2)& (0+255),w,b
  6612  000D92  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  6613  000D94  6F60               	movwf	memcpy@d1& (0+255),b
  6614  000D96  51CF               	movf	(??_f_write+3)& (0+255),w,b
  6615  000D98  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  6616  000D9A  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  6617  000D9C  C0D9  F062         	movff	f_write@wbuff,memcpy@s1
  6618  000DA0  C0DA  F063         	movff	f_write@wbuff+1,memcpy@s1+1
  6619  000DA4  C0E3  F064         	movff	f_write@wcnt,memcpy@n
  6620  000DA8  C0E4  F065         	movff	f_write@wcnt+1,memcpy@n+1
  6621  000DAC  ECB6  F026         	call	_memcpy	;wreg free
  6622                           
  6623                           ;tff.c: 1050: fp->fs->winflag = 1;
  6624  000DB0  0100               	movlb	0	; () banked
  6625  000DB2  EE20 F004          	lfsr	2,4
  6626  000DB6  51C4               	movf	f_write@fp& (0+255),w,b
  6627  000DB8  26D9               	addwf	fsr2l,f,c
  6628  000DBA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6629  000DBC  22DA               	addwfc	fsr2h,f,c
  6630  000DBE  EE10 F01F          	lfsr	1,31
  6631  000DC2  50DE               	movf	postinc2,w,c
  6632  000DC4  26E1               	addwf	fsr1l,f,c
  6633  000DC6  50DD               	movf	postdec2,w,c
  6634  000DC8  22E2               	addwfc	fsr1h,f,c
  6635  000DCA  0E01               	movlw	1
  6636  000DCC  6EE7               	movwf	indf1,c
  6637  000DCE                     l1166:
  6638                           
  6639                           ; BSR set to: 0
  6640                           
  6641                           ; BSR set to: 0
  6642  000DCE  51E3               	movf	f_write@wcnt& (0+255),w,b
  6643  000DD0  27D9               	addwf	f_write@wbuff& (0+255),f,b
  6644  000DD2  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  6645  000DD4  23DA               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  6646                           
  6647                           ; BSR set to: 0
  6648  000DD6  EE20 F006          	lfsr	2,6
  6649  000DDA  51C4               	movf	f_write@fp& (0+255),w,b
  6650  000DDC  26D9               	addwf	fsr2l,f,c
  6651  000DDE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6652  000DE0  22DA               	addwfc	fsr2h,f,c
  6653  000DE2  51E3               	movf	f_write@wcnt& (0+255),w,b
  6654  000DE4  26DE               	addwf	postinc2,f,c
  6655  000DE6  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  6656  000DE8  22DE               	addwfc	postinc2,f,c
  6657  000DEA  0E00               	movlw	0
  6658  000DEC  22DE               	addwfc	postinc2,f,c
  6659  000DEE  22DE               	addwfc	postinc2,f,c
  6660                           
  6661                           ; BSR set to: 0
  6662  000DF0  C0CA  FFD9         	movff	f_write@bw,fsr2l
  6663  000DF4  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  6664  000DF8  51E3               	movf	f_write@wcnt& (0+255),w,b
  6665  000DFA  26DE               	addwf	postinc2,f,c
  6666  000DFC  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  6667  000DFE  22DD               	addwfc	postdec2,f,c
  6668                           
  6669                           ; BSR set to: 0
  6670  000E00  51E3               	movf	f_write@wcnt& (0+255),w,b
  6671  000E02  5FC8               	subwf	f_write@btw& (0+255),f,b
  6672  000E04  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  6673  000E06  5BC9               	subwfb	(f_write@btw+1)& (0+255),f,b
  6674  000E08                     l1150:
  6675                           
  6676                           ; BSR set to: 0
  6677                           
  6678                           ; BSR set to: 0
  6679  000E08  51C8               	movf	f_write@btw& (0+255),w,b
  6680  000E0A  11C9               	iorwf	(f_write@btw+1)& (0+255),w,b
  6681  000E0C  A4D8               	btfss	status,2,c
  6682  000E0E  D5C1               	goto	l1151
  6683  000E10                     u11350:
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;tff.c: 1051: }
  6687                           ;tff.c: 1053: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  6688                           
  6689                           ; BSR set to: 0
  6690  000E10  EE20 F006          	lfsr	2,6
  6691  000E14  51C4               	movf	f_write@fp& (0+255),w,b
  6692  000E16  26D9               	addwf	fsr2l,f,c
  6693  000E18  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6694  000E1A  22DA               	addwfc	fsr2h,f,c
  6695  000E1C  EE10 F00A          	lfsr	1,10
  6696  000E20  51C4               	movf	f_write@fp& (0+255),w,b
  6697  000E22  26E1               	addwf	fsr1l,f,c
  6698  000E24  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6699  000E26  22E2               	addwfc	fsr1h,f,c
  6700  000E28  50DE               	movf	postinc2,w,c
  6701  000E2A  5CE6               	subwf	postinc1,w,c
  6702  000E2C  50DE               	movf	postinc2,w,c
  6703  000E2E  58E6               	subwfb	postinc1,w,c
  6704  000E30  50DE               	movf	postinc2,w,c
  6705  000E32  58E6               	subwfb	postinc1,w,c
  6706  000E34  50DE               	movf	postinc2,w,c
  6707  000E36  58E6               	subwfb	postinc1,w,c
  6708  000E38  B0D8               	btfsc	status,0,c
  6709  000E3A  D014               	goto	l1171
  6710                           
  6711                           ; BSR set to: 0
  6712  000E3C  EE20 F006          	lfsr	2,6
  6713  000E40  51C4               	movf	f_write@fp& (0+255),w,b
  6714  000E42  26D9               	addwf	fsr2l,f,c
  6715  000E44  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6716  000E46  22DA               	addwfc	fsr2h,f,c
  6717  000E48  EE10 F00A          	lfsr	1,10
  6718  000E4C  51C4               	movf	f_write@fp& (0+255),w,b
  6719  000E4E  26E1               	addwf	fsr1l,f,c
  6720  000E50  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6721  000E52  22E2               	addwfc	fsr1h,f,c
  6722  000E54  CFDE FFE6          	movff	postinc2,postinc1
  6723  000E58  CFDE FFE6          	movff	postinc2,postinc1
  6724  000E5C  CFDE FFE6          	movff	postinc2,postinc1
  6725  000E60  CFDE FFE6          	movff	postinc2,postinc1
  6726  000E64                     l1171:
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;tff.c: 1054: fp->flag |= 0x20;
  6730                           
  6731                           ; BSR set to: 0
  6732  000E64  EE20 F002          	lfsr	2,2
  6733  000E68  51C4               	movf	f_write@fp& (0+255),w,b
  6734  000E6A  26D9               	addwf	fsr2l,f,c
  6735  000E6C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6736  000E6E  22DA               	addwfc	fsr2h,f,c
  6737  000E70  0E00               	movlw	0
  6738  000E72  8ADB               	bsf	plusw2,5,c
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;tff.c: 1055: return res;
  6742                           ;	Return value of _f_write is never used
  6743  000E74  0012               	return	
  6744  000E76                     l1162:
  6745                           
  6746                           ;tff.c: 1058: fp->flag |= 0x80;
  6747                           
  6748                           ; BSR set to: 0
  6749  000E76  0100               	movlb	0	; () banked
  6750  000E78  EE20 F002          	lfsr	2,2
  6751  000E7C  51C4               	movf	f_write@fp& (0+255),w,b
  6752  000E7E  26D9               	addwf	fsr2l,f,c
  6753  000E80  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6754  000E82  22DA               	addwfc	fsr2h,f,c
  6755  000E84  0E00               	movlw	0
  6756  000E86  8EDB               	bsf	plusw2,7,c
  6757  000E88  0012               	return	
  6758  000E8A                     __end_of_f_write:
  6759                           	opt stack 0
  6760                           tosu	equ	0xFFF
  6761                           tosh	equ	0xFFE
  6762                           tosl	equ	0xFFD
  6763                           pclath	equ	0xFFA
  6764                           tblptru	equ	0xFF8
  6765                           tblptrh	equ	0xFF7
  6766                           tblptrl	equ	0xFF6
  6767                           tablat	equ	0xFF5
  6768                           prodh	equ	0xFF4
  6769                           prodl	equ	0xFF3
  6770                           intcon	equ	0xFF2
  6771                           intcon2	equ	0xFF1
  6772                           intcon3	equ	0xFF0
  6773                           postinc0	equ	0xFEE
  6774                           wreg	equ	0xFE8
  6775                           indf1	equ	0xFE7
  6776                           postinc1	equ	0xFE6
  6777                           postdec1	equ	0xFE5
  6778                           fsr1h	equ	0xFE2
  6779                           fsr1l	equ	0xFE1
  6780                           indf2	equ	0xFDF
  6781                           postinc2	equ	0xFDE
  6782                           postdec2	equ	0xFDD
  6783                           plusw2	equ	0xFDB
  6784                           fsr2h	equ	0xFDA
  6785                           fsr2l	equ	0xFD9
  6786                           status	equ	0xFD8
  6787                           
  6788 ;; *************** function ___llmod *****************
  6789 ;; Defined at:
  6790 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  6791 ;; Parameters:    Size  Location     Type
  6792 ;;  dividend        4    0[BANK0 ] unsigned long 
  6793 ;;  divisor         4    4[BANK0 ] unsigned long 
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;  counter         1   32[COMRAM] unsigned char 
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  4    0[BANK0 ] unsigned long 
  6798 ;; Registers used:
  6799 ;;		wreg, status,2, status,0
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6805 ;;      Params:         0       8       0       0       0       0       0       0       0
  6806 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6807 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6808 ;;      Totals:         1       8       0       0       0       0       0       0       0
  6809 ;;Total ram usage:        9 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    3
  6812 ;; This function calls:
  6813 ;;		Nothing
  6814 ;; This function is called by:
  6815 ;;		_fprintf
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819                           	psect	text27
  6820  004940                     __ptext27:
  6821                           	opt stack 0
  6822  004940                     ___llmod:
  6823                           	opt stack 24
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;incstack = 0
  6827  004940  0100               	movlb	0	; () banked
  6828  004942  5164               	movf	___llmod@divisor& (0+255),w,b
  6829  004944  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  6830  004946  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  6831  004948  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  6832  00494A  B4D8               	btfsc	status,2,c
  6833  00494C  D024               	goto	l1715
  6834                           
  6835                           ; BSR set to: 0
  6836  00494E  0E01               	movlw	1
  6837  004950  6E21               	movwf	___llmod@counter,c
  6838  004952  D006               	goto	l1710
  6839  004954                     
  6840                           ; BSR set to: 0
  6841                           
  6842                           ; BSR set to: 0
  6843  004954  90D8               	bcf	status,0,c
  6844  004956  3764               	rlcf	___llmod@divisor& (0+255),f,b
  6845  004958  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  6846  00495A  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  6847  00495C  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  6848  00495E  2A21               	incf	___llmod@counter,f,c
  6849  004960                     l1710:
  6850                           
  6851                           ; BSR set to: 0
  6852                           
  6853                           ; BSR set to: 0
  6854  004960  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  6855  004962  D7F8               	goto	l1711
  6856  004964                     u12670:
  6857                           
  6858                           ; BSR set to: 0
  6859                           
  6860                           ; BSR set to: 0
  6861                           
  6862                           ; BSR set to: 0
  6863  004964  5164               	movf	___llmod@divisor& (0+255),w,b
  6864  004966  5D60               	subwf	___llmod@dividend& (0+255),w,b
  6865  004968  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  6866  00496A  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  6867  00496C  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  6868  00496E  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  6869  004970  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  6870  004972  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  6871  004974  A0D8               	btfss	status,0,c
  6872  004976  D008               	goto	l1714
  6873                           
  6874                           ; BSR set to: 0
  6875  004978  5164               	movf	___llmod@divisor& (0+255),w,b
  6876  00497A  5F60               	subwf	___llmod@dividend& (0+255),f,b
  6877  00497C  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  6878  00497E  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  6879  004980  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  6880  004982  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  6881  004984  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  6882  004986  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  6883  004988                     l1714:
  6884                           
  6885                           ; BSR set to: 0
  6886                           
  6887                           ; BSR set to: 0
  6888  004988  90D8               	bcf	status,0,c
  6889  00498A  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  6890  00498C  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  6891  00498E  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  6892  004990  3364               	rrcf	___llmod@divisor& (0+255),f,b
  6893                           
  6894                           ; BSR set to: 0
  6895  004992  2E21               	decfsz	___llmod@counter,f,c
  6896  004994  D7E7               	goto	u12670
  6897  004996                     l1715:
  6898                           
  6899                           ; BSR set to: 0
  6900                           
  6901                           ; BSR set to: 0
  6902  004996  C060  F060         	movff	___llmod@dividend,?___llmod
  6903  00499A  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  6904  00499E  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  6905  0049A2  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  6906                           
  6907                           ; BSR set to: 0
  6908  0049A6  0012               	return		;funcret
  6909  0049A8                     __end_of___llmod:
  6910                           	opt stack 0
  6911                           tosu	equ	0xFFF
  6912                           tosh	equ	0xFFE
  6913                           tosl	equ	0xFFD
  6914                           pclath	equ	0xFFA
  6915                           tblptru	equ	0xFF8
  6916                           tblptrh	equ	0xFF7
  6917                           tblptrl	equ	0xFF6
  6918                           tablat	equ	0xFF5
  6919                           prodh	equ	0xFF4
  6920                           prodl	equ	0xFF3
  6921                           intcon	equ	0xFF2
  6922                           intcon2	equ	0xFF1
  6923                           intcon3	equ	0xFF0
  6924                           postinc0	equ	0xFEE
  6925                           wreg	equ	0xFE8
  6926                           indf1	equ	0xFE7
  6927                           postinc1	equ	0xFE6
  6928                           postdec1	equ	0xFE5
  6929                           fsr1h	equ	0xFE2
  6930                           fsr1l	equ	0xFE1
  6931                           indf2	equ	0xFDF
  6932                           postinc2	equ	0xFDE
  6933                           postdec2	equ	0xFDD
  6934                           plusw2	equ	0xFDB
  6935                           fsr2h	equ	0xFDA
  6936                           fsr2l	equ	0xFD9
  6937                           status	equ	0xFD8
  6938                           
  6939 ;; *************** function _f_open *****************
  6940 ;; Defined at:
  6941 ;;		line 825 in file "bibliotecas/tff.c"
  6942 ;; Parameters:    Size  Location     Type
  6943 ;;  fp              2  119[BANK0 ] PTR struct _FIL
  6944 ;;		 -> fil(28), 
  6945 ;;  path            2  121[BANK0 ] PTR const unsigned char 
  6946 ;;		 -> filename(15), 
  6947 ;;  mode            1  123[BANK0 ] unsigned char 
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;  dw              4   14[BANK1 ] unsigned long 
  6950 ;;  rs              2   12[BANK1 ] unsigned short 
  6951 ;;  dj             14   21[BANK1 ] struct _DIR_E
  6952 ;;  fn             12    0[BANK1 ] unsigned char [12]
  6953 ;;  dir             2   19[BANK1 ] PTR unsigned char 
  6954 ;;		 -> NULL(0), fs(544), 
  6955 ;;  res             1   18[BANK1 ] enum E155
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  1    wreg      enum E3972
  6958 ;; Registers used:
  6959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6965 ;;      Params:         0       5       0       0       0       0       0       0       0
  6966 ;;      Locals:         0       0      35       0       0       0       0       0       0
  6967 ;;      Temps:          0       4       0       0       0       0       0       0       0
  6968 ;;      Totals:         0       9      35       0       0       0       0       0       0
  6969 ;;Total ram usage:       44 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:   12
  6972 ;; This function calls:
  6973 ;;		_auto_mount
  6974 ;;		_get_fattime
  6975 ;;		_memcpy
  6976 ;;		_memset
  6977 ;;		_move_window
  6978 ;;		_remove_chain
  6979 ;;		_reserve_direntry
  6980 ;;		_trace_path
  6981 ;; This function is called by:
  6982 ;;		_escrita_sdcard
  6983 ;;		_sdcard_init
  6984 ;; This function uses a non-reentrant model
  6985 ;;
  6986                           
  6987                           	psect	text28
  6988  001BBE                     __ptext28:
  6989                           	opt stack 0
  6990  001BBE                     _f_open:
  6991                           	opt stack 16
  6992                           
  6993                           ;tff.c: 831: FRESULT res;
  6994                           ;tff.c: 832: DIR_E dj;
  6995                           ;tff.c: 833: BYTE *dir;
  6996                           ;tff.c: 834: char fn[8+3+1];
  6997                           ;tff.c: 837: fp->fs = (0);
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;incstack = 0
  7001  001BBE  0100               	movlb	0	; () banked
  7002  001BC0  EE20 F004          	lfsr	2,4
  7003  001BC4  51D7               	movf	f_open@fp& (0+255),w,b
  7004  001BC6  26D9               	addwf	fsr2l,f,c
  7005  001BC8  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  7006  001BCA  22DA               	addwfc	fsr2h,f,c
  7007  001BCC  0E00               	movlw	0
  7008  001BCE  6EDE               	movwf	postinc2,c
  7009  001BD0  0E00               	movlw	0
  7010  001BD2  6EDD               	movwf	postdec2,c
  7011                           
  7012                           ; BSR set to: 0
  7013                           ;tff.c: 839: mode &= (0x01|0x02|0x08|0x10|0x04);
  7014  001BD4  0E1F               	movlw	31
  7015  001BD6  17DB               	andwf	f_open@mode& (0+255),f,b
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;tff.c: 840: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
  7019  001BD8  0ED9               	movlw	low f_open@path
  7020  001BDA  6F93               	movwf	auto_mount@path& (0+255),b
  7021  001BDC  0E00               	movlw	high f_open@path
  7022  001BDE  6F94               	movwf	(auto_mount@path+1)& (0+255),b
  7023  001BE0  51DB               	movf	f_open@mode& (0+255),w,b
  7024  001BE2  0B1E               	andlw	30
  7025  001BE4  6F95               	movwf	auto_mount@chk_wp& (0+255),b
  7026  001BE6  EC45  F007         	call	_auto_mount	;wreg free
  7027  001BEA  0101               	movlb	1	; () banked
  7028  001BEC  6FAE               	movwf	f_open@res& (0+255),b
  7029                           
  7030                           ; BSR set to: 1
  7031                           ;tff.c: 845: if (res != FR_OK) return res;
  7032  001BEE  51AE               	movf	f_open@res& (0+255),w,b
  7033  001BF0  B4D8               	btfsc	status,2,c
  7034  001BF2  D002               	goto	l1095
  7035                           
  7036                           ; BSR set to: 1
  7037  001BF4  51AE               	movf	f_open@res& (0+255),w,b
  7038                           
  7039                           ; BSR set to: 1
  7040  001BF6  0012               	return	
  7041  001BF8                     l1095:
  7042                           
  7043                           ; BSR set to: 1
  7044                           ;tff.c: 846: res = trace_path(&dj, fn, path, &dir);
  7045                           
  7046                           ; BSR set to: 1
  7047  001BF8  0EB1               	movlw	low f_open@dj
  7048  001BFA  0100               	movlb	0	; () banked
  7049  001BFC  6FC0               	movwf	trace_path@dj& (0+255),b
  7050  001BFE  0E01               	movlw	high f_open@dj
  7051  001C00  6FC1               	movwf	(trace_path@dj+1)& (0+255),b
  7052  001C02  0E9C               	movlw	low f_open@fn
  7053  001C04  6FC2               	movwf	trace_path@fn& (0+255),b
  7054  001C06  0E01               	movlw	high f_open@fn
  7055  001C08  6FC3               	movwf	(trace_path@fn+1)& (0+255),b
  7056  001C0A  C0D9  F0C4         	movff	f_open@path,trace_path@path
  7057  001C0E  C0DA  F0C5         	movff	f_open@path+1,trace_path@path+1
  7058  001C12  0EAF               	movlw	low f_open@dir
  7059  001C14  6FC6               	movwf	trace_path@dir& (0+255),b
  7060  001C16  0E01               	movlw	high f_open@dir
  7061  001C18  6FC7               	movwf	(trace_path@dir+1)& (0+255),b
  7062  001C1A  ECE6  F013         	call	_trace_path	;wreg free
  7063  001C1E  0101               	movlb	1	; () banked
  7064  001C20  6FAE               	movwf	f_open@res& (0+255),b
  7065                           
  7066                           ; BSR set to: 1
  7067                           ;tff.c: 850: if (mode & (0x08|0x10|0x04)) {
  7068  001C22  C0DB  F0DC         	movff	f_open@mode,??_f_open
  7069  001C26  0E1C               	movlw	28
  7070  001C28  0100               	movlb	0	; () banked
  7071  001C2A  17DC               	andwf	??_f_open& (0+255),f,b
  7072  001C2C  B4D8               	btfsc	status,2,c
  7073  001C2E  D0F6               	goto	l1097
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;tff.c: 851: CLUST rs;
  7077                           ;tff.c: 852: DWORD dw;
  7078                           ;tff.c: 853: if (res != FR_OK) {
  7079  001C30  0101               	movlb	1	; () banked
  7080  001C32  51AE               	movf	f_open@res& (0+255),w,b
  7081  001C34  B4D8               	btfsc	status,2,c
  7082  001C36  D042               	goto	l1098
  7083                           
  7084                           ; BSR set to: 1
  7085                           ;tff.c: 854: if (res != FR_NO_FILE) return res;
  7086  001C38  0E02               	movlw	2
  7087  001C3A  19AE               	xorwf	f_open@res& (0+255),w,b
  7088  001C3C  B4D8               	btfsc	status,2,c
  7089  001C3E  D002               	goto	l1099
  7090                           
  7091                           ; BSR set to: 1
  7092  001C40  51AE               	movf	f_open@res& (0+255),w,b
  7093                           
  7094                           ; BSR set to: 1
  7095  001C42  0012               	return	
  7096  001C44                     l1099:
  7097                           
  7098                           ; BSR set to: 1
  7099                           ;tff.c: 855: res = reserve_direntry(&dj, &dir);
  7100                           
  7101                           ; BSR set to: 1
  7102  001C44  0EB1               	movlw	low f_open@dj
  7103  001C46  0100               	movlb	0	; () banked
  7104  001C48  6FC4               	movwf	reserve_direntry@dj& (0+255),b
  7105  001C4A  0E01               	movlw	high f_open@dj
  7106  001C4C  6FC5               	movwf	(reserve_direntry@dj+1)& (0+255),b
  7107  001C4E  0EAF               	movlw	low f_open@dir
  7108  001C50  6FC6               	movwf	reserve_direntry@dir& (0+255),b
  7109  001C52  0E01               	movlw	high f_open@dir
  7110  001C54  6FC7               	movwf	(reserve_direntry@dir+1)& (0+255),b
  7111  001C56  EC4D  F011         	call	_reserve_direntry	;wreg free
  7112  001C5A  0101               	movlb	1	; () banked
  7113  001C5C  6FAE               	movwf	f_open@res& (0+255),b
  7114                           
  7115                           ; BSR set to: 1
  7116                           ;tff.c: 856: if (res != FR_OK) return res;
  7117  001C5E  51AE               	movf	f_open@res& (0+255),w,b
  7118  001C60  B4D8               	btfsc	status,2,c
  7119  001C62  D002               	goto	l1100
  7120                           
  7121                           ; BSR set to: 1
  7122  001C64  51AE               	movf	f_open@res& (0+255),w,b
  7123                           
  7124                           ; BSR set to: 1
  7125  001C66  0012               	return	
  7126  001C68                     l1100:
  7127                           
  7128                           ; BSR set to: 1
  7129                           ;tff.c: 857: memset(dir, 0, 32);
  7130                           
  7131                           ; BSR set to: 1
  7132  001C68  C1AF  F060         	movff	f_open@dir,memset@p1
  7133  001C6C  C1B0  F061         	movff	f_open@dir+1,memset@p1+1
  7134  001C70  0E00               	movlw	0
  7135  001C72  0100               	movlb	0	; () banked
  7136  001C74  6F63               	movwf	(memset@c+1)& (0+255),b
  7137  001C76  0E00               	movlw	0
  7138  001C78  6F62               	movwf	memset@c& (0+255),b
  7139  001C7A  0E00               	movlw	0
  7140  001C7C  6F65               	movwf	(memset@n+1)& (0+255),b
  7141  001C7E  0E20               	movlw	32
  7142  001C80  6F64               	movwf	memset@n& (0+255),b
  7143  001C82  EC75  F028         	call	_memset	;wreg free
  7144                           
  7145                           ;tff.c: 858: memcpy(&dir[0], fn, 8+3);
  7146  001C86  C1AF  F060         	movff	f_open@dir,memcpy@d1
  7147  001C8A  C1B0  F061         	movff	f_open@dir+1,memcpy@d1+1
  7148  001C8E  0E9C               	movlw	low f_open@fn
  7149  001C90  0100               	movlb	0	; () banked
  7150  001C92  6F62               	movwf	memcpy@s1& (0+255),b
  7151  001C94  0E01               	movlw	high f_open@fn
  7152  001C96  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  7153  001C98  0E00               	movlw	0
  7154  001C9A  6F65               	movwf	(memcpy@n+1)& (0+255),b
  7155  001C9C  0E0B               	movlw	11
  7156  001C9E  6F64               	movwf	memcpy@n& (0+255),b
  7157  001CA0  ECB6  F026         	call	_memcpy	;wreg free
  7158                           
  7159                           ;tff.c: 859: dir[12] = fn[11];
  7160  001CA4  0101               	movlb	1	; () banked
  7161  001CA6  EE20 F00C          	lfsr	2,12
  7162  001CAA  51AF               	movf	f_open@dir& (0+255),w,b
  7163  001CAC  26D9               	addwf	fsr2l,f,c
  7164  001CAE  51B0               	movf	(f_open@dir+1)& (0+255),w,b
  7165  001CB0  22DA               	addwfc	fsr2h,f,c
  7166  001CB2  C1A7  FFDF         	movff	f_open@fn+11,indf2
  7167                           
  7168                           ; BSR set to: 1
  7169                           ;tff.c: 860: mode |= 0x08;
  7170  001CB6  0100               	movlb	0	; () banked
  7171  001CB8  87DB               	bsf	f_open@mode& (0+255),3,b
  7172                           
  7173                           ;tff.c: 861: }
  7174  001CBA  D080               	goto	l1106
  7175  001CBC                     l1098:
  7176                           
  7177                           ; BSR set to: 1
  7178                           ;tff.c: 862: else {
  7179                           ;tff.c: 863: if (mode & 0x04)
  7180  001CBC  0100               	movlb	0	; () banked
  7181  001CBE  A5DB               	btfss	f_open@mode& (0+255),2,b
  7182  001CC0  D002               	goto	l1102
  7183                           
  7184                           ; BSR set to: 0
  7185                           ;tff.c: 864: return FR_EXIST;
  7186  001CC2  0E07               	movlw	7
  7187                           
  7188                           ; BSR set to: 0
  7189  001CC4  0012               	return	
  7190  001CC6                     l1102:
  7191                           
  7192                           ; BSR set to: 0
  7193                           ;tff.c: 865: if (!dir || (dir[11] & (0x01|0x10)))
  7194                           
  7195                           ; BSR set to: 0
  7196  001CC6  0101               	movlb	1	; () banked
  7197  001CC8  51AF               	movf	f_open@dir& (0+255),w,b
  7198  001CCA  11B0               	iorwf	(f_open@dir+1)& (0+255),w,b
  7199  001CCC  B4D8               	btfsc	status,2,c
  7200  001CCE  D00D               	goto	u12790
  7201                           
  7202                           ; BSR set to: 1
  7203  001CD0  EE20 F00B          	lfsr	2,11
  7204  001CD4  51AF               	movf	f_open@dir& (0+255),w,b
  7205  001CD6  26D9               	addwf	fsr2l,f,c
  7206  001CD8  51B0               	movf	(f_open@dir+1)& (0+255),w,b
  7207  001CDA  22DA               	addwfc	fsr2h,f,c
  7208  001CDC  50DF               	movf	indf2,w,c
  7209  001CDE  0100               	movlb	0	; () banked
  7210  001CE0  6FDC               	movwf	??_f_open& (0+255),b
  7211  001CE2  0E11               	movlw	17
  7212  001CE4  17DC               	andwf	??_f_open& (0+255),f,b
  7213  001CE6  B4D8               	btfsc	status,2,c
  7214  001CE8  D002               	goto	l1103
  7215  001CEA                     u12790:
  7216                           
  7217                           ;tff.c: 866: return FR_DENIED;
  7218                           
  7219                           ; BSR set to: 0
  7220  001CEA  0E06               	movlw	6
  7221  001CEC  0012               	return	
  7222  001CEE                     l1103:
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;tff.c: 867: if (mode & 0x08) {
  7226  001CEE  A7DB               	btfss	f_open@mode& (0+255),3,b
  7227  001CF0  D065               	goto	l1106
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;tff.c: 872: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  7231  001CF2  0101               	movlb	1	; () banked
  7232  001CF4  EE20 F01A          	lfsr	2,26
  7233  001CF8  51AF               	movf	f_open@dir& (0+255),w,b
  7234  001CFA  26D9               	addwf	fsr2l,f,c
  7235  001CFC  51B0               	movf	(f_open@dir+1)& (0+255),w,b
  7236  001CFE  22DA               	addwfc	fsr2h,f,c
  7237  001D00  CFDE F1A8          	movff	postinc2,f_open@rs
  7238  001D04  CFDD F1A9          	movff	postdec2,f_open@rs+1
  7239                           
  7240                           ;tff.c: 874: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
  7241  001D08  EE20 F01A          	lfsr	2,26
  7242  001D0C  51AF               	movf	f_open@dir& (0+255),w,b
  7243  001D0E  26D9               	addwf	fsr2l,f,c
  7244  001D10  51B0               	movf	(f_open@dir+1)& (0+255),w,b
  7245  001D12  22DA               	addwfc	fsr2h,f,c
  7246  001D14  0E00               	movlw	0
  7247  001D16  6EDE               	movwf	postinc2,c
  7248  001D18  0E00               	movlw	0
  7249  001D1A  6EDD               	movwf	postdec2,c
  7250                           
  7251                           ;tff.c: 875: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
  7252  001D1C  EE20 F01C          	lfsr	2,28
  7253  001D20  51AF               	movf	f_open@dir& (0+255),w,b
  7254  001D22  26D9               	addwf	fsr2l,f,c
  7255  001D24  51B0               	movf	(f_open@dir+1)& (0+255),w,b
  7256  001D26  22DA               	addwfc	fsr2h,f,c
  7257  001D28  6ADE               	clrf	postinc2,c
  7258  001D2A  6ADE               	clrf	postinc2,c
  7259  001D2C  6ADE               	clrf	postinc2,c
  7260  001D2E  6ADD               	clrf	postdec2,c
  7261                           
  7262                           ;tff.c: 876: dj.fs->winflag = 1;
  7263  001D30  EE20 F01F          	lfsr	2,31
  7264  001D34  51B5               	movf	(f_open@dj+4)& (0+255),w,b
  7265  001D36  26D9               	addwf	fsr2l,f,c
  7266  001D38  51B6               	movf	(f_open@dj+5)& (0+255),w,b
  7267  001D3A  22DA               	addwfc	fsr2h,f,c
  7268  001D3C  0E01               	movlw	1
  7269  001D3E  6EDF               	movwf	indf2,c
  7270                           
  7271                           ;tff.c: 877: dw = dj.fs->winsect;
  7272  001D40  EE20 F004          	lfsr	2,4
  7273  001D44  51B5               	movf	(f_open@dj+4)& (0+255),w,b
  7274  001D46  26D9               	addwf	fsr2l,f,c
  7275  001D48  51B6               	movf	(f_open@dj+5)& (0+255),w,b
  7276  001D4A  22DA               	addwfc	fsr2h,f,c
  7277  001D4C  CFDE F1AA          	movff	postinc2,f_open@dw
  7278  001D50  CFDE F1AB          	movff	postinc2,f_open@dw+1
  7279  001D54  CFDE F1AC          	movff	postinc2,f_open@dw+2
  7280  001D58  CFDE F1AD          	movff	postinc2,f_open@dw+3
  7281                           
  7282                           ; BSR set to: 1
  7283                           ;tff.c: 878: if (!remove_chain(rs) || !move_window(dw))
  7284  001D5C  C1A8  F0B6         	movff	f_open@rs,remove_chain@clust
  7285  001D60  C1A9  F0B7         	movff	f_open@rs+1,remove_chain@clust+1
  7286  001D64  ECB4  F020         	call	_remove_chain	;wreg free
  7287  001D68  0900               	iorlw	0
  7288  001D6A  B4D8               	btfsc	status,2,c
  7289  001D6C  D00D               	goto	u12820
  7290  001D6E  C1AA  F08B         	movff	f_open@dw,move_window@sector
  7291  001D72  C1AB  F08C         	movff	f_open@dw+1,move_window@sector+1
  7292  001D76  C1AC  F08D         	movff	f_open@dw+2,move_window@sector+2
  7293  001D7A  C1AD  F08E         	movff	f_open@dw+3,move_window@sector+3
  7294  001D7E  EC42  F019         	call	_move_window	;wreg free
  7295  001D82  0900               	iorlw	0
  7296  001D84  A4D8               	btfss	status,2,c
  7297  001D86  D002               	goto	l1107
  7298  001D88                     u12820:
  7299                           
  7300                           ;tff.c: 879: return FR_RW_ERROR;
  7301  001D88  0E08               	movlw	8
  7302  001D8A  0012               	return	
  7303  001D8C                     l1107:
  7304                           
  7305                           ;tff.c: 880: dj.fs->last_clust = rs - 1;
  7306  001D8C  0EFF               	movlw	255
  7307  001D8E  0100               	movlb	0	; () banked
  7308  001D90  6FDC               	movwf	??_f_open& (0+255),b
  7309  001D92  0EFF               	movlw	255
  7310  001D94  6FDD               	movwf	(??_f_open+1)& (0+255),b
  7311  001D96  C1A8  F0DE         	movff	f_open@rs,??_f_open+2
  7312  001D9A  C1A9  F0DF         	movff	f_open@rs+1,??_f_open+3
  7313  001D9E  51DC               	movf	??_f_open& (0+255),w,b
  7314  001DA0  27DE               	addwf	(??_f_open+2)& (0+255),f,b
  7315  001DA2  51DD               	movf	(??_f_open+1)& (0+255),w,b
  7316  001DA4  23DF               	addwfc	(??_f_open+3)& (0+255),f,b
  7317  001DA6  0101               	movlb	1	; () banked
  7318  001DA8  EE20 F018          	lfsr	2,24
  7319  001DAC  51B5               	movf	(f_open@dj+4)& (0+255),w,b
  7320  001DAE  26D9               	addwf	fsr2l,f,c
  7321  001DB0  51B6               	movf	(f_open@dj+5)& (0+255),w,b
  7322  001DB2  22DA               	addwfc	fsr2h,f,c
  7323  001DB4  C0DE  FFDE         	movff	??_f_open+2,postinc2
  7324  001DB8  C0DF  FFDD         	movff	??_f_open+3,postdec2
  7325  001DBC                     l1106:
  7326                           
  7327                           ;tff.c: 881: }
  7328                           ;tff.c: 882: }
  7329                           ;tff.c: 883: if (mode & 0x08) {
  7330                           
  7331                           ; BSR set to: 1
  7332                           
  7333                           ; BSR set to: 1
  7334  001DBC  0100               	movlb	0	; () banked
  7335  001DBE  A7DB               	btfss	f_open@mode& (0+255),3,b
  7336  001DC0  D04F               	goto	l1116
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;tff.c: 884: dir[11] = 0;
  7340  001DC2  0101               	movlb	1	; () banked
  7341  001DC4  EE20 F00B          	lfsr	2,11
  7342  001DC8  51AF               	movf	f_open@dir& (0+255),w,b
  7343  001DCA  26D9               	addwf	fsr2l,f,c
  7344  001DCC  51B0               	movf	(f_open@dir+1)& (0+255),w,b
  7345  001DCE  22DA               	addwfc	fsr2h,f,c
  7346  001DD0  0E00               	movlw	0
  7347  001DD2  6EDF               	movwf	indf2,c
  7348                           
  7349                           ; BSR set to: 1
  7350                           ;tff.c: 885: dw = get_fattime();
  7351  001DD4  ECAA  F01E         	call	_get_fattime	;wreg free
  7352  001DD8  C060  F1AA         	movff	?_get_fattime,f_open@dw
  7353  001DDC  C061  F1AB         	movff	?_get_fattime+1,f_open@dw+1
  7354  001DE0  C062  F1AC         	movff	?_get_fattime+2,f_open@dw+2
  7355  001DE4  C063  F1AD         	movff	?_get_fattime+3,f_open@dw+3
  7356                           
  7357                           ;tff.c: 886: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
  7358  001DE8  0101               	movlb	1	; () banked
  7359  001DEA  EE20 F00E          	lfsr	2,14
  7360  001DEE  51AF               	movf	f_open@dir& (0+255),w,b
  7361  001DF0  26D9               	addwf	fsr2l,f,c
  7362  001DF2  51B0               	movf	(f_open@dir+1)& (0+255),w,b
  7363  001DF4  22DA               	addwfc	fsr2h,f,c
  7364  001DF6  C1AA  FFDE         	movff	f_open@dw,postinc2
  7365  001DFA  C1AB  FFDE         	movff	f_open@dw+1,postinc2
  7366  001DFE  C1AC  FFDE         	movff	f_open@dw+2,postinc2
  7367  001E02  C1AD  FFDE         	movff	f_open@dw+3,postinc2
  7368                           
  7369                           ; BSR set to: 1
  7370                           ;tff.c: 887: dj.fs->winflag = 1;
  7371  001E06  EE20 F01F          	lfsr	2,31
  7372  001E0A  51B5               	movf	(f_open@dj+4)& (0+255),w,b
  7373  001E0C  26D9               	addwf	fsr2l,f,c
  7374  001E0E  51B6               	movf	(f_open@dj+5)& (0+255),w,b
  7375  001E10  22DA               	addwfc	fsr2h,f,c
  7376  001E12  0E01               	movlw	1
  7377  001E14  6EDF               	movwf	indf2,c
  7378                           
  7379                           ; BSR set to: 1
  7380                           ;tff.c: 888: mode |= 0x20;
  7381  001E16  0100               	movlb	0	; () banked
  7382  001E18  8BDB               	bsf	f_open@mode& (0+255),5,b
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;tff.c: 889: }
  7386                           ;tff.c: 890: }
  7387  001E1A  D022               	goto	l1116
  7388  001E1C                     l1097:
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;tff.c: 892: else {
  7392                           ;tff.c: 894: if (res != FR_OK) return res;
  7393                           
  7394                           ; BSR set to: 0
  7395  001E1C  0101               	movlb	1	; () banked
  7396  001E1E  51AE               	movf	f_open@res& (0+255),w,b
  7397  001E20  B4D8               	btfsc	status,2,c
  7398  001E22  D002               	goto	l1112
  7399                           
  7400                           ; BSR set to: 1
  7401  001E24  51AE               	movf	f_open@res& (0+255),w,b
  7402                           
  7403                           ; BSR set to: 1
  7404  001E26  0012               	return	
  7405  001E28                     l1112:
  7406                           
  7407                           ; BSR set to: 1
  7408                           ;tff.c: 895: if (!dir || (dir[11] & 0x10))
  7409                           
  7410                           ; BSR set to: 1
  7411  001E28  51AF               	movf	f_open@dir& (0+255),w,b
  7412  001E2A  11B0               	iorwf	(f_open@dir+1)& (0+255),w,b
  7413  001E2C  B4D8               	btfsc	status,2,c
  7414  001E2E  D008               	goto	u12860
  7415                           
  7416                           ; BSR set to: 1
  7417  001E30  EE20 F00B          	lfsr	2,11
  7418  001E34  51AF               	movf	f_open@dir& (0+255),w,b
  7419  001E36  26D9               	addwf	fsr2l,f,c
  7420  001E38  51B0               	movf	(f_open@dir+1)& (0+255),w,b
  7421  001E3A  22DA               	addwfc	fsr2h,f,c
  7422  001E3C  A8DF               	btfss	indf2,4,c
  7423  001E3E  D002               	goto	l1113
  7424  001E40                     u12860:
  7425                           
  7426                           ; BSR set to: 1
  7427                           ;tff.c: 896: return FR_NO_FILE;
  7428                           
  7429                           ; BSR set to: 1
  7430  001E40  0E02               	movlw	2
  7431                           
  7432                           ; BSR set to: 1
  7433  001E42  0012               	return	
  7434  001E44                     l1113:
  7435                           
  7436                           ; BSR set to: 1
  7437                           ;tff.c: 898: if ((mode & 0x02) && (dir[11] & 0x01))
  7438  001E44  0100               	movlb	0	; () banked
  7439  001E46  A3DB               	btfss	f_open@mode& (0+255),1,b
  7440  001E48  D00B               	goto	l1116
  7441                           
  7442                           ; BSR set to: 0
  7443  001E4A  0101               	movlb	1	; () banked
  7444  001E4C  EE20 F00B          	lfsr	2,11
  7445  001E50  51AF               	movf	f_open@dir& (0+255),w,b
  7446  001E52  26D9               	addwf	fsr2l,f,c
  7447  001E54  51B0               	movf	(f_open@dir+1)& (0+255),w,b
  7448  001E56  22DA               	addwfc	fsr2h,f,c
  7449  001E58  A0DF               	btfss	indf2,0,c
  7450  001E5A  D002               	goto	l1116
  7451                           
  7452                           ; BSR set to: 1
  7453                           ;tff.c: 899: return FR_DENIED;
  7454  001E5C  0E06               	movlw	6
  7455                           
  7456                           ; BSR set to: 1
  7457  001E5E  0012               	return	
  7458  001E60                     l1116:
  7459                           
  7460                           ;tff.c: 900: }
  7461                           ;tff.c: 901: fp->dir_sect = dj.fs->winsect;
  7462                           
  7463                           ; BSR set to: 1
  7464                           
  7465                           ; BSR set to: 1
  7466  001E60  0101               	movlb	1	; () banked
  7467  001E62  EE20 F004          	lfsr	2,4
  7468  001E66  51B5               	movf	(f_open@dj+4)& (0+255),w,b
  7469  001E68  26D9               	addwf	fsr2l,f,c
  7470  001E6A  51B6               	movf	(f_open@dj+5)& (0+255),w,b
  7471  001E6C  22DA               	addwfc	fsr2h,f,c
  7472  001E6E  0100               	movlb	0	; () banked
  7473  001E70  EE10 F016          	lfsr	1,22
  7474  001E74  51D7               	movf	f_open@fp& (0+255),w,b
  7475  001E76  26E1               	addwf	fsr1l,f,c
  7476  001E78  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  7477  001E7A  22E2               	addwfc	fsr1h,f,c
  7478  001E7C  CFDE FFE6          	movff	postinc2,postinc1
  7479  001E80  CFDE FFE6          	movff	postinc2,postinc1
  7480  001E84  CFDE FFE6          	movff	postinc2,postinc1
  7481  001E88  CFDE FFE6          	movff	postinc2,postinc1
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;tff.c: 902: fp->dir_ptr = dir;
  7485  001E8C  EE20 F01A          	lfsr	2,26
  7486  001E90  51D7               	movf	f_open@fp& (0+255),w,b
  7487  001E92  26D9               	addwf	fsr2l,f,c
  7488  001E94  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  7489  001E96  22DA               	addwfc	fsr2h,f,c
  7490  001E98  C1AF  FFDE         	movff	f_open@dir,postinc2
  7491  001E9C  C1B0  FFDD         	movff	f_open@dir+1,postdec2
  7492                           
  7493                           ; BSR set to: 0
  7494                           ;tff.c: 904: fp->flag = mode;
  7495  001EA0  EE20 F002          	lfsr	2,2
  7496  001EA4  51D7               	movf	f_open@fp& (0+255),w,b
  7497  001EA6  26D9               	addwf	fsr2l,f,c
  7498  001EA8  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  7499  001EAA  22DA               	addwfc	fsr2h,f,c
  7500  001EAC  C0DB  FFDF         	movff	f_open@mode,indf2
  7501                           
  7502                           ;tff.c: 905: fp->org_clust =
  7503                           ;tff.c: 909: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  7504  001EB0  0101               	movlb	1	; () banked
  7505  001EB2  EE20 F01A          	lfsr	2,26
  7506  001EB6  51AF               	movf	f_open@dir& (0+255),w,b
  7507  001EB8  26D9               	addwf	fsr2l,f,c
  7508  001EBA  51B0               	movf	(f_open@dir+1)& (0+255),w,b
  7509  001EBC  22DA               	addwfc	fsr2h,f,c
  7510  001EBE  0100               	movlb	0	; () banked
  7511  001EC0  EE10 F00E          	lfsr	1,14
  7512  001EC4  51D7               	movf	f_open@fp& (0+255),w,b
  7513  001EC6  26E1               	addwf	fsr1l,f,c
  7514  001EC8  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  7515  001ECA  22E2               	addwfc	fsr1h,f,c
  7516  001ECC  CFDE FFE6          	movff	postinc2,postinc1
  7517  001ED0  CFDD FFE5          	movff	postdec2,postdec1
  7518                           
  7519                           ;tff.c: 910: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
  7520  001ED4  0101               	movlb	1	; () banked
  7521  001ED6  EE20 F01C          	lfsr	2,28
  7522  001EDA  51AF               	movf	f_open@dir& (0+255),w,b
  7523  001EDC  26D9               	addwf	fsr2l,f,c
  7524  001EDE  51B0               	movf	(f_open@dir+1)& (0+255),w,b
  7525  001EE0  22DA               	addwfc	fsr2h,f,c
  7526  001EE2  0100               	movlb	0	; () banked
  7527  001EE4  EE10 F00A          	lfsr	1,10
  7528  001EE8  51D7               	movf	f_open@fp& (0+255),w,b
  7529  001EEA  26E1               	addwf	fsr1l,f,c
  7530  001EEC  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  7531  001EEE  22E2               	addwfc	fsr1h,f,c
  7532  001EF0  CFDE FFE6          	movff	postinc2,postinc1
  7533  001EF4  CFDE FFE6          	movff	postinc2,postinc1
  7534  001EF8  CFDE FFE6          	movff	postinc2,postinc1
  7535  001EFC  CFDE FFE6          	movff	postinc2,postinc1
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;tff.c: 911: fp->fptr = 0; fp->csect = 255;
  7539  001F00  EE20 F006          	lfsr	2,6
  7540  001F04  51D7               	movf	f_open@fp& (0+255),w,b
  7541  001F06  26D9               	addwf	fsr2l,f,c
  7542  001F08  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  7543  001F0A  22DA               	addwfc	fsr2h,f,c
  7544  001F0C  6ADE               	clrf	postinc2,c
  7545  001F0E  6ADE               	clrf	postinc2,c
  7546  001F10  6ADE               	clrf	postinc2,c
  7547  001F12  6ADD               	clrf	postdec2,c
  7548                           
  7549                           ; BSR set to: 0
  7550  001F14  EE20 F003          	lfsr	2,3
  7551  001F18  51D7               	movf	f_open@fp& (0+255),w,b
  7552  001F1A  26D9               	addwf	fsr2l,f,c
  7553  001F1C  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  7554  001F1E  22DA               	addwfc	fsr2h,f,c
  7555  001F20  0EFF               	movlw	255
  7556  001F22  6EDF               	movwf	indf2,c
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;tff.c: 912: fp->fs = dj.fs; fp->id = dj.fs->id;
  7560  001F24  EE20 F004          	lfsr	2,4
  7561  001F28  51D7               	movf	f_open@fp& (0+255),w,b
  7562  001F2A  26D9               	addwf	fsr2l,f,c
  7563  001F2C  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  7564  001F2E  22DA               	addwfc	fsr2h,f,c
  7565  001F30  C1B5  FFDE         	movff	f_open@dj+4,postinc2
  7566  001F34  C1B6  FFDD         	movff	f_open@dj+5,postdec2
  7567                           
  7568                           ; BSR set to: 0
  7569  001F38  C1B5  FFD9         	movff	f_open@dj+4,fsr2l
  7570  001F3C  C1B6  FFDA         	movff	f_open@dj+5,fsr2h
  7571  001F40  C0D7  FFE1         	movff	f_open@fp,fsr1l
  7572  001F44  C0D8  FFE2         	movff	f_open@fp+1,fsr1h
  7573  001F48  CFDE FFE6          	movff	postinc2,postinc1
  7574  001F4C  CFDD FFE5          	movff	postdec2,postdec1
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;tff.c: 914: return FR_OK;
  7578  001F50  0E00               	movlw	0
  7579  001F52  0012               	return	
  7580  001F54                     __end_of_f_open:
  7581                           	opt stack 0
  7582                           tosu	equ	0xFFF
  7583                           tosh	equ	0xFFE
  7584                           tosl	equ	0xFFD
  7585                           pclath	equ	0xFFA
  7586                           tblptru	equ	0xFF8
  7587                           tblptrh	equ	0xFF7
  7588                           tblptrl	equ	0xFF6
  7589                           tablat	equ	0xFF5
  7590                           prodh	equ	0xFF4
  7591                           prodl	equ	0xFF3
  7592                           intcon	equ	0xFF2
  7593                           intcon2	equ	0xFF1
  7594                           intcon3	equ	0xFF0
  7595                           postinc0	equ	0xFEE
  7596                           wreg	equ	0xFE8
  7597                           indf1	equ	0xFE7
  7598                           postinc1	equ	0xFE6
  7599                           postdec1	equ	0xFE5
  7600                           fsr1h	equ	0xFE2
  7601                           fsr1l	equ	0xFE1
  7602                           indf2	equ	0xFDF
  7603                           postinc2	equ	0xFDE
  7604                           postdec2	equ	0xFDD
  7605                           plusw2	equ	0xFDB
  7606                           fsr2h	equ	0xFDA
  7607                           fsr2l	equ	0xFD9
  7608                           status	equ	0xFD8
  7609                           
  7610 ;; *************** function _trace_path *****************
  7611 ;; Defined at:
  7612 ;;		line 501 in file "bibliotecas/tff.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;  dj              2   96[BANK0 ] PTR struct _DIR_E
  7615 ;;		 -> f_open@dj(14), 
  7616 ;;  fn              2   98[BANK0 ] PTR unsigned char 
  7617 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  7618 ;;  path            2  100[BANK0 ] PTR const unsigned char 
  7619 ;;		 -> filename(15), 
  7620 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
  7621 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;  dptr            2  117[BANK0 ] PTR unsigned char 
  7624 ;;		 -> fs.win(512), NULL(0), fs(544), 
  7625 ;;  clust           2  114[BANK0 ] unsigned short 
  7626 ;;  fs              2  112[BANK0 ] PTR struct _FATFS
  7627 ;;		 -> NULL(0), fs(544), 
  7628 ;;  ds              1  116[BANK0 ] unsigned char 
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      enum E155
  7631 ;; Registers used:
  7632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7638 ;;      Params:         0       8       0       0       0       0       0       0       0
  7639 ;;      Locals:         0      11       0       0       0       0       0       0       0
  7640 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7641 ;;      Totals:         0      23       0       0       0       0       0       0       0
  7642 ;;Total ram usage:       23 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:   11
  7645 ;; This function calls:
  7646 ;;		_clust2sect
  7647 ;;		_make_dirfile
  7648 ;;		_memcmp
  7649 ;;		_move_window
  7650 ;;		_next_dir_entry
  7651 ;; This function is called by:
  7652 ;;		_f_open
  7653 ;;		_f_opendir
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657                           	psect	text29
  7658  0027CC                     __ptext29:
  7659                           	opt stack 0
  7660  0027CC                     _trace_path:
  7661                           	opt stack 16
  7662                           
  7663                           ;tff.c: 508: CLUST clust;
  7664                           ;tff.c: 509: char ds;
  7665                           ;tff.c: 510: BYTE *dptr = (0);
  7666                           
  7667                           ;incstack = 0
  7668  0027CC  0E00               	movlw	0
  7669  0027CE  0100               	movlb	0	; () banked
  7670  0027D0  6FD5               	movwf	trace_path@dptr& (0+255),b
  7671  0027D2  0E00               	movlw	0
  7672  0027D4  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
  7673                           
  7674                           ;tff.c: 511: FATFS *fs = FatFs;
  7675  0027D6  C0F2  F0D0         	movff	_FatFs,trace_path@fs
  7676  0027DA  C0F3  F0D1         	movff	_FatFs+1,trace_path@fs+1
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;tff.c: 514: dj->fs = fs;
  7680  0027DE  EE20 F004          	lfsr	2,4
  7681  0027E2  51C0               	movf	trace_path@dj& (0+255),w,b
  7682  0027E4  26D9               	addwf	fsr2l,f,c
  7683  0027E6  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  7684  0027E8  22DA               	addwfc	fsr2h,f,c
  7685  0027EA  C0D0  FFDE         	movff	trace_path@fs,postinc2
  7686  0027EE  C0D1  FFDD         	movff	trace_path@fs+1,postdec2
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;tff.c: 515: clust = fs->dirbase;
  7690  0027F2  EE20 F00C          	lfsr	2,12
  7691  0027F6  51D0               	movf	trace_path@fs& (0+255),w,b
  7692  0027F8  26D9               	addwf	fsr2l,f,c
  7693  0027FA  51D1               	movf	(trace_path@fs+1)& (0+255),w,b
  7694  0027FC  22DA               	addwfc	fsr2h,f,c
  7695  0027FE  CFDE F0D2          	movff	postinc2,trace_path@clust
  7696  002802  CFDD F0D3          	movff	postdec2,trace_path@clust+1
  7697                           
  7698                           ; BSR set to: 0
  7699                           ;tff.c: 522: {
  7700                           ;tff.c: 523: dj->clust = dj->sclust = 0;
  7701  002806  EE20 F006          	lfsr	2,6
  7702  00280A  51C0               	movf	trace_path@dj& (0+255),w,b
  7703  00280C  26D9               	addwf	fsr2l,f,c
  7704  00280E  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  7705  002810  22DA               	addwfc	fsr2h,f,c
  7706  002812  0E00               	movlw	0
  7707  002814  6EDE               	movwf	postinc2,c
  7708  002816  0E00               	movlw	0
  7709  002818  6EDD               	movwf	postdec2,c
  7710  00281A  EE10 F008          	lfsr	1,8
  7711  00281E  51C0               	movf	trace_path@dj& (0+255),w,b
  7712  002820  26E1               	addwf	fsr1l,f,c
  7713  002822  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  7714  002824  22E2               	addwfc	fsr1h,f,c
  7715  002826  CFDE FFE6          	movff	postinc2,postinc1
  7716  00282A  CFDD FFE5          	movff	postdec2,postdec1
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;tff.c: 524: dj->sect = clust;
  7720  00282E  51D2               	movf	trace_path@clust& (0+255),w,b
  7721  002830  6FC8               	movwf	??_trace_path& (0+255),b
  7722  002832  51D3               	movf	(trace_path@clust+1)& (0+255),w,b
  7723  002834  6FC9               	movwf	(??_trace_path+1)& (0+255),b
  7724  002836  6BCA               	clrf	(??_trace_path+2)& (0+255),b
  7725  002838  6BCB               	clrf	(??_trace_path+3)& (0+255),b
  7726  00283A  EE20 F00A          	lfsr	2,10
  7727  00283E  51C0               	movf	trace_path@dj& (0+255),w,b
  7728  002840  26D9               	addwf	fsr2l,f,c
  7729  002842  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  7730  002844  22DA               	addwfc	fsr2h,f,c
  7731  002846  C0C8  FFDE         	movff	??_trace_path,postinc2
  7732  00284A  C0C9  FFDE         	movff	??_trace_path+1,postinc2
  7733  00284E  C0CA  FFDE         	movff	??_trace_path+2,postinc2
  7734  002852  C0CB  FFDE         	movff	??_trace_path+3,postinc2
  7735                           
  7736                           ; BSR set to: 0
  7737                           ;tff.c: 525: }
  7738                           ;tff.c: 526: dj->index = 0;
  7739  002856  EE20 F002          	lfsr	2,2
  7740  00285A  51C0               	movf	trace_path@dj& (0+255),w,b
  7741  00285C  26D9               	addwf	fsr2l,f,c
  7742  00285E  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  7743  002860  22DA               	addwfc	fsr2h,f,c
  7744  002862  0E00               	movlw	0
  7745  002864  6EDE               	movwf	postinc2,c
  7746  002866  0E00               	movlw	0
  7747  002868  6EDD               	movwf	postdec2,c
  7748                           
  7749                           ; BSR set to: 0
  7750                           ;tff.c: 528: if (*path == '\0') {
  7751  00286A  C0C4  FFD9         	movff	trace_path@path,fsr2l
  7752  00286E  C0C5  FFDA         	movff	trace_path@path+1,fsr2h
  7753  002872  50DF               	movf	indf2,w,c
  7754  002874  A4D8               	btfss	status,2,c
  7755  002876  D00A               	goto	l1007
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;tff.c: 529: *dir = (0); return FR_OK;
  7759  002878  C0C6  FFD9         	movff	trace_path@dir,fsr2l
  7760  00287C  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
  7761  002880  0E00               	movlw	0
  7762  002882  6EDE               	movwf	postinc2,c
  7763  002884  0E00               	movlw	0
  7764  002886  6EDD               	movwf	postdec2,c
  7765                           
  7766                           ; BSR set to: 0
  7767  002888  0E00               	movlw	0
  7768                           
  7769                           ; BSR set to: 0
  7770  00288A  0012               	return	
  7771  00288C                     l1007:
  7772                           
  7773                           ; BSR set to: 0
  7774                           ;tff.c: 533: ds = make_dirfile(&path, fn);
  7775                           
  7776                           ; BSR set to: 0
  7777                           
  7778                           ;tff.c: 530: }
  7779                           ;tff.c: 532: for (;;) {
  7780                           
  7781                           ; BSR set to: 0
  7782  00288C  0EC4               	movlw	low trace_path@path
  7783  00288E  6F66               	movwf	make_dirfile@path& (0+255),b
  7784  002890  0E00               	movlw	high trace_path@path
  7785  002892  6F67               	movwf	(make_dirfile@path+1)& (0+255),b
  7786  002894  C0C2  F068         	movff	trace_path@fn,make_dirfile@dirname
  7787  002898  C0C3  F069         	movff	trace_path@fn+1,make_dirfile@dirname+1
  7788  00289C  EC90  F01B         	call	_make_dirfile	;wreg free
  7789  0028A0  0100               	movlb	0	; () banked
  7790  0028A2  6FD4               	movwf	trace_path@ds& (0+255),b
  7791                           
  7792                           ; BSR set to: 0
  7793                           ;tff.c: 534: if (ds == 1) return FR_INVALID_NAME;
  7794  0028A4  05D4               	decf	trace_path@ds& (0+255),w,b
  7795  0028A6  A4D8               	btfss	status,2,c
  7796  0028A8  D002               	goto	l1010
  7797                           
  7798                           ; BSR set to: 0
  7799  0028AA  0E04               	movlw	4
  7800                           
  7801                           ; BSR set to: 0
  7802  0028AC  0012               	return	
  7803  0028AE                     l1010:
  7804                           
  7805                           ;tff.c: 536: if (!move_window(dj->sect)) return FR_RW_ERROR;
  7806                           
  7807                           ; BSR set to: 0
  7808                           
  7809                           ;tff.c: 535: for (;;) {
  7810                           
  7811                           ; BSR set to: 0
  7812  0028AE  0100               	movlb	0	; () banked
  7813  0028B0  EE20 F00A          	lfsr	2,10
  7814  0028B4  51C0               	movf	trace_path@dj& (0+255),w,b
  7815  0028B6  26D9               	addwf	fsr2l,f,c
  7816  0028B8  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  7817  0028BA  22DA               	addwfc	fsr2h,f,c
  7818  0028BC  CFDE F08B          	movff	postinc2,move_window@sector
  7819  0028C0  CFDE F08C          	movff	postinc2,move_window@sector+1
  7820  0028C4  CFDE F08D          	movff	postinc2,move_window@sector+2
  7821  0028C8  CFDE F08E          	movff	postinc2,move_window@sector+3
  7822  0028CC  EC42  F019         	call	_move_window	;wreg free
  7823  0028D0  0900               	iorlw	0
  7824  0028D2  A4D8               	btfss	status,2,c
  7825  0028D4  D002               	goto	l1012
  7826  0028D6  0E08               	movlw	8
  7827  0028D8  0012               	return	
  7828  0028DA                     l1012:
  7829                           
  7830                           ;tff.c: 537: dptr = &fs->win[(dj->index & 15) * 32];
  7831  0028DA  0100               	movlb	0	; () banked
  7832  0028DC  EE20 F002          	lfsr	2,2
  7833  0028E0  51C0               	movf	trace_path@dj& (0+255),w,b
  7834  0028E2  26D9               	addwf	fsr2l,f,c
  7835  0028E4  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  7836  0028E6  22DA               	addwfc	fsr2h,f,c
  7837  0028E8  CFDE F0C8          	movff	postinc2,??_trace_path
  7838  0028EC  CFDD F0C9          	movff	postdec2,??_trace_path+1
  7839  0028F0  0E0F               	movlw	15
  7840  0028F2  17C8               	andwf	??_trace_path& (0+255),f,b
  7841  0028F4  0E00               	movlw	0
  7842  0028F6  17C9               	andwf	(??_trace_path+1)& (0+255),f,b
  7843  0028F8  0E05               	movlw	5
  7844  0028FA                     u12195:
  7845  0028FA  90D8               	bcf	status,0,c
  7846  0028FC  37C8               	rlcf	??_trace_path& (0+255),f,b
  7847  0028FE  37C9               	rlcf	(??_trace_path+1)& (0+255),f,b
  7848  002900  2EE8               	decfsz	wreg,f,c
  7849  002902  D7FB               	goto	u12195
  7850  002904  0E20               	movlw	32
  7851  002906  27C8               	addwf	??_trace_path& (0+255),f,b
  7852  002908  0E00               	movlw	0
  7853  00290A  23C9               	addwfc	(??_trace_path+1)& (0+255),f,b
  7854  00290C  51C8               	movf	??_trace_path& (0+255),w,b
  7855  00290E  25D0               	addwf	trace_path@fs& (0+255),w,b
  7856  002910  6FD5               	movwf	trace_path@dptr& (0+255),b
  7857  002912  51C9               	movf	(??_trace_path+1)& (0+255),w,b
  7858  002914  21D1               	addwfc	(trace_path@fs+1)& (0+255),w,b
  7859  002916  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;tff.c: 538: if (dptr[0] == 0)
  7863  002918  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
  7864  00291C  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
  7865  002920  50DF               	movf	indf2,w,c
  7866  002922  A4D8               	btfss	status,2,c
  7867  002924  D00D               	goto	l1013
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;tff.c: 539: return !ds ? FR_NO_FILE : FR_NO_PATH;
  7871  002926  51D4               	movf	trace_path@ds& (0+255),w,b
  7872  002928  B4D8               	btfsc	status,2,c
  7873  00292A  D004               	goto	l1015
  7874                           
  7875                           ; BSR set to: 0
  7876  00292C  0E00               	movlw	0
  7877  00292E  6FCD               	movwf	(_trace_path$1984+1)& (0+255),b
  7878  002930  0E03               	movlw	3
  7879  002932  D003               	goto	L6
  7880  002934                     l1015:
  7881                           
  7882                           ; BSR set to: 0
  7883                           
  7884                           ; BSR set to: 0
  7885  002934  0E00               	movlw	0
  7886  002936  6FCD               	movwf	(_trace_path$1984+1)& (0+255),b
  7887  002938  0E02               	movlw	2
  7888  00293A                     L6:
  7889  00293A  6FCC               	movwf	_trace_path$1984& (0+255),b
  7890                           
  7891                           ; BSR set to: 0
  7892  00293C  51CC               	movf	_trace_path$1984& (0+255),w,b
  7893                           
  7894                           ; BSR set to: 0
  7895  00293E  0012               	return	
  7896  002940                     l1013:
  7897                           
  7898                           ; BSR set to: 0
  7899                           ;tff.c: 540: if (dptr[0] != 0xE5
  7900                           ;tff.c: 541: && !(dptr[11] & 0x08)
  7901                           ;tff.c: 542: && !memcmp(&dptr[0], fn, 8+3) ) break;
  7902                           
  7903                           ; BSR set to: 0
  7904  002940  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
  7905  002944  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
  7906  002948  0EE5               	movlw	229
  7907  00294A  18DE               	xorwf	postinc2,w,c
  7908  00294C  B4D8               	btfsc	status,2,c
  7909  00294E  D01B               	goto	l1018
  7910                           
  7911                           ; BSR set to: 0
  7912  002950  EE20 F00B          	lfsr	2,11
  7913  002954  51D5               	movf	trace_path@dptr& (0+255),w,b
  7914  002956  26D9               	addwf	fsr2l,f,c
  7915  002958  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  7916  00295A  22DA               	addwfc	fsr2h,f,c
  7917  00295C  B6DF               	btfsc	indf2,3,c
  7918  00295E  D013               	goto	l1018
  7919                           
  7920                           ; BSR set to: 0
  7921  002960  C0D5  F060         	movff	trace_path@dptr,memcmp@s1
  7922  002964  C0D6  F061         	movff	trace_path@dptr+1,memcmp@s1+1
  7923  002968  C0C2  F062         	movff	trace_path@fn,memcmp@s2
  7924  00296C  C0C3  F063         	movff	trace_path@fn+1,memcmp@s2+1
  7925  002970  0E00               	movlw	0
  7926  002972  6F65               	movwf	(memcmp@n+1)& (0+255),b
  7927  002974  0E0B               	movlw	11
  7928  002976  6F64               	movwf	memcmp@n& (0+255),b
  7929  002978  ECAB  F021         	call	_memcmp	;wreg free
  7930  00297C  0100               	movlb	0	; () banked
  7931  00297E  5160               	movf	?_memcmp& (0+255),w,b
  7932  002980  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
  7933  002982  B4D8               	btfsc	status,2,c
  7934  002984  D017               	goto	l1019
  7935  002986                     l1018:
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;tff.c: 543: if (!next_dir_entry(dj))
  7939                           
  7940                           ; BSR set to: 0
  7941  002986  C0C0  F0B3         	movff	trace_path@dj,next_dir_entry@dj
  7942  00298A  C0C1  F0B4         	movff	trace_path@dj+1,next_dir_entry@dj+1
  7943  00298E  EC1D  F01A         	call	_next_dir_entry	;wreg free
  7944  002992  0900               	iorlw	0
  7945  002994  A4D8               	btfss	status,2,c
  7946  002996  D78B               	goto	l1010
  7947                           
  7948                           ;tff.c: 544: return !ds ? FR_NO_FILE : FR_NO_PATH;
  7949  002998  0100               	movlb	0	; () banked
  7950  00299A  51D4               	movf	trace_path@ds& (0+255),w,b
  7951  00299C  B4D8               	btfsc	status,2,c
  7952  00299E  D004               	goto	l1022
  7953                           
  7954                           ; BSR set to: 0
  7955  0029A0  0E00               	movlw	0
  7956  0029A2  6FCF               	movwf	(_trace_path$1986+1)& (0+255),b
  7957  0029A4  0E03               	movlw	3
  7958  0029A6  D003               	goto	L7
  7959  0029A8                     l1022:
  7960                           
  7961                           ; BSR set to: 0
  7962                           
  7963                           ; BSR set to: 0
  7964  0029A8  0E00               	movlw	0
  7965  0029AA  6FCF               	movwf	(_trace_path$1986+1)& (0+255),b
  7966  0029AC  0E02               	movlw	2
  7967  0029AE                     L7:
  7968  0029AE  6FCE               	movwf	_trace_path$1986& (0+255),b
  7969                           
  7970                           ; BSR set to: 0
  7971  0029B0  51CE               	movf	_trace_path$1986& (0+255),w,b
  7972                           
  7973                           ; BSR set to: 0
  7974  0029B2  0012               	return	
  7975  0029B4                     l1019:
  7976                           
  7977                           ; BSR set to: 0
  7978                           ;tff.c: 546: if (!ds) { *dir = dptr; return FR_OK; }
  7979                           
  7980                           ; BSR set to: 0
  7981  0029B4  51D4               	movf	trace_path@ds& (0+255),w,b
  7982  0029B6  A4D8               	btfss	status,2,c
  7983  0029B8  D00A               	goto	l1025
  7984                           
  7985                           ; BSR set to: 0
  7986  0029BA  C0C6  FFD9         	movff	trace_path@dir,fsr2l
  7987  0029BE  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
  7988  0029C2  C0D5  FFDE         	movff	trace_path@dptr,postinc2
  7989  0029C6  C0D6  FFDD         	movff	trace_path@dptr+1,postdec2
  7990                           
  7991                           ; BSR set to: 0
  7992  0029CA  0E00               	movlw	0
  7993                           
  7994                           ; BSR set to: 0
  7995  0029CC  0012               	return	
  7996  0029CE                     l1025:
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;tff.c: 547: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
  8000                           
  8001                           ; BSR set to: 0
  8002  0029CE  EE20 F00B          	lfsr	2,11
  8003  0029D2  51D5               	movf	trace_path@dptr& (0+255),w,b
  8004  0029D4  26D9               	addwf	fsr2l,f,c
  8005  0029D6  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  8006  0029D8  22DA               	addwfc	fsr2h,f,c
  8007  0029DA  B8DF               	btfsc	indf2,4,c
  8008  0029DC  D002               	goto	l1026
  8009                           
  8010                           ; BSR set to: 0
  8011  0029DE  0E03               	movlw	3
  8012                           
  8013                           ; BSR set to: 0
  8014  0029E0  0012               	return	
  8015  0029E2                     l1026:
  8016                           
  8017                           ; BSR set to: 0
  8018                           ;tff.c: 548: clust =
  8019                           ;tff.c: 552: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
  8020                           
  8021                           ; BSR set to: 0
  8022  0029E2  EE20 F01A          	lfsr	2,26
  8023  0029E6  51D5               	movf	trace_path@dptr& (0+255),w,b
  8024  0029E8  26D9               	addwf	fsr2l,f,c
  8025  0029EA  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  8026  0029EC  22DA               	addwfc	fsr2h,f,c
  8027  0029EE  CFDE F0D2          	movff	postinc2,trace_path@clust
  8028  0029F2  CFDD F0D3          	movff	postdec2,trace_path@clust+1
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;tff.c: 553: dj->clust = dj->sclust = clust;
  8032  0029F6  EE20 F006          	lfsr	2,6
  8033  0029FA  51C0               	movf	trace_path@dj& (0+255),w,b
  8034  0029FC  26D9               	addwf	fsr2l,f,c
  8035  0029FE  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8036  002A00  22DA               	addwfc	fsr2h,f,c
  8037  002A02  C0D2  FFDE         	movff	trace_path@clust,postinc2
  8038  002A06  C0D3  FFDD         	movff	trace_path@clust+1,postdec2
  8039  002A0A  EE10 F008          	lfsr	1,8
  8040  002A0E  51C0               	movf	trace_path@dj& (0+255),w,b
  8041  002A10  26E1               	addwf	fsr1l,f,c
  8042  002A12  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8043  002A14  22E2               	addwfc	fsr1h,f,c
  8044  002A16  CFDE FFE6          	movff	postinc2,postinc1
  8045  002A1A  CFDD FFE5          	movff	postdec2,postdec1
  8046                           
  8047                           ; BSR set to: 0
  8048                           ;tff.c: 554: dj->sect = clust2sect(clust);
  8049  002A1E  C0D2  F06C         	movff	trace_path@clust,clust2sect@clust
  8050  002A22  C0D3  F06D         	movff	trace_path@clust+1,clust2sect@clust+1
  8051  002A26  EC04  F020         	call	_clust2sect	;wreg free
  8052  002A2A  0100               	movlb	0	; () banked
  8053  002A2C  EE20 F00A          	lfsr	2,10
  8054  002A30  51C0               	movf	trace_path@dj& (0+255),w,b
  8055  002A32  26D9               	addwf	fsr2l,f,c
  8056  002A34  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8057  002A36  22DA               	addwfc	fsr2h,f,c
  8058  002A38  C06C  FFDE         	movff	?_clust2sect,postinc2
  8059  002A3C  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  8060  002A40  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  8061  002A44  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;tff.c: 555: dj->index = 2;
  8065  002A48  EE20 F002          	lfsr	2,2
  8066  002A4C  51C0               	movf	trace_path@dj& (0+255),w,b
  8067  002A4E  26D9               	addwf	fsr2l,f,c
  8068  002A50  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8069  002A52  22DA               	addwfc	fsr2h,f,c
  8070  002A54  0E02               	movlw	2
  8071  002A56  6EDE               	movwf	postinc2,c
  8072  002A58  0E00               	movlw	0
  8073  002A5A  6EDD               	movwf	postdec2,c
  8074                           
  8075                           ;tff.c: 556: }
  8076  002A5C  D717               	goto	l1007
  8077  002A5E                     __end_of_trace_path:
  8078                           	opt stack 0
  8079                           tosu	equ	0xFFF
  8080                           tosh	equ	0xFFE
  8081                           tosl	equ	0xFFD
  8082                           pclath	equ	0xFFA
  8083                           tblptru	equ	0xFF8
  8084                           tblptrh	equ	0xFF7
  8085                           tblptrl	equ	0xFF6
  8086                           tablat	equ	0xFF5
  8087                           prodh	equ	0xFF4
  8088                           prodl	equ	0xFF3
  8089                           intcon	equ	0xFF2
  8090                           intcon2	equ	0xFF1
  8091                           intcon3	equ	0xFF0
  8092                           postinc0	equ	0xFEE
  8093                           wreg	equ	0xFE8
  8094                           indf1	equ	0xFE7
  8095                           postinc1	equ	0xFE6
  8096                           postdec1	equ	0xFE5
  8097                           fsr1h	equ	0xFE2
  8098                           fsr1l	equ	0xFE1
  8099                           indf2	equ	0xFDF
  8100                           postinc2	equ	0xFDE
  8101                           postdec2	equ	0xFDD
  8102                           plusw2	equ	0xFDB
  8103                           fsr2h	equ	0xFDA
  8104                           fsr2l	equ	0xFD9
  8105                           status	equ	0xFD8
  8106                           
  8107 ;; *************** function _make_dirfile *****************
  8108 ;; Defined at:
  8109 ;;		line 438 in file "bibliotecas/tff.c"
  8110 ;; Parameters:    Size  Location     Type
  8111 ;;  path            2    6[BANK0 ] PTR PTR const unsigned c
  8112 ;;		 -> trace_path@path(2), 
  8113 ;;  dirname         2    8[BANK0 ] PTR unsigned char 
  8114 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;  c               1   18[BANK0 ] unsigned char 
  8117 ;;  n               1   17[BANK0 ] unsigned char 
  8118 ;;  a               1   16[BANK0 ] unsigned char 
  8119 ;;  t               1   15[BANK0 ] unsigned char 
  8120 ;;  b               1   14[BANK0 ] unsigned char 
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  1    wreg      unsigned char 
  8123 ;; Registers used:
  8124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8125 ;; Tracked objects:
  8126 ;;		On entry : 0/0
  8127 ;;		On exit  : 0/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8130 ;;      Params:         0       4       0       0       0       0       0       0       0
  8131 ;;      Locals:         0       7       0       0       0       0       0       0       0
  8132 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8133 ;;      Totals:         0      13       0       0       0       0       0       0       0
  8134 ;;Total ram usage:       13 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; Hardware stack levels required when called:    4
  8137 ;; This function calls:
  8138 ;;		_memset
  8139 ;; This function is called by:
  8140 ;;		_trace_path
  8141 ;; This function uses a non-reentrant model
  8142 ;;
  8143                           
  8144                           	psect	text30
  8145  003720                     __ptext30:
  8146                           	opt stack 0
  8147  003720                     _make_dirfile:
  8148                           	opt stack 22
  8149                           
  8150                           ;tff.c: 443: BYTE n, t, c, a, b;
  8151                           ;tff.c: 446: memset(dirname, ' ', 8+3);
  8152                           
  8153                           ;incstack = 0
  8154  003720  C068  F060         	movff	make_dirfile@dirname,memset@p1
  8155  003724  C069  F061         	movff	make_dirfile@dirname+1,memset@p1+1
  8156  003728  0E00               	movlw	0
  8157  00372A  0100               	movlb	0	; () banked
  8158  00372C  6F63               	movwf	(memset@c+1)& (0+255),b
  8159  00372E  0E20               	movlw	32
  8160  003730  6F62               	movwf	memset@c& (0+255),b
  8161  003732  0E00               	movlw	0
  8162  003734  6F65               	movwf	(memset@n+1)& (0+255),b
  8163  003736  0E0B               	movlw	11
  8164  003738  6F64               	movwf	memset@n& (0+255),b
  8165  00373A  EC75  F028         	call	_memset	;wreg free
  8166                           
  8167                           ;tff.c: 447: a = 0; b = 0x18;
  8168  00373E  0E00               	movlw	0
  8169  003740  0100               	movlb	0	; () banked
  8170  003742  6F70               	movwf	make_dirfile@a& (0+255),b
  8171                           
  8172                           ; BSR set to: 0
  8173  003744  0E18               	movlw	24
  8174  003746  6F6E               	movwf	make_dirfile@b& (0+255),b
  8175                           
  8176                           ; BSR set to: 0
  8177                           ;tff.c: 448: n = 0; t = 8;
  8178  003748  0E00               	movlw	0
  8179  00374A  6F71               	movwf	make_dirfile@n& (0+255),b
  8180                           
  8181                           ; BSR set to: 0
  8182  00374C  0E08               	movlw	8
  8183  00374E  6F6F               	movwf	make_dirfile@t& (0+255),b
  8184  003750                     
  8185                           ; BSR set to: 0
  8186                           ;tff.c: 450: c = *(*path)++;
  8187                           
  8188                           ; BSR set to: 0
  8189  003750  C066  FFD9         	movff	make_dirfile@path,fsr2l
  8190  003754  C067  FFDA         	movff	make_dirfile@path+1,fsr2h
  8191  003758  CFDF F06A          	movff	indf2,??_make_dirfile
  8192  00375C  0E01               	movlw	1
  8193  00375E  26DE               	addwf	postinc2,f,c
  8194  003760  CFDF F06B          	movff	indf2,??_make_dirfile+1
  8195  003764  0E00               	movlw	0
  8196  003766  22DD               	addwfc	postdec2,f,c
  8197  003768  C06A  FFD9         	movff	??_make_dirfile,fsr2l
  8198  00376C  C06B  FFDA         	movff	??_make_dirfile+1,fsr2h
  8199  003770  50DF               	movf	indf2,w,c
  8200  003772  6F72               	movwf	make_dirfile@c& (0+255),b
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;tff.c: 451: if (c == '\0' || c == '/') {
  8204  003774  5172               	movf	make_dirfile@c& (0+255),w,b
  8205  003776  B4D8               	btfsc	status,2,c
  8206  003778  D004               	goto	u11530
  8207                           
  8208                           ; BSR set to: 0
  8209  00377A  0E2F               	movlw	47
  8210  00377C  1972               	xorwf	make_dirfile@c& (0+255),w,b
  8211  00377E  A4D8               	btfss	status,2,c
  8212  003780  D013               	goto	l961
  8213  003782                     u11530:
  8214                           
  8215                           ; BSR set to: 0
  8216                           ;tff.c: 452: if (n == 0) break;
  8217                           
  8218                           ; BSR set to: 0
  8219  003782  5171               	movf	make_dirfile@n& (0+255),w,b
  8220  003784  B4D8               	btfsc	status,2,c
  8221  003786  D075               	goto	l965
  8222                           
  8223                           ; BSR set to: 0
  8224                           
  8225                           ; BSR set to: 0
  8226                           
  8227                           ; BSR set to: 0
  8228                           
  8229                           ; BSR set to: 0
  8230                           ;tff.c: 453: dirname[11] = 1 ? (a & b) : 0;
  8231                           
  8232                           ; BSR set to: 0
  8233  003788  5170               	movf	make_dirfile@a& (0+255),w,b
  8234  00378A  156E               	andwf	make_dirfile@b& (0+255),w,b
  8235  00378C  6F6A               	movwf	??_make_dirfile& (0+255),b
  8236  00378E  516A               	movf	??_make_dirfile& (0+255),w,b
  8237  003790  6F6C               	movwf	_make_dirfile$1937& (0+255),b
  8238  003792  6B6D               	clrf	(_make_dirfile$1937+1)& (0+255),b
  8239                           
  8240                           ; BSR set to: 0
  8241                           
  8242                           ; BSR set to: 0
  8243  003794  EE20 F00B          	lfsr	2,11
  8244  003798  5168               	movf	make_dirfile@dirname& (0+255),w,b
  8245  00379A  26D9               	addwf	fsr2l,f,c
  8246  00379C  5169               	movf	(make_dirfile@dirname+1)& (0+255),w,b
  8247  00379E  22DA               	addwfc	fsr2h,f,c
  8248  0037A0  C06C  FFDF         	movff	_make_dirfile$1937,indf2
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;tff.c: 454: return c;
  8252  0037A4  5172               	movf	make_dirfile@c& (0+255),w,b
  8253                           
  8254                           ; BSR set to: 0
  8255  0037A6  0012               	return	
  8256  0037A8                     l961:
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;tff.c: 455: }
  8260                           ;tff.c: 456: if (c <= ' ' || c == 0x7F) break;
  8261                           
  8262                           ; BSR set to: 0
  8263  0037A8  0E20               	movlw	32
  8264  0037AA  6572               	cpfsgt	make_dirfile@c& (0+255),b
  8265  0037AC  D062               	goto	l965
  8266                           
  8267                           ; BSR set to: 0
  8268  0037AE  0E7F               	movlw	127
  8269  0037B0  1972               	xorwf	make_dirfile@c& (0+255),w,b
  8270  0037B2  B4D8               	btfsc	status,2,c
  8271  0037B4  D05E               	goto	l965
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;tff.c: 457: if (c == '.') {
  8275                           
  8276                           ; BSR set to: 0
  8277                           
  8278                           ; BSR set to: 0
  8279  0037B6  0E2E               	movlw	46
  8280  0037B8  1972               	xorwf	make_dirfile@c& (0+255),w,b
  8281  0037BA  A4D8               	btfss	status,2,c
  8282  0037BC  D00C               	goto	l977
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;tff.c: 458: if (!(a & 1) && n >= 1 && n <= 8) {
  8286  0037BE  B170               	btfsc	make_dirfile@a& (0+255),0,b
  8287  0037C0  D058               	goto	l965
  8288                           
  8289                           ; BSR set to: 0
  8290  0037C2  5171               	movf	make_dirfile@n& (0+255),w,b
  8291  0037C4  B4D8               	btfsc	status,2,c
  8292  0037C6  D055               	goto	l965
  8293                           
  8294                           ; BSR set to: 0
  8295  0037C8  0E09               	movlw	9
  8296  0037CA  6171               	cpfslt	make_dirfile@n& (0+255),b
  8297  0037CC  D052               	goto	l965
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;tff.c: 459: n = 8; t = 11; continue;
  8301  0037CE  0E08               	movlw	8
  8302  0037D0  6F71               	movwf	make_dirfile@n& (0+255),b
  8303  0037D2  0E0B               	movlw	11
  8304  0037D4  D7BC               	goto	L8
  8305  0037D6                     l977:
  8306                           
  8307                           ; BSR set to: 0
  8308                           ;tff.c: 469: }
  8309                           ;tff.c: 470: if (c == '"') break;
  8310                           
  8311                           ; BSR set to: 0
  8312  0037D6  0E22               	movlw	34
  8313  0037D8  1972               	xorwf	make_dirfile@c& (0+255),w,b
  8314  0037DA  B4D8               	btfsc	status,2,c
  8315  0037DC  D04A               	goto	l965
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;tff.c: 471: if (c <= ')') goto md_l1;
  8319                           
  8320                           ; BSR set to: 0
  8321                           
  8322                           ; BSR set to: 0
  8323  0037DE  0E2A               	movlw	42
  8324  0037E0  6172               	cpfslt	make_dirfile@c& (0+255),b
  8325  0037E2  D001               	goto	l985
  8326  0037E4  D035               	goto	l1003
  8327  0037E6                     l985:
  8328                           
  8329                           ; BSR set to: 0
  8330                           ;tff.c: 472: if (c <= ',') break;
  8331                           
  8332                           ; BSR set to: 0
  8333  0037E6  0E2D               	movlw	45
  8334  0037E8  6172               	cpfslt	make_dirfile@c& (0+255),b
  8335  0037EA  D001               	goto	l987
  8336  0037EC  D042               	goto	l965
  8337  0037EE                     l987:
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;tff.c: 473: if (c <= '9') goto md_l1;
  8341                           
  8342                           ; BSR set to: 0
  8343  0037EE  0E3A               	movlw	58
  8344  0037F0  6172               	cpfslt	make_dirfile@c& (0+255),b
  8345  0037F2  D001               	goto	l988
  8346  0037F4  D02D               	goto	l1003
  8347  0037F6                     l988:
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;tff.c: 474: if (c <= '?') break;
  8351                           
  8352                           ; BSR set to: 0
  8353  0037F6  0E40               	movlw	64
  8354  0037F8  6172               	cpfslt	make_dirfile@c& (0+255),b
  8355  0037FA  D001               	goto	l989
  8356  0037FC  D03A               	goto	l965
  8357  0037FE                     l989:
  8358                           
  8359                           ; BSR set to: 0
  8360                           ;tff.c: 475: if (!(a & 1)) {
  8361  0037FE  B170               	btfsc	make_dirfile@a& (0+255),0,b
  8362  003800  D027               	goto	l1003
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;tff.c: 476: if (c == '|') break;
  8366  003802  0E7C               	movlw	124
  8367  003804  1972               	xorwf	make_dirfile@c& (0+255),w,b
  8368  003806  B4D8               	btfsc	status,2,c
  8369  003808  D034               	goto	l965
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;tff.c: 477: if (c >= '[' && c <= ']') break;
  8373                           
  8374                           ; BSR set to: 0
  8375                           
  8376                           ; BSR set to: 0
  8377  00380A  0E5A               	movlw	90
  8378  00380C  6572               	cpfsgt	make_dirfile@c& (0+255),b
  8379  00380E  D004               	goto	l992
  8380                           
  8381                           ; BSR set to: 0
  8382  003810  0E5E               	movlw	94
  8383  003812  6172               	cpfslt	make_dirfile@c& (0+255),b
  8384  003814  D001               	goto	l992
  8385  003816  D02D               	goto	l965
  8386  003818                     l992:
  8387                           
  8388                           ; BSR set to: 0
  8389                           
  8390                           ; BSR set to: 0
  8391  003818  0E40               	movlw	64
  8392  00381A  6572               	cpfsgt	make_dirfile@c& (0+255),b
  8393  00381C  D00A               	goto	l997
  8394                           
  8395                           ; BSR set to: 0
  8396  00381E  0E5B               	movlw	91
  8397  003820  6172               	cpfslt	make_dirfile@c& (0+255),b
  8398  003822  D007               	goto	l997
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;tff.c: 479: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
  8402  003824  0E08               	movlw	8
  8403  003826  196F               	xorwf	make_dirfile@t& (0+255),w,b
  8404  003828  A4D8               	btfss	status,2,c
  8405  00382A  D002               	goto	l995
  8406                           
  8407                           ; BSR set to: 0
  8408  00382C  976E               	bcf	make_dirfile@b& (0+255),3,b
  8409  00382E  D001               	goto	l997
  8410  003830                     l995:
  8411                           
  8412                           ; BSR set to: 0
  8413                           
  8414                           ; BSR set to: 0
  8415  003830  996E               	bcf	make_dirfile@b& (0+255),4,b
  8416  003832                     l997:
  8417                           
  8418                           ; BSR set to: 0
  8419                           ;tff.c: 480: if (c >= 'a' && c <= 'z') {
  8420                           
  8421                           ; BSR set to: 0
  8422                           
  8423                           ; BSR set to: 0
  8424  003832  0E60               	movlw	96
  8425  003834  6572               	cpfsgt	make_dirfile@c& (0+255),b
  8426  003836  D00C               	goto	l1003
  8427                           
  8428                           ; BSR set to: 0
  8429  003838  0E7B               	movlw	123
  8430  00383A  6172               	cpfslt	make_dirfile@c& (0+255),b
  8431  00383C  D009               	goto	l1003
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;tff.c: 482: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
  8435  00383E  0E20               	movlw	32
  8436  003840  5F72               	subwf	make_dirfile@c& (0+255),f,b
  8437  003842  0E08               	movlw	8
  8438  003844  196F               	xorwf	make_dirfile@t& (0+255),w,b
  8439  003846  A4D8               	btfss	status,2,c
  8440  003848  D002               	goto	l1001
  8441                           
  8442                           ; BSR set to: 0
  8443  00384A  8770               	bsf	make_dirfile@a& (0+255),3,b
  8444  00384C  D001               	goto	l1003
  8445  00384E                     l1001:
  8446                           
  8447                           ; BSR set to: 0
  8448                           
  8449                           ; BSR set to: 0
  8450  00384E  8970               	bsf	make_dirfile@a& (0+255),4,b
  8451  003850                     l1003:
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;tff.c: 486: a &= 0xFE;
  8455                           
  8456                           ; BSR set to: 0
  8457                           ;tff.c: 483: }
  8458                           ;tff.c: 484: }
  8459                           ;tff.c: 485: md_l1:
  8460                           
  8461                           ; BSR set to: 0
  8462                           
  8463                           ; BSR set to: 0
  8464                           
  8465                           ; BSR set to: 0
  8466  003850  9170               	bcf	make_dirfile@a& (0+255),0,b
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;tff.c: 488: if (n >= t) break;
  8470                           
  8471                           ; BSR set to: 0
  8472                           
  8473                           ;tff.c: 487: md_l2:
  8474  003852  516F               	movf	make_dirfile@t& (0+255),w,b
  8475  003854  5D71               	subwf	make_dirfile@n& (0+255),w,b
  8476  003856  B0D8               	btfsc	status,0,c
  8477  003858  D00C               	goto	l965
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;tff.c: 489: dirname[n++] = c;
  8481                           
  8482                           ; BSR set to: 0
  8483                           
  8484                           ; BSR set to: 0
  8485  00385A  5171               	movf	make_dirfile@n& (0+255),w,b
  8486  00385C  0D01               	mullw	1
  8487  00385E  50F3               	movf	prodl,w,c
  8488  003860  2568               	addwf	make_dirfile@dirname& (0+255),w,b
  8489  003862  6ED9               	movwf	fsr2l,c
  8490  003864  50F4               	movf	prodh,w,c
  8491  003866  2169               	addwfc	(make_dirfile@dirname+1)& (0+255),w,b
  8492  003868  6EDA               	movwf	fsr2h,c
  8493  00386A  C072  FFDF         	movff	make_dirfile@c,indf2
  8494                           
  8495                           ; BSR set to: 0
  8496  00386E  2B71               	incf	make_dirfile@n& (0+255),f,b
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;tff.c: 490: }
  8500  003870  D76F               	goto	l960
  8501  003872                     l965:
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;tff.c: 491: return 1;
  8505                           
  8506                           ; BSR set to: 0
  8507  003872  0E01               	movlw	1
  8508  003874  0012               	return	
  8509  003876                     __end_of_make_dirfile:
  8510                           	opt stack 0
  8511                           tosu	equ	0xFFF
  8512                           tosh	equ	0xFFE
  8513                           tosl	equ	0xFFD
  8514                           pclath	equ	0xFFA
  8515                           tblptru	equ	0xFF8
  8516                           tblptrh	equ	0xFF7
  8517                           tblptrl	equ	0xFF6
  8518                           tablat	equ	0xFF5
  8519                           prodh	equ	0xFF4
  8520                           prodl	equ	0xFF3
  8521                           intcon	equ	0xFF2
  8522                           intcon2	equ	0xFF1
  8523                           intcon3	equ	0xFF0
  8524                           postinc0	equ	0xFEE
  8525                           wreg	equ	0xFE8
  8526                           indf1	equ	0xFE7
  8527                           postinc1	equ	0xFE6
  8528                           postdec1	equ	0xFE5
  8529                           fsr1h	equ	0xFE2
  8530                           fsr1l	equ	0xFE1
  8531                           indf2	equ	0xFDF
  8532                           postinc2	equ	0xFDE
  8533                           postdec2	equ	0xFDD
  8534                           plusw2	equ	0xFDB
  8535                           fsr2h	equ	0xFDA
  8536                           fsr2l	equ	0xFD9
  8537                           status	equ	0xFD8
  8538                           
  8539 ;; *************** function _reserve_direntry *****************
  8540 ;; Defined at:
  8541 ;;		line 567 in file "bibliotecas/tff.c"
  8542 ;; Parameters:    Size  Location     Type
  8543 ;;  dj              2  100[BANK0 ] PTR struct _DIR_E
  8544 ;;		 -> f_open@dj(14), 
  8545 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
  8546 ;;		 -> f_open@dir(2), 
  8547 ;; Auto vars:     Size  Location     Type
  8548 ;;  sector          4  106[BANK0 ] unsigned long 
  8549 ;;  fs              2  116[BANK0 ] PTR struct _FATFS
  8550 ;;		 -> NULL(0), fs(544), 
  8551 ;;  clust           2  114[BANK0 ] unsigned short 
  8552 ;;  dptr            2  111[BANK0 ] PTR unsigned char 
  8553 ;;		 -> fs.win(512), NULL(0), fs(544), 
  8554 ;;  c               1  113[BANK0 ] unsigned char 
  8555 ;;  n               1  110[BANK0 ] unsigned char 
  8556 ;; Return value:  Size  Location     Type
  8557 ;;                  1    wreg      enum E155
  8558 ;; Registers used:
  8559 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8560 ;; Tracked objects:
  8561 ;;		On entry : 0/0
  8562 ;;		On exit  : 0/0
  8563 ;;		Unchanged: 0/0
  8564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8565 ;;      Params:         0       4       0       0       0       0       0       0       0
  8566 ;;      Locals:         0      12       0       0       0       0       0       0       0
  8567 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8568 ;;      Totals:         0      18       0       0       0       0       0       0       0
  8569 ;;Total ram usage:       18 bytes
  8570 ;; Hardware stack levels used:    1
  8571 ;; Hardware stack levels required when called:   11
  8572 ;; This function calls:
  8573 ;;		_clust2sect
  8574 ;;		_create_chain
  8575 ;;		_disk_write
  8576 ;;		_memset
  8577 ;;		_move_window
  8578 ;;		_next_dir_entry
  8579 ;; This function is called by:
  8580 ;;		_f_open
  8581 ;; This function uses a non-reentrant model
  8582 ;;
  8583                           
  8584                           	psect	text31
  8585  00229A                     __ptext31:
  8586                           	opt stack 0
  8587  00229A                     _reserve_direntry:
  8588                           	opt stack 16
  8589                           
  8590                           ;tff.c: 572: CLUST clust;
  8591                           ;tff.c: 573: DWORD sector;
  8592                           ;tff.c: 574: BYTE c, n, *dptr;
  8593                           ;tff.c: 575: FATFS *fs = dj->fs;
  8594                           
  8595                           ; BSR set to: 0
  8596                           ;incstack = 0
  8597  00229A  0100               	movlb	0	; () banked
  8598  00229C  EE20 F004          	lfsr	2,4
  8599  0022A0  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  8600  0022A2  26D9               	addwf	fsr2l,f,c
  8601  0022A4  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  8602  0022A6  22DA               	addwfc	fsr2h,f,c
  8603  0022A8  CFDE F0D4          	movff	postinc2,reserve_direntry@fs
  8604  0022AC  CFDD F0D5          	movff	postdec2,reserve_direntry@fs+1
  8605                           
  8606                           ;tff.c: 579: clust = dj->sclust;
  8607  0022B0  EE20 F006          	lfsr	2,6
  8608  0022B4  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  8609  0022B6  26D9               	addwf	fsr2l,f,c
  8610  0022B8  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  8611  0022BA  22DA               	addwfc	fsr2h,f,c
  8612  0022BC  CFDE F0D2          	movff	postinc2,reserve_direntry@clust
  8613  0022C0  CFDD F0D3          	movff	postdec2,reserve_direntry@clust+1
  8614                           
  8615                           ; BSR set to: 0
  8616                           ;tff.c: 580: if (clust != 0) {
  8617  0022C4  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  8618  0022C6  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  8619  0022C8  B4D8               	btfsc	status,2,c
  8620  0022CA  D020               	goto	l1030
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;tff.c: 581: dj->clust = clust;
  8624  0022CC  EE20 F008          	lfsr	2,8
  8625  0022D0  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  8626  0022D2  26D9               	addwf	fsr2l,f,c
  8627  0022D4  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  8628  0022D6  22DA               	addwfc	fsr2h,f,c
  8629  0022D8  C0D2  FFDE         	movff	reserve_direntry@clust,postinc2
  8630  0022DC  C0D3  FFDD         	movff	reserve_direntry@clust+1,postdec2
  8631                           
  8632                           ; BSR set to: 0
  8633                           ;tff.c: 582: dj->sect = clust2sect(clust);
  8634  0022E0  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
  8635  0022E4  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
  8636  0022E8  EC04  F020         	call	_clust2sect	;wreg free
  8637  0022EC  0100               	movlb	0	; () banked
  8638  0022EE  EE20 F00A          	lfsr	2,10
  8639  0022F2  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  8640  0022F4  26D9               	addwf	fsr2l,f,c
  8641  0022F6  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  8642  0022F8  22DA               	addwfc	fsr2h,f,c
  8643  0022FA  C06C  FFDE         	movff	?_clust2sect,postinc2
  8644  0022FE  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  8645  002302  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  8646  002306  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  8647                           
  8648                           ;tff.c: 583: } else {
  8649  00230A  D014               	goto	l1031
  8650  00230C                     l1030:
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;tff.c: 584: dj->sect = fs->dirbase;
  8654                           
  8655                           ; BSR set to: 0
  8656  00230C  EE20 F00C          	lfsr	2,12
  8657  002310  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  8658  002312  26D9               	addwf	fsr2l,f,c
  8659  002314  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  8660  002316  22DA               	addwfc	fsr2h,f,c
  8661  002318  EE10 F00A          	lfsr	1,10
  8662  00231C  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  8663  00231E  26E1               	addwf	fsr1l,f,c
  8664  002320  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  8665  002322  22E2               	addwfc	fsr1h,f,c
  8666  002324  CFDE FFE6          	movff	postinc2,postinc1
  8667  002328  CFDE FFE6          	movff	postinc2,postinc1
  8668  00232C  CFDE FFE6          	movff	postinc2,postinc1
  8669  002330  CFDE FFE6          	movff	postinc2,postinc1
  8670  002334                     l1031:
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;tff.c: 585: }
  8674                           ;tff.c: 586: dj->index = 0;
  8675                           
  8676                           ; BSR set to: 0
  8677  002334  EE20 F002          	lfsr	2,2
  8678  002338  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  8679  00233A  26D9               	addwf	fsr2l,f,c
  8680  00233C  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  8681  00233E  22DA               	addwfc	fsr2h,f,c
  8682  002340  0E00               	movlw	0
  8683  002342  6EDE               	movwf	postinc2,c
  8684  002344  0E00               	movlw	0
  8685  002346  6EDD               	movwf	postdec2,c
  8686  002348                     
  8687                           ;tff.c: 589: if (!move_window(dj->sect)) return FR_RW_ERROR;
  8688                           
  8689                           ; BSR set to: 0
  8690  002348  0100               	movlb	0	; () banked
  8691  00234A  EE20 F00A          	lfsr	2,10
  8692  00234E  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  8693  002350  26D9               	addwf	fsr2l,f,c
  8694  002352  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  8695  002354  22DA               	addwfc	fsr2h,f,c
  8696  002356  CFDE F08B          	movff	postinc2,move_window@sector
  8697  00235A  CFDE F08C          	movff	postinc2,move_window@sector+1
  8698  00235E  CFDE F08D          	movff	postinc2,move_window@sector+2
  8699  002362  CFDE F08E          	movff	postinc2,move_window@sector+3
  8700  002366  EC42  F019         	call	_move_window	;wreg free
  8701  00236A  0900               	iorlw	0
  8702  00236C  A4D8               	btfss	status,2,c
  8703  00236E  D002               	goto	l1033
  8704  002370  0E08               	movlw	8
  8705  002372  0012               	return	
  8706  002374                     l1033:
  8707                           
  8708                           ;tff.c: 590: dptr = &fs->win[(dj->index & 15) * 32];
  8709  002374  0100               	movlb	0	; () banked
  8710  002376  EE20 F002          	lfsr	2,2
  8711  00237A  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  8712  00237C  26D9               	addwf	fsr2l,f,c
  8713  00237E  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  8714  002380  22DA               	addwfc	fsr2h,f,c
  8715  002382  CFDE F0C8          	movff	postinc2,??_reserve_direntry
  8716  002386  CFDD F0C9          	movff	postdec2,??_reserve_direntry+1
  8717  00238A  0E0F               	movlw	15
  8718  00238C  17C8               	andwf	??_reserve_direntry& (0+255),f,b
  8719  00238E  0E00               	movlw	0
  8720  002390  17C9               	andwf	(??_reserve_direntry+1)& (0+255),f,b
  8721  002392  0E05               	movlw	5
  8722  002394                     u12315:
  8723  002394  90D8               	bcf	status,0,c
  8724  002396  37C8               	rlcf	??_reserve_direntry& (0+255),f,b
  8725  002398  37C9               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
  8726  00239A  2EE8               	decfsz	wreg,f,c
  8727  00239C  D7FB               	goto	u12315
  8728  00239E  0E20               	movlw	32
  8729  0023A0  27C8               	addwf	??_reserve_direntry& (0+255),f,b
  8730  0023A2  0E00               	movlw	0
  8731  0023A4  23C9               	addwfc	(??_reserve_direntry+1)& (0+255),f,b
  8732  0023A6  51C8               	movf	??_reserve_direntry& (0+255),w,b
  8733  0023A8  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  8734  0023AA  6FCF               	movwf	reserve_direntry@dptr& (0+255),b
  8735  0023AC  51C9               	movf	(??_reserve_direntry+1)& (0+255),w,b
  8736  0023AE  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  8737  0023B0  6FD0               	movwf	(reserve_direntry@dptr+1)& (0+255),b
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;tff.c: 591: c = dptr[0];
  8741  0023B2  C0CF  FFD9         	movff	reserve_direntry@dptr,fsr2l
  8742  0023B6  C0D0  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
  8743  0023BA  50DF               	movf	indf2,w,c
  8744  0023BC  6FD1               	movwf	reserve_direntry@c& (0+255),b
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;tff.c: 592: if (c == 0 || c == 0xE5) {
  8748  0023BE  51D1               	movf	reserve_direntry@c& (0+255),w,b
  8749  0023C0  B4D8               	btfsc	status,2,c
  8750  0023C2  D004               	goto	u12330
  8751                           
  8752                           ; BSR set to: 0
  8753  0023C4  0EE5               	movlw	229
  8754  0023C6  19D1               	xorwf	reserve_direntry@c& (0+255),w,b
  8755  0023C8  A4D8               	btfss	status,2,c
  8756  0023CA  D00A               	goto	l1035
  8757  0023CC                     u12330:
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;tff.c: 593: *dir = dptr; return FR_OK;
  8761                           
  8762                           ; BSR set to: 0
  8763  0023CC  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
  8764  0023D0  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
  8765  0023D4  C0CF  FFDE         	movff	reserve_direntry@dptr,postinc2
  8766  0023D8  C0D0  FFDD         	movff	reserve_direntry@dptr+1,postdec2
  8767                           
  8768                           ; BSR set to: 0
  8769  0023DC  0E00               	movlw	0
  8770                           
  8771                           ; BSR set to: 0
  8772  0023DE  0012               	return	
  8773  0023E0                     l1035:
  8774                           
  8775                           ; BSR set to: 0
  8776                           ;tff.c: 594: }
  8777                           ;tff.c: 595: } while (next_dir_entry(dj));
  8778                           
  8779                           ; BSR set to: 0
  8780  0023E0  C0C4  F0B3         	movff	reserve_direntry@dj,next_dir_entry@dj
  8781  0023E4  C0C5  F0B4         	movff	reserve_direntry@dj+1,next_dir_entry@dj+1
  8782  0023E8  EC1D  F01A         	call	_next_dir_entry	;wreg free
  8783  0023EC  0900               	iorlw	0
  8784  0023EE  A4D8               	btfss	status,2,c
  8785  0023F0  D7AB               	goto	l1032
  8786                           
  8787                           ;tff.c: 599: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
  8788  0023F2  0100               	movlb	0	; () banked
  8789  0023F4  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  8790  0023F6  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  8791  0023F8  B4D8               	btfsc	status,2,c
  8792  0023FA  D015               	goto	u12360
  8793                           
  8794                           ; BSR set to: 0
  8795  0023FC  EE20 F008          	lfsr	2,8
  8796  002400  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  8797  002402  26D9               	addwf	fsr2l,f,c
  8798  002404  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  8799  002406  22DA               	addwfc	fsr2h,f,c
  8800  002408  CFDE F0B6          	movff	postinc2,create_chain@clust
  8801  00240C  CFDD F0B7          	movff	postdec2,create_chain@clust+1
  8802  002410  EC62  F018         	call	_create_chain	;wreg free
  8803  002414  C0B6  F0D2         	movff	?_create_chain,reserve_direntry@clust
  8804  002418  C0B7  F0D3         	movff	?_create_chain+1,reserve_direntry@clust+1
  8805  00241C  0100               	movlb	0	; () banked
  8806  00241E  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  8807  002420  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  8808  002422  A4D8               	btfss	status,2,c
  8809  002424  D002               	goto	l1039
  8810  002426                     u12360:
  8811                           
  8812                           ; BSR set to: 0
  8813                           
  8814                           ; BSR set to: 0
  8815  002426  0E06               	movlw	6
  8816                           
  8817                           ; BSR set to: 0
  8818  002428  0012               	return	
  8819  00242A                     l1039:
  8820                           
  8821                           ; BSR set to: 0
  8822                           ;tff.c: 600: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
  8823                           
  8824                           ; BSR set to: 0
  8825  00242A  05D2               	decf	reserve_direntry@clust& (0+255),w,b
  8826  00242C  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  8827  00242E  B4D8               	btfsc	status,2,c
  8828  002430  D00D               	goto	u12380
  8829                           
  8830                           ; BSR set to: 0
  8831  002432  0E00               	movlw	0
  8832  002434  6F8B               	movwf	move_window@sector& (0+255),b
  8833  002436  0E00               	movlw	0
  8834  002438  6F8C               	movwf	(move_window@sector+1)& (0+255),b
  8835  00243A  0E00               	movlw	0
  8836  00243C  6F8D               	movwf	(move_window@sector+2)& (0+255),b
  8837  00243E  0E00               	movlw	0
  8838  002440  6F8E               	movwf	(move_window@sector+3)& (0+255),b
  8839  002442  EC42  F019         	call	_move_window	;wreg free
  8840  002446  0900               	iorlw	0
  8841  002448  A4D8               	btfss	status,2,c
  8842  00244A  D002               	goto	l1042
  8843  00244C                     u12380:
  8844  00244C  0E08               	movlw	8
  8845  00244E  0012               	return	
  8846  002450                     l1042:
  8847                           
  8848                           ;tff.c: 602: fs->winsect = sector = clust2sect(clust);
  8849  002450  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
  8850  002454  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
  8851  002458  EC04  F020         	call	_clust2sect	;wreg free
  8852  00245C  C06C  F0CA         	movff	?_clust2sect,reserve_direntry@sector
  8853  002460  C06D  F0CB         	movff	?_clust2sect+1,reserve_direntry@sector+1
  8854  002464  C06E  F0CC         	movff	?_clust2sect+2,reserve_direntry@sector+2
  8855  002468  C06F  F0CD         	movff	?_clust2sect+3,reserve_direntry@sector+3
  8856  00246C  0100               	movlb	0	; () banked
  8857  00246E  EE20 F004          	lfsr	2,4
  8858  002472  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  8859  002474  26D9               	addwf	fsr2l,f,c
  8860  002476  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  8861  002478  22DA               	addwfc	fsr2h,f,c
  8862  00247A  C0CA  FFDE         	movff	reserve_direntry@sector,postinc2
  8863  00247E  C0CB  FFDE         	movff	reserve_direntry@sector+1,postinc2
  8864  002482  C0CC  FFDE         	movff	reserve_direntry@sector+2,postinc2
  8865  002486  C0CD  FFDE         	movff	reserve_direntry@sector+3,postinc2
  8866                           
  8867                           ;tff.c: 603: memset(fs->win, 0, 512U);
  8868  00248A  0E20               	movlw	32
  8869  00248C  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  8870  00248E  6F60               	movwf	memset@p1& (0+255),b
  8871  002490  0E00               	movlw	0
  8872  002492  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  8873  002494  6F61               	movwf	(memset@p1+1)& (0+255),b
  8874  002496  0E00               	movlw	0
  8875  002498  6F63               	movwf	(memset@c+1)& (0+255),b
  8876  00249A  0E00               	movlw	0
  8877  00249C  6F62               	movwf	memset@c& (0+255),b
  8878  00249E  0E02               	movlw	2
  8879  0024A0  6F65               	movwf	(memset@n+1)& (0+255),b
  8880  0024A2  0E00               	movlw	0
  8881  0024A4  6F64               	movwf	memset@n& (0+255),b
  8882  0024A6  EC75  F028         	call	_memset	;wreg free
  8883                           
  8884                           ;tff.c: 604: for (n = fs->csize; n; n--) {
  8885  0024AA  0100               	movlb	0	; () banked
  8886  0024AC  EE20 F01D          	lfsr	2,29
  8887  0024B0  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  8888  0024B2  26D9               	addwf	fsr2l,f,c
  8889  0024B4  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  8890  0024B6  22DA               	addwfc	fsr2h,f,c
  8891  0024B8  50DF               	movf	indf2,w,c
  8892  0024BA  6FCE               	movwf	reserve_direntry@n& (0+255),b
  8893  0024BC  D020               	goto	l1045
  8894  0024BE                     
  8895                           ; BSR set to: 0
  8896                           ;tff.c: 605: if (disk_write(0, fs->win, sector, 1) != RES_OK)
  8897                           
  8898                           ; BSR set to: 0
  8899  0024BE  0E20               	movlw	32
  8900  0024C0  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  8901  0024C2  6F7F               	movwf	disk_write@buff& (0+255),b
  8902  0024C4  0E00               	movlw	0
  8903  0024C6  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  8904  0024C8  6F80               	movwf	(disk_write@buff+1)& (0+255),b
  8905  0024CA  C0CA  F081         	movff	reserve_direntry@sector,disk_write@sector
  8906  0024CE  C0CB  F082         	movff	reserve_direntry@sector+1,disk_write@sector+1
  8907  0024D2  C0CC  F083         	movff	reserve_direntry@sector+2,disk_write@sector+2
  8908  0024D6  C0CD  F084         	movff	reserve_direntry@sector+3,disk_write@sector+3
  8909  0024DA  0E01               	movlw	1
  8910  0024DC  6F85               	movwf	disk_write@count& (0+255),b
  8911  0024DE  0E00               	movlw	0
  8912  0024E0  EC24  F023         	call	_disk_write
  8913  0024E4  0900               	iorlw	0
  8914  0024E6  B4D8               	btfsc	status,2,c
  8915  0024E8  D002               	goto	l1047
  8916                           
  8917                           ;tff.c: 606: return FR_RW_ERROR;
  8918  0024EA  0E08               	movlw	8
  8919  0024EC  0012               	return	
  8920  0024EE                     l1047:
  8921                           
  8922                           ;tff.c: 607: sector++;
  8923  0024EE  0E01               	movlw	1
  8924  0024F0  0100               	movlb	0	; () banked
  8925  0024F2  27CA               	addwf	reserve_direntry@sector& (0+255),f,b
  8926  0024F4  0E00               	movlw	0
  8927  0024F6  23CB               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
  8928  0024F8  23CC               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
  8929  0024FA  23CD               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
  8930                           
  8931                           ; BSR set to: 0
  8932  0024FC  07CE               	decf	reserve_direntry@n& (0+255),f,b
  8933  0024FE                     l1045:
  8934                           
  8935                           ; BSR set to: 0
  8936                           
  8937                           ; BSR set to: 0
  8938  0024FE  51CE               	movf	reserve_direntry@n& (0+255),w,b
  8939  002500  A4D8               	btfss	status,2,c
  8940  002502  D7DD               	goto	l1046
  8941                           
  8942                           ; BSR set to: 0
  8943                           ;tff.c: 608: }
  8944                           ;tff.c: 609: fs->winflag = 1;
  8945                           
  8946                           ; BSR set to: 0
  8947  002504  EE20 F01F          	lfsr	2,31
  8948  002508  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  8949  00250A  26D9               	addwf	fsr2l,f,c
  8950  00250C  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  8951  00250E  22DA               	addwfc	fsr2h,f,c
  8952  002510  0E01               	movlw	1
  8953  002512  6EDF               	movwf	indf2,c
  8954                           
  8955                           ;tff.c: 610: *dir = fs->win;
  8956  002514  0E20               	movlw	32
  8957  002516  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  8958  002518  6FC8               	movwf	??_reserve_direntry& (0+255),b
  8959  00251A  0E00               	movlw	0
  8960  00251C  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  8961  00251E  6FC9               	movwf	(??_reserve_direntry+1)& (0+255),b
  8962  002520  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
  8963  002524  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
  8964  002528  C0C8  FFDE         	movff	??_reserve_direntry,postinc2
  8965  00252C  C0C9  FFDD         	movff	??_reserve_direntry+1,postdec2
  8966                           
  8967                           ; BSR set to: 0
  8968                           ;tff.c: 611: return FR_OK;
  8969  002530  0E00               	movlw	0
  8970  002532  0012               	return	
  8971  002534                     __end_of_reserve_direntry:
  8972                           	opt stack 0
  8973                           tosu	equ	0xFFF
  8974                           tosh	equ	0xFFE
  8975                           tosl	equ	0xFFD
  8976                           pclath	equ	0xFFA
  8977                           tblptru	equ	0xFF8
  8978                           tblptrh	equ	0xFF7
  8979                           tblptrl	equ	0xFF6
  8980                           tablat	equ	0xFF5
  8981                           prodh	equ	0xFF4
  8982                           prodl	equ	0xFF3
  8983                           intcon	equ	0xFF2
  8984                           intcon2	equ	0xFF1
  8985                           intcon3	equ	0xFF0
  8986                           postinc0	equ	0xFEE
  8987                           wreg	equ	0xFE8
  8988                           indf1	equ	0xFE7
  8989                           postinc1	equ	0xFE6
  8990                           postdec1	equ	0xFE5
  8991                           fsr1h	equ	0xFE2
  8992                           fsr1l	equ	0xFE1
  8993                           indf2	equ	0xFDF
  8994                           postinc2	equ	0xFDE
  8995                           postdec2	equ	0xFDD
  8996                           plusw2	equ	0xFDB
  8997                           fsr2h	equ	0xFDA
  8998                           fsr2l	equ	0xFD9
  8999                           status	equ	0xFD8
  9000                           
  9001 ;; *************** function _next_dir_entry *****************
  9002 ;; Defined at:
  9003 ;;		line 358 in file "bibliotecas/tff.c"
  9004 ;; Parameters:    Size  Location     Type
  9005 ;;  dj              2   83[BANK0 ] PTR struct _DIR_E
  9006 ;;		 -> f_open@dj(14), 
  9007 ;; Auto vars:     Size  Location     Type
  9008 ;;  idx             2   94[BANK0 ] unsigned short 
  9009 ;;  clust           2   92[BANK0 ] unsigned short 
  9010 ;; Return value:  Size  Location     Type
  9011 ;;                  1    wreg      enum E105
  9012 ;; Registers used:
  9013 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9014 ;; Tracked objects:
  9015 ;;		On entry : 0/0
  9016 ;;		On exit  : 0/0
  9017 ;;		Unchanged: 0/0
  9018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9019 ;;      Params:         0       2       0       0       0       0       0       0       0
  9020 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9021 ;;      Temps:          0       7       0       0       0       0       0       0       0
  9022 ;;      Totals:         0      13       0       0       0       0       0       0       0
  9023 ;;Total ram usage:       13 bytes
  9024 ;; Hardware stack levels used:    1
  9025 ;; Hardware stack levels required when called:   10
  9026 ;; This function calls:
  9027 ;;		_clust2sect
  9028 ;;		_get_cluster
  9029 ;; This function is called by:
  9030 ;;		_trace_path
  9031 ;;		_reserve_direntry
  9032 ;;		_f_readdir
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           	psect	text32
  9037  00343A                     __ptext32:
  9038                           	opt stack 0
  9039  00343A                     _next_dir_entry:
  9040                           	opt stack 16
  9041                           
  9042                           ;tff.c: 362: CLUST clust;
  9043                           ;tff.c: 363: WORD idx;
  9044                           ;tff.c: 366: idx = dj->index + 1;
  9045                           
  9046                           ;incstack = 0
  9047  00343A  0100               	movlb	0	; () banked
  9048  00343C  EE20 F002          	lfsr	2,2
  9049  003440  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9050  003442  26D9               	addwf	fsr2l,f,c
  9051  003444  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9052  003446  22DA               	addwfc	fsr2h,f,c
  9053  003448  CFDE F0B5          	movff	postinc2,??_next_dir_entry
  9054  00344C  CFDD F0B6          	movff	postdec2,??_next_dir_entry+1
  9055  003450  0E01               	movlw	1
  9056  003452  25B5               	addwf	??_next_dir_entry& (0+255),w,b
  9057  003454  6FBE               	movwf	next_dir_entry@idx& (0+255),b
  9058  003456  0E00               	movlw	0
  9059  003458  21B6               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
  9060  00345A  6FBF               	movwf	(next_dir_entry@idx+1)& (0+255),b
  9061                           
  9062                           ; BSR set to: 0
  9063                           ;tff.c: 367: if ((idx & 15) == 0) {
  9064  00345C  0E0F               	movlw	15
  9065  00345E  15BE               	andwf	next_dir_entry@idx& (0+255),w,b
  9066  003460  6FB5               	movwf	??_next_dir_entry& (0+255),b
  9067  003462  0E00               	movlw	0
  9068  003464  15BF               	andwf	(next_dir_entry@idx+1)& (0+255),w,b
  9069  003466  6FB6               	movwf	(??_next_dir_entry+1)& (0+255),b
  9070  003468  51B5               	movf	??_next_dir_entry& (0+255),w,b
  9071  00346A  11B6               	iorwf	(??_next_dir_entry+1)& (0+255),w,b
  9072  00346C  A4D8               	btfss	status,2,c
  9073  00346E  D09D               	goto	l937
  9074                           
  9075                           ; BSR set to: 0
  9076                           ;tff.c: 368: dj->sect++;
  9077  003470  EE20 F00A          	lfsr	2,10
  9078  003474  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9079  003476  26D9               	addwf	fsr2l,f,c
  9080  003478  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9081  00347A  22DA               	addwfc	fsr2h,f,c
  9082  00347C  2ADE               	incf	postinc2,f,c
  9083  00347E  0E00               	movlw	0
  9084  003480  22DE               	addwfc	postinc2,f,c
  9085  003482  22DE               	addwfc	postinc2,f,c
  9086  003484  22DE               	addwfc	postinc2,f,c
  9087                           
  9088                           ;tff.c: 369: if (dj->clust == 0) {
  9089  003486  EE20 F008          	lfsr	2,8
  9090  00348A  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9091  00348C  26D9               	addwf	fsr2l,f,c
  9092  00348E  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9093  003490  22DA               	addwfc	fsr2h,f,c
  9094  003492  50DE               	movf	postinc2,w,c
  9095  003494  10DE               	iorwf	postinc2,w,c
  9096  003496  A4D8               	btfss	status,2,c
  9097  003498  D014               	goto	l933
  9098                           
  9099                           ; BSR set to: 0
  9100                           ;tff.c: 370: if (idx >= dj->fs->n_rootdir) return FALSE;
  9101  00349A  EE20 F004          	lfsr	2,4
  9102  00349E  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9103  0034A0  26D9               	addwf	fsr2l,f,c
  9104  0034A2  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9105  0034A4  22DA               	addwfc	fsr2h,f,c
  9106  0034A6  EE10 F002          	lfsr	1,2
  9107  0034AA  50DE               	movf	postinc2,w,c
  9108  0034AC  26E1               	addwf	fsr1l,f,c
  9109  0034AE  50DD               	movf	postdec2,w,c
  9110  0034B0  22E2               	addwfc	fsr1h,f,c
  9111  0034B2  50E6               	movf	postinc1,w,c
  9112  0034B4  5DBE               	subwf	next_dir_entry@idx& (0+255),w,b
  9113  0034B6  50E6               	movf	postinc1,w,c
  9114  0034B8  59BF               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
  9115  0034BA  A0D8               	btfss	status,0,c
  9116  0034BC  D076               	goto	l937
  9117                           
  9118                           ; BSR set to: 0
  9119  0034BE  0E00               	movlw	0
  9120                           
  9121                           ; BSR set to: 0
  9122  0034C0  0012               	return	
  9123  0034C2                     l933:
  9124                           
  9125                           ; BSR set to: 0
  9126                           ;tff.c: 372: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
  9127                           
  9128                           ; BSR set to: 0
  9129  0034C2  C0BE  F0B5         	movff	next_dir_entry@idx,??_next_dir_entry
  9130  0034C6  C0BF  F0B6         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
  9131  0034CA  0E04               	movlw	4
  9132  0034CC  6FB7               	movwf	(??_next_dir_entry+2)& (0+255),b
  9133  0034CE                     u11485:
  9134  0034CE  90D8               	bcf	status,0,c
  9135  0034D0  33B6               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
  9136  0034D2  33B5               	rrcf	??_next_dir_entry& (0+255),f,b
  9137  0034D4  2FB7               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
  9138  0034D6  D7FB               	goto	u11485
  9139  0034D8  0EFF               	movlw	255
  9140  0034DA  6FB8               	movwf	(??_next_dir_entry+3)& (0+255),b
  9141  0034DC  0EFF               	movlw	255
  9142  0034DE  6FB9               	movwf	(??_next_dir_entry+4)& (0+255),b
  9143  0034E0  EE20 F004          	lfsr	2,4
  9144  0034E4  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9145  0034E6  26D9               	addwf	fsr2l,f,c
  9146  0034E8  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9147  0034EA  22DA               	addwfc	fsr2h,f,c
  9148  0034EC  EE10 F01D          	lfsr	1,29
  9149  0034F0  50DE               	movf	postinc2,w,c
  9150  0034F2  26E1               	addwf	fsr1l,f,c
  9151  0034F4  50DD               	movf	postdec2,w,c
  9152  0034F6  22E2               	addwfc	fsr1h,f,c
  9153  0034F8  50E7               	movf	indf1,w,c
  9154  0034FA  6FBA               	movwf	(??_next_dir_entry+5)& (0+255),b
  9155  0034FC  6BBB               	clrf	(??_next_dir_entry+6)& (0+255),b
  9156  0034FE  51B8               	movf	(??_next_dir_entry+3)& (0+255),w,b
  9157  003500  27BA               	addwf	(??_next_dir_entry+5)& (0+255),f,b
  9158  003502  51B9               	movf	(??_next_dir_entry+4)& (0+255),w,b
  9159  003504  23BB               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
  9160  003506  51B5               	movf	??_next_dir_entry& (0+255),w,b
  9161  003508  17BA               	andwf	(??_next_dir_entry+5)& (0+255),f,b
  9162  00350A  51B6               	movf	(??_next_dir_entry+1)& (0+255),w,b
  9163  00350C  17BB               	andwf	(??_next_dir_entry+6)& (0+255),f,b
  9164  00350E  51BA               	movf	(??_next_dir_entry+5)& (0+255),w,b
  9165  003510  11BB               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
  9166  003512  A4D8               	btfss	status,2,c
  9167  003514  D04A               	goto	l937
  9168                           
  9169                           ; BSR set to: 0
  9170                           ;tff.c: 373: clust = get_cluster(dj->clust);
  9171  003516  EE20 F008          	lfsr	2,8
  9172  00351A  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9173  00351C  26D9               	addwf	fsr2l,f,c
  9174  00351E  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9175  003520  22DA               	addwfc	fsr2h,f,c
  9176  003522  CFDE F0A0          	movff	postinc2,get_cluster@clust
  9177  003526  CFDD F0A1          	movff	postdec2,get_cluster@clust+1
  9178  00352A  EC6C  F016         	call	_get_cluster	;wreg free
  9179  00352E  C0A0  F0BC         	movff	?_get_cluster,next_dir_entry@clust
  9180  003532  C0A1  F0BD         	movff	?_get_cluster+1,next_dir_entry@clust+1
  9181                           
  9182                           ;tff.c: 374: if (clust < 2 || clust >= dj->fs->max_clust)
  9183  003536  0100               	movlb	0	; () banked
  9184  003538  51BD               	movf	(next_dir_entry@clust+1)& (0+255),w,b
  9185  00353A  E104               	bnz	u11500
  9186  00353C  0E02               	movlw	2
  9187  00353E  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
  9188  003540  A0D8               	btfss	status,0,c
  9189  003542  D012               	goto	u11510
  9190  003544                     u11500:
  9191                           
  9192                           ; BSR set to: 0
  9193  003544  EE20 F004          	lfsr	2,4
  9194  003548  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9195  00354A  26D9               	addwf	fsr2l,f,c
  9196  00354C  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9197  00354E  22DA               	addwfc	fsr2h,f,c
  9198  003550  EE10 F016          	lfsr	1,22
  9199  003554  50DE               	movf	postinc2,w,c
  9200  003556  26E1               	addwf	fsr1l,f,c
  9201  003558  50DD               	movf	postdec2,w,c
  9202  00355A  22E2               	addwfc	fsr1h,f,c
  9203  00355C  50E6               	movf	postinc1,w,c
  9204  00355E  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
  9205  003560  50E6               	movf	postinc1,w,c
  9206  003562  59BD               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
  9207  003564  A0D8               	btfss	status,0,c
  9208  003566  D002               	goto	l938
  9209  003568                     u11510:
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;tff.c: 375: return FALSE;
  9213                           
  9214                           ; BSR set to: 0
  9215  003568  0E00               	movlw	0
  9216                           
  9217                           ; BSR set to: 0
  9218  00356A  0012               	return	
  9219  00356C                     l938:
  9220                           
  9221                           ; BSR set to: 0
  9222                           ;tff.c: 376: dj->clust = clust;
  9223                           
  9224                           ; BSR set to: 0
  9225  00356C  EE20 F008          	lfsr	2,8
  9226  003570  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9227  003572  26D9               	addwf	fsr2l,f,c
  9228  003574  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9229  003576  22DA               	addwfc	fsr2h,f,c
  9230  003578  C0BC  FFDE         	movff	next_dir_entry@clust,postinc2
  9231  00357C  C0BD  FFDD         	movff	next_dir_entry@clust+1,postdec2
  9232                           
  9233                           ; BSR set to: 0
  9234                           ;tff.c: 377: dj->sect = clust2sect(clust);
  9235  003580  C0BC  F06C         	movff	next_dir_entry@clust,clust2sect@clust
  9236  003584  C0BD  F06D         	movff	next_dir_entry@clust+1,clust2sect@clust+1
  9237  003588  EC04  F020         	call	_clust2sect	;wreg free
  9238  00358C  0100               	movlb	0	; () banked
  9239  00358E  EE20 F00A          	lfsr	2,10
  9240  003592  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9241  003594  26D9               	addwf	fsr2l,f,c
  9242  003596  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9243  003598  22DA               	addwfc	fsr2h,f,c
  9244  00359A  C06C  FFDE         	movff	?_clust2sect,postinc2
  9245  00359E  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  9246  0035A2  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  9247  0035A6  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  9248  0035AA                     l937:
  9249                           
  9250                           ; BSR set to: 0
  9251                           ;tff.c: 378: }
  9252                           ;tff.c: 379: }
  9253                           ;tff.c: 380: }
  9254                           ;tff.c: 381: dj->index = idx;
  9255                           
  9256                           ; BSR set to: 0
  9257                           
  9258                           ; BSR set to: 0
  9259                           
  9260                           ; BSR set to: 0
  9261  0035AA  EE20 F002          	lfsr	2,2
  9262  0035AE  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9263  0035B0  26D9               	addwf	fsr2l,f,c
  9264  0035B2  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9265  0035B4  22DA               	addwfc	fsr2h,f,c
  9266  0035B6  C0BE  FFDE         	movff	next_dir_entry@idx,postinc2
  9267  0035BA  C0BF  FFDD         	movff	next_dir_entry@idx+1,postdec2
  9268                           
  9269                           ; BSR set to: 0
  9270                           ;tff.c: 382: return TRUE;
  9271  0035BE  0E01               	movlw	1
  9272  0035C0  0012               	return	
  9273  0035C2                     __end_of_next_dir_entry:
  9274                           	opt stack 0
  9275                           tosu	equ	0xFFF
  9276                           tosh	equ	0xFFE
  9277                           tosl	equ	0xFFD
  9278                           pclath	equ	0xFFA
  9279                           tblptru	equ	0xFF8
  9280                           tblptrh	equ	0xFF7
  9281                           tblptrl	equ	0xFF6
  9282                           tablat	equ	0xFF5
  9283                           prodh	equ	0xFF4
  9284                           prodl	equ	0xFF3
  9285                           intcon	equ	0xFF2
  9286                           intcon2	equ	0xFF1
  9287                           intcon3	equ	0xFF0
  9288                           postinc0	equ	0xFEE
  9289                           wreg	equ	0xFE8
  9290                           indf1	equ	0xFE7
  9291                           postinc1	equ	0xFE6
  9292                           postdec1	equ	0xFE5
  9293                           fsr1h	equ	0xFE2
  9294                           fsr1l	equ	0xFE1
  9295                           indf2	equ	0xFDF
  9296                           postinc2	equ	0xFDE
  9297                           postdec2	equ	0xFDD
  9298                           plusw2	equ	0xFDB
  9299                           fsr2h	equ	0xFDA
  9300                           fsr2l	equ	0xFD9
  9301                           status	equ	0xFD8
  9302                           
  9303 ;; *************** function _clust2sect *****************
  9304 ;; Defined at:
  9305 ;;		line 338 in file "bibliotecas/tff.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;  clust           2   12[BANK0 ] unsigned short 
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;  fs              2   32[COMRAM] PTR struct _FATFS
  9310 ;;		 -> NULL(0), fs(544), 
  9311 ;; Return value:  Size  Location     Type
  9312 ;;                  4   12[BANK0 ] unsigned long 
  9313 ;; Registers used:
  9314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9315 ;; Tracked objects:
  9316 ;;		On entry : 0/0
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9320 ;;      Params:         0       4       0       0       0       0       0       0       0
  9321 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9322 ;;      Temps:          0       5       0       0       0       0       0       0       0
  9323 ;;      Totals:         2       9       0       0       0       0       0       0       0
  9324 ;;Total ram usage:       11 bytes
  9325 ;; Hardware stack levels used:    1
  9326 ;; Hardware stack levels required when called:    4
  9327 ;; This function calls:
  9328 ;;		___lmul
  9329 ;; This function is called by:
  9330 ;;		_next_dir_entry
  9331 ;;		_trace_path
  9332 ;;		_reserve_direntry
  9333 ;;		_f_write
  9334 ;;		_f_read
  9335 ;;		_f_opendir
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           	psect	text33
  9340  004008                     __ptext33:
  9341                           	opt stack 0
  9342  004008                     _clust2sect:
  9343                           	opt stack 20
  9344                           
  9345                           ;tff.c: 342: FATFS *fs = FatFs;
  9346                           
  9347                           ; BSR set to: 0
  9348                           ;incstack = 0
  9349  004008  C0F2  F021         	movff	_FatFs,clust2sect@fs
  9350  00400C  C0F3  F022         	movff	_FatFs+1,clust2sect@fs+1
  9351                           
  9352                           ;tff.c: 345: clust -= 2;
  9353  004010  0E02               	movlw	2
  9354  004012  0100               	movlb	0	; () banked
  9355  004014  5F6C               	subwf	clust2sect@clust& (0+255),f,b
  9356  004016  0E00               	movlw	0
  9357  004018  5B6D               	subwfb	(clust2sect@clust+1)& (0+255),f,b
  9358                           
  9359                           ; BSR set to: 0
  9360                           ;tff.c: 346: if (clust >= (fs->max_clust - 2)) return 0;
  9361  00401A  0EFE               	movlw	254
  9362  00401C  6F70               	movwf	??_clust2sect& (0+255),b
  9363  00401E  0EFF               	movlw	255
  9364  004020  6F71               	movwf	(??_clust2sect+1)& (0+255),b
  9365  004022  EE20 F016          	lfsr	2,22
  9366  004026  5021               	movf	clust2sect@fs,w,c
  9367  004028  26D9               	addwf	fsr2l,f,c
  9368  00402A  5022               	movf	clust2sect@fs+1,w,c
  9369  00402C  22DA               	addwfc	fsr2h,f,c
  9370  00402E  CFDE F072          	movff	postinc2,??_clust2sect+2
  9371  004032  CFDD F073          	movff	postdec2,??_clust2sect+3
  9372  004036  5170               	movf	??_clust2sect& (0+255),w,b
  9373  004038  2772               	addwf	(??_clust2sect+2)& (0+255),f,b
  9374  00403A  5171               	movf	(??_clust2sect+1)& (0+255),w,b
  9375  00403C  2373               	addwfc	(??_clust2sect+3)& (0+255),f,b
  9376  00403E  5172               	movf	(??_clust2sect+2)& (0+255),w,b
  9377  004040  5D6C               	subwf	clust2sect@clust& (0+255),w,b
  9378  004042  5173               	movf	(??_clust2sect+3)& (0+255),w,b
  9379  004044  596D               	subwfb	(clust2sect@clust+1)& (0+255),w,b
  9380  004046  A0D8               	btfss	status,0,c
  9381  004048  D009               	goto	l928
  9382                           
  9383                           ; BSR set to: 0
  9384  00404A  0E00               	movlw	0
  9385  00404C  6F6C               	movwf	?_clust2sect& (0+255),b
  9386  00404E  0E00               	movlw	0
  9387  004050  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
  9388  004052  0E00               	movlw	0
  9389  004054  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
  9390  004056  0E00               	movlw	0
  9391  004058  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
  9392                           
  9393                           ; BSR set to: 0
  9394  00405A  0012               	return	
  9395  00405C                     l928:
  9396                           
  9397                           ; BSR set to: 0
  9398                           ;tff.c: 347: return (DWORD)clust * fs->csize + fs->database;
  9399                           
  9400                           ; BSR set to: 0
  9401  00405C  EE20 F010          	lfsr	2,16
  9402  004060  5021               	movf	clust2sect@fs,w,c
  9403  004062  26D9               	addwf	fsr2l,f,c
  9404  004064  5022               	movf	clust2sect@fs+1,w,c
  9405  004066  22DA               	addwfc	fsr2h,f,c
  9406  004068  CFDE F070          	movff	postinc2,??_clust2sect
  9407  00406C  CFDE F071          	movff	postinc2,??_clust2sect+1
  9408  004070  CFDE F072          	movff	postinc2,??_clust2sect+2
  9409  004074  CFDE F073          	movff	postinc2,??_clust2sect+3
  9410  004078  C06C  F060         	movff	clust2sect@clust,___lmul@multiplier
  9411  00407C  C06D  F061         	movff	clust2sect@clust+1,___lmul@multiplier+1
  9412  004080  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  9413  004082  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  9414  004084  EE20 F01D          	lfsr	2,29
  9415  004088  5021               	movf	clust2sect@fs,w,c
  9416  00408A  26D9               	addwf	fsr2l,f,c
  9417  00408C  5022               	movf	clust2sect@fs+1,w,c
  9418  00408E  22DA               	addwfc	fsr2h,f,c
  9419  004090  50DF               	movf	indf2,w,c
  9420  004092  6F74               	movwf	(??_clust2sect+4)& (0+255),b
  9421  004094  5174               	movf	(??_clust2sect+4)& (0+255),w,b
  9422  004096  6F64               	movwf	___lmul@multiplicand& (0+255),b
  9423  004098  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  9424  00409A  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  9425  00409C  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  9426  00409E  ECC3  F025         	call	___lmul	;wreg free
  9427  0040A2  0100               	movlb	0	; () banked
  9428  0040A4  5170               	movf	??_clust2sect& (0+255),w,b
  9429  0040A6  2560               	addwf	?___lmul& (0+255),w,b
  9430  0040A8  6F6C               	movwf	?_clust2sect& (0+255),b
  9431  0040AA  5171               	movf	(??_clust2sect+1)& (0+255),w,b
  9432  0040AC  2161               	addwfc	(?___lmul+1)& (0+255),w,b
  9433  0040AE  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
  9434  0040B0  5172               	movf	(??_clust2sect+2)& (0+255),w,b
  9435  0040B2  2162               	addwfc	(?___lmul+2)& (0+255),w,b
  9436  0040B4  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
  9437  0040B6  5173               	movf	(??_clust2sect+3)& (0+255),w,b
  9438  0040B8  2163               	addwfc	(?___lmul+3)& (0+255),w,b
  9439  0040BA  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
  9440  0040BC  0012               	return	
  9441  0040BE                     __end_of_clust2sect:
  9442                           	opt stack 0
  9443                           tosu	equ	0xFFF
  9444                           tosh	equ	0xFFE
  9445                           tosl	equ	0xFFD
  9446                           pclath	equ	0xFFA
  9447                           tblptru	equ	0xFF8
  9448                           tblptrh	equ	0xFF7
  9449                           tblptrl	equ	0xFF6
  9450                           tablat	equ	0xFF5
  9451                           prodh	equ	0xFF4
  9452                           prodl	equ	0xFF3
  9453                           intcon	equ	0xFF2
  9454                           intcon2	equ	0xFF1
  9455                           intcon3	equ	0xFF0
  9456                           postinc0	equ	0xFEE
  9457                           wreg	equ	0xFE8
  9458                           indf1	equ	0xFE7
  9459                           postinc1	equ	0xFE6
  9460                           postdec1	equ	0xFE5
  9461                           fsr1h	equ	0xFE2
  9462                           fsr1l	equ	0xFE1
  9463                           indf2	equ	0xFDF
  9464                           postinc2	equ	0xFDE
  9465                           postdec2	equ	0xFDD
  9466                           plusw2	equ	0xFDB
  9467                           fsr2h	equ	0xFDA
  9468                           fsr2l	equ	0xFD9
  9469                           status	equ	0xFD8
  9470                           
  9471 ;; *************** function _remove_chain *****************
  9472 ;; Defined at:
  9473 ;;		line 249 in file "bibliotecas/tff.c"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;  clust           2   86[BANK0 ] unsigned short 
  9476 ;; Auto vars:     Size  Location     Type
  9477 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
  9478 ;;		 -> NULL(0), fs(544), 
  9479 ;;  nxt             2   90[BANK0 ] unsigned short 
  9480 ;; Return value:  Size  Location     Type
  9481 ;;                  1    wreg      enum E105
  9482 ;; Registers used:
  9483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9489 ;;      Params:         0       2       0       0       0       0       0       0       0
  9490 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9491 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9492 ;;      Totals:         0       8       0       0       0       0       0       0       0
  9493 ;;Total ram usage:        8 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:   10
  9496 ;; This function calls:
  9497 ;;		_get_cluster
  9498 ;;		_put_cluster
  9499 ;; This function is called by:
  9500 ;;		_f_open
  9501 ;; This function uses a non-reentrant model
  9502 ;;
  9503                           
  9504                           	psect	text34
  9505  004168                     __ptext34:
  9506                           	opt stack 0
  9507  004168                     _remove_chain:
  9508                           	opt stack 17
  9509                           
  9510                           ;tff.c: 253: CLUST nxt;
  9511                           ;tff.c: 254: FATFS *fs = FatFs;
  9512                           
  9513                           ; BSR set to: 0
  9514                           ;incstack = 0
  9515  004168  C0F2  F0BC         	movff	_FatFs,remove_chain@fs
  9516  00416C  C0F3  F0BD         	movff	_FatFs+1,remove_chain@fs+1
  9517                           
  9518                           ;tff.c: 257: while (clust >= 2 && clust < fs->max_clust) {
  9519  004170  D039               	goto	l897
  9520  004172                     
  9521                           ;tff.c: 258: nxt = get_cluster(clust);
  9522  004172  C0B6  F0A0         	movff	remove_chain@clust,get_cluster@clust
  9523  004176  C0B7  F0A1         	movff	remove_chain@clust+1,get_cluster@clust+1
  9524  00417A  EC6C  F016         	call	_get_cluster	;wreg free
  9525  00417E  C0A0  F0BA         	movff	?_get_cluster,remove_chain@nxt
  9526  004182  C0A1  F0BB         	movff	?_get_cluster+1,remove_chain@nxt+1
  9527                           
  9528                           ;tff.c: 259: if (nxt == 1) return FALSE;
  9529  004186  0100               	movlb	0	; () banked
  9530  004188  05BA               	decf	remove_chain@nxt& (0+255),w,b
  9531  00418A  11BB               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  9532  00418C  A4D8               	btfss	status,2,c
  9533  00418E  D002               	goto	l899
  9534                           
  9535                           ; BSR set to: 0
  9536  004190  0E00               	movlw	0
  9537                           
  9538                           ; BSR set to: 0
  9539  004192  0012               	return	
  9540  004194                     l899:
  9541                           
  9542                           ; BSR set to: 0
  9543                           ;tff.c: 260: if (!put_cluster(clust, 0)) return FALSE;
  9544                           
  9545                           ; BSR set to: 0
  9546  004194  C0B6  F0A0         	movff	remove_chain@clust,put_cluster@clust
  9547  004198  C0B7  F0A1         	movff	remove_chain@clust+1,put_cluster@clust+1
  9548  00419C  0E00               	movlw	0
  9549  00419E  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
  9550  0041A0  0E00               	movlw	0
  9551  0041A2  6FA2               	movwf	put_cluster@val& (0+255),b
  9552  0041A4  EC2F  F015         	call	_put_cluster	;wreg free
  9553  0041A8  0900               	iorlw	0
  9554  0041AA  A4D8               	btfss	status,2,c
  9555  0041AC  D002               	goto	l901
  9556  0041AE  0E00               	movlw	0
  9557  0041B0  0012               	return	
  9558  0041B2                     l901:
  9559                           
  9560                           ;tff.c: 261: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
  9561  0041B2  0100               	movlb	0	; () banked
  9562  0041B4  EE20 F01A          	lfsr	2,26
  9563  0041B8  51BC               	movf	remove_chain@fs& (0+255),w,b
  9564  0041BA  26D9               	addwf	fsr2l,f,c
  9565  0041BC  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
  9566  0041BE  22DA               	addwfc	fsr2h,f,c
  9567  0041C0  28DE               	incf	postinc2,w,c
  9568  0041C2  E103               	bnz	u12130
  9569  0041C4  28DE               	incf	postinc2,w,c
  9570  0041C6  B4D8               	btfsc	status,2,c
  9571  0041C8  D009               	goto	l902
  9572  0041CA                     u12130:
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;tff.c: 262: fs->free_clust++;
  9576  0041CA  EE20 F01A          	lfsr	2,26
  9577  0041CE  51BC               	movf	remove_chain@fs& (0+255),w,b
  9578  0041D0  26D9               	addwf	fsr2l,f,c
  9579  0041D2  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
  9580  0041D4  22DA               	addwfc	fsr2h,f,c
  9581  0041D6  2ADE               	incf	postinc2,f,c
  9582  0041D8  0E00               	movlw	0
  9583  0041DA  22DD               	addwfc	postdec2,f,c
  9584  0041DC                     l902:
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;tff.c: 266: }
  9588                           ;tff.c: 267: clust = nxt;
  9589                           
  9590                           ; BSR set to: 0
  9591  0041DC  C0BA  F0B6         	movff	remove_chain@nxt,remove_chain@clust
  9592  0041E0  C0BB  F0B7         	movff	remove_chain@nxt+1,remove_chain@clust+1
  9593  0041E4                     l897:
  9594                           
  9595                           ; BSR set to: 0
  9596  0041E4  0100               	movlb	0	; () banked
  9597  0041E6  51B7               	movf	(remove_chain@clust+1)& (0+255),w,b
  9598  0041E8  E104               	bnz	u12140
  9599  0041EA  0E02               	movlw	2
  9600  0041EC  5DB6               	subwf	remove_chain@clust& (0+255),w,b
  9601  0041EE  A0D8               	btfss	status,0,c
  9602  0041F0  D00C               	goto	u12150
  9603  0041F2                     u12140:
  9604                           
  9605                           ; BSR set to: 0
  9606  0041F2  EE20 F016          	lfsr	2,22
  9607  0041F6  51BC               	movf	remove_chain@fs& (0+255),w,b
  9608  0041F8  26D9               	addwf	fsr2l,f,c
  9609  0041FA  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
  9610  0041FC  22DA               	addwfc	fsr2h,f,c
  9611  0041FE  50DE               	movf	postinc2,w,c
  9612  004200  5DB6               	subwf	remove_chain@clust& (0+255),w,b
  9613  004202  50DE               	movf	postinc2,w,c
  9614  004204  59B7               	subwfb	(remove_chain@clust+1)& (0+255),w,b
  9615  004206  A0D8               	btfss	status,0,c
  9616  004208  D7B4               	goto	l898
  9617  00420A                     u12150:
  9618                           
  9619                           ; BSR set to: 0
  9620                           ;tff.c: 268: }
  9621                           ;tff.c: 269: return TRUE;
  9622                           
  9623                           ; BSR set to: 0
  9624                           
  9625                           ; BSR set to: 0
  9626  00420A  0E01               	movlw	1
  9627  00420C  0012               	return	
  9628  00420E                     __end_of_remove_chain:
  9629                           	opt stack 0
  9630                           tosu	equ	0xFFF
  9631                           tosh	equ	0xFFE
  9632                           tosl	equ	0xFFD
  9633                           pclath	equ	0xFFA
  9634                           tblptru	equ	0xFF8
  9635                           tblptrh	equ	0xFF7
  9636                           tblptrl	equ	0xFF6
  9637                           tablat	equ	0xFF5
  9638                           prodh	equ	0xFF4
  9639                           prodl	equ	0xFF3
  9640                           intcon	equ	0xFF2
  9641                           intcon2	equ	0xFF1
  9642                           intcon3	equ	0xFF0
  9643                           postinc0	equ	0xFEE
  9644                           wreg	equ	0xFE8
  9645                           indf1	equ	0xFE7
  9646                           postinc1	equ	0xFE6
  9647                           postdec1	equ	0xFE5
  9648                           fsr1h	equ	0xFE2
  9649                           fsr1l	equ	0xFE1
  9650                           indf2	equ	0xFDF
  9651                           postinc2	equ	0xFDE
  9652                           postdec2	equ	0xFDD
  9653                           plusw2	equ	0xFDB
  9654                           fsr2h	equ	0xFDA
  9655                           fsr2l	equ	0xFD9
  9656                           status	equ	0xFD8
  9657                           
  9658 ;; *************** function _memcpy *****************
  9659 ;; Defined at:
  9660 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;  d1              2    0[BANK0 ] PTR void 
  9663 ;;		 -> fs.win(512), NULL(0), fs(544), 
  9664 ;;  s1              2    2[BANK0 ] PTR const void 
  9665 ;;		 -> fputc@c(1), f_open@fn(12), NULL(0), fs(544), 
  9666 ;;  n               2    4[BANK0 ] unsigned int 
  9667 ;; Auto vars:     Size  Location     Type
  9668 ;;  s               2    9[BANK0 ] PTR const unsigned char 
  9669 ;;		 -> fputc@c(1), f_open@fn(12), NULL(0), fs(544), 
  9670 ;;  d               2    7[BANK0 ] PTR unsigned char 
  9671 ;;		 -> fs.win(512), NULL(0), fs(544), 
  9672 ;;  tmp             1    6[BANK0 ] unsigned char 
  9673 ;; Return value:  Size  Location     Type
  9674 ;;                  2    0[BANK0 ] PTR void 
  9675 ;; Registers used:
  9676 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9682 ;;      Params:         0       6       0       0       0       0       0       0       0
  9683 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9684 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9685 ;;      Totals:         0      11       0       0       0       0       0       0       0
  9686 ;;Total ram usage:       11 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    3
  9689 ;; This function calls:
  9690 ;;		Nothing
  9691 ;; This function is called by:
  9692 ;;		_f_open
  9693 ;;		_f_write
  9694 ;;		_f_read
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           	psect	text35
  9699  004D6C                     __ptext35:
  9700                           	opt stack 0
  9701  004D6C                     _memcpy:
  9702                           	opt stack 21
  9703                           
  9704                           ;incstack = 0
  9705  004D6C  C062  F069         	movff	memcpy@s1,memcpy@s
  9706  004D70  C063  F06A         	movff	memcpy@s1+1,memcpy@s+1
  9707  004D74  C060  F067         	movff	memcpy@d1,memcpy@d
  9708  004D78  C061  F068         	movff	memcpy@d1+1,memcpy@d+1
  9709  004D7C  D011               	goto	l1784
  9710  004D7E                     l9055:
  9711  004D7E  C069  FFD9         	movff	memcpy@s,fsr2l
  9712  004D82  C06A  FFDA         	movff	memcpy@s+1,fsr2h
  9713  004D86  50DF               	movf	indf2,w,c
  9714  004D88  0100               	movlb	0	; () banked
  9715  004D8A  6F66               	movwf	memcpy@tmp& (0+255),b
  9716                           
  9717                           ; BSR set to: 0
  9718  004D8C  4B69               	infsnz	memcpy@s& (0+255),f,b
  9719  004D8E  2B6A               	incf	(memcpy@s+1)& (0+255),f,b
  9720                           
  9721                           ; BSR set to: 0
  9722  004D90  C067  FFD9         	movff	memcpy@d,fsr2l
  9723  004D94  C068  FFDA         	movff	memcpy@d+1,fsr2h
  9724  004D98  C066  FFDF         	movff	memcpy@tmp,indf2
  9725                           
  9726                           ; BSR set to: 0
  9727  004D9C  4B67               	infsnz	memcpy@d& (0+255),f,b
  9728  004D9E  2B68               	incf	(memcpy@d+1)& (0+255),f,b
  9729  004DA0                     l1784:
  9730                           
  9731                           ; BSR set to: 0
  9732  004DA0  0100               	movlb	0	; () banked
  9733  004DA2  0764               	decf	memcpy@n& (0+255),f,b
  9734  004DA4  A0D8               	btfss	status,0,c
  9735  004DA6  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9736  004DA8  2964               	incf	memcpy@n& (0+255),w,b
  9737  004DAA  E1E9               	bnz	l9055
  9738  004DAC  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9739  004DAE  B4D8               	btfsc	status,2,c
  9740  004DB0  0012               	return	
  9741  004DB2  D7E5               	goto	l1785
  9742  004DB4                     __end_of_memcpy:
  9743                           	opt stack 0
  9744                           tosu	equ	0xFFF
  9745                           tosh	equ	0xFFE
  9746                           tosl	equ	0xFFD
  9747                           pclath	equ	0xFFA
  9748                           tblptru	equ	0xFF8
  9749                           tblptrh	equ	0xFF7
  9750                           tblptrl	equ	0xFF6
  9751                           tablat	equ	0xFF5
  9752                           prodh	equ	0xFF4
  9753                           prodl	equ	0xFF3
  9754                           intcon	equ	0xFF2
  9755                           intcon2	equ	0xFF1
  9756                           intcon3	equ	0xFF0
  9757                           postinc0	equ	0xFEE
  9758                           wreg	equ	0xFE8
  9759                           indf1	equ	0xFE7
  9760                           postinc1	equ	0xFE6
  9761                           postdec1	equ	0xFE5
  9762                           fsr1h	equ	0xFE2
  9763                           fsr1l	equ	0xFE1
  9764                           indf2	equ	0xFDF
  9765                           postinc2	equ	0xFDE
  9766                           postdec2	equ	0xFDD
  9767                           plusw2	equ	0xFDB
  9768                           fsr2h	equ	0xFDA
  9769                           fsr2l	equ	0xFD9
  9770                           status	equ	0xFD8
  9771                           
  9772 ;; *************** function _auto_mount *****************
  9773 ;; Defined at:
  9774 ;;		line 651 in file "bibliotecas/tff.c"
  9775 ;; Parameters:    Size  Location     Type
  9776 ;;  path            2   51[BANK0 ] PTR PTR const unsigned c
  9777 ;;		 -> f_opendir@path(2), f_open@path(2), 
  9778 ;;  chk_wp          1   53[BANK0 ] unsigned char 
  9779 ;; Auto vars:     Size  Location     Type
  9780 ;;  fatsize         4   85[BANK0 ] unsigned long 
  9781 ;;  totalsect       4   77[BANK0 ] unsigned long 
  9782 ;;  bootsect        4   73[BANK0 ] unsigned long 
  9783 ;;  maxclust        4   69[BANK0 ] unsigned long 
  9784 ;;  fs              2   89[BANK0 ] PTR struct _FATFS
  9785 ;;		 -> NULL(0), fs(544), 
  9786 ;;  p               2   81[BANK0 ] PTR const unsigned char 
  9787 ;;		 -> filename(15), 
  9788 ;;  stat            1   84[BANK0 ] unsigned char 
  9789 ;;  fmt             1   83[BANK0 ] unsigned char 
  9790 ;; Return value:  Size  Location     Type
  9791 ;;                  1    wreg      enum E155
  9792 ;; Registers used:
  9793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9794 ;; Tracked objects:
  9795 ;;		On entry : 0/0
  9796 ;;		On exit  : 0/0
  9797 ;;		Unchanged: 0/0
  9798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9799 ;;      Params:         0       3       0       0       0       0       0       0       0
  9800 ;;      Locals:         0      22       0       0       0       0       0       0       0
  9801 ;;      Temps:          0      15       0       0       0       0       0       0       0
  9802 ;;      Totals:         0      40       0       0       0       0       0       0       0
  9803 ;;Total ram usage:       40 bytes
  9804 ;; Hardware stack levels used:    1
  9805 ;; Hardware stack levels required when called:    9
  9806 ;; This function calls:
  9807 ;;		___lldiv
  9808 ;;		___lmul
  9809 ;;		_check_fs
  9810 ;;		_disk_initialize
  9811 ;;		_disk_status
  9812 ;;		_memset
  9813 ;; This function is called by:
  9814 ;;		_f_open
  9815 ;;		_f_opendir
  9816 ;; This function uses a non-reentrant model
  9817 ;;
  9818                           
  9819                           	psect	text36
  9820  000E8A                     __ptext36:
  9821                           	opt stack 0
  9822  000E8A                     _auto_mount:
  9823                           	opt stack 18
  9824                           
  9825                           ;tff.c: 656: BYTE fmt;
  9826                           ;tff.c: 657: DSTATUS stat;
  9827                           ;tff.c: 658: DWORD bootsect, fatsize, totalsect, maxclust;
  9828                           ;tff.c: 659: const char *p = *path;
  9829                           
  9830                           ; BSR set to: 0
  9831                           ;incstack = 0
  9832  000E8A  C093  FFD9         	movff	auto_mount@path,fsr2l
  9833  000E8E  C094  FFDA         	movff	auto_mount@path+1,fsr2h
  9834  000E92  CFDE F0B1          	movff	postinc2,auto_mount@p
  9835  000E96  CFDD F0B2          	movff	postdec2,auto_mount@p+1
  9836                           
  9837                           ;tff.c: 660: FATFS *fs;
  9838                           ;tff.c: 663: while (*p == ' ') p++;
  9839  000E9A  D003               	goto	l1057
  9840  000E9C  0100               	movlb	0	; () banked
  9841  000E9E  4BB1               	infsnz	auto_mount@p& (0+255),f,b
  9842  000EA0  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
  9843  000EA2                     l1057:
  9844                           
  9845                           ; BSR set to: 0
  9846  000EA2  C0B1  FFD9         	movff	auto_mount@p,fsr2l
  9847  000EA6  C0B2  FFDA         	movff	auto_mount@p+1,fsr2h
  9848  000EAA  0E20               	movlw	32
  9849  000EAC  18DE               	xorwf	postinc2,w,c
  9850  000EAE  B4D8               	btfsc	status,2,c
  9851  000EB0  D7F5               	goto	l1058
  9852                           
  9853                           ;tff.c: 664: if (*p == '/') p++;
  9854  000EB2  C0B1  FFD9         	movff	auto_mount@p,fsr2l
  9855  000EB6  C0B2  FFDA         	movff	auto_mount@p+1,fsr2h
  9856  000EBA  0E2F               	movlw	47
  9857  000EBC  18DE               	xorwf	postinc2,w,c
  9858  000EBE  A4D8               	btfss	status,2,c
  9859  000EC0  D003               	goto	l1060
  9860  000EC2  0100               	movlb	0	; () banked
  9861  000EC4  4BB1               	infsnz	auto_mount@p& (0+255),f,b
  9862  000EC6  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
  9863  000EC8                     l1060:
  9864                           
  9865                           ;tff.c: 665: *path = p;
  9866                           
  9867                           ; BSR set to: 0
  9868  000EC8  C093  FFD9         	movff	auto_mount@path,fsr2l
  9869  000ECC  C094  FFDA         	movff	auto_mount@path+1,fsr2h
  9870  000ED0  C0B1  FFDE         	movff	auto_mount@p,postinc2
  9871  000ED4  C0B2  FFDD         	movff	auto_mount@p+1,postdec2
  9872                           
  9873                           ;tff.c: 668: fs = FatFs;
  9874  000ED8  C0F2  F0B9         	movff	_FatFs,auto_mount@fs
  9875  000EDC  C0F3  F0BA         	movff	_FatFs+1,auto_mount@fs+1
  9876                           
  9877                           ;tff.c: 669: if (!fs) return FR_NOT_ENABLED;
  9878  000EE0  0100               	movlb	0	; () banked
  9879  000EE2  51B9               	movf	auto_mount@fs& (0+255),w,b
  9880  000EE4  11BA               	iorwf	(auto_mount@fs+1)& (0+255),w,b
  9881  000EE6  A4D8               	btfss	status,2,c
  9882  000EE8  D002               	goto	l1061
  9883                           
  9884                           ; BSR set to: 0
  9885  000EEA  0E0A               	movlw	10
  9886                           
  9887                           ; BSR set to: 0
  9888  000EEC  0012               	return	
  9889  000EEE                     l1061:
  9890                           
  9891                           ; BSR set to: 0
  9892                           ;tff.c: 671: if (fs->fs_type) {
  9893                           
  9894                           ; BSR set to: 0
  9895  000EEE  EE20 F01C          	lfsr	2,28
  9896  000EF2  51B9               	movf	auto_mount@fs& (0+255),w,b
  9897  000EF4  26D9               	addwf	fsr2l,f,c
  9898  000EF6  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9899  000EF8  22DA               	addwfc	fsr2h,f,c
  9900  000EFA  50DF               	movf	indf2,w,c
  9901  000EFC  B4D8               	btfsc	status,2,c
  9902  000EFE  D00F               	goto	l1064
  9903                           
  9904                           ; BSR set to: 0
  9905                           ;tff.c: 672: stat = disk_status(0);
  9906  000F00  0E00               	movlw	0
  9907  000F02  ECDA  F026         	call	_disk_status
  9908  000F06  0100               	movlb	0	; () banked
  9909  000F08  6FB4               	movwf	auto_mount@stat& (0+255),b
  9910                           
  9911                           ; BSR set to: 0
  9912                           ;tff.c: 673: if (!(stat & 0x01)) {
  9913  000F0A  B1B4               	btfsc	auto_mount@stat& (0+255),0,b
  9914  000F0C  D008               	goto	l1064
  9915                           
  9916                           ; BSR set to: 0
  9917                           ;tff.c: 675: if (chk_wp && (stat & 0x04))
  9918  000F0E  5195               	movf	auto_mount@chk_wp& (0+255),w,b
  9919  000F10  A4D8               	btfss	status,2,c
  9920                           
  9921                           ; BSR set to: 0
  9922  000F12  A5B4               	btfss	auto_mount@stat& (0+255),2,b
  9923  000F14  D002               	goto	l1065
  9924                           
  9925                           ; BSR set to: 0
  9926                           ;tff.c: 676: return FR_WRITE_PROTECTED;
  9927  000F16  0E09               	movlw	9
  9928                           
  9929                           ; BSR set to: 0
  9930  000F18  0012               	return	
  9931  000F1A                     l1065:
  9932                           
  9933                           ; BSR set to: 0
  9934                           ;tff.c: 678: return FR_OK;
  9935                           
  9936                           ; BSR set to: 0
  9937  000F1A  0E00               	movlw	0
  9938                           
  9939                           ; BSR set to: 0
  9940  000F1C  0012               	return	
  9941  000F1E                     l1064:
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;tff.c: 679: }
  9945                           ;tff.c: 680: }
  9946                           ;tff.c: 684: memset(fs, 0, sizeof(FATFS));
  9947                           
  9948                           ; BSR set to: 0
  9949                           
  9950                           ; BSR set to: 0
  9951  000F1E  C0B9  F060         	movff	auto_mount@fs,memset@p1
  9952  000F22  C0BA  F061         	movff	auto_mount@fs+1,memset@p1+1
  9953  000F26  0E00               	movlw	0
  9954  000F28  6F63               	movwf	(memset@c+1)& (0+255),b
  9955  000F2A  0E00               	movlw	0
  9956  000F2C  6F62               	movwf	memset@c& (0+255),b
  9957  000F2E  0E02               	movlw	2
  9958  000F30  6F65               	movwf	(memset@n+1)& (0+255),b
  9959  000F32  0E20               	movlw	32
  9960  000F34  6F64               	movwf	memset@n& (0+255),b
  9961  000F36  EC75  F028         	call	_memset	;wreg free
  9962                           
  9963                           ;tff.c: 685: stat = disk_initialize(0);
  9964  000F3A  0E00               	movlw	0
  9965  000F3C  EC0A  F028         	call	_disk_initialize
  9966  000F40  0100               	movlb	0	; () banked
  9967  000F42  6FB4               	movwf	auto_mount@stat& (0+255),b
  9968                           
  9969                           ; BSR set to: 0
  9970                           ;tff.c: 686: if (stat & 0x01)
  9971  000F44  A1B4               	btfss	auto_mount@stat& (0+255),0,b
  9972  000F46  D002               	goto	l1066
  9973                           
  9974                           ; BSR set to: 0
  9975                           ;tff.c: 687: return FR_NOT_READY;
  9976  000F48  0E01               	movlw	1
  9977                           
  9978                           ; BSR set to: 0
  9979  000F4A  0012               	return	
  9980  000F4C                     l1066:
  9981                           
  9982                           ; BSR set to: 0
  9983                           ;tff.c: 689: if (chk_wp && (stat & 0x04))
  9984                           
  9985                           ; BSR set to: 0
  9986  000F4C  5195               	movf	auto_mount@chk_wp& (0+255),w,b
  9987  000F4E  A4D8               	btfss	status,2,c
  9988                           
  9989                           ; BSR set to: 0
  9990  000F50  A5B4               	btfss	auto_mount@stat& (0+255),2,b
  9991  000F52  D002               	goto	l1067
  9992                           
  9993                           ; BSR set to: 0
  9994                           ;tff.c: 690: return FR_WRITE_PROTECTED;
  9995  000F54  0E09               	movlw	9
  9996                           
  9997                           ; BSR set to: 0
  9998  000F56  0012               	return	
  9999  000F58                     l1067:
 10000                           
 10001                           ; BSR set to: 0
 10002                           ;tff.c: 694: fmt = check_fs(bootsect = 0);
 10003                           
 10004                           ; BSR set to: 0
 10005  000F58  0E00               	movlw	0
 10006  000F5A  6FA9               	movwf	auto_mount@bootsect& (0+255),b
 10007  000F5C  0E00               	movlw	0
 10008  000F5E  6FAA               	movwf	(auto_mount@bootsect+1)& (0+255),b
 10009  000F60  0E00               	movlw	0
 10010  000F62  6FAB               	movwf	(auto_mount@bootsect+2)& (0+255),b
 10011  000F64  0E00               	movlw	0
 10012  000F66  6FAC               	movwf	(auto_mount@bootsect+3)& (0+255),b
 10013  000F68  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 10014  000F6C  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 10015  000F70  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 10016  000F74  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 10017  000F78  ECDE  F022         	call	_check_fs	;wreg free
 10018  000F7C  0100               	movlb	0	; () banked
 10019  000F7E  6FB3               	movwf	auto_mount@fmt& (0+255),b
 10020                           
 10021                           ; BSR set to: 0
 10022                           ;tff.c: 696: if (fmt == 1) {
 10023  000F80  05B3               	decf	auto_mount@fmt& (0+255),w,b
 10024  000F82  A4D8               	btfss	status,2,c
 10025  000F84  D023               	goto	l1069
 10026                           
 10027                           ; BSR set to: 0
 10028                           ;tff.c: 698: if (fs->win[446+4]) {
 10029  000F86  EE21 F0E2          	lfsr	2,482
 10030  000F8A  51B9               	movf	auto_mount@fs& (0+255),w,b
 10031  000F8C  26D9               	addwf	fsr2l,f,c
 10032  000F8E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10033  000F90  22DA               	addwfc	fsr2h,f,c
 10034  000F92  50DF               	movf	indf2,w,c
 10035  000F94  B4D8               	btfsc	status,2,c
 10036  000F96  D01A               	goto	l1069
 10037                           
 10038                           ; BSR set to: 0
 10039                           ;tff.c: 699: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 10040  000F98  EE21 F0E6          	lfsr	2,486
 10041  000F9C  51B9               	movf	auto_mount@fs& (0+255),w,b
 10042  000F9E  26D9               	addwf	fsr2l,f,c
 10043  000FA0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10044  000FA2  22DA               	addwfc	fsr2h,f,c
 10045  000FA4  CFDE F0A9          	movff	postinc2,auto_mount@bootsect
 10046  000FA8  CFDE F0AA          	movff	postinc2,auto_mount@bootsect+1
 10047  000FAC  CFDE F0AB          	movff	postinc2,auto_mount@bootsect+2
 10048  000FB0  CFDE F0AC          	movff	postinc2,auto_mount@bootsect+3
 10049                           
 10050                           ; BSR set to: 0
 10051                           ;tff.c: 700: fmt = check_fs(bootsect);
 10052  000FB4  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 10053  000FB8  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 10054  000FBC  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 10055  000FC0  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 10056  000FC4  ECDE  F022         	call	_check_fs	;wreg free
 10057  000FC8  0100               	movlb	0	; () banked
 10058  000FCA  6FB3               	movwf	auto_mount@fmt& (0+255),b
 10059  000FCC                     l1069:
 10060                           
 10061                           ; BSR set to: 0
 10062                           ;tff.c: 701: }
 10063                           ;tff.c: 702: }
 10064                           ;tff.c: 703: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])) != 512U)
 10065                           
 10066                           ; BSR set to: 0
 10067                           
 10068                           ; BSR set to: 0
 10069  000FCC  51B3               	movf	auto_mount@fmt& (0+255),w,b
 10070  000FCE  A4D8               	btfss	status,2,c
 10071  000FD0  D00C               	goto	u12540
 10072                           
 10073                           ; BSR set to: 0
 10074  000FD2  EE20 F02B          	lfsr	2,43
 10075  000FD6  51B9               	movf	auto_mount@fs& (0+255),w,b
 10076  000FD8  26D9               	addwf	fsr2l,f,c
 10077  000FDA  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10078  000FDC  22DA               	addwfc	fsr2h,f,c
 10079  000FDE  50DE               	movf	postinc2,w,c
 10080  000FE0  E104               	bnz	l10031
 10081  000FE2  0E02               	movlw	2
 10082  000FE4  18DE               	xorwf	postinc2,w,c
 10083  000FE6  B4D8               	btfsc	status,2,c
 10084  000FE8  D002               	goto	l1070
 10085  000FEA                     u12540:
 10086  000FEA                     l10031:
 10087                           
 10088                           ; BSR set to: 0
 10089                           ;tff.c: 704: return FR_NO_FILESYSTEM;
 10090  000FEA  0E0B               	movlw	11
 10091                           
 10092                           ; BSR set to: 0
 10093  000FEC  0012               	return	
 10094  000FEE                     l1070:
 10095                           
 10096                           ; BSR set to: 0
 10097                           ;tff.c: 707: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 10098                           
 10099                           ; BSR set to: 0
 10100  000FEE  EE20 F036          	lfsr	2,54
 10101  000FF2  51B9               	movf	auto_mount@fs& (0+255),w,b
 10102  000FF4  26D9               	addwf	fsr2l,f,c
 10103  000FF6  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10104  000FF8  22DA               	addwfc	fsr2h,f,c
 10105  000FFA  CFDE F096          	movff	postinc2,??_auto_mount
 10106  000FFE  CFDD F097          	movff	postdec2,??_auto_mount+1
 10107  001002  C096  F0B5         	movff	??_auto_mount,auto_mount@fatsize
 10108  001006  C097  F0B6         	movff	??_auto_mount+1,auto_mount@fatsize+1
 10109  00100A  6BB7               	clrf	(auto_mount@fatsize+2)& (0+255),b
 10110  00100C  6BB8               	clrf	(auto_mount@fatsize+3)& (0+255),b
 10111                           
 10112                           ; BSR set to: 0
 10113                           ;tff.c: 708: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 10114  00100E  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 10115  001010  11B6               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 10116  001012  11B7               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 10117  001014  11B8               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 10118  001016  A4D8               	btfss	status,2,c
 10119  001018  D00E               	goto	l1073
 10120                           
 10121                           ; BSR set to: 0
 10122  00101A  EE20 F044          	lfsr	2,68
 10123  00101E  51B9               	movf	auto_mount@fs& (0+255),w,b
 10124  001020  26D9               	addwf	fsr2l,f,c
 10125  001022  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10126  001024  22DA               	addwfc	fsr2h,f,c
 10127  001026  CFDE F0B5          	movff	postinc2,auto_mount@fatsize
 10128  00102A  CFDE F0B6          	movff	postinc2,auto_mount@fatsize+1
 10129  00102E  CFDE F0B7          	movff	postinc2,auto_mount@fatsize+2
 10130  001032  CFDE F0B8          	movff	postinc2,auto_mount@fatsize+3
 10131  001036                     l1073:
 10132                           
 10133                           ; BSR set to: 0
 10134                           ;tff.c: 709: fs->sects_fat = (CLUST)fatsize;
 10135  001036  EE20 F014          	lfsr	2,20
 10136  00103A  51B9               	movf	auto_mount@fs& (0+255),w,b
 10137  00103C  26D9               	addwf	fsr2l,f,c
 10138  00103E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10139  001040  22DA               	addwfc	fsr2h,f,c
 10140  001042  C0B5  FFDE         	movff	auto_mount@fatsize,postinc2
 10141  001046  C0B6  FFDD         	movff	auto_mount@fatsize+1,postdec2
 10142                           
 10143                           ; BSR set to: 0
 10144                           ;tff.c: 710: fs->n_fats = fs->win[16];
 10145  00104A  EE20 F030          	lfsr	2,48
 10146  00104E  51B9               	movf	auto_mount@fs& (0+255),w,b
 10147  001050  26D9               	addwf	fsr2l,f,c
 10148  001052  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10149  001054  22DA               	addwfc	fsr2h,f,c
 10150  001056  EE10 F01E          	lfsr	1,30
 10151  00105A  51B9               	movf	auto_mount@fs& (0+255),w,b
 10152  00105C  26E1               	addwf	fsr1l,f,c
 10153  00105E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10154  001060  22E2               	addwfc	fsr1h,f,c
 10155  001062  CFDF FFE7          	movff	indf2,indf1
 10156                           
 10157                           ; BSR set to: 0
 10158                           ;tff.c: 711: fatsize *= fs->n_fats;
 10159  001066  C0B5  F060         	movff	auto_mount@fatsize,___lmul@multiplier
 10160  00106A  C0B6  F061         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 10161  00106E  C0B7  F062         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 10162  001072  C0B8  F063         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 10163  001076  EE20 F01E          	lfsr	2,30
 10164  00107A  51B9               	movf	auto_mount@fs& (0+255),w,b
 10165  00107C  26D9               	addwf	fsr2l,f,c
 10166  00107E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10167  001080  22DA               	addwfc	fsr2h,f,c
 10168  001082  50DF               	movf	indf2,w,c
 10169  001084  6F96               	movwf	??_auto_mount& (0+255),b
 10170  001086  5196               	movf	??_auto_mount& (0+255),w,b
 10171  001088  6F64               	movwf	___lmul@multiplicand& (0+255),b
 10172  00108A  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 10173  00108C  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 10174  00108E  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 10175  001090  ECC3  F025         	call	___lmul	;wreg free
 10176  001094  C060  F0B5         	movff	?___lmul,auto_mount@fatsize
 10177  001098  C061  F0B6         	movff	?___lmul+1,auto_mount@fatsize+1
 10178  00109C  C062  F0B7         	movff	?___lmul+2,auto_mount@fatsize+2
 10179  0010A0  C063  F0B8         	movff	?___lmul+3,auto_mount@fatsize+3
 10180                           
 10181                           ;tff.c: 712: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 10182  0010A4  0100               	movlb	0	; () banked
 10183  0010A6  EE20 F02E          	lfsr	2,46
 10184  0010AA  51B9               	movf	auto_mount@fs& (0+255),w,b
 10185  0010AC  26D9               	addwf	fsr2l,f,c
 10186  0010AE  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10187  0010B0  22DA               	addwfc	fsr2h,f,c
 10188  0010B2  CFDE F096          	movff	postinc2,??_auto_mount
 10189  0010B6  CFDD F097          	movff	postdec2,??_auto_mount+1
 10190  0010BA  5196               	movf	??_auto_mount& (0+255),w,b
 10191  0010BC  25A9               	addwf	auto_mount@bootsect& (0+255),w,b
 10192  0010BE  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 10193  0010C0  5197               	movf	(??_auto_mount+1)& (0+255),w,b
 10194  0010C2  21AA               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 10195  0010C4  6F99               	movwf	(??_auto_mount+3)& (0+255),b
 10196  0010C6  0E00               	movlw	0
 10197  0010C8  21AB               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 10198  0010CA  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 10199  0010CC  0E00               	movlw	0
 10200  0010CE  21AC               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 10201  0010D0  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 10202  0010D2  EE20 F008          	lfsr	2,8
 10203  0010D6  51B9               	movf	auto_mount@fs& (0+255),w,b
 10204  0010D8  26D9               	addwf	fsr2l,f,c
 10205  0010DA  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10206  0010DC  22DA               	addwfc	fsr2h,f,c
 10207  0010DE  C098  FFDE         	movff	??_auto_mount+2,postinc2
 10208  0010E2  C099  FFDE         	movff	??_auto_mount+3,postinc2
 10209  0010E6  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 10210  0010EA  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 10211                           
 10212                           ; BSR set to: 0
 10213                           ;tff.c: 713: fs->csize = fs->win[13];
 10214  0010EE  EE20 F02D          	lfsr	2,45
 10215  0010F2  51B9               	movf	auto_mount@fs& (0+255),w,b
 10216  0010F4  26D9               	addwf	fsr2l,f,c
 10217  0010F6  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10218  0010F8  22DA               	addwfc	fsr2h,f,c
 10219  0010FA  EE10 F01D          	lfsr	1,29
 10220  0010FE  51B9               	movf	auto_mount@fs& (0+255),w,b
 10221  001100  26E1               	addwf	fsr1l,f,c
 10222  001102  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10223  001104  22E2               	addwfc	fsr1h,f,c
 10224  001106  CFDF FFE7          	movff	indf2,indf1
 10225                           
 10226                           ; BSR set to: 0
 10227                           ;tff.c: 714: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 10228  00110A  EE20 F031          	lfsr	2,49
 10229  00110E  51B9               	movf	auto_mount@fs& (0+255),w,b
 10230  001110  26D9               	addwf	fsr2l,f,c
 10231  001112  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10232  001114  22DA               	addwfc	fsr2h,f,c
 10233  001116  EE10 F002          	lfsr	1,2
 10234  00111A  51B9               	movf	auto_mount@fs& (0+255),w,b
 10235  00111C  26E1               	addwf	fsr1l,f,c
 10236  00111E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10237  001120  22E2               	addwfc	fsr1h,f,c
 10238  001122  CFDE FFE6          	movff	postinc2,postinc1
 10239  001126  CFDD FFE5          	movff	postdec2,postdec1
 10240                           
 10241                           ; BSR set to: 0
 10242                           ;tff.c: 715: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 10243  00112A  EE20 F033          	lfsr	2,51
 10244  00112E  51B9               	movf	auto_mount@fs& (0+255),w,b
 10245  001130  26D9               	addwf	fsr2l,f,c
 10246  001132  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10247  001134  22DA               	addwfc	fsr2h,f,c
 10248  001136  CFDE F096          	movff	postinc2,??_auto_mount
 10249  00113A  CFDD F097          	movff	postdec2,??_auto_mount+1
 10250  00113E  C096  F0AD         	movff	??_auto_mount,auto_mount@totalsect
 10251  001142  C097  F0AE         	movff	??_auto_mount+1,auto_mount@totalsect+1
 10252  001146  6BAF               	clrf	(auto_mount@totalsect+2)& (0+255),b
 10253  001148  6BB0               	clrf	(auto_mount@totalsect+3)& (0+255),b
 10254                           
 10255                           ; BSR set to: 0
 10256                           ;tff.c: 716: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 10257  00114A  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 10258  00114C  11AE               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 10259  00114E  11AF               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 10260  001150  11B0               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 10261  001152  A4D8               	btfss	status,2,c
 10262  001154  D00E               	goto	l1074
 10263                           
 10264                           ; BSR set to: 0
 10265  001156  EE20 F040          	lfsr	2,64
 10266  00115A  51B9               	movf	auto_mount@fs& (0+255),w,b
 10267  00115C  26D9               	addwf	fsr2l,f,c
 10268  00115E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10269  001160  22DA               	addwfc	fsr2h,f,c
 10270  001162  CFDE F0AD          	movff	postinc2,auto_mount@totalsect
 10271  001166  CFDE F0AE          	movff	postinc2,auto_mount@totalsect+1
 10272  00116A  CFDE F0AF          	movff	postinc2,auto_mount@totalsect+2
 10273  00116E  CFDE F0B0          	movff	postinc2,auto_mount@totalsect+3
 10274  001172                     l1074:
 10275                           
 10276                           ; BSR set to: 0
 10277                           ;tff.c: 717: fs->max_clust = maxclust = (totalsect
 10278                           ;tff.c: 718: - (WORD)(*(WORD*)(BYTE*)(&fs->win[14])) - fatsize - fs->n_rootdir / 16
 10279                           ;tff.c: 719: ) / fs->csize + 2;
 10280                           
 10281                           ; BSR set to: 0
 10282  001172  EE20 F002          	lfsr	2,2
 10283  001176  51B9               	movf	auto_mount@fs& (0+255),w,b
 10284  001178  26D9               	addwf	fsr2l,f,c
 10285  00117A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10286  00117C  22DA               	addwfc	fsr2h,f,c
 10287  00117E  CFDE F096          	movff	postinc2,??_auto_mount
 10288  001182  CFDD F097          	movff	postdec2,??_auto_mount+1
 10289  001186  0E04               	movlw	4
 10290  001188  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 10291  00118A                     u12575:
 10292  00118A  90D8               	bcf	status,0,c
 10293  00118C  3397               	rrcf	(??_auto_mount+1)& (0+255),f,b
 10294  00118E  3396               	rrcf	??_auto_mount& (0+255),f,b
 10295  001190  2F98               	decfsz	(??_auto_mount+2)& (0+255),f,b
 10296  001192  D7FB               	goto	u12575
 10297  001194  EE20 F02E          	lfsr	2,46
 10298  001198  51B9               	movf	auto_mount@fs& (0+255),w,b
 10299  00119A  26D9               	addwf	fsr2l,f,c
 10300  00119C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10301  00119E  22DA               	addwfc	fsr2h,f,c
 10302  0011A0  CFDE F099          	movff	postinc2,??_auto_mount+3
 10303  0011A4  CFDD F09A          	movff	postdec2,??_auto_mount+4
 10304  0011A8  5199               	movf	(??_auto_mount+3)& (0+255),w,b
 10305  0011AA  2596               	addwf	??_auto_mount& (0+255),w,b
 10306  0011AC  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 10307  0011AE  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 10308  0011B0  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 10309  0011B2  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 10310  0011B4  6B9D               	clrf	(??_auto_mount+7)& (0+255),b
 10311  0011B6  B0D8               	btfsc	status,0,c
 10312  0011B8  2B9D               	incf	(??_auto_mount+7)& (0+255),f,b
 10313  0011BA  6B9E               	clrf	(??_auto_mount+8)& (0+255),b
 10314  0011BC  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 10315  0011BE  259B               	addwf	(??_auto_mount+5)& (0+255),w,b
 10316  0011C0  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 10317  0011C2  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 10318  0011C4  219C               	addwfc	(??_auto_mount+6)& (0+255),w,b
 10319  0011C6  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 10320  0011C8  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 10321  0011CA  219D               	addwfc	(??_auto_mount+7)& (0+255),w,b
 10322  0011CC  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 10323  0011CE  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 10324  0011D0  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 10325  0011D2  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 10326  0011D4  1F9F               	comf	(??_auto_mount+9)& (0+255),f,b
 10327  0011D6  1FA0               	comf	(??_auto_mount+10)& (0+255),f,b
 10328  0011D8  1FA1               	comf	(??_auto_mount+11)& (0+255),f,b
 10329  0011DA  1FA2               	comf	(??_auto_mount+12)& (0+255),f,b
 10330  0011DC  2B9F               	incf	(??_auto_mount+9)& (0+255),f,b
 10331  0011DE  0E00               	movlw	0
 10332  0011E0  23A0               	addwfc	(??_auto_mount+10)& (0+255),f,b
 10333  0011E2  23A1               	addwfc	(??_auto_mount+11)& (0+255),f,b
 10334  0011E4  23A2               	addwfc	(??_auto_mount+12)& (0+255),f,b
 10335  0011E6  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 10336  0011E8  259F               	addwf	(??_auto_mount+9)& (0+255),w,b
 10337  0011EA  6F60               	movwf	___lldiv@dividend& (0+255),b
 10338  0011EC  51AE               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 10339  0011EE  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 10340  0011F0  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 10341  0011F2  51AF               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 10342  0011F4  21A1               	addwfc	(??_auto_mount+11)& (0+255),w,b
 10343  0011F6  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 10344  0011F8  51B0               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 10345  0011FA  21A2               	addwfc	(??_auto_mount+12)& (0+255),w,b
 10346  0011FC  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 10347  0011FE  EE20 F01D          	lfsr	2,29
 10348  001202  51B9               	movf	auto_mount@fs& (0+255),w,b
 10349  001204  26D9               	addwf	fsr2l,f,c
 10350  001206  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10351  001208  22DA               	addwfc	fsr2h,f,c
 10352  00120A  50DF               	movf	indf2,w,c
 10353  00120C  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 10354  00120E  51A3               	movf	(??_auto_mount+13)& (0+255),w,b
 10355  001210  6F64               	movwf	___lldiv@divisor& (0+255),b
 10356  001212  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 10357  001214  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 10358  001216  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 10359  001218  ECAB  F023         	call	___lldiv	;wreg free
 10360  00121C  0E02               	movlw	2
 10361  00121E  0100               	movlb	0	; () banked
 10362  001220  2560               	addwf	?___lldiv& (0+255),w,b
 10363  001222  6FA5               	movwf	auto_mount@maxclust& (0+255),b
 10364  001224  0E00               	movlw	0
 10365  001226  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 10366  001228  6FA6               	movwf	(auto_mount@maxclust+1)& (0+255),b
 10367  00122A  0E00               	movlw	0
 10368  00122C  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
 10369  00122E  6FA7               	movwf	(auto_mount@maxclust+2)& (0+255),b
 10370  001230  0E00               	movlw	0
 10371  001232  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
 10372  001234  6FA8               	movwf	(auto_mount@maxclust+3)& (0+255),b
 10373  001236  EE20 F016          	lfsr	2,22
 10374  00123A  51B9               	movf	auto_mount@fs& (0+255),w,b
 10375  00123C  26D9               	addwf	fsr2l,f,c
 10376  00123E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10377  001240  22DA               	addwfc	fsr2h,f,c
 10378  001242  C0A5  FFDE         	movff	auto_mount@maxclust,postinc2
 10379  001246  C0A6  FFDD         	movff	auto_mount@maxclust+1,postdec2
 10380                           
 10381                           ; BSR set to: 0
 10382                           ;tff.c: 721: fmt = 1;
 10383  00124A  0E01               	movlw	1
 10384  00124C  6FB3               	movwf	auto_mount@fmt& (0+255),b
 10385                           
 10386                           ; BSR set to: 0
 10387                           ;tff.c: 722: if (maxclust >= 0xFF7) fmt = 2;
 10388  00124E  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 10389  001250  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 10390  001252  E106               	bnz	u12580
 10391  001254  0EF7               	movlw	247
 10392  001256  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 10393  001258  0E0F               	movlw	15
 10394  00125A  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 10395  00125C  A0D8               	btfss	status,0,c
 10396  00125E  D002               	goto	l1075
 10397  001260                     u12580:
 10398                           
 10399                           ; BSR set to: 0
 10400  001260  0E02               	movlw	2
 10401  001262  6FB3               	movwf	auto_mount@fmt& (0+255),b
 10402  001264                     l1075:
 10403                           
 10404                           ; BSR set to: 0
 10405                           ;tff.c: 723: if (maxclust >= 0xFFF7)
 10406                           
 10407                           ; BSR set to: 0
 10408  001264  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 10409  001266  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 10410  001268  E106               	bnz	u12590
 10411  00126A  0EF7               	movlw	247
 10412  00126C  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 10413  00126E  0EFF               	movlw	255
 10414  001270  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 10415  001272  A0D8               	btfss	status,0,c
 10416  001274  D002               	goto	l1076
 10417  001276                     u12590:
 10418                           
 10419                           ; BSR set to: 0
 10420                           ;tff.c: 725: return FR_NO_FILESYSTEM;
 10421  001276  0E0B               	movlw	11
 10422                           
 10423                           ; BSR set to: 0
 10424  001278  0012               	return	
 10425  00127A                     l1076:
 10426                           
 10427                           ; BSR set to: 0
 10428                           ;tff.c: 732: fs->dirbase = fs->fatbase + fatsize;
 10429                           
 10430                           ; BSR set to: 0
 10431  00127A  EE20 F008          	lfsr	2,8
 10432  00127E  51B9               	movf	auto_mount@fs& (0+255),w,b
 10433  001280  26D9               	addwf	fsr2l,f,c
 10434  001282  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10435  001284  22DA               	addwfc	fsr2h,f,c
 10436  001286  CFDE F096          	movff	postinc2,??_auto_mount
 10437  00128A  CFDE F097          	movff	postinc2,??_auto_mount+1
 10438  00128E  CFDE F098          	movff	postinc2,??_auto_mount+2
 10439  001292  CFDE F099          	movff	postinc2,??_auto_mount+3
 10440  001296  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 10441  001298  2596               	addwf	??_auto_mount& (0+255),w,b
 10442  00129A  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 10443  00129C  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 10444  00129E  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 10445  0012A0  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 10446  0012A2  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 10447  0012A4  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 10448  0012A6  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 10449  0012A8  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 10450  0012AA  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 10451  0012AC  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 10452  0012AE  EE20 F00C          	lfsr	2,12
 10453  0012B2  51B9               	movf	auto_mount@fs& (0+255),w,b
 10454  0012B4  26D9               	addwf	fsr2l,f,c
 10455  0012B6  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10456  0012B8  22DA               	addwfc	fsr2h,f,c
 10457  0012BA  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 10458  0012BE  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 10459  0012C2  C09C  FFDE         	movff	??_auto_mount+6,postinc2
 10460  0012C6  C09D  FFDE         	movff	??_auto_mount+7,postinc2
 10461                           
 10462                           ;tff.c: 733: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 10463  0012CA  EE20 F008          	lfsr	2,8
 10464  0012CE  51B9               	movf	auto_mount@fs& (0+255),w,b
 10465  0012D0  26D9               	addwf	fsr2l,f,c
 10466  0012D2  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10467  0012D4  22DA               	addwfc	fsr2h,f,c
 10468  0012D6  CFDE F096          	movff	postinc2,??_auto_mount
 10469  0012DA  CFDE F097          	movff	postinc2,??_auto_mount+1
 10470  0012DE  CFDE F098          	movff	postinc2,??_auto_mount+2
 10471  0012E2  CFDE F099          	movff	postinc2,??_auto_mount+3
 10472  0012E6  EE20 F002          	lfsr	2,2
 10473  0012EA  51B9               	movf	auto_mount@fs& (0+255),w,b
 10474  0012EC  26D9               	addwf	fsr2l,f,c
 10475  0012EE  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10476  0012F0  22DA               	addwfc	fsr2h,f,c
 10477  0012F2  CFDE F09A          	movff	postinc2,??_auto_mount+4
 10478  0012F6  CFDD F09B          	movff	postdec2,??_auto_mount+5
 10479  0012FA  0E04               	movlw	4
 10480  0012FC  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 10481  0012FE                     u12605:
 10482  0012FE  90D8               	bcf	status,0,c
 10483  001300  339B               	rrcf	(??_auto_mount+5)& (0+255),f,b
 10484  001302  339A               	rrcf	(??_auto_mount+4)& (0+255),f,b
 10485  001304  2F9C               	decfsz	(??_auto_mount+6)& (0+255),f,b
 10486  001306  D7FB               	goto	u12605
 10487  001308  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 10488  00130A  2596               	addwf	??_auto_mount& (0+255),w,b
 10489  00130C  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 10490  00130E  519B               	movf	(??_auto_mount+5)& (0+255),w,b
 10491  001310  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 10492  001312  6F9E               	movwf	(??_auto_mount+8)& (0+255),b
 10493  001314  0E00               	movlw	0
 10494  001316  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 10495  001318  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 10496  00131A  0E00               	movlw	0
 10497  00131C  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 10498  00131E  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 10499  001320  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 10500  001322  259D               	addwf	(??_auto_mount+7)& (0+255),w,b
 10501  001324  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 10502  001326  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 10503  001328  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 10504  00132A  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 10505  00132C  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 10506  00132E  219F               	addwfc	(??_auto_mount+9)& (0+255),w,b
 10507  001330  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 10508  001332  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 10509  001334  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 10510  001336  6FA4               	movwf	(??_auto_mount+14)& (0+255),b
 10511  001338  EE20 F010          	lfsr	2,16
 10512  00133C  51B9               	movf	auto_mount@fs& (0+255),w,b
 10513  00133E  26D9               	addwf	fsr2l,f,c
 10514  001340  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10515  001342  22DA               	addwfc	fsr2h,f,c
 10516  001344  C0A1  FFDE         	movff	??_auto_mount+11,postinc2
 10517  001348  C0A2  FFDE         	movff	??_auto_mount+12,postinc2
 10518  00134C  C0A3  FFDE         	movff	??_auto_mount+13,postinc2
 10519  001350  C0A4  FFDE         	movff	??_auto_mount+14,postinc2
 10520                           
 10521                           ;tff.c: 737: fs->free_clust = (CLUST)0xFFFFFFFF;
 10522  001354  EE20 F01A          	lfsr	2,26
 10523  001358  51B9               	movf	auto_mount@fs& (0+255),w,b
 10524  00135A  26D9               	addwf	fsr2l,f,c
 10525  00135C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10526  00135E  22DA               	addwfc	fsr2h,f,c
 10527  001360  0EFF               	movlw	255
 10528  001362  6EDE               	movwf	postinc2,c
 10529  001364  0EFF               	movlw	255
 10530  001366  6EDD               	movwf	postdec2,c
 10531                           
 10532                           ;tff.c: 753: fs->fs_type = fmt;
 10533  001368  EE20 F01C          	lfsr	2,28
 10534  00136C  51B9               	movf	auto_mount@fs& (0+255),w,b
 10535  00136E  26D9               	addwf	fsr2l,f,c
 10536  001370  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10537  001372  22DA               	addwfc	fsr2h,f,c
 10538  001374  C0B3  FFDF         	movff	auto_mount@fmt,indf2
 10539                           
 10540                           ; BSR set to: 0
 10541                           ;tff.c: 754: fs->id = ++fsid;
 10542  001378  4BF0               	infsnz	_fsid& (0+255),f,b
 10543  00137A  2BF1               	incf	(_fsid+1)& (0+255),f,b
 10544  00137C  C0B9  FFD9         	movff	auto_mount@fs,fsr2l
 10545  001380  C0BA  FFDA         	movff	auto_mount@fs+1,fsr2h
 10546  001384  C0F0  FFDE         	movff	_fsid,postinc2
 10547  001388  C0F1  FFDD         	movff	_fsid+1,postdec2
 10548                           
 10549                           ;tff.c: 755: return FR_OK;
 10550  00138C  0E00               	movlw	0
 10551  00138E  0012               	return	
 10552  001390                     __end_of_auto_mount:
 10553                           	opt stack 0
 10554                           tosu	equ	0xFFF
 10555                           tosh	equ	0xFFE
 10556                           tosl	equ	0xFFD
 10557                           pclath	equ	0xFFA
 10558                           tblptru	equ	0xFF8
 10559                           tblptrh	equ	0xFF7
 10560                           tblptrl	equ	0xFF6
 10561                           tablat	equ	0xFF5
 10562                           prodh	equ	0xFF4
 10563                           prodl	equ	0xFF3
 10564                           intcon	equ	0xFF2
 10565                           intcon2	equ	0xFF1
 10566                           intcon3	equ	0xFF0
 10567                           postinc0	equ	0xFEE
 10568                           wreg	equ	0xFE8
 10569                           indf1	equ	0xFE7
 10570                           postinc1	equ	0xFE6
 10571                           postdec1	equ	0xFE5
 10572                           fsr1h	equ	0xFE2
 10573                           fsr1l	equ	0xFE1
 10574                           indf2	equ	0xFDF
 10575                           postinc2	equ	0xFDE
 10576                           postdec2	equ	0xFDD
 10577                           plusw2	equ	0xFDB
 10578                           fsr2h	equ	0xFDA
 10579                           fsr2l	equ	0xFD9
 10580                           status	equ	0xFD8
 10581                           
 10582 ;; *************** function _memset *****************
 10583 ;; Defined at:
 10584 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 10585 ;; Parameters:    Size  Location     Type
 10586 ;;  p1              2    0[BANK0 ] PTR void 
 10587 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 10588 ;;  c               2    2[BANK0 ] int 
 10589 ;;  n               2    4[BANK0 ] unsigned int 
 10590 ;; Auto vars:     Size  Location     Type
 10591 ;;  p               2   32[COMRAM] PTR unsigned char 
 10592 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 10593 ;; Return value:  Size  Location     Type
 10594 ;;                  2    0[BANK0 ] PTR void 
 10595 ;; Registers used:
 10596 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10597 ;; Tracked objects:
 10598 ;;		On entry : 0/0
 10599 ;;		On exit  : 0/0
 10600 ;;		Unchanged: 0/0
 10601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10602 ;;      Params:         0       6       0       0       0       0       0       0       0
 10603 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10604 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10605 ;;      Totals:         2       6       0       0       0       0       0       0       0
 10606 ;;Total ram usage:        8 bytes
 10607 ;; Hardware stack levels used:    1
 10608 ;; Hardware stack levels required when called:    3
 10609 ;; This function calls:
 10610 ;;		Nothing
 10611 ;; This function is called by:
 10612 ;;		_make_dirfile
 10613 ;;		_reserve_direntry
 10614 ;;		_auto_mount
 10615 ;;		_f_open
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           	psect	text37
 10620  0050EA                     __ptext37:
 10621                           	opt stack 0
 10622  0050EA                     _memset:
 10623                           	opt stack 22
 10624                           
 10625                           ; BSR set to: 0
 10626                           ;incstack = 0
 10627  0050EA  C060  F021         	movff	memset@p1,memset@p
 10628  0050EE  C061  F022         	movff	memset@p1+1,memset@p+1
 10629  0050F2  D008               	goto	l1790
 10630  0050F4                     l9241:
 10631  0050F4  C021  FFD9         	movff	memset@p,fsr2l
 10632  0050F8  C022  FFDA         	movff	memset@p+1,fsr2h
 10633  0050FC  C062  FFDF         	movff	memset@c,indf2
 10634  005100  4A21               	infsnz	memset@p,f,c
 10635  005102  2A22               	incf	memset@p+1,f,c
 10636  005104                     l1790:
 10637  005104  0100               	movlb	0	; () banked
 10638  005106  0764               	decf	memset@n& (0+255),f,b
 10639  005108  A0D8               	btfss	status,0,c
 10640  00510A  0765               	decf	(memset@n+1)& (0+255),f,b
 10641  00510C  2964               	incf	memset@n& (0+255),w,b
 10642  00510E  E1F2               	bnz	l9241
 10643  005110  2965               	incf	(memset@n+1)& (0+255),w,b
 10644  005112  B4D8               	btfsc	status,2,c
 10645  005114  0012               	return	
 10646  005116  D7EE               	goto	l1791
 10647  005118                     __end_of_memset:
 10648                           	opt stack 0
 10649                           tosu	equ	0xFFF
 10650                           tosh	equ	0xFFE
 10651                           tosl	equ	0xFFD
 10652                           pclath	equ	0xFFA
 10653                           tblptru	equ	0xFF8
 10654                           tblptrh	equ	0xFF7
 10655                           tblptrl	equ	0xFF6
 10656                           tablat	equ	0xFF5
 10657                           prodh	equ	0xFF4
 10658                           prodl	equ	0xFF3
 10659                           intcon	equ	0xFF2
 10660                           intcon2	equ	0xFF1
 10661                           intcon3	equ	0xFF0
 10662                           postinc0	equ	0xFEE
 10663                           wreg	equ	0xFE8
 10664                           indf1	equ	0xFE7
 10665                           postinc1	equ	0xFE6
 10666                           postdec1	equ	0xFE5
 10667                           fsr1h	equ	0xFE2
 10668                           fsr1l	equ	0xFE1
 10669                           indf2	equ	0xFDF
 10670                           postinc2	equ	0xFDE
 10671                           postdec2	equ	0xFDD
 10672                           plusw2	equ	0xFDB
 10673                           fsr2h	equ	0xFDA
 10674                           fsr2l	equ	0xFD9
 10675                           status	equ	0xFD8
 10676                           
 10677 ;; *************** function _disk_initialize *****************
 10678 ;; Defined at:
 10679 ;;		line 59 in file "bibliotecas/diskio.c"
 10680 ;; Parameters:    Size  Location     Type
 10681 ;;  pdrv            1    wreg     unsigned char 
 10682 ;; Auto vars:     Size  Location     Type
 10683 ;;  pdrv            1   32[BANK0 ] unsigned char 
 10684 ;;  result          2    0        int 
 10685 ;;  stat            1   33[BANK0 ] unsigned char 
 10686 ;; Return value:  Size  Location     Type
 10687 ;;                  1    wreg      unsigned char 
 10688 ;; Registers used:
 10689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10690 ;; Tracked objects:
 10691 ;;		On entry : 0/0
 10692 ;;		On exit  : 0/0
 10693 ;;		Unchanged: 0/0
 10694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10695 ;;      Params:         0       0       0       0       0       0       0       0       0
 10696 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10697 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10698 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10699 ;;Total ram usage:        2 bytes
 10700 ;; Hardware stack levels used:    1
 10701 ;; Hardware stack levels required when called:    8
 10702 ;; This function calls:
 10703 ;;		_sdc_disk_initialize
 10704 ;; This function is called by:
 10705 ;;		_auto_mount
 10706 ;; This function uses a non-reentrant model
 10707 ;;
 10708                           
 10709                           	psect	text38
 10710  005014                     __ptext38:
 10711                           	opt stack 0
 10712  005014                     _disk_initialize:
 10713                           	opt stack 18
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;incstack = 0
 10717                           ;disk_initialize@pdrv stored from wreg
 10718  005014  0100               	movlb	0	; () banked
 10719  005016  6F80               	movwf	disk_initialize@pdrv& (0+255),b
 10720                           
 10721                           ;diskio.c: 63: DSTATUS stat;
 10722                           ;diskio.c: 64: int result;
 10723                           ;diskio.c: 66: switch (pdrv) {
 10724  005018  D00E               	goto	l369
 10725  00501A                     
 10726                           ;diskio.c: 68: stat = sdc_disk_initialize();
 10727  00501A  ECAA  F00F         	call	_sdc_disk_initialize	;wreg free
 10728  00501E  0100               	movlb	0	; () banked
 10729  005020  6F81               	movwf	disk_initialize@stat& (0+255),b
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;diskio.c: 72: return stat;
 10733  005022  5181               	movf	disk_initialize@stat& (0+255),w,b
 10734                           
 10735                           ; BSR set to: 0
 10736  005024  0012               	return	
 10737  005026                     
 10738                           ; BSR set to: 0
 10739                           ;diskio.c: 75: stat = sdc_disk_initialize();
 10740                           
 10741                           ; BSR set to: 0
 10742  005026  ECAA  F00F         	call	_sdc_disk_initialize	;wreg free
 10743  00502A  0100               	movlb	0	; () banked
 10744  00502C  6F81               	movwf	disk_initialize@stat& (0+255),b
 10745                           
 10746                           ; BSR set to: 0
 10747                           ;diskio.c: 79: return stat;
 10748  00502E  5181               	movf	disk_initialize@stat& (0+255),w,b
 10749                           
 10750                           ; BSR set to: 0
 10751  005030  0012               	return	
 10752  005032                     
 10753                           ; BSR set to: 0
 10754                           ;diskio.c: 86: return stat;
 10755                           
 10756                           ; BSR set to: 0
 10757  005032  5181               	movf	disk_initialize@stat& (0+255),w,b
 10758                           
 10759                           ; BSR set to: 0
 10760  005034  0012               	return	
 10761  005036                     l369:
 10762                           
 10763                           ; BSR set to: 0
 10764  005036  0100               	movlb	0	; () banked
 10765  005038  5180               	movf	disk_initialize@pdrv& (0+255),w,b
 10766                           
 10767                           ; Switch size 1, requested type "space"
 10768                           ; Number of cases is 3, Range of values is 0 to 2
 10769                           ; switch strategies available:
 10770                           ; Name         Instructions Cycles
 10771                           ; simple_byte           10     6 (average)
 10772                           ;	Chosen strategy is simple_byte
 10773  00503A  0A00               	xorlw	0	; case 0
 10774  00503C  B4D8               	btfsc	status,2,c
 10775  00503E  D7ED               	goto	l370
 10776  005040  0A01               	xorlw	1	; case 1
 10777  005042  B4D8               	btfsc	status,2,c
 10778  005044  D7F0               	goto	l372
 10779  005046  0A03               	xorlw	3	; case 2
 10780  005048  B4D8               	btfsc	status,2,c
 10781  00504A  D7F3               	goto	l373
 10782                           
 10783                           ; BSR set to: 0
 10784                           ;diskio.c: 88: return 0x01;
 10785                           
 10786                           ; BSR set to: 0
 10787  00504C  0E01               	movlw	1
 10788  00504E  0012               	return	
 10789  005050                     __end_of_disk_initialize:
 10790                           	opt stack 0
 10791                           tosu	equ	0xFFF
 10792                           tosh	equ	0xFFE
 10793                           tosl	equ	0xFFD
 10794                           pclath	equ	0xFFA
 10795                           tblptru	equ	0xFF8
 10796                           tblptrh	equ	0xFF7
 10797                           tblptrl	equ	0xFF6
 10798                           tablat	equ	0xFF5
 10799                           prodh	equ	0xFF4
 10800                           prodl	equ	0xFF3
 10801                           intcon	equ	0xFF2
 10802                           intcon2	equ	0xFF1
 10803                           intcon3	equ	0xFF0
 10804                           postinc0	equ	0xFEE
 10805                           wreg	equ	0xFE8
 10806                           indf1	equ	0xFE7
 10807                           postinc1	equ	0xFE6
 10808                           postdec1	equ	0xFE5
 10809                           fsr1h	equ	0xFE2
 10810                           fsr1l	equ	0xFE1
 10811                           indf2	equ	0xFDF
 10812                           postinc2	equ	0xFDE
 10813                           postdec2	equ	0xFDD
 10814                           plusw2	equ	0xFDB
 10815                           fsr2h	equ	0xFDA
 10816                           fsr2l	equ	0xFD9
 10817                           status	equ	0xFD8
 10818                           
 10819 ;; *************** function _sdc_disk_initialize *****************
 10820 ;; Defined at:
 10821 ;;		line 275 in file "bibliotecas/diskio.c"
 10822 ;; Parameters:    Size  Location     Type
 10823 ;;		None
 10824 ;; Auto vars:     Size  Location     Type
 10825 ;;  count2          2   29[BANK0 ] int 
 10826 ;;  crc_number      2   25[BANK0 ] int 
 10827 ;;  count1          2   23[BANK0 ] int 
 10828 ;;  i               2   20[BANK0 ] int 
 10829 ;;  buff            1   31[BANK0 ] unsigned char 
 10830 ;;  ocr             1   28[BANK0 ] unsigned char 
 10831 ;;  buff_i          1   27[BANK0 ] unsigned char 
 10832 ;;  stat            1   22[BANK0 ] unsigned char 
 10833 ;; Return value:  Size  Location     Type
 10834 ;;                  1    wreg      unsigned char 
 10835 ;; Registers used:
 10836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10842 ;;      Params:         0       0       0       0       0       0       0       0       0
 10843 ;;      Locals:         0      12       0       0       0       0       0       0       0
 10844 ;;      Temps:          0       1       0       0       0       0       0       0       0
 10845 ;;      Totals:         0      13       0       0       0       0       0       0       0
 10846 ;;Total ram usage:       13 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; Hardware stack levels required when called:    7
 10849 ;; This function calls:
 10850 ;;		_command
 10851 ;;		_dummy_clocks
 10852 ;;		_escreve_frase_ram_lcd
 10853 ;;		_posicao_cursor_lcd
 10854 ;;		_proceed
 10855 ;;		_response
 10856 ;;		_sdc_reset
 10857 ;; This function is called by:
 10858 ;;		_disk_initialize
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           	psect	text39
 10863  001F54                     __ptext39:
 10864                           	opt stack 0
 10865  001F54                     _sdc_disk_initialize:
 10866                           	opt stack 18
 10867                           
 10868                           ;diskio.c: 277: BYTE ocr;
 10869                           ;diskio.c: 278: DSTATUS stat;
 10870                           ;diskio.c: 279: int i = 0, count1 = 0, count2 = 0;
 10871                           
 10872                           ; BSR set to: 0
 10873                           ;incstack = 0
 10874  001F54  0E00               	movlw	0
 10875  001F56  0100               	movlb	0	; () banked
 10876  001F58  6F75               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
 10877  001F5A  0E00               	movlw	0
 10878  001F5C  6F74               	movwf	sdc_disk_initialize@i& (0+255),b
 10879  001F5E  0E00               	movlw	0
 10880  001F60  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 10881  001F62  0E00               	movlw	0
 10882  001F64  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 10883  001F66  0E00               	movlw	0
 10884  001F68  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 10885  001F6A  0E00               	movlw	0
 10886  001F6C  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 10887                           
 10888                           ;diskio.c: 280: BYTE buff = 0;
 10889  001F6E  0E00               	movlw	0
 10890  001F70  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;diskio.c: 281: BYTE buff_i;
 10894                           ;diskio.c: 282: int crc_number;
 10895                           ;diskio.c: 283: _delay((unsigned long)((1)*(48000000/4000.0)));
 10896  001F72  0E10               	movlw	16
 10897  001F74  0100               	movlb	0	; () banked
 10898  001F76  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 10899  001F78  0E94               	movlw	148
 10900  001F7A                     u14327:
 10901  001F7A  2EE8               	decfsz	wreg,f,c
 10902  001F7C  D7FE               	bra	u14327
 10903  001F7E  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 10904  001F80  D7FC               	bra	u14327
 10905  001F82  F000               	nop	
 10906                           
 10907                           ;diskio.c: 284: dummy_clocks(100);
 10908  001F84  0E64               	movlw	100
 10909  001F86  ECAA  F027         	call	_dummy_clocks
 10910                           
 10911                           ;diskio.c: 287: sdc_reset();
 10912  001F8A  EC59  F021         	call	_sdc_reset	;wreg free
 10913                           
 10914                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 10915  001F8E  0EAA               	movlw	170
 10916  001F90  0100               	movlb	0	; () banked
 10917  001F92  6F65               	movwf	command@arg& (0+255),b
 10918  001F94  0E01               	movlw	1
 10919  001F96  6F66               	movwf	(command@arg+1)& (0+255),b
 10920  001F98  0E00               	movlw	0
 10921  001F9A  6F67               	movwf	(command@arg+2)& (0+255),b
 10922  001F9C  0E00               	movlw	0
 10923  001F9E  6F68               	movwf	(command@arg+3)& (0+255),b
 10924  001FA0  0E87               	movlw	135
 10925  001FA2  6F69               	movwf	command@CRC& (0+255),b
 10926  001FA4  0E48               	movlw	72
 10927  001FA6  ECD4  F024         	call	_command
 10928                           
 10929                           ;diskio.c: 289: proceed();
 10930  001FAA  EC8C  F029         	call	_proceed	;wreg free
 10931  001FAE                     
 10932                           ;diskio.c: 291: buff_i = response();
 10933  001FAE  EC86  F029         	call	_response	;wreg free
 10934  001FB2  0100               	movlb	0	; () banked
 10935  001FB4  6F7B               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;diskio.c: 292: if(buff_i == 1)
 10939  001FB6  057B               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 10940  001FB8  A4D8               	btfss	status,2,c
 10941  001FBA  D004               	goto	l412
 10942                           
 10943                           ; BSR set to: 0
 10944                           ;diskio.c: 293: {
 10945                           ;diskio.c: 294: crc_number = buff_i<<8;
 10946  001FBC  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 10947  001FBE  6F7A               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 10948  001FC0  6B79               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 10949                           
 10950                           ;diskio.c: 295: }
 10951  001FC2  D006               	goto	l414
 10952  001FC4                     l412:
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;diskio.c: 296: else if(buff_i==0xAA)
 10956                           
 10957                           ; BSR set to: 0
 10958  001FC4  0EAA               	movlw	170
 10959  001FC6  197B               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 10960  001FC8  A4D8               	btfss	status,2,c
 10961  001FCA  D002               	goto	l414
 10962                           
 10963                           ; BSR set to: 0
 10964                           ;diskio.c: 297: {
 10965                           ;diskio.c: 298: crc_number |= buff_i;
 10966  001FCC  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 10967  001FCE  1379               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 10968  001FD0                     l414:
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;diskio.c: 299: }
 10972                           ;diskio.c: 300: count1++;
 10973                           
 10974                           ; BSR set to: 0
 10975                           
 10976                           ; BSR set to: 0
 10977  001FD0  4B77               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 10978  001FD2  2B78               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 10979                           
 10980                           ; BSR set to: 0
 10981                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 10982  001FD4  0EAA               	movlw	170
 10983  001FD6  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 10984  001FD8  E103               	bnz	u10890
 10985  001FDA  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 10986  001FDC  B4D8               	btfsc	status,2,c
 10987  001FDE  D008               	goto	u10900
 10988  001FE0                     u10890:
 10989                           
 10990                           ; BSR set to: 0
 10991  001FE0  BF78               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 10992  001FE2  D7E5               	goto	l411
 10993  001FE4  0EE8               	movlw	232
 10994  001FE6  5D77               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 10995  001FE8  0E03               	movlw	3
 10996  001FEA  5978               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 10997  001FEC  A0D8               	btfss	status,0,c
 10998  001FEE  D7DF               	goto	l411
 10999  001FF0                     u10900:
 11000                           
 11001                           ; BSR set to: 0
 11002                           ;diskio.c: 306: if (crc_number == 0x1AA)
 11003                           
 11004                           ; BSR set to: 0
 11005                           
 11006                           ; BSR set to: 0
 11007  001FF0  0EAA               	movlw	170
 11008  001FF2  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 11009  001FF4  E102               	bnz	u10911
 11010  001FF6  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 11011  001FF8  A4D8               	btfss	status,2,c
 11012  001FFA                     u10911:
 11013  001FFA  D0B1               	goto	l418
 11014                           
 11015                           ; BSR set to: 0
 11016                           ;diskio.c: 307: {
 11017                           ;diskio.c: 308: count1 = 0;
 11018  001FFC  0E00               	movlw	0
 11019  001FFE  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 11020  002000  0E00               	movlw	0
 11021  002002  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 11022  002004                     l419:
 11023                           
 11024                           ; BSR set to: 0
 11025                           ;diskio.c: 310: count2 = 0;
 11026  002004  0E00               	movlw	0
 11027  002006  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 11028  002008  0E00               	movlw	0
 11029  00200A  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 11030                           
 11031                           ; BSR set to: 0
 11032                           ;diskio.c: 311: buff = 0XFF;
 11033  00200C  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 11034  00200E                     
 11035                           ; BSR set to: 0
 11036                           ;diskio.c: 319: dummy_clocks(10);
 11037                           
 11038                           ; BSR set to: 0
 11039  00200E  0E0A               	movlw	10
 11040  002010  ECAA  F027         	call	_dummy_clocks
 11041                           
 11042                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 11043  002014  0E00               	movlw	0
 11044  002016  0100               	movlb	0	; () banked
 11045  002018  6F65               	movwf	command@arg& (0+255),b
 11046  00201A  0E00               	movlw	0
 11047  00201C  6F66               	movwf	(command@arg+1)& (0+255),b
 11048  00201E  0E00               	movlw	0
 11049  002020  6F67               	movwf	(command@arg+2)& (0+255),b
 11050  002022  0E00               	movlw	0
 11051  002024  6F68               	movwf	(command@arg+3)& (0+255),b
 11052  002026  0E00               	movlw	0
 11053  002028  6F69               	movwf	command@CRC& (0+255),b
 11054  00202A  0E77               	movlw	119
 11055  00202C  ECD4  F024         	call	_command
 11056                           
 11057                           ;diskio.c: 321: buff = 0XFF;
 11058  002030  0100               	movlb	0	; () banked
 11059  002032  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 11060                           
 11061                           ; BSR set to: 0
 11062                           ;diskio.c: 323: proceed();
 11063  002034  EC8C  F029         	call	_proceed	;wreg free
 11064  002038                     
 11065                           ;diskio.c: 325: buff = response();
 11066  002038  EC86  F029         	call	_response	;wreg free
 11067  00203C  0100               	movlb	0	; () banked
 11068  00203E  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 11069                           
 11070                           ; BSR set to: 0
 11071                           ;diskio.c: 326: count2++;
 11072  002040  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 11073  002042  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 11074                           
 11075                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 11076  002044  057F               	decf	sdc_disk_initialize@buff& (0+255),w,b
 11077  002046  B4D8               	btfsc	status,2,c
 11078  002048  D008               	goto	u10930
 11079                           
 11080                           ; BSR set to: 0
 11081  00204A  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 11082  00204C  D7F5               	goto	l421
 11083  00204E  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 11084  002050  E104               	bnz	l9113
 11085  002052  0E0A               	movlw	10
 11086  002054  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 11087  002056  A0D8               	btfss	status,0,c
 11088  002058  D7EF               	goto	l421
 11089  00205A                     u10930:
 11090  00205A                     l9113:
 11091                           
 11092                           ; BSR set to: 0
 11093                           ;diskio.c: 328: count2 = 0;
 11094  00205A  0E00               	movlw	0
 11095  00205C  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 11096  00205E  0E00               	movlw	0
 11097  002060  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 11098                           
 11099                           ; BSR set to: 0
 11100                           ;diskio.c: 332: dummy_clocks(10);
 11101  002062  0E0A               	movlw	10
 11102  002064  ECAA  F027         	call	_dummy_clocks
 11103                           
 11104                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 11105  002068  0E00               	movlw	0
 11106  00206A  0100               	movlb	0	; () banked
 11107  00206C  6F65               	movwf	command@arg& (0+255),b
 11108  00206E  0E00               	movlw	0
 11109  002070  6F66               	movwf	(command@arg+1)& (0+255),b
 11110  002072  0E00               	movlw	0
 11111  002074  6F67               	movwf	(command@arg+2)& (0+255),b
 11112  002076  0E40               	movlw	64
 11113  002078  6F68               	movwf	(command@arg+3)& (0+255),b
 11114  00207A  0E00               	movlw	0
 11115  00207C  6F69               	movwf	command@CRC& (0+255),b
 11116  00207E  0E69               	movlw	105
 11117  002080  ECD4  F024         	call	_command
 11118                           
 11119                           ;diskio.c: 334: proceed();
 11120  002084  EC8C  F029         	call	_proceed	;wreg free
 11121                           
 11122                           ;diskio.c: 335: buff = response();
 11123  002088  EC86  F029         	call	_response	;wreg free
 11124  00208C  0100               	movlb	0	; () banked
 11125  00208E  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 11126                           
 11127                           ; BSR set to: 0
 11128                           ;diskio.c: 336: count2++;
 11129  002090  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 11130  002092  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;diskio.c: 337: }while(buff!=0X00);
 11134  002094  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 11135  002096  A4D8               	btfss	status,2,c
 11136  002098  D7BA               	goto	l420
 11137                           
 11138                           ; BSR set to: 0
 11139                           ;diskio.c: 339: buff = 0xFF;
 11140  00209A  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 11141                           
 11142                           ; BSR set to: 0
 11143                           ;diskio.c: 342: dummy_clocks(10);
 11144  00209C  0E0A               	movlw	10
 11145  00209E  ECAA  F027         	call	_dummy_clocks
 11146                           
 11147                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 11148  0020A2  0E00               	movlw	0
 11149  0020A4  0100               	movlb	0	; () banked
 11150  0020A6  6F65               	movwf	command@arg& (0+255),b
 11151  0020A8  0E00               	movlw	0
 11152  0020AA  6F66               	movwf	(command@arg+1)& (0+255),b
 11153  0020AC  0E00               	movlw	0
 11154  0020AE  6F67               	movwf	(command@arg+2)& (0+255),b
 11155  0020B0  0E00               	movlw	0
 11156  0020B2  6F68               	movwf	(command@arg+3)& (0+255),b
 11157  0020B4  0EFF               	movlw	255
 11158  0020B6  6F69               	movwf	command@CRC& (0+255),b
 11159  0020B8  0E7A               	movlw	122
 11160  0020BA  ECD4  F024         	call	_command
 11161                           
 11162                           ;diskio.c: 344: proceed();
 11163  0020BE  EC8C  F029         	call	_proceed	;wreg free
 11164  0020C2                     
 11165                           ;diskio.c: 346: buff = response();
 11166  0020C2  EC86  F029         	call	_response	;wreg free
 11167  0020C6  0100               	movlb	0	; () banked
 11168  0020C8  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 11172  0020CA  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 11173  0020CC  257F               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 11174  0020CE  0B80               	andlw	128
 11175  0020D0  6F7C               	movwf	sdc_disk_initialize@ocr& (0+255),b
 11176                           
 11177                           ; BSR set to: 0
 11178                           ;diskio.c: 348: count2++;
 11179  0020D2  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 11180  0020D4  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 11181                           
 11182                           ; BSR set to: 0
 11183                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 11184  0020D6  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 11185  0020D8  B4D8               	btfsc	status,2,c
 11186  0020DA  D00B               	goto	u10970
 11187                           
 11188                           ; BSR set to: 0
 11189  0020DC  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 11190  0020DE  B4D8               	btfsc	status,2,c
 11191  0020E0  D008               	goto	u10970
 11192                           
 11193                           ; BSR set to: 0
 11194  0020E2  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 11195  0020E4  D7EE               	goto	l426
 11196  0020E6  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 11197  0020E8  E104               	bnz	l9143
 11198  0020EA  0E0A               	movlw	10
 11199  0020EC  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 11200  0020EE  A0D8               	btfss	status,0,c
 11201  0020F0  D7E8               	goto	l426
 11202  0020F2                     u10970:
 11203  0020F2                     l9143:
 11204                           
 11205                           ; BSR set to: 0
 11206                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 11207  0020F2  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 11208  0020F4  B4D8               	btfsc	status,2,c
 11209  0020F6  D003               	goto	u10990
 11210                           
 11211                           ; BSR set to: 0
 11212  0020F8  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 11213  0020FA  A4D8               	btfss	status,2,c
 11214  0020FC  D783               	goto	l419
 11215  0020FE                     u10990:
 11216                           
 11217                           ; BSR set to: 0
 11218                           ;diskio.c: 353: count1 = 0;
 11219                           
 11220                           ; BSR set to: 0
 11221                           
 11222                           ; BSR set to: 0
 11223  0020FE  0E00               	movlw	0
 11224  002100  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 11225  002102  0E00               	movlw	0
 11226  002104  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 11227                           
 11228                           ; BSR set to: 0
 11229                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 11230  002106  0E10               	movlw	16
 11231  002108  0100               	movlb	0	; () banked
 11232  00210A  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 11233  00210C  0E94               	movlw	148
 11234  00210E                     u14337:
 11235  00210E  2EE8               	decfsz	wreg,f,c
 11236  002110  D7FE               	bra	u14337
 11237  002112  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 11238  002114  D7FC               	bra	u14337
 11239  002116  F000               	nop	
 11240                           
 11241                           ;diskio.c: 356: stat = 0X00;
 11242  002118  0E00               	movlw	0
 11243  00211A  0100               	movlb	0	; () banked
 11244  00211C  6F76               	movwf	sdc_disk_initialize@stat& (0+255),b
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;diskio.c: 358: if(!ocr)
 11248  00211E  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 11249  002120  A4D8               	btfss	status,2,c
 11250  002122  D0B9               	goto	u11090
 11251                           
 11252                           ; BSR set to: 0
 11253                           ;diskio.c: 359: {
 11254                           ;diskio.c: 361: dummy_clocks(10);
 11255  002124  0E0A               	movlw	10
 11256  002126  ECAA  F027         	call	_dummy_clocks
 11257                           
 11258                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 11259  00212A  0E00               	movlw	0
 11260  00212C  0100               	movlb	0	; () banked
 11261  00212E  6F65               	movwf	command@arg& (0+255),b
 11262  002130  0E02               	movlw	2
 11263  002132  6F66               	movwf	(command@arg+1)& (0+255),b
 11264  002134  0E00               	movlw	0
 11265  002136  6F67               	movwf	(command@arg+2)& (0+255),b
 11266  002138  0E00               	movlw	0
 11267  00213A  6F68               	movwf	(command@arg+3)& (0+255),b
 11268  00213C  0EFF               	movlw	255
 11269  00213E  6F69               	movwf	command@CRC& (0+255),b
 11270  002140  0E50               	movlw	80
 11271  002142  ECD4  F024         	call	_command
 11272                           
 11273                           ;diskio.c: 363: proceed();
 11274  002146  EC8C  F029         	call	_proceed	;wreg free
 11275                           
 11276                           ;diskio.c: 365: buff = 0xFF;
 11277  00214A  0100               	movlb	0	; () banked
 11278  00214C  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 11279  00214E                     
 11280                           ; BSR set to: 0
 11281                           ;diskio.c: 367: buff = response();
 11282                           
 11283                           ; BSR set to: 0
 11284  00214E  EC86  F029         	call	_response	;wreg free
 11285  002152  0100               	movlb	0	; () banked
 11286  002154  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 11287                           
 11288                           ; BSR set to: 0
 11289                           ;diskio.c: 368: }while(buff!=0X00);
 11290  002156  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 11291  002158  B4D8               	btfsc	status,2,c
 11292  00215A  D09D               	goto	u11090
 11293  00215C  D7F8               	goto	l434
 11294  00215E                     l418:
 11295                           
 11296                           ; BSR set to: 0
 11297                           ;diskio.c: 373: else
 11298                           ;diskio.c: 374: {
 11299                           ;diskio.c: 376: count2 = 0;
 11300                           
 11301                           ; BSR set to: 0
 11302  00215E  0E00               	movlw	0
 11303  002160  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 11304  002162  0E00               	movlw	0
 11305  002164  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 11306                           
 11307                           ; BSR set to: 0
 11308                           ;diskio.c: 377: buff = 0XFF;
 11309  002166  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 11310                           
 11311                           ; BSR set to: 0
 11312                           ;diskio.c: 378: dummy_clocks(1);
 11313  002168  0E01               	movlw	1
 11314  00216A  ECAA  F027         	call	_dummy_clocks
 11315                           
 11316                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 11317  00216E  0E00               	movlw	0
 11318  002170  0100               	movlb	0	; () banked
 11319  002172  6F65               	movwf	command@arg& (0+255),b
 11320  002174  0E00               	movlw	0
 11321  002176  6F66               	movwf	(command@arg+1)& (0+255),b
 11322  002178  0E00               	movlw	0
 11323  00217A  6F67               	movwf	(command@arg+2)& (0+255),b
 11324  00217C  0E00               	movlw	0
 11325  00217E  6F68               	movwf	(command@arg+3)& (0+255),b
 11326  002180  0EFF               	movlw	255
 11327  002182  6F69               	movwf	command@CRC& (0+255),b
 11328  002184  0E69               	movlw	105
 11329  002186  ECD4  F024         	call	_command
 11330                           
 11331                           ;diskio.c: 380: proceed();
 11332  00218A  EC8C  F029         	call	_proceed	;wreg free
 11333  00218E                     
 11334                           ;diskio.c: 382: buff = response();
 11335  00218E  EC86  F029         	call	_response	;wreg free
 11336  002192  0100               	movlb	0	; () banked
 11337  002194  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 11338                           
 11339                           ; BSR set to: 0
 11340                           ;diskio.c: 383: count2++;
 11341  002196  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 11342  002198  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 11343                           
 11344                           ; BSR set to: 0
 11345                           ;diskio.c: 384: if(buff==0x00)
 11346  00219A  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 11347  00219C  A4D8               	btfss	status,2,c
 11348  00219E  D00C               	goto	l438
 11349                           
 11350                           ; BSR set to: 0
 11351                           ;diskio.c: 385: {
 11352                           ;diskio.c: 386: posicao_cursor_lcd(1,0);
 11353  0021A0  0E00               	movlw	0
 11354  0021A2  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 11355  0021A4  0E01               	movlw	1
 11356  0021A6  ECED  F023         	call	_posicao_cursor_lcd
 11357                           
 11358                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 11359  0021AA  0E90               	movlw	low STR_13
 11360  0021AC  0100               	movlb	0	; () banked
 11361  0021AE  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 11362  0021B0  0E08               	movlw	high STR_13
 11363  0021B2  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 11364  0021B4  EC19  F026         	call	_escreve_frase_ram_lcd	;wreg free
 11365  0021B8                     l438:
 11366                           
 11367                           ;diskio.c: 388: }
 11368                           ;diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 11369  0021B8  0E10               	movlw	16
 11370  0021BA  0100               	movlb	0	; () banked
 11371  0021BC  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 11372  0021BE  0E94               	movlw	148
 11373  0021C0                     u14347:
 11374  0021C0  2EE8               	decfsz	wreg,f,c
 11375  0021C2  D7FE               	bra	u14347
 11376  0021C4  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 11377  0021C6  D7FC               	bra	u14347
 11378  0021C8  F000               	nop	
 11379                           
 11380                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 11381  0021CA  0100               	movlb	0	; () banked
 11382  0021CC  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 11383  0021CE  B4D8               	btfsc	status,2,c
 11384  0021D0  D008               	goto	u11040
 11385                           
 11386                           ; BSR set to: 0
 11387  0021D2  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 11388  0021D4  D7DC               	goto	l437
 11389  0021D6  0E10               	movlw	16
 11390  0021D8  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 11391  0021DA  0E27               	movlw	39
 11392  0021DC  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 11393  0021DE  A0D8               	btfss	status,0,c
 11394  0021E0  D7D6               	goto	l437
 11395  0021E2                     u11040:
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;diskio.c: 392: buff = 0xFF;
 11399                           
 11400                           ; BSR set to: 0
 11401  0021E2  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 11402                           
 11403                           ; BSR set to: 0
 11404                           ;diskio.c: 393: if(count2==10)
 11405  0021E4  0E0A               	movlw	10
 11406  0021E6  197D               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 11407  0021E8  117E               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 11408  0021EA  A4D8               	btfss	status,2,c
 11409  0021EC  D038               	goto	u11080
 11410                           
 11411                           ; BSR set to: 0
 11412                           ;diskio.c: 394: {
 11413                           ;diskio.c: 395: count2 = 0;
 11414  0021EE  0E00               	movlw	0
 11415  0021F0  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 11416  0021F2  0E00               	movlw	0
 11417  0021F4  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 11418                           
 11419                           ; BSR set to: 0
 11420                           ;diskio.c: 396: dummy_clocks(10);
 11421  0021F6  0E0A               	movlw	10
 11422  0021F8  ECAA  F027         	call	_dummy_clocks
 11423                           
 11424                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 11425  0021FC  0E00               	movlw	0
 11426  0021FE  0100               	movlb	0	; () banked
 11427  002200  6F65               	movwf	command@arg& (0+255),b
 11428  002202  0E00               	movlw	0
 11429  002204  6F66               	movwf	(command@arg+1)& (0+255),b
 11430  002206  0E00               	movlw	0
 11431  002208  6F67               	movwf	(command@arg+2)& (0+255),b
 11432  00220A  0E00               	movlw	0
 11433  00220C  6F68               	movwf	(command@arg+3)& (0+255),b
 11434  00220E  0EFF               	movlw	255
 11435  002210  6F69               	movwf	command@CRC& (0+255),b
 11436  002212  0E41               	movlw	65
 11437  002214  ECD4  F024         	call	_command
 11438                           
 11439                           ;diskio.c: 398: proceed();
 11440  002218  EC8C  F029         	call	_proceed	;wreg free
 11441  00221C                     
 11442                           ;diskio.c: 400: buff = response();
 11443  00221C  EC86  F029         	call	_response	;wreg free
 11444  002220  0100               	movlb	0	; () banked
 11445  002222  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 11446                           
 11447                           ; BSR set to: 0
 11448                           ;diskio.c: 401: count2++;
 11449  002224  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 11450  002226  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 11451                           
 11452                           ; BSR set to: 0
 11453                           ;diskio.c: 402: if(buff==0x00)
 11454  002228  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 11455  00222A  A4D8               	btfss	status,2,c
 11456  00222C  D00C               	goto	l444
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;diskio.c: 403: {
 11460                           ;diskio.c: 404: posicao_cursor_lcd(1,0);
 11461  00222E  0E00               	movlw	0
 11462  002230  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 11463  002232  0E01               	movlw	1
 11464  002234  ECED  F023         	call	_posicao_cursor_lcd
 11465                           
 11466                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 11467  002238  0E7A               	movlw	low STR_14
 11468  00223A  0100               	movlb	0	; () banked
 11469  00223C  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 11470  00223E  0E08               	movlw	high STR_14
 11471  002240  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 11472  002242  EC19  F026         	call	_escreve_frase_ram_lcd	;wreg free
 11473  002246                     l444:
 11474                           
 11475                           ;diskio.c: 406: }
 11476                           ;diskio.c: 408: }while(buff!=0X00 && count2<10000);
 11477  002246  0100               	movlb	0	; () banked
 11478  002248  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 11479  00224A  B4D8               	btfsc	status,2,c
 11480  00224C  D008               	goto	u11080
 11481                           
 11482                           ; BSR set to: 0
 11483  00224E  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 11484  002250  D7E5               	goto	l443
 11485  002252  0E10               	movlw	16
 11486  002254  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 11487  002256  0E27               	movlw	39
 11488  002258  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 11489  00225A  A0D8               	btfss	status,0,c
 11490  00225C  D7DF               	goto	l443
 11491  00225E                     u11080:
 11492                           
 11493                           ; BSR set to: 0
 11494                           ;diskio.c: 409: }
 11495                           ;diskio.c: 412: dummy_clocks(10);
 11496                           
 11497                           ; BSR set to: 0
 11498                           
 11499                           ; BSR set to: 0
 11500                           
 11501                           ; BSR set to: 0
 11502  00225E  0E0A               	movlw	10
 11503  002260  ECAA  F027         	call	_dummy_clocks
 11504                           
 11505                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 11506  002264  0E00               	movlw	0
 11507  002266  0100               	movlb	0	; () banked
 11508  002268  6F65               	movwf	command@arg& (0+255),b
 11509  00226A  0E02               	movlw	2
 11510  00226C  6F66               	movwf	(command@arg+1)& (0+255),b
 11511  00226E  0E00               	movlw	0
 11512  002270  6F67               	movwf	(command@arg+2)& (0+255),b
 11513  002272  0E00               	movlw	0
 11514  002274  6F68               	movwf	(command@arg+3)& (0+255),b
 11515  002276  0EFF               	movlw	255
 11516  002278  6F69               	movwf	command@CRC& (0+255),b
 11517  00227A  0E50               	movlw	80
 11518  00227C  ECD4  F024         	call	_command
 11519                           
 11520                           ;diskio.c: 414: proceed();
 11521  002280  EC8C  F029         	call	_proceed	;wreg free
 11522                           
 11523                           ;diskio.c: 416: buff = 0xFF;
 11524  002284  0100               	movlb	0	; () banked
 11525  002286  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 11526  002288                     
 11527                           ; BSR set to: 0
 11528                           ;diskio.c: 418: buff = response();
 11529                           
 11530                           ; BSR set to: 0
 11531  002288  EC86  F029         	call	_response	;wreg free
 11532  00228C  0100               	movlb	0	; () banked
 11533  00228E  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 11534                           
 11535                           ; BSR set to: 0
 11536                           ;diskio.c: 419: }while(buff!=0X00);
 11537  002290  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 11538  002292  A4D8               	btfss	status,2,c
 11539  002294  D7F9               	goto	l448
 11540  002296                     u11090:
 11541                           
 11542                           ; BSR set to: 0
 11543                           ;diskio.c: 421: }
 11544                           ;diskio.c: 425: return stat;
 11545                           
 11546                           ; BSR set to: 0
 11547                           
 11548                           ; BSR set to: 0
 11549  002296  5176               	movf	sdc_disk_initialize@stat& (0+255),w,b
 11550  002298  0012               	return	
 11551  00229A                     __end_of_sdc_disk_initialize:
 11552                           	opt stack 0
 11553                           tosu	equ	0xFFF
 11554                           tosh	equ	0xFFE
 11555                           tosl	equ	0xFFD
 11556                           pclath	equ	0xFFA
 11557                           tblptru	equ	0xFF8
 11558                           tblptrh	equ	0xFF7
 11559                           tblptrl	equ	0xFF6
 11560                           tablat	equ	0xFF5
 11561                           prodh	equ	0xFF4
 11562                           prodl	equ	0xFF3
 11563                           intcon	equ	0xFF2
 11564                           intcon2	equ	0xFF1
 11565                           intcon3	equ	0xFF0
 11566                           postinc0	equ	0xFEE
 11567                           wreg	equ	0xFE8
 11568                           indf1	equ	0xFE7
 11569                           postinc1	equ	0xFE6
 11570                           postdec1	equ	0xFE5
 11571                           fsr1h	equ	0xFE2
 11572                           fsr1l	equ	0xFE1
 11573                           indf2	equ	0xFDF
 11574                           postinc2	equ	0xFDE
 11575                           postdec2	equ	0xFDD
 11576                           plusw2	equ	0xFDB
 11577                           fsr2h	equ	0xFDA
 11578                           fsr2l	equ	0xFD9
 11579                           status	equ	0xFD8
 11580                           
 11581 ;; *************** function _sdc_reset *****************
 11582 ;; Defined at:
 11583 ;;		line 238 in file "bibliotecas/diskio.c"
 11584 ;; Parameters:    Size  Location     Type
 11585 ;;		None
 11586 ;; Auto vars:     Size  Location     Type
 11587 ;;  teste          10    0        unsigned char [10]
 11588 ;;  count           2   16[BANK0 ] int 
 11589 ;;  count_nosd      2   14[BANK0 ] int 
 11590 ;;  i               2   12[BANK0 ] int 
 11591 ;;  receive         2    0        unsigned int 
 11592 ;;  buff            1   18[BANK0 ] unsigned char 
 11593 ;;  stat            1    0        unsigned char 
 11594 ;; Return value:  Size  Location     Type
 11595 ;;                  1    wreg      void 
 11596 ;; Registers used:
 11597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11598 ;; Tracked objects:
 11599 ;;		On entry : 0/0
 11600 ;;		On exit  : 0/0
 11601 ;;		Unchanged: 0/0
 11602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11603 ;;      Params:         0       0       0       0       0       0       0       0       0
 11604 ;;      Locals:         0       7       0       0       0       0       0       0       0
 11605 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11606 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11607 ;;Total ram usage:        7 bytes
 11608 ;; Hardware stack levels used:    1
 11609 ;; Hardware stack levels required when called:    6
 11610 ;; This function calls:
 11611 ;;		_command
 11612 ;;		_escreve_frase_ram_lcd
 11613 ;;		_posicao_cursor_lcd
 11614 ;;		_proceed
 11615 ;;		_response
 11616 ;; This function is called by:
 11617 ;;		_sdc_disk_initialize
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621                           	psect	text40
 11622  0042B2                     __ptext40:
 11623                           	opt stack 0
 11624  0042B2                     _sdc_reset:
 11625                           	opt stack 18
 11626                           
 11627                           ;diskio.c: 240: int i = 0, count = 0, count_nosd = 0;
 11628                           
 11629                           ; BSR set to: 0
 11630                           ;incstack = 0
 11631  0042B2  0E00               	movlw	0
 11632  0042B4  0100               	movlb	0	; () banked
 11633  0042B6  6F6D               	movwf	(sdc_reset@i+1)& (0+255),b
 11634  0042B8  0E00               	movlw	0
 11635  0042BA  6F6C               	movwf	sdc_reset@i& (0+255),b
 11636  0042BC  0E00               	movlw	0
 11637  0042BE  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 11638  0042C0  0E00               	movlw	0
 11639  0042C2  6F70               	movwf	sdc_reset@count& (0+255),b
 11640  0042C4  0E00               	movlw	0
 11641  0042C6  6F6F               	movwf	(sdc_reset@count_nosd+1)& (0+255),b
 11642  0042C8  0E00               	movlw	0
 11643  0042CA  6F6E               	movwf	sdc_reset@count_nosd& (0+255),b
 11644  0042CC                     
 11645                           ; BSR set to: 0
 11646                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 11647                           
 11648                           ; BSR set to: 0
 11649  0042CC  0E00               	movlw	0
 11650  0042CE  6F65               	movwf	command@arg& (0+255),b
 11651  0042D0  0E00               	movlw	0
 11652  0042D2  6F66               	movwf	(command@arg+1)& (0+255),b
 11653  0042D4  0E00               	movlw	0
 11654  0042D6  6F67               	movwf	(command@arg+2)& (0+255),b
 11655  0042D8  0E00               	movlw	0
 11656  0042DA  6F68               	movwf	(command@arg+3)& (0+255),b
 11657  0042DC  0E95               	movlw	149
 11658  0042DE  6F69               	movwf	command@CRC& (0+255),b
 11659  0042E0  0E40               	movlw	64
 11660  0042E2  ECD4  F024         	call	_command
 11661                           
 11662                           ;diskio.c: 249: proceed();
 11663  0042E6  EC8C  F029         	call	_proceed	;wreg free
 11664  0042EA                     
 11665                           ;diskio.c: 251: buff = response();
 11666  0042EA  EC86  F029         	call	_response	;wreg free
 11667  0042EE  0100               	movlb	0	; () banked
 11668  0042F0  6F72               	movwf	sdc_reset@buff& (0+255),b
 11669                           
 11670                           ; BSR set to: 0
 11671                           ;diskio.c: 252: count++;
 11672  0042F2  4B70               	infsnz	sdc_reset@count& (0+255),f,b
 11673  0042F4  2B71               	incf	(sdc_reset@count+1)& (0+255),f,b
 11674                           
 11675                           ; BSR set to: 0
 11676                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 11677  0042F6  0572               	decf	sdc_reset@buff& (0+255),w,b
 11678  0042F8  B4D8               	btfsc	status,2,c
 11679  0042FA  D008               	goto	u10640
 11680                           
 11681                           ; BSR set to: 0
 11682  0042FC  BF71               	btfsc	(sdc_reset@count+1)& (0+255),7,b
 11683  0042FE  D7F5               	goto	l402
 11684  004300  5171               	movf	(sdc_reset@count+1)& (0+255),w,b
 11685  004302  E104               	bnz	l8931
 11686  004304  0E0A               	movlw	10
 11687  004306  5D70               	subwf	sdc_reset@count& (0+255),w,b
 11688  004308  A0D8               	btfss	status,0,c
 11689  00430A  D7EF               	goto	l402
 11690  00430C                     u10640:
 11691  00430C                     l8931:
 11692                           
 11693                           ; BSR set to: 0
 11694                           ;diskio.c: 254: count = 0;
 11695  00430C  0E00               	movlw	0
 11696  00430E  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 11697  004310  0E00               	movlw	0
 11698  004312  6F70               	movwf	sdc_reset@count& (0+255),b
 11699                           
 11700                           ; BSR set to: 0
 11701                           ;diskio.c: 255: if(buff != 0x01)
 11702  004314  0572               	decf	sdc_reset@buff& (0+255),w,b
 11703  004316  B4D8               	btfsc	status,2,c
 11704  004318  D019               	goto	l406
 11705                           
 11706                           ; BSR set to: 0
 11707                           ;diskio.c: 256: {
 11708                           ;diskio.c: 257: posicao_cursor_lcd(1,0);
 11709  00431A  0E00               	movlw	0
 11710  00431C  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 11711  00431E  0E01               	movlw	1
 11712  004320  ECED  F023         	call	_posicao_cursor_lcd
 11713                           
 11714                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 11715  004324  0E85               	movlw	low STR_11
 11716  004326  0100               	movlb	0	; () banked
 11717  004328  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 11718  00432A  0E08               	movlw	high STR_11
 11719  00432C  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 11720  00432E  EC19  F026         	call	_escreve_frase_ram_lcd	;wreg free
 11721                           
 11722                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 11723  004332  0E00               	movlw	0
 11724  004334  0100               	movlb	0	; () banked
 11725  004336  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 11726  004338  0E02               	movlw	2
 11727  00433A  ECED  F023         	call	_posicao_cursor_lcd
 11728                           
 11729                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 11730  00433E  0E4D               	movlw	low STR_12
 11731  004340  0100               	movlb	0	; () banked
 11732  004342  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 11733  004344  0E08               	movlw	high STR_12
 11734  004346  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 11735  004348  EC19  F026         	call	_escreve_frase_ram_lcd	;wreg free
 11736  00434C                     l406:
 11737                           
 11738                           ;diskio.c: 261: }
 11739                           ;diskio.c: 263: }while(buff!=0X01);
 11740  00434C  0100               	movlb	0	; () banked
 11741  00434E  0572               	decf	sdc_reset@buff& (0+255),w,b
 11742  004350  B4D8               	btfsc	status,2,c
 11743  004352  0012               	return	
 11744  004354  D7BB               	goto	l401
 11745  004356                     __end_of_sdc_reset:
 11746                           	opt stack 0
 11747                           tosu	equ	0xFFF
 11748                           tosh	equ	0xFFE
 11749                           tosl	equ	0xFFD
 11750                           pclath	equ	0xFFA
 11751                           tblptru	equ	0xFF8
 11752                           tblptrh	equ	0xFF7
 11753                           tblptrl	equ	0xFF6
 11754                           tablat	equ	0xFF5
 11755                           prodh	equ	0xFF4
 11756                           prodl	equ	0xFF3
 11757                           intcon	equ	0xFF2
 11758                           intcon2	equ	0xFF1
 11759                           intcon3	equ	0xFF0
 11760                           postinc0	equ	0xFEE
 11761                           wreg	equ	0xFE8
 11762                           indf1	equ	0xFE7
 11763                           postinc1	equ	0xFE6
 11764                           postdec1	equ	0xFE5
 11765                           fsr1h	equ	0xFE2
 11766                           fsr1l	equ	0xFE1
 11767                           indf2	equ	0xFDF
 11768                           postinc2	equ	0xFDE
 11769                           postdec2	equ	0xFDD
 11770                           plusw2	equ	0xFDB
 11771                           fsr2h	equ	0xFDA
 11772                           fsr2l	equ	0xFD9
 11773                           status	equ	0xFD8
 11774                           
 11775 ;; *************** function _posicao_cursor_lcd *****************
 11776 ;; Defined at:
 11777 ;;		line 271 in file "bibliotecas/display_lcd.c"
 11778 ;; Parameters:    Size  Location     Type
 11779 ;;  linha           1    wreg     unsigned char 
 11780 ;;  coluna          1    1[BANK0 ] unsigned char 
 11781 ;; Auto vars:     Size  Location     Type
 11782 ;;  linha           1    2[BANK0 ] unsigned char 
 11783 ;;  endereco        1    3[BANK0 ] unsigned char 
 11784 ;; Return value:  Size  Location     Type
 11785 ;;                  1    wreg      void 
 11786 ;; Registers used:
 11787 ;;		wreg, status,2, status,0, cstack
 11788 ;; Tracked objects:
 11789 ;;		On entry : 0/0
 11790 ;;		On exit  : 0/0
 11791 ;;		Unchanged: 0/0
 11792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11793 ;;      Params:         0       1       0       0       0       0       0       0       0
 11794 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11795 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11796 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11797 ;;Total ram usage:        3 bytes
 11798 ;; Hardware stack levels used:    1
 11799 ;; Hardware stack levels required when called:    5
 11800 ;; This function calls:
 11801 ;;		_endereco_cursor_lcd
 11802 ;; This function is called by:
 11803 ;;		_mensagem_inicial
 11804 ;;		_escrita_sdcard
 11805 ;;		_sdc_reset
 11806 ;;		_sdc_disk_initialize
 11807 ;;		_sdcard_init
 11808 ;; This function uses a non-reentrant model
 11809 ;;
 11810                           
 11811                           	psect	text41
 11812  0047DA                     __ptext41:
 11813                           	opt stack 0
 11814  0047DA                     _posicao_cursor_lcd:
 11815                           	opt stack 24
 11816                           
 11817                           ; BSR set to: 0
 11818                           ;incstack = 0
 11819                           ;posicao_cursor_lcd@linha stored from wreg
 11820  0047DA  0100               	movlb	0	; () banked
 11821  0047DC  6F62               	movwf	posicao_cursor_lcd@linha& (0+255),b
 11822                           
 11823                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 11824  0047DE  0E00               	movlw	0
 11825  0047E0  0100               	movlb	0	; () banked
 11826  0047E2  6F63               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 11830  0047E4  0E11               	movlw	17
 11831  0047E6  6161               	cpfslt	posicao_cursor_lcd@coluna& (0+255),b
 11832  0047E8  D034               	goto	l556
 11833  0047EA  D022               	goto	l557
 11834  0047EC                     l558:
 11835                           
 11836                           ; BSR set to: 0
 11837                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 11838  0047EC  C061  F063         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 11842  0047F0  5163               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 11843  0047F2  EC68  F024         	call	_endereco_cursor_lcd
 11844                           
 11845                           ;display_lcd.c: 284: break;
 11846  0047F6  D02A               	goto	l559
 11847  0047F8                     
 11848                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 11849  0047F8  0100               	movlb	0	; () banked
 11850  0047FA  5161               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 11851  0047FC  0F40               	addlw	64
 11852  0047FE  6F63               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 11853                           
 11854                           ; BSR set to: 0
 11855                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 11856  004800  5163               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 11857  004802  EC68  F024         	call	_endereco_cursor_lcd
 11858                           
 11859                           ;display_lcd.c: 289: break;
 11860  004806  D022               	goto	l559
 11861  004808                     
 11862                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 11863  004808  0100               	movlb	0	; () banked
 11864  00480A  5161               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 11865  00480C  0F14               	addlw	20
 11866  00480E  6F63               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 11870  004810  5163               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 11871  004812  EC68  F024         	call	_endereco_cursor_lcd
 11872                           
 11873                           ;display_lcd.c: 294: break;
 11874  004816  D01A               	goto	l559
 11875  004818                     
 11876                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 11877  004818  0100               	movlb	0	; () banked
 11878  00481A  5161               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 11879  00481C  0F54               	addlw	84
 11880  00481E  6F63               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 11881                           
 11882                           ; BSR set to: 0
 11883                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 11884  004820  5163               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 11885  004822  EC68  F024         	call	_endereco_cursor_lcd
 11886                           
 11887                           ;display_lcd.c: 299: break;
 11888  004826  D012               	goto	l559
 11889  004828                     
 11890                           ;display_lcd.c: 302: endereco = 0x00U;
 11891  004828  0E00               	movlw	0
 11892  00482A  0100               	movlb	0	; () banked
 11893  00482C  6F63               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 11894                           
 11895                           ; BSR set to: 0
 11896                           ;display_lcd.c: 304: }
 11897                           
 11898                           ;display_lcd.c: 303: break;
 11899  00482E  D00E               	goto	l559
 11900  004830                     l557:
 11901                           
 11902                           ; BSR set to: 0
 11903                           
 11904                           ; BSR set to: 0
 11905  004830  5162               	movf	posicao_cursor_lcd@linha& (0+255),w,b
 11906                           
 11907                           ; Switch size 1, requested type "space"
 11908                           ; Number of cases is 4, Range of values is 1 to 4
 11909                           ; switch strategies available:
 11910                           ; Name         Instructions Cycles
 11911                           ; simple_byte           13     7 (average)
 11912                           ;	Chosen strategy is simple_byte
 11913  004832  0A01               	xorlw	1	; case 1
 11914  004834  B4D8               	btfsc	status,2,c
 11915  004836  D7DA               	goto	l558
 11916  004838  0A03               	xorlw	3	; case 2
 11917  00483A  B4D8               	btfsc	status,2,c
 11918  00483C  D7DD               	goto	l560
 11919  00483E  0A01               	xorlw	1	; case 3
 11920  004840  B4D8               	btfsc	status,2,c
 11921  004842  D7E2               	goto	l561
 11922  004844  0A07               	xorlw	7	; case 4
 11923  004846  B4D8               	btfsc	status,2,c
 11924  004848  D7E7               	goto	l562
 11925  00484A  D7EE               	goto	l563
 11926  00484C                     l559:
 11927                           
 11928                           ;display_lcd.c: 306: coluna++;
 11929                           
 11930                           ; BSR set to: 0
 11931  00484C  0100               	movlb	0	; () banked
 11932  00484E  2B61               	incf	posicao_cursor_lcd@coluna& (0+255),f,b
 11933                           
 11934                           ;display_lcd.c: 307: }
 11935  004850  0012               	return	
 11936  004852                     l556:
 11937                           
 11938                           ; BSR set to: 0
 11939                           ;display_lcd.c: 308: else
 11940                           ;display_lcd.c: 309: {
 11941                           ;display_lcd.c: 310: endereco = 0x00U;
 11942                           
 11943                           ; BSR set to: 0
 11944  004852  0E00               	movlw	0
 11945  004854  6F63               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 11946  004856  0012               	return	
 11947  004858                     __end_of_posicao_cursor_lcd:
 11948                           	opt stack 0
 11949                           tosu	equ	0xFFF
 11950                           tosh	equ	0xFFE
 11951                           tosl	equ	0xFFD
 11952                           pclath	equ	0xFFA
 11953                           tblptru	equ	0xFF8
 11954                           tblptrh	equ	0xFF7
 11955                           tblptrl	equ	0xFF6
 11956                           tablat	equ	0xFF5
 11957                           prodh	equ	0xFF4
 11958                           prodl	equ	0xFF3
 11959                           intcon	equ	0xFF2
 11960                           intcon2	equ	0xFF1
 11961                           intcon3	equ	0xFF0
 11962                           postinc0	equ	0xFEE
 11963                           wreg	equ	0xFE8
 11964                           indf1	equ	0xFE7
 11965                           postinc1	equ	0xFE6
 11966                           postdec1	equ	0xFE5
 11967                           fsr1h	equ	0xFE2
 11968                           fsr1l	equ	0xFE1
 11969                           indf2	equ	0xFDF
 11970                           postinc2	equ	0xFDE
 11971                           postdec2	equ	0xFDD
 11972                           plusw2	equ	0xFDB
 11973                           fsr2h	equ	0xFDA
 11974                           fsr2l	equ	0xFD9
 11975                           status	equ	0xFD8
 11976                           
 11977 ;; *************** function _endereco_cursor_lcd *****************
 11978 ;; Defined at:
 11979 ;;		line 218 in file "bibliotecas/display_lcd.c"
 11980 ;; Parameters:    Size  Location     Type
 11981 ;;  endereco        1    wreg     unsigned char 
 11982 ;; Auto vars:     Size  Location     Type
 11983 ;;  endereco        1    0[BANK0 ] unsigned char 
 11984 ;; Return value:  Size  Location     Type
 11985 ;;                  1    wreg      void 
 11986 ;; Registers used:
 11987 ;;		wreg, status,2, status,0, cstack
 11988 ;; Tracked objects:
 11989 ;;		On entry : 0/0
 11990 ;;		On exit  : 0/0
 11991 ;;		Unchanged: 0/0
 11992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11993 ;;      Params:         0       0       0       0       0       0       0       0       0
 11994 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11995 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11996 ;;      Totals:         0       1       0       0       0       0       0       0       0
 11997 ;;Total ram usage:        1 bytes
 11998 ;; Hardware stack levels used:    1
 11999 ;; Hardware stack levels required when called:    4
 12000 ;; This function calls:
 12001 ;;		_delay
 12002 ;; This function is called by:
 12003 ;;		_posicao_cursor_lcd
 12004 ;;		_cria_caractere_lcd
 12005 ;; This function uses a non-reentrant model
 12006 ;;
 12007                           
 12008                           	psect	text42
 12009  0048D0                     __ptext42:
 12010                           	opt stack 0
 12011  0048D0                     _endereco_cursor_lcd:
 12012                           	opt stack 24
 12013                           
 12014                           ; BSR set to: 0
 12015                           ;incstack = 0
 12016                           ;endereco_cursor_lcd@endereco stored from wreg
 12017  0048D0  0100               	movlb	0	; () banked
 12018  0048D2  6F60               	movwf	endereco_cursor_lcd@endereco& (0+255),b
 12019                           
 12020                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 12021  0048D4  9483               	bcf	3971,2,c	;volatile
 12022                           
 12023                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 12024  0048D6  9283               	bcf	3971,1,c	;volatile
 12025                           
 12026                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 12027  0048D8  9083               	bcf	3971,0,c	;volatile
 12028                           
 12029                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 12030  0048DA  8E83               	bsf	3971,7,c	;volatile
 12031                           
 12032                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 12033  0048DC  0100               	movlb	0	; () banked
 12034  0048DE  A960               	btfss	endereco_cursor_lcd@endereco& (0+255),4,b
 12035  0048E0  D002               	goto	l539
 12036                           
 12037                           ; BSR set to: 0
 12038  0048E2  8883               	bsf	3971,4,c	;volatile
 12039  0048E4  D001               	goto	l540
 12040  0048E6                     l539:
 12041                           
 12042                           ; BSR set to: 0
 12043                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 12044  0048E6  9883               	bcf	3971,4,c	;volatile
 12045  0048E8                     l540:
 12046                           
 12047                           ; BSR set to: 0
 12048                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 12049                           
 12050                           ; BSR set to: 0
 12051  0048E8  AB60               	btfss	endereco_cursor_lcd@endereco& (0+255),5,b
 12052  0048EA  D002               	goto	l541
 12053                           
 12054                           ; BSR set to: 0
 12055  0048EC  8A83               	bsf	3971,5,c	;volatile
 12056  0048EE  D001               	goto	l542
 12057  0048F0                     l541:
 12058                           
 12059                           ; BSR set to: 0
 12060                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 12061  0048F0  9A83               	bcf	3971,5,c	;volatile
 12062  0048F2                     l542:
 12063                           
 12064                           ; BSR set to: 0
 12065                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 12066                           
 12067                           ; BSR set to: 0
 12068  0048F2  AD60               	btfss	endereco_cursor_lcd@endereco& (0+255),6,b
 12069  0048F4  D002               	goto	l543
 12070                           
 12071                           ; BSR set to: 0
 12072  0048F6  8C83               	bsf	3971,6,c	;volatile
 12073  0048F8  D001               	goto	l544
 12074  0048FA                     l543:
 12075                           
 12076                           ; BSR set to: 0
 12077                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 12078  0048FA  9C83               	bcf	3971,6,c	;volatile
 12079  0048FC                     l544:
 12080                           
 12081                           ; BSR set to: 0
 12082                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 12083  0048FC  8083               	bsf	3971,0,c	;volatile
 12084                           
 12085                           ; BSR set to: 0
 12086                           ;display_lcd.c: 236: delay();
 12087  0048FE  ECF2  F028         	call	_delay	;wreg free
 12088                           
 12089                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 12090  004902  9083               	bcf	3971,0,c	;volatile
 12091                           
 12092                           ;display_lcd.c: 238: delay();
 12093  004904  ECF2  F028         	call	_delay	;wreg free
 12094                           
 12095                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 12096  004908  0100               	movlb	0	; () banked
 12097  00490A  A160               	btfss	endereco_cursor_lcd@endereco& (0+255),0,b
 12098  00490C  D002               	goto	l545
 12099                           
 12100                           ; BSR set to: 0
 12101  00490E  8883               	bsf	3971,4,c	;volatile
 12102  004910  D001               	goto	l546
 12103  004912                     l545:
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 12107  004912  9883               	bcf	3971,4,c	;volatile
 12108  004914                     l546:
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 12112  004914  A360               	btfss	endereco_cursor_lcd@endereco& (0+255),1,b
 12113  004916  D002               	goto	l547
 12114                           
 12115                           ; BSR set to: 0
 12116  004918  8A83               	bsf	3971,5,c	;volatile
 12117  00491A  D001               	goto	l548
 12118  00491C                     l547:
 12119                           
 12120                           ; BSR set to: 0
 12121                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 12122  00491C  9A83               	bcf	3971,5,c	;volatile
 12123  00491E                     l548:
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 12127  00491E  A560               	btfss	endereco_cursor_lcd@endereco& (0+255),2,b
 12128  004920  D002               	goto	l549
 12129                           
 12130                           ; BSR set to: 0
 12131  004922  8C83               	bsf	3971,6,c	;volatile
 12132  004924  D001               	goto	l550
 12133  004926                     l549:
 12134                           
 12135                           ; BSR set to: 0
 12136                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 12137  004926  9C83               	bcf	3971,6,c	;volatile
 12138  004928                     l550:
 12139                           
 12140                           ; BSR set to: 0
 12141                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 12142  004928  A760               	btfss	endereco_cursor_lcd@endereco& (0+255),3,b
 12143  00492A  D002               	goto	l551
 12144                           
 12145                           ; BSR set to: 0
 12146  00492C  8E83               	bsf	3971,7,c	;volatile
 12147  00492E  D001               	goto	l552
 12148  004930                     l551:
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 12152  004930  9E83               	bcf	3971,7,c	;volatile
 12153  004932                     l552:
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 12157  004932  8083               	bsf	3971,0,c	;volatile
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;display_lcd.c: 252: delay();
 12161  004934  ECF2  F028         	call	_delay	;wreg free
 12162                           
 12163                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 12164  004938  9083               	bcf	3971,0,c	;volatile
 12165                           
 12166                           ;display_lcd.c: 254: delay();
 12167  00493A  ECF2  F028         	call	_delay	;wreg free
 12168  00493E  0012               	return		;funcret
 12169  004940                     __end_of_endereco_cursor_lcd:
 12170                           	opt stack 0
 12171                           tosu	equ	0xFFF
 12172                           tosh	equ	0xFFE
 12173                           tosl	equ	0xFFD
 12174                           pclath	equ	0xFFA
 12175                           tblptru	equ	0xFF8
 12176                           tblptrh	equ	0xFF7
 12177                           tblptrl	equ	0xFF6
 12178                           tablat	equ	0xFF5
 12179                           prodh	equ	0xFF4
 12180                           prodl	equ	0xFF3
 12181                           intcon	equ	0xFF2
 12182                           intcon2	equ	0xFF1
 12183                           intcon3	equ	0xFF0
 12184                           postinc0	equ	0xFEE
 12185                           wreg	equ	0xFE8
 12186                           indf1	equ	0xFE7
 12187                           postinc1	equ	0xFE6
 12188                           postdec1	equ	0xFE5
 12189                           fsr1h	equ	0xFE2
 12190                           fsr1l	equ	0xFE1
 12191                           indf2	equ	0xFDF
 12192                           postinc2	equ	0xFDE
 12193                           postdec2	equ	0xFDD
 12194                           plusw2	equ	0xFDB
 12195                           fsr2h	equ	0xFDA
 12196                           fsr2l	equ	0xFD9
 12197                           status	equ	0xFD8
 12198                           
 12199 ;; *************** function _check_fs *****************
 12200 ;; Defined at:
 12201 ;;		line 623 in file "bibliotecas/tff.c"
 12202 ;; Parameters:    Size  Location     Type
 12203 ;;  sect            4   43[BANK0 ] unsigned long 
 12204 ;; Auto vars:     Size  Location     Type
 12205 ;;  fs              2   49[BANK0 ] PTR struct _FATFS
 12206 ;;		 -> NULL(0), fs(544), 
 12207 ;; Return value:  Size  Location     Type
 12208 ;;                  1    wreg      unsigned char 
 12209 ;; Registers used:
 12210 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12211 ;; Tracked objects:
 12212 ;;		On entry : 0/0
 12213 ;;		On exit  : 0/0
 12214 ;;		Unchanged: 0/0
 12215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12216 ;;      Params:         0       4       0       0       0       0       0       0       0
 12217 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12218 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12219 ;;      Totals:         0       8       0       0       0       0       0       0       0
 12220 ;;Total ram usage:        8 bytes
 12221 ;; Hardware stack levels used:    1
 12222 ;; Hardware stack levels required when called:    8
 12223 ;; This function calls:
 12224 ;;		_disk_read
 12225 ;;		_memcmp
 12226 ;; This function is called by:
 12227 ;;		_auto_mount
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           	psect	text43
 12232  0045BC                     __ptext43:
 12233                           	opt stack 0
 12234  0045BC                     _check_fs:
 12235                           	opt stack 18
 12236                           
 12237                           ;tff.c: 627: FATFS *fs = FatFs;
 12238                           
 12239                           ;incstack = 0
 12240  0045BC  C0F2  F091         	movff	_FatFs,check_fs@fs
 12241  0045C0  C0F3  F092         	movff	_FatFs+1,check_fs@fs+1
 12242                           
 12243                           ;tff.c: 629: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 12244  0045C4  0E20               	movlw	32
 12245  0045C6  0100               	movlb	0	; () banked
 12246  0045C8  2591               	addwf	check_fs@fs& (0+255),w,b
 12247  0045CA  6F7F               	movwf	disk_read@buff& (0+255),b
 12248  0045CC  0E00               	movlw	0
 12249  0045CE  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 12250  0045D0  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 12251  0045D2  C08B  F081         	movff	check_fs@sect,disk_read@sector
 12252  0045D6  C08C  F082         	movff	check_fs@sect+1,disk_read@sector+1
 12253  0045DA  C08D  F083         	movff	check_fs@sect+2,disk_read@sector+2
 12254  0045DE  C08E  F084         	movff	check_fs@sect+3,disk_read@sector+3
 12255  0045E2  0E01               	movlw	1
 12256  0045E4  6F85               	movwf	disk_read@count& (0+255),b
 12257  0045E6  0E00               	movlw	0
 12258  0045E8  EC96  F022         	call	_disk_read
 12259  0045EC  0900               	iorlw	0
 12260  0045EE  B4D8               	btfsc	status,2,c
 12261  0045F0  D002               	goto	l1051
 12262                           
 12263                           ;tff.c: 630: return 2;
 12264  0045F2  0E02               	movlw	2
 12265  0045F4  0012               	return	
 12266  0045F6                     l1051:
 12267                           
 12268                           ;tff.c: 631: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 12269  0045F6  0100               	movlb	0	; () banked
 12270  0045F8  EE22 F01E          	lfsr	2,542
 12271  0045FC  5191               	movf	check_fs@fs& (0+255),w,b
 12272  0045FE  26D9               	addwf	fsr2l,f,c
 12273  004600  5192               	movf	(check_fs@fs+1)& (0+255),w,b
 12274  004602  22DA               	addwfc	fsr2h,f,c
 12275  004604  0E55               	movlw	85
 12276  004606  18DE               	xorwf	postinc2,w,c
 12277  004608  E104               	bnz	u11840
 12278  00460A  0EAA               	movlw	170
 12279  00460C  18DE               	xorwf	postinc2,w,c
 12280  00460E  B4D8               	btfsc	status,2,c
 12281  004610  D002               	goto	l1053
 12282  004612                     u11840:
 12283                           
 12284                           ; BSR set to: 0
 12285                           ;tff.c: 632: return 2;
 12286  004612  0E02               	movlw	2
 12287                           
 12288                           ; BSR set to: 0
 12289  004614  0012               	return	
 12290  004616                     l1053:
 12291                           
 12292                           ; BSR set to: 0
 12293                           ;tff.c: 634: if (!memcmp(&fs->win[54], "FAT", 3))
 12294                           
 12295                           ; BSR set to: 0
 12296  004616  0E56               	movlw	86
 12297  004618  2591               	addwf	check_fs@fs& (0+255),w,b
 12298  00461A  6F60               	movwf	memcmp@s1& (0+255),b
 12299  00461C  0E00               	movlw	0
 12300  00461E  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 12301  004620  6F61               	movwf	(memcmp@s1+1)& (0+255),b
 12302  004622  0EC8               	movlw	low STR_16
 12303  004624  6F62               	movwf	memcmp@s2& (0+255),b
 12304  004626  0E08               	movlw	high STR_16
 12305  004628  6F63               	movwf	(memcmp@s2+1)& (0+255),b
 12306  00462A  0E00               	movlw	0
 12307  00462C  6F65               	movwf	(memcmp@n+1)& (0+255),b
 12308  00462E  0E03               	movlw	3
 12309  004630  6F64               	movwf	memcmp@n& (0+255),b
 12310  004632  ECAB  F021         	call	_memcmp	;wreg free
 12311  004636  0100               	movlb	0	; () banked
 12312  004638  5160               	movf	?_memcmp& (0+255),w,b
 12313  00463A  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 12314  00463C  A4D8               	btfss	status,2,c
 12315  00463E  D002               	goto	l1054
 12316                           
 12317                           ; BSR set to: 0
 12318                           ;tff.c: 635: return 0;
 12319  004640  0E00               	movlw	0
 12320                           
 12321                           ; BSR set to: 0
 12322  004642  0012               	return	
 12323  004644                     l1054:
 12324                           
 12325                           ; BSR set to: 0
 12326                           ;tff.c: 640: return 1;
 12327                           
 12328                           ; BSR set to: 0
 12329  004644  0E01               	movlw	1
 12330  004646  0012               	return	
 12331  004648                     __end_of_check_fs:
 12332                           	opt stack 0
 12333                           tosu	equ	0xFFF
 12334                           tosh	equ	0xFFE
 12335                           tosl	equ	0xFFD
 12336                           pclath	equ	0xFFA
 12337                           tblptru	equ	0xFF8
 12338                           tblptrh	equ	0xFF7
 12339                           tblptrl	equ	0xFF6
 12340                           tablat	equ	0xFF5
 12341                           prodh	equ	0xFF4
 12342                           prodl	equ	0xFF3
 12343                           intcon	equ	0xFF2
 12344                           intcon2	equ	0xFF1
 12345                           intcon3	equ	0xFF0
 12346                           postinc0	equ	0xFEE
 12347                           wreg	equ	0xFE8
 12348                           indf1	equ	0xFE7
 12349                           postinc1	equ	0xFE6
 12350                           postdec1	equ	0xFE5
 12351                           fsr1h	equ	0xFE2
 12352                           fsr1l	equ	0xFE1
 12353                           indf2	equ	0xFDF
 12354                           postinc2	equ	0xFDE
 12355                           postdec2	equ	0xFDD
 12356                           plusw2	equ	0xFDB
 12357                           fsr2h	equ	0xFDA
 12358                           fsr2l	equ	0xFD9
 12359                           status	equ	0xFD8
 12360                           
 12361 ;; *************** function _memcmp *****************
 12362 ;; Defined at:
 12363 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
 12364 ;; Parameters:    Size  Location     Type
 12365 ;;  s1              2    0[BANK0 ] PTR const void 
 12366 ;;		 -> fs.win(512), NULL(0), fs(544), 
 12367 ;;  s2              2    2[BANK0 ] PTR const void 
 12368 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_16(4), 
 12369 ;;  n               2    4[BANK0 ] unsigned int 
 12370 ;; Auto vars:     Size  Location     Type
 12371 ;;		None
 12372 ;; Return value:  Size  Location     Type
 12373 ;;                  2    0[BANK0 ] int 
 12374 ;; Registers used:
 12375 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 12376 ;; Tracked objects:
 12377 ;;		On entry : 0/0
 12378 ;;		On exit  : 0/0
 12379 ;;		Unchanged: 0/0
 12380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12381 ;;      Params:         0       6       0       0       0       0       0       0       0
 12382 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12383 ;;      Temps:          0       3       0       0       0       0       0       0       0
 12384 ;;      Totals:         0       9       0       0       0       0       0       0       0
 12385 ;;Total ram usage:        9 bytes
 12386 ;; Hardware stack levels used:    1
 12387 ;; Hardware stack levels required when called:    3
 12388 ;; This function calls:
 12389 ;;		Nothing
 12390 ;; This function is called by:
 12391 ;;		_trace_path
 12392 ;;		_check_fs
 12393 ;; This function uses a non-reentrant model
 12394 ;;
 12395                           
 12396                           	psect	text44
 12397  004356                     __ptext44:
 12398                           	opt stack 0
 12399  004356                     _memcmp:
 12400                           	opt stack 23
 12401                           
 12402                           ;incstack = 0
 12403  004356  D043               	goto	l1777
 12404  004358                     l9249:
 12405  004358  C060  FFD9         	movff	memcmp@s1,fsr2l
 12406  00435C  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 12407  004360  50DF               	movf	indf2,w,c
 12408  004362  0100               	movlb	0	; () banked
 12409  004364  6F66               	movwf	??_memcmp& (0+255),b
 12410  004366  C062  FFF6         	movff	memcmp@s2,tblptrl
 12411  00436A  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 12412  00436E  6AF8               	clrf	tblptru,c
 12413  004370  0E07               	movlw	(high __ramtop+-1)
 12414  004372  64F7               	cpfsgt	tblptrh,c
 12415  004374  D003               	bra	u11117
 12416  004376  0008               	tblrd		*
 12417  004378  50F5               	movf	tablat,w,c
 12418  00437A  D005               	bra	u11110
 12419  00437C                     u11117:
 12420  00437C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12421  004380  CFF7 FFEA          	movff	tblptrh,fsr0h
 12422  004384  50EF               	movf	indf0,w,c
 12423  004386                     u11110:
 12424  004386  0100               	movlb	0	; () banked
 12425  004388  1966               	xorwf	??_memcmp& (0+255),w,b
 12426  00438A  B4D8               	btfsc	status,2,c
 12427  00438C  D024               	goto	l1779
 12428                           
 12429                           ; BSR set to: 0
 12430  00438E  C062  FFF6         	movff	memcmp@s2,tblptrl
 12431  004392  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 12432  004396  6AF8               	clrf	tblptru,c
 12433  004398  0E07               	movlw	(high __ramtop+-1)
 12434  00439A  64F7               	cpfsgt	tblptrh,c
 12435  00439C  D003               	bra	u11137
 12436  00439E  0008               	tblrd		*
 12437  0043A0  50F5               	movf	tablat,w,c
 12438  0043A2  D005               	bra	u11130
 12439  0043A4                     u11137:
 12440  0043A4  CFF6 FFE9          	movff	tblptrl,fsr0l
 12441  0043A8  CFF7 FFEA          	movff	tblptrh,fsr0h
 12442  0043AC  50EF               	movf	indf0,w,c
 12443  0043AE                     u11130:
 12444  0043AE  0100               	movlb	0	; () banked
 12445  0043B0  6F66               	movwf	??_memcmp& (0+255),b
 12446  0043B2  6B67               	clrf	(??_memcmp+1)& (0+255),b
 12447  0043B4  1F66               	comf	??_memcmp& (0+255),f,b
 12448  0043B6  1F67               	comf	(??_memcmp+1)& (0+255),f,b
 12449  0043B8  4B66               	infsnz	??_memcmp& (0+255),f,b
 12450  0043BA  2B67               	incf	(??_memcmp+1)& (0+255),f,b
 12451  0043BC  C060  FFD9         	movff	memcmp@s1,fsr2l
 12452  0043C0  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 12453  0043C4  50DF               	movf	indf2,w,c
 12454  0043C6  6F68               	movwf	(??_memcmp+2)& (0+255),b
 12455  0043C8  5168               	movf	(??_memcmp+2)& (0+255),w,b
 12456  0043CA  2566               	addwf	??_memcmp& (0+255),w,b
 12457  0043CC  6F60               	movwf	?_memcmp& (0+255),b
 12458  0043CE  0E00               	movlw	0
 12459  0043D0  2167               	addwfc	(??_memcmp+1)& (0+255),w,b
 12460  0043D2  6F61               	movwf	(?_memcmp+1)& (0+255),b
 12461                           
 12462                           ; BSR set to: 0
 12463  0043D4  0012               	return	
 12464  0043D6                     l1779:
 12465                           
 12466                           ; BSR set to: 0
 12467                           
 12468                           ; BSR set to: 0
 12469  0043D6  4B60               	infsnz	memcmp@s1& (0+255),f,b
 12470  0043D8  2B61               	incf	(memcmp@s1+1)& (0+255),f,b
 12471  0043DA  4B62               	infsnz	memcmp@s2& (0+255),f,b
 12472  0043DC  2B63               	incf	(memcmp@s2+1)& (0+255),f,b
 12473  0043DE                     l1777:
 12474                           
 12475                           ; BSR set to: 0
 12476  0043DE  0100               	movlb	0	; () banked
 12477  0043E0  0764               	decf	memcmp@n& (0+255),f,b
 12478  0043E2  A0D8               	btfss	status,0,c
 12479  0043E4  0765               	decf	(memcmp@n+1)& (0+255),f,b
 12480  0043E6  2964               	incf	memcmp@n& (0+255),w,b
 12481  0043E8  E1B7               	bnz	l9249
 12482  0043EA  2965               	incf	(memcmp@n+1)& (0+255),w,b
 12483  0043EC  A4D8               	btfss	status,2,c
 12484  0043EE  D7B4               	goto	l1778
 12485                           
 12486                           ; BSR set to: 0
 12487                           
 12488                           ; BSR set to: 0
 12489  0043F0  0E00               	movlw	0
 12490  0043F2  6F61               	movwf	(?_memcmp+1)& (0+255),b
 12491  0043F4  0E00               	movlw	0
 12492  0043F6  6F60               	movwf	?_memcmp& (0+255),b
 12493  0043F8  0012               	return	
 12494  0043FA                     __end_of_memcmp:
 12495                           	opt stack 0
 12496                           tosu	equ	0xFFF
 12497                           tosh	equ	0xFFE
 12498                           tosl	equ	0xFFD
 12499                           pclath	equ	0xFFA
 12500                           tblptru	equ	0xFF8
 12501                           tblptrh	equ	0xFF7
 12502                           tblptrl	equ	0xFF6
 12503                           tablat	equ	0xFF5
 12504                           prodh	equ	0xFF4
 12505                           prodl	equ	0xFF3
 12506                           intcon	equ	0xFF2
 12507                           intcon2	equ	0xFF1
 12508                           intcon3	equ	0xFF0
 12509                           indf0	equ	0xFEF
 12510                           postinc0	equ	0xFEE
 12511                           fsr0h	equ	0xFEA
 12512                           fsr0l	equ	0xFE9
 12513                           wreg	equ	0xFE8
 12514                           indf1	equ	0xFE7
 12515                           postinc1	equ	0xFE6
 12516                           postdec1	equ	0xFE5
 12517                           fsr1h	equ	0xFE2
 12518                           fsr1l	equ	0xFE1
 12519                           indf2	equ	0xFDF
 12520                           postinc2	equ	0xFDE
 12521                           postdec2	equ	0xFDD
 12522                           plusw2	equ	0xFDB
 12523                           fsr2h	equ	0xFDA
 12524                           fsr2l	equ	0xFD9
 12525                           status	equ	0xFD8
 12526                           
 12527 ;; *************** function ___lmul *****************
 12528 ;; Defined at:
 12529 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 12530 ;; Parameters:    Size  Location     Type
 12531 ;;  multiplier      4    0[BANK0 ] unsigned long 
 12532 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 12533 ;; Auto vars:     Size  Location     Type
 12534 ;;  product         4    8[BANK0 ] unsigned long 
 12535 ;; Return value:  Size  Location     Type
 12536 ;;                  4    0[BANK0 ] unsigned long 
 12537 ;; Registers used:
 12538 ;;		wreg, status,2, status,0
 12539 ;; Tracked objects:
 12540 ;;		On entry : 0/0
 12541 ;;		On exit  : 0/0
 12542 ;;		Unchanged: 0/0
 12543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12544 ;;      Params:         0       8       0       0       0       0       0       0       0
 12545 ;;      Locals:         0       4       0       0       0       0       0       0       0
 12546 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12547 ;;      Totals:         0      12       0       0       0       0       0       0       0
 12548 ;;Total ram usage:       12 bytes
 12549 ;; Hardware stack levels used:    1
 12550 ;; Hardware stack levels required when called:    3
 12551 ;; This function calls:
 12552 ;;		Nothing
 12553 ;; This function is called by:
 12554 ;;		_clust2sect
 12555 ;;		_auto_mount
 12556 ;; This function uses a non-reentrant model
 12557 ;;
 12558                           
 12559                           	psect	text45
 12560  004B86                     __ptext45:
 12561                           	opt stack 0
 12562  004B86                     ___lmul:
 12563                           	opt stack 20
 12564                           
 12565                           ; BSR set to: 0
 12566                           ;incstack = 0
 12567  004B86  0E00               	movlw	0
 12568  004B88  0100               	movlb	0	; () banked
 12569  004B8A  6F68               	movwf	___lmul@product& (0+255),b
 12570  004B8C  0E00               	movlw	0
 12571  004B8E  6F69               	movwf	(___lmul@product+1)& (0+255),b
 12572  004B90  0E00               	movlw	0
 12573  004B92  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 12574  004B94  0E00               	movlw	0
 12575  004B96  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 12576  004B98                     
 12577                           ; BSR set to: 0
 12578                           
 12579                           ; BSR set to: 0
 12580  004B98  A160               	btfss	___lmul@multiplier& (0+255),0,b
 12581  004B9A  D008               	goto	l1344
 12582                           
 12583                           ; BSR set to: 0
 12584  004B9C  5164               	movf	___lmul@multiplicand& (0+255),w,b
 12585  004B9E  2768               	addwf	___lmul@product& (0+255),f,b
 12586  004BA0  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 12587  004BA2  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 12588  004BA4  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 12589  004BA6  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 12590  004BA8  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 12591  004BAA  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 12592  004BAC                     l1344:
 12593                           
 12594                           ; BSR set to: 0
 12595                           
 12596                           ; BSR set to: 0
 12597  004BAC  90D8               	bcf	status,0,c
 12598  004BAE  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 12599  004BB0  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 12600  004BB2  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 12601  004BB4  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 12602                           
 12603                           ; BSR set to: 0
 12604  004BB6  90D8               	bcf	status,0,c
 12605  004BB8  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 12606  004BBA  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 12607  004BBC  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 12608  004BBE  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 12609  004BC0  5160               	movf	___lmul@multiplier& (0+255),w,b
 12610  004BC2  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 12611  004BC4  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 12612  004BC6  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 12613  004BC8  A4D8               	btfss	status,2,c
 12614  004BCA  D7E6               	goto	l1343
 12615                           
 12616                           ; BSR set to: 0
 12617  004BCC  C068  F060         	movff	___lmul@product,?___lmul
 12618  004BD0  C069  F061         	movff	___lmul@product+1,?___lmul+1
 12619  004BD4  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 12620  004BD8  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 12621                           
 12622                           ; BSR set to: 0
 12623  004BDC  0012               	return		;funcret
 12624  004BDE                     __end_of___lmul:
 12625                           	opt stack 0
 12626                           tosu	equ	0xFFF
 12627                           tosh	equ	0xFFE
 12628                           tosl	equ	0xFFD
 12629                           pclath	equ	0xFFA
 12630                           tblptru	equ	0xFF8
 12631                           tblptrh	equ	0xFF7
 12632                           tblptrl	equ	0xFF6
 12633                           tablat	equ	0xFF5
 12634                           prodh	equ	0xFF4
 12635                           prodl	equ	0xFF3
 12636                           intcon	equ	0xFF2
 12637                           intcon2	equ	0xFF1
 12638                           intcon3	equ	0xFF0
 12639                           indf0	equ	0xFEF
 12640                           postinc0	equ	0xFEE
 12641                           fsr0h	equ	0xFEA
 12642                           fsr0l	equ	0xFE9
 12643                           wreg	equ	0xFE8
 12644                           indf1	equ	0xFE7
 12645                           postinc1	equ	0xFE6
 12646                           postdec1	equ	0xFE5
 12647                           fsr1h	equ	0xFE2
 12648                           fsr1l	equ	0xFE1
 12649                           indf2	equ	0xFDF
 12650                           postinc2	equ	0xFDE
 12651                           postdec2	equ	0xFDD
 12652                           plusw2	equ	0xFDB
 12653                           fsr2h	equ	0xFDA
 12654                           fsr2l	equ	0xFD9
 12655                           status	equ	0xFD8
 12656                           
 12657 ;; *************** function _f_mount *****************
 12658 ;; Defined at:
 12659 ;;		line 793 in file "bibliotecas/tff.c"
 12660 ;; Parameters:    Size  Location     Type
 12661 ;;  drv             1    wreg     unsigned char 
 12662 ;;  fs              2   32[COMRAM] PTR struct _FATFS
 12663 ;;		 -> fs(544), 
 12664 ;; Auto vars:     Size  Location     Type
 12665 ;;  drv             1    0[BANK0 ] unsigned char 
 12666 ;; Return value:  Size  Location     Type
 12667 ;;                  1    wreg      enum E3972
 12668 ;; Registers used:
 12669 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12670 ;; Tracked objects:
 12671 ;;		On entry : 0/0
 12672 ;;		On exit  : 0/0
 12673 ;;		Unchanged: 0/0
 12674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12675 ;;      Params:         2       0       0       0       0       0       0       0       0
 12676 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12677 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12678 ;;      Totals:         2       1       0       0       0       0       0       0       0
 12679 ;;Total ram usage:        3 bytes
 12680 ;; Hardware stack levels used:    1
 12681 ;; Hardware stack levels required when called:    3
 12682 ;; This function calls:
 12683 ;;		Nothing
 12684 ;; This function is called by:
 12685 ;;		_escrita_sdcard
 12686 ;;		_sdcard_init
 12687 ;; This function uses a non-reentrant model
 12688 ;;
 12689                           
 12690                           	psect	text46
 12691  004CD4                     __ptext46:
 12692                           	opt stack 0
 12693  004CD4                     _f_mount:
 12694                           	opt stack 25
 12695                           
 12696                           ; BSR set to: 0
 12697                           ;incstack = 0
 12698                           ;f_mount@drv stored from wreg
 12699  004CD4  0100               	movlb	0	; () banked
 12700  004CD6  6F60               	movwf	f_mount@drv& (0+255),b
 12701                           
 12702                           ;tff.c: 798: if (drv) return FR_INVALID_DRIVE;
 12703  004CD8  0100               	movlb	0	; () banked
 12704  004CDA  5160               	movf	f_mount@drv& (0+255),w,b
 12705  004CDC  B4D8               	btfsc	status,2,c
 12706  004CDE  D002               	goto	l1086
 12707                           
 12708                           ; BSR set to: 0
 12709  004CE0  0E05               	movlw	5
 12710                           
 12711                           ; BSR set to: 0
 12712  004CE2  0012               	return	
 12713  004CE4                     l1086:
 12714                           
 12715                           ; BSR set to: 0
 12716                           ;tff.c: 800: if (FatFs) FatFs->fs_type = 0;
 12717                           
 12718                           ; BSR set to: 0
 12719  004CE4  51F2               	movf	_FatFs& (0+255),w,b
 12720  004CE6  11F3               	iorwf	(_FatFs+1)& (0+255),w,b
 12721  004CE8  B4D8               	btfsc	status,2,c
 12722  004CEA  D008               	goto	l1088
 12723                           
 12724                           ; BSR set to: 0
 12725  004CEC  EE20 F01C          	lfsr	2,28
 12726  004CF0  51F2               	movf	_FatFs& (0+255),w,b
 12727  004CF2  26D9               	addwf	fsr2l,f,c
 12728  004CF4  51F3               	movf	(_FatFs+1)& (0+255),w,b
 12729  004CF6  22DA               	addwfc	fsr2h,f,c
 12730  004CF8  0E00               	movlw	0
 12731  004CFA  6EDF               	movwf	indf2,c
 12732  004CFC                     l1088:
 12733                           
 12734                           ; BSR set to: 0
 12735                           ;tff.c: 802: FatFs = fs;
 12736                           
 12737                           ; BSR set to: 0
 12738  004CFC  C021  F0F2         	movff	f_mount@fs,_FatFs
 12739  004D00  C022  F0F3         	movff	f_mount@fs+1,_FatFs+1
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;tff.c: 803: if (fs) fs->fs_type = 0;
 12743  004D04  5021               	movf	f_mount@fs,w,c
 12744  004D06  1022               	iorwf	f_mount@fs+1,w,c
 12745  004D08  B4D8               	btfsc	status,2,c
 12746  004D0A  D008               	goto	l1089
 12747                           
 12748                           ; BSR set to: 0
 12749  004D0C  EE20 F01C          	lfsr	2,28
 12750  004D10  5021               	movf	f_mount@fs,w,c
 12751  004D12  26D9               	addwf	fsr2l,f,c
 12752  004D14  5022               	movf	f_mount@fs+1,w,c
 12753  004D16  22DA               	addwfc	fsr2h,f,c
 12754  004D18  0E00               	movlw	0
 12755  004D1A  6EDF               	movwf	indf2,c
 12756  004D1C                     l1089:
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;tff.c: 805: return FR_OK;
 12760                           
 12761                           ; BSR set to: 0
 12762  004D1C  0E00               	movlw	0
 12763  004D1E  0012               	return	
 12764  004D20                     __end_of_f_mount:
 12765                           	opt stack 0
 12766                           tosu	equ	0xFFF
 12767                           tosh	equ	0xFFE
 12768                           tosl	equ	0xFFD
 12769                           pclath	equ	0xFFA
 12770                           tblptru	equ	0xFF8
 12771                           tblptrh	equ	0xFF7
 12772                           tblptrl	equ	0xFF6
 12773                           tablat	equ	0xFF5
 12774                           prodh	equ	0xFF4
 12775                           prodl	equ	0xFF3
 12776                           intcon	equ	0xFF2
 12777                           intcon2	equ	0xFF1
 12778                           intcon3	equ	0xFF0
 12779                           indf0	equ	0xFEF
 12780                           postinc0	equ	0xFEE
 12781                           fsr0h	equ	0xFEA
 12782                           fsr0l	equ	0xFE9
 12783                           wreg	equ	0xFE8
 12784                           indf1	equ	0xFE7
 12785                           postinc1	equ	0xFE6
 12786                           postdec1	equ	0xFE5
 12787                           fsr1h	equ	0xFE2
 12788                           fsr1l	equ	0xFE1
 12789                           indf2	equ	0xFDF
 12790                           postinc2	equ	0xFDE
 12791                           postdec2	equ	0xFDD
 12792                           plusw2	equ	0xFDB
 12793                           fsr2h	equ	0xFDA
 12794                           fsr2l	equ	0xFD9
 12795                           status	equ	0xFD8
 12796                           
 12797 ;; *************** function _f_lseek *****************
 12798 ;; Defined at:
 12799 ;;		line 1132 in file "bibliotecas/tff.c"
 12800 ;; Parameters:    Size  Location     Type
 12801 ;;  fp              2  100[BANK0 ] PTR struct _FIL
 12802 ;;		 -> fil(28), 
 12803 ;;  ofs             4  102[BANK0 ] unsigned long 
 12804 ;; Auto vars:     Size  Location     Type
 12805 ;;  csize           4  123[BANK0 ] unsigned long 
 12806 ;;  ifptr           4  119[BANK0 ] unsigned long 
 12807 ;;  clust           2  127[BANK0 ] unsigned short 
 12808 ;;  res             1  118[BANK0 ] enum E155
 12809 ;; Return value:  Size  Location     Type
 12810 ;;                  1    wreg      enum E3972
 12811 ;; Registers used:
 12812 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12813 ;; Tracked objects:
 12814 ;;		On entry : 0/0
 12815 ;;		On exit  : 0/0
 12816 ;;		Unchanged: 0/0
 12817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12818 ;;      Params:         0       6       0       0       0       0       0       0       0
 12819 ;;      Locals:         0      11       0       0       0       0       0       0       0
 12820 ;;      Temps:          0      12       0       0       0       0       0       0       0
 12821 ;;      Totals:         0      29       0       0       0       0       0       0       0
 12822 ;;Total ram usage:       29 bytes
 12823 ;; Hardware stack levels used:    1
 12824 ;; Hardware stack levels required when called:   11
 12825 ;; This function calls:
 12826 ;;		___lldiv
 12827 ;;		_create_chain
 12828 ;;		_get_cluster
 12829 ;;		_validate
 12830 ;; This function is called by:
 12831 ;;		_escrita_sdcard
 12832 ;; This function uses a non-reentrant model
 12833 ;;
 12834                           
 12835                           	psect	text47
 12836  001390                     __ptext47:
 12837                           	opt stack 0
 12838  001390                     _f_lseek:
 12839                           	opt stack 17
 12840                           
 12841                           ;tff.c: 1137: FRESULT res;
 12842                           ;tff.c: 1138: CLUST clust;
 12843                           ;tff.c: 1139: DWORD csize, ifptr;
 12844                           ;tff.c: 1142: res = validate(fp->fs, fp->id);
 12845                           
 12846                           ; BSR set to: 0
 12847                           ;incstack = 0
 12848  001390  0100               	movlb	0	; () banked
 12849  001392  EE20 F004          	lfsr	2,4
 12850  001396  51C4               	movf	f_lseek@fp& (0+255),w,b
 12851  001398  26D9               	addwf	fsr2l,f,c
 12852  00139A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12853  00139C  22DA               	addwfc	fsr2h,f,c
 12854  00139E  CFDE F065          	movff	postinc2,validate@fs
 12855  0013A2  CFDD F066          	movff	postdec2,validate@fs+1
 12856  0013A6  C0C4  FFD9         	movff	f_lseek@fp,fsr2l
 12857  0013AA  C0C5  FFDA         	movff	f_lseek@fp+1,fsr2h
 12858  0013AE  CFDE F067          	movff	postinc2,validate@id
 12859  0013B2  CFDD F068          	movff	postdec2,validate@id+1
 12860  0013B6  EC90  F026         	call	_validate	;wreg free
 12861  0013BA  0100               	movlb	0	; () banked
 12862  0013BC  6FD6               	movwf	f_lseek@res& (0+255),b
 12863                           
 12864                           ; BSR set to: 0
 12865                           ;tff.c: 1143: if (res != FR_OK) return res;
 12866  0013BE  51D6               	movf	f_lseek@res& (0+255),w,b
 12867  0013C0  A4D8               	btfss	status,2,c
 12868  0013C2  0012               	return	
 12869                           
 12870                           ; BSR set to: 0
 12871                           ;tff.c: 1144: if (fp->flag & 0x80) return FR_RW_ERROR;
 12872                           
 12873                           ; BSR set to: 0
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;	Return value of _f_lseek is never used
 12877  0013C4  EE20 F002          	lfsr	2,2
 12878  0013C8  51C4               	movf	f_lseek@fp& (0+255),w,b
 12879  0013CA  26D9               	addwf	fsr2l,f,c
 12880  0013CC  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12881  0013CE  22DA               	addwfc	fsr2h,f,c
 12882  0013D0  BEDF               	btfsc	indf2,7,c
 12883  0013D2  0012               	return	
 12884                           
 12885                           ; BSR set to: 0
 12886                           ;tff.c: 1145: if (ofs > fp->fsize
 12887                           ;tff.c: 1147: && !(fp->flag & 0x02)
 12888                           ;tff.c: 1149: ) ofs = fp->fsize;
 12889                           
 12890                           ; BSR set to: 0
 12891                           
 12892                           ; BSR set to: 0
 12893                           ;	Return value of _f_lseek is never used
 12894  0013D4  EE20 F00A          	lfsr	2,10
 12895  0013D8  51C4               	movf	f_lseek@fp& (0+255),w,b
 12896  0013DA  26D9               	addwf	fsr2l,f,c
 12897  0013DC  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12898  0013DE  22DA               	addwfc	fsr2h,f,c
 12899  0013E0  51C6               	movf	f_lseek@ofs& (0+255),w,b
 12900  0013E2  5CDE               	subwf	postinc2,w,c
 12901  0013E4  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 12902  0013E6  58DE               	subwfb	postinc2,w,c
 12903  0013E8  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 12904  0013EA  58DE               	subwfb	postinc2,w,c
 12905  0013EC  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 12906  0013EE  58DE               	subwfb	postinc2,w,c
 12907  0013F0  B0D8               	btfsc	status,0,c
 12908  0013F2  D016               	goto	l1187
 12909                           
 12910                           ; BSR set to: 0
 12911  0013F4  EE20 F002          	lfsr	2,2
 12912  0013F8  51C4               	movf	f_lseek@fp& (0+255),w,b
 12913  0013FA  26D9               	addwf	fsr2l,f,c
 12914  0013FC  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12915  0013FE  22DA               	addwfc	fsr2h,f,c
 12916  001400  B2DF               	btfsc	indf2,1,c
 12917  001402  D00E               	goto	l1187
 12918                           
 12919                           ; BSR set to: 0
 12920  001404  EE20 F00A          	lfsr	2,10
 12921  001408  51C4               	movf	f_lseek@fp& (0+255),w,b
 12922  00140A  26D9               	addwf	fsr2l,f,c
 12923  00140C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12924  00140E  22DA               	addwfc	fsr2h,f,c
 12925  001410  CFDE F0C6          	movff	postinc2,f_lseek@ofs
 12926  001414  CFDE F0C7          	movff	postinc2,f_lseek@ofs+1
 12927  001418  CFDE F0C8          	movff	postinc2,f_lseek@ofs+2
 12928  00141C  CFDE F0C9          	movff	postinc2,f_lseek@ofs+3
 12929  001420                     l1187:
 12930                           
 12931                           ; BSR set to: 0
 12932                           ;tff.c: 1151: ifptr = fp->fptr;
 12933  001420  EE20 F006          	lfsr	2,6
 12934  001424  51C4               	movf	f_lseek@fp& (0+255),w,b
 12935  001426  26D9               	addwf	fsr2l,f,c
 12936  001428  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12937  00142A  22DA               	addwfc	fsr2h,f,c
 12938  00142C  CFDE F0D7          	movff	postinc2,f_lseek@ifptr
 12939  001430  CFDE F0D8          	movff	postinc2,f_lseek@ifptr+1
 12940  001434  CFDE F0D9          	movff	postinc2,f_lseek@ifptr+2
 12941  001438  CFDE F0DA          	movff	postinc2,f_lseek@ifptr+3
 12942                           
 12943                           ;tff.c: 1152: fp->fptr = 0; fp->csect = 255;
 12944  00143C  EE20 F006          	lfsr	2,6
 12945  001440  51C4               	movf	f_lseek@fp& (0+255),w,b
 12946  001442  26D9               	addwf	fsr2l,f,c
 12947  001444  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12948  001446  22DA               	addwfc	fsr2h,f,c
 12949  001448  6ADE               	clrf	postinc2,c
 12950  00144A  6ADE               	clrf	postinc2,c
 12951  00144C  6ADE               	clrf	postinc2,c
 12952  00144E  6ADD               	clrf	postdec2,c
 12953  001450  EE20 F003          	lfsr	2,3
 12954  001454  51C4               	movf	f_lseek@fp& (0+255),w,b
 12955  001456  26D9               	addwf	fsr2l,f,c
 12956  001458  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12957  00145A  22DA               	addwfc	fsr2h,f,c
 12958  00145C  0EFF               	movlw	255
 12959  00145E  6EDF               	movwf	indf2,c
 12960                           
 12961                           ; BSR set to: 0
 12962                           ;tff.c: 1153: if (ofs > 0) {
 12963  001460  51C6               	movf	f_lseek@ofs& (0+255),w,b
 12964  001462  11C7               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 12965  001464  11C8               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 12966  001466  11C9               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 12967  001468  B4D8               	btfsc	status,2,c
 12968  00146A  D19B               	goto	l1204
 12969                           
 12970                           ; BSR set to: 0
 12971                           ;tff.c: 1154: csize = (DWORD)fp->fs->csize * 512U;
 12972  00146C  EE20 F004          	lfsr	2,4
 12973  001470  51C4               	movf	f_lseek@fp& (0+255),w,b
 12974  001472  26D9               	addwf	fsr2l,f,c
 12975  001474  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12976  001476  22DA               	addwfc	fsr2h,f,c
 12977  001478  EE10 F01D          	lfsr	1,29
 12978  00147C  50DE               	movf	postinc2,w,c
 12979  00147E  26E1               	addwf	fsr1l,f,c
 12980  001480  50DD               	movf	postdec2,w,c
 12981  001482  22E2               	addwfc	fsr1h,f,c
 12982  001484  50E7               	movf	indf1,w,c
 12983  001486  6FCA               	movwf	??_f_lseek& (0+255),b
 12984  001488  C0CA  F0CB         	movff	??_f_lseek,??_f_lseek+1
 12985  00148C  6BCC               	clrf	(??_f_lseek+2)& (0+255),b
 12986  00148E  6BCD               	clrf	(??_f_lseek+3)& (0+255),b
 12987  001490  6BCE               	clrf	(??_f_lseek+4)& (0+255),b
 12988  001492  0E09               	movlw	9
 12989  001494                     u12955:
 12990  001494  90D8               	bcf	status,0,c
 12991  001496  37CB               	rlcf	(??_f_lseek+1)& (0+255),f,b
 12992  001498  37CC               	rlcf	(??_f_lseek+2)& (0+255),f,b
 12993  00149A  37CD               	rlcf	(??_f_lseek+3)& (0+255),f,b
 12994  00149C  37CE               	rlcf	(??_f_lseek+4)& (0+255),f,b
 12995  00149E  2EE8               	decfsz	wreg,f,c
 12996  0014A0  D7F9               	goto	u12955
 12997  0014A2  C0CB  F0DB         	movff	??_f_lseek+1,f_lseek@csize
 12998  0014A6  C0CC  F0DC         	movff	??_f_lseek+2,f_lseek@csize+1
 12999  0014AA  C0CD  F0DD         	movff	??_f_lseek+3,f_lseek@csize+2
 13000  0014AE  C0CE  F0DE         	movff	??_f_lseek+4,f_lseek@csize+3
 13001                           
 13002                           ; BSR set to: 0
 13003                           ;tff.c: 1155: if (ifptr > 0 &&
 13004                           ;tff.c: 1156: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 13005  0014B2  51D7               	movf	f_lseek@ifptr& (0+255),w,b
 13006  0014B4  11D8               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 13007  0014B6  11D9               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 13008  0014B8  11DA               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 13009  0014BA  B4D8               	btfsc	status,2,c
 13010  0014BC  D08F               	goto	l1189
 13011                           
 13012                           ; BSR set to: 0
 13013  0014BE  0EFF               	movlw	255
 13014  0014C0  25C6               	addwf	f_lseek@ofs& (0+255),w,b
 13015  0014C2  6F60               	movwf	___lldiv@dividend& (0+255),b
 13016  0014C4  0EFF               	movlw	255
 13017  0014C6  21C7               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 13018  0014C8  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 13019  0014CA  0EFF               	movlw	255
 13020  0014CC  21C8               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 13021  0014CE  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 13022  0014D0  0EFF               	movlw	255
 13023  0014D2  21C9               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 13024  0014D4  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 13025  0014D6  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 13026  0014DA  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 13027  0014DE  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 13028  0014E2  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 13029  0014E6  ECAB  F023         	call	___lldiv	;wreg free
 13030  0014EA  C060  F0CA         	movff	?___lldiv,??_f_lseek
 13031  0014EE  C061  F0CB         	movff	?___lldiv+1,??_f_lseek+1
 13032  0014F2  C062  F0CC         	movff	?___lldiv+2,??_f_lseek+2
 13033  0014F6  C063  F0CD         	movff	?___lldiv+3,??_f_lseek+3
 13034  0014FA  0EFF               	movlw	255
 13035  0014FC  0100               	movlb	0	; () banked
 13036  0014FE  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 13037  001500  6F60               	movwf	___lldiv@dividend& (0+255),b
 13038  001502  0EFF               	movlw	255
 13039  001504  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 13040  001506  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 13041  001508  0EFF               	movlw	255
 13042  00150A  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 13043  00150C  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 13044  00150E  0EFF               	movlw	255
 13045  001510  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 13046  001512  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 13047  001514  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 13048  001518  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 13049  00151C  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 13050  001520  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 13051  001524  ECAB  F023         	call	___lldiv	;wreg free
 13052  001528  0100               	movlb	0	; () banked
 13053  00152A  5160               	movf	?___lldiv& (0+255),w,b
 13054  00152C  5DCA               	subwf	??_f_lseek& (0+255),w,b
 13055  00152E  5161               	movf	(?___lldiv+1)& (0+255),w,b
 13056  001530  59CB               	subwfb	(??_f_lseek+1)& (0+255),w,b
 13057  001532  5162               	movf	(?___lldiv+2)& (0+255),w,b
 13058  001534  59CC               	subwfb	(??_f_lseek+2)& (0+255),w,b
 13059  001536  5163               	movf	(?___lldiv+3)& (0+255),w,b
 13060  001538  59CD               	subwfb	(??_f_lseek+3)& (0+255),w,b
 13061  00153A  A0D8               	btfss	status,0,c
 13062  00153C  D04F               	goto	l1189
 13063                           
 13064                           ; BSR set to: 0
 13065                           ;tff.c: 1157: fp->fptr = (ifptr - 1) & ~(csize - 1);
 13066  00153E  0EFF               	movlw	255
 13067  001540  25DB               	addwf	f_lseek@csize& (0+255),w,b
 13068  001542  6FCA               	movwf	??_f_lseek& (0+255),b
 13069  001544  0EFF               	movlw	255
 13070  001546  21DC               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 13071  001548  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 13072  00154A  0EFF               	movlw	255
 13073  00154C  21DD               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 13074  00154E  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 13075  001550  0EFF               	movlw	255
 13076  001552  21DE               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 13077  001554  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 13078  001556  1FCA               	comf	??_f_lseek& (0+255),f,b
 13079  001558  1FCB               	comf	(??_f_lseek+1)& (0+255),f,b
 13080  00155A  1FCC               	comf	(??_f_lseek+2)& (0+255),f,b
 13081  00155C  1FCD               	comf	(??_f_lseek+3)& (0+255),f,b
 13082  00155E  0EFF               	movlw	255
 13083  001560  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 13084  001562  6FCE               	movwf	(??_f_lseek+4)& (0+255),b
 13085  001564  0EFF               	movlw	255
 13086  001566  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 13087  001568  6FCF               	movwf	(??_f_lseek+5)& (0+255),b
 13088  00156A  0EFF               	movlw	255
 13089  00156C  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 13090  00156E  6FD0               	movwf	(??_f_lseek+6)& (0+255),b
 13091  001570  0EFF               	movlw	255
 13092  001572  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 13093  001574  6FD1               	movwf	(??_f_lseek+7)& (0+255),b
 13094  001576  51CA               	movf	??_f_lseek& (0+255),w,b
 13095  001578  15CE               	andwf	(??_f_lseek+4)& (0+255),w,b
 13096  00157A  6FD2               	movwf	(??_f_lseek+8)& (0+255),b
 13097  00157C  51CB               	movf	(??_f_lseek+1)& (0+255),w,b
 13098  00157E  15CF               	andwf	(??_f_lseek+5)& (0+255),w,b
 13099  001580  6FD3               	movwf	(??_f_lseek+9)& (0+255),b
 13100  001582  51CC               	movf	(??_f_lseek+2)& (0+255),w,b
 13101  001584  15D0               	andwf	(??_f_lseek+6)& (0+255),w,b
 13102  001586  6FD4               	movwf	(??_f_lseek+10)& (0+255),b
 13103  001588  51CD               	movf	(??_f_lseek+3)& (0+255),w,b
 13104  00158A  15D1               	andwf	(??_f_lseek+7)& (0+255),w,b
 13105  00158C  6FD5               	movwf	(??_f_lseek+11)& (0+255),b
 13106  00158E  EE20 F006          	lfsr	2,6
 13107  001592  51C4               	movf	f_lseek@fp& (0+255),w,b
 13108  001594  26D9               	addwf	fsr2l,f,c
 13109  001596  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13110  001598  22DA               	addwfc	fsr2h,f,c
 13111  00159A  C0D2  FFDE         	movff	??_f_lseek+8,postinc2
 13112  00159E  C0D3  FFDE         	movff	??_f_lseek+9,postinc2
 13113  0015A2  C0D4  FFDE         	movff	??_f_lseek+10,postinc2
 13114  0015A6  C0D5  FFDE         	movff	??_f_lseek+11,postinc2
 13115                           
 13116                           ;tff.c: 1158: ofs -= fp->fptr;
 13117  0015AA  EE20 F006          	lfsr	2,6
 13118  0015AE  51C4               	movf	f_lseek@fp& (0+255),w,b
 13119  0015B0  26D9               	addwf	fsr2l,f,c
 13120  0015B2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13121  0015B4  22DA               	addwfc	fsr2h,f,c
 13122  0015B6  50DE               	movf	postinc2,w,c
 13123  0015B8  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 13124  0015BA  50DE               	movf	postinc2,w,c
 13125  0015BC  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 13126  0015BE  50DE               	movf	postinc2,w,c
 13127  0015C0  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 13128  0015C2  50DD               	movf	postdec2,w,c
 13129  0015C4  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 13130                           
 13131                           ;tff.c: 1159: clust = fp->curr_clust;
 13132  0015C6  EE20 F010          	lfsr	2,16
 13133  0015CA  51C4               	movf	f_lseek@fp& (0+255),w,b
 13134  0015CC  26D9               	addwf	fsr2l,f,c
 13135  0015CE  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13136  0015D0  22DA               	addwfc	fsr2h,f,c
 13137  0015D2  CFDE F0DF          	movff	postinc2,f_lseek@clust
 13138  0015D6  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 13139                           
 13140                           ;tff.c: 1160: } else {
 13141  0015DA  D031               	goto	l1190
 13142  0015DC                     l1189:
 13143                           
 13144                           ; BSR set to: 0
 13145                           ;tff.c: 1161: clust = fp->org_clust;
 13146                           
 13147                           ; BSR set to: 0
 13148  0015DC  EE20 F00E          	lfsr	2,14
 13149  0015E0  51C4               	movf	f_lseek@fp& (0+255),w,b
 13150  0015E2  26D9               	addwf	fsr2l,f,c
 13151  0015E4  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13152  0015E6  22DA               	addwfc	fsr2h,f,c
 13153  0015E8  CFDE F0DF          	movff	postinc2,f_lseek@clust
 13154  0015EC  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 13155                           
 13156                           ; BSR set to: 0
 13157                           ;tff.c: 1163: if (clust == 0) {
 13158  0015F0  51DF               	movf	f_lseek@clust& (0+255),w,b
 13159  0015F2  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 13160  0015F4  A4D8               	btfss	status,2,c
 13161  0015F6  D019               	goto	l1191
 13162                           
 13163                           ; BSR set to: 0
 13164                           ;tff.c: 1164: clust = create_chain(0);
 13165  0015F8  0E00               	movlw	0
 13166  0015FA  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
 13167  0015FC  0E00               	movlw	0
 13168  0015FE  6FB6               	movwf	create_chain@clust& (0+255),b
 13169  001600  EC62  F018         	call	_create_chain	;wreg free
 13170  001604  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 13171  001608  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 13172                           
 13173                           ;tff.c: 1165: if (clust == 1) goto fk_error;
 13174  00160C  0100               	movlb	0	; () banked
 13175  00160E  05DF               	decf	f_lseek@clust& (0+255),w,b
 13176  001610  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 13177  001612  B4D8               	btfsc	status,2,c
 13178  001614  D0F9               	goto	l1193
 13179                           
 13180                           ; BSR set to: 0
 13181                           ;tff.c: 1166: fp->org_clust = clust;
 13182                           
 13183                           ; BSR set to: 0
 13184                           
 13185                           ; BSR set to: 0
 13186  001616  EE20 F00E          	lfsr	2,14
 13187  00161A  51C4               	movf	f_lseek@fp& (0+255),w,b
 13188  00161C  26D9               	addwf	fsr2l,f,c
 13189  00161E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13190  001620  22DA               	addwfc	fsr2h,f,c
 13191  001622  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 13192  001626  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 13193  00162A                     l1191:
 13194                           
 13195                           ; BSR set to: 0
 13196                           ;tff.c: 1167: }
 13197                           ;tff.c: 1169: fp->curr_clust = clust;
 13198  00162A  EE20 F010          	lfsr	2,16
 13199  00162E  51C4               	movf	f_lseek@fp& (0+255),w,b
 13200  001630  26D9               	addwf	fsr2l,f,c
 13201  001632  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13202  001634  22DA               	addwfc	fsr2h,f,c
 13203  001636  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 13204  00163A  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 13205  00163E                     l1190:
 13206                           
 13207                           ; BSR set to: 0
 13208                           ;tff.c: 1170: }
 13209                           ;tff.c: 1171: if (clust != 0) {
 13210                           
 13211                           ; BSR set to: 0
 13212  00163E  51DF               	movf	f_lseek@clust& (0+255),w,b
 13213  001640  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 13214  001642  A4D8               	btfss	status,2,c
 13215  001644  D064               	goto	l1195
 13216  001646  D0AD               	goto	l1204
 13217  001648                     
 13218                           ; BSR set to: 0
 13219                           ;tff.c: 1174: if (fp->flag & 0x02) {
 13220                           
 13221                           ; BSR set to: 0
 13222  001648  EE20 F002          	lfsr	2,2
 13223  00164C  51C4               	movf	f_lseek@fp& (0+255),w,b
 13224  00164E  26D9               	addwf	fsr2l,f,c
 13225  001650  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13226  001652  22DA               	addwfc	fsr2h,f,c
 13227  001654  A2DF               	btfss	indf2,1,c
 13228  001656  D018               	goto	l1197
 13229                           
 13230                           ; BSR set to: 0
 13231                           ;tff.c: 1175: clust = create_chain(clust);
 13232  001658  C0DF  F0B6         	movff	f_lseek@clust,create_chain@clust
 13233  00165C  C0E0  F0B7         	movff	f_lseek@clust+1,create_chain@clust+1
 13234  001660  EC62  F018         	call	_create_chain	;wreg free
 13235  001664  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 13236  001668  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 13237                           
 13238                           ;tff.c: 1176: if (clust == 0) {
 13239  00166C  0100               	movlb	0	; () banked
 13240  00166E  51DF               	movf	f_lseek@clust& (0+255),w,b
 13241  001670  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 13242  001672  A4D8               	btfss	status,2,c
 13243  001674  D013               	goto	l1200
 13244                           
 13245                           ; BSR set to: 0
 13246                           ;tff.c: 1177: ofs = csize; break;
 13247  001676  C0DB  F0C6         	movff	f_lseek@csize,f_lseek@ofs
 13248  00167A  C0DC  F0C7         	movff	f_lseek@csize+1,f_lseek@ofs+1
 13249  00167E  C0DD  F0C8         	movff	f_lseek@csize+2,f_lseek@ofs+2
 13250  001682  C0DE  F0C9         	movff	f_lseek@csize+3,f_lseek@ofs+3
 13251  001686  D04D               	goto	u13050
 13252  001688                     l1197:
 13253                           
 13254                           ; BSR set to: 0
 13255                           ;tff.c: 1181: clust = get_cluster(clust);
 13256                           
 13257                           ; BSR set to: 0
 13258  001688  C0DF  F0A0         	movff	f_lseek@clust,get_cluster@clust
 13259  00168C  C0E0  F0A1         	movff	f_lseek@clust+1,get_cluster@clust+1
 13260  001690  EC6C  F016         	call	_get_cluster	;wreg free
 13261  001694  C0A0  F0DF         	movff	?_get_cluster,f_lseek@clust
 13262  001698  C0A1  F0E0         	movff	?_get_cluster+1,f_lseek@clust+1
 13263  00169C                     l1200:
 13264                           
 13265                           ;tff.c: 1182: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 13266  00169C  0100               	movlb	0	; () banked
 13267  00169E  51E0               	movf	(f_lseek@clust+1)& (0+255),w,b
 13268  0016A0  E104               	bnz	u13030
 13269  0016A2  0E02               	movlw	2
 13270  0016A4  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 13271  0016A6  A0D8               	btfss	status,0,c
 13272  0016A8  D0AF               	goto	l1193
 13273  0016AA                     u13030:
 13274                           
 13275                           ; BSR set to: 0
 13276  0016AA  EE20 F004          	lfsr	2,4
 13277  0016AE  51C4               	movf	f_lseek@fp& (0+255),w,b
 13278  0016B0  26D9               	addwf	fsr2l,f,c
 13279  0016B2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13280  0016B4  22DA               	addwfc	fsr2h,f,c
 13281  0016B6  EE10 F016          	lfsr	1,22
 13282  0016BA  50DE               	movf	postinc2,w,c
 13283  0016BC  26E1               	addwf	fsr1l,f,c
 13284  0016BE  50DD               	movf	postdec2,w,c
 13285  0016C0  22E2               	addwfc	fsr1h,f,c
 13286  0016C2  50E6               	movf	postinc1,w,c
 13287  0016C4  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 13288  0016C6  50E6               	movf	postinc1,w,c
 13289  0016C8  59E0               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 13290  0016CA  B0D8               	btfsc	status,0,c
 13291  0016CC  D09D               	goto	l1193
 13292                           
 13293                           ; BSR set to: 0
 13294                           ;tff.c: 1183: fp->curr_clust = clust;
 13295                           
 13296                           ; BSR set to: 0
 13297                           
 13298                           ; BSR set to: 0
 13299  0016CE  EE20 F010          	lfsr	2,16
 13300  0016D2  51C4               	movf	f_lseek@fp& (0+255),w,b
 13301  0016D4  26D9               	addwf	fsr2l,f,c
 13302  0016D6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13303  0016D8  22DA               	addwfc	fsr2h,f,c
 13304  0016DA  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 13305  0016DE  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 13306                           
 13307                           ;tff.c: 1184: fp->fptr += csize;
 13308  0016E2  EE20 F006          	lfsr	2,6
 13309  0016E6  51C4               	movf	f_lseek@fp& (0+255),w,b
 13310  0016E8  26D9               	addwf	fsr2l,f,c
 13311  0016EA  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13312  0016EC  22DA               	addwfc	fsr2h,f,c
 13313  0016EE  51DB               	movf	f_lseek@csize& (0+255),w,b
 13314  0016F0  26DE               	addwf	postinc2,f,c
 13315  0016F2  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 13316  0016F4  22DE               	addwfc	postinc2,f,c
 13317  0016F6  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 13318  0016F8  22DE               	addwfc	postinc2,f,c
 13319  0016FA  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 13320  0016FC  22DE               	addwfc	postinc2,f,c
 13321                           
 13322                           ; BSR set to: 0
 13323                           ;tff.c: 1185: ofs -= csize;
 13324  0016FE  51DB               	movf	f_lseek@csize& (0+255),w,b
 13325  001700  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 13326  001702  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 13327  001704  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 13328  001706  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 13329  001708  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 13330  00170A  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 13331  00170C  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 13332  00170E                     l1195:
 13333                           
 13334                           ; BSR set to: 0
 13335                           
 13336                           ; BSR set to: 0
 13337  00170E  51C6               	movf	f_lseek@ofs& (0+255),w,b
 13338  001710  5DDB               	subwf	f_lseek@csize& (0+255),w,b
 13339  001712  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 13340  001714  59DC               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 13341  001716  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 13342  001718  59DD               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 13343  00171A  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 13344  00171C  59DE               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 13345  00171E  A0D8               	btfss	status,0,c
 13346  001720  D793               	goto	l1196
 13347  001722                     u13050:
 13348                           
 13349                           ; BSR set to: 0
 13350                           ;tff.c: 1186: }
 13351                           ;tff.c: 1187: fp->fptr += ofs;
 13352                           
 13353                           ; BSR set to: 0
 13354  001722  EE20 F006          	lfsr	2,6
 13355  001726  51C4               	movf	f_lseek@fp& (0+255),w,b
 13356  001728  26D9               	addwf	fsr2l,f,c
 13357  00172A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13358  00172C  22DA               	addwfc	fsr2h,f,c
 13359  00172E  51C6               	movf	f_lseek@ofs& (0+255),w,b
 13360  001730  26DE               	addwf	postinc2,f,c
 13361  001732  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 13362  001734  22DE               	addwfc	postinc2,f,c
 13363  001736  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 13364  001738  22DE               	addwfc	postinc2,f,c
 13365  00173A  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 13366  00173C  22DE               	addwfc	postinc2,f,c
 13367                           
 13368                           ;tff.c: 1188: fp->csect = (BYTE)(ofs / 512U);
 13369  00173E  EE20 F003          	lfsr	2,3
 13370  001742  51C4               	movf	f_lseek@fp& (0+255),w,b
 13371  001744  26D9               	addwf	fsr2l,f,c
 13372  001746  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13373  001748  22DA               	addwfc	fsr2h,f,c
 13374  00174A  C0C6  F0CA         	movff	f_lseek@ofs,??_f_lseek
 13375  00174E  C0C7  F0CB         	movff	f_lseek@ofs+1,??_f_lseek+1
 13376  001752  C0C8  F0CC         	movff	f_lseek@ofs+2,??_f_lseek+2
 13377  001756  C0C9  F0CD         	movff	f_lseek@ofs+3,??_f_lseek+3
 13378  00175A  0E0A               	movlw	10
 13379  00175C  D005               	goto	u13060
 13380  00175E                     u13065:
 13381  00175E  90D8               	bcf	status,0,c
 13382  001760  33CD               	rrcf	(??_f_lseek+3)& (0+255),f,b
 13383  001762  33CC               	rrcf	(??_f_lseek+2)& (0+255),f,b
 13384  001764  33CB               	rrcf	(??_f_lseek+1)& (0+255),f,b
 13385  001766  33CA               	rrcf	??_f_lseek& (0+255),f,b
 13386  001768                     u13060:
 13387  001768  2EE8               	decfsz	wreg,f,c
 13388  00176A  D7F9               	goto	u13065
 13389  00176C  51CA               	movf	??_f_lseek& (0+255),w,b
 13390  00176E  6EDF               	movwf	indf2,c
 13391                           
 13392                           ; BSR set to: 0
 13393                           ;tff.c: 1189: if (ofs % 512U) fp->csect++;
 13394  001770  0EFF               	movlw	255
 13395  001772  15C6               	andwf	f_lseek@ofs& (0+255),w,b
 13396  001774  6FCA               	movwf	??_f_lseek& (0+255),b
 13397  001776  0E01               	movlw	1
 13398  001778  15C7               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 13399  00177A  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 13400  00177C  0E00               	movlw	0
 13401  00177E  15C8               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 13402  001780  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 13403  001782  0E00               	movlw	0
 13404  001784  15C9               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 13405  001786  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 13406  001788  51CA               	movf	??_f_lseek& (0+255),w,b
 13407  00178A  11CB               	iorwf	(??_f_lseek+1)& (0+255),w,b
 13408  00178C  11CC               	iorwf	(??_f_lseek+2)& (0+255),w,b
 13409  00178E  11CD               	iorwf	(??_f_lseek+3)& (0+255),w,b
 13410  001790  B4D8               	btfsc	status,2,c
 13411  001792  D007               	goto	l1204
 13412                           
 13413                           ; BSR set to: 0
 13414  001794  EE20 F003          	lfsr	2,3
 13415  001798  51C4               	movf	f_lseek@fp& (0+255),w,b
 13416  00179A  26D9               	addwf	fsr2l,f,c
 13417  00179C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13418  00179E  22DA               	addwfc	fsr2h,f,c
 13419  0017A0  2ADF               	incf	indf2,f,c
 13420  0017A2                     l1204:
 13421                           
 13422                           ; BSR set to: 0
 13423                           ;tff.c: 1190: }
 13424                           ;tff.c: 1191: }
 13425                           ;tff.c: 1194: if (fp->fptr > fp->fsize) {
 13426                           
 13427                           ; BSR set to: 0
 13428                           
 13429                           ; BSR set to: 0
 13430                           
 13431                           ; BSR set to: 0
 13432  0017A2  EE20 F006          	lfsr	2,6
 13433  0017A6  51C4               	movf	f_lseek@fp& (0+255),w,b
 13434  0017A8  26D9               	addwf	fsr2l,f,c
 13435  0017AA  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13436  0017AC  22DA               	addwfc	fsr2h,f,c
 13437  0017AE  EE10 F00A          	lfsr	1,10
 13438  0017B2  51C4               	movf	f_lseek@fp& (0+255),w,b
 13439  0017B4  26E1               	addwf	fsr1l,f,c
 13440  0017B6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13441  0017B8  22E2               	addwfc	fsr1h,f,c
 13442  0017BA  50DE               	movf	postinc2,w,c
 13443  0017BC  5CE6               	subwf	postinc1,w,c
 13444  0017BE  50DE               	movf	postinc2,w,c
 13445  0017C0  58E6               	subwfb	postinc1,w,c
 13446  0017C2  50DE               	movf	postinc2,w,c
 13447  0017C4  58E6               	subwfb	postinc1,w,c
 13448  0017C6  50DE               	movf	postinc2,w,c
 13449  0017C8  58E6               	subwfb	postinc1,w,c
 13450  0017CA  B0D8               	btfsc	status,0,c
 13451  0017CC  0012               	return	
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;tff.c: 1195: fp->fsize = fp->fptr;
 13455  0017CE  EE20 F006          	lfsr	2,6
 13456  0017D2  51C4               	movf	f_lseek@fp& (0+255),w,b
 13457  0017D4  26D9               	addwf	fsr2l,f,c
 13458  0017D6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13459  0017D8  22DA               	addwfc	fsr2h,f,c
 13460  0017DA  EE10 F00A          	lfsr	1,10
 13461  0017DE  51C4               	movf	f_lseek@fp& (0+255),w,b
 13462  0017E0  26E1               	addwf	fsr1l,f,c
 13463  0017E2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13464  0017E4  22E2               	addwfc	fsr1h,f,c
 13465  0017E6  CFDE FFE6          	movff	postinc2,postinc1
 13466  0017EA  CFDE FFE6          	movff	postinc2,postinc1
 13467  0017EE  CFDE FFE6          	movff	postinc2,postinc1
 13468  0017F2  CFDE FFE6          	movff	postinc2,postinc1
 13469                           
 13470                           ; BSR set to: 0
 13471                           ;tff.c: 1196: fp->flag |= 0x20;
 13472  0017F6  EE20 F002          	lfsr	2,2
 13473  0017FA  51C4               	movf	f_lseek@fp& (0+255),w,b
 13474  0017FC  26D9               	addwf	fsr2l,f,c
 13475  0017FE  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13476  001800  22DA               	addwfc	fsr2h,f,c
 13477  001802  0E00               	movlw	0
 13478  001804  8ADB               	bsf	plusw2,5,c
 13479                           
 13480                           ; BSR set to: 0
 13481                           ;tff.c: 1197: }
 13482                           ;tff.c: 1200: return FR_OK;
 13483                           ;	Return value of _f_lseek is never used
 13484                           
 13485                           ; BSR set to: 0
 13486  001806  0012               	return	
 13487  001808                     l1193:
 13488                           
 13489                           ; BSR set to: 0
 13490                           ;tff.c: 1203: fp->flag |= 0x80;
 13491                           
 13492                           ; BSR set to: 0
 13493  001808  EE20 F002          	lfsr	2,2
 13494  00180C  51C4               	movf	f_lseek@fp& (0+255),w,b
 13495  00180E  26D9               	addwf	fsr2l,f,c
 13496  001810  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13497  001812  22DA               	addwfc	fsr2h,f,c
 13498  001814  0E00               	movlw	0
 13499  001816  8EDB               	bsf	plusw2,7,c
 13500  001818  0012               	return	
 13501  00181A                     __end_of_f_lseek:
 13502                           	opt stack 0
 13503                           tosu	equ	0xFFF
 13504                           tosh	equ	0xFFE
 13505                           tosl	equ	0xFFD
 13506                           pclath	equ	0xFFA
 13507                           tblptru	equ	0xFF8
 13508                           tblptrh	equ	0xFF7
 13509                           tblptrl	equ	0xFF6
 13510                           tablat	equ	0xFF5
 13511                           prodh	equ	0xFF4
 13512                           prodl	equ	0xFF3
 13513                           intcon	equ	0xFF2
 13514                           intcon2	equ	0xFF1
 13515                           intcon3	equ	0xFF0
 13516                           indf0	equ	0xFEF
 13517                           postinc0	equ	0xFEE
 13518                           fsr0h	equ	0xFEA
 13519                           fsr0l	equ	0xFE9
 13520                           wreg	equ	0xFE8
 13521                           indf1	equ	0xFE7
 13522                           postinc1	equ	0xFE6
 13523                           postdec1	equ	0xFE5
 13524                           fsr1h	equ	0xFE2
 13525                           fsr1l	equ	0xFE1
 13526                           indf2	equ	0xFDF
 13527                           postinc2	equ	0xFDE
 13528                           postdec2	equ	0xFDD
 13529                           plusw2	equ	0xFDB
 13530                           fsr2h	equ	0xFDA
 13531                           fsr2l	equ	0xFD9
 13532                           status	equ	0xFD8
 13533                           
 13534 ;; *************** function _create_chain *****************
 13535 ;; Defined at:
 13536 ;;		line 282 in file "bibliotecas/tff.c"
 13537 ;; Parameters:    Size  Location     Type
 13538 ;;  clust           2   86[BANK0 ] unsigned short 
 13539 ;; Auto vars:     Size  Location     Type
 13540 ;;  ncl             2   98[BANK0 ] unsigned short 
 13541 ;;  scl             2   96[BANK0 ] unsigned short 
 13542 ;;  cstat           2   94[BANK0 ] unsigned short 
 13543 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 13544 ;;		 -> NULL(0), fs(544), 
 13545 ;;  mcl             2   90[BANK0 ] unsigned short 
 13546 ;; Return value:  Size  Location     Type
 13547 ;;                  2   86[BANK0 ] unsigned short 
 13548 ;; Registers used:
 13549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13550 ;; Tracked objects:
 13551 ;;		On entry : 0/0
 13552 ;;		On exit  : 0/0
 13553 ;;		Unchanged: 0/0
 13554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13555 ;;      Params:         0       2       0       0       0       0       0       0       0
 13556 ;;      Locals:         0      10       0       0       0       0       0       0       0
 13557 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13558 ;;      Totals:         0      14       0       0       0       0       0       0       0
 13559 ;;Total ram usage:       14 bytes
 13560 ;; Hardware stack levels used:    1
 13561 ;; Hardware stack levels required when called:   10
 13562 ;; This function calls:
 13563 ;;		_get_cluster
 13564 ;;		_put_cluster
 13565 ;; This function is called by:
 13566 ;;		_reserve_direntry
 13567 ;;		_f_write
 13568 ;;		_f_lseek
 13569 ;; This function uses a non-reentrant model
 13570 ;;
 13571                           
 13572                           	psect	text48
 13573  0030C4                     __ptext48:
 13574                           	opt stack 0
 13575  0030C4                     _create_chain:
 13576                           	opt stack 14
 13577                           
 13578                           ;tff.c: 286: CLUST cstat, ncl, scl, mcl;
 13579                           ;tff.c: 287: FATFS *fs = FatFs;
 13580                           
 13581                           ; BSR set to: 0
 13582                           ;incstack = 0
 13583  0030C4  C0F2  F0BC         	movff	_FatFs,create_chain@fs
 13584  0030C8  C0F3  F0BD         	movff	_FatFs+1,create_chain@fs+1
 13585                           
 13586                           ;tff.c: 290: mcl = fs->max_clust;
 13587  0030CC  0100               	movlb	0	; () banked
 13588  0030CE  EE20 F016          	lfsr	2,22
 13589  0030D2  51BC               	movf	create_chain@fs& (0+255),w,b
 13590  0030D4  26D9               	addwf	fsr2l,f,c
 13591  0030D6  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 13592  0030D8  22DA               	addwfc	fsr2h,f,c
 13593  0030DA  CFDE F0BA          	movff	postinc2,create_chain@mcl
 13594  0030DE  CFDD F0BB          	movff	postdec2,create_chain@mcl+1
 13595                           
 13596                           ; BSR set to: 0
 13597                           ;tff.c: 291: if (clust == 0) {
 13598  0030E2  51B6               	movf	create_chain@clust& (0+255),w,b
 13599  0030E4  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 13600  0030E6  A4D8               	btfss	status,2,c
 13601  0030E8  D01B               	goto	l908
 13602                           
 13603                           ; BSR set to: 0
 13604                           ;tff.c: 292: scl = fs->last_clust;
 13605  0030EA  EE20 F018          	lfsr	2,24
 13606  0030EE  51BC               	movf	create_chain@fs& (0+255),w,b
 13607  0030F0  26D9               	addwf	fsr2l,f,c
 13608  0030F2  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 13609  0030F4  22DA               	addwfc	fsr2h,f,c
 13610  0030F6  CFDE F0C0          	movff	postinc2,create_chain@scl
 13611  0030FA  CFDD F0C1          	movff	postdec2,create_chain@scl+1
 13612                           
 13613                           ; BSR set to: 0
 13614                           ;tff.c: 293: if (scl < 2 || scl >= mcl) scl = 1;
 13615  0030FE  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 13616  003100  E104               	bnz	u10680
 13617  003102  0E02               	movlw	2
 13618  003104  5DC0               	subwf	create_chain@scl& (0+255),w,b
 13619  003106  A0D8               	btfss	status,0,c
 13620  003108  D006               	goto	u10690
 13621  00310A                     u10680:
 13622                           
 13623                           ; BSR set to: 0
 13624  00310A  51BA               	movf	create_chain@mcl& (0+255),w,b
 13625  00310C  5DC0               	subwf	create_chain@scl& (0+255),w,b
 13626  00310E  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 13627  003110  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 13628  003112  A0D8               	btfss	status,0,c
 13629  003114  D02A               	goto	l912
 13630  003116                     u10690:
 13631                           
 13632                           ; BSR set to: 0
 13633                           
 13634                           ; BSR set to: 0
 13635  003116  0E00               	movlw	0
 13636  003118  6FC1               	movwf	(create_chain@scl+1)& (0+255),b
 13637  00311A  0E01               	movlw	1
 13638  00311C  6FC0               	movwf	create_chain@scl& (0+255),b
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;tff.c: 294: }
 13642  00311E  D025               	goto	l912
 13643  003120                     l908:
 13644                           
 13645                           ; BSR set to: 0
 13646                           ;tff.c: 295: else {
 13647                           ;tff.c: 296: cstat = get_cluster(clust);
 13648                           
 13649                           ; BSR set to: 0
 13650  003120  C0B6  F0A0         	movff	create_chain@clust,get_cluster@clust
 13651  003124  C0B7  F0A1         	movff	create_chain@clust+1,get_cluster@clust+1
 13652  003128  EC6C  F016         	call	_get_cluster	;wreg free
 13653  00312C  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 13654  003130  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 13655                           
 13656                           ;tff.c: 297: if (cstat < 2) return 1;
 13657  003134  0100               	movlb	0	; () banked
 13658  003136  51BF               	movf	(create_chain@cstat+1)& (0+255),w,b
 13659  003138  E109               	bnz	l8965
 13660  00313A  0E02               	movlw	2
 13661  00313C  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 13662  00313E  B0D8               	btfsc	status,0,c
 13663  003140  D005               	goto	l913
 13664                           
 13665                           ; BSR set to: 0
 13666  003142  0E00               	movlw	0
 13667  003144  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 13668  003146  0E01               	movlw	1
 13669  003148  6FB6               	movwf	?_create_chain& (0+255),b
 13670                           
 13671                           ; BSR set to: 0
 13672  00314A  0012               	return	
 13673  00314C                     l913:
 13674  00314C                     l8965:
 13675                           
 13676                           ; BSR set to: 0
 13677                           ;tff.c: 298: if (cstat < mcl) return cstat;
 13678  00314C  51BA               	movf	create_chain@mcl& (0+255),w,b
 13679  00314E  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 13680  003150  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 13681  003152  59BF               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 13682  003154  B0D8               	btfsc	status,0,c
 13683  003156  D005               	goto	l915
 13684                           
 13685                           ; BSR set to: 0
 13686  003158  C0BE  F0B6         	movff	create_chain@cstat,?_create_chain
 13687  00315C  C0BF  F0B7         	movff	create_chain@cstat+1,?_create_chain+1
 13688  003160  0012               	return	
 13689  003162                     l915:
 13690                           
 13691                           ; BSR set to: 0
 13692                           ;tff.c: 299: scl = clust;
 13693  003162  C0B6  F0C0         	movff	create_chain@clust,create_chain@scl
 13694  003166  C0B7  F0C1         	movff	create_chain@clust+1,create_chain@scl+1
 13695  00316A                     l912:
 13696                           
 13697                           ; BSR set to: 0
 13698                           ;tff.c: 300: }
 13699                           ;tff.c: 302: ncl = scl;
 13700  00316A  C0C0  F0C2         	movff	create_chain@scl,create_chain@ncl
 13701  00316E  C0C1  F0C3         	movff	create_chain@scl+1,create_chain@ncl+1
 13702  003172                     l8969:
 13703                           
 13704                           ; BSR set to: 0
 13705                           ;tff.c: 304: ncl++;
 13706  003172  4BC2               	infsnz	create_chain@ncl& (0+255),f,b
 13707  003174  2BC3               	incf	(create_chain@ncl+1)& (0+255),f,b
 13708                           
 13709                           ; BSR set to: 0
 13710                           ;tff.c: 305: if (ncl >= mcl) {
 13711  003176  51BA               	movf	create_chain@mcl& (0+255),w,b
 13712  003178  5DC2               	subwf	create_chain@ncl& (0+255),w,b
 13713  00317A  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 13714  00317C  59C3               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 13715  00317E  A0D8               	btfss	status,0,c
 13716  003180  D00F               	goto	l918
 13717                           
 13718                           ; BSR set to: 0
 13719                           ;tff.c: 306: ncl = 2;
 13720  003182  0E00               	movlw	0
 13721  003184  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 13722  003186  0E02               	movlw	2
 13723  003188  6FC2               	movwf	create_chain@ncl& (0+255),b
 13724                           
 13725                           ; BSR set to: 0
 13726                           ;tff.c: 307: if (ncl > scl) return 0;
 13727  00318A  51C2               	movf	create_chain@ncl& (0+255),w,b
 13728  00318C  5DC0               	subwf	create_chain@scl& (0+255),w,b
 13729  00318E  51C3               	movf	(create_chain@ncl+1)& (0+255),w,b
 13730  003190  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 13731  003192  B0D8               	btfsc	status,0,c
 13732  003194  D005               	goto	l918
 13733                           
 13734                           ; BSR set to: 0
 13735  003196  0E00               	movlw	0
 13736  003198  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 13737  00319A  0E00               	movlw	0
 13738  00319C  6FB6               	movwf	?_create_chain& (0+255),b
 13739                           
 13740                           ; BSR set to: 0
 13741  00319E  0012               	return	
 13742  0031A0                     l918:
 13743                           
 13744                           ; BSR set to: 0
 13745                           ;tff.c: 308: }
 13746                           ;tff.c: 309: cstat = get_cluster(ncl);
 13747                           
 13748                           ; BSR set to: 0
 13749                           
 13750                           ; BSR set to: 0
 13751  0031A0  C0C2  F0A0         	movff	create_chain@ncl,get_cluster@clust
 13752  0031A4  C0C3  F0A1         	movff	create_chain@ncl+1,get_cluster@clust+1
 13753  0031A8  EC6C  F016         	call	_get_cluster	;wreg free
 13754  0031AC  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 13755  0031B0  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 13756                           
 13757                           ;tff.c: 310: if (cstat == 0) break;
 13758  0031B4  0100               	movlb	0	; () banked
 13759  0031B6  51BE               	movf	create_chain@cstat& (0+255),w,b
 13760  0031B8  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 13761  0031BA  B4D8               	btfsc	status,2,c
 13762  0031BC  D015               	goto	l920
 13763                           
 13764                           ; BSR set to: 0
 13765                           ;tff.c: 311: if (cstat == 1) return 1;
 13766                           
 13767                           ; BSR set to: 0
 13768                           
 13769                           ; BSR set to: 0
 13770  0031BE  05BE               	decf	create_chain@cstat& (0+255),w,b
 13771  0031C0  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 13772  0031C2  A4D8               	btfss	status,2,c
 13773  0031C4  D005               	goto	l921
 13774                           
 13775                           ; BSR set to: 0
 13776  0031C6  0E00               	movlw	0
 13777  0031C8  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 13778  0031CA  0E01               	movlw	1
 13779  0031CC  6FB6               	movwf	?_create_chain& (0+255),b
 13780                           
 13781                           ; BSR set to: 0
 13782  0031CE  0012               	return	
 13783  0031D0                     l921:
 13784                           
 13785                           ; BSR set to: 0
 13786                           ;tff.c: 312: if (ncl == scl) return 0;
 13787                           
 13788                           ; BSR set to: 0
 13789  0031D0  51C0               	movf	create_chain@scl& (0+255),w,b
 13790  0031D2  19C2               	xorwf	create_chain@ncl& (0+255),w,b
 13791  0031D4  E1CE               	bnz	l8969
 13792  0031D6  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 13793  0031D8  19C3               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 13794  0031DA  A4D8               	btfss	status,2,c
 13795  0031DC  D7CA               	goto	l916
 13796                           
 13797                           ; BSR set to: 0
 13798  0031DE  0E00               	movlw	0
 13799  0031E0  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 13800  0031E2  0E00               	movlw	0
 13801  0031E4  6FB6               	movwf	?_create_chain& (0+255),b
 13802                           
 13803                           ; BSR set to: 0
 13804  0031E6  0012               	return	
 13805  0031E8                     l920:
 13806                           
 13807                           ; BSR set to: 0
 13808                           ;tff.c: 315: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 13809                           
 13810                           ; BSR set to: 0
 13811  0031E8  C0C2  F0A0         	movff	create_chain@ncl,put_cluster@clust
 13812  0031EC  C0C3  F0A1         	movff	create_chain@ncl+1,put_cluster@clust+1
 13813  0031F0  0EFF               	movlw	255
 13814  0031F2  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 13815  0031F4  69A2               	setf	put_cluster@val& (0+255),b
 13816  0031F6  EC2F  F015         	call	_put_cluster	;wreg free
 13817  0031FA  0900               	iorlw	0
 13818  0031FC  A4D8               	btfss	status,2,c
 13819  0031FE  D006               	goto	l923
 13820  003200  0E00               	movlw	0
 13821  003202  0100               	movlb	0	; () banked
 13822  003204  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 13823  003206  0E01               	movlw	1
 13824  003208  6FB6               	movwf	?_create_chain& (0+255),b
 13825                           
 13826                           ; BSR set to: 0
 13827  00320A  0012               	return	
 13828  00320C                     l923:
 13829                           
 13830                           ;tff.c: 316: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 13831                           
 13832                           ; BSR set to: 0
 13833  00320C  0100               	movlb	0	; () banked
 13834  00320E  51B6               	movf	create_chain@clust& (0+255),w,b
 13835  003210  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 13836  003212  B4D8               	btfsc	status,2,c
 13837  003214  D013               	goto	l924
 13838                           
 13839                           ; BSR set to: 0
 13840  003216  C0B6  F0A0         	movff	create_chain@clust,put_cluster@clust
 13841  00321A  C0B7  F0A1         	movff	create_chain@clust+1,put_cluster@clust+1
 13842  00321E  C0C2  F0A2         	movff	create_chain@ncl,put_cluster@val
 13843  003222  C0C3  F0A3         	movff	create_chain@ncl+1,put_cluster@val+1
 13844  003226  EC2F  F015         	call	_put_cluster	;wreg free
 13845  00322A  0900               	iorlw	0
 13846  00322C  A4D8               	btfss	status,2,c
 13847  00322E  D006               	goto	l924
 13848  003230  0E00               	movlw	0
 13849  003232  0100               	movlb	0	; () banked
 13850  003234  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 13851  003236  0E01               	movlw	1
 13852  003238  6FB6               	movwf	?_create_chain& (0+255),b
 13853                           
 13854                           ; BSR set to: 0
 13855  00323A  0012               	return	
 13856  00323C                     l924:
 13857                           
 13858                           ;tff.c: 318: fs->last_clust = ncl;
 13859                           
 13860                           ; BSR set to: 0
 13861  00323C  0100               	movlb	0	; () banked
 13862  00323E  EE20 F018          	lfsr	2,24
 13863  003242  51BC               	movf	create_chain@fs& (0+255),w,b
 13864  003244  26D9               	addwf	fsr2l,f,c
 13865  003246  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 13866  003248  22DA               	addwfc	fsr2h,f,c
 13867  00324A  C0C2  FFDE         	movff	create_chain@ncl,postinc2
 13868  00324E  C0C3  FFDD         	movff	create_chain@ncl+1,postdec2
 13869                           
 13870                           ;tff.c: 319: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 13871  003252  EE20 F01A          	lfsr	2,26
 13872  003256  51BC               	movf	create_chain@fs& (0+255),w,b
 13873  003258  26D9               	addwf	fsr2l,f,c
 13874  00325A  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 13875  00325C  22DA               	addwfc	fsr2h,f,c
 13876  00325E  28DE               	incf	postinc2,w,c
 13877  003260  E103               	bnz	u10800
 13878  003262  28DE               	incf	postinc2,w,c
 13879  003264  B4D8               	btfsc	status,2,c
 13880  003266  D009               	goto	l925
 13881  003268                     u10800:
 13882                           
 13883                           ; BSR set to: 0
 13884                           ;tff.c: 320: fs->free_clust--;
 13885  003268  EE20 F01A          	lfsr	2,26
 13886  00326C  51BC               	movf	create_chain@fs& (0+255),w,b
 13887  00326E  26D9               	addwf	fsr2l,f,c
 13888  003270  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 13889  003272  22DA               	addwfc	fsr2h,f,c
 13890  003274  06DE               	decf	postinc2,f,c
 13891  003276  0E00               	movlw	0
 13892  003278  5ADD               	subwfb	postdec2,f,c
 13893  00327A                     l925:
 13894                           
 13895                           ; BSR set to: 0
 13896                           ;tff.c: 324: }
 13897                           ;tff.c: 326: return ncl;
 13898                           
 13899                           ; BSR set to: 0
 13900  00327A  C0C2  F0B6         	movff	create_chain@ncl,?_create_chain
 13901  00327E  C0C3  F0B7         	movff	create_chain@ncl+1,?_create_chain+1
 13902  003282  0012               	return	
 13903  003284                     __end_of_create_chain:
 13904                           	opt stack 0
 13905                           tosu	equ	0xFFF
 13906                           tosh	equ	0xFFE
 13907                           tosl	equ	0xFFD
 13908                           pclath	equ	0xFFA
 13909                           tblptru	equ	0xFF8
 13910                           tblptrh	equ	0xFF7
 13911                           tblptrl	equ	0xFF6
 13912                           tablat	equ	0xFF5
 13913                           prodh	equ	0xFF4
 13914                           prodl	equ	0xFF3
 13915                           intcon	equ	0xFF2
 13916                           intcon2	equ	0xFF1
 13917                           intcon3	equ	0xFF0
 13918                           indf0	equ	0xFEF
 13919                           postinc0	equ	0xFEE
 13920                           fsr0h	equ	0xFEA
 13921                           fsr0l	equ	0xFE9
 13922                           wreg	equ	0xFE8
 13923                           indf1	equ	0xFE7
 13924                           postinc1	equ	0xFE6
 13925                           postdec1	equ	0xFE5
 13926                           fsr1h	equ	0xFE2
 13927                           fsr1l	equ	0xFE1
 13928                           indf2	equ	0xFDF
 13929                           postinc2	equ	0xFDE
 13930                           postdec2	equ	0xFDD
 13931                           plusw2	equ	0xFDB
 13932                           fsr2h	equ	0xFDA
 13933                           fsr2l	equ	0xFD9
 13934                           status	equ	0xFD8
 13935                           
 13936 ;; *************** function _put_cluster *****************
 13937 ;; Defined at:
 13938 ;;		line 197 in file "bibliotecas/tff.c"
 13939 ;; Parameters:    Size  Location     Type
 13940 ;;  clust           2   64[BANK0 ] unsigned short 
 13941 ;;  val             2   66[BANK0 ] unsigned short 
 13942 ;; Auto vars:     Size  Location     Type
 13943 ;;  fatsect         4   76[BANK0 ] unsigned long 
 13944 ;;  fs              2   84[BANK0 ] PTR struct _FATFS
 13945 ;;		 -> NULL(0), fs(544), 
 13946 ;;  p               2   82[BANK0 ] PTR unsigned char 
 13947 ;;		 -> fs.win(512), NULL(0), fs(544), 
 13948 ;;  bc              2   80[BANK0 ] unsigned short 
 13949 ;; Return value:  Size  Location     Type
 13950 ;;                  1    wreg      enum E105
 13951 ;; Registers used:
 13952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13953 ;; Tracked objects:
 13954 ;;		On entry : 0/0
 13955 ;;		On exit  : 0/0
 13956 ;;		Unchanged: 0/0
 13957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13958 ;;      Params:         0       4       0       0       0       0       0       0       0
 13959 ;;      Locals:         0      14       0       0       0       0       0       0       0
 13960 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13961 ;;      Totals:         0      22       0       0       0       0       0       0       0
 13962 ;;Total ram usage:       22 bytes
 13963 ;; Hardware stack levels used:    1
 13964 ;; Hardware stack levels required when called:    9
 13965 ;; This function calls:
 13966 ;;		___wmul
 13967 ;;		_move_window
 13968 ;; This function is called by:
 13969 ;;		_remove_chain
 13970 ;;		_create_chain
 13971 ;; This function uses a non-reentrant model
 13972 ;;
 13973                           
 13974                           	psect	text49
 13975  002A5E                     __ptext49:
 13976                           	opt stack 0
 13977  002A5E                     _put_cluster:
 13978                           	opt stack 14
 13979                           
 13980                           ;tff.c: 202: WORD bc;
 13981                           ;tff.c: 203: BYTE *p;
 13982                           ;tff.c: 204: DWORD fatsect;
 13983                           ;tff.c: 205: FATFS *fs = FatFs;
 13984                           
 13985                           ; BSR set to: 0
 13986                           ;incstack = 0
 13987  002A5E  C0F2  F0B4         	movff	_FatFs,put_cluster@fs
 13988  002A62  C0F3  F0B5         	movff	_FatFs+1,put_cluster@fs+1
 13989                           
 13990                           ;tff.c: 208: fatsect = fs->fatbase;
 13991  002A66  0100               	movlb	0	; () banked
 13992  002A68  EE20 F008          	lfsr	2,8
 13993  002A6C  51B4               	movf	put_cluster@fs& (0+255),w,b
 13994  002A6E  26D9               	addwf	fsr2l,f,c
 13995  002A70  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 13996  002A72  22DA               	addwfc	fsr2h,f,c
 13997  002A74  CFDE F0AC          	movff	postinc2,put_cluster@fatsect
 13998  002A78  CFDE F0AD          	movff	postinc2,put_cluster@fatsect+1
 13999  002A7C  CFDE F0AE          	movff	postinc2,put_cluster@fatsect+2
 14000  002A80  CFDE F0AF          	movff	postinc2,put_cluster@fatsect+3
 14001                           
 14002                           ;tff.c: 209: switch (fs->fs_type) {
 14003  002A84  D111               	goto	l878
 14004  002A86                     
 14005                           ; BSR set to: 0
 14006                           ;tff.c: 211: bc = (WORD)clust * 3 / 2;
 14007                           
 14008                           ; BSR set to: 0
 14009  002A86  C0A0  F060         	movff	put_cluster@clust,___wmul@multiplier
 14010  002A8A  C0A1  F061         	movff	put_cluster@clust+1,___wmul@multiplier+1
 14011  002A8E  0E00               	movlw	0
 14012  002A90  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14013  002A92  0E03               	movlw	3
 14014  002A94  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14015  002A96  ECB8  F028         	call	___wmul	;wreg free
 14016  002A9A  90D8               	bcf	status,0,c
 14017  002A9C  0100               	movlb	0	; () banked
 14018  002A9E  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 14019  002AA0  6FA4               	movwf	??_put_cluster& (0+255),b
 14020  002AA2  3160               	rrcf	?___wmul& (0+255),w,b
 14021  002AA4  6FB0               	movwf	put_cluster@bc& (0+255),b
 14022  002AA6  C0A4  F0B1         	movff	??_put_cluster,put_cluster@bc+1
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;tff.c: 212: if (!move_window(fatsect + bc / 512U)) return FALSE;
 14026  002AAA  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 14027  002AAE  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 14028  002AB2  0E09               	movlw	9
 14029  002AB4  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 14030  002AB6                     u10535:
 14031  002AB6  90D8               	bcf	status,0,c
 14032  002AB8  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 14033  002ABA  33A4               	rrcf	??_put_cluster& (0+255),f,b
 14034  002ABC  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 14035  002ABE  D7FB               	goto	u10535
 14036  002AC0  51A4               	movf	??_put_cluster& (0+255),w,b
 14037  002AC2  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 14038  002AC4  6F8B               	movwf	move_window@sector& (0+255),b
 14039  002AC6  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 14040  002AC8  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 14041  002ACA  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 14042  002ACC  0E00               	movlw	0
 14043  002ACE  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 14044  002AD0  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 14045  002AD2  0E00               	movlw	0
 14046  002AD4  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 14047  002AD6  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 14048  002AD8  EC42  F019         	call	_move_window	;wreg free
 14049  002ADC  0900               	iorlw	0
 14050  002ADE  A4D8               	btfss	status,2,c
 14051  002AE0  D002               	goto	l880
 14052  002AE2  0E00               	movlw	0
 14053  002AE4  0012               	return	
 14054  002AE6                     l880:
 14055                           
 14056                           ;tff.c: 213: p = &fs->win[bc % 512U];
 14057  002AE6  0EFF               	movlw	255
 14058  002AE8  0100               	movlb	0	; () banked
 14059  002AEA  6FA4               	movwf	??_put_cluster& (0+255),b
 14060  002AEC  0E01               	movlw	1
 14061  002AEE  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 14062  002AF0  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 14063  002AF4  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 14064  002AF8  51A4               	movf	??_put_cluster& (0+255),w,b
 14065  002AFA  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 14066  002AFC  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 14067  002AFE  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 14068  002B00  0E20               	movlw	32
 14069  002B02  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 14070  002B04  0E00               	movlw	0
 14071  002B06  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 14072  002B08  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 14073  002B0A  25B4               	addwf	put_cluster@fs& (0+255),w,b
 14074  002B0C  6FB2               	movwf	put_cluster@p& (0+255),b
 14075  002B0E  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 14076  002B10  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 14077  002B12  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 14078                           
 14079                           ; BSR set to: 0
 14080                           ;tff.c: 214: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 14081  002B14  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 14082  002B16  D004               	goto	l883
 14083                           
 14084                           ; BSR set to: 0
 14085  002B18  C0A2  F0A8         	movff	put_cluster@val,_put_cluster$1827
 14086  002B1C  6BA9               	clrf	(_put_cluster$1827+1)& (0+255),b
 14087  002B1E  D01A               	goto	l885
 14088  002B20                     l883:
 14089                           
 14090                           ; BSR set to: 0
 14091                           
 14092                           ; BSR set to: 0
 14093  002B20  51A2               	movf	put_cluster@val& (0+255),w,b
 14094  002B22  6FA4               	movwf	??_put_cluster& (0+255),b
 14095  002B24  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 14096  002B26  3BA4               	swapf	??_put_cluster& (0+255),f,b
 14097  002B28  3BA5               	swapf	(??_put_cluster+1)& (0+255),f,b
 14098  002B2A  0EF0               	movlw	240
 14099  002B2C  17A5               	andwf	(??_put_cluster+1)& (0+255),f,b
 14100  002B2E  51A4               	movf	??_put_cluster& (0+255),w,b
 14101  002B30  0B0F               	andlw	15
 14102  002B32  13A5               	iorwf	(??_put_cluster+1)& (0+255),f,b
 14103  002B34  0EF0               	movlw	240
 14104  002B36  17A4               	andwf	??_put_cluster& (0+255),f,b
 14105  002B38  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 14106  002B3C  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 14107  002B40  50DF               	movf	indf2,w,c
 14108  002B42  0B0F               	andlw	15
 14109  002B44  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 14110  002B46  6BA7               	clrf	(??_put_cluster+3)& (0+255),b
 14111  002B48  51A4               	movf	??_put_cluster& (0+255),w,b
 14112  002B4A  11A6               	iorwf	(??_put_cluster+2)& (0+255),w,b
 14113  002B4C  6FA8               	movwf	_put_cluster$1827& (0+255),b
 14114  002B4E  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 14115  002B50  11A7               	iorwf	(??_put_cluster+3)& (0+255),w,b
 14116  002B52  6FA9               	movwf	(_put_cluster$1827+1)& (0+255),b
 14117  002B54                     l885:
 14118                           
 14119                           ; BSR set to: 0
 14120                           
 14121                           ; BSR set to: 0
 14122  002B54  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 14123  002B58  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 14124  002B5C  C0A8  FFDF         	movff	_put_cluster$1827,indf2
 14125                           
 14126                           ; BSR set to: 0
 14127                           ;tff.c: 215: bc++;
 14128  002B60  4BB0               	infsnz	put_cluster@bc& (0+255),f,b
 14129  002B62  2BB1               	incf	(put_cluster@bc+1)& (0+255),f,b
 14130                           
 14131                           ; BSR set to: 0
 14132                           ;tff.c: 216: fs->winflag = 1;
 14133  002B64  EE20 F01F          	lfsr	2,31
 14134  002B68  51B4               	movf	put_cluster@fs& (0+255),w,b
 14135  002B6A  26D9               	addwf	fsr2l,f,c
 14136  002B6C  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 14137  002B6E  22DA               	addwfc	fsr2h,f,c
 14138  002B70  0E01               	movlw	1
 14139  002B72  6EDF               	movwf	indf2,c
 14140                           
 14141                           ; BSR set to: 0
 14142                           ;tff.c: 217: if (!move_window(fatsect + bc / 512U)) return FALSE;
 14143  002B74  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 14144  002B78  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 14145  002B7C  0E09               	movlw	9
 14146  002B7E  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 14147  002B80                     u10565:
 14148  002B80  90D8               	bcf	status,0,c
 14149  002B82  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 14150  002B84  33A4               	rrcf	??_put_cluster& (0+255),f,b
 14151  002B86  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 14152  002B88  D7FB               	goto	u10565
 14153  002B8A  51A4               	movf	??_put_cluster& (0+255),w,b
 14154  002B8C  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 14155  002B8E  6F8B               	movwf	move_window@sector& (0+255),b
 14156  002B90  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 14157  002B92  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 14158  002B94  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 14159  002B96  0E00               	movlw	0
 14160  002B98  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 14161  002B9A  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 14162  002B9C  0E00               	movlw	0
 14163  002B9E  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 14164  002BA0  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 14165  002BA2  EC42  F019         	call	_move_window	;wreg free
 14166  002BA6  0900               	iorlw	0
 14167  002BA8  A4D8               	btfss	status,2,c
 14168  002BAA  D002               	goto	l886
 14169  002BAC  0E00               	movlw	0
 14170  002BAE  0012               	return	
 14171  002BB0                     l886:
 14172                           
 14173                           ;tff.c: 218: p = &fs->win[bc % 512U];
 14174  002BB0  0EFF               	movlw	255
 14175  002BB2  0100               	movlb	0	; () banked
 14176  002BB4  6FA4               	movwf	??_put_cluster& (0+255),b
 14177  002BB6  0E01               	movlw	1
 14178  002BB8  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 14179  002BBA  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 14180  002BBE  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 14181  002BC2  51A4               	movf	??_put_cluster& (0+255),w,b
 14182  002BC4  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 14183  002BC6  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 14184  002BC8  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 14185  002BCA  0E20               	movlw	32
 14186  002BCC  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 14187  002BCE  0E00               	movlw	0
 14188  002BD0  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 14189  002BD2  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 14190  002BD4  25B4               	addwf	put_cluster@fs& (0+255),w,b
 14191  002BD6  6FB2               	movwf	put_cluster@p& (0+255),b
 14192  002BD8  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 14193  002BDA  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 14194  002BDC  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 14195                           
 14196                           ; BSR set to: 0
 14197                           ;tff.c: 219: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 14198  002BDE  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 14199  002BE0  D013               	goto	l888
 14200                           
 14201                           ; BSR set to: 0
 14202  002BE2  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 14203  002BE6  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 14204  002BEA  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 14205  002BEE  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 14206  002BF0  0E0F               	movlw	15
 14207  002BF2  17A4               	andwf	??_put_cluster& (0+255),f,b
 14208  002BF4  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 14209  002BF8  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 14210  002BFC  50DF               	movf	indf2,w,c
 14211  002BFE  0BF0               	andlw	240
 14212  002C00  11A4               	iorwf	??_put_cluster& (0+255),w,b
 14213  002C02  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 14214  002C04  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 14215  002C06  D00C               	goto	L9
 14216  002C08                     l888:
 14217                           
 14218                           ; BSR set to: 0
 14219                           
 14220                           ; BSR set to: 0
 14221  002C08  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 14222  002C0C  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 14223  002C10  0E04               	movlw	4
 14224  002C12  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 14225  002C14                     u10595:
 14226  002C14  90D8               	bcf	status,0,c
 14227  002C16  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 14228  002C18  33A4               	rrcf	??_put_cluster& (0+255),f,b
 14229  002C1A  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 14230  002C1C  D7FB               	goto	u10595
 14231  002C1E  51A4               	movf	??_put_cluster& (0+255),w,b
 14232  002C20                     L9:
 14233  002C20  6FAA               	movwf	_put_cluster$1828& (0+255),b
 14234  002C22  6BAB               	clrf	(_put_cluster$1828+1)& (0+255),b
 14235                           
 14236                           ; BSR set to: 0
 14237                           
 14238                           ; BSR set to: 0
 14239  002C24  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 14240  002C28  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 14241  002C2C  C0AA  FFDF         	movff	_put_cluster$1828,indf2
 14242                           
 14243                           ;tff.c: 220: break;
 14244  002C30  D049               	goto	l891
 14245  002C32                     
 14246                           ; BSR set to: 0
 14247                           ;tff.c: 223: if (!move_window(fatsect + clust / 256)) return FALSE;
 14248                           
 14249                           ; BSR set to: 0
 14250  002C32  C0A0  F0A4         	movff	put_cluster@clust,??_put_cluster
 14251  002C36  C0A1  F0A5         	movff	put_cluster@clust+1,??_put_cluster+1
 14252  002C3A  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 14253  002C3E  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 14254  002C40  51A4               	movf	??_put_cluster& (0+255),w,b
 14255  002C42  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 14256  002C44  6F8B               	movwf	move_window@sector& (0+255),b
 14257  002C46  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 14258  002C48  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 14259  002C4A  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 14260  002C4C  0E00               	movlw	0
 14261  002C4E  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 14262  002C50  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 14263  002C52  0E00               	movlw	0
 14264  002C54  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 14265  002C56  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 14266  002C58  EC42  F019         	call	_move_window	;wreg free
 14267  002C5C  0900               	iorlw	0
 14268  002C5E  A4D8               	btfss	status,2,c
 14269  002C60  D002               	goto	l893
 14270  002C62  0E00               	movlw	0
 14271  002C64  0012               	return	
 14272  002C66                     l893:
 14273                           
 14274                           ;tff.c: 224: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 14275  002C66  0EFF               	movlw	255
 14276  002C68  0100               	movlb	0	; () banked
 14277  002C6A  6FA4               	movwf	??_put_cluster& (0+255),b
 14278  002C6C  0E01               	movlw	1
 14279  002C6E  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 14280  002C70  C0A0  F0A6         	movff	put_cluster@clust,??_put_cluster+2
 14281  002C74  C0A1  F0A7         	movff	put_cluster@clust+1,??_put_cluster+3
 14282  002C78  90D8               	bcf	status,0,c
 14283  002C7A  37A6               	rlcf	(??_put_cluster+2)& (0+255),f,b
 14284  002C7C  37A7               	rlcf	(??_put_cluster+3)& (0+255),f,b
 14285  002C7E  51A4               	movf	??_put_cluster& (0+255),w,b
 14286  002C80  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 14287  002C82  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 14288  002C84  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 14289  002C86  0E20               	movlw	32
 14290  002C88  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 14291  002C8A  0E00               	movlw	0
 14292  002C8C  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 14293  002C8E  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 14294  002C90  25B4               	addwf	put_cluster@fs& (0+255),w,b
 14295  002C92  6ED9               	movwf	fsr2l,c
 14296  002C94  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 14297  002C96  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 14298  002C98  6EDA               	movwf	fsr2h,c
 14299  002C9A  C0A2  FFDE         	movff	put_cluster@val,postinc2
 14300  002C9E  C0A3  FFDD         	movff	put_cluster@val+1,postdec2
 14301                           
 14302                           ;tff.c: 225: break;
 14303  002CA2  D010               	goto	l891
 14304  002CA4                     
 14305                           ; BSR set to: 0
 14306                           ;tff.c: 233: return FALSE;
 14307                           
 14308                           ; BSR set to: 0
 14309  002CA4  0E00               	movlw	0
 14310                           
 14311                           ; BSR set to: 0
 14312  002CA6  0012               	return	
 14313  002CA8                     l878:
 14314                           
 14315                           ; BSR set to: 0
 14316                           
 14317                           ; BSR set to: 0
 14318  002CA8  EE20 F01C          	lfsr	2,28
 14319  002CAC  51B4               	movf	put_cluster@fs& (0+255),w,b
 14320  002CAE  26D9               	addwf	fsr2l,f,c
 14321  002CB0  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 14322  002CB2  22DA               	addwfc	fsr2h,f,c
 14323  002CB4  50DF               	movf	indf2,w,c
 14324                           
 14325                           ; Switch size 1, requested type "space"
 14326                           ; Number of cases is 2, Range of values is 1 to 2
 14327                           ; switch strategies available:
 14328                           ; Name         Instructions Cycles
 14329                           ; simple_byte            7     4 (average)
 14330                           ;	Chosen strategy is simple_byte
 14331  002CB6  0A01               	xorlw	1	; case 1
 14332  002CB8  B4D8               	btfsc	status,2,c
 14333  002CBA  D6E5               	goto	l879
 14334  002CBC  0A03               	xorlw	3	; case 2
 14335  002CBE  B4D8               	btfsc	status,2,c
 14336  002CC0  D7B8               	goto	l892
 14337  002CC2  D7F0               	goto	l894
 14338  002CC4                     l891:
 14339                           
 14340                           ; BSR set to: 0
 14341                           ;tff.c: 235: fs->winflag = 1;
 14342                           
 14343                           ; BSR set to: 0
 14344  002CC4  EE20 F01F          	lfsr	2,31
 14345  002CC8  51B4               	movf	put_cluster@fs& (0+255),w,b
 14346  002CCA  26D9               	addwf	fsr2l,f,c
 14347  002CCC  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 14348  002CCE  22DA               	addwfc	fsr2h,f,c
 14349  002CD0  0E01               	movlw	1
 14350  002CD2  6EDF               	movwf	indf2,c
 14351                           
 14352                           ; BSR set to: 0
 14353                           ;tff.c: 236: return TRUE;
 14354  002CD4  0E01               	movlw	1
 14355  002CD6  0012               	return	
 14356  002CD8                     __end_of_put_cluster:
 14357                           	opt stack 0
 14358                           tosu	equ	0xFFF
 14359                           tosh	equ	0xFFE
 14360                           tosl	equ	0xFFD
 14361                           pclath	equ	0xFFA
 14362                           tblptru	equ	0xFF8
 14363                           tblptrh	equ	0xFF7
 14364                           tblptrl	equ	0xFF6
 14365                           tablat	equ	0xFF5
 14366                           prodh	equ	0xFF4
 14367                           prodl	equ	0xFF3
 14368                           intcon	equ	0xFF2
 14369                           intcon2	equ	0xFF1
 14370                           intcon3	equ	0xFF0
 14371                           indf0	equ	0xFEF
 14372                           postinc0	equ	0xFEE
 14373                           fsr0h	equ	0xFEA
 14374                           fsr0l	equ	0xFE9
 14375                           wreg	equ	0xFE8
 14376                           indf1	equ	0xFE7
 14377                           postinc1	equ	0xFE6
 14378                           postdec1	equ	0xFE5
 14379                           fsr1h	equ	0xFE2
 14380                           fsr1l	equ	0xFE1
 14381                           indf2	equ	0xFDF
 14382                           postinc2	equ	0xFDE
 14383                           postdec2	equ	0xFDD
 14384                           plusw2	equ	0xFDB
 14385                           fsr2h	equ	0xFDA
 14386                           fsr2l	equ	0xFD9
 14387                           status	equ	0xFD8
 14388                           
 14389 ;; *************** function _get_cluster *****************
 14390 ;; Defined at:
 14391 ;;		line 154 in file "bibliotecas/tff.c"
 14392 ;; Parameters:    Size  Location     Type
 14393 ;;  clust           2   64[BANK0 ] unsigned short 
 14394 ;; Auto vars:     Size  Location     Type
 14395 ;;  fatsect         4   75[BANK0 ] unsigned long 
 14396 ;;  fs              2   81[BANK0 ] PTR struct _FATFS
 14397 ;;		 -> NULL(0), fs(544), 
 14398 ;;  bc              2   79[BANK0 ] unsigned short 
 14399 ;;  wc              2   73[BANK0 ] unsigned short 
 14400 ;; Return value:  Size  Location     Type
 14401 ;;                  2   64[BANK0 ] unsigned short 
 14402 ;; Registers used:
 14403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14404 ;; Tracked objects:
 14405 ;;		On entry : 0/0
 14406 ;;		On exit  : 0/0
 14407 ;;		Unchanged: 0/0
 14408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14409 ;;      Params:         0       2       0       0       0       0       0       0       0
 14410 ;;      Locals:         0      10       0       0       0       0       0       0       0
 14411 ;;      Temps:          0       7       0       0       0       0       0       0       0
 14412 ;;      Totals:         0      19       0       0       0       0       0       0       0
 14413 ;;Total ram usage:       19 bytes
 14414 ;; Hardware stack levels used:    1
 14415 ;; Hardware stack levels required when called:    9
 14416 ;; This function calls:
 14417 ;;		___wmul
 14418 ;;		_move_window
 14419 ;; This function is called by:
 14420 ;;		_remove_chain
 14421 ;;		_create_chain
 14422 ;;		_next_dir_entry
 14423 ;;		_f_lseek
 14424 ;;		_f_read
 14425 ;; This function uses a non-reentrant model
 14426 ;;
 14427                           
 14428                           	psect	text50
 14429  002CD8                     __ptext50:
 14430                           	opt stack 0
 14431  002CD8                     _get_cluster:
 14432                           	opt stack 14
 14433                           
 14434                           ;tff.c: 158: WORD wc, bc;
 14435                           ;tff.c: 159: DWORD fatsect;
 14436                           ;tff.c: 160: FATFS *fs = FatFs;
 14437                           
 14438                           ;incstack = 0
 14439  002CD8  C0F2  F0B1         	movff	_FatFs,get_cluster@fs
 14440  002CDC  C0F3  F0B2         	movff	_FatFs+1,get_cluster@fs+1
 14441                           
 14442                           ;tff.c: 163: if (clust >= 2 && clust < fs->max_clust) {
 14443  002CE0  0100               	movlb	0	; () banked
 14444  002CE2  51A1               	movf	(get_cluster@clust+1)& (0+255),w,b
 14445  002CE4  E104               	bnz	u10440
 14446  002CE6  0E02               	movlw	2
 14447  002CE8  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 14448  002CEA  A0D8               	btfss	status,0,c
 14449  002CEC  D100               	goto	l867
 14450  002CEE                     u10440:
 14451                           
 14452                           ; BSR set to: 0
 14453  002CEE  EE20 F016          	lfsr	2,22
 14454  002CF2  51B1               	movf	get_cluster@fs& (0+255),w,b
 14455  002CF4  26D9               	addwf	fsr2l,f,c
 14456  002CF6  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 14457  002CF8  22DA               	addwfc	fsr2h,f,c
 14458  002CFA  50DE               	movf	postinc2,w,c
 14459  002CFC  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 14460  002CFE  50DE               	movf	postinc2,w,c
 14461  002D00  59A1               	subwfb	(get_cluster@clust+1)& (0+255),w,b
 14462  002D02  B0D8               	btfsc	status,0,c
 14463  002D04  D0F4               	goto	l867
 14464                           
 14465                           ; BSR set to: 0
 14466                           ;tff.c: 164: fatsect = fs->fatbase;
 14467  002D06  EE20 F008          	lfsr	2,8
 14468  002D0A  51B1               	movf	get_cluster@fs& (0+255),w,b
 14469  002D0C  26D9               	addwf	fsr2l,f,c
 14470  002D0E  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 14471  002D10  22DA               	addwfc	fsr2h,f,c
 14472  002D12  CFDE F0AB          	movff	postinc2,get_cluster@fatsect
 14473  002D16  CFDE F0AC          	movff	postinc2,get_cluster@fatsect+1
 14474  002D1A  CFDE F0AD          	movff	postinc2,get_cluster@fatsect+2
 14475  002D1E  CFDE F0AE          	movff	postinc2,get_cluster@fatsect+3
 14476                           
 14477                           ;tff.c: 165: switch (fs->fs_type) {
 14478  002D22  D0D8               	goto	l864
 14479  002D24                     
 14480                           ; BSR set to: 0
 14481                           ;tff.c: 167: bc = (WORD)clust * 3 / 2;
 14482                           
 14483                           ; BSR set to: 0
 14484  002D24  C0A0  F060         	movff	get_cluster@clust,___wmul@multiplier
 14485  002D28  C0A1  F061         	movff	get_cluster@clust+1,___wmul@multiplier+1
 14486  002D2C  0E00               	movlw	0
 14487  002D2E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14488  002D30  0E03               	movlw	3
 14489  002D32  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14490  002D34  ECB8  F028         	call	___wmul	;wreg free
 14491  002D38  90D8               	bcf	status,0,c
 14492  002D3A  0100               	movlb	0	; () banked
 14493  002D3C  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 14494  002D3E  6FA2               	movwf	??_get_cluster& (0+255),b
 14495  002D40  3160               	rrcf	?___wmul& (0+255),w,b
 14496  002D42  6FAF               	movwf	get_cluster@bc& (0+255),b
 14497  002D44  C0A2  F0B0         	movff	??_get_cluster,get_cluster@bc+1
 14498                           
 14499                           ; BSR set to: 0
 14500                           ;tff.c: 168: if (!move_window(fatsect + bc / 512U)) break;
 14501  002D48  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 14502  002D4C  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 14503  002D50  0E09               	movlw	9
 14504  002D52  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 14505  002D54                     u10465:
 14506  002D54  90D8               	bcf	status,0,c
 14507  002D56  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 14508  002D58  33A2               	rrcf	??_get_cluster& (0+255),f,b
 14509  002D5A  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 14510  002D5C  D7FB               	goto	u10465
 14511  002D5E  51A2               	movf	??_get_cluster& (0+255),w,b
 14512  002D60  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 14513  002D62  6F8B               	movwf	move_window@sector& (0+255),b
 14514  002D64  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 14515  002D66  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 14516  002D68  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 14517  002D6A  0E00               	movlw	0
 14518  002D6C  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 14519  002D6E  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 14520  002D70  0E00               	movlw	0
 14521  002D72  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 14522  002D74  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 14523  002D76  EC42  F019         	call	_move_window	;wreg free
 14524  002D7A  0900               	iorlw	0
 14525  002D7C  B4D8               	btfsc	status,2,c
 14526  002D7E  D0B7               	goto	l867
 14527                           
 14528                           ;tff.c: 169: wc = fs->win[bc % 512U]; bc++;
 14529  002D80  0EFF               	movlw	255
 14530  002D82  0100               	movlb	0	; () banked
 14531  002D84  6FA2               	movwf	??_get_cluster& (0+255),b
 14532  002D86  0E01               	movlw	1
 14533  002D88  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 14534  002D8A  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 14535  002D8E  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 14536  002D92  51A2               	movf	??_get_cluster& (0+255),w,b
 14537  002D94  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 14538  002D96  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 14539  002D98  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 14540  002D9A  0E20               	movlw	32
 14541  002D9C  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 14542  002D9E  0E00               	movlw	0
 14543  002DA0  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 14544  002DA2  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 14545  002DA4  25B1               	addwf	get_cluster@fs& (0+255),w,b
 14546  002DA6  6ED9               	movwf	fsr2l,c
 14547  002DA8  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 14548  002DAA  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 14549  002DAC  6EDA               	movwf	fsr2h,c
 14550  002DAE  50DF               	movf	indf2,w,c
 14551  002DB0  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 14552  002DB2  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 14553  002DB4  6FA9               	movwf	get_cluster@wc& (0+255),b
 14554  002DB6  6BAA               	clrf	(get_cluster@wc+1)& (0+255),b
 14555                           
 14556                           ; BSR set to: 0
 14557  002DB8  4BAF               	infsnz	get_cluster@bc& (0+255),f,b
 14558  002DBA  2BB0               	incf	(get_cluster@bc+1)& (0+255),f,b
 14559                           
 14560                           ; BSR set to: 0
 14561                           ;tff.c: 170: if (!move_window(fatsect + bc / 512U)) break;
 14562  002DBC  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 14563  002DC0  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 14564  002DC4  0E09               	movlw	9
 14565  002DC6  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 14566  002DC8                     u10485:
 14567  002DC8  90D8               	bcf	status,0,c
 14568  002DCA  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 14569  002DCC  33A2               	rrcf	??_get_cluster& (0+255),f,b
 14570  002DCE  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 14571  002DD0  D7FB               	goto	u10485
 14572  002DD2  51A2               	movf	??_get_cluster& (0+255),w,b
 14573  002DD4  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 14574  002DD6  6F8B               	movwf	move_window@sector& (0+255),b
 14575  002DD8  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 14576  002DDA  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 14577  002DDC  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 14578  002DDE  0E00               	movlw	0
 14579  002DE0  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 14580  002DE2  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 14581  002DE4  0E00               	movlw	0
 14582  002DE6  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 14583  002DE8  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 14584  002DEA  EC42  F019         	call	_move_window	;wreg free
 14585  002DEE  0900               	iorlw	0
 14586  002DF0  B4D8               	btfsc	status,2,c
 14587  002DF2  D07D               	goto	l867
 14588                           
 14589                           ;tff.c: 171: wc |= (WORD)fs->win[bc % 512U] << 8;
 14590  002DF4  0EFF               	movlw	255
 14591  002DF6  0100               	movlb	0	; () banked
 14592  002DF8  6FA2               	movwf	??_get_cluster& (0+255),b
 14593  002DFA  0E01               	movlw	1
 14594  002DFC  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 14595  002DFE  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 14596  002E02  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 14597  002E06  51A2               	movf	??_get_cluster& (0+255),w,b
 14598  002E08  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 14599  002E0A  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 14600  002E0C  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 14601  002E0E  0E20               	movlw	32
 14602  002E10  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 14603  002E12  0E00               	movlw	0
 14604  002E14  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 14605  002E16  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 14606  002E18  25B1               	addwf	get_cluster@fs& (0+255),w,b
 14607  002E1A  6ED9               	movwf	fsr2l,c
 14608  002E1C  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 14609  002E1E  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 14610  002E20  6EDA               	movwf	fsr2h,c
 14611  002E22  50DF               	movf	indf2,w,c
 14612  002E24  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 14613  002E26  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 14614  002E28  6FA8               	movwf	(??_get_cluster+6)& (0+255),b
 14615  002E2A  6BA7               	clrf	(??_get_cluster+5)& (0+255),b
 14616  002E2C  51A7               	movf	(??_get_cluster+5)& (0+255),w,b
 14617  002E2E  13A9               	iorwf	get_cluster@wc& (0+255),f,b
 14618  002E30  51A8               	movf	(??_get_cluster+6)& (0+255),w,b
 14619  002E32  13AA               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;tff.c: 172: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 14623  002E34  B1A0               	btfsc	get_cluster@clust& (0+255),0,b
 14624  002E36  D007               	goto	l870
 14625                           
 14626                           ; BSR set to: 0
 14627  002E38  0EFF               	movlw	255
 14628  002E3A  15A9               	andwf	get_cluster@wc& (0+255),w,b
 14629  002E3C  6FA0               	movwf	?_get_cluster& (0+255),b
 14630  002E3E  0E0F               	movlw	15
 14631  002E40  15AA               	andwf	(get_cluster@wc+1)& (0+255),w,b
 14632  002E42  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 14633  002E44  0012               	return	
 14634  002E46                     l870:
 14635                           
 14636                           ; BSR set to: 0
 14637                           
 14638                           ; BSR set to: 0
 14639  002E46  C0A9  F0A2         	movff	get_cluster@wc,??_get_cluster
 14640  002E4A  C0AA  F0A3         	movff	get_cluster@wc+1,??_get_cluster+1
 14641  002E4E  0E04               	movlw	4
 14642  002E50  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 14643  002E52                     u10515:
 14644  002E52  90D8               	bcf	status,0,c
 14645  002E54  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 14646  002E56  33A2               	rrcf	??_get_cluster& (0+255),f,b
 14647  002E58  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 14648  002E5A  D7FB               	goto	u10515
 14649  002E5C  C0A2  F0A0         	movff	??_get_cluster,?_get_cluster
 14650  002E60  C0A3  F0A1         	movff	??_get_cluster+1,?_get_cluster+1
 14651                           
 14652                           ; BSR set to: 0
 14653                           
 14654                           ; BSR set to: 0
 14655  002E64  0012               	return	
 14656  002E66                     
 14657                           ; BSR set to: 0
 14658                           ;tff.c: 175: if (!move_window(fatsect + clust / 256)) break;
 14659                           
 14660                           ; BSR set to: 0
 14661  002E66  C0A0  F0A2         	movff	get_cluster@clust,??_get_cluster
 14662  002E6A  C0A1  F0A3         	movff	get_cluster@clust+1,??_get_cluster+1
 14663  002E6E  C0A3  F0A2         	movff	??_get_cluster+1,??_get_cluster
 14664  002E72  6BA3               	clrf	(??_get_cluster+1)& (0+255),b
 14665  002E74  51A2               	movf	??_get_cluster& (0+255),w,b
 14666  002E76  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 14667  002E78  6F8B               	movwf	move_window@sector& (0+255),b
 14668  002E7A  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 14669  002E7C  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 14670  002E7E  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 14671  002E80  0E00               	movlw	0
 14672  002E82  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 14673  002E84  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 14674  002E86  0E00               	movlw	0
 14675  002E88  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 14676  002E8A  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 14677  002E8C  EC42  F019         	call	_move_window	;wreg free
 14678  002E90  0900               	iorlw	0
 14679  002E92  B4D8               	btfsc	status,2,c
 14680  002E94  D02C               	goto	l867
 14681                           
 14682                           ;tff.c: 176: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 14683  002E96  0EFF               	movlw	255
 14684  002E98  0100               	movlb	0	; () banked
 14685  002E9A  6FA2               	movwf	??_get_cluster& (0+255),b
 14686  002E9C  0E01               	movlw	1
 14687  002E9E  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 14688  002EA0  C0A0  F0A4         	movff	get_cluster@clust,??_get_cluster+2
 14689  002EA4  C0A1  F0A5         	movff	get_cluster@clust+1,??_get_cluster+3
 14690  002EA8  90D8               	bcf	status,0,c
 14691  002EAA  37A4               	rlcf	(??_get_cluster+2)& (0+255),f,b
 14692  002EAC  37A5               	rlcf	(??_get_cluster+3)& (0+255),f,b
 14693  002EAE  51A2               	movf	??_get_cluster& (0+255),w,b
 14694  002EB0  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 14695  002EB2  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 14696  002EB4  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 14697  002EB6  0E20               	movlw	32
 14698  002EB8  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 14699  002EBA  0E00               	movlw	0
 14700  002EBC  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 14701  002EBE  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 14702  002EC0  25B1               	addwf	get_cluster@fs& (0+255),w,b
 14703  002EC2  6ED9               	movwf	fsr2l,c
 14704  002EC4  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 14705  002EC6  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 14706  002EC8  6EDA               	movwf	fsr2h,c
 14707  002ECA  CFDE F0A0          	movff	postinc2,?_get_cluster
 14708  002ECE  CFDD F0A1          	movff	postdec2,?_get_cluster+1
 14709                           
 14710                           ; BSR set to: 0
 14711  002ED2  0012               	return	
 14712  002ED4                     l864:
 14713                           
 14714                           ; BSR set to: 0
 14715                           
 14716                           ; BSR set to: 0
 14717  002ED4  EE20 F01C          	lfsr	2,28
 14718  002ED8  51B1               	movf	get_cluster@fs& (0+255),w,b
 14719  002EDA  26D9               	addwf	fsr2l,f,c
 14720  002EDC  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 14721  002EDE  22DA               	addwfc	fsr2h,f,c
 14722  002EE0  50DF               	movf	indf2,w,c
 14723                           
 14724                           ; Switch size 1, requested type "space"
 14725                           ; Number of cases is 2, Range of values is 1 to 2
 14726                           ; switch strategies available:
 14727                           ; Name         Instructions Cycles
 14728                           ; simple_byte            7     4 (average)
 14729                           ;	Chosen strategy is simple_byte
 14730  002EE2  0A01               	xorlw	1	; case 1
 14731  002EE4  B4D8               	btfsc	status,2,c
 14732  002EE6  D71E               	goto	l865
 14733  002EE8  0A03               	xorlw	3	; case 2
 14734  002EEA  B4D8               	btfsc	status,2,c
 14735  002EEC  D7BC               	goto	l874
 14736  002EEE                     l867:
 14737                           
 14738                           ;tff.c: 183: }
 14739                           ;tff.c: 185: return 1;
 14740                           
 14741                           ; BSR set to: 0
 14742                           
 14743                           ; BSR set to: 0
 14744  002EEE  0E00               	movlw	0
 14745  002EF0  0100               	movlb	0	; () banked
 14746  002EF2  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 14747  002EF4  0E01               	movlw	1
 14748  002EF6  6FA0               	movwf	?_get_cluster& (0+255),b
 14749  002EF8  0012               	return	
 14750  002EFA                     __end_of_get_cluster:
 14751                           	opt stack 0
 14752                           tosu	equ	0xFFF
 14753                           tosh	equ	0xFFE
 14754                           tosl	equ	0xFFD
 14755                           pclath	equ	0xFFA
 14756                           tblptru	equ	0xFF8
 14757                           tblptrh	equ	0xFF7
 14758                           tblptrl	equ	0xFF6
 14759                           tablat	equ	0xFF5
 14760                           prodh	equ	0xFF4
 14761                           prodl	equ	0xFF3
 14762                           intcon	equ	0xFF2
 14763                           intcon2	equ	0xFF1
 14764                           intcon3	equ	0xFF0
 14765                           indf0	equ	0xFEF
 14766                           postinc0	equ	0xFEE
 14767                           fsr0h	equ	0xFEA
 14768                           fsr0l	equ	0xFE9
 14769                           wreg	equ	0xFE8
 14770                           indf1	equ	0xFE7
 14771                           postinc1	equ	0xFE6
 14772                           postdec1	equ	0xFE5
 14773                           fsr1h	equ	0xFE2
 14774                           fsr1l	equ	0xFE1
 14775                           indf2	equ	0xFDF
 14776                           postinc2	equ	0xFDE
 14777                           postdec2	equ	0xFDD
 14778                           plusw2	equ	0xFDB
 14779                           fsr2h	equ	0xFDA
 14780                           fsr2l	equ	0xFD9
 14781                           status	equ	0xFD8
 14782                           
 14783 ;; *************** function ___wmul *****************
 14784 ;; Defined at:
 14785 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14786 ;; Parameters:    Size  Location     Type
 14787 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14788 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14789 ;; Auto vars:     Size  Location     Type
 14790 ;;  product         2   32[COMRAM] unsigned int 
 14791 ;; Return value:  Size  Location     Type
 14792 ;;                  2    0[BANK0 ] unsigned int 
 14793 ;; Registers used:
 14794 ;;		wreg, status,2, status,0, prodl, prodh
 14795 ;; Tracked objects:
 14796 ;;		On entry : 0/0
 14797 ;;		On exit  : 0/0
 14798 ;;		Unchanged: 0/0
 14799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14800 ;;      Params:         0       4       0       0       0       0       0       0       0
 14801 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14802 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14803 ;;      Totals:         2       4       0       0       0       0       0       0       0
 14804 ;;Total ram usage:        6 bytes
 14805 ;; Hardware stack levels used:    1
 14806 ;; Hardware stack levels required when called:    3
 14807 ;; This function calls:
 14808 ;;		Nothing
 14809 ;; This function is called by:
 14810 ;;		_get_cluster
 14811 ;;		_put_cluster
 14812 ;;		_fprintf
 14813 ;; This function uses a non-reentrant model
 14814 ;;
 14815                           
 14816                           	psect	text51
 14817  005170                     __ptext51:
 14818                           	opt stack 0
 14819  005170                     ___wmul:
 14820                           	opt stack 19
 14821                           
 14822                           ; BSR set to: 0
 14823                           ;incstack = 0
 14824  005170  0100               	movlb	0	; () banked
 14825  005172  5160               	movf	___wmul@multiplier& (0+255),w,b
 14826  005174  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14827  005176  CFF3 F021          	movff	prodl,___wmul@product
 14828  00517A  CFF4 F022          	movff	prodh,___wmul@product+1
 14829  00517E  5160               	movf	___wmul@multiplier& (0+255),w,b
 14830  005180  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14831  005182  50F3               	movf	prodl,w,c
 14832  005184  2622               	addwf	___wmul@product+1,f,c
 14833  005186  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14834  005188  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14835  00518A  50F3               	movf	prodl,w,c
 14836  00518C  2622               	addwf	___wmul@product+1,f,c
 14837                           
 14838                           ; BSR set to: 0
 14839  00518E  C021  F060         	movff	___wmul@product,?___wmul
 14840  005192  C022  F061         	movff	___wmul@product+1,?___wmul+1
 14841  005196  0012               	return	
 14842  005198                     __end_of___wmul:
 14843                           	opt stack 0
 14844                           tosu	equ	0xFFF
 14845                           tosh	equ	0xFFE
 14846                           tosl	equ	0xFFD
 14847                           pclath	equ	0xFFA
 14848                           tblptru	equ	0xFF8
 14849                           tblptrh	equ	0xFF7
 14850                           tblptrl	equ	0xFF6
 14851                           tablat	equ	0xFF5
 14852                           prodh	equ	0xFF4
 14853                           prodl	equ	0xFF3
 14854                           intcon	equ	0xFF2
 14855                           intcon2	equ	0xFF1
 14856                           intcon3	equ	0xFF0
 14857                           indf0	equ	0xFEF
 14858                           postinc0	equ	0xFEE
 14859                           fsr0h	equ	0xFEA
 14860                           fsr0l	equ	0xFE9
 14861                           wreg	equ	0xFE8
 14862                           indf1	equ	0xFE7
 14863                           postinc1	equ	0xFE6
 14864                           postdec1	equ	0xFE5
 14865                           fsr1h	equ	0xFE2
 14866                           fsr1l	equ	0xFE1
 14867                           indf2	equ	0xFDF
 14868                           postinc2	equ	0xFDE
 14869                           postdec2	equ	0xFDD
 14870                           plusw2	equ	0xFDB
 14871                           fsr2h	equ	0xFDA
 14872                           fsr2l	equ	0xFD9
 14873                           status	equ	0xFD8
 14874                           
 14875 ;; *************** function ___lldiv *****************
 14876 ;; Defined at:
 14877 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 14878 ;; Parameters:    Size  Location     Type
 14879 ;;  dividend        4    0[BANK0 ] unsigned long 
 14880 ;;  divisor         4    4[BANK0 ] unsigned long 
 14881 ;; Auto vars:     Size  Location     Type
 14882 ;;  quotient        4    8[BANK0 ] unsigned long 
 14883 ;;  counter         1   12[BANK0 ] unsigned char 
 14884 ;; Return value:  Size  Location     Type
 14885 ;;                  4    0[BANK0 ] unsigned long 
 14886 ;; Registers used:
 14887 ;;		wreg, status,2, status,0
 14888 ;; Tracked objects:
 14889 ;;		On entry : 0/0
 14890 ;;		On exit  : 0/0
 14891 ;;		Unchanged: 0/0
 14892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14893 ;;      Params:         0       8       0       0       0       0       0       0       0
 14894 ;;      Locals:         0       5       0       0       0       0       0       0       0
 14895 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14896 ;;      Totals:         0      13       0       0       0       0       0       0       0
 14897 ;;Total ram usage:       13 bytes
 14898 ;; Hardware stack levels used:    1
 14899 ;; Hardware stack levels required when called:    3
 14900 ;; This function calls:
 14901 ;;		Nothing
 14902 ;; This function is called by:
 14903 ;;		_auto_mount
 14904 ;;		_f_lseek
 14905 ;;		_fprintf
 14906 ;; This function uses a non-reentrant model
 14907 ;;
 14908                           
 14909                           	psect	text52
 14910  004756                     __ptext52:
 14911                           	opt stack 0
 14912  004756                     ___lldiv:
 14913                           	opt stack 24
 14914                           
 14915                           ; BSR set to: 0
 14916                           ;incstack = 0
 14917  004756  0E00               	movlw	0
 14918  004758  0100               	movlb	0	; () banked
 14919  00475A  6F68               	movwf	___lldiv@quotient& (0+255),b
 14920  00475C  0E00               	movlw	0
 14921  00475E  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 14922  004760  0E00               	movlw	0
 14923  004762  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 14924  004764  0E00               	movlw	0
 14925  004766  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 14926                           
 14927                           ; BSR set to: 0
 14928  004768  5164               	movf	___lldiv@divisor& (0+255),w,b
 14929  00476A  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 14930  00476C  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 14931  00476E  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 14932  004770  B4D8               	btfsc	status,2,c
 14933  004772  D02A               	goto	l1705
 14934                           
 14935                           ; BSR set to: 0
 14936  004774  0E01               	movlw	1
 14937  004776  6F6C               	movwf	___lldiv@counter& (0+255),b
 14938  004778  D006               	goto	l1700
 14939  00477A                     
 14940                           ; BSR set to: 0
 14941                           
 14942                           ; BSR set to: 0
 14943  00477A  90D8               	bcf	status,0,c
 14944  00477C  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 14945  00477E  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 14946  004780  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 14947  004782  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 14948  004784  2B6C               	incf	___lldiv@counter& (0+255),f,b
 14949  004786                     l1700:
 14950                           
 14951                           ; BSR set to: 0
 14952                           
 14953                           ; BSR set to: 0
 14954  004786  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 14955  004788  D7F8               	goto	l1701
 14956  00478A                     u12020:
 14957                           
 14958                           ; BSR set to: 0
 14959                           
 14960                           ; BSR set to: 0
 14961                           
 14962                           ; BSR set to: 0
 14963  00478A  90D8               	bcf	status,0,c
 14964  00478C  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 14965  00478E  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 14966  004790  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 14967  004792  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 14968                           
 14969                           ; BSR set to: 0
 14970  004794  5164               	movf	___lldiv@divisor& (0+255),w,b
 14971  004796  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 14972  004798  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 14973  00479A  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 14974  00479C  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 14975  00479E  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 14976  0047A0  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 14977  0047A2  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 14978  0047A4  A0D8               	btfss	status,0,c
 14979  0047A6  D009               	goto	l1704
 14980                           
 14981                           ; BSR set to: 0
 14982  0047A8  5164               	movf	___lldiv@divisor& (0+255),w,b
 14983  0047AA  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 14984  0047AC  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 14985  0047AE  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 14986  0047B0  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 14987  0047B2  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 14988  0047B4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 14989  0047B6  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 14990                           
 14991                           ; BSR set to: 0
 14992  0047B8  8168               	bsf	___lldiv@quotient& (0+255),0,b
 14993  0047BA                     l1704:
 14994                           
 14995                           ; BSR set to: 0
 14996                           
 14997                           ; BSR set to: 0
 14998  0047BA  90D8               	bcf	status,0,c
 14999  0047BC  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 15000  0047BE  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 15001  0047C0  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 15002  0047C2  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 15003                           
 15004                           ; BSR set to: 0
 15005  0047C4  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 15006  0047C6  D7E1               	goto	u12020
 15007  0047C8                     l1705:
 15008                           
 15009                           ; BSR set to: 0
 15010                           
 15011                           ; BSR set to: 0
 15012  0047C8  C068  F060         	movff	___lldiv@quotient,?___lldiv
 15013  0047CC  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 15014  0047D0  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 15015  0047D4  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 15016                           
 15017                           ; BSR set to: 0
 15018  0047D8  0012               	return		;funcret
 15019  0047DA                     __end_of___lldiv:
 15020                           	opt stack 0
 15021                           tosu	equ	0xFFF
 15022                           tosh	equ	0xFFE
 15023                           tosl	equ	0xFFD
 15024                           pclath	equ	0xFFA
 15025                           tblptru	equ	0xFF8
 15026                           tblptrh	equ	0xFF7
 15027                           tblptrl	equ	0xFF6
 15028                           tablat	equ	0xFF5
 15029                           prodh	equ	0xFF4
 15030                           prodl	equ	0xFF3
 15031                           intcon	equ	0xFF2
 15032                           intcon2	equ	0xFF1
 15033                           intcon3	equ	0xFF0
 15034                           indf0	equ	0xFEF
 15035                           postinc0	equ	0xFEE
 15036                           fsr0h	equ	0xFEA
 15037                           fsr0l	equ	0xFE9
 15038                           wreg	equ	0xFE8
 15039                           indf1	equ	0xFE7
 15040                           postinc1	equ	0xFE6
 15041                           postdec1	equ	0xFE5
 15042                           fsr1h	equ	0xFE2
 15043                           fsr1l	equ	0xFE1
 15044                           indf2	equ	0xFDF
 15045                           postinc2	equ	0xFDE
 15046                           postdec2	equ	0xFDD
 15047                           plusw2	equ	0xFDB
 15048                           fsr2h	equ	0xFDA
 15049                           fsr2l	equ	0xFD9
 15050                           status	equ	0xFD8
 15051                           
 15052 ;; *************** function _f_close *****************
 15053 ;; Defined at:
 15054 ;;		line 1108 in file "bibliotecas/tff.c"
 15055 ;; Parameters:    Size  Location     Type
 15056 ;;  fp              2   75[BANK0 ] PTR struct _FIL
 15057 ;;		 -> fil(28), 
 15058 ;; Auto vars:     Size  Location     Type
 15059 ;;  res             1   77[BANK0 ] enum E155
 15060 ;; Return value:  Size  Location     Type
 15061 ;;                  1    wreg      enum E3972
 15062 ;; Registers used:
 15063 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15064 ;; Tracked objects:
 15065 ;;		On entry : 0/0
 15066 ;;		On exit  : 0/0
 15067 ;;		Unchanged: 0/0
 15068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15069 ;;      Params:         0       2       0       0       0       0       0       0       0
 15070 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15071 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15072 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15073 ;;Total ram usage:        3 bytes
 15074 ;; Hardware stack levels used:    1
 15075 ;; Hardware stack levels required when called:   11
 15076 ;; This function calls:
 15077 ;;		_f_sync
 15078 ;; This function is called by:
 15079 ;;		_escrita_sdcard
 15080 ;;		_sdcard_init
 15081 ;; This function uses a non-reentrant model
 15082 ;;
 15083                           
 15084                           	psect	text53
 15085  005144                     __ptext53:
 15086                           	opt stack 0
 15087  005144                     _f_close:
 15088                           	opt stack 17
 15089                           
 15090                           ;tff.c: 1112: FRESULT res;
 15091                           ;tff.c: 1116: res = f_sync(fp);
 15092                           
 15093                           ; BSR set to: 0
 15094                           ;incstack = 0
 15095  005144  C0AB  F0A2         	movff	f_close@fp,f_sync@fp
 15096  005148  C0AC  F0A3         	movff	f_close@fp+1,f_sync@fp+1
 15097  00514C  EC15  F01E         	call	_f_sync	;wreg free
 15098  005150  0100               	movlb	0	; () banked
 15099  005152  6FAD               	movwf	f_close@res& (0+255),b
 15100                           
 15101                           ; BSR set to: 0
 15102                           ;tff.c: 1120: if (res == FR_OK) fp->fs = (0);
 15103  005154  51AD               	movf	f_close@res& (0+255),w,b
 15104  005156  A4D8               	btfss	status,2,c
 15105  005158  0012               	return	
 15106                           
 15107                           ; BSR set to: 0
 15108  00515A  EE20 F004          	lfsr	2,4
 15109  00515E  51AB               	movf	f_close@fp& (0+255),w,b
 15110  005160  26D9               	addwf	fsr2l,f,c
 15111  005162  51AC               	movf	(f_close@fp+1)& (0+255),w,b
 15112  005164  22DA               	addwfc	fsr2h,f,c
 15113  005166  0E00               	movlw	0
 15114  005168  6EDE               	movwf	postinc2,c
 15115  00516A  0E00               	movlw	0
 15116  00516C  6EDD               	movwf	postdec2,c
 15117                           
 15118                           ; BSR set to: 0
 15119  00516E  0012               	return	
 15120  005170                     __end_of_f_close:
 15121                           	opt stack 0
 15122                           tosu	equ	0xFFF
 15123                           tosh	equ	0xFFE
 15124                           tosl	equ	0xFFD
 15125                           pclath	equ	0xFFA
 15126                           tblptru	equ	0xFF8
 15127                           tblptrh	equ	0xFF7
 15128                           tblptrl	equ	0xFF6
 15129                           tablat	equ	0xFF5
 15130                           prodh	equ	0xFF4
 15131                           prodl	equ	0xFF3
 15132                           intcon	equ	0xFF2
 15133                           intcon2	equ	0xFF1
 15134                           intcon3	equ	0xFF0
 15135                           indf0	equ	0xFEF
 15136                           postinc0	equ	0xFEE
 15137                           fsr0h	equ	0xFEA
 15138                           fsr0l	equ	0xFE9
 15139                           wreg	equ	0xFE8
 15140                           indf1	equ	0xFE7
 15141                           postinc1	equ	0xFE6
 15142                           postdec1	equ	0xFE5
 15143                           fsr1h	equ	0xFE2
 15144                           fsr1l	equ	0xFE1
 15145                           indf2	equ	0xFDF
 15146                           postinc2	equ	0xFDE
 15147                           postdec2	equ	0xFDD
 15148                           plusw2	equ	0xFDB
 15149                           fsr2h	equ	0xFDA
 15150                           fsr2l	equ	0xFD9
 15151                           status	equ	0xFD8
 15152                           
 15153 ;; *************** function _f_sync *****************
 15154 ;; Defined at:
 15155 ;;		line 1069 in file "bibliotecas/tff.c"
 15156 ;; Parameters:    Size  Location     Type
 15157 ;;  fp              2   66[BANK0 ] PTR struct _FIL
 15158 ;;		 -> fil(28), 
 15159 ;; Auto vars:     Size  Location     Type
 15160 ;;  tim             4   68[BANK0 ] unsigned long 
 15161 ;;  dir             2   73[BANK0 ] PTR unsigned char 
 15162 ;;		 -> NULL(0), fs(544), 
 15163 ;;  res             1   72[BANK0 ] enum E155
 15164 ;; Return value:  Size  Location     Type
 15165 ;;                  1    wreg      enum E155
 15166 ;; Registers used:
 15167 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15168 ;; Tracked objects:
 15169 ;;		On entry : 0/0
 15170 ;;		On exit  : 0/0
 15171 ;;		Unchanged: 0/0
 15172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15173 ;;      Params:         0       2       0       0       0       0       0       0       0
 15174 ;;      Locals:         0       7       0       0       0       0       0       0       0
 15175 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15176 ;;      Totals:         0       9       0       0       0       0       0       0       0
 15177 ;;Total ram usage:        9 bytes
 15178 ;; Hardware stack levels used:    1
 15179 ;; Hardware stack levels required when called:   10
 15180 ;; This function calls:
 15181 ;;		_get_fattime
 15182 ;;		_move_window
 15183 ;;		_sync
 15184 ;;		_validate
 15185 ;; This function is called by:
 15186 ;;		_f_close
 15187 ;; This function uses a non-reentrant model
 15188 ;;
 15189                           
 15190                           	psect	text54
 15191  003C2A                     __ptext54:
 15192                           	opt stack 0
 15193  003C2A                     _f_sync:
 15194                           	opt stack 17
 15195                           
 15196                           ;tff.c: 1073: FRESULT res;
 15197                           ;tff.c: 1074: DWORD tim;
 15198                           ;tff.c: 1075: BYTE *dir;
 15199                           ;tff.c: 1078: res = validate(fp->fs, fp->id);
 15200                           
 15201                           ; BSR set to: 0
 15202                           ;incstack = 0
 15203  003C2A  0100               	movlb	0	; () banked
 15204  003C2C  EE20 F004          	lfsr	2,4
 15205  003C30  51A2               	movf	f_sync@fp& (0+255),w,b
 15206  003C32  26D9               	addwf	fsr2l,f,c
 15207  003C34  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 15208  003C36  22DA               	addwfc	fsr2h,f,c
 15209  003C38  CFDE F065          	movff	postinc2,validate@fs
 15210  003C3C  CFDD F066          	movff	postdec2,validate@fs+1
 15211  003C40  C0A2  FFD9         	movff	f_sync@fp,fsr2l
 15212  003C44  C0A3  FFDA         	movff	f_sync@fp+1,fsr2h
 15213  003C48  CFDE F067          	movff	postinc2,validate@id
 15214  003C4C  CFDD F068          	movff	postdec2,validate@id+1
 15215  003C50  EC90  F026         	call	_validate	;wreg free
 15216  003C54  0100               	movlb	0	; () banked
 15217  003C56  6FA8               	movwf	f_sync@res& (0+255),b
 15218                           
 15219                           ; BSR set to: 0
 15220                           ;tff.c: 1079: if (res == FR_OK) {
 15221  003C58  51A8               	movf	f_sync@res& (0+255),w,b
 15222  003C5A  A4D8               	btfss	status,2,c
 15223  003C5C  D079               	goto	l1175
 15224                           
 15225                           ; BSR set to: 0
 15226                           ;tff.c: 1080: if (fp->flag & 0x20) {
 15227  003C5E  EE20 F002          	lfsr	2,2
 15228  003C62  51A2               	movf	f_sync@fp& (0+255),w,b
 15229  003C64  26D9               	addwf	fsr2l,f,c
 15230  003C66  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 15231  003C68  22DA               	addwfc	fsr2h,f,c
 15232  003C6A  AADF               	btfss	indf2,5,c
 15233  003C6C  D071               	goto	l1175
 15234                           
 15235                           ; BSR set to: 0
 15236                           ;tff.c: 1082: if (!move_window(fp->dir_sect))
 15237  003C6E  EE20 F016          	lfsr	2,22
 15238  003C72  51A2               	movf	f_sync@fp& (0+255),w,b
 15239  003C74  26D9               	addwf	fsr2l,f,c
 15240  003C76  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 15241  003C78  22DA               	addwfc	fsr2h,f,c
 15242  003C7A  CFDE F08B          	movff	postinc2,move_window@sector
 15243  003C7E  CFDE F08C          	movff	postinc2,move_window@sector+1
 15244  003C82  CFDE F08D          	movff	postinc2,move_window@sector+2
 15245  003C86  CFDE F08E          	movff	postinc2,move_window@sector+3
 15246  003C8A  EC42  F019         	call	_move_window	;wreg free
 15247  003C8E  0900               	iorlw	0
 15248  003C90  A4D8               	btfss	status,2,c
 15249  003C92  D002               	goto	l1176
 15250                           
 15251                           ;tff.c: 1083: return FR_RW_ERROR;
 15252  003C94  0E08               	movlw	8
 15253  003C96  0012               	return	
 15254  003C98                     l1176:
 15255                           
 15256                           ;tff.c: 1084: dir = fp->dir_ptr;
 15257  003C98  0100               	movlb	0	; () banked
 15258  003C9A  EE20 F01A          	lfsr	2,26
 15259  003C9E  51A2               	movf	f_sync@fp& (0+255),w,b
 15260  003CA0  26D9               	addwf	fsr2l,f,c
 15261  003CA2  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 15262  003CA4  22DA               	addwfc	fsr2h,f,c
 15263  003CA6  CFDE F0A9          	movff	postinc2,f_sync@dir
 15264  003CAA  CFDD F0AA          	movff	postdec2,f_sync@dir+1
 15265                           
 15266                           ;tff.c: 1085: dir[11] |= 0x20;
 15267  003CAE  EE20 F00B          	lfsr	2,11
 15268  003CB2  51A9               	movf	f_sync@dir& (0+255),w,b
 15269  003CB4  26D9               	addwf	fsr2l,f,c
 15270  003CB6  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 15271  003CB8  22DA               	addwfc	fsr2h,f,c
 15272  003CBA  0E00               	movlw	0
 15273  003CBC  8ADB               	bsf	plusw2,5,c
 15274                           
 15275                           ; BSR set to: 0
 15276                           ;tff.c: 1086: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 15277  003CBE  EE20 F00A          	lfsr	2,10
 15278  003CC2  51A2               	movf	f_sync@fp& (0+255),w,b
 15279  003CC4  26D9               	addwf	fsr2l,f,c
 15280  003CC6  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 15281  003CC8  22DA               	addwfc	fsr2h,f,c
 15282  003CCA  EE10 F01C          	lfsr	1,28
 15283  003CCE  51A9               	movf	f_sync@dir& (0+255),w,b
 15284  003CD0  26E1               	addwf	fsr1l,f,c
 15285  003CD2  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 15286  003CD4  22E2               	addwfc	fsr1h,f,c
 15287  003CD6  CFDE FFE6          	movff	postinc2,postinc1
 15288  003CDA  CFDE FFE6          	movff	postinc2,postinc1
 15289  003CDE  CFDE FFE6          	movff	postinc2,postinc1
 15290  003CE2  CFDE FFE6          	movff	postinc2,postinc1
 15291                           
 15292                           ; BSR set to: 0
 15293                           ;tff.c: 1087: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 15294  003CE6  EE20 F00E          	lfsr	2,14
 15295  003CEA  51A2               	movf	f_sync@fp& (0+255),w,b
 15296  003CEC  26D9               	addwf	fsr2l,f,c
 15297  003CEE  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 15298  003CF0  22DA               	addwfc	fsr2h,f,c
 15299  003CF2  EE10 F01A          	lfsr	1,26
 15300  003CF6  51A9               	movf	f_sync@dir& (0+255),w,b
 15301  003CF8  26E1               	addwf	fsr1l,f,c
 15302  003CFA  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 15303  003CFC  22E2               	addwfc	fsr1h,f,c
 15304  003CFE  CFDE FFE6          	movff	postinc2,postinc1
 15305  003D02  CFDD FFE5          	movff	postdec2,postdec1
 15306                           
 15307                           ; BSR set to: 0
 15308                           ;tff.c: 1091: tim = get_fattime();
 15309  003D06  ECAA  F01E         	call	_get_fattime	;wreg free
 15310  003D0A  C060  F0A4         	movff	?_get_fattime,f_sync@tim
 15311  003D0E  C061  F0A5         	movff	?_get_fattime+1,f_sync@tim+1
 15312  003D12  C062  F0A6         	movff	?_get_fattime+2,f_sync@tim+2
 15313  003D16  C063  F0A7         	movff	?_get_fattime+3,f_sync@tim+3
 15314                           
 15315                           ;tff.c: 1092: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 15316  003D1A  0100               	movlb	0	; () banked
 15317  003D1C  EE20 F016          	lfsr	2,22
 15318  003D20  51A9               	movf	f_sync@dir& (0+255),w,b
 15319  003D22  26D9               	addwf	fsr2l,f,c
 15320  003D24  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 15321  003D26  22DA               	addwfc	fsr2h,f,c
 15322  003D28  C0A4  FFDE         	movff	f_sync@tim,postinc2
 15323  003D2C  C0A5  FFDE         	movff	f_sync@tim+1,postinc2
 15324  003D30  C0A6  FFDE         	movff	f_sync@tim+2,postinc2
 15325  003D34  C0A7  FFDE         	movff	f_sync@tim+3,postinc2
 15326                           
 15327                           ; BSR set to: 0
 15328                           ;tff.c: 1093: fp->flag &= (BYTE)~0x20;
 15329  003D38  EE20 F002          	lfsr	2,2
 15330  003D3C  51A2               	movf	f_sync@fp& (0+255),w,b
 15331  003D3E  26D9               	addwf	fsr2l,f,c
 15332  003D40  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 15333  003D42  22DA               	addwfc	fsr2h,f,c
 15334  003D44  0EDF               	movlw	223
 15335  003D46  16DF               	andwf	indf2,f,c
 15336                           
 15337                           ; BSR set to: 0
 15338                           ;tff.c: 1094: res = sync();
 15339  003D48  EC96  F025         	call	_sync	;wreg free
 15340  003D4C  0100               	movlb	0	; () banked
 15341  003D4E  6FA8               	movwf	f_sync@res& (0+255),b
 15342  003D50                     l1175:
 15343                           
 15344                           ; BSR set to: 0
 15345                           ;tff.c: 1095: }
 15346                           ;tff.c: 1096: }
 15347                           ;tff.c: 1097: return res;
 15348                           
 15349                           ; BSR set to: 0
 15350                           
 15351                           ; BSR set to: 0
 15352  003D50  51A8               	movf	f_sync@res& (0+255),w,b
 15353  003D52  0012               	return	
 15354  003D54                     __end_of_f_sync:
 15355                           	opt stack 0
 15356                           tosu	equ	0xFFF
 15357                           tosh	equ	0xFFE
 15358                           tosl	equ	0xFFD
 15359                           pclath	equ	0xFFA
 15360                           tblptru	equ	0xFF8
 15361                           tblptrh	equ	0xFF7
 15362                           tblptrl	equ	0xFF6
 15363                           tablat	equ	0xFF5
 15364                           prodh	equ	0xFF4
 15365                           prodl	equ	0xFF3
 15366                           intcon	equ	0xFF2
 15367                           intcon2	equ	0xFF1
 15368                           intcon3	equ	0xFF0
 15369                           indf0	equ	0xFEF
 15370                           postinc0	equ	0xFEE
 15371                           fsr0h	equ	0xFEA
 15372                           fsr0l	equ	0xFE9
 15373                           wreg	equ	0xFE8
 15374                           indf1	equ	0xFE7
 15375                           postinc1	equ	0xFE6
 15376                           postdec1	equ	0xFE5
 15377                           fsr1h	equ	0xFE2
 15378                           fsr1l	equ	0xFE1
 15379                           indf2	equ	0xFDF
 15380                           postinc2	equ	0xFDE
 15381                           postdec2	equ	0xFDD
 15382                           plusw2	equ	0xFDB
 15383                           fsr2h	equ	0xFDA
 15384                           fsr2l	equ	0xFD9
 15385                           status	equ	0xFD8
 15386                           
 15387 ;; *************** function _validate *****************
 15388 ;; Defined at:
 15389 ;;		line 766 in file "bibliotecas/tff.c"
 15390 ;; Parameters:    Size  Location     Type
 15391 ;;  fs              2    5[BANK0 ] PTR const struct _FATFS
 15392 ;;		 -> NULL(0), fs(544), 
 15393 ;;  id              2    7[BANK0 ] unsigned short 
 15394 ;; Auto vars:     Size  Location     Type
 15395 ;;		None
 15396 ;; Return value:  Size  Location     Type
 15397 ;;                  1    wreg      enum E155
 15398 ;; Registers used:
 15399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15400 ;; Tracked objects:
 15401 ;;		On entry : 0/0
 15402 ;;		On exit  : 0/0
 15403 ;;		Unchanged: 0/0
 15404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15405 ;;      Params:         0       4       0       0       0       0       0       0       0
 15406 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15407 ;;      Temps:          0       2       0       0       0       0       0       0       0
 15408 ;;      Totals:         0       6       0       0       0       0       0       0       0
 15409 ;;Total ram usage:        6 bytes
 15410 ;; Hardware stack levels used:    1
 15411 ;; Hardware stack levels required when called:    5
 15412 ;; This function calls:
 15413 ;;		_disk_status
 15414 ;; This function is called by:
 15415 ;;		_f_write
 15416 ;;		_f_sync
 15417 ;;		_f_lseek
 15418 ;;		_f_read
 15419 ;;		_f_readdir
 15420 ;; This function uses a non-reentrant model
 15421 ;;
 15422                           
 15423                           	psect	text55
 15424  004D20                     __ptext55:
 15425                           	opt stack 0
 15426  004D20                     _validate:
 15427                           	opt stack 19
 15428                           
 15429                           ;tff.c: 771: if (!fs || !fs->fs_type || fs->id != id)
 15430                           
 15431                           ;incstack = 0
 15432  004D20  0100               	movlb	0	; () banked
 15433  004D22  5165               	movf	validate@fs& (0+255),w,b
 15434  004D24  1166               	iorwf	(validate@fs+1)& (0+255),w,b
 15435  004D26  B4D8               	btfsc	status,2,c
 15436  004D28  D014               	goto	u10840
 15437                           
 15438                           ; BSR set to: 0
 15439  004D2A  EE20 F01C          	lfsr	2,28
 15440  004D2E  5165               	movf	validate@fs& (0+255),w,b
 15441  004D30  26D9               	addwf	fsr2l,f,c
 15442  004D32  5166               	movf	(validate@fs+1)& (0+255),w,b
 15443  004D34  22DA               	addwfc	fsr2h,f,c
 15444  004D36  50DF               	movf	indf2,w,c
 15445  004D38  B4D8               	btfsc	status,2,c
 15446  004D3A  D00B               	goto	u10840
 15447                           
 15448                           ; BSR set to: 0
 15449  004D3C  C065  FFD9         	movff	validate@fs,fsr2l
 15450  004D40  C066  FFDA         	movff	validate@fs+1,fsr2h
 15451  004D44  5167               	movf	validate@id& (0+255),w,b
 15452  004D46  18DE               	xorwf	postinc2,w,c
 15453  004D48  E104               	bnz	l9039
 15454  004D4A  5168               	movf	(validate@id+1)& (0+255),w,b
 15455  004D4C  18DE               	xorwf	postinc2,w,c
 15456  004D4E  B4D8               	btfsc	status,2,c
 15457  004D50  D002               	goto	l1079
 15458  004D52                     u10840:
 15459  004D52                     l9039:
 15460                           
 15461                           ; BSR set to: 0
 15462                           ;tff.c: 772: return FR_INVALID_OBJECT;
 15463  004D52  0E0C               	movlw	12
 15464                           
 15465                           ; BSR set to: 0
 15466  004D54  0012               	return	
 15467  004D56                     l1079:
 15468                           
 15469                           ; BSR set to: 0
 15470                           ;tff.c: 773: if (disk_status(0) & 0x01)
 15471                           
 15472                           ; BSR set to: 0
 15473  004D56  0E00               	movlw	0
 15474  004D58  ECDA  F026         	call	_disk_status
 15475  004D5C  0100               	movlb	0	; () banked
 15476  004D5E  6F69               	movwf	??_validate& (0+255),b
 15477  004D60  A169               	btfss	??_validate& (0+255),0,b
 15478  004D62  D002               	goto	l1083
 15479                           
 15480                           ; BSR set to: 0
 15481                           ;tff.c: 774: return FR_NOT_READY;
 15482  004D64  0E01               	movlw	1
 15483                           
 15484                           ; BSR set to: 0
 15485  004D66  0012               	return	
 15486  004D68                     l1083:
 15487                           
 15488                           ; BSR set to: 0
 15489                           ;tff.c: 776: return FR_OK;
 15490                           
 15491                           ; BSR set to: 0
 15492  004D68  0E00               	movlw	0
 15493  004D6A  0012               	return	
 15494  004D6C                     __end_of_validate:
 15495                           	opt stack 0
 15496                           tosu	equ	0xFFF
 15497                           tosh	equ	0xFFE
 15498                           tosl	equ	0xFFD
 15499                           pclath	equ	0xFFA
 15500                           tblptru	equ	0xFF8
 15501                           tblptrh	equ	0xFF7
 15502                           tblptrl	equ	0xFF6
 15503                           tablat	equ	0xFF5
 15504                           prodh	equ	0xFF4
 15505                           prodl	equ	0xFF3
 15506                           intcon	equ	0xFF2
 15507                           intcon2	equ	0xFF1
 15508                           intcon3	equ	0xFF0
 15509                           indf0	equ	0xFEF
 15510                           postinc0	equ	0xFEE
 15511                           fsr0h	equ	0xFEA
 15512                           fsr0l	equ	0xFE9
 15513                           wreg	equ	0xFE8
 15514                           indf1	equ	0xFE7
 15515                           postinc1	equ	0xFE6
 15516                           postdec1	equ	0xFE5
 15517                           fsr1h	equ	0xFE2
 15518                           fsr1l	equ	0xFE1
 15519                           indf2	equ	0xFDF
 15520                           postinc2	equ	0xFDE
 15521                           postdec2	equ	0xFDD
 15522                           plusw2	equ	0xFDB
 15523                           fsr2h	equ	0xFDA
 15524                           fsr2l	equ	0xFD9
 15525                           status	equ	0xFD8
 15526                           
 15527 ;; *************** function _disk_status *****************
 15528 ;; Defined at:
 15529 ;;		line 27 in file "bibliotecas/diskio.c"
 15530 ;; Parameters:    Size  Location     Type
 15531 ;;  pdrv            1    wreg     unsigned char 
 15532 ;; Auto vars:     Size  Location     Type
 15533 ;;  pdrv            1    3[BANK0 ] unsigned char 
 15534 ;;  result          2    1[BANK0 ] int 
 15535 ;;  stat            1    4[BANK0 ] unsigned char 
 15536 ;; Return value:  Size  Location     Type
 15537 ;;                  1    wreg      unsigned char 
 15538 ;; Registers used:
 15539 ;;		wreg, status,2, status,0, cstack
 15540 ;; Tracked objects:
 15541 ;;		On entry : 0/0
 15542 ;;		On exit  : 0/0
 15543 ;;		Unchanged: 0/0
 15544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15545 ;;      Params:         0       0       0       0       0       0       0       0       0
 15546 ;;      Locals:         0       4       0       0       0       0       0       0       0
 15547 ;;      Temps:          0       1       0       0       0       0       0       0       0
 15548 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15549 ;;Total ram usage:        5 bytes
 15550 ;; Hardware stack levels used:    1
 15551 ;; Hardware stack levels required when called:    4
 15552 ;; This function calls:
 15553 ;;		_sdc_disk_status
 15554 ;; This function is called by:
 15555 ;;		_auto_mount
 15556 ;;		_validate
 15557 ;; This function uses a non-reentrant model
 15558 ;;
 15559                           
 15560                           	psect	text56
 15561  004DB4                     __ptext56:
 15562                           	opt stack 0
 15563  004DB4                     _disk_status:
 15564                           	opt stack 19
 15565                           
 15566                           ; BSR set to: 0
 15567                           ;incstack = 0
 15568                           ;disk_status@pdrv stored from wreg
 15569  004DB4  0100               	movlb	0	; () banked
 15570  004DB6  6F63               	movwf	disk_status@pdrv& (0+255),b
 15571                           
 15572                           ;diskio.c: 31: DSTATUS stat;
 15573                           ;diskio.c: 32: int result;
 15574                           ;diskio.c: 34: switch (pdrv) {
 15575  004DB8  D014               	goto	l361
 15576  004DBA                     
 15577                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 15578  004DBA  0100               	movlb	0	; () banked
 15579  004DBC  5163               	movf	disk_status@pdrv& (0+255),w,b
 15580  004DBE  EC3A  F029         	call	_sdc_disk_status
 15581  004DC2  0100               	movlb	0	; () banked
 15582  004DC4  6F64               	movwf	disk_status@stat& (0+255),b
 15583                           
 15584                           ; BSR set to: 0
 15585                           ;diskio.c: 39: return stat;
 15586  004DC6  5164               	movf	disk_status@stat& (0+255),w,b
 15587                           
 15588                           ; BSR set to: 0
 15589  004DC8  0012               	return	
 15590  004DCA                     
 15591                           ; BSR set to: 0
 15592                           ;diskio.c: 42: result = sdc_disk_status(pdrv);
 15593                           
 15594                           ; BSR set to: 0
 15595  004DCA  5163               	movf	disk_status@pdrv& (0+255),w,b
 15596  004DCC  EC3A  F029         	call	_sdc_disk_status
 15597  004DD0  0100               	movlb	0	; () banked
 15598  004DD2  6F60               	movwf	??_disk_status& (0+255),b
 15599  004DD4  5160               	movf	??_disk_status& (0+255),w,b
 15600  004DD6  6F61               	movwf	disk_status@result& (0+255),b
 15601  004DD8  6B62               	clrf	(disk_status@result+1)& (0+255),b
 15602                           
 15603                           ; BSR set to: 0
 15604                           ;diskio.c: 44: return stat;
 15605  004DDA  5164               	movf	disk_status@stat& (0+255),w,b
 15606                           
 15607                           ; BSR set to: 0
 15608  004DDC  0012               	return	
 15609  004DDE                     
 15610                           ; BSR set to: 0
 15611                           ;diskio.c: 48: return stat;
 15612                           
 15613                           ; BSR set to: 0
 15614  004DDE  5164               	movf	disk_status@stat& (0+255),w,b
 15615                           
 15616                           ; BSR set to: 0
 15617  004DE0  0012               	return	
 15618  004DE2                     l361:
 15619                           
 15620                           ; BSR set to: 0
 15621  004DE2  0100               	movlb	0	; () banked
 15622  004DE4  5163               	movf	disk_status@pdrv& (0+255),w,b
 15623                           
 15624                           ; Switch size 1, requested type "space"
 15625                           ; Number of cases is 3, Range of values is 0 to 2
 15626                           ; switch strategies available:
 15627                           ; Name         Instructions Cycles
 15628                           ; simple_byte           10     6 (average)
 15629                           ;	Chosen strategy is simple_byte
 15630  004DE6  0A00               	xorlw	0	; case 0
 15631  004DE8  B4D8               	btfsc	status,2,c
 15632  004DEA  D7E7               	goto	l362
 15633  004DEC  0A01               	xorlw	1	; case 1
 15634  004DEE  B4D8               	btfsc	status,2,c
 15635  004DF0  D7EC               	goto	l364
 15636  004DF2  0A03               	xorlw	3	; case 2
 15637  004DF4  B4D8               	btfsc	status,2,c
 15638  004DF6  D7F3               	goto	l365
 15639                           
 15640                           ; BSR set to: 0
 15641                           ;diskio.c: 50: return 0x01;
 15642                           
 15643                           ; BSR set to: 0
 15644  004DF8  0E01               	movlw	1
 15645  004DFA  0012               	return	
 15646  004DFC                     __end_of_disk_status:
 15647                           	opt stack 0
 15648                           tosu	equ	0xFFF
 15649                           tosh	equ	0xFFE
 15650                           tosl	equ	0xFFD
 15651                           pclath	equ	0xFFA
 15652                           tblptru	equ	0xFF8
 15653                           tblptrh	equ	0xFF7
 15654                           tblptrl	equ	0xFF6
 15655                           tablat	equ	0xFF5
 15656                           prodh	equ	0xFF4
 15657                           prodl	equ	0xFF3
 15658                           intcon	equ	0xFF2
 15659                           intcon2	equ	0xFF1
 15660                           intcon3	equ	0xFF0
 15661                           indf0	equ	0xFEF
 15662                           postinc0	equ	0xFEE
 15663                           fsr0h	equ	0xFEA
 15664                           fsr0l	equ	0xFE9
 15665                           wreg	equ	0xFE8
 15666                           indf1	equ	0xFE7
 15667                           postinc1	equ	0xFE6
 15668                           postdec1	equ	0xFE5
 15669                           fsr1h	equ	0xFE2
 15670                           fsr1l	equ	0xFE1
 15671                           indf2	equ	0xFDF
 15672                           postinc2	equ	0xFDE
 15673                           postdec2	equ	0xFDD
 15674                           plusw2	equ	0xFDB
 15675                           fsr2h	equ	0xFDA
 15676                           fsr2l	equ	0xFD9
 15677                           status	equ	0xFD8
 15678                           
 15679 ;; *************** function _sdc_disk_status *****************
 15680 ;; Defined at:
 15681 ;;		line 588 in file "bibliotecas/diskio.c"
 15682 ;; Parameters:    Size  Location     Type
 15683 ;;  pdrv            1    wreg     unsigned char 
 15684 ;; Auto vars:     Size  Location     Type
 15685 ;;  pdrv            1   33[COMRAM] unsigned char 
 15686 ;;  stat            1   32[COMRAM] unsigned char 
 15687 ;;  cont            1    0        unsigned char 
 15688 ;;  buff            1    0        unsigned char 
 15689 ;; Return value:  Size  Location     Type
 15690 ;;                  1    wreg      unsigned char 
 15691 ;; Registers used:
 15692 ;;		wreg, status,2
 15693 ;; Tracked objects:
 15694 ;;		On entry : 0/0
 15695 ;;		On exit  : 0/0
 15696 ;;		Unchanged: 0/0
 15697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15698 ;;      Params:         0       0       0       0       0       0       0       0       0
 15699 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15700 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15701 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15702 ;;Total ram usage:        2 bytes
 15703 ;; Hardware stack levels used:    1
 15704 ;; Hardware stack levels required when called:    3
 15705 ;; This function calls:
 15706 ;;		Nothing
 15707 ;; This function is called by:
 15708 ;;		_disk_status
 15709 ;; This function uses a non-reentrant model
 15710 ;;
 15711                           
 15712                           	psect	text57
 15713  005274                     __ptext57:
 15714                           	opt stack 0
 15715  005274                     _sdc_disk_status:
 15716                           	opt stack 19
 15717                           
 15718                           ; BSR set to: 0
 15719                           ;incstack = 0
 15720                           ;sdc_disk_status@pdrv stored from wreg
 15721  005274  6E22               	movwf	sdc_disk_status@pdrv,c
 15722                           
 15723                           ;diskio.c: 590: DSTATUS stat = 0;
 15724  005276  0E00               	movlw	0
 15725  005278  6E21               	movwf	sdc_disk_status@stat,c
 15726                           
 15727                           ;diskio.c: 591: unsigned char buff, cont;
 15728                           ;diskio.c: 593: if (pdrv != 0) return 0x01;
 15729  00527A  5022               	movf	sdc_disk_status@pdrv,w,c
 15730  00527C  B4D8               	btfsc	status,2,c
 15731  00527E  D002               	goto	l487
 15732  005280  0E01               	movlw	1
 15733  005282  0012               	return	
 15734  005284                     l487:
 15735                           
 15736                           ;diskio.c: 595: return FR_OK;
 15737  005284  0E00               	movlw	0
 15738  005286  0012               	return	
 15739  005288                     __end_of_sdc_disk_status:
 15740                           	opt stack 0
 15741                           tosu	equ	0xFFF
 15742                           tosh	equ	0xFFE
 15743                           tosl	equ	0xFFD
 15744                           pclath	equ	0xFFA
 15745                           tblptru	equ	0xFF8
 15746                           tblptrh	equ	0xFF7
 15747                           tblptrl	equ	0xFF6
 15748                           tablat	equ	0xFF5
 15749                           prodh	equ	0xFF4
 15750                           prodl	equ	0xFF3
 15751                           intcon	equ	0xFF2
 15752                           intcon2	equ	0xFF1
 15753                           intcon3	equ	0xFF0
 15754                           indf0	equ	0xFEF
 15755                           postinc0	equ	0xFEE
 15756                           fsr0h	equ	0xFEA
 15757                           fsr0l	equ	0xFE9
 15758                           wreg	equ	0xFE8
 15759                           indf1	equ	0xFE7
 15760                           postinc1	equ	0xFE6
 15761                           postdec1	equ	0xFE5
 15762                           fsr1h	equ	0xFE2
 15763                           fsr1l	equ	0xFE1
 15764                           indf2	equ	0xFDF
 15765                           postinc2	equ	0xFDE
 15766                           postdec2	equ	0xFDD
 15767                           plusw2	equ	0xFDB
 15768                           fsr2h	equ	0xFDA
 15769                           fsr2l	equ	0xFD9
 15770                           status	equ	0xFD8
 15771                           
 15772 ;; *************** function _sync *****************
 15773 ;; Defined at:
 15774 ;;		line 118 in file "bibliotecas/tff.c"
 15775 ;; Parameters:    Size  Location     Type
 15776 ;;		None
 15777 ;; Auto vars:     Size  Location     Type
 15778 ;;  fs              2   64[BANK0 ] PTR struct _FATFS
 15779 ;;		 -> NULL(0), fs(544), 
 15780 ;; Return value:  Size  Location     Type
 15781 ;;                  1    wreg      enum E155
 15782 ;; Registers used:
 15783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15784 ;; Tracked objects:
 15785 ;;		On entry : 0/0
 15786 ;;		On exit  : 0/0
 15787 ;;		Unchanged: 0/0
 15788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15789 ;;      Params:         0       0       0       0       0       0       0       0       0
 15790 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15791 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15792 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15793 ;;Total ram usage:        2 bytes
 15794 ;; Hardware stack levels used:    1
 15795 ;; Hardware stack levels required when called:    9
 15796 ;; This function calls:
 15797 ;;		_disk_ioctl
 15798 ;;		_move_window
 15799 ;; This function is called by:
 15800 ;;		_f_sync
 15801 ;; This function uses a non-reentrant model
 15802 ;;
 15803                           
 15804                           	psect	text58
 15805  004B2C                     __ptext58:
 15806                           	opt stack 0
 15807  004B2C                     _sync:
 15808                           	opt stack 17
 15809                           
 15810                           ;tff.c: 120: FATFS *fs = FatFs;
 15811                           
 15812                           ;incstack = 0
 15813  004B2C  C0F2  F0A0         	movff	_FatFs,sync@fs
 15814  004B30  C0F3  F0A1         	movff	_FatFs+1,sync@fs+1
 15815                           
 15816                           ;tff.c: 123: fs->winflag = 1;
 15817  004B34  0100               	movlb	0	; () banked
 15818  004B36  EE20 F01F          	lfsr	2,31
 15819  004B3A  51A0               	movf	sync@fs& (0+255),w,b
 15820  004B3C  26D9               	addwf	fsr2l,f,c
 15821  004B3E  51A1               	movf	(sync@fs+1)& (0+255),w,b
 15822  004B40  22DA               	addwfc	fsr2h,f,c
 15823  004B42  0E01               	movlw	1
 15824  004B44  6EDF               	movwf	indf2,c
 15825                           
 15826                           ; BSR set to: 0
 15827                           ;tff.c: 124: if (!move_window(0)) return FR_RW_ERROR;
 15828  004B46  0E00               	movlw	0
 15829  004B48  6F8B               	movwf	move_window@sector& (0+255),b
 15830  004B4A  0E00               	movlw	0
 15831  004B4C  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15832  004B4E  0E00               	movlw	0
 15833  004B50  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15834  004B52  0E00               	movlw	0
 15835  004B54  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15836  004B56  EC42  F019         	call	_move_window	;wreg free
 15837  004B5A  0900               	iorlw	0
 15838  004B5C  A4D8               	btfss	status,2,c
 15839  004B5E  D002               	goto	l858
 15840  004B60  0E08               	movlw	8
 15841  004B62  0012               	return	
 15842  004B64                     l858:
 15843                           
 15844                           ;tff.c: 140: if (disk_ioctl(0, 0, (0)) != RES_OK)
 15845  004B64  0E00               	movlw	0
 15846  004B66  0100               	movlb	0	; () banked
 15847  004B68  6F60               	movwf	disk_ioctl@cmd& (0+255),b
 15848  004B6A  0E00               	movlw	0
 15849  004B6C  6F61               	movwf	disk_ioctl@buff& (0+255),b
 15850  004B6E  0E00               	movlw	0
 15851  004B70  6F62               	movwf	(disk_ioctl@buff+1)& (0+255),b
 15852  004B72  0E00               	movlw	0
 15853  004B74  ECCC  F028         	call	_disk_ioctl
 15854  004B78  0900               	iorlw	0
 15855  004B7A  B4D8               	btfsc	status,2,c
 15856  004B7C  D002               	goto	l860
 15857                           
 15858                           ;tff.c: 141: return FR_RW_ERROR;
 15859  004B7E  0E08               	movlw	8
 15860  004B80  0012               	return	
 15861  004B82                     l860:
 15862                           
 15863                           ;tff.c: 142: return FR_OK;
 15864  004B82  0E00               	movlw	0
 15865  004B84  0012               	return	
 15866  004B86                     __end_of_sync:
 15867                           	opt stack 0
 15868                           tosu	equ	0xFFF
 15869                           tosh	equ	0xFFE
 15870                           tosl	equ	0xFFD
 15871                           pclath	equ	0xFFA
 15872                           tblptru	equ	0xFF8
 15873                           tblptrh	equ	0xFF7
 15874                           tblptrl	equ	0xFF6
 15875                           tablat	equ	0xFF5
 15876                           prodh	equ	0xFF4
 15877                           prodl	equ	0xFF3
 15878                           intcon	equ	0xFF2
 15879                           intcon2	equ	0xFF1
 15880                           intcon3	equ	0xFF0
 15881                           indf0	equ	0xFEF
 15882                           postinc0	equ	0xFEE
 15883                           fsr0h	equ	0xFEA
 15884                           fsr0l	equ	0xFE9
 15885                           wreg	equ	0xFE8
 15886                           indf1	equ	0xFE7
 15887                           postinc1	equ	0xFE6
 15888                           postdec1	equ	0xFE5
 15889                           fsr1h	equ	0xFE2
 15890                           fsr1l	equ	0xFE1
 15891                           indf2	equ	0xFDF
 15892                           postinc2	equ	0xFDE
 15893                           postdec2	equ	0xFDD
 15894                           plusw2	equ	0xFDB
 15895                           fsr2h	equ	0xFDA
 15896                           fsr2l	equ	0xFD9
 15897                           status	equ	0xFD8
 15898                           
 15899 ;; *************** function _move_window *****************
 15900 ;; Defined at:
 15901 ;;		line 76 in file "bibliotecas/tff.c"
 15902 ;; Parameters:    Size  Location     Type
 15903 ;;  sector          4   43[BANK0 ] unsigned long 
 15904 ;; Auto vars:     Size  Location     Type
 15905 ;;  n               1   57[BANK0 ] unsigned char 
 15906 ;;  wsect           4   58[BANK0 ] unsigned long 
 15907 ;;  fs              2   62[BANK0 ] PTR struct _FATFS
 15908 ;;		 -> NULL(0), fs(544), 
 15909 ;; Return value:  Size  Location     Type
 15910 ;;                  1    wreg      enum E105
 15911 ;; Registers used:
 15912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15913 ;; Tracked objects:
 15914 ;;		On entry : 0/0
 15915 ;;		On exit  : 0/0
 15916 ;;		Unchanged: 0/0
 15917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15918 ;;      Params:         0       4       0       0       0       0       0       0       0
 15919 ;;      Locals:         0       7       0       0       0       0       0       0       0
 15920 ;;      Temps:          0      10       0       0       0       0       0       0       0
 15921 ;;      Totals:         0      21       0       0       0       0       0       0       0
 15922 ;;Total ram usage:       21 bytes
 15923 ;; Hardware stack levels used:    1
 15924 ;; Hardware stack levels required when called:    8
 15925 ;; This function calls:
 15926 ;;		_disk_read
 15927 ;;		_disk_write
 15928 ;; This function is called by:
 15929 ;;		_sync
 15930 ;;		_get_cluster
 15931 ;;		_put_cluster
 15932 ;;		_trace_path
 15933 ;;		_reserve_direntry
 15934 ;;		_f_open
 15935 ;;		_f_write
 15936 ;;		_f_sync
 15937 ;;		_f_read
 15938 ;;		_f_readdir
 15939 ;; This function uses a non-reentrant model
 15940 ;;
 15941                           
 15942                           	psect	text59
 15943  003284                     __ptext59:
 15944                           	opt stack 0
 15945  003284                     _move_window:
 15946                           	opt stack 16
 15947                           
 15948                           ;tff.c: 80: DWORD wsect;
 15949                           ;tff.c: 81: FATFS *fs = FatFs;
 15950                           
 15951                           ;incstack = 0
 15952  003284  C0F2  F09E         	movff	_FatFs,move_window@fs
 15953  003288  C0F3  F09F         	movff	_FatFs+1,move_window@fs+1
 15954                           
 15955                           ;tff.c: 84: wsect = fs->winsect;
 15956  00328C  0100               	movlb	0	; () banked
 15957  00328E  EE20 F004          	lfsr	2,4
 15958  003292  519E               	movf	move_window@fs& (0+255),w,b
 15959  003294  26D9               	addwf	fsr2l,f,c
 15960  003296  519F               	movf	(move_window@fs+1)& (0+255),w,b
 15961  003298  22DA               	addwfc	fsr2h,f,c
 15962  00329A  CFDE F09A          	movff	postinc2,move_window@wsect
 15963  00329E  CFDE F09B          	movff	postinc2,move_window@wsect+1
 15964  0032A2  CFDE F09C          	movff	postinc2,move_window@wsect+2
 15965  0032A6  CFDE F09D          	movff	postinc2,move_window@wsect+3
 15966                           
 15967                           ; BSR set to: 0
 15968                           ;tff.c: 85: if (wsect != sector) {
 15969  0032AA  518B               	movf	move_window@sector& (0+255),w,b
 15970  0032AC  199A               	xorwf	move_window@wsect& (0+255),w,b
 15971  0032AE  E10A               	bnz	u10320
 15972  0032B0  518C               	movf	(move_window@sector+1)& (0+255),w,b
 15973  0032B2  199B               	xorwf	(move_window@wsect+1)& (0+255),w,b
 15974  0032B4  E107               	bnz	u10320
 15975  0032B6  518D               	movf	(move_window@sector+2)& (0+255),w,b
 15976  0032B8  199C               	xorwf	(move_window@wsect+2)& (0+255),w,b
 15977  0032BA  E104               	bnz	u10320
 15978  0032BC  518E               	movf	(move_window@sector+3)& (0+255),w,b
 15979  0032BE  199D               	xorwf	(move_window@wsect+3)& (0+255),w,b
 15980  0032C0  B4D8               	btfsc	status,2,c
 15981  0032C2  D0B9               	goto	l854
 15982  0032C4                     u10320:
 15983                           
 15984                           ; BSR set to: 0
 15985                           ;tff.c: 87: BYTE n;
 15986                           ;tff.c: 88: if (fs->winflag) {
 15987  0032C4  EE20 F01F          	lfsr	2,31
 15988  0032C8  519E               	movf	move_window@fs& (0+255),w,b
 15989  0032CA  26D9               	addwf	fsr2l,f,c
 15990  0032CC  519F               	movf	(move_window@fs+1)& (0+255),w,b
 15991  0032CE  22DA               	addwfc	fsr2h,f,c
 15992  0032D0  50DF               	movf	indf2,w,c
 15993  0032D2  B4D8               	btfsc	status,2,c
 15994  0032D4  D083               	goto	u10370
 15995                           
 15996                           ; BSR set to: 0
 15997                           ;tff.c: 89: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 15998  0032D6  0E20               	movlw	32
 15999  0032D8  259E               	addwf	move_window@fs& (0+255),w,b
 16000  0032DA  6F7F               	movwf	disk_write@buff& (0+255),b
 16001  0032DC  0E00               	movlw	0
 16002  0032DE  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 16003  0032E0  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 16004  0032E2  C09A  F081         	movff	move_window@wsect,disk_write@sector
 16005  0032E6  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 16006  0032EA  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 16007  0032EE  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 16008  0032F2  0E01               	movlw	1
 16009  0032F4  6F85               	movwf	disk_write@count& (0+255),b
 16010  0032F6  0E00               	movlw	0
 16011  0032F8  EC24  F023         	call	_disk_write
 16012  0032FC  0900               	iorlw	0
 16013  0032FE  B4D8               	btfsc	status,2,c
 16014  003300  D002               	goto	l849
 16015                           
 16016                           ;tff.c: 90: return FALSE;
 16017  003302  0E00               	movlw	0
 16018  003304  0012               	return	
 16019  003306                     l849:
 16020                           
 16021                           ;tff.c: 91: fs->winflag = 0;
 16022  003306  0100               	movlb	0	; () banked
 16023  003308  EE20 F01F          	lfsr	2,31
 16024  00330C  519E               	movf	move_window@fs& (0+255),w,b
 16025  00330E  26D9               	addwf	fsr2l,f,c
 16026  003310  519F               	movf	(move_window@fs+1)& (0+255),w,b
 16027  003312  22DA               	addwfc	fsr2h,f,c
 16028  003314  0E00               	movlw	0
 16029  003316  6EDF               	movwf	indf2,c
 16030                           
 16031                           ;tff.c: 92: if (wsect < (fs->fatbase + fs->sects_fat)) {
 16032  003318  EE20 F008          	lfsr	2,8
 16033  00331C  519E               	movf	move_window@fs& (0+255),w,b
 16034  00331E  26D9               	addwf	fsr2l,f,c
 16035  003320  519F               	movf	(move_window@fs+1)& (0+255),w,b
 16036  003322  22DA               	addwfc	fsr2h,f,c
 16037  003324  CFDE F08F          	movff	postinc2,??_move_window
 16038  003328  CFDE F090          	movff	postinc2,??_move_window+1
 16039  00332C  CFDE F091          	movff	postinc2,??_move_window+2
 16040  003330  CFDE F092          	movff	postinc2,??_move_window+3
 16041  003334  EE20 F014          	lfsr	2,20
 16042  003338  519E               	movf	move_window@fs& (0+255),w,b
 16043  00333A  26D9               	addwf	fsr2l,f,c
 16044  00333C  519F               	movf	(move_window@fs+1)& (0+255),w,b
 16045  00333E  22DA               	addwfc	fsr2h,f,c
 16046  003340  CFDE F093          	movff	postinc2,??_move_window+4
 16047  003344  CFDD F094          	movff	postdec2,??_move_window+5
 16048  003348  5193               	movf	(??_move_window+4)& (0+255),w,b
 16049  00334A  258F               	addwf	??_move_window& (0+255),w,b
 16050  00334C  6F95               	movwf	(??_move_window+6)& (0+255),b
 16051  00334E  5194               	movf	(??_move_window+5)& (0+255),w,b
 16052  003350  2190               	addwfc	(??_move_window+1)& (0+255),w,b
 16053  003352  6F96               	movwf	(??_move_window+7)& (0+255),b
 16054  003354  0E00               	movlw	0
 16055  003356  2191               	addwfc	(??_move_window+2)& (0+255),w,b
 16056  003358  6F97               	movwf	(??_move_window+8)& (0+255),b
 16057  00335A  0E00               	movlw	0
 16058  00335C  2192               	addwfc	(??_move_window+3)& (0+255),w,b
 16059  00335E  6F98               	movwf	(??_move_window+9)& (0+255),b
 16060  003360  5195               	movf	(??_move_window+6)& (0+255),w,b
 16061  003362  5D9A               	subwf	move_window@wsect& (0+255),w,b
 16062  003364  5196               	movf	(??_move_window+7)& (0+255),w,b
 16063  003366  599B               	subwfb	(move_window@wsect+1)& (0+255),w,b
 16064  003368  5197               	movf	(??_move_window+8)& (0+255),w,b
 16065  00336A  599C               	subwfb	(move_window@wsect+2)& (0+255),w,b
 16066  00336C  5198               	movf	(??_move_window+9)& (0+255),w,b
 16067  00336E  599D               	subwfb	(move_window@wsect+3)& (0+255),w,b
 16068  003370  B0D8               	btfsc	status,0,c
 16069  003372  D034               	goto	u10370
 16070                           
 16071                           ; BSR set to: 0
 16072                           ;tff.c: 93: for (n = fs->n_fats; n >= 2; n--) {
 16073  003374  EE20 F01E          	lfsr	2,30
 16074  003378  519E               	movf	move_window@fs& (0+255),w,b
 16075  00337A  26D9               	addwf	fsr2l,f,c
 16076  00337C  519F               	movf	(move_window@fs+1)& (0+255),w,b
 16077  00337E  22DA               	addwfc	fsr2h,f,c
 16078  003380  50DF               	movf	indf2,w,c
 16079  003382  6F99               	movwf	move_window@n& (0+255),b
 16080  003384                     l8701:
 16081                           
 16082                           ; BSR set to: 0
 16083  003384  0E02               	movlw	2
 16084  003386  6199               	cpfslt	move_window@n& (0+255),b
 16085  003388  D001               	goto	l852
 16086  00338A  D028               	goto	u10370
 16087  00338C                     l852:
 16088                           
 16089                           ; BSR set to: 0
 16090                           ;tff.c: 94: wsect += fs->sects_fat;
 16091                           
 16092                           ; BSR set to: 0
 16093  00338C  EE20 F014          	lfsr	2,20
 16094  003390  519E               	movf	move_window@fs& (0+255),w,b
 16095  003392  26D9               	addwf	fsr2l,f,c
 16096  003394  519F               	movf	(move_window@fs+1)& (0+255),w,b
 16097  003396  22DA               	addwfc	fsr2h,f,c
 16098  003398  CFDE F08F          	movff	postinc2,??_move_window
 16099  00339C  CFDD F090          	movff	postdec2,??_move_window+1
 16100  0033A0  518F               	movf	??_move_window& (0+255),w,b
 16101  0033A2  279A               	addwf	move_window@wsect& (0+255),f,b
 16102  0033A4  5190               	movf	(??_move_window+1)& (0+255),w,b
 16103  0033A6  239B               	addwfc	(move_window@wsect+1)& (0+255),f,b
 16104  0033A8  0E00               	movlw	0
 16105  0033AA  239C               	addwfc	(move_window@wsect+2)& (0+255),f,b
 16106  0033AC  0E00               	movlw	0
 16107  0033AE  239D               	addwfc	(move_window@wsect+3)& (0+255),f,b
 16108                           
 16109                           ; BSR set to: 0
 16110                           ;tff.c: 95: disk_write(0, fs->win, wsect, 1);
 16111  0033B0  0E20               	movlw	32
 16112  0033B2  259E               	addwf	move_window@fs& (0+255),w,b
 16113  0033B4  6F7F               	movwf	disk_write@buff& (0+255),b
 16114  0033B6  0E00               	movlw	0
 16115  0033B8  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 16116  0033BA  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 16117  0033BC  C09A  F081         	movff	move_window@wsect,disk_write@sector
 16118  0033C0  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 16119  0033C4  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 16120  0033C8  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 16121  0033CC  0E01               	movlw	1
 16122  0033CE  6F85               	movwf	disk_write@count& (0+255),b
 16123  0033D0  0E00               	movlw	0
 16124  0033D2  EC24  F023         	call	_disk_write
 16125  0033D6  0100               	movlb	0	; () banked
 16126  0033D8  0799               	decf	move_window@n& (0+255),f,b
 16127  0033DA  D7D4               	goto	l8701
 16128  0033DC                     u10370:
 16129                           
 16130                           ; BSR set to: 0
 16131                           ;tff.c: 96: }
 16132                           ;tff.c: 97: }
 16133                           ;tff.c: 98: }
 16134                           ;tff.c: 100: if (sector) {
 16135                           
 16136                           ; BSR set to: 0
 16137                           
 16138                           ; BSR set to: 0
 16139                           
 16140                           ; BSR set to: 0
 16141  0033DC  518B               	movf	move_window@sector& (0+255),w,b
 16142  0033DE  118C               	iorwf	(move_window@sector+1)& (0+255),w,b
 16143  0033E0  118D               	iorwf	(move_window@sector+2)& (0+255),w,b
 16144  0033E2  118E               	iorwf	(move_window@sector+3)& (0+255),w,b
 16145  0033E4  B4D8               	btfsc	status,2,c
 16146  0033E6  D027               	goto	l854
 16147                           
 16148                           ; BSR set to: 0
 16149                           ;tff.c: 101: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 16150  0033E8  0E20               	movlw	32
 16151  0033EA  259E               	addwf	move_window@fs& (0+255),w,b
 16152  0033EC  6F7F               	movwf	disk_read@buff& (0+255),b
 16153  0033EE  0E00               	movlw	0
 16154  0033F0  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 16155  0033F2  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 16156  0033F4  C08B  F081         	movff	move_window@sector,disk_read@sector
 16157  0033F8  C08C  F082         	movff	move_window@sector+1,disk_read@sector+1
 16158  0033FC  C08D  F083         	movff	move_window@sector+2,disk_read@sector+2
 16159  003400  C08E  F084         	movff	move_window@sector+3,disk_read@sector+3
 16160  003404  0E01               	movlw	1
 16161  003406  6F85               	movwf	disk_read@count& (0+255),b
 16162  003408  0E00               	movlw	0
 16163  00340A  EC96  F022         	call	_disk_read
 16164  00340E  0900               	iorlw	0
 16165  003410  B4D8               	btfsc	status,2,c
 16166  003412  D002               	goto	l855
 16167                           
 16168                           ;tff.c: 102: return FALSE;
 16169  003414  0E00               	movlw	0
 16170  003416  0012               	return	
 16171  003418                     l855:
 16172                           
 16173                           ;tff.c: 103: fs->winsect = sector;
 16174  003418  0100               	movlb	0	; () banked
 16175  00341A  EE20 F004          	lfsr	2,4
 16176  00341E  519E               	movf	move_window@fs& (0+255),w,b
 16177  003420  26D9               	addwf	fsr2l,f,c
 16178  003422  519F               	movf	(move_window@fs+1)& (0+255),w,b
 16179  003424  22DA               	addwfc	fsr2h,f,c
 16180  003426  C08B  FFDE         	movff	move_window@sector,postinc2
 16181  00342A  C08C  FFDE         	movff	move_window@sector+1,postinc2
 16182  00342E  C08D  FFDE         	movff	move_window@sector+2,postinc2
 16183  003432  C08E  FFDE         	movff	move_window@sector+3,postinc2
 16184  003436                     l854:
 16185                           
 16186                           ; BSR set to: 0
 16187                           ;tff.c: 104: }
 16188                           ;tff.c: 105: }
 16189                           ;tff.c: 106: return TRUE;
 16190                           
 16191                           ; BSR set to: 0
 16192                           
 16193                           ; BSR set to: 0
 16194  003436  0E01               	movlw	1
 16195  003438  0012               	return	
 16196  00343A                     __end_of_move_window:
 16197                           	opt stack 0
 16198                           tosu	equ	0xFFF
 16199                           tosh	equ	0xFFE
 16200                           tosl	equ	0xFFD
 16201                           pclath	equ	0xFFA
 16202                           tblptru	equ	0xFF8
 16203                           tblptrh	equ	0xFF7
 16204                           tblptrl	equ	0xFF6
 16205                           tablat	equ	0xFF5
 16206                           prodh	equ	0xFF4
 16207                           prodl	equ	0xFF3
 16208                           intcon	equ	0xFF2
 16209                           intcon2	equ	0xFF1
 16210                           intcon3	equ	0xFF0
 16211                           indf0	equ	0xFEF
 16212                           postinc0	equ	0xFEE
 16213                           fsr0h	equ	0xFEA
 16214                           fsr0l	equ	0xFE9
 16215                           wreg	equ	0xFE8
 16216                           indf1	equ	0xFE7
 16217                           postinc1	equ	0xFE6
 16218                           postdec1	equ	0xFE5
 16219                           fsr1h	equ	0xFE2
 16220                           fsr1l	equ	0xFE1
 16221                           indf2	equ	0xFDF
 16222                           postinc2	equ	0xFDE
 16223                           postdec2	equ	0xFDD
 16224                           plusw2	equ	0xFDB
 16225                           fsr2h	equ	0xFDA
 16226                           fsr2l	equ	0xFD9
 16227                           status	equ	0xFD8
 16228                           
 16229 ;; *************** function _disk_write *****************
 16230 ;; Defined at:
 16231 ;;		line 150 in file "bibliotecas/diskio.c"
 16232 ;; Parameters:    Size  Location     Type
 16233 ;;  pdrv            1    wreg     unsigned char 
 16234 ;;  buff            2   31[BANK0 ] PTR const unsigned char 
 16235 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 16236 ;;  sector          4   33[BANK0 ] unsigned long 
 16237 ;;  count           1   37[BANK0 ] unsigned char 
 16238 ;; Auto vars:     Size  Location     Type
 16239 ;;  pdrv            1   39[BANK0 ] unsigned char 
 16240 ;;  result          2   40[BANK0 ] int 
 16241 ;;  res             1   42[BANK0 ] enum E25
 16242 ;; Return value:  Size  Location     Type
 16243 ;;                  1    wreg      enum E25
 16244 ;; Registers used:
 16245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16246 ;; Tracked objects:
 16247 ;;		On entry : 0/0
 16248 ;;		On exit  : 0/0
 16249 ;;		Unchanged: 0/0
 16250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16251 ;;      Params:         0       7       0       0       0       0       0       0       0
 16252 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16253 ;;      Temps:          0       1       0       0       0       0       0       0       0
 16254 ;;      Totals:         0      12       0       0       0       0       0       0       0
 16255 ;;Total ram usage:       12 bytes
 16256 ;; Hardware stack levels used:    1
 16257 ;; Hardware stack levels required when called:    7
 16258 ;; This function calls:
 16259 ;;		_sdc_disk_write
 16260 ;; This function is called by:
 16261 ;;		_move_window
 16262 ;;		_reserve_direntry
 16263 ;;		_f_write
 16264 ;; This function uses a non-reentrant model
 16265 ;;
 16266                           
 16267                           	psect	text60
 16268  004648                     __ptext60:
 16269                           	opt stack 0
 16270  004648                     _disk_write:
 16271                           	opt stack 16
 16272                           
 16273                           ;incstack = 0
 16274                           ;disk_write@pdrv stored from wreg
 16275  004648  0100               	movlb	0	; () banked
 16276  00464A  6F87               	movwf	disk_write@pdrv& (0+255),b
 16277                           
 16278                           ;diskio.c: 157: DRESULT res;
 16279                           ;diskio.c: 158: int result;
 16280                           ;diskio.c: 160: switch (pdrv) {
 16281  00464C  D034               	goto	l385
 16282  00464E                     
 16283                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 16284  00464E  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 16285  004652  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 16286  004656  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 16287  00465A  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 16288  00465E  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 16289  004662  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 16290  004666  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 16291  00466A  EC7D  F017         	call	_sdc_disk_write	;wreg free
 16292  00466E  0100               	movlb	0	; () banked
 16293  004670  6F86               	movwf	??_disk_write& (0+255),b
 16294  004672  5186               	movf	??_disk_write& (0+255),w,b
 16295  004674  6F88               	movwf	disk_write@result& (0+255),b
 16296  004676  6B89               	clrf	(disk_write@result+1)& (0+255),b
 16297                           
 16298                           ; BSR set to: 0
 16299                           ;diskio.c: 165: res = result;
 16300  004678  C088  F08A         	movff	disk_write@result,disk_write@res
 16301                           
 16302                           ; BSR set to: 0
 16303                           ;diskio.c: 168: return res;
 16304  00467C  518A               	movf	disk_write@res& (0+255),w,b
 16305                           
 16306                           ; BSR set to: 0
 16307  00467E  0012               	return	
 16308  004680                     
 16309                           ; BSR set to: 0
 16310                           ;diskio.c: 173: result = sdc_disk_write(buff, sector, count);
 16311                           
 16312                           ; BSR set to: 0
 16313  004680  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 16314  004684  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 16315  004688  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 16316  00468C  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 16317  004690  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 16318  004694  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 16319  004698  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 16320  00469C  EC7D  F017         	call	_sdc_disk_write	;wreg free
 16321  0046A0  0100               	movlb	0	; () banked
 16322  0046A2  6F86               	movwf	??_disk_write& (0+255),b
 16323  0046A4  5186               	movf	??_disk_write& (0+255),w,b
 16324  0046A6  6F88               	movwf	disk_write@result& (0+255),b
 16325  0046A8  6B89               	clrf	(disk_write@result+1)& (0+255),b
 16326                           
 16327                           ; BSR set to: 0
 16328                           ;diskio.c: 174: res = result;
 16329  0046AA  C088  F08A         	movff	disk_write@result,disk_write@res
 16330                           
 16331                           ; BSR set to: 0
 16332                           ;diskio.c: 177: return res;
 16333  0046AE  518A               	movf	disk_write@res& (0+255),w,b
 16334                           
 16335                           ; BSR set to: 0
 16336  0046B0  0012               	return	
 16337  0046B2                     
 16338                           ; BSR set to: 0
 16339                           ;diskio.c: 186: return res;
 16340                           
 16341                           ; BSR set to: 0
 16342  0046B2  518A               	movf	disk_write@res& (0+255),w,b
 16343                           
 16344                           ; BSR set to: 0
 16345  0046B4  0012               	return	
 16346  0046B6                     l385:
 16347                           
 16348                           ; BSR set to: 0
 16349  0046B6  0100               	movlb	0	; () banked
 16350  0046B8  5187               	movf	disk_write@pdrv& (0+255),w,b
 16351                           
 16352                           ; Switch size 1, requested type "space"
 16353                           ; Number of cases is 3, Range of values is 0 to 2
 16354                           ; switch strategies available:
 16355                           ; Name         Instructions Cycles
 16356                           ; simple_byte           10     6 (average)
 16357                           ;	Chosen strategy is simple_byte
 16358  0046BA  0A00               	xorlw	0	; case 0
 16359  0046BC  B4D8               	btfsc	status,2,c
 16360  0046BE  D7C7               	goto	l386
 16361  0046C0  0A01               	xorlw	1	; case 1
 16362  0046C2  B4D8               	btfsc	status,2,c
 16363  0046C4  D7DD               	goto	l388
 16364  0046C6  0A03               	xorlw	3	; case 2
 16365  0046C8  B4D8               	btfsc	status,2,c
 16366  0046CA  D7F3               	goto	l389
 16367                           
 16368                           ; BSR set to: 0
 16369                           ;diskio.c: 189: return RES_PARERR;
 16370                           
 16371                           ; BSR set to: 0
 16372  0046CC  0E04               	movlw	4
 16373  0046CE  0012               	return	
 16374  0046D0                     __end_of_disk_write:
 16375                           	opt stack 0
 16376                           tosu	equ	0xFFF
 16377                           tosh	equ	0xFFE
 16378                           tosl	equ	0xFFD
 16379                           pclath	equ	0xFFA
 16380                           tblptru	equ	0xFF8
 16381                           tblptrh	equ	0xFF7
 16382                           tblptrl	equ	0xFF6
 16383                           tablat	equ	0xFF5
 16384                           prodh	equ	0xFF4
 16385                           prodl	equ	0xFF3
 16386                           intcon	equ	0xFF2
 16387                           intcon2	equ	0xFF1
 16388                           intcon3	equ	0xFF0
 16389                           indf0	equ	0xFEF
 16390                           postinc0	equ	0xFEE
 16391                           fsr0h	equ	0xFEA
 16392                           fsr0l	equ	0xFE9
 16393                           wreg	equ	0xFE8
 16394                           indf1	equ	0xFE7
 16395                           postinc1	equ	0xFE6
 16396                           postdec1	equ	0xFE5
 16397                           fsr1h	equ	0xFE2
 16398                           fsr1l	equ	0xFE1
 16399                           indf2	equ	0xFDF
 16400                           postinc2	equ	0xFDE
 16401                           postdec2	equ	0xFDD
 16402                           plusw2	equ	0xFDB
 16403                           fsr2h	equ	0xFDA
 16404                           fsr2l	equ	0xFD9
 16405                           status	equ	0xFD8
 16406                           
 16407 ;; *************** function _sdc_disk_write *****************
 16408 ;; Defined at:
 16409 ;;		line 509 in file "bibliotecas/diskio.c"
 16410 ;; Parameters:    Size  Location     Type
 16411 ;;  p_buff          2   12[BANK0 ] PTR const unsigned char 
 16412 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 16413 ;;  sector          4   14[BANK0 ] unsigned long 
 16414 ;;  count           1   18[BANK0 ] unsigned char 
 16415 ;; Auto vars:     Size  Location     Type
 16416 ;;  j               2   28[BANK0 ] int 
 16417 ;;  count1          2   25[BANK0 ] int 
 16418 ;;  i               2   23[BANK0 ] int 
 16419 ;;  buff            1   30[BANK0 ] unsigned char 
 16420 ;;  res             1   27[BANK0 ] enum E25
 16421 ;; Return value:  Size  Location     Type
 16422 ;;                  1    wreg      enum E25
 16423 ;; Registers used:
 16424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16425 ;; Tracked objects:
 16426 ;;		On entry : 0/0
 16427 ;;		On exit  : 0/0
 16428 ;;		Unchanged: 0/0
 16429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16430 ;;      Params:         0       7       0       0       0       0       0       0       0
 16431 ;;      Locals:         0       8       0       0       0       0       0       0       0
 16432 ;;      Temps:          0       4       0       0       0       0       0       0       0
 16433 ;;      Totals:         0      19       0       0       0       0       0       0       0
 16434 ;;Total ram usage:       19 bytes
 16435 ;; Hardware stack levels used:    1
 16436 ;; Hardware stack levels required when called:    6
 16437 ;; This function calls:
 16438 ;;		_command
 16439 ;;		_dummy_clocks
 16440 ;;		_escreve_SPI
 16441 ;;		_leitura_SPI
 16442 ;;		_proceed
 16443 ;;		_response
 16444 ;; This function is called by:
 16445 ;;		_disk_write
 16446 ;; This function uses a non-reentrant model
 16447 ;;
 16448                           
 16449                           	psect	text61
 16450  002EFA                     __ptext61:
 16451                           	opt stack 0
 16452  002EFA                     _sdc_disk_write:
 16453                           	opt stack 16
 16454                           
 16455                           ;diskio.c: 511: DRESULT res;
 16456                           ;diskio.c: 512: unsigned char buff;
 16457                           ;diskio.c: 513: int i=0,j, count1 = 0;
 16458                           
 16459                           ; BSR set to: 0
 16460                           ;incstack = 0
 16461  002EFA  0E00               	movlw	0
 16462  002EFC  0100               	movlb	0	; () banked
 16463  002EFE  6F78               	movwf	(sdc_disk_write@i+1)& (0+255),b
 16464  002F00  0E00               	movlw	0
 16465  002F02  6F77               	movwf	sdc_disk_write@i& (0+255),b
 16466  002F04  0E00               	movlw	0
 16467  002F06  6F7A               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 16468  002F08  0E00               	movlw	0
 16469  002F0A  6F79               	movwf	sdc_disk_write@count1& (0+255),b
 16470                           
 16471                           ; BSR set to: 0
 16472                           ;diskio.c: 515: if(count>1)
 16473  002F0C  0E01               	movlw	1
 16474  002F0E  6572               	cpfsgt	sdc_disk_write@count& (0+255),b
 16475  002F10  D06C               	goto	l470
 16476                           
 16477                           ; BSR set to: 0
 16478                           ;diskio.c: 516: {
 16479                           ;diskio.c: 517: LATCbits.LATC7 = 0;
 16480  002F12  9E8B               	bcf	3979,7,c	;volatile
 16481                           
 16482                           ;diskio.c: 518: LATBbits.LATB4 = 0;
 16483  002F14  988A               	bcf	3978,4,c	;volatile
 16484                           
 16485                           ; BSR set to: 0
 16486                           ;diskio.c: 519: dummy_clocks(10);
 16487  002F16  0E0A               	movlw	10
 16488  002F18  ECAA  F027         	call	_dummy_clocks
 16489                           
 16490                           ;diskio.c: 520: command(0X57, count, 0XFF);
 16491  002F1C  0100               	movlb	0	; () banked
 16492  002F1E  5172               	movf	sdc_disk_write@count& (0+255),w,b
 16493  002F20  6F65               	movwf	command@arg& (0+255),b
 16494  002F22  6B66               	clrf	(command@arg+1)& (0+255),b
 16495  002F24  6B67               	clrf	(command@arg+2)& (0+255),b
 16496  002F26  6B68               	clrf	(command@arg+3)& (0+255),b
 16497  002F28  0EFF               	movlw	255
 16498  002F2A  6F69               	movwf	command@CRC& (0+255),b
 16499  002F2C  0E57               	movlw	87
 16500  002F2E  ECD4  F024         	call	_command
 16501                           
 16502                           ;diskio.c: 521: proceed();
 16503  002F32  EC8C  F029         	call	_proceed	;wreg free
 16504  002F36                     
 16505                           ;diskio.c: 523: buff = response();
 16506  002F36  EC86  F029         	call	_response	;wreg free
 16507  002F3A  0100               	movlb	0	; () banked
 16508  002F3C  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 16509                           
 16510                           ; BSR set to: 0
 16511                           ;diskio.c: 524: }while(buff!=0X00);
 16512  002F3E  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 16513  002F40  A4D8               	btfss	status,2,c
 16514  002F42  D7F9               	goto	l471
 16515                           
 16516                           ; BSR set to: 0
 16517                           ;diskio.c: 526: dummy_clocks(10);
 16518                           
 16519                           ; BSR set to: 0
 16520  002F44  0E0A               	movlw	10
 16521  002F46  ECAA  F027         	call	_dummy_clocks
 16522                           
 16523                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 16524  002F4A  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 16525  002F4E  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 16526  002F52  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 16527  002F56  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 16528  002F5A  0E09               	movlw	9
 16529  002F5C                     u10035:
 16530  002F5C  90D8               	bcf	status,0,c
 16531  002F5E  0100               	movlb	0	; () banked
 16532  002F60  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 16533  002F62  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 16534  002F64  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 16535  002F66  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 16536  002F68  2EE8               	decfsz	wreg,f,c
 16537  002F6A  D7F8               	goto	u10035
 16538  002F6C  C073  F065         	movff	??_sdc_disk_write,command@arg
 16539  002F70  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 16540  002F74  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 16541  002F78  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 16542  002F7C  0EFF               	movlw	255
 16543  002F7E  6F69               	movwf	command@CRC& (0+255),b
 16544  002F80  0E59               	movlw	89
 16545  002F82  ECD4  F024         	call	_command
 16546                           
 16547                           ;diskio.c: 528: proceed();
 16548  002F86  EC8C  F029         	call	_proceed	;wreg free
 16549  002F8A                     
 16550                           ;diskio.c: 530: buff = response();
 16551  002F8A  EC86  F029         	call	_response	;wreg free
 16552  002F8E  0100               	movlb	0	; () banked
 16553  002F90  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 16554                           
 16555                           ; BSR set to: 0
 16556                           ;diskio.c: 531: }while(buff!=0X00);
 16557  002F92  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 16558  002F94  A4D8               	btfss	status,2,c
 16559  002F96  D7F9               	goto	l473
 16560                           
 16561                           ; BSR set to: 0
 16562                           ;diskio.c: 533: dummy_clocks(1);
 16563                           
 16564                           ; BSR set to: 0
 16565  002F98  0E01               	movlw	1
 16566  002F9A  ECAA  F027         	call	_dummy_clocks
 16567                           
 16568                           ;diskio.c: 534: escreve_SPI(0XFC);
 16569  002F9E  0EFC               	movlw	252
 16570  002FA0  EC56  F029         	call	_escreve_SPI
 16571                           
 16572                           ;diskio.c: 535: for(j=0;j<512;j++)
 16573  002FA4  0E00               	movlw	0
 16574  002FA6  0100               	movlb	0	; () banked
 16575  002FA8  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 16576  002FAA  0E00               	movlw	0
 16577  002FAC  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 16578  002FAE                     l8461:
 16579                           
 16580                           ; BSR set to: 0
 16581  002FAE  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 16582  002FB0  D004               	goto	l475
 16583  002FB2  0E02               	movlw	2
 16584  002FB4  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 16585  002FB6  B0D8               	btfsc	status,0,c
 16586  002FB8  D00D               	goto	u10060
 16587  002FBA                     l475:
 16588                           
 16589                           ; BSR set to: 0
 16590                           ;diskio.c: 536: {
 16591                           ;diskio.c: 537: escreve_SPI(*p_buff);
 16592                           
 16593                           ; BSR set to: 0
 16594  002FBA  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 16595  002FBE  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 16596  002FC2  50DF               	movf	indf2,w,c
 16597  002FC4  EC56  F029         	call	_escreve_SPI
 16598                           
 16599                           ;diskio.c: 538: p_buff++;
 16600  002FC8  0100               	movlb	0	; () banked
 16601  002FCA  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 16602  002FCC  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 16603                           
 16604                           ; BSR set to: 0
 16605  002FCE  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 16606  002FD0  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 16607  002FD2  D7ED               	goto	l8461
 16608  002FD4                     u10060:
 16609                           
 16610                           ; BSR set to: 0
 16611                           ;diskio.c: 539: }
 16612                           ;diskio.c: 540: leitura_SPI();
 16613                           
 16614                           ; BSR set to: 0
 16615  002FD4  EC92  F029         	call	_leitura_SPI	;wreg free
 16616                           
 16617                           ;diskio.c: 541: leitura_SPI();
 16618  002FD8  EC92  F029         	call	_leitura_SPI	;wreg free
 16619                           
 16620                           ;diskio.c: 543: dummy_clocks(1);
 16621  002FDC  0E01               	movlw	1
 16622  002FDE  ECAA  F027         	call	_dummy_clocks
 16623                           
 16624                           ;diskio.c: 544: escreve_SPI(0XFD);
 16625  002FE2  0EFD               	movlw	253
 16626  002FE4  EC56  F029         	call	_escreve_SPI
 16627                           
 16628                           ;diskio.c: 546: }
 16629  002FE8  D06A               	goto	u10110
 16630  002FEA                     l470:
 16631                           
 16632                           ; BSR set to: 0
 16633                           ;diskio.c: 547: else
 16634                           ;diskio.c: 548: {
 16635                           ;diskio.c: 549: LATCbits.LATC7 = 0;
 16636  002FEA  9E8B               	bcf	3979,7,c	;volatile
 16637                           
 16638                           ;diskio.c: 550: LATBbits.LATB4 = 0;
 16639  002FEC  988A               	bcf	3978,4,c	;volatile
 16640                           
 16641                           ; BSR set to: 0
 16642                           ;diskio.c: 551: dummy_clocks(10);
 16643  002FEE  0E0A               	movlw	10
 16644  002FF0  ECAA  F027         	call	_dummy_clocks
 16645                           
 16646                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 16647  002FF4  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 16648  002FF8  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 16649  002FFC  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 16650  003000  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 16651  003004  0E09               	movlw	9
 16652  003006                     u10075:
 16653  003006  90D8               	bcf	status,0,c
 16654  003008  0100               	movlb	0	; () banked
 16655  00300A  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 16656  00300C  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 16657  00300E  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 16658  003010  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 16659  003012  2EE8               	decfsz	wreg,f,c
 16660  003014  D7F8               	goto	u10075
 16661  003016  C073  F065         	movff	??_sdc_disk_write,command@arg
 16662  00301A  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 16663  00301E  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 16664  003022  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 16665  003026  0E00               	movlw	0
 16666  003028  6F69               	movwf	command@CRC& (0+255),b
 16667  00302A  0E58               	movlw	88
 16668  00302C  ECD4  F024         	call	_command
 16669                           
 16670                           ;diskio.c: 553: proceed();
 16671  003030  EC8C  F029         	call	_proceed	;wreg free
 16672  003034                     
 16673                           ;diskio.c: 555: buff = response();
 16674  003034  EC86  F029         	call	_response	;wreg free
 16675  003038  0100               	movlb	0	; () banked
 16676  00303A  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 16677                           
 16678                           ; BSR set to: 0
 16679                           ;diskio.c: 556: }while(buff!=0X00);
 16680  00303C  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 16681  00303E  A4D8               	btfss	status,2,c
 16682  003040  D7F9               	goto	l478
 16683                           
 16684                           ; BSR set to: 0
 16685                           ;diskio.c: 558: LATBbits.LATB4 = 0;
 16686  003042  988A               	bcf	3978,4,c	;volatile
 16687                           
 16688                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 16689  003044  9E8B               	bcf	3979,7,c	;volatile
 16690                           
 16691                           ; BSR set to: 0
 16692                           ;diskio.c: 560: dummy_clocks(1);
 16693  003046  0E01               	movlw	1
 16694  003048  ECAA  F027         	call	_dummy_clocks
 16695                           
 16696                           ;diskio.c: 561: escreve_SPI(0XFE);
 16697  00304C  0EFE               	movlw	254
 16698  00304E  EC56  F029         	call	_escreve_SPI
 16699                           
 16700                           ;diskio.c: 562: for(j=0;j<512;j++)
 16701  003052  0E00               	movlw	0
 16702  003054  0100               	movlb	0	; () banked
 16703  003056  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 16704  003058  0E00               	movlw	0
 16705  00305A  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 16706  00305C                     l8493:
 16707                           
 16708                           ; BSR set to: 0
 16709  00305C  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 16710  00305E  D004               	goto	l480
 16711  003060  0E02               	movlw	2
 16712  003062  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 16713  003064  B0D8               	btfsc	status,0,c
 16714  003066  D00D               	goto	u10100
 16715  003068                     l480:
 16716                           
 16717                           ; BSR set to: 0
 16718                           ;diskio.c: 563: {
 16719                           ;diskio.c: 564: escreve_SPI(*p_buff);
 16720                           
 16721                           ; BSR set to: 0
 16722  003068  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 16723  00306C  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 16724  003070  50DF               	movf	indf2,w,c
 16725  003072  EC56  F029         	call	_escreve_SPI
 16726                           
 16727                           ;diskio.c: 565: p_buff++;
 16728  003076  0100               	movlb	0	; () banked
 16729  003078  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 16730  00307A  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 16731                           
 16732                           ; BSR set to: 0
 16733  00307C  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 16734  00307E  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 16735  003080  D7ED               	goto	l8493
 16736  003082                     u10100:
 16737                           
 16738                           ; BSR set to: 0
 16739                           ;diskio.c: 566: }
 16740                           ;diskio.c: 567: leitura_SPI();
 16741                           
 16742                           ; BSR set to: 0
 16743  003082  EC92  F029         	call	_leitura_SPI	;wreg free
 16744                           
 16745                           ;diskio.c: 568: leitura_SPI();
 16746  003086  EC92  F029         	call	_leitura_SPI	;wreg free
 16747                           
 16748                           ;diskio.c: 570: dummy_clocks(10);
 16749  00308A  0E0A               	movlw	10
 16750  00308C  ECAA  F027         	call	_dummy_clocks
 16751                           
 16752                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 16753  003090  0E00               	movlw	0
 16754  003092  0100               	movlb	0	; () banked
 16755  003094  6F65               	movwf	command@arg& (0+255),b
 16756  003096  0E00               	movlw	0
 16757  003098  6F66               	movwf	(command@arg+1)& (0+255),b
 16758  00309A  0E00               	movlw	0
 16759  00309C  6F67               	movwf	(command@arg+2)& (0+255),b
 16760  00309E  0E00               	movlw	0
 16761  0030A0  6F68               	movwf	(command@arg+3)& (0+255),b
 16762  0030A2  0E00               	movlw	0
 16763  0030A4  6F69               	movwf	command@CRC& (0+255),b
 16764  0030A6  0E4D               	movlw	77
 16765  0030A8  ECD4  F024         	call	_command
 16766                           
 16767                           ;diskio.c: 572: proceed();
 16768  0030AC  EC8C  F029         	call	_proceed	;wreg free
 16769  0030B0                     
 16770                           ;diskio.c: 574: buff = response();
 16771  0030B0  EC86  F029         	call	_response	;wreg free
 16772  0030B4  0100               	movlb	0	; () banked
 16773  0030B6  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 16774                           
 16775                           ; BSR set to: 0
 16776                           ;diskio.c: 575: }while(buff!=0X00 );
 16777  0030B8  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 16778  0030BA  A4D8               	btfss	status,2,c
 16779  0030BC  D7F9               	goto	l482
 16780  0030BE                     u10110:
 16781                           
 16782                           ;diskio.c: 576: }
 16783                           ;diskio.c: 577: return res;
 16784                           
 16785                           ; BSR set to: 0
 16786                           
 16787                           ; BSR set to: 0
 16788  0030BE  0100               	movlb	0	; () banked
 16789  0030C0  517B               	movf	sdc_disk_write@res& (0+255),w,b
 16790  0030C2  0012               	return	
 16791  0030C4                     __end_of_sdc_disk_write:
 16792                           	opt stack 0
 16793                           tosu	equ	0xFFF
 16794                           tosh	equ	0xFFE
 16795                           tosl	equ	0xFFD
 16796                           pclath	equ	0xFFA
 16797                           tblptru	equ	0xFF8
 16798                           tblptrh	equ	0xFF7
 16799                           tblptrl	equ	0xFF6
 16800                           tablat	equ	0xFF5
 16801                           prodh	equ	0xFF4
 16802                           prodl	equ	0xFF3
 16803                           intcon	equ	0xFF2
 16804                           intcon2	equ	0xFF1
 16805                           intcon3	equ	0xFF0
 16806                           indf0	equ	0xFEF
 16807                           postinc0	equ	0xFEE
 16808                           fsr0h	equ	0xFEA
 16809                           fsr0l	equ	0xFE9
 16810                           wreg	equ	0xFE8
 16811                           indf1	equ	0xFE7
 16812                           postinc1	equ	0xFE6
 16813                           postdec1	equ	0xFE5
 16814                           fsr1h	equ	0xFE2
 16815                           fsr1l	equ	0xFE1
 16816                           indf2	equ	0xFDF
 16817                           postinc2	equ	0xFDE
 16818                           postdec2	equ	0xFDD
 16819                           plusw2	equ	0xFDB
 16820                           fsr2h	equ	0xFDA
 16821                           fsr2l	equ	0xFD9
 16822                           status	equ	0xFD8
 16823                           
 16824 ;; *************** function _disk_read *****************
 16825 ;; Defined at:
 16826 ;;		line 97 in file "bibliotecas/diskio.c"
 16827 ;; Parameters:    Size  Location     Type
 16828 ;;  pdrv            1    wreg     unsigned char 
 16829 ;;  buff            2   31[BANK0 ] PTR unsigned char 
 16830 ;;		 -> NULL(0), fs(544), 
 16831 ;;  sector          4   33[BANK0 ] unsigned long 
 16832 ;;  count           1   37[BANK0 ] unsigned char 
 16833 ;; Auto vars:     Size  Location     Type
 16834 ;;  pdrv            1   39[BANK0 ] unsigned char 
 16835 ;;  result          2   40[BANK0 ] int 
 16836 ;;  res             1   42[BANK0 ] enum E25
 16837 ;; Return value:  Size  Location     Type
 16838 ;;                  1    wreg      enum E25
 16839 ;; Registers used:
 16840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16841 ;; Tracked objects:
 16842 ;;		On entry : 0/0
 16843 ;;		On exit  : 0/0
 16844 ;;		Unchanged: 0/0
 16845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16846 ;;      Params:         0       7       0       0       0       0       0       0       0
 16847 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16848 ;;      Temps:          0       1       0       0       0       0       0       0       0
 16849 ;;      Totals:         0      12       0       0       0       0       0       0       0
 16850 ;;Total ram usage:       12 bytes
 16851 ;; Hardware stack levels used:    1
 16852 ;; Hardware stack levels required when called:    7
 16853 ;; This function calls:
 16854 ;;		_sdc_disk_read
 16855 ;; This function is called by:
 16856 ;;		_move_window
 16857 ;;		_check_fs
 16858 ;;		_f_read
 16859 ;; This function uses a non-reentrant model
 16860 ;;
 16861                           
 16862                           	psect	text62
 16863  00452C                     __ptext62:
 16864                           	opt stack 0
 16865  00452C                     _disk_read:
 16866                           	opt stack 16
 16867                           
 16868                           ; BSR set to: 0
 16869                           ;incstack = 0
 16870                           ;disk_read@pdrv stored from wreg
 16871  00452C  0100               	movlb	0	; () banked
 16872  00452E  6F87               	movwf	disk_read@pdrv& (0+255),b
 16873                           
 16874                           ;diskio.c: 104: DRESULT res;
 16875                           ;diskio.c: 105: int result;
 16876                           ;diskio.c: 107: switch (pdrv) {
 16877  004530  D038               	goto	l377
 16878  004532                     
 16879                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 16880  004532  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 16881  004536  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 16882  00453A  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 16883  00453E  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 16884  004542  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 16885  004546  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 16886  00454A  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 16887  00454E  EC3B  F01C         	call	_sdc_disk_read	;wreg free
 16888  004552  0100               	movlb	0	; () banked
 16889  004554  6F86               	movwf	??_disk_read& (0+255),b
 16890  004556  5186               	movf	??_disk_read& (0+255),w,b
 16891  004558  6F88               	movwf	disk_read@result& (0+255),b
 16892  00455A  6B89               	clrf	(disk_read@result+1)& (0+255),b
 16893                           
 16894                           ; BSR set to: 0
 16895                           ;diskio.c: 115: res = result;
 16896  00455C  C088  F08A         	movff	disk_read@result,disk_read@res
 16897                           
 16898                           ; BSR set to: 0
 16899                           ;diskio.c: 117: return res;
 16900  004560  518A               	movf	disk_read@res& (0+255),w,b
 16901                           
 16902                           ; BSR set to: 0
 16903  004562  0012               	return	
 16904  004564                     
 16905                           ; BSR set to: 0
 16906                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 16907                           
 16908                           ; BSR set to: 0
 16909  004564  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 16910  004568  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 16911  00456C  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 16912  004570  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 16913  004574  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 16914  004578  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 16915  00457C  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 16916  004580  EC3B  F01C         	call	_sdc_disk_read	;wreg free
 16917  004584  0100               	movlb	0	; () banked
 16918  004586  6F86               	movwf	??_disk_read& (0+255),b
 16919  004588  5186               	movf	??_disk_read& (0+255),w,b
 16920  00458A  6F88               	movwf	disk_read@result& (0+255),b
 16921  00458C  6B89               	clrf	(disk_read@result+1)& (0+255),b
 16922                           
 16923                           ; BSR set to: 0
 16924                           ;diskio.c: 126: res = result;
 16925  00458E  C088  F08A         	movff	disk_read@result,disk_read@res
 16926                           
 16927                           ; BSR set to: 0
 16928                           ;diskio.c: 128: buff = data_buff;
 16929  004592  C027  F07F         	movff	_data_buff,disk_read@buff
 16930  004596  C028  F080         	movff	_data_buff+1,disk_read@buff+1
 16931                           
 16932                           ; BSR set to: 0
 16933                           ;diskio.c: 129: return res;
 16934  00459A  518A               	movf	disk_read@res& (0+255),w,b
 16935                           
 16936                           ; BSR set to: 0
 16937  00459C  0012               	return	
 16938  00459E                     
 16939                           ; BSR set to: 0
 16940                           ;diskio.c: 138: return res;
 16941                           
 16942                           ; BSR set to: 0
 16943  00459E  518A               	movf	disk_read@res& (0+255),w,b
 16944                           
 16945                           ; BSR set to: 0
 16946  0045A0  0012               	return	
 16947  0045A2                     l377:
 16948                           
 16949                           ; BSR set to: 0
 16950  0045A2  0100               	movlb	0	; () banked
 16951  0045A4  5187               	movf	disk_read@pdrv& (0+255),w,b
 16952                           
 16953                           ; Switch size 1, requested type "space"
 16954                           ; Number of cases is 3, Range of values is 0 to 2
 16955                           ; switch strategies available:
 16956                           ; Name         Instructions Cycles
 16957                           ; simple_byte           10     6 (average)
 16958                           ;	Chosen strategy is simple_byte
 16959  0045A6  0A00               	xorlw	0	; case 0
 16960  0045A8  B4D8               	btfsc	status,2,c
 16961  0045AA  D7C3               	goto	l378
 16962  0045AC  0A01               	xorlw	1	; case 1
 16963  0045AE  B4D8               	btfsc	status,2,c
 16964  0045B0  D7D9               	goto	l380
 16965  0045B2  0A03               	xorlw	3	; case 2
 16966  0045B4  B4D8               	btfsc	status,2,c
 16967  0045B6  D7F3               	goto	l381
 16968                           
 16969                           ; BSR set to: 0
 16970                           ;diskio.c: 141: return RES_PARERR;
 16971                           
 16972                           ; BSR set to: 0
 16973  0045B8  0E04               	movlw	4
 16974  0045BA  0012               	return	
 16975  0045BC                     __end_of_disk_read:
 16976                           	opt stack 0
 16977                           tosu	equ	0xFFF
 16978                           tosh	equ	0xFFE
 16979                           tosl	equ	0xFFD
 16980                           pclath	equ	0xFFA
 16981                           tblptru	equ	0xFF8
 16982                           tblptrh	equ	0xFF7
 16983                           tblptrl	equ	0xFF6
 16984                           tablat	equ	0xFF5
 16985                           prodh	equ	0xFF4
 16986                           prodl	equ	0xFF3
 16987                           intcon	equ	0xFF2
 16988                           intcon2	equ	0xFF1
 16989                           intcon3	equ	0xFF0
 16990                           indf0	equ	0xFEF
 16991                           postinc0	equ	0xFEE
 16992                           fsr0h	equ	0xFEA
 16993                           fsr0l	equ	0xFE9
 16994                           wreg	equ	0xFE8
 16995                           indf1	equ	0xFE7
 16996                           postinc1	equ	0xFE6
 16997                           postdec1	equ	0xFE5
 16998                           fsr1h	equ	0xFE2
 16999                           fsr1l	equ	0xFE1
 17000                           indf2	equ	0xFDF
 17001                           postinc2	equ	0xFDE
 17002                           postdec2	equ	0xFDD
 17003                           plusw2	equ	0xFDB
 17004                           fsr2h	equ	0xFDA
 17005                           fsr2l	equ	0xFD9
 17006                           status	equ	0xFD8
 17007                           
 17008 ;; *************** function _sdc_disk_read *****************
 17009 ;; Defined at:
 17010 ;;		line 439 in file "bibliotecas/diskio.c"
 17011 ;; Parameters:    Size  Location     Type
 17012 ;;  p_buff          2   12[BANK0 ] PTR unsigned char 
 17013 ;;		 -> NULL(0), fs(544), 
 17014 ;;  sector          4   14[BANK0 ] unsigned long 
 17015 ;;  count           1   18[BANK0 ] unsigned char 
 17016 ;; Auto vars:     Size  Location     Type
 17017 ;;  start_add       4   24[BANK0 ] unsigned long 
 17018 ;;  length          2   28[BANK0 ] int 
 17019 ;;  count1          2    0        int 
 17020 ;;  i               2    0        int 
 17021 ;;  buff            1   30[BANK0 ] unsigned char 
 17022 ;;  ptr             1   23[BANK0 ] unsigned char 
 17023 ;;  res             1    0        enum E25
 17024 ;; Return value:  Size  Location     Type
 17025 ;;                  1    wreg      enum E25
 17026 ;; Registers used:
 17027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17028 ;; Tracked objects:
 17029 ;;		On entry : 0/0
 17030 ;;		On exit  : 0/0
 17031 ;;		Unchanged: 0/0
 17032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17033 ;;      Params:         0       7       0       0       0       0       0       0       0
 17034 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17035 ;;      Temps:          0       4       0       0       0       0       0       0       0
 17036 ;;      Totals:         0      19       0       0       0       0       0       0       0
 17037 ;;Total ram usage:       19 bytes
 17038 ;; Hardware stack levels used:    1
 17039 ;; Hardware stack levels required when called:    6
 17040 ;; This function calls:
 17041 ;;		_command
 17042 ;;		_dummy_clocks
 17043 ;;		_proceed
 17044 ;;		_response
 17045 ;; This function is called by:
 17046 ;;		_disk_read
 17047 ;; This function uses a non-reentrant model
 17048 ;;
 17049                           
 17050                           	psect	text63
 17051  003876                     __ptext63:
 17052                           	opt stack 0
 17053  003876                     _sdc_disk_read:
 17054                           	opt stack 16
 17055                           
 17056                           ;diskio.c: 446: DRESULT res;
 17057                           ;diskio.c: 447: unsigned char ptr=0X00, buff;
 17058                           
 17059                           ; BSR set to: 0
 17060                           ;incstack = 0
 17061  003876  0E00               	movlw	0
 17062  003878  0100               	movlb	0	; () banked
 17063  00387A  6F77               	movwf	sdc_disk_read@ptr& (0+255),b
 17064                           
 17065                           ; BSR set to: 0
 17066                           ;diskio.c: 448: unsigned long int start_add;
 17067                           ;diskio.c: 449: int length,i, count1;
 17068                           ;diskio.c: 450: dummy_clocks(10);
 17069  00387C  0E0A               	movlw	10
 17070  00387E  ECAA  F027         	call	_dummy_clocks
 17071                           
 17072                           ;diskio.c: 452: start_add = sector*512;
 17073  003882  C06E  F073         	movff	sdc_disk_read@sector,??_sdc_disk_read
 17074  003886  C06F  F074         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 17075  00388A  C070  F075         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 17076  00388E  C071  F076         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 17077  003892  0E09               	movlw	9
 17078  003894                     u9945:
 17079  003894  90D8               	bcf	status,0,c
 17080  003896  0100               	movlb	0	; () banked
 17081  003898  3773               	rlcf	??_sdc_disk_read& (0+255),f,b
 17082  00389A  3774               	rlcf	(??_sdc_disk_read+1)& (0+255),f,b
 17083  00389C  3775               	rlcf	(??_sdc_disk_read+2)& (0+255),f,b
 17084  00389E  3776               	rlcf	(??_sdc_disk_read+3)& (0+255),f,b
 17085  0038A0  2EE8               	decfsz	wreg,f,c
 17086  0038A2  D7F8               	goto	u9945
 17087  0038A4  C073  F078         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 17088  0038A8  C074  F079         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 17089  0038AC  C075  F07A         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 17090  0038B0  C076  F07B         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 17091                           
 17092                           ; BSR set to: 0
 17093                           ;diskio.c: 455: if(sector != 1)
 17094  0038B4  056E               	decf	sdc_disk_read@sector& (0+255),w,b
 17095  0038B6  116F               	iorwf	(sdc_disk_read@sector+1)& (0+255),w,b
 17096  0038B8  1170               	iorwf	(sdc_disk_read@sector+2)& (0+255),w,b
 17097  0038BA  1171               	iorwf	(sdc_disk_read@sector+3)& (0+255),w,b
 17098  0038BC  B4D8               	btfsc	status,2,c
 17099  0038BE  D01D               	goto	l453
 17100                           
 17101                           ; BSR set to: 0
 17102                           ;diskio.c: 456: {
 17103                           ;diskio.c: 457: dummy_clocks(10);
 17104  0038C0  0E0A               	movlw	10
 17105  0038C2  ECAA  F027         	call	_dummy_clocks
 17106                           
 17107                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 17108  0038C6  C078  F065         	movff	sdc_disk_read@start_add,command@arg
 17109  0038CA  C079  F066         	movff	sdc_disk_read@start_add+1,command@arg+1
 17110  0038CE  C07A  F067         	movff	sdc_disk_read@start_add+2,command@arg+2
 17111  0038D2  C07B  F068         	movff	sdc_disk_read@start_add+3,command@arg+3
 17112  0038D6  0E00               	movlw	0
 17113  0038D8  0100               	movlb	0	; () banked
 17114  0038DA  6F69               	movwf	command@CRC& (0+255),b
 17115  0038DC  0E52               	movlw	82
 17116  0038DE  ECD4  F024         	call	_command
 17117                           
 17118                           ;diskio.c: 459: proceed();
 17119  0038E2  EC8C  F029         	call	_proceed	;wreg free
 17120  0038E6                     
 17121                           ;diskio.c: 461: buff = response();
 17122  0038E6  EC86  F029         	call	_response	;wreg free
 17123  0038EA  0100               	movlb	0	; () banked
 17124  0038EC  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 17125                           
 17126                           ; BSR set to: 0
 17127                           ;diskio.c: 462: }while(buff!=0X00);
 17128  0038EE  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 17129  0038F0  A4D8               	btfss	status,2,c
 17130  0038F2  D7F9               	goto	l454
 17131                           
 17132                           ; BSR set to: 0
 17133                           ;diskio.c: 463: proceed();
 17134                           
 17135                           ; BSR set to: 0
 17136  0038F4  EC8C  F029         	call	_proceed	;wreg free
 17137                           
 17138                           ;diskio.c: 464: }
 17139  0038F8  D021               	goto	l459
 17140  0038FA                     l453:
 17141                           
 17142                           ;diskio.c: 465: else
 17143                           ;diskio.c: 466: {
 17144                           ;diskio.c: 467: dummy_clocks(10);
 17145  0038FA  0E0A               	movlw	10
 17146  0038FC  ECAA  F027         	call	_dummy_clocks
 17147                           
 17148                           ;diskio.c: 468: command(0X51,sector ,0X00);
 17149  003900  C06E  F065         	movff	sdc_disk_read@sector,command@arg
 17150  003904  C06F  F066         	movff	sdc_disk_read@sector+1,command@arg+1
 17151  003908  C070  F067         	movff	sdc_disk_read@sector+2,command@arg+2
 17152  00390C  C071  F068         	movff	sdc_disk_read@sector+3,command@arg+3
 17153  003910  0E00               	movlw	0
 17154  003912  0100               	movlb	0	; () banked
 17155  003914  6F69               	movwf	command@CRC& (0+255),b
 17156  003916  0E51               	movlw	81
 17157  003918  ECD4  F024         	call	_command
 17158                           
 17159                           ;diskio.c: 469: proceed();
 17160  00391C  EC8C  F029         	call	_proceed	;wreg free
 17161  003920                     
 17162                           ;diskio.c: 471: buff = response();
 17163  003920  EC86  F029         	call	_response	;wreg free
 17164  003924  0100               	movlb	0	; () banked
 17165  003926  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 17166                           
 17167                           ; BSR set to: 0
 17168                           ;diskio.c: 472: }while(buff!=0X00);
 17169  003928  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 17170  00392A  A4D8               	btfss	status,2,c
 17171  00392C  D7F9               	goto	l457
 17172                           
 17173                           ; BSR set to: 0
 17174                           ;diskio.c: 473: proceed();
 17175                           
 17176                           ; BSR set to: 0
 17177  00392E  EC8C  F029         	call	_proceed	;wreg free
 17178                           
 17179                           ;diskio.c: 474: }
 17180                           ;diskio.c: 478: while(buff!=0xFE)
 17181  003932  D004               	goto	l459
 17182  003934                     
 17183                           ;diskio.c: 479: {
 17184                           ;diskio.c: 480: buff = response();
 17185  003934  EC86  F029         	call	_response	;wreg free
 17186  003938  0100               	movlb	0	; () banked
 17187  00393A  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 17188  00393C                     l459:
 17189                           
 17190                           ; BSR set to: 0
 17191  00393C  0EFE               	movlw	254
 17192  00393E  0100               	movlb	0	; () banked
 17193  003940  197E               	xorwf	sdc_disk_read@buff& (0+255),w,b
 17194  003942  A4D8               	btfss	status,2,c
 17195  003944  D7F7               	goto	l460
 17196                           
 17197                           ; BSR set to: 0
 17198                           ;diskio.c: 481: }
 17199                           ;diskio.c: 483: length = 0;
 17200                           
 17201                           ; BSR set to: 0
 17202  003946  0E00               	movlw	0
 17203  003948  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 17204  00394A  0E00               	movlw	0
 17205  00394C  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 17206                           
 17207                           ;diskio.c: 484: while ( length < 512 )
 17208  00394E  D00C               	goto	l462
 17209  003950                     
 17210                           ; BSR set to: 0
 17211                           ;diskio.c: 485: {
 17212                           ;diskio.c: 486: p_buff[length] = response();
 17213                           
 17214                           ; BSR set to: 0
 17215  003950  517C               	movf	sdc_disk_read@length& (0+255),w,b
 17216  003952  256C               	addwf	sdc_disk_read@p_buff& (0+255),w,b
 17217  003954  6ED9               	movwf	fsr2l,c
 17218  003956  517D               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 17219  003958  216D               	addwfc	(sdc_disk_read@p_buff+1)& (0+255),w,b
 17220  00395A  6EDA               	movwf	fsr2h,c
 17221  00395C  EC86  F029         	call	_response	;wreg free
 17222  003960  6EDF               	movwf	indf2,c
 17223                           
 17224                           ;diskio.c: 487: length++;
 17225  003962  0100               	movlb	0	; () banked
 17226  003964  4B7C               	infsnz	sdc_disk_read@length& (0+255),f,b
 17227  003966  2B7D               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 17228  003968                     l462:
 17229                           
 17230                           ; BSR set to: 0
 17231                           
 17232                           ; BSR set to: 0
 17233  003968  BF7D               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 17234  00396A  D7F2               	goto	l463
 17235  00396C  0E02               	movlw	2
 17236  00396E  5D7D               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 17237  003970  A0D8               	btfss	status,0,c
 17238  003972  D7EE               	goto	l463
 17239                           
 17240                           ; BSR set to: 0
 17241                           ;diskio.c: 488: }
 17242                           ;diskio.c: 490: length = 0;
 17243                           
 17244                           ; BSR set to: 0
 17245  003974  0E00               	movlw	0
 17246  003976  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 17247  003978  0E00               	movlw	0
 17248  00397A  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 17249                           
 17250                           ; BSR set to: 0
 17251                           ;diskio.c: 491: dummy_clocks(10);
 17252  00397C  0E0A               	movlw	10
 17253  00397E  ECAA  F027         	call	_dummy_clocks
 17254                           
 17255                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 17256  003982  0E00               	movlw	0
 17257  003984  0100               	movlb	0	; () banked
 17258  003986  6F65               	movwf	command@arg& (0+255),b
 17259  003988  0E00               	movlw	0
 17260  00398A  6F66               	movwf	(command@arg+1)& (0+255),b
 17261  00398C  0E00               	movlw	0
 17262  00398E  6F67               	movwf	(command@arg+2)& (0+255),b
 17263  003990  0E00               	movlw	0
 17264  003992  6F68               	movwf	(command@arg+3)& (0+255),b
 17265  003994  0E00               	movlw	0
 17266  003996  6F69               	movwf	command@CRC& (0+255),b
 17267  003998  0E4C               	movlw	76
 17268  00399A  ECD4  F024         	call	_command
 17269                           
 17270                           ;diskio.c: 494: proceed();
 17271  00399E  EC8C  F029         	call	_proceed	;wreg free
 17272  0039A2                     
 17273                           ;diskio.c: 496: buff = response();
 17274  0039A2  EC86  F029         	call	_response	;wreg free
 17275  0039A6  0100               	movlb	0	; () banked
 17276  0039A8  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 17277                           
 17278                           ; BSR set to: 0
 17279                           ;diskio.c: 497: }while(buff!=0xFF);
 17280  0039AA  297E               	incf	sdc_disk_read@buff& (0+255),w,b
 17281  0039AC  A4D8               	btfss	status,2,c
 17282  0039AE  D7F9               	goto	l465
 17283                           
 17284                           ; BSR set to: 0
 17285                           ;diskio.c: 499: length = 0;
 17286                           
 17287                           ; BSR set to: 0
 17288  0039B0  0E00               	movlw	0
 17289  0039B2  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 17290  0039B4  0E00               	movlw	0
 17291  0039B6  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 17292                           
 17293                           ; BSR set to: 0
 17294                           ;diskio.c: 500: return RES_OK;
 17295  0039B8  0E00               	movlw	0
 17296  0039BA  0012               	return	
 17297  0039BC                     __end_of_sdc_disk_read:
 17298                           	opt stack 0
 17299                           tosu	equ	0xFFF
 17300                           tosh	equ	0xFFE
 17301                           tosl	equ	0xFFD
 17302                           pclath	equ	0xFFA
 17303                           tblptru	equ	0xFF8
 17304                           tblptrh	equ	0xFF7
 17305                           tblptrl	equ	0xFF6
 17306                           tablat	equ	0xFF5
 17307                           prodh	equ	0xFF4
 17308                           prodl	equ	0xFF3
 17309                           intcon	equ	0xFF2
 17310                           intcon2	equ	0xFF1
 17311                           intcon3	equ	0xFF0
 17312                           indf0	equ	0xFEF
 17313                           postinc0	equ	0xFEE
 17314                           fsr0h	equ	0xFEA
 17315                           fsr0l	equ	0xFE9
 17316                           wreg	equ	0xFE8
 17317                           indf1	equ	0xFE7
 17318                           postinc1	equ	0xFE6
 17319                           postdec1	equ	0xFE5
 17320                           fsr1h	equ	0xFE2
 17321                           fsr1l	equ	0xFE1
 17322                           indf2	equ	0xFDF
 17323                           postinc2	equ	0xFDE
 17324                           postdec2	equ	0xFDD
 17325                           plusw2	equ	0xFDB
 17326                           fsr2h	equ	0xFDA
 17327                           fsr2l	equ	0xFD9
 17328                           status	equ	0xFD8
 17329                           
 17330 ;; *************** function _response *****************
 17331 ;; Defined at:
 17332 ;;		line 58 in file "bibliotecas/SDCard.c"
 17333 ;; Parameters:    Size  Location     Type
 17334 ;;		None
 17335 ;; Auto vars:     Size  Location     Type
 17336 ;;  buff            1   32[COMRAM] unsigned char 
 17337 ;; Return value:  Size  Location     Type
 17338 ;;                  1    wreg      unsigned char 
 17339 ;; Registers used:
 17340 ;;		wreg, status,2, cstack
 17341 ;; Tracked objects:
 17342 ;;		On entry : 0/0
 17343 ;;		On exit  : 0/0
 17344 ;;		Unchanged: 0/0
 17345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17346 ;;      Params:         0       0       0       0       0       0       0       0       0
 17347 ;;      Locals:         1       0       0       0       0       0       0       0       0
 17348 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17349 ;;      Totals:         1       0       0       0       0       0       0       0       0
 17350 ;;Total ram usage:        1 bytes
 17351 ;; Hardware stack levels used:    1
 17352 ;; Hardware stack levels required when called:    4
 17353 ;; This function calls:
 17354 ;;		_leitura_SPI
 17355 ;; This function is called by:
 17356 ;;		_sdc_reset
 17357 ;;		_sdc_disk_initialize
 17358 ;;		_sdc_disk_read
 17359 ;;		_sdc_disk_write
 17360 ;; This function uses a non-reentrant model
 17361 ;;
 17362                           
 17363                           	psect	text64
 17364  00530C                     __ptext64:
 17365                           	opt stack 0
 17366  00530C                     _response:
 17367                           	opt stack 17
 17368                           
 17369                           ;SDCard.c: 60: unsigned char buff;
 17370                           ;SDCard.c: 61: LATBbits.LATB4 = 0;
 17371                           
 17372                           ; BSR set to: 0
 17373                           ;incstack = 0
 17374  00530C  988A               	bcf	3978,4,c	;volatile
 17375                           
 17376                           ;SDCard.c: 62: buff= leitura_SPI();
 17377  00530E  EC92  F029         	call	_leitura_SPI	;wreg free
 17378  005312  6E21               	movwf	response@buff,c
 17379                           
 17380                           ;SDCard.c: 63: return buff;
 17381  005314  5021               	movf	response@buff,w,c
 17382  005316  0012               	return	
 17383  005318                     __end_of_response:
 17384                           	opt stack 0
 17385                           tosu	equ	0xFFF
 17386                           tosh	equ	0xFFE
 17387                           tosl	equ	0xFFD
 17388                           pclath	equ	0xFFA
 17389                           tblptru	equ	0xFF8
 17390                           tblptrh	equ	0xFF7
 17391                           tblptrl	equ	0xFF6
 17392                           tablat	equ	0xFF5
 17393                           prodh	equ	0xFF4
 17394                           prodl	equ	0xFF3
 17395                           intcon	equ	0xFF2
 17396                           intcon2	equ	0xFF1
 17397                           intcon3	equ	0xFF0
 17398                           indf0	equ	0xFEF
 17399                           postinc0	equ	0xFEE
 17400                           fsr0h	equ	0xFEA
 17401                           fsr0l	equ	0xFE9
 17402                           wreg	equ	0xFE8
 17403                           indf1	equ	0xFE7
 17404                           postinc1	equ	0xFE6
 17405                           postdec1	equ	0xFE5
 17406                           fsr1h	equ	0xFE2
 17407                           fsr1l	equ	0xFE1
 17408                           indf2	equ	0xFDF
 17409                           postinc2	equ	0xFDE
 17410                           postdec2	equ	0xFDD
 17411                           plusw2	equ	0xFDB
 17412                           fsr2h	equ	0xFDA
 17413                           fsr2l	equ	0xFD9
 17414                           status	equ	0xFD8
 17415                           
 17416 ;; *************** function _proceed *****************
 17417 ;; Defined at:
 17418 ;;		line 91 in file "bibliotecas/SDCard.c"
 17419 ;; Parameters:    Size  Location     Type
 17420 ;;		None
 17421 ;; Auto vars:     Size  Location     Type
 17422 ;;		None
 17423 ;; Return value:  Size  Location     Type
 17424 ;;                  1    wreg      void 
 17425 ;; Registers used:
 17426 ;;		wreg, cstack
 17427 ;; Tracked objects:
 17428 ;;		On entry : 0/0
 17429 ;;		On exit  : 0/0
 17430 ;;		Unchanged: 0/0
 17431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17432 ;;      Params:         0       0       0       0       0       0       0       0       0
 17433 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17434 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17435 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17436 ;;Total ram usage:        0 bytes
 17437 ;; Hardware stack levels used:    1
 17438 ;; Hardware stack levels required when called:    4
 17439 ;; This function calls:
 17440 ;;		_escreve_SPI
 17441 ;; This function is called by:
 17442 ;;		_sdc_reset
 17443 ;;		_sdc_disk_initialize
 17444 ;;		_sdc_disk_read
 17445 ;;		_sdc_disk_write
 17446 ;;		_sdcard_init
 17447 ;; This function uses a non-reentrant model
 17448 ;;
 17449                           
 17450                           	psect	text65
 17451  005318                     __ptext65:
 17452                           	opt stack 0
 17453  005318                     _proceed:
 17454                           	opt stack 17
 17455                           
 17456                           ;SDCard.c: 93: LATBbits.LATB4 = 0;
 17457                           
 17458                           ;incstack = 0
 17459  005318  988A               	bcf	3978,4,c	;volatile
 17460                           
 17461                           ;SDCard.c: 94: escreve_SPI(0xFF);
 17462  00531A  0EFF               	movlw	255
 17463  00531C  EC56  F029         	call	_escreve_SPI
 17464                           
 17465                           ;SDCard.c: 95: LATBbits.LATB4 = 1;
 17466  005320  888A               	bsf	3978,4,c	;volatile
 17467  005322  0012               	return		;funcret
 17468  005324                     __end_of_proceed:
 17469                           	opt stack 0
 17470                           tosu	equ	0xFFF
 17471                           tosh	equ	0xFFE
 17472                           tosl	equ	0xFFD
 17473                           pclath	equ	0xFFA
 17474                           tblptru	equ	0xFF8
 17475                           tblptrh	equ	0xFF7
 17476                           tblptrl	equ	0xFF6
 17477                           tablat	equ	0xFF5
 17478                           prodh	equ	0xFF4
 17479                           prodl	equ	0xFF3
 17480                           intcon	equ	0xFF2
 17481                           intcon2	equ	0xFF1
 17482                           intcon3	equ	0xFF0
 17483                           indf0	equ	0xFEF
 17484                           postinc0	equ	0xFEE
 17485                           fsr0h	equ	0xFEA
 17486                           fsr0l	equ	0xFE9
 17487                           wreg	equ	0xFE8
 17488                           indf1	equ	0xFE7
 17489                           postinc1	equ	0xFE6
 17490                           postdec1	equ	0xFE5
 17491                           fsr1h	equ	0xFE2
 17492                           fsr1l	equ	0xFE1
 17493                           indf2	equ	0xFDF
 17494                           postinc2	equ	0xFDE
 17495                           postdec2	equ	0xFDD
 17496                           plusw2	equ	0xFDB
 17497                           fsr2h	equ	0xFDA
 17498                           fsr2l	equ	0xFD9
 17499                           status	equ	0xFD8
 17500                           
 17501 ;; *************** function _command *****************
 17502 ;; Defined at:
 17503 ;;		line 124 in file "bibliotecas/SDCard.c"
 17504 ;; Parameters:    Size  Location     Type
 17505 ;;  CMD             1    wreg     unsigned char 
 17506 ;;  arg             4    5[BANK0 ] unsigned long 
 17507 ;;  CRC             1    9[BANK0 ] unsigned char 
 17508 ;; Auto vars:     Size  Location     Type
 17509 ;;  CMD             1   10[BANK0 ] unsigned char 
 17510 ;;  argument        1   11[BANK0 ] unsigned char 
 17511 ;; Return value:  Size  Location     Type
 17512 ;;                  1    wreg      void 
 17513 ;; Registers used:
 17514 ;;		wreg, status,2, status,0, cstack
 17515 ;; Tracked objects:
 17516 ;;		On entry : 0/0
 17517 ;;		On exit  : 0/0
 17518 ;;		Unchanged: 0/0
 17519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17520 ;;      Params:         0       5       0       0       0       0       0       0       0
 17521 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17522 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17523 ;;      Totals:         0       7       0       0       0       0       0       0       0
 17524 ;;Total ram usage:        7 bytes
 17525 ;; Hardware stack levels used:    1
 17526 ;; Hardware stack levels required when called:    5
 17527 ;; This function calls:
 17528 ;;		_dummy_clocks
 17529 ;;		_escreve_SPI
 17530 ;;		_wait_ready
 17531 ;; This function is called by:
 17532 ;;		_sdc_reset
 17533 ;;		_sdc_disk_initialize
 17534 ;;		_sdc_disk_read
 17535 ;;		_sdc_disk_write
 17536 ;; This function uses a non-reentrant model
 17537 ;;
 17538                           
 17539                           	psect	text66
 17540  0049A8                     __ptext66:
 17541                           	opt stack 0
 17542  0049A8                     _command:
 17543                           	opt stack 16
 17544                           
 17545                           ;incstack = 0
 17546                           ;command@CMD stored from wreg
 17547  0049A8  0100               	movlb	0	; () banked
 17548  0049AA  6F6A               	movwf	command@CMD& (0+255),b
 17549                           
 17550                           ;SDCard.c: 126: unsigned char argument;
 17551                           ;SDCard.c: 128: if (wait_ready() != 0xFF)
 17552  0049AC  EC28  F028         	call	_wait_ready	;wreg free
 17553  0049B0  0AFF               	xorlw	255
 17554  0049B2  A4D8               	btfss	status,2,c
 17555  0049B4  D004               	goto	l248
 17556  0049B6  D008               	goto	u9930
 17557  0049B8                     
 17558                           ;SDCard.c: 131: {
 17559                           ;SDCard.c: 132: dummy_clocks(10);
 17560  0049B8  0E0A               	movlw	10
 17561  0049BA  ECAA  F027         	call	_dummy_clocks
 17562  0049BE                     l248:
 17563  0049BE  EC28  F028         	call	_wait_ready	;wreg free
 17564  0049C2  0AFF               	xorlw	255
 17565  0049C4  A4D8               	btfss	status,2,c
 17566  0049C6  D7F8               	goto	l249
 17567  0049C8                     u9930:
 17568                           
 17569                           ;SDCard.c: 133: }
 17570                           ;SDCard.c: 134: }
 17571                           ;SDCard.c: 135: escreve_SPI(0xFF);
 17572  0049C8  0EFF               	movlw	255
 17573  0049CA  EC56  F029         	call	_escreve_SPI
 17574                           
 17575                           ;SDCard.c: 136: escreve_SPI(CMD);
 17576  0049CE  0100               	movlb	0	; () banked
 17577  0049D0  516A               	movf	command@CMD& (0+255),w,b
 17578  0049D2  EC56  F029         	call	_escreve_SPI
 17579                           
 17580                           ;SDCard.c: 137: argument = arg>>24;
 17581  0049D6  C068  F06B         	movff	command@arg+3,command@argument
 17582                           
 17583                           ;SDCard.c: 138: escreve_SPI(argument);
 17584  0049DA  0100               	movlb	0	; () banked
 17585  0049DC  516B               	movf	command@argument& (0+255),w,b
 17586  0049DE  EC56  F029         	call	_escreve_SPI
 17587                           
 17588                           ;SDCard.c: 139: argument = arg>>16;
 17589  0049E2  C067  F06B         	movff	command@arg+2,command@argument
 17590                           
 17591                           ;SDCard.c: 140: escreve_SPI(argument);
 17592  0049E6  0100               	movlb	0	; () banked
 17593  0049E8  516B               	movf	command@argument& (0+255),w,b
 17594  0049EA  EC56  F029         	call	_escreve_SPI
 17595                           
 17596                           ;SDCard.c: 141: argument = arg>>8;
 17597  0049EE  C066  F06B         	movff	command@arg+1,command@argument
 17598                           
 17599                           ;SDCard.c: 142: escreve_SPI(argument);
 17600  0049F2  0100               	movlb	0	; () banked
 17601  0049F4  516B               	movf	command@argument& (0+255),w,b
 17602  0049F6  EC56  F029         	call	_escreve_SPI
 17603                           
 17604                           ;SDCard.c: 143: argument = arg;
 17605  0049FA  C065  F06B         	movff	command@arg,command@argument
 17606                           
 17607                           ;SDCard.c: 144: escreve_SPI(argument);
 17608  0049FE  0100               	movlb	0	; () banked
 17609  004A00  516B               	movf	command@argument& (0+255),w,b
 17610  004A02  EC56  F029         	call	_escreve_SPI
 17611                           
 17612                           ;SDCard.c: 145: escreve_SPI(CRC);
 17613  004A06  0100               	movlb	0	; () banked
 17614  004A08  5169               	movf	command@CRC& (0+255),w,b
 17615  004A0A  EC56  F029         	call	_escreve_SPI
 17616  004A0E  0012               	return		;funcret
 17617  004A10                     __end_of_command:
 17618                           	opt stack 0
 17619                           tosu	equ	0xFFF
 17620                           tosh	equ	0xFFE
 17621                           tosl	equ	0xFFD
 17622                           pclath	equ	0xFFA
 17623                           tblptru	equ	0xFF8
 17624                           tblptrh	equ	0xFF7
 17625                           tblptrl	equ	0xFF6
 17626                           tablat	equ	0xFF5
 17627                           prodh	equ	0xFF4
 17628                           prodl	equ	0xFF3
 17629                           intcon	equ	0xFF2
 17630                           intcon2	equ	0xFF1
 17631                           intcon3	equ	0xFF0
 17632                           indf0	equ	0xFEF
 17633                           postinc0	equ	0xFEE
 17634                           fsr0h	equ	0xFEA
 17635                           fsr0l	equ	0xFE9
 17636                           wreg	equ	0xFE8
 17637                           indf1	equ	0xFE7
 17638                           postinc1	equ	0xFE6
 17639                           postdec1	equ	0xFE5
 17640                           fsr1h	equ	0xFE2
 17641                           fsr1l	equ	0xFE1
 17642                           indf2	equ	0xFDF
 17643                           postinc2	equ	0xFDE
 17644                           postdec2	equ	0xFDD
 17645                           plusw2	equ	0xFDB
 17646                           fsr2h	equ	0xFDA
 17647                           fsr2l	equ	0xFD9
 17648                           status	equ	0xFD8
 17649                           
 17650 ;; *************** function _wait_ready *****************
 17651 ;; Defined at:
 17652 ;;		line 104 in file "bibliotecas/SDCard.c"
 17653 ;; Parameters:    Size  Location     Type
 17654 ;;		None
 17655 ;; Auto vars:     Size  Location     Type
 17656 ;;  msg            10    0        unsigned char [10]
 17657 ;;  timeout         4    0[BANK0 ] unsigned long 
 17658 ;;  res             1    4[BANK0 ] unsigned char 
 17659 ;; Return value:  Size  Location     Type
 17660 ;;                  1    wreg      unsigned char 
 17661 ;; Registers used:
 17662 ;;		wreg, status,2, status,0, cstack
 17663 ;; Tracked objects:
 17664 ;;		On entry : 0/0
 17665 ;;		On exit  : 0/0
 17666 ;;		Unchanged: 0/0
 17667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17668 ;;      Params:         0       0       0       0       0       0       0       0       0
 17669 ;;      Locals:         0       5       0       0       0       0       0       0       0
 17670 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17671 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17672 ;;Total ram usage:        5 bytes
 17673 ;; Hardware stack levels used:    1
 17674 ;; Hardware stack levels required when called:    4
 17675 ;; This function calls:
 17676 ;;		_leitura_SPI
 17677 ;; This function is called by:
 17678 ;;		_command
 17679 ;; This function uses a non-reentrant model
 17680 ;;
 17681                           
 17682                           	psect	text67
 17683  005050                     __ptext67:
 17684                           	opt stack 0
 17685  005050                     _wait_ready:
 17686                           	opt stack 16
 17687                           
 17688                           ;SDCard.c: 106: BYTE res;
 17689                           ;SDCard.c: 107: DWORD timeout = 0x7FFF;
 17690                           
 17691                           ;incstack = 0
 17692  005050  0EFF               	movlw	255
 17693  005052  0100               	movlb	0	; () banked
 17694  005054  6F60               	movwf	wait_ready@timeout& (0+255),b
 17695  005056  0E7F               	movlw	127
 17696  005058  6F61               	movwf	(wait_ready@timeout+1)& (0+255),b
 17697  00505A  0E00               	movlw	0
 17698  00505C  6F62               	movwf	(wait_ready@timeout+2)& (0+255),b
 17699  00505E  0E00               	movlw	0
 17700  005060  6F63               	movwf	(wait_ready@timeout+3)& (0+255),b
 17701  005062                     
 17702                           ; BSR set to: 0
 17703                           ;SDCard.c: 111: res = leitura_SPI();
 17704                           
 17705                           ; BSR set to: 0
 17706  005062  EC92  F029         	call	_leitura_SPI	;wreg free
 17707  005066  0100               	movlb	0	; () banked
 17708  005068  6F64               	movwf	wait_ready@res& (0+255),b
 17709                           
 17710                           ; BSR set to: 0
 17711                           ;SDCard.c: 112: while ((res != 0xFF) && (--timeout));
 17712  00506A  2964               	incf	wait_ready@res& (0+255),w,b
 17713  00506C  B4D8               	btfsc	status,2,c
 17714  00506E  D00B               	goto	u9910
 17715                           
 17716                           ; BSR set to: 0
 17717  005070  0760               	decf	wait_ready@timeout& (0+255),f,b
 17718  005072  0E00               	movlw	0
 17719  005074  5B61               	subwfb	(wait_ready@timeout+1)& (0+255),f,b
 17720  005076  5B62               	subwfb	(wait_ready@timeout+2)& (0+255),f,b
 17721  005078  5B63               	subwfb	(wait_ready@timeout+3)& (0+255),f,b
 17722  00507A  5160               	movf	wait_ready@timeout& (0+255),w,b
 17723  00507C  1161               	iorwf	(wait_ready@timeout+1)& (0+255),w,b
 17724  00507E  1162               	iorwf	(wait_ready@timeout+2)& (0+255),w,b
 17725  005080  1163               	iorwf	(wait_ready@timeout+3)& (0+255),w,b
 17726  005082  A4D8               	btfss	status,2,c
 17727  005084  D7EE               	goto	l240
 17728  005086                     u9910:
 17729                           
 17730                           ; BSR set to: 0
 17731                           ;SDCard.c: 114: return res;
 17732                           
 17733                           ; BSR set to: 0
 17734                           
 17735                           ; BSR set to: 0
 17736  005086  5164               	movf	wait_ready@res& (0+255),w,b
 17737  005088  0012               	return	
 17738  00508A                     __end_of_wait_ready:
 17739                           	opt stack 0
 17740                           tosu	equ	0xFFF
 17741                           tosh	equ	0xFFE
 17742                           tosl	equ	0xFFD
 17743                           pclath	equ	0xFFA
 17744                           tblptru	equ	0xFF8
 17745                           tblptrh	equ	0xFF7
 17746                           tblptrl	equ	0xFF6
 17747                           tablat	equ	0xFF5
 17748                           prodh	equ	0xFF4
 17749                           prodl	equ	0xFF3
 17750                           intcon	equ	0xFF2
 17751                           intcon2	equ	0xFF1
 17752                           intcon3	equ	0xFF0
 17753                           indf0	equ	0xFEF
 17754                           postinc0	equ	0xFEE
 17755                           fsr0h	equ	0xFEA
 17756                           fsr0l	equ	0xFE9
 17757                           wreg	equ	0xFE8
 17758                           indf1	equ	0xFE7
 17759                           postinc1	equ	0xFE6
 17760                           postdec1	equ	0xFE5
 17761                           fsr1h	equ	0xFE2
 17762                           fsr1l	equ	0xFE1
 17763                           indf2	equ	0xFDF
 17764                           postinc2	equ	0xFDE
 17765                           postdec2	equ	0xFDD
 17766                           plusw2	equ	0xFDB
 17767                           fsr2h	equ	0xFDA
 17768                           fsr2l	equ	0xFD9
 17769                           status	equ	0xFD8
 17770                           
 17771 ;; *************** function _escreve_SPI *****************
 17772 ;; Defined at:
 17773 ;;		line 98 in file "bibliotecas/SPI.c"
 17774 ;; Parameters:    Size  Location     Type
 17775 ;;  dado            1    wreg     unsigned char 
 17776 ;; Auto vars:     Size  Location     Type
 17777 ;;  dado            1   33[COMRAM] unsigned char 
 17778 ;;  TempVar         1   32[COMRAM] unsigned char 
 17779 ;; Return value:  Size  Location     Type
 17780 ;;                  1    wreg      void 
 17781 ;; Registers used:
 17782 ;;		wreg
 17783 ;; Tracked objects:
 17784 ;;		On entry : 0/0
 17785 ;;		On exit  : 0/0
 17786 ;;		Unchanged: 0/0
 17787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17788 ;;      Params:         0       0       0       0       0       0       0       0       0
 17789 ;;      Locals:         2       0       0       0       0       0       0       0       0
 17790 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17791 ;;      Totals:         2       0       0       0       0       0       0       0       0
 17792 ;;Total ram usage:        2 bytes
 17793 ;; Hardware stack levels used:    1
 17794 ;; Hardware stack levels required when called:    3
 17795 ;; This function calls:
 17796 ;;		Nothing
 17797 ;; This function is called by:
 17798 ;;		_proceed
 17799 ;;		_command
 17800 ;;		_sdc_disk_write
 17801 ;; This function uses a non-reentrant model
 17802 ;;
 17803                           
 17804                           	psect	text68
 17805  0052AC                     __ptext68:
 17806                           	opt stack 0
 17807  0052AC                     _escreve_SPI:
 17808                           	opt stack 17
 17809                           
 17810                           ; BSR set to: 0
 17811                           ;incstack = 0
 17812                           ;escreve_SPI@dado stored from wreg
 17813  0052AC  6E22               	movwf	escreve_SPI@dado,c
 17814                           
 17815                           ;SPI.c: 100: unsigned char TempVar;
 17816                           ;SPI.c: 101: TempVar = SSPBUF;
 17817  0052AE  CFC9 F021          	movff	4041,escreve_SPI@TempVar	;volatile
 17818                           
 17819                           ;SPI.c: 102: PIR1bits.SSPIF = 0;
 17820  0052B2  969E               	bcf	3998,3,c	;volatile
 17821                           
 17822                           ;SPI.c: 104: SSPBUF = dado;
 17823  0052B4  C022  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 17824  0052B8  B69E               	btfsc	3998,3,c	;volatile
 17825  0052BA  0012               	return	
 17826  0052BC  D7FD               	goto	l324
 17827  0052BE                     __end_of_escreve_SPI:
 17828                           	opt stack 0
 17829                           tosu	equ	0xFFF
 17830                           tosh	equ	0xFFE
 17831                           tosl	equ	0xFFD
 17832                           pclath	equ	0xFFA
 17833                           tblptru	equ	0xFF8
 17834                           tblptrh	equ	0xFF7
 17835                           tblptrl	equ	0xFF6
 17836                           tablat	equ	0xFF5
 17837                           prodh	equ	0xFF4
 17838                           prodl	equ	0xFF3
 17839                           intcon	equ	0xFF2
 17840                           intcon2	equ	0xFF1
 17841                           intcon3	equ	0xFF0
 17842                           indf0	equ	0xFEF
 17843                           postinc0	equ	0xFEE
 17844                           fsr0h	equ	0xFEA
 17845                           fsr0l	equ	0xFE9
 17846                           wreg	equ	0xFE8
 17847                           indf1	equ	0xFE7
 17848                           postinc1	equ	0xFE6
 17849                           postdec1	equ	0xFE5
 17850                           fsr1h	equ	0xFE2
 17851                           fsr1l	equ	0xFE1
 17852                           indf2	equ	0xFDF
 17853                           postinc2	equ	0xFDE
 17854                           postdec2	equ	0xFDD
 17855                           plusw2	equ	0xFDB
 17856                           fsr2h	equ	0xFDA
 17857                           fsr2l	equ	0xFD9
 17858                           status	equ	0xFD8
 17859                           
 17860 ;; *************** function _dummy_clocks *****************
 17861 ;; Defined at:
 17862 ;;		line 73 in file "bibliotecas/SDCard.c"
 17863 ;; Parameters:    Size  Location     Type
 17864 ;;  n               1    wreg     unsigned char 
 17865 ;; Auto vars:     Size  Location     Type
 17866 ;;  n               1    0[BANK0 ] unsigned char 
 17867 ;;  i               2    1[BANK0 ] unsigned int 
 17868 ;; Return value:  Size  Location     Type
 17869 ;;                  1    wreg      void 
 17870 ;; Registers used:
 17871 ;;		wreg, status,2, status,0, cstack
 17872 ;; Tracked objects:
 17873 ;;		On entry : 0/0
 17874 ;;		On exit  : 0/0
 17875 ;;		Unchanged: 0/0
 17876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17877 ;;      Params:         0       0       0       0       0       0       0       0       0
 17878 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17879 ;;      Temps:          2       0       0       0       0       0       0       0       0
 17880 ;;      Totals:         2       3       0       0       0       0       0       0       0
 17881 ;;Total ram usage:        5 bytes
 17882 ;; Hardware stack levels used:    1
 17883 ;; Hardware stack levels required when called:    4
 17884 ;; This function calls:
 17885 ;;		_leitura_SPI
 17886 ;; This function is called by:
 17887 ;;		_command
 17888 ;;		_sdc_disk_initialize
 17889 ;;		_sdc_disk_read
 17890 ;;		_sdc_disk_write
 17891 ;; This function uses a non-reentrant model
 17892 ;;
 17893                           
 17894                           	psect	text69
 17895  004F54                     __ptext69:
 17896                           	opt stack 0
 17897  004F54                     _dummy_clocks:
 17898                           	opt stack 17
 17899                           
 17900                           ;incstack = 0
 17901                           ;dummy_clocks@n stored from wreg
 17902  004F54  0100               	movlb	0	; () banked
 17903  004F56  6F60               	movwf	dummy_clocks@n& (0+255),b
 17904                           
 17905                           ;SDCard.c: 75: unsigned int i;
 17906                           ;SDCard.c: 76: _delay((unsigned long)((1)*(48000000/4000.0)));
 17907  004F58  0E10               	movlw	16
 17908  004F5A  6E21               	movwf	??_dummy_clocks& (0+255),c
 17909  004F5C  0E94               	movlw	148
 17910  004F5E                     u14357:
 17911  004F5E  2EE8               	decfsz	wreg,f,c
 17912  004F60  D7FE               	bra	u14357
 17913  004F62  2E21               	decfsz	??_dummy_clocks& (0+255),f,c
 17914  004F64  D7FC               	bra	u14357
 17915  004F66  D000               	nop2	
 17916                           
 17917                           ;SDCard.c: 77: for(i=0;i<n;i++)
 17918  004F68  0E00               	movlw	0
 17919  004F6A  0100               	movlb	0	; () banked
 17920  004F6C  6F62               	movwf	(dummy_clocks@i+1)& (0+255),b
 17921  004F6E  0E00               	movlw	0
 17922  004F70  6F61               	movwf	dummy_clocks@i& (0+255),b
 17923  004F72  D007               	goto	l231
 17924  004F74                     l232:
 17925                           
 17926                           ; BSR set to: 0
 17927                           ;SDCard.c: 78: {
 17928                           ;SDCard.c: 79: LATBbits.LATB4 = 1;
 17929  004F74  888A               	bsf	3978,4,c	;volatile
 17930                           
 17931                           ; BSR set to: 0
 17932                           ;SDCard.c: 80: leitura_SPI();
 17933  004F76  EC92  F029         	call	_leitura_SPI	;wreg free
 17934                           
 17935                           ;SDCard.c: 81: LATBbits.LATB4 = 0;
 17936  004F7A  988A               	bcf	3978,4,c	;volatile
 17937  004F7C  0100               	movlb	0	; () banked
 17938  004F7E  4B61               	infsnz	dummy_clocks@i& (0+255),f,b
 17939  004F80  2B62               	incf	(dummy_clocks@i+1)& (0+255),f,b
 17940  004F82                     l231:
 17941                           
 17942                           ; BSR set to: 0
 17943                           
 17944                           ; BSR set to: 0
 17945  004F82  5160               	movf	dummy_clocks@n& (0+255),w,b
 17946  004F84  6E21               	movwf	??_dummy_clocks& (0+255),c
 17947  004F86  6A22               	clrf	(??_dummy_clocks+1)& (0+255),c
 17948  004F88  5021               	movf	??_dummy_clocks,w,c
 17949  004F8A  5D61               	subwf	dummy_clocks@i& (0+255),w,b
 17950  004F8C  5022               	movf	??_dummy_clocks+1,w,c
 17951  004F8E  5962               	subwfb	(dummy_clocks@i+1)& (0+255),w,b
 17952  004F90  B0D8               	btfsc	status,0,c
 17953  004F92  0012               	return	
 17954  004F94  D7EF               	goto	l232
 17955  004F96                     __end_of_dummy_clocks:
 17956                           	opt stack 0
 17957                           tosu	equ	0xFFF
 17958                           tosh	equ	0xFFE
 17959                           tosl	equ	0xFFD
 17960                           pclath	equ	0xFFA
 17961                           tblptru	equ	0xFF8
 17962                           tblptrh	equ	0xFF7
 17963                           tblptrl	equ	0xFF6
 17964                           tablat	equ	0xFF5
 17965                           prodh	equ	0xFF4
 17966                           prodl	equ	0xFF3
 17967                           intcon	equ	0xFF2
 17968                           intcon2	equ	0xFF1
 17969                           intcon3	equ	0xFF0
 17970                           indf0	equ	0xFEF
 17971                           postinc0	equ	0xFEE
 17972                           fsr0h	equ	0xFEA
 17973                           fsr0l	equ	0xFE9
 17974                           wreg	equ	0xFE8
 17975                           indf1	equ	0xFE7
 17976                           postinc1	equ	0xFE6
 17977                           postdec1	equ	0xFE5
 17978                           fsr1h	equ	0xFE2
 17979                           fsr1l	equ	0xFE1
 17980                           indf2	equ	0xFDF
 17981                           postinc2	equ	0xFDE
 17982                           postdec2	equ	0xFDD
 17983                           plusw2	equ	0xFDB
 17984                           fsr2h	equ	0xFDA
 17985                           fsr2l	equ	0xFD9
 17986                           status	equ	0xFD8
 17987                           
 17988 ;; *************** function _leitura_SPI *****************
 17989 ;; Defined at:
 17990 ;;		line 83 in file "bibliotecas/SPI.c"
 17991 ;; Parameters:    Size  Location     Type
 17992 ;;		None
 17993 ;; Auto vars:     Size  Location     Type
 17994 ;;		None
 17995 ;; Return value:  Size  Location     Type
 17996 ;;                  1    wreg      unsigned char 
 17997 ;; Registers used:
 17998 ;;		wreg, status,2
 17999 ;; Tracked objects:
 18000 ;;		On entry : 0/0
 18001 ;;		On exit  : 0/0
 18002 ;;		Unchanged: 0/0
 18003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18004 ;;      Params:         0       0       0       0       0       0       0       0       0
 18005 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18006 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18007 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18008 ;;Total ram usage:        0 bytes
 18009 ;; Hardware stack levels used:    1
 18010 ;; Hardware stack levels required when called:    3
 18011 ;; This function calls:
 18012 ;;		Nothing
 18013 ;; This function is called by:
 18014 ;;		_response
 18015 ;;		_dummy_clocks
 18016 ;;		_wait_ready
 18017 ;;		_sdc_disk_write
 18018 ;; This function uses a non-reentrant model
 18019 ;;
 18020                           
 18021                           	psect	text70
 18022  005324                     __ptext70:
 18023                           	opt stack 0
 18024  005324                     _leitura_SPI:
 18025                           	opt stack 17
 18026                           
 18027                           ;SPI.c: 85: SSPBUF = 0xFF;
 18028                           
 18029                           ; BSR set to: 0
 18030                           ;incstack = 0
 18031  005324  68C9               	setf	4041,c	;volatile
 18032                           
 18033                           ;SPI.c: 86: SSPSTATbits.BF = 0;
 18034  005326  90C7               	bcf	4039,0,c	;volatile
 18035  005328  A0C7               	btfss	4039,0,c	;volatile
 18036  00532A  D7FE               	goto	l318
 18037                           
 18038                           ;SPI.c: 88: return (SSPBUF);
 18039  00532C  50C9               	movf	4041,w,c	;volatile
 18040  00532E  0012               	return	
 18041  005330                     __end_of_leitura_SPI:
 18042                           	opt stack 0
 18043                           tosu	equ	0xFFF
 18044                           tosh	equ	0xFFE
 18045                           tosl	equ	0xFFD
 18046                           pclath	equ	0xFFA
 18047                           tblptru	equ	0xFF8
 18048                           tblptrh	equ	0xFF7
 18049                           tblptrl	equ	0xFF6
 18050                           tablat	equ	0xFF5
 18051                           prodh	equ	0xFF4
 18052                           prodl	equ	0xFF3
 18053                           intcon	equ	0xFF2
 18054                           intcon2	equ	0xFF1
 18055                           intcon3	equ	0xFF0
 18056                           indf0	equ	0xFEF
 18057                           postinc0	equ	0xFEE
 18058                           fsr0h	equ	0xFEA
 18059                           fsr0l	equ	0xFE9
 18060                           wreg	equ	0xFE8
 18061                           indf1	equ	0xFE7
 18062                           postinc1	equ	0xFE6
 18063                           postdec1	equ	0xFE5
 18064                           fsr1h	equ	0xFE2
 18065                           fsr1l	equ	0xFE1
 18066                           indf2	equ	0xFDF
 18067                           postinc2	equ	0xFDE
 18068                           postdec2	equ	0xFDD
 18069                           plusw2	equ	0xFDB
 18070                           fsr2h	equ	0xFDA
 18071                           fsr2l	equ	0xFD9
 18072                           status	equ	0xFD8
 18073                           
 18074 ;; *************** function _disk_ioctl *****************
 18075 ;; Defined at:
 18076 ;;		line 198 in file "bibliotecas/diskio.c"
 18077 ;; Parameters:    Size  Location     Type
 18078 ;;  pdrv            1    wreg     unsigned char 
 18079 ;;  cmd             1    0[BANK0 ] unsigned char 
 18080 ;;  buff            2    1[BANK0 ] PTR void 
 18081 ;;		 -> NULL(0), 
 18082 ;; Auto vars:     Size  Location     Type
 18083 ;;  pdrv            1   32[COMRAM] unsigned char 
 18084 ;;  result          2    0        int 
 18085 ;;  res             1   33[COMRAM] enum E25
 18086 ;; Return value:  Size  Location     Type
 18087 ;;                  1    wreg      enum E25
 18088 ;; Registers used:
 18089 ;;		wreg, status,2, status,0
 18090 ;; Tracked objects:
 18091 ;;		On entry : 0/0
 18092 ;;		On exit  : 0/0
 18093 ;;		Unchanged: 0/0
 18094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18095 ;;      Params:         0       3       0       0       0       0       0       0       0
 18096 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18097 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18098 ;;      Totals:         2       3       0       0       0       0       0       0       0
 18099 ;;Total ram usage:        5 bytes
 18100 ;; Hardware stack levels used:    1
 18101 ;; Hardware stack levels required when called:    3
 18102 ;; This function calls:
 18103 ;;		Nothing
 18104 ;; This function is called by:
 18105 ;;		_sync
 18106 ;; This function uses a non-reentrant model
 18107 ;;
 18108                           
 18109                           	psect	text71
 18110  005198                     __ptext71:
 18111                           	opt stack 0
 18112  005198                     _disk_ioctl:
 18113                           	opt stack 22
 18114                           
 18115                           ;incstack = 0
 18116                           ;disk_ioctl@pdrv stored from wreg
 18117  005198  6E21               	movwf	disk_ioctl@pdrv,c
 18118                           
 18119                           ;diskio.c: 204: DRESULT res;
 18120                           ;diskio.c: 205: int result;
 18121                           ;diskio.c: 207: switch (pdrv) {
 18122  00519A  D006               	goto	l393
 18123  00519C                     l394:
 18124                           
 18125                           ;diskio.c: 212: return res;
 18126  00519C  5022               	movf	disk_ioctl@res,w,c
 18127  00519E  0012               	return	
 18128  0051A0                     l396:
 18129                           
 18130                           ;diskio.c: 218: return res;
 18131  0051A0  5022               	movf	disk_ioctl@res,w,c
 18132  0051A2  0012               	return	
 18133  0051A4                     l397:
 18134                           
 18135                           ;diskio.c: 224: return res;
 18136  0051A4  5022               	movf	disk_ioctl@res,w,c
 18137  0051A6  0012               	return	
 18138  0051A8                     l393:
 18139  0051A8  5021               	movf	disk_ioctl@pdrv,w,c
 18140                           
 18141                           ; Switch size 1, requested type "space"
 18142                           ; Number of cases is 3, Range of values is 0 to 2
 18143                           ; switch strategies available:
 18144                           ; Name         Instructions Cycles
 18145                           ; simple_byte           10     6 (average)
 18146                           ;	Chosen strategy is simple_byte
 18147  0051AA  0A00               	xorlw	0	; case 0
 18148  0051AC  B4D8               	btfsc	status,2,c
 18149  0051AE  D7F6               	goto	l394
 18150  0051B0  0A01               	xorlw	1	; case 1
 18151  0051B2  B4D8               	btfsc	status,2,c
 18152  0051B4  D7F5               	goto	l396
 18153  0051B6  0A03               	xorlw	3	; case 2
 18154  0051B8  B4D8               	btfsc	status,2,c
 18155  0051BA  D7F4               	goto	l397
 18156                           
 18157                           ;diskio.c: 227: return RES_PARERR;
 18158  0051BC  0E04               	movlw	4
 18159  0051BE  0012               	return	
 18160  0051C0                     __end_of_disk_ioctl:
 18161                           	opt stack 0
 18162                           tosu	equ	0xFFF
 18163                           tosh	equ	0xFFE
 18164                           tosl	equ	0xFFD
 18165                           pclath	equ	0xFFA
 18166                           tblptru	equ	0xFF8
 18167                           tblptrh	equ	0xFF7
 18168                           tblptrl	equ	0xFF6
 18169                           tablat	equ	0xFF5
 18170                           prodh	equ	0xFF4
 18171                           prodl	equ	0xFF3
 18172                           intcon	equ	0xFF2
 18173                           intcon2	equ	0xFF1
 18174                           intcon3	equ	0xFF0
 18175                           indf0	equ	0xFEF
 18176                           postinc0	equ	0xFEE
 18177                           fsr0h	equ	0xFEA
 18178                           fsr0l	equ	0xFE9
 18179                           wreg	equ	0xFE8
 18180                           indf1	equ	0xFE7
 18181                           postinc1	equ	0xFE6
 18182                           postdec1	equ	0xFE5
 18183                           fsr1h	equ	0xFE2
 18184                           fsr1l	equ	0xFE1
 18185                           indf2	equ	0xFDF
 18186                           postinc2	equ	0xFDE
 18187                           postdec2	equ	0xFDD
 18188                           plusw2	equ	0xFDB
 18189                           fsr2h	equ	0xFDA
 18190                           fsr2l	equ	0xFD9
 18191                           status	equ	0xFD8
 18192                           
 18193 ;; *************** function _get_fattime *****************
 18194 ;; Defined at:
 18195 ;;		line 809 in file "bibliotecas/tff.c"
 18196 ;; Parameters:    Size  Location     Type
 18197 ;;		None
 18198 ;; Auto vars:     Size  Location     Type
 18199 ;;  f_time          9   42[BANK0 ] struct .
 18200 ;; Return value:  Size  Location     Type
 18201 ;;                  4    0[BANK0 ] unsigned long 
 18202 ;; Registers used:
 18203 ;;		wreg, status,2, status,0
 18204 ;; Tracked objects:
 18205 ;;		On entry : 0/0
 18206 ;;		On exit  : 0/0
 18207 ;;		Unchanged: 0/0
 18208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18209 ;;      Params:         0       4       0       0       0       0       0       0       0
 18210 ;;      Locals:         0       9       0       0       0       0       0       0       0
 18211 ;;      Temps:          0      38       0       0       0       0       0       0       0
 18212 ;;      Totals:         0      51       0       0       0       0       0       0       0
 18213 ;;Total ram usage:       51 bytes
 18214 ;; Hardware stack levels used:    1
 18215 ;; Hardware stack levels required when called:    3
 18216 ;; This function calls:
 18217 ;;		Nothing
 18218 ;; This function is called by:
 18219 ;;		_f_open
 18220 ;;		_f_sync
 18221 ;; This function uses a non-reentrant model
 18222 ;;
 18223                           
 18224                           	psect	text72
 18225  003D54                     __ptext72:
 18226                           	opt stack 0
 18227  003D54                     _get_fattime:
 18228                           	opt stack 24
 18229                           
 18230                           ;tff.c: 811: fat_time f_time;
 18231                           ;tff.c: 813: return (DWORD)(f_time.ano ) << 25 |
 18232                           ;tff.c: 814: (DWORD)(f_time.mes) << 21 |
 18233                           ;tff.c: 815: (DWORD)(f_time.mes) << 16 |
 18234                           ;tff.c: 816: (DWORD)(f_time.hora) << 11 |
 18235                           ;tff.c: 817: (DWORD)(f_time.min) << 5 |
 18236                           ;tff.c: 818: (DWORD)(f_time.seg) >> 1;
 18237                           
 18238                           ;incstack = 0
 18239  003D54  90D8               	bcf	status,0,c
 18240  003D56  0100               	movlb	0	; () banked
 18241  003D58  318F               	rrcf	(get_fattime@f_time+5)& (0+255),w,b
 18242  003D5A  6F65               	movwf	(??_get_fattime+1)& (0+255),b
 18243  003D5C  318E               	rrcf	(get_fattime@f_time+4)& (0+255),w,b
 18244  003D5E  6F64               	movwf	??_get_fattime& (0+255),b
 18245  003D60  518C               	movf	(get_fattime@f_time+2)& (0+255),w,b
 18246  003D62  6F66               	movwf	(??_get_fattime+2)& (0+255),b
 18247  003D64  518D               	movf	(get_fattime@f_time+3)& (0+255),w,b
 18248  003D66  6F67               	movwf	(??_get_fattime+3)& (0+255),b
 18249  003D68  6B68               	clrf	(??_get_fattime+4)& (0+255),b
 18250  003D6A  6B69               	clrf	(??_get_fattime+5)& (0+255),b
 18251  003D6C  0E05               	movlw	5
 18252  003D6E                     u11865:
 18253  003D6E  90D8               	bcf	status,0,c
 18254  003D70  3766               	rlcf	(??_get_fattime+2)& (0+255),f,b
 18255  003D72  3767               	rlcf	(??_get_fattime+3)& (0+255),f,b
 18256  003D74  3768               	rlcf	(??_get_fattime+4)& (0+255),f,b
 18257  003D76  3769               	rlcf	(??_get_fattime+5)& (0+255),f,b
 18258  003D78  2EE8               	decfsz	wreg,f,c
 18259  003D7A  D7F9               	goto	u11865
 18260  003D7C  518A               	movf	get_fattime@f_time& (0+255),w,b
 18261  003D7E  6F6A               	movwf	(??_get_fattime+6)& (0+255),b
 18262  003D80  518B               	movf	(get_fattime@f_time+1)& (0+255),w,b
 18263  003D82  6F6B               	movwf	(??_get_fattime+7)& (0+255),b
 18264  003D84  6B6C               	clrf	(??_get_fattime+8)& (0+255),b
 18265  003D86  6B6D               	clrf	(??_get_fattime+9)& (0+255),b
 18266  003D88  0E0B               	movlw	11
 18267  003D8A                     u11875:
 18268  003D8A  90D8               	bcf	status,0,c
 18269  003D8C  376A               	rlcf	(??_get_fattime+6)& (0+255),f,b
 18270  003D8E  376B               	rlcf	(??_get_fattime+7)& (0+255),f,b
 18271  003D90  376C               	rlcf	(??_get_fattime+8)& (0+255),f,b
 18272  003D92  376D               	rlcf	(??_get_fattime+9)& (0+255),f,b
 18273  003D94  2EE8               	decfsz	wreg,f,c
 18274  003D96  D7F9               	goto	u11875
 18275  003D98  C091  F06E         	movff	get_fattime@f_time+7,??_get_fattime+10
 18276  003D9C  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 18277  003D9E  6B70               	clrf	(??_get_fattime+12)& (0+255),b
 18278  003DA0  6B71               	clrf	(??_get_fattime+13)& (0+255),b
 18279  003DA2  C06F  F071         	movff	??_get_fattime+11,??_get_fattime+13
 18280  003DA6  C06E  F070         	movff	??_get_fattime+10,??_get_fattime+12
 18281  003DAA  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 18282  003DAC  6B6E               	clrf	(??_get_fattime+10)& (0+255),b
 18283  003DAE  C091  F072         	movff	get_fattime@f_time+7,??_get_fattime+14
 18284  003DB2  6B73               	clrf	(??_get_fattime+15)& (0+255),b
 18285  003DB4  6B74               	clrf	(??_get_fattime+16)& (0+255),b
 18286  003DB6  6B75               	clrf	(??_get_fattime+17)& (0+255),b
 18287  003DB8  0E15               	movlw	21
 18288  003DBA                     u11885:
 18289  003DBA  90D8               	bcf	status,0,c
 18290  003DBC  3772               	rlcf	(??_get_fattime+14)& (0+255),f,b
 18291  003DBE  3773               	rlcf	(??_get_fattime+15)& (0+255),f,b
 18292  003DC0  3774               	rlcf	(??_get_fattime+16)& (0+255),f,b
 18293  003DC2  3775               	rlcf	(??_get_fattime+17)& (0+255),f,b
 18294  003DC4  2EE8               	decfsz	wreg,f,c
 18295  003DC6  D7F9               	goto	u11885
 18296  003DC8  C092  F076         	movff	get_fattime@f_time+8,??_get_fattime+18
 18297  003DCC  6B77               	clrf	(??_get_fattime+19)& (0+255),b
 18298  003DCE  6B78               	clrf	(??_get_fattime+20)& (0+255),b
 18299  003DD0  6B79               	clrf	(??_get_fattime+21)& (0+255),b
 18300  003DD2  0E19               	movlw	25
 18301  003DD4                     u11895:
 18302  003DD4  90D8               	bcf	status,0,c
 18303  003DD6  3776               	rlcf	(??_get_fattime+18)& (0+255),f,b
 18304  003DD8  3777               	rlcf	(??_get_fattime+19)& (0+255),f,b
 18305  003DDA  3778               	rlcf	(??_get_fattime+20)& (0+255),f,b
 18306  003DDC  3779               	rlcf	(??_get_fattime+21)& (0+255),f,b
 18307  003DDE  2EE8               	decfsz	wreg,f,c
 18308  003DE0  D7F9               	goto	u11895
 18309  003DE2  5172               	movf	(??_get_fattime+14)& (0+255),w,b
 18310  003DE4  1176               	iorwf	(??_get_fattime+18)& (0+255),w,b
 18311  003DE6  6F7A               	movwf	(??_get_fattime+22)& (0+255),b
 18312  003DE8  5173               	movf	(??_get_fattime+15)& (0+255),w,b
 18313  003DEA  1177               	iorwf	(??_get_fattime+19)& (0+255),w,b
 18314  003DEC  6F7B               	movwf	(??_get_fattime+23)& (0+255),b
 18315  003DEE  5174               	movf	(??_get_fattime+16)& (0+255),w,b
 18316  003DF0  1178               	iorwf	(??_get_fattime+20)& (0+255),w,b
 18317  003DF2  6F7C               	movwf	(??_get_fattime+24)& (0+255),b
 18318  003DF4  5175               	movf	(??_get_fattime+17)& (0+255),w,b
 18319  003DF6  1179               	iorwf	(??_get_fattime+21)& (0+255),w,b
 18320  003DF8  6F7D               	movwf	(??_get_fattime+25)& (0+255),b
 18321  003DFA  516E               	movf	(??_get_fattime+10)& (0+255),w,b
 18322  003DFC  117A               	iorwf	(??_get_fattime+22)& (0+255),w,b
 18323  003DFE  6F7E               	movwf	(??_get_fattime+26)& (0+255),b
 18324  003E00  516F               	movf	(??_get_fattime+11)& (0+255),w,b
 18325  003E02  117B               	iorwf	(??_get_fattime+23)& (0+255),w,b
 18326  003E04  6F7F               	movwf	(??_get_fattime+27)& (0+255),b
 18327  003E06  5170               	movf	(??_get_fattime+12)& (0+255),w,b
 18328  003E08  117C               	iorwf	(??_get_fattime+24)& (0+255),w,b
 18329  003E0A  6F80               	movwf	(??_get_fattime+28)& (0+255),b
 18330  003E0C  5171               	movf	(??_get_fattime+13)& (0+255),w,b
 18331  003E0E  117D               	iorwf	(??_get_fattime+25)& (0+255),w,b
 18332  003E10  6F81               	movwf	(??_get_fattime+29)& (0+255),b
 18333  003E12  516A               	movf	(??_get_fattime+6)& (0+255),w,b
 18334  003E14  117E               	iorwf	(??_get_fattime+26)& (0+255),w,b
 18335  003E16  6F82               	movwf	(??_get_fattime+30)& (0+255),b
 18336  003E18  516B               	movf	(??_get_fattime+7)& (0+255),w,b
 18337  003E1A  117F               	iorwf	(??_get_fattime+27)& (0+255),w,b
 18338  003E1C  6F83               	movwf	(??_get_fattime+31)& (0+255),b
 18339  003E1E  516C               	movf	(??_get_fattime+8)& (0+255),w,b
 18340  003E20  1180               	iorwf	(??_get_fattime+28)& (0+255),w,b
 18341  003E22  6F84               	movwf	(??_get_fattime+32)& (0+255),b
 18342  003E24  516D               	movf	(??_get_fattime+9)& (0+255),w,b
 18343  003E26  1181               	iorwf	(??_get_fattime+29)& (0+255),w,b
 18344  003E28  6F85               	movwf	(??_get_fattime+33)& (0+255),b
 18345  003E2A  5166               	movf	(??_get_fattime+2)& (0+255),w,b
 18346  003E2C  1182               	iorwf	(??_get_fattime+30)& (0+255),w,b
 18347  003E2E  6F86               	movwf	(??_get_fattime+34)& (0+255),b
 18348  003E30  5167               	movf	(??_get_fattime+3)& (0+255),w,b
 18349  003E32  1183               	iorwf	(??_get_fattime+31)& (0+255),w,b
 18350  003E34  6F87               	movwf	(??_get_fattime+35)& (0+255),b
 18351  003E36  5168               	movf	(??_get_fattime+4)& (0+255),w,b
 18352  003E38  1184               	iorwf	(??_get_fattime+32)& (0+255),w,b
 18353  003E3A  6F88               	movwf	(??_get_fattime+36)& (0+255),b
 18354  003E3C  5169               	movf	(??_get_fattime+5)& (0+255),w,b
 18355  003E3E  1185               	iorwf	(??_get_fattime+33)& (0+255),w,b
 18356  003E40  6F89               	movwf	(??_get_fattime+37)& (0+255),b
 18357  003E42  5164               	movf	??_get_fattime& (0+255),w,b
 18358  003E44  1186               	iorwf	(??_get_fattime+34)& (0+255),w,b
 18359  003E46  6F60               	movwf	?_get_fattime& (0+255),b
 18360  003E48  5165               	movf	(??_get_fattime+1)& (0+255),w,b
 18361  003E4A  1187               	iorwf	(??_get_fattime+35)& (0+255),w,b
 18362  003E4C  6F61               	movwf	(?_get_fattime+1)& (0+255),b
 18363  003E4E  0E00               	movlw	0
 18364  003E50  1188               	iorwf	(??_get_fattime+36)& (0+255),w,b
 18365  003E52  6F62               	movwf	(?_get_fattime+2)& (0+255),b
 18366  003E54  0E00               	movlw	0
 18367  003E56  1189               	iorwf	(??_get_fattime+37)& (0+255),w,b
 18368  003E58  6F63               	movwf	(?_get_fattime+3)& (0+255),b
 18369  003E5A  0012               	return	
 18370  003E5C                     __end_of_get_fattime:
 18371                           	opt stack 0
 18372                           tosu	equ	0xFFF
 18373                           tosh	equ	0xFFE
 18374                           tosl	equ	0xFFD
 18375                           pclath	equ	0xFFA
 18376                           tblptru	equ	0xFF8
 18377                           tblptrh	equ	0xFF7
 18378                           tblptrl	equ	0xFF6
 18379                           tablat	equ	0xFF5
 18380                           prodh	equ	0xFF4
 18381                           prodl	equ	0xFF3
 18382                           intcon	equ	0xFF2
 18383                           intcon2	equ	0xFF1
 18384                           intcon3	equ	0xFF0
 18385                           indf0	equ	0xFEF
 18386                           postinc0	equ	0xFEE
 18387                           fsr0h	equ	0xFEA
 18388                           fsr0l	equ	0xFE9
 18389                           wreg	equ	0xFE8
 18390                           indf1	equ	0xFE7
 18391                           postinc1	equ	0xFE6
 18392                           postdec1	equ	0xFE5
 18393                           fsr1h	equ	0xFE2
 18394                           fsr1l	equ	0xFE1
 18395                           indf2	equ	0xFDF
 18396                           postinc2	equ	0xFDE
 18397                           postdec2	equ	0xFDD
 18398                           plusw2	equ	0xFDB
 18399                           fsr2h	equ	0xFDA
 18400                           fsr2l	equ	0xFD9
 18401                           status	equ	0xFD8
 18402                           
 18403 ;; *************** function _escreve_inteiro_lcd *****************
 18404 ;; Defined at:
 18405 ;;		line 376 in file "bibliotecas/display_lcd.c"
 18406 ;; Parameters:    Size  Location     Type
 18407 ;;  valor           2   24[BANK0 ] int 
 18408 ;; Auto vars:     Size  Location     Type
 18409 ;;  texto           7   26[BANK0 ] unsigned char [7]
 18410 ;; Return value:  Size  Location     Type
 18411 ;;                  1    wreg      void 
 18412 ;; Registers used:
 18413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18414 ;; Tracked objects:
 18415 ;;		On entry : 0/0
 18416 ;;		On exit  : 0/0
 18417 ;;		Unchanged: 0/0
 18418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18419 ;;      Params:         0       2       0       0       0       0       0       0       0
 18420 ;;      Locals:         0       7       0       0       0       0       0       0       0
 18421 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18422 ;;      Totals:         0       9       0       0       0       0       0       0       0
 18423 ;;Total ram usage:        9 bytes
 18424 ;; Hardware stack levels used:    1
 18425 ;; Hardware stack levels required when called:    6
 18426 ;; This function calls:
 18427 ;;		_escreve_frase_ram_lcd
 18428 ;;		_itoa
 18429 ;; This function is called by:
 18430 ;;		_escrita_sdcard
 18431 ;;		_escreve_float_lcd
 18432 ;; This function uses a non-reentrant model
 18433 ;;
 18434                           
 18435                           	psect	text73
 18436  004F96                     __ptext73:
 18437                           	opt stack 0
 18438  004F96                     _escreve_inteiro_lcd:
 18439                           	opt stack 22
 18440                           
 18441                           ;display_lcd.c: 378: char texto[7] = "000000";
 18442                           
 18443                           ; BSR set to: 0
 18444                           ;incstack = 0
 18445  004F96  EE21  F0E2         	lfsr	2,escreve_inteiro_lcd@F3966
 18446  004F9A  EE10  F07A         	lfsr	1,escreve_inteiro_lcd@texto
 18447  004F9E  0E06               	movlw	6
 18448  004FA0                     u13091:
 18449  004FA0  CFDB FFE3          	movff	plusw2,plusw1
 18450  004FA4  06E8               	decf	wreg,f,c
 18451  004FA6  E2FC               	bc	u13091
 18452                           
 18453                           ;display_lcd.c: 379: itoa(texto,valor, 10);
 18454  004FA8  0E7A               	movlw	low escreve_inteiro_lcd@texto
 18455  004FAA  0100               	movlb	0	; () banked
 18456  004FAC  6F70               	movwf	itoa@buf& (0+255),b
 18457  004FAE  0E00               	movlw	high escreve_inteiro_lcd@texto
 18458  004FB0  6F71               	movwf	(itoa@buf+1)& (0+255),b
 18459  004FB2  C078  F072         	movff	escreve_inteiro_lcd@valor,itoa@val
 18460  004FB6  C079  F073         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
 18461  004FBA  0E00               	movlw	0
 18462  004FBC  6F75               	movwf	(itoa@base+1)& (0+255),b
 18463  004FBE  0E0A               	movlw	10
 18464  004FC0  6F74               	movwf	itoa@base& (0+255),b
 18465  004FC2  EC45  F027         	call	_itoa	;wreg free
 18466                           
 18467                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
 18468  004FC6  0E7A               	movlw	low escreve_inteiro_lcd@texto
 18469  004FC8  0100               	movlb	0	; () banked
 18470  004FCA  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 18471  004FCC  0E00               	movlw	high escreve_inteiro_lcd@texto
 18472  004FCE  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 18473  004FD0  EC19  F026         	call	_escreve_frase_ram_lcd	;wreg free
 18474  004FD4  0012               	return		;funcret
 18475  004FD6                     __end_of_escreve_inteiro_lcd:
 18476                           	opt stack 0
 18477                           tosu	equ	0xFFF
 18478                           tosh	equ	0xFFE
 18479                           tosl	equ	0xFFD
 18480                           pclath	equ	0xFFA
 18481                           tblptru	equ	0xFF8
 18482                           tblptrh	equ	0xFF7
 18483                           tblptrl	equ	0xFF6
 18484                           tablat	equ	0xFF5
 18485                           prodh	equ	0xFF4
 18486                           prodl	equ	0xFF3
 18487                           intcon	equ	0xFF2
 18488                           intcon2	equ	0xFF1
 18489                           intcon3	equ	0xFF0
 18490                           indf0	equ	0xFEF
 18491                           postinc0	equ	0xFEE
 18492                           fsr0h	equ	0xFEA
 18493                           fsr0l	equ	0xFE9
 18494                           wreg	equ	0xFE8
 18495                           indf1	equ	0xFE7
 18496                           postinc1	equ	0xFE6
 18497                           postdec1	equ	0xFE5
 18498                           plusw1	equ	0xFE3
 18499                           fsr1h	equ	0xFE2
 18500                           fsr1l	equ	0xFE1
 18501                           indf2	equ	0xFDF
 18502                           postinc2	equ	0xFDE
 18503                           postdec2	equ	0xFDD
 18504                           plusw2	equ	0xFDB
 18505                           fsr2h	equ	0xFDA
 18506                           fsr2l	equ	0xFD9
 18507                           status	equ	0xFD8
 18508                           
 18509 ;; *************** function _itoa *****************
 18510 ;; Defined at:
 18511 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 18512 ;; Parameters:    Size  Location     Type
 18513 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 18514 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 18515 ;;  val             2   18[BANK0 ] int 
 18516 ;;  base            2   20[BANK0 ] int 
 18517 ;; Auto vars:     Size  Location     Type
 18518 ;;  cp              2   22[BANK0 ] PTR unsigned char 
 18519 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 18520 ;; Return value:  Size  Location     Type
 18521 ;;                  2   16[BANK0 ] PTR unsigned char 
 18522 ;; Registers used:
 18523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18524 ;; Tracked objects:
 18525 ;;		On entry : 0/0
 18526 ;;		On exit  : 0/0
 18527 ;;		Unchanged: 0/0
 18528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18529 ;;      Params:         0       6       0       0       0       0       0       0       0
 18530 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18531 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18532 ;;      Totals:         0       8       0       0       0       0       0       0       0
 18533 ;;Total ram usage:        8 bytes
 18534 ;; Hardware stack levels used:    1
 18535 ;; Hardware stack levels required when called:    5
 18536 ;; This function calls:
 18537 ;;		_utoa
 18538 ;; This function is called by:
 18539 ;;		_escreve_inteiro_lcd
 18540 ;;		_escreve_inteiro_uart
 18541 ;; This function uses a non-reentrant model
 18542 ;;
 18543                           
 18544                           	psect	text74
 18545  004E8A                     __ptext74:
 18546                           	opt stack 0
 18547  004E8A                     _itoa:
 18548                           	opt stack 22
 18549                           
 18550                           ;incstack = 0
 18551  004E8A  C070  F076         	movff	itoa@buf,itoa@cp
 18552  004E8E  C071  F077         	movff	itoa@buf+1,itoa@cp+1
 18553  004E92  0100               	movlb	0	; () banked
 18554  004E94  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 18555  004E96  D00C               	goto	l1666
 18556                           
 18557                           ; BSR set to: 0
 18558  004E98  C070  FFD9         	movff	itoa@buf,fsr2l
 18559  004E9C  C071  FFDA         	movff	itoa@buf+1,fsr2h
 18560  004EA0  0E2D               	movlw	45
 18561  004EA2  6EDF               	movwf	indf2,c
 18562                           
 18563                           ; BSR set to: 0
 18564  004EA4  4B70               	infsnz	itoa@buf& (0+255),f,b
 18565  004EA6  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 18566                           
 18567                           ; BSR set to: 0
 18568  004EA8  6D72               	negf	itoa@val& (0+255),b
 18569  004EAA  1F73               	comf	(itoa@val+1)& (0+255),f,b
 18570  004EAC  B0D8               	btfsc	status,0,c
 18571  004EAE  2B73               	incf	(itoa@val+1)& (0+255),f,b
 18572  004EB0                     l1666:
 18573                           
 18574                           ; BSR set to: 0
 18575                           
 18576                           ; BSR set to: 0
 18577  004EB0  C070  F067         	movff	itoa@buf,utoa@buf
 18578  004EB4  C071  F068         	movff	itoa@buf+1,utoa@buf+1
 18579  004EB8  C072  F069         	movff	itoa@val,utoa@val
 18580  004EBC  C073  F06A         	movff	itoa@val+1,utoa@val+1
 18581  004EC0  C074  F06B         	movff	itoa@base,utoa@base
 18582  004EC4  C075  F06C         	movff	itoa@base+1,utoa@base+1
 18583  004EC8  EC5F  F020         	call	_utoa	;wreg free
 18584  004ECC  0012               	return	
 18585  004ECE                     __end_of_itoa:
 18586                           	opt stack 0
 18587                           tosu	equ	0xFFF
 18588                           tosh	equ	0xFFE
 18589                           tosl	equ	0xFFD
 18590                           pclath	equ	0xFFA
 18591                           tblptru	equ	0xFF8
 18592                           tblptrh	equ	0xFF7
 18593                           tblptrl	equ	0xFF6
 18594                           tablat	equ	0xFF5
 18595                           prodh	equ	0xFF4
 18596                           prodl	equ	0xFF3
 18597                           intcon	equ	0xFF2
 18598                           intcon2	equ	0xFF1
 18599                           intcon3	equ	0xFF0
 18600                           indf0	equ	0xFEF
 18601                           postinc0	equ	0xFEE
 18602                           fsr0h	equ	0xFEA
 18603                           fsr0l	equ	0xFE9
 18604                           wreg	equ	0xFE8
 18605                           indf1	equ	0xFE7
 18606                           postinc1	equ	0xFE6
 18607                           postdec1	equ	0xFE5
 18608                           plusw1	equ	0xFE3
 18609                           fsr1h	equ	0xFE2
 18610                           fsr1l	equ	0xFE1
 18611                           indf2	equ	0xFDF
 18612                           postinc2	equ	0xFDE
 18613                           postdec2	equ	0xFDD
 18614                           plusw2	equ	0xFDB
 18615                           fsr2h	equ	0xFDA
 18616                           fsr2l	equ	0xFD9
 18617                           status	equ	0xFD8
 18618                           
 18619 ;; *************** function _utoa *****************
 18620 ;; Defined at:
 18621 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 18622 ;; Parameters:    Size  Location     Type
 18623 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 18624 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 18625 ;;  val             2    9[BANK0 ] unsigned int 
 18626 ;;  base            2   11[BANK0 ] int 
 18627 ;; Auto vars:     Size  Location     Type
 18628 ;;  v               2   13[BANK0 ] unsigned int 
 18629 ;;  c               1   15[BANK0 ] unsigned char 
 18630 ;; Return value:  Size  Location     Type
 18631 ;;                  2    7[BANK0 ] PTR unsigned char 
 18632 ;; Registers used:
 18633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18634 ;; Tracked objects:
 18635 ;;		On entry : 0/0
 18636 ;;		On exit  : 0/0
 18637 ;;		Unchanged: 0/0
 18638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18639 ;;      Params:         0       6       0       0       0       0       0       0       0
 18640 ;;      Locals:         0       3       0       0       0       0       0       0       0
 18641 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18642 ;;      Totals:         0       9       0       0       0       0       0       0       0
 18643 ;;Total ram usage:        9 bytes
 18644 ;; Hardware stack levels used:    1
 18645 ;; Hardware stack levels required when called:    4
 18646 ;; This function calls:
 18647 ;;		___lwdiv
 18648 ;;		___lwmod
 18649 ;; This function is called by:
 18650 ;;		_itoa
 18651 ;; This function uses a non-reentrant model
 18652 ;;
 18653                           
 18654                           	psect	text75
 18655  0040BE                     __ptext75:
 18656                           	opt stack 0
 18657  0040BE                     _utoa:
 18658                           	opt stack 22
 18659                           
 18660                           ;incstack = 0
 18661  0040BE  C069  F06D         	movff	utoa@val,utoa@v
 18662  0040C2  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 18663  0040C6  C06D  F060         	movff	utoa@v,___lwdiv@dividend
 18664  0040CA  C06E  F061         	movff	utoa@v+1,___lwdiv@dividend+1
 18665  0040CE  C06B  F062         	movff	utoa@base,___lwdiv@divisor
 18666  0040D2  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
 18667  0040D6  ECEF  F025         	call	___lwdiv	;wreg free
 18668  0040DA  C060  F06D         	movff	?___lwdiv,utoa@v
 18669  0040DE  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 18670  0040E2  0100               	movlb	0	; () banked
 18671  0040E4  4B67               	infsnz	utoa@buf& (0+255),f,b
 18672  0040E6  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 18673                           
 18674                           ; BSR set to: 0
 18675  0040E8  516D               	movf	utoa@v& (0+255),w,b
 18676  0040EA  116E               	iorwf	(utoa@v+1)& (0+255),w,b
 18677  0040EC  A4D8               	btfss	status,2,c
 18678  0040EE  D7EB               	goto	l1670
 18679                           
 18680                           ; BSR set to: 0
 18681                           
 18682                           ; BSR set to: 0
 18683  0040F0  C067  FFD9         	movff	utoa@buf,fsr2l
 18684  0040F4  C068  FFDA         	movff	utoa@buf+1,fsr2h
 18685  0040F8  0E00               	movlw	0
 18686  0040FA  6EDF               	movwf	indf2,c
 18687                           
 18688                           ; BSR set to: 0
 18689  0040FC  0767               	decf	utoa@buf& (0+255),f,b
 18690  0040FE  A0D8               	btfss	status,0,c
 18691  004100  0768               	decf	(utoa@buf+1)& (0+255),f,b
 18692  004102                     
 18693                           ; BSR set to: 0
 18694                           
 18695                           ; BSR set to: 0
 18696  004102  C069  F060         	movff	utoa@val,___lwmod@dividend
 18697  004106  C06A  F061         	movff	utoa@val+1,___lwmod@dividend+1
 18698  00410A  C06B  F062         	movff	utoa@base,___lwmod@divisor
 18699  00410E  C06C  F063         	movff	utoa@base+1,___lwmod@divisor+1
 18700  004112  EC67  F027         	call	___lwmod	;wreg free
 18701  004116  0100               	movlb	0	; () banked
 18702  004118  5160               	movf	?___lwmod& (0+255),w,b
 18703  00411A  6F6F               	movwf	utoa@c& (0+255),b
 18704                           
 18705                           ; BSR set to: 0
 18706  00411C  C069  F060         	movff	utoa@val,___lwdiv@dividend
 18707  004120  C06A  F061         	movff	utoa@val+1,___lwdiv@dividend+1
 18708  004124  C06B  F062         	movff	utoa@base,___lwdiv@divisor
 18709  004128  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
 18710  00412C  ECEF  F025         	call	___lwdiv	;wreg free
 18711  004130  C060  F069         	movff	?___lwdiv,utoa@val
 18712  004134  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 18713  004138  0E09               	movlw	9
 18714  00413A  0100               	movlb	0	; () banked
 18715  00413C  656F               	cpfsgt	utoa@c& (0+255),b
 18716  00413E  D002               	goto	l1673
 18717                           
 18718                           ; BSR set to: 0
 18719  004140  0E07               	movlw	7
 18720  004142  276F               	addwf	utoa@c& (0+255),f,b
 18721  004144                     l1673:
 18722                           
 18723                           ; BSR set to: 0
 18724  004144  0E30               	movlw	48
 18725  004146  276F               	addwf	utoa@c& (0+255),f,b
 18726                           
 18727                           ; BSR set to: 0
 18728  004148  C067  FFD9         	movff	utoa@buf,fsr2l
 18729  00414C  C068  FFDA         	movff	utoa@buf+1,fsr2h
 18730  004150  C06F  FFDF         	movff	utoa@c,indf2
 18731                           
 18732                           ; BSR set to: 0
 18733  004154  0767               	decf	utoa@buf& (0+255),f,b
 18734  004156  A0D8               	btfss	status,0,c
 18735  004158  0768               	decf	(utoa@buf+1)& (0+255),f,b
 18736                           
 18737                           ; BSR set to: 0
 18738  00415A  5169               	movf	utoa@val& (0+255),w,b
 18739  00415C  116A               	iorwf	(utoa@val+1)& (0+255),w,b
 18740  00415E  A4D8               	btfss	status,2,c
 18741  004160  D7D0               	goto	l1672
 18742                           
 18743                           ; BSR set to: 0
 18744                           ;	Return value of _utoa is never used
 18745                           
 18746                           ; BSR set to: 0
 18747  004162  4B67               	infsnz	utoa@buf& (0+255),f,b
 18748  004164  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 18749  004166  0012               	return	
 18750  004168                     __end_of_utoa:
 18751                           	opt stack 0
 18752                           tosu	equ	0xFFF
 18753                           tosh	equ	0xFFE
 18754                           tosl	equ	0xFFD
 18755                           pclath	equ	0xFFA
 18756                           tblptru	equ	0xFF8
 18757                           tblptrh	equ	0xFF7
 18758                           tblptrl	equ	0xFF6
 18759                           tablat	equ	0xFF5
 18760                           prodh	equ	0xFF4
 18761                           prodl	equ	0xFF3
 18762                           intcon	equ	0xFF2
 18763                           intcon2	equ	0xFF1
 18764                           intcon3	equ	0xFF0
 18765                           indf0	equ	0xFEF
 18766                           postinc0	equ	0xFEE
 18767                           fsr0h	equ	0xFEA
 18768                           fsr0l	equ	0xFE9
 18769                           wreg	equ	0xFE8
 18770                           indf1	equ	0xFE7
 18771                           postinc1	equ	0xFE6
 18772                           postdec1	equ	0xFE5
 18773                           plusw1	equ	0xFE3
 18774                           fsr1h	equ	0xFE2
 18775                           fsr1l	equ	0xFE1
 18776                           indf2	equ	0xFDF
 18777                           postinc2	equ	0xFDE
 18778                           postdec2	equ	0xFDD
 18779                           plusw2	equ	0xFDB
 18780                           fsr2h	equ	0xFDA
 18781                           fsr2l	equ	0xFD9
 18782                           status	equ	0xFD8
 18783                           
 18784 ;; *************** function ___lwmod *****************
 18785 ;; Defined at:
 18786 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 18787 ;; Parameters:    Size  Location     Type
 18788 ;;  dividend        2    0[BANK0 ] unsigned int 
 18789 ;;  divisor         2    2[BANK0 ] unsigned int 
 18790 ;; Auto vars:     Size  Location     Type
 18791 ;;  counter         1   32[COMRAM] unsigned char 
 18792 ;; Return value:  Size  Location     Type
 18793 ;;                  2    0[BANK0 ] unsigned int 
 18794 ;; Registers used:
 18795 ;;		wreg, status,2, status,0
 18796 ;; Tracked objects:
 18797 ;;		On entry : 0/0
 18798 ;;		On exit  : 0/0
 18799 ;;		Unchanged: 0/0
 18800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18801 ;;      Params:         0       4       0       0       0       0       0       0       0
 18802 ;;      Locals:         1       0       0       0       0       0       0       0       0
 18803 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18804 ;;      Totals:         1       4       0       0       0       0       0       0       0
 18805 ;;Total ram usage:        5 bytes
 18806 ;; Hardware stack levels used:    1
 18807 ;; Hardware stack levels required when called:    3
 18808 ;; This function calls:
 18809 ;;		Nothing
 18810 ;; This function is called by:
 18811 ;;		_utoa
 18812 ;;		_converte_inteiro_matriz
 18813 ;; This function uses a non-reentrant model
 18814 ;;
 18815                           
 18816                           	psect	text76
 18817  004ECE                     __ptext76:
 18818                           	opt stack 0
 18819  004ECE                     ___lwmod:
 18820                           	opt stack 22
 18821                           
 18822                           ; BSR set to: 0
 18823                           ;incstack = 0
 18824  004ECE  0100               	movlb	0	; () banked
 18825  004ED0  5162               	movf	___lwmod@divisor& (0+255),w,b
 18826  004ED2  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18827  004ED4  B4D8               	btfsc	status,2,c
 18828  004ED6  D018               	goto	l1768
 18829                           
 18830                           ; BSR set to: 0
 18831  004ED8  0E01               	movlw	1
 18832  004EDA  6E21               	movwf	___lwmod@counter,c
 18833  004EDC  D004               	goto	l1763
 18834  004EDE                     
 18835                           ; BSR set to: 0
 18836                           
 18837                           ; BSR set to: 0
 18838  004EDE  90D8               	bcf	status,0,c
 18839  004EE0  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 18840  004EE2  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18841  004EE4  2A21               	incf	___lwmod@counter,f,c
 18842  004EE6                     l1763:
 18843                           
 18844                           ; BSR set to: 0
 18845                           
 18846                           ; BSR set to: 0
 18847  004EE6  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18848  004EE8  D7FA               	goto	l1764
 18849  004EEA                     u11410:
 18850                           
 18851                           ; BSR set to: 0
 18852                           
 18853                           ; BSR set to: 0
 18854                           
 18855                           ; BSR set to: 0
 18856  004EEA  5162               	movf	___lwmod@divisor& (0+255),w,b
 18857  004EEC  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 18858  004EEE  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18859  004EF0  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18860  004EF2  A0D8               	btfss	status,0,c
 18861  004EF4  D004               	goto	l1767
 18862                           
 18863                           ; BSR set to: 0
 18864  004EF6  5162               	movf	___lwmod@divisor& (0+255),w,b
 18865  004EF8  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 18866  004EFA  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18867  004EFC  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18868  004EFE                     l1767:
 18869                           
 18870                           ; BSR set to: 0
 18871                           
 18872                           ; BSR set to: 0
 18873  004EFE  90D8               	bcf	status,0,c
 18874  004F00  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18875  004F02  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 18876                           
 18877                           ; BSR set to: 0
 18878  004F04  2E21               	decfsz	___lwmod@counter,f,c
 18879  004F06  D7F1               	goto	u11410
 18880  004F08                     l1768:
 18881                           
 18882                           ; BSR set to: 0
 18883                           
 18884                           ; BSR set to: 0
 18885  004F08  C060  F060         	movff	___lwmod@dividend,?___lwmod
 18886  004F0C  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 18887                           
 18888                           ; BSR set to: 0
 18889  004F10  0012               	return		;funcret
 18890  004F12                     __end_of___lwmod:
 18891                           	opt stack 0
 18892                           tosu	equ	0xFFF
 18893                           tosh	equ	0xFFE
 18894                           tosl	equ	0xFFD
 18895                           pclath	equ	0xFFA
 18896                           tblptru	equ	0xFF8
 18897                           tblptrh	equ	0xFF7
 18898                           tblptrl	equ	0xFF6
 18899                           tablat	equ	0xFF5
 18900                           prodh	equ	0xFF4
 18901                           prodl	equ	0xFF3
 18902                           intcon	equ	0xFF2
 18903                           intcon2	equ	0xFF1
 18904                           intcon3	equ	0xFF0
 18905                           indf0	equ	0xFEF
 18906                           postinc0	equ	0xFEE
 18907                           fsr0h	equ	0xFEA
 18908                           fsr0l	equ	0xFE9
 18909                           wreg	equ	0xFE8
 18910                           indf1	equ	0xFE7
 18911                           postinc1	equ	0xFE6
 18912                           postdec1	equ	0xFE5
 18913                           plusw1	equ	0xFE3
 18914                           fsr1h	equ	0xFE2
 18915                           fsr1l	equ	0xFE1
 18916                           indf2	equ	0xFDF
 18917                           postinc2	equ	0xFDE
 18918                           postdec2	equ	0xFDD
 18919                           plusw2	equ	0xFDB
 18920                           fsr2h	equ	0xFDA
 18921                           fsr2l	equ	0xFD9
 18922                           status	equ	0xFD8
 18923                           
 18924 ;; *************** function ___lwdiv *****************
 18925 ;; Defined at:
 18926 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 18927 ;; Parameters:    Size  Location     Type
 18928 ;;  dividend        2    0[BANK0 ] unsigned int 
 18929 ;;  divisor         2    2[BANK0 ] unsigned int 
 18930 ;; Auto vars:     Size  Location     Type
 18931 ;;  quotient        2    5[BANK0 ] unsigned int 
 18932 ;;  counter         1    4[BANK0 ] unsigned char 
 18933 ;; Return value:  Size  Location     Type
 18934 ;;                  2    0[BANK0 ] unsigned int 
 18935 ;; Registers used:
 18936 ;;		wreg, status,2, status,0
 18937 ;; Tracked objects:
 18938 ;;		On entry : 0/0
 18939 ;;		On exit  : 0/0
 18940 ;;		Unchanged: 0/0
 18941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18942 ;;      Params:         0       4       0       0       0       0       0       0       0
 18943 ;;      Locals:         0       3       0       0       0       0       0       0       0
 18944 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18945 ;;      Totals:         0       7       0       0       0       0       0       0       0
 18946 ;;Total ram usage:        7 bytes
 18947 ;; Hardware stack levels used:    1
 18948 ;; Hardware stack levels required when called:    3
 18949 ;; This function calls:
 18950 ;;		Nothing
 18951 ;; This function is called by:
 18952 ;;		_utoa
 18953 ;;		_converte_inteiro_matriz
 18954 ;; This function uses a non-reentrant model
 18955 ;;
 18956                           
 18957                           	psect	text77
 18958  004BDE                     __ptext77:
 18959                           	opt stack 0
 18960  004BDE                     ___lwdiv:
 18961                           	opt stack 22
 18962                           
 18963                           ; BSR set to: 0
 18964                           ;incstack = 0
 18965  004BDE  0E00               	movlw	0
 18966  004BE0  0100               	movlb	0	; () banked
 18967  004BE2  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18968  004BE4  0E00               	movlw	0
 18969  004BE6  6F65               	movwf	___lwdiv@quotient& (0+255),b
 18970                           
 18971                           ; BSR set to: 0
 18972  004BE8  5162               	movf	___lwdiv@divisor& (0+255),w,b
 18973  004BEA  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18974  004BEC  B4D8               	btfsc	status,2,c
 18975  004BEE  D01C               	goto	l1758
 18976                           
 18977                           ; BSR set to: 0
 18978  004BF0  0E01               	movlw	1
 18979  004BF2  6F64               	movwf	___lwdiv@counter& (0+255),b
 18980  004BF4  D004               	goto	l1753
 18981  004BF6                     
 18982                           ; BSR set to: 0
 18983                           
 18984                           ; BSR set to: 0
 18985  004BF6  90D8               	bcf	status,0,c
 18986  004BF8  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 18987  004BFA  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18988  004BFC  2B64               	incf	___lwdiv@counter& (0+255),f,b
 18989  004BFE                     l1753:
 18990                           
 18991                           ; BSR set to: 0
 18992                           
 18993                           ; BSR set to: 0
 18994  004BFE  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18995  004C00  D7FA               	goto	l1754
 18996  004C02                     u11380:
 18997                           
 18998                           ; BSR set to: 0
 18999                           
 19000                           ; BSR set to: 0
 19001                           
 19002                           ; BSR set to: 0
 19003  004C02  90D8               	bcf	status,0,c
 19004  004C04  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 19005  004C06  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 19006                           
 19007                           ; BSR set to: 0
 19008  004C08  5162               	movf	___lwdiv@divisor& (0+255),w,b
 19009  004C0A  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 19010  004C0C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19011  004C0E  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 19012  004C10  A0D8               	btfss	status,0,c
 19013  004C12  D005               	goto	l1757
 19014                           
 19015                           ; BSR set to: 0
 19016  004C14  5162               	movf	___lwdiv@divisor& (0+255),w,b
 19017  004C16  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 19018  004C18  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19019  004C1A  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 19020                           
 19021                           ; BSR set to: 0
 19022  004C1C  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 19023  004C1E                     l1757:
 19024                           
 19025                           ; BSR set to: 0
 19026                           
 19027                           ; BSR set to: 0
 19028  004C1E  90D8               	bcf	status,0,c
 19029  004C20  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 19030  004C22  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 19031                           
 19032                           ; BSR set to: 0
 19033  004C24  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 19034  004C26  D7ED               	goto	u11380
 19035  004C28                     l1758:
 19036                           
 19037                           ; BSR set to: 0
 19038                           
 19039                           ; BSR set to: 0
 19040  004C28  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 19041  004C2C  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 19042                           
 19043                           ; BSR set to: 0
 19044  004C30  0012               	return		;funcret
 19045  004C32                     __end_of___lwdiv:
 19046                           	opt stack 0
 19047                           tosu	equ	0xFFF
 19048                           tosh	equ	0xFFE
 19049                           tosl	equ	0xFFD
 19050                           pclath	equ	0xFFA
 19051                           tblptru	equ	0xFF8
 19052                           tblptrh	equ	0xFF7
 19053                           tblptrl	equ	0xFF6
 19054                           tablat	equ	0xFF5
 19055                           prodh	equ	0xFF4
 19056                           prodl	equ	0xFF3
 19057                           intcon	equ	0xFF2
 19058                           intcon2	equ	0xFF1
 19059                           intcon3	equ	0xFF0
 19060                           indf0	equ	0xFEF
 19061                           postinc0	equ	0xFEE
 19062                           fsr0h	equ	0xFEA
 19063                           fsr0l	equ	0xFE9
 19064                           wreg	equ	0xFE8
 19065                           indf1	equ	0xFE7
 19066                           postinc1	equ	0xFE6
 19067                           postdec1	equ	0xFE5
 19068                           plusw1	equ	0xFE3
 19069                           fsr1h	equ	0xFE2
 19070                           fsr1l	equ	0xFE1
 19071                           indf2	equ	0xFDF
 19072                           postinc2	equ	0xFDE
 19073                           postdec2	equ	0xFDD
 19074                           plusw2	equ	0xFDB
 19075                           fsr2h	equ	0xFDA
 19076                           fsr2l	equ	0xFD9
 19077                           status	equ	0xFD8
 19078                           
 19079 ;; *************** function _escreve_frase_ram_lcd *****************
 19080 ;; Defined at:
 19081 ;;		line 445 in file "bibliotecas/display_lcd.c"
 19082 ;; Parameters:    Size  Location     Type
 19083 ;;  buffer          2    1[BANK0 ] PTR unsigned char 
 19084 ;;		 -> escreve_inteiro_lcd@texto(7), STR_14(11), STR_13(10), STR_12(16), 
 19085 ;;		 -> STR_11(11), string_dado(44), STR_8(9), STR_7(10), 
 19086 ;;		 -> STR_6(10), STR_5(14), STR_4(21), STR_3(15), 
 19087 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 19088 ;; Auto vars:     Size  Location     Type
 19089 ;;		None
 19090 ;; Return value:  Size  Location     Type
 19091 ;;                  1    wreg      void 
 19092 ;; Registers used:
 19093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19094 ;; Tracked objects:
 19095 ;;		On entry : 0/0
 19096 ;;		On exit  : 0/0
 19097 ;;		Unchanged: 0/0
 19098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19099 ;;      Params:         0       2       0       0       0       0       0       0       0
 19100 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19101 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19102 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19103 ;;Total ram usage:        2 bytes
 19104 ;; Hardware stack levels used:    1
 19105 ;; Hardware stack levels required when called:    5
 19106 ;; This function calls:
 19107 ;;		_escreve_caractere_lcd
 19108 ;; This function is called by:
 19109 ;;		_mensagem_inicial
 19110 ;;		_escrita_sdcard
 19111 ;;		_sdc_reset
 19112 ;;		_sdc_disk_initialize
 19113 ;;		_escreve_inteiro_lcd
 19114 ;;		_sdcard_init
 19115 ;; This function uses a non-reentrant model
 19116 ;;
 19117                           
 19118                           	psect	text78
 19119  004C32                     __ptext78:
 19120                           	opt stack 0
 19121  004C32                     _escreve_frase_ram_lcd:
 19122                           	opt stack 24
 19123                           
 19124                           ;display_lcd.c: 447: while(*buffer)
 19125                           
 19126                           ; BSR set to: 0
 19127                           ;incstack = 0
 19128  004C32  D015               	goto	l601
 19129  004C34                     
 19130                           ;display_lcd.c: 448: {
 19131                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 19132  004C34  C061  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 19133  004C38  C062  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 19134  004C3C  6AF8               	clrf	tblptru,c
 19135  004C3E  0E07               	movlw	(high __ramtop+-1)
 19136  004C40  64F7               	cpfsgt	tblptrh,c
 19137  004C42  D003               	bra	u10417
 19138  004C44  0008               	tblrd		*
 19139  004C46  50F5               	movf	tablat,w,c
 19140  004C48  D005               	bra	u10410
 19141  004C4A                     u10417:
 19142  004C4A  CFF6 FFE9          	movff	tblptrl,fsr0l
 19143  004C4E  CFF7 FFEA          	movff	tblptrh,fsr0h
 19144  004C52  50EF               	movf	indf0,w,c
 19145  004C54                     u10410:
 19146  004C54  EC2C  F024         	call	_escreve_caractere_lcd
 19147                           
 19148                           ;display_lcd.c: 450: buffer++;
 19149  004C58  0100               	movlb	0	; () banked
 19150  004C5A  4B61               	infsnz	escreve_frase_ram_lcd@buffer& (0+255),f,b
 19151  004C5C  2B62               	incf	(escreve_frase_ram_lcd@buffer+1)& (0+255),f,b
 19152  004C5E                     l601:
 19153                           
 19154                           ; BSR set to: 0
 19155  004C5E  C061  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 19156  004C62  C062  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 19157  004C66  6AF8               	clrf	tblptru,c
 19158  004C68  0E07               	movlw	(high __ramtop+-1)
 19159  004C6A  64F7               	cpfsgt	tblptrh,c
 19160  004C6C  D003               	bra	u10427
 19161  004C6E  0008               	tblrd		*
 19162  004C70  50F5               	movf	tablat,w,c
 19163  004C72  D005               	bra	u10420
 19164  004C74                     u10427:
 19165  004C74  CFF6 FFE9          	movff	tblptrl,fsr0l
 19166  004C78  CFF7 FFEA          	movff	tblptrh,fsr0h
 19167  004C7C  50EF               	movf	indf0,w,c
 19168  004C7E                     u10420:
 19169  004C7E  0900               	iorlw	0
 19170  004C80  B4D8               	btfsc	status,2,c
 19171  004C82  0012               	return	
 19172  004C84  D7D7               	goto	l602
 19173  004C86                     __end_of_escreve_frase_ram_lcd:
 19174                           	opt stack 0
 19175                           tosu	equ	0xFFF
 19176                           tosh	equ	0xFFE
 19177                           tosl	equ	0xFFD
 19178                           pclath	equ	0xFFA
 19179                           tblptru	equ	0xFF8
 19180                           tblptrh	equ	0xFF7
 19181                           tblptrl	equ	0xFF6
 19182                           tablat	equ	0xFF5
 19183                           prodh	equ	0xFF4
 19184                           prodl	equ	0xFF3
 19185                           intcon	equ	0xFF2
 19186                           intcon2	equ	0xFF1
 19187                           intcon3	equ	0xFF0
 19188                           indf0	equ	0xFEF
 19189                           postinc0	equ	0xFEE
 19190                           fsr0h	equ	0xFEA
 19191                           fsr0l	equ	0xFE9
 19192                           wreg	equ	0xFE8
 19193                           indf1	equ	0xFE7
 19194                           postinc1	equ	0xFE6
 19195                           postdec1	equ	0xFE5
 19196                           plusw1	equ	0xFE3
 19197                           fsr1h	equ	0xFE2
 19198                           fsr1l	equ	0xFE1
 19199                           indf2	equ	0xFDF
 19200                           postinc2	equ	0xFDE
 19201                           postdec2	equ	0xFDD
 19202                           plusw2	equ	0xFDB
 19203                           fsr2h	equ	0xFDA
 19204                           fsr2l	equ	0xFD9
 19205                           status	equ	0xFD8
 19206                           
 19207 ;; *************** function _escreve_caractere_lcd *****************
 19208 ;; Defined at:
 19209 ;;		line 323 in file "bibliotecas/display_lcd.c"
 19210 ;; Parameters:    Size  Location     Type
 19211 ;;  data            1    wreg     unsigned char 
 19212 ;; Auto vars:     Size  Location     Type
 19213 ;;  data            1    0[BANK0 ] unsigned char 
 19214 ;; Return value:  Size  Location     Type
 19215 ;;                  1    wreg      void 
 19216 ;; Registers used:
 19217 ;;		wreg, status,2, status,0, cstack
 19218 ;; Tracked objects:
 19219 ;;		On entry : 0/0
 19220 ;;		On exit  : 0/0
 19221 ;;		Unchanged: 0/0
 19222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19223 ;;      Params:         0       0       0       0       0       0       0       0       0
 19224 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19225 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19226 ;;      Totals:         0       1       0       0       0       0       0       0       0
 19227 ;;Total ram usage:        1 bytes
 19228 ;; Hardware stack levels used:    1
 19229 ;; Hardware stack levels required when called:    4
 19230 ;; This function calls:
 19231 ;;		_delay
 19232 ;; This function is called by:
 19233 ;;		_escreve_frase_ram_lcd
 19234 ;;		_escreve_float_lcd
 19235 ;;		_escreve_frase_lcd
 19236 ;;		_cria_caractere_lcd
 19237 ;; This function uses a non-reentrant model
 19238 ;;
 19239                           
 19240                           	psect	text79
 19241  004858                     __ptext79:
 19242                           	opt stack 0
 19243  004858                     _escreve_caractere_lcd:
 19244                           	opt stack 24
 19245                           
 19246                           ;incstack = 0
 19247                           ;escreve_caractere_lcd@data stored from wreg
 19248  004858  0100               	movlb	0	; () banked
 19249  00485A  6F60               	movwf	escreve_caractere_lcd@data& (0+255),b
 19250                           
 19251                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 19252  00485C  9483               	bcf	3971,2,c	;volatile
 19253                           
 19254                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 19255  00485E  8283               	bsf	3971,1,c	;volatile
 19256                           
 19257                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 19258  004860  9083               	bcf	3971,0,c	;volatile
 19259                           
 19260                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 19261  004862  0100               	movlb	0	; () banked
 19262  004864  A960               	btfss	escreve_caractere_lcd@data& (0+255),4,b
 19263  004866  D002               	goto	l568
 19264                           
 19265                           ; BSR set to: 0
 19266  004868  8883               	bsf	3971,4,c	;volatile
 19267  00486A  D001               	goto	l569
 19268  00486C                     l568:
 19269                           
 19270                           ; BSR set to: 0
 19271                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 19272  00486C  9883               	bcf	3971,4,c	;volatile
 19273  00486E                     l569:
 19274                           
 19275                           ; BSR set to: 0
 19276                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 19277                           
 19278                           ; BSR set to: 0
 19279  00486E  AB60               	btfss	escreve_caractere_lcd@data& (0+255),5,b
 19280  004870  D002               	goto	l570
 19281                           
 19282                           ; BSR set to: 0
 19283  004872  8A83               	bsf	3971,5,c	;volatile
 19284  004874  D001               	goto	l571
 19285  004876                     l570:
 19286                           
 19287                           ; BSR set to: 0
 19288                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 19289  004876  9A83               	bcf	3971,5,c	;volatile
 19290  004878                     l571:
 19291                           
 19292                           ; BSR set to: 0
 19293                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 19294                           
 19295                           ; BSR set to: 0
 19296  004878  AD60               	btfss	escreve_caractere_lcd@data& (0+255),6,b
 19297  00487A  D002               	goto	l572
 19298                           
 19299                           ; BSR set to: 0
 19300  00487C  8C83               	bsf	3971,6,c	;volatile
 19301  00487E  D001               	goto	l573
 19302  004880                     l572:
 19303                           
 19304                           ; BSR set to: 0
 19305                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 19306  004880  9C83               	bcf	3971,6,c	;volatile
 19307  004882                     l573:
 19308                           
 19309                           ; BSR set to: 0
 19310                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 19311                           
 19312                           ; BSR set to: 0
 19313  004882  AF60               	btfss	escreve_caractere_lcd@data& (0+255),7,b
 19314  004884  D002               	goto	l574
 19315                           
 19316                           ; BSR set to: 0
 19317  004886  8E83               	bsf	3971,7,c	;volatile
 19318  004888  D001               	goto	l575
 19319  00488A                     l574:
 19320                           
 19321                           ; BSR set to: 0
 19322                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 19323  00488A  9E83               	bcf	3971,7,c	;volatile
 19324  00488C                     l575:
 19325                           
 19326                           ; BSR set to: 0
 19327                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 19328  00488C  8083               	bsf	3971,0,c	;volatile
 19329                           
 19330                           ; BSR set to: 0
 19331                           ;display_lcd.c: 342: delay();
 19332  00488E  ECF2  F028         	call	_delay	;wreg free
 19333                           
 19334                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 19335  004892  9083               	bcf	3971,0,c	;volatile
 19336                           
 19337                           ;display_lcd.c: 344: delay();
 19338  004894  ECF2  F028         	call	_delay	;wreg free
 19339                           
 19340                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 19341  004898  0100               	movlb	0	; () banked
 19342  00489A  A160               	btfss	escreve_caractere_lcd@data& (0+255),0,b
 19343  00489C  D002               	goto	l576
 19344                           
 19345                           ; BSR set to: 0
 19346  00489E  8883               	bsf	3971,4,c	;volatile
 19347  0048A0  D001               	goto	l577
 19348  0048A2                     l576:
 19349                           
 19350                           ; BSR set to: 0
 19351                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 19352  0048A2  9883               	bcf	3971,4,c	;volatile
 19353  0048A4                     l577:
 19354                           
 19355                           ; BSR set to: 0
 19356                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 19357  0048A4  A360               	btfss	escreve_caractere_lcd@data& (0+255),1,b
 19358  0048A6  D002               	goto	l578
 19359                           
 19360                           ; BSR set to: 0
 19361  0048A8  8A83               	bsf	3971,5,c	;volatile
 19362  0048AA  D001               	goto	l579
 19363  0048AC                     l578:
 19364                           
 19365                           ; BSR set to: 0
 19366                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 19367  0048AC  9A83               	bcf	3971,5,c	;volatile
 19368  0048AE                     l579:
 19369                           
 19370                           ; BSR set to: 0
 19371                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 19372  0048AE  A560               	btfss	escreve_caractere_lcd@data& (0+255),2,b
 19373  0048B0  D002               	goto	l580
 19374                           
 19375                           ; BSR set to: 0
 19376  0048B2  8C83               	bsf	3971,6,c	;volatile
 19377  0048B4  D001               	goto	l581
 19378  0048B6                     l580:
 19379                           
 19380                           ; BSR set to: 0
 19381                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 19382  0048B6  9C83               	bcf	3971,6,c	;volatile
 19383  0048B8                     l581:
 19384                           
 19385                           ; BSR set to: 0
 19386                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 19387  0048B8  A760               	btfss	escreve_caractere_lcd@data& (0+255),3,b
 19388  0048BA  D002               	goto	l582
 19389                           
 19390                           ; BSR set to: 0
 19391  0048BC  8E83               	bsf	3971,7,c	;volatile
 19392  0048BE  D001               	goto	l583
 19393  0048C0                     l582:
 19394                           
 19395                           ; BSR set to: 0
 19396                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 19397  0048C0  9E83               	bcf	3971,7,c	;volatile
 19398  0048C2                     l583:
 19399                           
 19400                           ; BSR set to: 0
 19401                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 19402  0048C2  8083               	bsf	3971,0,c	;volatile
 19403                           
 19404                           ; BSR set to: 0
 19405                           ;display_lcd.c: 359: delay();
 19406  0048C4  ECF2  F028         	call	_delay	;wreg free
 19407                           
 19408                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 19409  0048C8  9083               	bcf	3971,0,c	;volatile
 19410                           
 19411                           ;display_lcd.c: 361: delay();
 19412  0048CA  ECF2  F028         	call	_delay	;wreg free
 19413  0048CE  0012               	return		;funcret
 19414  0048D0                     __end_of_escreve_caractere_lcd:
 19415                           	opt stack 0
 19416                           tosu	equ	0xFFF
 19417                           tosh	equ	0xFFE
 19418                           tosl	equ	0xFFD
 19419                           pclath	equ	0xFFA
 19420                           tblptru	equ	0xFF8
 19421                           tblptrh	equ	0xFF7
 19422                           tblptrl	equ	0xFF6
 19423                           tablat	equ	0xFF5
 19424                           prodh	equ	0xFF4
 19425                           prodl	equ	0xFF3
 19426                           intcon	equ	0xFF2
 19427                           intcon2	equ	0xFF1
 19428                           intcon3	equ	0xFF0
 19429                           indf0	equ	0xFEF
 19430                           postinc0	equ	0xFEE
 19431                           fsr0h	equ	0xFEA
 19432                           fsr0l	equ	0xFE9
 19433                           wreg	equ	0xFE8
 19434                           indf1	equ	0xFE7
 19435                           postinc1	equ	0xFE6
 19436                           postdec1	equ	0xFE5
 19437                           plusw1	equ	0xFE3
 19438                           fsr1h	equ	0xFE2
 19439                           fsr1l	equ	0xFE1
 19440                           indf2	equ	0xFDF
 19441                           postinc2	equ	0xFDE
 19442                           postdec2	equ	0xFDD
 19443                           plusw2	equ	0xFDB
 19444                           fsr2h	equ	0xFDA
 19445                           fsr2l	equ	0xFD9
 19446                           status	equ	0xFD8
 19447                           
 19448 ;; *************** function _delay *****************
 19449 ;; Defined at:
 19450 ;;		line 45 in file "bibliotecas/display_lcd.c"
 19451 ;; Parameters:    Size  Location     Type
 19452 ;;		None
 19453 ;; Auto vars:     Size  Location     Type
 19454 ;;  contador_int    1   33[COMRAM] unsigned char 
 19455 ;;  contador_ext    1   32[COMRAM] unsigned char 
 19456 ;; Return value:  Size  Location     Type
 19457 ;;                  1    wreg      void 
 19458 ;; Registers used:
 19459 ;;		wreg, status,2, status,0
 19460 ;; Tracked objects:
 19461 ;;		On entry : 0/0
 19462 ;;		On exit  : 0/0
 19463 ;;		Unchanged: 0/0
 19464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19465 ;;      Params:         0       0       0       0       0       0       0       0       0
 19466 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19467 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19468 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19469 ;;Total ram usage:        2 bytes
 19470 ;; Hardware stack levels used:    1
 19471 ;; Hardware stack levels required when called:    3
 19472 ;; This function calls:
 19473 ;;		Nothing
 19474 ;; This function is called by:
 19475 ;;		_init_lcd
 19476 ;;		_escreve_cmd_lcd
 19477 ;;		_endereco_cursor_lcd
 19478 ;;		_escreve_caractere_lcd
 19479 ;; This function uses a non-reentrant model
 19480 ;;
 19481                           
 19482                           	psect	text80
 19483  0051E4                     __ptext80:
 19484                           	opt stack 0
 19485  0051E4                     _delay:
 19486                           	opt stack 24
 19487                           
 19488                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 19489                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 19490                           
 19491                           ;incstack = 0
 19492  0051E4  0E00               	movlw	0
 19493  0051E6  6E21               	movwf	delay@contador_ext,c
 19494  0051E8                     l8585:
 19495  0051E8  0E63               	movlw	99
 19496  0051EA  6421               	cpfsgt	delay@contador_ext,c
 19497  0051EC  D001               	goto	l507
 19498  0051EE  0012               	return	
 19499  0051F0                     l507:
 19500                           
 19501                           ;display_lcd.c: 50: {
 19502                           ;display_lcd.c: 51: __nop();
 19503  0051F0  F000               	nop	
 19504                           
 19505                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 19506  0051F2  0E00               	movlw	0
 19507  0051F4  6E22               	movwf	delay@contador_int,c
 19508  0051F6                     l8591:
 19509  0051F6  0E31               	movlw	49
 19510  0051F8  6422               	cpfsgt	delay@contador_int,c
 19511  0051FA  D001               	goto	l509
 19512  0051FC  D003               	goto	u10140
 19513  0051FE                     l509:
 19514                           
 19515                           ;display_lcd.c: 53: {
 19516                           ;display_lcd.c: 54: __nop();
 19517  0051FE  F000               	nop	
 19518  005200  2A22               	incf	delay@contador_int,f,c
 19519  005202  D7F9               	goto	l8591
 19520  005204                     u10140:
 19521  005204  2A21               	incf	delay@contador_ext,f,c
 19522  005206  D7F0               	goto	l8585
 19523  005208                     __end_of_delay:
 19524                           	opt stack 0
 19525                           tosu	equ	0xFFF
 19526                           tosh	equ	0xFFE
 19527                           tosl	equ	0xFFD
 19528                           pclath	equ	0xFFA
 19529                           tblptru	equ	0xFF8
 19530                           tblptrh	equ	0xFF7
 19531                           tblptrl	equ	0xFF6
 19532                           tablat	equ	0xFF5
 19533                           prodh	equ	0xFF4
 19534                           prodl	equ	0xFF3
 19535                           intcon	equ	0xFF2
 19536                           intcon2	equ	0xFF1
 19537                           intcon3	equ	0xFF0
 19538                           indf0	equ	0xFEF
 19539                           postinc0	equ	0xFEE
 19540                           fsr0h	equ	0xFEA
 19541                           fsr0l	equ	0xFE9
 19542                           wreg	equ	0xFE8
 19543                           indf1	equ	0xFE7
 19544                           postinc1	equ	0xFE6
 19545                           postdec1	equ	0xFE5
 19546                           plusw1	equ	0xFE3
 19547                           fsr1h	equ	0xFE2
 19548                           fsr1l	equ	0xFE1
 19549                           indf2	equ	0xFDF
 19550                           postinc2	equ	0xFDE
 19551                           postdec2	equ	0xFDD
 19552                           plusw2	equ	0xFDB
 19553                           fsr2h	equ	0xFDA
 19554                           fsr2l	equ	0xFD9
 19555                           status	equ	0xFD8
 19556                           
 19557 ;; *************** function _desliga_uart *****************
 19558 ;; Defined at:
 19559 ;;		line 219 in file "bibliotecas/uart.c"
 19560 ;; Parameters:    Size  Location     Type
 19561 ;;		None
 19562 ;; Auto vars:     Size  Location     Type
 19563 ;;		None
 19564 ;; Return value:  Size  Location     Type
 19565 ;;                  1    wreg      void 
 19566 ;; Registers used:
 19567 ;;		wreg, status,2
 19568 ;; Tracked objects:
 19569 ;;		On entry : 0/0
 19570 ;;		On exit  : 0/0
 19571 ;;		Unchanged: 0/0
 19572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19573 ;;      Params:         0       0       0       0       0       0       0       0       0
 19574 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19575 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19576 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19577 ;;Total ram usage:        0 bytes
 19578 ;; Hardware stack levels used:    1
 19579 ;; Hardware stack levels required when called:    3
 19580 ;; This function calls:
 19581 ;;		Nothing
 19582 ;; This function is called by:
 19583 ;;		_escrita_sdcard
 19584 ;;		_sdcard_init
 19585 ;; This function uses a non-reentrant model
 19586 ;;
 19587                           
 19588                           	psect	text81
 19589  0052FE                     __ptext81:
 19590                           	opt stack 0
 19591  0052FE                     _desliga_uart:
 19592                           	opt stack 25
 19593                           
 19594                           ;uart.c: 221: TRISCbits.RC6 = 1;
 19595                           
 19596                           ;incstack = 0
 19597  0052FE  8C94               	bsf	3988,6,c	;volatile
 19598                           
 19599                           ;uart.c: 222: TRISCbits.RC7 = 1;
 19600  005300  8E94               	bsf	3988,7,c	;volatile
 19601                           
 19602                           ;uart.c: 225: TXSTA = 0x00;
 19603  005302  0E00               	movlw	0
 19604  005304  6EAC               	movwf	4012,c	;volatile
 19605                           
 19606                           ;uart.c: 227: RCSTA = 0x00;
 19607  005306  0E00               	movlw	0
 19608  005308  6EAB               	movwf	4011,c	;volatile
 19609  00530A  0012               	return		;funcret
 19610  00530C                     __end_of_desliga_uart:
 19611                           	opt stack 0
 19612                           tosu	equ	0xFFF
 19613                           tosh	equ	0xFFE
 19614                           tosl	equ	0xFFD
 19615                           pclath	equ	0xFFA
 19616                           tblptru	equ	0xFF8
 19617                           tblptrh	equ	0xFF7
 19618                           tblptrl	equ	0xFF6
 19619                           tablat	equ	0xFF5
 19620                           prodh	equ	0xFF4
 19621                           prodl	equ	0xFF3
 19622                           intcon	equ	0xFF2
 19623                           intcon2	equ	0xFF1
 19624                           intcon3	equ	0xFF0
 19625                           indf0	equ	0xFEF
 19626                           postinc0	equ	0xFEE
 19627                           fsr0h	equ	0xFEA
 19628                           fsr0l	equ	0xFE9
 19629                           wreg	equ	0xFE8
 19630                           indf1	equ	0xFE7
 19631                           postinc1	equ	0xFE6
 19632                           postdec1	equ	0xFE5
 19633                           plusw1	equ	0xFE3
 19634                           fsr1h	equ	0xFE2
 19635                           fsr1l	equ	0xFE1
 19636                           indf2	equ	0xFDF
 19637                           postinc2	equ	0xFDE
 19638                           postdec2	equ	0xFDD
 19639                           plusw2	equ	0xFDB
 19640                           fsr2h	equ	0xFDA
 19641                           fsr2l	equ	0xFD9
 19642                           status	equ	0xFD8
 19643                           
 19644 ;; *************** function _desliga_SPI *****************
 19645 ;; Defined at:
 19646 ;;		line 69 in file "bibliotecas/SPI.c"
 19647 ;; Parameters:    Size  Location     Type
 19648 ;;		None
 19649 ;; Auto vars:     Size  Location     Type
 19650 ;;		None
 19651 ;; Return value:  Size  Location     Type
 19652 ;;                  1    wreg      void 
 19653 ;; Registers used:
 19654 ;;		wreg, status,2
 19655 ;; Tracked objects:
 19656 ;;		On entry : 0/0
 19657 ;;		On exit  : 0/0
 19658 ;;		Unchanged: 0/0
 19659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19660 ;;      Params:         0       0       0       0       0       0       0       0       0
 19661 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19662 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19663 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19664 ;;Total ram usage:        0 bytes
 19665 ;; Hardware stack levels used:    1
 19666 ;; Hardware stack levels required when called:    3
 19667 ;; This function calls:
 19668 ;;		Nothing
 19669 ;; This function is called by:
 19670 ;;		_escrita_sdcard
 19671 ;; This function uses a non-reentrant model
 19672 ;;
 19673                           
 19674                           	psect	text82
 19675  005330                     __ptext82:
 19676                           	opt stack 0
 19677  005330                     _desliga_SPI:
 19678                           	opt stack 25
 19679                           
 19680                           ;SPI.c: 71: SSPSTAT = 0x00;
 19681                           
 19682                           ;incstack = 0
 19683  005330  0E00               	movlw	0
 19684  005332  6EC7               	movwf	4039,c	;volatile
 19685                           
 19686                           ;SPI.c: 72: SSPCON1 = 0x00;
 19687  005334  0E00               	movlw	0
 19688  005336  6EC6               	movwf	4038,c	;volatile
 19689                           
 19690                           ;SPI.c: 73: SSPCON1bits.SSPEN = 0;
 19691  005338  9AC6               	bcf	4038,5,c	;volatile
 19692  00533A  0012               	return		;funcret
 19693  00533C                     __end_of_desliga_SPI:
 19694                           	opt stack 0
 19695                           tosu	equ	0xFFF
 19696                           tosh	equ	0xFFE
 19697                           tosl	equ	0xFFD
 19698                           pclath	equ	0xFFA
 19699                           tblptru	equ	0xFF8
 19700                           tblptrh	equ	0xFF7
 19701                           tblptrl	equ	0xFF6
 19702                           tablat	equ	0xFF5
 19703                           prodh	equ	0xFF4
 19704                           prodl	equ	0xFF3
 19705                           intcon	equ	0xFF2
 19706                           intcon2	equ	0xFF1
 19707                           intcon3	equ	0xFF0
 19708                           indf0	equ	0xFEF
 19709                           postinc0	equ	0xFEE
 19710                           fsr0h	equ	0xFEA
 19711                           fsr0l	equ	0xFE9
 19712                           wreg	equ	0xFE8
 19713                           indf1	equ	0xFE7
 19714                           postinc1	equ	0xFE6
 19715                           postdec1	equ	0xFE5
 19716                           plusw1	equ	0xFE3
 19717                           fsr1h	equ	0xFE2
 19718                           fsr1l	equ	0xFE1
 19719                           indf2	equ	0xFDF
 19720                           postinc2	equ	0xFDE
 19721                           postdec2	equ	0xFDD
 19722                           plusw2	equ	0xFDB
 19723                           fsr2h	equ	0xFDA
 19724                           fsr2l	equ	0xFD9
 19725                           status	equ	0xFD8
 19726                           
 19727 ;; *************** function _isr *****************
 19728 ;; Defined at:
 19729 ;;		line 86 in file "main.c"
 19730 ;; Parameters:    Size  Location     Type
 19731 ;;		None
 19732 ;; Auto vars:     Size  Location     Type
 19733 ;;  cont            1   31[COMRAM] unsigned char 
 19734 ;; Return value:  Size  Location     Type
 19735 ;;                  1    wreg      void 
 19736 ;; Registers used:
 19737 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19738 ;; Tracked objects:
 19739 ;;		On entry : 0/0
 19740 ;;		On exit  : 0/0
 19741 ;;		Unchanged: 0/0
 19742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19743 ;;      Params:         0       0       0       0       0       0       0       0       0
 19744 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19745 ;;      Temps:         20       0       0       0       0       0       0       0       0
 19746 ;;      Totals:        21       0       0       0       0       0       0       0       0
 19747 ;;Total ram usage:       21 bytes
 19748 ;; Hardware stack levels used:    1
 19749 ;; Hardware stack levels required when called:    2
 19750 ;; This function calls:
 19751 ;;		_GPSRead
 19752 ;;		_recebe_dado_uart
 19753 ;;		i2_write_timer_zero
 19754 ;; This function is called by:
 19755 ;;		Interrupt level 2
 19756 ;; This function uses a non-reentrant model
 19757 ;;
 19758                           
 19759                           	psect	intcode
 19760  000008                     __pintcode:
 19761                           	opt stack 0
 19762  000008                     _isr:
 19763                           	opt stack 14
 19764                           
 19765                           ;incstack = 0
 19766  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19767  00000A  EDDE  F01C         	call	int_func,f	;refresh shadow registers
 19768                           tosu	equ	0xFFF
 19769                           tosh	equ	0xFFE
 19770                           tosl	equ	0xFFD
 19771                           pclath	equ	0xFFA
 19772                           tblptru	equ	0xFF8
 19773                           tblptrh	equ	0xFF7
 19774                           tblptrl	equ	0xFF6
 19775                           tablat	equ	0xFF5
 19776                           prodh	equ	0xFF4
 19777                           prodl	equ	0xFF3
 19778                           intcon	equ	0xFF2
 19779                           intcon2	equ	0xFF1
 19780                           intcon3	equ	0xFF0
 19781                           indf0	equ	0xFEF
 19782                           postinc0	equ	0xFEE
 19783                           fsr0h	equ	0xFEA
 19784                           fsr0l	equ	0xFE9
 19785                           wreg	equ	0xFE8
 19786                           indf1	equ	0xFE7
 19787                           postinc1	equ	0xFE6
 19788                           postdec1	equ	0xFE5
 19789                           plusw1	equ	0xFE3
 19790                           fsr1h	equ	0xFE2
 19791                           fsr1l	equ	0xFE1
 19792                           indf2	equ	0xFDF
 19793                           postinc2	equ	0xFDE
 19794                           postdec2	equ	0xFDD
 19795                           plusw2	equ	0xFDB
 19796                           fsr2h	equ	0xFDA
 19797                           fsr2l	equ	0xFD9
 19798                           status	equ	0xFD8
 19799                           
 19800                           	psect	intcode_body
 19801  0039BC                     __pintcode_body:
 19802                           	opt stack 14
 19803  0039BC                     int_func:
 19804                           	opt stack 14
 19805  0039BC  0006               	pop		; remove dummy address from shadow register refresh
 19806  0039BE  CFFA F00E          	movff	pclath,??_isr+2
 19807  0039C2  CFFB F00F          	movff	pclatu,??_isr+3
 19808  0039C6  CFE9 F010          	movff	fsr0l,??_isr+4
 19809  0039CA  CFEA F011          	movff	fsr0h,??_isr+5
 19810  0039CE  CFE1 F012          	movff	fsr1l,??_isr+6
 19811  0039D2  CFE2 F013          	movff	fsr1h,??_isr+7
 19812  0039D6  CFD9 F014          	movff	fsr2l,??_isr+8
 19813  0039DA  CFDA F015          	movff	fsr2h,??_isr+9
 19814  0039DE  CFF3 F016          	movff	prodl,??_isr+10
 19815  0039E2  CFF4 F017          	movff	prodh,??_isr+11
 19816  0039E6  CFF6 F018          	movff	tblptrl,??_isr+12
 19817  0039EA  CFF7 F019          	movff	tblptrh,??_isr+13
 19818  0039EE  CFF8 F01A          	movff	tblptru,??_isr+14
 19819  0039F2  CFF5 F01B          	movff	tablat,??_isr+15
 19820  0039F6  C03F  F01C         	movff	btemp,??_isr+16
 19821  0039FA  C040  F01D         	movff	btemp+1,??_isr+17
 19822  0039FE  C041  F01E         	movff	btemp+2,??_isr+18
 19823  003A02  C042  F01F         	movff	btemp+3,??_isr+19
 19824                           
 19825                           ;main.c: 88: unsigned char cont;
 19826                           ;main.c: 91: if (PIE1bits.RCIE && PIR1bits.RCIF)
 19827  003A06  BA9D               	btfsc	3997,5,c	;volatile
 19828  003A08  AA9E               	btfss	3998,5,c	;volatile
 19829  003A0A  D014               	goto	i2l67
 19830                           
 19831                           ;main.c: 92: {
 19832                           ;main.c: 93: PIR1bits.RCIF = 0;
 19833  003A0C  9A9E               	bcf	3998,5,c	;volatile
 19834                           
 19835                           ;main.c: 94: data_uart_recebe = recebe_dado_uart();
 19836  003A0E  EC68  F029         	call	_recebe_dado_uart	;wreg free
 19837  003A12  6E3B               	movwf	_data_uart_recebe,c
 19838                           
 19839                           ;main.c: 95: GPSRead(data_uart_recebe);
 19840  003A14  503B               	movf	_data_uart_recebe,w,c
 19841  003A16  EC9A  F012         	call	_GPSRead
 19842                           
 19843                           ;main.c: 96: PORTBbits.RB2 = !PORTBbits.RB2;
 19844  003A1A  B481               	btfsc	3969,2,c	;volatile
 19845  003A1C  D003               	goto	i2u1390_40
 19846  003A1E  6A0C               	clrf	??_isr& (0+255),c
 19847  003A20  2A0C               	incf	??_isr& (0+255),f,c
 19848  003A22  D001               	goto	i2u1391_48
 19849  003A24                     i2u1390_40:
 19850  003A24  6A0C               	clrf	??_isr& (0+255),c
 19851  003A26                     i2u1391_48:
 19852  003A26  460C               	rlncf	??_isr,f,c
 19853  003A28  460C               	rlncf	??_isr,f,c
 19854  003A2A  5081               	movf	3969,w,c	;volatile
 19855  003A2C  180C               	xorwf	??_isr,w,c
 19856  003A2E  0BFB               	andlw	-5
 19857  003A30  180C               	xorwf	??_isr,w,c
 19858  003A32  6E81               	movwf	3969,c	;volatile
 19859  003A34                     i2l67:
 19860                           
 19861                           ;main.c: 97: }
 19862                           ;main.c: 100: unsigned char cont;
 19863                           ;main.c: 102: if (TMR0IF && T0IF)
 19864  003A34  B4F2               	btfsc	intcon,2,c	;volatile
 19865  003A36  A4F2               	btfss	intcon,2,c	;volatile
 19866  003A38  D036               	goto	i2l68
 19867                           
 19868                           ;main.c: 103: {
 19869                           ;main.c: 104: INTCONbits.TMR0IF = 0;
 19870  003A3A  94F2               	bcf	intcon,2,c	;volatile
 19871                           
 19872                           ;main.c: 105: sinaliza_int_timer = 1;
 19873  003A3C  0E01               	movlw	1
 19874  003A3E  6E3A               	movwf	_sinaliza_int_timer,c
 19875                           
 19876                           ;main.c: 107: for(cont= 0; cont<2;cont++)
 19877  003A40  0E00               	movlw	0
 19878  003A42  6E20               	movwf	isr@cont,c
 19879  003A44                     i2l10943:
 19880  003A44  0E01               	movlw	1
 19881  003A46  6420               	cpfsgt	isr@cont,c
 19882  003A48  D001               	goto	i2l69
 19883  003A4A  D019               	goto	i2u1396_40
 19884  003A4C                     i2l69:
 19885                           
 19886                           ;main.c: 108: {
 19887                           ;main.c: 109: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 19888  003A4C  5020               	movf	isr@cont,w,c
 19889  003A4E  0D02               	mullw	2
 19890  003A50  0E23               	movlw	low _tempo_tarefa
 19891  003A52  24F3               	addwf	prodl,w,c
 19892  003A54  6ED9               	movwf	fsr2l,c
 19893  003A56  0E00               	movlw	high _tempo_tarefa
 19894  003A58  20F4               	addwfc	prodh,w,c
 19895  003A5A  6EDA               	movwf	fsr2h,c
 19896  003A5C  50DE               	movf	postinc2,w,c
 19897  003A5E  10DE               	iorwf	postinc2,w,c
 19898  003A60  B4D8               	btfsc	status,2,c
 19899  003A62  D00B               	goto	i2l71
 19900  003A64  5020               	movf	isr@cont,w,c
 19901  003A66  0D02               	mullw	2
 19902  003A68  0E23               	movlw	low _tempo_tarefa
 19903  003A6A  24F3               	addwf	prodl,w,c
 19904  003A6C  6ED9               	movwf	fsr2l,c
 19905  003A6E  0E00               	movlw	high _tempo_tarefa
 19906  003A70  20F4               	addwfc	prodh,w,c
 19907  003A72  6EDA               	movwf	fsr2h,c
 19908  003A74  06DE               	decf	postinc2,f,c
 19909  003A76  0E00               	movlw	0
 19910  003A78  5ADD               	subwfb	postdec2,f,c
 19911  003A7A                     i2l71:
 19912  003A7A  2A20               	incf	isr@cont,f,c
 19913  003A7C  D7E3               	goto	i2l10943
 19914  003A7E                     i2u1396_40:
 19915                           
 19916                           ;main.c: 110: }
 19917                           ;main.c: 112: if(tarefa_em_execucao == 1)
 19918  003A7E  0439               	decf	_tarefa_em_execucao,w,c	;volatile
 19919  003A80  A4D8               	btfss	status,2,c
 19920  003A82  D00B               	goto	i2l73
 19921                           
 19922                           ;main.c: 113: {
 19923                           ;main.c: 114: timeout_tarefa--;
 19924  003A84  062F               	decf	_timeout_tarefa,f,c
 19925  003A86  A0D8               	btfss	status,0,c
 19926  003A88  0630               	decf	_timeout_tarefa+1,f,c
 19927                           
 19928                           ;main.c: 115: if(!timeout_tarefa)
 19929  003A8A  502F               	movf	_timeout_tarefa,w,c
 19930  003A8C  1030               	iorwf	_timeout_tarefa+1,w,c
 19931  003A8E  A4D8               	btfss	status,2,c
 19932  003A90  D004               	goto	i2l73
 19933                           
 19934                           ;main.c: 116: {
 19935                           ;main.c: 118: PCLATH = 0;
 19936  003A92  0E00               	movlw	0
 19937  003A94  6EFA               	movwf	pclath,c	;volatile
 19938                           
 19939                           ;main.c: 119: PCL = 0;
 19940  003A96  0E00               	movlw	0
 19941  003A98  6EF9               	movwf	pcl,c	;volatile
 19942  003A9A                     i2l73:
 19943                           
 19944                           ;main.c: 120: }
 19945                           ;main.c: 121: }
 19946                           ;main.c: 124: write_timer_zero(0x0083);
 19947  003A9A  0E00               	movlw	0
 19948  003A9C  6E02               	movwf	i2write_timer_zero@timer0+1,c
 19949  003A9E  0E83               	movlw	131
 19950  003AA0  6E01               	movwf	i2write_timer_zero@timer0,c
 19951  003AA2  EC5F  F029         	call	i2_write_timer_zero	;wreg free
 19952  003AA6                     i2l68:
 19953                           
 19954                           ;main.c: 126: }
 19955                           ;main.c: 128: if (INT0IF && INT0IE)
 19956  003AA6  B2F2               	btfsc	intcon,1,c	;volatile
 19957  003AA8  A8F2               	btfss	intcon,4,c	;volatile
 19958  003AAA  D001               	goto	i2l74
 19959                           
 19960                           ;main.c: 129: {
 19961                           ;main.c: 130: INT0IF = 0;
 19962  003AAC  92F2               	bcf	intcon,1,c	;volatile
 19963  003AAE                     i2l74:
 19964  003AAE  C01F  F042         	movff	??_isr+19,btemp+3
 19965  003AB2  C01E  F041         	movff	??_isr+18,btemp+2
 19966  003AB6  C01D  F040         	movff	??_isr+17,btemp+1
 19967  003ABA  C01C  F03F         	movff	??_isr+16,btemp
 19968  003ABE  C01B  FFF5         	movff	??_isr+15,tablat
 19969  003AC2  C01A  FFF8         	movff	??_isr+14,tblptru
 19970  003AC6  C019  FFF7         	movff	??_isr+13,tblptrh
 19971  003ACA  C018  FFF6         	movff	??_isr+12,tblptrl
 19972  003ACE  C017  FFF4         	movff	??_isr+11,prodh
 19973  003AD2  C016  FFF3         	movff	??_isr+10,prodl
 19974  003AD6  C015  FFDA         	movff	??_isr+9,fsr2h
 19975  003ADA  C014  FFD9         	movff	??_isr+8,fsr2l
 19976  003ADE  C013  FFE2         	movff	??_isr+7,fsr1h
 19977  003AE2  C012  FFE1         	movff	??_isr+6,fsr1l
 19978  003AE6  C011  FFEA         	movff	??_isr+5,fsr0h
 19979  003AEA  C010  FFE9         	movff	??_isr+4,fsr0l
 19980  003AEE  C00F  FFFB         	movff	??_isr+3,pclatu
 19981  003AF2  C00E  FFFA         	movff	??_isr+2,pclath
 19982  003AF6  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19983  003AF8  0011               	retfie		f
 19984  003AFA                     __end_of_isr:
 19985                           	opt stack 0
 19986                           tosu	equ	0xFFF
 19987                           tosh	equ	0xFFE
 19988                           tosl	equ	0xFFD
 19989                           pclatu	equ	0xFFB
 19990                           pclath	equ	0xFFA
 19991                           pcl	equ	0xFF9
 19992                           tblptru	equ	0xFF8
 19993                           tblptrh	equ	0xFF7
 19994                           tblptrl	equ	0xFF6
 19995                           tablat	equ	0xFF5
 19996                           prodh	equ	0xFF4
 19997                           prodl	equ	0xFF3
 19998                           intcon	equ	0xFF2
 19999                           intcon2	equ	0xFF1
 20000                           intcon3	equ	0xFF0
 20001                           indf0	equ	0xFEF
 20002                           postinc0	equ	0xFEE
 20003                           fsr0h	equ	0xFEA
 20004                           fsr0l	equ	0xFE9
 20005                           wreg	equ	0xFE8
 20006                           indf1	equ	0xFE7
 20007                           postinc1	equ	0xFE6
 20008                           postdec1	equ	0xFE5
 20009                           plusw1	equ	0xFE3
 20010                           fsr1h	equ	0xFE2
 20011                           fsr1l	equ	0xFE1
 20012                           indf2	equ	0xFDF
 20013                           postinc2	equ	0xFDE
 20014                           postdec2	equ	0xFDD
 20015                           plusw2	equ	0xFDB
 20016                           fsr2h	equ	0xFDA
 20017                           fsr2l	equ	0xFD9
 20018                           status	equ	0xFD8
 20019                           
 20020 ;; *************** function i2_write_timer_zero *****************
 20021 ;; Defined at:
 20022 ;;		line 138 in file "bibliotecas/hardware.c"
 20023 ;; Parameters:    Size  Location     Type
 20024 ;;  timer0          2    0[COMRAM] unsigned int 
 20025 ;; Auto vars:     Size  Location     Type
 20026 ;;  write_timer_    2    2[COMRAM] struct Timers
 20027 ;; Return value:  Size  Location     Type
 20028 ;;                  1    wreg      void 
 20029 ;; Registers used:
 20030 ;;		None
 20031 ;; Tracked objects:
 20032 ;;		On entry : 0/0
 20033 ;;		On exit  : 0/0
 20034 ;;		Unchanged: 0/0
 20035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20036 ;;      Params:         2       0       0       0       0       0       0       0       0
 20037 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20038 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20039 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20040 ;;Total ram usage:        4 bytes
 20041 ;; Hardware stack levels used:    1
 20042 ;; This function calls:
 20043 ;;		Nothing
 20044 ;; This function is called by:
 20045 ;;		_isr
 20046 ;; This function uses a non-reentrant model
 20047 ;;
 20048                           
 20049                           	psect	text84
 20050  0052BE                     __ptext84:
 20051                           	opt stack 0
 20052  0052BE                     i2_write_timer_zero:
 20053                           	opt stack 15
 20054                           
 20055                           ;hardware.c: 140: union Timers timer;
 20056                           ;hardware.c: 142: timer.lt = timer0;
 20057                           
 20058                           ;incstack = 0
 20059  0052BE  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 20060  0052C2  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 20061                           
 20062                           ;hardware.c: 144: TMR0H = timer.bt[1];
 20063  0052C6  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 20064                           
 20065                           ;hardware.c: 145: TMR0L = timer.bt[0];
 20066  0052CA  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 20067  0052CE  0012               	return		;funcret
 20068  0052D0                     __end_ofi2_write_timer_zero:
 20069                           	opt stack 0
 20070                           tosu	equ	0xFFF
 20071                           tosh	equ	0xFFE
 20072                           tosl	equ	0xFFD
 20073                           pclatu	equ	0xFFB
 20074                           pclath	equ	0xFFA
 20075                           pcl	equ	0xFF9
 20076                           tblptru	equ	0xFF8
 20077                           tblptrh	equ	0xFF7
 20078                           tblptrl	equ	0xFF6
 20079                           tablat	equ	0xFF5
 20080                           prodh	equ	0xFF4
 20081                           prodl	equ	0xFF3
 20082                           intcon	equ	0xFF2
 20083                           intcon2	equ	0xFF1
 20084                           intcon3	equ	0xFF0
 20085                           indf0	equ	0xFEF
 20086                           postinc0	equ	0xFEE
 20087                           fsr0h	equ	0xFEA
 20088                           fsr0l	equ	0xFE9
 20089                           wreg	equ	0xFE8
 20090                           indf1	equ	0xFE7
 20091                           postinc1	equ	0xFE6
 20092                           postdec1	equ	0xFE5
 20093                           plusw1	equ	0xFE3
 20094                           fsr1h	equ	0xFE2
 20095                           fsr1l	equ	0xFE1
 20096                           indf2	equ	0xFDF
 20097                           postinc2	equ	0xFDE
 20098                           postdec2	equ	0xFDD
 20099                           plusw2	equ	0xFDB
 20100                           fsr2h	equ	0xFDA
 20101                           fsr2l	equ	0xFD9
 20102                           status	equ	0xFD8
 20103                           
 20104 ;; *************** function _recebe_dado_uart *****************
 20105 ;; Defined at:
 20106 ;;		line 138 in file "bibliotecas/uart.c"
 20107 ;; Parameters:    Size  Location     Type
 20108 ;;		None
 20109 ;; Auto vars:     Size  Location     Type
 20110 ;;		None
 20111 ;; Return value:  Size  Location     Type
 20112 ;;                  1    wreg      unsigned char 
 20113 ;; Registers used:
 20114 ;;		wreg, status,2
 20115 ;; Tracked objects:
 20116 ;;		On entry : 0/0
 20117 ;;		On exit  : 0/0
 20118 ;;		Unchanged: 0/0
 20119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20120 ;;      Params:         0       0       0       0       0       0       0       0       0
 20121 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20122 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20123 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20124 ;;Total ram usage:        0 bytes
 20125 ;; Hardware stack levels used:    1
 20126 ;; This function calls:
 20127 ;;		Nothing
 20128 ;; This function is called by:
 20129 ;;		_isr
 20130 ;;		_recebe_string_uart
 20131 ;; This function uses a non-reentrant model
 20132 ;;
 20133                           
 20134                           	psect	text85
 20135  0052D0                     __ptext85:
 20136                           	opt stack 0
 20137  0052D0                     _recebe_dado_uart:
 20138                           	opt stack 15
 20139                           
 20140                           ;uart.c: 140: while(RCIF==0);
 20141                           
 20142                           ;incstack = 0
 20143  0052D0  AA9E               	btfss	3998,5,c	;volatile
 20144  0052D2  D7FE               	goto	_recebe_dado_uart
 20145                           
 20146                           ;uart.c: 141: if(RCSTAbits.OERR)
 20147  0052D4  A2AB               	btfss	4011,1,c	;volatile
 20148  0052D6  D003               	goto	i2l798
 20149                           
 20150                           ;uart.c: 142: {
 20151                           ;uart.c: 143: CREN = 0;
 20152  0052D8  98AB               	bcf	4011,4,c	;volatile
 20153                           
 20154                           ;uart.c: 144: __nop();
 20155  0052DA  F000               	nop	
 20156                           
 20157                           ;uart.c: 145: CREN=1;
 20158  0052DC  88AB               	bsf	4011,4,c	;volatile
 20159  0052DE                     i2l798:
 20160                           
 20161                           ;uart.c: 146: }
 20162                           ;uart.c: 147: return(RCREG);
 20163  0052DE  50AE               	movf	4014,w,c	;volatile
 20164  0052E0  0012               	return	
 20165  0052E2                     __end_of_recebe_dado_uart:
 20166                           	opt stack 0
 20167                           tosu	equ	0xFFF
 20168                           tosh	equ	0xFFE
 20169                           tosl	equ	0xFFD
 20170                           pclatu	equ	0xFFB
 20171                           pclath	equ	0xFFA
 20172                           pcl	equ	0xFF9
 20173                           tblptru	equ	0xFF8
 20174                           tblptrh	equ	0xFF7
 20175                           tblptrl	equ	0xFF6
 20176                           tablat	equ	0xFF5
 20177                           prodh	equ	0xFF4
 20178                           prodl	equ	0xFF3
 20179                           intcon	equ	0xFF2
 20180                           intcon2	equ	0xFF1
 20181                           intcon3	equ	0xFF0
 20182                           indf0	equ	0xFEF
 20183                           postinc0	equ	0xFEE
 20184                           fsr0h	equ	0xFEA
 20185                           fsr0l	equ	0xFE9
 20186                           wreg	equ	0xFE8
 20187                           indf1	equ	0xFE7
 20188                           postinc1	equ	0xFE6
 20189                           postdec1	equ	0xFE5
 20190                           plusw1	equ	0xFE3
 20191                           fsr1h	equ	0xFE2
 20192                           fsr1l	equ	0xFE1
 20193                           indf2	equ	0xFDF
 20194                           postinc2	equ	0xFDE
 20195                           postdec2	equ	0xFDD
 20196                           plusw2	equ	0xFDB
 20197                           fsr2h	equ	0xFDA
 20198                           fsr2l	equ	0xFD9
 20199                           status	equ	0xFD8
 20200                           
 20201 ;; *************** function _GPSRead *****************
 20202 ;; Defined at:
 20203 ;;		line 468 in file "bibliotecas/GPS.c"
 20204 ;; Parameters:    Size  Location     Type
 20205 ;;  buff            1    wreg     unsigned char 
 20206 ;; Auto vars:     Size  Location     Type
 20207 ;;  buff            1    9[COMRAM] unsigned char 
 20208 ;;  c               1   10[COMRAM] unsigned char 
 20209 ;; Return value:  Size  Location     Type
 20210 ;;                  2    8[None  ] int 
 20211 ;; Registers used:
 20212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20213 ;; Tracked objects:
 20214 ;;		On entry : 0/0
 20215 ;;		On exit  : 0/0
 20216 ;;		Unchanged: 0/0
 20217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20218 ;;      Params:         0       0       0       0       0       0       0       0       0
 20219 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20220 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20221 ;;      Totals:         2       0       0       0       0       0       0       0       0
 20222 ;;Total ram usage:        2 bytes
 20223 ;; Hardware stack levels used:    1
 20224 ;; Hardware stack levels required when called:    1
 20225 ;; This function calls:
 20226 ;;		_strcmp
 20227 ;;		_stringcpy
 20228 ;; This function is called by:
 20229 ;;		_isr
 20230 ;; This function uses a non-reentrant model
 20231 ;;
 20232                           
 20233                           	psect	text86
 20234  002534                     __ptext86:
 20235                           	opt stack 0
 20236  002534                     _GPSRead:
 20237                           	opt stack 14
 20238                           
 20239                           ;incstack = 0
 20240                           ;GPSRead@buff stored from wreg
 20241  002534  6E0A               	movwf	GPSRead@buff,c
 20242                           
 20243                           ;GPS.c: 470: uint8_t c = buff;
 20244  002536  C00A  F00B         	movff	GPSRead@buff,GPSRead@c
 20245                           
 20246                           ;GPS.c: 472: switch(c) {
 20247  00253A  D13D               	goto	i2l142
 20248  00253C                     
 20249                           ;GPS.c: 474: if(SentenceType == 1)
 20250  00253C  0437               	decf	_SentenceType,w,c
 20251  00253E  A4D8               	btfss	status,2,c
 20252  002540  D004               	goto	i2l144
 20253                           
 20254                           ;GPS.c: 475: GPRMC_ok = 1;
 20255  002542  0E00               	movlw	0
 20256  002544  6E2E               	movwf	_GPRMC_ok+1,c
 20257  002546  0E01               	movlw	1
 20258  002548  6E2D               	movwf	_GPRMC_ok,c
 20259  00254A                     i2l144:
 20260                           
 20261                           ;GPS.c: 476: if(SentenceType == 2)
 20262  00254A  0E02               	movlw	2
 20263  00254C  1837               	xorwf	_SentenceType,w,c
 20264  00254E  A4D8               	btfss	status,2,c
 20265  002550  D004               	goto	i2l145
 20266                           
 20267                           ;GPS.c: 477: GPGGA_ok = 1;
 20268  002552  0E00               	movlw	0
 20269  002554  6E2C               	movwf	_GPGGA_ok+1,c
 20270  002556  0E01               	movlw	1
 20271  002558  6E2B               	movwf	_GPGGA_ok,c
 20272  00255A                     i2l145:
 20273                           
 20274                           ;GPS.c: 478: if(GPRMC_ok && GPGGA_ok) {
 20275  00255A  502D               	movf	_GPRMC_ok,w,c
 20276  00255C  102E               	iorwf	_GPRMC_ok+1,w,c
 20277  00255E  B4D8               	btfsc	status,2,c
 20278  002560  0012               	return	
 20279  002562  502B               	movf	_GPGGA_ok,w,c
 20280  002564  102C               	iorwf	_GPGGA_ok+1,w,c
 20281  002566  B4D8               	btfsc	status,2,c
 20282  002568  0012               	return	
 20283                           
 20284                           ;GPS.c: 479: GPRMC_ok = GPGGA_ok = 0;
 20285  00256A  0E00               	movlw	0
 20286  00256C  6E2C               	movwf	_GPGGA_ok+1,c
 20287  00256E  0E00               	movlw	0
 20288  002570  6E2B               	movwf	_GPGGA_ok,c
 20289  002572  C02B  F02D         	movff	_GPGGA_ok,_GPRMC_ok
 20290  002576  C02C  F02E         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 20291                           
 20292                           ;GPS.c: 481: }
 20293                           ;GPS.c: 482: break;
 20294                           
 20295                           ;GPS.c: 480: return 1;
 20296                           ;	Return value of _GPSRead is never used
 20297  00257A  0012               	return	
 20298  00257C                     
 20299                           ;GPS.c: 485: Term = char_number = 0;
 20300  00257C  0E00               	movlw	0
 20301  00257E  6E38               	movwf	_char_number,c
 20302  002580  C038  F036         	movff	_char_number,_Term
 20303                           
 20304                           ;GPS.c: 486: break;
 20305  002584  0012               	return	
 20306  002586                     
 20307                           ;GPS.c: 489: buffer[char_number] = '\0';
 20308  002586  5038               	movf	_char_number,w,c
 20309  002588  0D01               	mullw	1
 20310  00258A  0EF4               	movlw	low _buffer
 20311  00258C  24F3               	addwf	prodl,w,c
 20312  00258E  6ED9               	movwf	fsr2l,c
 20313  002590  0E00               	movlw	high _buffer
 20314  002592  20F4               	addwfc	prodh,w,c
 20315  002594  6EDA               	movwf	fsr2h,c
 20316  002596  0E00               	movlw	0
 20317  002598  6EDF               	movwf	indf2,c
 20318                           
 20319                           ;GPS.c: 490: if(Term == 0) {
 20320  00259A  5036               	movf	_Term,w,c
 20321  00259C  A4D8               	btfss	status,2,c
 20322  00259E  D030               	goto	i2l155
 20323                           
 20324                           ;GPS.c: 491: stringcpy(buffer, sentence, 0);
 20325  0025A0  0EF4               	movlw	low _buffer
 20326  0025A2  6E01               	movwf	stringcpy@str1,c
 20327  0025A4  0E00               	movlw	high _buffer
 20328  0025A6  6E02               	movwf	stringcpy@str1+1,c
 20329  0025A8  0E96               	movlw	low _sentence
 20330  0025AA  6E03               	movwf	stringcpy@str2,c
 20331  0025AC  0E01               	movlw	high _sentence
 20332  0025AE  6E04               	movwf	stringcpy@str2+1,c
 20333  0025B0  0E00               	movlw	0
 20334  0025B2  6E06               	movwf	stringcpy@dir+1,c
 20335  0025B4  0E00               	movlw	0
 20336  0025B6  6E05               	movwf	stringcpy@dir,c
 20337  0025B8  EC43  F026         	call	_stringcpy	;wreg free
 20338                           
 20339                           ;GPS.c: 492: if(strcmp(sentence, "GPRMC") == 0)
 20340  0025BC  0E96               	movlw	low _sentence
 20341  0025BE  6E01               	movwf	strcmp@s1,c
 20342  0025C0  0E01               	movlw	high _sentence
 20343  0025C2  6E02               	movwf	strcmp@s1+1,c
 20344  0025C4  0EBD               	movlw	low STR_1
 20345  0025C6  6E03               	movwf	strcmp@s2,c
 20346  0025C8  0E08               	movlw	high STR_1
 20347  0025CA  6E04               	movwf	strcmp@s2+1,c
 20348  0025CC  ECFE  F026         	call	_strcmp	;wreg free
 20349  0025D0  5001               	movf	?_strcmp,w,c
 20350  0025D2  1002               	iorwf	?_strcmp+1,w,c
 20351  0025D4  A4D8               	btfss	status,2,c
 20352  0025D6  D002               	goto	i2l152
 20353                           
 20354                           ;GPS.c: 493: SentenceType = 1;
 20355  0025D8  0E01               	movlw	1
 20356  0025DA  D011               	goto	L11
 20357  0025DC                     i2l152:
 20358                           
 20359                           ;GPS.c: 494: else if(strcmp(sentence, "GPGGA") == 0)
 20360  0025DC  0E96               	movlw	low _sentence
 20361  0025DE  6E01               	movwf	strcmp@s1,c
 20362  0025E0  0E01               	movlw	high _sentence
 20363  0025E2  6E02               	movwf	strcmp@s1+1,c
 20364  0025E4  0EB7               	movlw	low STR_2
 20365  0025E6  6E03               	movwf	strcmp@s2,c
 20366  0025E8  0E08               	movlw	high STR_2
 20367  0025EA  6E04               	movwf	strcmp@s2+1,c
 20368  0025EC  ECFE  F026         	call	_strcmp	;wreg free
 20369  0025F0  5001               	movf	?_strcmp,w,c
 20370  0025F2  1002               	iorwf	?_strcmp+1,w,c
 20371  0025F4  A4D8               	btfss	status,2,c
 20372  0025F6  D002               	goto	i2l154
 20373                           
 20374                           ;GPS.c: 495: SentenceType = 2;
 20375  0025F8  0E02               	movlw	2
 20376  0025FA  D001               	goto	L11
 20377  0025FC                     i2l154:
 20378                           
 20379                           ;GPS.c: 496: else
 20380                           ;GPS.c: 497: SentenceType = 3;
 20381  0025FC  0E03               	movlw	3
 20382  0025FE                     L11:
 20383  0025FE  6E37               	movwf	_SentenceType,c
 20384  002600                     i2l155:
 20385                           
 20386                           ;GPS.c: 498: }
 20387                           ;GPS.c: 501: if(Term == 1 && SentenceType == 1) {
 20388  002600  0436               	decf	_Term,w,c
 20389  002602  A4D8               	btfss	status,2,c
 20390  002604  D011               	goto	i2l156
 20391  002606  0437               	decf	_SentenceType,w,c
 20392  002608  A4D8               	btfss	status,2,c
 20393  00260A  D00E               	goto	i2l156
 20394                           
 20395                           ;GPS.c: 502: stringcpy(buffer, rawTime, 0);
 20396  00260C  0EF4               	movlw	low _buffer
 20397  00260E  6E01               	movwf	stringcpy@str1,c
 20398  002610  0E00               	movlw	high _buffer
 20399  002612  6E02               	movwf	stringcpy@str1+1,c
 20400  002614  0E71               	movlw	low _rawTime
 20401  002616  6E03               	movwf	stringcpy@str2,c
 20402  002618  0E01               	movlw	high _rawTime
 20403  00261A  6E04               	movwf	stringcpy@str2+1,c
 20404  00261C  0E00               	movlw	0
 20405  00261E  6E06               	movwf	stringcpy@dir+1,c
 20406  002620  0E00               	movlw	0
 20407  002622  6E05               	movwf	stringcpy@dir,c
 20408  002624  EC43  F026         	call	_stringcpy	;wreg free
 20409  002628                     i2l156:
 20410                           
 20411                           ;GPS.c: 503: }
 20412                           ;GPS.c: 506: if((Term == 3) && (SentenceType == 1)) {
 20413  002628  0E03               	movlw	3
 20414  00262A  1836               	xorwf	_Term,w,c
 20415  00262C  A4D8               	btfss	status,2,c
 20416  00262E  D011               	goto	i2l157
 20417  002630  0437               	decf	_SentenceType,w,c
 20418  002632  A4D8               	btfss	status,2,c
 20419  002634  D00E               	goto	i2l157
 20420                           
 20421                           ;GPS.c: 507: stringcpy(buffer, rawLatitude, 1);
 20422  002636  0EF4               	movlw	low _buffer
 20423  002638  6E01               	movwf	stringcpy@str1,c
 20424  00263A  0E00               	movlw	high _buffer
 20425  00263C  6E02               	movwf	stringcpy@str1+1,c
 20426  00263E  0E64               	movlw	low _rawLatitude
 20427  002640  6E03               	movwf	stringcpy@str2,c
 20428  002642  0E01               	movlw	high _rawLatitude
 20429  002644  6E04               	movwf	stringcpy@str2+1,c
 20430  002646  0E00               	movlw	0
 20431  002648  6E06               	movwf	stringcpy@dir+1,c
 20432  00264A  0E01               	movlw	1
 20433  00264C  6E05               	movwf	stringcpy@dir,c
 20434  00264E  EC43  F026         	call	_stringcpy	;wreg free
 20435  002652                     i2l157:
 20436                           
 20437                           ;GPS.c: 508: }
 20438                           ;GPS.c: 510: if((Term == 4) && (SentenceType == 1)) {
 20439  002652  0E04               	movlw	4
 20440  002654  1836               	xorwf	_Term,w,c
 20441  002656  A4D8               	btfss	status,2,c
 20442  002658  D00D               	goto	i2l160
 20443  00265A  0437               	decf	_SentenceType,w,c
 20444  00265C  A4D8               	btfss	status,2,c
 20445  00265E  D00A               	goto	i2l160
 20446                           
 20447                           ;GPS.c: 511: if(buffer[0] == 'N')
 20448  002660  0E4E               	movlw	78
 20449  002662  0100               	movlb	0	; () banked
 20450  002664  19F4               	xorwf	_buffer& (0+255),w,b
 20451  002666  A4D8               	btfss	status,2,c
 20452  002668  D002               	goto	i2l159
 20453                           
 20454                           ; BSR set to: 0
 20455                           ;GPS.c: 512: rawLatitude[0] = '0';
 20456  00266A  0E30               	movlw	48
 20457  00266C  D001               	goto	L12
 20458  00266E                     i2l159:
 20459                           
 20460                           ;GPS.c: 513: else
 20461                           ;GPS.c: 514: rawLatitude[0] = '-';
 20462                           
 20463                           ; BSR set to: 1
 20464  00266E  0E2D               	movlw	45
 20465  002670                     L12:
 20466  002670  0101               	movlb	1	; () banked
 20467  002672  6F64               	movwf	_rawLatitude& (0+255),b
 20468  002674                     i2l160:
 20469                           
 20470                           ;GPS.c: 515: }
 20471                           ;GPS.c: 518: if((Term == 5) && (SentenceType == 1)) {
 20472                           
 20473                           ; BSR set to: 1
 20474                           
 20475                           ; BSR set to: 1
 20476  002674  0E05               	movlw	5
 20477  002676  1836               	xorwf	_Term,w,c
 20478  002678  A4D8               	btfss	status,2,c
 20479  00267A  D011               	goto	i2l161
 20480  00267C  0437               	decf	_SentenceType,w,c
 20481  00267E  A4D8               	btfss	status,2,c
 20482  002680  D00E               	goto	i2l161
 20483                           
 20484                           ;GPS.c: 519: stringcpy(buffer, rawLongitude, 1);
 20485  002682  0EF4               	movlw	low _buffer
 20486  002684  6E01               	movwf	stringcpy@str1,c
 20487  002686  0E00               	movlw	high _buffer
 20488  002688  6E02               	movwf	stringcpy@str1+1,c
 20489  00268A  0E57               	movlw	low _rawLongitude
 20490  00268C  6E03               	movwf	stringcpy@str2,c
 20491  00268E  0E01               	movlw	high _rawLongitude
 20492  002690  6E04               	movwf	stringcpy@str2+1,c
 20493  002692  0E00               	movlw	0
 20494  002694  6E06               	movwf	stringcpy@dir+1,c
 20495  002696  0E01               	movlw	1
 20496  002698  6E05               	movwf	stringcpy@dir,c
 20497  00269A  EC43  F026         	call	_stringcpy	;wreg free
 20498  00269E                     i2l161:
 20499                           
 20500                           ;GPS.c: 520: }
 20501                           ;GPS.c: 522: if((Term == 6) && (SentenceType == 1)) {
 20502  00269E  0E06               	movlw	6
 20503  0026A0  1836               	xorwf	_Term,w,c
 20504  0026A2  A4D8               	btfss	status,2,c
 20505  0026A4  D00D               	goto	i2l164
 20506  0026A6  0437               	decf	_SentenceType,w,c
 20507  0026A8  A4D8               	btfss	status,2,c
 20508  0026AA  D00A               	goto	i2l164
 20509                           
 20510                           ;GPS.c: 523: if(buffer[0] == 'E')
 20511  0026AC  0E45               	movlw	69
 20512  0026AE  0100               	movlb	0	; () banked
 20513  0026B0  19F4               	xorwf	_buffer& (0+255),w,b
 20514  0026B2  A4D8               	btfss	status,2,c
 20515  0026B4  D002               	goto	i2l163
 20516                           
 20517                           ; BSR set to: 0
 20518                           ;GPS.c: 524: rawLongitude[0] = '0';
 20519  0026B6  0E30               	movlw	48
 20520  0026B8  D001               	goto	L13
 20521  0026BA                     i2l163:
 20522                           
 20523                           ;GPS.c: 525: else
 20524                           ;GPS.c: 526: rawLongitude[0] = '-';
 20525                           
 20526                           ; BSR set to: 1
 20527  0026BA  0E2D               	movlw	45
 20528  0026BC                     L13:
 20529  0026BC  0101               	movlb	1	; () banked
 20530  0026BE  6F57               	movwf	_rawLongitude& (0+255),b
 20531  0026C0                     i2l164:
 20532                           
 20533                           ;GPS.c: 527: }
 20534                           ;GPS.c: 530: if((Term == 7) && (SentenceType == 1)) {
 20535                           
 20536                           ; BSR set to: 1
 20537                           
 20538                           ; BSR set to: 1
 20539  0026C0  0E07               	movlw	7
 20540  0026C2  1836               	xorwf	_Term,w,c
 20541  0026C4  A4D8               	btfss	status,2,c
 20542  0026C6  D011               	goto	i2l165
 20543  0026C8  0437               	decf	_SentenceType,w,c
 20544  0026CA  A4D8               	btfss	status,2,c
 20545  0026CC  D00E               	goto	i2l165
 20546                           
 20547                           ;GPS.c: 531: stringcpy(buffer, rawSpeed, 0);
 20548  0026CE  0EF4               	movlw	low _buffer
 20549  0026D0  6E01               	movwf	stringcpy@str1,c
 20550  0026D2  0E00               	movlw	high _buffer
 20551  0026D4  6E02               	movwf	stringcpy@str1+1,c
 20552  0026D6  0E90               	movlw	low _rawSpeed
 20553  0026D8  6E03               	movwf	stringcpy@str2,c
 20554  0026DA  0E01               	movlw	high _rawSpeed
 20555  0026DC  6E04               	movwf	stringcpy@str2+1,c
 20556  0026DE  0E00               	movlw	0
 20557  0026E0  6E06               	movwf	stringcpy@dir+1,c
 20558  0026E2  0E00               	movlw	0
 20559  0026E4  6E05               	movwf	stringcpy@dir,c
 20560  0026E6  EC43  F026         	call	_stringcpy	;wreg free
 20561  0026EA                     i2l165:
 20562                           
 20563                           ;GPS.c: 532: }
 20564                           ;GPS.c: 535: if((Term == 8) && (SentenceType == 1)) {
 20565  0026EA  0E08               	movlw	8
 20566  0026EC  1836               	xorwf	_Term,w,c
 20567  0026EE  A4D8               	btfss	status,2,c
 20568  0026F0  D011               	goto	i2l166
 20569  0026F2  0437               	decf	_SentenceType,w,c
 20570  0026F4  A4D8               	btfss	status,2,c
 20571  0026F6  D00E               	goto	i2l166
 20572                           
 20573                           ;GPS.c: 536: stringcpy(buffer, rawCourse, 0);
 20574  0026F8  0EF4               	movlw	low _buffer
 20575  0026FA  6E01               	movwf	stringcpy@str1,c
 20576  0026FC  0E00               	movlw	high _buffer
 20577  0026FE  6E02               	movwf	stringcpy@str1+1,c
 20578  002700  0E8A               	movlw	low _rawCourse
 20579  002702  6E03               	movwf	stringcpy@str2,c
 20580  002704  0E01               	movlw	high _rawCourse
 20581  002706  6E04               	movwf	stringcpy@str2+1,c
 20582  002708  0E00               	movlw	0
 20583  00270A  6E06               	movwf	stringcpy@dir+1,c
 20584  00270C  0E00               	movlw	0
 20585  00270E  6E05               	movwf	stringcpy@dir,c
 20586  002710  EC43  F026         	call	_stringcpy	;wreg free
 20587  002714                     i2l166:
 20588                           
 20589                           ;GPS.c: 537: }
 20590                           ;GPS.c: 540: if(Term == 9 && SentenceType == 1) {
 20591  002714  0E09               	movlw	9
 20592  002716  1836               	xorwf	_Term,w,c
 20593  002718  A4D8               	btfss	status,2,c
 20594  00271A  D011               	goto	i2l167
 20595  00271C  0437               	decf	_SentenceType,w,c
 20596  00271E  A4D8               	btfss	status,2,c
 20597  002720  D00E               	goto	i2l167
 20598                           
 20599                           ;GPS.c: 541: stringcpy(buffer, rawDate, 0);
 20600  002722  0EF4               	movlw	low _buffer
 20601  002724  6E01               	movwf	stringcpy@str1,c
 20602  002726  0E00               	movlw	high _buffer
 20603  002728  6E02               	movwf	stringcpy@str1+1,c
 20604  00272A  0E83               	movlw	low _rawDate
 20605  00272C  6E03               	movwf	stringcpy@str2,c
 20606  00272E  0E01               	movlw	high _rawDate
 20607  002730  6E04               	movwf	stringcpy@str2+1,c
 20608  002732  0E00               	movlw	0
 20609  002734  6E06               	movwf	stringcpy@dir+1,c
 20610  002736  0E00               	movlw	0
 20611  002738  6E05               	movwf	stringcpy@dir,c
 20612  00273A  EC43  F026         	call	_stringcpy	;wreg free
 20613  00273E                     i2l167:
 20614                           
 20615                           ;GPS.c: 542: }
 20616                           ;GPS.c: 545: if((Term == 7) && (SentenceType == 2)) {
 20617  00273E  0E07               	movlw	7
 20618  002740  1836               	xorwf	_Term,w,c
 20619  002742  A4D8               	btfss	status,2,c
 20620  002744  D012               	goto	i2l168
 20621  002746  0E02               	movlw	2
 20622  002748  1837               	xorwf	_SentenceType,w,c
 20623  00274A  A4D8               	btfss	status,2,c
 20624  00274C  D00E               	goto	i2l168
 20625                           
 20626                           ;GPS.c: 546: stringcpy(buffer, rawSatellites, 0);
 20627  00274E  0EF4               	movlw	low _buffer
 20628  002750  6E01               	movwf	stringcpy@str1,c
 20629  002752  0E00               	movlw	high _buffer
 20630  002754  6E02               	movwf	stringcpy@str1+1,c
 20631  002756  0E3C               	movlw	low _rawSatellites
 20632  002758  6E03               	movwf	stringcpy@str2,c
 20633  00275A  0E00               	movlw	high _rawSatellites
 20634  00275C  6E04               	movwf	stringcpy@str2+1,c
 20635  00275E  0E00               	movlw	0
 20636  002760  6E06               	movwf	stringcpy@dir+1,c
 20637  002762  0E00               	movlw	0
 20638  002764  6E05               	movwf	stringcpy@dir,c
 20639  002766  EC43  F026         	call	_stringcpy	;wreg free
 20640  00276A                     i2l168:
 20641                           
 20642                           ;GPS.c: 547: }
 20643                           ;GPS.c: 550: if((Term == 9) && (SentenceType == 2)) {
 20644  00276A  0E09               	movlw	9
 20645  00276C  1836               	xorwf	_Term,w,c
 20646  00276E  A4D8               	btfss	status,2,c
 20647  002770  D012               	goto	i2l169
 20648  002772  0E02               	movlw	2
 20649  002774  1837               	xorwf	_SentenceType,w,c
 20650  002776  A4D8               	btfss	status,2,c
 20651  002778  D00E               	goto	i2l169
 20652                           
 20653                           ;GPS.c: 551: stringcpy(buffer, rawAltitude, 0);
 20654  00277A  0EF4               	movlw	low _buffer
 20655  00277C  6E01               	movwf	stringcpy@str1,c
 20656  00277E  0E00               	movlw	high _buffer
 20657  002780  6E02               	movwf	stringcpy@str1+1,c
 20658  002782  0E7C               	movlw	low _rawAltitude
 20659  002784  6E03               	movwf	stringcpy@str2,c
 20660  002786  0E01               	movlw	high _rawAltitude
 20661  002788  6E04               	movwf	stringcpy@str2+1,c
 20662  00278A  0E00               	movlw	0
 20663  00278C  6E06               	movwf	stringcpy@dir+1,c
 20664  00278E  0E00               	movlw	0
 20665  002790  6E05               	movwf	stringcpy@dir,c
 20666  002792  EC43  F026         	call	_stringcpy	;wreg free
 20667  002796                     i2l169:
 20668                           
 20669                           ;GPS.c: 552: }
 20670                           ;GPS.c: 553: Term++;
 20671  002796  2A36               	incf	_Term,f,c
 20672                           
 20673                           ;GPS.c: 554: char_number = 0;
 20674  002798  0E00               	movlw	0
 20675  00279A  6E38               	movwf	_char_number,c
 20676                           
 20677                           ;GPS.c: 555: break;
 20678  00279C  0012               	return	
 20679  00279E                     
 20680                           ;GPS.c: 558: buffer[char_number++] = c;
 20681  00279E  5038               	movf	_char_number,w,c
 20682  0027A0  0D01               	mullw	1
 20683  0027A2  0EF4               	movlw	low _buffer
 20684  0027A4  24F3               	addwf	prodl,w,c
 20685  0027A6  6ED9               	movwf	fsr2l,c
 20686  0027A8  0E00               	movlw	high _buffer
 20687  0027AA  20F4               	addwfc	prodh,w,c
 20688  0027AC  6EDA               	movwf	fsr2h,c
 20689  0027AE  C00B  FFDF         	movff	GPSRead@c,indf2
 20690  0027B2  2A38               	incf	_char_number,f,c
 20691                           
 20692                           ;GPS.c: 560: }
 20693                           
 20694                           ;GPS.c: 559: break;
 20695  0027B4  0012               	return	
 20696  0027B6                     i2l142:
 20697  0027B6  500B               	movf	GPSRead@c,w,c
 20698                           
 20699                           ; Switch size 1, requested type "space"
 20700                           ; Number of cases is 3, Range of values is 13 to 44
 20701                           ; switch strategies available:
 20702                           ; Name         Instructions Cycles
 20703                           ; simple_byte           10     6 (average)
 20704                           ;	Chosen strategy is simple_byte
 20705  0027B8  0A0D               	xorlw	13	; case 13
 20706  0027BA  B4D8               	btfsc	status,2,c
 20707  0027BC  D6BF               	goto	i2l143
 20708  0027BE  0A29               	xorlw	41	; case 36
 20709  0027C0  B4D8               	btfsc	status,2,c
 20710  0027C2  D6DC               	goto	i2l149
 20711  0027C4  0A08               	xorlw	8	; case 44
 20712  0027C6  B4D8               	btfsc	status,2,c
 20713  0027C8  D6DE               	goto	i2l150
 20714  0027CA  D7E9               	goto	i2l170
 20715  0027CC                     __end_of_GPSRead:
 20716                           	opt stack 0
 20717                           tosu	equ	0xFFF
 20718                           tosh	equ	0xFFE
 20719                           tosl	equ	0xFFD
 20720                           pclatu	equ	0xFFB
 20721                           pclath	equ	0xFFA
 20722                           pcl	equ	0xFF9
 20723                           tblptru	equ	0xFF8
 20724                           tblptrh	equ	0xFF7
 20725                           tblptrl	equ	0xFF6
 20726                           tablat	equ	0xFF5
 20727                           prodh	equ	0xFF4
 20728                           prodl	equ	0xFF3
 20729                           intcon	equ	0xFF2
 20730                           intcon2	equ	0xFF1
 20731                           intcon3	equ	0xFF0
 20732                           indf0	equ	0xFEF
 20733                           postinc0	equ	0xFEE
 20734                           fsr0h	equ	0xFEA
 20735                           fsr0l	equ	0xFE9
 20736                           wreg	equ	0xFE8
 20737                           indf1	equ	0xFE7
 20738                           postinc1	equ	0xFE6
 20739                           postdec1	equ	0xFE5
 20740                           plusw1	equ	0xFE3
 20741                           fsr1h	equ	0xFE2
 20742                           fsr1l	equ	0xFE1
 20743                           indf2	equ	0xFDF
 20744                           postinc2	equ	0xFDE
 20745                           postdec2	equ	0xFDD
 20746                           plusw2	equ	0xFDB
 20747                           fsr2h	equ	0xFDA
 20748                           fsr2l	equ	0xFD9
 20749                           status	equ	0xFD8
 20750                           
 20751 ;; *************** function _stringcpy *****************
 20752 ;; Defined at:
 20753 ;;		line 459 in file "bibliotecas/GPS.c"
 20754 ;; Parameters:    Size  Location     Type
 20755 ;;  str1            2    0[COMRAM] PTR unsigned char 
 20756 ;;		 -> buffer(12), 
 20757 ;;  str2            2    2[COMRAM] PTR unsigned char 
 20758 ;;		 -> rawAltitude(7), rawSatellites(3), rawDate(7), rawCourse(6), 
 20759 ;;		 -> rawSpeed(6), rawLongitude(13), rawLatitude(13), rawTime(11), 
 20760 ;;		 -> sentence(6), 
 20761 ;;  dir             2    4[COMRAM] int 
 20762 ;; Auto vars:     Size  Location     Type
 20763 ;;  chr             1    8[COMRAM] unsigned char 
 20764 ;; Return value:  Size  Location     Type
 20765 ;;                  1    wreg      void 
 20766 ;; Registers used:
 20767 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20768 ;; Tracked objects:
 20769 ;;		On entry : 0/0
 20770 ;;		On exit  : 0/0
 20771 ;;		Unchanged: 0/0
 20772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20773 ;;      Params:         6       0       0       0       0       0       0       0       0
 20774 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20775 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20776 ;;      Totals:         9       0       0       0       0       0       0       0       0
 20777 ;;Total ram usage:        9 bytes
 20778 ;; Hardware stack levels used:    1
 20779 ;; This function calls:
 20780 ;;		Nothing
 20781 ;; This function is called by:
 20782 ;;		_GPSRead
 20783 ;; This function uses a non-reentrant model
 20784 ;;
 20785                           
 20786                           	psect	text87
 20787  004C86                     __ptext87:
 20788                           	opt stack 0
 20789  004C86                     _stringcpy:
 20790                           	opt stack 14
 20791                           
 20792                           ;GPS.c: 461: uint8_t chr = 0;
 20793                           
 20794                           ;incstack = 0
 20795  004C86  0E00               	movlw	0
 20796  004C88  6E09               	movwf	stringcpy@chr,c
 20797  004C8A                     
 20798                           ;GPS.c: 464: str2[chr + dir] = str1[chr];
 20799  004C8A  5009               	movf	stringcpy@chr,w,c
 20800  004C8C  0D01               	mullw	1
 20801  004C8E  50F3               	movf	prodl,w,c
 20802  004C90  2401               	addwf	stringcpy@str1,w,c
 20803  004C92  6ED9               	movwf	fsr2l,c
 20804  004C94  50F4               	movf	prodh,w,c
 20805  004C96  2002               	addwfc	stringcpy@str1+1,w,c
 20806  004C98  6EDA               	movwf	fsr2h,c
 20807  004C9A  5009               	movf	stringcpy@chr,w,c
 20808  004C9C  2405               	addwf	stringcpy@dir,w,c
 20809  004C9E  6E07               	movwf	??_stringcpy& (0+255),c
 20810  004CA0  0E00               	movlw	0
 20811  004CA2  2006               	addwfc	stringcpy@dir+1,w,c
 20812  004CA4  6E08               	movwf	(??_stringcpy+1)& (0+255),c
 20813  004CA6  5007               	movf	??_stringcpy,w,c
 20814  004CA8  2403               	addwf	stringcpy@str2,w,c
 20815  004CAA  6EE1               	movwf	fsr1l,c
 20816  004CAC  5008               	movf	??_stringcpy+1,w,c
 20817  004CAE  2004               	addwfc	stringcpy@str2+1,w,c
 20818  004CB0  6EE2               	movwf	fsr1h,c
 20819  004CB2  CFDF FFE7          	movff	indf2,indf1
 20820                           
 20821                           ;GPS.c: 465: } while(str1[chr++] != '\0');
 20822  004CB6  2A09               	incf	stringcpy@chr,f,c
 20823  004CB8  0409               	decf	stringcpy@chr,w,c
 20824  004CBA  6E07               	movwf	??_stringcpy& (0+255),c
 20825  004CBC  5007               	movf	??_stringcpy,w,c
 20826  004CBE  0D01               	mullw	1
 20827  004CC0  50F3               	movf	prodl,w,c
 20828  004CC2  2401               	addwf	stringcpy@str1,w,c
 20829  004CC4  6ED9               	movwf	fsr2l,c
 20830  004CC6  50F4               	movf	prodh,w,c
 20831  004CC8  2002               	addwfc	stringcpy@str1+1,w,c
 20832  004CCA  6EDA               	movwf	fsr2h,c
 20833  004CCC  50DF               	movf	indf2,w,c
 20834  004CCE  B4D8               	btfsc	status,2,c
 20835  004CD0  0012               	return	
 20836  004CD2  D7DB               	goto	i2l137
 20837  004CD4                     __end_of_stringcpy:
 20838                           	opt stack 0
 20839                           tosu	equ	0xFFF
 20840                           tosh	equ	0xFFE
 20841                           tosl	equ	0xFFD
 20842                           pclatu	equ	0xFFB
 20843                           pclath	equ	0xFFA
 20844                           pcl	equ	0xFF9
 20845                           tblptru	equ	0xFF8
 20846                           tblptrh	equ	0xFF7
 20847                           tblptrl	equ	0xFF6
 20848                           tablat	equ	0xFF5
 20849                           prodh	equ	0xFF4
 20850                           prodl	equ	0xFF3
 20851                           intcon	equ	0xFF2
 20852                           intcon2	equ	0xFF1
 20853                           intcon3	equ	0xFF0
 20854                           indf0	equ	0xFEF
 20855                           postinc0	equ	0xFEE
 20856                           fsr0h	equ	0xFEA
 20857                           fsr0l	equ	0xFE9
 20858                           wreg	equ	0xFE8
 20859                           indf1	equ	0xFE7
 20860                           postinc1	equ	0xFE6
 20861                           postdec1	equ	0xFE5
 20862                           plusw1	equ	0xFE3
 20863                           fsr1h	equ	0xFE2
 20864                           fsr1l	equ	0xFE1
 20865                           indf2	equ	0xFDF
 20866                           postinc2	equ	0xFDE
 20867                           postdec2	equ	0xFDD
 20868                           plusw2	equ	0xFDB
 20869                           fsr2h	equ	0xFDA
 20870                           fsr2l	equ	0xFD9
 20871                           status	equ	0xFD8
 20872                           
 20873 ;; *************** function _strcmp *****************
 20874 ;; Defined at:
 20875 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
 20876 ;; Parameters:    Size  Location     Type
 20877 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 20878 ;;		 -> sentence(6), 
 20879 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 20880 ;;		 -> STR_2(6), STR_1(6), 
 20881 ;; Auto vars:     Size  Location     Type
 20882 ;;  r               1    5[COMRAM] char 
 20883 ;; Return value:  Size  Location     Type
 20884 ;;                  2    0[COMRAM] int 
 20885 ;; Registers used:
 20886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20887 ;; Tracked objects:
 20888 ;;		On entry : 0/0
 20889 ;;		On exit  : 0/0
 20890 ;;		Unchanged: 0/0
 20891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20892 ;;      Params:         4       0       0       0       0       0       0       0       0
 20893 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20894 ;;      Temps:          1       0       0       0       0       0       0       0       0
 20895 ;;      Totals:         6       0       0       0       0       0       0       0       0
 20896 ;;Total ram usage:        6 bytes
 20897 ;; Hardware stack levels used:    1
 20898 ;; This function calls:
 20899 ;;		Nothing
 20900 ;; This function is called by:
 20901 ;;		_GPSRead
 20902 ;; This function uses a non-reentrant model
 20903 ;;
 20904                           
 20905                           	psect	text88
 20906  004DFC                     __ptext88:
 20907                           	opt stack 0
 20908  004DFC                     _strcmp:
 20909                           	opt stack 14
 20910                           
 20911                           ;incstack = 0
 20912  004DFC  D004               	goto	i2l1925
 20913  004DFE  4A01               	infsnz	strcmp@s1,f,c
 20914  004E00  2A02               	incf	strcmp@s1+1,f,c
 20915  004E02  4A03               	infsnz	strcmp@s2,f,c
 20916  004E04  2A04               	incf	strcmp@s2+1,f,c
 20917  004E06                     i2l1925:
 20918  004E06  C001  FFD9         	movff	strcmp@s1,fsr2l
 20919  004E0A  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 20920  004E0E  50DF               	movf	indf2,w,c
 20921  004E10  6E05               	movwf	??_strcmp& (0+255),c
 20922  004E12  C003  FFF6         	movff	strcmp@s2,tblptrl
 20923  004E16  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 20924  004E1A                     	if	0	;tblptru may be non-zero
 20925  004E1A                     	endif
 20926  004E1A                     	if	0	;tblptru may be non-zero
 20927  004E1A                     	endif
 20928  004E1A  0008               	tblrd		*
 20929  004E1C  50F5               	movf	tablat,w,c
 20930  004E1E  0800               	sublw	0
 20931  004E20  2405               	addwf	??_strcmp,w,c
 20932  004E22  6E06               	movwf	strcmp@r,c
 20933  004E24  5006               	movf	strcmp@r,w,c
 20934  004E26  A4D8               	btfss	status,2,c
 20935  004E28  D007               	goto	i2u878_40
 20936  004E2A  C001  FFD9         	movff	strcmp@s1,fsr2l
 20937  004E2E  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 20938  004E32  50DF               	movf	indf2,w,c
 20939  004E34  A4D8               	btfss	status,2,c
 20940  004E36  D7E3               	goto	i2l1926
 20941  004E38                     i2u878_40:
 20942  004E38  5006               	movf	strcmp@r,w,c
 20943  004E3A  6E01               	movwf	?_strcmp,c
 20944  004E3C  6A02               	clrf	?_strcmp+1,c
 20945  004E3E  BE01               	btfsc	?_strcmp,7,c
 20946  004E40  0602               	decf	?_strcmp+1,f,c
 20947  004E42  0012               	return	
 20948  004E44                     __end_of_strcmp:
 20949                           	opt stack 0
 20950                           tosu	equ	0xFFF
 20951                           tosh	equ	0xFFE
 20952                           tosl	equ	0xFFD
 20953                           pclatu	equ	0xFFB
 20954                           pclath	equ	0xFFA
 20955                           pcl	equ	0xFF9
 20956                           tblptru	equ	0xFF8
 20957                           tblptrh	equ	0xFF7
 20958                           tblptrl	equ	0xFF6
 20959                           tablat	equ	0xFF5
 20960                           prodh	equ	0xFF4
 20961                           prodl	equ	0xFF3
 20962                           intcon	equ	0xFF2
 20963                           intcon2	equ	0xFF1
 20964                           intcon3	equ	0xFF0
 20965                           indf0	equ	0xFEF
 20966                           postinc0	equ	0xFEE
 20967                           fsr0h	equ	0xFEA
 20968                           fsr0l	equ	0xFE9
 20969                           wreg	equ	0xFE8
 20970                           indf1	equ	0xFE7
 20971                           postinc1	equ	0xFE6
 20972                           postdec1	equ	0xFE5
 20973                           plusw1	equ	0xFE3
 20974                           fsr1h	equ	0xFE2
 20975                           fsr1l	equ	0xFE1
 20976                           indf2	equ	0xFDF
 20977                           postinc2	equ	0xFDE
 20978                           postdec2	equ	0xFDD
 20979                           plusw2	equ	0xFDB
 20980                           fsr2h	equ	0xFDA
 20981                           fsr2l	equ	0xFD9
 20982                           status	equ	0xFD8
 20983                           tosu	equ	0xFFF
 20984                           tosh	equ	0xFFE
 20985                           tosl	equ	0xFFD
 20986                           pclatu	equ	0xFFB
 20987                           pclath	equ	0xFFA
 20988                           pcl	equ	0xFF9
 20989                           tblptru	equ	0xFF8
 20990                           tblptrh	equ	0xFF7
 20991                           tblptrl	equ	0xFF6
 20992                           tablat	equ	0xFF5
 20993                           prodh	equ	0xFF4
 20994                           prodl	equ	0xFF3
 20995                           intcon	equ	0xFF2
 20996                           intcon2	equ	0xFF1
 20997                           intcon3	equ	0xFF0
 20998                           indf0	equ	0xFEF
 20999                           postinc0	equ	0xFEE
 21000                           fsr0h	equ	0xFEA
 21001                           fsr0l	equ	0xFE9
 21002                           wreg	equ	0xFE8
 21003                           indf1	equ	0xFE7
 21004                           postinc1	equ	0xFE6
 21005                           postdec1	equ	0xFE5
 21006                           plusw1	equ	0xFE3
 21007                           fsr1h	equ	0xFE2
 21008                           fsr1l	equ	0xFE1
 21009                           indf2	equ	0xFDF
 21010                           postinc2	equ	0xFDE
 21011                           postdec2	equ	0xFDD
 21012                           plusw2	equ	0xFDB
 21013                           fsr2h	equ	0xFDA
 21014                           fsr2l	equ	0xFD9
 21015                           status	equ	0xFD8
 21016                           
 21017                           	psect	text89
 21018  000000                     __ptext89:
 21019                           	opt stack 0
 21020                           tosu	equ	0xFFF
 21021                           tosh	equ	0xFFE
 21022                           tosl	equ	0xFFD
 21023                           pclatu	equ	0xFFB
 21024                           pclath	equ	0xFFA
 21025                           pcl	equ	0xFF9
 21026                           tblptru	equ	0xFF8
 21027                           tblptrh	equ	0xFF7
 21028                           tblptrl	equ	0xFF6
 21029                           tablat	equ	0xFF5
 21030                           prodh	equ	0xFF4
 21031                           prodl	equ	0xFF3
 21032                           intcon	equ	0xFF2
 21033                           intcon2	equ	0xFF1
 21034                           intcon3	equ	0xFF0
 21035                           indf0	equ	0xFEF
 21036                           postinc0	equ	0xFEE
 21037                           fsr0h	equ	0xFEA
 21038                           fsr0l	equ	0xFE9
 21039                           wreg	equ	0xFE8
 21040                           indf1	equ	0xFE7
 21041                           postinc1	equ	0xFE6
 21042                           postdec1	equ	0xFE5
 21043                           plusw1	equ	0xFE3
 21044                           fsr1h	equ	0xFE2
 21045                           fsr1l	equ	0xFE1
 21046                           indf2	equ	0xFDF
 21047                           postinc2	equ	0xFDE
 21048                           postdec2	equ	0xFDD
 21049                           plusw2	equ	0xFDB
 21050                           fsr2h	equ	0xFDA
 21051                           fsr2l	equ	0xFD9
 21052                           status	equ	0xFD8
 21053                           
 21054                           	psect	rparam
 21055  0000                     tosu	equ	0xFFF
 21056                           tosh	equ	0xFFE
 21057                           tosl	equ	0xFFD
 21058                           pclatu	equ	0xFFB
 21059                           pclath	equ	0xFFA
 21060                           pcl	equ	0xFF9
 21061                           tblptru	equ	0xFF8
 21062                           tblptrh	equ	0xFF7
 21063                           tblptrl	equ	0xFF6
 21064                           tablat	equ	0xFF5
 21065                           prodh	equ	0xFF4
 21066                           prodl	equ	0xFF3
 21067                           intcon	equ	0xFF2
 21068                           intcon2	equ	0xFF1
 21069                           intcon3	equ	0xFF0
 21070                           indf0	equ	0xFEF
 21071                           postinc0	equ	0xFEE
 21072                           fsr0h	equ	0xFEA
 21073                           fsr0l	equ	0xFE9
 21074                           wreg	equ	0xFE8
 21075                           indf1	equ	0xFE7
 21076                           postinc1	equ	0xFE6
 21077                           postdec1	equ	0xFE5
 21078                           plusw1	equ	0xFE3
 21079                           fsr1h	equ	0xFE2
 21080                           fsr1l	equ	0xFE1
 21081                           indf2	equ	0xFDF
 21082                           postinc2	equ	0xFDE
 21083                           postdec2	equ	0xFDD
 21084                           plusw2	equ	0xFDB
 21085                           fsr2h	equ	0xFDA
 21086                           fsr2l	equ	0xFD9
 21087                           status	equ	0xFD8
 21088                           
 21089                           	psect	temp
 21090  00003F                     btemp:
 21091                           	opt stack 0
 21092  00003F                     	ds	1
 21093  0000                     int$flags	set	btemp
 21094  0000                     wtemp6	set	btemp+1
 21095                           tosu	equ	0xFFF
 21096                           tosh	equ	0xFFE
 21097                           tosl	equ	0xFFD
 21098                           pclatu	equ	0xFFB
 21099                           pclath	equ	0xFFA
 21100                           pcl	equ	0xFF9
 21101                           tblptru	equ	0xFF8
 21102                           tblptrh	equ	0xFF7
 21103                           tblptrl	equ	0xFF6
 21104                           tablat	equ	0xFF5
 21105                           prodh	equ	0xFF4
 21106                           prodl	equ	0xFF3
 21107                           intcon	equ	0xFF2
 21108                           intcon2	equ	0xFF1
 21109                           intcon3	equ	0xFF0
 21110                           indf0	equ	0xFEF
 21111                           postinc0	equ	0xFEE
 21112                           fsr0h	equ	0xFEA
 21113                           fsr0l	equ	0xFE9
 21114                           wreg	equ	0xFE8
 21115                           indf1	equ	0xFE7
 21116                           postinc1	equ	0xFE6
 21117                           postdec1	equ	0xFE5
 21118                           plusw1	equ	0xFE3
 21119                           fsr1h	equ	0xFE2
 21120                           fsr1l	equ	0xFE1
 21121                           indf2	equ	0xFDF
 21122                           postinc2	equ	0xFDE
 21123                           postdec2	equ	0xFDD
 21124                           plusw2	equ	0xFDB
 21125                           fsr2h	equ	0xFDA
 21126                           fsr2l	equ	0xFD9
 21127                           status	equ	0xFD8


Data Sizes:
    Strings     172
    Constant    34
    Data        14
    BSS         752
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     34      62
    BANK0           160    136     160
    BANK1           256     63     233
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3258	PTR FTN()void  size(2) Largest target is 1
		 -> escrita_sdcard(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    time	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 44
		 -> string_dado.data(BANK1[7]), string_dado(BANK1[44]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[6]), STR_1(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK1[6]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_10(CODE[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), STR_16(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_9(CODE[21]), 

    fprintf@arp	PTR void [1] size(2) Largest target is 2
		 -> ?_fprintf(BANK1[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 44
		 -> fprintf@s(BANK1[16]), string_dado(BANK1[44]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_open@dir(BANK1[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    trace_path@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK1[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    S1677_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 44
		 -> escreve_inteiro_lcd@texto(BANK0[7]), STR_14(CODE[11]), STR_13(CODE[10]), STR_12(CODE[16]), 
		 -> STR_11(CODE[11]), string_dado(BANK1[44]), STR_8(CODE[9]), STR_7(CODE[10]), 
		 -> STR_6(CODE[10]), STR_5(CODE[14]), STR_4(CODE[21]), STR_3(CODE[15]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    S403_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S403_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK0[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 13
		 -> rawAltitude(BANK1[7]), rawSatellites(COMRAM[3]), rawDate(BANK1[7]), rawCourse(BANK1[6]), 
		 -> rawSpeed(BANK1[6]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 
		 -> sentence(BANK1[6]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> escrita_sdcard(), 


Critical Paths under _main in COMRAM

    _monta_sd->_strcat
    _monta_sd->_strcpy
    _monta_sd->_strlen
    _init_lcd->_delay
    _escreve_cmd_lcd->_delay
    _config_timer_zero->_write_timer_zero
    _escrita_sdcard->_f_mount
    _inicializa_uart->_configura_baudrate_uart
    _fprintf->___wmul
    _f_write->_clust2sect
    _f_open->_memset
    _trace_path->_clust2sect
    _make_dirfile->_memset
    _reserve_direntry->_clust2sect
    _reserve_direntry->_memset
    _next_dir_entry->_clust2sect
    _auto_mount->_memset
    _sdc_disk_initialize->_dummy_clocks
    _endereco_cursor_lcd->_delay
    _put_cluster->___wmul
    _get_cluster->___wmul
    _disk_status->_sdc_disk_status
    _sync->_disk_ioctl
    _sdc_disk_write->_dummy_clocks
    _sdc_disk_write->_escreve_SPI
    _sdc_disk_read->_dummy_clocks
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_escreve_SPI
    _utoa->___lwmod
    _escreve_caractere_lcd->_delay

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _transf_dados_sd->_monta_sd
    _monta_sd->_strcat
    _monta_sd->_strcpy
    _monta_sd->_strlen
    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _fprintf->_fputc
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_trace_path
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _clust2sect->___lmul
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _validate->_disk_status
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _command->_wait_ready
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _escreve_frase_ram_lcd->_escreve_caractere_lcd

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_escalonador
    _escrita_sdcard->_fprintf
    _fprintf->_fputs
    _fputs->_fputc

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  426448
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
                    _transf_dados_sd
 ---------------------------------------------------------------------------------
 (1) _transf_dados_sd                                      0     0      0    1922
                           _monta_sd
 ---------------------------------------------------------------------------------
 (2) _monta_sd                                             5     3      2    1922
                                              4 BANK0      5     3      2
                             _strcat
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     220
                                             32 COMRAM     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     289
                                             32 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     323
                                             32 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    4213
                                              4 BANK0     36    36      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                              1 BANK0      1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                              0 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     247
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     247
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     247
                                             32 COMRAM     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  418335
                                             60 BANK1      3     3      0
                     _escrita_sdcard *
 ---------------------------------------------------------------------------------
 (2) _escrita_sdcard                                       1     1      0  418112
                        _desliga_SPI
                       _desliga_uart
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                     _inicializa_SPI
                    _inicializa_uart
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             32 COMRAM     2     2      0
                                             14 BANK0     12     8      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fprintf                                             49    37     12  127472
                                             11 BANK1     49    37     12
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (4) _fputs                                                7     3      4   61571
                                              4 BANK1      7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                7     3      4   61078
                                            133 BANK0      3     3      0
                                              0 BANK1      4     0      4
                            _f_write
 ---------------------------------------------------------------------------------
 (6) _f_write                                             33    25      8   60266
                                            100 BANK0     33    25      8
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     412
                                             32 COMRAM     1     1      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _f_open                                              44    39      5  194896
                                            119 BANK0      9     4      5
                                              0 BANK1     35    35      0
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (4) _trace_path                                          23    15      8   39138
                                             96 BANK0     23    15      8
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (5) _make_dirfile                                        13     9      4    2753
                                              6 BANK0     13     9      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _reserve_direntry                                    18    14      4   76291
                                            100 BANK0     18    14      4
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (5) _next_dir_entry                                      13    11      2   18463
                                             83 BANK0     13    11      2
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (7) _clust2sect                                          11     7      4    1487
                                             32 COMRAM     2     2      0
                                             12 BANK0      9     5      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _remove_chain                                         8     6      2   32953
                                             86 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (7) _memcpy                                              11     5      6    1018
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _auto_mount                                          40    37      3   27263
                                             51 BANK0     40    37      3
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (6) _memset                                               8     2      6    1217
                                             32 COMRAM     2     2      0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (5) _disk_initialize                                      4     4      0   15536
                                             32 BANK0      2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_initialize                                 13    13      0   15406
                                             19 BANK0     13    13      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (7) _sdc_reset                                           20    20      0    7269
                                             12 BANK0      7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    1947
                                              1 BANK0      3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                              0 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _check_fs                                             8     4      4    6655
                                             43 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (5) _memcmp                                               9     3      6     701
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (8) ___lmul                                              12     4      8     516
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _f_mount                                              3     1      2     304
                                             32 COMRAM     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _f_lseek                                             29    23      6   54330
                                            100 BANK0     29    23      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (7) _create_chain                                        14    12      2   34016
                                             86 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (8) _put_cluster                                         22    18      4   16433
                                             64 BANK0     22    18      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (8) _get_cluster                                         19    17      2   16142
                                             64 BANK0     19    17      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (9) ___wmul                                               6     2      4    1102
                                             32 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     901
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _f_close                                              3     1      2   30301
                                             75 BANK0      3     1      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (4) _f_sync                                               9     7      2   30018
                                             66 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (7) _validate                                             6     2      4    1250
                                              5 BANK0      6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (8) _disk_status                                          5     5      0     226
                                              0 BANK0      5     5      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (9) _sdc_disk_status                                      4     4      0      34
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _sync                                                 2     2      0   14169
                                             64 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (7) _move_window                                         21    17      4   13831
                                             43 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (8) _disk_write                                          12     5      7    6078
                                             31 BANK0     12     5      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (9) _sdc_disk_write                                      19    12      7    4614
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (8) _disk_read                                           12     5      7    5647
                                             31 BANK0     12     5      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (9) _sdc_disk_read                                       24    17      7    4450
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (10) _response                                            1     1      0      34
                                             32 COMRAM     1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (10) _proceed                                             0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (10) _command                                             7     2      5    3403
                                              5 BANK0      7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (11) _wait_ready                                         15    15      0      99
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (11) _escreve_SPI                                         2     2      0      34
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) _dummy_clocks                                        5     5      0      68
                                             32 COMRAM     2     2      0
                                              0 BANK0      3     3      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (11) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _disk_ioctl                                           7     4      3     304
                                             32 COMRAM     2     2      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_fattime                                         51    47      4     201
                                              0 BANK0     51    47      4
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                  9     7      2    6035
                                             24 BANK0      9     7      2
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 8     2      6    3936
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     3      6    3163
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4    1132
                                             32 COMRAM     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4    1321
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    1709
                                              1 BANK0      2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                              0 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _isr                                                21    21      0    2930
                                             11 COMRAM    21    21      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (16) i2_write_timer_zero                                  4     2      2     131
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (16) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _GPSRead                                             2     2      0    2669
                                              9 COMRAM     2     2      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (17) _stringcpy                                           9     3      6    2207
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (17) _strcmp                                              6     2      4     395
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _escalonador
     _escrita_sdcard *
       _desliga_SPI
       _desliga_uart
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _f_close
         _f_sync
           _get_fattime
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _sync
             _disk_ioctl
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _validate
             _disk_status
               _sdc_disk_status
       _f_lseek
         ___lldiv
         _create_chain
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _put_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
         _get_cluster
           ___wmul
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
         _validate
           _disk_status
             _sdc_disk_status
       _f_mount
       _f_open
         _auto_mount
           ___lldiv
           ___lmul
           _check_fs
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memcmp
           _disk_initialize
             _sdc_disk_initialize
               _command
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _wait_ready
                   _leitura_SPI
               _dummy_clocks
                 _leitura_SPI
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_SPI
               _response
                 _leitura_SPI
               _sdc_reset
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _disk_status
             _sdc_disk_status
           _memset
         _get_fattime
         _memcpy
         _memset
         _move_window
           _disk_read
             _sdc_disk_read
               _command
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _wait_ready
                   _leitura_SPI
               _dummy_clocks
                 _leitura_SPI
               _proceed
                 _escreve_SPI
               _response
                 _leitura_SPI
           _disk_write
             _sdc_disk_write
               _command
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _wait_ready
                   _leitura_SPI
               _dummy_clocks
                 _leitura_SPI
               _escreve_SPI
               _leitura_SPI
               _proceed
                 _escreve_SPI
               _response
                 _leitura_SPI
         _remove_chain
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _put_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
         _reserve_direntry
           _clust2sect
             ___lmul
           _create_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _disk_write
             _sdc_disk_write
               _command
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _wait_ready
                   _leitura_SPI
               _dummy_clocks
                 _leitura_SPI
               _escreve_SPI
               _leitura_SPI
               _proceed
                 _escreve_SPI
               _response
                 _leitura_SPI
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _next_dir_entry
             _clust2sect
               ___lmul
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
         _trace_path
           _clust2sect
             ___lmul
           _make_dirfile
             _memset
           _memcmp
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _next_dir_entry
             _clust2sect
               ___lmul
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
       _fprintf
         ___lldiv
         ___llmod
         ___wmul
         _fputc
           _f_write
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memcpy
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _fputs
           _fputc
             _f_write
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcpy
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
       _inicializa_SPI
       _inicializa_uart
         _configura_baudrate_uart
           ___aldiv
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay
   _transf_dados_sd
     _monta_sd
       _strcat
       _strcpy
       _strlen

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     3F      E9       7       91.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     88      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     22      3E       1       66.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C7      20        0.0%
DATA                 0      0     3E7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 23 15:23:37 2022

               next_dir_entry@idx 00BE          __end_of_mensagem_inicial 4756  
             next_dir_entry@clust 00BC                       _SSPSTATbits 000FC7  
                ??_init_interrupt 0021                                l81 421C  
                              l90 513E                                l83 42AE  
                              l89 5130      __size_of_escreve_inteiro_lcd 0040  
                              _fs 01E9               ___wmul@multiplicand 0062  
                     _put_cluster 2A5E                  disk_write@sector 0081  
                    ?_escalonador 0001                    create_chain@fs 00BC  
                disk_write@result 0088                  ?_inicializa_uart 0001  
                             l231 4F82                               l232 4F74  
                             l240 5062                               l401 42CC  
                             l402 42EA                               l411 1FAE  
                             l324 52B8                               l420 200E  
                             l412 1FC4                               l421 2038  
                             l318 5328                               l406 434C  
                             l414 1FD0                               l270 35DA  
                             l271 35E6                               l248 49BE  
                             l520 44B8                               l601 4C5E  
                             l249 49B8                               l361 4DE2  
                             l265 3F2E                               l521 44C0  
                             l281 369C                               l602 4C34  
                             l362 4DBA                               l418 215E  
                             l434 214E                               l426 20C2  
                             l370 501A                               l530 44F8  
                             l522 44C2                               l282 36A8  
                             l274 360A                               l507 51F0  
                             l443 221C                               l419 2004  
                             l531 4500                               l523 44CA  
                             l275 3616                               l460 3934  
                             l380 4564                               l364 4DCA  
                             l540 48E8                               l444 2246  
                             l372 5026                               l532 4502  
                             l524 44CC                               l284 36CC  
                             l509 51FE                               l453 38FA  
                             l381 459E                               l365 4DDE  
                             l541 48F0                               l437 218E  
                             l373 5032                               l525 44E2  
                             l517 44AC                               l269 36FE  
                             l285 36F4                               l462 3968  
                             l454 38E6                               l470 2FEA  
                             l550 4928                               l542 48F2  
                             l438 21B8                               l526 44E4  
                             l518 44AE                               l286 36D2  
                             l278 366A                               l463 3950  
                             l471 2F36                               l551 4930  
                             l543 48FA                               l527 44EC  
                             l519 44B6                               l279 3678  
                             l480 3068                               l552 4932  
                             l544 48FC                               l560 47F8  
                             l448 2288                               l528 44EE  
                             l393 51A8                               l465 39A2  
                             l457 3920                               l377 45A2  
                             l473 2F8A                               l385 46B6  
                             l545 4912                               l561 4808  
                             l369 5036                               l529 44F6  
                             l570 4876                               l394 519C  
                             l378 4532                               l482 30B0  
                             l386 464E                               l546 4914  
                             l562 4818                               l571 4878  
                             l459 393C                               l475 2FBA  
                             l547 491C                               l539 48E6  
                             l563 4828                               l580 48B6  
                             l572 4880                               l396 51A0  
                             l388 4680                               l548 491E  
                             l556 4852                               l581 48B8  
                             l573 4882                               l397 51A4  
                             l389 46B2                               l549 4926  
                             l557 4830                               l901 41B2  
                             l582 48C0                               l574 488A  
                             l478 3034                               l558 47EC  
                             l902 41DC                               l583 48C2  
                             l575 488C                               l487 5284  
                             l559 484C                               l576 48A2  
                             l568 486C                               l920 31E8  
                             l912 316A                               l577 48A4  
                             l569 486E                               l921 31D0  
                             l913 314C                               l578 48AC  
                             l579 48AE                               l923 320C  
                             l915 3162                               l852 338C  
                             l860 4B82                               l924 323C  
                             l916 3172                               l908 3120  
                             l772 3C12                               l925 327A  
                             l933 34C2                               l854 3436  
                             l870 2E46                               l918 31A0  
                             l855 3418                               l864 2ED4  
                             l880 2AE6                               l928 405C  
                             l960 3750                               l849 3306  
                             l865 2D24                               l937 35AA  
                             l961 37A8                               l858 4B64  
                             l874 2E66                               l938 356C  
                             l867 2EEE                               l891 2CC4  
                             l883 2B20                               l892 2C32  
                             l893 2C66                               l885 2B54  
                             l965 3872                               l878 2CA8  
                             l894 2CA4                               l886 2BB0  
                             l879 2A86                               l888 2C08  
                             l992 3818                               l897 41E4  
                             l985 37E6                               l977 37D6  
                             l898 4172                               l899 4194  
                             l995 3830                               l987 37EE  
                             l988 37F6                               l997 3832  
                             l989 37FE                               _PCL 000FF9  
                             _PR2 000FCB                               _fil 012C  
                ??_init_oscilador 0021                               _isr 0008  
                    disk_read@res 008A                               prod 000FF3  
                  ??_create_chain 00B8                               tosl 000FFD  
                             wreg 000FE8         __size_of_write_timer_zero 0012  
                 create_chain@mcl 00BA                   create_chain@ncl 00C2  
                 create_chain@scl 00C0           ??_escreve_frase_ram_lcd 0023  
                            l1001 384E                              l1010 28AE  
                            l1003 3850                              l1012 28DA  
                            l1100 1C68                              l1013 2940  
                            l1030 230C                              l1022 29A8  
                            l1102 1CC6                              l1031 2334  
                            l1015 2934                              l1007 288C  
                            l1103 1CEE                              l1200 169C  
                            l1032 2348                              l1112 1E28  
                            l1033 2374                              l1025 29CE  
                            l1113 1E44                              l1042 2450  
                            l1026 29E2                              l1018 2986  
                            l1106 1DBC                              l1051 45F6  
                            l1035 23E0                              l1019 29B4  
                            l1107 1D8C                              l1204 17A2  
                            l1060 0EC8                              l1116 1E60  
                            l1053 4616                              l1061 0EEE  
                            l1045 24FE                              l1054 4644  
                            l1070 0FEE                              l1046 24BE  
                            l1150 0E08                              l1047 24EE  
                            l1039 242A                              l1151 0992  
                            l1064 0F1E                              l1152 0C8E  
                            l1240 4AE6                              l1400 3FF6  
                            l1073 1036                              l1065 0F1A  
                            l1057 0EA2                              l1153 0AC8  
                            l1074 1172                              l1066 0F4C  
                            l1058 0E9C                              l1162 0E76  
                            l1170 0D50                              l1154 0A4E  
                            l1250 4AB2                              l1083 4D68  
                            l1075 1264                              l1067 0F58  
                            l1171 0E64                              l1163 0C10  
                            l1243 4B22                              l1076 127A  
                            l1164 0BB8                              l1156 0A6E  
                            l1260 1BAC                              l1069 0FCC  
                            l1190 163E                              l1086 4CE4  
                            l1166 0DCE                              l1262 18FC  
                            l1079 4D56                              l1175 3D50  
                            l1191 162A                              l1343 4B98  
                            l1095 1BF8                              l1167 0C80  
                            l1271 19B4                              l1263 18B0  
                            l1255 183E                              l1176 3C98  
                            l1088 4CFC                              l1344 4BAC  
                            l1248 4ABA                              l1272 19C0  
                            l1193 1808                              l1089 4D1C  
                            l1097 1E1C                              l1249 4A82  
                            l1273 19CC                              l1098 1CBC  
                            l1290 1B46                              l1282 1A5C  
                            l1258 1886                              l1195 170E  
                            l1187 1420                              l1099 1C44  
                            l1283 1A74                              l1275 19F2  
                            l1267 1924                              l1700 4786  
                            l1196 1648                              l1292 1B52  
                            l1284 1AA8                              l1268 195C  
                            l1701 477A                              l1197 1688  
                            l1189 15DC                              l1269 19A4  
                            l1710 4960                              l1278 1A18  
                            l1711 4954                              l1391 3F58  
                            l1704 47BA                              l1288 1B24  
                            l1392 3F70                              l1705 47C8  
                            l1289 1B70                              l1714 4988  
                            l1394 3F9E                              l1715 4996  
                            l1395 3F92                              l1670 40C6  
                            l1398 3FD2                              l1399 3FE0  
                            l1672 4102                              l1920 4E62  
                            l1753 4BFE                              l1673 4144  
                            l1754 4BF6                              l1666 4EB0  
                            l1763 4EE6                              l1764 4EDE  
                            l1916 4E52                              l1940 4FE0  
                            l1757 4C1E                              l1917 4E4E  
                            l1933 509E                              l1758 4C28  
                            l1790 5104                              l1934 5094  
                            l1767 4EFE                              l1791 50F4  
                            l1919 4E6C                              l1768 4F08  
                            l1784 4DA0                              l1777 43DE  
                            l1785 4D7E                              l1778 4358  
                            l1779 43D6                              l1939 4FE6  
                            l9113 205A                              ?_isr 0001  
                            l9039 4D52                              l9143 20F2  
                            l9055 4D7E                              l9241 50F4  
                            l8461 2FAE                              l8701 3384  
                            l9249 4358                              l8493 305C  
                            l8591 51F6                              l8585 51E8  
                            l8931 430C             _escreve_caractere_lcd 4858  
                            l8965 314C                              STR_1 08BD  
                            STR_2 08B7                              l8969 3172  
                            STR_3 085D                              STR_4 0838  
                            STR_5 086C                              STR_6 08A4  
                            STR_7 089A                              STR_8 08AE  
                            STR_9 0823                    timer_dois@flag 0032  
                            _BRGH 007D62                   __end_of_GPSRead 27CC  
                            _T0IF 007F92                              _CREN 007D5C  
                    ?_escreve_SPI 0001                              _LATB 000F8A  
                            _PIE1 000F9D                              _RCIF 007CF5  
                            i2l71 3A7A                              i2l73 3A9A  
                            i2l74 3AAE                              i2l67 3A34  
                            i2l68 3AA6                              i2l69 3A4C  
                            u9910 5086                              u9930 49C8  
                            u9945 3894                              _TMR2 000FCC  
                            _SPEN 007D5F                              _TRMT 007D61  
                            _TXEN 007D65                              _SYNC 007D64  
                    trace_path@dj 00C0                      trace_path@fn 00C2  
                    trace_path@ds 00D4                      trace_path@fs 00D0  
                   ?_make_dirfile 0066                              _Term 0036  
                            _dado 0031                              _main 5118  
                            _fsid 00F0                              _itoa 4E8A  
                            _time 0029                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 003F                              _utoa 40BE  
                            _sync 4B2C                     disk_ioctl@cmd 0060  
                   disk_read@buff 007F                     disk_ioctl@res 0022  
                   disk_read@pdrv 0087                              prodh 000FF4  
                            prodl 000FF3                              start 000E  
       sdc_disk_initialize@buff_i 007B                      ___param_bank 000000  
       sdc_disk_initialize@count1 0077         sdc_disk_initialize@count2 007D  
                     _string_dado 0100                             ??_isr 000C  
         __size_of_escrita_sdcard 00DE  __size_of_configura_baudrate_uart 0130  
                           l10031 0FEA                             l10113 4AB2  
                           l10429 18EA                             l10621 35DE  
                           l10635 360E                             l10397 183E  
                           l10655 3670                             l10489 1A32  
                           l10747 4214                             l10669 36A0  
                 __end_of___aldiv 4008                             ?_main 0001  
                           ?_itoa 0070                             STR_10 08C3  
                           STR_11 0885                             STR_12 084D  
                           STR_13 0890                             STR_14 087A  
                           STR_15 08CC                             STR_16 08C8  
                    ?_leitura_SPI 0001                   __end_of___lldiv 47DA  
                           u10100 3082                             u10110 30BE  
                           ?_utoa 0067                             u10035 2F5C  
                           ?_sync 0001                             u10140 5204  
                           u10060 2FD4                             u11110 4386  
                           u10320 32C4                             u11040 21E2  
                           u10410 4C54                             u11130 43AE  
                           u10075 3006                             u10420 4C7E  
                           u12020 478A                             u11117 437C  
                           u10440 2CEE                             u11080 225E  
                           _T0CON 000FD5                             u10417 4C4A  
                           u11137 43A4                             u11305 0BFC  
                           u11410 4EEA                             u10370 33DC  
                           u11090 2296                             u12130 41CA  
                           u10427 4C74                             u10515 2E52  
                           u12140 41F2                             u11500 3544  
                           u13030 16AA                             u12150 420A  
                           u11510 3568                             u11350 0E10  
                           u10535 2AB6                             u12055 3B0C  
                           u10800 3268                             u10640 430C  
                           u13200 199A                             u10465 2D54  
                 __end_of___llmod 49A8                             u11265 0B16  
                           u12065 3B58                             u13050 1722  
                           u12330 23CC                             u11530 3782  
                           u13130 1884                             u12315 2394  
                           u11380 4C02                             u13060 1768  
                           u10900 1FF0                             u10485 2DC8  
                           u10565 2B80                             u12085 3B9A  
                           u13310 1B04                             u10911 1FFA  
                           u12095 3BE6                             u10840 4D52  
                           u10680 310A                             u12360 2426  
                           u13160 1908                             _T2CON 000FCA  
                           u13065 175E                             u10690 3116  
                           u10930 205A                             u13091 4FA0  
                           u10595 2C14                             u12195 28FA  
                           u12540 0FEA                             u12380 244C  
                           u12605 12FE                             u11485 34CE  
                           u11840 4612                             u13360 1B8C  
                           u13520 4526                             u10970 20F2  
                           u10890 1FE0                             u13371 1BBC  
                           u14307 443A                             u12580 1260  
                           u12820 1D88                             u13700 46F6  
                           u14317 4456                             u10990 20FE  
                           u12590 1276                             u12670 4964  
                           u11950 3FA2                             u14327 1F7A  
                           u12575 118A                             u13560 363A  
                           u11865 3D6E                             u14337 210E  
                           u11875 3D8A                             u14347 21C0  
                           u12860 1E40                             u11885 3DBA  
                           u14357 4F5E                             u12790 1CEA  
                           u11895 3DD4                             u14287 4740  
                           u14297 441E                             u13690 46DE  
                           u12955 1494                             u13678 426C  
                           u13679 4280                   __end_of___lwdiv 4C32  
                 __end_of___lwmod 4F12                             i2l142 27B6  
                           i2l150 2586                             i2l143 253C  
                           i2l160 2674                             i2l152 25DC  
                           i2l144 254A                             i2l137 4C8A  
                           i2l161 269E                             i2l145 255A  
                           i2l170 279E                             i2l154 25FC  
                           i2l163 26BA                             i2l155 2600  
                           i2l164 26C0                             i2l156 2628  
                           i2l165 26EA                             i2l157 2652  
                           i2l149 257C                             i2l166 2714  
                           i2l167 273E                             i2l159 266E  
                           i2l168 276A                             i2l169 2796  
                           i2l798 52DE                             _RCREG 000FAE  
                           _RCSTA 000FAB                             _TMR0H 000FD7  
                           _TMR0L 000FD6                             _SPBRG 000FAF  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                   __end_of_f_close 5170  
                           _TXREG 000FAD                     trace_path@dir 00C6  
                           _TXSTA 000FAC                             _FatFs 00F2  
                 __end_of_f_lseek 181A               ___lmul@multiplicand 0064  
      __size_of_config_timer_dois 000E                   __end_of_f_mount 4D20  
                 __end_of_f_write 0E8A        __size_of_config_timer_zero 001A  
                   get_cluster@bc 00AF                     get_cluster@fs 00B1  
                   get_cluster@wc 00A9                   __end_of_command 4A10  
                           _delay 51E4                   clust2sect@clust 006C  
                 __end_of_fprintf 1BBE                             _fputc 4AD2  
                           _fputs 4A76          __size_of_escreve_cmd_lcd 0094  
                  ??_make_dirfile 006A                    disk_ioctl@buff 0061  
                           pclath 000FFA                    disk_read@count 0085  
                           tablat 000FF5                    disk_ioctl@pdrv 0021  
                 __end_of_proceed 5324                             plusw1 000FE3  
                           plusw2 000FDB                             utoa@c 006F  
                           utoa@v 006D                             status 000FD8  
                           wtemp6 0040                     disk_write@res 008A  
                 __initialization 4A10               disk_initialize@pdrv 0080  
             disk_initialize@stat 0081                      __end_of_main 5144  
                    clust2sect@fs 0021                      __end_of_itoa 4ECE  
                    __end_of_utoa 4168                      __end_of_sync 4B86  
              _inicializa_tarefas 50BA                   escalonador@cont 01DA  
             reserve_direntry@dir 00C6                 create_chain@clust 00B6  
                     auto_mount@p 00B1                 create_chain@cstat 00BE  
                   sdc_reset@buff 0072                            ??_main 0023  
                          ??_itoa 0022                            ??_utoa 0022  
                          ??_sync 0023                     __activetblptr 000002  
             ?_inicializa_tarefas 0001              __end_of_desliga_uart 530C  
                       ??_GPSRead 000A                    _next_dir_entry 343A  
            __size_of_desliga_SPI 000C                 get_fattime@f_time 008A  
                ??_sdc_disk_write 0073                            ?_delay 0001  
          ?_escreve_caractere_lcd 0001                            _ADCON1 000FC1  
                          ?_fputc 019C                  ___llmod@dividend 0060  
                          ?_fputs 01A0                auto_mount@bootsect 00A9  
                          _INT0IE 007F94                            _INT0IF 007F91  
                   ?_dummy_clocks 0001                            _PCLATH 000FFA  
                          i2l1925 4E06                            i2l1926 4DFE  
                          _INTCON 000FF2           __size_of_inicializa_SPI 0020  
                          _TMR0IF 007F92                            _TMR2IF 007CF1  
              auto_mount@maxclust 00A5          __end_of_recebe_dado_uart 52E2  
                          _SPPCFG 000F63                            _SPPCON 000F65  
                          _SSPBUF 000FC9          __size_of_sdc_disk_status 0014  
                __end_of_check_fs 4648              ??_inicializa_tarefas 0021  
                  trace_path@dptr 00D5                    trace_path@path 00C4  
          reserve_direntry@sector 00CA          __size_of_disk_initialize 003C  
      __end_of_posicao_cursor_lcd 4858                    auto_mount@path 0093  
                    ?_move_window 008B              __end_of_create_chain 3284  
          __size_of_init_hardware 0016                    auto_mount@stat 00B4  
            __size_of_get_fattime 0108                      put_cluster@p 00B2  
            __size_of_get_cluster 0222                            ___lmul 4B86  
                       ??___aldiv 0021              __size_of_disk_status 0048  
                          ___wmul 5170                         ??___lldiv 0021  
                          _f_open 1BBE                         ??___llmod 0021  
                       ??___lwdiv 0021                            _f_sync 3C2A  
                       ??___lwmod 0021                            _buffer 00F4  
                          _estado 0033                            _memcmp 4356  
                          _memcpy 4D6C                  __end_of_init_lcd 4498  
                          _memset 50EA                         ??_f_close 0023  
                          clear_0 4A38                            clear_1 4A4A  
                          clear_2 4A56                            clear_3 4A62  
                       ??_f_lseek 00CA                         ??_f_mount 0023  
        configura_baudrate_uart@x 0021                         ??_f_write 00CC  
                          _strcat 4E44                            _strcmp 4DFC  
             _sdc_disk_initialize 1F54                         ??_command 0023  
                     GPSRead@buff 000A                            _strcpy 508A  
                          _strlen 4FD6                  put_cluster@clust 00A0  
                          fputc@c 00E5                get_cluster@fatsect 00AB  
                __end_of_monta_sd 3720                            itoa@cp 0076  
        __end_of_reserve_direntry 2534                  __end_of_validate 4D6C  
          __end_of_next_dir_entry 35C2                         ??_fprintf 01B3  
                          fputs@n 01A5              __size_of_escalonador 00A4  
                __end_of_response 5318                      __mediumconst 0000  
           write_timer_zero@timer 0060                   disk_read@sector 0081  
                 disk_read@result 0088                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ??_proceed 0023                  _write_timer_zero 529A  
                          sync@fs 00A0         escreve_caractere_lcd@data 0060  
                  ??_dummy_clocks 0021                   _transf_dados_sd 4F12  
             _escreve_inteiro_lcd 4F96                   sdc_disk_write@i 0077  
                 sdc_disk_write@j 007C                        __accesstop 0060  
         __end_of__initialization 4A68              ?_sdc_disk_initialize 0001  
                  disk_write@buff 007F                    disk_write@pdrv 0087  
            __size_of_escreve_SPI 0012                     ___rparam_used 000001  
               ??_escreve_cmd_lcd 0023                    __pcstackCOMRAM 0001  
     __end_of_endereco_cursor_lcd 4940                      __pidataBANK1 52E2  
               ?_mensagem_inicial 0001           _configura_baudrate_uart 3AFA  
                   __end_of_delay 5208                    _escrita_sdcard 3E5C  
                   __end_of_fputc 4B2C                     __end_of_fputs 4AD2  
            ?_escreve_inteiro_lcd 0078                ??_mensagem_inicial 0064  
            __end_of_make_dirfile 3876                      ?_put_cluster 00A0  
               reserve_direntry@c 00D1                 reserve_direntry@n 00CE  
              _tarefa_em_execucao 0039        __end_ofi2_write_timer_zero 52D0  
                 ?_next_dir_entry 00B3            __size_of_sdc_disk_read 0146  
 configura_baudrate_uart@baudrate 006E              reserve_direntry@dptr 00CF  
            __size_of_leitura_SPI 000C                     _init_hardware 525E  
                    auto_mount@fs 00B9                __size_of_disk_read 0090  
                         ??_delay 0021                    sdc_reset@count 0070  
                         ??_fputc 0023                           ??_fputs 01A4  
    mensagem_inicial@msg_linha_um 0066                        __pbssBANK0 00E8  
                      __pbssBANK1 0100    __size_of_escreve_frase_ram_lcd 0054  
   __end_of_escreve_frase_ram_lcd 4C86             ??_sdc_disk_initialize 0073  
       escreve_inteiro_uart@F3958 01DB            __end_of_escrita_sdcard 3F3A  
              __size_of_sdc_reset 00A4                           ?___lmul 0060  
               ??_sdc_disk_status 0021                     make_dirfile@a 0070  
                   make_dirfile@b 006E                     make_dirfile@c 0072  
                   make_dirfile@n 0071                     make_dirfile@t 006F  
                         ?___wmul 0060             mensagem_inicial@F4121 0801  
           mensagem_inicial@F4119 0812             ??_escreve_inteiro_lcd 0023  
                         ?_f_open 00D7                           ?_f_sync 00A2  
               ??_disk_initialize 0023             __size_of_desliga_uart 000E  
                         ?_memcmp 0060                           ?_memcpy 0060  
                         ?_memset 0060                    ___lmul@product 0068  
                         ?_strcat 0060                           ?_strcmp 0001  
                         ?_strcpy 0060                           ?_strlen 0021  
                         i2l10943 3A44                           _INTCON2 000FF1  
                         _INTCON3 000FF0           __end_of_transf_dados_sd 4F54  
                  ?_init_hardware 0001                         ?_check_fs 008B  
                      _disk_ioctl 5198                           _GPSRead 2534  
                      _disk_write 4648                    remove_chain@fs 00BC  
                         _SSPCON1 000FC6          __size_of_inicializa_uart 0024  
                         _SSPSTAT 000FC7                        _clust2sect 4008  
                  _inicializa_SPI 5208                   trace_path@clust 00D2  
                   ?_remove_chain 00B6             __size_of_create_chain 01C0  
                       ?_init_lcd 0001                __size_of_stringcpy 004E  
                   _sdc_disk_read 3876                      _desliga_uart 52FE  
                      _auto_mount 0E8A                           __Hparam 0000  
       ??_configura_baudrate_uart 0072                           __Lparam 0000  
                       ?_monta_sd 0064                         ?_validate 0065  
                 ?_escrita_sdcard 0001                 __end_of_disk_read 45BC  
                   put_cluster@bc 00B0                         ?_response 0001  
                   put_cluster@fs 00B4                           ___aldiv 3F3A  
                      f_close@res 00AD                   __size_of___lmul 0058  
                         ___lldiv 4756                   __size_of___wmul 0028  
                         ___llmod 4940              __size_of_move_window 01B6  
                      check_fs@fs 0091                           ___lwdiv 4BDE  
                         ___lwmod 4ECE                   __size_of_f_open 0396  
                    __psmallconst 0800                   __size_of_f_sync 012A  
            __end_of_dummy_clocks 4F96                           _f_close 5144  
                         __pcinit 4A10                   __size_of_memcmp 00A4  
                 __size_of_memcpy 0048                   __size_of_memset 002E  
                         _f_lseek 1390                        _init_ports 5228  
                         __ramtop 0800                           _f_mount 4CD4  
                         __ptext0 5118                           __ptext1 4F12  
                         __ptext2 35C2                           __ptext3 4FD6  
                         __ptext4 508A                           __ptext5 4E44  
                         __ptext6 46D0                           __ptext7 43FA  
                         __ptext8 4498                           __ptext9 525E  
                         _f_write 08D0                           _command 49A8  
                       _T0CONbits 000FD5               auto_mount@totalsect 00AD  
                 __size_of_strcat 0046                   __size_of_strcmp 0048  
                 __size_of_strcpy 0030                   __size_of_strlen 003E  
              escrita_sdcard@flag 0034           i2write_timer_zero@timer 0003  
     endereco_cursor_lcd@endereco 0060                           _fprintf 181A  
                         _rawDate 0183                      __size_of_isr 3AF2  
         ??_escreve_caractere_lcd 0023                        ??_check_fs 008F  
                         _rawTime 0171                  ___aldiv@dividend 0060  
                    stringcpy@chr 0009                      stringcpy@dir 0005  
                    _create_chain 30C4                           _proceed 5318  
         __size_of_init_interrupt 0012                 __end_of_sdc_reset 4356  
          __end_of_inicializa_SPI 5228                        f_lseek@ofs 00C6  
                  __pintcode_body 39BC                        f_lseek@res 00D6  
            end_of_initialization 4A68                        f_open@mode 00DB  
                      f_open@path 00D9                    ??_remove_chain 00B8  
                         isr@cont 0020                           memcmp@n 0064  
                         memcpy@d 0067                           memcpy@n 0064  
                         memcpy@s 0069           __size_of_init_oscilador 0008  
                         fputc@bw 00E6                           itoa@buf 0070  
                         memset@c 0062                           itoa@val 0072  
                         memset@n 0064                           memset@p 0021  
            sdc_disk_initialize@i 0074                     __Lmediumconst 0000  
                      ??_init_lcd 0061                           int_func 39BC  
               ?_recebe_dado_uart 0001                   disk_status@pdrv 0063  
                 disk_status@stat 0064                    ?_sdc_disk_read 006C  
                       i2u1390_40 3A24                         i2u1391_48 3A26  
                       i2u1396_40 3A7E            write_timer_zero@timer0 0021  
                 ___lldiv@divisor 0064                     _rawSatellites 003C  
                      f_mount@drv 0060                ??_recebe_dado_uart 0001  
                sdc_disk_read@ptr 0077                   ___lldiv@counter 006C  
                      ??_monta_sd 0023                        ??_validate 0069  
           __size_of_make_dirfile 0156                        ??_response 0021  
                       _RCSTAbits 000FAB          __end_of_write_timer_zero 52AC  
                ___aldiv@quotient 006A                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                         utoa@buf 0067                           utoa@val 0069  
                      _wait_ready 5050                           strcmp@r 0006  
                         strlen@s 0021                         _PORTBbits 000F81  
                       _PORTDbits 000F83                   ??_init_hardware 0023  
                      _trace_path 27CC                _posicao_cursor_lcd 47DA  
               __end_of_stringcpy 4CD4                     ??_desliga_SPI 0021  
            __size_of_put_cluster 027A   __end_of_configura_baudrate_uart 3C2A  
                     ?_disk_ioctl 0060                 ?_reserve_direntry 00C4  
                ?_transf_dados_sd 0001                        f_write@btw 00C8  
                      f_write@res 00D8                         _TRISBbits 000F93  
                     ?_disk_write 007F                         _TRISCbits 000F94  
                       _TRISDbits 000F95                  next_dir_entry@dj 00B3  
                 _escreve_cmd_lcd 4498                ??_reserve_direntry 00C8  
             ?_posicao_cursor_lcd 0061                   ?_inicializa_SPI 0001  
                 disk_write@count 0085                       ?_clust2sect 006C  
                _put_cluster$1827 00A8                  _put_cluster$1828 00AA  
                      command@CMD 006A                        command@CRC 0069  
                      command@arg 0065                      _make_dirfile 3720  
                   ??_get_fattime 0064                 ??_inicializa_uart 0023  
     __size_of_inicializa_tarefas 0030                     ??_get_cluster 00A2  
                   ??_disk_status 0060                       ?_auto_mount 0093  
               _make_dirfile$1937 006C                   command@argument 006B  
            ??_posicao_cursor_lcd 0023                    __end_of___lmul 4BDE  
                ??_next_dir_entry 00B5                    __end_of___wmul 5198  
                  __end_of_f_open 1F54                     ??_escalonador 01D8  
                     ?_init_ports 0001                    __end_of_f_sync 3D54  
                  __end_of_memcmp 43FA                    __end_of_memcpy 4DB4  
                  __end_of_memset 5118                    __end_of_strcat 4E8A  
                  __end_of_strcmp 4E44                    __end_of_strcpy 50BA  
                  __end_of_strlen 5014               start_initialization 4A10  
                     __end_of_isr 3AFA         __size_of_mensagem_inicial 0086  
              reserve_direntry@dj 00C4                reserve_direntry@fs 00D4  
             __end_of_desliga_SPI 533C                     ??_escreve_SPI 0021  
                 _sdc_disk_status 5274                   ??_sdc_disk_read 0073  
               auto_mount@fatsize 00B5                i2_write_timer_zero 52BE  
                 ___llmod@divisor 0064                   _disk_initialize 5014  
                 ___llmod@counter 0021             reserve_direntry@clust 00D2  
         __size_of_sdc_disk_write 01CA                  _data_uart_recebe 003B  
               wait_ready@timeout 0060             __size_of_dummy_clocks 0042  
                   auto_mount@fmt 00B3               __size_of_disk_ioctl 0028  
             ?i2_write_timer_zero 0001               __size_of_disk_write 0088  
                        ??___lmul 0021                        fprintf@fil 01A7  
                      fprintf@arp 01D1                          ??___wmul 0021  
                      fprintf@res 01C5                        fprintf@val 01CD  
                      fprintf@str 01A9               __end_of_get_fattime 3E5C  
                        ??_f_open 00DC                          ??_f_sync 0023  
                     ?_wait_ready 0001                       __pdataBANK1 01DB  
             __end_of_get_cluster 2EFA                          ??_memcmp 0066  
             __end_of_disk_status 4DFC                          ??_memcpy 0021  
             __size_of_clust2sect 00B6                          ??_memset 0021  
          sdc_disk_read@start_add 0078              __end_of_remove_chain 420E  
         sdc_disk_initialize@buff 007F                     ??_leitura_SPI 0021  
         __end_of_escreve_cmd_lcd 452C                          ??_strcat 0021  
                        ??_strcmp 0005                          ??_strcpy 0021  
                        ??_strlen 0060           sdc_disk_initialize@stat 0076  
                     ?_trace_path 00C0      __size_of_endereco_cursor_lcd 0070  
                    _fprintf$2426 01C7                       __pbssBIGRAM 01E9  
                   monta_sd@index 0066                       __pbssCOMRAM 0023  
                 _trace_path$1984 00CC                   _trace_path$1986 00CE  
                        ?_GPSRead 0001                     __pcstackBANK0 0060  
                   __pcstackBANK1 019C                    _init_interrupt 5288  
             __size_of_auto_mount 0506              ??i2_write_timer_zero 0003  
             __end_of_escalonador 42B2       __end_of_sdc_disk_initialize 229A  
               __size_of_check_fs 008C                      check_fs@sect 008B  
                     _char_number 0038                        sdc_reset@i 006C  
                    _dummy_clocks 4F54                    _init_oscilador 533C  
                        GPSRead@c 000B                  ??_escrita_sdcard 0023  
             __size_of_init_ports 001C             _escreve_frase_ram_lcd 4C32  
                       _data_buff 0027                         _data_hoje 0035  
     __end_of_escreve_inteiro_lcd 4FD6               __end_of_escreve_SPI 52BE  
               __size_of_init_lcd 009E                  ___lwdiv@dividend 0060  
               delay@contador_int 0022                 delay@contador_ext 0021  
                       __pintcode 0008                          ?___aldiv 0060  
               __size_of_monta_sd 015E                          ?___lldiv 0060  
                        ?___llmod 0060                 __size_of_validate 004C  
                        ?___lwdiv 0060                          ?___lwmod 0060  
               __size_of_response 000C                          ?_f_close 00AB  
                       _disk_read 452C                _sinaliza_int_timer 003A  
                        ?_f_lseek 00C4                          ?_f_mount 0021  
                        ?_f_write 00C4                          ?_command 0065  
                     __smallconst 0800            __end_of_init_interrupt 529A  
                        ?_fprintf 01A7                       _desliga_SPI 5330  
             sdc_disk_read@p_buff 006C               sdc_disk_read@length 007C  
             sdc_disk_read@sector 006E           __end_of_sdc_disk_status 5288  
  __size_of_escreve_caractere_lcd 0078     __end_of_escreve_caractere_lcd 48D0  
                        ?_proceed 0001                         f_close@fp 00AB  
             __end_of_leitura_SPI 5330                  ___lwdiv@quotient 0065  
                  __size_of_delay 0024           __end_of_disk_initialize 5050  
          __end_of_init_oscilador 5344                    __size_of_fputc 005A  
                  __size_of_fputs 005C               make_dirfile@dirname 0068  
                      validate@id 0067                        validate@fs 0065  
                       _p_tarefas 00EC                         _rawCourse 018A  
                make_dirfile@path 0066                          _GPGGA_ok 002B  
                       _sdc_reset 42B2               __size_of_wait_ready 003A  
                 ___aldiv@divisor 0064                   ___aldiv@counter 0068  
                  ___wmul@product 0021                          _LATBbits 000F8A  
                       f_lseek@fp 00C4                          _LATCbits 000F8B  
                        _GPRMC_ok 002D                         f_open@dir 01AF  
                       f_open@res 01AE                          _PIE1bits 000F9D  
                     _get_fattime 3D54                      _rawLongitude 0157  
             __size_of_trace_path 0292                       _get_cluster 2CD8  
                     _disk_status 4DB4                     ??_move_window 008F  
                       f_mount@fs 0021                          _PIR1bits 000F9E  
                        i2u878_40 4E38                     move_window@fs 009E  
               ?_write_timer_zero 0021                   remove_chain@nxt 00BA  
                       f_sync@dir 00A9                         f_sync@res 00A8  
                       f_sync@tim 00A4          posicao_cursor_lcd@coluna 0061  
                      ?_disk_read 007F                ??_write_timer_zero 0023  
                       f_write@cc 00DF        posicao_cursor_lcd@endereco 0063  
                       f_write@bw 00CA                         f_write@fp 00C4  
       __size_of_recebe_dado_uart 0012                       _escalonador 420E  
               ___wmul@multiplier 0060                  ?_escreve_cmd_lcd 0001  
     escreve_frase_ram_lcd@buffer 0061                  ??_inicializa_SPI 0021  
                 ?_init_interrupt 0001                      ??_disk_ioctl 0021  
                    ??_disk_write 0086                      f_lseek@clust 00DF  
                 _inicializa_uart 51C0                      f_lseek@csize 00DB  
                    f_lseek@ifptr 00D7                         _stringcpy 4C86  
                __size_of_GPSRead 0298                  _mensagem_inicial 46D0  
                 ?_init_oscilador 0001                      ??_clust2sect 0070  
               ___lmul@multiplier 0060                         copy_data0 4A24  
                     _escreve_SPI 52AC                        ?_sdc_reset 0001  
             sdc_reset@count_nosd 006E          ?_configura_baudrate_uart 006E  
          ?_escreve_frase_ram_lcd 0061                  auto_mount@chk_wp 0095  
               move_window@sector 008B                    _sdc_disk_write 2EFA  
       __size_of_reserve_direntry 029A          escreve_inteiro_lcd@F3966 01E2  
                    ??_auto_mount 0096                          __Hrparam 0000  
                       memcpy@tmp 0066                          __Lrparam 0000  
                       fprintf@cc 01D3                __end_of_disk_ioctl 51C0  
           __size_of_remove_chain 00A6                    put_cluster@val 00A2  
                get_cluster@clust 00A0                __end_of_disk_write 46D0  
                    _SentenceType 0037                  __size_of___aldiv 00CE  
          sdc_disk_initialize@ocr 007C                      monta_sd@dado 0064  
                __size_of___lldiv 0084                  __size_of___llmod 0068  
                   ??_put_cluster 00A4                  __size_of___lwdiv 0054  
                    monta_sd@size 0067                  __size_of___lwmod 0044  
                    ??_init_ports 0021               __end_of_move_window 343A  
              __end_of_clust2sect 40BE          escreve_inteiro_lcd@valor 0078  
                __size_of_f_close 002C          escreve_inteiro_lcd@texto 007A  
                __size_of_f_lseek 048A                  __size_of_f_mount 004C  
                     _leitura_SPI 5324                  __size_of_f_write 05BA  
               disk_status@result 0061                  __size_of_command 0068  
           __end_of_init_hardware 5274                          _check_fs 45BC  
                      strcat@from 0062                  __size_of_fprintf 03A4  
                 ___lwdiv@divisor 0062                  ?_sdc_disk_status 0001  
                      ?_stringcpy 0001                   ___lwdiv@counter 0064  
              __end_of_auto_mount 1390                          __ptext10 5228  
                        __ptext11 533C                          __ptext20 3AFA  
                        __ptext12 5288                          __ptext21 3F3A  
                        __ptext13 5244                          __ptext30 3720  
                        __ptext22 5208                          __ptext14 529A  
                        __ptext31 229A                          __ptext23 181A  
                        __ptext15 52F0                          __ptext40 42B2  
                        __ptext32 343A                          __ptext24 4A76  
                        __ptext16 50BA                          __ptext41 47DA  
                        __ptext33 4008                          __ptext25 4AD2  
                        __ptext17 420E                          __ptext50 2CD8  
                        __ptext42 48D0                          __ptext34 4168  
                        __ptext26 08D0                          __ptext18 3E5C  
                        __ptext51 5170                          __ptext43 45BC  
                        __ptext35 4D6C                          __ptext27 4940  
                        __ptext19 51C0                          __ptext60 4648  
                        __ptext52 4756                          __ptext44 4356  
                        __ptext36 0E8A                          __ptext28 1BBE  
                        __ptext61 2EFA                          __ptext53 5144  
                        __ptext45 4B86                          __ptext37 50EA  
                        __ptext29 27CC                          __ptext70 5324  
                        __ptext62 452C                          __ptext54 3C2A  
                        __ptext46 4CD4                          __ptext38 5014  
                        __ptext71 5198                          __ptext63 3876  
                        __ptext55 4D20                          __ptext47 1390  
                        __ptext39 1F54                          __ptext80 51E4  
                        __ptext72 3D54                          __ptext64 530C  
                        __ptext56 4DB4                          __ptext48 30C4  
                        __ptext81 52FE                          __ptext73 4F96  
                        __ptext65 5318                          __ptext57 5274  
                        __ptext49 2A5E                          __ptext82 5330  
                        __ptext74 4E8A                          __ptext66 49A8  
                        __ptext58 4B2C                          __ptext75 40BE  
                        __ptext67 5050                          __ptext59 3284  
                        __ptext84 52BE                          __ptext76 4ECE  
                        __ptext68 52AC                          __ptext85 52D0  
                        __ptext77 4BDE                          __ptext69 4F54  
                        __ptext86 2534                          __ptext78 4C32  
                        __ptext87 4C86                          __ptext79 4858  
                        __ptext88 4DFC                          __ptext89 0000  
                __size_of_proceed 000C                          _filename 0148  
                     _rawAltitude 017C                  ?_disk_initialize 0001  
                  _timeout_tarefa 002F                sdc_disk_read@count 0072  
                      strcpy@from 0062        __end_of_inicializa_tarefas 50EA  
        i2write_timer_zero@timer0 0001          __size_of_transf_dados_sd 0042  
          __end_of_sdc_disk_write 30C4                         monta_sd@i 0068  
                     _rawLatitude 0164                          _init_lcd 43FA  
                   __size_of_main 002C                      _remove_chain 4168  
                   __size_of_itoa 0044                     __size_of_utoa 00AA  
                   __size_of_sync 005A               _endereco_cursor_lcd 48D0  
              __end_of_init_ports 5244                          _rawSpeed 0190  
                   dummy_clocks@i 0061                          f_open@dj 01B1  
                   dummy_clocks@n 0060                          f_open@fn 019C  
                        f_open@fp 00D7                          f_open@dw 01AA  
                        f_open@rs 01A8                          _monta_sd 35C2  
                        _validate 4D20                          _sentence 0196  
                    move_window@n 0099                     stringcpy@str1 0001  
                   stringcpy@str2 0003                          _response 530C  
                        f_sync@fp 00A2       __size_of_posicao_cursor_lcd 007E  
                        int$flags 003F           posicao_cursor_lcd@linha 0062  
                    ??_wait_ready 0021                       ??_disk_read 0086  
         __end_of_inicializa_uart 51E4                      ??_trace_path 00C8  
            ?_endereco_cursor_lcd 0001                put_cluster@fatsect 00AC  
                      _INTCONbits 000FF2                          memcmp@s1 0060  
                        memcmp@s2 0062                  move_window@wsect 009A  
                        memcpy@d1 0060                          memcpy@s1 0062  
             __end_of_put_cluster 2CD8                          fprintf@c 01D7  
                        fprintf@f 01CB                          fprintf@i 01D5  
                        fprintf@r 01CC                          fprintf@s 01B5  
                        fprintf@w 01C9                          fputc@chr 019C  
                        itoa@base 0074                          fputc@fil 019E  
                        memset@p1 0060                 _config_timer_dois 52F0  
                    _tempo_backup 00E8                          fputs@fil 01A2  
                        fputs@str 01A0                 _config_timer_zero 5244  
                   wait_ready@res 0064                          intlevel2 0000  
              ?_config_timer_dois 0001          mensagem_inicial@msg_dois 0077  
                     ??_sdc_reset 0023                ?_config_timer_zero 0001  
                    _tempo_tarefa 0023                   ?_sdc_disk_write 006C  
                ___lwmod@dividend 0060                __end_of_wait_ready 508A  
                ___lldiv@dividend 0060                 sdc_disk_read@buff 007E  
           __end_of_sdc_disk_read 39BC               sdc_disk_status@pdrv 0022  
             sdc_disk_status@stat 0021                     ?_desliga_uart 0001  
             ??_config_timer_dois 0021                        _OSCCONbits 000FD3  
              __end_of_trace_path 2A5E               ??_config_timer_zero 0023  
                     _move_window 3284              sdc_disk_write@count1 0079  
            sdc_disk_write@p_buff 006C                  _recebe_dado_uart 52D0  
                        utoa@base 006B              sdc_disk_write@sector 006E  
           ??_endereco_cursor_lcd 0023                      response@buff 0021  
                        strcat@cp 0021                          strcat@to 0060  
                        strcmp@s1 0001                          strcmp@s2 0003  
                    ?_desliga_SPI 0001                  ___lldiv@quotient 0068  
                 ___lwmod@divisor 0062                          strcpy@cp 0021  
                        strlen@cp 0062                          strcpy@to 0060  
                 ___lwmod@counter 0021                 remove_chain@clust 00B6  
       __end_of_config_timer_dois 52FE                      ___aldiv@sign 0069  
                   ?_create_chain 00B6         __end_of_config_timer_zero 525E  
                     ??_stringcpy 0007       __size_ofi2_write_timer_zero 0012  
                     _SSPCON1bits 000FC6           __size_of_next_dir_entry 0188  
          escreve_cmd_lcd@comando 0060                escreve_SPI@TempVar 0021  
             sdc_disk_write@count 0072     sdc_disk_initialize@crc_number 0079  
              sdc_disk_write@buff 007E      __size_of_sdc_disk_initialize 0346  
                    f_write@clust 00E1                    ??_desliga_uart 0021  
                    f_write@wbuff 00D9                      ?_get_fattime 0060  
                _reserve_direntry 229A                       f_write@buff 00C6  
               sdc_disk_write@res 007B                      ?_get_cluster 00A0  
                     f_write@sect 00DB                       f_write@wcnt 00E3  
                    ?_disk_status 0001     __end_ofmensagem_inicial@F4121 0812  
   __end_ofmensagem_inicial@F4119 0823                   escreve_SPI@dado 0022  
               ??_transf_dados_sd 0023  
