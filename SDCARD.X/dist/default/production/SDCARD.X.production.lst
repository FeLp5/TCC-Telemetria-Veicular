

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 20 14:57:04 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   110                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.45
   122                           ; Generated 16/11/2017 GMT
   123                           ; 
   124                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F4550 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataCOMRAM
   157  0058B2                     __pidataCOMRAM:
   158                           	opt stack 0
   159                           
   160                           ;initializer for leitura_sdcard@size
   161  0058B2  58                 	db	88
   162                           
   163                           	psect	idataBANK2
   164  0049B0                     __pidataBANK2:
   165                           	opt stack 0
   166                           
   167                           ;initializer for verifica_fence_externo@F4375
   168  0049B0  2D                 	db	45
   169  0049B1  30                 	db	48
   170  0049B2  34                 	db	52
   171  0049B3  36                 	db	54
   172  0049B4  32                 	db	50
   173  0049B5  39                 	db	57
   174  0049B6  2E                 	db	46
   175  0049B7  37                 	db	55
   176  0049B8  33                 	db	51
   177  0049B9  34                 	db	52
   178  0049BA  37                 	db	55
   179  0049BB  37                 	db	55
   180  0049BC  2D                 	db	45
   181  0049BD  30                 	db	48
   182  0049BE  34                 	db	52
   183  0049BF  36                 	db	54
   184  0049C0  32                 	db	50
   185  0049C1  39                 	db	57
   186  0049C2  2E                 	db	46
   187  0049C3  36                 	db	54
   188  0049C4  38                 	db	56
   189  0049C5  36                 	db	54
   190  0049C6  30                 	db	48
   191  0049C7  31                 	db	49
   192  0049C8  2D                 	db	45
   193  0049C9  30                 	db	48
   194  0049CA  34                 	db	52
   195  0049CB  36                 	db	54
   196  0049CC  32                 	db	50
   197  0049CD  39                 	db	57
   198  0049CE  2E                 	db	46
   199  0049CF  36                 	db	54
   200  0049D0  38                 	db	56
   201  0049D1  36                 	db	54
   202  0049D2  30                 	db	48
   203  0049D3  31                 	db	49
   204  0049D4  2D                 	db	45
   205  0049D5  30                 	db	48
   206  0049D6  34                 	db	52
   207  0049D7  36                 	db	54
   208  0049D8  32                 	db	50
   209  0049D9  39                 	db	57
   210  0049DA  2E                 	db	46
   211  0049DB  37                 	db	55
   212  0049DC  33                 	db	51
   213  0049DD  34                 	db	52
   214  0049DE  37                 	db	55
   215  0049DF  37                 	db	55
   216                           
   217                           ;initializer for verifica_fence_externo@F4372
   218  0049E0  2D                 	db	45
   219  0049E1  32                 	db	50
   220  0049E2  33                 	db	51
   221  0049E3  34                 	db	52
   222  0049E4  32                 	db	50
   223  0049E5  2E                 	db	46
   224  0049E6  30                 	db	48
   225  0049E7  37                 	db	55
   226  0049E8  31                 	db	49
   227  0049E9  31                 	db	49
   228  0049EA  32                 	db	50
   229  0049EB  2D                 	db	45
   230  0049EC  32                 	db	50
   231  0049ED  33                 	db	51
   232  0049EE  34                 	db	52
   233  0049EF  32                 	db	50
   234  0049F0  2E                 	db	46
   235  0049F1  30                 	db	48
   236  0049F2  37                 	db	55
   237  0049F3  31                 	db	49
   238  0049F4  31                 	db	49
   239  0049F5  32                 	db	50
   240  0049F6  2D                 	db	45
   241  0049F7  32                 	db	50
   242  0049F8  33                 	db	51
   243  0049F9  34                 	db	52
   244  0049FA  32                 	db	50
   245  0049FB  2E                 	db	46
   246  0049FC  31                 	db	49
   247  0049FD  31                 	db	49
   248  0049FE  37                 	db	55
   249  0049FF  38                 	db	56
   250  004A00  34                 	db	52
   251  004A01  2D                 	db	45
   252  004A02  32                 	db	50
   253  004A03  33                 	db	51
   254  004A04  34                 	db	52
   255  004A05  32                 	db	50
   256  004A06  2E                 	db	46
   257  004A07  31                 	db	49
   258  004A08  31                 	db	49
   259  004A09  37                 	db	55
   260  004A0A  38                 	db	56
   261  004A0B  34                 	db	52
   262                           
   263                           ;initializer for verifica_fence_externo@F4388
   264  004A0C  2D                 	db	45
   265  004A0D  30                 	db	48
   266  004A0E  34                 	db	52
   267  004A0F  36                 	db	54
   268  004A10  32                 	db	50
   269  004A11  39                 	db	57
   270  004A12  2E                 	db	46
   271  004A13  37                 	db	55
   272  004A14  33                 	db	51
   273  004A15  34                 	db	52
   274  004A16  37                 	db	55
   275  004A17  37                 	db	55
   276                           
   277                           ;initializer for verifica_fence_externo@F4386
   278  004A18  2D                 	db	45
   279  004A19  32                 	db	50
   280  004A1A  33                 	db	51
   281  004A1B  34                 	db	52
   282  004A1C  32                 	db	50
   283  004A1D  2E                 	db	46
   284  004A1E  30                 	db	48
   285  004A1F  37                 	db	55
   286  004A20  31                 	db	49
   287  004A21  31                 	db	49
   288  004A22  32                 	db	50
   289                           
   290                           ;initializer for escreve_inteiro_uart@F3958
   291  004A23  30                 	db	48
   292  004A24  30                 	db	48
   293  004A25  30                 	db	48
   294  004A26  30                 	db	48
   295  004A27  30                 	db	48
   296  004A28  30                 	db	48
   297  004A29  00                 	db	0
   298                           
   299                           ;initializer for escreve_inteiro_lcd@F3966
   300  004A2A  30                 	db	48
   301  004A2B  30                 	db	48
   302  004A2C  30                 	db	48
   303  004A2D  30                 	db	48
   304  004A2E  30                 	db	48
   305  004A2F  30                 	db	48
   306  004A30  00                 	db	0
   307                           
   308                           ;initializer for _filename
   309  004A31  74                 	db	116
   310  004A32  65                 	db	101
   311  004A33  73                 	db	115
   312  004A34  74                 	db	116
   313  004A35  65                 	db	101
   314  004A36  31                 	db	49
   315  004A37  2E                 	db	46
   316  004A38  74                 	db	116
   317  004A39  78                 	db	120
   318  004A3A  74                 	db	116
   319  004A3B  00                 	db	0
   320  004A3C  00                 	db	0
   321  004A3D  00                 	db	0
   322  004A3E  00                 	db	0
   323  004A3F  00                 	db	0
   324                           
   325                           	psect	mediumconst
   326  0060EC                     __pmediumconst:
   327                           	opt stack 0
   328  0060EC  00                 	db	0
   329  0060ED                     mensagem_inicial@F4367:
   330                           	opt stack 0
   331  0060ED  54                 	db	84
   332  0060EE  43                 	db	67
   333  0060EF  43                 	db	67
   334  0060F0  2D                 	db	45
   335  0060F1  2D                 	db	45
   336  0060F2  54                 	db	84
   337  0060F3  45                 	db	69
   338  0060F4  4C                 	db	76
   339  0060F5  45                 	db	69
   340  0060F6  4D                 	db	77
   341  0060F7  54                 	db	84
   342  0060F8  52                 	db	82
   343  0060F9  49                 	db	73
   344  0060FA  41                 	db	65
   345  0060FB  00                 	db	0
   346  0060FC  00                 	db	0
   347  0060FD  00                 	db	0
   348  0060FE                     __end_ofmensagem_inicial@F4367:
   349                           	opt stack 0
   350  0060FE                     mensagem_inicial@F4365:
   351                           	opt stack 0
   352  0060FE  46                 	db	70
   353  0060FF  41                 	db	65
   354  006100  54                 	db	84
   355  006101  45                 	db	69
   356  006102  43                 	db	67
   357  006103  20                 	db	32
   358  006104  53                 	db	83
   359  006105  54                 	db	84
   360  006106  20                 	db	32
   361  006107  41                 	db	65
   362  006108  4E                 	db	78
   363  006109  44                 	db	68
   364  00610A  52                 	db	82
   365  00610B  45                 	db	69
   366  00610C  00                 	db	0
   367  00610D  00                 	db	0
   368  00610E  00                 	db	0
   369  00610F                     __end_ofmensagem_inicial@F4365:
   370                           	opt stack 0
   371  0000                     _TMR0	set	4054
   372  0000                     _RCSTA	set	4011
   373  0000                     _TXSTA	set	4012
   374  0000                     _RCREG	set	4014
   375  0000                     _RCSTAbits	set	4011
   376  0000                     _TXREG	set	4013
   377  0000                     _SPBRG	set	4015
   378  0000                     _PR2	set	4043
   379  0000                     _TMR2	set	4044
   380  0000                     _T2CON	set	4042
   381  0000                     _OSCCONbits	set	4051
   382  0000                     _TRISE	set	3990
   383  0000                     _TRISC	set	3988
   384  0000                     _TRISA	set	3986
   385  0000                     _TRISD	set	3989
   386  0000                     _LATB	set	3978
   387  0000                     _TRISB	set	3987
   388  0000                     _ADCON1	set	4033
   389  0000                     _TMR0L	set	4054
   390  0000                     _TMR0H	set	4055
   391  0000                     _PIE1	set	3997
   392  0000                     _INTCON3	set	4080
   393  0000                     _INTCON2	set	4081
   394  0000                     _INTCON	set	4082
   395  0000                     _SPPCFG	set	3939
   396  0000                     _SPPCON	set	3941
   397  0000                     _T0CON	set	4053
   398  0000                     _PORTDbits	set	3971
   399  0000                     _TRISDbits	set	3989
   400  0000                     _LATCbits	set	3979
   401  0000                     _SSPBUF	set	4041
   402  0000                     _SSPCON1bits	set	4038
   403  0000                     _SSPSTATbits	set	4039
   404  0000                     _SSPCON1	set	4038
   405  0000                     _SSPSTAT	set	4039
   406  0000                     _TRISCbits	set	3988
   407  0000                     _TRISBbits	set	3987
   408  0000                     _LATBbits	set	3978
   409  0000                     _PORTEbits	set	3972
   410  0000                     _T0CONbits	set	4053
   411  0000                     _PCL	set	4089
   412  0000                     _PCLATH	set	4090
   413  0000                     _INTCONbits	set	4082
   414  0000                     _PORTBbits	set	3969
   415  0000                     _PIR1bits	set	3998
   416  0000                     _PIE1bits	set	3997
   417  0000                     _RCIF	set	31989
   418  0000                     _TRMT	set	32097
   419  0000                     _TXEN	set	32101
   420  0000                     _CREN	set	32092
   421  0000                     _SPEN	set	32095
   422  0000                     _SYNC	set	32100
   423  0000                     _BRGH	set	32098
   424  0000                     _TMR2IF	set	31985
   425  0000                     _INT0IE	set	32660
   426  0000                     _INT0IF	set	32657
   427  0000                     _T0IF	set	32658
   428  0000                     _TMR0IF	set	32658
   429  00610F                     STR_19:
   430  00610F  0A                 	db	10
   431  006110  76                 	db	118	;'v'
   432  006111  25                 	db	37
   433  006112  73                 	db	115	;'s'
   434  006113  3B                 	db	59	;';'
   435  006114  6C                 	db	108	;'l'
   436  006115  74                 	db	116	;'t'
   437  006116  25                 	db	37
   438  006117  73                 	db	115	;'s'
   439  006118  3B                 	db	59	;';'
   440  006119  6C                 	db	108	;'l'
   441  00611A  6F                 	db	111	;'o'
   442  00611B  25                 	db	37
   443  00611C  73                 	db	115	;'s'
   444  00611D  3B                 	db	59	;';'
   445  00611E  72                 	db	114	;'r'
   446  00611F  25                 	db	37
   447  006120  73                 	db	115	;'s'
   448  006121  3B                 	db	59	;';'
   449  006122  63                 	db	99	;'c'
   450  006123  25                 	db	37
   451  006124  73                 	db	115	;'s'
   452  006125  3B                 	db	59	;';'
   453  006126  6B                 	db	107	;'k'
   454  006127  25                 	db	37
   455  006128  73                 	db	115	;'s'
   456  006129  3B                 	db	59	;';'
   457  00612A  68                 	db	104	;'h'
   458  00612B  25                 	db	37
   459  00612C  73                 	db	115	;'s'
   460  00612D  3B                 	db	59	;';'
   461  00612E  64                 	db	100	;'d'
   462  00612F  25                 	db	37
   463  006130  73                 	db	115	;'s'
   464  006131  00                 	db	0
   465  006132                     STR_23:
   466  006132  73                 	db	115	;'s'
   467  006133  74                 	db	116	;'t'
   468  006134  72                 	db	114	;'r'
   469  006135  69                 	db	105	;'i'
   470  006136  6E                 	db	110	;'n'
   471  006137  67                 	db	103	;'g'
   472  006138  5F                 	db	95	;'_'
   473  006139  64                 	db	100	;'d'
   474  00613A  61                 	db	97	;'a'
   475  00613B  64                 	db	100	;'d'
   476  00613C  6F                 	db	111	;'o'
   477  00613D  2E                 	db	46
   478  00613E  6F                 	db	111	;'o'
   479  00613F  64                 	db	100	;'d'
   480  006140  6F                 	db	111	;'o'
   481  006141  6D                 	db	109	;'m'
   482  006142  65                 	db	101	;'e'
   483  006143  74                 	db	116	;'t'
   484  006144  72                 	db	114	;'r'
   485  006145  6F                 	db	111	;'o'
   486  006146  5F                 	db	95	;'_'
   487  006147  74                 	db	116	;'t'
   488  006148  6F                 	db	111	;'o'
   489  006149  74                 	db	116	;'t'
   490  00614A  61                 	db	97	;'a'
   491  00614B  6C                 	db	108	;'l'
   492  00614C  00                 	db	0
   493  00614D  6F                 	db	111	;'o'
   494  00614E  20                 	db	32
   495  00614F  53                 	db	83	;'S'
   496  006150  69                 	db	105	;'i'
   497  006151  73                 	db	115	;'s'
   498  006152  74                 	db	116	;'t'
   499  006153  65                 	db	101	;'e'
   500  006154  6D                 	db	109	;'m'
   501  006155  61                 	db	97	;'a'
   502  006156  20                 	db	32
   503  006157  64                 	db	100	;'d'
   504  006158  65                 	db	101	;'e'
   505  006159  20                 	db	32
   506  00615A  61                 	db	97	;'a'
   507  00615B  72                 	db	114	;'r'
   508  00615C  71                 	db	113	;'q'
   509  00615D  75                 	db	117	;'u'
   510  00615E  69                 	db	105	;'i'
   511  00615F  76                 	db	118	;'v'
   512  006160  6F                 	db	111	;'o'
   513  006161  00                 	db	0
   514  006162                     STR_22:
   515  006162  73                 	db	115	;'s'
   516  006163  74                 	db	116	;'t'
   517  006164  72                 	db	114	;'r'
   518  006165  69                 	db	105	;'i'
   519  006166  6E                 	db	110	;'n'
   520  006167  67                 	db	103	;'g'
   521  006168  5F                 	db	95	;'_'
   522  006169  64                 	db	100	;'d'
   523  00616A  61                 	db	97	;'a'
   524  00616B  64                 	db	100	;'d'
   525  00616C  6F                 	db	111	;'o'
   526  00616D  2E                 	db	46
   527  00616E  63                 	db	99	;'c'
   528  00616F  6F                 	db	111	;'o'
   529  006170  6D                 	db	109	;'m'
   530  006171  62                 	db	98	;'b'
   531  006172  00                 	db	0
   532  006173                     STR_9:
   533  006173  42                 	db	66	;'B'
   534  006174  31                 	db	49	;'1'
   535  006175  3A                 	db	58	;':'
   536  006176  52                 	db	82	;'R'
   537  006177  50                 	db	80	;'P'
   538  006178  4D                 	db	77	;'M'
   539  006179  20                 	db	32
   540  00617A  20                 	db	32
   541  00617B  42                 	db	66	;'B'
   542  00617C  32                 	db	50	;'2'
   543  00617D  3A                 	db	58	;':'
   544  00617E  46                 	db	70	;'F'
   545  00617F  45                 	db	69	;'E'
   546  006180  4E                 	db	78	;'N'
   547  006181  43                 	db	67	;'C'
   548  006182  45                 	db	69	;'E'
   549  006183  00                 	db	0
   550  006184                     STR_27:
   551  006184  49                 	db	73	;'I'
   552  006185  6E                 	db	110	;'n'
   553  006186  73                 	db	115	;'s'
   554  006187  69                 	db	105	;'i'
   555  006188  72                 	db	114	;'r'
   556  006189  61                 	db	97	;'a'
   557  00618A  20                 	db	32
   558  00618B  6F                 	db	111	;'o'
   559  00618C  20                 	db	32
   560  00618D  43                 	db	67	;'C'
   561  00618E  61                 	db	97	;'a'
   562  00618F  72                 	db	114	;'r'
   563  006190  74                 	db	116	;'t'
   564  006191  61                 	db	97	;'a'
   565  006192  6F                 	db	111	;'o'
   566  006193  00                 	db	0
   567  006194                     STR_24:
   568  006194  73                 	db	115	;'s'
   569  006195  74                 	db	116	;'t'
   570  006196  72                 	db	114	;'r'
   571  006197  69                 	db	105	;'i'
   572  006198  6E                 	db	110	;'n'
   573  006199  67                 	db	103	;'g'
   574  00619A  5F                 	db	95	;'_'
   575  00619B  64                 	db	100	;'d'
   576  00619C  61                 	db	97	;'a'
   577  00619D  64                 	db	100	;'d'
   578  00619E  6F                 	db	111	;'o'
   579  00619F  2E                 	db	46
   580  0061A0  64                 	db	100	;'d'
   581  0061A1  74                 	db	116	;'t'
   582  0061A2  63                 	db	99	;'c'
   583  0061A3  00                 	db	0
   584  0061A4                     STR_20:
   585  0061A4  73                 	db	115	;'s'
   586  0061A5  74                 	db	116	;'t'
   587  0061A6  72                 	db	114	;'r'
   588  0061A7  69                 	db	105	;'i'
   589  0061A8  6E                 	db	110	;'n'
   590  0061A9  67                 	db	103	;'g'
   591  0061AA  5F                 	db	95	;'_'
   592  0061AB  64                 	db	100	;'d'
   593  0061AC  61                 	db	97	;'a'
   594  0061AD  64                 	db	100	;'d'
   595  0061AE  6F                 	db	111	;'o'
   596  0061AF  2E                 	db	46
   597  0061B0  76                 	db	118	;'v'
   598  0061B1  65                 	db	101	;'e'
   599  0061B2  6C                 	db	108	;'l'
   600  0061B3  00                 	db	0
   601  0061B4                     STR_21:
   602  0061B4  73                 	db	115	;'s'
   603  0061B5  74                 	db	116	;'t'
   604  0061B6  72                 	db	114	;'r'
   605  0061B7  69                 	db	105	;'i'
   606  0061B8  6E                 	db	110	;'n'
   607  0061B9  67                 	db	103	;'g'
   608  0061BA  5F                 	db	95	;'_'
   609  0061BB  64                 	db	100	;'d'
   610  0061BC  61                 	db	97	;'a'
   611  0061BD  64                 	db	100	;'d'
   612  0061BE  6F                 	db	111	;'o'
   613  0061BF  2E                 	db	46
   614  0061C0  72                 	db	114	;'r'
   615  0061C1  70                 	db	112	;'p'
   616  0061C2  6D                 	db	109	;'m'
   617  0061C3  00                 	db	0
   618  0061C4                     STR_7:
   619  0061C4  42                 	db	66	;'B'
   620  0061C5  31                 	db	49	;'1'
   621  0061C6  3A                 	db	58	;':'
   622  0061C7  52                 	db	82	;'R'
   623  0061C8  50                 	db	80	;'P'
   624  0061C9  4D                 	db	77	;'M'
   625  0061CA  20                 	db	32
   626  0061CB  42                 	db	66	;'B'
   627  0061CC  32                 	db	50	;'2'
   628  0061CD  3A                 	db	58	;':'
   629  0061CE  46                 	db	70	;'F'
   630  0061CF  45                 	db	69	;'E'
   631  0061D0  4E                 	db	78	;'N'
   632  0061D1  43                 	db	67	;'C'
   633  0061D2  45                 	db	69	;'E'
   634  0061D3  00                 	db	0
   635  0061D4  45                 	db	69	;'E'
   636  0061D5  72                 	db	114	;'r'
   637  0061D6  72                 	db	114	;'r'
   638  0061D7  6F                 	db	111	;'o'
   639  0061D8  20                 	db	32
   640  0061D9  61                 	db	97	;'a'
   641  0061DA  6F                 	db	111	;'o'
   642  0061DB  20                 	db	32
   643  0061DC  6D                 	db	109	;'m'
   644  0061DD  6F                 	db	111	;'o'
   645  0061DE  6E                 	db	110	;'n'
   646  0061DF  74                 	db	116	;'t'
   647  0061E0  61                 	db	97	;'a'
   648  0061E1  72                 	db	114	;'r'
   649  0061E2  00                 	db	0
   650  0061E3  45                 	db	69	;'E'
   651  0061E4  72                 	db	114	;'r'
   652  0061E5  72                 	db	114	;'r'
   653  0061E6  6F                 	db	111	;'o'
   654  0061E7  20                 	db	32
   655  0061E8  61                 	db	97	;'a'
   656  0061E9  6F                 	db	111	;'o'
   657  0061EA  20                 	db	32
   658  0061EB  63                 	db	99	;'c'
   659  0061EC  72                 	db	114	;'r'
   660  0061ED  69                 	db	105	;'i'
   661  0061EE  61                 	db	97	;'a'
   662  0061EF  72                 	db	114	;'r'
   663  0061F0  00                 	db	0
   664  0061F1                     STR_1:
   665  0061F1  52                 	db	82	;'R'
   666  0061F2  45                 	db	69	;'E'
   667  0061F3  47                 	db	71	;'G'
   668  0061F4  49                 	db	73	;'I'
   669  0061F5  41                 	db	65	;'A'
   670  0061F6  4F                 	db	79	;'O'
   671  0061F7  20                 	db	32
   672  0061F8  4E                 	db	78	;'N'
   673  0061F9  45                 	db	69	;'E'
   674  0061FA  47                 	db	71	;'G'
   675  0061FB  41                 	db	65	;'A'
   676  0061FC  44                 	db	68	;'D'
   677  0061FD  41                 	db	65	;'A'
   678  0061FE  00                 	db	0
   679  0061FF  65                 	db	101	;'e'
   680  006200  78                 	db	120	;'x'
   681  006201  74                 	db	116	;'t'
   682  006202  66                 	db	102	;'f'
   683  006203  65                 	db	101	;'e'
   684  006204  6E                 	db	110	;'n'
   685  006205  63                 	db	99	;'c'
   686  006206  65                 	db	101	;'e'
   687  006207  2E                 	db	46
   688  006208  74                 	db	116	;'t'
   689  006209  78                 	db	120	;'x'
   690  00620A  74                 	db	116	;'t'
   691  00620B  00                 	db	0
   692  00620C                     STR_29:
   693  00620C  4D                 	db	77	;'M'
   694  00620D  4D                 	db	77	;'M'
   695  00620E  43                 	db	67	;'C'
   696  00620F  20                 	db	32
   697  006210  56                 	db	86	;'V'
   698  006211  65                 	db	101	;'e'
   699  006212  72                 	db	114	;'r'
   700  006213  2E                 	db	46
   701  006214  20                 	db	32
   702  006215  33                 	db	51	;'3'
   703  006216  00                 	db	0
   704  006217                     STR_26:
   705  006217  53                 	db	83	;'S'
   706  006218  65                 	db	101	;'e'
   707  006219  6D                 	db	109	;'m'
   708  00621A  20                 	db	32
   709  00621B  43                 	db	67	;'C'
   710  00621C  61                 	db	97	;'a'
   711  00621D  72                 	db	114	;'r'
   712  00621E  74                 	db	116	;'t'
   713  00621F  61                 	db	97	;'a'
   714  006220  6F                 	db	111	;'o'
   715  006221  00                 	db	0
   716  006222                     STR_28:
   717  006222  53                 	db	83	;'S'
   718  006223  44                 	db	68	;'D'
   719  006224  20                 	db	32
   720  006225  56                 	db	86	;'V'
   721  006226  45                 	db	69	;'E'
   722  006227  52                 	db	82	;'R'
   723  006228  2E                 	db	46
   724  006229  20                 	db	32
   725  00622A  31                 	db	49	;'1'
   726  00622B  00                 	db	0
   727  00622C  56                 	db	86	;'V'
   728  00622D  65                 	db	101	;'e'
   729  00622E  72                 	db	114	;'r'
   730  00622F  69                 	db	105	;'i'
   731  006230  66                 	db	102	;'f'
   732  006231  69                 	db	105	;'i'
   733  006232  71                 	db	113	;'q'
   734  006233  75                 	db	117	;'u'
   735  006234  65                 	db	101	;'e'
   736  006235  00                 	db	0
   737  006236  6F                 	db	111	;'o'
   738  006237  20                 	db	32
   739  006238  61                 	db	97	;'a'
   740  006239  72                 	db	114	;'r'
   741  00623A  71                 	db	113	;'q'
   742  00623B  75                 	db	117	;'u'
   743  00623C  69                 	db	105	;'i'
   744  00623D  76                 	db	118	;'v'
   745  00623E  6F                 	db	111	;'o'
   746  00623F  00                 	db	0
   747  006240  6F                 	db	111	;'o'
   748  006241  20                 	db	32
   749  006242  63                 	db	99	;'c'
   750  006243  61                 	db	97	;'a'
   751  006244  72                 	db	114	;'r'
   752  006245  74                 	db	116	;'t'
   753  006246  61                 	db	97	;'a'
   754  006247  6F                 	db	111	;'o'
   755  006248  00                 	db	0
   756  006249                     STR_6:
   757  006249  44                 	db	68	;'D'
   758  00624A  5F                 	db	95	;'_'
   759  00624B  46                 	db	70	;'F'
   760  00624C  65                 	db	101	;'e'
   761  00624D  6E                 	db	110	;'n'
   762  00624E  63                 	db	99	;'c'
   763  00624F  65                 	db	101	;'e'
   764  006250  3A                 	db	58	;':'
   765  006251  00                 	db	0
   766  006252                     STR_8:
   767  006252  42                 	db	66	;'B'
   768  006253  32                 	db	50	;'2'
   769  006254  3A                 	db	58	;':'
   770  006255  48                 	db	72	;'H'
   771  006256  4F                 	db	79	;'O'
   772  006257  4D                 	db	77	;'M'
   773  006258  45                 	db	69	;'E'
   774  006259  00                 	db	0
   775  00625A                     STR_12:
   776  00625A  47                 	db	71	;'G'
   777  00625B  50                 	db	80	;'P'
   778  00625C  47                 	db	71	;'G'
   779  00625D  47                 	db	71	;'G'
   780  00625E  41                 	db	65	;'A'
   781  00625F  00                 	db	0
   782  006260                     STR_11:
   783  006260  47                 	db	71	;'G'
   784  006261  50                 	db	80	;'P'
   785  006262  52                 	db	82	;'R'
   786  006263  4D                 	db	77	;'M'
   787  006264  43                 	db	67	;'C'
   788  006265  00                 	db	0
   789  006266                     STR_3:
   790  006266  56                 	db	86	;'V'
   791  006267  45                 	db	69	;'E'
   792  006268  4C                 	db	76	;'L'
   793  006269  3A                 	db	58	;':'
   794  00626A  00                 	db	0
   795  00626B                     STR_2:
   796  00626B  52                 	db	82	;'R'
   797  00626C  50                 	db	80	;'P'
   798  00626D  4D                 	db	77	;'M'
   799  00626E  3A                 	db	58	;':'
   800  00626F  00                 	db	0
   801  006270                     STR_31:
   802  006270  46                 	db	70	;'F'
   803  006271  41                 	db	65	;'A'
   804  006272  54                 	db	84	;'T'
   805  006273  00                 	db	0
   806  006274                     STR_5:
   807  006274  6C                 	db	108	;'l'
   808  006275  6F                 	db	111	;'o'
   809  006276  3A                 	db	58	;':'
   810  006277  00                 	db	0
   811  006278                     STR_4:
   812  006278  6C                 	db	108	;'l'
   813  006279  74                 	db	116	;'t'
   814  00627A  3A                 	db	58	;':'
   815  00627B  00                 	db	0
   816  00627C  0D                 	db	13
   817  00627D  0A                 	db	10
   818  00627E  00                 	db	0
   819  00627F  00                 	db	0	; dummy byte at the end
   820  0000                     
   821                           ; #config settings
   822                           
   823                           	psect	cinit
   824  004CF6                     __pcinit:
   825                           	opt stack 0
   826  004CF6                     start_initialization:
   827                           	opt stack 0
   828  004CF6                     __initialization:
   829                           	opt stack 0
   830                           
   831                           ; Initialize objects allocated to BANK2 (144 bytes)
   832                           ; load TBLPTR registers with __pidataBANK2
   833  004CF6  0EB0               	movlw	low __pidataBANK2
   834  004CF8  6EF6               	movwf	tblptrl,c
   835  004CFA  0E49               	movlw	high __pidataBANK2
   836  004CFC  6EF7               	movwf	tblptrh,c
   837  004CFE  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   838  004D00  6EF8               	movwf	tblptru,c
   839  004D02  EE02  F000         	lfsr	0,__pdataBANK2
   840  004D06  EE10 F090          	lfsr	1,144
   841  004D0A                     copy_data0:
   842  004D0A  0009               	tblrd		*+
   843  004D0C  CFF5 FFEE          	movff	tablat,postinc0
   844  004D10  50E5               	movf	postdec1,w,c
   845  004D12  50E1               	movf	fsr1l,w,c
   846  004D14  E1FA               	bnz	copy_data0
   847                           
   848                           ; Initialize objects allocated to COMRAM (1 bytes)
   849                           ; load TBLPTR registers with __pidataCOMRAM
   850  004D16  0EB2               	movlw	low __pidataCOMRAM
   851  004D18  6EF6               	movwf	tblptrl,c
   852  004D1A  0E58               	movlw	high __pidataCOMRAM
   853  004D1C  6EF7               	movwf	tblptrh,c
   854  004D1E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   855  004D20  6EF8               	movwf	tblptru,c
   856  004D22  0009               	tblrd		*+	;fetch initializer
   857  004D24  CFF5 F043          	movff	tablat,__pdataCOMRAM
   858                           
   859                           ; Clear objects allocated to BIGRAM (544 bytes)
   860  004D28  EE03  F07D         	lfsr	0,__pbssBIGRAM
   861  004D2C  EE12 F020          	lfsr	1,544
   862  004D30                     clear_0:
   863  004D30  6AEE               	clrf	postinc0,c
   864  004D32  50E5               	movf	postdec1,w,c
   865  004D34  50E1               	movf	fsr1l,w,c
   866  004D36  E1FC               	bnz	clear_0
   867  004D38  50E2               	movf	fsr1h,w,c
   868  004D3A  E1FA               	bnz	clear_0
   869                           
   870                           ; Clear objects allocated to BANK2 (109 bytes)
   871  004D3C  EE02  F090         	lfsr	0,__pbssBANK2
   872  004D40  0E6D               	movlw	109
   873  004D42                     clear_1:
   874  004D42  6AEE               	clrf	postinc0,c
   875  004D44  06E8               	decf	wreg,f,c
   876  004D46  E1FD               	bnz	clear_1
   877                           
   878                           ; Clear objects allocated to BANK1 (219 bytes)
   879  004D48  EE01  F000         	lfsr	0,__pbssBANK1
   880  004D4C  0EDB               	movlw	219
   881  004D4E                     clear_2:
   882  004D4E  6AEE               	clrf	postinc0,c
   883  004D50  06E8               	decf	wreg,f,c
   884  004D52  E1FD               	bnz	clear_2
   885                           
   886                           ; Clear objects allocated to BANK0 (12 bytes)
   887  004D54  EE00  F0F4         	lfsr	0,__pbssBANK0
   888  004D58  0E0C               	movlw	12
   889  004D5A                     clear_3:
   890  004D5A  6AEE               	clrf	postinc0,c
   891  004D5C  06E8               	decf	wreg,f,c
   892  004D5E  E1FD               	bnz	clear_3
   893                           
   894                           ; Clear objects allocated to COMRAM (32 bytes)
   895  004D60  EE00  F023         	lfsr	0,__pbssCOMRAM
   896  004D64  0E20               	movlw	32
   897  004D66                     clear_4:
   898  004D66  6AEE               	clrf	postinc0,c
   899  004D68  06E8               	decf	wreg,f,c
   900  004D6A  E1FD               	bnz	clear_4
   901  004D6C                     end_of_initialization:
   902                           	opt stack 0
   903  004D6C                     __end_of__initialization:
   904                           	opt stack 0
   905  004D6C  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   906  004D6E  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   907  004D70  0E00               	movlw	low (__Lmediumconst shr (0+16))
   908  004D72  6EF8               	movwf	tblptru,c
   909  004D74  0100               	movlb	0
   910  004D76  EF1E  F02B         	goto	_main	;jump to C main() function
   911                           tblptru	equ	0xFF8
   912                           tblptrh	equ	0xFF7
   913                           tblptrl	equ	0xFF6
   914                           tablat	equ	0xFF5
   915                           postinc0	equ	0xFEE
   916                           wreg	equ	0xFE8
   917                           postdec1	equ	0xFE5
   918                           fsr1h	equ	0xFE2
   919                           fsr1l	equ	0xFE1
   920                           
   921                           	psect	bssCOMRAM
   922  000023                     __pbssCOMRAM:
   923                           	opt stack 0
   924  000023                     _tempo_tarefa:
   925                           	opt stack 0
   926  000023                     	ds	8
   927  00002B                     _fsid:
   928                           	opt stack 0
   929  00002B                     	ds	2
   930  00002D                     _GPGGA_ok:
   931                           	opt stack 0
   932  00002D                     	ds	2
   933  00002F                     _GPRMC_ok:
   934                           	opt stack 0
   935  00002F                     	ds	2
   936  000031                     _time_atualizacao:
   937                           	opt stack 0
   938  000031                     	ds	2
   939  000033                     _time_sd:
   940                           	opt stack 0
   941  000033                     	ds	2
   942  000035                     _timeout_tarefa:
   943                           	opt stack 0
   944  000035                     	ds	2
   945  000037                     _dado:
   946                           	opt stack 0
   947  000037                     	ds	1
   948  000038                     timer_dois@flag:
   949                           	opt stack 0
   950  000038                     	ds	1
   951  000039                     _estado:
   952                           	opt stack 0
   953  000039                     	ds	1
   954  00003A                     _data_hoje:
   955                           	opt stack 0
   956  00003A                     	ds	1
   957  00003B                     _rawFix:
   958                           	opt stack 0
   959  00003B                     	ds	1
   960  00003C                     _Term:
   961                           	opt stack 0
   962  00003C                     	ds	1
   963  00003D                     _SentenceType:
   964                           	opt stack 0
   965  00003D                     	ds	1
   966  00003E                     _char_number:
   967                           	opt stack 0
   968  00003E                     	ds	1
   969  00003F                     troca_de_tela@last_state:
   970                           	opt stack 0
   971  00003F                     	ds	1
   972  000040                     troca_de_tela@state:
   973                           	opt stack 0
   974  000040                     	ds	1
   975  000041                     _tarefa_em_execucao:
   976                           	opt stack 0
   977  000041                     	ds	1
   978  000042                     _data_uart_recebe:
   979                           	opt stack 0
   980  000042                     	ds	1
   981                           tblptru	equ	0xFF8
   982                           tblptrh	equ	0xFF7
   983                           tblptrl	equ	0xFF6
   984                           tablat	equ	0xFF5
   985                           postinc0	equ	0xFEE
   986                           wreg	equ	0xFE8
   987                           postdec1	equ	0xFE5
   988                           fsr1h	equ	0xFE2
   989                           fsr1l	equ	0xFE1
   990                           
   991                           	psect	dataCOMRAM
   992  000043                     __pdataCOMRAM:
   993                           	opt stack 0
   994  000043                     leitura_sdcard@size:
   995                           	opt stack 0
   996  000043                     	ds	1
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           postdec1	equ	0xFE5
  1004                           fsr1h	equ	0xFE2
  1005                           fsr1l	equ	0xFE1
  1006                           
  1007                           	psect	bssBANK0
  1008  0000F4                     __pbssBANK0:
  1009                           	opt stack 0
  1010  0000F4                     _flag:
  1011                           	opt stack 0
  1012  0000F4                     	ds	3
  1013  0000F7                     _FatFs:
  1014                           	opt stack 0
  1015  0000F7                     	ds	2
  1016  0000F9                     _data_buff:
  1017                           	opt stack 0
  1018  0000F9                     	ds	2
  1019  0000FB                     _point_buff_gps_long:
  1020                           	opt stack 0
  1021  0000FB                     	ds	2
  1022  0000FD                     _point_buff_gps_lat:
  1023                           	opt stack 0
  1024  0000FD                     	ds	2
  1025  0000FF                     _sinaliza_int_timer:
  1026                           	opt stack 0
  1027  0000FF                     	ds	1
  1028                           tblptru	equ	0xFF8
  1029                           tblptrh	equ	0xFF7
  1030                           tblptrl	equ	0xFF6
  1031                           tablat	equ	0xFF5
  1032                           postinc0	equ	0xFEE
  1033                           wreg	equ	0xFE8
  1034                           postdec1	equ	0xFE5
  1035                           fsr1h	equ	0xFE2
  1036                           fsr1l	equ	0xFE1
  1037                           
  1038                           	psect	bssBANK1
  1039  000100                     __pbssBANK1:
  1040                           	opt stack 0
  1041  000100                     _tempo_backup:
  1042                           	opt stack 0
  1043  000100                     	ds	8
  1044  000108                     _p_tarefas:
  1045                           	opt stack 0
  1046  000108                     	ds	8
  1047  000110                     _poligono_ext:
  1048                           	opt stack 0
  1049  000110                     	ds	128
  1050  000190                     _fil:
  1051                           	opt stack 0
  1052  000190                     	ds	28
  1053  0001AC                     _buffer:
  1054                           	opt stack 0
  1055  0001AC                     	ds	12
  1056  0001B8                     _rawAltitude:
  1057                           	opt stack 0
  1058  0001B8                     	ds	7
  1059  0001BF                     _rawDate:
  1060                           	opt stack 0
  1061  0001BF                     	ds	7
  1062  0001C6                     _rawCourse:
  1063                           	opt stack 0
  1064  0001C6                     	ds	6
  1065  0001CC                     _rawSpeed:
  1066                           	opt stack 0
  1067  0001CC                     	ds	6
  1068  0001D2                     _sentence:
  1069                           	opt stack 0
  1070  0001D2                     	ds	6
  1071  0001D8                     _rawSatellites:
  1072                           	opt stack 0
  1073  0001D8                     	ds	3
  1074                           tblptru	equ	0xFF8
  1075                           tblptrh	equ	0xFF7
  1076                           tblptrl	equ	0xFF6
  1077                           tablat	equ	0xFF5
  1078                           postinc0	equ	0xFEE
  1079                           wreg	equ	0xFE8
  1080                           postdec1	equ	0xFE5
  1081                           fsr1h	equ	0xFE2
  1082                           fsr1l	equ	0xFE1
  1083                           
  1084                           	psect	bssBANK2
  1085  000290                     __pbssBANK2:
  1086                           	opt stack 0
  1087  000290                     _string_dado:
  1088                           	opt stack 0
  1089  000290                     	ds	52
  1090  0002C4                     _dado_arquivo:
  1091                           	opt stack 0
  1092  0002C4                     	ds	20
  1093  0002D8                     _rawLongitude:
  1094                           	opt stack 0
  1095  0002D8                     	ds	13
  1096  0002E5                     _rawLatitude:
  1097                           	opt stack 0
  1098  0002E5                     	ds	13
  1099  0002F2                     _rawTime:
  1100                           	opt stack 0
  1101  0002F2                     	ds	11
  1102                           tblptru	equ	0xFF8
  1103                           tblptrh	equ	0xFF7
  1104                           tblptrl	equ	0xFF6
  1105                           tablat	equ	0xFF5
  1106                           postinc0	equ	0xFEE
  1107                           wreg	equ	0xFE8
  1108                           postdec1	equ	0xFE5
  1109                           fsr1h	equ	0xFE2
  1110                           fsr1l	equ	0xFE1
  1111                           
  1112                           	psect	dataBANK2
  1113  000200                     __pdataBANK2:
  1114                           	opt stack 0
  1115  000200                     verifica_fence_externo@F4375:
  1116                           	opt stack 0
  1117  000200                     	ds	48
  1118  000230                     verifica_fence_externo@F4372:
  1119                           	opt stack 0
  1120  000230                     	ds	44
  1121  00025C                     verifica_fence_externo@F4388:
  1122                           	opt stack 0
  1123  00025C                     	ds	12
  1124  000268                     verifica_fence_externo@F4386:
  1125                           	opt stack 0
  1126  000268                     	ds	11
  1127  000273                     escreve_inteiro_uart@F3958:
  1128                           	opt stack 0
  1129  000273                     	ds	7
  1130  00027A                     escreve_inteiro_lcd@F3966:
  1131                           	opt stack 0
  1132  00027A                     	ds	7
  1133  000281                     _filename:
  1134                           	opt stack 0
  1135  000281                     	ds	15
  1136                           tblptru	equ	0xFF8
  1137                           tblptrh	equ	0xFF7
  1138                           tblptrl	equ	0xFF6
  1139                           tablat	equ	0xFF5
  1140                           postinc0	equ	0xFEE
  1141                           wreg	equ	0xFE8
  1142                           postdec1	equ	0xFE5
  1143                           fsr1h	equ	0xFE2
  1144                           fsr1l	equ	0xFE1
  1145                           
  1146                           	psect	bssBIGRAM
  1147  00037D                     __pbssBIGRAM:
  1148                           	opt stack 0
  1149  00037D                     _fs:
  1150                           	opt stack 0
  1151  00037D                     	ds	544
  1152                           tblptru	equ	0xFF8
  1153                           tblptrh	equ	0xFF7
  1154                           tblptrl	equ	0xFF6
  1155                           tablat	equ	0xFF5
  1156                           postinc0	equ	0xFEE
  1157                           wreg	equ	0xFE8
  1158                           postdec1	equ	0xFE5
  1159                           fsr1h	equ	0xFE2
  1160                           fsr1l	equ	0xFE1
  1161                           
  1162                           	psect	cstackBANK3
  1163  000300                     __pcstackBANK3:
  1164                           	opt stack 0
  1165  000300                     fprintf@s:
  1166                           	opt stack 0
  1167  000300                     verifica_fence_externo@fence_diff_long:
  1168                           	opt stack 0
  1169                           
  1170                           ; 48 bytes @ 0x0
  1171  000300                     	ds	16
  1172  000310                     fprintf@res:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x10
  1176  000310                     	ds	2
  1177  000312                     _fprintf$2605:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x12
  1181  000312                     	ds	2
  1182  000314                     fprintf@w:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0x14
  1186  000314                     	ds	2
  1187  000316                     fprintf@f:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x16
  1191  000316                     	ds	1
  1192  000317                     fprintf@r:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x17
  1196  000317                     	ds	1
  1197  000318                     fprintf@val:
  1198                           	opt stack 0
  1199                           
  1200                           ; 4 bytes @ 0x18
  1201  000318                     	ds	4
  1202  00031C                     fprintf@arp:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x1C
  1206  00031C                     	ds	2
  1207  00031E                     fprintf@cc:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x1E
  1211  00031E                     	ds	2
  1212  000320                     fprintf@i:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x20
  1216  000320                     	ds	2
  1217  000322                     fprintf@c:
  1218                           	opt stack 0
  1219                           
  1220                           ; 1 bytes @ 0x22
  1221  000322                     	ds	14
  1222  000330                     verifica_fence_externo@fence_diff_lat:
  1223                           	opt stack 0
  1224                           
  1225                           ; 44 bytes @ 0x30
  1226  000330                     	ds	44
  1227  00035C                     verifica_fence_externo@temp_buff_long:
  1228                           	opt stack 0
  1229                           
  1230                           ; 12 bytes @ 0x5C
  1231  00035C                     	ds	12
  1232  000368                     verifica_fence_externo@temp_buff_lat:
  1233                           	opt stack 0
  1234                           
  1235                           ; 11 bytes @ 0x68
  1236  000368                     	ds	11
  1237  000373                     verifica_fence_externo@temp_var_deg:
  1238                           	opt stack 0
  1239                           
  1240                           ; 4 bytes @ 0x73
  1241  000373                     	ds	4
  1242  000377                     verifica_fence_externo@point_dif_lat:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x77
  1246  000377                     	ds	1
  1247  000378                     verifica_fence_externo@point_dif_long:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x78
  1251  000378                     	ds	1
  1252  000379                     verifica_fence_externo@j:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x79
  1256  000379                     	ds	1
  1257  00037A                     verifica_fence_externo@count:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x7A
  1261  00037A                     	ds	1
  1262  00037B                     verifica_fence_externo@point:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x7B
  1266  00037B                     	ds	1
  1267  00037C                     verifica_fence_externo@i:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x7C
  1271  00037C                     	ds	1
  1272                           tblptru	equ	0xFF8
  1273                           tblptrh	equ	0xFF7
  1274                           tblptrl	equ	0xFF6
  1275                           tablat	equ	0xFF5
  1276                           postinc0	equ	0xFEE
  1277                           wreg	equ	0xFE8
  1278                           postdec1	equ	0xFE5
  1279                           fsr1h	equ	0xFE2
  1280                           fsr1l	equ	0xFE1
  1281                           
  1282                           	psect	cstackBANK1
  1283  0001DB                     __pcstackBANK1:
  1284                           	opt stack 0
  1285  0001DB                     ?_fprintf:
  1286                           	opt stack 0
  1287  0001DB                     fprintf@fil:
  1288                           	opt stack 0
  1289  0001DB                     f_open@fn:
  1290                           	opt stack 0
  1291                           
  1292                           ; 12 bytes @ 0x0
  1293  0001DB                     	ds	2
  1294  0001DD                     fprintf@str:
  1295                           	opt stack 0
  1296                           
  1297                           ; 2 bytes @ 0x2
  1298  0001DD                     	ds	10
  1299  0001E7                     f_open@rs:
  1300                           	opt stack 0
  1301                           
  1302                           ; 2 bytes @ 0xC
  1303  0001E7                     	ds	2
  1304  0001E9                     f_open@dw:
  1305                           	opt stack 0
  1306                           
  1307                           ; 4 bytes @ 0xE
  1308  0001E9                     	ds	4
  1309  0001ED                     f_open@res:
  1310                           	opt stack 0
  1311                           
  1312                           ; 1 bytes @ 0x12
  1313  0001ED                     	ds	1
  1314  0001EE                     f_open@dir:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0x13
  1318  0001EE                     	ds	1
  1319  0001EF                     ??_fprintf:
  1320                           
  1321                           ; 1 bytes @ 0x14
  1322  0001EF                     	ds	1
  1323  0001F0                     f_open@dj:
  1324                           	opt stack 0
  1325                           
  1326                           ; 14 bytes @ 0x15
  1327  0001F0                     	ds	14
  1328  0001FE                     
  1329                           ; 1 bytes @ 0x23
  1330  0001FE                     	ds	2
  1331                           tblptru	equ	0xFF8
  1332                           tblptrh	equ	0xFF7
  1333                           tblptrl	equ	0xFF6
  1334                           tablat	equ	0xFF5
  1335                           postinc0	equ	0xFEE
  1336                           wreg	equ	0xFE8
  1337                           postdec1	equ	0xFE5
  1338                           fsr1h	equ	0xFE2
  1339                           fsr1l	equ	0xFE1
  1340                           
  1341                           	psect	cstackBANK0
  1342  000060                     __pcstackBANK0:
  1343                           	opt stack 0
  1344  000060                     ??_isdigit:
  1345  000060                     ??_dummy_clocks:
  1346  000060                     ?_Latitude:
  1347                           	opt stack 0
  1348  000060                     ?_Longitude:
  1349                           	opt stack 0
  1350  000060                     ?_strlen:
  1351                           	opt stack 0
  1352  000060                     ?_memcmp:
  1353                           	opt stack 0
  1354  000060                     ?___wmul:
  1355                           	opt stack 0
  1356  000060                     ?___lwdiv:
  1357                           	opt stack 0
  1358  000060                     ?___lwmod:
  1359                           	opt stack 0
  1360  000060                     ?_get_fattime:
  1361                           	opt stack 0
  1362  000060                     ?___lmul:
  1363                           	opt stack 0
  1364  000060                     ?___aldiv:
  1365                           	opt stack 0
  1366  000060                     ?___lldiv:
  1367                           	opt stack 0
  1368  000060                     ?___llmod:
  1369                           	opt stack 0
  1370  000060                     response@buff:
  1371                           	opt stack 0
  1372  000060                     escreve_SPI@TempVar:
  1373                           	opt stack 0
  1374  000060                     disk_ioctl@cmd:
  1375                           	opt stack 0
  1376  000060                     sdc_disk_status@stat:
  1377                           	opt stack 0
  1378  000060                     delay@contador_ext:
  1379                           	opt stack 0
  1380  000060                     write_timer_zero@timer0:
  1381                           	opt stack 0
  1382  000060                     f_mount@fs:
  1383                           	opt stack 0
  1384  000060                     ___wmul@multiplier:
  1385                           	opt stack 0
  1386  000060                     ___lwdiv@dividend:
  1387                           	opt stack 0
  1388  000060                     ___lwmod@dividend:
  1389                           	opt stack 0
  1390  000060                     memcmp@s1:
  1391                           	opt stack 0
  1392  000060                     memcpy@d1:
  1393                           	opt stack 0
  1394  000060                     memset@p1:
  1395                           	opt stack 0
  1396  000060                     strlen@s:
  1397                           	opt stack 0
  1398  000060                     wait_ready@timeout:
  1399                           	opt stack 0
  1400  000060                     ___lmul@multiplier:
  1401                           	opt stack 0
  1402  000060                     ___aldiv@dividend:
  1403                           	opt stack 0
  1404  000060                     ___lldiv@dividend:
  1405                           	opt stack 0
  1406  000060                     ___llmod@dividend:
  1407                           	opt stack 0
  1408                           
  1409                           ; 4 bytes @ 0x0
  1410  000060                     	ds	1
  1411  000061                     escreve_SPI@dado:
  1412                           	opt stack 0
  1413  000061                     sdc_disk_status@pdrv:
  1414                           	opt stack 0
  1415  000061                     delay@contador_int:
  1416                           	opt stack 0
  1417  000061                     _isdigit$2943:
  1418                           	opt stack 0
  1419  000061                     disk_ioctl@buff:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x1
  1423  000061                     	ds	1
  1424  000062                     ??_strlen:
  1425  000062                     ??_disk_status:
  1426  000062                     dummy_clocks@n:
  1427                           	opt stack 0
  1428  000062                     escreve_cmd_lcd@comando:
  1429                           	opt stack 0
  1430  000062                     endereco_cursor_lcd@endereco:
  1431                           	opt stack 0
  1432  000062                     escreve_caractere_lcd@data:
  1433                           	opt stack 0
  1434  000062                     f_mount@drv:
  1435                           	opt stack 0
  1436  000062                     isdigit@c:
  1437                           	opt stack 0
  1438  000062                     ___wmul@multiplicand:
  1439                           	opt stack 0
  1440  000062                     ___lwdiv@divisor:
  1441                           	opt stack 0
  1442  000062                     ___lwmod@divisor:
  1443                           	opt stack 0
  1444  000062                     memcmp@s2:
  1445                           	opt stack 0
  1446  000062                     memcpy@s1:
  1447                           	opt stack 0
  1448  000062                     memset@c:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x2
  1452  000062                     	ds	1
  1453  000063                     ??_init_lcd:
  1454  000063                     disk_ioctl@pdrv:
  1455                           	opt stack 0
  1456  000063                     posicao_cursor_lcd@coluna:
  1457                           	opt stack 0
  1458  000063                     dummy_clocks@i:
  1459                           	opt stack 0
  1460  000063                     disk_status@result:
  1461                           	opt stack 0
  1462  000063                     escreve_frase_ram_lcd@buffer:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x3
  1466  000063                     	ds	1
  1467  000064                     ??_get_fattime:
  1468  000064                     wait_ready@res:
  1469                           	opt stack 0
  1470  000064                     disk_ioctl@res:
  1471                           	opt stack 0
  1472  000064                     posicao_cursor_lcd@linha:
  1473                           	opt stack 0
  1474  000064                     ___lwdiv@counter:
  1475                           	opt stack 0
  1476  000064                     ___lwmod@counter:
  1477                           	opt stack 0
  1478  000064                     ___wmul@product:
  1479                           	opt stack 0
  1480  000064                     memcmp@n:
  1481                           	opt stack 0
  1482  000064                     memcpy@n:
  1483                           	opt stack 0
  1484  000064                     memset@n:
  1485                           	opt stack 0
  1486  000064                     strlen@cp:
  1487                           	opt stack 0
  1488  000064                     ___lmul@multiplicand:
  1489                           	opt stack 0
  1490  000064                     ___aldiv@divisor:
  1491                           	opt stack 0
  1492  000064                     ___lldiv@divisor:
  1493                           	opt stack 0
  1494  000064                     ___llmod@divisor:
  1495                           	opt stack 0
  1496                           
  1497                           ; 4 bytes @ 0x4
  1498  000064                     	ds	1
  1499  000065                     disk_status@pdrv:
  1500                           	opt stack 0
  1501  000065                     posicao_cursor_lcd@endereco:
  1502                           	opt stack 0
  1503  000065                     ___lwdiv@quotient:
  1504                           	opt stack 0
  1505  000065                     command@arg:
  1506                           	opt stack 0
  1507                           
  1508                           ; 4 bytes @ 0x5
  1509  000065                     	ds	1
  1510  000066                     ??_mensagem_inicial:
  1511  000066                     ??_memcmp:
  1512  000066                     ?_atoi:
  1513                           	opt stack 0
  1514  000066                     disk_status@stat:
  1515                           	opt stack 0
  1516  000066                     memcpy@tmp:
  1517                           	opt stack 0
  1518  000066                     monta_sd@dado:
  1519                           	opt stack 0
  1520  000066                     atoi@s:
  1521                           	opt stack 0
  1522  000066                     memset@p:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x6
  1526  000066                     	ds	1
  1527  000067                     validate@fs:
  1528                           	opt stack 0
  1529  000067                     utoa@buf:
  1530                           	opt stack 0
  1531  000067                     memcpy@d:
  1532                           	opt stack 0
  1533                           
  1534                           ; 2 bytes @ 0x7
  1535  000067                     	ds	1
  1536  000068                     ??_atoi:
  1537  000068                     monta_sd@index:
  1538                           	opt stack 0
  1539  000068                     ___aldiv@counter:
  1540                           	opt stack 0
  1541  000068                     ___llmod@counter:
  1542                           	opt stack 0
  1543  000068                     make_dirfile@path:
  1544                           	opt stack 0
  1545  000068                     ___lmul@product:
  1546                           	opt stack 0
  1547  000068                     ___lldiv@quotient:
  1548                           	opt stack 0
  1549  000068                     mensagem_inicial@msg_linha_um:
  1550                           	opt stack 0
  1551                           
  1552                           ; 17 bytes @ 0x8
  1553  000068                     	ds	1
  1554  000069                     command@CRC:
  1555                           	opt stack 0
  1556  000069                     monta_sd@size:
  1557                           	opt stack 0
  1558  000069                     ___aldiv@sign:
  1559                           	opt stack 0
  1560  000069                     validate@id:
  1561                           	opt stack 0
  1562  000069                     utoa@val:
  1563                           	opt stack 0
  1564  000069                     memcpy@s:
  1565                           	opt stack 0
  1566                           
  1567                           ; 2 bytes @ 0x9
  1568  000069                     	ds	1
  1569  00006A                     command@CMD:
  1570                           	opt stack 0
  1571  00006A                     monta_sd@i:
  1572                           	opt stack 0
  1573  00006A                     atoi@sign:
  1574                           	opt stack 0
  1575  00006A                     make_dirfile@dirname:
  1576                           	opt stack 0
  1577  00006A                     ___aldiv@quotient:
  1578                           	opt stack 0
  1579                           
  1580                           ; 4 bytes @ 0xA
  1581  00006A                     	ds	1
  1582  00006B                     ??_validate:
  1583  00006B                     command@argument:
  1584                           	opt stack 0
  1585  00006B                     atoi@a:
  1586                           	opt stack 0
  1587  00006B                     utoa@base:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0xB
  1591  00006B                     	ds	1
  1592  00006C                     ??_make_dirfile:
  1593  00006C                     ?_clust2sect:
  1594                           	opt stack 0
  1595  00006C                     ___lldiv@counter:
  1596                           	opt stack 0
  1597  00006C                     sdc_reset@i:
  1598                           	opt stack 0
  1599  00006C                     sdc_disk_read@p_buff:
  1600                           	opt stack 0
  1601  00006C                     sdc_disk_write@p_buff:
  1602                           	opt stack 0
  1603  00006C                     clust2sect@clust:
  1604                           	opt stack 0
  1605                           
  1606                           ; 2 bytes @ 0xC
  1607  00006C                     	ds	1
  1608  00006D                     utoa@v:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0xD
  1612  00006D                     	ds	1
  1613  00006E                     sdc_reset@count_nosd:
  1614                           	opt stack 0
  1615  00006E                     _make_dirfile$2117:
  1616                           	opt stack 0
  1617  00006E                     sdc_disk_read@sector:
  1618                           	opt stack 0
  1619  00006E                     sdc_disk_write@sector:
  1620                           	opt stack 0
  1621  00006E                     configura_baudrate_uart@baudrate:
  1622                           	opt stack 0
  1623                           
  1624                           ; 4 bytes @ 0xE
  1625  00006E                     	ds	1
  1626  00006F                     utoa@c:
  1627                           	opt stack 0
  1628                           
  1629                           ; 1 bytes @ 0xF
  1630  00006F                     	ds	1
  1631  000070                     ??_clust2sect:
  1632  000070                     make_dirfile@b:
  1633                           	opt stack 0
  1634  000070                     sdc_reset@count:
  1635                           	opt stack 0
  1636  000070                     itoa@buf:
  1637                           	opt stack 0
  1638                           
  1639                           ; 2 bytes @ 0x10
  1640  000070                     	ds	1
  1641  000071                     make_dirfile@t:
  1642                           	opt stack 0
  1643                           
  1644                           ; 1 bytes @ 0x11
  1645  000071                     	ds	1
  1646  000072                     ??_configura_baudrate_uart:
  1647  000072                     sdc_reset@buff:
  1648                           	opt stack 0
  1649  000072                     sdc_disk_read@count:
  1650                           	opt stack 0
  1651  000072                     sdc_disk_write@count:
  1652                           	opt stack 0
  1653  000072                     make_dirfile@a:
  1654                           	opt stack 0
  1655  000072                     itoa@val:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x12
  1659  000072                     	ds	1
  1660  000073                     ??_sdc_disk_initialize:
  1661  000073                     ??_sdc_disk_read:
  1662  000073                     ??_sdc_disk_write:
  1663  000073                     make_dirfile@n:
  1664                           	opt stack 0
  1665                           
  1666                           ; 1 bytes @ 0x13
  1667  000073                     	ds	1
  1668  000074                     make_dirfile@c:
  1669                           	opt stack 0
  1670  000074                     sdc_disk_initialize@i:
  1671                           	opt stack 0
  1672  000074                     itoa@base:
  1673                           	opt stack 0
  1674                           
  1675                           ; 2 bytes @ 0x14
  1676  000074                     	ds	1
  1677  000075                     clust2sect@fs:
  1678                           	opt stack 0
  1679                           
  1680                           ; 2 bytes @ 0x15
  1681  000075                     	ds	1
  1682  000076                     sdc_disk_initialize@stat:
  1683                           	opt stack 0
  1684  000076                     itoa@cp:
  1685                           	opt stack 0
  1686                           
  1687                           ; 2 bytes @ 0x16
  1688  000076                     	ds	1
  1689  000077                     sdc_disk_read@ptr:
  1690                           	opt stack 0
  1691  000077                     sdc_disk_initialize@count1:
  1692                           	opt stack 0
  1693  000077                     sdc_disk_write@i:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x17
  1697  000077                     	ds	1
  1698  000078                     escreve_inteiro_lcd@valor:
  1699                           	opt stack 0
  1700  000078                     sdc_disk_read@start_add:
  1701                           	opt stack 0
  1702                           
  1703                           ; 4 bytes @ 0x18
  1704  000078                     	ds	1
  1705  000079                     sdc_disk_initialize@crc_number:
  1706                           	opt stack 0
  1707  000079                     sdc_disk_write@count1:
  1708                           	opt stack 0
  1709  000079                     mensagem_inicial@msg_dois:
  1710                           	opt stack 0
  1711                           
  1712                           ; 17 bytes @ 0x19
  1713  000079                     	ds	1
  1714  00007A                     configura_baudrate_uart@x:
  1715                           	opt stack 0
  1716  00007A                     escreve_inteiro_lcd@texto:
  1717                           	opt stack 0
  1718                           
  1719                           ; 7 bytes @ 0x1A
  1720  00007A                     	ds	1
  1721  00007B                     sdc_disk_initialize@buff_i:
  1722                           	opt stack 0
  1723  00007B                     sdc_disk_write@res:
  1724                           	opt stack 0
  1725                           
  1726                           ; 1 bytes @ 0x1B
  1727  00007B                     	ds	1
  1728  00007C                     sdc_disk_initialize@ocr:
  1729                           	opt stack 0
  1730  00007C                     sdc_disk_read@length:
  1731                           	opt stack 0
  1732  00007C                     sdc_disk_write@j:
  1733                           	opt stack 0
  1734                           
  1735                           ; 2 bytes @ 0x1C
  1736  00007C                     	ds	1
  1737  00007D                     sdc_disk_initialize@count2:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x1D
  1741  00007D                     	ds	1
  1742  00007E                     sdc_disk_read@buff:
  1743                           	opt stack 0
  1744  00007E                     sdc_disk_write@buff:
  1745                           	opt stack 0
  1746                           
  1747                           ; 1 bytes @ 0x1E
  1748  00007E                     	ds	1
  1749  00007F                     sdc_disk_initialize@buff:
  1750                           	opt stack 0
  1751  00007F                     disk_read@buff:
  1752                           	opt stack 0
  1753  00007F                     disk_write@buff:
  1754                           	opt stack 0
  1755                           
  1756                           ; 2 bytes @ 0x1F
  1757  00007F                     	ds	1
  1758  000080                     disk_initialize@pdrv:
  1759                           	opt stack 0
  1760                           
  1761                           ; 1 bytes @ 0x20
  1762  000080                     	ds	1
  1763  000081                     ??_verifica_fence_externo:
  1764  000081                     disk_initialize@stat:
  1765                           	opt stack 0
  1766  000081                     disk_read@sector:
  1767                           	opt stack 0
  1768  000081                     disk_write@sector:
  1769                           	opt stack 0
  1770                           
  1771                           ; 4 bytes @ 0x21
  1772  000081                     	ds	4
  1773  000085                     disk_read@count:
  1774                           	opt stack 0
  1775  000085                     disk_write@count:
  1776                           	opt stack 0
  1777                           
  1778                           ; 1 bytes @ 0x25
  1779  000085                     	ds	1
  1780  000086                     ??_disk_read:
  1781  000086                     ??_disk_write:
  1782                           
  1783                           ; 1 bytes @ 0x26
  1784  000086                     	ds	1
  1785  000087                     disk_read@pdrv:
  1786                           	opt stack 0
  1787  000087                     disk_write@pdrv:
  1788                           	opt stack 0
  1789                           
  1790                           ; 1 bytes @ 0x27
  1791  000087                     	ds	1
  1792  000088                     disk_read@result:
  1793                           	opt stack 0
  1794  000088                     disk_write@result:
  1795                           	opt stack 0
  1796                           
  1797                           ; 2 bytes @ 0x28
  1798  000088                     	ds	2
  1799  00008A                     disk_read@res:
  1800                           	opt stack 0
  1801  00008A                     disk_write@res:
  1802                           	opt stack 0
  1803  00008A                     get_fattime@f_time:
  1804                           	opt stack 0
  1805                           
  1806                           ; 9 bytes @ 0x2A
  1807  00008A                     	ds	1
  1808  00008B                     move_window@sector:
  1809                           	opt stack 0
  1810  00008B                     check_fs@sect:
  1811                           	opt stack 0
  1812                           
  1813                           ; 4 bytes @ 0x2B
  1814  00008B                     	ds	4
  1815  00008F                     ??_move_window:
  1816  00008F                     
  1817                           ; 1 bytes @ 0x2F
  1818  00008F                     	ds	2
  1819  000091                     check_fs@fs:
  1820                           	opt stack 0
  1821                           
  1822                           ; 2 bytes @ 0x31
  1823  000091                     	ds	2
  1824  000093                     auto_mount@path:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x33
  1828  000093                     	ds	2
  1829  000095                     auto_mount@chk_wp:
  1830                           	opt stack 0
  1831                           
  1832                           ; 1 bytes @ 0x35
  1833  000095                     	ds	1
  1834  000096                     ??_auto_mount:
  1835                           
  1836                           ; 1 bytes @ 0x36
  1837  000096                     	ds	3
  1838  000099                     move_window@n:
  1839                           	opt stack 0
  1840                           
  1841                           ; 1 bytes @ 0x39
  1842  000099                     	ds	1
  1843  00009A                     move_window@wsect:
  1844                           	opt stack 0
  1845                           
  1846                           ; 4 bytes @ 0x3A
  1847  00009A                     	ds	4
  1848  00009E                     move_window@fs:
  1849                           	opt stack 0
  1850                           
  1851                           ; 2 bytes @ 0x3E
  1852  00009E                     	ds	2
  1853  0000A0                     ?_get_cluster:
  1854                           	opt stack 0
  1855  0000A0                     sync@fs:
  1856                           	opt stack 0
  1857  0000A0                     get_cluster@clust:
  1858                           	opt stack 0
  1859  0000A0                     put_cluster@clust:
  1860                           	opt stack 0
  1861                           
  1862                           ; 2 bytes @ 0x40
  1863  0000A0                     	ds	2
  1864  0000A2                     ??_get_cluster:
  1865  0000A2                     put_cluster@val:
  1866                           	opt stack 0
  1867  0000A2                     f_sync@fp:
  1868                           	opt stack 0
  1869                           
  1870                           ; 2 bytes @ 0x42
  1871  0000A2                     	ds	2
  1872  0000A4                     ??_put_cluster:
  1873  0000A4                     f_sync@tim:
  1874                           	opt stack 0
  1875                           
  1876                           ; 4 bytes @ 0x44
  1877  0000A4                     	ds	1
  1878  0000A5                     auto_mount@maxclust:
  1879                           	opt stack 0
  1880                           
  1881                           ; 4 bytes @ 0x45
  1882  0000A5                     	ds	3
  1883  0000A8                     f_sync@res:
  1884                           	opt stack 0
  1885  0000A8                     _put_cluster$2007:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x48
  1889  0000A8                     	ds	1
  1890  0000A9                     get_cluster@wc:
  1891                           	opt stack 0
  1892  0000A9                     f_sync@dir:
  1893                           	opt stack 0
  1894  0000A9                     auto_mount@bootsect:
  1895                           	opt stack 0
  1896                           
  1897                           ; 4 bytes @ 0x49
  1898  0000A9                     	ds	1
  1899  0000AA                     _put_cluster$2008:
  1900                           	opt stack 0
  1901                           
  1902                           ; 2 bytes @ 0x4A
  1903  0000AA                     	ds	1
  1904  0000AB                     f_close@fp:
  1905                           	opt stack 0
  1906  0000AB                     get_cluster@fatsect:
  1907                           	opt stack 0
  1908                           
  1909                           ; 4 bytes @ 0x4B
  1910  0000AB                     	ds	1
  1911  0000AC                     put_cluster@fatsect:
  1912                           	opt stack 0
  1913                           
  1914                           ; 4 bytes @ 0x4C
  1915  0000AC                     	ds	1
  1916  0000AD                     f_close@res:
  1917                           	opt stack 0
  1918  0000AD                     auto_mount@totalsect:
  1919                           	opt stack 0
  1920                           
  1921                           ; 4 bytes @ 0x4D
  1922  0000AD                     	ds	2
  1923  0000AF                     get_cluster@bc:
  1924                           	opt stack 0
  1925                           
  1926                           ; 2 bytes @ 0x4F
  1927  0000AF                     	ds	1
  1928  0000B0                     put_cluster@bc:
  1929                           	opt stack 0
  1930                           
  1931                           ; 2 bytes @ 0x50
  1932  0000B0                     	ds	1
  1933  0000B1                     get_cluster@fs:
  1934                           	opt stack 0
  1935  0000B1                     auto_mount@p:
  1936                           	opt stack 0
  1937                           
  1938                           ; 2 bytes @ 0x51
  1939  0000B1                     	ds	1
  1940  0000B2                     put_cluster@p:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x52
  1944  0000B2                     	ds	1
  1945  0000B3                     auto_mount@fmt:
  1946                           	opt stack 0
  1947  0000B3                     next_dir_entry@dj:
  1948                           	opt stack 0
  1949                           
  1950                           ; 2 bytes @ 0x53
  1951  0000B3                     	ds	1
  1952  0000B4                     auto_mount@stat:
  1953                           	opt stack 0
  1954  0000B4                     put_cluster@fs:
  1955                           	opt stack 0
  1956                           
  1957                           ; 2 bytes @ 0x54
  1958  0000B4                     	ds	1
  1959  0000B5                     ??_next_dir_entry:
  1960  0000B5                     auto_mount@fatsize:
  1961                           	opt stack 0
  1962                           
  1963                           ; 4 bytes @ 0x55
  1964  0000B5                     	ds	1
  1965  0000B6                     ?_create_chain:
  1966                           	opt stack 0
  1967  0000B6                     remove_chain@clust:
  1968                           	opt stack 0
  1969  0000B6                     create_chain@clust:
  1970                           	opt stack 0
  1971                           
  1972                           ; 2 bytes @ 0x56
  1973  0000B6                     	ds	2
  1974  0000B8                     
  1975                           ; 1 bytes @ 0x58
  1976  0000B8                     	ds	1
  1977  0000B9                     auto_mount@fs:
  1978                           	opt stack 0
  1979                           
  1980                           ; 2 bytes @ 0x59
  1981  0000B9                     	ds	1
  1982  0000BA                     remove_chain@nxt:
  1983                           	opt stack 0
  1984  0000BA                     create_chain@mcl:
  1985                           	opt stack 0
  1986                           
  1987                           ; 2 bytes @ 0x5A
  1988  0000BA                     	ds	2
  1989  0000BC                     remove_chain@fs:
  1990                           	opt stack 0
  1991  0000BC                     create_chain@fs:
  1992                           	opt stack 0
  1993  0000BC                     next_dir_entry@clust:
  1994                           	opt stack 0
  1995                           
  1996                           ; 2 bytes @ 0x5C
  1997  0000BC                     	ds	2
  1998  0000BE                     create_chain@cstat:
  1999                           	opt stack 0
  2000  0000BE                     next_dir_entry@idx:
  2001                           	opt stack 0
  2002                           
  2003                           ; 2 bytes @ 0x5E
  2004  0000BE                     	ds	2
  2005  0000C0                     create_chain@scl:
  2006                           	opt stack 0
  2007  0000C0                     trace_path@dj:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x60
  2011  0000C0                     	ds	2
  2012  0000C2                     create_chain@ncl:
  2013                           	opt stack 0
  2014  0000C2                     trace_path@fn:
  2015                           	opt stack 0
  2016                           
  2017                           ; 2 bytes @ 0x62
  2018  0000C2                     	ds	2
  2019  0000C4                     trace_path@path:
  2020                           	opt stack 0
  2021  0000C4                     reserve_direntry@dj:
  2022                           	opt stack 0
  2023  0000C4                     f_write@fp:
  2024                           	opt stack 0
  2025  0000C4                     f_lseek@fp:
  2026                           	opt stack 0
  2027                           
  2028                           ; 2 bytes @ 0x64
  2029  0000C4                     	ds	2
  2030  0000C6                     trace_path@dir:
  2031                           	opt stack 0
  2032  0000C6                     reserve_direntry@dir:
  2033                           	opt stack 0
  2034  0000C6                     f_write@buff:
  2035                           	opt stack 0
  2036  0000C6                     f_lseek@ofs:
  2037                           	opt stack 0
  2038                           
  2039                           ; 4 bytes @ 0x66
  2040  0000C6                     	ds	2
  2041  0000C8                     ??_trace_path:
  2042  0000C8                     ??_reserve_direntry:
  2043  0000C8                     f_write@btw:
  2044                           	opt stack 0
  2045                           
  2046                           ; 2 bytes @ 0x68
  2047  0000C8                     	ds	2
  2048  0000CA                     ??_f_lseek:
  2049  0000CA                     f_write@bw:
  2050                           	opt stack 0
  2051  0000CA                     reserve_direntry@sector:
  2052                           	opt stack 0
  2053                           
  2054                           ; 4 bytes @ 0x6A
  2055  0000CA                     	ds	2
  2056  0000CC                     ??_f_write:
  2057  0000CC                     _trace_path$2164:
  2058                           	opt stack 0
  2059                           
  2060                           ; 2 bytes @ 0x6C
  2061  0000CC                     	ds	2
  2062  0000CE                     reserve_direntry@n:
  2063                           	opt stack 0
  2064  0000CE                     _trace_path$2166:
  2065                           	opt stack 0
  2066                           
  2067                           ; 2 bytes @ 0x6E
  2068  0000CE                     	ds	1
  2069  0000CF                     reserve_direntry@dptr:
  2070                           	opt stack 0
  2071                           
  2072                           ; 2 bytes @ 0x6F
  2073  0000CF                     	ds	1
  2074  0000D0                     trace_path@fs:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x70
  2078  0000D0                     	ds	1
  2079  0000D1                     reserve_direntry@c:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0x71
  2083  0000D1                     	ds	1
  2084  0000D2                     trace_path@clust:
  2085                           	opt stack 0
  2086  0000D2                     reserve_direntry@clust:
  2087                           	opt stack 0
  2088                           
  2089                           ; 2 bytes @ 0x72
  2090  0000D2                     	ds	2
  2091  0000D4                     trace_path@ds:
  2092                           	opt stack 0
  2093  0000D4                     reserve_direntry@fs:
  2094                           	opt stack 0
  2095                           
  2096                           ; 2 bytes @ 0x74
  2097  0000D4                     	ds	1
  2098  0000D5                     trace_path@dptr:
  2099                           	opt stack 0
  2100                           
  2101                           ; 2 bytes @ 0x75
  2102  0000D5                     	ds	1
  2103  0000D6                     f_lseek@res:
  2104                           	opt stack 0
  2105                           
  2106                           ; 1 bytes @ 0x76
  2107  0000D6                     	ds	1
  2108  0000D7                     f_open@fp:
  2109                           	opt stack 0
  2110  0000D7                     f_lseek@ifptr:
  2111                           	opt stack 0
  2112                           
  2113                           ; 4 bytes @ 0x77
  2114  0000D7                     	ds	1
  2115  0000D8                     f_write@res:
  2116                           	opt stack 0
  2117                           
  2118                           ; 1 bytes @ 0x78
  2119  0000D8                     	ds	1
  2120  0000D9                     f_open@path:
  2121                           	opt stack 0
  2122  0000D9                     f_write@wbuff:
  2123                           	opt stack 0
  2124                           
  2125                           ; 2 bytes @ 0x79
  2126  0000D9                     	ds	2
  2127  0000DB                     f_open@mode:
  2128                           	opt stack 0
  2129  0000DB                     f_write@sect:
  2130                           	opt stack 0
  2131  0000DB                     f_lseek@csize:
  2132                           	opt stack 0
  2133                           
  2134                           ; 4 bytes @ 0x7B
  2135  0000DB                     	ds	1
  2136  0000DC                     ??_f_open:
  2137                           
  2138                           ; 1 bytes @ 0x7C
  2139  0000DC                     	ds	3
  2140  0000DF                     f_write@cc:
  2141                           	opt stack 0
  2142  0000DF                     f_lseek@clust:
  2143                           	opt stack 0
  2144                           
  2145                           ; 2 bytes @ 0x7F
  2146  0000DF                     	ds	2
  2147  0000E1                     f_write@clust:
  2148                           	opt stack 0
  2149                           
  2150                           ; 2 bytes @ 0x81
  2151  0000E1                     	ds	2
  2152  0000E3                     f_write@wcnt:
  2153                           	opt stack 0
  2154                           
  2155                           ; 2 bytes @ 0x83
  2156  0000E3                     	ds	2
  2157  0000E5                     ?_fputc:
  2158                           	opt stack 0
  2159  0000E5                     fputc@chr:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x85
  2163  0000E5                     	ds	2
  2164  0000E7                     fputc@fil:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x87
  2168  0000E7                     	ds	2
  2169  0000E9                     fputc@c:
  2170                           	opt stack 0
  2171                           
  2172                           ; 1 bytes @ 0x89
  2173  0000E9                     	ds	1
  2174  0000EA                     fputc@bw:
  2175                           	opt stack 0
  2176                           
  2177                           ; 2 bytes @ 0x8A
  2178  0000EA                     	ds	2
  2179  0000EC                     ?_fputs:
  2180                           	opt stack 0
  2181  0000EC                     fputs@str:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0x8C
  2185  0000EC                     	ds	2
  2186  0000EE                     fputs@fil:
  2187                           	opt stack 0
  2188                           
  2189                           ; 2 bytes @ 0x8E
  2190  0000EE                     	ds	2
  2191  0000F0                     ??_fputs:
  2192                           
  2193                           ; 1 bytes @ 0x90
  2194  0000F0                     	ds	1
  2195  0000F1                     fputs@n:
  2196                           	opt stack 0
  2197                           
  2198                           ; 2 bytes @ 0x91
  2199  0000F1                     	ds	2
  2200  0000F3                     escalonador@cont:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x93
  2204  0000F3                     	ds	1
  2205  0000F4                     tblptru	equ	0xFF8
  2206                           tblptrh	equ	0xFF7
  2207                           tblptrl	equ	0xFF6
  2208                           tablat	equ	0xFF5
  2209                           postinc0	equ	0xFEE
  2210                           wreg	equ	0xFE8
  2211                           postdec1	equ	0xFE5
  2212                           fsr1h	equ	0xFE2
  2213                           fsr1l	equ	0xFE1
  2214                           
  2215                           ; 1 bytes @ 0x94
  2216                           
  2217                           	psect	cstackCOMRAM
  2218  000001                     __pcstackCOMRAM:
  2219                           	opt stack 0
  2220  000001                     ?_strcmp:
  2221                           	opt stack 0
  2222  000001                     stringcpy@str1:
  2223                           	opt stack 0
  2224  000001                     strcmp@s1:
  2225                           	opt stack 0
  2226  000001                     i2write_timer_zero@timer0:
  2227                           	opt stack 0
  2228                           
  2229                           ; 2 bytes @ 0x0
  2230  000001                     	ds	2
  2231  000003                     stringcpy@str2:
  2232                           	opt stack 0
  2233  000003                     strcmp@s2:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x2
  2237  000003                     	ds	2
  2238  000005                     ??_strcmp:
  2239  000005                     stringcpy@dir:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0x4
  2243  000005                     	ds	1
  2244  000006                     strcmp@r:
  2245                           	opt stack 0
  2246                           
  2247                           ; 1 bytes @ 0x5
  2248  000006                     	ds	1
  2249  000007                     ??_stringcpy:
  2250                           
  2251                           ; 1 bytes @ 0x6
  2252  000007                     	ds	2
  2253  000009                     stringcpy@chr:
  2254                           	opt stack 0
  2255                           
  2256                           ; 1 bytes @ 0x8
  2257  000009                     	ds	1
  2258  00000A                     ??_GPSRead:
  2259                           
  2260                           ; 1 bytes @ 0x9
  2261  00000A                     	ds	2
  2262  00000C                     GPSRead@buff:
  2263                           	opt stack 0
  2264                           
  2265                           ; 1 bytes @ 0xB
  2266  00000C                     	ds	1
  2267  00000D                     GPSRead@c:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0xC
  2271  00000D                     	ds	1
  2272  00000E                     ??_isr:
  2273                           
  2274                           ; 1 bytes @ 0xD
  2275  00000E                     	ds	20
  2276  000022                     isr@cont:
  2277                           	opt stack 0
  2278                           
  2279                           ; 1 bytes @ 0x21
  2280  000022                     	ds	1
  2281                           tblptru	equ	0xFF8
  2282                           tblptrh	equ	0xFF7
  2283                           tblptrl	equ	0xFF6
  2284                           tablat	equ	0xFF5
  2285                           postinc0	equ	0xFEE
  2286                           wreg	equ	0xFE8
  2287                           postdec1	equ	0xFE5
  2288                           fsr1h	equ	0xFE2
  2289                           fsr1l	equ	0xFE1
  2290                           
  2291 ;;
  2292 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2293 ;;
  2294 ;; *************** function _main *****************
  2295 ;; Defined at:
  2296 ;;		line 218 in file "main.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;		None
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;		None
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  1    wreg      void 
  2303 ;; Registers used:
  2304 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2310 ;;      Params:         0       0       0       0       0       0       0       0       0
  2311 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2312 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2313 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2314 ;;Total ram usage:        0 bytes
  2315 ;; Hardware stack levels required when called:   18
  2316 ;; This function calls:
  2317 ;;		_dados_gps_to_sd
  2318 ;;		_escalonador
  2319 ;;		_inicializa_tarefas
  2320 ;;		_inicializa_uart
  2321 ;;		_init_hardware
  2322 ;;		_init_lcd
  2323 ;;		_mensagem_inicial
  2324 ;; This function is called by:
  2325 ;;		Startup code after reset
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text0
  2330  00563C                     __ptext0:
  2331                           	opt stack 0
  2332  00563C                     _main:
  2333                           	opt stack 13
  2334                           
  2335                           ;main.c: 220: init_hardware();
  2336                           
  2337                           ;incstack = 0
  2338  00563C  ECE5  F02B         	call	_init_hardware	;wreg free
  2339                           
  2340                           ;main.c: 221: T0CONbits.TMR0ON = 0;
  2341  005640  9ED5               	bcf	4053,7,c	;volatile
  2342                           
  2343                           ;main.c: 222: init_lcd();
  2344  005642  EC3F  F024         	call	_init_lcd	;wreg free
  2345                           
  2346                           ;main.c: 223: mensagem_inicial();
  2347  005646  EC38  F026         	call	_mensagem_inicial	;wreg free
  2348                           
  2349                           ;main.c: 224: inicializa_tarefas();
  2350  00564A  ECB2  F027         	call	_inicializa_tarefas	;wreg free
  2351                           
  2352                           ;main.c: 225: inicializa_uart();
  2353  00564E  EC8A  F02B         	call	_inicializa_uart	;wreg free
  2354                           
  2355                           ;main.c: 226: T0CONbits.TMR0ON = 1;
  2356  005652  8ED5               	bsf	4053,7,c	;volatile
  2357  005654                     
  2358                           ;main.c: 228: {
  2359                           ;main.c: 230: if ((sinaliza_int_timer == 1) && (4))
  2360  005654  0100               	movlb	0	; () banked
  2361  005656  05FF               	decf	_sinaliza_int_timer& (0+255),w,b
  2362  005658  A4D8               	btfss	status,2,c
  2363  00565A  D004               	goto	l122
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;main.c: 231: {
  2367                           ;main.c: 232: sinaliza_int_timer = 0;
  2368  00565C  0E00               	movlw	0
  2369  00565E  6FFF               	movwf	_sinaliza_int_timer& (0+255),b
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;main.c: 233: escalonador();
  2373  005660  EC49  F023         	call	_escalonador	;wreg free
  2374  005664                     l122:
  2375                           
  2376                           ;main.c: 234: }
  2377                           ;main.c: 235: dados_gps_to_sd();
  2378  005664  EC6B  F02A         	call	_dados_gps_to_sd	;wreg free
  2379  005668  D7F5               	goto	l121
  2380  00566A                     __end_of_main:
  2381                           	opt stack 0
  2382                           tblptru	equ	0xFF8
  2383                           tblptrh	equ	0xFF7
  2384                           tblptrl	equ	0xFF6
  2385                           tablat	equ	0xFF5
  2386                           postinc0	equ	0xFEE
  2387                           wreg	equ	0xFE8
  2388                           postdec1	equ	0xFE5
  2389                           fsr1h	equ	0xFE2
  2390                           fsr1l	equ	0xFE1
  2391                           status	equ	0xFD8
  2392                           
  2393 ;; *************** function _mensagem_inicial *****************
  2394 ;; Defined at:
  2395 ;;		line 245 in file "main.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  msg_dois       17   25[BANK0 ] const unsigned char [17]
  2400 ;;  msg_linha_um   17    8[BANK0 ] const unsigned char [17]
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  1    wreg      void 
  2403 ;; Registers used:
  2404 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2410 ;;      Params:         0       0       0       0       0       0       0       0       0
  2411 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2412 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2413 ;;      Totals:         0      36       0       0       0       0       0       0       0
  2414 ;;Total ram usage:       36 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    6
  2417 ;; This function calls:
  2418 ;;		_escreve_cmd_lcd
  2419 ;;		_escreve_frase_ram_lcd
  2420 ;;		_posicao_cursor_lcd
  2421 ;; This function is called by:
  2422 ;;		_main
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           	psect	text1
  2427  004C70                     __ptext1:
  2428                           	opt stack 0
  2429  004C70                     _mensagem_inicial:
  2430                           	opt stack 24
  2431                           
  2432                           ;main.c: 247: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  2433                           
  2434                           ;incstack = 0
  2435  004C70  0EFE               	movlw	low mensagem_inicial@F4365
  2436  004C72  6EF6               	movwf	tblptrl,c
  2437  004C74                     	if	1	;There is more than 1 active tblptr byte
  2438  004C74  0E60               	movlw	high mensagem_inicial@F4365
  2439  004C76  6EF7               	movwf	tblptrh,c
  2440  004C78                     	endif
  2441  004C78                     	if	0	;There are less than 3 active tblptr bytes
  2442  004C78                     	endif
  2443  004C78  EE20  F068         	lfsr	2,mensagem_inicial@msg_linha_um
  2444  004C7C  0E10               	movlw	16
  2445  004C7E                     u17200:
  2446  004C7E  0009               	tblrd		*+
  2447  004C80  CFF5 FFDE          	movff	tablat,postinc2
  2448  004C84  06E8               	decf	wreg,f,c
  2449  004C86  E2FB               	bc	u17200
  2450                           
  2451                           ;main.c: 248: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  2452  004C88  0EED               	movlw	low mensagem_inicial@F4367
  2453  004C8A  6EF6               	movwf	tblptrl,c
  2454  004C8C                     	if	1	;There is more than 1 active tblptr byte
  2455  004C8C  0E60               	movlw	high mensagem_inicial@F4367
  2456  004C8E  6EF7               	movwf	tblptrh,c
  2457  004C90                     	endif
  2458  004C90                     	if	0	;There are less than 3 active tblptr bytes
  2459  004C90                     	endif
  2460  004C90  EE20  F079         	lfsr	2,mensagem_inicial@msg_dois
  2461  004C94  0E10               	movlw	16
  2462  004C96                     u17210:
  2463  004C96  0009               	tblrd		*+
  2464  004C98  CFF5 FFDE          	movff	tablat,postinc2
  2465  004C9C  06E8               	decf	wreg,f,c
  2466  004C9E  E2FB               	bc	u17210
  2467                           
  2468                           ;main.c: 250: posicao_cursor_lcd(1,0);
  2469  004CA0  0E00               	movlw	0
  2470  004CA2  0100               	movlb	0	; () banked
  2471  004CA4  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2472  004CA6  0E01               	movlw	1
  2473  004CA8  ECFF  F026         	call	_posicao_cursor_lcd
  2474                           
  2475                           ;main.c: 251: escreve_frase_ram_lcd(msg_linha_um);
  2476  004CAC  0E68               	movlw	low mensagem_inicial@msg_linha_um
  2477  004CAE  0100               	movlb	0	; () banked
  2478  004CB0  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2479  004CB2  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2480  004CB4  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2481  004CB6  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  2482                           
  2483                           ;main.c: 253: posicao_cursor_lcd(2,0);
  2484  004CBA  0E00               	movlw	0
  2485  004CBC  0100               	movlb	0	; () banked
  2486  004CBE  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2487  004CC0  0E02               	movlw	2
  2488  004CC2  ECFF  F026         	call	_posicao_cursor_lcd
  2489                           
  2490                           ;main.c: 254: escreve_frase_ram_lcd(msg_dois);
  2491  004CC6  0E79               	movlw	low mensagem_inicial@msg_dois
  2492  004CC8  0100               	movlb	0	; () banked
  2493  004CCA  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2494  004CCC  0E00               	movlw	high mensagem_inicial@msg_dois
  2495  004CCE  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2496  004CD0  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  2497                           
  2498                           ;main.c: 255: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2499  004CD4  0E3D               	movlw	61
  2500  004CD6  0100               	movlb	0	; () banked
  2501  004CD8  6F67               	movwf	(??_mensagem_inicial+1)& (0+255),b
  2502  004CDA  0EE1               	movlw	225
  2503  004CDC  6F66               	movwf	??_mensagem_inicial& (0+255),b
  2504  004CDE  0E3F               	movlw	63
  2505  004CE0                     u17677:
  2506  004CE0  2EE8               	decfsz	wreg,f,c
  2507  004CE2  D7FE               	bra	u17677
  2508  004CE4  2F66               	decfsz	??_mensagem_inicial& (0+255),f,b
  2509  004CE6  D7FC               	bra	u17677
  2510  004CE8  2F67               	decfsz	(??_mensagem_inicial+1)& (0+255),f,b
  2511  004CEA  D7FA               	bra	u17677
  2512  004CEC  D000               	nop2	
  2513                           
  2514                           ;main.c: 256: escreve_cmd_lcd(0b00000001);
  2515  004CEE  0E01               	movlw	1
  2516  004CF0  EC8E  F024         	call	_escreve_cmd_lcd
  2517  004CF4  0012               	return		;funcret
  2518  004CF6                     __end_of_mensagem_inicial:
  2519                           	opt stack 0
  2520                           tblptru	equ	0xFF8
  2521                           tblptrh	equ	0xFF7
  2522                           tblptrl	equ	0xFF6
  2523                           tablat	equ	0xFF5
  2524                           postinc0	equ	0xFEE
  2525                           wreg	equ	0xFE8
  2526                           postdec1	equ	0xFE5
  2527                           fsr1h	equ	0xFE2
  2528                           fsr1l	equ	0xFE1
  2529                           postinc2	equ	0xFDE
  2530                           status	equ	0xFD8
  2531                           
  2532 ;; *************** function _init_lcd *****************
  2533 ;; Defined at:
  2534 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;		None
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;		None
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      void 
  2541 ;; Registers used:
  2542 ;;		wreg, status,2, status,0, cstack
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2548 ;;      Params:         0       0       0       0       0       0       0       0       0
  2549 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2550 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2551 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2552 ;;Total ram usage:        1 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    5
  2555 ;; This function calls:
  2556 ;;		_delay
  2557 ;;		_escreve_cmd_lcd
  2558 ;; This function is called by:
  2559 ;;		_main
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text2
  2564  00487E                     __ptext2:
  2565                           	opt stack 0
  2566  00487E                     _init_lcd:
  2567                           	opt stack 25
  2568                           
  2569                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2570                           
  2571                           ;incstack = 0
  2572  00487E  9495               	bcf	3989,2,c	;volatile
  2573                           
  2574                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2575  004880  9295               	bcf	3989,1,c	;volatile
  2576                           
  2577                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2578  004882  9095               	bcf	3989,0,c	;volatile
  2579                           
  2580                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2581  004884  9895               	bcf	3989,4,c	;volatile
  2582                           
  2583                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2584  004886  9A95               	bcf	3989,5,c	;volatile
  2585                           
  2586                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2587  004888  9C95               	bcf	3989,6,c	;volatile
  2588                           
  2589                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2590  00488A  9E95               	bcf	3989,7,c	;volatile
  2591                           
  2592                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2593  00488C  9483               	bcf	3971,2,c	;volatile
  2594                           
  2595                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2596  00488E  9283               	bcf	3971,1,c	;volatile
  2597                           
  2598                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2599  004890  9083               	bcf	3971,0,c	;volatile
  2600                           
  2601                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2602  004892  9E83               	bcf	3971,7,c	;volatile
  2603                           
  2604                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2605  004894  9C83               	bcf	3971,6,c	;volatile
  2606                           
  2607                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2608  004896  8A83               	bsf	3971,5,c	;volatile
  2609                           
  2610                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2611  004898  8883               	bsf	3971,4,c	;volatile
  2612                           
  2613                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2614  00489A  0EEA               	movlw	234
  2615  00489C  0100               	movlb	0	; () banked
  2616  00489E  6F63               	movwf	??_init_lcd& (0+255),b
  2617  0048A0  0EC3               	movlw	195
  2618  0048A2                     u17687:
  2619  0048A2  2EE8               	decfsz	wreg,f,c
  2620  0048A4  D7FE               	bra	u17687
  2621  0048A6  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2622  0048A8  D7FC               	bra	u17687
  2623                           
  2624                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2625  0048AA  8083               	bsf	3971,0,c	;volatile
  2626                           
  2627                           ;display_lcd.c: 108: delay();
  2628  0048AC  EC61  F02B         	call	_delay	;wreg free
  2629                           
  2630                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2631  0048B0  9083               	bcf	3971,0,c	;volatile
  2632                           
  2633                           ;display_lcd.c: 110: delay();
  2634  0048B2  EC61  F02B         	call	_delay	;wreg free
  2635                           
  2636                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2637  0048B6  0E4E               	movlw	78
  2638  0048B8  0100               	movlb	0	; () banked
  2639  0048BA  6F63               	movwf	??_init_lcd& (0+255),b
  2640  0048BC  0EEB               	movlw	235
  2641  0048BE                     u17697:
  2642  0048BE  2EE8               	decfsz	wreg,f,c
  2643  0048C0  D7FE               	bra	u17697
  2644  0048C2  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2645  0048C4  D7FC               	bra	u17697
  2646                           
  2647                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2648  0048C6  8083               	bsf	3971,0,c	;volatile
  2649                           
  2650                           ;display_lcd.c: 119: delay();
  2651  0048C8  EC61  F02B         	call	_delay	;wreg free
  2652                           
  2653                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2654  0048CC  9083               	bcf	3971,0,c	;volatile
  2655                           
  2656                           ;display_lcd.c: 121: delay();
  2657  0048CE  EC61  F02B         	call	_delay	;wreg free
  2658                           
  2659                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2660  0048D2  0E4E               	movlw	78
  2661  0048D4  0100               	movlb	0	; () banked
  2662  0048D6  6F63               	movwf	??_init_lcd& (0+255),b
  2663  0048D8  0EEB               	movlw	235
  2664  0048DA                     u17707:
  2665  0048DA  2EE8               	decfsz	wreg,f,c
  2666  0048DC  D7FE               	bra	u17707
  2667  0048DE  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2668  0048E0  D7FC               	bra	u17707
  2669                           
  2670                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2671  0048E2  8083               	bsf	3971,0,c	;volatile
  2672                           
  2673                           ;display_lcd.c: 130: delay();
  2674  0048E4  EC61  F02B         	call	_delay	;wreg free
  2675                           
  2676                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2677  0048E8  9083               	bcf	3971,0,c	;volatile
  2678                           
  2679                           ;display_lcd.c: 132: delay();
  2680  0048EA  EC61  F02B         	call	_delay	;wreg free
  2681                           
  2682                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2683  0048EE  9E83               	bcf	3971,7,c	;volatile
  2684                           
  2685                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2686  0048F0  9C83               	bcf	3971,6,c	;volatile
  2687                           
  2688                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2689  0048F2  8A83               	bsf	3971,5,c	;volatile
  2690                           
  2691                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2692  0048F4  9883               	bcf	3971,4,c	;volatile
  2693                           
  2694                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2695  0048F6  8083               	bsf	3971,0,c	;volatile
  2696                           
  2697                           ;display_lcd.c: 143: delay();
  2698  0048F8  EC61  F02B         	call	_delay	;wreg free
  2699                           
  2700                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2701  0048FC  9083               	bcf	3971,0,c	;volatile
  2702                           
  2703                           ;display_lcd.c: 145: delay();
  2704  0048FE  EC61  F02B         	call	_delay	;wreg free
  2705                           
  2706                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2707  004902  0E28               	movlw	40
  2708  004904  EC8E  F024         	call	_escreve_cmd_lcd
  2709                           
  2710                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2711  004908  0E06               	movlw	6
  2712  00490A  EC8E  F024         	call	_escreve_cmd_lcd
  2713                           
  2714                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2715  00490E  0E0E               	movlw	14
  2716  004910  EC8E  F024         	call	_escreve_cmd_lcd
  2717                           
  2718                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2719  004914  0E01               	movlw	1
  2720  004916  EC8E  F024         	call	_escreve_cmd_lcd
  2721  00491A  0012               	return		;funcret
  2722  00491C                     __end_of_init_lcd:
  2723                           	opt stack 0
  2724                           tblptru	equ	0xFF8
  2725                           tblptrh	equ	0xFF7
  2726                           tblptrl	equ	0xFF6
  2727                           tablat	equ	0xFF5
  2728                           postinc0	equ	0xFEE
  2729                           wreg	equ	0xFE8
  2730                           postdec1	equ	0xFE5
  2731                           fsr1h	equ	0xFE2
  2732                           fsr1l	equ	0xFE1
  2733                           postinc2	equ	0xFDE
  2734                           status	equ	0xFD8
  2735                           
  2736 ;; *************** function _init_hardware *****************
  2737 ;; Defined at:
  2738 ;;		line 55 in file "bibliotecas/hardware.c"
  2739 ;; Parameters:    Size  Location     Type
  2740 ;;		None
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;		None
  2743 ;; Return value:  Size  Location     Type
  2744 ;;                  1    wreg      void 
  2745 ;; Registers used:
  2746 ;;		wreg, status,2, cstack
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2752 ;;      Params:         0       0       0       0       0       0       0       0       0
  2753 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2754 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2755 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2756 ;;Total ram usage:        0 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    5
  2759 ;; This function calls:
  2760 ;;		_config_timer_dois
  2761 ;;		_config_timer_zero
  2762 ;;		_init_interrupt
  2763 ;;		_init_oscilador
  2764 ;;		_init_ports
  2765 ;; This function is called by:
  2766 ;;		_main
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text3
  2771  0057CA                     __ptext3:
  2772                           	opt stack 0
  2773  0057CA                     _init_hardware:
  2774                           	opt stack 25
  2775                           
  2776                           ;hardware.c: 58: init_oscilador();
  2777                           
  2778                           ;incstack = 0
  2779  0057CA  EC54  F02C         	call	_init_oscilador	;wreg free
  2780                           
  2781                           ;hardware.c: 61: init_ports();
  2782  0057CE  ECBD  F02B         	call	_init_ports	;wreg free
  2783                           
  2784                           ;hardware.c: 64: config_timer_zero();
  2785  0057D2  ECCB  F02B         	call	_config_timer_zero	;wreg free
  2786                           
  2787                           ;hardware.c: 67: config_timer_dois();
  2788  0057D6  EC17  F02C         	call	_config_timer_dois	;wreg free
  2789                           
  2790                           ;hardware.c: 70: init_interrupt();
  2791  0057DA  EC05  F02C         	call	_init_interrupt	;wreg free
  2792  0057DE  0012               	return		;funcret
  2793  0057E0                     __end_of_init_hardware:
  2794                           	opt stack 0
  2795                           tblptru	equ	0xFF8
  2796                           tblptrh	equ	0xFF7
  2797                           tblptrl	equ	0xFF6
  2798                           tablat	equ	0xFF5
  2799                           postinc0	equ	0xFEE
  2800                           wreg	equ	0xFE8
  2801                           postdec1	equ	0xFE5
  2802                           fsr1h	equ	0xFE2
  2803                           fsr1l	equ	0xFE1
  2804                           postinc2	equ	0xFDE
  2805                           status	equ	0xFD8
  2806                           
  2807 ;; *************** function _init_ports *****************
  2808 ;; Defined at:
  2809 ;;		line 155 in file "bibliotecas/hardware.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;		None
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;		None
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, status,2
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2823 ;;      Params:         0       0       0       0       0       0       0       0       0
  2824 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2825 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2826 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2827 ;;Total ram usage:        0 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    3
  2830 ;; This function calls:
  2831 ;;		Nothing
  2832 ;; This function is called by:
  2833 ;;		_init_hardware
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text4
  2838  00577A                     __ptext4:
  2839                           	opt stack 0
  2840  00577A                     _init_ports:
  2841                           	opt stack 26
  2842                           
  2843                           ;hardware.c: 157: ADCON1 = 0X0F;
  2844                           
  2845                           ;incstack = 0
  2846  00577A  0E0F               	movlw	15
  2847  00577C  6EC1               	movwf	4033,c	;volatile
  2848                           
  2849                           ;hardware.c: 158: TRISB = 0b00100001;
  2850  00577E  0E21               	movlw	33
  2851  005780  6E93               	movwf	3987,c	;volatile
  2852                           
  2853                           ;hardware.c: 159: LATB = 0xFF;
  2854  005782  688A               	setf	3978,c	;volatile
  2855                           
  2856                           ;hardware.c: 160: TRISD = 0x00;
  2857  005784  0E00               	movlw	0
  2858  005786  6E95               	movwf	3989,c	;volatile
  2859                           
  2860                           ;hardware.c: 161: TRISA = 0b00000111;
  2861  005788  0E07               	movlw	7
  2862  00578A  6E92               	movwf	3986,c	;volatile
  2863                           
  2864                           ;hardware.c: 162: TRISC = 0x01111111;
  2865  00578C  0E11               	movlw	17
  2866  00578E  6E94               	movwf	3988,c	;volatile
  2867                           
  2868                           ;hardware.c: 163: TRISE = 0b00000011;
  2869  005790  0E03               	movlw	3
  2870  005792  6E96               	movwf	3990,c	;volatile
  2871  005794  0012               	return		;funcret
  2872  005796                     __end_of_init_ports:
  2873                           	opt stack 0
  2874                           tblptru	equ	0xFF8
  2875                           tblptrh	equ	0xFF7
  2876                           tblptrl	equ	0xFF6
  2877                           tablat	equ	0xFF5
  2878                           postinc0	equ	0xFEE
  2879                           wreg	equ	0xFE8
  2880                           postdec1	equ	0xFE5
  2881                           fsr1h	equ	0xFE2
  2882                           fsr1l	equ	0xFE1
  2883                           postinc2	equ	0xFDE
  2884                           status	equ	0xFD8
  2885                           
  2886 ;; *************** function _init_oscilador *****************
  2887 ;; Defined at:
  2888 ;;		line 173 in file "bibliotecas/hardware.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;		None
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;		None
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		None
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2902 ;;      Params:         0       0       0       0       0       0       0       0       0
  2903 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2904 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2905 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2906 ;;Total ram usage:        0 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    3
  2909 ;; This function calls:
  2910 ;;		Nothing
  2911 ;; This function is called by:
  2912 ;;		_init_hardware
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           	psect	text5
  2917  0058A8                     __ptext5:
  2918                           	opt stack 0
  2919  0058A8                     _init_oscilador:
  2920                           	opt stack 26
  2921                           
  2922                           ;hardware.c: 176: OSCCONbits.IRCF0 = 1;
  2923                           
  2924                           ;incstack = 0
  2925  0058A8  88D3               	bsf	4051,4,c	;volatile
  2926                           
  2927                           ;hardware.c: 177: OSCCONbits.IRCF1 = 1;
  2928  0058AA  8AD3               	bsf	4051,5,c	;volatile
  2929                           
  2930                           ;hardware.c: 178: OSCCONbits.IRCF2 = 1;
  2931  0058AC  8CD3               	bsf	4051,6,c	;volatile
  2932  0058AE  0012               	return		;funcret
  2933  0058B0                     __end_of_init_oscilador:
  2934                           	opt stack 0
  2935                           tblptru	equ	0xFF8
  2936                           tblptrh	equ	0xFF7
  2937                           tblptrl	equ	0xFF6
  2938                           tablat	equ	0xFF5
  2939                           postinc0	equ	0xFEE
  2940                           wreg	equ	0xFE8
  2941                           postdec1	equ	0xFE5
  2942                           fsr1h	equ	0xFE2
  2943                           fsr1l	equ	0xFE1
  2944                           postinc2	equ	0xFDE
  2945                           status	equ	0xFD8
  2946                           
  2947 ;; *************** function _init_interrupt *****************
  2948 ;; Defined at:
  2949 ;;		line 98 in file "bibliotecas/hardware.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;		None
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, status,2
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2963 ;;      Params:         0       0       0       0       0       0       0       0       0
  2964 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2966 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2967 ;;Total ram usage:        0 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:    3
  2970 ;; This function calls:
  2971 ;;		Nothing
  2972 ;; This function is called by:
  2973 ;;		_init_hardware
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text6
  2978  00580A                     __ptext6:
  2979                           	opt stack 0
  2980  00580A                     _init_interrupt:
  2981                           	opt stack 26
  2982                           
  2983                           ;hardware.c: 100: INTCON = 0b10110000;
  2984                           
  2985                           ;incstack = 0
  2986  00580A  0EB0               	movlw	176
  2987  00580C  6EF2               	movwf	intcon,c	;volatile
  2988                           
  2989                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2990  00580E  0E00               	movlw	0
  2991  005810  6EF1               	movwf	intcon2,c	;volatile
  2992                           
  2993                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2994  005812  0E00               	movlw	0
  2995  005814  6EF0               	movwf	intcon3,c	;volatile
  2996                           
  2997                           ;hardware.c: 104: PIE1 = 0b00101000;
  2998  005816  0E28               	movlw	40
  2999  005818  6E9D               	movwf	3997,c	;volatile
  3000  00581A  0012               	return		;funcret
  3001  00581C                     __end_of_init_interrupt:
  3002                           	opt stack 0
  3003                           tblptru	equ	0xFF8
  3004                           tblptrh	equ	0xFF7
  3005                           tblptrl	equ	0xFF6
  3006                           tablat	equ	0xFF5
  3007                           intcon	equ	0xFF2
  3008                           intcon2	equ	0xFF1
  3009                           intcon3	equ	0xFF0
  3010                           postinc0	equ	0xFEE
  3011                           wreg	equ	0xFE8
  3012                           postdec1	equ	0xFE5
  3013                           fsr1h	equ	0xFE2
  3014                           fsr1l	equ	0xFE1
  3015                           postinc2	equ	0xFDE
  3016                           status	equ	0xFD8
  3017                           
  3018 ;; *************** function _config_timer_zero *****************
  3019 ;; Defined at:
  3020 ;;		line 83 in file "bibliotecas/hardware.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;		None
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;		None
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      void 
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3034 ;;      Params:         0       0       0       0       0       0       0       0       0
  3035 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3036 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3037 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3038 ;;Total ram usage:        0 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    4
  3041 ;; This function calls:
  3042 ;;		_write_timer_zero
  3043 ;; This function is called by:
  3044 ;;		_init_hardware
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           	psect	text7
  3049  005796                     __ptext7:
  3050                           	opt stack 0
  3051  005796                     _config_timer_zero:
  3052                           	opt stack 25
  3053                           
  3054                           ;hardware.c: 85: T0CON = 0b11000101;
  3055                           
  3056                           ;incstack = 0
  3057  005796  0EC5               	movlw	197
  3058  005798  6ED5               	movwf	4053,c	;volatile
  3059                           
  3060                           ;hardware.c: 86: SPPCON = 0b00000000;
  3061  00579A  0E00               	movlw	0
  3062  00579C  6E65               	movwf	3941,c	;volatile
  3063                           
  3064                           ;hardware.c: 87: SPPCFG = 0b00000000;
  3065  00579E  0E00               	movlw	0
  3066  0057A0  6E63               	movwf	3939,c	;volatile
  3067                           
  3068                           ;hardware.c: 88: write_timer_zero(0x45);
  3069  0057A2  0E00               	movlw	0
  3070  0057A4  0100               	movlb	0	; () banked
  3071  0057A6  6F61               	movwf	(write_timer_zero@timer0+1)& (0+255),b
  3072  0057A8  0E45               	movlw	69
  3073  0057AA  6F60               	movwf	write_timer_zero@timer0& (0+255),b
  3074  0057AC  EC4A  F02C         	call	_write_timer_zero	;wreg free
  3075  0057B0  0012               	return		;funcret
  3076  0057B2                     __end_of_config_timer_zero:
  3077                           	opt stack 0
  3078                           tblptru	equ	0xFF8
  3079                           tblptrh	equ	0xFF7
  3080                           tblptrl	equ	0xFF6
  3081                           tablat	equ	0xFF5
  3082                           intcon	equ	0xFF2
  3083                           intcon2	equ	0xFF1
  3084                           intcon3	equ	0xFF0
  3085                           postinc0	equ	0xFEE
  3086                           wreg	equ	0xFE8
  3087                           postdec1	equ	0xFE5
  3088                           fsr1h	equ	0xFE2
  3089                           fsr1l	equ	0xFE1
  3090                           postinc2	equ	0xFDE
  3091                           status	equ	0xFD8
  3092                           
  3093 ;; *************** function _write_timer_zero *****************
  3094 ;; Defined at:
  3095 ;;		line 138 in file "bibliotecas/hardware.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  timer0          2    0[BANK0 ] unsigned int 
  3098 ;; Auto vars:     Size  Location     Type
  3099 ;;		None
  3100 ;; Return value:  Size  Location     Type
  3101 ;;                  1    wreg      void 
  3102 ;; Registers used:
  3103 ;;		None
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3109 ;;      Params:         0       2       0       0       0       0       0       0       0
  3110 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3111 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3112 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3113 ;;Total ram usage:        2 bytes
  3114 ;; Hardware stack levels used:    1
  3115 ;; Hardware stack levels required when called:    3
  3116 ;; This function calls:
  3117 ;;		Nothing
  3118 ;; This function is called by:
  3119 ;;		_config_timer_zero
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           	psect	text8
  3124  005894                     __ptext8:
  3125                           	opt stack 0
  3126  005894                     _write_timer_zero:
  3127                           	opt stack 25
  3128                           
  3129                           ;hardware.c: 146: TMR0 = timer0;
  3130                           
  3131                           ;incstack = 0
  3132  005894  C060  FFD6         	movff	write_timer_zero@timer0,4054	;volatile
  3133  005898  C061  FFD7         	movff	write_timer_zero@timer0+1,4055	;volatile
  3134  00589C  0012               	return		;funcret
  3135  00589E                     __end_of_write_timer_zero:
  3136                           	opt stack 0
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           intcon	equ	0xFF2
  3142                           intcon2	equ	0xFF1
  3143                           intcon3	equ	0xFF0
  3144                           postinc0	equ	0xFEE
  3145                           wreg	equ	0xFE8
  3146                           postdec1	equ	0xFE5
  3147                           fsr1h	equ	0xFE2
  3148                           fsr1l	equ	0xFE1
  3149                           postinc2	equ	0xFDE
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function _config_timer_dois *****************
  3153 ;; Defined at:
  3154 ;;		line 202 in file "bibliotecas/hardware.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;		None
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;		None
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		wreg, status,2
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3168 ;;      Params:         0       0       0       0       0       0       0       0       0
  3169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3171 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3172 ;;Total ram usage:        0 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    3
  3175 ;; This function calls:
  3176 ;;		Nothing
  3177 ;; This function is called by:
  3178 ;;		_init_hardware
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text9
  3183  00582E                     __ptext9:
  3184                           	opt stack 0
  3185  00582E                     _config_timer_dois:
  3186                           	opt stack 26
  3187                           
  3188                           ;hardware.c: 204: T2CON = 0b00000100;
  3189                           
  3190                           ;incstack = 0
  3191  00582E  0E04               	movlw	4
  3192  005830  6ECA               	movwf	4042,c	;volatile
  3193                           
  3194                           ;hardware.c: 205: TMR2 = 0;
  3195  005832  0E00               	movlw	0
  3196  005834  6ECC               	movwf	4044,c	;volatile
  3197                           
  3198                           ;hardware.c: 206: PR2 = 0x01;
  3199  005836  0E01               	movlw	1
  3200  005838  6ECB               	movwf	4043,c	;volatile
  3201  00583A  0012               	return		;funcret
  3202  00583C                     __end_of_config_timer_dois:
  3203                           	opt stack 0
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           intcon	equ	0xFF2
  3209                           intcon2	equ	0xFF1
  3210                           intcon3	equ	0xFF0
  3211                           postinc0	equ	0xFEE
  3212                           wreg	equ	0xFE8
  3213                           postdec1	equ	0xFE5
  3214                           fsr1h	equ	0xFE2
  3215                           fsr1l	equ	0xFE1
  3216                           postinc2	equ	0xFDE
  3217                           status	equ	0xFD8
  3218                           
  3219 ;; *************** function _inicializa_tarefas *****************
  3220 ;; Defined at:
  3221 ;;		line 165 in file "main.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;		None
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;		None
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, status,2, status,0
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3235 ;;      Params:         0       0       0       0       0       0       0       0       0
  3236 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3237 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3238 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3239 ;;Total ram usage:        0 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    3
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_main
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           	psect	text10
  3250  004F64                     __ptext10:
  3251                           	opt stack 0
  3252  004F64                     _inicializa_tarefas:
  3253                           	opt stack 27
  3254                           
  3255                           ;main.c: 168: p_tarefas[0] = verifica_dados_operacionais;
  3256                           
  3257                           ;incstack = 0
  3258  004F64  0EB0               	movlw	low _verifica_dados_operacionais
  3259  004F66  0101               	movlb	1	; () banked
  3260  004F68  6F08               	movwf	_p_tarefas& (0+255),b
  3261  004F6A  0E58               	movlw	high _verifica_dados_operacionais
  3262  004F6C  6F09               	movwf	(_p_tarefas+1)& (0+255),b
  3263                           
  3264                           ;main.c: 169: p_tarefas[1] = disparo_gravacao;
  3265  004F6E  0EE0               	movlw	low _disparo_gravacao
  3266  004F70  6F0A               	movwf	(_p_tarefas+2)& (0+255),b
  3267  004F72  0E57               	movlw	high _disparo_gravacao
  3268  004F74  6F0B               	movwf	(_p_tarefas+3)& (0+255),b
  3269                           
  3270                           ;main.c: 170: p_tarefas[2] = verifica_fence_externo;
  3271  004F76  0E12               	movlw	low _verifica_fence_externo
  3272  004F78  6F0C               	movwf	(_p_tarefas+4)& (0+255),b
  3273  004F7A  0E00               	movlw	high _verifica_fence_externo
  3274  004F7C  6F0D               	movwf	(_p_tarefas+5)& (0+255),b
  3275                           
  3276                           ;main.c: 171: p_tarefas[3] = troca_de_tela;
  3277  004F7E  0E64               	movlw	low _troca_de_tela
  3278  004F80  6F0E               	movwf	(_p_tarefas+6)& (0+255),b
  3279  004F82  0E2E               	movlw	high _troca_de_tela
  3280  004F84  6F0F               	movwf	(_p_tarefas+7)& (0+255),b
  3281                           
  3282                           ; BSR set to: 1
  3283                           ;main.c: 175: tempo_backup[0] = 5000;
  3284  004F86  0E13               	movlw	19
  3285  004F88  6F01               	movwf	(_tempo_backup+1)& (0+255),b
  3286  004F8A  0E88               	movlw	136
  3287  004F8C  6F00               	movwf	_tempo_backup& (0+255),b
  3288                           
  3289                           ; BSR set to: 1
  3290                           ;main.c: 176: tempo_backup[1] = 1000;
  3291  004F8E  0E03               	movlw	3
  3292  004F90  6F03               	movwf	(_tempo_backup+3)& (0+255),b
  3293  004F92  0EE8               	movlw	232
  3294  004F94  6F02               	movwf	(_tempo_backup+2)& (0+255),b
  3295                           
  3296                           ; BSR set to: 1
  3297                           ;main.c: 177: tempo_backup[2] = 1000;
  3298  004F96  0E03               	movlw	3
  3299  004F98  6F05               	movwf	(_tempo_backup+5)& (0+255),b
  3300  004F9A  0EE8               	movlw	232
  3301  004F9C  6F04               	movwf	(_tempo_backup+4)& (0+255),b
  3302                           
  3303                           ; BSR set to: 1
  3304                           ;main.c: 178: tempo_backup[3] = 100;
  3305  004F9E  0E00               	movlw	0
  3306  004FA0  6F07               	movwf	(_tempo_backup+7)& (0+255),b
  3307  004FA2  0E64               	movlw	100
  3308  004FA4  6F06               	movwf	(_tempo_backup+6)& (0+255),b
  3309                           
  3310                           ; BSR set to: 1
  3311                           ;main.c: 181: tempo_tarefa[0] = 5000;
  3312  004FA6  0E13               	movlw	19
  3313  004FA8  6E24               	movwf	_tempo_tarefa+1,c
  3314  004FAA  0E88               	movlw	136
  3315  004FAC  6E23               	movwf	_tempo_tarefa,c
  3316                           
  3317                           ; BSR set to: 1
  3318                           ;main.c: 182: tempo_tarefa[1] = 1000;
  3319  004FAE  0E03               	movlw	3
  3320  004FB0  6E26               	movwf	_tempo_tarefa+3,c
  3321  004FB2  0EE8               	movlw	232
  3322  004FB4  6E25               	movwf	_tempo_tarefa+2,c
  3323                           
  3324                           ; BSR set to: 1
  3325                           ;main.c: 183: tempo_tarefa[2] = 1000;
  3326  004FB6  0E03               	movlw	3
  3327  004FB8  6E28               	movwf	_tempo_tarefa+5,c
  3328  004FBA  0EE8               	movlw	232
  3329  004FBC  6E27               	movwf	_tempo_tarefa+4,c
  3330                           
  3331                           ; BSR set to: 1
  3332                           ;main.c: 184: tempo_tarefa[3] = 1000;
  3333  004FBE  0E03               	movlw	3
  3334  004FC0  6E2A               	movwf	_tempo_tarefa+7,c
  3335  004FC2  0EE8               	movlw	232
  3336  004FC4  6E29               	movwf	_tempo_tarefa+6,c
  3337                           
  3338                           ; BSR set to: 1
  3339                           ;main.c: 186: tarefa_em_execucao = 0;
  3340  004FC6  0E00               	movlw	0
  3341  004FC8  6E41               	movwf	_tarefa_em_execucao,c	;volatile
  3342                           
  3343                           ; BSR set to: 1
  3344  004FCA  0012               	return		;funcret
  3345  004FCC                     __end_of_inicializa_tarefas:
  3346                           	opt stack 0
  3347                           tblptru	equ	0xFF8
  3348                           tblptrh	equ	0xFF7
  3349                           tblptrl	equ	0xFF6
  3350                           tablat	equ	0xFF5
  3351                           intcon	equ	0xFF2
  3352                           intcon2	equ	0xFF1
  3353                           intcon3	equ	0xFF0
  3354                           postinc0	equ	0xFEE
  3355                           wreg	equ	0xFE8
  3356                           postdec1	equ	0xFE5
  3357                           fsr1h	equ	0xFE2
  3358                           fsr1l	equ	0xFE1
  3359                           postinc2	equ	0xFDE
  3360                           status	equ	0xFD8
  3361                           
  3362 ;; *************** function _escalonador *****************
  3363 ;; Defined at:
  3364 ;;		line 197 in file "main.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;		None
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;  cont            1  147[BANK0 ] unsigned char 
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3378 ;;      Params:         0       0       0       0       0       0       0       0       0
  3379 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3380 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3381 ;;      Totals:         0       1       2       0       0       0       0       0       0
  3382 ;;Total ram usage:        3 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:   17
  3385 ;; This function calls:
  3386 ;;		_disparo_gravacao
  3387 ;;		_troca_de_tela
  3388 ;;		_verifica_dados_operacionais
  3389 ;;		_verifica_fence_externo
  3390 ;; This function is called by:
  3391 ;;		_main
  3392 ;; This function uses a non-reentrant model
  3393 ;;
  3394                           
  3395                           	psect	text11
  3396  004692                     __ptext11:
  3397                           	opt stack 0
  3398  004692                     _escalonador:
  3399                           	opt stack 13
  3400                           
  3401                           ;main.c: 199: unsigned char cont;
  3402                           ;main.c: 200: for(cont = 0; cont<4;cont++)
  3403                           
  3404                           ; BSR set to: 1
  3405                           ;incstack = 0
  3406  004692  0E00               	movlw	0
  3407  004694  0100               	movlb	0	; () banked
  3408  004696  6FF3               	movwf	escalonador@cont& (0+255),b
  3409  004698                     l12430:
  3410                           
  3411                           ; BSR set to: 0
  3412  004698  0E03               	movlw	3
  3413  00469A  65F3               	cpfsgt	escalonador@cont& (0+255),b
  3414  00469C  D001               	goto	l113
  3415  00469E  0012               	return	
  3416  0046A0                     l113:
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;main.c: 201: {
  3420                           ;main.c: 202: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3421                           
  3422                           ; BSR set to: 0
  3423  0046A0  51F3               	movf	escalonador@cont& (0+255),w,b
  3424  0046A2  0D02               	mullw	2
  3425  0046A4  0E08               	movlw	low _p_tarefas
  3426  0046A6  24F3               	addwf	prodl,w,c
  3427  0046A8  6ED9               	movwf	fsr2l,c
  3428  0046AA  0E01               	movlw	high _p_tarefas
  3429  0046AC  20F4               	addwfc	prodh,w,c
  3430  0046AE  6EDA               	movwf	fsr2h,c
  3431  0046B0  50DE               	movf	postinc2,w,c
  3432  0046B2  10DE               	iorwf	postinc2,w,c
  3433  0046B4  B4D8               	btfsc	status,2,c
  3434  0046B6  D03D               	goto	l115
  3435                           
  3436                           ; BSR set to: 0
  3437  0046B8  51F3               	movf	escalonador@cont& (0+255),w,b
  3438  0046BA  0D02               	mullw	2
  3439  0046BC  0E23               	movlw	low _tempo_tarefa
  3440  0046BE  24F3               	addwf	prodl,w,c
  3441  0046C0  6ED9               	movwf	fsr2l,c
  3442  0046C2  0E00               	movlw	high _tempo_tarefa
  3443  0046C4  20F4               	addwfc	prodh,w,c
  3444  0046C6  6EDA               	movwf	fsr2h,c
  3445  0046C8  50DE               	movf	postinc2,w,c
  3446  0046CA  10DE               	iorwf	postinc2,w,c
  3447  0046CC  A4D8               	btfss	status,2,c
  3448  0046CE  D031               	goto	l115
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;main.c: 203: {
  3452                           ;main.c: 204: tarefa_em_execucao = 1;
  3453  0046D0  0E01               	movlw	1
  3454  0046D2  6E41               	movwf	_tarefa_em_execucao,c	;volatile
  3455                           
  3456                           ;main.c: 205: timeout_tarefa = 60000;
  3457  0046D4  0EEA               	movlw	234
  3458  0046D6  6E36               	movwf	_timeout_tarefa+1,c
  3459  0046D8  0E60               	movlw	96
  3460  0046DA  6E35               	movwf	_timeout_tarefa,c
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;main.c: 206: p_tarefas[cont]();
  3464  0046DC  51F3               	movf	escalonador@cont& (0+255),w,b
  3465  0046DE  0D02               	mullw	2
  3466  0046E0  0E08               	movlw	low _p_tarefas
  3467  0046E2  24F3               	addwf	prodl,w,c
  3468  0046E4  6ED9               	movwf	fsr2l,c
  3469  0046E6  0E01               	movlw	high _p_tarefas
  3470  0046E8  20F4               	addwfc	prodh,w,c
  3471  0046EA  6EDA               	movwf	fsr2h,c
  3472  0046EC  D801               	call	u17188
  3473  0046EE  D00A               	goto	u17189
  3474  0046F0                     u17188:
  3475  0046F0  0005               	push	
  3476  0046F2  6EFA               	movwf	pclath,c
  3477  0046F4  50DE               	movf	postinc2,w,c
  3478  0046F6  6EFD               	movwf	tosl,c
  3479  0046F8  50DE               	movf	postinc2,w,c
  3480  0046FA  6EFE               	movwf	tosh,c
  3481  0046FC  50F8               	movf	tblptru,w,c
  3482  0046FE  6EFF               	movwf	tosu,c
  3483  004700  50FA               	movf	pclath,w,c
  3484  004702  0012               	return		;indir
  3485  004704                     u17189:
  3486                           
  3487                           ;main.c: 207: tarefa_em_execucao = 0;
  3488  004704  0E00               	movlw	0
  3489  004706  6E41               	movwf	_tarefa_em_execucao,c	;volatile
  3490                           
  3491                           ;main.c: 208: tempo_tarefa[cont] = tempo_backup[cont];
  3492  004708  0100               	movlb	0	; () banked
  3493  00470A  51F3               	movf	escalonador@cont& (0+255),w,b
  3494  00470C  0D02               	mullw	2
  3495  00470E  0E00               	movlw	low _tempo_backup
  3496  004710  24F3               	addwf	prodl,w,c
  3497  004712  6ED9               	movwf	fsr2l,c
  3498  004714  0E01               	movlw	high _tempo_backup
  3499  004716  20F4               	addwfc	prodh,w,c
  3500  004718  6EDA               	movwf	fsr2h,c
  3501  00471A  51F3               	movf	escalonador@cont& (0+255),w,b
  3502  00471C  0D02               	mullw	2
  3503  00471E  0E23               	movlw	low _tempo_tarefa
  3504  004720  24F3               	addwf	prodl,w,c
  3505  004722  6EE1               	movwf	fsr1l,c
  3506  004724  0E00               	movlw	high _tempo_tarefa
  3507  004726  20F4               	addwfc	prodh,w,c
  3508  004728  6EE2               	movwf	fsr1h,c
  3509  00472A  CFDE FFE6          	movff	postinc2,postinc1
  3510  00472E  CFDD FFE5          	movff	postdec2,postdec1
  3511  004732                     l115:
  3512                           
  3513                           ; BSR set to: 0
  3514                           
  3515                           ; BSR set to: 0
  3516  004732  2BF3               	incf	escalonador@cont& (0+255),f,b
  3517  004734  D7B1               	goto	l12430
  3518  004736                     __end_of_escalonador:
  3519                           	opt stack 0
  3520                           tosu	equ	0xFFF
  3521                           tosh	equ	0xFFE
  3522                           tosl	equ	0xFFD
  3523                           pclath	equ	0xFFA
  3524                           tblptru	equ	0xFF8
  3525                           tblptrh	equ	0xFF7
  3526                           tblptrl	equ	0xFF6
  3527                           tablat	equ	0xFF5
  3528                           prodh	equ	0xFF4
  3529                           prodl	equ	0xFF3
  3530                           intcon	equ	0xFF2
  3531                           intcon2	equ	0xFF1
  3532                           intcon3	equ	0xFF0
  3533                           postinc0	equ	0xFEE
  3534                           wreg	equ	0xFE8
  3535                           postinc1	equ	0xFE6
  3536                           postdec1	equ	0xFE5
  3537                           fsr1h	equ	0xFE2
  3538                           fsr1l	equ	0xFE1
  3539                           postinc2	equ	0xFDE
  3540                           postdec2	equ	0xFDD
  3541                           fsr2h	equ	0xFDA
  3542                           fsr2l	equ	0xFD9
  3543                           status	equ	0xFD8
  3544                           
  3545 ;; *************** function _troca_de_tela *****************
  3546 ;; Defined at:
  3547 ;;		line 610 in file "main.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;		None
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;		None
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      void 
  3554 ;; Registers used:
  3555 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3561 ;;      Params:         0       0       0       0       0       0       0       0       0
  3562 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3563 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3564 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3565 ;;Total ram usage:        0 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    6
  3568 ;; This function calls:
  3569 ;;		_Latitude
  3570 ;;		_Longitude
  3571 ;;		_escreve_cmd_lcd
  3572 ;;		_escreve_frase_ram_lcd
  3573 ;;		_posicao_cursor_lcd
  3574 ;; This function is called by:
  3575 ;;		_inicializa_tarefas
  3576 ;;		_escalonador
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           	psect	text12
  3581  002E64                     __ptext12:
  3582                           	opt stack 0
  3583  002E64                     _troca_de_tela:
  3584                           	opt stack 23
  3585                           
  3586                           ;main.c: 613: static unsigned char state = 0;
  3587                           ;main.c: 614: static unsigned char last_state = 0;;
  3588                           ;main.c: 618: if(!PORTEbits.RE0 && !flag[2].point || (state == 1 ))
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;incstack = 0
  3592  002E64  B084               	btfsc	3972,0,c	;volatile
  3593  002E66  D003               	goto	u16880
  3594  002E68  0100               	movlb	0	; () banked
  3595  002E6A  A1F6               	btfss	(_flag+2)& (0+255),0,b
  3596  002E6C  D003               	goto	u16890
  3597  002E6E                     u16880:
  3598                           
  3599                           ; BSR set to: 0
  3600  002E6E  0440               	decf	troca_de_tela@state,w,c
  3601  002E70  A4D8               	btfss	status,2,c
  3602  002E72  D02C               	goto	l251
  3603  002E74                     u16890:
  3604                           
  3605                           ;main.c: 619: {
  3606                           ;main.c: 621: if(!time_atualizacao)
  3607  002E74  5031               	movf	_time_atualizacao,w,c
  3608  002E76  1032               	iorwf	_time_atualizacao+1,w,c
  3609  002E78  A4D8               	btfss	status,2,c
  3610  002E7A  D004               	goto	l256
  3611                           
  3612                           ;main.c: 622: {
  3613                           ;main.c: 624: time_atualizacao = 10000;
  3614  002E7C  0E27               	movlw	39
  3615  002E7E  6E32               	movwf	_time_atualizacao+1,c
  3616  002E80  0E10               	movlw	16
  3617  002E82  6E31               	movwf	_time_atualizacao,c
  3618  002E84                     l256:
  3619                           
  3620                           ;main.c: 625: }
  3621                           ;main.c: 627: if(last_state != 1)
  3622  002E84  043F               	decf	troca_de_tela@last_state,w,c
  3623  002E86  B4D8               	btfsc	status,2,c
  3624  002E88  D01F               	goto	l257
  3625                           
  3626                           ;main.c: 628: {
  3627                           ;main.c: 629: state = 1;
  3628  002E8A  0E01               	movlw	1
  3629  002E8C  6E40               	movwf	troca_de_tela@state,c
  3630                           
  3631                           ;main.c: 630: escreve_cmd_lcd(0b00000001);
  3632  002E8E  0E01               	movlw	1
  3633  002E90  EC8E  F024         	call	_escreve_cmd_lcd
  3634                           
  3635                           ;main.c: 631: posicao_cursor_lcd(1,0);
  3636  002E94  0E00               	movlw	0
  3637  002E96  0100               	movlb	0	; () banked
  3638  002E98  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3639  002E9A  0E01               	movlw	1
  3640  002E9C  ECFF  F026         	call	_posicao_cursor_lcd
  3641                           
  3642                           ;main.c: 632: escreve_frase_ram_lcd("RPM:");
  3643  002EA0  0E6B               	movlw	low STR_2
  3644  002EA2  0100               	movlb	0	; () banked
  3645  002EA4  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3646  002EA6  0E62               	movlw	high STR_2
  3647  002EA8  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3648  002EAA  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3649                           
  3650                           ;main.c: 633: posicao_cursor_lcd(2,0);
  3651  002EAE  0E00               	movlw	0
  3652  002EB0  0100               	movlb	0	; () banked
  3653  002EB2  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3654  002EB4  0E02               	movlw	2
  3655  002EB6  ECFF  F026         	call	_posicao_cursor_lcd
  3656                           
  3657                           ;main.c: 634: escreve_frase_ram_lcd("VEL:");
  3658  002EBA  0E66               	movlw	low STR_3
  3659  002EBC  0100               	movlb	0	; () banked
  3660  002EBE  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3661  002EC0  0E62               	movlw	high STR_3
  3662  002EC2  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3663  002EC4  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3664  002EC8                     l257:
  3665                           
  3666                           ;main.c: 635: }
  3667                           ;main.c: 636: last_state = 1;
  3668  002EC8  0E01               	movlw	1
  3669  002ECA  6E3F               	movwf	troca_de_tela@last_state,c
  3670  002ECC                     l251:
  3671                           
  3672                           ;main.c: 638: }
  3673                           ;main.c: 641: if(!PORTEbits.RE1 && !flag[2].point || (state == 2))
  3674  002ECC  B284               	btfsc	3972,1,c	;volatile
  3675  002ECE  D003               	goto	u16930
  3676  002ED0  0100               	movlb	0	; () banked
  3677  002ED2  A1F6               	btfss	(_flag+2)& (0+255),0,b
  3678  002ED4  D004               	goto	u16940
  3679  002ED6                     u16930:
  3680                           
  3681                           ; BSR set to: 0
  3682  002ED6  0E02               	movlw	2
  3683  002ED8  1840               	xorwf	troca_de_tela@state,w,c
  3684  002EDA  A4D8               	btfss	status,2,c
  3685  002EDC  D075               	goto	l258
  3686  002EDE                     u16940:
  3687                           
  3688                           ;main.c: 642: {
  3689                           ;main.c: 643: if(!time_atualizacao)
  3690  002EDE  5031               	movf	_time_atualizacao,w,c
  3691  002EE0  1032               	iorwf	_time_atualizacao+1,w,c
  3692  002EE2  A4D8               	btfss	status,2,c
  3693  002EE4  D028               	goto	l263
  3694                           
  3695                           ;main.c: 644: {
  3696                           ;main.c: 645: point_buff_gps_lat = Latitude();
  3697  002EE6  EC32  F02C         	call	_Latitude	;wreg free
  3698  002EEA  C060  F0FD         	movff	?_Latitude,_point_buff_gps_lat
  3699  002EEE  C061  F0FE         	movff	?_Latitude+1,_point_buff_gps_lat+1
  3700                           
  3701                           ;main.c: 646: point_buff_gps_long = Longitude();
  3702  002EF2  EC2C  F02C         	call	_Longitude	;wreg free
  3703  002EF6  C060  F0FB         	movff	?_Longitude,_point_buff_gps_long
  3704  002EFA  C061  F0FC         	movff	?_Longitude+1,_point_buff_gps_long+1
  3705                           
  3706                           ;main.c: 647: posicao_cursor_lcd(1,4);
  3707  002EFE  0E04               	movlw	4
  3708  002F00  0100               	movlb	0	; () banked
  3709  002F02  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3710  002F04  0E01               	movlw	1
  3711  002F06  ECFF  F026         	call	_posicao_cursor_lcd
  3712                           
  3713                           ;main.c: 648: escreve_frase_ram_lcd(point_buff_gps_lat);
  3714  002F0A  C0FD  F063         	movff	_point_buff_gps_lat,escreve_frase_ram_lcd@buffer
  3715  002F0E  C0FE  F064         	movff	_point_buff_gps_lat+1,escreve_frase_ram_lcd@buffer+1
  3716  002F12  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3717                           
  3718                           ;main.c: 649: posicao_cursor_lcd(2,4);
  3719  002F16  0E04               	movlw	4
  3720  002F18  0100               	movlb	0	; () banked
  3721  002F1A  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3722  002F1C  0E02               	movlw	2
  3723  002F1E  ECFF  F026         	call	_posicao_cursor_lcd
  3724                           
  3725                           ;main.c: 650: escreve_frase_ram_lcd(point_buff_gps_long);
  3726  002F22  C0FB  F063         	movff	_point_buff_gps_long,escreve_frase_ram_lcd@buffer
  3727  002F26  C0FC  F064         	movff	_point_buff_gps_long+1,escreve_frase_ram_lcd@buffer+1
  3728  002F2A  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3729                           
  3730                           ;main.c: 651: time_atualizacao = 2000;
  3731  002F2E  0E07               	movlw	7
  3732  002F30  6E32               	movwf	_time_atualizacao+1,c
  3733  002F32  0ED0               	movlw	208
  3734  002F34  6E31               	movwf	_time_atualizacao,c
  3735  002F36                     l263:
  3736                           
  3737                           ;main.c: 652: }
  3738                           ;main.c: 655: if(last_state != 2)
  3739  002F36  0E02               	movlw	2
  3740  002F38  183F               	xorwf	troca_de_tela@last_state,w,c
  3741  002F3A  B4D8               	btfsc	status,2,c
  3742  002F3C  D043               	goto	l264
  3743                           
  3744                           ;main.c: 656: {
  3745                           ;main.c: 657: state = 2;
  3746  002F3E  0E02               	movlw	2
  3747  002F40  6E40               	movwf	troca_de_tela@state,c
  3748                           
  3749                           ;main.c: 658: escreve_cmd_lcd(0b00000001);
  3750  002F42  0E01               	movlw	1
  3751  002F44  EC8E  F024         	call	_escreve_cmd_lcd
  3752                           
  3753                           ;main.c: 659: point_buff_gps_lat = Latitude();
  3754  002F48  EC32  F02C         	call	_Latitude	;wreg free
  3755  002F4C  C060  F0FD         	movff	?_Latitude,_point_buff_gps_lat
  3756  002F50  C061  F0FE         	movff	?_Latitude+1,_point_buff_gps_lat+1
  3757                           
  3758                           ;main.c: 660: point_buff_gps_long = Longitude();
  3759  002F54  EC2C  F02C         	call	_Longitude	;wreg free
  3760  002F58  C060  F0FB         	movff	?_Longitude,_point_buff_gps_long
  3761  002F5C  C061  F0FC         	movff	?_Longitude+1,_point_buff_gps_long+1
  3762                           
  3763                           ;main.c: 661: posicao_cursor_lcd(1,0);
  3764  002F60  0E00               	movlw	0
  3765  002F62  0100               	movlb	0	; () banked
  3766  002F64  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3767  002F66  0E01               	movlw	1
  3768  002F68  ECFF  F026         	call	_posicao_cursor_lcd
  3769                           
  3770                           ;main.c: 662: escreve_frase_ram_lcd("lt:");
  3771  002F6C  0E78               	movlw	low STR_4
  3772  002F6E  0100               	movlb	0	; () banked
  3773  002F70  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3774  002F72  0E62               	movlw	high STR_4
  3775  002F74  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3776  002F76  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3777                           
  3778                           ;main.c: 663: posicao_cursor_lcd(1,4);
  3779  002F7A  0E04               	movlw	4
  3780  002F7C  0100               	movlb	0	; () banked
  3781  002F7E  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3782  002F80  0E01               	movlw	1
  3783  002F82  ECFF  F026         	call	_posicao_cursor_lcd
  3784                           
  3785                           ;main.c: 664: escreve_frase_ram_lcd(point_buff_gps_lat);
  3786  002F86  C0FD  F063         	movff	_point_buff_gps_lat,escreve_frase_ram_lcd@buffer
  3787  002F8A  C0FE  F064         	movff	_point_buff_gps_lat+1,escreve_frase_ram_lcd@buffer+1
  3788  002F8E  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3789                           
  3790                           ;main.c: 665: posicao_cursor_lcd(2,0);
  3791  002F92  0E00               	movlw	0
  3792  002F94  0100               	movlb	0	; () banked
  3793  002F96  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3794  002F98  0E02               	movlw	2
  3795  002F9A  ECFF  F026         	call	_posicao_cursor_lcd
  3796                           
  3797                           ;main.c: 666: escreve_frase_ram_lcd("lo:");
  3798  002F9E  0E74               	movlw	low STR_5
  3799  002FA0  0100               	movlb	0	; () banked
  3800  002FA2  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3801  002FA4  0E62               	movlw	high STR_5
  3802  002FA6  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3803  002FA8  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3804                           
  3805                           ;main.c: 667: posicao_cursor_lcd(2,4);
  3806  002FAC  0E04               	movlw	4
  3807  002FAE  0100               	movlb	0	; () banked
  3808  002FB0  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3809  002FB2  0E02               	movlw	2
  3810  002FB4  ECFF  F026         	call	_posicao_cursor_lcd
  3811                           
  3812                           ;main.c: 668: escreve_frase_ram_lcd(point_buff_gps_long);
  3813  002FB8  C0FB  F063         	movff	_point_buff_gps_long,escreve_frase_ram_lcd@buffer
  3814  002FBC  C0FC  F064         	movff	_point_buff_gps_long+1,escreve_frase_ram_lcd@buffer+1
  3815  002FC0  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3816  002FC4                     l264:
  3817                           
  3818                           ;main.c: 669: }
  3819                           ;main.c: 670: last_state = 2;
  3820  002FC4  0E02               	movlw	2
  3821  002FC6  6E3F               	movwf	troca_de_tela@last_state,c
  3822  002FC8                     l258:
  3823                           
  3824                           ;main.c: 671: }
  3825                           ;main.c: 675: if(flag[2].point || state == 3)
  3826  002FC8  0100               	movlb	0	; () banked
  3827  002FCA  B1F6               	btfsc	(_flag+2)& (0+255),0,b
  3828  002FCC  D004               	goto	u16980
  3829                           
  3830                           ; BSR set to: 0
  3831  002FCE  0E03               	movlw	3
  3832  002FD0  1840               	xorwf	troca_de_tela@state,w,c
  3833  002FD2  A4D8               	btfss	status,2,c
  3834  002FD4  D020               	goto	l265
  3835  002FD6                     u16980:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;main.c: 676: {
  3839                           ;main.c: 678: if(!time_atualizacao)
  3840                           
  3841                           ; BSR set to: 0
  3842  002FD6  5031               	movf	_time_atualizacao,w,c
  3843  002FD8  1032               	iorwf	_time_atualizacao+1,w,c
  3844  002FDA  A4D8               	btfss	status,2,c
  3845  002FDC  D004               	goto	l268
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;main.c: 679: {
  3849                           ;main.c: 680: time_atualizacao = 10000;
  3850  002FDE  0E27               	movlw	39
  3851  002FE0  6E32               	movwf	_time_atualizacao+1,c
  3852  002FE2  0E10               	movlw	16
  3853  002FE4  6E31               	movwf	_time_atualizacao,c
  3854  002FE6                     l268:
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;main.c: 681: }
  3858                           ;main.c: 683: if(last_state != 3)
  3859                           
  3860                           ; BSR set to: 0
  3861  002FE6  0E03               	movlw	3
  3862  002FE8  183F               	xorwf	troca_de_tela@last_state,w,c
  3863  002FEA  B4D8               	btfsc	status,2,c
  3864  002FEC  D012               	goto	l269
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;main.c: 684: {
  3868                           ;main.c: 685: state = 3;
  3869  002FEE  0E03               	movlw	3
  3870  002FF0  6E40               	movwf	troca_de_tela@state,c
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;main.c: 686: escreve_cmd_lcd(0b00000001);
  3874  002FF2  0E01               	movlw	1
  3875  002FF4  EC8E  F024         	call	_escreve_cmd_lcd
  3876                           
  3877                           ;main.c: 687: posicao_cursor_lcd(2,0);
  3878  002FF8  0E00               	movlw	0
  3879  002FFA  0100               	movlb	0	; () banked
  3880  002FFC  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3881  002FFE  0E02               	movlw	2
  3882  003000  ECFF  F026         	call	_posicao_cursor_lcd
  3883                           
  3884                           ;main.c: 688: escreve_frase_ram_lcd("D_Fence:");
  3885  003004  0E49               	movlw	low STR_6
  3886  003006  0100               	movlb	0	; () banked
  3887  003008  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3888  00300A  0E62               	movlw	high STR_6
  3889  00300C  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3890  00300E  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3891  003012                     l269:
  3892                           
  3893                           ;main.c: 689: }
  3894                           ;main.c: 690: last_state = 3;
  3895  003012  0E03               	movlw	3
  3896  003014  6E3F               	movwf	troca_de_tela@last_state,c
  3897  003016                     l265:
  3898                           
  3899                           ;main.c: 691: }
  3900                           ;main.c: 699: if((!PORTEbits.RE1 && state!=0) && !flag[2].point )
  3901  003016  B284               	btfsc	3972,1,c	;volatile
  3902  003018  D02B               	goto	l270
  3903  00301A  5040               	movf	troca_de_tela@state,w,c
  3904  00301C  B4D8               	btfsc	status,2,c
  3905  00301E  D028               	goto	l270
  3906  003020  0100               	movlb	0	; () banked
  3907  003022  B1F6               	btfsc	(_flag+2)& (0+255),0,b
  3908  003024  D025               	goto	l270
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;main.c: 700: {
  3912                           ;main.c: 701: if(last_state != 4)
  3913  003026  0E04               	movlw	4
  3914  003028  183F               	xorwf	troca_de_tela@last_state,w,c
  3915  00302A  B4D8               	btfsc	status,2,c
  3916  00302C  D01F               	goto	l271
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;main.c: 702: {
  3920                           ;main.c: 703: escreve_cmd_lcd(0b00000001);
  3921  00302E  0E01               	movlw	1
  3922  003030  EC8E  F024         	call	_escreve_cmd_lcd
  3923                           
  3924                           ;main.c: 704: state = 0;
  3925  003034  0E00               	movlw	0
  3926  003036  6E40               	movwf	troca_de_tela@state,c
  3927                           
  3928                           ;main.c: 705: posicao_cursor_lcd(1,0);
  3929  003038  0E00               	movlw	0
  3930  00303A  0100               	movlb	0	; () banked
  3931  00303C  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3932  00303E  0E01               	movlw	1
  3933  003040  ECFF  F026         	call	_posicao_cursor_lcd
  3934                           
  3935                           ;main.c: 706: escreve_frase_ram_lcd("B1:RPM B2:FENCE");
  3936  003044  0EC4               	movlw	low STR_7
  3937  003046  0100               	movlb	0	; () banked
  3938  003048  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3939  00304A  0E61               	movlw	high STR_7
  3940  00304C  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3941  00304E  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3942                           
  3943                           ;main.c: 707: posicao_cursor_lcd(2,0);
  3944  003052  0E00               	movlw	0
  3945  003054  0100               	movlb	0	; () banked
  3946  003056  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3947  003058  0E02               	movlw	2
  3948  00305A  ECFF  F026         	call	_posicao_cursor_lcd
  3949                           
  3950                           ;main.c: 708: escreve_frase_ram_lcd("B2:HOME");
  3951  00305E  0E52               	movlw	low STR_8
  3952  003060  0100               	movlb	0	; () banked
  3953  003062  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3954  003064  0E62               	movlw	high STR_8
  3955  003066  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3956  003068  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3957  00306C                     l271:
  3958                           
  3959                           ;main.c: 709: }
  3960                           ;main.c: 710: last_state = 4;
  3961  00306C  0E04               	movlw	4
  3962  00306E  6E3F               	movwf	troca_de_tela@last_state,c
  3963  003070                     l270:
  3964                           
  3965                           ;main.c: 711: }
  3966                           ;main.c: 713: if(!state && !flag[2].point)
  3967  003070  5040               	movf	troca_de_tela@state,w,c
  3968  003072  A4D8               	btfss	status,2,c
  3969  003074  0012               	return	
  3970  003076  0100               	movlb	0	; () banked
  3971  003078  B1F6               	btfsc	(_flag+2)& (0+255),0,b
  3972  00307A  0012               	return	
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;main.c: 714: {
  3976                           ;main.c: 715: if(last_state != 4)
  3977  00307C  0E04               	movlw	4
  3978  00307E  183F               	xorwf	troca_de_tela@last_state,w,c
  3979  003080  B4D8               	btfsc	status,2,c
  3980  003082  D01D               	goto	l273
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;main.c: 716: {
  3984                           ;main.c: 717: escreve_cmd_lcd(0b00000001);
  3985  003084  0E01               	movlw	1
  3986  003086  EC8E  F024         	call	_escreve_cmd_lcd
  3987                           
  3988                           ;main.c: 718: posicao_cursor_lcd(1,0);
  3989  00308A  0E00               	movlw	0
  3990  00308C  0100               	movlb	0	; () banked
  3991  00308E  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3992  003090  0E01               	movlw	1
  3993  003092  ECFF  F026         	call	_posicao_cursor_lcd
  3994                           
  3995                           ;main.c: 719: escreve_frase_ram_lcd("B1:RPM  B2:FENCE");
  3996  003096  0E73               	movlw	low STR_9
  3997  003098  0100               	movlb	0	; () banked
  3998  00309A  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3999  00309C  0E61               	movlw	high STR_9
  4000  00309E  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4001  0030A0  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  4002                           
  4003                           ;main.c: 720: posicao_cursor_lcd(2,0);
  4004  0030A4  0E00               	movlw	0
  4005  0030A6  0100               	movlb	0	; () banked
  4006  0030A8  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4007  0030AA  0E02               	movlw	2
  4008  0030AC  ECFF  F026         	call	_posicao_cursor_lcd
  4009                           
  4010                           ;main.c: 721: escreve_frase_ram_lcd("B2:HOME");
  4011  0030B0  0E52               	movlw	low STR_8
  4012  0030B2  0100               	movlb	0	; () banked
  4013  0030B4  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  4014  0030B6  0E62               	movlw	high STR_8
  4015  0030B8  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4016  0030BA  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  4017  0030BE                     l273:
  4018                           
  4019                           ;main.c: 722: }
  4020                           ;main.c: 723: last_state = 4;
  4021  0030BE  0E04               	movlw	4
  4022  0030C0  6E3F               	movwf	troca_de_tela@last_state,c
  4023  0030C2  0012               	return	
  4024  0030C4                     __end_of_troca_de_tela:
  4025                           	opt stack 0
  4026                           tosu	equ	0xFFF
  4027                           tosh	equ	0xFFE
  4028                           tosl	equ	0xFFD
  4029                           pclath	equ	0xFFA
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           intcon	equ	0xFF2
  4037                           intcon2	equ	0xFF1
  4038                           intcon3	equ	0xFF0
  4039                           postinc0	equ	0xFEE
  4040                           wreg	equ	0xFE8
  4041                           postinc1	equ	0xFE6
  4042                           postdec1	equ	0xFE5
  4043                           fsr1h	equ	0xFE2
  4044                           fsr1l	equ	0xFE1
  4045                           postinc2	equ	0xFDE
  4046                           postdec2	equ	0xFDD
  4047                           fsr2h	equ	0xFDA
  4048                           fsr2l	equ	0xFD9
  4049                           status	equ	0xFD8
  4050                           
  4051 ;; *************** function _disparo_gravacao *****************
  4052 ;; Defined at:
  4053 ;;		line 595 in file "main.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;		None
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;		None
  4058 ;; Return value:  Size  Location     Type
  4059 ;;                  1    wreg      void 
  4060 ;; Registers used:
  4061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4062 ;; Tracked objects:
  4063 ;;		On entry : 0/0
  4064 ;;		On exit  : 0/0
  4065 ;;		Unchanged: 0/0
  4066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4067 ;;      Params:         0       0       0       0       0       0       0       0       0
  4068 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4069 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4070 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4071 ;;Total ram usage:        0 bytes
  4072 ;; Hardware stack levels used:    1
  4073 ;; Hardware stack levels required when called:   16
  4074 ;; This function calls:
  4075 ;;		_escrita_sdcard
  4076 ;; This function is called by:
  4077 ;;		_inicializa_tarefas
  4078 ;;		_escalonador
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text13
  4083  0057E0                     __ptext13:
  4084                           	opt stack 0
  4085  0057E0                     _disparo_gravacao:
  4086                           	opt stack 13
  4087                           
  4088                           ;main.c: 597: if(!time_sd)
  4089                           
  4090                           ;incstack = 0
  4091  0057E0  5033               	movf	_time_sd,w,c
  4092  0057E2  1034               	iorwf	_time_sd+1,w,c
  4093  0057E4  A4D8               	btfss	status,2,c
  4094  0057E6  0012               	return	
  4095                           
  4096                           ;main.c: 598: {
  4097                           ;main.c: 601: escrita_sdcard();
  4098  0057E8  ECE2  F021         	call	_escrita_sdcard	;wreg free
  4099                           
  4100                           ;main.c: 602: time_sd = 30000;
  4101  0057EC  0E75               	movlw	117
  4102  0057EE  6E34               	movwf	_time_sd+1,c
  4103  0057F0  0E30               	movlw	48
  4104  0057F2  6E33               	movwf	_time_sd,c
  4105  0057F4  0012               	return	
  4106  0057F6                     __end_of_disparo_gravacao:
  4107                           	opt stack 0
  4108                           tosu	equ	0xFFF
  4109                           tosh	equ	0xFFE
  4110                           tosl	equ	0xFFD
  4111                           pclath	equ	0xFFA
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           intcon	equ	0xFF2
  4119                           intcon2	equ	0xFF1
  4120                           intcon3	equ	0xFF0
  4121                           postinc0	equ	0xFEE
  4122                           wreg	equ	0xFE8
  4123                           postinc1	equ	0xFE6
  4124                           postdec1	equ	0xFE5
  4125                           fsr1h	equ	0xFE2
  4126                           fsr1l	equ	0xFE1
  4127                           postinc2	equ	0xFDE
  4128                           postdec2	equ	0xFDD
  4129                           fsr2h	equ	0xFDA
  4130                           fsr2l	equ	0xFD9
  4131                           status	equ	0xFD8
  4132                           
  4133 ;; *************** function _verifica_dados_operacionais *****************
  4134 ;; Defined at:
  4135 ;;		line 580 in file "main.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;		None
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		None
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4149 ;;      Params:         0       0       0       0       0       0       0       0       0
  4150 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4151 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4152 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4153 ;;Total ram usage:        0 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    3
  4156 ;; This function calls:
  4157 ;;		Nothing
  4158 ;; This function is called by:
  4159 ;;		_inicializa_tarefas
  4160 ;;		_escalonador
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           	psect	text14
  4165  0058B0                     __ptext14:
  4166                           	opt stack 0
  4167  0058B0                     _verifica_dados_operacionais:
  4168                           	opt stack 26
  4169                           
  4170                           ;incstack = 0
  4171  0058B0  0012               	return		;funcret
  4172  0058B2                     __end_of_verifica_dados_operacionais:
  4173                           	opt stack 0
  4174                           tosu	equ	0xFFF
  4175                           tosh	equ	0xFFE
  4176                           tosl	equ	0xFFD
  4177                           pclath	equ	0xFFA
  4178                           tblptru	equ	0xFF8
  4179                           tblptrh	equ	0xFF7
  4180                           tblptrl	equ	0xFF6
  4181                           tablat	equ	0xFF5
  4182                           prodh	equ	0xFF4
  4183                           prodl	equ	0xFF3
  4184                           intcon	equ	0xFF2
  4185                           intcon2	equ	0xFF1
  4186                           intcon3	equ	0xFF0
  4187                           postinc0	equ	0xFEE
  4188                           wreg	equ	0xFE8
  4189                           postinc1	equ	0xFE6
  4190                           postdec1	equ	0xFE5
  4191                           fsr1h	equ	0xFE2
  4192                           fsr1l	equ	0xFE1
  4193                           postinc2	equ	0xFDE
  4194                           postdec2	equ	0xFDD
  4195                           fsr2h	equ	0xFDA
  4196                           fsr2l	equ	0xFD9
  4197                           status	equ	0xFD8
  4198                           
  4199 ;; *************** function _verifica_fence_externo *****************
  4200 ;; Defined at:
  4201 ;;		line 268 in file "main.c"
  4202 ;; Parameters:    Size  Location     Type
  4203 ;;		None
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;  fence_diff_l   48    0[BANK3 ] unsigned char [12][4]
  4206 ;;  fence_diff_l   44   48[BANK3 ] unsigned char [11][4]
  4207 ;;  temp_buff_lo   12   92[BANK3 ] unsigned char [12]
  4208 ;;  temp_buff_la   11  104[BANK3 ] unsigned char [11]
  4209 ;;  temp_var_deg    4  115[BANK3 ] unsigned long 
  4210 ;;  point_buff      3    0        PTR unsigned char 
  4211 ;;  i               1  124[BANK3 ] unsigned char 
  4212 ;;  point           1  123[BANK3 ] unsigned char 
  4213 ;;  count           1  122[BANK3 ] unsigned char 
  4214 ;;  j               1  121[BANK3 ] unsigned char 
  4215 ;;  point_dif_lo    1  120[BANK3 ] unsigned char 
  4216 ;;  point_dif_la    1  119[BANK3 ] unsigned char 
  4217 ;;  count_index     1    0        unsigned char 
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  1    wreg      void 
  4220 ;; Registers used:
  4221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4227 ;;      Params:         0       0       0       0       0       0       0       0       0
  4228 ;;      Locals:         0       0       0       0     125       0       0       0       0
  4229 ;;      Temps:          0       6       0       0       0       0       0       0       0
  4230 ;;      Totals:         0       6       0       0     125       0       0       0       0
  4231 ;;Total ram usage:      131 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    7
  4234 ;; This function calls:
  4235 ;;		_Latitude
  4236 ;;		_Longitude
  4237 ;;		_atoi
  4238 ;;		_escreve_frase_ram_lcd
  4239 ;;		_escreve_inteiro_lcd
  4240 ;;		_posicao_cursor_lcd
  4241 ;; This function is called by:
  4242 ;;		_inicializa_tarefas
  4243 ;;		_escalonador
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           	psect	text15
  4248  000012                     __ptext15:
  4249                           	opt stack 0
  4250  000012                     _verifica_fence_externo:
  4251                           	opt stack 22
  4252                           
  4253                           ;main.c: 270: unsigned char fence_diff_lat[4][11] = {"-2342.07112", "-2342.07112", "-234
      +                          2.11784", "-2342.11784"};
  4254                           
  4255                           ;incstack = 0
  4256  000012  EE22  F030         	lfsr	2,verifica_fence_externo@F4372
  4257  000016  EE13  F030         	lfsr	1,verifica_fence_externo@fence_diff_lat
  4258  00001A  0E2B               	movlw	43
  4259  00001C                     u16041:
  4260  00001C  CFDB FFE3          	movff	plusw2,plusw1
  4261  000020  06E8               	decf	wreg,f,c
  4262  000022  E2FC               	bc	u16041
  4263                           
  4264                           ;main.c: 271: unsigned char fence_diff_long[4][12] = {"-04629.73477", "-04629.68601", "-
      +                          04629.68601", "-04629.73477"};
  4265  000024  EE22  F000         	lfsr	2,verifica_fence_externo@F4375
  4266  000028  EE13  F000         	lfsr	1,verifica_fence_externo@fence_diff_long
  4267  00002C  0E2F               	movlw	47
  4268  00002E                     u16051:
  4269  00002E  CFDB FFE3          	movff	plusw2,plusw1
  4270  000032  06E8               	decf	wreg,f,c
  4271  000034  E2FC               	bc	u16051
  4272                           
  4273                           ;main.c: 281: unsigned char *point_buff, i, j, count, count_index;
  4274                           ;main.c: 282: unsigned char point, point_dif_lat ,point_dif_long;
  4275                           ;main.c: 283: unsigned long int temp_var_deg;
  4276                           ;main.c: 284: unsigned char temp_buff_lat[11] = "-2342.07112";
  4277  000036  EE22  F068         	lfsr	2,verifica_fence_externo@F4386
  4278  00003A  EE13  F068         	lfsr	1,verifica_fence_externo@temp_buff_lat
  4279  00003E  0E0A               	movlw	10
  4280  000040                     u16061:
  4281  000040  CFDB FFE3          	movff	plusw2,plusw1
  4282  000044  06E8               	decf	wreg,f,c
  4283  000046  E2FC               	bc	u16061
  4284                           
  4285                           ;main.c: 285: unsigned char temp_buff_long[12] = "-04629.73477";
  4286  000048  EE22  F05C         	lfsr	2,verifica_fence_externo@F4388
  4287  00004C  EE13  F05C         	lfsr	1,verifica_fence_externo@temp_buff_long
  4288  000050  0E0B               	movlw	11
  4289  000052                     u16071:
  4290  000052  CFDB FFE3          	movff	plusw2,plusw1
  4291  000056  06E8               	decf	wreg,f,c
  4292  000058  E2FC               	bc	u16071
  4293                           
  4294                           ;main.c: 286: count = 0;
  4295  00005A  0E00               	movlw	0
  4296  00005C  0103               	movlb	3	; () banked
  4297  00005E  6F7A               	movwf	verifica_fence_externo@count& (0+255),b
  4298                           
  4299                           ; BSR set to: 3
  4300                           ;main.c: 287: point = 0;
  4301  000060  0E00               	movlw	0
  4302  000062  6F7B               	movwf	verifica_fence_externo@point& (0+255),b
  4303                           
  4304                           ; BSR set to: 3
  4305                           ;main.c: 288: point_dif_lat = 0;
  4306  000064  0E00               	movlw	0
  4307  000066  6F77               	movwf	verifica_fence_externo@point_dif_lat& (0+255),b
  4308                           
  4309                           ; BSR set to: 3
  4310                           ;main.c: 289: point_dif_long = 0;
  4311  000068  0E00               	movlw	0
  4312  00006A  6F78               	movwf	verifica_fence_externo@point_dif_long& (0+255),b
  4313                           
  4314                           ; BSR set to: 3
  4315                           ;main.c: 290: j= 0;
  4316  00006C  0E00               	movlw	0
  4317  00006E  6F79               	movwf	verifica_fence_externo@j& (0+255),b
  4318                           
  4319                           ; BSR set to: 3
  4320                           ;main.c: 293: point_buff_gps_lat = Latitude();
  4321  000070  EC32  F02C         	call	_Latitude	;wreg free
  4322  000074  C060  F0FD         	movff	?_Latitude,_point_buff_gps_lat
  4323  000078  C061  F0FE         	movff	?_Latitude+1,_point_buff_gps_lat+1
  4324                           
  4325                           ;main.c: 294: point_buff_gps_long = Longitude();
  4326  00007C  EC2C  F02C         	call	_Longitude	;wreg free
  4327  000080  C060  F0FB         	movff	?_Longitude,_point_buff_gps_long
  4328  000084  C061  F0FC         	movff	?_Longitude+1,_point_buff_gps_long+1
  4329                           
  4330                           ;main.c: 300: for(i=0; i<11; i++)
  4331  000088  0E00               	movlw	0
  4332  00008A  0103               	movlb	3	; () banked
  4333  00008C  6F7C               	movwf	verifica_fence_externo@i& (0+255),b
  4334  00008E                     l11916:
  4335                           
  4336                           ; BSR set to: 3
  4337  00008E  0E0A               	movlw	10
  4338  000090  657C               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4339  000092  D001               	goto	l143
  4340  000094  D1C7               	goto	l145
  4341  000096                     l143:
  4342                           
  4343                           ; BSR set to: 3
  4344                           ;main.c: 301: {
  4345                           ;main.c: 302: temp_buff_lat[i] = *point_buff_gps_lat;
  4346                           
  4347                           ; BSR set to: 3
  4348  000096  C0FD  FFD9         	movff	_point_buff_gps_lat,fsr2l
  4349  00009A  C0FE  FFDA         	movff	_point_buff_gps_lat+1,fsr2h
  4350  00009E  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  4351  0000A0  0D01               	mullw	1
  4352  0000A2  0E68               	movlw	low verifica_fence_externo@temp_buff_lat
  4353  0000A4  24F3               	addwf	prodl,w,c
  4354  0000A6  6EE1               	movwf	fsr1l,c
  4355  0000A8  0E03               	movlw	high verifica_fence_externo@temp_buff_lat
  4356  0000AA  20F4               	addwfc	prodh,w,c
  4357  0000AC  6EE2               	movwf	fsr1h,c
  4358  0000AE  CFDF FFE7          	movff	indf2,indf1
  4359                           
  4360                           ;main.c: 303: temp_buff_long[i] = *point_buff_gps_long;
  4361  0000B2  C0FB  FFD9         	movff	_point_buff_gps_long,fsr2l
  4362  0000B6  C0FC  FFDA         	movff	_point_buff_gps_long+1,fsr2h
  4363  0000BA  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  4364  0000BC  0D01               	mullw	1
  4365  0000BE  0E5C               	movlw	low verifica_fence_externo@temp_buff_long
  4366  0000C0  24F3               	addwf	prodl,w,c
  4367  0000C2  6EE1               	movwf	fsr1l,c
  4368  0000C4  0E03               	movlw	high verifica_fence_externo@temp_buff_long
  4369  0000C6  20F4               	addwfc	prodh,w,c
  4370  0000C8  6EE2               	movwf	fsr1h,c
  4371  0000CA  CFDF FFE7          	movff	indf2,indf1
  4372                           
  4373                           ; BSR set to: 3
  4374                           ;main.c: 304: point_buff_gps_lat++;
  4375  0000CE  0100               	movlb	0	; () banked
  4376  0000D0  4BFD               	infsnz	_point_buff_gps_lat& (0+255),f,b
  4377  0000D2  2BFE               	incf	(_point_buff_gps_lat+1)& (0+255),f,b
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;main.c: 305: point_buff_gps_long++;
  4381  0000D4  4BFB               	infsnz	_point_buff_gps_long& (0+255),f,b
  4382  0000D6  2BFC               	incf	(_point_buff_gps_long+1)& (0+255),f,b
  4383                           
  4384                           ; BSR set to: 0
  4385  0000D8  0103               	movlb	3	; () banked
  4386  0000DA  2B7C               	incf	verifica_fence_externo@i& (0+255),f,b
  4387  0000DC  D7D8               	goto	l11916
  4388  0000DE                     
  4389                           ; BSR set to: 3
  4390                           ;main.c: 310: {
  4391                           ;main.c: 312: for(i=1; i<6; i++)
  4392                           
  4393                           ; BSR set to: 3
  4394  0000DE  0E01               	movlw	1
  4395  0000E0  6F7C               	movwf	verifica_fence_externo@i& (0+255),b
  4396  0000E2                     l11932:
  4397                           
  4398                           ; BSR set to: 3
  4399  0000E2  0E05               	movlw	5
  4400  0000E4  657C               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4401  0000E6  D001               	goto	l147
  4402  0000E8  D06F               	goto	u16170
  4403  0000EA                     l147:
  4404                           
  4405                           ; BSR set to: 3
  4406                           ;main.c: 313: {
  4407                           ;main.c: 314: if(point == 0 || point == 2)
  4408                           
  4409                           ; BSR set to: 3
  4410  0000EA  517B               	movf	verifica_fence_externo@point& (0+255),w,b
  4411  0000EC  B4D8               	btfsc	status,2,c
  4412  0000EE  D004               	goto	u16120
  4413                           
  4414                           ; BSR set to: 3
  4415  0000F0  0E02               	movlw	2
  4416  0000F2  197B               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4417  0000F4  A4D8               	btfss	status,2,c
  4418  0000F6  D066               	goto	u16160
  4419  0000F8                     u16120:
  4420                           
  4421                           ; BSR set to: 3
  4422                           ;main.c: 315: {
  4423                           ;main.c: 316: if(point == 2 && !point_dif_long)
  4424                           
  4425                           ; BSR set to: 3
  4426  0000F8  0E02               	movlw	2
  4427  0000FA  197B               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4428  0000FC  A4D8               	btfss	status,2,c
  4429  0000FE  D003               	goto	l152
  4430                           
  4431                           ; BSR set to: 3
  4432  000100  5178               	movf	verifica_fence_externo@point_dif_long& (0+255),w,b
  4433  000102  B4D8               	btfsc	status,2,c
  4434                           
  4435                           ; BSR set to: 3
  4436                           ;main.c: 317: {
  4437                           ;main.c: 318: point_dif_long++;
  4438  000104  2B78               	incf	verifica_fence_externo@point_dif_long& (0+255),f,b
  4439  000106                     l152:
  4440                           
  4441                           ; BSR set to: 3
  4442                           ;main.c: 319: }
  4443                           ;main.c: 320: for(j= 0; i < 6; j++)
  4444                           
  4445                           ; BSR set to: 3
  4446  000106  0E00               	movlw	0
  4447  000108  6F79               	movwf	verifica_fence_externo@j& (0+255),b
  4448  00010A                     l11948:
  4449                           
  4450                           ; BSR set to: 3
  4451  00010A  0E05               	movlw	5
  4452  00010C  657C               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4453  00010E  D001               	goto	l153
  4454  000110  D059               	goto	u16160
  4455  000112                     l153:
  4456                           
  4457                           ; BSR set to: 3
  4458                           ;main.c: 321: {
  4459                           ;main.c: 322: poligono_ext[point_dif_long].point_long_deg[j] = temp_buff_long[i];
  4460                           
  4461                           ; BSR set to: 3
  4462  000112  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  4463  000114  0D01               	mullw	1
  4464  000116  0E5C               	movlw	low verifica_fence_externo@temp_buff_long
  4465  000118  24F3               	addwf	prodl,w,c
  4466  00011A  6ED9               	movwf	fsr2l,c
  4467  00011C  0E03               	movlw	high verifica_fence_externo@temp_buff_long
  4468  00011E  20F4               	addwfc	prodh,w,c
  4469  000120  6EDA               	movwf	fsr2h,c
  4470  000122  5179               	movf	verifica_fence_externo@j& (0+255),w,b
  4471  000124  0D01               	mullw	1
  4472  000126  0E12               	movlw	18
  4473  000128  26F3               	addwf	prodl,f,c
  4474  00012A  0E00               	movlw	0
  4475  00012C  22F4               	addwfc	prodh,f,c
  4476  00012E  0E10               	movlw	low _poligono_ext
  4477  000130  0100               	movlb	0	; () banked
  4478  000132  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4479  000134  0E01               	movlw	high _poligono_ext
  4480  000136  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4481  000138  50F3               	movf	prodl,w,c
  4482  00013A  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4483  00013C  50F4               	movf	prodh,w,c
  4484  00013E  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4485  000140  0103               	movlb	3	; () banked
  4486  000142  5178               	movf	verifica_fence_externo@point_dif_long& (0+255),w,b
  4487  000144  0D40               	mullw	64
  4488  000146  50F3               	movf	prodl,w,c
  4489  000148  0100               	movlb	0	; () banked
  4490  00014A  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4491  00014C  6EE1               	movwf	fsr1l,c
  4492  00014E  50F4               	movf	prodh,w,c
  4493  000150  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4494  000152  6EE2               	movwf	fsr1h,c
  4495  000154  CFDF FFE7          	movff	indf2,indf1
  4496                           
  4497                           ;main.c: 323: poligono_ext[point_dif_long].fence_long_deg[j] = fence_diff_long[point][i]
      +                          ;
  4498  000158  0103               	movlb	3	; () banked
  4499  00015A  517B               	movf	verifica_fence_externo@point& (0+255),w,b
  4500  00015C  0D0C               	mullw	12
  4501  00015E  0E00               	movlw	low verifica_fence_externo@fence_diff_long
  4502  000160  0100               	movlb	0	; () banked
  4503  000162  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4504  000164  0E03               	movlw	high verifica_fence_externo@fence_diff_long
  4505  000166  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4506  000168  50F3               	movf	prodl,w,c
  4507  00016A  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4508  00016C  50F4               	movf	prodh,w,c
  4509  00016E  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4510  000170  0103               	movlb	3	; () banked
  4511  000172  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  4512  000174  0D01               	mullw	1
  4513  000176  50F3               	movf	prodl,w,c
  4514  000178  0100               	movlb	0	; () banked
  4515  00017A  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4516  00017C  6ED9               	movwf	fsr2l,c
  4517  00017E  50F4               	movf	prodh,w,c
  4518  000180  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4519  000182  6EDA               	movwf	fsr2h,c
  4520  000184  0103               	movlb	3	; () banked
  4521  000186  5179               	movf	verifica_fence_externo@j& (0+255),w,b
  4522  000188  0D01               	mullw	1
  4523  00018A  0E06               	movlw	6
  4524  00018C  26F3               	addwf	prodl,f,c
  4525  00018E  0E00               	movlw	0
  4526  000190  22F4               	addwfc	prodh,f,c
  4527  000192  0E10               	movlw	low _poligono_ext
  4528  000194  0100               	movlb	0	; () banked
  4529  000196  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4530  000198  0E01               	movlw	high _poligono_ext
  4531  00019A  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4532  00019C  50F3               	movf	prodl,w,c
  4533  00019E  2783               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  4534  0001A0  50F4               	movf	prodh,w,c
  4535  0001A2  2384               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  4536  0001A4  0103               	movlb	3	; () banked
  4537  0001A6  5178               	movf	verifica_fence_externo@point_dif_long& (0+255),w,b
  4538  0001A8  0D40               	mullw	64
  4539  0001AA  50F3               	movf	prodl,w,c
  4540  0001AC  0100               	movlb	0	; () banked
  4541  0001AE  2583               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  4542  0001B0  6EE1               	movwf	fsr1l,c
  4543  0001B2  50F4               	movf	prodh,w,c
  4544  0001B4  2184               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  4545  0001B6  6EE2               	movwf	fsr1h,c
  4546  0001B8  CFDF FFE7          	movff	indf2,indf1
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;main.c: 325: i++;
  4550  0001BC  0103               	movlb	3	; () banked
  4551  0001BE  2B7C               	incf	verifica_fence_externo@i& (0+255),f,b
  4552                           
  4553                           ; BSR set to: 3
  4554  0001C0  2B79               	incf	verifica_fence_externo@j& (0+255),f,b
  4555  0001C2  D7A3               	goto	l11948
  4556  0001C4                     u16160:
  4557                           
  4558                           ; BSR set to: 3
  4559                           
  4560                           ; BSR set to: 3
  4561                           
  4562                           ; BSR set to: 3
  4563  0001C4  2B7C               	incf	verifica_fence_externo@i& (0+255),f,b
  4564  0001C6  D78D               	goto	l11932
  4565  0001C8                     u16170:
  4566                           
  4567                           ; BSR set to: 3
  4568                           ;main.c: 326: }
  4569                           ;main.c: 328: }
  4570                           ;main.c: 330: }
  4571                           ;main.c: 332: for(i=1; i<5; i++)
  4572                           
  4573                           ; BSR set to: 3
  4574  0001C8  0E01               	movlw	1
  4575  0001CA  6F7C               	movwf	verifica_fence_externo@i& (0+255),b
  4576  0001CC                     l11966:
  4577                           
  4578                           ; BSR set to: 3
  4579  0001CC  0E04               	movlw	4
  4580  0001CE  657C               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4581  0001D0  D001               	goto	l155
  4582  0001D2  D06B               	goto	u16250
  4583  0001D4                     l155:
  4584                           
  4585                           ; BSR set to: 3
  4586                           ;main.c: 333: {
  4587                           ;main.c: 334: if(point == 0 || point == 2)
  4588                           
  4589                           ; BSR set to: 3
  4590  0001D4  517B               	movf	verifica_fence_externo@point& (0+255),w,b
  4591  0001D6  B4D8               	btfsc	status,2,c
  4592  0001D8  D004               	goto	u16200
  4593                           
  4594                           ; BSR set to: 3
  4595  0001DA  0E02               	movlw	2
  4596  0001DC  197B               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4597  0001DE  A4D8               	btfss	status,2,c
  4598  0001E0  D062               	goto	u16240
  4599  0001E2                     u16200:
  4600                           
  4601                           ; BSR set to: 3
  4602                           ;main.c: 335: {
  4603                           ;main.c: 337: if(point == 2 && !point_dif_lat)
  4604                           
  4605                           ; BSR set to: 3
  4606  0001E2  0E02               	movlw	2
  4607  0001E4  197B               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4608  0001E6  A4D8               	btfss	status,2,c
  4609  0001E8  D003               	goto	l160
  4610                           
  4611                           ; BSR set to: 3
  4612  0001EA  5177               	movf	verifica_fence_externo@point_dif_lat& (0+255),w,b
  4613  0001EC  B4D8               	btfsc	status,2,c
  4614                           
  4615                           ; BSR set to: 3
  4616                           ;main.c: 338: {
  4617                           ;main.c: 339: point_dif_lat++;
  4618  0001EE  2B77               	incf	verifica_fence_externo@point_dif_lat& (0+255),f,b
  4619  0001F0                     l160:
  4620                           
  4621                           ; BSR set to: 3
  4622                           ;main.c: 340: }
  4623                           ;main.c: 343: for(j= 0; i < 5; j++)
  4624                           
  4625                           ; BSR set to: 3
  4626  0001F0  0E00               	movlw	0
  4627  0001F2  6F79               	movwf	verifica_fence_externo@j& (0+255),b
  4628  0001F4                     l11982:
  4629                           
  4630                           ; BSR set to: 3
  4631  0001F4  0E04               	movlw	4
  4632  0001F6  657C               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4633  0001F8  D001               	goto	l161
  4634  0001FA  D055               	goto	u16240
  4635  0001FC                     l161:
  4636                           
  4637                           ; BSR set to: 3
  4638                           ;main.c: 344: {
  4639                           ;main.c: 345: poligono_ext[point_dif_lat].point_lat_deg[j] = temp_buff_lat[i];
  4640                           
  4641                           ; BSR set to: 3
  4642  0001FC  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  4643  0001FE  0D01               	mullw	1
  4644  000200  0E68               	movlw	low verifica_fence_externo@temp_buff_lat
  4645  000202  24F3               	addwf	prodl,w,c
  4646  000204  6ED9               	movwf	fsr2l,c
  4647  000206  0E03               	movlw	high verifica_fence_externo@temp_buff_lat
  4648  000208  20F4               	addwfc	prodh,w,c
  4649  00020A  6EDA               	movwf	fsr2h,c
  4650  00020C  5179               	movf	verifica_fence_externo@j& (0+255),w,b
  4651  00020E  0D01               	mullw	1
  4652  000210  0E0C               	movlw	12
  4653  000212  26F3               	addwf	prodl,f,c
  4654  000214  0E00               	movlw	0
  4655  000216  22F4               	addwfc	prodh,f,c
  4656  000218  0E10               	movlw	low _poligono_ext
  4657  00021A  0100               	movlb	0	; () banked
  4658  00021C  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4659  00021E  0E01               	movlw	high _poligono_ext
  4660  000220  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4661  000222  50F3               	movf	prodl,w,c
  4662  000224  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4663  000226  50F4               	movf	prodh,w,c
  4664  000228  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4665  00022A  0103               	movlb	3	; () banked
  4666  00022C  5177               	movf	verifica_fence_externo@point_dif_lat& (0+255),w,b
  4667  00022E  0D40               	mullw	64
  4668  000230  50F3               	movf	prodl,w,c
  4669  000232  0100               	movlb	0	; () banked
  4670  000234  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4671  000236  6EE1               	movwf	fsr1l,c
  4672  000238  50F4               	movf	prodh,w,c
  4673  00023A  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4674  00023C  6EE2               	movwf	fsr1h,c
  4675  00023E  CFDF FFE7          	movff	indf2,indf1
  4676                           
  4677                           ;main.c: 346: poligono_ext[point_dif_lat].fence_lat_deg[j] = fence_diff_lat[point][i];
  4678  000242  0103               	movlb	3	; () banked
  4679  000244  517B               	movf	verifica_fence_externo@point& (0+255),w,b
  4680  000246  0D0B               	mullw	11
  4681  000248  0E30               	movlw	low verifica_fence_externo@fence_diff_lat
  4682  00024A  0100               	movlb	0	; () banked
  4683  00024C  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4684  00024E  0E03               	movlw	high verifica_fence_externo@fence_diff_lat
  4685  000250  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4686  000252  50F3               	movf	prodl,w,c
  4687  000254  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4688  000256  50F4               	movf	prodh,w,c
  4689  000258  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4690  00025A  0103               	movlb	3	; () banked
  4691  00025C  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  4692  00025E  0D01               	mullw	1
  4693  000260  50F3               	movf	prodl,w,c
  4694  000262  0100               	movlb	0	; () banked
  4695  000264  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4696  000266  6ED9               	movwf	fsr2l,c
  4697  000268  50F4               	movf	prodh,w,c
  4698  00026A  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4699  00026C  6EDA               	movwf	fsr2h,c
  4700  00026E  0103               	movlb	3	; () banked
  4701  000270  5177               	movf	verifica_fence_externo@point_dif_lat& (0+255),w,b
  4702  000272  0D40               	mullw	64
  4703  000274  0E10               	movlw	low _poligono_ext
  4704  000276  0100               	movlb	0	; () banked
  4705  000278  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4706  00027A  0E01               	movlw	high _poligono_ext
  4707  00027C  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4708  00027E  50F3               	movf	prodl,w,c
  4709  000280  2783               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  4710  000282  50F4               	movf	prodh,w,c
  4711  000284  2384               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  4712  000286  0103               	movlb	3	; () banked
  4713  000288  5179               	movf	verifica_fence_externo@j& (0+255),w,b
  4714  00028A  0D01               	mullw	1
  4715  00028C  50F3               	movf	prodl,w,c
  4716  00028E  0100               	movlb	0	; () banked
  4717  000290  2583               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  4718  000292  6EE1               	movwf	fsr1l,c
  4719  000294  50F4               	movf	prodh,w,c
  4720  000296  2184               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  4721  000298  6EE2               	movwf	fsr1h,c
  4722  00029A  CFDF FFE7          	movff	indf2,indf1
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;main.c: 347: i++;
  4726  00029E  0103               	movlb	3	; () banked
  4727  0002A0  2B7C               	incf	verifica_fence_externo@i& (0+255),f,b
  4728                           
  4729                           ; BSR set to: 3
  4730  0002A2  2B79               	incf	verifica_fence_externo@j& (0+255),f,b
  4731  0002A4  D7A7               	goto	l11982
  4732  0002A6                     u16240:
  4733                           
  4734                           ; BSR set to: 3
  4735                           
  4736                           ; BSR set to: 3
  4737                           
  4738                           ; BSR set to: 3
  4739  0002A6  2B7C               	incf	verifica_fence_externo@i& (0+255),f,b
  4740  0002A8  D791               	goto	l11966
  4741  0002AA                     u16250:
  4742                           
  4743                           ; BSR set to: 3
  4744                           ;main.c: 348: }
  4745                           ;main.c: 350: }
  4746                           ;main.c: 351: }
  4747                           ;main.c: 355: if(point == 0 || point == 2)
  4748                           
  4749                           ; BSR set to: 3
  4750  0002AA  517B               	movf	verifica_fence_externo@point& (0+255),w,b
  4751  0002AC  B4D8               	btfsc	status,2,c
  4752  0002AE  D004               	goto	u16270
  4753                           
  4754                           ; BSR set to: 3
  4755  0002B0  0E02               	movlw	2
  4756  0002B2  197B               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4757  0002B4  A4D8               	btfss	status,2,c
  4758  0002B6  D0B5               	goto	l163
  4759  0002B8                     u16270:
  4760                           
  4761                           ; BSR set to: 3
  4762                           ;main.c: 356: {
  4763                           ;main.c: 357: temp_var_deg = atoi(poligono_ext[count].point_lat_deg);
  4764                           
  4765                           ; BSR set to: 3
  4766  0002B8  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  4767  0002BA  0D40               	mullw	64
  4768  0002BC  0E0C               	movlw	12
  4769  0002BE  26F3               	addwf	prodl,f,c
  4770  0002C0  0E00               	movlw	0
  4771  0002C2  22F4               	addwfc	prodh,f,c
  4772  0002C4  0E10               	movlw	low _poligono_ext
  4773  0002C6  24F3               	addwf	prodl,w,c
  4774  0002C8  0100               	movlb	0	; () banked
  4775  0002CA  6F66               	movwf	atoi@s& (0+255),b
  4776  0002CC  0E01               	movlw	high _poligono_ext
  4777  0002CE  20F4               	addwfc	prodh,w,c
  4778  0002D0  6F67               	movwf	(atoi@s+1)& (0+255),b
  4779  0002D2  EC0F  F021         	call	_atoi	;wreg free
  4780  0002D6  0100               	movlb	0	; () banked
  4781  0002D8  C066  F373         	movff	?_atoi,verifica_fence_externo@temp_var_deg
  4782  0002DC  C067  F374         	movff	?_atoi+1,verifica_fence_externo@temp_var_deg+1
  4783  0002E0  0103               	movlb	3	; () banked
  4784  0002E2  0E00               	movlw	0
  4785  0002E4  BF74               	btfsc	(verifica_fence_externo@temp_var_deg+1)& (0+255),7,b
  4786  0002E6  0EFF               	movlw	-1
  4787  0002E8  6F75               	movwf	(verifica_fence_externo@temp_var_deg+2)& (0+255),b
  4788  0002EA  6F76               	movwf	(verifica_fence_externo@temp_var_deg+3)& (0+255),b
  4789                           
  4790                           ;main.c: 358: poligono_ext[count].diff_lat_deg = atoi(poligono_ext[count].fence_lat_deg)
      +                          ;
  4791  0002EC  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  4792  0002EE  0D40               	mullw	64
  4793  0002F0  0E10               	movlw	low _poligono_ext
  4794  0002F2  24F3               	addwf	prodl,w,c
  4795  0002F4  0100               	movlb	0	; () banked
  4796  0002F6  6F66               	movwf	atoi@s& (0+255),b
  4797  0002F8  0E01               	movlw	high _poligono_ext
  4798  0002FA  20F4               	addwfc	prodh,w,c
  4799  0002FC  6F67               	movwf	(atoi@s+1)& (0+255),b
  4800  0002FE  EC0F  F021         	call	_atoi	;wreg free
  4801  000302  0100               	movlb	0	; () banked
  4802  000304  C066  F081         	movff	?_atoi,??_verifica_fence_externo
  4803  000308  C067  F082         	movff	?_atoi+1,??_verifica_fence_externo+1
  4804  00030C  0E00               	movlw	0
  4805  00030E  BF82               	btfsc	(??_verifica_fence_externo+1)& (0+255),7,b
  4806  000310  0EFF               	movlw	255
  4807  000312  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4808  000314  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4809  000316  0103               	movlb	3	; () banked
  4810  000318  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  4811  00031A  0D40               	mullw	64
  4812  00031C  0E18               	movlw	24
  4813  00031E  26F3               	addwf	prodl,f,c
  4814  000320  0E00               	movlw	0
  4815  000322  22F4               	addwfc	prodh,f,c
  4816  000324  0E10               	movlw	low _poligono_ext
  4817  000326  24F3               	addwf	prodl,w,c
  4818  000328  6ED9               	movwf	fsr2l,c
  4819  00032A  0E01               	movlw	high _poligono_ext
  4820  00032C  20F4               	addwfc	prodh,w,c
  4821  00032E  6EDA               	movwf	fsr2h,c
  4822  000330  C081  FFDE         	movff	??_verifica_fence_externo,postinc2
  4823  000334  C082  FFDE         	movff	??_verifica_fence_externo+1,postinc2
  4824  000338  C083  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  4825  00033C  C084  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  4826                           
  4827                           ; BSR set to: 3
  4828                           ;main.c: 359: poligono_ext[count].diff_lat_deg -= temp_var_deg;
  4829  000340  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  4830  000342  0D40               	mullw	64
  4831  000344  0E18               	movlw	24
  4832  000346  26F3               	addwf	prodl,f,c
  4833  000348  0E00               	movlw	0
  4834  00034A  22F4               	addwfc	prodh,f,c
  4835  00034C  0E10               	movlw	low _poligono_ext
  4836  00034E  24F3               	addwf	prodl,w,c
  4837  000350  6ED9               	movwf	fsr2l,c
  4838  000352  0E01               	movlw	high _poligono_ext
  4839  000354  20F4               	addwfc	prodh,w,c
  4840  000356  6EDA               	movwf	fsr2h,c
  4841  000358  5173               	movf	verifica_fence_externo@temp_var_deg& (0+255),w,b
  4842  00035A  5EDE               	subwf	postinc2,f,c
  4843  00035C  5174               	movf	(verifica_fence_externo@temp_var_deg+1)& (0+255),w,b
  4844  00035E  5ADE               	subwfb	postinc2,f,c
  4845  000360  5175               	movf	(verifica_fence_externo@temp_var_deg+2)& (0+255),w,b
  4846  000362  5ADE               	subwfb	postinc2,f,c
  4847  000364  5176               	movf	(verifica_fence_externo@temp_var_deg+3)& (0+255),w,b
  4848  000366  5ADE               	subwfb	postinc2,f,c
  4849                           
  4850                           ; BSR set to: 3
  4851                           ;main.c: 360: temp_var_deg = atoi(poligono_ext[count].point_long_deg);
  4852  000368  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  4853  00036A  0D40               	mullw	64
  4854  00036C  0E12               	movlw	18
  4855  00036E  26F3               	addwf	prodl,f,c
  4856  000370  0E00               	movlw	0
  4857  000372  22F4               	addwfc	prodh,f,c
  4858  000374  0E10               	movlw	low _poligono_ext
  4859  000376  24F3               	addwf	prodl,w,c
  4860  000378  0100               	movlb	0	; () banked
  4861  00037A  6F66               	movwf	atoi@s& (0+255),b
  4862  00037C  0E01               	movlw	high _poligono_ext
  4863  00037E  20F4               	addwfc	prodh,w,c
  4864  000380  6F67               	movwf	(atoi@s+1)& (0+255),b
  4865  000382  EC0F  F021         	call	_atoi	;wreg free
  4866  000386  0100               	movlb	0	; () banked
  4867  000388  C066  F373         	movff	?_atoi,verifica_fence_externo@temp_var_deg
  4868  00038C  C067  F374         	movff	?_atoi+1,verifica_fence_externo@temp_var_deg+1
  4869  000390  0103               	movlb	3	; () banked
  4870  000392  0E00               	movlw	0
  4871  000394  BF74               	btfsc	(verifica_fence_externo@temp_var_deg+1)& (0+255),7,b
  4872  000396  0EFF               	movlw	-1
  4873  000398  6F75               	movwf	(verifica_fence_externo@temp_var_deg+2)& (0+255),b
  4874  00039A  6F76               	movwf	(verifica_fence_externo@temp_var_deg+3)& (0+255),b
  4875                           
  4876                           ; BSR set to: 3
  4877                           ;main.c: 361: poligono_ext[count].diff_long_deg = atoi(poligono_ext[count].fence_long_de
      +                          g);
  4878  00039C  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  4879  00039E  0D40               	mullw	64
  4880  0003A0  0E06               	movlw	6
  4881  0003A2  26F3               	addwf	prodl,f,c
  4882  0003A4  0E00               	movlw	0
  4883  0003A6  22F4               	addwfc	prodh,f,c
  4884  0003A8  0E10               	movlw	low _poligono_ext
  4885  0003AA  24F3               	addwf	prodl,w,c
  4886  0003AC  0100               	movlb	0	; () banked
  4887  0003AE  6F66               	movwf	atoi@s& (0+255),b
  4888  0003B0  0E01               	movlw	high _poligono_ext
  4889  0003B2  20F4               	addwfc	prodh,w,c
  4890  0003B4  6F67               	movwf	(atoi@s+1)& (0+255),b
  4891  0003B6  EC0F  F021         	call	_atoi	;wreg free
  4892  0003BA  0100               	movlb	0	; () banked
  4893  0003BC  C066  F081         	movff	?_atoi,??_verifica_fence_externo
  4894  0003C0  C067  F082         	movff	?_atoi+1,??_verifica_fence_externo+1
  4895  0003C4  0E00               	movlw	0
  4896  0003C6  BF82               	btfsc	(??_verifica_fence_externo+1)& (0+255),7,b
  4897  0003C8  0EFF               	movlw	255
  4898  0003CA  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4899  0003CC  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4900  0003CE  0103               	movlb	3	; () banked
  4901  0003D0  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  4902  0003D2  0D40               	mullw	64
  4903  0003D4  0E1C               	movlw	28
  4904  0003D6  26F3               	addwf	prodl,f,c
  4905  0003D8  0E00               	movlw	0
  4906  0003DA  22F4               	addwfc	prodh,f,c
  4907  0003DC  0E10               	movlw	low _poligono_ext
  4908  0003DE  24F3               	addwf	prodl,w,c
  4909  0003E0  6ED9               	movwf	fsr2l,c
  4910  0003E2  0E01               	movlw	high _poligono_ext
  4911  0003E4  20F4               	addwfc	prodh,w,c
  4912  0003E6  6EDA               	movwf	fsr2h,c
  4913  0003E8  C081  FFDE         	movff	??_verifica_fence_externo,postinc2
  4914  0003EC  C082  FFDE         	movff	??_verifica_fence_externo+1,postinc2
  4915  0003F0  C083  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  4916  0003F4  C084  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  4917                           
  4918                           ; BSR set to: 3
  4919                           ;main.c: 362: poligono_ext[count].diff_long_deg -= temp_var_deg;
  4920  0003F8  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  4921  0003FA  0D40               	mullw	64
  4922  0003FC  0E1C               	movlw	28
  4923  0003FE  26F3               	addwf	prodl,f,c
  4924  000400  0E00               	movlw	0
  4925  000402  22F4               	addwfc	prodh,f,c
  4926  000404  0E10               	movlw	low _poligono_ext
  4927  000406  24F3               	addwf	prodl,w,c
  4928  000408  6ED9               	movwf	fsr2l,c
  4929  00040A  0E01               	movlw	high _poligono_ext
  4930  00040C  20F4               	addwfc	prodh,w,c
  4931  00040E  6EDA               	movwf	fsr2h,c
  4932  000410  5173               	movf	verifica_fence_externo@temp_var_deg& (0+255),w,b
  4933  000412  5EDE               	subwf	postinc2,f,c
  4934  000414  5174               	movf	(verifica_fence_externo@temp_var_deg+1)& (0+255),w,b
  4935  000416  5ADE               	subwfb	postinc2,f,c
  4936  000418  5175               	movf	(verifica_fence_externo@temp_var_deg+2)& (0+255),w,b
  4937  00041A  5ADE               	subwfb	postinc2,f,c
  4938  00041C  5176               	movf	(verifica_fence_externo@temp_var_deg+3)& (0+255),w,b
  4939  00041E  5ADE               	subwfb	postinc2,f,c
  4940                           
  4941                           ; BSR set to: 3
  4942                           ;main.c: 364: count++;
  4943  000420  2B7A               	incf	verifica_fence_externo@count& (0+255),f,b
  4944  000422                     l163:
  4945                           
  4946                           ; BSR set to: 3
  4947                           ;main.c: 365: }
  4948                           ;main.c: 366: point++;
  4949                           
  4950                           ; BSR set to: 3
  4951  000422  2B7B               	incf	verifica_fence_externo@point& (0+255),f,b
  4952  000424                     l145:
  4953                           
  4954                           ; BSR set to: 3
  4955                           
  4956                           ; BSR set to: 3
  4957  000424  0E03               	movlw	3
  4958  000426  657B               	cpfsgt	verifica_fence_externo@point& (0+255),b
  4959  000428  D65A               	goto	l146
  4960                           
  4961                           ; BSR set to: 3
  4962                           ;main.c: 367: }
  4963                           ;main.c: 373: point = 0;
  4964                           
  4965                           ; BSR set to: 3
  4966  00042A  0E00               	movlw	0
  4967  00042C  6F7B               	movwf	verifica_fence_externo@point& (0+255),b
  4968                           
  4969                           ;main.c: 374: count = 0;
  4970  00042E  0E00               	movlw	0
  4971  000430  6F7A               	movwf	verifica_fence_externo@count& (0+255),b
  4972                           
  4973                           ;main.c: 375: point_dif_lat = 0;
  4974  000432  0E00               	movlw	0
  4975  000434  6F77               	movwf	verifica_fence_externo@point_dif_lat& (0+255),b
  4976                           
  4977                           ;main.c: 376: point_dif_long = 0;
  4978  000436  0E00               	movlw	0
  4979  000438  6F78               	movwf	verifica_fence_externo@point_dif_long& (0+255),b
  4980                           
  4981                           ;main.c: 380: while(point<4)
  4982  00043A  D1CD               	goto	l167
  4983  00043C                     
  4984                           ; BSR set to: 3
  4985                           ;main.c: 381: {
  4986                           ;main.c: 382: for(i=6; i<11; i++)
  4987                           
  4988                           ; BSR set to: 3
  4989  00043C  0E06               	movlw	6
  4990  00043E  6F7C               	movwf	verifica_fence_externo@i& (0+255),b
  4991  000440                     l12022:
  4992                           
  4993                           ; BSR set to: 3
  4994  000440  0E0A               	movlw	10
  4995  000442  657C               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4996  000444  D001               	goto	l169
  4997  000446  D094               	goto	u16370
  4998  000448                     l169:
  4999                           
  5000                           ; BSR set to: 3
  5001                           ;main.c: 383: {
  5002                           ;main.c: 384: if(point == 0 || point == 2)
  5003                           
  5004                           ; BSR set to: 3
  5005  000448  517B               	movf	verifica_fence_externo@point& (0+255),w,b
  5006  00044A  B4D8               	btfsc	status,2,c
  5007  00044C  D004               	goto	u16310
  5008                           
  5009                           ; BSR set to: 3
  5010  00044E  0E02               	movlw	2
  5011  000450  197B               	xorwf	verifica_fence_externo@point& (0+255),w,b
  5012  000452  A4D8               	btfss	status,2,c
  5013  000454  D088               	goto	l171
  5014  000456                     u16310:
  5015                           
  5016                           ; BSR set to: 3
  5017                           ;main.c: 385: {
  5018                           ;main.c: 386: if(point == 2 && !point_dif_lat)
  5019                           
  5020                           ; BSR set to: 3
  5021  000456  0E02               	movlw	2
  5022  000458  197B               	xorwf	verifica_fence_externo@point& (0+255),w,b
  5023  00045A  A4D8               	btfss	status,2,c
  5024  00045C  D003               	goto	l174
  5025                           
  5026                           ; BSR set to: 3
  5027  00045E  5177               	movf	verifica_fence_externo@point_dif_lat& (0+255),w,b
  5028  000460  B4D8               	btfsc	status,2,c
  5029                           
  5030                           ; BSR set to: 3
  5031                           ;main.c: 387: {
  5032                           ;main.c: 388: point_dif_lat++;
  5033  000462  2B77               	incf	verifica_fence_externo@point_dif_lat& (0+255),f,b
  5034  000464                     l174:
  5035                           
  5036                           ; BSR set to: 3
  5037                           ;main.c: 389: }
  5038                           ;main.c: 390: if(fence_diff_lat[point][i] != temp_buff_lat[i])
  5039                           
  5040                           ; BSR set to: 3
  5041  000464  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  5042  000466  0D01               	mullw	1
  5043  000468  0E68               	movlw	low verifica_fence_externo@temp_buff_lat
  5044  00046A  24F3               	addwf	prodl,w,c
  5045  00046C  6ED9               	movwf	fsr2l,c
  5046  00046E  0E03               	movlw	high verifica_fence_externo@temp_buff_lat
  5047  000470  20F4               	addwfc	prodh,w,c
  5048  000472  6EDA               	movwf	fsr2h,c
  5049  000474  517B               	movf	verifica_fence_externo@point& (0+255),w,b
  5050  000476  0D0B               	mullw	11
  5051  000478  0E30               	movlw	low verifica_fence_externo@fence_diff_lat
  5052  00047A  0100               	movlb	0	; () banked
  5053  00047C  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5054  00047E  0E03               	movlw	high verifica_fence_externo@fence_diff_lat
  5055  000480  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5056  000482  50F3               	movf	prodl,w,c
  5057  000484  2782               	addwf	(??_verifica_fence_externo+1)& (0+255),f,b
  5058  000486  50F4               	movf	prodh,w,c
  5059  000488  2383               	addwfc	(??_verifica_fence_externo+2)& (0+255),f,b
  5060  00048A  0103               	movlb	3	; () banked
  5061  00048C  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  5062  00048E  0D01               	mullw	1
  5063  000490  50F3               	movf	prodl,w,c
  5064  000492  0100               	movlb	0	; () banked
  5065  000494  2582               	addwf	(??_verifica_fence_externo+1)& (0+255),w,b
  5066  000496  6EE1               	movwf	fsr1l,c
  5067  000498  50F4               	movf	prodh,w,c
  5068  00049A  2183               	addwfc	(??_verifica_fence_externo+2)& (0+255),w,b
  5069  00049C  6EE2               	movwf	fsr1h,c
  5070  00049E  50DE               	movf	postinc2,w,c
  5071  0004A0  18E6               	xorwf	postinc1,w,c
  5072  0004A2  B4D8               	btfsc	status,2,c
  5073  0004A4  D062               	goto	l178
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;main.c: 391: {
  5077                           ;main.c: 392: for(j= 0; i < 11; j++)
  5078  0004A6  0E00               	movlw	0
  5079  0004A8  0103               	movlb	3	; () banked
  5080  0004AA  6F79               	movwf	verifica_fence_externo@j& (0+255),b
  5081  0004AC                     l12040:
  5082                           
  5083                           ; BSR set to: 3
  5084  0004AC  0E0A               	movlw	10
  5085  0004AE  657C               	cpfsgt	verifica_fence_externo@i& (0+255),b
  5086  0004B0  D001               	goto	l176
  5087  0004B2  D05B               	goto	l178
  5088  0004B4                     l176:
  5089                           
  5090                           ; BSR set to: 3
  5091                           ;main.c: 393: {
  5092                           ;main.c: 394: poligono_ext[point_dif_lat].fence_lat_min[j] = fence_diff_lat[point][i];
  5093                           
  5094                           ; BSR set to: 3
  5095  0004B4  517B               	movf	verifica_fence_externo@point& (0+255),w,b
  5096  0004B6  0D0B               	mullw	11
  5097  0004B8  0E30               	movlw	low verifica_fence_externo@fence_diff_lat
  5098  0004BA  0100               	movlb	0	; () banked
  5099  0004BC  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  5100  0004BE  0E03               	movlw	high verifica_fence_externo@fence_diff_lat
  5101  0004C0  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5102  0004C2  50F3               	movf	prodl,w,c
  5103  0004C4  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  5104  0004C6  50F4               	movf	prodh,w,c
  5105  0004C8  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  5106  0004CA  0103               	movlb	3	; () banked
  5107  0004CC  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  5108  0004CE  0D01               	mullw	1
  5109  0004D0  50F3               	movf	prodl,w,c
  5110  0004D2  0100               	movlb	0	; () banked
  5111  0004D4  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5112  0004D6  6ED9               	movwf	fsr2l,c
  5113  0004D8  50F4               	movf	prodh,w,c
  5114  0004DA  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5115  0004DC  6EDA               	movwf	fsr2h,c
  5116  0004DE  0103               	movlb	3	; () banked
  5117  0004E0  5179               	movf	verifica_fence_externo@j& (0+255),w,b
  5118  0004E2  0D01               	mullw	1
  5119  0004E4  0E20               	movlw	32
  5120  0004E6  26F3               	addwf	prodl,f,c
  5121  0004E8  0E00               	movlw	0
  5122  0004EA  22F4               	addwfc	prodh,f,c
  5123  0004EC  0E10               	movlw	low _poligono_ext
  5124  0004EE  0100               	movlb	0	; () banked
  5125  0004F0  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5126  0004F2  0E01               	movlw	high _poligono_ext
  5127  0004F4  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  5128  0004F6  50F3               	movf	prodl,w,c
  5129  0004F8  2783               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  5130  0004FA  50F4               	movf	prodh,w,c
  5131  0004FC  2384               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  5132  0004FE  0103               	movlb	3	; () banked
  5133  000500  5177               	movf	verifica_fence_externo@point_dif_lat& (0+255),w,b
  5134  000502  0D40               	mullw	64
  5135  000504  50F3               	movf	prodl,w,c
  5136  000506  0100               	movlb	0	; () banked
  5137  000508  2583               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  5138  00050A  6EE1               	movwf	fsr1l,c
  5139  00050C  50F4               	movf	prodh,w,c
  5140  00050E  2184               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  5141  000510  6EE2               	movwf	fsr1h,c
  5142  000512  CFDF FFE7          	movff	indf2,indf1
  5143                           
  5144                           ;main.c: 395: poligono_ext[point_dif_lat].point_lat_min[j] = temp_buff_lat[i];
  5145  000516  0103               	movlb	3	; () banked
  5146  000518  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  5147  00051A  0D01               	mullw	1
  5148  00051C  0E68               	movlw	low verifica_fence_externo@temp_buff_lat
  5149  00051E  24F3               	addwf	prodl,w,c
  5150  000520  6ED9               	movwf	fsr2l,c
  5151  000522  0E03               	movlw	high verifica_fence_externo@temp_buff_lat
  5152  000524  20F4               	addwfc	prodh,w,c
  5153  000526  6EDA               	movwf	fsr2h,c
  5154  000528  5179               	movf	verifica_fence_externo@j& (0+255),w,b
  5155  00052A  0D01               	mullw	1
  5156  00052C  0E2C               	movlw	44
  5157  00052E  26F3               	addwf	prodl,f,c
  5158  000530  0E00               	movlw	0
  5159  000532  22F4               	addwfc	prodh,f,c
  5160  000534  0E10               	movlw	low _poligono_ext
  5161  000536  0100               	movlb	0	; () banked
  5162  000538  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  5163  00053A  0E01               	movlw	high _poligono_ext
  5164  00053C  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5165  00053E  50F3               	movf	prodl,w,c
  5166  000540  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  5167  000542  50F4               	movf	prodh,w,c
  5168  000544  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  5169  000546  0103               	movlb	3	; () banked
  5170  000548  5177               	movf	verifica_fence_externo@point_dif_lat& (0+255),w,b
  5171  00054A  0D40               	mullw	64
  5172  00054C  50F3               	movf	prodl,w,c
  5173  00054E  0100               	movlb	0	; () banked
  5174  000550  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5175  000552  6EE1               	movwf	fsr1l,c
  5176  000554  50F4               	movf	prodh,w,c
  5177  000556  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5178  000558  6EE2               	movwf	fsr1h,c
  5179  00055A  CFDF FFE7          	movff	indf2,indf1
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;main.c: 396: i++;
  5183  00055E  0103               	movlb	3	; () banked
  5184  000560  2B7C               	incf	verifica_fence_externo@i& (0+255),f,b
  5185                           
  5186                           ; BSR set to: 3
  5187  000562  2B79               	incf	verifica_fence_externo@j& (0+255),f,b
  5188  000564  D7A3               	goto	l12040
  5189  000566                     l171:
  5190                           
  5191                           ; BSR set to: 3
  5192                           ;main.c: 402: else
  5193                           ;main.c: 403: {
  5194                           ;main.c: 404: i = 11;
  5195                           
  5196                           ; BSR set to: 3
  5197  000566  0E0B               	movlw	11
  5198  000568  6F7C               	movwf	verifica_fence_externo@i& (0+255),b
  5199  00056A                     l178:
  5200                           
  5201                           ; BSR set to: 3
  5202  00056A  0103               	movlb	3	; () banked
  5203  00056C  2B7C               	incf	verifica_fence_externo@i& (0+255),f,b
  5204  00056E  D768               	goto	l12022
  5205  000570                     u16370:
  5206                           
  5207                           ; BSR set to: 3
  5208                           ;main.c: 405: }
  5209                           ;main.c: 406: }
  5210                           ;main.c: 408: for(i=7; i<12; i++)
  5211                           
  5212                           ; BSR set to: 3
  5213  000570  0E07               	movlw	7
  5214  000572  6F7C               	movwf	verifica_fence_externo@i& (0+255),b
  5215  000574                     l12060:
  5216                           
  5217                           ; BSR set to: 3
  5218  000574  0E0B               	movlw	11
  5219  000576  657C               	cpfsgt	verifica_fence_externo@i& (0+255),b
  5220  000578  D001               	goto	l179
  5221  00057A  D094               	goto	u16460
  5222  00057C                     l179:
  5223                           
  5224                           ; BSR set to: 3
  5225                           ;main.c: 409: {
  5226                           ;main.c: 410: if(point == 0 || point == 2)
  5227                           
  5228                           ; BSR set to: 3
  5229  00057C  517B               	movf	verifica_fence_externo@point& (0+255),w,b
  5230  00057E  B4D8               	btfsc	status,2,c
  5231  000580  D004               	goto	u16400
  5232                           
  5233                           ; BSR set to: 3
  5234  000582  0E02               	movlw	2
  5235  000584  197B               	xorwf	verifica_fence_externo@point& (0+255),w,b
  5236  000586  A4D8               	btfss	status,2,c
  5237  000588  D088               	goto	l181
  5238  00058A                     u16400:
  5239                           
  5240                           ; BSR set to: 3
  5241                           ;main.c: 411: {
  5242                           ;main.c: 412: if(point == 2 && !point_dif_long)
  5243                           
  5244                           ; BSR set to: 3
  5245  00058A  0E02               	movlw	2
  5246  00058C  197B               	xorwf	verifica_fence_externo@point& (0+255),w,b
  5247  00058E  A4D8               	btfss	status,2,c
  5248  000590  D003               	goto	l184
  5249                           
  5250                           ; BSR set to: 3
  5251  000592  5178               	movf	verifica_fence_externo@point_dif_long& (0+255),w,b
  5252  000594  B4D8               	btfsc	status,2,c
  5253                           
  5254                           ; BSR set to: 3
  5255                           ;main.c: 413: {
  5256                           ;main.c: 414: point_dif_long++;
  5257  000596  2B78               	incf	verifica_fence_externo@point_dif_long& (0+255),f,b
  5258  000598                     l184:
  5259                           
  5260                           ; BSR set to: 3
  5261                           ;main.c: 415: }
  5262                           ;main.c: 418: if(fence_diff_long[point][i] != temp_buff_long[i])
  5263                           
  5264                           ; BSR set to: 3
  5265  000598  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  5266  00059A  0D01               	mullw	1
  5267  00059C  0E5C               	movlw	low verifica_fence_externo@temp_buff_long
  5268  00059E  24F3               	addwf	prodl,w,c
  5269  0005A0  6ED9               	movwf	fsr2l,c
  5270  0005A2  0E03               	movlw	high verifica_fence_externo@temp_buff_long
  5271  0005A4  20F4               	addwfc	prodh,w,c
  5272  0005A6  6EDA               	movwf	fsr2h,c
  5273  0005A8  517B               	movf	verifica_fence_externo@point& (0+255),w,b
  5274  0005AA  0D0C               	mullw	12
  5275  0005AC  0E00               	movlw	low verifica_fence_externo@fence_diff_long
  5276  0005AE  0100               	movlb	0	; () banked
  5277  0005B0  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5278  0005B2  0E03               	movlw	high verifica_fence_externo@fence_diff_long
  5279  0005B4  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5280  0005B6  50F3               	movf	prodl,w,c
  5281  0005B8  2782               	addwf	(??_verifica_fence_externo+1)& (0+255),f,b
  5282  0005BA  50F4               	movf	prodh,w,c
  5283  0005BC  2383               	addwfc	(??_verifica_fence_externo+2)& (0+255),f,b
  5284  0005BE  0103               	movlb	3	; () banked
  5285  0005C0  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  5286  0005C2  0D01               	mullw	1
  5287  0005C4  50F3               	movf	prodl,w,c
  5288  0005C6  0100               	movlb	0	; () banked
  5289  0005C8  2582               	addwf	(??_verifica_fence_externo+1)& (0+255),w,b
  5290  0005CA  6EE1               	movwf	fsr1l,c
  5291  0005CC  50F4               	movf	prodh,w,c
  5292  0005CE  2183               	addwfc	(??_verifica_fence_externo+2)& (0+255),w,b
  5293  0005D0  6EE2               	movwf	fsr1h,c
  5294  0005D2  50DE               	movf	postinc2,w,c
  5295  0005D4  18E6               	xorwf	postinc1,w,c
  5296  0005D6  B4D8               	btfsc	status,2,c
  5297  0005D8  D062               	goto	l188
  5298                           
  5299                           ; BSR set to: 0
  5300                           ;main.c: 419: {
  5301                           ;main.c: 420: for(j= 0; i < 12; j++)
  5302  0005DA  0E00               	movlw	0
  5303  0005DC  0103               	movlb	3	; () banked
  5304  0005DE  6F79               	movwf	verifica_fence_externo@j& (0+255),b
  5305  0005E0                     l12078:
  5306                           
  5307                           ; BSR set to: 3
  5308  0005E0  0E0B               	movlw	11
  5309  0005E2  657C               	cpfsgt	verifica_fence_externo@i& (0+255),b
  5310  0005E4  D001               	goto	l186
  5311  0005E6  D05B               	goto	l188
  5312  0005E8                     l186:
  5313                           
  5314                           ; BSR set to: 3
  5315                           ;main.c: 421: {
  5316                           ;main.c: 422: poligono_ext[point_dif_long].fence_long_min[j] = fence_diff_long[point][i]
      +                          ;
  5317                           
  5318                           ; BSR set to: 3
  5319  0005E8  517B               	movf	verifica_fence_externo@point& (0+255),w,b
  5320  0005EA  0D0C               	mullw	12
  5321  0005EC  0E00               	movlw	low verifica_fence_externo@fence_diff_long
  5322  0005EE  0100               	movlb	0	; () banked
  5323  0005F0  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  5324  0005F2  0E03               	movlw	high verifica_fence_externo@fence_diff_long
  5325  0005F4  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5326  0005F6  50F3               	movf	prodl,w,c
  5327  0005F8  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  5328  0005FA  50F4               	movf	prodh,w,c
  5329  0005FC  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  5330  0005FE  0103               	movlb	3	; () banked
  5331  000600  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  5332  000602  0D01               	mullw	1
  5333  000604  50F3               	movf	prodl,w,c
  5334  000606  0100               	movlb	0	; () banked
  5335  000608  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5336  00060A  6ED9               	movwf	fsr2l,c
  5337  00060C  50F4               	movf	prodh,w,c
  5338  00060E  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5339  000610  6EDA               	movwf	fsr2h,c
  5340  000612  0103               	movlb	3	; () banked
  5341  000614  5179               	movf	verifica_fence_externo@j& (0+255),w,b
  5342  000616  0D01               	mullw	1
  5343  000618  0E26               	movlw	38
  5344  00061A  26F3               	addwf	prodl,f,c
  5345  00061C  0E00               	movlw	0
  5346  00061E  22F4               	addwfc	prodh,f,c
  5347  000620  0E10               	movlw	low _poligono_ext
  5348  000622  0100               	movlb	0	; () banked
  5349  000624  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5350  000626  0E01               	movlw	high _poligono_ext
  5351  000628  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  5352  00062A  50F3               	movf	prodl,w,c
  5353  00062C  2783               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  5354  00062E  50F4               	movf	prodh,w,c
  5355  000630  2384               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  5356  000632  0103               	movlb	3	; () banked
  5357  000634  5178               	movf	verifica_fence_externo@point_dif_long& (0+255),w,b
  5358  000636  0D40               	mullw	64
  5359  000638  50F3               	movf	prodl,w,c
  5360  00063A  0100               	movlb	0	; () banked
  5361  00063C  2583               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  5362  00063E  6EE1               	movwf	fsr1l,c
  5363  000640  50F4               	movf	prodh,w,c
  5364  000642  2184               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  5365  000644  6EE2               	movwf	fsr1h,c
  5366  000646  CFDF FFE7          	movff	indf2,indf1
  5367                           
  5368                           ;main.c: 423: poligono_ext[point_dif_long].point_long_min[j] = temp_buff_long[i];
  5369  00064A  0103               	movlb	3	; () banked
  5370  00064C  517C               	movf	verifica_fence_externo@i& (0+255),w,b
  5371  00064E  0D01               	mullw	1
  5372  000650  0E5C               	movlw	low verifica_fence_externo@temp_buff_long
  5373  000652  24F3               	addwf	prodl,w,c
  5374  000654  6ED9               	movwf	fsr2l,c
  5375  000656  0E03               	movlw	high verifica_fence_externo@temp_buff_long
  5376  000658  20F4               	addwfc	prodh,w,c
  5377  00065A  6EDA               	movwf	fsr2h,c
  5378  00065C  5179               	movf	verifica_fence_externo@j& (0+255),w,b
  5379  00065E  0D01               	mullw	1
  5380  000660  0E32               	movlw	50
  5381  000662  26F3               	addwf	prodl,f,c
  5382  000664  0E00               	movlw	0
  5383  000666  22F4               	addwfc	prodh,f,c
  5384  000668  0E10               	movlw	low _poligono_ext
  5385  00066A  0100               	movlb	0	; () banked
  5386  00066C  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  5387  00066E  0E01               	movlw	high _poligono_ext
  5388  000670  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5389  000672  50F3               	movf	prodl,w,c
  5390  000674  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  5391  000676  50F4               	movf	prodh,w,c
  5392  000678  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  5393  00067A  0103               	movlb	3	; () banked
  5394  00067C  5178               	movf	verifica_fence_externo@point_dif_long& (0+255),w,b
  5395  00067E  0D40               	mullw	64
  5396  000680  50F3               	movf	prodl,w,c
  5397  000682  0100               	movlb	0	; () banked
  5398  000684  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5399  000686  6EE1               	movwf	fsr1l,c
  5400  000688  50F4               	movf	prodh,w,c
  5401  00068A  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5402  00068C  6EE2               	movwf	fsr1h,c
  5403  00068E  CFDF FFE7          	movff	indf2,indf1
  5404                           
  5405                           ; BSR set to: 0
  5406                           ;main.c: 424: i++;
  5407  000692  0103               	movlb	3	; () banked
  5408  000694  2B7C               	incf	verifica_fence_externo@i& (0+255),f,b
  5409                           
  5410                           ; BSR set to: 3
  5411  000696  2B79               	incf	verifica_fence_externo@j& (0+255),f,b
  5412  000698  D7A3               	goto	l12078
  5413  00069A                     l181:
  5414                           
  5415                           ; BSR set to: 3
  5416                           ;main.c: 428: else
  5417                           ;main.c: 429: {
  5418                           ;main.c: 430: i = 11;
  5419                           
  5420                           ; BSR set to: 3
  5421  00069A  0E0B               	movlw	11
  5422  00069C  6F7C               	movwf	verifica_fence_externo@i& (0+255),b
  5423  00069E                     l188:
  5424                           
  5425                           ; BSR set to: 3
  5426  00069E  0103               	movlb	3	; () banked
  5427  0006A0  2B7C               	incf	verifica_fence_externo@i& (0+255),f,b
  5428  0006A2  D768               	goto	l12060
  5429  0006A4                     u16460:
  5430                           
  5431                           ; BSR set to: 3
  5432                           ;main.c: 431: }
  5433                           ;main.c: 433: }
  5434                           ;main.c: 434: if(point == 0 || point == 2)
  5435                           
  5436                           ; BSR set to: 3
  5437  0006A4  517B               	movf	verifica_fence_externo@point& (0+255),w,b
  5438  0006A6  B4D8               	btfsc	status,2,c
  5439  0006A8  D004               	goto	u16480
  5440                           
  5441                           ; BSR set to: 3
  5442  0006AA  0E02               	movlw	2
  5443  0006AC  197B               	xorwf	verifica_fence_externo@point& (0+255),w,b
  5444  0006AE  A4D8               	btfss	status,2,c
  5445  0006B0  D091               	goto	l189
  5446  0006B2                     u16480:
  5447                           
  5448                           ; BSR set to: 3
  5449                           ;main.c: 435: {
  5450                           ;main.c: 436: poligono_ext[count].diff_lat_min = (atoi(poligono_ext[count].fence_lat_min
      +                          )) - (atoi(poligono_ext[count].point_lat_min));
  5451                           
  5452                           ; BSR set to: 3
  5453  0006B2  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  5454  0006B4  0D40               	mullw	64
  5455  0006B6  0E20               	movlw	32
  5456  0006B8  26F3               	addwf	prodl,f,c
  5457  0006BA  0E00               	movlw	0
  5458  0006BC  22F4               	addwfc	prodh,f,c
  5459  0006BE  0E10               	movlw	low _poligono_ext
  5460  0006C0  24F3               	addwf	prodl,w,c
  5461  0006C2  0100               	movlb	0	; () banked
  5462  0006C4  6F66               	movwf	atoi@s& (0+255),b
  5463  0006C6  0E01               	movlw	high _poligono_ext
  5464  0006C8  20F4               	addwfc	prodh,w,c
  5465  0006CA  6F67               	movwf	(atoi@s+1)& (0+255),b
  5466  0006CC  EC0F  F021         	call	_atoi	;wreg free
  5467  0006D0  C066  F081         	movff	?_atoi,??_verifica_fence_externo
  5468  0006D4  C067  F082         	movff	?_atoi+1,??_verifica_fence_externo+1
  5469  0006D8  0103               	movlb	3	; () banked
  5470  0006DA  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  5471  0006DC  0D40               	mullw	64
  5472  0006DE  0E2C               	movlw	44
  5473  0006E0  26F3               	addwf	prodl,f,c
  5474  0006E2  0E00               	movlw	0
  5475  0006E4  22F4               	addwfc	prodh,f,c
  5476  0006E6  0E10               	movlw	low _poligono_ext
  5477  0006E8  24F3               	addwf	prodl,w,c
  5478  0006EA  0100               	movlb	0	; () banked
  5479  0006EC  6F66               	movwf	atoi@s& (0+255),b
  5480  0006EE  0E01               	movlw	high _poligono_ext
  5481  0006F0  20F4               	addwfc	prodh,w,c
  5482  0006F2  6F67               	movwf	(atoi@s+1)& (0+255),b
  5483  0006F4  EC0F  F021         	call	_atoi	;wreg free
  5484  0006F8  0100               	movlb	0	; () banked
  5485  0006FA  1F66               	comf	?_atoi& (0+255),f,b
  5486  0006FC  1F67               	comf	(?_atoi+1)& (0+255),f,b
  5487  0006FE  4B66               	infsnz	?_atoi& (0+255),f,b
  5488  000700  2B67               	incf	(?_atoi+1)& (0+255),f,b
  5489  000702  5166               	movf	?_atoi& (0+255),w,b
  5490  000704  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5491  000706  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5492  000708  5167               	movf	(?_atoi+1)& (0+255),w,b
  5493  00070A  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5494  00070C  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  5495  00070E  6B85               	clrf	(??_verifica_fence_externo+4)& (0+255),b
  5496  000710  BF84               	btfsc	(??_verifica_fence_externo+3)& (0+255),7,b
  5497  000712  0785               	decf	(??_verifica_fence_externo+4)& (0+255),f,b
  5498  000714  5185               	movf	(??_verifica_fence_externo+4)& (0+255),w,b
  5499  000716  6F86               	movwf	(??_verifica_fence_externo+5)& (0+255),b
  5500  000718  0103               	movlb	3	; () banked
  5501  00071A  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  5502  00071C  0D40               	mullw	64
  5503  00071E  0E38               	movlw	56
  5504  000720  26F3               	addwf	prodl,f,c
  5505  000722  0E00               	movlw	0
  5506  000724  22F4               	addwfc	prodh,f,c
  5507  000726  0E10               	movlw	low _poligono_ext
  5508  000728  24F3               	addwf	prodl,w,c
  5509  00072A  6ED9               	movwf	fsr2l,c
  5510  00072C  0E01               	movlw	high _poligono_ext
  5511  00072E  20F4               	addwfc	prodh,w,c
  5512  000730  6EDA               	movwf	fsr2h,c
  5513  000732  C083  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  5514  000736  C084  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  5515  00073A  C085  FFDE         	movff	??_verifica_fence_externo+4,postinc2
  5516  00073E  C086  FFDE         	movff	??_verifica_fence_externo+5,postinc2
  5517                           
  5518                           ;main.c: 437: poligono_ext[count].diff_long_min = (atoi(poligono_ext[count].fence_long_m
      +                          in)) - (atoi(poligono_ext[count].point_long_min));
  5519  000742  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  5520  000744  0D40               	mullw	64
  5521  000746  0E26               	movlw	38
  5522  000748  26F3               	addwf	prodl,f,c
  5523  00074A  0E00               	movlw	0
  5524  00074C  22F4               	addwfc	prodh,f,c
  5525  00074E  0E10               	movlw	low _poligono_ext
  5526  000750  24F3               	addwf	prodl,w,c
  5527  000752  0100               	movlb	0	; () banked
  5528  000754  6F66               	movwf	atoi@s& (0+255),b
  5529  000756  0E01               	movlw	high _poligono_ext
  5530  000758  20F4               	addwfc	prodh,w,c
  5531  00075A  6F67               	movwf	(atoi@s+1)& (0+255),b
  5532  00075C  EC0F  F021         	call	_atoi	;wreg free
  5533  000760  C066  F081         	movff	?_atoi,??_verifica_fence_externo
  5534  000764  C067  F082         	movff	?_atoi+1,??_verifica_fence_externo+1
  5535  000768  0103               	movlb	3	; () banked
  5536  00076A  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  5537  00076C  0D40               	mullw	64
  5538  00076E  0E32               	movlw	50
  5539  000770  26F3               	addwf	prodl,f,c
  5540  000772  0E00               	movlw	0
  5541  000774  22F4               	addwfc	prodh,f,c
  5542  000776  0E10               	movlw	low _poligono_ext
  5543  000778  24F3               	addwf	prodl,w,c
  5544  00077A  0100               	movlb	0	; () banked
  5545  00077C  6F66               	movwf	atoi@s& (0+255),b
  5546  00077E  0E01               	movlw	high _poligono_ext
  5547  000780  20F4               	addwfc	prodh,w,c
  5548  000782  6F67               	movwf	(atoi@s+1)& (0+255),b
  5549  000784  EC0F  F021         	call	_atoi	;wreg free
  5550  000788  0100               	movlb	0	; () banked
  5551  00078A  1F66               	comf	?_atoi& (0+255),f,b
  5552  00078C  1F67               	comf	(?_atoi+1)& (0+255),f,b
  5553  00078E  4B66               	infsnz	?_atoi& (0+255),f,b
  5554  000790  2B67               	incf	(?_atoi+1)& (0+255),f,b
  5555  000792  5166               	movf	?_atoi& (0+255),w,b
  5556  000794  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5557  000796  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5558  000798  5167               	movf	(?_atoi+1)& (0+255),w,b
  5559  00079A  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5560  00079C  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  5561  00079E  6B85               	clrf	(??_verifica_fence_externo+4)& (0+255),b
  5562  0007A0  BF84               	btfsc	(??_verifica_fence_externo+3)& (0+255),7,b
  5563  0007A2  0785               	decf	(??_verifica_fence_externo+4)& (0+255),f,b
  5564  0007A4  5185               	movf	(??_verifica_fence_externo+4)& (0+255),w,b
  5565  0007A6  6F86               	movwf	(??_verifica_fence_externo+5)& (0+255),b
  5566  0007A8  0103               	movlb	3	; () banked
  5567  0007AA  517A               	movf	verifica_fence_externo@count& (0+255),w,b
  5568  0007AC  0D40               	mullw	64
  5569  0007AE  0E3C               	movlw	60
  5570  0007B0  26F3               	addwf	prodl,f,c
  5571  0007B2  0E00               	movlw	0
  5572  0007B4  22F4               	addwfc	prodh,f,c
  5573  0007B6  0E10               	movlw	low _poligono_ext
  5574  0007B8  24F3               	addwf	prodl,w,c
  5575  0007BA  6ED9               	movwf	fsr2l,c
  5576  0007BC  0E01               	movlw	high _poligono_ext
  5577  0007BE  20F4               	addwfc	prodh,w,c
  5578  0007C0  6EDA               	movwf	fsr2h,c
  5579  0007C2  C083  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  5580  0007C6  C084  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  5581  0007CA  C085  FFDE         	movff	??_verifica_fence_externo+4,postinc2
  5582  0007CE  C086  FFDE         	movff	??_verifica_fence_externo+5,postinc2
  5583                           
  5584                           ; BSR set to: 3
  5585                           ;main.c: 438: count++;
  5586  0007D2  2B7A               	incf	verifica_fence_externo@count& (0+255),f,b
  5587  0007D4                     l189:
  5588                           
  5589                           ; BSR set to: 3
  5590                           ;main.c: 439: }
  5591                           ;main.c: 441: point++;
  5592                           
  5593                           ; BSR set to: 3
  5594  0007D4  2B7B               	incf	verifica_fence_externo@point& (0+255),f,b
  5595  0007D6                     l167:
  5596                           
  5597                           ; BSR set to: 3
  5598                           
  5599                           ; BSR set to: 3
  5600  0007D6  0E03               	movlw	3
  5601  0007D8  657B               	cpfsgt	verifica_fence_externo@point& (0+255),b
  5602  0007DA  D630               	goto	l168
  5603                           
  5604                           ; BSR set to: 3
  5605                           ;main.c: 442: }
  5606                           ;main.c: 443: count = 0;
  5607                           
  5608                           ; BSR set to: 3
  5609  0007DC  0E00               	movlw	0
  5610  0007DE  6F7A               	movwf	verifica_fence_externo@count& (0+255),b
  5611                           
  5612                           ;main.c: 444: point = 0;
  5613  0007E0  0E00               	movlw	0
  5614  0007E2  6F7B               	movwf	verifica_fence_externo@point& (0+255),b
  5615                           
  5616                           ;main.c: 450: switch(temp_buff_long[0])
  5617  0007E4  D04E               	goto	l193
  5618  0007E6                     
  5619                           ; BSR set to: 3
  5620                           ;main.c: 453: if(
  5621                           ;main.c: 454: ((poligono_ext[0].diff_long_min >= 0 &&
  5622                           ;main.c: 455: poligono_ext[1].diff_long_min <= 0) &&
  5623                           ;main.c: 457: (poligono_ext[0].diff_long_deg >= 0 &&
  5624                           ;main.c: 458: poligono_ext[1].diff_long_deg <= 0)))
  5625                           
  5626                           ; BSR set to: 3
  5627  0007E6  0101               	movlb	1	; () banked
  5628  0007E8  BF4F               	btfsc	(_poligono_ext+63)& (0+255),7,b
  5629  0007EA  D02C               	goto	l205
  5630                           
  5631                           ; BSR set to: 1
  5632  0007EC  BF8F               	btfsc	(_poligono_ext+127)& (0+255),7,b
  5633  0007EE  D007               	goto	u16510
  5634  0007F0  518F               	movf	(_poligono_ext+127)& (0+255),w,b
  5635  0007F2  118E               	iorwf	(_poligono_ext+126)& (0+255),w,b
  5636  0007F4  118D               	iorwf	(_poligono_ext+125)& (0+255),w,b
  5637  0007F6  E126               	bnz	l12138
  5638  0007F8  058C               	decf	(_poligono_ext+124)& (0+255),w,b
  5639  0007FA  B0D8               	btfsc	status,0,c
  5640  0007FC  D023               	goto	l205
  5641  0007FE                     u16510:
  5642                           
  5643                           ; BSR set to: 1
  5644  0007FE  BF2F               	btfsc	(_poligono_ext+31)& (0+255),7,b
  5645  000800  D021               	goto	l205
  5646                           
  5647                           ; BSR set to: 1
  5648  000802  BF6F               	btfsc	(_poligono_ext+95)& (0+255),7,b
  5649  000804  D038               	goto	u16650
  5650  000806  516F               	movf	(_poligono_ext+95)& (0+255),w,b
  5651  000808  116E               	iorwf	(_poligono_ext+94)& (0+255),w,b
  5652  00080A  116D               	iorwf	(_poligono_ext+93)& (0+255),w,b
  5653  00080C  E11B               	bnz	l12138
  5654  00080E  056C               	decf	(_poligono_ext+92)& (0+255),w,b
  5655  000810  A0D8               	btfss	status,0,c
  5656  000812  D031               	goto	u16650
  5657                           
  5658                           ; BSR set to: 0
  5659                           
  5660                           ;main.c: 461: }
  5661                           
  5662                           ; BSR set to: 1
  5663                           ;main.c: 459: {
  5664                           ;main.c: 460: flag[0].point = 0;
  5665  000814  D017               	goto	l205
  5666  000816                     
  5667                           ;main.c: 478: if(
  5668                           ;main.c: 479: (poligono_ext[0].diff_long_min <= 0 &&
  5669                           ;main.c: 480: poligono_ext[1].diff_long_min >= 0 ) &&
  5670                           ;main.c: 481: (poligono_ext[0].diff_lat_deg <= 0 &&
  5671                           ;main.c: 482: poligono_ext[1].diff_lat_deg >= 0))
  5672                           
  5673                           ; BSR set to: 0
  5674  000816  0101               	movlb	1	; () banked
  5675  000818  BF4F               	btfsc	(_poligono_ext+63)& (0+255),7,b
  5676  00081A  D007               	goto	u16580
  5677  00081C  514F               	movf	(_poligono_ext+63)& (0+255),w,b
  5678  00081E  114E               	iorwf	(_poligono_ext+62)& (0+255),w,b
  5679  000820  114D               	iorwf	(_poligono_ext+61)& (0+255),w,b
  5680  000822  E110               	bnz	l12138
  5681  000824  054C               	decf	(_poligono_ext+60)& (0+255),w,b
  5682  000826  B0D8               	btfsc	status,0,c
  5683  000828  D00D               	goto	l205
  5684  00082A                     u16580:
  5685                           
  5686                           ; BSR set to: 1
  5687  00082A  BF8F               	btfsc	(_poligono_ext+127)& (0+255),7,b
  5688  00082C  D00B               	goto	l205
  5689                           
  5690                           ; BSR set to: 1
  5691  00082E  BF2B               	btfsc	(_poligono_ext+27)& (0+255),7,b
  5692  000830  D007               	goto	u16600
  5693  000832  512B               	movf	(_poligono_ext+27)& (0+255),w,b
  5694  000834  112A               	iorwf	(_poligono_ext+26)& (0+255),w,b
  5695  000836  1129               	iorwf	(_poligono_ext+25)& (0+255),w,b
  5696  000838  E105               	bnz	l12138
  5697  00083A  0528               	decf	(_poligono_ext+24)& (0+255),w,b
  5698  00083C  B0D8               	btfsc	status,0,c
  5699  00083E  D002               	goto	l205
  5700  000840                     u16600:
  5701                           
  5702                           ; BSR set to: 1
  5703  000840  AF6B               	btfss	(_poligono_ext+91)& (0+255),7,b
  5704  000842  D019               	goto	u16650
  5705  000844                     l205:
  5706  000844                     l12138:
  5707                           
  5708                           ;main.c: 486: else if((poligono_ext[0].diff_long_min == 0 ||
  5709                           ;main.c: 487: poligono_ext[1].diff_long_min == 0) &&
  5710                           ;main.c: 488: (poligono_ext[0].diff_long_deg == 0 ||
  5711                           ;main.c: 489: poligono_ext[1].diff_long_deg == 0))
  5712  000844  0101               	movlb	1	; () banked
  5713  000846  514C               	movf	(_poligono_ext+60)& (0+255),w,b
  5714  000848  114D               	iorwf	(_poligono_ext+61)& (0+255),w,b
  5715  00084A  114E               	iorwf	(_poligono_ext+62)& (0+255),w,b
  5716  00084C  114F               	iorwf	(_poligono_ext+63)& (0+255),w,b
  5717  00084E  B4D8               	btfsc	status,2,c
  5718  000850  D006               	goto	u16630
  5719                           
  5720                           ; BSR set to: 1
  5721  000852  518C               	movf	(_poligono_ext+124)& (0+255),w,b
  5722  000854  118D               	iorwf	(_poligono_ext+125)& (0+255),w,b
  5723  000856  118E               	iorwf	(_poligono_ext+126)& (0+255),w,b
  5724  000858  118F               	iorwf	(_poligono_ext+127)& (0+255),w,b
  5725  00085A  A4D8               	btfss	status,2,c
  5726  00085C  D00F               	goto	l207
  5727  00085E                     u16630:
  5728                           
  5729                           ; BSR set to: 1
  5730                           
  5731                           ; BSR set to: 1
  5732  00085E  512C               	movf	(_poligono_ext+28)& (0+255),w,b
  5733  000860  112D               	iorwf	(_poligono_ext+29)& (0+255),w,b
  5734  000862  112E               	iorwf	(_poligono_ext+30)& (0+255),w,b
  5735  000864  112F               	iorwf	(_poligono_ext+31)& (0+255),w,b
  5736  000866  B4D8               	btfsc	status,2,c
  5737  000868  D006               	goto	u16650
  5738                           
  5739                           ; BSR set to: 1
  5740  00086A  516C               	movf	(_poligono_ext+92)& (0+255),w,b
  5741  00086C  116D               	iorwf	(_poligono_ext+93)& (0+255),w,b
  5742  00086E  116E               	iorwf	(_poligono_ext+94)& (0+255),w,b
  5743  000870  116F               	iorwf	(_poligono_ext+95)& (0+255),w,b
  5744  000872  A4D8               	btfss	status,2,c
  5745  000874  D003               	goto	l207
  5746  000876                     u16650:
  5747                           
  5748                           ; BSR set to: 1
  5749                           ;main.c: 490: {
  5750                           ;main.c: 491: flag[0].point = 0;
  5751  000876  0100               	movlb	0	; () banked
  5752  000878  91F4               	bcf	_flag& (0+255),0,b
  5753                           
  5754                           ;main.c: 492: }
  5755  00087A  D057               	goto	l213
  5756  00087C                     l207:
  5757                           
  5758                           ; BSR set to: 1
  5759                           ;main.c: 493: else
  5760                           ;main.c: 494: {
  5761                           ;main.c: 495: flag[0].point = 1;
  5762  00087C  0100               	movlb	0	; () banked
  5763  00087E  81F4               	bsf	_flag& (0+255),0,b
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;main.c: 499: }
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;main.c: 496: }
  5770                           ;main.c: 497: break;
  5771                           
  5772                           ; BSR set to: 0
  5773  000880  D054               	goto	l213
  5774  000882                     l193:
  5775                           
  5776                           ; BSR set to: 0
  5777  000882  0103               	movlb	3	; () banked
  5778  000884  515C               	movf	verifica_fence_externo@temp_buff_long& (0+255),w,b
  5779                           
  5780                           ; Switch size 1, requested type "space"
  5781                           ; Number of cases is 1, Range of values is 45 to 45
  5782                           ; switch strategies available:
  5783                           ; Name         Instructions Cycles
  5784                           ; simple_byte            4     3 (average)
  5785                           ;	Chosen strategy is simple_byte
  5786  000886  0A2D               	xorlw	45	; case 45
  5787  000888  B4D8               	btfsc	status,2,c
  5788  00088A  D7AD               	goto	l194
  5789  00088C  D7C4               	goto	l204
  5790  00088E                     
  5791                           ; BSR set to: 3
  5792                           ;main.c: 505: if(
  5793                           ;main.c: 506: (
  5794                           ;main.c: 507: poligono_ext[0].diff_lat_min <= 0 &&
  5795                           ;main.c: 508: poligono_ext[1].diff_lat_min >= 0) &&
  5796                           ;main.c: 510: (poligono_ext[0].diff_lat_deg <= 0 &&
  5797                           ;main.c: 511: poligono_ext[1].diff_lat_deg >= 0))
  5798                           
  5799                           ; BSR set to: 3
  5800  00088E  0101               	movlb	1	; () banked
  5801  000890  BF4B               	btfsc	(_poligono_ext+59)& (0+255),7,b
  5802  000892  D007               	goto	u16660
  5803  000894  514B               	movf	(_poligono_ext+59)& (0+255),w,b
  5804  000896  114A               	iorwf	(_poligono_ext+58)& (0+255),w,b
  5805  000898  1149               	iorwf	(_poligono_ext+57)& (0+255),w,b
  5806  00089A  E128               	bnz	l12178
  5807  00089C  0548               	decf	(_poligono_ext+56)& (0+255),w,b
  5808  00089E  B0D8               	btfsc	status,0,c
  5809  0008A0  D025               	goto	l225
  5810  0008A2                     u16660:
  5811                           
  5812                           ; BSR set to: 1
  5813  0008A2  BF8B               	btfsc	(_poligono_ext+123)& (0+255),7,b
  5814  0008A4  D023               	goto	l225
  5815                           
  5816                           ; BSR set to: 1
  5817  0008A6  BF2B               	btfsc	(_poligono_ext+27)& (0+255),7,b
  5818  0008A8  D007               	goto	u16680
  5819  0008AA  512B               	movf	(_poligono_ext+27)& (0+255),w,b
  5820  0008AC  112A               	iorwf	(_poligono_ext+26)& (0+255),w,b
  5821  0008AE  1129               	iorwf	(_poligono_ext+25)& (0+255),w,b
  5822  0008B0  E11D               	bnz	l12178
  5823  0008B2  0528               	decf	(_poligono_ext+24)& (0+255),w,b
  5824  0008B4  B0D8               	btfsc	status,0,c
  5825  0008B6  D01A               	goto	l225
  5826  0008B8                     u16680:
  5827                           
  5828                           ; BSR set to: 1
  5829  0008B8  AF6B               	btfss	(_poligono_ext+91)& (0+255),7,b
  5830  0008BA  D031               	goto	u16810
  5831                           
  5832                           ; BSR set to: 0
  5833                           
  5834                           ;main.c: 515: }
  5835                           
  5836                           ; BSR set to: 1
  5837                           ;main.c: 513: {
  5838                           ;main.c: 514: flag[1].point = 0;
  5839  0008BC  D017               	goto	l225
  5840  0008BE                     
  5841                           ;main.c: 532: if((poligono_ext[0].diff_lat_min >= 0 &&
  5842                           ;main.c: 533: poligono_ext[1].diff_lat_min <= 0 ) &&
  5843                           ;main.c: 536: (poligono_ext[0].diff_lat_deg >= 0 &&
  5844                           ;main.c: 537: poligono_ext[1].diff_lat_deg <= 0)
  5845                           ;main.c: 538: )
  5846                           
  5847                           ; BSR set to: 0
  5848  0008BE  0101               	movlb	1	; () banked
  5849  0008C0  BF4B               	btfsc	(_poligono_ext+59)& (0+255),7,b
  5850  0008C2  D014               	goto	l225
  5851                           
  5852                           ; BSR set to: 1
  5853  0008C4  BF8B               	btfsc	(_poligono_ext+123)& (0+255),7,b
  5854  0008C6  D007               	goto	u16750
  5855  0008C8  518B               	movf	(_poligono_ext+123)& (0+255),w,b
  5856  0008CA  118A               	iorwf	(_poligono_ext+122)& (0+255),w,b
  5857  0008CC  1189               	iorwf	(_poligono_ext+121)& (0+255),w,b
  5858  0008CE  E10E               	bnz	l12178
  5859  0008D0  0588               	decf	(_poligono_ext+120)& (0+255),w,b
  5860  0008D2  B0D8               	btfsc	status,0,c
  5861  0008D4  D00B               	goto	l225
  5862  0008D6                     u16750:
  5863                           
  5864                           ; BSR set to: 1
  5865  0008D6  BF2B               	btfsc	(_poligono_ext+27)& (0+255),7,b
  5866  0008D8  D009               	goto	l225
  5867                           
  5868                           ; BSR set to: 1
  5869  0008DA  BF6B               	btfsc	(_poligono_ext+91)& (0+255),7,b
  5870  0008DC  D020               	goto	u16810
  5871  0008DE  516B               	movf	(_poligono_ext+91)& (0+255),w,b
  5872  0008E0  116A               	iorwf	(_poligono_ext+90)& (0+255),w,b
  5873  0008E2  1169               	iorwf	(_poligono_ext+89)& (0+255),w,b
  5874  0008E4  E103               	bnz	l12178
  5875  0008E6  0568               	decf	(_poligono_ext+88)& (0+255),w,b
  5876  0008E8  A0D8               	btfss	status,0,c
  5877  0008EA  D019               	goto	u16810
  5878  0008EC                     l225:
  5879  0008EC                     l12178:
  5880                           
  5881                           ;main.c: 542: else if((poligono_ext[0].diff_lat_min == 0 ||
  5882                           ;main.c: 543: poligono_ext[1].diff_lat_min == 0) &&
  5883                           ;main.c: 545: (poligono_ext[0].diff_lat_deg == 0 ||
  5884                           ;main.c: 546: poligono_ext[1].diff_lat_deg == 0))
  5885  0008EC  0101               	movlb	1	; () banked
  5886  0008EE  5148               	movf	(_poligono_ext+56)& (0+255),w,b
  5887  0008F0  1149               	iorwf	(_poligono_ext+57)& (0+255),w,b
  5888  0008F2  114A               	iorwf	(_poligono_ext+58)& (0+255),w,b
  5889  0008F4  114B               	iorwf	(_poligono_ext+59)& (0+255),w,b
  5890  0008F6  B4D8               	btfsc	status,2,c
  5891  0008F8  D006               	goto	u16790
  5892                           
  5893                           ; BSR set to: 1
  5894  0008FA  5188               	movf	(_poligono_ext+120)& (0+255),w,b
  5895  0008FC  1189               	iorwf	(_poligono_ext+121)& (0+255),w,b
  5896  0008FE  118A               	iorwf	(_poligono_ext+122)& (0+255),w,b
  5897  000900  118B               	iorwf	(_poligono_ext+123)& (0+255),w,b
  5898  000902  A4D8               	btfss	status,2,c
  5899  000904  D00F               	goto	l227
  5900  000906                     u16790:
  5901                           
  5902                           ; BSR set to: 1
  5903                           
  5904                           ; BSR set to: 1
  5905  000906  5128               	movf	(_poligono_ext+24)& (0+255),w,b
  5906  000908  1129               	iorwf	(_poligono_ext+25)& (0+255),w,b
  5907  00090A  112A               	iorwf	(_poligono_ext+26)& (0+255),w,b
  5908  00090C  112B               	iorwf	(_poligono_ext+27)& (0+255),w,b
  5909  00090E  B4D8               	btfsc	status,2,c
  5910  000910  D006               	goto	u16810
  5911                           
  5912                           ; BSR set to: 1
  5913  000912  5168               	movf	(_poligono_ext+88)& (0+255),w,b
  5914  000914  1169               	iorwf	(_poligono_ext+89)& (0+255),w,b
  5915  000916  116A               	iorwf	(_poligono_ext+90)& (0+255),w,b
  5916  000918  116B               	iorwf	(_poligono_ext+91)& (0+255),w,b
  5917  00091A  A4D8               	btfss	status,2,c
  5918  00091C  D003               	goto	l227
  5919  00091E                     u16810:
  5920                           
  5921                           ; BSR set to: 1
  5922                           ;main.c: 547: {
  5923                           ;main.c: 548: flag[1].point = 0;
  5924  00091E  0100               	movlb	0	; () banked
  5925  000920  91F5               	bcf	(_flag+1)& (0+255),0,b
  5926                           
  5927                           ;main.c: 549: }
  5928  000922  D009               	goto	l223
  5929  000924                     l227:
  5930                           
  5931                           ; BSR set to: 1
  5932                           ;main.c: 550: else
  5933                           ;main.c: 551: {
  5934                           ;main.c: 554: flag[1].point = 1;
  5935  000924  0100               	movlb	0	; () banked
  5936  000926  81F5               	bsf	(_flag+1)& (0+255),0,b
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;main.c: 558: }
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;main.c: 555: }
  5943                           ;main.c: 556: break;
  5944                           
  5945                           ; BSR set to: 0
  5946  000928  D006               	goto	l223
  5947  00092A                     l213:
  5948                           
  5949                           ; BSR set to: 0
  5950  00092A  0103               	movlb	3	; () banked
  5951  00092C  5168               	movf	verifica_fence_externo@temp_buff_lat& (0+255),w,b
  5952                           
  5953                           ; Switch size 1, requested type "space"
  5954                           ; Number of cases is 1, Range of values is 45 to 45
  5955                           ; switch strategies available:
  5956                           ; Name         Instructions Cycles
  5957                           ; simple_byte            4     3 (average)
  5958                           ;	Chosen strategy is simple_byte
  5959  00092E  0A2D               	xorlw	45	; case 45
  5960  000930  B4D8               	btfsc	status,2,c
  5961  000932  D7AD               	goto	l214
  5962  000934  D7C4               	goto	l224
  5963  000936                     l223:
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;main.c: 561: if(flag[0].point || flag[1].point)
  5967  000936  B1F4               	btfsc	_flag& (0+255),0,b
  5968  000938  D002               	goto	u16830
  5969                           
  5970                           ; BSR set to: 0
  5971  00093A  A1F5               	btfss	(_flag+1)& (0+255),0,b
  5972  00093C  D034               	goto	l233
  5973  00093E                     u16830:
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;main.c: 562: {
  5977                           ;main.c: 563: flag[2].point = 1;
  5978  00093E  81F6               	bsf	(_flag+2)& (0+255),0,b
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;main.c: 564: posicao_cursor_lcd(1,0);
  5982  000940  0E00               	movlw	0
  5983  000942  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  5984  000944  0E01               	movlw	1
  5985  000946  ECFF  F026         	call	_posicao_cursor_lcd
  5986                           
  5987                           ;main.c: 565: escreve_frase_ram_lcd("REGIAO NEGADA");
  5988  00094A  0EF1               	movlw	low STR_1
  5989  00094C  0100               	movlb	0	; () banked
  5990  00094E  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  5991  000950  0E61               	movlw	high STR_1
  5992  000952  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  5993  000954  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  5994                           
  5995                           ;main.c: 566: posicao_cursor_lcd(2,14);
  5996  000958  0E0E               	movlw	14
  5997  00095A  0100               	movlb	0	; () banked
  5998  00095C  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  5999  00095E  0E02               	movlw	2
  6000  000960  ECFF  F026         	call	_posicao_cursor_lcd
  6001                           
  6002                           ;main.c: 567: escreve_inteiro_lcd(flag[0].point);
  6003  000964  0100               	movlb	0	; () banked
  6004  000966  A1F4               	btfss	_flag& (0+255),0,b
  6005  000968  D003               	goto	u16840
  6006  00096A  6B81               	clrf	??_verifica_fence_externo& (0+255),b
  6007  00096C  2B81               	incf	??_verifica_fence_externo& (0+255),f,b
  6008  00096E  D002               	goto	u16848
  6009  000970                     u16840:
  6010  000970  0100               	movlb	0	; () banked
  6011  000972  6B81               	clrf	??_verifica_fence_externo& (0+255),b
  6012  000974                     u16848:
  6013  000974  5181               	movf	??_verifica_fence_externo& (0+255),w,b
  6014  000976  6F78               	movwf	escreve_inteiro_lcd@valor& (0+255),b
  6015  000978  6B79               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  6016  00097A  EC8C  F02A         	call	_escreve_inteiro_lcd	;wreg free
  6017                           
  6018                           ;main.c: 568: posicao_cursor_lcd(2,15);
  6019  00097E  0E0F               	movlw	15
  6020  000980  0100               	movlb	0	; () banked
  6021  000982  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  6022  000984  0E02               	movlw	2
  6023  000986  ECFF  F026         	call	_posicao_cursor_lcd
  6024                           
  6025                           ;main.c: 569: escreve_inteiro_lcd(flag[1].point);
  6026  00098A  0100               	movlb	0	; () banked
  6027  00098C  A1F5               	btfss	(_flag+1)& (0+255),0,b
  6028  00098E  D003               	goto	u16850
  6029  000990  6B81               	clrf	??_verifica_fence_externo& (0+255),b
  6030  000992  2B81               	incf	??_verifica_fence_externo& (0+255),f,b
  6031  000994  D002               	goto	u16858
  6032  000996                     u16850:
  6033  000996  0100               	movlb	0	; () banked
  6034  000998  6B81               	clrf	??_verifica_fence_externo& (0+255),b
  6035  00099A                     u16858:
  6036  00099A  5181               	movf	??_verifica_fence_externo& (0+255),w,b
  6037  00099C  6F78               	movwf	escreve_inteiro_lcd@valor& (0+255),b
  6038  00099E  6B79               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  6039  0009A0  EC8C  F02A         	call	_escreve_inteiro_lcd	;wreg free
  6040                           
  6041                           ;main.c: 570: }
  6042  0009A4  0012               	return	
  6043  0009A6                     l233:
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;main.c: 571: else
  6047                           ;main.c: 572: {
  6048                           ;main.c: 573: flag[2].point = 0;
  6049  0009A6  91F6               	bcf	(_flag+2)& (0+255),0,b
  6050  0009A8  0012               	return	
  6051  0009AA                     __end_of_verifica_fence_externo:
  6052                           	opt stack 0
  6053                           tosu	equ	0xFFF
  6054                           tosh	equ	0xFFE
  6055                           tosl	equ	0xFFD
  6056                           pclath	equ	0xFFA
  6057                           tblptru	equ	0xFF8
  6058                           tblptrh	equ	0xFF7
  6059                           tblptrl	equ	0xFF6
  6060                           tablat	equ	0xFF5
  6061                           prodh	equ	0xFF4
  6062                           prodl	equ	0xFF3
  6063                           intcon	equ	0xFF2
  6064                           intcon2	equ	0xFF1
  6065                           intcon3	equ	0xFF0
  6066                           postinc0	equ	0xFEE
  6067                           wreg	equ	0xFE8
  6068                           indf1	equ	0xFE7
  6069                           postinc1	equ	0xFE6
  6070                           postdec1	equ	0xFE5
  6071                           plusw1	equ	0xFE3
  6072                           fsr1h	equ	0xFE2
  6073                           fsr1l	equ	0xFE1
  6074                           indf2	equ	0xFDF
  6075                           postinc2	equ	0xFDE
  6076                           postdec2	equ	0xFDD
  6077                           plusw2	equ	0xFDB
  6078                           fsr2h	equ	0xFDA
  6079                           fsr2l	equ	0xFD9
  6080                           status	equ	0xFD8
  6081                           
  6082 ;; *************** function _escreve_inteiro_lcd *****************
  6083 ;; Defined at:
  6084 ;;		line 376 in file "bibliotecas/display_lcd.c"
  6085 ;; Parameters:    Size  Location     Type
  6086 ;;  valor           2   24[BANK0 ] int 
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;  texto           7   26[BANK0 ] unsigned char [7]
  6089 ;; Return value:  Size  Location     Type
  6090 ;;                  1    wreg      void 
  6091 ;; Registers used:
  6092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6093 ;; Tracked objects:
  6094 ;;		On entry : 0/0
  6095 ;;		On exit  : 0/0
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6098 ;;      Params:         0       2       0       0       0       0       0       0       0
  6099 ;;      Locals:         0       7       0       0       0       0       0       0       0
  6100 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6101 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6102 ;;Total ram usage:        9 bytes
  6103 ;; Hardware stack levels used:    1
  6104 ;; Hardware stack levels required when called:    6
  6105 ;; This function calls:
  6106 ;;		_escreve_frase_ram_lcd
  6107 ;;		_itoa
  6108 ;; This function is called by:
  6109 ;;		_verifica_fence_externo
  6110 ;;		_escreve_float_lcd
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           	psect	text16
  6115  005518                     __ptext16:
  6116                           	opt stack 0
  6117  005518                     _escreve_inteiro_lcd:
  6118                           	opt stack 22
  6119                           
  6120                           ;display_lcd.c: 378: char texto[7] = "000000";
  6121                           
  6122                           ;incstack = 0
  6123  005518  EE22  F07A         	lfsr	2,escreve_inteiro_lcd@F3966
  6124  00551C  EE10  F07A         	lfsr	1,escreve_inteiro_lcd@texto
  6125  005520  0E06               	movlw	6
  6126  005522                     u16011:
  6127  005522  CFDB FFE3          	movff	plusw2,plusw1
  6128  005526  06E8               	decf	wreg,f,c
  6129  005528  E2FC               	bc	u16011
  6130                           
  6131                           ;display_lcd.c: 379: itoa(texto,valor, 10);
  6132  00552A  0E7A               	movlw	low escreve_inteiro_lcd@texto
  6133  00552C  0100               	movlb	0	; () banked
  6134  00552E  6F70               	movwf	itoa@buf& (0+255),b
  6135  005530  0E00               	movlw	high escreve_inteiro_lcd@texto
  6136  005532  6F71               	movwf	(itoa@buf+1)& (0+255),b
  6137  005534  C078  F072         	movff	escreve_inteiro_lcd@valor,itoa@val
  6138  005538  C079  F073         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
  6139  00553C  0E00               	movlw	0
  6140  00553E  6F75               	movwf	(itoa@base+1)& (0+255),b
  6141  005540  0E0A               	movlw	10
  6142  005542  6F74               	movwf	itoa@base& (0+255),b
  6143  005544  EC05  F02A         	call	_itoa	;wreg free
  6144                           
  6145                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
  6146  005548  0E7A               	movlw	low escreve_inteiro_lcd@texto
  6147  00554A  0100               	movlb	0	; () banked
  6148  00554C  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  6149  00554E  0E00               	movlw	high escreve_inteiro_lcd@texto
  6150  005550  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  6151  005552  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
  6152  005556  0012               	return		;funcret
  6153  005558                     __end_of_escreve_inteiro_lcd:
  6154                           	opt stack 0
  6155                           tosu	equ	0xFFF
  6156                           tosh	equ	0xFFE
  6157                           tosl	equ	0xFFD
  6158                           pclath	equ	0xFFA
  6159                           tblptru	equ	0xFF8
  6160                           tblptrh	equ	0xFF7
  6161                           tblptrl	equ	0xFF6
  6162                           tablat	equ	0xFF5
  6163                           prodh	equ	0xFF4
  6164                           prodl	equ	0xFF3
  6165                           intcon	equ	0xFF2
  6166                           intcon2	equ	0xFF1
  6167                           intcon3	equ	0xFF0
  6168                           postinc0	equ	0xFEE
  6169                           wreg	equ	0xFE8
  6170                           indf1	equ	0xFE7
  6171                           postinc1	equ	0xFE6
  6172                           postdec1	equ	0xFE5
  6173                           plusw1	equ	0xFE3
  6174                           fsr1h	equ	0xFE2
  6175                           fsr1l	equ	0xFE1
  6176                           indf2	equ	0xFDF
  6177                           postinc2	equ	0xFDE
  6178                           postdec2	equ	0xFDD
  6179                           plusw2	equ	0xFDB
  6180                           fsr2h	equ	0xFDA
  6181                           fsr2l	equ	0xFD9
  6182                           status	equ	0xFD8
  6183                           
  6184 ;; *************** function _itoa *****************
  6185 ;; Defined at:
  6186 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  6187 ;; Parameters:    Size  Location     Type
  6188 ;;  buf             2   16[BANK0 ] PTR unsigned char 
  6189 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  6190 ;;  val             2   18[BANK0 ] int 
  6191 ;;  base            2   20[BANK0 ] int 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;  cp              2   22[BANK0 ] PTR unsigned char 
  6194 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  6195 ;; Return value:  Size  Location     Type
  6196 ;;                  2   16[BANK0 ] PTR unsigned char 
  6197 ;; Registers used:
  6198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/0
  6201 ;;		On exit  : 0/0
  6202 ;;		Unchanged: 0/0
  6203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6204 ;;      Params:         0       6       0       0       0       0       0       0       0
  6205 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6206 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6207 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6208 ;;Total ram usage:        8 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; Hardware stack levels required when called:    5
  6211 ;; This function calls:
  6212 ;;		_utoa
  6213 ;; This function is called by:
  6214 ;;		_escreve_inteiro_lcd
  6215 ;;		_escreve_inteiro_uart
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           	psect	text17
  6220  00540A                     __ptext17:
  6221                           	opt stack 0
  6222  00540A                     _itoa:
  6223                           	opt stack 22
  6224                           
  6225                           ;incstack = 0
  6226  00540A  C070  F076         	movff	itoa@buf,itoa@cp
  6227  00540E  C071  F077         	movff	itoa@buf+1,itoa@cp+1
  6228  005412  0100               	movlb	0	; () banked
  6229  005414  AF73               	btfss	(itoa@val+1)& (0+255),7,b
  6230  005416  D00C               	goto	l1870
  6231                           
  6232                           ; BSR set to: 0
  6233  005418  C070  FFD9         	movff	itoa@buf,fsr2l
  6234  00541C  C071  FFDA         	movff	itoa@buf+1,fsr2h
  6235  005420  0E2D               	movlw	45
  6236  005422  6EDF               	movwf	indf2,c
  6237                           
  6238                           ; BSR set to: 0
  6239  005424  4B70               	infsnz	itoa@buf& (0+255),f,b
  6240  005426  2B71               	incf	(itoa@buf+1)& (0+255),f,b
  6241                           
  6242                           ; BSR set to: 0
  6243  005428  6D72               	negf	itoa@val& (0+255),b
  6244  00542A  1F73               	comf	(itoa@val+1)& (0+255),f,b
  6245  00542C  B0D8               	btfsc	status,0,c
  6246  00542E  2B73               	incf	(itoa@val+1)& (0+255),f,b
  6247  005430                     l1870:
  6248                           
  6249                           ; BSR set to: 0
  6250                           
  6251                           ; BSR set to: 0
  6252  005430  C070  F067         	movff	itoa@buf,utoa@buf
  6253  005434  C071  F068         	movff	itoa@buf+1,utoa@buf+1
  6254  005438  C072  F069         	movff	itoa@val,utoa@val
  6255  00543C  C073  F06A         	movff	itoa@val+1,utoa@val+1
  6256  005440  C074  F06B         	movff	itoa@base,utoa@base
  6257  005444  C075  F06C         	movff	itoa@base+1,utoa@base+1
  6258  005448  ECA1  F022         	call	_utoa	;wreg free
  6259  00544C  0012               	return	
  6260  00544E                     __end_of_itoa:
  6261                           	opt stack 0
  6262                           tosu	equ	0xFFF
  6263                           tosh	equ	0xFFE
  6264                           tosl	equ	0xFFD
  6265                           pclath	equ	0xFFA
  6266                           tblptru	equ	0xFF8
  6267                           tblptrh	equ	0xFF7
  6268                           tblptrl	equ	0xFF6
  6269                           tablat	equ	0xFF5
  6270                           prodh	equ	0xFF4
  6271                           prodl	equ	0xFF3
  6272                           intcon	equ	0xFF2
  6273                           intcon2	equ	0xFF1
  6274                           intcon3	equ	0xFF0
  6275                           postinc0	equ	0xFEE
  6276                           wreg	equ	0xFE8
  6277                           indf1	equ	0xFE7
  6278                           postinc1	equ	0xFE6
  6279                           postdec1	equ	0xFE5
  6280                           plusw1	equ	0xFE3
  6281                           fsr1h	equ	0xFE2
  6282                           fsr1l	equ	0xFE1
  6283                           indf2	equ	0xFDF
  6284                           postinc2	equ	0xFDE
  6285                           postdec2	equ	0xFDD
  6286                           plusw2	equ	0xFDB
  6287                           fsr2h	equ	0xFDA
  6288                           fsr2l	equ	0xFD9
  6289                           status	equ	0xFD8
  6290                           
  6291 ;; *************** function _utoa *****************
  6292 ;; Defined at:
  6293 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  buf             2    7[BANK0 ] PTR unsigned char 
  6296 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  6297 ;;  val             2    9[BANK0 ] unsigned int 
  6298 ;;  base            2   11[BANK0 ] int 
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;  v               2   13[BANK0 ] unsigned int 
  6301 ;;  c               1   15[BANK0 ] unsigned char 
  6302 ;; Return value:  Size  Location     Type
  6303 ;;                  2    7[BANK0 ] PTR unsigned char 
  6304 ;; Registers used:
  6305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6306 ;; Tracked objects:
  6307 ;;		On entry : 0/0
  6308 ;;		On exit  : 0/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6311 ;;      Params:         0       6       0       0       0       0       0       0       0
  6312 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6313 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6314 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6315 ;;Total ram usage:        9 bytes
  6316 ;; Hardware stack levels used:    1
  6317 ;; Hardware stack levels required when called:    4
  6318 ;; This function calls:
  6319 ;;		___lwdiv
  6320 ;;		___lwmod
  6321 ;; This function is called by:
  6322 ;;		_itoa
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           	psect	text18
  6327  004542                     __ptext18:
  6328                           	opt stack 0
  6329  004542                     _utoa:
  6330                           	opt stack 22
  6331                           
  6332                           ;incstack = 0
  6333  004542  C069  F06D         	movff	utoa@val,utoa@v
  6334  004546  C06A  F06E         	movff	utoa@val+1,utoa@v+1
  6335  00454A  C06D  F060         	movff	utoa@v,___lwdiv@dividend
  6336  00454E  C06E  F061         	movff	utoa@v+1,___lwdiv@dividend+1
  6337  004552  C06B  F062         	movff	utoa@base,___lwdiv@divisor
  6338  004556  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
  6339  00455A  ECD2  F028         	call	___lwdiv	;wreg free
  6340  00455E  C060  F06D         	movff	?___lwdiv,utoa@v
  6341  004562  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
  6342  004566  0100               	movlb	0	; () banked
  6343  004568  4B67               	infsnz	utoa@buf& (0+255),f,b
  6344  00456A  2B68               	incf	(utoa@buf+1)& (0+255),f,b
  6345                           
  6346                           ; BSR set to: 0
  6347  00456C  516D               	movf	utoa@v& (0+255),w,b
  6348  00456E  116E               	iorwf	(utoa@v+1)& (0+255),w,b
  6349  004570  A4D8               	btfss	status,2,c
  6350  004572  D7EB               	goto	l1874
  6351                           
  6352                           ; BSR set to: 0
  6353                           
  6354                           ; BSR set to: 0
  6355  004574  C067  FFD9         	movff	utoa@buf,fsr2l
  6356  004578  C068  FFDA         	movff	utoa@buf+1,fsr2h
  6357  00457C  0E00               	movlw	0
  6358  00457E  6EDF               	movwf	indf2,c
  6359                           
  6360                           ; BSR set to: 0
  6361  004580  0767               	decf	utoa@buf& (0+255),f,b
  6362  004582  A0D8               	btfss	status,0,c
  6363  004584  0768               	decf	(utoa@buf+1)& (0+255),f,b
  6364  004586                     
  6365                           ; BSR set to: 0
  6366                           
  6367                           ; BSR set to: 0
  6368  004586  C069  F060         	movff	utoa@val,___lwmod@dividend
  6369  00458A  C06A  F061         	movff	utoa@val+1,___lwmod@dividend+1
  6370  00458E  C06B  F062         	movff	utoa@base,___lwmod@divisor
  6371  004592  C06C  F063         	movff	utoa@base+1,___lwmod@divisor+1
  6372  004596  EC27  F02A         	call	___lwmod	;wreg free
  6373  00459A  0100               	movlb	0	; () banked
  6374  00459C  5160               	movf	?___lwmod& (0+255),w,b
  6375  00459E  6F6F               	movwf	utoa@c& (0+255),b
  6376                           
  6377                           ; BSR set to: 0
  6378  0045A0  C069  F060         	movff	utoa@val,___lwdiv@dividend
  6379  0045A4  C06A  F061         	movff	utoa@val+1,___lwdiv@dividend+1
  6380  0045A8  C06B  F062         	movff	utoa@base,___lwdiv@divisor
  6381  0045AC  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
  6382  0045B0  ECD2  F028         	call	___lwdiv	;wreg free
  6383  0045B4  C060  F069         	movff	?___lwdiv,utoa@val
  6384  0045B8  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
  6385  0045BC  0E09               	movlw	9
  6386  0045BE  0100               	movlb	0	; () banked
  6387  0045C0  656F               	cpfsgt	utoa@c& (0+255),b
  6388  0045C2  D002               	goto	l1877
  6389                           
  6390                           ; BSR set to: 0
  6391  0045C4  0E07               	movlw	7
  6392  0045C6  276F               	addwf	utoa@c& (0+255),f,b
  6393  0045C8                     l1877:
  6394                           
  6395                           ; BSR set to: 0
  6396  0045C8  0E30               	movlw	48
  6397  0045CA  276F               	addwf	utoa@c& (0+255),f,b
  6398                           
  6399                           ; BSR set to: 0
  6400  0045CC  C067  FFD9         	movff	utoa@buf,fsr2l
  6401  0045D0  C068  FFDA         	movff	utoa@buf+1,fsr2h
  6402  0045D4  C06F  FFDF         	movff	utoa@c,indf2
  6403                           
  6404                           ; BSR set to: 0
  6405  0045D8  0767               	decf	utoa@buf& (0+255),f,b
  6406  0045DA  A0D8               	btfss	status,0,c
  6407  0045DC  0768               	decf	(utoa@buf+1)& (0+255),f,b
  6408                           
  6409                           ; BSR set to: 0
  6410  0045DE  5169               	movf	utoa@val& (0+255),w,b
  6411  0045E0  116A               	iorwf	(utoa@val+1)& (0+255),w,b
  6412  0045E2  A4D8               	btfss	status,2,c
  6413  0045E4  D7D0               	goto	l1876
  6414                           
  6415                           ; BSR set to: 0
  6416                           ;	Return value of _utoa is never used
  6417                           
  6418                           ; BSR set to: 0
  6419  0045E6  4B67               	infsnz	utoa@buf& (0+255),f,b
  6420  0045E8  2B68               	incf	(utoa@buf+1)& (0+255),f,b
  6421  0045EA  0012               	return	
  6422  0045EC                     __end_of_utoa:
  6423                           	opt stack 0
  6424                           tosu	equ	0xFFF
  6425                           tosh	equ	0xFFE
  6426                           tosl	equ	0xFFD
  6427                           pclath	equ	0xFFA
  6428                           tblptru	equ	0xFF8
  6429                           tblptrh	equ	0xFF7
  6430                           tblptrl	equ	0xFF6
  6431                           tablat	equ	0xFF5
  6432                           prodh	equ	0xFF4
  6433                           prodl	equ	0xFF3
  6434                           intcon	equ	0xFF2
  6435                           intcon2	equ	0xFF1
  6436                           intcon3	equ	0xFF0
  6437                           postinc0	equ	0xFEE
  6438                           wreg	equ	0xFE8
  6439                           indf1	equ	0xFE7
  6440                           postinc1	equ	0xFE6
  6441                           postdec1	equ	0xFE5
  6442                           plusw1	equ	0xFE3
  6443                           fsr1h	equ	0xFE2
  6444                           fsr1l	equ	0xFE1
  6445                           indf2	equ	0xFDF
  6446                           postinc2	equ	0xFDE
  6447                           postdec2	equ	0xFDD
  6448                           plusw2	equ	0xFDB
  6449                           fsr2h	equ	0xFDA
  6450                           fsr2l	equ	0xFD9
  6451                           status	equ	0xFD8
  6452                           
  6453 ;; *************** function ___lwmod *****************
  6454 ;; Defined at:
  6455 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;  dividend        2    0[BANK0 ] unsigned int 
  6458 ;;  divisor         2    2[BANK0 ] unsigned int 
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;  counter         1    4[BANK0 ] unsigned char 
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  2    0[BANK0 ] unsigned int 
  6463 ;; Registers used:
  6464 ;;		wreg, status,2, status,0
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6470 ;;      Params:         0       4       0       0       0       0       0       0       0
  6471 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6472 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6473 ;;      Totals:         0       5       0       0       0       0       0       0       0
  6474 ;;Total ram usage:        5 bytes
  6475 ;; Hardware stack levels used:    1
  6476 ;; Hardware stack levels required when called:    3
  6477 ;; This function calls:
  6478 ;;		Nothing
  6479 ;; This function is called by:
  6480 ;;		_utoa
  6481 ;;		_converte_inteiro_matriz
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485                           	psect	text19
  6486  00544E                     __ptext19:
  6487                           	opt stack 0
  6488  00544E                     ___lwmod:
  6489                           	opt stack 22
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;incstack = 0
  6493  00544E  0100               	movlb	0	; () banked
  6494  005450  5162               	movf	___lwmod@divisor& (0+255),w,b
  6495  005452  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6496  005454  B4D8               	btfsc	status,2,c
  6497  005456  D018               	goto	l1972
  6498                           
  6499                           ; BSR set to: 0
  6500  005458  0E01               	movlw	1
  6501  00545A  6F64               	movwf	___lwmod@counter& (0+255),b
  6502  00545C  D004               	goto	l1967
  6503  00545E                     
  6504                           ; BSR set to: 0
  6505                           
  6506                           ; BSR set to: 0
  6507  00545E  90D8               	bcf	status,0,c
  6508  005460  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  6509  005462  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6510  005464  2B64               	incf	___lwmod@counter& (0+255),f,b
  6511  005466                     l1967:
  6512                           
  6513                           ; BSR set to: 0
  6514                           
  6515                           ; BSR set to: 0
  6516  005466  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6517  005468  D7FA               	goto	l1968
  6518  00546A                     u14390:
  6519                           
  6520                           ; BSR set to: 0
  6521                           
  6522                           ; BSR set to: 0
  6523                           
  6524                           ; BSR set to: 0
  6525  00546A  5162               	movf	___lwmod@divisor& (0+255),w,b
  6526  00546C  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  6527  00546E  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6528  005470  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6529  005472  A0D8               	btfss	status,0,c
  6530  005474  D004               	goto	l1971
  6531                           
  6532                           ; BSR set to: 0
  6533  005476  5162               	movf	___lwmod@divisor& (0+255),w,b
  6534  005478  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  6535  00547A  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6536  00547C  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6537  00547E                     l1971:
  6538                           
  6539                           ; BSR set to: 0
  6540                           
  6541                           ; BSR set to: 0
  6542  00547E  90D8               	bcf	status,0,c
  6543  005480  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6544  005482  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  6545                           
  6546                           ; BSR set to: 0
  6547  005484  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  6548  005486  D7F1               	goto	u14390
  6549  005488                     l1972:
  6550                           
  6551                           ; BSR set to: 0
  6552                           
  6553                           ; BSR set to: 0
  6554  005488  C060  F060         	movff	___lwmod@dividend,?___lwmod
  6555  00548C  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  6556                           
  6557                           ; BSR set to: 0
  6558  005490  0012               	return		;funcret
  6559  005492                     __end_of___lwmod:
  6560                           	opt stack 0
  6561                           tosu	equ	0xFFF
  6562                           tosh	equ	0xFFE
  6563                           tosl	equ	0xFFD
  6564                           pclath	equ	0xFFA
  6565                           tblptru	equ	0xFF8
  6566                           tblptrh	equ	0xFF7
  6567                           tblptrl	equ	0xFF6
  6568                           tablat	equ	0xFF5
  6569                           prodh	equ	0xFF4
  6570                           prodl	equ	0xFF3
  6571                           intcon	equ	0xFF2
  6572                           intcon2	equ	0xFF1
  6573                           intcon3	equ	0xFF0
  6574                           postinc0	equ	0xFEE
  6575                           wreg	equ	0xFE8
  6576                           indf1	equ	0xFE7
  6577                           postinc1	equ	0xFE6
  6578                           postdec1	equ	0xFE5
  6579                           plusw1	equ	0xFE3
  6580                           fsr1h	equ	0xFE2
  6581                           fsr1l	equ	0xFE1
  6582                           indf2	equ	0xFDF
  6583                           postinc2	equ	0xFDE
  6584                           postdec2	equ	0xFDD
  6585                           plusw2	equ	0xFDB
  6586                           fsr2h	equ	0xFDA
  6587                           fsr2l	equ	0xFD9
  6588                           status	equ	0xFD8
  6589                           
  6590 ;; *************** function ___lwdiv *****************
  6591 ;; Defined at:
  6592 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;  dividend        2    0[BANK0 ] unsigned int 
  6595 ;;  divisor         2    2[BANK0 ] unsigned int 
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;  quotient        2    5[BANK0 ] unsigned int 
  6598 ;;  counter         1    4[BANK0 ] unsigned char 
  6599 ;; Return value:  Size  Location     Type
  6600 ;;                  2    0[BANK0 ] unsigned int 
  6601 ;; Registers used:
  6602 ;;		wreg, status,2, status,0
  6603 ;; Tracked objects:
  6604 ;;		On entry : 0/0
  6605 ;;		On exit  : 0/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6608 ;;      Params:         0       4       0       0       0       0       0       0       0
  6609 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6610 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6611 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6612 ;;Total ram usage:        7 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:    3
  6615 ;; This function calls:
  6616 ;;		Nothing
  6617 ;; This function is called by:
  6618 ;;		_utoa
  6619 ;;		_converte_inteiro_matriz
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           	psect	text20
  6624  0051A4                     __ptext20:
  6625                           	opt stack 0
  6626  0051A4                     ___lwdiv:
  6627                           	opt stack 22
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;incstack = 0
  6631  0051A4  0E00               	movlw	0
  6632  0051A6  0100               	movlb	0	; () banked
  6633  0051A8  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6634  0051AA  0E00               	movlw	0
  6635  0051AC  6F65               	movwf	___lwdiv@quotient& (0+255),b
  6636                           
  6637                           ; BSR set to: 0
  6638  0051AE  5162               	movf	___lwdiv@divisor& (0+255),w,b
  6639  0051B0  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6640  0051B2  B4D8               	btfsc	status,2,c
  6641  0051B4  D01C               	goto	l1962
  6642                           
  6643                           ; BSR set to: 0
  6644  0051B6  0E01               	movlw	1
  6645  0051B8  6F64               	movwf	___lwdiv@counter& (0+255),b
  6646  0051BA  D004               	goto	l1957
  6647  0051BC                     
  6648                           ; BSR set to: 0
  6649                           
  6650                           ; BSR set to: 0
  6651  0051BC  90D8               	bcf	status,0,c
  6652  0051BE  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  6653  0051C0  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6654  0051C2  2B64               	incf	___lwdiv@counter& (0+255),f,b
  6655  0051C4                     l1957:
  6656                           
  6657                           ; BSR set to: 0
  6658                           
  6659                           ; BSR set to: 0
  6660  0051C4  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6661  0051C6  D7FA               	goto	l1958
  6662  0051C8                     u14360:
  6663                           
  6664                           ; BSR set to: 0
  6665                           
  6666                           ; BSR set to: 0
  6667                           
  6668                           ; BSR set to: 0
  6669  0051C8  90D8               	bcf	status,0,c
  6670  0051CA  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  6671  0051CC  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6672                           
  6673                           ; BSR set to: 0
  6674  0051CE  5162               	movf	___lwdiv@divisor& (0+255),w,b
  6675  0051D0  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  6676  0051D2  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6677  0051D4  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6678  0051D6  A0D8               	btfss	status,0,c
  6679  0051D8  D005               	goto	l1961
  6680                           
  6681                           ; BSR set to: 0
  6682  0051DA  5162               	movf	___lwdiv@divisor& (0+255),w,b
  6683  0051DC  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  6684  0051DE  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6685  0051E0  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6686                           
  6687                           ; BSR set to: 0
  6688  0051E2  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  6689  0051E4                     l1961:
  6690                           
  6691                           ; BSR set to: 0
  6692                           
  6693                           ; BSR set to: 0
  6694  0051E4  90D8               	bcf	status,0,c
  6695  0051E6  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6696  0051E8  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  6697                           
  6698                           ; BSR set to: 0
  6699  0051EA  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  6700  0051EC  D7ED               	goto	u14360
  6701  0051EE                     l1962:
  6702                           
  6703                           ; BSR set to: 0
  6704                           
  6705                           ; BSR set to: 0
  6706  0051EE  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  6707  0051F2  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6708                           
  6709                           ; BSR set to: 0
  6710  0051F6  0012               	return		;funcret
  6711  0051F8                     __end_of___lwdiv:
  6712                           	opt stack 0
  6713                           tosu	equ	0xFFF
  6714                           tosh	equ	0xFFE
  6715                           tosl	equ	0xFFD
  6716                           pclath	equ	0xFFA
  6717                           tblptru	equ	0xFF8
  6718                           tblptrh	equ	0xFF7
  6719                           tblptrl	equ	0xFF6
  6720                           tablat	equ	0xFF5
  6721                           prodh	equ	0xFF4
  6722                           prodl	equ	0xFF3
  6723                           intcon	equ	0xFF2
  6724                           intcon2	equ	0xFF1
  6725                           intcon3	equ	0xFF0
  6726                           postinc0	equ	0xFEE
  6727                           wreg	equ	0xFE8
  6728                           indf1	equ	0xFE7
  6729                           postinc1	equ	0xFE6
  6730                           postdec1	equ	0xFE5
  6731                           plusw1	equ	0xFE3
  6732                           fsr1h	equ	0xFE2
  6733                           fsr1l	equ	0xFE1
  6734                           indf2	equ	0xFDF
  6735                           postinc2	equ	0xFDE
  6736                           postdec2	equ	0xFDD
  6737                           plusw2	equ	0xFDB
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742 ;; *************** function _atoi *****************
  6743 ;; Defined at:
  6744 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  6747 ;;		 -> poligono_ext.point_long_min(6), poligono_ext.fence_long_min(6), poligono_ext.point_lat_min(6), poligono_ext.fenc
      +e_lat_min(6), 
  6748 ;;		 -> poligono_ext.fence_lat_deg(6), poligono_ext.point_lat_deg(6), poligono_ext.fence_long_deg(6), poligono_ext.point
      +_long_deg(6), 
  6749 ;;		 -> poligono_ext(128), 
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;  a               2   11[BANK0 ] int 
  6752 ;;  sign            1   10[BANK0 ] unsigned char 
  6753 ;; Return value:  Size  Location     Type
  6754 ;;                  2    6[BANK0 ] int 
  6755 ;; Registers used:
  6756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6762 ;;      Params:         0       2       0       0       0       0       0       0       0
  6763 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6764 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6765 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6766 ;;Total ram usage:        7 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    4
  6769 ;; This function calls:
  6770 ;;		___wmul
  6771 ;;		_isdigit
  6772 ;; This function is called by:
  6773 ;;		_verifica_fence_externo
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           	psect	text21
  6778  00421E                     __ptext21:
  6779                           	opt stack 0
  6780  00421E                     _atoi:
  6781                           	opt stack 24
  6782                           
  6783                           ; BSR set to: 0
  6784                           ;incstack = 0
  6785  00421E  D003               	goto	l1683
  6786  004220  0100               	movlb	0	; () banked
  6787  004222  4B66               	infsnz	atoi@s& (0+255),f,b
  6788  004224  2B67               	incf	(atoi@s+1)& (0+255),f,b
  6789  004226                     l1683:
  6790                           
  6791                           ; BSR set to: 0
  6792  004226  C066  FFD9         	movff	atoi@s,fsr2l
  6793  00422A  C067  FFDA         	movff	atoi@s+1,fsr2h
  6794  00422E  0E20               	movlw	32
  6795  004230  18DE               	xorwf	postinc2,w,c
  6796  004232  B4D8               	btfsc	status,2,c
  6797  004234  D7F5               	goto	l1684
  6798  004236  C066  FFD9         	movff	atoi@s,fsr2l
  6799  00423A  C067  FFDA         	movff	atoi@s+1,fsr2h
  6800  00423E  0E09               	movlw	9
  6801  004240  18DE               	xorwf	postinc2,w,c
  6802  004242  B4D8               	btfsc	status,2,c
  6803  004244  D7ED               	goto	l1684
  6804  004246  0E00               	movlw	0
  6805  004248  0100               	movlb	0	; () banked
  6806  00424A  6F6C               	movwf	(atoi@a+1)& (0+255),b
  6807  00424C  0E00               	movlw	0
  6808  00424E  6F6B               	movwf	atoi@a& (0+255),b
  6809  004250  0E00               	movlw	0
  6810  004252  6F6A               	movwf	atoi@sign& (0+255),b
  6811                           
  6812                           ; BSR set to: 0
  6813  004254  C066  FFD9         	movff	atoi@s,fsr2l
  6814  004258  C067  FFDA         	movff	atoi@s+1,fsr2h
  6815  00425C  0E2D               	movlw	45
  6816  00425E  18DE               	xorwf	postinc2,w,c
  6817  004260  A4D8               	btfss	status,2,c
  6818  004262  D002               	goto	l1686
  6819                           
  6820                           ; BSR set to: 0
  6821  004264  2B6A               	incf	atoi@sign& (0+255),f,b
  6822  004266  D026               	goto	l11850
  6823  004268                     l1686:
  6824                           
  6825                           ; BSR set to: 0
  6826                           
  6827                           ; BSR set to: 0
  6828  004268  C066  FFD9         	movff	atoi@s,fsr2l
  6829  00426C  C067  FFDA         	movff	atoi@s+1,fsr2h
  6830  004270  0E2B               	movlw	43
  6831  004272  18DE               	xorwf	postinc2,w,c
  6832  004274  A4D8               	btfss	status,2,c
  6833  004276  D020               	goto	l1689
  6834  004278  D01D               	goto	l11850
  6835  00427A                     
  6836                           ; BSR set to: 0
  6837  00427A  C06B  F060         	movff	atoi@a,___wmul@multiplier
  6838  00427E  C06C  F061         	movff	atoi@a+1,___wmul@multiplier+1
  6839  004282  0E00               	movlw	0
  6840  004284  0100               	movlb	0	; () banked
  6841  004286  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6842  004288  0E0A               	movlw	10
  6843  00428A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6844  00428C  EC76  F02B         	call	___wmul	;wreg free
  6845  004290  C066  FFD9         	movff	atoi@s,fsr2l
  6846  004294  C067  FFDA         	movff	atoi@s+1,fsr2h
  6847  004298  50DF               	movf	indf2,w,c
  6848  00429A  0100               	movlb	0	; () banked
  6849  00429C  6F68               	movwf	??_atoi& (0+255),b
  6850  00429E  6B69               	clrf	(??_atoi+1)& (0+255),b
  6851  0042A0  5160               	movf	?___wmul& (0+255),w,b
  6852  0042A2  2768               	addwf	??_atoi& (0+255),f,b
  6853  0042A4  5161               	movf	(?___wmul+1)& (0+255),w,b
  6854  0042A6  2369               	addwfc	(??_atoi+1)& (0+255),f,b
  6855  0042A8  0ED0               	movlw	208
  6856  0042AA  2568               	addwf	??_atoi& (0+255),w,b
  6857  0042AC  6F6B               	movwf	atoi@a& (0+255),b
  6858  0042AE  0EFF               	movlw	255
  6859  0042B0  2169               	addwfc	(??_atoi+1)& (0+255),w,b
  6860  0042B2  6F6C               	movwf	(atoi@a+1)& (0+255),b
  6861  0042B4                     l11850:
  6862                           
  6863                           ; BSR set to: 0
  6864  0042B4  4B66               	infsnz	atoi@s& (0+255),f,b
  6865  0042B6  2B67               	incf	(atoi@s+1)& (0+255),f,b
  6866  0042B8                     l1689:
  6867                           
  6868                           ; BSR set to: 0
  6869                           
  6870                           ; BSR set to: 0
  6871  0042B8  C066  FFD9         	movff	atoi@s,fsr2l
  6872  0042BC  C067  FFDA         	movff	atoi@s+1,fsr2h
  6873  0042C0  50DF               	movf	indf2,w,c
  6874  0042C2  EC9C  F02B         	call	_isdigit
  6875  0042C6  B0D8               	btfsc	status,0,c
  6876  0042C8  D7D8               	goto	l1690
  6877  0042CA  0100               	movlb	0	; () banked
  6878  0042CC  516A               	movf	atoi@sign& (0+255),w,b
  6879  0042CE  B4D8               	btfsc	status,2,c
  6880  0042D0  D00D               	goto	l1692
  6881                           
  6882                           ; BSR set to: 0
  6883  0042D2  C06B  F068         	movff	atoi@a,??_atoi
  6884  0042D6  C06C  F069         	movff	atoi@a+1,??_atoi+1
  6885  0042DA  1F68               	comf	??_atoi& (0+255),f,b
  6886  0042DC  1F69               	comf	(??_atoi+1)& (0+255),f,b
  6887  0042DE  4B68               	infsnz	??_atoi& (0+255),f,b
  6888  0042E0  2B69               	incf	(??_atoi+1)& (0+255),f,b
  6889  0042E2  C068  F066         	movff	??_atoi,?_atoi
  6890  0042E6  C069  F067         	movff	??_atoi+1,?_atoi+1
  6891  0042EA  0012               	return	
  6892  0042EC                     l1692:
  6893                           
  6894                           ; BSR set to: 0
  6895  0042EC  C06B  F066         	movff	atoi@a,?_atoi
  6896  0042F0  C06C  F067         	movff	atoi@a+1,?_atoi+1
  6897                           
  6898                           ; BSR set to: 0
  6899  0042F4  0012               	return		;funcret
  6900  0042F6                     __end_of_atoi:
  6901                           	opt stack 0
  6902                           tosu	equ	0xFFF
  6903                           tosh	equ	0xFFE
  6904                           tosl	equ	0xFFD
  6905                           pclath	equ	0xFFA
  6906                           tblptru	equ	0xFF8
  6907                           tblptrh	equ	0xFF7
  6908                           tblptrl	equ	0xFF6
  6909                           tablat	equ	0xFF5
  6910                           prodh	equ	0xFF4
  6911                           prodl	equ	0xFF3
  6912                           intcon	equ	0xFF2
  6913                           intcon2	equ	0xFF1
  6914                           intcon3	equ	0xFF0
  6915                           postinc0	equ	0xFEE
  6916                           wreg	equ	0xFE8
  6917                           indf1	equ	0xFE7
  6918                           postinc1	equ	0xFE6
  6919                           postdec1	equ	0xFE5
  6920                           plusw1	equ	0xFE3
  6921                           fsr1h	equ	0xFE2
  6922                           fsr1l	equ	0xFE1
  6923                           indf2	equ	0xFDF
  6924                           postinc2	equ	0xFDE
  6925                           postdec2	equ	0xFDD
  6926                           plusw2	equ	0xFDB
  6927                           fsr2h	equ	0xFDA
  6928                           fsr2l	equ	0xFD9
  6929                           status	equ	0xFD8
  6930                           
  6931 ;; *************** function _isdigit *****************
  6932 ;; Defined at:
  6933 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6934 ;; Parameters:    Size  Location     Type
  6935 ;;  c               1    wreg     unsigned char 
  6936 ;; Auto vars:     Size  Location     Type
  6937 ;;  c               1    2[BANK0 ] unsigned char 
  6938 ;; Return value:  Size  Location     Type
  6939 ;;		None               void
  6940 ;; Registers used:
  6941 ;;		wreg, status,2, status,0
  6942 ;; Tracked objects:
  6943 ;;		On entry : 0/0
  6944 ;;		On exit  : 0/0
  6945 ;;		Unchanged: 0/0
  6946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6947 ;;      Params:         0       0       0       0       0       0       0       0       0
  6948 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6949 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6950 ;;      Totals:         0       3       0       0       0       0       0       0       0
  6951 ;;Total ram usage:        3 bytes
  6952 ;; Hardware stack levels used:    1
  6953 ;; Hardware stack levels required when called:    3
  6954 ;; This function calls:
  6955 ;;		Nothing
  6956 ;; This function is called by:
  6957 ;;		_atoi
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           	psect	text22
  6962  005738                     __ptext22:
  6963                           	opt stack 0
  6964  005738                     _isdigit:
  6965                           	opt stack 24
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;incstack = 0
  6969                           ;isdigit@c stored from wreg
  6970  005738  0100               	movlb	0	; () banked
  6971  00573A  6F62               	movwf	isdigit@c& (0+255),b
  6972  00573C  0E00               	movlw	0
  6973  00573E  0100               	movlb	0	; () banked
  6974  005740  6F61               	movwf	_isdigit$2943& (0+255),b
  6975                           
  6976                           ; BSR set to: 0
  6977  005742  0E3A               	movlw	58
  6978  005744  6162               	cpfslt	isdigit@c& (0+255),b
  6979  005746  D005               	goto	l1864
  6980                           
  6981                           ; BSR set to: 0
  6982  005748  0E2F               	movlw	47
  6983  00574A  6562               	cpfsgt	isdigit@c& (0+255),b
  6984  00574C  D002               	goto	l1864
  6985                           
  6986                           ; BSR set to: 0
  6987  00574E  0E01               	movlw	1
  6988  005750  6F61               	movwf	_isdigit$2943& (0+255),b
  6989  005752                     l1864:
  6990                           
  6991                           ; BSR set to: 0
  6992                           
  6993                           ; BSR set to: 0
  6994  005752  C061  F060         	movff	_isdigit$2943,??_isdigit
  6995  005756  3160               	rrcf	??_isdigit& (0+255),w,b
  6996  005758  0012               	return	
  6997  00575A                     __end_of_isdigit:
  6998                           	opt stack 0
  6999                           tosu	equ	0xFFF
  7000                           tosh	equ	0xFFE
  7001                           tosl	equ	0xFFD
  7002                           pclath	equ	0xFFA
  7003                           tblptru	equ	0xFF8
  7004                           tblptrh	equ	0xFF7
  7005                           tblptrl	equ	0xFF6
  7006                           tablat	equ	0xFF5
  7007                           prodh	equ	0xFF4
  7008                           prodl	equ	0xFF3
  7009                           intcon	equ	0xFF2
  7010                           intcon2	equ	0xFF1
  7011                           intcon3	equ	0xFF0
  7012                           postinc0	equ	0xFEE
  7013                           wreg	equ	0xFE8
  7014                           indf1	equ	0xFE7
  7015                           postinc1	equ	0xFE6
  7016                           postdec1	equ	0xFE5
  7017                           plusw1	equ	0xFE3
  7018                           fsr1h	equ	0xFE2
  7019                           fsr1l	equ	0xFE1
  7020                           indf2	equ	0xFDF
  7021                           postinc2	equ	0xFDE
  7022                           postdec2	equ	0xFDD
  7023                           plusw2	equ	0xFDB
  7024                           fsr2h	equ	0xFDA
  7025                           fsr2l	equ	0xFD9
  7026                           status	equ	0xFD8
  7027                           
  7028 ;; *************** function _escreve_cmd_lcd *****************
  7029 ;; Defined at:
  7030 ;;		line 162 in file "bibliotecas/display_lcd.c"
  7031 ;; Parameters:    Size  Location     Type
  7032 ;;  comando         1    wreg     unsigned char 
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;  comando         1    2[BANK0 ] unsigned char 
  7035 ;; Return value:  Size  Location     Type
  7036 ;;                  1    wreg      void 
  7037 ;; Registers used:
  7038 ;;		wreg, status,2, status,0, cstack
  7039 ;; Tracked objects:
  7040 ;;		On entry : 0/0
  7041 ;;		On exit  : 0/0
  7042 ;;		Unchanged: 0/0
  7043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7044 ;;      Params:         0       0       0       0       0       0       0       0       0
  7045 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7046 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7047 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7048 ;;Total ram usage:        1 bytes
  7049 ;; Hardware stack levels used:    1
  7050 ;; Hardware stack levels required when called:    4
  7051 ;; This function calls:
  7052 ;;		_delay
  7053 ;; This function is called by:
  7054 ;;		_mensagem_inicial
  7055 ;;		_troca_de_tela
  7056 ;;		_init_lcd
  7057 ;;		_cria_caractere_lcd
  7058 ;; This function uses a non-reentrant model
  7059 ;;
  7060                           
  7061                           	psect	text23
  7062  00491C                     __ptext23:
  7063                           	opt stack 0
  7064  00491C                     _escreve_cmd_lcd:
  7065                           	opt stack 25
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;incstack = 0
  7069                           ;escreve_cmd_lcd@comando stored from wreg
  7070  00491C  0100               	movlb	0	; () banked
  7071  00491E  6F62               	movwf	escreve_cmd_lcd@comando& (0+255),b
  7072                           
  7073                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  7074  004920  9483               	bcf	3971,2,c	;volatile
  7075                           
  7076                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  7077  004922  9283               	bcf	3971,1,c	;volatile
  7078                           
  7079                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  7080  004924  9083               	bcf	3971,0,c	;volatile
  7081                           
  7082                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  7083  004926  0100               	movlb	0	; () banked
  7084  004928  A962               	btfss	escreve_cmd_lcd@comando& (0+255),4,b
  7085  00492A  D002               	goto	l699
  7086                           
  7087                           ; BSR set to: 0
  7088  00492C  8883               	bsf	3971,4,c	;volatile
  7089  00492E  D001               	goto	l700
  7090  004930                     l699:
  7091                           
  7092                           ; BSR set to: 0
  7093                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  7094  004930  9883               	bcf	3971,4,c	;volatile
  7095  004932                     l700:
  7096                           
  7097                           ; BSR set to: 0
  7098                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  7099                           
  7100                           ; BSR set to: 0
  7101  004932  AB62               	btfss	escreve_cmd_lcd@comando& (0+255),5,b
  7102  004934  D002               	goto	l701
  7103                           
  7104                           ; BSR set to: 0
  7105  004936  8A83               	bsf	3971,5,c	;volatile
  7106  004938  D001               	goto	l702
  7107  00493A                     l701:
  7108                           
  7109                           ; BSR set to: 0
  7110                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  7111  00493A  9A83               	bcf	3971,5,c	;volatile
  7112  00493C                     l702:
  7113                           
  7114                           ; BSR set to: 0
  7115                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  7116                           
  7117                           ; BSR set to: 0
  7118  00493C  AD62               	btfss	escreve_cmd_lcd@comando& (0+255),6,b
  7119  00493E  D002               	goto	l703
  7120                           
  7121                           ; BSR set to: 0
  7122  004940  8C83               	bsf	3971,6,c	;volatile
  7123  004942  D001               	goto	l704
  7124  004944                     l703:
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  7128  004944  9C83               	bcf	3971,6,c	;volatile
  7129  004946                     l704:
  7130                           
  7131                           ; BSR set to: 0
  7132                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  7133                           
  7134                           ; BSR set to: 0
  7135  004946  AF62               	btfss	escreve_cmd_lcd@comando& (0+255),7,b
  7136  004948  D002               	goto	l705
  7137                           
  7138                           ; BSR set to: 0
  7139  00494A  8E83               	bsf	3971,7,c	;volatile
  7140  00494C  D001               	goto	l706
  7141  00494E                     l705:
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  7145  00494E  9E83               	bcf	3971,7,c	;volatile
  7146  004950                     l706:
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  7150  004950  8083               	bsf	3971,0,c	;volatile
  7151                           
  7152                           ; BSR set to: 0
  7153                           ;display_lcd.c: 181: delay();
  7154  004952  EC61  F02B         	call	_delay	;wreg free
  7155                           
  7156                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  7157  004956  9083               	bcf	3971,0,c	;volatile
  7158                           
  7159                           ;display_lcd.c: 183: delay();
  7160  004958  EC61  F02B         	call	_delay	;wreg free
  7161                           
  7162                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  7163  00495C  0100               	movlb	0	; () banked
  7164  00495E  A162               	btfss	escreve_cmd_lcd@comando& (0+255),0,b
  7165  004960  D002               	goto	l707
  7166                           
  7167                           ; BSR set to: 0
  7168  004962  8883               	bsf	3971,4,c	;volatile
  7169  004964  D001               	goto	l708
  7170  004966                     l707:
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  7174  004966  9883               	bcf	3971,4,c	;volatile
  7175  004968                     l708:
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  7179  004968  A362               	btfss	escreve_cmd_lcd@comando& (0+255),1,b
  7180  00496A  D002               	goto	l709
  7181                           
  7182                           ; BSR set to: 0
  7183  00496C  8A83               	bsf	3971,5,c	;volatile
  7184  00496E  D001               	goto	l710
  7185  004970                     l709:
  7186                           
  7187                           ; BSR set to: 0
  7188                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  7189  004970  9A83               	bcf	3971,5,c	;volatile
  7190  004972                     l710:
  7191                           
  7192                           ; BSR set to: 0
  7193                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  7194  004972  A562               	btfss	escreve_cmd_lcd@comando& (0+255),2,b
  7195  004974  D002               	goto	l711
  7196                           
  7197                           ; BSR set to: 0
  7198  004976  8C83               	bsf	3971,6,c	;volatile
  7199  004978  D001               	goto	l712
  7200  00497A                     l711:
  7201                           
  7202                           ; BSR set to: 0
  7203                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  7204  00497A  9C83               	bcf	3971,6,c	;volatile
  7205  00497C                     l712:
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  7209  00497C  A762               	btfss	escreve_cmd_lcd@comando& (0+255),3,b
  7210  00497E  D002               	goto	l713
  7211                           
  7212                           ; BSR set to: 0
  7213  004980  8E83               	bsf	3971,7,c	;volatile
  7214  004982  D001               	goto	l714
  7215  004984                     l713:
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  7219  004984  9E83               	bcf	3971,7,c	;volatile
  7220  004986                     l714:
  7221                           
  7222                           ; BSR set to: 0
  7223                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  7224  004986  8083               	bsf	3971,0,c	;volatile
  7225                           
  7226                           ; BSR set to: 0
  7227                           ;display_lcd.c: 197: delay();
  7228  004988  EC61  F02B         	call	_delay	;wreg free
  7229                           
  7230                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  7231  00498C  9083               	bcf	3971,0,c	;volatile
  7232                           
  7233                           ;display_lcd.c: 199: delay();
  7234  00498E  EC61  F02B         	call	_delay	;wreg free
  7235                           
  7236                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  7237  004992  0100               	movlb	0	; () banked
  7238  004994  0562               	decf	escreve_cmd_lcd@comando& (0+255),w,b
  7239  004996  B4D8               	btfsc	status,2,c
  7240  004998  D008               	goto	u15940
  7241                           
  7242                           ; BSR set to: 0
  7243  00499A  0E02               	movlw	2
  7244  00499C  1962               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  7245  00499E  B4D8               	btfsc	status,2,c
  7246  0049A0  D004               	goto	u15940
  7247                           
  7248                           ; BSR set to: 0
  7249  0049A2  0E03               	movlw	3
  7250  0049A4  1962               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  7251  0049A6  A4D8               	btfss	status,2,c
  7252  0049A8  0012               	return	
  7253  0049AA                     u15940:
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;display_lcd.c: 205: { delay(); }
  7257                           
  7258                           ; BSR set to: 0
  7259  0049AA  EC61  F02B         	call	_delay	;wreg free
  7260  0049AE  0012               	return	
  7261  0049B0                     __end_of_escreve_cmd_lcd:
  7262                           	opt stack 0
  7263                           tosu	equ	0xFFF
  7264                           tosh	equ	0xFFE
  7265                           tosl	equ	0xFFD
  7266                           pclath	equ	0xFFA
  7267                           tblptru	equ	0xFF8
  7268                           tblptrh	equ	0xFF7
  7269                           tblptrl	equ	0xFF6
  7270                           tablat	equ	0xFF5
  7271                           prodh	equ	0xFF4
  7272                           prodl	equ	0xFF3
  7273                           intcon	equ	0xFF2
  7274                           intcon2	equ	0xFF1
  7275                           intcon3	equ	0xFF0
  7276                           postinc0	equ	0xFEE
  7277                           wreg	equ	0xFE8
  7278                           indf1	equ	0xFE7
  7279                           postinc1	equ	0xFE6
  7280                           postdec1	equ	0xFE5
  7281                           plusw1	equ	0xFE3
  7282                           fsr1h	equ	0xFE2
  7283                           fsr1l	equ	0xFE1
  7284                           indf2	equ	0xFDF
  7285                           postinc2	equ	0xFDE
  7286                           postdec2	equ	0xFDD
  7287                           plusw2	equ	0xFDB
  7288                           fsr2h	equ	0xFDA
  7289                           fsr2l	equ	0xFD9
  7290                           status	equ	0xFD8
  7291                           
  7292 ;; *************** function _Longitude *****************
  7293 ;; Defined at:
  7294 ;;		line 611 in file "bibliotecas/GPS.c"
  7295 ;; Parameters:    Size  Location     Type
  7296 ;;		None
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;		None
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  2    0[BANK0 ] PTR unsigned char 
  7301 ;; Registers used:
  7302 ;;		wreg, status,2, status,0
  7303 ;; Tracked objects:
  7304 ;;		On entry : 0/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7308 ;;      Params:         0       2       0       0       0       0       0       0       0
  7309 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7310 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7311 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7312 ;;Total ram usage:        2 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; Hardware stack levels required when called:    3
  7315 ;; This function calls:
  7316 ;;		Nothing
  7317 ;; This function is called by:
  7318 ;;		_verifica_fence_externo
  7319 ;;		_troca_de_tela
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           	psect	text24
  7324  005858                     __ptext24:
  7325                           	opt stack 0
  7326  005858                     _Longitude:
  7327                           	opt stack 25
  7328                           
  7329                           ;GPS.c: 613: return rawLongitude;
  7330                           
  7331                           ;incstack = 0
  7332  005858  0ED8               	movlw	low _rawLongitude
  7333  00585A  0100               	movlb	0	; () banked
  7334  00585C  6F60               	movwf	?_Longitude& (0+255),b
  7335  00585E  0E02               	movlw	high _rawLongitude
  7336  005860  6F61               	movwf	(?_Longitude+1)& (0+255),b
  7337  005862  0012               	return	
  7338  005864                     __end_of_Longitude:
  7339                           	opt stack 0
  7340                           tosu	equ	0xFFF
  7341                           tosh	equ	0xFFE
  7342                           tosl	equ	0xFFD
  7343                           pclath	equ	0xFFA
  7344                           tblptru	equ	0xFF8
  7345                           tblptrh	equ	0xFF7
  7346                           tblptrl	equ	0xFF6
  7347                           tablat	equ	0xFF5
  7348                           prodh	equ	0xFF4
  7349                           prodl	equ	0xFF3
  7350                           intcon	equ	0xFF2
  7351                           intcon2	equ	0xFF1
  7352                           intcon3	equ	0xFF0
  7353                           postinc0	equ	0xFEE
  7354                           wreg	equ	0xFE8
  7355                           indf1	equ	0xFE7
  7356                           postinc1	equ	0xFE6
  7357                           postdec1	equ	0xFE5
  7358                           plusw1	equ	0xFE3
  7359                           fsr1h	equ	0xFE2
  7360                           fsr1l	equ	0xFE1
  7361                           indf2	equ	0xFDF
  7362                           postinc2	equ	0xFDE
  7363                           postdec2	equ	0xFDD
  7364                           plusw2	equ	0xFDB
  7365                           fsr2h	equ	0xFDA
  7366                           fsr2l	equ	0xFD9
  7367                           status	equ	0xFD8
  7368                           
  7369 ;; *************** function _Latitude *****************
  7370 ;; Defined at:
  7371 ;;		line 606 in file "bibliotecas/GPS.c"
  7372 ;; Parameters:    Size  Location     Type
  7373 ;;		None
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;		None
  7376 ;; Return value:  Size  Location     Type
  7377 ;;                  2    0[BANK0 ] PTR unsigned char 
  7378 ;; Registers used:
  7379 ;;		wreg, status,2, status,0
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7385 ;;      Params:         0       2       0       0       0       0       0       0       0
  7386 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7387 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7388 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7389 ;;Total ram usage:        2 bytes
  7390 ;; Hardware stack levels used:    1
  7391 ;; Hardware stack levels required when called:    3
  7392 ;; This function calls:
  7393 ;;		Nothing
  7394 ;; This function is called by:
  7395 ;;		_verifica_fence_externo
  7396 ;;		_troca_de_tela
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400                           	psect	text25
  7401  005864                     __ptext25:
  7402                           	opt stack 0
  7403  005864                     _Latitude:
  7404                           	opt stack 25
  7405                           
  7406                           ;GPS.c: 608: return rawLatitude;
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;incstack = 0
  7410  005864  0EE5               	movlw	low _rawLatitude
  7411  005866  0100               	movlb	0	; () banked
  7412  005868  6F60               	movwf	?_Latitude& (0+255),b
  7413  00586A  0E02               	movlw	high _rawLatitude
  7414  00586C  6F61               	movwf	(?_Latitude+1)& (0+255),b
  7415  00586E  0012               	return	
  7416  005870                     __end_of_Latitude:
  7417                           	opt stack 0
  7418                           tosu	equ	0xFFF
  7419                           tosh	equ	0xFFE
  7420                           tosl	equ	0xFFD
  7421                           pclath	equ	0xFFA
  7422                           tblptru	equ	0xFF8
  7423                           tblptrh	equ	0xFF7
  7424                           tblptrl	equ	0xFF6
  7425                           tablat	equ	0xFF5
  7426                           prodh	equ	0xFF4
  7427                           prodl	equ	0xFF3
  7428                           intcon	equ	0xFF2
  7429                           intcon2	equ	0xFF1
  7430                           intcon3	equ	0xFF0
  7431                           postinc0	equ	0xFEE
  7432                           wreg	equ	0xFE8
  7433                           indf1	equ	0xFE7
  7434                           postinc1	equ	0xFE6
  7435                           postdec1	equ	0xFE5
  7436                           plusw1	equ	0xFE3
  7437                           fsr1h	equ	0xFE2
  7438                           fsr1l	equ	0xFE1
  7439                           indf2	equ	0xFDF
  7440                           postinc2	equ	0xFDE
  7441                           postdec2	equ	0xFDD
  7442                           plusw2	equ	0xFDB
  7443                           fsr2h	equ	0xFDA
  7444                           fsr2l	equ	0xFD9
  7445                           status	equ	0xFD8
  7446                           
  7447 ;; *************** function _escrita_sdcard *****************
  7448 ;; Defined at:
  7449 ;;		line 206 in file "bibliotecas/SDCard.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;		None
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;  bw              2    0        unsigned short 
  7454 ;; Return value:  Size  Location     Type
  7455 ;;                  1    wreg      void 
  7456 ;; Registers used:
  7457 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7463 ;;      Params:         0       0       0       0       0       0       0       0       0
  7464 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7465 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7466 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7467 ;;Total ram usage:        0 bytes
  7468 ;; Hardware stack levels used:    1
  7469 ;; Hardware stack levels required when called:   15
  7470 ;; This function calls:
  7471 ;;		_desliga_SPI
  7472 ;;		_desliga_uart
  7473 ;;		_f_close
  7474 ;;		_f_lseek
  7475 ;;		_f_mount
  7476 ;;		_f_open
  7477 ;;		_fprintf
  7478 ;;		_inicializa_SPI
  7479 ;;		_inicializa_uart
  7480 ;; This function is called by:
  7481 ;;		_disparo_gravacao
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485                           	psect	text26
  7486  0043C4                     __ptext26:
  7487                           	opt stack 0
  7488  0043C4                     _escrita_sdcard:
  7489                           	opt stack 13
  7490                           
  7491                           ;SDCard.c: 208: WORD bw;
  7492                           ;SDCard.c: 209: PORTBbits.RB3 = 0;
  7493                           
  7494                           ; BSR set to: 0
  7495                           ;incstack = 0
  7496  0043C4  9681               	bcf	3969,3,c	;volatile
  7497                           
  7498                           ;SDCard.c: 210: desliga_uart();
  7499  0043C6  EC25  F02C         	call	_desliga_uart	;wreg free
  7500                           
  7501                           ;SDCard.c: 211: inicializa_SPI();
  7502  0043CA  ECAD  F02B         	call	_inicializa_SPI	;wreg free
  7503                           
  7504                           ;SDCard.c: 212: f_mount(0,&fs);
  7505  0043CE  0E7D               	movlw	low _fs
  7506  0043D0  0100               	movlb	0	; () banked
  7507  0043D2  6F60               	movwf	f_mount@fs& (0+255),b
  7508  0043D4  0E03               	movlw	high _fs
  7509  0043D6  6F61               	movwf	(f_mount@fs+1)& (0+255),b
  7510  0043D8  0E00               	movlw	0
  7511  0043DA  EC4D  F029         	call	_f_mount
  7512                           
  7513                           ;SDCard.c: 216: if (f_open(&fil, filename, 0x10 | 0x02 ) == FR_OK)
  7514  0043DE  0E90               	movlw	low _fil
  7515  0043E0  0100               	movlb	0	; () banked
  7516  0043E2  6FD7               	movwf	f_open@fp& (0+255),b
  7517  0043E4  0E01               	movlw	high _fil
  7518  0043E6  6FD8               	movwf	(f_open@fp+1)& (0+255),b
  7519  0043E8  0E81               	movlw	low _filename
  7520  0043EA  6FD9               	movwf	f_open@path& (0+255),b
  7521  0043EC  0E02               	movlw	high _filename
  7522  0043EE  6FDA               	movwf	(f_open@path+1)& (0+255),b
  7523  0043F0  0E12               	movlw	18
  7524  0043F2  6FDB               	movwf	f_open@mode& (0+255),b
  7525  0043F4  EC7F  F00E         	call	_f_open	;wreg free
  7526  0043F8  0900               	iorlw	0
  7527  0043FA  A4D8               	btfss	status,2,c
  7528  0043FC  D041               	goto	l444
  7529                           
  7530                           ;SDCard.c: 217: {
  7531                           ;SDCard.c: 219: f_lseek(&fil, ((&fil)->fsize));
  7532  0043FE  0E90               	movlw	low _fil
  7533  004400  0100               	movlb	0	; () banked
  7534  004402  6FC4               	movwf	f_lseek@fp& (0+255),b
  7535  004404  0E01               	movlw	high _fil
  7536  004406  6FC5               	movwf	(f_lseek@fp+1)& (0+255),b
  7537  004408  C19A  F0C6         	movff	_fil+10,f_lseek@ofs
  7538  00440C  C19B  F0C7         	movff	_fil+11,f_lseek@ofs+1
  7539  004410  C19C  F0C8         	movff	_fil+12,f_lseek@ofs+2
  7540  004414  C19D  F0C9         	movff	_fil+13,f_lseek@ofs+3
  7541  004418  EC4B  F00A         	call	_f_lseek	;wreg free
  7542                           
  7543                           ;SDCard.c: 224: fprintf(&fil, "\nv%s;lt%s;lo%s;r%s;c%s;k%s;h%s;d%s", "string_dado.vel", 
      +                          string_dado.lt, string_dado.lo, "string_dado.rpm", "string_dado.comb", "string_dado.odom
      +                          etro_total", string_dado.hora, "string_dado.dtc");
  7544  00441C  0E90               	movlw	low _fil
  7545  00441E  0101               	movlb	1	; () banked
  7546  004420  6FDB               	movwf	fprintf@fil& (0+255),b
  7547  004422  0E01               	movlw	high _fil
  7548  004424  6FDC               	movwf	(fprintf@fil+1)& (0+255),b
  7549  004426  0E0F               	movlw	low STR_19
  7550  004428  6FDD               	movwf	fprintf@str& (0+255),b
  7551  00442A  0E61               	movlw	high STR_19
  7552  00442C  6FDE               	movwf	(fprintf@str+1)& (0+255),b
  7553  00442E  0EA4               	movlw	low STR_20
  7554  004430  6FDF               	movwf	(?_fprintf+4)& (0+255),b
  7555  004432  0E61               	movlw	high STR_20
  7556  004434  6FE0               	movwf	(?_fprintf+5)& (0+255),b
  7557  004436  0E9B               	movlw	low (_string_dado+11)
  7558  004438  6FE1               	movwf	(?_fprintf+6)& (0+255),b
  7559  00443A  0E02               	movlw	high (_string_dado+11)
  7560  00443C  6FE2               	movwf	(?_fprintf+7)& (0+255),b
  7561  00443E  0EA8               	movlw	low (_string_dado+24)
  7562  004440  6FE3               	movwf	(?_fprintf+8)& (0+255),b
  7563  004442  0E02               	movlw	high (_string_dado+24)
  7564  004444  6FE4               	movwf	(?_fprintf+9)& (0+255),b
  7565  004446  0EB4               	movlw	low STR_21
  7566  004448  6FE5               	movwf	(?_fprintf+10)& (0+255),b
  7567  00444A  0E61               	movlw	high STR_21
  7568  00444C  6FE6               	movwf	(?_fprintf+11)& (0+255),b
  7569  00444E  0E62               	movlw	low STR_22
  7570  004450  6FE7               	movwf	(?_fprintf+12)& (0+255),b
  7571  004452  0E61               	movlw	high STR_22
  7572  004454  6FE8               	movwf	(?_fprintf+13)& (0+255),b
  7573  004456  0E32               	movlw	low STR_23
  7574  004458  6FE9               	movwf	(?_fprintf+14)& (0+255),b
  7575  00445A  0E61               	movlw	high STR_23
  7576  00445C  6FEA               	movwf	(?_fprintf+15)& (0+255),b
  7577  00445E  0E90               	movlw	low _string_dado
  7578  004460  6FEB               	movwf	(?_fprintf+16)& (0+255),b
  7579  004462  0E02               	movlw	high _string_dado
  7580  004464  6FEC               	movwf	(?_fprintf+17)& (0+255),b
  7581  004466  0E94               	movlw	low STR_24
  7582  004468  6FED               	movwf	(?_fprintf+18)& (0+255),b
  7583  00446A  0E61               	movlw	high STR_24
  7584  00446C  6FEE               	movwf	(?_fprintf+19)& (0+255),b
  7585  00446E  EC90  F00C         	call	_fprintf	;wreg free
  7586                           
  7587                           ;SDCard.c: 227: f_close(&fil);
  7588  004472  0E90               	movlw	low _fil
  7589  004474  0100               	movlb	0	; () banked
  7590  004476  6FAB               	movwf	f_close@fp& (0+255),b
  7591  004478  0E01               	movlw	high _fil
  7592  00447A  6FAC               	movwf	(f_close@fp+1)& (0+255),b
  7593  00447C  EC35  F02B         	call	_f_close	;wreg free
  7594  004480                     l444:
  7595                           
  7596                           ;SDCard.c: 228: }
  7597                           ;SDCard.c: 230: PORTBbits.RB3 = 1;
  7598  004480  8681               	bsf	3969,3,c	;volatile
  7599                           
  7600                           ;SDCard.c: 231: desliga_SPI();
  7601  004482  EC44  F02C         	call	_desliga_SPI	;wreg free
  7602                           
  7603                           ;SDCard.c: 232: inicializa_uart();
  7604  004486  EC8A  F02B         	call	_inicializa_uart	;wreg free
  7605  00448A  0012               	return	
  7606  00448C                     __end_of_escrita_sdcard:
  7607                           	opt stack 0
  7608                           tosu	equ	0xFFF
  7609                           tosh	equ	0xFFE
  7610                           tosl	equ	0xFFD
  7611                           pclath	equ	0xFFA
  7612                           tblptru	equ	0xFF8
  7613                           tblptrh	equ	0xFF7
  7614                           tblptrl	equ	0xFF6
  7615                           tablat	equ	0xFF5
  7616                           prodh	equ	0xFF4
  7617                           prodl	equ	0xFF3
  7618                           intcon	equ	0xFF2
  7619                           intcon2	equ	0xFF1
  7620                           intcon3	equ	0xFF0
  7621                           postinc0	equ	0xFEE
  7622                           wreg	equ	0xFE8
  7623                           indf1	equ	0xFE7
  7624                           postinc1	equ	0xFE6
  7625                           postdec1	equ	0xFE5
  7626                           plusw1	equ	0xFE3
  7627                           fsr1h	equ	0xFE2
  7628                           fsr1l	equ	0xFE1
  7629                           indf2	equ	0xFDF
  7630                           postinc2	equ	0xFDE
  7631                           postdec2	equ	0xFDD
  7632                           plusw2	equ	0xFDB
  7633                           fsr2h	equ	0xFDA
  7634                           fsr2l	equ	0xFD9
  7635                           status	equ	0xFD8
  7636                           
  7637 ;; *************** function _inicializa_uart *****************
  7638 ;; Defined at:
  7639 ;;		line 206 in file "bibliotecas/uart.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;		None
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;		None
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      void 
  7646 ;; Registers used:
  7647 ;;		wreg, status,2, status,0, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7653 ;;      Params:         0       0       0       0       0       0       0       0       0
  7654 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7655 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7656 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7657 ;;Total ram usage:        0 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:    5
  7660 ;; This function calls:
  7661 ;;		_configura_baudrate_uart
  7662 ;; This function is called by:
  7663 ;;		_main
  7664 ;;		_escrita_sdcard
  7665 ;;		_leitura_sdcard
  7666 ;; This function uses a non-reentrant model
  7667 ;;
  7668                           
  7669                           	psect	text27
  7670  005714                     __ptext27:
  7671                           	opt stack 0
  7672  005714                     _inicializa_uart:
  7673                           	opt stack 25
  7674                           
  7675                           ;uart.c: 208: TRISCbits.RC6 = 0;
  7676                           
  7677                           ;incstack = 0
  7678  005714  9C94               	bcf	3988,6,c	;volatile
  7679                           
  7680                           ;uart.c: 209: TRISCbits.RC7 = 0;
  7681  005716  9E94               	bcf	3988,7,c	;volatile
  7682                           
  7683                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  7684  005718  0E80               	movlw	128
  7685  00571A  0100               	movlb	0	; () banked
  7686  00571C  6F6E               	movwf	configura_baudrate_uart@baudrate& (0+255),b
  7687  00571E  0E25               	movlw	37
  7688  005720  6F6F               	movwf	(configura_baudrate_uart@baudrate+1)& (0+255),b
  7689  005722  0E00               	movlw	0
  7690  005724  6F70               	movwf	(configura_baudrate_uart@baudrate+2)& (0+255),b
  7691  005726  0E00               	movlw	0
  7692  005728  6F71               	movwf	(configura_baudrate_uart@baudrate+3)& (0+255),b
  7693  00572A  ECDF  F01E         	call	_configura_baudrate_uart	;wreg free
  7694                           
  7695                           ;uart.c: 213: TXSTA = 0x20;
  7696  00572E  0E20               	movlw	32
  7697  005730  6EAC               	movwf	4012,c	;volatile
  7698                           
  7699                           ;uart.c: 214: RCSTA = 0x90;
  7700  005732  0E90               	movlw	144
  7701  005734  6EAB               	movwf	4011,c	;volatile
  7702  005736  0012               	return		;funcret
  7703  005738                     __end_of_inicializa_uart:
  7704                           	opt stack 0
  7705                           tosu	equ	0xFFF
  7706                           tosh	equ	0xFFE
  7707                           tosl	equ	0xFFD
  7708                           pclath	equ	0xFFA
  7709                           tblptru	equ	0xFF8
  7710                           tblptrh	equ	0xFF7
  7711                           tblptrl	equ	0xFF6
  7712                           tablat	equ	0xFF5
  7713                           prodh	equ	0xFF4
  7714                           prodl	equ	0xFF3
  7715                           intcon	equ	0xFF2
  7716                           intcon2	equ	0xFF1
  7717                           intcon3	equ	0xFF0
  7718                           postinc0	equ	0xFEE
  7719                           wreg	equ	0xFE8
  7720                           indf1	equ	0xFE7
  7721                           postinc1	equ	0xFE6
  7722                           postdec1	equ	0xFE5
  7723                           plusw1	equ	0xFE3
  7724                           fsr1h	equ	0xFE2
  7725                           fsr1l	equ	0xFE1
  7726                           indf2	equ	0xFDF
  7727                           postinc2	equ	0xFDE
  7728                           postdec2	equ	0xFDD
  7729                           plusw2	equ	0xFDB
  7730                           fsr2h	equ	0xFDA
  7731                           fsr2l	equ	0xFD9
  7732                           status	equ	0xFD8
  7733                           
  7734 ;; *************** function _configura_baudrate_uart *****************
  7735 ;; Defined at:
  7736 ;;		line 50 in file "bibliotecas/uart.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  baudrate        4   14[BANK0 ] const long 
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;  x               2   26[BANK0 ] unsigned int 
  7741 ;; Return value:  Size  Location     Type
  7742 ;;                  1    wreg      unsigned char 
  7743 ;; Registers used:
  7744 ;;		wreg, status,2, status,0, cstack
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7750 ;;      Params:         0       4       0       0       0       0       0       0       0
  7751 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7752 ;;      Temps:          0       8       0       0       0       0       0       0       0
  7753 ;;      Totals:         0      14       0       0       0       0       0       0       0
  7754 ;;Total ram usage:       14 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; Hardware stack levels required when called:    4
  7757 ;; This function calls:
  7758 ;;		___aldiv
  7759 ;; This function is called by:
  7760 ;;		_inicializa_uart
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           	psect	text28
  7765  003DBE                     __ptext28:
  7766                           	opt stack 0
  7767  003DBE                     _configura_baudrate_uart:
  7768                           	opt stack 25
  7769                           
  7770                           ;uart.c: 52: unsigned int x;
  7771                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  7772                           
  7773                           ;incstack = 0
  7774  003DBE  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  7775  003DC2  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  7776  003DC6  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  7777  003DCA  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  7778  003DCE  0E06               	movlw	6
  7779  003DD0                     u14415:
  7780  003DD0  90D8               	bcf	status,0,c
  7781  003DD2  0100               	movlb	0	; () banked
  7782  003DD4  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  7783  003DD6  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  7784  003DD8  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  7785  003DDA  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  7786  003DDC  2EE8               	decfsz	wreg,f,c
  7787  003DDE  D7F8               	goto	u14415
  7788  003DE0  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  7789  003DE2  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  7790  003DE4  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  7791  003DE6  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  7792  003DE8  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  7793  003DEA  0E00               	movlw	0
  7794  003DEC  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  7795  003DEE  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  7796  003DF0  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  7797  003DF2  0E00               	movlw	0
  7798  003DF4  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  7799  003DF6  6F60               	movwf	___aldiv@dividend& (0+255),b
  7800  003DF8  0E6C               	movlw	108
  7801  003DFA  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  7802  003DFC  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  7803  003DFE  0EDC               	movlw	220
  7804  003E00  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  7805  003E02  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  7806  003E04  0E02               	movlw	2
  7807  003E06  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  7808  003E08  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  7809  003E0A  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  7810  003E0E  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  7811  003E12  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  7812  003E16  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  7813  003E1A  0E06               	movlw	6
  7814  003E1C                     u14425:
  7815  003E1C  90D8               	bcf	status,0,c
  7816  003E1E  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  7817  003E20  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  7818  003E22  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  7819  003E24  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  7820  003E26  2EE8               	decfsz	wreg,f,c
  7821  003E28  D7F9               	goto	u14425
  7822  003E2A  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  7823  003E2E  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  7824  003E32  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  7825  003E36  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  7826  003E3A  EC7B  F021         	call	___aldiv	;wreg free
  7827  003E3E  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  7828  003E42  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  7829                           
  7830                           ;uart.c: 55: if(x > 255)
  7831  003E46  0100               	movlb	0	; () banked
  7832  003E48  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  7833  003E4A  A0D8               	btfss	status,0,c
  7834  003E4C  D044               	goto	l956
  7835                           
  7836                           ; BSR set to: 0
  7837                           ;uart.c: 56: {
  7838                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  7839  003E4E  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  7840  003E52  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  7841  003E56  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  7842  003E5A  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  7843  003E5E  0E04               	movlw	4
  7844  003E60                     u14445:
  7845  003E60  90D8               	bcf	status,0,c
  7846  003E62  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  7847  003E64  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  7848  003E66  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  7849  003E68  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  7850  003E6A  2EE8               	decfsz	wreg,f,c
  7851  003E6C  D7F9               	goto	u14445
  7852  003E6E  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  7853  003E70  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  7854  003E72  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  7855  003E74  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  7856  003E76  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  7857  003E78  0E00               	movlw	0
  7858  003E7A  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  7859  003E7C  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  7860  003E7E  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  7861  003E80  0E00               	movlw	0
  7862  003E82  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  7863  003E84  6F60               	movwf	___aldiv@dividend& (0+255),b
  7864  003E86  0E6C               	movlw	108
  7865  003E88  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  7866  003E8A  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  7867  003E8C  0EDC               	movlw	220
  7868  003E8E  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  7869  003E90  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  7870  003E92  0E02               	movlw	2
  7871  003E94  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  7872  003E96  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  7873  003E98  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  7874  003E9C  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  7875  003EA0  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  7876  003EA4  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  7877  003EA8  0E04               	movlw	4
  7878  003EAA                     u14455:
  7879  003EAA  90D8               	bcf	status,0,c
  7880  003EAC  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  7881  003EAE  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  7882  003EB0  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  7883  003EB2  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  7884  003EB4  2EE8               	decfsz	wreg,f,c
  7885  003EB6  D7F9               	goto	u14455
  7886  003EB8  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  7887  003EBC  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  7888  003EC0  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  7889  003EC4  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  7890  003EC8  EC7B  F021         	call	___aldiv	;wreg free
  7891  003ECC  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  7892  003ED0  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  7893                           
  7894                           ;uart.c: 58: BRGH = 1;
  7895  003ED4  84AC               	bsf	4012,2,c	;volatile
  7896  003ED6                     l956:
  7897                           
  7898                           ;uart.c: 59: }
  7899                           ;uart.c: 60: if(x < 256)
  7900  003ED6  0100               	movlb	0	; () banked
  7901  003ED8  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  7902  003EDA  B0D8               	btfsc	status,0,c
  7903  003EDC  0012               	return	
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;uart.c: 61: {
  7907                           ;uart.c: 62: SPBRG = x;
  7908  003EDE  C07A  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  7909                           
  7910                           ;uart.c: 63: SYNC = 0;
  7911  003EE2  98AC               	bcf	4012,4,c	;volatile
  7912                           
  7913                           ;uart.c: 64: SPEN = 1;
  7914  003EE4  8EAB               	bsf	4011,7,c	;volatile
  7915                           
  7916                           ;uart.c: 65: TRISCbits.RC7 = 1;
  7917  003EE6  8E94               	bsf	3988,7,c	;volatile
  7918                           
  7919                           ;uart.c: 66: TRISCbits.RC6 = 0;
  7920  003EE8  9C94               	bcf	3988,6,c	;volatile
  7921                           
  7922                           ;uart.c: 67: CREN = 1;
  7923  003EEA  88AB               	bsf	4011,4,c	;volatile
  7924                           
  7925                           ;uart.c: 68: TXEN = 1;
  7926  003EEC  8AAC               	bsf	4012,5,c	;volatile
  7927                           
  7928                           ;uart.c: 70: return (1);
  7929                           ;	Return value of _configura_baudrate_uart is never used
  7930  003EEE  0012               	return	
  7931  003EF0                     __end_of_configura_baudrate_uart:
  7932                           	opt stack 0
  7933                           tosu	equ	0xFFF
  7934                           tosh	equ	0xFFE
  7935                           tosl	equ	0xFFD
  7936                           pclath	equ	0xFFA
  7937                           tblptru	equ	0xFF8
  7938                           tblptrh	equ	0xFF7
  7939                           tblptrl	equ	0xFF6
  7940                           tablat	equ	0xFF5
  7941                           prodh	equ	0xFF4
  7942                           prodl	equ	0xFF3
  7943                           intcon	equ	0xFF2
  7944                           intcon2	equ	0xFF1
  7945                           intcon3	equ	0xFF0
  7946                           postinc0	equ	0xFEE
  7947                           wreg	equ	0xFE8
  7948                           indf1	equ	0xFE7
  7949                           postinc1	equ	0xFE6
  7950                           postdec1	equ	0xFE5
  7951                           plusw1	equ	0xFE3
  7952                           fsr1h	equ	0xFE2
  7953                           fsr1l	equ	0xFE1
  7954                           indf2	equ	0xFDF
  7955                           postinc2	equ	0xFDE
  7956                           postdec2	equ	0xFDD
  7957                           plusw2	equ	0xFDB
  7958                           fsr2h	equ	0xFDA
  7959                           fsr2l	equ	0xFD9
  7960                           status	equ	0xFD8
  7961                           
  7962 ;; *************** function ___aldiv *****************
  7963 ;; Defined at:
  7964 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  7965 ;; Parameters:    Size  Location     Type
  7966 ;;  dividend        4    0[BANK0 ] long 
  7967 ;;  divisor         4    4[BANK0 ] long 
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;  quotient        4   10[BANK0 ] long 
  7970 ;;  sign            1    9[BANK0 ] unsigned char 
  7971 ;;  counter         1    8[BANK0 ] unsigned char 
  7972 ;; Return value:  Size  Location     Type
  7973 ;;                  4    0[BANK0 ] long 
  7974 ;; Registers used:
  7975 ;;		wreg, status,2, status,0
  7976 ;; Tracked objects:
  7977 ;;		On entry : 0/0
  7978 ;;		On exit  : 0/0
  7979 ;;		Unchanged: 0/0
  7980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7981 ;;      Params:         0       8       0       0       0       0       0       0       0
  7982 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7983 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7984 ;;      Totals:         0      14       0       0       0       0       0       0       0
  7985 ;;Total ram usage:       14 bytes
  7986 ;; Hardware stack levels used:    1
  7987 ;; Hardware stack levels required when called:    3
  7988 ;; This function calls:
  7989 ;;		Nothing
  7990 ;; This function is called by:
  7991 ;;		_configura_baudrate_uart
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           	psect	text29
  7996  0042F6                     __ptext29:
  7997                           	opt stack 0
  7998  0042F6                     ___aldiv:
  7999                           	opt stack 25
  8000                           
  8001                           ; BSR set to: 0
  8002                           ;incstack = 0
  8003  0042F6  0E00               	movlw	0
  8004  0042F8  0100               	movlb	0	; () banked
  8005  0042FA  6F69               	movwf	___aldiv@sign& (0+255),b
  8006                           
  8007                           ; BSR set to: 0
  8008  0042FC  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  8009  0042FE  D00A               	goto	l1575
  8010                           
  8011                           ; BSR set to: 0
  8012  004300  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  8013  004302  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  8014  004304  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  8015  004306  6D64               	negf	___aldiv@divisor& (0+255),b
  8016  004308  0E00               	movlw	0
  8017  00430A  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  8018  00430C  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  8019  00430E  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  8020                           
  8021                           ; BSR set to: 0
  8022  004310  0E01               	movlw	1
  8023  004312  6F69               	movwf	___aldiv@sign& (0+255),b
  8024  004314                     l1575:
  8025                           
  8026                           ; BSR set to: 0
  8027                           
  8028                           ; BSR set to: 0
  8029  004314  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  8030  004316  D00A               	goto	l1576
  8031                           
  8032                           ; BSR set to: 0
  8033  004318  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  8034  00431A  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  8035  00431C  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  8036  00431E  6D60               	negf	___aldiv@dividend& (0+255),b
  8037  004320  0E00               	movlw	0
  8038  004322  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  8039  004324  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  8040  004326  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  8041                           
  8042                           ; BSR set to: 0
  8043  004328  0E01               	movlw	1
  8044  00432A  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  8045  00432C                     l1576:
  8046                           
  8047                           ; BSR set to: 0
  8048                           
  8049                           ; BSR set to: 0
  8050  00432C  0E00               	movlw	0
  8051  00432E  6F6A               	movwf	___aldiv@quotient& (0+255),b
  8052  004330  0E00               	movlw	0
  8053  004332  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  8054  004334  0E00               	movlw	0
  8055  004336  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  8056  004338  0E00               	movlw	0
  8057  00433A  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  8058                           
  8059                           ; BSR set to: 0
  8060  00433C  5164               	movf	___aldiv@divisor& (0+255),w,b
  8061  00433E  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  8062  004340  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  8063  004342  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  8064  004344  B4D8               	btfsc	status,2,c
  8065  004346  D02A               	goto	l1583
  8066                           
  8067                           ; BSR set to: 0
  8068  004348  0E01               	movlw	1
  8069  00434A  6F68               	movwf	___aldiv@counter& (0+255),b
  8070  00434C  D006               	goto	l1578
  8071  00434E                     
  8072                           ; BSR set to: 0
  8073                           
  8074                           ; BSR set to: 0
  8075  00434E  90D8               	bcf	status,0,c
  8076  004350  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  8077  004352  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  8078  004354  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  8079  004356  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  8080  004358  2B68               	incf	___aldiv@counter& (0+255),f,b
  8081  00435A                     l1578:
  8082                           
  8083                           ; BSR set to: 0
  8084                           
  8085                           ; BSR set to: 0
  8086  00435A  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  8087  00435C  D7F8               	goto	l1579
  8088  00435E                     u14290:
  8089                           
  8090                           ; BSR set to: 0
  8091                           
  8092                           ; BSR set to: 0
  8093                           
  8094                           ; BSR set to: 0
  8095  00435E  90D8               	bcf	status,0,c
  8096  004360  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  8097  004362  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  8098  004364  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  8099  004366  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  8100                           
  8101                           ; BSR set to: 0
  8102  004368  5164               	movf	___aldiv@divisor& (0+255),w,b
  8103  00436A  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  8104  00436C  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  8105  00436E  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  8106  004370  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  8107  004372  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  8108  004374  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  8109  004376  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  8110  004378  A0D8               	btfss	status,0,c
  8111  00437A  D009               	goto	l1582
  8112                           
  8113                           ; BSR set to: 0
  8114  00437C  5164               	movf	___aldiv@divisor& (0+255),w,b
  8115  00437E  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  8116  004380  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  8117  004382  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  8118  004384  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  8119  004386  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  8120  004388  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  8121  00438A  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  8122                           
  8123                           ; BSR set to: 0
  8124  00438C  816A               	bsf	___aldiv@quotient& (0+255),0,b
  8125  00438E                     l1582:
  8126                           
  8127                           ; BSR set to: 0
  8128                           
  8129                           ; BSR set to: 0
  8130  00438E  90D8               	bcf	status,0,c
  8131  004390  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  8132  004392  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  8133  004394  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  8134  004396  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  8135                           
  8136                           ; BSR set to: 0
  8137  004398  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  8138  00439A  D7E1               	goto	u14290
  8139  00439C                     l1583:
  8140                           
  8141                           ; BSR set to: 0
  8142                           
  8143                           ; BSR set to: 0
  8144                           
  8145                           ; BSR set to: 0
  8146  00439C  5169               	movf	___aldiv@sign& (0+255),w,b
  8147  00439E  B4D8               	btfsc	status,2,c
  8148  0043A0  D008               	goto	l1584
  8149                           
  8150                           ; BSR set to: 0
  8151  0043A2  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  8152  0043A4  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  8153  0043A6  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  8154  0043A8  6D6A               	negf	___aldiv@quotient& (0+255),b
  8155  0043AA  0E00               	movlw	0
  8156  0043AC  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  8157  0043AE  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  8158  0043B0  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  8159  0043B2                     l1584:
  8160                           
  8161                           ; BSR set to: 0
  8162                           
  8163                           ; BSR set to: 0
  8164  0043B2  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  8165  0043B6  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  8166  0043BA  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  8167  0043BE  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  8168  0043C2  0012               	return	
  8169  0043C4                     __end_of___aldiv:
  8170                           	opt stack 0
  8171                           tosu	equ	0xFFF
  8172                           tosh	equ	0xFFE
  8173                           tosl	equ	0xFFD
  8174                           pclath	equ	0xFFA
  8175                           tblptru	equ	0xFF8
  8176                           tblptrh	equ	0xFF7
  8177                           tblptrl	equ	0xFF6
  8178                           tablat	equ	0xFF5
  8179                           prodh	equ	0xFF4
  8180                           prodl	equ	0xFF3
  8181                           intcon	equ	0xFF2
  8182                           intcon2	equ	0xFF1
  8183                           intcon3	equ	0xFF0
  8184                           postinc0	equ	0xFEE
  8185                           wreg	equ	0xFE8
  8186                           indf1	equ	0xFE7
  8187                           postinc1	equ	0xFE6
  8188                           postdec1	equ	0xFE5
  8189                           plusw1	equ	0xFE3
  8190                           fsr1h	equ	0xFE2
  8191                           fsr1l	equ	0xFE1
  8192                           indf2	equ	0xFDF
  8193                           postinc2	equ	0xFDE
  8194                           postdec2	equ	0xFDD
  8195                           plusw2	equ	0xFDB
  8196                           fsr2h	equ	0xFDA
  8197                           fsr2l	equ	0xFD9
  8198                           status	equ	0xFD8
  8199                           
  8200 ;; *************** function _inicializa_SPI *****************
  8201 ;; Defined at:
  8202 ;;		line 49 in file "bibliotecas/SPI.c"
  8203 ;; Parameters:    Size  Location     Type
  8204 ;;		None
  8205 ;; Auto vars:     Size  Location     Type
  8206 ;;		None
  8207 ;; Return value:  Size  Location     Type
  8208 ;;                  1    wreg      void 
  8209 ;; Registers used:
  8210 ;;		wreg, status,2, status,0
  8211 ;; Tracked objects:
  8212 ;;		On entry : 0/0
  8213 ;;		On exit  : 0/0
  8214 ;;		Unchanged: 0/0
  8215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8216 ;;      Params:         0       0       0       0       0       0       0       0       0
  8217 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8218 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8219 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8220 ;;Total ram usage:        0 bytes
  8221 ;; Hardware stack levels used:    1
  8222 ;; Hardware stack levels required when called:    3
  8223 ;; This function calls:
  8224 ;;		Nothing
  8225 ;; This function is called by:
  8226 ;;		_escrita_sdcard
  8227 ;;		_sdcard_init
  8228 ;;		_leitura_sdcard
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232                           	psect	text30
  8233  00575A                     __ptext30:
  8234                           	opt stack 0
  8235  00575A                     _inicializa_SPI:
  8236                           	opt stack 24
  8237                           
  8238                           ;SPI.c: 51: TRISBbits.RB1 = 0;
  8239                           
  8240                           ; BSR set to: 0
  8241                           ;incstack = 0
  8242  00575A  9293               	bcf	3987,1,c	;volatile
  8243                           
  8244                           ;SPI.c: 52: TRISBbits.RB4 = 0;
  8245  00575C  9893               	bcf	3987,4,c	;volatile
  8246                           
  8247                           ;SPI.c: 53: TRISBbits.RB0 = 1;
  8248  00575E  8093               	bsf	3987,0,c	;volatile
  8249                           
  8250                           ;SPI.c: 54: TRISCbits.RC7 = 0;
  8251  005760  9E94               	bcf	3988,7,c	;volatile
  8252                           
  8253                           ;SPI.c: 56: LATBbits.LATB4 = 1;
  8254  005762  888A               	bsf	3978,4,c	;volatile
  8255                           
  8256                           ;SPI.c: 57: SSPSTAT &= 0x3F;
  8257  005764  0E3F               	movlw	63
  8258  005766  16C7               	andwf	4039,f,c	;volatile
  8259                           
  8260                           ;SPI.c: 58: SSPCON1 = 0x00;
  8261  005768  0E00               	movlw	0
  8262  00576A  6EC6               	movwf	4038,c	;volatile
  8263                           
  8264                           ;SPI.c: 60: SSPSTATbits.SMP = 0;
  8265  00576C  9EC7               	bcf	4039,7,c	;volatile
  8266                           
  8267                           ;SPI.c: 61: SSPSTATbits.CKE = 1;
  8268  00576E  8CC7               	bsf	4039,6,c	;volatile
  8269                           
  8270                           ;SPI.c: 62: SSPCON1bits.CKP = 0;
  8271  005770  98C6               	bcf	4038,4,c	;volatile
  8272                           
  8273                           ;SPI.c: 64: SSPCON1 = 0b00000011;
  8274  005772  0E03               	movlw	3
  8275  005774  6EC6               	movwf	4038,c	;volatile
  8276                           
  8277                           ;SPI.c: 66: SSPCON1bits.SSPEN = 1;
  8278  005776  8AC6               	bsf	4038,5,c	;volatile
  8279  005778  0012               	return		;funcret
  8280  00577A                     __end_of_inicializa_SPI:
  8281                           	opt stack 0
  8282                           tosu	equ	0xFFF
  8283                           tosh	equ	0xFFE
  8284                           tosl	equ	0xFFD
  8285                           pclath	equ	0xFFA
  8286                           tblptru	equ	0xFF8
  8287                           tblptrh	equ	0xFF7
  8288                           tblptrl	equ	0xFF6
  8289                           tablat	equ	0xFF5
  8290                           prodh	equ	0xFF4
  8291                           prodl	equ	0xFF3
  8292                           intcon	equ	0xFF2
  8293                           intcon2	equ	0xFF1
  8294                           intcon3	equ	0xFF0
  8295                           postinc0	equ	0xFEE
  8296                           wreg	equ	0xFE8
  8297                           indf1	equ	0xFE7
  8298                           postinc1	equ	0xFE6
  8299                           postdec1	equ	0xFE5
  8300                           plusw1	equ	0xFE3
  8301                           fsr1h	equ	0xFE2
  8302                           fsr1l	equ	0xFE1
  8303                           indf2	equ	0xFDF
  8304                           postinc2	equ	0xFDE
  8305                           postdec2	equ	0xFDD
  8306                           plusw2	equ	0xFDB
  8307                           fsr2h	equ	0xFDA
  8308                           fsr2l	equ	0xFD9
  8309                           status	equ	0xFD8
  8310                           
  8311 ;; *************** function _fprintf *****************
  8312 ;; Defined at:
  8313 ;;		line 1808 in file "bibliotecas/tff.c"
  8314 ;; Parameters:    Size  Location     Type
  8315 ;;  fil             2    0[BANK1 ] PTR struct _FIL
  8316 ;;		 -> fil(28), 
  8317 ;;  str             2    2[BANK1 ] PTR const unsigned char 
  8318 ;;		 -> STR_19(35), 
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;  s              16    0[BANK3 ] unsigned char [16]
  8321 ;;  val             4   24[BANK3 ] unsigned long 
  8322 ;;  i               2   32[BANK3 ] int 
  8323 ;;  cc              2   30[BANK3 ] int 
  8324 ;;  arp             2   28[BANK3 ] PTR void [1]
  8325 ;;		 -> ?_fprintf(2), 
  8326 ;;  w               2   20[BANK3 ] int 
  8327 ;;  res             2   16[BANK3 ] int 
  8328 ;;  c               1   34[BANK3 ] unsigned char 
  8329 ;;  r               1   23[BANK3 ] unsigned char 
  8330 ;;  f               1   22[BANK3 ] unsigned char 
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  2    0[BANK1 ] int 
  8333 ;; Registers used:
  8334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8340 ;;      Params:         0       0      20       0       0       0       0       0       0
  8341 ;;      Locals:         0       0       0       0      35       0       0       0       0
  8342 ;;      Temps:          0       0       2       0       0       0       0       0       0
  8343 ;;      Totals:         0       0      22       0      35       0       0       0       0
  8344 ;;Total ram usage:       57 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:   14
  8347 ;; This function calls:
  8348 ;;		___lldiv
  8349 ;;		___llmod
  8350 ;;		___wmul
  8351 ;;		_fputc
  8352 ;;		_fputs
  8353 ;; This function is called by:
  8354 ;;		_escrita_sdcard
  8355 ;; This function uses a non-reentrant model
  8356 ;;
  8357                           
  8358                           	psect	text31
  8359  001920                     __ptext31:
  8360                           	opt stack 0
  8361  001920                     _fprintf:
  8362                           	opt stack 13
  8363                           
  8364                           ;tff.c: 1814: va_list arp;
  8365                           ;tff.c: 1815: UCHAR c, f, r;
  8366                           ;tff.c: 1816: ULONG val;
  8367                           ;tff.c: 1817: char s[16];
  8368                           ;tff.c: 1818: int i, w, res, cc;
  8369                           ;tff.c: 1821: *arp = __va_start();
  8370                           
  8371                           ;incstack = 0
  8372  001920  0EDF               	movlw	low (?_fprintf+4)
  8373  001922  0103               	movlb	3	; () banked
  8374  001924  6F1C               	movwf	fprintf@arp& (0+255),b
  8375  001926  0E01               	movlw	high (?_fprintf+4)
  8376  001928  6F1D               	movwf	(fprintf@arp+1)& (0+255),b
  8377                           
  8378                           ; BSR set to: 3
  8379                           ;tff.c: 1823: for (cc = res = 0; cc != -1; res += cc) {
  8380  00192A  0E00               	movlw	0
  8381  00192C  6F11               	movwf	(fprintf@res+1)& (0+255),b
  8382  00192E  0E00               	movlw	0
  8383  001930  6F10               	movwf	fprintf@res& (0+255),b
  8384  001932  C310  F31E         	movff	fprintf@res,fprintf@cc
  8385  001936  C311  F31F         	movff	fprintf@res+1,fprintf@cc+1
  8386                           
  8387                           ; BSR set to: 3
  8388  00193A  291E               	incf	fprintf@cc& (0+255),w,b
  8389  00193C  E103               	bnz	l11602
  8390  00193E  291F               	incf	(fprintf@cc+1)& (0+255),w,b
  8391  001940  B4D8               	btfsc	status,2,c
  8392  001942  0012               	return	
  8393  001944                     l11602:
  8394                           
  8395                           ; BSR set to: 3
  8396                           ;tff.c: 1824: c = *str++;
  8397  001944  C1DD  FFF6         	movff	fprintf@str,tblptrl
  8398  001948  C1DE  FFF7         	movff	fprintf@str+1,tblptrh
  8399  00194C                     	if	0	;tblptru may be non-zero
  8400  00194C                     	endif
  8401  00194C                     	if	0	;tblptru may be non-zero
  8402  00194C                     	endif
  8403  00194C  0008               	tblrd		*
  8404  00194E  CFF5 F322          	movff	tablat,fprintf@c
  8405                           
  8406                           ; BSR set to: 3
  8407  001952  0101               	movlb	1	; () banked
  8408  001954  4BDD               	infsnz	fprintf@str& (0+255),f,b
  8409  001956  2BDE               	incf	(fprintf@str+1)& (0+255),f,b
  8410                           
  8411                           ; BSR set to: 1
  8412                           ;tff.c: 1825: if (c == 0) break;
  8413  001958  0103               	movlb	3	; () banked
  8414  00195A  5122               	movf	fprintf@c& (0+255),w,b
  8415  00195C  B4D8               	btfsc	status,2,c
  8416  00195E  0012               	return	
  8417                           
  8418                           ; BSR set to: 3
  8419                           ;tff.c: 1826: if (c != '%') {
  8420                           
  8421                           ; BSR set to: 3
  8422                           
  8423                           ; BSR set to: 3
  8424  001960  0E25               	movlw	37
  8425  001962  1922               	xorwf	fprintf@c& (0+255),w,b
  8426  001964  B4D8               	btfsc	status,2,c
  8427  001966  D015               	goto	l1442
  8428                           
  8429                           ; BSR set to: 3
  8430                           ;tff.c: 1827: cc = fputc(c, fil);
  8431  001968  C322  F0E5         	movff	fprintf@c,fputc@chr
  8432  00196C  0100               	movlb	0	; () banked
  8433  00196E  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  8434  001970  C1DB  F0E7         	movff	fprintf@fil,fputc@fil
  8435  001974  C1DC  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  8436  001978  ECA7  F028         	call	_fputc	;wreg free
  8437  00197C  C0E5  F31E         	movff	?_fputc,fprintf@cc
  8438  001980  C0E6  F31F         	movff	?_fputc+1,fprintf@cc+1
  8439                           
  8440                           ;tff.c: 1828: if (cc != -1) cc = 1;
  8441  001984  0103               	movlb	3	; () banked
  8442  001986  291E               	incf	fprintf@cc& (0+255),w,b
  8443  001988  E103               	bnz	u15560
  8444  00198A  291F               	incf	(fprintf@cc+1)& (0+255),w,b
  8445  00198C  B4D8               	btfsc	status,2,c
  8446  00198E  D1AE               	goto	l1444
  8447  001990                     u15560:
  8448  001990  D096               	goto	u15630
  8449  001992                     l1442:
  8450                           
  8451                           ; BSR set to: 3
  8452                           ;tff.c: 1830: }
  8453                           ;tff.c: 1831: w = f = 0;
  8454                           
  8455                           ; BSR set to: 3
  8456  001992  0E00               	movlw	0
  8457  001994  6F16               	movwf	fprintf@f& (0+255),b
  8458  001996  C316  F314         	movff	fprintf@f,fprintf@w
  8459  00199A  6B15               	clrf	(fprintf@w+1)& (0+255),b
  8460                           
  8461                           ; BSR set to: 3
  8462                           ;tff.c: 1832: c = *str++;
  8463  00199C  C1DD  FFF6         	movff	fprintf@str,tblptrl
  8464  0019A0  C1DE  FFF7         	movff	fprintf@str+1,tblptrh
  8465  0019A4                     	if	0	;tblptru may be non-zero
  8466  0019A4                     	endif
  8467  0019A4                     	if	0	;tblptru may be non-zero
  8468  0019A4                     	endif
  8469  0019A4  0008               	tblrd		*
  8470  0019A6  CFF5 F322          	movff	tablat,fprintf@c
  8471                           
  8472                           ; BSR set to: 3
  8473  0019AA  0101               	movlb	1	; () banked
  8474  0019AC  4BDD               	infsnz	fprintf@str& (0+255),f,b
  8475  0019AE  2BDE               	incf	(fprintf@str+1)& (0+255),f,b
  8476                           
  8477                           ; BSR set to: 1
  8478                           ;tff.c: 1833: if (c == '0') {
  8479  0019B0  0E30               	movlw	48
  8480  0019B2  0103               	movlb	3	; () banked
  8481  0019B4  1922               	xorwf	fprintf@c& (0+255),w,b
  8482  0019B6  A4D8               	btfss	status,2,c
  8483  0019B8  D02E               	goto	l1446
  8484                           
  8485                           ; BSR set to: 3
  8486                           ;tff.c: 1834: f = 1; c = *str++;
  8487  0019BA  0E01               	movlw	1
  8488  0019BC  6F16               	movwf	fprintf@f& (0+255),b
  8489  0019BE  D021               	goto	l11634
  8490  0019C0                     
  8491                           ;tff.c: 1837: w = w * 10 + (c - '0');
  8492                           
  8493                           ; BSR set to: 1
  8494  0019C0  C314  F060         	movff	fprintf@w,___wmul@multiplier
  8495  0019C4  C315  F061         	movff	fprintf@w+1,___wmul@multiplier+1
  8496  0019C8  0E00               	movlw	0
  8497  0019CA  0100               	movlb	0	; () banked
  8498  0019CC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8499  0019CE  0E0A               	movlw	10
  8500  0019D0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8501  0019D2  EC76  F02B         	call	___wmul	;wreg free
  8502  0019D6  0103               	movlb	3	; () banked
  8503  0019D8  5122               	movf	fprintf@c& (0+255),w,b
  8504  0019DA  0101               	movlb	1	; () banked
  8505  0019DC  6FEF               	movwf	??_fprintf& (0+255),b
  8506  0019DE  6BF0               	clrf	(??_fprintf+1)& (0+255),b
  8507  0019E0  0100               	movlb	0	; () banked
  8508  0019E2  5160               	movf	?___wmul& (0+255),w,b
  8509  0019E4  0101               	movlb	1	; () banked
  8510  0019E6  27EF               	addwf	??_fprintf& (0+255),f,b
  8511  0019E8  0100               	movlb	0	; () banked
  8512  0019EA  5161               	movf	(?___wmul+1)& (0+255),w,b
  8513  0019EC  0101               	movlb	1	; () banked
  8514  0019EE  23F0               	addwfc	(??_fprintf+1)& (0+255),f,b
  8515  0019F0  0ED0               	movlw	208
  8516  0019F2  25EF               	addwf	??_fprintf& (0+255),w,b
  8517  0019F4  0103               	movlb	3	; () banked
  8518  0019F6  6F14               	movwf	fprintf@w& (0+255),b
  8519  0019F8  0EFF               	movlw	255
  8520  0019FA  0101               	movlb	1	; () banked
  8521  0019FC  21F0               	addwfc	(??_fprintf+1)& (0+255),w,b
  8522  0019FE  0103               	movlb	3	; () banked
  8523  001A00  6F15               	movwf	(fprintf@w+1)& (0+255),b
  8524  001A02                     l11634:
  8525                           
  8526                           ; BSR set to: 3
  8527                           ;tff.c: 1838: c = *str++;
  8528  001A02  C1DD  FFF6         	movff	fprintf@str,tblptrl
  8529  001A06  C1DE  FFF7         	movff	fprintf@str+1,tblptrh
  8530  001A0A                     	if	0	;tblptru may be non-zero
  8531  001A0A                     	endif
  8532  001A0A                     	if	0	;tblptru may be non-zero
  8533  001A0A                     	endif
  8534  001A0A  0008               	tblrd		*
  8535  001A0C  CFF5 F322          	movff	tablat,fprintf@c
  8536                           
  8537                           ; BSR set to: 3
  8538  001A10  0101               	movlb	1	; () banked
  8539  001A12  4BDD               	infsnz	fprintf@str& (0+255),f,b
  8540  001A14  2BDE               	incf	(fprintf@str+1)& (0+255),f,b
  8541  001A16                     l1446:
  8542                           
  8543                           ; BSR set to: 1
  8544  001A16  0E2F               	movlw	47
  8545  001A18  0103               	movlb	3	; () banked
  8546  001A1A  6522               	cpfsgt	fprintf@c& (0+255),b
  8547  001A1C  D003               	goto	u15590
  8548                           
  8549                           ; BSR set to: 3
  8550  001A1E  0E39               	movlw	57
  8551  001A20  6522               	cpfsgt	fprintf@c& (0+255),b
  8552  001A22  D7CE               	goto	l1447
  8553  001A24                     u15590:
  8554                           
  8555                           ; BSR set to: 3
  8556                           ;tff.c: 1839: }
  8557                           ;tff.c: 1840: if (c == 'l') {
  8558                           
  8559                           ; BSR set to: 3
  8560                           
  8561                           ; BSR set to: 3
  8562  001A24  0E6C               	movlw	108
  8563  001A26  1922               	xorwf	fprintf@c& (0+255),w,b
  8564  001A28  A4D8               	btfss	status,2,c
  8565  001A2A  D00B               	goto	l1451
  8566                           
  8567                           ; BSR set to: 3
  8568                           ;tff.c: 1841: f |= 2; c = *str++;
  8569  001A2C  8316               	bsf	fprintf@f& (0+255),1,b
  8570                           
  8571                           ; BSR set to: 3
  8572  001A2E  C1DD  FFF6         	movff	fprintf@str,tblptrl
  8573  001A32  C1DE  FFF7         	movff	fprintf@str+1,tblptrh
  8574  001A36                     	if	0	;tblptru may be non-zero
  8575  001A36                     	endif
  8576  001A36                     	if	0	;tblptru may be non-zero
  8577  001A36                     	endif
  8578  001A36  0008               	tblrd		*
  8579  001A38  CFF5 F322          	movff	tablat,fprintf@c
  8580                           
  8581                           ; BSR set to: 3
  8582  001A3C  0101               	movlb	1	; () banked
  8583  001A3E  4BDD               	infsnz	fprintf@str& (0+255),f,b
  8584  001A40  2BDE               	incf	(fprintf@str+1)& (0+255),f,b
  8585  001A42                     l1451:
  8586                           
  8587                           ;tff.c: 1842: }
  8588                           ;tff.c: 1843: if (c == 's') {
  8589                           
  8590                           ; BSR set to: 1
  8591  001A42  0E73               	movlw	115
  8592  001A44  0103               	movlb	3	; () banked
  8593  001A46  1922               	xorwf	fprintf@c& (0+255),w,b
  8594  001A48  A4D8               	btfss	status,2,c
  8595  001A4A  D018               	goto	l1452
  8596                           
  8597                           ; BSR set to: 3
  8598                           ;tff.c: 1844: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  8599  001A4C  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8600  001A50  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8601  001A54  CFDE F0EC          	movff	postinc2,fputs@str
  8602  001A58  CFDD F0ED          	movff	postdec2,fputs@str+1
  8603  001A5C  C1DB  F0EE         	movff	fprintf@fil,fputs@fil
  8604  001A60  C1DC  F0EF         	movff	fprintf@fil+1,fputs@fil+1
  8605  001A64  EC68  F025         	call	_fputs	;wreg free
  8606  001A68  C0EC  F31E         	movff	?_fputs,fprintf@cc
  8607  001A6C  C0ED  F31F         	movff	?_fputs+1,fprintf@cc+1
  8608  001A70  0E02               	movlw	2
  8609  001A72  0103               	movlb	3	; () banked
  8610  001A74  271C               	addwf	fprintf@arp& (0+255),f,b
  8611  001A76  0E00               	movlw	0
  8612  001A78  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  8613                           
  8614                           ;tff.c: 1845: continue;
  8615  001A7A  D138               	goto	l1444
  8616  001A7C                     l1452:
  8617                           
  8618                           ; BSR set to: 3
  8619                           ;tff.c: 1846: }
  8620                           ;tff.c: 1847: if (c == 'c') {
  8621                           
  8622                           ; BSR set to: 3
  8623  001A7C  0E63               	movlw	99
  8624  001A7E  1922               	xorwf	fprintf@c& (0+255),w,b
  8625  001A80  A4D8               	btfss	status,2,c
  8626  001A82  D022               	goto	l1453
  8627                           
  8628                           ; BSR set to: 3
  8629                           ;tff.c: 1848: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  8630  001A84  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8631  001A88  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8632  001A8C  50DF               	movf	indf2,w,c
  8633  001A8E  0101               	movlb	1	; () banked
  8634  001A90  6FEF               	movwf	??_fprintf& (0+255),b
  8635  001A92  51EF               	movf	??_fprintf& (0+255),w,b
  8636  001A94  0100               	movlb	0	; () banked
  8637  001A96  6FE5               	movwf	fputc@chr& (0+255),b
  8638  001A98  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  8639  001A9A  C1DB  F0E7         	movff	fprintf@fil,fputc@fil
  8640  001A9E  C1DC  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  8641  001AA2  ECA7  F028         	call	_fputc	;wreg free
  8642  001AA6  C0E5  F31E         	movff	?_fputc,fprintf@cc
  8643  001AAA  C0E6  F31F         	movff	?_fputc+1,fprintf@cc+1
  8644  001AAE  0E02               	movlw	2
  8645  001AB0  0103               	movlb	3	; () banked
  8646  001AB2  271C               	addwf	fprintf@arp& (0+255),f,b
  8647  001AB4  0E00               	movlw	0
  8648  001AB6  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  8649                           
  8650                           ; BSR set to: 3
  8651                           ;tff.c: 1849: if (cc != -1) cc = 1;
  8652  001AB8  291E               	incf	fprintf@cc& (0+255),w,b
  8653  001ABA  E101               	bnz	u15630
  8654  001ABC  D766               	goto	L1
  8655  001ABE                     u15630:
  8656                           
  8657                           ; BSR set to: 3
  8658  001ABE  0E00               	movlw	0
  8659  001AC0  6F1F               	movwf	(fprintf@cc+1)& (0+255),b
  8660  001AC2  0E01               	movlw	1
  8661  001AC4  6F1E               	movwf	fprintf@cc& (0+255),b
  8662                           
  8663                           ; BSR set to: 3
  8664                           ;tff.c: 1850: continue;
  8665  001AC6  D112               	goto	l1444
  8666  001AC8                     l1453:
  8667                           
  8668                           ; BSR set to: 3
  8669                           ;tff.c: 1851: }
  8670                           ;tff.c: 1852: r = 0;
  8671                           
  8672                           ; BSR set to: 3
  8673  001AC8  0E00               	movlw	0
  8674  001ACA  6F17               	movwf	fprintf@r& (0+255),b
  8675                           
  8676                           ; BSR set to: 3
  8677                           ;tff.c: 1853: if (c == 'd') r = 10;
  8678  001ACC  0E64               	movlw	100
  8679  001ACE  1922               	xorwf	fprintf@c& (0+255),w,b
  8680  001AD0  A4D8               	btfss	status,2,c
  8681  001AD2  D002               	goto	l1455
  8682                           
  8683                           ; BSR set to: 3
  8684  001AD4  0E0A               	movlw	10
  8685  001AD6  6F17               	movwf	fprintf@r& (0+255),b
  8686  001AD8                     l1455:
  8687                           
  8688                           ; BSR set to: 3
  8689                           ;tff.c: 1854: if (c == 'u') r = 10;
  8690                           
  8691                           ; BSR set to: 3
  8692  001AD8  0E75               	movlw	117
  8693  001ADA  1922               	xorwf	fprintf@c& (0+255),w,b
  8694  001ADC  A4D8               	btfss	status,2,c
  8695  001ADE  D002               	goto	l1456
  8696                           
  8697                           ; BSR set to: 3
  8698  001AE0  0E0A               	movlw	10
  8699  001AE2  6F17               	movwf	fprintf@r& (0+255),b
  8700  001AE4                     l1456:
  8701                           
  8702                           ; BSR set to: 3
  8703                           ;tff.c: 1855: if (c == 'X') r = 16;
  8704                           
  8705                           ; BSR set to: 3
  8706  001AE4  0E58               	movlw	88
  8707  001AE6  1922               	xorwf	fprintf@c& (0+255),w,b
  8708  001AE8  A4D8               	btfss	status,2,c
  8709  001AEA  D002               	goto	l1457
  8710                           
  8711                           ; BSR set to: 3
  8712  001AEC  0E10               	movlw	16
  8713  001AEE  6F17               	movwf	fprintf@r& (0+255),b
  8714  001AF0                     l1457:
  8715                           
  8716                           ; BSR set to: 3
  8717                           ;tff.c: 1856: if (r == 0) break;
  8718  001AF0  5117               	movf	fprintf@r& (0+255),w,b
  8719  001AF2  B4D8               	btfsc	status,2,c
  8720  001AF4  0012               	return	
  8721                           
  8722                           ; BSR set to: 3
  8723                           ;tff.c: 1857: if (f & 2) {
  8724                           
  8725                           ; BSR set to: 3
  8726  001AF6  A316               	btfss	fprintf@f& (0+255),1,b
  8727  001AF8  D00E               	goto	l1459
  8728                           
  8729                           ; BSR set to: 3
  8730                           ;tff.c: 1858: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  8731  001AFA  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8732  001AFE  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8733  001B02  CFDE F318          	movff	postinc2,fprintf@val
  8734  001B06  CFDE F319          	movff	postinc2,fprintf@val+1
  8735  001B0A  CFDE F31A          	movff	postinc2,fprintf@val+2
  8736  001B0E  CFDE F31B          	movff	postinc2,fprintf@val+3
  8737                           
  8738                           ; BSR set to: 3
  8739  001B12  0E04               	movlw	4
  8740  001B14  D021               	goto	L5
  8741  001B16                     l1459:
  8742                           
  8743                           ; BSR set to: 3
  8744                           ;tff.c: 1860: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  8745                           
  8746                           ; BSR set to: 3
  8747  001B16  0E64               	movlw	100
  8748  001B18  1922               	xorwf	fprintf@c& (0+255),w,b
  8749  001B1A  B4D8               	btfsc	status,2,c
  8750  001B1C  D00F               	goto	l1462
  8751                           
  8752                           ; BSR set to: 3
  8753  001B1E  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8754  001B22  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8755  001B26  CFDE F1EF          	movff	postinc2,??_fprintf
  8756  001B2A  CFDD F1F0          	movff	postdec2,??_fprintf+1
  8757  001B2E  C1EF  F318         	movff	??_fprintf,fprintf@val
  8758  001B32  C1F0  F319         	movff	??_fprintf+1,fprintf@val+1
  8759  001B36  6B1A               	clrf	(fprintf@val+2)& (0+255),b
  8760  001B38  6B1B               	clrf	(fprintf@val+3)& (0+255),b
  8761  001B3A  D00D               	goto	l11694
  8762  001B3C                     l1462:
  8763                           
  8764                           ; BSR set to: 3
  8765                           
  8766                           ; BSR set to: 3
  8767  001B3C  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8768  001B40  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8769  001B44  CFDE F318          	movff	postinc2,fprintf@val
  8770  001B48  CFDD F319          	movff	postdec2,fprintf@val+1
  8771  001B4C  0E00               	movlw	0
  8772  001B4E  BF19               	btfsc	(fprintf@val+1)& (0+255),7,b
  8773  001B50  0EFF               	movlw	-1
  8774  001B52  6F1A               	movwf	(fprintf@val+2)& (0+255),b
  8775  001B54  6F1B               	movwf	(fprintf@val+3)& (0+255),b
  8776  001B56                     l11694:
  8777                           
  8778                           ; BSR set to: 3
  8779  001B56  0E02               	movlw	2
  8780  001B58                     L5:
  8781  001B58  271C               	addwf	fprintf@arp& (0+255),f,b
  8782  001B5A  0E00               	movlw	0
  8783  001B5C  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  8784                           
  8785                           ; BSR set to: 3
  8786                           ;tff.c: 1861: }
  8787                           ;tff.c: 1863: if (c == 'd') {
  8788                           
  8789                           ; BSR set to: 3
  8790                           
  8791                           ; BSR set to: 3
  8792  001B5E  0E64               	movlw	100
  8793  001B60  1922               	xorwf	fprintf@c& (0+255),w,b
  8794  001B62  A4D8               	btfss	status,2,c
  8795  001B64  D00D               	goto	l1466
  8796                           
  8797                           ; BSR set to: 3
  8798                           ;tff.c: 1864: if (val >= 0x80000000) {
  8799  001B66  0E80               	movlw	128
  8800  001B68  5D1B               	subwf	(fprintf@val+3)& (0+255),w,b
  8801  001B6A  A0D8               	btfss	status,0,c
  8802  001B6C  D009               	goto	l1466
  8803                           
  8804                           ; BSR set to: 3
  8805                           ;tff.c: 1865: val = 0 - val;
  8806  001B6E  1F1B               	comf	(fprintf@val+3)& (0+255),f,b
  8807  001B70  1F1A               	comf	(fprintf@val+2)& (0+255),f,b
  8808  001B72  1F19               	comf	(fprintf@val+1)& (0+255),f,b
  8809  001B74  6D18               	negf	fprintf@val& (0+255),b
  8810  001B76  0E00               	movlw	0
  8811  001B78  2319               	addwfc	(fprintf@val+1)& (0+255),f,b
  8812  001B7A  231A               	addwfc	(fprintf@val+2)& (0+255),f,b
  8813  001B7C  231B               	addwfc	(fprintf@val+3)& (0+255),f,b
  8814                           
  8815                           ;tff.c: 1866: f |= 4;
  8816  001B7E  8516               	bsf	fprintf@f& (0+255),2,b
  8817  001B80                     l1466:
  8818                           
  8819                           ; BSR set to: 3
  8820                           ;tff.c: 1867: }
  8821                           ;tff.c: 1868: }
  8822                           ;tff.c: 1869: i = sizeof(s) - 1; s[i] = 0;
  8823                           
  8824                           ; BSR set to: 3
  8825                           
  8826                           ; BSR set to: 3
  8827  001B80  0E00               	movlw	0
  8828  001B82  6F21               	movwf	(fprintf@i+1)& (0+255),b
  8829  001B84  0E0F               	movlw	15
  8830  001B86  6F20               	movwf	fprintf@i& (0+255),b
  8831                           
  8832                           ; BSR set to: 3
  8833  001B88  0E00               	movlw	low fprintf@s
  8834  001B8A  2520               	addwf	fprintf@i& (0+255),w,b
  8835  001B8C  6ED9               	movwf	fsr2l,c
  8836  001B8E  0E03               	movlw	high fprintf@s
  8837  001B90  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  8838  001B92  6EDA               	movwf	fsr2h,c
  8839  001B94  0E00               	movlw	0
  8840  001B96  6EDF               	movwf	indf2,c
  8841  001B98                     
  8842                           ; BSR set to: 3
  8843                           ;tff.c: 1871: c = (UCHAR)(val % r + '0');
  8844                           
  8845                           ; BSR set to: 3
  8846  001B98  C318  F060         	movff	fprintf@val,___llmod@dividend
  8847  001B9C  C319  F061         	movff	fprintf@val+1,___llmod@dividend+1
  8848  001BA0  C31A  F062         	movff	fprintf@val+2,___llmod@dividend+2
  8849  001BA4  C31B  F063         	movff	fprintf@val+3,___llmod@dividend+3
  8850  001BA8  5117               	movf	fprintf@r& (0+255),w,b
  8851  001BAA  0100               	movlb	0	; () banked
  8852  001BAC  6F64               	movwf	___llmod@divisor& (0+255),b
  8853  001BAE  6B65               	clrf	(___llmod@divisor+1)& (0+255),b
  8854  001BB0  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
  8855  001BB2  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
  8856  001BB4  ECE6  F027         	call	___llmod	;wreg free
  8857  001BB8  0100               	movlb	0	; () banked
  8858  001BBA  5160               	movf	?___llmod& (0+255),w,b
  8859  001BBC  0F30               	addlw	48
  8860  001BBE  0103               	movlb	3	; () banked
  8861  001BC0  6F22               	movwf	fprintf@c& (0+255),b
  8862                           
  8863                           ; BSR set to: 3
  8864                           ;tff.c: 1872: if (c > '9') c += 7;
  8865  001BC2  0E39               	movlw	57
  8866  001BC4  6522               	cpfsgt	fprintf@c& (0+255),b
  8867  001BC6  D002               	goto	l1468
  8868                           
  8869                           ; BSR set to: 3
  8870  001BC8  0E07               	movlw	7
  8871  001BCA  2722               	addwf	fprintf@c& (0+255),f,b
  8872  001BCC                     l1468:
  8873                           
  8874                           ; BSR set to: 3
  8875                           ;tff.c: 1873: s[--i] = c;
  8876                           
  8877                           ; BSR set to: 3
  8878  001BCC  0720               	decf	fprintf@i& (0+255),f,b
  8879  001BCE  A0D8               	btfss	status,0,c
  8880  001BD0  0721               	decf	(fprintf@i+1)& (0+255),f,b
  8881  001BD2  0E00               	movlw	low fprintf@s
  8882  001BD4  2520               	addwf	fprintf@i& (0+255),w,b
  8883  001BD6  6ED9               	movwf	fsr2l,c
  8884  001BD8  0E03               	movlw	high fprintf@s
  8885  001BDA  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  8886  001BDC  6EDA               	movwf	fsr2h,c
  8887  001BDE  C322  FFDF         	movff	fprintf@c,indf2
  8888                           
  8889                           ; BSR set to: 3
  8890                           ;tff.c: 1874: val /= r;
  8891  001BE2  C318  F060         	movff	fprintf@val,___lldiv@dividend
  8892  001BE6  C319  F061         	movff	fprintf@val+1,___lldiv@dividend+1
  8893  001BEA  C31A  F062         	movff	fprintf@val+2,___lldiv@dividend+2
  8894  001BEE  C31B  F063         	movff	fprintf@val+3,___lldiv@dividend+3
  8895  001BF2  5117               	movf	fprintf@r& (0+255),w,b
  8896  001BF4  0100               	movlb	0	; () banked
  8897  001BF6  6F64               	movwf	___lldiv@divisor& (0+255),b
  8898  001BF8  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
  8899  001BFA  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
  8900  001BFC  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
  8901  001BFE  ECBD  F026         	call	___lldiv	;wreg free
  8902  001C02  C060  F318         	movff	?___lldiv,fprintf@val
  8903  001C06  C061  F319         	movff	?___lldiv+1,fprintf@val+1
  8904  001C0A  C062  F31A         	movff	?___lldiv+2,fprintf@val+2
  8905  001C0E  C063  F31B         	movff	?___lldiv+3,fprintf@val+3
  8906                           
  8907                           ;tff.c: 1875: } while (i && val);
  8908  001C12  0103               	movlb	3	; () banked
  8909  001C14  5120               	movf	fprintf@i& (0+255),w,b
  8910  001C16  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  8911  001C18  B4D8               	btfsc	status,2,c
  8912  001C1A  D006               	goto	u15740
  8913                           
  8914                           ; BSR set to: 3
  8915  001C1C  5118               	movf	fprintf@val& (0+255),w,b
  8916  001C1E  1119               	iorwf	(fprintf@val+1)& (0+255),w,b
  8917  001C20  111A               	iorwf	(fprintf@val+2)& (0+255),w,b
  8918  001C22  111B               	iorwf	(fprintf@val+3)& (0+255),w,b
  8919  001C24  A4D8               	btfss	status,2,c
  8920  001C26  D7B8               	goto	l1467
  8921  001C28                     u15740:
  8922                           
  8923                           ; BSR set to: 3
  8924                           ;tff.c: 1876: if (i && (f & 4)) s[--i] = '-';
  8925                           
  8926                           ; BSR set to: 3
  8927                           
  8928                           ; BSR set to: 3
  8929  001C28  5120               	movf	fprintf@i& (0+255),w,b
  8930  001C2A  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  8931  001C2C  A4D8               	btfss	status,2,c
  8932                           
  8933                           ; BSR set to: 3
  8934  001C2E  A516               	btfss	fprintf@f& (0+255),2,b
  8935  001C30  D00B               	goto	l1472
  8936                           
  8937                           ; BSR set to: 3
  8938  001C32  0720               	decf	fprintf@i& (0+255),f,b
  8939  001C34  A0D8               	btfss	status,0,c
  8940  001C36  0721               	decf	(fprintf@i+1)& (0+255),f,b
  8941  001C38  0E00               	movlw	low fprintf@s
  8942  001C3A  2520               	addwf	fprintf@i& (0+255),w,b
  8943  001C3C  6ED9               	movwf	fsr2l,c
  8944  001C3E  0E03               	movlw	high fprintf@s
  8945  001C40  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  8946  001C42  6EDA               	movwf	fsr2h,c
  8947  001C44  0E2D               	movlw	45
  8948  001C46  6EDF               	movwf	indf2,c
  8949  001C48                     l1472:
  8950                           
  8951                           ; BSR set to: 3
  8952                           ;tff.c: 1877: w = sizeof(s) - 1 - w;
  8953                           
  8954                           ; BSR set to: 3
  8955  001C48  0E01               	movlw	1
  8956  001C4A  2514               	addwf	fprintf@w& (0+255),w,b
  8957  001C4C  0101               	movlb	1	; () banked
  8958  001C4E  6FEF               	movwf	??_fprintf& (0+255),b
  8959  001C50  0E00               	movlw	0
  8960  001C52  0103               	movlb	3	; () banked
  8961  001C54  2115               	addwfc	(fprintf@w+1)& (0+255),w,b
  8962  001C56  0101               	movlb	1	; () banked
  8963  001C58  6FF0               	movwf	(??_fprintf+1)& (0+255),b
  8964  001C5A  1FEF               	comf	??_fprintf& (0+255),f,b
  8965  001C5C  1FF0               	comf	(??_fprintf+1)& (0+255),f,b
  8966  001C5E  4BEF               	infsnz	??_fprintf& (0+255),f,b
  8967  001C60  2BF0               	incf	(??_fprintf+1)& (0+255),f,b
  8968  001C62  0E10               	movlw	16
  8969  001C64  25EF               	addwf	??_fprintf& (0+255),w,b
  8970  001C66  0103               	movlb	3	; () banked
  8971  001C68  6F14               	movwf	fprintf@w& (0+255),b
  8972  001C6A  0E00               	movlw	0
  8973  001C6C  0101               	movlb	1	; () banked
  8974  001C6E  21F0               	addwfc	(??_fprintf+1)& (0+255),w,b
  8975  001C70  0103               	movlb	3	; () banked
  8976  001C72  6F15               	movwf	(fprintf@w+1)& (0+255),b
  8977                           
  8978                           ;tff.c: 1878: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
  8979  001C74  D016               	goto	l1473
  8980  001C76                     l1474:
  8981                           
  8982                           ; BSR set to: 1
  8983  001C76  0103               	movlb	3	; () banked
  8984  001C78  B116               	btfsc	fprintf@f& (0+255),0,b
  8985  001C7A  D004               	goto	l1476
  8986                           
  8987                           ; BSR set to: 3
  8988  001C7C  0E00               	movlw	0
  8989  001C7E  6F13               	movwf	(_fprintf$2605+1)& (0+255),b
  8990  001C80  0E20               	movlw	32
  8991  001C82  D003               	goto	L3
  8992  001C84                     l1476:
  8993                           
  8994                           ; BSR set to: 3
  8995                           
  8996                           ; BSR set to: 3
  8997  001C84  0E00               	movlw	0
  8998  001C86  6F13               	movwf	(_fprintf$2605+1)& (0+255),b
  8999  001C88  0E30               	movlw	48
  9000  001C8A                     L3:
  9001  001C8A  6F12               	movwf	_fprintf$2605& (0+255),b
  9002                           
  9003                           ; BSR set to: 3
  9004                           
  9005                           ; BSR set to: 3
  9006  001C8C  0720               	decf	fprintf@i& (0+255),f,b
  9007  001C8E  A0D8               	btfss	status,0,c
  9008  001C90  0721               	decf	(fprintf@i+1)& (0+255),f,b
  9009  001C92  0E00               	movlw	low fprintf@s
  9010  001C94  2520               	addwf	fprintf@i& (0+255),w,b
  9011  001C96  6ED9               	movwf	fsr2l,c
  9012  001C98  0E03               	movlw	high fprintf@s
  9013  001C9A  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  9014  001C9C  6EDA               	movwf	fsr2h,c
  9015  001C9E  C312  FFDF         	movff	_fprintf$2605,indf2
  9016  001CA2                     l1473:
  9017                           
  9018                           ; BSR set to: 3
  9019                           
  9020                           ; BSR set to: 3
  9021  001CA2  5120               	movf	fprintf@i& (0+255),w,b
  9022  001CA4  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  9023  001CA6  B4D8               	btfsc	status,2,c
  9024  001CA8  D00D               	goto	u15790
  9025                           
  9026                           ; BSR set to: 3
  9027  001CAA  5120               	movf	fprintf@i& (0+255),w,b
  9028  001CAC  5D14               	subwf	fprintf@w& (0+255),w,b
  9029  001CAE  5115               	movf	(fprintf@w+1)& (0+255),w,b
  9030  001CB0  0A80               	xorlw	128
  9031  001CB2  0101               	movlb	1	; () banked
  9032  001CB4  6FEF               	movwf	??_fprintf& (0+255),b
  9033  001CB6  0103               	movlb	3	; () banked
  9034  001CB8  5121               	movf	(fprintf@i+1)& (0+255),w,b
  9035  001CBA  0A80               	xorlw	128
  9036  001CBC  0101               	movlb	1	; () banked
  9037  001CBE  59EF               	subwfb	??_fprintf& (0+255),w,b
  9038  001CC0  A0D8               	btfss	status,0,c
  9039  001CC2  D7D9               	goto	l1474
  9040  001CC4                     u15790:
  9041                           
  9042                           ;tff.c: 1879: cc = fputs(&s[i], fil);
  9043                           
  9044                           ; BSR set to: 1
  9045                           
  9046                           ; BSR set to: 1
  9047  001CC4  0E00               	movlw	low fprintf@s
  9048  001CC6  0103               	movlb	3	; () banked
  9049  001CC8  2520               	addwf	fprintf@i& (0+255),w,b
  9050  001CCA  0100               	movlb	0	; () banked
  9051  001CCC  6FEC               	movwf	fputs@str& (0+255),b
  9052  001CCE  0E03               	movlw	high fprintf@s
  9053  001CD0  0103               	movlb	3	; () banked
  9054  001CD2  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  9055  001CD4  0100               	movlb	0	; () banked
  9056  001CD6  6FED               	movwf	(fputs@str+1)& (0+255),b
  9057  001CD8  C1DB  F0EE         	movff	fprintf@fil,fputs@fil
  9058  001CDC  C1DC  F0EF         	movff	fprintf@fil+1,fputs@fil+1
  9059  001CE0  EC68  F025         	call	_fputs	;wreg free
  9060  001CE4  C0EC  F31E         	movff	?_fputs,fprintf@cc
  9061  001CE8  C0ED  F31F         	movff	?_fputs+1,fprintf@cc+1
  9062  001CEC                     l1444:
  9063  001CEC  0103               	movlb	3	; () banked
  9064  001CEE  511E               	movf	fprintf@cc& (0+255),w,b
  9065  001CF0  2710               	addwf	fprintf@res& (0+255),f,b
  9066  001CF2  511F               	movf	(fprintf@cc+1)& (0+255),w,b
  9067  001CF4  2311               	addwfc	(fprintf@res+1)& (0+255),f,b
  9068                           
  9069                           ; BSR set to: 3
  9070  001CF6  291E               	incf	fprintf@cc& (0+255),w,b
  9071  001CF8  E101               	bnz	u15801
  9072  001CFA  D621               	goto	L4
  9073  001CFC                     u15801:
  9074  001CFC  D623               	goto	l1439
  9075  001CFE                     __end_of_fprintf:
  9076                           	opt stack 0
  9077                           tosu	equ	0xFFF
  9078                           tosh	equ	0xFFE
  9079                           tosl	equ	0xFFD
  9080                           pclath	equ	0xFFA
  9081                           tblptru	equ	0xFF8
  9082                           tblptrh	equ	0xFF7
  9083                           tblptrl	equ	0xFF6
  9084                           tablat	equ	0xFF5
  9085                           prodh	equ	0xFF4
  9086                           prodl	equ	0xFF3
  9087                           intcon	equ	0xFF2
  9088                           intcon2	equ	0xFF1
  9089                           intcon3	equ	0xFF0
  9090                           postinc0	equ	0xFEE
  9091                           wreg	equ	0xFE8
  9092                           indf1	equ	0xFE7
  9093                           postinc1	equ	0xFE6
  9094                           postdec1	equ	0xFE5
  9095                           plusw1	equ	0xFE3
  9096                           fsr1h	equ	0xFE2
  9097                           fsr1l	equ	0xFE1
  9098                           indf2	equ	0xFDF
  9099                           postinc2	equ	0xFDE
  9100                           postdec2	equ	0xFDD
  9101                           plusw2	equ	0xFDB
  9102                           fsr2h	equ	0xFDA
  9103                           fsr2l	equ	0xFD9
  9104                           status	equ	0xFD8
  9105                           
  9106 ;; *************** function _fputs *****************
  9107 ;; Defined at:
  9108 ;;		line 1788 in file "bibliotecas/tff.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;  str             2  140[BANK0 ] PTR const unsigned char 
  9111 ;;		 -> fprintf@s(16), STR_24(16), STR_23(27), STR_22(17), 
  9112 ;;		 -> STR_21(16), STR_20(16), string_dado(52), 
  9113 ;;  fil             2  142[BANK0 ] PTR struct _FIL
  9114 ;;		 -> fil(28), 
  9115 ;; Auto vars:     Size  Location     Type
  9116 ;;  n               2  145[BANK0 ] int 
  9117 ;; Return value:  Size  Location     Type
  9118 ;;                  2  140[BANK0 ] int 
  9119 ;; Registers used:
  9120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9121 ;; Tracked objects:
  9122 ;;		On entry : 0/0
  9123 ;;		On exit  : 0/0
  9124 ;;		Unchanged: 0/0
  9125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9126 ;;      Params:         0       4       0       0       0       0       0       0       0
  9127 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9128 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9129 ;;      Totals:         0       7       0       0       0       0       0       0       0
  9130 ;;Total ram usage:        7 bytes
  9131 ;; Hardware stack levels used:    1
  9132 ;; Hardware stack levels required when called:   13
  9133 ;; This function calls:
  9134 ;;		_fputc
  9135 ;; This function is called by:
  9136 ;;		_fprintf
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           	psect	text32
  9141  004AD0                     __ptext32:
  9142                           	opt stack 0
  9143  004AD0                     _fputs:
  9144                           	opt stack 13
  9145                           
  9146                           ;tff.c: 1793: int n;
  9147                           ;tff.c: 1796: for (n = 0; *str; str++, n++) {
  9148                           
  9149                           ; BSR set to: 3
  9150                           ;incstack = 0
  9151  004AD0  0E00               	movlw	0
  9152  004AD2  0100               	movlb	0	; () banked
  9153  004AD4  6FF2               	movwf	(fputs@n+1)& (0+255),b
  9154  004AD6  0E00               	movlw	0
  9155  004AD8  6FF1               	movwf	fputs@n& (0+255),b
  9156  004ADA  D028               	goto	l1432
  9157  004ADC                     
  9158                           ;tff.c: 1797: if (fputc(*str, fil) == -1) return -1;
  9159                           
  9160                           ; BSR set to: 0
  9161  004ADC  C0EC  FFF6         	movff	fputs@str,tblptrl
  9162  004AE0  C0ED  FFF7         	movff	fputs@str+1,tblptrh
  9163  004AE4  6AF8               	clrf	tblptru,c
  9164  004AE6  0E07               	movlw	(high __ramtop+-1)
  9165  004AE8  64F7               	cpfsgt	tblptrh,c
  9166  004AEA  D003               	bra	u15037
  9167  004AEC  0008               	tblrd		*
  9168  004AEE  50F5               	movf	tablat,w,c
  9169  004AF0  D005               	bra	u15030
  9170  004AF2                     u15037:
  9171  004AF2  CFF6 FFE9          	movff	tblptrl,fsr0l
  9172  004AF6  CFF7 FFEA          	movff	tblptrh,fsr0h
  9173  004AFA  50EF               	movf	indf0,w,c
  9174  004AFC                     u15030:
  9175  004AFC  0100               	movlb	0	; () banked
  9176  004AFE  6FF0               	movwf	??_fputs& (0+255),b
  9177  004B00  51F0               	movf	??_fputs& (0+255),w,b
  9178  004B02  6FE5               	movwf	fputc@chr& (0+255),b
  9179  004B04  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  9180  004B06  C0EE  F0E7         	movff	fputs@fil,fputc@fil
  9181  004B0A  C0EF  F0E8         	movff	fputs@fil+1,fputc@fil+1
  9182  004B0E  ECA7  F028         	call	_fputc	;wreg free
  9183  004B12  0100               	movlb	0	; () banked
  9184  004B14  29E5               	incf	?_fputc& (0+255),w,b
  9185  004B16  E106               	bnz	l11296
  9186  004B18  29E6               	incf	(?_fputc+1)& (0+255),w,b
  9187  004B1A  A4D8               	btfss	status,2,c
  9188  004B1C  D003               	goto	l1434
  9189                           
  9190                           ; BSR set to: 0
  9191  004B1E  69EC               	setf	?_fputs& (0+255),b
  9192  004B20  69ED               	setf	(?_fputs+1)& (0+255),b
  9193  004B22  0012               	return	
  9194  004B24                     l1434:
  9195  004B24                     l11296:
  9196                           
  9197                           ; BSR set to: 0
  9198  004B24  4BEC               	infsnz	fputs@str& (0+255),f,b
  9199  004B26  2BED               	incf	(fputs@str+1)& (0+255),f,b
  9200  004B28  4BF1               	infsnz	fputs@n& (0+255),f,b
  9201  004B2A  2BF2               	incf	(fputs@n+1)& (0+255),f,b
  9202  004B2C                     l1432:
  9203                           
  9204                           ; BSR set to: 0
  9205                           
  9206                           ; BSR set to: 0
  9207  004B2C  C0EC  FFF6         	movff	fputs@str,tblptrl
  9208  004B30  C0ED  FFF7         	movff	fputs@str+1,tblptrh
  9209  004B34  6AF8               	clrf	tblptru,c
  9210  004B36  0E07               	movlw	(high __ramtop+-1)
  9211  004B38  64F7               	cpfsgt	tblptrh,c
  9212  004B3A  D003               	bra	u15057
  9213  004B3C  0008               	tblrd		*
  9214  004B3E  50F5               	movf	tablat,w,c
  9215  004B40  D005               	bra	u15050
  9216  004B42                     u15057:
  9217  004B42  CFF6 FFE9          	movff	tblptrl,fsr0l
  9218  004B46  CFF7 FFEA          	movff	tblptrh,fsr0h
  9219  004B4A  50EF               	movf	indf0,w,c
  9220  004B4C                     u15050:
  9221  004B4C  0900               	iorlw	0
  9222  004B4E  A4D8               	btfss	status,2,c
  9223  004B50  D7C5               	goto	l1433
  9224                           
  9225                           ;tff.c: 1798: }
  9226                           ;tff.c: 1799: return n;
  9227  004B52  C0F1  F0EC         	movff	fputs@n,?_fputs
  9228  004B56  C0F2  F0ED         	movff	fputs@n+1,?_fputs+1
  9229  004B5A  0012               	return		;funcret
  9230  004B5C                     __end_of_fputs:
  9231                           	opt stack 0
  9232                           tosu	equ	0xFFF
  9233                           tosh	equ	0xFFE
  9234                           tosl	equ	0xFFD
  9235                           pclath	equ	0xFFA
  9236                           tblptru	equ	0xFF8
  9237                           tblptrh	equ	0xFF7
  9238                           tblptrl	equ	0xFF6
  9239                           tablat	equ	0xFF5
  9240                           prodh	equ	0xFF4
  9241                           prodl	equ	0xFF3
  9242                           intcon	equ	0xFF2
  9243                           intcon2	equ	0xFF1
  9244                           intcon3	equ	0xFF0
  9245                           indf0	equ	0xFEF
  9246                           postinc0	equ	0xFEE
  9247                           fsr0h	equ	0xFEA
  9248                           fsr0l	equ	0xFE9
  9249                           wreg	equ	0xFE8
  9250                           indf1	equ	0xFE7
  9251                           postinc1	equ	0xFE6
  9252                           postdec1	equ	0xFE5
  9253                           plusw1	equ	0xFE3
  9254                           fsr1h	equ	0xFE2
  9255                           fsr1l	equ	0xFE1
  9256                           indf2	equ	0xFDF
  9257                           postinc2	equ	0xFDE
  9258                           postdec2	equ	0xFDD
  9259                           plusw2	equ	0xFDB
  9260                           fsr2h	equ	0xFDA
  9261                           fsr2l	equ	0xFD9
  9262                           status	equ	0xFD8
  9263                           
  9264 ;; *************** function _fputc *****************
  9265 ;; Defined at:
  9266 ;;		line 1761 in file "bibliotecas/tff.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;  chr             2  133[BANK0 ] int 
  9269 ;;  fil             2  135[BANK0 ] PTR struct _FIL
  9270 ;;		 -> fil(28), 
  9271 ;; Auto vars:     Size  Location     Type
  9272 ;;  bw              2  138[BANK0 ] unsigned int 
  9273 ;;  c               1  137[BANK0 ] unsigned char 
  9274 ;; Return value:  Size  Location     Type
  9275 ;;                  2  133[BANK0 ] int 
  9276 ;; Registers used:
  9277 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9278 ;; Tracked objects:
  9279 ;;		On entry : 0/0
  9280 ;;		On exit  : 0/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9283 ;;      Params:         0       4       0       0       0       0       0       0       0
  9284 ;;      Locals:         0       3       0       0       0       0       0       0       0
  9285 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9286 ;;      Totals:         0       7       0       0       0       0       0       0       0
  9287 ;;Total ram usage:        7 bytes
  9288 ;; Hardware stack levels used:    1
  9289 ;; Hardware stack levels required when called:   12
  9290 ;; This function calls:
  9291 ;;		_f_write
  9292 ;; This function is called by:
  9293 ;;		_fputs
  9294 ;;		_fprintf
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           	psect	text33
  9299  00514E                     __ptext33:
  9300                           	opt stack 0
  9301  00514E                     _fputc:
  9302                           	opt stack 13
  9303                           
  9304                           ;tff.c: 1766: UINT bw;
  9305                           ;tff.c: 1767: char c;
  9306                           ;tff.c: 1773: if (!fil) {
  9307                           
  9308                           ;incstack = 0
  9309  00514E  0100               	movlb	0	; () banked
  9310  005150  51E7               	movf	fputc@fil& (0+255),w,b
  9311  005152  11E8               	iorwf	(fputc@fil+1)& (0+255),w,b
  9312  005154  A4D8               	btfss	status,2,c
  9313  005156  D005               	goto	l1424
  9314                           
  9315                           ; BSR set to: 0
  9316                           ;tff.c: 1775: return chr;
  9317  005158  C0E5  F0E5         	movff	fputc@chr,?_fputc
  9318  00515C  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  9319  005160  0012               	return	
  9320  005162                     l1424:
  9321                           
  9322                           ; BSR set to: 0
  9323                           ;tff.c: 1776: }
  9324                           ;tff.c: 1777: c = (char)chr;
  9325  005162  C0E5  F0E9         	movff	fputc@chr,fputc@c
  9326                           
  9327                           ; BSR set to: 0
  9328                           ;tff.c: 1778: f_write(fil, &c, 1, &bw);
  9329  005166  C0E7  F0C4         	movff	fputc@fil,f_write@fp
  9330  00516A  C0E8  F0C5         	movff	fputc@fil+1,f_write@fp+1
  9331  00516E  0EE9               	movlw	low fputc@c
  9332  005170  6FC6               	movwf	f_write@buff& (0+255),b
  9333  005172  0E00               	movlw	high fputc@c
  9334  005174  6FC7               	movwf	(f_write@buff+1)& (0+255),b
  9335  005176  0E00               	movlw	0
  9336  005178  6FC9               	movwf	(f_write@btw+1)& (0+255),b
  9337  00517A  0E01               	movlw	1
  9338  00517C  6FC8               	movwf	f_write@btw& (0+255),b
  9339  00517E  0EEA               	movlw	low fputc@bw
  9340  005180  6FCA               	movwf	f_write@bw& (0+255),b
  9341  005182  0E00               	movlw	high fputc@bw
  9342  005184  6FCB               	movwf	(f_write@bw+1)& (0+255),b
  9343  005186  ECD5  F004         	call	_f_write	;wreg free
  9344                           
  9345                           ;tff.c: 1779: return bw ? chr : -1;
  9346  00518A  0100               	movlb	0	; () banked
  9347  00518C  51EA               	movf	fputc@bw& (0+255),w,b
  9348  00518E  11EB               	iorwf	(fputc@bw+1)& (0+255),w,b
  9349  005190  A4D8               	btfss	status,2,c
  9350  005192  D003               	goto	l1427
  9351                           
  9352                           ; BSR set to: 0
  9353  005194  69E5               	setf	?_fputc& (0+255),b
  9354  005196  69E6               	setf	(?_fputc+1)& (0+255),b
  9355  005198  0012               	return	
  9356  00519A                     l1427:
  9357                           
  9358                           ; BSR set to: 0
  9359  00519A  C0E5  F0E5         	movff	fputc@chr,?_fputc
  9360  00519E  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  9361  0051A2  0012               	return	
  9362  0051A4                     __end_of_fputc:
  9363                           	opt stack 0
  9364                           tosu	equ	0xFFF
  9365                           tosh	equ	0xFFE
  9366                           tosl	equ	0xFFD
  9367                           pclath	equ	0xFFA
  9368                           tblptru	equ	0xFF8
  9369                           tblptrh	equ	0xFF7
  9370                           tblptrl	equ	0xFF6
  9371                           tablat	equ	0xFF5
  9372                           prodh	equ	0xFF4
  9373                           prodl	equ	0xFF3
  9374                           intcon	equ	0xFF2
  9375                           intcon2	equ	0xFF1
  9376                           intcon3	equ	0xFF0
  9377                           indf0	equ	0xFEF
  9378                           postinc0	equ	0xFEE
  9379                           fsr0h	equ	0xFEA
  9380                           fsr0l	equ	0xFE9
  9381                           wreg	equ	0xFE8
  9382                           indf1	equ	0xFE7
  9383                           postinc1	equ	0xFE6
  9384                           postdec1	equ	0xFE5
  9385                           plusw1	equ	0xFE3
  9386                           fsr1h	equ	0xFE2
  9387                           fsr1l	equ	0xFE1
  9388                           indf2	equ	0xFDF
  9389                           postinc2	equ	0xFDE
  9390                           postdec2	equ	0xFDD
  9391                           plusw2	equ	0xFDB
  9392                           fsr2h	equ	0xFDA
  9393                           fsr2l	equ	0xFD9
  9394                           status	equ	0xFD8
  9395                           
  9396 ;; *************** function _f_write *****************
  9397 ;; Defined at:
  9398 ;;		line 991 in file "bibliotecas/tff.c"
  9399 ;; Parameters:    Size  Location     Type
  9400 ;;  fp              2  100[BANK0 ] PTR struct _FIL
  9401 ;;		 -> fil(28), 
  9402 ;;  buff            2  102[BANK0 ] PTR const void 
  9403 ;;		 -> fputc@c(1), 
  9404 ;;  btw             2  104[BANK0 ] unsigned int 
  9405 ;;  bw              2  106[BANK0 ] PTR unsigned int 
  9406 ;;		 -> fputc@bw(2), 
  9407 ;; Auto vars:     Size  Location     Type
  9408 ;;  sect            4  123[BANK0 ] unsigned long 
  9409 ;;  wcnt            2  131[BANK0 ] unsigned int 
  9410 ;;  clust           2  129[BANK0 ] unsigned short 
  9411 ;;  cc              2  127[BANK0 ] unsigned int 
  9412 ;;  wbuff           2  121[BANK0 ] PTR const unsigned char 
  9413 ;;		 -> fputc@c(1), 
  9414 ;;  res             1  120[BANK0 ] enum E155
  9415 ;; Return value:  Size  Location     Type
  9416 ;;                  1    wreg      enum E155
  9417 ;; Registers used:
  9418 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9419 ;; Tracked objects:
  9420 ;;		On entry : 0/0
  9421 ;;		On exit  : 0/0
  9422 ;;		Unchanged: 0/0
  9423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9424 ;;      Params:         0       8       0       0       0       0       0       0       0
  9425 ;;      Locals:         0      13       0       0       0       0       0       0       0
  9426 ;;      Temps:          0      12       0       0       0       0       0       0       0
  9427 ;;      Totals:         0      33       0       0       0       0       0       0       0
  9428 ;;Total ram usage:       33 bytes
  9429 ;; Hardware stack levels used:    1
  9430 ;; Hardware stack levels required when called:   11
  9431 ;; This function calls:
  9432 ;;		_clust2sect
  9433 ;;		_create_chain
  9434 ;;		_disk_write
  9435 ;;		_memcpy
  9436 ;;		_move_window
  9437 ;;		_validate
  9438 ;; This function is called by:
  9439 ;;		_fputc
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           	psect	text34
  9444  0009AA                     __ptext34:
  9445                           	opt stack 0
  9446  0009AA                     _f_write:
  9447                           	opt stack 13
  9448                           
  9449                           ;tff.c: 998: FRESULT res;
  9450                           ;tff.c: 999: DWORD sect;
  9451                           ;tff.c: 1000: UINT wcnt, cc;
  9452                           ;tff.c: 1001: CLUST clust;
  9453                           ;tff.c: 1002: const BYTE *wbuff = buff;
  9454                           
  9455                           ; BSR set to: 0
  9456                           ;incstack = 0
  9457  0009AA  C0C6  F0D9         	movff	f_write@buff,f_write@wbuff
  9458  0009AE  C0C7  F0DA         	movff	f_write@buff+1,f_write@wbuff+1
  9459                           
  9460                           ;tff.c: 1005: *bw = 0;
  9461  0009B2  C0CA  FFD9         	movff	f_write@bw,fsr2l
  9462  0009B6  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  9463  0009BA  0E00               	movlw	0
  9464  0009BC  6EDE               	movwf	postinc2,c
  9465  0009BE  0E00               	movlw	0
  9466  0009C0  6EDD               	movwf	postdec2,c
  9467                           
  9468                           ;tff.c: 1006: res = validate(fp->fs, fp->id);
  9469  0009C2  0100               	movlb	0	; () banked
  9470  0009C4  EE20 F004          	lfsr	2,4
  9471  0009C8  51C4               	movf	f_write@fp& (0+255),w,b
  9472  0009CA  26D9               	addwf	fsr2l,f,c
  9473  0009CC  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9474  0009CE  22DA               	addwfc	fsr2h,f,c
  9475  0009D0  CFDE F067          	movff	postinc2,validate@fs
  9476  0009D4  CFDD F068          	movff	postdec2,validate@fs+1
  9477  0009D8  C0C4  FFD9         	movff	f_write@fp,fsr2l
  9478  0009DC  C0C5  FFDA         	movff	f_write@fp+1,fsr2h
  9479  0009E0  CFDE F069          	movff	postinc2,validate@id
  9480  0009E4  CFDD F06A          	movff	postdec2,validate@id+1
  9481  0009E8  EC73  F029         	call	_validate	;wreg free
  9482  0009EC  0100               	movlb	0	; () banked
  9483  0009EE  6FD8               	movwf	f_write@res& (0+255),b
  9484                           
  9485                           ; BSR set to: 0
  9486                           ;tff.c: 1007: if (res != FR_OK) return res;
  9487  0009F0  51D8               	movf	f_write@res& (0+255),w,b
  9488  0009F2  A4D8               	btfss	status,2,c
  9489  0009F4  0012               	return	
  9490                           
  9491                           ; BSR set to: 0
  9492                           ;tff.c: 1008: if (fp->flag & 0x80) return FR_RW_ERROR;
  9493                           
  9494                           ; BSR set to: 0
  9495                           
  9496                           ; BSR set to: 0
  9497                           ;	Return value of _f_write is never used
  9498  0009F6  EE20 F002          	lfsr	2,2
  9499  0009FA  51C4               	movf	f_write@fp& (0+255),w,b
  9500  0009FC  26D9               	addwf	fsr2l,f,c
  9501  0009FE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9502  000A00  22DA               	addwfc	fsr2h,f,c
  9503  000A02  BEDF               	btfsc	indf2,7,c
  9504  000A04  0012               	return	
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;tff.c: 1009: if (!(fp->flag & 0x02)) return FR_DENIED;
  9508                           
  9509                           ; BSR set to: 0
  9510                           
  9511                           ; BSR set to: 0
  9512                           ;	Return value of _f_write is never used
  9513  000A06  EE20 F002          	lfsr	2,2
  9514  000A0A  51C4               	movf	f_write@fp& (0+255),w,b
  9515  000A0C  26D9               	addwf	fsr2l,f,c
  9516  000A0E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9517  000A10  22DA               	addwfc	fsr2h,f,c
  9518  000A12  A2DF               	btfss	indf2,1,c
  9519  000A14  0012               	return	
  9520                           
  9521                           ; BSR set to: 0
  9522                           ;tff.c: 1010: if (fp->fsize + btw < fp->fsize) return FR_OK;
  9523                           
  9524                           ; BSR set to: 0
  9525                           
  9526                           ; BSR set to: 0
  9527                           ;	Return value of _f_write is never used
  9528  000A16  EE20 F00A          	lfsr	2,10
  9529  000A1A  51C4               	movf	f_write@fp& (0+255),w,b
  9530  000A1C  26D9               	addwf	fsr2l,f,c
  9531  000A1E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9532  000A20  22DA               	addwfc	fsr2h,f,c
  9533  000A22  EE10 F00A          	lfsr	1,10
  9534  000A26  51C4               	movf	f_write@fp& (0+255),w,b
  9535  000A28  26E1               	addwf	fsr1l,f,c
  9536  000A2A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9537  000A2C  22E2               	addwfc	fsr1h,f,c
  9538  000A2E  CFE6 F0D0          	movff	postinc1,??_f_write+4
  9539  000A32  CFE6 F0D1          	movff	postinc1,??_f_write+5
  9540  000A36  CFE6 F0D2          	movff	postinc1,??_f_write+6
  9541  000A3A  CFE6 F0D3          	movff	postinc1,??_f_write+7
  9542  000A3E  51C8               	movf	f_write@btw& (0+255),w,b
  9543  000A40  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  9544  000A42  6FD4               	movwf	(??_f_write+8)& (0+255),b
  9545  000A44  51C9               	movf	(f_write@btw+1)& (0+255),w,b
  9546  000A46  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  9547  000A48  6FD5               	movwf	(??_f_write+9)& (0+255),b
  9548  000A4A  0E00               	movlw	0
  9549  000A4C  21D2               	addwfc	(??_f_write+6)& (0+255),w,b
  9550  000A4E  6FD6               	movwf	(??_f_write+10)& (0+255),b
  9551  000A50  0E00               	movlw	0
  9552  000A52  21D3               	addwfc	(??_f_write+7)& (0+255),w,b
  9553  000A54  6FD7               	movwf	(??_f_write+11)& (0+255),b
  9554  000A56  50DE               	movf	postinc2,w,c
  9555  000A58  5DD4               	subwf	(??_f_write+8)& (0+255),w,b
  9556  000A5A  50DE               	movf	postinc2,w,c
  9557  000A5C  59D5               	subwfb	(??_f_write+9)& (0+255),w,b
  9558  000A5E  50DE               	movf	postinc2,w,c
  9559  000A60  59D6               	subwfb	(??_f_write+10)& (0+255),w,b
  9560  000A62  50DE               	movf	postinc2,w,c
  9561  000A64  59D7               	subwfb	(??_f_write+11)& (0+255),w,b
  9562  000A66  A0D8               	btfss	status,0,c
  9563  000A68  0012               	return	
  9564  000A6A  D23B               	goto	l1334
  9565  000A6C                     
  9566                           ; BSR set to: 0
  9567                           ;tff.c: 1014: if ((fp->fptr % 512U) == 0) {
  9568                           
  9569                           ; BSR set to: 0
  9570  000A6C  EE20 F006          	lfsr	2,6
  9571  000A70  51C4               	movf	f_write@fp& (0+255),w,b
  9572  000A72  26D9               	addwf	fsr2l,f,c
  9573  000A74  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9574  000A76  22DA               	addwfc	fsr2h,f,c
  9575  000A78  0EFF               	movlw	255
  9576  000A7A  14DE               	andwf	postinc2,w,c
  9577  000A7C  6FCC               	movwf	??_f_write& (0+255),b
  9578  000A7E  0E01               	movlw	1
  9579  000A80  14DE               	andwf	postinc2,w,c
  9580  000A82  6FCD               	movwf	(??_f_write+1)& (0+255),b
  9581  000A84  0E00               	movlw	0
  9582  000A86  14DE               	andwf	postinc2,w,c
  9583  000A88  6FCE               	movwf	(??_f_write+2)& (0+255),b
  9584  000A8A  0E00               	movlw	0
  9585  000A8C  14DE               	andwf	postinc2,w,c
  9586  000A8E  6FCF               	movwf	(??_f_write+3)& (0+255),b
  9587  000A90  51CC               	movf	??_f_write& (0+255),w,b
  9588  000A92  11CD               	iorwf	(??_f_write+1)& (0+255),w,b
  9589  000A94  11CE               	iorwf	(??_f_write+2)& (0+255),w,b
  9590  000A96  11CF               	iorwf	(??_f_write+3)& (0+255),w,b
  9591  000A98  A4D8               	btfss	status,2,c
  9592  000A9A  D166               	goto	l1336
  9593                           
  9594                           ; BSR set to: 0
  9595                           ;tff.c: 1015: if (fp->csect >= fp->fs->csize) {
  9596  000A9C  EE20 F004          	lfsr	2,4
  9597  000AA0  51C4               	movf	f_write@fp& (0+255),w,b
  9598  000AA2  26D9               	addwf	fsr2l,f,c
  9599  000AA4  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9600  000AA6  22DA               	addwfc	fsr2h,f,c
  9601  000AA8  EE10 F01D          	lfsr	1,29
  9602  000AAC  50DE               	movf	postinc2,w,c
  9603  000AAE  26E1               	addwf	fsr1l,f,c
  9604  000AB0  50DD               	movf	postdec2,w,c
  9605  000AB2  22E2               	addwfc	fsr1h,f,c
  9606  000AB4  EE20 F003          	lfsr	2,3
  9607  000AB8  51C4               	movf	f_write@fp& (0+255),w,b
  9608  000ABA  26D9               	addwf	fsr2l,f,c
  9609  000ABC  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9610  000ABE  22DA               	addwfc	fsr2h,f,c
  9611  000AC0  50E6               	movf	postinc1,w,c
  9612  000AC2  5CDE               	subwf	postinc2,w,c
  9613  000AC4  A0D8               	btfss	status,0,c
  9614  000AC6  D06D               	goto	l1337
  9615                           
  9616                           ; BSR set to: 0
  9617                           ;tff.c: 1016: if (fp->fptr == 0) {
  9618  000AC8  EE20 F006          	lfsr	2,6
  9619  000ACC  51C4               	movf	f_write@fp& (0+255),w,b
  9620  000ACE  26D9               	addwf	fsr2l,f,c
  9621  000AD0  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9622  000AD2  22DA               	addwfc	fsr2h,f,c
  9623  000AD4  50DE               	movf	postinc2,w,c
  9624  000AD6  10DE               	iorwf	postinc2,w,c
  9625  000AD8  10DE               	iorwf	postinc2,w,c
  9626  000ADA  10DE               	iorwf	postinc2,w,c
  9627  000ADC  A4D8               	btfss	status,2,c
  9628  000ADE  D024               	goto	l1338
  9629                           
  9630                           ; BSR set to: 0
  9631                           ;tff.c: 1017: clust = fp->org_clust;
  9632  000AE0  EE20 F00E          	lfsr	2,14
  9633  000AE4  51C4               	movf	f_write@fp& (0+255),w,b
  9634  000AE6  26D9               	addwf	fsr2l,f,c
  9635  000AE8  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9636  000AEA  22DA               	addwfc	fsr2h,f,c
  9637  000AEC  CFDE F0E1          	movff	postinc2,f_write@clust
  9638  000AF0  CFDD F0E2          	movff	postdec2,f_write@clust+1
  9639                           
  9640                           ; BSR set to: 0
  9641                           ;tff.c: 1018: if (clust == 0)
  9642  000AF4  51E1               	movf	f_write@clust& (0+255),w,b
  9643  000AF6  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  9644  000AF8  A4D8               	btfss	status,2,c
  9645  000AFA  D026               	goto	l1340
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;tff.c: 1019: fp->org_clust = clust = create_chain(0);
  9649  000AFC  0E00               	movlw	0
  9650  000AFE  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
  9651  000B00  0E00               	movlw	0
  9652  000B02  6FB6               	movwf	create_chain@clust& (0+255),b
  9653  000B04  EC58  F01A         	call	_create_chain	;wreg free
  9654  000B08  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  9655  000B0C  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  9656  000B10  0100               	movlb	0	; () banked
  9657  000B12  EE20 F00E          	lfsr	2,14
  9658  000B16  51C4               	movf	f_write@fp& (0+255),w,b
  9659  000B18  26D9               	addwf	fsr2l,f,c
  9660  000B1A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9661  000B1C  22DA               	addwfc	fsr2h,f,c
  9662  000B1E  C0E1  FFDE         	movff	f_write@clust,postinc2
  9663  000B22  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  9664                           
  9665                           ; BSR set to: 0
  9666                           ;tff.c: 1020: } else {
  9667  000B26  D010               	goto	l1340
  9668  000B28                     l1338:
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;tff.c: 1021: clust = create_chain(fp->curr_clust);
  9672                           
  9673                           ; BSR set to: 0
  9674  000B28  EE20 F010          	lfsr	2,16
  9675  000B2C  51C4               	movf	f_write@fp& (0+255),w,b
  9676  000B2E  26D9               	addwf	fsr2l,f,c
  9677  000B30  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9678  000B32  22DA               	addwfc	fsr2h,f,c
  9679  000B34  CFDE F0B6          	movff	postinc2,create_chain@clust
  9680  000B38  CFDD F0B7          	movff	postdec2,create_chain@clust+1
  9681  000B3C  EC58  F01A         	call	_create_chain	;wreg free
  9682  000B40  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  9683  000B44  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  9684  000B48                     l1340:
  9685                           
  9686                           ;tff.c: 1022: }
  9687                           ;tff.c: 1023: if (clust == 0) break;
  9688  000B48  0100               	movlb	0	; () banked
  9689  000B4A  51E1               	movf	f_write@clust& (0+255),w,b
  9690  000B4C  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  9691  000B4E  B4D8               	btfsc	status,2,c
  9692  000B50  D1CC               	goto	u13740
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;tff.c: 1024: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
  9696                           
  9697                           ; BSR set to: 0
  9698                           
  9699                           ; BSR set to: 0
  9700  000B52  05E1               	decf	f_write@clust& (0+255),w,b
  9701  000B54  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  9702  000B56  B4D8               	btfsc	status,2,c
  9703  000B58  D1FB               	goto	l1346
  9704                           
  9705                           ; BSR set to: 0
  9706  000B5A  EE20 F004          	lfsr	2,4
  9707  000B5E  51C4               	movf	f_write@fp& (0+255),w,b
  9708  000B60  26D9               	addwf	fsr2l,f,c
  9709  000B62  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9710  000B64  22DA               	addwfc	fsr2h,f,c
  9711  000B66  EE10 F016          	lfsr	1,22
  9712  000B6A  50DE               	movf	postinc2,w,c
  9713  000B6C  26E1               	addwf	fsr1l,f,c
  9714  000B6E  50DD               	movf	postdec2,w,c
  9715  000B70  22E2               	addwfc	fsr1h,f,c
  9716  000B72  50E6               	movf	postinc1,w,c
  9717  000B74  5DE1               	subwf	f_write@clust& (0+255),w,b
  9718  000B76  50E6               	movf	postinc1,w,c
  9719  000B78  59E2               	subwfb	(f_write@clust+1)& (0+255),w,b
  9720  000B7A  B0D8               	btfsc	status,0,c
  9721  000B7C  D1E9               	goto	l1346
  9722                           
  9723                           ; BSR set to: 0
  9724                           ;tff.c: 1025: fp->curr_clust = clust;
  9725                           
  9726                           ; BSR set to: 0
  9727                           
  9728                           ; BSR set to: 0
  9729  000B7E  EE20 F010          	lfsr	2,16
  9730  000B82  51C4               	movf	f_write@fp& (0+255),w,b
  9731  000B84  26D9               	addwf	fsr2l,f,c
  9732  000B86  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9733  000B88  22DA               	addwfc	fsr2h,f,c
  9734  000B8A  C0E1  FFDE         	movff	f_write@clust,postinc2
  9735  000B8E  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  9736                           
  9737                           ;tff.c: 1026: fp->csect = 0;
  9738  000B92  EE20 F003          	lfsr	2,3
  9739  000B96  51C4               	movf	f_write@fp& (0+255),w,b
  9740  000B98  26D9               	addwf	fsr2l,f,c
  9741  000B9A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9742  000B9C  22DA               	addwfc	fsr2h,f,c
  9743  000B9E  0E00               	movlw	0
  9744  000BA0  6EDF               	movwf	indf2,c
  9745  000BA2                     l1337:
  9746                           
  9747                           ; BSR set to: 0
  9748                           ;tff.c: 1027: }
  9749                           ;tff.c: 1028: sect = clust2sect(fp->curr_clust) + fp->csect;
  9750                           
  9751                           ; BSR set to: 0
  9752  000BA2  EE20 F010          	lfsr	2,16
  9753  000BA6  51C4               	movf	f_write@fp& (0+255),w,b
  9754  000BA8  26D9               	addwf	fsr2l,f,c
  9755  000BAA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9756  000BAC  22DA               	addwfc	fsr2h,f,c
  9757  000BAE  CFDE F06C          	movff	postinc2,clust2sect@clust
  9758  000BB2  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  9759  000BB6  EC46  F022         	call	_clust2sect	;wreg free
  9760  000BBA  0100               	movlb	0	; () banked
  9761  000BBC  EE20 F003          	lfsr	2,3
  9762  000BC0  51C4               	movf	f_write@fp& (0+255),w,b
  9763  000BC2  26D9               	addwf	fsr2l,f,c
  9764  000BC4  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9765  000BC6  22DA               	addwfc	fsr2h,f,c
  9766  000BC8  50DF               	movf	indf2,w,c
  9767  000BCA  6FCC               	movwf	??_f_write& (0+255),b
  9768  000BCC  51CC               	movf	??_f_write& (0+255),w,b
  9769  000BCE  256C               	addwf	?_clust2sect& (0+255),w,b
  9770  000BD0  6FDB               	movwf	f_write@sect& (0+255),b
  9771  000BD2  0E00               	movlw	0
  9772  000BD4  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  9773  000BD6  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  9774  000BD8  0E00               	movlw	0
  9775  000BDA  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  9776  000BDC  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  9777  000BDE  0E00               	movlw	0
  9778  000BE0  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  9779  000BE2  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  9780                           
  9781                           ; BSR set to: 0
  9782                           ;tff.c: 1029: cc = btw / 512U;
  9783  000BE4  C0C8  F0CC         	movff	f_write@btw,??_f_write
  9784  000BE8  C0C9  F0CD         	movff	f_write@btw+1,??_f_write+1
  9785  000BEC  0E09               	movlw	9
  9786  000BEE  6FCE               	movwf	(??_f_write+2)& (0+255),b
  9787  000BF0                     u13655:
  9788  000BF0  90D8               	bcf	status,0,c
  9789  000BF2  33CD               	rrcf	(??_f_write+1)& (0+255),f,b
  9790  000BF4  33CC               	rrcf	??_f_write& (0+255),f,b
  9791  000BF6  2FCE               	decfsz	(??_f_write+2)& (0+255),f,b
  9792  000BF8  D7FB               	goto	u13655
  9793  000BFA  C0CC  F0DF         	movff	??_f_write,f_write@cc
  9794  000BFE  C0CD  F0E0         	movff	??_f_write+1,f_write@cc+1
  9795                           
  9796                           ; BSR set to: 0
  9797                           ;tff.c: 1030: if (cc) {
  9798  000C02  51DF               	movf	f_write@cc& (0+255),w,b
  9799  000C04  11E0               	iorwf	(f_write@cc+1)& (0+255),w,b
  9800  000C06  B4D8               	btfsc	status,2,c
  9801  000C08  D070               	goto	l1347
  9802                           
  9803                           ; BSR set to: 0
  9804                           ;tff.c: 1031: if (fp->csect + cc > fp->fs->csize)
  9805  000C0A  EE20 F003          	lfsr	2,3
  9806  000C0E  51C4               	movf	f_write@fp& (0+255),w,b
  9807  000C10  26D9               	addwf	fsr2l,f,c
  9808  000C12  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9809  000C14  22DA               	addwfc	fsr2h,f,c
  9810  000C16  50DF               	movf	indf2,w,c
  9811  000C18  6FCC               	movwf	??_f_write& (0+255),b
  9812  000C1A  51CC               	movf	??_f_write& (0+255),w,b
  9813  000C1C  25DF               	addwf	f_write@cc& (0+255),w,b
  9814  000C1E  6FCD               	movwf	(??_f_write+1)& (0+255),b
  9815  000C20  0E00               	movlw	0
  9816  000C22  21E0               	addwfc	(f_write@cc+1)& (0+255),w,b
  9817  000C24  6FCE               	movwf	(??_f_write+2)& (0+255),b
  9818  000C26  EE20 F004          	lfsr	2,4
  9819  000C2A  51C4               	movf	f_write@fp& (0+255),w,b
  9820  000C2C  26D9               	addwf	fsr2l,f,c
  9821  000C2E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9822  000C30  22DA               	addwfc	fsr2h,f,c
  9823  000C32  EE10 F01D          	lfsr	1,29
  9824  000C36  50DE               	movf	postinc2,w,c
  9825  000C38  26E1               	addwf	fsr1l,f,c
  9826  000C3A  50DD               	movf	postdec2,w,c
  9827  000C3C  22E2               	addwfc	fsr1h,f,c
  9828  000C3E  50E7               	movf	indf1,w,c
  9829  000C40  6FCF               	movwf	(??_f_write+3)& (0+255),b
  9830  000C42  6BD0               	clrf	(??_f_write+4)& (0+255),b
  9831  000C44  51CD               	movf	(??_f_write+1)& (0+255),w,b
  9832  000C46  5DCF               	subwf	(??_f_write+3)& (0+255),w,b
  9833  000C48  51CE               	movf	(??_f_write+2)& (0+255),w,b
  9834  000C4A  59D0               	subwfb	(??_f_write+4)& (0+255),w,b
  9835  000C4C  B0D8               	btfsc	status,0,c
  9836  000C4E  D021               	goto	l1348
  9837                           
  9838                           ; BSR set to: 0
  9839                           ;tff.c: 1032: cc = fp->fs->csize - fp->csect;
  9840  000C50  EE20 F003          	lfsr	2,3
  9841  000C54  51C4               	movf	f_write@fp& (0+255),w,b
  9842  000C56  26D9               	addwf	fsr2l,f,c
  9843  000C58  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9844  000C5A  22DA               	addwfc	fsr2h,f,c
  9845  000C5C  50DF               	movf	indf2,w,c
  9846  000C5E  6FCC               	movwf	??_f_write& (0+255),b
  9847  000C60  6BCD               	clrf	(??_f_write+1)& (0+255),b
  9848  000C62  1FCC               	comf	??_f_write& (0+255),f,b
  9849  000C64  1FCD               	comf	(??_f_write+1)& (0+255),f,b
  9850  000C66  4BCC               	infsnz	??_f_write& (0+255),f,b
  9851  000C68  2BCD               	incf	(??_f_write+1)& (0+255),f,b
  9852  000C6A  EE20 F004          	lfsr	2,4
  9853  000C6E  51C4               	movf	f_write@fp& (0+255),w,b
  9854  000C70  26D9               	addwf	fsr2l,f,c
  9855  000C72  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9856  000C74  22DA               	addwfc	fsr2h,f,c
  9857  000C76  EE10 F01D          	lfsr	1,29
  9858  000C7A  50DE               	movf	postinc2,w,c
  9859  000C7C  26E1               	addwf	fsr1l,f,c
  9860  000C7E  50DD               	movf	postdec2,w,c
  9861  000C80  22E2               	addwfc	fsr1h,f,c
  9862  000C82  50E7               	movf	indf1,w,c
  9863  000C84  6FCE               	movwf	(??_f_write+2)& (0+255),b
  9864  000C86  51CE               	movf	(??_f_write+2)& (0+255),w,b
  9865  000C88  25CC               	addwf	??_f_write& (0+255),w,b
  9866  000C8A  6FDF               	movwf	f_write@cc& (0+255),b
  9867  000C8C  0E00               	movlw	0
  9868  000C8E  21CD               	addwfc	(??_f_write+1)& (0+255),w,b
  9869  000C90  6FE0               	movwf	(f_write@cc+1)& (0+255),b
  9870  000C92                     l1348:
  9871                           
  9872                           ; BSR set to: 0
  9873                           ;tff.c: 1033: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
  9874                           
  9875                           ; BSR set to: 0
  9876  000C92  C0D9  F07F         	movff	f_write@wbuff,disk_write@buff
  9877  000C96  C0DA  F080         	movff	f_write@wbuff+1,disk_write@buff+1
  9878  000C9A  C0DB  F081         	movff	f_write@sect,disk_write@sector
  9879  000C9E  C0DC  F082         	movff	f_write@sect+1,disk_write@sector+1
  9880  000CA2  C0DD  F083         	movff	f_write@sect+2,disk_write@sector+2
  9881  000CA6  C0DE  F084         	movff	f_write@sect+3,disk_write@sector+3
  9882  000CAA  C0DF  F085         	movff	f_write@cc,disk_write@count
  9883  000CAE  0E00               	movlw	0
  9884  000CB0  ECF4  F025         	call	_disk_write
  9885  000CB4  0900               	iorlw	0
  9886  000CB6  A4D8               	btfss	status,2,c
  9887  000CB8  D14B               	goto	l1346
  9888                           
  9889                           ;tff.c: 1035: fp->csect += (BYTE)cc;
  9890                           
  9891                           ;tff.c: 1034: goto fw_error;
  9892  000CBA  0100               	movlb	0	; () banked
  9893  000CBC  EE20 F003          	lfsr	2,3
  9894  000CC0  51C4               	movf	f_write@fp& (0+255),w,b
  9895  000CC2  26D9               	addwf	fsr2l,f,c
  9896  000CC4  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9897  000CC6  22DA               	addwfc	fsr2h,f,c
  9898  000CC8  51DF               	movf	f_write@cc& (0+255),w,b
  9899  000CCA  26DF               	addwf	indf2,f,c
  9900                           
  9901                           ; BSR set to: 0
  9902                           ;tff.c: 1036: wcnt = 512U * cc;
  9903  000CCC  C0DF  F0CC         	movff	f_write@cc,??_f_write
  9904  000CD0  C0E0  F0CD         	movff	f_write@cc+1,??_f_write+1
  9905  000CD4  0E09               	movlw	9
  9906  000CD6                     u13695:
  9907  000CD6  90D8               	bcf	status,0,c
  9908  000CD8  37CC               	rlcf	??_f_write& (0+255),f,b
  9909  000CDA  37CD               	rlcf	(??_f_write+1)& (0+255),f,b
  9910  000CDC  2EE8               	decfsz	wreg,f,c
  9911  000CDE  D7FB               	goto	u13695
  9912  000CE0  C0CC  F0E3         	movff	??_f_write,f_write@wcnt
  9913  000CE4  C0CD  F0E4         	movff	??_f_write+1,f_write@wcnt+1
  9914                           
  9915                           ;tff.c: 1037: continue;
  9916  000CE8  D0DF               	goto	l1350
  9917  000CEA                     l1347:
  9918                           
  9919                           ; BSR set to: 0
  9920                           ;tff.c: 1038: }
  9921                           ;tff.c: 1039: if (fp->fptr >= fp->fsize) {
  9922                           
  9923                           ; BSR set to: 0
  9924  000CEA  EE20 F00A          	lfsr	2,10
  9925  000CEE  51C4               	movf	f_write@fp& (0+255),w,b
  9926  000CF0  26D9               	addwf	fsr2l,f,c
  9927  000CF2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9928  000CF4  22DA               	addwfc	fsr2h,f,c
  9929  000CF6  EE10 F006          	lfsr	1,6
  9930  000CFA  51C4               	movf	f_write@fp& (0+255),w,b
  9931  000CFC  26E1               	addwf	fsr1l,f,c
  9932  000CFE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9933  000D00  22E2               	addwfc	fsr1h,f,c
  9934  000D02  50DE               	movf	postinc2,w,c
  9935  000D04  5CE6               	subwf	postinc1,w,c
  9936  000D06  50DE               	movf	postinc2,w,c
  9937  000D08  58E6               	subwfb	postinc1,w,c
  9938  000D0A  50DE               	movf	postinc2,w,c
  9939  000D0C  58E6               	subwfb	postinc1,w,c
  9940  000D0E  50DE               	movf	postinc2,w,c
  9941  000D10  58E6               	subwfb	postinc1,w,c
  9942  000D12  A0D8               	btfss	status,0,c
  9943  000D14  D022               	goto	l1351
  9944                           
  9945                           ; BSR set to: 0
  9946                           ;tff.c: 1040: if (!move_window(0)) goto fw_error;
  9947  000D16  0E00               	movlw	0
  9948  000D18  6F8B               	movwf	move_window@sector& (0+255),b
  9949  000D1A  0E00               	movlw	0
  9950  000D1C  6F8C               	movwf	(move_window@sector+1)& (0+255),b
  9951  000D1E  0E00               	movlw	0
  9952  000D20  6F8D               	movwf	(move_window@sector+2)& (0+255),b
  9953  000D22  0E00               	movlw	0
  9954  000D24  6F8E               	movwf	(move_window@sector+3)& (0+255),b
  9955  000D26  EC38  F01B         	call	_move_window	;wreg free
  9956  000D2A  0900               	iorlw	0
  9957  000D2C  B4D8               	btfsc	status,2,c
  9958  000D2E  D110               	goto	l1346
  9959                           
  9960                           ;tff.c: 1041: fp->fs->winsect = sect;
  9961  000D30  0100               	movlb	0	; () banked
  9962  000D32  EE20 F004          	lfsr	2,4
  9963  000D36  51C4               	movf	f_write@fp& (0+255),w,b
  9964  000D38  26D9               	addwf	fsr2l,f,c
  9965  000D3A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9966  000D3C  22DA               	addwfc	fsr2h,f,c
  9967  000D3E  EE10 F004          	lfsr	1,4
  9968  000D42  50DE               	movf	postinc2,w,c
  9969  000D44  26E1               	addwf	fsr1l,f,c
  9970  000D46  50DD               	movf	postdec2,w,c
  9971  000D48  22E2               	addwfc	fsr1h,f,c
  9972  000D4A  C0DB  FFE6         	movff	f_write@sect,postinc1
  9973  000D4E  C0DC  FFE6         	movff	f_write@sect+1,postinc1
  9974  000D52  C0DD  FFE6         	movff	f_write@sect+2,postinc1
  9975  000D56  C0DE  FFE6         	movff	f_write@sect+3,postinc1
  9976  000D5A                     l1351:
  9977                           
  9978                           ; BSR set to: 0
  9979                           ;tff.c: 1042: }
  9980                           ;tff.c: 1043: fp->csect++;
  9981                           
  9982                           ; BSR set to: 0
  9983  000D5A  EE20 F003          	lfsr	2,3
  9984  000D5E  51C4               	movf	f_write@fp& (0+255),w,b
  9985  000D60  26D9               	addwf	fsr2l,f,c
  9986  000D62  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9987  000D64  22DA               	addwfc	fsr2h,f,c
  9988  000D66  2ADF               	incf	indf2,f,c
  9989  000D68                     l1336:
  9990                           
  9991                           ; BSR set to: 0
  9992                           ;tff.c: 1044: }
  9993                           ;tff.c: 1045: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  9994                           
  9995                           ; BSR set to: 0
  9996  000D68  EE20 F010          	lfsr	2,16
  9997  000D6C  51C4               	movf	f_write@fp& (0+255),w,b
  9998  000D6E  26D9               	addwf	fsr2l,f,c
  9999  000D70  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10000  000D72  22DA               	addwfc	fsr2h,f,c
 10001  000D74  CFDE F06C          	movff	postinc2,clust2sect@clust
 10002  000D78  CFDD F06D          	movff	postdec2,clust2sect@clust+1
 10003  000D7C  EC46  F022         	call	_clust2sect	;wreg free
 10004  000D80  0100               	movlb	0	; () banked
 10005  000D82  EE20 F003          	lfsr	2,3
 10006  000D86  51C4               	movf	f_write@fp& (0+255),w,b
 10007  000D88  26D9               	addwf	fsr2l,f,c
 10008  000D8A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10009  000D8C  22DA               	addwfc	fsr2h,f,c
 10010  000D8E  50DF               	movf	indf2,w,c
 10011  000D90  6FCC               	movwf	??_f_write& (0+255),b
 10012  000D92  51CC               	movf	??_f_write& (0+255),w,b
 10013  000D94  256C               	addwf	?_clust2sect& (0+255),w,b
 10014  000D96  6FCD               	movwf	(??_f_write+1)& (0+255),b
 10015  000D98  0E00               	movlw	0
 10016  000D9A  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
 10017  000D9C  6FCE               	movwf	(??_f_write+2)& (0+255),b
 10018  000D9E  0E00               	movlw	0
 10019  000DA0  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
 10020  000DA2  6FCF               	movwf	(??_f_write+3)& (0+255),b
 10021  000DA4  0E00               	movlw	0
 10022  000DA6  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
 10023  000DA8  6FD0               	movwf	(??_f_write+4)& (0+255),b
 10024  000DAA  0EFF               	movlw	255
 10025  000DAC  25CD               	addwf	(??_f_write+1)& (0+255),w,b
 10026  000DAE  6FDB               	movwf	f_write@sect& (0+255),b
 10027  000DB0  0EFF               	movlw	255
 10028  000DB2  21CE               	addwfc	(??_f_write+2)& (0+255),w,b
 10029  000DB4  6FDC               	movwf	(f_write@sect+1)& (0+255),b
 10030  000DB6  0EFF               	movlw	255
 10031  000DB8  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
 10032  000DBA  6FDD               	movwf	(f_write@sect+2)& (0+255),b
 10033  000DBC  0EFF               	movlw	255
 10034  000DBE  21D0               	addwfc	(??_f_write+4)& (0+255),w,b
 10035  000DC0  6FDE               	movwf	(f_write@sect+3)& (0+255),b
 10036                           
 10037                           ; BSR set to: 0
 10038                           ;tff.c: 1046: if (!move_window(sect)) goto fw_error;
 10039  000DC2  C0DB  F08B         	movff	f_write@sect,move_window@sector
 10040  000DC6  C0DC  F08C         	movff	f_write@sect+1,move_window@sector+1
 10041  000DCA  C0DD  F08D         	movff	f_write@sect+2,move_window@sector+2
 10042  000DCE  C0DE  F08E         	movff	f_write@sect+3,move_window@sector+3
 10043  000DD2  EC38  F01B         	call	_move_window	;wreg free
 10044  000DD6  0900               	iorlw	0
 10045  000DD8  B4D8               	btfsc	status,2,c
 10046  000DDA  D0BA               	goto	l1346
 10047                           
 10048                           ;tff.c: 1047: wcnt = 512U - (fp->fptr % 512U);
 10049  000DDC  0EFF               	movlw	255
 10050  000DDE  0100               	movlb	0	; () banked
 10051  000DE0  6FCC               	movwf	??_f_write& (0+255),b
 10052  000DE2  0E01               	movlw	1
 10053  000DE4  6FCD               	movwf	(??_f_write+1)& (0+255),b
 10054  000DE6  EE20 F006          	lfsr	2,6
 10055  000DEA  51C4               	movf	f_write@fp& (0+255),w,b
 10056  000DEC  26D9               	addwf	fsr2l,f,c
 10057  000DEE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10058  000DF0  22DA               	addwfc	fsr2h,f,c
 10059  000DF2  CFDE F0CE          	movff	postinc2,??_f_write+2
 10060  000DF6  CFDD F0CF          	movff	postdec2,??_f_write+3
 10061  000DFA  51CC               	movf	??_f_write& (0+255),w,b
 10062  000DFC  17CE               	andwf	(??_f_write+2)& (0+255),f,b
 10063  000DFE  51CD               	movf	(??_f_write+1)& (0+255),w,b
 10064  000E00  17CF               	andwf	(??_f_write+3)& (0+255),f,b
 10065  000E02  1FCE               	comf	(??_f_write+2)& (0+255),f,b
 10066  000E04  1FCF               	comf	(??_f_write+3)& (0+255),f,b
 10067  000E06  4BCE               	infsnz	(??_f_write+2)& (0+255),f,b
 10068  000E08  2BCF               	incf	(??_f_write+3)& (0+255),f,b
 10069  000E0A  0E00               	movlw	0
 10070  000E0C  25CE               	addwf	(??_f_write+2)& (0+255),w,b
 10071  000E0E  6FE3               	movwf	f_write@wcnt& (0+255),b
 10072  000E10  0E02               	movlw	2
 10073  000E12  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
 10074  000E14  6FE4               	movwf	(f_write@wcnt+1)& (0+255),b
 10075                           
 10076                           ; BSR set to: 0
 10077                           ;tff.c: 1048: if (wcnt > btw) wcnt = btw;
 10078  000E16  51E3               	movf	f_write@wcnt& (0+255),w,b
 10079  000E18  5DC8               	subwf	f_write@btw& (0+255),w,b
 10080  000E1A  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 10081  000E1C  59C9               	subwfb	(f_write@btw+1)& (0+255),w,b
 10082  000E1E  B0D8               	btfsc	status,0,c
 10083  000E20  D004               	goto	l1354
 10084                           
 10085                           ; BSR set to: 0
 10086  000E22  C0C8  F0E3         	movff	f_write@btw,f_write@wcnt
 10087  000E26  C0C9  F0E4         	movff	f_write@btw+1,f_write@wcnt+1
 10088  000E2A                     l1354:
 10089                           
 10090                           ; BSR set to: 0
 10091                           ;tff.c: 1049: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
 10092                           
 10093                           ; BSR set to: 0
 10094  000E2A  0EFF               	movlw	255
 10095  000E2C  6FCC               	movwf	??_f_write& (0+255),b
 10096  000E2E  0E01               	movlw	1
 10097  000E30  6FCD               	movwf	(??_f_write+1)& (0+255),b
 10098  000E32  EE20 F006          	lfsr	2,6
 10099  000E36  51C4               	movf	f_write@fp& (0+255),w,b
 10100  000E38  26D9               	addwf	fsr2l,f,c
 10101  000E3A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10102  000E3C  22DA               	addwfc	fsr2h,f,c
 10103  000E3E  CFDE F0CE          	movff	postinc2,??_f_write+2
 10104  000E42  CFDD F0CF          	movff	postdec2,??_f_write+3
 10105  000E46  51CC               	movf	??_f_write& (0+255),w,b
 10106  000E48  17CE               	andwf	(??_f_write+2)& (0+255),f,b
 10107  000E4A  51CD               	movf	(??_f_write+1)& (0+255),w,b
 10108  000E4C  17CF               	andwf	(??_f_write+3)& (0+255),f,b
 10109  000E4E  0E20               	movlw	32
 10110  000E50  27CE               	addwf	(??_f_write+2)& (0+255),f,b
 10111  000E52  0E00               	movlw	0
 10112  000E54  23CF               	addwfc	(??_f_write+3)& (0+255),f,b
 10113  000E56  EE20 F004          	lfsr	2,4
 10114  000E5A  51C4               	movf	f_write@fp& (0+255),w,b
 10115  000E5C  26D9               	addwf	fsr2l,f,c
 10116  000E5E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10117  000E60  22DA               	addwfc	fsr2h,f,c
 10118  000E62  CFDE F0D0          	movff	postinc2,??_f_write+4
 10119  000E66  CFDD F0D1          	movff	postdec2,??_f_write+5
 10120  000E6A  51CE               	movf	(??_f_write+2)& (0+255),w,b
 10121  000E6C  25D0               	addwf	(??_f_write+4)& (0+255),w,b
 10122  000E6E  6F60               	movwf	memcpy@d1& (0+255),b
 10123  000E70  51CF               	movf	(??_f_write+3)& (0+255),w,b
 10124  000E72  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
 10125  000E74  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 10126  000E76  C0D9  F062         	movff	f_write@wbuff,memcpy@s1
 10127  000E7A  C0DA  F063         	movff	f_write@wbuff+1,memcpy@s1+1
 10128  000E7E  C0E3  F064         	movff	f_write@wcnt,memcpy@n
 10129  000E82  C0E4  F065         	movff	f_write@wcnt+1,memcpy@n+1
 10130  000E86  EC99  F029         	call	_memcpy	;wreg free
 10131                           
 10132                           ;tff.c: 1050: fp->fs->winflag = 1;
 10133  000E8A  0100               	movlb	0	; () banked
 10134  000E8C  EE20 F004          	lfsr	2,4
 10135  000E90  51C4               	movf	f_write@fp& (0+255),w,b
 10136  000E92  26D9               	addwf	fsr2l,f,c
 10137  000E94  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10138  000E96  22DA               	addwfc	fsr2h,f,c
 10139  000E98  EE10 F01F          	lfsr	1,31
 10140  000E9C  50DE               	movf	postinc2,w,c
 10141  000E9E  26E1               	addwf	fsr1l,f,c
 10142  000EA0  50DD               	movf	postdec2,w,c
 10143  000EA2  22E2               	addwfc	fsr1h,f,c
 10144  000EA4  0E01               	movlw	1
 10145  000EA6  6EE7               	movwf	indf1,c
 10146  000EA8                     l1350:
 10147                           
 10148                           ; BSR set to: 0
 10149                           
 10150                           ; BSR set to: 0
 10151  000EA8  51E3               	movf	f_write@wcnt& (0+255),w,b
 10152  000EAA  27D9               	addwf	f_write@wbuff& (0+255),f,b
 10153  000EAC  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 10154  000EAE  23DA               	addwfc	(f_write@wbuff+1)& (0+255),f,b
 10155                           
 10156                           ; BSR set to: 0
 10157  000EB0  EE20 F006          	lfsr	2,6
 10158  000EB4  51C4               	movf	f_write@fp& (0+255),w,b
 10159  000EB6  26D9               	addwf	fsr2l,f,c
 10160  000EB8  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10161  000EBA  22DA               	addwfc	fsr2h,f,c
 10162  000EBC  51E3               	movf	f_write@wcnt& (0+255),w,b
 10163  000EBE  26DE               	addwf	postinc2,f,c
 10164  000EC0  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 10165  000EC2  22DE               	addwfc	postinc2,f,c
 10166  000EC4  0E00               	movlw	0
 10167  000EC6  22DE               	addwfc	postinc2,f,c
 10168  000EC8  22DE               	addwfc	postinc2,f,c
 10169                           
 10170                           ; BSR set to: 0
 10171  000ECA  C0CA  FFD9         	movff	f_write@bw,fsr2l
 10172  000ECE  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
 10173  000ED2  51E3               	movf	f_write@wcnt& (0+255),w,b
 10174  000ED4  26DE               	addwf	postinc2,f,c
 10175  000ED6  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 10176  000ED8  22DD               	addwfc	postdec2,f,c
 10177                           
 10178                           ; BSR set to: 0
 10179  000EDA  51E3               	movf	f_write@wcnt& (0+255),w,b
 10180  000EDC  5FC8               	subwf	f_write@btw& (0+255),f,b
 10181  000EDE  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 10182  000EE0  5BC9               	subwfb	(f_write@btw+1)& (0+255),f,b
 10183  000EE2                     l1334:
 10184                           
 10185                           ; BSR set to: 0
 10186                           
 10187                           ; BSR set to: 0
 10188  000EE2  51C8               	movf	f_write@btw& (0+255),w,b
 10189  000EE4  11C9               	iorwf	(f_write@btw+1)& (0+255),w,b
 10190  000EE6  A4D8               	btfss	status,2,c
 10191  000EE8  D5C1               	goto	l1335
 10192  000EEA                     u13740:
 10193                           
 10194                           ; BSR set to: 0
 10195                           ;tff.c: 1051: }
 10196                           ;tff.c: 1053: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
 10197                           
 10198                           ; BSR set to: 0
 10199  000EEA  EE20 F006          	lfsr	2,6
 10200  000EEE  51C4               	movf	f_write@fp& (0+255),w,b
 10201  000EF0  26D9               	addwf	fsr2l,f,c
 10202  000EF2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10203  000EF4  22DA               	addwfc	fsr2h,f,c
 10204  000EF6  EE10 F00A          	lfsr	1,10
 10205  000EFA  51C4               	movf	f_write@fp& (0+255),w,b
 10206  000EFC  26E1               	addwf	fsr1l,f,c
 10207  000EFE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10208  000F00  22E2               	addwfc	fsr1h,f,c
 10209  000F02  50DE               	movf	postinc2,w,c
 10210  000F04  5CE6               	subwf	postinc1,w,c
 10211  000F06  50DE               	movf	postinc2,w,c
 10212  000F08  58E6               	subwfb	postinc1,w,c
 10213  000F0A  50DE               	movf	postinc2,w,c
 10214  000F0C  58E6               	subwfb	postinc1,w,c
 10215  000F0E  50DE               	movf	postinc2,w,c
 10216  000F10  58E6               	subwfb	postinc1,w,c
 10217  000F12  B0D8               	btfsc	status,0,c
 10218  000F14  D014               	goto	l1355
 10219                           
 10220                           ; BSR set to: 0
 10221  000F16  EE20 F006          	lfsr	2,6
 10222  000F1A  51C4               	movf	f_write@fp& (0+255),w,b
 10223  000F1C  26D9               	addwf	fsr2l,f,c
 10224  000F1E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10225  000F20  22DA               	addwfc	fsr2h,f,c
 10226  000F22  EE10 F00A          	lfsr	1,10
 10227  000F26  51C4               	movf	f_write@fp& (0+255),w,b
 10228  000F28  26E1               	addwf	fsr1l,f,c
 10229  000F2A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10230  000F2C  22E2               	addwfc	fsr1h,f,c
 10231  000F2E  CFDE FFE6          	movff	postinc2,postinc1
 10232  000F32  CFDE FFE6          	movff	postinc2,postinc1
 10233  000F36  CFDE FFE6          	movff	postinc2,postinc1
 10234  000F3A  CFDE FFE6          	movff	postinc2,postinc1
 10235  000F3E                     l1355:
 10236                           
 10237                           ; BSR set to: 0
 10238                           ;tff.c: 1054: fp->flag |= 0x20;
 10239                           
 10240                           ; BSR set to: 0
 10241  000F3E  EE20 F002          	lfsr	2,2
 10242  000F42  51C4               	movf	f_write@fp& (0+255),w,b
 10243  000F44  26D9               	addwf	fsr2l,f,c
 10244  000F46  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10245  000F48  22DA               	addwfc	fsr2h,f,c
 10246  000F4A  0E00               	movlw	0
 10247  000F4C  8ADB               	bsf	plusw2,5,c
 10248                           
 10249                           ; BSR set to: 0
 10250                           ;tff.c: 1055: return res;
 10251                           ;	Return value of _f_write is never used
 10252  000F4E  0012               	return	
 10253  000F50                     l1346:
 10254                           
 10255                           ;tff.c: 1058: fp->flag |= 0x80;
 10256                           
 10257                           ; BSR set to: 0
 10258  000F50  0100               	movlb	0	; () banked
 10259  000F52  EE20 F002          	lfsr	2,2
 10260  000F56  51C4               	movf	f_write@fp& (0+255),w,b
 10261  000F58  26D9               	addwf	fsr2l,f,c
 10262  000F5A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10263  000F5C  22DA               	addwfc	fsr2h,f,c
 10264  000F5E  0E00               	movlw	0
 10265  000F60  8EDB               	bsf	plusw2,7,c
 10266  000F62  0012               	return	
 10267  000F64                     __end_of_f_write:
 10268                           	opt stack 0
 10269                           tosu	equ	0xFFF
 10270                           tosh	equ	0xFFE
 10271                           tosl	equ	0xFFD
 10272                           pclath	equ	0xFFA
 10273                           tblptru	equ	0xFF8
 10274                           tblptrh	equ	0xFF7
 10275                           tblptrl	equ	0xFF6
 10276                           tablat	equ	0xFF5
 10277                           prodh	equ	0xFF4
 10278                           prodl	equ	0xFF3
 10279                           intcon	equ	0xFF2
 10280                           intcon2	equ	0xFF1
 10281                           intcon3	equ	0xFF0
 10282                           indf0	equ	0xFEF
 10283                           postinc0	equ	0xFEE
 10284                           fsr0h	equ	0xFEA
 10285                           fsr0l	equ	0xFE9
 10286                           wreg	equ	0xFE8
 10287                           indf1	equ	0xFE7
 10288                           postinc1	equ	0xFE6
 10289                           postdec1	equ	0xFE5
 10290                           plusw1	equ	0xFE3
 10291                           fsr1h	equ	0xFE2
 10292                           fsr1l	equ	0xFE1
 10293                           indf2	equ	0xFDF
 10294                           postinc2	equ	0xFDE
 10295                           postdec2	equ	0xFDD
 10296                           plusw2	equ	0xFDB
 10297                           fsr2h	equ	0xFDA
 10298                           fsr2l	equ	0xFD9
 10299                           status	equ	0xFD8
 10300                           
 10301 ;; *************** function ___llmod *****************
 10302 ;; Defined at:
 10303 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 10304 ;; Parameters:    Size  Location     Type
 10305 ;;  dividend        4    0[BANK0 ] unsigned long 
 10306 ;;  divisor         4    4[BANK0 ] unsigned long 
 10307 ;; Auto vars:     Size  Location     Type
 10308 ;;  counter         1    8[BANK0 ] unsigned char 
 10309 ;; Return value:  Size  Location     Type
 10310 ;;                  4    0[BANK0 ] unsigned long 
 10311 ;; Registers used:
 10312 ;;		wreg, status,2, status,0
 10313 ;; Tracked objects:
 10314 ;;		On entry : 0/0
 10315 ;;		On exit  : 0/0
 10316 ;;		Unchanged: 0/0
 10317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10318 ;;      Params:         0       8       0       0       0       0       0       0       0
 10319 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10320 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10321 ;;      Totals:         0       9       0       0       0       0       0       0       0
 10322 ;;Total ram usage:        9 bytes
 10323 ;; Hardware stack levels used:    1
 10324 ;; Hardware stack levels required when called:    3
 10325 ;; This function calls:
 10326 ;;		Nothing
 10327 ;; This function is called by:
 10328 ;;		_fprintf
 10329 ;; This function uses a non-reentrant model
 10330 ;;
 10331                           
 10332                           	psect	text35
 10333  004FCC                     __ptext35:
 10334                           	opt stack 0
 10335  004FCC                     ___llmod:
 10336                           	opt stack 23
 10337                           
 10338                           ; BSR set to: 0
 10339                           ;incstack = 0
 10340  004FCC  0100               	movlb	0	; () banked
 10341  004FCE  5164               	movf	___llmod@divisor& (0+255),w,b
 10342  004FD0  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 10343  004FD2  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 10344  004FD4  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 10345  004FD6  B4D8               	btfsc	status,2,c
 10346  004FD8  D024               	goto	l1919
 10347                           
 10348                           ; BSR set to: 0
 10349  004FDA  0E01               	movlw	1
 10350  004FDC  6F68               	movwf	___llmod@counter& (0+255),b
 10351  004FDE  D006               	goto	l1914
 10352  004FE0                     
 10353                           ; BSR set to: 0
 10354                           
 10355                           ; BSR set to: 0
 10356  004FE0  90D8               	bcf	status,0,c
 10357  004FE2  3764               	rlcf	___llmod@divisor& (0+255),f,b
 10358  004FE4  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 10359  004FE6  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 10360  004FE8  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 10361  004FEA  2B68               	incf	___llmod@counter& (0+255),f,b
 10362  004FEC                     l1914:
 10363                           
 10364                           ; BSR set to: 0
 10365                           
 10366                           ; BSR set to: 0
 10367  004FEC  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 10368  004FEE  D7F8               	goto	l1915
 10369  004FF0                     u15110:
 10370                           
 10371                           ; BSR set to: 0
 10372                           
 10373                           ; BSR set to: 0
 10374                           
 10375                           ; BSR set to: 0
 10376  004FF0  5164               	movf	___llmod@divisor& (0+255),w,b
 10377  004FF2  5D60               	subwf	___llmod@dividend& (0+255),w,b
 10378  004FF4  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 10379  004FF6  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 10380  004FF8  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 10381  004FFA  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 10382  004FFC  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 10383  004FFE  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 10384  005000  A0D8               	btfss	status,0,c
 10385  005002  D008               	goto	l1918
 10386                           
 10387                           ; BSR set to: 0
 10388  005004  5164               	movf	___llmod@divisor& (0+255),w,b
 10389  005006  5F60               	subwf	___llmod@dividend& (0+255),f,b
 10390  005008  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 10391  00500A  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 10392  00500C  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 10393  00500E  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 10394  005010  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 10395  005012  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 10396  005014                     l1918:
 10397                           
 10398                           ; BSR set to: 0
 10399                           
 10400                           ; BSR set to: 0
 10401  005014  90D8               	bcf	status,0,c
 10402  005016  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 10403  005018  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 10404  00501A  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 10405  00501C  3364               	rrcf	___llmod@divisor& (0+255),f,b
 10406                           
 10407                           ; BSR set to: 0
 10408  00501E  2F68               	decfsz	___llmod@counter& (0+255),f,b
 10409  005020  D7E7               	goto	u15110
 10410  005022                     l1919:
 10411                           
 10412                           ; BSR set to: 0
 10413                           
 10414                           ; BSR set to: 0
 10415  005022  C060  F060         	movff	___llmod@dividend,?___llmod
 10416  005026  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 10417  00502A  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 10418  00502E  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 10419                           
 10420                           ; BSR set to: 0
 10421  005032  0012               	return		;funcret
 10422  005034                     __end_of___llmod:
 10423                           	opt stack 0
 10424                           tosu	equ	0xFFF
 10425                           tosh	equ	0xFFE
 10426                           tosl	equ	0xFFD
 10427                           pclath	equ	0xFFA
 10428                           tblptru	equ	0xFF8
 10429                           tblptrh	equ	0xFF7
 10430                           tblptrl	equ	0xFF6
 10431                           tablat	equ	0xFF5
 10432                           prodh	equ	0xFF4
 10433                           prodl	equ	0xFF3
 10434                           intcon	equ	0xFF2
 10435                           intcon2	equ	0xFF1
 10436                           intcon3	equ	0xFF0
 10437                           indf0	equ	0xFEF
 10438                           postinc0	equ	0xFEE
 10439                           fsr0h	equ	0xFEA
 10440                           fsr0l	equ	0xFE9
 10441                           wreg	equ	0xFE8
 10442                           indf1	equ	0xFE7
 10443                           postinc1	equ	0xFE6
 10444                           postdec1	equ	0xFE5
 10445                           plusw1	equ	0xFE3
 10446                           fsr1h	equ	0xFE2
 10447                           fsr1l	equ	0xFE1
 10448                           indf2	equ	0xFDF
 10449                           postinc2	equ	0xFDE
 10450                           postdec2	equ	0xFDD
 10451                           plusw2	equ	0xFDB
 10452                           fsr2h	equ	0xFDA
 10453                           fsr2l	equ	0xFD9
 10454                           status	equ	0xFD8
 10455                           
 10456 ;; *************** function _f_open *****************
 10457 ;; Defined at:
 10458 ;;		line 825 in file "bibliotecas/tff.c"
 10459 ;; Parameters:    Size  Location     Type
 10460 ;;  fp              2  119[BANK0 ] PTR struct _FIL
 10461 ;;		 -> fil(28), 
 10462 ;;  path            2  121[BANK0 ] PTR const unsigned char 
 10463 ;;		 -> STR_25(13), filename(15), 
 10464 ;;  mode            1  123[BANK0 ] unsigned char 
 10465 ;; Auto vars:     Size  Location     Type
 10466 ;;  dw              4   14[BANK1 ] unsigned long 
 10467 ;;  rs              2   12[BANK1 ] unsigned short 
 10468 ;;  dj             14   21[BANK1 ] struct _DIR_E
 10469 ;;  fn             12    0[BANK1 ] unsigned char [12]
 10470 ;;  dir             2   19[BANK1 ] PTR unsigned char 
 10471 ;;		 -> NULL(0), fs(544), 
 10472 ;;  res             1   18[BANK1 ] enum E155
 10473 ;; Return value:  Size  Location     Type
 10474 ;;                  1    wreg      enum E3978
 10475 ;; Registers used:
 10476 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10477 ;; Tracked objects:
 10478 ;;		On entry : 0/0
 10479 ;;		On exit  : 0/0
 10480 ;;		Unchanged: 0/0
 10481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10482 ;;      Params:         0       5       0       0       0       0       0       0       0
 10483 ;;      Locals:         0       0      35       0       0       0       0       0       0
 10484 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10485 ;;      Totals:         0       9      35       0       0       0       0       0       0
 10486 ;;Total ram usage:       44 bytes
 10487 ;; Hardware stack levels used:    1
 10488 ;; Hardware stack levels required when called:   12
 10489 ;; This function calls:
 10490 ;;		_auto_mount
 10491 ;;		_get_fattime
 10492 ;;		_memcpy
 10493 ;;		_memset
 10494 ;;		_move_window
 10495 ;;		_remove_chain
 10496 ;;		_reserve_direntry
 10497 ;;		_trace_path
 10498 ;; This function is called by:
 10499 ;;		_escrita_sdcard
 10500 ;;		_sdcard_init
 10501 ;;		_leitura_sdcard
 10502 ;; This function uses a non-reentrant model
 10503 ;;
 10504                           
 10505                           	psect	text36
 10506  001CFE                     __ptext36:
 10507                           	opt stack 0
 10508  001CFE                     _f_open:
 10509                           	opt stack 15
 10510                           
 10511                           ;tff.c: 831: FRESULT res;
 10512                           ;tff.c: 832: DIR_E dj;
 10513                           ;tff.c: 833: BYTE *dir;
 10514                           ;tff.c: 834: char fn[8+3+1];
 10515                           ;tff.c: 837: fp->fs = (0);
 10516                           
 10517                           ; BSR set to: 0
 10518                           ;incstack = 0
 10519  001CFE  0100               	movlb	0	; () banked
 10520  001D00  EE20 F004          	lfsr	2,4
 10521  001D04  51D7               	movf	f_open@fp& (0+255),w,b
 10522  001D06  26D9               	addwf	fsr2l,f,c
 10523  001D08  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 10524  001D0A  22DA               	addwfc	fsr2h,f,c
 10525  001D0C  0E00               	movlw	0
 10526  001D0E  6EDE               	movwf	postinc2,c
 10527  001D10  0E00               	movlw	0
 10528  001D12  6EDD               	movwf	postdec2,c
 10529                           
 10530                           ; BSR set to: 0
 10531                           ;tff.c: 839: mode &= (0x01|0x02|0x08|0x10|0x04);
 10532  001D14  0E1F               	movlw	31
 10533  001D16  17DB               	andwf	f_open@mode& (0+255),f,b
 10534                           
 10535                           ; BSR set to: 0
 10536                           ;tff.c: 840: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
 10537  001D18  0ED9               	movlw	low f_open@path
 10538  001D1A  6F93               	movwf	auto_mount@path& (0+255),b
 10539  001D1C  0E00               	movlw	high f_open@path
 10540  001D1E  6F94               	movwf	(auto_mount@path+1)& (0+255),b
 10541  001D20  51DB               	movf	f_open@mode& (0+255),w,b
 10542  001D22  0B1E               	andlw	30
 10543  001D24  6F95               	movwf	auto_mount@chk_wp& (0+255),b
 10544  001D26  ECB2  F007         	call	_auto_mount	;wreg free
 10545  001D2A  0101               	movlb	1	; () banked
 10546  001D2C  6FED               	movwf	f_open@res& (0+255),b
 10547                           
 10548                           ; BSR set to: 1
 10549                           ;tff.c: 845: if (res != FR_OK) return res;
 10550  001D2E  51ED               	movf	f_open@res& (0+255),w,b
 10551  001D30  B4D8               	btfsc	status,2,c
 10552  001D32  D002               	goto	l1279
 10553                           
 10554                           ; BSR set to: 1
 10555  001D34  51ED               	movf	f_open@res& (0+255),w,b
 10556                           
 10557                           ; BSR set to: 1
 10558  001D36  0012               	return	
 10559  001D38                     l1279:
 10560                           
 10561                           ; BSR set to: 1
 10562                           ;tff.c: 846: res = trace_path(&dj, fn, path, &dir);
 10563                           
 10564                           ; BSR set to: 1
 10565  001D38  0EF0               	movlw	low f_open@dj
 10566  001D3A  0100               	movlb	0	; () banked
 10567  001D3C  6FC0               	movwf	trace_path@dj& (0+255),b
 10568  001D3E  0E01               	movlw	high f_open@dj
 10569  001D40  6FC1               	movwf	(trace_path@dj+1)& (0+255),b
 10570  001D42  0EDB               	movlw	low f_open@fn
 10571  001D44  6FC2               	movwf	trace_path@fn& (0+255),b
 10572  001D46  0E01               	movlw	high f_open@fn
 10573  001D48  6FC3               	movwf	(trace_path@fn+1)& (0+255),b
 10574  001D4A  C0D9  F0C4         	movff	f_open@path,trace_path@path
 10575  001D4E  C0DA  F0C5         	movff	f_open@path+1,trace_path@path+1
 10576  001D52  0EEE               	movlw	low f_open@dir
 10577  001D54  6FC6               	movwf	trace_path@dir& (0+255),b
 10578  001D56  0E01               	movlw	high f_open@dir
 10579  001D58  6FC7               	movwf	(trace_path@dir+1)& (0+255),b
 10580  001D5A  EC52  F013         	call	_trace_path	;wreg free
 10581  001D5E  0101               	movlb	1	; () banked
 10582  001D60  6FED               	movwf	f_open@res& (0+255),b
 10583                           
 10584                           ; BSR set to: 1
 10585                           ;tff.c: 850: if (mode & (0x08|0x10|0x04)) {
 10586  001D62  C0DB  F0DC         	movff	f_open@mode,??_f_open
 10587  001D66  0E1C               	movlw	28
 10588  001D68  0100               	movlb	0	; () banked
 10589  001D6A  17DC               	andwf	??_f_open& (0+255),f,b
 10590  001D6C  B4D8               	btfsc	status,2,c
 10591  001D6E  D0F6               	goto	l1281
 10592                           
 10593                           ; BSR set to: 0
 10594                           ;tff.c: 851: CLUST rs;
 10595                           ;tff.c: 852: DWORD dw;
 10596                           ;tff.c: 853: if (res != FR_OK) {
 10597  001D70  0101               	movlb	1	; () banked
 10598  001D72  51ED               	movf	f_open@res& (0+255),w,b
 10599  001D74  B4D8               	btfsc	status,2,c
 10600  001D76  D042               	goto	l1282
 10601                           
 10602                           ; BSR set to: 1
 10603                           ;tff.c: 854: if (res != FR_NO_FILE) return res;
 10604  001D78  0E02               	movlw	2
 10605  001D7A  19ED               	xorwf	f_open@res& (0+255),w,b
 10606  001D7C  B4D8               	btfsc	status,2,c
 10607  001D7E  D002               	goto	l1283
 10608                           
 10609                           ; BSR set to: 1
 10610  001D80  51ED               	movf	f_open@res& (0+255),w,b
 10611                           
 10612                           ; BSR set to: 1
 10613  001D82  0012               	return	
 10614  001D84                     l1283:
 10615                           
 10616                           ; BSR set to: 1
 10617                           ;tff.c: 855: res = reserve_direntry(&dj, &dir);
 10618                           
 10619                           ; BSR set to: 1
 10620  001D84  0EF0               	movlw	low f_open@dj
 10621  001D86  0100               	movlb	0	; () banked
 10622  001D88  6FC4               	movwf	reserve_direntry@dj& (0+255),b
 10623  001D8A  0E01               	movlw	high f_open@dj
 10624  001D8C  6FC5               	movwf	(reserve_direntry@dj+1)& (0+255),b
 10625  001D8E  0EEE               	movlw	low f_open@dir
 10626  001D90  6FC6               	movwf	reserve_direntry@dir& (0+255),b
 10627  001D92  0E01               	movlw	high f_open@dir
 10628  001D94  6FC7               	movwf	(reserve_direntry@dir+1)& (0+255),b
 10629  001D96  ECA8  F014         	call	_reserve_direntry	;wreg free
 10630  001D9A  0101               	movlb	1	; () banked
 10631  001D9C  6FED               	movwf	f_open@res& (0+255),b
 10632                           
 10633                           ; BSR set to: 1
 10634                           ;tff.c: 856: if (res != FR_OK) return res;
 10635  001D9E  51ED               	movf	f_open@res& (0+255),w,b
 10636  001DA0  B4D8               	btfsc	status,2,c
 10637  001DA2  D002               	goto	l1284
 10638                           
 10639                           ; BSR set to: 1
 10640  001DA4  51ED               	movf	f_open@res& (0+255),w,b
 10641                           
 10642                           ; BSR set to: 1
 10643  001DA6  0012               	return	
 10644  001DA8                     l1284:
 10645                           
 10646                           ; BSR set to: 1
 10647                           ;tff.c: 857: memset(dir, 0, 32);
 10648                           
 10649                           ; BSR set to: 1
 10650  001DA8  C1EE  F060         	movff	f_open@dir,memset@p1
 10651  001DAC  C1EF  F061         	movff	f_open@dir+1,memset@p1+1
 10652  001DB0  0E00               	movlw	0
 10653  001DB2  0100               	movlb	0	; () banked
 10654  001DB4  6F63               	movwf	(memset@c+1)& (0+255),b
 10655  001DB6  0E00               	movlw	0
 10656  001DB8  6F62               	movwf	memset@c& (0+255),b
 10657  001DBA  0E00               	movlw	0
 10658  001DBC  6F65               	movwf	(memset@n+1)& (0+255),b
 10659  001DBE  0E20               	movlw	32
 10660  001DC0  6F64               	movwf	memset@n& (0+255),b
 10661  001DC2  EC06  F02B         	call	_memset	;wreg free
 10662                           
 10663                           ;tff.c: 858: memcpy(&dir[0], fn, 8+3);
 10664  001DC6  C1EE  F060         	movff	f_open@dir,memcpy@d1
 10665  001DCA  C1EF  F061         	movff	f_open@dir+1,memcpy@d1+1
 10666  001DCE  0EDB               	movlw	low f_open@fn
 10667  001DD0  0100               	movlb	0	; () banked
 10668  001DD2  6F62               	movwf	memcpy@s1& (0+255),b
 10669  001DD4  0E01               	movlw	high f_open@fn
 10670  001DD6  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 10671  001DD8  0E00               	movlw	0
 10672  001DDA  6F65               	movwf	(memcpy@n+1)& (0+255),b
 10673  001DDC  0E0B               	movlw	11
 10674  001DDE  6F64               	movwf	memcpy@n& (0+255),b
 10675  001DE0  EC99  F029         	call	_memcpy	;wreg free
 10676                           
 10677                           ;tff.c: 859: dir[12] = fn[11];
 10678  001DE4  0101               	movlb	1	; () banked
 10679  001DE6  EE20 F00C          	lfsr	2,12
 10680  001DEA  51EE               	movf	f_open@dir& (0+255),w,b
 10681  001DEC  26D9               	addwf	fsr2l,f,c
 10682  001DEE  51EF               	movf	(f_open@dir+1)& (0+255),w,b
 10683  001DF0  22DA               	addwfc	fsr2h,f,c
 10684  001DF2  C1E6  FFDF         	movff	f_open@fn+11,indf2
 10685                           
 10686                           ; BSR set to: 1
 10687                           ;tff.c: 860: mode |= 0x08;
 10688  001DF6  0100               	movlb	0	; () banked
 10689  001DF8  87DB               	bsf	f_open@mode& (0+255),3,b
 10690                           
 10691                           ;tff.c: 861: }
 10692  001DFA  D080               	goto	l1290
 10693  001DFC                     l1282:
 10694                           
 10695                           ; BSR set to: 1
 10696                           ;tff.c: 862: else {
 10697                           ;tff.c: 863: if (mode & 0x04)
 10698  001DFC  0100               	movlb	0	; () banked
 10699  001DFE  A5DB               	btfss	f_open@mode& (0+255),2,b
 10700  001E00  D002               	goto	l1286
 10701                           
 10702                           ; BSR set to: 0
 10703                           ;tff.c: 864: return FR_EXIST;
 10704  001E02  0E07               	movlw	7
 10705                           
 10706                           ; BSR set to: 0
 10707  001E04  0012               	return	
 10708  001E06                     l1286:
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;tff.c: 865: if (!dir || (dir[11] & (0x01|0x10)))
 10712                           
 10713                           ; BSR set to: 0
 10714  001E06  0101               	movlb	1	; () banked
 10715  001E08  51EE               	movf	f_open@dir& (0+255),w,b
 10716  001E0A  11EF               	iorwf	(f_open@dir+1)& (0+255),w,b
 10717  001E0C  B4D8               	btfsc	status,2,c
 10718  001E0E  D00D               	goto	u15230
 10719                           
 10720                           ; BSR set to: 1
 10721  001E10  EE20 F00B          	lfsr	2,11
 10722  001E14  51EE               	movf	f_open@dir& (0+255),w,b
 10723  001E16  26D9               	addwf	fsr2l,f,c
 10724  001E18  51EF               	movf	(f_open@dir+1)& (0+255),w,b
 10725  001E1A  22DA               	addwfc	fsr2h,f,c
 10726  001E1C  50DF               	movf	indf2,w,c
 10727  001E1E  0100               	movlb	0	; () banked
 10728  001E20  6FDC               	movwf	??_f_open& (0+255),b
 10729  001E22  0E11               	movlw	17
 10730  001E24  17DC               	andwf	??_f_open& (0+255),f,b
 10731  001E26  B4D8               	btfsc	status,2,c
 10732  001E28  D002               	goto	l1287
 10733  001E2A                     u15230:
 10734                           
 10735                           ;tff.c: 866: return FR_DENIED;
 10736                           
 10737                           ; BSR set to: 0
 10738  001E2A  0E06               	movlw	6
 10739  001E2C  0012               	return	
 10740  001E2E                     l1287:
 10741                           
 10742                           ; BSR set to: 0
 10743                           ;tff.c: 867: if (mode & 0x08) {
 10744  001E2E  A7DB               	btfss	f_open@mode& (0+255),3,b
 10745  001E30  D065               	goto	l1290
 10746                           
 10747                           ; BSR set to: 0
 10748                           ;tff.c: 872: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
 10749  001E32  0101               	movlb	1	; () banked
 10750  001E34  EE20 F01A          	lfsr	2,26
 10751  001E38  51EE               	movf	f_open@dir& (0+255),w,b
 10752  001E3A  26D9               	addwf	fsr2l,f,c
 10753  001E3C  51EF               	movf	(f_open@dir+1)& (0+255),w,b
 10754  001E3E  22DA               	addwfc	fsr2h,f,c
 10755  001E40  CFDE F1E7          	movff	postinc2,f_open@rs
 10756  001E44  CFDD F1E8          	movff	postdec2,f_open@rs+1
 10757                           
 10758                           ;tff.c: 874: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
 10759  001E48  EE20 F01A          	lfsr	2,26
 10760  001E4C  51EE               	movf	f_open@dir& (0+255),w,b
 10761  001E4E  26D9               	addwf	fsr2l,f,c
 10762  001E50  51EF               	movf	(f_open@dir+1)& (0+255),w,b
 10763  001E52  22DA               	addwfc	fsr2h,f,c
 10764  001E54  0E00               	movlw	0
 10765  001E56  6EDE               	movwf	postinc2,c
 10766  001E58  0E00               	movlw	0
 10767  001E5A  6EDD               	movwf	postdec2,c
 10768                           
 10769                           ;tff.c: 875: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
 10770  001E5C  EE20 F01C          	lfsr	2,28
 10771  001E60  51EE               	movf	f_open@dir& (0+255),w,b
 10772  001E62  26D9               	addwf	fsr2l,f,c
 10773  001E64  51EF               	movf	(f_open@dir+1)& (0+255),w,b
 10774  001E66  22DA               	addwfc	fsr2h,f,c
 10775  001E68  6ADE               	clrf	postinc2,c
 10776  001E6A  6ADE               	clrf	postinc2,c
 10777  001E6C  6ADE               	clrf	postinc2,c
 10778  001E6E  6ADD               	clrf	postdec2,c
 10779                           
 10780                           ;tff.c: 876: dj.fs->winflag = 1;
 10781  001E70  EE20 F01F          	lfsr	2,31
 10782  001E74  51F4               	movf	(f_open@dj+4)& (0+255),w,b
 10783  001E76  26D9               	addwf	fsr2l,f,c
 10784  001E78  51F5               	movf	(f_open@dj+5)& (0+255),w,b
 10785  001E7A  22DA               	addwfc	fsr2h,f,c
 10786  001E7C  0E01               	movlw	1
 10787  001E7E  6EDF               	movwf	indf2,c
 10788                           
 10789                           ;tff.c: 877: dw = dj.fs->winsect;
 10790  001E80  EE20 F004          	lfsr	2,4
 10791  001E84  51F4               	movf	(f_open@dj+4)& (0+255),w,b
 10792  001E86  26D9               	addwf	fsr2l,f,c
 10793  001E88  51F5               	movf	(f_open@dj+5)& (0+255),w,b
 10794  001E8A  22DA               	addwfc	fsr2h,f,c
 10795  001E8C  CFDE F1E9          	movff	postinc2,f_open@dw
 10796  001E90  CFDE F1EA          	movff	postinc2,f_open@dw+1
 10797  001E94  CFDE F1EB          	movff	postinc2,f_open@dw+2
 10798  001E98  CFDE F1EC          	movff	postinc2,f_open@dw+3
 10799                           
 10800                           ; BSR set to: 1
 10801                           ;tff.c: 878: if (!remove_chain(rs) || !move_window(dw))
 10802  001E9C  C1E7  F0B6         	movff	f_open@rs,remove_chain@clust
 10803  001EA0  C1E8  F0B7         	movff	f_open@rs+1,remove_chain@clust+1
 10804  001EA4  ECF6  F022         	call	_remove_chain	;wreg free
 10805  001EA8  0900               	iorlw	0
 10806  001EAA  B4D8               	btfsc	status,2,c
 10807  001EAC  D00D               	goto	u15260
 10808  001EAE  C1E9  F08B         	movff	f_open@dw,move_window@sector
 10809  001EB2  C1EA  F08C         	movff	f_open@dw+1,move_window@sector+1
 10810  001EB6  C1EB  F08D         	movff	f_open@dw+2,move_window@sector+2
 10811  001EBA  C1EC  F08E         	movff	f_open@dw+3,move_window@sector+3
 10812  001EBE  EC38  F01B         	call	_move_window	;wreg free
 10813  001EC2  0900               	iorlw	0
 10814  001EC4  A4D8               	btfss	status,2,c
 10815  001EC6  D002               	goto	l1291
 10816  001EC8                     u15260:
 10817                           
 10818                           ;tff.c: 879: return FR_RW_ERROR;
 10819  001EC8  0E08               	movlw	8
 10820  001ECA  0012               	return	
 10821  001ECC                     l1291:
 10822                           
 10823                           ;tff.c: 880: dj.fs->last_clust = rs - 1;
 10824  001ECC  0EFF               	movlw	255
 10825  001ECE  0100               	movlb	0	; () banked
 10826  001ED0  6FDC               	movwf	??_f_open& (0+255),b
 10827  001ED2  0EFF               	movlw	255
 10828  001ED4  6FDD               	movwf	(??_f_open+1)& (0+255),b
 10829  001ED6  C1E7  F0DE         	movff	f_open@rs,??_f_open+2
 10830  001EDA  C1E8  F0DF         	movff	f_open@rs+1,??_f_open+3
 10831  001EDE  51DC               	movf	??_f_open& (0+255),w,b
 10832  001EE0  27DE               	addwf	(??_f_open+2)& (0+255),f,b
 10833  001EE2  51DD               	movf	(??_f_open+1)& (0+255),w,b
 10834  001EE4  23DF               	addwfc	(??_f_open+3)& (0+255),f,b
 10835  001EE6  0101               	movlb	1	; () banked
 10836  001EE8  EE20 F018          	lfsr	2,24
 10837  001EEC  51F4               	movf	(f_open@dj+4)& (0+255),w,b
 10838  001EEE  26D9               	addwf	fsr2l,f,c
 10839  001EF0  51F5               	movf	(f_open@dj+5)& (0+255),w,b
 10840  001EF2  22DA               	addwfc	fsr2h,f,c
 10841  001EF4  C0DE  FFDE         	movff	??_f_open+2,postinc2
 10842  001EF8  C0DF  FFDD         	movff	??_f_open+3,postdec2
 10843  001EFC                     l1290:
 10844                           
 10845                           ;tff.c: 881: }
 10846                           ;tff.c: 882: }
 10847                           ;tff.c: 883: if (mode & 0x08) {
 10848                           
 10849                           ; BSR set to: 1
 10850                           
 10851                           ; BSR set to: 1
 10852  001EFC  0100               	movlb	0	; () banked
 10853  001EFE  A7DB               	btfss	f_open@mode& (0+255),3,b
 10854  001F00  D04F               	goto	l1300
 10855                           
 10856                           ; BSR set to: 0
 10857                           ;tff.c: 884: dir[11] = 0;
 10858  001F02  0101               	movlb	1	; () banked
 10859  001F04  EE20 F00B          	lfsr	2,11
 10860  001F08  51EE               	movf	f_open@dir& (0+255),w,b
 10861  001F0A  26D9               	addwf	fsr2l,f,c
 10862  001F0C  51EF               	movf	(f_open@dir+1)& (0+255),w,b
 10863  001F0E  22DA               	addwfc	fsr2h,f,c
 10864  001F10  0E00               	movlw	0
 10865  001F12  6EDF               	movwf	indf2,c
 10866                           
 10867                           ; BSR set to: 1
 10868                           ;tff.c: 885: dw = get_fattime();
 10869  001F14  EC0D  F020         	call	_get_fattime	;wreg free
 10870  001F18  C060  F1E9         	movff	?_get_fattime,f_open@dw
 10871  001F1C  C061  F1EA         	movff	?_get_fattime+1,f_open@dw+1
 10872  001F20  C062  F1EB         	movff	?_get_fattime+2,f_open@dw+2
 10873  001F24  C063  F1EC         	movff	?_get_fattime+3,f_open@dw+3
 10874                           
 10875                           ;tff.c: 886: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
 10876  001F28  0101               	movlb	1	; () banked
 10877  001F2A  EE20 F00E          	lfsr	2,14
 10878  001F2E  51EE               	movf	f_open@dir& (0+255),w,b
 10879  001F30  26D9               	addwf	fsr2l,f,c
 10880  001F32  51EF               	movf	(f_open@dir+1)& (0+255),w,b
 10881  001F34  22DA               	addwfc	fsr2h,f,c
 10882  001F36  C1E9  FFDE         	movff	f_open@dw,postinc2
 10883  001F3A  C1EA  FFDE         	movff	f_open@dw+1,postinc2
 10884  001F3E  C1EB  FFDE         	movff	f_open@dw+2,postinc2
 10885  001F42  C1EC  FFDE         	movff	f_open@dw+3,postinc2
 10886                           
 10887                           ; BSR set to: 1
 10888                           ;tff.c: 887: dj.fs->winflag = 1;
 10889  001F46  EE20 F01F          	lfsr	2,31
 10890  001F4A  51F4               	movf	(f_open@dj+4)& (0+255),w,b
 10891  001F4C  26D9               	addwf	fsr2l,f,c
 10892  001F4E  51F5               	movf	(f_open@dj+5)& (0+255),w,b
 10893  001F50  22DA               	addwfc	fsr2h,f,c
 10894  001F52  0E01               	movlw	1
 10895  001F54  6EDF               	movwf	indf2,c
 10896                           
 10897                           ; BSR set to: 1
 10898                           ;tff.c: 888: mode |= 0x20;
 10899  001F56  0100               	movlb	0	; () banked
 10900  001F58  8BDB               	bsf	f_open@mode& (0+255),5,b
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;tff.c: 889: }
 10904                           ;tff.c: 890: }
 10905  001F5A  D022               	goto	l1300
 10906  001F5C                     l1281:
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;tff.c: 892: else {
 10910                           ;tff.c: 894: if (res != FR_OK) return res;
 10911                           
 10912                           ; BSR set to: 0
 10913  001F5C  0101               	movlb	1	; () banked
 10914  001F5E  51ED               	movf	f_open@res& (0+255),w,b
 10915  001F60  B4D8               	btfsc	status,2,c
 10916  001F62  D002               	goto	l1296
 10917                           
 10918                           ; BSR set to: 1
 10919  001F64  51ED               	movf	f_open@res& (0+255),w,b
 10920                           
 10921                           ; BSR set to: 1
 10922  001F66  0012               	return	
 10923  001F68                     l1296:
 10924                           
 10925                           ; BSR set to: 1
 10926                           ;tff.c: 895: if (!dir || (dir[11] & 0x10))
 10927                           
 10928                           ; BSR set to: 1
 10929  001F68  51EE               	movf	f_open@dir& (0+255),w,b
 10930  001F6A  11EF               	iorwf	(f_open@dir+1)& (0+255),w,b
 10931  001F6C  B4D8               	btfsc	status,2,c
 10932  001F6E  D008               	goto	u15300
 10933                           
 10934                           ; BSR set to: 1
 10935  001F70  EE20 F00B          	lfsr	2,11
 10936  001F74  51EE               	movf	f_open@dir& (0+255),w,b
 10937  001F76  26D9               	addwf	fsr2l,f,c
 10938  001F78  51EF               	movf	(f_open@dir+1)& (0+255),w,b
 10939  001F7A  22DA               	addwfc	fsr2h,f,c
 10940  001F7C  A8DF               	btfss	indf2,4,c
 10941  001F7E  D002               	goto	l1297
 10942  001F80                     u15300:
 10943                           
 10944                           ; BSR set to: 1
 10945                           ;tff.c: 896: return FR_NO_FILE;
 10946                           
 10947                           ; BSR set to: 1
 10948  001F80  0E02               	movlw	2
 10949                           
 10950                           ; BSR set to: 1
 10951  001F82  0012               	return	
 10952  001F84                     l1297:
 10953                           
 10954                           ; BSR set to: 1
 10955                           ;tff.c: 898: if ((mode & 0x02) && (dir[11] & 0x01))
 10956  001F84  0100               	movlb	0	; () banked
 10957  001F86  A3DB               	btfss	f_open@mode& (0+255),1,b
 10958  001F88  D00B               	goto	l1300
 10959                           
 10960                           ; BSR set to: 0
 10961  001F8A  0101               	movlb	1	; () banked
 10962  001F8C  EE20 F00B          	lfsr	2,11
 10963  001F90  51EE               	movf	f_open@dir& (0+255),w,b
 10964  001F92  26D9               	addwf	fsr2l,f,c
 10965  001F94  51EF               	movf	(f_open@dir+1)& (0+255),w,b
 10966  001F96  22DA               	addwfc	fsr2h,f,c
 10967  001F98  A0DF               	btfss	indf2,0,c
 10968  001F9A  D002               	goto	l1300
 10969                           
 10970                           ; BSR set to: 1
 10971                           ;tff.c: 899: return FR_DENIED;
 10972  001F9C  0E06               	movlw	6
 10973                           
 10974                           ; BSR set to: 1
 10975  001F9E  0012               	return	
 10976  001FA0                     l1300:
 10977                           
 10978                           ;tff.c: 900: }
 10979                           ;tff.c: 901: fp->dir_sect = dj.fs->winsect;
 10980                           
 10981                           ; BSR set to: 1
 10982                           
 10983                           ; BSR set to: 1
 10984  001FA0  0101               	movlb	1	; () banked
 10985  001FA2  EE20 F004          	lfsr	2,4
 10986  001FA6  51F4               	movf	(f_open@dj+4)& (0+255),w,b
 10987  001FA8  26D9               	addwf	fsr2l,f,c
 10988  001FAA  51F5               	movf	(f_open@dj+5)& (0+255),w,b
 10989  001FAC  22DA               	addwfc	fsr2h,f,c
 10990  001FAE  0100               	movlb	0	; () banked
 10991  001FB0  EE10 F016          	lfsr	1,22
 10992  001FB4  51D7               	movf	f_open@fp& (0+255),w,b
 10993  001FB6  26E1               	addwf	fsr1l,f,c
 10994  001FB8  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 10995  001FBA  22E2               	addwfc	fsr1h,f,c
 10996  001FBC  CFDE FFE6          	movff	postinc2,postinc1
 10997  001FC0  CFDE FFE6          	movff	postinc2,postinc1
 10998  001FC4  CFDE FFE6          	movff	postinc2,postinc1
 10999  001FC8  CFDE FFE6          	movff	postinc2,postinc1
 11000                           
 11001                           ; BSR set to: 0
 11002                           ;tff.c: 902: fp->dir_ptr = dir;
 11003  001FCC  EE20 F01A          	lfsr	2,26
 11004  001FD0  51D7               	movf	f_open@fp& (0+255),w,b
 11005  001FD2  26D9               	addwf	fsr2l,f,c
 11006  001FD4  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11007  001FD6  22DA               	addwfc	fsr2h,f,c
 11008  001FD8  C1EE  FFDE         	movff	f_open@dir,postinc2
 11009  001FDC  C1EF  FFDD         	movff	f_open@dir+1,postdec2
 11010                           
 11011                           ; BSR set to: 0
 11012                           ;tff.c: 904: fp->flag = mode;
 11013  001FE0  EE20 F002          	lfsr	2,2
 11014  001FE4  51D7               	movf	f_open@fp& (0+255),w,b
 11015  001FE6  26D9               	addwf	fsr2l,f,c
 11016  001FE8  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11017  001FEA  22DA               	addwfc	fsr2h,f,c
 11018  001FEC  C0DB  FFDF         	movff	f_open@mode,indf2
 11019                           
 11020                           ;tff.c: 905: fp->org_clust =
 11021                           ;tff.c: 909: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
 11022  001FF0  0101               	movlb	1	; () banked
 11023  001FF2  EE20 F01A          	lfsr	2,26
 11024  001FF6  51EE               	movf	f_open@dir& (0+255),w,b
 11025  001FF8  26D9               	addwf	fsr2l,f,c
 11026  001FFA  51EF               	movf	(f_open@dir+1)& (0+255),w,b
 11027  001FFC  22DA               	addwfc	fsr2h,f,c
 11028  001FFE  0100               	movlb	0	; () banked
 11029  002000  EE10 F00E          	lfsr	1,14
 11030  002004  51D7               	movf	f_open@fp& (0+255),w,b
 11031  002006  26E1               	addwf	fsr1l,f,c
 11032  002008  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11033  00200A  22E2               	addwfc	fsr1h,f,c
 11034  00200C  CFDE FFE6          	movff	postinc2,postinc1
 11035  002010  CFDD FFE5          	movff	postdec2,postdec1
 11036                           
 11037                           ;tff.c: 910: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
 11038  002014  0101               	movlb	1	; () banked
 11039  002016  EE20 F01C          	lfsr	2,28
 11040  00201A  51EE               	movf	f_open@dir& (0+255),w,b
 11041  00201C  26D9               	addwf	fsr2l,f,c
 11042  00201E  51EF               	movf	(f_open@dir+1)& (0+255),w,b
 11043  002020  22DA               	addwfc	fsr2h,f,c
 11044  002022  0100               	movlb	0	; () banked
 11045  002024  EE10 F00A          	lfsr	1,10
 11046  002028  51D7               	movf	f_open@fp& (0+255),w,b
 11047  00202A  26E1               	addwf	fsr1l,f,c
 11048  00202C  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11049  00202E  22E2               	addwfc	fsr1h,f,c
 11050  002030  CFDE FFE6          	movff	postinc2,postinc1
 11051  002034  CFDE FFE6          	movff	postinc2,postinc1
 11052  002038  CFDE FFE6          	movff	postinc2,postinc1
 11053  00203C  CFDE FFE6          	movff	postinc2,postinc1
 11054                           
 11055                           ; BSR set to: 0
 11056                           ;tff.c: 911: fp->fptr = 0; fp->csect = 255;
 11057  002040  EE20 F006          	lfsr	2,6
 11058  002044  51D7               	movf	f_open@fp& (0+255),w,b
 11059  002046  26D9               	addwf	fsr2l,f,c
 11060  002048  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11061  00204A  22DA               	addwfc	fsr2h,f,c
 11062  00204C  6ADE               	clrf	postinc2,c
 11063  00204E  6ADE               	clrf	postinc2,c
 11064  002050  6ADE               	clrf	postinc2,c
 11065  002052  6ADD               	clrf	postdec2,c
 11066                           
 11067                           ; BSR set to: 0
 11068  002054  EE20 F003          	lfsr	2,3
 11069  002058  51D7               	movf	f_open@fp& (0+255),w,b
 11070  00205A  26D9               	addwf	fsr2l,f,c
 11071  00205C  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11072  00205E  22DA               	addwfc	fsr2h,f,c
 11073  002060  0EFF               	movlw	255
 11074  002062  6EDF               	movwf	indf2,c
 11075                           
 11076                           ; BSR set to: 0
 11077                           ;tff.c: 912: fp->fs = dj.fs; fp->id = dj.fs->id;
 11078  002064  EE20 F004          	lfsr	2,4
 11079  002068  51D7               	movf	f_open@fp& (0+255),w,b
 11080  00206A  26D9               	addwf	fsr2l,f,c
 11081  00206C  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11082  00206E  22DA               	addwfc	fsr2h,f,c
 11083  002070  C1F4  FFDE         	movff	f_open@dj+4,postinc2
 11084  002074  C1F5  FFDD         	movff	f_open@dj+5,postdec2
 11085                           
 11086                           ; BSR set to: 0
 11087  002078  C1F4  FFD9         	movff	f_open@dj+4,fsr2l
 11088  00207C  C1F5  FFDA         	movff	f_open@dj+5,fsr2h
 11089  002080  C0D7  FFE1         	movff	f_open@fp,fsr1l
 11090  002084  C0D8  FFE2         	movff	f_open@fp+1,fsr1h
 11091  002088  CFDE FFE6          	movff	postinc2,postinc1
 11092  00208C  CFDD FFE5          	movff	postdec2,postdec1
 11093                           
 11094                           ; BSR set to: 0
 11095                           ;tff.c: 914: return FR_OK;
 11096  002090  0E00               	movlw	0
 11097  002092  0012               	return	
 11098  002094                     __end_of_f_open:
 11099                           	opt stack 0
 11100                           tosu	equ	0xFFF
 11101                           tosh	equ	0xFFE
 11102                           tosl	equ	0xFFD
 11103                           pclath	equ	0xFFA
 11104                           tblptru	equ	0xFF8
 11105                           tblptrh	equ	0xFF7
 11106                           tblptrl	equ	0xFF6
 11107                           tablat	equ	0xFF5
 11108                           prodh	equ	0xFF4
 11109                           prodl	equ	0xFF3
 11110                           intcon	equ	0xFF2
 11111                           intcon2	equ	0xFF1
 11112                           intcon3	equ	0xFF0
 11113                           indf0	equ	0xFEF
 11114                           postinc0	equ	0xFEE
 11115                           fsr0h	equ	0xFEA
 11116                           fsr0l	equ	0xFE9
 11117                           wreg	equ	0xFE8
 11118                           indf1	equ	0xFE7
 11119                           postinc1	equ	0xFE6
 11120                           postdec1	equ	0xFE5
 11121                           plusw1	equ	0xFE3
 11122                           fsr1h	equ	0xFE2
 11123                           fsr1l	equ	0xFE1
 11124                           indf2	equ	0xFDF
 11125                           postinc2	equ	0xFDE
 11126                           postdec2	equ	0xFDD
 11127                           plusw2	equ	0xFDB
 11128                           fsr2h	equ	0xFDA
 11129                           fsr2l	equ	0xFD9
 11130                           status	equ	0xFD8
 11131                           
 11132 ;; *************** function _trace_path *****************
 11133 ;; Defined at:
 11134 ;;		line 501 in file "bibliotecas/tff.c"
 11135 ;; Parameters:    Size  Location     Type
 11136 ;;  dj              2   96[BANK0 ] PTR struct _DIR_E
 11137 ;;		 -> f_open@dj(14), 
 11138 ;;  fn              2   98[BANK0 ] PTR unsigned char 
 11139 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 11140 ;;  path            2  100[BANK0 ] PTR const unsigned char 
 11141 ;;		 -> STR_25(13), filename(15), 
 11142 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
 11143 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
 11144 ;; Auto vars:     Size  Location     Type
 11145 ;;  dptr            2  117[BANK0 ] PTR unsigned char 
 11146 ;;		 -> fs.win(512), NULL(0), fs(544), 
 11147 ;;  clust           2  114[BANK0 ] unsigned short 
 11148 ;;  fs              2  112[BANK0 ] PTR struct _FATFS
 11149 ;;		 -> NULL(0), fs(544), 
 11150 ;;  ds              1  116[BANK0 ] unsigned char 
 11151 ;; Return value:  Size  Location     Type
 11152 ;;                  1    wreg      enum E155
 11153 ;; Registers used:
 11154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11155 ;; Tracked objects:
 11156 ;;		On entry : 0/0
 11157 ;;		On exit  : 0/0
 11158 ;;		Unchanged: 0/0
 11159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11160 ;;      Params:         0       8       0       0       0       0       0       0       0
 11161 ;;      Locals:         0      11       0       0       0       0       0       0       0
 11162 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11163 ;;      Totals:         0      23       0       0       0       0       0       0       0
 11164 ;;Total ram usage:       23 bytes
 11165 ;; Hardware stack levels used:    1
 11166 ;; Hardware stack levels required when called:   11
 11167 ;; This function calls:
 11168 ;;		_clust2sect
 11169 ;;		_make_dirfile
 11170 ;;		_memcmp
 11171 ;;		_move_window
 11172 ;;		_next_dir_entry
 11173 ;; This function is called by:
 11174 ;;		_f_open
 11175 ;;		_f_opendir
 11176 ;; This function uses a non-reentrant model
 11177 ;;
 11178                           
 11179                           	psect	text37
 11180  0026A4                     __ptext37:
 11181                           	opt stack 0
 11182  0026A4                     _trace_path:
 11183                           	opt stack 15
 11184                           
 11185                           ;tff.c: 508: CLUST clust;
 11186                           ;tff.c: 509: char ds;
 11187                           ;tff.c: 510: BYTE *dptr = (0);
 11188                           
 11189                           ;incstack = 0
 11190  0026A4  0E00               	movlw	0
 11191  0026A6  0100               	movlb	0	; () banked
 11192  0026A8  6FD5               	movwf	trace_path@dptr& (0+255),b
 11193  0026AA  0E00               	movlw	0
 11194  0026AC  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
 11195                           
 11196                           ;tff.c: 511: FATFS *fs = FatFs;
 11197  0026AE  C0F7  F0D0         	movff	_FatFs,trace_path@fs
 11198  0026B2  C0F8  F0D1         	movff	_FatFs+1,trace_path@fs+1
 11199                           
 11200                           ; BSR set to: 0
 11201                           ;tff.c: 514: dj->fs = fs;
 11202  0026B6  EE20 F004          	lfsr	2,4
 11203  0026BA  51C0               	movf	trace_path@dj& (0+255),w,b
 11204  0026BC  26D9               	addwf	fsr2l,f,c
 11205  0026BE  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11206  0026C0  22DA               	addwfc	fsr2h,f,c
 11207  0026C2  C0D0  FFDE         	movff	trace_path@fs,postinc2
 11208  0026C6  C0D1  FFDD         	movff	trace_path@fs+1,postdec2
 11209                           
 11210                           ; BSR set to: 0
 11211                           ;tff.c: 515: clust = fs->dirbase;
 11212  0026CA  EE20 F00C          	lfsr	2,12
 11213  0026CE  51D0               	movf	trace_path@fs& (0+255),w,b
 11214  0026D0  26D9               	addwf	fsr2l,f,c
 11215  0026D2  51D1               	movf	(trace_path@fs+1)& (0+255),w,b
 11216  0026D4  22DA               	addwfc	fsr2h,f,c
 11217  0026D6  CFDE F0D2          	movff	postinc2,trace_path@clust
 11218  0026DA  CFDD F0D3          	movff	postdec2,trace_path@clust+1
 11219                           
 11220                           ; BSR set to: 0
 11221                           ;tff.c: 522: {
 11222                           ;tff.c: 523: dj->clust = dj->sclust = 0;
 11223  0026DE  EE20 F006          	lfsr	2,6
 11224  0026E2  51C0               	movf	trace_path@dj& (0+255),w,b
 11225  0026E4  26D9               	addwf	fsr2l,f,c
 11226  0026E6  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11227  0026E8  22DA               	addwfc	fsr2h,f,c
 11228  0026EA  0E00               	movlw	0
 11229  0026EC  6EDE               	movwf	postinc2,c
 11230  0026EE  0E00               	movlw	0
 11231  0026F0  6EDD               	movwf	postdec2,c
 11232  0026F2  EE10 F008          	lfsr	1,8
 11233  0026F6  51C0               	movf	trace_path@dj& (0+255),w,b
 11234  0026F8  26E1               	addwf	fsr1l,f,c
 11235  0026FA  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11236  0026FC  22E2               	addwfc	fsr1h,f,c
 11237  0026FE  CFDE FFE6          	movff	postinc2,postinc1
 11238  002702  CFDD FFE5          	movff	postdec2,postdec1
 11239                           
 11240                           ; BSR set to: 0
 11241                           ;tff.c: 524: dj->sect = clust;
 11242  002706  51D2               	movf	trace_path@clust& (0+255),w,b
 11243  002708  6FC8               	movwf	??_trace_path& (0+255),b
 11244  00270A  51D3               	movf	(trace_path@clust+1)& (0+255),w,b
 11245  00270C  6FC9               	movwf	(??_trace_path+1)& (0+255),b
 11246  00270E  6BCA               	clrf	(??_trace_path+2)& (0+255),b
 11247  002710  6BCB               	clrf	(??_trace_path+3)& (0+255),b
 11248  002712  EE20 F00A          	lfsr	2,10
 11249  002716  51C0               	movf	trace_path@dj& (0+255),w,b
 11250  002718  26D9               	addwf	fsr2l,f,c
 11251  00271A  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11252  00271C  22DA               	addwfc	fsr2h,f,c
 11253  00271E  C0C8  FFDE         	movff	??_trace_path,postinc2
 11254  002722  C0C9  FFDE         	movff	??_trace_path+1,postinc2
 11255  002726  C0CA  FFDE         	movff	??_trace_path+2,postinc2
 11256  00272A  C0CB  FFDE         	movff	??_trace_path+3,postinc2
 11257                           
 11258                           ; BSR set to: 0
 11259                           ;tff.c: 525: }
 11260                           ;tff.c: 526: dj->index = 0;
 11261  00272E  EE20 F002          	lfsr	2,2
 11262  002732  51C0               	movf	trace_path@dj& (0+255),w,b
 11263  002734  26D9               	addwf	fsr2l,f,c
 11264  002736  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11265  002738  22DA               	addwfc	fsr2h,f,c
 11266  00273A  0E00               	movlw	0
 11267  00273C  6EDE               	movwf	postinc2,c
 11268  00273E  0E00               	movlw	0
 11269  002740  6EDD               	movwf	postdec2,c
 11270                           
 11271                           ; BSR set to: 0
 11272                           ;tff.c: 528: if (*path == '\0') {
 11273  002742  C0C4  FFF6         	movff	trace_path@path,tblptrl
 11274  002746  C0C5  FFF7         	movff	trace_path@path+1,tblptrh
 11275  00274A  6AF8               	clrf	tblptru,c
 11276  00274C  0E07               	movlw	(high __ramtop+-1)
 11277  00274E  64F7               	cpfsgt	tblptrh,c
 11278  002750  D003               	bra	u14527
 11279  002752  0008               	tblrd		*
 11280  002754  50F5               	movf	tablat,w,c
 11281  002756  D005               	bra	u14520
 11282  002758                     u14527:
 11283  002758  CFF6 FFE9          	movff	tblptrl,fsr0l
 11284  00275C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11285  002760  50EF               	movf	indf0,w,c
 11286  002762                     u14520:
 11287  002762  0900               	iorlw	0
 11288  002764  A4D8               	btfss	status,2,c
 11289  002766  D00A               	goto	l1191
 11290                           
 11291                           ;tff.c: 529: *dir = (0); return FR_OK;
 11292  002768  C0C6  FFD9         	movff	trace_path@dir,fsr2l
 11293  00276C  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
 11294  002770  0E00               	movlw	0
 11295  002772  6EDE               	movwf	postinc2,c
 11296  002774  0E00               	movlw	0
 11297  002776  6EDD               	movwf	postdec2,c
 11298  002778  0E00               	movlw	0
 11299  00277A  0012               	return	
 11300  00277C                     l1191:
 11301                           
 11302                           ;tff.c: 533: ds = make_dirfile(&path, fn);
 11303                           
 11304                           ;tff.c: 530: }
 11305                           ;tff.c: 532: for (;;) {
 11306  00277C  0EC4               	movlw	low trace_path@path
 11307  00277E  0100               	movlb	0	; () banked
 11308  002780  6F68               	movwf	make_dirfile@path& (0+255),b
 11309  002782  0E00               	movlw	high trace_path@path
 11310  002784  6F69               	movwf	(make_dirfile@path+1)& (0+255),b
 11311  002786  C0C2  F06A         	movff	trace_path@fn,make_dirfile@dirname
 11312  00278A  C0C3  F06B         	movff	trace_path@fn+1,make_dirfile@dirname+1
 11313  00278E  ECD7  F01C         	call	_make_dirfile	;wreg free
 11314  002792  0100               	movlb	0	; () banked
 11315  002794  6FD4               	movwf	trace_path@ds& (0+255),b
 11316                           
 11317                           ; BSR set to: 0
 11318                           ;tff.c: 534: if (ds == 1) return FR_INVALID_NAME;
 11319  002796  05D4               	decf	trace_path@ds& (0+255),w,b
 11320  002798  A4D8               	btfss	status,2,c
 11321  00279A  D002               	goto	l1194
 11322                           
 11323                           ; BSR set to: 0
 11324  00279C  0E04               	movlw	4
 11325                           
 11326                           ; BSR set to: 0
 11327  00279E  0012               	return	
 11328  0027A0                     l1194:
 11329                           
 11330                           ;tff.c: 536: if (!move_window(dj->sect)) return FR_RW_ERROR;
 11331                           
 11332                           ; BSR set to: 0
 11333                           
 11334                           ;tff.c: 535: for (;;) {
 11335                           
 11336                           ; BSR set to: 0
 11337  0027A0  0100               	movlb	0	; () banked
 11338  0027A2  EE20 F00A          	lfsr	2,10
 11339  0027A6  51C0               	movf	trace_path@dj& (0+255),w,b
 11340  0027A8  26D9               	addwf	fsr2l,f,c
 11341  0027AA  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11342  0027AC  22DA               	addwfc	fsr2h,f,c
 11343  0027AE  CFDE F08B          	movff	postinc2,move_window@sector
 11344  0027B2  CFDE F08C          	movff	postinc2,move_window@sector+1
 11345  0027B6  CFDE F08D          	movff	postinc2,move_window@sector+2
 11346  0027BA  CFDE F08E          	movff	postinc2,move_window@sector+3
 11347  0027BE  EC38  F01B         	call	_move_window	;wreg free
 11348  0027C2  0900               	iorlw	0
 11349  0027C4  A4D8               	btfss	status,2,c
 11350  0027C6  D002               	goto	l1196
 11351  0027C8  0E08               	movlw	8
 11352  0027CA  0012               	return	
 11353  0027CC                     l1196:
 11354                           
 11355                           ;tff.c: 537: dptr = &fs->win[(dj->index & 15) * 32];
 11356  0027CC  0100               	movlb	0	; () banked
 11357  0027CE  EE20 F002          	lfsr	2,2
 11358  0027D2  51C0               	movf	trace_path@dj& (0+255),w,b
 11359  0027D4  26D9               	addwf	fsr2l,f,c
 11360  0027D6  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11361  0027D8  22DA               	addwfc	fsr2h,f,c
 11362  0027DA  CFDE F0C8          	movff	postinc2,??_trace_path
 11363  0027DE  CFDD F0C9          	movff	postdec2,??_trace_path+1
 11364  0027E2  0E0F               	movlw	15
 11365  0027E4  17C8               	andwf	??_trace_path& (0+255),f,b
 11366  0027E6  0E00               	movlw	0
 11367  0027E8  17C9               	andwf	(??_trace_path+1)& (0+255),f,b
 11368  0027EA  0E05               	movlw	5
 11369  0027EC                     u14565:
 11370  0027EC  90D8               	bcf	status,0,c
 11371  0027EE  37C8               	rlcf	??_trace_path& (0+255),f,b
 11372  0027F0  37C9               	rlcf	(??_trace_path+1)& (0+255),f,b
 11373  0027F2  2EE8               	decfsz	wreg,f,c
 11374  0027F4  D7FB               	goto	u14565
 11375  0027F6  0E20               	movlw	32
 11376  0027F8  27C8               	addwf	??_trace_path& (0+255),f,b
 11377  0027FA  0E00               	movlw	0
 11378  0027FC  23C9               	addwfc	(??_trace_path+1)& (0+255),f,b
 11379  0027FE  51C8               	movf	??_trace_path& (0+255),w,b
 11380  002800  25D0               	addwf	trace_path@fs& (0+255),w,b
 11381  002802  6FD5               	movwf	trace_path@dptr& (0+255),b
 11382  002804  51C9               	movf	(??_trace_path+1)& (0+255),w,b
 11383  002806  21D1               	addwfc	(trace_path@fs+1)& (0+255),w,b
 11384  002808  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
 11385                           
 11386                           ; BSR set to: 0
 11387                           ;tff.c: 538: if (dptr[0] == 0)
 11388  00280A  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
 11389  00280E  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
 11390  002812  50DF               	movf	indf2,w,c
 11391  002814  A4D8               	btfss	status,2,c
 11392  002816  D00D               	goto	l1197
 11393                           
 11394                           ; BSR set to: 0
 11395                           ;tff.c: 539: return !ds ? FR_NO_FILE : FR_NO_PATH;
 11396  002818  51D4               	movf	trace_path@ds& (0+255),w,b
 11397  00281A  B4D8               	btfsc	status,2,c
 11398  00281C  D004               	goto	l1199
 11399                           
 11400                           ; BSR set to: 0
 11401  00281E  0E00               	movlw	0
 11402  002820  6FCD               	movwf	(_trace_path$2164+1)& (0+255),b
 11403  002822  0E03               	movlw	3
 11404  002824  D003               	goto	L6
 11405  002826                     l1199:
 11406                           
 11407                           ; BSR set to: 0
 11408                           
 11409                           ; BSR set to: 0
 11410  002826  0E00               	movlw	0
 11411  002828  6FCD               	movwf	(_trace_path$2164+1)& (0+255),b
 11412  00282A  0E02               	movlw	2
 11413  00282C                     L6:
 11414  00282C  6FCC               	movwf	_trace_path$2164& (0+255),b
 11415                           
 11416                           ; BSR set to: 0
 11417  00282E  51CC               	movf	_trace_path$2164& (0+255),w,b
 11418                           
 11419                           ; BSR set to: 0
 11420  002830  0012               	return	
 11421  002832                     l1197:
 11422                           
 11423                           ; BSR set to: 0
 11424                           ;tff.c: 540: if (dptr[0] != 0xE5
 11425                           ;tff.c: 541: && !(dptr[11] & 0x08)
 11426                           ;tff.c: 542: && !memcmp(&dptr[0], fn, 8+3) ) break;
 11427                           
 11428                           ; BSR set to: 0
 11429  002832  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
 11430  002836  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
 11431  00283A  0EE5               	movlw	229
 11432  00283C  18DE               	xorwf	postinc2,w,c
 11433  00283E  B4D8               	btfsc	status,2,c
 11434  002840  D01B               	goto	l1202
 11435                           
 11436                           ; BSR set to: 0
 11437  002842  EE20 F00B          	lfsr	2,11
 11438  002846  51D5               	movf	trace_path@dptr& (0+255),w,b
 11439  002848  26D9               	addwf	fsr2l,f,c
 11440  00284A  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
 11441  00284C  22DA               	addwfc	fsr2h,f,c
 11442  00284E  B6DF               	btfsc	indf2,3,c
 11443  002850  D013               	goto	l1202
 11444                           
 11445                           ; BSR set to: 0
 11446  002852  C0D5  F060         	movff	trace_path@dptr,memcmp@s1
 11447  002856  C0D6  F061         	movff	trace_path@dptr+1,memcmp@s1+1
 11448  00285A  C0C2  F062         	movff	trace_path@fn,memcmp@s2
 11449  00285E  C0C3  F063         	movff	trace_path@fn+1,memcmp@s2+1
 11450  002862  0E00               	movlw	0
 11451  002864  6F65               	movwf	(memcmp@n+1)& (0+255),b
 11452  002866  0E0B               	movlw	11
 11453  002868  6F64               	movwf	memcmp@n& (0+255),b
 11454  00286A  ECED  F023         	call	_memcmp	;wreg free
 11455  00286E  0100               	movlb	0	; () banked
 11456  002870  5160               	movf	?_memcmp& (0+255),w,b
 11457  002872  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 11458  002874  B4D8               	btfsc	status,2,c
 11459  002876  D017               	goto	l1203
 11460  002878                     l1202:
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;tff.c: 543: if (!next_dir_entry(dj))
 11464                           
 11465                           ; BSR set to: 0
 11466  002878  C0C0  F0B3         	movff	trace_path@dj,next_dir_entry@dj
 11467  00287C  C0C1  F0B4         	movff	trace_path@dj+1,next_dir_entry@dj+1
 11468  002880  EC13  F01C         	call	_next_dir_entry	;wreg free
 11469  002884  0900               	iorlw	0
 11470  002886  A4D8               	btfss	status,2,c
 11471  002888  D78B               	goto	l1194
 11472                           
 11473                           ;tff.c: 544: return !ds ? FR_NO_FILE : FR_NO_PATH;
 11474  00288A  0100               	movlb	0	; () banked
 11475  00288C  51D4               	movf	trace_path@ds& (0+255),w,b
 11476  00288E  B4D8               	btfsc	status,2,c
 11477  002890  D004               	goto	l1206
 11478                           
 11479                           ; BSR set to: 0
 11480  002892  0E00               	movlw	0
 11481  002894  6FCF               	movwf	(_trace_path$2166+1)& (0+255),b
 11482  002896  0E03               	movlw	3
 11483  002898  D003               	goto	L7
 11484  00289A                     l1206:
 11485                           
 11486                           ; BSR set to: 0
 11487                           
 11488                           ; BSR set to: 0
 11489  00289A  0E00               	movlw	0
 11490  00289C  6FCF               	movwf	(_trace_path$2166+1)& (0+255),b
 11491  00289E  0E02               	movlw	2
 11492  0028A0                     L7:
 11493  0028A0  6FCE               	movwf	_trace_path$2166& (0+255),b
 11494                           
 11495                           ; BSR set to: 0
 11496  0028A2  51CE               	movf	_trace_path$2166& (0+255),w,b
 11497                           
 11498                           ; BSR set to: 0
 11499  0028A4  0012               	return	
 11500  0028A6                     l1203:
 11501                           
 11502                           ; BSR set to: 0
 11503                           ;tff.c: 546: if (!ds) { *dir = dptr; return FR_OK; }
 11504                           
 11505                           ; BSR set to: 0
 11506  0028A6  51D4               	movf	trace_path@ds& (0+255),w,b
 11507  0028A8  A4D8               	btfss	status,2,c
 11508  0028AA  D00A               	goto	l1209
 11509                           
 11510                           ; BSR set to: 0
 11511  0028AC  C0C6  FFD9         	movff	trace_path@dir,fsr2l
 11512  0028B0  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
 11513  0028B4  C0D5  FFDE         	movff	trace_path@dptr,postinc2
 11514  0028B8  C0D6  FFDD         	movff	trace_path@dptr+1,postdec2
 11515                           
 11516                           ; BSR set to: 0
 11517  0028BC  0E00               	movlw	0
 11518                           
 11519                           ; BSR set to: 0
 11520  0028BE  0012               	return	
 11521  0028C0                     l1209:
 11522                           
 11523                           ; BSR set to: 0
 11524                           ;tff.c: 547: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
 11525                           
 11526                           ; BSR set to: 0
 11527  0028C0  EE20 F00B          	lfsr	2,11
 11528  0028C4  51D5               	movf	trace_path@dptr& (0+255),w,b
 11529  0028C6  26D9               	addwf	fsr2l,f,c
 11530  0028C8  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
 11531  0028CA  22DA               	addwfc	fsr2h,f,c
 11532  0028CC  B8DF               	btfsc	indf2,4,c
 11533  0028CE  D002               	goto	l1210
 11534                           
 11535                           ; BSR set to: 0
 11536  0028D0  0E03               	movlw	3
 11537                           
 11538                           ; BSR set to: 0
 11539  0028D2  0012               	return	
 11540  0028D4                     l1210:
 11541                           
 11542                           ; BSR set to: 0
 11543                           ;tff.c: 548: clust =
 11544                           ;tff.c: 552: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
 11545                           
 11546                           ; BSR set to: 0
 11547  0028D4  EE20 F01A          	lfsr	2,26
 11548  0028D8  51D5               	movf	trace_path@dptr& (0+255),w,b
 11549  0028DA  26D9               	addwf	fsr2l,f,c
 11550  0028DC  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
 11551  0028DE  22DA               	addwfc	fsr2h,f,c
 11552  0028E0  CFDE F0D2          	movff	postinc2,trace_path@clust
 11553  0028E4  CFDD F0D3          	movff	postdec2,trace_path@clust+1
 11554                           
 11555                           ; BSR set to: 0
 11556                           ;tff.c: 553: dj->clust = dj->sclust = clust;
 11557  0028E8  EE20 F006          	lfsr	2,6
 11558  0028EC  51C0               	movf	trace_path@dj& (0+255),w,b
 11559  0028EE  26D9               	addwf	fsr2l,f,c
 11560  0028F0  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11561  0028F2  22DA               	addwfc	fsr2h,f,c
 11562  0028F4  C0D2  FFDE         	movff	trace_path@clust,postinc2
 11563  0028F8  C0D3  FFDD         	movff	trace_path@clust+1,postdec2
 11564  0028FC  EE10 F008          	lfsr	1,8
 11565  002900  51C0               	movf	trace_path@dj& (0+255),w,b
 11566  002902  26E1               	addwf	fsr1l,f,c
 11567  002904  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11568  002906  22E2               	addwfc	fsr1h,f,c
 11569  002908  CFDE FFE6          	movff	postinc2,postinc1
 11570  00290C  CFDD FFE5          	movff	postdec2,postdec1
 11571                           
 11572                           ; BSR set to: 0
 11573                           ;tff.c: 554: dj->sect = clust2sect(clust);
 11574  002910  C0D2  F06C         	movff	trace_path@clust,clust2sect@clust
 11575  002914  C0D3  F06D         	movff	trace_path@clust+1,clust2sect@clust+1
 11576  002918  EC46  F022         	call	_clust2sect	;wreg free
 11577  00291C  0100               	movlb	0	; () banked
 11578  00291E  EE20 F00A          	lfsr	2,10
 11579  002922  51C0               	movf	trace_path@dj& (0+255),w,b
 11580  002924  26D9               	addwf	fsr2l,f,c
 11581  002926  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11582  002928  22DA               	addwfc	fsr2h,f,c
 11583  00292A  C06C  FFDE         	movff	?_clust2sect,postinc2
 11584  00292E  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 11585  002932  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 11586  002936  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 11587                           
 11588                           ; BSR set to: 0
 11589                           ;tff.c: 555: dj->index = 2;
 11590  00293A  EE20 F002          	lfsr	2,2
 11591  00293E  51C0               	movf	trace_path@dj& (0+255),w,b
 11592  002940  26D9               	addwf	fsr2l,f,c
 11593  002942  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11594  002944  22DA               	addwfc	fsr2h,f,c
 11595  002946  0E02               	movlw	2
 11596  002948  6EDE               	movwf	postinc2,c
 11597  00294A  0E00               	movlw	0
 11598  00294C  6EDD               	movwf	postdec2,c
 11599                           
 11600                           ;tff.c: 556: }
 11601  00294E  D716               	goto	l1191
 11602  002950                     __end_of_trace_path:
 11603                           	opt stack 0
 11604                           tosu	equ	0xFFF
 11605                           tosh	equ	0xFFE
 11606                           tosl	equ	0xFFD
 11607                           pclath	equ	0xFFA
 11608                           tblptru	equ	0xFF8
 11609                           tblptrh	equ	0xFF7
 11610                           tblptrl	equ	0xFF6
 11611                           tablat	equ	0xFF5
 11612                           prodh	equ	0xFF4
 11613                           prodl	equ	0xFF3
 11614                           intcon	equ	0xFF2
 11615                           intcon2	equ	0xFF1
 11616                           intcon3	equ	0xFF0
 11617                           indf0	equ	0xFEF
 11618                           postinc0	equ	0xFEE
 11619                           fsr0h	equ	0xFEA
 11620                           fsr0l	equ	0xFE9
 11621                           wreg	equ	0xFE8
 11622                           indf1	equ	0xFE7
 11623                           postinc1	equ	0xFE6
 11624                           postdec1	equ	0xFE5
 11625                           plusw1	equ	0xFE3
 11626                           fsr1h	equ	0xFE2
 11627                           fsr1l	equ	0xFE1
 11628                           indf2	equ	0xFDF
 11629                           postinc2	equ	0xFDE
 11630                           postdec2	equ	0xFDD
 11631                           plusw2	equ	0xFDB
 11632                           fsr2h	equ	0xFDA
 11633                           fsr2l	equ	0xFD9
 11634                           status	equ	0xFD8
 11635                           
 11636 ;; *************** function _make_dirfile *****************
 11637 ;; Defined at:
 11638 ;;		line 438 in file "bibliotecas/tff.c"
 11639 ;; Parameters:    Size  Location     Type
 11640 ;;  path            2    8[BANK0 ] PTR PTR const unsigned c
 11641 ;;		 -> trace_path@path(2), 
 11642 ;;  dirname         2   10[BANK0 ] PTR unsigned char 
 11643 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 11644 ;; Auto vars:     Size  Location     Type
 11645 ;;  c               1   20[BANK0 ] unsigned char 
 11646 ;;  n               1   19[BANK0 ] unsigned char 
 11647 ;;  a               1   18[BANK0 ] unsigned char 
 11648 ;;  t               1   17[BANK0 ] unsigned char 
 11649 ;;  b               1   16[BANK0 ] unsigned char 
 11650 ;; Return value:  Size  Location     Type
 11651 ;;                  1    wreg      unsigned char 
 11652 ;; Registers used:
 11653 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11654 ;; Tracked objects:
 11655 ;;		On entry : 0/0
 11656 ;;		On exit  : 0/0
 11657 ;;		Unchanged: 0/0
 11658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11659 ;;      Params:         0       4       0       0       0       0       0       0       0
 11660 ;;      Locals:         0       7       0       0       0       0       0       0       0
 11661 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11662 ;;      Totals:         0      13       0       0       0       0       0       0       0
 11663 ;;Total ram usage:       13 bytes
 11664 ;; Hardware stack levels used:    1
 11665 ;; Hardware stack levels required when called:    4
 11666 ;; This function calls:
 11667 ;;		_memset
 11668 ;; This function is called by:
 11669 ;;		_trace_path
 11670 ;; This function uses a non-reentrant model
 11671 ;;
 11672                           
 11673                           	psect	text38
 11674  0039AE                     __ptext38:
 11675                           	opt stack 0
 11676  0039AE                     _make_dirfile:
 11677                           	opt stack 21
 11678                           
 11679                           ;tff.c: 443: BYTE n, t, c, a, b;
 11680                           ;tff.c: 446: memset(dirname, ' ', 8+3);
 11681                           
 11682                           ;incstack = 0
 11683  0039AE  C06A  F060         	movff	make_dirfile@dirname,memset@p1
 11684  0039B2  C06B  F061         	movff	make_dirfile@dirname+1,memset@p1+1
 11685  0039B6  0E00               	movlw	0
 11686  0039B8  0100               	movlb	0	; () banked
 11687  0039BA  6F63               	movwf	(memset@c+1)& (0+255),b
 11688  0039BC  0E20               	movlw	32
 11689  0039BE  6F62               	movwf	memset@c& (0+255),b
 11690  0039C0  0E00               	movlw	0
 11691  0039C2  6F65               	movwf	(memset@n+1)& (0+255),b
 11692  0039C4  0E0B               	movlw	11
 11693  0039C6  6F64               	movwf	memset@n& (0+255),b
 11694  0039C8  EC06  F02B         	call	_memset	;wreg free
 11695                           
 11696                           ;tff.c: 447: a = 0; b = 0x18;
 11697  0039CC  0E00               	movlw	0
 11698  0039CE  0100               	movlb	0	; () banked
 11699  0039D0  6F72               	movwf	make_dirfile@a& (0+255),b
 11700                           
 11701                           ; BSR set to: 0
 11702  0039D2  0E18               	movlw	24
 11703  0039D4  6F70               	movwf	make_dirfile@b& (0+255),b
 11704                           
 11705                           ; BSR set to: 0
 11706                           ;tff.c: 448: n = 0; t = 8;
 11707  0039D6  0E00               	movlw	0
 11708  0039D8  6F73               	movwf	make_dirfile@n& (0+255),b
 11709                           
 11710                           ; BSR set to: 0
 11711  0039DA  0E08               	movlw	8
 11712  0039DC  6F71               	movwf	make_dirfile@t& (0+255),b
 11713  0039DE                     
 11714                           ; BSR set to: 0
 11715                           ;tff.c: 450: c = *(*path)++;
 11716                           
 11717                           ; BSR set to: 0
 11718  0039DE  C068  FFD9         	movff	make_dirfile@path,fsr2l
 11719  0039E2  C069  FFDA         	movff	make_dirfile@path+1,fsr2h
 11720  0039E6  CFDF F06C          	movff	indf2,??_make_dirfile
 11721  0039EA  0E01               	movlw	1
 11722  0039EC  26DE               	addwf	postinc2,f,c
 11723  0039EE  CFDF F06D          	movff	indf2,??_make_dirfile+1
 11724  0039F2  0E00               	movlw	0
 11725  0039F4  22DD               	addwfc	postdec2,f,c
 11726  0039F6  C06C  FFF6         	movff	??_make_dirfile,tblptrl
 11727  0039FA  C06D  FFF7         	movff	??_make_dirfile+1,tblptrh
 11728  0039FE  6AF8               	clrf	tblptru,c
 11729  003A00  0E07               	movlw	(high __ramtop+-1)
 11730  003A02  64F7               	cpfsgt	tblptrh,c
 11731  003A04  D003               	bra	u13857
 11732  003A06  0008               	tblrd		*
 11733  003A08  50F5               	movf	tablat,w,c
 11734  003A0A  D005               	bra	u13850
 11735  003A0C                     u13857:
 11736  003A0C  CFF6 FFE9          	movff	tblptrl,fsr0l
 11737  003A10  CFF7 FFEA          	movff	tblptrh,fsr0h
 11738  003A14  50EF               	movf	indf0,w,c
 11739  003A16                     u13850:
 11740  003A16  0100               	movlb	0	; () banked
 11741  003A18  6F74               	movwf	make_dirfile@c& (0+255),b
 11742                           
 11743                           ; BSR set to: 0
 11744                           ;tff.c: 451: if (c == '\0' || c == '/') {
 11745  003A1A  5174               	movf	make_dirfile@c& (0+255),w,b
 11746  003A1C  B4D8               	btfsc	status,2,c
 11747  003A1E  D004               	goto	u13870
 11748                           
 11749                           ; BSR set to: 0
 11750  003A20  0E2F               	movlw	47
 11751  003A22  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11752  003A24  A4D8               	btfss	status,2,c
 11753  003A26  D013               	goto	l1145
 11754  003A28                     u13870:
 11755                           
 11756                           ; BSR set to: 0
 11757                           ;tff.c: 452: if (n == 0) break;
 11758                           
 11759                           ; BSR set to: 0
 11760  003A28  5173               	movf	make_dirfile@n& (0+255),w,b
 11761  003A2A  B4D8               	btfsc	status,2,c
 11762  003A2C  D075               	goto	l1149
 11763                           
 11764                           ; BSR set to: 0
 11765                           
 11766                           ; BSR set to: 0
 11767                           
 11768                           ; BSR set to: 0
 11769                           
 11770                           ; BSR set to: 0
 11771                           ;tff.c: 453: dirname[11] = 1 ? (a & b) : 0;
 11772                           
 11773                           ; BSR set to: 0
 11774  003A2E  5172               	movf	make_dirfile@a& (0+255),w,b
 11775  003A30  1570               	andwf	make_dirfile@b& (0+255),w,b
 11776  003A32  6F6C               	movwf	??_make_dirfile& (0+255),b
 11777  003A34  516C               	movf	??_make_dirfile& (0+255),w,b
 11778  003A36  6F6E               	movwf	_make_dirfile$2117& (0+255),b
 11779  003A38  6B6F               	clrf	(_make_dirfile$2117+1)& (0+255),b
 11780                           
 11781                           ; BSR set to: 0
 11782                           
 11783                           ; BSR set to: 0
 11784  003A3A  EE20 F00B          	lfsr	2,11
 11785  003A3E  516A               	movf	make_dirfile@dirname& (0+255),w,b
 11786  003A40  26D9               	addwf	fsr2l,f,c
 11787  003A42  516B               	movf	(make_dirfile@dirname+1)& (0+255),w,b
 11788  003A44  22DA               	addwfc	fsr2h,f,c
 11789  003A46  C06E  FFDF         	movff	_make_dirfile$2117,indf2
 11790                           
 11791                           ; BSR set to: 0
 11792                           ;tff.c: 454: return c;
 11793  003A4A  5174               	movf	make_dirfile@c& (0+255),w,b
 11794                           
 11795                           ; BSR set to: 0
 11796  003A4C  0012               	return	
 11797  003A4E                     l1145:
 11798                           
 11799                           ; BSR set to: 0
 11800                           ;tff.c: 455: }
 11801                           ;tff.c: 456: if (c <= ' ' || c == 0x7F) break;
 11802                           
 11803                           ; BSR set to: 0
 11804  003A4E  0E20               	movlw	32
 11805  003A50  6574               	cpfsgt	make_dirfile@c& (0+255),b
 11806  003A52  D062               	goto	l1149
 11807                           
 11808                           ; BSR set to: 0
 11809  003A54  0E7F               	movlw	127
 11810  003A56  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11811  003A58  B4D8               	btfsc	status,2,c
 11812  003A5A  D05E               	goto	l1149
 11813                           
 11814                           ; BSR set to: 0
 11815                           ;tff.c: 457: if (c == '.') {
 11816                           
 11817                           ; BSR set to: 0
 11818                           
 11819                           ; BSR set to: 0
 11820  003A5C  0E2E               	movlw	46
 11821  003A5E  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11822  003A60  A4D8               	btfss	status,2,c
 11823  003A62  D00C               	goto	l1161
 11824                           
 11825                           ; BSR set to: 0
 11826                           ;tff.c: 458: if (!(a & 1) && n >= 1 && n <= 8) {
 11827  003A64  B172               	btfsc	make_dirfile@a& (0+255),0,b
 11828  003A66  D058               	goto	l1149
 11829                           
 11830                           ; BSR set to: 0
 11831  003A68  5173               	movf	make_dirfile@n& (0+255),w,b
 11832  003A6A  B4D8               	btfsc	status,2,c
 11833  003A6C  D055               	goto	l1149
 11834                           
 11835                           ; BSR set to: 0
 11836  003A6E  0E09               	movlw	9
 11837  003A70  6173               	cpfslt	make_dirfile@n& (0+255),b
 11838  003A72  D052               	goto	l1149
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;tff.c: 459: n = 8; t = 11; continue;
 11842  003A74  0E08               	movlw	8
 11843  003A76  6F73               	movwf	make_dirfile@n& (0+255),b
 11844  003A78  0E0B               	movlw	11
 11845  003A7A  D7B0               	goto	L8
 11846  003A7C                     l1161:
 11847                           
 11848                           ; BSR set to: 0
 11849                           ;tff.c: 469: }
 11850                           ;tff.c: 470: if (c == '"') break;
 11851                           
 11852                           ; BSR set to: 0
 11853  003A7C  0E22               	movlw	34
 11854  003A7E  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11855  003A80  B4D8               	btfsc	status,2,c
 11856  003A82  D04A               	goto	l1149
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;tff.c: 471: if (c <= ')') goto md_l1;
 11860                           
 11861                           ; BSR set to: 0
 11862                           
 11863                           ; BSR set to: 0
 11864  003A84  0E2A               	movlw	42
 11865  003A86  6174               	cpfslt	make_dirfile@c& (0+255),b
 11866  003A88  D001               	goto	l1169
 11867  003A8A  D035               	goto	l1187
 11868  003A8C                     l1169:
 11869                           
 11870                           ; BSR set to: 0
 11871                           ;tff.c: 472: if (c <= ',') break;
 11872                           
 11873                           ; BSR set to: 0
 11874  003A8C  0E2D               	movlw	45
 11875  003A8E  6174               	cpfslt	make_dirfile@c& (0+255),b
 11876  003A90  D001               	goto	l1171
 11877  003A92  D042               	goto	l1149
 11878  003A94                     l1171:
 11879                           
 11880                           ; BSR set to: 0
 11881                           ;tff.c: 473: if (c <= '9') goto md_l1;
 11882                           
 11883                           ; BSR set to: 0
 11884  003A94  0E3A               	movlw	58
 11885  003A96  6174               	cpfslt	make_dirfile@c& (0+255),b
 11886  003A98  D001               	goto	l1172
 11887  003A9A  D02D               	goto	l1187
 11888  003A9C                     l1172:
 11889                           
 11890                           ; BSR set to: 0
 11891                           ;tff.c: 474: if (c <= '?') break;
 11892                           
 11893                           ; BSR set to: 0
 11894  003A9C  0E40               	movlw	64
 11895  003A9E  6174               	cpfslt	make_dirfile@c& (0+255),b
 11896  003AA0  D001               	goto	l1173
 11897  003AA2  D03A               	goto	l1149
 11898  003AA4                     l1173:
 11899                           
 11900                           ; BSR set to: 0
 11901                           ;tff.c: 475: if (!(a & 1)) {
 11902  003AA4  B172               	btfsc	make_dirfile@a& (0+255),0,b
 11903  003AA6  D027               	goto	l1187
 11904                           
 11905                           ; BSR set to: 0
 11906                           ;tff.c: 476: if (c == '|') break;
 11907  003AA8  0E7C               	movlw	124
 11908  003AAA  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11909  003AAC  B4D8               	btfsc	status,2,c
 11910  003AAE  D034               	goto	l1149
 11911                           
 11912                           ; BSR set to: 0
 11913                           ;tff.c: 477: if (c >= '[' && c <= ']') break;
 11914                           
 11915                           ; BSR set to: 0
 11916                           
 11917                           ; BSR set to: 0
 11918  003AB0  0E5A               	movlw	90
 11919  003AB2  6574               	cpfsgt	make_dirfile@c& (0+255),b
 11920  003AB4  D004               	goto	l1176
 11921                           
 11922                           ; BSR set to: 0
 11923  003AB6  0E5E               	movlw	94
 11924  003AB8  6174               	cpfslt	make_dirfile@c& (0+255),b
 11925  003ABA  D001               	goto	l1176
 11926  003ABC  D02D               	goto	l1149
 11927  003ABE                     l1176:
 11928                           
 11929                           ; BSR set to: 0
 11930                           
 11931                           ; BSR set to: 0
 11932  003ABE  0E40               	movlw	64
 11933  003AC0  6574               	cpfsgt	make_dirfile@c& (0+255),b
 11934  003AC2  D00A               	goto	l1181
 11935                           
 11936                           ; BSR set to: 0
 11937  003AC4  0E5B               	movlw	91
 11938  003AC6  6174               	cpfslt	make_dirfile@c& (0+255),b
 11939  003AC8  D007               	goto	l1181
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;tff.c: 479: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
 11943  003ACA  0E08               	movlw	8
 11944  003ACC  1971               	xorwf	make_dirfile@t& (0+255),w,b
 11945  003ACE  A4D8               	btfss	status,2,c
 11946  003AD0  D002               	goto	l1179
 11947                           
 11948                           ; BSR set to: 0
 11949  003AD2  9770               	bcf	make_dirfile@b& (0+255),3,b
 11950  003AD4  D001               	goto	l1181
 11951  003AD6                     l1179:
 11952                           
 11953                           ; BSR set to: 0
 11954                           
 11955                           ; BSR set to: 0
 11956  003AD6  9970               	bcf	make_dirfile@b& (0+255),4,b
 11957  003AD8                     l1181:
 11958                           
 11959                           ; BSR set to: 0
 11960                           ;tff.c: 480: if (c >= 'a' && c <= 'z') {
 11961                           
 11962                           ; BSR set to: 0
 11963                           
 11964                           ; BSR set to: 0
 11965  003AD8  0E60               	movlw	96
 11966  003ADA  6574               	cpfsgt	make_dirfile@c& (0+255),b
 11967  003ADC  D00C               	goto	l1187
 11968                           
 11969                           ; BSR set to: 0
 11970  003ADE  0E7B               	movlw	123
 11971  003AE0  6174               	cpfslt	make_dirfile@c& (0+255),b
 11972  003AE2  D009               	goto	l1187
 11973                           
 11974                           ; BSR set to: 0
 11975                           ;tff.c: 482: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
 11976  003AE4  0E20               	movlw	32
 11977  003AE6  5F74               	subwf	make_dirfile@c& (0+255),f,b
 11978  003AE8  0E08               	movlw	8
 11979  003AEA  1971               	xorwf	make_dirfile@t& (0+255),w,b
 11980  003AEC  A4D8               	btfss	status,2,c
 11981  003AEE  D002               	goto	l1185
 11982                           
 11983                           ; BSR set to: 0
 11984  003AF0  8772               	bsf	make_dirfile@a& (0+255),3,b
 11985  003AF2  D001               	goto	l1187
 11986  003AF4                     l1185:
 11987                           
 11988                           ; BSR set to: 0
 11989                           
 11990                           ; BSR set to: 0
 11991  003AF4  8972               	bsf	make_dirfile@a& (0+255),4,b
 11992  003AF6                     l1187:
 11993                           
 11994                           ; BSR set to: 0
 11995                           ;tff.c: 486: a &= 0xFE;
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;tff.c: 483: }
 11999                           ;tff.c: 484: }
 12000                           ;tff.c: 485: md_l1:
 12001                           
 12002                           ; BSR set to: 0
 12003                           
 12004                           ; BSR set to: 0
 12005                           
 12006                           ; BSR set to: 0
 12007  003AF6  9172               	bcf	make_dirfile@a& (0+255),0,b
 12008                           
 12009                           ; BSR set to: 0
 12010                           ;tff.c: 488: if (n >= t) break;
 12011                           
 12012                           ; BSR set to: 0
 12013                           
 12014                           ;tff.c: 487: md_l2:
 12015  003AF8  5171               	movf	make_dirfile@t& (0+255),w,b
 12016  003AFA  5D73               	subwf	make_dirfile@n& (0+255),w,b
 12017  003AFC  B0D8               	btfsc	status,0,c
 12018  003AFE  D00C               	goto	l1149
 12019                           
 12020                           ; BSR set to: 0
 12021                           ;tff.c: 489: dirname[n++] = c;
 12022                           
 12023                           ; BSR set to: 0
 12024                           
 12025                           ; BSR set to: 0
 12026  003B00  5173               	movf	make_dirfile@n& (0+255),w,b
 12027  003B02  0D01               	mullw	1
 12028  003B04  50F3               	movf	prodl,w,c
 12029  003B06  256A               	addwf	make_dirfile@dirname& (0+255),w,b
 12030  003B08  6ED9               	movwf	fsr2l,c
 12031  003B0A  50F4               	movf	prodh,w,c
 12032  003B0C  216B               	addwfc	(make_dirfile@dirname+1)& (0+255),w,b
 12033  003B0E  6EDA               	movwf	fsr2h,c
 12034  003B10  C074  FFDF         	movff	make_dirfile@c,indf2
 12035                           
 12036                           ; BSR set to: 0
 12037  003B14  2B73               	incf	make_dirfile@n& (0+255),f,b
 12038                           
 12039                           ; BSR set to: 0
 12040                           ;tff.c: 490: }
 12041  003B16  D763               	goto	l1144
 12042  003B18                     l1149:
 12043                           
 12044                           ; BSR set to: 0
 12045                           ;tff.c: 491: return 1;
 12046                           
 12047                           ; BSR set to: 0
 12048  003B18  0E01               	movlw	1
 12049  003B1A  0012               	return	
 12050  003B1C                     __end_of_make_dirfile:
 12051                           	opt stack 0
 12052                           tosu	equ	0xFFF
 12053                           tosh	equ	0xFFE
 12054                           tosl	equ	0xFFD
 12055                           pclath	equ	0xFFA
 12056                           tblptru	equ	0xFF8
 12057                           tblptrh	equ	0xFF7
 12058                           tblptrl	equ	0xFF6
 12059                           tablat	equ	0xFF5
 12060                           prodh	equ	0xFF4
 12061                           prodl	equ	0xFF3
 12062                           intcon	equ	0xFF2
 12063                           intcon2	equ	0xFF1
 12064                           intcon3	equ	0xFF0
 12065                           indf0	equ	0xFEF
 12066                           postinc0	equ	0xFEE
 12067                           fsr0h	equ	0xFEA
 12068                           fsr0l	equ	0xFE9
 12069                           wreg	equ	0xFE8
 12070                           indf1	equ	0xFE7
 12071                           postinc1	equ	0xFE6
 12072                           postdec1	equ	0xFE5
 12073                           plusw1	equ	0xFE3
 12074                           fsr1h	equ	0xFE2
 12075                           fsr1l	equ	0xFE1
 12076                           indf2	equ	0xFDF
 12077                           postinc2	equ	0xFDE
 12078                           postdec2	equ	0xFDD
 12079                           plusw2	equ	0xFDB
 12080                           fsr2h	equ	0xFDA
 12081                           fsr2l	equ	0xFD9
 12082                           status	equ	0xFD8
 12083                           
 12084 ;; *************** function _reserve_direntry *****************
 12085 ;; Defined at:
 12086 ;;		line 567 in file "bibliotecas/tff.c"
 12087 ;; Parameters:    Size  Location     Type
 12088 ;;  dj              2  100[BANK0 ] PTR struct _DIR_E
 12089 ;;		 -> f_open@dj(14), 
 12090 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
 12091 ;;		 -> f_open@dir(2), 
 12092 ;; Auto vars:     Size  Location     Type
 12093 ;;  sector          4  106[BANK0 ] unsigned long 
 12094 ;;  fs              2  116[BANK0 ] PTR struct _FATFS
 12095 ;;		 -> NULL(0), fs(544), 
 12096 ;;  clust           2  114[BANK0 ] unsigned short 
 12097 ;;  dptr            2  111[BANK0 ] PTR unsigned char 
 12098 ;;		 -> fs.win(512), NULL(0), fs(544), 
 12099 ;;  c               1  113[BANK0 ] unsigned char 
 12100 ;;  n               1  110[BANK0 ] unsigned char 
 12101 ;; Return value:  Size  Location     Type
 12102 ;;                  1    wreg      enum E155
 12103 ;; Registers used:
 12104 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12105 ;; Tracked objects:
 12106 ;;		On entry : 0/0
 12107 ;;		On exit  : 0/0
 12108 ;;		Unchanged: 0/0
 12109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12110 ;;      Params:         0       4       0       0       0       0       0       0       0
 12111 ;;      Locals:         0      12       0       0       0       0       0       0       0
 12112 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12113 ;;      Totals:         0      18       0       0       0       0       0       0       0
 12114 ;;Total ram usage:       18 bytes
 12115 ;; Hardware stack levels used:    1
 12116 ;; Hardware stack levels required when called:   11
 12117 ;; This function calls:
 12118 ;;		_clust2sect
 12119 ;;		_create_chain
 12120 ;;		_disk_write
 12121 ;;		_memset
 12122 ;;		_move_window
 12123 ;;		_next_dir_entry
 12124 ;; This function is called by:
 12125 ;;		_f_open
 12126 ;; This function uses a non-reentrant model
 12127 ;;
 12128                           
 12129                           	psect	text39
 12130  002950                     __ptext39:
 12131                           	opt stack 0
 12132  002950                     _reserve_direntry:
 12133                           	opt stack 15
 12134                           
 12135                           ;tff.c: 572: CLUST clust;
 12136                           ;tff.c: 573: DWORD sector;
 12137                           ;tff.c: 574: BYTE c, n, *dptr;
 12138                           ;tff.c: 575: FATFS *fs = dj->fs;
 12139                           
 12140                           ; BSR set to: 0
 12141                           ;incstack = 0
 12142  002950  0100               	movlb	0	; () banked
 12143  002952  EE20 F004          	lfsr	2,4
 12144  002956  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12145  002958  26D9               	addwf	fsr2l,f,c
 12146  00295A  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12147  00295C  22DA               	addwfc	fsr2h,f,c
 12148  00295E  CFDE F0D4          	movff	postinc2,reserve_direntry@fs
 12149  002962  CFDD F0D5          	movff	postdec2,reserve_direntry@fs+1
 12150                           
 12151                           ;tff.c: 579: clust = dj->sclust;
 12152  002966  EE20 F006          	lfsr	2,6
 12153  00296A  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12154  00296C  26D9               	addwf	fsr2l,f,c
 12155  00296E  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12156  002970  22DA               	addwfc	fsr2h,f,c
 12157  002972  CFDE F0D2          	movff	postinc2,reserve_direntry@clust
 12158  002976  CFDD F0D3          	movff	postdec2,reserve_direntry@clust+1
 12159                           
 12160                           ; BSR set to: 0
 12161                           ;tff.c: 580: if (clust != 0) {
 12162  00297A  51D2               	movf	reserve_direntry@clust& (0+255),w,b
 12163  00297C  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12164  00297E  B4D8               	btfsc	status,2,c
 12165  002980  D020               	goto	l1214
 12166                           
 12167                           ; BSR set to: 0
 12168                           ;tff.c: 581: dj->clust = clust;
 12169  002982  EE20 F008          	lfsr	2,8
 12170  002986  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12171  002988  26D9               	addwf	fsr2l,f,c
 12172  00298A  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12173  00298C  22DA               	addwfc	fsr2h,f,c
 12174  00298E  C0D2  FFDE         	movff	reserve_direntry@clust,postinc2
 12175  002992  C0D3  FFDD         	movff	reserve_direntry@clust+1,postdec2
 12176                           
 12177                           ; BSR set to: 0
 12178                           ;tff.c: 582: dj->sect = clust2sect(clust);
 12179  002996  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
 12180  00299A  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 12181  00299E  EC46  F022         	call	_clust2sect	;wreg free
 12182  0029A2  0100               	movlb	0	; () banked
 12183  0029A4  EE20 F00A          	lfsr	2,10
 12184  0029A8  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12185  0029AA  26D9               	addwf	fsr2l,f,c
 12186  0029AC  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12187  0029AE  22DA               	addwfc	fsr2h,f,c
 12188  0029B0  C06C  FFDE         	movff	?_clust2sect,postinc2
 12189  0029B4  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 12190  0029B8  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 12191  0029BC  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 12192                           
 12193                           ;tff.c: 583: } else {
 12194  0029C0  D014               	goto	l1215
 12195  0029C2                     l1214:
 12196                           
 12197                           ; BSR set to: 0
 12198                           ;tff.c: 584: dj->sect = fs->dirbase;
 12199                           
 12200                           ; BSR set to: 0
 12201  0029C2  EE20 F00C          	lfsr	2,12
 12202  0029C6  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 12203  0029C8  26D9               	addwf	fsr2l,f,c
 12204  0029CA  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12205  0029CC  22DA               	addwfc	fsr2h,f,c
 12206  0029CE  EE10 F00A          	lfsr	1,10
 12207  0029D2  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12208  0029D4  26E1               	addwf	fsr1l,f,c
 12209  0029D6  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12210  0029D8  22E2               	addwfc	fsr1h,f,c
 12211  0029DA  CFDE FFE6          	movff	postinc2,postinc1
 12212  0029DE  CFDE FFE6          	movff	postinc2,postinc1
 12213  0029E2  CFDE FFE6          	movff	postinc2,postinc1
 12214  0029E6  CFDE FFE6          	movff	postinc2,postinc1
 12215  0029EA                     l1215:
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;tff.c: 585: }
 12219                           ;tff.c: 586: dj->index = 0;
 12220                           
 12221                           ; BSR set to: 0
 12222  0029EA  EE20 F002          	lfsr	2,2
 12223  0029EE  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12224  0029F0  26D9               	addwf	fsr2l,f,c
 12225  0029F2  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12226  0029F4  22DA               	addwfc	fsr2h,f,c
 12227  0029F6  0E00               	movlw	0
 12228  0029F8  6EDE               	movwf	postinc2,c
 12229  0029FA  0E00               	movlw	0
 12230  0029FC  6EDD               	movwf	postdec2,c
 12231  0029FE                     
 12232                           ;tff.c: 589: if (!move_window(dj->sect)) return FR_RW_ERROR;
 12233                           
 12234                           ; BSR set to: 0
 12235  0029FE  0100               	movlb	0	; () banked
 12236  002A00  EE20 F00A          	lfsr	2,10
 12237  002A04  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12238  002A06  26D9               	addwf	fsr2l,f,c
 12239  002A08  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12240  002A0A  22DA               	addwfc	fsr2h,f,c
 12241  002A0C  CFDE F08B          	movff	postinc2,move_window@sector
 12242  002A10  CFDE F08C          	movff	postinc2,move_window@sector+1
 12243  002A14  CFDE F08D          	movff	postinc2,move_window@sector+2
 12244  002A18  CFDE F08E          	movff	postinc2,move_window@sector+3
 12245  002A1C  EC38  F01B         	call	_move_window	;wreg free
 12246  002A20  0900               	iorlw	0
 12247  002A22  A4D8               	btfss	status,2,c
 12248  002A24  D002               	goto	l1217
 12249  002A26  0E08               	movlw	8
 12250  002A28  0012               	return	
 12251  002A2A                     l1217:
 12252                           
 12253                           ;tff.c: 590: dptr = &fs->win[(dj->index & 15) * 32];
 12254  002A2A  0100               	movlb	0	; () banked
 12255  002A2C  EE20 F002          	lfsr	2,2
 12256  002A30  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12257  002A32  26D9               	addwf	fsr2l,f,c
 12258  002A34  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12259  002A36  22DA               	addwfc	fsr2h,f,c
 12260  002A38  CFDE F0C8          	movff	postinc2,??_reserve_direntry
 12261  002A3C  CFDD F0C9          	movff	postdec2,??_reserve_direntry+1
 12262  002A40  0E0F               	movlw	15
 12263  002A42  17C8               	andwf	??_reserve_direntry& (0+255),f,b
 12264  002A44  0E00               	movlw	0
 12265  002A46  17C9               	andwf	(??_reserve_direntry+1)& (0+255),f,b
 12266  002A48  0E05               	movlw	5
 12267  002A4A                     u14685:
 12268  002A4A  90D8               	bcf	status,0,c
 12269  002A4C  37C8               	rlcf	??_reserve_direntry& (0+255),f,b
 12270  002A4E  37C9               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
 12271  002A50  2EE8               	decfsz	wreg,f,c
 12272  002A52  D7FB               	goto	u14685
 12273  002A54  0E20               	movlw	32
 12274  002A56  27C8               	addwf	??_reserve_direntry& (0+255),f,b
 12275  002A58  0E00               	movlw	0
 12276  002A5A  23C9               	addwfc	(??_reserve_direntry+1)& (0+255),f,b
 12277  002A5C  51C8               	movf	??_reserve_direntry& (0+255),w,b
 12278  002A5E  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 12279  002A60  6FCF               	movwf	reserve_direntry@dptr& (0+255),b
 12280  002A62  51C9               	movf	(??_reserve_direntry+1)& (0+255),w,b
 12281  002A64  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12282  002A66  6FD0               	movwf	(reserve_direntry@dptr+1)& (0+255),b
 12283                           
 12284                           ; BSR set to: 0
 12285                           ;tff.c: 591: c = dptr[0];
 12286  002A68  C0CF  FFD9         	movff	reserve_direntry@dptr,fsr2l
 12287  002A6C  C0D0  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
 12288  002A70  50DF               	movf	indf2,w,c
 12289  002A72  6FD1               	movwf	reserve_direntry@c& (0+255),b
 12290                           
 12291                           ; BSR set to: 0
 12292                           ;tff.c: 592: if (c == 0 || c == 0xE5) {
 12293  002A74  51D1               	movf	reserve_direntry@c& (0+255),w,b
 12294  002A76  B4D8               	btfsc	status,2,c
 12295  002A78  D004               	goto	u14700
 12296                           
 12297                           ; BSR set to: 0
 12298  002A7A  0EE5               	movlw	229
 12299  002A7C  19D1               	xorwf	reserve_direntry@c& (0+255),w,b
 12300  002A7E  A4D8               	btfss	status,2,c
 12301  002A80  D00A               	goto	l1219
 12302  002A82                     u14700:
 12303                           
 12304                           ; BSR set to: 0
 12305                           ;tff.c: 593: *dir = dptr; return FR_OK;
 12306                           
 12307                           ; BSR set to: 0
 12308  002A82  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
 12309  002A86  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
 12310  002A8A  C0CF  FFDE         	movff	reserve_direntry@dptr,postinc2
 12311  002A8E  C0D0  FFDD         	movff	reserve_direntry@dptr+1,postdec2
 12312                           
 12313                           ; BSR set to: 0
 12314  002A92  0E00               	movlw	0
 12315                           
 12316                           ; BSR set to: 0
 12317  002A94  0012               	return	
 12318  002A96                     l1219:
 12319                           
 12320                           ; BSR set to: 0
 12321                           ;tff.c: 594: }
 12322                           ;tff.c: 595: } while (next_dir_entry(dj));
 12323                           
 12324                           ; BSR set to: 0
 12325  002A96  C0C4  F0B3         	movff	reserve_direntry@dj,next_dir_entry@dj
 12326  002A9A  C0C5  F0B4         	movff	reserve_direntry@dj+1,next_dir_entry@dj+1
 12327  002A9E  EC13  F01C         	call	_next_dir_entry	;wreg free
 12328  002AA2  0900               	iorlw	0
 12329  002AA4  A4D8               	btfss	status,2,c
 12330  002AA6  D7AB               	goto	l1216
 12331                           
 12332                           ;tff.c: 599: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
 12333  002AA8  0100               	movlb	0	; () banked
 12334  002AAA  51D2               	movf	reserve_direntry@clust& (0+255),w,b
 12335  002AAC  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12336  002AAE  B4D8               	btfsc	status,2,c
 12337  002AB0  D015               	goto	u14730
 12338                           
 12339                           ; BSR set to: 0
 12340  002AB2  EE20 F008          	lfsr	2,8
 12341  002AB6  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12342  002AB8  26D9               	addwf	fsr2l,f,c
 12343  002ABA  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12344  002ABC  22DA               	addwfc	fsr2h,f,c
 12345  002ABE  CFDE F0B6          	movff	postinc2,create_chain@clust
 12346  002AC2  CFDD F0B7          	movff	postdec2,create_chain@clust+1
 12347  002AC6  EC58  F01A         	call	_create_chain	;wreg free
 12348  002ACA  C0B6  F0D2         	movff	?_create_chain,reserve_direntry@clust
 12349  002ACE  C0B7  F0D3         	movff	?_create_chain+1,reserve_direntry@clust+1
 12350  002AD2  0100               	movlb	0	; () banked
 12351  002AD4  51D2               	movf	reserve_direntry@clust& (0+255),w,b
 12352  002AD6  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12353  002AD8  A4D8               	btfss	status,2,c
 12354  002ADA  D002               	goto	l1223
 12355  002ADC                     u14730:
 12356                           
 12357                           ; BSR set to: 0
 12358                           
 12359                           ; BSR set to: 0
 12360  002ADC  0E06               	movlw	6
 12361                           
 12362                           ; BSR set to: 0
 12363  002ADE  0012               	return	
 12364  002AE0                     l1223:
 12365                           
 12366                           ; BSR set to: 0
 12367                           ;tff.c: 600: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
 12368                           
 12369                           ; BSR set to: 0
 12370  002AE0  05D2               	decf	reserve_direntry@clust& (0+255),w,b
 12371  002AE2  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12372  002AE4  B4D8               	btfsc	status,2,c
 12373  002AE6  D00D               	goto	u14750
 12374                           
 12375                           ; BSR set to: 0
 12376  002AE8  0E00               	movlw	0
 12377  002AEA  6F8B               	movwf	move_window@sector& (0+255),b
 12378  002AEC  0E00               	movlw	0
 12379  002AEE  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 12380  002AF0  0E00               	movlw	0
 12381  002AF2  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 12382  002AF4  0E00               	movlw	0
 12383  002AF6  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 12384  002AF8  EC38  F01B         	call	_move_window	;wreg free
 12385  002AFC  0900               	iorlw	0
 12386  002AFE  A4D8               	btfss	status,2,c
 12387  002B00  D002               	goto	l1226
 12388  002B02                     u14750:
 12389  002B02  0E08               	movlw	8
 12390  002B04  0012               	return	
 12391  002B06                     l1226:
 12392                           
 12393                           ;tff.c: 602: fs->winsect = sector = clust2sect(clust);
 12394  002B06  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
 12395  002B0A  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 12396  002B0E  EC46  F022         	call	_clust2sect	;wreg free
 12397  002B12  C06C  F0CA         	movff	?_clust2sect,reserve_direntry@sector
 12398  002B16  C06D  F0CB         	movff	?_clust2sect+1,reserve_direntry@sector+1
 12399  002B1A  C06E  F0CC         	movff	?_clust2sect+2,reserve_direntry@sector+2
 12400  002B1E  C06F  F0CD         	movff	?_clust2sect+3,reserve_direntry@sector+3
 12401  002B22  0100               	movlb	0	; () banked
 12402  002B24  EE20 F004          	lfsr	2,4
 12403  002B28  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 12404  002B2A  26D9               	addwf	fsr2l,f,c
 12405  002B2C  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12406  002B2E  22DA               	addwfc	fsr2h,f,c
 12407  002B30  C0CA  FFDE         	movff	reserve_direntry@sector,postinc2
 12408  002B34  C0CB  FFDE         	movff	reserve_direntry@sector+1,postinc2
 12409  002B38  C0CC  FFDE         	movff	reserve_direntry@sector+2,postinc2
 12410  002B3C  C0CD  FFDE         	movff	reserve_direntry@sector+3,postinc2
 12411                           
 12412                           ;tff.c: 603: memset(fs->win, 0, 512U);
 12413  002B40  0E20               	movlw	32
 12414  002B42  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 12415  002B44  6F60               	movwf	memset@p1& (0+255),b
 12416  002B46  0E00               	movlw	0
 12417  002B48  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12418  002B4A  6F61               	movwf	(memset@p1+1)& (0+255),b
 12419  002B4C  0E00               	movlw	0
 12420  002B4E  6F63               	movwf	(memset@c+1)& (0+255),b
 12421  002B50  0E00               	movlw	0
 12422  002B52  6F62               	movwf	memset@c& (0+255),b
 12423  002B54  0E02               	movlw	2
 12424  002B56  6F65               	movwf	(memset@n+1)& (0+255),b
 12425  002B58  0E00               	movlw	0
 12426  002B5A  6F64               	movwf	memset@n& (0+255),b
 12427  002B5C  EC06  F02B         	call	_memset	;wreg free
 12428                           
 12429                           ;tff.c: 604: for (n = fs->csize; n; n--) {
 12430  002B60  0100               	movlb	0	; () banked
 12431  002B62  EE20 F01D          	lfsr	2,29
 12432  002B66  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 12433  002B68  26D9               	addwf	fsr2l,f,c
 12434  002B6A  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12435  002B6C  22DA               	addwfc	fsr2h,f,c
 12436  002B6E  50DF               	movf	indf2,w,c
 12437  002B70  6FCE               	movwf	reserve_direntry@n& (0+255),b
 12438  002B72  D020               	goto	l1229
 12439  002B74                     
 12440                           ; BSR set to: 0
 12441                           ;tff.c: 605: if (disk_write(0, fs->win, sector, 1) != RES_OK)
 12442                           
 12443                           ; BSR set to: 0
 12444  002B74  0E20               	movlw	32
 12445  002B76  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 12446  002B78  6F7F               	movwf	disk_write@buff& (0+255),b
 12447  002B7A  0E00               	movlw	0
 12448  002B7C  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12449  002B7E  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 12450  002B80  C0CA  F081         	movff	reserve_direntry@sector,disk_write@sector
 12451  002B84  C0CB  F082         	movff	reserve_direntry@sector+1,disk_write@sector+1
 12452  002B88  C0CC  F083         	movff	reserve_direntry@sector+2,disk_write@sector+2
 12453  002B8C  C0CD  F084         	movff	reserve_direntry@sector+3,disk_write@sector+3
 12454  002B90  0E01               	movlw	1
 12455  002B92  6F85               	movwf	disk_write@count& (0+255),b
 12456  002B94  0E00               	movlw	0
 12457  002B96  ECF4  F025         	call	_disk_write
 12458  002B9A  0900               	iorlw	0
 12459  002B9C  B4D8               	btfsc	status,2,c
 12460  002B9E  D002               	goto	l1231
 12461                           
 12462                           ;tff.c: 606: return FR_RW_ERROR;
 12463  002BA0  0E08               	movlw	8
 12464  002BA2  0012               	return	
 12465  002BA4                     l1231:
 12466                           
 12467                           ;tff.c: 607: sector++;
 12468  002BA4  0E01               	movlw	1
 12469  002BA6  0100               	movlb	0	; () banked
 12470  002BA8  27CA               	addwf	reserve_direntry@sector& (0+255),f,b
 12471  002BAA  0E00               	movlw	0
 12472  002BAC  23CB               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
 12473  002BAE  23CC               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
 12474  002BB0  23CD               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
 12475                           
 12476                           ; BSR set to: 0
 12477  002BB2  07CE               	decf	reserve_direntry@n& (0+255),f,b
 12478  002BB4                     l1229:
 12479                           
 12480                           ; BSR set to: 0
 12481                           
 12482                           ; BSR set to: 0
 12483  002BB4  51CE               	movf	reserve_direntry@n& (0+255),w,b
 12484  002BB6  A4D8               	btfss	status,2,c
 12485  002BB8  D7DD               	goto	l1230
 12486                           
 12487                           ; BSR set to: 0
 12488                           ;tff.c: 608: }
 12489                           ;tff.c: 609: fs->winflag = 1;
 12490                           
 12491                           ; BSR set to: 0
 12492  002BBA  EE20 F01F          	lfsr	2,31
 12493  002BBE  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 12494  002BC0  26D9               	addwf	fsr2l,f,c
 12495  002BC2  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12496  002BC4  22DA               	addwfc	fsr2h,f,c
 12497  002BC6  0E01               	movlw	1
 12498  002BC8  6EDF               	movwf	indf2,c
 12499                           
 12500                           ;tff.c: 610: *dir = fs->win;
 12501  002BCA  0E20               	movlw	32
 12502  002BCC  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 12503  002BCE  6FC8               	movwf	??_reserve_direntry& (0+255),b
 12504  002BD0  0E00               	movlw	0
 12505  002BD2  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12506  002BD4  6FC9               	movwf	(??_reserve_direntry+1)& (0+255),b
 12507  002BD6  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
 12508  002BDA  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
 12509  002BDE  C0C8  FFDE         	movff	??_reserve_direntry,postinc2
 12510  002BE2  C0C9  FFDD         	movff	??_reserve_direntry+1,postdec2
 12511                           
 12512                           ; BSR set to: 0
 12513                           ;tff.c: 611: return FR_OK;
 12514  002BE6  0E00               	movlw	0
 12515  002BE8  0012               	return	
 12516  002BEA                     __end_of_reserve_direntry:
 12517                           	opt stack 0
 12518                           tosu	equ	0xFFF
 12519                           tosh	equ	0xFFE
 12520                           tosl	equ	0xFFD
 12521                           pclath	equ	0xFFA
 12522                           tblptru	equ	0xFF8
 12523                           tblptrh	equ	0xFF7
 12524                           tblptrl	equ	0xFF6
 12525                           tablat	equ	0xFF5
 12526                           prodh	equ	0xFF4
 12527                           prodl	equ	0xFF3
 12528                           intcon	equ	0xFF2
 12529                           intcon2	equ	0xFF1
 12530                           intcon3	equ	0xFF0
 12531                           indf0	equ	0xFEF
 12532                           postinc0	equ	0xFEE
 12533                           fsr0h	equ	0xFEA
 12534                           fsr0l	equ	0xFE9
 12535                           wreg	equ	0xFE8
 12536                           indf1	equ	0xFE7
 12537                           postinc1	equ	0xFE6
 12538                           postdec1	equ	0xFE5
 12539                           plusw1	equ	0xFE3
 12540                           fsr1h	equ	0xFE2
 12541                           fsr1l	equ	0xFE1
 12542                           indf2	equ	0xFDF
 12543                           postinc2	equ	0xFDE
 12544                           postdec2	equ	0xFDD
 12545                           plusw2	equ	0xFDB
 12546                           fsr2h	equ	0xFDA
 12547                           fsr2l	equ	0xFD9
 12548                           status	equ	0xFD8
 12549                           
 12550 ;; *************** function _next_dir_entry *****************
 12551 ;; Defined at:
 12552 ;;		line 358 in file "bibliotecas/tff.c"
 12553 ;; Parameters:    Size  Location     Type
 12554 ;;  dj              2   83[BANK0 ] PTR struct _DIR_E
 12555 ;;		 -> f_open@dj(14), 
 12556 ;; Auto vars:     Size  Location     Type
 12557 ;;  idx             2   94[BANK0 ] unsigned short 
 12558 ;;  clust           2   92[BANK0 ] unsigned short 
 12559 ;; Return value:  Size  Location     Type
 12560 ;;                  1    wreg      enum E105
 12561 ;; Registers used:
 12562 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12563 ;; Tracked objects:
 12564 ;;		On entry : 0/0
 12565 ;;		On exit  : 0/0
 12566 ;;		Unchanged: 0/0
 12567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12568 ;;      Params:         0       2       0       0       0       0       0       0       0
 12569 ;;      Locals:         0       4       0       0       0       0       0       0       0
 12570 ;;      Temps:          0       7       0       0       0       0       0       0       0
 12571 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12572 ;;Total ram usage:       13 bytes
 12573 ;; Hardware stack levels used:    1
 12574 ;; Hardware stack levels required when called:   10
 12575 ;; This function calls:
 12576 ;;		_clust2sect
 12577 ;;		_get_cluster
 12578 ;; This function is called by:
 12579 ;;		_trace_path
 12580 ;;		_reserve_direntry
 12581 ;;		_f_readdir
 12582 ;; This function uses a non-reentrant model
 12583 ;;
 12584                           
 12585                           	psect	text40
 12586  003826                     __ptext40:
 12587                           	opt stack 0
 12588  003826                     _next_dir_entry:
 12589                           	opt stack 15
 12590                           
 12591                           ;tff.c: 362: CLUST clust;
 12592                           ;tff.c: 363: WORD idx;
 12593                           ;tff.c: 366: idx = dj->index + 1;
 12594                           
 12595                           ;incstack = 0
 12596  003826  0100               	movlb	0	; () banked
 12597  003828  EE20 F002          	lfsr	2,2
 12598  00382C  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12599  00382E  26D9               	addwf	fsr2l,f,c
 12600  003830  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12601  003832  22DA               	addwfc	fsr2h,f,c
 12602  003834  CFDE F0B5          	movff	postinc2,??_next_dir_entry
 12603  003838  CFDD F0B6          	movff	postdec2,??_next_dir_entry+1
 12604  00383C  0E01               	movlw	1
 12605  00383E  25B5               	addwf	??_next_dir_entry& (0+255),w,b
 12606  003840  6FBE               	movwf	next_dir_entry@idx& (0+255),b
 12607  003842  0E00               	movlw	0
 12608  003844  21B6               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
 12609  003846  6FBF               	movwf	(next_dir_entry@idx+1)& (0+255),b
 12610                           
 12611                           ; BSR set to: 0
 12612                           ;tff.c: 367: if ((idx & 15) == 0) {
 12613  003848  0E0F               	movlw	15
 12614  00384A  15BE               	andwf	next_dir_entry@idx& (0+255),w,b
 12615  00384C  6FB5               	movwf	??_next_dir_entry& (0+255),b
 12616  00384E  0E00               	movlw	0
 12617  003850  15BF               	andwf	(next_dir_entry@idx+1)& (0+255),w,b
 12618  003852  6FB6               	movwf	(??_next_dir_entry+1)& (0+255),b
 12619  003854  51B5               	movf	??_next_dir_entry& (0+255),w,b
 12620  003856  11B6               	iorwf	(??_next_dir_entry+1)& (0+255),w,b
 12621  003858  A4D8               	btfss	status,2,c
 12622  00385A  D09D               	goto	l1121
 12623                           
 12624                           ; BSR set to: 0
 12625                           ;tff.c: 368: dj->sect++;
 12626  00385C  EE20 F00A          	lfsr	2,10
 12627  003860  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12628  003862  26D9               	addwf	fsr2l,f,c
 12629  003864  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12630  003866  22DA               	addwfc	fsr2h,f,c
 12631  003868  2ADE               	incf	postinc2,f,c
 12632  00386A  0E00               	movlw	0
 12633  00386C  22DE               	addwfc	postinc2,f,c
 12634  00386E  22DE               	addwfc	postinc2,f,c
 12635  003870  22DE               	addwfc	postinc2,f,c
 12636                           
 12637                           ;tff.c: 369: if (dj->clust == 0) {
 12638  003872  EE20 F008          	lfsr	2,8
 12639  003876  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12640  003878  26D9               	addwf	fsr2l,f,c
 12641  00387A  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12642  00387C  22DA               	addwfc	fsr2h,f,c
 12643  00387E  50DE               	movf	postinc2,w,c
 12644  003880  10DE               	iorwf	postinc2,w,c
 12645  003882  A4D8               	btfss	status,2,c
 12646  003884  D014               	goto	l1117
 12647                           
 12648                           ; BSR set to: 0
 12649                           ;tff.c: 370: if (idx >= dj->fs->n_rootdir) return FALSE;
 12650  003886  EE20 F004          	lfsr	2,4
 12651  00388A  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12652  00388C  26D9               	addwf	fsr2l,f,c
 12653  00388E  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12654  003890  22DA               	addwfc	fsr2h,f,c
 12655  003892  EE10 F002          	lfsr	1,2
 12656  003896  50DE               	movf	postinc2,w,c
 12657  003898  26E1               	addwf	fsr1l,f,c
 12658  00389A  50DD               	movf	postdec2,w,c
 12659  00389C  22E2               	addwfc	fsr1h,f,c
 12660  00389E  50E6               	movf	postinc1,w,c
 12661  0038A0  5DBE               	subwf	next_dir_entry@idx& (0+255),w,b
 12662  0038A2  50E6               	movf	postinc1,w,c
 12663  0038A4  59BF               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
 12664  0038A6  A0D8               	btfss	status,0,c
 12665  0038A8  D076               	goto	l1121
 12666                           
 12667                           ; BSR set to: 0
 12668  0038AA  0E00               	movlw	0
 12669                           
 12670                           ; BSR set to: 0
 12671  0038AC  0012               	return	
 12672  0038AE                     l1117:
 12673                           
 12674                           ; BSR set to: 0
 12675                           ;tff.c: 372: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
 12676                           
 12677                           ; BSR set to: 0
 12678  0038AE  C0BE  F0B5         	movff	next_dir_entry@idx,??_next_dir_entry
 12679  0038B2  C0BF  F0B6         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
 12680  0038B6  0E04               	movlw	4
 12681  0038B8  6FB7               	movwf	(??_next_dir_entry+2)& (0+255),b
 12682  0038BA                     u13815:
 12683  0038BA  90D8               	bcf	status,0,c
 12684  0038BC  33B6               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
 12685  0038BE  33B5               	rrcf	??_next_dir_entry& (0+255),f,b
 12686  0038C0  2FB7               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
 12687  0038C2  D7FB               	goto	u13815
 12688  0038C4  0EFF               	movlw	255
 12689  0038C6  6FB8               	movwf	(??_next_dir_entry+3)& (0+255),b
 12690  0038C8  0EFF               	movlw	255
 12691  0038CA  6FB9               	movwf	(??_next_dir_entry+4)& (0+255),b
 12692  0038CC  EE20 F004          	lfsr	2,4
 12693  0038D0  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12694  0038D2  26D9               	addwf	fsr2l,f,c
 12695  0038D4  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12696  0038D6  22DA               	addwfc	fsr2h,f,c
 12697  0038D8  EE10 F01D          	lfsr	1,29
 12698  0038DC  50DE               	movf	postinc2,w,c
 12699  0038DE  26E1               	addwf	fsr1l,f,c
 12700  0038E0  50DD               	movf	postdec2,w,c
 12701  0038E2  22E2               	addwfc	fsr1h,f,c
 12702  0038E4  50E7               	movf	indf1,w,c
 12703  0038E6  6FBA               	movwf	(??_next_dir_entry+5)& (0+255),b
 12704  0038E8  6BBB               	clrf	(??_next_dir_entry+6)& (0+255),b
 12705  0038EA  51B8               	movf	(??_next_dir_entry+3)& (0+255),w,b
 12706  0038EC  27BA               	addwf	(??_next_dir_entry+5)& (0+255),f,b
 12707  0038EE  51B9               	movf	(??_next_dir_entry+4)& (0+255),w,b
 12708  0038F0  23BB               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
 12709  0038F2  51B5               	movf	??_next_dir_entry& (0+255),w,b
 12710  0038F4  17BA               	andwf	(??_next_dir_entry+5)& (0+255),f,b
 12711  0038F6  51B6               	movf	(??_next_dir_entry+1)& (0+255),w,b
 12712  0038F8  17BB               	andwf	(??_next_dir_entry+6)& (0+255),f,b
 12713  0038FA  51BA               	movf	(??_next_dir_entry+5)& (0+255),w,b
 12714  0038FC  11BB               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
 12715  0038FE  A4D8               	btfss	status,2,c
 12716  003900  D04A               	goto	l1121
 12717                           
 12718                           ; BSR set to: 0
 12719                           ;tff.c: 373: clust = get_cluster(dj->clust);
 12720  003902  EE20 F008          	lfsr	2,8
 12721  003906  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12722  003908  26D9               	addwf	fsr2l,f,c
 12723  00390A  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12724  00390C  22DA               	addwfc	fsr2h,f,c
 12725  00390E  CFDE F0A0          	movff	postinc2,get_cluster@clust
 12726  003912  CFDD F0A1          	movff	postdec2,get_cluster@clust+1
 12727  003916  EC62  F018         	call	_get_cluster	;wreg free
 12728  00391A  C0A0  F0BC         	movff	?_get_cluster,next_dir_entry@clust
 12729  00391E  C0A1  F0BD         	movff	?_get_cluster+1,next_dir_entry@clust+1
 12730                           
 12731                           ;tff.c: 374: if (clust < 2 || clust >= dj->fs->max_clust)
 12732  003922  0100               	movlb	0	; () banked
 12733  003924  51BD               	movf	(next_dir_entry@clust+1)& (0+255),w,b
 12734  003926  E104               	bnz	u13830
 12735  003928  0E02               	movlw	2
 12736  00392A  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
 12737  00392C  A0D8               	btfss	status,0,c
 12738  00392E  D012               	goto	u13840
 12739  003930                     u13830:
 12740                           
 12741                           ; BSR set to: 0
 12742  003930  EE20 F004          	lfsr	2,4
 12743  003934  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12744  003936  26D9               	addwf	fsr2l,f,c
 12745  003938  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12746  00393A  22DA               	addwfc	fsr2h,f,c
 12747  00393C  EE10 F016          	lfsr	1,22
 12748  003940  50DE               	movf	postinc2,w,c
 12749  003942  26E1               	addwf	fsr1l,f,c
 12750  003944  50DD               	movf	postdec2,w,c
 12751  003946  22E2               	addwfc	fsr1h,f,c
 12752  003948  50E6               	movf	postinc1,w,c
 12753  00394A  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
 12754  00394C  50E6               	movf	postinc1,w,c
 12755  00394E  59BD               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
 12756  003950  A0D8               	btfss	status,0,c
 12757  003952  D002               	goto	l1122
 12758  003954                     u13840:
 12759                           
 12760                           ; BSR set to: 0
 12761                           ;tff.c: 375: return FALSE;
 12762                           
 12763                           ; BSR set to: 0
 12764  003954  0E00               	movlw	0
 12765                           
 12766                           ; BSR set to: 0
 12767  003956  0012               	return	
 12768  003958                     l1122:
 12769                           
 12770                           ; BSR set to: 0
 12771                           ;tff.c: 376: dj->clust = clust;
 12772                           
 12773                           ; BSR set to: 0
 12774  003958  EE20 F008          	lfsr	2,8
 12775  00395C  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12776  00395E  26D9               	addwf	fsr2l,f,c
 12777  003960  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12778  003962  22DA               	addwfc	fsr2h,f,c
 12779  003964  C0BC  FFDE         	movff	next_dir_entry@clust,postinc2
 12780  003968  C0BD  FFDD         	movff	next_dir_entry@clust+1,postdec2
 12781                           
 12782                           ; BSR set to: 0
 12783                           ;tff.c: 377: dj->sect = clust2sect(clust);
 12784  00396C  C0BC  F06C         	movff	next_dir_entry@clust,clust2sect@clust
 12785  003970  C0BD  F06D         	movff	next_dir_entry@clust+1,clust2sect@clust+1
 12786  003974  EC46  F022         	call	_clust2sect	;wreg free
 12787  003978  0100               	movlb	0	; () banked
 12788  00397A  EE20 F00A          	lfsr	2,10
 12789  00397E  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12790  003980  26D9               	addwf	fsr2l,f,c
 12791  003982  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12792  003984  22DA               	addwfc	fsr2h,f,c
 12793  003986  C06C  FFDE         	movff	?_clust2sect,postinc2
 12794  00398A  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 12795  00398E  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 12796  003992  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 12797  003996                     l1121:
 12798                           
 12799                           ; BSR set to: 0
 12800                           ;tff.c: 378: }
 12801                           ;tff.c: 379: }
 12802                           ;tff.c: 380: }
 12803                           ;tff.c: 381: dj->index = idx;
 12804                           
 12805                           ; BSR set to: 0
 12806                           
 12807                           ; BSR set to: 0
 12808                           
 12809                           ; BSR set to: 0
 12810  003996  EE20 F002          	lfsr	2,2
 12811  00399A  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12812  00399C  26D9               	addwf	fsr2l,f,c
 12813  00399E  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12814  0039A0  22DA               	addwfc	fsr2h,f,c
 12815  0039A2  C0BE  FFDE         	movff	next_dir_entry@idx,postinc2
 12816  0039A6  C0BF  FFDD         	movff	next_dir_entry@idx+1,postdec2
 12817                           
 12818                           ; BSR set to: 0
 12819                           ;tff.c: 382: return TRUE;
 12820  0039AA  0E01               	movlw	1
 12821  0039AC  0012               	return	
 12822  0039AE                     __end_of_next_dir_entry:
 12823                           	opt stack 0
 12824                           tosu	equ	0xFFF
 12825                           tosh	equ	0xFFE
 12826                           tosl	equ	0xFFD
 12827                           pclath	equ	0xFFA
 12828                           tblptru	equ	0xFF8
 12829                           tblptrh	equ	0xFF7
 12830                           tblptrl	equ	0xFF6
 12831                           tablat	equ	0xFF5
 12832                           prodh	equ	0xFF4
 12833                           prodl	equ	0xFF3
 12834                           intcon	equ	0xFF2
 12835                           intcon2	equ	0xFF1
 12836                           intcon3	equ	0xFF0
 12837                           indf0	equ	0xFEF
 12838                           postinc0	equ	0xFEE
 12839                           fsr0h	equ	0xFEA
 12840                           fsr0l	equ	0xFE9
 12841                           wreg	equ	0xFE8
 12842                           indf1	equ	0xFE7
 12843                           postinc1	equ	0xFE6
 12844                           postdec1	equ	0xFE5
 12845                           plusw1	equ	0xFE3
 12846                           fsr1h	equ	0xFE2
 12847                           fsr1l	equ	0xFE1
 12848                           indf2	equ	0xFDF
 12849                           postinc2	equ	0xFDE
 12850                           postdec2	equ	0xFDD
 12851                           plusw2	equ	0xFDB
 12852                           fsr2h	equ	0xFDA
 12853                           fsr2l	equ	0xFD9
 12854                           status	equ	0xFD8
 12855                           
 12856 ;; *************** function _clust2sect *****************
 12857 ;; Defined at:
 12858 ;;		line 338 in file "bibliotecas/tff.c"
 12859 ;; Parameters:    Size  Location     Type
 12860 ;;  clust           2   12[BANK0 ] unsigned short 
 12861 ;; Auto vars:     Size  Location     Type
 12862 ;;  fs              2   21[BANK0 ] PTR struct _FATFS
 12863 ;;		 -> NULL(0), fs(544), 
 12864 ;; Return value:  Size  Location     Type
 12865 ;;                  4   12[BANK0 ] unsigned long 
 12866 ;; Registers used:
 12867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12868 ;; Tracked objects:
 12869 ;;		On entry : 0/0
 12870 ;;		On exit  : 0/0
 12871 ;;		Unchanged: 0/0
 12872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12873 ;;      Params:         0       4       0       0       0       0       0       0       0
 12874 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12875 ;;      Temps:          0       5       0       0       0       0       0       0       0
 12876 ;;      Totals:         0      11       0       0       0       0       0       0       0
 12877 ;;Total ram usage:       11 bytes
 12878 ;; Hardware stack levels used:    1
 12879 ;; Hardware stack levels required when called:    4
 12880 ;; This function calls:
 12881 ;;		___lmul
 12882 ;; This function is called by:
 12883 ;;		_next_dir_entry
 12884 ;;		_trace_path
 12885 ;;		_reserve_direntry
 12886 ;;		_f_write
 12887 ;;		_f_read
 12888 ;;		_f_opendir
 12889 ;; This function uses a non-reentrant model
 12890 ;;
 12891                           
 12892                           	psect	text41
 12893  00448C                     __ptext41:
 12894                           	opt stack 0
 12895  00448C                     _clust2sect:
 12896                           	opt stack 19
 12897                           
 12898                           ;tff.c: 342: FATFS *fs = FatFs;
 12899                           
 12900                           ; BSR set to: 0
 12901                           ;incstack = 0
 12902  00448C  C0F7  F075         	movff	_FatFs,clust2sect@fs
 12903  004490  C0F8  F076         	movff	_FatFs+1,clust2sect@fs+1
 12904                           
 12905                           ;tff.c: 345: clust -= 2;
 12906  004494  0E02               	movlw	2
 12907  004496  0100               	movlb	0	; () banked
 12908  004498  5F6C               	subwf	clust2sect@clust& (0+255),f,b
 12909  00449A  0E00               	movlw	0
 12910  00449C  5B6D               	subwfb	(clust2sect@clust+1)& (0+255),f,b
 12911                           
 12912                           ; BSR set to: 0
 12913                           ;tff.c: 346: if (clust >= (fs->max_clust - 2)) return 0;
 12914  00449E  0EFE               	movlw	254
 12915  0044A0  6F70               	movwf	??_clust2sect& (0+255),b
 12916  0044A2  0EFF               	movlw	255
 12917  0044A4  6F71               	movwf	(??_clust2sect+1)& (0+255),b
 12918  0044A6  EE20 F016          	lfsr	2,22
 12919  0044AA  5175               	movf	clust2sect@fs& (0+255),w,b
 12920  0044AC  26D9               	addwf	fsr2l,f,c
 12921  0044AE  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 12922  0044B0  22DA               	addwfc	fsr2h,f,c
 12923  0044B2  CFDE F072          	movff	postinc2,??_clust2sect+2
 12924  0044B6  CFDD F073          	movff	postdec2,??_clust2sect+3
 12925  0044BA  5170               	movf	??_clust2sect& (0+255),w,b
 12926  0044BC  2772               	addwf	(??_clust2sect+2)& (0+255),f,b
 12927  0044BE  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 12928  0044C0  2373               	addwfc	(??_clust2sect+3)& (0+255),f,b
 12929  0044C2  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 12930  0044C4  5D6C               	subwf	clust2sect@clust& (0+255),w,b
 12931  0044C6  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 12932  0044C8  596D               	subwfb	(clust2sect@clust+1)& (0+255),w,b
 12933  0044CA  A0D8               	btfss	status,0,c
 12934  0044CC  D009               	goto	l1112
 12935                           
 12936                           ; BSR set to: 0
 12937  0044CE  0E00               	movlw	0
 12938  0044D0  6F6C               	movwf	?_clust2sect& (0+255),b
 12939  0044D2  0E00               	movlw	0
 12940  0044D4  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 12941  0044D6  0E00               	movlw	0
 12942  0044D8  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 12943  0044DA  0E00               	movlw	0
 12944  0044DC  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 12945                           
 12946                           ; BSR set to: 0
 12947  0044DE  0012               	return	
 12948  0044E0                     l1112:
 12949                           
 12950                           ; BSR set to: 0
 12951                           ;tff.c: 347: return (DWORD)clust * fs->csize + fs->database;
 12952                           
 12953                           ; BSR set to: 0
 12954  0044E0  EE20 F010          	lfsr	2,16
 12955  0044E4  5175               	movf	clust2sect@fs& (0+255),w,b
 12956  0044E6  26D9               	addwf	fsr2l,f,c
 12957  0044E8  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 12958  0044EA  22DA               	addwfc	fsr2h,f,c
 12959  0044EC  CFDE F070          	movff	postinc2,??_clust2sect
 12960  0044F0  CFDE F071          	movff	postinc2,??_clust2sect+1
 12961  0044F4  CFDE F072          	movff	postinc2,??_clust2sect+2
 12962  0044F8  CFDE F073          	movff	postinc2,??_clust2sect+3
 12963  0044FC  C06C  F060         	movff	clust2sect@clust,___lmul@multiplier
 12964  004500  C06D  F061         	movff	clust2sect@clust+1,___lmul@multiplier+1
 12965  004504  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
 12966  004506  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
 12967  004508  EE20 F01D          	lfsr	2,29
 12968  00450C  5175               	movf	clust2sect@fs& (0+255),w,b
 12969  00450E  26D9               	addwf	fsr2l,f,c
 12970  004510  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 12971  004512  22DA               	addwfc	fsr2h,f,c
 12972  004514  50DF               	movf	indf2,w,c
 12973  004516  6F74               	movwf	(??_clust2sect+4)& (0+255),b
 12974  004518  5174               	movf	(??_clust2sect+4)& (0+255),w,b
 12975  00451A  6F64               	movwf	___lmul@multiplicand& (0+255),b
 12976  00451C  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 12977  00451E  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 12978  004520  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 12979  004522  EC7B  F028         	call	___lmul	;wreg free
 12980  004526  0100               	movlb	0	; () banked
 12981  004528  5170               	movf	??_clust2sect& (0+255),w,b
 12982  00452A  2560               	addwf	?___lmul& (0+255),w,b
 12983  00452C  6F6C               	movwf	?_clust2sect& (0+255),b
 12984  00452E  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 12985  004530  2161               	addwfc	(?___lmul+1)& (0+255),w,b
 12986  004532  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 12987  004534  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 12988  004536  2162               	addwfc	(?___lmul+2)& (0+255),w,b
 12989  004538  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 12990  00453A  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 12991  00453C  2163               	addwfc	(?___lmul+3)& (0+255),w,b
 12992  00453E  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 12993  004540  0012               	return	
 12994  004542                     __end_of_clust2sect:
 12995                           	opt stack 0
 12996                           tosu	equ	0xFFF
 12997                           tosh	equ	0xFFE
 12998                           tosl	equ	0xFFD
 12999                           pclath	equ	0xFFA
 13000                           tblptru	equ	0xFF8
 13001                           tblptrh	equ	0xFF7
 13002                           tblptrl	equ	0xFF6
 13003                           tablat	equ	0xFF5
 13004                           prodh	equ	0xFF4
 13005                           prodl	equ	0xFF3
 13006                           intcon	equ	0xFF2
 13007                           intcon2	equ	0xFF1
 13008                           intcon3	equ	0xFF0
 13009                           indf0	equ	0xFEF
 13010                           postinc0	equ	0xFEE
 13011                           fsr0h	equ	0xFEA
 13012                           fsr0l	equ	0xFE9
 13013                           wreg	equ	0xFE8
 13014                           indf1	equ	0xFE7
 13015                           postinc1	equ	0xFE6
 13016                           postdec1	equ	0xFE5
 13017                           plusw1	equ	0xFE3
 13018                           fsr1h	equ	0xFE2
 13019                           fsr1l	equ	0xFE1
 13020                           indf2	equ	0xFDF
 13021                           postinc2	equ	0xFDE
 13022                           postdec2	equ	0xFDD
 13023                           plusw2	equ	0xFDB
 13024                           fsr2h	equ	0xFDA
 13025                           fsr2l	equ	0xFD9
 13026                           status	equ	0xFD8
 13027                           
 13028 ;; *************** function _remove_chain *****************
 13029 ;; Defined at:
 13030 ;;		line 249 in file "bibliotecas/tff.c"
 13031 ;; Parameters:    Size  Location     Type
 13032 ;;  clust           2   86[BANK0 ] unsigned short 
 13033 ;; Auto vars:     Size  Location     Type
 13034 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 13035 ;;		 -> NULL(0), fs(544), 
 13036 ;;  nxt             2   90[BANK0 ] unsigned short 
 13037 ;; Return value:  Size  Location     Type
 13038 ;;                  1    wreg      enum E105
 13039 ;; Registers used:
 13040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13041 ;; Tracked objects:
 13042 ;;		On entry : 0/0
 13043 ;;		On exit  : 0/0
 13044 ;;		Unchanged: 0/0
 13045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13046 ;;      Params:         0       2       0       0       0       0       0       0       0
 13047 ;;      Locals:         0       4       0       0       0       0       0       0       0
 13048 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13049 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13050 ;;Total ram usage:        8 bytes
 13051 ;; Hardware stack levels used:    1
 13052 ;; Hardware stack levels required when called:   10
 13053 ;; This function calls:
 13054 ;;		_get_cluster
 13055 ;;		_put_cluster
 13056 ;; This function is called by:
 13057 ;;		_f_open
 13058 ;; This function uses a non-reentrant model
 13059 ;;
 13060                           
 13061                           	psect	text42
 13062  0045EC                     __ptext42:
 13063                           	opt stack 0
 13064  0045EC                     _remove_chain:
 13065                           	opt stack 16
 13066                           
 13067                           ;tff.c: 253: CLUST nxt;
 13068                           ;tff.c: 254: FATFS *fs = FatFs;
 13069                           
 13070                           ; BSR set to: 0
 13071                           ;incstack = 0
 13072  0045EC  C0F7  F0BC         	movff	_FatFs,remove_chain@fs
 13073  0045F0  C0F8  F0BD         	movff	_FatFs+1,remove_chain@fs+1
 13074                           
 13075                           ;tff.c: 257: while (clust >= 2 && clust < fs->max_clust) {
 13076  0045F4  D039               	goto	l1081
 13077  0045F6                     
 13078                           ;tff.c: 258: nxt = get_cluster(clust);
 13079  0045F6  C0B6  F0A0         	movff	remove_chain@clust,get_cluster@clust
 13080  0045FA  C0B7  F0A1         	movff	remove_chain@clust+1,get_cluster@clust+1
 13081  0045FE  EC62  F018         	call	_get_cluster	;wreg free
 13082  004602  C0A0  F0BA         	movff	?_get_cluster,remove_chain@nxt
 13083  004606  C0A1  F0BB         	movff	?_get_cluster+1,remove_chain@nxt+1
 13084                           
 13085                           ;tff.c: 259: if (nxt == 1) return FALSE;
 13086  00460A  0100               	movlb	0	; () banked
 13087  00460C  05BA               	decf	remove_chain@nxt& (0+255),w,b
 13088  00460E  11BB               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 13089  004610  A4D8               	btfss	status,2,c
 13090  004612  D002               	goto	l1083
 13091                           
 13092                           ; BSR set to: 0
 13093  004614  0E00               	movlw	0
 13094                           
 13095                           ; BSR set to: 0
 13096  004616  0012               	return	
 13097  004618                     l1083:
 13098                           
 13099                           ; BSR set to: 0
 13100                           ;tff.c: 260: if (!put_cluster(clust, 0)) return FALSE;
 13101                           
 13102                           ; BSR set to: 0
 13103  004618  C0B6  F0A0         	movff	remove_chain@clust,put_cluster@clust
 13104  00461C  C0B7  F0A1         	movff	remove_chain@clust+1,put_cluster@clust+1
 13105  004620  0E00               	movlw	0
 13106  004622  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 13107  004624  0E00               	movlw	0
 13108  004626  6FA2               	movwf	put_cluster@val& (0+255),b
 13109  004628  ECF5  F015         	call	_put_cluster	;wreg free
 13110  00462C  0900               	iorlw	0
 13111  00462E  A4D8               	btfss	status,2,c
 13112  004630  D002               	goto	l1085
 13113  004632  0E00               	movlw	0
 13114  004634  0012               	return	
 13115  004636                     l1085:
 13116                           
 13117                           ;tff.c: 261: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 13118  004636  0100               	movlb	0	; () banked
 13119  004638  EE20 F01A          	lfsr	2,26
 13120  00463C  51BC               	movf	remove_chain@fs& (0+255),w,b
 13121  00463E  26D9               	addwf	fsr2l,f,c
 13122  004640  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 13123  004642  22DA               	addwfc	fsr2h,f,c
 13124  004644  28DE               	incf	postinc2,w,c
 13125  004646  E103               	bnz	u14490
 13126  004648  28DE               	incf	postinc2,w,c
 13127  00464A  B4D8               	btfsc	status,2,c
 13128  00464C  D009               	goto	l1086
 13129  00464E                     u14490:
 13130                           
 13131                           ; BSR set to: 0
 13132                           ;tff.c: 262: fs->free_clust++;
 13133  00464E  EE20 F01A          	lfsr	2,26
 13134  004652  51BC               	movf	remove_chain@fs& (0+255),w,b
 13135  004654  26D9               	addwf	fsr2l,f,c
 13136  004656  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 13137  004658  22DA               	addwfc	fsr2h,f,c
 13138  00465A  2ADE               	incf	postinc2,f,c
 13139  00465C  0E00               	movlw	0
 13140  00465E  22DD               	addwfc	postdec2,f,c
 13141  004660                     l1086:
 13142                           
 13143                           ; BSR set to: 0
 13144                           ;tff.c: 266: }
 13145                           ;tff.c: 267: clust = nxt;
 13146                           
 13147                           ; BSR set to: 0
 13148  004660  C0BA  F0B6         	movff	remove_chain@nxt,remove_chain@clust
 13149  004664  C0BB  F0B7         	movff	remove_chain@nxt+1,remove_chain@clust+1
 13150  004668                     l1081:
 13151                           
 13152                           ; BSR set to: 0
 13153  004668  0100               	movlb	0	; () banked
 13154  00466A  51B7               	movf	(remove_chain@clust+1)& (0+255),w,b
 13155  00466C  E104               	bnz	u14500
 13156  00466E  0E02               	movlw	2
 13157  004670  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 13158  004672  A0D8               	btfss	status,0,c
 13159  004674  D00C               	goto	u14510
 13160  004676                     u14500:
 13161                           
 13162                           ; BSR set to: 0
 13163  004676  EE20 F016          	lfsr	2,22
 13164  00467A  51BC               	movf	remove_chain@fs& (0+255),w,b
 13165  00467C  26D9               	addwf	fsr2l,f,c
 13166  00467E  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 13167  004680  22DA               	addwfc	fsr2h,f,c
 13168  004682  50DE               	movf	postinc2,w,c
 13169  004684  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 13170  004686  50DE               	movf	postinc2,w,c
 13171  004688  59B7               	subwfb	(remove_chain@clust+1)& (0+255),w,b
 13172  00468A  A0D8               	btfss	status,0,c
 13173  00468C  D7B4               	goto	l1082
 13174  00468E                     u14510:
 13175                           
 13176                           ; BSR set to: 0
 13177                           ;tff.c: 268: }
 13178                           ;tff.c: 269: return TRUE;
 13179                           
 13180                           ; BSR set to: 0
 13181                           
 13182                           ; BSR set to: 0
 13183  00468E  0E01               	movlw	1
 13184  004690  0012               	return	
 13185  004692                     __end_of_remove_chain:
 13186                           	opt stack 0
 13187                           tosu	equ	0xFFF
 13188                           tosh	equ	0xFFE
 13189                           tosl	equ	0xFFD
 13190                           pclath	equ	0xFFA
 13191                           tblptru	equ	0xFF8
 13192                           tblptrh	equ	0xFF7
 13193                           tblptrl	equ	0xFF6
 13194                           tablat	equ	0xFF5
 13195                           prodh	equ	0xFF4
 13196                           prodl	equ	0xFF3
 13197                           intcon	equ	0xFF2
 13198                           intcon2	equ	0xFF1
 13199                           intcon3	equ	0xFF0
 13200                           indf0	equ	0xFEF
 13201                           postinc0	equ	0xFEE
 13202                           fsr0h	equ	0xFEA
 13203                           fsr0l	equ	0xFE9
 13204                           wreg	equ	0xFE8
 13205                           indf1	equ	0xFE7
 13206                           postinc1	equ	0xFE6
 13207                           postdec1	equ	0xFE5
 13208                           plusw1	equ	0xFE3
 13209                           fsr1h	equ	0xFE2
 13210                           fsr1l	equ	0xFE1
 13211                           indf2	equ	0xFDF
 13212                           postinc2	equ	0xFDE
 13213                           postdec2	equ	0xFDD
 13214                           plusw2	equ	0xFDB
 13215                           fsr2h	equ	0xFDA
 13216                           fsr2l	equ	0xFD9
 13217                           status	equ	0xFD8
 13218                           
 13219 ;; *************** function _memcpy *****************
 13220 ;; Defined at:
 13221 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
 13222 ;; Parameters:    Size  Location     Type
 13223 ;;  d1              2    0[BANK0 ] PTR void 
 13224 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 13225 ;;  s1              2    2[BANK0 ] PTR const void 
 13226 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 13227 ;;		 -> fs(544), 
 13228 ;;  n               2    4[BANK0 ] unsigned int 
 13229 ;; Auto vars:     Size  Location     Type
 13230 ;;  s               2    9[BANK0 ] PTR const unsigned char 
 13231 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 13232 ;;		 -> fs(544), 
 13233 ;;  d               2    7[BANK0 ] PTR unsigned char 
 13234 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 13235 ;;  tmp             1    6[BANK0 ] unsigned char 
 13236 ;; Return value:  Size  Location     Type
 13237 ;;                  2    0[BANK0 ] PTR void 
 13238 ;; Registers used:
 13239 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13240 ;; Tracked objects:
 13241 ;;		On entry : 0/0
 13242 ;;		On exit  : 0/0
 13243 ;;		Unchanged: 0/0
 13244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13245 ;;      Params:         0       6       0       0       0       0       0       0       0
 13246 ;;      Locals:         0       5       0       0       0       0       0       0       0
 13247 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13248 ;;      Totals:         0      11       0       0       0       0       0       0       0
 13249 ;;Total ram usage:       11 bytes
 13250 ;; Hardware stack levels used:    1
 13251 ;; Hardware stack levels required when called:    3
 13252 ;; This function calls:
 13253 ;;		Nothing
 13254 ;; This function is called by:
 13255 ;;		_f_open
 13256 ;;		_f_write
 13257 ;;		_f_read
 13258 ;; This function uses a non-reentrant model
 13259 ;;
 13260                           
 13261                           	psect	text43
 13262  005332                     __ptext43:
 13263                           	opt stack 0
 13264  005332                     _memcpy:
 13265                           	opt stack 20
 13266                           
 13267                           ;incstack = 0
 13268  005332  C062  F069         	movff	memcpy@s1,memcpy@s
 13269  005336  C063  F06A         	movff	memcpy@s1+1,memcpy@s+1
 13270  00533A  C060  F067         	movff	memcpy@d1,memcpy@d
 13271  00533E  C061  F068         	movff	memcpy@d1+1,memcpy@d+1
 13272  005342  D011               	goto	l1988
 13273  005344                     l10280:
 13274  005344  C069  FFD9         	movff	memcpy@s,fsr2l
 13275  005348  C06A  FFDA         	movff	memcpy@s+1,fsr2h
 13276  00534C  50DF               	movf	indf2,w,c
 13277  00534E  0100               	movlb	0	; () banked
 13278  005350  6F66               	movwf	memcpy@tmp& (0+255),b
 13279                           
 13280                           ; BSR set to: 0
 13281  005352  4B69               	infsnz	memcpy@s& (0+255),f,b
 13282  005354  2B6A               	incf	(memcpy@s+1)& (0+255),f,b
 13283                           
 13284                           ; BSR set to: 0
 13285  005356  C067  FFD9         	movff	memcpy@d,fsr2l
 13286  00535A  C068  FFDA         	movff	memcpy@d+1,fsr2h
 13287  00535E  C066  FFDF         	movff	memcpy@tmp,indf2
 13288                           
 13289                           ; BSR set to: 0
 13290  005362  4B67               	infsnz	memcpy@d& (0+255),f,b
 13291  005364  2B68               	incf	(memcpy@d+1)& (0+255),f,b
 13292  005366                     l1988:
 13293                           
 13294                           ; BSR set to: 0
 13295  005366  0100               	movlb	0	; () banked
 13296  005368  0764               	decf	memcpy@n& (0+255),f,b
 13297  00536A  A0D8               	btfss	status,0,c
 13298  00536C  0765               	decf	(memcpy@n+1)& (0+255),f,b
 13299  00536E  2964               	incf	memcpy@n& (0+255),w,b
 13300  005370  E1E9               	bnz	l10280
 13301  005372  2965               	incf	(memcpy@n+1)& (0+255),w,b
 13302  005374  B4D8               	btfsc	status,2,c
 13303  005376  0012               	return	
 13304  005378  D7E5               	goto	l1989
 13305  00537A                     __end_of_memcpy:
 13306                           	opt stack 0
 13307                           tosu	equ	0xFFF
 13308                           tosh	equ	0xFFE
 13309                           tosl	equ	0xFFD
 13310                           pclath	equ	0xFFA
 13311                           tblptru	equ	0xFF8
 13312                           tblptrh	equ	0xFF7
 13313                           tblptrl	equ	0xFF6
 13314                           tablat	equ	0xFF5
 13315                           prodh	equ	0xFF4
 13316                           prodl	equ	0xFF3
 13317                           intcon	equ	0xFF2
 13318                           intcon2	equ	0xFF1
 13319                           intcon3	equ	0xFF0
 13320                           indf0	equ	0xFEF
 13321                           postinc0	equ	0xFEE
 13322                           fsr0h	equ	0xFEA
 13323                           fsr0l	equ	0xFE9
 13324                           wreg	equ	0xFE8
 13325                           indf1	equ	0xFE7
 13326                           postinc1	equ	0xFE6
 13327                           postdec1	equ	0xFE5
 13328                           plusw1	equ	0xFE3
 13329                           fsr1h	equ	0xFE2
 13330                           fsr1l	equ	0xFE1
 13331                           indf2	equ	0xFDF
 13332                           postinc2	equ	0xFDE
 13333                           postdec2	equ	0xFDD
 13334                           plusw2	equ	0xFDB
 13335                           fsr2h	equ	0xFDA
 13336                           fsr2l	equ	0xFD9
 13337                           status	equ	0xFD8
 13338                           
 13339 ;; *************** function _auto_mount *****************
 13340 ;; Defined at:
 13341 ;;		line 651 in file "bibliotecas/tff.c"
 13342 ;; Parameters:    Size  Location     Type
 13343 ;;  path            2   51[BANK0 ] PTR PTR const unsigned c
 13344 ;;		 -> f_opendir@path(2), f_open@path(2), 
 13345 ;;  chk_wp          1   53[BANK0 ] unsigned char 
 13346 ;; Auto vars:     Size  Location     Type
 13347 ;;  fatsize         4   85[BANK0 ] unsigned long 
 13348 ;;  totalsect       4   77[BANK0 ] unsigned long 
 13349 ;;  bootsect        4   73[BANK0 ] unsigned long 
 13350 ;;  maxclust        4   69[BANK0 ] unsigned long 
 13351 ;;  fs              2   89[BANK0 ] PTR struct _FATFS
 13352 ;;		 -> NULL(0), fs(544), 
 13353 ;;  p               2   81[BANK0 ] PTR const unsigned char 
 13354 ;;		 -> STR_25(13), filename(15), 
 13355 ;;  stat            1   84[BANK0 ] unsigned char 
 13356 ;;  fmt             1   83[BANK0 ] unsigned char 
 13357 ;; Return value:  Size  Location     Type
 13358 ;;                  1    wreg      enum E155
 13359 ;; Registers used:
 13360 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13361 ;; Tracked objects:
 13362 ;;		On entry : 0/0
 13363 ;;		On exit  : 0/0
 13364 ;;		Unchanged: 0/0
 13365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13366 ;;      Params:         0       3       0       0       0       0       0       0       0
 13367 ;;      Locals:         0      22       0       0       0       0       0       0       0
 13368 ;;      Temps:          0      15       0       0       0       0       0       0       0
 13369 ;;      Totals:         0      40       0       0       0       0       0       0       0
 13370 ;;Total ram usage:       40 bytes
 13371 ;; Hardware stack levels used:    1
 13372 ;; Hardware stack levels required when called:    9
 13373 ;; This function calls:
 13374 ;;		___lldiv
 13375 ;;		___lmul
 13376 ;;		_check_fs
 13377 ;;		_disk_initialize
 13378 ;;		_disk_status
 13379 ;;		_memset
 13380 ;; This function is called by:
 13381 ;;		_f_open
 13382 ;;		_f_opendir
 13383 ;; This function uses a non-reentrant model
 13384 ;;
 13385                           
 13386                           	psect	text44
 13387  000F64                     __ptext44:
 13388                           	opt stack 0
 13389  000F64                     _auto_mount:
 13390                           	opt stack 17
 13391                           
 13392                           ;tff.c: 656: BYTE fmt;
 13393                           ;tff.c: 657: DSTATUS stat;
 13394                           ;tff.c: 658: DWORD bootsect, fatsize, totalsect, maxclust;
 13395                           ;tff.c: 659: const char *p = *path;
 13396                           
 13397                           ; BSR set to: 0
 13398                           ;incstack = 0
 13399  000F64  C093  FFD9         	movff	auto_mount@path,fsr2l
 13400  000F68  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 13401  000F6C  CFDE F0B1          	movff	postinc2,auto_mount@p
 13402  000F70  CFDD F0B2          	movff	postdec2,auto_mount@p+1
 13403                           
 13404                           ;tff.c: 660: FATFS *fs;
 13405                           ;tff.c: 663: while (*p == ' ') p++;
 13406  000F74  D003               	goto	l1241
 13407  000F76  0100               	movlb	0	; () banked
 13408  000F78  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 13409  000F7A  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 13410  000F7C                     l1241:
 13411                           
 13412                           ; BSR set to: 0
 13413  000F7C  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 13414  000F80  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 13415  000F84  6AF8               	clrf	tblptru,c
 13416  000F86  0E07               	movlw	(high __ramtop+-1)
 13417  000F88  64F7               	cpfsgt	tblptrh,c
 13418  000F8A  D003               	bra	u14787
 13419  000F8C  0008               	tblrd		*
 13420  000F8E  50F5               	movf	tablat,w,c
 13421  000F90  D005               	bra	u14780
 13422  000F92                     u14787:
 13423  000F92  CFF6 FFE9          	movff	tblptrl,fsr0l
 13424  000F96  CFF7 FFEA          	movff	tblptrh,fsr0h
 13425  000F9A  50EF               	movf	indf0,w,c
 13426  000F9C                     u14780:
 13427  000F9C  0A20               	xorlw	32
 13428  000F9E  B4D8               	btfsc	status,2,c
 13429  000FA0  D7EA               	goto	l1242
 13430                           
 13431                           ;tff.c: 664: if (*p == '/') p++;
 13432  000FA2  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 13433  000FA6  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 13434  000FAA  6AF8               	clrf	tblptru,c
 13435  000FAC  0E07               	movlw	(high __ramtop+-1)
 13436  000FAE  64F7               	cpfsgt	tblptrh,c
 13437  000FB0  D003               	bra	u14807
 13438  000FB2  0008               	tblrd		*
 13439  000FB4  50F5               	movf	tablat,w,c
 13440  000FB6  D005               	bra	u14800
 13441  000FB8                     u14807:
 13442  000FB8  CFF6 FFE9          	movff	tblptrl,fsr0l
 13443  000FBC  CFF7 FFEA          	movff	tblptrh,fsr0h
 13444  000FC0  50EF               	movf	indf0,w,c
 13445  000FC2                     u14800:
 13446  000FC2  0A2F               	xorlw	47
 13447  000FC4  A4D8               	btfss	status,2,c
 13448  000FC6  D003               	goto	l1244
 13449  000FC8  0100               	movlb	0	; () banked
 13450  000FCA  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 13451  000FCC  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 13452  000FCE                     l1244:
 13453                           
 13454                           ;tff.c: 665: *path = p;
 13455                           
 13456                           ; BSR set to: 0
 13457  000FCE  C093  FFD9         	movff	auto_mount@path,fsr2l
 13458  000FD2  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 13459  000FD6  C0B1  FFDE         	movff	auto_mount@p,postinc2
 13460  000FDA  C0B2  FFDD         	movff	auto_mount@p+1,postdec2
 13461                           
 13462                           ;tff.c: 668: fs = FatFs;
 13463  000FDE  C0F7  F0B9         	movff	_FatFs,auto_mount@fs
 13464  000FE2  C0F8  F0BA         	movff	_FatFs+1,auto_mount@fs+1
 13465                           
 13466                           ;tff.c: 669: if (!fs) return FR_NOT_ENABLED;
 13467  000FE6  0100               	movlb	0	; () banked
 13468  000FE8  51B9               	movf	auto_mount@fs& (0+255),w,b
 13469  000FEA  11BA               	iorwf	(auto_mount@fs+1)& (0+255),w,b
 13470  000FEC  A4D8               	btfss	status,2,c
 13471  000FEE  D002               	goto	l1245
 13472                           
 13473                           ; BSR set to: 0
 13474  000FF0  0E0A               	movlw	10
 13475                           
 13476                           ; BSR set to: 0
 13477  000FF2  0012               	return	
 13478  000FF4                     l1245:
 13479                           
 13480                           ; BSR set to: 0
 13481                           ;tff.c: 671: if (fs->fs_type) {
 13482                           
 13483                           ; BSR set to: 0
 13484  000FF4  EE20 F01C          	lfsr	2,28
 13485  000FF8  51B9               	movf	auto_mount@fs& (0+255),w,b
 13486  000FFA  26D9               	addwf	fsr2l,f,c
 13487  000FFC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13488  000FFE  22DA               	addwfc	fsr2h,f,c
 13489  001000  50DF               	movf	indf2,w,c
 13490  001002  B4D8               	btfsc	status,2,c
 13491  001004  D00F               	goto	l1248
 13492                           
 13493                           ; BSR set to: 0
 13494                           ;tff.c: 672: stat = disk_status(0);
 13495  001006  0E00               	movlw	0
 13496  001008  ECBD  F029         	call	_disk_status
 13497  00100C  0100               	movlb	0	; () banked
 13498  00100E  6FB4               	movwf	auto_mount@stat& (0+255),b
 13499                           
 13500                           ; BSR set to: 0
 13501                           ;tff.c: 673: if (!(stat & 0x01)) {
 13502  001010  B1B4               	btfsc	auto_mount@stat& (0+255),0,b
 13503  001012  D008               	goto	l1248
 13504                           
 13505                           ; BSR set to: 0
 13506                           ;tff.c: 675: if (chk_wp && (stat & 0x04))
 13507  001014  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 13508  001016  A4D8               	btfss	status,2,c
 13509                           
 13510                           ; BSR set to: 0
 13511  001018  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 13512  00101A  D002               	goto	l1249
 13513                           
 13514                           ; BSR set to: 0
 13515                           ;tff.c: 676: return FR_WRITE_PROTECTED;
 13516  00101C  0E09               	movlw	9
 13517                           
 13518                           ; BSR set to: 0
 13519  00101E  0012               	return	
 13520  001020                     l1249:
 13521                           
 13522                           ; BSR set to: 0
 13523                           ;tff.c: 678: return FR_OK;
 13524                           
 13525                           ; BSR set to: 0
 13526  001020  0E00               	movlw	0
 13527                           
 13528                           ; BSR set to: 0
 13529  001022  0012               	return	
 13530  001024                     l1248:
 13531                           
 13532                           ; BSR set to: 0
 13533                           ;tff.c: 679: }
 13534                           ;tff.c: 680: }
 13535                           ;tff.c: 684: memset(fs, 0, sizeof(FATFS));
 13536                           
 13537                           ; BSR set to: 0
 13538                           
 13539                           ; BSR set to: 0
 13540  001024  C0B9  F060         	movff	auto_mount@fs,memset@p1
 13541  001028  C0BA  F061         	movff	auto_mount@fs+1,memset@p1+1
 13542  00102C  0E00               	movlw	0
 13543  00102E  6F63               	movwf	(memset@c+1)& (0+255),b
 13544  001030  0E00               	movlw	0
 13545  001032  6F62               	movwf	memset@c& (0+255),b
 13546  001034  0E02               	movlw	2
 13547  001036  6F65               	movwf	(memset@n+1)& (0+255),b
 13548  001038  0E20               	movlw	32
 13549  00103A  6F64               	movwf	memset@n& (0+255),b
 13550  00103C  EC06  F02B         	call	_memset	;wreg free
 13551                           
 13552                           ;tff.c: 685: stat = disk_initialize(0);
 13553  001040  0E00               	movlw	0
 13554  001042  ECCB  F02A         	call	_disk_initialize
 13555  001046  0100               	movlb	0	; () banked
 13556  001048  6FB4               	movwf	auto_mount@stat& (0+255),b
 13557                           
 13558                           ; BSR set to: 0
 13559                           ;tff.c: 686: if (stat & 0x01)
 13560  00104A  A1B4               	btfss	auto_mount@stat& (0+255),0,b
 13561  00104C  D002               	goto	l1250
 13562                           
 13563                           ; BSR set to: 0
 13564                           ;tff.c: 687: return FR_NOT_READY;
 13565  00104E  0E01               	movlw	1
 13566                           
 13567                           ; BSR set to: 0
 13568  001050  0012               	return	
 13569  001052                     l1250:
 13570                           
 13571                           ; BSR set to: 0
 13572                           ;tff.c: 689: if (chk_wp && (stat & 0x04))
 13573                           
 13574                           ; BSR set to: 0
 13575  001052  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 13576  001054  A4D8               	btfss	status,2,c
 13577                           
 13578                           ; BSR set to: 0
 13579  001056  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 13580  001058  D002               	goto	l1251
 13581                           
 13582                           ; BSR set to: 0
 13583                           ;tff.c: 690: return FR_WRITE_PROTECTED;
 13584  00105A  0E09               	movlw	9
 13585                           
 13586                           ; BSR set to: 0
 13587  00105C  0012               	return	
 13588  00105E                     l1251:
 13589                           
 13590                           ; BSR set to: 0
 13591                           ;tff.c: 694: fmt = check_fs(bootsect = 0);
 13592                           
 13593                           ; BSR set to: 0
 13594  00105E  0E00               	movlw	0
 13595  001060  6FA9               	movwf	auto_mount@bootsect& (0+255),b
 13596  001062  0E00               	movlw	0
 13597  001064  6FAA               	movwf	(auto_mount@bootsect+1)& (0+255),b
 13598  001066  0E00               	movlw	0
 13599  001068  6FAB               	movwf	(auto_mount@bootsect+2)& (0+255),b
 13600  00106A  0E00               	movlw	0
 13601  00106C  6FAC               	movwf	(auto_mount@bootsect+3)& (0+255),b
 13602  00106E  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 13603  001072  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 13604  001076  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 13605  00107A  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 13606  00107E  ECAE  F025         	call	_check_fs	;wreg free
 13607  001082  0100               	movlb	0	; () banked
 13608  001084  6FB3               	movwf	auto_mount@fmt& (0+255),b
 13609                           
 13610                           ; BSR set to: 0
 13611                           ;tff.c: 696: if (fmt == 1) {
 13612  001086  05B3               	decf	auto_mount@fmt& (0+255),w,b
 13613  001088  A4D8               	btfss	status,2,c
 13614  00108A  D023               	goto	l1253
 13615                           
 13616                           ; BSR set to: 0
 13617                           ;tff.c: 698: if (fs->win[446+4]) {
 13618  00108C  EE21 F0E2          	lfsr	2,482
 13619  001090  51B9               	movf	auto_mount@fs& (0+255),w,b
 13620  001092  26D9               	addwf	fsr2l,f,c
 13621  001094  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13622  001096  22DA               	addwfc	fsr2h,f,c
 13623  001098  50DF               	movf	indf2,w,c
 13624  00109A  B4D8               	btfsc	status,2,c
 13625  00109C  D01A               	goto	l1253
 13626                           
 13627                           ; BSR set to: 0
 13628                           ;tff.c: 699: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 13629  00109E  EE21 F0E6          	lfsr	2,486
 13630  0010A2  51B9               	movf	auto_mount@fs& (0+255),w,b
 13631  0010A4  26D9               	addwf	fsr2l,f,c
 13632  0010A6  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13633  0010A8  22DA               	addwfc	fsr2h,f,c
 13634  0010AA  CFDE F0A9          	movff	postinc2,auto_mount@bootsect
 13635  0010AE  CFDE F0AA          	movff	postinc2,auto_mount@bootsect+1
 13636  0010B2  CFDE F0AB          	movff	postinc2,auto_mount@bootsect+2
 13637  0010B6  CFDE F0AC          	movff	postinc2,auto_mount@bootsect+3
 13638                           
 13639                           ; BSR set to: 0
 13640                           ;tff.c: 700: fmt = check_fs(bootsect);
 13641  0010BA  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 13642  0010BE  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 13643  0010C2  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 13644  0010C6  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 13645  0010CA  ECAE  F025         	call	_check_fs	;wreg free
 13646  0010CE  0100               	movlb	0	; () banked
 13647  0010D0  6FB3               	movwf	auto_mount@fmt& (0+255),b
 13648  0010D2                     l1253:
 13649                           
 13650                           ; BSR set to: 0
 13651                           ;tff.c: 701: }
 13652                           ;tff.c: 702: }
 13653                           ;tff.c: 703: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])) != 512U)
 13654                           
 13655                           ; BSR set to: 0
 13656                           
 13657                           ; BSR set to: 0
 13658  0010D2  51B3               	movf	auto_mount@fmt& (0+255),w,b
 13659  0010D4  A4D8               	btfss	status,2,c
 13660  0010D6  D00C               	goto	u14930
 13661                           
 13662                           ; BSR set to: 0
 13663  0010D8  EE20 F02B          	lfsr	2,43
 13664  0010DC  51B9               	movf	auto_mount@fs& (0+255),w,b
 13665  0010DE  26D9               	addwf	fsr2l,f,c
 13666  0010E0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13667  0010E2  22DA               	addwfc	fsr2h,f,c
 13668  0010E4  50DE               	movf	postinc2,w,c
 13669  0010E6  E104               	bnz	l11214
 13670  0010E8  0E02               	movlw	2
 13671  0010EA  18DE               	xorwf	postinc2,w,c
 13672  0010EC  B4D8               	btfsc	status,2,c
 13673  0010EE  D002               	goto	l1254
 13674  0010F0                     u14930:
 13675  0010F0                     l11214:
 13676                           
 13677                           ; BSR set to: 0
 13678                           ;tff.c: 704: return FR_NO_FILESYSTEM;
 13679  0010F0  0E0B               	movlw	11
 13680                           
 13681                           ; BSR set to: 0
 13682  0010F2  0012               	return	
 13683  0010F4                     l1254:
 13684                           
 13685                           ; BSR set to: 0
 13686                           ;tff.c: 707: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 13687                           
 13688                           ; BSR set to: 0
 13689  0010F4  EE20 F036          	lfsr	2,54
 13690  0010F8  51B9               	movf	auto_mount@fs& (0+255),w,b
 13691  0010FA  26D9               	addwf	fsr2l,f,c
 13692  0010FC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13693  0010FE  22DA               	addwfc	fsr2h,f,c
 13694  001100  CFDE F096          	movff	postinc2,??_auto_mount
 13695  001104  CFDD F097          	movff	postdec2,??_auto_mount+1
 13696  001108  C096  F0B5         	movff	??_auto_mount,auto_mount@fatsize
 13697  00110C  C097  F0B6         	movff	??_auto_mount+1,auto_mount@fatsize+1
 13698  001110  6BB7               	clrf	(auto_mount@fatsize+2)& (0+255),b
 13699  001112  6BB8               	clrf	(auto_mount@fatsize+3)& (0+255),b
 13700                           
 13701                           ; BSR set to: 0
 13702                           ;tff.c: 708: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 13703  001114  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 13704  001116  11B6               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 13705  001118  11B7               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 13706  00111A  11B8               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 13707  00111C  A4D8               	btfss	status,2,c
 13708  00111E  D00E               	goto	l1257
 13709                           
 13710                           ; BSR set to: 0
 13711  001120  EE20 F044          	lfsr	2,68
 13712  001124  51B9               	movf	auto_mount@fs& (0+255),w,b
 13713  001126  26D9               	addwf	fsr2l,f,c
 13714  001128  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13715  00112A  22DA               	addwfc	fsr2h,f,c
 13716  00112C  CFDE F0B5          	movff	postinc2,auto_mount@fatsize
 13717  001130  CFDE F0B6          	movff	postinc2,auto_mount@fatsize+1
 13718  001134  CFDE F0B7          	movff	postinc2,auto_mount@fatsize+2
 13719  001138  CFDE F0B8          	movff	postinc2,auto_mount@fatsize+3
 13720  00113C                     l1257:
 13721                           
 13722                           ; BSR set to: 0
 13723                           ;tff.c: 709: fs->sects_fat = (CLUST)fatsize;
 13724  00113C  EE20 F014          	lfsr	2,20
 13725  001140  51B9               	movf	auto_mount@fs& (0+255),w,b
 13726  001142  26D9               	addwf	fsr2l,f,c
 13727  001144  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13728  001146  22DA               	addwfc	fsr2h,f,c
 13729  001148  C0B5  FFDE         	movff	auto_mount@fatsize,postinc2
 13730  00114C  C0B6  FFDD         	movff	auto_mount@fatsize+1,postdec2
 13731                           
 13732                           ; BSR set to: 0
 13733                           ;tff.c: 710: fs->n_fats = fs->win[16];
 13734  001150  EE20 F030          	lfsr	2,48
 13735  001154  51B9               	movf	auto_mount@fs& (0+255),w,b
 13736  001156  26D9               	addwf	fsr2l,f,c
 13737  001158  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13738  00115A  22DA               	addwfc	fsr2h,f,c
 13739  00115C  EE10 F01E          	lfsr	1,30
 13740  001160  51B9               	movf	auto_mount@fs& (0+255),w,b
 13741  001162  26E1               	addwf	fsr1l,f,c
 13742  001164  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13743  001166  22E2               	addwfc	fsr1h,f,c
 13744  001168  CFDF FFE7          	movff	indf2,indf1
 13745                           
 13746                           ; BSR set to: 0
 13747                           ;tff.c: 711: fatsize *= fs->n_fats;
 13748  00116C  C0B5  F060         	movff	auto_mount@fatsize,___lmul@multiplier
 13749  001170  C0B6  F061         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 13750  001174  C0B7  F062         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 13751  001178  C0B8  F063         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 13752  00117C  EE20 F01E          	lfsr	2,30
 13753  001180  51B9               	movf	auto_mount@fs& (0+255),w,b
 13754  001182  26D9               	addwf	fsr2l,f,c
 13755  001184  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13756  001186  22DA               	addwfc	fsr2h,f,c
 13757  001188  50DF               	movf	indf2,w,c
 13758  00118A  6F96               	movwf	??_auto_mount& (0+255),b
 13759  00118C  5196               	movf	??_auto_mount& (0+255),w,b
 13760  00118E  6F64               	movwf	___lmul@multiplicand& (0+255),b
 13761  001190  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 13762  001192  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 13763  001194  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 13764  001196  EC7B  F028         	call	___lmul	;wreg free
 13765  00119A  C060  F0B5         	movff	?___lmul,auto_mount@fatsize
 13766  00119E  C061  F0B6         	movff	?___lmul+1,auto_mount@fatsize+1
 13767  0011A2  C062  F0B7         	movff	?___lmul+2,auto_mount@fatsize+2
 13768  0011A6  C063  F0B8         	movff	?___lmul+3,auto_mount@fatsize+3
 13769                           
 13770                           ;tff.c: 712: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 13771  0011AA  0100               	movlb	0	; () banked
 13772  0011AC  EE20 F02E          	lfsr	2,46
 13773  0011B0  51B9               	movf	auto_mount@fs& (0+255),w,b
 13774  0011B2  26D9               	addwf	fsr2l,f,c
 13775  0011B4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13776  0011B6  22DA               	addwfc	fsr2h,f,c
 13777  0011B8  CFDE F096          	movff	postinc2,??_auto_mount
 13778  0011BC  CFDD F097          	movff	postdec2,??_auto_mount+1
 13779  0011C0  5196               	movf	??_auto_mount& (0+255),w,b
 13780  0011C2  25A9               	addwf	auto_mount@bootsect& (0+255),w,b
 13781  0011C4  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 13782  0011C6  5197               	movf	(??_auto_mount+1)& (0+255),w,b
 13783  0011C8  21AA               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 13784  0011CA  6F99               	movwf	(??_auto_mount+3)& (0+255),b
 13785  0011CC  0E00               	movlw	0
 13786  0011CE  21AB               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 13787  0011D0  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 13788  0011D2  0E00               	movlw	0
 13789  0011D4  21AC               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 13790  0011D6  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 13791  0011D8  EE20 F008          	lfsr	2,8
 13792  0011DC  51B9               	movf	auto_mount@fs& (0+255),w,b
 13793  0011DE  26D9               	addwf	fsr2l,f,c
 13794  0011E0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13795  0011E2  22DA               	addwfc	fsr2h,f,c
 13796  0011E4  C098  FFDE         	movff	??_auto_mount+2,postinc2
 13797  0011E8  C099  FFDE         	movff	??_auto_mount+3,postinc2
 13798  0011EC  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 13799  0011F0  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 13800                           
 13801                           ; BSR set to: 0
 13802                           ;tff.c: 713: fs->csize = fs->win[13];
 13803  0011F4  EE20 F02D          	lfsr	2,45
 13804  0011F8  51B9               	movf	auto_mount@fs& (0+255),w,b
 13805  0011FA  26D9               	addwf	fsr2l,f,c
 13806  0011FC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13807  0011FE  22DA               	addwfc	fsr2h,f,c
 13808  001200  EE10 F01D          	lfsr	1,29
 13809  001204  51B9               	movf	auto_mount@fs& (0+255),w,b
 13810  001206  26E1               	addwf	fsr1l,f,c
 13811  001208  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13812  00120A  22E2               	addwfc	fsr1h,f,c
 13813  00120C  CFDF FFE7          	movff	indf2,indf1
 13814                           
 13815                           ; BSR set to: 0
 13816                           ;tff.c: 714: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 13817  001210  EE20 F031          	lfsr	2,49
 13818  001214  51B9               	movf	auto_mount@fs& (0+255),w,b
 13819  001216  26D9               	addwf	fsr2l,f,c
 13820  001218  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13821  00121A  22DA               	addwfc	fsr2h,f,c
 13822  00121C  EE10 F002          	lfsr	1,2
 13823  001220  51B9               	movf	auto_mount@fs& (0+255),w,b
 13824  001222  26E1               	addwf	fsr1l,f,c
 13825  001224  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13826  001226  22E2               	addwfc	fsr1h,f,c
 13827  001228  CFDE FFE6          	movff	postinc2,postinc1
 13828  00122C  CFDD FFE5          	movff	postdec2,postdec1
 13829                           
 13830                           ; BSR set to: 0
 13831                           ;tff.c: 715: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 13832  001230  EE20 F033          	lfsr	2,51
 13833  001234  51B9               	movf	auto_mount@fs& (0+255),w,b
 13834  001236  26D9               	addwf	fsr2l,f,c
 13835  001238  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13836  00123A  22DA               	addwfc	fsr2h,f,c
 13837  00123C  CFDE F096          	movff	postinc2,??_auto_mount
 13838  001240  CFDD F097          	movff	postdec2,??_auto_mount+1
 13839  001244  C096  F0AD         	movff	??_auto_mount,auto_mount@totalsect
 13840  001248  C097  F0AE         	movff	??_auto_mount+1,auto_mount@totalsect+1
 13841  00124C  6BAF               	clrf	(auto_mount@totalsect+2)& (0+255),b
 13842  00124E  6BB0               	clrf	(auto_mount@totalsect+3)& (0+255),b
 13843                           
 13844                           ; BSR set to: 0
 13845                           ;tff.c: 716: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 13846  001250  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 13847  001252  11AE               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 13848  001254  11AF               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 13849  001256  11B0               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 13850  001258  A4D8               	btfss	status,2,c
 13851  00125A  D00E               	goto	l1258
 13852                           
 13853                           ; BSR set to: 0
 13854  00125C  EE20 F040          	lfsr	2,64
 13855  001260  51B9               	movf	auto_mount@fs& (0+255),w,b
 13856  001262  26D9               	addwf	fsr2l,f,c
 13857  001264  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13858  001266  22DA               	addwfc	fsr2h,f,c
 13859  001268  CFDE F0AD          	movff	postinc2,auto_mount@totalsect
 13860  00126C  CFDE F0AE          	movff	postinc2,auto_mount@totalsect+1
 13861  001270  CFDE F0AF          	movff	postinc2,auto_mount@totalsect+2
 13862  001274  CFDE F0B0          	movff	postinc2,auto_mount@totalsect+3
 13863  001278                     l1258:
 13864                           
 13865                           ; BSR set to: 0
 13866                           ;tff.c: 717: fs->max_clust = maxclust = (totalsect
 13867                           ;tff.c: 718: - (WORD)(*(WORD*)(BYTE*)(&fs->win[14])) - fatsize - fs->n_rootdir / 16
 13868                           ;tff.c: 719: ) / fs->csize + 2;
 13869                           
 13870                           ; BSR set to: 0
 13871  001278  EE20 F002          	lfsr	2,2
 13872  00127C  51B9               	movf	auto_mount@fs& (0+255),w,b
 13873  00127E  26D9               	addwf	fsr2l,f,c
 13874  001280  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13875  001282  22DA               	addwfc	fsr2h,f,c
 13876  001284  CFDE F096          	movff	postinc2,??_auto_mount
 13877  001288  CFDD F097          	movff	postdec2,??_auto_mount+1
 13878  00128C  0E04               	movlw	4
 13879  00128E  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 13880  001290                     u14965:
 13881  001290  90D8               	bcf	status,0,c
 13882  001292  3397               	rrcf	(??_auto_mount+1)& (0+255),f,b
 13883  001294  3396               	rrcf	??_auto_mount& (0+255),f,b
 13884  001296  2F98               	decfsz	(??_auto_mount+2)& (0+255),f,b
 13885  001298  D7FB               	goto	u14965
 13886  00129A  EE20 F02E          	lfsr	2,46
 13887  00129E  51B9               	movf	auto_mount@fs& (0+255),w,b
 13888  0012A0  26D9               	addwf	fsr2l,f,c
 13889  0012A2  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13890  0012A4  22DA               	addwfc	fsr2h,f,c
 13891  0012A6  CFDE F099          	movff	postinc2,??_auto_mount+3
 13892  0012AA  CFDD F09A          	movff	postdec2,??_auto_mount+4
 13893  0012AE  5199               	movf	(??_auto_mount+3)& (0+255),w,b
 13894  0012B0  2596               	addwf	??_auto_mount& (0+255),w,b
 13895  0012B2  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 13896  0012B4  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 13897  0012B6  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 13898  0012B8  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 13899  0012BA  6B9D               	clrf	(??_auto_mount+7)& (0+255),b
 13900  0012BC  B0D8               	btfsc	status,0,c
 13901  0012BE  2B9D               	incf	(??_auto_mount+7)& (0+255),f,b
 13902  0012C0  6B9E               	clrf	(??_auto_mount+8)& (0+255),b
 13903  0012C2  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 13904  0012C4  259B               	addwf	(??_auto_mount+5)& (0+255),w,b
 13905  0012C6  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 13906  0012C8  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 13907  0012CA  219C               	addwfc	(??_auto_mount+6)& (0+255),w,b
 13908  0012CC  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 13909  0012CE  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 13910  0012D0  219D               	addwfc	(??_auto_mount+7)& (0+255),w,b
 13911  0012D2  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 13912  0012D4  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 13913  0012D6  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 13914  0012D8  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 13915  0012DA  1F9F               	comf	(??_auto_mount+9)& (0+255),f,b
 13916  0012DC  1FA0               	comf	(??_auto_mount+10)& (0+255),f,b
 13917  0012DE  1FA1               	comf	(??_auto_mount+11)& (0+255),f,b
 13918  0012E0  1FA2               	comf	(??_auto_mount+12)& (0+255),f,b
 13919  0012E2  2B9F               	incf	(??_auto_mount+9)& (0+255),f,b
 13920  0012E4  0E00               	movlw	0
 13921  0012E6  23A0               	addwfc	(??_auto_mount+10)& (0+255),f,b
 13922  0012E8  23A1               	addwfc	(??_auto_mount+11)& (0+255),f,b
 13923  0012EA  23A2               	addwfc	(??_auto_mount+12)& (0+255),f,b
 13924  0012EC  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 13925  0012EE  259F               	addwf	(??_auto_mount+9)& (0+255),w,b
 13926  0012F0  6F60               	movwf	___lldiv@dividend& (0+255),b
 13927  0012F2  51AE               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 13928  0012F4  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 13929  0012F6  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 13930  0012F8  51AF               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 13931  0012FA  21A1               	addwfc	(??_auto_mount+11)& (0+255),w,b
 13932  0012FC  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 13933  0012FE  51B0               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 13934  001300  21A2               	addwfc	(??_auto_mount+12)& (0+255),w,b
 13935  001302  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 13936  001304  EE20 F01D          	lfsr	2,29
 13937  001308  51B9               	movf	auto_mount@fs& (0+255),w,b
 13938  00130A  26D9               	addwf	fsr2l,f,c
 13939  00130C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13940  00130E  22DA               	addwfc	fsr2h,f,c
 13941  001310  50DF               	movf	indf2,w,c
 13942  001312  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 13943  001314  51A3               	movf	(??_auto_mount+13)& (0+255),w,b
 13944  001316  6F64               	movwf	___lldiv@divisor& (0+255),b
 13945  001318  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13946  00131A  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13947  00131C  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13948  00131E  ECBD  F026         	call	___lldiv	;wreg free
 13949  001322  0E02               	movlw	2
 13950  001324  0100               	movlb	0	; () banked
 13951  001326  2560               	addwf	?___lldiv& (0+255),w,b
 13952  001328  6FA5               	movwf	auto_mount@maxclust& (0+255),b
 13953  00132A  0E00               	movlw	0
 13954  00132C  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 13955  00132E  6FA6               	movwf	(auto_mount@maxclust+1)& (0+255),b
 13956  001330  0E00               	movlw	0
 13957  001332  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
 13958  001334  6FA7               	movwf	(auto_mount@maxclust+2)& (0+255),b
 13959  001336  0E00               	movlw	0
 13960  001338  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
 13961  00133A  6FA8               	movwf	(auto_mount@maxclust+3)& (0+255),b
 13962  00133C  EE20 F016          	lfsr	2,22
 13963  001340  51B9               	movf	auto_mount@fs& (0+255),w,b
 13964  001342  26D9               	addwf	fsr2l,f,c
 13965  001344  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13966  001346  22DA               	addwfc	fsr2h,f,c
 13967  001348  C0A5  FFDE         	movff	auto_mount@maxclust,postinc2
 13968  00134C  C0A6  FFDD         	movff	auto_mount@maxclust+1,postdec2
 13969                           
 13970                           ; BSR set to: 0
 13971                           ;tff.c: 721: fmt = 1;
 13972  001350  0E01               	movlw	1
 13973  001352  6FB3               	movwf	auto_mount@fmt& (0+255),b
 13974                           
 13975                           ; BSR set to: 0
 13976                           ;tff.c: 722: if (maxclust >= 0xFF7) fmt = 2;
 13977  001354  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 13978  001356  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 13979  001358  E106               	bnz	u14970
 13980  00135A  0EF7               	movlw	247
 13981  00135C  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 13982  00135E  0E0F               	movlw	15
 13983  001360  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 13984  001362  A0D8               	btfss	status,0,c
 13985  001364  D002               	goto	l1259
 13986  001366                     u14970:
 13987                           
 13988                           ; BSR set to: 0
 13989  001366  0E02               	movlw	2
 13990  001368  6FB3               	movwf	auto_mount@fmt& (0+255),b
 13991  00136A                     l1259:
 13992                           
 13993                           ; BSR set to: 0
 13994                           ;tff.c: 723: if (maxclust >= 0xFFF7)
 13995                           
 13996                           ; BSR set to: 0
 13997  00136A  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 13998  00136C  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 13999  00136E  E106               	bnz	u14980
 14000  001370  0EF7               	movlw	247
 14001  001372  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 14002  001374  0EFF               	movlw	255
 14003  001376  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 14004  001378  A0D8               	btfss	status,0,c
 14005  00137A  D002               	goto	l1260
 14006  00137C                     u14980:
 14007                           
 14008                           ; BSR set to: 0
 14009                           ;tff.c: 725: return FR_NO_FILESYSTEM;
 14010  00137C  0E0B               	movlw	11
 14011                           
 14012                           ; BSR set to: 0
 14013  00137E  0012               	return	
 14014  001380                     l1260:
 14015                           
 14016                           ; BSR set to: 0
 14017                           ;tff.c: 732: fs->dirbase = fs->fatbase + fatsize;
 14018                           
 14019                           ; BSR set to: 0
 14020  001380  EE20 F008          	lfsr	2,8
 14021  001384  51B9               	movf	auto_mount@fs& (0+255),w,b
 14022  001386  26D9               	addwf	fsr2l,f,c
 14023  001388  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14024  00138A  22DA               	addwfc	fsr2h,f,c
 14025  00138C  CFDE F096          	movff	postinc2,??_auto_mount
 14026  001390  CFDE F097          	movff	postinc2,??_auto_mount+1
 14027  001394  CFDE F098          	movff	postinc2,??_auto_mount+2
 14028  001398  CFDE F099          	movff	postinc2,??_auto_mount+3
 14029  00139C  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 14030  00139E  2596               	addwf	??_auto_mount& (0+255),w,b
 14031  0013A0  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 14032  0013A2  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 14033  0013A4  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 14034  0013A6  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 14035  0013A8  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 14036  0013AA  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 14037  0013AC  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 14038  0013AE  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 14039  0013B0  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 14040  0013B2  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 14041  0013B4  EE20 F00C          	lfsr	2,12
 14042  0013B8  51B9               	movf	auto_mount@fs& (0+255),w,b
 14043  0013BA  26D9               	addwf	fsr2l,f,c
 14044  0013BC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14045  0013BE  22DA               	addwfc	fsr2h,f,c
 14046  0013C0  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 14047  0013C4  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 14048  0013C8  C09C  FFDE         	movff	??_auto_mount+6,postinc2
 14049  0013CC  C09D  FFDE         	movff	??_auto_mount+7,postinc2
 14050                           
 14051                           ;tff.c: 733: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 14052  0013D0  EE20 F008          	lfsr	2,8
 14053  0013D4  51B9               	movf	auto_mount@fs& (0+255),w,b
 14054  0013D6  26D9               	addwf	fsr2l,f,c
 14055  0013D8  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14056  0013DA  22DA               	addwfc	fsr2h,f,c
 14057  0013DC  CFDE F096          	movff	postinc2,??_auto_mount
 14058  0013E0  CFDE F097          	movff	postinc2,??_auto_mount+1
 14059  0013E4  CFDE F098          	movff	postinc2,??_auto_mount+2
 14060  0013E8  CFDE F099          	movff	postinc2,??_auto_mount+3
 14061  0013EC  EE20 F002          	lfsr	2,2
 14062  0013F0  51B9               	movf	auto_mount@fs& (0+255),w,b
 14063  0013F2  26D9               	addwf	fsr2l,f,c
 14064  0013F4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14065  0013F6  22DA               	addwfc	fsr2h,f,c
 14066  0013F8  CFDE F09A          	movff	postinc2,??_auto_mount+4
 14067  0013FC  CFDD F09B          	movff	postdec2,??_auto_mount+5
 14068  001400  0E04               	movlw	4
 14069  001402  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 14070  001404                     u14995:
 14071  001404  90D8               	bcf	status,0,c
 14072  001406  339B               	rrcf	(??_auto_mount+5)& (0+255),f,b
 14073  001408  339A               	rrcf	(??_auto_mount+4)& (0+255),f,b
 14074  00140A  2F9C               	decfsz	(??_auto_mount+6)& (0+255),f,b
 14075  00140C  D7FB               	goto	u14995
 14076  00140E  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 14077  001410  2596               	addwf	??_auto_mount& (0+255),w,b
 14078  001412  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 14079  001414  519B               	movf	(??_auto_mount+5)& (0+255),w,b
 14080  001416  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 14081  001418  6F9E               	movwf	(??_auto_mount+8)& (0+255),b
 14082  00141A  0E00               	movlw	0
 14083  00141C  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 14084  00141E  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 14085  001420  0E00               	movlw	0
 14086  001422  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 14087  001424  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 14088  001426  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 14089  001428  259D               	addwf	(??_auto_mount+7)& (0+255),w,b
 14090  00142A  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 14091  00142C  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 14092  00142E  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 14093  001430  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 14094  001432  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 14095  001434  219F               	addwfc	(??_auto_mount+9)& (0+255),w,b
 14096  001436  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 14097  001438  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 14098  00143A  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 14099  00143C  6FA4               	movwf	(??_auto_mount+14)& (0+255),b
 14100  00143E  EE20 F010          	lfsr	2,16
 14101  001442  51B9               	movf	auto_mount@fs& (0+255),w,b
 14102  001444  26D9               	addwf	fsr2l,f,c
 14103  001446  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14104  001448  22DA               	addwfc	fsr2h,f,c
 14105  00144A  C0A1  FFDE         	movff	??_auto_mount+11,postinc2
 14106  00144E  C0A2  FFDE         	movff	??_auto_mount+12,postinc2
 14107  001452  C0A3  FFDE         	movff	??_auto_mount+13,postinc2
 14108  001456  C0A4  FFDE         	movff	??_auto_mount+14,postinc2
 14109                           
 14110                           ;tff.c: 737: fs->free_clust = (CLUST)0xFFFFFFFF;
 14111  00145A  EE20 F01A          	lfsr	2,26
 14112  00145E  51B9               	movf	auto_mount@fs& (0+255),w,b
 14113  001460  26D9               	addwf	fsr2l,f,c
 14114  001462  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14115  001464  22DA               	addwfc	fsr2h,f,c
 14116  001466  0EFF               	movlw	255
 14117  001468  6EDE               	movwf	postinc2,c
 14118  00146A  0EFF               	movlw	255
 14119  00146C  6EDD               	movwf	postdec2,c
 14120                           
 14121                           ;tff.c: 753: fs->fs_type = fmt;
 14122  00146E  EE20 F01C          	lfsr	2,28
 14123  001472  51B9               	movf	auto_mount@fs& (0+255),w,b
 14124  001474  26D9               	addwf	fsr2l,f,c
 14125  001476  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14126  001478  22DA               	addwfc	fsr2h,f,c
 14127  00147A  C0B3  FFDF         	movff	auto_mount@fmt,indf2
 14128                           
 14129                           ; BSR set to: 0
 14130                           ;tff.c: 754: fs->id = ++fsid;
 14131  00147E  4A2B               	infsnz	_fsid,f,c
 14132  001480  2A2C               	incf	_fsid+1,f,c
 14133  001482  C0B9  FFD9         	movff	auto_mount@fs,fsr2l
 14134  001486  C0BA  FFDA         	movff	auto_mount@fs+1,fsr2h
 14135  00148A  C02B  FFDE         	movff	_fsid,postinc2
 14136  00148E  C02C  FFDD         	movff	_fsid+1,postdec2
 14137                           
 14138                           ;tff.c: 755: return FR_OK;
 14139  001492  0E00               	movlw	0
 14140  001494  0012               	return	
 14141  001496                     __end_of_auto_mount:
 14142                           	opt stack 0
 14143                           tosu	equ	0xFFF
 14144                           tosh	equ	0xFFE
 14145                           tosl	equ	0xFFD
 14146                           pclath	equ	0xFFA
 14147                           tblptru	equ	0xFF8
 14148                           tblptrh	equ	0xFF7
 14149                           tblptrl	equ	0xFF6
 14150                           tablat	equ	0xFF5
 14151                           prodh	equ	0xFF4
 14152                           prodl	equ	0xFF3
 14153                           intcon	equ	0xFF2
 14154                           intcon2	equ	0xFF1
 14155                           intcon3	equ	0xFF0
 14156                           indf0	equ	0xFEF
 14157                           postinc0	equ	0xFEE
 14158                           fsr0h	equ	0xFEA
 14159                           fsr0l	equ	0xFE9
 14160                           wreg	equ	0xFE8
 14161                           indf1	equ	0xFE7
 14162                           postinc1	equ	0xFE6
 14163                           postdec1	equ	0xFE5
 14164                           plusw1	equ	0xFE3
 14165                           fsr1h	equ	0xFE2
 14166                           fsr1l	equ	0xFE1
 14167                           indf2	equ	0xFDF
 14168                           postinc2	equ	0xFDE
 14169                           postdec2	equ	0xFDD
 14170                           plusw2	equ	0xFDB
 14171                           fsr2h	equ	0xFDA
 14172                           fsr2l	equ	0xFD9
 14173                           status	equ	0xFD8
 14174                           
 14175 ;; *************** function _memset *****************
 14176 ;; Defined at:
 14177 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 14178 ;; Parameters:    Size  Location     Type
 14179 ;;  p1              2    0[BANK0 ] PTR void 
 14180 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 14181 ;;  c               2    2[BANK0 ] int 
 14182 ;;  n               2    4[BANK0 ] unsigned int 
 14183 ;; Auto vars:     Size  Location     Type
 14184 ;;  p               2    6[BANK0 ] PTR unsigned char 
 14185 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 14186 ;; Return value:  Size  Location     Type
 14187 ;;                  2    0[BANK0 ] PTR void 
 14188 ;; Registers used:
 14189 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14190 ;; Tracked objects:
 14191 ;;		On entry : 0/0
 14192 ;;		On exit  : 0/0
 14193 ;;		Unchanged: 0/0
 14194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14195 ;;      Params:         0       6       0       0       0       0       0       0       0
 14196 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14197 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14198 ;;      Totals:         0       8       0       0       0       0       0       0       0
 14199 ;;Total ram usage:        8 bytes
 14200 ;; Hardware stack levels used:    1
 14201 ;; Hardware stack levels required when called:    3
 14202 ;; This function calls:
 14203 ;;		Nothing
 14204 ;; This function is called by:
 14205 ;;		_make_dirfile
 14206 ;;		_reserve_direntry
 14207 ;;		_auto_mount
 14208 ;;		_f_open
 14209 ;; This function uses a non-reentrant model
 14210 ;;
 14211                           
 14212                           	psect	text45
 14213  00560C                     __ptext45:
 14214                           	opt stack 0
 14215  00560C                     _memset:
 14216                           	opt stack 21
 14217                           
 14218                           ; BSR set to: 0
 14219                           ;incstack = 0
 14220  00560C  C060  F066         	movff	memset@p1,memset@p
 14221  005610  C061  F067         	movff	memset@p1+1,memset@p+1
 14222  005614  D009               	goto	l1994
 14223  005616                     l10466:
 14224  005616  C066  FFD9         	movff	memset@p,fsr2l
 14225  00561A  C067  FFDA         	movff	memset@p+1,fsr2h
 14226  00561E  C062  FFDF         	movff	memset@c,indf2
 14227  005622  0100               	movlb	0	; () banked
 14228  005624  4B66               	infsnz	memset@p& (0+255),f,b
 14229  005626  2B67               	incf	(memset@p+1)& (0+255),f,b
 14230  005628                     l1994:
 14231                           
 14232                           ; BSR set to: 0
 14233  005628  0100               	movlb	0	; () banked
 14234  00562A  0764               	decf	memset@n& (0+255),f,b
 14235  00562C  A0D8               	btfss	status,0,c
 14236  00562E  0765               	decf	(memset@n+1)& (0+255),f,b
 14237  005630  2964               	incf	memset@n& (0+255),w,b
 14238  005632  E1F1               	bnz	l10466
 14239  005634  2965               	incf	(memset@n+1)& (0+255),w,b
 14240  005636  B4D8               	btfsc	status,2,c
 14241  005638  0012               	return	
 14242  00563A  D7ED               	goto	l1995
 14243  00563C                     __end_of_memset:
 14244                           	opt stack 0
 14245                           tosu	equ	0xFFF
 14246                           tosh	equ	0xFFE
 14247                           tosl	equ	0xFFD
 14248                           pclath	equ	0xFFA
 14249                           tblptru	equ	0xFF8
 14250                           tblptrh	equ	0xFF7
 14251                           tblptrl	equ	0xFF6
 14252                           tablat	equ	0xFF5
 14253                           prodh	equ	0xFF4
 14254                           prodl	equ	0xFF3
 14255                           intcon	equ	0xFF2
 14256                           intcon2	equ	0xFF1
 14257                           intcon3	equ	0xFF0
 14258                           indf0	equ	0xFEF
 14259                           postinc0	equ	0xFEE
 14260                           fsr0h	equ	0xFEA
 14261                           fsr0l	equ	0xFE9
 14262                           wreg	equ	0xFE8
 14263                           indf1	equ	0xFE7
 14264                           postinc1	equ	0xFE6
 14265                           postdec1	equ	0xFE5
 14266                           plusw1	equ	0xFE3
 14267                           fsr1h	equ	0xFE2
 14268                           fsr1l	equ	0xFE1
 14269                           indf2	equ	0xFDF
 14270                           postinc2	equ	0xFDE
 14271                           postdec2	equ	0xFDD
 14272                           plusw2	equ	0xFDB
 14273                           fsr2h	equ	0xFDA
 14274                           fsr2l	equ	0xFD9
 14275                           status	equ	0xFD8
 14276                           
 14277 ;; *************** function _disk_initialize *****************
 14278 ;; Defined at:
 14279 ;;		line 59 in file "bibliotecas/diskio.c"
 14280 ;; Parameters:    Size  Location     Type
 14281 ;;  pdrv            1    wreg     unsigned char 
 14282 ;; Auto vars:     Size  Location     Type
 14283 ;;  pdrv            1   32[BANK0 ] unsigned char 
 14284 ;;  result          2    0        int 
 14285 ;;  stat            1   33[BANK0 ] unsigned char 
 14286 ;; Return value:  Size  Location     Type
 14287 ;;                  1    wreg      unsigned char 
 14288 ;; Registers used:
 14289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14290 ;; Tracked objects:
 14291 ;;		On entry : 0/0
 14292 ;;		On exit  : 0/0
 14293 ;;		Unchanged: 0/0
 14294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14295 ;;      Params:         0       0       0       0       0       0       0       0       0
 14296 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14297 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14298 ;;      Totals:         0       2       0       0       0       0       0       0       0
 14299 ;;Total ram usage:        2 bytes
 14300 ;; Hardware stack levels used:    1
 14301 ;; Hardware stack levels required when called:    8
 14302 ;; This function calls:
 14303 ;;		_sdc_disk_initialize
 14304 ;; This function is called by:
 14305 ;;		_auto_mount
 14306 ;; This function uses a non-reentrant model
 14307 ;;
 14308                           
 14309                           	psect	text46
 14310  005596                     __ptext46:
 14311                           	opt stack 0
 14312  005596                     _disk_initialize:
 14313                           	opt stack 17
 14314                           
 14315                           ; BSR set to: 0
 14316                           ;incstack = 0
 14317                           ;disk_initialize@pdrv stored from wreg
 14318  005596  0100               	movlb	0	; () banked
 14319  005598  6F80               	movwf	disk_initialize@pdrv& (0+255),b
 14320                           
 14321                           ;diskio.c: 63: DSTATUS stat;
 14322                           ;diskio.c: 64: int result;
 14323                           ;diskio.c: 66: switch (pdrv) {
 14324  00559A  D00E               	goto	l551
 14325  00559C                     
 14326                           ;diskio.c: 68: stat = sdc_disk_initialize();
 14327  00559C  EC4A  F010         	call	_sdc_disk_initialize	;wreg free
 14328  0055A0  0100               	movlb	0	; () banked
 14329  0055A2  6F81               	movwf	disk_initialize@stat& (0+255),b
 14330                           
 14331                           ; BSR set to: 0
 14332                           ;diskio.c: 72: return stat;
 14333  0055A4  5181               	movf	disk_initialize@stat& (0+255),w,b
 14334                           
 14335                           ; BSR set to: 0
 14336  0055A6  0012               	return	
 14337  0055A8                     
 14338                           ; BSR set to: 0
 14339                           ;diskio.c: 75: stat = sdc_disk_initialize();
 14340                           
 14341                           ; BSR set to: 0
 14342  0055A8  EC4A  F010         	call	_sdc_disk_initialize	;wreg free
 14343  0055AC  0100               	movlb	0	; () banked
 14344  0055AE  6F81               	movwf	disk_initialize@stat& (0+255),b
 14345                           
 14346                           ; BSR set to: 0
 14347                           ;diskio.c: 79: return stat;
 14348  0055B0  5181               	movf	disk_initialize@stat& (0+255),w,b
 14349                           
 14350                           ; BSR set to: 0
 14351  0055B2  0012               	return	
 14352  0055B4                     
 14353                           ; BSR set to: 0
 14354                           ;diskio.c: 86: return stat;
 14355                           
 14356                           ; BSR set to: 0
 14357  0055B4  5181               	movf	disk_initialize@stat& (0+255),w,b
 14358                           
 14359                           ; BSR set to: 0
 14360  0055B6  0012               	return	
 14361  0055B8                     l551:
 14362                           
 14363                           ; BSR set to: 0
 14364  0055B8  0100               	movlb	0	; () banked
 14365  0055BA  5180               	movf	disk_initialize@pdrv& (0+255),w,b
 14366                           
 14367                           ; Switch size 1, requested type "space"
 14368                           ; Number of cases is 3, Range of values is 0 to 2
 14369                           ; switch strategies available:
 14370                           ; Name         Instructions Cycles
 14371                           ; simple_byte           10     6 (average)
 14372                           ;	Chosen strategy is simple_byte
 14373  0055BC  0A00               	xorlw	0	; case 0
 14374  0055BE  B4D8               	btfsc	status,2,c
 14375  0055C0  D7ED               	goto	l552
 14376  0055C2  0A01               	xorlw	1	; case 1
 14377  0055C4  B4D8               	btfsc	status,2,c
 14378  0055C6  D7F0               	goto	l554
 14379  0055C8  0A03               	xorlw	3	; case 2
 14380  0055CA  B4D8               	btfsc	status,2,c
 14381  0055CC  D7F3               	goto	l555
 14382                           
 14383                           ; BSR set to: 0
 14384                           ;diskio.c: 88: return 0x01;
 14385                           
 14386                           ; BSR set to: 0
 14387  0055CE  0E01               	movlw	1
 14388  0055D0  0012               	return	
 14389  0055D2                     __end_of_disk_initialize:
 14390                           	opt stack 0
 14391                           tosu	equ	0xFFF
 14392                           tosh	equ	0xFFE
 14393                           tosl	equ	0xFFD
 14394                           pclath	equ	0xFFA
 14395                           tblptru	equ	0xFF8
 14396                           tblptrh	equ	0xFF7
 14397                           tblptrl	equ	0xFF6
 14398                           tablat	equ	0xFF5
 14399                           prodh	equ	0xFF4
 14400                           prodl	equ	0xFF3
 14401                           intcon	equ	0xFF2
 14402                           intcon2	equ	0xFF1
 14403                           intcon3	equ	0xFF0
 14404                           indf0	equ	0xFEF
 14405                           postinc0	equ	0xFEE
 14406                           fsr0h	equ	0xFEA
 14407                           fsr0l	equ	0xFE9
 14408                           wreg	equ	0xFE8
 14409                           indf1	equ	0xFE7
 14410                           postinc1	equ	0xFE6
 14411                           postdec1	equ	0xFE5
 14412                           plusw1	equ	0xFE3
 14413                           fsr1h	equ	0xFE2
 14414                           fsr1l	equ	0xFE1
 14415                           indf2	equ	0xFDF
 14416                           postinc2	equ	0xFDE
 14417                           postdec2	equ	0xFDD
 14418                           plusw2	equ	0xFDB
 14419                           fsr2h	equ	0xFDA
 14420                           fsr2l	equ	0xFD9
 14421                           status	equ	0xFD8
 14422                           
 14423 ;; *************** function _sdc_disk_initialize *****************
 14424 ;; Defined at:
 14425 ;;		line 275 in file "bibliotecas/diskio.c"
 14426 ;; Parameters:    Size  Location     Type
 14427 ;;		None
 14428 ;; Auto vars:     Size  Location     Type
 14429 ;;  count2          2   29[BANK0 ] int 
 14430 ;;  crc_number      2   25[BANK0 ] int 
 14431 ;;  count1          2   23[BANK0 ] int 
 14432 ;;  i               2   20[BANK0 ] int 
 14433 ;;  buff            1   31[BANK0 ] unsigned char 
 14434 ;;  ocr             1   28[BANK0 ] unsigned char 
 14435 ;;  buff_i          1   27[BANK0 ] unsigned char 
 14436 ;;  stat            1   22[BANK0 ] unsigned char 
 14437 ;; Return value:  Size  Location     Type
 14438 ;;                  1    wreg      unsigned char 
 14439 ;; Registers used:
 14440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14441 ;; Tracked objects:
 14442 ;;		On entry : 0/0
 14443 ;;		On exit  : 0/0
 14444 ;;		Unchanged: 0/0
 14445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14446 ;;      Params:         0       0       0       0       0       0       0       0       0
 14447 ;;      Locals:         0      12       0       0       0       0       0       0       0
 14448 ;;      Temps:          0       1       0       0       0       0       0       0       0
 14449 ;;      Totals:         0      13       0       0       0       0       0       0       0
 14450 ;;Total ram usage:       13 bytes
 14451 ;; Hardware stack levels used:    1
 14452 ;; Hardware stack levels required when called:    7
 14453 ;; This function calls:
 14454 ;;		_command
 14455 ;;		_dummy_clocks
 14456 ;;		_escreve_frase_ram_lcd
 14457 ;;		_posicao_cursor_lcd
 14458 ;;		_proceed
 14459 ;;		_response
 14460 ;;		_sdc_reset
 14461 ;; This function is called by:
 14462 ;;		_disk_initialize
 14463 ;; This function uses a non-reentrant model
 14464 ;;
 14465                           
 14466                           	psect	text47
 14467  002094                     __ptext47:
 14468                           	opt stack 0
 14469  002094                     _sdc_disk_initialize:
 14470                           	opt stack 17
 14471                           
 14472                           ;diskio.c: 277: BYTE ocr;
 14473                           ;diskio.c: 278: DSTATUS stat;
 14474                           ;diskio.c: 279: int i = 0, count1 = 0, count2 = 0;
 14475                           
 14476                           ; BSR set to: 0
 14477                           ;incstack = 0
 14478  002094  0E00               	movlw	0
 14479  002096  0100               	movlb	0	; () banked
 14480  002098  6F75               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
 14481  00209A  0E00               	movlw	0
 14482  00209C  6F74               	movwf	sdc_disk_initialize@i& (0+255),b
 14483  00209E  0E00               	movlw	0
 14484  0020A0  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 14485  0020A2  0E00               	movlw	0
 14486  0020A4  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 14487  0020A6  0E00               	movlw	0
 14488  0020A8  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14489  0020AA  0E00               	movlw	0
 14490  0020AC  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 14491                           
 14492                           ;diskio.c: 280: BYTE buff = 0;
 14493  0020AE  0E00               	movlw	0
 14494  0020B0  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14495                           
 14496                           ; BSR set to: 0
 14497                           ;diskio.c: 281: BYTE buff_i;
 14498                           ;diskio.c: 282: int crc_number;
 14499                           ;diskio.c: 283: _delay((unsigned long)((1)*(48000000/4000.0)));
 14500  0020B2  0E10               	movlw	16
 14501  0020B4  0100               	movlb	0	; () banked
 14502  0020B6  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 14503  0020B8  0E94               	movlw	148
 14504  0020BA                     u17717:
 14505  0020BA  2EE8               	decfsz	wreg,f,c
 14506  0020BC  D7FE               	bra	u17717
 14507  0020BE  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 14508  0020C0  D7FC               	bra	u17717
 14509  0020C2  F000               	nop	
 14510                           
 14511                           ;diskio.c: 284: dummy_clocks(100);
 14512  0020C4  0E64               	movlw	100
 14513  0020C6  EC49  F02A         	call	_dummy_clocks
 14514                           
 14515                           ;diskio.c: 287: sdc_reset();
 14516  0020CA  EC9B  F023         	call	_sdc_reset	;wreg free
 14517                           
 14518                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 14519  0020CE  0EAA               	movlw	170
 14520  0020D0  0100               	movlb	0	; () banked
 14521  0020D2  6F65               	movwf	command@arg& (0+255),b
 14522  0020D4  0E01               	movlw	1
 14523  0020D6  6F66               	movwf	(command@arg+1)& (0+255),b
 14524  0020D8  0E00               	movlw	0
 14525  0020DA  6F67               	movwf	(command@arg+2)& (0+255),b
 14526  0020DC  0E00               	movlw	0
 14527  0020DE  6F68               	movwf	(command@arg+3)& (0+255),b
 14528  0020E0  0E87               	movlw	135
 14529  0020E2  6F69               	movwf	command@CRC& (0+255),b
 14530  0020E4  0E48               	movlw	72
 14531  0020E6  EC1A  F028         	call	_command
 14532                           
 14533                           ;diskio.c: 289: proceed();
 14534  0020EA  EC38  F02C         	call	_proceed	;wreg free
 14535  0020EE                     
 14536                           ;diskio.c: 291: buff_i = response();
 14537  0020EE  EC1E  F02C         	call	_response	;wreg free
 14538  0020F2  0100               	movlb	0	; () banked
 14539  0020F4  6F7B               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 14540                           
 14541                           ; BSR set to: 0
 14542                           ;diskio.c: 292: if(buff_i == 1)
 14543  0020F6  057B               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 14544  0020F8  A4D8               	btfss	status,2,c
 14545  0020FA  D004               	goto	l594
 14546                           
 14547                           ; BSR set to: 0
 14548                           ;diskio.c: 293: {
 14549                           ;diskio.c: 294: crc_number = buff_i<<8;
 14550  0020FC  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 14551  0020FE  6F7A               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 14552  002100  6B79               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 14553                           
 14554                           ;diskio.c: 295: }
 14555  002102  D006               	goto	l596
 14556  002104                     l594:
 14557                           
 14558                           ; BSR set to: 0
 14559                           ;diskio.c: 296: else if(buff_i==0xAA)
 14560                           
 14561                           ; BSR set to: 0
 14562  002104  0EAA               	movlw	170
 14563  002106  197B               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 14564  002108  A4D8               	btfss	status,2,c
 14565  00210A  D002               	goto	l596
 14566                           
 14567                           ; BSR set to: 0
 14568                           ;diskio.c: 297: {
 14569                           ;diskio.c: 298: crc_number |= buff_i;
 14570  00210C  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 14571  00210E  1379               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 14572  002110                     l596:
 14573                           
 14574                           ; BSR set to: 0
 14575                           ;diskio.c: 299: }
 14576                           ;diskio.c: 300: count1++;
 14577                           
 14578                           ; BSR set to: 0
 14579                           
 14580                           ; BSR set to: 0
 14581  002110  4B77               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 14582  002112  2B78               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 14583                           
 14584                           ; BSR set to: 0
 14585                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 14586  002114  0EAA               	movlw	170
 14587  002116  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 14588  002118  E103               	bnz	u13280
 14589  00211A  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 14590  00211C  B4D8               	btfsc	status,2,c
 14591  00211E  D008               	goto	u13290
 14592  002120                     u13280:
 14593                           
 14594                           ; BSR set to: 0
 14595  002120  BF78               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 14596  002122  D7E5               	goto	l593
 14597  002124  0EE8               	movlw	232
 14598  002126  5D77               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 14599  002128  0E03               	movlw	3
 14600  00212A  5978               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 14601  00212C  A0D8               	btfss	status,0,c
 14602  00212E  D7DF               	goto	l593
 14603  002130                     u13290:
 14604                           
 14605                           ; BSR set to: 0
 14606                           ;diskio.c: 306: if (crc_number == 0x1AA)
 14607                           
 14608                           ; BSR set to: 0
 14609                           
 14610                           ; BSR set to: 0
 14611  002130  0EAA               	movlw	170
 14612  002132  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 14613  002134  E102               	bnz	u13301
 14614  002136  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 14615  002138  A4D8               	btfss	status,2,c
 14616  00213A                     u13301:
 14617  00213A  D0B1               	goto	l600
 14618                           
 14619                           ; BSR set to: 0
 14620                           ;diskio.c: 307: {
 14621                           ;diskio.c: 308: count1 = 0;
 14622  00213C  0E00               	movlw	0
 14623  00213E  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 14624  002140  0E00               	movlw	0
 14625  002142  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 14626  002144                     l601:
 14627                           
 14628                           ; BSR set to: 0
 14629                           ;diskio.c: 310: count2 = 0;
 14630  002144  0E00               	movlw	0
 14631  002146  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14632  002148  0E00               	movlw	0
 14633  00214A  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 14634                           
 14635                           ; BSR set to: 0
 14636                           ;diskio.c: 311: buff = 0XFF;
 14637  00214C  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14638  00214E                     
 14639                           ; BSR set to: 0
 14640                           ;diskio.c: 319: dummy_clocks(10);
 14641                           
 14642                           ; BSR set to: 0
 14643  00214E  0E0A               	movlw	10
 14644  002150  EC49  F02A         	call	_dummy_clocks
 14645                           
 14646                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 14647  002154  0E00               	movlw	0
 14648  002156  0100               	movlb	0	; () banked
 14649  002158  6F65               	movwf	command@arg& (0+255),b
 14650  00215A  0E00               	movlw	0
 14651  00215C  6F66               	movwf	(command@arg+1)& (0+255),b
 14652  00215E  0E00               	movlw	0
 14653  002160  6F67               	movwf	(command@arg+2)& (0+255),b
 14654  002162  0E00               	movlw	0
 14655  002164  6F68               	movwf	(command@arg+3)& (0+255),b
 14656  002166  0E00               	movlw	0
 14657  002168  6F69               	movwf	command@CRC& (0+255),b
 14658  00216A  0E77               	movlw	119
 14659  00216C  EC1A  F028         	call	_command
 14660                           
 14661                           ;diskio.c: 321: buff = 0XFF;
 14662  002170  0100               	movlb	0	; () banked
 14663  002172  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14664                           
 14665                           ; BSR set to: 0
 14666                           ;diskio.c: 323: proceed();
 14667  002174  EC38  F02C         	call	_proceed	;wreg free
 14668  002178                     
 14669                           ;diskio.c: 325: buff = response();
 14670  002178  EC1E  F02C         	call	_response	;wreg free
 14671  00217C  0100               	movlb	0	; () banked
 14672  00217E  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14673                           
 14674                           ; BSR set to: 0
 14675                           ;diskio.c: 326: count2++;
 14676  002180  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14677  002182  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14678                           
 14679                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 14680  002184  057F               	decf	sdc_disk_initialize@buff& (0+255),w,b
 14681  002186  B4D8               	btfsc	status,2,c
 14682  002188  D008               	goto	u13320
 14683                           
 14684                           ; BSR set to: 0
 14685  00218A  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14686  00218C  D7F5               	goto	l603
 14687  00218E  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14688  002190  E104               	bnz	l10338
 14689  002192  0E0A               	movlw	10
 14690  002194  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14691  002196  A0D8               	btfss	status,0,c
 14692  002198  D7EF               	goto	l603
 14693  00219A                     u13320:
 14694  00219A                     l10338:
 14695                           
 14696                           ; BSR set to: 0
 14697                           ;diskio.c: 328: count2 = 0;
 14698  00219A  0E00               	movlw	0
 14699  00219C  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14700  00219E  0E00               	movlw	0
 14701  0021A0  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 14702                           
 14703                           ; BSR set to: 0
 14704                           ;diskio.c: 332: dummy_clocks(10);
 14705  0021A2  0E0A               	movlw	10
 14706  0021A4  EC49  F02A         	call	_dummy_clocks
 14707                           
 14708                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 14709  0021A8  0E00               	movlw	0
 14710  0021AA  0100               	movlb	0	; () banked
 14711  0021AC  6F65               	movwf	command@arg& (0+255),b
 14712  0021AE  0E00               	movlw	0
 14713  0021B0  6F66               	movwf	(command@arg+1)& (0+255),b
 14714  0021B2  0E00               	movlw	0
 14715  0021B4  6F67               	movwf	(command@arg+2)& (0+255),b
 14716  0021B6  0E40               	movlw	64
 14717  0021B8  6F68               	movwf	(command@arg+3)& (0+255),b
 14718  0021BA  0E00               	movlw	0
 14719  0021BC  6F69               	movwf	command@CRC& (0+255),b
 14720  0021BE  0E69               	movlw	105
 14721  0021C0  EC1A  F028         	call	_command
 14722                           
 14723                           ;diskio.c: 334: proceed();
 14724  0021C4  EC38  F02C         	call	_proceed	;wreg free
 14725                           
 14726                           ;diskio.c: 335: buff = response();
 14727  0021C8  EC1E  F02C         	call	_response	;wreg free
 14728  0021CC  0100               	movlb	0	; () banked
 14729  0021CE  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14730                           
 14731                           ; BSR set to: 0
 14732                           ;diskio.c: 336: count2++;
 14733  0021D0  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14734  0021D2  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14735                           
 14736                           ; BSR set to: 0
 14737                           ;diskio.c: 337: }while(buff!=0X00);
 14738  0021D4  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14739  0021D6  A4D8               	btfss	status,2,c
 14740  0021D8  D7BA               	goto	l602
 14741                           
 14742                           ; BSR set to: 0
 14743                           ;diskio.c: 339: buff = 0xFF;
 14744  0021DA  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14745                           
 14746                           ; BSR set to: 0
 14747                           ;diskio.c: 342: dummy_clocks(10);
 14748  0021DC  0E0A               	movlw	10
 14749  0021DE  EC49  F02A         	call	_dummy_clocks
 14750                           
 14751                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 14752  0021E2  0E00               	movlw	0
 14753  0021E4  0100               	movlb	0	; () banked
 14754  0021E6  6F65               	movwf	command@arg& (0+255),b
 14755  0021E8  0E00               	movlw	0
 14756  0021EA  6F66               	movwf	(command@arg+1)& (0+255),b
 14757  0021EC  0E00               	movlw	0
 14758  0021EE  6F67               	movwf	(command@arg+2)& (0+255),b
 14759  0021F0  0E00               	movlw	0
 14760  0021F2  6F68               	movwf	(command@arg+3)& (0+255),b
 14761  0021F4  0EFF               	movlw	255
 14762  0021F6  6F69               	movwf	command@CRC& (0+255),b
 14763  0021F8  0E7A               	movlw	122
 14764  0021FA  EC1A  F028         	call	_command
 14765                           
 14766                           ;diskio.c: 344: proceed();
 14767  0021FE  EC38  F02C         	call	_proceed	;wreg free
 14768  002202                     
 14769                           ;diskio.c: 346: buff = response();
 14770  002202  EC1E  F02C         	call	_response	;wreg free
 14771  002206  0100               	movlb	0	; () banked
 14772  002208  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14773                           
 14774                           ; BSR set to: 0
 14775                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 14776  00220A  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14777  00220C  257F               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 14778  00220E  0B80               	andlw	128
 14779  002210  6F7C               	movwf	sdc_disk_initialize@ocr& (0+255),b
 14780                           
 14781                           ; BSR set to: 0
 14782                           ;diskio.c: 348: count2++;
 14783  002212  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14784  002214  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14785                           
 14786                           ; BSR set to: 0
 14787                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 14788  002216  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 14789  002218  B4D8               	btfsc	status,2,c
 14790  00221A  D00B               	goto	u13360
 14791                           
 14792                           ; BSR set to: 0
 14793  00221C  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 14794  00221E  B4D8               	btfsc	status,2,c
 14795  002220  D008               	goto	u13360
 14796                           
 14797                           ; BSR set to: 0
 14798  002222  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14799  002224  D7EE               	goto	l608
 14800  002226  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14801  002228  E104               	bnz	l10368
 14802  00222A  0E0A               	movlw	10
 14803  00222C  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14804  00222E  A0D8               	btfss	status,0,c
 14805  002230  D7E8               	goto	l608
 14806  002232                     u13360:
 14807  002232                     l10368:
 14808                           
 14809                           ; BSR set to: 0
 14810                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 14811  002232  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 14812  002234  B4D8               	btfsc	status,2,c
 14813  002236  D003               	goto	u13380
 14814                           
 14815                           ; BSR set to: 0
 14816  002238  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 14817  00223A  A4D8               	btfss	status,2,c
 14818  00223C  D783               	goto	l601
 14819  00223E                     u13380:
 14820                           
 14821                           ; BSR set to: 0
 14822                           ;diskio.c: 353: count1 = 0;
 14823                           
 14824                           ; BSR set to: 0
 14825                           
 14826                           ; BSR set to: 0
 14827  00223E  0E00               	movlw	0
 14828  002240  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 14829  002242  0E00               	movlw	0
 14830  002244  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 14831                           
 14832                           ; BSR set to: 0
 14833                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 14834  002246  0E10               	movlw	16
 14835  002248  0100               	movlb	0	; () banked
 14836  00224A  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 14837  00224C  0E94               	movlw	148
 14838  00224E                     u17727:
 14839  00224E  2EE8               	decfsz	wreg,f,c
 14840  002250  D7FE               	bra	u17727
 14841  002252  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 14842  002254  D7FC               	bra	u17727
 14843  002256  F000               	nop	
 14844                           
 14845                           ;diskio.c: 356: stat = 0X00;
 14846  002258  0E00               	movlw	0
 14847  00225A  0100               	movlb	0	; () banked
 14848  00225C  6F76               	movwf	sdc_disk_initialize@stat& (0+255),b
 14849                           
 14850                           ; BSR set to: 0
 14851                           ;diskio.c: 358: if(!ocr)
 14852  00225E  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 14853  002260  A4D8               	btfss	status,2,c
 14854  002262  D0B9               	goto	u13480
 14855                           
 14856                           ; BSR set to: 0
 14857                           ;diskio.c: 359: {
 14858                           ;diskio.c: 361: dummy_clocks(10);
 14859  002264  0E0A               	movlw	10
 14860  002266  EC49  F02A         	call	_dummy_clocks
 14861                           
 14862                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 14863  00226A  0E00               	movlw	0
 14864  00226C  0100               	movlb	0	; () banked
 14865  00226E  6F65               	movwf	command@arg& (0+255),b
 14866  002270  0E02               	movlw	2
 14867  002272  6F66               	movwf	(command@arg+1)& (0+255),b
 14868  002274  0E00               	movlw	0
 14869  002276  6F67               	movwf	(command@arg+2)& (0+255),b
 14870  002278  0E00               	movlw	0
 14871  00227A  6F68               	movwf	(command@arg+3)& (0+255),b
 14872  00227C  0EFF               	movlw	255
 14873  00227E  6F69               	movwf	command@CRC& (0+255),b
 14874  002280  0E50               	movlw	80
 14875  002282  EC1A  F028         	call	_command
 14876                           
 14877                           ;diskio.c: 363: proceed();
 14878  002286  EC38  F02C         	call	_proceed	;wreg free
 14879                           
 14880                           ;diskio.c: 365: buff = 0xFF;
 14881  00228A  0100               	movlb	0	; () banked
 14882  00228C  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14883  00228E                     
 14884                           ; BSR set to: 0
 14885                           ;diskio.c: 367: buff = response();
 14886                           
 14887                           ; BSR set to: 0
 14888  00228E  EC1E  F02C         	call	_response	;wreg free
 14889  002292  0100               	movlb	0	; () banked
 14890  002294  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14891                           
 14892                           ; BSR set to: 0
 14893                           ;diskio.c: 368: }while(buff!=0X00);
 14894  002296  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14895  002298  B4D8               	btfsc	status,2,c
 14896  00229A  D09D               	goto	u13480
 14897  00229C  D7F8               	goto	l616
 14898  00229E                     l600:
 14899                           
 14900                           ; BSR set to: 0
 14901                           ;diskio.c: 373: else
 14902                           ;diskio.c: 374: {
 14903                           ;diskio.c: 376: count2 = 0;
 14904                           
 14905                           ; BSR set to: 0
 14906  00229E  0E00               	movlw	0
 14907  0022A0  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14908  0022A2  0E00               	movlw	0
 14909  0022A4  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 14910                           
 14911                           ; BSR set to: 0
 14912                           ;diskio.c: 377: buff = 0XFF;
 14913  0022A6  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14914                           
 14915                           ; BSR set to: 0
 14916                           ;diskio.c: 378: dummy_clocks(1);
 14917  0022A8  0E01               	movlw	1
 14918  0022AA  EC49  F02A         	call	_dummy_clocks
 14919                           
 14920                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 14921  0022AE  0E00               	movlw	0
 14922  0022B0  0100               	movlb	0	; () banked
 14923  0022B2  6F65               	movwf	command@arg& (0+255),b
 14924  0022B4  0E00               	movlw	0
 14925  0022B6  6F66               	movwf	(command@arg+1)& (0+255),b
 14926  0022B8  0E00               	movlw	0
 14927  0022BA  6F67               	movwf	(command@arg+2)& (0+255),b
 14928  0022BC  0E00               	movlw	0
 14929  0022BE  6F68               	movwf	(command@arg+3)& (0+255),b
 14930  0022C0  0EFF               	movlw	255
 14931  0022C2  6F69               	movwf	command@CRC& (0+255),b
 14932  0022C4  0E69               	movlw	105
 14933  0022C6  EC1A  F028         	call	_command
 14934                           
 14935                           ;diskio.c: 380: proceed();
 14936  0022CA  EC38  F02C         	call	_proceed	;wreg free
 14937  0022CE                     
 14938                           ;diskio.c: 382: buff = response();
 14939  0022CE  EC1E  F02C         	call	_response	;wreg free
 14940  0022D2  0100               	movlb	0	; () banked
 14941  0022D4  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14942                           
 14943                           ; BSR set to: 0
 14944                           ;diskio.c: 383: count2++;
 14945  0022D6  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14946  0022D8  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14947                           
 14948                           ; BSR set to: 0
 14949                           ;diskio.c: 384: if(buff==0x00)
 14950  0022DA  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14951  0022DC  A4D8               	btfss	status,2,c
 14952  0022DE  D00C               	goto	l620
 14953                           
 14954                           ; BSR set to: 0
 14955                           ;diskio.c: 385: {
 14956                           ;diskio.c: 386: posicao_cursor_lcd(1,0);
 14957  0022E0  0E00               	movlw	0
 14958  0022E2  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 14959  0022E4  0E01               	movlw	1
 14960  0022E6  ECFF  F026         	call	_posicao_cursor_lcd
 14961                           
 14962                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 14963  0022EA  0E22               	movlw	low STR_28
 14964  0022EC  0100               	movlb	0	; () banked
 14965  0022EE  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 14966  0022F0  0E62               	movlw	high STR_28
 14967  0022F2  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 14968  0022F4  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
 14969  0022F8                     l620:
 14970                           
 14971                           ;diskio.c: 388: }
 14972                           ;diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 14973  0022F8  0E10               	movlw	16
 14974  0022FA  0100               	movlb	0	; () banked
 14975  0022FC  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 14976  0022FE  0E94               	movlw	148
 14977  002300                     u17737:
 14978  002300  2EE8               	decfsz	wreg,f,c
 14979  002302  D7FE               	bra	u17737
 14980  002304  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 14981  002306  D7FC               	bra	u17737
 14982  002308  F000               	nop	
 14983                           
 14984                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 14985  00230A  0100               	movlb	0	; () banked
 14986  00230C  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14987  00230E  B4D8               	btfsc	status,2,c
 14988  002310  D008               	goto	u13430
 14989                           
 14990                           ; BSR set to: 0
 14991  002312  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14992  002314  D7DC               	goto	l619
 14993  002316  0E10               	movlw	16
 14994  002318  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14995  00231A  0E27               	movlw	39
 14996  00231C  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14997  00231E  A0D8               	btfss	status,0,c
 14998  002320  D7D6               	goto	l619
 14999  002322                     u13430:
 15000                           
 15001                           ; BSR set to: 0
 15002                           ;diskio.c: 392: buff = 0xFF;
 15003                           
 15004                           ; BSR set to: 0
 15005  002322  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 15006                           
 15007                           ; BSR set to: 0
 15008                           ;diskio.c: 393: if(count2==10)
 15009  002324  0E0A               	movlw	10
 15010  002326  197D               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 15011  002328  117E               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 15012  00232A  A4D8               	btfss	status,2,c
 15013  00232C  D038               	goto	u13470
 15014                           
 15015                           ; BSR set to: 0
 15016                           ;diskio.c: 394: {
 15017                           ;diskio.c: 395: count2 = 0;
 15018  00232E  0E00               	movlw	0
 15019  002330  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 15020  002332  0E00               	movlw	0
 15021  002334  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 15022                           
 15023                           ; BSR set to: 0
 15024                           ;diskio.c: 396: dummy_clocks(10);
 15025  002336  0E0A               	movlw	10
 15026  002338  EC49  F02A         	call	_dummy_clocks
 15027                           
 15028                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 15029  00233C  0E00               	movlw	0
 15030  00233E  0100               	movlb	0	; () banked
 15031  002340  6F65               	movwf	command@arg& (0+255),b
 15032  002342  0E00               	movlw	0
 15033  002344  6F66               	movwf	(command@arg+1)& (0+255),b
 15034  002346  0E00               	movlw	0
 15035  002348  6F67               	movwf	(command@arg+2)& (0+255),b
 15036  00234A  0E00               	movlw	0
 15037  00234C  6F68               	movwf	(command@arg+3)& (0+255),b
 15038  00234E  0EFF               	movlw	255
 15039  002350  6F69               	movwf	command@CRC& (0+255),b
 15040  002352  0E41               	movlw	65
 15041  002354  EC1A  F028         	call	_command
 15042                           
 15043                           ;diskio.c: 398: proceed();
 15044  002358  EC38  F02C         	call	_proceed	;wreg free
 15045  00235C                     
 15046                           ;diskio.c: 400: buff = response();
 15047  00235C  EC1E  F02C         	call	_response	;wreg free
 15048  002360  0100               	movlb	0	; () banked
 15049  002362  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 15050                           
 15051                           ; BSR set to: 0
 15052                           ;diskio.c: 401: count2++;
 15053  002364  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 15054  002366  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 15055                           
 15056                           ; BSR set to: 0
 15057                           ;diskio.c: 402: if(buff==0x00)
 15058  002368  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15059  00236A  A4D8               	btfss	status,2,c
 15060  00236C  D00C               	goto	l626
 15061                           
 15062                           ; BSR set to: 0
 15063                           ;diskio.c: 403: {
 15064                           ;diskio.c: 404: posicao_cursor_lcd(1,0);
 15065  00236E  0E00               	movlw	0
 15066  002370  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 15067  002372  0E01               	movlw	1
 15068  002374  ECFF  F026         	call	_posicao_cursor_lcd
 15069                           
 15070                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 15071  002378  0E0C               	movlw	low STR_29
 15072  00237A  0100               	movlb	0	; () banked
 15073  00237C  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 15074  00237E  0E62               	movlw	high STR_29
 15075  002380  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 15076  002382  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
 15077  002386                     l626:
 15078                           
 15079                           ;diskio.c: 406: }
 15080                           ;diskio.c: 408: }while(buff!=0X00 && count2<10000);
 15081  002386  0100               	movlb	0	; () banked
 15082  002388  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15083  00238A  B4D8               	btfsc	status,2,c
 15084  00238C  D008               	goto	u13470
 15085                           
 15086                           ; BSR set to: 0
 15087  00238E  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 15088  002390  D7E5               	goto	l625
 15089  002392  0E10               	movlw	16
 15090  002394  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 15091  002396  0E27               	movlw	39
 15092  002398  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 15093  00239A  A0D8               	btfss	status,0,c
 15094  00239C  D7DF               	goto	l625
 15095  00239E                     u13470:
 15096                           
 15097                           ; BSR set to: 0
 15098                           ;diskio.c: 409: }
 15099                           ;diskio.c: 412: dummy_clocks(10);
 15100                           
 15101                           ; BSR set to: 0
 15102                           
 15103                           ; BSR set to: 0
 15104                           
 15105                           ; BSR set to: 0
 15106  00239E  0E0A               	movlw	10
 15107  0023A0  EC49  F02A         	call	_dummy_clocks
 15108                           
 15109                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 15110  0023A4  0E00               	movlw	0
 15111  0023A6  0100               	movlb	0	; () banked
 15112  0023A8  6F65               	movwf	command@arg& (0+255),b
 15113  0023AA  0E02               	movlw	2
 15114  0023AC  6F66               	movwf	(command@arg+1)& (0+255),b
 15115  0023AE  0E00               	movlw	0
 15116  0023B0  6F67               	movwf	(command@arg+2)& (0+255),b
 15117  0023B2  0E00               	movlw	0
 15118  0023B4  6F68               	movwf	(command@arg+3)& (0+255),b
 15119  0023B6  0EFF               	movlw	255
 15120  0023B8  6F69               	movwf	command@CRC& (0+255),b
 15121  0023BA  0E50               	movlw	80
 15122  0023BC  EC1A  F028         	call	_command
 15123                           
 15124                           ;diskio.c: 414: proceed();
 15125  0023C0  EC38  F02C         	call	_proceed	;wreg free
 15126                           
 15127                           ;diskio.c: 416: buff = 0xFF;
 15128  0023C4  0100               	movlb	0	; () banked
 15129  0023C6  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 15130  0023C8                     
 15131                           ; BSR set to: 0
 15132                           ;diskio.c: 418: buff = response();
 15133                           
 15134                           ; BSR set to: 0
 15135  0023C8  EC1E  F02C         	call	_response	;wreg free
 15136  0023CC  0100               	movlb	0	; () banked
 15137  0023CE  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 15138                           
 15139                           ; BSR set to: 0
 15140                           ;diskio.c: 419: }while(buff!=0X00);
 15141  0023D0  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15142  0023D2  A4D8               	btfss	status,2,c
 15143  0023D4  D7F9               	goto	l630
 15144  0023D6                     u13480:
 15145                           
 15146                           ; BSR set to: 0
 15147                           ;diskio.c: 421: }
 15148                           ;diskio.c: 425: return stat;
 15149                           
 15150                           ; BSR set to: 0
 15151                           
 15152                           ; BSR set to: 0
 15153  0023D6  5176               	movf	sdc_disk_initialize@stat& (0+255),w,b
 15154  0023D8  0012               	return	
 15155  0023DA                     __end_of_sdc_disk_initialize:
 15156                           	opt stack 0
 15157                           tosu	equ	0xFFF
 15158                           tosh	equ	0xFFE
 15159                           tosl	equ	0xFFD
 15160                           pclath	equ	0xFFA
 15161                           tblptru	equ	0xFF8
 15162                           tblptrh	equ	0xFF7
 15163                           tblptrl	equ	0xFF6
 15164                           tablat	equ	0xFF5
 15165                           prodh	equ	0xFF4
 15166                           prodl	equ	0xFF3
 15167                           intcon	equ	0xFF2
 15168                           intcon2	equ	0xFF1
 15169                           intcon3	equ	0xFF0
 15170                           indf0	equ	0xFEF
 15171                           postinc0	equ	0xFEE
 15172                           fsr0h	equ	0xFEA
 15173                           fsr0l	equ	0xFE9
 15174                           wreg	equ	0xFE8
 15175                           indf1	equ	0xFE7
 15176                           postinc1	equ	0xFE6
 15177                           postdec1	equ	0xFE5
 15178                           plusw1	equ	0xFE3
 15179                           fsr1h	equ	0xFE2
 15180                           fsr1l	equ	0xFE1
 15181                           indf2	equ	0xFDF
 15182                           postinc2	equ	0xFDE
 15183                           postdec2	equ	0xFDD
 15184                           plusw2	equ	0xFDB
 15185                           fsr2h	equ	0xFDA
 15186                           fsr2l	equ	0xFD9
 15187                           status	equ	0xFD8
 15188                           
 15189 ;; *************** function _sdc_reset *****************
 15190 ;; Defined at:
 15191 ;;		line 238 in file "bibliotecas/diskio.c"
 15192 ;; Parameters:    Size  Location     Type
 15193 ;;		None
 15194 ;; Auto vars:     Size  Location     Type
 15195 ;;  teste          10    0        unsigned char [10]
 15196 ;;  count           2   16[BANK0 ] int 
 15197 ;;  count_nosd      2   14[BANK0 ] int 
 15198 ;;  i               2   12[BANK0 ] int 
 15199 ;;  receive         2    0        unsigned int 
 15200 ;;  buff            1   18[BANK0 ] unsigned char 
 15201 ;;  stat            1    0        unsigned char 
 15202 ;; Return value:  Size  Location     Type
 15203 ;;                  1    wreg      void 
 15204 ;; Registers used:
 15205 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15206 ;; Tracked objects:
 15207 ;;		On entry : 0/0
 15208 ;;		On exit  : 0/0
 15209 ;;		Unchanged: 0/0
 15210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15211 ;;      Params:         0       0       0       0       0       0       0       0       0
 15212 ;;      Locals:         0       7       0       0       0       0       0       0       0
 15213 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15214 ;;      Totals:         0       7       0       0       0       0       0       0       0
 15215 ;;Total ram usage:        7 bytes
 15216 ;; Hardware stack levels used:    1
 15217 ;; Hardware stack levels required when called:    6
 15218 ;; This function calls:
 15219 ;;		_command
 15220 ;;		_escreve_frase_ram_lcd
 15221 ;;		_posicao_cursor_lcd
 15222 ;;		_proceed
 15223 ;;		_response
 15224 ;; This function is called by:
 15225 ;;		_sdc_disk_initialize
 15226 ;; This function uses a non-reentrant model
 15227 ;;
 15228                           
 15229                           	psect	text48
 15230  004736                     __ptext48:
 15231                           	opt stack 0
 15232  004736                     _sdc_reset:
 15233                           	opt stack 17
 15234                           
 15235                           ;diskio.c: 240: int i = 0, count = 0, count_nosd = 0;
 15236                           
 15237                           ; BSR set to: 0
 15238                           ;incstack = 0
 15239  004736  0E00               	movlw	0
 15240  004738  0100               	movlb	0	; () banked
 15241  00473A  6F6D               	movwf	(sdc_reset@i+1)& (0+255),b
 15242  00473C  0E00               	movlw	0
 15243  00473E  6F6C               	movwf	sdc_reset@i& (0+255),b
 15244  004740  0E00               	movlw	0
 15245  004742  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 15246  004744  0E00               	movlw	0
 15247  004746  6F70               	movwf	sdc_reset@count& (0+255),b
 15248  004748  0E00               	movlw	0
 15249  00474A  6F6F               	movwf	(sdc_reset@count_nosd+1)& (0+255),b
 15250  00474C  0E00               	movlw	0
 15251  00474E  6F6E               	movwf	sdc_reset@count_nosd& (0+255),b
 15252  004750                     
 15253                           ; BSR set to: 0
 15254                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 15255                           
 15256                           ; BSR set to: 0
 15257  004750  0E00               	movlw	0
 15258  004752  6F65               	movwf	command@arg& (0+255),b
 15259  004754  0E00               	movlw	0
 15260  004756  6F66               	movwf	(command@arg+1)& (0+255),b
 15261  004758  0E00               	movlw	0
 15262  00475A  6F67               	movwf	(command@arg+2)& (0+255),b
 15263  00475C  0E00               	movlw	0
 15264  00475E  6F68               	movwf	(command@arg+3)& (0+255),b
 15265  004760  0E95               	movlw	149
 15266  004762  6F69               	movwf	command@CRC& (0+255),b
 15267  004764  0E40               	movlw	64
 15268  004766  EC1A  F028         	call	_command
 15269                           
 15270                           ;diskio.c: 249: proceed();
 15271  00476A  EC38  F02C         	call	_proceed	;wreg free
 15272  00476E                     
 15273                           ;diskio.c: 251: buff = response();
 15274  00476E  EC1E  F02C         	call	_response	;wreg free
 15275  004772  0100               	movlb	0	; () banked
 15276  004774  6F72               	movwf	sdc_reset@buff& (0+255),b
 15277                           
 15278                           ; BSR set to: 0
 15279                           ;diskio.c: 252: count++;
 15280  004776  4B70               	infsnz	sdc_reset@count& (0+255),f,b
 15281  004778  2B71               	incf	(sdc_reset@count+1)& (0+255),f,b
 15282                           
 15283                           ; BSR set to: 0
 15284                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 15285  00477A  0572               	decf	sdc_reset@buff& (0+255),w,b
 15286  00477C  B4D8               	btfsc	status,2,c
 15287  00477E  D008               	goto	u13030
 15288                           
 15289                           ; BSR set to: 0
 15290  004780  BF71               	btfsc	(sdc_reset@count+1)& (0+255),7,b
 15291  004782  D7F5               	goto	l584
 15292  004784  5171               	movf	(sdc_reset@count+1)& (0+255),w,b
 15293  004786  E104               	bnz	l10156
 15294  004788  0E0A               	movlw	10
 15295  00478A  5D70               	subwf	sdc_reset@count& (0+255),w,b
 15296  00478C  A0D8               	btfss	status,0,c
 15297  00478E  D7EF               	goto	l584
 15298  004790                     u13030:
 15299  004790                     l10156:
 15300                           
 15301                           ; BSR set to: 0
 15302                           ;diskio.c: 254: count = 0;
 15303  004790  0E00               	movlw	0
 15304  004792  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 15305  004794  0E00               	movlw	0
 15306  004796  6F70               	movwf	sdc_reset@count& (0+255),b
 15307                           
 15308                           ; BSR set to: 0
 15309                           ;diskio.c: 255: if(buff != 0x01)
 15310  004798  0572               	decf	sdc_reset@buff& (0+255),w,b
 15311  00479A  B4D8               	btfsc	status,2,c
 15312  00479C  D019               	goto	l588
 15313                           
 15314                           ; BSR set to: 0
 15315                           ;diskio.c: 256: {
 15316                           ;diskio.c: 257: posicao_cursor_lcd(1,0);
 15317  00479E  0E00               	movlw	0
 15318  0047A0  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 15319  0047A2  0E01               	movlw	1
 15320  0047A4  ECFF  F026         	call	_posicao_cursor_lcd
 15321                           
 15322                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 15323  0047A8  0E17               	movlw	low STR_26
 15324  0047AA  0100               	movlb	0	; () banked
 15325  0047AC  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 15326  0047AE  0E62               	movlw	high STR_26
 15327  0047B0  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 15328  0047B2  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
 15329                           
 15330                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 15331  0047B6  0E00               	movlw	0
 15332  0047B8  0100               	movlb	0	; () banked
 15333  0047BA  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 15334  0047BC  0E02               	movlw	2
 15335  0047BE  ECFF  F026         	call	_posicao_cursor_lcd
 15336                           
 15337                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 15338  0047C2  0E84               	movlw	low STR_27
 15339  0047C4  0100               	movlb	0	; () banked
 15340  0047C6  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 15341  0047C8  0E61               	movlw	high STR_27
 15342  0047CA  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 15343  0047CC  ECFC  F028         	call	_escreve_frase_ram_lcd	;wreg free
 15344  0047D0                     l588:
 15345                           
 15346                           ;diskio.c: 261: }
 15347                           ;diskio.c: 263: }while(buff!=0X01);
 15348  0047D0  0100               	movlb	0	; () banked
 15349  0047D2  0572               	decf	sdc_reset@buff& (0+255),w,b
 15350  0047D4  B4D8               	btfsc	status,2,c
 15351  0047D6  0012               	return	
 15352  0047D8  D7BB               	goto	l583
 15353  0047DA                     __end_of_sdc_reset:
 15354                           	opt stack 0
 15355                           tosu	equ	0xFFF
 15356                           tosh	equ	0xFFE
 15357                           tosl	equ	0xFFD
 15358                           pclath	equ	0xFFA
 15359                           tblptru	equ	0xFF8
 15360                           tblptrh	equ	0xFF7
 15361                           tblptrl	equ	0xFF6
 15362                           tablat	equ	0xFF5
 15363                           prodh	equ	0xFF4
 15364                           prodl	equ	0xFF3
 15365                           intcon	equ	0xFF2
 15366                           intcon2	equ	0xFF1
 15367                           intcon3	equ	0xFF0
 15368                           indf0	equ	0xFEF
 15369                           postinc0	equ	0xFEE
 15370                           fsr0h	equ	0xFEA
 15371                           fsr0l	equ	0xFE9
 15372                           wreg	equ	0xFE8
 15373                           indf1	equ	0xFE7
 15374                           postinc1	equ	0xFE6
 15375                           postdec1	equ	0xFE5
 15376                           plusw1	equ	0xFE3
 15377                           fsr1h	equ	0xFE2
 15378                           fsr1l	equ	0xFE1
 15379                           indf2	equ	0xFDF
 15380                           postinc2	equ	0xFDE
 15381                           postdec2	equ	0xFDD
 15382                           plusw2	equ	0xFDB
 15383                           fsr2h	equ	0xFDA
 15384                           fsr2l	equ	0xFD9
 15385                           status	equ	0xFD8
 15386                           
 15387 ;; *************** function _posicao_cursor_lcd *****************
 15388 ;; Defined at:
 15389 ;;		line 271 in file "bibliotecas/display_lcd.c"
 15390 ;; Parameters:    Size  Location     Type
 15391 ;;  linha           1    wreg     unsigned char 
 15392 ;;  coluna          1    3[BANK0 ] unsigned char 
 15393 ;; Auto vars:     Size  Location     Type
 15394 ;;  linha           1    4[BANK0 ] unsigned char 
 15395 ;;  endereco        1    5[BANK0 ] unsigned char 
 15396 ;; Return value:  Size  Location     Type
 15397 ;;                  1    wreg      void 
 15398 ;; Registers used:
 15399 ;;		wreg, status,2, status,0, cstack
 15400 ;; Tracked objects:
 15401 ;;		On entry : 0/0
 15402 ;;		On exit  : 0/0
 15403 ;;		Unchanged: 0/0
 15404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15405 ;;      Params:         0       1       0       0       0       0       0       0       0
 15406 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15407 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15408 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15409 ;;Total ram usage:        3 bytes
 15410 ;; Hardware stack levels used:    1
 15411 ;; Hardware stack levels required when called:    5
 15412 ;; This function calls:
 15413 ;;		_endereco_cursor_lcd
 15414 ;; This function is called by:
 15415 ;;		_mensagem_inicial
 15416 ;;		_verifica_fence_externo
 15417 ;;		_troca_de_tela
 15418 ;;		_sdc_reset
 15419 ;;		_sdc_disk_initialize
 15420 ;;		_sdcard_init
 15421 ;; This function uses a non-reentrant model
 15422 ;;
 15423                           
 15424                           	psect	text49
 15425  004DFE                     __ptext49:
 15426                           	opt stack 0
 15427  004DFE                     _posicao_cursor_lcd:
 15428                           	opt stack 24
 15429                           
 15430                           ; BSR set to: 0
 15431                           ;incstack = 0
 15432                           ;posicao_cursor_lcd@linha stored from wreg
 15433  004DFE  0100               	movlb	0	; () banked
 15434  004E00  6F64               	movwf	posicao_cursor_lcd@linha& (0+255),b
 15435                           
 15436                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 15437  004E02  0E00               	movlw	0
 15438  004E04  0100               	movlb	0	; () banked
 15439  004E06  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15440                           
 15441                           ; BSR set to: 0
 15442                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 15443  004E08  0E11               	movlw	17
 15444  004E0A  6163               	cpfslt	posicao_cursor_lcd@coluna& (0+255),b
 15445  004E0C  D034               	goto	l738
 15446  004E0E  D022               	goto	l739
 15447  004E10                     l740:
 15448                           
 15449                           ; BSR set to: 0
 15450                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 15451  004E10  C063  F065         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 15452                           
 15453                           ; BSR set to: 0
 15454                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 15455  004E14  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 15456  004E16  EC7A  F027         	call	_endereco_cursor_lcd
 15457                           
 15458                           ;display_lcd.c: 284: break;
 15459  004E1A  D02A               	goto	l741
 15460  004E1C                     
 15461                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 15462  004E1C  0100               	movlb	0	; () banked
 15463  004E1E  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 15464  004E20  0F40               	addlw	64
 15465  004E22  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15466                           
 15467                           ; BSR set to: 0
 15468                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 15469  004E24  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 15470  004E26  EC7A  F027         	call	_endereco_cursor_lcd
 15471                           
 15472                           ;display_lcd.c: 289: break;
 15473  004E2A  D022               	goto	l741
 15474  004E2C                     
 15475                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 15476  004E2C  0100               	movlb	0	; () banked
 15477  004E2E  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 15478  004E30  0F14               	addlw	20
 15479  004E32  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15480                           
 15481                           ; BSR set to: 0
 15482                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 15483  004E34  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 15484  004E36  EC7A  F027         	call	_endereco_cursor_lcd
 15485                           
 15486                           ;display_lcd.c: 294: break;
 15487  004E3A  D01A               	goto	l741
 15488  004E3C                     
 15489                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 15490  004E3C  0100               	movlb	0	; () banked
 15491  004E3E  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 15492  004E40  0F54               	addlw	84
 15493  004E42  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15494                           
 15495                           ; BSR set to: 0
 15496                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 15497  004E44  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 15498  004E46  EC7A  F027         	call	_endereco_cursor_lcd
 15499                           
 15500                           ;display_lcd.c: 299: break;
 15501  004E4A  D012               	goto	l741
 15502  004E4C                     
 15503                           ;display_lcd.c: 302: endereco = 0x00U;
 15504  004E4C  0E00               	movlw	0
 15505  004E4E  0100               	movlb	0	; () banked
 15506  004E50  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15507                           
 15508                           ; BSR set to: 0
 15509                           ;display_lcd.c: 304: }
 15510                           
 15511                           ;display_lcd.c: 303: break;
 15512  004E52  D00E               	goto	l741
 15513  004E54                     l739:
 15514                           
 15515                           ; BSR set to: 0
 15516                           
 15517                           ; BSR set to: 0
 15518  004E54  5164               	movf	posicao_cursor_lcd@linha& (0+255),w,b
 15519                           
 15520                           ; Switch size 1, requested type "space"
 15521                           ; Number of cases is 4, Range of values is 1 to 4
 15522                           ; switch strategies available:
 15523                           ; Name         Instructions Cycles
 15524                           ; simple_byte           13     7 (average)
 15525                           ;	Chosen strategy is simple_byte
 15526  004E56  0A01               	xorlw	1	; case 1
 15527  004E58  B4D8               	btfsc	status,2,c
 15528  004E5A  D7DA               	goto	l740
 15529  004E5C  0A03               	xorlw	3	; case 2
 15530  004E5E  B4D8               	btfsc	status,2,c
 15531  004E60  D7DD               	goto	l742
 15532  004E62  0A01               	xorlw	1	; case 3
 15533  004E64  B4D8               	btfsc	status,2,c
 15534  004E66  D7E2               	goto	l743
 15535  004E68  0A07               	xorlw	7	; case 4
 15536  004E6A  B4D8               	btfsc	status,2,c
 15537  004E6C  D7E7               	goto	l744
 15538  004E6E  D7EE               	goto	l745
 15539  004E70                     l741:
 15540                           
 15541                           ;display_lcd.c: 306: coluna++;
 15542                           
 15543                           ; BSR set to: 0
 15544  004E70  0100               	movlb	0	; () banked
 15545  004E72  2B63               	incf	posicao_cursor_lcd@coluna& (0+255),f,b
 15546                           
 15547                           ;display_lcd.c: 307: }
 15548  004E74  0012               	return	
 15549  004E76                     l738:
 15550                           
 15551                           ; BSR set to: 0
 15552                           ;display_lcd.c: 308: else
 15553                           ;display_lcd.c: 309: {
 15554                           ;display_lcd.c: 310: endereco = 0x00U;
 15555                           
 15556                           ; BSR set to: 0
 15557  004E76  0E00               	movlw	0
 15558  004E78  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15559  004E7A  0012               	return	
 15560  004E7C                     __end_of_posicao_cursor_lcd:
 15561                           	opt stack 0
 15562                           tosu	equ	0xFFF
 15563                           tosh	equ	0xFFE
 15564                           tosl	equ	0xFFD
 15565                           pclath	equ	0xFFA
 15566                           tblptru	equ	0xFF8
 15567                           tblptrh	equ	0xFF7
 15568                           tblptrl	equ	0xFF6
 15569                           tablat	equ	0xFF5
 15570                           prodh	equ	0xFF4
 15571                           prodl	equ	0xFF3
 15572                           intcon	equ	0xFF2
 15573                           intcon2	equ	0xFF1
 15574                           intcon3	equ	0xFF0
 15575                           indf0	equ	0xFEF
 15576                           postinc0	equ	0xFEE
 15577                           fsr0h	equ	0xFEA
 15578                           fsr0l	equ	0xFE9
 15579                           wreg	equ	0xFE8
 15580                           indf1	equ	0xFE7
 15581                           postinc1	equ	0xFE6
 15582                           postdec1	equ	0xFE5
 15583                           plusw1	equ	0xFE3
 15584                           fsr1h	equ	0xFE2
 15585                           fsr1l	equ	0xFE1
 15586                           indf2	equ	0xFDF
 15587                           postinc2	equ	0xFDE
 15588                           postdec2	equ	0xFDD
 15589                           plusw2	equ	0xFDB
 15590                           fsr2h	equ	0xFDA
 15591                           fsr2l	equ	0xFD9
 15592                           status	equ	0xFD8
 15593                           
 15594 ;; *************** function _endereco_cursor_lcd *****************
 15595 ;; Defined at:
 15596 ;;		line 218 in file "bibliotecas/display_lcd.c"
 15597 ;; Parameters:    Size  Location     Type
 15598 ;;  endereco        1    wreg     unsigned char 
 15599 ;; Auto vars:     Size  Location     Type
 15600 ;;  endereco        1    2[BANK0 ] unsigned char 
 15601 ;; Return value:  Size  Location     Type
 15602 ;;                  1    wreg      void 
 15603 ;; Registers used:
 15604 ;;		wreg, status,2, status,0, cstack
 15605 ;; Tracked objects:
 15606 ;;		On entry : 0/0
 15607 ;;		On exit  : 0/0
 15608 ;;		Unchanged: 0/0
 15609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15610 ;;      Params:         0       0       0       0       0       0       0       0       0
 15611 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15612 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15613 ;;      Totals:         0       1       0       0       0       0       0       0       0
 15614 ;;Total ram usage:        1 bytes
 15615 ;; Hardware stack levels used:    1
 15616 ;; Hardware stack levels required when called:    4
 15617 ;; This function calls:
 15618 ;;		_delay
 15619 ;; This function is called by:
 15620 ;;		_posicao_cursor_lcd
 15621 ;;		_cria_caractere_lcd
 15622 ;; This function uses a non-reentrant model
 15623 ;;
 15624                           
 15625                           	psect	text50
 15626  004EF4                     __ptext50:
 15627                           	opt stack 0
 15628  004EF4                     _endereco_cursor_lcd:
 15629                           	opt stack 24
 15630                           
 15631                           ; BSR set to: 0
 15632                           ;incstack = 0
 15633                           ;endereco_cursor_lcd@endereco stored from wreg
 15634  004EF4  0100               	movlb	0	; () banked
 15635  004EF6  6F62               	movwf	endereco_cursor_lcd@endereco& (0+255),b
 15636                           
 15637                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 15638  004EF8  9483               	bcf	3971,2,c	;volatile
 15639                           
 15640                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 15641  004EFA  9283               	bcf	3971,1,c	;volatile
 15642                           
 15643                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 15644  004EFC  9083               	bcf	3971,0,c	;volatile
 15645                           
 15646                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 15647  004EFE  8E83               	bsf	3971,7,c	;volatile
 15648                           
 15649                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 15650  004F00  0100               	movlb	0	; () banked
 15651  004F02  A962               	btfss	endereco_cursor_lcd@endereco& (0+255),4,b
 15652  004F04  D002               	goto	l721
 15653                           
 15654                           ; BSR set to: 0
 15655  004F06  8883               	bsf	3971,4,c	;volatile
 15656  004F08  D001               	goto	l722
 15657  004F0A                     l721:
 15658                           
 15659                           ; BSR set to: 0
 15660                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 15661  004F0A  9883               	bcf	3971,4,c	;volatile
 15662  004F0C                     l722:
 15663                           
 15664                           ; BSR set to: 0
 15665                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 15666                           
 15667                           ; BSR set to: 0
 15668  004F0C  AB62               	btfss	endereco_cursor_lcd@endereco& (0+255),5,b
 15669  004F0E  D002               	goto	l723
 15670                           
 15671                           ; BSR set to: 0
 15672  004F10  8A83               	bsf	3971,5,c	;volatile
 15673  004F12  D001               	goto	l724
 15674  004F14                     l723:
 15675                           
 15676                           ; BSR set to: 0
 15677                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 15678  004F14  9A83               	bcf	3971,5,c	;volatile
 15679  004F16                     l724:
 15680                           
 15681                           ; BSR set to: 0
 15682                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 15683                           
 15684                           ; BSR set to: 0
 15685  004F16  AD62               	btfss	endereco_cursor_lcd@endereco& (0+255),6,b
 15686  004F18  D002               	goto	l725
 15687                           
 15688                           ; BSR set to: 0
 15689  004F1A  8C83               	bsf	3971,6,c	;volatile
 15690  004F1C  D001               	goto	l726
 15691  004F1E                     l725:
 15692                           
 15693                           ; BSR set to: 0
 15694                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 15695  004F1E  9C83               	bcf	3971,6,c	;volatile
 15696  004F20                     l726:
 15697                           
 15698                           ; BSR set to: 0
 15699                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 15700  004F20  8083               	bsf	3971,0,c	;volatile
 15701                           
 15702                           ; BSR set to: 0
 15703                           ;display_lcd.c: 236: delay();
 15704  004F22  EC61  F02B         	call	_delay	;wreg free
 15705                           
 15706                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 15707  004F26  9083               	bcf	3971,0,c	;volatile
 15708                           
 15709                           ;display_lcd.c: 238: delay();
 15710  004F28  EC61  F02B         	call	_delay	;wreg free
 15711                           
 15712                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 15713  004F2C  0100               	movlb	0	; () banked
 15714  004F2E  A162               	btfss	endereco_cursor_lcd@endereco& (0+255),0,b
 15715  004F30  D002               	goto	l727
 15716                           
 15717                           ; BSR set to: 0
 15718  004F32  8883               	bsf	3971,4,c	;volatile
 15719  004F34  D001               	goto	l728
 15720  004F36                     l727:
 15721                           
 15722                           ; BSR set to: 0
 15723                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 15724  004F36  9883               	bcf	3971,4,c	;volatile
 15725  004F38                     l728:
 15726                           
 15727                           ; BSR set to: 0
 15728                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 15729  004F38  A362               	btfss	endereco_cursor_lcd@endereco& (0+255),1,b
 15730  004F3A  D002               	goto	l729
 15731                           
 15732                           ; BSR set to: 0
 15733  004F3C  8A83               	bsf	3971,5,c	;volatile
 15734  004F3E  D001               	goto	l730
 15735  004F40                     l729:
 15736                           
 15737                           ; BSR set to: 0
 15738                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 15739  004F40  9A83               	bcf	3971,5,c	;volatile
 15740  004F42                     l730:
 15741                           
 15742                           ; BSR set to: 0
 15743                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 15744  004F42  A562               	btfss	endereco_cursor_lcd@endereco& (0+255),2,b
 15745  004F44  D002               	goto	l731
 15746                           
 15747                           ; BSR set to: 0
 15748  004F46  8C83               	bsf	3971,6,c	;volatile
 15749  004F48  D001               	goto	l732
 15750  004F4A                     l731:
 15751                           
 15752                           ; BSR set to: 0
 15753                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 15754  004F4A  9C83               	bcf	3971,6,c	;volatile
 15755  004F4C                     l732:
 15756                           
 15757                           ; BSR set to: 0
 15758                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 15759  004F4C  A762               	btfss	endereco_cursor_lcd@endereco& (0+255),3,b
 15760  004F4E  D002               	goto	l733
 15761                           
 15762                           ; BSR set to: 0
 15763  004F50  8E83               	bsf	3971,7,c	;volatile
 15764  004F52  D001               	goto	l734
 15765  004F54                     l733:
 15766                           
 15767                           ; BSR set to: 0
 15768                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 15769  004F54  9E83               	bcf	3971,7,c	;volatile
 15770  004F56                     l734:
 15771                           
 15772                           ; BSR set to: 0
 15773                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 15774  004F56  8083               	bsf	3971,0,c	;volatile
 15775                           
 15776                           ; BSR set to: 0
 15777                           ;display_lcd.c: 252: delay();
 15778  004F58  EC61  F02B         	call	_delay	;wreg free
 15779                           
 15780                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 15781  004F5C  9083               	bcf	3971,0,c	;volatile
 15782                           
 15783                           ;display_lcd.c: 254: delay();
 15784  004F5E  EC61  F02B         	call	_delay	;wreg free
 15785  004F62  0012               	return		;funcret
 15786  004F64                     __end_of_endereco_cursor_lcd:
 15787                           	opt stack 0
 15788                           tosu	equ	0xFFF
 15789                           tosh	equ	0xFFE
 15790                           tosl	equ	0xFFD
 15791                           pclath	equ	0xFFA
 15792                           tblptru	equ	0xFF8
 15793                           tblptrh	equ	0xFF7
 15794                           tblptrl	equ	0xFF6
 15795                           tablat	equ	0xFF5
 15796                           prodh	equ	0xFF4
 15797                           prodl	equ	0xFF3
 15798                           intcon	equ	0xFF2
 15799                           intcon2	equ	0xFF1
 15800                           intcon3	equ	0xFF0
 15801                           indf0	equ	0xFEF
 15802                           postinc0	equ	0xFEE
 15803                           fsr0h	equ	0xFEA
 15804                           fsr0l	equ	0xFE9
 15805                           wreg	equ	0xFE8
 15806                           indf1	equ	0xFE7
 15807                           postinc1	equ	0xFE6
 15808                           postdec1	equ	0xFE5
 15809                           plusw1	equ	0xFE3
 15810                           fsr1h	equ	0xFE2
 15811                           fsr1l	equ	0xFE1
 15812                           indf2	equ	0xFDF
 15813                           postinc2	equ	0xFDE
 15814                           postdec2	equ	0xFDD
 15815                           plusw2	equ	0xFDB
 15816                           fsr2h	equ	0xFDA
 15817                           fsr2l	equ	0xFD9
 15818                           status	equ	0xFD8
 15819                           
 15820 ;; *************** function _escreve_frase_ram_lcd *****************
 15821 ;; Defined at:
 15822 ;;		line 445 in file "bibliotecas/display_lcd.c"
 15823 ;; Parameters:    Size  Location     Type
 15824 ;;  buffer          2    3[BANK0 ] PTR unsigned char 
 15825 ;;		 -> NULL(0), escreve_inteiro_lcd@texto(7), STR_29(11), STR_28(10), 
 15826 ;;		 -> STR_27(16), STR_26(11), STR_18(9), STR_17(10), 
 15827 ;;		 -> STR_16(10), STR_15(14), STR_14(21), STR_13(15), 
 15828 ;;		 -> rawLongitude(13), rawLatitude(13), STR_10(8), STR_9(17), 
 15829 ;;		 -> STR_8(8), STR_7(16), STR_6(9), STR_5(4), 
 15830 ;;		 -> STR_4(4), STR_3(5), STR_2(5), STR_1(14), 
 15831 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 15832 ;; Auto vars:     Size  Location     Type
 15833 ;;		None
 15834 ;; Return value:  Size  Location     Type
 15835 ;;                  1    wreg      void 
 15836 ;; Registers used:
 15837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15838 ;; Tracked objects:
 15839 ;;		On entry : 0/0
 15840 ;;		On exit  : 0/0
 15841 ;;		Unchanged: 0/0
 15842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15843 ;;      Params:         0       2       0       0       0       0       0       0       0
 15844 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15845 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15846 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15847 ;;Total ram usage:        2 bytes
 15848 ;; Hardware stack levels used:    1
 15849 ;; Hardware stack levels required when called:    5
 15850 ;; This function calls:
 15851 ;;		_escreve_caractere_lcd
 15852 ;; This function is called by:
 15853 ;;		_mensagem_inicial
 15854 ;;		_verifica_fence_externo
 15855 ;;		_troca_de_tela
 15856 ;;		_sdc_reset
 15857 ;;		_sdc_disk_initialize
 15858 ;;		_escreve_inteiro_lcd
 15859 ;;		_sdcard_init
 15860 ;; This function uses a non-reentrant model
 15861 ;;
 15862                           
 15863                           	psect	text51
 15864  0051F8                     __ptext51:
 15865                           	opt stack 0
 15866  0051F8                     _escreve_frase_ram_lcd:
 15867                           	opt stack 24
 15868                           
 15869                           ;display_lcd.c: 447: while(*buffer)
 15870                           
 15871                           ;incstack = 0
 15872  0051F8  D015               	goto	l783
 15873  0051FA                     
 15874                           ;display_lcd.c: 448: {
 15875                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 15876  0051FA  C063  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 15877  0051FE  C064  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 15878  005202  6AF8               	clrf	tblptru,c
 15879  005204  0E07               	movlw	(high __ramtop+-1)
 15880  005206  64F7               	cpfsgt	tblptrh,c
 15881  005208  D003               	bra	u12807
 15882  00520A  0008               	tblrd		*
 15883  00520C  50F5               	movf	tablat,w,c
 15884  00520E  D005               	bra	u12800
 15885  005210                     u12807:
 15886  005210  CFF6 FFE9          	movff	tblptrl,fsr0l
 15887  005214  CFF7 FFEA          	movff	tblptrh,fsr0h
 15888  005218  50EF               	movf	indf0,w,c
 15889  00521A                     u12800:
 15890  00521A  EC3E  F027         	call	_escreve_caractere_lcd
 15891                           
 15892                           ;display_lcd.c: 450: buffer++;
 15893  00521E  0100               	movlb	0	; () banked
 15894  005220  4B63               	infsnz	escreve_frase_ram_lcd@buffer& (0+255),f,b
 15895  005222  2B64               	incf	(escreve_frase_ram_lcd@buffer+1)& (0+255),f,b
 15896  005224                     l783:
 15897                           
 15898                           ; BSR set to: 0
 15899  005224  C063  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 15900  005228  C064  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 15901  00522C  6AF8               	clrf	tblptru,c
 15902  00522E  0E07               	movlw	(high __ramtop+-1)
 15903  005230  64F7               	cpfsgt	tblptrh,c
 15904  005232  D003               	bra	u12817
 15905  005234  0008               	tblrd		*
 15906  005236  50F5               	movf	tablat,w,c
 15907  005238  D005               	bra	u12810
 15908  00523A                     u12817:
 15909  00523A  CFF6 FFE9          	movff	tblptrl,fsr0l
 15910  00523E  CFF7 FFEA          	movff	tblptrh,fsr0h
 15911  005242  50EF               	movf	indf0,w,c
 15912  005244                     u12810:
 15913  005244  0900               	iorlw	0
 15914  005246  B4D8               	btfsc	status,2,c
 15915  005248  0012               	return	
 15916  00524A  D7D7               	goto	l784
 15917  00524C                     __end_of_escreve_frase_ram_lcd:
 15918                           	opt stack 0
 15919                           tosu	equ	0xFFF
 15920                           tosh	equ	0xFFE
 15921                           tosl	equ	0xFFD
 15922                           pclath	equ	0xFFA
 15923                           tblptru	equ	0xFF8
 15924                           tblptrh	equ	0xFF7
 15925                           tblptrl	equ	0xFF6
 15926                           tablat	equ	0xFF5
 15927                           prodh	equ	0xFF4
 15928                           prodl	equ	0xFF3
 15929                           intcon	equ	0xFF2
 15930                           intcon2	equ	0xFF1
 15931                           intcon3	equ	0xFF0
 15932                           indf0	equ	0xFEF
 15933                           postinc0	equ	0xFEE
 15934                           fsr0h	equ	0xFEA
 15935                           fsr0l	equ	0xFE9
 15936                           wreg	equ	0xFE8
 15937                           indf1	equ	0xFE7
 15938                           postinc1	equ	0xFE6
 15939                           postdec1	equ	0xFE5
 15940                           plusw1	equ	0xFE3
 15941                           fsr1h	equ	0xFE2
 15942                           fsr1l	equ	0xFE1
 15943                           indf2	equ	0xFDF
 15944                           postinc2	equ	0xFDE
 15945                           postdec2	equ	0xFDD
 15946                           plusw2	equ	0xFDB
 15947                           fsr2h	equ	0xFDA
 15948                           fsr2l	equ	0xFD9
 15949                           status	equ	0xFD8
 15950                           
 15951 ;; *************** function _escreve_caractere_lcd *****************
 15952 ;; Defined at:
 15953 ;;		line 323 in file "bibliotecas/display_lcd.c"
 15954 ;; Parameters:    Size  Location     Type
 15955 ;;  data            1    wreg     unsigned char 
 15956 ;; Auto vars:     Size  Location     Type
 15957 ;;  data            1    2[BANK0 ] unsigned char 
 15958 ;; Return value:  Size  Location     Type
 15959 ;;                  1    wreg      void 
 15960 ;; Registers used:
 15961 ;;		wreg, status,2, status,0, cstack
 15962 ;; Tracked objects:
 15963 ;;		On entry : 0/0
 15964 ;;		On exit  : 0/0
 15965 ;;		Unchanged: 0/0
 15966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15967 ;;      Params:         0       0       0       0       0       0       0       0       0
 15968 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15969 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15970 ;;      Totals:         0       1       0       0       0       0       0       0       0
 15971 ;;Total ram usage:        1 bytes
 15972 ;; Hardware stack levels used:    1
 15973 ;; Hardware stack levels required when called:    4
 15974 ;; This function calls:
 15975 ;;		_delay
 15976 ;; This function is called by:
 15977 ;;		_escreve_frase_ram_lcd
 15978 ;;		_escreve_float_lcd
 15979 ;;		_escreve_frase_lcd
 15980 ;;		_cria_caractere_lcd
 15981 ;; This function uses a non-reentrant model
 15982 ;;
 15983                           
 15984                           	psect	text52
 15985  004E7C                     __ptext52:
 15986                           	opt stack 0
 15987  004E7C                     _escreve_caractere_lcd:
 15988                           	opt stack 24
 15989                           
 15990                           ;incstack = 0
 15991                           ;escreve_caractere_lcd@data stored from wreg
 15992  004E7C  0100               	movlb	0	; () banked
 15993  004E7E  6F62               	movwf	escreve_caractere_lcd@data& (0+255),b
 15994                           
 15995                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 15996  004E80  9483               	bcf	3971,2,c	;volatile
 15997                           
 15998                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 15999  004E82  8283               	bsf	3971,1,c	;volatile
 16000                           
 16001                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 16002  004E84  9083               	bcf	3971,0,c	;volatile
 16003                           
 16004                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 16005  004E86  0100               	movlb	0	; () banked
 16006  004E88  A962               	btfss	escreve_caractere_lcd@data& (0+255),4,b
 16007  004E8A  D002               	goto	l750
 16008                           
 16009                           ; BSR set to: 0
 16010  004E8C  8883               	bsf	3971,4,c	;volatile
 16011  004E8E  D001               	goto	l751
 16012  004E90                     l750:
 16013                           
 16014                           ; BSR set to: 0
 16015                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 16016  004E90  9883               	bcf	3971,4,c	;volatile
 16017  004E92                     l751:
 16018                           
 16019                           ; BSR set to: 0
 16020                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 16021                           
 16022                           ; BSR set to: 0
 16023  004E92  AB62               	btfss	escreve_caractere_lcd@data& (0+255),5,b
 16024  004E94  D002               	goto	l752
 16025                           
 16026                           ; BSR set to: 0
 16027  004E96  8A83               	bsf	3971,5,c	;volatile
 16028  004E98  D001               	goto	l753
 16029  004E9A                     l752:
 16030                           
 16031                           ; BSR set to: 0
 16032                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 16033  004E9A  9A83               	bcf	3971,5,c	;volatile
 16034  004E9C                     l753:
 16035                           
 16036                           ; BSR set to: 0
 16037                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 16038                           
 16039                           ; BSR set to: 0
 16040  004E9C  AD62               	btfss	escreve_caractere_lcd@data& (0+255),6,b
 16041  004E9E  D002               	goto	l754
 16042                           
 16043                           ; BSR set to: 0
 16044  004EA0  8C83               	bsf	3971,6,c	;volatile
 16045  004EA2  D001               	goto	l755
 16046  004EA4                     l754:
 16047                           
 16048                           ; BSR set to: 0
 16049                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 16050  004EA4  9C83               	bcf	3971,6,c	;volatile
 16051  004EA6                     l755:
 16052                           
 16053                           ; BSR set to: 0
 16054                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 16055                           
 16056                           ; BSR set to: 0
 16057  004EA6  AF62               	btfss	escreve_caractere_lcd@data& (0+255),7,b
 16058  004EA8  D002               	goto	l756
 16059                           
 16060                           ; BSR set to: 0
 16061  004EAA  8E83               	bsf	3971,7,c	;volatile
 16062  004EAC  D001               	goto	l757
 16063  004EAE                     l756:
 16064                           
 16065                           ; BSR set to: 0
 16066                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 16067  004EAE  9E83               	bcf	3971,7,c	;volatile
 16068  004EB0                     l757:
 16069                           
 16070                           ; BSR set to: 0
 16071                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 16072  004EB0  8083               	bsf	3971,0,c	;volatile
 16073                           
 16074                           ; BSR set to: 0
 16075                           ;display_lcd.c: 342: delay();
 16076  004EB2  EC61  F02B         	call	_delay	;wreg free
 16077                           
 16078                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 16079  004EB6  9083               	bcf	3971,0,c	;volatile
 16080                           
 16081                           ;display_lcd.c: 344: delay();
 16082  004EB8  EC61  F02B         	call	_delay	;wreg free
 16083                           
 16084                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 16085  004EBC  0100               	movlb	0	; () banked
 16086  004EBE  A162               	btfss	escreve_caractere_lcd@data& (0+255),0,b
 16087  004EC0  D002               	goto	l758
 16088                           
 16089                           ; BSR set to: 0
 16090  004EC2  8883               	bsf	3971,4,c	;volatile
 16091  004EC4  D001               	goto	l759
 16092  004EC6                     l758:
 16093                           
 16094                           ; BSR set to: 0
 16095                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 16096  004EC6  9883               	bcf	3971,4,c	;volatile
 16097  004EC8                     l759:
 16098                           
 16099                           ; BSR set to: 0
 16100                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 16101  004EC8  A362               	btfss	escreve_caractere_lcd@data& (0+255),1,b
 16102  004ECA  D002               	goto	l760
 16103                           
 16104                           ; BSR set to: 0
 16105  004ECC  8A83               	bsf	3971,5,c	;volatile
 16106  004ECE  D001               	goto	l761
 16107  004ED0                     l760:
 16108                           
 16109                           ; BSR set to: 0
 16110                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 16111  004ED0  9A83               	bcf	3971,5,c	;volatile
 16112  004ED2                     l761:
 16113                           
 16114                           ; BSR set to: 0
 16115                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 16116  004ED2  A562               	btfss	escreve_caractere_lcd@data& (0+255),2,b
 16117  004ED4  D002               	goto	l762
 16118                           
 16119                           ; BSR set to: 0
 16120  004ED6  8C83               	bsf	3971,6,c	;volatile
 16121  004ED8  D001               	goto	l763
 16122  004EDA                     l762:
 16123                           
 16124                           ; BSR set to: 0
 16125                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 16126  004EDA  9C83               	bcf	3971,6,c	;volatile
 16127  004EDC                     l763:
 16128                           
 16129                           ; BSR set to: 0
 16130                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 16131  004EDC  A762               	btfss	escreve_caractere_lcd@data& (0+255),3,b
 16132  004EDE  D002               	goto	l764
 16133                           
 16134                           ; BSR set to: 0
 16135  004EE0  8E83               	bsf	3971,7,c	;volatile
 16136  004EE2  D001               	goto	l765
 16137  004EE4                     l764:
 16138                           
 16139                           ; BSR set to: 0
 16140                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 16141  004EE4  9E83               	bcf	3971,7,c	;volatile
 16142  004EE6                     l765:
 16143                           
 16144                           ; BSR set to: 0
 16145                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 16146  004EE6  8083               	bsf	3971,0,c	;volatile
 16147                           
 16148                           ; BSR set to: 0
 16149                           ;display_lcd.c: 359: delay();
 16150  004EE8  EC61  F02B         	call	_delay	;wreg free
 16151                           
 16152                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 16153  004EEC  9083               	bcf	3971,0,c	;volatile
 16154                           
 16155                           ;display_lcd.c: 361: delay();
 16156  004EEE  EC61  F02B         	call	_delay	;wreg free
 16157  004EF2  0012               	return		;funcret
 16158  004EF4                     __end_of_escreve_caractere_lcd:
 16159                           	opt stack 0
 16160                           tosu	equ	0xFFF
 16161                           tosh	equ	0xFFE
 16162                           tosl	equ	0xFFD
 16163                           pclath	equ	0xFFA
 16164                           tblptru	equ	0xFF8
 16165                           tblptrh	equ	0xFF7
 16166                           tblptrl	equ	0xFF6
 16167                           tablat	equ	0xFF5
 16168                           prodh	equ	0xFF4
 16169                           prodl	equ	0xFF3
 16170                           intcon	equ	0xFF2
 16171                           intcon2	equ	0xFF1
 16172                           intcon3	equ	0xFF0
 16173                           indf0	equ	0xFEF
 16174                           postinc0	equ	0xFEE
 16175                           fsr0h	equ	0xFEA
 16176                           fsr0l	equ	0xFE9
 16177                           wreg	equ	0xFE8
 16178                           indf1	equ	0xFE7
 16179                           postinc1	equ	0xFE6
 16180                           postdec1	equ	0xFE5
 16181                           plusw1	equ	0xFE3
 16182                           fsr1h	equ	0xFE2
 16183                           fsr1l	equ	0xFE1
 16184                           indf2	equ	0xFDF
 16185                           postinc2	equ	0xFDE
 16186                           postdec2	equ	0xFDD
 16187                           plusw2	equ	0xFDB
 16188                           fsr2h	equ	0xFDA
 16189                           fsr2l	equ	0xFD9
 16190                           status	equ	0xFD8
 16191                           
 16192 ;; *************** function _delay *****************
 16193 ;; Defined at:
 16194 ;;		line 45 in file "bibliotecas/display_lcd.c"
 16195 ;; Parameters:    Size  Location     Type
 16196 ;;		None
 16197 ;; Auto vars:     Size  Location     Type
 16198 ;;  contador_int    1    1[BANK0 ] unsigned char 
 16199 ;;  contador_ext    1    0[BANK0 ] unsigned char 
 16200 ;; Return value:  Size  Location     Type
 16201 ;;                  1    wreg      void 
 16202 ;; Registers used:
 16203 ;;		wreg, status,2, status,0
 16204 ;; Tracked objects:
 16205 ;;		On entry : 0/0
 16206 ;;		On exit  : 0/0
 16207 ;;		Unchanged: 0/0
 16208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16209 ;;      Params:         0       0       0       0       0       0       0       0       0
 16210 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16211 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16212 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16213 ;;Total ram usage:        2 bytes
 16214 ;; Hardware stack levels used:    1
 16215 ;; Hardware stack levels required when called:    3
 16216 ;; This function calls:
 16217 ;;		Nothing
 16218 ;; This function is called by:
 16219 ;;		_init_lcd
 16220 ;;		_escreve_cmd_lcd
 16221 ;;		_endereco_cursor_lcd
 16222 ;;		_escreve_caractere_lcd
 16223 ;; This function uses a non-reentrant model
 16224 ;;
 16225                           
 16226                           	psect	text53
 16227  0056C2                     __ptext53:
 16228                           	opt stack 0
 16229  0056C2                     _delay:
 16230                           	opt stack 24
 16231                           
 16232                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 16233                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 16234                           
 16235                           ;incstack = 0
 16236  0056C2  0E00               	movlw	0
 16237  0056C4  0100               	movlb	0	; () banked
 16238  0056C6  6F60               	movwf	delay@contador_ext& (0+255),b
 16239  0056C8                     l9810:
 16240                           
 16241                           ; BSR set to: 0
 16242  0056C8  0E63               	movlw	99
 16243  0056CA  6560               	cpfsgt	delay@contador_ext& (0+255),b
 16244  0056CC  D001               	goto	l689
 16245  0056CE  0012               	return	
 16246  0056D0                     l689:
 16247                           
 16248                           ; BSR set to: 0
 16249                           ;display_lcd.c: 50: {
 16250                           ;display_lcd.c: 51: __nop();
 16251  0056D0  F000               	nop	
 16252                           
 16253                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 16254  0056D2  0E00               	movlw	0
 16255  0056D4  0100               	movlb	0	; () banked
 16256  0056D6  6F61               	movwf	delay@contador_int& (0+255),b
 16257  0056D8                     l9816:
 16258                           
 16259                           ; BSR set to: 0
 16260  0056D8  0E31               	movlw	49
 16261  0056DA  6561               	cpfsgt	delay@contador_int& (0+255),b
 16262  0056DC  D001               	goto	l691
 16263  0056DE  D004               	goto	u12530
 16264  0056E0                     l691:
 16265                           
 16266                           ; BSR set to: 0
 16267                           ;display_lcd.c: 53: {
 16268                           ;display_lcd.c: 54: __nop();
 16269  0056E0  F000               	nop	
 16270  0056E2  0100               	movlb	0	; () banked
 16271  0056E4  2B61               	incf	delay@contador_int& (0+255),f,b
 16272  0056E6  D7F8               	goto	l9816
 16273  0056E8                     u12530:
 16274                           
 16275                           ; BSR set to: 0
 16276                           
 16277                           ; BSR set to: 0
 16278  0056E8  2B60               	incf	delay@contador_ext& (0+255),f,b
 16279  0056EA  D7EE               	goto	l9810
 16280  0056EC                     __end_of_delay:
 16281                           	opt stack 0
 16282                           tosu	equ	0xFFF
 16283                           tosh	equ	0xFFE
 16284                           tosl	equ	0xFFD
 16285                           pclath	equ	0xFFA
 16286                           tblptru	equ	0xFF8
 16287                           tblptrh	equ	0xFF7
 16288                           tblptrl	equ	0xFF6
 16289                           tablat	equ	0xFF5
 16290                           prodh	equ	0xFF4
 16291                           prodl	equ	0xFF3
 16292                           intcon	equ	0xFF2
 16293                           intcon2	equ	0xFF1
 16294                           intcon3	equ	0xFF0
 16295                           indf0	equ	0xFEF
 16296                           postinc0	equ	0xFEE
 16297                           fsr0h	equ	0xFEA
 16298                           fsr0l	equ	0xFE9
 16299                           wreg	equ	0xFE8
 16300                           indf1	equ	0xFE7
 16301                           postinc1	equ	0xFE6
 16302                           postdec1	equ	0xFE5
 16303                           plusw1	equ	0xFE3
 16304                           fsr1h	equ	0xFE2
 16305                           fsr1l	equ	0xFE1
 16306                           indf2	equ	0xFDF
 16307                           postinc2	equ	0xFDE
 16308                           postdec2	equ	0xFDD
 16309                           plusw2	equ	0xFDB
 16310                           fsr2h	equ	0xFDA
 16311                           fsr2l	equ	0xFD9
 16312                           status	equ	0xFD8
 16313                           
 16314 ;; *************** function _check_fs *****************
 16315 ;; Defined at:
 16316 ;;		line 623 in file "bibliotecas/tff.c"
 16317 ;; Parameters:    Size  Location     Type
 16318 ;;  sect            4   43[BANK0 ] unsigned long 
 16319 ;; Auto vars:     Size  Location     Type
 16320 ;;  fs              2   49[BANK0 ] PTR struct _FATFS
 16321 ;;		 -> NULL(0), fs(544), 
 16322 ;; Return value:  Size  Location     Type
 16323 ;;                  1    wreg      unsigned char 
 16324 ;; Registers used:
 16325 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16326 ;; Tracked objects:
 16327 ;;		On entry : 0/0
 16328 ;;		On exit  : 0/0
 16329 ;;		Unchanged: 0/0
 16330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16331 ;;      Params:         0       4       0       0       0       0       0       0       0
 16332 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16333 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16334 ;;      Totals:         0       8       0       0       0       0       0       0       0
 16335 ;;Total ram usage:        8 bytes
 16336 ;; Hardware stack levels used:    1
 16337 ;; Hardware stack levels required when called:    8
 16338 ;; This function calls:
 16339 ;;		_disk_read
 16340 ;;		_memcmp
 16341 ;; This function is called by:
 16342 ;;		_auto_mount
 16343 ;; This function uses a non-reentrant model
 16344 ;;
 16345                           
 16346                           	psect	text54
 16347  004B5C                     __ptext54:
 16348                           	opt stack 0
 16349  004B5C                     _check_fs:
 16350                           	opt stack 17
 16351                           
 16352                           ;tff.c: 627: FATFS *fs = FatFs;
 16353                           
 16354                           ; BSR set to: 0
 16355                           ;incstack = 0
 16356  004B5C  C0F7  F091         	movff	_FatFs,check_fs@fs
 16357  004B60  C0F8  F092         	movff	_FatFs+1,check_fs@fs+1
 16358                           
 16359                           ;tff.c: 629: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 16360  004B64  0E20               	movlw	32
 16361  004B66  0100               	movlb	0	; () banked
 16362  004B68  2591               	addwf	check_fs@fs& (0+255),w,b
 16363  004B6A  6F7F               	movwf	disk_read@buff& (0+255),b
 16364  004B6C  0E00               	movlw	0
 16365  004B6E  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 16366  004B70  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 16367  004B72  C08B  F081         	movff	check_fs@sect,disk_read@sector
 16368  004B76  C08C  F082         	movff	check_fs@sect+1,disk_read@sector+1
 16369  004B7A  C08D  F083         	movff	check_fs@sect+2,disk_read@sector+2
 16370  004B7E  C08E  F084         	movff	check_fs@sect+3,disk_read@sector+3
 16371  004B82  0E01               	movlw	1
 16372  004B84  6F85               	movwf	disk_read@count& (0+255),b
 16373  004B86  0E00               	movlw	0
 16374  004B88  EC20  F025         	call	_disk_read
 16375  004B8C  0900               	iorlw	0
 16376  004B8E  B4D8               	btfsc	status,2,c
 16377  004B90  D002               	goto	l1235
 16378                           
 16379                           ;tff.c: 630: return 2;
 16380  004B92  0E02               	movlw	2
 16381  004B94  0012               	return	
 16382  004B96                     l1235:
 16383                           
 16384                           ;tff.c: 631: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 16385  004B96  0100               	movlb	0	; () banked
 16386  004B98  EE22 F01E          	lfsr	2,542
 16387  004B9C  5191               	movf	check_fs@fs& (0+255),w,b
 16388  004B9E  26D9               	addwf	fsr2l,f,c
 16389  004BA0  5192               	movf	(check_fs@fs+1)& (0+255),w,b
 16390  004BA2  22DA               	addwfc	fsr2h,f,c
 16391  004BA4  0E55               	movlw	85
 16392  004BA6  18DE               	xorwf	postinc2,w,c
 16393  004BA8  E104               	bnz	u14180
 16394  004BAA  0EAA               	movlw	170
 16395  004BAC  18DE               	xorwf	postinc2,w,c
 16396  004BAE  B4D8               	btfsc	status,2,c
 16397  004BB0  D002               	goto	l1237
 16398  004BB2                     u14180:
 16399                           
 16400                           ; BSR set to: 0
 16401                           ;tff.c: 632: return 2;
 16402  004BB2  0E02               	movlw	2
 16403                           
 16404                           ; BSR set to: 0
 16405  004BB4  0012               	return	
 16406  004BB6                     l1237:
 16407                           
 16408                           ; BSR set to: 0
 16409                           ;tff.c: 634: if (!memcmp(&fs->win[54], "FAT", 3))
 16410                           
 16411                           ; BSR set to: 0
 16412  004BB6  0E56               	movlw	86
 16413  004BB8  2591               	addwf	check_fs@fs& (0+255),w,b
 16414  004BBA  6F60               	movwf	memcmp@s1& (0+255),b
 16415  004BBC  0E00               	movlw	0
 16416  004BBE  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 16417  004BC0  6F61               	movwf	(memcmp@s1+1)& (0+255),b
 16418  004BC2  0E70               	movlw	low STR_31
 16419  004BC4  6F62               	movwf	memcmp@s2& (0+255),b
 16420  004BC6  0E62               	movlw	high STR_31
 16421  004BC8  6F63               	movwf	(memcmp@s2+1)& (0+255),b
 16422  004BCA  0E00               	movlw	0
 16423  004BCC  6F65               	movwf	(memcmp@n+1)& (0+255),b
 16424  004BCE  0E03               	movlw	3
 16425  004BD0  6F64               	movwf	memcmp@n& (0+255),b
 16426  004BD2  ECED  F023         	call	_memcmp	;wreg free
 16427  004BD6  0100               	movlb	0	; () banked
 16428  004BD8  5160               	movf	?_memcmp& (0+255),w,b
 16429  004BDA  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 16430  004BDC  A4D8               	btfss	status,2,c
 16431  004BDE  D002               	goto	l1238
 16432                           
 16433                           ; BSR set to: 0
 16434                           ;tff.c: 635: return 0;
 16435  004BE0  0E00               	movlw	0
 16436                           
 16437                           ; BSR set to: 0
 16438  004BE2  0012               	return	
 16439  004BE4                     l1238:
 16440                           
 16441                           ; BSR set to: 0
 16442                           ;tff.c: 640: return 1;
 16443                           
 16444                           ; BSR set to: 0
 16445  004BE4  0E01               	movlw	1
 16446  004BE6  0012               	return	
 16447  004BE8                     __end_of_check_fs:
 16448                           	opt stack 0
 16449                           tosu	equ	0xFFF
 16450                           tosh	equ	0xFFE
 16451                           tosl	equ	0xFFD
 16452                           pclath	equ	0xFFA
 16453                           tblptru	equ	0xFF8
 16454                           tblptrh	equ	0xFF7
 16455                           tblptrl	equ	0xFF6
 16456                           tablat	equ	0xFF5
 16457                           prodh	equ	0xFF4
 16458                           prodl	equ	0xFF3
 16459                           intcon	equ	0xFF2
 16460                           intcon2	equ	0xFF1
 16461                           intcon3	equ	0xFF0
 16462                           indf0	equ	0xFEF
 16463                           postinc0	equ	0xFEE
 16464                           fsr0h	equ	0xFEA
 16465                           fsr0l	equ	0xFE9
 16466                           wreg	equ	0xFE8
 16467                           indf1	equ	0xFE7
 16468                           postinc1	equ	0xFE6
 16469                           postdec1	equ	0xFE5
 16470                           plusw1	equ	0xFE3
 16471                           fsr1h	equ	0xFE2
 16472                           fsr1l	equ	0xFE1
 16473                           indf2	equ	0xFDF
 16474                           postinc2	equ	0xFDE
 16475                           postdec2	equ	0xFDD
 16476                           plusw2	equ	0xFDB
 16477                           fsr2h	equ	0xFDA
 16478                           fsr2l	equ	0xFD9
 16479                           status	equ	0xFD8
 16480                           
 16481 ;; *************** function _memcmp *****************
 16482 ;; Defined at:
 16483 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
 16484 ;; Parameters:    Size  Location     Type
 16485 ;;  s1              2    0[BANK0 ] PTR const void 
 16486 ;;		 -> fs.win(512), NULL(0), fs(544), 
 16487 ;;  s2              2    2[BANK0 ] PTR const void 
 16488 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_31(4), 
 16489 ;;  n               2    4[BANK0 ] unsigned int 
 16490 ;; Auto vars:     Size  Location     Type
 16491 ;;		None
 16492 ;; Return value:  Size  Location     Type
 16493 ;;                  2    0[BANK0 ] int 
 16494 ;; Registers used:
 16495 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16496 ;; Tracked objects:
 16497 ;;		On entry : 0/0
 16498 ;;		On exit  : 0/0
 16499 ;;		Unchanged: 0/0
 16500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16501 ;;      Params:         0       6       0       0       0       0       0       0       0
 16502 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16503 ;;      Temps:          0       3       0       0       0       0       0       0       0
 16504 ;;      Totals:         0       9       0       0       0       0       0       0       0
 16505 ;;Total ram usage:        9 bytes
 16506 ;; Hardware stack levels used:    1
 16507 ;; Hardware stack levels required when called:    3
 16508 ;; This function calls:
 16509 ;;		Nothing
 16510 ;; This function is called by:
 16511 ;;		_trace_path
 16512 ;;		_check_fs
 16513 ;; This function uses a non-reentrant model
 16514 ;;
 16515                           
 16516                           	psect	text55
 16517  0047DA                     __ptext55:
 16518                           	opt stack 0
 16519  0047DA                     _memcmp:
 16520                           	opt stack 22
 16521                           
 16522                           ;incstack = 0
 16523  0047DA  D043               	goto	l1981
 16524  0047DC                     l10474:
 16525  0047DC  C060  FFD9         	movff	memcmp@s1,fsr2l
 16526  0047E0  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 16527  0047E4  50DF               	movf	indf2,w,c
 16528  0047E6  0100               	movlb	0	; () banked
 16529  0047E8  6F66               	movwf	??_memcmp& (0+255),b
 16530  0047EA  C062  FFF6         	movff	memcmp@s2,tblptrl
 16531  0047EE  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 16532  0047F2  6AF8               	clrf	tblptru,c
 16533  0047F4  0E07               	movlw	(high __ramtop+-1)
 16534  0047F6  64F7               	cpfsgt	tblptrh,c
 16535  0047F8  D003               	bra	u13507
 16536  0047FA  0008               	tblrd		*
 16537  0047FC  50F5               	movf	tablat,w,c
 16538  0047FE  D005               	bra	u13500
 16539  004800                     u13507:
 16540  004800  CFF6 FFE9          	movff	tblptrl,fsr0l
 16541  004804  CFF7 FFEA          	movff	tblptrh,fsr0h
 16542  004808  50EF               	movf	indf0,w,c
 16543  00480A                     u13500:
 16544  00480A  0100               	movlb	0	; () banked
 16545  00480C  1966               	xorwf	??_memcmp& (0+255),w,b
 16546  00480E  B4D8               	btfsc	status,2,c
 16547  004810  D024               	goto	l1983
 16548                           
 16549                           ; BSR set to: 0
 16550  004812  C062  FFF6         	movff	memcmp@s2,tblptrl
 16551  004816  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 16552  00481A  6AF8               	clrf	tblptru,c
 16553  00481C  0E07               	movlw	(high __ramtop+-1)
 16554  00481E  64F7               	cpfsgt	tblptrh,c
 16555  004820  D003               	bra	u13527
 16556  004822  0008               	tblrd		*
 16557  004824  50F5               	movf	tablat,w,c
 16558  004826  D005               	bra	u13520
 16559  004828                     u13527:
 16560  004828  CFF6 FFE9          	movff	tblptrl,fsr0l
 16561  00482C  CFF7 FFEA          	movff	tblptrh,fsr0h
 16562  004830  50EF               	movf	indf0,w,c
 16563  004832                     u13520:
 16564  004832  0100               	movlb	0	; () banked
 16565  004834  6F66               	movwf	??_memcmp& (0+255),b
 16566  004836  6B67               	clrf	(??_memcmp+1)& (0+255),b
 16567  004838  1F66               	comf	??_memcmp& (0+255),f,b
 16568  00483A  1F67               	comf	(??_memcmp+1)& (0+255),f,b
 16569  00483C  4B66               	infsnz	??_memcmp& (0+255),f,b
 16570  00483E  2B67               	incf	(??_memcmp+1)& (0+255),f,b
 16571  004840  C060  FFD9         	movff	memcmp@s1,fsr2l
 16572  004844  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 16573  004848  50DF               	movf	indf2,w,c
 16574  00484A  6F68               	movwf	(??_memcmp+2)& (0+255),b
 16575  00484C  5168               	movf	(??_memcmp+2)& (0+255),w,b
 16576  00484E  2566               	addwf	??_memcmp& (0+255),w,b
 16577  004850  6F60               	movwf	?_memcmp& (0+255),b
 16578  004852  0E00               	movlw	0
 16579  004854  2167               	addwfc	(??_memcmp+1)& (0+255),w,b
 16580  004856  6F61               	movwf	(?_memcmp+1)& (0+255),b
 16581                           
 16582                           ; BSR set to: 0
 16583  004858  0012               	return	
 16584  00485A                     l1983:
 16585                           
 16586                           ; BSR set to: 0
 16587                           
 16588                           ; BSR set to: 0
 16589  00485A  4B60               	infsnz	memcmp@s1& (0+255),f,b
 16590  00485C  2B61               	incf	(memcmp@s1+1)& (0+255),f,b
 16591  00485E  4B62               	infsnz	memcmp@s2& (0+255),f,b
 16592  004860  2B63               	incf	(memcmp@s2+1)& (0+255),f,b
 16593  004862                     l1981:
 16594                           
 16595                           ; BSR set to: 0
 16596  004862  0100               	movlb	0	; () banked
 16597  004864  0764               	decf	memcmp@n& (0+255),f,b
 16598  004866  A0D8               	btfss	status,0,c
 16599  004868  0765               	decf	(memcmp@n+1)& (0+255),f,b
 16600  00486A  2964               	incf	memcmp@n& (0+255),w,b
 16601  00486C  E1B7               	bnz	l10474
 16602  00486E  2965               	incf	(memcmp@n+1)& (0+255),w,b
 16603  004870  A4D8               	btfss	status,2,c
 16604  004872  D7B4               	goto	l1982
 16605                           
 16606                           ; BSR set to: 0
 16607                           
 16608                           ; BSR set to: 0
 16609  004874  0E00               	movlw	0
 16610  004876  6F61               	movwf	(?_memcmp+1)& (0+255),b
 16611  004878  0E00               	movlw	0
 16612  00487A  6F60               	movwf	?_memcmp& (0+255),b
 16613  00487C  0012               	return	
 16614  00487E                     __end_of_memcmp:
 16615                           	opt stack 0
 16616                           tosu	equ	0xFFF
 16617                           tosh	equ	0xFFE
 16618                           tosl	equ	0xFFD
 16619                           pclath	equ	0xFFA
 16620                           tblptru	equ	0xFF8
 16621                           tblptrh	equ	0xFF7
 16622                           tblptrl	equ	0xFF6
 16623                           tablat	equ	0xFF5
 16624                           prodh	equ	0xFF4
 16625                           prodl	equ	0xFF3
 16626                           intcon	equ	0xFF2
 16627                           intcon2	equ	0xFF1
 16628                           intcon3	equ	0xFF0
 16629                           indf0	equ	0xFEF
 16630                           postinc0	equ	0xFEE
 16631                           fsr0h	equ	0xFEA
 16632                           fsr0l	equ	0xFE9
 16633                           wreg	equ	0xFE8
 16634                           indf1	equ	0xFE7
 16635                           postinc1	equ	0xFE6
 16636                           postdec1	equ	0xFE5
 16637                           plusw1	equ	0xFE3
 16638                           fsr1h	equ	0xFE2
 16639                           fsr1l	equ	0xFE1
 16640                           indf2	equ	0xFDF
 16641                           postinc2	equ	0xFDE
 16642                           postdec2	equ	0xFDD
 16643                           plusw2	equ	0xFDB
 16644                           fsr2h	equ	0xFDA
 16645                           fsr2l	equ	0xFD9
 16646                           status	equ	0xFD8
 16647                           
 16648 ;; *************** function ___lmul *****************
 16649 ;; Defined at:
 16650 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 16651 ;; Parameters:    Size  Location     Type
 16652 ;;  multiplier      4    0[BANK0 ] unsigned long 
 16653 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 16654 ;; Auto vars:     Size  Location     Type
 16655 ;;  product         4    8[BANK0 ] unsigned long 
 16656 ;; Return value:  Size  Location     Type
 16657 ;;                  4    0[BANK0 ] unsigned long 
 16658 ;; Registers used:
 16659 ;;		wreg, status,2, status,0
 16660 ;; Tracked objects:
 16661 ;;		On entry : 0/0
 16662 ;;		On exit  : 0/0
 16663 ;;		Unchanged: 0/0
 16664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16665 ;;      Params:         0       8       0       0       0       0       0       0       0
 16666 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16667 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16668 ;;      Totals:         0      12       0       0       0       0       0       0       0
 16669 ;;Total ram usage:       12 bytes
 16670 ;; Hardware stack levels used:    1
 16671 ;; Hardware stack levels required when called:    3
 16672 ;; This function calls:
 16673 ;;		Nothing
 16674 ;; This function is called by:
 16675 ;;		_clust2sect
 16676 ;;		_auto_mount
 16677 ;; This function uses a non-reentrant model
 16678 ;;
 16679                           
 16680                           	psect	text56
 16681  0050F6                     __ptext56:
 16682                           	opt stack 0
 16683  0050F6                     ___lmul:
 16684                           	opt stack 19
 16685                           
 16686                           ; BSR set to: 0
 16687                           ;incstack = 0
 16688  0050F6  0E00               	movlw	0
 16689  0050F8  0100               	movlb	0	; () banked
 16690  0050FA  6F68               	movwf	___lmul@product& (0+255),b
 16691  0050FC  0E00               	movlw	0
 16692  0050FE  6F69               	movwf	(___lmul@product+1)& (0+255),b
 16693  005100  0E00               	movlw	0
 16694  005102  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 16695  005104  0E00               	movlw	0
 16696  005106  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 16697  005108                     
 16698                           ; BSR set to: 0
 16699                           
 16700                           ; BSR set to: 0
 16701  005108  A160               	btfss	___lmul@multiplier& (0+255),0,b
 16702  00510A  D008               	goto	l1528
 16703                           
 16704                           ; BSR set to: 0
 16705  00510C  5164               	movf	___lmul@multiplicand& (0+255),w,b
 16706  00510E  2768               	addwf	___lmul@product& (0+255),f,b
 16707  005110  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 16708  005112  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 16709  005114  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 16710  005116  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 16711  005118  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 16712  00511A  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 16713  00511C                     l1528:
 16714                           
 16715                           ; BSR set to: 0
 16716                           
 16717                           ; BSR set to: 0
 16718  00511C  90D8               	bcf	status,0,c
 16719  00511E  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 16720  005120  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 16721  005122  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 16722  005124  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 16723                           
 16724                           ; BSR set to: 0
 16725  005126  90D8               	bcf	status,0,c
 16726  005128  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 16727  00512A  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 16728  00512C  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 16729  00512E  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 16730  005130  5160               	movf	___lmul@multiplier& (0+255),w,b
 16731  005132  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 16732  005134  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 16733  005136  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 16734  005138  A4D8               	btfss	status,2,c
 16735  00513A  D7E6               	goto	l1527
 16736                           
 16737                           ; BSR set to: 0
 16738  00513C  C068  F060         	movff	___lmul@product,?___lmul
 16739  005140  C069  F061         	movff	___lmul@product+1,?___lmul+1
 16740  005144  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 16741  005148  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 16742                           
 16743                           ; BSR set to: 0
 16744  00514C  0012               	return		;funcret
 16745  00514E                     __end_of___lmul:
 16746                           	opt stack 0
 16747                           tosu	equ	0xFFF
 16748                           tosh	equ	0xFFE
 16749                           tosl	equ	0xFFD
 16750                           pclath	equ	0xFFA
 16751                           tblptru	equ	0xFF8
 16752                           tblptrh	equ	0xFF7
 16753                           tblptrl	equ	0xFF6
 16754                           tablat	equ	0xFF5
 16755                           prodh	equ	0xFF4
 16756                           prodl	equ	0xFF3
 16757                           intcon	equ	0xFF2
 16758                           intcon2	equ	0xFF1
 16759                           intcon3	equ	0xFF0
 16760                           indf0	equ	0xFEF
 16761                           postinc0	equ	0xFEE
 16762                           fsr0h	equ	0xFEA
 16763                           fsr0l	equ	0xFE9
 16764                           wreg	equ	0xFE8
 16765                           indf1	equ	0xFE7
 16766                           postinc1	equ	0xFE6
 16767                           postdec1	equ	0xFE5
 16768                           plusw1	equ	0xFE3
 16769                           fsr1h	equ	0xFE2
 16770                           fsr1l	equ	0xFE1
 16771                           indf2	equ	0xFDF
 16772                           postinc2	equ	0xFDE
 16773                           postdec2	equ	0xFDD
 16774                           plusw2	equ	0xFDB
 16775                           fsr2h	equ	0xFDA
 16776                           fsr2l	equ	0xFD9
 16777                           status	equ	0xFD8
 16778                           
 16779 ;; *************** function _f_mount *****************
 16780 ;; Defined at:
 16781 ;;		line 793 in file "bibliotecas/tff.c"
 16782 ;; Parameters:    Size  Location     Type
 16783 ;;  drv             1    wreg     unsigned char 
 16784 ;;  fs              2    0[BANK0 ] PTR struct _FATFS
 16785 ;;		 -> fs(544), 
 16786 ;; Auto vars:     Size  Location     Type
 16787 ;;  drv             1    2[BANK0 ] unsigned char 
 16788 ;; Return value:  Size  Location     Type
 16789 ;;                  1    wreg      enum E3978
 16790 ;; Registers used:
 16791 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16792 ;; Tracked objects:
 16793 ;;		On entry : 0/0
 16794 ;;		On exit  : 0/0
 16795 ;;		Unchanged: 0/0
 16796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16797 ;;      Params:         0       2       0       0       0       0       0       0       0
 16798 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16799 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16800 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16801 ;;Total ram usage:        3 bytes
 16802 ;; Hardware stack levels used:    1
 16803 ;; Hardware stack levels required when called:    3
 16804 ;; This function calls:
 16805 ;;		Nothing
 16806 ;; This function is called by:
 16807 ;;		_escrita_sdcard
 16808 ;;		_sdcard_init
 16809 ;;		_leitura_sdcard
 16810 ;; This function uses a non-reentrant model
 16811 ;;
 16812                           
 16813                           	psect	text57
 16814  00529A                     __ptext57:
 16815                           	opt stack 0
 16816  00529A                     _f_mount:
 16817                           	opt stack 24
 16818                           
 16819                           ; BSR set to: 0
 16820                           ;incstack = 0
 16821                           ;f_mount@drv stored from wreg
 16822  00529A  0100               	movlb	0	; () banked
 16823  00529C  6F62               	movwf	f_mount@drv& (0+255),b
 16824                           
 16825                           ;tff.c: 798: if (drv) return FR_INVALID_DRIVE;
 16826  00529E  0100               	movlb	0	; () banked
 16827  0052A0  5162               	movf	f_mount@drv& (0+255),w,b
 16828  0052A2  B4D8               	btfsc	status,2,c
 16829  0052A4  D002               	goto	l1270
 16830                           
 16831                           ; BSR set to: 0
 16832  0052A6  0E05               	movlw	5
 16833                           
 16834                           ; BSR set to: 0
 16835  0052A8  0012               	return	
 16836  0052AA                     l1270:
 16837                           
 16838                           ; BSR set to: 0
 16839                           ;tff.c: 800: if (FatFs) FatFs->fs_type = 0;
 16840                           
 16841                           ; BSR set to: 0
 16842  0052AA  51F7               	movf	_FatFs& (0+255),w,b
 16843  0052AC  11F8               	iorwf	(_FatFs+1)& (0+255),w,b
 16844  0052AE  B4D8               	btfsc	status,2,c
 16845  0052B0  D008               	goto	l1272
 16846                           
 16847                           ; BSR set to: 0
 16848  0052B2  EE20 F01C          	lfsr	2,28
 16849  0052B6  51F7               	movf	_FatFs& (0+255),w,b
 16850  0052B8  26D9               	addwf	fsr2l,f,c
 16851  0052BA  51F8               	movf	(_FatFs+1)& (0+255),w,b
 16852  0052BC  22DA               	addwfc	fsr2h,f,c
 16853  0052BE  0E00               	movlw	0
 16854  0052C0  6EDF               	movwf	indf2,c
 16855  0052C2                     l1272:
 16856                           
 16857                           ; BSR set to: 0
 16858                           ;tff.c: 802: FatFs = fs;
 16859                           
 16860                           ; BSR set to: 0
 16861  0052C2  C060  F0F7         	movff	f_mount@fs,_FatFs
 16862  0052C6  C061  F0F8         	movff	f_mount@fs+1,_FatFs+1
 16863                           
 16864                           ; BSR set to: 0
 16865                           ;tff.c: 803: if (fs) fs->fs_type = 0;
 16866  0052CA  5160               	movf	f_mount@fs& (0+255),w,b
 16867  0052CC  1161               	iorwf	(f_mount@fs+1)& (0+255),w,b
 16868  0052CE  B4D8               	btfsc	status,2,c
 16869  0052D0  D008               	goto	l1273
 16870                           
 16871                           ; BSR set to: 0
 16872  0052D2  EE20 F01C          	lfsr	2,28
 16873  0052D6  5160               	movf	f_mount@fs& (0+255),w,b
 16874  0052D8  26D9               	addwf	fsr2l,f,c
 16875  0052DA  5161               	movf	(f_mount@fs+1)& (0+255),w,b
 16876  0052DC  22DA               	addwfc	fsr2h,f,c
 16877  0052DE  0E00               	movlw	0
 16878  0052E0  6EDF               	movwf	indf2,c
 16879  0052E2                     l1273:
 16880                           
 16881                           ; BSR set to: 0
 16882                           ;tff.c: 805: return FR_OK;
 16883                           
 16884                           ; BSR set to: 0
 16885  0052E2  0E00               	movlw	0
 16886  0052E4  0012               	return	
 16887  0052E6                     __end_of_f_mount:
 16888                           	opt stack 0
 16889                           tosu	equ	0xFFF
 16890                           tosh	equ	0xFFE
 16891                           tosl	equ	0xFFD
 16892                           pclath	equ	0xFFA
 16893                           tblptru	equ	0xFF8
 16894                           tblptrh	equ	0xFF7
 16895                           tblptrl	equ	0xFF6
 16896                           tablat	equ	0xFF5
 16897                           prodh	equ	0xFF4
 16898                           prodl	equ	0xFF3
 16899                           intcon	equ	0xFF2
 16900                           intcon2	equ	0xFF1
 16901                           intcon3	equ	0xFF0
 16902                           indf0	equ	0xFEF
 16903                           postinc0	equ	0xFEE
 16904                           fsr0h	equ	0xFEA
 16905                           fsr0l	equ	0xFE9
 16906                           wreg	equ	0xFE8
 16907                           indf1	equ	0xFE7
 16908                           postinc1	equ	0xFE6
 16909                           postdec1	equ	0xFE5
 16910                           plusw1	equ	0xFE3
 16911                           fsr1h	equ	0xFE2
 16912                           fsr1l	equ	0xFE1
 16913                           indf2	equ	0xFDF
 16914                           postinc2	equ	0xFDE
 16915                           postdec2	equ	0xFDD
 16916                           plusw2	equ	0xFDB
 16917                           fsr2h	equ	0xFDA
 16918                           fsr2l	equ	0xFD9
 16919                           status	equ	0xFD8
 16920                           
 16921 ;; *************** function _f_lseek *****************
 16922 ;; Defined at:
 16923 ;;		line 1132 in file "bibliotecas/tff.c"
 16924 ;; Parameters:    Size  Location     Type
 16925 ;;  fp              2  100[BANK0 ] PTR struct _FIL
 16926 ;;		 -> fil(28), 
 16927 ;;  ofs             4  102[BANK0 ] unsigned long 
 16928 ;; Auto vars:     Size  Location     Type
 16929 ;;  csize           4  123[BANK0 ] unsigned long 
 16930 ;;  ifptr           4  119[BANK0 ] unsigned long 
 16931 ;;  clust           2  127[BANK0 ] unsigned short 
 16932 ;;  res             1  118[BANK0 ] enum E155
 16933 ;; Return value:  Size  Location     Type
 16934 ;;                  1    wreg      enum E3978
 16935 ;; Registers used:
 16936 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16937 ;; Tracked objects:
 16938 ;;		On entry : 0/0
 16939 ;;		On exit  : 0/0
 16940 ;;		Unchanged: 0/0
 16941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16942 ;;      Params:         0       6       0       0       0       0       0       0       0
 16943 ;;      Locals:         0      11       0       0       0       0       0       0       0
 16944 ;;      Temps:          0      12       0       0       0       0       0       0       0
 16945 ;;      Totals:         0      29       0       0       0       0       0       0       0
 16946 ;;Total ram usage:       29 bytes
 16947 ;; Hardware stack levels used:    1
 16948 ;; Hardware stack levels required when called:   11
 16949 ;; This function calls:
 16950 ;;		___lldiv
 16951 ;;		_create_chain
 16952 ;;		_get_cluster
 16953 ;;		_validate
 16954 ;; This function is called by:
 16955 ;;		_escrita_sdcard
 16956 ;; This function uses a non-reentrant model
 16957 ;;
 16958                           
 16959                           	psect	text58
 16960  001496                     __ptext58:
 16961                           	opt stack 0
 16962  001496                     _f_lseek:
 16963                           	opt stack 16
 16964                           
 16965                           ;tff.c: 1137: FRESULT res;
 16966                           ;tff.c: 1138: CLUST clust;
 16967                           ;tff.c: 1139: DWORD csize, ifptr;
 16968                           ;tff.c: 1142: res = validate(fp->fs, fp->id);
 16969                           
 16970                           ; BSR set to: 0
 16971                           ;incstack = 0
 16972  001496  0100               	movlb	0	; () banked
 16973  001498  EE20 F004          	lfsr	2,4
 16974  00149C  51C4               	movf	f_lseek@fp& (0+255),w,b
 16975  00149E  26D9               	addwf	fsr2l,f,c
 16976  0014A0  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16977  0014A2  22DA               	addwfc	fsr2h,f,c
 16978  0014A4  CFDE F067          	movff	postinc2,validate@fs
 16979  0014A8  CFDD F068          	movff	postdec2,validate@fs+1
 16980  0014AC  C0C4  FFD9         	movff	f_lseek@fp,fsr2l
 16981  0014B0  C0C5  FFDA         	movff	f_lseek@fp+1,fsr2h
 16982  0014B4  CFDE F069          	movff	postinc2,validate@id
 16983  0014B8  CFDD F06A          	movff	postdec2,validate@id+1
 16984  0014BC  EC73  F029         	call	_validate	;wreg free
 16985  0014C0  0100               	movlb	0	; () banked
 16986  0014C2  6FD6               	movwf	f_lseek@res& (0+255),b
 16987                           
 16988                           ; BSR set to: 0
 16989                           ;tff.c: 1143: if (res != FR_OK) return res;
 16990  0014C4  51D6               	movf	f_lseek@res& (0+255),w,b
 16991  0014C6  A4D8               	btfss	status,2,c
 16992  0014C8  0012               	return	
 16993                           
 16994                           ; BSR set to: 0
 16995                           ;tff.c: 1144: if (fp->flag & 0x80) return FR_RW_ERROR;
 16996                           
 16997                           ; BSR set to: 0
 16998                           
 16999                           ; BSR set to: 0
 17000                           ;	Return value of _f_lseek is never used
 17001  0014CA  EE20 F002          	lfsr	2,2
 17002  0014CE  51C4               	movf	f_lseek@fp& (0+255),w,b
 17003  0014D0  26D9               	addwf	fsr2l,f,c
 17004  0014D2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17005  0014D4  22DA               	addwfc	fsr2h,f,c
 17006  0014D6  BEDF               	btfsc	indf2,7,c
 17007  0014D8  0012               	return	
 17008                           
 17009                           ; BSR set to: 0
 17010                           ;tff.c: 1145: if (ofs > fp->fsize
 17011                           ;tff.c: 1147: && !(fp->flag & 0x02)
 17012                           ;tff.c: 1149: ) ofs = fp->fsize;
 17013                           
 17014                           ; BSR set to: 0
 17015                           
 17016                           ; BSR set to: 0
 17017                           ;	Return value of _f_lseek is never used
 17018  0014DA  EE20 F00A          	lfsr	2,10
 17019  0014DE  51C4               	movf	f_lseek@fp& (0+255),w,b
 17020  0014E0  26D9               	addwf	fsr2l,f,c
 17021  0014E2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17022  0014E4  22DA               	addwfc	fsr2h,f,c
 17023  0014E6  51C6               	movf	f_lseek@ofs& (0+255),w,b
 17024  0014E8  5CDE               	subwf	postinc2,w,c
 17025  0014EA  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 17026  0014EC  58DE               	subwfb	postinc2,w,c
 17027  0014EE  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 17028  0014F0  58DE               	subwfb	postinc2,w,c
 17029  0014F2  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 17030  0014F4  58DE               	subwfb	postinc2,w,c
 17031  0014F6  B0D8               	btfsc	status,0,c
 17032  0014F8  D016               	goto	l1371
 17033                           
 17034                           ; BSR set to: 0
 17035  0014FA  EE20 F002          	lfsr	2,2
 17036  0014FE  51C4               	movf	f_lseek@fp& (0+255),w,b
 17037  001500  26D9               	addwf	fsr2l,f,c
 17038  001502  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17039  001504  22DA               	addwfc	fsr2h,f,c
 17040  001506  B2DF               	btfsc	indf2,1,c
 17041  001508  D00E               	goto	l1371
 17042                           
 17043                           ; BSR set to: 0
 17044  00150A  EE20 F00A          	lfsr	2,10
 17045  00150E  51C4               	movf	f_lseek@fp& (0+255),w,b
 17046  001510  26D9               	addwf	fsr2l,f,c
 17047  001512  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17048  001514  22DA               	addwfc	fsr2h,f,c
 17049  001516  CFDE F0C6          	movff	postinc2,f_lseek@ofs
 17050  00151A  CFDE F0C7          	movff	postinc2,f_lseek@ofs+1
 17051  00151E  CFDE F0C8          	movff	postinc2,f_lseek@ofs+2
 17052  001522  CFDE F0C9          	movff	postinc2,f_lseek@ofs+3
 17053  001526                     l1371:
 17054                           
 17055                           ; BSR set to: 0
 17056                           ;tff.c: 1151: ifptr = fp->fptr;
 17057  001526  EE20 F006          	lfsr	2,6
 17058  00152A  51C4               	movf	f_lseek@fp& (0+255),w,b
 17059  00152C  26D9               	addwf	fsr2l,f,c
 17060  00152E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17061  001530  22DA               	addwfc	fsr2h,f,c
 17062  001532  CFDE F0D7          	movff	postinc2,f_lseek@ifptr
 17063  001536  CFDE F0D8          	movff	postinc2,f_lseek@ifptr+1
 17064  00153A  CFDE F0D9          	movff	postinc2,f_lseek@ifptr+2
 17065  00153E  CFDE F0DA          	movff	postinc2,f_lseek@ifptr+3
 17066                           
 17067                           ;tff.c: 1152: fp->fptr = 0; fp->csect = 255;
 17068  001542  EE20 F006          	lfsr	2,6
 17069  001546  51C4               	movf	f_lseek@fp& (0+255),w,b
 17070  001548  26D9               	addwf	fsr2l,f,c
 17071  00154A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17072  00154C  22DA               	addwfc	fsr2h,f,c
 17073  00154E  6ADE               	clrf	postinc2,c
 17074  001550  6ADE               	clrf	postinc2,c
 17075  001552  6ADE               	clrf	postinc2,c
 17076  001554  6ADD               	clrf	postdec2,c
 17077  001556  EE20 F003          	lfsr	2,3
 17078  00155A  51C4               	movf	f_lseek@fp& (0+255),w,b
 17079  00155C  26D9               	addwf	fsr2l,f,c
 17080  00155E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17081  001560  22DA               	addwfc	fsr2h,f,c
 17082  001562  0EFF               	movlw	255
 17083  001564  6EDF               	movwf	indf2,c
 17084                           
 17085                           ; BSR set to: 0
 17086                           ;tff.c: 1153: if (ofs > 0) {
 17087  001566  51C6               	movf	f_lseek@ofs& (0+255),w,b
 17088  001568  11C7               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 17089  00156A  11C8               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 17090  00156C  11C9               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 17091  00156E  B4D8               	btfsc	status,2,c
 17092  001570  D19B               	goto	l1388
 17093                           
 17094                           ; BSR set to: 0
 17095                           ;tff.c: 1154: csize = (DWORD)fp->fs->csize * 512U;
 17096  001572  EE20 F004          	lfsr	2,4
 17097  001576  51C4               	movf	f_lseek@fp& (0+255),w,b
 17098  001578  26D9               	addwf	fsr2l,f,c
 17099  00157A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17100  00157C  22DA               	addwfc	fsr2h,f,c
 17101  00157E  EE10 F01D          	lfsr	1,29
 17102  001582  50DE               	movf	postinc2,w,c
 17103  001584  26E1               	addwf	fsr1l,f,c
 17104  001586  50DD               	movf	postdec2,w,c
 17105  001588  22E2               	addwfc	fsr1h,f,c
 17106  00158A  50E7               	movf	indf1,w,c
 17107  00158C  6FCA               	movwf	??_f_lseek& (0+255),b
 17108  00158E  C0CA  F0CB         	movff	??_f_lseek,??_f_lseek+1
 17109  001592  6BCC               	clrf	(??_f_lseek+2)& (0+255),b
 17110  001594  6BCD               	clrf	(??_f_lseek+3)& (0+255),b
 17111  001596  6BCE               	clrf	(??_f_lseek+4)& (0+255),b
 17112  001598  0E09               	movlw	9
 17113  00159A                     u15395:
 17114  00159A  90D8               	bcf	status,0,c
 17115  00159C  37CB               	rlcf	(??_f_lseek+1)& (0+255),f,b
 17116  00159E  37CC               	rlcf	(??_f_lseek+2)& (0+255),f,b
 17117  0015A0  37CD               	rlcf	(??_f_lseek+3)& (0+255),f,b
 17118  0015A2  37CE               	rlcf	(??_f_lseek+4)& (0+255),f,b
 17119  0015A4  2EE8               	decfsz	wreg,f,c
 17120  0015A6  D7F9               	goto	u15395
 17121  0015A8  C0CB  F0DB         	movff	??_f_lseek+1,f_lseek@csize
 17122  0015AC  C0CC  F0DC         	movff	??_f_lseek+2,f_lseek@csize+1
 17123  0015B0  C0CD  F0DD         	movff	??_f_lseek+3,f_lseek@csize+2
 17124  0015B4  C0CE  F0DE         	movff	??_f_lseek+4,f_lseek@csize+3
 17125                           
 17126                           ; BSR set to: 0
 17127                           ;tff.c: 1155: if (ifptr > 0 &&
 17128                           ;tff.c: 1156: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 17129  0015B8  51D7               	movf	f_lseek@ifptr& (0+255),w,b
 17130  0015BA  11D8               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 17131  0015BC  11D9               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 17132  0015BE  11DA               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 17133  0015C0  B4D8               	btfsc	status,2,c
 17134  0015C2  D08F               	goto	l1373
 17135                           
 17136                           ; BSR set to: 0
 17137  0015C4  0EFF               	movlw	255
 17138  0015C6  25C6               	addwf	f_lseek@ofs& (0+255),w,b
 17139  0015C8  6F60               	movwf	___lldiv@dividend& (0+255),b
 17140  0015CA  0EFF               	movlw	255
 17141  0015CC  21C7               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 17142  0015CE  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 17143  0015D0  0EFF               	movlw	255
 17144  0015D2  21C8               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 17145  0015D4  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 17146  0015D6  0EFF               	movlw	255
 17147  0015D8  21C9               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 17148  0015DA  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 17149  0015DC  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 17150  0015E0  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 17151  0015E4  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 17152  0015E8  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 17153  0015EC  ECBD  F026         	call	___lldiv	;wreg free
 17154  0015F0  C060  F0CA         	movff	?___lldiv,??_f_lseek
 17155  0015F4  C061  F0CB         	movff	?___lldiv+1,??_f_lseek+1
 17156  0015F8  C062  F0CC         	movff	?___lldiv+2,??_f_lseek+2
 17157  0015FC  C063  F0CD         	movff	?___lldiv+3,??_f_lseek+3
 17158  001600  0EFF               	movlw	255
 17159  001602  0100               	movlb	0	; () banked
 17160  001604  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 17161  001606  6F60               	movwf	___lldiv@dividend& (0+255),b
 17162  001608  0EFF               	movlw	255
 17163  00160A  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 17164  00160C  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 17165  00160E  0EFF               	movlw	255
 17166  001610  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 17167  001612  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 17168  001614  0EFF               	movlw	255
 17169  001616  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 17170  001618  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 17171  00161A  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 17172  00161E  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 17173  001622  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 17174  001626  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 17175  00162A  ECBD  F026         	call	___lldiv	;wreg free
 17176  00162E  0100               	movlb	0	; () banked
 17177  001630  5160               	movf	?___lldiv& (0+255),w,b
 17178  001632  5DCA               	subwf	??_f_lseek& (0+255),w,b
 17179  001634  5161               	movf	(?___lldiv+1)& (0+255),w,b
 17180  001636  59CB               	subwfb	(??_f_lseek+1)& (0+255),w,b
 17181  001638  5162               	movf	(?___lldiv+2)& (0+255),w,b
 17182  00163A  59CC               	subwfb	(??_f_lseek+2)& (0+255),w,b
 17183  00163C  5163               	movf	(?___lldiv+3)& (0+255),w,b
 17184  00163E  59CD               	subwfb	(??_f_lseek+3)& (0+255),w,b
 17185  001640  A0D8               	btfss	status,0,c
 17186  001642  D04F               	goto	l1373
 17187                           
 17188                           ; BSR set to: 0
 17189                           ;tff.c: 1157: fp->fptr = (ifptr - 1) & ~(csize - 1);
 17190  001644  0EFF               	movlw	255
 17191  001646  25DB               	addwf	f_lseek@csize& (0+255),w,b
 17192  001648  6FCA               	movwf	??_f_lseek& (0+255),b
 17193  00164A  0EFF               	movlw	255
 17194  00164C  21DC               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 17195  00164E  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 17196  001650  0EFF               	movlw	255
 17197  001652  21DD               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 17198  001654  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 17199  001656  0EFF               	movlw	255
 17200  001658  21DE               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 17201  00165A  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 17202  00165C  1FCA               	comf	??_f_lseek& (0+255),f,b
 17203  00165E  1FCB               	comf	(??_f_lseek+1)& (0+255),f,b
 17204  001660  1FCC               	comf	(??_f_lseek+2)& (0+255),f,b
 17205  001662  1FCD               	comf	(??_f_lseek+3)& (0+255),f,b
 17206  001664  0EFF               	movlw	255
 17207  001666  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 17208  001668  6FCE               	movwf	(??_f_lseek+4)& (0+255),b
 17209  00166A  0EFF               	movlw	255
 17210  00166C  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 17211  00166E  6FCF               	movwf	(??_f_lseek+5)& (0+255),b
 17212  001670  0EFF               	movlw	255
 17213  001672  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 17214  001674  6FD0               	movwf	(??_f_lseek+6)& (0+255),b
 17215  001676  0EFF               	movlw	255
 17216  001678  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 17217  00167A  6FD1               	movwf	(??_f_lseek+7)& (0+255),b
 17218  00167C  51CA               	movf	??_f_lseek& (0+255),w,b
 17219  00167E  15CE               	andwf	(??_f_lseek+4)& (0+255),w,b
 17220  001680  6FD2               	movwf	(??_f_lseek+8)& (0+255),b
 17221  001682  51CB               	movf	(??_f_lseek+1)& (0+255),w,b
 17222  001684  15CF               	andwf	(??_f_lseek+5)& (0+255),w,b
 17223  001686  6FD3               	movwf	(??_f_lseek+9)& (0+255),b
 17224  001688  51CC               	movf	(??_f_lseek+2)& (0+255),w,b
 17225  00168A  15D0               	andwf	(??_f_lseek+6)& (0+255),w,b
 17226  00168C  6FD4               	movwf	(??_f_lseek+10)& (0+255),b
 17227  00168E  51CD               	movf	(??_f_lseek+3)& (0+255),w,b
 17228  001690  15D1               	andwf	(??_f_lseek+7)& (0+255),w,b
 17229  001692  6FD5               	movwf	(??_f_lseek+11)& (0+255),b
 17230  001694  EE20 F006          	lfsr	2,6
 17231  001698  51C4               	movf	f_lseek@fp& (0+255),w,b
 17232  00169A  26D9               	addwf	fsr2l,f,c
 17233  00169C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17234  00169E  22DA               	addwfc	fsr2h,f,c
 17235  0016A0  C0D2  FFDE         	movff	??_f_lseek+8,postinc2
 17236  0016A4  C0D3  FFDE         	movff	??_f_lseek+9,postinc2
 17237  0016A8  C0D4  FFDE         	movff	??_f_lseek+10,postinc2
 17238  0016AC  C0D5  FFDE         	movff	??_f_lseek+11,postinc2
 17239                           
 17240                           ;tff.c: 1158: ofs -= fp->fptr;
 17241  0016B0  EE20 F006          	lfsr	2,6
 17242  0016B4  51C4               	movf	f_lseek@fp& (0+255),w,b
 17243  0016B6  26D9               	addwf	fsr2l,f,c
 17244  0016B8  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17245  0016BA  22DA               	addwfc	fsr2h,f,c
 17246  0016BC  50DE               	movf	postinc2,w,c
 17247  0016BE  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 17248  0016C0  50DE               	movf	postinc2,w,c
 17249  0016C2  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 17250  0016C4  50DE               	movf	postinc2,w,c
 17251  0016C6  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 17252  0016C8  50DD               	movf	postdec2,w,c
 17253  0016CA  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 17254                           
 17255                           ;tff.c: 1159: clust = fp->curr_clust;
 17256  0016CC  EE20 F010          	lfsr	2,16
 17257  0016D0  51C4               	movf	f_lseek@fp& (0+255),w,b
 17258  0016D2  26D9               	addwf	fsr2l,f,c
 17259  0016D4  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17260  0016D6  22DA               	addwfc	fsr2h,f,c
 17261  0016D8  CFDE F0DF          	movff	postinc2,f_lseek@clust
 17262  0016DC  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 17263                           
 17264                           ;tff.c: 1160: } else {
 17265  0016E0  D031               	goto	l1374
 17266  0016E2                     l1373:
 17267                           
 17268                           ; BSR set to: 0
 17269                           ;tff.c: 1161: clust = fp->org_clust;
 17270                           
 17271                           ; BSR set to: 0
 17272  0016E2  EE20 F00E          	lfsr	2,14
 17273  0016E6  51C4               	movf	f_lseek@fp& (0+255),w,b
 17274  0016E8  26D9               	addwf	fsr2l,f,c
 17275  0016EA  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17276  0016EC  22DA               	addwfc	fsr2h,f,c
 17277  0016EE  CFDE F0DF          	movff	postinc2,f_lseek@clust
 17278  0016F2  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 17279                           
 17280                           ; BSR set to: 0
 17281                           ;tff.c: 1163: if (clust == 0) {
 17282  0016F6  51DF               	movf	f_lseek@clust& (0+255),w,b
 17283  0016F8  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 17284  0016FA  A4D8               	btfss	status,2,c
 17285  0016FC  D019               	goto	l1375
 17286                           
 17287                           ; BSR set to: 0
 17288                           ;tff.c: 1164: clust = create_chain(0);
 17289  0016FE  0E00               	movlw	0
 17290  001700  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
 17291  001702  0E00               	movlw	0
 17292  001704  6FB6               	movwf	create_chain@clust& (0+255),b
 17293  001706  EC58  F01A         	call	_create_chain	;wreg free
 17294  00170A  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 17295  00170E  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 17296                           
 17297                           ;tff.c: 1165: if (clust == 1) goto fk_error;
 17298  001712  0100               	movlb	0	; () banked
 17299  001714  05DF               	decf	f_lseek@clust& (0+255),w,b
 17300  001716  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 17301  001718  B4D8               	btfsc	status,2,c
 17302  00171A  D0F9               	goto	l1377
 17303                           
 17304                           ; BSR set to: 0
 17305                           ;tff.c: 1166: fp->org_clust = clust;
 17306                           
 17307                           ; BSR set to: 0
 17308                           
 17309                           ; BSR set to: 0
 17310  00171C  EE20 F00E          	lfsr	2,14
 17311  001720  51C4               	movf	f_lseek@fp& (0+255),w,b
 17312  001722  26D9               	addwf	fsr2l,f,c
 17313  001724  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17314  001726  22DA               	addwfc	fsr2h,f,c
 17315  001728  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 17316  00172C  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 17317  001730                     l1375:
 17318                           
 17319                           ; BSR set to: 0
 17320                           ;tff.c: 1167: }
 17321                           ;tff.c: 1169: fp->curr_clust = clust;
 17322  001730  EE20 F010          	lfsr	2,16
 17323  001734  51C4               	movf	f_lseek@fp& (0+255),w,b
 17324  001736  26D9               	addwf	fsr2l,f,c
 17325  001738  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17326  00173A  22DA               	addwfc	fsr2h,f,c
 17327  00173C  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 17328  001740  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 17329  001744                     l1374:
 17330                           
 17331                           ; BSR set to: 0
 17332                           ;tff.c: 1170: }
 17333                           ;tff.c: 1171: if (clust != 0) {
 17334                           
 17335                           ; BSR set to: 0
 17336  001744  51DF               	movf	f_lseek@clust& (0+255),w,b
 17337  001746  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 17338  001748  A4D8               	btfss	status,2,c
 17339  00174A  D064               	goto	l1379
 17340  00174C  D0AD               	goto	l1388
 17341  00174E                     
 17342                           ; BSR set to: 0
 17343                           ;tff.c: 1174: if (fp->flag & 0x02) {
 17344                           
 17345                           ; BSR set to: 0
 17346  00174E  EE20 F002          	lfsr	2,2
 17347  001752  51C4               	movf	f_lseek@fp& (0+255),w,b
 17348  001754  26D9               	addwf	fsr2l,f,c
 17349  001756  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17350  001758  22DA               	addwfc	fsr2h,f,c
 17351  00175A  A2DF               	btfss	indf2,1,c
 17352  00175C  D018               	goto	l1381
 17353                           
 17354                           ; BSR set to: 0
 17355                           ;tff.c: 1175: clust = create_chain(clust);
 17356  00175E  C0DF  F0B6         	movff	f_lseek@clust,create_chain@clust
 17357  001762  C0E0  F0B7         	movff	f_lseek@clust+1,create_chain@clust+1
 17358  001766  EC58  F01A         	call	_create_chain	;wreg free
 17359  00176A  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 17360  00176E  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 17361                           
 17362                           ;tff.c: 1176: if (clust == 0) {
 17363  001772  0100               	movlb	0	; () banked
 17364  001774  51DF               	movf	f_lseek@clust& (0+255),w,b
 17365  001776  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 17366  001778  A4D8               	btfss	status,2,c
 17367  00177A  D013               	goto	l1384
 17368                           
 17369                           ; BSR set to: 0
 17370                           ;tff.c: 1177: ofs = csize; break;
 17371  00177C  C0DB  F0C6         	movff	f_lseek@csize,f_lseek@ofs
 17372  001780  C0DC  F0C7         	movff	f_lseek@csize+1,f_lseek@ofs+1
 17373  001784  C0DD  F0C8         	movff	f_lseek@csize+2,f_lseek@ofs+2
 17374  001788  C0DE  F0C9         	movff	f_lseek@csize+3,f_lseek@ofs+3
 17375  00178C  D04D               	goto	u15490
 17376  00178E                     l1381:
 17377                           
 17378                           ; BSR set to: 0
 17379                           ;tff.c: 1181: clust = get_cluster(clust);
 17380                           
 17381                           ; BSR set to: 0
 17382  00178E  C0DF  F0A0         	movff	f_lseek@clust,get_cluster@clust
 17383  001792  C0E0  F0A1         	movff	f_lseek@clust+1,get_cluster@clust+1
 17384  001796  EC62  F018         	call	_get_cluster	;wreg free
 17385  00179A  C0A0  F0DF         	movff	?_get_cluster,f_lseek@clust
 17386  00179E  C0A1  F0E0         	movff	?_get_cluster+1,f_lseek@clust+1
 17387  0017A2                     l1384:
 17388                           
 17389                           ;tff.c: 1182: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 17390  0017A2  0100               	movlb	0	; () banked
 17391  0017A4  51E0               	movf	(f_lseek@clust+1)& (0+255),w,b
 17392  0017A6  E104               	bnz	u15470
 17393  0017A8  0E02               	movlw	2
 17394  0017AA  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 17395  0017AC  A0D8               	btfss	status,0,c
 17396  0017AE  D0AF               	goto	l1377
 17397  0017B0                     u15470:
 17398                           
 17399                           ; BSR set to: 0
 17400  0017B0  EE20 F004          	lfsr	2,4
 17401  0017B4  51C4               	movf	f_lseek@fp& (0+255),w,b
 17402  0017B6  26D9               	addwf	fsr2l,f,c
 17403  0017B8  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17404  0017BA  22DA               	addwfc	fsr2h,f,c
 17405  0017BC  EE10 F016          	lfsr	1,22
 17406  0017C0  50DE               	movf	postinc2,w,c
 17407  0017C2  26E1               	addwf	fsr1l,f,c
 17408  0017C4  50DD               	movf	postdec2,w,c
 17409  0017C6  22E2               	addwfc	fsr1h,f,c
 17410  0017C8  50E6               	movf	postinc1,w,c
 17411  0017CA  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 17412  0017CC  50E6               	movf	postinc1,w,c
 17413  0017CE  59E0               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 17414  0017D0  B0D8               	btfsc	status,0,c
 17415  0017D2  D09D               	goto	l1377
 17416                           
 17417                           ; BSR set to: 0
 17418                           ;tff.c: 1183: fp->curr_clust = clust;
 17419                           
 17420                           ; BSR set to: 0
 17421                           
 17422                           ; BSR set to: 0
 17423  0017D4  EE20 F010          	lfsr	2,16
 17424  0017D8  51C4               	movf	f_lseek@fp& (0+255),w,b
 17425  0017DA  26D9               	addwf	fsr2l,f,c
 17426  0017DC  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17427  0017DE  22DA               	addwfc	fsr2h,f,c
 17428  0017E0  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 17429  0017E4  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 17430                           
 17431                           ;tff.c: 1184: fp->fptr += csize;
 17432  0017E8  EE20 F006          	lfsr	2,6
 17433  0017EC  51C4               	movf	f_lseek@fp& (0+255),w,b
 17434  0017EE  26D9               	addwf	fsr2l,f,c
 17435  0017F0  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17436  0017F2  22DA               	addwfc	fsr2h,f,c
 17437  0017F4  51DB               	movf	f_lseek@csize& (0+255),w,b
 17438  0017F6  26DE               	addwf	postinc2,f,c
 17439  0017F8  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 17440  0017FA  22DE               	addwfc	postinc2,f,c
 17441  0017FC  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 17442  0017FE  22DE               	addwfc	postinc2,f,c
 17443  001800  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 17444  001802  22DE               	addwfc	postinc2,f,c
 17445                           
 17446                           ; BSR set to: 0
 17447                           ;tff.c: 1185: ofs -= csize;
 17448  001804  51DB               	movf	f_lseek@csize& (0+255),w,b
 17449  001806  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 17450  001808  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 17451  00180A  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 17452  00180C  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 17453  00180E  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 17454  001810  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 17455  001812  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 17456  001814                     l1379:
 17457                           
 17458                           ; BSR set to: 0
 17459                           
 17460                           ; BSR set to: 0
 17461  001814  51C6               	movf	f_lseek@ofs& (0+255),w,b
 17462  001816  5DDB               	subwf	f_lseek@csize& (0+255),w,b
 17463  001818  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 17464  00181A  59DC               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 17465  00181C  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 17466  00181E  59DD               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 17467  001820  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 17468  001822  59DE               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 17469  001824  A0D8               	btfss	status,0,c
 17470  001826  D793               	goto	l1380
 17471  001828                     u15490:
 17472                           
 17473                           ; BSR set to: 0
 17474                           ;tff.c: 1186: }
 17475                           ;tff.c: 1187: fp->fptr += ofs;
 17476                           
 17477                           ; BSR set to: 0
 17478  001828  EE20 F006          	lfsr	2,6
 17479  00182C  51C4               	movf	f_lseek@fp& (0+255),w,b
 17480  00182E  26D9               	addwf	fsr2l,f,c
 17481  001830  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17482  001832  22DA               	addwfc	fsr2h,f,c
 17483  001834  51C6               	movf	f_lseek@ofs& (0+255),w,b
 17484  001836  26DE               	addwf	postinc2,f,c
 17485  001838  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 17486  00183A  22DE               	addwfc	postinc2,f,c
 17487  00183C  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 17488  00183E  22DE               	addwfc	postinc2,f,c
 17489  001840  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 17490  001842  22DE               	addwfc	postinc2,f,c
 17491                           
 17492                           ;tff.c: 1188: fp->csect = (BYTE)(ofs / 512U);
 17493  001844  EE20 F003          	lfsr	2,3
 17494  001848  51C4               	movf	f_lseek@fp& (0+255),w,b
 17495  00184A  26D9               	addwf	fsr2l,f,c
 17496  00184C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17497  00184E  22DA               	addwfc	fsr2h,f,c
 17498  001850  C0C6  F0CA         	movff	f_lseek@ofs,??_f_lseek
 17499  001854  C0C7  F0CB         	movff	f_lseek@ofs+1,??_f_lseek+1
 17500  001858  C0C8  F0CC         	movff	f_lseek@ofs+2,??_f_lseek+2
 17501  00185C  C0C9  F0CD         	movff	f_lseek@ofs+3,??_f_lseek+3
 17502  001860  0E0A               	movlw	10
 17503  001862  D005               	goto	u15500
 17504  001864                     u15505:
 17505  001864  90D8               	bcf	status,0,c
 17506  001866  33CD               	rrcf	(??_f_lseek+3)& (0+255),f,b
 17507  001868  33CC               	rrcf	(??_f_lseek+2)& (0+255),f,b
 17508  00186A  33CB               	rrcf	(??_f_lseek+1)& (0+255),f,b
 17509  00186C  33CA               	rrcf	??_f_lseek& (0+255),f,b
 17510  00186E                     u15500:
 17511  00186E  2EE8               	decfsz	wreg,f,c
 17512  001870  D7F9               	goto	u15505
 17513  001872  51CA               	movf	??_f_lseek& (0+255),w,b
 17514  001874  6EDF               	movwf	indf2,c
 17515                           
 17516                           ; BSR set to: 0
 17517                           ;tff.c: 1189: if (ofs % 512U) fp->csect++;
 17518  001876  0EFF               	movlw	255
 17519  001878  15C6               	andwf	f_lseek@ofs& (0+255),w,b
 17520  00187A  6FCA               	movwf	??_f_lseek& (0+255),b
 17521  00187C  0E01               	movlw	1
 17522  00187E  15C7               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 17523  001880  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 17524  001882  0E00               	movlw	0
 17525  001884  15C8               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 17526  001886  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 17527  001888  0E00               	movlw	0
 17528  00188A  15C9               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 17529  00188C  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 17530  00188E  51CA               	movf	??_f_lseek& (0+255),w,b
 17531  001890  11CB               	iorwf	(??_f_lseek+1)& (0+255),w,b
 17532  001892  11CC               	iorwf	(??_f_lseek+2)& (0+255),w,b
 17533  001894  11CD               	iorwf	(??_f_lseek+3)& (0+255),w,b
 17534  001896  B4D8               	btfsc	status,2,c
 17535  001898  D007               	goto	l1388
 17536                           
 17537                           ; BSR set to: 0
 17538  00189A  EE20 F003          	lfsr	2,3
 17539  00189E  51C4               	movf	f_lseek@fp& (0+255),w,b
 17540  0018A0  26D9               	addwf	fsr2l,f,c
 17541  0018A2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17542  0018A4  22DA               	addwfc	fsr2h,f,c
 17543  0018A6  2ADF               	incf	indf2,f,c
 17544  0018A8                     l1388:
 17545                           
 17546                           ; BSR set to: 0
 17547                           ;tff.c: 1190: }
 17548                           ;tff.c: 1191: }
 17549                           ;tff.c: 1194: if (fp->fptr > fp->fsize) {
 17550                           
 17551                           ; BSR set to: 0
 17552                           
 17553                           ; BSR set to: 0
 17554                           
 17555                           ; BSR set to: 0
 17556  0018A8  EE20 F006          	lfsr	2,6
 17557  0018AC  51C4               	movf	f_lseek@fp& (0+255),w,b
 17558  0018AE  26D9               	addwf	fsr2l,f,c
 17559  0018B0  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17560  0018B2  22DA               	addwfc	fsr2h,f,c
 17561  0018B4  EE10 F00A          	lfsr	1,10
 17562  0018B8  51C4               	movf	f_lseek@fp& (0+255),w,b
 17563  0018BA  26E1               	addwf	fsr1l,f,c
 17564  0018BC  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17565  0018BE  22E2               	addwfc	fsr1h,f,c
 17566  0018C0  50DE               	movf	postinc2,w,c
 17567  0018C2  5CE6               	subwf	postinc1,w,c
 17568  0018C4  50DE               	movf	postinc2,w,c
 17569  0018C6  58E6               	subwfb	postinc1,w,c
 17570  0018C8  50DE               	movf	postinc2,w,c
 17571  0018CA  58E6               	subwfb	postinc1,w,c
 17572  0018CC  50DE               	movf	postinc2,w,c
 17573  0018CE  58E6               	subwfb	postinc1,w,c
 17574  0018D0  B0D8               	btfsc	status,0,c
 17575  0018D2  0012               	return	
 17576                           
 17577                           ; BSR set to: 0
 17578                           ;tff.c: 1195: fp->fsize = fp->fptr;
 17579  0018D4  EE20 F006          	lfsr	2,6
 17580  0018D8  51C4               	movf	f_lseek@fp& (0+255),w,b
 17581  0018DA  26D9               	addwf	fsr2l,f,c
 17582  0018DC  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17583  0018DE  22DA               	addwfc	fsr2h,f,c
 17584  0018E0  EE10 F00A          	lfsr	1,10
 17585  0018E4  51C4               	movf	f_lseek@fp& (0+255),w,b
 17586  0018E6  26E1               	addwf	fsr1l,f,c
 17587  0018E8  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17588  0018EA  22E2               	addwfc	fsr1h,f,c
 17589  0018EC  CFDE FFE6          	movff	postinc2,postinc1
 17590  0018F0  CFDE FFE6          	movff	postinc2,postinc1
 17591  0018F4  CFDE FFE6          	movff	postinc2,postinc1
 17592  0018F8  CFDE FFE6          	movff	postinc2,postinc1
 17593                           
 17594                           ; BSR set to: 0
 17595                           ;tff.c: 1196: fp->flag |= 0x20;
 17596  0018FC  EE20 F002          	lfsr	2,2
 17597  001900  51C4               	movf	f_lseek@fp& (0+255),w,b
 17598  001902  26D9               	addwf	fsr2l,f,c
 17599  001904  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17600  001906  22DA               	addwfc	fsr2h,f,c
 17601  001908  0E00               	movlw	0
 17602  00190A  8ADB               	bsf	plusw2,5,c
 17603                           
 17604                           ; BSR set to: 0
 17605                           ;tff.c: 1197: }
 17606                           ;tff.c: 1200: return FR_OK;
 17607                           ;	Return value of _f_lseek is never used
 17608                           
 17609                           ; BSR set to: 0
 17610  00190C  0012               	return	
 17611  00190E                     l1377:
 17612                           
 17613                           ; BSR set to: 0
 17614                           ;tff.c: 1203: fp->flag |= 0x80;
 17615                           
 17616                           ; BSR set to: 0
 17617  00190E  EE20 F002          	lfsr	2,2
 17618  001912  51C4               	movf	f_lseek@fp& (0+255),w,b
 17619  001914  26D9               	addwf	fsr2l,f,c
 17620  001916  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17621  001918  22DA               	addwfc	fsr2h,f,c
 17622  00191A  0E00               	movlw	0
 17623  00191C  8EDB               	bsf	plusw2,7,c
 17624  00191E  0012               	return	
 17625  001920                     __end_of_f_lseek:
 17626                           	opt stack 0
 17627                           tosu	equ	0xFFF
 17628                           tosh	equ	0xFFE
 17629                           tosl	equ	0xFFD
 17630                           pclath	equ	0xFFA
 17631                           tblptru	equ	0xFF8
 17632                           tblptrh	equ	0xFF7
 17633                           tblptrl	equ	0xFF6
 17634                           tablat	equ	0xFF5
 17635                           prodh	equ	0xFF4
 17636                           prodl	equ	0xFF3
 17637                           intcon	equ	0xFF2
 17638                           intcon2	equ	0xFF1
 17639                           intcon3	equ	0xFF0
 17640                           indf0	equ	0xFEF
 17641                           postinc0	equ	0xFEE
 17642                           fsr0h	equ	0xFEA
 17643                           fsr0l	equ	0xFE9
 17644                           wreg	equ	0xFE8
 17645                           indf1	equ	0xFE7
 17646                           postinc1	equ	0xFE6
 17647                           postdec1	equ	0xFE5
 17648                           plusw1	equ	0xFE3
 17649                           fsr1h	equ	0xFE2
 17650                           fsr1l	equ	0xFE1
 17651                           indf2	equ	0xFDF
 17652                           postinc2	equ	0xFDE
 17653                           postdec2	equ	0xFDD
 17654                           plusw2	equ	0xFDB
 17655                           fsr2h	equ	0xFDA
 17656                           fsr2l	equ	0xFD9
 17657                           status	equ	0xFD8
 17658                           
 17659 ;; *************** function _create_chain *****************
 17660 ;; Defined at:
 17661 ;;		line 282 in file "bibliotecas/tff.c"
 17662 ;; Parameters:    Size  Location     Type
 17663 ;;  clust           2   86[BANK0 ] unsigned short 
 17664 ;; Auto vars:     Size  Location     Type
 17665 ;;  ncl             2   98[BANK0 ] unsigned short 
 17666 ;;  scl             2   96[BANK0 ] unsigned short 
 17667 ;;  cstat           2   94[BANK0 ] unsigned short 
 17668 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 17669 ;;		 -> NULL(0), fs(544), 
 17670 ;;  mcl             2   90[BANK0 ] unsigned short 
 17671 ;; Return value:  Size  Location     Type
 17672 ;;                  2   86[BANK0 ] unsigned short 
 17673 ;; Registers used:
 17674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17675 ;; Tracked objects:
 17676 ;;		On entry : 0/0
 17677 ;;		On exit  : 0/0
 17678 ;;		Unchanged: 0/0
 17679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17680 ;;      Params:         0       2       0       0       0       0       0       0       0
 17681 ;;      Locals:         0      10       0       0       0       0       0       0       0
 17682 ;;      Temps:          0       2       0       0       0       0       0       0       0
 17683 ;;      Totals:         0      14       0       0       0       0       0       0       0
 17684 ;;Total ram usage:       14 bytes
 17685 ;; Hardware stack levels used:    1
 17686 ;; Hardware stack levels required when called:   10
 17687 ;; This function calls:
 17688 ;;		_get_cluster
 17689 ;;		_put_cluster
 17690 ;; This function is called by:
 17691 ;;		_reserve_direntry
 17692 ;;		_f_write
 17693 ;;		_f_lseek
 17694 ;; This function uses a non-reentrant model
 17695 ;;
 17696                           
 17697                           	psect	text59
 17698  0034B0                     __ptext59:
 17699                           	opt stack 0
 17700  0034B0                     _create_chain:
 17701                           	opt stack 13
 17702                           
 17703                           ;tff.c: 286: CLUST cstat, ncl, scl, mcl;
 17704                           ;tff.c: 287: FATFS *fs = FatFs;
 17705                           
 17706                           ; BSR set to: 0
 17707                           ;incstack = 0
 17708  0034B0  C0F7  F0BC         	movff	_FatFs,create_chain@fs
 17709  0034B4  C0F8  F0BD         	movff	_FatFs+1,create_chain@fs+1
 17710                           
 17711                           ;tff.c: 290: mcl = fs->max_clust;
 17712  0034B8  0100               	movlb	0	; () banked
 17713  0034BA  EE20 F016          	lfsr	2,22
 17714  0034BE  51BC               	movf	create_chain@fs& (0+255),w,b
 17715  0034C0  26D9               	addwf	fsr2l,f,c
 17716  0034C2  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 17717  0034C4  22DA               	addwfc	fsr2h,f,c
 17718  0034C6  CFDE F0BA          	movff	postinc2,create_chain@mcl
 17719  0034CA  CFDD F0BB          	movff	postdec2,create_chain@mcl+1
 17720                           
 17721                           ; BSR set to: 0
 17722                           ;tff.c: 291: if (clust == 0) {
 17723  0034CE  51B6               	movf	create_chain@clust& (0+255),w,b
 17724  0034D0  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 17725  0034D2  A4D8               	btfss	status,2,c
 17726  0034D4  D01B               	goto	l1092
 17727                           
 17728                           ; BSR set to: 0
 17729                           ;tff.c: 292: scl = fs->last_clust;
 17730  0034D6  EE20 F018          	lfsr	2,24
 17731  0034DA  51BC               	movf	create_chain@fs& (0+255),w,b
 17732  0034DC  26D9               	addwf	fsr2l,f,c
 17733  0034DE  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 17734  0034E0  22DA               	addwfc	fsr2h,f,c
 17735  0034E2  CFDE F0C0          	movff	postinc2,create_chain@scl
 17736  0034E6  CFDD F0C1          	movff	postdec2,create_chain@scl+1
 17737                           
 17738                           ; BSR set to: 0
 17739                           ;tff.c: 293: if (scl < 2 || scl >= mcl) scl = 1;
 17740  0034EA  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 17741  0034EC  E104               	bnz	u13070
 17742  0034EE  0E02               	movlw	2
 17743  0034F0  5DC0               	subwf	create_chain@scl& (0+255),w,b
 17744  0034F2  A0D8               	btfss	status,0,c
 17745  0034F4  D006               	goto	u13080
 17746  0034F6                     u13070:
 17747                           
 17748                           ; BSR set to: 0
 17749  0034F6  51BA               	movf	create_chain@mcl& (0+255),w,b
 17750  0034F8  5DC0               	subwf	create_chain@scl& (0+255),w,b
 17751  0034FA  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 17752  0034FC  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 17753  0034FE  A0D8               	btfss	status,0,c
 17754  003500  D02A               	goto	l1096
 17755  003502                     u13080:
 17756                           
 17757                           ; BSR set to: 0
 17758                           
 17759                           ; BSR set to: 0
 17760  003502  0E00               	movlw	0
 17761  003504  6FC1               	movwf	(create_chain@scl+1)& (0+255),b
 17762  003506  0E01               	movlw	1
 17763  003508  6FC0               	movwf	create_chain@scl& (0+255),b
 17764                           
 17765                           ; BSR set to: 0
 17766                           ;tff.c: 294: }
 17767  00350A  D025               	goto	l1096
 17768  00350C                     l1092:
 17769                           
 17770                           ; BSR set to: 0
 17771                           ;tff.c: 295: else {
 17772                           ;tff.c: 296: cstat = get_cluster(clust);
 17773                           
 17774                           ; BSR set to: 0
 17775  00350C  C0B6  F0A0         	movff	create_chain@clust,get_cluster@clust
 17776  003510  C0B7  F0A1         	movff	create_chain@clust+1,get_cluster@clust+1
 17777  003514  EC62  F018         	call	_get_cluster	;wreg free
 17778  003518  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 17779  00351C  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 17780                           
 17781                           ;tff.c: 297: if (cstat < 2) return 1;
 17782  003520  0100               	movlb	0	; () banked
 17783  003522  51BF               	movf	(create_chain@cstat+1)& (0+255),w,b
 17784  003524  E109               	bnz	l10190
 17785  003526  0E02               	movlw	2
 17786  003528  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 17787  00352A  B0D8               	btfsc	status,0,c
 17788  00352C  D005               	goto	l1097
 17789                           
 17790                           ; BSR set to: 0
 17791  00352E  0E00               	movlw	0
 17792  003530  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17793  003532  0E01               	movlw	1
 17794  003534  6FB6               	movwf	?_create_chain& (0+255),b
 17795                           
 17796                           ; BSR set to: 0
 17797  003536  0012               	return	
 17798  003538                     l1097:
 17799  003538                     l10190:
 17800                           
 17801                           ; BSR set to: 0
 17802                           ;tff.c: 298: if (cstat < mcl) return cstat;
 17803  003538  51BA               	movf	create_chain@mcl& (0+255),w,b
 17804  00353A  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 17805  00353C  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 17806  00353E  59BF               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 17807  003540  B0D8               	btfsc	status,0,c
 17808  003542  D005               	goto	l1099
 17809                           
 17810                           ; BSR set to: 0
 17811  003544  C0BE  F0B6         	movff	create_chain@cstat,?_create_chain
 17812  003548  C0BF  F0B7         	movff	create_chain@cstat+1,?_create_chain+1
 17813  00354C  0012               	return	
 17814  00354E                     l1099:
 17815                           
 17816                           ; BSR set to: 0
 17817                           ;tff.c: 299: scl = clust;
 17818  00354E  C0B6  F0C0         	movff	create_chain@clust,create_chain@scl
 17819  003552  C0B7  F0C1         	movff	create_chain@clust+1,create_chain@scl+1
 17820  003556                     l1096:
 17821                           
 17822                           ; BSR set to: 0
 17823                           ;tff.c: 300: }
 17824                           ;tff.c: 302: ncl = scl;
 17825  003556  C0C0  F0C2         	movff	create_chain@scl,create_chain@ncl
 17826  00355A  C0C1  F0C3         	movff	create_chain@scl+1,create_chain@ncl+1
 17827  00355E                     l10194:
 17828                           
 17829                           ; BSR set to: 0
 17830                           ;tff.c: 304: ncl++;
 17831  00355E  4BC2               	infsnz	create_chain@ncl& (0+255),f,b
 17832  003560  2BC3               	incf	(create_chain@ncl+1)& (0+255),f,b
 17833                           
 17834                           ; BSR set to: 0
 17835                           ;tff.c: 305: if (ncl >= mcl) {
 17836  003562  51BA               	movf	create_chain@mcl& (0+255),w,b
 17837  003564  5DC2               	subwf	create_chain@ncl& (0+255),w,b
 17838  003566  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 17839  003568  59C3               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 17840  00356A  A0D8               	btfss	status,0,c
 17841  00356C  D00F               	goto	l1102
 17842                           
 17843                           ; BSR set to: 0
 17844                           ;tff.c: 306: ncl = 2;
 17845  00356E  0E00               	movlw	0
 17846  003570  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 17847  003572  0E02               	movlw	2
 17848  003574  6FC2               	movwf	create_chain@ncl& (0+255),b
 17849                           
 17850                           ; BSR set to: 0
 17851                           ;tff.c: 307: if (ncl > scl) return 0;
 17852  003576  51C2               	movf	create_chain@ncl& (0+255),w,b
 17853  003578  5DC0               	subwf	create_chain@scl& (0+255),w,b
 17854  00357A  51C3               	movf	(create_chain@ncl+1)& (0+255),w,b
 17855  00357C  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 17856  00357E  B0D8               	btfsc	status,0,c
 17857  003580  D005               	goto	l1102
 17858                           
 17859                           ; BSR set to: 0
 17860  003582  0E00               	movlw	0
 17861  003584  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17862  003586  0E00               	movlw	0
 17863  003588  6FB6               	movwf	?_create_chain& (0+255),b
 17864                           
 17865                           ; BSR set to: 0
 17866  00358A  0012               	return	
 17867  00358C                     l1102:
 17868                           
 17869                           ; BSR set to: 0
 17870                           ;tff.c: 308: }
 17871                           ;tff.c: 309: cstat = get_cluster(ncl);
 17872                           
 17873                           ; BSR set to: 0
 17874                           
 17875                           ; BSR set to: 0
 17876  00358C  C0C2  F0A0         	movff	create_chain@ncl,get_cluster@clust
 17877  003590  C0C3  F0A1         	movff	create_chain@ncl+1,get_cluster@clust+1
 17878  003594  EC62  F018         	call	_get_cluster	;wreg free
 17879  003598  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 17880  00359C  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 17881                           
 17882                           ;tff.c: 310: if (cstat == 0) break;
 17883  0035A0  0100               	movlb	0	; () banked
 17884  0035A2  51BE               	movf	create_chain@cstat& (0+255),w,b
 17885  0035A4  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 17886  0035A6  B4D8               	btfsc	status,2,c
 17887  0035A8  D015               	goto	l1104
 17888                           
 17889                           ; BSR set to: 0
 17890                           ;tff.c: 311: if (cstat == 1) return 1;
 17891                           
 17892                           ; BSR set to: 0
 17893                           
 17894                           ; BSR set to: 0
 17895  0035AA  05BE               	decf	create_chain@cstat& (0+255),w,b
 17896  0035AC  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 17897  0035AE  A4D8               	btfss	status,2,c
 17898  0035B0  D005               	goto	l1105
 17899                           
 17900                           ; BSR set to: 0
 17901  0035B2  0E00               	movlw	0
 17902  0035B4  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17903  0035B6  0E01               	movlw	1
 17904  0035B8  6FB6               	movwf	?_create_chain& (0+255),b
 17905                           
 17906                           ; BSR set to: 0
 17907  0035BA  0012               	return	
 17908  0035BC                     l1105:
 17909                           
 17910                           ; BSR set to: 0
 17911                           ;tff.c: 312: if (ncl == scl) return 0;
 17912                           
 17913                           ; BSR set to: 0
 17914  0035BC  51C0               	movf	create_chain@scl& (0+255),w,b
 17915  0035BE  19C2               	xorwf	create_chain@ncl& (0+255),w,b
 17916  0035C0  E1CE               	bnz	l10194
 17917  0035C2  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 17918  0035C4  19C3               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 17919  0035C6  A4D8               	btfss	status,2,c
 17920  0035C8  D7CA               	goto	l1100
 17921                           
 17922                           ; BSR set to: 0
 17923  0035CA  0E00               	movlw	0
 17924  0035CC  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17925  0035CE  0E00               	movlw	0
 17926  0035D0  6FB6               	movwf	?_create_chain& (0+255),b
 17927                           
 17928                           ; BSR set to: 0
 17929  0035D2  0012               	return	
 17930  0035D4                     l1104:
 17931                           
 17932                           ; BSR set to: 0
 17933                           ;tff.c: 315: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 17934                           
 17935                           ; BSR set to: 0
 17936  0035D4  C0C2  F0A0         	movff	create_chain@ncl,put_cluster@clust
 17937  0035D8  C0C3  F0A1         	movff	create_chain@ncl+1,put_cluster@clust+1
 17938  0035DC  0EFF               	movlw	255
 17939  0035DE  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 17940  0035E0  69A2               	setf	put_cluster@val& (0+255),b
 17941  0035E2  ECF5  F015         	call	_put_cluster	;wreg free
 17942  0035E6  0900               	iorlw	0
 17943  0035E8  A4D8               	btfss	status,2,c
 17944  0035EA  D006               	goto	l1107
 17945  0035EC  0E00               	movlw	0
 17946  0035EE  0100               	movlb	0	; () banked
 17947  0035F0  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17948  0035F2  0E01               	movlw	1
 17949  0035F4  6FB6               	movwf	?_create_chain& (0+255),b
 17950                           
 17951                           ; BSR set to: 0
 17952  0035F6  0012               	return	
 17953  0035F8                     l1107:
 17954                           
 17955                           ;tff.c: 316: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 17956                           
 17957                           ; BSR set to: 0
 17958  0035F8  0100               	movlb	0	; () banked
 17959  0035FA  51B6               	movf	create_chain@clust& (0+255),w,b
 17960  0035FC  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 17961  0035FE  B4D8               	btfsc	status,2,c
 17962  003600  D013               	goto	l1108
 17963                           
 17964                           ; BSR set to: 0
 17965  003602  C0B6  F0A0         	movff	create_chain@clust,put_cluster@clust
 17966  003606  C0B7  F0A1         	movff	create_chain@clust+1,put_cluster@clust+1
 17967  00360A  C0C2  F0A2         	movff	create_chain@ncl,put_cluster@val
 17968  00360E  C0C3  F0A3         	movff	create_chain@ncl+1,put_cluster@val+1
 17969  003612  ECF5  F015         	call	_put_cluster	;wreg free
 17970  003616  0900               	iorlw	0
 17971  003618  A4D8               	btfss	status,2,c
 17972  00361A  D006               	goto	l1108
 17973  00361C  0E00               	movlw	0
 17974  00361E  0100               	movlb	0	; () banked
 17975  003620  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17976  003622  0E01               	movlw	1
 17977  003624  6FB6               	movwf	?_create_chain& (0+255),b
 17978                           
 17979                           ; BSR set to: 0
 17980  003626  0012               	return	
 17981  003628                     l1108:
 17982                           
 17983                           ;tff.c: 318: fs->last_clust = ncl;
 17984                           
 17985                           ; BSR set to: 0
 17986  003628  0100               	movlb	0	; () banked
 17987  00362A  EE20 F018          	lfsr	2,24
 17988  00362E  51BC               	movf	create_chain@fs& (0+255),w,b
 17989  003630  26D9               	addwf	fsr2l,f,c
 17990  003632  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 17991  003634  22DA               	addwfc	fsr2h,f,c
 17992  003636  C0C2  FFDE         	movff	create_chain@ncl,postinc2
 17993  00363A  C0C3  FFDD         	movff	create_chain@ncl+1,postdec2
 17994                           
 17995                           ;tff.c: 319: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 17996  00363E  EE20 F01A          	lfsr	2,26
 17997  003642  51BC               	movf	create_chain@fs& (0+255),w,b
 17998  003644  26D9               	addwf	fsr2l,f,c
 17999  003646  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 18000  003648  22DA               	addwfc	fsr2h,f,c
 18001  00364A  28DE               	incf	postinc2,w,c
 18002  00364C  E103               	bnz	u13190
 18003  00364E  28DE               	incf	postinc2,w,c
 18004  003650  B4D8               	btfsc	status,2,c
 18005  003652  D009               	goto	l1109
 18006  003654                     u13190:
 18007                           
 18008                           ; BSR set to: 0
 18009                           ;tff.c: 320: fs->free_clust--;
 18010  003654  EE20 F01A          	lfsr	2,26
 18011  003658  51BC               	movf	create_chain@fs& (0+255),w,b
 18012  00365A  26D9               	addwf	fsr2l,f,c
 18013  00365C  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 18014  00365E  22DA               	addwfc	fsr2h,f,c
 18015  003660  06DE               	decf	postinc2,f,c
 18016  003662  0E00               	movlw	0
 18017  003664  5ADD               	subwfb	postdec2,f,c
 18018  003666                     l1109:
 18019                           
 18020                           ; BSR set to: 0
 18021                           ;tff.c: 324: }
 18022                           ;tff.c: 326: return ncl;
 18023                           
 18024                           ; BSR set to: 0
 18025  003666  C0C2  F0B6         	movff	create_chain@ncl,?_create_chain
 18026  00366A  C0C3  F0B7         	movff	create_chain@ncl+1,?_create_chain+1
 18027  00366E  0012               	return	
 18028  003670                     __end_of_create_chain:
 18029                           	opt stack 0
 18030                           tosu	equ	0xFFF
 18031                           tosh	equ	0xFFE
 18032                           tosl	equ	0xFFD
 18033                           pclath	equ	0xFFA
 18034                           tblptru	equ	0xFF8
 18035                           tblptrh	equ	0xFF7
 18036                           tblptrl	equ	0xFF6
 18037                           tablat	equ	0xFF5
 18038                           prodh	equ	0xFF4
 18039                           prodl	equ	0xFF3
 18040                           intcon	equ	0xFF2
 18041                           intcon2	equ	0xFF1
 18042                           intcon3	equ	0xFF0
 18043                           indf0	equ	0xFEF
 18044                           postinc0	equ	0xFEE
 18045                           fsr0h	equ	0xFEA
 18046                           fsr0l	equ	0xFE9
 18047                           wreg	equ	0xFE8
 18048                           indf1	equ	0xFE7
 18049                           postinc1	equ	0xFE6
 18050                           postdec1	equ	0xFE5
 18051                           plusw1	equ	0xFE3
 18052                           fsr1h	equ	0xFE2
 18053                           fsr1l	equ	0xFE1
 18054                           indf2	equ	0xFDF
 18055                           postinc2	equ	0xFDE
 18056                           postdec2	equ	0xFDD
 18057                           plusw2	equ	0xFDB
 18058                           fsr2h	equ	0xFDA
 18059                           fsr2l	equ	0xFD9
 18060                           status	equ	0xFD8
 18061                           
 18062 ;; *************** function _put_cluster *****************
 18063 ;; Defined at:
 18064 ;;		line 197 in file "bibliotecas/tff.c"
 18065 ;; Parameters:    Size  Location     Type
 18066 ;;  clust           2   64[BANK0 ] unsigned short 
 18067 ;;  val             2   66[BANK0 ] unsigned short 
 18068 ;; Auto vars:     Size  Location     Type
 18069 ;;  fatsect         4   76[BANK0 ] unsigned long 
 18070 ;;  fs              2   84[BANK0 ] PTR struct _FATFS
 18071 ;;		 -> NULL(0), fs(544), 
 18072 ;;  p               2   82[BANK0 ] PTR unsigned char 
 18073 ;;		 -> fs.win(512), NULL(0), fs(544), 
 18074 ;;  bc              2   80[BANK0 ] unsigned short 
 18075 ;; Return value:  Size  Location     Type
 18076 ;;                  1    wreg      enum E105
 18077 ;; Registers used:
 18078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18079 ;; Tracked objects:
 18080 ;;		On entry : 0/0
 18081 ;;		On exit  : 0/0
 18082 ;;		Unchanged: 0/0
 18083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18084 ;;      Params:         0       4       0       0       0       0       0       0       0
 18085 ;;      Locals:         0      14       0       0       0       0       0       0       0
 18086 ;;      Temps:          0       4       0       0       0       0       0       0       0
 18087 ;;      Totals:         0      22       0       0       0       0       0       0       0
 18088 ;;Total ram usage:       22 bytes
 18089 ;; Hardware stack levels used:    1
 18090 ;; Hardware stack levels required when called:    9
 18091 ;; This function calls:
 18092 ;;		___wmul
 18093 ;;		_move_window
 18094 ;; This function is called by:
 18095 ;;		_remove_chain
 18096 ;;		_create_chain
 18097 ;; This function uses a non-reentrant model
 18098 ;;
 18099                           
 18100                           	psect	text60
 18101  002BEA                     __ptext60:
 18102                           	opt stack 0
 18103  002BEA                     _put_cluster:
 18104                           	opt stack 13
 18105                           
 18106                           ;tff.c: 202: WORD bc;
 18107                           ;tff.c: 203: BYTE *p;
 18108                           ;tff.c: 204: DWORD fatsect;
 18109                           ;tff.c: 205: FATFS *fs = FatFs;
 18110                           
 18111                           ; BSR set to: 0
 18112                           ;incstack = 0
 18113  002BEA  C0F7  F0B4         	movff	_FatFs,put_cluster@fs
 18114  002BEE  C0F8  F0B5         	movff	_FatFs+1,put_cluster@fs+1
 18115                           
 18116                           ;tff.c: 208: fatsect = fs->fatbase;
 18117  002BF2  0100               	movlb	0	; () banked
 18118  002BF4  EE20 F008          	lfsr	2,8
 18119  002BF8  51B4               	movf	put_cluster@fs& (0+255),w,b
 18120  002BFA  26D9               	addwf	fsr2l,f,c
 18121  002BFC  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 18122  002BFE  22DA               	addwfc	fsr2h,f,c
 18123  002C00  CFDE F0AC          	movff	postinc2,put_cluster@fatsect
 18124  002C04  CFDE F0AD          	movff	postinc2,put_cluster@fatsect+1
 18125  002C08  CFDE F0AE          	movff	postinc2,put_cluster@fatsect+2
 18126  002C0C  CFDE F0AF          	movff	postinc2,put_cluster@fatsect+3
 18127                           
 18128                           ;tff.c: 209: switch (fs->fs_type) {
 18129  002C10  D111               	goto	l1062
 18130  002C12                     
 18131                           ; BSR set to: 0
 18132                           ;tff.c: 211: bc = (WORD)clust * 3 / 2;
 18133                           
 18134                           ; BSR set to: 0
 18135  002C12  C0A0  F060         	movff	put_cluster@clust,___wmul@multiplier
 18136  002C16  C0A1  F061         	movff	put_cluster@clust+1,___wmul@multiplier+1
 18137  002C1A  0E00               	movlw	0
 18138  002C1C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18139  002C1E  0E03               	movlw	3
 18140  002C20  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18141  002C22  EC76  F02B         	call	___wmul	;wreg free
 18142  002C26  90D8               	bcf	status,0,c
 18143  002C28  0100               	movlb	0	; () banked
 18144  002C2A  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 18145  002C2C  6FA4               	movwf	??_put_cluster& (0+255),b
 18146  002C2E  3160               	rrcf	?___wmul& (0+255),w,b
 18147  002C30  6FB0               	movwf	put_cluster@bc& (0+255),b
 18148  002C32  C0A4  F0B1         	movff	??_put_cluster,put_cluster@bc+1
 18149                           
 18150                           ; BSR set to: 0
 18151                           ;tff.c: 212: if (!move_window(fatsect + bc / 512U)) return FALSE;
 18152  002C36  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 18153  002C3A  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 18154  002C3E  0E09               	movlw	9
 18155  002C40  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 18156  002C42                     u12925:
 18157  002C42  90D8               	bcf	status,0,c
 18158  002C44  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 18159  002C46  33A4               	rrcf	??_put_cluster& (0+255),f,b
 18160  002C48  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 18161  002C4A  D7FB               	goto	u12925
 18162  002C4C  51A4               	movf	??_put_cluster& (0+255),w,b
 18163  002C4E  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 18164  002C50  6F8B               	movwf	move_window@sector& (0+255),b
 18165  002C52  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18166  002C54  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 18167  002C56  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18168  002C58  0E00               	movlw	0
 18169  002C5A  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 18170  002C5C  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18171  002C5E  0E00               	movlw	0
 18172  002C60  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 18173  002C62  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18174  002C64  EC38  F01B         	call	_move_window	;wreg free
 18175  002C68  0900               	iorlw	0
 18176  002C6A  A4D8               	btfss	status,2,c
 18177  002C6C  D002               	goto	l1064
 18178  002C6E  0E00               	movlw	0
 18179  002C70  0012               	return	
 18180  002C72                     l1064:
 18181                           
 18182                           ;tff.c: 213: p = &fs->win[bc % 512U];
 18183  002C72  0EFF               	movlw	255
 18184  002C74  0100               	movlb	0	; () banked
 18185  002C76  6FA4               	movwf	??_put_cluster& (0+255),b
 18186  002C78  0E01               	movlw	1
 18187  002C7A  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 18188  002C7C  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 18189  002C80  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 18190  002C84  51A4               	movf	??_put_cluster& (0+255),w,b
 18191  002C86  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 18192  002C88  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18193  002C8A  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 18194  002C8C  0E20               	movlw	32
 18195  002C8E  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 18196  002C90  0E00               	movlw	0
 18197  002C92  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 18198  002C94  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 18199  002C96  25B4               	addwf	put_cluster@fs& (0+255),w,b
 18200  002C98  6FB2               	movwf	put_cluster@p& (0+255),b
 18201  002C9A  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 18202  002C9C  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 18203  002C9E  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 18204                           
 18205                           ; BSR set to: 0
 18206                           ;tff.c: 214: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 18207  002CA0  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 18208  002CA2  D004               	goto	l1067
 18209                           
 18210                           ; BSR set to: 0
 18211  002CA4  C0A2  F0A8         	movff	put_cluster@val,_put_cluster$2007
 18212  002CA8  6BA9               	clrf	(_put_cluster$2007+1)& (0+255),b
 18213  002CAA  D01A               	goto	l1069
 18214  002CAC                     l1067:
 18215                           
 18216                           ; BSR set to: 0
 18217                           
 18218                           ; BSR set to: 0
 18219  002CAC  51A2               	movf	put_cluster@val& (0+255),w,b
 18220  002CAE  6FA4               	movwf	??_put_cluster& (0+255),b
 18221  002CB0  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 18222  002CB2  3BA4               	swapf	??_put_cluster& (0+255),f,b
 18223  002CB4  3BA5               	swapf	(??_put_cluster+1)& (0+255),f,b
 18224  002CB6  0EF0               	movlw	240
 18225  002CB8  17A5               	andwf	(??_put_cluster+1)& (0+255),f,b
 18226  002CBA  51A4               	movf	??_put_cluster& (0+255),w,b
 18227  002CBC  0B0F               	andlw	15
 18228  002CBE  13A5               	iorwf	(??_put_cluster+1)& (0+255),f,b
 18229  002CC0  0EF0               	movlw	240
 18230  002CC2  17A4               	andwf	??_put_cluster& (0+255),f,b
 18231  002CC4  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 18232  002CC8  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 18233  002CCC  50DF               	movf	indf2,w,c
 18234  002CCE  0B0F               	andlw	15
 18235  002CD0  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 18236  002CD2  6BA7               	clrf	(??_put_cluster+3)& (0+255),b
 18237  002CD4  51A4               	movf	??_put_cluster& (0+255),w,b
 18238  002CD6  11A6               	iorwf	(??_put_cluster+2)& (0+255),w,b
 18239  002CD8  6FA8               	movwf	_put_cluster$2007& (0+255),b
 18240  002CDA  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18241  002CDC  11A7               	iorwf	(??_put_cluster+3)& (0+255),w,b
 18242  002CDE  6FA9               	movwf	(_put_cluster$2007+1)& (0+255),b
 18243  002CE0                     l1069:
 18244                           
 18245                           ; BSR set to: 0
 18246                           
 18247                           ; BSR set to: 0
 18248  002CE0  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 18249  002CE4  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 18250  002CE8  C0A8  FFDF         	movff	_put_cluster$2007,indf2
 18251                           
 18252                           ; BSR set to: 0
 18253                           ;tff.c: 215: bc++;
 18254  002CEC  4BB0               	infsnz	put_cluster@bc& (0+255),f,b
 18255  002CEE  2BB1               	incf	(put_cluster@bc+1)& (0+255),f,b
 18256                           
 18257                           ; BSR set to: 0
 18258                           ;tff.c: 216: fs->winflag = 1;
 18259  002CF0  EE20 F01F          	lfsr	2,31
 18260  002CF4  51B4               	movf	put_cluster@fs& (0+255),w,b
 18261  002CF6  26D9               	addwf	fsr2l,f,c
 18262  002CF8  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 18263  002CFA  22DA               	addwfc	fsr2h,f,c
 18264  002CFC  0E01               	movlw	1
 18265  002CFE  6EDF               	movwf	indf2,c
 18266                           
 18267                           ; BSR set to: 0
 18268                           ;tff.c: 217: if (!move_window(fatsect + bc / 512U)) return FALSE;
 18269  002D00  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 18270  002D04  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 18271  002D08  0E09               	movlw	9
 18272  002D0A  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 18273  002D0C                     u12955:
 18274  002D0C  90D8               	bcf	status,0,c
 18275  002D0E  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 18276  002D10  33A4               	rrcf	??_put_cluster& (0+255),f,b
 18277  002D12  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 18278  002D14  D7FB               	goto	u12955
 18279  002D16  51A4               	movf	??_put_cluster& (0+255),w,b
 18280  002D18  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 18281  002D1A  6F8B               	movwf	move_window@sector& (0+255),b
 18282  002D1C  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18283  002D1E  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 18284  002D20  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18285  002D22  0E00               	movlw	0
 18286  002D24  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 18287  002D26  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18288  002D28  0E00               	movlw	0
 18289  002D2A  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 18290  002D2C  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18291  002D2E  EC38  F01B         	call	_move_window	;wreg free
 18292  002D32  0900               	iorlw	0
 18293  002D34  A4D8               	btfss	status,2,c
 18294  002D36  D002               	goto	l1070
 18295  002D38  0E00               	movlw	0
 18296  002D3A  0012               	return	
 18297  002D3C                     l1070:
 18298                           
 18299                           ;tff.c: 218: p = &fs->win[bc % 512U];
 18300  002D3C  0EFF               	movlw	255
 18301  002D3E  0100               	movlb	0	; () banked
 18302  002D40  6FA4               	movwf	??_put_cluster& (0+255),b
 18303  002D42  0E01               	movlw	1
 18304  002D44  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 18305  002D46  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 18306  002D4A  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 18307  002D4E  51A4               	movf	??_put_cluster& (0+255),w,b
 18308  002D50  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 18309  002D52  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18310  002D54  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 18311  002D56  0E20               	movlw	32
 18312  002D58  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 18313  002D5A  0E00               	movlw	0
 18314  002D5C  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 18315  002D5E  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 18316  002D60  25B4               	addwf	put_cluster@fs& (0+255),w,b
 18317  002D62  6FB2               	movwf	put_cluster@p& (0+255),b
 18318  002D64  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 18319  002D66  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 18320  002D68  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 18321                           
 18322                           ; BSR set to: 0
 18323                           ;tff.c: 219: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 18324  002D6A  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 18325  002D6C  D013               	goto	l1072
 18326                           
 18327                           ; BSR set to: 0
 18328  002D6E  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 18329  002D72  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 18330  002D76  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 18331  002D7A  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 18332  002D7C  0E0F               	movlw	15
 18333  002D7E  17A4               	andwf	??_put_cluster& (0+255),f,b
 18334  002D80  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 18335  002D84  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 18336  002D88  50DF               	movf	indf2,w,c
 18337  002D8A  0BF0               	andlw	240
 18338  002D8C  11A4               	iorwf	??_put_cluster& (0+255),w,b
 18339  002D8E  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 18340  002D90  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 18341  002D92  D00C               	goto	L9
 18342  002D94                     l1072:
 18343                           
 18344                           ; BSR set to: 0
 18345                           
 18346                           ; BSR set to: 0
 18347  002D94  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 18348  002D98  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 18349  002D9C  0E04               	movlw	4
 18350  002D9E  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 18351  002DA0                     u12985:
 18352  002DA0  90D8               	bcf	status,0,c
 18353  002DA2  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 18354  002DA4  33A4               	rrcf	??_put_cluster& (0+255),f,b
 18355  002DA6  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 18356  002DA8  D7FB               	goto	u12985
 18357  002DAA  51A4               	movf	??_put_cluster& (0+255),w,b
 18358  002DAC                     L9:
 18359  002DAC  6FAA               	movwf	_put_cluster$2008& (0+255),b
 18360  002DAE  6BAB               	clrf	(_put_cluster$2008+1)& (0+255),b
 18361                           
 18362                           ; BSR set to: 0
 18363                           
 18364                           ; BSR set to: 0
 18365  002DB0  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 18366  002DB4  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 18367  002DB8  C0AA  FFDF         	movff	_put_cluster$2008,indf2
 18368                           
 18369                           ;tff.c: 220: break;
 18370  002DBC  D049               	goto	l1075
 18371  002DBE                     
 18372                           ; BSR set to: 0
 18373                           ;tff.c: 223: if (!move_window(fatsect + clust / 256)) return FALSE;
 18374                           
 18375                           ; BSR set to: 0
 18376  002DBE  C0A0  F0A4         	movff	put_cluster@clust,??_put_cluster
 18377  002DC2  C0A1  F0A5         	movff	put_cluster@clust+1,??_put_cluster+1
 18378  002DC6  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 18379  002DCA  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 18380  002DCC  51A4               	movf	??_put_cluster& (0+255),w,b
 18381  002DCE  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 18382  002DD0  6F8B               	movwf	move_window@sector& (0+255),b
 18383  002DD2  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18384  002DD4  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 18385  002DD6  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18386  002DD8  0E00               	movlw	0
 18387  002DDA  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 18388  002DDC  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18389  002DDE  0E00               	movlw	0
 18390  002DE0  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 18391  002DE2  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18392  002DE4  EC38  F01B         	call	_move_window	;wreg free
 18393  002DE8  0900               	iorlw	0
 18394  002DEA  A4D8               	btfss	status,2,c
 18395  002DEC  D002               	goto	l1077
 18396  002DEE  0E00               	movlw	0
 18397  002DF0  0012               	return	
 18398  002DF2                     l1077:
 18399                           
 18400                           ;tff.c: 224: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 18401  002DF2  0EFF               	movlw	255
 18402  002DF4  0100               	movlb	0	; () banked
 18403  002DF6  6FA4               	movwf	??_put_cluster& (0+255),b
 18404  002DF8  0E01               	movlw	1
 18405  002DFA  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 18406  002DFC  C0A0  F0A6         	movff	put_cluster@clust,??_put_cluster+2
 18407  002E00  C0A1  F0A7         	movff	put_cluster@clust+1,??_put_cluster+3
 18408  002E04  90D8               	bcf	status,0,c
 18409  002E06  37A6               	rlcf	(??_put_cluster+2)& (0+255),f,b
 18410  002E08  37A7               	rlcf	(??_put_cluster+3)& (0+255),f,b
 18411  002E0A  51A4               	movf	??_put_cluster& (0+255),w,b
 18412  002E0C  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 18413  002E0E  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18414  002E10  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 18415  002E12  0E20               	movlw	32
 18416  002E14  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 18417  002E16  0E00               	movlw	0
 18418  002E18  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 18419  002E1A  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 18420  002E1C  25B4               	addwf	put_cluster@fs& (0+255),w,b
 18421  002E1E  6ED9               	movwf	fsr2l,c
 18422  002E20  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 18423  002E22  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 18424  002E24  6EDA               	movwf	fsr2h,c
 18425  002E26  C0A2  FFDE         	movff	put_cluster@val,postinc2
 18426  002E2A  C0A3  FFDD         	movff	put_cluster@val+1,postdec2
 18427                           
 18428                           ;tff.c: 225: break;
 18429  002E2E  D010               	goto	l1075
 18430  002E30                     
 18431                           ; BSR set to: 0
 18432                           ;tff.c: 233: return FALSE;
 18433                           
 18434                           ; BSR set to: 0
 18435  002E30  0E00               	movlw	0
 18436                           
 18437                           ; BSR set to: 0
 18438  002E32  0012               	return	
 18439  002E34                     l1062:
 18440                           
 18441                           ; BSR set to: 0
 18442                           
 18443                           ; BSR set to: 0
 18444  002E34  EE20 F01C          	lfsr	2,28
 18445  002E38  51B4               	movf	put_cluster@fs& (0+255),w,b
 18446  002E3A  26D9               	addwf	fsr2l,f,c
 18447  002E3C  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 18448  002E3E  22DA               	addwfc	fsr2h,f,c
 18449  002E40  50DF               	movf	indf2,w,c
 18450                           
 18451                           ; Switch size 1, requested type "space"
 18452                           ; Number of cases is 2, Range of values is 1 to 2
 18453                           ; switch strategies available:
 18454                           ; Name         Instructions Cycles
 18455                           ; simple_byte            7     4 (average)
 18456                           ;	Chosen strategy is simple_byte
 18457  002E42  0A01               	xorlw	1	; case 1
 18458  002E44  B4D8               	btfsc	status,2,c
 18459  002E46  D6E5               	goto	l1063
 18460  002E48  0A03               	xorlw	3	; case 2
 18461  002E4A  B4D8               	btfsc	status,2,c
 18462  002E4C  D7B8               	goto	l1076
 18463  002E4E  D7F0               	goto	l1078
 18464  002E50                     l1075:
 18465                           
 18466                           ; BSR set to: 0
 18467                           ;tff.c: 235: fs->winflag = 1;
 18468                           
 18469                           ; BSR set to: 0
 18470  002E50  EE20 F01F          	lfsr	2,31
 18471  002E54  51B4               	movf	put_cluster@fs& (0+255),w,b
 18472  002E56  26D9               	addwf	fsr2l,f,c
 18473  002E58  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 18474  002E5A  22DA               	addwfc	fsr2h,f,c
 18475  002E5C  0E01               	movlw	1
 18476  002E5E  6EDF               	movwf	indf2,c
 18477                           
 18478                           ; BSR set to: 0
 18479                           ;tff.c: 236: return TRUE;
 18480  002E60  0E01               	movlw	1
 18481  002E62  0012               	return	
 18482  002E64                     __end_of_put_cluster:
 18483                           	opt stack 0
 18484                           tosu	equ	0xFFF
 18485                           tosh	equ	0xFFE
 18486                           tosl	equ	0xFFD
 18487                           pclath	equ	0xFFA
 18488                           tblptru	equ	0xFF8
 18489                           tblptrh	equ	0xFF7
 18490                           tblptrl	equ	0xFF6
 18491                           tablat	equ	0xFF5
 18492                           prodh	equ	0xFF4
 18493                           prodl	equ	0xFF3
 18494                           intcon	equ	0xFF2
 18495                           intcon2	equ	0xFF1
 18496                           intcon3	equ	0xFF0
 18497                           indf0	equ	0xFEF
 18498                           postinc0	equ	0xFEE
 18499                           fsr0h	equ	0xFEA
 18500                           fsr0l	equ	0xFE9
 18501                           wreg	equ	0xFE8
 18502                           indf1	equ	0xFE7
 18503                           postinc1	equ	0xFE6
 18504                           postdec1	equ	0xFE5
 18505                           plusw1	equ	0xFE3
 18506                           fsr1h	equ	0xFE2
 18507                           fsr1l	equ	0xFE1
 18508                           indf2	equ	0xFDF
 18509                           postinc2	equ	0xFDE
 18510                           postdec2	equ	0xFDD
 18511                           plusw2	equ	0xFDB
 18512                           fsr2h	equ	0xFDA
 18513                           fsr2l	equ	0xFD9
 18514                           status	equ	0xFD8
 18515                           
 18516 ;; *************** function _get_cluster *****************
 18517 ;; Defined at:
 18518 ;;		line 154 in file "bibliotecas/tff.c"
 18519 ;; Parameters:    Size  Location     Type
 18520 ;;  clust           2   64[BANK0 ] unsigned short 
 18521 ;; Auto vars:     Size  Location     Type
 18522 ;;  fatsect         4   75[BANK0 ] unsigned long 
 18523 ;;  fs              2   81[BANK0 ] PTR struct _FATFS
 18524 ;;		 -> NULL(0), fs(544), 
 18525 ;;  bc              2   79[BANK0 ] unsigned short 
 18526 ;;  wc              2   73[BANK0 ] unsigned short 
 18527 ;; Return value:  Size  Location     Type
 18528 ;;                  2   64[BANK0 ] unsigned short 
 18529 ;; Registers used:
 18530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18531 ;; Tracked objects:
 18532 ;;		On entry : 0/0
 18533 ;;		On exit  : 0/0
 18534 ;;		Unchanged: 0/0
 18535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18536 ;;      Params:         0       2       0       0       0       0       0       0       0
 18537 ;;      Locals:         0      10       0       0       0       0       0       0       0
 18538 ;;      Temps:          0       7       0       0       0       0       0       0       0
 18539 ;;      Totals:         0      19       0       0       0       0       0       0       0
 18540 ;;Total ram usage:       19 bytes
 18541 ;; Hardware stack levels used:    1
 18542 ;; Hardware stack levels required when called:    9
 18543 ;; This function calls:
 18544 ;;		___wmul
 18545 ;;		_move_window
 18546 ;; This function is called by:
 18547 ;;		_remove_chain
 18548 ;;		_create_chain
 18549 ;;		_next_dir_entry
 18550 ;;		_f_lseek
 18551 ;;		_f_read
 18552 ;; This function uses a non-reentrant model
 18553 ;;
 18554                           
 18555                           	psect	text61
 18556  0030C4                     __ptext61:
 18557                           	opt stack 0
 18558  0030C4                     _get_cluster:
 18559                           	opt stack 13
 18560                           
 18561                           ;tff.c: 158: WORD wc, bc;
 18562                           ;tff.c: 159: DWORD fatsect;
 18563                           ;tff.c: 160: FATFS *fs = FatFs;
 18564                           
 18565                           ;incstack = 0
 18566  0030C4  C0F7  F0B1         	movff	_FatFs,get_cluster@fs
 18567  0030C8  C0F8  F0B2         	movff	_FatFs+1,get_cluster@fs+1
 18568                           
 18569                           ;tff.c: 163: if (clust >= 2 && clust < fs->max_clust) {
 18570  0030CC  0100               	movlb	0	; () banked
 18571  0030CE  51A1               	movf	(get_cluster@clust+1)& (0+255),w,b
 18572  0030D0  E104               	bnz	u12830
 18573  0030D2  0E02               	movlw	2
 18574  0030D4  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 18575  0030D6  A0D8               	btfss	status,0,c
 18576  0030D8  D100               	goto	l1051
 18577  0030DA                     u12830:
 18578                           
 18579                           ; BSR set to: 0
 18580  0030DA  EE20 F016          	lfsr	2,22
 18581  0030DE  51B1               	movf	get_cluster@fs& (0+255),w,b
 18582  0030E0  26D9               	addwf	fsr2l,f,c
 18583  0030E2  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 18584  0030E4  22DA               	addwfc	fsr2h,f,c
 18585  0030E6  50DE               	movf	postinc2,w,c
 18586  0030E8  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 18587  0030EA  50DE               	movf	postinc2,w,c
 18588  0030EC  59A1               	subwfb	(get_cluster@clust+1)& (0+255),w,b
 18589  0030EE  B0D8               	btfsc	status,0,c
 18590  0030F0  D0F4               	goto	l1051
 18591                           
 18592                           ; BSR set to: 0
 18593                           ;tff.c: 164: fatsect = fs->fatbase;
 18594  0030F2  EE20 F008          	lfsr	2,8
 18595  0030F6  51B1               	movf	get_cluster@fs& (0+255),w,b
 18596  0030F8  26D9               	addwf	fsr2l,f,c
 18597  0030FA  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 18598  0030FC  22DA               	addwfc	fsr2h,f,c
 18599  0030FE  CFDE F0AB          	movff	postinc2,get_cluster@fatsect
 18600  003102  CFDE F0AC          	movff	postinc2,get_cluster@fatsect+1
 18601  003106  CFDE F0AD          	movff	postinc2,get_cluster@fatsect+2
 18602  00310A  CFDE F0AE          	movff	postinc2,get_cluster@fatsect+3
 18603                           
 18604                           ;tff.c: 165: switch (fs->fs_type) {
 18605  00310E  D0D8               	goto	l1048
 18606  003110                     
 18607                           ; BSR set to: 0
 18608                           ;tff.c: 167: bc = (WORD)clust * 3 / 2;
 18609                           
 18610                           ; BSR set to: 0
 18611  003110  C0A0  F060         	movff	get_cluster@clust,___wmul@multiplier
 18612  003114  C0A1  F061         	movff	get_cluster@clust+1,___wmul@multiplier+1
 18613  003118  0E00               	movlw	0
 18614  00311A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18615  00311C  0E03               	movlw	3
 18616  00311E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18617  003120  EC76  F02B         	call	___wmul	;wreg free
 18618  003124  90D8               	bcf	status,0,c
 18619  003126  0100               	movlb	0	; () banked
 18620  003128  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 18621  00312A  6FA2               	movwf	??_get_cluster& (0+255),b
 18622  00312C  3160               	rrcf	?___wmul& (0+255),w,b
 18623  00312E  6FAF               	movwf	get_cluster@bc& (0+255),b
 18624  003130  C0A2  F0B0         	movff	??_get_cluster,get_cluster@bc+1
 18625                           
 18626                           ; BSR set to: 0
 18627                           ;tff.c: 168: if (!move_window(fatsect + bc / 512U)) break;
 18628  003134  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 18629  003138  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 18630  00313C  0E09               	movlw	9
 18631  00313E  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 18632  003140                     u12855:
 18633  003140  90D8               	bcf	status,0,c
 18634  003142  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 18635  003144  33A2               	rrcf	??_get_cluster& (0+255),f,b
 18636  003146  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 18637  003148  D7FB               	goto	u12855
 18638  00314A  51A2               	movf	??_get_cluster& (0+255),w,b
 18639  00314C  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 18640  00314E  6F8B               	movwf	move_window@sector& (0+255),b
 18641  003150  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18642  003152  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 18643  003154  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18644  003156  0E00               	movlw	0
 18645  003158  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 18646  00315A  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18647  00315C  0E00               	movlw	0
 18648  00315E  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 18649  003160  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18650  003162  EC38  F01B         	call	_move_window	;wreg free
 18651  003166  0900               	iorlw	0
 18652  003168  B4D8               	btfsc	status,2,c
 18653  00316A  D0B7               	goto	l1051
 18654                           
 18655                           ;tff.c: 169: wc = fs->win[bc % 512U]; bc++;
 18656  00316C  0EFF               	movlw	255
 18657  00316E  0100               	movlb	0	; () banked
 18658  003170  6FA2               	movwf	??_get_cluster& (0+255),b
 18659  003172  0E01               	movlw	1
 18660  003174  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 18661  003176  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 18662  00317A  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 18663  00317E  51A2               	movf	??_get_cluster& (0+255),w,b
 18664  003180  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 18665  003182  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18666  003184  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 18667  003186  0E20               	movlw	32
 18668  003188  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 18669  00318A  0E00               	movlw	0
 18670  00318C  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 18671  00318E  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 18672  003190  25B1               	addwf	get_cluster@fs& (0+255),w,b
 18673  003192  6ED9               	movwf	fsr2l,c
 18674  003194  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 18675  003196  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 18676  003198  6EDA               	movwf	fsr2h,c
 18677  00319A  50DF               	movf	indf2,w,c
 18678  00319C  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 18679  00319E  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 18680  0031A0  6FA9               	movwf	get_cluster@wc& (0+255),b
 18681  0031A2  6BAA               	clrf	(get_cluster@wc+1)& (0+255),b
 18682                           
 18683                           ; BSR set to: 0
 18684  0031A4  4BAF               	infsnz	get_cluster@bc& (0+255),f,b
 18685  0031A6  2BB0               	incf	(get_cluster@bc+1)& (0+255),f,b
 18686                           
 18687                           ; BSR set to: 0
 18688                           ;tff.c: 170: if (!move_window(fatsect + bc / 512U)) break;
 18689  0031A8  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 18690  0031AC  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 18691  0031B0  0E09               	movlw	9
 18692  0031B2  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 18693  0031B4                     u12875:
 18694  0031B4  90D8               	bcf	status,0,c
 18695  0031B6  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 18696  0031B8  33A2               	rrcf	??_get_cluster& (0+255),f,b
 18697  0031BA  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 18698  0031BC  D7FB               	goto	u12875
 18699  0031BE  51A2               	movf	??_get_cluster& (0+255),w,b
 18700  0031C0  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 18701  0031C2  6F8B               	movwf	move_window@sector& (0+255),b
 18702  0031C4  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18703  0031C6  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 18704  0031C8  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18705  0031CA  0E00               	movlw	0
 18706  0031CC  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 18707  0031CE  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18708  0031D0  0E00               	movlw	0
 18709  0031D2  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 18710  0031D4  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18711  0031D6  EC38  F01B         	call	_move_window	;wreg free
 18712  0031DA  0900               	iorlw	0
 18713  0031DC  B4D8               	btfsc	status,2,c
 18714  0031DE  D07D               	goto	l1051
 18715                           
 18716                           ;tff.c: 171: wc |= (WORD)fs->win[bc % 512U] << 8;
 18717  0031E0  0EFF               	movlw	255
 18718  0031E2  0100               	movlb	0	; () banked
 18719  0031E4  6FA2               	movwf	??_get_cluster& (0+255),b
 18720  0031E6  0E01               	movlw	1
 18721  0031E8  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 18722  0031EA  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 18723  0031EE  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 18724  0031F2  51A2               	movf	??_get_cluster& (0+255),w,b
 18725  0031F4  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 18726  0031F6  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18727  0031F8  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 18728  0031FA  0E20               	movlw	32
 18729  0031FC  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 18730  0031FE  0E00               	movlw	0
 18731  003200  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 18732  003202  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 18733  003204  25B1               	addwf	get_cluster@fs& (0+255),w,b
 18734  003206  6ED9               	movwf	fsr2l,c
 18735  003208  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 18736  00320A  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 18737  00320C  6EDA               	movwf	fsr2h,c
 18738  00320E  50DF               	movf	indf2,w,c
 18739  003210  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 18740  003212  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 18741  003214  6FA8               	movwf	(??_get_cluster+6)& (0+255),b
 18742  003216  6BA7               	clrf	(??_get_cluster+5)& (0+255),b
 18743  003218  51A7               	movf	(??_get_cluster+5)& (0+255),w,b
 18744  00321A  13A9               	iorwf	get_cluster@wc& (0+255),f,b
 18745  00321C  51A8               	movf	(??_get_cluster+6)& (0+255),w,b
 18746  00321E  13AA               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 18747                           
 18748                           ; BSR set to: 0
 18749                           ;tff.c: 172: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 18750  003220  B1A0               	btfsc	get_cluster@clust& (0+255),0,b
 18751  003222  D007               	goto	l1054
 18752                           
 18753                           ; BSR set to: 0
 18754  003224  0EFF               	movlw	255
 18755  003226  15A9               	andwf	get_cluster@wc& (0+255),w,b
 18756  003228  6FA0               	movwf	?_get_cluster& (0+255),b
 18757  00322A  0E0F               	movlw	15
 18758  00322C  15AA               	andwf	(get_cluster@wc+1)& (0+255),w,b
 18759  00322E  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 18760  003230  0012               	return	
 18761  003232                     l1054:
 18762                           
 18763                           ; BSR set to: 0
 18764                           
 18765                           ; BSR set to: 0
 18766  003232  C0A9  F0A2         	movff	get_cluster@wc,??_get_cluster
 18767  003236  C0AA  F0A3         	movff	get_cluster@wc+1,??_get_cluster+1
 18768  00323A  0E04               	movlw	4
 18769  00323C  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 18770  00323E                     u12905:
 18771  00323E  90D8               	bcf	status,0,c
 18772  003240  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 18773  003242  33A2               	rrcf	??_get_cluster& (0+255),f,b
 18774  003244  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 18775  003246  D7FB               	goto	u12905
 18776  003248  C0A2  F0A0         	movff	??_get_cluster,?_get_cluster
 18777  00324C  C0A3  F0A1         	movff	??_get_cluster+1,?_get_cluster+1
 18778                           
 18779                           ; BSR set to: 0
 18780                           
 18781                           ; BSR set to: 0
 18782  003250  0012               	return	
 18783  003252                     
 18784                           ; BSR set to: 0
 18785                           ;tff.c: 175: if (!move_window(fatsect + clust / 256)) break;
 18786                           
 18787                           ; BSR set to: 0
 18788  003252  C0A0  F0A2         	movff	get_cluster@clust,??_get_cluster
 18789  003256  C0A1  F0A3         	movff	get_cluster@clust+1,??_get_cluster+1
 18790  00325A  C0A3  F0A2         	movff	??_get_cluster+1,??_get_cluster
 18791  00325E  6BA3               	clrf	(??_get_cluster+1)& (0+255),b
 18792  003260  51A2               	movf	??_get_cluster& (0+255),w,b
 18793  003262  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 18794  003264  6F8B               	movwf	move_window@sector& (0+255),b
 18795  003266  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18796  003268  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 18797  00326A  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18798  00326C  0E00               	movlw	0
 18799  00326E  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 18800  003270  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18801  003272  0E00               	movlw	0
 18802  003274  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 18803  003276  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18804  003278  EC38  F01B         	call	_move_window	;wreg free
 18805  00327C  0900               	iorlw	0
 18806  00327E  B4D8               	btfsc	status,2,c
 18807  003280  D02C               	goto	l1051
 18808                           
 18809                           ;tff.c: 176: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 18810  003282  0EFF               	movlw	255
 18811  003284  0100               	movlb	0	; () banked
 18812  003286  6FA2               	movwf	??_get_cluster& (0+255),b
 18813  003288  0E01               	movlw	1
 18814  00328A  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 18815  00328C  C0A0  F0A4         	movff	get_cluster@clust,??_get_cluster+2
 18816  003290  C0A1  F0A5         	movff	get_cluster@clust+1,??_get_cluster+3
 18817  003294  90D8               	bcf	status,0,c
 18818  003296  37A4               	rlcf	(??_get_cluster+2)& (0+255),f,b
 18819  003298  37A5               	rlcf	(??_get_cluster+3)& (0+255),f,b
 18820  00329A  51A2               	movf	??_get_cluster& (0+255),w,b
 18821  00329C  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 18822  00329E  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18823  0032A0  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 18824  0032A2  0E20               	movlw	32
 18825  0032A4  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 18826  0032A6  0E00               	movlw	0
 18827  0032A8  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 18828  0032AA  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 18829  0032AC  25B1               	addwf	get_cluster@fs& (0+255),w,b
 18830  0032AE  6ED9               	movwf	fsr2l,c
 18831  0032B0  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 18832  0032B2  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 18833  0032B4  6EDA               	movwf	fsr2h,c
 18834  0032B6  CFDE F0A0          	movff	postinc2,?_get_cluster
 18835  0032BA  CFDD F0A1          	movff	postdec2,?_get_cluster+1
 18836                           
 18837                           ; BSR set to: 0
 18838  0032BE  0012               	return	
 18839  0032C0                     l1048:
 18840                           
 18841                           ; BSR set to: 0
 18842                           
 18843                           ; BSR set to: 0
 18844  0032C0  EE20 F01C          	lfsr	2,28
 18845  0032C4  51B1               	movf	get_cluster@fs& (0+255),w,b
 18846  0032C6  26D9               	addwf	fsr2l,f,c
 18847  0032C8  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 18848  0032CA  22DA               	addwfc	fsr2h,f,c
 18849  0032CC  50DF               	movf	indf2,w,c
 18850                           
 18851                           ; Switch size 1, requested type "space"
 18852                           ; Number of cases is 2, Range of values is 1 to 2
 18853                           ; switch strategies available:
 18854                           ; Name         Instructions Cycles
 18855                           ; simple_byte            7     4 (average)
 18856                           ;	Chosen strategy is simple_byte
 18857  0032CE  0A01               	xorlw	1	; case 1
 18858  0032D0  B4D8               	btfsc	status,2,c
 18859  0032D2  D71E               	goto	l1049
 18860  0032D4  0A03               	xorlw	3	; case 2
 18861  0032D6  B4D8               	btfsc	status,2,c
 18862  0032D8  D7BC               	goto	l1058
 18863  0032DA                     l1051:
 18864                           
 18865                           ;tff.c: 183: }
 18866                           ;tff.c: 185: return 1;
 18867                           
 18868                           ; BSR set to: 0
 18869                           
 18870                           ; BSR set to: 0
 18871  0032DA  0E00               	movlw	0
 18872  0032DC  0100               	movlb	0	; () banked
 18873  0032DE  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 18874  0032E0  0E01               	movlw	1
 18875  0032E2  6FA0               	movwf	?_get_cluster& (0+255),b
 18876  0032E4  0012               	return	
 18877  0032E6                     __end_of_get_cluster:
 18878                           	opt stack 0
 18879                           tosu	equ	0xFFF
 18880                           tosh	equ	0xFFE
 18881                           tosl	equ	0xFFD
 18882                           pclath	equ	0xFFA
 18883                           tblptru	equ	0xFF8
 18884                           tblptrh	equ	0xFF7
 18885                           tblptrl	equ	0xFF6
 18886                           tablat	equ	0xFF5
 18887                           prodh	equ	0xFF4
 18888                           prodl	equ	0xFF3
 18889                           intcon	equ	0xFF2
 18890                           intcon2	equ	0xFF1
 18891                           intcon3	equ	0xFF0
 18892                           indf0	equ	0xFEF
 18893                           postinc0	equ	0xFEE
 18894                           fsr0h	equ	0xFEA
 18895                           fsr0l	equ	0xFE9
 18896                           wreg	equ	0xFE8
 18897                           indf1	equ	0xFE7
 18898                           postinc1	equ	0xFE6
 18899                           postdec1	equ	0xFE5
 18900                           plusw1	equ	0xFE3
 18901                           fsr1h	equ	0xFE2
 18902                           fsr1l	equ	0xFE1
 18903                           indf2	equ	0xFDF
 18904                           postinc2	equ	0xFDE
 18905                           postdec2	equ	0xFDD
 18906                           plusw2	equ	0xFDB
 18907                           fsr2h	equ	0xFDA
 18908                           fsr2l	equ	0xFD9
 18909                           status	equ	0xFD8
 18910                           
 18911 ;; *************** function ___wmul *****************
 18912 ;; Defined at:
 18913 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 18914 ;; Parameters:    Size  Location     Type
 18915 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18916 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18917 ;; Auto vars:     Size  Location     Type
 18918 ;;  product         2    4[BANK0 ] unsigned int 
 18919 ;; Return value:  Size  Location     Type
 18920 ;;                  2    0[BANK0 ] unsigned int 
 18921 ;; Registers used:
 18922 ;;		wreg, status,2, status,0, prodl, prodh
 18923 ;; Tracked objects:
 18924 ;;		On entry : 0/0
 18925 ;;		On exit  : 0/0
 18926 ;;		Unchanged: 0/0
 18927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18928 ;;      Params:         0       4       0       0       0       0       0       0       0
 18929 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18930 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18931 ;;      Totals:         0       6       0       0       0       0       0       0       0
 18932 ;;Total ram usage:        6 bytes
 18933 ;; Hardware stack levels used:    1
 18934 ;; Hardware stack levels required when called:    3
 18935 ;; This function calls:
 18936 ;;		Nothing
 18937 ;; This function is called by:
 18938 ;;		_get_cluster
 18939 ;;		_put_cluster
 18940 ;;		_fprintf
 18941 ;;		_atoi
 18942 ;; This function uses a non-reentrant model
 18943 ;;
 18944                           
 18945                           	psect	text62
 18946  0056EC                     __ptext62:
 18947                           	opt stack 0
 18948  0056EC                     ___wmul:
 18949                           	opt stack 24
 18950                           
 18951                           ; BSR set to: 0
 18952                           ;incstack = 0
 18953  0056EC  0100               	movlb	0	; () banked
 18954  0056EE  5160               	movf	___wmul@multiplier& (0+255),w,b
 18955  0056F0  0362               	mulwf	___wmul@multiplicand& (0+255),b
 18956  0056F2  CFF3 F064          	movff	prodl,___wmul@product
 18957  0056F6  CFF4 F065          	movff	prodh,___wmul@product+1
 18958  0056FA  5160               	movf	___wmul@multiplier& (0+255),w,b
 18959  0056FC  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18960  0056FE  50F3               	movf	prodl,w,c
 18961  005700  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 18962  005702  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18963  005704  0362               	mulwf	___wmul@multiplicand& (0+255),b
 18964  005706  50F3               	movf	prodl,w,c
 18965  005708  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 18966                           
 18967                           ; BSR set to: 0
 18968  00570A  C064  F060         	movff	___wmul@product,?___wmul
 18969  00570E  C065  F061         	movff	___wmul@product+1,?___wmul+1
 18970  005712  0012               	return	
 18971  005714                     __end_of___wmul:
 18972                           	opt stack 0
 18973                           tosu	equ	0xFFF
 18974                           tosh	equ	0xFFE
 18975                           tosl	equ	0xFFD
 18976                           pclath	equ	0xFFA
 18977                           tblptru	equ	0xFF8
 18978                           tblptrh	equ	0xFF7
 18979                           tblptrl	equ	0xFF6
 18980                           tablat	equ	0xFF5
 18981                           prodh	equ	0xFF4
 18982                           prodl	equ	0xFF3
 18983                           intcon	equ	0xFF2
 18984                           intcon2	equ	0xFF1
 18985                           intcon3	equ	0xFF0
 18986                           indf0	equ	0xFEF
 18987                           postinc0	equ	0xFEE
 18988                           fsr0h	equ	0xFEA
 18989                           fsr0l	equ	0xFE9
 18990                           wreg	equ	0xFE8
 18991                           indf1	equ	0xFE7
 18992                           postinc1	equ	0xFE6
 18993                           postdec1	equ	0xFE5
 18994                           plusw1	equ	0xFE3
 18995                           fsr1h	equ	0xFE2
 18996                           fsr1l	equ	0xFE1
 18997                           indf2	equ	0xFDF
 18998                           postinc2	equ	0xFDE
 18999                           postdec2	equ	0xFDD
 19000                           plusw2	equ	0xFDB
 19001                           fsr2h	equ	0xFDA
 19002                           fsr2l	equ	0xFD9
 19003                           status	equ	0xFD8
 19004                           
 19005 ;; *************** function ___lldiv *****************
 19006 ;; Defined at:
 19007 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 19008 ;; Parameters:    Size  Location     Type
 19009 ;;  dividend        4    0[BANK0 ] unsigned long 
 19010 ;;  divisor         4    4[BANK0 ] unsigned long 
 19011 ;; Auto vars:     Size  Location     Type
 19012 ;;  quotient        4    8[BANK0 ] unsigned long 
 19013 ;;  counter         1   12[BANK0 ] unsigned char 
 19014 ;; Return value:  Size  Location     Type
 19015 ;;                  4    0[BANK0 ] unsigned long 
 19016 ;; Registers used:
 19017 ;;		wreg, status,2, status,0
 19018 ;; Tracked objects:
 19019 ;;		On entry : 0/0
 19020 ;;		On exit  : 0/0
 19021 ;;		Unchanged: 0/0
 19022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19023 ;;      Params:         0       8       0       0       0       0       0       0       0
 19024 ;;      Locals:         0       5       0       0       0       0       0       0       0
 19025 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19026 ;;      Totals:         0      13       0       0       0       0       0       0       0
 19027 ;;Total ram usage:       13 bytes
 19028 ;; Hardware stack levels used:    1
 19029 ;; Hardware stack levels required when called:    3
 19030 ;; This function calls:
 19031 ;;		Nothing
 19032 ;; This function is called by:
 19033 ;;		_auto_mount
 19034 ;;		_f_lseek
 19035 ;;		_fprintf
 19036 ;; This function uses a non-reentrant model
 19037 ;;
 19038                           
 19039                           	psect	text63
 19040  004D7A                     __ptext63:
 19041                           	opt stack 0
 19042  004D7A                     ___lldiv:
 19043                           	opt stack 23
 19044                           
 19045                           ; BSR set to: 0
 19046                           ;incstack = 0
 19047  004D7A  0E00               	movlw	0
 19048  004D7C  0100               	movlb	0	; () banked
 19049  004D7E  6F68               	movwf	___lldiv@quotient& (0+255),b
 19050  004D80  0E00               	movlw	0
 19051  004D82  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 19052  004D84  0E00               	movlw	0
 19053  004D86  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 19054  004D88  0E00               	movlw	0
 19055  004D8A  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 19056                           
 19057                           ; BSR set to: 0
 19058  004D8C  5164               	movf	___lldiv@divisor& (0+255),w,b
 19059  004D8E  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 19060  004D90  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 19061  004D92  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 19062  004D94  B4D8               	btfsc	status,2,c
 19063  004D96  D02A               	goto	l1909
 19064                           
 19065                           ; BSR set to: 0
 19066  004D98  0E01               	movlw	1
 19067  004D9A  6F6C               	movwf	___lldiv@counter& (0+255),b
 19068  004D9C  D006               	goto	l1904
 19069  004D9E                     
 19070                           ; BSR set to: 0
 19071                           
 19072                           ; BSR set to: 0
 19073  004D9E  90D8               	bcf	status,0,c
 19074  004DA0  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 19075  004DA2  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 19076  004DA4  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 19077  004DA6  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 19078  004DA8  2B6C               	incf	___lldiv@counter& (0+255),f,b
 19079  004DAA                     l1904:
 19080                           
 19081                           ; BSR set to: 0
 19082                           
 19083                           ; BSR set to: 0
 19084  004DAA  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 19085  004DAC  D7F8               	goto	l1905
 19086  004DAE                     u14330:
 19087                           
 19088                           ; BSR set to: 0
 19089                           
 19090                           ; BSR set to: 0
 19091                           
 19092                           ; BSR set to: 0
 19093  004DAE  90D8               	bcf	status,0,c
 19094  004DB0  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 19095  004DB2  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 19096  004DB4  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 19097  004DB6  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 19098                           
 19099                           ; BSR set to: 0
 19100  004DB8  5164               	movf	___lldiv@divisor& (0+255),w,b
 19101  004DBA  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 19102  004DBC  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19103  004DBE  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 19104  004DC0  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19105  004DC2  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 19106  004DC4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19107  004DC6  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 19108  004DC8  A0D8               	btfss	status,0,c
 19109  004DCA  D009               	goto	l1908
 19110                           
 19111                           ; BSR set to: 0
 19112  004DCC  5164               	movf	___lldiv@divisor& (0+255),w,b
 19113  004DCE  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 19114  004DD0  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19115  004DD2  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 19116  004DD4  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19117  004DD6  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 19118  004DD8  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19119  004DDA  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 19120                           
 19121                           ; BSR set to: 0
 19122  004DDC  8168               	bsf	___lldiv@quotient& (0+255),0,b
 19123  004DDE                     l1908:
 19124                           
 19125                           ; BSR set to: 0
 19126                           
 19127                           ; BSR set to: 0
 19128  004DDE  90D8               	bcf	status,0,c
 19129  004DE0  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 19130  004DE2  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 19131  004DE4  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 19132  004DE6  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 19133                           
 19134                           ; BSR set to: 0
 19135  004DE8  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 19136  004DEA  D7E1               	goto	u14330
 19137  004DEC                     l1909:
 19138                           
 19139                           ; BSR set to: 0
 19140                           
 19141                           ; BSR set to: 0
 19142  004DEC  C068  F060         	movff	___lldiv@quotient,?___lldiv
 19143  004DF0  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 19144  004DF4  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 19145  004DF8  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 19146                           
 19147                           ; BSR set to: 0
 19148  004DFC  0012               	return		;funcret
 19149  004DFE                     __end_of___lldiv:
 19150                           	opt stack 0
 19151                           tosu	equ	0xFFF
 19152                           tosh	equ	0xFFE
 19153                           tosl	equ	0xFFD
 19154                           pclath	equ	0xFFA
 19155                           tblptru	equ	0xFF8
 19156                           tblptrh	equ	0xFF7
 19157                           tblptrl	equ	0xFF6
 19158                           tablat	equ	0xFF5
 19159                           prodh	equ	0xFF4
 19160                           prodl	equ	0xFF3
 19161                           intcon	equ	0xFF2
 19162                           intcon2	equ	0xFF1
 19163                           intcon3	equ	0xFF0
 19164                           indf0	equ	0xFEF
 19165                           postinc0	equ	0xFEE
 19166                           fsr0h	equ	0xFEA
 19167                           fsr0l	equ	0xFE9
 19168                           wreg	equ	0xFE8
 19169                           indf1	equ	0xFE7
 19170                           postinc1	equ	0xFE6
 19171                           postdec1	equ	0xFE5
 19172                           plusw1	equ	0xFE3
 19173                           fsr1h	equ	0xFE2
 19174                           fsr1l	equ	0xFE1
 19175                           indf2	equ	0xFDF
 19176                           postinc2	equ	0xFDE
 19177                           postdec2	equ	0xFDD
 19178                           plusw2	equ	0xFDB
 19179                           fsr2h	equ	0xFDA
 19180                           fsr2l	equ	0xFD9
 19181                           status	equ	0xFD8
 19182                           
 19183 ;; *************** function _f_close *****************
 19184 ;; Defined at:
 19185 ;;		line 1108 in file "bibliotecas/tff.c"
 19186 ;; Parameters:    Size  Location     Type
 19187 ;;  fp              2   75[BANK0 ] PTR struct _FIL
 19188 ;;		 -> fil(28), 
 19189 ;; Auto vars:     Size  Location     Type
 19190 ;;  res             1   77[BANK0 ] enum E155
 19191 ;; Return value:  Size  Location     Type
 19192 ;;                  1    wreg      enum E3978
 19193 ;; Registers used:
 19194 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19195 ;; Tracked objects:
 19196 ;;		On entry : 0/0
 19197 ;;		On exit  : 0/0
 19198 ;;		Unchanged: 0/0
 19199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19200 ;;      Params:         0       2       0       0       0       0       0       0       0
 19201 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19202 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19203 ;;      Totals:         0       3       0       0       0       0       0       0       0
 19204 ;;Total ram usage:        3 bytes
 19205 ;; Hardware stack levels used:    1
 19206 ;; Hardware stack levels required when called:   11
 19207 ;; This function calls:
 19208 ;;		_f_sync
 19209 ;; This function is called by:
 19210 ;;		_escrita_sdcard
 19211 ;;		_sdcard_init
 19212 ;;		_leitura_sdcard
 19213 ;; This function uses a non-reentrant model
 19214 ;;
 19215                           
 19216                           	psect	text64
 19217  00566A                     __ptext64:
 19218                           	opt stack 0
 19219  00566A                     _f_close:
 19220                           	opt stack 16
 19221                           
 19222                           ;tff.c: 1112: FRESULT res;
 19223                           ;tff.c: 1116: res = f_sync(fp);
 19224                           
 19225                           ; BSR set to: 0
 19226                           ;incstack = 0
 19227  00566A  C0AB  F0A2         	movff	f_close@fp,f_sync@fp
 19228  00566E  C0AC  F0A3         	movff	f_close@fp+1,f_sync@fp+1
 19229  005672  EC78  F01F         	call	_f_sync	;wreg free
 19230  005676  0100               	movlb	0	; () banked
 19231  005678  6FAD               	movwf	f_close@res& (0+255),b
 19232                           
 19233                           ; BSR set to: 0
 19234                           ;tff.c: 1120: if (res == FR_OK) fp->fs = (0);
 19235  00567A  51AD               	movf	f_close@res& (0+255),w,b
 19236  00567C  A4D8               	btfss	status,2,c
 19237  00567E  0012               	return	
 19238                           
 19239                           ; BSR set to: 0
 19240  005680  EE20 F004          	lfsr	2,4
 19241  005684  51AB               	movf	f_close@fp& (0+255),w,b
 19242  005686  26D9               	addwf	fsr2l,f,c
 19243  005688  51AC               	movf	(f_close@fp+1)& (0+255),w,b
 19244  00568A  22DA               	addwfc	fsr2h,f,c
 19245  00568C  0E00               	movlw	0
 19246  00568E  6EDE               	movwf	postinc2,c
 19247  005690  0E00               	movlw	0
 19248  005692  6EDD               	movwf	postdec2,c
 19249                           
 19250                           ; BSR set to: 0
 19251  005694  0012               	return	
 19252  005696                     __end_of_f_close:
 19253                           	opt stack 0
 19254                           tosu	equ	0xFFF
 19255                           tosh	equ	0xFFE
 19256                           tosl	equ	0xFFD
 19257                           pclath	equ	0xFFA
 19258                           tblptru	equ	0xFF8
 19259                           tblptrh	equ	0xFF7
 19260                           tblptrl	equ	0xFF6
 19261                           tablat	equ	0xFF5
 19262                           prodh	equ	0xFF4
 19263                           prodl	equ	0xFF3
 19264                           intcon	equ	0xFF2
 19265                           intcon2	equ	0xFF1
 19266                           intcon3	equ	0xFF0
 19267                           indf0	equ	0xFEF
 19268                           postinc0	equ	0xFEE
 19269                           fsr0h	equ	0xFEA
 19270                           fsr0l	equ	0xFE9
 19271                           wreg	equ	0xFE8
 19272                           indf1	equ	0xFE7
 19273                           postinc1	equ	0xFE6
 19274                           postdec1	equ	0xFE5
 19275                           plusw1	equ	0xFE3
 19276                           fsr1h	equ	0xFE2
 19277                           fsr1l	equ	0xFE1
 19278                           indf2	equ	0xFDF
 19279                           postinc2	equ	0xFDE
 19280                           postdec2	equ	0xFDD
 19281                           plusw2	equ	0xFDB
 19282                           fsr2h	equ	0xFDA
 19283                           fsr2l	equ	0xFD9
 19284                           status	equ	0xFD8
 19285                           
 19286 ;; *************** function _f_sync *****************
 19287 ;; Defined at:
 19288 ;;		line 1069 in file "bibliotecas/tff.c"
 19289 ;; Parameters:    Size  Location     Type
 19290 ;;  fp              2   66[BANK0 ] PTR struct _FIL
 19291 ;;		 -> fil(28), 
 19292 ;; Auto vars:     Size  Location     Type
 19293 ;;  tim             4   68[BANK0 ] unsigned long 
 19294 ;;  dir             2   73[BANK0 ] PTR unsigned char 
 19295 ;;		 -> NULL(0), fs(544), 
 19296 ;;  res             1   72[BANK0 ] enum E155
 19297 ;; Return value:  Size  Location     Type
 19298 ;;                  1    wreg      enum E155
 19299 ;; Registers used:
 19300 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19301 ;; Tracked objects:
 19302 ;;		On entry : 0/0
 19303 ;;		On exit  : 0/0
 19304 ;;		Unchanged: 0/0
 19305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19306 ;;      Params:         0       2       0       0       0       0       0       0       0
 19307 ;;      Locals:         0       7       0       0       0       0       0       0       0
 19308 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19309 ;;      Totals:         0       9       0       0       0       0       0       0       0
 19310 ;;Total ram usage:        9 bytes
 19311 ;; Hardware stack levels used:    1
 19312 ;; Hardware stack levels required when called:   10
 19313 ;; This function calls:
 19314 ;;		_get_fattime
 19315 ;;		_move_window
 19316 ;;		_sync
 19317 ;;		_validate
 19318 ;; This function is called by:
 19319 ;;		_f_close
 19320 ;; This function uses a non-reentrant model
 19321 ;;
 19322                           
 19323                           	psect	text65
 19324  003EF0                     __ptext65:
 19325                           	opt stack 0
 19326  003EF0                     _f_sync:
 19327                           	opt stack 16
 19328                           
 19329                           ;tff.c: 1073: FRESULT res;
 19330                           ;tff.c: 1074: DWORD tim;
 19331                           ;tff.c: 1075: BYTE *dir;
 19332                           ;tff.c: 1078: res = validate(fp->fs, fp->id);
 19333                           
 19334                           ; BSR set to: 0
 19335                           ;incstack = 0
 19336  003EF0  0100               	movlb	0	; () banked
 19337  003EF2  EE20 F004          	lfsr	2,4
 19338  003EF6  51A2               	movf	f_sync@fp& (0+255),w,b
 19339  003EF8  26D9               	addwf	fsr2l,f,c
 19340  003EFA  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19341  003EFC  22DA               	addwfc	fsr2h,f,c
 19342  003EFE  CFDE F067          	movff	postinc2,validate@fs
 19343  003F02  CFDD F068          	movff	postdec2,validate@fs+1
 19344  003F06  C0A2  FFD9         	movff	f_sync@fp,fsr2l
 19345  003F0A  C0A3  FFDA         	movff	f_sync@fp+1,fsr2h
 19346  003F0E  CFDE F069          	movff	postinc2,validate@id
 19347  003F12  CFDD F06A          	movff	postdec2,validate@id+1
 19348  003F16  EC73  F029         	call	_validate	;wreg free
 19349  003F1A  0100               	movlb	0	; () banked
 19350  003F1C  6FA8               	movwf	f_sync@res& (0+255),b
 19351                           
 19352                           ; BSR set to: 0
 19353                           ;tff.c: 1079: if (res == FR_OK) {
 19354  003F1E  51A8               	movf	f_sync@res& (0+255),w,b
 19355  003F20  A4D8               	btfss	status,2,c
 19356  003F22  D079               	goto	l1359
 19357                           
 19358                           ; BSR set to: 0
 19359                           ;tff.c: 1080: if (fp->flag & 0x20) {
 19360  003F24  EE20 F002          	lfsr	2,2
 19361  003F28  51A2               	movf	f_sync@fp& (0+255),w,b
 19362  003F2A  26D9               	addwf	fsr2l,f,c
 19363  003F2C  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19364  003F2E  22DA               	addwfc	fsr2h,f,c
 19365  003F30  AADF               	btfss	indf2,5,c
 19366  003F32  D071               	goto	l1359
 19367                           
 19368                           ; BSR set to: 0
 19369                           ;tff.c: 1082: if (!move_window(fp->dir_sect))
 19370  003F34  EE20 F016          	lfsr	2,22
 19371  003F38  51A2               	movf	f_sync@fp& (0+255),w,b
 19372  003F3A  26D9               	addwf	fsr2l,f,c
 19373  003F3C  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19374  003F3E  22DA               	addwfc	fsr2h,f,c
 19375  003F40  CFDE F08B          	movff	postinc2,move_window@sector
 19376  003F44  CFDE F08C          	movff	postinc2,move_window@sector+1
 19377  003F48  CFDE F08D          	movff	postinc2,move_window@sector+2
 19378  003F4C  CFDE F08E          	movff	postinc2,move_window@sector+3
 19379  003F50  EC38  F01B         	call	_move_window	;wreg free
 19380  003F54  0900               	iorlw	0
 19381  003F56  A4D8               	btfss	status,2,c
 19382  003F58  D002               	goto	l1360
 19383                           
 19384                           ;tff.c: 1083: return FR_RW_ERROR;
 19385  003F5A  0E08               	movlw	8
 19386  003F5C  0012               	return	
 19387  003F5E                     l1360:
 19388                           
 19389                           ;tff.c: 1084: dir = fp->dir_ptr;
 19390  003F5E  0100               	movlb	0	; () banked
 19391  003F60  EE20 F01A          	lfsr	2,26
 19392  003F64  51A2               	movf	f_sync@fp& (0+255),w,b
 19393  003F66  26D9               	addwf	fsr2l,f,c
 19394  003F68  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19395  003F6A  22DA               	addwfc	fsr2h,f,c
 19396  003F6C  CFDE F0A9          	movff	postinc2,f_sync@dir
 19397  003F70  CFDD F0AA          	movff	postdec2,f_sync@dir+1
 19398                           
 19399                           ;tff.c: 1085: dir[11] |= 0x20;
 19400  003F74  EE20 F00B          	lfsr	2,11
 19401  003F78  51A9               	movf	f_sync@dir& (0+255),w,b
 19402  003F7A  26D9               	addwf	fsr2l,f,c
 19403  003F7C  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 19404  003F7E  22DA               	addwfc	fsr2h,f,c
 19405  003F80  0E00               	movlw	0
 19406  003F82  8ADB               	bsf	plusw2,5,c
 19407                           
 19408                           ; BSR set to: 0
 19409                           ;tff.c: 1086: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 19410  003F84  EE20 F00A          	lfsr	2,10
 19411  003F88  51A2               	movf	f_sync@fp& (0+255),w,b
 19412  003F8A  26D9               	addwf	fsr2l,f,c
 19413  003F8C  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19414  003F8E  22DA               	addwfc	fsr2h,f,c
 19415  003F90  EE10 F01C          	lfsr	1,28
 19416  003F94  51A9               	movf	f_sync@dir& (0+255),w,b
 19417  003F96  26E1               	addwf	fsr1l,f,c
 19418  003F98  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 19419  003F9A  22E2               	addwfc	fsr1h,f,c
 19420  003F9C  CFDE FFE6          	movff	postinc2,postinc1
 19421  003FA0  CFDE FFE6          	movff	postinc2,postinc1
 19422  003FA4  CFDE FFE6          	movff	postinc2,postinc1
 19423  003FA8  CFDE FFE6          	movff	postinc2,postinc1
 19424                           
 19425                           ; BSR set to: 0
 19426                           ;tff.c: 1087: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 19427  003FAC  EE20 F00E          	lfsr	2,14
 19428  003FB0  51A2               	movf	f_sync@fp& (0+255),w,b
 19429  003FB2  26D9               	addwf	fsr2l,f,c
 19430  003FB4  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19431  003FB6  22DA               	addwfc	fsr2h,f,c
 19432  003FB8  EE10 F01A          	lfsr	1,26
 19433  003FBC  51A9               	movf	f_sync@dir& (0+255),w,b
 19434  003FBE  26E1               	addwf	fsr1l,f,c
 19435  003FC0  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 19436  003FC2  22E2               	addwfc	fsr1h,f,c
 19437  003FC4  CFDE FFE6          	movff	postinc2,postinc1
 19438  003FC8  CFDD FFE5          	movff	postdec2,postdec1
 19439                           
 19440                           ; BSR set to: 0
 19441                           ;tff.c: 1091: tim = get_fattime();
 19442  003FCC  EC0D  F020         	call	_get_fattime	;wreg free
 19443  003FD0  C060  F0A4         	movff	?_get_fattime,f_sync@tim
 19444  003FD4  C061  F0A5         	movff	?_get_fattime+1,f_sync@tim+1
 19445  003FD8  C062  F0A6         	movff	?_get_fattime+2,f_sync@tim+2
 19446  003FDC  C063  F0A7         	movff	?_get_fattime+3,f_sync@tim+3
 19447                           
 19448                           ;tff.c: 1092: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 19449  003FE0  0100               	movlb	0	; () banked
 19450  003FE2  EE20 F016          	lfsr	2,22
 19451  003FE6  51A9               	movf	f_sync@dir& (0+255),w,b
 19452  003FE8  26D9               	addwf	fsr2l,f,c
 19453  003FEA  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 19454  003FEC  22DA               	addwfc	fsr2h,f,c
 19455  003FEE  C0A4  FFDE         	movff	f_sync@tim,postinc2
 19456  003FF2  C0A5  FFDE         	movff	f_sync@tim+1,postinc2
 19457  003FF6  C0A6  FFDE         	movff	f_sync@tim+2,postinc2
 19458  003FFA  C0A7  FFDE         	movff	f_sync@tim+3,postinc2
 19459                           
 19460                           ; BSR set to: 0
 19461                           ;tff.c: 1093: fp->flag &= (BYTE)~0x20;
 19462  003FFE  EE20 F002          	lfsr	2,2
 19463  004002  51A2               	movf	f_sync@fp& (0+255),w,b
 19464  004004  26D9               	addwf	fsr2l,f,c
 19465  004006  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19466  004008  22DA               	addwfc	fsr2h,f,c
 19467  00400A  0EDF               	movlw	223
 19468  00400C  16DF               	andwf	indf2,f,c
 19469                           
 19470                           ; BSR set to: 0
 19471                           ;tff.c: 1094: res = sync();
 19472  00400E  EC4E  F028         	call	_sync	;wreg free
 19473  004012  0100               	movlb	0	; () banked
 19474  004014  6FA8               	movwf	f_sync@res& (0+255),b
 19475  004016                     l1359:
 19476                           
 19477                           ; BSR set to: 0
 19478                           ;tff.c: 1095: }
 19479                           ;tff.c: 1096: }
 19480                           ;tff.c: 1097: return res;
 19481                           
 19482                           ; BSR set to: 0
 19483                           
 19484                           ; BSR set to: 0
 19485  004016  51A8               	movf	f_sync@res& (0+255),w,b
 19486  004018  0012               	return	
 19487  00401A                     __end_of_f_sync:
 19488                           	opt stack 0
 19489                           tosu	equ	0xFFF
 19490                           tosh	equ	0xFFE
 19491                           tosl	equ	0xFFD
 19492                           pclath	equ	0xFFA
 19493                           tblptru	equ	0xFF8
 19494                           tblptrh	equ	0xFF7
 19495                           tblptrl	equ	0xFF6
 19496                           tablat	equ	0xFF5
 19497                           prodh	equ	0xFF4
 19498                           prodl	equ	0xFF3
 19499                           intcon	equ	0xFF2
 19500                           intcon2	equ	0xFF1
 19501                           intcon3	equ	0xFF0
 19502                           indf0	equ	0xFEF
 19503                           postinc0	equ	0xFEE
 19504                           fsr0h	equ	0xFEA
 19505                           fsr0l	equ	0xFE9
 19506                           wreg	equ	0xFE8
 19507                           indf1	equ	0xFE7
 19508                           postinc1	equ	0xFE6
 19509                           postdec1	equ	0xFE5
 19510                           plusw1	equ	0xFE3
 19511                           fsr1h	equ	0xFE2
 19512                           fsr1l	equ	0xFE1
 19513                           indf2	equ	0xFDF
 19514                           postinc2	equ	0xFDE
 19515                           postdec2	equ	0xFDD
 19516                           plusw2	equ	0xFDB
 19517                           fsr2h	equ	0xFDA
 19518                           fsr2l	equ	0xFD9
 19519                           status	equ	0xFD8
 19520                           
 19521 ;; *************** function _validate *****************
 19522 ;; Defined at:
 19523 ;;		line 766 in file "bibliotecas/tff.c"
 19524 ;; Parameters:    Size  Location     Type
 19525 ;;  fs              2    7[BANK0 ] PTR const struct _FATFS
 19526 ;;		 -> NULL(0), fs(544), 
 19527 ;;  id              2    9[BANK0 ] unsigned short 
 19528 ;; Auto vars:     Size  Location     Type
 19529 ;;		None
 19530 ;; Return value:  Size  Location     Type
 19531 ;;                  1    wreg      enum E155
 19532 ;; Registers used:
 19533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19534 ;; Tracked objects:
 19535 ;;		On entry : 0/0
 19536 ;;		On exit  : 0/0
 19537 ;;		Unchanged: 0/0
 19538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19539 ;;      Params:         0       4       0       0       0       0       0       0       0
 19540 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19541 ;;      Temps:          0       2       0       0       0       0       0       0       0
 19542 ;;      Totals:         0       6       0       0       0       0       0       0       0
 19543 ;;Total ram usage:        6 bytes
 19544 ;; Hardware stack levels used:    1
 19545 ;; Hardware stack levels required when called:    5
 19546 ;; This function calls:
 19547 ;;		_disk_status
 19548 ;; This function is called by:
 19549 ;;		_f_write
 19550 ;;		_f_sync
 19551 ;;		_f_lseek
 19552 ;;		_f_read
 19553 ;;		_f_readdir
 19554 ;; This function uses a non-reentrant model
 19555 ;;
 19556                           
 19557                           	psect	text66
 19558  0052E6                     __ptext66:
 19559                           	opt stack 0
 19560  0052E6                     _validate:
 19561                           	opt stack 18
 19562                           
 19563                           ;tff.c: 771: if (!fs || !fs->fs_type || fs->id != id)
 19564                           
 19565                           ;incstack = 0
 19566  0052E6  0100               	movlb	0	; () banked
 19567  0052E8  5167               	movf	validate@fs& (0+255),w,b
 19568  0052EA  1168               	iorwf	(validate@fs+1)& (0+255),w,b
 19569  0052EC  B4D8               	btfsc	status,2,c
 19570  0052EE  D014               	goto	u13230
 19571                           
 19572                           ; BSR set to: 0
 19573  0052F0  EE20 F01C          	lfsr	2,28
 19574  0052F4  5167               	movf	validate@fs& (0+255),w,b
 19575  0052F6  26D9               	addwf	fsr2l,f,c
 19576  0052F8  5168               	movf	(validate@fs+1)& (0+255),w,b
 19577  0052FA  22DA               	addwfc	fsr2h,f,c
 19578  0052FC  50DF               	movf	indf2,w,c
 19579  0052FE  B4D8               	btfsc	status,2,c
 19580  005300  D00B               	goto	u13230
 19581                           
 19582                           ; BSR set to: 0
 19583  005302  C067  FFD9         	movff	validate@fs,fsr2l
 19584  005306  C068  FFDA         	movff	validate@fs+1,fsr2h
 19585  00530A  5169               	movf	validate@id& (0+255),w,b
 19586  00530C  18DE               	xorwf	postinc2,w,c
 19587  00530E  E104               	bnz	l10264
 19588  005310  516A               	movf	(validate@id+1)& (0+255),w,b
 19589  005312  18DE               	xorwf	postinc2,w,c
 19590  005314  B4D8               	btfsc	status,2,c
 19591  005316  D002               	goto	l1263
 19592  005318                     u13230:
 19593  005318                     l10264:
 19594                           
 19595                           ; BSR set to: 0
 19596                           ;tff.c: 772: return FR_INVALID_OBJECT;
 19597  005318  0E0C               	movlw	12
 19598                           
 19599                           ; BSR set to: 0
 19600  00531A  0012               	return	
 19601  00531C                     l1263:
 19602                           
 19603                           ; BSR set to: 0
 19604                           ;tff.c: 773: if (disk_status(0) & 0x01)
 19605                           
 19606                           ; BSR set to: 0
 19607  00531C  0E00               	movlw	0
 19608  00531E  ECBD  F029         	call	_disk_status
 19609  005322  0100               	movlb	0	; () banked
 19610  005324  6F6B               	movwf	??_validate& (0+255),b
 19611  005326  A16B               	btfss	??_validate& (0+255),0,b
 19612  005328  D002               	goto	l1267
 19613                           
 19614                           ; BSR set to: 0
 19615                           ;tff.c: 774: return FR_NOT_READY;
 19616  00532A  0E01               	movlw	1
 19617                           
 19618                           ; BSR set to: 0
 19619  00532C  0012               	return	
 19620  00532E                     l1267:
 19621                           
 19622                           ; BSR set to: 0
 19623                           ;tff.c: 776: return FR_OK;
 19624                           
 19625                           ; BSR set to: 0
 19626  00532E  0E00               	movlw	0
 19627  005330  0012               	return	
 19628  005332                     __end_of_validate:
 19629                           	opt stack 0
 19630                           tosu	equ	0xFFF
 19631                           tosh	equ	0xFFE
 19632                           tosl	equ	0xFFD
 19633                           pclath	equ	0xFFA
 19634                           tblptru	equ	0xFF8
 19635                           tblptrh	equ	0xFF7
 19636                           tblptrl	equ	0xFF6
 19637                           tablat	equ	0xFF5
 19638                           prodh	equ	0xFF4
 19639                           prodl	equ	0xFF3
 19640                           intcon	equ	0xFF2
 19641                           intcon2	equ	0xFF1
 19642                           intcon3	equ	0xFF0
 19643                           indf0	equ	0xFEF
 19644                           postinc0	equ	0xFEE
 19645                           fsr0h	equ	0xFEA
 19646                           fsr0l	equ	0xFE9
 19647                           wreg	equ	0xFE8
 19648                           indf1	equ	0xFE7
 19649                           postinc1	equ	0xFE6
 19650                           postdec1	equ	0xFE5
 19651                           plusw1	equ	0xFE3
 19652                           fsr1h	equ	0xFE2
 19653                           fsr1l	equ	0xFE1
 19654                           indf2	equ	0xFDF
 19655                           postinc2	equ	0xFDE
 19656                           postdec2	equ	0xFDD
 19657                           plusw2	equ	0xFDB
 19658                           fsr2h	equ	0xFDA
 19659                           fsr2l	equ	0xFD9
 19660                           status	equ	0xFD8
 19661                           
 19662 ;; *************** function _disk_status *****************
 19663 ;; Defined at:
 19664 ;;		line 27 in file "bibliotecas/diskio.c"
 19665 ;; Parameters:    Size  Location     Type
 19666 ;;  pdrv            1    wreg     unsigned char 
 19667 ;; Auto vars:     Size  Location     Type
 19668 ;;  pdrv            1    5[BANK0 ] unsigned char 
 19669 ;;  result          2    3[BANK0 ] int 
 19670 ;;  stat            1    6[BANK0 ] unsigned char 
 19671 ;; Return value:  Size  Location     Type
 19672 ;;                  1    wreg      unsigned char 
 19673 ;; Registers used:
 19674 ;;		wreg, status,2, status,0, cstack
 19675 ;; Tracked objects:
 19676 ;;		On entry : 0/0
 19677 ;;		On exit  : 0/0
 19678 ;;		Unchanged: 0/0
 19679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19680 ;;      Params:         0       0       0       0       0       0       0       0       0
 19681 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19682 ;;      Temps:          0       1       0       0       0       0       0       0       0
 19683 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19684 ;;Total ram usage:        5 bytes
 19685 ;; Hardware stack levels used:    1
 19686 ;; Hardware stack levels required when called:    4
 19687 ;; This function calls:
 19688 ;;		_sdc_disk_status
 19689 ;; This function is called by:
 19690 ;;		_auto_mount
 19691 ;;		_validate
 19692 ;; This function uses a non-reentrant model
 19693 ;;
 19694                           
 19695                           	psect	text67
 19696  00537A                     __ptext67:
 19697                           	opt stack 0
 19698  00537A                     _disk_status:
 19699                           	opt stack 18
 19700                           
 19701                           ; BSR set to: 0
 19702                           ;incstack = 0
 19703                           ;disk_status@pdrv stored from wreg
 19704  00537A  0100               	movlb	0	; () banked
 19705  00537C  6F65               	movwf	disk_status@pdrv& (0+255),b
 19706                           
 19707                           ;diskio.c: 31: DSTATUS stat;
 19708                           ;diskio.c: 32: int result;
 19709                           ;diskio.c: 34: switch (pdrv) {
 19710  00537E  D014               	goto	l543
 19711  005380                     
 19712                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 19713  005380  0100               	movlb	0	; () banked
 19714  005382  5165               	movf	disk_status@pdrv& (0+255),w,b
 19715  005384  ECD9  F02B         	call	_sdc_disk_status
 19716  005388  0100               	movlb	0	; () banked
 19717  00538A  6F66               	movwf	disk_status@stat& (0+255),b
 19718                           
 19719                           ; BSR set to: 0
 19720                           ;diskio.c: 39: return stat;
 19721  00538C  5166               	movf	disk_status@stat& (0+255),w,b
 19722                           
 19723                           ; BSR set to: 0
 19724  00538E  0012               	return	
 19725  005390                     
 19726                           ; BSR set to: 0
 19727                           ;diskio.c: 42: result = sdc_disk_status(pdrv);
 19728                           
 19729                           ; BSR set to: 0
 19730  005390  5165               	movf	disk_status@pdrv& (0+255),w,b
 19731  005392  ECD9  F02B         	call	_sdc_disk_status
 19732  005396  0100               	movlb	0	; () banked
 19733  005398  6F62               	movwf	??_disk_status& (0+255),b
 19734  00539A  5162               	movf	??_disk_status& (0+255),w,b
 19735  00539C  6F63               	movwf	disk_status@result& (0+255),b
 19736  00539E  6B64               	clrf	(disk_status@result+1)& (0+255),b
 19737                           
 19738                           ; BSR set to: 0
 19739                           ;diskio.c: 44: return stat;
 19740  0053A0  5166               	movf	disk_status@stat& (0+255),w,b
 19741                           
 19742                           ; BSR set to: 0
 19743  0053A2  0012               	return	
 19744  0053A4                     
 19745                           ; BSR set to: 0
 19746                           ;diskio.c: 48: return stat;
 19747                           
 19748                           ; BSR set to: 0
 19749  0053A4  5166               	movf	disk_status@stat& (0+255),w,b
 19750                           
 19751                           ; BSR set to: 0
 19752  0053A6  0012               	return	
 19753  0053A8                     l543:
 19754                           
 19755                           ; BSR set to: 0
 19756  0053A8  0100               	movlb	0	; () banked
 19757  0053AA  5165               	movf	disk_status@pdrv& (0+255),w,b
 19758                           
 19759                           ; Switch size 1, requested type "space"
 19760                           ; Number of cases is 3, Range of values is 0 to 2
 19761                           ; switch strategies available:
 19762                           ; Name         Instructions Cycles
 19763                           ; simple_byte           10     6 (average)
 19764                           ;	Chosen strategy is simple_byte
 19765  0053AC  0A00               	xorlw	0	; case 0
 19766  0053AE  B4D8               	btfsc	status,2,c
 19767  0053B0  D7E7               	goto	l544
 19768  0053B2  0A01               	xorlw	1	; case 1
 19769  0053B4  B4D8               	btfsc	status,2,c
 19770  0053B6  D7EC               	goto	l546
 19771  0053B8  0A03               	xorlw	3	; case 2
 19772  0053BA  B4D8               	btfsc	status,2,c
 19773  0053BC  D7F3               	goto	l547
 19774                           
 19775                           ; BSR set to: 0
 19776                           ;diskio.c: 50: return 0x01;
 19777                           
 19778                           ; BSR set to: 0
 19779  0053BE  0E01               	movlw	1
 19780  0053C0  0012               	return	
 19781  0053C2                     __end_of_disk_status:
 19782                           	opt stack 0
 19783                           tosu	equ	0xFFF
 19784                           tosh	equ	0xFFE
 19785                           tosl	equ	0xFFD
 19786                           pclath	equ	0xFFA
 19787                           tblptru	equ	0xFF8
 19788                           tblptrh	equ	0xFF7
 19789                           tblptrl	equ	0xFF6
 19790                           tablat	equ	0xFF5
 19791                           prodh	equ	0xFF4
 19792                           prodl	equ	0xFF3
 19793                           intcon	equ	0xFF2
 19794                           intcon2	equ	0xFF1
 19795                           intcon3	equ	0xFF0
 19796                           indf0	equ	0xFEF
 19797                           postinc0	equ	0xFEE
 19798                           fsr0h	equ	0xFEA
 19799                           fsr0l	equ	0xFE9
 19800                           wreg	equ	0xFE8
 19801                           indf1	equ	0xFE7
 19802                           postinc1	equ	0xFE6
 19803                           postdec1	equ	0xFE5
 19804                           plusw1	equ	0xFE3
 19805                           fsr1h	equ	0xFE2
 19806                           fsr1l	equ	0xFE1
 19807                           indf2	equ	0xFDF
 19808                           postinc2	equ	0xFDE
 19809                           postdec2	equ	0xFDD
 19810                           plusw2	equ	0xFDB
 19811                           fsr2h	equ	0xFDA
 19812                           fsr2l	equ	0xFD9
 19813                           status	equ	0xFD8
 19814                           
 19815 ;; *************** function _sdc_disk_status *****************
 19816 ;; Defined at:
 19817 ;;		line 588 in file "bibliotecas/diskio.c"
 19818 ;; Parameters:    Size  Location     Type
 19819 ;;  pdrv            1    wreg     unsigned char 
 19820 ;; Auto vars:     Size  Location     Type
 19821 ;;  pdrv            1    1[BANK0 ] unsigned char 
 19822 ;;  stat            1    0[BANK0 ] unsigned char 
 19823 ;;  cont            1    0        unsigned char 
 19824 ;;  buff            1    0        unsigned char 
 19825 ;; Return value:  Size  Location     Type
 19826 ;;                  1    wreg      unsigned char 
 19827 ;; Registers used:
 19828 ;;		wreg, status,2
 19829 ;; Tracked objects:
 19830 ;;		On entry : 0/0
 19831 ;;		On exit  : 0/0
 19832 ;;		Unchanged: 0/0
 19833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19834 ;;      Params:         0       0       0       0       0       0       0       0       0
 19835 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19836 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19837 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19838 ;;Total ram usage:        2 bytes
 19839 ;; Hardware stack levels used:    1
 19840 ;; Hardware stack levels required when called:    3
 19841 ;; This function calls:
 19842 ;;		Nothing
 19843 ;; This function is called by:
 19844 ;;		_disk_status
 19845 ;; This function uses a non-reentrant model
 19846 ;;
 19847                           
 19848                           	psect	text68
 19849  0057B2                     __ptext68:
 19850                           	opt stack 0
 19851  0057B2                     _sdc_disk_status:
 19852                           	opt stack 18
 19853                           
 19854                           ; BSR set to: 0
 19855                           ;incstack = 0
 19856                           ;sdc_disk_status@pdrv stored from wreg
 19857  0057B2  0100               	movlb	0	; () banked
 19858  0057B4  6F61               	movwf	sdc_disk_status@pdrv& (0+255),b
 19859                           
 19860                           ;diskio.c: 590: DSTATUS stat = 0;
 19861  0057B6  0E00               	movlw	0
 19862  0057B8  0100               	movlb	0	; () banked
 19863  0057BA  6F60               	movwf	sdc_disk_status@stat& (0+255),b
 19864                           
 19865                           ; BSR set to: 0
 19866                           ;diskio.c: 591: unsigned char buff, cont;
 19867                           ;diskio.c: 593: if (pdrv != 0) return 0x01;
 19868  0057BC  5161               	movf	sdc_disk_status@pdrv& (0+255),w,b
 19869  0057BE  B4D8               	btfsc	status,2,c
 19870  0057C0  D002               	goto	l669
 19871                           
 19872                           ; BSR set to: 0
 19873  0057C2  0E01               	movlw	1
 19874                           
 19875                           ; BSR set to: 0
 19876  0057C4  0012               	return	
 19877  0057C6                     l669:
 19878                           
 19879                           ; BSR set to: 0
 19880                           ;diskio.c: 595: return FR_OK;
 19881                           
 19882                           ; BSR set to: 0
 19883  0057C6  0E00               	movlw	0
 19884  0057C8  0012               	return	
 19885  0057CA                     __end_of_sdc_disk_status:
 19886                           	opt stack 0
 19887                           tosu	equ	0xFFF
 19888                           tosh	equ	0xFFE
 19889                           tosl	equ	0xFFD
 19890                           pclath	equ	0xFFA
 19891                           tblptru	equ	0xFF8
 19892                           tblptrh	equ	0xFF7
 19893                           tblptrl	equ	0xFF6
 19894                           tablat	equ	0xFF5
 19895                           prodh	equ	0xFF4
 19896                           prodl	equ	0xFF3
 19897                           intcon	equ	0xFF2
 19898                           intcon2	equ	0xFF1
 19899                           intcon3	equ	0xFF0
 19900                           indf0	equ	0xFEF
 19901                           postinc0	equ	0xFEE
 19902                           fsr0h	equ	0xFEA
 19903                           fsr0l	equ	0xFE9
 19904                           wreg	equ	0xFE8
 19905                           indf1	equ	0xFE7
 19906                           postinc1	equ	0xFE6
 19907                           postdec1	equ	0xFE5
 19908                           plusw1	equ	0xFE3
 19909                           fsr1h	equ	0xFE2
 19910                           fsr1l	equ	0xFE1
 19911                           indf2	equ	0xFDF
 19912                           postinc2	equ	0xFDE
 19913                           postdec2	equ	0xFDD
 19914                           plusw2	equ	0xFDB
 19915                           fsr2h	equ	0xFDA
 19916                           fsr2l	equ	0xFD9
 19917                           status	equ	0xFD8
 19918                           
 19919 ;; *************** function _sync *****************
 19920 ;; Defined at:
 19921 ;;		line 118 in file "bibliotecas/tff.c"
 19922 ;; Parameters:    Size  Location     Type
 19923 ;;		None
 19924 ;; Auto vars:     Size  Location     Type
 19925 ;;  fs              2   64[BANK0 ] PTR struct _FATFS
 19926 ;;		 -> NULL(0), fs(544), 
 19927 ;; Return value:  Size  Location     Type
 19928 ;;                  1    wreg      enum E155
 19929 ;; Registers used:
 19930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19931 ;; Tracked objects:
 19932 ;;		On entry : 0/0
 19933 ;;		On exit  : 0/0
 19934 ;;		Unchanged: 0/0
 19935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19936 ;;      Params:         0       0       0       0       0       0       0       0       0
 19937 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19938 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19939 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19940 ;;Total ram usage:        2 bytes
 19941 ;; Hardware stack levels used:    1
 19942 ;; Hardware stack levels required when called:    9
 19943 ;; This function calls:
 19944 ;;		_disk_ioctl
 19945 ;;		_move_window
 19946 ;; This function is called by:
 19947 ;;		_f_sync
 19948 ;; This function uses a non-reentrant model
 19949 ;;
 19950                           
 19951                           	psect	text69
 19952  00509C                     __ptext69:
 19953                           	opt stack 0
 19954  00509C                     _sync:
 19955                           	opt stack 16
 19956                           
 19957                           ;tff.c: 120: FATFS *fs = FatFs;
 19958                           
 19959                           ; BSR set to: 0
 19960                           ;incstack = 0
 19961  00509C  C0F7  F0A0         	movff	_FatFs,sync@fs
 19962  0050A0  C0F8  F0A1         	movff	_FatFs+1,sync@fs+1
 19963                           
 19964                           ;tff.c: 123: fs->winflag = 1;
 19965  0050A4  0100               	movlb	0	; () banked
 19966  0050A6  EE20 F01F          	lfsr	2,31
 19967  0050AA  51A0               	movf	sync@fs& (0+255),w,b
 19968  0050AC  26D9               	addwf	fsr2l,f,c
 19969  0050AE  51A1               	movf	(sync@fs+1)& (0+255),w,b
 19970  0050B0  22DA               	addwfc	fsr2h,f,c
 19971  0050B2  0E01               	movlw	1
 19972  0050B4  6EDF               	movwf	indf2,c
 19973                           
 19974                           ; BSR set to: 0
 19975                           ;tff.c: 124: if (!move_window(0)) return FR_RW_ERROR;
 19976  0050B6  0E00               	movlw	0
 19977  0050B8  6F8B               	movwf	move_window@sector& (0+255),b
 19978  0050BA  0E00               	movlw	0
 19979  0050BC  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 19980  0050BE  0E00               	movlw	0
 19981  0050C0  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 19982  0050C2  0E00               	movlw	0
 19983  0050C4  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 19984  0050C6  EC38  F01B         	call	_move_window	;wreg free
 19985  0050CA  0900               	iorlw	0
 19986  0050CC  A4D8               	btfss	status,2,c
 19987  0050CE  D002               	goto	l1042
 19988  0050D0  0E08               	movlw	8
 19989  0050D2  0012               	return	
 19990  0050D4                     l1042:
 19991                           
 19992                           ;tff.c: 140: if (disk_ioctl(0, 0, (0)) != RES_OK)
 19993  0050D4  0E00               	movlw	0
 19994  0050D6  0100               	movlb	0	; () banked
 19995  0050D8  6F60               	movwf	disk_ioctl@cmd& (0+255),b
 19996  0050DA  0E00               	movlw	0
 19997  0050DC  6F61               	movwf	disk_ioctl@buff& (0+255),b
 19998  0050DE  0E00               	movlw	0
 19999  0050E0  6F62               	movwf	(disk_ioctl@buff+1)& (0+255),b
 20000  0050E2  0E00               	movlw	0
 20001  0050E4  EC4B  F02B         	call	_disk_ioctl
 20002  0050E8  0900               	iorlw	0
 20003  0050EA  B4D8               	btfsc	status,2,c
 20004  0050EC  D002               	goto	l1044
 20005                           
 20006                           ;tff.c: 141: return FR_RW_ERROR;
 20007  0050EE  0E08               	movlw	8
 20008  0050F0  0012               	return	
 20009  0050F2                     l1044:
 20010                           
 20011                           ;tff.c: 142: return FR_OK;
 20012  0050F2  0E00               	movlw	0
 20013  0050F4  0012               	return	
 20014  0050F6                     __end_of_sync:
 20015                           	opt stack 0
 20016                           tosu	equ	0xFFF
 20017                           tosh	equ	0xFFE
 20018                           tosl	equ	0xFFD
 20019                           pclath	equ	0xFFA
 20020                           tblptru	equ	0xFF8
 20021                           tblptrh	equ	0xFF7
 20022                           tblptrl	equ	0xFF6
 20023                           tablat	equ	0xFF5
 20024                           prodh	equ	0xFF4
 20025                           prodl	equ	0xFF3
 20026                           intcon	equ	0xFF2
 20027                           intcon2	equ	0xFF1
 20028                           intcon3	equ	0xFF0
 20029                           indf0	equ	0xFEF
 20030                           postinc0	equ	0xFEE
 20031                           fsr0h	equ	0xFEA
 20032                           fsr0l	equ	0xFE9
 20033                           wreg	equ	0xFE8
 20034                           indf1	equ	0xFE7
 20035                           postinc1	equ	0xFE6
 20036                           postdec1	equ	0xFE5
 20037                           plusw1	equ	0xFE3
 20038                           fsr1h	equ	0xFE2
 20039                           fsr1l	equ	0xFE1
 20040                           indf2	equ	0xFDF
 20041                           postinc2	equ	0xFDE
 20042                           postdec2	equ	0xFDD
 20043                           plusw2	equ	0xFDB
 20044                           fsr2h	equ	0xFDA
 20045                           fsr2l	equ	0xFD9
 20046                           status	equ	0xFD8
 20047                           
 20048 ;; *************** function _move_window *****************
 20049 ;; Defined at:
 20050 ;;		line 76 in file "bibliotecas/tff.c"
 20051 ;; Parameters:    Size  Location     Type
 20052 ;;  sector          4   43[BANK0 ] unsigned long 
 20053 ;; Auto vars:     Size  Location     Type
 20054 ;;  n               1   57[BANK0 ] unsigned char 
 20055 ;;  wsect           4   58[BANK0 ] unsigned long 
 20056 ;;  fs              2   62[BANK0 ] PTR struct _FATFS
 20057 ;;		 -> NULL(0), fs(544), 
 20058 ;; Return value:  Size  Location     Type
 20059 ;;                  1    wreg      enum E105
 20060 ;; Registers used:
 20061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20062 ;; Tracked objects:
 20063 ;;		On entry : 0/0
 20064 ;;		On exit  : 0/0
 20065 ;;		Unchanged: 0/0
 20066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20067 ;;      Params:         0       4       0       0       0       0       0       0       0
 20068 ;;      Locals:         0       7       0       0       0       0       0       0       0
 20069 ;;      Temps:          0      10       0       0       0       0       0       0       0
 20070 ;;      Totals:         0      21       0       0       0       0       0       0       0
 20071 ;;Total ram usage:       21 bytes
 20072 ;; Hardware stack levels used:    1
 20073 ;; Hardware stack levels required when called:    8
 20074 ;; This function calls:
 20075 ;;		_disk_read
 20076 ;;		_disk_write
 20077 ;; This function is called by:
 20078 ;;		_sync
 20079 ;;		_get_cluster
 20080 ;;		_put_cluster
 20081 ;;		_trace_path
 20082 ;;		_reserve_direntry
 20083 ;;		_f_open
 20084 ;;		_f_write
 20085 ;;		_f_sync
 20086 ;;		_f_read
 20087 ;;		_f_readdir
 20088 ;; This function uses a non-reentrant model
 20089 ;;
 20090                           
 20091                           	psect	text70
 20092  003670                     __ptext70:
 20093                           	opt stack 0
 20094  003670                     _move_window:
 20095                           	opt stack 15
 20096                           
 20097                           ;tff.c: 80: DWORD wsect;
 20098                           ;tff.c: 81: FATFS *fs = FatFs;
 20099                           
 20100                           ;incstack = 0
 20101  003670  C0F7  F09E         	movff	_FatFs,move_window@fs
 20102  003674  C0F8  F09F         	movff	_FatFs+1,move_window@fs+1
 20103                           
 20104                           ;tff.c: 84: wsect = fs->winsect;
 20105  003678  0100               	movlb	0	; () banked
 20106  00367A  EE20 F004          	lfsr	2,4
 20107  00367E  519E               	movf	move_window@fs& (0+255),w,b
 20108  003680  26D9               	addwf	fsr2l,f,c
 20109  003682  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20110  003684  22DA               	addwfc	fsr2h,f,c
 20111  003686  CFDE F09A          	movff	postinc2,move_window@wsect
 20112  00368A  CFDE F09B          	movff	postinc2,move_window@wsect+1
 20113  00368E  CFDE F09C          	movff	postinc2,move_window@wsect+2
 20114  003692  CFDE F09D          	movff	postinc2,move_window@wsect+3
 20115                           
 20116                           ; BSR set to: 0
 20117                           ;tff.c: 85: if (wsect != sector) {
 20118  003696  518B               	movf	move_window@sector& (0+255),w,b
 20119  003698  199A               	xorwf	move_window@wsect& (0+255),w,b
 20120  00369A  E10A               	bnz	u12710
 20121  00369C  518C               	movf	(move_window@sector+1)& (0+255),w,b
 20122  00369E  199B               	xorwf	(move_window@wsect+1)& (0+255),w,b
 20123  0036A0  E107               	bnz	u12710
 20124  0036A2  518D               	movf	(move_window@sector+2)& (0+255),w,b
 20125  0036A4  199C               	xorwf	(move_window@wsect+2)& (0+255),w,b
 20126  0036A6  E104               	bnz	u12710
 20127  0036A8  518E               	movf	(move_window@sector+3)& (0+255),w,b
 20128  0036AA  199D               	xorwf	(move_window@wsect+3)& (0+255),w,b
 20129  0036AC  B4D8               	btfsc	status,2,c
 20130  0036AE  D0B9               	goto	l1038
 20131  0036B0                     u12710:
 20132                           
 20133                           ; BSR set to: 0
 20134                           ;tff.c: 87: BYTE n;
 20135                           ;tff.c: 88: if (fs->winflag) {
 20136  0036B0  EE20 F01F          	lfsr	2,31
 20137  0036B4  519E               	movf	move_window@fs& (0+255),w,b
 20138  0036B6  26D9               	addwf	fsr2l,f,c
 20139  0036B8  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20140  0036BA  22DA               	addwfc	fsr2h,f,c
 20141  0036BC  50DF               	movf	indf2,w,c
 20142  0036BE  B4D8               	btfsc	status,2,c
 20143  0036C0  D083               	goto	u12760
 20144                           
 20145                           ; BSR set to: 0
 20146                           ;tff.c: 89: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 20147  0036C2  0E20               	movlw	32
 20148  0036C4  259E               	addwf	move_window@fs& (0+255),w,b
 20149  0036C6  6F7F               	movwf	disk_write@buff& (0+255),b
 20150  0036C8  0E00               	movlw	0
 20151  0036CA  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 20152  0036CC  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 20153  0036CE  C09A  F081         	movff	move_window@wsect,disk_write@sector
 20154  0036D2  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 20155  0036D6  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 20156  0036DA  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 20157  0036DE  0E01               	movlw	1
 20158  0036E0  6F85               	movwf	disk_write@count& (0+255),b
 20159  0036E2  0E00               	movlw	0
 20160  0036E4  ECF4  F025         	call	_disk_write
 20161  0036E8  0900               	iorlw	0
 20162  0036EA  B4D8               	btfsc	status,2,c
 20163  0036EC  D002               	goto	l1033
 20164                           
 20165                           ;tff.c: 90: return FALSE;
 20166  0036EE  0E00               	movlw	0
 20167  0036F0  0012               	return	
 20168  0036F2                     l1033:
 20169                           
 20170                           ;tff.c: 91: fs->winflag = 0;
 20171  0036F2  0100               	movlb	0	; () banked
 20172  0036F4  EE20 F01F          	lfsr	2,31
 20173  0036F8  519E               	movf	move_window@fs& (0+255),w,b
 20174  0036FA  26D9               	addwf	fsr2l,f,c
 20175  0036FC  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20176  0036FE  22DA               	addwfc	fsr2h,f,c
 20177  003700  0E00               	movlw	0
 20178  003702  6EDF               	movwf	indf2,c
 20179                           
 20180                           ;tff.c: 92: if (wsect < (fs->fatbase + fs->sects_fat)) {
 20181  003704  EE20 F008          	lfsr	2,8
 20182  003708  519E               	movf	move_window@fs& (0+255),w,b
 20183  00370A  26D9               	addwf	fsr2l,f,c
 20184  00370C  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20185  00370E  22DA               	addwfc	fsr2h,f,c
 20186  003710  CFDE F08F          	movff	postinc2,??_move_window
 20187  003714  CFDE F090          	movff	postinc2,??_move_window+1
 20188  003718  CFDE F091          	movff	postinc2,??_move_window+2
 20189  00371C  CFDE F092          	movff	postinc2,??_move_window+3
 20190  003720  EE20 F014          	lfsr	2,20
 20191  003724  519E               	movf	move_window@fs& (0+255),w,b
 20192  003726  26D9               	addwf	fsr2l,f,c
 20193  003728  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20194  00372A  22DA               	addwfc	fsr2h,f,c
 20195  00372C  CFDE F093          	movff	postinc2,??_move_window+4
 20196  003730  CFDD F094          	movff	postdec2,??_move_window+5
 20197  003734  5193               	movf	(??_move_window+4)& (0+255),w,b
 20198  003736  258F               	addwf	??_move_window& (0+255),w,b
 20199  003738  6F95               	movwf	(??_move_window+6)& (0+255),b
 20200  00373A  5194               	movf	(??_move_window+5)& (0+255),w,b
 20201  00373C  2190               	addwfc	(??_move_window+1)& (0+255),w,b
 20202  00373E  6F96               	movwf	(??_move_window+7)& (0+255),b
 20203  003740  0E00               	movlw	0
 20204  003742  2191               	addwfc	(??_move_window+2)& (0+255),w,b
 20205  003744  6F97               	movwf	(??_move_window+8)& (0+255),b
 20206  003746  0E00               	movlw	0
 20207  003748  2192               	addwfc	(??_move_window+3)& (0+255),w,b
 20208  00374A  6F98               	movwf	(??_move_window+9)& (0+255),b
 20209  00374C  5195               	movf	(??_move_window+6)& (0+255),w,b
 20210  00374E  5D9A               	subwf	move_window@wsect& (0+255),w,b
 20211  003750  5196               	movf	(??_move_window+7)& (0+255),w,b
 20212  003752  599B               	subwfb	(move_window@wsect+1)& (0+255),w,b
 20213  003754  5197               	movf	(??_move_window+8)& (0+255),w,b
 20214  003756  599C               	subwfb	(move_window@wsect+2)& (0+255),w,b
 20215  003758  5198               	movf	(??_move_window+9)& (0+255),w,b
 20216  00375A  599D               	subwfb	(move_window@wsect+3)& (0+255),w,b
 20217  00375C  B0D8               	btfsc	status,0,c
 20218  00375E  D034               	goto	u12760
 20219                           
 20220                           ; BSR set to: 0
 20221                           ;tff.c: 93: for (n = fs->n_fats; n >= 2; n--) {
 20222  003760  EE20 F01E          	lfsr	2,30
 20223  003764  519E               	movf	move_window@fs& (0+255),w,b
 20224  003766  26D9               	addwf	fsr2l,f,c
 20225  003768  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20226  00376A  22DA               	addwfc	fsr2h,f,c
 20227  00376C  50DF               	movf	indf2,w,c
 20228  00376E  6F99               	movwf	move_window@n& (0+255),b
 20229  003770                     l9926:
 20230                           
 20231                           ; BSR set to: 0
 20232  003770  0E02               	movlw	2
 20233  003772  6199               	cpfslt	move_window@n& (0+255),b
 20234  003774  D001               	goto	l1036
 20235  003776  D028               	goto	u12760
 20236  003778                     l1036:
 20237                           
 20238                           ; BSR set to: 0
 20239                           ;tff.c: 94: wsect += fs->sects_fat;
 20240                           
 20241                           ; BSR set to: 0
 20242  003778  EE20 F014          	lfsr	2,20
 20243  00377C  519E               	movf	move_window@fs& (0+255),w,b
 20244  00377E  26D9               	addwf	fsr2l,f,c
 20245  003780  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20246  003782  22DA               	addwfc	fsr2h,f,c
 20247  003784  CFDE F08F          	movff	postinc2,??_move_window
 20248  003788  CFDD F090          	movff	postdec2,??_move_window+1
 20249  00378C  518F               	movf	??_move_window& (0+255),w,b
 20250  00378E  279A               	addwf	move_window@wsect& (0+255),f,b
 20251  003790  5190               	movf	(??_move_window+1)& (0+255),w,b
 20252  003792  239B               	addwfc	(move_window@wsect+1)& (0+255),f,b
 20253  003794  0E00               	movlw	0
 20254  003796  239C               	addwfc	(move_window@wsect+2)& (0+255),f,b
 20255  003798  0E00               	movlw	0
 20256  00379A  239D               	addwfc	(move_window@wsect+3)& (0+255),f,b
 20257                           
 20258                           ; BSR set to: 0
 20259                           ;tff.c: 95: disk_write(0, fs->win, wsect, 1);
 20260  00379C  0E20               	movlw	32
 20261  00379E  259E               	addwf	move_window@fs& (0+255),w,b
 20262  0037A0  6F7F               	movwf	disk_write@buff& (0+255),b
 20263  0037A2  0E00               	movlw	0
 20264  0037A4  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 20265  0037A6  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 20266  0037A8  C09A  F081         	movff	move_window@wsect,disk_write@sector
 20267  0037AC  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 20268  0037B0  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 20269  0037B4  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 20270  0037B8  0E01               	movlw	1
 20271  0037BA  6F85               	movwf	disk_write@count& (0+255),b
 20272  0037BC  0E00               	movlw	0
 20273  0037BE  ECF4  F025         	call	_disk_write
 20274  0037C2  0100               	movlb	0	; () banked
 20275  0037C4  0799               	decf	move_window@n& (0+255),f,b
 20276  0037C6  D7D4               	goto	l9926
 20277  0037C8                     u12760:
 20278                           
 20279                           ; BSR set to: 0
 20280                           ;tff.c: 96: }
 20281                           ;tff.c: 97: }
 20282                           ;tff.c: 98: }
 20283                           ;tff.c: 100: if (sector) {
 20284                           
 20285                           ; BSR set to: 0
 20286                           
 20287                           ; BSR set to: 0
 20288                           
 20289                           ; BSR set to: 0
 20290  0037C8  518B               	movf	move_window@sector& (0+255),w,b
 20291  0037CA  118C               	iorwf	(move_window@sector+1)& (0+255),w,b
 20292  0037CC  118D               	iorwf	(move_window@sector+2)& (0+255),w,b
 20293  0037CE  118E               	iorwf	(move_window@sector+3)& (0+255),w,b
 20294  0037D0  B4D8               	btfsc	status,2,c
 20295  0037D2  D027               	goto	l1038
 20296                           
 20297                           ; BSR set to: 0
 20298                           ;tff.c: 101: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 20299  0037D4  0E20               	movlw	32
 20300  0037D6  259E               	addwf	move_window@fs& (0+255),w,b
 20301  0037D8  6F7F               	movwf	disk_read@buff& (0+255),b
 20302  0037DA  0E00               	movlw	0
 20303  0037DC  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 20304  0037DE  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 20305  0037E0  C08B  F081         	movff	move_window@sector,disk_read@sector
 20306  0037E4  C08C  F082         	movff	move_window@sector+1,disk_read@sector+1
 20307  0037E8  C08D  F083         	movff	move_window@sector+2,disk_read@sector+2
 20308  0037EC  C08E  F084         	movff	move_window@sector+3,disk_read@sector+3
 20309  0037F0  0E01               	movlw	1
 20310  0037F2  6F85               	movwf	disk_read@count& (0+255),b
 20311  0037F4  0E00               	movlw	0
 20312  0037F6  EC20  F025         	call	_disk_read
 20313  0037FA  0900               	iorlw	0
 20314  0037FC  B4D8               	btfsc	status,2,c
 20315  0037FE  D002               	goto	l1039
 20316                           
 20317                           ;tff.c: 102: return FALSE;
 20318  003800  0E00               	movlw	0
 20319  003802  0012               	return	
 20320  003804                     l1039:
 20321                           
 20322                           ;tff.c: 103: fs->winsect = sector;
 20323  003804  0100               	movlb	0	; () banked
 20324  003806  EE20 F004          	lfsr	2,4
 20325  00380A  519E               	movf	move_window@fs& (0+255),w,b
 20326  00380C  26D9               	addwf	fsr2l,f,c
 20327  00380E  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20328  003810  22DA               	addwfc	fsr2h,f,c
 20329  003812  C08B  FFDE         	movff	move_window@sector,postinc2
 20330  003816  C08C  FFDE         	movff	move_window@sector+1,postinc2
 20331  00381A  C08D  FFDE         	movff	move_window@sector+2,postinc2
 20332  00381E  C08E  FFDE         	movff	move_window@sector+3,postinc2
 20333  003822                     l1038:
 20334                           
 20335                           ; BSR set to: 0
 20336                           ;tff.c: 104: }
 20337                           ;tff.c: 105: }
 20338                           ;tff.c: 106: return TRUE;
 20339                           
 20340                           ; BSR set to: 0
 20341                           
 20342                           ; BSR set to: 0
 20343  003822  0E01               	movlw	1
 20344  003824  0012               	return	
 20345  003826                     __end_of_move_window:
 20346                           	opt stack 0
 20347                           tosu	equ	0xFFF
 20348                           tosh	equ	0xFFE
 20349                           tosl	equ	0xFFD
 20350                           pclath	equ	0xFFA
 20351                           tblptru	equ	0xFF8
 20352                           tblptrh	equ	0xFF7
 20353                           tblptrl	equ	0xFF6
 20354                           tablat	equ	0xFF5
 20355                           prodh	equ	0xFF4
 20356                           prodl	equ	0xFF3
 20357                           intcon	equ	0xFF2
 20358                           intcon2	equ	0xFF1
 20359                           intcon3	equ	0xFF0
 20360                           indf0	equ	0xFEF
 20361                           postinc0	equ	0xFEE
 20362                           fsr0h	equ	0xFEA
 20363                           fsr0l	equ	0xFE9
 20364                           wreg	equ	0xFE8
 20365                           indf1	equ	0xFE7
 20366                           postinc1	equ	0xFE6
 20367                           postdec1	equ	0xFE5
 20368                           plusw1	equ	0xFE3
 20369                           fsr1h	equ	0xFE2
 20370                           fsr1l	equ	0xFE1
 20371                           indf2	equ	0xFDF
 20372                           postinc2	equ	0xFDE
 20373                           postdec2	equ	0xFDD
 20374                           plusw2	equ	0xFDB
 20375                           fsr2h	equ	0xFDA
 20376                           fsr2l	equ	0xFD9
 20377                           status	equ	0xFD8
 20378                           
 20379 ;; *************** function _disk_write *****************
 20380 ;; Defined at:
 20381 ;;		line 150 in file "bibliotecas/diskio.c"
 20382 ;; Parameters:    Size  Location     Type
 20383 ;;  pdrv            1    wreg     unsigned char 
 20384 ;;  buff            2   31[BANK0 ] PTR const unsigned char 
 20385 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 20386 ;;  sector          4   33[BANK0 ] unsigned long 
 20387 ;;  count           1   37[BANK0 ] unsigned char 
 20388 ;; Auto vars:     Size  Location     Type
 20389 ;;  pdrv            1   39[BANK0 ] unsigned char 
 20390 ;;  result          2   40[BANK0 ] int 
 20391 ;;  res             1   42[BANK0 ] enum E25
 20392 ;; Return value:  Size  Location     Type
 20393 ;;                  1    wreg      enum E25
 20394 ;; Registers used:
 20395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20396 ;; Tracked objects:
 20397 ;;		On entry : 0/0
 20398 ;;		On exit  : 0/0
 20399 ;;		Unchanged: 0/0
 20400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20401 ;;      Params:         0       7       0       0       0       0       0       0       0
 20402 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20403 ;;      Temps:          0       1       0       0       0       0       0       0       0
 20404 ;;      Totals:         0      12       0       0       0       0       0       0       0
 20405 ;;Total ram usage:       12 bytes
 20406 ;; Hardware stack levels used:    1
 20407 ;; Hardware stack levels required when called:    7
 20408 ;; This function calls:
 20409 ;;		_sdc_disk_write
 20410 ;; This function is called by:
 20411 ;;		_move_window
 20412 ;;		_reserve_direntry
 20413 ;;		_f_write
 20414 ;; This function uses a non-reentrant model
 20415 ;;
 20416                           
 20417                           	psect	text71
 20418  004BE8                     __ptext71:
 20419                           	opt stack 0
 20420  004BE8                     _disk_write:
 20421                           	opt stack 15
 20422                           
 20423                           ;incstack = 0
 20424                           ;disk_write@pdrv stored from wreg
 20425  004BE8  0100               	movlb	0	; () banked
 20426  004BEA  6F87               	movwf	disk_write@pdrv& (0+255),b
 20427                           
 20428                           ;diskio.c: 157: DRESULT res;
 20429                           ;diskio.c: 158: int result;
 20430                           ;diskio.c: 160: switch (pdrv) {
 20431  004BEC  D034               	goto	l567
 20432  004BEE                     
 20433                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 20434  004BEE  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 20435  004BF2  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 20436  004BF6  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 20437  004BFA  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 20438  004BFE  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 20439  004C02  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 20440  004C06  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 20441  004C0A  EC73  F019         	call	_sdc_disk_write	;wreg free
 20442  004C0E  0100               	movlb	0	; () banked
 20443  004C10  6F86               	movwf	??_disk_write& (0+255),b
 20444  004C12  5186               	movf	??_disk_write& (0+255),w,b
 20445  004C14  6F88               	movwf	disk_write@result& (0+255),b
 20446  004C16  6B89               	clrf	(disk_write@result+1)& (0+255),b
 20447                           
 20448                           ; BSR set to: 0
 20449                           ;diskio.c: 165: res = result;
 20450  004C18  C088  F08A         	movff	disk_write@result,disk_write@res
 20451                           
 20452                           ; BSR set to: 0
 20453                           ;diskio.c: 168: return res;
 20454  004C1C  518A               	movf	disk_write@res& (0+255),w,b
 20455                           
 20456                           ; BSR set to: 0
 20457  004C1E  0012               	return	
 20458  004C20                     
 20459                           ; BSR set to: 0
 20460                           ;diskio.c: 173: result = sdc_disk_write(buff, sector, count);
 20461                           
 20462                           ; BSR set to: 0
 20463  004C20  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 20464  004C24  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 20465  004C28  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 20466  004C2C  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 20467  004C30  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 20468  004C34  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 20469  004C38  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 20470  004C3C  EC73  F019         	call	_sdc_disk_write	;wreg free
 20471  004C40  0100               	movlb	0	; () banked
 20472  004C42  6F86               	movwf	??_disk_write& (0+255),b
 20473  004C44  5186               	movf	??_disk_write& (0+255),w,b
 20474  004C46  6F88               	movwf	disk_write@result& (0+255),b
 20475  004C48  6B89               	clrf	(disk_write@result+1)& (0+255),b
 20476                           
 20477                           ; BSR set to: 0
 20478                           ;diskio.c: 174: res = result;
 20479  004C4A  C088  F08A         	movff	disk_write@result,disk_write@res
 20480                           
 20481                           ; BSR set to: 0
 20482                           ;diskio.c: 177: return res;
 20483  004C4E  518A               	movf	disk_write@res& (0+255),w,b
 20484                           
 20485                           ; BSR set to: 0
 20486  004C50  0012               	return	
 20487  004C52                     
 20488                           ; BSR set to: 0
 20489                           ;diskio.c: 186: return res;
 20490                           
 20491                           ; BSR set to: 0
 20492  004C52  518A               	movf	disk_write@res& (0+255),w,b
 20493                           
 20494                           ; BSR set to: 0
 20495  004C54  0012               	return	
 20496  004C56                     l567:
 20497                           
 20498                           ; BSR set to: 0
 20499  004C56  0100               	movlb	0	; () banked
 20500  004C58  5187               	movf	disk_write@pdrv& (0+255),w,b
 20501                           
 20502                           ; Switch size 1, requested type "space"
 20503                           ; Number of cases is 3, Range of values is 0 to 2
 20504                           ; switch strategies available:
 20505                           ; Name         Instructions Cycles
 20506                           ; simple_byte           10     6 (average)
 20507                           ;	Chosen strategy is simple_byte
 20508  004C5A  0A00               	xorlw	0	; case 0
 20509  004C5C  B4D8               	btfsc	status,2,c
 20510  004C5E  D7C7               	goto	l568
 20511  004C60  0A01               	xorlw	1	; case 1
 20512  004C62  B4D8               	btfsc	status,2,c
 20513  004C64  D7DD               	goto	l570
 20514  004C66  0A03               	xorlw	3	; case 2
 20515  004C68  B4D8               	btfsc	status,2,c
 20516  004C6A  D7F3               	goto	l571
 20517                           
 20518                           ; BSR set to: 0
 20519                           ;diskio.c: 189: return RES_PARERR;
 20520                           
 20521                           ; BSR set to: 0
 20522  004C6C  0E04               	movlw	4
 20523  004C6E  0012               	return	
 20524  004C70                     __end_of_disk_write:
 20525                           	opt stack 0
 20526                           tosu	equ	0xFFF
 20527                           tosh	equ	0xFFE
 20528                           tosl	equ	0xFFD
 20529                           pclath	equ	0xFFA
 20530                           tblptru	equ	0xFF8
 20531                           tblptrh	equ	0xFF7
 20532                           tblptrl	equ	0xFF6
 20533                           tablat	equ	0xFF5
 20534                           prodh	equ	0xFF4
 20535                           prodl	equ	0xFF3
 20536                           intcon	equ	0xFF2
 20537                           intcon2	equ	0xFF1
 20538                           intcon3	equ	0xFF0
 20539                           indf0	equ	0xFEF
 20540                           postinc0	equ	0xFEE
 20541                           fsr0h	equ	0xFEA
 20542                           fsr0l	equ	0xFE9
 20543                           wreg	equ	0xFE8
 20544                           indf1	equ	0xFE7
 20545                           postinc1	equ	0xFE6
 20546                           postdec1	equ	0xFE5
 20547                           plusw1	equ	0xFE3
 20548                           fsr1h	equ	0xFE2
 20549                           fsr1l	equ	0xFE1
 20550                           indf2	equ	0xFDF
 20551                           postinc2	equ	0xFDE
 20552                           postdec2	equ	0xFDD
 20553                           plusw2	equ	0xFDB
 20554                           fsr2h	equ	0xFDA
 20555                           fsr2l	equ	0xFD9
 20556                           status	equ	0xFD8
 20557                           
 20558 ;; *************** function _sdc_disk_write *****************
 20559 ;; Defined at:
 20560 ;;		line 509 in file "bibliotecas/diskio.c"
 20561 ;; Parameters:    Size  Location     Type
 20562 ;;  p_buff          2   12[BANK0 ] PTR const unsigned char 
 20563 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 20564 ;;  sector          4   14[BANK0 ] unsigned long 
 20565 ;;  count           1   18[BANK0 ] unsigned char 
 20566 ;; Auto vars:     Size  Location     Type
 20567 ;;  j               2   28[BANK0 ] int 
 20568 ;;  count1          2   25[BANK0 ] int 
 20569 ;;  i               2   23[BANK0 ] int 
 20570 ;;  buff            1   30[BANK0 ] unsigned char 
 20571 ;;  res             1   27[BANK0 ] enum E25
 20572 ;; Return value:  Size  Location     Type
 20573 ;;                  1    wreg      enum E25
 20574 ;; Registers used:
 20575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20576 ;; Tracked objects:
 20577 ;;		On entry : 0/0
 20578 ;;		On exit  : 0/0
 20579 ;;		Unchanged: 0/0
 20580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20581 ;;      Params:         0       7       0       0       0       0       0       0       0
 20582 ;;      Locals:         0       8       0       0       0       0       0       0       0
 20583 ;;      Temps:          0       4       0       0       0       0       0       0       0
 20584 ;;      Totals:         0      19       0       0       0       0       0       0       0
 20585 ;;Total ram usage:       19 bytes
 20586 ;; Hardware stack levels used:    1
 20587 ;; Hardware stack levels required when called:    6
 20588 ;; This function calls:
 20589 ;;		_command
 20590 ;;		_dummy_clocks
 20591 ;;		_escreve_SPI
 20592 ;;		_leitura_SPI
 20593 ;;		_proceed
 20594 ;;		_response
 20595 ;; This function is called by:
 20596 ;;		_disk_write
 20597 ;; This function uses a non-reentrant model
 20598 ;;
 20599                           
 20600                           	psect	text72
 20601  0032E6                     __ptext72:
 20602                           	opt stack 0
 20603  0032E6                     _sdc_disk_write:
 20604                           	opt stack 15
 20605                           
 20606                           ;diskio.c: 511: DRESULT res;
 20607                           ;diskio.c: 512: unsigned char buff;
 20608                           ;diskio.c: 513: int i=0,j, count1 = 0;
 20609                           
 20610                           ; BSR set to: 0
 20611                           ;incstack = 0
 20612  0032E6  0E00               	movlw	0
 20613  0032E8  0100               	movlb	0	; () banked
 20614  0032EA  6F78               	movwf	(sdc_disk_write@i+1)& (0+255),b
 20615  0032EC  0E00               	movlw	0
 20616  0032EE  6F77               	movwf	sdc_disk_write@i& (0+255),b
 20617  0032F0  0E00               	movlw	0
 20618  0032F2  6F7A               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 20619  0032F4  0E00               	movlw	0
 20620  0032F6  6F79               	movwf	sdc_disk_write@count1& (0+255),b
 20621                           
 20622                           ; BSR set to: 0
 20623                           ;diskio.c: 515: if(count>1)
 20624  0032F8  0E01               	movlw	1
 20625  0032FA  6572               	cpfsgt	sdc_disk_write@count& (0+255),b
 20626  0032FC  D06C               	goto	l652
 20627                           
 20628                           ; BSR set to: 0
 20629                           ;diskio.c: 516: {
 20630                           ;diskio.c: 517: LATCbits.LATC7 = 0;
 20631  0032FE  9E8B               	bcf	3979,7,c	;volatile
 20632                           
 20633                           ;diskio.c: 518: LATBbits.LATB4 = 0;
 20634  003300  988A               	bcf	3978,4,c	;volatile
 20635                           
 20636                           ; BSR set to: 0
 20637                           ;diskio.c: 519: dummy_clocks(10);
 20638  003302  0E0A               	movlw	10
 20639  003304  EC49  F02A         	call	_dummy_clocks
 20640                           
 20641                           ;diskio.c: 520: command(0X57, count, 0XFF);
 20642  003308  0100               	movlb	0	; () banked
 20643  00330A  5172               	movf	sdc_disk_write@count& (0+255),w,b
 20644  00330C  6F65               	movwf	command@arg& (0+255),b
 20645  00330E  6B66               	clrf	(command@arg+1)& (0+255),b
 20646  003310  6B67               	clrf	(command@arg+2)& (0+255),b
 20647  003312  6B68               	clrf	(command@arg+3)& (0+255),b
 20648  003314  0EFF               	movlw	255
 20649  003316  6F69               	movwf	command@CRC& (0+255),b
 20650  003318  0E57               	movlw	87
 20651  00331A  EC1A  F028         	call	_command
 20652                           
 20653                           ;diskio.c: 521: proceed();
 20654  00331E  EC38  F02C         	call	_proceed	;wreg free
 20655  003322                     
 20656                           ;diskio.c: 523: buff = response();
 20657  003322  EC1E  F02C         	call	_response	;wreg free
 20658  003326  0100               	movlb	0	; () banked
 20659  003328  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 20660                           
 20661                           ; BSR set to: 0
 20662                           ;diskio.c: 524: }while(buff!=0X00);
 20663  00332A  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 20664  00332C  A4D8               	btfss	status,2,c
 20665  00332E  D7F9               	goto	l653
 20666                           
 20667                           ; BSR set to: 0
 20668                           ;diskio.c: 526: dummy_clocks(10);
 20669                           
 20670                           ; BSR set to: 0
 20671  003330  0E0A               	movlw	10
 20672  003332  EC49  F02A         	call	_dummy_clocks
 20673                           
 20674                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 20675  003336  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 20676  00333A  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 20677  00333E  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 20678  003342  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 20679  003346  0E09               	movlw	9
 20680  003348                     u12425:
 20681  003348  90D8               	bcf	status,0,c
 20682  00334A  0100               	movlb	0	; () banked
 20683  00334C  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 20684  00334E  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 20685  003350  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 20686  003352  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 20687  003354  2EE8               	decfsz	wreg,f,c
 20688  003356  D7F8               	goto	u12425
 20689  003358  C073  F065         	movff	??_sdc_disk_write,command@arg
 20690  00335C  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 20691  003360  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 20692  003364  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 20693  003368  0EFF               	movlw	255
 20694  00336A  6F69               	movwf	command@CRC& (0+255),b
 20695  00336C  0E59               	movlw	89
 20696  00336E  EC1A  F028         	call	_command
 20697                           
 20698                           ;diskio.c: 528: proceed();
 20699  003372  EC38  F02C         	call	_proceed	;wreg free
 20700  003376                     
 20701                           ;diskio.c: 530: buff = response();
 20702  003376  EC1E  F02C         	call	_response	;wreg free
 20703  00337A  0100               	movlb	0	; () banked
 20704  00337C  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 20705                           
 20706                           ; BSR set to: 0
 20707                           ;diskio.c: 531: }while(buff!=0X00);
 20708  00337E  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 20709  003380  A4D8               	btfss	status,2,c
 20710  003382  D7F9               	goto	l655
 20711                           
 20712                           ; BSR set to: 0
 20713                           ;diskio.c: 533: dummy_clocks(1);
 20714                           
 20715                           ; BSR set to: 0
 20716  003384  0E01               	movlw	1
 20717  003386  EC49  F02A         	call	_dummy_clocks
 20718                           
 20719                           ;diskio.c: 534: escreve_SPI(0XFC);
 20720  00338A  0EFC               	movlw	252
 20721  00338C  ECFB  F02B         	call	_escreve_SPI
 20722                           
 20723                           ;diskio.c: 535: for(j=0;j<512;j++)
 20724  003390  0E00               	movlw	0
 20725  003392  0100               	movlb	0	; () banked
 20726  003394  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 20727  003396  0E00               	movlw	0
 20728  003398  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 20729  00339A                     l9686:
 20730                           
 20731                           ; BSR set to: 0
 20732  00339A  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 20733  00339C  D004               	goto	l657
 20734  00339E  0E02               	movlw	2
 20735  0033A0  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 20736  0033A2  B0D8               	btfsc	status,0,c
 20737  0033A4  D00D               	goto	u12450
 20738  0033A6                     l657:
 20739                           
 20740                           ; BSR set to: 0
 20741                           ;diskio.c: 536: {
 20742                           ;diskio.c: 537: escreve_SPI(*p_buff);
 20743                           
 20744                           ; BSR set to: 0
 20745  0033A6  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 20746  0033AA  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 20747  0033AE  50DF               	movf	indf2,w,c
 20748  0033B0  ECFB  F02B         	call	_escreve_SPI
 20749                           
 20750                           ;diskio.c: 538: p_buff++;
 20751  0033B4  0100               	movlb	0	; () banked
 20752  0033B6  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 20753  0033B8  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 20754                           
 20755                           ; BSR set to: 0
 20756  0033BA  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 20757  0033BC  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 20758  0033BE  D7ED               	goto	l9686
 20759  0033C0                     u12450:
 20760                           
 20761                           ; BSR set to: 0
 20762                           ;diskio.c: 539: }
 20763                           ;diskio.c: 540: leitura_SPI();
 20764                           
 20765                           ; BSR set to: 0
 20766  0033C0  EC3E  F02C         	call	_leitura_SPI	;wreg free
 20767                           
 20768                           ;diskio.c: 541: leitura_SPI();
 20769  0033C4  EC3E  F02C         	call	_leitura_SPI	;wreg free
 20770                           
 20771                           ;diskio.c: 543: dummy_clocks(1);
 20772  0033C8  0E01               	movlw	1
 20773  0033CA  EC49  F02A         	call	_dummy_clocks
 20774                           
 20775                           ;diskio.c: 544: escreve_SPI(0XFD);
 20776  0033CE  0EFD               	movlw	253
 20777  0033D0  ECFB  F02B         	call	_escreve_SPI
 20778                           
 20779                           ;diskio.c: 546: }
 20780  0033D4  D06A               	goto	u12500
 20781  0033D6                     l652:
 20782                           
 20783                           ; BSR set to: 0
 20784                           ;diskio.c: 547: else
 20785                           ;diskio.c: 548: {
 20786                           ;diskio.c: 549: LATCbits.LATC7 = 0;
 20787  0033D6  9E8B               	bcf	3979,7,c	;volatile
 20788                           
 20789                           ;diskio.c: 550: LATBbits.LATB4 = 0;
 20790  0033D8  988A               	bcf	3978,4,c	;volatile
 20791                           
 20792                           ; BSR set to: 0
 20793                           ;diskio.c: 551: dummy_clocks(10);
 20794  0033DA  0E0A               	movlw	10
 20795  0033DC  EC49  F02A         	call	_dummy_clocks
 20796                           
 20797                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 20798  0033E0  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 20799  0033E4  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 20800  0033E8  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 20801  0033EC  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 20802  0033F0  0E09               	movlw	9
 20803  0033F2                     u12465:
 20804  0033F2  90D8               	bcf	status,0,c
 20805  0033F4  0100               	movlb	0	; () banked
 20806  0033F6  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 20807  0033F8  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 20808  0033FA  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 20809  0033FC  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 20810  0033FE  2EE8               	decfsz	wreg,f,c
 20811  003400  D7F8               	goto	u12465
 20812  003402  C073  F065         	movff	??_sdc_disk_write,command@arg
 20813  003406  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 20814  00340A  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 20815  00340E  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 20816  003412  0E00               	movlw	0
 20817  003414  6F69               	movwf	command@CRC& (0+255),b
 20818  003416  0E58               	movlw	88
 20819  003418  EC1A  F028         	call	_command
 20820                           
 20821                           ;diskio.c: 553: proceed();
 20822  00341C  EC38  F02C         	call	_proceed	;wreg free
 20823  003420                     
 20824                           ;diskio.c: 555: buff = response();
 20825  003420  EC1E  F02C         	call	_response	;wreg free
 20826  003424  0100               	movlb	0	; () banked
 20827  003426  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 20828                           
 20829                           ; BSR set to: 0
 20830                           ;diskio.c: 556: }while(buff!=0X00);
 20831  003428  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 20832  00342A  A4D8               	btfss	status,2,c
 20833  00342C  D7F9               	goto	l660
 20834                           
 20835                           ; BSR set to: 0
 20836                           ;diskio.c: 558: LATBbits.LATB4 = 0;
 20837  00342E  988A               	bcf	3978,4,c	;volatile
 20838                           
 20839                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 20840  003430  9E8B               	bcf	3979,7,c	;volatile
 20841                           
 20842                           ; BSR set to: 0
 20843                           ;diskio.c: 560: dummy_clocks(1);
 20844  003432  0E01               	movlw	1
 20845  003434  EC49  F02A         	call	_dummy_clocks
 20846                           
 20847                           ;diskio.c: 561: escreve_SPI(0XFE);
 20848  003438  0EFE               	movlw	254
 20849  00343A  ECFB  F02B         	call	_escreve_SPI
 20850                           
 20851                           ;diskio.c: 562: for(j=0;j<512;j++)
 20852  00343E  0E00               	movlw	0
 20853  003440  0100               	movlb	0	; () banked
 20854  003442  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 20855  003444  0E00               	movlw	0
 20856  003446  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 20857  003448                     l9718:
 20858                           
 20859                           ; BSR set to: 0
 20860  003448  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 20861  00344A  D004               	goto	l662
 20862  00344C  0E02               	movlw	2
 20863  00344E  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 20864  003450  B0D8               	btfsc	status,0,c
 20865  003452  D00D               	goto	u12490
 20866  003454                     l662:
 20867                           
 20868                           ; BSR set to: 0
 20869                           ;diskio.c: 563: {
 20870                           ;diskio.c: 564: escreve_SPI(*p_buff);
 20871                           
 20872                           ; BSR set to: 0
 20873  003454  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 20874  003458  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 20875  00345C  50DF               	movf	indf2,w,c
 20876  00345E  ECFB  F02B         	call	_escreve_SPI
 20877                           
 20878                           ;diskio.c: 565: p_buff++;
 20879  003462  0100               	movlb	0	; () banked
 20880  003464  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 20881  003466  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 20882                           
 20883                           ; BSR set to: 0
 20884  003468  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 20885  00346A  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 20886  00346C  D7ED               	goto	l9718
 20887  00346E                     u12490:
 20888                           
 20889                           ; BSR set to: 0
 20890                           ;diskio.c: 566: }
 20891                           ;diskio.c: 567: leitura_SPI();
 20892                           
 20893                           ; BSR set to: 0
 20894  00346E  EC3E  F02C         	call	_leitura_SPI	;wreg free
 20895                           
 20896                           ;diskio.c: 568: leitura_SPI();
 20897  003472  EC3E  F02C         	call	_leitura_SPI	;wreg free
 20898                           
 20899                           ;diskio.c: 570: dummy_clocks(10);
 20900  003476  0E0A               	movlw	10
 20901  003478  EC49  F02A         	call	_dummy_clocks
 20902                           
 20903                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 20904  00347C  0E00               	movlw	0
 20905  00347E  0100               	movlb	0	; () banked
 20906  003480  6F65               	movwf	command@arg& (0+255),b
 20907  003482  0E00               	movlw	0
 20908  003484  6F66               	movwf	(command@arg+1)& (0+255),b
 20909  003486  0E00               	movlw	0
 20910  003488  6F67               	movwf	(command@arg+2)& (0+255),b
 20911  00348A  0E00               	movlw	0
 20912  00348C  6F68               	movwf	(command@arg+3)& (0+255),b
 20913  00348E  0E00               	movlw	0
 20914  003490  6F69               	movwf	command@CRC& (0+255),b
 20915  003492  0E4D               	movlw	77
 20916  003494  EC1A  F028         	call	_command
 20917                           
 20918                           ;diskio.c: 572: proceed();
 20919  003498  EC38  F02C         	call	_proceed	;wreg free
 20920  00349C                     
 20921                           ;diskio.c: 574: buff = response();
 20922  00349C  EC1E  F02C         	call	_response	;wreg free
 20923  0034A0  0100               	movlb	0	; () banked
 20924  0034A2  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 20925                           
 20926                           ; BSR set to: 0
 20927                           ;diskio.c: 575: }while(buff!=0X00 );
 20928  0034A4  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 20929  0034A6  A4D8               	btfss	status,2,c
 20930  0034A8  D7F9               	goto	l664
 20931  0034AA                     u12500:
 20932                           
 20933                           ;diskio.c: 576: }
 20934                           ;diskio.c: 577: return res;
 20935                           
 20936                           ; BSR set to: 0
 20937                           
 20938                           ; BSR set to: 0
 20939  0034AA  0100               	movlb	0	; () banked
 20940  0034AC  517B               	movf	sdc_disk_write@res& (0+255),w,b
 20941  0034AE  0012               	return	
 20942  0034B0                     __end_of_sdc_disk_write:
 20943                           	opt stack 0
 20944                           tosu	equ	0xFFF
 20945                           tosh	equ	0xFFE
 20946                           tosl	equ	0xFFD
 20947                           pclath	equ	0xFFA
 20948                           tblptru	equ	0xFF8
 20949                           tblptrh	equ	0xFF7
 20950                           tblptrl	equ	0xFF6
 20951                           tablat	equ	0xFF5
 20952                           prodh	equ	0xFF4
 20953                           prodl	equ	0xFF3
 20954                           intcon	equ	0xFF2
 20955                           intcon2	equ	0xFF1
 20956                           intcon3	equ	0xFF0
 20957                           indf0	equ	0xFEF
 20958                           postinc0	equ	0xFEE
 20959                           fsr0h	equ	0xFEA
 20960                           fsr0l	equ	0xFE9
 20961                           wreg	equ	0xFE8
 20962                           indf1	equ	0xFE7
 20963                           postinc1	equ	0xFE6
 20964                           postdec1	equ	0xFE5
 20965                           plusw1	equ	0xFE3
 20966                           fsr1h	equ	0xFE2
 20967                           fsr1l	equ	0xFE1
 20968                           indf2	equ	0xFDF
 20969                           postinc2	equ	0xFDE
 20970                           postdec2	equ	0xFDD
 20971                           plusw2	equ	0xFDB
 20972                           fsr2h	equ	0xFDA
 20973                           fsr2l	equ	0xFD9
 20974                           status	equ	0xFD8
 20975                           
 20976 ;; *************** function _disk_read *****************
 20977 ;; Defined at:
 20978 ;;		line 97 in file "bibliotecas/diskio.c"
 20979 ;; Parameters:    Size  Location     Type
 20980 ;;  pdrv            1    wreg     unsigned char 
 20981 ;;  buff            2   31[BANK0 ] PTR unsigned char 
 20982 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 20983 ;;  sector          4   33[BANK0 ] unsigned long 
 20984 ;;  count           1   37[BANK0 ] unsigned char 
 20985 ;; Auto vars:     Size  Location     Type
 20986 ;;  pdrv            1   39[BANK0 ] unsigned char 
 20987 ;;  result          2   40[BANK0 ] int 
 20988 ;;  res             1   42[BANK0 ] enum E25
 20989 ;; Return value:  Size  Location     Type
 20990 ;;                  1    wreg      enum E25
 20991 ;; Registers used:
 20992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20993 ;; Tracked objects:
 20994 ;;		On entry : 0/0
 20995 ;;		On exit  : 0/0
 20996 ;;		Unchanged: 0/0
 20997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20998 ;;      Params:         0       7       0       0       0       0       0       0       0
 20999 ;;      Locals:         0       4       0       0       0       0       0       0       0
 21000 ;;      Temps:          0       1       0       0       0       0       0       0       0
 21001 ;;      Totals:         0      12       0       0       0       0       0       0       0
 21002 ;;Total ram usage:       12 bytes
 21003 ;; Hardware stack levels used:    1
 21004 ;; Hardware stack levels required when called:    7
 21005 ;; This function calls:
 21006 ;;		_sdc_disk_read
 21007 ;; This function is called by:
 21008 ;;		_move_window
 21009 ;;		_check_fs
 21010 ;;		_f_read
 21011 ;; This function uses a non-reentrant model
 21012 ;;
 21013                           
 21014                           	psect	text73
 21015  004A40                     __ptext73:
 21016                           	opt stack 0
 21017  004A40                     _disk_read:
 21018                           	opt stack 15
 21019                           
 21020                           ; BSR set to: 0
 21021                           ;incstack = 0
 21022                           ;disk_read@pdrv stored from wreg
 21023  004A40  0100               	movlb	0	; () banked
 21024  004A42  6F87               	movwf	disk_read@pdrv& (0+255),b
 21025                           
 21026                           ;diskio.c: 104: DRESULT res;
 21027                           ;diskio.c: 105: int result;
 21028                           ;diskio.c: 107: switch (pdrv) {
 21029  004A44  D038               	goto	l559
 21030  004A46                     
 21031                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 21032  004A46  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 21033  004A4A  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 21034  004A4E  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 21035  004A52  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 21036  004A56  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 21037  004A5A  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 21038  004A5E  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 21039  004A62  EC3C  F01E         	call	_sdc_disk_read	;wreg free
 21040  004A66  0100               	movlb	0	; () banked
 21041  004A68  6F86               	movwf	??_disk_read& (0+255),b
 21042  004A6A  5186               	movf	??_disk_read& (0+255),w,b
 21043  004A6C  6F88               	movwf	disk_read@result& (0+255),b
 21044  004A6E  6B89               	clrf	(disk_read@result+1)& (0+255),b
 21045                           
 21046                           ; BSR set to: 0
 21047                           ;diskio.c: 115: res = result;
 21048  004A70  C088  F08A         	movff	disk_read@result,disk_read@res
 21049                           
 21050                           ; BSR set to: 0
 21051                           ;diskio.c: 117: return res;
 21052  004A74  518A               	movf	disk_read@res& (0+255),w,b
 21053                           
 21054                           ; BSR set to: 0
 21055  004A76  0012               	return	
 21056  004A78                     
 21057                           ; BSR set to: 0
 21058                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 21059                           
 21060                           ; BSR set to: 0
 21061  004A78  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 21062  004A7C  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 21063  004A80  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 21064  004A84  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 21065  004A88  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 21066  004A8C  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 21067  004A90  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 21068  004A94  EC3C  F01E         	call	_sdc_disk_read	;wreg free
 21069  004A98  0100               	movlb	0	; () banked
 21070  004A9A  6F86               	movwf	??_disk_read& (0+255),b
 21071  004A9C  5186               	movf	??_disk_read& (0+255),w,b
 21072  004A9E  6F88               	movwf	disk_read@result& (0+255),b
 21073  004AA0  6B89               	clrf	(disk_read@result+1)& (0+255),b
 21074                           
 21075                           ; BSR set to: 0
 21076                           ;diskio.c: 126: res = result;
 21077  004AA2  C088  F08A         	movff	disk_read@result,disk_read@res
 21078                           
 21079                           ; BSR set to: 0
 21080                           ;diskio.c: 128: buff = data_buff;
 21081  004AA6  C0F9  F07F         	movff	_data_buff,disk_read@buff
 21082  004AAA  C0FA  F080         	movff	_data_buff+1,disk_read@buff+1
 21083                           
 21084                           ; BSR set to: 0
 21085                           ;diskio.c: 129: return res;
 21086  004AAE  518A               	movf	disk_read@res& (0+255),w,b
 21087                           
 21088                           ; BSR set to: 0
 21089  004AB0  0012               	return	
 21090  004AB2                     
 21091                           ; BSR set to: 0
 21092                           ;diskio.c: 138: return res;
 21093                           
 21094                           ; BSR set to: 0
 21095  004AB2  518A               	movf	disk_read@res& (0+255),w,b
 21096                           
 21097                           ; BSR set to: 0
 21098  004AB4  0012               	return	
 21099  004AB6                     l559:
 21100                           
 21101                           ; BSR set to: 0
 21102  004AB6  0100               	movlb	0	; () banked
 21103  004AB8  5187               	movf	disk_read@pdrv& (0+255),w,b
 21104                           
 21105                           ; Switch size 1, requested type "space"
 21106                           ; Number of cases is 3, Range of values is 0 to 2
 21107                           ; switch strategies available:
 21108                           ; Name         Instructions Cycles
 21109                           ; simple_byte           10     6 (average)
 21110                           ;	Chosen strategy is simple_byte
 21111  004ABA  0A00               	xorlw	0	; case 0
 21112  004ABC  B4D8               	btfsc	status,2,c
 21113  004ABE  D7C3               	goto	l560
 21114  004AC0  0A01               	xorlw	1	; case 1
 21115  004AC2  B4D8               	btfsc	status,2,c
 21116  004AC4  D7D9               	goto	l562
 21117  004AC6  0A03               	xorlw	3	; case 2
 21118  004AC8  B4D8               	btfsc	status,2,c
 21119  004ACA  D7F3               	goto	l563
 21120                           
 21121                           ; BSR set to: 0
 21122                           ;diskio.c: 141: return RES_PARERR;
 21123                           
 21124                           ; BSR set to: 0
 21125  004ACC  0E04               	movlw	4
 21126  004ACE  0012               	return	
 21127  004AD0                     __end_of_disk_read:
 21128                           	opt stack 0
 21129                           tosu	equ	0xFFF
 21130                           tosh	equ	0xFFE
 21131                           tosl	equ	0xFFD
 21132                           pclath	equ	0xFFA
 21133                           tblptru	equ	0xFF8
 21134                           tblptrh	equ	0xFF7
 21135                           tblptrl	equ	0xFF6
 21136                           tablat	equ	0xFF5
 21137                           prodh	equ	0xFF4
 21138                           prodl	equ	0xFF3
 21139                           intcon	equ	0xFF2
 21140                           intcon2	equ	0xFF1
 21141                           intcon3	equ	0xFF0
 21142                           indf0	equ	0xFEF
 21143                           postinc0	equ	0xFEE
 21144                           fsr0h	equ	0xFEA
 21145                           fsr0l	equ	0xFE9
 21146                           wreg	equ	0xFE8
 21147                           indf1	equ	0xFE7
 21148                           postinc1	equ	0xFE6
 21149                           postdec1	equ	0xFE5
 21150                           plusw1	equ	0xFE3
 21151                           fsr1h	equ	0xFE2
 21152                           fsr1l	equ	0xFE1
 21153                           indf2	equ	0xFDF
 21154                           postinc2	equ	0xFDE
 21155                           postdec2	equ	0xFDD
 21156                           plusw2	equ	0xFDB
 21157                           fsr2h	equ	0xFDA
 21158                           fsr2l	equ	0xFD9
 21159                           status	equ	0xFD8
 21160                           
 21161 ;; *************** function _sdc_disk_read *****************
 21162 ;; Defined at:
 21163 ;;		line 439 in file "bibliotecas/diskio.c"
 21164 ;; Parameters:    Size  Location     Type
 21165 ;;  p_buff          2   12[BANK0 ] PTR unsigned char 
 21166 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 21167 ;;  sector          4   14[BANK0 ] unsigned long 
 21168 ;;  count           1   18[BANK0 ] unsigned char 
 21169 ;; Auto vars:     Size  Location     Type
 21170 ;;  start_add       4   24[BANK0 ] unsigned long 
 21171 ;;  length          2   28[BANK0 ] int 
 21172 ;;  count1          2    0        int 
 21173 ;;  i               2    0        int 
 21174 ;;  buff            1   30[BANK0 ] unsigned char 
 21175 ;;  ptr             1   23[BANK0 ] unsigned char 
 21176 ;;  res             1    0        enum E25
 21177 ;; Return value:  Size  Location     Type
 21178 ;;                  1    wreg      enum E25
 21179 ;; Registers used:
 21180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21181 ;; Tracked objects:
 21182 ;;		On entry : 0/0
 21183 ;;		On exit  : 0/0
 21184 ;;		Unchanged: 0/0
 21185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21186 ;;      Params:         0       7       0       0       0       0       0       0       0
 21187 ;;      Locals:         0       8       0       0       0       0       0       0       0
 21188 ;;      Temps:          0       4       0       0       0       0       0       0       0
 21189 ;;      Totals:         0      19       0       0       0       0       0       0       0
 21190 ;;Total ram usage:       19 bytes
 21191 ;; Hardware stack levels used:    1
 21192 ;; Hardware stack levels required when called:    6
 21193 ;; This function calls:
 21194 ;;		_command
 21195 ;;		_dummy_clocks
 21196 ;;		_proceed
 21197 ;;		_response
 21198 ;; This function is called by:
 21199 ;;		_disk_read
 21200 ;; This function uses a non-reentrant model
 21201 ;;
 21202                           
 21203                           	psect	text74
 21204  003C78                     __ptext74:
 21205                           	opt stack 0
 21206  003C78                     _sdc_disk_read:
 21207                           	opt stack 15
 21208                           
 21209                           ;diskio.c: 446: DRESULT res;
 21210                           ;diskio.c: 447: unsigned char ptr=0X00, buff;
 21211                           
 21212                           ; BSR set to: 0
 21213                           ;incstack = 0
 21214  003C78  0E00               	movlw	0
 21215  003C7A  0100               	movlb	0	; () banked
 21216  003C7C  6F77               	movwf	sdc_disk_read@ptr& (0+255),b
 21217                           
 21218                           ; BSR set to: 0
 21219                           ;diskio.c: 448: unsigned long int start_add;
 21220                           ;diskio.c: 449: int length,i, count1;
 21221                           ;diskio.c: 450: dummy_clocks(10);
 21222  003C7E  0E0A               	movlw	10
 21223  003C80  EC49  F02A         	call	_dummy_clocks
 21224                           
 21225                           ;diskio.c: 452: start_add = sector*512;
 21226  003C84  C06E  F073         	movff	sdc_disk_read@sector,??_sdc_disk_read
 21227  003C88  C06F  F074         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 21228  003C8C  C070  F075         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 21229  003C90  C071  F076         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 21230  003C94  0E09               	movlw	9
 21231  003C96                     u12335:
 21232  003C96  90D8               	bcf	status,0,c
 21233  003C98  0100               	movlb	0	; () banked
 21234  003C9A  3773               	rlcf	??_sdc_disk_read& (0+255),f,b
 21235  003C9C  3774               	rlcf	(??_sdc_disk_read+1)& (0+255),f,b
 21236  003C9E  3775               	rlcf	(??_sdc_disk_read+2)& (0+255),f,b
 21237  003CA0  3776               	rlcf	(??_sdc_disk_read+3)& (0+255),f,b
 21238  003CA2  2EE8               	decfsz	wreg,f,c
 21239  003CA4  D7F8               	goto	u12335
 21240  003CA6  C073  F078         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 21241  003CAA  C074  F079         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 21242  003CAE  C075  F07A         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 21243  003CB2  C076  F07B         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 21244                           
 21245                           ; BSR set to: 0
 21246                           ;diskio.c: 455: if(sector != 1)
 21247  003CB6  056E               	decf	sdc_disk_read@sector& (0+255),w,b
 21248  003CB8  116F               	iorwf	(sdc_disk_read@sector+1)& (0+255),w,b
 21249  003CBA  1170               	iorwf	(sdc_disk_read@sector+2)& (0+255),w,b
 21250  003CBC  1171               	iorwf	(sdc_disk_read@sector+3)& (0+255),w,b
 21251  003CBE  B4D8               	btfsc	status,2,c
 21252  003CC0  D01D               	goto	l635
 21253                           
 21254                           ; BSR set to: 0
 21255                           ;diskio.c: 456: {
 21256                           ;diskio.c: 457: dummy_clocks(10);
 21257  003CC2  0E0A               	movlw	10
 21258  003CC4  EC49  F02A         	call	_dummy_clocks
 21259                           
 21260                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 21261  003CC8  C078  F065         	movff	sdc_disk_read@start_add,command@arg
 21262  003CCC  C079  F066         	movff	sdc_disk_read@start_add+1,command@arg+1
 21263  003CD0  C07A  F067         	movff	sdc_disk_read@start_add+2,command@arg+2
 21264  003CD4  C07B  F068         	movff	sdc_disk_read@start_add+3,command@arg+3
 21265  003CD8  0E00               	movlw	0
 21266  003CDA  0100               	movlb	0	; () banked
 21267  003CDC  6F69               	movwf	command@CRC& (0+255),b
 21268  003CDE  0E52               	movlw	82
 21269  003CE0  EC1A  F028         	call	_command
 21270                           
 21271                           ;diskio.c: 459: proceed();
 21272  003CE4  EC38  F02C         	call	_proceed	;wreg free
 21273  003CE8                     
 21274                           ;diskio.c: 461: buff = response();
 21275  003CE8  EC1E  F02C         	call	_response	;wreg free
 21276  003CEC  0100               	movlb	0	; () banked
 21277  003CEE  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 21278                           
 21279                           ; BSR set to: 0
 21280                           ;diskio.c: 462: }while(buff!=0X00);
 21281  003CF0  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 21282  003CF2  A4D8               	btfss	status,2,c
 21283  003CF4  D7F9               	goto	l636
 21284                           
 21285                           ; BSR set to: 0
 21286                           ;diskio.c: 463: proceed();
 21287                           
 21288                           ; BSR set to: 0
 21289  003CF6  EC38  F02C         	call	_proceed	;wreg free
 21290                           
 21291                           ;diskio.c: 464: }
 21292  003CFA  D021               	goto	l641
 21293  003CFC                     l635:
 21294                           
 21295                           ;diskio.c: 465: else
 21296                           ;diskio.c: 466: {
 21297                           ;diskio.c: 467: dummy_clocks(10);
 21298  003CFC  0E0A               	movlw	10
 21299  003CFE  EC49  F02A         	call	_dummy_clocks
 21300                           
 21301                           ;diskio.c: 468: command(0X51,sector ,0X00);
 21302  003D02  C06E  F065         	movff	sdc_disk_read@sector,command@arg
 21303  003D06  C06F  F066         	movff	sdc_disk_read@sector+1,command@arg+1
 21304  003D0A  C070  F067         	movff	sdc_disk_read@sector+2,command@arg+2
 21305  003D0E  C071  F068         	movff	sdc_disk_read@sector+3,command@arg+3
 21306  003D12  0E00               	movlw	0
 21307  003D14  0100               	movlb	0	; () banked
 21308  003D16  6F69               	movwf	command@CRC& (0+255),b
 21309  003D18  0E51               	movlw	81
 21310  003D1A  EC1A  F028         	call	_command
 21311                           
 21312                           ;diskio.c: 469: proceed();
 21313  003D1E  EC38  F02C         	call	_proceed	;wreg free
 21314  003D22                     
 21315                           ;diskio.c: 471: buff = response();
 21316  003D22  EC1E  F02C         	call	_response	;wreg free
 21317  003D26  0100               	movlb	0	; () banked
 21318  003D28  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 21319                           
 21320                           ; BSR set to: 0
 21321                           ;diskio.c: 472: }while(buff!=0X00);
 21322  003D2A  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 21323  003D2C  A4D8               	btfss	status,2,c
 21324  003D2E  D7F9               	goto	l639
 21325                           
 21326                           ; BSR set to: 0
 21327                           ;diskio.c: 473: proceed();
 21328                           
 21329                           ; BSR set to: 0
 21330  003D30  EC38  F02C         	call	_proceed	;wreg free
 21331                           
 21332                           ;diskio.c: 474: }
 21333                           ;diskio.c: 478: while(buff!=0xFE)
 21334  003D34  D004               	goto	l641
 21335  003D36                     
 21336                           ;diskio.c: 479: {
 21337                           ;diskio.c: 480: buff = response();
 21338  003D36  EC1E  F02C         	call	_response	;wreg free
 21339  003D3A  0100               	movlb	0	; () banked
 21340  003D3C  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 21341  003D3E                     l641:
 21342                           
 21343                           ; BSR set to: 0
 21344  003D3E  0EFE               	movlw	254
 21345  003D40  0100               	movlb	0	; () banked
 21346  003D42  197E               	xorwf	sdc_disk_read@buff& (0+255),w,b
 21347  003D44  A4D8               	btfss	status,2,c
 21348  003D46  D7F7               	goto	l642
 21349                           
 21350                           ; BSR set to: 0
 21351                           ;diskio.c: 481: }
 21352                           ;diskio.c: 483: length = 0;
 21353                           
 21354                           ; BSR set to: 0
 21355  003D48  0E00               	movlw	0
 21356  003D4A  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 21357  003D4C  0E00               	movlw	0
 21358  003D4E  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 21359                           
 21360                           ;diskio.c: 484: while ( length < 512 )
 21361  003D50  D00C               	goto	l644
 21362  003D52                     
 21363                           ; BSR set to: 0
 21364                           ;diskio.c: 485: {
 21365                           ;diskio.c: 486: p_buff[length] = response();
 21366                           
 21367                           ; BSR set to: 0
 21368  003D52  517C               	movf	sdc_disk_read@length& (0+255),w,b
 21369  003D54  256C               	addwf	sdc_disk_read@p_buff& (0+255),w,b
 21370  003D56  6ED9               	movwf	fsr2l,c
 21371  003D58  517D               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 21372  003D5A  216D               	addwfc	(sdc_disk_read@p_buff+1)& (0+255),w,b
 21373  003D5C  6EDA               	movwf	fsr2h,c
 21374  003D5E  EC1E  F02C         	call	_response	;wreg free
 21375  003D62  6EDF               	movwf	indf2,c
 21376                           
 21377                           ;diskio.c: 487: length++;
 21378  003D64  0100               	movlb	0	; () banked
 21379  003D66  4B7C               	infsnz	sdc_disk_read@length& (0+255),f,b
 21380  003D68  2B7D               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 21381  003D6A                     l644:
 21382                           
 21383                           ; BSR set to: 0
 21384                           
 21385                           ; BSR set to: 0
 21386  003D6A  BF7D               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 21387  003D6C  D7F2               	goto	l645
 21388  003D6E  0E02               	movlw	2
 21389  003D70  5D7D               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 21390  003D72  A0D8               	btfss	status,0,c
 21391  003D74  D7EE               	goto	l645
 21392                           
 21393                           ; BSR set to: 0
 21394                           ;diskio.c: 488: }
 21395                           ;diskio.c: 490: length = 0;
 21396                           
 21397                           ; BSR set to: 0
 21398  003D76  0E00               	movlw	0
 21399  003D78  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 21400  003D7A  0E00               	movlw	0
 21401  003D7C  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 21402                           
 21403                           ; BSR set to: 0
 21404                           ;diskio.c: 491: dummy_clocks(10);
 21405  003D7E  0E0A               	movlw	10
 21406  003D80  EC49  F02A         	call	_dummy_clocks
 21407                           
 21408                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 21409  003D84  0E00               	movlw	0
 21410  003D86  0100               	movlb	0	; () banked
 21411  003D88  6F65               	movwf	command@arg& (0+255),b
 21412  003D8A  0E00               	movlw	0
 21413  003D8C  6F66               	movwf	(command@arg+1)& (0+255),b
 21414  003D8E  0E00               	movlw	0
 21415  003D90  6F67               	movwf	(command@arg+2)& (0+255),b
 21416  003D92  0E00               	movlw	0
 21417  003D94  6F68               	movwf	(command@arg+3)& (0+255),b
 21418  003D96  0E00               	movlw	0
 21419  003D98  6F69               	movwf	command@CRC& (0+255),b
 21420  003D9A  0E4C               	movlw	76
 21421  003D9C  EC1A  F028         	call	_command
 21422                           
 21423                           ;diskio.c: 494: proceed();
 21424  003DA0  EC38  F02C         	call	_proceed	;wreg free
 21425  003DA4                     
 21426                           ;diskio.c: 496: buff = response();
 21427  003DA4  EC1E  F02C         	call	_response	;wreg free
 21428  003DA8  0100               	movlb	0	; () banked
 21429  003DAA  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 21430                           
 21431                           ; BSR set to: 0
 21432                           ;diskio.c: 497: }while(buff!=0xFF);
 21433  003DAC  297E               	incf	sdc_disk_read@buff& (0+255),w,b
 21434  003DAE  A4D8               	btfss	status,2,c
 21435  003DB0  D7F9               	goto	l647
 21436                           
 21437                           ; BSR set to: 0
 21438                           ;diskio.c: 499: length = 0;
 21439                           
 21440                           ; BSR set to: 0
 21441  003DB2  0E00               	movlw	0
 21442  003DB4  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 21443  003DB6  0E00               	movlw	0
 21444  003DB8  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 21445                           
 21446                           ; BSR set to: 0
 21447                           ;diskio.c: 500: return RES_OK;
 21448  003DBA  0E00               	movlw	0
 21449  003DBC  0012               	return	
 21450  003DBE                     __end_of_sdc_disk_read:
 21451                           	opt stack 0
 21452                           tosu	equ	0xFFF
 21453                           tosh	equ	0xFFE
 21454                           tosl	equ	0xFFD
 21455                           pclath	equ	0xFFA
 21456                           tblptru	equ	0xFF8
 21457                           tblptrh	equ	0xFF7
 21458                           tblptrl	equ	0xFF6
 21459                           tablat	equ	0xFF5
 21460                           prodh	equ	0xFF4
 21461                           prodl	equ	0xFF3
 21462                           intcon	equ	0xFF2
 21463                           intcon2	equ	0xFF1
 21464                           intcon3	equ	0xFF0
 21465                           indf0	equ	0xFEF
 21466                           postinc0	equ	0xFEE
 21467                           fsr0h	equ	0xFEA
 21468                           fsr0l	equ	0xFE9
 21469                           wreg	equ	0xFE8
 21470                           indf1	equ	0xFE7
 21471                           postinc1	equ	0xFE6
 21472                           postdec1	equ	0xFE5
 21473                           plusw1	equ	0xFE3
 21474                           fsr1h	equ	0xFE2
 21475                           fsr1l	equ	0xFE1
 21476                           indf2	equ	0xFDF
 21477                           postinc2	equ	0xFDE
 21478                           postdec2	equ	0xFDD
 21479                           plusw2	equ	0xFDB
 21480                           fsr2h	equ	0xFDA
 21481                           fsr2l	equ	0xFD9
 21482                           status	equ	0xFD8
 21483                           
 21484 ;; *************** function _response *****************
 21485 ;; Defined at:
 21486 ;;		line 59 in file "bibliotecas/SDCard.c"
 21487 ;; Parameters:    Size  Location     Type
 21488 ;;		None
 21489 ;; Auto vars:     Size  Location     Type
 21490 ;;  buff            1    0[BANK0 ] unsigned char 
 21491 ;; Return value:  Size  Location     Type
 21492 ;;                  1    wreg      unsigned char 
 21493 ;; Registers used:
 21494 ;;		wreg, status,2, cstack
 21495 ;; Tracked objects:
 21496 ;;		On entry : 0/0
 21497 ;;		On exit  : 0/0
 21498 ;;		Unchanged: 0/0
 21499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21500 ;;      Params:         0       0       0       0       0       0       0       0       0
 21501 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21502 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21503 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21504 ;;Total ram usage:        1 bytes
 21505 ;; Hardware stack levels used:    1
 21506 ;; Hardware stack levels required when called:    4
 21507 ;; This function calls:
 21508 ;;		_leitura_SPI
 21509 ;; This function is called by:
 21510 ;;		_sdc_reset
 21511 ;;		_sdc_disk_initialize
 21512 ;;		_sdc_disk_read
 21513 ;;		_sdc_disk_write
 21514 ;; This function uses a non-reentrant model
 21515 ;;
 21516                           
 21517                           	psect	text75
 21518  00583C                     __ptext75:
 21519                           	opt stack 0
 21520  00583C                     _response:
 21521                           	opt stack 16
 21522                           
 21523                           ;SDCard.c: 61: unsigned char buff;
 21524                           ;SDCard.c: 62: LATBbits.LATB4 = 0;
 21525                           
 21526                           ; BSR set to: 0
 21527                           ;incstack = 0
 21528  00583C  988A               	bcf	3978,4,c	;volatile
 21529                           
 21530                           ;SDCard.c: 63: buff= leitura_SPI();
 21531  00583E  EC3E  F02C         	call	_leitura_SPI	;wreg free
 21532  005842  0100               	movlb	0	; () banked
 21533  005844  6F60               	movwf	response@buff& (0+255),b
 21534                           
 21535                           ; BSR set to: 0
 21536                           ;SDCard.c: 64: return buff;
 21537  005846  5160               	movf	response@buff& (0+255),w,b
 21538  005848  0012               	return	
 21539  00584A                     __end_of_response:
 21540                           	opt stack 0
 21541                           tosu	equ	0xFFF
 21542                           tosh	equ	0xFFE
 21543                           tosl	equ	0xFFD
 21544                           pclath	equ	0xFFA
 21545                           tblptru	equ	0xFF8
 21546                           tblptrh	equ	0xFF7
 21547                           tblptrl	equ	0xFF6
 21548                           tablat	equ	0xFF5
 21549                           prodh	equ	0xFF4
 21550                           prodl	equ	0xFF3
 21551                           intcon	equ	0xFF2
 21552                           intcon2	equ	0xFF1
 21553                           intcon3	equ	0xFF0
 21554                           indf0	equ	0xFEF
 21555                           postinc0	equ	0xFEE
 21556                           fsr0h	equ	0xFEA
 21557                           fsr0l	equ	0xFE9
 21558                           wreg	equ	0xFE8
 21559                           indf1	equ	0xFE7
 21560                           postinc1	equ	0xFE6
 21561                           postdec1	equ	0xFE5
 21562                           plusw1	equ	0xFE3
 21563                           fsr1h	equ	0xFE2
 21564                           fsr1l	equ	0xFE1
 21565                           indf2	equ	0xFDF
 21566                           postinc2	equ	0xFDE
 21567                           postdec2	equ	0xFDD
 21568                           plusw2	equ	0xFDB
 21569                           fsr2h	equ	0xFDA
 21570                           fsr2l	equ	0xFD9
 21571                           status	equ	0xFD8
 21572                           
 21573 ;; *************** function _proceed *****************
 21574 ;; Defined at:
 21575 ;;		line 92 in file "bibliotecas/SDCard.c"
 21576 ;; Parameters:    Size  Location     Type
 21577 ;;		None
 21578 ;; Auto vars:     Size  Location     Type
 21579 ;;		None
 21580 ;; Return value:  Size  Location     Type
 21581 ;;                  1    wreg      void 
 21582 ;; Registers used:
 21583 ;;		wreg, cstack
 21584 ;; Tracked objects:
 21585 ;;		On entry : 0/0
 21586 ;;		On exit  : 0/0
 21587 ;;		Unchanged: 0/0
 21588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21589 ;;      Params:         0       0       0       0       0       0       0       0       0
 21590 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21591 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21592 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21593 ;;Total ram usage:        0 bytes
 21594 ;; Hardware stack levels used:    1
 21595 ;; Hardware stack levels required when called:    4
 21596 ;; This function calls:
 21597 ;;		_escreve_SPI
 21598 ;; This function is called by:
 21599 ;;		_sdc_reset
 21600 ;;		_sdc_disk_initialize
 21601 ;;		_sdc_disk_read
 21602 ;;		_sdc_disk_write
 21603 ;;		_sdcard_init
 21604 ;; This function uses a non-reentrant model
 21605 ;;
 21606                           
 21607                           	psect	text76
 21608  005870                     __ptext76:
 21609                           	opt stack 0
 21610  005870                     _proceed:
 21611                           	opt stack 16
 21612                           
 21613                           ;SDCard.c: 94: LATBbits.LATB4 = 0;
 21614                           
 21615                           ; BSR set to: 0
 21616                           ;incstack = 0
 21617  005870  988A               	bcf	3978,4,c	;volatile
 21618                           
 21619                           ;SDCard.c: 95: escreve_SPI(0xFF);
 21620  005872  0EFF               	movlw	255
 21621  005874  ECFB  F02B         	call	_escreve_SPI
 21622                           
 21623                           ;SDCard.c: 96: LATBbits.LATB4 = 1;
 21624  005878  888A               	bsf	3978,4,c	;volatile
 21625  00587A  0012               	return		;funcret
 21626  00587C                     __end_of_proceed:
 21627                           	opt stack 0
 21628                           tosu	equ	0xFFF
 21629                           tosh	equ	0xFFE
 21630                           tosl	equ	0xFFD
 21631                           pclath	equ	0xFFA
 21632                           tblptru	equ	0xFF8
 21633                           tblptrh	equ	0xFF7
 21634                           tblptrl	equ	0xFF6
 21635                           tablat	equ	0xFF5
 21636                           prodh	equ	0xFF4
 21637                           prodl	equ	0xFF3
 21638                           intcon	equ	0xFF2
 21639                           intcon2	equ	0xFF1
 21640                           intcon3	equ	0xFF0
 21641                           indf0	equ	0xFEF
 21642                           postinc0	equ	0xFEE
 21643                           fsr0h	equ	0xFEA
 21644                           fsr0l	equ	0xFE9
 21645                           wreg	equ	0xFE8
 21646                           indf1	equ	0xFE7
 21647                           postinc1	equ	0xFE6
 21648                           postdec1	equ	0xFE5
 21649                           plusw1	equ	0xFE3
 21650                           fsr1h	equ	0xFE2
 21651                           fsr1l	equ	0xFE1
 21652                           indf2	equ	0xFDF
 21653                           postinc2	equ	0xFDE
 21654                           postdec2	equ	0xFDD
 21655                           plusw2	equ	0xFDB
 21656                           fsr2h	equ	0xFDA
 21657                           fsr2l	equ	0xFD9
 21658                           status	equ	0xFD8
 21659                           
 21660 ;; *************** function _command *****************
 21661 ;; Defined at:
 21662 ;;		line 125 in file "bibliotecas/SDCard.c"
 21663 ;; Parameters:    Size  Location     Type
 21664 ;;  CMD             1    wreg     unsigned char 
 21665 ;;  arg             4    5[BANK0 ] unsigned long 
 21666 ;;  CRC             1    9[BANK0 ] unsigned char 
 21667 ;; Auto vars:     Size  Location     Type
 21668 ;;  CMD             1   10[BANK0 ] unsigned char 
 21669 ;;  argument        1   11[BANK0 ] unsigned char 
 21670 ;; Return value:  Size  Location     Type
 21671 ;;                  1    wreg      void 
 21672 ;; Registers used:
 21673 ;;		wreg, status,2, status,0, cstack
 21674 ;; Tracked objects:
 21675 ;;		On entry : 0/0
 21676 ;;		On exit  : 0/0
 21677 ;;		Unchanged: 0/0
 21678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21679 ;;      Params:         0       5       0       0       0       0       0       0       0
 21680 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21681 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21682 ;;      Totals:         0       7       0       0       0       0       0       0       0
 21683 ;;Total ram usage:        7 bytes
 21684 ;; Hardware stack levels used:    1
 21685 ;; Hardware stack levels required when called:    5
 21686 ;; This function calls:
 21687 ;;		_dummy_clocks
 21688 ;;		_escreve_SPI
 21689 ;;		_wait_ready
 21690 ;; This function is called by:
 21691 ;;		_sdc_reset
 21692 ;;		_sdc_disk_initialize
 21693 ;;		_sdc_disk_read
 21694 ;;		_sdc_disk_write
 21695 ;; This function uses a non-reentrant model
 21696 ;;
 21697                           
 21698                           	psect	text77
 21699  005034                     __ptext77:
 21700                           	opt stack 0
 21701  005034                     _command:
 21702                           	opt stack 15
 21703                           
 21704                           ;incstack = 0
 21705                           ;command@CMD stored from wreg
 21706  005034  0100               	movlb	0	; () banked
 21707  005036  6F6A               	movwf	command@CMD& (0+255),b
 21708                           
 21709                           ;SDCard.c: 127: unsigned char argument;
 21710                           ;SDCard.c: 129: if (wait_ready() != 0xFF)
 21711  005038  ECE9  F02A         	call	_wait_ready	;wreg free
 21712  00503C  0AFF               	xorlw	255
 21713  00503E  A4D8               	btfss	status,2,c
 21714  005040  D004               	goto	l430
 21715  005042  D008               	goto	u12320
 21716  005044                     
 21717                           ;SDCard.c: 132: {
 21718                           ;SDCard.c: 133: dummy_clocks(10);
 21719  005044  0E0A               	movlw	10
 21720  005046  EC49  F02A         	call	_dummy_clocks
 21721  00504A                     l430:
 21722  00504A  ECE9  F02A         	call	_wait_ready	;wreg free
 21723  00504E  0AFF               	xorlw	255
 21724  005050  A4D8               	btfss	status,2,c
 21725  005052  D7F8               	goto	l431
 21726  005054                     u12320:
 21727                           
 21728                           ;SDCard.c: 134: }
 21729                           ;SDCard.c: 135: }
 21730                           ;SDCard.c: 136: escreve_SPI(0xFF);
 21731  005054  0EFF               	movlw	255
 21732  005056  ECFB  F02B         	call	_escreve_SPI
 21733                           
 21734                           ;SDCard.c: 137: escreve_SPI(CMD);
 21735  00505A  0100               	movlb	0	; () banked
 21736  00505C  516A               	movf	command@CMD& (0+255),w,b
 21737  00505E  ECFB  F02B         	call	_escreve_SPI
 21738                           
 21739                           ;SDCard.c: 138: argument = arg>>24;
 21740  005062  C068  F06B         	movff	command@arg+3,command@argument
 21741                           
 21742                           ;SDCard.c: 139: escreve_SPI(argument);
 21743  005066  0100               	movlb	0	; () banked
 21744  005068  516B               	movf	command@argument& (0+255),w,b
 21745  00506A  ECFB  F02B         	call	_escreve_SPI
 21746                           
 21747                           ;SDCard.c: 140: argument = arg>>16;
 21748  00506E  C067  F06B         	movff	command@arg+2,command@argument
 21749                           
 21750                           ;SDCard.c: 141: escreve_SPI(argument);
 21751  005072  0100               	movlb	0	; () banked
 21752  005074  516B               	movf	command@argument& (0+255),w,b
 21753  005076  ECFB  F02B         	call	_escreve_SPI
 21754                           
 21755                           ;SDCard.c: 142: argument = arg>>8;
 21756  00507A  C066  F06B         	movff	command@arg+1,command@argument
 21757                           
 21758                           ;SDCard.c: 143: escreve_SPI(argument);
 21759  00507E  0100               	movlb	0	; () banked
 21760  005080  516B               	movf	command@argument& (0+255),w,b
 21761  005082  ECFB  F02B         	call	_escreve_SPI
 21762                           
 21763                           ;SDCard.c: 144: argument = arg;
 21764  005086  C065  F06B         	movff	command@arg,command@argument
 21765                           
 21766                           ;SDCard.c: 145: escreve_SPI(argument);
 21767  00508A  0100               	movlb	0	; () banked
 21768  00508C  516B               	movf	command@argument& (0+255),w,b
 21769  00508E  ECFB  F02B         	call	_escreve_SPI
 21770                           
 21771                           ;SDCard.c: 146: escreve_SPI(CRC);
 21772  005092  0100               	movlb	0	; () banked
 21773  005094  5169               	movf	command@CRC& (0+255),w,b
 21774  005096  ECFB  F02B         	call	_escreve_SPI
 21775  00509A  0012               	return		;funcret
 21776  00509C                     __end_of_command:
 21777                           	opt stack 0
 21778                           tosu	equ	0xFFF
 21779                           tosh	equ	0xFFE
 21780                           tosl	equ	0xFFD
 21781                           pclath	equ	0xFFA
 21782                           tblptru	equ	0xFF8
 21783                           tblptrh	equ	0xFF7
 21784                           tblptrl	equ	0xFF6
 21785                           tablat	equ	0xFF5
 21786                           prodh	equ	0xFF4
 21787                           prodl	equ	0xFF3
 21788                           intcon	equ	0xFF2
 21789                           intcon2	equ	0xFF1
 21790                           intcon3	equ	0xFF0
 21791                           indf0	equ	0xFEF
 21792                           postinc0	equ	0xFEE
 21793                           fsr0h	equ	0xFEA
 21794                           fsr0l	equ	0xFE9
 21795                           wreg	equ	0xFE8
 21796                           indf1	equ	0xFE7
 21797                           postinc1	equ	0xFE6
 21798                           postdec1	equ	0xFE5
 21799                           plusw1	equ	0xFE3
 21800                           fsr1h	equ	0xFE2
 21801                           fsr1l	equ	0xFE1
 21802                           indf2	equ	0xFDF
 21803                           postinc2	equ	0xFDE
 21804                           postdec2	equ	0xFDD
 21805                           plusw2	equ	0xFDB
 21806                           fsr2h	equ	0xFDA
 21807                           fsr2l	equ	0xFD9
 21808                           status	equ	0xFD8
 21809                           
 21810 ;; *************** function _wait_ready *****************
 21811 ;; Defined at:
 21812 ;;		line 105 in file "bibliotecas/SDCard.c"
 21813 ;; Parameters:    Size  Location     Type
 21814 ;;		None
 21815 ;; Auto vars:     Size  Location     Type
 21816 ;;  msg            10    0        unsigned char [10]
 21817 ;;  timeout         4    0[BANK0 ] unsigned long 
 21818 ;;  res             1    4[BANK0 ] unsigned char 
 21819 ;; Return value:  Size  Location     Type
 21820 ;;                  1    wreg      unsigned char 
 21821 ;; Registers used:
 21822 ;;		wreg, status,2, status,0, cstack
 21823 ;; Tracked objects:
 21824 ;;		On entry : 0/0
 21825 ;;		On exit  : 0/0
 21826 ;;		Unchanged: 0/0
 21827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21828 ;;      Params:         0       0       0       0       0       0       0       0       0
 21829 ;;      Locals:         0       5       0       0       0       0       0       0       0
 21830 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21831 ;;      Totals:         0       5       0       0       0       0       0       0       0
 21832 ;;Total ram usage:        5 bytes
 21833 ;; Hardware stack levels used:    1
 21834 ;; Hardware stack levels required when called:    4
 21835 ;; This function calls:
 21836 ;;		_leitura_SPI
 21837 ;; This function is called by:
 21838 ;;		_command
 21839 ;; This function uses a non-reentrant model
 21840 ;;
 21841                           
 21842                           	psect	text78
 21843  0055D2                     __ptext78:
 21844                           	opt stack 0
 21845  0055D2                     _wait_ready:
 21846                           	opt stack 15
 21847                           
 21848                           ;SDCard.c: 107: BYTE res;
 21849                           ;SDCard.c: 108: DWORD timeout = 0x7FFF;
 21850                           
 21851                           ;incstack = 0
 21852  0055D2  0EFF               	movlw	255
 21853  0055D4  0100               	movlb	0	; () banked
 21854  0055D6  6F60               	movwf	wait_ready@timeout& (0+255),b
 21855  0055D8  0E7F               	movlw	127
 21856  0055DA  6F61               	movwf	(wait_ready@timeout+1)& (0+255),b
 21857  0055DC  0E00               	movlw	0
 21858  0055DE  6F62               	movwf	(wait_ready@timeout+2)& (0+255),b
 21859  0055E0  0E00               	movlw	0
 21860  0055E2  6F63               	movwf	(wait_ready@timeout+3)& (0+255),b
 21861  0055E4                     
 21862                           ; BSR set to: 0
 21863                           ;SDCard.c: 112: res = leitura_SPI();
 21864                           
 21865                           ; BSR set to: 0
 21866  0055E4  EC3E  F02C         	call	_leitura_SPI	;wreg free
 21867  0055E8  0100               	movlb	0	; () banked
 21868  0055EA  6F64               	movwf	wait_ready@res& (0+255),b
 21869                           
 21870                           ; BSR set to: 0
 21871                           ;SDCard.c: 113: while ((res != 0xFF) && (--timeout));
 21872  0055EC  2964               	incf	wait_ready@res& (0+255),w,b
 21873  0055EE  B4D8               	btfsc	status,2,c
 21874  0055F0  D00B               	goto	u12300
 21875                           
 21876                           ; BSR set to: 0
 21877  0055F2  0760               	decf	wait_ready@timeout& (0+255),f,b
 21878  0055F4  0E00               	movlw	0
 21879  0055F6  5B61               	subwfb	(wait_ready@timeout+1)& (0+255),f,b
 21880  0055F8  5B62               	subwfb	(wait_ready@timeout+2)& (0+255),f,b
 21881  0055FA  5B63               	subwfb	(wait_ready@timeout+3)& (0+255),f,b
 21882  0055FC  5160               	movf	wait_ready@timeout& (0+255),w,b
 21883  0055FE  1161               	iorwf	(wait_ready@timeout+1)& (0+255),w,b
 21884  005600  1162               	iorwf	(wait_ready@timeout+2)& (0+255),w,b
 21885  005602  1163               	iorwf	(wait_ready@timeout+3)& (0+255),w,b
 21886  005604  A4D8               	btfss	status,2,c
 21887  005606  D7EE               	goto	l422
 21888  005608                     u12300:
 21889                           
 21890                           ; BSR set to: 0
 21891                           ;SDCard.c: 115: return res;
 21892                           
 21893                           ; BSR set to: 0
 21894                           
 21895                           ; BSR set to: 0
 21896  005608  5164               	movf	wait_ready@res& (0+255),w,b
 21897  00560A  0012               	return	
 21898  00560C                     __end_of_wait_ready:
 21899                           	opt stack 0
 21900                           tosu	equ	0xFFF
 21901                           tosh	equ	0xFFE
 21902                           tosl	equ	0xFFD
 21903                           pclath	equ	0xFFA
 21904                           tblptru	equ	0xFF8
 21905                           tblptrh	equ	0xFF7
 21906                           tblptrl	equ	0xFF6
 21907                           tablat	equ	0xFF5
 21908                           prodh	equ	0xFF4
 21909                           prodl	equ	0xFF3
 21910                           intcon	equ	0xFF2
 21911                           intcon2	equ	0xFF1
 21912                           intcon3	equ	0xFF0
 21913                           indf0	equ	0xFEF
 21914                           postinc0	equ	0xFEE
 21915                           fsr0h	equ	0xFEA
 21916                           fsr0l	equ	0xFE9
 21917                           wreg	equ	0xFE8
 21918                           indf1	equ	0xFE7
 21919                           postinc1	equ	0xFE6
 21920                           postdec1	equ	0xFE5
 21921                           plusw1	equ	0xFE3
 21922                           fsr1h	equ	0xFE2
 21923                           fsr1l	equ	0xFE1
 21924                           indf2	equ	0xFDF
 21925                           postinc2	equ	0xFDE
 21926                           postdec2	equ	0xFDD
 21927                           plusw2	equ	0xFDB
 21928                           fsr2h	equ	0xFDA
 21929                           fsr2l	equ	0xFD9
 21930                           status	equ	0xFD8
 21931                           
 21932 ;; *************** function _escreve_SPI *****************
 21933 ;; Defined at:
 21934 ;;		line 98 in file "bibliotecas/SPI.c"
 21935 ;; Parameters:    Size  Location     Type
 21936 ;;  dado            1    wreg     unsigned char 
 21937 ;; Auto vars:     Size  Location     Type
 21938 ;;  dado            1    1[BANK0 ] unsigned char 
 21939 ;;  TempVar         1    0[BANK0 ] unsigned char 
 21940 ;; Return value:  Size  Location     Type
 21941 ;;                  1    wreg      void 
 21942 ;; Registers used:
 21943 ;;		wreg
 21944 ;; Tracked objects:
 21945 ;;		On entry : 0/0
 21946 ;;		On exit  : 0/0
 21947 ;;		Unchanged: 0/0
 21948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21949 ;;      Params:         0       0       0       0       0       0       0       0       0
 21950 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21951 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21952 ;;      Totals:         0       2       0       0       0       0       0       0       0
 21953 ;;Total ram usage:        2 bytes
 21954 ;; Hardware stack levels used:    1
 21955 ;; Hardware stack levels required when called:    3
 21956 ;; This function calls:
 21957 ;;		Nothing
 21958 ;; This function is called by:
 21959 ;;		_proceed
 21960 ;;		_command
 21961 ;;		_sdc_disk_write
 21962 ;; This function uses a non-reentrant model
 21963 ;;
 21964                           
 21965                           	psect	text79
 21966  0057F6                     __ptext79:
 21967                           	opt stack 0
 21968  0057F6                     _escreve_SPI:
 21969                           	opt stack 16
 21970                           
 21971                           ; BSR set to: 0
 21972                           ;incstack = 0
 21973                           ;escreve_SPI@dado stored from wreg
 21974  0057F6  0100               	movlb	0	; () banked
 21975  0057F8  6F61               	movwf	escreve_SPI@dado& (0+255),b
 21976                           
 21977                           ;SPI.c: 100: unsigned char TempVar;
 21978                           ;SPI.c: 101: TempVar = SSPBUF;
 21979  0057FA  CFC9 F060          	movff	4041,escreve_SPI@TempVar	;volatile
 21980                           
 21981                           ;SPI.c: 102: PIR1bits.SSPIF = 0;
 21982  0057FE  969E               	bcf	3998,3,c	;volatile
 21983                           
 21984                           ;SPI.c: 104: SSPBUF = dado;
 21985  005800  C061  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 21986  005804  B69E               	btfsc	3998,3,c	;volatile
 21987  005806  0012               	return	
 21988  005808  D7FD               	goto	l506
 21989  00580A                     __end_of_escreve_SPI:
 21990                           	opt stack 0
 21991                           tosu	equ	0xFFF
 21992                           tosh	equ	0xFFE
 21993                           tosl	equ	0xFFD
 21994                           pclath	equ	0xFFA
 21995                           tblptru	equ	0xFF8
 21996                           tblptrh	equ	0xFF7
 21997                           tblptrl	equ	0xFF6
 21998                           tablat	equ	0xFF5
 21999                           prodh	equ	0xFF4
 22000                           prodl	equ	0xFF3
 22001                           intcon	equ	0xFF2
 22002                           intcon2	equ	0xFF1
 22003                           intcon3	equ	0xFF0
 22004                           indf0	equ	0xFEF
 22005                           postinc0	equ	0xFEE
 22006                           fsr0h	equ	0xFEA
 22007                           fsr0l	equ	0xFE9
 22008                           wreg	equ	0xFE8
 22009                           indf1	equ	0xFE7
 22010                           postinc1	equ	0xFE6
 22011                           postdec1	equ	0xFE5
 22012                           plusw1	equ	0xFE3
 22013                           fsr1h	equ	0xFE2
 22014                           fsr1l	equ	0xFE1
 22015                           indf2	equ	0xFDF
 22016                           postinc2	equ	0xFDE
 22017                           postdec2	equ	0xFDD
 22018                           plusw2	equ	0xFDB
 22019                           fsr2h	equ	0xFDA
 22020                           fsr2l	equ	0xFD9
 22021                           status	equ	0xFD8
 22022                           
 22023 ;; *************** function _dummy_clocks *****************
 22024 ;; Defined at:
 22025 ;;		line 74 in file "bibliotecas/SDCard.c"
 22026 ;; Parameters:    Size  Location     Type
 22027 ;;  n               1    wreg     unsigned char 
 22028 ;; Auto vars:     Size  Location     Type
 22029 ;;  n               1    2[BANK0 ] unsigned char 
 22030 ;;  i               2    3[BANK0 ] unsigned int 
 22031 ;; Return value:  Size  Location     Type
 22032 ;;                  1    wreg      void 
 22033 ;; Registers used:
 22034 ;;		wreg, status,2, status,0, cstack
 22035 ;; Tracked objects:
 22036 ;;		On entry : 0/0
 22037 ;;		On exit  : 0/0
 22038 ;;		Unchanged: 0/0
 22039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22040 ;;      Params:         0       0       0       0       0       0       0       0       0
 22041 ;;      Locals:         0       3       0       0       0       0       0       0       0
 22042 ;;      Temps:          0       2       0       0       0       0       0       0       0
 22043 ;;      Totals:         0       5       0       0       0       0       0       0       0
 22044 ;;Total ram usage:        5 bytes
 22045 ;; Hardware stack levels used:    1
 22046 ;; Hardware stack levels required when called:    4
 22047 ;; This function calls:
 22048 ;;		_leitura_SPI
 22049 ;; This function is called by:
 22050 ;;		_command
 22051 ;;		_sdc_disk_initialize
 22052 ;;		_sdc_disk_read
 22053 ;;		_sdc_disk_write
 22054 ;; This function uses a non-reentrant model
 22055 ;;
 22056                           
 22057                           	psect	text80
 22058  005492                     __ptext80:
 22059                           	opt stack 0
 22060  005492                     _dummy_clocks:
 22061                           	opt stack 16
 22062                           
 22063                           ;incstack = 0
 22064                           ;dummy_clocks@n stored from wreg
 22065  005492  0100               	movlb	0	; () banked
 22066  005494  6F62               	movwf	dummy_clocks@n& (0+255),b
 22067                           
 22068                           ;SDCard.c: 76: unsigned int i;
 22069                           ;SDCard.c: 77: _delay((unsigned long)((1)*(48000000/4000.0)));
 22070  005496  0E10               	movlw	16
 22071  005498  0100               	movlb	0	; () banked
 22072  00549A  6F60               	movwf	??_dummy_clocks& (0+255),b
 22073  00549C  0E94               	movlw	148
 22074  00549E                     u17747:
 22075  00549E  2EE8               	decfsz	wreg,f,c
 22076  0054A0  D7FE               	bra	u17747
 22077  0054A2  2F60               	decfsz	??_dummy_clocks& (0+255),f,b
 22078  0054A4  D7FC               	bra	u17747
 22079  0054A6  F000               	nop	
 22080                           
 22081                           ;SDCard.c: 78: for(i=0;i<n;i++)
 22082  0054A8  0E00               	movlw	0
 22083  0054AA  0100               	movlb	0	; () banked
 22084  0054AC  6F64               	movwf	(dummy_clocks@i+1)& (0+255),b
 22085  0054AE  0E00               	movlw	0
 22086  0054B0  6F63               	movwf	dummy_clocks@i& (0+255),b
 22087  0054B2  D007               	goto	l413
 22088  0054B4                     l414:
 22089                           
 22090                           ; BSR set to: 0
 22091                           ;SDCard.c: 79: {
 22092                           ;SDCard.c: 80: LATBbits.LATB4 = 1;
 22093  0054B4  888A               	bsf	3978,4,c	;volatile
 22094                           
 22095                           ; BSR set to: 0
 22096                           ;SDCard.c: 81: leitura_SPI();
 22097  0054B6  EC3E  F02C         	call	_leitura_SPI	;wreg free
 22098                           
 22099                           ;SDCard.c: 82: LATBbits.LATB4 = 0;
 22100  0054BA  988A               	bcf	3978,4,c	;volatile
 22101  0054BC  0100               	movlb	0	; () banked
 22102  0054BE  4B63               	infsnz	dummy_clocks@i& (0+255),f,b
 22103  0054C0  2B64               	incf	(dummy_clocks@i+1)& (0+255),f,b
 22104  0054C2                     l413:
 22105                           
 22106                           ; BSR set to: 0
 22107                           
 22108                           ; BSR set to: 0
 22109  0054C2  5162               	movf	dummy_clocks@n& (0+255),w,b
 22110  0054C4  6F60               	movwf	??_dummy_clocks& (0+255),b
 22111  0054C6  6B61               	clrf	(??_dummy_clocks+1)& (0+255),b
 22112  0054C8  5160               	movf	??_dummy_clocks& (0+255),w,b
 22113  0054CA  5D63               	subwf	dummy_clocks@i& (0+255),w,b
 22114  0054CC  5161               	movf	(??_dummy_clocks+1)& (0+255),w,b
 22115  0054CE  5964               	subwfb	(dummy_clocks@i+1)& (0+255),w,b
 22116  0054D0  B0D8               	btfsc	status,0,c
 22117  0054D2  0012               	return	
 22118  0054D4  D7EF               	goto	l414
 22119  0054D6                     __end_of_dummy_clocks:
 22120                           	opt stack 0
 22121                           tosu	equ	0xFFF
 22122                           tosh	equ	0xFFE
 22123                           tosl	equ	0xFFD
 22124                           pclath	equ	0xFFA
 22125                           tblptru	equ	0xFF8
 22126                           tblptrh	equ	0xFF7
 22127                           tblptrl	equ	0xFF6
 22128                           tablat	equ	0xFF5
 22129                           prodh	equ	0xFF4
 22130                           prodl	equ	0xFF3
 22131                           intcon	equ	0xFF2
 22132                           intcon2	equ	0xFF1
 22133                           intcon3	equ	0xFF0
 22134                           indf0	equ	0xFEF
 22135                           postinc0	equ	0xFEE
 22136                           fsr0h	equ	0xFEA
 22137                           fsr0l	equ	0xFE9
 22138                           wreg	equ	0xFE8
 22139                           indf1	equ	0xFE7
 22140                           postinc1	equ	0xFE6
 22141                           postdec1	equ	0xFE5
 22142                           plusw1	equ	0xFE3
 22143                           fsr1h	equ	0xFE2
 22144                           fsr1l	equ	0xFE1
 22145                           indf2	equ	0xFDF
 22146                           postinc2	equ	0xFDE
 22147                           postdec2	equ	0xFDD
 22148                           plusw2	equ	0xFDB
 22149                           fsr2h	equ	0xFDA
 22150                           fsr2l	equ	0xFD9
 22151                           status	equ	0xFD8
 22152                           
 22153 ;; *************** function _leitura_SPI *****************
 22154 ;; Defined at:
 22155 ;;		line 83 in file "bibliotecas/SPI.c"
 22156 ;; Parameters:    Size  Location     Type
 22157 ;;		None
 22158 ;; Auto vars:     Size  Location     Type
 22159 ;;		None
 22160 ;; Return value:  Size  Location     Type
 22161 ;;                  1    wreg      unsigned char 
 22162 ;; Registers used:
 22163 ;;		wreg, status,2
 22164 ;; Tracked objects:
 22165 ;;		On entry : 0/0
 22166 ;;		On exit  : 0/0
 22167 ;;		Unchanged: 0/0
 22168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22169 ;;      Params:         0       0       0       0       0       0       0       0       0
 22170 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22171 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22172 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22173 ;;Total ram usage:        0 bytes
 22174 ;; Hardware stack levels used:    1
 22175 ;; Hardware stack levels required when called:    3
 22176 ;; This function calls:
 22177 ;;		Nothing
 22178 ;; This function is called by:
 22179 ;;		_response
 22180 ;;		_dummy_clocks
 22181 ;;		_wait_ready
 22182 ;;		_sdc_disk_write
 22183 ;; This function uses a non-reentrant model
 22184 ;;
 22185                           
 22186                           	psect	text81
 22187  00587C                     __ptext81:
 22188                           	opt stack 0
 22189  00587C                     _leitura_SPI:
 22190                           	opt stack 16
 22191                           
 22192                           ;SPI.c: 85: SSPBUF = 0xFF;
 22193                           
 22194                           ; BSR set to: 0
 22195                           ;incstack = 0
 22196  00587C  68C9               	setf	4041,c	;volatile
 22197                           
 22198                           ;SPI.c: 86: SSPSTATbits.BF = 0;
 22199  00587E  90C7               	bcf	4039,0,c	;volatile
 22200  005880  A0C7               	btfss	4039,0,c	;volatile
 22201  005882  D7FE               	goto	l500
 22202                           
 22203                           ;SPI.c: 88: return (SSPBUF);
 22204  005884  50C9               	movf	4041,w,c	;volatile
 22205  005886  0012               	return	
 22206  005888                     __end_of_leitura_SPI:
 22207                           	opt stack 0
 22208                           tosu	equ	0xFFF
 22209                           tosh	equ	0xFFE
 22210                           tosl	equ	0xFFD
 22211                           pclath	equ	0xFFA
 22212                           tblptru	equ	0xFF8
 22213                           tblptrh	equ	0xFF7
 22214                           tblptrl	equ	0xFF6
 22215                           tablat	equ	0xFF5
 22216                           prodh	equ	0xFF4
 22217                           prodl	equ	0xFF3
 22218                           intcon	equ	0xFF2
 22219                           intcon2	equ	0xFF1
 22220                           intcon3	equ	0xFF0
 22221                           indf0	equ	0xFEF
 22222                           postinc0	equ	0xFEE
 22223                           fsr0h	equ	0xFEA
 22224                           fsr0l	equ	0xFE9
 22225                           wreg	equ	0xFE8
 22226                           indf1	equ	0xFE7
 22227                           postinc1	equ	0xFE6
 22228                           postdec1	equ	0xFE5
 22229                           plusw1	equ	0xFE3
 22230                           fsr1h	equ	0xFE2
 22231                           fsr1l	equ	0xFE1
 22232                           indf2	equ	0xFDF
 22233                           postinc2	equ	0xFDE
 22234                           postdec2	equ	0xFDD
 22235                           plusw2	equ	0xFDB
 22236                           fsr2h	equ	0xFDA
 22237                           fsr2l	equ	0xFD9
 22238                           status	equ	0xFD8
 22239                           
 22240 ;; *************** function _disk_ioctl *****************
 22241 ;; Defined at:
 22242 ;;		line 198 in file "bibliotecas/diskio.c"
 22243 ;; Parameters:    Size  Location     Type
 22244 ;;  pdrv            1    wreg     unsigned char 
 22245 ;;  cmd             1    0[BANK0 ] unsigned char 
 22246 ;;  buff            2    1[BANK0 ] PTR void 
 22247 ;;		 -> NULL(0), 
 22248 ;; Auto vars:     Size  Location     Type
 22249 ;;  pdrv            1    3[BANK0 ] unsigned char 
 22250 ;;  result          2    0        int 
 22251 ;;  res             1    4[BANK0 ] enum E25
 22252 ;; Return value:  Size  Location     Type
 22253 ;;                  1    wreg      enum E25
 22254 ;; Registers used:
 22255 ;;		wreg, status,2, status,0
 22256 ;; Tracked objects:
 22257 ;;		On entry : 0/0
 22258 ;;		On exit  : 0/0
 22259 ;;		Unchanged: 0/0
 22260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22261 ;;      Params:         0       3       0       0       0       0       0       0       0
 22262 ;;      Locals:         0       2       0       0       0       0       0       0       0
 22263 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22264 ;;      Totals:         0       5       0       0       0       0       0       0       0
 22265 ;;Total ram usage:        5 bytes
 22266 ;; Hardware stack levels used:    1
 22267 ;; Hardware stack levels required when called:    3
 22268 ;; This function calls:
 22269 ;;		Nothing
 22270 ;; This function is called by:
 22271 ;;		_sync
 22272 ;; This function uses a non-reentrant model
 22273 ;;
 22274                           
 22275                           	psect	text82
 22276  005696                     __ptext82:
 22277                           	opt stack 0
 22278  005696                     _disk_ioctl:
 22279                           	opt stack 21
 22280                           
 22281                           ;incstack = 0
 22282                           ;disk_ioctl@pdrv stored from wreg
 22283  005696  0100               	movlb	0	; () banked
 22284  005698  6F63               	movwf	disk_ioctl@pdrv& (0+255),b
 22285                           
 22286                           ;diskio.c: 204: DRESULT res;
 22287                           ;diskio.c: 205: int result;
 22288                           ;diskio.c: 207: switch (pdrv) {
 22289  00569A  D006               	goto	l575
 22290  00569C                     l576:
 22291                           
 22292                           ; BSR set to: 0
 22293                           ;diskio.c: 212: return res;
 22294  00569C  5164               	movf	disk_ioctl@res& (0+255),w,b
 22295  00569E  0012               	return	
 22296  0056A0                     l578:
 22297                           
 22298                           ; BSR set to: 0
 22299                           ;diskio.c: 218: return res;
 22300  0056A0  5164               	movf	disk_ioctl@res& (0+255),w,b
 22301  0056A2  0012               	return	
 22302  0056A4                     l579:
 22303                           
 22304                           ; BSR set to: 0
 22305                           ;diskio.c: 224: return res;
 22306  0056A4  5164               	movf	disk_ioctl@res& (0+255),w,b
 22307  0056A6  0012               	return	
 22308  0056A8                     l575:
 22309                           
 22310                           ; BSR set to: 0
 22311  0056A8  0100               	movlb	0	; () banked
 22312  0056AA  5163               	movf	disk_ioctl@pdrv& (0+255),w,b
 22313                           
 22314                           ; Switch size 1, requested type "space"
 22315                           ; Number of cases is 3, Range of values is 0 to 2
 22316                           ; switch strategies available:
 22317                           ; Name         Instructions Cycles
 22318                           ; simple_byte           10     6 (average)
 22319                           ;	Chosen strategy is simple_byte
 22320  0056AC  0A00               	xorlw	0	; case 0
 22321  0056AE  B4D8               	btfsc	status,2,c
 22322  0056B0  D7F5               	goto	l576
 22323  0056B2  0A01               	xorlw	1	; case 1
 22324  0056B4  B4D8               	btfsc	status,2,c
 22325  0056B6  D7F4               	goto	l578
 22326  0056B8  0A03               	xorlw	3	; case 2
 22327  0056BA  B4D8               	btfsc	status,2,c
 22328  0056BC  D7F3               	goto	l579
 22329                           
 22330                           ; BSR set to: 0
 22331                           ;diskio.c: 227: return RES_PARERR;
 22332                           
 22333                           ; BSR set to: 0
 22334  0056BE  0E04               	movlw	4
 22335  0056C0  0012               	return	
 22336  0056C2                     __end_of_disk_ioctl:
 22337                           	opt stack 0
 22338                           tosu	equ	0xFFF
 22339                           tosh	equ	0xFFE
 22340                           tosl	equ	0xFFD
 22341                           pclath	equ	0xFFA
 22342                           tblptru	equ	0xFF8
 22343                           tblptrh	equ	0xFF7
 22344                           tblptrl	equ	0xFF6
 22345                           tablat	equ	0xFF5
 22346                           prodh	equ	0xFF4
 22347                           prodl	equ	0xFF3
 22348                           intcon	equ	0xFF2
 22349                           intcon2	equ	0xFF1
 22350                           intcon3	equ	0xFF0
 22351                           indf0	equ	0xFEF
 22352                           postinc0	equ	0xFEE
 22353                           fsr0h	equ	0xFEA
 22354                           fsr0l	equ	0xFE9
 22355                           wreg	equ	0xFE8
 22356                           indf1	equ	0xFE7
 22357                           postinc1	equ	0xFE6
 22358                           postdec1	equ	0xFE5
 22359                           plusw1	equ	0xFE3
 22360                           fsr1h	equ	0xFE2
 22361                           fsr1l	equ	0xFE1
 22362                           indf2	equ	0xFDF
 22363                           postinc2	equ	0xFDE
 22364                           postdec2	equ	0xFDD
 22365                           plusw2	equ	0xFDB
 22366                           fsr2h	equ	0xFDA
 22367                           fsr2l	equ	0xFD9
 22368                           status	equ	0xFD8
 22369                           
 22370 ;; *************** function _get_fattime *****************
 22371 ;; Defined at:
 22372 ;;		line 809 in file "bibliotecas/tff.c"
 22373 ;; Parameters:    Size  Location     Type
 22374 ;;		None
 22375 ;; Auto vars:     Size  Location     Type
 22376 ;;  f_time          9   42[BANK0 ] struct .
 22377 ;; Return value:  Size  Location     Type
 22378 ;;                  4    0[BANK0 ] unsigned long 
 22379 ;; Registers used:
 22380 ;;		wreg, status,2, status,0
 22381 ;; Tracked objects:
 22382 ;;		On entry : 0/0
 22383 ;;		On exit  : 0/0
 22384 ;;		Unchanged: 0/0
 22385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22386 ;;      Params:         0       4       0       0       0       0       0       0       0
 22387 ;;      Locals:         0       9       0       0       0       0       0       0       0
 22388 ;;      Temps:          0      38       0       0       0       0       0       0       0
 22389 ;;      Totals:         0      51       0       0       0       0       0       0       0
 22390 ;;Total ram usage:       51 bytes
 22391 ;; Hardware stack levels used:    1
 22392 ;; Hardware stack levels required when called:    3
 22393 ;; This function calls:
 22394 ;;		Nothing
 22395 ;; This function is called by:
 22396 ;;		_f_open
 22397 ;;		_f_sync
 22398 ;; This function uses a non-reentrant model
 22399 ;;
 22400                           
 22401                           	psect	text83
 22402  00401A                     __ptext83:
 22403                           	opt stack 0
 22404  00401A                     _get_fattime:
 22405                           	opt stack 23
 22406                           
 22407                           ;tff.c: 811: fat_time f_time;
 22408                           ;tff.c: 813: return (DWORD)(f_time.ano ) << 25 |
 22409                           ;tff.c: 814: (DWORD)(f_time.mes) << 21 |
 22410                           ;tff.c: 815: (DWORD)(f_time.mes) << 16 |
 22411                           ;tff.c: 816: (DWORD)(f_time.hora) << 11 |
 22412                           ;tff.c: 817: (DWORD)(f_time.min) << 5 |
 22413                           ;tff.c: 818: (DWORD)(f_time.seg) >> 1;
 22414                           
 22415                           ; BSR set to: 0
 22416                           ;incstack = 0
 22417  00401A  90D8               	bcf	status,0,c
 22418  00401C  0100               	movlb	0	; () banked
 22419  00401E  318F               	rrcf	(get_fattime@f_time+5)& (0+255),w,b
 22420  004020  6F65               	movwf	(??_get_fattime+1)& (0+255),b
 22421  004022  318E               	rrcf	(get_fattime@f_time+4)& (0+255),w,b
 22422  004024  6F64               	movwf	??_get_fattime& (0+255),b
 22423  004026  518C               	movf	(get_fattime@f_time+2)& (0+255),w,b
 22424  004028  6F66               	movwf	(??_get_fattime+2)& (0+255),b
 22425  00402A  518D               	movf	(get_fattime@f_time+3)& (0+255),w,b
 22426  00402C  6F67               	movwf	(??_get_fattime+3)& (0+255),b
 22427  00402E  6B68               	clrf	(??_get_fattime+4)& (0+255),b
 22428  004030  6B69               	clrf	(??_get_fattime+5)& (0+255),b
 22429  004032  0E05               	movlw	5
 22430  004034                     u14205:
 22431  004034  90D8               	bcf	status,0,c
 22432  004036  3766               	rlcf	(??_get_fattime+2)& (0+255),f,b
 22433  004038  3767               	rlcf	(??_get_fattime+3)& (0+255),f,b
 22434  00403A  3768               	rlcf	(??_get_fattime+4)& (0+255),f,b
 22435  00403C  3769               	rlcf	(??_get_fattime+5)& (0+255),f,b
 22436  00403E  2EE8               	decfsz	wreg,f,c
 22437  004040  D7F9               	goto	u14205
 22438  004042  518A               	movf	get_fattime@f_time& (0+255),w,b
 22439  004044  6F6A               	movwf	(??_get_fattime+6)& (0+255),b
 22440  004046  518B               	movf	(get_fattime@f_time+1)& (0+255),w,b
 22441  004048  6F6B               	movwf	(??_get_fattime+7)& (0+255),b
 22442  00404A  6B6C               	clrf	(??_get_fattime+8)& (0+255),b
 22443  00404C  6B6D               	clrf	(??_get_fattime+9)& (0+255),b
 22444  00404E  0E0B               	movlw	11
 22445  004050                     u14215:
 22446  004050  90D8               	bcf	status,0,c
 22447  004052  376A               	rlcf	(??_get_fattime+6)& (0+255),f,b
 22448  004054  376B               	rlcf	(??_get_fattime+7)& (0+255),f,b
 22449  004056  376C               	rlcf	(??_get_fattime+8)& (0+255),f,b
 22450  004058  376D               	rlcf	(??_get_fattime+9)& (0+255),f,b
 22451  00405A  2EE8               	decfsz	wreg,f,c
 22452  00405C  D7F9               	goto	u14215
 22453  00405E  C091  F06E         	movff	get_fattime@f_time+7,??_get_fattime+10
 22454  004062  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 22455  004064  6B70               	clrf	(??_get_fattime+12)& (0+255),b
 22456  004066  6B71               	clrf	(??_get_fattime+13)& (0+255),b
 22457  004068  C06F  F071         	movff	??_get_fattime+11,??_get_fattime+13
 22458  00406C  C06E  F070         	movff	??_get_fattime+10,??_get_fattime+12
 22459  004070  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 22460  004072  6B6E               	clrf	(??_get_fattime+10)& (0+255),b
 22461  004074  C091  F072         	movff	get_fattime@f_time+7,??_get_fattime+14
 22462  004078  6B73               	clrf	(??_get_fattime+15)& (0+255),b
 22463  00407A  6B74               	clrf	(??_get_fattime+16)& (0+255),b
 22464  00407C  6B75               	clrf	(??_get_fattime+17)& (0+255),b
 22465  00407E  0E15               	movlw	21
 22466  004080                     u14225:
 22467  004080  90D8               	bcf	status,0,c
 22468  004082  3772               	rlcf	(??_get_fattime+14)& (0+255),f,b
 22469  004084  3773               	rlcf	(??_get_fattime+15)& (0+255),f,b
 22470  004086  3774               	rlcf	(??_get_fattime+16)& (0+255),f,b
 22471  004088  3775               	rlcf	(??_get_fattime+17)& (0+255),f,b
 22472  00408A  2EE8               	decfsz	wreg,f,c
 22473  00408C  D7F9               	goto	u14225
 22474  00408E  C092  F076         	movff	get_fattime@f_time+8,??_get_fattime+18
 22475  004092  6B77               	clrf	(??_get_fattime+19)& (0+255),b
 22476  004094  6B78               	clrf	(??_get_fattime+20)& (0+255),b
 22477  004096  6B79               	clrf	(??_get_fattime+21)& (0+255),b
 22478  004098  0E19               	movlw	25
 22479  00409A                     u14235:
 22480  00409A  90D8               	bcf	status,0,c
 22481  00409C  3776               	rlcf	(??_get_fattime+18)& (0+255),f,b
 22482  00409E  3777               	rlcf	(??_get_fattime+19)& (0+255),f,b
 22483  0040A0  3778               	rlcf	(??_get_fattime+20)& (0+255),f,b
 22484  0040A2  3779               	rlcf	(??_get_fattime+21)& (0+255),f,b
 22485  0040A4  2EE8               	decfsz	wreg,f,c
 22486  0040A6  D7F9               	goto	u14235
 22487  0040A8  5172               	movf	(??_get_fattime+14)& (0+255),w,b
 22488  0040AA  1176               	iorwf	(??_get_fattime+18)& (0+255),w,b
 22489  0040AC  6F7A               	movwf	(??_get_fattime+22)& (0+255),b
 22490  0040AE  5173               	movf	(??_get_fattime+15)& (0+255),w,b
 22491  0040B0  1177               	iorwf	(??_get_fattime+19)& (0+255),w,b
 22492  0040B2  6F7B               	movwf	(??_get_fattime+23)& (0+255),b
 22493  0040B4  5174               	movf	(??_get_fattime+16)& (0+255),w,b
 22494  0040B6  1178               	iorwf	(??_get_fattime+20)& (0+255),w,b
 22495  0040B8  6F7C               	movwf	(??_get_fattime+24)& (0+255),b
 22496  0040BA  5175               	movf	(??_get_fattime+17)& (0+255),w,b
 22497  0040BC  1179               	iorwf	(??_get_fattime+21)& (0+255),w,b
 22498  0040BE  6F7D               	movwf	(??_get_fattime+25)& (0+255),b
 22499  0040C0  516E               	movf	(??_get_fattime+10)& (0+255),w,b
 22500  0040C2  117A               	iorwf	(??_get_fattime+22)& (0+255),w,b
 22501  0040C4  6F7E               	movwf	(??_get_fattime+26)& (0+255),b
 22502  0040C6  516F               	movf	(??_get_fattime+11)& (0+255),w,b
 22503  0040C8  117B               	iorwf	(??_get_fattime+23)& (0+255),w,b
 22504  0040CA  6F7F               	movwf	(??_get_fattime+27)& (0+255),b
 22505  0040CC  5170               	movf	(??_get_fattime+12)& (0+255),w,b
 22506  0040CE  117C               	iorwf	(??_get_fattime+24)& (0+255),w,b
 22507  0040D0  6F80               	movwf	(??_get_fattime+28)& (0+255),b
 22508  0040D2  5171               	movf	(??_get_fattime+13)& (0+255),w,b
 22509  0040D4  117D               	iorwf	(??_get_fattime+25)& (0+255),w,b
 22510  0040D6  6F81               	movwf	(??_get_fattime+29)& (0+255),b
 22511  0040D8  516A               	movf	(??_get_fattime+6)& (0+255),w,b
 22512  0040DA  117E               	iorwf	(??_get_fattime+26)& (0+255),w,b
 22513  0040DC  6F82               	movwf	(??_get_fattime+30)& (0+255),b
 22514  0040DE  516B               	movf	(??_get_fattime+7)& (0+255),w,b
 22515  0040E0  117F               	iorwf	(??_get_fattime+27)& (0+255),w,b
 22516  0040E2  6F83               	movwf	(??_get_fattime+31)& (0+255),b
 22517  0040E4  516C               	movf	(??_get_fattime+8)& (0+255),w,b
 22518  0040E6  1180               	iorwf	(??_get_fattime+28)& (0+255),w,b
 22519  0040E8  6F84               	movwf	(??_get_fattime+32)& (0+255),b
 22520  0040EA  516D               	movf	(??_get_fattime+9)& (0+255),w,b
 22521  0040EC  1181               	iorwf	(??_get_fattime+29)& (0+255),w,b
 22522  0040EE  6F85               	movwf	(??_get_fattime+33)& (0+255),b
 22523  0040F0  5166               	movf	(??_get_fattime+2)& (0+255),w,b
 22524  0040F2  1182               	iorwf	(??_get_fattime+30)& (0+255),w,b
 22525  0040F4  6F86               	movwf	(??_get_fattime+34)& (0+255),b
 22526  0040F6  5167               	movf	(??_get_fattime+3)& (0+255),w,b
 22527  0040F8  1183               	iorwf	(??_get_fattime+31)& (0+255),w,b
 22528  0040FA  6F87               	movwf	(??_get_fattime+35)& (0+255),b
 22529  0040FC  5168               	movf	(??_get_fattime+4)& (0+255),w,b
 22530  0040FE  1184               	iorwf	(??_get_fattime+32)& (0+255),w,b
 22531  004100  6F88               	movwf	(??_get_fattime+36)& (0+255),b
 22532  004102  5169               	movf	(??_get_fattime+5)& (0+255),w,b
 22533  004104  1185               	iorwf	(??_get_fattime+33)& (0+255),w,b
 22534  004106  6F89               	movwf	(??_get_fattime+37)& (0+255),b
 22535  004108  5164               	movf	??_get_fattime& (0+255),w,b
 22536  00410A  1186               	iorwf	(??_get_fattime+34)& (0+255),w,b
 22537  00410C  6F60               	movwf	?_get_fattime& (0+255),b
 22538  00410E  5165               	movf	(??_get_fattime+1)& (0+255),w,b
 22539  004110  1187               	iorwf	(??_get_fattime+35)& (0+255),w,b
 22540  004112  6F61               	movwf	(?_get_fattime+1)& (0+255),b
 22541  004114  0E00               	movlw	0
 22542  004116  1188               	iorwf	(??_get_fattime+36)& (0+255),w,b
 22543  004118  6F62               	movwf	(?_get_fattime+2)& (0+255),b
 22544  00411A  0E00               	movlw	0
 22545  00411C  1189               	iorwf	(??_get_fattime+37)& (0+255),w,b
 22546  00411E  6F63               	movwf	(?_get_fattime+3)& (0+255),b
 22547  004120  0012               	return	
 22548  004122                     __end_of_get_fattime:
 22549                           	opt stack 0
 22550                           tosu	equ	0xFFF
 22551                           tosh	equ	0xFFE
 22552                           tosl	equ	0xFFD
 22553                           pclath	equ	0xFFA
 22554                           tblptru	equ	0xFF8
 22555                           tblptrh	equ	0xFF7
 22556                           tblptrl	equ	0xFF6
 22557                           tablat	equ	0xFF5
 22558                           prodh	equ	0xFF4
 22559                           prodl	equ	0xFF3
 22560                           intcon	equ	0xFF2
 22561                           intcon2	equ	0xFF1
 22562                           intcon3	equ	0xFF0
 22563                           indf0	equ	0xFEF
 22564                           postinc0	equ	0xFEE
 22565                           fsr0h	equ	0xFEA
 22566                           fsr0l	equ	0xFE9
 22567                           wreg	equ	0xFE8
 22568                           indf1	equ	0xFE7
 22569                           postinc1	equ	0xFE6
 22570                           postdec1	equ	0xFE5
 22571                           plusw1	equ	0xFE3
 22572                           fsr1h	equ	0xFE2
 22573                           fsr1l	equ	0xFE1
 22574                           indf2	equ	0xFDF
 22575                           postinc2	equ	0xFDE
 22576                           postdec2	equ	0xFDD
 22577                           plusw2	equ	0xFDB
 22578                           fsr2h	equ	0xFDA
 22579                           fsr2l	equ	0xFD9
 22580                           status	equ	0xFD8
 22581                           
 22582 ;; *************** function _desliga_uart *****************
 22583 ;; Defined at:
 22584 ;;		line 219 in file "bibliotecas/uart.c"
 22585 ;; Parameters:    Size  Location     Type
 22586 ;;		None
 22587 ;; Auto vars:     Size  Location     Type
 22588 ;;		None
 22589 ;; Return value:  Size  Location     Type
 22590 ;;                  1    wreg      void 
 22591 ;; Registers used:
 22592 ;;		wreg, status,2
 22593 ;; Tracked objects:
 22594 ;;		On entry : 0/0
 22595 ;;		On exit  : 0/0
 22596 ;;		Unchanged: 0/0
 22597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22598 ;;      Params:         0       0       0       0       0       0       0       0       0
 22599 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22600 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22601 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22602 ;;Total ram usage:        0 bytes
 22603 ;; Hardware stack levels used:    1
 22604 ;; Hardware stack levels required when called:    3
 22605 ;; This function calls:
 22606 ;;		Nothing
 22607 ;; This function is called by:
 22608 ;;		_escrita_sdcard
 22609 ;;		_sdcard_init
 22610 ;;		_leitura_sdcard
 22611 ;; This function uses a non-reentrant model
 22612 ;;
 22613                           
 22614                           	psect	text84
 22615  00584A                     __ptext84:
 22616                           	opt stack 0
 22617  00584A                     _desliga_uart:
 22618                           	opt stack 24
 22619                           
 22620                           ;uart.c: 221: TRISCbits.RC6 = 1;
 22621                           
 22622                           ; BSR set to: 0
 22623                           ;incstack = 0
 22624  00584A  8C94               	bsf	3988,6,c	;volatile
 22625                           
 22626                           ;uart.c: 222: TRISCbits.RC7 = 1;
 22627  00584C  8E94               	bsf	3988,7,c	;volatile
 22628                           
 22629                           ;uart.c: 225: TXSTA = 0x00;
 22630  00584E  0E00               	movlw	0
 22631  005850  6EAC               	movwf	4012,c	;volatile
 22632                           
 22633                           ;uart.c: 227: RCSTA = 0x00;
 22634  005852  0E00               	movlw	0
 22635  005854  6EAB               	movwf	4011,c	;volatile
 22636  005856  0012               	return		;funcret
 22637  005858                     __end_of_desliga_uart:
 22638                           	opt stack 0
 22639                           tosu	equ	0xFFF
 22640                           tosh	equ	0xFFE
 22641                           tosl	equ	0xFFD
 22642                           pclath	equ	0xFFA
 22643                           tblptru	equ	0xFF8
 22644                           tblptrh	equ	0xFF7
 22645                           tblptrl	equ	0xFF6
 22646                           tablat	equ	0xFF5
 22647                           prodh	equ	0xFF4
 22648                           prodl	equ	0xFF3
 22649                           intcon	equ	0xFF2
 22650                           intcon2	equ	0xFF1
 22651                           intcon3	equ	0xFF0
 22652                           indf0	equ	0xFEF
 22653                           postinc0	equ	0xFEE
 22654                           fsr0h	equ	0xFEA
 22655                           fsr0l	equ	0xFE9
 22656                           wreg	equ	0xFE8
 22657                           indf1	equ	0xFE7
 22658                           postinc1	equ	0xFE6
 22659                           postdec1	equ	0xFE5
 22660                           plusw1	equ	0xFE3
 22661                           fsr1h	equ	0xFE2
 22662                           fsr1l	equ	0xFE1
 22663                           indf2	equ	0xFDF
 22664                           postinc2	equ	0xFDE
 22665                           postdec2	equ	0xFDD
 22666                           plusw2	equ	0xFDB
 22667                           fsr2h	equ	0xFDA
 22668                           fsr2l	equ	0xFD9
 22669                           status	equ	0xFD8
 22670                           
 22671 ;; *************** function _desliga_SPI *****************
 22672 ;; Defined at:
 22673 ;;		line 69 in file "bibliotecas/SPI.c"
 22674 ;; Parameters:    Size  Location     Type
 22675 ;;		None
 22676 ;; Auto vars:     Size  Location     Type
 22677 ;;		None
 22678 ;; Return value:  Size  Location     Type
 22679 ;;                  1    wreg      void 
 22680 ;; Registers used:
 22681 ;;		wreg, status,2
 22682 ;; Tracked objects:
 22683 ;;		On entry : 0/0
 22684 ;;		On exit  : 0/0
 22685 ;;		Unchanged: 0/0
 22686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22687 ;;      Params:         0       0       0       0       0       0       0       0       0
 22688 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22689 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22690 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22691 ;;Total ram usage:        0 bytes
 22692 ;; Hardware stack levels used:    1
 22693 ;; Hardware stack levels required when called:    3
 22694 ;; This function calls:
 22695 ;;		Nothing
 22696 ;; This function is called by:
 22697 ;;		_escrita_sdcard
 22698 ;;		_leitura_sdcard
 22699 ;; This function uses a non-reentrant model
 22700 ;;
 22701                           
 22702                           	psect	text85
 22703  005888                     __ptext85:
 22704                           	opt stack 0
 22705  005888                     _desliga_SPI:
 22706                           	opt stack 24
 22707                           
 22708                           ;SPI.c: 71: SSPSTAT = 0x00;
 22709                           
 22710                           ;incstack = 0
 22711  005888  0E00               	movlw	0
 22712  00588A  6EC7               	movwf	4039,c	;volatile
 22713                           
 22714                           ;SPI.c: 72: SSPCON1 = 0x00;
 22715  00588C  0E00               	movlw	0
 22716  00588E  6EC6               	movwf	4038,c	;volatile
 22717                           
 22718                           ;SPI.c: 73: SSPCON1bits.SSPEN = 0;
 22719  005890  9AC6               	bcf	4038,5,c	;volatile
 22720  005892  0012               	return		;funcret
 22721  005894                     __end_of_desliga_SPI:
 22722                           	opt stack 0
 22723                           tosu	equ	0xFFF
 22724                           tosh	equ	0xFFE
 22725                           tosl	equ	0xFFD
 22726                           pclath	equ	0xFFA
 22727                           tblptru	equ	0xFF8
 22728                           tblptrh	equ	0xFF7
 22729                           tblptrl	equ	0xFF6
 22730                           tablat	equ	0xFF5
 22731                           prodh	equ	0xFF4
 22732                           prodl	equ	0xFF3
 22733                           intcon	equ	0xFF2
 22734                           intcon2	equ	0xFF1
 22735                           intcon3	equ	0xFF0
 22736                           indf0	equ	0xFEF
 22737                           postinc0	equ	0xFEE
 22738                           fsr0h	equ	0xFEA
 22739                           fsr0l	equ	0xFE9
 22740                           wreg	equ	0xFE8
 22741                           indf1	equ	0xFE7
 22742                           postinc1	equ	0xFE6
 22743                           postdec1	equ	0xFE5
 22744                           plusw1	equ	0xFE3
 22745                           fsr1h	equ	0xFE2
 22746                           fsr1l	equ	0xFE1
 22747                           indf2	equ	0xFDF
 22748                           postinc2	equ	0xFDE
 22749                           postdec2	equ	0xFDD
 22750                           plusw2	equ	0xFDB
 22751                           fsr2h	equ	0xFDA
 22752                           fsr2l	equ	0xFD9
 22753                           status	equ	0xFD8
 22754                           
 22755 ;; *************** function _dados_gps_to_sd *****************
 22756 ;; Defined at:
 22757 ;;		line 643 in file "bibliotecas/GPS.c"
 22758 ;; Parameters:    Size  Location     Type
 22759 ;;		None
 22760 ;; Auto vars:     Size  Location     Type
 22761 ;;		None
 22762 ;; Return value:  Size  Location     Type
 22763 ;;                  1    wreg      void 
 22764 ;; Registers used:
 22765 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22766 ;; Tracked objects:
 22767 ;;		On entry : 0/0
 22768 ;;		On exit  : 0/0
 22769 ;;		Unchanged: 0/0
 22770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22771 ;;      Params:         0       0       0       0       0       0       0       0       0
 22772 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22773 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22774 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22775 ;;Total ram usage:        0 bytes
 22776 ;; Hardware stack levels used:    1
 22777 ;; Hardware stack levels required when called:    5
 22778 ;; This function calls:
 22779 ;;		_monta_sd
 22780 ;; This function is called by:
 22781 ;;		_main
 22782 ;; This function uses a non-reentrant model
 22783 ;;
 22784                           
 22785                           	psect	text86
 22786  0054D6                     __ptext86:
 22787                           	opt stack 0
 22788  0054D6                     _dados_gps_to_sd:
 22789                           	opt stack 25
 22790                           
 22791                           ;GPS.c: 645: monta_sd(0, rawTime);
 22792                           
 22793                           ;incstack = 0
 22794  0054D6  0EF2               	movlw	low _rawTime
 22795  0054D8  0100               	movlb	0	; () banked
 22796  0054DA  6F66               	movwf	monta_sd@dado& (0+255),b
 22797  0054DC  0E02               	movlw	high _rawTime
 22798  0054DE  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 22799  0054E0  0E00               	movlw	0
 22800  0054E2  EC91  F020         	call	_monta_sd
 22801                           
 22802                           ;GPS.c: 646: monta_sd(1, rawDate);
 22803  0054E6  0EBF               	movlw	low _rawDate
 22804  0054E8  0100               	movlb	0	; () banked
 22805  0054EA  6F66               	movwf	monta_sd@dado& (0+255),b
 22806  0054EC  0E01               	movlw	high _rawDate
 22807  0054EE  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 22808  0054F0  0E01               	movlw	1
 22809  0054F2  EC91  F020         	call	_monta_sd
 22810                           
 22811                           ;GPS.c: 647: monta_sd(2, rawLatitude);
 22812  0054F6  0EE5               	movlw	low _rawLatitude
 22813  0054F8  0100               	movlb	0	; () banked
 22814  0054FA  6F66               	movwf	monta_sd@dado& (0+255),b
 22815  0054FC  0E02               	movlw	high _rawLatitude
 22816  0054FE  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 22817  005500  0E02               	movlw	2
 22818  005502  EC91  F020         	call	_monta_sd
 22819                           
 22820                           ;GPS.c: 648: monta_sd(3, rawLongitude);
 22821  005506  0ED8               	movlw	low _rawLongitude
 22822  005508  0100               	movlb	0	; () banked
 22823  00550A  6F66               	movwf	monta_sd@dado& (0+255),b
 22824  00550C  0E02               	movlw	high _rawLongitude
 22825  00550E  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 22826  005510  0E03               	movlw	3
 22827  005512  EC91  F020         	call	_monta_sd
 22828  005516  0012               	return	
 22829  005518                     __end_of_dados_gps_to_sd:
 22830                           	opt stack 0
 22831                           tosu	equ	0xFFF
 22832                           tosh	equ	0xFFE
 22833                           tosl	equ	0xFFD
 22834                           pclath	equ	0xFFA
 22835                           tblptru	equ	0xFF8
 22836                           tblptrh	equ	0xFF7
 22837                           tblptrl	equ	0xFF6
 22838                           tablat	equ	0xFF5
 22839                           prodh	equ	0xFF4
 22840                           prodl	equ	0xFF3
 22841                           intcon	equ	0xFF2
 22842                           intcon2	equ	0xFF1
 22843                           intcon3	equ	0xFF0
 22844                           indf0	equ	0xFEF
 22845                           postinc0	equ	0xFEE
 22846                           fsr0h	equ	0xFEA
 22847                           fsr0l	equ	0xFE9
 22848                           wreg	equ	0xFE8
 22849                           indf1	equ	0xFE7
 22850                           postinc1	equ	0xFE6
 22851                           postdec1	equ	0xFE5
 22852                           plusw1	equ	0xFE3
 22853                           fsr1h	equ	0xFE2
 22854                           fsr1l	equ	0xFE1
 22855                           indf2	equ	0xFDF
 22856                           postinc2	equ	0xFDE
 22857                           postdec2	equ	0xFDD
 22858                           plusw2	equ	0xFDB
 22859                           fsr2h	equ	0xFDA
 22860                           fsr2l	equ	0xFD9
 22861                           status	equ	0xFD8
 22862                           
 22863 ;; *************** function _monta_sd *****************
 22864 ;; Defined at:
 22865 ;;		line 286 in file "bibliotecas/SDCard.c"
 22866 ;; Parameters:    Size  Location     Type
 22867 ;;  index           1    wreg     unsigned char 
 22868 ;;  dado            2    6[BANK0 ] PTR unsigned char 
 22869 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 22870 ;; Auto vars:     Size  Location     Type
 22871 ;;  index           1    8[BANK0 ] unsigned char 
 22872 ;;  i               1   10[BANK0 ] unsigned char 
 22873 ;;  size            1    9[BANK0 ] unsigned char 
 22874 ;; Return value:  Size  Location     Type
 22875 ;;                  1    wreg      void 
 22876 ;; Registers used:
 22877 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22878 ;; Tracked objects:
 22879 ;;		On entry : 0/0
 22880 ;;		On exit  : 0/0
 22881 ;;		Unchanged: 0/0
 22882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22883 ;;      Params:         0       2       0       0       0       0       0       0       0
 22884 ;;      Locals:         0       3       0       0       0       0       0       0       0
 22885 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22886 ;;      Totals:         0       5       0       0       0       0       0       0       0
 22887 ;;Total ram usage:        5 bytes
 22888 ;; Hardware stack levels used:    1
 22889 ;; Hardware stack levels required when called:    4
 22890 ;; This function calls:
 22891 ;;		_strlen
 22892 ;; This function is called by:
 22893 ;;		_dados_gps_to_sd
 22894 ;; This function uses a non-reentrant model
 22895 ;;
 22896                           
 22897                           	psect	text87
 22898  004122                     __ptext87:
 22899                           	opt stack 0
 22900  004122                     _monta_sd:
 22901                           	opt stack 25
 22902                           
 22903                           ;incstack = 0
 22904                           ;monta_sd@index stored from wreg
 22905  004122  0100               	movlb	0	; () banked
 22906  004124  6F68               	movwf	monta_sd@index& (0+255),b
 22907                           
 22908                           ;SDCard.c: 288: unsigned char i, size;
 22909                           ;SDCard.c: 289: size = strlen(dado);
 22910  004126  C066  F060         	movff	monta_sd@dado,strlen@s
 22911  00412A  C067  F061         	movff	monta_sd@dado+1,strlen@s+1
 22912  00412E  ECAC  F02A         	call	_strlen	;wreg free
 22913  004132  0100               	movlb	0	; () banked
 22914  004134  5160               	movf	?_strlen& (0+255),w,b
 22915  004136  6F69               	movwf	monta_sd@size& (0+255),b
 22916                           
 22917                           ;SDCard.c: 290: switch(index)
 22918  004138  D061               	goto	l454
 22919  00413A                     
 22920                           ; BSR set to: 0
 22921                           ;SDCard.c: 293: for(i=0; i<6;i++)
 22922                           
 22923                           ; BSR set to: 0
 22924  00413A  0E00               	movlw	0
 22925  00413C  6F6A               	movwf	monta_sd@i& (0+255),b
 22926  00413E                     l12340:
 22927                           
 22928                           ; BSR set to: 0
 22929  00413E  0E05               	movlw	5
 22930  004140  656A               	cpfsgt	monta_sd@i& (0+255),b
 22931  004142  D001               	goto	l456
 22932  004144  0012               	return	
 22933  004146                     l456:
 22934                           
 22935                           ; BSR set to: 0
 22936                           ;SDCard.c: 294: {
 22937                           ;SDCard.c: 295: string_dado.hora[i] = *dado;
 22938                           
 22939                           ; BSR set to: 0
 22940  004146  C066  FFD9         	movff	monta_sd@dado,fsr2l
 22941  00414A  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 22942  00414E  516A               	movf	monta_sd@i& (0+255),w,b
 22943  004150  0D01               	mullw	1
 22944  004152  0E90               	movlw	low _string_dado
 22945  004154  24F3               	addwf	prodl,w,c
 22946  004156  6EE1               	movwf	fsr1l,c
 22947  004158  0E02               	movlw	high _string_dado
 22948  00415A  20F4               	addwfc	prodh,w,c
 22949  00415C  6EE2               	movwf	fsr1h,c
 22950  00415E  CFDF FFE7          	movff	indf2,indf1
 22951                           
 22952                           ; BSR set to: 0
 22953                           ;SDCard.c: 296: dado++;
 22954  004162  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 22955  004164  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 22956                           
 22957                           ; BSR set to: 0
 22958  004166  2B6A               	incf	monta_sd@i& (0+255),f,b
 22959  004168  D7EA               	goto	l12340
 22960  00416A                     
 22961                           ; BSR set to: 0
 22962                           ;SDCard.c: 315: for(i=0; i<13;i++)
 22963                           
 22964                           ; BSR set to: 0
 22965  00416A  0E00               	movlw	0
 22966  00416C  6F6A               	movwf	monta_sd@i& (0+255),b
 22967  00416E                     l12354:
 22968                           
 22969                           ; BSR set to: 0
 22970  00416E  0E0C               	movlw	12
 22971  004170  656A               	cpfsgt	monta_sd@i& (0+255),b
 22972  004172  D001               	goto	l461
 22973  004174  0012               	return	
 22974  004176                     l461:
 22975                           
 22976                           ; BSR set to: 0
 22977                           ;SDCard.c: 316: {
 22978                           ;SDCard.c: 317: string_dado.lt[i] = *dado;
 22979                           
 22980                           ; BSR set to: 0
 22981  004176  C066  FFD9         	movff	monta_sd@dado,fsr2l
 22982  00417A  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 22983  00417E  516A               	movf	monta_sd@i& (0+255),w,b
 22984  004180  0D01               	mullw	1
 22985  004182  0E9B               	movlw	low (_string_dado+11)
 22986  004184  24F3               	addwf	prodl,w,c
 22987  004186  6EE1               	movwf	fsr1l,c
 22988  004188  0E02               	movlw	high (_string_dado+11)
 22989  00418A  20F4               	addwfc	prodh,w,c
 22990  00418C  6EE2               	movwf	fsr1h,c
 22991  00418E  CFDF FFE7          	movff	indf2,indf1
 22992                           
 22993                           ; BSR set to: 0
 22994                           ;SDCard.c: 318: dado++;
 22995  004192  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 22996  004194  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 22997                           
 22998                           ; BSR set to: 0
 22999  004196  2B6A               	incf	monta_sd@i& (0+255),f,b
 23000  004198  D7EA               	goto	l12354
 23001  00419A                     
 23002                           ; BSR set to: 0
 23003                           ;SDCard.c: 324: for(i=0; i<13;i++)
 23004                           
 23005                           ; BSR set to: 0
 23006  00419A  0E00               	movlw	0
 23007  00419C  6F6A               	movwf	monta_sd@i& (0+255),b
 23008  00419E                     l12368:
 23009                           
 23010                           ; BSR set to: 0
 23011  00419E  0E0C               	movlw	12
 23012  0041A0  656A               	cpfsgt	monta_sd@i& (0+255),b
 23013  0041A2  D001               	goto	l464
 23014  0041A4  0012               	return	
 23015  0041A6                     l464:
 23016                           
 23017                           ; BSR set to: 0
 23018                           ;SDCard.c: 325: {
 23019                           ;SDCard.c: 326: string_dado.lo[i] = *dado;
 23020                           
 23021                           ; BSR set to: 0
 23022  0041A6  C066  FFD9         	movff	monta_sd@dado,fsr2l
 23023  0041AA  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 23024  0041AE  516A               	movf	monta_sd@i& (0+255),w,b
 23025  0041B0  0D01               	mullw	1
 23026  0041B2  0EA8               	movlw	low (_string_dado+24)
 23027  0041B4  24F3               	addwf	prodl,w,c
 23028  0041B6  6EE1               	movwf	fsr1l,c
 23029  0041B8  0E02               	movlw	high (_string_dado+24)
 23030  0041BA  20F4               	addwfc	prodh,w,c
 23031  0041BC  6EE2               	movwf	fsr1h,c
 23032  0041BE  CFDF FFE7          	movff	indf2,indf1
 23033                           
 23034                           ; BSR set to: 0
 23035                           ;SDCard.c: 327: dado++;
 23036  0041C2  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 23037  0041C4  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 23038                           
 23039                           ; BSR set to: 0
 23040  0041C6  2B6A               	incf	monta_sd@i& (0+255),f,b
 23041  0041C8  D7EA               	goto	l12368
 23042  0041CA                     
 23043                           ; BSR set to: 0
 23044                           ;SDCard.c: 333: for(i=0; i<size;i++)
 23045                           
 23046                           ; BSR set to: 0
 23047  0041CA  0E00               	movlw	0
 23048  0041CC  6F6A               	movwf	monta_sd@i& (0+255),b
 23049  0041CE  D011               	goto	l467
 23050  0041D0                     
 23051                           ; BSR set to: 0
 23052                           ;SDCard.c: 334: {
 23053                           ;SDCard.c: 335: string_dado.lo[i] = *dado;
 23054                           
 23055                           ; BSR set to: 0
 23056  0041D0  C066  FFD9         	movff	monta_sd@dado,fsr2l
 23057  0041D4  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 23058  0041D8  516A               	movf	monta_sd@i& (0+255),w,b
 23059  0041DA  0D01               	mullw	1
 23060  0041DC  0EA8               	movlw	low (_string_dado+24)
 23061  0041DE  24F3               	addwf	prodl,w,c
 23062  0041E0  6EE1               	movwf	fsr1l,c
 23063  0041E2  0E02               	movlw	high (_string_dado+24)
 23064  0041E4  20F4               	addwfc	prodh,w,c
 23065  0041E6  6EE2               	movwf	fsr1h,c
 23066  0041E8  CFDF FFE7          	movff	indf2,indf1
 23067                           
 23068                           ; BSR set to: 0
 23069                           ;SDCard.c: 336: dado++;
 23070  0041EC  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 23071  0041EE  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 23072                           
 23073                           ; BSR set to: 0
 23074  0041F0  2B6A               	incf	monta_sd@i& (0+255),f,b
 23075  0041F2                     l467:
 23076                           
 23077                           ; BSR set to: 0
 23078                           
 23079                           ; BSR set to: 0
 23080  0041F2  5169               	movf	monta_sd@size& (0+255),w,b
 23081  0041F4  5D6A               	subwf	monta_sd@i& (0+255),w,b
 23082  0041F6  B0D8               	btfsc	status,0,c
 23083  0041F8  0012               	return	
 23084  0041FA  D7EA               	goto	l468
 23085  0041FC                     l454:
 23086                           
 23087                           ; BSR set to: 0
 23088                           
 23089                           ; BSR set to: 0
 23090  0041FC  5168               	movf	monta_sd@index& (0+255),w,b
 23091                           
 23092                           ; Switch size 1, requested type "space"
 23093                           ; Number of cases is 5, Range of values is 0 to 4
 23094                           ; switch strategies available:
 23095                           ; Name         Instructions Cycles
 23096                           ; simple_byte           16     9 (average)
 23097                           ;	Chosen strategy is simple_byte
 23098  0041FE  0A00               	xorlw	0	; case 0
 23099  004200  B4D8               	btfsc	status,2,c
 23100  004202  D79B               	goto	l455
 23101  004204  0A01               	xorlw	1	; case 1
 23102  004206  B4D8               	btfsc	status,2,c
 23103  004208  0012               	return	
 23104  00420A  0A03               	xorlw	3	; case 2
 23105  00420C  B4D8               	btfsc	status,2,c
 23106  00420E  D7AD               	goto	l460
 23107  004210  0A01               	xorlw	1	; case 3
 23108  004212  B4D8               	btfsc	status,2,c
 23109  004214  D7C2               	goto	l463
 23110  004216  0A07               	xorlw	7	; case 4
 23111  004218  A4D8               	btfss	status,2,c
 23112  00421A  0012               	return	
 23113  00421C  D7D6               	goto	l466
 23114  00421E                     __end_of_monta_sd:
 23115                           	opt stack 0
 23116                           tosu	equ	0xFFF
 23117                           tosh	equ	0xFFE
 23118                           tosl	equ	0xFFD
 23119                           pclath	equ	0xFFA
 23120                           tblptru	equ	0xFF8
 23121                           tblptrh	equ	0xFF7
 23122                           tblptrl	equ	0xFF6
 23123                           tablat	equ	0xFF5
 23124                           prodh	equ	0xFF4
 23125                           prodl	equ	0xFF3
 23126                           intcon	equ	0xFF2
 23127                           intcon2	equ	0xFF1
 23128                           intcon3	equ	0xFF0
 23129                           indf0	equ	0xFEF
 23130                           postinc0	equ	0xFEE
 23131                           fsr0h	equ	0xFEA
 23132                           fsr0l	equ	0xFE9
 23133                           wreg	equ	0xFE8
 23134                           indf1	equ	0xFE7
 23135                           postinc1	equ	0xFE6
 23136                           postdec1	equ	0xFE5
 23137                           plusw1	equ	0xFE3
 23138                           fsr1h	equ	0xFE2
 23139                           fsr1l	equ	0xFE1
 23140                           indf2	equ	0xFDF
 23141                           postinc2	equ	0xFDE
 23142                           postdec2	equ	0xFDD
 23143                           plusw2	equ	0xFDB
 23144                           fsr2h	equ	0xFDA
 23145                           fsr2l	equ	0xFD9
 23146                           status	equ	0xFD8
 23147                           
 23148 ;; *************** function _strlen *****************
 23149 ;; Defined at:
 23150 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 23151 ;; Parameters:    Size  Location     Type
 23152 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 23153 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 23154 ;; Auto vars:     Size  Location     Type
 23155 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 23156 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 23157 ;; Return value:  Size  Location     Type
 23158 ;;                  2    0[BANK0 ] unsigned int 
 23159 ;; Registers used:
 23160 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23161 ;; Tracked objects:
 23162 ;;		On entry : 0/0
 23163 ;;		On exit  : 0/0
 23164 ;;		Unchanged: 0/0
 23165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23166 ;;      Params:         0       2       0       0       0       0       0       0       0
 23167 ;;      Locals:         0       2       0       0       0       0       0       0       0
 23168 ;;      Temps:          0       2       0       0       0       0       0       0       0
 23169 ;;      Totals:         0       6       0       0       0       0       0       0       0
 23170 ;;Total ram usage:        6 bytes
 23171 ;; Hardware stack levels used:    1
 23172 ;; Hardware stack levels required when called:    3
 23173 ;; This function calls:
 23174 ;;		Nothing
 23175 ;; This function is called by:
 23176 ;;		_monta_sd
 23177 ;; This function uses a non-reentrant model
 23178 ;;
 23179                           
 23180                           	psect	text88
 23181  005558                     __ptext88:
 23182                           	opt stack 0
 23183  005558                     _strlen:
 23184                           	opt stack 25
 23185                           
 23186                           ; BSR set to: 0
 23187                           ;incstack = 0
 23188  005558  C060  F064         	movff	strlen@s,strlen@cp
 23189  00555C  C061  F065         	movff	strlen@s+1,strlen@cp+1
 23190  005560  D003               	goto	l2128
 23191  005562  0100               	movlb	0	; () banked
 23192  005564  4B64               	infsnz	strlen@cp& (0+255),f,b
 23193  005566  2B65               	incf	(strlen@cp+1)& (0+255),f,b
 23194  005568                     l2128:
 23195                           
 23196                           ; BSR set to: 0
 23197  005568  C064  FFD9         	movff	strlen@cp,fsr2l
 23198  00556C  C065  FFDA         	movff	strlen@cp+1,fsr2h
 23199  005570  50DF               	movf	indf2,w,c
 23200  005572  A4D8               	btfss	status,2,c
 23201  005574  D7F6               	goto	l2129
 23202  005576  C060  F062         	movff	strlen@s,??_strlen
 23203  00557A  C061  F063         	movff	strlen@s+1,??_strlen+1
 23204  00557E  0100               	movlb	0	; () banked
 23205  005580  1F62               	comf	??_strlen& (0+255),f,b
 23206  005582  1F63               	comf	(??_strlen+1)& (0+255),f,b
 23207  005584  4B62               	infsnz	??_strlen& (0+255),f,b
 23208  005586  2B63               	incf	(??_strlen+1)& (0+255),f,b
 23209  005588  5164               	movf	strlen@cp& (0+255),w,b
 23210  00558A  2562               	addwf	??_strlen& (0+255),w,b
 23211  00558C  6F60               	movwf	?_strlen& (0+255),b
 23212  00558E  5165               	movf	(strlen@cp+1)& (0+255),w,b
 23213  005590  2163               	addwfc	(??_strlen+1)& (0+255),w,b
 23214  005592  6F61               	movwf	(?_strlen+1)& (0+255),b
 23215  005594  0012               	return	
 23216  005596                     __end_of_strlen:
 23217                           	opt stack 0
 23218                           tosu	equ	0xFFF
 23219                           tosh	equ	0xFFE
 23220                           tosl	equ	0xFFD
 23221                           pclath	equ	0xFFA
 23222                           tblptru	equ	0xFF8
 23223                           tblptrh	equ	0xFF7
 23224                           tblptrl	equ	0xFF6
 23225                           tablat	equ	0xFF5
 23226                           prodh	equ	0xFF4
 23227                           prodl	equ	0xFF3
 23228                           intcon	equ	0xFF2
 23229                           intcon2	equ	0xFF1
 23230                           intcon3	equ	0xFF0
 23231                           indf0	equ	0xFEF
 23232                           postinc0	equ	0xFEE
 23233                           fsr0h	equ	0xFEA
 23234                           fsr0l	equ	0xFE9
 23235                           wreg	equ	0xFE8
 23236                           indf1	equ	0xFE7
 23237                           postinc1	equ	0xFE6
 23238                           postdec1	equ	0xFE5
 23239                           plusw1	equ	0xFE3
 23240                           fsr1h	equ	0xFE2
 23241                           fsr1l	equ	0xFE1
 23242                           indf2	equ	0xFDF
 23243                           postinc2	equ	0xFDE
 23244                           postdec2	equ	0xFDD
 23245                           plusw2	equ	0xFDB
 23246                           fsr2h	equ	0xFDA
 23247                           fsr2l	equ	0xFD9
 23248                           status	equ	0xFD8
 23249                           
 23250 ;; *************** function _isr *****************
 23251 ;; Defined at:
 23252 ;;		line 105 in file "main.c"
 23253 ;; Parameters:    Size  Location     Type
 23254 ;;		None
 23255 ;; Auto vars:     Size  Location     Type
 23256 ;;  cont            1   33[COMRAM] unsigned char 
 23257 ;; Return value:  Size  Location     Type
 23258 ;;                  1    wreg      void 
 23259 ;; Registers used:
 23260 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23261 ;; Tracked objects:
 23262 ;;		On entry : 0/0
 23263 ;;		On exit  : 0/0
 23264 ;;		Unchanged: 0/0
 23265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23266 ;;      Params:         0       0       0       0       0       0       0       0       0
 23267 ;;      Locals:         1       0       0       0       0       0       0       0       0
 23268 ;;      Temps:         20       0       0       0       0       0       0       0       0
 23269 ;;      Totals:        21       0       0       0       0       0       0       0       0
 23270 ;;Total ram usage:       21 bytes
 23271 ;; Hardware stack levels used:    1
 23272 ;; Hardware stack levels required when called:    2
 23273 ;; This function calls:
 23274 ;;		_GPSRead
 23275 ;;		_recebe_dado_uart
 23276 ;;		i2_write_timer_zero
 23277 ;; This function is called by:
 23278 ;;		Interrupt level 2
 23279 ;; This function uses a non-reentrant model
 23280 ;;
 23281                           
 23282                           	psect	intcode
 23283  000008                     __pintcode:
 23284                           	opt stack 0
 23285  000008                     _isr:
 23286                           	opt stack 13
 23287                           
 23288                           ; BSR set to: 0
 23289                           ;incstack = 0
 23290  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 23291  00000A  ED8E  F01D         	call	int_func,f	;refresh shadow registers
 23292                           tosu	equ	0xFFF
 23293                           tosh	equ	0xFFE
 23294                           tosl	equ	0xFFD
 23295                           pclath	equ	0xFFA
 23296                           tblptru	equ	0xFF8
 23297                           tblptrh	equ	0xFF7
 23298                           tblptrl	equ	0xFF6
 23299                           tablat	equ	0xFF5
 23300                           prodh	equ	0xFF4
 23301                           prodl	equ	0xFF3
 23302                           intcon	equ	0xFF2
 23303                           intcon2	equ	0xFF1
 23304                           intcon3	equ	0xFF0
 23305                           indf0	equ	0xFEF
 23306                           postinc0	equ	0xFEE
 23307                           fsr0h	equ	0xFEA
 23308                           fsr0l	equ	0xFE9
 23309                           wreg	equ	0xFE8
 23310                           indf1	equ	0xFE7
 23311                           postinc1	equ	0xFE6
 23312                           postdec1	equ	0xFE5
 23313                           plusw1	equ	0xFE3
 23314                           fsr1h	equ	0xFE2
 23315                           fsr1l	equ	0xFE1
 23316                           indf2	equ	0xFDF
 23317                           postinc2	equ	0xFDE
 23318                           postdec2	equ	0xFDD
 23319                           plusw2	equ	0xFDB
 23320                           fsr2h	equ	0xFDA
 23321                           fsr2l	equ	0xFD9
 23322                           status	equ	0xFD8
 23323                           
 23324                           	psect	intcode_body
 23325  003B1C                     __pintcode_body:
 23326                           	opt stack 13
 23327  003B1C                     int_func:
 23328                           	opt stack 13
 23329  003B1C  0006               	pop		; remove dummy address from shadow register refresh
 23330  003B1E  CFFA F010          	movff	pclath,??_isr+2
 23331  003B22  CFFB F011          	movff	pclatu,??_isr+3
 23332  003B26  CFE9 F012          	movff	fsr0l,??_isr+4
 23333  003B2A  CFEA F013          	movff	fsr0h,??_isr+5
 23334  003B2E  CFE1 F014          	movff	fsr1l,??_isr+6
 23335  003B32  CFE2 F015          	movff	fsr1h,??_isr+7
 23336  003B36  CFD9 F016          	movff	fsr2l,??_isr+8
 23337  003B3A  CFDA F017          	movff	fsr2h,??_isr+9
 23338  003B3E  CFF3 F018          	movff	prodl,??_isr+10
 23339  003B42  CFF4 F019          	movff	prodh,??_isr+11
 23340  003B46  CFF6 F01A          	movff	tblptrl,??_isr+12
 23341  003B4A  CFF7 F01B          	movff	tblptrh,??_isr+13
 23342  003B4E  CFF8 F01C          	movff	tblptru,??_isr+14
 23343  003B52  CFF5 F01D          	movff	tablat,??_isr+15
 23344  003B56  C044  F01E         	movff	btemp,??_isr+16
 23345  003B5A  C045  F01F         	movff	btemp+1,??_isr+17
 23346  003B5E  C046  F020         	movff	btemp+2,??_isr+18
 23347  003B62  C047  F021         	movff	btemp+3,??_isr+19
 23348                           
 23349                           ;main.c: 107: unsigned char cont;
 23350                           ;main.c: 110: if (PIE1bits.RCIE && PIR1bits.RCIF)
 23351  003B66  BA9D               	btfsc	3997,5,c	;volatile
 23352  003B68  AA9E               	btfss	3998,5,c	;volatile
 23353  003B6A  D014               	goto	i2l97
 23354                           
 23355                           ;main.c: 111: {
 23356                           ;main.c: 112: PIR1bits.RCIF = 0;
 23357  003B6C  9A9E               	bcf	3998,5,c	;volatile
 23358                           
 23359                           ;main.c: 113: data_uart_recebe = recebe_dado_uart();
 23360  003B6E  EC0E  F02C         	call	_recebe_dado_uart	;wreg free
 23361  003B72  6E42               	movwf	_data_uart_recebe,c
 23362                           
 23363                           ;main.c: 114: GPSRead(data_uart_recebe);
 23364  003B74  5042               	movf	_data_uart_recebe,w,c
 23365  003B76  ECED  F011         	call	_GPSRead
 23366                           
 23367                           ;main.c: 115: PORTBbits.RB2 = !PORTBbits.RB2;
 23368  003B7A  B481               	btfsc	3969,2,c	;volatile
 23369  003B7C  D003               	goto	i2u1182_40
 23370  003B7E  6A0E               	clrf	??_isr& (0+255),c
 23371  003B80  2A0E               	incf	??_isr& (0+255),f,c
 23372  003B82  D001               	goto	i2u1183_48
 23373  003B84                     i2u1182_40:
 23374  003B84  6A0E               	clrf	??_isr& (0+255),c
 23375  003B86                     i2u1183_48:
 23376  003B86  460E               	rlncf	??_isr,f,c
 23377  003B88  460E               	rlncf	??_isr,f,c
 23378  003B8A  5081               	movf	3969,w,c	;volatile
 23379  003B8C  180E               	xorwf	??_isr,w,c
 23380  003B8E  0BFB               	andlw	-5
 23381  003B90  180E               	xorwf	??_isr,w,c
 23382  003B92  6E81               	movwf	3969,c	;volatile
 23383  003B94                     i2l97:
 23384                           
 23385                           ;main.c: 116: }
 23386                           ;main.c: 119: unsigned char cont;
 23387                           ;main.c: 121: if (TMR0IF && T0IF)
 23388  003B94  B4F2               	btfsc	intcon,2,c	;volatile
 23389  003B96  A4F2               	btfss	intcon,2,c	;volatile
 23390  003B98  D045               	goto	i2l98
 23391                           
 23392                           ;main.c: 122: {
 23393                           ;main.c: 123: INTCONbits.TMR0IF = 0;
 23394  003B9A  94F2               	bcf	intcon,2,c	;volatile
 23395                           
 23396                           ;main.c: 124: sinaliza_int_timer = 1;
 23397  003B9C  0E01               	movlw	1
 23398  003B9E  0100               	movlb	0	; () banked
 23399  003BA0  6FFF               	movwf	_sinaliza_int_timer& (0+255),b
 23400                           
 23401                           ;main.c: 126: for(cont= 0; cont<4;cont++)
 23402  003BA2  0E00               	movlw	0
 23403  003BA4  6E22               	movwf	isr@cont,c
 23404  003BA6                     i2l9222:
 23405                           
 23406                           ; BSR set to: 0
 23407  003BA6  0E03               	movlw	3
 23408  003BA8  6422               	cpfsgt	isr@cont,c
 23409  003BAA  D001               	goto	i2l99
 23410  003BAC  D019               	goto	i2u1188_40
 23411  003BAE                     i2l99:
 23412                           
 23413                           ;main.c: 127: {
 23414                           ;main.c: 128: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 23415                           
 23416                           ; BSR set to: 0
 23417  003BAE  5022               	movf	isr@cont,w,c
 23418  003BB0  0D02               	mullw	2
 23419  003BB2  0E23               	movlw	low _tempo_tarefa
 23420  003BB4  24F3               	addwf	prodl,w,c
 23421  003BB6  6ED9               	movwf	fsr2l,c
 23422  003BB8  0E00               	movlw	high _tempo_tarefa
 23423  003BBA  20F4               	addwfc	prodh,w,c
 23424  003BBC  6EDA               	movwf	fsr2h,c
 23425  003BBE  50DE               	movf	postinc2,w,c
 23426  003BC0  10DE               	iorwf	postinc2,w,c
 23427  003BC2  B4D8               	btfsc	status,2,c
 23428  003BC4  D00B               	goto	i2l101
 23429  003BC6  5022               	movf	isr@cont,w,c
 23430  003BC8  0D02               	mullw	2
 23431  003BCA  0E23               	movlw	low _tempo_tarefa
 23432  003BCC  24F3               	addwf	prodl,w,c
 23433  003BCE  6ED9               	movwf	fsr2l,c
 23434  003BD0  0E00               	movlw	high _tempo_tarefa
 23435  003BD2  20F4               	addwfc	prodh,w,c
 23436  003BD4  6EDA               	movwf	fsr2h,c
 23437  003BD6  06DE               	decf	postinc2,f,c
 23438  003BD8  0E00               	movlw	0
 23439  003BDA  5ADD               	subwfb	postdec2,f,c
 23440  003BDC                     i2l101:
 23441  003BDC  2A22               	incf	isr@cont,f,c
 23442  003BDE  D7E3               	goto	i2l9222
 23443  003BE0                     i2u1188_40:
 23444                           
 23445                           ;main.c: 130: }
 23446                           ;main.c: 131: if(time_sd > 0) time_sd--;
 23447  003BE0  5033               	movf	_time_sd,w,c
 23448  003BE2  1034               	iorwf	_time_sd+1,w,c
 23449  003BE4  B4D8               	btfsc	status,2,c
 23450  003BE6  D003               	goto	i2l102
 23451  003BE8  0633               	decf	_time_sd,f,c
 23452  003BEA  A0D8               	btfss	status,0,c
 23453  003BEC  0634               	decf	_time_sd+1,f,c
 23454  003BEE                     i2l102:
 23455                           
 23456                           ;main.c: 132: if(time_atualizacao > 0) time_atualizacao--;
 23457  003BEE  5031               	movf	_time_atualizacao,w,c
 23458  003BF0  1032               	iorwf	_time_atualizacao+1,w,c
 23459  003BF2  B4D8               	btfsc	status,2,c
 23460  003BF4  D003               	goto	i2l103
 23461  003BF6  0631               	decf	_time_atualizacao,f,c
 23462  003BF8  A0D8               	btfss	status,0,c
 23463  003BFA  0632               	decf	_time_atualizacao+1,f,c
 23464  003BFC                     i2l103:
 23465                           
 23466                           ;main.c: 133: if(tarefa_em_execucao == 1)
 23467  003BFC  0441               	decf	_tarefa_em_execucao,w,c	;volatile
 23468  003BFE  A4D8               	btfss	status,2,c
 23469  003C00  D00B               	goto	i2l105
 23470                           
 23471                           ;main.c: 134: {
 23472                           ;main.c: 135: timeout_tarefa--;
 23473  003C02  0635               	decf	_timeout_tarefa,f,c
 23474  003C04  A0D8               	btfss	status,0,c
 23475  003C06  0636               	decf	_timeout_tarefa+1,f,c
 23476                           
 23477                           ;main.c: 136: if(!timeout_tarefa)
 23478  003C08  5035               	movf	_timeout_tarefa,w,c
 23479  003C0A  1036               	iorwf	_timeout_tarefa+1,w,c
 23480  003C0C  A4D8               	btfss	status,2,c
 23481  003C0E  D004               	goto	i2l105
 23482                           
 23483                           ;main.c: 137: {
 23484                           ;main.c: 139: PCLATH = 0;
 23485  003C10  0E00               	movlw	0
 23486  003C12  6EFA               	movwf	pclath,c	;volatile
 23487                           
 23488                           ;main.c: 140: PCL = 0;
 23489  003C14  0E00               	movlw	0
 23490  003C16  6EF9               	movwf	pcl,c	;volatile
 23491  003C18                     i2l105:
 23492                           
 23493                           ;main.c: 141: }
 23494                           ;main.c: 142: }
 23495                           ;main.c: 146: write_timer_zero(0x45);
 23496  003C18  0E00               	movlw	0
 23497  003C1A  6E02               	movwf	i2write_timer_zero@timer0+1,c
 23498  003C1C  0E45               	movlw	69
 23499  003C1E  6E01               	movwf	i2write_timer_zero@timer0,c
 23500  003C20  EC4F  F02C         	call	i2_write_timer_zero	;wreg free
 23501  003C24                     i2l98:
 23502                           
 23503                           ;main.c: 147: }
 23504                           ;main.c: 149: if (INT0IF && INT0IE)
 23505  003C24  B2F2               	btfsc	intcon,1,c	;volatile
 23506  003C26  A8F2               	btfss	intcon,4,c	;volatile
 23507  003C28  D001               	goto	i2l106
 23508                           
 23509                           ;main.c: 150: {
 23510                           ;main.c: 151: INT0IF = 0;
 23511  003C2A  92F2               	bcf	intcon,1,c	;volatile
 23512  003C2C                     i2l106:
 23513  003C2C  C021  F047         	movff	??_isr+19,btemp+3
 23514  003C30  C020  F046         	movff	??_isr+18,btemp+2
 23515  003C34  C01F  F045         	movff	??_isr+17,btemp+1
 23516  003C38  C01E  F044         	movff	??_isr+16,btemp
 23517  003C3C  C01D  FFF5         	movff	??_isr+15,tablat
 23518  003C40  C01C  FFF8         	movff	??_isr+14,tblptru
 23519  003C44  C01B  FFF7         	movff	??_isr+13,tblptrh
 23520  003C48  C01A  FFF6         	movff	??_isr+12,tblptrl
 23521  003C4C  C019  FFF4         	movff	??_isr+11,prodh
 23522  003C50  C018  FFF3         	movff	??_isr+10,prodl
 23523  003C54  C017  FFDA         	movff	??_isr+9,fsr2h
 23524  003C58  C016  FFD9         	movff	??_isr+8,fsr2l
 23525  003C5C  C015  FFE2         	movff	??_isr+7,fsr1h
 23526  003C60  C014  FFE1         	movff	??_isr+6,fsr1l
 23527  003C64  C013  FFEA         	movff	??_isr+5,fsr0h
 23528  003C68  C012  FFE9         	movff	??_isr+4,fsr0l
 23529  003C6C  C011  FFFB         	movff	??_isr+3,pclatu
 23530  003C70  C010  FFFA         	movff	??_isr+2,pclath
 23531  003C74  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 23532  003C76  0011               	retfie		f
 23533  003C78                     __end_of_isr:
 23534                           	opt stack 0
 23535                           tosu	equ	0xFFF
 23536                           tosh	equ	0xFFE
 23537                           tosl	equ	0xFFD
 23538                           pclatu	equ	0xFFB
 23539                           pclath	equ	0xFFA
 23540                           pcl	equ	0xFF9
 23541                           tblptru	equ	0xFF8
 23542                           tblptrh	equ	0xFF7
 23543                           tblptrl	equ	0xFF6
 23544                           tablat	equ	0xFF5
 23545                           prodh	equ	0xFF4
 23546                           prodl	equ	0xFF3
 23547                           intcon	equ	0xFF2
 23548                           intcon2	equ	0xFF1
 23549                           intcon3	equ	0xFF0
 23550                           indf0	equ	0xFEF
 23551                           postinc0	equ	0xFEE
 23552                           fsr0h	equ	0xFEA
 23553                           fsr0l	equ	0xFE9
 23554                           wreg	equ	0xFE8
 23555                           indf1	equ	0xFE7
 23556                           postinc1	equ	0xFE6
 23557                           postdec1	equ	0xFE5
 23558                           plusw1	equ	0xFE3
 23559                           fsr1h	equ	0xFE2
 23560                           fsr1l	equ	0xFE1
 23561                           indf2	equ	0xFDF
 23562                           postinc2	equ	0xFDE
 23563                           postdec2	equ	0xFDD
 23564                           plusw2	equ	0xFDB
 23565                           fsr2h	equ	0xFDA
 23566                           fsr2l	equ	0xFD9
 23567                           status	equ	0xFD8
 23568                           
 23569 ;; *************** function i2_write_timer_zero *****************
 23570 ;; Defined at:
 23571 ;;		line 138 in file "bibliotecas/hardware.c"
 23572 ;; Parameters:    Size  Location     Type
 23573 ;;  timer0          2    0[COMRAM] unsigned int 
 23574 ;; Auto vars:     Size  Location     Type
 23575 ;;		None
 23576 ;; Return value:  Size  Location     Type
 23577 ;;                  1    wreg      void 
 23578 ;; Registers used:
 23579 ;;		None
 23580 ;; Tracked objects:
 23581 ;;		On entry : 0/0
 23582 ;;		On exit  : 0/0
 23583 ;;		Unchanged: 0/0
 23584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23585 ;;      Params:         2       0       0       0       0       0       0       0       0
 23586 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23587 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23588 ;;      Totals:         2       0       0       0       0       0       0       0       0
 23589 ;;Total ram usage:        2 bytes
 23590 ;; Hardware stack levels used:    1
 23591 ;; This function calls:
 23592 ;;		Nothing
 23593 ;; This function is called by:
 23594 ;;		_isr
 23595 ;; This function uses a non-reentrant model
 23596 ;;
 23597                           
 23598                           	psect	text90
 23599  00589E                     __ptext90:
 23600                           	opt stack 0
 23601  00589E                     i2_write_timer_zero:
 23602                           	opt stack 14
 23603                           
 23604                           ;hardware.c: 146: TMR0 = timer0;
 23605                           
 23606                           ;incstack = 0
 23607  00589E  C001  FFD6         	movff	i2write_timer_zero@timer0,4054	;volatile
 23608  0058A2  C002  FFD7         	movff	i2write_timer_zero@timer0+1,4055	;volatile
 23609  0058A6  0012               	return		;funcret
 23610  0058A8                     __end_ofi2_write_timer_zero:
 23611                           	opt stack 0
 23612                           tosu	equ	0xFFF
 23613                           tosh	equ	0xFFE
 23614                           tosl	equ	0xFFD
 23615                           pclatu	equ	0xFFB
 23616                           pclath	equ	0xFFA
 23617                           pcl	equ	0xFF9
 23618                           tblptru	equ	0xFF8
 23619                           tblptrh	equ	0xFF7
 23620                           tblptrl	equ	0xFF6
 23621                           tablat	equ	0xFF5
 23622                           prodh	equ	0xFF4
 23623                           prodl	equ	0xFF3
 23624                           intcon	equ	0xFF2
 23625                           intcon2	equ	0xFF1
 23626                           intcon3	equ	0xFF0
 23627                           indf0	equ	0xFEF
 23628                           postinc0	equ	0xFEE
 23629                           fsr0h	equ	0xFEA
 23630                           fsr0l	equ	0xFE9
 23631                           wreg	equ	0xFE8
 23632                           indf1	equ	0xFE7
 23633                           postinc1	equ	0xFE6
 23634                           postdec1	equ	0xFE5
 23635                           plusw1	equ	0xFE3
 23636                           fsr1h	equ	0xFE2
 23637                           fsr1l	equ	0xFE1
 23638                           indf2	equ	0xFDF
 23639                           postinc2	equ	0xFDE
 23640                           postdec2	equ	0xFDD
 23641                           plusw2	equ	0xFDB
 23642                           fsr2h	equ	0xFDA
 23643                           fsr2l	equ	0xFD9
 23644                           status	equ	0xFD8
 23645                           
 23646 ;; *************** function _recebe_dado_uart *****************
 23647 ;; Defined at:
 23648 ;;		line 138 in file "bibliotecas/uart.c"
 23649 ;; Parameters:    Size  Location     Type
 23650 ;;		None
 23651 ;; Auto vars:     Size  Location     Type
 23652 ;;		None
 23653 ;; Return value:  Size  Location     Type
 23654 ;;                  1    wreg      unsigned char 
 23655 ;; Registers used:
 23656 ;;		wreg, status,2
 23657 ;; Tracked objects:
 23658 ;;		On entry : 0/0
 23659 ;;		On exit  : 0/0
 23660 ;;		Unchanged: 0/0
 23661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23662 ;;      Params:         0       0       0       0       0       0       0       0       0
 23663 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23664 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23665 ;;      Totals:         0       0       0       0       0       0       0       0       0
 23666 ;;Total ram usage:        0 bytes
 23667 ;; Hardware stack levels used:    1
 23668 ;; This function calls:
 23669 ;;		Nothing
 23670 ;; This function is called by:
 23671 ;;		_isr
 23672 ;;		_recebe_string_uart
 23673 ;; This function uses a non-reentrant model
 23674 ;;
 23675                           
 23676                           	psect	text91
 23677  00581C                     __ptext91:
 23678                           	opt stack 0
 23679  00581C                     _recebe_dado_uart:
 23680                           	opt stack 14
 23681                           
 23682                           ;uart.c: 140: while(RCIF==0);
 23683                           
 23684                           ;incstack = 0
 23685  00581C  AA9E               	btfss	3998,5,c	;volatile
 23686  00581E  D7FE               	goto	_recebe_dado_uart
 23687                           
 23688                           ;uart.c: 141: if(RCSTAbits.OERR)
 23689  005820  A2AB               	btfss	4011,1,c	;volatile
 23690  005822  D003               	goto	i2l982
 23691                           
 23692                           ;uart.c: 142: {
 23693                           ;uart.c: 143: CREN = 0;
 23694  005824  98AB               	bcf	4011,4,c	;volatile
 23695                           
 23696                           ;uart.c: 144: __nop();
 23697  005826  F000               	nop	
 23698                           
 23699                           ;uart.c: 145: CREN=1;
 23700  005828  88AB               	bsf	4011,4,c	;volatile
 23701  00582A                     i2l982:
 23702                           
 23703                           ;uart.c: 146: }
 23704                           ;uart.c: 147: return(RCREG);
 23705  00582A  50AE               	movf	4014,w,c	;volatile
 23706  00582C  0012               	return	
 23707  00582E                     __end_of_recebe_dado_uart:
 23708                           	opt stack 0
 23709                           tosu	equ	0xFFF
 23710                           tosh	equ	0xFFE
 23711                           tosl	equ	0xFFD
 23712                           pclatu	equ	0xFFB
 23713                           pclath	equ	0xFFA
 23714                           pcl	equ	0xFF9
 23715                           tblptru	equ	0xFF8
 23716                           tblptrh	equ	0xFF7
 23717                           tblptrl	equ	0xFF6
 23718                           tablat	equ	0xFF5
 23719                           prodh	equ	0xFF4
 23720                           prodl	equ	0xFF3
 23721                           intcon	equ	0xFF2
 23722                           intcon2	equ	0xFF1
 23723                           intcon3	equ	0xFF0
 23724                           indf0	equ	0xFEF
 23725                           postinc0	equ	0xFEE
 23726                           fsr0h	equ	0xFEA
 23727                           fsr0l	equ	0xFE9
 23728                           wreg	equ	0xFE8
 23729                           indf1	equ	0xFE7
 23730                           postinc1	equ	0xFE6
 23731                           postdec1	equ	0xFE5
 23732                           plusw1	equ	0xFE3
 23733                           fsr1h	equ	0xFE2
 23734                           fsr1l	equ	0xFE1
 23735                           indf2	equ	0xFDF
 23736                           postinc2	equ	0xFDE
 23737                           postdec2	equ	0xFDD
 23738                           plusw2	equ	0xFDB
 23739                           fsr2h	equ	0xFDA
 23740                           fsr2l	equ	0xFD9
 23741                           status	equ	0xFD8
 23742                           
 23743 ;; *************** function _GPSRead *****************
 23744 ;; Defined at:
 23745 ;;		line 468 in file "bibliotecas/GPS.c"
 23746 ;; Parameters:    Size  Location     Type
 23747 ;;  buff            1    wreg     unsigned char 
 23748 ;; Auto vars:     Size  Location     Type
 23749 ;;  buff            1   11[COMRAM] unsigned char 
 23750 ;;  c               1   12[COMRAM] unsigned char 
 23751 ;; Return value:  Size  Location     Type
 23752 ;;                  2    8[None  ] int 
 23753 ;; Registers used:
 23754 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23755 ;; Tracked objects:
 23756 ;;		On entry : 0/0
 23757 ;;		On exit  : 0/0
 23758 ;;		Unchanged: 0/0
 23759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23760 ;;      Params:         0       0       0       0       0       0       0       0       0
 23761 ;;      Locals:         2       0       0       0       0       0       0       0       0
 23762 ;;      Temps:          2       0       0       0       0       0       0       0       0
 23763 ;;      Totals:         4       0       0       0       0       0       0       0       0
 23764 ;;Total ram usage:        4 bytes
 23765 ;; Hardware stack levels used:    1
 23766 ;; Hardware stack levels required when called:    1
 23767 ;; This function calls:
 23768 ;;		_strcmp
 23769 ;;		_stringcpy
 23770 ;; This function is called by:
 23771 ;;		_isr
 23772 ;; This function uses a non-reentrant model
 23773 ;;
 23774                           
 23775                           	psect	text92
 23776  0023DA                     __ptext92:
 23777                           	opt stack 0
 23778  0023DA                     _GPSRead:
 23779                           	opt stack 13
 23780                           
 23781                           ;incstack = 0
 23782                           ;GPSRead@buff stored from wreg
 23783  0023DA  6E0C               	movwf	GPSRead@buff,c
 23784                           
 23785                           ;GPS.c: 470: uint8_t c = buff;
 23786  0023DC  C00C  F00D         	movff	GPSRead@buff,GPSRead@c
 23787                           
 23788                           ;GPS.c: 472: switch(c) {
 23789  0023E0  D156               	goto	i2l318
 23790  0023E2                     
 23791                           ;GPS.c: 474: if(SentenceType == 1)
 23792  0023E2  043D               	decf	_SentenceType,w,c
 23793  0023E4  A4D8               	btfss	status,2,c
 23794  0023E6  D004               	goto	i2l320
 23795                           
 23796                           ;GPS.c: 475: GPRMC_ok = 1;
 23797  0023E8  0E00               	movlw	0
 23798  0023EA  6E30               	movwf	_GPRMC_ok+1,c
 23799  0023EC  0E01               	movlw	1
 23800  0023EE  6E2F               	movwf	_GPRMC_ok,c
 23801  0023F0                     i2l320:
 23802                           
 23803                           ;GPS.c: 476: if(SentenceType == 2)
 23804  0023F0  0E02               	movlw	2
 23805  0023F2  183D               	xorwf	_SentenceType,w,c
 23806  0023F4  A4D8               	btfss	status,2,c
 23807  0023F6  D004               	goto	i2l321
 23808                           
 23809                           ;GPS.c: 477: GPGGA_ok = 1;
 23810  0023F8  0E00               	movlw	0
 23811  0023FA  6E2E               	movwf	_GPGGA_ok+1,c
 23812  0023FC  0E01               	movlw	1
 23813  0023FE  6E2D               	movwf	_GPGGA_ok,c
 23814  002400                     i2l321:
 23815                           
 23816                           ;GPS.c: 478: if(GPRMC_ok && GPGGA_ok) {
 23817  002400  502F               	movf	_GPRMC_ok,w,c
 23818  002402  1030               	iorwf	_GPRMC_ok+1,w,c
 23819  002404  B4D8               	btfsc	status,2,c
 23820  002406  0012               	return	
 23821  002408  502D               	movf	_GPGGA_ok,w,c
 23822  00240A  102E               	iorwf	_GPGGA_ok+1,w,c
 23823  00240C  B4D8               	btfsc	status,2,c
 23824  00240E  0012               	return	
 23825                           
 23826                           ;GPS.c: 479: GPRMC_ok = GPGGA_ok = 0;
 23827  002410  0E00               	movlw	0
 23828  002412  6E2E               	movwf	_GPGGA_ok+1,c
 23829  002414  0E00               	movlw	0
 23830  002416  6E2D               	movwf	_GPGGA_ok,c
 23831  002418  C02D  F02F         	movff	_GPGGA_ok,_GPRMC_ok
 23832  00241C  C02E  F030         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 23833                           
 23834                           ;GPS.c: 481: }
 23835                           ;GPS.c: 482: break;
 23836                           
 23837                           ;GPS.c: 480: return 1;
 23838                           ;	Return value of _GPSRead is never used
 23839  002420  0012               	return	
 23840  002422                     
 23841                           ;GPS.c: 485: Term = char_number = 0;
 23842  002422  0E00               	movlw	0
 23843  002424  6E3E               	movwf	_char_number,c
 23844  002426  C03E  F03C         	movff	_char_number,_Term
 23845                           
 23846                           ;GPS.c: 486: break;
 23847  00242A  0012               	return	
 23848  00242C                     
 23849                           ;GPS.c: 489: buffer[char_number] = '\0';
 23850  00242C  503E               	movf	_char_number,w,c
 23851  00242E  0D01               	mullw	1
 23852  002430  0EAC               	movlw	low _buffer
 23853  002432  24F3               	addwf	prodl,w,c
 23854  002434  6ED9               	movwf	fsr2l,c
 23855  002436  0E01               	movlw	high _buffer
 23856  002438  20F4               	addwfc	prodh,w,c
 23857  00243A  6EDA               	movwf	fsr2h,c
 23858  00243C  0E00               	movlw	0
 23859  00243E  6EDF               	movwf	indf2,c
 23860                           
 23861                           ;GPS.c: 490: if(Term == 0) {
 23862  002440  503C               	movf	_Term,w,c
 23863  002442  A4D8               	btfss	status,2,c
 23864  002444  D030               	goto	i2l331
 23865                           
 23866                           ;GPS.c: 491: stringcpy(buffer, sentence, 0);
 23867  002446  0EAC               	movlw	low _buffer
 23868  002448  6E01               	movwf	stringcpy@str1,c
 23869  00244A  0E01               	movlw	high _buffer
 23870  00244C  6E02               	movwf	stringcpy@str1+1,c
 23871  00244E  0ED2               	movlw	low _sentence
 23872  002450  6E03               	movwf	stringcpy@str2,c
 23873  002452  0E01               	movlw	high _sentence
 23874  002454  6E04               	movwf	stringcpy@str2+1,c
 23875  002456  0E00               	movlw	0
 23876  002458  6E06               	movwf	stringcpy@dir+1,c
 23877  00245A  0E00               	movlw	0
 23878  00245C  6E05               	movwf	stringcpy@dir,c
 23879  00245E  EC26  F029         	call	_stringcpy	;wreg free
 23880                           
 23881                           ;GPS.c: 492: if(strcmp(sentence, "GPRMC") == 0)
 23882  002462  0ED2               	movlw	low _sentence
 23883  002464  6E01               	movwf	strcmp@s1,c
 23884  002466  0E01               	movlw	high _sentence
 23885  002468  6E02               	movwf	strcmp@s1+1,c
 23886  00246A  0E60               	movlw	low STR_11
 23887  00246C  6E03               	movwf	strcmp@s2,c
 23888  00246E  0E62               	movlw	high STR_11
 23889  002470  6E04               	movwf	strcmp@s2+1,c
 23890  002472  ECE1  F029         	call	_strcmp	;wreg free
 23891  002476  5001               	movf	?_strcmp,w,c
 23892  002478  1002               	iorwf	?_strcmp+1,w,c
 23893  00247A  A4D8               	btfss	status,2,c
 23894  00247C  D002               	goto	i2l328
 23895                           
 23896                           ;GPS.c: 493: SentenceType = 1;
 23897  00247E  0E01               	movlw	1
 23898  002480  D011               	goto	L11
 23899  002482                     i2l328:
 23900                           
 23901                           ;GPS.c: 494: else if(strcmp(sentence, "GPGGA") == 0)
 23902  002482  0ED2               	movlw	low _sentence
 23903  002484  6E01               	movwf	strcmp@s1,c
 23904  002486  0E01               	movlw	high _sentence
 23905  002488  6E02               	movwf	strcmp@s1+1,c
 23906  00248A  0E5A               	movlw	low STR_12
 23907  00248C  6E03               	movwf	strcmp@s2,c
 23908  00248E  0E62               	movlw	high STR_12
 23909  002490  6E04               	movwf	strcmp@s2+1,c
 23910  002492  ECE1  F029         	call	_strcmp	;wreg free
 23911  002496  5001               	movf	?_strcmp,w,c
 23912  002498  1002               	iorwf	?_strcmp+1,w,c
 23913  00249A  A4D8               	btfss	status,2,c
 23914  00249C  D002               	goto	i2l330
 23915                           
 23916                           ;GPS.c: 495: SentenceType = 2;
 23917  00249E  0E02               	movlw	2
 23918  0024A0  D001               	goto	L11
 23919  0024A2                     i2l330:
 23920                           
 23921                           ;GPS.c: 496: else
 23922                           ;GPS.c: 497: SentenceType = 3;
 23923  0024A2  0E03               	movlw	3
 23924  0024A4                     L11:
 23925  0024A4  6E3D               	movwf	_SentenceType,c
 23926  0024A6                     i2l331:
 23927                           
 23928                           ;GPS.c: 498: }
 23929                           ;GPS.c: 501: if(Term == 1 && SentenceType == 1) {
 23930  0024A6  043C               	decf	_Term,w,c
 23931  0024A8  A4D8               	btfss	status,2,c
 23932  0024AA  D011               	goto	i2l332
 23933  0024AC  043D               	decf	_SentenceType,w,c
 23934  0024AE  A4D8               	btfss	status,2,c
 23935  0024B0  D00E               	goto	i2l332
 23936                           
 23937                           ;GPS.c: 502: stringcpy(buffer, rawTime, 0);
 23938  0024B2  0EAC               	movlw	low _buffer
 23939  0024B4  6E01               	movwf	stringcpy@str1,c
 23940  0024B6  0E01               	movlw	high _buffer
 23941  0024B8  6E02               	movwf	stringcpy@str1+1,c
 23942  0024BA  0EF2               	movlw	low _rawTime
 23943  0024BC  6E03               	movwf	stringcpy@str2,c
 23944  0024BE  0E02               	movlw	high _rawTime
 23945  0024C0  6E04               	movwf	stringcpy@str2+1,c
 23946  0024C2  0E00               	movlw	0
 23947  0024C4  6E06               	movwf	stringcpy@dir+1,c
 23948  0024C6  0E00               	movlw	0
 23949  0024C8  6E05               	movwf	stringcpy@dir,c
 23950  0024CA  EC26  F029         	call	_stringcpy	;wreg free
 23951  0024CE                     i2l332:
 23952                           
 23953                           ;GPS.c: 503: }
 23954                           ;GPS.c: 506: if((Term == 3) && (SentenceType == 1)) {
 23955  0024CE  0E03               	movlw	3
 23956  0024D0  183C               	xorwf	_Term,w,c
 23957  0024D2  A4D8               	btfss	status,2,c
 23958  0024D4  D011               	goto	i2l333
 23959  0024D6  043D               	decf	_SentenceType,w,c
 23960  0024D8  A4D8               	btfss	status,2,c
 23961  0024DA  D00E               	goto	i2l333
 23962                           
 23963                           ;GPS.c: 507: stringcpy(buffer, rawLatitude, 1);
 23964  0024DC  0EAC               	movlw	low _buffer
 23965  0024DE  6E01               	movwf	stringcpy@str1,c
 23966  0024E0  0E01               	movlw	high _buffer
 23967  0024E2  6E02               	movwf	stringcpy@str1+1,c
 23968  0024E4  0EE5               	movlw	low _rawLatitude
 23969  0024E6  6E03               	movwf	stringcpy@str2,c
 23970  0024E8  0E02               	movlw	high _rawLatitude
 23971  0024EA  6E04               	movwf	stringcpy@str2+1,c
 23972  0024EC  0E00               	movlw	0
 23973  0024EE  6E06               	movwf	stringcpy@dir+1,c
 23974  0024F0  0E01               	movlw	1
 23975  0024F2  6E05               	movwf	stringcpy@dir,c
 23976  0024F4  EC26  F029         	call	_stringcpy	;wreg free
 23977  0024F8                     i2l333:
 23978                           
 23979                           ;GPS.c: 508: }
 23980                           ;GPS.c: 510: if((Term == 4) && (SentenceType == 1)) {
 23981  0024F8  0E04               	movlw	4
 23982  0024FA  183C               	xorwf	_Term,w,c
 23983  0024FC  A4D8               	btfss	status,2,c
 23984  0024FE  D00D               	goto	i2l336
 23985  002500  043D               	decf	_SentenceType,w,c
 23986  002502  A4D8               	btfss	status,2,c
 23987  002504  D00A               	goto	i2l336
 23988                           
 23989                           ;GPS.c: 511: if(buffer[0] == 'N')
 23990  002506  0E4E               	movlw	78
 23991  002508  0101               	movlb	1	; () banked
 23992  00250A  19AC               	xorwf	_buffer& (0+255),w,b
 23993  00250C  A4D8               	btfss	status,2,c
 23994  00250E  D002               	goto	i2l335
 23995                           
 23996                           ; BSR set to: 1
 23997                           ;GPS.c: 512: rawLatitude[0] = '0';
 23998  002510  0E30               	movlw	48
 23999  002512  D001               	goto	L12
 24000  002514                     i2l335:
 24001                           
 24002                           ;GPS.c: 513: else
 24003                           ;GPS.c: 514: rawLatitude[0] = '-';
 24004                           
 24005                           ; BSR set to: 2
 24006  002514  0E2D               	movlw	45
 24007  002516                     L12:
 24008  002516  0102               	movlb	2	; () banked
 24009  002518  6FE5               	movwf	_rawLatitude& (0+255),b
 24010  00251A                     i2l336:
 24011                           
 24012                           ;GPS.c: 515: }
 24013                           ;GPS.c: 518: if((Term == 5) && (SentenceType == 1)) {
 24014                           
 24015                           ; BSR set to: 2
 24016                           
 24017                           ; BSR set to: 2
 24018  00251A  0E05               	movlw	5
 24019  00251C  183C               	xorwf	_Term,w,c
 24020  00251E  A4D8               	btfss	status,2,c
 24021  002520  D011               	goto	i2l337
 24022  002522  043D               	decf	_SentenceType,w,c
 24023  002524  A4D8               	btfss	status,2,c
 24024  002526  D00E               	goto	i2l337
 24025                           
 24026                           ;GPS.c: 519: stringcpy(buffer, rawLongitude, 1);
 24027  002528  0EAC               	movlw	low _buffer
 24028  00252A  6E01               	movwf	stringcpy@str1,c
 24029  00252C  0E01               	movlw	high _buffer
 24030  00252E  6E02               	movwf	stringcpy@str1+1,c
 24031  002530  0ED8               	movlw	low _rawLongitude
 24032  002532  6E03               	movwf	stringcpy@str2,c
 24033  002534  0E02               	movlw	high _rawLongitude
 24034  002536  6E04               	movwf	stringcpy@str2+1,c
 24035  002538  0E00               	movlw	0
 24036  00253A  6E06               	movwf	stringcpy@dir+1,c
 24037  00253C  0E01               	movlw	1
 24038  00253E  6E05               	movwf	stringcpy@dir,c
 24039  002540  EC26  F029         	call	_stringcpy	;wreg free
 24040  002544                     i2l337:
 24041                           
 24042                           ;GPS.c: 520: }
 24043                           ;GPS.c: 522: if((Term == 6) && (SentenceType == 1)) {
 24044  002544  0E06               	movlw	6
 24045  002546  183C               	xorwf	_Term,w,c
 24046  002548  A4D8               	btfss	status,2,c
 24047  00254A  D00D               	goto	i2l340
 24048  00254C  043D               	decf	_SentenceType,w,c
 24049  00254E  A4D8               	btfss	status,2,c
 24050  002550  D00A               	goto	i2l340
 24051                           
 24052                           ;GPS.c: 523: if(buffer[0] == 'E')
 24053  002552  0E45               	movlw	69
 24054  002554  0101               	movlb	1	; () banked
 24055  002556  19AC               	xorwf	_buffer& (0+255),w,b
 24056  002558  A4D8               	btfss	status,2,c
 24057  00255A  D002               	goto	i2l339
 24058                           
 24059                           ; BSR set to: 1
 24060                           ;GPS.c: 524: rawLongitude[0] = '0';
 24061  00255C  0E30               	movlw	48
 24062  00255E  D001               	goto	L13
 24063  002560                     i2l339:
 24064                           
 24065                           ;GPS.c: 525: else
 24066                           ;GPS.c: 526: rawLongitude[0] = '-';
 24067                           
 24068                           ; BSR set to: 2
 24069  002560  0E2D               	movlw	45
 24070  002562                     L13:
 24071  002562  0102               	movlb	2	; () banked
 24072  002564  6FD8               	movwf	_rawLongitude& (0+255),b
 24073  002566                     i2l340:
 24074                           
 24075                           ;GPS.c: 527: }
 24076                           ;GPS.c: 530: if((Term == 7) && (SentenceType == 1)) {
 24077                           
 24078                           ; BSR set to: 2
 24079                           
 24080                           ; BSR set to: 2
 24081  002566  0E07               	movlw	7
 24082  002568  183C               	xorwf	_Term,w,c
 24083  00256A  A4D8               	btfss	status,2,c
 24084  00256C  D011               	goto	i2l341
 24085  00256E  043D               	decf	_SentenceType,w,c
 24086  002570  A4D8               	btfss	status,2,c
 24087  002572  D00E               	goto	i2l341
 24088                           
 24089                           ;GPS.c: 531: stringcpy(buffer, rawSpeed, 0);
 24090  002574  0EAC               	movlw	low _buffer
 24091  002576  6E01               	movwf	stringcpy@str1,c
 24092  002578  0E01               	movlw	high _buffer
 24093  00257A  6E02               	movwf	stringcpy@str1+1,c
 24094  00257C  0ECC               	movlw	low _rawSpeed
 24095  00257E  6E03               	movwf	stringcpy@str2,c
 24096  002580  0E01               	movlw	high _rawSpeed
 24097  002582  6E04               	movwf	stringcpy@str2+1,c
 24098  002584  0E00               	movlw	0
 24099  002586  6E06               	movwf	stringcpy@dir+1,c
 24100  002588  0E00               	movlw	0
 24101  00258A  6E05               	movwf	stringcpy@dir,c
 24102  00258C  EC26  F029         	call	_stringcpy	;wreg free
 24103  002590                     i2l341:
 24104                           
 24105                           ;GPS.c: 532: }
 24106                           ;GPS.c: 535: if((Term == 8) && (SentenceType == 1)) {
 24107  002590  0E08               	movlw	8
 24108  002592  183C               	xorwf	_Term,w,c
 24109  002594  A4D8               	btfss	status,2,c
 24110  002596  D011               	goto	i2l342
 24111  002598  043D               	decf	_SentenceType,w,c
 24112  00259A  A4D8               	btfss	status,2,c
 24113  00259C  D00E               	goto	i2l342
 24114                           
 24115                           ;GPS.c: 536: stringcpy(buffer, rawCourse, 0);
 24116  00259E  0EAC               	movlw	low _buffer
 24117  0025A0  6E01               	movwf	stringcpy@str1,c
 24118  0025A2  0E01               	movlw	high _buffer
 24119  0025A4  6E02               	movwf	stringcpy@str1+1,c
 24120  0025A6  0EC6               	movlw	low _rawCourse
 24121  0025A8  6E03               	movwf	stringcpy@str2,c
 24122  0025AA  0E01               	movlw	high _rawCourse
 24123  0025AC  6E04               	movwf	stringcpy@str2+1,c
 24124  0025AE  0E00               	movlw	0
 24125  0025B0  6E06               	movwf	stringcpy@dir+1,c
 24126  0025B2  0E00               	movlw	0
 24127  0025B4  6E05               	movwf	stringcpy@dir,c
 24128  0025B6  EC26  F029         	call	_stringcpy	;wreg free
 24129  0025BA                     i2l342:
 24130                           
 24131                           ;GPS.c: 537: }
 24132                           ;GPS.c: 540: if(Term == 9 && SentenceType == 1) {
 24133  0025BA  0E09               	movlw	9
 24134  0025BC  183C               	xorwf	_Term,w,c
 24135  0025BE  A4D8               	btfss	status,2,c
 24136  0025C0  D011               	goto	i2l343
 24137  0025C2  043D               	decf	_SentenceType,w,c
 24138  0025C4  A4D8               	btfss	status,2,c
 24139  0025C6  D00E               	goto	i2l343
 24140                           
 24141                           ;GPS.c: 541: stringcpy(buffer, rawDate, 0);
 24142  0025C8  0EAC               	movlw	low _buffer
 24143  0025CA  6E01               	movwf	stringcpy@str1,c
 24144  0025CC  0E01               	movlw	high _buffer
 24145  0025CE  6E02               	movwf	stringcpy@str1+1,c
 24146  0025D0  0EBF               	movlw	low _rawDate
 24147  0025D2  6E03               	movwf	stringcpy@str2,c
 24148  0025D4  0E01               	movlw	high _rawDate
 24149  0025D6  6E04               	movwf	stringcpy@str2+1,c
 24150  0025D8  0E00               	movlw	0
 24151  0025DA  6E06               	movwf	stringcpy@dir+1,c
 24152  0025DC  0E00               	movlw	0
 24153  0025DE  6E05               	movwf	stringcpy@dir,c
 24154  0025E0  EC26  F029         	call	_stringcpy	;wreg free
 24155  0025E4                     i2l343:
 24156                           
 24157                           ;GPS.c: 542: }
 24158                           ;GPS.c: 545: if((Term == 7) && (SentenceType == 2)) {
 24159  0025E4  0E07               	movlw	7
 24160  0025E6  183C               	xorwf	_Term,w,c
 24161  0025E8  A4D8               	btfss	status,2,c
 24162  0025EA  D012               	goto	i2l344
 24163  0025EC  0E02               	movlw	2
 24164  0025EE  183D               	xorwf	_SentenceType,w,c
 24165  0025F0  A4D8               	btfss	status,2,c
 24166  0025F2  D00E               	goto	i2l344
 24167                           
 24168                           ;GPS.c: 546: stringcpy(buffer, rawSatellites, 0);
 24169  0025F4  0EAC               	movlw	low _buffer
 24170  0025F6  6E01               	movwf	stringcpy@str1,c
 24171  0025F8  0E01               	movlw	high _buffer
 24172  0025FA  6E02               	movwf	stringcpy@str1+1,c
 24173  0025FC  0ED8               	movlw	low _rawSatellites
 24174  0025FE  6E03               	movwf	stringcpy@str2,c
 24175  002600  0E01               	movlw	high _rawSatellites
 24176  002602  6E04               	movwf	stringcpy@str2+1,c
 24177  002604  0E00               	movlw	0
 24178  002606  6E06               	movwf	stringcpy@dir+1,c
 24179  002608  0E00               	movlw	0
 24180  00260A  6E05               	movwf	stringcpy@dir,c
 24181  00260C  EC26  F029         	call	_stringcpy	;wreg free
 24182  002610                     i2l344:
 24183                           
 24184                           ;GPS.c: 547: }
 24185                           ;GPS.c: 550: if((Term == 9) && (SentenceType == 2)) {
 24186  002610  0E09               	movlw	9
 24187  002612  183C               	xorwf	_Term,w,c
 24188  002614  A4D8               	btfss	status,2,c
 24189  002616  D012               	goto	i2l345
 24190  002618  0E02               	movlw	2
 24191  00261A  183D               	xorwf	_SentenceType,w,c
 24192  00261C  A4D8               	btfss	status,2,c
 24193  00261E  D00E               	goto	i2l345
 24194                           
 24195                           ;GPS.c: 551: stringcpy(buffer, rawAltitude, 0);
 24196  002620  0EAC               	movlw	low _buffer
 24197  002622  6E01               	movwf	stringcpy@str1,c
 24198  002624  0E01               	movlw	high _buffer
 24199  002626  6E02               	movwf	stringcpy@str1+1,c
 24200  002628  0EB8               	movlw	low _rawAltitude
 24201  00262A  6E03               	movwf	stringcpy@str2,c
 24202  00262C  0E01               	movlw	high _rawAltitude
 24203  00262E  6E04               	movwf	stringcpy@str2+1,c
 24204  002630  0E00               	movlw	0
 24205  002632  6E06               	movwf	stringcpy@dir+1,c
 24206  002634  0E00               	movlw	0
 24207  002636  6E05               	movwf	stringcpy@dir,c
 24208  002638  EC26  F029         	call	_stringcpy	;wreg free
 24209  00263C                     i2l345:
 24210                           
 24211                           ;GPS.c: 552: }
 24212                           ;GPS.c: 555: if((Term == 6) && (SentenceType == 2)) {
 24213  00263C  0E06               	movlw	6
 24214  00263E  183C               	xorwf	_Term,w,c
 24215  002640  A4D8               	btfss	status,2,c
 24216  002642  D015               	goto	i2l346
 24217  002644  0E02               	movlw	2
 24218  002646  183D               	xorwf	_SentenceType,w,c
 24219  002648  A4D8               	btfss	status,2,c
 24220  00264A  D011               	goto	i2l346
 24221                           
 24222                           ;GPS.c: 556: stringcpy(buffer, rawFix,0);
 24223  00264C  0EAC               	movlw	low _buffer
 24224  00264E  6E01               	movwf	stringcpy@str1,c
 24225  002650  0E01               	movlw	high _buffer
 24226  002652  6E02               	movwf	stringcpy@str1+1,c
 24227  002654  503B               	movf	_rawFix,w,c
 24228  002656  6E0A               	movwf	??_GPSRead& (0+255),c
 24229  002658  6A0B               	clrf	(??_GPSRead+1)& (0+255),c
 24230  00265A  C00A  F003         	movff	??_GPSRead,stringcpy@str2
 24231  00265E  C00B  F004         	movff	??_GPSRead+1,stringcpy@str2+1
 24232  002662  0E00               	movlw	0
 24233  002664  6E06               	movwf	stringcpy@dir+1,c
 24234  002666  0E00               	movlw	0
 24235  002668  6E05               	movwf	stringcpy@dir,c
 24236  00266A  EC26  F029         	call	_stringcpy	;wreg free
 24237  00266E                     i2l346:
 24238                           
 24239                           ;GPS.c: 558: }
 24240                           ;GPS.c: 559: Term++;
 24241  00266E  2A3C               	incf	_Term,f,c
 24242                           
 24243                           ;GPS.c: 560: char_number = 0;
 24244  002670  0E00               	movlw	0
 24245  002672  6E3E               	movwf	_char_number,c
 24246                           
 24247                           ;GPS.c: 561: break;
 24248  002674  0012               	return	
 24249  002676                     
 24250                           ;GPS.c: 564: buffer[char_number++] = c;
 24251  002676  503E               	movf	_char_number,w,c
 24252  002678  0D01               	mullw	1
 24253  00267A  0EAC               	movlw	low _buffer
 24254  00267C  24F3               	addwf	prodl,w,c
 24255  00267E  6ED9               	movwf	fsr2l,c
 24256  002680  0E01               	movlw	high _buffer
 24257  002682  20F4               	addwfc	prodh,w,c
 24258  002684  6EDA               	movwf	fsr2h,c
 24259  002686  C00D  FFDF         	movff	GPSRead@c,indf2
 24260  00268A  2A3E               	incf	_char_number,f,c
 24261                           
 24262                           ;GPS.c: 566: }
 24263                           
 24264                           ;GPS.c: 565: break;
 24265  00268C  0012               	return	
 24266  00268E                     i2l318:
 24267  00268E  500D               	movf	GPSRead@c,w,c
 24268                           
 24269                           ; Switch size 1, requested type "space"
 24270                           ; Number of cases is 3, Range of values is 13 to 44
 24271                           ; switch strategies available:
 24272                           ; Name         Instructions Cycles
 24273                           ; simple_byte           10     6 (average)
 24274                           ;	Chosen strategy is simple_byte
 24275  002690  0A0D               	xorlw	13	; case 13
 24276  002692  B4D8               	btfsc	status,2,c
 24277  002694  D6A6               	goto	i2l319
 24278  002696  0A29               	xorlw	41	; case 36
 24279  002698  B4D8               	btfsc	status,2,c
 24280  00269A  D6C3               	goto	i2l325
 24281  00269C  0A08               	xorlw	8	; case 44
 24282  00269E  B4D8               	btfsc	status,2,c
 24283  0026A0  D6C5               	goto	i2l326
 24284  0026A2  D7E9               	goto	i2l347
 24285  0026A4                     __end_of_GPSRead:
 24286                           	opt stack 0
 24287                           tosu	equ	0xFFF
 24288                           tosh	equ	0xFFE
 24289                           tosl	equ	0xFFD
 24290                           pclatu	equ	0xFFB
 24291                           pclath	equ	0xFFA
 24292                           pcl	equ	0xFF9
 24293                           tblptru	equ	0xFF8
 24294                           tblptrh	equ	0xFF7
 24295                           tblptrl	equ	0xFF6
 24296                           tablat	equ	0xFF5
 24297                           prodh	equ	0xFF4
 24298                           prodl	equ	0xFF3
 24299                           intcon	equ	0xFF2
 24300                           intcon2	equ	0xFF1
 24301                           intcon3	equ	0xFF0
 24302                           indf0	equ	0xFEF
 24303                           postinc0	equ	0xFEE
 24304                           fsr0h	equ	0xFEA
 24305                           fsr0l	equ	0xFE9
 24306                           wreg	equ	0xFE8
 24307                           indf1	equ	0xFE7
 24308                           postinc1	equ	0xFE6
 24309                           postdec1	equ	0xFE5
 24310                           plusw1	equ	0xFE3
 24311                           fsr1h	equ	0xFE2
 24312                           fsr1l	equ	0xFE1
 24313                           indf2	equ	0xFDF
 24314                           postinc2	equ	0xFDE
 24315                           postdec2	equ	0xFDD
 24316                           plusw2	equ	0xFDB
 24317                           fsr2h	equ	0xFDA
 24318                           fsr2l	equ	0xFD9
 24319                           status	equ	0xFD8
 24320                           
 24321 ;; *************** function _stringcpy *****************
 24322 ;; Defined at:
 24323 ;;		line 459 in file "bibliotecas/GPS.c"
 24324 ;; Parameters:    Size  Location     Type
 24325 ;;  str1            2    0[COMRAM] PTR unsigned char 
 24326 ;;		 -> buffer(12), 
 24327 ;;  str2            2    2[COMRAM] PTR unsigned char 
 24328 ;;		 -> RAM(2047), rawAltitude(7), rawSatellites(3), rawDate(7), 
 24329 ;;		 -> rawCourse(6), rawSpeed(6), rawLongitude(13), rawLatitude(13), 
 24330 ;;		 -> rawTime(11), sentence(6), 
 24331 ;;  dir             2    4[COMRAM] int 
 24332 ;; Auto vars:     Size  Location     Type
 24333 ;;  chr             1    8[COMRAM] unsigned char 
 24334 ;; Return value:  Size  Location     Type
 24335 ;;                  1    wreg      void 
 24336 ;; Registers used:
 24337 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24338 ;; Tracked objects:
 24339 ;;		On entry : 0/0
 24340 ;;		On exit  : 0/0
 24341 ;;		Unchanged: 0/0
 24342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24343 ;;      Params:         6       0       0       0       0       0       0       0       0
 24344 ;;      Locals:         1       0       0       0       0       0       0       0       0
 24345 ;;      Temps:          2       0       0       0       0       0       0       0       0
 24346 ;;      Totals:         9       0       0       0       0       0       0       0       0
 24347 ;;Total ram usage:        9 bytes
 24348 ;; Hardware stack levels used:    1
 24349 ;; This function calls:
 24350 ;;		Nothing
 24351 ;; This function is called by:
 24352 ;;		_GPSRead
 24353 ;; This function uses a non-reentrant model
 24354 ;;
 24355                           
 24356                           	psect	text93
 24357  00524C                     __ptext93:
 24358                           	opt stack 0
 24359  00524C                     _stringcpy:
 24360                           	opt stack 13
 24361                           
 24362                           ;GPS.c: 461: uint8_t chr = 0;
 24363                           
 24364                           ;incstack = 0
 24365  00524C  0E00               	movlw	0
 24366  00524E  6E09               	movwf	stringcpy@chr,c
 24367  005250                     
 24368                           ;GPS.c: 464: str2[chr + dir] = str1[chr];
 24369  005250  5009               	movf	stringcpy@chr,w,c
 24370  005252  0D01               	mullw	1
 24371  005254  50F3               	movf	prodl,w,c
 24372  005256  2401               	addwf	stringcpy@str1,w,c
 24373  005258  6ED9               	movwf	fsr2l,c
 24374  00525A  50F4               	movf	prodh,w,c
 24375  00525C  2002               	addwfc	stringcpy@str1+1,w,c
 24376  00525E  6EDA               	movwf	fsr2h,c
 24377  005260  5009               	movf	stringcpy@chr,w,c
 24378  005262  2405               	addwf	stringcpy@dir,w,c
 24379  005264  6E07               	movwf	??_stringcpy& (0+255),c
 24380  005266  0E00               	movlw	0
 24381  005268  2006               	addwfc	stringcpy@dir+1,w,c
 24382  00526A  6E08               	movwf	(??_stringcpy+1)& (0+255),c
 24383  00526C  5007               	movf	??_stringcpy,w,c
 24384  00526E  2403               	addwf	stringcpy@str2,w,c
 24385  005270  6EE1               	movwf	fsr1l,c
 24386  005272  5008               	movf	??_stringcpy+1,w,c
 24387  005274  2004               	addwfc	stringcpy@str2+1,w,c
 24388  005276  6EE2               	movwf	fsr1h,c
 24389  005278  CFDF FFE7          	movff	indf2,indf1
 24390                           
 24391                           ;GPS.c: 465: } while(str1[chr++] != '\0');
 24392  00527C  2A09               	incf	stringcpy@chr,f,c
 24393  00527E  0409               	decf	stringcpy@chr,w,c
 24394  005280  6E07               	movwf	??_stringcpy& (0+255),c
 24395  005282  5007               	movf	??_stringcpy,w,c
 24396  005284  0D01               	mullw	1
 24397  005286  50F3               	movf	prodl,w,c
 24398  005288  2401               	addwf	stringcpy@str1,w,c
 24399  00528A  6ED9               	movwf	fsr2l,c
 24400  00528C  50F4               	movf	prodh,w,c
 24401  00528E  2002               	addwfc	stringcpy@str1+1,w,c
 24402  005290  6EDA               	movwf	fsr2h,c
 24403  005292  50DF               	movf	indf2,w,c
 24404  005294  B4D8               	btfsc	status,2,c
 24405  005296  0012               	return	
 24406  005298  D7DB               	goto	i2l313
 24407  00529A                     __end_of_stringcpy:
 24408                           	opt stack 0
 24409                           tosu	equ	0xFFF
 24410                           tosh	equ	0xFFE
 24411                           tosl	equ	0xFFD
 24412                           pclatu	equ	0xFFB
 24413                           pclath	equ	0xFFA
 24414                           pcl	equ	0xFF9
 24415                           tblptru	equ	0xFF8
 24416                           tblptrh	equ	0xFF7
 24417                           tblptrl	equ	0xFF6
 24418                           tablat	equ	0xFF5
 24419                           prodh	equ	0xFF4
 24420                           prodl	equ	0xFF3
 24421                           intcon	equ	0xFF2
 24422                           intcon2	equ	0xFF1
 24423                           intcon3	equ	0xFF0
 24424                           indf0	equ	0xFEF
 24425                           postinc0	equ	0xFEE
 24426                           fsr0h	equ	0xFEA
 24427                           fsr0l	equ	0xFE9
 24428                           wreg	equ	0xFE8
 24429                           indf1	equ	0xFE7
 24430                           postinc1	equ	0xFE6
 24431                           postdec1	equ	0xFE5
 24432                           plusw1	equ	0xFE3
 24433                           fsr1h	equ	0xFE2
 24434                           fsr1l	equ	0xFE1
 24435                           indf2	equ	0xFDF
 24436                           postinc2	equ	0xFDE
 24437                           postdec2	equ	0xFDD
 24438                           plusw2	equ	0xFDB
 24439                           fsr2h	equ	0xFDA
 24440                           fsr2l	equ	0xFD9
 24441                           status	equ	0xFD8
 24442                           
 24443 ;; *************** function _strcmp *****************
 24444 ;; Defined at:
 24445 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
 24446 ;; Parameters:    Size  Location     Type
 24447 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 24448 ;;		 -> sentence(6), 
 24449 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 24450 ;;		 -> STR_12(6), STR_11(6), 
 24451 ;; Auto vars:     Size  Location     Type
 24452 ;;  r               1    5[COMRAM] char 
 24453 ;; Return value:  Size  Location     Type
 24454 ;;                  2    0[COMRAM] int 
 24455 ;; Registers used:
 24456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 24457 ;; Tracked objects:
 24458 ;;		On entry : 0/0
 24459 ;;		On exit  : 0/0
 24460 ;;		Unchanged: 0/0
 24461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24462 ;;      Params:         4       0       0       0       0       0       0       0       0
 24463 ;;      Locals:         1       0       0       0       0       0       0       0       0
 24464 ;;      Temps:          1       0       0       0       0       0       0       0       0
 24465 ;;      Totals:         6       0       0       0       0       0       0       0       0
 24466 ;;Total ram usage:        6 bytes
 24467 ;; Hardware stack levels used:    1
 24468 ;; This function calls:
 24469 ;;		Nothing
 24470 ;; This function is called by:
 24471 ;;		_GPSRead
 24472 ;; This function uses a non-reentrant model
 24473 ;;
 24474                           
 24475                           	psect	text94
 24476  0053C2                     __ptext94:
 24477                           	opt stack 0
 24478  0053C2                     _strcmp:
 24479                           	opt stack 13
 24480                           
 24481                           ;incstack = 0
 24482  0053C2  D004               	goto	i2l2120
 24483  0053C4  4A01               	infsnz	strcmp@s1,f,c
 24484  0053C6  2A02               	incf	strcmp@s1+1,f,c
 24485  0053C8  4A03               	infsnz	strcmp@s2,f,c
 24486  0053CA  2A04               	incf	strcmp@s2+1,f,c
 24487  0053CC                     i2l2120:
 24488  0053CC  C001  FFD9         	movff	strcmp@s1,fsr2l
 24489  0053D0  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 24490  0053D4  50DF               	movf	indf2,w,c
 24491  0053D6  6E05               	movwf	??_strcmp& (0+255),c
 24492  0053D8  C003  FFF6         	movff	strcmp@s2,tblptrl
 24493  0053DC  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 24494  0053E0                     	if	0	;tblptru may be non-zero
 24495  0053E0                     	endif
 24496  0053E0                     	if	0	;tblptru may be non-zero
 24497  0053E0                     	endif
 24498  0053E0  0008               	tblrd		*
 24499  0053E2  50F5               	movf	tablat,w,c
 24500  0053E4  0800               	sublw	0
 24501  0053E6  2405               	addwf	??_strcmp,w,c
 24502  0053E8  6E06               	movwf	strcmp@r,c
 24503  0053EA  5006               	movf	strcmp@r,w,c
 24504  0053EC  A4D8               	btfss	status,2,c
 24505  0053EE  D007               	goto	i2u1111_40
 24506  0053F0  C001  FFD9         	movff	strcmp@s1,fsr2l
 24507  0053F4  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 24508  0053F8  50DF               	movf	indf2,w,c
 24509  0053FA  A4D8               	btfss	status,2,c
 24510  0053FC  D7E3               	goto	i2l2121
 24511  0053FE                     i2u1111_40:
 24512  0053FE  5006               	movf	strcmp@r,w,c
 24513  005400  6E01               	movwf	?_strcmp,c
 24514  005402  6A02               	clrf	?_strcmp+1,c
 24515  005404  BE01               	btfsc	?_strcmp,7,c
 24516  005406  0602               	decf	?_strcmp+1,f,c
 24517  005408  0012               	return	
 24518  00540A                     __end_of_strcmp:
 24519                           	opt stack 0
 24520                           tosu	equ	0xFFF
 24521                           tosh	equ	0xFFE
 24522                           tosl	equ	0xFFD
 24523                           pclatu	equ	0xFFB
 24524                           pclath	equ	0xFFA
 24525                           pcl	equ	0xFF9
 24526                           tblptru	equ	0xFF8
 24527                           tblptrh	equ	0xFF7
 24528                           tblptrl	equ	0xFF6
 24529                           tablat	equ	0xFF5
 24530                           prodh	equ	0xFF4
 24531                           prodl	equ	0xFF3
 24532                           intcon	equ	0xFF2
 24533                           intcon2	equ	0xFF1
 24534                           intcon3	equ	0xFF0
 24535                           indf0	equ	0xFEF
 24536                           postinc0	equ	0xFEE
 24537                           fsr0h	equ	0xFEA
 24538                           fsr0l	equ	0xFE9
 24539                           wreg	equ	0xFE8
 24540                           indf1	equ	0xFE7
 24541                           postinc1	equ	0xFE6
 24542                           postdec1	equ	0xFE5
 24543                           plusw1	equ	0xFE3
 24544                           fsr1h	equ	0xFE2
 24545                           fsr1l	equ	0xFE1
 24546                           indf2	equ	0xFDF
 24547                           postinc2	equ	0xFDE
 24548                           postdec2	equ	0xFDD
 24549                           plusw2	equ	0xFDB
 24550                           fsr2h	equ	0xFDA
 24551                           fsr2l	equ	0xFD9
 24552                           status	equ	0xFD8
 24553                           tosu	equ	0xFFF
 24554                           tosh	equ	0xFFE
 24555                           tosl	equ	0xFFD
 24556                           pclatu	equ	0xFFB
 24557                           pclath	equ	0xFFA
 24558                           pcl	equ	0xFF9
 24559                           tblptru	equ	0xFF8
 24560                           tblptrh	equ	0xFF7
 24561                           tblptrl	equ	0xFF6
 24562                           tablat	equ	0xFF5
 24563                           prodh	equ	0xFF4
 24564                           prodl	equ	0xFF3
 24565                           intcon	equ	0xFF2
 24566                           intcon2	equ	0xFF1
 24567                           intcon3	equ	0xFF0
 24568                           indf0	equ	0xFEF
 24569                           postinc0	equ	0xFEE
 24570                           fsr0h	equ	0xFEA
 24571                           fsr0l	equ	0xFE9
 24572                           wreg	equ	0xFE8
 24573                           indf1	equ	0xFE7
 24574                           postinc1	equ	0xFE6
 24575                           postdec1	equ	0xFE5
 24576                           plusw1	equ	0xFE3
 24577                           fsr1h	equ	0xFE2
 24578                           fsr1l	equ	0xFE1
 24579                           indf2	equ	0xFDF
 24580                           postinc2	equ	0xFDE
 24581                           postdec2	equ	0xFDD
 24582                           plusw2	equ	0xFDB
 24583                           fsr2h	equ	0xFDA
 24584                           fsr2l	equ	0xFD9
 24585                           status	equ	0xFD8
 24586                           
 24587                           	psect	text95
 24588  000000                     __ptext95:
 24589                           	opt stack 0
 24590                           tosu	equ	0xFFF
 24591                           tosh	equ	0xFFE
 24592                           tosl	equ	0xFFD
 24593                           pclatu	equ	0xFFB
 24594                           pclath	equ	0xFFA
 24595                           pcl	equ	0xFF9
 24596                           tblptru	equ	0xFF8
 24597                           tblptrh	equ	0xFF7
 24598                           tblptrl	equ	0xFF6
 24599                           tablat	equ	0xFF5
 24600                           prodh	equ	0xFF4
 24601                           prodl	equ	0xFF3
 24602                           intcon	equ	0xFF2
 24603                           intcon2	equ	0xFF1
 24604                           intcon3	equ	0xFF0
 24605                           indf0	equ	0xFEF
 24606                           postinc0	equ	0xFEE
 24607                           fsr0h	equ	0xFEA
 24608                           fsr0l	equ	0xFE9
 24609                           wreg	equ	0xFE8
 24610                           indf1	equ	0xFE7
 24611                           postinc1	equ	0xFE6
 24612                           postdec1	equ	0xFE5
 24613                           plusw1	equ	0xFE3
 24614                           fsr1h	equ	0xFE2
 24615                           fsr1l	equ	0xFE1
 24616                           indf2	equ	0xFDF
 24617                           postinc2	equ	0xFDE
 24618                           postdec2	equ	0xFDD
 24619                           plusw2	equ	0xFDB
 24620                           fsr2h	equ	0xFDA
 24621                           fsr2l	equ	0xFD9
 24622                           status	equ	0xFD8
 24623                           
 24624                           	psect	rparam
 24625  0000                     tosu	equ	0xFFF
 24626                           tosh	equ	0xFFE
 24627                           tosl	equ	0xFFD
 24628                           pclatu	equ	0xFFB
 24629                           pclath	equ	0xFFA
 24630                           pcl	equ	0xFF9
 24631                           tblptru	equ	0xFF8
 24632                           tblptrh	equ	0xFF7
 24633                           tblptrl	equ	0xFF6
 24634                           tablat	equ	0xFF5
 24635                           prodh	equ	0xFF4
 24636                           prodl	equ	0xFF3
 24637                           intcon	equ	0xFF2
 24638                           intcon2	equ	0xFF1
 24639                           intcon3	equ	0xFF0
 24640                           indf0	equ	0xFEF
 24641                           postinc0	equ	0xFEE
 24642                           fsr0h	equ	0xFEA
 24643                           fsr0l	equ	0xFE9
 24644                           wreg	equ	0xFE8
 24645                           indf1	equ	0xFE7
 24646                           postinc1	equ	0xFE6
 24647                           postdec1	equ	0xFE5
 24648                           plusw1	equ	0xFE3
 24649                           fsr1h	equ	0xFE2
 24650                           fsr1l	equ	0xFE1
 24651                           indf2	equ	0xFDF
 24652                           postinc2	equ	0xFDE
 24653                           postdec2	equ	0xFDD
 24654                           plusw2	equ	0xFDB
 24655                           fsr2h	equ	0xFDA
 24656                           fsr2l	equ	0xFD9
 24657                           status	equ	0xFD8
 24658                           
 24659                           	psect	temp
 24660  000044                     btemp:
 24661                           	opt stack 0
 24662  000044                     	ds	1
 24663  0000                     int$flags	set	btemp
 24664  0000                     wtemp6	set	btemp+1
 24665                           tosu	equ	0xFFF
 24666                           tosh	equ	0xFFE
 24667                           tosl	equ	0xFFD
 24668                           pclatu	equ	0xFFB
 24669                           pclath	equ	0xFFA
 24670                           pcl	equ	0xFF9
 24671                           tblptru	equ	0xFF8
 24672                           tblptrh	equ	0xFF7
 24673                           tblptrl	equ	0xFF6
 24674                           tablat	equ	0xFF5
 24675                           prodh	equ	0xFF4
 24676                           prodl	equ	0xFF3
 24677                           intcon	equ	0xFF2
 24678                           intcon2	equ	0xFF1
 24679                           intcon3	equ	0xFF0
 24680                           indf0	equ	0xFEF
 24681                           postinc0	equ	0xFEE
 24682                           fsr0h	equ	0xFEA
 24683                           fsr0l	equ	0xFE9
 24684                           wreg	equ	0xFE8
 24685                           indf1	equ	0xFE7
 24686                           postinc1	equ	0xFE6
 24687                           postdec1	equ	0xFE5
 24688                           plusw1	equ	0xFE3
 24689                           fsr1h	equ	0xFE2
 24690                           fsr1l	equ	0xFE1
 24691                           indf2	equ	0xFDF
 24692                           postinc2	equ	0xFDE
 24693                           postdec2	equ	0xFDD
 24694                           plusw2	equ	0xFDB
 24695                           fsr2h	equ	0xFDA
 24696                           fsr2l	equ	0xFD9
 24697                           status	equ	0xFD8


Data Sizes:
    Strings     368
    Constant    34
    Data        145
    BSS         916
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     34      67
    BANK0           160    148     160
    BANK1           256     37     256
    BANK2           256      0     253
    BANK3           256    125     125
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3442	PTR FTN()void  size(2) Largest target is 1
		 -> troca_de_tela(), verifica_fence_externo(), disparo_gravacao(), verifica_dados_operacionais(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK2[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK2[11]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_12(CODE[6]), STR_11(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK1[6]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), STR_31(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 128
		 -> poligono_ext.point_long_min(BANK1[6]), poligono_ext.fence_long_min(BANK1[6]), poligono_ext.point_lat_min(BANK1[6]), poligono_ext.fence_lat_min(BANK1[6]), 
		 -> poligono_ext.fence_lat_deg(BANK1[6]), poligono_ext.point_lat_deg(BANK1[6]), poligono_ext.fence_long_deg(BANK1[6]), poligono_ext.point_long_deg(BANK1[6]), 
		 -> poligono_ext(BANK1[128]), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 35
		 -> STR_19(CODE[35]), 

    fprintf@arp	PTR void [1] size(2) Largest target is 2
		 -> ?_fprintf(BANK1[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 52
		 -> fprintf@s(BANK3[16]), STR_24(CODE[16]), STR_23(CODE[27]), STR_22(CODE[17]), 
		 -> STR_21(CODE[16]), STR_20(CODE[16]), string_dado(BANK2[52]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_25(CODE[13]), filename(BANK2[15]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_25(CODE[13]), filename(BANK2[15]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_open@dir(BANK1[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    trace_path@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK1[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_25(CODE[13]), filename(BANK2[15]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    S1856_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 21
		 -> NULL(NULL[0]), escreve_inteiro_lcd@texto(BANK0[7]), STR_29(CODE[11]), STR_28(CODE[10]), 
		 -> STR_27(CODE[16]), STR_26(CODE[11]), STR_18(CODE[9]), STR_17(CODE[10]), 
		 -> STR_16(CODE[10]), STR_15(CODE[14]), STR_14(CODE[21]), STR_13(CODE[15]), 
		 -> rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), STR_10(CODE[8]), STR_9(CODE[17]), 
		 -> STR_8(CODE[8]), STR_7(CODE[16]), STR_6(CODE[9]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[14]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK2[11]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK2[20]), 

    S584_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S584_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK1[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), rawAltitude(BANK1[7]), rawSatellites(BANK1[3]), rawDate(BANK1[7]), 
		 -> rawCourse(BANK1[6]), rawSpeed(BANK1[6]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), 
		 -> rawTime(BANK2[11]), sentence(BANK1[6]), 

    sp__Longitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK2[13]), 

    point_buff_gps_long	PTR unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), rawLongitude(BANK2[13]), 

    sp__Latitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK2[13]), 

    point_buff_gps_lat	PTR unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), rawLatitude(BANK2[13]), 

    p_tarefas	PTR FTN()void [4] size(2) Largest target is 1
		 -> troca_de_tela(), verifica_fence_externo(), disparo_gravacao(), verifica_dados_operacionais(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _main->_escalonador
    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _verifica_fence_externo->_escreve_inteiro_lcd
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _atoi->___wmul
    _troca_de_tela->_posicao_cursor_lcd
    _escreve_cmd_lcd->_delay
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _fprintf->_fputs
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_trace_path
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _clust2sect->___lmul
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_wait_ready
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_escalonador
    _escrita_sdcard->_f_open

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _escalonador->_verifica_fence_externo
    _escrita_sdcard->_fprintf

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  453773
                    _dados_gps_to_sd
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    6643
                                              6 BANK0     36    36      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                              3 BANK0      1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     176
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     176
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  444046
                                            147 BANK0      1     1      0
                                             35 BANK1      2     2      0
                   _disparo_gravacao *
                      _troca_de_tela *
        _verifica_dados_operacionais *
             _verifica_fence_externo *
 ---------------------------------------------------------------------------------
 (2) _verifica_fence_externo                             135   135      0   19469
                                             33 BANK0      6     6      0
                                              0 BANK3    125   125      0
                           _Latitude
                          _Longitude
                               _atoi
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                  9     7      2    7295
                                             24 BANK0      9     7      2
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 8     2      6    3936
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     3      6    3163
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4    1132
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4    1321
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    2545
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _verifica_dados_operacionais                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _troca_de_tela                                        0     0      0    6563
                           _Latitude
                          _Longitude
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _Longitude                                            2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Latitude                                             2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _disparo_gravacao                                     0     0      0  417791
                     _escrita_sdcard
 ---------------------------------------------------------------------------------
 (3) _escrita_sdcard                                       2     2      0  417791
                        _desliga_SPI
                       _desliga_uart
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                     _inicializa_SPI
                    _inicializa_uart
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             14 BANK0     14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _fprintf                                             57    37     20  128922
                                              0 BANK1     22     2     20
                                              0 BANK3     35    35      0
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (5) _fputs                                                7     3      4   62151
                                            140 BANK0      7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                7     3      4   61658
                                            133 BANK0      7     3      4
                            _f_write
 ---------------------------------------------------------------------------------
 (7) _f_write                                             33    25      8   60846
                                            100 BANK0     33    25      8
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     412
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (4) _f_open                                              44    39      5  201766
                                            119 BANK0      9     4      5
                                              0 BANK1     35    35      0
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (5) _trace_path                                          23    15      8   39428
                                             96 BANK0     23    15      8
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _make_dirfile                                        13     9      4    2753
                                              8 BANK0     13     9      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _reserve_direntry                                    18    14      4   77161
                                            100 BANK0     18    14      4
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _next_dir_entry                                      13    11      2   18753
                                             83 BANK0     13    11      2
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (8) _clust2sect                                          11     7      4    1487
                                             12 BANK0     11     7      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _remove_chain                                         8     6      2   33533
                                             86 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (8) _memcpy                                              11     5      6    1018
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (5) _auto_mount                                          40    37      3   32123
                                             51 BANK0     40    37      3
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (7) _memset                                               8     2      6    1217
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (6) _disk_initialize                                      4     4      0   20396
                                             32 BANK0      2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (7) _sdc_disk_initialize                                 13    13      0   20266
                                             19 BANK0     13    13      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (8) _sdc_reset                                           20    20      0    9699
                                             12 BANK0      7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    3207
                                              3 BANK0      3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2879
                                              3 BANK0      2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _check_fs                                             8     4      4    6655
                                             43 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (6) _memcmp                                               9     3      6     701
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     516
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) _f_mount                                              3     1      2     394
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _f_lseek                                             29    23      6   55200
                                            100 BANK0     29    23      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (8) _create_chain                                        14    12      2   34596
                                             86 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (9) _put_cluster                                         22    18      4   16723
                                             64 BANK0     22    18      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (9) _get_cluster                                         19    17      2   16432
                                             64 BANK0     19    17      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1392
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     901
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _f_close                                              3     1      2   30391
                                             75 BANK0      3     1      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (5) _f_sync                                               9     7      2   30018
                                             66 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (8) _validate                                             6     2      4    1250
                                              7 BANK0      6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (9) _disk_status                                          5     5      0     226
                                              2 BANK0      5     5      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_status                                     4     4      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _sync                                                 2     2      0   14169
                                             64 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (8) _move_window                                         21    17      4   13831
                                             43 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (9) _disk_write                                          12     5      7    6078
                                             31 BANK0     12     5      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_write                                     19    12      7    4614
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (9) _disk_read                                           12     5      7    5647
                                             31 BANK0     12     5      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_read                                      24    17      7    4450
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (11) _response                                            1     1      0      34
                                              0 BANK0      1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (11) _proceed                                             0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (11) _command                                             7     2      5    3403
                                              5 BANK0      7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (12) _wait_ready                                         15    15      0      99
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _escreve_SPI                                         2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _dummy_clocks                                        5     5      0      68
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _disk_ioctl                                           7     4      3     304
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (5) _get_fattime                                         51    47      4     201
                                              0 BANK0     51    47      4
 ---------------------------------------------------------------------------------
 (4) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dados_gps_to_sd                                      0     0      0    1177
                           _monta_sd
 ---------------------------------------------------------------------------------
 (2) _monta_sd                                             5     3      2    1177
                                              6 BANK0      5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     220
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                21    21      0    3035
                                             13 COMRAM    21    21      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (17) i2_write_timer_zero                                  2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _GPSRead                                             4     4      0    2897
                                              9 COMRAM     4     4      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (18) _stringcpy                                           9     3      6    2435
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (18) _strcmp                                              6     2      4     395
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dados_gps_to_sd
     _monta_sd
       _strlen
   _escalonador
     _disparo_gravacao *
       _escrita_sdcard
         _desliga_SPI
         _desliga_uart
         _f_close
           _f_sync
             _get_fattime
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _sync
               _disk_ioctl
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _f_lseek
           ___lldiv
           _create_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _validate
             _disk_status
               _sdc_disk_status
         _f_mount
         _f_open
           _auto_mount
             ___lldiv
             ___lmul
             _check_fs
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcmp
             _disk_initialize
               _sdc_disk_initialize
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
                 _sdc_reset
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _disk_status
               _sdc_disk_status
             _memset
           _get_fattime
           _memcpy
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _remove_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _reserve_direntry
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
           _trace_path
             _clust2sect
               ___lmul
             _make_dirfile
               _memset
             _memcmp
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
         _fprintf
           ___lldiv
           ___llmod
           ___wmul
           _fputc
             _f_write
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcpy
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
           _fputs
             _fputc
               _f_write
                 _clust2sect
                   ___lmul
                 _create_chain
                   _get_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                   _put_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcpy
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                 _validate
                   _disk_status
                     _sdc_disk_status
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
     _troca_de_tela *
       _Latitude
       _Longitude
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
     _verifica_dados_operacionais *
     _verifica_fence_externo *
       _Latitude
       _Longitude
       _atoi
         ___wmul
         _isdigit
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     7D      7D      11       48.8%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FD       9       98.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     25     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     94      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     22      43       1       71.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     35D      20        0.0%
DATA                 0      0     57D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 20 14:57:04 2022

                    next_dir_entry@idx 00BE               __end_of_mensagem_inicial 4CF6  
                  next_dir_entry@clust 00BC                            _SSPSTATbits 000FC7  
                     ??_init_interrupt 0060           __size_of_escreve_inteiro_lcd 0040  
                                   _fs 037D                    ___wmul@multiplicand 0062  
                          _put_cluster 2BEA                       disk_write@sector 0081  
                         ?_escalonador 0001                         create_chain@fs 00BC  
                     disk_write@result 0088                       ?_inicializa_uart 0001  
                                  l113 46A0                                    l121 5654  
                                  l122 5664                                    l115 4732  
                                  l204 0816                                    l213 092A  
                                  l205 0844                                    l214 088E  
                                  l223 0936                                    l207 087C  
                                  l143 0096                 __size_of_troca_de_tela 0260  
                                  l224 08BE                                    l160 01F0  
                                  l152 0106                                    l233 09A6  
                                  l225 08EC                                    l145 0424  
                                  l161 01FC                                    l153 0112  
                                  l146 00DE                                    l227 0924  
                                  l171 0566                                    l163 0422  
                                  l155 01D4                                    l147 00EA  
                                  l251 2ECC                                    l500 5880  
                                  l413 54C2                                    l181 069A  
                                  l414 54B4                                    l422 55E4  
                                  l430 504A                                    l174 0464  
                                  l270 3070                                    l431 5044  
                                  l167 07D6                                    l271 306C  
                                  l263 2F36                                    l600 229E  
                                  l184 0598                                    l176 04B4  
                                  l168 043C                                    l264 2FC4  
                                  l256 2E84                                    l601 2144  
                                  l193 0882                                    l169 0448  
                                  l273 30BE                                    l265 3016  
                                  l257 2EC8                                    l506 5804  
                                  l602 214E                                    l194 07E6  
                                  l186 05E8                                    l178 056A  
                                  l258 2FC8                                    l603 2178  
                                  l179 057C                                    l460 416A  
                                  l620 22F8                                    l444 4480  
                                  l700 4932                                    l188 069E  
                                  l268 2FE6                                    l461 4176  
                                  l701 493A                                    l189 07D4  
                                  l269 3012                                    l454 41FC  
                                  l630 23C8                                    l710 4972  
                                  l702 493C                                    l463 419A  
                                  l455 413A                                    l543 53A8  
                                  l551 55B8                                    l711 497A  
                                  l703 4944                                    l464 41A6  
                                  l456 4146                                    l560 4A46  
                                  l544 5380                                    l616 228E  
                                  l608 2202                                    l552 559C  
                                  l712 497C                                    l704 4946  
                                  l641 3D3E                                    l721 4F0A  
                                  l625 235C                                    l713 4984  
                                  l705 494E                                    l466 41CA  
                                  l642 3D36                                    l562 4A78  
                                  l570 4C20                                    l546 5390  
                                  l730 4F42                                    l722 4F0C  
                                  l626 2386                                    l554 55A8  
                                  l714 4986                                    l706 4950  
                                  l467 41F2                                    l635 3CFC  
                                  l563 4AB2                                    l571 4C52  
                                  l547 53A4                                    l731 4F4A  
                                  l723 4F14                                    l619 22CE  
                                  l555 55B4                                    l707 4966  
                                  l468 41D0                                    l644 3D6A  
                                  l636 3CE8                                    l660 3420  
                                  l652 33D6                                    l732 4F4C  
                                  l724 4F16                                    l740 4E10  
                                  l708 4968                                    l645 3D52  
                                  l653 3322                                    l733 4F54  
                                  l725 4F1E                                    l741 4E70  
                                  l709 4970                                    l662 3454  
                                  l750 4E90                                    l734 4F56  
                                  l726 4F20                                    l742 4E1C  
                                  l575 56A8                                    l647 3DA4  
                                  l639 3D22                                    l559 4AB6  
                                  l655 3376                                    l567 4C56  
                                  l751 4E92                                    l727 4F36  
                                  l743 4E2C                                    l583 4750  
                                  l576 569C                                    l664 349C  
                                  l568 4BEE                                    l760 4ED0  
                                  l752 4E9A                                    l728 4F38  
                                  l744 4E3C                                    l584 476E  
                                  l657 33A6                                    l761 4ED2  
                                  l753 4E9C                                    l729 4F40  
                                  l745 4E4C                                    l593 20EE  
                                  l578 56A0                                    l762 4EDA  
                                  l754 4EA4                                    l738 4E76  
                                  l594 2104                                    l579 56A4  
                                  l691 56E0                                    l763 4EDC  
                                  l755 4EA6                                    l739 4E54  
                                  l764 4EE4                                    l756 4EAE  
                                  l588 47D0                                    l596 2110  
                                  l669 57C6                                    l765 4EE6  
                                  l757 4EB0                                    l758 4EC6  
                                  l759 4EC8                                    l783 5224  
                                  l784 51FA                                    l689 56D0  
                                  l699 4930                                    l956 3ED6  
                                  _PCL 000FF9                                    _PR2 000FCB  
                                  _fil 0190                       ??_init_oscilador 0060  
                                  _isr 0008                           disk_read@res 008A  
                                  prod 000FF3                         ??_create_chain 00B8  
                                  tosl 000FFD                                    wreg 000FE8  
 verifica_fence_externo@point_dif_long 0378              __size_of_write_timer_zero 000A  
                      create_chain@mcl 00BA                        create_chain@ncl 00C2  
                      create_chain@scl 00C0                ??_escreve_frase_ram_lcd 0065  
                                 l1100 355E                                   l1102 358C  
                                 l1104 35D4                                   l1112 44E0  
                                 l1033 36F2                                   l1105 35BC  
                                 l1121 3996                                   l1042 50D4  
                                 l1122 3958                                   l1210 28D4  
                                 l1202 2878                                   l1051 32DA  
                                 l1107 35F8                                   l1203 28A6  
                                 l1036 3778                                   l1044 50F2  
                                 l1108 3628                                   l1300 1FA0  
                                 l1109 3666                                   l1117 38AE  
                                 l1038 3822                                   l1054 3232  
                                 l1062 2E34                                   l1070 2D3C  
                                 l1230 2B74                                   l1214 29C2  
                                 l1206 289A                                   l1039 3804  
                                 l1063 2C12                                   l1231 2BA4  
                                 l1223 2AE0                                   l1215 29EA  
                                 l1048 32C0                                   l1072 2D94  
                                 l1064 2C72                                   l1216 29FE  
                                 l1144 39DE                                   l1049 3110  
                                 l1241 0F7C                                   l1081 4668  
                                 l1217 2A2A                                   l1161 3A7C  
                                 l1145 3A4E                                   l1209 28C0  
                                 l1058 3252                                   l1250 1052  
                                 l1242 0F76                                   l1082 45F6  
                                 l1226 2B06                                   l1075 2E50  
                                 l1067 2CAC                                   l1235 4B96  
                                 l1251 105E                                   l1083 4618  
                                 l1219 2A96                                   l1171 3A94  
                                 l1076 2DBE                                   l1092 350C  
                                 l1260 1380                                   l1244 0FCE  
                                 l1172 3A9C                                   l1340 0B48  
                                 l1077 2DF2                                   l1069 2CE0  
                                 l1237 4BB6                                   l1253 10D2  
                                 l1245 0FF4                                   l1085 4636  
                                 l1229 2BB4                                   l1149 3B18  
                                 l1181 3AD8                                   l1173 3AA4  
                                 l1078 2E30                                   l1270 52AA  
                                 l1238 4BE4                                   l1254 10F4  
                                 l1086 4660                                   l1334 0EE2  
                                 l1350 0EA8                                   l1263 531C  
                                 l1191 277C                                   l1351 0D5A  
                                 l1335 0A6C                                   l2128 5568  
                                 l1360 3F5E                                   l1096 3556  
                                 l1272 52C2                                   l1248 1024  
                                 l1176 3ABE                                   l1336 0D68  
                                 l1424 5162                                   l1432 4B2C  
                                 l2129 5562                                   l1097 3538  
                                 l1273 52E2                                   l1257 113C  
                                 l1249 1020                                   l1185 3AF4  
                                 l1169 3A8C                                   l1281 1F5C  
                                 l1337 0BA2                                   l1433 4ADC  
                                 l1258 1278                                   l1194 27A0  
                                 l1290 1EFC                                   l1282 1DFC  
                                 l1346 0F50                                   l1354 0E2A  
                                 l1338 0B28                                   l1434 4B24  
                                 l1442 1992                                   l1267 532E  
                                 l1099 354E                                   l1371 1526  
                                 l1259 136A                                   l1187 3AF6  
                                 l1179 3AD6                                   l1291 1ECC  
                                 l1283 1D84                                   l1355 0F3E  
                                 l1347 0CEA                                   l1427 519A  
                                 l1451 1A42                                   l1380 174E  
                                 l1196 27CC                                   l1284 1DA8  
                                 l1348 0C92                                   l1444 1CEC  
                                 l1452 1A7C                                   l1381 178E  
                                 l1373 16E2                                   l1197 2832  
                                 l1453 1AC8                                   l1374 1744  
                                 l1286 1E06                                   l1462 1B3C  
                                 l1446 1A16                                   l1359 4016  
                                 l1375 1730                                   l1527 5108  
                                 l1199 2826                                   l1287 1E2E  
                                 l1279 1D38                                   l1455 1AD8  
                                 l1447 19C0                                   l1439 1944  
                                 l1384 17A2                                   l1528 511C  
                                 l1296 1F68                                   l1472 1C48  
                                 l1456 1AE4                                   l1377 190E  
                                 l1297 1F84                                   l1473 1CA2  
                                 l1457 1AF0                                   l1474 1C76  
                                 l1466 1B80                                   l1379 1814  
                                 l1467 1B98                                   l1459 1B16  
                                 l1388 18A8                                   l1476 1C84  
                                 l1468 1BCC                                   l1582 438E  
                                 l1583 439C                                   l1575 4314  
                                 l1904 4DAA                                   l1584 43B2  
                                 l1576 432C                                   l1905 4D9E  
                                 l1914 4FEC                                   l1578 435A  
                                 l1690 427A                                   l1915 4FE0  
                                 l1579 434E                                   l1683 4226  
                                 l1908 4DDE                                   l1692 42EC  
                                 l1684 4220                                   l1909 4DEC  
                                 l1918 5014                                   l1686 4268  
                                 l1870 5430                                   l1919 5022  
                                 l1864 5752                                   l1689 42B8  
                                 l1961 51E4                                   l1962 51EE  
                                 l1874 454A                                   l1971 547E  
                                 l1972 5488                                   l1876 4586  
                                 l1981 4862                                   l1957 51C4  
                                 l1877 45C8                                   l1982 47DC  
                                 l1958 51BC                                   l1983 485A  
                                 l1967 5466                                   l1968 545E  
                                 l1994 5628                                   l1995 5616  
                                 l1988 5366                                   l1989 5344  
                                 ?_isr 0001                                   l9810 56C8  
                                 l9718 3448                                   l9816 56D8  
                _escreve_caractere_lcd 4E7C                                   l9686 339A  
                                 l9926 3770                                   STR_1 61F1  
                                 STR_2 626B                                   STR_3 6266  
                                 STR_4 6278                                   STR_5 6274  
                                 STR_6 6249                                   STR_7 61C4  
                                 STR_8 6252                                   STR_9 6173  
                       timer_dois@flag 0038                                   _BRGH 007D62  
                      __end_of_GPSRead 26A4                                   _T0IF 007F92  
                                 _CREN 007D5C                           ?_escreve_SPI 0001  
                                 _LATB 000F8A                                   _PIE1 000F9D  
                                 _RCIF 007CF5                                   i2l97 3B94  
                                 i2l98 3C24                                   i2l99 3BAE  
                                 _TMR0 000FD6                                   _TMR2 000FCC  
                                 _SPEN 007D5F                                   _TRMT 007D61  
                                 _TXEN 007D65                                   _SYNC 007D64  
                         trace_path@dj 00C0                           trace_path@fn 00C2  
                         trace_path@ds 00D4                           trace_path@fs 00D0  
                        ?_make_dirfile 0068                                   _Term 003C  
                                 _dado 0037                                   _flag 00F4  
                                 _atoi 421E                                   _main 563C  
                                 _fsid 002B                                   _itoa 540A  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf1 000FE7  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   btemp 0044  
                                 _utoa 4542                                   _sync 509C  
                        disk_ioctl@cmd 0060                          disk_read@buff 007F  
                        disk_ioctl@res 0064                          disk_read@pdrv 0087  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                ?_verifica_fence_externo 0001  
            sdc_disk_initialize@buff_i 007B                           ___param_bank 000000  
            sdc_disk_initialize@count1 0077              sdc_disk_initialize@count2 007D  
                          _string_dado 0290                                  ??_isr 000E  
              __size_of_escrita_sdcard 00C8       __size_of_configura_baudrate_uart 0132  
                                l10156 4790                                  l10190 3538  
                                l11214 10F0                                  l12022 0440  
                                l10264 5318                                  l10280 5344  
                                l12040 04AC                                  l10194 355E  
                                l10338 219A                                  l12060 0574  
                                l10368 2232                                  l10474 47DC  
                                l10466 5616                                  l11602 1944  
                                l12138 0844                                  l12340 413E  
                                l12078 05E0                                  l12430 4698  
                                l11296 4B24                                  l12354 416E  
                                l11634 1A02                                  l12178 08EC  
                                l12368 419E                                  l11850 42B4  
                                l11932 00E2                                  l11916 008E  
                                l11694 1B56                                  l11948 010A  
                                l11982 01F4                                  l11966 01CC  
                      __end_of___aldiv 43C4                                  ?_atoi 0066  
                                ?_main 0001                                  ?_itoa 0070  
                                STR_10 6252                                  STR_11 6260  
                                STR_12 625A                                  STR_20 61A4  
                                STR_13 61D4                                  STR_21 61B4  
                                STR_30 627C                                  STR_22 6162  
                                STR_14 614D                                  STR_31 6270  
                                STR_15 61E3                                  STR_23 6132  
                                STR_16 6236                                  STR_24 6194  
                                STR_17 622C                                  STR_25 61FF  
                                STR_18 6240                                  STR_26 6217  
                                STR_27 6184                                  STR_19 610F  
                                STR_28 6222                                  STR_29 620C  
                         ?_leitura_SPI 0001                        __end_of___lldiv 4DFE  
                                ?_utoa 0067                                  ?_sync 0001  
                                _T0CON 000FD5                                  u12300 5608  
                                u13030 4790                                  u12320 5054  
                      __end_of___llmod 5034                                  u12500 34AA  
                                u13301 213A                                  u13230 5318  
                                u13070 34F6                                  u12335 3C96  
                                u13080 3502                                  u13320 219A  
                                _T2CON 000FCA                                  u12425 3348  
                                u12450 33C0                                  u12530 56E8  
                                u13500 480A                                  u14205 4034  
                                u12710 36B0                                  u13190 3654  
                                u13430 2322                                  u15110 4FF0  
                                u15030 4AFC                                  u14215 4050  
                                u13520 4832                                  u12800 521A  
                                u13360 2232                                  u13280 2120  
                                u14225 4080                                  u12465 33F2  
                                u12490 346E                                  u14330 4DAE  
                                u12810 5244                                  u13290 2130  
                                u15050 4B4C                                  u14235 409A  
                                u13507 4800                                  u16011 5522  
                                u14180 4BB2                                  u13380 223E  
                                u14500 4676                                  u15300 1F80  
                                u15037 4AF2                                  u12830 30DA  
                                u13470 239E                                  u14510 468E  
                                u15230 1E2A                                  u13527 4828  
                                u12807 5210                                  u14415 3DD0  
                                u12760 37C8                                  u13480 23D6  
                                u14520 2762                                  u14360 51C8  
                                u16200 01E2                                  u16120 00F8  
                                u12905 323E                                  u12817 523A  
                                u15057 4B42                                  u14425 3E1C  
                                u16041 001C                                  u14290 435E  
                                u16051 002E                                  u15500 186E  
                                u14700 2A82                                  u15260 1EC8  
                                u13740 0EEA                                  u12925 2C42  
                                u14445 3E60                                  u16061 0040  
                                u13830 3930                                  u14390 546A  
                                u16310 0456                                  u12855 3140  
                                u13815 38BA                                  u14527 2758  
                                u13655 0BF0                                  u14455 3EAA  
                                u16071 0052                                  u14800 0FC2  
                                u13840 3954                                  u16400 058A  
                                u16240 02A6                                  u16160 01C4  
                                u17200 4C7E                                  u15505 1864  
                                u14490 464E                                  u14730 2ADC  
                                u13850 3A16                                  u16250 02AA  
                                u16170 01C8                                  u17210 4C96  
                                u12875 31B4                                  u12955 2D0C  
                                u14565 27EC                                  u15470 17B0  
                                u14750 2B02                                  u13870 3A28  
                                u15630 1ABE                                  u16510 07FE  
                                u16270 02B8                                  u14807 0FB8  
                                u13695 0CD6                                  u15560 1990  
                                u16600 0840                                  u12985 2DA0  
                                u13857 3A0C                                  u15801 1CFC  
                                u15490 1828                                  u14930 10F0  
                                u16370 0570                                  u15395 159A  
                                u14780 0F9C                                  u15740 1C28  
                                u16460 06A4                                  u14685 2A4A  
                                u15590 1A24                                  u16630 085E  
                                u16480 06B2                                  u14970 1366  
                                u16810 091E                                  u16650 0876  
                                u14787 0F92                                  u14980 137C  
                                u15940 49AA                                  u16660 08A2  
                                u16580 082A                                  u17188 46F0  
                                u14965 1290                                  u17189 4704  
                                u15790 1CC4                                  u16830 093E  
                                u16750 08D6                                  u16840 0970  
                                u16680 08B8                                  u16850 0996  
                                u16930 2ED6                                  u14995 1404  
                      __end_of___lwdiv 51F8                                  u17707 48DA  
                                u16940 2EDE                                  u17717 20BA  
                                u16790 0906                                  u17727 224E  
                                u16848 0974                                  u16880 2E6E  
                                u17737 2300                                  u16858 099A  
                                u16890 2E74                                  u17747 549E  
                                u16980 2FD6                                  u17677 4CE0  
                                u17687 48A2                                  u17697 48BE  
                                i2l101 3BDC                                  i2l102 3BEE  
                                i2l103 3BFC                                  i2l105 3C18  
                      __end_of___lwmod 5492                                  i2l106 3C2C  
                                i2l320 23F0                                  i2l313 5250  
                                i2l321 2400                                  i2l330 24A2  
                                i2l331 24A6                                  i2l340 2566  
                                i2l332 24CE                                  i2l341 2590  
                                i2l333 24F8                                  i2l325 2422  
                                i2l318 268E                                  i2l342 25BA  
                                i2l326 242C                                  i2l343 25E4  
                                i2l335 2514                                  i2l319 23E2  
                                i2l344 2610                                  i2l336 251A  
                                i2l328 2482                                  i2l345 263C  
                                i2l337 2544                                  i2l346 266E  
                                i2l347 2676                                  i2l339 2560  
                                i2l982 582A                                  _RCREG 000FAE  
                                _RCSTA 000FAB                                  _TMR0H 000FD7  
                                _TMR0L 000FD6                                  _SPBRG 000FAF  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                        __end_of_f_close 5696  
                                _TXREG 000FAD                          trace_path@dir 00C6  
                                _TXSTA 000FAC                                  _FatFs 00F7  
                      __end_of_f_lseek 1920                    ___lmul@multiplicand 0064  
           __size_of_config_timer_dois 000E                        __end_of_f_mount 52E6  
                      __end_of_f_write 0F64             __size_of_config_timer_zero 001C  
                        get_cluster@bc 00AF                          get_cluster@fs 00B1  
                        get_cluster@wc 00A9                        __end_of_command 509C  
                                _delay 56C2                        clust2sect@clust 006C  
                      __end_of_fprintf 1CFE                                  _fputc 514E  
                                _fputs 4AD0                        __end_of_isdigit 575A  
             __size_of_escreve_cmd_lcd 0094                                  atoi@a 006B  
                                atoi@s 0066                         ??_make_dirfile 006C  
                       disk_ioctl@buff 0061                                  pclath 000FFA  
                       disk_read@count 0085                                  tablat 000FF5  
                       disk_ioctl@pdrv 0063                       ?_dados_gps_to_sd 0001  
                      __end_of_proceed 587C                                  plusw1 000FE3  
                                plusw2 000FDB                                  utoa@c 006F  
                                utoa@v 006D                                  status 000FD8  
                        _troca_de_tela 2E64                                  wtemp6 0045  
                        disk_write@res 008A         __end_of_verifica_fence_externo 09AA  
                      __initialization 4CF6                    disk_initialize@pdrv 0080  
                  disk_initialize@stat 0081                           __end_of_atoi 42F6  
                         __end_of_main 566A                           clust2sect@fs 0075  
                         __end_of_itoa 544E                           __end_of_utoa 45EC  
                         __end_of_sync 50F6                     _inicializa_tarefas 4F64  
                      escalonador@cont 00F3                       __end_of_Latitude 5870  
                  reserve_direntry@dir 00C6                      create_chain@clust 00B6  
                          auto_mount@p 00B1                      create_chain@cstat 00BE  
                        sdc_reset@buff 0072                                 ??_atoi 0068  
                               ??_main 00F4                                 ??_itoa 0076  
                               ??_utoa 006D                                 ??_sync 00A0  
                        __activetblptr 000002                    ?_inicializa_tarefas 0001  
                 __end_of_desliga_uart 5858                              ??_GPSRead 000A  
                       _next_dir_entry 3826                   __size_of_desliga_SPI 000C  
                    get_fattime@f_time 008A                       ??_sdc_disk_write 0073  
                               ?_delay 0001                 ?_escreve_caractere_lcd 0001  
                               _ADCON1 000FC1                                 ?_fputc 00E5  
                     ___llmod@dividend 0060                                 ?_fputs 00EC  
                   auto_mount@bootsect 00A9                                 _INT0IE 007F94  
                               _INT0IF 007F91                          ?_dummy_clocks 0001  
                               i2l2120 53CC                                 i2l2121 53C4  
                               _PCLATH 000FFA                                 _INTCON 000FF2  
                               i2l9222 3BA6                __size_of_inicializa_SPI 0020  
                       ?_troca_de_tela 0001                                 _TMR0IF 007F92  
                               _TMR2IF 007CF1                     auto_mount@maxclust 00A5  
             __end_of_recebe_dado_uart 582E                                 _SPPCFG 000F63  
                               _SPPCON 000F65                                 _SSPBUF 000FC9  
             __size_of_sdc_disk_status 0018                       __end_of_check_fs 4BE8  
                 ??_inicializa_tarefas 0060                      ?_disparo_gravacao 0001  
                       trace_path@dptr 00D5                         trace_path@path 00C4  
               reserve_direntry@sector 00CA               __size_of_disk_initialize 003C  
           __end_of_posicao_cursor_lcd 4E7C                     ??_disparo_gravacao 00F3  
                       auto_mount@path 0093                           ?_move_window 008B  
                 __end_of_create_chain 3670                           _dado_arquivo 02C4  
               __size_of_init_hardware 0016                         auto_mount@stat 00B4  
                 __size_of_get_fattime 0108                           put_cluster@p 00B2  
         ?_verifica_dados_operacionais 0001                   __size_of_get_cluster 0222  
                               ___lmul 50F6                              ??___aldiv 0068  
                 __size_of_disk_status 0048                                 ___wmul 56EC  
                   __size_of_Longitude 000C                              ??___lldiv 0068  
                               _f_open 1CFE                              ??___llmod 0068  
                            ??___lwdiv 0064                                 _f_sync 3EF0  
                            ??___lwmod 0064                                 _buffer 01AC  
                               _estado 0039                                 _memcmp 47DA  
                               _memcpy 5332                       __end_of_init_lcd 491C  
                               _memset 560C                              ??_f_close 00AD  
                               _rawFix 003B                                 clear_0 4D30  
                               clear_1 4D42                                 clear_2 4D4E  
                               clear_3 4D5A                                 clear_4 4D66  
                            ??_f_lseek 00CA                              ??_f_mount 0062  
             configura_baudrate_uart@x 007A                              ??_f_write 00CC  
                               _strcmp 53C2                    _sdc_disk_initialize 2094  
                            ??_command 006A                            GPSRead@buff 000C  
                               _strlen 5558                       put_cluster@clust 00A0  
                               fputc@c 00E9                     get_cluster@fatsect 00AB  
                     __end_of_monta_sd 421E                                 itoa@cp 0076  
             __end_of_reserve_direntry 2BEA                       __end_of_validate 5332  
               __end_of_next_dir_entry 39AE                              ??_fprintf 01EF  
                         __pdataCOMRAM 0043                                 fputs@n 00F1  
                            ??_isdigit 0060                   __size_of_escalonador 00A4  
                     __end_of_response 584A                           __mediumconst 60EC  
                      disk_read@sector 0081                        disk_read@result 0088  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                              ??_proceed 0062  
                     _write_timer_zero 5894                                 sync@fs 00A0  
            escreve_caractere_lcd@data 0062                         ??_dummy_clocks 0060  
                  _escreve_inteiro_lcd 5518                        sdc_disk_write@i 0077  
                      sdc_disk_write@j 007C                             __accesstop 0060  
              __end_of__initialization 4D6C                   ?_sdc_disk_initialize 0001  
                       disk_write@buff 007F                         disk_write@pdrv 0087  
                 __size_of_escreve_SPI 0014                          ___rparam_used 000001  
                    ??_escreve_cmd_lcd 0062                         __pcstackCOMRAM 0001  
          __end_of_endereco_cursor_lcd 4F64                           __pidataBANK2 49B0  
                    ?_mensagem_inicial 0001                _configura_baudrate_uart 3DBE  
                        __end_of_delay 56EC                         _escrita_sdcard 43C4  
                        __end_of_fputc 51A4                          __end_of_fputs 4B5C  
                 ?_escreve_inteiro_lcd 0078          ??_verifica_dados_operacionais 0060  
                   ??_mensagem_inicial 0066                   __end_of_make_dirfile 3B1C  
                         ?_put_cluster 00A0                      reserve_direntry@c 00D1  
                    reserve_direntry@n 00CE                     _tarefa_em_execucao 0041  
           __end_ofi2_write_timer_zero 58A8                        ?_next_dir_entry 00B3  
               __size_of_sdc_disk_read 0146        configura_baudrate_uart@baudrate 006E  
                 reserve_direntry@dptr 00CF                   __size_of_leitura_SPI 000C  
                        _init_hardware 57CA                           auto_mount@fs 00B9  
                   __size_of_disk_read 0090                                ??_delay 0060  
                       sdc_reset@count 0070  verifica_fence_externo@fence_diff_long 0300  
                              ??_fputc 00E9                                ??_fputs 00F0  
                      ??_troca_de_tela 0066                      __end_of_Longitude 5864  
         mensagem_inicial@msg_linha_um 0068                             __pbssBANK0 00F4  
                           __pbssBANK1 0100                             __pbssBANK2 0290  
       __size_of_escreve_frase_ram_lcd 0054          __end_of_escreve_frase_ram_lcd 524C  
                ??_sdc_disk_initialize 0073                              ?_Latitude 0060  
            escreve_inteiro_uart@F3958 0273                 __end_of_escrita_sdcard 448C  
                   __size_of_sdc_reset 00A4                     troca_de_tela@state 0040  
                              ?___lmul 0060                      ??_sdc_disk_status 0060  
                        make_dirfile@a 0072                          make_dirfile@b 0070  
                        make_dirfile@c 0074                          make_dirfile@n 0073  
                        make_dirfile@t 0071                                ?___wmul 0060  
                mensagem_inicial@F4365 60FE                  mensagem_inicial@F4367 60ED  
                ??_escreve_inteiro_lcd 007A                                ?_f_open 00D7  
                              ?_f_sync 00A2                      ??_disk_initialize 0080  
                __size_of_desliga_uart 000E                                ?_memcmp 0060  
                              ?_memcpy 0060                                ?_memset 0060  
                       ___lmul@product 0068     verifica_fence_externo@temp_var_deg 0373  
                              ?_strcmp 0001                                ?_strlen 0060  
                              _INTCON2 000FF1                                _INTCON3 000FF0  
                       ?_init_hardware 0001                              ?_check_fs 008B  
                           _disk_ioctl 5696                                _GPSRead 23DA  
                           _disk_write 4BE8                         remove_chain@fs 00BC  
 __size_of_verifica_dados_operacionais 0002                                _SSPCON1 000FC6  
             __size_of_inicializa_uart 0024                                _SSPSTAT 000FC7  
                           _clust2sect 448C                         _inicializa_SPI 575A  
                      trace_path@clust 00D2                             ??_Latitude 0062  
                        ?_remove_chain 00B6                  __size_of_create_chain 01C0  
                            ?_init_lcd 0001                     __size_of_stringcpy 004E  
                        _sdc_disk_read 3C78                           _desliga_uart 584A  
                           _auto_mount 0F64                                __Hparam 0000  
            ??_configura_baudrate_uart 0072                                __Lparam 0000  
                            ?_monta_sd 0066                              ?_validate 0067  
                      ?_escrita_sdcard 0001                      __end_of_disk_read 4AD0  
                        put_cluster@bc 00B0                              ?_response 0001  
                        put_cluster@fs 00B4                                ___aldiv 42F6  
                           f_close@res 00AD                        __size_of___lmul 0058  
                              ___lldiv 4D7A                        __size_of___wmul 0028  
                              ___llmod 4FCC                   __size_of_move_window 01B6  
                           check_fs@fs 0091                                ___lwdiv 51A4  
                              ___lwmod 544E                        __size_of_f_open 0396  
                      __size_of_f_sync 012A                   __end_of_dummy_clocks 54D6  
                              _f_close 566A                                __pcinit 4CF6  
                      __size_of_memcmp 00A4                        __size_of_memcpy 0048  
                      __size_of_memset 0030                                _f_lseek 1496  
                           _init_ports 577A                                __ramtop 0800  
                              _f_mount 529A                                __ptext0 563C  
                              __ptext1 4C70                                __ptext2 487E  
                              __ptext3 57CA                                __ptext4 577A  
                              __ptext5 58A8                                __ptext6 580A  
                              __ptext7 5796                                __ptext8 5894  
                              __ptext9 582E                                _f_write 09AA  
                              _command 5034                              _T0CONbits 000FD5  
                  auto_mount@totalsect 00AD                        __size_of_strcmp 0048  
                      __size_of_strlen 003E            endereco_cursor_lcd@endereco 0062  
                              _fprintf 1920                                _rawDate 01BF  
                              _isdigit 5738                           __size_of_isr 3C70  
              ??_escreve_caractere_lcd 0062                             ??_check_fs 008F  
                              _rawTime 02F2                       ___aldiv@dividend 0060  
                         stringcpy@chr 0009                           stringcpy@dir 0005  
                              _time_sd 0033                           _create_chain 34B0  
                              _proceed 5870                __size_of_init_interrupt 0012  
                   _point_buff_gps_lat 00FD                      __end_of_sdc_reset 47DA  
               __end_of_inicializa_SPI 577A                             f_lseek@ofs 00C6  
                       __pintcode_body 3B1C                             f_lseek@res 00D6  
                 end_of_initialization 4D6C                             f_open@mode 00DB  
                           f_open@path 00D9                         ??_remove_chain 00B8  
                              isr@cont 0022                                memcmp@n 0064  
                              memcpy@d 0067                                memcpy@n 0064  
                              memcpy@s 0069                __size_of_init_oscilador 0008  
                              fputc@bw 00EA                                itoa@buf 0070  
                              memset@c 0062                                itoa@val 0072  
                              memset@n 0064                                memset@p 0066  
                 sdc_disk_initialize@i 0074                          __Lmediumconst 60EC  
                           ??_init_lcd 0063                                int_func 3B1C  
                    ?_recebe_dado_uart 0001                              i2u1111_40 53FE  
                      disk_status@pdrv 0065                        disk_status@stat 0066  
                       ?_sdc_disk_read 006C                              i2u1182_40 3B84  
                            i2u1183_48 3B86                              i2u1188_40 3BE0  
               write_timer_zero@timer0 0060                        ___lldiv@divisor 0064  
                        _rawSatellites 01D8                             f_mount@drv 0062  
                   ??_recebe_dado_uart 0001                       sdc_disk_read@ptr 0077  
                      ___lldiv@counter 006C                             ??_monta_sd 0068  
          verifica_fence_externo@F4372 0230            verifica_fence_externo@F4375 0200  
          verifica_fence_externo@F4386 0268            verifica_fence_externo@F4388 025C  
                           ??_validate 006B                  __size_of_make_dirfile 016E  
             __size_of_dados_gps_to_sd 0042                             ??_response 0060  
                            _RCSTAbits 000FAB               __end_of_write_timer_zero 589E  
                     ___aldiv@quotient 006A                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc1 000FE6                                postinc2 000FDE  
                              utoa@buf 0067                                utoa@val 0069  
                           _wait_ready 55D2                                strcmp@r 0006  
                              strlen@s 0060                              _PORTBbits 000F81  
            __size_of_disparo_gravacao 0016                              _PORTDbits 000F83  
                            _PORTEbits 000F84                        ??_init_hardware 0062  
          verifica_fence_externo@count 037A                             _trace_path 26A4  
                   _posicao_cursor_lcd 4DFE                      __end_of_stringcpy 529A  
          verifica_fence_externo@point 037B                          ??_desliga_SPI 0060  
                 __size_of_put_cluster 027A        __end_of_configura_baudrate_uart 3EF0  
                          ?_disk_ioctl 0060                      ?_reserve_direntry 00C4  
                           f_write@btw 00C8                             f_write@res 00D8  
                            _TRISBbits 000F93                            ?_disk_write 007F  
                            _TRISCbits 000F94                              _TRISDbits 000F95  
                     next_dir_entry@dj 00B3                        _escreve_cmd_lcd 491C  
                   ??_reserve_direntry 00C8                    ?_posicao_cursor_lcd 0063  
                      ?_inicializa_SPI 0001                        disk_write@count 0085  
                          ?_clust2sect 006C                       _put_cluster$2007 00A8  
                     _put_cluster$2008 00AA                             command@CMD 006A  
                           command@CRC 0069                             command@arg 0065  
                         _make_dirfile 39AE                          ??_get_fattime 0064  
                    ??_inicializa_uart 007C            __size_of_inicializa_tarefas 0068  
                        ??_get_cluster 00A2                          ??_disk_status 0062  
                          ?_auto_mount 0093                      _make_dirfile$2117 006E  
                      command@argument 006B                   ??_posicao_cursor_lcd 0064  
                       __end_of___lmul 514E                       ??_next_dir_entry 00B5  
                       __end_of___wmul 5714                         __end_of_f_open 2094  
                        __pidataCOMRAM 58B2                          ??_escalonador 01FE  
                          ?_init_ports 0001                         __end_of_f_sync 401A  
                       __end_of_memcmp 487E                         __end_of_memcpy 537A  
                       __end_of_memset 563C                         __end_of_strcmp 540A  
                       __end_of_strlen 5596                       _time_atualizacao 0031  
                  start_initialization 4CF6                            __end_of_isr 3C78  
            __size_of_mensagem_inicial 0086                     reserve_direntry@dj 00C4  
                   reserve_direntry@fs 00D4                    __end_of_desliga_SPI 5894  
                        ??_escreve_SPI 0060               ??_verifica_fence_externo 0081  
                      _sdc_disk_status 57B2                        ??_sdc_disk_read 0073  
                    auto_mount@fatsize 00B5                     i2_write_timer_zero 589E  
                      ___llmod@divisor 0064                              _Longitude 5858  
                      _disk_initialize 5596                        ___llmod@counter 0068  
                    __size_of_Latitude 000C                  reserve_direntry@clust 00D2  
              __size_of_sdc_disk_write 01CA                       _data_uart_recebe 0042  
                    wait_ready@timeout 0060                  __size_of_dummy_clocks 0044  
                        auto_mount@fmt 00B3                    __size_of_disk_ioctl 002C  
                  ?i2_write_timer_zero 0001                    __size_of_disk_write 0088  
                             ??___lmul 0068                             fprintf@fil 01DB  
                           fprintf@arp 031C                               ??___wmul 0064  
                           fprintf@res 0310                             fprintf@val 0318  
                           fprintf@str 01DD                    __end_of_get_fattime 4122  
                             ??_f_open 00DC                               ??_f_sync 00A4  
                          ?_wait_ready 0001                            __pdataBANK2 0200  
                  __end_of_get_cluster 32E6                               ??_memcmp 0066  
                  __end_of_disk_status 53C2                               ??_memcpy 0066  
                  __size_of_clust2sect 00B6                               ??_memset 0066  
               sdc_disk_read@start_add 0078                   __end_of_remove_chain 4692  
                    ??_dados_gps_to_sd 006B                sdc_disk_initialize@buff 007F  
                        ??_leitura_SPI 0060                __end_of_escreve_cmd_lcd 49B0  
                             ??_strcmp 0005                               ??_strlen 0062  
              sdc_disk_initialize@stat 0076                            ?_trace_path 00C0  
         __size_of_endereco_cursor_lcd 0070                           _fprintf$2605 0312  
                          __pbssBIGRAM 037D                          monta_sd@index 0068  
                          __pbssCOMRAM 0023                        _trace_path$2164 00CC  
                      _trace_path$2166 00CE                               ?_GPSRead 0001  
                        __pcstackBANK0 0060                          __pcstackBANK1 01DB  
                        __pcstackBANK3 0300                         _init_interrupt 580A  
                  __size_of_auto_mount 0532                   ??i2_write_timer_zero 0003  
                  __end_of_escalonador 4736            __end_of_sdc_disk_initialize 23DA  
                    __size_of_check_fs 008C                           _isdigit$2943 0061  
                         check_fs@sect 008B                            _char_number 003E  
                           sdc_reset@i 006C                           _dummy_clocks 5492  
                       _init_oscilador 58A8                  __end_of_troca_de_tela 30C4  
                             GPSRead@c 000D                       ??_escrita_sdcard 00F3  
                  __size_of_init_ports 001C                             ?_Longitude 0060  
                _escreve_frase_ram_lcd 51F8                              _data_buff 00F9  
                            _data_hoje 003A            __end_of_escreve_inteiro_lcd 5558  
                  __end_of_escreve_SPI 580A                      __size_of_init_lcd 009E  
                     ___lwdiv@dividend 0060                      delay@contador_int 0061  
                    delay@contador_ext 0060    __end_of_verifica_dados_operacionais 58B2  
          _verifica_dados_operacionais 58B0                              __pintcode 0008  
                        __pmediumconst 60EC    verifica_fence_externo@temp_buff_lat 0368  
                             ?___aldiv 0060                      __size_of_monta_sd 00FC  
                             ?___lldiv 0060                               ?___llmod 0060  
                    __size_of_validate 004C                               ?___lwdiv 0060  
                             ?___lwmod 0060                      __size_of_response 000E  
                             ?_f_close 00AB                              _disk_read 4A40  
                   _sinaliza_int_timer 00FF                               ?_f_lseek 00C4  
                             ?_f_mount 0060                       _disparo_gravacao 57E0  
                             ?_f_write 00C4                               ?_command 0065  
               __end_of_init_interrupt 581C                               ?_fprintf 01DB  
                             ?_isdigit 0001                            _desliga_SPI 5888  
                  sdc_disk_read@p_buff 006C                troca_de_tela@last_state 003F  
                  sdc_disk_read@length 007C                    sdc_disk_read@sector 006E  
              __end_of_sdc_disk_status 57CA         __size_of_escreve_caractere_lcd 0078  
        __end_of_escreve_caractere_lcd 4EF4                               ?_proceed 0001  
                            f_close@fp 00AB                    __end_of_leitura_SPI 5888  
                     ___lwdiv@quotient 0065                         __size_of_delay 002A  
              __end_of_disk_initialize 55D2                 __end_of_init_oscilador 58B0  
                       __size_of_fputc 0056                         __size_of_fputs 008C  
                  make_dirfile@dirname 006A                             validate@id 0069  
                           validate@fs 0067                              _p_tarefas 0108  
                            _rawCourse 01C6        __size_of_verifica_fence_externo 0998  
                     make_dirfile@path 0068                               _GPGGA_ok 002D  
                            _sdc_reset 4736                    __size_of_wait_ready 003A  
                      ___aldiv@divisor 0064                        ___aldiv@counter 0068  
                       ___wmul@product 0064                               _LATBbits 000F8A  
                            f_lseek@fp 00C4    verifica_fence_externo@point_dif_lat 0377  
                             _LATCbits 000F8B                               _GPRMC_ok 002F  
                            f_open@dir 01EE                              f_open@res 01ED  
                             _PIE1bits 000F9D                            _get_fattime 401A  
                         _rawLongitude 02D8                    __size_of_trace_path 02AC  
                          _get_cluster 30C4                            _disk_status 537A  
                        ??_move_window 008F                              f_mount@fs 0060  
                             _PIR1bits 000F9E                          move_window@fs 009E  
                    ?_write_timer_zero 0060                        remove_chain@nxt 00BA  
                            f_sync@dir 00A9                              f_sync@res 00A8  
                            f_sync@tim 00A4               posicao_cursor_lcd@coluna 0063  
                           ?_disk_read 007F                     ??_write_timer_zero 0062  
                            f_write@cc 00DF             posicao_cursor_lcd@endereco 0065  
                            f_write@bw 00CA                              f_write@fp 00C4  
            __size_of_recebe_dado_uart 0012                            _escalonador 4692  
                    ___wmul@multiplier 0060                       ?_escreve_cmd_lcd 0001  
          escreve_frase_ram_lcd@buffer 0063                       ??_inicializa_SPI 0060  
                      ?_init_interrupt 0001                           ??_disk_ioctl 0063  
                         ??_disk_write 0086                           f_lseek@clust 00DF  
                      _inicializa_uart 5714                           f_lseek@csize 00DB  
                         f_lseek@ifptr 00D7                              _stringcpy 524C  
                     __size_of_GPSRead 02CA                       _mensagem_inicial 4C70  
                      ?_init_oscilador 0001                           ??_clust2sect 0070  
                    ___lmul@multiplier 0060                              copy_data0 4D0A  
                          _escreve_SPI 57F6                             ?_sdc_reset 0001  
                  sdc_reset@count_nosd 006E                               _Latitude 5864  
             ?_configura_baudrate_uart 006E                 ?_escreve_frase_ram_lcd 0063  
                          ??_Longitude 0062                       auto_mount@chk_wp 0095  
                    move_window@sector 008B                         _sdc_disk_write 32E6  
            __size_of_reserve_direntry 029A               escreve_inteiro_lcd@F3966 027A  
                         ??_auto_mount 0096                               __Hrparam 0000  
                            memcpy@tmp 0066                               __Lrparam 0000  
                            fprintf@cc 031E                     __end_of_disk_ioctl 56C2  
                __size_of_remove_chain 00A6                         put_cluster@val 00A2  
                     get_cluster@clust 00A0                     __end_of_disk_write 4C70  
              verifica_fence_externo@i 037C                verifica_fence_externo@j 0379  
                         _SentenceType 003D                       __size_of___aldiv 00CE  
               sdc_disk_initialize@ocr 007C                           monta_sd@dado 0066  
               _verifica_fence_externo 0012                       __size_of___lldiv 0084  
                     __size_of___llmod 0068                          ??_put_cluster 00A4  
                     __size_of___lwdiv 0054                           monta_sd@size 0069  
                     __size_of___lwmod 0044                           ??_init_ports 0060  
                  __end_of_move_window 3826                     __end_of_clust2sect 4542  
             escreve_inteiro_lcd@valor 0078                       __size_of_f_close 002C  
             escreve_inteiro_lcd@texto 007A                       __size_of_f_lseek 048A  
                     __size_of_f_mount 004C                            _leitura_SPI 587C  
                     __size_of_f_write 05BA                      disk_status@result 0063  
                     __size_of_command 0068                  __end_of_init_hardware 57E0  
                             _check_fs 4B5C                       __size_of_fprintf 03DE  
                     __size_of_isdigit 0022                        ___lwdiv@divisor 0062  
                     ?_sdc_disk_status 0001                             ?_stringcpy 0001  
                      ___lwdiv@counter 0064                     __end_of_auto_mount 1496  
                             __ptext10 4F64                               __ptext11 4692  
                             __ptext20 51A4                               __ptext12 2E64  
                             __ptext21 421E                               __ptext13 57E0  
                             __ptext30 575A                               __ptext22 5738  
                             __ptext14 58B0                               __ptext31 1920  
                             __ptext23 491C                               __ptext15 0012  
                             __ptext40 3826                               __ptext32 4AD0  
                             __ptext24 5858                               __ptext16 5518  
                             __ptext41 448C                               __ptext33 514E  
                             __ptext25 5864                               __ptext17 540A  
                             __ptext50 4EF4                               __ptext42 45EC  
                             __ptext34 09AA                               __ptext26 43C4  
                             __ptext18 4542                               __ptext51 51F8  
                             __ptext43 5332                               __ptext35 4FCC  
                             __ptext27 5714                               __ptext19 544E  
                             __ptext60 2BEA                               __ptext52 4E7C  
                             __ptext44 0F64                               __ptext36 1CFE  
                             __ptext28 3DBE                               __ptext61 30C4  
                             __ptext53 56C2                               __ptext45 560C  
                             __ptext37 26A4                               __ptext29 42F6  
                             __ptext70 3670                               __ptext62 56EC  
                             __ptext54 4B5C                               __ptext46 5596  
                             __ptext38 39AE                               __ptext71 4BE8  
                             __ptext63 4D7A                               __ptext55 47DA  
                             __ptext47 2094                               __ptext39 2950  
                             __ptext80 5492                               __ptext72 32E6  
                             __ptext64 566A                               __ptext56 50F6  
                             __ptext48 4736                               __ptext81 587C  
                             __ptext73 4A40                               __ptext65 3EF0  
                             __ptext57 529A                               __ptext49 4DFE  
                             __ptext90 589E                               __ptext82 5696  
                             __ptext74 3C78                               __ptext66 52E6  
                             __ptext58 1496                               __ptext91 581C  
                             __ptext83 401A                               __ptext75 583C  
                             __ptext67 537A                               __ptext59 34B0  
                             __ptext92 23DA                               __ptext84 584A  
                             __ptext76 5870                               __ptext68 57B2  
                             __ptext93 524C                               __ptext85 5888  
                             __ptext77 5034                               __ptext69 509C  
                             __ptext94 53C2                               __ptext86 54D6  
                             __ptext78 55D2                               __ptext95 0000  
                             __ptext87 4122                               __ptext79 57F6  
                             __ptext88 5558                       __size_of_proceed 000C  
                             _filename 0281                            _rawAltitude 01B8  
                     ?_disk_initialize 0001                         _timeout_tarefa 0035  
                   sdc_disk_read@count 0072             __end_of_inicializa_tarefas 4FCC  
             i2write_timer_zero@timer0 0001                 __end_of_sdc_disk_write 34B0  
                            monta_sd@i 006A                            _rawLatitude 02E5  
                             _init_lcd 487E                          __size_of_atoi 00D8  
                        __size_of_main 002E                           _remove_chain 45EC  
                        __size_of_itoa 0044                          __size_of_utoa 00AA  
                        __size_of_sync 005A   verifica_fence_externo@fence_diff_lat 0330  
                  _endereco_cursor_lcd 4EF4                     __end_of_init_ports 5796  
                             _rawSpeed 01CC                          dummy_clocks@i 0063  
                             f_open@dj 01F0                          dummy_clocks@n 0062  
                             f_open@fn 01DB                               f_open@fp 00D7  
                             f_open@dw 01E9                               f_open@rs 01E7  
                      _dados_gps_to_sd 54D6                               _monta_sd 4122  
                             _validate 52E6                               _sentence 01D2  
                         move_window@n 0099                          stringcpy@str1 0001  
                        stringcpy@str2 0003                               _response 583C  
                             f_sync@fp 00A2                    _point_buff_gps_long 00FB  
          __size_of_posicao_cursor_lcd 007E                               int$flags 0044  
              posicao_cursor_lcd@linha 0064                               atoi@sign 006A  
                         ??_wait_ready 0060                            ??_disk_read 0086  
              __end_of_inicializa_uart 5738                           ??_trace_path 00C8  
                 ?_endereco_cursor_lcd 0001                     put_cluster@fatsect 00AC  
                           _INTCONbits 000FF2                               memcmp@s1 0060  
                             memcmp@s2 0062                       move_window@wsect 009A  
                             memcpy@d1 0060                               memcpy@s1 0062  
                  __end_of_put_cluster 2E64                               fprintf@c 0322  
                             fprintf@f 0316                               fprintf@i 0320  
                             fprintf@r 0317                               fprintf@s 0300  
                             fprintf@w 0314                               fputc@chr 00E5  
                             itoa@base 0074                               fputc@fil 00E7  
                             isdigit@c 0062                               memset@p1 0060  
                    _config_timer_dois 582E                           _tempo_backup 0100  
                             fputs@fil 00EE                               fputs@str 00EC  
                    _config_timer_zero 5796                           _poligono_ext 0110  
                        wait_ready@res 0064                               intlevel2 0000  
                   ?_config_timer_dois 0001               mensagem_inicial@msg_dois 0079  
                          ??_sdc_reset 006C                     ?_config_timer_zero 0001  
                         _tempo_tarefa 0023                        ?_sdc_disk_write 006C  
                     ___lwmod@dividend 0060                     __end_of_wait_ready 560C  
             __end_of_disparo_gravacao 57F6                       ___lldiv@dividend 0060  
                    sdc_disk_read@buff 007E                  __end_of_sdc_disk_read 3DBE  
                  sdc_disk_status@pdrv 0061                    sdc_disk_status@stat 0060  
                        ?_desliga_uart 0001                    ??_config_timer_dois 0060  
                           _OSCCONbits 000FD3                     __end_of_trace_path 2950  
                  ??_config_timer_zero 0062                            _move_window 3670  
 verifica_fence_externo@temp_buff_long 035C                   sdc_disk_write@count1 0079  
                 sdc_disk_write@p_buff 006C                       _recebe_dado_uart 581C  
                             utoa@base 006B                   sdc_disk_write@sector 006E  
                ??_endereco_cursor_lcd 0062                           response@buff 0060  
                             strcmp@s1 0001                               strcmp@s2 0003  
                         ?_desliga_SPI 0001                       ___lldiv@quotient 0068  
                      ___lwmod@divisor 0062                               strlen@cp 0064  
                      ___lwmod@counter 0064                      remove_chain@clust 00B6  
            __end_of_config_timer_dois 583C                           ___aldiv@sign 0069  
                        ?_create_chain 00B6              __end_of_config_timer_zero 57B2  
                          ??_stringcpy 0007            __size_ofi2_write_timer_zero 000A  
                          _SSPCON1bits 000FC6                __size_of_next_dir_entry 0188  
               escreve_cmd_lcd@comando 0062                     escreve_SPI@TempVar 0060  
                  sdc_disk_write@count 0072          sdc_disk_initialize@crc_number 0079  
              __end_of_dados_gps_to_sd 5518                     sdc_disk_write@buff 007E  
         __size_of_sdc_disk_initialize 0346                           f_write@clust 00E1  
                       ??_desliga_uart 0060                     leitura_sdcard@size 0043  
                         f_write@wbuff 00D9                           ?_get_fattime 0060  
                     _reserve_direntry 2950                            f_write@buff 00C6  
                    sdc_disk_write@res 007B                           ?_get_cluster 00A0  
                          f_write@sect 00DB                            f_write@wcnt 00E3  
                         ?_disk_status 0001          __end_ofmensagem_inicial@F4365 610F  
        __end_ofmensagem_inicial@F4367 60FE                        escreve_SPI@dado 0061  
