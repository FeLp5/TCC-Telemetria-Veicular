

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 19 16:39:41 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   111                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   120                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   121  0000                     
   122                           ; Version 1.45
   123                           ; Generated 16/11/2017 GMT
   124                           ; 
   125                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC18F4550 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     
   157                           	psect	idataCOMRAM
   158  005840                     __pidataCOMRAM:
   159                           	opt stack 0
   160                           
   161                           ;initializer for leitura_sdcard@size
   162  005840  58                 	db	88
   163                           
   164                           	psect	idataBANK2
   165  00493A                     __pidataBANK2:
   166                           	opt stack 0
   167                           
   168                           ;initializer for verifica_fence_externo@F4373
   169  00493A  2D                 	db	45
   170  00493B  30                 	db	48
   171  00493C  34                 	db	52
   172  00493D  36                 	db	54
   173  00493E  32                 	db	50
   174  00493F  39                 	db	57
   175  004940  2E                 	db	46
   176  004941  37                 	db	55
   177  004942  33                 	db	51
   178  004943  34                 	db	52
   179  004944  37                 	db	55
   180  004945  37                 	db	55
   181  004946  2D                 	db	45
   182  004947  30                 	db	48
   183  004948  34                 	db	52
   184  004949  36                 	db	54
   185  00494A  32                 	db	50
   186  00494B  39                 	db	57
   187  00494C  2E                 	db	46
   188  00494D  36                 	db	54
   189  00494E  38                 	db	56
   190  00494F  36                 	db	54
   191  004950  30                 	db	48
   192  004951  31                 	db	49
   193  004952  2D                 	db	45
   194  004953  30                 	db	48
   195  004954  34                 	db	52
   196  004955  36                 	db	54
   197  004956  32                 	db	50
   198  004957  39                 	db	57
   199  004958  2E                 	db	46
   200  004959  36                 	db	54
   201  00495A  38                 	db	56
   202  00495B  36                 	db	54
   203  00495C  30                 	db	48
   204  00495D  31                 	db	49
   205  00495E  2D                 	db	45
   206  00495F  30                 	db	48
   207  004960  34                 	db	52
   208  004961  36                 	db	54
   209  004962  32                 	db	50
   210  004963  39                 	db	57
   211  004964  2E                 	db	46
   212  004965  37                 	db	55
   213  004966  33                 	db	51
   214  004967  34                 	db	52
   215  004968  37                 	db	55
   216  004969  37                 	db	55
   217                           
   218                           ;initializer for verifica_fence_externo@F4370
   219  00496A  2D                 	db	45
   220  00496B  32                 	db	50
   221  00496C  33                 	db	51
   222  00496D  34                 	db	52
   223  00496E  32                 	db	50
   224  00496F  2E                 	db	46
   225  004970  30                 	db	48
   226  004971  37                 	db	55
   227  004972  31                 	db	49
   228  004973  31                 	db	49
   229  004974  32                 	db	50
   230  004975  2D                 	db	45
   231  004976  32                 	db	50
   232  004977  33                 	db	51
   233  004978  34                 	db	52
   234  004979  32                 	db	50
   235  00497A  2E                 	db	46
   236  00497B  30                 	db	48
   237  00497C  37                 	db	55
   238  00497D  31                 	db	49
   239  00497E  31                 	db	49
   240  00497F  32                 	db	50
   241  004980  2D                 	db	45
   242  004981  32                 	db	50
   243  004982  33                 	db	51
   244  004983  34                 	db	52
   245  004984  32                 	db	50
   246  004985  2E                 	db	46
   247  004986  31                 	db	49
   248  004987  31                 	db	49
   249  004988  37                 	db	55
   250  004989  38                 	db	56
   251  00498A  34                 	db	52
   252  00498B  2D                 	db	45
   253  00498C  32                 	db	50
   254  00498D  33                 	db	51
   255  00498E  34                 	db	52
   256  00498F  32                 	db	50
   257  004990  2E                 	db	46
   258  004991  31                 	db	49
   259  004992  31                 	db	49
   260  004993  37                 	db	55
   261  004994  38                 	db	56
   262  004995  34                 	db	52
   263                           
   264                           ;initializer for verifica_fence_externo@F4388
   265  004996  2D                 	db	45
   266  004997  30                 	db	48
   267  004998  34                 	db	52
   268  004999  36                 	db	54
   269  00499A  32                 	db	50
   270  00499B  39                 	db	57
   271  00499C  2E                 	db	46
   272  00499D  37                 	db	55
   273  00499E  33                 	db	51
   274  00499F  34                 	db	52
   275  0049A0  37                 	db	55
   276  0049A1  37                 	db	55
   277                           
   278                           ;initializer for verifica_fence_externo@F4386
   279  0049A2  2D                 	db	45
   280  0049A3  32                 	db	50
   281  0049A4  33                 	db	51
   282  0049A5  34                 	db	52
   283  0049A6  32                 	db	50
   284  0049A7  2E                 	db	46
   285  0049A8  30                 	db	48
   286  0049A9  37                 	db	55
   287  0049AA  31                 	db	49
   288  0049AB  31                 	db	49
   289  0049AC  32                 	db	50
   290                           
   291                           ;initializer for escreve_inteiro_uart@F3958
   292  0049AD  30                 	db	48
   293  0049AE  30                 	db	48
   294  0049AF  30                 	db	48
   295  0049B0  30                 	db	48
   296  0049B1  30                 	db	48
   297  0049B2  30                 	db	48
   298  0049B3  00                 	db	0
   299                           
   300                           ;initializer for escreve_inteiro_lcd@F3966
   301  0049B4  30                 	db	48
   302  0049B5  30                 	db	48
   303  0049B6  30                 	db	48
   304  0049B7  30                 	db	48
   305  0049B8  30                 	db	48
   306  0049B9  30                 	db	48
   307  0049BA  00                 	db	0
   308                           
   309                           ;initializer for _filename
   310  0049BB  74                 	db	116
   311  0049BC  65                 	db	101
   312  0049BD  73                 	db	115
   313  0049BE  74                 	db	116
   314  0049BF  65                 	db	101
   315  0049C0  31                 	db	49
   316  0049C1  2E                 	db	46
   317  0049C2  74                 	db	116
   318  0049C3  78                 	db	120
   319  0049C4  74                 	db	116
   320  0049C5  00                 	db	0
   321  0049C6  00                 	db	0
   322  0049C7  00                 	db	0
   323  0049C8  00                 	db	0
   324  0049C9  00                 	db	0
   325                           
   326                           	psect	mediumconst
   327  0060EA                     __pmediumconst:
   328                           	opt stack 0
   329  0060EA  00                 	db	0
   330  0060EB                     mensagem_inicial@F4365:
   331                           	opt stack 0
   332  0060EB  54                 	db	84
   333  0060EC  43                 	db	67
   334  0060ED  43                 	db	67
   335  0060EE  2D                 	db	45
   336  0060EF  2D                 	db	45
   337  0060F0  54                 	db	84
   338  0060F1  45                 	db	69
   339  0060F2  4C                 	db	76
   340  0060F3  45                 	db	69
   341  0060F4  4D                 	db	77
   342  0060F5  54                 	db	84
   343  0060F6  52                 	db	82
   344  0060F7  49                 	db	73
   345  0060F8  41                 	db	65
   346  0060F9  00                 	db	0
   347  0060FA  00                 	db	0
   348  0060FB  00                 	db	0
   349  0060FC                     __end_ofmensagem_inicial@F4365:
   350                           	opt stack 0
   351  0060FC                     mensagem_inicial@F4363:
   352                           	opt stack 0
   353  0060FC  46                 	db	70
   354  0060FD  41                 	db	65
   355  0060FE  54                 	db	84
   356  0060FF  45                 	db	69
   357  006100  43                 	db	67
   358  006101  20                 	db	32
   359  006102  53                 	db	83
   360  006103  54                 	db	84
   361  006104  20                 	db	32
   362  006105  41                 	db	65
   363  006106  4E                 	db	78
   364  006107  44                 	db	68
   365  006108  52                 	db	82
   366  006109  45                 	db	69
   367  00610A  00                 	db	0
   368  00610B  00                 	db	0
   369  00610C  00                 	db	0
   370  00610D                     __end_ofmensagem_inicial@F4363:
   371                           	opt stack 0
   372  0000                     _TMR0	set	4054
   373  0000                     _RCSTA	set	4011
   374  0000                     _TXSTA	set	4012
   375  0000                     _RCREG	set	4014
   376  0000                     _RCSTAbits	set	4011
   377  0000                     _TXREG	set	4013
   378  0000                     _SPBRG	set	4015
   379  0000                     _PR2	set	4043
   380  0000                     _TMR2	set	4044
   381  0000                     _T2CON	set	4042
   382  0000                     _OSCCONbits	set	4051
   383  0000                     _TRISE	set	3990
   384  0000                     _TRISC	set	3988
   385  0000                     _TRISA	set	3986
   386  0000                     _TRISD	set	3989
   387  0000                     _LATB	set	3978
   388  0000                     _TRISB	set	3987
   389  0000                     _ADCON1	set	4033
   390  0000                     _TMR0L	set	4054
   391  0000                     _TMR0H	set	4055
   392  0000                     _PIE1	set	3997
   393  0000                     _INTCON3	set	4080
   394  0000                     _INTCON2	set	4081
   395  0000                     _INTCON	set	4082
   396  0000                     _SPPCFG	set	3939
   397  0000                     _SPPCON	set	3941
   398  0000                     _T0CON	set	4053
   399  0000                     _PORTDbits	set	3971
   400  0000                     _TRISDbits	set	3989
   401  0000                     _LATCbits	set	3979
   402  0000                     _SSPBUF	set	4041
   403  0000                     _SSPCON1bits	set	4038
   404  0000                     _SSPSTATbits	set	4039
   405  0000                     _SSPCON1	set	4038
   406  0000                     _SSPSTAT	set	4039
   407  0000                     _TRISCbits	set	3988
   408  0000                     _TRISBbits	set	3987
   409  0000                     _LATBbits	set	3978
   410  0000                     _PORTEbits	set	3972
   411  0000                     _T0CONbits	set	4053
   412  0000                     _PCL	set	4089
   413  0000                     _PCLATH	set	4090
   414  0000                     _INTCONbits	set	4082
   415  0000                     _PORTBbits	set	3969
   416  0000                     _PIR1bits	set	3998
   417  0000                     _PIE1bits	set	3997
   418  0000                     _RCIF	set	31989
   419  0000                     _TRMT	set	32097
   420  0000                     _TXEN	set	32101
   421  0000                     _CREN	set	32092
   422  0000                     _SPEN	set	32095
   423  0000                     _SYNC	set	32100
   424  0000                     _BRGH	set	32098
   425  0000                     _TMR2IF	set	31985
   426  0000                     _INT0IE	set	32660
   427  0000                     _INT0IF	set	32657
   428  0000                     _T0IF	set	32658
   429  0000                     _TMR0IF	set	32658
   430  00610D                     STR_21:
   431  00610D  0A                 	db	10
   432  00610E  76                 	db	118	;'v'
   433  00610F  25                 	db	37
   434  006110  73                 	db	115	;'s'
   435  006111  3B                 	db	59	;';'
   436  006112  6C                 	db	108	;'l'
   437  006113  74                 	db	116	;'t'
   438  006114  25                 	db	37
   439  006115  73                 	db	115	;'s'
   440  006116  3B                 	db	59	;';'
   441  006117  6C                 	db	108	;'l'
   442  006118  6F                 	db	111	;'o'
   443  006119  25                 	db	37
   444  00611A  73                 	db	115	;'s'
   445  00611B  3B                 	db	59	;';'
   446  00611C  72                 	db	114	;'r'
   447  00611D  25                 	db	37
   448  00611E  73                 	db	115	;'s'
   449  00611F  3B                 	db	59	;';'
   450  006120  63                 	db	99	;'c'
   451  006121  25                 	db	37
   452  006122  73                 	db	115	;'s'
   453  006123  3B                 	db	59	;';'
   454  006124  6B                 	db	107	;'k'
   455  006125  25                 	db	37
   456  006126  73                 	db	115	;'s'
   457  006127  3B                 	db	59	;';'
   458  006128  68                 	db	104	;'h'
   459  006129  25                 	db	37
   460  00612A  73                 	db	115	;'s'
   461  00612B  3B                 	db	59	;';'
   462  00612C  64                 	db	100	;'d'
   463  00612D  25                 	db	37
   464  00612E  73                 	db	115	;'s'
   465  00612F  00                 	db	0
   466  006130                     STR_25:
   467  006130  73                 	db	115	;'s'
   468  006131  74                 	db	116	;'t'
   469  006132  72                 	db	114	;'r'
   470  006133  69                 	db	105	;'i'
   471  006134  6E                 	db	110	;'n'
   472  006135  67                 	db	103	;'g'
   473  006136  5F                 	db	95	;'_'
   474  006137  64                 	db	100	;'d'
   475  006138  61                 	db	97	;'a'
   476  006139  64                 	db	100	;'d'
   477  00613A  6F                 	db	111	;'o'
   478  00613B  2E                 	db	46
   479  00613C  6F                 	db	111	;'o'
   480  00613D  64                 	db	100	;'d'
   481  00613E  6F                 	db	111	;'o'
   482  00613F  6D                 	db	109	;'m'
   483  006140  65                 	db	101	;'e'
   484  006141  74                 	db	116	;'t'
   485  006142  72                 	db	114	;'r'
   486  006143  6F                 	db	111	;'o'
   487  006144  5F                 	db	95	;'_'
   488  006145  74                 	db	116	;'t'
   489  006146  6F                 	db	111	;'o'
   490  006147  74                 	db	116	;'t'
   491  006148  61                 	db	97	;'a'
   492  006149  6C                 	db	108	;'l'
   493  00614A  00                 	db	0
   494  00614B  6F                 	db	111	;'o'
   495  00614C  20                 	db	32
   496  00614D  53                 	db	83	;'S'
   497  00614E  69                 	db	105	;'i'
   498  00614F  73                 	db	115	;'s'
   499  006150  74                 	db	116	;'t'
   500  006151  65                 	db	101	;'e'
   501  006152  6D                 	db	109	;'m'
   502  006153  61                 	db	97	;'a'
   503  006154  20                 	db	32
   504  006155  64                 	db	100	;'d'
   505  006156  65                 	db	101	;'e'
   506  006157  20                 	db	32
   507  006158  61                 	db	97	;'a'
   508  006159  72                 	db	114	;'r'
   509  00615A  71                 	db	113	;'q'
   510  00615B  75                 	db	117	;'u'
   511  00615C  69                 	db	105	;'i'
   512  00615D  76                 	db	118	;'v'
   513  00615E  6F                 	db	111	;'o'
   514  00615F  00                 	db	0
   515  006160                     STR_24:
   516  006160  73                 	db	115	;'s'
   517  006161  74                 	db	116	;'t'
   518  006162  72                 	db	114	;'r'
   519  006163  69                 	db	105	;'i'
   520  006164  6E                 	db	110	;'n'
   521  006165  67                 	db	103	;'g'
   522  006166  5F                 	db	95	;'_'
   523  006167  64                 	db	100	;'d'
   524  006168  61                 	db	97	;'a'
   525  006169  64                 	db	100	;'d'
   526  00616A  6F                 	db	111	;'o'
   527  00616B  2E                 	db	46
   528  00616C  63                 	db	99	;'c'
   529  00616D  6F                 	db	111	;'o'
   530  00616E  6D                 	db	109	;'m'
   531  00616F  62                 	db	98	;'b'
   532  006170  00                 	db	0
   533  006171                     STR_11:
   534  006171  42                 	db	66	;'B'
   535  006172  31                 	db	49	;'1'
   536  006173  3A                 	db	58	;':'
   537  006174  52                 	db	82	;'R'
   538  006175  50                 	db	80	;'P'
   539  006176  4D                 	db	77	;'M'
   540  006177  20                 	db	32
   541  006178  20                 	db	32
   542  006179  42                 	db	66	;'B'
   543  00617A  32                 	db	50	;'2'
   544  00617B  3A                 	db	58	;':'
   545  00617C  46                 	db	70	;'F'
   546  00617D  45                 	db	69	;'E'
   547  00617E  4E                 	db	78	;'N'
   548  00617F  43                 	db	67	;'C'
   549  006180  45                 	db	69	;'E'
   550  006181  00                 	db	0
   551  006182                     STR_29:
   552  006182  49                 	db	73	;'I'
   553  006183  6E                 	db	110	;'n'
   554  006184  73                 	db	115	;'s'
   555  006185  69                 	db	105	;'i'
   556  006186  72                 	db	114	;'r'
   557  006187  61                 	db	97	;'a'
   558  006188  20                 	db	32
   559  006189  6F                 	db	111	;'o'
   560  00618A  20                 	db	32
   561  00618B  43                 	db	67	;'C'
   562  00618C  61                 	db	97	;'a'
   563  00618D  72                 	db	114	;'r'
   564  00618E  74                 	db	116	;'t'
   565  00618F  61                 	db	97	;'a'
   566  006190  6F                 	db	111	;'o'
   567  006191  00                 	db	0
   568  006192                     STR_26:
   569  006192  73                 	db	115	;'s'
   570  006193  74                 	db	116	;'t'
   571  006194  72                 	db	114	;'r'
   572  006195  69                 	db	105	;'i'
   573  006196  6E                 	db	110	;'n'
   574  006197  67                 	db	103	;'g'
   575  006198  5F                 	db	95	;'_'
   576  006199  64                 	db	100	;'d'
   577  00619A  61                 	db	97	;'a'
   578  00619B  64                 	db	100	;'d'
   579  00619C  6F                 	db	111	;'o'
   580  00619D  2E                 	db	46
   581  00619E  64                 	db	100	;'d'
   582  00619F  74                 	db	116	;'t'
   583  0061A0  63                 	db	99	;'c'
   584  0061A1  00                 	db	0
   585  0061A2                     STR_22:
   586  0061A2  73                 	db	115	;'s'
   587  0061A3  74                 	db	116	;'t'
   588  0061A4  72                 	db	114	;'r'
   589  0061A5  69                 	db	105	;'i'
   590  0061A6  6E                 	db	110	;'n'
   591  0061A7  67                 	db	103	;'g'
   592  0061A8  5F                 	db	95	;'_'
   593  0061A9  64                 	db	100	;'d'
   594  0061AA  61                 	db	97	;'a'
   595  0061AB  64                 	db	100	;'d'
   596  0061AC  6F                 	db	111	;'o'
   597  0061AD  2E                 	db	46
   598  0061AE  76                 	db	118	;'v'
   599  0061AF  65                 	db	101	;'e'
   600  0061B0  6C                 	db	108	;'l'
   601  0061B1  00                 	db	0
   602  0061B2                     STR_23:
   603  0061B2  73                 	db	115	;'s'
   604  0061B3  74                 	db	116	;'t'
   605  0061B4  72                 	db	114	;'r'
   606  0061B5  69                 	db	105	;'i'
   607  0061B6  6E                 	db	110	;'n'
   608  0061B7  67                 	db	103	;'g'
   609  0061B8  5F                 	db	95	;'_'
   610  0061B9  64                 	db	100	;'d'
   611  0061BA  61                 	db	97	;'a'
   612  0061BB  64                 	db	100	;'d'
   613  0061BC  6F                 	db	111	;'o'
   614  0061BD  2E                 	db	46
   615  0061BE  72                 	db	114	;'r'
   616  0061BF  70                 	db	112	;'p'
   617  0061C0  6D                 	db	109	;'m'
   618  0061C1  00                 	db	0
   619  0061C2                     STR_9:
   620  0061C2  42                 	db	66	;'B'
   621  0061C3  31                 	db	49	;'1'
   622  0061C4  3A                 	db	58	;':'
   623  0061C5  52                 	db	82	;'R'
   624  0061C6  50                 	db	80	;'P'
   625  0061C7  4D                 	db	77	;'M'
   626  0061C8  20                 	db	32
   627  0061C9  42                 	db	66	;'B'
   628  0061CA  32                 	db	50	;'2'
   629  0061CB  3A                 	db	58	;':'
   630  0061CC  46                 	db	70	;'F'
   631  0061CD  45                 	db	69	;'E'
   632  0061CE  4E                 	db	78	;'N'
   633  0061CF  43                 	db	67	;'C'
   634  0061D0  45                 	db	69	;'E'
   635  0061D1  00                 	db	0
   636  0061D2  45                 	db	69	;'E'
   637  0061D3  72                 	db	114	;'r'
   638  0061D4  72                 	db	114	;'r'
   639  0061D5  6F                 	db	111	;'o'
   640  0061D6  20                 	db	32
   641  0061D7  61                 	db	97	;'a'
   642  0061D8  6F                 	db	111	;'o'
   643  0061D9  20                 	db	32
   644  0061DA  6D                 	db	109	;'m'
   645  0061DB  6F                 	db	111	;'o'
   646  0061DC  6E                 	db	110	;'n'
   647  0061DD  74                 	db	116	;'t'
   648  0061DE  61                 	db	97	;'a'
   649  0061DF  72                 	db	114	;'r'
   650  0061E0  00                 	db	0
   651  0061E1  45                 	db	69	;'E'
   652  0061E2  72                 	db	114	;'r'
   653  0061E3  72                 	db	114	;'r'
   654  0061E4  6F                 	db	111	;'o'
   655  0061E5  20                 	db	32
   656  0061E6  61                 	db	97	;'a'
   657  0061E7  6F                 	db	111	;'o'
   658  0061E8  20                 	db	32
   659  0061E9  63                 	db	99	;'c'
   660  0061EA  72                 	db	114	;'r'
   661  0061EB  69                 	db	105	;'i'
   662  0061EC  61                 	db	97	;'a'
   663  0061ED  72                 	db	114	;'r'
   664  0061EE  00                 	db	0
   665  0061EF                     STR_1:
   666  0061EF  52                 	db	82	;'R'
   667  0061F0  45                 	db	69	;'E'
   668  0061F1  47                 	db	71	;'G'
   669  0061F2  49                 	db	73	;'I'
   670  0061F3  41                 	db	65	;'A'
   671  0061F4  4F                 	db	79	;'O'
   672  0061F5  20                 	db	32
   673  0061F6  4E                 	db	78	;'N'
   674  0061F7  45                 	db	69	;'E'
   675  0061F8  47                 	db	71	;'G'
   676  0061F9  41                 	db	65	;'A'
   677  0061FA  44                 	db	68	;'D'
   678  0061FB  41                 	db	65	;'A'
   679  0061FC  00                 	db	0
   680  0061FD  65                 	db	101	;'e'
   681  0061FE  78                 	db	120	;'x'
   682  0061FF  74                 	db	116	;'t'
   683  006200  66                 	db	102	;'f'
   684  006201  65                 	db	101	;'e'
   685  006202  6E                 	db	110	;'n'
   686  006203  63                 	db	99	;'c'
   687  006204  65                 	db	101	;'e'
   688  006205  2E                 	db	46
   689  006206  74                 	db	116	;'t'
   690  006207  78                 	db	120	;'x'
   691  006208  74                 	db	116	;'t'
   692  006209  00                 	db	0
   693  00620A                     STR_31:
   694  00620A  4D                 	db	77	;'M'
   695  00620B  4D                 	db	77	;'M'
   696  00620C  43                 	db	67	;'C'
   697  00620D  20                 	db	32
   698  00620E  56                 	db	86	;'V'
   699  00620F  65                 	db	101	;'e'
   700  006210  72                 	db	114	;'r'
   701  006211  2E                 	db	46
   702  006212  20                 	db	32
   703  006213  33                 	db	51	;'3'
   704  006214  00                 	db	0
   705  006215                     STR_28:
   706  006215  53                 	db	83	;'S'
   707  006216  65                 	db	101	;'e'
   708  006217  6D                 	db	109	;'m'
   709  006218  20                 	db	32
   710  006219  43                 	db	67	;'C'
   711  00621A  61                 	db	97	;'a'
   712  00621B  72                 	db	114	;'r'
   713  00621C  74                 	db	116	;'t'
   714  00621D  61                 	db	97	;'a'
   715  00621E  6F                 	db	111	;'o'
   716  00621F  00                 	db	0
   717  006220                     STR_30:
   718  006220  53                 	db	83	;'S'
   719  006221  44                 	db	68	;'D'
   720  006222  20                 	db	32
   721  006223  56                 	db	86	;'V'
   722  006224  45                 	db	69	;'E'
   723  006225  52                 	db	82	;'R'
   724  006226  2E                 	db	46
   725  006227  20                 	db	32
   726  006228  31                 	db	49	;'1'
   727  006229  00                 	db	0
   728  00622A  56                 	db	86	;'V'
   729  00622B  65                 	db	101	;'e'
   730  00622C  72                 	db	114	;'r'
   731  00622D  69                 	db	105	;'i'
   732  00622E  66                 	db	102	;'f'
   733  00622F  69                 	db	105	;'i'
   734  006230  71                 	db	113	;'q'
   735  006231  75                 	db	117	;'u'
   736  006232  65                 	db	101	;'e'
   737  006233  00                 	db	0
   738  006234  6F                 	db	111	;'o'
   739  006235  20                 	db	32
   740  006236  61                 	db	97	;'a'
   741  006237  72                 	db	114	;'r'
   742  006238  71                 	db	113	;'q'
   743  006239  75                 	db	117	;'u'
   744  00623A  69                 	db	105	;'i'
   745  00623B  76                 	db	118	;'v'
   746  00623C  6F                 	db	111	;'o'
   747  00623D  00                 	db	0
   748  00623E  6F                 	db	111	;'o'
   749  00623F  20                 	db	32
   750  006240  63                 	db	99	;'c'
   751  006241  61                 	db	97	;'a'
   752  006242  72                 	db	114	;'r'
   753  006243  74                 	db	116	;'t'
   754  006244  61                 	db	97	;'a'
   755  006245  6F                 	db	111	;'o'
   756  006246  00                 	db	0
   757  006247                     STR_5:
   758  006247  44                 	db	68	;'D'
   759  006248  5F                 	db	95	;'_'
   760  006249  46                 	db	70	;'F'
   761  00624A  65                 	db	101	;'e'
   762  00624B  6E                 	db	110	;'n'
   763  00624C  63                 	db	99	;'c'
   764  00624D  65                 	db	101	;'e'
   765  00624E  3A                 	db	58	;':'
   766  00624F  00                 	db	0
   767  006250                     STR_10:
   768  006250  42                 	db	66	;'B'
   769  006251  32                 	db	50	;'2'
   770  006252  3A                 	db	58	;':'
   771  006253  48                 	db	72	;'H'
   772  006254  4F                 	db	79	;'O'
   773  006255  4D                 	db	77	;'M'
   774  006256  45                 	db	69	;'E'
   775  006257  00                 	db	0
   776  006258                     STR_14:
   777  006258  47                 	db	71	;'G'
   778  006259  50                 	db	80	;'P'
   779  00625A  47                 	db	71	;'G'
   780  00625B  47                 	db	71	;'G'
   781  00625C  41                 	db	65	;'A'
   782  00625D  00                 	db	0
   783  00625E                     STR_13:
   784  00625E  47                 	db	71	;'G'
   785  00625F  50                 	db	80	;'P'
   786  006260  52                 	db	82	;'R'
   787  006261  4D                 	db	77	;'M'
   788  006262  43                 	db	67	;'C'
   789  006263  00                 	db	0
   790  006264                     STR_7:
   791  006264  4C                 	db	76	;'L'
   792  006265  46                 	db	70	;'F'
   793  006266  49                 	db	73	;'I'
   794  006267  58                 	db	88	;'X'
   795  006268  3A                 	db	58	;':'
   796  006269  00                 	db	0
   797  00626A                     STR_3:
   798  00626A  56                 	db	86	;'V'
   799  00626B  45                 	db	69	;'E'
   800  00626C  4C                 	db	76	;'L'
   801  00626D  3A                 	db	58	;':'
   802  00626E  00                 	db	0
   803  00626F                     STR_2:
   804  00626F  52                 	db	82	;'R'
   805  006270  50                 	db	80	;'P'
   806  006271  4D                 	db	77	;'M'
   807  006272  3A                 	db	58	;':'
   808  006273  00                 	db	0
   809  006274                     STR_33:
   810  006274  46                 	db	70	;'F'
   811  006275  41                 	db	65	;'A'
   812  006276  54                 	db	84	;'T'
   813  006277  00                 	db	0
   814  006278                     STR_4:
   815  006278  4E                 	db	78	;'N'
   816  006279  2F                 	db	47
   817  00627A  44                 	db	68	;'D'
   818  00627B  00                 	db	0
   819  00627C  0D                 	db	13
   820  00627D  0A                 	db	10
   821  00627E  00                 	db	0
   822  00627F  00                 	db	0	; dummy byte at the end
   823  0000                     
   824                           ; #config settings
   825                           
   826                           	psect	cinit
   827  004C80                     __pcinit:
   828                           	opt stack 0
   829  004C80                     start_initialization:
   830                           	opt stack 0
   831  004C80                     __initialization:
   832                           	opt stack 0
   833                           
   834                           ; Initialize objects allocated to BANK2 (144 bytes)
   835                           ; load TBLPTR registers with __pidataBANK2
   836  004C80  0E3A               	movlw	low __pidataBANK2
   837  004C82  6EF6               	movwf	tblptrl,c
   838  004C84  0E49               	movlw	high __pidataBANK2
   839  004C86  6EF7               	movwf	tblptrh,c
   840  004C88  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   841  004C8A  6EF8               	movwf	tblptru,c
   842  004C8C  EE02  F000         	lfsr	0,__pdataBANK2
   843  004C90  EE10 F090          	lfsr	1,144
   844  004C94                     copy_data0:
   845  004C94  0009               	tblrd		*+
   846  004C96  CFF5 FFEE          	movff	tablat,postinc0
   847  004C9A  50E5               	movf	postdec1,w,c
   848  004C9C  50E1               	movf	fsr1l,w,c
   849  004C9E  E1FA               	bnz	copy_data0
   850                           
   851                           ; Initialize objects allocated to COMRAM (1 bytes)
   852                           ; load TBLPTR registers with __pidataCOMRAM
   853  004CA0  0E40               	movlw	low __pidataCOMRAM
   854  004CA2  6EF6               	movwf	tblptrl,c
   855  004CA4  0E58               	movlw	high __pidataCOMRAM
   856  004CA6  6EF7               	movwf	tblptrh,c
   857  004CA8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   858  004CAA  6EF8               	movwf	tblptru,c
   859  004CAC  0009               	tblrd		*+	;fetch initializer
   860  004CAE  CFF5 F044          	movff	tablat,__pdataCOMRAM
   861                           
   862                           ; Clear objects allocated to BIGRAM (544 bytes)
   863  004CB2  EE03  F081         	lfsr	0,__pbssBIGRAM
   864  004CB6  EE12 F020          	lfsr	1,544
   865  004CBA                     clear_0:
   866  004CBA  6AEE               	clrf	postinc0,c
   867  004CBC  50E5               	movf	postdec1,w,c
   868  004CBE  50E1               	movf	fsr1l,w,c
   869  004CC0  E1FC               	bnz	clear_0
   870  004CC2  50E2               	movf	fsr1h,w,c
   871  004CC4  E1FA               	bnz	clear_0
   872                           
   873                           ; Clear objects allocated to BANK2 (109 bytes)
   874  004CC6  EE02  F090         	lfsr	0,__pbssBANK2
   875  004CCA  0E6D               	movlw	109
   876  004CCC                     clear_1:
   877  004CCC  6AEE               	clrf	postinc0,c
   878  004CCE  06E8               	decf	wreg,f,c
   879  004CD0  E1FD               	bnz	clear_1
   880                           
   881                           ; Clear objects allocated to BANK1 (216 bytes)
   882  004CD2  EE01  F000         	lfsr	0,__pbssBANK1
   883  004CD6  0ED8               	movlw	216
   884  004CD8                     clear_2:
   885  004CD8  6AEE               	clrf	postinc0,c
   886  004CDA  06E8               	decf	wreg,f,c
   887  004CDC  E1FD               	bnz	clear_2
   888                           
   889                           ; Clear objects allocated to BANK0 (10 bytes)
   890  004CDE  EE00  F0F6         	lfsr	0,__pbssBANK0
   891  004CE2  0E0A               	movlw	10
   892  004CE4                     clear_3:
   893  004CE4  6AEE               	clrf	postinc0,c
   894  004CE6  06E8               	decf	wreg,f,c
   895  004CE8  E1FD               	bnz	clear_3
   896                           
   897                           ; Clear objects allocated to COMRAM (33 bytes)
   898  004CEA  EE00  F023         	lfsr	0,__pbssCOMRAM
   899  004CEE  0E21               	movlw	33
   900  004CF0                     clear_4:
   901  004CF0  6AEE               	clrf	postinc0,c
   902  004CF2  06E8               	decf	wreg,f,c
   903  004CF4  E1FD               	bnz	clear_4
   904  004CF6                     end_of_initialization:
   905                           	opt stack 0
   906  004CF6                     __end_of__initialization:
   907                           	opt stack 0
   908  004CF6  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   909  004CF8  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   910  004CFA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   911  004CFC  6EF8               	movwf	tblptru,c
   912  004CFE  0100               	movlb	0
   913  004D00  EFE3  F02A         	goto	_main	;jump to C main() function
   914                           tblptru	equ	0xFF8
   915                           tblptrh	equ	0xFF7
   916                           tblptrl	equ	0xFF6
   917                           tablat	equ	0xFF5
   918                           postinc0	equ	0xFEE
   919                           wreg	equ	0xFE8
   920                           postdec1	equ	0xFE5
   921                           fsr1h	equ	0xFE2
   922                           fsr1l	equ	0xFE1
   923                           
   924                           	psect	bssCOMRAM
   925  000023                     __pbssCOMRAM:
   926                           	opt stack 0
   927  000023                     _tempo_tarefa:
   928                           	opt stack 0
   929  000023                     	ds	8
   930  00002B                     _GPGGA_ok:
   931                           	opt stack 0
   932  00002B                     	ds	2
   933  00002D                     _GPRMC_ok:
   934                           	opt stack 0
   935  00002D                     	ds	2
   936  00002F                     _time_atualizacao:
   937                           	opt stack 0
   938  00002F                     	ds	2
   939  000031                     _time_sd:
   940                           	opt stack 0
   941  000031                     	ds	2
   942  000033                     _timeout_tarefa:
   943                           	opt stack 0
   944  000033                     	ds	2
   945  000035                     _dado:
   946                           	opt stack 0
   947  000035                     	ds	1
   948  000036                     timer_dois@flag:
   949                           	opt stack 0
   950  000036                     	ds	1
   951  000037                     _estado:
   952                           	opt stack 0
   953  000037                     	ds	1
   954  000038                     _data_hoje:
   955                           	opt stack 0
   956  000038                     	ds	1
   957  000039                     _rawFix:
   958                           	opt stack 0
   959  000039                     	ds	1
   960  00003A                     _Term:
   961                           	opt stack 0
   962  00003A                     	ds	1
   963  00003B                     _SentenceType:
   964                           	opt stack 0
   965  00003B                     	ds	1
   966  00003C                     _char_number:
   967                           	opt stack 0
   968  00003C                     	ds	1
   969  00003D                     troca_de_tela@last_state:
   970                           	opt stack 0
   971  00003D                     	ds	1
   972  00003E                     troca_de_tela@state:
   973                           	opt stack 0
   974  00003E                     	ds	1
   975  00003F                     _tarefa_em_execucao:
   976                           	opt stack 0
   977  00003F                     	ds	1
   978  000040                     _data_uart_recebe:
   979                           	opt stack 0
   980  000040                     	ds	1
   981  000041                     _rawSatellites:
   982                           	opt stack 0
   983  000041                     	ds	3
   984                           tblptru	equ	0xFF8
   985                           tblptrh	equ	0xFF7
   986                           tblptrl	equ	0xFF6
   987                           tablat	equ	0xFF5
   988                           postinc0	equ	0xFEE
   989                           wreg	equ	0xFE8
   990                           postdec1	equ	0xFE5
   991                           fsr1h	equ	0xFE2
   992                           fsr1l	equ	0xFE1
   993                           
   994                           	psect	dataCOMRAM
   995  000044                     __pdataCOMRAM:
   996                           	opt stack 0
   997  000044                     leitura_sdcard@size:
   998                           	opt stack 0
   999  000044                     	ds	1
  1000                           tblptru	equ	0xFF8
  1001                           tblptrh	equ	0xFF7
  1002                           tblptrl	equ	0xFF6
  1003                           tablat	equ	0xFF5
  1004                           postinc0	equ	0xFEE
  1005                           wreg	equ	0xFE8
  1006                           postdec1	equ	0xFE5
  1007                           fsr1h	equ	0xFE2
  1008                           fsr1l	equ	0xFE1
  1009                           
  1010                           	psect	bssBANK0
  1011  0000F6                     __pbssBANK0:
  1012                           	opt stack 0
  1013  0000F6                     _flag:
  1014                           	opt stack 0
  1015  0000F6                     	ds	3
  1016  0000F9                     _fsid:
  1017                           	opt stack 0
  1018  0000F9                     	ds	2
  1019  0000FB                     _FatFs:
  1020                           	opt stack 0
  1021  0000FB                     	ds	2
  1022  0000FD                     _data_buff:
  1023                           	opt stack 0
  1024  0000FD                     	ds	2
  1025  0000FF                     _sinaliza_int_timer:
  1026                           	opt stack 0
  1027  0000FF                     	ds	1
  1028                           tblptru	equ	0xFF8
  1029                           tblptrh	equ	0xFF7
  1030                           tblptrl	equ	0xFF6
  1031                           tablat	equ	0xFF5
  1032                           postinc0	equ	0xFEE
  1033                           wreg	equ	0xFE8
  1034                           postdec1	equ	0xFE5
  1035                           fsr1h	equ	0xFE2
  1036                           fsr1l	equ	0xFE1
  1037                           
  1038                           	psect	bssBANK1
  1039  000100                     __pbssBANK1:
  1040                           	opt stack 0
  1041  000100                     _tempo_backup:
  1042                           	opt stack 0
  1043  000100                     	ds	8
  1044  000108                     _p_tarefas:
  1045                           	opt stack 0
  1046  000108                     	ds	8
  1047  000110                     _poligono_ext:
  1048                           	opt stack 0
  1049  000110                     	ds	128
  1050  000190                     _fil:
  1051                           	opt stack 0
  1052  000190                     	ds	28
  1053  0001AC                     _buffer:
  1054                           	opt stack 0
  1055  0001AC                     	ds	12
  1056  0001B8                     _rawAltitude:
  1057                           	opt stack 0
  1058  0001B8                     	ds	7
  1059  0001BF                     _rawDate:
  1060                           	opt stack 0
  1061  0001BF                     	ds	7
  1062  0001C6                     _rawCourse:
  1063                           	opt stack 0
  1064  0001C6                     	ds	6
  1065  0001CC                     _rawSpeed:
  1066                           	opt stack 0
  1067  0001CC                     	ds	6
  1068  0001D2                     _sentence:
  1069                           	opt stack 0
  1070  0001D2                     	ds	6
  1071                           tblptru	equ	0xFF8
  1072                           tblptrh	equ	0xFF7
  1073                           tblptrl	equ	0xFF6
  1074                           tablat	equ	0xFF5
  1075                           postinc0	equ	0xFEE
  1076                           wreg	equ	0xFE8
  1077                           postdec1	equ	0xFE5
  1078                           fsr1h	equ	0xFE2
  1079                           fsr1l	equ	0xFE1
  1080                           
  1081                           	psect	bssBANK2
  1082  000290                     __pbssBANK2:
  1083                           	opt stack 0
  1084  000290                     _string_dado:
  1085                           	opt stack 0
  1086  000290                     	ds	52
  1087  0002C4                     _dado_arquivo:
  1088                           	opt stack 0
  1089  0002C4                     	ds	20
  1090  0002D8                     _rawLongitude:
  1091                           	opt stack 0
  1092  0002D8                     	ds	13
  1093  0002E5                     _rawLatitude:
  1094                           	opt stack 0
  1095  0002E5                     	ds	13
  1096  0002F2                     _rawTime:
  1097                           	opt stack 0
  1098  0002F2                     	ds	11
  1099                           tblptru	equ	0xFF8
  1100                           tblptrh	equ	0xFF7
  1101                           tblptrl	equ	0xFF6
  1102                           tablat	equ	0xFF5
  1103                           postinc0	equ	0xFEE
  1104                           wreg	equ	0xFE8
  1105                           postdec1	equ	0xFE5
  1106                           fsr1h	equ	0xFE2
  1107                           fsr1l	equ	0xFE1
  1108                           
  1109                           	psect	dataBANK2
  1110  000200                     __pdataBANK2:
  1111                           	opt stack 0
  1112  000200                     verifica_fence_externo@F4373:
  1113                           	opt stack 0
  1114  000200                     	ds	48
  1115  000230                     verifica_fence_externo@F4370:
  1116                           	opt stack 0
  1117  000230                     	ds	44
  1118  00025C                     verifica_fence_externo@F4388:
  1119                           	opt stack 0
  1120  00025C                     	ds	12
  1121  000268                     verifica_fence_externo@F4386:
  1122                           	opt stack 0
  1123  000268                     	ds	11
  1124  000273                     escreve_inteiro_uart@F3958:
  1125                           	opt stack 0
  1126  000273                     	ds	7
  1127  00027A                     escreve_inteiro_lcd@F3966:
  1128                           	opt stack 0
  1129  00027A                     	ds	7
  1130  000281                     _filename:
  1131                           	opt stack 0
  1132  000281                     	ds	15
  1133                           tblptru	equ	0xFF8
  1134                           tblptrh	equ	0xFF7
  1135                           tblptrl	equ	0xFF6
  1136                           tablat	equ	0xFF5
  1137                           postinc0	equ	0xFEE
  1138                           wreg	equ	0xFE8
  1139                           postdec1	equ	0xFE5
  1140                           fsr1h	equ	0xFE2
  1141                           fsr1l	equ	0xFE1
  1142                           
  1143                           	psect	bssBIGRAM
  1144  000381                     __pbssBIGRAM:
  1145                           	opt stack 0
  1146  000381                     _fs:
  1147                           	opt stack 0
  1148  000381                     	ds	544
  1149                           tblptru	equ	0xFF8
  1150                           tblptrh	equ	0xFF7
  1151                           tblptrl	equ	0xFF6
  1152                           tablat	equ	0xFF5
  1153                           postinc0	equ	0xFEE
  1154                           wreg	equ	0xFE8
  1155                           postdec1	equ	0xFE5
  1156                           fsr1h	equ	0xFE2
  1157                           fsr1l	equ	0xFE1
  1158                           
  1159                           	psect	cstackBANK3
  1160  000300                     __pcstackBANK3:
  1161                           	opt stack 0
  1162  000300                     fprintf@s:
  1163                           	opt stack 0
  1164  000300                     verifica_fence_externo@fence_diff_long:
  1165                           	opt stack 0
  1166                           
  1167                           ; 48 bytes @ 0x0
  1168  000300                     	ds	16
  1169  000310                     fprintf@res:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0x10
  1173  000310                     	ds	2
  1174  000312                     _fprintf$2611:
  1175                           	opt stack 0
  1176                           
  1177                           ; 2 bytes @ 0x12
  1178  000312                     	ds	2
  1179  000314                     fprintf@w:
  1180                           	opt stack 0
  1181                           
  1182                           ; 2 bytes @ 0x14
  1183  000314                     	ds	2
  1184  000316                     fprintf@f:
  1185                           	opt stack 0
  1186                           
  1187                           ; 1 bytes @ 0x16
  1188  000316                     	ds	1
  1189  000317                     fprintf@r:
  1190                           	opt stack 0
  1191                           
  1192                           ; 1 bytes @ 0x17
  1193  000317                     	ds	1
  1194  000318                     fprintf@val:
  1195                           	opt stack 0
  1196                           
  1197                           ; 4 bytes @ 0x18
  1198  000318                     	ds	4
  1199  00031C                     fprintf@arp:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x1C
  1203  00031C                     	ds	2
  1204  00031E                     fprintf@cc:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x1E
  1208  00031E                     	ds	2
  1209  000320                     fprintf@i:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x20
  1213  000320                     	ds	2
  1214  000322                     fprintf@c:
  1215                           	opt stack 0
  1216                           
  1217                           ; 1 bytes @ 0x22
  1218  000322                     	ds	14
  1219  000330                     verifica_fence_externo@fence_diff_lat:
  1220                           	opt stack 0
  1221                           
  1222                           ; 44 bytes @ 0x30
  1223  000330                     	ds	44
  1224  00035C                     verifica_fence_externo@temp_buff_long:
  1225                           	opt stack 0
  1226                           
  1227                           ; 12 bytes @ 0x5C
  1228  00035C                     	ds	12
  1229  000368                     verifica_fence_externo@temp_buff_lat:
  1230                           	opt stack 0
  1231                           
  1232                           ; 11 bytes @ 0x68
  1233  000368                     	ds	11
  1234  000373                     verifica_fence_externo@point_buff_gps_lat:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x73
  1238  000373                     	ds	2
  1239  000375                     verifica_fence_externo@point_buff_gps_long:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x75
  1243  000375                     	ds	2
  1244  000377                     verifica_fence_externo@temp_var_deg:
  1245                           	opt stack 0
  1246                           
  1247                           ; 4 bytes @ 0x77
  1248  000377                     	ds	4
  1249  00037B                     verifica_fence_externo@point_dif_lat:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x7B
  1253  00037B                     	ds	1
  1254  00037C                     verifica_fence_externo@point_dif_long:
  1255                           	opt stack 0
  1256                           
  1257                           ; 1 bytes @ 0x7C
  1258  00037C                     	ds	1
  1259  00037D                     verifica_fence_externo@j:
  1260                           	opt stack 0
  1261                           
  1262                           ; 1 bytes @ 0x7D
  1263  00037D                     	ds	1
  1264  00037E                     verifica_fence_externo@count:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x7E
  1268  00037E                     	ds	1
  1269  00037F                     verifica_fence_externo@point:
  1270                           	opt stack 0
  1271                           
  1272                           ; 1 bytes @ 0x7F
  1273  00037F                     	ds	1
  1274  000380                     verifica_fence_externo@i:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x80
  1278  000380                     	ds	1
  1279                           tblptru	equ	0xFF8
  1280                           tblptrh	equ	0xFF7
  1281                           tblptrl	equ	0xFF6
  1282                           tablat	equ	0xFF5
  1283                           postinc0	equ	0xFEE
  1284                           wreg	equ	0xFE8
  1285                           postdec1	equ	0xFE5
  1286                           fsr1h	equ	0xFE2
  1287                           fsr1l	equ	0xFE1
  1288                           
  1289                           	psect	cstackBANK1
  1290  0001D8                     __pcstackBANK1:
  1291                           	opt stack 0
  1292  0001D8                     ?_fprintf:
  1293                           	opt stack 0
  1294  0001D8                     fprintf@fil:
  1295                           	opt stack 0
  1296  0001D8                     f_open@fn:
  1297                           	opt stack 0
  1298                           
  1299                           ; 12 bytes @ 0x0
  1300  0001D8                     	ds	2
  1301  0001DA                     fprintf@str:
  1302                           	opt stack 0
  1303                           
  1304                           ; 2 bytes @ 0x2
  1305  0001DA                     	ds	10
  1306  0001E4                     f_open@rs:
  1307                           	opt stack 0
  1308                           
  1309                           ; 2 bytes @ 0xC
  1310  0001E4                     	ds	2
  1311  0001E6                     f_open@dw:
  1312                           	opt stack 0
  1313                           
  1314                           ; 4 bytes @ 0xE
  1315  0001E6                     	ds	4
  1316  0001EA                     f_open@res:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x12
  1320  0001EA                     	ds	1
  1321  0001EB                     f_open@dir:
  1322                           	opt stack 0
  1323                           
  1324                           ; 2 bytes @ 0x13
  1325  0001EB                     	ds	2
  1326  0001ED                     f_open@dj:
  1327                           	opt stack 0
  1328                           
  1329                           ; 14 bytes @ 0x15
  1330  0001ED                     	ds	14
  1331  0001FB                     
  1332                           ; 1 bytes @ 0x23
  1333  0001FB                     	ds	2
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           postinc0	equ	0xFEE
  1339                           wreg	equ	0xFE8
  1340                           postdec1	equ	0xFE5
  1341                           fsr1h	equ	0xFE2
  1342                           fsr1l	equ	0xFE1
  1343                           
  1344                           	psect	cstackBANK0
  1345  000060                     __pcstackBANK0:
  1346                           	opt stack 0
  1347  000060                     ??_isdigit:
  1348  000060                     ??_dummy_clocks:
  1349  000060                     ?_Latitude:
  1350                           	opt stack 0
  1351  000060                     ?_Longitude:
  1352                           	opt stack 0
  1353  000060                     ?_strlen:
  1354                           	opt stack 0
  1355  000060                     ?_memcmp:
  1356                           	opt stack 0
  1357  000060                     ?___wmul:
  1358                           	opt stack 0
  1359  000060                     ?___lwdiv:
  1360                           	opt stack 0
  1361  000060                     ?___lwmod:
  1362                           	opt stack 0
  1363  000060                     ?_get_fattime:
  1364                           	opt stack 0
  1365  000060                     ?___lmul:
  1366                           	opt stack 0
  1367  000060                     ?___aldiv:
  1368                           	opt stack 0
  1369  000060                     ?___lldiv:
  1370                           	opt stack 0
  1371  000060                     ?___llmod:
  1372                           	opt stack 0
  1373  000060                     response@buff:
  1374                           	opt stack 0
  1375  000060                     escreve_SPI@TempVar:
  1376                           	opt stack 0
  1377  000060                     disk_ioctl@cmd:
  1378                           	opt stack 0
  1379  000060                     sdc_disk_status@stat:
  1380                           	opt stack 0
  1381  000060                     delay@contador_ext:
  1382                           	opt stack 0
  1383  000060                     write_timer_zero@timer0:
  1384                           	opt stack 0
  1385  000060                     f_mount@fs:
  1386                           	opt stack 0
  1387  000060                     ___wmul@multiplier:
  1388                           	opt stack 0
  1389  000060                     ___lwdiv@dividend:
  1390                           	opt stack 0
  1391  000060                     ___lwmod@dividend:
  1392                           	opt stack 0
  1393  000060                     memcmp@s1:
  1394                           	opt stack 0
  1395  000060                     memcpy@d1:
  1396                           	opt stack 0
  1397  000060                     memset@p1:
  1398                           	opt stack 0
  1399  000060                     strlen@s:
  1400                           	opt stack 0
  1401  000060                     wait_ready@timeout:
  1402                           	opt stack 0
  1403  000060                     ___lmul@multiplier:
  1404                           	opt stack 0
  1405  000060                     ___aldiv@dividend:
  1406                           	opt stack 0
  1407  000060                     ___lldiv@dividend:
  1408                           	opt stack 0
  1409  000060                     ___llmod@dividend:
  1410                           	opt stack 0
  1411                           
  1412                           ; 4 bytes @ 0x0
  1413  000060                     	ds	1
  1414  000061                     escreve_SPI@dado:
  1415                           	opt stack 0
  1416  000061                     sdc_disk_status@pdrv:
  1417                           	opt stack 0
  1418  000061                     delay@contador_int:
  1419                           	opt stack 0
  1420  000061                     _isdigit$2949:
  1421                           	opt stack 0
  1422  000061                     disk_ioctl@buff:
  1423                           	opt stack 0
  1424                           
  1425                           ; 2 bytes @ 0x1
  1426  000061                     	ds	1
  1427  000062                     ??_strlen:
  1428  000062                     ??_disk_status:
  1429  000062                     dummy_clocks@n:
  1430                           	opt stack 0
  1431  000062                     escreve_cmd_lcd@comando:
  1432                           	opt stack 0
  1433  000062                     endereco_cursor_lcd@endereco:
  1434                           	opt stack 0
  1435  000062                     escreve_caractere_lcd@data:
  1436                           	opt stack 0
  1437  000062                     f_mount@drv:
  1438                           	opt stack 0
  1439  000062                     isdigit@c:
  1440                           	opt stack 0
  1441  000062                     ___wmul@multiplicand:
  1442                           	opt stack 0
  1443  000062                     ___lwdiv@divisor:
  1444                           	opt stack 0
  1445  000062                     ___lwmod@divisor:
  1446                           	opt stack 0
  1447  000062                     memcmp@s2:
  1448                           	opt stack 0
  1449  000062                     memcpy@s1:
  1450                           	opt stack 0
  1451  000062                     memset@c:
  1452                           	opt stack 0
  1453                           
  1454                           ; 2 bytes @ 0x2
  1455  000062                     	ds	1
  1456  000063                     ??_init_lcd:
  1457  000063                     disk_ioctl@pdrv:
  1458                           	opt stack 0
  1459  000063                     posicao_cursor_lcd@coluna:
  1460                           	opt stack 0
  1461  000063                     dummy_clocks@i:
  1462                           	opt stack 0
  1463  000063                     disk_status@result:
  1464                           	opt stack 0
  1465  000063                     escreve_frase_ram_lcd@buffer:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x3
  1469  000063                     	ds	1
  1470  000064                     ??_get_fattime:
  1471  000064                     wait_ready@res:
  1472                           	opt stack 0
  1473  000064                     disk_ioctl@res:
  1474                           	opt stack 0
  1475  000064                     posicao_cursor_lcd@linha:
  1476                           	opt stack 0
  1477  000064                     ___lwdiv@counter:
  1478                           	opt stack 0
  1479  000064                     ___lwmod@counter:
  1480                           	opt stack 0
  1481  000064                     ___wmul@product:
  1482                           	opt stack 0
  1483  000064                     memcmp@n:
  1484                           	opt stack 0
  1485  000064                     memcpy@n:
  1486                           	opt stack 0
  1487  000064                     memset@n:
  1488                           	opt stack 0
  1489  000064                     strlen@cp:
  1490                           	opt stack 0
  1491  000064                     ___lmul@multiplicand:
  1492                           	opt stack 0
  1493  000064                     ___aldiv@divisor:
  1494                           	opt stack 0
  1495  000064                     ___lldiv@divisor:
  1496                           	opt stack 0
  1497  000064                     ___llmod@divisor:
  1498                           	opt stack 0
  1499                           
  1500                           ; 4 bytes @ 0x4
  1501  000064                     	ds	1
  1502  000065                     disk_status@pdrv:
  1503                           	opt stack 0
  1504  000065                     posicao_cursor_lcd@endereco:
  1505                           	opt stack 0
  1506  000065                     ___lwdiv@quotient:
  1507                           	opt stack 0
  1508  000065                     command@arg:
  1509                           	opt stack 0
  1510                           
  1511                           ; 4 bytes @ 0x5
  1512  000065                     	ds	1
  1513  000066                     ??_troca_de_tela:
  1514  000066                     ??_mensagem_inicial:
  1515  000066                     ??_memcmp:
  1516  000066                     ?_atoi:
  1517                           	opt stack 0
  1518  000066                     disk_status@stat:
  1519                           	opt stack 0
  1520  000066                     memcpy@tmp:
  1521                           	opt stack 0
  1522  000066                     monta_sd@dado:
  1523                           	opt stack 0
  1524  000066                     atoi@s:
  1525                           	opt stack 0
  1526  000066                     memset@p:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x6
  1530  000066                     	ds	1
  1531  000067                     validate@fs:
  1532                           	opt stack 0
  1533  000067                     utoa@buf:
  1534                           	opt stack 0
  1535  000067                     memcpy@d:
  1536                           	opt stack 0
  1537                           
  1538                           ; 2 bytes @ 0x7
  1539  000067                     	ds	1
  1540  000068                     ??_atoi:
  1541  000068                     monta_sd@index:
  1542                           	opt stack 0
  1543  000068                     ___aldiv@counter:
  1544                           	opt stack 0
  1545  000068                     ___llmod@counter:
  1546                           	opt stack 0
  1547  000068                     make_dirfile@path:
  1548                           	opt stack 0
  1549  000068                     ___lmul@product:
  1550                           	opt stack 0
  1551  000068                     ___lldiv@quotient:
  1552                           	opt stack 0
  1553  000068                     mensagem_inicial@msg_linha_um:
  1554                           	opt stack 0
  1555                           
  1556                           ; 17 bytes @ 0x8
  1557  000068                     	ds	1
  1558  000069                     command@CRC:
  1559                           	opt stack 0
  1560  000069                     monta_sd@size:
  1561                           	opt stack 0
  1562  000069                     ___aldiv@sign:
  1563                           	opt stack 0
  1564  000069                     validate@id:
  1565                           	opt stack 0
  1566  000069                     utoa@val:
  1567                           	opt stack 0
  1568  000069                     memcpy@s:
  1569                           	opt stack 0
  1570                           
  1571                           ; 2 bytes @ 0x9
  1572  000069                     	ds	1
  1573  00006A                     command@CMD:
  1574                           	opt stack 0
  1575  00006A                     monta_sd@i:
  1576                           	opt stack 0
  1577  00006A                     atoi@sign:
  1578                           	opt stack 0
  1579  00006A                     make_dirfile@dirname:
  1580                           	opt stack 0
  1581  00006A                     ___aldiv@quotient:
  1582                           	opt stack 0
  1583                           
  1584                           ; 4 bytes @ 0xA
  1585  00006A                     	ds	1
  1586  00006B                     ??_validate:
  1587  00006B                     command@argument:
  1588                           	opt stack 0
  1589  00006B                     atoi@a:
  1590                           	opt stack 0
  1591  00006B                     utoa@base:
  1592                           	opt stack 0
  1593                           
  1594                           ; 2 bytes @ 0xB
  1595  00006B                     	ds	1
  1596  00006C                     ??_make_dirfile:
  1597  00006C                     ?_clust2sect:
  1598                           	opt stack 0
  1599  00006C                     ___lldiv@counter:
  1600                           	opt stack 0
  1601  00006C                     sdc_reset@i:
  1602                           	opt stack 0
  1603  00006C                     sdc_disk_read@p_buff:
  1604                           	opt stack 0
  1605  00006C                     sdc_disk_write@p_buff:
  1606                           	opt stack 0
  1607  00006C                     clust2sect@clust:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0xC
  1611  00006C                     	ds	1
  1612  00006D                     utoa@v:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0xD
  1616  00006D                     	ds	1
  1617  00006E                     sdc_reset@count_nosd:
  1618                           	opt stack 0
  1619  00006E                     _make_dirfile$2123:
  1620                           	opt stack 0
  1621  00006E                     sdc_disk_read@sector:
  1622                           	opt stack 0
  1623  00006E                     sdc_disk_write@sector:
  1624                           	opt stack 0
  1625  00006E                     configura_baudrate_uart@baudrate:
  1626                           	opt stack 0
  1627                           
  1628                           ; 4 bytes @ 0xE
  1629  00006E                     	ds	1
  1630  00006F                     utoa@c:
  1631                           	opt stack 0
  1632                           
  1633                           ; 1 bytes @ 0xF
  1634  00006F                     	ds	1
  1635  000070                     ??_clust2sect:
  1636  000070                     make_dirfile@b:
  1637                           	opt stack 0
  1638  000070                     sdc_reset@count:
  1639                           	opt stack 0
  1640  000070                     itoa@buf:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x10
  1644  000070                     	ds	1
  1645  000071                     make_dirfile@t:
  1646                           	opt stack 0
  1647                           
  1648                           ; 1 bytes @ 0x11
  1649  000071                     	ds	1
  1650  000072                     ??_configura_baudrate_uart:
  1651  000072                     sdc_reset@buff:
  1652                           	opt stack 0
  1653  000072                     sdc_disk_read@count:
  1654                           	opt stack 0
  1655  000072                     sdc_disk_write@count:
  1656                           	opt stack 0
  1657  000072                     make_dirfile@a:
  1658                           	opt stack 0
  1659  000072                     itoa@val:
  1660                           	opt stack 0
  1661                           
  1662                           ; 2 bytes @ 0x12
  1663  000072                     	ds	1
  1664  000073                     ??_sdc_disk_initialize:
  1665  000073                     ??_sdc_disk_read:
  1666  000073                     ??_sdc_disk_write:
  1667  000073                     make_dirfile@n:
  1668                           	opt stack 0
  1669                           
  1670                           ; 1 bytes @ 0x13
  1671  000073                     	ds	1
  1672  000074                     make_dirfile@c:
  1673                           	opt stack 0
  1674  000074                     sdc_disk_initialize@i:
  1675                           	opt stack 0
  1676  000074                     itoa@base:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0x14
  1680  000074                     	ds	1
  1681  000075                     clust2sect@fs:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0x15
  1685  000075                     	ds	1
  1686  000076                     sdc_disk_initialize@stat:
  1687                           	opt stack 0
  1688  000076                     itoa@cp:
  1689                           	opt stack 0
  1690                           
  1691                           ; 2 bytes @ 0x16
  1692  000076                     	ds	1
  1693  000077                     sdc_disk_read@ptr:
  1694                           	opt stack 0
  1695  000077                     sdc_disk_initialize@count1:
  1696                           	opt stack 0
  1697  000077                     sdc_disk_write@i:
  1698                           	opt stack 0
  1699                           
  1700                           ; 2 bytes @ 0x17
  1701  000077                     	ds	1
  1702  000078                     escreve_inteiro_lcd@valor:
  1703                           	opt stack 0
  1704  000078                     sdc_disk_read@start_add:
  1705                           	opt stack 0
  1706                           
  1707                           ; 4 bytes @ 0x18
  1708  000078                     	ds	1
  1709  000079                     sdc_disk_initialize@crc_number:
  1710                           	opt stack 0
  1711  000079                     sdc_disk_write@count1:
  1712                           	opt stack 0
  1713  000079                     mensagem_inicial@msg_dois:
  1714                           	opt stack 0
  1715                           
  1716                           ; 17 bytes @ 0x19
  1717  000079                     	ds	1
  1718  00007A                     configura_baudrate_uart@x:
  1719                           	opt stack 0
  1720  00007A                     escreve_inteiro_lcd@texto:
  1721                           	opt stack 0
  1722                           
  1723                           ; 7 bytes @ 0x1A
  1724  00007A                     	ds	1
  1725  00007B                     sdc_disk_initialize@buff_i:
  1726                           	opt stack 0
  1727  00007B                     sdc_disk_write@res:
  1728                           	opt stack 0
  1729                           
  1730                           ; 1 bytes @ 0x1B
  1731  00007B                     	ds	1
  1732  00007C                     sdc_disk_initialize@ocr:
  1733                           	opt stack 0
  1734  00007C                     sdc_disk_read@length:
  1735                           	opt stack 0
  1736  00007C                     sdc_disk_write@j:
  1737                           	opt stack 0
  1738                           
  1739                           ; 2 bytes @ 0x1C
  1740  00007C                     	ds	1
  1741  00007D                     sdc_disk_initialize@count2:
  1742                           	opt stack 0
  1743                           
  1744                           ; 2 bytes @ 0x1D
  1745  00007D                     	ds	1
  1746  00007E                     sdc_disk_read@buff:
  1747                           	opt stack 0
  1748  00007E                     sdc_disk_write@buff:
  1749                           	opt stack 0
  1750                           
  1751                           ; 1 bytes @ 0x1E
  1752  00007E                     	ds	1
  1753  00007F                     sdc_disk_initialize@buff:
  1754                           	opt stack 0
  1755  00007F                     disk_read@buff:
  1756                           	opt stack 0
  1757  00007F                     disk_write@buff:
  1758                           	opt stack 0
  1759                           
  1760                           ; 2 bytes @ 0x1F
  1761  00007F                     	ds	1
  1762  000080                     disk_initialize@pdrv:
  1763                           	opt stack 0
  1764                           
  1765                           ; 1 bytes @ 0x20
  1766  000080                     	ds	1
  1767  000081                     ??_verifica_fence_externo:
  1768  000081                     disk_initialize@stat:
  1769                           	opt stack 0
  1770  000081                     disk_read@sector:
  1771                           	opt stack 0
  1772  000081                     disk_write@sector:
  1773                           	opt stack 0
  1774                           
  1775                           ; 4 bytes @ 0x21
  1776  000081                     	ds	4
  1777  000085                     disk_read@count:
  1778                           	opt stack 0
  1779  000085                     disk_write@count:
  1780                           	opt stack 0
  1781                           
  1782                           ; 1 bytes @ 0x25
  1783  000085                     	ds	1
  1784  000086                     ??_disk_read:
  1785  000086                     ??_disk_write:
  1786                           
  1787                           ; 1 bytes @ 0x26
  1788  000086                     	ds	1
  1789  000087                     disk_read@pdrv:
  1790                           	opt stack 0
  1791  000087                     disk_write@pdrv:
  1792                           	opt stack 0
  1793                           
  1794                           ; 1 bytes @ 0x27
  1795  000087                     	ds	1
  1796  000088                     disk_read@result:
  1797                           	opt stack 0
  1798  000088                     disk_write@result:
  1799                           	opt stack 0
  1800                           
  1801                           ; 2 bytes @ 0x28
  1802  000088                     	ds	2
  1803  00008A                     disk_read@res:
  1804                           	opt stack 0
  1805  00008A                     disk_write@res:
  1806                           	opt stack 0
  1807  00008A                     get_fattime@f_time:
  1808                           	opt stack 0
  1809                           
  1810                           ; 9 bytes @ 0x2A
  1811  00008A                     	ds	1
  1812  00008B                     move_window@sector:
  1813                           	opt stack 0
  1814  00008B                     check_fs@sect:
  1815                           	opt stack 0
  1816                           
  1817                           ; 4 bytes @ 0x2B
  1818  00008B                     	ds	4
  1819  00008F                     ??_move_window:
  1820  00008F                     
  1821                           ; 1 bytes @ 0x2F
  1822  00008F                     	ds	2
  1823  000091                     check_fs@fs:
  1824                           	opt stack 0
  1825                           
  1826                           ; 2 bytes @ 0x31
  1827  000091                     	ds	2
  1828  000093                     auto_mount@path:
  1829                           	opt stack 0
  1830                           
  1831                           ; 2 bytes @ 0x33
  1832  000093                     	ds	2
  1833  000095                     auto_mount@chk_wp:
  1834                           	opt stack 0
  1835                           
  1836                           ; 1 bytes @ 0x35
  1837  000095                     	ds	1
  1838  000096                     ??_auto_mount:
  1839                           
  1840                           ; 1 bytes @ 0x36
  1841  000096                     	ds	3
  1842  000099                     move_window@n:
  1843                           	opt stack 0
  1844                           
  1845                           ; 1 bytes @ 0x39
  1846  000099                     	ds	1
  1847  00009A                     move_window@wsect:
  1848                           	opt stack 0
  1849                           
  1850                           ; 4 bytes @ 0x3A
  1851  00009A                     	ds	4
  1852  00009E                     move_window@fs:
  1853                           	opt stack 0
  1854                           
  1855                           ; 2 bytes @ 0x3E
  1856  00009E                     	ds	2
  1857  0000A0                     ?_get_cluster:
  1858                           	opt stack 0
  1859  0000A0                     sync@fs:
  1860                           	opt stack 0
  1861  0000A0                     get_cluster@clust:
  1862                           	opt stack 0
  1863  0000A0                     put_cluster@clust:
  1864                           	opt stack 0
  1865                           
  1866                           ; 2 bytes @ 0x40
  1867  0000A0                     	ds	2
  1868  0000A2                     ??_get_cluster:
  1869  0000A2                     put_cluster@val:
  1870                           	opt stack 0
  1871  0000A2                     f_sync@fp:
  1872                           	opt stack 0
  1873                           
  1874                           ; 2 bytes @ 0x42
  1875  0000A2                     	ds	2
  1876  0000A4                     ??_put_cluster:
  1877  0000A4                     f_sync@tim:
  1878                           	opt stack 0
  1879                           
  1880                           ; 4 bytes @ 0x44
  1881  0000A4                     	ds	1
  1882  0000A5                     auto_mount@maxclust:
  1883                           	opt stack 0
  1884                           
  1885                           ; 4 bytes @ 0x45
  1886  0000A5                     	ds	3
  1887  0000A8                     f_sync@res:
  1888                           	opt stack 0
  1889  0000A8                     _put_cluster$2013:
  1890                           	opt stack 0
  1891                           
  1892                           ; 2 bytes @ 0x48
  1893  0000A8                     	ds	1
  1894  0000A9                     get_cluster@wc:
  1895                           	opt stack 0
  1896  0000A9                     f_sync@dir:
  1897                           	opt stack 0
  1898  0000A9                     auto_mount@bootsect:
  1899                           	opt stack 0
  1900                           
  1901                           ; 4 bytes @ 0x49
  1902  0000A9                     	ds	1
  1903  0000AA                     _put_cluster$2014:
  1904                           	opt stack 0
  1905                           
  1906                           ; 2 bytes @ 0x4A
  1907  0000AA                     	ds	1
  1908  0000AB                     f_close@fp:
  1909                           	opt stack 0
  1910  0000AB                     get_cluster@fatsect:
  1911                           	opt stack 0
  1912                           
  1913                           ; 4 bytes @ 0x4B
  1914  0000AB                     	ds	1
  1915  0000AC                     put_cluster@fatsect:
  1916                           	opt stack 0
  1917                           
  1918                           ; 4 bytes @ 0x4C
  1919  0000AC                     	ds	1
  1920  0000AD                     f_close@res:
  1921                           	opt stack 0
  1922  0000AD                     auto_mount@totalsect:
  1923                           	opt stack 0
  1924                           
  1925                           ; 4 bytes @ 0x4D
  1926  0000AD                     	ds	2
  1927  0000AF                     get_cluster@bc:
  1928                           	opt stack 0
  1929                           
  1930                           ; 2 bytes @ 0x4F
  1931  0000AF                     	ds	1
  1932  0000B0                     put_cluster@bc:
  1933                           	opt stack 0
  1934                           
  1935                           ; 2 bytes @ 0x50
  1936  0000B0                     	ds	1
  1937  0000B1                     get_cluster@fs:
  1938                           	opt stack 0
  1939  0000B1                     auto_mount@p:
  1940                           	opt stack 0
  1941                           
  1942                           ; 2 bytes @ 0x51
  1943  0000B1                     	ds	1
  1944  0000B2                     put_cluster@p:
  1945                           	opt stack 0
  1946                           
  1947                           ; 2 bytes @ 0x52
  1948  0000B2                     	ds	1
  1949  0000B3                     auto_mount@fmt:
  1950                           	opt stack 0
  1951  0000B3                     next_dir_entry@dj:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x53
  1955  0000B3                     	ds	1
  1956  0000B4                     auto_mount@stat:
  1957                           	opt stack 0
  1958  0000B4                     put_cluster@fs:
  1959                           	opt stack 0
  1960                           
  1961                           ; 2 bytes @ 0x54
  1962  0000B4                     	ds	1
  1963  0000B5                     ??_next_dir_entry:
  1964  0000B5                     auto_mount@fatsize:
  1965                           	opt stack 0
  1966                           
  1967                           ; 4 bytes @ 0x55
  1968  0000B5                     	ds	1
  1969  0000B6                     ?_create_chain:
  1970                           	opt stack 0
  1971  0000B6                     remove_chain@clust:
  1972                           	opt stack 0
  1973  0000B6                     create_chain@clust:
  1974                           	opt stack 0
  1975                           
  1976                           ; 2 bytes @ 0x56
  1977  0000B6                     	ds	2
  1978  0000B8                     
  1979                           ; 1 bytes @ 0x58
  1980  0000B8                     	ds	1
  1981  0000B9                     auto_mount@fs:
  1982                           	opt stack 0
  1983                           
  1984                           ; 2 bytes @ 0x59
  1985  0000B9                     	ds	1
  1986  0000BA                     remove_chain@nxt:
  1987                           	opt stack 0
  1988  0000BA                     create_chain@mcl:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x5A
  1992  0000BA                     	ds	2
  1993  0000BC                     remove_chain@fs:
  1994                           	opt stack 0
  1995  0000BC                     create_chain@fs:
  1996                           	opt stack 0
  1997  0000BC                     next_dir_entry@clust:
  1998                           	opt stack 0
  1999                           
  2000                           ; 2 bytes @ 0x5C
  2001  0000BC                     	ds	2
  2002  0000BE                     create_chain@cstat:
  2003                           	opt stack 0
  2004  0000BE                     next_dir_entry@idx:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0x5E
  2008  0000BE                     	ds	2
  2009  0000C0                     create_chain@scl:
  2010                           	opt stack 0
  2011  0000C0                     trace_path@dj:
  2012                           	opt stack 0
  2013                           
  2014                           ; 2 bytes @ 0x60
  2015  0000C0                     	ds	2
  2016  0000C2                     create_chain@ncl:
  2017                           	opt stack 0
  2018  0000C2                     trace_path@fn:
  2019                           	opt stack 0
  2020                           
  2021                           ; 2 bytes @ 0x62
  2022  0000C2                     	ds	2
  2023  0000C4                     trace_path@path:
  2024                           	opt stack 0
  2025  0000C4                     reserve_direntry@dj:
  2026                           	opt stack 0
  2027  0000C4                     f_write@fp:
  2028                           	opt stack 0
  2029  0000C4                     f_lseek@fp:
  2030                           	opt stack 0
  2031                           
  2032                           ; 2 bytes @ 0x64
  2033  0000C4                     	ds	2
  2034  0000C6                     trace_path@dir:
  2035                           	opt stack 0
  2036  0000C6                     reserve_direntry@dir:
  2037                           	opt stack 0
  2038  0000C6                     f_write@buff:
  2039                           	opt stack 0
  2040  0000C6                     f_lseek@ofs:
  2041                           	opt stack 0
  2042                           
  2043                           ; 4 bytes @ 0x66
  2044  0000C6                     	ds	2
  2045  0000C8                     ??_trace_path:
  2046  0000C8                     ??_reserve_direntry:
  2047  0000C8                     f_write@btw:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x68
  2051  0000C8                     	ds	2
  2052  0000CA                     ??_f_lseek:
  2053  0000CA                     f_write@bw:
  2054                           	opt stack 0
  2055  0000CA                     reserve_direntry@sector:
  2056                           	opt stack 0
  2057                           
  2058                           ; 4 bytes @ 0x6A
  2059  0000CA                     	ds	2
  2060  0000CC                     ??_f_write:
  2061  0000CC                     _trace_path$2170:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x6C
  2065  0000CC                     	ds	2
  2066  0000CE                     reserve_direntry@n:
  2067                           	opt stack 0
  2068  0000CE                     _trace_path$2172:
  2069                           	opt stack 0
  2070                           
  2071                           ; 2 bytes @ 0x6E
  2072  0000CE                     	ds	1
  2073  0000CF                     reserve_direntry@dptr:
  2074                           	opt stack 0
  2075                           
  2076                           ; 2 bytes @ 0x6F
  2077  0000CF                     	ds	1
  2078  0000D0                     trace_path@fs:
  2079                           	opt stack 0
  2080                           
  2081                           ; 2 bytes @ 0x70
  2082  0000D0                     	ds	1
  2083  0000D1                     reserve_direntry@c:
  2084                           	opt stack 0
  2085                           
  2086                           ; 1 bytes @ 0x71
  2087  0000D1                     	ds	1
  2088  0000D2                     trace_path@clust:
  2089                           	opt stack 0
  2090  0000D2                     reserve_direntry@clust:
  2091                           	opt stack 0
  2092                           
  2093                           ; 2 bytes @ 0x72
  2094  0000D2                     	ds	2
  2095  0000D4                     trace_path@ds:
  2096                           	opt stack 0
  2097  0000D4                     reserve_direntry@fs:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0x74
  2101  0000D4                     	ds	1
  2102  0000D5                     trace_path@dptr:
  2103                           	opt stack 0
  2104                           
  2105                           ; 2 bytes @ 0x75
  2106  0000D5                     	ds	1
  2107  0000D6                     f_lseek@res:
  2108                           	opt stack 0
  2109                           
  2110                           ; 1 bytes @ 0x76
  2111  0000D6                     	ds	1
  2112  0000D7                     f_open@fp:
  2113                           	opt stack 0
  2114  0000D7                     f_lseek@ifptr:
  2115                           	opt stack 0
  2116                           
  2117                           ; 4 bytes @ 0x77
  2118  0000D7                     	ds	1
  2119  0000D8                     f_write@res:
  2120                           	opt stack 0
  2121                           
  2122                           ; 1 bytes @ 0x78
  2123  0000D8                     	ds	1
  2124  0000D9                     f_open@path:
  2125                           	opt stack 0
  2126  0000D9                     f_write@wbuff:
  2127                           	opt stack 0
  2128                           
  2129                           ; 2 bytes @ 0x79
  2130  0000D9                     	ds	2
  2131  0000DB                     f_open@mode:
  2132                           	opt stack 0
  2133  0000DB                     f_write@sect:
  2134                           	opt stack 0
  2135  0000DB                     f_lseek@csize:
  2136                           	opt stack 0
  2137                           
  2138                           ; 4 bytes @ 0x7B
  2139  0000DB                     	ds	1
  2140  0000DC                     ??_f_open:
  2141                           
  2142                           ; 1 bytes @ 0x7C
  2143  0000DC                     	ds	3
  2144  0000DF                     f_write@cc:
  2145                           	opt stack 0
  2146  0000DF                     f_lseek@clust:
  2147                           	opt stack 0
  2148                           
  2149                           ; 2 bytes @ 0x7F
  2150  0000DF                     	ds	2
  2151  0000E1                     f_write@clust:
  2152                           	opt stack 0
  2153                           
  2154                           ; 2 bytes @ 0x81
  2155  0000E1                     	ds	2
  2156  0000E3                     f_write@wcnt:
  2157                           	opt stack 0
  2158                           
  2159                           ; 2 bytes @ 0x83
  2160  0000E3                     	ds	2
  2161  0000E5                     ?_fputc:
  2162                           	opt stack 0
  2163  0000E5                     fputc@chr:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x85
  2167  0000E5                     	ds	2
  2168  0000E7                     fputc@fil:
  2169                           	opt stack 0
  2170                           
  2171                           ; 2 bytes @ 0x87
  2172  0000E7                     	ds	2
  2173  0000E9                     fputc@c:
  2174                           	opt stack 0
  2175                           
  2176                           ; 1 bytes @ 0x89
  2177  0000E9                     	ds	1
  2178  0000EA                     fputc@bw:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0x8A
  2182  0000EA                     	ds	2
  2183  0000EC                     ?_fputs:
  2184                           	opt stack 0
  2185  0000EC                     fputs@str:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x8C
  2189  0000EC                     	ds	2
  2190  0000EE                     fputs@fil:
  2191                           	opt stack 0
  2192                           
  2193                           ; 2 bytes @ 0x8E
  2194  0000EE                     	ds	2
  2195  0000F0                     ??_fputs:
  2196                           
  2197                           ; 1 bytes @ 0x90
  2198  0000F0                     	ds	1
  2199  0000F1                     fputs@n:
  2200                           	opt stack 0
  2201                           
  2202                           ; 2 bytes @ 0x91
  2203  0000F1                     	ds	2
  2204  0000F3                     ??_fprintf:
  2205                           
  2206                           ; 1 bytes @ 0x93
  2207  0000F3                     	ds	2
  2208  0000F5                     escalonador@cont:
  2209                           	opt stack 0
  2210                           
  2211                           ; 1 bytes @ 0x95
  2212  0000F5                     	ds	1
  2213  0000F6                     tblptru	equ	0xFF8
  2214                           tblptrh	equ	0xFF7
  2215                           tblptrl	equ	0xFF6
  2216                           tablat	equ	0xFF5
  2217                           postinc0	equ	0xFEE
  2218                           wreg	equ	0xFE8
  2219                           postdec1	equ	0xFE5
  2220                           fsr1h	equ	0xFE2
  2221                           fsr1l	equ	0xFE1
  2222                           
  2223                           ; 1 bytes @ 0x96
  2224                           
  2225                           	psect	cstackCOMRAM
  2226  000001                     __pcstackCOMRAM:
  2227                           	opt stack 0
  2228  000001                     ?_strcmp:
  2229                           	opt stack 0
  2230  000001                     stringcpy@str1:
  2231                           	opt stack 0
  2232  000001                     strcmp@s1:
  2233                           	opt stack 0
  2234  000001                     i2write_timer_zero@timer0:
  2235                           	opt stack 0
  2236                           
  2237                           ; 2 bytes @ 0x0
  2238  000001                     	ds	2
  2239  000003                     stringcpy@str2:
  2240                           	opt stack 0
  2241  000003                     strcmp@s2:
  2242                           	opt stack 0
  2243                           
  2244                           ; 2 bytes @ 0x2
  2245  000003                     	ds	2
  2246  000005                     ??_strcmp:
  2247  000005                     stringcpy@dir:
  2248                           	opt stack 0
  2249                           
  2250                           ; 2 bytes @ 0x4
  2251  000005                     	ds	1
  2252  000006                     strcmp@r:
  2253                           	opt stack 0
  2254                           
  2255                           ; 1 bytes @ 0x5
  2256  000006                     	ds	1
  2257  000007                     ??_stringcpy:
  2258                           
  2259                           ; 1 bytes @ 0x6
  2260  000007                     	ds	2
  2261  000009                     stringcpy@chr:
  2262                           	opt stack 0
  2263                           
  2264                           ; 1 bytes @ 0x8
  2265  000009                     	ds	1
  2266  00000A                     ??_GPSRead:
  2267                           
  2268                           ; 1 bytes @ 0x9
  2269  00000A                     	ds	2
  2270  00000C                     GPSRead@buff:
  2271                           	opt stack 0
  2272                           
  2273                           ; 1 bytes @ 0xB
  2274  00000C                     	ds	1
  2275  00000D                     GPSRead@c:
  2276                           	opt stack 0
  2277                           
  2278                           ; 1 bytes @ 0xC
  2279  00000D                     	ds	1
  2280  00000E                     ??_isr:
  2281                           
  2282                           ; 1 bytes @ 0xD
  2283  00000E                     	ds	20
  2284  000022                     isr@cont:
  2285                           	opt stack 0
  2286                           
  2287                           ; 1 bytes @ 0x21
  2288  000022                     	ds	1
  2289                           tblptru	equ	0xFF8
  2290                           tblptrh	equ	0xFF7
  2291                           tblptrl	equ	0xFF6
  2292                           tablat	equ	0xFF5
  2293                           postinc0	equ	0xFEE
  2294                           wreg	equ	0xFE8
  2295                           postdec1	equ	0xFE5
  2296                           fsr1h	equ	0xFE2
  2297                           fsr1l	equ	0xFE1
  2298                           
  2299 ;;
  2300 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2301 ;;
  2302 ;; *************** function _main *****************
  2303 ;; Defined at:
  2304 ;;		line 215 in file "main.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;		None
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;		None
  2309 ;; Return value:  Size  Location     Type
  2310 ;;                  1    wreg      void 
  2311 ;; Registers used:
  2312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2313 ;; Tracked objects:
  2314 ;;		On entry : 0/0
  2315 ;;		On exit  : 0/0
  2316 ;;		Unchanged: 0/0
  2317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2318 ;;      Params:         0       0       0       0       0       0       0       0       0
  2319 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2320 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2321 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2322 ;;Total ram usage:        0 bytes
  2323 ;; Hardware stack levels required when called:   18
  2324 ;; This function calls:
  2325 ;;		_dados_gps_to_sd
  2326 ;;		_escalonador
  2327 ;;		_inicializa_tarefas
  2328 ;;		_inicializa_uart
  2329 ;;		_init_hardware
  2330 ;;		_init_lcd
  2331 ;;		_mensagem_inicial
  2332 ;; This function is called by:
  2333 ;;		Startup code after reset
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           	psect	text0
  2338  0055C6                     __ptext0:
  2339                           	opt stack 0
  2340  0055C6                     _main:
  2341                           	opt stack 13
  2342                           
  2343                           ;main.c: 217: init_hardware();
  2344                           
  2345                           ;incstack = 0
  2346  0055C6  ECAA  F02B         	call	_init_hardware	;wreg free
  2347                           
  2348                           ;main.c: 218: T0CONbits.TMR0ON = 0;
  2349  0055CA  9ED5               	bcf	4053,7,c	;volatile
  2350                           
  2351                           ;main.c: 219: init_lcd();
  2352  0055CC  EC04  F024         	call	_init_lcd	;wreg free
  2353                           
  2354                           ;main.c: 220: mensagem_inicial();
  2355  0055D0  ECFD  F025         	call	_mensagem_inicial	;wreg free
  2356                           
  2357                           ;main.c: 221: inicializa_tarefas();
  2358  0055D4  EC77  F027         	call	_inicializa_tarefas	;wreg free
  2359                           
  2360                           ;main.c: 222: inicializa_uart();
  2361  0055D8  EC4F  F02B         	call	_inicializa_uart	;wreg free
  2362                           
  2363                           ;main.c: 223: T0CONbits.TMR0ON = 1;
  2364  0055DC  8ED5               	bsf	4053,7,c	;volatile
  2365  0055DE                     
  2366                           ;main.c: 225: {
  2367                           ;main.c: 227: if ((sinaliza_int_timer == 1) && (4))
  2368  0055DE  0100               	movlb	0	; () banked
  2369  0055E0  05FF               	decf	_sinaliza_int_timer& (0+255),w,b
  2370  0055E2  A4D8               	btfss	status,2,c
  2371  0055E4  D004               	goto	l120
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;main.c: 228: {
  2375                           ;main.c: 229: sinaliza_int_timer = 0;
  2376  0055E6  0E00               	movlw	0
  2377  0055E8  6FFF               	movwf	_sinaliza_int_timer& (0+255),b
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;main.c: 230: escalonador();
  2381  0055EA  EC0E  F023         	call	_escalonador	;wreg free
  2382  0055EE                     l120:
  2383                           
  2384                           ;main.c: 231: }
  2385                           ;main.c: 232: dados_gps_to_sd();
  2386  0055EE  EC30  F02A         	call	_dados_gps_to_sd	;wreg free
  2387  0055F2  D7F5               	goto	l119
  2388  0055F4                     __end_of_main:
  2389                           	opt stack 0
  2390                           tblptru	equ	0xFF8
  2391                           tblptrh	equ	0xFF7
  2392                           tblptrl	equ	0xFF6
  2393                           tablat	equ	0xFF5
  2394                           postinc0	equ	0xFEE
  2395                           wreg	equ	0xFE8
  2396                           postdec1	equ	0xFE5
  2397                           fsr1h	equ	0xFE2
  2398                           fsr1l	equ	0xFE1
  2399                           status	equ	0xFD8
  2400                           
  2401 ;; *************** function _mensagem_inicial *****************
  2402 ;; Defined at:
  2403 ;;		line 242 in file "main.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;		None
  2406 ;; Auto vars:     Size  Location     Type
  2407 ;;  msg_dois       17   25[BANK0 ] const unsigned char [17]
  2408 ;;  msg_linha_um   17    8[BANK0 ] const unsigned char [17]
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  1    wreg      void 
  2411 ;; Registers used:
  2412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2418 ;;      Params:         0       0       0       0       0       0       0       0       0
  2419 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2420 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2421 ;;      Totals:         0      36       0       0       0       0       0       0       0
  2422 ;;Total ram usage:       36 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    6
  2425 ;; This function calls:
  2426 ;;		_escreve_cmd_lcd
  2427 ;;		_escreve_frase_ram_lcd
  2428 ;;		_posicao_cursor_lcd
  2429 ;; This function is called by:
  2430 ;;		_main
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           	psect	text1
  2435  004BFA                     __ptext1:
  2436                           	opt stack 0
  2437  004BFA                     _mensagem_inicial:
  2438                           	opt stack 24
  2439                           
  2440                           ;main.c: 244: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  2441                           
  2442                           ;incstack = 0
  2443  004BFA  0EFC               	movlw	low mensagem_inicial@F4363
  2444  004BFC  6EF6               	movwf	tblptrl,c
  2445  004BFE                     	if	1	;There is more than 1 active tblptr byte
  2446  004BFE  0E60               	movlw	high mensagem_inicial@F4363
  2447  004C00  6EF7               	movwf	tblptrh,c
  2448  004C02                     	endif
  2449  004C02                     	if	0	;There are less than 3 active tblptr bytes
  2450  004C02                     	endif
  2451  004C02  EE20  F068         	lfsr	2,mensagem_inicial@msg_linha_um
  2452  004C06  0E10               	movlw	16
  2453  004C08                     u17140:
  2454  004C08  0009               	tblrd		*+
  2455  004C0A  CFF5 FFDE          	movff	tablat,postinc2
  2456  004C0E  06E8               	decf	wreg,f,c
  2457  004C10  E2FB               	bc	u17140
  2458                           
  2459                           ;main.c: 245: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  2460  004C12  0EEB               	movlw	low mensagem_inicial@F4365
  2461  004C14  6EF6               	movwf	tblptrl,c
  2462  004C16                     	if	1	;There is more than 1 active tblptr byte
  2463  004C16  0E60               	movlw	high mensagem_inicial@F4365
  2464  004C18  6EF7               	movwf	tblptrh,c
  2465  004C1A                     	endif
  2466  004C1A                     	if	0	;There are less than 3 active tblptr bytes
  2467  004C1A                     	endif
  2468  004C1A  EE20  F079         	lfsr	2,mensagem_inicial@msg_dois
  2469  004C1E  0E10               	movlw	16
  2470  004C20                     u17150:
  2471  004C20  0009               	tblrd		*+
  2472  004C22  CFF5 FFDE          	movff	tablat,postinc2
  2473  004C26  06E8               	decf	wreg,f,c
  2474  004C28  E2FB               	bc	u17150
  2475                           
  2476                           ;main.c: 247: posicao_cursor_lcd(1,0);
  2477  004C2A  0E00               	movlw	0
  2478  004C2C  0100               	movlb	0	; () banked
  2479  004C2E  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2480  004C30  0E01               	movlw	1
  2481  004C32  ECC4  F026         	call	_posicao_cursor_lcd
  2482                           
  2483                           ;main.c: 248: escreve_frase_ram_lcd(msg_linha_um);
  2484  004C36  0E68               	movlw	low mensagem_inicial@msg_linha_um
  2485  004C38  0100               	movlb	0	; () banked
  2486  004C3A  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2487  004C3C  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2488  004C3E  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2489  004C40  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  2490                           
  2491                           ;main.c: 250: posicao_cursor_lcd(2,0);
  2492  004C44  0E00               	movlw	0
  2493  004C46  0100               	movlb	0	; () banked
  2494  004C48  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2495  004C4A  0E02               	movlw	2
  2496  004C4C  ECC4  F026         	call	_posicao_cursor_lcd
  2497                           
  2498                           ;main.c: 251: escreve_frase_ram_lcd(msg_dois);
  2499  004C50  0E79               	movlw	low mensagem_inicial@msg_dois
  2500  004C52  0100               	movlb	0	; () banked
  2501  004C54  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2502  004C56  0E00               	movlw	high mensagem_inicial@msg_dois
  2503  004C58  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2504  004C5A  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  2505                           
  2506                           ;main.c: 252: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2507  004C5E  0E3D               	movlw	61
  2508  004C60  0100               	movlb	0	; () banked
  2509  004C62  6F67               	movwf	(??_mensagem_inicial+1)& (0+255),b
  2510  004C64  0EE1               	movlw	225
  2511  004C66  6F66               	movwf	??_mensagem_inicial& (0+255),b
  2512  004C68  0E3F               	movlw	63
  2513  004C6A                     u17617:
  2514  004C6A  2EE8               	decfsz	wreg,f,c
  2515  004C6C  D7FE               	bra	u17617
  2516  004C6E  2F66               	decfsz	??_mensagem_inicial& (0+255),f,b
  2517  004C70  D7FC               	bra	u17617
  2518  004C72  2F67               	decfsz	(??_mensagem_inicial+1)& (0+255),f,b
  2519  004C74  D7FA               	bra	u17617
  2520  004C76  D000               	nop2	
  2521                           
  2522                           ;main.c: 253: escreve_cmd_lcd(0b00000001);
  2523  004C78  0E01               	movlw	1
  2524  004C7A  EC53  F024         	call	_escreve_cmd_lcd
  2525  004C7E  0012               	return		;funcret
  2526  004C80                     __end_of_mensagem_inicial:
  2527                           	opt stack 0
  2528                           tblptru	equ	0xFF8
  2529                           tblptrh	equ	0xFF7
  2530                           tblptrl	equ	0xFF6
  2531                           tablat	equ	0xFF5
  2532                           postinc0	equ	0xFEE
  2533                           wreg	equ	0xFE8
  2534                           postdec1	equ	0xFE5
  2535                           fsr1h	equ	0xFE2
  2536                           fsr1l	equ	0xFE1
  2537                           postinc2	equ	0xFDE
  2538                           status	equ	0xFD8
  2539                           
  2540 ;; *************** function _init_lcd *****************
  2541 ;; Defined at:
  2542 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;		None
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      void 
  2549 ;; Registers used:
  2550 ;;		wreg, status,2, status,0, cstack
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2556 ;;      Params:         0       0       0       0       0       0       0       0       0
  2557 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2558 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2559 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2560 ;;Total ram usage:        1 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    5
  2563 ;; This function calls:
  2564 ;;		_delay
  2565 ;;		_escreve_cmd_lcd
  2566 ;; This function is called by:
  2567 ;;		_main
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	text2
  2572  004808                     __ptext2:
  2573                           	opt stack 0
  2574  004808                     _init_lcd:
  2575                           	opt stack 25
  2576                           
  2577                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2578                           
  2579                           ;incstack = 0
  2580  004808  9495               	bcf	3989,2,c	;volatile
  2581                           
  2582                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2583  00480A  9295               	bcf	3989,1,c	;volatile
  2584                           
  2585                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2586  00480C  9095               	bcf	3989,0,c	;volatile
  2587                           
  2588                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2589  00480E  9895               	bcf	3989,4,c	;volatile
  2590                           
  2591                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2592  004810  9A95               	bcf	3989,5,c	;volatile
  2593                           
  2594                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2595  004812  9C95               	bcf	3989,6,c	;volatile
  2596                           
  2597                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2598  004814  9E95               	bcf	3989,7,c	;volatile
  2599                           
  2600                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2601  004816  9483               	bcf	3971,2,c	;volatile
  2602                           
  2603                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2604  004818  9283               	bcf	3971,1,c	;volatile
  2605                           
  2606                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2607  00481A  9083               	bcf	3971,0,c	;volatile
  2608                           
  2609                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2610  00481C  9E83               	bcf	3971,7,c	;volatile
  2611                           
  2612                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2613  00481E  9C83               	bcf	3971,6,c	;volatile
  2614                           
  2615                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2616  004820  8A83               	bsf	3971,5,c	;volatile
  2617                           
  2618                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2619  004822  8883               	bsf	3971,4,c	;volatile
  2620                           
  2621                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2622  004824  0EEA               	movlw	234
  2623  004826  0100               	movlb	0	; () banked
  2624  004828  6F63               	movwf	??_init_lcd& (0+255),b
  2625  00482A  0EC3               	movlw	195
  2626  00482C                     u17627:
  2627  00482C  2EE8               	decfsz	wreg,f,c
  2628  00482E  D7FE               	bra	u17627
  2629  004830  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2630  004832  D7FC               	bra	u17627
  2631                           
  2632                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2633  004834  8083               	bsf	3971,0,c	;volatile
  2634                           
  2635                           ;display_lcd.c: 108: delay();
  2636  004836  EC26  F02B         	call	_delay	;wreg free
  2637                           
  2638                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2639  00483A  9083               	bcf	3971,0,c	;volatile
  2640                           
  2641                           ;display_lcd.c: 110: delay();
  2642  00483C  EC26  F02B         	call	_delay	;wreg free
  2643                           
  2644                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2645  004840  0E4E               	movlw	78
  2646  004842  0100               	movlb	0	; () banked
  2647  004844  6F63               	movwf	??_init_lcd& (0+255),b
  2648  004846  0EEB               	movlw	235
  2649  004848                     u17637:
  2650  004848  2EE8               	decfsz	wreg,f,c
  2651  00484A  D7FE               	bra	u17637
  2652  00484C  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2653  00484E  D7FC               	bra	u17637
  2654                           
  2655                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2656  004850  8083               	bsf	3971,0,c	;volatile
  2657                           
  2658                           ;display_lcd.c: 119: delay();
  2659  004852  EC26  F02B         	call	_delay	;wreg free
  2660                           
  2661                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2662  004856  9083               	bcf	3971,0,c	;volatile
  2663                           
  2664                           ;display_lcd.c: 121: delay();
  2665  004858  EC26  F02B         	call	_delay	;wreg free
  2666                           
  2667                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2668  00485C  0E4E               	movlw	78
  2669  00485E  0100               	movlb	0	; () banked
  2670  004860  6F63               	movwf	??_init_lcd& (0+255),b
  2671  004862  0EEB               	movlw	235
  2672  004864                     u17647:
  2673  004864  2EE8               	decfsz	wreg,f,c
  2674  004866  D7FE               	bra	u17647
  2675  004868  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2676  00486A  D7FC               	bra	u17647
  2677                           
  2678                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2679  00486C  8083               	bsf	3971,0,c	;volatile
  2680                           
  2681                           ;display_lcd.c: 130: delay();
  2682  00486E  EC26  F02B         	call	_delay	;wreg free
  2683                           
  2684                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2685  004872  9083               	bcf	3971,0,c	;volatile
  2686                           
  2687                           ;display_lcd.c: 132: delay();
  2688  004874  EC26  F02B         	call	_delay	;wreg free
  2689                           
  2690                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2691  004878  9E83               	bcf	3971,7,c	;volatile
  2692                           
  2693                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2694  00487A  9C83               	bcf	3971,6,c	;volatile
  2695                           
  2696                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2697  00487C  8A83               	bsf	3971,5,c	;volatile
  2698                           
  2699                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2700  00487E  9883               	bcf	3971,4,c	;volatile
  2701                           
  2702                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2703  004880  8083               	bsf	3971,0,c	;volatile
  2704                           
  2705                           ;display_lcd.c: 143: delay();
  2706  004882  EC26  F02B         	call	_delay	;wreg free
  2707                           
  2708                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2709  004886  9083               	bcf	3971,0,c	;volatile
  2710                           
  2711                           ;display_lcd.c: 145: delay();
  2712  004888  EC26  F02B         	call	_delay	;wreg free
  2713                           
  2714                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2715  00488C  0E28               	movlw	40
  2716  00488E  EC53  F024         	call	_escreve_cmd_lcd
  2717                           
  2718                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2719  004892  0E06               	movlw	6
  2720  004894  EC53  F024         	call	_escreve_cmd_lcd
  2721                           
  2722                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2723  004898  0E0E               	movlw	14
  2724  00489A  EC53  F024         	call	_escreve_cmd_lcd
  2725                           
  2726                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2727  00489E  0E01               	movlw	1
  2728  0048A0  EC53  F024         	call	_escreve_cmd_lcd
  2729  0048A4  0012               	return		;funcret
  2730  0048A6                     __end_of_init_lcd:
  2731                           	opt stack 0
  2732                           tblptru	equ	0xFF8
  2733                           tblptrh	equ	0xFF7
  2734                           tblptrl	equ	0xFF6
  2735                           tablat	equ	0xFF5
  2736                           postinc0	equ	0xFEE
  2737                           wreg	equ	0xFE8
  2738                           postdec1	equ	0xFE5
  2739                           fsr1h	equ	0xFE2
  2740                           fsr1l	equ	0xFE1
  2741                           postinc2	equ	0xFDE
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _init_hardware *****************
  2745 ;; Defined at:
  2746 ;;		line 55 in file "bibliotecas/hardware.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, status,2, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2760 ;;      Params:         0       0       0       0       0       0       0       0       0
  2761 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2763 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2764 ;;Total ram usage:        0 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    5
  2767 ;; This function calls:
  2768 ;;		_config_timer_dois
  2769 ;;		_config_timer_zero
  2770 ;;		_init_interrupt
  2771 ;;		_init_oscilador
  2772 ;;		_init_ports
  2773 ;; This function is called by:
  2774 ;;		_main
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text3
  2779  005754                     __ptext3:
  2780                           	opt stack 0
  2781  005754                     _init_hardware:
  2782                           	opt stack 25
  2783                           
  2784                           ;hardware.c: 58: init_oscilador();
  2785                           
  2786                           ;incstack = 0
  2787  005754  EC19  F02C         	call	_init_oscilador	;wreg free
  2788                           
  2789                           ;hardware.c: 61: init_ports();
  2790  005758  EC82  F02B         	call	_init_ports	;wreg free
  2791                           
  2792                           ;hardware.c: 64: config_timer_zero();
  2793  00575C  EC90  F02B         	call	_config_timer_zero	;wreg free
  2794                           
  2795                           ;hardware.c: 67: config_timer_dois();
  2796  005760  ECDC  F02B         	call	_config_timer_dois	;wreg free
  2797                           
  2798                           ;hardware.c: 70: init_interrupt();
  2799  005764  ECCA  F02B         	call	_init_interrupt	;wreg free
  2800  005768  0012               	return		;funcret
  2801  00576A                     __end_of_init_hardware:
  2802                           	opt stack 0
  2803                           tblptru	equ	0xFF8
  2804                           tblptrh	equ	0xFF7
  2805                           tblptrl	equ	0xFF6
  2806                           tablat	equ	0xFF5
  2807                           postinc0	equ	0xFEE
  2808                           wreg	equ	0xFE8
  2809                           postdec1	equ	0xFE5
  2810                           fsr1h	equ	0xFE2
  2811                           fsr1l	equ	0xFE1
  2812                           postinc2	equ	0xFDE
  2813                           status	equ	0xFD8
  2814                           
  2815 ;; *************** function _init_ports *****************
  2816 ;; Defined at:
  2817 ;;		line 155 in file "bibliotecas/hardware.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;		None
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;		None
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      void 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2831 ;;      Params:         0       0       0       0       0       0       0       0       0
  2832 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2834 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2835 ;;Total ram usage:        0 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    3
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_init_hardware
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text4
  2846  005704                     __ptext4:
  2847                           	opt stack 0
  2848  005704                     _init_ports:
  2849                           	opt stack 26
  2850                           
  2851                           ;hardware.c: 157: ADCON1 = 0X0F;
  2852                           
  2853                           ;incstack = 0
  2854  005704  0E0F               	movlw	15
  2855  005706  6EC1               	movwf	4033,c	;volatile
  2856                           
  2857                           ;hardware.c: 158: TRISB = 0b00100001;
  2858  005708  0E21               	movlw	33
  2859  00570A  6E93               	movwf	3987,c	;volatile
  2860                           
  2861                           ;hardware.c: 159: LATB = 0xFF;
  2862  00570C  688A               	setf	3978,c	;volatile
  2863                           
  2864                           ;hardware.c: 160: TRISD = 0x00;
  2865  00570E  0E00               	movlw	0
  2866  005710  6E95               	movwf	3989,c	;volatile
  2867                           
  2868                           ;hardware.c: 161: TRISA = 0b00000111;
  2869  005712  0E07               	movlw	7
  2870  005714  6E92               	movwf	3986,c	;volatile
  2871                           
  2872                           ;hardware.c: 162: TRISC = 0x01111111;
  2873  005716  0E11               	movlw	17
  2874  005718  6E94               	movwf	3988,c	;volatile
  2875                           
  2876                           ;hardware.c: 163: TRISE = 0b00000011;
  2877  00571A  0E03               	movlw	3
  2878  00571C  6E96               	movwf	3990,c	;volatile
  2879  00571E  0012               	return		;funcret
  2880  005720                     __end_of_init_ports:
  2881                           	opt stack 0
  2882                           tblptru	equ	0xFF8
  2883                           tblptrh	equ	0xFF7
  2884                           tblptrl	equ	0xFF6
  2885                           tablat	equ	0xFF5
  2886                           postinc0	equ	0xFEE
  2887                           wreg	equ	0xFE8
  2888                           postdec1	equ	0xFE5
  2889                           fsr1h	equ	0xFE2
  2890                           fsr1l	equ	0xFE1
  2891                           postinc2	equ	0xFDE
  2892                           status	equ	0xFD8
  2893                           
  2894 ;; *************** function _init_oscilador *****************
  2895 ;; Defined at:
  2896 ;;		line 173 in file "bibliotecas/hardware.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		None
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2910 ;;      Params:         0       0       0       0       0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2913 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2914 ;;Total ram usage:        0 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    3
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_init_hardware
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text5
  2925  005832                     __ptext5:
  2926                           	opt stack 0
  2927  005832                     _init_oscilador:
  2928                           	opt stack 26
  2929                           
  2930                           ;hardware.c: 176: OSCCONbits.IRCF0 = 1;
  2931                           
  2932                           ;incstack = 0
  2933  005832  88D3               	bsf	4051,4,c	;volatile
  2934                           
  2935                           ;hardware.c: 177: OSCCONbits.IRCF1 = 1;
  2936  005834  8AD3               	bsf	4051,5,c	;volatile
  2937                           
  2938                           ;hardware.c: 178: OSCCONbits.IRCF2 = 1;
  2939  005836  8CD3               	bsf	4051,6,c	;volatile
  2940  005838  0012               	return		;funcret
  2941  00583A                     __end_of_init_oscilador:
  2942                           	opt stack 0
  2943                           tblptru	equ	0xFF8
  2944                           tblptrh	equ	0xFF7
  2945                           tblptrl	equ	0xFF6
  2946                           tablat	equ	0xFF5
  2947                           postinc0	equ	0xFEE
  2948                           wreg	equ	0xFE8
  2949                           postdec1	equ	0xFE5
  2950                           fsr1h	equ	0xFE2
  2951                           fsr1l	equ	0xFE1
  2952                           postinc2	equ	0xFDE
  2953                           status	equ	0xFD8
  2954                           
  2955 ;; *************** function _init_interrupt *****************
  2956 ;; Defined at:
  2957 ;;		line 98 in file "bibliotecas/hardware.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;		None
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;		None
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		wreg, status,2
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2971 ;;      Params:         0       0       0       0       0       0       0       0       0
  2972 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2973 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2974 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2975 ;;Total ram usage:        0 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    3
  2978 ;; This function calls:
  2979 ;;		Nothing
  2980 ;; This function is called by:
  2981 ;;		_init_hardware
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           	psect	text6
  2986  005794                     __ptext6:
  2987                           	opt stack 0
  2988  005794                     _init_interrupt:
  2989                           	opt stack 26
  2990                           
  2991                           ;hardware.c: 100: INTCON = 0b10110000;
  2992                           
  2993                           ;incstack = 0
  2994  005794  0EB0               	movlw	176
  2995  005796  6EF2               	movwf	intcon,c	;volatile
  2996                           
  2997                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2998  005798  0E00               	movlw	0
  2999  00579A  6EF1               	movwf	intcon2,c	;volatile
  3000                           
  3001                           ;hardware.c: 102: INTCON3 = 0b00000000;
  3002  00579C  0E00               	movlw	0
  3003  00579E  6EF0               	movwf	intcon3,c	;volatile
  3004                           
  3005                           ;hardware.c: 104: PIE1 = 0b00101000;
  3006  0057A0  0E28               	movlw	40
  3007  0057A2  6E9D               	movwf	3997,c	;volatile
  3008  0057A4  0012               	return		;funcret
  3009  0057A6                     __end_of_init_interrupt:
  3010                           	opt stack 0
  3011                           tblptru	equ	0xFF8
  3012                           tblptrh	equ	0xFF7
  3013                           tblptrl	equ	0xFF6
  3014                           tablat	equ	0xFF5
  3015                           intcon	equ	0xFF2
  3016                           intcon2	equ	0xFF1
  3017                           intcon3	equ	0xFF0
  3018                           postinc0	equ	0xFEE
  3019                           wreg	equ	0xFE8
  3020                           postdec1	equ	0xFE5
  3021                           fsr1h	equ	0xFE2
  3022                           fsr1l	equ	0xFE1
  3023                           postinc2	equ	0xFDE
  3024                           status	equ	0xFD8
  3025                           
  3026 ;; *************** function _config_timer_zero *****************
  3027 ;; Defined at:
  3028 ;;		line 83 in file "bibliotecas/hardware.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, status,2, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3042 ;;      Params:         0       0       0       0       0       0       0       0       0
  3043 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3044 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3045 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3046 ;;Total ram usage:        0 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:    4
  3049 ;; This function calls:
  3050 ;;		_write_timer_zero
  3051 ;; This function is called by:
  3052 ;;		_init_hardware
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text7
  3057  005720                     __ptext7:
  3058                           	opt stack 0
  3059  005720                     _config_timer_zero:
  3060                           	opt stack 25
  3061                           
  3062                           ;hardware.c: 85: T0CON = 0b11000101;
  3063                           
  3064                           ;incstack = 0
  3065  005720  0EC5               	movlw	197
  3066  005722  6ED5               	movwf	4053,c	;volatile
  3067                           
  3068                           ;hardware.c: 86: SPPCON = 0b00000000;
  3069  005724  0E00               	movlw	0
  3070  005726  6E65               	movwf	3941,c	;volatile
  3071                           
  3072                           ;hardware.c: 87: SPPCFG = 0b00000000;
  3073  005728  0E00               	movlw	0
  3074  00572A  6E63               	movwf	3939,c	;volatile
  3075                           
  3076                           ;hardware.c: 88: write_timer_zero(0x45);
  3077  00572C  0E00               	movlw	0
  3078  00572E  0100               	movlb	0	; () banked
  3079  005730  6F61               	movwf	(write_timer_zero@timer0+1)& (0+255),b
  3080  005732  0E45               	movlw	69
  3081  005734  6F60               	movwf	write_timer_zero@timer0& (0+255),b
  3082  005736  EC0F  F02C         	call	_write_timer_zero	;wreg free
  3083  00573A  0012               	return		;funcret
  3084  00573C                     __end_of_config_timer_zero:
  3085                           	opt stack 0
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           intcon	equ	0xFF2
  3091                           intcon2	equ	0xFF1
  3092                           intcon3	equ	0xFF0
  3093                           postinc0	equ	0xFEE
  3094                           wreg	equ	0xFE8
  3095                           postdec1	equ	0xFE5
  3096                           fsr1h	equ	0xFE2
  3097                           fsr1l	equ	0xFE1
  3098                           postinc2	equ	0xFDE
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _write_timer_zero *****************
  3102 ;; Defined at:
  3103 ;;		line 138 in file "bibliotecas/hardware.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  timer0          2    0[BANK0 ] unsigned int 
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;		None
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      void 
  3110 ;; Registers used:
  3111 ;;		None
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3117 ;;      Params:         0       2       0       0       0       0       0       0       0
  3118 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3120 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3121 ;;Total ram usage:        2 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    3
  3124 ;; This function calls:
  3125 ;;		Nothing
  3126 ;; This function is called by:
  3127 ;;		_config_timer_zero
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text8
  3132  00581E                     __ptext8:
  3133                           	opt stack 0
  3134  00581E                     _write_timer_zero:
  3135                           	opt stack 25
  3136                           
  3137                           ;hardware.c: 146: TMR0 = timer0;
  3138                           
  3139                           ;incstack = 0
  3140  00581E  C060  FFD6         	movff	write_timer_zero@timer0,4054	;volatile
  3141  005822  C061  FFD7         	movff	write_timer_zero@timer0+1,4055	;volatile
  3142  005826  0012               	return		;funcret
  3143  005828                     __end_of_write_timer_zero:
  3144                           	opt stack 0
  3145                           tblptru	equ	0xFF8
  3146                           tblptrh	equ	0xFF7
  3147                           tblptrl	equ	0xFF6
  3148                           tablat	equ	0xFF5
  3149                           intcon	equ	0xFF2
  3150                           intcon2	equ	0xFF1
  3151                           intcon3	equ	0xFF0
  3152                           postinc0	equ	0xFEE
  3153                           wreg	equ	0xFE8
  3154                           postdec1	equ	0xFE5
  3155                           fsr1h	equ	0xFE2
  3156                           fsr1l	equ	0xFE1
  3157                           postinc2	equ	0xFDE
  3158                           status	equ	0xFD8
  3159                           
  3160 ;; *************** function _config_timer_dois *****************
  3161 ;; Defined at:
  3162 ;;		line 202 in file "bibliotecas/hardware.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;		None
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;		None
  3167 ;; Return value:  Size  Location     Type
  3168 ;;                  1    wreg      void 
  3169 ;; Registers used:
  3170 ;;		wreg, status,2
  3171 ;; Tracked objects:
  3172 ;;		On entry : 0/0
  3173 ;;		On exit  : 0/0
  3174 ;;		Unchanged: 0/0
  3175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3176 ;;      Params:         0       0       0       0       0       0       0       0       0
  3177 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3179 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3180 ;;Total ram usage:        0 bytes
  3181 ;; Hardware stack levels used:    1
  3182 ;; Hardware stack levels required when called:    3
  3183 ;; This function calls:
  3184 ;;		Nothing
  3185 ;; This function is called by:
  3186 ;;		_init_hardware
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           	psect	text9
  3191  0057B8                     __ptext9:
  3192                           	opt stack 0
  3193  0057B8                     _config_timer_dois:
  3194                           	opt stack 26
  3195                           
  3196                           ;hardware.c: 204: T2CON = 0b00000100;
  3197                           
  3198                           ;incstack = 0
  3199  0057B8  0E04               	movlw	4
  3200  0057BA  6ECA               	movwf	4042,c	;volatile
  3201                           
  3202                           ;hardware.c: 205: TMR2 = 0;
  3203  0057BC  0E00               	movlw	0
  3204  0057BE  6ECC               	movwf	4044,c	;volatile
  3205                           
  3206                           ;hardware.c: 206: PR2 = 0x01;
  3207  0057C0  0E01               	movlw	1
  3208  0057C2  6ECB               	movwf	4043,c	;volatile
  3209  0057C4  0012               	return		;funcret
  3210  0057C6                     __end_of_config_timer_dois:
  3211                           	opt stack 0
  3212                           tblptru	equ	0xFF8
  3213                           tblptrh	equ	0xFF7
  3214                           tblptrl	equ	0xFF6
  3215                           tablat	equ	0xFF5
  3216                           intcon	equ	0xFF2
  3217                           intcon2	equ	0xFF1
  3218                           intcon3	equ	0xFF0
  3219                           postinc0	equ	0xFEE
  3220                           wreg	equ	0xFE8
  3221                           postdec1	equ	0xFE5
  3222                           fsr1h	equ	0xFE2
  3223                           fsr1l	equ	0xFE1
  3224                           postinc2	equ	0xFDE
  3225                           status	equ	0xFD8
  3226                           
  3227 ;; *************** function _inicializa_tarefas *****************
  3228 ;; Defined at:
  3229 ;;		line 162 in file "main.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, status,0
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3243 ;;      Params:         0       0       0       0       0       0       0       0       0
  3244 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3246 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3247 ;;Total ram usage:        0 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    3
  3250 ;; This function calls:
  3251 ;;		Nothing
  3252 ;; This function is called by:
  3253 ;;		_main
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           	psect	text10
  3258  004EEE                     __ptext10:
  3259                           	opt stack 0
  3260  004EEE                     _inicializa_tarefas:
  3261                           	opt stack 27
  3262                           
  3263                           ;main.c: 165: p_tarefas[0] = verifica_dados_operacionais;
  3264                           
  3265                           ;incstack = 0
  3266  004EEE  0E3E               	movlw	low _verifica_dados_operacionais
  3267  004EF0  0101               	movlb	1	; () banked
  3268  004EF2  6F08               	movwf	_p_tarefas& (0+255),b
  3269  004EF4  0E58               	movlw	high _verifica_dados_operacionais
  3270  004EF6  6F09               	movwf	(_p_tarefas+1)& (0+255),b
  3271                           
  3272                           ;main.c: 166: p_tarefas[1] = disparo_gravacao;
  3273  004EF8  0E6A               	movlw	low _disparo_gravacao
  3274  004EFA  6F0A               	movwf	(_p_tarefas+2)& (0+255),b
  3275  004EFC  0E57               	movlw	high _disparo_gravacao
  3276  004EFE  6F0B               	movwf	(_p_tarefas+3)& (0+255),b
  3277                           
  3278                           ;main.c: 167: p_tarefas[2] = verifica_fence_externo;
  3279  004F00  0E12               	movlw	low _verifica_fence_externo
  3280  004F02  6F0C               	movwf	(_p_tarefas+4)& (0+255),b
  3281  004F04  0E00               	movlw	high _verifica_fence_externo
  3282  004F06  6F0D               	movwf	(_p_tarefas+5)& (0+255),b
  3283                           
  3284                           ;main.c: 168: p_tarefas[3] = troca_de_tela;
  3285  004F08  0E06               	movlw	low _troca_de_tela
  3286  004F0A  6F0E               	movwf	(_p_tarefas+6)& (0+255),b
  3287  004F0C  0E2E               	movlw	high _troca_de_tela
  3288  004F0E  6F0F               	movwf	(_p_tarefas+7)& (0+255),b
  3289                           
  3290                           ; BSR set to: 1
  3291                           ;main.c: 172: tempo_backup[0] = 5000;
  3292  004F10  0E13               	movlw	19
  3293  004F12  6F01               	movwf	(_tempo_backup+1)& (0+255),b
  3294  004F14  0E88               	movlw	136
  3295  004F16  6F00               	movwf	_tempo_backup& (0+255),b
  3296                           
  3297                           ; BSR set to: 1
  3298                           ;main.c: 173: tempo_backup[1] = 1000;
  3299  004F18  0E03               	movlw	3
  3300  004F1A  6F03               	movwf	(_tempo_backup+3)& (0+255),b
  3301  004F1C  0EE8               	movlw	232
  3302  004F1E  6F02               	movwf	(_tempo_backup+2)& (0+255),b
  3303                           
  3304                           ; BSR set to: 1
  3305                           ;main.c: 174: tempo_backup[2] = 1000;
  3306  004F20  0E03               	movlw	3
  3307  004F22  6F05               	movwf	(_tempo_backup+5)& (0+255),b
  3308  004F24  0EE8               	movlw	232
  3309  004F26  6F04               	movwf	(_tempo_backup+4)& (0+255),b
  3310                           
  3311                           ; BSR set to: 1
  3312                           ;main.c: 175: tempo_backup[3] = 100;
  3313  004F28  0E00               	movlw	0
  3314  004F2A  6F07               	movwf	(_tempo_backup+7)& (0+255),b
  3315  004F2C  0E64               	movlw	100
  3316  004F2E  6F06               	movwf	(_tempo_backup+6)& (0+255),b
  3317                           
  3318                           ; BSR set to: 1
  3319                           ;main.c: 178: tempo_tarefa[0] = 5000;
  3320  004F30  0E13               	movlw	19
  3321  004F32  6E24               	movwf	_tempo_tarefa+1,c
  3322  004F34  0E88               	movlw	136
  3323  004F36  6E23               	movwf	_tempo_tarefa,c
  3324                           
  3325                           ; BSR set to: 1
  3326                           ;main.c: 179: tempo_tarefa[1] = 1000;
  3327  004F38  0E03               	movlw	3
  3328  004F3A  6E26               	movwf	_tempo_tarefa+3,c
  3329  004F3C  0EE8               	movlw	232
  3330  004F3E  6E25               	movwf	_tempo_tarefa+2,c
  3331                           
  3332                           ; BSR set to: 1
  3333                           ;main.c: 180: tempo_tarefa[2] = 1000;
  3334  004F40  0E03               	movlw	3
  3335  004F42  6E28               	movwf	_tempo_tarefa+5,c
  3336  004F44  0EE8               	movlw	232
  3337  004F46  6E27               	movwf	_tempo_tarefa+4,c
  3338                           
  3339                           ; BSR set to: 1
  3340                           ;main.c: 181: tempo_tarefa[3] = 5000;
  3341  004F48  0E13               	movlw	19
  3342  004F4A  6E2A               	movwf	_tempo_tarefa+7,c
  3343  004F4C  0E88               	movlw	136
  3344  004F4E  6E29               	movwf	_tempo_tarefa+6,c
  3345                           
  3346                           ; BSR set to: 1
  3347                           ;main.c: 183: tarefa_em_execucao = 0;
  3348  004F50  0E00               	movlw	0
  3349  004F52  6E3F               	movwf	_tarefa_em_execucao,c	;volatile
  3350                           
  3351                           ; BSR set to: 1
  3352  004F54  0012               	return		;funcret
  3353  004F56                     __end_of_inicializa_tarefas:
  3354                           	opt stack 0
  3355                           tblptru	equ	0xFF8
  3356                           tblptrh	equ	0xFF7
  3357                           tblptrl	equ	0xFF6
  3358                           tablat	equ	0xFF5
  3359                           intcon	equ	0xFF2
  3360                           intcon2	equ	0xFF1
  3361                           intcon3	equ	0xFF0
  3362                           postinc0	equ	0xFEE
  3363                           wreg	equ	0xFE8
  3364                           postdec1	equ	0xFE5
  3365                           fsr1h	equ	0xFE2
  3366                           fsr1l	equ	0xFE1
  3367                           postinc2	equ	0xFDE
  3368                           status	equ	0xFD8
  3369                           
  3370 ;; *************** function _escalonador *****************
  3371 ;; Defined at:
  3372 ;;		line 194 in file "main.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;		None
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  cont            1  149[BANK0 ] unsigned char 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      void 
  3379 ;; Registers used:
  3380 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3386 ;;      Params:         0       0       0       0       0       0       0       0       0
  3387 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3388 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3389 ;;      Totals:         0       1       2       0       0       0       0       0       0
  3390 ;;Total ram usage:        3 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:   17
  3393 ;; This function calls:
  3394 ;;		_disparo_gravacao
  3395 ;;		_troca_de_tela
  3396 ;;		_verifica_dados_operacionais
  3397 ;;		_verifica_fence_externo
  3398 ;; This function is called by:
  3399 ;;		_main
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           	psect	text11
  3404  00461C                     __ptext11:
  3405                           	opt stack 0
  3406  00461C                     _escalonador:
  3407                           	opt stack 13
  3408                           
  3409                           ;main.c: 196: unsigned char cont;
  3410                           ;main.c: 197: for(cont = 0; cont<4;cont++)
  3411                           
  3412                           ; BSR set to: 1
  3413                           ;incstack = 0
  3414  00461C  0E00               	movlw	0
  3415  00461E  0100               	movlb	0	; () banked
  3416  004620  6FF5               	movwf	escalonador@cont& (0+255),b
  3417  004622                     l12375:
  3418                           
  3419                           ; BSR set to: 0
  3420  004622  0E03               	movlw	3
  3421  004624  65F5               	cpfsgt	escalonador@cont& (0+255),b
  3422  004626  D001               	goto	l111
  3423  004628  0012               	return	
  3424  00462A                     l111:
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;main.c: 198: {
  3428                           ;main.c: 199: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3429                           
  3430                           ; BSR set to: 0
  3431  00462A  51F5               	movf	escalonador@cont& (0+255),w,b
  3432  00462C  0D02               	mullw	2
  3433  00462E  0E08               	movlw	low _p_tarefas
  3434  004630  24F3               	addwf	prodl,w,c
  3435  004632  6ED9               	movwf	fsr2l,c
  3436  004634  0E01               	movlw	high _p_tarefas
  3437  004636  20F4               	addwfc	prodh,w,c
  3438  004638  6EDA               	movwf	fsr2h,c
  3439  00463A  50DE               	movf	postinc2,w,c
  3440  00463C  10DE               	iorwf	postinc2,w,c
  3441  00463E  B4D8               	btfsc	status,2,c
  3442  004640  D03D               	goto	l113
  3443                           
  3444                           ; BSR set to: 0
  3445  004642  51F5               	movf	escalonador@cont& (0+255),w,b
  3446  004644  0D02               	mullw	2
  3447  004646  0E23               	movlw	low _tempo_tarefa
  3448  004648  24F3               	addwf	prodl,w,c
  3449  00464A  6ED9               	movwf	fsr2l,c
  3450  00464C  0E00               	movlw	high _tempo_tarefa
  3451  00464E  20F4               	addwfc	prodh,w,c
  3452  004650  6EDA               	movwf	fsr2h,c
  3453  004652  50DE               	movf	postinc2,w,c
  3454  004654  10DE               	iorwf	postinc2,w,c
  3455  004656  A4D8               	btfss	status,2,c
  3456  004658  D031               	goto	l113
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;main.c: 200: {
  3460                           ;main.c: 201: tarefa_em_execucao = 1;
  3461  00465A  0E01               	movlw	1
  3462  00465C  6E3F               	movwf	_tarefa_em_execucao,c	;volatile
  3463                           
  3464                           ;main.c: 202: timeout_tarefa = 60000;
  3465  00465E  0EEA               	movlw	234
  3466  004660  6E34               	movwf	_timeout_tarefa+1,c
  3467  004662  0E60               	movlw	96
  3468  004664  6E33               	movwf	_timeout_tarefa,c
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;main.c: 203: p_tarefas[cont]();
  3472  004666  51F5               	movf	escalonador@cont& (0+255),w,b
  3473  004668  0D02               	mullw	2
  3474  00466A  0E08               	movlw	low _p_tarefas
  3475  00466C  24F3               	addwf	prodl,w,c
  3476  00466E  6ED9               	movwf	fsr2l,c
  3477  004670  0E01               	movlw	high _p_tarefas
  3478  004672  20F4               	addwfc	prodh,w,c
  3479  004674  6EDA               	movwf	fsr2h,c
  3480  004676  D801               	call	u17128
  3481  004678  D00A               	goto	u17129
  3482  00467A                     u17128:
  3483  00467A  0005               	push	
  3484  00467C  6EFA               	movwf	pclath,c
  3485  00467E  50DE               	movf	postinc2,w,c
  3486  004680  6EFD               	movwf	tosl,c
  3487  004682  50DE               	movf	postinc2,w,c
  3488  004684  6EFE               	movwf	tosh,c
  3489  004686  50F8               	movf	tblptru,w,c
  3490  004688  6EFF               	movwf	tosu,c
  3491  00468A  50FA               	movf	pclath,w,c
  3492  00468C  0012               	return		;indir
  3493  00468E                     u17129:
  3494                           
  3495                           ;main.c: 204: tarefa_em_execucao = 0;
  3496  00468E  0E00               	movlw	0
  3497  004690  6E3F               	movwf	_tarefa_em_execucao,c	;volatile
  3498                           
  3499                           ;main.c: 205: tempo_tarefa[cont] = tempo_backup[cont];
  3500  004692  0100               	movlb	0	; () banked
  3501  004694  51F5               	movf	escalonador@cont& (0+255),w,b
  3502  004696  0D02               	mullw	2
  3503  004698  0E00               	movlw	low _tempo_backup
  3504  00469A  24F3               	addwf	prodl,w,c
  3505  00469C  6ED9               	movwf	fsr2l,c
  3506  00469E  0E01               	movlw	high _tempo_backup
  3507  0046A0  20F4               	addwfc	prodh,w,c
  3508  0046A2  6EDA               	movwf	fsr2h,c
  3509  0046A4  51F5               	movf	escalonador@cont& (0+255),w,b
  3510  0046A6  0D02               	mullw	2
  3511  0046A8  0E23               	movlw	low _tempo_tarefa
  3512  0046AA  24F3               	addwf	prodl,w,c
  3513  0046AC  6EE1               	movwf	fsr1l,c
  3514  0046AE  0E00               	movlw	high _tempo_tarefa
  3515  0046B0  20F4               	addwfc	prodh,w,c
  3516  0046B2  6EE2               	movwf	fsr1h,c
  3517  0046B4  CFDE FFE6          	movff	postinc2,postinc1
  3518  0046B8  CFDD FFE5          	movff	postdec2,postdec1
  3519  0046BC                     l113:
  3520                           
  3521                           ; BSR set to: 0
  3522                           
  3523                           ; BSR set to: 0
  3524  0046BC  2BF5               	incf	escalonador@cont& (0+255),f,b
  3525  0046BE  D7B1               	goto	l12375
  3526  0046C0                     __end_of_escalonador:
  3527                           	opt stack 0
  3528                           tosu	equ	0xFFF
  3529                           tosh	equ	0xFFE
  3530                           tosl	equ	0xFFD
  3531                           pclath	equ	0xFFA
  3532                           tblptru	equ	0xFF8
  3533                           tblptrh	equ	0xFF7
  3534                           tblptrl	equ	0xFF6
  3535                           tablat	equ	0xFF5
  3536                           prodh	equ	0xFF4
  3537                           prodl	equ	0xFF3
  3538                           intcon	equ	0xFF2
  3539                           intcon2	equ	0xFF1
  3540                           intcon3	equ	0xFF0
  3541                           postinc0	equ	0xFEE
  3542                           wreg	equ	0xFE8
  3543                           postinc1	equ	0xFE6
  3544                           postdec1	equ	0xFE5
  3545                           fsr1h	equ	0xFE2
  3546                           fsr1l	equ	0xFE1
  3547                           postinc2	equ	0xFDE
  3548                           postdec2	equ	0xFDD
  3549                           fsr2h	equ	0xFDA
  3550                           fsr2l	equ	0xFD9
  3551                           status	equ	0xFD8
  3552                           
  3553 ;; *************** function _troca_de_tela *****************
  3554 ;; Defined at:
  3555 ;;		line 604 in file "main.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;		None
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3569 ;;      Params:         0       0       0       0       0       0       0       0       0
  3570 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3571 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3572 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3573 ;;Total ram usage:        2 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    6
  3576 ;; This function calls:
  3577 ;;		_escreve_cmd_lcd
  3578 ;;		_escreve_frase_ram_lcd
  3579 ;;		_fix
  3580 ;;		_posicao_cursor_lcd
  3581 ;; This function is called by:
  3582 ;;		_inicializa_tarefas
  3583 ;;		_escalonador
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text12
  3588  002E06                     __ptext12:
  3589                           	opt stack 0
  3590  002E06                     _troca_de_tela:
  3591                           	opt stack 23
  3592                           
  3593                           ;main.c: 607: static unsigned char state = 0;
  3594                           ;main.c: 608: static unsigned char last_state = 0;;
  3595                           ;main.c: 610: if(!PORTEbits.RE0 && !flag[2].point || (state == 1 ))
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;incstack = 0
  3599  002E06  B084               	btfsc	3972,0,c	;volatile
  3600  002E08  D003               	goto	u16820
  3601  002E0A  0100               	movlb	0	; () banked
  3602  002E0C  A1F8               	btfss	(_flag+2)& (0+255),0,b
  3603  002E0E  D003               	goto	u16830
  3604  002E10                     u16820:
  3605                           
  3606                           ; BSR set to: 0
  3607  002E10  043E               	decf	troca_de_tela@state,w,c
  3608  002E12  A4D8               	btfss	status,2,c
  3609  002E14  D02C               	goto	l246
  3610  002E16                     u16830:
  3611                           
  3612                           ;main.c: 611: {
  3613                           ;main.c: 613: if(!time_atualizacao)
  3614  002E16  502F               	movf	_time_atualizacao,w,c
  3615  002E18  1030               	iorwf	_time_atualizacao+1,w,c
  3616  002E1A  A4D8               	btfss	status,2,c
  3617  002E1C  D004               	goto	l251
  3618                           
  3619                           ;main.c: 614: {
  3620                           ;main.c: 616: time_atualizacao = 10000;
  3621  002E1E  0E27               	movlw	39
  3622  002E20  6E30               	movwf	_time_atualizacao+1,c
  3623  002E22  0E10               	movlw	16
  3624  002E24  6E2F               	movwf	_time_atualizacao,c
  3625  002E26                     l251:
  3626                           
  3627                           ;main.c: 617: }
  3628                           ;main.c: 619: if(last_state != 1)
  3629  002E26  043D               	decf	troca_de_tela@last_state,w,c
  3630  002E28  B4D8               	btfsc	status,2,c
  3631  002E2A  D01F               	goto	l252
  3632                           
  3633                           ;main.c: 620: {
  3634                           ;main.c: 621: state = 1;
  3635  002E2C  0E01               	movlw	1
  3636  002E2E  6E3E               	movwf	troca_de_tela@state,c
  3637                           
  3638                           ;main.c: 622: escreve_cmd_lcd(0b00000001);
  3639  002E30  0E01               	movlw	1
  3640  002E32  EC53  F024         	call	_escreve_cmd_lcd
  3641                           
  3642                           ;main.c: 623: posicao_cursor_lcd(1,0);
  3643  002E36  0E00               	movlw	0
  3644  002E38  0100               	movlb	0	; () banked
  3645  002E3A  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3646  002E3C  0E01               	movlw	1
  3647  002E3E  ECC4  F026         	call	_posicao_cursor_lcd
  3648                           
  3649                           ;main.c: 624: escreve_frase_ram_lcd("RPM:");
  3650  002E42  0E6F               	movlw	low STR_2
  3651  002E44  0100               	movlb	0	; () banked
  3652  002E46  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3653  002E48  0E62               	movlw	high STR_2
  3654  002E4A  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3655  002E4C  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3656                           
  3657                           ;main.c: 625: posicao_cursor_lcd(2,0);
  3658  002E50  0E00               	movlw	0
  3659  002E52  0100               	movlb	0	; () banked
  3660  002E54  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3661  002E56  0E02               	movlw	2
  3662  002E58  ECC4  F026         	call	_posicao_cursor_lcd
  3663                           
  3664                           ;main.c: 626: escreve_frase_ram_lcd("VEL:");
  3665  002E5C  0E6A               	movlw	low STR_3
  3666  002E5E  0100               	movlb	0	; () banked
  3667  002E60  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3668  002E62  0E62               	movlw	high STR_3
  3669  002E64  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3670  002E66  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3671  002E6A                     l252:
  3672                           
  3673                           ;main.c: 627: }
  3674                           ;main.c: 628: last_state = 1;
  3675  002E6A  0E01               	movlw	1
  3676  002E6C  6E3D               	movwf	troca_de_tela@last_state,c
  3677  002E6E                     l246:
  3678                           
  3679                           ;main.c: 630: }
  3680                           ;main.c: 632: if(!PORTEbits.RE1 && !flag[2].point || (state == 2))
  3681  002E6E  B284               	btfsc	3972,1,c	;volatile
  3682  002E70  D003               	goto	u16870
  3683  002E72  0100               	movlb	0	; () banked
  3684  002E74  A1F8               	btfss	(_flag+2)& (0+255),0,b
  3685  002E76  D004               	goto	u16880
  3686  002E78                     u16870:
  3687                           
  3688                           ; BSR set to: 0
  3689  002E78  0E02               	movlw	2
  3690  002E7A  183E               	xorwf	troca_de_tela@state,w,c
  3691  002E7C  A4D8               	btfss	status,2,c
  3692  002E7E  D069               	goto	l253
  3693  002E80                     u16880:
  3694                           
  3695                           ;main.c: 633: {
  3696                           ;main.c: 634: if(!time_atualizacao)
  3697  002E80  502F               	movf	_time_atualizacao,w,c
  3698  002E82  1030               	iorwf	_time_atualizacao+1,w,c
  3699  002E84  A4D8               	btfss	status,2,c
  3700  002E86  D022               	goto	l258
  3701                           
  3702                           ;main.c: 635: {
  3703                           ;main.c: 636: posicao_cursor_lcd(1,8);
  3704  002E88  0E08               	movlw	8
  3705  002E8A  0100               	movlb	0	; () banked
  3706  002E8C  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3707  002E8E  0E01               	movlw	1
  3708  002E90  ECC4  F026         	call	_posicao_cursor_lcd
  3709                           
  3710                           ;main.c: 637: escreve_frase_ram_lcd("N/D");
  3711  002E94  0E78               	movlw	low STR_4
  3712  002E96  0100               	movlb	0	; () banked
  3713  002E98  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3714  002E9A  0E62               	movlw	high STR_4
  3715  002E9C  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3716  002E9E  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3717                           
  3718                           ;main.c: 638: posicao_cursor_lcd(2,8);
  3719  002EA2  0E08               	movlw	8
  3720  002EA4  0100               	movlb	0	; () banked
  3721  002EA6  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3722  002EA8  0E02               	movlw	2
  3723  002EAA  ECC4  F026         	call	_posicao_cursor_lcd
  3724                           
  3725                           ;main.c: 639: escreve_frase_ram_lcd(fix());
  3726  002EAE  EC1D  F02C         	call	_fix	;wreg free
  3727  002EB2  0100               	movlb	0	; () banked
  3728  002EB4  6F66               	movwf	??_troca_de_tela& (0+255),b
  3729  002EB6  6B67               	clrf	(??_troca_de_tela+1)& (0+255),b
  3730  002EB8  C066  F063         	movff	??_troca_de_tela,escreve_frase_ram_lcd@buffer
  3731  002EBC  C067  F064         	movff	??_troca_de_tela+1,escreve_frase_ram_lcd@buffer+1
  3732  002EC0  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3733                           
  3734                           ;main.c: 640: time_atualizacao = 10000;
  3735  002EC4  0E27               	movlw	39
  3736  002EC6  6E30               	movwf	_time_atualizacao+1,c
  3737  002EC8  0E10               	movlw	16
  3738  002ECA  6E2F               	movwf	_time_atualizacao,c
  3739  002ECC                     l258:
  3740                           
  3741                           ;main.c: 641: }
  3742                           ;main.c: 644: if(last_state != 2)
  3743  002ECC  0E02               	movlw	2
  3744  002ECE  183D               	xorwf	troca_de_tela@last_state,w,c
  3745  002ED0  B4D8               	btfsc	status,2,c
  3746  002ED2  D03D               	goto	l259
  3747                           
  3748                           ;main.c: 645: {
  3749                           ;main.c: 646: state = 2;
  3750  002ED4  0E02               	movlw	2
  3751  002ED6  6E3E               	movwf	troca_de_tela@state,c
  3752                           
  3753                           ;main.c: 647: escreve_cmd_lcd(0b00000001);
  3754  002ED8  0E01               	movlw	1
  3755  002EDA  EC53  F024         	call	_escreve_cmd_lcd
  3756                           
  3757                           ;main.c: 648: posicao_cursor_lcd(1,0);
  3758  002EDE  0E00               	movlw	0
  3759  002EE0  0100               	movlb	0	; () banked
  3760  002EE2  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3761  002EE4  0E01               	movlw	1
  3762  002EE6  ECC4  F026         	call	_posicao_cursor_lcd
  3763                           
  3764                           ;main.c: 649: escreve_frase_ram_lcd("D_Fence:");
  3765  002EEA  0E47               	movlw	low STR_5
  3766  002EEC  0100               	movlb	0	; () banked
  3767  002EEE  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3768  002EF0  0E62               	movlw	high STR_5
  3769  002EF2  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3770  002EF4  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3771                           
  3772                           ;main.c: 650: posicao_cursor_lcd(1,8);
  3773  002EF8  0E08               	movlw	8
  3774  002EFA  0100               	movlb	0	; () banked
  3775  002EFC  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3776  002EFE  0E01               	movlw	1
  3777  002F00  ECC4  F026         	call	_posicao_cursor_lcd
  3778                           
  3779                           ;main.c: 651: escreve_frase_ram_lcd("N/D");
  3780  002F04  0E78               	movlw	low STR_4
  3781  002F06  0100               	movlb	0	; () banked
  3782  002F08  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3783  002F0A  0E62               	movlw	high STR_4
  3784  002F0C  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3785  002F0E  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3786                           
  3787                           ;main.c: 652: posicao_cursor_lcd(2,0);
  3788  002F12  0E00               	movlw	0
  3789  002F14  0100               	movlb	0	; () banked
  3790  002F16  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3791  002F18  0E02               	movlw	2
  3792  002F1A  ECC4  F026         	call	_posicao_cursor_lcd
  3793                           
  3794                           ;main.c: 653: escreve_frase_ram_lcd("LFIX:");
  3795  002F1E  0E64               	movlw	low STR_7
  3796  002F20  0100               	movlb	0	; () banked
  3797  002F22  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3798  002F24  0E62               	movlw	high STR_7
  3799  002F26  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3800  002F28  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3801                           
  3802                           ;main.c: 654: posicao_cursor_lcd(2,8);
  3803  002F2C  0E08               	movlw	8
  3804  002F2E  0100               	movlb	0	; () banked
  3805  002F30  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3806  002F32  0E02               	movlw	2
  3807  002F34  ECC4  F026         	call	_posicao_cursor_lcd
  3808                           
  3809                           ;main.c: 655: escreve_frase_ram_lcd(fix());
  3810  002F38  EC1D  F02C         	call	_fix	;wreg free
  3811  002F3C  0100               	movlb	0	; () banked
  3812  002F3E  6F66               	movwf	??_troca_de_tela& (0+255),b
  3813  002F40  6B67               	clrf	(??_troca_de_tela+1)& (0+255),b
  3814  002F42  C066  F063         	movff	??_troca_de_tela,escreve_frase_ram_lcd@buffer
  3815  002F46  C067  F064         	movff	??_troca_de_tela+1,escreve_frase_ram_lcd@buffer+1
  3816  002F4A  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3817  002F4E                     l259:
  3818                           
  3819                           ;main.c: 656: }
  3820                           ;main.c: 657: last_state = 2;
  3821  002F4E  0E02               	movlw	2
  3822  002F50  6E3D               	movwf	troca_de_tela@last_state,c
  3823  002F52                     l253:
  3824                           
  3825                           ;main.c: 658: }
  3826                           ;main.c: 660: if(flag[2].point || (state == 3))
  3827  002F52  0100               	movlb	0	; () banked
  3828  002F54  B1F8               	btfsc	(_flag+2)& (0+255),0,b
  3829  002F56  D004               	goto	u16920
  3830                           
  3831                           ; BSR set to: 0
  3832  002F58  0E03               	movlw	3
  3833  002F5A  183E               	xorwf	troca_de_tela@state,w,c
  3834  002F5C  A4D8               	btfss	status,2,c
  3835  002F5E  D020               	goto	l260
  3836  002F60                     u16920:
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;main.c: 661: {
  3840                           ;main.c: 663: if(!time_atualizacao)
  3841                           
  3842                           ; BSR set to: 0
  3843  002F60  502F               	movf	_time_atualizacao,w,c
  3844  002F62  1030               	iorwf	_time_atualizacao+1,w,c
  3845  002F64  A4D8               	btfss	status,2,c
  3846  002F66  D004               	goto	l263
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;main.c: 664: {
  3850                           ;main.c: 665: time_atualizacao = 10000;
  3851  002F68  0E27               	movlw	39
  3852  002F6A  6E30               	movwf	_time_atualizacao+1,c
  3853  002F6C  0E10               	movlw	16
  3854  002F6E  6E2F               	movwf	_time_atualizacao,c
  3855  002F70                     l263:
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;main.c: 666: }
  3859                           ;main.c: 668: if(last_state != 3)
  3860                           
  3861                           ; BSR set to: 0
  3862  002F70  0E03               	movlw	3
  3863  002F72  183D               	xorwf	troca_de_tela@last_state,w,c
  3864  002F74  B4D8               	btfsc	status,2,c
  3865  002F76  D012               	goto	l264
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;main.c: 669: {
  3869                           ;main.c: 670: state = 3;
  3870  002F78  0E03               	movlw	3
  3871  002F7A  6E3E               	movwf	troca_de_tela@state,c
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;main.c: 671: escreve_cmd_lcd(0b00000001);
  3875  002F7C  0E01               	movlw	1
  3876  002F7E  EC53  F024         	call	_escreve_cmd_lcd
  3877                           
  3878                           ;main.c: 672: posicao_cursor_lcd(2,0);
  3879  002F82  0E00               	movlw	0
  3880  002F84  0100               	movlb	0	; () banked
  3881  002F86  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3882  002F88  0E02               	movlw	2
  3883  002F8A  ECC4  F026         	call	_posicao_cursor_lcd
  3884                           
  3885                           ;main.c: 673: escreve_frase_ram_lcd("D_Fence:");
  3886  002F8E  0E47               	movlw	low STR_5
  3887  002F90  0100               	movlb	0	; () banked
  3888  002F92  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3889  002F94  0E62               	movlw	high STR_5
  3890  002F96  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3891  002F98  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3892  002F9C                     l264:
  3893                           
  3894                           ;main.c: 674: }
  3895                           ;main.c: 675: last_state = 3;
  3896  002F9C  0E03               	movlw	3
  3897  002F9E  6E3D               	movwf	troca_de_tela@last_state,c
  3898  002FA0                     l260:
  3899                           
  3900                           ;main.c: 676: }
  3901                           ;main.c: 678: if((!PORTEbits.RE1 && state!=0) && !flag[2].point )
  3902  002FA0  B284               	btfsc	3972,1,c	;volatile
  3903  002FA2  D02B               	goto	l265
  3904  002FA4  503E               	movf	troca_de_tela@state,w,c
  3905  002FA6  B4D8               	btfsc	status,2,c
  3906  002FA8  D028               	goto	l265
  3907  002FAA  0100               	movlb	0	; () banked
  3908  002FAC  B1F8               	btfsc	(_flag+2)& (0+255),0,b
  3909  002FAE  D025               	goto	l265
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;main.c: 679: {
  3913                           ;main.c: 680: if(last_state != 4)
  3914  002FB0  0E04               	movlw	4
  3915  002FB2  183D               	xorwf	troca_de_tela@last_state,w,c
  3916  002FB4  B4D8               	btfsc	status,2,c
  3917  002FB6  D01F               	goto	l266
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;main.c: 681: {
  3921                           ;main.c: 682: escreve_cmd_lcd(0b00000001);
  3922  002FB8  0E01               	movlw	1
  3923  002FBA  EC53  F024         	call	_escreve_cmd_lcd
  3924                           
  3925                           ;main.c: 683: state = 0;
  3926  002FBE  0E00               	movlw	0
  3927  002FC0  6E3E               	movwf	troca_de_tela@state,c
  3928                           
  3929                           ;main.c: 684: posicao_cursor_lcd(1,0);
  3930  002FC2  0E00               	movlw	0
  3931  002FC4  0100               	movlb	0	; () banked
  3932  002FC6  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3933  002FC8  0E01               	movlw	1
  3934  002FCA  ECC4  F026         	call	_posicao_cursor_lcd
  3935                           
  3936                           ;main.c: 685: escreve_frase_ram_lcd("B1:RPM B2:FENCE");
  3937  002FCE  0EC2               	movlw	low STR_9
  3938  002FD0  0100               	movlb	0	; () banked
  3939  002FD2  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3940  002FD4  0E61               	movlw	high STR_9
  3941  002FD6  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3942  002FD8  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3943                           
  3944                           ;main.c: 686: posicao_cursor_lcd(2,0);
  3945  002FDC  0E00               	movlw	0
  3946  002FDE  0100               	movlb	0	; () banked
  3947  002FE0  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3948  002FE2  0E02               	movlw	2
  3949  002FE4  ECC4  F026         	call	_posicao_cursor_lcd
  3950                           
  3951                           ;main.c: 687: escreve_frase_ram_lcd("B2:HOME");
  3952  002FE8  0E50               	movlw	low STR_10
  3953  002FEA  0100               	movlb	0	; () banked
  3954  002FEC  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3955  002FEE  0E62               	movlw	high STR_10
  3956  002FF0  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3957  002FF2  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3958  002FF6                     l266:
  3959                           
  3960                           ;main.c: 688: }
  3961                           ;main.c: 689: last_state = 4;
  3962  002FF6  0E04               	movlw	4
  3963  002FF8  6E3D               	movwf	troca_de_tela@last_state,c
  3964  002FFA                     l265:
  3965                           
  3966                           ;main.c: 690: }
  3967                           ;main.c: 692: if(!state && !flag[2].point)
  3968  002FFA  503E               	movf	troca_de_tela@state,w,c
  3969  002FFC  A4D8               	btfss	status,2,c
  3970  002FFE  0012               	return	
  3971  003000  0100               	movlb	0	; () banked
  3972  003002  B1F8               	btfsc	(_flag+2)& (0+255),0,b
  3973  003004  0012               	return	
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;main.c: 693: {
  3977                           ;main.c: 694: if(last_state != 4)
  3978  003006  0E04               	movlw	4
  3979  003008  183D               	xorwf	troca_de_tela@last_state,w,c
  3980  00300A  B4D8               	btfsc	status,2,c
  3981  00300C  D01D               	goto	l268
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;main.c: 695: {
  3985                           ;main.c: 696: escreve_cmd_lcd(0b00000001);
  3986  00300E  0E01               	movlw	1
  3987  003010  EC53  F024         	call	_escreve_cmd_lcd
  3988                           
  3989                           ;main.c: 697: posicao_cursor_lcd(1,0);
  3990  003014  0E00               	movlw	0
  3991  003016  0100               	movlb	0	; () banked
  3992  003018  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3993  00301A  0E01               	movlw	1
  3994  00301C  ECC4  F026         	call	_posicao_cursor_lcd
  3995                           
  3996                           ;main.c: 698: escreve_frase_ram_lcd("B1:RPM  B2:FENCE");
  3997  003020  0E71               	movlw	low STR_11
  3998  003022  0100               	movlb	0	; () banked
  3999  003024  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  4000  003026  0E61               	movlw	high STR_11
  4001  003028  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4002  00302A  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  4003                           
  4004                           ;main.c: 699: posicao_cursor_lcd(2,0);
  4005  00302E  0E00               	movlw	0
  4006  003030  0100               	movlb	0	; () banked
  4007  003032  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4008  003034  0E02               	movlw	2
  4009  003036  ECC4  F026         	call	_posicao_cursor_lcd
  4010                           
  4011                           ;main.c: 700: escreve_frase_ram_lcd("B2:HOME");
  4012  00303A  0E50               	movlw	low STR_10
  4013  00303C  0100               	movlb	0	; () banked
  4014  00303E  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  4015  003040  0E62               	movlw	high STR_10
  4016  003042  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4017  003044  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  4018  003048                     l268:
  4019                           
  4020                           ;main.c: 701: }
  4021                           ;main.c: 702: last_state = 4;
  4022  003048  0E04               	movlw	4
  4023  00304A  6E3D               	movwf	troca_de_tela@last_state,c
  4024  00304C  0012               	return	
  4025  00304E                     __end_of_troca_de_tela:
  4026                           	opt stack 0
  4027                           tosu	equ	0xFFF
  4028                           tosh	equ	0xFFE
  4029                           tosl	equ	0xFFD
  4030                           pclath	equ	0xFFA
  4031                           tblptru	equ	0xFF8
  4032                           tblptrh	equ	0xFF7
  4033                           tblptrl	equ	0xFF6
  4034                           tablat	equ	0xFF5
  4035                           prodh	equ	0xFF4
  4036                           prodl	equ	0xFF3
  4037                           intcon	equ	0xFF2
  4038                           intcon2	equ	0xFF1
  4039                           intcon3	equ	0xFF0
  4040                           postinc0	equ	0xFEE
  4041                           wreg	equ	0xFE8
  4042                           postinc1	equ	0xFE6
  4043                           postdec1	equ	0xFE5
  4044                           fsr1h	equ	0xFE2
  4045                           fsr1l	equ	0xFE1
  4046                           postinc2	equ	0xFDE
  4047                           postdec2	equ	0xFDD
  4048                           fsr2h	equ	0xFDA
  4049                           fsr2l	equ	0xFD9
  4050                           status	equ	0xFD8
  4051                           
  4052 ;; *************** function _disparo_gravacao *****************
  4053 ;; Defined at:
  4054 ;;		line 589 in file "main.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;		None
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;		None
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  1    wreg      void 
  4061 ;; Registers used:
  4062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4068 ;;      Params:         0       0       0       0       0       0       0       0       0
  4069 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4070 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4071 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4072 ;;Total ram usage:        0 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:   16
  4075 ;; This function calls:
  4076 ;;		_escrita_sdcard
  4077 ;; This function is called by:
  4078 ;;		_inicializa_tarefas
  4079 ;;		_escalonador
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           	psect	text13
  4084  00576A                     __ptext13:
  4085                           	opt stack 0
  4086  00576A                     _disparo_gravacao:
  4087                           	opt stack 13
  4088                           
  4089                           ;main.c: 591: if(!time_sd)
  4090                           
  4091                           ;incstack = 0
  4092  00576A  5031               	movf	_time_sd,w,c
  4093  00576C  1032               	iorwf	_time_sd+1,w,c
  4094  00576E  A4D8               	btfss	status,2,c
  4095  005770  0012               	return	
  4096                           
  4097                           ;main.c: 592: {
  4098                           ;main.c: 595: escrita_sdcard();
  4099  005772  ECA7  F021         	call	_escrita_sdcard	;wreg free
  4100                           
  4101                           ;main.c: 596: time_sd = 30000;
  4102  005776  0E75               	movlw	117
  4103  005778  6E32               	movwf	_time_sd+1,c
  4104  00577A  0E30               	movlw	48
  4105  00577C  6E31               	movwf	_time_sd,c
  4106  00577E  0012               	return	
  4107  005780                     __end_of_disparo_gravacao:
  4108                           	opt stack 0
  4109                           tosu	equ	0xFFF
  4110                           tosh	equ	0xFFE
  4111                           tosl	equ	0xFFD
  4112                           pclath	equ	0xFFA
  4113                           tblptru	equ	0xFF8
  4114                           tblptrh	equ	0xFF7
  4115                           tblptrl	equ	0xFF6
  4116                           tablat	equ	0xFF5
  4117                           prodh	equ	0xFF4
  4118                           prodl	equ	0xFF3
  4119                           intcon	equ	0xFF2
  4120                           intcon2	equ	0xFF1
  4121                           intcon3	equ	0xFF0
  4122                           postinc0	equ	0xFEE
  4123                           wreg	equ	0xFE8
  4124                           postinc1	equ	0xFE6
  4125                           postdec1	equ	0xFE5
  4126                           fsr1h	equ	0xFE2
  4127                           fsr1l	equ	0xFE1
  4128                           postinc2	equ	0xFDE
  4129                           postdec2	equ	0xFDD
  4130                           fsr2h	equ	0xFDA
  4131                           fsr2l	equ	0xFD9
  4132                           status	equ	0xFD8
  4133                           
  4134 ;; *************** function _verifica_dados_operacionais *****************
  4135 ;; Defined at:
  4136 ;;		line 574 in file "main.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;		None
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;		None
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  1    wreg      void 
  4143 ;; Registers used:
  4144 ;;		None
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4150 ;;      Params:         0       0       0       0       0       0       0       0       0
  4151 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4152 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4153 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4154 ;;Total ram usage:        0 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    3
  4157 ;; This function calls:
  4158 ;;		Nothing
  4159 ;; This function is called by:
  4160 ;;		_inicializa_tarefas
  4161 ;;		_escalonador
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           	psect	text14
  4166  00583E                     __ptext14:
  4167                           	opt stack 0
  4168  00583E                     _verifica_dados_operacionais:
  4169                           	opt stack 26
  4170                           
  4171                           ;incstack = 0
  4172  00583E  0012               	return		;funcret
  4173  005840                     __end_of_verifica_dados_operacionais:
  4174                           	opt stack 0
  4175                           tosu	equ	0xFFF
  4176                           tosh	equ	0xFFE
  4177                           tosl	equ	0xFFD
  4178                           pclath	equ	0xFFA
  4179                           tblptru	equ	0xFF8
  4180                           tblptrh	equ	0xFF7
  4181                           tblptrl	equ	0xFF6
  4182                           tablat	equ	0xFF5
  4183                           prodh	equ	0xFF4
  4184                           prodl	equ	0xFF3
  4185                           intcon	equ	0xFF2
  4186                           intcon2	equ	0xFF1
  4187                           intcon3	equ	0xFF0
  4188                           postinc0	equ	0xFEE
  4189                           wreg	equ	0xFE8
  4190                           postinc1	equ	0xFE6
  4191                           postdec1	equ	0xFE5
  4192                           fsr1h	equ	0xFE2
  4193                           fsr1l	equ	0xFE1
  4194                           postinc2	equ	0xFDE
  4195                           postdec2	equ	0xFDD
  4196                           fsr2h	equ	0xFDA
  4197                           fsr2l	equ	0xFD9
  4198                           status	equ	0xFD8
  4199                           
  4200 ;; *************** function _verifica_fence_externo *****************
  4201 ;; Defined at:
  4202 ;;		line 265 in file "main.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  fence_diff_l   48    0[BANK3 ] unsigned char [12][4]
  4207 ;;  fence_diff_l   44   48[BANK3 ] unsigned char [11][4]
  4208 ;;  temp_buff_lo   12   92[BANK3 ] unsigned char [12]
  4209 ;;  temp_buff_la   11  104[BANK3 ] unsigned char [11]
  4210 ;;  temp_var_deg    4  119[BANK3 ] unsigned long 
  4211 ;;  point_buff      3    0        PTR unsigned char 
  4212 ;;  point_buff_g    2  117[BANK3 ] PTR unsigned char 
  4213 ;;		 -> rawLongitude(13), 
  4214 ;;  point_buff_g    2  115[BANK3 ] PTR unsigned char 
  4215 ;;		 -> rawLatitude(13), 
  4216 ;;  i               1  128[BANK3 ] unsigned char 
  4217 ;;  point           1  127[BANK3 ] unsigned char 
  4218 ;;  count           1  126[BANK3 ] unsigned char 
  4219 ;;  j               1  125[BANK3 ] unsigned char 
  4220 ;;  point_dif_lo    1  124[BANK3 ] unsigned char 
  4221 ;;  point_dif_la    1  123[BANK3 ] unsigned char 
  4222 ;;  count_index     1    0        unsigned char 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  1    wreg      void 
  4225 ;; Registers used:
  4226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4232 ;;      Params:         0       0       0       0       0       0       0       0       0
  4233 ;;      Locals:         0       0       0       0     129       0       0       0       0
  4234 ;;      Temps:          0       6       0       0       0       0       0       0       0
  4235 ;;      Totals:         0       6       0       0     129       0       0       0       0
  4236 ;;Total ram usage:      135 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    7
  4239 ;; This function calls:
  4240 ;;		_Latitude
  4241 ;;		_Longitude
  4242 ;;		_atoi
  4243 ;;		_escreve_frase_ram_lcd
  4244 ;;		_escreve_inteiro_lcd
  4245 ;;		_posicao_cursor_lcd
  4246 ;; This function is called by:
  4247 ;;		_inicializa_tarefas
  4248 ;;		_escalonador
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text15
  4253  000012                     __ptext15:
  4254                           	opt stack 0
  4255  000012                     _verifica_fence_externo:
  4256                           	opt stack 22
  4257                           
  4258                           ;main.c: 267: unsigned char fence_diff_lat[4][11] = {"-2342.07112", "-2342.07112", "-234
      +                          2.11784", "-2342.11784"};
  4259                           
  4260                           ;incstack = 0
  4261  000012  EE22  F030         	lfsr	2,verifica_fence_externo@F4370
  4262  000016  EE13  F030         	lfsr	1,verifica_fence_externo@fence_diff_lat
  4263  00001A  0E2B               	movlw	43
  4264  00001C                     u16001:
  4265  00001C  CFDB FFE3          	movff	plusw2,plusw1
  4266  000020  06E8               	decf	wreg,f,c
  4267  000022  E2FC               	bc	u16001
  4268                           
  4269                           ;main.c: 268: unsigned char fence_diff_long[4][12] = {"-04629.73477", "-04629.68601", "-
      +                          04629.68601", "-04629.73477"};
  4270  000024  EE22  F000         	lfsr	2,verifica_fence_externo@F4373
  4271  000028  EE13  F000         	lfsr	1,verifica_fence_externo@fence_diff_long
  4272  00002C  0E2F               	movlw	47
  4273  00002E                     u16011:
  4274  00002E  CFDB FFE3          	movff	plusw2,plusw1
  4275  000032  06E8               	decf	wreg,f,c
  4276  000034  E2FC               	bc	u16011
  4277                           
  4278                           ;main.c: 278: unsigned char *point_buff, i, j, count, count_index;
  4279                           ;main.c: 279: unsigned char *point_buff_gps_lat, *point_buff_gps_long;
  4280                           ;main.c: 280: unsigned char point, point_dif_lat ,point_dif_long;
  4281                           ;main.c: 281: unsigned long int temp_var_deg;
  4282                           ;main.c: 282: unsigned char temp_buff_lat[11] = "-2342.07112";
  4283  000036  EE22  F068         	lfsr	2,verifica_fence_externo@F4386
  4284  00003A  EE13  F068         	lfsr	1,verifica_fence_externo@temp_buff_lat
  4285  00003E  0E0A               	movlw	10
  4286  000040                     u16021:
  4287  000040  CFDB FFE3          	movff	plusw2,plusw1
  4288  000044  06E8               	decf	wreg,f,c
  4289  000046  E2FC               	bc	u16021
  4290                           
  4291                           ;main.c: 283: unsigned char temp_buff_long[12] = "-04629.73477";
  4292  000048  EE22  F05C         	lfsr	2,verifica_fence_externo@F4388
  4293  00004C  EE13  F05C         	lfsr	1,verifica_fence_externo@temp_buff_long
  4294  000050  0E0B               	movlw	11
  4295  000052                     u16031:
  4296  000052  CFDB FFE3          	movff	plusw2,plusw1
  4297  000056  06E8               	decf	wreg,f,c
  4298  000058  E2FC               	bc	u16031
  4299                           
  4300                           ;main.c: 284: count = 0;
  4301  00005A  0E00               	movlw	0
  4302  00005C  0103               	movlb	3	; () banked
  4303  00005E  6F7E               	movwf	verifica_fence_externo@count& (0+255),b
  4304                           
  4305                           ; BSR set to: 3
  4306                           ;main.c: 285: point = 0;
  4307  000060  0E00               	movlw	0
  4308  000062  6F7F               	movwf	verifica_fence_externo@point& (0+255),b
  4309                           
  4310                           ; BSR set to: 3
  4311                           ;main.c: 286: point_dif_lat = 0;
  4312  000064  0E00               	movlw	0
  4313  000066  6F7B               	movwf	verifica_fence_externo@point_dif_lat& (0+255),b
  4314                           
  4315                           ; BSR set to: 3
  4316                           ;main.c: 287: point_dif_long = 0;
  4317  000068  0E00               	movlw	0
  4318  00006A  6F7C               	movwf	verifica_fence_externo@point_dif_long& (0+255),b
  4319                           
  4320                           ; BSR set to: 3
  4321                           ;main.c: 288: j= 0;
  4322  00006C  0E00               	movlw	0
  4323  00006E  6F7D               	movwf	verifica_fence_externo@j& (0+255),b
  4324                           
  4325                           ; BSR set to: 3
  4326                           ;main.c: 291: point_buff_gps_lat = Latitude();
  4327  000070  ECF7  F02B         	call	_Latitude	;wreg free
  4328  000074  C060  F373         	movff	?_Latitude,verifica_fence_externo@point_buff_gps_lat
  4329  000078  C061  F374         	movff	?_Latitude+1,verifica_fence_externo@point_buff_gps_lat+1
  4330                           
  4331                           ;main.c: 292: point_buff_gps_long = Longitude();
  4332  00007C  ECF1  F02B         	call	_Longitude	;wreg free
  4333  000080  C060  F375         	movff	?_Longitude,verifica_fence_externo@point_buff_gps_long
  4334  000084  C061  F376         	movff	?_Longitude+1,verifica_fence_externo@point_buff_gps_long+1
  4335                           
  4336                           ;main.c: 307: while(point<4)
  4337  000088  D1A4               	goto	l141
  4338  00008A                     
  4339                           ;main.c: 308: {
  4340                           ;main.c: 310: for(i=1; i<6; i++)
  4341  00008A  0E01               	movlw	1
  4342  00008C  0103               	movlb	3	; () banked
  4343  00008E  6F80               	movwf	verifica_fence_externo@i& (0+255),b
  4344  000090                     l11881:
  4345                           
  4346                           ; BSR set to: 3
  4347  000090  0E05               	movlw	5
  4348  000092  6580               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4349  000094  D001               	goto	l143
  4350  000096  D06F               	goto	u16110
  4351  000098                     l143:
  4352                           
  4353                           ; BSR set to: 3
  4354                           ;main.c: 311: {
  4355                           ;main.c: 312: if(point == 0 || point == 2)
  4356                           
  4357                           ; BSR set to: 3
  4358  000098  517F               	movf	verifica_fence_externo@point& (0+255),w,b
  4359  00009A  B4D8               	btfsc	status,2,c
  4360  00009C  D004               	goto	u16060
  4361                           
  4362                           ; BSR set to: 3
  4363  00009E  0E02               	movlw	2
  4364  0000A0  197F               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4365  0000A2  A4D8               	btfss	status,2,c
  4366  0000A4  D066               	goto	u16100
  4367  0000A6                     u16060:
  4368                           
  4369                           ; BSR set to: 3
  4370                           ;main.c: 313: {
  4371                           ;main.c: 314: if(point == 2 && !point_dif_long)
  4372                           
  4373                           ; BSR set to: 3
  4374  0000A6  0E02               	movlw	2
  4375  0000A8  197F               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4376  0000AA  A4D8               	btfss	status,2,c
  4377  0000AC  D003               	goto	l148
  4378                           
  4379                           ; BSR set to: 3
  4380  0000AE  517C               	movf	verifica_fence_externo@point_dif_long& (0+255),w,b
  4381  0000B0  B4D8               	btfsc	status,2,c
  4382                           
  4383                           ; BSR set to: 3
  4384                           ;main.c: 315: {
  4385                           ;main.c: 316: point_dif_long++;
  4386  0000B2  2B7C               	incf	verifica_fence_externo@point_dif_long& (0+255),f,b
  4387  0000B4                     l148:
  4388                           
  4389                           ; BSR set to: 3
  4390                           ;main.c: 317: }
  4391                           ;main.c: 318: for(j= 0; i < 6; j++)
  4392                           
  4393                           ; BSR set to: 3
  4394  0000B4  0E00               	movlw	0
  4395  0000B6  6F7D               	movwf	verifica_fence_externo@j& (0+255),b
  4396  0000B8                     l11897:
  4397                           
  4398                           ; BSR set to: 3
  4399  0000B8  0E05               	movlw	5
  4400  0000BA  6580               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4401  0000BC  D001               	goto	l149
  4402  0000BE  D059               	goto	u16100
  4403  0000C0                     l149:
  4404                           
  4405                           ; BSR set to: 3
  4406                           ;main.c: 319: {
  4407                           ;main.c: 320: poligono_ext[point_dif_long].point_long_deg[j] = temp_buff_long[i];
  4408                           
  4409                           ; BSR set to: 3
  4410  0000C0  5180               	movf	verifica_fence_externo@i& (0+255),w,b
  4411  0000C2  0D01               	mullw	1
  4412  0000C4  0E5C               	movlw	low verifica_fence_externo@temp_buff_long
  4413  0000C6  24F3               	addwf	prodl,w,c
  4414  0000C8  6ED9               	movwf	fsr2l,c
  4415  0000CA  0E03               	movlw	high verifica_fence_externo@temp_buff_long
  4416  0000CC  20F4               	addwfc	prodh,w,c
  4417  0000CE  6EDA               	movwf	fsr2h,c
  4418  0000D0  517D               	movf	verifica_fence_externo@j& (0+255),w,b
  4419  0000D2  0D01               	mullw	1
  4420  0000D4  0E12               	movlw	18
  4421  0000D6  26F3               	addwf	prodl,f,c
  4422  0000D8  0E00               	movlw	0
  4423  0000DA  22F4               	addwfc	prodh,f,c
  4424  0000DC  0E10               	movlw	low _poligono_ext
  4425  0000DE  0100               	movlb	0	; () banked
  4426  0000E0  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4427  0000E2  0E01               	movlw	high _poligono_ext
  4428  0000E4  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4429  0000E6  50F3               	movf	prodl,w,c
  4430  0000E8  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4431  0000EA  50F4               	movf	prodh,w,c
  4432  0000EC  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4433  0000EE  0103               	movlb	3	; () banked
  4434  0000F0  517C               	movf	verifica_fence_externo@point_dif_long& (0+255),w,b
  4435  0000F2  0D40               	mullw	64
  4436  0000F4  50F3               	movf	prodl,w,c
  4437  0000F6  0100               	movlb	0	; () banked
  4438  0000F8  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4439  0000FA  6EE1               	movwf	fsr1l,c
  4440  0000FC  50F4               	movf	prodh,w,c
  4441  0000FE  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4442  000100  6EE2               	movwf	fsr1h,c
  4443  000102  CFDF FFE7          	movff	indf2,indf1
  4444                           
  4445                           ;main.c: 321: poligono_ext[point_dif_long].fence_long_deg[j] = fence_diff_long[point][i]
      +                          ;
  4446  000106  0103               	movlb	3	; () banked
  4447  000108  517F               	movf	verifica_fence_externo@point& (0+255),w,b
  4448  00010A  0D0C               	mullw	12
  4449  00010C  0E00               	movlw	low verifica_fence_externo@fence_diff_long
  4450  00010E  0100               	movlb	0	; () banked
  4451  000110  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4452  000112  0E03               	movlw	high verifica_fence_externo@fence_diff_long
  4453  000114  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4454  000116  50F3               	movf	prodl,w,c
  4455  000118  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4456  00011A  50F4               	movf	prodh,w,c
  4457  00011C  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4458  00011E  0103               	movlb	3	; () banked
  4459  000120  5180               	movf	verifica_fence_externo@i& (0+255),w,b
  4460  000122  0D01               	mullw	1
  4461  000124  50F3               	movf	prodl,w,c
  4462  000126  0100               	movlb	0	; () banked
  4463  000128  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4464  00012A  6ED9               	movwf	fsr2l,c
  4465  00012C  50F4               	movf	prodh,w,c
  4466  00012E  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4467  000130  6EDA               	movwf	fsr2h,c
  4468  000132  0103               	movlb	3	; () banked
  4469  000134  517D               	movf	verifica_fence_externo@j& (0+255),w,b
  4470  000136  0D01               	mullw	1
  4471  000138  0E06               	movlw	6
  4472  00013A  26F3               	addwf	prodl,f,c
  4473  00013C  0E00               	movlw	0
  4474  00013E  22F4               	addwfc	prodh,f,c
  4475  000140  0E10               	movlw	low _poligono_ext
  4476  000142  0100               	movlb	0	; () banked
  4477  000144  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4478  000146  0E01               	movlw	high _poligono_ext
  4479  000148  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4480  00014A  50F3               	movf	prodl,w,c
  4481  00014C  2783               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  4482  00014E  50F4               	movf	prodh,w,c
  4483  000150  2384               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  4484  000152  0103               	movlb	3	; () banked
  4485  000154  517C               	movf	verifica_fence_externo@point_dif_long& (0+255),w,b
  4486  000156  0D40               	mullw	64
  4487  000158  50F3               	movf	prodl,w,c
  4488  00015A  0100               	movlb	0	; () banked
  4489  00015C  2583               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  4490  00015E  6EE1               	movwf	fsr1l,c
  4491  000160  50F4               	movf	prodh,w,c
  4492  000162  2184               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  4493  000164  6EE2               	movwf	fsr1h,c
  4494  000166  CFDF FFE7          	movff	indf2,indf1
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;main.c: 323: i++;
  4498  00016A  0103               	movlb	3	; () banked
  4499  00016C  2B80               	incf	verifica_fence_externo@i& (0+255),f,b
  4500                           
  4501                           ; BSR set to: 3
  4502  00016E  2B7D               	incf	verifica_fence_externo@j& (0+255),f,b
  4503  000170  D7A3               	goto	l11897
  4504  000172                     u16100:
  4505                           
  4506                           ; BSR set to: 3
  4507                           
  4508                           ; BSR set to: 3
  4509                           
  4510                           ; BSR set to: 3
  4511  000172  2B80               	incf	verifica_fence_externo@i& (0+255),f,b
  4512  000174  D78D               	goto	l11881
  4513  000176                     u16110:
  4514                           
  4515                           ; BSR set to: 3
  4516                           ;main.c: 324: }
  4517                           ;main.c: 326: }
  4518                           ;main.c: 328: }
  4519                           ;main.c: 330: for(i=1; i<5; i++)
  4520                           
  4521                           ; BSR set to: 3
  4522  000176  0E01               	movlw	1
  4523  000178  6F80               	movwf	verifica_fence_externo@i& (0+255),b
  4524  00017A                     l11915:
  4525                           
  4526                           ; BSR set to: 3
  4527  00017A  0E04               	movlw	4
  4528  00017C  6580               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4529  00017E  D001               	goto	l151
  4530  000180  D06B               	goto	u16190
  4531  000182                     l151:
  4532                           
  4533                           ; BSR set to: 3
  4534                           ;main.c: 331: {
  4535                           ;main.c: 332: if(point == 0 || point == 2)
  4536                           
  4537                           ; BSR set to: 3
  4538  000182  517F               	movf	verifica_fence_externo@point& (0+255),w,b
  4539  000184  B4D8               	btfsc	status,2,c
  4540  000186  D004               	goto	u16140
  4541                           
  4542                           ; BSR set to: 3
  4543  000188  0E02               	movlw	2
  4544  00018A  197F               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4545  00018C  A4D8               	btfss	status,2,c
  4546  00018E  D062               	goto	u16180
  4547  000190                     u16140:
  4548                           
  4549                           ; BSR set to: 3
  4550                           ;main.c: 333: {
  4551                           ;main.c: 335: if(point == 2 && !point_dif_lat)
  4552                           
  4553                           ; BSR set to: 3
  4554  000190  0E02               	movlw	2
  4555  000192  197F               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4556  000194  A4D8               	btfss	status,2,c
  4557  000196  D003               	goto	l156
  4558                           
  4559                           ; BSR set to: 3
  4560  000198  517B               	movf	verifica_fence_externo@point_dif_lat& (0+255),w,b
  4561  00019A  B4D8               	btfsc	status,2,c
  4562                           
  4563                           ; BSR set to: 3
  4564                           ;main.c: 336: {
  4565                           ;main.c: 337: point_dif_lat++;
  4566  00019C  2B7B               	incf	verifica_fence_externo@point_dif_lat& (0+255),f,b
  4567  00019E                     l156:
  4568                           
  4569                           ; BSR set to: 3
  4570                           ;main.c: 338: }
  4571                           ;main.c: 341: for(j= 0; i < 5; j++)
  4572                           
  4573                           ; BSR set to: 3
  4574  00019E  0E00               	movlw	0
  4575  0001A0  6F7D               	movwf	verifica_fence_externo@j& (0+255),b
  4576  0001A2                     l11931:
  4577                           
  4578                           ; BSR set to: 3
  4579  0001A2  0E04               	movlw	4
  4580  0001A4  6580               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4581  0001A6  D001               	goto	l157
  4582  0001A8  D055               	goto	u16180
  4583  0001AA                     l157:
  4584                           
  4585                           ; BSR set to: 3
  4586                           ;main.c: 342: {
  4587                           ;main.c: 343: poligono_ext[point_dif_lat].point_lat_deg[j] = temp_buff_lat[i];
  4588                           
  4589                           ; BSR set to: 3
  4590  0001AA  5180               	movf	verifica_fence_externo@i& (0+255),w,b
  4591  0001AC  0D01               	mullw	1
  4592  0001AE  0E68               	movlw	low verifica_fence_externo@temp_buff_lat
  4593  0001B0  24F3               	addwf	prodl,w,c
  4594  0001B2  6ED9               	movwf	fsr2l,c
  4595  0001B4  0E03               	movlw	high verifica_fence_externo@temp_buff_lat
  4596  0001B6  20F4               	addwfc	prodh,w,c
  4597  0001B8  6EDA               	movwf	fsr2h,c
  4598  0001BA  517D               	movf	verifica_fence_externo@j& (0+255),w,b
  4599  0001BC  0D01               	mullw	1
  4600  0001BE  0E0C               	movlw	12
  4601  0001C0  26F3               	addwf	prodl,f,c
  4602  0001C2  0E00               	movlw	0
  4603  0001C4  22F4               	addwfc	prodh,f,c
  4604  0001C6  0E10               	movlw	low _poligono_ext
  4605  0001C8  0100               	movlb	0	; () banked
  4606  0001CA  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4607  0001CC  0E01               	movlw	high _poligono_ext
  4608  0001CE  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4609  0001D0  50F3               	movf	prodl,w,c
  4610  0001D2  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4611  0001D4  50F4               	movf	prodh,w,c
  4612  0001D6  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4613  0001D8  0103               	movlb	3	; () banked
  4614  0001DA  517B               	movf	verifica_fence_externo@point_dif_lat& (0+255),w,b
  4615  0001DC  0D40               	mullw	64
  4616  0001DE  50F3               	movf	prodl,w,c
  4617  0001E0  0100               	movlb	0	; () banked
  4618  0001E2  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4619  0001E4  6EE1               	movwf	fsr1l,c
  4620  0001E6  50F4               	movf	prodh,w,c
  4621  0001E8  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4622  0001EA  6EE2               	movwf	fsr1h,c
  4623  0001EC  CFDF FFE7          	movff	indf2,indf1
  4624                           
  4625                           ;main.c: 344: poligono_ext[point_dif_lat].fence_lat_deg[j] = fence_diff_lat[point][i];
  4626  0001F0  0103               	movlb	3	; () banked
  4627  0001F2  517F               	movf	verifica_fence_externo@point& (0+255),w,b
  4628  0001F4  0D0B               	mullw	11
  4629  0001F6  0E30               	movlw	low verifica_fence_externo@fence_diff_lat
  4630  0001F8  0100               	movlb	0	; () banked
  4631  0001FA  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4632  0001FC  0E03               	movlw	high verifica_fence_externo@fence_diff_lat
  4633  0001FE  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4634  000200  50F3               	movf	prodl,w,c
  4635  000202  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4636  000204  50F4               	movf	prodh,w,c
  4637  000206  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4638  000208  0103               	movlb	3	; () banked
  4639  00020A  5180               	movf	verifica_fence_externo@i& (0+255),w,b
  4640  00020C  0D01               	mullw	1
  4641  00020E  50F3               	movf	prodl,w,c
  4642  000210  0100               	movlb	0	; () banked
  4643  000212  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4644  000214  6ED9               	movwf	fsr2l,c
  4645  000216  50F4               	movf	prodh,w,c
  4646  000218  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4647  00021A  6EDA               	movwf	fsr2h,c
  4648  00021C  0103               	movlb	3	; () banked
  4649  00021E  517B               	movf	verifica_fence_externo@point_dif_lat& (0+255),w,b
  4650  000220  0D40               	mullw	64
  4651  000222  0E10               	movlw	low _poligono_ext
  4652  000224  0100               	movlb	0	; () banked
  4653  000226  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4654  000228  0E01               	movlw	high _poligono_ext
  4655  00022A  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4656  00022C  50F3               	movf	prodl,w,c
  4657  00022E  2783               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  4658  000230  50F4               	movf	prodh,w,c
  4659  000232  2384               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  4660  000234  0103               	movlb	3	; () banked
  4661  000236  517D               	movf	verifica_fence_externo@j& (0+255),w,b
  4662  000238  0D01               	mullw	1
  4663  00023A  50F3               	movf	prodl,w,c
  4664  00023C  0100               	movlb	0	; () banked
  4665  00023E  2583               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  4666  000240  6EE1               	movwf	fsr1l,c
  4667  000242  50F4               	movf	prodh,w,c
  4668  000244  2184               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  4669  000246  6EE2               	movwf	fsr1h,c
  4670  000248  CFDF FFE7          	movff	indf2,indf1
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;main.c: 345: i++;
  4674  00024C  0103               	movlb	3	; () banked
  4675  00024E  2B80               	incf	verifica_fence_externo@i& (0+255),f,b
  4676                           
  4677                           ; BSR set to: 3
  4678  000250  2B7D               	incf	verifica_fence_externo@j& (0+255),f,b
  4679  000252  D7A7               	goto	l11931
  4680  000254                     u16180:
  4681                           
  4682                           ; BSR set to: 3
  4683                           
  4684                           ; BSR set to: 3
  4685                           
  4686                           ; BSR set to: 3
  4687  000254  2B80               	incf	verifica_fence_externo@i& (0+255),f,b
  4688  000256  D791               	goto	l11915
  4689  000258                     u16190:
  4690                           
  4691                           ; BSR set to: 3
  4692                           ;main.c: 346: }
  4693                           ;main.c: 348: }
  4694                           ;main.c: 349: }
  4695                           ;main.c: 353: if(point == 0 || point == 2)
  4696                           
  4697                           ; BSR set to: 3
  4698  000258  517F               	movf	verifica_fence_externo@point& (0+255),w,b
  4699  00025A  B4D8               	btfsc	status,2,c
  4700  00025C  D004               	goto	u16210
  4701                           
  4702                           ; BSR set to: 3
  4703  00025E  0E02               	movlw	2
  4704  000260  197F               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4705  000262  A4D8               	btfss	status,2,c
  4706  000264  D0B5               	goto	l159
  4707  000266                     u16210:
  4708                           
  4709                           ; BSR set to: 3
  4710                           ;main.c: 354: {
  4711                           ;main.c: 355: temp_var_deg = atoi(poligono_ext[count].point_lat_deg);
  4712                           
  4713                           ; BSR set to: 3
  4714  000266  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  4715  000268  0D40               	mullw	64
  4716  00026A  0E0C               	movlw	12
  4717  00026C  26F3               	addwf	prodl,f,c
  4718  00026E  0E00               	movlw	0
  4719  000270  22F4               	addwfc	prodh,f,c
  4720  000272  0E10               	movlw	low _poligono_ext
  4721  000274  24F3               	addwf	prodl,w,c
  4722  000276  0100               	movlb	0	; () banked
  4723  000278  6F66               	movwf	atoi@s& (0+255),b
  4724  00027A  0E01               	movlw	high _poligono_ext
  4725  00027C  20F4               	addwfc	prodh,w,c
  4726  00027E  6F67               	movwf	(atoi@s+1)& (0+255),b
  4727  000280  ECD4  F020         	call	_atoi	;wreg free
  4728  000284  0100               	movlb	0	; () banked
  4729  000286  C066  F377         	movff	?_atoi,verifica_fence_externo@temp_var_deg
  4730  00028A  C067  F378         	movff	?_atoi+1,verifica_fence_externo@temp_var_deg+1
  4731  00028E  0103               	movlb	3	; () banked
  4732  000290  0E00               	movlw	0
  4733  000292  BF78               	btfsc	(verifica_fence_externo@temp_var_deg+1)& (0+255),7,b
  4734  000294  0EFF               	movlw	-1
  4735  000296  6F79               	movwf	(verifica_fence_externo@temp_var_deg+2)& (0+255),b
  4736  000298  6F7A               	movwf	(verifica_fence_externo@temp_var_deg+3)& (0+255),b
  4737                           
  4738                           ;main.c: 356: poligono_ext[count].diff_lat_deg = atoi(poligono_ext[count].fence_lat_deg)
      +                          ;
  4739  00029A  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  4740  00029C  0D40               	mullw	64
  4741  00029E  0E10               	movlw	low _poligono_ext
  4742  0002A0  24F3               	addwf	prodl,w,c
  4743  0002A2  0100               	movlb	0	; () banked
  4744  0002A4  6F66               	movwf	atoi@s& (0+255),b
  4745  0002A6  0E01               	movlw	high _poligono_ext
  4746  0002A8  20F4               	addwfc	prodh,w,c
  4747  0002AA  6F67               	movwf	(atoi@s+1)& (0+255),b
  4748  0002AC  ECD4  F020         	call	_atoi	;wreg free
  4749  0002B0  0100               	movlb	0	; () banked
  4750  0002B2  C066  F081         	movff	?_atoi,??_verifica_fence_externo
  4751  0002B6  C067  F082         	movff	?_atoi+1,??_verifica_fence_externo+1
  4752  0002BA  0E00               	movlw	0
  4753  0002BC  BF82               	btfsc	(??_verifica_fence_externo+1)& (0+255),7,b
  4754  0002BE  0EFF               	movlw	255
  4755  0002C0  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4756  0002C2  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4757  0002C4  0103               	movlb	3	; () banked
  4758  0002C6  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  4759  0002C8  0D40               	mullw	64
  4760  0002CA  0E18               	movlw	24
  4761  0002CC  26F3               	addwf	prodl,f,c
  4762  0002CE  0E00               	movlw	0
  4763  0002D0  22F4               	addwfc	prodh,f,c
  4764  0002D2  0E10               	movlw	low _poligono_ext
  4765  0002D4  24F3               	addwf	prodl,w,c
  4766  0002D6  6ED9               	movwf	fsr2l,c
  4767  0002D8  0E01               	movlw	high _poligono_ext
  4768  0002DA  20F4               	addwfc	prodh,w,c
  4769  0002DC  6EDA               	movwf	fsr2h,c
  4770  0002DE  C081  FFDE         	movff	??_verifica_fence_externo,postinc2
  4771  0002E2  C082  FFDE         	movff	??_verifica_fence_externo+1,postinc2
  4772  0002E6  C083  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  4773  0002EA  C084  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  4774                           
  4775                           ; BSR set to: 3
  4776                           ;main.c: 357: poligono_ext[count].diff_lat_deg -= temp_var_deg;
  4777  0002EE  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  4778  0002F0  0D40               	mullw	64
  4779  0002F2  0E18               	movlw	24
  4780  0002F4  26F3               	addwf	prodl,f,c
  4781  0002F6  0E00               	movlw	0
  4782  0002F8  22F4               	addwfc	prodh,f,c
  4783  0002FA  0E10               	movlw	low _poligono_ext
  4784  0002FC  24F3               	addwf	prodl,w,c
  4785  0002FE  6ED9               	movwf	fsr2l,c
  4786  000300  0E01               	movlw	high _poligono_ext
  4787  000302  20F4               	addwfc	prodh,w,c
  4788  000304  6EDA               	movwf	fsr2h,c
  4789  000306  5177               	movf	verifica_fence_externo@temp_var_deg& (0+255),w,b
  4790  000308  5EDE               	subwf	postinc2,f,c
  4791  00030A  5178               	movf	(verifica_fence_externo@temp_var_deg+1)& (0+255),w,b
  4792  00030C  5ADE               	subwfb	postinc2,f,c
  4793  00030E  5179               	movf	(verifica_fence_externo@temp_var_deg+2)& (0+255),w,b
  4794  000310  5ADE               	subwfb	postinc2,f,c
  4795  000312  517A               	movf	(verifica_fence_externo@temp_var_deg+3)& (0+255),w,b
  4796  000314  5ADE               	subwfb	postinc2,f,c
  4797                           
  4798                           ; BSR set to: 3
  4799                           ;main.c: 358: temp_var_deg = atoi(poligono_ext[count].point_long_deg);
  4800  000316  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  4801  000318  0D40               	mullw	64
  4802  00031A  0E12               	movlw	18
  4803  00031C  26F3               	addwf	prodl,f,c
  4804  00031E  0E00               	movlw	0
  4805  000320  22F4               	addwfc	prodh,f,c
  4806  000322  0E10               	movlw	low _poligono_ext
  4807  000324  24F3               	addwf	prodl,w,c
  4808  000326  0100               	movlb	0	; () banked
  4809  000328  6F66               	movwf	atoi@s& (0+255),b
  4810  00032A  0E01               	movlw	high _poligono_ext
  4811  00032C  20F4               	addwfc	prodh,w,c
  4812  00032E  6F67               	movwf	(atoi@s+1)& (0+255),b
  4813  000330  ECD4  F020         	call	_atoi	;wreg free
  4814  000334  0100               	movlb	0	; () banked
  4815  000336  C066  F377         	movff	?_atoi,verifica_fence_externo@temp_var_deg
  4816  00033A  C067  F378         	movff	?_atoi+1,verifica_fence_externo@temp_var_deg+1
  4817  00033E  0103               	movlb	3	; () banked
  4818  000340  0E00               	movlw	0
  4819  000342  BF78               	btfsc	(verifica_fence_externo@temp_var_deg+1)& (0+255),7,b
  4820  000344  0EFF               	movlw	-1
  4821  000346  6F79               	movwf	(verifica_fence_externo@temp_var_deg+2)& (0+255),b
  4822  000348  6F7A               	movwf	(verifica_fence_externo@temp_var_deg+3)& (0+255),b
  4823                           
  4824                           ; BSR set to: 3
  4825                           ;main.c: 359: poligono_ext[count].diff_long_deg = atoi(poligono_ext[count].fence_long_de
      +                          g);
  4826  00034A  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  4827  00034C  0D40               	mullw	64
  4828  00034E  0E06               	movlw	6
  4829  000350  26F3               	addwf	prodl,f,c
  4830  000352  0E00               	movlw	0
  4831  000354  22F4               	addwfc	prodh,f,c
  4832  000356  0E10               	movlw	low _poligono_ext
  4833  000358  24F3               	addwf	prodl,w,c
  4834  00035A  0100               	movlb	0	; () banked
  4835  00035C  6F66               	movwf	atoi@s& (0+255),b
  4836  00035E  0E01               	movlw	high _poligono_ext
  4837  000360  20F4               	addwfc	prodh,w,c
  4838  000362  6F67               	movwf	(atoi@s+1)& (0+255),b
  4839  000364  ECD4  F020         	call	_atoi	;wreg free
  4840  000368  0100               	movlb	0	; () banked
  4841  00036A  C066  F081         	movff	?_atoi,??_verifica_fence_externo
  4842  00036E  C067  F082         	movff	?_atoi+1,??_verifica_fence_externo+1
  4843  000372  0E00               	movlw	0
  4844  000374  BF82               	btfsc	(??_verifica_fence_externo+1)& (0+255),7,b
  4845  000376  0EFF               	movlw	255
  4846  000378  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4847  00037A  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4848  00037C  0103               	movlb	3	; () banked
  4849  00037E  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  4850  000380  0D40               	mullw	64
  4851  000382  0E1C               	movlw	28
  4852  000384  26F3               	addwf	prodl,f,c
  4853  000386  0E00               	movlw	0
  4854  000388  22F4               	addwfc	prodh,f,c
  4855  00038A  0E10               	movlw	low _poligono_ext
  4856  00038C  24F3               	addwf	prodl,w,c
  4857  00038E  6ED9               	movwf	fsr2l,c
  4858  000390  0E01               	movlw	high _poligono_ext
  4859  000392  20F4               	addwfc	prodh,w,c
  4860  000394  6EDA               	movwf	fsr2h,c
  4861  000396  C081  FFDE         	movff	??_verifica_fence_externo,postinc2
  4862  00039A  C082  FFDE         	movff	??_verifica_fence_externo+1,postinc2
  4863  00039E  C083  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  4864  0003A2  C084  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  4865                           
  4866                           ; BSR set to: 3
  4867                           ;main.c: 360: poligono_ext[count].diff_long_deg -= temp_var_deg;
  4868  0003A6  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  4869  0003A8  0D40               	mullw	64
  4870  0003AA  0E1C               	movlw	28
  4871  0003AC  26F3               	addwf	prodl,f,c
  4872  0003AE  0E00               	movlw	0
  4873  0003B0  22F4               	addwfc	prodh,f,c
  4874  0003B2  0E10               	movlw	low _poligono_ext
  4875  0003B4  24F3               	addwf	prodl,w,c
  4876  0003B6  6ED9               	movwf	fsr2l,c
  4877  0003B8  0E01               	movlw	high _poligono_ext
  4878  0003BA  20F4               	addwfc	prodh,w,c
  4879  0003BC  6EDA               	movwf	fsr2h,c
  4880  0003BE  5177               	movf	verifica_fence_externo@temp_var_deg& (0+255),w,b
  4881  0003C0  5EDE               	subwf	postinc2,f,c
  4882  0003C2  5178               	movf	(verifica_fence_externo@temp_var_deg+1)& (0+255),w,b
  4883  0003C4  5ADE               	subwfb	postinc2,f,c
  4884  0003C6  5179               	movf	(verifica_fence_externo@temp_var_deg+2)& (0+255),w,b
  4885  0003C8  5ADE               	subwfb	postinc2,f,c
  4886  0003CA  517A               	movf	(verifica_fence_externo@temp_var_deg+3)& (0+255),w,b
  4887  0003CC  5ADE               	subwfb	postinc2,f,c
  4888                           
  4889                           ; BSR set to: 3
  4890                           ;main.c: 362: count++;
  4891  0003CE  2B7E               	incf	verifica_fence_externo@count& (0+255),f,b
  4892  0003D0                     l159:
  4893                           
  4894                           ; BSR set to: 3
  4895                           ;main.c: 363: }
  4896                           ;main.c: 364: point++;
  4897                           
  4898                           ; BSR set to: 3
  4899  0003D0  2B7F               	incf	verifica_fence_externo@point& (0+255),f,b
  4900  0003D2                     l141:
  4901                           
  4902                           ; BSR set to: 3
  4903  0003D2  0E03               	movlw	3
  4904  0003D4  0103               	movlb	3	; () banked
  4905  0003D6  657F               	cpfsgt	verifica_fence_externo@point& (0+255),b
  4906  0003D8  D658               	goto	l142
  4907                           
  4908                           ; BSR set to: 3
  4909                           ;main.c: 365: }
  4910                           ;main.c: 371: point = 0;
  4911                           
  4912                           ; BSR set to: 3
  4913  0003DA  0E00               	movlw	0
  4914  0003DC  6F7F               	movwf	verifica_fence_externo@point& (0+255),b
  4915                           
  4916                           ;main.c: 372: count = 0;
  4917  0003DE  0E00               	movlw	0
  4918  0003E0  6F7E               	movwf	verifica_fence_externo@count& (0+255),b
  4919                           
  4920                           ;main.c: 373: point_dif_lat = 0;
  4921  0003E2  0E00               	movlw	0
  4922  0003E4  6F7B               	movwf	verifica_fence_externo@point_dif_lat& (0+255),b
  4923                           
  4924                           ;main.c: 374: point_dif_long = 0;
  4925  0003E6  0E00               	movlw	0
  4926  0003E8  6F7C               	movwf	verifica_fence_externo@point_dif_long& (0+255),b
  4927                           
  4928                           ;main.c: 378: while(point<4)
  4929  0003EA  D1CD               	goto	l163
  4930  0003EC                     
  4931                           ; BSR set to: 3
  4932                           ;main.c: 379: {
  4933                           ;main.c: 380: for(i=6; i<11; i++)
  4934                           
  4935                           ; BSR set to: 3
  4936  0003EC  0E06               	movlw	6
  4937  0003EE  6F80               	movwf	verifica_fence_externo@i& (0+255),b
  4938  0003F0                     l11971:
  4939                           
  4940                           ; BSR set to: 3
  4941  0003F0  0E0A               	movlw	10
  4942  0003F2  6580               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4943  0003F4  D001               	goto	l165
  4944  0003F6  D094               	goto	u16310
  4945  0003F8                     l165:
  4946                           
  4947                           ; BSR set to: 3
  4948                           ;main.c: 381: {
  4949                           ;main.c: 382: if(point == 0 || point == 2)
  4950                           
  4951                           ; BSR set to: 3
  4952  0003F8  517F               	movf	verifica_fence_externo@point& (0+255),w,b
  4953  0003FA  B4D8               	btfsc	status,2,c
  4954  0003FC  D004               	goto	u16250
  4955                           
  4956                           ; BSR set to: 3
  4957  0003FE  0E02               	movlw	2
  4958  000400  197F               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4959  000402  A4D8               	btfss	status,2,c
  4960  000404  D088               	goto	l167
  4961  000406                     u16250:
  4962                           
  4963                           ; BSR set to: 3
  4964                           ;main.c: 383: {
  4965                           ;main.c: 384: if(point == 2 && !point_dif_lat)
  4966                           
  4967                           ; BSR set to: 3
  4968  000406  0E02               	movlw	2
  4969  000408  197F               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4970  00040A  A4D8               	btfss	status,2,c
  4971  00040C  D003               	goto	l170
  4972                           
  4973                           ; BSR set to: 3
  4974  00040E  517B               	movf	verifica_fence_externo@point_dif_lat& (0+255),w,b
  4975  000410  B4D8               	btfsc	status,2,c
  4976                           
  4977                           ; BSR set to: 3
  4978                           ;main.c: 385: {
  4979                           ;main.c: 386: point_dif_lat++;
  4980  000412  2B7B               	incf	verifica_fence_externo@point_dif_lat& (0+255),f,b
  4981  000414                     l170:
  4982                           
  4983                           ; BSR set to: 3
  4984                           ;main.c: 387: }
  4985                           ;main.c: 388: if(fence_diff_lat[point][i] != temp_buff_lat[i])
  4986                           
  4987                           ; BSR set to: 3
  4988  000414  5180               	movf	verifica_fence_externo@i& (0+255),w,b
  4989  000416  0D01               	mullw	1
  4990  000418  0E68               	movlw	low verifica_fence_externo@temp_buff_lat
  4991  00041A  24F3               	addwf	prodl,w,c
  4992  00041C  6ED9               	movwf	fsr2l,c
  4993  00041E  0E03               	movlw	high verifica_fence_externo@temp_buff_lat
  4994  000420  20F4               	addwfc	prodh,w,c
  4995  000422  6EDA               	movwf	fsr2h,c
  4996  000424  517F               	movf	verifica_fence_externo@point& (0+255),w,b
  4997  000426  0D0B               	mullw	11
  4998  000428  0E30               	movlw	low verifica_fence_externo@fence_diff_lat
  4999  00042A  0100               	movlb	0	; () banked
  5000  00042C  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5001  00042E  0E03               	movlw	high verifica_fence_externo@fence_diff_lat
  5002  000430  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5003  000432  50F3               	movf	prodl,w,c
  5004  000434  2782               	addwf	(??_verifica_fence_externo+1)& (0+255),f,b
  5005  000436  50F4               	movf	prodh,w,c
  5006  000438  2383               	addwfc	(??_verifica_fence_externo+2)& (0+255),f,b
  5007  00043A  0103               	movlb	3	; () banked
  5008  00043C  5180               	movf	verifica_fence_externo@i& (0+255),w,b
  5009  00043E  0D01               	mullw	1
  5010  000440  50F3               	movf	prodl,w,c
  5011  000442  0100               	movlb	0	; () banked
  5012  000444  2582               	addwf	(??_verifica_fence_externo+1)& (0+255),w,b
  5013  000446  6EE1               	movwf	fsr1l,c
  5014  000448  50F4               	movf	prodh,w,c
  5015  00044A  2183               	addwfc	(??_verifica_fence_externo+2)& (0+255),w,b
  5016  00044C  6EE2               	movwf	fsr1h,c
  5017  00044E  50DE               	movf	postinc2,w,c
  5018  000450  18E6               	xorwf	postinc1,w,c
  5019  000452  B4D8               	btfsc	status,2,c
  5020  000454  D062               	goto	l174
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;main.c: 389: {
  5024                           ;main.c: 390: for(j= 0; i < 11; j++)
  5025  000456  0E00               	movlw	0
  5026  000458  0103               	movlb	3	; () banked
  5027  00045A  6F7D               	movwf	verifica_fence_externo@j& (0+255),b
  5028  00045C                     l11989:
  5029                           
  5030                           ; BSR set to: 3
  5031  00045C  0E0A               	movlw	10
  5032  00045E  6580               	cpfsgt	verifica_fence_externo@i& (0+255),b
  5033  000460  D001               	goto	l172
  5034  000462  D05B               	goto	l174
  5035  000464                     l172:
  5036                           
  5037                           ; BSR set to: 3
  5038                           ;main.c: 391: {
  5039                           ;main.c: 392: poligono_ext[point_dif_lat].fence_lat_min[j] = fence_diff_lat[point][i];
  5040                           
  5041                           ; BSR set to: 3
  5042  000464  517F               	movf	verifica_fence_externo@point& (0+255),w,b
  5043  000466  0D0B               	mullw	11
  5044  000468  0E30               	movlw	low verifica_fence_externo@fence_diff_lat
  5045  00046A  0100               	movlb	0	; () banked
  5046  00046C  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  5047  00046E  0E03               	movlw	high verifica_fence_externo@fence_diff_lat
  5048  000470  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5049  000472  50F3               	movf	prodl,w,c
  5050  000474  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  5051  000476  50F4               	movf	prodh,w,c
  5052  000478  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  5053  00047A  0103               	movlb	3	; () banked
  5054  00047C  5180               	movf	verifica_fence_externo@i& (0+255),w,b
  5055  00047E  0D01               	mullw	1
  5056  000480  50F3               	movf	prodl,w,c
  5057  000482  0100               	movlb	0	; () banked
  5058  000484  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5059  000486  6ED9               	movwf	fsr2l,c
  5060  000488  50F4               	movf	prodh,w,c
  5061  00048A  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5062  00048C  6EDA               	movwf	fsr2h,c
  5063  00048E  0103               	movlb	3	; () banked
  5064  000490  517D               	movf	verifica_fence_externo@j& (0+255),w,b
  5065  000492  0D01               	mullw	1
  5066  000494  0E20               	movlw	32
  5067  000496  26F3               	addwf	prodl,f,c
  5068  000498  0E00               	movlw	0
  5069  00049A  22F4               	addwfc	prodh,f,c
  5070  00049C  0E10               	movlw	low _poligono_ext
  5071  00049E  0100               	movlb	0	; () banked
  5072  0004A0  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5073  0004A2  0E01               	movlw	high _poligono_ext
  5074  0004A4  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  5075  0004A6  50F3               	movf	prodl,w,c
  5076  0004A8  2783               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  5077  0004AA  50F4               	movf	prodh,w,c
  5078  0004AC  2384               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  5079  0004AE  0103               	movlb	3	; () banked
  5080  0004B0  517B               	movf	verifica_fence_externo@point_dif_lat& (0+255),w,b
  5081  0004B2  0D40               	mullw	64
  5082  0004B4  50F3               	movf	prodl,w,c
  5083  0004B6  0100               	movlb	0	; () banked
  5084  0004B8  2583               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  5085  0004BA  6EE1               	movwf	fsr1l,c
  5086  0004BC  50F4               	movf	prodh,w,c
  5087  0004BE  2184               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  5088  0004C0  6EE2               	movwf	fsr1h,c
  5089  0004C2  CFDF FFE7          	movff	indf2,indf1
  5090                           
  5091                           ;main.c: 393: poligono_ext[point_dif_lat].point_lat_min[j] = temp_buff_lat[i];
  5092  0004C6  0103               	movlb	3	; () banked
  5093  0004C8  5180               	movf	verifica_fence_externo@i& (0+255),w,b
  5094  0004CA  0D01               	mullw	1
  5095  0004CC  0E68               	movlw	low verifica_fence_externo@temp_buff_lat
  5096  0004CE  24F3               	addwf	prodl,w,c
  5097  0004D0  6ED9               	movwf	fsr2l,c
  5098  0004D2  0E03               	movlw	high verifica_fence_externo@temp_buff_lat
  5099  0004D4  20F4               	addwfc	prodh,w,c
  5100  0004D6  6EDA               	movwf	fsr2h,c
  5101  0004D8  517D               	movf	verifica_fence_externo@j& (0+255),w,b
  5102  0004DA  0D01               	mullw	1
  5103  0004DC  0E2C               	movlw	44
  5104  0004DE  26F3               	addwf	prodl,f,c
  5105  0004E0  0E00               	movlw	0
  5106  0004E2  22F4               	addwfc	prodh,f,c
  5107  0004E4  0E10               	movlw	low _poligono_ext
  5108  0004E6  0100               	movlb	0	; () banked
  5109  0004E8  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  5110  0004EA  0E01               	movlw	high _poligono_ext
  5111  0004EC  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5112  0004EE  50F3               	movf	prodl,w,c
  5113  0004F0  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  5114  0004F2  50F4               	movf	prodh,w,c
  5115  0004F4  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  5116  0004F6  0103               	movlb	3	; () banked
  5117  0004F8  517B               	movf	verifica_fence_externo@point_dif_lat& (0+255),w,b
  5118  0004FA  0D40               	mullw	64
  5119  0004FC  50F3               	movf	prodl,w,c
  5120  0004FE  0100               	movlb	0	; () banked
  5121  000500  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5122  000502  6EE1               	movwf	fsr1l,c
  5123  000504  50F4               	movf	prodh,w,c
  5124  000506  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5125  000508  6EE2               	movwf	fsr1h,c
  5126  00050A  CFDF FFE7          	movff	indf2,indf1
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;main.c: 394: i++;
  5130  00050E  0103               	movlb	3	; () banked
  5131  000510  2B80               	incf	verifica_fence_externo@i& (0+255),f,b
  5132                           
  5133                           ; BSR set to: 3
  5134  000512  2B7D               	incf	verifica_fence_externo@j& (0+255),f,b
  5135  000514  D7A3               	goto	l11989
  5136  000516                     l167:
  5137                           
  5138                           ; BSR set to: 3
  5139                           ;main.c: 400: else
  5140                           ;main.c: 401: {
  5141                           ;main.c: 402: i = 11;
  5142                           
  5143                           ; BSR set to: 3
  5144  000516  0E0B               	movlw	11
  5145  000518  6F80               	movwf	verifica_fence_externo@i& (0+255),b
  5146  00051A                     l174:
  5147                           
  5148                           ; BSR set to: 3
  5149  00051A  0103               	movlb	3	; () banked
  5150  00051C  2B80               	incf	verifica_fence_externo@i& (0+255),f,b
  5151  00051E  D768               	goto	l11971
  5152  000520                     u16310:
  5153                           
  5154                           ; BSR set to: 3
  5155                           ;main.c: 403: }
  5156                           ;main.c: 404: }
  5157                           ;main.c: 406: for(i=7; i<12; i++)
  5158                           
  5159                           ; BSR set to: 3
  5160  000520  0E07               	movlw	7
  5161  000522  6F80               	movwf	verifica_fence_externo@i& (0+255),b
  5162  000524                     l12009:
  5163                           
  5164                           ; BSR set to: 3
  5165  000524  0E0B               	movlw	11
  5166  000526  6580               	cpfsgt	verifica_fence_externo@i& (0+255),b
  5167  000528  D001               	goto	l175
  5168  00052A  D094               	goto	u16400
  5169  00052C                     l175:
  5170                           
  5171                           ; BSR set to: 3
  5172                           ;main.c: 407: {
  5173                           ;main.c: 408: if(point == 0 || point == 2)
  5174                           
  5175                           ; BSR set to: 3
  5176  00052C  517F               	movf	verifica_fence_externo@point& (0+255),w,b
  5177  00052E  B4D8               	btfsc	status,2,c
  5178  000530  D004               	goto	u16340
  5179                           
  5180                           ; BSR set to: 3
  5181  000532  0E02               	movlw	2
  5182  000534  197F               	xorwf	verifica_fence_externo@point& (0+255),w,b
  5183  000536  A4D8               	btfss	status,2,c
  5184  000538  D088               	goto	l177
  5185  00053A                     u16340:
  5186                           
  5187                           ; BSR set to: 3
  5188                           ;main.c: 409: {
  5189                           ;main.c: 410: if(point == 2 && !point_dif_long)
  5190                           
  5191                           ; BSR set to: 3
  5192  00053A  0E02               	movlw	2
  5193  00053C  197F               	xorwf	verifica_fence_externo@point& (0+255),w,b
  5194  00053E  A4D8               	btfss	status,2,c
  5195  000540  D003               	goto	l180
  5196                           
  5197                           ; BSR set to: 3
  5198  000542  517C               	movf	verifica_fence_externo@point_dif_long& (0+255),w,b
  5199  000544  B4D8               	btfsc	status,2,c
  5200                           
  5201                           ; BSR set to: 3
  5202                           ;main.c: 411: {
  5203                           ;main.c: 412: point_dif_long++;
  5204  000546  2B7C               	incf	verifica_fence_externo@point_dif_long& (0+255),f,b
  5205  000548                     l180:
  5206                           
  5207                           ; BSR set to: 3
  5208                           ;main.c: 413: }
  5209                           ;main.c: 416: if(fence_diff_long[point][i] != temp_buff_long[i])
  5210                           
  5211                           ; BSR set to: 3
  5212  000548  5180               	movf	verifica_fence_externo@i& (0+255),w,b
  5213  00054A  0D01               	mullw	1
  5214  00054C  0E5C               	movlw	low verifica_fence_externo@temp_buff_long
  5215  00054E  24F3               	addwf	prodl,w,c
  5216  000550  6ED9               	movwf	fsr2l,c
  5217  000552  0E03               	movlw	high verifica_fence_externo@temp_buff_long
  5218  000554  20F4               	addwfc	prodh,w,c
  5219  000556  6EDA               	movwf	fsr2h,c
  5220  000558  517F               	movf	verifica_fence_externo@point& (0+255),w,b
  5221  00055A  0D0C               	mullw	12
  5222  00055C  0E00               	movlw	low verifica_fence_externo@fence_diff_long
  5223  00055E  0100               	movlb	0	; () banked
  5224  000560  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5225  000562  0E03               	movlw	high verifica_fence_externo@fence_diff_long
  5226  000564  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5227  000566  50F3               	movf	prodl,w,c
  5228  000568  2782               	addwf	(??_verifica_fence_externo+1)& (0+255),f,b
  5229  00056A  50F4               	movf	prodh,w,c
  5230  00056C  2383               	addwfc	(??_verifica_fence_externo+2)& (0+255),f,b
  5231  00056E  0103               	movlb	3	; () banked
  5232  000570  5180               	movf	verifica_fence_externo@i& (0+255),w,b
  5233  000572  0D01               	mullw	1
  5234  000574  50F3               	movf	prodl,w,c
  5235  000576  0100               	movlb	0	; () banked
  5236  000578  2582               	addwf	(??_verifica_fence_externo+1)& (0+255),w,b
  5237  00057A  6EE1               	movwf	fsr1l,c
  5238  00057C  50F4               	movf	prodh,w,c
  5239  00057E  2183               	addwfc	(??_verifica_fence_externo+2)& (0+255),w,b
  5240  000580  6EE2               	movwf	fsr1h,c
  5241  000582  50DE               	movf	postinc2,w,c
  5242  000584  18E6               	xorwf	postinc1,w,c
  5243  000586  B4D8               	btfsc	status,2,c
  5244  000588  D062               	goto	l184
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;main.c: 417: {
  5248                           ;main.c: 418: for(j= 0; i < 12; j++)
  5249  00058A  0E00               	movlw	0
  5250  00058C  0103               	movlb	3	; () banked
  5251  00058E  6F7D               	movwf	verifica_fence_externo@j& (0+255),b
  5252  000590                     l12027:
  5253                           
  5254                           ; BSR set to: 3
  5255  000590  0E0B               	movlw	11
  5256  000592  6580               	cpfsgt	verifica_fence_externo@i& (0+255),b
  5257  000594  D001               	goto	l182
  5258  000596  D05B               	goto	l184
  5259  000598                     l182:
  5260                           
  5261                           ; BSR set to: 3
  5262                           ;main.c: 419: {
  5263                           ;main.c: 420: poligono_ext[point_dif_long].fence_long_min[j] = fence_diff_long[point][i]
      +                          ;
  5264                           
  5265                           ; BSR set to: 3
  5266  000598  517F               	movf	verifica_fence_externo@point& (0+255),w,b
  5267  00059A  0D0C               	mullw	12
  5268  00059C  0E00               	movlw	low verifica_fence_externo@fence_diff_long
  5269  00059E  0100               	movlb	0	; () banked
  5270  0005A0  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  5271  0005A2  0E03               	movlw	high verifica_fence_externo@fence_diff_long
  5272  0005A4  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5273  0005A6  50F3               	movf	prodl,w,c
  5274  0005A8  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  5275  0005AA  50F4               	movf	prodh,w,c
  5276  0005AC  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  5277  0005AE  0103               	movlb	3	; () banked
  5278  0005B0  5180               	movf	verifica_fence_externo@i& (0+255),w,b
  5279  0005B2  0D01               	mullw	1
  5280  0005B4  50F3               	movf	prodl,w,c
  5281  0005B6  0100               	movlb	0	; () banked
  5282  0005B8  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5283  0005BA  6ED9               	movwf	fsr2l,c
  5284  0005BC  50F4               	movf	prodh,w,c
  5285  0005BE  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5286  0005C0  6EDA               	movwf	fsr2h,c
  5287  0005C2  0103               	movlb	3	; () banked
  5288  0005C4  517D               	movf	verifica_fence_externo@j& (0+255),w,b
  5289  0005C6  0D01               	mullw	1
  5290  0005C8  0E26               	movlw	38
  5291  0005CA  26F3               	addwf	prodl,f,c
  5292  0005CC  0E00               	movlw	0
  5293  0005CE  22F4               	addwfc	prodh,f,c
  5294  0005D0  0E10               	movlw	low _poligono_ext
  5295  0005D2  0100               	movlb	0	; () banked
  5296  0005D4  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5297  0005D6  0E01               	movlw	high _poligono_ext
  5298  0005D8  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  5299  0005DA  50F3               	movf	prodl,w,c
  5300  0005DC  2783               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  5301  0005DE  50F4               	movf	prodh,w,c
  5302  0005E0  2384               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  5303  0005E2  0103               	movlb	3	; () banked
  5304  0005E4  517C               	movf	verifica_fence_externo@point_dif_long& (0+255),w,b
  5305  0005E6  0D40               	mullw	64
  5306  0005E8  50F3               	movf	prodl,w,c
  5307  0005EA  0100               	movlb	0	; () banked
  5308  0005EC  2583               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  5309  0005EE  6EE1               	movwf	fsr1l,c
  5310  0005F0  50F4               	movf	prodh,w,c
  5311  0005F2  2184               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  5312  0005F4  6EE2               	movwf	fsr1h,c
  5313  0005F6  CFDF FFE7          	movff	indf2,indf1
  5314                           
  5315                           ;main.c: 421: poligono_ext[point_dif_long].point_long_min[j] = temp_buff_long[i];
  5316  0005FA  0103               	movlb	3	; () banked
  5317  0005FC  5180               	movf	verifica_fence_externo@i& (0+255),w,b
  5318  0005FE  0D01               	mullw	1
  5319  000600  0E5C               	movlw	low verifica_fence_externo@temp_buff_long
  5320  000602  24F3               	addwf	prodl,w,c
  5321  000604  6ED9               	movwf	fsr2l,c
  5322  000606  0E03               	movlw	high verifica_fence_externo@temp_buff_long
  5323  000608  20F4               	addwfc	prodh,w,c
  5324  00060A  6EDA               	movwf	fsr2h,c
  5325  00060C  517D               	movf	verifica_fence_externo@j& (0+255),w,b
  5326  00060E  0D01               	mullw	1
  5327  000610  0E32               	movlw	50
  5328  000612  26F3               	addwf	prodl,f,c
  5329  000614  0E00               	movlw	0
  5330  000616  22F4               	addwfc	prodh,f,c
  5331  000618  0E10               	movlw	low _poligono_ext
  5332  00061A  0100               	movlb	0	; () banked
  5333  00061C  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  5334  00061E  0E01               	movlw	high _poligono_ext
  5335  000620  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5336  000622  50F3               	movf	prodl,w,c
  5337  000624  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  5338  000626  50F4               	movf	prodh,w,c
  5339  000628  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  5340  00062A  0103               	movlb	3	; () banked
  5341  00062C  517C               	movf	verifica_fence_externo@point_dif_long& (0+255),w,b
  5342  00062E  0D40               	mullw	64
  5343  000630  50F3               	movf	prodl,w,c
  5344  000632  0100               	movlb	0	; () banked
  5345  000634  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5346  000636  6EE1               	movwf	fsr1l,c
  5347  000638  50F4               	movf	prodh,w,c
  5348  00063A  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5349  00063C  6EE2               	movwf	fsr1h,c
  5350  00063E  CFDF FFE7          	movff	indf2,indf1
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;main.c: 422: i++;
  5354  000642  0103               	movlb	3	; () banked
  5355  000644  2B80               	incf	verifica_fence_externo@i& (0+255),f,b
  5356                           
  5357                           ; BSR set to: 3
  5358  000646  2B7D               	incf	verifica_fence_externo@j& (0+255),f,b
  5359  000648  D7A3               	goto	l12027
  5360  00064A                     l177:
  5361                           
  5362                           ; BSR set to: 3
  5363                           ;main.c: 426: else
  5364                           ;main.c: 427: {
  5365                           ;main.c: 428: i = 11;
  5366                           
  5367                           ; BSR set to: 3
  5368  00064A  0E0B               	movlw	11
  5369  00064C  6F80               	movwf	verifica_fence_externo@i& (0+255),b
  5370  00064E                     l184:
  5371                           
  5372                           ; BSR set to: 3
  5373  00064E  0103               	movlb	3	; () banked
  5374  000650  2B80               	incf	verifica_fence_externo@i& (0+255),f,b
  5375  000652  D768               	goto	l12009
  5376  000654                     u16400:
  5377                           
  5378                           ; BSR set to: 3
  5379                           ;main.c: 429: }
  5380                           ;main.c: 431: }
  5381                           ;main.c: 432: if(point == 0 || point == 2)
  5382                           
  5383                           ; BSR set to: 3
  5384  000654  517F               	movf	verifica_fence_externo@point& (0+255),w,b
  5385  000656  B4D8               	btfsc	status,2,c
  5386  000658  D004               	goto	u16420
  5387                           
  5388                           ; BSR set to: 3
  5389  00065A  0E02               	movlw	2
  5390  00065C  197F               	xorwf	verifica_fence_externo@point& (0+255),w,b
  5391  00065E  A4D8               	btfss	status,2,c
  5392  000660  D091               	goto	l185
  5393  000662                     u16420:
  5394                           
  5395                           ; BSR set to: 3
  5396                           ;main.c: 433: {
  5397                           ;main.c: 434: poligono_ext[count].diff_lat_min = (atoi(poligono_ext[count].fence_lat_min
      +                          )) - (atoi(poligono_ext[count].point_lat_min));
  5398                           
  5399                           ; BSR set to: 3
  5400  000662  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  5401  000664  0D40               	mullw	64
  5402  000666  0E20               	movlw	32
  5403  000668  26F3               	addwf	prodl,f,c
  5404  00066A  0E00               	movlw	0
  5405  00066C  22F4               	addwfc	prodh,f,c
  5406  00066E  0E10               	movlw	low _poligono_ext
  5407  000670  24F3               	addwf	prodl,w,c
  5408  000672  0100               	movlb	0	; () banked
  5409  000674  6F66               	movwf	atoi@s& (0+255),b
  5410  000676  0E01               	movlw	high _poligono_ext
  5411  000678  20F4               	addwfc	prodh,w,c
  5412  00067A  6F67               	movwf	(atoi@s+1)& (0+255),b
  5413  00067C  ECD4  F020         	call	_atoi	;wreg free
  5414  000680  C066  F081         	movff	?_atoi,??_verifica_fence_externo
  5415  000684  C067  F082         	movff	?_atoi+1,??_verifica_fence_externo+1
  5416  000688  0103               	movlb	3	; () banked
  5417  00068A  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  5418  00068C  0D40               	mullw	64
  5419  00068E  0E2C               	movlw	44
  5420  000690  26F3               	addwf	prodl,f,c
  5421  000692  0E00               	movlw	0
  5422  000694  22F4               	addwfc	prodh,f,c
  5423  000696  0E10               	movlw	low _poligono_ext
  5424  000698  24F3               	addwf	prodl,w,c
  5425  00069A  0100               	movlb	0	; () banked
  5426  00069C  6F66               	movwf	atoi@s& (0+255),b
  5427  00069E  0E01               	movlw	high _poligono_ext
  5428  0006A0  20F4               	addwfc	prodh,w,c
  5429  0006A2  6F67               	movwf	(atoi@s+1)& (0+255),b
  5430  0006A4  ECD4  F020         	call	_atoi	;wreg free
  5431  0006A8  0100               	movlb	0	; () banked
  5432  0006AA  1F66               	comf	?_atoi& (0+255),f,b
  5433  0006AC  1F67               	comf	(?_atoi+1)& (0+255),f,b
  5434  0006AE  4B66               	infsnz	?_atoi& (0+255),f,b
  5435  0006B0  2B67               	incf	(?_atoi+1)& (0+255),f,b
  5436  0006B2  5166               	movf	?_atoi& (0+255),w,b
  5437  0006B4  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5438  0006B6  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5439  0006B8  5167               	movf	(?_atoi+1)& (0+255),w,b
  5440  0006BA  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5441  0006BC  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  5442  0006BE  6B85               	clrf	(??_verifica_fence_externo+4)& (0+255),b
  5443  0006C0  BF84               	btfsc	(??_verifica_fence_externo+3)& (0+255),7,b
  5444  0006C2  0785               	decf	(??_verifica_fence_externo+4)& (0+255),f,b
  5445  0006C4  5185               	movf	(??_verifica_fence_externo+4)& (0+255),w,b
  5446  0006C6  6F86               	movwf	(??_verifica_fence_externo+5)& (0+255),b
  5447  0006C8  0103               	movlb	3	; () banked
  5448  0006CA  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  5449  0006CC  0D40               	mullw	64
  5450  0006CE  0E38               	movlw	56
  5451  0006D0  26F3               	addwf	prodl,f,c
  5452  0006D2  0E00               	movlw	0
  5453  0006D4  22F4               	addwfc	prodh,f,c
  5454  0006D6  0E10               	movlw	low _poligono_ext
  5455  0006D8  24F3               	addwf	prodl,w,c
  5456  0006DA  6ED9               	movwf	fsr2l,c
  5457  0006DC  0E01               	movlw	high _poligono_ext
  5458  0006DE  20F4               	addwfc	prodh,w,c
  5459  0006E0  6EDA               	movwf	fsr2h,c
  5460  0006E2  C083  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  5461  0006E6  C084  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  5462  0006EA  C085  FFDE         	movff	??_verifica_fence_externo+4,postinc2
  5463  0006EE  C086  FFDE         	movff	??_verifica_fence_externo+5,postinc2
  5464                           
  5465                           ;main.c: 435: poligono_ext[count].diff_long_min = (atoi(poligono_ext[count].fence_long_m
      +                          in)) - (atoi(poligono_ext[count].point_long_min));
  5466  0006F2  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  5467  0006F4  0D40               	mullw	64
  5468  0006F6  0E26               	movlw	38
  5469  0006F8  26F3               	addwf	prodl,f,c
  5470  0006FA  0E00               	movlw	0
  5471  0006FC  22F4               	addwfc	prodh,f,c
  5472  0006FE  0E10               	movlw	low _poligono_ext
  5473  000700  24F3               	addwf	prodl,w,c
  5474  000702  0100               	movlb	0	; () banked
  5475  000704  6F66               	movwf	atoi@s& (0+255),b
  5476  000706  0E01               	movlw	high _poligono_ext
  5477  000708  20F4               	addwfc	prodh,w,c
  5478  00070A  6F67               	movwf	(atoi@s+1)& (0+255),b
  5479  00070C  ECD4  F020         	call	_atoi	;wreg free
  5480  000710  C066  F081         	movff	?_atoi,??_verifica_fence_externo
  5481  000714  C067  F082         	movff	?_atoi+1,??_verifica_fence_externo+1
  5482  000718  0103               	movlb	3	; () banked
  5483  00071A  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  5484  00071C  0D40               	mullw	64
  5485  00071E  0E32               	movlw	50
  5486  000720  26F3               	addwf	prodl,f,c
  5487  000722  0E00               	movlw	0
  5488  000724  22F4               	addwfc	prodh,f,c
  5489  000726  0E10               	movlw	low _poligono_ext
  5490  000728  24F3               	addwf	prodl,w,c
  5491  00072A  0100               	movlb	0	; () banked
  5492  00072C  6F66               	movwf	atoi@s& (0+255),b
  5493  00072E  0E01               	movlw	high _poligono_ext
  5494  000730  20F4               	addwfc	prodh,w,c
  5495  000732  6F67               	movwf	(atoi@s+1)& (0+255),b
  5496  000734  ECD4  F020         	call	_atoi	;wreg free
  5497  000738  0100               	movlb	0	; () banked
  5498  00073A  1F66               	comf	?_atoi& (0+255),f,b
  5499  00073C  1F67               	comf	(?_atoi+1)& (0+255),f,b
  5500  00073E  4B66               	infsnz	?_atoi& (0+255),f,b
  5501  000740  2B67               	incf	(?_atoi+1)& (0+255),f,b
  5502  000742  5166               	movf	?_atoi& (0+255),w,b
  5503  000744  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5504  000746  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5505  000748  5167               	movf	(?_atoi+1)& (0+255),w,b
  5506  00074A  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5507  00074C  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  5508  00074E  6B85               	clrf	(??_verifica_fence_externo+4)& (0+255),b
  5509  000750  BF84               	btfsc	(??_verifica_fence_externo+3)& (0+255),7,b
  5510  000752  0785               	decf	(??_verifica_fence_externo+4)& (0+255),f,b
  5511  000754  5185               	movf	(??_verifica_fence_externo+4)& (0+255),w,b
  5512  000756  6F86               	movwf	(??_verifica_fence_externo+5)& (0+255),b
  5513  000758  0103               	movlb	3	; () banked
  5514  00075A  517E               	movf	verifica_fence_externo@count& (0+255),w,b
  5515  00075C  0D40               	mullw	64
  5516  00075E  0E3C               	movlw	60
  5517  000760  26F3               	addwf	prodl,f,c
  5518  000762  0E00               	movlw	0
  5519  000764  22F4               	addwfc	prodh,f,c
  5520  000766  0E10               	movlw	low _poligono_ext
  5521  000768  24F3               	addwf	prodl,w,c
  5522  00076A  6ED9               	movwf	fsr2l,c
  5523  00076C  0E01               	movlw	high _poligono_ext
  5524  00076E  20F4               	addwfc	prodh,w,c
  5525  000770  6EDA               	movwf	fsr2h,c
  5526  000772  C083  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  5527  000776  C084  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  5528  00077A  C085  FFDE         	movff	??_verifica_fence_externo+4,postinc2
  5529  00077E  C086  FFDE         	movff	??_verifica_fence_externo+5,postinc2
  5530                           
  5531                           ; BSR set to: 3
  5532                           ;main.c: 436: count++;
  5533  000782  2B7E               	incf	verifica_fence_externo@count& (0+255),f,b
  5534  000784                     l185:
  5535                           
  5536                           ; BSR set to: 3
  5537                           ;main.c: 437: }
  5538                           ;main.c: 439: point++;
  5539                           
  5540                           ; BSR set to: 3
  5541  000784  2B7F               	incf	verifica_fence_externo@point& (0+255),f,b
  5542  000786                     l163:
  5543                           
  5544                           ; BSR set to: 3
  5545                           
  5546                           ; BSR set to: 3
  5547  000786  0E03               	movlw	3
  5548  000788  657F               	cpfsgt	verifica_fence_externo@point& (0+255),b
  5549  00078A  D630               	goto	l164
  5550                           
  5551                           ; BSR set to: 3
  5552                           ;main.c: 440: }
  5553                           ;main.c: 441: count = 0;
  5554                           
  5555                           ; BSR set to: 3
  5556  00078C  0E00               	movlw	0
  5557  00078E  6F7E               	movwf	verifica_fence_externo@count& (0+255),b
  5558                           
  5559                           ;main.c: 442: point = 0;
  5560  000790  0E00               	movlw	0
  5561  000792  6F7F               	movwf	verifica_fence_externo@point& (0+255),b
  5562                           
  5563                           ;main.c: 448: switch(temp_buff_long[0])
  5564  000794  D04E               	goto	l189
  5565  000796                     
  5566                           ; BSR set to: 3
  5567                           ;main.c: 451: if(
  5568                           ;main.c: 452: ((poligono_ext[0].diff_long_min >= 0 &&
  5569                           ;main.c: 453: poligono_ext[1].diff_long_min <= 0) &&
  5570                           ;main.c: 455: (poligono_ext[0].diff_long_deg >= 0 &&
  5571                           ;main.c: 456: poligono_ext[1].diff_long_deg <= 0)))
  5572                           
  5573                           ; BSR set to: 3
  5574  000796  0101               	movlb	1	; () banked
  5575  000798  BF4F               	btfsc	(_poligono_ext+63)& (0+255),7,b
  5576  00079A  D02C               	goto	l201
  5577                           
  5578                           ; BSR set to: 1
  5579  00079C  BF8F               	btfsc	(_poligono_ext+127)& (0+255),7,b
  5580  00079E  D007               	goto	u16450
  5581  0007A0  518F               	movf	(_poligono_ext+127)& (0+255),w,b
  5582  0007A2  118E               	iorwf	(_poligono_ext+126)& (0+255),w,b
  5583  0007A4  118D               	iorwf	(_poligono_ext+125)& (0+255),w,b
  5584  0007A6  E126               	bnz	l12087
  5585  0007A8  058C               	decf	(_poligono_ext+124)& (0+255),w,b
  5586  0007AA  B0D8               	btfsc	status,0,c
  5587  0007AC  D023               	goto	l201
  5588  0007AE                     u16450:
  5589                           
  5590                           ; BSR set to: 1
  5591  0007AE  BF2F               	btfsc	(_poligono_ext+31)& (0+255),7,b
  5592  0007B0  D021               	goto	l201
  5593                           
  5594                           ; BSR set to: 1
  5595  0007B2  BF6F               	btfsc	(_poligono_ext+95)& (0+255),7,b
  5596  0007B4  D038               	goto	u16590
  5597  0007B6  516F               	movf	(_poligono_ext+95)& (0+255),w,b
  5598  0007B8  116E               	iorwf	(_poligono_ext+94)& (0+255),w,b
  5599  0007BA  116D               	iorwf	(_poligono_ext+93)& (0+255),w,b
  5600  0007BC  E11B               	bnz	l12087
  5601  0007BE  056C               	decf	(_poligono_ext+92)& (0+255),w,b
  5602  0007C0  A0D8               	btfss	status,0,c
  5603  0007C2  D031               	goto	u16590
  5604                           
  5605                           ; BSR set to: 0
  5606                           
  5607                           ;main.c: 459: }
  5608                           
  5609                           ; BSR set to: 1
  5610                           ;main.c: 457: {
  5611                           ;main.c: 458: flag[0].point = 0;
  5612  0007C4  D017               	goto	l201
  5613  0007C6                     
  5614                           ;main.c: 476: if(
  5615                           ;main.c: 477: (poligono_ext[0].diff_long_min <= 0 &&
  5616                           ;main.c: 478: poligono_ext[1].diff_long_min >= 0 ) &&
  5617                           ;main.c: 479: (poligono_ext[0].diff_lat_deg <= 0 &&
  5618                           ;main.c: 480: poligono_ext[1].diff_lat_deg >= 0))
  5619                           
  5620                           ; BSR set to: 0
  5621  0007C6  0101               	movlb	1	; () banked
  5622  0007C8  BF4F               	btfsc	(_poligono_ext+63)& (0+255),7,b
  5623  0007CA  D007               	goto	u16520
  5624  0007CC  514F               	movf	(_poligono_ext+63)& (0+255),w,b
  5625  0007CE  114E               	iorwf	(_poligono_ext+62)& (0+255),w,b
  5626  0007D0  114D               	iorwf	(_poligono_ext+61)& (0+255),w,b
  5627  0007D2  E110               	bnz	l12087
  5628  0007D4  054C               	decf	(_poligono_ext+60)& (0+255),w,b
  5629  0007D6  B0D8               	btfsc	status,0,c
  5630  0007D8  D00D               	goto	l201
  5631  0007DA                     u16520:
  5632                           
  5633                           ; BSR set to: 1
  5634  0007DA  BF8F               	btfsc	(_poligono_ext+127)& (0+255),7,b
  5635  0007DC  D00B               	goto	l201
  5636                           
  5637                           ; BSR set to: 1
  5638  0007DE  BF2B               	btfsc	(_poligono_ext+27)& (0+255),7,b
  5639  0007E0  D007               	goto	u16540
  5640  0007E2  512B               	movf	(_poligono_ext+27)& (0+255),w,b
  5641  0007E4  112A               	iorwf	(_poligono_ext+26)& (0+255),w,b
  5642  0007E6  1129               	iorwf	(_poligono_ext+25)& (0+255),w,b
  5643  0007E8  E105               	bnz	l12087
  5644  0007EA  0528               	decf	(_poligono_ext+24)& (0+255),w,b
  5645  0007EC  B0D8               	btfsc	status,0,c
  5646  0007EE  D002               	goto	l201
  5647  0007F0                     u16540:
  5648                           
  5649                           ; BSR set to: 1
  5650  0007F0  AF6B               	btfss	(_poligono_ext+91)& (0+255),7,b
  5651  0007F2  D019               	goto	u16590
  5652  0007F4                     l201:
  5653  0007F4                     l12087:
  5654                           
  5655                           ;main.c: 484: else if((poligono_ext[0].diff_long_min == 0 ||
  5656                           ;main.c: 485: poligono_ext[1].diff_long_min == 0) &&
  5657                           ;main.c: 486: (poligono_ext[0].diff_long_deg == 0 ||
  5658                           ;main.c: 487: poligono_ext[1].diff_long_deg == 0))
  5659  0007F4  0101               	movlb	1	; () banked
  5660  0007F6  514C               	movf	(_poligono_ext+60)& (0+255),w,b
  5661  0007F8  114D               	iorwf	(_poligono_ext+61)& (0+255),w,b
  5662  0007FA  114E               	iorwf	(_poligono_ext+62)& (0+255),w,b
  5663  0007FC  114F               	iorwf	(_poligono_ext+63)& (0+255),w,b
  5664  0007FE  B4D8               	btfsc	status,2,c
  5665  000800  D006               	goto	u16570
  5666                           
  5667                           ; BSR set to: 1
  5668  000802  518C               	movf	(_poligono_ext+124)& (0+255),w,b
  5669  000804  118D               	iorwf	(_poligono_ext+125)& (0+255),w,b
  5670  000806  118E               	iorwf	(_poligono_ext+126)& (0+255),w,b
  5671  000808  118F               	iorwf	(_poligono_ext+127)& (0+255),w,b
  5672  00080A  A4D8               	btfss	status,2,c
  5673  00080C  D00F               	goto	l203
  5674  00080E                     u16570:
  5675                           
  5676                           ; BSR set to: 1
  5677                           
  5678                           ; BSR set to: 1
  5679  00080E  512C               	movf	(_poligono_ext+28)& (0+255),w,b
  5680  000810  112D               	iorwf	(_poligono_ext+29)& (0+255),w,b
  5681  000812  112E               	iorwf	(_poligono_ext+30)& (0+255),w,b
  5682  000814  112F               	iorwf	(_poligono_ext+31)& (0+255),w,b
  5683  000816  B4D8               	btfsc	status,2,c
  5684  000818  D006               	goto	u16590
  5685                           
  5686                           ; BSR set to: 1
  5687  00081A  516C               	movf	(_poligono_ext+92)& (0+255),w,b
  5688  00081C  116D               	iorwf	(_poligono_ext+93)& (0+255),w,b
  5689  00081E  116E               	iorwf	(_poligono_ext+94)& (0+255),w,b
  5690  000820  116F               	iorwf	(_poligono_ext+95)& (0+255),w,b
  5691  000822  A4D8               	btfss	status,2,c
  5692  000824  D003               	goto	l203
  5693  000826                     u16590:
  5694                           
  5695                           ; BSR set to: 1
  5696                           ;main.c: 488: {
  5697                           ;main.c: 489: flag[0].point = 0;
  5698  000826  0100               	movlb	0	; () banked
  5699  000828  91F6               	bcf	_flag& (0+255),0,b
  5700                           
  5701                           ;main.c: 490: }
  5702  00082A  D057               	goto	l209
  5703  00082C                     l203:
  5704                           
  5705                           ; BSR set to: 1
  5706                           ;main.c: 491: else
  5707                           ;main.c: 492: {
  5708                           ;main.c: 493: flag[0].point = 1;
  5709  00082C  0100               	movlb	0	; () banked
  5710  00082E  81F6               	bsf	_flag& (0+255),0,b
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;main.c: 497: }
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;main.c: 494: }
  5717                           ;main.c: 495: break;
  5718                           
  5719                           ; BSR set to: 0
  5720  000830  D054               	goto	l209
  5721  000832                     l189:
  5722                           
  5723                           ; BSR set to: 0
  5724  000832  0103               	movlb	3	; () banked
  5725  000834  515C               	movf	verifica_fence_externo@temp_buff_long& (0+255),w,b
  5726                           
  5727                           ; Switch size 1, requested type "space"
  5728                           ; Number of cases is 1, Range of values is 45 to 45
  5729                           ; switch strategies available:
  5730                           ; Name         Instructions Cycles
  5731                           ; simple_byte            4     3 (average)
  5732                           ;	Chosen strategy is simple_byte
  5733  000836  0A2D               	xorlw	45	; case 45
  5734  000838  B4D8               	btfsc	status,2,c
  5735  00083A  D7AD               	goto	l190
  5736  00083C  D7C4               	goto	l200
  5737  00083E                     
  5738                           ; BSR set to: 3
  5739                           ;main.c: 503: if(
  5740                           ;main.c: 504: (
  5741                           ;main.c: 505: poligono_ext[0].diff_lat_min <= 0 &&
  5742                           ;main.c: 506: poligono_ext[1].diff_lat_min >= 0) &&
  5743                           ;main.c: 508: (poligono_ext[0].diff_lat_deg <= 0 &&
  5744                           ;main.c: 509: poligono_ext[1].diff_lat_deg >= 0))
  5745                           
  5746                           ; BSR set to: 3
  5747  00083E  0101               	movlb	1	; () banked
  5748  000840  BF4B               	btfsc	(_poligono_ext+59)& (0+255),7,b
  5749  000842  D007               	goto	u16600
  5750  000844  514B               	movf	(_poligono_ext+59)& (0+255),w,b
  5751  000846  114A               	iorwf	(_poligono_ext+58)& (0+255),w,b
  5752  000848  1149               	iorwf	(_poligono_ext+57)& (0+255),w,b
  5753  00084A  E128               	bnz	l12127
  5754  00084C  0548               	decf	(_poligono_ext+56)& (0+255),w,b
  5755  00084E  B0D8               	btfsc	status,0,c
  5756  000850  D025               	goto	l221
  5757  000852                     u16600:
  5758                           
  5759                           ; BSR set to: 1
  5760  000852  BF8B               	btfsc	(_poligono_ext+123)& (0+255),7,b
  5761  000854  D023               	goto	l221
  5762                           
  5763                           ; BSR set to: 1
  5764  000856  BF2B               	btfsc	(_poligono_ext+27)& (0+255),7,b
  5765  000858  D007               	goto	u16620
  5766  00085A  512B               	movf	(_poligono_ext+27)& (0+255),w,b
  5767  00085C  112A               	iorwf	(_poligono_ext+26)& (0+255),w,b
  5768  00085E  1129               	iorwf	(_poligono_ext+25)& (0+255),w,b
  5769  000860  E11D               	bnz	l12127
  5770  000862  0528               	decf	(_poligono_ext+24)& (0+255),w,b
  5771  000864  B0D8               	btfsc	status,0,c
  5772  000866  D01A               	goto	l221
  5773  000868                     u16620:
  5774                           
  5775                           ; BSR set to: 1
  5776  000868  AF6B               	btfss	(_poligono_ext+91)& (0+255),7,b
  5777  00086A  D031               	goto	u16750
  5778                           
  5779                           ; BSR set to: 0
  5780                           
  5781                           ;main.c: 513: }
  5782                           
  5783                           ; BSR set to: 1
  5784                           ;main.c: 511: {
  5785                           ;main.c: 512: flag[1].point = 0;
  5786  00086C  D017               	goto	l221
  5787  00086E                     
  5788                           ;main.c: 530: if((poligono_ext[0].diff_lat_min >= 0 &&
  5789                           ;main.c: 531: poligono_ext[1].diff_lat_min <= 0 ) &&
  5790                           ;main.c: 534: (poligono_ext[0].diff_lat_deg >= 0 &&
  5791                           ;main.c: 535: poligono_ext[1].diff_lat_deg <= 0)
  5792                           ;main.c: 536: )
  5793                           
  5794                           ; BSR set to: 0
  5795  00086E  0101               	movlb	1	; () banked
  5796  000870  BF4B               	btfsc	(_poligono_ext+59)& (0+255),7,b
  5797  000872  D014               	goto	l221
  5798                           
  5799                           ; BSR set to: 1
  5800  000874  BF8B               	btfsc	(_poligono_ext+123)& (0+255),7,b
  5801  000876  D007               	goto	u16690
  5802  000878  518B               	movf	(_poligono_ext+123)& (0+255),w,b
  5803  00087A  118A               	iorwf	(_poligono_ext+122)& (0+255),w,b
  5804  00087C  1189               	iorwf	(_poligono_ext+121)& (0+255),w,b
  5805  00087E  E10E               	bnz	l12127
  5806  000880  0588               	decf	(_poligono_ext+120)& (0+255),w,b
  5807  000882  B0D8               	btfsc	status,0,c
  5808  000884  D00B               	goto	l221
  5809  000886                     u16690:
  5810                           
  5811                           ; BSR set to: 1
  5812  000886  BF2B               	btfsc	(_poligono_ext+27)& (0+255),7,b
  5813  000888  D009               	goto	l221
  5814                           
  5815                           ; BSR set to: 1
  5816  00088A  BF6B               	btfsc	(_poligono_ext+91)& (0+255),7,b
  5817  00088C  D020               	goto	u16750
  5818  00088E  516B               	movf	(_poligono_ext+91)& (0+255),w,b
  5819  000890  116A               	iorwf	(_poligono_ext+90)& (0+255),w,b
  5820  000892  1169               	iorwf	(_poligono_ext+89)& (0+255),w,b
  5821  000894  E103               	bnz	l12127
  5822  000896  0568               	decf	(_poligono_ext+88)& (0+255),w,b
  5823  000898  A0D8               	btfss	status,0,c
  5824  00089A  D019               	goto	u16750
  5825  00089C                     l221:
  5826  00089C                     l12127:
  5827                           
  5828                           ;main.c: 540: else if((poligono_ext[0].diff_lat_min == 0 ||
  5829                           ;main.c: 541: poligono_ext[1].diff_lat_min == 0) &&
  5830                           ;main.c: 543: (poligono_ext[0].diff_lat_deg == 0 ||
  5831                           ;main.c: 544: poligono_ext[1].diff_lat_deg == 0))
  5832  00089C  0101               	movlb	1	; () banked
  5833  00089E  5148               	movf	(_poligono_ext+56)& (0+255),w,b
  5834  0008A0  1149               	iorwf	(_poligono_ext+57)& (0+255),w,b
  5835  0008A2  114A               	iorwf	(_poligono_ext+58)& (0+255),w,b
  5836  0008A4  114B               	iorwf	(_poligono_ext+59)& (0+255),w,b
  5837  0008A6  B4D8               	btfsc	status,2,c
  5838  0008A8  D006               	goto	u16730
  5839                           
  5840                           ; BSR set to: 1
  5841  0008AA  5188               	movf	(_poligono_ext+120)& (0+255),w,b
  5842  0008AC  1189               	iorwf	(_poligono_ext+121)& (0+255),w,b
  5843  0008AE  118A               	iorwf	(_poligono_ext+122)& (0+255),w,b
  5844  0008B0  118B               	iorwf	(_poligono_ext+123)& (0+255),w,b
  5845  0008B2  A4D8               	btfss	status,2,c
  5846  0008B4  D00F               	goto	l223
  5847  0008B6                     u16730:
  5848                           
  5849                           ; BSR set to: 1
  5850                           
  5851                           ; BSR set to: 1
  5852  0008B6  5128               	movf	(_poligono_ext+24)& (0+255),w,b
  5853  0008B8  1129               	iorwf	(_poligono_ext+25)& (0+255),w,b
  5854  0008BA  112A               	iorwf	(_poligono_ext+26)& (0+255),w,b
  5855  0008BC  112B               	iorwf	(_poligono_ext+27)& (0+255),w,b
  5856  0008BE  B4D8               	btfsc	status,2,c
  5857  0008C0  D006               	goto	u16750
  5858                           
  5859                           ; BSR set to: 1
  5860  0008C2  5168               	movf	(_poligono_ext+88)& (0+255),w,b
  5861  0008C4  1169               	iorwf	(_poligono_ext+89)& (0+255),w,b
  5862  0008C6  116A               	iorwf	(_poligono_ext+90)& (0+255),w,b
  5863  0008C8  116B               	iorwf	(_poligono_ext+91)& (0+255),w,b
  5864  0008CA  A4D8               	btfss	status,2,c
  5865  0008CC  D003               	goto	l223
  5866  0008CE                     u16750:
  5867                           
  5868                           ; BSR set to: 1
  5869                           ;main.c: 545: {
  5870                           ;main.c: 546: flag[1].point = 0;
  5871  0008CE  0100               	movlb	0	; () banked
  5872  0008D0  91F7               	bcf	(_flag+1)& (0+255),0,b
  5873                           
  5874                           ;main.c: 547: }
  5875  0008D2  D009               	goto	l219
  5876  0008D4                     l223:
  5877                           
  5878                           ; BSR set to: 1
  5879                           ;main.c: 548: else
  5880                           ;main.c: 549: {
  5881                           ;main.c: 552: flag[1].point = 1;
  5882  0008D4  0100               	movlb	0	; () banked
  5883  0008D6  81F7               	bsf	(_flag+1)& (0+255),0,b
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;main.c: 556: }
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;main.c: 553: }
  5890                           ;main.c: 554: break;
  5891                           
  5892                           ; BSR set to: 0
  5893  0008D8  D006               	goto	l219
  5894  0008DA                     l209:
  5895                           
  5896                           ; BSR set to: 0
  5897  0008DA  0103               	movlb	3	; () banked
  5898  0008DC  5168               	movf	verifica_fence_externo@temp_buff_lat& (0+255),w,b
  5899                           
  5900                           ; Switch size 1, requested type "space"
  5901                           ; Number of cases is 1, Range of values is 45 to 45
  5902                           ; switch strategies available:
  5903                           ; Name         Instructions Cycles
  5904                           ; simple_byte            4     3 (average)
  5905                           ;	Chosen strategy is simple_byte
  5906  0008DE  0A2D               	xorlw	45	; case 45
  5907  0008E0  B4D8               	btfsc	status,2,c
  5908  0008E2  D7AD               	goto	l210
  5909  0008E4  D7C4               	goto	l220
  5910  0008E6                     l219:
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;main.c: 559: if(flag[0].point || flag[1].point)
  5914  0008E6  B1F6               	btfsc	_flag& (0+255),0,b
  5915  0008E8  D002               	goto	u16770
  5916                           
  5917                           ; BSR set to: 0
  5918  0008EA  A1F7               	btfss	(_flag+1)& (0+255),0,b
  5919  0008EC  0012               	return	
  5920  0008EE                     u16770:
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;main.c: 560: {
  5924                           ;main.c: 561: flag[2].point = 1;
  5925  0008EE  81F8               	bsf	(_flag+2)& (0+255),0,b
  5926                           
  5927                           ; BSR set to: 0
  5928                           ;main.c: 562: posicao_cursor_lcd(1,0);
  5929  0008F0  0E00               	movlw	0
  5930  0008F2  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  5931  0008F4  0E01               	movlw	1
  5932  0008F6  ECC4  F026         	call	_posicao_cursor_lcd
  5933                           
  5934                           ;main.c: 563: escreve_frase_ram_lcd("REGIAO NEGADA");
  5935  0008FA  0EEF               	movlw	low STR_1
  5936  0008FC  0100               	movlb	0	; () banked
  5937  0008FE  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  5938  000900  0E61               	movlw	high STR_1
  5939  000902  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  5940  000904  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  5941                           
  5942                           ;main.c: 564: posicao_cursor_lcd(2,14);
  5943  000908  0E0E               	movlw	14
  5944  00090A  0100               	movlb	0	; () banked
  5945  00090C  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  5946  00090E  0E02               	movlw	2
  5947  000910  ECC4  F026         	call	_posicao_cursor_lcd
  5948                           
  5949                           ;main.c: 565: escreve_inteiro_lcd(flag[0].point);
  5950  000914  0100               	movlb	0	; () banked
  5951  000916  A1F6               	btfss	_flag& (0+255),0,b
  5952  000918  D003               	goto	u16780
  5953  00091A  6B81               	clrf	??_verifica_fence_externo& (0+255),b
  5954  00091C  2B81               	incf	??_verifica_fence_externo& (0+255),f,b
  5955  00091E  D002               	goto	u16788
  5956  000920                     u16780:
  5957  000920  0100               	movlb	0	; () banked
  5958  000922  6B81               	clrf	??_verifica_fence_externo& (0+255),b
  5959  000924                     u16788:
  5960  000924  5181               	movf	??_verifica_fence_externo& (0+255),w,b
  5961  000926  6F78               	movwf	escreve_inteiro_lcd@valor& (0+255),b
  5962  000928  6B79               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  5963  00092A  EC51  F02A         	call	_escreve_inteiro_lcd	;wreg free
  5964                           
  5965                           ;main.c: 566: posicao_cursor_lcd(2,15);
  5966  00092E  0E0F               	movlw	15
  5967  000930  0100               	movlb	0	; () banked
  5968  000932  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  5969  000934  0E02               	movlw	2
  5970  000936  ECC4  F026         	call	_posicao_cursor_lcd
  5971                           
  5972                           ;main.c: 567: escreve_inteiro_lcd(flag[1].point);
  5973  00093A  0100               	movlb	0	; () banked
  5974  00093C  A1F7               	btfss	(_flag+1)& (0+255),0,b
  5975  00093E  D003               	goto	u16790
  5976  000940  6B81               	clrf	??_verifica_fence_externo& (0+255),b
  5977  000942  2B81               	incf	??_verifica_fence_externo& (0+255),f,b
  5978  000944  D002               	goto	u16798
  5979  000946                     u16790:
  5980  000946  0100               	movlb	0	; () banked
  5981  000948  6B81               	clrf	??_verifica_fence_externo& (0+255),b
  5982  00094A                     u16798:
  5983  00094A  5181               	movf	??_verifica_fence_externo& (0+255),w,b
  5984  00094C  6F78               	movwf	escreve_inteiro_lcd@valor& (0+255),b
  5985  00094E  6B79               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  5986  000950  EC51  F02A         	call	_escreve_inteiro_lcd	;wreg free
  5987  000954  0012               	return	
  5988  000956                     __end_of_verifica_fence_externo:
  5989                           	opt stack 0
  5990                           tosu	equ	0xFFF
  5991                           tosh	equ	0xFFE
  5992                           tosl	equ	0xFFD
  5993                           pclath	equ	0xFFA
  5994                           tblptru	equ	0xFF8
  5995                           tblptrh	equ	0xFF7
  5996                           tblptrl	equ	0xFF6
  5997                           tablat	equ	0xFF5
  5998                           prodh	equ	0xFF4
  5999                           prodl	equ	0xFF3
  6000                           intcon	equ	0xFF2
  6001                           intcon2	equ	0xFF1
  6002                           intcon3	equ	0xFF0
  6003                           postinc0	equ	0xFEE
  6004                           wreg	equ	0xFE8
  6005                           indf1	equ	0xFE7
  6006                           postinc1	equ	0xFE6
  6007                           postdec1	equ	0xFE5
  6008                           plusw1	equ	0xFE3
  6009                           fsr1h	equ	0xFE2
  6010                           fsr1l	equ	0xFE1
  6011                           indf2	equ	0xFDF
  6012                           postinc2	equ	0xFDE
  6013                           postdec2	equ	0xFDD
  6014                           plusw2	equ	0xFDB
  6015                           fsr2h	equ	0xFDA
  6016                           fsr2l	equ	0xFD9
  6017                           status	equ	0xFD8
  6018                           
  6019 ;; *************** function _escreve_inteiro_lcd *****************
  6020 ;; Defined at:
  6021 ;;		line 376 in file "bibliotecas/display_lcd.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;  valor           2   24[BANK0 ] int 
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  texto           7   26[BANK0 ] unsigned char [7]
  6026 ;; Return value:  Size  Location     Type
  6027 ;;                  1    wreg      void 
  6028 ;; Registers used:
  6029 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6030 ;; Tracked objects:
  6031 ;;		On entry : 0/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6035 ;;      Params:         0       2       0       0       0       0       0       0       0
  6036 ;;      Locals:         0       7       0       0       0       0       0       0       0
  6037 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6038 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6039 ;;Total ram usage:        9 bytes
  6040 ;; Hardware stack levels used:    1
  6041 ;; Hardware stack levels required when called:    6
  6042 ;; This function calls:
  6043 ;;		_escreve_frase_ram_lcd
  6044 ;;		_itoa
  6045 ;; This function is called by:
  6046 ;;		_verifica_fence_externo
  6047 ;;		_escreve_float_lcd
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           	psect	text16
  6052  0054A2                     __ptext16:
  6053                           	opt stack 0
  6054  0054A2                     _escreve_inteiro_lcd:
  6055                           	opt stack 22
  6056                           
  6057                           ;display_lcd.c: 378: char texto[7] = "000000";
  6058                           
  6059                           ;incstack = 0
  6060  0054A2  EE22  F07A         	lfsr	2,escreve_inteiro_lcd@F3966
  6061  0054A6  EE10  F07A         	lfsr	1,escreve_inteiro_lcd@texto
  6062  0054AA  0E06               	movlw	6
  6063  0054AC                     u15971:
  6064  0054AC  CFDB FFE3          	movff	plusw2,plusw1
  6065  0054B0  06E8               	decf	wreg,f,c
  6066  0054B2  E2FC               	bc	u15971
  6067                           
  6068                           ;display_lcd.c: 379: itoa(texto,valor, 10);
  6069  0054B4  0E7A               	movlw	low escreve_inteiro_lcd@texto
  6070  0054B6  0100               	movlb	0	; () banked
  6071  0054B8  6F70               	movwf	itoa@buf& (0+255),b
  6072  0054BA  0E00               	movlw	high escreve_inteiro_lcd@texto
  6073  0054BC  6F71               	movwf	(itoa@buf+1)& (0+255),b
  6074  0054BE  C078  F072         	movff	escreve_inteiro_lcd@valor,itoa@val
  6075  0054C2  C079  F073         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
  6076  0054C6  0E00               	movlw	0
  6077  0054C8  6F75               	movwf	(itoa@base+1)& (0+255),b
  6078  0054CA  0E0A               	movlw	10
  6079  0054CC  6F74               	movwf	itoa@base& (0+255),b
  6080  0054CE  ECCA  F029         	call	_itoa	;wreg free
  6081                           
  6082                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
  6083  0054D2  0E7A               	movlw	low escreve_inteiro_lcd@texto
  6084  0054D4  0100               	movlb	0	; () banked
  6085  0054D6  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  6086  0054D8  0E00               	movlw	high escreve_inteiro_lcd@texto
  6087  0054DA  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  6088  0054DC  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
  6089  0054E0  0012               	return		;funcret
  6090  0054E2                     __end_of_escreve_inteiro_lcd:
  6091                           	opt stack 0
  6092                           tosu	equ	0xFFF
  6093                           tosh	equ	0xFFE
  6094                           tosl	equ	0xFFD
  6095                           pclath	equ	0xFFA
  6096                           tblptru	equ	0xFF8
  6097                           tblptrh	equ	0xFF7
  6098                           tblptrl	equ	0xFF6
  6099                           tablat	equ	0xFF5
  6100                           prodh	equ	0xFF4
  6101                           prodl	equ	0xFF3
  6102                           intcon	equ	0xFF2
  6103                           intcon2	equ	0xFF1
  6104                           intcon3	equ	0xFF0
  6105                           postinc0	equ	0xFEE
  6106                           wreg	equ	0xFE8
  6107                           indf1	equ	0xFE7
  6108                           postinc1	equ	0xFE6
  6109                           postdec1	equ	0xFE5
  6110                           plusw1	equ	0xFE3
  6111                           fsr1h	equ	0xFE2
  6112                           fsr1l	equ	0xFE1
  6113                           indf2	equ	0xFDF
  6114                           postinc2	equ	0xFDE
  6115                           postdec2	equ	0xFDD
  6116                           plusw2	equ	0xFDB
  6117                           fsr2h	equ	0xFDA
  6118                           fsr2l	equ	0xFD9
  6119                           status	equ	0xFD8
  6120                           
  6121 ;; *************** function _itoa *****************
  6122 ;; Defined at:
  6123 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;  buf             2   16[BANK0 ] PTR unsigned char 
  6126 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  6127 ;;  val             2   18[BANK0 ] int 
  6128 ;;  base            2   20[BANK0 ] int 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  cp              2   22[BANK0 ] PTR unsigned char 
  6131 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  6132 ;; Return value:  Size  Location     Type
  6133 ;;                  2   16[BANK0 ] PTR unsigned char 
  6134 ;; Registers used:
  6135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6136 ;; Tracked objects:
  6137 ;;		On entry : 0/0
  6138 ;;		On exit  : 0/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6141 ;;      Params:         0       6       0       0       0       0       0       0       0
  6142 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6143 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6144 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6145 ;;Total ram usage:        8 bytes
  6146 ;; Hardware stack levels used:    1
  6147 ;; Hardware stack levels required when called:    5
  6148 ;; This function calls:
  6149 ;;		_utoa
  6150 ;; This function is called by:
  6151 ;;		_escreve_inteiro_lcd
  6152 ;;		_escreve_inteiro_uart
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text17
  6157  005394                     __ptext17:
  6158                           	opt stack 0
  6159  005394                     _itoa:
  6160                           	opt stack 22
  6161                           
  6162                           ;incstack = 0
  6163  005394  C070  F076         	movff	itoa@buf,itoa@cp
  6164  005398  C071  F077         	movff	itoa@buf+1,itoa@cp+1
  6165  00539C  0100               	movlb	0	; () banked
  6166  00539E  AF73               	btfss	(itoa@val+1)& (0+255),7,b
  6167  0053A0  D00C               	goto	l1865
  6168                           
  6169                           ; BSR set to: 0
  6170  0053A2  C070  FFD9         	movff	itoa@buf,fsr2l
  6171  0053A6  C071  FFDA         	movff	itoa@buf+1,fsr2h
  6172  0053AA  0E2D               	movlw	45
  6173  0053AC  6EDF               	movwf	indf2,c
  6174                           
  6175                           ; BSR set to: 0
  6176  0053AE  4B70               	infsnz	itoa@buf& (0+255),f,b
  6177  0053B0  2B71               	incf	(itoa@buf+1)& (0+255),f,b
  6178                           
  6179                           ; BSR set to: 0
  6180  0053B2  6D72               	negf	itoa@val& (0+255),b
  6181  0053B4  1F73               	comf	(itoa@val+1)& (0+255),f,b
  6182  0053B6  B0D8               	btfsc	status,0,c
  6183  0053B8  2B73               	incf	(itoa@val+1)& (0+255),f,b
  6184  0053BA                     l1865:
  6185                           
  6186                           ; BSR set to: 0
  6187                           
  6188                           ; BSR set to: 0
  6189  0053BA  C070  F067         	movff	itoa@buf,utoa@buf
  6190  0053BE  C071  F068         	movff	itoa@buf+1,utoa@buf+1
  6191  0053C2  C072  F069         	movff	itoa@val,utoa@val
  6192  0053C6  C073  F06A         	movff	itoa@val+1,utoa@val+1
  6193  0053CA  C074  F06B         	movff	itoa@base,utoa@base
  6194  0053CE  C075  F06C         	movff	itoa@base+1,utoa@base+1
  6195  0053D2  EC66  F022         	call	_utoa	;wreg free
  6196  0053D6  0012               	return	
  6197  0053D8                     __end_of_itoa:
  6198                           	opt stack 0
  6199                           tosu	equ	0xFFF
  6200                           tosh	equ	0xFFE
  6201                           tosl	equ	0xFFD
  6202                           pclath	equ	0xFFA
  6203                           tblptru	equ	0xFF8
  6204                           tblptrh	equ	0xFF7
  6205                           tblptrl	equ	0xFF6
  6206                           tablat	equ	0xFF5
  6207                           prodh	equ	0xFF4
  6208                           prodl	equ	0xFF3
  6209                           intcon	equ	0xFF2
  6210                           intcon2	equ	0xFF1
  6211                           intcon3	equ	0xFF0
  6212                           postinc0	equ	0xFEE
  6213                           wreg	equ	0xFE8
  6214                           indf1	equ	0xFE7
  6215                           postinc1	equ	0xFE6
  6216                           postdec1	equ	0xFE5
  6217                           plusw1	equ	0xFE3
  6218                           fsr1h	equ	0xFE2
  6219                           fsr1l	equ	0xFE1
  6220                           indf2	equ	0xFDF
  6221                           postinc2	equ	0xFDE
  6222                           postdec2	equ	0xFDD
  6223                           plusw2	equ	0xFDB
  6224                           fsr2h	equ	0xFDA
  6225                           fsr2l	equ	0xFD9
  6226                           status	equ	0xFD8
  6227                           
  6228 ;; *************** function _utoa *****************
  6229 ;; Defined at:
  6230 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;  buf             2    7[BANK0 ] PTR unsigned char 
  6233 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  6234 ;;  val             2    9[BANK0 ] unsigned int 
  6235 ;;  base            2   11[BANK0 ] int 
  6236 ;; Auto vars:     Size  Location     Type
  6237 ;;  v               2   13[BANK0 ] unsigned int 
  6238 ;;  c               1   15[BANK0 ] unsigned char 
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  2    7[BANK0 ] PTR unsigned char 
  6241 ;; Registers used:
  6242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6248 ;;      Params:         0       6       0       0       0       0       0       0       0
  6249 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6250 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6251 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6252 ;;Total ram usage:        9 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    4
  6255 ;; This function calls:
  6256 ;;		___lwdiv
  6257 ;;		___lwmod
  6258 ;; This function is called by:
  6259 ;;		_itoa
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263                           	psect	text18
  6264  0044CC                     __ptext18:
  6265                           	opt stack 0
  6266  0044CC                     _utoa:
  6267                           	opt stack 22
  6268                           
  6269                           ;incstack = 0
  6270  0044CC  C069  F06D         	movff	utoa@val,utoa@v
  6271  0044D0  C06A  F06E         	movff	utoa@val+1,utoa@v+1
  6272  0044D4  C06D  F060         	movff	utoa@v,___lwdiv@dividend
  6273  0044D8  C06E  F061         	movff	utoa@v+1,___lwdiv@dividend+1
  6274  0044DC  C06B  F062         	movff	utoa@base,___lwdiv@divisor
  6275  0044E0  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
  6276  0044E4  EC97  F028         	call	___lwdiv	;wreg free
  6277  0044E8  C060  F06D         	movff	?___lwdiv,utoa@v
  6278  0044EC  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
  6279  0044F0  0100               	movlb	0	; () banked
  6280  0044F2  4B67               	infsnz	utoa@buf& (0+255),f,b
  6281  0044F4  2B68               	incf	(utoa@buf+1)& (0+255),f,b
  6282                           
  6283                           ; BSR set to: 0
  6284  0044F6  516D               	movf	utoa@v& (0+255),w,b
  6285  0044F8  116E               	iorwf	(utoa@v+1)& (0+255),w,b
  6286  0044FA  A4D8               	btfss	status,2,c
  6287  0044FC  D7EB               	goto	l1869
  6288                           
  6289                           ; BSR set to: 0
  6290                           
  6291                           ; BSR set to: 0
  6292  0044FE  C067  FFD9         	movff	utoa@buf,fsr2l
  6293  004502  C068  FFDA         	movff	utoa@buf+1,fsr2h
  6294  004506  0E00               	movlw	0
  6295  004508  6EDF               	movwf	indf2,c
  6296                           
  6297                           ; BSR set to: 0
  6298  00450A  0767               	decf	utoa@buf& (0+255),f,b
  6299  00450C  A0D8               	btfss	status,0,c
  6300  00450E  0768               	decf	(utoa@buf+1)& (0+255),f,b
  6301  004510                     
  6302                           ; BSR set to: 0
  6303                           
  6304                           ; BSR set to: 0
  6305  004510  C069  F060         	movff	utoa@val,___lwmod@dividend
  6306  004514  C06A  F061         	movff	utoa@val+1,___lwmod@dividend+1
  6307  004518  C06B  F062         	movff	utoa@base,___lwmod@divisor
  6308  00451C  C06C  F063         	movff	utoa@base+1,___lwmod@divisor+1
  6309  004520  ECEC  F029         	call	___lwmod	;wreg free
  6310  004524  0100               	movlb	0	; () banked
  6311  004526  5160               	movf	?___lwmod& (0+255),w,b
  6312  004528  6F6F               	movwf	utoa@c& (0+255),b
  6313                           
  6314                           ; BSR set to: 0
  6315  00452A  C069  F060         	movff	utoa@val,___lwdiv@dividend
  6316  00452E  C06A  F061         	movff	utoa@val+1,___lwdiv@dividend+1
  6317  004532  C06B  F062         	movff	utoa@base,___lwdiv@divisor
  6318  004536  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
  6319  00453A  EC97  F028         	call	___lwdiv	;wreg free
  6320  00453E  C060  F069         	movff	?___lwdiv,utoa@val
  6321  004542  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
  6322  004546  0E09               	movlw	9
  6323  004548  0100               	movlb	0	; () banked
  6324  00454A  656F               	cpfsgt	utoa@c& (0+255),b
  6325  00454C  D002               	goto	l1872
  6326                           
  6327                           ; BSR set to: 0
  6328  00454E  0E07               	movlw	7
  6329  004550  276F               	addwf	utoa@c& (0+255),f,b
  6330  004552                     l1872:
  6331                           
  6332                           ; BSR set to: 0
  6333  004552  0E30               	movlw	48
  6334  004554  276F               	addwf	utoa@c& (0+255),f,b
  6335                           
  6336                           ; BSR set to: 0
  6337  004556  C067  FFD9         	movff	utoa@buf,fsr2l
  6338  00455A  C068  FFDA         	movff	utoa@buf+1,fsr2h
  6339  00455E  C06F  FFDF         	movff	utoa@c,indf2
  6340                           
  6341                           ; BSR set to: 0
  6342  004562  0767               	decf	utoa@buf& (0+255),f,b
  6343  004564  A0D8               	btfss	status,0,c
  6344  004566  0768               	decf	(utoa@buf+1)& (0+255),f,b
  6345                           
  6346                           ; BSR set to: 0
  6347  004568  5169               	movf	utoa@val& (0+255),w,b
  6348  00456A  116A               	iorwf	(utoa@val+1)& (0+255),w,b
  6349  00456C  A4D8               	btfss	status,2,c
  6350  00456E  D7D0               	goto	l1871
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;	Return value of _utoa is never used
  6354                           
  6355                           ; BSR set to: 0
  6356  004570  4B67               	infsnz	utoa@buf& (0+255),f,b
  6357  004572  2B68               	incf	(utoa@buf+1)& (0+255),f,b
  6358  004574  0012               	return	
  6359  004576                     __end_of_utoa:
  6360                           	opt stack 0
  6361                           tosu	equ	0xFFF
  6362                           tosh	equ	0xFFE
  6363                           tosl	equ	0xFFD
  6364                           pclath	equ	0xFFA
  6365                           tblptru	equ	0xFF8
  6366                           tblptrh	equ	0xFF7
  6367                           tblptrl	equ	0xFF6
  6368                           tablat	equ	0xFF5
  6369                           prodh	equ	0xFF4
  6370                           prodl	equ	0xFF3
  6371                           intcon	equ	0xFF2
  6372                           intcon2	equ	0xFF1
  6373                           intcon3	equ	0xFF0
  6374                           postinc0	equ	0xFEE
  6375                           wreg	equ	0xFE8
  6376                           indf1	equ	0xFE7
  6377                           postinc1	equ	0xFE6
  6378                           postdec1	equ	0xFE5
  6379                           plusw1	equ	0xFE3
  6380                           fsr1h	equ	0xFE2
  6381                           fsr1l	equ	0xFE1
  6382                           indf2	equ	0xFDF
  6383                           postinc2	equ	0xFDE
  6384                           postdec2	equ	0xFDD
  6385                           plusw2	equ	0xFDB
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function ___lwmod *****************
  6391 ;; Defined at:
  6392 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  dividend        2    0[BANK0 ] unsigned int 
  6395 ;;  divisor         2    2[BANK0 ] unsigned int 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  counter         1    4[BANK0 ] unsigned char 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  2    0[BANK0 ] unsigned int 
  6400 ;; Registers used:
  6401 ;;		wreg, status,2, status,0
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6407 ;;      Params:         0       4       0       0       0       0       0       0       0
  6408 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6410 ;;      Totals:         0       5       0       0       0       0       0       0       0
  6411 ;;Total ram usage:        5 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    3
  6414 ;; This function calls:
  6415 ;;		Nothing
  6416 ;; This function is called by:
  6417 ;;		_utoa
  6418 ;;		_converte_inteiro_matriz
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           	psect	text19
  6423  0053D8                     __ptext19:
  6424                           	opt stack 0
  6425  0053D8                     ___lwmod:
  6426                           	opt stack 22
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;incstack = 0
  6430  0053D8  0100               	movlb	0	; () banked
  6431  0053DA  5162               	movf	___lwmod@divisor& (0+255),w,b
  6432  0053DC  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6433  0053DE  B4D8               	btfsc	status,2,c
  6434  0053E0  D018               	goto	l1967
  6435                           
  6436                           ; BSR set to: 0
  6437  0053E2  0E01               	movlw	1
  6438  0053E4  6F64               	movwf	___lwmod@counter& (0+255),b
  6439  0053E6  D004               	goto	l1962
  6440  0053E8                     
  6441                           ; BSR set to: 0
  6442                           
  6443                           ; BSR set to: 0
  6444  0053E8  90D8               	bcf	status,0,c
  6445  0053EA  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  6446  0053EC  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6447  0053EE  2B64               	incf	___lwmod@counter& (0+255),f,b
  6448  0053F0                     l1962:
  6449                           
  6450                           ; BSR set to: 0
  6451                           
  6452                           ; BSR set to: 0
  6453  0053F0  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6454  0053F2  D7FA               	goto	l1963
  6455  0053F4                     u14350:
  6456                           
  6457                           ; BSR set to: 0
  6458                           
  6459                           ; BSR set to: 0
  6460                           
  6461                           ; BSR set to: 0
  6462  0053F4  5162               	movf	___lwmod@divisor& (0+255),w,b
  6463  0053F6  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  6464  0053F8  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6465  0053FA  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6466  0053FC  A0D8               	btfss	status,0,c
  6467  0053FE  D004               	goto	l1966
  6468                           
  6469                           ; BSR set to: 0
  6470  005400  5162               	movf	___lwmod@divisor& (0+255),w,b
  6471  005402  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  6472  005404  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6473  005406  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6474  005408                     l1966:
  6475                           
  6476                           ; BSR set to: 0
  6477                           
  6478                           ; BSR set to: 0
  6479  005408  90D8               	bcf	status,0,c
  6480  00540A  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6481  00540C  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  6482                           
  6483                           ; BSR set to: 0
  6484  00540E  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  6485  005410  D7F1               	goto	u14350
  6486  005412                     l1967:
  6487                           
  6488                           ; BSR set to: 0
  6489                           
  6490                           ; BSR set to: 0
  6491  005412  C060  F060         	movff	___lwmod@dividend,?___lwmod
  6492  005416  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  6493                           
  6494                           ; BSR set to: 0
  6495  00541A  0012               	return		;funcret
  6496  00541C                     __end_of___lwmod:
  6497                           	opt stack 0
  6498                           tosu	equ	0xFFF
  6499                           tosh	equ	0xFFE
  6500                           tosl	equ	0xFFD
  6501                           pclath	equ	0xFFA
  6502                           tblptru	equ	0xFF8
  6503                           tblptrh	equ	0xFF7
  6504                           tblptrl	equ	0xFF6
  6505                           tablat	equ	0xFF5
  6506                           prodh	equ	0xFF4
  6507                           prodl	equ	0xFF3
  6508                           intcon	equ	0xFF2
  6509                           intcon2	equ	0xFF1
  6510                           intcon3	equ	0xFF0
  6511                           postinc0	equ	0xFEE
  6512                           wreg	equ	0xFE8
  6513                           indf1	equ	0xFE7
  6514                           postinc1	equ	0xFE6
  6515                           postdec1	equ	0xFE5
  6516                           plusw1	equ	0xFE3
  6517                           fsr1h	equ	0xFE2
  6518                           fsr1l	equ	0xFE1
  6519                           indf2	equ	0xFDF
  6520                           postinc2	equ	0xFDE
  6521                           postdec2	equ	0xFDD
  6522                           plusw2	equ	0xFDB
  6523                           fsr2h	equ	0xFDA
  6524                           fsr2l	equ	0xFD9
  6525                           status	equ	0xFD8
  6526                           
  6527 ;; *************** function ___lwdiv *****************
  6528 ;; Defined at:
  6529 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6530 ;; Parameters:    Size  Location     Type
  6531 ;;  dividend        2    0[BANK0 ] unsigned int 
  6532 ;;  divisor         2    2[BANK0 ] unsigned int 
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;  quotient        2    5[BANK0 ] unsigned int 
  6535 ;;  counter         1    4[BANK0 ] unsigned char 
  6536 ;; Return value:  Size  Location     Type
  6537 ;;                  2    0[BANK0 ] unsigned int 
  6538 ;; Registers used:
  6539 ;;		wreg, status,2, status,0
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6545 ;;      Params:         0       4       0       0       0       0       0       0       0
  6546 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6548 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6549 ;;Total ram usage:        7 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    3
  6552 ;; This function calls:
  6553 ;;		Nothing
  6554 ;; This function is called by:
  6555 ;;		_utoa
  6556 ;;		_converte_inteiro_matriz
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text20
  6561  00512E                     __ptext20:
  6562                           	opt stack 0
  6563  00512E                     ___lwdiv:
  6564                           	opt stack 22
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;incstack = 0
  6568  00512E  0E00               	movlw	0
  6569  005130  0100               	movlb	0	; () banked
  6570  005132  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6571  005134  0E00               	movlw	0
  6572  005136  6F65               	movwf	___lwdiv@quotient& (0+255),b
  6573                           
  6574                           ; BSR set to: 0
  6575  005138  5162               	movf	___lwdiv@divisor& (0+255),w,b
  6576  00513A  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6577  00513C  B4D8               	btfsc	status,2,c
  6578  00513E  D01C               	goto	l1957
  6579                           
  6580                           ; BSR set to: 0
  6581  005140  0E01               	movlw	1
  6582  005142  6F64               	movwf	___lwdiv@counter& (0+255),b
  6583  005144  D004               	goto	l1952
  6584  005146                     
  6585                           ; BSR set to: 0
  6586                           
  6587                           ; BSR set to: 0
  6588  005146  90D8               	bcf	status,0,c
  6589  005148  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  6590  00514A  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6591  00514C  2B64               	incf	___lwdiv@counter& (0+255),f,b
  6592  00514E                     l1952:
  6593                           
  6594                           ; BSR set to: 0
  6595                           
  6596                           ; BSR set to: 0
  6597  00514E  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6598  005150  D7FA               	goto	l1953
  6599  005152                     u14320:
  6600                           
  6601                           ; BSR set to: 0
  6602                           
  6603                           ; BSR set to: 0
  6604                           
  6605                           ; BSR set to: 0
  6606  005152  90D8               	bcf	status,0,c
  6607  005154  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  6608  005156  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6609                           
  6610                           ; BSR set to: 0
  6611  005158  5162               	movf	___lwdiv@divisor& (0+255),w,b
  6612  00515A  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  6613  00515C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6614  00515E  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6615  005160  A0D8               	btfss	status,0,c
  6616  005162  D005               	goto	l1956
  6617                           
  6618                           ; BSR set to: 0
  6619  005164  5162               	movf	___lwdiv@divisor& (0+255),w,b
  6620  005166  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  6621  005168  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6622  00516A  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6623                           
  6624                           ; BSR set to: 0
  6625  00516C  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  6626  00516E                     l1956:
  6627                           
  6628                           ; BSR set to: 0
  6629                           
  6630                           ; BSR set to: 0
  6631  00516E  90D8               	bcf	status,0,c
  6632  005170  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6633  005172  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  6634                           
  6635                           ; BSR set to: 0
  6636  005174  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  6637  005176  D7ED               	goto	u14320
  6638  005178                     l1957:
  6639                           
  6640                           ; BSR set to: 0
  6641                           
  6642                           ; BSR set to: 0
  6643  005178  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  6644  00517C  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6645                           
  6646                           ; BSR set to: 0
  6647  005180  0012               	return		;funcret
  6648  005182                     __end_of___lwdiv:
  6649                           	opt stack 0
  6650                           tosu	equ	0xFFF
  6651                           tosh	equ	0xFFE
  6652                           tosl	equ	0xFFD
  6653                           pclath	equ	0xFFA
  6654                           tblptru	equ	0xFF8
  6655                           tblptrh	equ	0xFF7
  6656                           tblptrl	equ	0xFF6
  6657                           tablat	equ	0xFF5
  6658                           prodh	equ	0xFF4
  6659                           prodl	equ	0xFF3
  6660                           intcon	equ	0xFF2
  6661                           intcon2	equ	0xFF1
  6662                           intcon3	equ	0xFF0
  6663                           postinc0	equ	0xFEE
  6664                           wreg	equ	0xFE8
  6665                           indf1	equ	0xFE7
  6666                           postinc1	equ	0xFE6
  6667                           postdec1	equ	0xFE5
  6668                           plusw1	equ	0xFE3
  6669                           fsr1h	equ	0xFE2
  6670                           fsr1l	equ	0xFE1
  6671                           indf2	equ	0xFDF
  6672                           postinc2	equ	0xFDE
  6673                           postdec2	equ	0xFDD
  6674                           plusw2	equ	0xFDB
  6675                           fsr2h	equ	0xFDA
  6676                           fsr2l	equ	0xFD9
  6677                           status	equ	0xFD8
  6678                           
  6679 ;; *************** function _atoi *****************
  6680 ;; Defined at:
  6681 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  6684 ;;		 -> poligono_ext.point_long_min(6), poligono_ext.fence_long_min(6), poligono_ext.point_lat_min(6), poligono_ext.fenc
      +e_lat_min(6), 
  6685 ;;		 -> poligono_ext.fence_lat_deg(6), poligono_ext.point_lat_deg(6), poligono_ext.fence_long_deg(6), poligono_ext.point
      +_long_deg(6), 
  6686 ;;		 -> poligono_ext(128), 
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;  a               2   11[BANK0 ] int 
  6689 ;;  sign            1   10[BANK0 ] unsigned char 
  6690 ;; Return value:  Size  Location     Type
  6691 ;;                  2    6[BANK0 ] int 
  6692 ;; Registers used:
  6693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6694 ;; Tracked objects:
  6695 ;;		On entry : 0/0
  6696 ;;		On exit  : 0/0
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6699 ;;      Params:         0       2       0       0       0       0       0       0       0
  6700 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6701 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6702 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6703 ;;Total ram usage:        7 bytes
  6704 ;; Hardware stack levels used:    1
  6705 ;; Hardware stack levels required when called:    4
  6706 ;; This function calls:
  6707 ;;		___wmul
  6708 ;;		_isdigit
  6709 ;; This function is called by:
  6710 ;;		_verifica_fence_externo
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	text21
  6715  0041A8                     __ptext21:
  6716                           	opt stack 0
  6717  0041A8                     _atoi:
  6718                           	opt stack 24
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;incstack = 0
  6722  0041A8  D003               	goto	l1678
  6723  0041AA  0100               	movlb	0	; () banked
  6724  0041AC  4B66               	infsnz	atoi@s& (0+255),f,b
  6725  0041AE  2B67               	incf	(atoi@s+1)& (0+255),f,b
  6726  0041B0                     l1678:
  6727                           
  6728                           ; BSR set to: 0
  6729  0041B0  C066  FFD9         	movff	atoi@s,fsr2l
  6730  0041B4  C067  FFDA         	movff	atoi@s+1,fsr2h
  6731  0041B8  0E20               	movlw	32
  6732  0041BA  18DE               	xorwf	postinc2,w,c
  6733  0041BC  B4D8               	btfsc	status,2,c
  6734  0041BE  D7F5               	goto	l1679
  6735  0041C0  C066  FFD9         	movff	atoi@s,fsr2l
  6736  0041C4  C067  FFDA         	movff	atoi@s+1,fsr2h
  6737  0041C8  0E09               	movlw	9
  6738  0041CA  18DE               	xorwf	postinc2,w,c
  6739  0041CC  B4D8               	btfsc	status,2,c
  6740  0041CE  D7ED               	goto	l1679
  6741  0041D0  0E00               	movlw	0
  6742  0041D2  0100               	movlb	0	; () banked
  6743  0041D4  6F6C               	movwf	(atoi@a+1)& (0+255),b
  6744  0041D6  0E00               	movlw	0
  6745  0041D8  6F6B               	movwf	atoi@a& (0+255),b
  6746  0041DA  0E00               	movlw	0
  6747  0041DC  6F6A               	movwf	atoi@sign& (0+255),b
  6748                           
  6749                           ; BSR set to: 0
  6750  0041DE  C066  FFD9         	movff	atoi@s,fsr2l
  6751  0041E2  C067  FFDA         	movff	atoi@s+1,fsr2h
  6752  0041E6  0E2D               	movlw	45
  6753  0041E8  18DE               	xorwf	postinc2,w,c
  6754  0041EA  A4D8               	btfss	status,2,c
  6755  0041EC  D002               	goto	l1681
  6756                           
  6757                           ; BSR set to: 0
  6758  0041EE  2B6A               	incf	atoi@sign& (0+255),f,b
  6759  0041F0  D026               	goto	l11811
  6760  0041F2                     l1681:
  6761                           
  6762                           ; BSR set to: 0
  6763                           
  6764                           ; BSR set to: 0
  6765  0041F2  C066  FFD9         	movff	atoi@s,fsr2l
  6766  0041F6  C067  FFDA         	movff	atoi@s+1,fsr2h
  6767  0041FA  0E2B               	movlw	43
  6768  0041FC  18DE               	xorwf	postinc2,w,c
  6769  0041FE  A4D8               	btfss	status,2,c
  6770  004200  D020               	goto	l1684
  6771  004202  D01D               	goto	l11811
  6772  004204                     
  6773                           ; BSR set to: 0
  6774  004204  C06B  F060         	movff	atoi@a,___wmul@multiplier
  6775  004208  C06C  F061         	movff	atoi@a+1,___wmul@multiplier+1
  6776  00420C  0E00               	movlw	0
  6777  00420E  0100               	movlb	0	; () banked
  6778  004210  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6779  004212  0E0A               	movlw	10
  6780  004214  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6781  004216  EC3B  F02B         	call	___wmul	;wreg free
  6782  00421A  C066  FFD9         	movff	atoi@s,fsr2l
  6783  00421E  C067  FFDA         	movff	atoi@s+1,fsr2h
  6784  004222  50DF               	movf	indf2,w,c
  6785  004224  0100               	movlb	0	; () banked
  6786  004226  6F68               	movwf	??_atoi& (0+255),b
  6787  004228  6B69               	clrf	(??_atoi+1)& (0+255),b
  6788  00422A  5160               	movf	?___wmul& (0+255),w,b
  6789  00422C  2768               	addwf	??_atoi& (0+255),f,b
  6790  00422E  5161               	movf	(?___wmul+1)& (0+255),w,b
  6791  004230  2369               	addwfc	(??_atoi+1)& (0+255),f,b
  6792  004232  0ED0               	movlw	208
  6793  004234  2568               	addwf	??_atoi& (0+255),w,b
  6794  004236  6F6B               	movwf	atoi@a& (0+255),b
  6795  004238  0EFF               	movlw	255
  6796  00423A  2169               	addwfc	(??_atoi+1)& (0+255),w,b
  6797  00423C  6F6C               	movwf	(atoi@a+1)& (0+255),b
  6798  00423E                     l11811:
  6799                           
  6800                           ; BSR set to: 0
  6801  00423E  4B66               	infsnz	atoi@s& (0+255),f,b
  6802  004240  2B67               	incf	(atoi@s+1)& (0+255),f,b
  6803  004242                     l1684:
  6804                           
  6805                           ; BSR set to: 0
  6806                           
  6807                           ; BSR set to: 0
  6808  004242  C066  FFD9         	movff	atoi@s,fsr2l
  6809  004246  C067  FFDA         	movff	atoi@s+1,fsr2h
  6810  00424A  50DF               	movf	indf2,w,c
  6811  00424C  EC61  F02B         	call	_isdigit
  6812  004250  B0D8               	btfsc	status,0,c
  6813  004252  D7D8               	goto	l1685
  6814  004254  0100               	movlb	0	; () banked
  6815  004256  516A               	movf	atoi@sign& (0+255),w,b
  6816  004258  B4D8               	btfsc	status,2,c
  6817  00425A  D00D               	goto	l1687
  6818                           
  6819                           ; BSR set to: 0
  6820  00425C  C06B  F068         	movff	atoi@a,??_atoi
  6821  004260  C06C  F069         	movff	atoi@a+1,??_atoi+1
  6822  004264  1F68               	comf	??_atoi& (0+255),f,b
  6823  004266  1F69               	comf	(??_atoi+1)& (0+255),f,b
  6824  004268  4B68               	infsnz	??_atoi& (0+255),f,b
  6825  00426A  2B69               	incf	(??_atoi+1)& (0+255),f,b
  6826  00426C  C068  F066         	movff	??_atoi,?_atoi
  6827  004270  C069  F067         	movff	??_atoi+1,?_atoi+1
  6828  004274  0012               	return	
  6829  004276                     l1687:
  6830                           
  6831                           ; BSR set to: 0
  6832  004276  C06B  F066         	movff	atoi@a,?_atoi
  6833  00427A  C06C  F067         	movff	atoi@a+1,?_atoi+1
  6834                           
  6835                           ; BSR set to: 0
  6836  00427E  0012               	return		;funcret
  6837  004280                     __end_of_atoi:
  6838                           	opt stack 0
  6839                           tosu	equ	0xFFF
  6840                           tosh	equ	0xFFE
  6841                           tosl	equ	0xFFD
  6842                           pclath	equ	0xFFA
  6843                           tblptru	equ	0xFF8
  6844                           tblptrh	equ	0xFF7
  6845                           tblptrl	equ	0xFF6
  6846                           tablat	equ	0xFF5
  6847                           prodh	equ	0xFF4
  6848                           prodl	equ	0xFF3
  6849                           intcon	equ	0xFF2
  6850                           intcon2	equ	0xFF1
  6851                           intcon3	equ	0xFF0
  6852                           postinc0	equ	0xFEE
  6853                           wreg	equ	0xFE8
  6854                           indf1	equ	0xFE7
  6855                           postinc1	equ	0xFE6
  6856                           postdec1	equ	0xFE5
  6857                           plusw1	equ	0xFE3
  6858                           fsr1h	equ	0xFE2
  6859                           fsr1l	equ	0xFE1
  6860                           indf2	equ	0xFDF
  6861                           postinc2	equ	0xFDE
  6862                           postdec2	equ	0xFDD
  6863                           plusw2	equ	0xFDB
  6864                           fsr2h	equ	0xFDA
  6865                           fsr2l	equ	0xFD9
  6866                           status	equ	0xFD8
  6867                           
  6868 ;; *************** function _isdigit *****************
  6869 ;; Defined at:
  6870 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;  c               1    wreg     unsigned char 
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;  c               1    2[BANK0 ] unsigned char 
  6875 ;; Return value:  Size  Location     Type
  6876 ;;		None               void
  6877 ;; Registers used:
  6878 ;;		wreg, status,2, status,0
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6884 ;;      Params:         0       0       0       0       0       0       0       0       0
  6885 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6886 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6887 ;;      Totals:         0       3       0       0       0       0       0       0       0
  6888 ;;Total ram usage:        3 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:    3
  6891 ;; This function calls:
  6892 ;;		Nothing
  6893 ;; This function is called by:
  6894 ;;		_atoi
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           	psect	text22
  6899  0056C2                     __ptext22:
  6900                           	opt stack 0
  6901  0056C2                     _isdigit:
  6902                           	opt stack 24
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;incstack = 0
  6906                           ;isdigit@c stored from wreg
  6907  0056C2  0100               	movlb	0	; () banked
  6908  0056C4  6F62               	movwf	isdigit@c& (0+255),b
  6909  0056C6  0E00               	movlw	0
  6910  0056C8  0100               	movlb	0	; () banked
  6911  0056CA  6F61               	movwf	_isdigit$2949& (0+255),b
  6912                           
  6913                           ; BSR set to: 0
  6914  0056CC  0E3A               	movlw	58
  6915  0056CE  6162               	cpfslt	isdigit@c& (0+255),b
  6916  0056D0  D005               	goto	l1859
  6917                           
  6918                           ; BSR set to: 0
  6919  0056D2  0E2F               	movlw	47
  6920  0056D4  6562               	cpfsgt	isdigit@c& (0+255),b
  6921  0056D6  D002               	goto	l1859
  6922                           
  6923                           ; BSR set to: 0
  6924  0056D8  0E01               	movlw	1
  6925  0056DA  6F61               	movwf	_isdigit$2949& (0+255),b
  6926  0056DC                     l1859:
  6927                           
  6928                           ; BSR set to: 0
  6929                           
  6930                           ; BSR set to: 0
  6931  0056DC  C061  F060         	movff	_isdigit$2949,??_isdigit
  6932  0056E0  3160               	rrcf	??_isdigit& (0+255),w,b
  6933  0056E2  0012               	return	
  6934  0056E4                     __end_of_isdigit:
  6935                           	opt stack 0
  6936                           tosu	equ	0xFFF
  6937                           tosh	equ	0xFFE
  6938                           tosl	equ	0xFFD
  6939                           pclath	equ	0xFFA
  6940                           tblptru	equ	0xFF8
  6941                           tblptrh	equ	0xFF7
  6942                           tblptrl	equ	0xFF6
  6943                           tablat	equ	0xFF5
  6944                           prodh	equ	0xFF4
  6945                           prodl	equ	0xFF3
  6946                           intcon	equ	0xFF2
  6947                           intcon2	equ	0xFF1
  6948                           intcon3	equ	0xFF0
  6949                           postinc0	equ	0xFEE
  6950                           wreg	equ	0xFE8
  6951                           indf1	equ	0xFE7
  6952                           postinc1	equ	0xFE6
  6953                           postdec1	equ	0xFE5
  6954                           plusw1	equ	0xFE3
  6955                           fsr1h	equ	0xFE2
  6956                           fsr1l	equ	0xFE1
  6957                           indf2	equ	0xFDF
  6958                           postinc2	equ	0xFDE
  6959                           postdec2	equ	0xFDD
  6960                           plusw2	equ	0xFDB
  6961                           fsr2h	equ	0xFDA
  6962                           fsr2l	equ	0xFD9
  6963                           status	equ	0xFD8
  6964                           
  6965 ;; *************** function _Longitude *****************
  6966 ;; Defined at:
  6967 ;;		line 611 in file "bibliotecas/GPS.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;		None
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;		None
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  2    0[BANK0 ] PTR unsigned char 
  6974 ;; Registers used:
  6975 ;;		wreg, status,2, status,0
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6981 ;;      Params:         0       2       0       0       0       0       0       0       0
  6982 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6983 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6984 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6985 ;;Total ram usage:        2 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; Hardware stack levels required when called:    3
  6988 ;; This function calls:
  6989 ;;		Nothing
  6990 ;; This function is called by:
  6991 ;;		_verifica_fence_externo
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           	psect	text23
  6996  0057E2                     __ptext23:
  6997                           	opt stack 0
  6998  0057E2                     _Longitude:
  6999                           	opt stack 25
  7000                           
  7001                           ;GPS.c: 613: return rawLongitude;
  7002                           
  7003                           ; BSR set to: 0
  7004                           ;incstack = 0
  7005  0057E2  0ED8               	movlw	low _rawLongitude
  7006  0057E4  0100               	movlb	0	; () banked
  7007  0057E6  6F60               	movwf	?_Longitude& (0+255),b
  7008  0057E8  0E02               	movlw	high _rawLongitude
  7009  0057EA  6F61               	movwf	(?_Longitude+1)& (0+255),b
  7010  0057EC  0012               	return	
  7011  0057EE                     __end_of_Longitude:
  7012                           	opt stack 0
  7013                           tosu	equ	0xFFF
  7014                           tosh	equ	0xFFE
  7015                           tosl	equ	0xFFD
  7016                           pclath	equ	0xFFA
  7017                           tblptru	equ	0xFF8
  7018                           tblptrh	equ	0xFF7
  7019                           tblptrl	equ	0xFF6
  7020                           tablat	equ	0xFF5
  7021                           prodh	equ	0xFF4
  7022                           prodl	equ	0xFF3
  7023                           intcon	equ	0xFF2
  7024                           intcon2	equ	0xFF1
  7025                           intcon3	equ	0xFF0
  7026                           postinc0	equ	0xFEE
  7027                           wreg	equ	0xFE8
  7028                           indf1	equ	0xFE7
  7029                           postinc1	equ	0xFE6
  7030                           postdec1	equ	0xFE5
  7031                           plusw1	equ	0xFE3
  7032                           fsr1h	equ	0xFE2
  7033                           fsr1l	equ	0xFE1
  7034                           indf2	equ	0xFDF
  7035                           postinc2	equ	0xFDE
  7036                           postdec2	equ	0xFDD
  7037                           plusw2	equ	0xFDB
  7038                           fsr2h	equ	0xFDA
  7039                           fsr2l	equ	0xFD9
  7040                           status	equ	0xFD8
  7041                           
  7042 ;; *************** function _Latitude *****************
  7043 ;; Defined at:
  7044 ;;		line 606 in file "bibliotecas/GPS.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;		None
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;		None
  7049 ;; Return value:  Size  Location     Type
  7050 ;;                  2    0[BANK0 ] PTR unsigned char 
  7051 ;; Registers used:
  7052 ;;		wreg, status,2, status,0
  7053 ;; Tracked objects:
  7054 ;;		On entry : 0/0
  7055 ;;		On exit  : 0/0
  7056 ;;		Unchanged: 0/0
  7057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7058 ;;      Params:         0       2       0       0       0       0       0       0       0
  7059 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7060 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7061 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7062 ;;Total ram usage:        2 bytes
  7063 ;; Hardware stack levels used:    1
  7064 ;; Hardware stack levels required when called:    3
  7065 ;; This function calls:
  7066 ;;		Nothing
  7067 ;; This function is called by:
  7068 ;;		_verifica_fence_externo
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           	psect	text24
  7073  0057EE                     __ptext24:
  7074                           	opt stack 0
  7075  0057EE                     _Latitude:
  7076                           	opt stack 25
  7077                           
  7078                           ;GPS.c: 608: return rawLatitude;
  7079                           
  7080                           ; BSR set to: 0
  7081                           ;incstack = 0
  7082  0057EE  0EE5               	movlw	low _rawLatitude
  7083  0057F0  0100               	movlb	0	; () banked
  7084  0057F2  6F60               	movwf	?_Latitude& (0+255),b
  7085  0057F4  0E02               	movlw	high _rawLatitude
  7086  0057F6  6F61               	movwf	(?_Latitude+1)& (0+255),b
  7087  0057F8  0012               	return	
  7088  0057FA                     __end_of_Latitude:
  7089                           	opt stack 0
  7090                           tosu	equ	0xFFF
  7091                           tosh	equ	0xFFE
  7092                           tosl	equ	0xFFD
  7093                           pclath	equ	0xFFA
  7094                           tblptru	equ	0xFF8
  7095                           tblptrh	equ	0xFF7
  7096                           tblptrl	equ	0xFF6
  7097                           tablat	equ	0xFF5
  7098                           prodh	equ	0xFF4
  7099                           prodl	equ	0xFF3
  7100                           intcon	equ	0xFF2
  7101                           intcon2	equ	0xFF1
  7102                           intcon3	equ	0xFF0
  7103                           postinc0	equ	0xFEE
  7104                           wreg	equ	0xFE8
  7105                           indf1	equ	0xFE7
  7106                           postinc1	equ	0xFE6
  7107                           postdec1	equ	0xFE5
  7108                           plusw1	equ	0xFE3
  7109                           fsr1h	equ	0xFE2
  7110                           fsr1l	equ	0xFE1
  7111                           indf2	equ	0xFDF
  7112                           postinc2	equ	0xFDE
  7113                           postdec2	equ	0xFDD
  7114                           plusw2	equ	0xFDB
  7115                           fsr2h	equ	0xFDA
  7116                           fsr2l	equ	0xFD9
  7117                           status	equ	0xFD8
  7118                           
  7119 ;; *************** function _fix *****************
  7120 ;; Defined at:
  7121 ;;		line 616 in file "bibliotecas/GPS.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;		None
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;		None
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      unsigned char 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7135 ;;      Params:         0       0       0       0       0       0       0       0       0
  7136 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7137 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7138 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7139 ;;Total ram usage:        0 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    3
  7142 ;; This function calls:
  7143 ;;		Nothing
  7144 ;; This function is called by:
  7145 ;;		_troca_de_tela
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           	psect	text25
  7150  00583A                     __ptext25:
  7151                           	opt stack 0
  7152  00583A                     _fix:
  7153                           	opt stack 25
  7154                           
  7155                           ;GPS.c: 618: return rawFix;
  7156                           
  7157                           ; BSR set to: 0
  7158                           ;incstack = 0
  7159  00583A  5039               	movf	_rawFix,w,c
  7160  00583C  0012               	return	
  7161  00583E                     __end_of_fix:
  7162                           	opt stack 0
  7163                           tosu	equ	0xFFF
  7164                           tosh	equ	0xFFE
  7165                           tosl	equ	0xFFD
  7166                           pclath	equ	0xFFA
  7167                           tblptru	equ	0xFF8
  7168                           tblptrh	equ	0xFF7
  7169                           tblptrl	equ	0xFF6
  7170                           tablat	equ	0xFF5
  7171                           prodh	equ	0xFF4
  7172                           prodl	equ	0xFF3
  7173                           intcon	equ	0xFF2
  7174                           intcon2	equ	0xFF1
  7175                           intcon3	equ	0xFF0
  7176                           postinc0	equ	0xFEE
  7177                           wreg	equ	0xFE8
  7178                           indf1	equ	0xFE7
  7179                           postinc1	equ	0xFE6
  7180                           postdec1	equ	0xFE5
  7181                           plusw1	equ	0xFE3
  7182                           fsr1h	equ	0xFE2
  7183                           fsr1l	equ	0xFE1
  7184                           indf2	equ	0xFDF
  7185                           postinc2	equ	0xFDE
  7186                           postdec2	equ	0xFDD
  7187                           plusw2	equ	0xFDB
  7188                           fsr2h	equ	0xFDA
  7189                           fsr2l	equ	0xFD9
  7190                           status	equ	0xFD8
  7191                           
  7192 ;; *************** function _escreve_cmd_lcd *****************
  7193 ;; Defined at:
  7194 ;;		line 162 in file "bibliotecas/display_lcd.c"
  7195 ;; Parameters:    Size  Location     Type
  7196 ;;  comando         1    wreg     unsigned char 
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;  comando         1    2[BANK0 ] unsigned char 
  7199 ;; Return value:  Size  Location     Type
  7200 ;;                  1    wreg      void 
  7201 ;; Registers used:
  7202 ;;		wreg, status,2, status,0, cstack
  7203 ;; Tracked objects:
  7204 ;;		On entry : 0/0
  7205 ;;		On exit  : 0/0
  7206 ;;		Unchanged: 0/0
  7207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7208 ;;      Params:         0       0       0       0       0       0       0       0       0
  7209 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7210 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7211 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7212 ;;Total ram usage:        1 bytes
  7213 ;; Hardware stack levels used:    1
  7214 ;; Hardware stack levels required when called:    4
  7215 ;; This function calls:
  7216 ;;		_delay
  7217 ;; This function is called by:
  7218 ;;		_mensagem_inicial
  7219 ;;		_troca_de_tela
  7220 ;;		_init_lcd
  7221 ;;		_cria_caractere_lcd
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           	psect	text26
  7226  0048A6                     __ptext26:
  7227                           	opt stack 0
  7228  0048A6                     _escreve_cmd_lcd:
  7229                           	opt stack 25
  7230                           
  7231                           ;incstack = 0
  7232                           ;escreve_cmd_lcd@comando stored from wreg
  7233  0048A6  0100               	movlb	0	; () banked
  7234  0048A8  6F62               	movwf	escreve_cmd_lcd@comando& (0+255),b
  7235                           
  7236                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  7237  0048AA  9483               	bcf	3971,2,c	;volatile
  7238                           
  7239                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  7240  0048AC  9283               	bcf	3971,1,c	;volatile
  7241                           
  7242                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  7243  0048AE  9083               	bcf	3971,0,c	;volatile
  7244                           
  7245                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  7246  0048B0  0100               	movlb	0	; () banked
  7247  0048B2  A962               	btfss	escreve_cmd_lcd@comando& (0+255),4,b
  7248  0048B4  D002               	goto	l694
  7249                           
  7250                           ; BSR set to: 0
  7251  0048B6  8883               	bsf	3971,4,c	;volatile
  7252  0048B8  D001               	goto	l695
  7253  0048BA                     l694:
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  7257  0048BA  9883               	bcf	3971,4,c	;volatile
  7258  0048BC                     l695:
  7259                           
  7260                           ; BSR set to: 0
  7261                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  7262                           
  7263                           ; BSR set to: 0
  7264  0048BC  AB62               	btfss	escreve_cmd_lcd@comando& (0+255),5,b
  7265  0048BE  D002               	goto	l696
  7266                           
  7267                           ; BSR set to: 0
  7268  0048C0  8A83               	bsf	3971,5,c	;volatile
  7269  0048C2  D001               	goto	l697
  7270  0048C4                     l696:
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  7274  0048C4  9A83               	bcf	3971,5,c	;volatile
  7275  0048C6                     l697:
  7276                           
  7277                           ; BSR set to: 0
  7278                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  7279                           
  7280                           ; BSR set to: 0
  7281  0048C6  AD62               	btfss	escreve_cmd_lcd@comando& (0+255),6,b
  7282  0048C8  D002               	goto	l698
  7283                           
  7284                           ; BSR set to: 0
  7285  0048CA  8C83               	bsf	3971,6,c	;volatile
  7286  0048CC  D001               	goto	l699
  7287  0048CE                     l698:
  7288                           
  7289                           ; BSR set to: 0
  7290                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  7291  0048CE  9C83               	bcf	3971,6,c	;volatile
  7292  0048D0                     l699:
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  7296                           
  7297                           ; BSR set to: 0
  7298  0048D0  AF62               	btfss	escreve_cmd_lcd@comando& (0+255),7,b
  7299  0048D2  D002               	goto	l700
  7300                           
  7301                           ; BSR set to: 0
  7302  0048D4  8E83               	bsf	3971,7,c	;volatile
  7303  0048D6  D001               	goto	l701
  7304  0048D8                     l700:
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  7308  0048D8  9E83               	bcf	3971,7,c	;volatile
  7309  0048DA                     l701:
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  7313  0048DA  8083               	bsf	3971,0,c	;volatile
  7314                           
  7315                           ; BSR set to: 0
  7316                           ;display_lcd.c: 181: delay();
  7317  0048DC  EC26  F02B         	call	_delay	;wreg free
  7318                           
  7319                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  7320  0048E0  9083               	bcf	3971,0,c	;volatile
  7321                           
  7322                           ;display_lcd.c: 183: delay();
  7323  0048E2  EC26  F02B         	call	_delay	;wreg free
  7324                           
  7325                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  7326  0048E6  0100               	movlb	0	; () banked
  7327  0048E8  A162               	btfss	escreve_cmd_lcd@comando& (0+255),0,b
  7328  0048EA  D002               	goto	l702
  7329                           
  7330                           ; BSR set to: 0
  7331  0048EC  8883               	bsf	3971,4,c	;volatile
  7332  0048EE  D001               	goto	l703
  7333  0048F0                     l702:
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  7337  0048F0  9883               	bcf	3971,4,c	;volatile
  7338  0048F2                     l703:
  7339                           
  7340                           ; BSR set to: 0
  7341                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  7342  0048F2  A362               	btfss	escreve_cmd_lcd@comando& (0+255),1,b
  7343  0048F4  D002               	goto	l704
  7344                           
  7345                           ; BSR set to: 0
  7346  0048F6  8A83               	bsf	3971,5,c	;volatile
  7347  0048F8  D001               	goto	l705
  7348  0048FA                     l704:
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  7352  0048FA  9A83               	bcf	3971,5,c	;volatile
  7353  0048FC                     l705:
  7354                           
  7355                           ; BSR set to: 0
  7356                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  7357  0048FC  A562               	btfss	escreve_cmd_lcd@comando& (0+255),2,b
  7358  0048FE  D002               	goto	l706
  7359                           
  7360                           ; BSR set to: 0
  7361  004900  8C83               	bsf	3971,6,c	;volatile
  7362  004902  D001               	goto	l707
  7363  004904                     l706:
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  7367  004904  9C83               	bcf	3971,6,c	;volatile
  7368  004906                     l707:
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  7372  004906  A762               	btfss	escreve_cmd_lcd@comando& (0+255),3,b
  7373  004908  D002               	goto	l708
  7374                           
  7375                           ; BSR set to: 0
  7376  00490A  8E83               	bsf	3971,7,c	;volatile
  7377  00490C  D001               	goto	l709
  7378  00490E                     l708:
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  7382  00490E  9E83               	bcf	3971,7,c	;volatile
  7383  004910                     l709:
  7384                           
  7385                           ; BSR set to: 0
  7386                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  7387  004910  8083               	bsf	3971,0,c	;volatile
  7388                           
  7389                           ; BSR set to: 0
  7390                           ;display_lcd.c: 197: delay();
  7391  004912  EC26  F02B         	call	_delay	;wreg free
  7392                           
  7393                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  7394  004916  9083               	bcf	3971,0,c	;volatile
  7395                           
  7396                           ;display_lcd.c: 199: delay();
  7397  004918  EC26  F02B         	call	_delay	;wreg free
  7398                           
  7399                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  7400  00491C  0100               	movlb	0	; () banked
  7401  00491E  0562               	decf	escreve_cmd_lcd@comando& (0+255),w,b
  7402  004920  B4D8               	btfsc	status,2,c
  7403  004922  D008               	goto	u15900
  7404                           
  7405                           ; BSR set to: 0
  7406  004924  0E02               	movlw	2
  7407  004926  1962               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  7408  004928  B4D8               	btfsc	status,2,c
  7409  00492A  D004               	goto	u15900
  7410                           
  7411                           ; BSR set to: 0
  7412  00492C  0E03               	movlw	3
  7413  00492E  1962               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  7414  004930  A4D8               	btfss	status,2,c
  7415  004932  0012               	return	
  7416  004934                     u15900:
  7417                           
  7418                           ; BSR set to: 0
  7419                           ;display_lcd.c: 205: { delay(); }
  7420                           
  7421                           ; BSR set to: 0
  7422  004934  EC26  F02B         	call	_delay	;wreg free
  7423  004938  0012               	return	
  7424  00493A                     __end_of_escreve_cmd_lcd:
  7425                           	opt stack 0
  7426                           tosu	equ	0xFFF
  7427                           tosh	equ	0xFFE
  7428                           tosl	equ	0xFFD
  7429                           pclath	equ	0xFFA
  7430                           tblptru	equ	0xFF8
  7431                           tblptrh	equ	0xFF7
  7432                           tblptrl	equ	0xFF6
  7433                           tablat	equ	0xFF5
  7434                           prodh	equ	0xFF4
  7435                           prodl	equ	0xFF3
  7436                           intcon	equ	0xFF2
  7437                           intcon2	equ	0xFF1
  7438                           intcon3	equ	0xFF0
  7439                           postinc0	equ	0xFEE
  7440                           wreg	equ	0xFE8
  7441                           indf1	equ	0xFE7
  7442                           postinc1	equ	0xFE6
  7443                           postdec1	equ	0xFE5
  7444                           plusw1	equ	0xFE3
  7445                           fsr1h	equ	0xFE2
  7446                           fsr1l	equ	0xFE1
  7447                           indf2	equ	0xFDF
  7448                           postinc2	equ	0xFDE
  7449                           postdec2	equ	0xFDD
  7450                           plusw2	equ	0xFDB
  7451                           fsr2h	equ	0xFDA
  7452                           fsr2l	equ	0xFD9
  7453                           status	equ	0xFD8
  7454                           
  7455 ;; *************** function _escrita_sdcard *****************
  7456 ;; Defined at:
  7457 ;;		line 206 in file "bibliotecas/SDCard.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;		None
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;  bw              2    0        unsigned short 
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  1    wreg      void 
  7464 ;; Registers used:
  7465 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7471 ;;      Params:         0       0       0       0       0       0       0       0       0
  7472 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7473 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7474 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7475 ;;Total ram usage:        0 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:   15
  7478 ;; This function calls:
  7479 ;;		_desliga_SPI
  7480 ;;		_desliga_uart
  7481 ;;		_f_close
  7482 ;;		_f_lseek
  7483 ;;		_f_mount
  7484 ;;		_f_open
  7485 ;;		_fprintf
  7486 ;;		_inicializa_SPI
  7487 ;;		_inicializa_uart
  7488 ;; This function is called by:
  7489 ;;		_disparo_gravacao
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text27
  7494  00434E                     __ptext27:
  7495                           	opt stack 0
  7496  00434E                     _escrita_sdcard:
  7497                           	opt stack 13
  7498                           
  7499                           ;SDCard.c: 208: WORD bw;
  7500                           ;SDCard.c: 209: PORTBbits.RB3 = 0;
  7501                           
  7502                           ;incstack = 0
  7503  00434E  9681               	bcf	3969,3,c	;volatile
  7504                           
  7505                           ;SDCard.c: 210: desliga_uart();
  7506  004350  ECEA  F02B         	call	_desliga_uart	;wreg free
  7507                           
  7508                           ;SDCard.c: 211: inicializa_SPI();
  7509  004354  EC72  F02B         	call	_inicializa_SPI	;wreg free
  7510                           
  7511                           ;SDCard.c: 212: f_mount(0,&fs);
  7512  004358  0E81               	movlw	low _fs
  7513  00435A  0100               	movlb	0	; () banked
  7514  00435C  6F60               	movwf	f_mount@fs& (0+255),b
  7515  00435E  0E03               	movlw	high _fs
  7516  004360  6F61               	movwf	(f_mount@fs+1)& (0+255),b
  7517  004362  0E00               	movlw	0
  7518  004364  EC12  F029         	call	_f_mount
  7519                           
  7520                           ;SDCard.c: 216: if (f_open(&fil, filename, 0x10 | 0x02 ) == FR_OK)
  7521  004368  0E90               	movlw	low _fil
  7522  00436A  0100               	movlb	0	; () banked
  7523  00436C  6FD7               	movwf	f_open@fp& (0+255),b
  7524  00436E  0E01               	movlw	high _fil
  7525  004370  6FD8               	movwf	(f_open@fp+1)& (0+255),b
  7526  004372  0E81               	movlw	low _filename
  7527  004374  6FD9               	movwf	f_open@path& (0+255),b
  7528  004376  0E02               	movlw	high _filename
  7529  004378  6FDA               	movwf	(f_open@path+1)& (0+255),b
  7530  00437A  0E12               	movlw	18
  7531  00437C  6FDB               	movwf	f_open@mode& (0+255),b
  7532  00437E  EC50  F00E         	call	_f_open	;wreg free
  7533  004382  0900               	iorlw	0
  7534  004384  A4D8               	btfss	status,2,c
  7535  004386  D041               	goto	l439
  7536                           
  7537                           ;SDCard.c: 217: {
  7538                           ;SDCard.c: 219: f_lseek(&fil, ((&fil)->fsize));
  7539  004388  0E90               	movlw	low _fil
  7540  00438A  0100               	movlb	0	; () banked
  7541  00438C  6FC4               	movwf	f_lseek@fp& (0+255),b
  7542  00438E  0E01               	movlw	high _fil
  7543  004390  6FC5               	movwf	(f_lseek@fp+1)& (0+255),b
  7544  004392  C19A  F0C6         	movff	_fil+10,f_lseek@ofs
  7545  004396  C19B  F0C7         	movff	_fil+11,f_lseek@ofs+1
  7546  00439A  C19C  F0C8         	movff	_fil+12,f_lseek@ofs+2
  7547  00439E  C19D  F0C9         	movff	_fil+13,f_lseek@ofs+3
  7548  0043A2  EC21  F00A         	call	_f_lseek	;wreg free
  7549                           
  7550                           ;SDCard.c: 224: fprintf(&fil, "\nv%s;lt%s;lo%s;r%s;c%s;k%s;h%s;d%s", "string_dado.vel", 
      +                          string_dado.lt, string_dado.lo, "string_dado.rpm", "string_dado.comb", "string_dado.odom
      +                          etro_total", string_dado.hora, "string_dado.dtc");
  7551  0043A6  0E90               	movlw	low _fil
  7552  0043A8  0101               	movlb	1	; () banked
  7553  0043AA  6FD8               	movwf	fprintf@fil& (0+255),b
  7554  0043AC  0E01               	movlw	high _fil
  7555  0043AE  6FD9               	movwf	(fprintf@fil+1)& (0+255),b
  7556  0043B0  0E0D               	movlw	low STR_21
  7557  0043B2  6FDA               	movwf	fprintf@str& (0+255),b
  7558  0043B4  0E61               	movlw	high STR_21
  7559  0043B6  6FDB               	movwf	(fprintf@str+1)& (0+255),b
  7560  0043B8  0EA2               	movlw	low STR_22
  7561  0043BA  6FDC               	movwf	(?_fprintf+4)& (0+255),b
  7562  0043BC  0E61               	movlw	high STR_22
  7563  0043BE  6FDD               	movwf	(?_fprintf+5)& (0+255),b
  7564  0043C0  0E9B               	movlw	low (_string_dado+11)
  7565  0043C2  6FDE               	movwf	(?_fprintf+6)& (0+255),b
  7566  0043C4  0E02               	movlw	high (_string_dado+11)
  7567  0043C6  6FDF               	movwf	(?_fprintf+7)& (0+255),b
  7568  0043C8  0EA8               	movlw	low (_string_dado+24)
  7569  0043CA  6FE0               	movwf	(?_fprintf+8)& (0+255),b
  7570  0043CC  0E02               	movlw	high (_string_dado+24)
  7571  0043CE  6FE1               	movwf	(?_fprintf+9)& (0+255),b
  7572  0043D0  0EB2               	movlw	low STR_23
  7573  0043D2  6FE2               	movwf	(?_fprintf+10)& (0+255),b
  7574  0043D4  0E61               	movlw	high STR_23
  7575  0043D6  6FE3               	movwf	(?_fprintf+11)& (0+255),b
  7576  0043D8  0E60               	movlw	low STR_24
  7577  0043DA  6FE4               	movwf	(?_fprintf+12)& (0+255),b
  7578  0043DC  0E61               	movlw	high STR_24
  7579  0043DE  6FE5               	movwf	(?_fprintf+13)& (0+255),b
  7580  0043E0  0E30               	movlw	low STR_25
  7581  0043E2  6FE6               	movwf	(?_fprintf+14)& (0+255),b
  7582  0043E4  0E61               	movlw	high STR_25
  7583  0043E6  6FE7               	movwf	(?_fprintf+15)& (0+255),b
  7584  0043E8  0E90               	movlw	low _string_dado
  7585  0043EA  6FE8               	movwf	(?_fprintf+16)& (0+255),b
  7586  0043EC  0E02               	movlw	high _string_dado
  7587  0043EE  6FE9               	movwf	(?_fprintf+17)& (0+255),b
  7588  0043F0  0E92               	movlw	low STR_26
  7589  0043F2  6FEA               	movwf	(?_fprintf+18)& (0+255),b
  7590  0043F4  0E61               	movlw	high STR_26
  7591  0043F6  6FEB               	movwf	(?_fprintf+19)& (0+255),b
  7592  0043F8  EC66  F00C         	call	_fprintf	;wreg free
  7593                           
  7594                           ;SDCard.c: 227: f_close(&fil);
  7595  0043FC  0E90               	movlw	low _fil
  7596  0043FE  0100               	movlb	0	; () banked
  7597  004400  6FAB               	movwf	f_close@fp& (0+255),b
  7598  004402  0E01               	movlw	high _fil
  7599  004404  6FAC               	movwf	(f_close@fp+1)& (0+255),b
  7600  004406  ECFA  F02A         	call	_f_close	;wreg free
  7601  00440A                     l439:
  7602                           
  7603                           ;SDCard.c: 228: }
  7604                           ;SDCard.c: 230: PORTBbits.RB3 = 1;
  7605  00440A  8681               	bsf	3969,3,c	;volatile
  7606                           
  7607                           ;SDCard.c: 231: desliga_SPI();
  7608  00440C  EC09  F02C         	call	_desliga_SPI	;wreg free
  7609                           
  7610                           ;SDCard.c: 232: inicializa_uart();
  7611  004410  EC4F  F02B         	call	_inicializa_uart	;wreg free
  7612  004414  0012               	return	
  7613  004416                     __end_of_escrita_sdcard:
  7614                           	opt stack 0
  7615                           tosu	equ	0xFFF
  7616                           tosh	equ	0xFFE
  7617                           tosl	equ	0xFFD
  7618                           pclath	equ	0xFFA
  7619                           tblptru	equ	0xFF8
  7620                           tblptrh	equ	0xFF7
  7621                           tblptrl	equ	0xFF6
  7622                           tablat	equ	0xFF5
  7623                           prodh	equ	0xFF4
  7624                           prodl	equ	0xFF3
  7625                           intcon	equ	0xFF2
  7626                           intcon2	equ	0xFF1
  7627                           intcon3	equ	0xFF0
  7628                           postinc0	equ	0xFEE
  7629                           wreg	equ	0xFE8
  7630                           indf1	equ	0xFE7
  7631                           postinc1	equ	0xFE6
  7632                           postdec1	equ	0xFE5
  7633                           plusw1	equ	0xFE3
  7634                           fsr1h	equ	0xFE2
  7635                           fsr1l	equ	0xFE1
  7636                           indf2	equ	0xFDF
  7637                           postinc2	equ	0xFDE
  7638                           postdec2	equ	0xFDD
  7639                           plusw2	equ	0xFDB
  7640                           fsr2h	equ	0xFDA
  7641                           fsr2l	equ	0xFD9
  7642                           status	equ	0xFD8
  7643                           
  7644 ;; *************** function _inicializa_uart *****************
  7645 ;; Defined at:
  7646 ;;		line 206 in file "bibliotecas/uart.c"
  7647 ;; Parameters:    Size  Location     Type
  7648 ;;		None
  7649 ;; Auto vars:     Size  Location     Type
  7650 ;;		None
  7651 ;; Return value:  Size  Location     Type
  7652 ;;                  1    wreg      void 
  7653 ;; Registers used:
  7654 ;;		wreg, status,2, status,0, cstack
  7655 ;; Tracked objects:
  7656 ;;		On entry : 0/0
  7657 ;;		On exit  : 0/0
  7658 ;;		Unchanged: 0/0
  7659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7660 ;;      Params:         0       0       0       0       0       0       0       0       0
  7661 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7662 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7663 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7664 ;;Total ram usage:        0 bytes
  7665 ;; Hardware stack levels used:    1
  7666 ;; Hardware stack levels required when called:    5
  7667 ;; This function calls:
  7668 ;;		_configura_baudrate_uart
  7669 ;; This function is called by:
  7670 ;;		_main
  7671 ;;		_escrita_sdcard
  7672 ;;		_leitura_sdcard
  7673 ;; This function uses a non-reentrant model
  7674 ;;
  7675                           
  7676                           	psect	text28
  7677  00569E                     __ptext28:
  7678                           	opt stack 0
  7679  00569E                     _inicializa_uart:
  7680                           	opt stack 25
  7681                           
  7682                           ;uart.c: 208: TRISCbits.RC6 = 0;
  7683                           
  7684                           ;incstack = 0
  7685  00569E  9C94               	bcf	3988,6,c	;volatile
  7686                           
  7687                           ;uart.c: 209: TRISCbits.RC7 = 0;
  7688  0056A0  9E94               	bcf	3988,7,c	;volatile
  7689                           
  7690                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  7691  0056A2  0E80               	movlw	128
  7692  0056A4  0100               	movlb	0	; () banked
  7693  0056A6  6F6E               	movwf	configura_baudrate_uart@baudrate& (0+255),b
  7694  0056A8  0E25               	movlw	37
  7695  0056AA  6F6F               	movwf	(configura_baudrate_uart@baudrate+1)& (0+255),b
  7696  0056AC  0E00               	movlw	0
  7697  0056AE  6F70               	movwf	(configura_baudrate_uart@baudrate+2)& (0+255),b
  7698  0056B0  0E00               	movlw	0
  7699  0056B2  6F71               	movwf	(configura_baudrate_uart@baudrate+3)& (0+255),b
  7700  0056B4  ECA4  F01E         	call	_configura_baudrate_uart	;wreg free
  7701                           
  7702                           ;uart.c: 213: TXSTA = 0x20;
  7703  0056B8  0E20               	movlw	32
  7704  0056BA  6EAC               	movwf	4012,c	;volatile
  7705                           
  7706                           ;uart.c: 214: RCSTA = 0x90;
  7707  0056BC  0E90               	movlw	144
  7708  0056BE  6EAB               	movwf	4011,c	;volatile
  7709  0056C0  0012               	return		;funcret
  7710  0056C2                     __end_of_inicializa_uart:
  7711                           	opt stack 0
  7712                           tosu	equ	0xFFF
  7713                           tosh	equ	0xFFE
  7714                           tosl	equ	0xFFD
  7715                           pclath	equ	0xFFA
  7716                           tblptru	equ	0xFF8
  7717                           tblptrh	equ	0xFF7
  7718                           tblptrl	equ	0xFF6
  7719                           tablat	equ	0xFF5
  7720                           prodh	equ	0xFF4
  7721                           prodl	equ	0xFF3
  7722                           intcon	equ	0xFF2
  7723                           intcon2	equ	0xFF1
  7724                           intcon3	equ	0xFF0
  7725                           postinc0	equ	0xFEE
  7726                           wreg	equ	0xFE8
  7727                           indf1	equ	0xFE7
  7728                           postinc1	equ	0xFE6
  7729                           postdec1	equ	0xFE5
  7730                           plusw1	equ	0xFE3
  7731                           fsr1h	equ	0xFE2
  7732                           fsr1l	equ	0xFE1
  7733                           indf2	equ	0xFDF
  7734                           postinc2	equ	0xFDE
  7735                           postdec2	equ	0xFDD
  7736                           plusw2	equ	0xFDB
  7737                           fsr2h	equ	0xFDA
  7738                           fsr2l	equ	0xFD9
  7739                           status	equ	0xFD8
  7740                           
  7741 ;; *************** function _configura_baudrate_uart *****************
  7742 ;; Defined at:
  7743 ;;		line 50 in file "bibliotecas/uart.c"
  7744 ;; Parameters:    Size  Location     Type
  7745 ;;  baudrate        4   14[BANK0 ] const long 
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;  x               2   26[BANK0 ] unsigned int 
  7748 ;; Return value:  Size  Location     Type
  7749 ;;                  1    wreg      unsigned char 
  7750 ;; Registers used:
  7751 ;;		wreg, status,2, status,0, cstack
  7752 ;; Tracked objects:
  7753 ;;		On entry : 0/0
  7754 ;;		On exit  : 0/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7757 ;;      Params:         0       4       0       0       0       0       0       0       0
  7758 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7759 ;;      Temps:          0       8       0       0       0       0       0       0       0
  7760 ;;      Totals:         0      14       0       0       0       0       0       0       0
  7761 ;;Total ram usage:       14 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:    4
  7764 ;; This function calls:
  7765 ;;		___aldiv
  7766 ;; This function is called by:
  7767 ;;		_inicializa_uart
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           	psect	text29
  7772  003D48                     __ptext29:
  7773                           	opt stack 0
  7774  003D48                     _configura_baudrate_uart:
  7775                           	opt stack 25
  7776                           
  7777                           ;uart.c: 52: unsigned int x;
  7778                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  7779                           
  7780                           ;incstack = 0
  7781  003D48  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  7782  003D4C  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  7783  003D50  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  7784  003D54  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  7785  003D58  0E06               	movlw	6
  7786  003D5A                     u14375:
  7787  003D5A  90D8               	bcf	status,0,c
  7788  003D5C  0100               	movlb	0	; () banked
  7789  003D5E  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  7790  003D60  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  7791  003D62  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  7792  003D64  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  7793  003D66  2EE8               	decfsz	wreg,f,c
  7794  003D68  D7F8               	goto	u14375
  7795  003D6A  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  7796  003D6C  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  7797  003D6E  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  7798  003D70  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  7799  003D72  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  7800  003D74  0E00               	movlw	0
  7801  003D76  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  7802  003D78  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  7803  003D7A  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  7804  003D7C  0E00               	movlw	0
  7805  003D7E  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  7806  003D80  6F60               	movwf	___aldiv@dividend& (0+255),b
  7807  003D82  0E6C               	movlw	108
  7808  003D84  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  7809  003D86  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  7810  003D88  0EDC               	movlw	220
  7811  003D8A  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  7812  003D8C  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  7813  003D8E  0E02               	movlw	2
  7814  003D90  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  7815  003D92  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  7816  003D94  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  7817  003D98  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  7818  003D9C  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  7819  003DA0  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  7820  003DA4  0E06               	movlw	6
  7821  003DA6                     u14385:
  7822  003DA6  90D8               	bcf	status,0,c
  7823  003DA8  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  7824  003DAA  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  7825  003DAC  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  7826  003DAE  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  7827  003DB0  2EE8               	decfsz	wreg,f,c
  7828  003DB2  D7F9               	goto	u14385
  7829  003DB4  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  7830  003DB8  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  7831  003DBC  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  7832  003DC0  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  7833  003DC4  EC40  F021         	call	___aldiv	;wreg free
  7834  003DC8  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  7835  003DCC  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  7836                           
  7837                           ;uart.c: 55: if(x > 255)
  7838  003DD0  0100               	movlb	0	; () banked
  7839  003DD2  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  7840  003DD4  A0D8               	btfss	status,0,c
  7841  003DD6  D044               	goto	l951
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;uart.c: 56: {
  7845                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  7846  003DD8  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  7847  003DDC  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  7848  003DE0  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  7849  003DE4  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  7850  003DE8  0E04               	movlw	4
  7851  003DEA                     u14405:
  7852  003DEA  90D8               	bcf	status,0,c
  7853  003DEC  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  7854  003DEE  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  7855  003DF0  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  7856  003DF2  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  7857  003DF4  2EE8               	decfsz	wreg,f,c
  7858  003DF6  D7F9               	goto	u14405
  7859  003DF8  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  7860  003DFA  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  7861  003DFC  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  7862  003DFE  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  7863  003E00  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  7864  003E02  0E00               	movlw	0
  7865  003E04  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  7866  003E06  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  7867  003E08  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  7868  003E0A  0E00               	movlw	0
  7869  003E0C  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  7870  003E0E  6F60               	movwf	___aldiv@dividend& (0+255),b
  7871  003E10  0E6C               	movlw	108
  7872  003E12  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  7873  003E14  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  7874  003E16  0EDC               	movlw	220
  7875  003E18  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  7876  003E1A  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  7877  003E1C  0E02               	movlw	2
  7878  003E1E  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  7879  003E20  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  7880  003E22  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  7881  003E26  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  7882  003E2A  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  7883  003E2E  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  7884  003E32  0E04               	movlw	4
  7885  003E34                     u14415:
  7886  003E34  90D8               	bcf	status,0,c
  7887  003E36  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  7888  003E38  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  7889  003E3A  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  7890  003E3C  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  7891  003E3E  2EE8               	decfsz	wreg,f,c
  7892  003E40  D7F9               	goto	u14415
  7893  003E42  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  7894  003E46  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  7895  003E4A  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  7896  003E4E  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  7897  003E52  EC40  F021         	call	___aldiv	;wreg free
  7898  003E56  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  7899  003E5A  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  7900                           
  7901                           ;uart.c: 58: BRGH = 1;
  7902  003E5E  84AC               	bsf	4012,2,c	;volatile
  7903  003E60                     l951:
  7904                           
  7905                           ;uart.c: 59: }
  7906                           ;uart.c: 60: if(x < 256)
  7907  003E60  0100               	movlb	0	; () banked
  7908  003E62  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  7909  003E64  B0D8               	btfsc	status,0,c
  7910  003E66  0012               	return	
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;uart.c: 61: {
  7914                           ;uart.c: 62: SPBRG = x;
  7915  003E68  C07A  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  7916                           
  7917                           ;uart.c: 63: SYNC = 0;
  7918  003E6C  98AC               	bcf	4012,4,c	;volatile
  7919                           
  7920                           ;uart.c: 64: SPEN = 1;
  7921  003E6E  8EAB               	bsf	4011,7,c	;volatile
  7922                           
  7923                           ;uart.c: 65: TRISCbits.RC7 = 1;
  7924  003E70  8E94               	bsf	3988,7,c	;volatile
  7925                           
  7926                           ;uart.c: 66: TRISCbits.RC6 = 0;
  7927  003E72  9C94               	bcf	3988,6,c	;volatile
  7928                           
  7929                           ;uart.c: 67: CREN = 1;
  7930  003E74  88AB               	bsf	4011,4,c	;volatile
  7931                           
  7932                           ;uart.c: 68: TXEN = 1;
  7933  003E76  8AAC               	bsf	4012,5,c	;volatile
  7934                           
  7935                           ;uart.c: 70: return (1);
  7936                           ;	Return value of _configura_baudrate_uart is never used
  7937  003E78  0012               	return	
  7938  003E7A                     __end_of_configura_baudrate_uart:
  7939                           	opt stack 0
  7940                           tosu	equ	0xFFF
  7941                           tosh	equ	0xFFE
  7942                           tosl	equ	0xFFD
  7943                           pclath	equ	0xFFA
  7944                           tblptru	equ	0xFF8
  7945                           tblptrh	equ	0xFF7
  7946                           tblptrl	equ	0xFF6
  7947                           tablat	equ	0xFF5
  7948                           prodh	equ	0xFF4
  7949                           prodl	equ	0xFF3
  7950                           intcon	equ	0xFF2
  7951                           intcon2	equ	0xFF1
  7952                           intcon3	equ	0xFF0
  7953                           postinc0	equ	0xFEE
  7954                           wreg	equ	0xFE8
  7955                           indf1	equ	0xFE7
  7956                           postinc1	equ	0xFE6
  7957                           postdec1	equ	0xFE5
  7958                           plusw1	equ	0xFE3
  7959                           fsr1h	equ	0xFE2
  7960                           fsr1l	equ	0xFE1
  7961                           indf2	equ	0xFDF
  7962                           postinc2	equ	0xFDE
  7963                           postdec2	equ	0xFDD
  7964                           plusw2	equ	0xFDB
  7965                           fsr2h	equ	0xFDA
  7966                           fsr2l	equ	0xFD9
  7967                           status	equ	0xFD8
  7968                           
  7969 ;; *************** function ___aldiv *****************
  7970 ;; Defined at:
  7971 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;  dividend        4    0[BANK0 ] long 
  7974 ;;  divisor         4    4[BANK0 ] long 
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;  quotient        4   10[BANK0 ] long 
  7977 ;;  sign            1    9[BANK0 ] unsigned char 
  7978 ;;  counter         1    8[BANK0 ] unsigned char 
  7979 ;; Return value:  Size  Location     Type
  7980 ;;                  4    0[BANK0 ] long 
  7981 ;; Registers used:
  7982 ;;		wreg, status,2, status,0
  7983 ;; Tracked objects:
  7984 ;;		On entry : 0/0
  7985 ;;		On exit  : 0/0
  7986 ;;		Unchanged: 0/0
  7987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7988 ;;      Params:         0       8       0       0       0       0       0       0       0
  7989 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7990 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7991 ;;      Totals:         0      14       0       0       0       0       0       0       0
  7992 ;;Total ram usage:       14 bytes
  7993 ;; Hardware stack levels used:    1
  7994 ;; Hardware stack levels required when called:    3
  7995 ;; This function calls:
  7996 ;;		Nothing
  7997 ;; This function is called by:
  7998 ;;		_configura_baudrate_uart
  7999 ;; This function uses a non-reentrant model
  8000 ;;
  8001                           
  8002                           	psect	text30
  8003  004280                     __ptext30:
  8004                           	opt stack 0
  8005  004280                     ___aldiv:
  8006                           	opt stack 25
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;incstack = 0
  8010  004280  0E00               	movlw	0
  8011  004282  0100               	movlb	0	; () banked
  8012  004284  6F69               	movwf	___aldiv@sign& (0+255),b
  8013                           
  8014                           ; BSR set to: 0
  8015  004286  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  8016  004288  D00A               	goto	l1570
  8017                           
  8018                           ; BSR set to: 0
  8019  00428A  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  8020  00428C  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  8021  00428E  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  8022  004290  6D64               	negf	___aldiv@divisor& (0+255),b
  8023  004292  0E00               	movlw	0
  8024  004294  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  8025  004296  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  8026  004298  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  8027                           
  8028                           ; BSR set to: 0
  8029  00429A  0E01               	movlw	1
  8030  00429C  6F69               	movwf	___aldiv@sign& (0+255),b
  8031  00429E                     l1570:
  8032                           
  8033                           ; BSR set to: 0
  8034                           
  8035                           ; BSR set to: 0
  8036  00429E  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  8037  0042A0  D00A               	goto	l1571
  8038                           
  8039                           ; BSR set to: 0
  8040  0042A2  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  8041  0042A4  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  8042  0042A6  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  8043  0042A8  6D60               	negf	___aldiv@dividend& (0+255),b
  8044  0042AA  0E00               	movlw	0
  8045  0042AC  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  8046  0042AE  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  8047  0042B0  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  8048                           
  8049                           ; BSR set to: 0
  8050  0042B2  0E01               	movlw	1
  8051  0042B4  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  8052  0042B6                     l1571:
  8053                           
  8054                           ; BSR set to: 0
  8055                           
  8056                           ; BSR set to: 0
  8057  0042B6  0E00               	movlw	0
  8058  0042B8  6F6A               	movwf	___aldiv@quotient& (0+255),b
  8059  0042BA  0E00               	movlw	0
  8060  0042BC  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  8061  0042BE  0E00               	movlw	0
  8062  0042C0  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  8063  0042C2  0E00               	movlw	0
  8064  0042C4  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  8065                           
  8066                           ; BSR set to: 0
  8067  0042C6  5164               	movf	___aldiv@divisor& (0+255),w,b
  8068  0042C8  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  8069  0042CA  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  8070  0042CC  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  8071  0042CE  B4D8               	btfsc	status,2,c
  8072  0042D0  D02A               	goto	l1578
  8073                           
  8074                           ; BSR set to: 0
  8075  0042D2  0E01               	movlw	1
  8076  0042D4  6F68               	movwf	___aldiv@counter& (0+255),b
  8077  0042D6  D006               	goto	l1573
  8078  0042D8                     
  8079                           ; BSR set to: 0
  8080                           
  8081                           ; BSR set to: 0
  8082  0042D8  90D8               	bcf	status,0,c
  8083  0042DA  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  8084  0042DC  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  8085  0042DE  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  8086  0042E0  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  8087  0042E2  2B68               	incf	___aldiv@counter& (0+255),f,b
  8088  0042E4                     l1573:
  8089                           
  8090                           ; BSR set to: 0
  8091                           
  8092                           ; BSR set to: 0
  8093  0042E4  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  8094  0042E6  D7F8               	goto	l1574
  8095  0042E8                     u14250:
  8096                           
  8097                           ; BSR set to: 0
  8098                           
  8099                           ; BSR set to: 0
  8100                           
  8101                           ; BSR set to: 0
  8102  0042E8  90D8               	bcf	status,0,c
  8103  0042EA  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  8104  0042EC  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  8105  0042EE  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  8106  0042F0  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  8107                           
  8108                           ; BSR set to: 0
  8109  0042F2  5164               	movf	___aldiv@divisor& (0+255),w,b
  8110  0042F4  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  8111  0042F6  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  8112  0042F8  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  8113  0042FA  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  8114  0042FC  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  8115  0042FE  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  8116  004300  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  8117  004302  A0D8               	btfss	status,0,c
  8118  004304  D009               	goto	l1577
  8119                           
  8120                           ; BSR set to: 0
  8121  004306  5164               	movf	___aldiv@divisor& (0+255),w,b
  8122  004308  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  8123  00430A  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  8124  00430C  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  8125  00430E  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  8126  004310  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  8127  004312  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  8128  004314  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  8129                           
  8130                           ; BSR set to: 0
  8131  004316  816A               	bsf	___aldiv@quotient& (0+255),0,b
  8132  004318                     l1577:
  8133                           
  8134                           ; BSR set to: 0
  8135                           
  8136                           ; BSR set to: 0
  8137  004318  90D8               	bcf	status,0,c
  8138  00431A  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  8139  00431C  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  8140  00431E  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  8141  004320  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  8142                           
  8143                           ; BSR set to: 0
  8144  004322  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  8145  004324  D7E1               	goto	u14250
  8146  004326                     l1578:
  8147                           
  8148                           ; BSR set to: 0
  8149                           
  8150                           ; BSR set to: 0
  8151                           
  8152                           ; BSR set to: 0
  8153  004326  5169               	movf	___aldiv@sign& (0+255),w,b
  8154  004328  B4D8               	btfsc	status,2,c
  8155  00432A  D008               	goto	l1579
  8156                           
  8157                           ; BSR set to: 0
  8158  00432C  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  8159  00432E  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  8160  004330  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  8161  004332  6D6A               	negf	___aldiv@quotient& (0+255),b
  8162  004334  0E00               	movlw	0
  8163  004336  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  8164  004338  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  8165  00433A  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  8166  00433C                     l1579:
  8167                           
  8168                           ; BSR set to: 0
  8169                           
  8170                           ; BSR set to: 0
  8171  00433C  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  8172  004340  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  8173  004344  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  8174  004348  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  8175  00434C  0012               	return	
  8176  00434E                     __end_of___aldiv:
  8177                           	opt stack 0
  8178                           tosu	equ	0xFFF
  8179                           tosh	equ	0xFFE
  8180                           tosl	equ	0xFFD
  8181                           pclath	equ	0xFFA
  8182                           tblptru	equ	0xFF8
  8183                           tblptrh	equ	0xFF7
  8184                           tblptrl	equ	0xFF6
  8185                           tablat	equ	0xFF5
  8186                           prodh	equ	0xFF4
  8187                           prodl	equ	0xFF3
  8188                           intcon	equ	0xFF2
  8189                           intcon2	equ	0xFF1
  8190                           intcon3	equ	0xFF0
  8191                           postinc0	equ	0xFEE
  8192                           wreg	equ	0xFE8
  8193                           indf1	equ	0xFE7
  8194                           postinc1	equ	0xFE6
  8195                           postdec1	equ	0xFE5
  8196                           plusw1	equ	0xFE3
  8197                           fsr1h	equ	0xFE2
  8198                           fsr1l	equ	0xFE1
  8199                           indf2	equ	0xFDF
  8200                           postinc2	equ	0xFDE
  8201                           postdec2	equ	0xFDD
  8202                           plusw2	equ	0xFDB
  8203                           fsr2h	equ	0xFDA
  8204                           fsr2l	equ	0xFD9
  8205                           status	equ	0xFD8
  8206                           
  8207 ;; *************** function _inicializa_SPI *****************
  8208 ;; Defined at:
  8209 ;;		line 49 in file "bibliotecas/SPI.c"
  8210 ;; Parameters:    Size  Location     Type
  8211 ;;		None
  8212 ;; Auto vars:     Size  Location     Type
  8213 ;;		None
  8214 ;; Return value:  Size  Location     Type
  8215 ;;                  1    wreg      void 
  8216 ;; Registers used:
  8217 ;;		wreg, status,2, status,0
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8223 ;;      Params:         0       0       0       0       0       0       0       0       0
  8224 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8225 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8226 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8227 ;;Total ram usage:        0 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    3
  8230 ;; This function calls:
  8231 ;;		Nothing
  8232 ;; This function is called by:
  8233 ;;		_escrita_sdcard
  8234 ;;		_sdcard_init
  8235 ;;		_leitura_sdcard
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           	psect	text31
  8240  0056E4                     __ptext31:
  8241                           	opt stack 0
  8242  0056E4                     _inicializa_SPI:
  8243                           	opt stack 24
  8244                           
  8245                           ;SPI.c: 51: TRISBbits.RB1 = 0;
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;incstack = 0
  8249  0056E4  9293               	bcf	3987,1,c	;volatile
  8250                           
  8251                           ;SPI.c: 52: TRISBbits.RB4 = 0;
  8252  0056E6  9893               	bcf	3987,4,c	;volatile
  8253                           
  8254                           ;SPI.c: 53: TRISBbits.RB0 = 1;
  8255  0056E8  8093               	bsf	3987,0,c	;volatile
  8256                           
  8257                           ;SPI.c: 54: TRISCbits.RC7 = 0;
  8258  0056EA  9E94               	bcf	3988,7,c	;volatile
  8259                           
  8260                           ;SPI.c: 56: LATBbits.LATB4 = 1;
  8261  0056EC  888A               	bsf	3978,4,c	;volatile
  8262                           
  8263                           ;SPI.c: 57: SSPSTAT &= 0x3F;
  8264  0056EE  0E3F               	movlw	63
  8265  0056F0  16C7               	andwf	4039,f,c	;volatile
  8266                           
  8267                           ;SPI.c: 58: SSPCON1 = 0x00;
  8268  0056F2  0E00               	movlw	0
  8269  0056F4  6EC6               	movwf	4038,c	;volatile
  8270                           
  8271                           ;SPI.c: 60: SSPSTATbits.SMP = 0;
  8272  0056F6  9EC7               	bcf	4039,7,c	;volatile
  8273                           
  8274                           ;SPI.c: 61: SSPSTATbits.CKE = 1;
  8275  0056F8  8CC7               	bsf	4039,6,c	;volatile
  8276                           
  8277                           ;SPI.c: 62: SSPCON1bits.CKP = 0;
  8278  0056FA  98C6               	bcf	4038,4,c	;volatile
  8279                           
  8280                           ;SPI.c: 64: SSPCON1 = 0b00000011;
  8281  0056FC  0E03               	movlw	3
  8282  0056FE  6EC6               	movwf	4038,c	;volatile
  8283                           
  8284                           ;SPI.c: 66: SSPCON1bits.SSPEN = 1;
  8285  005700  8AC6               	bsf	4038,5,c	;volatile
  8286  005702  0012               	return		;funcret
  8287  005704                     __end_of_inicializa_SPI:
  8288                           	opt stack 0
  8289                           tosu	equ	0xFFF
  8290                           tosh	equ	0xFFE
  8291                           tosl	equ	0xFFD
  8292                           pclath	equ	0xFFA
  8293                           tblptru	equ	0xFF8
  8294                           tblptrh	equ	0xFF7
  8295                           tblptrl	equ	0xFF6
  8296                           tablat	equ	0xFF5
  8297                           prodh	equ	0xFF4
  8298                           prodl	equ	0xFF3
  8299                           intcon	equ	0xFF2
  8300                           intcon2	equ	0xFF1
  8301                           intcon3	equ	0xFF0
  8302                           postinc0	equ	0xFEE
  8303                           wreg	equ	0xFE8
  8304                           indf1	equ	0xFE7
  8305                           postinc1	equ	0xFE6
  8306                           postdec1	equ	0xFE5
  8307                           plusw1	equ	0xFE3
  8308                           fsr1h	equ	0xFE2
  8309                           fsr1l	equ	0xFE1
  8310                           indf2	equ	0xFDF
  8311                           postinc2	equ	0xFDE
  8312                           postdec2	equ	0xFDD
  8313                           plusw2	equ	0xFDB
  8314                           fsr2h	equ	0xFDA
  8315                           fsr2l	equ	0xFD9
  8316                           status	equ	0xFD8
  8317                           
  8318 ;; *************** function _fprintf *****************
  8319 ;; Defined at:
  8320 ;;		line 1808 in file "bibliotecas/tff.c"
  8321 ;; Parameters:    Size  Location     Type
  8322 ;;  fil             2    0[BANK1 ] PTR struct _FIL
  8323 ;;		 -> fil(28), 
  8324 ;;  str             2    2[BANK1 ] PTR const unsigned char 
  8325 ;;		 -> STR_21(35), 
  8326 ;; Auto vars:     Size  Location     Type
  8327 ;;  s              16    0[BANK3 ] unsigned char [16]
  8328 ;;  val             4   24[BANK3 ] unsigned long 
  8329 ;;  i               2   32[BANK3 ] int 
  8330 ;;  cc              2   30[BANK3 ] int 
  8331 ;;  arp             2   28[BANK3 ] PTR void [1]
  8332 ;;		 -> ?_fprintf(2), 
  8333 ;;  w               2   20[BANK3 ] int 
  8334 ;;  res             2   16[BANK3 ] int 
  8335 ;;  c               1   34[BANK3 ] unsigned char 
  8336 ;;  r               1   23[BANK3 ] unsigned char 
  8337 ;;  f               1   22[BANK3 ] unsigned char 
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  2    0[BANK1 ] int 
  8340 ;; Registers used:
  8341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8347 ;;      Params:         0       0      20       0       0       0       0       0       0
  8348 ;;      Locals:         0       0       0       0      35       0       0       0       0
  8349 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8350 ;;      Totals:         0       2      20       0      35       0       0       0       0
  8351 ;;Total ram usage:       57 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:   14
  8354 ;; This function calls:
  8355 ;;		___lldiv
  8356 ;;		___llmod
  8357 ;;		___wmul
  8358 ;;		_fputc
  8359 ;;		_fputs
  8360 ;; This function is called by:
  8361 ;;		_escrita_sdcard
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           	psect	text32
  8366  0018CC                     __ptext32:
  8367                           	opt stack 0
  8368  0018CC                     _fprintf:
  8369                           	opt stack 13
  8370                           
  8371                           ;tff.c: 1814: va_list arp;
  8372                           ;tff.c: 1815: UCHAR c, f, r;
  8373                           ;tff.c: 1816: ULONG val;
  8374                           ;tff.c: 1817: char s[16];
  8375                           ;tff.c: 1818: int i, w, res, cc;
  8376                           ;tff.c: 1821: *arp = __va_start();
  8377                           
  8378                           ;incstack = 0
  8379  0018CC  0EDC               	movlw	low (?_fprintf+4)
  8380  0018CE  0103               	movlb	3	; () banked
  8381  0018D0  6F1C               	movwf	fprintf@arp& (0+255),b
  8382  0018D2  0E01               	movlw	high (?_fprintf+4)
  8383  0018D4  6F1D               	movwf	(fprintf@arp+1)& (0+255),b
  8384                           
  8385                           ; BSR set to: 3
  8386                           ;tff.c: 1823: for (cc = res = 0; cc != -1; res += cc) {
  8387  0018D6  0E00               	movlw	0
  8388  0018D8  6F11               	movwf	(fprintf@res+1)& (0+255),b
  8389  0018DA  0E00               	movlw	0
  8390  0018DC  6F10               	movwf	fprintf@res& (0+255),b
  8391  0018DE  C310  F31E         	movff	fprintf@res,fprintf@cc
  8392  0018E2  C311  F31F         	movff	fprintf@res+1,fprintf@cc+1
  8393                           
  8394                           ; BSR set to: 3
  8395  0018E6  291E               	incf	fprintf@cc& (0+255),w,b
  8396  0018E8  E103               	bnz	l11563
  8397  0018EA  291F               	incf	(fprintf@cc+1)& (0+255),w,b
  8398  0018EC  B4D8               	btfsc	status,2,c
  8399  0018EE  0012               	return	
  8400  0018F0                     l11563:
  8401                           
  8402                           ; BSR set to: 3
  8403                           ;tff.c: 1824: c = *str++;
  8404  0018F0  C1DA  FFF6         	movff	fprintf@str,tblptrl
  8405  0018F4  C1DB  FFF7         	movff	fprintf@str+1,tblptrh
  8406  0018F8                     	if	0	;tblptru may be non-zero
  8407  0018F8                     	endif
  8408  0018F8                     	if	0	;tblptru may be non-zero
  8409  0018F8                     	endif
  8410  0018F8  0008               	tblrd		*
  8411  0018FA  CFF5 F322          	movff	tablat,fprintf@c
  8412                           
  8413                           ; BSR set to: 3
  8414  0018FE  0101               	movlb	1	; () banked
  8415  001900  4BDA               	infsnz	fprintf@str& (0+255),f,b
  8416  001902  2BDB               	incf	(fprintf@str+1)& (0+255),f,b
  8417                           
  8418                           ; BSR set to: 1
  8419                           ;tff.c: 1825: if (c == 0) break;
  8420  001904  0103               	movlb	3	; () banked
  8421  001906  5122               	movf	fprintf@c& (0+255),w,b
  8422  001908  B4D8               	btfsc	status,2,c
  8423  00190A  0012               	return	
  8424                           
  8425                           ; BSR set to: 3
  8426                           ;tff.c: 1826: if (c != '%') {
  8427                           
  8428                           ; BSR set to: 3
  8429                           
  8430                           ; BSR set to: 3
  8431  00190C  0E25               	movlw	37
  8432  00190E  1922               	xorwf	fprintf@c& (0+255),w,b
  8433  001910  B4D8               	btfsc	status,2,c
  8434  001912  D015               	goto	l1437
  8435                           
  8436                           ; BSR set to: 3
  8437                           ;tff.c: 1827: cc = fputc(c, fil);
  8438  001914  C322  F0E5         	movff	fprintf@c,fputc@chr
  8439  001918  0100               	movlb	0	; () banked
  8440  00191A  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  8441  00191C  C1D8  F0E7         	movff	fprintf@fil,fputc@fil
  8442  001920  C1D9  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  8443  001924  EC6C  F028         	call	_fputc	;wreg free
  8444  001928  C0E5  F31E         	movff	?_fputc,fprintf@cc
  8445  00192C  C0E6  F31F         	movff	?_fputc+1,fprintf@cc+1
  8446                           
  8447                           ;tff.c: 1828: if (cc != -1) cc = 1;
  8448  001930  0103               	movlb	3	; () banked
  8449  001932  291E               	incf	fprintf@cc& (0+255),w,b
  8450  001934  E103               	bnz	u15520
  8451  001936  291F               	incf	(fprintf@cc+1)& (0+255),w,b
  8452  001938  B4D8               	btfsc	status,2,c
  8453  00193A  D1A9               	goto	l1439
  8454  00193C                     u15520:
  8455  00193C  D091               	goto	u15590
  8456  00193E                     l1437:
  8457                           
  8458                           ; BSR set to: 3
  8459                           ;tff.c: 1830: }
  8460                           ;tff.c: 1831: w = f = 0;
  8461                           
  8462                           ; BSR set to: 3
  8463  00193E  0E00               	movlw	0
  8464  001940  6F16               	movwf	fprintf@f& (0+255),b
  8465  001942  C316  F314         	movff	fprintf@f,fprintf@w
  8466  001946  6B15               	clrf	(fprintf@w+1)& (0+255),b
  8467                           
  8468                           ; BSR set to: 3
  8469                           ;tff.c: 1832: c = *str++;
  8470  001948  C1DA  FFF6         	movff	fprintf@str,tblptrl
  8471  00194C  C1DB  FFF7         	movff	fprintf@str+1,tblptrh
  8472  001950                     	if	0	;tblptru may be non-zero
  8473  001950                     	endif
  8474  001950                     	if	0	;tblptru may be non-zero
  8475  001950                     	endif
  8476  001950  0008               	tblrd		*
  8477  001952  CFF5 F322          	movff	tablat,fprintf@c
  8478                           
  8479                           ; BSR set to: 3
  8480  001956  0101               	movlb	1	; () banked
  8481  001958  4BDA               	infsnz	fprintf@str& (0+255),f,b
  8482  00195A  2BDB               	incf	(fprintf@str+1)& (0+255),f,b
  8483                           
  8484                           ; BSR set to: 1
  8485                           ;tff.c: 1833: if (c == '0') {
  8486  00195C  0E30               	movlw	48
  8487  00195E  0103               	movlb	3	; () banked
  8488  001960  1922               	xorwf	fprintf@c& (0+255),w,b
  8489  001962  A4D8               	btfss	status,2,c
  8490  001964  D02A               	goto	l1441
  8491                           
  8492                           ; BSR set to: 3
  8493                           ;tff.c: 1834: f = 1; c = *str++;
  8494  001966  0E01               	movlw	1
  8495  001968  6F16               	movwf	fprintf@f& (0+255),b
  8496  00196A  D01D               	goto	l11595
  8497  00196C                     
  8498                           ;tff.c: 1837: w = w * 10 + (c - '0');
  8499                           
  8500                           ; BSR set to: 1
  8501  00196C  C314  F060         	movff	fprintf@w,___wmul@multiplier
  8502  001970  C315  F061         	movff	fprintf@w+1,___wmul@multiplier+1
  8503  001974  0E00               	movlw	0
  8504  001976  0100               	movlb	0	; () banked
  8505  001978  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8506  00197A  0E0A               	movlw	10
  8507  00197C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8508  00197E  EC3B  F02B         	call	___wmul	;wreg free
  8509  001982  0103               	movlb	3	; () banked
  8510  001984  5122               	movf	fprintf@c& (0+255),w,b
  8511  001986  0100               	movlb	0	; () banked
  8512  001988  6FF3               	movwf	??_fprintf& (0+255),b
  8513  00198A  6BF4               	clrf	(??_fprintf+1)& (0+255),b
  8514  00198C  5160               	movf	?___wmul& (0+255),w,b
  8515  00198E  27F3               	addwf	??_fprintf& (0+255),f,b
  8516  001990  5161               	movf	(?___wmul+1)& (0+255),w,b
  8517  001992  23F4               	addwfc	(??_fprintf+1)& (0+255),f,b
  8518  001994  0ED0               	movlw	208
  8519  001996  25F3               	addwf	??_fprintf& (0+255),w,b
  8520  001998  0103               	movlb	3	; () banked
  8521  00199A  6F14               	movwf	fprintf@w& (0+255),b
  8522  00199C  0EFF               	movlw	255
  8523  00199E  0100               	movlb	0	; () banked
  8524  0019A0  21F4               	addwfc	(??_fprintf+1)& (0+255),w,b
  8525  0019A2  0103               	movlb	3	; () banked
  8526  0019A4  6F15               	movwf	(fprintf@w+1)& (0+255),b
  8527  0019A6                     l11595:
  8528                           
  8529                           ; BSR set to: 3
  8530                           ;tff.c: 1838: c = *str++;
  8531  0019A6  C1DA  FFF6         	movff	fprintf@str,tblptrl
  8532  0019AA  C1DB  FFF7         	movff	fprintf@str+1,tblptrh
  8533  0019AE                     	if	0	;tblptru may be non-zero
  8534  0019AE                     	endif
  8535  0019AE                     	if	0	;tblptru may be non-zero
  8536  0019AE                     	endif
  8537  0019AE  0008               	tblrd		*
  8538  0019B0  CFF5 F322          	movff	tablat,fprintf@c
  8539                           
  8540                           ; BSR set to: 3
  8541  0019B4  0101               	movlb	1	; () banked
  8542  0019B6  4BDA               	infsnz	fprintf@str& (0+255),f,b
  8543  0019B8  2BDB               	incf	(fprintf@str+1)& (0+255),f,b
  8544  0019BA                     l1441:
  8545                           
  8546                           ; BSR set to: 1
  8547  0019BA  0E2F               	movlw	47
  8548  0019BC  0103               	movlb	3	; () banked
  8549  0019BE  6522               	cpfsgt	fprintf@c& (0+255),b
  8550  0019C0  D003               	goto	u15550
  8551                           
  8552                           ; BSR set to: 3
  8553  0019C2  0E39               	movlw	57
  8554  0019C4  6522               	cpfsgt	fprintf@c& (0+255),b
  8555  0019C6  D7D2               	goto	l1442
  8556  0019C8                     u15550:
  8557                           
  8558                           ; BSR set to: 3
  8559                           ;tff.c: 1839: }
  8560                           ;tff.c: 1840: if (c == 'l') {
  8561                           
  8562                           ; BSR set to: 3
  8563                           
  8564                           ; BSR set to: 3
  8565  0019C8  0E6C               	movlw	108
  8566  0019CA  1922               	xorwf	fprintf@c& (0+255),w,b
  8567  0019CC  A4D8               	btfss	status,2,c
  8568  0019CE  D00B               	goto	l1446
  8569                           
  8570                           ; BSR set to: 3
  8571                           ;tff.c: 1841: f |= 2; c = *str++;
  8572  0019D0  8316               	bsf	fprintf@f& (0+255),1,b
  8573                           
  8574                           ; BSR set to: 3
  8575  0019D2  C1DA  FFF6         	movff	fprintf@str,tblptrl
  8576  0019D6  C1DB  FFF7         	movff	fprintf@str+1,tblptrh
  8577  0019DA                     	if	0	;tblptru may be non-zero
  8578  0019DA                     	endif
  8579  0019DA                     	if	0	;tblptru may be non-zero
  8580  0019DA                     	endif
  8581  0019DA  0008               	tblrd		*
  8582  0019DC  CFF5 F322          	movff	tablat,fprintf@c
  8583                           
  8584                           ; BSR set to: 3
  8585  0019E0  0101               	movlb	1	; () banked
  8586  0019E2  4BDA               	infsnz	fprintf@str& (0+255),f,b
  8587  0019E4  2BDB               	incf	(fprintf@str+1)& (0+255),f,b
  8588  0019E6                     l1446:
  8589                           
  8590                           ;tff.c: 1842: }
  8591                           ;tff.c: 1843: if (c == 's') {
  8592                           
  8593                           ; BSR set to: 1
  8594  0019E6  0E73               	movlw	115
  8595  0019E8  0103               	movlb	3	; () banked
  8596  0019EA  1922               	xorwf	fprintf@c& (0+255),w,b
  8597  0019EC  A4D8               	btfss	status,2,c
  8598  0019EE  D018               	goto	l1447
  8599                           
  8600                           ; BSR set to: 3
  8601                           ;tff.c: 1844: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  8602  0019F0  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8603  0019F4  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8604  0019F8  CFDE F0EC          	movff	postinc2,fputs@str
  8605  0019FC  CFDD F0ED          	movff	postdec2,fputs@str+1
  8606  001A00  C1D8  F0EE         	movff	fprintf@fil,fputs@fil
  8607  001A04  C1D9  F0EF         	movff	fprintf@fil+1,fputs@fil+1
  8608  001A08  EC2D  F025         	call	_fputs	;wreg free
  8609  001A0C  C0EC  F31E         	movff	?_fputs,fprintf@cc
  8610  001A10  C0ED  F31F         	movff	?_fputs+1,fprintf@cc+1
  8611  001A14  0E02               	movlw	2
  8612  001A16  0103               	movlb	3	; () banked
  8613  001A18  271C               	addwf	fprintf@arp& (0+255),f,b
  8614  001A1A  0E00               	movlw	0
  8615  001A1C  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  8616                           
  8617                           ;tff.c: 1845: continue;
  8618  001A1E  D137               	goto	l1439
  8619  001A20                     l1447:
  8620                           
  8621                           ; BSR set to: 3
  8622                           ;tff.c: 1846: }
  8623                           ;tff.c: 1847: if (c == 'c') {
  8624                           
  8625                           ; BSR set to: 3
  8626  001A20  0E63               	movlw	99
  8627  001A22  1922               	xorwf	fprintf@c& (0+255),w,b
  8628  001A24  A4D8               	btfss	status,2,c
  8629  001A26  D021               	goto	l1448
  8630                           
  8631                           ; BSR set to: 3
  8632                           ;tff.c: 1848: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  8633  001A28  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8634  001A2C  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8635  001A30  50DF               	movf	indf2,w,c
  8636  001A32  0100               	movlb	0	; () banked
  8637  001A34  6FF3               	movwf	??_fprintf& (0+255),b
  8638  001A36  51F3               	movf	??_fprintf& (0+255),w,b
  8639  001A38  6FE5               	movwf	fputc@chr& (0+255),b
  8640  001A3A  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  8641  001A3C  C1D8  F0E7         	movff	fprintf@fil,fputc@fil
  8642  001A40  C1D9  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  8643  001A44  EC6C  F028         	call	_fputc	;wreg free
  8644  001A48  C0E5  F31E         	movff	?_fputc,fprintf@cc
  8645  001A4C  C0E6  F31F         	movff	?_fputc+1,fprintf@cc+1
  8646  001A50  0E02               	movlw	2
  8647  001A52  0103               	movlb	3	; () banked
  8648  001A54  271C               	addwf	fprintf@arp& (0+255),f,b
  8649  001A56  0E00               	movlw	0
  8650  001A58  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  8651                           
  8652                           ; BSR set to: 3
  8653                           ;tff.c: 1849: if (cc != -1) cc = 1;
  8654  001A5A  291E               	incf	fprintf@cc& (0+255),w,b
  8655  001A5C  E101               	bnz	u15590
  8656  001A5E  D76B               	goto	L1
  8657  001A60                     u15590:
  8658                           
  8659                           ; BSR set to: 3
  8660  001A60  0E00               	movlw	0
  8661  001A62  6F1F               	movwf	(fprintf@cc+1)& (0+255),b
  8662  001A64  0E01               	movlw	1
  8663  001A66  6F1E               	movwf	fprintf@cc& (0+255),b
  8664                           
  8665                           ; BSR set to: 3
  8666                           ;tff.c: 1850: continue;
  8667  001A68  D112               	goto	l1439
  8668  001A6A                     l1448:
  8669                           
  8670                           ; BSR set to: 3
  8671                           ;tff.c: 1851: }
  8672                           ;tff.c: 1852: r = 0;
  8673                           
  8674                           ; BSR set to: 3
  8675  001A6A  0E00               	movlw	0
  8676  001A6C  6F17               	movwf	fprintf@r& (0+255),b
  8677                           
  8678                           ; BSR set to: 3
  8679                           ;tff.c: 1853: if (c == 'd') r = 10;
  8680  001A6E  0E64               	movlw	100
  8681  001A70  1922               	xorwf	fprintf@c& (0+255),w,b
  8682  001A72  A4D8               	btfss	status,2,c
  8683  001A74  D002               	goto	l1450
  8684                           
  8685                           ; BSR set to: 3
  8686  001A76  0E0A               	movlw	10
  8687  001A78  6F17               	movwf	fprintf@r& (0+255),b
  8688  001A7A                     l1450:
  8689                           
  8690                           ; BSR set to: 3
  8691                           ;tff.c: 1854: if (c == 'u') r = 10;
  8692                           
  8693                           ; BSR set to: 3
  8694  001A7A  0E75               	movlw	117
  8695  001A7C  1922               	xorwf	fprintf@c& (0+255),w,b
  8696  001A7E  A4D8               	btfss	status,2,c
  8697  001A80  D002               	goto	l1451
  8698                           
  8699                           ; BSR set to: 3
  8700  001A82  0E0A               	movlw	10
  8701  001A84  6F17               	movwf	fprintf@r& (0+255),b
  8702  001A86                     l1451:
  8703                           
  8704                           ; BSR set to: 3
  8705                           ;tff.c: 1855: if (c == 'X') r = 16;
  8706                           
  8707                           ; BSR set to: 3
  8708  001A86  0E58               	movlw	88
  8709  001A88  1922               	xorwf	fprintf@c& (0+255),w,b
  8710  001A8A  A4D8               	btfss	status,2,c
  8711  001A8C  D002               	goto	l1452
  8712                           
  8713                           ; BSR set to: 3
  8714  001A8E  0E10               	movlw	16
  8715  001A90  6F17               	movwf	fprintf@r& (0+255),b
  8716  001A92                     l1452:
  8717                           
  8718                           ; BSR set to: 3
  8719                           ;tff.c: 1856: if (r == 0) break;
  8720  001A92  5117               	movf	fprintf@r& (0+255),w,b
  8721  001A94  B4D8               	btfsc	status,2,c
  8722  001A96  0012               	return	
  8723                           
  8724                           ; BSR set to: 3
  8725                           ;tff.c: 1857: if (f & 2) {
  8726                           
  8727                           ; BSR set to: 3
  8728  001A98  A316               	btfss	fprintf@f& (0+255),1,b
  8729  001A9A  D00E               	goto	l1454
  8730                           
  8731                           ; BSR set to: 3
  8732                           ;tff.c: 1858: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  8733  001A9C  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8734  001AA0  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8735  001AA4  CFDE F318          	movff	postinc2,fprintf@val
  8736  001AA8  CFDE F319          	movff	postinc2,fprintf@val+1
  8737  001AAC  CFDE F31A          	movff	postinc2,fprintf@val+2
  8738  001AB0  CFDE F31B          	movff	postinc2,fprintf@val+3
  8739                           
  8740                           ; BSR set to: 3
  8741  001AB4  0E04               	movlw	4
  8742  001AB6  D021               	goto	L5
  8743  001AB8                     l1454:
  8744                           
  8745                           ; BSR set to: 3
  8746                           ;tff.c: 1860: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  8747                           
  8748                           ; BSR set to: 3
  8749  001AB8  0E64               	movlw	100
  8750  001ABA  1922               	xorwf	fprintf@c& (0+255),w,b
  8751  001ABC  B4D8               	btfsc	status,2,c
  8752  001ABE  D00F               	goto	l1457
  8753                           
  8754                           ; BSR set to: 3
  8755  001AC0  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8756  001AC4  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8757  001AC8  CFDE F0F3          	movff	postinc2,??_fprintf
  8758  001ACC  CFDD F0F4          	movff	postdec2,??_fprintf+1
  8759  001AD0  C0F3  F318         	movff	??_fprintf,fprintf@val
  8760  001AD4  C0F4  F319         	movff	??_fprintf+1,fprintf@val+1
  8761  001AD8  6B1A               	clrf	(fprintf@val+2)& (0+255),b
  8762  001ADA  6B1B               	clrf	(fprintf@val+3)& (0+255),b
  8763  001ADC  D00D               	goto	l11655
  8764  001ADE                     l1457:
  8765                           
  8766                           ; BSR set to: 3
  8767                           
  8768                           ; BSR set to: 3
  8769  001ADE  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8770  001AE2  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8771  001AE6  CFDE F318          	movff	postinc2,fprintf@val
  8772  001AEA  CFDD F319          	movff	postdec2,fprintf@val+1
  8773  001AEE  0E00               	movlw	0
  8774  001AF0  BF19               	btfsc	(fprintf@val+1)& (0+255),7,b
  8775  001AF2  0EFF               	movlw	-1
  8776  001AF4  6F1A               	movwf	(fprintf@val+2)& (0+255),b
  8777  001AF6  6F1B               	movwf	(fprintf@val+3)& (0+255),b
  8778  001AF8                     l11655:
  8779                           
  8780                           ; BSR set to: 3
  8781  001AF8  0E02               	movlw	2
  8782  001AFA                     L5:
  8783  001AFA  271C               	addwf	fprintf@arp& (0+255),f,b
  8784  001AFC  0E00               	movlw	0
  8785  001AFE  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  8786                           
  8787                           ; BSR set to: 3
  8788                           ;tff.c: 1861: }
  8789                           ;tff.c: 1863: if (c == 'd') {
  8790                           
  8791                           ; BSR set to: 3
  8792                           
  8793                           ; BSR set to: 3
  8794  001B00  0E64               	movlw	100
  8795  001B02  1922               	xorwf	fprintf@c& (0+255),w,b
  8796  001B04  A4D8               	btfss	status,2,c
  8797  001B06  D00D               	goto	l1461
  8798                           
  8799                           ; BSR set to: 3
  8800                           ;tff.c: 1864: if (val >= 0x80000000) {
  8801  001B08  0E80               	movlw	128
  8802  001B0A  5D1B               	subwf	(fprintf@val+3)& (0+255),w,b
  8803  001B0C  A0D8               	btfss	status,0,c
  8804  001B0E  D009               	goto	l1461
  8805                           
  8806                           ; BSR set to: 3
  8807                           ;tff.c: 1865: val = 0 - val;
  8808  001B10  1F1B               	comf	(fprintf@val+3)& (0+255),f,b
  8809  001B12  1F1A               	comf	(fprintf@val+2)& (0+255),f,b
  8810  001B14  1F19               	comf	(fprintf@val+1)& (0+255),f,b
  8811  001B16  6D18               	negf	fprintf@val& (0+255),b
  8812  001B18  0E00               	movlw	0
  8813  001B1A  2319               	addwfc	(fprintf@val+1)& (0+255),f,b
  8814  001B1C  231A               	addwfc	(fprintf@val+2)& (0+255),f,b
  8815  001B1E  231B               	addwfc	(fprintf@val+3)& (0+255),f,b
  8816                           
  8817                           ;tff.c: 1866: f |= 4;
  8818  001B20  8516               	bsf	fprintf@f& (0+255),2,b
  8819  001B22                     l1461:
  8820                           
  8821                           ; BSR set to: 3
  8822                           ;tff.c: 1867: }
  8823                           ;tff.c: 1868: }
  8824                           ;tff.c: 1869: i = sizeof(s) - 1; s[i] = 0;
  8825                           
  8826                           ; BSR set to: 3
  8827                           
  8828                           ; BSR set to: 3
  8829  001B22  0E00               	movlw	0
  8830  001B24  6F21               	movwf	(fprintf@i+1)& (0+255),b
  8831  001B26  0E0F               	movlw	15
  8832  001B28  6F20               	movwf	fprintf@i& (0+255),b
  8833                           
  8834                           ; BSR set to: 3
  8835  001B2A  0E00               	movlw	low fprintf@s
  8836  001B2C  2520               	addwf	fprintf@i& (0+255),w,b
  8837  001B2E  6ED9               	movwf	fsr2l,c
  8838  001B30  0E03               	movlw	high fprintf@s
  8839  001B32  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  8840  001B34  6EDA               	movwf	fsr2h,c
  8841  001B36  0E00               	movlw	0
  8842  001B38  6EDF               	movwf	indf2,c
  8843  001B3A                     
  8844                           ; BSR set to: 3
  8845                           ;tff.c: 1871: c = (UCHAR)(val % r + '0');
  8846                           
  8847                           ; BSR set to: 3
  8848  001B3A  C318  F060         	movff	fprintf@val,___llmod@dividend
  8849  001B3E  C319  F061         	movff	fprintf@val+1,___llmod@dividend+1
  8850  001B42  C31A  F062         	movff	fprintf@val+2,___llmod@dividend+2
  8851  001B46  C31B  F063         	movff	fprintf@val+3,___llmod@dividend+3
  8852  001B4A  5117               	movf	fprintf@r& (0+255),w,b
  8853  001B4C  0100               	movlb	0	; () banked
  8854  001B4E  6F64               	movwf	___llmod@divisor& (0+255),b
  8855  001B50  6B65               	clrf	(___llmod@divisor+1)& (0+255),b
  8856  001B52  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
  8857  001B54  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
  8858  001B56  ECAB  F027         	call	___llmod	;wreg free
  8859  001B5A  0100               	movlb	0	; () banked
  8860  001B5C  5160               	movf	?___llmod& (0+255),w,b
  8861  001B5E  0F30               	addlw	48
  8862  001B60  0103               	movlb	3	; () banked
  8863  001B62  6F22               	movwf	fprintf@c& (0+255),b
  8864                           
  8865                           ; BSR set to: 3
  8866                           ;tff.c: 1872: if (c > '9') c += 7;
  8867  001B64  0E39               	movlw	57
  8868  001B66  6522               	cpfsgt	fprintf@c& (0+255),b
  8869  001B68  D002               	goto	l1463
  8870                           
  8871                           ; BSR set to: 3
  8872  001B6A  0E07               	movlw	7
  8873  001B6C  2722               	addwf	fprintf@c& (0+255),f,b
  8874  001B6E                     l1463:
  8875                           
  8876                           ; BSR set to: 3
  8877                           ;tff.c: 1873: s[--i] = c;
  8878                           
  8879                           ; BSR set to: 3
  8880  001B6E  0720               	decf	fprintf@i& (0+255),f,b
  8881  001B70  A0D8               	btfss	status,0,c
  8882  001B72  0721               	decf	(fprintf@i+1)& (0+255),f,b
  8883  001B74  0E00               	movlw	low fprintf@s
  8884  001B76  2520               	addwf	fprintf@i& (0+255),w,b
  8885  001B78  6ED9               	movwf	fsr2l,c
  8886  001B7A  0E03               	movlw	high fprintf@s
  8887  001B7C  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  8888  001B7E  6EDA               	movwf	fsr2h,c
  8889  001B80  C322  FFDF         	movff	fprintf@c,indf2
  8890                           
  8891                           ; BSR set to: 3
  8892                           ;tff.c: 1874: val /= r;
  8893  001B84  C318  F060         	movff	fprintf@val,___lldiv@dividend
  8894  001B88  C319  F061         	movff	fprintf@val+1,___lldiv@dividend+1
  8895  001B8C  C31A  F062         	movff	fprintf@val+2,___lldiv@dividend+2
  8896  001B90  C31B  F063         	movff	fprintf@val+3,___lldiv@dividend+3
  8897  001B94  5117               	movf	fprintf@r& (0+255),w,b
  8898  001B96  0100               	movlb	0	; () banked
  8899  001B98  6F64               	movwf	___lldiv@divisor& (0+255),b
  8900  001B9A  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
  8901  001B9C  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
  8902  001B9E  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
  8903  001BA0  EC82  F026         	call	___lldiv	;wreg free
  8904  001BA4  C060  F318         	movff	?___lldiv,fprintf@val
  8905  001BA8  C061  F319         	movff	?___lldiv+1,fprintf@val+1
  8906  001BAC  C062  F31A         	movff	?___lldiv+2,fprintf@val+2
  8907  001BB0  C063  F31B         	movff	?___lldiv+3,fprintf@val+3
  8908                           
  8909                           ;tff.c: 1875: } while (i && val);
  8910  001BB4  0103               	movlb	3	; () banked
  8911  001BB6  5120               	movf	fprintf@i& (0+255),w,b
  8912  001BB8  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  8913  001BBA  B4D8               	btfsc	status,2,c
  8914  001BBC  D006               	goto	u15700
  8915                           
  8916                           ; BSR set to: 3
  8917  001BBE  5118               	movf	fprintf@val& (0+255),w,b
  8918  001BC0  1119               	iorwf	(fprintf@val+1)& (0+255),w,b
  8919  001BC2  111A               	iorwf	(fprintf@val+2)& (0+255),w,b
  8920  001BC4  111B               	iorwf	(fprintf@val+3)& (0+255),w,b
  8921  001BC6  A4D8               	btfss	status,2,c
  8922  001BC8  D7B8               	goto	l1462
  8923  001BCA                     u15700:
  8924                           
  8925                           ; BSR set to: 3
  8926                           ;tff.c: 1876: if (i && (f & 4)) s[--i] = '-';
  8927                           
  8928                           ; BSR set to: 3
  8929                           
  8930                           ; BSR set to: 3
  8931  001BCA  5120               	movf	fprintf@i& (0+255),w,b
  8932  001BCC  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  8933  001BCE  A4D8               	btfss	status,2,c
  8934                           
  8935                           ; BSR set to: 3
  8936  001BD0  A516               	btfss	fprintf@f& (0+255),2,b
  8937  001BD2  D00B               	goto	l1467
  8938                           
  8939                           ; BSR set to: 3
  8940  001BD4  0720               	decf	fprintf@i& (0+255),f,b
  8941  001BD6  A0D8               	btfss	status,0,c
  8942  001BD8  0721               	decf	(fprintf@i+1)& (0+255),f,b
  8943  001BDA  0E00               	movlw	low fprintf@s
  8944  001BDC  2520               	addwf	fprintf@i& (0+255),w,b
  8945  001BDE  6ED9               	movwf	fsr2l,c
  8946  001BE0  0E03               	movlw	high fprintf@s
  8947  001BE2  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  8948  001BE4  6EDA               	movwf	fsr2h,c
  8949  001BE6  0E2D               	movlw	45
  8950  001BE8  6EDF               	movwf	indf2,c
  8951  001BEA                     l1467:
  8952                           
  8953                           ; BSR set to: 3
  8954                           ;tff.c: 1877: w = sizeof(s) - 1 - w;
  8955                           
  8956                           ; BSR set to: 3
  8957  001BEA  0E01               	movlw	1
  8958  001BEC  2514               	addwf	fprintf@w& (0+255),w,b
  8959  001BEE  0100               	movlb	0	; () banked
  8960  001BF0  6FF3               	movwf	??_fprintf& (0+255),b
  8961  001BF2  0E00               	movlw	0
  8962  001BF4  0103               	movlb	3	; () banked
  8963  001BF6  2115               	addwfc	(fprintf@w+1)& (0+255),w,b
  8964  001BF8  0100               	movlb	0	; () banked
  8965  001BFA  6FF4               	movwf	(??_fprintf+1)& (0+255),b
  8966  001BFC  1FF3               	comf	??_fprintf& (0+255),f,b
  8967  001BFE  1FF4               	comf	(??_fprintf+1)& (0+255),f,b
  8968  001C00  4BF3               	infsnz	??_fprintf& (0+255),f,b
  8969  001C02  2BF4               	incf	(??_fprintf+1)& (0+255),f,b
  8970  001C04  0E10               	movlw	16
  8971  001C06  25F3               	addwf	??_fprintf& (0+255),w,b
  8972  001C08  0103               	movlb	3	; () banked
  8973  001C0A  6F14               	movwf	fprintf@w& (0+255),b
  8974  001C0C  0E00               	movlw	0
  8975  001C0E  0100               	movlb	0	; () banked
  8976  001C10  21F4               	addwfc	(??_fprintf+1)& (0+255),w,b
  8977  001C12  0103               	movlb	3	; () banked
  8978  001C14  6F15               	movwf	(fprintf@w+1)& (0+255),b
  8979                           
  8980                           ;tff.c: 1878: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
  8981  001C16  D016               	goto	l1468
  8982  001C18                     l1469:
  8983                           
  8984                           ; BSR set to: 0
  8985  001C18  0103               	movlb	3	; () banked
  8986  001C1A  B116               	btfsc	fprintf@f& (0+255),0,b
  8987  001C1C  D004               	goto	l1471
  8988                           
  8989                           ; BSR set to: 3
  8990  001C1E  0E00               	movlw	0
  8991  001C20  6F13               	movwf	(_fprintf$2611+1)& (0+255),b
  8992  001C22  0E20               	movlw	32
  8993  001C24  D003               	goto	L3
  8994  001C26                     l1471:
  8995                           
  8996                           ; BSR set to: 3
  8997                           
  8998                           ; BSR set to: 3
  8999  001C26  0E00               	movlw	0
  9000  001C28  6F13               	movwf	(_fprintf$2611+1)& (0+255),b
  9001  001C2A  0E30               	movlw	48
  9002  001C2C                     L3:
  9003  001C2C  6F12               	movwf	_fprintf$2611& (0+255),b
  9004                           
  9005                           ; BSR set to: 3
  9006                           
  9007                           ; BSR set to: 3
  9008  001C2E  0720               	decf	fprintf@i& (0+255),f,b
  9009  001C30  A0D8               	btfss	status,0,c
  9010  001C32  0721               	decf	(fprintf@i+1)& (0+255),f,b
  9011  001C34  0E00               	movlw	low fprintf@s
  9012  001C36  2520               	addwf	fprintf@i& (0+255),w,b
  9013  001C38  6ED9               	movwf	fsr2l,c
  9014  001C3A  0E03               	movlw	high fprintf@s
  9015  001C3C  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  9016  001C3E  6EDA               	movwf	fsr2h,c
  9017  001C40  C312  FFDF         	movff	_fprintf$2611,indf2
  9018  001C44                     l1468:
  9019                           
  9020                           ; BSR set to: 3
  9021                           
  9022                           ; BSR set to: 3
  9023  001C44  5120               	movf	fprintf@i& (0+255),w,b
  9024  001C46  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  9025  001C48  B4D8               	btfsc	status,2,c
  9026  001C4A  D00D               	goto	u15750
  9027                           
  9028                           ; BSR set to: 3
  9029  001C4C  5120               	movf	fprintf@i& (0+255),w,b
  9030  001C4E  5D14               	subwf	fprintf@w& (0+255),w,b
  9031  001C50  5115               	movf	(fprintf@w+1)& (0+255),w,b
  9032  001C52  0A80               	xorlw	128
  9033  001C54  0100               	movlb	0	; () banked
  9034  001C56  6FF3               	movwf	??_fprintf& (0+255),b
  9035  001C58  0103               	movlb	3	; () banked
  9036  001C5A  5121               	movf	(fprintf@i+1)& (0+255),w,b
  9037  001C5C  0A80               	xorlw	128
  9038  001C5E  0100               	movlb	0	; () banked
  9039  001C60  59F3               	subwfb	??_fprintf& (0+255),w,b
  9040  001C62  A0D8               	btfss	status,0,c
  9041  001C64  D7D9               	goto	l1469
  9042  001C66                     u15750:
  9043                           
  9044                           ;tff.c: 1879: cc = fputs(&s[i], fil);
  9045                           
  9046                           ; BSR set to: 0
  9047                           
  9048                           ; BSR set to: 0
  9049  001C66  0E00               	movlw	low fprintf@s
  9050  001C68  0103               	movlb	3	; () banked
  9051  001C6A  2520               	addwf	fprintf@i& (0+255),w,b
  9052  001C6C  0100               	movlb	0	; () banked
  9053  001C6E  6FEC               	movwf	fputs@str& (0+255),b
  9054  001C70  0E03               	movlw	high fprintf@s
  9055  001C72  0103               	movlb	3	; () banked
  9056  001C74  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  9057  001C76  0100               	movlb	0	; () banked
  9058  001C78  6FED               	movwf	(fputs@str+1)& (0+255),b
  9059  001C7A  C1D8  F0EE         	movff	fprintf@fil,fputs@fil
  9060  001C7E  C1D9  F0EF         	movff	fprintf@fil+1,fputs@fil+1
  9061  001C82  EC2D  F025         	call	_fputs	;wreg free
  9062  001C86  C0EC  F31E         	movff	?_fputs,fprintf@cc
  9063  001C8A  C0ED  F31F         	movff	?_fputs+1,fprintf@cc+1
  9064  001C8E                     l1439:
  9065  001C8E  0103               	movlb	3	; () banked
  9066  001C90  511E               	movf	fprintf@cc& (0+255),w,b
  9067  001C92  2710               	addwf	fprintf@res& (0+255),f,b
  9068  001C94  511F               	movf	(fprintf@cc+1)& (0+255),w,b
  9069  001C96  2311               	addwfc	(fprintf@res+1)& (0+255),f,b
  9070                           
  9071                           ; BSR set to: 3
  9072  001C98  291E               	incf	fprintf@cc& (0+255),w,b
  9073  001C9A  E101               	bnz	u15761
  9074  001C9C  D626               	goto	L4
  9075  001C9E                     u15761:
  9076  001C9E  D628               	goto	l1434
  9077  001CA0                     __end_of_fprintf:
  9078                           	opt stack 0
  9079                           tosu	equ	0xFFF
  9080                           tosh	equ	0xFFE
  9081                           tosl	equ	0xFFD
  9082                           pclath	equ	0xFFA
  9083                           tblptru	equ	0xFF8
  9084                           tblptrh	equ	0xFF7
  9085                           tblptrl	equ	0xFF6
  9086                           tablat	equ	0xFF5
  9087                           prodh	equ	0xFF4
  9088                           prodl	equ	0xFF3
  9089                           intcon	equ	0xFF2
  9090                           intcon2	equ	0xFF1
  9091                           intcon3	equ	0xFF0
  9092                           postinc0	equ	0xFEE
  9093                           wreg	equ	0xFE8
  9094                           indf1	equ	0xFE7
  9095                           postinc1	equ	0xFE6
  9096                           postdec1	equ	0xFE5
  9097                           plusw1	equ	0xFE3
  9098                           fsr1h	equ	0xFE2
  9099                           fsr1l	equ	0xFE1
  9100                           indf2	equ	0xFDF
  9101                           postinc2	equ	0xFDE
  9102                           postdec2	equ	0xFDD
  9103                           plusw2	equ	0xFDB
  9104                           fsr2h	equ	0xFDA
  9105                           fsr2l	equ	0xFD9
  9106                           status	equ	0xFD8
  9107                           
  9108 ;; *************** function _fputs *****************
  9109 ;; Defined at:
  9110 ;;		line 1788 in file "bibliotecas/tff.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;  str             2  140[BANK0 ] PTR const unsigned char 
  9113 ;;		 -> fprintf@s(16), STR_26(16), STR_25(27), STR_24(17), 
  9114 ;;		 -> STR_23(16), STR_22(16), string_dado(52), 
  9115 ;;  fil             2  142[BANK0 ] PTR struct _FIL
  9116 ;;		 -> fil(28), 
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;  n               2  145[BANK0 ] int 
  9119 ;; Return value:  Size  Location     Type
  9120 ;;                  2  140[BANK0 ] int 
  9121 ;; Registers used:
  9122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9123 ;; Tracked objects:
  9124 ;;		On entry : 0/0
  9125 ;;		On exit  : 0/0
  9126 ;;		Unchanged: 0/0
  9127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9128 ;;      Params:         0       4       0       0       0       0       0       0       0
  9129 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9130 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9131 ;;      Totals:         0       7       0       0       0       0       0       0       0
  9132 ;;Total ram usage:        7 bytes
  9133 ;; Hardware stack levels used:    1
  9134 ;; Hardware stack levels required when called:   13
  9135 ;; This function calls:
  9136 ;;		_fputc
  9137 ;; This function is called by:
  9138 ;;		_fprintf
  9139 ;; This function uses a non-reentrant model
  9140 ;;
  9141                           
  9142                           	psect	text33
  9143  004A5A                     __ptext33:
  9144                           	opt stack 0
  9145  004A5A                     _fputs:
  9146                           	opt stack 13
  9147                           
  9148                           ;tff.c: 1793: int n;
  9149                           ;tff.c: 1796: for (n = 0; *str; str++, n++) {
  9150                           
  9151                           ; BSR set to: 3
  9152                           ;incstack = 0
  9153  004A5A  0E00               	movlw	0
  9154  004A5C  0100               	movlb	0	; () banked
  9155  004A5E  6FF2               	movwf	(fputs@n+1)& (0+255),b
  9156  004A60  0E00               	movlw	0
  9157  004A62  6FF1               	movwf	fputs@n& (0+255),b
  9158  004A64  D028               	goto	l1427
  9159  004A66                     
  9160                           ;tff.c: 1797: if (fputc(*str, fil) == -1) return -1;
  9161                           
  9162                           ; BSR set to: 0
  9163  004A66  C0EC  FFF6         	movff	fputs@str,tblptrl
  9164  004A6A  C0ED  FFF7         	movff	fputs@str+1,tblptrh
  9165  004A6E  6AF8               	clrf	tblptru,c
  9166  004A70  0E07               	movlw	(high __ramtop+-1)
  9167  004A72  64F7               	cpfsgt	tblptrh,c
  9168  004A74  D003               	bra	u14997
  9169  004A76  0008               	tblrd		*
  9170  004A78  50F5               	movf	tablat,w,c
  9171  004A7A  D005               	bra	u14990
  9172  004A7C                     u14997:
  9173  004A7C  CFF6 FFE9          	movff	tblptrl,fsr0l
  9174  004A80  CFF7 FFEA          	movff	tblptrh,fsr0h
  9175  004A84  50EF               	movf	indf0,w,c
  9176  004A86                     u14990:
  9177  004A86  0100               	movlb	0	; () banked
  9178  004A88  6FF0               	movwf	??_fputs& (0+255),b
  9179  004A8A  51F0               	movf	??_fputs& (0+255),w,b
  9180  004A8C  6FE5               	movwf	fputc@chr& (0+255),b
  9181  004A8E  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  9182  004A90  C0EE  F0E7         	movff	fputs@fil,fputc@fil
  9183  004A94  C0EF  F0E8         	movff	fputs@fil+1,fputc@fil+1
  9184  004A98  EC6C  F028         	call	_fputc	;wreg free
  9185  004A9C  0100               	movlb	0	; () banked
  9186  004A9E  29E5               	incf	?_fputc& (0+255),w,b
  9187  004AA0  E106               	bnz	l11257
  9188  004AA2  29E6               	incf	(?_fputc+1)& (0+255),w,b
  9189  004AA4  A4D8               	btfss	status,2,c
  9190  004AA6  D003               	goto	l1429
  9191                           
  9192                           ; BSR set to: 0
  9193  004AA8  69EC               	setf	?_fputs& (0+255),b
  9194  004AAA  69ED               	setf	(?_fputs+1)& (0+255),b
  9195  004AAC  0012               	return	
  9196  004AAE                     l1429:
  9197  004AAE                     l11257:
  9198                           
  9199                           ; BSR set to: 0
  9200  004AAE  4BEC               	infsnz	fputs@str& (0+255),f,b
  9201  004AB0  2BED               	incf	(fputs@str+1)& (0+255),f,b
  9202  004AB2  4BF1               	infsnz	fputs@n& (0+255),f,b
  9203  004AB4  2BF2               	incf	(fputs@n+1)& (0+255),f,b
  9204  004AB6                     l1427:
  9205                           
  9206                           ; BSR set to: 0
  9207                           
  9208                           ; BSR set to: 0
  9209  004AB6  C0EC  FFF6         	movff	fputs@str,tblptrl
  9210  004ABA  C0ED  FFF7         	movff	fputs@str+1,tblptrh
  9211  004ABE  6AF8               	clrf	tblptru,c
  9212  004AC0  0E07               	movlw	(high __ramtop+-1)
  9213  004AC2  64F7               	cpfsgt	tblptrh,c
  9214  004AC4  D003               	bra	u15017
  9215  004AC6  0008               	tblrd		*
  9216  004AC8  50F5               	movf	tablat,w,c
  9217  004ACA  D005               	bra	u15010
  9218  004ACC                     u15017:
  9219  004ACC  CFF6 FFE9          	movff	tblptrl,fsr0l
  9220  004AD0  CFF7 FFEA          	movff	tblptrh,fsr0h
  9221  004AD4  50EF               	movf	indf0,w,c
  9222  004AD6                     u15010:
  9223  004AD6  0900               	iorlw	0
  9224  004AD8  A4D8               	btfss	status,2,c
  9225  004ADA  D7C5               	goto	l1428
  9226                           
  9227                           ;tff.c: 1798: }
  9228                           ;tff.c: 1799: return n;
  9229  004ADC  C0F1  F0EC         	movff	fputs@n,?_fputs
  9230  004AE0  C0F2  F0ED         	movff	fputs@n+1,?_fputs+1
  9231  004AE4  0012               	return		;funcret
  9232  004AE6                     __end_of_fputs:
  9233                           	opt stack 0
  9234                           tosu	equ	0xFFF
  9235                           tosh	equ	0xFFE
  9236                           tosl	equ	0xFFD
  9237                           pclath	equ	0xFFA
  9238                           tblptru	equ	0xFF8
  9239                           tblptrh	equ	0xFF7
  9240                           tblptrl	equ	0xFF6
  9241                           tablat	equ	0xFF5
  9242                           prodh	equ	0xFF4
  9243                           prodl	equ	0xFF3
  9244                           intcon	equ	0xFF2
  9245                           intcon2	equ	0xFF1
  9246                           intcon3	equ	0xFF0
  9247                           indf0	equ	0xFEF
  9248                           postinc0	equ	0xFEE
  9249                           fsr0h	equ	0xFEA
  9250                           fsr0l	equ	0xFE9
  9251                           wreg	equ	0xFE8
  9252                           indf1	equ	0xFE7
  9253                           postinc1	equ	0xFE6
  9254                           postdec1	equ	0xFE5
  9255                           plusw1	equ	0xFE3
  9256                           fsr1h	equ	0xFE2
  9257                           fsr1l	equ	0xFE1
  9258                           indf2	equ	0xFDF
  9259                           postinc2	equ	0xFDE
  9260                           postdec2	equ	0xFDD
  9261                           plusw2	equ	0xFDB
  9262                           fsr2h	equ	0xFDA
  9263                           fsr2l	equ	0xFD9
  9264                           status	equ	0xFD8
  9265                           
  9266 ;; *************** function _fputc *****************
  9267 ;; Defined at:
  9268 ;;		line 1761 in file "bibliotecas/tff.c"
  9269 ;; Parameters:    Size  Location     Type
  9270 ;;  chr             2  133[BANK0 ] int 
  9271 ;;  fil             2  135[BANK0 ] PTR struct _FIL
  9272 ;;		 -> fil(28), 
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;  bw              2  138[BANK0 ] unsigned int 
  9275 ;;  c               1  137[BANK0 ] unsigned char 
  9276 ;; Return value:  Size  Location     Type
  9277 ;;                  2  133[BANK0 ] int 
  9278 ;; Registers used:
  9279 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9280 ;; Tracked objects:
  9281 ;;		On entry : 0/0
  9282 ;;		On exit  : 0/0
  9283 ;;		Unchanged: 0/0
  9284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9285 ;;      Params:         0       4       0       0       0       0       0       0       0
  9286 ;;      Locals:         0       3       0       0       0       0       0       0       0
  9287 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9288 ;;      Totals:         0       7       0       0       0       0       0       0       0
  9289 ;;Total ram usage:        7 bytes
  9290 ;; Hardware stack levels used:    1
  9291 ;; Hardware stack levels required when called:   12
  9292 ;; This function calls:
  9293 ;;		_f_write
  9294 ;; This function is called by:
  9295 ;;		_fputs
  9296 ;;		_fprintf
  9297 ;; This function uses a non-reentrant model
  9298 ;;
  9299                           
  9300                           	psect	text34
  9301  0050D8                     __ptext34:
  9302                           	opt stack 0
  9303  0050D8                     _fputc:
  9304                           	opt stack 13
  9305                           
  9306                           ;tff.c: 1766: UINT bw;
  9307                           ;tff.c: 1767: char c;
  9308                           ;tff.c: 1773: if (!fil) {
  9309                           
  9310                           ;incstack = 0
  9311  0050D8  0100               	movlb	0	; () banked
  9312  0050DA  51E7               	movf	fputc@fil& (0+255),w,b
  9313  0050DC  11E8               	iorwf	(fputc@fil+1)& (0+255),w,b
  9314  0050DE  A4D8               	btfss	status,2,c
  9315  0050E0  D005               	goto	l1419
  9316                           
  9317                           ; BSR set to: 0
  9318                           ;tff.c: 1775: return chr;
  9319  0050E2  C0E5  F0E5         	movff	fputc@chr,?_fputc
  9320  0050E6  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  9321  0050EA  0012               	return	
  9322  0050EC                     l1419:
  9323                           
  9324                           ; BSR set to: 0
  9325                           ;tff.c: 1776: }
  9326                           ;tff.c: 1777: c = (char)chr;
  9327  0050EC  C0E5  F0E9         	movff	fputc@chr,fputc@c
  9328                           
  9329                           ; BSR set to: 0
  9330                           ;tff.c: 1778: f_write(fil, &c, 1, &bw);
  9331  0050F0  C0E7  F0C4         	movff	fputc@fil,f_write@fp
  9332  0050F4  C0E8  F0C5         	movff	fputc@fil+1,f_write@fp+1
  9333  0050F8  0EE9               	movlw	low fputc@c
  9334  0050FA  6FC6               	movwf	f_write@buff& (0+255),b
  9335  0050FC  0E00               	movlw	high fputc@c
  9336  0050FE  6FC7               	movwf	(f_write@buff+1)& (0+255),b
  9337  005100  0E00               	movlw	0
  9338  005102  6FC9               	movwf	(f_write@btw+1)& (0+255),b
  9339  005104  0E01               	movlw	1
  9340  005106  6FC8               	movwf	f_write@btw& (0+255),b
  9341  005108  0EEA               	movlw	low fputc@bw
  9342  00510A  6FCA               	movwf	f_write@bw& (0+255),b
  9343  00510C  0E00               	movlw	high fputc@bw
  9344  00510E  6FCB               	movwf	(f_write@bw+1)& (0+255),b
  9345  005110  ECAB  F004         	call	_f_write	;wreg free
  9346                           
  9347                           ;tff.c: 1779: return bw ? chr : -1;
  9348  005114  0100               	movlb	0	; () banked
  9349  005116  51EA               	movf	fputc@bw& (0+255),w,b
  9350  005118  11EB               	iorwf	(fputc@bw+1)& (0+255),w,b
  9351  00511A  A4D8               	btfss	status,2,c
  9352  00511C  D003               	goto	l1422
  9353                           
  9354                           ; BSR set to: 0
  9355  00511E  69E5               	setf	?_fputc& (0+255),b
  9356  005120  69E6               	setf	(?_fputc+1)& (0+255),b
  9357  005122  0012               	return	
  9358  005124                     l1422:
  9359                           
  9360                           ; BSR set to: 0
  9361  005124  C0E5  F0E5         	movff	fputc@chr,?_fputc
  9362  005128  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  9363  00512C  0012               	return	
  9364  00512E                     __end_of_fputc:
  9365                           	opt stack 0
  9366                           tosu	equ	0xFFF
  9367                           tosh	equ	0xFFE
  9368                           tosl	equ	0xFFD
  9369                           pclath	equ	0xFFA
  9370                           tblptru	equ	0xFF8
  9371                           tblptrh	equ	0xFF7
  9372                           tblptrl	equ	0xFF6
  9373                           tablat	equ	0xFF5
  9374                           prodh	equ	0xFF4
  9375                           prodl	equ	0xFF3
  9376                           intcon	equ	0xFF2
  9377                           intcon2	equ	0xFF1
  9378                           intcon3	equ	0xFF0
  9379                           indf0	equ	0xFEF
  9380                           postinc0	equ	0xFEE
  9381                           fsr0h	equ	0xFEA
  9382                           fsr0l	equ	0xFE9
  9383                           wreg	equ	0xFE8
  9384                           indf1	equ	0xFE7
  9385                           postinc1	equ	0xFE6
  9386                           postdec1	equ	0xFE5
  9387                           plusw1	equ	0xFE3
  9388                           fsr1h	equ	0xFE2
  9389                           fsr1l	equ	0xFE1
  9390                           indf2	equ	0xFDF
  9391                           postinc2	equ	0xFDE
  9392                           postdec2	equ	0xFDD
  9393                           plusw2	equ	0xFDB
  9394                           fsr2h	equ	0xFDA
  9395                           fsr2l	equ	0xFD9
  9396                           status	equ	0xFD8
  9397                           
  9398 ;; *************** function _f_write *****************
  9399 ;; Defined at:
  9400 ;;		line 991 in file "bibliotecas/tff.c"
  9401 ;; Parameters:    Size  Location     Type
  9402 ;;  fp              2  100[BANK0 ] PTR struct _FIL
  9403 ;;		 -> fil(28), 
  9404 ;;  buff            2  102[BANK0 ] PTR const void 
  9405 ;;		 -> fputc@c(1), 
  9406 ;;  btw             2  104[BANK0 ] unsigned int 
  9407 ;;  bw              2  106[BANK0 ] PTR unsigned int 
  9408 ;;		 -> fputc@bw(2), 
  9409 ;; Auto vars:     Size  Location     Type
  9410 ;;  sect            4  123[BANK0 ] unsigned long 
  9411 ;;  wcnt            2  131[BANK0 ] unsigned int 
  9412 ;;  clust           2  129[BANK0 ] unsigned short 
  9413 ;;  cc              2  127[BANK0 ] unsigned int 
  9414 ;;  wbuff           2  121[BANK0 ] PTR const unsigned char 
  9415 ;;		 -> fputc@c(1), 
  9416 ;;  res             1  120[BANK0 ] enum E155
  9417 ;; Return value:  Size  Location     Type
  9418 ;;                  1    wreg      enum E155
  9419 ;; Registers used:
  9420 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9421 ;; Tracked objects:
  9422 ;;		On entry : 0/0
  9423 ;;		On exit  : 0/0
  9424 ;;		Unchanged: 0/0
  9425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9426 ;;      Params:         0       8       0       0       0       0       0       0       0
  9427 ;;      Locals:         0      13       0       0       0       0       0       0       0
  9428 ;;      Temps:          0      12       0       0       0       0       0       0       0
  9429 ;;      Totals:         0      33       0       0       0       0       0       0       0
  9430 ;;Total ram usage:       33 bytes
  9431 ;; Hardware stack levels used:    1
  9432 ;; Hardware stack levels required when called:   11
  9433 ;; This function calls:
  9434 ;;		_clust2sect
  9435 ;;		_create_chain
  9436 ;;		_disk_write
  9437 ;;		_memcpy
  9438 ;;		_move_window
  9439 ;;		_validate
  9440 ;; This function is called by:
  9441 ;;		_fputc
  9442 ;; This function uses a non-reentrant model
  9443 ;;
  9444                           
  9445                           	psect	text35
  9446  000956                     __ptext35:
  9447                           	opt stack 0
  9448  000956                     _f_write:
  9449                           	opt stack 13
  9450                           
  9451                           ;tff.c: 998: FRESULT res;
  9452                           ;tff.c: 999: DWORD sect;
  9453                           ;tff.c: 1000: UINT wcnt, cc;
  9454                           ;tff.c: 1001: CLUST clust;
  9455                           ;tff.c: 1002: const BYTE *wbuff = buff;
  9456                           
  9457                           ; BSR set to: 0
  9458                           ;incstack = 0
  9459  000956  C0C6  F0D9         	movff	f_write@buff,f_write@wbuff
  9460  00095A  C0C7  F0DA         	movff	f_write@buff+1,f_write@wbuff+1
  9461                           
  9462                           ;tff.c: 1005: *bw = 0;
  9463  00095E  C0CA  FFD9         	movff	f_write@bw,fsr2l
  9464  000962  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  9465  000966  0E00               	movlw	0
  9466  000968  6EDE               	movwf	postinc2,c
  9467  00096A  0E00               	movlw	0
  9468  00096C  6EDD               	movwf	postdec2,c
  9469                           
  9470                           ;tff.c: 1006: res = validate(fp->fs, fp->id);
  9471  00096E  0100               	movlb	0	; () banked
  9472  000970  EE20 F004          	lfsr	2,4
  9473  000974  51C4               	movf	f_write@fp& (0+255),w,b
  9474  000976  26D9               	addwf	fsr2l,f,c
  9475  000978  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9476  00097A  22DA               	addwfc	fsr2h,f,c
  9477  00097C  CFDE F067          	movff	postinc2,validate@fs
  9478  000980  CFDD F068          	movff	postdec2,validate@fs+1
  9479  000984  C0C4  FFD9         	movff	f_write@fp,fsr2l
  9480  000988  C0C5  FFDA         	movff	f_write@fp+1,fsr2h
  9481  00098C  CFDE F069          	movff	postinc2,validate@id
  9482  000990  CFDD F06A          	movff	postdec2,validate@id+1
  9483  000994  EC38  F029         	call	_validate	;wreg free
  9484  000998  0100               	movlb	0	; () banked
  9485  00099A  6FD8               	movwf	f_write@res& (0+255),b
  9486                           
  9487                           ; BSR set to: 0
  9488                           ;tff.c: 1007: if (res != FR_OK) return res;
  9489  00099C  51D8               	movf	f_write@res& (0+255),w,b
  9490  00099E  A4D8               	btfss	status,2,c
  9491  0009A0  0012               	return	
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;tff.c: 1008: if (fp->flag & 0x80) return FR_RW_ERROR;
  9495                           
  9496                           ; BSR set to: 0
  9497                           
  9498                           ; BSR set to: 0
  9499                           ;	Return value of _f_write is never used
  9500  0009A2  EE20 F002          	lfsr	2,2
  9501  0009A6  51C4               	movf	f_write@fp& (0+255),w,b
  9502  0009A8  26D9               	addwf	fsr2l,f,c
  9503  0009AA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9504  0009AC  22DA               	addwfc	fsr2h,f,c
  9505  0009AE  BEDF               	btfsc	indf2,7,c
  9506  0009B0  0012               	return	
  9507                           
  9508                           ; BSR set to: 0
  9509                           ;tff.c: 1009: if (!(fp->flag & 0x02)) return FR_DENIED;
  9510                           
  9511                           ; BSR set to: 0
  9512                           
  9513                           ; BSR set to: 0
  9514                           ;	Return value of _f_write is never used
  9515  0009B2  EE20 F002          	lfsr	2,2
  9516  0009B6  51C4               	movf	f_write@fp& (0+255),w,b
  9517  0009B8  26D9               	addwf	fsr2l,f,c
  9518  0009BA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9519  0009BC  22DA               	addwfc	fsr2h,f,c
  9520  0009BE  A2DF               	btfss	indf2,1,c
  9521  0009C0  0012               	return	
  9522                           
  9523                           ; BSR set to: 0
  9524                           ;tff.c: 1010: if (fp->fsize + btw < fp->fsize) return FR_OK;
  9525                           
  9526                           ; BSR set to: 0
  9527                           
  9528                           ; BSR set to: 0
  9529                           ;	Return value of _f_write is never used
  9530  0009C2  EE20 F00A          	lfsr	2,10
  9531  0009C6  51C4               	movf	f_write@fp& (0+255),w,b
  9532  0009C8  26D9               	addwf	fsr2l,f,c
  9533  0009CA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9534  0009CC  22DA               	addwfc	fsr2h,f,c
  9535  0009CE  EE10 F00A          	lfsr	1,10
  9536  0009D2  51C4               	movf	f_write@fp& (0+255),w,b
  9537  0009D4  26E1               	addwf	fsr1l,f,c
  9538  0009D6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9539  0009D8  22E2               	addwfc	fsr1h,f,c
  9540  0009DA  CFE6 F0D0          	movff	postinc1,??_f_write+4
  9541  0009DE  CFE6 F0D1          	movff	postinc1,??_f_write+5
  9542  0009E2  CFE6 F0D2          	movff	postinc1,??_f_write+6
  9543  0009E6  CFE6 F0D3          	movff	postinc1,??_f_write+7
  9544  0009EA  51C8               	movf	f_write@btw& (0+255),w,b
  9545  0009EC  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  9546  0009EE  6FD4               	movwf	(??_f_write+8)& (0+255),b
  9547  0009F0  51C9               	movf	(f_write@btw+1)& (0+255),w,b
  9548  0009F2  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  9549  0009F4  6FD5               	movwf	(??_f_write+9)& (0+255),b
  9550  0009F6  0E00               	movlw	0
  9551  0009F8  21D2               	addwfc	(??_f_write+6)& (0+255),w,b
  9552  0009FA  6FD6               	movwf	(??_f_write+10)& (0+255),b
  9553  0009FC  0E00               	movlw	0
  9554  0009FE  21D3               	addwfc	(??_f_write+7)& (0+255),w,b
  9555  000A00  6FD7               	movwf	(??_f_write+11)& (0+255),b
  9556  000A02  50DE               	movf	postinc2,w,c
  9557  000A04  5DD4               	subwf	(??_f_write+8)& (0+255),w,b
  9558  000A06  50DE               	movf	postinc2,w,c
  9559  000A08  59D5               	subwfb	(??_f_write+9)& (0+255),w,b
  9560  000A0A  50DE               	movf	postinc2,w,c
  9561  000A0C  59D6               	subwfb	(??_f_write+10)& (0+255),w,b
  9562  000A0E  50DE               	movf	postinc2,w,c
  9563  000A10  59D7               	subwfb	(??_f_write+11)& (0+255),w,b
  9564  000A12  A0D8               	btfss	status,0,c
  9565  000A14  0012               	return	
  9566  000A16  D23B               	goto	l1329
  9567  000A18                     
  9568                           ; BSR set to: 0
  9569                           ;tff.c: 1014: if ((fp->fptr % 512U) == 0) {
  9570                           
  9571                           ; BSR set to: 0
  9572  000A18  EE20 F006          	lfsr	2,6
  9573  000A1C  51C4               	movf	f_write@fp& (0+255),w,b
  9574  000A1E  26D9               	addwf	fsr2l,f,c
  9575  000A20  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9576  000A22  22DA               	addwfc	fsr2h,f,c
  9577  000A24  0EFF               	movlw	255
  9578  000A26  14DE               	andwf	postinc2,w,c
  9579  000A28  6FCC               	movwf	??_f_write& (0+255),b
  9580  000A2A  0E01               	movlw	1
  9581  000A2C  14DE               	andwf	postinc2,w,c
  9582  000A2E  6FCD               	movwf	(??_f_write+1)& (0+255),b
  9583  000A30  0E00               	movlw	0
  9584  000A32  14DE               	andwf	postinc2,w,c
  9585  000A34  6FCE               	movwf	(??_f_write+2)& (0+255),b
  9586  000A36  0E00               	movlw	0
  9587  000A38  14DE               	andwf	postinc2,w,c
  9588  000A3A  6FCF               	movwf	(??_f_write+3)& (0+255),b
  9589  000A3C  51CC               	movf	??_f_write& (0+255),w,b
  9590  000A3E  11CD               	iorwf	(??_f_write+1)& (0+255),w,b
  9591  000A40  11CE               	iorwf	(??_f_write+2)& (0+255),w,b
  9592  000A42  11CF               	iorwf	(??_f_write+3)& (0+255),w,b
  9593  000A44  A4D8               	btfss	status,2,c
  9594  000A46  D166               	goto	l1331
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;tff.c: 1015: if (fp->csect >= fp->fs->csize) {
  9598  000A48  EE20 F004          	lfsr	2,4
  9599  000A4C  51C4               	movf	f_write@fp& (0+255),w,b
  9600  000A4E  26D9               	addwf	fsr2l,f,c
  9601  000A50  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9602  000A52  22DA               	addwfc	fsr2h,f,c
  9603  000A54  EE10 F01D          	lfsr	1,29
  9604  000A58  50DE               	movf	postinc2,w,c
  9605  000A5A  26E1               	addwf	fsr1l,f,c
  9606  000A5C  50DD               	movf	postdec2,w,c
  9607  000A5E  22E2               	addwfc	fsr1h,f,c
  9608  000A60  EE20 F003          	lfsr	2,3
  9609  000A64  51C4               	movf	f_write@fp& (0+255),w,b
  9610  000A66  26D9               	addwf	fsr2l,f,c
  9611  000A68  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9612  000A6A  22DA               	addwfc	fsr2h,f,c
  9613  000A6C  50E6               	movf	postinc1,w,c
  9614  000A6E  5CDE               	subwf	postinc2,w,c
  9615  000A70  A0D8               	btfss	status,0,c
  9616  000A72  D06D               	goto	l1332
  9617                           
  9618                           ; BSR set to: 0
  9619                           ;tff.c: 1016: if (fp->fptr == 0) {
  9620  000A74  EE20 F006          	lfsr	2,6
  9621  000A78  51C4               	movf	f_write@fp& (0+255),w,b
  9622  000A7A  26D9               	addwf	fsr2l,f,c
  9623  000A7C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9624  000A7E  22DA               	addwfc	fsr2h,f,c
  9625  000A80  50DE               	movf	postinc2,w,c
  9626  000A82  10DE               	iorwf	postinc2,w,c
  9627  000A84  10DE               	iorwf	postinc2,w,c
  9628  000A86  10DE               	iorwf	postinc2,w,c
  9629  000A88  A4D8               	btfss	status,2,c
  9630  000A8A  D024               	goto	l1333
  9631                           
  9632                           ; BSR set to: 0
  9633                           ;tff.c: 1017: clust = fp->org_clust;
  9634  000A8C  EE20 F00E          	lfsr	2,14
  9635  000A90  51C4               	movf	f_write@fp& (0+255),w,b
  9636  000A92  26D9               	addwf	fsr2l,f,c
  9637  000A94  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9638  000A96  22DA               	addwfc	fsr2h,f,c
  9639  000A98  CFDE F0E1          	movff	postinc2,f_write@clust
  9640  000A9C  CFDD F0E2          	movff	postdec2,f_write@clust+1
  9641                           
  9642                           ; BSR set to: 0
  9643                           ;tff.c: 1018: if (clust == 0)
  9644  000AA0  51E1               	movf	f_write@clust& (0+255),w,b
  9645  000AA2  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  9646  000AA4  A4D8               	btfss	status,2,c
  9647  000AA6  D026               	goto	l1335
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;tff.c: 1019: fp->org_clust = clust = create_chain(0);
  9651  000AA8  0E00               	movlw	0
  9652  000AAA  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
  9653  000AAC  0E00               	movlw	0
  9654  000AAE  6FB6               	movwf	create_chain@clust& (0+255),b
  9655  000AB0  EC1D  F01A         	call	_create_chain	;wreg free
  9656  000AB4  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  9657  000AB8  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  9658  000ABC  0100               	movlb	0	; () banked
  9659  000ABE  EE20 F00E          	lfsr	2,14
  9660  000AC2  51C4               	movf	f_write@fp& (0+255),w,b
  9661  000AC4  26D9               	addwf	fsr2l,f,c
  9662  000AC6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9663  000AC8  22DA               	addwfc	fsr2h,f,c
  9664  000ACA  C0E1  FFDE         	movff	f_write@clust,postinc2
  9665  000ACE  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  9666                           
  9667                           ; BSR set to: 0
  9668                           ;tff.c: 1020: } else {
  9669  000AD2  D010               	goto	l1335
  9670  000AD4                     l1333:
  9671                           
  9672                           ; BSR set to: 0
  9673                           ;tff.c: 1021: clust = create_chain(fp->curr_clust);
  9674                           
  9675                           ; BSR set to: 0
  9676  000AD4  EE20 F010          	lfsr	2,16
  9677  000AD8  51C4               	movf	f_write@fp& (0+255),w,b
  9678  000ADA  26D9               	addwf	fsr2l,f,c
  9679  000ADC  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9680  000ADE  22DA               	addwfc	fsr2h,f,c
  9681  000AE0  CFDE F0B6          	movff	postinc2,create_chain@clust
  9682  000AE4  CFDD F0B7          	movff	postdec2,create_chain@clust+1
  9683  000AE8  EC1D  F01A         	call	_create_chain	;wreg free
  9684  000AEC  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  9685  000AF0  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  9686  000AF4                     l1335:
  9687                           
  9688                           ;tff.c: 1022: }
  9689                           ;tff.c: 1023: if (clust == 0) break;
  9690  000AF4  0100               	movlb	0	; () banked
  9691  000AF6  51E1               	movf	f_write@clust& (0+255),w,b
  9692  000AF8  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  9693  000AFA  B4D8               	btfsc	status,2,c
  9694  000AFC  D1CC               	goto	u13700
  9695                           
  9696                           ; BSR set to: 0
  9697                           ;tff.c: 1024: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
  9698                           
  9699                           ; BSR set to: 0
  9700                           
  9701                           ; BSR set to: 0
  9702  000AFE  05E1               	decf	f_write@clust& (0+255),w,b
  9703  000B00  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  9704  000B02  B4D8               	btfsc	status,2,c
  9705  000B04  D1FB               	goto	l1341
  9706                           
  9707                           ; BSR set to: 0
  9708  000B06  EE20 F004          	lfsr	2,4
  9709  000B0A  51C4               	movf	f_write@fp& (0+255),w,b
  9710  000B0C  26D9               	addwf	fsr2l,f,c
  9711  000B0E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9712  000B10  22DA               	addwfc	fsr2h,f,c
  9713  000B12  EE10 F016          	lfsr	1,22
  9714  000B16  50DE               	movf	postinc2,w,c
  9715  000B18  26E1               	addwf	fsr1l,f,c
  9716  000B1A  50DD               	movf	postdec2,w,c
  9717  000B1C  22E2               	addwfc	fsr1h,f,c
  9718  000B1E  50E6               	movf	postinc1,w,c
  9719  000B20  5DE1               	subwf	f_write@clust& (0+255),w,b
  9720  000B22  50E6               	movf	postinc1,w,c
  9721  000B24  59E2               	subwfb	(f_write@clust+1)& (0+255),w,b
  9722  000B26  B0D8               	btfsc	status,0,c
  9723  000B28  D1E9               	goto	l1341
  9724                           
  9725                           ; BSR set to: 0
  9726                           ;tff.c: 1025: fp->curr_clust = clust;
  9727                           
  9728                           ; BSR set to: 0
  9729                           
  9730                           ; BSR set to: 0
  9731  000B2A  EE20 F010          	lfsr	2,16
  9732  000B2E  51C4               	movf	f_write@fp& (0+255),w,b
  9733  000B30  26D9               	addwf	fsr2l,f,c
  9734  000B32  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9735  000B34  22DA               	addwfc	fsr2h,f,c
  9736  000B36  C0E1  FFDE         	movff	f_write@clust,postinc2
  9737  000B3A  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  9738                           
  9739                           ;tff.c: 1026: fp->csect = 0;
  9740  000B3E  EE20 F003          	lfsr	2,3
  9741  000B42  51C4               	movf	f_write@fp& (0+255),w,b
  9742  000B44  26D9               	addwf	fsr2l,f,c
  9743  000B46  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9744  000B48  22DA               	addwfc	fsr2h,f,c
  9745  000B4A  0E00               	movlw	0
  9746  000B4C  6EDF               	movwf	indf2,c
  9747  000B4E                     l1332:
  9748                           
  9749                           ; BSR set to: 0
  9750                           ;tff.c: 1027: }
  9751                           ;tff.c: 1028: sect = clust2sect(fp->curr_clust) + fp->csect;
  9752                           
  9753                           ; BSR set to: 0
  9754  000B4E  EE20 F010          	lfsr	2,16
  9755  000B52  51C4               	movf	f_write@fp& (0+255),w,b
  9756  000B54  26D9               	addwf	fsr2l,f,c
  9757  000B56  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9758  000B58  22DA               	addwfc	fsr2h,f,c
  9759  000B5A  CFDE F06C          	movff	postinc2,clust2sect@clust
  9760  000B5E  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  9761  000B62  EC0B  F022         	call	_clust2sect	;wreg free
  9762  000B66  0100               	movlb	0	; () banked
  9763  000B68  EE20 F003          	lfsr	2,3
  9764  000B6C  51C4               	movf	f_write@fp& (0+255),w,b
  9765  000B6E  26D9               	addwf	fsr2l,f,c
  9766  000B70  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9767  000B72  22DA               	addwfc	fsr2h,f,c
  9768  000B74  50DF               	movf	indf2,w,c
  9769  000B76  6FCC               	movwf	??_f_write& (0+255),b
  9770  000B78  51CC               	movf	??_f_write& (0+255),w,b
  9771  000B7A  256C               	addwf	?_clust2sect& (0+255),w,b
  9772  000B7C  6FDB               	movwf	f_write@sect& (0+255),b
  9773  000B7E  0E00               	movlw	0
  9774  000B80  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  9775  000B82  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  9776  000B84  0E00               	movlw	0
  9777  000B86  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  9778  000B88  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  9779  000B8A  0E00               	movlw	0
  9780  000B8C  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  9781  000B8E  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  9782                           
  9783                           ; BSR set to: 0
  9784                           ;tff.c: 1029: cc = btw / 512U;
  9785  000B90  C0C8  F0CC         	movff	f_write@btw,??_f_write
  9786  000B94  C0C9  F0CD         	movff	f_write@btw+1,??_f_write+1
  9787  000B98  0E09               	movlw	9
  9788  000B9A  6FCE               	movwf	(??_f_write+2)& (0+255),b
  9789  000B9C                     u13615:
  9790  000B9C  90D8               	bcf	status,0,c
  9791  000B9E  33CD               	rrcf	(??_f_write+1)& (0+255),f,b
  9792  000BA0  33CC               	rrcf	??_f_write& (0+255),f,b
  9793  000BA2  2FCE               	decfsz	(??_f_write+2)& (0+255),f,b
  9794  000BA4  D7FB               	goto	u13615
  9795  000BA6  C0CC  F0DF         	movff	??_f_write,f_write@cc
  9796  000BAA  C0CD  F0E0         	movff	??_f_write+1,f_write@cc+1
  9797                           
  9798                           ; BSR set to: 0
  9799                           ;tff.c: 1030: if (cc) {
  9800  000BAE  51DF               	movf	f_write@cc& (0+255),w,b
  9801  000BB0  11E0               	iorwf	(f_write@cc+1)& (0+255),w,b
  9802  000BB2  B4D8               	btfsc	status,2,c
  9803  000BB4  D070               	goto	l1342
  9804                           
  9805                           ; BSR set to: 0
  9806                           ;tff.c: 1031: if (fp->csect + cc > fp->fs->csize)
  9807  000BB6  EE20 F003          	lfsr	2,3
  9808  000BBA  51C4               	movf	f_write@fp& (0+255),w,b
  9809  000BBC  26D9               	addwf	fsr2l,f,c
  9810  000BBE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9811  000BC0  22DA               	addwfc	fsr2h,f,c
  9812  000BC2  50DF               	movf	indf2,w,c
  9813  000BC4  6FCC               	movwf	??_f_write& (0+255),b
  9814  000BC6  51CC               	movf	??_f_write& (0+255),w,b
  9815  000BC8  25DF               	addwf	f_write@cc& (0+255),w,b
  9816  000BCA  6FCD               	movwf	(??_f_write+1)& (0+255),b
  9817  000BCC  0E00               	movlw	0
  9818  000BCE  21E0               	addwfc	(f_write@cc+1)& (0+255),w,b
  9819  000BD0  6FCE               	movwf	(??_f_write+2)& (0+255),b
  9820  000BD2  EE20 F004          	lfsr	2,4
  9821  000BD6  51C4               	movf	f_write@fp& (0+255),w,b
  9822  000BD8  26D9               	addwf	fsr2l,f,c
  9823  000BDA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9824  000BDC  22DA               	addwfc	fsr2h,f,c
  9825  000BDE  EE10 F01D          	lfsr	1,29
  9826  000BE2  50DE               	movf	postinc2,w,c
  9827  000BE4  26E1               	addwf	fsr1l,f,c
  9828  000BE6  50DD               	movf	postdec2,w,c
  9829  000BE8  22E2               	addwfc	fsr1h,f,c
  9830  000BEA  50E7               	movf	indf1,w,c
  9831  000BEC  6FCF               	movwf	(??_f_write+3)& (0+255),b
  9832  000BEE  6BD0               	clrf	(??_f_write+4)& (0+255),b
  9833  000BF0  51CD               	movf	(??_f_write+1)& (0+255),w,b
  9834  000BF2  5DCF               	subwf	(??_f_write+3)& (0+255),w,b
  9835  000BF4  51CE               	movf	(??_f_write+2)& (0+255),w,b
  9836  000BF6  59D0               	subwfb	(??_f_write+4)& (0+255),w,b
  9837  000BF8  B0D8               	btfsc	status,0,c
  9838  000BFA  D021               	goto	l1343
  9839                           
  9840                           ; BSR set to: 0
  9841                           ;tff.c: 1032: cc = fp->fs->csize - fp->csect;
  9842  000BFC  EE20 F003          	lfsr	2,3
  9843  000C00  51C4               	movf	f_write@fp& (0+255),w,b
  9844  000C02  26D9               	addwf	fsr2l,f,c
  9845  000C04  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9846  000C06  22DA               	addwfc	fsr2h,f,c
  9847  000C08  50DF               	movf	indf2,w,c
  9848  000C0A  6FCC               	movwf	??_f_write& (0+255),b
  9849  000C0C  6BCD               	clrf	(??_f_write+1)& (0+255),b
  9850  000C0E  1FCC               	comf	??_f_write& (0+255),f,b
  9851  000C10  1FCD               	comf	(??_f_write+1)& (0+255),f,b
  9852  000C12  4BCC               	infsnz	??_f_write& (0+255),f,b
  9853  000C14  2BCD               	incf	(??_f_write+1)& (0+255),f,b
  9854  000C16  EE20 F004          	lfsr	2,4
  9855  000C1A  51C4               	movf	f_write@fp& (0+255),w,b
  9856  000C1C  26D9               	addwf	fsr2l,f,c
  9857  000C1E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9858  000C20  22DA               	addwfc	fsr2h,f,c
  9859  000C22  EE10 F01D          	lfsr	1,29
  9860  000C26  50DE               	movf	postinc2,w,c
  9861  000C28  26E1               	addwf	fsr1l,f,c
  9862  000C2A  50DD               	movf	postdec2,w,c
  9863  000C2C  22E2               	addwfc	fsr1h,f,c
  9864  000C2E  50E7               	movf	indf1,w,c
  9865  000C30  6FCE               	movwf	(??_f_write+2)& (0+255),b
  9866  000C32  51CE               	movf	(??_f_write+2)& (0+255),w,b
  9867  000C34  25CC               	addwf	??_f_write& (0+255),w,b
  9868  000C36  6FDF               	movwf	f_write@cc& (0+255),b
  9869  000C38  0E00               	movlw	0
  9870  000C3A  21CD               	addwfc	(??_f_write+1)& (0+255),w,b
  9871  000C3C  6FE0               	movwf	(f_write@cc+1)& (0+255),b
  9872  000C3E                     l1343:
  9873                           
  9874                           ; BSR set to: 0
  9875                           ;tff.c: 1033: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
  9876                           
  9877                           ; BSR set to: 0
  9878  000C3E  C0D9  F07F         	movff	f_write@wbuff,disk_write@buff
  9879  000C42  C0DA  F080         	movff	f_write@wbuff+1,disk_write@buff+1
  9880  000C46  C0DB  F081         	movff	f_write@sect,disk_write@sector
  9881  000C4A  C0DC  F082         	movff	f_write@sect+1,disk_write@sector+1
  9882  000C4E  C0DD  F083         	movff	f_write@sect+2,disk_write@sector+2
  9883  000C52  C0DE  F084         	movff	f_write@sect+3,disk_write@sector+3
  9884  000C56  C0DF  F085         	movff	f_write@cc,disk_write@count
  9885  000C5A  0E00               	movlw	0
  9886  000C5C  ECB9  F025         	call	_disk_write
  9887  000C60  0900               	iorlw	0
  9888  000C62  A4D8               	btfss	status,2,c
  9889  000C64  D14B               	goto	l1341
  9890                           
  9891                           ;tff.c: 1035: fp->csect += (BYTE)cc;
  9892                           
  9893                           ;tff.c: 1034: goto fw_error;
  9894  000C66  0100               	movlb	0	; () banked
  9895  000C68  EE20 F003          	lfsr	2,3
  9896  000C6C  51C4               	movf	f_write@fp& (0+255),w,b
  9897  000C6E  26D9               	addwf	fsr2l,f,c
  9898  000C70  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9899  000C72  22DA               	addwfc	fsr2h,f,c
  9900  000C74  51DF               	movf	f_write@cc& (0+255),w,b
  9901  000C76  26DF               	addwf	indf2,f,c
  9902                           
  9903                           ; BSR set to: 0
  9904                           ;tff.c: 1036: wcnt = 512U * cc;
  9905  000C78  C0DF  F0CC         	movff	f_write@cc,??_f_write
  9906  000C7C  C0E0  F0CD         	movff	f_write@cc+1,??_f_write+1
  9907  000C80  0E09               	movlw	9
  9908  000C82                     u13655:
  9909  000C82  90D8               	bcf	status,0,c
  9910  000C84  37CC               	rlcf	??_f_write& (0+255),f,b
  9911  000C86  37CD               	rlcf	(??_f_write+1)& (0+255),f,b
  9912  000C88  2EE8               	decfsz	wreg,f,c
  9913  000C8A  D7FB               	goto	u13655
  9914  000C8C  C0CC  F0E3         	movff	??_f_write,f_write@wcnt
  9915  000C90  C0CD  F0E4         	movff	??_f_write+1,f_write@wcnt+1
  9916                           
  9917                           ;tff.c: 1037: continue;
  9918  000C94  D0DF               	goto	l1345
  9919  000C96                     l1342:
  9920                           
  9921                           ; BSR set to: 0
  9922                           ;tff.c: 1038: }
  9923                           ;tff.c: 1039: if (fp->fptr >= fp->fsize) {
  9924                           
  9925                           ; BSR set to: 0
  9926  000C96  EE20 F00A          	lfsr	2,10
  9927  000C9A  51C4               	movf	f_write@fp& (0+255),w,b
  9928  000C9C  26D9               	addwf	fsr2l,f,c
  9929  000C9E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9930  000CA0  22DA               	addwfc	fsr2h,f,c
  9931  000CA2  EE10 F006          	lfsr	1,6
  9932  000CA6  51C4               	movf	f_write@fp& (0+255),w,b
  9933  000CA8  26E1               	addwf	fsr1l,f,c
  9934  000CAA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9935  000CAC  22E2               	addwfc	fsr1h,f,c
  9936  000CAE  50DE               	movf	postinc2,w,c
  9937  000CB0  5CE6               	subwf	postinc1,w,c
  9938  000CB2  50DE               	movf	postinc2,w,c
  9939  000CB4  58E6               	subwfb	postinc1,w,c
  9940  000CB6  50DE               	movf	postinc2,w,c
  9941  000CB8  58E6               	subwfb	postinc1,w,c
  9942  000CBA  50DE               	movf	postinc2,w,c
  9943  000CBC  58E6               	subwfb	postinc1,w,c
  9944  000CBE  A0D8               	btfss	status,0,c
  9945  000CC0  D022               	goto	l1346
  9946                           
  9947                           ; BSR set to: 0
  9948                           ;tff.c: 1040: if (!move_window(0)) goto fw_error;
  9949  000CC2  0E00               	movlw	0
  9950  000CC4  6F8B               	movwf	move_window@sector& (0+255),b
  9951  000CC6  0E00               	movlw	0
  9952  000CC8  6F8C               	movwf	(move_window@sector+1)& (0+255),b
  9953  000CCA  0E00               	movlw	0
  9954  000CCC  6F8D               	movwf	(move_window@sector+2)& (0+255),b
  9955  000CCE  0E00               	movlw	0
  9956  000CD0  6F8E               	movwf	(move_window@sector+3)& (0+255),b
  9957  000CD2  ECFD  F01A         	call	_move_window	;wreg free
  9958  000CD6  0900               	iorlw	0
  9959  000CD8  B4D8               	btfsc	status,2,c
  9960  000CDA  D110               	goto	l1341
  9961                           
  9962                           ;tff.c: 1041: fp->fs->winsect = sect;
  9963  000CDC  0100               	movlb	0	; () banked
  9964  000CDE  EE20 F004          	lfsr	2,4
  9965  000CE2  51C4               	movf	f_write@fp& (0+255),w,b
  9966  000CE4  26D9               	addwf	fsr2l,f,c
  9967  000CE6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9968  000CE8  22DA               	addwfc	fsr2h,f,c
  9969  000CEA  EE10 F004          	lfsr	1,4
  9970  000CEE  50DE               	movf	postinc2,w,c
  9971  000CF0  26E1               	addwf	fsr1l,f,c
  9972  000CF2  50DD               	movf	postdec2,w,c
  9973  000CF4  22E2               	addwfc	fsr1h,f,c
  9974  000CF6  C0DB  FFE6         	movff	f_write@sect,postinc1
  9975  000CFA  C0DC  FFE6         	movff	f_write@sect+1,postinc1
  9976  000CFE  C0DD  FFE6         	movff	f_write@sect+2,postinc1
  9977  000D02  C0DE  FFE6         	movff	f_write@sect+3,postinc1
  9978  000D06                     l1346:
  9979                           
  9980                           ; BSR set to: 0
  9981                           ;tff.c: 1042: }
  9982                           ;tff.c: 1043: fp->csect++;
  9983                           
  9984                           ; BSR set to: 0
  9985  000D06  EE20 F003          	lfsr	2,3
  9986  000D0A  51C4               	movf	f_write@fp& (0+255),w,b
  9987  000D0C  26D9               	addwf	fsr2l,f,c
  9988  000D0E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9989  000D10  22DA               	addwfc	fsr2h,f,c
  9990  000D12  2ADF               	incf	indf2,f,c
  9991  000D14                     l1331:
  9992                           
  9993                           ; BSR set to: 0
  9994                           ;tff.c: 1044: }
  9995                           ;tff.c: 1045: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  9996                           
  9997                           ; BSR set to: 0
  9998  000D14  EE20 F010          	lfsr	2,16
  9999  000D18  51C4               	movf	f_write@fp& (0+255),w,b
 10000  000D1A  26D9               	addwf	fsr2l,f,c
 10001  000D1C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10002  000D1E  22DA               	addwfc	fsr2h,f,c
 10003  000D20  CFDE F06C          	movff	postinc2,clust2sect@clust
 10004  000D24  CFDD F06D          	movff	postdec2,clust2sect@clust+1
 10005  000D28  EC0B  F022         	call	_clust2sect	;wreg free
 10006  000D2C  0100               	movlb	0	; () banked
 10007  000D2E  EE20 F003          	lfsr	2,3
 10008  000D32  51C4               	movf	f_write@fp& (0+255),w,b
 10009  000D34  26D9               	addwf	fsr2l,f,c
 10010  000D36  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10011  000D38  22DA               	addwfc	fsr2h,f,c
 10012  000D3A  50DF               	movf	indf2,w,c
 10013  000D3C  6FCC               	movwf	??_f_write& (0+255),b
 10014  000D3E  51CC               	movf	??_f_write& (0+255),w,b
 10015  000D40  256C               	addwf	?_clust2sect& (0+255),w,b
 10016  000D42  6FCD               	movwf	(??_f_write+1)& (0+255),b
 10017  000D44  0E00               	movlw	0
 10018  000D46  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
 10019  000D48  6FCE               	movwf	(??_f_write+2)& (0+255),b
 10020  000D4A  0E00               	movlw	0
 10021  000D4C  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
 10022  000D4E  6FCF               	movwf	(??_f_write+3)& (0+255),b
 10023  000D50  0E00               	movlw	0
 10024  000D52  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
 10025  000D54  6FD0               	movwf	(??_f_write+4)& (0+255),b
 10026  000D56  0EFF               	movlw	255
 10027  000D58  25CD               	addwf	(??_f_write+1)& (0+255),w,b
 10028  000D5A  6FDB               	movwf	f_write@sect& (0+255),b
 10029  000D5C  0EFF               	movlw	255
 10030  000D5E  21CE               	addwfc	(??_f_write+2)& (0+255),w,b
 10031  000D60  6FDC               	movwf	(f_write@sect+1)& (0+255),b
 10032  000D62  0EFF               	movlw	255
 10033  000D64  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
 10034  000D66  6FDD               	movwf	(f_write@sect+2)& (0+255),b
 10035  000D68  0EFF               	movlw	255
 10036  000D6A  21D0               	addwfc	(??_f_write+4)& (0+255),w,b
 10037  000D6C  6FDE               	movwf	(f_write@sect+3)& (0+255),b
 10038                           
 10039                           ; BSR set to: 0
 10040                           ;tff.c: 1046: if (!move_window(sect)) goto fw_error;
 10041  000D6E  C0DB  F08B         	movff	f_write@sect,move_window@sector
 10042  000D72  C0DC  F08C         	movff	f_write@sect+1,move_window@sector+1
 10043  000D76  C0DD  F08D         	movff	f_write@sect+2,move_window@sector+2
 10044  000D7A  C0DE  F08E         	movff	f_write@sect+3,move_window@sector+3
 10045  000D7E  ECFD  F01A         	call	_move_window	;wreg free
 10046  000D82  0900               	iorlw	0
 10047  000D84  B4D8               	btfsc	status,2,c
 10048  000D86  D0BA               	goto	l1341
 10049                           
 10050                           ;tff.c: 1047: wcnt = 512U - (fp->fptr % 512U);
 10051  000D88  0EFF               	movlw	255
 10052  000D8A  0100               	movlb	0	; () banked
 10053  000D8C  6FCC               	movwf	??_f_write& (0+255),b
 10054  000D8E  0E01               	movlw	1
 10055  000D90  6FCD               	movwf	(??_f_write+1)& (0+255),b
 10056  000D92  EE20 F006          	lfsr	2,6
 10057  000D96  51C4               	movf	f_write@fp& (0+255),w,b
 10058  000D98  26D9               	addwf	fsr2l,f,c
 10059  000D9A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10060  000D9C  22DA               	addwfc	fsr2h,f,c
 10061  000D9E  CFDE F0CE          	movff	postinc2,??_f_write+2
 10062  000DA2  CFDD F0CF          	movff	postdec2,??_f_write+3
 10063  000DA6  51CC               	movf	??_f_write& (0+255),w,b
 10064  000DA8  17CE               	andwf	(??_f_write+2)& (0+255),f,b
 10065  000DAA  51CD               	movf	(??_f_write+1)& (0+255),w,b
 10066  000DAC  17CF               	andwf	(??_f_write+3)& (0+255),f,b
 10067  000DAE  1FCE               	comf	(??_f_write+2)& (0+255),f,b
 10068  000DB0  1FCF               	comf	(??_f_write+3)& (0+255),f,b
 10069  000DB2  4BCE               	infsnz	(??_f_write+2)& (0+255),f,b
 10070  000DB4  2BCF               	incf	(??_f_write+3)& (0+255),f,b
 10071  000DB6  0E00               	movlw	0
 10072  000DB8  25CE               	addwf	(??_f_write+2)& (0+255),w,b
 10073  000DBA  6FE3               	movwf	f_write@wcnt& (0+255),b
 10074  000DBC  0E02               	movlw	2
 10075  000DBE  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
 10076  000DC0  6FE4               	movwf	(f_write@wcnt+1)& (0+255),b
 10077                           
 10078                           ; BSR set to: 0
 10079                           ;tff.c: 1048: if (wcnt > btw) wcnt = btw;
 10080  000DC2  51E3               	movf	f_write@wcnt& (0+255),w,b
 10081  000DC4  5DC8               	subwf	f_write@btw& (0+255),w,b
 10082  000DC6  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 10083  000DC8  59C9               	subwfb	(f_write@btw+1)& (0+255),w,b
 10084  000DCA  B0D8               	btfsc	status,0,c
 10085  000DCC  D004               	goto	l1349
 10086                           
 10087                           ; BSR set to: 0
 10088  000DCE  C0C8  F0E3         	movff	f_write@btw,f_write@wcnt
 10089  000DD2  C0C9  F0E4         	movff	f_write@btw+1,f_write@wcnt+1
 10090  000DD6                     l1349:
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;tff.c: 1049: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
 10094                           
 10095                           ; BSR set to: 0
 10096  000DD6  0EFF               	movlw	255
 10097  000DD8  6FCC               	movwf	??_f_write& (0+255),b
 10098  000DDA  0E01               	movlw	1
 10099  000DDC  6FCD               	movwf	(??_f_write+1)& (0+255),b
 10100  000DDE  EE20 F006          	lfsr	2,6
 10101  000DE2  51C4               	movf	f_write@fp& (0+255),w,b
 10102  000DE4  26D9               	addwf	fsr2l,f,c
 10103  000DE6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10104  000DE8  22DA               	addwfc	fsr2h,f,c
 10105  000DEA  CFDE F0CE          	movff	postinc2,??_f_write+2
 10106  000DEE  CFDD F0CF          	movff	postdec2,??_f_write+3
 10107  000DF2  51CC               	movf	??_f_write& (0+255),w,b
 10108  000DF4  17CE               	andwf	(??_f_write+2)& (0+255),f,b
 10109  000DF6  51CD               	movf	(??_f_write+1)& (0+255),w,b
 10110  000DF8  17CF               	andwf	(??_f_write+3)& (0+255),f,b
 10111  000DFA  0E20               	movlw	32
 10112  000DFC  27CE               	addwf	(??_f_write+2)& (0+255),f,b
 10113  000DFE  0E00               	movlw	0
 10114  000E00  23CF               	addwfc	(??_f_write+3)& (0+255),f,b
 10115  000E02  EE20 F004          	lfsr	2,4
 10116  000E06  51C4               	movf	f_write@fp& (0+255),w,b
 10117  000E08  26D9               	addwf	fsr2l,f,c
 10118  000E0A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10119  000E0C  22DA               	addwfc	fsr2h,f,c
 10120  000E0E  CFDE F0D0          	movff	postinc2,??_f_write+4
 10121  000E12  CFDD F0D1          	movff	postdec2,??_f_write+5
 10122  000E16  51CE               	movf	(??_f_write+2)& (0+255),w,b
 10123  000E18  25D0               	addwf	(??_f_write+4)& (0+255),w,b
 10124  000E1A  6F60               	movwf	memcpy@d1& (0+255),b
 10125  000E1C  51CF               	movf	(??_f_write+3)& (0+255),w,b
 10126  000E1E  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
 10127  000E20  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 10128  000E22  C0D9  F062         	movff	f_write@wbuff,memcpy@s1
 10129  000E26  C0DA  F063         	movff	f_write@wbuff+1,memcpy@s1+1
 10130  000E2A  C0E3  F064         	movff	f_write@wcnt,memcpy@n
 10131  000E2E  C0E4  F065         	movff	f_write@wcnt+1,memcpy@n+1
 10132  000E32  EC5E  F029         	call	_memcpy	;wreg free
 10133                           
 10134                           ;tff.c: 1050: fp->fs->winflag = 1;
 10135  000E36  0100               	movlb	0	; () banked
 10136  000E38  EE20 F004          	lfsr	2,4
 10137  000E3C  51C4               	movf	f_write@fp& (0+255),w,b
 10138  000E3E  26D9               	addwf	fsr2l,f,c
 10139  000E40  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10140  000E42  22DA               	addwfc	fsr2h,f,c
 10141  000E44  EE10 F01F          	lfsr	1,31
 10142  000E48  50DE               	movf	postinc2,w,c
 10143  000E4A  26E1               	addwf	fsr1l,f,c
 10144  000E4C  50DD               	movf	postdec2,w,c
 10145  000E4E  22E2               	addwfc	fsr1h,f,c
 10146  000E50  0E01               	movlw	1
 10147  000E52  6EE7               	movwf	indf1,c
 10148  000E54                     l1345:
 10149                           
 10150                           ; BSR set to: 0
 10151                           
 10152                           ; BSR set to: 0
 10153  000E54  51E3               	movf	f_write@wcnt& (0+255),w,b
 10154  000E56  27D9               	addwf	f_write@wbuff& (0+255),f,b
 10155  000E58  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 10156  000E5A  23DA               	addwfc	(f_write@wbuff+1)& (0+255),f,b
 10157                           
 10158                           ; BSR set to: 0
 10159  000E5C  EE20 F006          	lfsr	2,6
 10160  000E60  51C4               	movf	f_write@fp& (0+255),w,b
 10161  000E62  26D9               	addwf	fsr2l,f,c
 10162  000E64  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10163  000E66  22DA               	addwfc	fsr2h,f,c
 10164  000E68  51E3               	movf	f_write@wcnt& (0+255),w,b
 10165  000E6A  26DE               	addwf	postinc2,f,c
 10166  000E6C  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 10167  000E6E  22DE               	addwfc	postinc2,f,c
 10168  000E70  0E00               	movlw	0
 10169  000E72  22DE               	addwfc	postinc2,f,c
 10170  000E74  22DE               	addwfc	postinc2,f,c
 10171                           
 10172                           ; BSR set to: 0
 10173  000E76  C0CA  FFD9         	movff	f_write@bw,fsr2l
 10174  000E7A  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
 10175  000E7E  51E3               	movf	f_write@wcnt& (0+255),w,b
 10176  000E80  26DE               	addwf	postinc2,f,c
 10177  000E82  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 10178  000E84  22DD               	addwfc	postdec2,f,c
 10179                           
 10180                           ; BSR set to: 0
 10181  000E86  51E3               	movf	f_write@wcnt& (0+255),w,b
 10182  000E88  5FC8               	subwf	f_write@btw& (0+255),f,b
 10183  000E8A  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 10184  000E8C  5BC9               	subwfb	(f_write@btw+1)& (0+255),f,b
 10185  000E8E                     l1329:
 10186                           
 10187                           ; BSR set to: 0
 10188                           
 10189                           ; BSR set to: 0
 10190  000E8E  51C8               	movf	f_write@btw& (0+255),w,b
 10191  000E90  11C9               	iorwf	(f_write@btw+1)& (0+255),w,b
 10192  000E92  A4D8               	btfss	status,2,c
 10193  000E94  D5C1               	goto	l1330
 10194  000E96                     u13700:
 10195                           
 10196                           ; BSR set to: 0
 10197                           ;tff.c: 1051: }
 10198                           ;tff.c: 1053: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
 10199                           
 10200                           ; BSR set to: 0
 10201  000E96  EE20 F006          	lfsr	2,6
 10202  000E9A  51C4               	movf	f_write@fp& (0+255),w,b
 10203  000E9C  26D9               	addwf	fsr2l,f,c
 10204  000E9E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10205  000EA0  22DA               	addwfc	fsr2h,f,c
 10206  000EA2  EE10 F00A          	lfsr	1,10
 10207  000EA6  51C4               	movf	f_write@fp& (0+255),w,b
 10208  000EA8  26E1               	addwf	fsr1l,f,c
 10209  000EAA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10210  000EAC  22E2               	addwfc	fsr1h,f,c
 10211  000EAE  50DE               	movf	postinc2,w,c
 10212  000EB0  5CE6               	subwf	postinc1,w,c
 10213  000EB2  50DE               	movf	postinc2,w,c
 10214  000EB4  58E6               	subwfb	postinc1,w,c
 10215  000EB6  50DE               	movf	postinc2,w,c
 10216  000EB8  58E6               	subwfb	postinc1,w,c
 10217  000EBA  50DE               	movf	postinc2,w,c
 10218  000EBC  58E6               	subwfb	postinc1,w,c
 10219  000EBE  B0D8               	btfsc	status,0,c
 10220  000EC0  D014               	goto	l1350
 10221                           
 10222                           ; BSR set to: 0
 10223  000EC2  EE20 F006          	lfsr	2,6
 10224  000EC6  51C4               	movf	f_write@fp& (0+255),w,b
 10225  000EC8  26D9               	addwf	fsr2l,f,c
 10226  000ECA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10227  000ECC  22DA               	addwfc	fsr2h,f,c
 10228  000ECE  EE10 F00A          	lfsr	1,10
 10229  000ED2  51C4               	movf	f_write@fp& (0+255),w,b
 10230  000ED4  26E1               	addwf	fsr1l,f,c
 10231  000ED6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10232  000ED8  22E2               	addwfc	fsr1h,f,c
 10233  000EDA  CFDE FFE6          	movff	postinc2,postinc1
 10234  000EDE  CFDE FFE6          	movff	postinc2,postinc1
 10235  000EE2  CFDE FFE6          	movff	postinc2,postinc1
 10236  000EE6  CFDE FFE6          	movff	postinc2,postinc1
 10237  000EEA                     l1350:
 10238                           
 10239                           ; BSR set to: 0
 10240                           ;tff.c: 1054: fp->flag |= 0x20;
 10241                           
 10242                           ; BSR set to: 0
 10243  000EEA  EE20 F002          	lfsr	2,2
 10244  000EEE  51C4               	movf	f_write@fp& (0+255),w,b
 10245  000EF0  26D9               	addwf	fsr2l,f,c
 10246  000EF2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10247  000EF4  22DA               	addwfc	fsr2h,f,c
 10248  000EF6  0E00               	movlw	0
 10249  000EF8  8ADB               	bsf	plusw2,5,c
 10250                           
 10251                           ; BSR set to: 0
 10252                           ;tff.c: 1055: return res;
 10253                           ;	Return value of _f_write is never used
 10254  000EFA  0012               	return	
 10255  000EFC                     l1341:
 10256                           
 10257                           ;tff.c: 1058: fp->flag |= 0x80;
 10258                           
 10259                           ; BSR set to: 0
 10260  000EFC  0100               	movlb	0	; () banked
 10261  000EFE  EE20 F002          	lfsr	2,2
 10262  000F02  51C4               	movf	f_write@fp& (0+255),w,b
 10263  000F04  26D9               	addwf	fsr2l,f,c
 10264  000F06  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 10265  000F08  22DA               	addwfc	fsr2h,f,c
 10266  000F0A  0E00               	movlw	0
 10267  000F0C  8EDB               	bsf	plusw2,7,c
 10268  000F0E  0012               	return	
 10269  000F10                     __end_of_f_write:
 10270                           	opt stack 0
 10271                           tosu	equ	0xFFF
 10272                           tosh	equ	0xFFE
 10273                           tosl	equ	0xFFD
 10274                           pclath	equ	0xFFA
 10275                           tblptru	equ	0xFF8
 10276                           tblptrh	equ	0xFF7
 10277                           tblptrl	equ	0xFF6
 10278                           tablat	equ	0xFF5
 10279                           prodh	equ	0xFF4
 10280                           prodl	equ	0xFF3
 10281                           intcon	equ	0xFF2
 10282                           intcon2	equ	0xFF1
 10283                           intcon3	equ	0xFF0
 10284                           indf0	equ	0xFEF
 10285                           postinc0	equ	0xFEE
 10286                           fsr0h	equ	0xFEA
 10287                           fsr0l	equ	0xFE9
 10288                           wreg	equ	0xFE8
 10289                           indf1	equ	0xFE7
 10290                           postinc1	equ	0xFE6
 10291                           postdec1	equ	0xFE5
 10292                           plusw1	equ	0xFE3
 10293                           fsr1h	equ	0xFE2
 10294                           fsr1l	equ	0xFE1
 10295                           indf2	equ	0xFDF
 10296                           postinc2	equ	0xFDE
 10297                           postdec2	equ	0xFDD
 10298                           plusw2	equ	0xFDB
 10299                           fsr2h	equ	0xFDA
 10300                           fsr2l	equ	0xFD9
 10301                           status	equ	0xFD8
 10302                           
 10303 ;; *************** function ___llmod *****************
 10304 ;; Defined at:
 10305 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 10306 ;; Parameters:    Size  Location     Type
 10307 ;;  dividend        4    0[BANK0 ] unsigned long 
 10308 ;;  divisor         4    4[BANK0 ] unsigned long 
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;  counter         1    8[BANK0 ] unsigned char 
 10311 ;; Return value:  Size  Location     Type
 10312 ;;                  4    0[BANK0 ] unsigned long 
 10313 ;; Registers used:
 10314 ;;		wreg, status,2, status,0
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10320 ;;      Params:         0       8       0       0       0       0       0       0       0
 10321 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10322 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10323 ;;      Totals:         0       9       0       0       0       0       0       0       0
 10324 ;;Total ram usage:        9 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; Hardware stack levels required when called:    3
 10327 ;; This function calls:
 10328 ;;		Nothing
 10329 ;; This function is called by:
 10330 ;;		_fprintf
 10331 ;; This function uses a non-reentrant model
 10332 ;;
 10333                           
 10334                           	psect	text36
 10335  004F56                     __ptext36:
 10336                           	opt stack 0
 10337  004F56                     ___llmod:
 10338                           	opt stack 23
 10339                           
 10340                           ; BSR set to: 0
 10341                           ;incstack = 0
 10342  004F56  0100               	movlb	0	; () banked
 10343  004F58  5164               	movf	___llmod@divisor& (0+255),w,b
 10344  004F5A  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 10345  004F5C  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 10346  004F5E  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 10347  004F60  B4D8               	btfsc	status,2,c
 10348  004F62  D024               	goto	l1914
 10349                           
 10350                           ; BSR set to: 0
 10351  004F64  0E01               	movlw	1
 10352  004F66  6F68               	movwf	___llmod@counter& (0+255),b
 10353  004F68  D006               	goto	l1909
 10354  004F6A                     
 10355                           ; BSR set to: 0
 10356                           
 10357                           ; BSR set to: 0
 10358  004F6A  90D8               	bcf	status,0,c
 10359  004F6C  3764               	rlcf	___llmod@divisor& (0+255),f,b
 10360  004F6E  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 10361  004F70  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 10362  004F72  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 10363  004F74  2B68               	incf	___llmod@counter& (0+255),f,b
 10364  004F76                     l1909:
 10365                           
 10366                           ; BSR set to: 0
 10367                           
 10368                           ; BSR set to: 0
 10369  004F76  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 10370  004F78  D7F8               	goto	l1910
 10371  004F7A                     u15070:
 10372                           
 10373                           ; BSR set to: 0
 10374                           
 10375                           ; BSR set to: 0
 10376                           
 10377                           ; BSR set to: 0
 10378  004F7A  5164               	movf	___llmod@divisor& (0+255),w,b
 10379  004F7C  5D60               	subwf	___llmod@dividend& (0+255),w,b
 10380  004F7E  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 10381  004F80  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 10382  004F82  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 10383  004F84  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 10384  004F86  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 10385  004F88  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 10386  004F8A  A0D8               	btfss	status,0,c
 10387  004F8C  D008               	goto	l1913
 10388                           
 10389                           ; BSR set to: 0
 10390  004F8E  5164               	movf	___llmod@divisor& (0+255),w,b
 10391  004F90  5F60               	subwf	___llmod@dividend& (0+255),f,b
 10392  004F92  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 10393  004F94  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 10394  004F96  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 10395  004F98  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 10396  004F9A  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 10397  004F9C  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 10398  004F9E                     l1913:
 10399                           
 10400                           ; BSR set to: 0
 10401                           
 10402                           ; BSR set to: 0
 10403  004F9E  90D8               	bcf	status,0,c
 10404  004FA0  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 10405  004FA2  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 10406  004FA4  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 10407  004FA6  3364               	rrcf	___llmod@divisor& (0+255),f,b
 10408                           
 10409                           ; BSR set to: 0
 10410  004FA8  2F68               	decfsz	___llmod@counter& (0+255),f,b
 10411  004FAA  D7E7               	goto	u15070
 10412  004FAC                     l1914:
 10413                           
 10414                           ; BSR set to: 0
 10415                           
 10416                           ; BSR set to: 0
 10417  004FAC  C060  F060         	movff	___llmod@dividend,?___llmod
 10418  004FB0  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 10419  004FB4  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 10420  004FB8  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 10421                           
 10422                           ; BSR set to: 0
 10423  004FBC  0012               	return		;funcret
 10424  004FBE                     __end_of___llmod:
 10425                           	opt stack 0
 10426                           tosu	equ	0xFFF
 10427                           tosh	equ	0xFFE
 10428                           tosl	equ	0xFFD
 10429                           pclath	equ	0xFFA
 10430                           tblptru	equ	0xFF8
 10431                           tblptrh	equ	0xFF7
 10432                           tblptrl	equ	0xFF6
 10433                           tablat	equ	0xFF5
 10434                           prodh	equ	0xFF4
 10435                           prodl	equ	0xFF3
 10436                           intcon	equ	0xFF2
 10437                           intcon2	equ	0xFF1
 10438                           intcon3	equ	0xFF0
 10439                           indf0	equ	0xFEF
 10440                           postinc0	equ	0xFEE
 10441                           fsr0h	equ	0xFEA
 10442                           fsr0l	equ	0xFE9
 10443                           wreg	equ	0xFE8
 10444                           indf1	equ	0xFE7
 10445                           postinc1	equ	0xFE6
 10446                           postdec1	equ	0xFE5
 10447                           plusw1	equ	0xFE3
 10448                           fsr1h	equ	0xFE2
 10449                           fsr1l	equ	0xFE1
 10450                           indf2	equ	0xFDF
 10451                           postinc2	equ	0xFDE
 10452                           postdec2	equ	0xFDD
 10453                           plusw2	equ	0xFDB
 10454                           fsr2h	equ	0xFDA
 10455                           fsr2l	equ	0xFD9
 10456                           status	equ	0xFD8
 10457                           
 10458 ;; *************** function _f_open *****************
 10459 ;; Defined at:
 10460 ;;		line 825 in file "bibliotecas/tff.c"
 10461 ;; Parameters:    Size  Location     Type
 10462 ;;  fp              2  119[BANK0 ] PTR struct _FIL
 10463 ;;		 -> fil(28), 
 10464 ;;  path            2  121[BANK0 ] PTR const unsigned char 
 10465 ;;		 -> STR_27(13), filename(15), 
 10466 ;;  mode            1  123[BANK0 ] unsigned char 
 10467 ;; Auto vars:     Size  Location     Type
 10468 ;;  dw              4   14[BANK1 ] unsigned long 
 10469 ;;  rs              2   12[BANK1 ] unsigned short 
 10470 ;;  dj             14   21[BANK1 ] struct _DIR_E
 10471 ;;  fn             12    0[BANK1 ] unsigned char [12]
 10472 ;;  dir             2   19[BANK1 ] PTR unsigned char 
 10473 ;;		 -> NULL(0), fs(544), 
 10474 ;;  res             1   18[BANK1 ] enum E155
 10475 ;; Return value:  Size  Location     Type
 10476 ;;                  1    wreg      enum E3978
 10477 ;; Registers used:
 10478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10479 ;; Tracked objects:
 10480 ;;		On entry : 0/0
 10481 ;;		On exit  : 0/0
 10482 ;;		Unchanged: 0/0
 10483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10484 ;;      Params:         0       5       0       0       0       0       0       0       0
 10485 ;;      Locals:         0       0      35       0       0       0       0       0       0
 10486 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10487 ;;      Totals:         0       9      35       0       0       0       0       0       0
 10488 ;;Total ram usage:       44 bytes
 10489 ;; Hardware stack levels used:    1
 10490 ;; Hardware stack levels required when called:   12
 10491 ;; This function calls:
 10492 ;;		_auto_mount
 10493 ;;		_get_fattime
 10494 ;;		_memcpy
 10495 ;;		_memset
 10496 ;;		_move_window
 10497 ;;		_remove_chain
 10498 ;;		_reserve_direntry
 10499 ;;		_trace_path
 10500 ;; This function is called by:
 10501 ;;		_escrita_sdcard
 10502 ;;		_sdcard_init
 10503 ;;		_leitura_sdcard
 10504 ;; This function uses a non-reentrant model
 10505 ;;
 10506                           
 10507                           	psect	text37
 10508  001CA0                     __ptext37:
 10509                           	opt stack 0
 10510  001CA0                     _f_open:
 10511                           	opt stack 15
 10512                           
 10513                           ;tff.c: 831: FRESULT res;
 10514                           ;tff.c: 832: DIR_E dj;
 10515                           ;tff.c: 833: BYTE *dir;
 10516                           ;tff.c: 834: char fn[8+3+1];
 10517                           ;tff.c: 837: fp->fs = (0);
 10518                           
 10519                           ; BSR set to: 0
 10520                           ;incstack = 0
 10521  001CA0  0100               	movlb	0	; () banked
 10522  001CA2  EE20 F004          	lfsr	2,4
 10523  001CA6  51D7               	movf	f_open@fp& (0+255),w,b
 10524  001CA8  26D9               	addwf	fsr2l,f,c
 10525  001CAA  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 10526  001CAC  22DA               	addwfc	fsr2h,f,c
 10527  001CAE  0E00               	movlw	0
 10528  001CB0  6EDE               	movwf	postinc2,c
 10529  001CB2  0E00               	movlw	0
 10530  001CB4  6EDD               	movwf	postdec2,c
 10531                           
 10532                           ; BSR set to: 0
 10533                           ;tff.c: 839: mode &= (0x01|0x02|0x08|0x10|0x04);
 10534  001CB6  0E1F               	movlw	31
 10535  001CB8  17DB               	andwf	f_open@mode& (0+255),f,b
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;tff.c: 840: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
 10539  001CBA  0ED9               	movlw	low f_open@path
 10540  001CBC  6F93               	movwf	auto_mount@path& (0+255),b
 10541  001CBE  0E00               	movlw	high f_open@path
 10542  001CC0  6F94               	movwf	(auto_mount@path+1)& (0+255),b
 10543  001CC2  51DB               	movf	f_open@mode& (0+255),w,b
 10544  001CC4  0B1E               	andlw	30
 10545  001CC6  6F95               	movwf	auto_mount@chk_wp& (0+255),b
 10546  001CC8  EC88  F007         	call	_auto_mount	;wreg free
 10547  001CCC  0101               	movlb	1	; () banked
 10548  001CCE  6FEA               	movwf	f_open@res& (0+255),b
 10549                           
 10550                           ; BSR set to: 1
 10551                           ;tff.c: 845: if (res != FR_OK) return res;
 10552  001CD0  51EA               	movf	f_open@res& (0+255),w,b
 10553  001CD2  B4D8               	btfsc	status,2,c
 10554  001CD4  D002               	goto	l1274
 10555                           
 10556                           ; BSR set to: 1
 10557  001CD6  51EA               	movf	f_open@res& (0+255),w,b
 10558                           
 10559                           ; BSR set to: 1
 10560  001CD8  0012               	return	
 10561  001CDA                     l1274:
 10562                           
 10563                           ; BSR set to: 1
 10564                           ;tff.c: 846: res = trace_path(&dj, fn, path, &dir);
 10565                           
 10566                           ; BSR set to: 1
 10567  001CDA  0EED               	movlw	low f_open@dj
 10568  001CDC  0100               	movlb	0	; () banked
 10569  001CDE  6FC0               	movwf	trace_path@dj& (0+255),b
 10570  001CE0  0E01               	movlw	high f_open@dj
 10571  001CE2  6FC1               	movwf	(trace_path@dj+1)& (0+255),b
 10572  001CE4  0ED8               	movlw	low f_open@fn
 10573  001CE6  6FC2               	movwf	trace_path@fn& (0+255),b
 10574  001CE8  0E01               	movlw	high f_open@fn
 10575  001CEA  6FC3               	movwf	(trace_path@fn+1)& (0+255),b
 10576  001CEC  C0D9  F0C4         	movff	f_open@path,trace_path@path
 10577  001CF0  C0DA  F0C5         	movff	f_open@path+1,trace_path@path+1
 10578  001CF4  0EEB               	movlw	low f_open@dir
 10579  001CF6  6FC6               	movwf	trace_path@dir& (0+255),b
 10580  001CF8  0E01               	movlw	high f_open@dir
 10581  001CFA  6FC7               	movwf	(trace_path@dir+1)& (0+255),b
 10582  001CFC  EC23  F013         	call	_trace_path	;wreg free
 10583  001D00  0101               	movlb	1	; () banked
 10584  001D02  6FEA               	movwf	f_open@res& (0+255),b
 10585                           
 10586                           ; BSR set to: 1
 10587                           ;tff.c: 850: if (mode & (0x08|0x10|0x04)) {
 10588  001D04  C0DB  F0DC         	movff	f_open@mode,??_f_open
 10589  001D08  0E1C               	movlw	28
 10590  001D0A  0100               	movlb	0	; () banked
 10591  001D0C  17DC               	andwf	??_f_open& (0+255),f,b
 10592  001D0E  B4D8               	btfsc	status,2,c
 10593  001D10  D0F6               	goto	l1276
 10594                           
 10595                           ; BSR set to: 0
 10596                           ;tff.c: 851: CLUST rs;
 10597                           ;tff.c: 852: DWORD dw;
 10598                           ;tff.c: 853: if (res != FR_OK) {
 10599  001D12  0101               	movlb	1	; () banked
 10600  001D14  51EA               	movf	f_open@res& (0+255),w,b
 10601  001D16  B4D8               	btfsc	status,2,c
 10602  001D18  D042               	goto	l1277
 10603                           
 10604                           ; BSR set to: 1
 10605                           ;tff.c: 854: if (res != FR_NO_FILE) return res;
 10606  001D1A  0E02               	movlw	2
 10607  001D1C  19EA               	xorwf	f_open@res& (0+255),w,b
 10608  001D1E  B4D8               	btfsc	status,2,c
 10609  001D20  D002               	goto	l1278
 10610                           
 10611                           ; BSR set to: 1
 10612  001D22  51EA               	movf	f_open@res& (0+255),w,b
 10613                           
 10614                           ; BSR set to: 1
 10615  001D24  0012               	return	
 10616  001D26                     l1278:
 10617                           
 10618                           ; BSR set to: 1
 10619                           ;tff.c: 855: res = reserve_direntry(&dj, &dir);
 10620                           
 10621                           ; BSR set to: 1
 10622  001D26  0EED               	movlw	low f_open@dj
 10623  001D28  0100               	movlb	0	; () banked
 10624  001D2A  6FC4               	movwf	reserve_direntry@dj& (0+255),b
 10625  001D2C  0E01               	movlw	high f_open@dj
 10626  001D2E  6FC5               	movwf	(reserve_direntry@dj+1)& (0+255),b
 10627  001D30  0EEB               	movlw	low f_open@dir
 10628  001D32  6FC6               	movwf	reserve_direntry@dir& (0+255),b
 10629  001D34  0E01               	movlw	high f_open@dir
 10630  001D36  6FC7               	movwf	(reserve_direntry@dir+1)& (0+255),b
 10631  001D38  EC79  F014         	call	_reserve_direntry	;wreg free
 10632  001D3C  0101               	movlb	1	; () banked
 10633  001D3E  6FEA               	movwf	f_open@res& (0+255),b
 10634                           
 10635                           ; BSR set to: 1
 10636                           ;tff.c: 856: if (res != FR_OK) return res;
 10637  001D40  51EA               	movf	f_open@res& (0+255),w,b
 10638  001D42  B4D8               	btfsc	status,2,c
 10639  001D44  D002               	goto	l1279
 10640                           
 10641                           ; BSR set to: 1
 10642  001D46  51EA               	movf	f_open@res& (0+255),w,b
 10643                           
 10644                           ; BSR set to: 1
 10645  001D48  0012               	return	
 10646  001D4A                     l1279:
 10647                           
 10648                           ; BSR set to: 1
 10649                           ;tff.c: 857: memset(dir, 0, 32);
 10650                           
 10651                           ; BSR set to: 1
 10652  001D4A  C1EB  F060         	movff	f_open@dir,memset@p1
 10653  001D4E  C1EC  F061         	movff	f_open@dir+1,memset@p1+1
 10654  001D52  0E00               	movlw	0
 10655  001D54  0100               	movlb	0	; () banked
 10656  001D56  6F63               	movwf	(memset@c+1)& (0+255),b
 10657  001D58  0E00               	movlw	0
 10658  001D5A  6F62               	movwf	memset@c& (0+255),b
 10659  001D5C  0E00               	movlw	0
 10660  001D5E  6F65               	movwf	(memset@n+1)& (0+255),b
 10661  001D60  0E20               	movlw	32
 10662  001D62  6F64               	movwf	memset@n& (0+255),b
 10663  001D64  ECCB  F02A         	call	_memset	;wreg free
 10664                           
 10665                           ;tff.c: 858: memcpy(&dir[0], fn, 8+3);
 10666  001D68  C1EB  F060         	movff	f_open@dir,memcpy@d1
 10667  001D6C  C1EC  F061         	movff	f_open@dir+1,memcpy@d1+1
 10668  001D70  0ED8               	movlw	low f_open@fn
 10669  001D72  0100               	movlb	0	; () banked
 10670  001D74  6F62               	movwf	memcpy@s1& (0+255),b
 10671  001D76  0E01               	movlw	high f_open@fn
 10672  001D78  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 10673  001D7A  0E00               	movlw	0
 10674  001D7C  6F65               	movwf	(memcpy@n+1)& (0+255),b
 10675  001D7E  0E0B               	movlw	11
 10676  001D80  6F64               	movwf	memcpy@n& (0+255),b
 10677  001D82  EC5E  F029         	call	_memcpy	;wreg free
 10678                           
 10679                           ;tff.c: 859: dir[12] = fn[11];
 10680  001D86  0101               	movlb	1	; () banked
 10681  001D88  EE20 F00C          	lfsr	2,12
 10682  001D8C  51EB               	movf	f_open@dir& (0+255),w,b
 10683  001D8E  26D9               	addwf	fsr2l,f,c
 10684  001D90  51EC               	movf	(f_open@dir+1)& (0+255),w,b
 10685  001D92  22DA               	addwfc	fsr2h,f,c
 10686  001D94  C1E3  FFDF         	movff	f_open@fn+11,indf2
 10687                           
 10688                           ; BSR set to: 1
 10689                           ;tff.c: 860: mode |= 0x08;
 10690  001D98  0100               	movlb	0	; () banked
 10691  001D9A  87DB               	bsf	f_open@mode& (0+255),3,b
 10692                           
 10693                           ;tff.c: 861: }
 10694  001D9C  D080               	goto	l1285
 10695  001D9E                     l1277:
 10696                           
 10697                           ; BSR set to: 1
 10698                           ;tff.c: 862: else {
 10699                           ;tff.c: 863: if (mode & 0x04)
 10700  001D9E  0100               	movlb	0	; () banked
 10701  001DA0  A5DB               	btfss	f_open@mode& (0+255),2,b
 10702  001DA2  D002               	goto	l1281
 10703                           
 10704                           ; BSR set to: 0
 10705                           ;tff.c: 864: return FR_EXIST;
 10706  001DA4  0E07               	movlw	7
 10707                           
 10708                           ; BSR set to: 0
 10709  001DA6  0012               	return	
 10710  001DA8                     l1281:
 10711                           
 10712                           ; BSR set to: 0
 10713                           ;tff.c: 865: if (!dir || (dir[11] & (0x01|0x10)))
 10714                           
 10715                           ; BSR set to: 0
 10716  001DA8  0101               	movlb	1	; () banked
 10717  001DAA  51EB               	movf	f_open@dir& (0+255),w,b
 10718  001DAC  11EC               	iorwf	(f_open@dir+1)& (0+255),w,b
 10719  001DAE  B4D8               	btfsc	status,2,c
 10720  001DB0  D00D               	goto	u15190
 10721                           
 10722                           ; BSR set to: 1
 10723  001DB2  EE20 F00B          	lfsr	2,11
 10724  001DB6  51EB               	movf	f_open@dir& (0+255),w,b
 10725  001DB8  26D9               	addwf	fsr2l,f,c
 10726  001DBA  51EC               	movf	(f_open@dir+1)& (0+255),w,b
 10727  001DBC  22DA               	addwfc	fsr2h,f,c
 10728  001DBE  50DF               	movf	indf2,w,c
 10729  001DC0  0100               	movlb	0	; () banked
 10730  001DC2  6FDC               	movwf	??_f_open& (0+255),b
 10731  001DC4  0E11               	movlw	17
 10732  001DC6  17DC               	andwf	??_f_open& (0+255),f,b
 10733  001DC8  B4D8               	btfsc	status,2,c
 10734  001DCA  D002               	goto	l1282
 10735  001DCC                     u15190:
 10736                           
 10737                           ;tff.c: 866: return FR_DENIED;
 10738                           
 10739                           ; BSR set to: 0
 10740  001DCC  0E06               	movlw	6
 10741  001DCE  0012               	return	
 10742  001DD0                     l1282:
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;tff.c: 867: if (mode & 0x08) {
 10746  001DD0  A7DB               	btfss	f_open@mode& (0+255),3,b
 10747  001DD2  D065               	goto	l1285
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;tff.c: 872: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
 10751  001DD4  0101               	movlb	1	; () banked
 10752  001DD6  EE20 F01A          	lfsr	2,26
 10753  001DDA  51EB               	movf	f_open@dir& (0+255),w,b
 10754  001DDC  26D9               	addwf	fsr2l,f,c
 10755  001DDE  51EC               	movf	(f_open@dir+1)& (0+255),w,b
 10756  001DE0  22DA               	addwfc	fsr2h,f,c
 10757  001DE2  CFDE F1E4          	movff	postinc2,f_open@rs
 10758  001DE6  CFDD F1E5          	movff	postdec2,f_open@rs+1
 10759                           
 10760                           ;tff.c: 874: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
 10761  001DEA  EE20 F01A          	lfsr	2,26
 10762  001DEE  51EB               	movf	f_open@dir& (0+255),w,b
 10763  001DF0  26D9               	addwf	fsr2l,f,c
 10764  001DF2  51EC               	movf	(f_open@dir+1)& (0+255),w,b
 10765  001DF4  22DA               	addwfc	fsr2h,f,c
 10766  001DF6  0E00               	movlw	0
 10767  001DF8  6EDE               	movwf	postinc2,c
 10768  001DFA  0E00               	movlw	0
 10769  001DFC  6EDD               	movwf	postdec2,c
 10770                           
 10771                           ;tff.c: 875: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
 10772  001DFE  EE20 F01C          	lfsr	2,28
 10773  001E02  51EB               	movf	f_open@dir& (0+255),w,b
 10774  001E04  26D9               	addwf	fsr2l,f,c
 10775  001E06  51EC               	movf	(f_open@dir+1)& (0+255),w,b
 10776  001E08  22DA               	addwfc	fsr2h,f,c
 10777  001E0A  6ADE               	clrf	postinc2,c
 10778  001E0C  6ADE               	clrf	postinc2,c
 10779  001E0E  6ADE               	clrf	postinc2,c
 10780  001E10  6ADD               	clrf	postdec2,c
 10781                           
 10782                           ;tff.c: 876: dj.fs->winflag = 1;
 10783  001E12  EE20 F01F          	lfsr	2,31
 10784  001E16  51F1               	movf	(f_open@dj+4)& (0+255),w,b
 10785  001E18  26D9               	addwf	fsr2l,f,c
 10786  001E1A  51F2               	movf	(f_open@dj+5)& (0+255),w,b
 10787  001E1C  22DA               	addwfc	fsr2h,f,c
 10788  001E1E  0E01               	movlw	1
 10789  001E20  6EDF               	movwf	indf2,c
 10790                           
 10791                           ;tff.c: 877: dw = dj.fs->winsect;
 10792  001E22  EE20 F004          	lfsr	2,4
 10793  001E26  51F1               	movf	(f_open@dj+4)& (0+255),w,b
 10794  001E28  26D9               	addwf	fsr2l,f,c
 10795  001E2A  51F2               	movf	(f_open@dj+5)& (0+255),w,b
 10796  001E2C  22DA               	addwfc	fsr2h,f,c
 10797  001E2E  CFDE F1E6          	movff	postinc2,f_open@dw
 10798  001E32  CFDE F1E7          	movff	postinc2,f_open@dw+1
 10799  001E36  CFDE F1E8          	movff	postinc2,f_open@dw+2
 10800  001E3A  CFDE F1E9          	movff	postinc2,f_open@dw+3
 10801                           
 10802                           ; BSR set to: 1
 10803                           ;tff.c: 878: if (!remove_chain(rs) || !move_window(dw))
 10804  001E3E  C1E4  F0B6         	movff	f_open@rs,remove_chain@clust
 10805  001E42  C1E5  F0B7         	movff	f_open@rs+1,remove_chain@clust+1
 10806  001E46  ECBB  F022         	call	_remove_chain	;wreg free
 10807  001E4A  0900               	iorlw	0
 10808  001E4C  B4D8               	btfsc	status,2,c
 10809  001E4E  D00D               	goto	u15220
 10810  001E50  C1E6  F08B         	movff	f_open@dw,move_window@sector
 10811  001E54  C1E7  F08C         	movff	f_open@dw+1,move_window@sector+1
 10812  001E58  C1E8  F08D         	movff	f_open@dw+2,move_window@sector+2
 10813  001E5C  C1E9  F08E         	movff	f_open@dw+3,move_window@sector+3
 10814  001E60  ECFD  F01A         	call	_move_window	;wreg free
 10815  001E64  0900               	iorlw	0
 10816  001E66  A4D8               	btfss	status,2,c
 10817  001E68  D002               	goto	l1286
 10818  001E6A                     u15220:
 10819                           
 10820                           ;tff.c: 879: return FR_RW_ERROR;
 10821  001E6A  0E08               	movlw	8
 10822  001E6C  0012               	return	
 10823  001E6E                     l1286:
 10824                           
 10825                           ;tff.c: 880: dj.fs->last_clust = rs - 1;
 10826  001E6E  0EFF               	movlw	255
 10827  001E70  0100               	movlb	0	; () banked
 10828  001E72  6FDC               	movwf	??_f_open& (0+255),b
 10829  001E74  0EFF               	movlw	255
 10830  001E76  6FDD               	movwf	(??_f_open+1)& (0+255),b
 10831  001E78  C1E4  F0DE         	movff	f_open@rs,??_f_open+2
 10832  001E7C  C1E5  F0DF         	movff	f_open@rs+1,??_f_open+3
 10833  001E80  51DC               	movf	??_f_open& (0+255),w,b
 10834  001E82  27DE               	addwf	(??_f_open+2)& (0+255),f,b
 10835  001E84  51DD               	movf	(??_f_open+1)& (0+255),w,b
 10836  001E86  23DF               	addwfc	(??_f_open+3)& (0+255),f,b
 10837  001E88  0101               	movlb	1	; () banked
 10838  001E8A  EE20 F018          	lfsr	2,24
 10839  001E8E  51F1               	movf	(f_open@dj+4)& (0+255),w,b
 10840  001E90  26D9               	addwf	fsr2l,f,c
 10841  001E92  51F2               	movf	(f_open@dj+5)& (0+255),w,b
 10842  001E94  22DA               	addwfc	fsr2h,f,c
 10843  001E96  C0DE  FFDE         	movff	??_f_open+2,postinc2
 10844  001E9A  C0DF  FFDD         	movff	??_f_open+3,postdec2
 10845  001E9E                     l1285:
 10846                           
 10847                           ;tff.c: 881: }
 10848                           ;tff.c: 882: }
 10849                           ;tff.c: 883: if (mode & 0x08) {
 10850                           
 10851                           ; BSR set to: 1
 10852                           
 10853                           ; BSR set to: 1
 10854  001E9E  0100               	movlb	0	; () banked
 10855  001EA0  A7DB               	btfss	f_open@mode& (0+255),3,b
 10856  001EA2  D04F               	goto	l1295
 10857                           
 10858                           ; BSR set to: 0
 10859                           ;tff.c: 884: dir[11] = 0;
 10860  001EA4  0101               	movlb	1	; () banked
 10861  001EA6  EE20 F00B          	lfsr	2,11
 10862  001EAA  51EB               	movf	f_open@dir& (0+255),w,b
 10863  001EAC  26D9               	addwf	fsr2l,f,c
 10864  001EAE  51EC               	movf	(f_open@dir+1)& (0+255),w,b
 10865  001EB0  22DA               	addwfc	fsr2h,f,c
 10866  001EB2  0E00               	movlw	0
 10867  001EB4  6EDF               	movwf	indf2,c
 10868                           
 10869                           ; BSR set to: 1
 10870                           ;tff.c: 885: dw = get_fattime();
 10871  001EB6  ECD2  F01F         	call	_get_fattime	;wreg free
 10872  001EBA  C060  F1E6         	movff	?_get_fattime,f_open@dw
 10873  001EBE  C061  F1E7         	movff	?_get_fattime+1,f_open@dw+1
 10874  001EC2  C062  F1E8         	movff	?_get_fattime+2,f_open@dw+2
 10875  001EC6  C063  F1E9         	movff	?_get_fattime+3,f_open@dw+3
 10876                           
 10877                           ;tff.c: 886: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
 10878  001ECA  0101               	movlb	1	; () banked
 10879  001ECC  EE20 F00E          	lfsr	2,14
 10880  001ED0  51EB               	movf	f_open@dir& (0+255),w,b
 10881  001ED2  26D9               	addwf	fsr2l,f,c
 10882  001ED4  51EC               	movf	(f_open@dir+1)& (0+255),w,b
 10883  001ED6  22DA               	addwfc	fsr2h,f,c
 10884  001ED8  C1E6  FFDE         	movff	f_open@dw,postinc2
 10885  001EDC  C1E7  FFDE         	movff	f_open@dw+1,postinc2
 10886  001EE0  C1E8  FFDE         	movff	f_open@dw+2,postinc2
 10887  001EE4  C1E9  FFDE         	movff	f_open@dw+3,postinc2
 10888                           
 10889                           ; BSR set to: 1
 10890                           ;tff.c: 887: dj.fs->winflag = 1;
 10891  001EE8  EE20 F01F          	lfsr	2,31
 10892  001EEC  51F1               	movf	(f_open@dj+4)& (0+255),w,b
 10893  001EEE  26D9               	addwf	fsr2l,f,c
 10894  001EF0  51F2               	movf	(f_open@dj+5)& (0+255),w,b
 10895  001EF2  22DA               	addwfc	fsr2h,f,c
 10896  001EF4  0E01               	movlw	1
 10897  001EF6  6EDF               	movwf	indf2,c
 10898                           
 10899                           ; BSR set to: 1
 10900                           ;tff.c: 888: mode |= 0x20;
 10901  001EF8  0100               	movlb	0	; () banked
 10902  001EFA  8BDB               	bsf	f_open@mode& (0+255),5,b
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;tff.c: 889: }
 10906                           ;tff.c: 890: }
 10907  001EFC  D022               	goto	l1295
 10908  001EFE                     l1276:
 10909                           
 10910                           ; BSR set to: 0
 10911                           ;tff.c: 892: else {
 10912                           ;tff.c: 894: if (res != FR_OK) return res;
 10913                           
 10914                           ; BSR set to: 0
 10915  001EFE  0101               	movlb	1	; () banked
 10916  001F00  51EA               	movf	f_open@res& (0+255),w,b
 10917  001F02  B4D8               	btfsc	status,2,c
 10918  001F04  D002               	goto	l1291
 10919                           
 10920                           ; BSR set to: 1
 10921  001F06  51EA               	movf	f_open@res& (0+255),w,b
 10922                           
 10923                           ; BSR set to: 1
 10924  001F08  0012               	return	
 10925  001F0A                     l1291:
 10926                           
 10927                           ; BSR set to: 1
 10928                           ;tff.c: 895: if (!dir || (dir[11] & 0x10))
 10929                           
 10930                           ; BSR set to: 1
 10931  001F0A  51EB               	movf	f_open@dir& (0+255),w,b
 10932  001F0C  11EC               	iorwf	(f_open@dir+1)& (0+255),w,b
 10933  001F0E  B4D8               	btfsc	status,2,c
 10934  001F10  D008               	goto	u15260
 10935                           
 10936                           ; BSR set to: 1
 10937  001F12  EE20 F00B          	lfsr	2,11
 10938  001F16  51EB               	movf	f_open@dir& (0+255),w,b
 10939  001F18  26D9               	addwf	fsr2l,f,c
 10940  001F1A  51EC               	movf	(f_open@dir+1)& (0+255),w,b
 10941  001F1C  22DA               	addwfc	fsr2h,f,c
 10942  001F1E  A8DF               	btfss	indf2,4,c
 10943  001F20  D002               	goto	l1292
 10944  001F22                     u15260:
 10945                           
 10946                           ; BSR set to: 1
 10947                           ;tff.c: 896: return FR_NO_FILE;
 10948                           
 10949                           ; BSR set to: 1
 10950  001F22  0E02               	movlw	2
 10951                           
 10952                           ; BSR set to: 1
 10953  001F24  0012               	return	
 10954  001F26                     l1292:
 10955                           
 10956                           ; BSR set to: 1
 10957                           ;tff.c: 898: if ((mode & 0x02) && (dir[11] & 0x01))
 10958  001F26  0100               	movlb	0	; () banked
 10959  001F28  A3DB               	btfss	f_open@mode& (0+255),1,b
 10960  001F2A  D00B               	goto	l1295
 10961                           
 10962                           ; BSR set to: 0
 10963  001F2C  0101               	movlb	1	; () banked
 10964  001F2E  EE20 F00B          	lfsr	2,11
 10965  001F32  51EB               	movf	f_open@dir& (0+255),w,b
 10966  001F34  26D9               	addwf	fsr2l,f,c
 10967  001F36  51EC               	movf	(f_open@dir+1)& (0+255),w,b
 10968  001F38  22DA               	addwfc	fsr2h,f,c
 10969  001F3A  A0DF               	btfss	indf2,0,c
 10970  001F3C  D002               	goto	l1295
 10971                           
 10972                           ; BSR set to: 1
 10973                           ;tff.c: 899: return FR_DENIED;
 10974  001F3E  0E06               	movlw	6
 10975                           
 10976                           ; BSR set to: 1
 10977  001F40  0012               	return	
 10978  001F42                     l1295:
 10979                           
 10980                           ;tff.c: 900: }
 10981                           ;tff.c: 901: fp->dir_sect = dj.fs->winsect;
 10982                           
 10983                           ; BSR set to: 1
 10984                           
 10985                           ; BSR set to: 1
 10986  001F42  0101               	movlb	1	; () banked
 10987  001F44  EE20 F004          	lfsr	2,4
 10988  001F48  51F1               	movf	(f_open@dj+4)& (0+255),w,b
 10989  001F4A  26D9               	addwf	fsr2l,f,c
 10990  001F4C  51F2               	movf	(f_open@dj+5)& (0+255),w,b
 10991  001F4E  22DA               	addwfc	fsr2h,f,c
 10992  001F50  0100               	movlb	0	; () banked
 10993  001F52  EE10 F016          	lfsr	1,22
 10994  001F56  51D7               	movf	f_open@fp& (0+255),w,b
 10995  001F58  26E1               	addwf	fsr1l,f,c
 10996  001F5A  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 10997  001F5C  22E2               	addwfc	fsr1h,f,c
 10998  001F5E  CFDE FFE6          	movff	postinc2,postinc1
 10999  001F62  CFDE FFE6          	movff	postinc2,postinc1
 11000  001F66  CFDE FFE6          	movff	postinc2,postinc1
 11001  001F6A  CFDE FFE6          	movff	postinc2,postinc1
 11002                           
 11003                           ; BSR set to: 0
 11004                           ;tff.c: 902: fp->dir_ptr = dir;
 11005  001F6E  EE20 F01A          	lfsr	2,26
 11006  001F72  51D7               	movf	f_open@fp& (0+255),w,b
 11007  001F74  26D9               	addwf	fsr2l,f,c
 11008  001F76  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11009  001F78  22DA               	addwfc	fsr2h,f,c
 11010  001F7A  C1EB  FFDE         	movff	f_open@dir,postinc2
 11011  001F7E  C1EC  FFDD         	movff	f_open@dir+1,postdec2
 11012                           
 11013                           ; BSR set to: 0
 11014                           ;tff.c: 904: fp->flag = mode;
 11015  001F82  EE20 F002          	lfsr	2,2
 11016  001F86  51D7               	movf	f_open@fp& (0+255),w,b
 11017  001F88  26D9               	addwf	fsr2l,f,c
 11018  001F8A  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11019  001F8C  22DA               	addwfc	fsr2h,f,c
 11020  001F8E  C0DB  FFDF         	movff	f_open@mode,indf2
 11021                           
 11022                           ;tff.c: 905: fp->org_clust =
 11023                           ;tff.c: 909: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
 11024  001F92  0101               	movlb	1	; () banked
 11025  001F94  EE20 F01A          	lfsr	2,26
 11026  001F98  51EB               	movf	f_open@dir& (0+255),w,b
 11027  001F9A  26D9               	addwf	fsr2l,f,c
 11028  001F9C  51EC               	movf	(f_open@dir+1)& (0+255),w,b
 11029  001F9E  22DA               	addwfc	fsr2h,f,c
 11030  001FA0  0100               	movlb	0	; () banked
 11031  001FA2  EE10 F00E          	lfsr	1,14
 11032  001FA6  51D7               	movf	f_open@fp& (0+255),w,b
 11033  001FA8  26E1               	addwf	fsr1l,f,c
 11034  001FAA  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11035  001FAC  22E2               	addwfc	fsr1h,f,c
 11036  001FAE  CFDE FFE6          	movff	postinc2,postinc1
 11037  001FB2  CFDD FFE5          	movff	postdec2,postdec1
 11038                           
 11039                           ;tff.c: 910: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
 11040  001FB6  0101               	movlb	1	; () banked
 11041  001FB8  EE20 F01C          	lfsr	2,28
 11042  001FBC  51EB               	movf	f_open@dir& (0+255),w,b
 11043  001FBE  26D9               	addwf	fsr2l,f,c
 11044  001FC0  51EC               	movf	(f_open@dir+1)& (0+255),w,b
 11045  001FC2  22DA               	addwfc	fsr2h,f,c
 11046  001FC4  0100               	movlb	0	; () banked
 11047  001FC6  EE10 F00A          	lfsr	1,10
 11048  001FCA  51D7               	movf	f_open@fp& (0+255),w,b
 11049  001FCC  26E1               	addwf	fsr1l,f,c
 11050  001FCE  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11051  001FD0  22E2               	addwfc	fsr1h,f,c
 11052  001FD2  CFDE FFE6          	movff	postinc2,postinc1
 11053  001FD6  CFDE FFE6          	movff	postinc2,postinc1
 11054  001FDA  CFDE FFE6          	movff	postinc2,postinc1
 11055  001FDE  CFDE FFE6          	movff	postinc2,postinc1
 11056                           
 11057                           ; BSR set to: 0
 11058                           ;tff.c: 911: fp->fptr = 0; fp->csect = 255;
 11059  001FE2  EE20 F006          	lfsr	2,6
 11060  001FE6  51D7               	movf	f_open@fp& (0+255),w,b
 11061  001FE8  26D9               	addwf	fsr2l,f,c
 11062  001FEA  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11063  001FEC  22DA               	addwfc	fsr2h,f,c
 11064  001FEE  6ADE               	clrf	postinc2,c
 11065  001FF0  6ADE               	clrf	postinc2,c
 11066  001FF2  6ADE               	clrf	postinc2,c
 11067  001FF4  6ADD               	clrf	postdec2,c
 11068                           
 11069                           ; BSR set to: 0
 11070  001FF6  EE20 F003          	lfsr	2,3
 11071  001FFA  51D7               	movf	f_open@fp& (0+255),w,b
 11072  001FFC  26D9               	addwf	fsr2l,f,c
 11073  001FFE  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11074  002000  22DA               	addwfc	fsr2h,f,c
 11075  002002  0EFF               	movlw	255
 11076  002004  6EDF               	movwf	indf2,c
 11077                           
 11078                           ; BSR set to: 0
 11079                           ;tff.c: 912: fp->fs = dj.fs; fp->id = dj.fs->id;
 11080  002006  EE20 F004          	lfsr	2,4
 11081  00200A  51D7               	movf	f_open@fp& (0+255),w,b
 11082  00200C  26D9               	addwf	fsr2l,f,c
 11083  00200E  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 11084  002010  22DA               	addwfc	fsr2h,f,c
 11085  002012  C1F1  FFDE         	movff	f_open@dj+4,postinc2
 11086  002016  C1F2  FFDD         	movff	f_open@dj+5,postdec2
 11087                           
 11088                           ; BSR set to: 0
 11089  00201A  C1F1  FFD9         	movff	f_open@dj+4,fsr2l
 11090  00201E  C1F2  FFDA         	movff	f_open@dj+5,fsr2h
 11091  002022  C0D7  FFE1         	movff	f_open@fp,fsr1l
 11092  002026  C0D8  FFE2         	movff	f_open@fp+1,fsr1h
 11093  00202A  CFDE FFE6          	movff	postinc2,postinc1
 11094  00202E  CFDD FFE5          	movff	postdec2,postdec1
 11095                           
 11096                           ; BSR set to: 0
 11097                           ;tff.c: 914: return FR_OK;
 11098  002032  0E00               	movlw	0
 11099  002034  0012               	return	
 11100  002036                     __end_of_f_open:
 11101                           	opt stack 0
 11102                           tosu	equ	0xFFF
 11103                           tosh	equ	0xFFE
 11104                           tosl	equ	0xFFD
 11105                           pclath	equ	0xFFA
 11106                           tblptru	equ	0xFF8
 11107                           tblptrh	equ	0xFF7
 11108                           tblptrl	equ	0xFF6
 11109                           tablat	equ	0xFF5
 11110                           prodh	equ	0xFF4
 11111                           prodl	equ	0xFF3
 11112                           intcon	equ	0xFF2
 11113                           intcon2	equ	0xFF1
 11114                           intcon3	equ	0xFF0
 11115                           indf0	equ	0xFEF
 11116                           postinc0	equ	0xFEE
 11117                           fsr0h	equ	0xFEA
 11118                           fsr0l	equ	0xFE9
 11119                           wreg	equ	0xFE8
 11120                           indf1	equ	0xFE7
 11121                           postinc1	equ	0xFE6
 11122                           postdec1	equ	0xFE5
 11123                           plusw1	equ	0xFE3
 11124                           fsr1h	equ	0xFE2
 11125                           fsr1l	equ	0xFE1
 11126                           indf2	equ	0xFDF
 11127                           postinc2	equ	0xFDE
 11128                           postdec2	equ	0xFDD
 11129                           plusw2	equ	0xFDB
 11130                           fsr2h	equ	0xFDA
 11131                           fsr2l	equ	0xFD9
 11132                           status	equ	0xFD8
 11133                           
 11134 ;; *************** function _trace_path *****************
 11135 ;; Defined at:
 11136 ;;		line 501 in file "bibliotecas/tff.c"
 11137 ;; Parameters:    Size  Location     Type
 11138 ;;  dj              2   96[BANK0 ] PTR struct _DIR_E
 11139 ;;		 -> f_open@dj(14), 
 11140 ;;  fn              2   98[BANK0 ] PTR unsigned char 
 11141 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 11142 ;;  path            2  100[BANK0 ] PTR const unsigned char 
 11143 ;;		 -> STR_27(13), filename(15), 
 11144 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
 11145 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
 11146 ;; Auto vars:     Size  Location     Type
 11147 ;;  dptr            2  117[BANK0 ] PTR unsigned char 
 11148 ;;		 -> fs.win(512), NULL(0), fs(544), 
 11149 ;;  clust           2  114[BANK0 ] unsigned short 
 11150 ;;  fs              2  112[BANK0 ] PTR struct _FATFS
 11151 ;;		 -> NULL(0), fs(544), 
 11152 ;;  ds              1  116[BANK0 ] unsigned char 
 11153 ;; Return value:  Size  Location     Type
 11154 ;;                  1    wreg      enum E155
 11155 ;; Registers used:
 11156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11157 ;; Tracked objects:
 11158 ;;		On entry : 0/0
 11159 ;;		On exit  : 0/0
 11160 ;;		Unchanged: 0/0
 11161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11162 ;;      Params:         0       8       0       0       0       0       0       0       0
 11163 ;;      Locals:         0      11       0       0       0       0       0       0       0
 11164 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11165 ;;      Totals:         0      23       0       0       0       0       0       0       0
 11166 ;;Total ram usage:       23 bytes
 11167 ;; Hardware stack levels used:    1
 11168 ;; Hardware stack levels required when called:   11
 11169 ;; This function calls:
 11170 ;;		_clust2sect
 11171 ;;		_make_dirfile
 11172 ;;		_memcmp
 11173 ;;		_move_window
 11174 ;;		_next_dir_entry
 11175 ;; This function is called by:
 11176 ;;		_f_open
 11177 ;;		_f_opendir
 11178 ;; This function uses a non-reentrant model
 11179 ;;
 11180                           
 11181                           	psect	text38
 11182  002646                     __ptext38:
 11183                           	opt stack 0
 11184  002646                     _trace_path:
 11185                           	opt stack 15
 11186                           
 11187                           ;tff.c: 508: CLUST clust;
 11188                           ;tff.c: 509: char ds;
 11189                           ;tff.c: 510: BYTE *dptr = (0);
 11190                           
 11191                           ;incstack = 0
 11192  002646  0E00               	movlw	0
 11193  002648  0100               	movlb	0	; () banked
 11194  00264A  6FD5               	movwf	trace_path@dptr& (0+255),b
 11195  00264C  0E00               	movlw	0
 11196  00264E  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
 11197                           
 11198                           ;tff.c: 511: FATFS *fs = FatFs;
 11199  002650  C0FB  F0D0         	movff	_FatFs,trace_path@fs
 11200  002654  C0FC  F0D1         	movff	_FatFs+1,trace_path@fs+1
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;tff.c: 514: dj->fs = fs;
 11204  002658  EE20 F004          	lfsr	2,4
 11205  00265C  51C0               	movf	trace_path@dj& (0+255),w,b
 11206  00265E  26D9               	addwf	fsr2l,f,c
 11207  002660  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11208  002662  22DA               	addwfc	fsr2h,f,c
 11209  002664  C0D0  FFDE         	movff	trace_path@fs,postinc2
 11210  002668  C0D1  FFDD         	movff	trace_path@fs+1,postdec2
 11211                           
 11212                           ; BSR set to: 0
 11213                           ;tff.c: 515: clust = fs->dirbase;
 11214  00266C  EE20 F00C          	lfsr	2,12
 11215  002670  51D0               	movf	trace_path@fs& (0+255),w,b
 11216  002672  26D9               	addwf	fsr2l,f,c
 11217  002674  51D1               	movf	(trace_path@fs+1)& (0+255),w,b
 11218  002676  22DA               	addwfc	fsr2h,f,c
 11219  002678  CFDE F0D2          	movff	postinc2,trace_path@clust
 11220  00267C  CFDD F0D3          	movff	postdec2,trace_path@clust+1
 11221                           
 11222                           ; BSR set to: 0
 11223                           ;tff.c: 522: {
 11224                           ;tff.c: 523: dj->clust = dj->sclust = 0;
 11225  002680  EE20 F006          	lfsr	2,6
 11226  002684  51C0               	movf	trace_path@dj& (0+255),w,b
 11227  002686  26D9               	addwf	fsr2l,f,c
 11228  002688  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11229  00268A  22DA               	addwfc	fsr2h,f,c
 11230  00268C  0E00               	movlw	0
 11231  00268E  6EDE               	movwf	postinc2,c
 11232  002690  0E00               	movlw	0
 11233  002692  6EDD               	movwf	postdec2,c
 11234  002694  EE10 F008          	lfsr	1,8
 11235  002698  51C0               	movf	trace_path@dj& (0+255),w,b
 11236  00269A  26E1               	addwf	fsr1l,f,c
 11237  00269C  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11238  00269E  22E2               	addwfc	fsr1h,f,c
 11239  0026A0  CFDE FFE6          	movff	postinc2,postinc1
 11240  0026A4  CFDD FFE5          	movff	postdec2,postdec1
 11241                           
 11242                           ; BSR set to: 0
 11243                           ;tff.c: 524: dj->sect = clust;
 11244  0026A8  51D2               	movf	trace_path@clust& (0+255),w,b
 11245  0026AA  6FC8               	movwf	??_trace_path& (0+255),b
 11246  0026AC  51D3               	movf	(trace_path@clust+1)& (0+255),w,b
 11247  0026AE  6FC9               	movwf	(??_trace_path+1)& (0+255),b
 11248  0026B0  6BCA               	clrf	(??_trace_path+2)& (0+255),b
 11249  0026B2  6BCB               	clrf	(??_trace_path+3)& (0+255),b
 11250  0026B4  EE20 F00A          	lfsr	2,10
 11251  0026B8  51C0               	movf	trace_path@dj& (0+255),w,b
 11252  0026BA  26D9               	addwf	fsr2l,f,c
 11253  0026BC  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11254  0026BE  22DA               	addwfc	fsr2h,f,c
 11255  0026C0  C0C8  FFDE         	movff	??_trace_path,postinc2
 11256  0026C4  C0C9  FFDE         	movff	??_trace_path+1,postinc2
 11257  0026C8  C0CA  FFDE         	movff	??_trace_path+2,postinc2
 11258  0026CC  C0CB  FFDE         	movff	??_trace_path+3,postinc2
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;tff.c: 525: }
 11262                           ;tff.c: 526: dj->index = 0;
 11263  0026D0  EE20 F002          	lfsr	2,2
 11264  0026D4  51C0               	movf	trace_path@dj& (0+255),w,b
 11265  0026D6  26D9               	addwf	fsr2l,f,c
 11266  0026D8  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11267  0026DA  22DA               	addwfc	fsr2h,f,c
 11268  0026DC  0E00               	movlw	0
 11269  0026DE  6EDE               	movwf	postinc2,c
 11270  0026E0  0E00               	movlw	0
 11271  0026E2  6EDD               	movwf	postdec2,c
 11272                           
 11273                           ; BSR set to: 0
 11274                           ;tff.c: 528: if (*path == '\0') {
 11275  0026E4  C0C4  FFF6         	movff	trace_path@path,tblptrl
 11276  0026E8  C0C5  FFF7         	movff	trace_path@path+1,tblptrh
 11277  0026EC  6AF8               	clrf	tblptru,c
 11278  0026EE  0E07               	movlw	(high __ramtop+-1)
 11279  0026F0  64F7               	cpfsgt	tblptrh,c
 11280  0026F2  D003               	bra	u14487
 11281  0026F4  0008               	tblrd		*
 11282  0026F6  50F5               	movf	tablat,w,c
 11283  0026F8  D005               	bra	u14480
 11284  0026FA                     u14487:
 11285  0026FA  CFF6 FFE9          	movff	tblptrl,fsr0l
 11286  0026FE  CFF7 FFEA          	movff	tblptrh,fsr0h
 11287  002702  50EF               	movf	indf0,w,c
 11288  002704                     u14480:
 11289  002704  0900               	iorlw	0
 11290  002706  A4D8               	btfss	status,2,c
 11291  002708  D00A               	goto	l1186
 11292                           
 11293                           ;tff.c: 529: *dir = (0); return FR_OK;
 11294  00270A  C0C6  FFD9         	movff	trace_path@dir,fsr2l
 11295  00270E  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
 11296  002712  0E00               	movlw	0
 11297  002714  6EDE               	movwf	postinc2,c
 11298  002716  0E00               	movlw	0
 11299  002718  6EDD               	movwf	postdec2,c
 11300  00271A  0E00               	movlw	0
 11301  00271C  0012               	return	
 11302  00271E                     l1186:
 11303                           
 11304                           ;tff.c: 533: ds = make_dirfile(&path, fn);
 11305                           
 11306                           ;tff.c: 530: }
 11307                           ;tff.c: 532: for (;;) {
 11308  00271E  0EC4               	movlw	low trace_path@path
 11309  002720  0100               	movlb	0	; () banked
 11310  002722  6F68               	movwf	make_dirfile@path& (0+255),b
 11311  002724  0E00               	movlw	high trace_path@path
 11312  002726  6F69               	movwf	(make_dirfile@path+1)& (0+255),b
 11313  002728  C0C2  F06A         	movff	trace_path@fn,make_dirfile@dirname
 11314  00272C  C0C3  F06B         	movff	trace_path@fn+1,make_dirfile@dirname+1
 11315  002730  EC9C  F01C         	call	_make_dirfile	;wreg free
 11316  002734  0100               	movlb	0	; () banked
 11317  002736  6FD4               	movwf	trace_path@ds& (0+255),b
 11318                           
 11319                           ; BSR set to: 0
 11320                           ;tff.c: 534: if (ds == 1) return FR_INVALID_NAME;
 11321  002738  05D4               	decf	trace_path@ds& (0+255),w,b
 11322  00273A  A4D8               	btfss	status,2,c
 11323  00273C  D002               	goto	l1189
 11324                           
 11325                           ; BSR set to: 0
 11326  00273E  0E04               	movlw	4
 11327                           
 11328                           ; BSR set to: 0
 11329  002740  0012               	return	
 11330  002742                     l1189:
 11331                           
 11332                           ;tff.c: 536: if (!move_window(dj->sect)) return FR_RW_ERROR;
 11333                           
 11334                           ; BSR set to: 0
 11335                           
 11336                           ;tff.c: 535: for (;;) {
 11337                           
 11338                           ; BSR set to: 0
 11339  002742  0100               	movlb	0	; () banked
 11340  002744  EE20 F00A          	lfsr	2,10
 11341  002748  51C0               	movf	trace_path@dj& (0+255),w,b
 11342  00274A  26D9               	addwf	fsr2l,f,c
 11343  00274C  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11344  00274E  22DA               	addwfc	fsr2h,f,c
 11345  002750  CFDE F08B          	movff	postinc2,move_window@sector
 11346  002754  CFDE F08C          	movff	postinc2,move_window@sector+1
 11347  002758  CFDE F08D          	movff	postinc2,move_window@sector+2
 11348  00275C  CFDE F08E          	movff	postinc2,move_window@sector+3
 11349  002760  ECFD  F01A         	call	_move_window	;wreg free
 11350  002764  0900               	iorlw	0
 11351  002766  A4D8               	btfss	status,2,c
 11352  002768  D002               	goto	l1191
 11353  00276A  0E08               	movlw	8
 11354  00276C  0012               	return	
 11355  00276E                     l1191:
 11356                           
 11357                           ;tff.c: 537: dptr = &fs->win[(dj->index & 15) * 32];
 11358  00276E  0100               	movlb	0	; () banked
 11359  002770  EE20 F002          	lfsr	2,2
 11360  002774  51C0               	movf	trace_path@dj& (0+255),w,b
 11361  002776  26D9               	addwf	fsr2l,f,c
 11362  002778  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11363  00277A  22DA               	addwfc	fsr2h,f,c
 11364  00277C  CFDE F0C8          	movff	postinc2,??_trace_path
 11365  002780  CFDD F0C9          	movff	postdec2,??_trace_path+1
 11366  002784  0E0F               	movlw	15
 11367  002786  17C8               	andwf	??_trace_path& (0+255),f,b
 11368  002788  0E00               	movlw	0
 11369  00278A  17C9               	andwf	(??_trace_path+1)& (0+255),f,b
 11370  00278C  0E05               	movlw	5
 11371  00278E                     u14525:
 11372  00278E  90D8               	bcf	status,0,c
 11373  002790  37C8               	rlcf	??_trace_path& (0+255),f,b
 11374  002792  37C9               	rlcf	(??_trace_path+1)& (0+255),f,b
 11375  002794  2EE8               	decfsz	wreg,f,c
 11376  002796  D7FB               	goto	u14525
 11377  002798  0E20               	movlw	32
 11378  00279A  27C8               	addwf	??_trace_path& (0+255),f,b
 11379  00279C  0E00               	movlw	0
 11380  00279E  23C9               	addwfc	(??_trace_path+1)& (0+255),f,b
 11381  0027A0  51C8               	movf	??_trace_path& (0+255),w,b
 11382  0027A2  25D0               	addwf	trace_path@fs& (0+255),w,b
 11383  0027A4  6FD5               	movwf	trace_path@dptr& (0+255),b
 11384  0027A6  51C9               	movf	(??_trace_path+1)& (0+255),w,b
 11385  0027A8  21D1               	addwfc	(trace_path@fs+1)& (0+255),w,b
 11386  0027AA  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
 11387                           
 11388                           ; BSR set to: 0
 11389                           ;tff.c: 538: if (dptr[0] == 0)
 11390  0027AC  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
 11391  0027B0  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
 11392  0027B4  50DF               	movf	indf2,w,c
 11393  0027B6  A4D8               	btfss	status,2,c
 11394  0027B8  D00D               	goto	l1192
 11395                           
 11396                           ; BSR set to: 0
 11397                           ;tff.c: 539: return !ds ? FR_NO_FILE : FR_NO_PATH;
 11398  0027BA  51D4               	movf	trace_path@ds& (0+255),w,b
 11399  0027BC  B4D8               	btfsc	status,2,c
 11400  0027BE  D004               	goto	l1194
 11401                           
 11402                           ; BSR set to: 0
 11403  0027C0  0E00               	movlw	0
 11404  0027C2  6FCD               	movwf	(_trace_path$2170+1)& (0+255),b
 11405  0027C4  0E03               	movlw	3
 11406  0027C6  D003               	goto	L6
 11407  0027C8                     l1194:
 11408                           
 11409                           ; BSR set to: 0
 11410                           
 11411                           ; BSR set to: 0
 11412  0027C8  0E00               	movlw	0
 11413  0027CA  6FCD               	movwf	(_trace_path$2170+1)& (0+255),b
 11414  0027CC  0E02               	movlw	2
 11415  0027CE                     L6:
 11416  0027CE  6FCC               	movwf	_trace_path$2170& (0+255),b
 11417                           
 11418                           ; BSR set to: 0
 11419  0027D0  51CC               	movf	_trace_path$2170& (0+255),w,b
 11420                           
 11421                           ; BSR set to: 0
 11422  0027D2  0012               	return	
 11423  0027D4                     l1192:
 11424                           
 11425                           ; BSR set to: 0
 11426                           ;tff.c: 540: if (dptr[0] != 0xE5
 11427                           ;tff.c: 541: && !(dptr[11] & 0x08)
 11428                           ;tff.c: 542: && !memcmp(&dptr[0], fn, 8+3) ) break;
 11429                           
 11430                           ; BSR set to: 0
 11431  0027D4  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
 11432  0027D8  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
 11433  0027DC  0EE5               	movlw	229
 11434  0027DE  18DE               	xorwf	postinc2,w,c
 11435  0027E0  B4D8               	btfsc	status,2,c
 11436  0027E2  D01B               	goto	l1197
 11437                           
 11438                           ; BSR set to: 0
 11439  0027E4  EE20 F00B          	lfsr	2,11
 11440  0027E8  51D5               	movf	trace_path@dptr& (0+255),w,b
 11441  0027EA  26D9               	addwf	fsr2l,f,c
 11442  0027EC  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
 11443  0027EE  22DA               	addwfc	fsr2h,f,c
 11444  0027F0  B6DF               	btfsc	indf2,3,c
 11445  0027F2  D013               	goto	l1197
 11446                           
 11447                           ; BSR set to: 0
 11448  0027F4  C0D5  F060         	movff	trace_path@dptr,memcmp@s1
 11449  0027F8  C0D6  F061         	movff	trace_path@dptr+1,memcmp@s1+1
 11450  0027FC  C0C2  F062         	movff	trace_path@fn,memcmp@s2
 11451  002800  C0C3  F063         	movff	trace_path@fn+1,memcmp@s2+1
 11452  002804  0E00               	movlw	0
 11453  002806  6F65               	movwf	(memcmp@n+1)& (0+255),b
 11454  002808  0E0B               	movlw	11
 11455  00280A  6F64               	movwf	memcmp@n& (0+255),b
 11456  00280C  ECB2  F023         	call	_memcmp	;wreg free
 11457  002810  0100               	movlb	0	; () banked
 11458  002812  5160               	movf	?_memcmp& (0+255),w,b
 11459  002814  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 11460  002816  B4D8               	btfsc	status,2,c
 11461  002818  D017               	goto	l1198
 11462  00281A                     l1197:
 11463                           
 11464                           ; BSR set to: 0
 11465                           ;tff.c: 543: if (!next_dir_entry(dj))
 11466                           
 11467                           ; BSR set to: 0
 11468  00281A  C0C0  F0B3         	movff	trace_path@dj,next_dir_entry@dj
 11469  00281E  C0C1  F0B4         	movff	trace_path@dj+1,next_dir_entry@dj+1
 11470  002822  ECD8  F01B         	call	_next_dir_entry	;wreg free
 11471  002826  0900               	iorlw	0
 11472  002828  A4D8               	btfss	status,2,c
 11473  00282A  D78B               	goto	l1189
 11474                           
 11475                           ;tff.c: 544: return !ds ? FR_NO_FILE : FR_NO_PATH;
 11476  00282C  0100               	movlb	0	; () banked
 11477  00282E  51D4               	movf	trace_path@ds& (0+255),w,b
 11478  002830  B4D8               	btfsc	status,2,c
 11479  002832  D004               	goto	l1201
 11480                           
 11481                           ; BSR set to: 0
 11482  002834  0E00               	movlw	0
 11483  002836  6FCF               	movwf	(_trace_path$2172+1)& (0+255),b
 11484  002838  0E03               	movlw	3
 11485  00283A  D003               	goto	L7
 11486  00283C                     l1201:
 11487                           
 11488                           ; BSR set to: 0
 11489                           
 11490                           ; BSR set to: 0
 11491  00283C  0E00               	movlw	0
 11492  00283E  6FCF               	movwf	(_trace_path$2172+1)& (0+255),b
 11493  002840  0E02               	movlw	2
 11494  002842                     L7:
 11495  002842  6FCE               	movwf	_trace_path$2172& (0+255),b
 11496                           
 11497                           ; BSR set to: 0
 11498  002844  51CE               	movf	_trace_path$2172& (0+255),w,b
 11499                           
 11500                           ; BSR set to: 0
 11501  002846  0012               	return	
 11502  002848                     l1198:
 11503                           
 11504                           ; BSR set to: 0
 11505                           ;tff.c: 546: if (!ds) { *dir = dptr; return FR_OK; }
 11506                           
 11507                           ; BSR set to: 0
 11508  002848  51D4               	movf	trace_path@ds& (0+255),w,b
 11509  00284A  A4D8               	btfss	status,2,c
 11510  00284C  D00A               	goto	l1204
 11511                           
 11512                           ; BSR set to: 0
 11513  00284E  C0C6  FFD9         	movff	trace_path@dir,fsr2l
 11514  002852  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
 11515  002856  C0D5  FFDE         	movff	trace_path@dptr,postinc2
 11516  00285A  C0D6  FFDD         	movff	trace_path@dptr+1,postdec2
 11517                           
 11518                           ; BSR set to: 0
 11519  00285E  0E00               	movlw	0
 11520                           
 11521                           ; BSR set to: 0
 11522  002860  0012               	return	
 11523  002862                     l1204:
 11524                           
 11525                           ; BSR set to: 0
 11526                           ;tff.c: 547: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
 11527                           
 11528                           ; BSR set to: 0
 11529  002862  EE20 F00B          	lfsr	2,11
 11530  002866  51D5               	movf	trace_path@dptr& (0+255),w,b
 11531  002868  26D9               	addwf	fsr2l,f,c
 11532  00286A  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
 11533  00286C  22DA               	addwfc	fsr2h,f,c
 11534  00286E  B8DF               	btfsc	indf2,4,c
 11535  002870  D002               	goto	l1205
 11536                           
 11537                           ; BSR set to: 0
 11538  002872  0E03               	movlw	3
 11539                           
 11540                           ; BSR set to: 0
 11541  002874  0012               	return	
 11542  002876                     l1205:
 11543                           
 11544                           ; BSR set to: 0
 11545                           ;tff.c: 548: clust =
 11546                           ;tff.c: 552: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
 11547                           
 11548                           ; BSR set to: 0
 11549  002876  EE20 F01A          	lfsr	2,26
 11550  00287A  51D5               	movf	trace_path@dptr& (0+255),w,b
 11551  00287C  26D9               	addwf	fsr2l,f,c
 11552  00287E  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
 11553  002880  22DA               	addwfc	fsr2h,f,c
 11554  002882  CFDE F0D2          	movff	postinc2,trace_path@clust
 11555  002886  CFDD F0D3          	movff	postdec2,trace_path@clust+1
 11556                           
 11557                           ; BSR set to: 0
 11558                           ;tff.c: 553: dj->clust = dj->sclust = clust;
 11559  00288A  EE20 F006          	lfsr	2,6
 11560  00288E  51C0               	movf	trace_path@dj& (0+255),w,b
 11561  002890  26D9               	addwf	fsr2l,f,c
 11562  002892  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11563  002894  22DA               	addwfc	fsr2h,f,c
 11564  002896  C0D2  FFDE         	movff	trace_path@clust,postinc2
 11565  00289A  C0D3  FFDD         	movff	trace_path@clust+1,postdec2
 11566  00289E  EE10 F008          	lfsr	1,8
 11567  0028A2  51C0               	movf	trace_path@dj& (0+255),w,b
 11568  0028A4  26E1               	addwf	fsr1l,f,c
 11569  0028A6  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11570  0028A8  22E2               	addwfc	fsr1h,f,c
 11571  0028AA  CFDE FFE6          	movff	postinc2,postinc1
 11572  0028AE  CFDD FFE5          	movff	postdec2,postdec1
 11573                           
 11574                           ; BSR set to: 0
 11575                           ;tff.c: 554: dj->sect = clust2sect(clust);
 11576  0028B2  C0D2  F06C         	movff	trace_path@clust,clust2sect@clust
 11577  0028B6  C0D3  F06D         	movff	trace_path@clust+1,clust2sect@clust+1
 11578  0028BA  EC0B  F022         	call	_clust2sect	;wreg free
 11579  0028BE  0100               	movlb	0	; () banked
 11580  0028C0  EE20 F00A          	lfsr	2,10
 11581  0028C4  51C0               	movf	trace_path@dj& (0+255),w,b
 11582  0028C6  26D9               	addwf	fsr2l,f,c
 11583  0028C8  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11584  0028CA  22DA               	addwfc	fsr2h,f,c
 11585  0028CC  C06C  FFDE         	movff	?_clust2sect,postinc2
 11586  0028D0  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 11587  0028D4  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 11588  0028D8  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 11589                           
 11590                           ; BSR set to: 0
 11591                           ;tff.c: 555: dj->index = 2;
 11592  0028DC  EE20 F002          	lfsr	2,2
 11593  0028E0  51C0               	movf	trace_path@dj& (0+255),w,b
 11594  0028E2  26D9               	addwf	fsr2l,f,c
 11595  0028E4  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11596  0028E6  22DA               	addwfc	fsr2h,f,c
 11597  0028E8  0E02               	movlw	2
 11598  0028EA  6EDE               	movwf	postinc2,c
 11599  0028EC  0E00               	movlw	0
 11600  0028EE  6EDD               	movwf	postdec2,c
 11601                           
 11602                           ;tff.c: 556: }
 11603  0028F0  D716               	goto	l1186
 11604  0028F2                     __end_of_trace_path:
 11605                           	opt stack 0
 11606                           tosu	equ	0xFFF
 11607                           tosh	equ	0xFFE
 11608                           tosl	equ	0xFFD
 11609                           pclath	equ	0xFFA
 11610                           tblptru	equ	0xFF8
 11611                           tblptrh	equ	0xFF7
 11612                           tblptrl	equ	0xFF6
 11613                           tablat	equ	0xFF5
 11614                           prodh	equ	0xFF4
 11615                           prodl	equ	0xFF3
 11616                           intcon	equ	0xFF2
 11617                           intcon2	equ	0xFF1
 11618                           intcon3	equ	0xFF0
 11619                           indf0	equ	0xFEF
 11620                           postinc0	equ	0xFEE
 11621                           fsr0h	equ	0xFEA
 11622                           fsr0l	equ	0xFE9
 11623                           wreg	equ	0xFE8
 11624                           indf1	equ	0xFE7
 11625                           postinc1	equ	0xFE6
 11626                           postdec1	equ	0xFE5
 11627                           plusw1	equ	0xFE3
 11628                           fsr1h	equ	0xFE2
 11629                           fsr1l	equ	0xFE1
 11630                           indf2	equ	0xFDF
 11631                           postinc2	equ	0xFDE
 11632                           postdec2	equ	0xFDD
 11633                           plusw2	equ	0xFDB
 11634                           fsr2h	equ	0xFDA
 11635                           fsr2l	equ	0xFD9
 11636                           status	equ	0xFD8
 11637                           
 11638 ;; *************** function _make_dirfile *****************
 11639 ;; Defined at:
 11640 ;;		line 438 in file "bibliotecas/tff.c"
 11641 ;; Parameters:    Size  Location     Type
 11642 ;;  path            2    8[BANK0 ] PTR PTR const unsigned c
 11643 ;;		 -> trace_path@path(2), 
 11644 ;;  dirname         2   10[BANK0 ] PTR unsigned char 
 11645 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 11646 ;; Auto vars:     Size  Location     Type
 11647 ;;  c               1   20[BANK0 ] unsigned char 
 11648 ;;  n               1   19[BANK0 ] unsigned char 
 11649 ;;  a               1   18[BANK0 ] unsigned char 
 11650 ;;  t               1   17[BANK0 ] unsigned char 
 11651 ;;  b               1   16[BANK0 ] unsigned char 
 11652 ;; Return value:  Size  Location     Type
 11653 ;;                  1    wreg      unsigned char 
 11654 ;; Registers used:
 11655 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11656 ;; Tracked objects:
 11657 ;;		On entry : 0/0
 11658 ;;		On exit  : 0/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11661 ;;      Params:         0       4       0       0       0       0       0       0       0
 11662 ;;      Locals:         0       7       0       0       0       0       0       0       0
 11663 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11664 ;;      Totals:         0      13       0       0       0       0       0       0       0
 11665 ;;Total ram usage:       13 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    4
 11668 ;; This function calls:
 11669 ;;		_memset
 11670 ;; This function is called by:
 11671 ;;		_trace_path
 11672 ;; This function uses a non-reentrant model
 11673 ;;
 11674                           
 11675                           	psect	text39
 11676  003938                     __ptext39:
 11677                           	opt stack 0
 11678  003938                     _make_dirfile:
 11679                           	opt stack 21
 11680                           
 11681                           ;tff.c: 443: BYTE n, t, c, a, b;
 11682                           ;tff.c: 446: memset(dirname, ' ', 8+3);
 11683                           
 11684                           ;incstack = 0
 11685  003938  C06A  F060         	movff	make_dirfile@dirname,memset@p1
 11686  00393C  C06B  F061         	movff	make_dirfile@dirname+1,memset@p1+1
 11687  003940  0E00               	movlw	0
 11688  003942  0100               	movlb	0	; () banked
 11689  003944  6F63               	movwf	(memset@c+1)& (0+255),b
 11690  003946  0E20               	movlw	32
 11691  003948  6F62               	movwf	memset@c& (0+255),b
 11692  00394A  0E00               	movlw	0
 11693  00394C  6F65               	movwf	(memset@n+1)& (0+255),b
 11694  00394E  0E0B               	movlw	11
 11695  003950  6F64               	movwf	memset@n& (0+255),b
 11696  003952  ECCB  F02A         	call	_memset	;wreg free
 11697                           
 11698                           ;tff.c: 447: a = 0; b = 0x18;
 11699  003956  0E00               	movlw	0
 11700  003958  0100               	movlb	0	; () banked
 11701  00395A  6F72               	movwf	make_dirfile@a& (0+255),b
 11702                           
 11703                           ; BSR set to: 0
 11704  00395C  0E18               	movlw	24
 11705  00395E  6F70               	movwf	make_dirfile@b& (0+255),b
 11706                           
 11707                           ; BSR set to: 0
 11708                           ;tff.c: 448: n = 0; t = 8;
 11709  003960  0E00               	movlw	0
 11710  003962  6F73               	movwf	make_dirfile@n& (0+255),b
 11711                           
 11712                           ; BSR set to: 0
 11713  003964  0E08               	movlw	8
 11714  003966  6F71               	movwf	make_dirfile@t& (0+255),b
 11715  003968                     
 11716                           ; BSR set to: 0
 11717                           ;tff.c: 450: c = *(*path)++;
 11718                           
 11719                           ; BSR set to: 0
 11720  003968  C068  FFD9         	movff	make_dirfile@path,fsr2l
 11721  00396C  C069  FFDA         	movff	make_dirfile@path+1,fsr2h
 11722  003970  CFDF F06C          	movff	indf2,??_make_dirfile
 11723  003974  0E01               	movlw	1
 11724  003976  26DE               	addwf	postinc2,f,c
 11725  003978  CFDF F06D          	movff	indf2,??_make_dirfile+1
 11726  00397C  0E00               	movlw	0
 11727  00397E  22DD               	addwfc	postdec2,f,c
 11728  003980  C06C  FFF6         	movff	??_make_dirfile,tblptrl
 11729  003984  C06D  FFF7         	movff	??_make_dirfile+1,tblptrh
 11730  003988  6AF8               	clrf	tblptru,c
 11731  00398A  0E07               	movlw	(high __ramtop+-1)
 11732  00398C  64F7               	cpfsgt	tblptrh,c
 11733  00398E  D003               	bra	u13817
 11734  003990  0008               	tblrd		*
 11735  003992  50F5               	movf	tablat,w,c
 11736  003994  D005               	bra	u13810
 11737  003996                     u13817:
 11738  003996  CFF6 FFE9          	movff	tblptrl,fsr0l
 11739  00399A  CFF7 FFEA          	movff	tblptrh,fsr0h
 11740  00399E  50EF               	movf	indf0,w,c
 11741  0039A0                     u13810:
 11742  0039A0  0100               	movlb	0	; () banked
 11743  0039A2  6F74               	movwf	make_dirfile@c& (0+255),b
 11744                           
 11745                           ; BSR set to: 0
 11746                           ;tff.c: 451: if (c == '\0' || c == '/') {
 11747  0039A4  5174               	movf	make_dirfile@c& (0+255),w,b
 11748  0039A6  B4D8               	btfsc	status,2,c
 11749  0039A8  D004               	goto	u13830
 11750                           
 11751                           ; BSR set to: 0
 11752  0039AA  0E2F               	movlw	47
 11753  0039AC  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11754  0039AE  A4D8               	btfss	status,2,c
 11755  0039B0  D013               	goto	l1140
 11756  0039B2                     u13830:
 11757                           
 11758                           ; BSR set to: 0
 11759                           ;tff.c: 452: if (n == 0) break;
 11760                           
 11761                           ; BSR set to: 0
 11762  0039B2  5173               	movf	make_dirfile@n& (0+255),w,b
 11763  0039B4  B4D8               	btfsc	status,2,c
 11764  0039B6  D075               	goto	l1144
 11765                           
 11766                           ; BSR set to: 0
 11767                           
 11768                           ; BSR set to: 0
 11769                           
 11770                           ; BSR set to: 0
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;tff.c: 453: dirname[11] = 1 ? (a & b) : 0;
 11774                           
 11775                           ; BSR set to: 0
 11776  0039B8  5172               	movf	make_dirfile@a& (0+255),w,b
 11777  0039BA  1570               	andwf	make_dirfile@b& (0+255),w,b
 11778  0039BC  6F6C               	movwf	??_make_dirfile& (0+255),b
 11779  0039BE  516C               	movf	??_make_dirfile& (0+255),w,b
 11780  0039C0  6F6E               	movwf	_make_dirfile$2123& (0+255),b
 11781  0039C2  6B6F               	clrf	(_make_dirfile$2123+1)& (0+255),b
 11782                           
 11783                           ; BSR set to: 0
 11784                           
 11785                           ; BSR set to: 0
 11786  0039C4  EE20 F00B          	lfsr	2,11
 11787  0039C8  516A               	movf	make_dirfile@dirname& (0+255),w,b
 11788  0039CA  26D9               	addwf	fsr2l,f,c
 11789  0039CC  516B               	movf	(make_dirfile@dirname+1)& (0+255),w,b
 11790  0039CE  22DA               	addwfc	fsr2h,f,c
 11791  0039D0  C06E  FFDF         	movff	_make_dirfile$2123,indf2
 11792                           
 11793                           ; BSR set to: 0
 11794                           ;tff.c: 454: return c;
 11795  0039D4  5174               	movf	make_dirfile@c& (0+255),w,b
 11796                           
 11797                           ; BSR set to: 0
 11798  0039D6  0012               	return	
 11799  0039D8                     l1140:
 11800                           
 11801                           ; BSR set to: 0
 11802                           ;tff.c: 455: }
 11803                           ;tff.c: 456: if (c <= ' ' || c == 0x7F) break;
 11804                           
 11805                           ; BSR set to: 0
 11806  0039D8  0E20               	movlw	32
 11807  0039DA  6574               	cpfsgt	make_dirfile@c& (0+255),b
 11808  0039DC  D062               	goto	l1144
 11809                           
 11810                           ; BSR set to: 0
 11811  0039DE  0E7F               	movlw	127
 11812  0039E0  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11813  0039E2  B4D8               	btfsc	status,2,c
 11814  0039E4  D05E               	goto	l1144
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;tff.c: 457: if (c == '.') {
 11818                           
 11819                           ; BSR set to: 0
 11820                           
 11821                           ; BSR set to: 0
 11822  0039E6  0E2E               	movlw	46
 11823  0039E8  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11824  0039EA  A4D8               	btfss	status,2,c
 11825  0039EC  D00C               	goto	l1156
 11826                           
 11827                           ; BSR set to: 0
 11828                           ;tff.c: 458: if (!(a & 1) && n >= 1 && n <= 8) {
 11829  0039EE  B172               	btfsc	make_dirfile@a& (0+255),0,b
 11830  0039F0  D058               	goto	l1144
 11831                           
 11832                           ; BSR set to: 0
 11833  0039F2  5173               	movf	make_dirfile@n& (0+255),w,b
 11834  0039F4  B4D8               	btfsc	status,2,c
 11835  0039F6  D055               	goto	l1144
 11836                           
 11837                           ; BSR set to: 0
 11838  0039F8  0E09               	movlw	9
 11839  0039FA  6173               	cpfslt	make_dirfile@n& (0+255),b
 11840  0039FC  D052               	goto	l1144
 11841                           
 11842                           ; BSR set to: 0
 11843                           ;tff.c: 459: n = 8; t = 11; continue;
 11844  0039FE  0E08               	movlw	8
 11845  003A00  6F73               	movwf	make_dirfile@n& (0+255),b
 11846  003A02  0E0B               	movlw	11
 11847  003A04  D7B0               	goto	L8
 11848  003A06                     l1156:
 11849                           
 11850                           ; BSR set to: 0
 11851                           ;tff.c: 469: }
 11852                           ;tff.c: 470: if (c == '"') break;
 11853                           
 11854                           ; BSR set to: 0
 11855  003A06  0E22               	movlw	34
 11856  003A08  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11857  003A0A  B4D8               	btfsc	status,2,c
 11858  003A0C  D04A               	goto	l1144
 11859                           
 11860                           ; BSR set to: 0
 11861                           ;tff.c: 471: if (c <= ')') goto md_l1;
 11862                           
 11863                           ; BSR set to: 0
 11864                           
 11865                           ; BSR set to: 0
 11866  003A0E  0E2A               	movlw	42
 11867  003A10  6174               	cpfslt	make_dirfile@c& (0+255),b
 11868  003A12  D001               	goto	l1164
 11869  003A14  D035               	goto	l1182
 11870  003A16                     l1164:
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;tff.c: 472: if (c <= ',') break;
 11874                           
 11875                           ; BSR set to: 0
 11876  003A16  0E2D               	movlw	45
 11877  003A18  6174               	cpfslt	make_dirfile@c& (0+255),b
 11878  003A1A  D001               	goto	l1166
 11879  003A1C  D042               	goto	l1144
 11880  003A1E                     l1166:
 11881                           
 11882                           ; BSR set to: 0
 11883                           ;tff.c: 473: if (c <= '9') goto md_l1;
 11884                           
 11885                           ; BSR set to: 0
 11886  003A1E  0E3A               	movlw	58
 11887  003A20  6174               	cpfslt	make_dirfile@c& (0+255),b
 11888  003A22  D001               	goto	l1167
 11889  003A24  D02D               	goto	l1182
 11890  003A26                     l1167:
 11891                           
 11892                           ; BSR set to: 0
 11893                           ;tff.c: 474: if (c <= '?') break;
 11894                           
 11895                           ; BSR set to: 0
 11896  003A26  0E40               	movlw	64
 11897  003A28  6174               	cpfslt	make_dirfile@c& (0+255),b
 11898  003A2A  D001               	goto	l1168
 11899  003A2C  D03A               	goto	l1144
 11900  003A2E                     l1168:
 11901                           
 11902                           ; BSR set to: 0
 11903                           ;tff.c: 475: if (!(a & 1)) {
 11904  003A2E  B172               	btfsc	make_dirfile@a& (0+255),0,b
 11905  003A30  D027               	goto	l1182
 11906                           
 11907                           ; BSR set to: 0
 11908                           ;tff.c: 476: if (c == '|') break;
 11909  003A32  0E7C               	movlw	124
 11910  003A34  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11911  003A36  B4D8               	btfsc	status,2,c
 11912  003A38  D034               	goto	l1144
 11913                           
 11914                           ; BSR set to: 0
 11915                           ;tff.c: 477: if (c >= '[' && c <= ']') break;
 11916                           
 11917                           ; BSR set to: 0
 11918                           
 11919                           ; BSR set to: 0
 11920  003A3A  0E5A               	movlw	90
 11921  003A3C  6574               	cpfsgt	make_dirfile@c& (0+255),b
 11922  003A3E  D004               	goto	l1171
 11923                           
 11924                           ; BSR set to: 0
 11925  003A40  0E5E               	movlw	94
 11926  003A42  6174               	cpfslt	make_dirfile@c& (0+255),b
 11927  003A44  D001               	goto	l1171
 11928  003A46  D02D               	goto	l1144
 11929  003A48                     l1171:
 11930                           
 11931                           ; BSR set to: 0
 11932                           
 11933                           ; BSR set to: 0
 11934  003A48  0E40               	movlw	64
 11935  003A4A  6574               	cpfsgt	make_dirfile@c& (0+255),b
 11936  003A4C  D00A               	goto	l1176
 11937                           
 11938                           ; BSR set to: 0
 11939  003A4E  0E5B               	movlw	91
 11940  003A50  6174               	cpfslt	make_dirfile@c& (0+255),b
 11941  003A52  D007               	goto	l1176
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;tff.c: 479: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
 11945  003A54  0E08               	movlw	8
 11946  003A56  1971               	xorwf	make_dirfile@t& (0+255),w,b
 11947  003A58  A4D8               	btfss	status,2,c
 11948  003A5A  D002               	goto	l1174
 11949                           
 11950                           ; BSR set to: 0
 11951  003A5C  9770               	bcf	make_dirfile@b& (0+255),3,b
 11952  003A5E  D001               	goto	l1176
 11953  003A60                     l1174:
 11954                           
 11955                           ; BSR set to: 0
 11956                           
 11957                           ; BSR set to: 0
 11958  003A60  9970               	bcf	make_dirfile@b& (0+255),4,b
 11959  003A62                     l1176:
 11960                           
 11961                           ; BSR set to: 0
 11962                           ;tff.c: 480: if (c >= 'a' && c <= 'z') {
 11963                           
 11964                           ; BSR set to: 0
 11965                           
 11966                           ; BSR set to: 0
 11967  003A62  0E60               	movlw	96
 11968  003A64  6574               	cpfsgt	make_dirfile@c& (0+255),b
 11969  003A66  D00C               	goto	l1182
 11970                           
 11971                           ; BSR set to: 0
 11972  003A68  0E7B               	movlw	123
 11973  003A6A  6174               	cpfslt	make_dirfile@c& (0+255),b
 11974  003A6C  D009               	goto	l1182
 11975                           
 11976                           ; BSR set to: 0
 11977                           ;tff.c: 482: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
 11978  003A6E  0E20               	movlw	32
 11979  003A70  5F74               	subwf	make_dirfile@c& (0+255),f,b
 11980  003A72  0E08               	movlw	8
 11981  003A74  1971               	xorwf	make_dirfile@t& (0+255),w,b
 11982  003A76  A4D8               	btfss	status,2,c
 11983  003A78  D002               	goto	l1180
 11984                           
 11985                           ; BSR set to: 0
 11986  003A7A  8772               	bsf	make_dirfile@a& (0+255),3,b
 11987  003A7C  D001               	goto	l1182
 11988  003A7E                     l1180:
 11989                           
 11990                           ; BSR set to: 0
 11991                           
 11992                           ; BSR set to: 0
 11993  003A7E  8972               	bsf	make_dirfile@a& (0+255),4,b
 11994  003A80                     l1182:
 11995                           
 11996                           ; BSR set to: 0
 11997                           ;tff.c: 486: a &= 0xFE;
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;tff.c: 483: }
 12001                           ;tff.c: 484: }
 12002                           ;tff.c: 485: md_l1:
 12003                           
 12004                           ; BSR set to: 0
 12005                           
 12006                           ; BSR set to: 0
 12007                           
 12008                           ; BSR set to: 0
 12009  003A80  9172               	bcf	make_dirfile@a& (0+255),0,b
 12010                           
 12011                           ; BSR set to: 0
 12012                           ;tff.c: 488: if (n >= t) break;
 12013                           
 12014                           ; BSR set to: 0
 12015                           
 12016                           ;tff.c: 487: md_l2:
 12017  003A82  5171               	movf	make_dirfile@t& (0+255),w,b
 12018  003A84  5D73               	subwf	make_dirfile@n& (0+255),w,b
 12019  003A86  B0D8               	btfsc	status,0,c
 12020  003A88  D00C               	goto	l1144
 12021                           
 12022                           ; BSR set to: 0
 12023                           ;tff.c: 489: dirname[n++] = c;
 12024                           
 12025                           ; BSR set to: 0
 12026                           
 12027                           ; BSR set to: 0
 12028  003A8A  5173               	movf	make_dirfile@n& (0+255),w,b
 12029  003A8C  0D01               	mullw	1
 12030  003A8E  50F3               	movf	prodl,w,c
 12031  003A90  256A               	addwf	make_dirfile@dirname& (0+255),w,b
 12032  003A92  6ED9               	movwf	fsr2l,c
 12033  003A94  50F4               	movf	prodh,w,c
 12034  003A96  216B               	addwfc	(make_dirfile@dirname+1)& (0+255),w,b
 12035  003A98  6EDA               	movwf	fsr2h,c
 12036  003A9A  C074  FFDF         	movff	make_dirfile@c,indf2
 12037                           
 12038                           ; BSR set to: 0
 12039  003A9E  2B73               	incf	make_dirfile@n& (0+255),f,b
 12040                           
 12041                           ; BSR set to: 0
 12042                           ;tff.c: 490: }
 12043  003AA0  D763               	goto	l1139
 12044  003AA2                     l1144:
 12045                           
 12046                           ; BSR set to: 0
 12047                           ;tff.c: 491: return 1;
 12048                           
 12049                           ; BSR set to: 0
 12050  003AA2  0E01               	movlw	1
 12051  003AA4  0012               	return	
 12052  003AA6                     __end_of_make_dirfile:
 12053                           	opt stack 0
 12054                           tosu	equ	0xFFF
 12055                           tosh	equ	0xFFE
 12056                           tosl	equ	0xFFD
 12057                           pclath	equ	0xFFA
 12058                           tblptru	equ	0xFF8
 12059                           tblptrh	equ	0xFF7
 12060                           tblptrl	equ	0xFF6
 12061                           tablat	equ	0xFF5
 12062                           prodh	equ	0xFF4
 12063                           prodl	equ	0xFF3
 12064                           intcon	equ	0xFF2
 12065                           intcon2	equ	0xFF1
 12066                           intcon3	equ	0xFF0
 12067                           indf0	equ	0xFEF
 12068                           postinc0	equ	0xFEE
 12069                           fsr0h	equ	0xFEA
 12070                           fsr0l	equ	0xFE9
 12071                           wreg	equ	0xFE8
 12072                           indf1	equ	0xFE7
 12073                           postinc1	equ	0xFE6
 12074                           postdec1	equ	0xFE5
 12075                           plusw1	equ	0xFE3
 12076                           fsr1h	equ	0xFE2
 12077                           fsr1l	equ	0xFE1
 12078                           indf2	equ	0xFDF
 12079                           postinc2	equ	0xFDE
 12080                           postdec2	equ	0xFDD
 12081                           plusw2	equ	0xFDB
 12082                           fsr2h	equ	0xFDA
 12083                           fsr2l	equ	0xFD9
 12084                           status	equ	0xFD8
 12085                           
 12086 ;; *************** function _reserve_direntry *****************
 12087 ;; Defined at:
 12088 ;;		line 567 in file "bibliotecas/tff.c"
 12089 ;; Parameters:    Size  Location     Type
 12090 ;;  dj              2  100[BANK0 ] PTR struct _DIR_E
 12091 ;;		 -> f_open@dj(14), 
 12092 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
 12093 ;;		 -> f_open@dir(2), 
 12094 ;; Auto vars:     Size  Location     Type
 12095 ;;  sector          4  106[BANK0 ] unsigned long 
 12096 ;;  fs              2  116[BANK0 ] PTR struct _FATFS
 12097 ;;		 -> NULL(0), fs(544), 
 12098 ;;  clust           2  114[BANK0 ] unsigned short 
 12099 ;;  dptr            2  111[BANK0 ] PTR unsigned char 
 12100 ;;		 -> fs.win(512), NULL(0), fs(544), 
 12101 ;;  c               1  113[BANK0 ] unsigned char 
 12102 ;;  n               1  110[BANK0 ] unsigned char 
 12103 ;; Return value:  Size  Location     Type
 12104 ;;                  1    wreg      enum E155
 12105 ;; Registers used:
 12106 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12107 ;; Tracked objects:
 12108 ;;		On entry : 0/0
 12109 ;;		On exit  : 0/0
 12110 ;;		Unchanged: 0/0
 12111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12112 ;;      Params:         0       4       0       0       0       0       0       0       0
 12113 ;;      Locals:         0      12       0       0       0       0       0       0       0
 12114 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12115 ;;      Totals:         0      18       0       0       0       0       0       0       0
 12116 ;;Total ram usage:       18 bytes
 12117 ;; Hardware stack levels used:    1
 12118 ;; Hardware stack levels required when called:   11
 12119 ;; This function calls:
 12120 ;;		_clust2sect
 12121 ;;		_create_chain
 12122 ;;		_disk_write
 12123 ;;		_memset
 12124 ;;		_move_window
 12125 ;;		_next_dir_entry
 12126 ;; This function is called by:
 12127 ;;		_f_open
 12128 ;; This function uses a non-reentrant model
 12129 ;;
 12130                           
 12131                           	psect	text40
 12132  0028F2                     __ptext40:
 12133                           	opt stack 0
 12134  0028F2                     _reserve_direntry:
 12135                           	opt stack 15
 12136                           
 12137                           ;tff.c: 572: CLUST clust;
 12138                           ;tff.c: 573: DWORD sector;
 12139                           ;tff.c: 574: BYTE c, n, *dptr;
 12140                           ;tff.c: 575: FATFS *fs = dj->fs;
 12141                           
 12142                           ; BSR set to: 0
 12143                           ;incstack = 0
 12144  0028F2  0100               	movlb	0	; () banked
 12145  0028F4  EE20 F004          	lfsr	2,4
 12146  0028F8  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12147  0028FA  26D9               	addwf	fsr2l,f,c
 12148  0028FC  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12149  0028FE  22DA               	addwfc	fsr2h,f,c
 12150  002900  CFDE F0D4          	movff	postinc2,reserve_direntry@fs
 12151  002904  CFDD F0D5          	movff	postdec2,reserve_direntry@fs+1
 12152                           
 12153                           ;tff.c: 579: clust = dj->sclust;
 12154  002908  EE20 F006          	lfsr	2,6
 12155  00290C  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12156  00290E  26D9               	addwf	fsr2l,f,c
 12157  002910  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12158  002912  22DA               	addwfc	fsr2h,f,c
 12159  002914  CFDE F0D2          	movff	postinc2,reserve_direntry@clust
 12160  002918  CFDD F0D3          	movff	postdec2,reserve_direntry@clust+1
 12161                           
 12162                           ; BSR set to: 0
 12163                           ;tff.c: 580: if (clust != 0) {
 12164  00291C  51D2               	movf	reserve_direntry@clust& (0+255),w,b
 12165  00291E  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12166  002920  B4D8               	btfsc	status,2,c
 12167  002922  D020               	goto	l1209
 12168                           
 12169                           ; BSR set to: 0
 12170                           ;tff.c: 581: dj->clust = clust;
 12171  002924  EE20 F008          	lfsr	2,8
 12172  002928  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12173  00292A  26D9               	addwf	fsr2l,f,c
 12174  00292C  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12175  00292E  22DA               	addwfc	fsr2h,f,c
 12176  002930  C0D2  FFDE         	movff	reserve_direntry@clust,postinc2
 12177  002934  C0D3  FFDD         	movff	reserve_direntry@clust+1,postdec2
 12178                           
 12179                           ; BSR set to: 0
 12180                           ;tff.c: 582: dj->sect = clust2sect(clust);
 12181  002938  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
 12182  00293C  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 12183  002940  EC0B  F022         	call	_clust2sect	;wreg free
 12184  002944  0100               	movlb	0	; () banked
 12185  002946  EE20 F00A          	lfsr	2,10
 12186  00294A  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12187  00294C  26D9               	addwf	fsr2l,f,c
 12188  00294E  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12189  002950  22DA               	addwfc	fsr2h,f,c
 12190  002952  C06C  FFDE         	movff	?_clust2sect,postinc2
 12191  002956  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 12192  00295A  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 12193  00295E  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 12194                           
 12195                           ;tff.c: 583: } else {
 12196  002962  D014               	goto	l1210
 12197  002964                     l1209:
 12198                           
 12199                           ; BSR set to: 0
 12200                           ;tff.c: 584: dj->sect = fs->dirbase;
 12201                           
 12202                           ; BSR set to: 0
 12203  002964  EE20 F00C          	lfsr	2,12
 12204  002968  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 12205  00296A  26D9               	addwf	fsr2l,f,c
 12206  00296C  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12207  00296E  22DA               	addwfc	fsr2h,f,c
 12208  002970  EE10 F00A          	lfsr	1,10
 12209  002974  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12210  002976  26E1               	addwf	fsr1l,f,c
 12211  002978  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12212  00297A  22E2               	addwfc	fsr1h,f,c
 12213  00297C  CFDE FFE6          	movff	postinc2,postinc1
 12214  002980  CFDE FFE6          	movff	postinc2,postinc1
 12215  002984  CFDE FFE6          	movff	postinc2,postinc1
 12216  002988  CFDE FFE6          	movff	postinc2,postinc1
 12217  00298C                     l1210:
 12218                           
 12219                           ; BSR set to: 0
 12220                           ;tff.c: 585: }
 12221                           ;tff.c: 586: dj->index = 0;
 12222                           
 12223                           ; BSR set to: 0
 12224  00298C  EE20 F002          	lfsr	2,2
 12225  002990  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12226  002992  26D9               	addwf	fsr2l,f,c
 12227  002994  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12228  002996  22DA               	addwfc	fsr2h,f,c
 12229  002998  0E00               	movlw	0
 12230  00299A  6EDE               	movwf	postinc2,c
 12231  00299C  0E00               	movlw	0
 12232  00299E  6EDD               	movwf	postdec2,c
 12233  0029A0                     
 12234                           ;tff.c: 589: if (!move_window(dj->sect)) return FR_RW_ERROR;
 12235                           
 12236                           ; BSR set to: 0
 12237  0029A0  0100               	movlb	0	; () banked
 12238  0029A2  EE20 F00A          	lfsr	2,10
 12239  0029A6  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12240  0029A8  26D9               	addwf	fsr2l,f,c
 12241  0029AA  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12242  0029AC  22DA               	addwfc	fsr2h,f,c
 12243  0029AE  CFDE F08B          	movff	postinc2,move_window@sector
 12244  0029B2  CFDE F08C          	movff	postinc2,move_window@sector+1
 12245  0029B6  CFDE F08D          	movff	postinc2,move_window@sector+2
 12246  0029BA  CFDE F08E          	movff	postinc2,move_window@sector+3
 12247  0029BE  ECFD  F01A         	call	_move_window	;wreg free
 12248  0029C2  0900               	iorlw	0
 12249  0029C4  A4D8               	btfss	status,2,c
 12250  0029C6  D002               	goto	l1212
 12251  0029C8  0E08               	movlw	8
 12252  0029CA  0012               	return	
 12253  0029CC                     l1212:
 12254                           
 12255                           ;tff.c: 590: dptr = &fs->win[(dj->index & 15) * 32];
 12256  0029CC  0100               	movlb	0	; () banked
 12257  0029CE  EE20 F002          	lfsr	2,2
 12258  0029D2  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12259  0029D4  26D9               	addwf	fsr2l,f,c
 12260  0029D6  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12261  0029D8  22DA               	addwfc	fsr2h,f,c
 12262  0029DA  CFDE F0C8          	movff	postinc2,??_reserve_direntry
 12263  0029DE  CFDD F0C9          	movff	postdec2,??_reserve_direntry+1
 12264  0029E2  0E0F               	movlw	15
 12265  0029E4  17C8               	andwf	??_reserve_direntry& (0+255),f,b
 12266  0029E6  0E00               	movlw	0
 12267  0029E8  17C9               	andwf	(??_reserve_direntry+1)& (0+255),f,b
 12268  0029EA  0E05               	movlw	5
 12269  0029EC                     u14645:
 12270  0029EC  90D8               	bcf	status,0,c
 12271  0029EE  37C8               	rlcf	??_reserve_direntry& (0+255),f,b
 12272  0029F0  37C9               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
 12273  0029F2  2EE8               	decfsz	wreg,f,c
 12274  0029F4  D7FB               	goto	u14645
 12275  0029F6  0E20               	movlw	32
 12276  0029F8  27C8               	addwf	??_reserve_direntry& (0+255),f,b
 12277  0029FA  0E00               	movlw	0
 12278  0029FC  23C9               	addwfc	(??_reserve_direntry+1)& (0+255),f,b
 12279  0029FE  51C8               	movf	??_reserve_direntry& (0+255),w,b
 12280  002A00  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 12281  002A02  6FCF               	movwf	reserve_direntry@dptr& (0+255),b
 12282  002A04  51C9               	movf	(??_reserve_direntry+1)& (0+255),w,b
 12283  002A06  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12284  002A08  6FD0               	movwf	(reserve_direntry@dptr+1)& (0+255),b
 12285                           
 12286                           ; BSR set to: 0
 12287                           ;tff.c: 591: c = dptr[0];
 12288  002A0A  C0CF  FFD9         	movff	reserve_direntry@dptr,fsr2l
 12289  002A0E  C0D0  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
 12290  002A12  50DF               	movf	indf2,w,c
 12291  002A14  6FD1               	movwf	reserve_direntry@c& (0+255),b
 12292                           
 12293                           ; BSR set to: 0
 12294                           ;tff.c: 592: if (c == 0 || c == 0xE5) {
 12295  002A16  51D1               	movf	reserve_direntry@c& (0+255),w,b
 12296  002A18  B4D8               	btfsc	status,2,c
 12297  002A1A  D004               	goto	u14660
 12298                           
 12299                           ; BSR set to: 0
 12300  002A1C  0EE5               	movlw	229
 12301  002A1E  19D1               	xorwf	reserve_direntry@c& (0+255),w,b
 12302  002A20  A4D8               	btfss	status,2,c
 12303  002A22  D00A               	goto	l1214
 12304  002A24                     u14660:
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;tff.c: 593: *dir = dptr; return FR_OK;
 12308                           
 12309                           ; BSR set to: 0
 12310  002A24  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
 12311  002A28  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
 12312  002A2C  C0CF  FFDE         	movff	reserve_direntry@dptr,postinc2
 12313  002A30  C0D0  FFDD         	movff	reserve_direntry@dptr+1,postdec2
 12314                           
 12315                           ; BSR set to: 0
 12316  002A34  0E00               	movlw	0
 12317                           
 12318                           ; BSR set to: 0
 12319  002A36  0012               	return	
 12320  002A38                     l1214:
 12321                           
 12322                           ; BSR set to: 0
 12323                           ;tff.c: 594: }
 12324                           ;tff.c: 595: } while (next_dir_entry(dj));
 12325                           
 12326                           ; BSR set to: 0
 12327  002A38  C0C4  F0B3         	movff	reserve_direntry@dj,next_dir_entry@dj
 12328  002A3C  C0C5  F0B4         	movff	reserve_direntry@dj+1,next_dir_entry@dj+1
 12329  002A40  ECD8  F01B         	call	_next_dir_entry	;wreg free
 12330  002A44  0900               	iorlw	0
 12331  002A46  A4D8               	btfss	status,2,c
 12332  002A48  D7AB               	goto	l1211
 12333                           
 12334                           ;tff.c: 599: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
 12335  002A4A  0100               	movlb	0	; () banked
 12336  002A4C  51D2               	movf	reserve_direntry@clust& (0+255),w,b
 12337  002A4E  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12338  002A50  B4D8               	btfsc	status,2,c
 12339  002A52  D015               	goto	u14690
 12340                           
 12341                           ; BSR set to: 0
 12342  002A54  EE20 F008          	lfsr	2,8
 12343  002A58  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 12344  002A5A  26D9               	addwf	fsr2l,f,c
 12345  002A5C  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 12346  002A5E  22DA               	addwfc	fsr2h,f,c
 12347  002A60  CFDE F0B6          	movff	postinc2,create_chain@clust
 12348  002A64  CFDD F0B7          	movff	postdec2,create_chain@clust+1
 12349  002A68  EC1D  F01A         	call	_create_chain	;wreg free
 12350  002A6C  C0B6  F0D2         	movff	?_create_chain,reserve_direntry@clust
 12351  002A70  C0B7  F0D3         	movff	?_create_chain+1,reserve_direntry@clust+1
 12352  002A74  0100               	movlb	0	; () banked
 12353  002A76  51D2               	movf	reserve_direntry@clust& (0+255),w,b
 12354  002A78  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12355  002A7A  A4D8               	btfss	status,2,c
 12356  002A7C  D002               	goto	l1218
 12357  002A7E                     u14690:
 12358                           
 12359                           ; BSR set to: 0
 12360                           
 12361                           ; BSR set to: 0
 12362  002A7E  0E06               	movlw	6
 12363                           
 12364                           ; BSR set to: 0
 12365  002A80  0012               	return	
 12366  002A82                     l1218:
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;tff.c: 600: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
 12370                           
 12371                           ; BSR set to: 0
 12372  002A82  05D2               	decf	reserve_direntry@clust& (0+255),w,b
 12373  002A84  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12374  002A86  B4D8               	btfsc	status,2,c
 12375  002A88  D00D               	goto	u14710
 12376                           
 12377                           ; BSR set to: 0
 12378  002A8A  0E00               	movlw	0
 12379  002A8C  6F8B               	movwf	move_window@sector& (0+255),b
 12380  002A8E  0E00               	movlw	0
 12381  002A90  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 12382  002A92  0E00               	movlw	0
 12383  002A94  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 12384  002A96  0E00               	movlw	0
 12385  002A98  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 12386  002A9A  ECFD  F01A         	call	_move_window	;wreg free
 12387  002A9E  0900               	iorlw	0
 12388  002AA0  A4D8               	btfss	status,2,c
 12389  002AA2  D002               	goto	l1221
 12390  002AA4                     u14710:
 12391  002AA4  0E08               	movlw	8
 12392  002AA6  0012               	return	
 12393  002AA8                     l1221:
 12394                           
 12395                           ;tff.c: 602: fs->winsect = sector = clust2sect(clust);
 12396  002AA8  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
 12397  002AAC  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 12398  002AB0  EC0B  F022         	call	_clust2sect	;wreg free
 12399  002AB4  C06C  F0CA         	movff	?_clust2sect,reserve_direntry@sector
 12400  002AB8  C06D  F0CB         	movff	?_clust2sect+1,reserve_direntry@sector+1
 12401  002ABC  C06E  F0CC         	movff	?_clust2sect+2,reserve_direntry@sector+2
 12402  002AC0  C06F  F0CD         	movff	?_clust2sect+3,reserve_direntry@sector+3
 12403  002AC4  0100               	movlb	0	; () banked
 12404  002AC6  EE20 F004          	lfsr	2,4
 12405  002ACA  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 12406  002ACC  26D9               	addwf	fsr2l,f,c
 12407  002ACE  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12408  002AD0  22DA               	addwfc	fsr2h,f,c
 12409  002AD2  C0CA  FFDE         	movff	reserve_direntry@sector,postinc2
 12410  002AD6  C0CB  FFDE         	movff	reserve_direntry@sector+1,postinc2
 12411  002ADA  C0CC  FFDE         	movff	reserve_direntry@sector+2,postinc2
 12412  002ADE  C0CD  FFDE         	movff	reserve_direntry@sector+3,postinc2
 12413                           
 12414                           ;tff.c: 603: memset(fs->win, 0, 512U);
 12415  002AE2  0E20               	movlw	32
 12416  002AE4  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 12417  002AE6  6F60               	movwf	memset@p1& (0+255),b
 12418  002AE8  0E00               	movlw	0
 12419  002AEA  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12420  002AEC  6F61               	movwf	(memset@p1+1)& (0+255),b
 12421  002AEE  0E00               	movlw	0
 12422  002AF0  6F63               	movwf	(memset@c+1)& (0+255),b
 12423  002AF2  0E00               	movlw	0
 12424  002AF4  6F62               	movwf	memset@c& (0+255),b
 12425  002AF6  0E02               	movlw	2
 12426  002AF8  6F65               	movwf	(memset@n+1)& (0+255),b
 12427  002AFA  0E00               	movlw	0
 12428  002AFC  6F64               	movwf	memset@n& (0+255),b
 12429  002AFE  ECCB  F02A         	call	_memset	;wreg free
 12430                           
 12431                           ;tff.c: 604: for (n = fs->csize; n; n--) {
 12432  002B02  0100               	movlb	0	; () banked
 12433  002B04  EE20 F01D          	lfsr	2,29
 12434  002B08  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 12435  002B0A  26D9               	addwf	fsr2l,f,c
 12436  002B0C  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12437  002B0E  22DA               	addwfc	fsr2h,f,c
 12438  002B10  50DF               	movf	indf2,w,c
 12439  002B12  6FCE               	movwf	reserve_direntry@n& (0+255),b
 12440  002B14  D020               	goto	l1224
 12441  002B16                     
 12442                           ; BSR set to: 0
 12443                           ;tff.c: 605: if (disk_write(0, fs->win, sector, 1) != RES_OK)
 12444                           
 12445                           ; BSR set to: 0
 12446  002B16  0E20               	movlw	32
 12447  002B18  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 12448  002B1A  6F7F               	movwf	disk_write@buff& (0+255),b
 12449  002B1C  0E00               	movlw	0
 12450  002B1E  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12451  002B20  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 12452  002B22  C0CA  F081         	movff	reserve_direntry@sector,disk_write@sector
 12453  002B26  C0CB  F082         	movff	reserve_direntry@sector+1,disk_write@sector+1
 12454  002B2A  C0CC  F083         	movff	reserve_direntry@sector+2,disk_write@sector+2
 12455  002B2E  C0CD  F084         	movff	reserve_direntry@sector+3,disk_write@sector+3
 12456  002B32  0E01               	movlw	1
 12457  002B34  6F85               	movwf	disk_write@count& (0+255),b
 12458  002B36  0E00               	movlw	0
 12459  002B38  ECB9  F025         	call	_disk_write
 12460  002B3C  0900               	iorlw	0
 12461  002B3E  B4D8               	btfsc	status,2,c
 12462  002B40  D002               	goto	l1226
 12463                           
 12464                           ;tff.c: 606: return FR_RW_ERROR;
 12465  002B42  0E08               	movlw	8
 12466  002B44  0012               	return	
 12467  002B46                     l1226:
 12468                           
 12469                           ;tff.c: 607: sector++;
 12470  002B46  0E01               	movlw	1
 12471  002B48  0100               	movlb	0	; () banked
 12472  002B4A  27CA               	addwf	reserve_direntry@sector& (0+255),f,b
 12473  002B4C  0E00               	movlw	0
 12474  002B4E  23CB               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
 12475  002B50  23CC               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
 12476  002B52  23CD               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
 12477                           
 12478                           ; BSR set to: 0
 12479  002B54  07CE               	decf	reserve_direntry@n& (0+255),f,b
 12480  002B56                     l1224:
 12481                           
 12482                           ; BSR set to: 0
 12483                           
 12484                           ; BSR set to: 0
 12485  002B56  51CE               	movf	reserve_direntry@n& (0+255),w,b
 12486  002B58  A4D8               	btfss	status,2,c
 12487  002B5A  D7DD               	goto	l1225
 12488                           
 12489                           ; BSR set to: 0
 12490                           ;tff.c: 608: }
 12491                           ;tff.c: 609: fs->winflag = 1;
 12492                           
 12493                           ; BSR set to: 0
 12494  002B5C  EE20 F01F          	lfsr	2,31
 12495  002B60  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 12496  002B62  26D9               	addwf	fsr2l,f,c
 12497  002B64  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12498  002B66  22DA               	addwfc	fsr2h,f,c
 12499  002B68  0E01               	movlw	1
 12500  002B6A  6EDF               	movwf	indf2,c
 12501                           
 12502                           ;tff.c: 610: *dir = fs->win;
 12503  002B6C  0E20               	movlw	32
 12504  002B6E  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 12505  002B70  6FC8               	movwf	??_reserve_direntry& (0+255),b
 12506  002B72  0E00               	movlw	0
 12507  002B74  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12508  002B76  6FC9               	movwf	(??_reserve_direntry+1)& (0+255),b
 12509  002B78  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
 12510  002B7C  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
 12511  002B80  C0C8  FFDE         	movff	??_reserve_direntry,postinc2
 12512  002B84  C0C9  FFDD         	movff	??_reserve_direntry+1,postdec2
 12513                           
 12514                           ; BSR set to: 0
 12515                           ;tff.c: 611: return FR_OK;
 12516  002B88  0E00               	movlw	0
 12517  002B8A  0012               	return	
 12518  002B8C                     __end_of_reserve_direntry:
 12519                           	opt stack 0
 12520                           tosu	equ	0xFFF
 12521                           tosh	equ	0xFFE
 12522                           tosl	equ	0xFFD
 12523                           pclath	equ	0xFFA
 12524                           tblptru	equ	0xFF8
 12525                           tblptrh	equ	0xFF7
 12526                           tblptrl	equ	0xFF6
 12527                           tablat	equ	0xFF5
 12528                           prodh	equ	0xFF4
 12529                           prodl	equ	0xFF3
 12530                           intcon	equ	0xFF2
 12531                           intcon2	equ	0xFF1
 12532                           intcon3	equ	0xFF0
 12533                           indf0	equ	0xFEF
 12534                           postinc0	equ	0xFEE
 12535                           fsr0h	equ	0xFEA
 12536                           fsr0l	equ	0xFE9
 12537                           wreg	equ	0xFE8
 12538                           indf1	equ	0xFE7
 12539                           postinc1	equ	0xFE6
 12540                           postdec1	equ	0xFE5
 12541                           plusw1	equ	0xFE3
 12542                           fsr1h	equ	0xFE2
 12543                           fsr1l	equ	0xFE1
 12544                           indf2	equ	0xFDF
 12545                           postinc2	equ	0xFDE
 12546                           postdec2	equ	0xFDD
 12547                           plusw2	equ	0xFDB
 12548                           fsr2h	equ	0xFDA
 12549                           fsr2l	equ	0xFD9
 12550                           status	equ	0xFD8
 12551                           
 12552 ;; *************** function _next_dir_entry *****************
 12553 ;; Defined at:
 12554 ;;		line 358 in file "bibliotecas/tff.c"
 12555 ;; Parameters:    Size  Location     Type
 12556 ;;  dj              2   83[BANK0 ] PTR struct _DIR_E
 12557 ;;		 -> f_open@dj(14), 
 12558 ;; Auto vars:     Size  Location     Type
 12559 ;;  idx             2   94[BANK0 ] unsigned short 
 12560 ;;  clust           2   92[BANK0 ] unsigned short 
 12561 ;; Return value:  Size  Location     Type
 12562 ;;                  1    wreg      enum E105
 12563 ;; Registers used:
 12564 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12565 ;; Tracked objects:
 12566 ;;		On entry : 0/0
 12567 ;;		On exit  : 0/0
 12568 ;;		Unchanged: 0/0
 12569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12570 ;;      Params:         0       2       0       0       0       0       0       0       0
 12571 ;;      Locals:         0       4       0       0       0       0       0       0       0
 12572 ;;      Temps:          0       7       0       0       0       0       0       0       0
 12573 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12574 ;;Total ram usage:       13 bytes
 12575 ;; Hardware stack levels used:    1
 12576 ;; Hardware stack levels required when called:   10
 12577 ;; This function calls:
 12578 ;;		_clust2sect
 12579 ;;		_get_cluster
 12580 ;; This function is called by:
 12581 ;;		_trace_path
 12582 ;;		_reserve_direntry
 12583 ;;		_f_readdir
 12584 ;; This function uses a non-reentrant model
 12585 ;;
 12586                           
 12587                           	psect	text41
 12588  0037B0                     __ptext41:
 12589                           	opt stack 0
 12590  0037B0                     _next_dir_entry:
 12591                           	opt stack 15
 12592                           
 12593                           ;tff.c: 362: CLUST clust;
 12594                           ;tff.c: 363: WORD idx;
 12595                           ;tff.c: 366: idx = dj->index + 1;
 12596                           
 12597                           ;incstack = 0
 12598  0037B0  0100               	movlb	0	; () banked
 12599  0037B2  EE20 F002          	lfsr	2,2
 12600  0037B6  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12601  0037B8  26D9               	addwf	fsr2l,f,c
 12602  0037BA  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12603  0037BC  22DA               	addwfc	fsr2h,f,c
 12604  0037BE  CFDE F0B5          	movff	postinc2,??_next_dir_entry
 12605  0037C2  CFDD F0B6          	movff	postdec2,??_next_dir_entry+1
 12606  0037C6  0E01               	movlw	1
 12607  0037C8  25B5               	addwf	??_next_dir_entry& (0+255),w,b
 12608  0037CA  6FBE               	movwf	next_dir_entry@idx& (0+255),b
 12609  0037CC  0E00               	movlw	0
 12610  0037CE  21B6               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
 12611  0037D0  6FBF               	movwf	(next_dir_entry@idx+1)& (0+255),b
 12612                           
 12613                           ; BSR set to: 0
 12614                           ;tff.c: 367: if ((idx & 15) == 0) {
 12615  0037D2  0E0F               	movlw	15
 12616  0037D4  15BE               	andwf	next_dir_entry@idx& (0+255),w,b
 12617  0037D6  6FB5               	movwf	??_next_dir_entry& (0+255),b
 12618  0037D8  0E00               	movlw	0
 12619  0037DA  15BF               	andwf	(next_dir_entry@idx+1)& (0+255),w,b
 12620  0037DC  6FB6               	movwf	(??_next_dir_entry+1)& (0+255),b
 12621  0037DE  51B5               	movf	??_next_dir_entry& (0+255),w,b
 12622  0037E0  11B6               	iorwf	(??_next_dir_entry+1)& (0+255),w,b
 12623  0037E2  A4D8               	btfss	status,2,c
 12624  0037E4  D09D               	goto	l1116
 12625                           
 12626                           ; BSR set to: 0
 12627                           ;tff.c: 368: dj->sect++;
 12628  0037E6  EE20 F00A          	lfsr	2,10
 12629  0037EA  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12630  0037EC  26D9               	addwf	fsr2l,f,c
 12631  0037EE  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12632  0037F0  22DA               	addwfc	fsr2h,f,c
 12633  0037F2  2ADE               	incf	postinc2,f,c
 12634  0037F4  0E00               	movlw	0
 12635  0037F6  22DE               	addwfc	postinc2,f,c
 12636  0037F8  22DE               	addwfc	postinc2,f,c
 12637  0037FA  22DE               	addwfc	postinc2,f,c
 12638                           
 12639                           ;tff.c: 369: if (dj->clust == 0) {
 12640  0037FC  EE20 F008          	lfsr	2,8
 12641  003800  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12642  003802  26D9               	addwf	fsr2l,f,c
 12643  003804  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12644  003806  22DA               	addwfc	fsr2h,f,c
 12645  003808  50DE               	movf	postinc2,w,c
 12646  00380A  10DE               	iorwf	postinc2,w,c
 12647  00380C  A4D8               	btfss	status,2,c
 12648  00380E  D014               	goto	l1112
 12649                           
 12650                           ; BSR set to: 0
 12651                           ;tff.c: 370: if (idx >= dj->fs->n_rootdir) return FALSE;
 12652  003810  EE20 F004          	lfsr	2,4
 12653  003814  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12654  003816  26D9               	addwf	fsr2l,f,c
 12655  003818  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12656  00381A  22DA               	addwfc	fsr2h,f,c
 12657  00381C  EE10 F002          	lfsr	1,2
 12658  003820  50DE               	movf	postinc2,w,c
 12659  003822  26E1               	addwf	fsr1l,f,c
 12660  003824  50DD               	movf	postdec2,w,c
 12661  003826  22E2               	addwfc	fsr1h,f,c
 12662  003828  50E6               	movf	postinc1,w,c
 12663  00382A  5DBE               	subwf	next_dir_entry@idx& (0+255),w,b
 12664  00382C  50E6               	movf	postinc1,w,c
 12665  00382E  59BF               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
 12666  003830  A0D8               	btfss	status,0,c
 12667  003832  D076               	goto	l1116
 12668                           
 12669                           ; BSR set to: 0
 12670  003834  0E00               	movlw	0
 12671                           
 12672                           ; BSR set to: 0
 12673  003836  0012               	return	
 12674  003838                     l1112:
 12675                           
 12676                           ; BSR set to: 0
 12677                           ;tff.c: 372: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
 12678                           
 12679                           ; BSR set to: 0
 12680  003838  C0BE  F0B5         	movff	next_dir_entry@idx,??_next_dir_entry
 12681  00383C  C0BF  F0B6         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
 12682  003840  0E04               	movlw	4
 12683  003842  6FB7               	movwf	(??_next_dir_entry+2)& (0+255),b
 12684  003844                     u13775:
 12685  003844  90D8               	bcf	status,0,c
 12686  003846  33B6               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
 12687  003848  33B5               	rrcf	??_next_dir_entry& (0+255),f,b
 12688  00384A  2FB7               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
 12689  00384C  D7FB               	goto	u13775
 12690  00384E  0EFF               	movlw	255
 12691  003850  6FB8               	movwf	(??_next_dir_entry+3)& (0+255),b
 12692  003852  0EFF               	movlw	255
 12693  003854  6FB9               	movwf	(??_next_dir_entry+4)& (0+255),b
 12694  003856  EE20 F004          	lfsr	2,4
 12695  00385A  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12696  00385C  26D9               	addwf	fsr2l,f,c
 12697  00385E  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12698  003860  22DA               	addwfc	fsr2h,f,c
 12699  003862  EE10 F01D          	lfsr	1,29
 12700  003866  50DE               	movf	postinc2,w,c
 12701  003868  26E1               	addwf	fsr1l,f,c
 12702  00386A  50DD               	movf	postdec2,w,c
 12703  00386C  22E2               	addwfc	fsr1h,f,c
 12704  00386E  50E7               	movf	indf1,w,c
 12705  003870  6FBA               	movwf	(??_next_dir_entry+5)& (0+255),b
 12706  003872  6BBB               	clrf	(??_next_dir_entry+6)& (0+255),b
 12707  003874  51B8               	movf	(??_next_dir_entry+3)& (0+255),w,b
 12708  003876  27BA               	addwf	(??_next_dir_entry+5)& (0+255),f,b
 12709  003878  51B9               	movf	(??_next_dir_entry+4)& (0+255),w,b
 12710  00387A  23BB               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
 12711  00387C  51B5               	movf	??_next_dir_entry& (0+255),w,b
 12712  00387E  17BA               	andwf	(??_next_dir_entry+5)& (0+255),f,b
 12713  003880  51B6               	movf	(??_next_dir_entry+1)& (0+255),w,b
 12714  003882  17BB               	andwf	(??_next_dir_entry+6)& (0+255),f,b
 12715  003884  51BA               	movf	(??_next_dir_entry+5)& (0+255),w,b
 12716  003886  11BB               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
 12717  003888  A4D8               	btfss	status,2,c
 12718  00388A  D04A               	goto	l1116
 12719                           
 12720                           ; BSR set to: 0
 12721                           ;tff.c: 373: clust = get_cluster(dj->clust);
 12722  00388C  EE20 F008          	lfsr	2,8
 12723  003890  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12724  003892  26D9               	addwf	fsr2l,f,c
 12725  003894  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12726  003896  22DA               	addwfc	fsr2h,f,c
 12727  003898  CFDE F0A0          	movff	postinc2,get_cluster@clust
 12728  00389C  CFDD F0A1          	movff	postdec2,get_cluster@clust+1
 12729  0038A0  EC27  F018         	call	_get_cluster	;wreg free
 12730  0038A4  C0A0  F0BC         	movff	?_get_cluster,next_dir_entry@clust
 12731  0038A8  C0A1  F0BD         	movff	?_get_cluster+1,next_dir_entry@clust+1
 12732                           
 12733                           ;tff.c: 374: if (clust < 2 || clust >= dj->fs->max_clust)
 12734  0038AC  0100               	movlb	0	; () banked
 12735  0038AE  51BD               	movf	(next_dir_entry@clust+1)& (0+255),w,b
 12736  0038B0  E104               	bnz	u13790
 12737  0038B2  0E02               	movlw	2
 12738  0038B4  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
 12739  0038B6  A0D8               	btfss	status,0,c
 12740  0038B8  D012               	goto	u13800
 12741  0038BA                     u13790:
 12742                           
 12743                           ; BSR set to: 0
 12744  0038BA  EE20 F004          	lfsr	2,4
 12745  0038BE  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12746  0038C0  26D9               	addwf	fsr2l,f,c
 12747  0038C2  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12748  0038C4  22DA               	addwfc	fsr2h,f,c
 12749  0038C6  EE10 F016          	lfsr	1,22
 12750  0038CA  50DE               	movf	postinc2,w,c
 12751  0038CC  26E1               	addwf	fsr1l,f,c
 12752  0038CE  50DD               	movf	postdec2,w,c
 12753  0038D0  22E2               	addwfc	fsr1h,f,c
 12754  0038D2  50E6               	movf	postinc1,w,c
 12755  0038D4  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
 12756  0038D6  50E6               	movf	postinc1,w,c
 12757  0038D8  59BD               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
 12758  0038DA  A0D8               	btfss	status,0,c
 12759  0038DC  D002               	goto	l1117
 12760  0038DE                     u13800:
 12761                           
 12762                           ; BSR set to: 0
 12763                           ;tff.c: 375: return FALSE;
 12764                           
 12765                           ; BSR set to: 0
 12766  0038DE  0E00               	movlw	0
 12767                           
 12768                           ; BSR set to: 0
 12769  0038E0  0012               	return	
 12770  0038E2                     l1117:
 12771                           
 12772                           ; BSR set to: 0
 12773                           ;tff.c: 376: dj->clust = clust;
 12774                           
 12775                           ; BSR set to: 0
 12776  0038E2  EE20 F008          	lfsr	2,8
 12777  0038E6  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12778  0038E8  26D9               	addwf	fsr2l,f,c
 12779  0038EA  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12780  0038EC  22DA               	addwfc	fsr2h,f,c
 12781  0038EE  C0BC  FFDE         	movff	next_dir_entry@clust,postinc2
 12782  0038F2  C0BD  FFDD         	movff	next_dir_entry@clust+1,postdec2
 12783                           
 12784                           ; BSR set to: 0
 12785                           ;tff.c: 377: dj->sect = clust2sect(clust);
 12786  0038F6  C0BC  F06C         	movff	next_dir_entry@clust,clust2sect@clust
 12787  0038FA  C0BD  F06D         	movff	next_dir_entry@clust+1,clust2sect@clust+1
 12788  0038FE  EC0B  F022         	call	_clust2sect	;wreg free
 12789  003902  0100               	movlb	0	; () banked
 12790  003904  EE20 F00A          	lfsr	2,10
 12791  003908  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12792  00390A  26D9               	addwf	fsr2l,f,c
 12793  00390C  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12794  00390E  22DA               	addwfc	fsr2h,f,c
 12795  003910  C06C  FFDE         	movff	?_clust2sect,postinc2
 12796  003914  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 12797  003918  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 12798  00391C  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 12799  003920                     l1116:
 12800                           
 12801                           ; BSR set to: 0
 12802                           ;tff.c: 378: }
 12803                           ;tff.c: 379: }
 12804                           ;tff.c: 380: }
 12805                           ;tff.c: 381: dj->index = idx;
 12806                           
 12807                           ; BSR set to: 0
 12808                           
 12809                           ; BSR set to: 0
 12810                           
 12811                           ; BSR set to: 0
 12812  003920  EE20 F002          	lfsr	2,2
 12813  003924  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12814  003926  26D9               	addwf	fsr2l,f,c
 12815  003928  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12816  00392A  22DA               	addwfc	fsr2h,f,c
 12817  00392C  C0BE  FFDE         	movff	next_dir_entry@idx,postinc2
 12818  003930  C0BF  FFDD         	movff	next_dir_entry@idx+1,postdec2
 12819                           
 12820                           ; BSR set to: 0
 12821                           ;tff.c: 382: return TRUE;
 12822  003934  0E01               	movlw	1
 12823  003936  0012               	return	
 12824  003938                     __end_of_next_dir_entry:
 12825                           	opt stack 0
 12826                           tosu	equ	0xFFF
 12827                           tosh	equ	0xFFE
 12828                           tosl	equ	0xFFD
 12829                           pclath	equ	0xFFA
 12830                           tblptru	equ	0xFF8
 12831                           tblptrh	equ	0xFF7
 12832                           tblptrl	equ	0xFF6
 12833                           tablat	equ	0xFF5
 12834                           prodh	equ	0xFF4
 12835                           prodl	equ	0xFF3
 12836                           intcon	equ	0xFF2
 12837                           intcon2	equ	0xFF1
 12838                           intcon3	equ	0xFF0
 12839                           indf0	equ	0xFEF
 12840                           postinc0	equ	0xFEE
 12841                           fsr0h	equ	0xFEA
 12842                           fsr0l	equ	0xFE9
 12843                           wreg	equ	0xFE8
 12844                           indf1	equ	0xFE7
 12845                           postinc1	equ	0xFE6
 12846                           postdec1	equ	0xFE5
 12847                           plusw1	equ	0xFE3
 12848                           fsr1h	equ	0xFE2
 12849                           fsr1l	equ	0xFE1
 12850                           indf2	equ	0xFDF
 12851                           postinc2	equ	0xFDE
 12852                           postdec2	equ	0xFDD
 12853                           plusw2	equ	0xFDB
 12854                           fsr2h	equ	0xFDA
 12855                           fsr2l	equ	0xFD9
 12856                           status	equ	0xFD8
 12857                           
 12858 ;; *************** function _clust2sect *****************
 12859 ;; Defined at:
 12860 ;;		line 338 in file "bibliotecas/tff.c"
 12861 ;; Parameters:    Size  Location     Type
 12862 ;;  clust           2   12[BANK0 ] unsigned short 
 12863 ;; Auto vars:     Size  Location     Type
 12864 ;;  fs              2   21[BANK0 ] PTR struct _FATFS
 12865 ;;		 -> NULL(0), fs(544), 
 12866 ;; Return value:  Size  Location     Type
 12867 ;;                  4   12[BANK0 ] unsigned long 
 12868 ;; Registers used:
 12869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12870 ;; Tracked objects:
 12871 ;;		On entry : 0/0
 12872 ;;		On exit  : 0/0
 12873 ;;		Unchanged: 0/0
 12874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12875 ;;      Params:         0       4       0       0       0       0       0       0       0
 12876 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12877 ;;      Temps:          0       5       0       0       0       0       0       0       0
 12878 ;;      Totals:         0      11       0       0       0       0       0       0       0
 12879 ;;Total ram usage:       11 bytes
 12880 ;; Hardware stack levels used:    1
 12881 ;; Hardware stack levels required when called:    4
 12882 ;; This function calls:
 12883 ;;		___lmul
 12884 ;; This function is called by:
 12885 ;;		_next_dir_entry
 12886 ;;		_trace_path
 12887 ;;		_reserve_direntry
 12888 ;;		_f_write
 12889 ;;		_f_read
 12890 ;;		_f_opendir
 12891 ;; This function uses a non-reentrant model
 12892 ;;
 12893                           
 12894                           	psect	text42
 12895  004416                     __ptext42:
 12896                           	opt stack 0
 12897  004416                     _clust2sect:
 12898                           	opt stack 19
 12899                           
 12900                           ;tff.c: 342: FATFS *fs = FatFs;
 12901                           
 12902                           ; BSR set to: 0
 12903                           ;incstack = 0
 12904  004416  C0FB  F075         	movff	_FatFs,clust2sect@fs
 12905  00441A  C0FC  F076         	movff	_FatFs+1,clust2sect@fs+1
 12906                           
 12907                           ;tff.c: 345: clust -= 2;
 12908  00441E  0E02               	movlw	2
 12909  004420  0100               	movlb	0	; () banked
 12910  004422  5F6C               	subwf	clust2sect@clust& (0+255),f,b
 12911  004424  0E00               	movlw	0
 12912  004426  5B6D               	subwfb	(clust2sect@clust+1)& (0+255),f,b
 12913                           
 12914                           ; BSR set to: 0
 12915                           ;tff.c: 346: if (clust >= (fs->max_clust - 2)) return 0;
 12916  004428  0EFE               	movlw	254
 12917  00442A  6F70               	movwf	??_clust2sect& (0+255),b
 12918  00442C  0EFF               	movlw	255
 12919  00442E  6F71               	movwf	(??_clust2sect+1)& (0+255),b
 12920  004430  EE20 F016          	lfsr	2,22
 12921  004434  5175               	movf	clust2sect@fs& (0+255),w,b
 12922  004436  26D9               	addwf	fsr2l,f,c
 12923  004438  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 12924  00443A  22DA               	addwfc	fsr2h,f,c
 12925  00443C  CFDE F072          	movff	postinc2,??_clust2sect+2
 12926  004440  CFDD F073          	movff	postdec2,??_clust2sect+3
 12927  004444  5170               	movf	??_clust2sect& (0+255),w,b
 12928  004446  2772               	addwf	(??_clust2sect+2)& (0+255),f,b
 12929  004448  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 12930  00444A  2373               	addwfc	(??_clust2sect+3)& (0+255),f,b
 12931  00444C  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 12932  00444E  5D6C               	subwf	clust2sect@clust& (0+255),w,b
 12933  004450  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 12934  004452  596D               	subwfb	(clust2sect@clust+1)& (0+255),w,b
 12935  004454  A0D8               	btfss	status,0,c
 12936  004456  D009               	goto	l1107
 12937                           
 12938                           ; BSR set to: 0
 12939  004458  0E00               	movlw	0
 12940  00445A  6F6C               	movwf	?_clust2sect& (0+255),b
 12941  00445C  0E00               	movlw	0
 12942  00445E  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 12943  004460  0E00               	movlw	0
 12944  004462  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 12945  004464  0E00               	movlw	0
 12946  004466  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 12947                           
 12948                           ; BSR set to: 0
 12949  004468  0012               	return	
 12950  00446A                     l1107:
 12951                           
 12952                           ; BSR set to: 0
 12953                           ;tff.c: 347: return (DWORD)clust * fs->csize + fs->database;
 12954                           
 12955                           ; BSR set to: 0
 12956  00446A  EE20 F010          	lfsr	2,16
 12957  00446E  5175               	movf	clust2sect@fs& (0+255),w,b
 12958  004470  26D9               	addwf	fsr2l,f,c
 12959  004472  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 12960  004474  22DA               	addwfc	fsr2h,f,c
 12961  004476  CFDE F070          	movff	postinc2,??_clust2sect
 12962  00447A  CFDE F071          	movff	postinc2,??_clust2sect+1
 12963  00447E  CFDE F072          	movff	postinc2,??_clust2sect+2
 12964  004482  CFDE F073          	movff	postinc2,??_clust2sect+3
 12965  004486  C06C  F060         	movff	clust2sect@clust,___lmul@multiplier
 12966  00448A  C06D  F061         	movff	clust2sect@clust+1,___lmul@multiplier+1
 12967  00448E  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
 12968  004490  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
 12969  004492  EE20 F01D          	lfsr	2,29
 12970  004496  5175               	movf	clust2sect@fs& (0+255),w,b
 12971  004498  26D9               	addwf	fsr2l,f,c
 12972  00449A  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 12973  00449C  22DA               	addwfc	fsr2h,f,c
 12974  00449E  50DF               	movf	indf2,w,c
 12975  0044A0  6F74               	movwf	(??_clust2sect+4)& (0+255),b
 12976  0044A2  5174               	movf	(??_clust2sect+4)& (0+255),w,b
 12977  0044A4  6F64               	movwf	___lmul@multiplicand& (0+255),b
 12978  0044A6  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 12979  0044A8  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 12980  0044AA  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 12981  0044AC  EC40  F028         	call	___lmul	;wreg free
 12982  0044B0  0100               	movlb	0	; () banked
 12983  0044B2  5170               	movf	??_clust2sect& (0+255),w,b
 12984  0044B4  2560               	addwf	?___lmul& (0+255),w,b
 12985  0044B6  6F6C               	movwf	?_clust2sect& (0+255),b
 12986  0044B8  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 12987  0044BA  2161               	addwfc	(?___lmul+1)& (0+255),w,b
 12988  0044BC  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 12989  0044BE  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 12990  0044C0  2162               	addwfc	(?___lmul+2)& (0+255),w,b
 12991  0044C2  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 12992  0044C4  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 12993  0044C6  2163               	addwfc	(?___lmul+3)& (0+255),w,b
 12994  0044C8  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 12995  0044CA  0012               	return	
 12996  0044CC                     __end_of_clust2sect:
 12997                           	opt stack 0
 12998                           tosu	equ	0xFFF
 12999                           tosh	equ	0xFFE
 13000                           tosl	equ	0xFFD
 13001                           pclath	equ	0xFFA
 13002                           tblptru	equ	0xFF8
 13003                           tblptrh	equ	0xFF7
 13004                           tblptrl	equ	0xFF6
 13005                           tablat	equ	0xFF5
 13006                           prodh	equ	0xFF4
 13007                           prodl	equ	0xFF3
 13008                           intcon	equ	0xFF2
 13009                           intcon2	equ	0xFF1
 13010                           intcon3	equ	0xFF0
 13011                           indf0	equ	0xFEF
 13012                           postinc0	equ	0xFEE
 13013                           fsr0h	equ	0xFEA
 13014                           fsr0l	equ	0xFE9
 13015                           wreg	equ	0xFE8
 13016                           indf1	equ	0xFE7
 13017                           postinc1	equ	0xFE6
 13018                           postdec1	equ	0xFE5
 13019                           plusw1	equ	0xFE3
 13020                           fsr1h	equ	0xFE2
 13021                           fsr1l	equ	0xFE1
 13022                           indf2	equ	0xFDF
 13023                           postinc2	equ	0xFDE
 13024                           postdec2	equ	0xFDD
 13025                           plusw2	equ	0xFDB
 13026                           fsr2h	equ	0xFDA
 13027                           fsr2l	equ	0xFD9
 13028                           status	equ	0xFD8
 13029                           
 13030 ;; *************** function _remove_chain *****************
 13031 ;; Defined at:
 13032 ;;		line 249 in file "bibliotecas/tff.c"
 13033 ;; Parameters:    Size  Location     Type
 13034 ;;  clust           2   86[BANK0 ] unsigned short 
 13035 ;; Auto vars:     Size  Location     Type
 13036 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 13037 ;;		 -> NULL(0), fs(544), 
 13038 ;;  nxt             2   90[BANK0 ] unsigned short 
 13039 ;; Return value:  Size  Location     Type
 13040 ;;                  1    wreg      enum E105
 13041 ;; Registers used:
 13042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13043 ;; Tracked objects:
 13044 ;;		On entry : 0/0
 13045 ;;		On exit  : 0/0
 13046 ;;		Unchanged: 0/0
 13047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13048 ;;      Params:         0       2       0       0       0       0       0       0       0
 13049 ;;      Locals:         0       4       0       0       0       0       0       0       0
 13050 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13051 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13052 ;;Total ram usage:        8 bytes
 13053 ;; Hardware stack levels used:    1
 13054 ;; Hardware stack levels required when called:   10
 13055 ;; This function calls:
 13056 ;;		_get_cluster
 13057 ;;		_put_cluster
 13058 ;; This function is called by:
 13059 ;;		_f_open
 13060 ;; This function uses a non-reentrant model
 13061 ;;
 13062                           
 13063                           	psect	text43
 13064  004576                     __ptext43:
 13065                           	opt stack 0
 13066  004576                     _remove_chain:
 13067                           	opt stack 16
 13068                           
 13069                           ;tff.c: 253: CLUST nxt;
 13070                           ;tff.c: 254: FATFS *fs = FatFs;
 13071                           
 13072                           ; BSR set to: 0
 13073                           ;incstack = 0
 13074  004576  C0FB  F0BC         	movff	_FatFs,remove_chain@fs
 13075  00457A  C0FC  F0BD         	movff	_FatFs+1,remove_chain@fs+1
 13076                           
 13077                           ;tff.c: 257: while (clust >= 2 && clust < fs->max_clust) {
 13078  00457E  D039               	goto	l1076
 13079  004580                     
 13080                           ;tff.c: 258: nxt = get_cluster(clust);
 13081  004580  C0B6  F0A0         	movff	remove_chain@clust,get_cluster@clust
 13082  004584  C0B7  F0A1         	movff	remove_chain@clust+1,get_cluster@clust+1
 13083  004588  EC27  F018         	call	_get_cluster	;wreg free
 13084  00458C  C0A0  F0BA         	movff	?_get_cluster,remove_chain@nxt
 13085  004590  C0A1  F0BB         	movff	?_get_cluster+1,remove_chain@nxt+1
 13086                           
 13087                           ;tff.c: 259: if (nxt == 1) return FALSE;
 13088  004594  0100               	movlb	0	; () banked
 13089  004596  05BA               	decf	remove_chain@nxt& (0+255),w,b
 13090  004598  11BB               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 13091  00459A  A4D8               	btfss	status,2,c
 13092  00459C  D002               	goto	l1078
 13093                           
 13094                           ; BSR set to: 0
 13095  00459E  0E00               	movlw	0
 13096                           
 13097                           ; BSR set to: 0
 13098  0045A0  0012               	return	
 13099  0045A2                     l1078:
 13100                           
 13101                           ; BSR set to: 0
 13102                           ;tff.c: 260: if (!put_cluster(clust, 0)) return FALSE;
 13103                           
 13104                           ; BSR set to: 0
 13105  0045A2  C0B6  F0A0         	movff	remove_chain@clust,put_cluster@clust
 13106  0045A6  C0B7  F0A1         	movff	remove_chain@clust+1,put_cluster@clust+1
 13107  0045AA  0E00               	movlw	0
 13108  0045AC  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 13109  0045AE  0E00               	movlw	0
 13110  0045B0  6FA2               	movwf	put_cluster@val& (0+255),b
 13111  0045B2  ECC6  F015         	call	_put_cluster	;wreg free
 13112  0045B6  0900               	iorlw	0
 13113  0045B8  A4D8               	btfss	status,2,c
 13114  0045BA  D002               	goto	l1080
 13115  0045BC  0E00               	movlw	0
 13116  0045BE  0012               	return	
 13117  0045C0                     l1080:
 13118                           
 13119                           ;tff.c: 261: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 13120  0045C0  0100               	movlb	0	; () banked
 13121  0045C2  EE20 F01A          	lfsr	2,26
 13122  0045C6  51BC               	movf	remove_chain@fs& (0+255),w,b
 13123  0045C8  26D9               	addwf	fsr2l,f,c
 13124  0045CA  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 13125  0045CC  22DA               	addwfc	fsr2h,f,c
 13126  0045CE  28DE               	incf	postinc2,w,c
 13127  0045D0  E103               	bnz	u14450
 13128  0045D2  28DE               	incf	postinc2,w,c
 13129  0045D4  B4D8               	btfsc	status,2,c
 13130  0045D6  D009               	goto	l1081
 13131  0045D8                     u14450:
 13132                           
 13133                           ; BSR set to: 0
 13134                           ;tff.c: 262: fs->free_clust++;
 13135  0045D8  EE20 F01A          	lfsr	2,26
 13136  0045DC  51BC               	movf	remove_chain@fs& (0+255),w,b
 13137  0045DE  26D9               	addwf	fsr2l,f,c
 13138  0045E0  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 13139  0045E2  22DA               	addwfc	fsr2h,f,c
 13140  0045E4  2ADE               	incf	postinc2,f,c
 13141  0045E6  0E00               	movlw	0
 13142  0045E8  22DD               	addwfc	postdec2,f,c
 13143  0045EA                     l1081:
 13144                           
 13145                           ; BSR set to: 0
 13146                           ;tff.c: 266: }
 13147                           ;tff.c: 267: clust = nxt;
 13148                           
 13149                           ; BSR set to: 0
 13150  0045EA  C0BA  F0B6         	movff	remove_chain@nxt,remove_chain@clust
 13151  0045EE  C0BB  F0B7         	movff	remove_chain@nxt+1,remove_chain@clust+1
 13152  0045F2                     l1076:
 13153                           
 13154                           ; BSR set to: 0
 13155  0045F2  0100               	movlb	0	; () banked
 13156  0045F4  51B7               	movf	(remove_chain@clust+1)& (0+255),w,b
 13157  0045F6  E104               	bnz	u14460
 13158  0045F8  0E02               	movlw	2
 13159  0045FA  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 13160  0045FC  A0D8               	btfss	status,0,c
 13161  0045FE  D00C               	goto	u14470
 13162  004600                     u14460:
 13163                           
 13164                           ; BSR set to: 0
 13165  004600  EE20 F016          	lfsr	2,22
 13166  004604  51BC               	movf	remove_chain@fs& (0+255),w,b
 13167  004606  26D9               	addwf	fsr2l,f,c
 13168  004608  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 13169  00460A  22DA               	addwfc	fsr2h,f,c
 13170  00460C  50DE               	movf	postinc2,w,c
 13171  00460E  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 13172  004610  50DE               	movf	postinc2,w,c
 13173  004612  59B7               	subwfb	(remove_chain@clust+1)& (0+255),w,b
 13174  004614  A0D8               	btfss	status,0,c
 13175  004616  D7B4               	goto	l1077
 13176  004618                     u14470:
 13177                           
 13178                           ; BSR set to: 0
 13179                           ;tff.c: 268: }
 13180                           ;tff.c: 269: return TRUE;
 13181                           
 13182                           ; BSR set to: 0
 13183                           
 13184                           ; BSR set to: 0
 13185  004618  0E01               	movlw	1
 13186  00461A  0012               	return	
 13187  00461C                     __end_of_remove_chain:
 13188                           	opt stack 0
 13189                           tosu	equ	0xFFF
 13190                           tosh	equ	0xFFE
 13191                           tosl	equ	0xFFD
 13192                           pclath	equ	0xFFA
 13193                           tblptru	equ	0xFF8
 13194                           tblptrh	equ	0xFF7
 13195                           tblptrl	equ	0xFF6
 13196                           tablat	equ	0xFF5
 13197                           prodh	equ	0xFF4
 13198                           prodl	equ	0xFF3
 13199                           intcon	equ	0xFF2
 13200                           intcon2	equ	0xFF1
 13201                           intcon3	equ	0xFF0
 13202                           indf0	equ	0xFEF
 13203                           postinc0	equ	0xFEE
 13204                           fsr0h	equ	0xFEA
 13205                           fsr0l	equ	0xFE9
 13206                           wreg	equ	0xFE8
 13207                           indf1	equ	0xFE7
 13208                           postinc1	equ	0xFE6
 13209                           postdec1	equ	0xFE5
 13210                           plusw1	equ	0xFE3
 13211                           fsr1h	equ	0xFE2
 13212                           fsr1l	equ	0xFE1
 13213                           indf2	equ	0xFDF
 13214                           postinc2	equ	0xFDE
 13215                           postdec2	equ	0xFDD
 13216                           plusw2	equ	0xFDB
 13217                           fsr2h	equ	0xFDA
 13218                           fsr2l	equ	0xFD9
 13219                           status	equ	0xFD8
 13220                           
 13221 ;; *************** function _memcpy *****************
 13222 ;; Defined at:
 13223 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
 13224 ;; Parameters:    Size  Location     Type
 13225 ;;  d1              2    0[BANK0 ] PTR void 
 13226 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 13227 ;;  s1              2    2[BANK0 ] PTR const void 
 13228 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 13229 ;;		 -> fs(544), 
 13230 ;;  n               2    4[BANK0 ] unsigned int 
 13231 ;; Auto vars:     Size  Location     Type
 13232 ;;  s               2    9[BANK0 ] PTR const unsigned char 
 13233 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 13234 ;;		 -> fs(544), 
 13235 ;;  d               2    7[BANK0 ] PTR unsigned char 
 13236 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 13237 ;;  tmp             1    6[BANK0 ] unsigned char 
 13238 ;; Return value:  Size  Location     Type
 13239 ;;                  2    0[BANK0 ] PTR void 
 13240 ;; Registers used:
 13241 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13242 ;; Tracked objects:
 13243 ;;		On entry : 0/0
 13244 ;;		On exit  : 0/0
 13245 ;;		Unchanged: 0/0
 13246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13247 ;;      Params:         0       6       0       0       0       0       0       0       0
 13248 ;;      Locals:         0       5       0       0       0       0       0       0       0
 13249 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13250 ;;      Totals:         0      11       0       0       0       0       0       0       0
 13251 ;;Total ram usage:       11 bytes
 13252 ;; Hardware stack levels used:    1
 13253 ;; Hardware stack levels required when called:    3
 13254 ;; This function calls:
 13255 ;;		Nothing
 13256 ;; This function is called by:
 13257 ;;		_f_open
 13258 ;;		_f_write
 13259 ;;		_f_read
 13260 ;; This function uses a non-reentrant model
 13261 ;;
 13262                           
 13263                           	psect	text44
 13264  0052BC                     __ptext44:
 13265                           	opt stack 0
 13266  0052BC                     _memcpy:
 13267                           	opt stack 20
 13268                           
 13269                           ;incstack = 0
 13270  0052BC  C062  F069         	movff	memcpy@s1,memcpy@s
 13271  0052C0  C063  F06A         	movff	memcpy@s1+1,memcpy@s+1
 13272  0052C4  C060  F067         	movff	memcpy@d1,memcpy@d
 13273  0052C8  C061  F068         	movff	memcpy@d1+1,memcpy@d+1
 13274  0052CC  D011               	goto	l1983
 13275  0052CE                     l10241:
 13276  0052CE  C069  FFD9         	movff	memcpy@s,fsr2l
 13277  0052D2  C06A  FFDA         	movff	memcpy@s+1,fsr2h
 13278  0052D6  50DF               	movf	indf2,w,c
 13279  0052D8  0100               	movlb	0	; () banked
 13280  0052DA  6F66               	movwf	memcpy@tmp& (0+255),b
 13281                           
 13282                           ; BSR set to: 0
 13283  0052DC  4B69               	infsnz	memcpy@s& (0+255),f,b
 13284  0052DE  2B6A               	incf	(memcpy@s+1)& (0+255),f,b
 13285                           
 13286                           ; BSR set to: 0
 13287  0052E0  C067  FFD9         	movff	memcpy@d,fsr2l
 13288  0052E4  C068  FFDA         	movff	memcpy@d+1,fsr2h
 13289  0052E8  C066  FFDF         	movff	memcpy@tmp,indf2
 13290                           
 13291                           ; BSR set to: 0
 13292  0052EC  4B67               	infsnz	memcpy@d& (0+255),f,b
 13293  0052EE  2B68               	incf	(memcpy@d+1)& (0+255),f,b
 13294  0052F0                     l1983:
 13295                           
 13296                           ; BSR set to: 0
 13297  0052F0  0100               	movlb	0	; () banked
 13298  0052F2  0764               	decf	memcpy@n& (0+255),f,b
 13299  0052F4  A0D8               	btfss	status,0,c
 13300  0052F6  0765               	decf	(memcpy@n+1)& (0+255),f,b
 13301  0052F8  2964               	incf	memcpy@n& (0+255),w,b
 13302  0052FA  E1E9               	bnz	l10241
 13303  0052FC  2965               	incf	(memcpy@n+1)& (0+255),w,b
 13304  0052FE  B4D8               	btfsc	status,2,c
 13305  005300  0012               	return	
 13306  005302  D7E5               	goto	l1984
 13307  005304                     __end_of_memcpy:
 13308                           	opt stack 0
 13309                           tosu	equ	0xFFF
 13310                           tosh	equ	0xFFE
 13311                           tosl	equ	0xFFD
 13312                           pclath	equ	0xFFA
 13313                           tblptru	equ	0xFF8
 13314                           tblptrh	equ	0xFF7
 13315                           tblptrl	equ	0xFF6
 13316                           tablat	equ	0xFF5
 13317                           prodh	equ	0xFF4
 13318                           prodl	equ	0xFF3
 13319                           intcon	equ	0xFF2
 13320                           intcon2	equ	0xFF1
 13321                           intcon3	equ	0xFF0
 13322                           indf0	equ	0xFEF
 13323                           postinc0	equ	0xFEE
 13324                           fsr0h	equ	0xFEA
 13325                           fsr0l	equ	0xFE9
 13326                           wreg	equ	0xFE8
 13327                           indf1	equ	0xFE7
 13328                           postinc1	equ	0xFE6
 13329                           postdec1	equ	0xFE5
 13330                           plusw1	equ	0xFE3
 13331                           fsr1h	equ	0xFE2
 13332                           fsr1l	equ	0xFE1
 13333                           indf2	equ	0xFDF
 13334                           postinc2	equ	0xFDE
 13335                           postdec2	equ	0xFDD
 13336                           plusw2	equ	0xFDB
 13337                           fsr2h	equ	0xFDA
 13338                           fsr2l	equ	0xFD9
 13339                           status	equ	0xFD8
 13340                           
 13341 ;; *************** function _auto_mount *****************
 13342 ;; Defined at:
 13343 ;;		line 651 in file "bibliotecas/tff.c"
 13344 ;; Parameters:    Size  Location     Type
 13345 ;;  path            2   51[BANK0 ] PTR PTR const unsigned c
 13346 ;;		 -> f_opendir@path(2), f_open@path(2), 
 13347 ;;  chk_wp          1   53[BANK0 ] unsigned char 
 13348 ;; Auto vars:     Size  Location     Type
 13349 ;;  fatsize         4   85[BANK0 ] unsigned long 
 13350 ;;  totalsect       4   77[BANK0 ] unsigned long 
 13351 ;;  bootsect        4   73[BANK0 ] unsigned long 
 13352 ;;  maxclust        4   69[BANK0 ] unsigned long 
 13353 ;;  fs              2   89[BANK0 ] PTR struct _FATFS
 13354 ;;		 -> NULL(0), fs(544), 
 13355 ;;  p               2   81[BANK0 ] PTR const unsigned char 
 13356 ;;		 -> STR_27(13), filename(15), 
 13357 ;;  stat            1   84[BANK0 ] unsigned char 
 13358 ;;  fmt             1   83[BANK0 ] unsigned char 
 13359 ;; Return value:  Size  Location     Type
 13360 ;;                  1    wreg      enum E155
 13361 ;; Registers used:
 13362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13363 ;; Tracked objects:
 13364 ;;		On entry : 0/0
 13365 ;;		On exit  : 0/0
 13366 ;;		Unchanged: 0/0
 13367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13368 ;;      Params:         0       3       0       0       0       0       0       0       0
 13369 ;;      Locals:         0      22       0       0       0       0       0       0       0
 13370 ;;      Temps:          0      15       0       0       0       0       0       0       0
 13371 ;;      Totals:         0      40       0       0       0       0       0       0       0
 13372 ;;Total ram usage:       40 bytes
 13373 ;; Hardware stack levels used:    1
 13374 ;; Hardware stack levels required when called:    9
 13375 ;; This function calls:
 13376 ;;		___lldiv
 13377 ;;		___lmul
 13378 ;;		_check_fs
 13379 ;;		_disk_initialize
 13380 ;;		_disk_status
 13381 ;;		_memset
 13382 ;; This function is called by:
 13383 ;;		_f_open
 13384 ;;		_f_opendir
 13385 ;; This function uses a non-reentrant model
 13386 ;;
 13387                           
 13388                           	psect	text45
 13389  000F10                     __ptext45:
 13390                           	opt stack 0
 13391  000F10                     _auto_mount:
 13392                           	opt stack 17
 13393                           
 13394                           ;tff.c: 656: BYTE fmt;
 13395                           ;tff.c: 657: DSTATUS stat;
 13396                           ;tff.c: 658: DWORD bootsect, fatsize, totalsect, maxclust;
 13397                           ;tff.c: 659: const char *p = *path;
 13398                           
 13399                           ; BSR set to: 0
 13400                           ;incstack = 0
 13401  000F10  C093  FFD9         	movff	auto_mount@path,fsr2l
 13402  000F14  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 13403  000F18  CFDE F0B1          	movff	postinc2,auto_mount@p
 13404  000F1C  CFDD F0B2          	movff	postdec2,auto_mount@p+1
 13405                           
 13406                           ;tff.c: 660: FATFS *fs;
 13407                           ;tff.c: 663: while (*p == ' ') p++;
 13408  000F20  D003               	goto	l1236
 13409  000F22  0100               	movlb	0	; () banked
 13410  000F24  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 13411  000F26  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 13412  000F28                     l1236:
 13413                           
 13414                           ; BSR set to: 0
 13415  000F28  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 13416  000F2C  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 13417  000F30  6AF8               	clrf	tblptru,c
 13418  000F32  0E07               	movlw	(high __ramtop+-1)
 13419  000F34  64F7               	cpfsgt	tblptrh,c
 13420  000F36  D003               	bra	u14747
 13421  000F38  0008               	tblrd		*
 13422  000F3A  50F5               	movf	tablat,w,c
 13423  000F3C  D005               	bra	u14740
 13424  000F3E                     u14747:
 13425  000F3E  CFF6 FFE9          	movff	tblptrl,fsr0l
 13426  000F42  CFF7 FFEA          	movff	tblptrh,fsr0h
 13427  000F46  50EF               	movf	indf0,w,c
 13428  000F48                     u14740:
 13429  000F48  0A20               	xorlw	32
 13430  000F4A  B4D8               	btfsc	status,2,c
 13431  000F4C  D7EA               	goto	l1237
 13432                           
 13433                           ;tff.c: 664: if (*p == '/') p++;
 13434  000F4E  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 13435  000F52  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 13436  000F56  6AF8               	clrf	tblptru,c
 13437  000F58  0E07               	movlw	(high __ramtop+-1)
 13438  000F5A  64F7               	cpfsgt	tblptrh,c
 13439  000F5C  D003               	bra	u14767
 13440  000F5E  0008               	tblrd		*
 13441  000F60  50F5               	movf	tablat,w,c
 13442  000F62  D005               	bra	u14760
 13443  000F64                     u14767:
 13444  000F64  CFF6 FFE9          	movff	tblptrl,fsr0l
 13445  000F68  CFF7 FFEA          	movff	tblptrh,fsr0h
 13446  000F6C  50EF               	movf	indf0,w,c
 13447  000F6E                     u14760:
 13448  000F6E  0A2F               	xorlw	47
 13449  000F70  A4D8               	btfss	status,2,c
 13450  000F72  D003               	goto	l1239
 13451  000F74  0100               	movlb	0	; () banked
 13452  000F76  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 13453  000F78  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 13454  000F7A                     l1239:
 13455                           
 13456                           ;tff.c: 665: *path = p;
 13457                           
 13458                           ; BSR set to: 0
 13459  000F7A  C093  FFD9         	movff	auto_mount@path,fsr2l
 13460  000F7E  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 13461  000F82  C0B1  FFDE         	movff	auto_mount@p,postinc2
 13462  000F86  C0B2  FFDD         	movff	auto_mount@p+1,postdec2
 13463                           
 13464                           ;tff.c: 668: fs = FatFs;
 13465  000F8A  C0FB  F0B9         	movff	_FatFs,auto_mount@fs
 13466  000F8E  C0FC  F0BA         	movff	_FatFs+1,auto_mount@fs+1
 13467                           
 13468                           ;tff.c: 669: if (!fs) return FR_NOT_ENABLED;
 13469  000F92  0100               	movlb	0	; () banked
 13470  000F94  51B9               	movf	auto_mount@fs& (0+255),w,b
 13471  000F96  11BA               	iorwf	(auto_mount@fs+1)& (0+255),w,b
 13472  000F98  A4D8               	btfss	status,2,c
 13473  000F9A  D002               	goto	l1240
 13474                           
 13475                           ; BSR set to: 0
 13476  000F9C  0E0A               	movlw	10
 13477                           
 13478                           ; BSR set to: 0
 13479  000F9E  0012               	return	
 13480  000FA0                     l1240:
 13481                           
 13482                           ; BSR set to: 0
 13483                           ;tff.c: 671: if (fs->fs_type) {
 13484                           
 13485                           ; BSR set to: 0
 13486  000FA0  EE20 F01C          	lfsr	2,28
 13487  000FA4  51B9               	movf	auto_mount@fs& (0+255),w,b
 13488  000FA6  26D9               	addwf	fsr2l,f,c
 13489  000FA8  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13490  000FAA  22DA               	addwfc	fsr2h,f,c
 13491  000FAC  50DF               	movf	indf2,w,c
 13492  000FAE  B4D8               	btfsc	status,2,c
 13493  000FB0  D00F               	goto	l1243
 13494                           
 13495                           ; BSR set to: 0
 13496                           ;tff.c: 672: stat = disk_status(0);
 13497  000FB2  0E00               	movlw	0
 13498  000FB4  EC82  F029         	call	_disk_status
 13499  000FB8  0100               	movlb	0	; () banked
 13500  000FBA  6FB4               	movwf	auto_mount@stat& (0+255),b
 13501                           
 13502                           ; BSR set to: 0
 13503                           ;tff.c: 673: if (!(stat & 0x01)) {
 13504  000FBC  B1B4               	btfsc	auto_mount@stat& (0+255),0,b
 13505  000FBE  D008               	goto	l1243
 13506                           
 13507                           ; BSR set to: 0
 13508                           ;tff.c: 675: if (chk_wp && (stat & 0x04))
 13509  000FC0  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 13510  000FC2  A4D8               	btfss	status,2,c
 13511                           
 13512                           ; BSR set to: 0
 13513  000FC4  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 13514  000FC6  D002               	goto	l1244
 13515                           
 13516                           ; BSR set to: 0
 13517                           ;tff.c: 676: return FR_WRITE_PROTECTED;
 13518  000FC8  0E09               	movlw	9
 13519                           
 13520                           ; BSR set to: 0
 13521  000FCA  0012               	return	
 13522  000FCC                     l1244:
 13523                           
 13524                           ; BSR set to: 0
 13525                           ;tff.c: 678: return FR_OK;
 13526                           
 13527                           ; BSR set to: 0
 13528  000FCC  0E00               	movlw	0
 13529                           
 13530                           ; BSR set to: 0
 13531  000FCE  0012               	return	
 13532  000FD0                     l1243:
 13533                           
 13534                           ; BSR set to: 0
 13535                           ;tff.c: 679: }
 13536                           ;tff.c: 680: }
 13537                           ;tff.c: 684: memset(fs, 0, sizeof(FATFS));
 13538                           
 13539                           ; BSR set to: 0
 13540                           
 13541                           ; BSR set to: 0
 13542  000FD0  C0B9  F060         	movff	auto_mount@fs,memset@p1
 13543  000FD4  C0BA  F061         	movff	auto_mount@fs+1,memset@p1+1
 13544  000FD8  0E00               	movlw	0
 13545  000FDA  6F63               	movwf	(memset@c+1)& (0+255),b
 13546  000FDC  0E00               	movlw	0
 13547  000FDE  6F62               	movwf	memset@c& (0+255),b
 13548  000FE0  0E02               	movlw	2
 13549  000FE2  6F65               	movwf	(memset@n+1)& (0+255),b
 13550  000FE4  0E20               	movlw	32
 13551  000FE6  6F64               	movwf	memset@n& (0+255),b
 13552  000FE8  ECCB  F02A         	call	_memset	;wreg free
 13553                           
 13554                           ;tff.c: 685: stat = disk_initialize(0);
 13555  000FEC  0E00               	movlw	0
 13556  000FEE  EC90  F02A         	call	_disk_initialize
 13557  000FF2  0100               	movlb	0	; () banked
 13558  000FF4  6FB4               	movwf	auto_mount@stat& (0+255),b
 13559                           
 13560                           ; BSR set to: 0
 13561                           ;tff.c: 686: if (stat & 0x01)
 13562  000FF6  A1B4               	btfss	auto_mount@stat& (0+255),0,b
 13563  000FF8  D002               	goto	l1245
 13564                           
 13565                           ; BSR set to: 0
 13566                           ;tff.c: 687: return FR_NOT_READY;
 13567  000FFA  0E01               	movlw	1
 13568                           
 13569                           ; BSR set to: 0
 13570  000FFC  0012               	return	
 13571  000FFE                     l1245:
 13572                           
 13573                           ; BSR set to: 0
 13574                           ;tff.c: 689: if (chk_wp && (stat & 0x04))
 13575                           
 13576                           ; BSR set to: 0
 13577  000FFE  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 13578  001000  A4D8               	btfss	status,2,c
 13579                           
 13580                           ; BSR set to: 0
 13581  001002  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 13582  001004  D002               	goto	l1246
 13583                           
 13584                           ; BSR set to: 0
 13585                           ;tff.c: 690: return FR_WRITE_PROTECTED;
 13586  001006  0E09               	movlw	9
 13587                           
 13588                           ; BSR set to: 0
 13589  001008  0012               	return	
 13590  00100A                     l1246:
 13591                           
 13592                           ; BSR set to: 0
 13593                           ;tff.c: 694: fmt = check_fs(bootsect = 0);
 13594                           
 13595                           ; BSR set to: 0
 13596  00100A  0E00               	movlw	0
 13597  00100C  6FA9               	movwf	auto_mount@bootsect& (0+255),b
 13598  00100E  0E00               	movlw	0
 13599  001010  6FAA               	movwf	(auto_mount@bootsect+1)& (0+255),b
 13600  001012  0E00               	movlw	0
 13601  001014  6FAB               	movwf	(auto_mount@bootsect+2)& (0+255),b
 13602  001016  0E00               	movlw	0
 13603  001018  6FAC               	movwf	(auto_mount@bootsect+3)& (0+255),b
 13604  00101A  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 13605  00101E  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 13606  001022  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 13607  001026  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 13608  00102A  EC73  F025         	call	_check_fs	;wreg free
 13609  00102E  0100               	movlb	0	; () banked
 13610  001030  6FB3               	movwf	auto_mount@fmt& (0+255),b
 13611                           
 13612                           ; BSR set to: 0
 13613                           ;tff.c: 696: if (fmt == 1) {
 13614  001032  05B3               	decf	auto_mount@fmt& (0+255),w,b
 13615  001034  A4D8               	btfss	status,2,c
 13616  001036  D023               	goto	l1248
 13617                           
 13618                           ; BSR set to: 0
 13619                           ;tff.c: 698: if (fs->win[446+4]) {
 13620  001038  EE21 F0E2          	lfsr	2,482
 13621  00103C  51B9               	movf	auto_mount@fs& (0+255),w,b
 13622  00103E  26D9               	addwf	fsr2l,f,c
 13623  001040  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13624  001042  22DA               	addwfc	fsr2h,f,c
 13625  001044  50DF               	movf	indf2,w,c
 13626  001046  B4D8               	btfsc	status,2,c
 13627  001048  D01A               	goto	l1248
 13628                           
 13629                           ; BSR set to: 0
 13630                           ;tff.c: 699: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 13631  00104A  EE21 F0E6          	lfsr	2,486
 13632  00104E  51B9               	movf	auto_mount@fs& (0+255),w,b
 13633  001050  26D9               	addwf	fsr2l,f,c
 13634  001052  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13635  001054  22DA               	addwfc	fsr2h,f,c
 13636  001056  CFDE F0A9          	movff	postinc2,auto_mount@bootsect
 13637  00105A  CFDE F0AA          	movff	postinc2,auto_mount@bootsect+1
 13638  00105E  CFDE F0AB          	movff	postinc2,auto_mount@bootsect+2
 13639  001062  CFDE F0AC          	movff	postinc2,auto_mount@bootsect+3
 13640                           
 13641                           ; BSR set to: 0
 13642                           ;tff.c: 700: fmt = check_fs(bootsect);
 13643  001066  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 13644  00106A  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 13645  00106E  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 13646  001072  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 13647  001076  EC73  F025         	call	_check_fs	;wreg free
 13648  00107A  0100               	movlb	0	; () banked
 13649  00107C  6FB3               	movwf	auto_mount@fmt& (0+255),b
 13650  00107E                     l1248:
 13651                           
 13652                           ; BSR set to: 0
 13653                           ;tff.c: 701: }
 13654                           ;tff.c: 702: }
 13655                           ;tff.c: 703: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])) != 512U)
 13656                           
 13657                           ; BSR set to: 0
 13658                           
 13659                           ; BSR set to: 0
 13660  00107E  51B3               	movf	auto_mount@fmt& (0+255),w,b
 13661  001080  A4D8               	btfss	status,2,c
 13662  001082  D00C               	goto	u14890
 13663                           
 13664                           ; BSR set to: 0
 13665  001084  EE20 F02B          	lfsr	2,43
 13666  001088  51B9               	movf	auto_mount@fs& (0+255),w,b
 13667  00108A  26D9               	addwf	fsr2l,f,c
 13668  00108C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13669  00108E  22DA               	addwfc	fsr2h,f,c
 13670  001090  50DE               	movf	postinc2,w,c
 13671  001092  E104               	bnz	l11175
 13672  001094  0E02               	movlw	2
 13673  001096  18DE               	xorwf	postinc2,w,c
 13674  001098  B4D8               	btfsc	status,2,c
 13675  00109A  D002               	goto	l1249
 13676  00109C                     u14890:
 13677  00109C                     l11175:
 13678                           
 13679                           ; BSR set to: 0
 13680                           ;tff.c: 704: return FR_NO_FILESYSTEM;
 13681  00109C  0E0B               	movlw	11
 13682                           
 13683                           ; BSR set to: 0
 13684  00109E  0012               	return	
 13685  0010A0                     l1249:
 13686                           
 13687                           ; BSR set to: 0
 13688                           ;tff.c: 707: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 13689                           
 13690                           ; BSR set to: 0
 13691  0010A0  EE20 F036          	lfsr	2,54
 13692  0010A4  51B9               	movf	auto_mount@fs& (0+255),w,b
 13693  0010A6  26D9               	addwf	fsr2l,f,c
 13694  0010A8  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13695  0010AA  22DA               	addwfc	fsr2h,f,c
 13696  0010AC  CFDE F096          	movff	postinc2,??_auto_mount
 13697  0010B0  CFDD F097          	movff	postdec2,??_auto_mount+1
 13698  0010B4  C096  F0B5         	movff	??_auto_mount,auto_mount@fatsize
 13699  0010B8  C097  F0B6         	movff	??_auto_mount+1,auto_mount@fatsize+1
 13700  0010BC  6BB7               	clrf	(auto_mount@fatsize+2)& (0+255),b
 13701  0010BE  6BB8               	clrf	(auto_mount@fatsize+3)& (0+255),b
 13702                           
 13703                           ; BSR set to: 0
 13704                           ;tff.c: 708: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 13705  0010C0  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 13706  0010C2  11B6               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 13707  0010C4  11B7               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 13708  0010C6  11B8               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 13709  0010C8  A4D8               	btfss	status,2,c
 13710  0010CA  D00E               	goto	l1252
 13711                           
 13712                           ; BSR set to: 0
 13713  0010CC  EE20 F044          	lfsr	2,68
 13714  0010D0  51B9               	movf	auto_mount@fs& (0+255),w,b
 13715  0010D2  26D9               	addwf	fsr2l,f,c
 13716  0010D4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13717  0010D6  22DA               	addwfc	fsr2h,f,c
 13718  0010D8  CFDE F0B5          	movff	postinc2,auto_mount@fatsize
 13719  0010DC  CFDE F0B6          	movff	postinc2,auto_mount@fatsize+1
 13720  0010E0  CFDE F0B7          	movff	postinc2,auto_mount@fatsize+2
 13721  0010E4  CFDE F0B8          	movff	postinc2,auto_mount@fatsize+3
 13722  0010E8                     l1252:
 13723                           
 13724                           ; BSR set to: 0
 13725                           ;tff.c: 709: fs->sects_fat = (CLUST)fatsize;
 13726  0010E8  EE20 F014          	lfsr	2,20
 13727  0010EC  51B9               	movf	auto_mount@fs& (0+255),w,b
 13728  0010EE  26D9               	addwf	fsr2l,f,c
 13729  0010F0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13730  0010F2  22DA               	addwfc	fsr2h,f,c
 13731  0010F4  C0B5  FFDE         	movff	auto_mount@fatsize,postinc2
 13732  0010F8  C0B6  FFDD         	movff	auto_mount@fatsize+1,postdec2
 13733                           
 13734                           ; BSR set to: 0
 13735                           ;tff.c: 710: fs->n_fats = fs->win[16];
 13736  0010FC  EE20 F030          	lfsr	2,48
 13737  001100  51B9               	movf	auto_mount@fs& (0+255),w,b
 13738  001102  26D9               	addwf	fsr2l,f,c
 13739  001104  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13740  001106  22DA               	addwfc	fsr2h,f,c
 13741  001108  EE10 F01E          	lfsr	1,30
 13742  00110C  51B9               	movf	auto_mount@fs& (0+255),w,b
 13743  00110E  26E1               	addwf	fsr1l,f,c
 13744  001110  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13745  001112  22E2               	addwfc	fsr1h,f,c
 13746  001114  CFDF FFE7          	movff	indf2,indf1
 13747                           
 13748                           ; BSR set to: 0
 13749                           ;tff.c: 711: fatsize *= fs->n_fats;
 13750  001118  C0B5  F060         	movff	auto_mount@fatsize,___lmul@multiplier
 13751  00111C  C0B6  F061         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 13752  001120  C0B7  F062         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 13753  001124  C0B8  F063         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 13754  001128  EE20 F01E          	lfsr	2,30
 13755  00112C  51B9               	movf	auto_mount@fs& (0+255),w,b
 13756  00112E  26D9               	addwf	fsr2l,f,c
 13757  001130  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13758  001132  22DA               	addwfc	fsr2h,f,c
 13759  001134  50DF               	movf	indf2,w,c
 13760  001136  6F96               	movwf	??_auto_mount& (0+255),b
 13761  001138  5196               	movf	??_auto_mount& (0+255),w,b
 13762  00113A  6F64               	movwf	___lmul@multiplicand& (0+255),b
 13763  00113C  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 13764  00113E  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 13765  001140  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 13766  001142  EC40  F028         	call	___lmul	;wreg free
 13767  001146  C060  F0B5         	movff	?___lmul,auto_mount@fatsize
 13768  00114A  C061  F0B6         	movff	?___lmul+1,auto_mount@fatsize+1
 13769  00114E  C062  F0B7         	movff	?___lmul+2,auto_mount@fatsize+2
 13770  001152  C063  F0B8         	movff	?___lmul+3,auto_mount@fatsize+3
 13771                           
 13772                           ;tff.c: 712: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 13773  001156  0100               	movlb	0	; () banked
 13774  001158  EE20 F02E          	lfsr	2,46
 13775  00115C  51B9               	movf	auto_mount@fs& (0+255),w,b
 13776  00115E  26D9               	addwf	fsr2l,f,c
 13777  001160  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13778  001162  22DA               	addwfc	fsr2h,f,c
 13779  001164  CFDE F096          	movff	postinc2,??_auto_mount
 13780  001168  CFDD F097          	movff	postdec2,??_auto_mount+1
 13781  00116C  5196               	movf	??_auto_mount& (0+255),w,b
 13782  00116E  25A9               	addwf	auto_mount@bootsect& (0+255),w,b
 13783  001170  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 13784  001172  5197               	movf	(??_auto_mount+1)& (0+255),w,b
 13785  001174  21AA               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 13786  001176  6F99               	movwf	(??_auto_mount+3)& (0+255),b
 13787  001178  0E00               	movlw	0
 13788  00117A  21AB               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 13789  00117C  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 13790  00117E  0E00               	movlw	0
 13791  001180  21AC               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 13792  001182  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 13793  001184  EE20 F008          	lfsr	2,8
 13794  001188  51B9               	movf	auto_mount@fs& (0+255),w,b
 13795  00118A  26D9               	addwf	fsr2l,f,c
 13796  00118C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13797  00118E  22DA               	addwfc	fsr2h,f,c
 13798  001190  C098  FFDE         	movff	??_auto_mount+2,postinc2
 13799  001194  C099  FFDE         	movff	??_auto_mount+3,postinc2
 13800  001198  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 13801  00119C  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 13802                           
 13803                           ; BSR set to: 0
 13804                           ;tff.c: 713: fs->csize = fs->win[13];
 13805  0011A0  EE20 F02D          	lfsr	2,45
 13806  0011A4  51B9               	movf	auto_mount@fs& (0+255),w,b
 13807  0011A6  26D9               	addwf	fsr2l,f,c
 13808  0011A8  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13809  0011AA  22DA               	addwfc	fsr2h,f,c
 13810  0011AC  EE10 F01D          	lfsr	1,29
 13811  0011B0  51B9               	movf	auto_mount@fs& (0+255),w,b
 13812  0011B2  26E1               	addwf	fsr1l,f,c
 13813  0011B4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13814  0011B6  22E2               	addwfc	fsr1h,f,c
 13815  0011B8  CFDF FFE7          	movff	indf2,indf1
 13816                           
 13817                           ; BSR set to: 0
 13818                           ;tff.c: 714: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 13819  0011BC  EE20 F031          	lfsr	2,49
 13820  0011C0  51B9               	movf	auto_mount@fs& (0+255),w,b
 13821  0011C2  26D9               	addwf	fsr2l,f,c
 13822  0011C4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13823  0011C6  22DA               	addwfc	fsr2h,f,c
 13824  0011C8  EE10 F002          	lfsr	1,2
 13825  0011CC  51B9               	movf	auto_mount@fs& (0+255),w,b
 13826  0011CE  26E1               	addwf	fsr1l,f,c
 13827  0011D0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13828  0011D2  22E2               	addwfc	fsr1h,f,c
 13829  0011D4  CFDE FFE6          	movff	postinc2,postinc1
 13830  0011D8  CFDD FFE5          	movff	postdec2,postdec1
 13831                           
 13832                           ; BSR set to: 0
 13833                           ;tff.c: 715: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 13834  0011DC  EE20 F033          	lfsr	2,51
 13835  0011E0  51B9               	movf	auto_mount@fs& (0+255),w,b
 13836  0011E2  26D9               	addwf	fsr2l,f,c
 13837  0011E4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13838  0011E6  22DA               	addwfc	fsr2h,f,c
 13839  0011E8  CFDE F096          	movff	postinc2,??_auto_mount
 13840  0011EC  CFDD F097          	movff	postdec2,??_auto_mount+1
 13841  0011F0  C096  F0AD         	movff	??_auto_mount,auto_mount@totalsect
 13842  0011F4  C097  F0AE         	movff	??_auto_mount+1,auto_mount@totalsect+1
 13843  0011F8  6BAF               	clrf	(auto_mount@totalsect+2)& (0+255),b
 13844  0011FA  6BB0               	clrf	(auto_mount@totalsect+3)& (0+255),b
 13845                           
 13846                           ; BSR set to: 0
 13847                           ;tff.c: 716: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 13848  0011FC  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 13849  0011FE  11AE               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 13850  001200  11AF               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 13851  001202  11B0               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 13852  001204  A4D8               	btfss	status,2,c
 13853  001206  D00E               	goto	l1253
 13854                           
 13855                           ; BSR set to: 0
 13856  001208  EE20 F040          	lfsr	2,64
 13857  00120C  51B9               	movf	auto_mount@fs& (0+255),w,b
 13858  00120E  26D9               	addwf	fsr2l,f,c
 13859  001210  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13860  001212  22DA               	addwfc	fsr2h,f,c
 13861  001214  CFDE F0AD          	movff	postinc2,auto_mount@totalsect
 13862  001218  CFDE F0AE          	movff	postinc2,auto_mount@totalsect+1
 13863  00121C  CFDE F0AF          	movff	postinc2,auto_mount@totalsect+2
 13864  001220  CFDE F0B0          	movff	postinc2,auto_mount@totalsect+3
 13865  001224                     l1253:
 13866                           
 13867                           ; BSR set to: 0
 13868                           ;tff.c: 717: fs->max_clust = maxclust = (totalsect
 13869                           ;tff.c: 718: - (WORD)(*(WORD*)(BYTE*)(&fs->win[14])) - fatsize - fs->n_rootdir / 16
 13870                           ;tff.c: 719: ) / fs->csize + 2;
 13871                           
 13872                           ; BSR set to: 0
 13873  001224  EE20 F002          	lfsr	2,2
 13874  001228  51B9               	movf	auto_mount@fs& (0+255),w,b
 13875  00122A  26D9               	addwf	fsr2l,f,c
 13876  00122C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13877  00122E  22DA               	addwfc	fsr2h,f,c
 13878  001230  CFDE F096          	movff	postinc2,??_auto_mount
 13879  001234  CFDD F097          	movff	postdec2,??_auto_mount+1
 13880  001238  0E04               	movlw	4
 13881  00123A  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 13882  00123C                     u14925:
 13883  00123C  90D8               	bcf	status,0,c
 13884  00123E  3397               	rrcf	(??_auto_mount+1)& (0+255),f,b
 13885  001240  3396               	rrcf	??_auto_mount& (0+255),f,b
 13886  001242  2F98               	decfsz	(??_auto_mount+2)& (0+255),f,b
 13887  001244  D7FB               	goto	u14925
 13888  001246  EE20 F02E          	lfsr	2,46
 13889  00124A  51B9               	movf	auto_mount@fs& (0+255),w,b
 13890  00124C  26D9               	addwf	fsr2l,f,c
 13891  00124E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13892  001250  22DA               	addwfc	fsr2h,f,c
 13893  001252  CFDE F099          	movff	postinc2,??_auto_mount+3
 13894  001256  CFDD F09A          	movff	postdec2,??_auto_mount+4
 13895  00125A  5199               	movf	(??_auto_mount+3)& (0+255),w,b
 13896  00125C  2596               	addwf	??_auto_mount& (0+255),w,b
 13897  00125E  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 13898  001260  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 13899  001262  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 13900  001264  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 13901  001266  6B9D               	clrf	(??_auto_mount+7)& (0+255),b
 13902  001268  B0D8               	btfsc	status,0,c
 13903  00126A  2B9D               	incf	(??_auto_mount+7)& (0+255),f,b
 13904  00126C  6B9E               	clrf	(??_auto_mount+8)& (0+255),b
 13905  00126E  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 13906  001270  259B               	addwf	(??_auto_mount+5)& (0+255),w,b
 13907  001272  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 13908  001274  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 13909  001276  219C               	addwfc	(??_auto_mount+6)& (0+255),w,b
 13910  001278  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 13911  00127A  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 13912  00127C  219D               	addwfc	(??_auto_mount+7)& (0+255),w,b
 13913  00127E  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 13914  001280  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 13915  001282  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 13916  001284  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 13917  001286  1F9F               	comf	(??_auto_mount+9)& (0+255),f,b
 13918  001288  1FA0               	comf	(??_auto_mount+10)& (0+255),f,b
 13919  00128A  1FA1               	comf	(??_auto_mount+11)& (0+255),f,b
 13920  00128C  1FA2               	comf	(??_auto_mount+12)& (0+255),f,b
 13921  00128E  2B9F               	incf	(??_auto_mount+9)& (0+255),f,b
 13922  001290  0E00               	movlw	0
 13923  001292  23A0               	addwfc	(??_auto_mount+10)& (0+255),f,b
 13924  001294  23A1               	addwfc	(??_auto_mount+11)& (0+255),f,b
 13925  001296  23A2               	addwfc	(??_auto_mount+12)& (0+255),f,b
 13926  001298  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 13927  00129A  259F               	addwf	(??_auto_mount+9)& (0+255),w,b
 13928  00129C  6F60               	movwf	___lldiv@dividend& (0+255),b
 13929  00129E  51AE               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 13930  0012A0  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 13931  0012A2  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 13932  0012A4  51AF               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 13933  0012A6  21A1               	addwfc	(??_auto_mount+11)& (0+255),w,b
 13934  0012A8  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 13935  0012AA  51B0               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 13936  0012AC  21A2               	addwfc	(??_auto_mount+12)& (0+255),w,b
 13937  0012AE  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 13938  0012B0  EE20 F01D          	lfsr	2,29
 13939  0012B4  51B9               	movf	auto_mount@fs& (0+255),w,b
 13940  0012B6  26D9               	addwf	fsr2l,f,c
 13941  0012B8  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13942  0012BA  22DA               	addwfc	fsr2h,f,c
 13943  0012BC  50DF               	movf	indf2,w,c
 13944  0012BE  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 13945  0012C0  51A3               	movf	(??_auto_mount+13)& (0+255),w,b
 13946  0012C2  6F64               	movwf	___lldiv@divisor& (0+255),b
 13947  0012C4  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13948  0012C6  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13949  0012C8  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13950  0012CA  EC82  F026         	call	___lldiv	;wreg free
 13951  0012CE  0E02               	movlw	2
 13952  0012D0  0100               	movlb	0	; () banked
 13953  0012D2  2560               	addwf	?___lldiv& (0+255),w,b
 13954  0012D4  6FA5               	movwf	auto_mount@maxclust& (0+255),b
 13955  0012D6  0E00               	movlw	0
 13956  0012D8  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 13957  0012DA  6FA6               	movwf	(auto_mount@maxclust+1)& (0+255),b
 13958  0012DC  0E00               	movlw	0
 13959  0012DE  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
 13960  0012E0  6FA7               	movwf	(auto_mount@maxclust+2)& (0+255),b
 13961  0012E2  0E00               	movlw	0
 13962  0012E4  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
 13963  0012E6  6FA8               	movwf	(auto_mount@maxclust+3)& (0+255),b
 13964  0012E8  EE20 F016          	lfsr	2,22
 13965  0012EC  51B9               	movf	auto_mount@fs& (0+255),w,b
 13966  0012EE  26D9               	addwf	fsr2l,f,c
 13967  0012F0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13968  0012F2  22DA               	addwfc	fsr2h,f,c
 13969  0012F4  C0A5  FFDE         	movff	auto_mount@maxclust,postinc2
 13970  0012F8  C0A6  FFDD         	movff	auto_mount@maxclust+1,postdec2
 13971                           
 13972                           ; BSR set to: 0
 13973                           ;tff.c: 721: fmt = 1;
 13974  0012FC  0E01               	movlw	1
 13975  0012FE  6FB3               	movwf	auto_mount@fmt& (0+255),b
 13976                           
 13977                           ; BSR set to: 0
 13978                           ;tff.c: 722: if (maxclust >= 0xFF7) fmt = 2;
 13979  001300  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 13980  001302  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 13981  001304  E106               	bnz	u14930
 13982  001306  0EF7               	movlw	247
 13983  001308  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 13984  00130A  0E0F               	movlw	15
 13985  00130C  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 13986  00130E  A0D8               	btfss	status,0,c
 13987  001310  D002               	goto	l1254
 13988  001312                     u14930:
 13989                           
 13990                           ; BSR set to: 0
 13991  001312  0E02               	movlw	2
 13992  001314  6FB3               	movwf	auto_mount@fmt& (0+255),b
 13993  001316                     l1254:
 13994                           
 13995                           ; BSR set to: 0
 13996                           ;tff.c: 723: if (maxclust >= 0xFFF7)
 13997                           
 13998                           ; BSR set to: 0
 13999  001316  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 14000  001318  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 14001  00131A  E106               	bnz	u14940
 14002  00131C  0EF7               	movlw	247
 14003  00131E  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 14004  001320  0EFF               	movlw	255
 14005  001322  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 14006  001324  A0D8               	btfss	status,0,c
 14007  001326  D002               	goto	l1255
 14008  001328                     u14940:
 14009                           
 14010                           ; BSR set to: 0
 14011                           ;tff.c: 725: return FR_NO_FILESYSTEM;
 14012  001328  0E0B               	movlw	11
 14013                           
 14014                           ; BSR set to: 0
 14015  00132A  0012               	return	
 14016  00132C                     l1255:
 14017                           
 14018                           ; BSR set to: 0
 14019                           ;tff.c: 732: fs->dirbase = fs->fatbase + fatsize;
 14020                           
 14021                           ; BSR set to: 0
 14022  00132C  EE20 F008          	lfsr	2,8
 14023  001330  51B9               	movf	auto_mount@fs& (0+255),w,b
 14024  001332  26D9               	addwf	fsr2l,f,c
 14025  001334  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14026  001336  22DA               	addwfc	fsr2h,f,c
 14027  001338  CFDE F096          	movff	postinc2,??_auto_mount
 14028  00133C  CFDE F097          	movff	postinc2,??_auto_mount+1
 14029  001340  CFDE F098          	movff	postinc2,??_auto_mount+2
 14030  001344  CFDE F099          	movff	postinc2,??_auto_mount+3
 14031  001348  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 14032  00134A  2596               	addwf	??_auto_mount& (0+255),w,b
 14033  00134C  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 14034  00134E  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 14035  001350  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 14036  001352  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 14037  001354  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 14038  001356  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 14039  001358  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 14040  00135A  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 14041  00135C  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 14042  00135E  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 14043  001360  EE20 F00C          	lfsr	2,12
 14044  001364  51B9               	movf	auto_mount@fs& (0+255),w,b
 14045  001366  26D9               	addwf	fsr2l,f,c
 14046  001368  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14047  00136A  22DA               	addwfc	fsr2h,f,c
 14048  00136C  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 14049  001370  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 14050  001374  C09C  FFDE         	movff	??_auto_mount+6,postinc2
 14051  001378  C09D  FFDE         	movff	??_auto_mount+7,postinc2
 14052                           
 14053                           ;tff.c: 733: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 14054  00137C  EE20 F008          	lfsr	2,8
 14055  001380  51B9               	movf	auto_mount@fs& (0+255),w,b
 14056  001382  26D9               	addwf	fsr2l,f,c
 14057  001384  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14058  001386  22DA               	addwfc	fsr2h,f,c
 14059  001388  CFDE F096          	movff	postinc2,??_auto_mount
 14060  00138C  CFDE F097          	movff	postinc2,??_auto_mount+1
 14061  001390  CFDE F098          	movff	postinc2,??_auto_mount+2
 14062  001394  CFDE F099          	movff	postinc2,??_auto_mount+3
 14063  001398  EE20 F002          	lfsr	2,2
 14064  00139C  51B9               	movf	auto_mount@fs& (0+255),w,b
 14065  00139E  26D9               	addwf	fsr2l,f,c
 14066  0013A0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14067  0013A2  22DA               	addwfc	fsr2h,f,c
 14068  0013A4  CFDE F09A          	movff	postinc2,??_auto_mount+4
 14069  0013A8  CFDD F09B          	movff	postdec2,??_auto_mount+5
 14070  0013AC  0E04               	movlw	4
 14071  0013AE  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 14072  0013B0                     u14955:
 14073  0013B0  90D8               	bcf	status,0,c
 14074  0013B2  339B               	rrcf	(??_auto_mount+5)& (0+255),f,b
 14075  0013B4  339A               	rrcf	(??_auto_mount+4)& (0+255),f,b
 14076  0013B6  2F9C               	decfsz	(??_auto_mount+6)& (0+255),f,b
 14077  0013B8  D7FB               	goto	u14955
 14078  0013BA  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 14079  0013BC  2596               	addwf	??_auto_mount& (0+255),w,b
 14080  0013BE  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 14081  0013C0  519B               	movf	(??_auto_mount+5)& (0+255),w,b
 14082  0013C2  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 14083  0013C4  6F9E               	movwf	(??_auto_mount+8)& (0+255),b
 14084  0013C6  0E00               	movlw	0
 14085  0013C8  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 14086  0013CA  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 14087  0013CC  0E00               	movlw	0
 14088  0013CE  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 14089  0013D0  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 14090  0013D2  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 14091  0013D4  259D               	addwf	(??_auto_mount+7)& (0+255),w,b
 14092  0013D6  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 14093  0013D8  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 14094  0013DA  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 14095  0013DC  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 14096  0013DE  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 14097  0013E0  219F               	addwfc	(??_auto_mount+9)& (0+255),w,b
 14098  0013E2  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 14099  0013E4  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 14100  0013E6  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 14101  0013E8  6FA4               	movwf	(??_auto_mount+14)& (0+255),b
 14102  0013EA  EE20 F010          	lfsr	2,16
 14103  0013EE  51B9               	movf	auto_mount@fs& (0+255),w,b
 14104  0013F0  26D9               	addwf	fsr2l,f,c
 14105  0013F2  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14106  0013F4  22DA               	addwfc	fsr2h,f,c
 14107  0013F6  C0A1  FFDE         	movff	??_auto_mount+11,postinc2
 14108  0013FA  C0A2  FFDE         	movff	??_auto_mount+12,postinc2
 14109  0013FE  C0A3  FFDE         	movff	??_auto_mount+13,postinc2
 14110  001402  C0A4  FFDE         	movff	??_auto_mount+14,postinc2
 14111                           
 14112                           ;tff.c: 737: fs->free_clust = (CLUST)0xFFFFFFFF;
 14113  001406  EE20 F01A          	lfsr	2,26
 14114  00140A  51B9               	movf	auto_mount@fs& (0+255),w,b
 14115  00140C  26D9               	addwf	fsr2l,f,c
 14116  00140E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14117  001410  22DA               	addwfc	fsr2h,f,c
 14118  001412  0EFF               	movlw	255
 14119  001414  6EDE               	movwf	postinc2,c
 14120  001416  0EFF               	movlw	255
 14121  001418  6EDD               	movwf	postdec2,c
 14122                           
 14123                           ;tff.c: 753: fs->fs_type = fmt;
 14124  00141A  EE20 F01C          	lfsr	2,28
 14125  00141E  51B9               	movf	auto_mount@fs& (0+255),w,b
 14126  001420  26D9               	addwf	fsr2l,f,c
 14127  001422  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 14128  001424  22DA               	addwfc	fsr2h,f,c
 14129  001426  C0B3  FFDF         	movff	auto_mount@fmt,indf2
 14130                           
 14131                           ; BSR set to: 0
 14132                           ;tff.c: 754: fs->id = ++fsid;
 14133  00142A  4BF9               	infsnz	_fsid& (0+255),f,b
 14134  00142C  2BFA               	incf	(_fsid+1)& (0+255),f,b
 14135  00142E  C0B9  FFD9         	movff	auto_mount@fs,fsr2l
 14136  001432  C0BA  FFDA         	movff	auto_mount@fs+1,fsr2h
 14137  001436  C0F9  FFDE         	movff	_fsid,postinc2
 14138  00143A  C0FA  FFDD         	movff	_fsid+1,postdec2
 14139                           
 14140                           ;tff.c: 755: return FR_OK;
 14141  00143E  0E00               	movlw	0
 14142  001440  0012               	return	
 14143  001442                     __end_of_auto_mount:
 14144                           	opt stack 0
 14145                           tosu	equ	0xFFF
 14146                           tosh	equ	0xFFE
 14147                           tosl	equ	0xFFD
 14148                           pclath	equ	0xFFA
 14149                           tblptru	equ	0xFF8
 14150                           tblptrh	equ	0xFF7
 14151                           tblptrl	equ	0xFF6
 14152                           tablat	equ	0xFF5
 14153                           prodh	equ	0xFF4
 14154                           prodl	equ	0xFF3
 14155                           intcon	equ	0xFF2
 14156                           intcon2	equ	0xFF1
 14157                           intcon3	equ	0xFF0
 14158                           indf0	equ	0xFEF
 14159                           postinc0	equ	0xFEE
 14160                           fsr0h	equ	0xFEA
 14161                           fsr0l	equ	0xFE9
 14162                           wreg	equ	0xFE8
 14163                           indf1	equ	0xFE7
 14164                           postinc1	equ	0xFE6
 14165                           postdec1	equ	0xFE5
 14166                           plusw1	equ	0xFE3
 14167                           fsr1h	equ	0xFE2
 14168                           fsr1l	equ	0xFE1
 14169                           indf2	equ	0xFDF
 14170                           postinc2	equ	0xFDE
 14171                           postdec2	equ	0xFDD
 14172                           plusw2	equ	0xFDB
 14173                           fsr2h	equ	0xFDA
 14174                           fsr2l	equ	0xFD9
 14175                           status	equ	0xFD8
 14176                           
 14177 ;; *************** function _memset *****************
 14178 ;; Defined at:
 14179 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 14180 ;; Parameters:    Size  Location     Type
 14181 ;;  p1              2    0[BANK0 ] PTR void 
 14182 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 14183 ;;  c               2    2[BANK0 ] int 
 14184 ;;  n               2    4[BANK0 ] unsigned int 
 14185 ;; Auto vars:     Size  Location     Type
 14186 ;;  p               2    6[BANK0 ] PTR unsigned char 
 14187 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 14188 ;; Return value:  Size  Location     Type
 14189 ;;                  2    0[BANK0 ] PTR void 
 14190 ;; Registers used:
 14191 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14192 ;; Tracked objects:
 14193 ;;		On entry : 0/0
 14194 ;;		On exit  : 0/0
 14195 ;;		Unchanged: 0/0
 14196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14197 ;;      Params:         0       6       0       0       0       0       0       0       0
 14198 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14199 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14200 ;;      Totals:         0       8       0       0       0       0       0       0       0
 14201 ;;Total ram usage:        8 bytes
 14202 ;; Hardware stack levels used:    1
 14203 ;; Hardware stack levels required when called:    3
 14204 ;; This function calls:
 14205 ;;		Nothing
 14206 ;; This function is called by:
 14207 ;;		_make_dirfile
 14208 ;;		_reserve_direntry
 14209 ;;		_auto_mount
 14210 ;;		_f_open
 14211 ;; This function uses a non-reentrant model
 14212 ;;
 14213                           
 14214                           	psect	text46
 14215  005596                     __ptext46:
 14216                           	opt stack 0
 14217  005596                     _memset:
 14218                           	opt stack 21
 14219                           
 14220                           ; BSR set to: 0
 14221                           ;incstack = 0
 14222  005596  C060  F066         	movff	memset@p1,memset@p
 14223  00559A  C061  F067         	movff	memset@p1+1,memset@p+1
 14224  00559E  D009               	goto	l1989
 14225  0055A0                     l10427:
 14226  0055A0  C066  FFD9         	movff	memset@p,fsr2l
 14227  0055A4  C067  FFDA         	movff	memset@p+1,fsr2h
 14228  0055A8  C062  FFDF         	movff	memset@c,indf2
 14229  0055AC  0100               	movlb	0	; () banked
 14230  0055AE  4B66               	infsnz	memset@p& (0+255),f,b
 14231  0055B0  2B67               	incf	(memset@p+1)& (0+255),f,b
 14232  0055B2                     l1989:
 14233                           
 14234                           ; BSR set to: 0
 14235  0055B2  0100               	movlb	0	; () banked
 14236  0055B4  0764               	decf	memset@n& (0+255),f,b
 14237  0055B6  A0D8               	btfss	status,0,c
 14238  0055B8  0765               	decf	(memset@n+1)& (0+255),f,b
 14239  0055BA  2964               	incf	memset@n& (0+255),w,b
 14240  0055BC  E1F1               	bnz	l10427
 14241  0055BE  2965               	incf	(memset@n+1)& (0+255),w,b
 14242  0055C0  B4D8               	btfsc	status,2,c
 14243  0055C2  0012               	return	
 14244  0055C4  D7ED               	goto	l1990
 14245  0055C6                     __end_of_memset:
 14246                           	opt stack 0
 14247                           tosu	equ	0xFFF
 14248                           tosh	equ	0xFFE
 14249                           tosl	equ	0xFFD
 14250                           pclath	equ	0xFFA
 14251                           tblptru	equ	0xFF8
 14252                           tblptrh	equ	0xFF7
 14253                           tblptrl	equ	0xFF6
 14254                           tablat	equ	0xFF5
 14255                           prodh	equ	0xFF4
 14256                           prodl	equ	0xFF3
 14257                           intcon	equ	0xFF2
 14258                           intcon2	equ	0xFF1
 14259                           intcon3	equ	0xFF0
 14260                           indf0	equ	0xFEF
 14261                           postinc0	equ	0xFEE
 14262                           fsr0h	equ	0xFEA
 14263                           fsr0l	equ	0xFE9
 14264                           wreg	equ	0xFE8
 14265                           indf1	equ	0xFE7
 14266                           postinc1	equ	0xFE6
 14267                           postdec1	equ	0xFE5
 14268                           plusw1	equ	0xFE3
 14269                           fsr1h	equ	0xFE2
 14270                           fsr1l	equ	0xFE1
 14271                           indf2	equ	0xFDF
 14272                           postinc2	equ	0xFDE
 14273                           postdec2	equ	0xFDD
 14274                           plusw2	equ	0xFDB
 14275                           fsr2h	equ	0xFDA
 14276                           fsr2l	equ	0xFD9
 14277                           status	equ	0xFD8
 14278                           
 14279 ;; *************** function _disk_initialize *****************
 14280 ;; Defined at:
 14281 ;;		line 59 in file "bibliotecas/diskio.c"
 14282 ;; Parameters:    Size  Location     Type
 14283 ;;  pdrv            1    wreg     unsigned char 
 14284 ;; Auto vars:     Size  Location     Type
 14285 ;;  pdrv            1   32[BANK0 ] unsigned char 
 14286 ;;  result          2    0        int 
 14287 ;;  stat            1   33[BANK0 ] unsigned char 
 14288 ;; Return value:  Size  Location     Type
 14289 ;;                  1    wreg      unsigned char 
 14290 ;; Registers used:
 14291 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14292 ;; Tracked objects:
 14293 ;;		On entry : 0/0
 14294 ;;		On exit  : 0/0
 14295 ;;		Unchanged: 0/0
 14296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14297 ;;      Params:         0       0       0       0       0       0       0       0       0
 14298 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14299 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14300 ;;      Totals:         0       2       0       0       0       0       0       0       0
 14301 ;;Total ram usage:        2 bytes
 14302 ;; Hardware stack levels used:    1
 14303 ;; Hardware stack levels required when called:    8
 14304 ;; This function calls:
 14305 ;;		_sdc_disk_initialize
 14306 ;; This function is called by:
 14307 ;;		_auto_mount
 14308 ;; This function uses a non-reentrant model
 14309 ;;
 14310                           
 14311                           	psect	text47
 14312  005520                     __ptext47:
 14313                           	opt stack 0
 14314  005520                     _disk_initialize:
 14315                           	opt stack 17
 14316                           
 14317                           ; BSR set to: 0
 14318                           ;incstack = 0
 14319                           ;disk_initialize@pdrv stored from wreg
 14320  005520  0100               	movlb	0	; () banked
 14321  005522  6F80               	movwf	disk_initialize@pdrv& (0+255),b
 14322                           
 14323                           ;diskio.c: 63: DSTATUS stat;
 14324                           ;diskio.c: 64: int result;
 14325                           ;diskio.c: 66: switch (pdrv) {
 14326  005524  D00E               	goto	l546
 14327  005526                     
 14328                           ;diskio.c: 68: stat = sdc_disk_initialize();
 14329  005526  EC1B  F010         	call	_sdc_disk_initialize	;wreg free
 14330  00552A  0100               	movlb	0	; () banked
 14331  00552C  6F81               	movwf	disk_initialize@stat& (0+255),b
 14332                           
 14333                           ; BSR set to: 0
 14334                           ;diskio.c: 72: return stat;
 14335  00552E  5181               	movf	disk_initialize@stat& (0+255),w,b
 14336                           
 14337                           ; BSR set to: 0
 14338  005530  0012               	return	
 14339  005532                     
 14340                           ; BSR set to: 0
 14341                           ;diskio.c: 75: stat = sdc_disk_initialize();
 14342                           
 14343                           ; BSR set to: 0
 14344  005532  EC1B  F010         	call	_sdc_disk_initialize	;wreg free
 14345  005536  0100               	movlb	0	; () banked
 14346  005538  6F81               	movwf	disk_initialize@stat& (0+255),b
 14347                           
 14348                           ; BSR set to: 0
 14349                           ;diskio.c: 79: return stat;
 14350  00553A  5181               	movf	disk_initialize@stat& (0+255),w,b
 14351                           
 14352                           ; BSR set to: 0
 14353  00553C  0012               	return	
 14354  00553E                     
 14355                           ; BSR set to: 0
 14356                           ;diskio.c: 86: return stat;
 14357                           
 14358                           ; BSR set to: 0
 14359  00553E  5181               	movf	disk_initialize@stat& (0+255),w,b
 14360                           
 14361                           ; BSR set to: 0
 14362  005540  0012               	return	
 14363  005542                     l546:
 14364                           
 14365                           ; BSR set to: 0
 14366  005542  0100               	movlb	0	; () banked
 14367  005544  5180               	movf	disk_initialize@pdrv& (0+255),w,b
 14368                           
 14369                           ; Switch size 1, requested type "space"
 14370                           ; Number of cases is 3, Range of values is 0 to 2
 14371                           ; switch strategies available:
 14372                           ; Name         Instructions Cycles
 14373                           ; simple_byte           10     6 (average)
 14374                           ;	Chosen strategy is simple_byte
 14375  005546  0A00               	xorlw	0	; case 0
 14376  005548  B4D8               	btfsc	status,2,c
 14377  00554A  D7ED               	goto	l547
 14378  00554C  0A01               	xorlw	1	; case 1
 14379  00554E  B4D8               	btfsc	status,2,c
 14380  005550  D7F0               	goto	l549
 14381  005552  0A03               	xorlw	3	; case 2
 14382  005554  B4D8               	btfsc	status,2,c
 14383  005556  D7F3               	goto	l550
 14384                           
 14385                           ; BSR set to: 0
 14386                           ;diskio.c: 88: return 0x01;
 14387                           
 14388                           ; BSR set to: 0
 14389  005558  0E01               	movlw	1
 14390  00555A  0012               	return	
 14391  00555C                     __end_of_disk_initialize:
 14392                           	opt stack 0
 14393                           tosu	equ	0xFFF
 14394                           tosh	equ	0xFFE
 14395                           tosl	equ	0xFFD
 14396                           pclath	equ	0xFFA
 14397                           tblptru	equ	0xFF8
 14398                           tblptrh	equ	0xFF7
 14399                           tblptrl	equ	0xFF6
 14400                           tablat	equ	0xFF5
 14401                           prodh	equ	0xFF4
 14402                           prodl	equ	0xFF3
 14403                           intcon	equ	0xFF2
 14404                           intcon2	equ	0xFF1
 14405                           intcon3	equ	0xFF0
 14406                           indf0	equ	0xFEF
 14407                           postinc0	equ	0xFEE
 14408                           fsr0h	equ	0xFEA
 14409                           fsr0l	equ	0xFE9
 14410                           wreg	equ	0xFE8
 14411                           indf1	equ	0xFE7
 14412                           postinc1	equ	0xFE6
 14413                           postdec1	equ	0xFE5
 14414                           plusw1	equ	0xFE3
 14415                           fsr1h	equ	0xFE2
 14416                           fsr1l	equ	0xFE1
 14417                           indf2	equ	0xFDF
 14418                           postinc2	equ	0xFDE
 14419                           postdec2	equ	0xFDD
 14420                           plusw2	equ	0xFDB
 14421                           fsr2h	equ	0xFDA
 14422                           fsr2l	equ	0xFD9
 14423                           status	equ	0xFD8
 14424                           
 14425 ;; *************** function _sdc_disk_initialize *****************
 14426 ;; Defined at:
 14427 ;;		line 275 in file "bibliotecas/diskio.c"
 14428 ;; Parameters:    Size  Location     Type
 14429 ;;		None
 14430 ;; Auto vars:     Size  Location     Type
 14431 ;;  count2          2   29[BANK0 ] int 
 14432 ;;  crc_number      2   25[BANK0 ] int 
 14433 ;;  count1          2   23[BANK0 ] int 
 14434 ;;  i               2   20[BANK0 ] int 
 14435 ;;  buff            1   31[BANK0 ] unsigned char 
 14436 ;;  ocr             1   28[BANK0 ] unsigned char 
 14437 ;;  buff_i          1   27[BANK0 ] unsigned char 
 14438 ;;  stat            1   22[BANK0 ] unsigned char 
 14439 ;; Return value:  Size  Location     Type
 14440 ;;                  1    wreg      unsigned char 
 14441 ;; Registers used:
 14442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14443 ;; Tracked objects:
 14444 ;;		On entry : 0/0
 14445 ;;		On exit  : 0/0
 14446 ;;		Unchanged: 0/0
 14447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14448 ;;      Params:         0       0       0       0       0       0       0       0       0
 14449 ;;      Locals:         0      12       0       0       0       0       0       0       0
 14450 ;;      Temps:          0       1       0       0       0       0       0       0       0
 14451 ;;      Totals:         0      13       0       0       0       0       0       0       0
 14452 ;;Total ram usage:       13 bytes
 14453 ;; Hardware stack levels used:    1
 14454 ;; Hardware stack levels required when called:    7
 14455 ;; This function calls:
 14456 ;;		_command
 14457 ;;		_dummy_clocks
 14458 ;;		_escreve_frase_ram_lcd
 14459 ;;		_posicao_cursor_lcd
 14460 ;;		_proceed
 14461 ;;		_response
 14462 ;;		_sdc_reset
 14463 ;; This function is called by:
 14464 ;;		_disk_initialize
 14465 ;; This function uses a non-reentrant model
 14466 ;;
 14467                           
 14468                           	psect	text48
 14469  002036                     __ptext48:
 14470                           	opt stack 0
 14471  002036                     _sdc_disk_initialize:
 14472                           	opt stack 17
 14473                           
 14474                           ;diskio.c: 277: BYTE ocr;
 14475                           ;diskio.c: 278: DSTATUS stat;
 14476                           ;diskio.c: 279: int i = 0, count1 = 0, count2 = 0;
 14477                           
 14478                           ; BSR set to: 0
 14479                           ;incstack = 0
 14480  002036  0E00               	movlw	0
 14481  002038  0100               	movlb	0	; () banked
 14482  00203A  6F75               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
 14483  00203C  0E00               	movlw	0
 14484  00203E  6F74               	movwf	sdc_disk_initialize@i& (0+255),b
 14485  002040  0E00               	movlw	0
 14486  002042  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 14487  002044  0E00               	movlw	0
 14488  002046  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 14489  002048  0E00               	movlw	0
 14490  00204A  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14491  00204C  0E00               	movlw	0
 14492  00204E  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 14493                           
 14494                           ;diskio.c: 280: BYTE buff = 0;
 14495  002050  0E00               	movlw	0
 14496  002052  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14497                           
 14498                           ; BSR set to: 0
 14499                           ;diskio.c: 281: BYTE buff_i;
 14500                           ;diskio.c: 282: int crc_number;
 14501                           ;diskio.c: 283: _delay((unsigned long)((1)*(48000000/4000.0)));
 14502  002054  0E10               	movlw	16
 14503  002056  0100               	movlb	0	; () banked
 14504  002058  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 14505  00205A  0E94               	movlw	148
 14506  00205C                     u17657:
 14507  00205C  2EE8               	decfsz	wreg,f,c
 14508  00205E  D7FE               	bra	u17657
 14509  002060  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 14510  002062  D7FC               	bra	u17657
 14511  002064  F000               	nop	
 14512                           
 14513                           ;diskio.c: 284: dummy_clocks(100);
 14514  002066  0E64               	movlw	100
 14515  002068  EC0E  F02A         	call	_dummy_clocks
 14516                           
 14517                           ;diskio.c: 287: sdc_reset();
 14518  00206C  EC60  F023         	call	_sdc_reset	;wreg free
 14519                           
 14520                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 14521  002070  0EAA               	movlw	170
 14522  002072  0100               	movlb	0	; () banked
 14523  002074  6F65               	movwf	command@arg& (0+255),b
 14524  002076  0E01               	movlw	1
 14525  002078  6F66               	movwf	(command@arg+1)& (0+255),b
 14526  00207A  0E00               	movlw	0
 14527  00207C  6F67               	movwf	(command@arg+2)& (0+255),b
 14528  00207E  0E00               	movlw	0
 14529  002080  6F68               	movwf	(command@arg+3)& (0+255),b
 14530  002082  0E87               	movlw	135
 14531  002084  6F69               	movwf	command@CRC& (0+255),b
 14532  002086  0E48               	movlw	72
 14533  002088  ECDF  F027         	call	_command
 14534                           
 14535                           ;diskio.c: 289: proceed();
 14536  00208C  ECFD  F02B         	call	_proceed	;wreg free
 14537  002090                     
 14538                           ;diskio.c: 291: buff_i = response();
 14539  002090  ECE3  F02B         	call	_response	;wreg free
 14540  002094  0100               	movlb	0	; () banked
 14541  002096  6F7B               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 14542                           
 14543                           ; BSR set to: 0
 14544                           ;diskio.c: 292: if(buff_i == 1)
 14545  002098  057B               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 14546  00209A  A4D8               	btfss	status,2,c
 14547  00209C  D004               	goto	l589
 14548                           
 14549                           ; BSR set to: 0
 14550                           ;diskio.c: 293: {
 14551                           ;diskio.c: 294: crc_number = buff_i<<8;
 14552  00209E  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 14553  0020A0  6F7A               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 14554  0020A2  6B79               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 14555                           
 14556                           ;diskio.c: 295: }
 14557  0020A4  D006               	goto	l591
 14558  0020A6                     l589:
 14559                           
 14560                           ; BSR set to: 0
 14561                           ;diskio.c: 296: else if(buff_i==0xAA)
 14562                           
 14563                           ; BSR set to: 0
 14564  0020A6  0EAA               	movlw	170
 14565  0020A8  197B               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 14566  0020AA  A4D8               	btfss	status,2,c
 14567  0020AC  D002               	goto	l591
 14568                           
 14569                           ; BSR set to: 0
 14570                           ;diskio.c: 297: {
 14571                           ;diskio.c: 298: crc_number |= buff_i;
 14572  0020AE  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 14573  0020B0  1379               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 14574  0020B2                     l591:
 14575                           
 14576                           ; BSR set to: 0
 14577                           ;diskio.c: 299: }
 14578                           ;diskio.c: 300: count1++;
 14579                           
 14580                           ; BSR set to: 0
 14581                           
 14582                           ; BSR set to: 0
 14583  0020B2  4B77               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 14584  0020B4  2B78               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 14585                           
 14586                           ; BSR set to: 0
 14587                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 14588  0020B6  0EAA               	movlw	170
 14589  0020B8  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 14590  0020BA  E103               	bnz	u13240
 14591  0020BC  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 14592  0020BE  B4D8               	btfsc	status,2,c
 14593  0020C0  D008               	goto	u13250
 14594  0020C2                     u13240:
 14595                           
 14596                           ; BSR set to: 0
 14597  0020C2  BF78               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 14598  0020C4  D7E5               	goto	l588
 14599  0020C6  0EE8               	movlw	232
 14600  0020C8  5D77               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 14601  0020CA  0E03               	movlw	3
 14602  0020CC  5978               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 14603  0020CE  A0D8               	btfss	status,0,c
 14604  0020D0  D7DF               	goto	l588
 14605  0020D2                     u13250:
 14606                           
 14607                           ; BSR set to: 0
 14608                           ;diskio.c: 306: if (crc_number == 0x1AA)
 14609                           
 14610                           ; BSR set to: 0
 14611                           
 14612                           ; BSR set to: 0
 14613  0020D2  0EAA               	movlw	170
 14614  0020D4  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 14615  0020D6  E102               	bnz	u13261
 14616  0020D8  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 14617  0020DA  A4D8               	btfss	status,2,c
 14618  0020DC                     u13261:
 14619  0020DC  D0B1               	goto	l595
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;diskio.c: 307: {
 14623                           ;diskio.c: 308: count1 = 0;
 14624  0020DE  0E00               	movlw	0
 14625  0020E0  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 14626  0020E2  0E00               	movlw	0
 14627  0020E4  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 14628  0020E6                     l596:
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;diskio.c: 310: count2 = 0;
 14632  0020E6  0E00               	movlw	0
 14633  0020E8  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14634  0020EA  0E00               	movlw	0
 14635  0020EC  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 14636                           
 14637                           ; BSR set to: 0
 14638                           ;diskio.c: 311: buff = 0XFF;
 14639  0020EE  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14640  0020F0                     
 14641                           ; BSR set to: 0
 14642                           ;diskio.c: 319: dummy_clocks(10);
 14643                           
 14644                           ; BSR set to: 0
 14645  0020F0  0E0A               	movlw	10
 14646  0020F2  EC0E  F02A         	call	_dummy_clocks
 14647                           
 14648                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 14649  0020F6  0E00               	movlw	0
 14650  0020F8  0100               	movlb	0	; () banked
 14651  0020FA  6F65               	movwf	command@arg& (0+255),b
 14652  0020FC  0E00               	movlw	0
 14653  0020FE  6F66               	movwf	(command@arg+1)& (0+255),b
 14654  002100  0E00               	movlw	0
 14655  002102  6F67               	movwf	(command@arg+2)& (0+255),b
 14656  002104  0E00               	movlw	0
 14657  002106  6F68               	movwf	(command@arg+3)& (0+255),b
 14658  002108  0E00               	movlw	0
 14659  00210A  6F69               	movwf	command@CRC& (0+255),b
 14660  00210C  0E77               	movlw	119
 14661  00210E  ECDF  F027         	call	_command
 14662                           
 14663                           ;diskio.c: 321: buff = 0XFF;
 14664  002112  0100               	movlb	0	; () banked
 14665  002114  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14666                           
 14667                           ; BSR set to: 0
 14668                           ;diskio.c: 323: proceed();
 14669  002116  ECFD  F02B         	call	_proceed	;wreg free
 14670  00211A                     
 14671                           ;diskio.c: 325: buff = response();
 14672  00211A  ECE3  F02B         	call	_response	;wreg free
 14673  00211E  0100               	movlb	0	; () banked
 14674  002120  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14675                           
 14676                           ; BSR set to: 0
 14677                           ;diskio.c: 326: count2++;
 14678  002122  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14679  002124  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14680                           
 14681                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 14682  002126  057F               	decf	sdc_disk_initialize@buff& (0+255),w,b
 14683  002128  B4D8               	btfsc	status,2,c
 14684  00212A  D008               	goto	u13280
 14685                           
 14686                           ; BSR set to: 0
 14687  00212C  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14688  00212E  D7F5               	goto	l598
 14689  002130  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14690  002132  E104               	bnz	l10299
 14691  002134  0E0A               	movlw	10
 14692  002136  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14693  002138  A0D8               	btfss	status,0,c
 14694  00213A  D7EF               	goto	l598
 14695  00213C                     u13280:
 14696  00213C                     l10299:
 14697                           
 14698                           ; BSR set to: 0
 14699                           ;diskio.c: 328: count2 = 0;
 14700  00213C  0E00               	movlw	0
 14701  00213E  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14702  002140  0E00               	movlw	0
 14703  002142  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 14704                           
 14705                           ; BSR set to: 0
 14706                           ;diskio.c: 332: dummy_clocks(10);
 14707  002144  0E0A               	movlw	10
 14708  002146  EC0E  F02A         	call	_dummy_clocks
 14709                           
 14710                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 14711  00214A  0E00               	movlw	0
 14712  00214C  0100               	movlb	0	; () banked
 14713  00214E  6F65               	movwf	command@arg& (0+255),b
 14714  002150  0E00               	movlw	0
 14715  002152  6F66               	movwf	(command@arg+1)& (0+255),b
 14716  002154  0E00               	movlw	0
 14717  002156  6F67               	movwf	(command@arg+2)& (0+255),b
 14718  002158  0E40               	movlw	64
 14719  00215A  6F68               	movwf	(command@arg+3)& (0+255),b
 14720  00215C  0E00               	movlw	0
 14721  00215E  6F69               	movwf	command@CRC& (0+255),b
 14722  002160  0E69               	movlw	105
 14723  002162  ECDF  F027         	call	_command
 14724                           
 14725                           ;diskio.c: 334: proceed();
 14726  002166  ECFD  F02B         	call	_proceed	;wreg free
 14727                           
 14728                           ;diskio.c: 335: buff = response();
 14729  00216A  ECE3  F02B         	call	_response	;wreg free
 14730  00216E  0100               	movlb	0	; () banked
 14731  002170  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14732                           
 14733                           ; BSR set to: 0
 14734                           ;diskio.c: 336: count2++;
 14735  002172  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14736  002174  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14737                           
 14738                           ; BSR set to: 0
 14739                           ;diskio.c: 337: }while(buff!=0X00);
 14740  002176  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14741  002178  A4D8               	btfss	status,2,c
 14742  00217A  D7BA               	goto	l597
 14743                           
 14744                           ; BSR set to: 0
 14745                           ;diskio.c: 339: buff = 0xFF;
 14746  00217C  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14747                           
 14748                           ; BSR set to: 0
 14749                           ;diskio.c: 342: dummy_clocks(10);
 14750  00217E  0E0A               	movlw	10
 14751  002180  EC0E  F02A         	call	_dummy_clocks
 14752                           
 14753                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 14754  002184  0E00               	movlw	0
 14755  002186  0100               	movlb	0	; () banked
 14756  002188  6F65               	movwf	command@arg& (0+255),b
 14757  00218A  0E00               	movlw	0
 14758  00218C  6F66               	movwf	(command@arg+1)& (0+255),b
 14759  00218E  0E00               	movlw	0
 14760  002190  6F67               	movwf	(command@arg+2)& (0+255),b
 14761  002192  0E00               	movlw	0
 14762  002194  6F68               	movwf	(command@arg+3)& (0+255),b
 14763  002196  0EFF               	movlw	255
 14764  002198  6F69               	movwf	command@CRC& (0+255),b
 14765  00219A  0E7A               	movlw	122
 14766  00219C  ECDF  F027         	call	_command
 14767                           
 14768                           ;diskio.c: 344: proceed();
 14769  0021A0  ECFD  F02B         	call	_proceed	;wreg free
 14770  0021A4                     
 14771                           ;diskio.c: 346: buff = response();
 14772  0021A4  ECE3  F02B         	call	_response	;wreg free
 14773  0021A8  0100               	movlb	0	; () banked
 14774  0021AA  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14775                           
 14776                           ; BSR set to: 0
 14777                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 14778  0021AC  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14779  0021AE  257F               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 14780  0021B0  0B80               	andlw	128
 14781  0021B2  6F7C               	movwf	sdc_disk_initialize@ocr& (0+255),b
 14782                           
 14783                           ; BSR set to: 0
 14784                           ;diskio.c: 348: count2++;
 14785  0021B4  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14786  0021B6  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14787                           
 14788                           ; BSR set to: 0
 14789                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 14790  0021B8  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 14791  0021BA  B4D8               	btfsc	status,2,c
 14792  0021BC  D00B               	goto	u13320
 14793                           
 14794                           ; BSR set to: 0
 14795  0021BE  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 14796  0021C0  B4D8               	btfsc	status,2,c
 14797  0021C2  D008               	goto	u13320
 14798                           
 14799                           ; BSR set to: 0
 14800  0021C4  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14801  0021C6  D7EE               	goto	l603
 14802  0021C8  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14803  0021CA  E104               	bnz	l10329
 14804  0021CC  0E0A               	movlw	10
 14805  0021CE  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14806  0021D0  A0D8               	btfss	status,0,c
 14807  0021D2  D7E8               	goto	l603
 14808  0021D4                     u13320:
 14809  0021D4                     l10329:
 14810                           
 14811                           ; BSR set to: 0
 14812                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 14813  0021D4  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 14814  0021D6  B4D8               	btfsc	status,2,c
 14815  0021D8  D003               	goto	u13340
 14816                           
 14817                           ; BSR set to: 0
 14818  0021DA  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 14819  0021DC  A4D8               	btfss	status,2,c
 14820  0021DE  D783               	goto	l596
 14821  0021E0                     u13340:
 14822                           
 14823                           ; BSR set to: 0
 14824                           ;diskio.c: 353: count1 = 0;
 14825                           
 14826                           ; BSR set to: 0
 14827                           
 14828                           ; BSR set to: 0
 14829  0021E0  0E00               	movlw	0
 14830  0021E2  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 14831  0021E4  0E00               	movlw	0
 14832  0021E6  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 14833                           
 14834                           ; BSR set to: 0
 14835                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 14836  0021E8  0E10               	movlw	16
 14837  0021EA  0100               	movlb	0	; () banked
 14838  0021EC  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 14839  0021EE  0E94               	movlw	148
 14840  0021F0                     u17667:
 14841  0021F0  2EE8               	decfsz	wreg,f,c
 14842  0021F2  D7FE               	bra	u17667
 14843  0021F4  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 14844  0021F6  D7FC               	bra	u17667
 14845  0021F8  F000               	nop	
 14846                           
 14847                           ;diskio.c: 356: stat = 0X00;
 14848  0021FA  0E00               	movlw	0
 14849  0021FC  0100               	movlb	0	; () banked
 14850  0021FE  6F76               	movwf	sdc_disk_initialize@stat& (0+255),b
 14851                           
 14852                           ; BSR set to: 0
 14853                           ;diskio.c: 358: if(!ocr)
 14854  002200  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 14855  002202  A4D8               	btfss	status,2,c
 14856  002204  D0B9               	goto	u13440
 14857                           
 14858                           ; BSR set to: 0
 14859                           ;diskio.c: 359: {
 14860                           ;diskio.c: 361: dummy_clocks(10);
 14861  002206  0E0A               	movlw	10
 14862  002208  EC0E  F02A         	call	_dummy_clocks
 14863                           
 14864                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 14865  00220C  0E00               	movlw	0
 14866  00220E  0100               	movlb	0	; () banked
 14867  002210  6F65               	movwf	command@arg& (0+255),b
 14868  002212  0E02               	movlw	2
 14869  002214  6F66               	movwf	(command@arg+1)& (0+255),b
 14870  002216  0E00               	movlw	0
 14871  002218  6F67               	movwf	(command@arg+2)& (0+255),b
 14872  00221A  0E00               	movlw	0
 14873  00221C  6F68               	movwf	(command@arg+3)& (0+255),b
 14874  00221E  0EFF               	movlw	255
 14875  002220  6F69               	movwf	command@CRC& (0+255),b
 14876  002222  0E50               	movlw	80
 14877  002224  ECDF  F027         	call	_command
 14878                           
 14879                           ;diskio.c: 363: proceed();
 14880  002228  ECFD  F02B         	call	_proceed	;wreg free
 14881                           
 14882                           ;diskio.c: 365: buff = 0xFF;
 14883  00222C  0100               	movlb	0	; () banked
 14884  00222E  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14885  002230                     
 14886                           ; BSR set to: 0
 14887                           ;diskio.c: 367: buff = response();
 14888                           
 14889                           ; BSR set to: 0
 14890  002230  ECE3  F02B         	call	_response	;wreg free
 14891  002234  0100               	movlb	0	; () banked
 14892  002236  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14893                           
 14894                           ; BSR set to: 0
 14895                           ;diskio.c: 368: }while(buff!=0X00);
 14896  002238  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14897  00223A  B4D8               	btfsc	status,2,c
 14898  00223C  D09D               	goto	u13440
 14899  00223E  D7F8               	goto	l611
 14900  002240                     l595:
 14901                           
 14902                           ; BSR set to: 0
 14903                           ;diskio.c: 373: else
 14904                           ;diskio.c: 374: {
 14905                           ;diskio.c: 376: count2 = 0;
 14906                           
 14907                           ; BSR set to: 0
 14908  002240  0E00               	movlw	0
 14909  002242  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14910  002244  0E00               	movlw	0
 14911  002246  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 14912                           
 14913                           ; BSR set to: 0
 14914                           ;diskio.c: 377: buff = 0XFF;
 14915  002248  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14916                           
 14917                           ; BSR set to: 0
 14918                           ;diskio.c: 378: dummy_clocks(1);
 14919  00224A  0E01               	movlw	1
 14920  00224C  EC0E  F02A         	call	_dummy_clocks
 14921                           
 14922                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 14923  002250  0E00               	movlw	0
 14924  002252  0100               	movlb	0	; () banked
 14925  002254  6F65               	movwf	command@arg& (0+255),b
 14926  002256  0E00               	movlw	0
 14927  002258  6F66               	movwf	(command@arg+1)& (0+255),b
 14928  00225A  0E00               	movlw	0
 14929  00225C  6F67               	movwf	(command@arg+2)& (0+255),b
 14930  00225E  0E00               	movlw	0
 14931  002260  6F68               	movwf	(command@arg+3)& (0+255),b
 14932  002262  0EFF               	movlw	255
 14933  002264  6F69               	movwf	command@CRC& (0+255),b
 14934  002266  0E69               	movlw	105
 14935  002268  ECDF  F027         	call	_command
 14936                           
 14937                           ;diskio.c: 380: proceed();
 14938  00226C  ECFD  F02B         	call	_proceed	;wreg free
 14939  002270                     
 14940                           ;diskio.c: 382: buff = response();
 14941  002270  ECE3  F02B         	call	_response	;wreg free
 14942  002274  0100               	movlb	0	; () banked
 14943  002276  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14944                           
 14945                           ; BSR set to: 0
 14946                           ;diskio.c: 383: count2++;
 14947  002278  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14948  00227A  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14949                           
 14950                           ; BSR set to: 0
 14951                           ;diskio.c: 384: if(buff==0x00)
 14952  00227C  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14953  00227E  A4D8               	btfss	status,2,c
 14954  002280  D00C               	goto	l615
 14955                           
 14956                           ; BSR set to: 0
 14957                           ;diskio.c: 385: {
 14958                           ;diskio.c: 386: posicao_cursor_lcd(1,0);
 14959  002282  0E00               	movlw	0
 14960  002284  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 14961  002286  0E01               	movlw	1
 14962  002288  ECC4  F026         	call	_posicao_cursor_lcd
 14963                           
 14964                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 14965  00228C  0E20               	movlw	low STR_30
 14966  00228E  0100               	movlb	0	; () banked
 14967  002290  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 14968  002292  0E62               	movlw	high STR_30
 14969  002294  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 14970  002296  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
 14971  00229A                     l615:
 14972                           
 14973                           ;diskio.c: 388: }
 14974                           ;diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 14975  00229A  0E10               	movlw	16
 14976  00229C  0100               	movlb	0	; () banked
 14977  00229E  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 14978  0022A0  0E94               	movlw	148
 14979  0022A2                     u17677:
 14980  0022A2  2EE8               	decfsz	wreg,f,c
 14981  0022A4  D7FE               	bra	u17677
 14982  0022A6  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 14983  0022A8  D7FC               	bra	u17677
 14984  0022AA  F000               	nop	
 14985                           
 14986                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 14987  0022AC  0100               	movlb	0	; () banked
 14988  0022AE  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14989  0022B0  B4D8               	btfsc	status,2,c
 14990  0022B2  D008               	goto	u13390
 14991                           
 14992                           ; BSR set to: 0
 14993  0022B4  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14994  0022B6  D7DC               	goto	l614
 14995  0022B8  0E10               	movlw	16
 14996  0022BA  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14997  0022BC  0E27               	movlw	39
 14998  0022BE  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14999  0022C0  A0D8               	btfss	status,0,c
 15000  0022C2  D7D6               	goto	l614
 15001  0022C4                     u13390:
 15002                           
 15003                           ; BSR set to: 0
 15004                           ;diskio.c: 392: buff = 0xFF;
 15005                           
 15006                           ; BSR set to: 0
 15007  0022C4  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 15008                           
 15009                           ; BSR set to: 0
 15010                           ;diskio.c: 393: if(count2==10)
 15011  0022C6  0E0A               	movlw	10
 15012  0022C8  197D               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 15013  0022CA  117E               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 15014  0022CC  A4D8               	btfss	status,2,c
 15015  0022CE  D038               	goto	u13430
 15016                           
 15017                           ; BSR set to: 0
 15018                           ;diskio.c: 394: {
 15019                           ;diskio.c: 395: count2 = 0;
 15020  0022D0  0E00               	movlw	0
 15021  0022D2  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 15022  0022D4  0E00               	movlw	0
 15023  0022D6  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 15024                           
 15025                           ; BSR set to: 0
 15026                           ;diskio.c: 396: dummy_clocks(10);
 15027  0022D8  0E0A               	movlw	10
 15028  0022DA  EC0E  F02A         	call	_dummy_clocks
 15029                           
 15030                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 15031  0022DE  0E00               	movlw	0
 15032  0022E0  0100               	movlb	0	; () banked
 15033  0022E2  6F65               	movwf	command@arg& (0+255),b
 15034  0022E4  0E00               	movlw	0
 15035  0022E6  6F66               	movwf	(command@arg+1)& (0+255),b
 15036  0022E8  0E00               	movlw	0
 15037  0022EA  6F67               	movwf	(command@arg+2)& (0+255),b
 15038  0022EC  0E00               	movlw	0
 15039  0022EE  6F68               	movwf	(command@arg+3)& (0+255),b
 15040  0022F0  0EFF               	movlw	255
 15041  0022F2  6F69               	movwf	command@CRC& (0+255),b
 15042  0022F4  0E41               	movlw	65
 15043  0022F6  ECDF  F027         	call	_command
 15044                           
 15045                           ;diskio.c: 398: proceed();
 15046  0022FA  ECFD  F02B         	call	_proceed	;wreg free
 15047  0022FE                     
 15048                           ;diskio.c: 400: buff = response();
 15049  0022FE  ECE3  F02B         	call	_response	;wreg free
 15050  002302  0100               	movlb	0	; () banked
 15051  002304  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 15052                           
 15053                           ; BSR set to: 0
 15054                           ;diskio.c: 401: count2++;
 15055  002306  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 15056  002308  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 15057                           
 15058                           ; BSR set to: 0
 15059                           ;diskio.c: 402: if(buff==0x00)
 15060  00230A  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15061  00230C  A4D8               	btfss	status,2,c
 15062  00230E  D00C               	goto	l621
 15063                           
 15064                           ; BSR set to: 0
 15065                           ;diskio.c: 403: {
 15066                           ;diskio.c: 404: posicao_cursor_lcd(1,0);
 15067  002310  0E00               	movlw	0
 15068  002312  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 15069  002314  0E01               	movlw	1
 15070  002316  ECC4  F026         	call	_posicao_cursor_lcd
 15071                           
 15072                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 15073  00231A  0E0A               	movlw	low STR_31
 15074  00231C  0100               	movlb	0	; () banked
 15075  00231E  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 15076  002320  0E62               	movlw	high STR_31
 15077  002322  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 15078  002324  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
 15079  002328                     l621:
 15080                           
 15081                           ;diskio.c: 406: }
 15082                           ;diskio.c: 408: }while(buff!=0X00 && count2<10000);
 15083  002328  0100               	movlb	0	; () banked
 15084  00232A  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15085  00232C  B4D8               	btfsc	status,2,c
 15086  00232E  D008               	goto	u13430
 15087                           
 15088                           ; BSR set to: 0
 15089  002330  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 15090  002332  D7E5               	goto	l620
 15091  002334  0E10               	movlw	16
 15092  002336  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 15093  002338  0E27               	movlw	39
 15094  00233A  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 15095  00233C  A0D8               	btfss	status,0,c
 15096  00233E  D7DF               	goto	l620
 15097  002340                     u13430:
 15098                           
 15099                           ; BSR set to: 0
 15100                           ;diskio.c: 409: }
 15101                           ;diskio.c: 412: dummy_clocks(10);
 15102                           
 15103                           ; BSR set to: 0
 15104                           
 15105                           ; BSR set to: 0
 15106                           
 15107                           ; BSR set to: 0
 15108  002340  0E0A               	movlw	10
 15109  002342  EC0E  F02A         	call	_dummy_clocks
 15110                           
 15111                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 15112  002346  0E00               	movlw	0
 15113  002348  0100               	movlb	0	; () banked
 15114  00234A  6F65               	movwf	command@arg& (0+255),b
 15115  00234C  0E02               	movlw	2
 15116  00234E  6F66               	movwf	(command@arg+1)& (0+255),b
 15117  002350  0E00               	movlw	0
 15118  002352  6F67               	movwf	(command@arg+2)& (0+255),b
 15119  002354  0E00               	movlw	0
 15120  002356  6F68               	movwf	(command@arg+3)& (0+255),b
 15121  002358  0EFF               	movlw	255
 15122  00235A  6F69               	movwf	command@CRC& (0+255),b
 15123  00235C  0E50               	movlw	80
 15124  00235E  ECDF  F027         	call	_command
 15125                           
 15126                           ;diskio.c: 414: proceed();
 15127  002362  ECFD  F02B         	call	_proceed	;wreg free
 15128                           
 15129                           ;diskio.c: 416: buff = 0xFF;
 15130  002366  0100               	movlb	0	; () banked
 15131  002368  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 15132  00236A                     
 15133                           ; BSR set to: 0
 15134                           ;diskio.c: 418: buff = response();
 15135                           
 15136                           ; BSR set to: 0
 15137  00236A  ECE3  F02B         	call	_response	;wreg free
 15138  00236E  0100               	movlb	0	; () banked
 15139  002370  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 15140                           
 15141                           ; BSR set to: 0
 15142                           ;diskio.c: 419: }while(buff!=0X00);
 15143  002372  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15144  002374  A4D8               	btfss	status,2,c
 15145  002376  D7F9               	goto	l625
 15146  002378                     u13440:
 15147                           
 15148                           ; BSR set to: 0
 15149                           ;diskio.c: 421: }
 15150                           ;diskio.c: 425: return stat;
 15151                           
 15152                           ; BSR set to: 0
 15153                           
 15154                           ; BSR set to: 0
 15155  002378  5176               	movf	sdc_disk_initialize@stat& (0+255),w,b
 15156  00237A  0012               	return	
 15157  00237C                     __end_of_sdc_disk_initialize:
 15158                           	opt stack 0
 15159                           tosu	equ	0xFFF
 15160                           tosh	equ	0xFFE
 15161                           tosl	equ	0xFFD
 15162                           pclath	equ	0xFFA
 15163                           tblptru	equ	0xFF8
 15164                           tblptrh	equ	0xFF7
 15165                           tblptrl	equ	0xFF6
 15166                           tablat	equ	0xFF5
 15167                           prodh	equ	0xFF4
 15168                           prodl	equ	0xFF3
 15169                           intcon	equ	0xFF2
 15170                           intcon2	equ	0xFF1
 15171                           intcon3	equ	0xFF0
 15172                           indf0	equ	0xFEF
 15173                           postinc0	equ	0xFEE
 15174                           fsr0h	equ	0xFEA
 15175                           fsr0l	equ	0xFE9
 15176                           wreg	equ	0xFE8
 15177                           indf1	equ	0xFE7
 15178                           postinc1	equ	0xFE6
 15179                           postdec1	equ	0xFE5
 15180                           plusw1	equ	0xFE3
 15181                           fsr1h	equ	0xFE2
 15182                           fsr1l	equ	0xFE1
 15183                           indf2	equ	0xFDF
 15184                           postinc2	equ	0xFDE
 15185                           postdec2	equ	0xFDD
 15186                           plusw2	equ	0xFDB
 15187                           fsr2h	equ	0xFDA
 15188                           fsr2l	equ	0xFD9
 15189                           status	equ	0xFD8
 15190                           
 15191 ;; *************** function _sdc_reset *****************
 15192 ;; Defined at:
 15193 ;;		line 238 in file "bibliotecas/diskio.c"
 15194 ;; Parameters:    Size  Location     Type
 15195 ;;		None
 15196 ;; Auto vars:     Size  Location     Type
 15197 ;;  teste          10    0        unsigned char [10]
 15198 ;;  count           2   16[BANK0 ] int 
 15199 ;;  count_nosd      2   14[BANK0 ] int 
 15200 ;;  i               2   12[BANK0 ] int 
 15201 ;;  receive         2    0        unsigned int 
 15202 ;;  buff            1   18[BANK0 ] unsigned char 
 15203 ;;  stat            1    0        unsigned char 
 15204 ;; Return value:  Size  Location     Type
 15205 ;;                  1    wreg      void 
 15206 ;; Registers used:
 15207 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15208 ;; Tracked objects:
 15209 ;;		On entry : 0/0
 15210 ;;		On exit  : 0/0
 15211 ;;		Unchanged: 0/0
 15212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15213 ;;      Params:         0       0       0       0       0       0       0       0       0
 15214 ;;      Locals:         0       7       0       0       0       0       0       0       0
 15215 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15216 ;;      Totals:         0       7       0       0       0       0       0       0       0
 15217 ;;Total ram usage:        7 bytes
 15218 ;; Hardware stack levels used:    1
 15219 ;; Hardware stack levels required when called:    6
 15220 ;; This function calls:
 15221 ;;		_command
 15222 ;;		_escreve_frase_ram_lcd
 15223 ;;		_posicao_cursor_lcd
 15224 ;;		_proceed
 15225 ;;		_response
 15226 ;; This function is called by:
 15227 ;;		_sdc_disk_initialize
 15228 ;; This function uses a non-reentrant model
 15229 ;;
 15230                           
 15231                           	psect	text49
 15232  0046C0                     __ptext49:
 15233                           	opt stack 0
 15234  0046C0                     _sdc_reset:
 15235                           	opt stack 17
 15236                           
 15237                           ;diskio.c: 240: int i = 0, count = 0, count_nosd = 0;
 15238                           
 15239                           ; BSR set to: 0
 15240                           ;incstack = 0
 15241  0046C0  0E00               	movlw	0
 15242  0046C2  0100               	movlb	0	; () banked
 15243  0046C4  6F6D               	movwf	(sdc_reset@i+1)& (0+255),b
 15244  0046C6  0E00               	movlw	0
 15245  0046C8  6F6C               	movwf	sdc_reset@i& (0+255),b
 15246  0046CA  0E00               	movlw	0
 15247  0046CC  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 15248  0046CE  0E00               	movlw	0
 15249  0046D0  6F70               	movwf	sdc_reset@count& (0+255),b
 15250  0046D2  0E00               	movlw	0
 15251  0046D4  6F6F               	movwf	(sdc_reset@count_nosd+1)& (0+255),b
 15252  0046D6  0E00               	movlw	0
 15253  0046D8  6F6E               	movwf	sdc_reset@count_nosd& (0+255),b
 15254  0046DA                     
 15255                           ; BSR set to: 0
 15256                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 15257                           
 15258                           ; BSR set to: 0
 15259  0046DA  0E00               	movlw	0
 15260  0046DC  6F65               	movwf	command@arg& (0+255),b
 15261  0046DE  0E00               	movlw	0
 15262  0046E0  6F66               	movwf	(command@arg+1)& (0+255),b
 15263  0046E2  0E00               	movlw	0
 15264  0046E4  6F67               	movwf	(command@arg+2)& (0+255),b
 15265  0046E6  0E00               	movlw	0
 15266  0046E8  6F68               	movwf	(command@arg+3)& (0+255),b
 15267  0046EA  0E95               	movlw	149
 15268  0046EC  6F69               	movwf	command@CRC& (0+255),b
 15269  0046EE  0E40               	movlw	64
 15270  0046F0  ECDF  F027         	call	_command
 15271                           
 15272                           ;diskio.c: 249: proceed();
 15273  0046F4  ECFD  F02B         	call	_proceed	;wreg free
 15274  0046F8                     
 15275                           ;diskio.c: 251: buff = response();
 15276  0046F8  ECE3  F02B         	call	_response	;wreg free
 15277  0046FC  0100               	movlb	0	; () banked
 15278  0046FE  6F72               	movwf	sdc_reset@buff& (0+255),b
 15279                           
 15280                           ; BSR set to: 0
 15281                           ;diskio.c: 252: count++;
 15282  004700  4B70               	infsnz	sdc_reset@count& (0+255),f,b
 15283  004702  2B71               	incf	(sdc_reset@count+1)& (0+255),f,b
 15284                           
 15285                           ; BSR set to: 0
 15286                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 15287  004704  0572               	decf	sdc_reset@buff& (0+255),w,b
 15288  004706  B4D8               	btfsc	status,2,c
 15289  004708  D008               	goto	u12990
 15290                           
 15291                           ; BSR set to: 0
 15292  00470A  BF71               	btfsc	(sdc_reset@count+1)& (0+255),7,b
 15293  00470C  D7F5               	goto	l579
 15294  00470E  5171               	movf	(sdc_reset@count+1)& (0+255),w,b
 15295  004710  E104               	bnz	l10117
 15296  004712  0E0A               	movlw	10
 15297  004714  5D70               	subwf	sdc_reset@count& (0+255),w,b
 15298  004716  A0D8               	btfss	status,0,c
 15299  004718  D7EF               	goto	l579
 15300  00471A                     u12990:
 15301  00471A                     l10117:
 15302                           
 15303                           ; BSR set to: 0
 15304                           ;diskio.c: 254: count = 0;
 15305  00471A  0E00               	movlw	0
 15306  00471C  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 15307  00471E  0E00               	movlw	0
 15308  004720  6F70               	movwf	sdc_reset@count& (0+255),b
 15309                           
 15310                           ; BSR set to: 0
 15311                           ;diskio.c: 255: if(buff != 0x01)
 15312  004722  0572               	decf	sdc_reset@buff& (0+255),w,b
 15313  004724  B4D8               	btfsc	status,2,c
 15314  004726  D019               	goto	l583
 15315                           
 15316                           ; BSR set to: 0
 15317                           ;diskio.c: 256: {
 15318                           ;diskio.c: 257: posicao_cursor_lcd(1,0);
 15319  004728  0E00               	movlw	0
 15320  00472A  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 15321  00472C  0E01               	movlw	1
 15322  00472E  ECC4  F026         	call	_posicao_cursor_lcd
 15323                           
 15324                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 15325  004732  0E15               	movlw	low STR_28
 15326  004734  0100               	movlb	0	; () banked
 15327  004736  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 15328  004738  0E62               	movlw	high STR_28
 15329  00473A  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 15330  00473C  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
 15331                           
 15332                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 15333  004740  0E00               	movlw	0
 15334  004742  0100               	movlb	0	; () banked
 15335  004744  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 15336  004746  0E02               	movlw	2
 15337  004748  ECC4  F026         	call	_posicao_cursor_lcd
 15338                           
 15339                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 15340  00474C  0E82               	movlw	low STR_29
 15341  00474E  0100               	movlb	0	; () banked
 15342  004750  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 15343  004752  0E61               	movlw	high STR_29
 15344  004754  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 15345  004756  ECC1  F028         	call	_escreve_frase_ram_lcd	;wreg free
 15346  00475A                     l583:
 15347                           
 15348                           ;diskio.c: 261: }
 15349                           ;diskio.c: 263: }while(buff!=0X01);
 15350  00475A  0100               	movlb	0	; () banked
 15351  00475C  0572               	decf	sdc_reset@buff& (0+255),w,b
 15352  00475E  B4D8               	btfsc	status,2,c
 15353  004760  0012               	return	
 15354  004762  D7BB               	goto	l578
 15355  004764                     __end_of_sdc_reset:
 15356                           	opt stack 0
 15357                           tosu	equ	0xFFF
 15358                           tosh	equ	0xFFE
 15359                           tosl	equ	0xFFD
 15360                           pclath	equ	0xFFA
 15361                           tblptru	equ	0xFF8
 15362                           tblptrh	equ	0xFF7
 15363                           tblptrl	equ	0xFF6
 15364                           tablat	equ	0xFF5
 15365                           prodh	equ	0xFF4
 15366                           prodl	equ	0xFF3
 15367                           intcon	equ	0xFF2
 15368                           intcon2	equ	0xFF1
 15369                           intcon3	equ	0xFF0
 15370                           indf0	equ	0xFEF
 15371                           postinc0	equ	0xFEE
 15372                           fsr0h	equ	0xFEA
 15373                           fsr0l	equ	0xFE9
 15374                           wreg	equ	0xFE8
 15375                           indf1	equ	0xFE7
 15376                           postinc1	equ	0xFE6
 15377                           postdec1	equ	0xFE5
 15378                           plusw1	equ	0xFE3
 15379                           fsr1h	equ	0xFE2
 15380                           fsr1l	equ	0xFE1
 15381                           indf2	equ	0xFDF
 15382                           postinc2	equ	0xFDE
 15383                           postdec2	equ	0xFDD
 15384                           plusw2	equ	0xFDB
 15385                           fsr2h	equ	0xFDA
 15386                           fsr2l	equ	0xFD9
 15387                           status	equ	0xFD8
 15388                           
 15389 ;; *************** function _posicao_cursor_lcd *****************
 15390 ;; Defined at:
 15391 ;;		line 271 in file "bibliotecas/display_lcd.c"
 15392 ;; Parameters:    Size  Location     Type
 15393 ;;  linha           1    wreg     unsigned char 
 15394 ;;  coluna          1    3[BANK0 ] unsigned char 
 15395 ;; Auto vars:     Size  Location     Type
 15396 ;;  linha           1    4[BANK0 ] unsigned char 
 15397 ;;  endereco        1    5[BANK0 ] unsigned char 
 15398 ;; Return value:  Size  Location     Type
 15399 ;;                  1    wreg      void 
 15400 ;; Registers used:
 15401 ;;		wreg, status,2, status,0, cstack
 15402 ;; Tracked objects:
 15403 ;;		On entry : 0/0
 15404 ;;		On exit  : 0/0
 15405 ;;		Unchanged: 0/0
 15406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15407 ;;      Params:         0       1       0       0       0       0       0       0       0
 15408 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15409 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15410 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15411 ;;Total ram usage:        3 bytes
 15412 ;; Hardware stack levels used:    1
 15413 ;; Hardware stack levels required when called:    5
 15414 ;; This function calls:
 15415 ;;		_endereco_cursor_lcd
 15416 ;; This function is called by:
 15417 ;;		_mensagem_inicial
 15418 ;;		_verifica_fence_externo
 15419 ;;		_troca_de_tela
 15420 ;;		_sdc_reset
 15421 ;;		_sdc_disk_initialize
 15422 ;;		_sdcard_init
 15423 ;; This function uses a non-reentrant model
 15424 ;;
 15425                           
 15426                           	psect	text50
 15427  004D88                     __ptext50:
 15428                           	opt stack 0
 15429  004D88                     _posicao_cursor_lcd:
 15430                           	opt stack 24
 15431                           
 15432                           ; BSR set to: 0
 15433                           ;incstack = 0
 15434                           ;posicao_cursor_lcd@linha stored from wreg
 15435  004D88  0100               	movlb	0	; () banked
 15436  004D8A  6F64               	movwf	posicao_cursor_lcd@linha& (0+255),b
 15437                           
 15438                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 15439  004D8C  0E00               	movlw	0
 15440  004D8E  0100               	movlb	0	; () banked
 15441  004D90  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15442                           
 15443                           ; BSR set to: 0
 15444                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 15445  004D92  0E11               	movlw	17
 15446  004D94  6163               	cpfslt	posicao_cursor_lcd@coluna& (0+255),b
 15447  004D96  D034               	goto	l733
 15448  004D98  D022               	goto	l734
 15449  004D9A                     l735:
 15450                           
 15451                           ; BSR set to: 0
 15452                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 15453  004D9A  C063  F065         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 15454                           
 15455                           ; BSR set to: 0
 15456                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 15457  004D9E  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 15458  004DA0  EC3F  F027         	call	_endereco_cursor_lcd
 15459                           
 15460                           ;display_lcd.c: 284: break;
 15461  004DA4  D02A               	goto	l736
 15462  004DA6                     
 15463                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 15464  004DA6  0100               	movlb	0	; () banked
 15465  004DA8  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 15466  004DAA  0F40               	addlw	64
 15467  004DAC  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15468                           
 15469                           ; BSR set to: 0
 15470                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 15471  004DAE  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 15472  004DB0  EC3F  F027         	call	_endereco_cursor_lcd
 15473                           
 15474                           ;display_lcd.c: 289: break;
 15475  004DB4  D022               	goto	l736
 15476  004DB6                     
 15477                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 15478  004DB6  0100               	movlb	0	; () banked
 15479  004DB8  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 15480  004DBA  0F14               	addlw	20
 15481  004DBC  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15482                           
 15483                           ; BSR set to: 0
 15484                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 15485  004DBE  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 15486  004DC0  EC3F  F027         	call	_endereco_cursor_lcd
 15487                           
 15488                           ;display_lcd.c: 294: break;
 15489  004DC4  D01A               	goto	l736
 15490  004DC6                     
 15491                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 15492  004DC6  0100               	movlb	0	; () banked
 15493  004DC8  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 15494  004DCA  0F54               	addlw	84
 15495  004DCC  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15496                           
 15497                           ; BSR set to: 0
 15498                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 15499  004DCE  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 15500  004DD0  EC3F  F027         	call	_endereco_cursor_lcd
 15501                           
 15502                           ;display_lcd.c: 299: break;
 15503  004DD4  D012               	goto	l736
 15504  004DD6                     
 15505                           ;display_lcd.c: 302: endereco = 0x00U;
 15506  004DD6  0E00               	movlw	0
 15507  004DD8  0100               	movlb	0	; () banked
 15508  004DDA  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15509                           
 15510                           ; BSR set to: 0
 15511                           ;display_lcd.c: 304: }
 15512                           
 15513                           ;display_lcd.c: 303: break;
 15514  004DDC  D00E               	goto	l736
 15515  004DDE                     l734:
 15516                           
 15517                           ; BSR set to: 0
 15518                           
 15519                           ; BSR set to: 0
 15520  004DDE  5164               	movf	posicao_cursor_lcd@linha& (0+255),w,b
 15521                           
 15522                           ; Switch size 1, requested type "space"
 15523                           ; Number of cases is 4, Range of values is 1 to 4
 15524                           ; switch strategies available:
 15525                           ; Name         Instructions Cycles
 15526                           ; simple_byte           13     7 (average)
 15527                           ;	Chosen strategy is simple_byte
 15528  004DE0  0A01               	xorlw	1	; case 1
 15529  004DE2  B4D8               	btfsc	status,2,c
 15530  004DE4  D7DA               	goto	l735
 15531  004DE6  0A03               	xorlw	3	; case 2
 15532  004DE8  B4D8               	btfsc	status,2,c
 15533  004DEA  D7DD               	goto	l737
 15534  004DEC  0A01               	xorlw	1	; case 3
 15535  004DEE  B4D8               	btfsc	status,2,c
 15536  004DF0  D7E2               	goto	l738
 15537  004DF2  0A07               	xorlw	7	; case 4
 15538  004DF4  B4D8               	btfsc	status,2,c
 15539  004DF6  D7E7               	goto	l739
 15540  004DF8  D7EE               	goto	l740
 15541  004DFA                     l736:
 15542                           
 15543                           ;display_lcd.c: 306: coluna++;
 15544                           
 15545                           ; BSR set to: 0
 15546  004DFA  0100               	movlb	0	; () banked
 15547  004DFC  2B63               	incf	posicao_cursor_lcd@coluna& (0+255),f,b
 15548                           
 15549                           ;display_lcd.c: 307: }
 15550  004DFE  0012               	return	
 15551  004E00                     l733:
 15552                           
 15553                           ; BSR set to: 0
 15554                           ;display_lcd.c: 308: else
 15555                           ;display_lcd.c: 309: {
 15556                           ;display_lcd.c: 310: endereco = 0x00U;
 15557                           
 15558                           ; BSR set to: 0
 15559  004E00  0E00               	movlw	0
 15560  004E02  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15561  004E04  0012               	return	
 15562  004E06                     __end_of_posicao_cursor_lcd:
 15563                           	opt stack 0
 15564                           tosu	equ	0xFFF
 15565                           tosh	equ	0xFFE
 15566                           tosl	equ	0xFFD
 15567                           pclath	equ	0xFFA
 15568                           tblptru	equ	0xFF8
 15569                           tblptrh	equ	0xFF7
 15570                           tblptrl	equ	0xFF6
 15571                           tablat	equ	0xFF5
 15572                           prodh	equ	0xFF4
 15573                           prodl	equ	0xFF3
 15574                           intcon	equ	0xFF2
 15575                           intcon2	equ	0xFF1
 15576                           intcon3	equ	0xFF0
 15577                           indf0	equ	0xFEF
 15578                           postinc0	equ	0xFEE
 15579                           fsr0h	equ	0xFEA
 15580                           fsr0l	equ	0xFE9
 15581                           wreg	equ	0xFE8
 15582                           indf1	equ	0xFE7
 15583                           postinc1	equ	0xFE6
 15584                           postdec1	equ	0xFE5
 15585                           plusw1	equ	0xFE3
 15586                           fsr1h	equ	0xFE2
 15587                           fsr1l	equ	0xFE1
 15588                           indf2	equ	0xFDF
 15589                           postinc2	equ	0xFDE
 15590                           postdec2	equ	0xFDD
 15591                           plusw2	equ	0xFDB
 15592                           fsr2h	equ	0xFDA
 15593                           fsr2l	equ	0xFD9
 15594                           status	equ	0xFD8
 15595                           
 15596 ;; *************** function _endereco_cursor_lcd *****************
 15597 ;; Defined at:
 15598 ;;		line 218 in file "bibliotecas/display_lcd.c"
 15599 ;; Parameters:    Size  Location     Type
 15600 ;;  endereco        1    wreg     unsigned char 
 15601 ;; Auto vars:     Size  Location     Type
 15602 ;;  endereco        1    2[BANK0 ] unsigned char 
 15603 ;; Return value:  Size  Location     Type
 15604 ;;                  1    wreg      void 
 15605 ;; Registers used:
 15606 ;;		wreg, status,2, status,0, cstack
 15607 ;; Tracked objects:
 15608 ;;		On entry : 0/0
 15609 ;;		On exit  : 0/0
 15610 ;;		Unchanged: 0/0
 15611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15612 ;;      Params:         0       0       0       0       0       0       0       0       0
 15613 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15614 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15615 ;;      Totals:         0       1       0       0       0       0       0       0       0
 15616 ;;Total ram usage:        1 bytes
 15617 ;; Hardware stack levels used:    1
 15618 ;; Hardware stack levels required when called:    4
 15619 ;; This function calls:
 15620 ;;		_delay
 15621 ;; This function is called by:
 15622 ;;		_posicao_cursor_lcd
 15623 ;;		_cria_caractere_lcd
 15624 ;; This function uses a non-reentrant model
 15625 ;;
 15626                           
 15627                           	psect	text51
 15628  004E7E                     __ptext51:
 15629                           	opt stack 0
 15630  004E7E                     _endereco_cursor_lcd:
 15631                           	opt stack 24
 15632                           
 15633                           ; BSR set to: 0
 15634                           ;incstack = 0
 15635                           ;endereco_cursor_lcd@endereco stored from wreg
 15636  004E7E  0100               	movlb	0	; () banked
 15637  004E80  6F62               	movwf	endereco_cursor_lcd@endereco& (0+255),b
 15638                           
 15639                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 15640  004E82  9483               	bcf	3971,2,c	;volatile
 15641                           
 15642                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 15643  004E84  9283               	bcf	3971,1,c	;volatile
 15644                           
 15645                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 15646  004E86  9083               	bcf	3971,0,c	;volatile
 15647                           
 15648                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 15649  004E88  8E83               	bsf	3971,7,c	;volatile
 15650                           
 15651                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 15652  004E8A  0100               	movlb	0	; () banked
 15653  004E8C  A962               	btfss	endereco_cursor_lcd@endereco& (0+255),4,b
 15654  004E8E  D002               	goto	l716
 15655                           
 15656                           ; BSR set to: 0
 15657  004E90  8883               	bsf	3971,4,c	;volatile
 15658  004E92  D001               	goto	l717
 15659  004E94                     l716:
 15660                           
 15661                           ; BSR set to: 0
 15662                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 15663  004E94  9883               	bcf	3971,4,c	;volatile
 15664  004E96                     l717:
 15665                           
 15666                           ; BSR set to: 0
 15667                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 15668                           
 15669                           ; BSR set to: 0
 15670  004E96  AB62               	btfss	endereco_cursor_lcd@endereco& (0+255),5,b
 15671  004E98  D002               	goto	l718
 15672                           
 15673                           ; BSR set to: 0
 15674  004E9A  8A83               	bsf	3971,5,c	;volatile
 15675  004E9C  D001               	goto	l719
 15676  004E9E                     l718:
 15677                           
 15678                           ; BSR set to: 0
 15679                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 15680  004E9E  9A83               	bcf	3971,5,c	;volatile
 15681  004EA0                     l719:
 15682                           
 15683                           ; BSR set to: 0
 15684                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 15685                           
 15686                           ; BSR set to: 0
 15687  004EA0  AD62               	btfss	endereco_cursor_lcd@endereco& (0+255),6,b
 15688  004EA2  D002               	goto	l720
 15689                           
 15690                           ; BSR set to: 0
 15691  004EA4  8C83               	bsf	3971,6,c	;volatile
 15692  004EA6  D001               	goto	l721
 15693  004EA8                     l720:
 15694                           
 15695                           ; BSR set to: 0
 15696                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 15697  004EA8  9C83               	bcf	3971,6,c	;volatile
 15698  004EAA                     l721:
 15699                           
 15700                           ; BSR set to: 0
 15701                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 15702  004EAA  8083               	bsf	3971,0,c	;volatile
 15703                           
 15704                           ; BSR set to: 0
 15705                           ;display_lcd.c: 236: delay();
 15706  004EAC  EC26  F02B         	call	_delay	;wreg free
 15707                           
 15708                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 15709  004EB0  9083               	bcf	3971,0,c	;volatile
 15710                           
 15711                           ;display_lcd.c: 238: delay();
 15712  004EB2  EC26  F02B         	call	_delay	;wreg free
 15713                           
 15714                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 15715  004EB6  0100               	movlb	0	; () banked
 15716  004EB8  A162               	btfss	endereco_cursor_lcd@endereco& (0+255),0,b
 15717  004EBA  D002               	goto	l722
 15718                           
 15719                           ; BSR set to: 0
 15720  004EBC  8883               	bsf	3971,4,c	;volatile
 15721  004EBE  D001               	goto	l723
 15722  004EC0                     l722:
 15723                           
 15724                           ; BSR set to: 0
 15725                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 15726  004EC0  9883               	bcf	3971,4,c	;volatile
 15727  004EC2                     l723:
 15728                           
 15729                           ; BSR set to: 0
 15730                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 15731  004EC2  A362               	btfss	endereco_cursor_lcd@endereco& (0+255),1,b
 15732  004EC4  D002               	goto	l724
 15733                           
 15734                           ; BSR set to: 0
 15735  004EC6  8A83               	bsf	3971,5,c	;volatile
 15736  004EC8  D001               	goto	l725
 15737  004ECA                     l724:
 15738                           
 15739                           ; BSR set to: 0
 15740                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 15741  004ECA  9A83               	bcf	3971,5,c	;volatile
 15742  004ECC                     l725:
 15743                           
 15744                           ; BSR set to: 0
 15745                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 15746  004ECC  A562               	btfss	endereco_cursor_lcd@endereco& (0+255),2,b
 15747  004ECE  D002               	goto	l726
 15748                           
 15749                           ; BSR set to: 0
 15750  004ED0  8C83               	bsf	3971,6,c	;volatile
 15751  004ED2  D001               	goto	l727
 15752  004ED4                     l726:
 15753                           
 15754                           ; BSR set to: 0
 15755                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 15756  004ED4  9C83               	bcf	3971,6,c	;volatile
 15757  004ED6                     l727:
 15758                           
 15759                           ; BSR set to: 0
 15760                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 15761  004ED6  A762               	btfss	endereco_cursor_lcd@endereco& (0+255),3,b
 15762  004ED8  D002               	goto	l728
 15763                           
 15764                           ; BSR set to: 0
 15765  004EDA  8E83               	bsf	3971,7,c	;volatile
 15766  004EDC  D001               	goto	l729
 15767  004EDE                     l728:
 15768                           
 15769                           ; BSR set to: 0
 15770                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 15771  004EDE  9E83               	bcf	3971,7,c	;volatile
 15772  004EE0                     l729:
 15773                           
 15774                           ; BSR set to: 0
 15775                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 15776  004EE0  8083               	bsf	3971,0,c	;volatile
 15777                           
 15778                           ; BSR set to: 0
 15779                           ;display_lcd.c: 252: delay();
 15780  004EE2  EC26  F02B         	call	_delay	;wreg free
 15781                           
 15782                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 15783  004EE6  9083               	bcf	3971,0,c	;volatile
 15784                           
 15785                           ;display_lcd.c: 254: delay();
 15786  004EE8  EC26  F02B         	call	_delay	;wreg free
 15787  004EEC  0012               	return		;funcret
 15788  004EEE                     __end_of_endereco_cursor_lcd:
 15789                           	opt stack 0
 15790                           tosu	equ	0xFFF
 15791                           tosh	equ	0xFFE
 15792                           tosl	equ	0xFFD
 15793                           pclath	equ	0xFFA
 15794                           tblptru	equ	0xFF8
 15795                           tblptrh	equ	0xFF7
 15796                           tblptrl	equ	0xFF6
 15797                           tablat	equ	0xFF5
 15798                           prodh	equ	0xFF4
 15799                           prodl	equ	0xFF3
 15800                           intcon	equ	0xFF2
 15801                           intcon2	equ	0xFF1
 15802                           intcon3	equ	0xFF0
 15803                           indf0	equ	0xFEF
 15804                           postinc0	equ	0xFEE
 15805                           fsr0h	equ	0xFEA
 15806                           fsr0l	equ	0xFE9
 15807                           wreg	equ	0xFE8
 15808                           indf1	equ	0xFE7
 15809                           postinc1	equ	0xFE6
 15810                           postdec1	equ	0xFE5
 15811                           plusw1	equ	0xFE3
 15812                           fsr1h	equ	0xFE2
 15813                           fsr1l	equ	0xFE1
 15814                           indf2	equ	0xFDF
 15815                           postinc2	equ	0xFDE
 15816                           postdec2	equ	0xFDD
 15817                           plusw2	equ	0xFDB
 15818                           fsr2h	equ	0xFDA
 15819                           fsr2l	equ	0xFD9
 15820                           status	equ	0xFD8
 15821                           
 15822 ;; *************** function _escreve_frase_ram_lcd *****************
 15823 ;; Defined at:
 15824 ;;		line 445 in file "bibliotecas/display_lcd.c"
 15825 ;; Parameters:    Size  Location     Type
 15826 ;;  buffer          2    3[BANK0 ] PTR unsigned char 
 15827 ;;		 -> escreve_inteiro_lcd@texto(7), STR_31(11), STR_30(10), STR_29(16), 
 15828 ;;		 -> STR_28(11), STR_20(9), STR_19(10), STR_18(10), 
 15829 ;;		 -> STR_17(14), STR_16(21), STR_15(15), STR_12(8), 
 15830 ;;		 -> STR_11(17), STR_10(8), STR_9(16), STR_8(9), 
 15831 ;;		 -> STR_7(6), STR_6(4), STR_5(9), RAM(2047), 
 15832 ;;		 -> STR_4(4), STR_3(5), STR_2(5), STR_1(14), 
 15833 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 15834 ;; Auto vars:     Size  Location     Type
 15835 ;;		None
 15836 ;; Return value:  Size  Location     Type
 15837 ;;                  1    wreg      void 
 15838 ;; Registers used:
 15839 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15840 ;; Tracked objects:
 15841 ;;		On entry : 0/0
 15842 ;;		On exit  : 0/0
 15843 ;;		Unchanged: 0/0
 15844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15845 ;;      Params:         0       2       0       0       0       0       0       0       0
 15846 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15847 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15848 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15849 ;;Total ram usage:        2 bytes
 15850 ;; Hardware stack levels used:    1
 15851 ;; Hardware stack levels required when called:    5
 15852 ;; This function calls:
 15853 ;;		_escreve_caractere_lcd
 15854 ;; This function is called by:
 15855 ;;		_mensagem_inicial
 15856 ;;		_verifica_fence_externo
 15857 ;;		_troca_de_tela
 15858 ;;		_sdc_reset
 15859 ;;		_sdc_disk_initialize
 15860 ;;		_escreve_inteiro_lcd
 15861 ;;		_sdcard_init
 15862 ;; This function uses a non-reentrant model
 15863 ;;
 15864                           
 15865                           	psect	text52
 15866  005182                     __ptext52:
 15867                           	opt stack 0
 15868  005182                     _escreve_frase_ram_lcd:
 15869                           	opt stack 24
 15870                           
 15871                           ;display_lcd.c: 447: while(*buffer)
 15872                           
 15873                           ;incstack = 0
 15874  005182  D015               	goto	l778
 15875  005184                     
 15876                           ;display_lcd.c: 448: {
 15877                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 15878  005184  C063  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 15879  005188  C064  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 15880  00518C  6AF8               	clrf	tblptru,c
 15881  00518E  0E07               	movlw	(high __ramtop+-1)
 15882  005190  64F7               	cpfsgt	tblptrh,c
 15883  005192  D003               	bra	u12767
 15884  005194  0008               	tblrd		*
 15885  005196  50F5               	movf	tablat,w,c
 15886  005198  D005               	bra	u12760
 15887  00519A                     u12767:
 15888  00519A  CFF6 FFE9          	movff	tblptrl,fsr0l
 15889  00519E  CFF7 FFEA          	movff	tblptrh,fsr0h
 15890  0051A2  50EF               	movf	indf0,w,c
 15891  0051A4                     u12760:
 15892  0051A4  EC03  F027         	call	_escreve_caractere_lcd
 15893                           
 15894                           ;display_lcd.c: 450: buffer++;
 15895  0051A8  0100               	movlb	0	; () banked
 15896  0051AA  4B63               	infsnz	escreve_frase_ram_lcd@buffer& (0+255),f,b
 15897  0051AC  2B64               	incf	(escreve_frase_ram_lcd@buffer+1)& (0+255),f,b
 15898  0051AE                     l778:
 15899                           
 15900                           ; BSR set to: 0
 15901  0051AE  C063  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 15902  0051B2  C064  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 15903  0051B6  6AF8               	clrf	tblptru,c
 15904  0051B8  0E07               	movlw	(high __ramtop+-1)
 15905  0051BA  64F7               	cpfsgt	tblptrh,c
 15906  0051BC  D003               	bra	u12777
 15907  0051BE  0008               	tblrd		*
 15908  0051C0  50F5               	movf	tablat,w,c
 15909  0051C2  D005               	bra	u12770
 15910  0051C4                     u12777:
 15911  0051C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 15912  0051C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 15913  0051CC  50EF               	movf	indf0,w,c
 15914  0051CE                     u12770:
 15915  0051CE  0900               	iorlw	0
 15916  0051D0  B4D8               	btfsc	status,2,c
 15917  0051D2  0012               	return	
 15918  0051D4  D7D7               	goto	l779
 15919  0051D6                     __end_of_escreve_frase_ram_lcd:
 15920                           	opt stack 0
 15921                           tosu	equ	0xFFF
 15922                           tosh	equ	0xFFE
 15923                           tosl	equ	0xFFD
 15924                           pclath	equ	0xFFA
 15925                           tblptru	equ	0xFF8
 15926                           tblptrh	equ	0xFF7
 15927                           tblptrl	equ	0xFF6
 15928                           tablat	equ	0xFF5
 15929                           prodh	equ	0xFF4
 15930                           prodl	equ	0xFF3
 15931                           intcon	equ	0xFF2
 15932                           intcon2	equ	0xFF1
 15933                           intcon3	equ	0xFF0
 15934                           indf0	equ	0xFEF
 15935                           postinc0	equ	0xFEE
 15936                           fsr0h	equ	0xFEA
 15937                           fsr0l	equ	0xFE9
 15938                           wreg	equ	0xFE8
 15939                           indf1	equ	0xFE7
 15940                           postinc1	equ	0xFE6
 15941                           postdec1	equ	0xFE5
 15942                           plusw1	equ	0xFE3
 15943                           fsr1h	equ	0xFE2
 15944                           fsr1l	equ	0xFE1
 15945                           indf2	equ	0xFDF
 15946                           postinc2	equ	0xFDE
 15947                           postdec2	equ	0xFDD
 15948                           plusw2	equ	0xFDB
 15949                           fsr2h	equ	0xFDA
 15950                           fsr2l	equ	0xFD9
 15951                           status	equ	0xFD8
 15952                           
 15953 ;; *************** function _escreve_caractere_lcd *****************
 15954 ;; Defined at:
 15955 ;;		line 323 in file "bibliotecas/display_lcd.c"
 15956 ;; Parameters:    Size  Location     Type
 15957 ;;  data            1    wreg     unsigned char 
 15958 ;; Auto vars:     Size  Location     Type
 15959 ;;  data            1    2[BANK0 ] unsigned char 
 15960 ;; Return value:  Size  Location     Type
 15961 ;;                  1    wreg      void 
 15962 ;; Registers used:
 15963 ;;		wreg, status,2, status,0, cstack
 15964 ;; Tracked objects:
 15965 ;;		On entry : 0/0
 15966 ;;		On exit  : 0/0
 15967 ;;		Unchanged: 0/0
 15968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15969 ;;      Params:         0       0       0       0       0       0       0       0       0
 15970 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15971 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15972 ;;      Totals:         0       1       0       0       0       0       0       0       0
 15973 ;;Total ram usage:        1 bytes
 15974 ;; Hardware stack levels used:    1
 15975 ;; Hardware stack levels required when called:    4
 15976 ;; This function calls:
 15977 ;;		_delay
 15978 ;; This function is called by:
 15979 ;;		_escreve_frase_ram_lcd
 15980 ;;		_escreve_float_lcd
 15981 ;;		_escreve_frase_lcd
 15982 ;;		_cria_caractere_lcd
 15983 ;; This function uses a non-reentrant model
 15984 ;;
 15985                           
 15986                           	psect	text53
 15987  004E06                     __ptext53:
 15988                           	opt stack 0
 15989  004E06                     _escreve_caractere_lcd:
 15990                           	opt stack 24
 15991                           
 15992                           ;incstack = 0
 15993                           ;escreve_caractere_lcd@data stored from wreg
 15994  004E06  0100               	movlb	0	; () banked
 15995  004E08  6F62               	movwf	escreve_caractere_lcd@data& (0+255),b
 15996                           
 15997                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 15998  004E0A  9483               	bcf	3971,2,c	;volatile
 15999                           
 16000                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 16001  004E0C  8283               	bsf	3971,1,c	;volatile
 16002                           
 16003                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 16004  004E0E  9083               	bcf	3971,0,c	;volatile
 16005                           
 16006                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 16007  004E10  0100               	movlb	0	; () banked
 16008  004E12  A962               	btfss	escreve_caractere_lcd@data& (0+255),4,b
 16009  004E14  D002               	goto	l745
 16010                           
 16011                           ; BSR set to: 0
 16012  004E16  8883               	bsf	3971,4,c	;volatile
 16013  004E18  D001               	goto	l746
 16014  004E1A                     l745:
 16015                           
 16016                           ; BSR set to: 0
 16017                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 16018  004E1A  9883               	bcf	3971,4,c	;volatile
 16019  004E1C                     l746:
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 16023                           
 16024                           ; BSR set to: 0
 16025  004E1C  AB62               	btfss	escreve_caractere_lcd@data& (0+255),5,b
 16026  004E1E  D002               	goto	l747
 16027                           
 16028                           ; BSR set to: 0
 16029  004E20  8A83               	bsf	3971,5,c	;volatile
 16030  004E22  D001               	goto	l748
 16031  004E24                     l747:
 16032                           
 16033                           ; BSR set to: 0
 16034                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 16035  004E24  9A83               	bcf	3971,5,c	;volatile
 16036  004E26                     l748:
 16037                           
 16038                           ; BSR set to: 0
 16039                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 16040                           
 16041                           ; BSR set to: 0
 16042  004E26  AD62               	btfss	escreve_caractere_lcd@data& (0+255),6,b
 16043  004E28  D002               	goto	l749
 16044                           
 16045                           ; BSR set to: 0
 16046  004E2A  8C83               	bsf	3971,6,c	;volatile
 16047  004E2C  D001               	goto	l750
 16048  004E2E                     l749:
 16049                           
 16050                           ; BSR set to: 0
 16051                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 16052  004E2E  9C83               	bcf	3971,6,c	;volatile
 16053  004E30                     l750:
 16054                           
 16055                           ; BSR set to: 0
 16056                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 16057                           
 16058                           ; BSR set to: 0
 16059  004E30  AF62               	btfss	escreve_caractere_lcd@data& (0+255),7,b
 16060  004E32  D002               	goto	l751
 16061                           
 16062                           ; BSR set to: 0
 16063  004E34  8E83               	bsf	3971,7,c	;volatile
 16064  004E36  D001               	goto	l752
 16065  004E38                     l751:
 16066                           
 16067                           ; BSR set to: 0
 16068                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 16069  004E38  9E83               	bcf	3971,7,c	;volatile
 16070  004E3A                     l752:
 16071                           
 16072                           ; BSR set to: 0
 16073                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 16074  004E3A  8083               	bsf	3971,0,c	;volatile
 16075                           
 16076                           ; BSR set to: 0
 16077                           ;display_lcd.c: 342: delay();
 16078  004E3C  EC26  F02B         	call	_delay	;wreg free
 16079                           
 16080                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 16081  004E40  9083               	bcf	3971,0,c	;volatile
 16082                           
 16083                           ;display_lcd.c: 344: delay();
 16084  004E42  EC26  F02B         	call	_delay	;wreg free
 16085                           
 16086                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 16087  004E46  0100               	movlb	0	; () banked
 16088  004E48  A162               	btfss	escreve_caractere_lcd@data& (0+255),0,b
 16089  004E4A  D002               	goto	l753
 16090                           
 16091                           ; BSR set to: 0
 16092  004E4C  8883               	bsf	3971,4,c	;volatile
 16093  004E4E  D001               	goto	l754
 16094  004E50                     l753:
 16095                           
 16096                           ; BSR set to: 0
 16097                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 16098  004E50  9883               	bcf	3971,4,c	;volatile
 16099  004E52                     l754:
 16100                           
 16101                           ; BSR set to: 0
 16102                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 16103  004E52  A362               	btfss	escreve_caractere_lcd@data& (0+255),1,b
 16104  004E54  D002               	goto	l755
 16105                           
 16106                           ; BSR set to: 0
 16107  004E56  8A83               	bsf	3971,5,c	;volatile
 16108  004E58  D001               	goto	l756
 16109  004E5A                     l755:
 16110                           
 16111                           ; BSR set to: 0
 16112                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 16113  004E5A  9A83               	bcf	3971,5,c	;volatile
 16114  004E5C                     l756:
 16115                           
 16116                           ; BSR set to: 0
 16117                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 16118  004E5C  A562               	btfss	escreve_caractere_lcd@data& (0+255),2,b
 16119  004E5E  D002               	goto	l757
 16120                           
 16121                           ; BSR set to: 0
 16122  004E60  8C83               	bsf	3971,6,c	;volatile
 16123  004E62  D001               	goto	l758
 16124  004E64                     l757:
 16125                           
 16126                           ; BSR set to: 0
 16127                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 16128  004E64  9C83               	bcf	3971,6,c	;volatile
 16129  004E66                     l758:
 16130                           
 16131                           ; BSR set to: 0
 16132                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 16133  004E66  A762               	btfss	escreve_caractere_lcd@data& (0+255),3,b
 16134  004E68  D002               	goto	l759
 16135                           
 16136                           ; BSR set to: 0
 16137  004E6A  8E83               	bsf	3971,7,c	;volatile
 16138  004E6C  D001               	goto	l760
 16139  004E6E                     l759:
 16140                           
 16141                           ; BSR set to: 0
 16142                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 16143  004E6E  9E83               	bcf	3971,7,c	;volatile
 16144  004E70                     l760:
 16145                           
 16146                           ; BSR set to: 0
 16147                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 16148  004E70  8083               	bsf	3971,0,c	;volatile
 16149                           
 16150                           ; BSR set to: 0
 16151                           ;display_lcd.c: 359: delay();
 16152  004E72  EC26  F02B         	call	_delay	;wreg free
 16153                           
 16154                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 16155  004E76  9083               	bcf	3971,0,c	;volatile
 16156                           
 16157                           ;display_lcd.c: 361: delay();
 16158  004E78  EC26  F02B         	call	_delay	;wreg free
 16159  004E7C  0012               	return		;funcret
 16160  004E7E                     __end_of_escreve_caractere_lcd:
 16161                           	opt stack 0
 16162                           tosu	equ	0xFFF
 16163                           tosh	equ	0xFFE
 16164                           tosl	equ	0xFFD
 16165                           pclath	equ	0xFFA
 16166                           tblptru	equ	0xFF8
 16167                           tblptrh	equ	0xFF7
 16168                           tblptrl	equ	0xFF6
 16169                           tablat	equ	0xFF5
 16170                           prodh	equ	0xFF4
 16171                           prodl	equ	0xFF3
 16172                           intcon	equ	0xFF2
 16173                           intcon2	equ	0xFF1
 16174                           intcon3	equ	0xFF0
 16175                           indf0	equ	0xFEF
 16176                           postinc0	equ	0xFEE
 16177                           fsr0h	equ	0xFEA
 16178                           fsr0l	equ	0xFE9
 16179                           wreg	equ	0xFE8
 16180                           indf1	equ	0xFE7
 16181                           postinc1	equ	0xFE6
 16182                           postdec1	equ	0xFE5
 16183                           plusw1	equ	0xFE3
 16184                           fsr1h	equ	0xFE2
 16185                           fsr1l	equ	0xFE1
 16186                           indf2	equ	0xFDF
 16187                           postinc2	equ	0xFDE
 16188                           postdec2	equ	0xFDD
 16189                           plusw2	equ	0xFDB
 16190                           fsr2h	equ	0xFDA
 16191                           fsr2l	equ	0xFD9
 16192                           status	equ	0xFD8
 16193                           
 16194 ;; *************** function _delay *****************
 16195 ;; Defined at:
 16196 ;;		line 45 in file "bibliotecas/display_lcd.c"
 16197 ;; Parameters:    Size  Location     Type
 16198 ;;		None
 16199 ;; Auto vars:     Size  Location     Type
 16200 ;;  contador_int    1    1[BANK0 ] unsigned char 
 16201 ;;  contador_ext    1    0[BANK0 ] unsigned char 
 16202 ;; Return value:  Size  Location     Type
 16203 ;;                  1    wreg      void 
 16204 ;; Registers used:
 16205 ;;		wreg, status,2, status,0
 16206 ;; Tracked objects:
 16207 ;;		On entry : 0/0
 16208 ;;		On exit  : 0/0
 16209 ;;		Unchanged: 0/0
 16210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16211 ;;      Params:         0       0       0       0       0       0       0       0       0
 16212 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16213 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16214 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16215 ;;Total ram usage:        2 bytes
 16216 ;; Hardware stack levels used:    1
 16217 ;; Hardware stack levels required when called:    3
 16218 ;; This function calls:
 16219 ;;		Nothing
 16220 ;; This function is called by:
 16221 ;;		_init_lcd
 16222 ;;		_escreve_cmd_lcd
 16223 ;;		_endereco_cursor_lcd
 16224 ;;		_escreve_caractere_lcd
 16225 ;; This function uses a non-reentrant model
 16226 ;;
 16227                           
 16228                           	psect	text54
 16229  00564C                     __ptext54:
 16230                           	opt stack 0
 16231  00564C                     _delay:
 16232                           	opt stack 24
 16233                           
 16234                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 16235                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 16236                           
 16237                           ;incstack = 0
 16238  00564C  0E00               	movlw	0
 16239  00564E  0100               	movlb	0	; () banked
 16240  005650  6F60               	movwf	delay@contador_ext& (0+255),b
 16241  005652                     l9771:
 16242                           
 16243                           ; BSR set to: 0
 16244  005652  0E63               	movlw	99
 16245  005654  6560               	cpfsgt	delay@contador_ext& (0+255),b
 16246  005656  D001               	goto	l684
 16247  005658  0012               	return	
 16248  00565A                     l684:
 16249                           
 16250                           ; BSR set to: 0
 16251                           ;display_lcd.c: 50: {
 16252                           ;display_lcd.c: 51: __nop();
 16253  00565A  F000               	nop	
 16254                           
 16255                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 16256  00565C  0E00               	movlw	0
 16257  00565E  0100               	movlb	0	; () banked
 16258  005660  6F61               	movwf	delay@contador_int& (0+255),b
 16259  005662                     l9777:
 16260                           
 16261                           ; BSR set to: 0
 16262  005662  0E31               	movlw	49
 16263  005664  6561               	cpfsgt	delay@contador_int& (0+255),b
 16264  005666  D001               	goto	l686
 16265  005668  D004               	goto	u12490
 16266  00566A                     l686:
 16267                           
 16268                           ; BSR set to: 0
 16269                           ;display_lcd.c: 53: {
 16270                           ;display_lcd.c: 54: __nop();
 16271  00566A  F000               	nop	
 16272  00566C  0100               	movlb	0	; () banked
 16273  00566E  2B61               	incf	delay@contador_int& (0+255),f,b
 16274  005670  D7F8               	goto	l9777
 16275  005672                     u12490:
 16276                           
 16277                           ; BSR set to: 0
 16278                           
 16279                           ; BSR set to: 0
 16280  005672  2B60               	incf	delay@contador_ext& (0+255),f,b
 16281  005674  D7EE               	goto	l9771
 16282  005676                     __end_of_delay:
 16283                           	opt stack 0
 16284                           tosu	equ	0xFFF
 16285                           tosh	equ	0xFFE
 16286                           tosl	equ	0xFFD
 16287                           pclath	equ	0xFFA
 16288                           tblptru	equ	0xFF8
 16289                           tblptrh	equ	0xFF7
 16290                           tblptrl	equ	0xFF6
 16291                           tablat	equ	0xFF5
 16292                           prodh	equ	0xFF4
 16293                           prodl	equ	0xFF3
 16294                           intcon	equ	0xFF2
 16295                           intcon2	equ	0xFF1
 16296                           intcon3	equ	0xFF0
 16297                           indf0	equ	0xFEF
 16298                           postinc0	equ	0xFEE
 16299                           fsr0h	equ	0xFEA
 16300                           fsr0l	equ	0xFE9
 16301                           wreg	equ	0xFE8
 16302                           indf1	equ	0xFE7
 16303                           postinc1	equ	0xFE6
 16304                           postdec1	equ	0xFE5
 16305                           plusw1	equ	0xFE3
 16306                           fsr1h	equ	0xFE2
 16307                           fsr1l	equ	0xFE1
 16308                           indf2	equ	0xFDF
 16309                           postinc2	equ	0xFDE
 16310                           postdec2	equ	0xFDD
 16311                           plusw2	equ	0xFDB
 16312                           fsr2h	equ	0xFDA
 16313                           fsr2l	equ	0xFD9
 16314                           status	equ	0xFD8
 16315                           
 16316 ;; *************** function _check_fs *****************
 16317 ;; Defined at:
 16318 ;;		line 623 in file "bibliotecas/tff.c"
 16319 ;; Parameters:    Size  Location     Type
 16320 ;;  sect            4   43[BANK0 ] unsigned long 
 16321 ;; Auto vars:     Size  Location     Type
 16322 ;;  fs              2   49[BANK0 ] PTR struct _FATFS
 16323 ;;		 -> NULL(0), fs(544), 
 16324 ;; Return value:  Size  Location     Type
 16325 ;;                  1    wreg      unsigned char 
 16326 ;; Registers used:
 16327 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16328 ;; Tracked objects:
 16329 ;;		On entry : 0/0
 16330 ;;		On exit  : 0/0
 16331 ;;		Unchanged: 0/0
 16332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16333 ;;      Params:         0       4       0       0       0       0       0       0       0
 16334 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16335 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16336 ;;      Totals:         0       8       0       0       0       0       0       0       0
 16337 ;;Total ram usage:        8 bytes
 16338 ;; Hardware stack levels used:    1
 16339 ;; Hardware stack levels required when called:    8
 16340 ;; This function calls:
 16341 ;;		_disk_read
 16342 ;;		_memcmp
 16343 ;; This function is called by:
 16344 ;;		_auto_mount
 16345 ;; This function uses a non-reentrant model
 16346 ;;
 16347                           
 16348                           	psect	text55
 16349  004AE6                     __ptext55:
 16350                           	opt stack 0
 16351  004AE6                     _check_fs:
 16352                           	opt stack 17
 16353                           
 16354                           ;tff.c: 627: FATFS *fs = FatFs;
 16355                           
 16356                           ; BSR set to: 0
 16357                           ;incstack = 0
 16358  004AE6  C0FB  F091         	movff	_FatFs,check_fs@fs
 16359  004AEA  C0FC  F092         	movff	_FatFs+1,check_fs@fs+1
 16360                           
 16361                           ;tff.c: 629: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 16362  004AEE  0E20               	movlw	32
 16363  004AF0  0100               	movlb	0	; () banked
 16364  004AF2  2591               	addwf	check_fs@fs& (0+255),w,b
 16365  004AF4  6F7F               	movwf	disk_read@buff& (0+255),b
 16366  004AF6  0E00               	movlw	0
 16367  004AF8  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 16368  004AFA  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 16369  004AFC  C08B  F081         	movff	check_fs@sect,disk_read@sector
 16370  004B00  C08C  F082         	movff	check_fs@sect+1,disk_read@sector+1
 16371  004B04  C08D  F083         	movff	check_fs@sect+2,disk_read@sector+2
 16372  004B08  C08E  F084         	movff	check_fs@sect+3,disk_read@sector+3
 16373  004B0C  0E01               	movlw	1
 16374  004B0E  6F85               	movwf	disk_read@count& (0+255),b
 16375  004B10  0E00               	movlw	0
 16376  004B12  ECE5  F024         	call	_disk_read
 16377  004B16  0900               	iorlw	0
 16378  004B18  B4D8               	btfsc	status,2,c
 16379  004B1A  D002               	goto	l1230
 16380                           
 16381                           ;tff.c: 630: return 2;
 16382  004B1C  0E02               	movlw	2
 16383  004B1E  0012               	return	
 16384  004B20                     l1230:
 16385                           
 16386                           ;tff.c: 631: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 16387  004B20  0100               	movlb	0	; () banked
 16388  004B22  EE22 F01E          	lfsr	2,542
 16389  004B26  5191               	movf	check_fs@fs& (0+255),w,b
 16390  004B28  26D9               	addwf	fsr2l,f,c
 16391  004B2A  5192               	movf	(check_fs@fs+1)& (0+255),w,b
 16392  004B2C  22DA               	addwfc	fsr2h,f,c
 16393  004B2E  0E55               	movlw	85
 16394  004B30  18DE               	xorwf	postinc2,w,c
 16395  004B32  E104               	bnz	u14140
 16396  004B34  0EAA               	movlw	170
 16397  004B36  18DE               	xorwf	postinc2,w,c
 16398  004B38  B4D8               	btfsc	status,2,c
 16399  004B3A  D002               	goto	l1232
 16400  004B3C                     u14140:
 16401                           
 16402                           ; BSR set to: 0
 16403                           ;tff.c: 632: return 2;
 16404  004B3C  0E02               	movlw	2
 16405                           
 16406                           ; BSR set to: 0
 16407  004B3E  0012               	return	
 16408  004B40                     l1232:
 16409                           
 16410                           ; BSR set to: 0
 16411                           ;tff.c: 634: if (!memcmp(&fs->win[54], "FAT", 3))
 16412                           
 16413                           ; BSR set to: 0
 16414  004B40  0E56               	movlw	86
 16415  004B42  2591               	addwf	check_fs@fs& (0+255),w,b
 16416  004B44  6F60               	movwf	memcmp@s1& (0+255),b
 16417  004B46  0E00               	movlw	0
 16418  004B48  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 16419  004B4A  6F61               	movwf	(memcmp@s1+1)& (0+255),b
 16420  004B4C  0E74               	movlw	low STR_33
 16421  004B4E  6F62               	movwf	memcmp@s2& (0+255),b
 16422  004B50  0E62               	movlw	high STR_33
 16423  004B52  6F63               	movwf	(memcmp@s2+1)& (0+255),b
 16424  004B54  0E00               	movlw	0
 16425  004B56  6F65               	movwf	(memcmp@n+1)& (0+255),b
 16426  004B58  0E03               	movlw	3
 16427  004B5A  6F64               	movwf	memcmp@n& (0+255),b
 16428  004B5C  ECB2  F023         	call	_memcmp	;wreg free
 16429  004B60  0100               	movlb	0	; () banked
 16430  004B62  5160               	movf	?_memcmp& (0+255),w,b
 16431  004B64  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 16432  004B66  A4D8               	btfss	status,2,c
 16433  004B68  D002               	goto	l1233
 16434                           
 16435                           ; BSR set to: 0
 16436                           ;tff.c: 635: return 0;
 16437  004B6A  0E00               	movlw	0
 16438                           
 16439                           ; BSR set to: 0
 16440  004B6C  0012               	return	
 16441  004B6E                     l1233:
 16442                           
 16443                           ; BSR set to: 0
 16444                           ;tff.c: 640: return 1;
 16445                           
 16446                           ; BSR set to: 0
 16447  004B6E  0E01               	movlw	1
 16448  004B70  0012               	return	
 16449  004B72                     __end_of_check_fs:
 16450                           	opt stack 0
 16451                           tosu	equ	0xFFF
 16452                           tosh	equ	0xFFE
 16453                           tosl	equ	0xFFD
 16454                           pclath	equ	0xFFA
 16455                           tblptru	equ	0xFF8
 16456                           tblptrh	equ	0xFF7
 16457                           tblptrl	equ	0xFF6
 16458                           tablat	equ	0xFF5
 16459                           prodh	equ	0xFF4
 16460                           prodl	equ	0xFF3
 16461                           intcon	equ	0xFF2
 16462                           intcon2	equ	0xFF1
 16463                           intcon3	equ	0xFF0
 16464                           indf0	equ	0xFEF
 16465                           postinc0	equ	0xFEE
 16466                           fsr0h	equ	0xFEA
 16467                           fsr0l	equ	0xFE9
 16468                           wreg	equ	0xFE8
 16469                           indf1	equ	0xFE7
 16470                           postinc1	equ	0xFE6
 16471                           postdec1	equ	0xFE5
 16472                           plusw1	equ	0xFE3
 16473                           fsr1h	equ	0xFE2
 16474                           fsr1l	equ	0xFE1
 16475                           indf2	equ	0xFDF
 16476                           postinc2	equ	0xFDE
 16477                           postdec2	equ	0xFDD
 16478                           plusw2	equ	0xFDB
 16479                           fsr2h	equ	0xFDA
 16480                           fsr2l	equ	0xFD9
 16481                           status	equ	0xFD8
 16482                           
 16483 ;; *************** function _memcmp *****************
 16484 ;; Defined at:
 16485 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
 16486 ;; Parameters:    Size  Location     Type
 16487 ;;  s1              2    0[BANK0 ] PTR const void 
 16488 ;;		 -> fs.win(512), NULL(0), fs(544), 
 16489 ;;  s2              2    2[BANK0 ] PTR const void 
 16490 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_33(4), 
 16491 ;;  n               2    4[BANK0 ] unsigned int 
 16492 ;; Auto vars:     Size  Location     Type
 16493 ;;		None
 16494 ;; Return value:  Size  Location     Type
 16495 ;;                  2    0[BANK0 ] int 
 16496 ;; Registers used:
 16497 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16498 ;; Tracked objects:
 16499 ;;		On entry : 0/0
 16500 ;;		On exit  : 0/0
 16501 ;;		Unchanged: 0/0
 16502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16503 ;;      Params:         0       6       0       0       0       0       0       0       0
 16504 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16505 ;;      Temps:          0       3       0       0       0       0       0       0       0
 16506 ;;      Totals:         0       9       0       0       0       0       0       0       0
 16507 ;;Total ram usage:        9 bytes
 16508 ;; Hardware stack levels used:    1
 16509 ;; Hardware stack levels required when called:    3
 16510 ;; This function calls:
 16511 ;;		Nothing
 16512 ;; This function is called by:
 16513 ;;		_trace_path
 16514 ;;		_check_fs
 16515 ;; This function uses a non-reentrant model
 16516 ;;
 16517                           
 16518                           	psect	text56
 16519  004764                     __ptext56:
 16520                           	opt stack 0
 16521  004764                     _memcmp:
 16522                           	opt stack 22
 16523                           
 16524                           ;incstack = 0
 16525  004764  D043               	goto	l1976
 16526  004766                     l10435:
 16527  004766  C060  FFD9         	movff	memcmp@s1,fsr2l
 16528  00476A  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 16529  00476E  50DF               	movf	indf2,w,c
 16530  004770  0100               	movlb	0	; () banked
 16531  004772  6F66               	movwf	??_memcmp& (0+255),b
 16532  004774  C062  FFF6         	movff	memcmp@s2,tblptrl
 16533  004778  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 16534  00477C  6AF8               	clrf	tblptru,c
 16535  00477E  0E07               	movlw	(high __ramtop+-1)
 16536  004780  64F7               	cpfsgt	tblptrh,c
 16537  004782  D003               	bra	u13467
 16538  004784  0008               	tblrd		*
 16539  004786  50F5               	movf	tablat,w,c
 16540  004788  D005               	bra	u13460
 16541  00478A                     u13467:
 16542  00478A  CFF6 FFE9          	movff	tblptrl,fsr0l
 16543  00478E  CFF7 FFEA          	movff	tblptrh,fsr0h
 16544  004792  50EF               	movf	indf0,w,c
 16545  004794                     u13460:
 16546  004794  0100               	movlb	0	; () banked
 16547  004796  1966               	xorwf	??_memcmp& (0+255),w,b
 16548  004798  B4D8               	btfsc	status,2,c
 16549  00479A  D024               	goto	l1978
 16550                           
 16551                           ; BSR set to: 0
 16552  00479C  C062  FFF6         	movff	memcmp@s2,tblptrl
 16553  0047A0  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 16554  0047A4  6AF8               	clrf	tblptru,c
 16555  0047A6  0E07               	movlw	(high __ramtop+-1)
 16556  0047A8  64F7               	cpfsgt	tblptrh,c
 16557  0047AA  D003               	bra	u13487
 16558  0047AC  0008               	tblrd		*
 16559  0047AE  50F5               	movf	tablat,w,c
 16560  0047B0  D005               	bra	u13480
 16561  0047B2                     u13487:
 16562  0047B2  CFF6 FFE9          	movff	tblptrl,fsr0l
 16563  0047B6  CFF7 FFEA          	movff	tblptrh,fsr0h
 16564  0047BA  50EF               	movf	indf0,w,c
 16565  0047BC                     u13480:
 16566  0047BC  0100               	movlb	0	; () banked
 16567  0047BE  6F66               	movwf	??_memcmp& (0+255),b
 16568  0047C0  6B67               	clrf	(??_memcmp+1)& (0+255),b
 16569  0047C2  1F66               	comf	??_memcmp& (0+255),f,b
 16570  0047C4  1F67               	comf	(??_memcmp+1)& (0+255),f,b
 16571  0047C6  4B66               	infsnz	??_memcmp& (0+255),f,b
 16572  0047C8  2B67               	incf	(??_memcmp+1)& (0+255),f,b
 16573  0047CA  C060  FFD9         	movff	memcmp@s1,fsr2l
 16574  0047CE  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 16575  0047D2  50DF               	movf	indf2,w,c
 16576  0047D4  6F68               	movwf	(??_memcmp+2)& (0+255),b
 16577  0047D6  5168               	movf	(??_memcmp+2)& (0+255),w,b
 16578  0047D8  2566               	addwf	??_memcmp& (0+255),w,b
 16579  0047DA  6F60               	movwf	?_memcmp& (0+255),b
 16580  0047DC  0E00               	movlw	0
 16581  0047DE  2167               	addwfc	(??_memcmp+1)& (0+255),w,b
 16582  0047E0  6F61               	movwf	(?_memcmp+1)& (0+255),b
 16583                           
 16584                           ; BSR set to: 0
 16585  0047E2  0012               	return	
 16586  0047E4                     l1978:
 16587                           
 16588                           ; BSR set to: 0
 16589                           
 16590                           ; BSR set to: 0
 16591  0047E4  4B60               	infsnz	memcmp@s1& (0+255),f,b
 16592  0047E6  2B61               	incf	(memcmp@s1+1)& (0+255),f,b
 16593  0047E8  4B62               	infsnz	memcmp@s2& (0+255),f,b
 16594  0047EA  2B63               	incf	(memcmp@s2+1)& (0+255),f,b
 16595  0047EC                     l1976:
 16596                           
 16597                           ; BSR set to: 0
 16598  0047EC  0100               	movlb	0	; () banked
 16599  0047EE  0764               	decf	memcmp@n& (0+255),f,b
 16600  0047F0  A0D8               	btfss	status,0,c
 16601  0047F2  0765               	decf	(memcmp@n+1)& (0+255),f,b
 16602  0047F4  2964               	incf	memcmp@n& (0+255),w,b
 16603  0047F6  E1B7               	bnz	l10435
 16604  0047F8  2965               	incf	(memcmp@n+1)& (0+255),w,b
 16605  0047FA  A4D8               	btfss	status,2,c
 16606  0047FC  D7B4               	goto	l1977
 16607                           
 16608                           ; BSR set to: 0
 16609                           
 16610                           ; BSR set to: 0
 16611  0047FE  0E00               	movlw	0
 16612  004800  6F61               	movwf	(?_memcmp+1)& (0+255),b
 16613  004802  0E00               	movlw	0
 16614  004804  6F60               	movwf	?_memcmp& (0+255),b
 16615  004806  0012               	return	
 16616  004808                     __end_of_memcmp:
 16617                           	opt stack 0
 16618                           tosu	equ	0xFFF
 16619                           tosh	equ	0xFFE
 16620                           tosl	equ	0xFFD
 16621                           pclath	equ	0xFFA
 16622                           tblptru	equ	0xFF8
 16623                           tblptrh	equ	0xFF7
 16624                           tblptrl	equ	0xFF6
 16625                           tablat	equ	0xFF5
 16626                           prodh	equ	0xFF4
 16627                           prodl	equ	0xFF3
 16628                           intcon	equ	0xFF2
 16629                           intcon2	equ	0xFF1
 16630                           intcon3	equ	0xFF0
 16631                           indf0	equ	0xFEF
 16632                           postinc0	equ	0xFEE
 16633                           fsr0h	equ	0xFEA
 16634                           fsr0l	equ	0xFE9
 16635                           wreg	equ	0xFE8
 16636                           indf1	equ	0xFE7
 16637                           postinc1	equ	0xFE6
 16638                           postdec1	equ	0xFE5
 16639                           plusw1	equ	0xFE3
 16640                           fsr1h	equ	0xFE2
 16641                           fsr1l	equ	0xFE1
 16642                           indf2	equ	0xFDF
 16643                           postinc2	equ	0xFDE
 16644                           postdec2	equ	0xFDD
 16645                           plusw2	equ	0xFDB
 16646                           fsr2h	equ	0xFDA
 16647                           fsr2l	equ	0xFD9
 16648                           status	equ	0xFD8
 16649                           
 16650 ;; *************** function ___lmul *****************
 16651 ;; Defined at:
 16652 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 16653 ;; Parameters:    Size  Location     Type
 16654 ;;  multiplier      4    0[BANK0 ] unsigned long 
 16655 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 16656 ;; Auto vars:     Size  Location     Type
 16657 ;;  product         4    8[BANK0 ] unsigned long 
 16658 ;; Return value:  Size  Location     Type
 16659 ;;                  4    0[BANK0 ] unsigned long 
 16660 ;; Registers used:
 16661 ;;		wreg, status,2, status,0
 16662 ;; Tracked objects:
 16663 ;;		On entry : 0/0
 16664 ;;		On exit  : 0/0
 16665 ;;		Unchanged: 0/0
 16666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16667 ;;      Params:         0       8       0       0       0       0       0       0       0
 16668 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16669 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16670 ;;      Totals:         0      12       0       0       0       0       0       0       0
 16671 ;;Total ram usage:       12 bytes
 16672 ;; Hardware stack levels used:    1
 16673 ;; Hardware stack levels required when called:    3
 16674 ;; This function calls:
 16675 ;;		Nothing
 16676 ;; This function is called by:
 16677 ;;		_clust2sect
 16678 ;;		_auto_mount
 16679 ;; This function uses a non-reentrant model
 16680 ;;
 16681                           
 16682                           	psect	text57
 16683  005080                     __ptext57:
 16684                           	opt stack 0
 16685  005080                     ___lmul:
 16686                           	opt stack 19
 16687                           
 16688                           ; BSR set to: 0
 16689                           ;incstack = 0
 16690  005080  0E00               	movlw	0
 16691  005082  0100               	movlb	0	; () banked
 16692  005084  6F68               	movwf	___lmul@product& (0+255),b
 16693  005086  0E00               	movlw	0
 16694  005088  6F69               	movwf	(___lmul@product+1)& (0+255),b
 16695  00508A  0E00               	movlw	0
 16696  00508C  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 16697  00508E  0E00               	movlw	0
 16698  005090  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 16699  005092                     
 16700                           ; BSR set to: 0
 16701                           
 16702                           ; BSR set to: 0
 16703  005092  A160               	btfss	___lmul@multiplier& (0+255),0,b
 16704  005094  D008               	goto	l1523
 16705                           
 16706                           ; BSR set to: 0
 16707  005096  5164               	movf	___lmul@multiplicand& (0+255),w,b
 16708  005098  2768               	addwf	___lmul@product& (0+255),f,b
 16709  00509A  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 16710  00509C  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 16711  00509E  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 16712  0050A0  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 16713  0050A2  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 16714  0050A4  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 16715  0050A6                     l1523:
 16716                           
 16717                           ; BSR set to: 0
 16718                           
 16719                           ; BSR set to: 0
 16720  0050A6  90D8               	bcf	status,0,c
 16721  0050A8  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 16722  0050AA  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 16723  0050AC  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 16724  0050AE  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 16725                           
 16726                           ; BSR set to: 0
 16727  0050B0  90D8               	bcf	status,0,c
 16728  0050B2  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 16729  0050B4  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 16730  0050B6  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 16731  0050B8  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 16732  0050BA  5160               	movf	___lmul@multiplier& (0+255),w,b
 16733  0050BC  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 16734  0050BE  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 16735  0050C0  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 16736  0050C2  A4D8               	btfss	status,2,c
 16737  0050C4  D7E6               	goto	l1522
 16738                           
 16739                           ; BSR set to: 0
 16740  0050C6  C068  F060         	movff	___lmul@product,?___lmul
 16741  0050CA  C069  F061         	movff	___lmul@product+1,?___lmul+1
 16742  0050CE  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 16743  0050D2  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 16744                           
 16745                           ; BSR set to: 0
 16746  0050D6  0012               	return		;funcret
 16747  0050D8                     __end_of___lmul:
 16748                           	opt stack 0
 16749                           tosu	equ	0xFFF
 16750                           tosh	equ	0xFFE
 16751                           tosl	equ	0xFFD
 16752                           pclath	equ	0xFFA
 16753                           tblptru	equ	0xFF8
 16754                           tblptrh	equ	0xFF7
 16755                           tblptrl	equ	0xFF6
 16756                           tablat	equ	0xFF5
 16757                           prodh	equ	0xFF4
 16758                           prodl	equ	0xFF3
 16759                           intcon	equ	0xFF2
 16760                           intcon2	equ	0xFF1
 16761                           intcon3	equ	0xFF0
 16762                           indf0	equ	0xFEF
 16763                           postinc0	equ	0xFEE
 16764                           fsr0h	equ	0xFEA
 16765                           fsr0l	equ	0xFE9
 16766                           wreg	equ	0xFE8
 16767                           indf1	equ	0xFE7
 16768                           postinc1	equ	0xFE6
 16769                           postdec1	equ	0xFE5
 16770                           plusw1	equ	0xFE3
 16771                           fsr1h	equ	0xFE2
 16772                           fsr1l	equ	0xFE1
 16773                           indf2	equ	0xFDF
 16774                           postinc2	equ	0xFDE
 16775                           postdec2	equ	0xFDD
 16776                           plusw2	equ	0xFDB
 16777                           fsr2h	equ	0xFDA
 16778                           fsr2l	equ	0xFD9
 16779                           status	equ	0xFD8
 16780                           
 16781 ;; *************** function _f_mount *****************
 16782 ;; Defined at:
 16783 ;;		line 793 in file "bibliotecas/tff.c"
 16784 ;; Parameters:    Size  Location     Type
 16785 ;;  drv             1    wreg     unsigned char 
 16786 ;;  fs              2    0[BANK0 ] PTR struct _FATFS
 16787 ;;		 -> fs(544), 
 16788 ;; Auto vars:     Size  Location     Type
 16789 ;;  drv             1    2[BANK0 ] unsigned char 
 16790 ;; Return value:  Size  Location     Type
 16791 ;;                  1    wreg      enum E3978
 16792 ;; Registers used:
 16793 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16794 ;; Tracked objects:
 16795 ;;		On entry : 0/0
 16796 ;;		On exit  : 0/0
 16797 ;;		Unchanged: 0/0
 16798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16799 ;;      Params:         0       2       0       0       0       0       0       0       0
 16800 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16801 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16802 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16803 ;;Total ram usage:        3 bytes
 16804 ;; Hardware stack levels used:    1
 16805 ;; Hardware stack levels required when called:    3
 16806 ;; This function calls:
 16807 ;;		Nothing
 16808 ;; This function is called by:
 16809 ;;		_escrita_sdcard
 16810 ;;		_sdcard_init
 16811 ;;		_leitura_sdcard
 16812 ;; This function uses a non-reentrant model
 16813 ;;
 16814                           
 16815                           	psect	text58
 16816  005224                     __ptext58:
 16817                           	opt stack 0
 16818  005224                     _f_mount:
 16819                           	opt stack 24
 16820                           
 16821                           ; BSR set to: 0
 16822                           ;incstack = 0
 16823                           ;f_mount@drv stored from wreg
 16824  005224  0100               	movlb	0	; () banked
 16825  005226  6F62               	movwf	f_mount@drv& (0+255),b
 16826                           
 16827                           ;tff.c: 798: if (drv) return FR_INVALID_DRIVE;
 16828  005228  0100               	movlb	0	; () banked
 16829  00522A  5162               	movf	f_mount@drv& (0+255),w,b
 16830  00522C  B4D8               	btfsc	status,2,c
 16831  00522E  D002               	goto	l1265
 16832                           
 16833                           ; BSR set to: 0
 16834  005230  0E05               	movlw	5
 16835                           
 16836                           ; BSR set to: 0
 16837  005232  0012               	return	
 16838  005234                     l1265:
 16839                           
 16840                           ; BSR set to: 0
 16841                           ;tff.c: 800: if (FatFs) FatFs->fs_type = 0;
 16842                           
 16843                           ; BSR set to: 0
 16844  005234  51FB               	movf	_FatFs& (0+255),w,b
 16845  005236  11FC               	iorwf	(_FatFs+1)& (0+255),w,b
 16846  005238  B4D8               	btfsc	status,2,c
 16847  00523A  D008               	goto	l1267
 16848                           
 16849                           ; BSR set to: 0
 16850  00523C  EE20 F01C          	lfsr	2,28
 16851  005240  51FB               	movf	_FatFs& (0+255),w,b
 16852  005242  26D9               	addwf	fsr2l,f,c
 16853  005244  51FC               	movf	(_FatFs+1)& (0+255),w,b
 16854  005246  22DA               	addwfc	fsr2h,f,c
 16855  005248  0E00               	movlw	0
 16856  00524A  6EDF               	movwf	indf2,c
 16857  00524C                     l1267:
 16858                           
 16859                           ; BSR set to: 0
 16860                           ;tff.c: 802: FatFs = fs;
 16861                           
 16862                           ; BSR set to: 0
 16863  00524C  C060  F0FB         	movff	f_mount@fs,_FatFs
 16864  005250  C061  F0FC         	movff	f_mount@fs+1,_FatFs+1
 16865                           
 16866                           ; BSR set to: 0
 16867                           ;tff.c: 803: if (fs) fs->fs_type = 0;
 16868  005254  5160               	movf	f_mount@fs& (0+255),w,b
 16869  005256  1161               	iorwf	(f_mount@fs+1)& (0+255),w,b
 16870  005258  B4D8               	btfsc	status,2,c
 16871  00525A  D008               	goto	l1268
 16872                           
 16873                           ; BSR set to: 0
 16874  00525C  EE20 F01C          	lfsr	2,28
 16875  005260  5160               	movf	f_mount@fs& (0+255),w,b
 16876  005262  26D9               	addwf	fsr2l,f,c
 16877  005264  5161               	movf	(f_mount@fs+1)& (0+255),w,b
 16878  005266  22DA               	addwfc	fsr2h,f,c
 16879  005268  0E00               	movlw	0
 16880  00526A  6EDF               	movwf	indf2,c
 16881  00526C                     l1268:
 16882                           
 16883                           ; BSR set to: 0
 16884                           ;tff.c: 805: return FR_OK;
 16885                           
 16886                           ; BSR set to: 0
 16887  00526C  0E00               	movlw	0
 16888  00526E  0012               	return	
 16889  005270                     __end_of_f_mount:
 16890                           	opt stack 0
 16891                           tosu	equ	0xFFF
 16892                           tosh	equ	0xFFE
 16893                           tosl	equ	0xFFD
 16894                           pclath	equ	0xFFA
 16895                           tblptru	equ	0xFF8
 16896                           tblptrh	equ	0xFF7
 16897                           tblptrl	equ	0xFF6
 16898                           tablat	equ	0xFF5
 16899                           prodh	equ	0xFF4
 16900                           prodl	equ	0xFF3
 16901                           intcon	equ	0xFF2
 16902                           intcon2	equ	0xFF1
 16903                           intcon3	equ	0xFF0
 16904                           indf0	equ	0xFEF
 16905                           postinc0	equ	0xFEE
 16906                           fsr0h	equ	0xFEA
 16907                           fsr0l	equ	0xFE9
 16908                           wreg	equ	0xFE8
 16909                           indf1	equ	0xFE7
 16910                           postinc1	equ	0xFE6
 16911                           postdec1	equ	0xFE5
 16912                           plusw1	equ	0xFE3
 16913                           fsr1h	equ	0xFE2
 16914                           fsr1l	equ	0xFE1
 16915                           indf2	equ	0xFDF
 16916                           postinc2	equ	0xFDE
 16917                           postdec2	equ	0xFDD
 16918                           plusw2	equ	0xFDB
 16919                           fsr2h	equ	0xFDA
 16920                           fsr2l	equ	0xFD9
 16921                           status	equ	0xFD8
 16922                           
 16923 ;; *************** function _f_lseek *****************
 16924 ;; Defined at:
 16925 ;;		line 1132 in file "bibliotecas/tff.c"
 16926 ;; Parameters:    Size  Location     Type
 16927 ;;  fp              2  100[BANK0 ] PTR struct _FIL
 16928 ;;		 -> fil(28), 
 16929 ;;  ofs             4  102[BANK0 ] unsigned long 
 16930 ;; Auto vars:     Size  Location     Type
 16931 ;;  csize           4  123[BANK0 ] unsigned long 
 16932 ;;  ifptr           4  119[BANK0 ] unsigned long 
 16933 ;;  clust           2  127[BANK0 ] unsigned short 
 16934 ;;  res             1  118[BANK0 ] enum E155
 16935 ;; Return value:  Size  Location     Type
 16936 ;;                  1    wreg      enum E3978
 16937 ;; Registers used:
 16938 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16939 ;; Tracked objects:
 16940 ;;		On entry : 0/0
 16941 ;;		On exit  : 0/0
 16942 ;;		Unchanged: 0/0
 16943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16944 ;;      Params:         0       6       0       0       0       0       0       0       0
 16945 ;;      Locals:         0      11       0       0       0       0       0       0       0
 16946 ;;      Temps:          0      12       0       0       0       0       0       0       0
 16947 ;;      Totals:         0      29       0       0       0       0       0       0       0
 16948 ;;Total ram usage:       29 bytes
 16949 ;; Hardware stack levels used:    1
 16950 ;; Hardware stack levels required when called:   11
 16951 ;; This function calls:
 16952 ;;		___lldiv
 16953 ;;		_create_chain
 16954 ;;		_get_cluster
 16955 ;;		_validate
 16956 ;; This function is called by:
 16957 ;;		_escrita_sdcard
 16958 ;; This function uses a non-reentrant model
 16959 ;;
 16960                           
 16961                           	psect	text59
 16962  001442                     __ptext59:
 16963                           	opt stack 0
 16964  001442                     _f_lseek:
 16965                           	opt stack 16
 16966                           
 16967                           ;tff.c: 1137: FRESULT res;
 16968                           ;tff.c: 1138: CLUST clust;
 16969                           ;tff.c: 1139: DWORD csize, ifptr;
 16970                           ;tff.c: 1142: res = validate(fp->fs, fp->id);
 16971                           
 16972                           ; BSR set to: 0
 16973                           ;incstack = 0
 16974  001442  0100               	movlb	0	; () banked
 16975  001444  EE20 F004          	lfsr	2,4
 16976  001448  51C4               	movf	f_lseek@fp& (0+255),w,b
 16977  00144A  26D9               	addwf	fsr2l,f,c
 16978  00144C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16979  00144E  22DA               	addwfc	fsr2h,f,c
 16980  001450  CFDE F067          	movff	postinc2,validate@fs
 16981  001454  CFDD F068          	movff	postdec2,validate@fs+1
 16982  001458  C0C4  FFD9         	movff	f_lseek@fp,fsr2l
 16983  00145C  C0C5  FFDA         	movff	f_lseek@fp+1,fsr2h
 16984  001460  CFDE F069          	movff	postinc2,validate@id
 16985  001464  CFDD F06A          	movff	postdec2,validate@id+1
 16986  001468  EC38  F029         	call	_validate	;wreg free
 16987  00146C  0100               	movlb	0	; () banked
 16988  00146E  6FD6               	movwf	f_lseek@res& (0+255),b
 16989                           
 16990                           ; BSR set to: 0
 16991                           ;tff.c: 1143: if (res != FR_OK) return res;
 16992  001470  51D6               	movf	f_lseek@res& (0+255),w,b
 16993  001472  A4D8               	btfss	status,2,c
 16994  001474  0012               	return	
 16995                           
 16996                           ; BSR set to: 0
 16997                           ;tff.c: 1144: if (fp->flag & 0x80) return FR_RW_ERROR;
 16998                           
 16999                           ; BSR set to: 0
 17000                           
 17001                           ; BSR set to: 0
 17002                           ;	Return value of _f_lseek is never used
 17003  001476  EE20 F002          	lfsr	2,2
 17004  00147A  51C4               	movf	f_lseek@fp& (0+255),w,b
 17005  00147C  26D9               	addwf	fsr2l,f,c
 17006  00147E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17007  001480  22DA               	addwfc	fsr2h,f,c
 17008  001482  BEDF               	btfsc	indf2,7,c
 17009  001484  0012               	return	
 17010                           
 17011                           ; BSR set to: 0
 17012                           ;tff.c: 1145: if (ofs > fp->fsize
 17013                           ;tff.c: 1147: && !(fp->flag & 0x02)
 17014                           ;tff.c: 1149: ) ofs = fp->fsize;
 17015                           
 17016                           ; BSR set to: 0
 17017                           
 17018                           ; BSR set to: 0
 17019                           ;	Return value of _f_lseek is never used
 17020  001486  EE20 F00A          	lfsr	2,10
 17021  00148A  51C4               	movf	f_lseek@fp& (0+255),w,b
 17022  00148C  26D9               	addwf	fsr2l,f,c
 17023  00148E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17024  001490  22DA               	addwfc	fsr2h,f,c
 17025  001492  51C6               	movf	f_lseek@ofs& (0+255),w,b
 17026  001494  5CDE               	subwf	postinc2,w,c
 17027  001496  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 17028  001498  58DE               	subwfb	postinc2,w,c
 17029  00149A  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 17030  00149C  58DE               	subwfb	postinc2,w,c
 17031  00149E  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 17032  0014A0  58DE               	subwfb	postinc2,w,c
 17033  0014A2  B0D8               	btfsc	status,0,c
 17034  0014A4  D016               	goto	l1366
 17035                           
 17036                           ; BSR set to: 0
 17037  0014A6  EE20 F002          	lfsr	2,2
 17038  0014AA  51C4               	movf	f_lseek@fp& (0+255),w,b
 17039  0014AC  26D9               	addwf	fsr2l,f,c
 17040  0014AE  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17041  0014B0  22DA               	addwfc	fsr2h,f,c
 17042  0014B2  B2DF               	btfsc	indf2,1,c
 17043  0014B4  D00E               	goto	l1366
 17044                           
 17045                           ; BSR set to: 0
 17046  0014B6  EE20 F00A          	lfsr	2,10
 17047  0014BA  51C4               	movf	f_lseek@fp& (0+255),w,b
 17048  0014BC  26D9               	addwf	fsr2l,f,c
 17049  0014BE  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17050  0014C0  22DA               	addwfc	fsr2h,f,c
 17051  0014C2  CFDE F0C6          	movff	postinc2,f_lseek@ofs
 17052  0014C6  CFDE F0C7          	movff	postinc2,f_lseek@ofs+1
 17053  0014CA  CFDE F0C8          	movff	postinc2,f_lseek@ofs+2
 17054  0014CE  CFDE F0C9          	movff	postinc2,f_lseek@ofs+3
 17055  0014D2                     l1366:
 17056                           
 17057                           ; BSR set to: 0
 17058                           ;tff.c: 1151: ifptr = fp->fptr;
 17059  0014D2  EE20 F006          	lfsr	2,6
 17060  0014D6  51C4               	movf	f_lseek@fp& (0+255),w,b
 17061  0014D8  26D9               	addwf	fsr2l,f,c
 17062  0014DA  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17063  0014DC  22DA               	addwfc	fsr2h,f,c
 17064  0014DE  CFDE F0D7          	movff	postinc2,f_lseek@ifptr
 17065  0014E2  CFDE F0D8          	movff	postinc2,f_lseek@ifptr+1
 17066  0014E6  CFDE F0D9          	movff	postinc2,f_lseek@ifptr+2
 17067  0014EA  CFDE F0DA          	movff	postinc2,f_lseek@ifptr+3
 17068                           
 17069                           ;tff.c: 1152: fp->fptr = 0; fp->csect = 255;
 17070  0014EE  EE20 F006          	lfsr	2,6
 17071  0014F2  51C4               	movf	f_lseek@fp& (0+255),w,b
 17072  0014F4  26D9               	addwf	fsr2l,f,c
 17073  0014F6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17074  0014F8  22DA               	addwfc	fsr2h,f,c
 17075  0014FA  6ADE               	clrf	postinc2,c
 17076  0014FC  6ADE               	clrf	postinc2,c
 17077  0014FE  6ADE               	clrf	postinc2,c
 17078  001500  6ADD               	clrf	postdec2,c
 17079  001502  EE20 F003          	lfsr	2,3
 17080  001506  51C4               	movf	f_lseek@fp& (0+255),w,b
 17081  001508  26D9               	addwf	fsr2l,f,c
 17082  00150A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17083  00150C  22DA               	addwfc	fsr2h,f,c
 17084  00150E  0EFF               	movlw	255
 17085  001510  6EDF               	movwf	indf2,c
 17086                           
 17087                           ; BSR set to: 0
 17088                           ;tff.c: 1153: if (ofs > 0) {
 17089  001512  51C6               	movf	f_lseek@ofs& (0+255),w,b
 17090  001514  11C7               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 17091  001516  11C8               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 17092  001518  11C9               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 17093  00151A  B4D8               	btfsc	status,2,c
 17094  00151C  D19B               	goto	l1383
 17095                           
 17096                           ; BSR set to: 0
 17097                           ;tff.c: 1154: csize = (DWORD)fp->fs->csize * 512U;
 17098  00151E  EE20 F004          	lfsr	2,4
 17099  001522  51C4               	movf	f_lseek@fp& (0+255),w,b
 17100  001524  26D9               	addwf	fsr2l,f,c
 17101  001526  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17102  001528  22DA               	addwfc	fsr2h,f,c
 17103  00152A  EE10 F01D          	lfsr	1,29
 17104  00152E  50DE               	movf	postinc2,w,c
 17105  001530  26E1               	addwf	fsr1l,f,c
 17106  001532  50DD               	movf	postdec2,w,c
 17107  001534  22E2               	addwfc	fsr1h,f,c
 17108  001536  50E7               	movf	indf1,w,c
 17109  001538  6FCA               	movwf	??_f_lseek& (0+255),b
 17110  00153A  C0CA  F0CB         	movff	??_f_lseek,??_f_lseek+1
 17111  00153E  6BCC               	clrf	(??_f_lseek+2)& (0+255),b
 17112  001540  6BCD               	clrf	(??_f_lseek+3)& (0+255),b
 17113  001542  6BCE               	clrf	(??_f_lseek+4)& (0+255),b
 17114  001544  0E09               	movlw	9
 17115  001546                     u15355:
 17116  001546  90D8               	bcf	status,0,c
 17117  001548  37CB               	rlcf	(??_f_lseek+1)& (0+255),f,b
 17118  00154A  37CC               	rlcf	(??_f_lseek+2)& (0+255),f,b
 17119  00154C  37CD               	rlcf	(??_f_lseek+3)& (0+255),f,b
 17120  00154E  37CE               	rlcf	(??_f_lseek+4)& (0+255),f,b
 17121  001550  2EE8               	decfsz	wreg,f,c
 17122  001552  D7F9               	goto	u15355
 17123  001554  C0CB  F0DB         	movff	??_f_lseek+1,f_lseek@csize
 17124  001558  C0CC  F0DC         	movff	??_f_lseek+2,f_lseek@csize+1
 17125  00155C  C0CD  F0DD         	movff	??_f_lseek+3,f_lseek@csize+2
 17126  001560  C0CE  F0DE         	movff	??_f_lseek+4,f_lseek@csize+3
 17127                           
 17128                           ; BSR set to: 0
 17129                           ;tff.c: 1155: if (ifptr > 0 &&
 17130                           ;tff.c: 1156: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 17131  001564  51D7               	movf	f_lseek@ifptr& (0+255),w,b
 17132  001566  11D8               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 17133  001568  11D9               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 17134  00156A  11DA               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 17135  00156C  B4D8               	btfsc	status,2,c
 17136  00156E  D08F               	goto	l1368
 17137                           
 17138                           ; BSR set to: 0
 17139  001570  0EFF               	movlw	255
 17140  001572  25C6               	addwf	f_lseek@ofs& (0+255),w,b
 17141  001574  6F60               	movwf	___lldiv@dividend& (0+255),b
 17142  001576  0EFF               	movlw	255
 17143  001578  21C7               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 17144  00157A  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 17145  00157C  0EFF               	movlw	255
 17146  00157E  21C8               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 17147  001580  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 17148  001582  0EFF               	movlw	255
 17149  001584  21C9               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 17150  001586  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 17151  001588  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 17152  00158C  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 17153  001590  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 17154  001594  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 17155  001598  EC82  F026         	call	___lldiv	;wreg free
 17156  00159C  C060  F0CA         	movff	?___lldiv,??_f_lseek
 17157  0015A0  C061  F0CB         	movff	?___lldiv+1,??_f_lseek+1
 17158  0015A4  C062  F0CC         	movff	?___lldiv+2,??_f_lseek+2
 17159  0015A8  C063  F0CD         	movff	?___lldiv+3,??_f_lseek+3
 17160  0015AC  0EFF               	movlw	255
 17161  0015AE  0100               	movlb	0	; () banked
 17162  0015B0  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 17163  0015B2  6F60               	movwf	___lldiv@dividend& (0+255),b
 17164  0015B4  0EFF               	movlw	255
 17165  0015B6  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 17166  0015B8  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 17167  0015BA  0EFF               	movlw	255
 17168  0015BC  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 17169  0015BE  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 17170  0015C0  0EFF               	movlw	255
 17171  0015C2  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 17172  0015C4  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 17173  0015C6  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 17174  0015CA  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 17175  0015CE  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 17176  0015D2  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 17177  0015D6  EC82  F026         	call	___lldiv	;wreg free
 17178  0015DA  0100               	movlb	0	; () banked
 17179  0015DC  5160               	movf	?___lldiv& (0+255),w,b
 17180  0015DE  5DCA               	subwf	??_f_lseek& (0+255),w,b
 17181  0015E0  5161               	movf	(?___lldiv+1)& (0+255),w,b
 17182  0015E2  59CB               	subwfb	(??_f_lseek+1)& (0+255),w,b
 17183  0015E4  5162               	movf	(?___lldiv+2)& (0+255),w,b
 17184  0015E6  59CC               	subwfb	(??_f_lseek+2)& (0+255),w,b
 17185  0015E8  5163               	movf	(?___lldiv+3)& (0+255),w,b
 17186  0015EA  59CD               	subwfb	(??_f_lseek+3)& (0+255),w,b
 17187  0015EC  A0D8               	btfss	status,0,c
 17188  0015EE  D04F               	goto	l1368
 17189                           
 17190                           ; BSR set to: 0
 17191                           ;tff.c: 1157: fp->fptr = (ifptr - 1) & ~(csize - 1);
 17192  0015F0  0EFF               	movlw	255
 17193  0015F2  25DB               	addwf	f_lseek@csize& (0+255),w,b
 17194  0015F4  6FCA               	movwf	??_f_lseek& (0+255),b
 17195  0015F6  0EFF               	movlw	255
 17196  0015F8  21DC               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 17197  0015FA  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 17198  0015FC  0EFF               	movlw	255
 17199  0015FE  21DD               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 17200  001600  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 17201  001602  0EFF               	movlw	255
 17202  001604  21DE               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 17203  001606  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 17204  001608  1FCA               	comf	??_f_lseek& (0+255),f,b
 17205  00160A  1FCB               	comf	(??_f_lseek+1)& (0+255),f,b
 17206  00160C  1FCC               	comf	(??_f_lseek+2)& (0+255),f,b
 17207  00160E  1FCD               	comf	(??_f_lseek+3)& (0+255),f,b
 17208  001610  0EFF               	movlw	255
 17209  001612  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 17210  001614  6FCE               	movwf	(??_f_lseek+4)& (0+255),b
 17211  001616  0EFF               	movlw	255
 17212  001618  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 17213  00161A  6FCF               	movwf	(??_f_lseek+5)& (0+255),b
 17214  00161C  0EFF               	movlw	255
 17215  00161E  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 17216  001620  6FD0               	movwf	(??_f_lseek+6)& (0+255),b
 17217  001622  0EFF               	movlw	255
 17218  001624  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 17219  001626  6FD1               	movwf	(??_f_lseek+7)& (0+255),b
 17220  001628  51CA               	movf	??_f_lseek& (0+255),w,b
 17221  00162A  15CE               	andwf	(??_f_lseek+4)& (0+255),w,b
 17222  00162C  6FD2               	movwf	(??_f_lseek+8)& (0+255),b
 17223  00162E  51CB               	movf	(??_f_lseek+1)& (0+255),w,b
 17224  001630  15CF               	andwf	(??_f_lseek+5)& (0+255),w,b
 17225  001632  6FD3               	movwf	(??_f_lseek+9)& (0+255),b
 17226  001634  51CC               	movf	(??_f_lseek+2)& (0+255),w,b
 17227  001636  15D0               	andwf	(??_f_lseek+6)& (0+255),w,b
 17228  001638  6FD4               	movwf	(??_f_lseek+10)& (0+255),b
 17229  00163A  51CD               	movf	(??_f_lseek+3)& (0+255),w,b
 17230  00163C  15D1               	andwf	(??_f_lseek+7)& (0+255),w,b
 17231  00163E  6FD5               	movwf	(??_f_lseek+11)& (0+255),b
 17232  001640  EE20 F006          	lfsr	2,6
 17233  001644  51C4               	movf	f_lseek@fp& (0+255),w,b
 17234  001646  26D9               	addwf	fsr2l,f,c
 17235  001648  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17236  00164A  22DA               	addwfc	fsr2h,f,c
 17237  00164C  C0D2  FFDE         	movff	??_f_lseek+8,postinc2
 17238  001650  C0D3  FFDE         	movff	??_f_lseek+9,postinc2
 17239  001654  C0D4  FFDE         	movff	??_f_lseek+10,postinc2
 17240  001658  C0D5  FFDE         	movff	??_f_lseek+11,postinc2
 17241                           
 17242                           ;tff.c: 1158: ofs -= fp->fptr;
 17243  00165C  EE20 F006          	lfsr	2,6
 17244  001660  51C4               	movf	f_lseek@fp& (0+255),w,b
 17245  001662  26D9               	addwf	fsr2l,f,c
 17246  001664  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17247  001666  22DA               	addwfc	fsr2h,f,c
 17248  001668  50DE               	movf	postinc2,w,c
 17249  00166A  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 17250  00166C  50DE               	movf	postinc2,w,c
 17251  00166E  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 17252  001670  50DE               	movf	postinc2,w,c
 17253  001672  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 17254  001674  50DD               	movf	postdec2,w,c
 17255  001676  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 17256                           
 17257                           ;tff.c: 1159: clust = fp->curr_clust;
 17258  001678  EE20 F010          	lfsr	2,16
 17259  00167C  51C4               	movf	f_lseek@fp& (0+255),w,b
 17260  00167E  26D9               	addwf	fsr2l,f,c
 17261  001680  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17262  001682  22DA               	addwfc	fsr2h,f,c
 17263  001684  CFDE F0DF          	movff	postinc2,f_lseek@clust
 17264  001688  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 17265                           
 17266                           ;tff.c: 1160: } else {
 17267  00168C  D031               	goto	l1369
 17268  00168E                     l1368:
 17269                           
 17270                           ; BSR set to: 0
 17271                           ;tff.c: 1161: clust = fp->org_clust;
 17272                           
 17273                           ; BSR set to: 0
 17274  00168E  EE20 F00E          	lfsr	2,14
 17275  001692  51C4               	movf	f_lseek@fp& (0+255),w,b
 17276  001694  26D9               	addwf	fsr2l,f,c
 17277  001696  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17278  001698  22DA               	addwfc	fsr2h,f,c
 17279  00169A  CFDE F0DF          	movff	postinc2,f_lseek@clust
 17280  00169E  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 17281                           
 17282                           ; BSR set to: 0
 17283                           ;tff.c: 1163: if (clust == 0) {
 17284  0016A2  51DF               	movf	f_lseek@clust& (0+255),w,b
 17285  0016A4  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 17286  0016A6  A4D8               	btfss	status,2,c
 17287  0016A8  D019               	goto	l1370
 17288                           
 17289                           ; BSR set to: 0
 17290                           ;tff.c: 1164: clust = create_chain(0);
 17291  0016AA  0E00               	movlw	0
 17292  0016AC  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
 17293  0016AE  0E00               	movlw	0
 17294  0016B0  6FB6               	movwf	create_chain@clust& (0+255),b
 17295  0016B2  EC1D  F01A         	call	_create_chain	;wreg free
 17296  0016B6  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 17297  0016BA  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 17298                           
 17299                           ;tff.c: 1165: if (clust == 1) goto fk_error;
 17300  0016BE  0100               	movlb	0	; () banked
 17301  0016C0  05DF               	decf	f_lseek@clust& (0+255),w,b
 17302  0016C2  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 17303  0016C4  B4D8               	btfsc	status,2,c
 17304  0016C6  D0F9               	goto	l1372
 17305                           
 17306                           ; BSR set to: 0
 17307                           ;tff.c: 1166: fp->org_clust = clust;
 17308                           
 17309                           ; BSR set to: 0
 17310                           
 17311                           ; BSR set to: 0
 17312  0016C8  EE20 F00E          	lfsr	2,14
 17313  0016CC  51C4               	movf	f_lseek@fp& (0+255),w,b
 17314  0016CE  26D9               	addwf	fsr2l,f,c
 17315  0016D0  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17316  0016D2  22DA               	addwfc	fsr2h,f,c
 17317  0016D4  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 17318  0016D8  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 17319  0016DC                     l1370:
 17320                           
 17321                           ; BSR set to: 0
 17322                           ;tff.c: 1167: }
 17323                           ;tff.c: 1169: fp->curr_clust = clust;
 17324  0016DC  EE20 F010          	lfsr	2,16
 17325  0016E0  51C4               	movf	f_lseek@fp& (0+255),w,b
 17326  0016E2  26D9               	addwf	fsr2l,f,c
 17327  0016E4  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17328  0016E6  22DA               	addwfc	fsr2h,f,c
 17329  0016E8  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 17330  0016EC  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 17331  0016F0                     l1369:
 17332                           
 17333                           ; BSR set to: 0
 17334                           ;tff.c: 1170: }
 17335                           ;tff.c: 1171: if (clust != 0) {
 17336                           
 17337                           ; BSR set to: 0
 17338  0016F0  51DF               	movf	f_lseek@clust& (0+255),w,b
 17339  0016F2  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 17340  0016F4  A4D8               	btfss	status,2,c
 17341  0016F6  D064               	goto	l1374
 17342  0016F8  D0AD               	goto	l1383
 17343  0016FA                     
 17344                           ; BSR set to: 0
 17345                           ;tff.c: 1174: if (fp->flag & 0x02) {
 17346                           
 17347                           ; BSR set to: 0
 17348  0016FA  EE20 F002          	lfsr	2,2
 17349  0016FE  51C4               	movf	f_lseek@fp& (0+255),w,b
 17350  001700  26D9               	addwf	fsr2l,f,c
 17351  001702  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17352  001704  22DA               	addwfc	fsr2h,f,c
 17353  001706  A2DF               	btfss	indf2,1,c
 17354  001708  D018               	goto	l1376
 17355                           
 17356                           ; BSR set to: 0
 17357                           ;tff.c: 1175: clust = create_chain(clust);
 17358  00170A  C0DF  F0B6         	movff	f_lseek@clust,create_chain@clust
 17359  00170E  C0E0  F0B7         	movff	f_lseek@clust+1,create_chain@clust+1
 17360  001712  EC1D  F01A         	call	_create_chain	;wreg free
 17361  001716  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 17362  00171A  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 17363                           
 17364                           ;tff.c: 1176: if (clust == 0) {
 17365  00171E  0100               	movlb	0	; () banked
 17366  001720  51DF               	movf	f_lseek@clust& (0+255),w,b
 17367  001722  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 17368  001724  A4D8               	btfss	status,2,c
 17369  001726  D013               	goto	l1379
 17370                           
 17371                           ; BSR set to: 0
 17372                           ;tff.c: 1177: ofs = csize; break;
 17373  001728  C0DB  F0C6         	movff	f_lseek@csize,f_lseek@ofs
 17374  00172C  C0DC  F0C7         	movff	f_lseek@csize+1,f_lseek@ofs+1
 17375  001730  C0DD  F0C8         	movff	f_lseek@csize+2,f_lseek@ofs+2
 17376  001734  C0DE  F0C9         	movff	f_lseek@csize+3,f_lseek@ofs+3
 17377  001738  D04D               	goto	u15450
 17378  00173A                     l1376:
 17379                           
 17380                           ; BSR set to: 0
 17381                           ;tff.c: 1181: clust = get_cluster(clust);
 17382                           
 17383                           ; BSR set to: 0
 17384  00173A  C0DF  F0A0         	movff	f_lseek@clust,get_cluster@clust
 17385  00173E  C0E0  F0A1         	movff	f_lseek@clust+1,get_cluster@clust+1
 17386  001742  EC27  F018         	call	_get_cluster	;wreg free
 17387  001746  C0A0  F0DF         	movff	?_get_cluster,f_lseek@clust
 17388  00174A  C0A1  F0E0         	movff	?_get_cluster+1,f_lseek@clust+1
 17389  00174E                     l1379:
 17390                           
 17391                           ;tff.c: 1182: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 17392  00174E  0100               	movlb	0	; () banked
 17393  001750  51E0               	movf	(f_lseek@clust+1)& (0+255),w,b
 17394  001752  E104               	bnz	u15430
 17395  001754  0E02               	movlw	2
 17396  001756  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 17397  001758  A0D8               	btfss	status,0,c
 17398  00175A  D0AF               	goto	l1372
 17399  00175C                     u15430:
 17400                           
 17401                           ; BSR set to: 0
 17402  00175C  EE20 F004          	lfsr	2,4
 17403  001760  51C4               	movf	f_lseek@fp& (0+255),w,b
 17404  001762  26D9               	addwf	fsr2l,f,c
 17405  001764  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17406  001766  22DA               	addwfc	fsr2h,f,c
 17407  001768  EE10 F016          	lfsr	1,22
 17408  00176C  50DE               	movf	postinc2,w,c
 17409  00176E  26E1               	addwf	fsr1l,f,c
 17410  001770  50DD               	movf	postdec2,w,c
 17411  001772  22E2               	addwfc	fsr1h,f,c
 17412  001774  50E6               	movf	postinc1,w,c
 17413  001776  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 17414  001778  50E6               	movf	postinc1,w,c
 17415  00177A  59E0               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 17416  00177C  B0D8               	btfsc	status,0,c
 17417  00177E  D09D               	goto	l1372
 17418                           
 17419                           ; BSR set to: 0
 17420                           ;tff.c: 1183: fp->curr_clust = clust;
 17421                           
 17422                           ; BSR set to: 0
 17423                           
 17424                           ; BSR set to: 0
 17425  001780  EE20 F010          	lfsr	2,16
 17426  001784  51C4               	movf	f_lseek@fp& (0+255),w,b
 17427  001786  26D9               	addwf	fsr2l,f,c
 17428  001788  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17429  00178A  22DA               	addwfc	fsr2h,f,c
 17430  00178C  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 17431  001790  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 17432                           
 17433                           ;tff.c: 1184: fp->fptr += csize;
 17434  001794  EE20 F006          	lfsr	2,6
 17435  001798  51C4               	movf	f_lseek@fp& (0+255),w,b
 17436  00179A  26D9               	addwf	fsr2l,f,c
 17437  00179C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17438  00179E  22DA               	addwfc	fsr2h,f,c
 17439  0017A0  51DB               	movf	f_lseek@csize& (0+255),w,b
 17440  0017A2  26DE               	addwf	postinc2,f,c
 17441  0017A4  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 17442  0017A6  22DE               	addwfc	postinc2,f,c
 17443  0017A8  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 17444  0017AA  22DE               	addwfc	postinc2,f,c
 17445  0017AC  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 17446  0017AE  22DE               	addwfc	postinc2,f,c
 17447                           
 17448                           ; BSR set to: 0
 17449                           ;tff.c: 1185: ofs -= csize;
 17450  0017B0  51DB               	movf	f_lseek@csize& (0+255),w,b
 17451  0017B2  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 17452  0017B4  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 17453  0017B6  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 17454  0017B8  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 17455  0017BA  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 17456  0017BC  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 17457  0017BE  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 17458  0017C0                     l1374:
 17459                           
 17460                           ; BSR set to: 0
 17461                           
 17462                           ; BSR set to: 0
 17463  0017C0  51C6               	movf	f_lseek@ofs& (0+255),w,b
 17464  0017C2  5DDB               	subwf	f_lseek@csize& (0+255),w,b
 17465  0017C4  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 17466  0017C6  59DC               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 17467  0017C8  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 17468  0017CA  59DD               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 17469  0017CC  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 17470  0017CE  59DE               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 17471  0017D0  A0D8               	btfss	status,0,c
 17472  0017D2  D793               	goto	l1375
 17473  0017D4                     u15450:
 17474                           
 17475                           ; BSR set to: 0
 17476                           ;tff.c: 1186: }
 17477                           ;tff.c: 1187: fp->fptr += ofs;
 17478                           
 17479                           ; BSR set to: 0
 17480  0017D4  EE20 F006          	lfsr	2,6
 17481  0017D8  51C4               	movf	f_lseek@fp& (0+255),w,b
 17482  0017DA  26D9               	addwf	fsr2l,f,c
 17483  0017DC  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17484  0017DE  22DA               	addwfc	fsr2h,f,c
 17485  0017E0  51C6               	movf	f_lseek@ofs& (0+255),w,b
 17486  0017E2  26DE               	addwf	postinc2,f,c
 17487  0017E4  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 17488  0017E6  22DE               	addwfc	postinc2,f,c
 17489  0017E8  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 17490  0017EA  22DE               	addwfc	postinc2,f,c
 17491  0017EC  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 17492  0017EE  22DE               	addwfc	postinc2,f,c
 17493                           
 17494                           ;tff.c: 1188: fp->csect = (BYTE)(ofs / 512U);
 17495  0017F0  EE20 F003          	lfsr	2,3
 17496  0017F4  51C4               	movf	f_lseek@fp& (0+255),w,b
 17497  0017F6  26D9               	addwf	fsr2l,f,c
 17498  0017F8  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17499  0017FA  22DA               	addwfc	fsr2h,f,c
 17500  0017FC  C0C6  F0CA         	movff	f_lseek@ofs,??_f_lseek
 17501  001800  C0C7  F0CB         	movff	f_lseek@ofs+1,??_f_lseek+1
 17502  001804  C0C8  F0CC         	movff	f_lseek@ofs+2,??_f_lseek+2
 17503  001808  C0C9  F0CD         	movff	f_lseek@ofs+3,??_f_lseek+3
 17504  00180C  0E0A               	movlw	10
 17505  00180E  D005               	goto	u15460
 17506  001810                     u15465:
 17507  001810  90D8               	bcf	status,0,c
 17508  001812  33CD               	rrcf	(??_f_lseek+3)& (0+255),f,b
 17509  001814  33CC               	rrcf	(??_f_lseek+2)& (0+255),f,b
 17510  001816  33CB               	rrcf	(??_f_lseek+1)& (0+255),f,b
 17511  001818  33CA               	rrcf	??_f_lseek& (0+255),f,b
 17512  00181A                     u15460:
 17513  00181A  2EE8               	decfsz	wreg,f,c
 17514  00181C  D7F9               	goto	u15465
 17515  00181E  51CA               	movf	??_f_lseek& (0+255),w,b
 17516  001820  6EDF               	movwf	indf2,c
 17517                           
 17518                           ; BSR set to: 0
 17519                           ;tff.c: 1189: if (ofs % 512U) fp->csect++;
 17520  001822  0EFF               	movlw	255
 17521  001824  15C6               	andwf	f_lseek@ofs& (0+255),w,b
 17522  001826  6FCA               	movwf	??_f_lseek& (0+255),b
 17523  001828  0E01               	movlw	1
 17524  00182A  15C7               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 17525  00182C  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 17526  00182E  0E00               	movlw	0
 17527  001830  15C8               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 17528  001832  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 17529  001834  0E00               	movlw	0
 17530  001836  15C9               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 17531  001838  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 17532  00183A  51CA               	movf	??_f_lseek& (0+255),w,b
 17533  00183C  11CB               	iorwf	(??_f_lseek+1)& (0+255),w,b
 17534  00183E  11CC               	iorwf	(??_f_lseek+2)& (0+255),w,b
 17535  001840  11CD               	iorwf	(??_f_lseek+3)& (0+255),w,b
 17536  001842  B4D8               	btfsc	status,2,c
 17537  001844  D007               	goto	l1383
 17538                           
 17539                           ; BSR set to: 0
 17540  001846  EE20 F003          	lfsr	2,3
 17541  00184A  51C4               	movf	f_lseek@fp& (0+255),w,b
 17542  00184C  26D9               	addwf	fsr2l,f,c
 17543  00184E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17544  001850  22DA               	addwfc	fsr2h,f,c
 17545  001852  2ADF               	incf	indf2,f,c
 17546  001854                     l1383:
 17547                           
 17548                           ; BSR set to: 0
 17549                           ;tff.c: 1190: }
 17550                           ;tff.c: 1191: }
 17551                           ;tff.c: 1194: if (fp->fptr > fp->fsize) {
 17552                           
 17553                           ; BSR set to: 0
 17554                           
 17555                           ; BSR set to: 0
 17556                           
 17557                           ; BSR set to: 0
 17558  001854  EE20 F006          	lfsr	2,6
 17559  001858  51C4               	movf	f_lseek@fp& (0+255),w,b
 17560  00185A  26D9               	addwf	fsr2l,f,c
 17561  00185C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17562  00185E  22DA               	addwfc	fsr2h,f,c
 17563  001860  EE10 F00A          	lfsr	1,10
 17564  001864  51C4               	movf	f_lseek@fp& (0+255),w,b
 17565  001866  26E1               	addwf	fsr1l,f,c
 17566  001868  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17567  00186A  22E2               	addwfc	fsr1h,f,c
 17568  00186C  50DE               	movf	postinc2,w,c
 17569  00186E  5CE6               	subwf	postinc1,w,c
 17570  001870  50DE               	movf	postinc2,w,c
 17571  001872  58E6               	subwfb	postinc1,w,c
 17572  001874  50DE               	movf	postinc2,w,c
 17573  001876  58E6               	subwfb	postinc1,w,c
 17574  001878  50DE               	movf	postinc2,w,c
 17575  00187A  58E6               	subwfb	postinc1,w,c
 17576  00187C  B0D8               	btfsc	status,0,c
 17577  00187E  0012               	return	
 17578                           
 17579                           ; BSR set to: 0
 17580                           ;tff.c: 1195: fp->fsize = fp->fptr;
 17581  001880  EE20 F006          	lfsr	2,6
 17582  001884  51C4               	movf	f_lseek@fp& (0+255),w,b
 17583  001886  26D9               	addwf	fsr2l,f,c
 17584  001888  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17585  00188A  22DA               	addwfc	fsr2h,f,c
 17586  00188C  EE10 F00A          	lfsr	1,10
 17587  001890  51C4               	movf	f_lseek@fp& (0+255),w,b
 17588  001892  26E1               	addwf	fsr1l,f,c
 17589  001894  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17590  001896  22E2               	addwfc	fsr1h,f,c
 17591  001898  CFDE FFE6          	movff	postinc2,postinc1
 17592  00189C  CFDE FFE6          	movff	postinc2,postinc1
 17593  0018A0  CFDE FFE6          	movff	postinc2,postinc1
 17594  0018A4  CFDE FFE6          	movff	postinc2,postinc1
 17595                           
 17596                           ; BSR set to: 0
 17597                           ;tff.c: 1196: fp->flag |= 0x20;
 17598  0018A8  EE20 F002          	lfsr	2,2
 17599  0018AC  51C4               	movf	f_lseek@fp& (0+255),w,b
 17600  0018AE  26D9               	addwf	fsr2l,f,c
 17601  0018B0  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17602  0018B2  22DA               	addwfc	fsr2h,f,c
 17603  0018B4  0E00               	movlw	0
 17604  0018B6  8ADB               	bsf	plusw2,5,c
 17605                           
 17606                           ; BSR set to: 0
 17607                           ;tff.c: 1197: }
 17608                           ;tff.c: 1200: return FR_OK;
 17609                           ;	Return value of _f_lseek is never used
 17610                           
 17611                           ; BSR set to: 0
 17612  0018B8  0012               	return	
 17613  0018BA                     l1372:
 17614                           
 17615                           ; BSR set to: 0
 17616                           ;tff.c: 1203: fp->flag |= 0x80;
 17617                           
 17618                           ; BSR set to: 0
 17619  0018BA  EE20 F002          	lfsr	2,2
 17620  0018BE  51C4               	movf	f_lseek@fp& (0+255),w,b
 17621  0018C0  26D9               	addwf	fsr2l,f,c
 17622  0018C2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17623  0018C4  22DA               	addwfc	fsr2h,f,c
 17624  0018C6  0E00               	movlw	0
 17625  0018C8  8EDB               	bsf	plusw2,7,c
 17626  0018CA  0012               	return	
 17627  0018CC                     __end_of_f_lseek:
 17628                           	opt stack 0
 17629                           tosu	equ	0xFFF
 17630                           tosh	equ	0xFFE
 17631                           tosl	equ	0xFFD
 17632                           pclath	equ	0xFFA
 17633                           tblptru	equ	0xFF8
 17634                           tblptrh	equ	0xFF7
 17635                           tblptrl	equ	0xFF6
 17636                           tablat	equ	0xFF5
 17637                           prodh	equ	0xFF4
 17638                           prodl	equ	0xFF3
 17639                           intcon	equ	0xFF2
 17640                           intcon2	equ	0xFF1
 17641                           intcon3	equ	0xFF0
 17642                           indf0	equ	0xFEF
 17643                           postinc0	equ	0xFEE
 17644                           fsr0h	equ	0xFEA
 17645                           fsr0l	equ	0xFE9
 17646                           wreg	equ	0xFE8
 17647                           indf1	equ	0xFE7
 17648                           postinc1	equ	0xFE6
 17649                           postdec1	equ	0xFE5
 17650                           plusw1	equ	0xFE3
 17651                           fsr1h	equ	0xFE2
 17652                           fsr1l	equ	0xFE1
 17653                           indf2	equ	0xFDF
 17654                           postinc2	equ	0xFDE
 17655                           postdec2	equ	0xFDD
 17656                           plusw2	equ	0xFDB
 17657                           fsr2h	equ	0xFDA
 17658                           fsr2l	equ	0xFD9
 17659                           status	equ	0xFD8
 17660                           
 17661 ;; *************** function _create_chain *****************
 17662 ;; Defined at:
 17663 ;;		line 282 in file "bibliotecas/tff.c"
 17664 ;; Parameters:    Size  Location     Type
 17665 ;;  clust           2   86[BANK0 ] unsigned short 
 17666 ;; Auto vars:     Size  Location     Type
 17667 ;;  ncl             2   98[BANK0 ] unsigned short 
 17668 ;;  scl             2   96[BANK0 ] unsigned short 
 17669 ;;  cstat           2   94[BANK0 ] unsigned short 
 17670 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 17671 ;;		 -> NULL(0), fs(544), 
 17672 ;;  mcl             2   90[BANK0 ] unsigned short 
 17673 ;; Return value:  Size  Location     Type
 17674 ;;                  2   86[BANK0 ] unsigned short 
 17675 ;; Registers used:
 17676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17677 ;; Tracked objects:
 17678 ;;		On entry : 0/0
 17679 ;;		On exit  : 0/0
 17680 ;;		Unchanged: 0/0
 17681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17682 ;;      Params:         0       2       0       0       0       0       0       0       0
 17683 ;;      Locals:         0      10       0       0       0       0       0       0       0
 17684 ;;      Temps:          0       2       0       0       0       0       0       0       0
 17685 ;;      Totals:         0      14       0       0       0       0       0       0       0
 17686 ;;Total ram usage:       14 bytes
 17687 ;; Hardware stack levels used:    1
 17688 ;; Hardware stack levels required when called:   10
 17689 ;; This function calls:
 17690 ;;		_get_cluster
 17691 ;;		_put_cluster
 17692 ;; This function is called by:
 17693 ;;		_reserve_direntry
 17694 ;;		_f_write
 17695 ;;		_f_lseek
 17696 ;; This function uses a non-reentrant model
 17697 ;;
 17698                           
 17699                           	psect	text60
 17700  00343A                     __ptext60:
 17701                           	opt stack 0
 17702  00343A                     _create_chain:
 17703                           	opt stack 13
 17704                           
 17705                           ;tff.c: 286: CLUST cstat, ncl, scl, mcl;
 17706                           ;tff.c: 287: FATFS *fs = FatFs;
 17707                           
 17708                           ; BSR set to: 0
 17709                           ;incstack = 0
 17710  00343A  C0FB  F0BC         	movff	_FatFs,create_chain@fs
 17711  00343E  C0FC  F0BD         	movff	_FatFs+1,create_chain@fs+1
 17712                           
 17713                           ;tff.c: 290: mcl = fs->max_clust;
 17714  003442  0100               	movlb	0	; () banked
 17715  003444  EE20 F016          	lfsr	2,22
 17716  003448  51BC               	movf	create_chain@fs& (0+255),w,b
 17717  00344A  26D9               	addwf	fsr2l,f,c
 17718  00344C  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 17719  00344E  22DA               	addwfc	fsr2h,f,c
 17720  003450  CFDE F0BA          	movff	postinc2,create_chain@mcl
 17721  003454  CFDD F0BB          	movff	postdec2,create_chain@mcl+1
 17722                           
 17723                           ; BSR set to: 0
 17724                           ;tff.c: 291: if (clust == 0) {
 17725  003458  51B6               	movf	create_chain@clust& (0+255),w,b
 17726  00345A  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 17727  00345C  A4D8               	btfss	status,2,c
 17728  00345E  D01B               	goto	l1087
 17729                           
 17730                           ; BSR set to: 0
 17731                           ;tff.c: 292: scl = fs->last_clust;
 17732  003460  EE20 F018          	lfsr	2,24
 17733  003464  51BC               	movf	create_chain@fs& (0+255),w,b
 17734  003466  26D9               	addwf	fsr2l,f,c
 17735  003468  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 17736  00346A  22DA               	addwfc	fsr2h,f,c
 17737  00346C  CFDE F0C0          	movff	postinc2,create_chain@scl
 17738  003470  CFDD F0C1          	movff	postdec2,create_chain@scl+1
 17739                           
 17740                           ; BSR set to: 0
 17741                           ;tff.c: 293: if (scl < 2 || scl >= mcl) scl = 1;
 17742  003474  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 17743  003476  E104               	bnz	u13030
 17744  003478  0E02               	movlw	2
 17745  00347A  5DC0               	subwf	create_chain@scl& (0+255),w,b
 17746  00347C  A0D8               	btfss	status,0,c
 17747  00347E  D006               	goto	u13040
 17748  003480                     u13030:
 17749                           
 17750                           ; BSR set to: 0
 17751  003480  51BA               	movf	create_chain@mcl& (0+255),w,b
 17752  003482  5DC0               	subwf	create_chain@scl& (0+255),w,b
 17753  003484  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 17754  003486  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 17755  003488  A0D8               	btfss	status,0,c
 17756  00348A  D02A               	goto	l1091
 17757  00348C                     u13040:
 17758                           
 17759                           ; BSR set to: 0
 17760                           
 17761                           ; BSR set to: 0
 17762  00348C  0E00               	movlw	0
 17763  00348E  6FC1               	movwf	(create_chain@scl+1)& (0+255),b
 17764  003490  0E01               	movlw	1
 17765  003492  6FC0               	movwf	create_chain@scl& (0+255),b
 17766                           
 17767                           ; BSR set to: 0
 17768                           ;tff.c: 294: }
 17769  003494  D025               	goto	l1091
 17770  003496                     l1087:
 17771                           
 17772                           ; BSR set to: 0
 17773                           ;tff.c: 295: else {
 17774                           ;tff.c: 296: cstat = get_cluster(clust);
 17775                           
 17776                           ; BSR set to: 0
 17777  003496  C0B6  F0A0         	movff	create_chain@clust,get_cluster@clust
 17778  00349A  C0B7  F0A1         	movff	create_chain@clust+1,get_cluster@clust+1
 17779  00349E  EC27  F018         	call	_get_cluster	;wreg free
 17780  0034A2  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 17781  0034A6  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 17782                           
 17783                           ;tff.c: 297: if (cstat < 2) return 1;
 17784  0034AA  0100               	movlb	0	; () banked
 17785  0034AC  51BF               	movf	(create_chain@cstat+1)& (0+255),w,b
 17786  0034AE  E109               	bnz	l10151
 17787  0034B0  0E02               	movlw	2
 17788  0034B2  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 17789  0034B4  B0D8               	btfsc	status,0,c
 17790  0034B6  D005               	goto	l1092
 17791                           
 17792                           ; BSR set to: 0
 17793  0034B8  0E00               	movlw	0
 17794  0034BA  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17795  0034BC  0E01               	movlw	1
 17796  0034BE  6FB6               	movwf	?_create_chain& (0+255),b
 17797                           
 17798                           ; BSR set to: 0
 17799  0034C0  0012               	return	
 17800  0034C2                     l1092:
 17801  0034C2                     l10151:
 17802                           
 17803                           ; BSR set to: 0
 17804                           ;tff.c: 298: if (cstat < mcl) return cstat;
 17805  0034C2  51BA               	movf	create_chain@mcl& (0+255),w,b
 17806  0034C4  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 17807  0034C6  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 17808  0034C8  59BF               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 17809  0034CA  B0D8               	btfsc	status,0,c
 17810  0034CC  D005               	goto	l1094
 17811                           
 17812                           ; BSR set to: 0
 17813  0034CE  C0BE  F0B6         	movff	create_chain@cstat,?_create_chain
 17814  0034D2  C0BF  F0B7         	movff	create_chain@cstat+1,?_create_chain+1
 17815  0034D6  0012               	return	
 17816  0034D8                     l1094:
 17817                           
 17818                           ; BSR set to: 0
 17819                           ;tff.c: 299: scl = clust;
 17820  0034D8  C0B6  F0C0         	movff	create_chain@clust,create_chain@scl
 17821  0034DC  C0B7  F0C1         	movff	create_chain@clust+1,create_chain@scl+1
 17822  0034E0                     l1091:
 17823                           
 17824                           ; BSR set to: 0
 17825                           ;tff.c: 300: }
 17826                           ;tff.c: 302: ncl = scl;
 17827  0034E0  C0C0  F0C2         	movff	create_chain@scl,create_chain@ncl
 17828  0034E4  C0C1  F0C3         	movff	create_chain@scl+1,create_chain@ncl+1
 17829  0034E8                     l10155:
 17830                           
 17831                           ; BSR set to: 0
 17832                           ;tff.c: 304: ncl++;
 17833  0034E8  4BC2               	infsnz	create_chain@ncl& (0+255),f,b
 17834  0034EA  2BC3               	incf	(create_chain@ncl+1)& (0+255),f,b
 17835                           
 17836                           ; BSR set to: 0
 17837                           ;tff.c: 305: if (ncl >= mcl) {
 17838  0034EC  51BA               	movf	create_chain@mcl& (0+255),w,b
 17839  0034EE  5DC2               	subwf	create_chain@ncl& (0+255),w,b
 17840  0034F0  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 17841  0034F2  59C3               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 17842  0034F4  A0D8               	btfss	status,0,c
 17843  0034F6  D00F               	goto	l1097
 17844                           
 17845                           ; BSR set to: 0
 17846                           ;tff.c: 306: ncl = 2;
 17847  0034F8  0E00               	movlw	0
 17848  0034FA  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 17849  0034FC  0E02               	movlw	2
 17850  0034FE  6FC2               	movwf	create_chain@ncl& (0+255),b
 17851                           
 17852                           ; BSR set to: 0
 17853                           ;tff.c: 307: if (ncl > scl) return 0;
 17854  003500  51C2               	movf	create_chain@ncl& (0+255),w,b
 17855  003502  5DC0               	subwf	create_chain@scl& (0+255),w,b
 17856  003504  51C3               	movf	(create_chain@ncl+1)& (0+255),w,b
 17857  003506  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 17858  003508  B0D8               	btfsc	status,0,c
 17859  00350A  D005               	goto	l1097
 17860                           
 17861                           ; BSR set to: 0
 17862  00350C  0E00               	movlw	0
 17863  00350E  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17864  003510  0E00               	movlw	0
 17865  003512  6FB6               	movwf	?_create_chain& (0+255),b
 17866                           
 17867                           ; BSR set to: 0
 17868  003514  0012               	return	
 17869  003516                     l1097:
 17870                           
 17871                           ; BSR set to: 0
 17872                           ;tff.c: 308: }
 17873                           ;tff.c: 309: cstat = get_cluster(ncl);
 17874                           
 17875                           ; BSR set to: 0
 17876                           
 17877                           ; BSR set to: 0
 17878  003516  C0C2  F0A0         	movff	create_chain@ncl,get_cluster@clust
 17879  00351A  C0C3  F0A1         	movff	create_chain@ncl+1,get_cluster@clust+1
 17880  00351E  EC27  F018         	call	_get_cluster	;wreg free
 17881  003522  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 17882  003526  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 17883                           
 17884                           ;tff.c: 310: if (cstat == 0) break;
 17885  00352A  0100               	movlb	0	; () banked
 17886  00352C  51BE               	movf	create_chain@cstat& (0+255),w,b
 17887  00352E  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 17888  003530  B4D8               	btfsc	status,2,c
 17889  003532  D015               	goto	l1099
 17890                           
 17891                           ; BSR set to: 0
 17892                           ;tff.c: 311: if (cstat == 1) return 1;
 17893                           
 17894                           ; BSR set to: 0
 17895                           
 17896                           ; BSR set to: 0
 17897  003534  05BE               	decf	create_chain@cstat& (0+255),w,b
 17898  003536  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 17899  003538  A4D8               	btfss	status,2,c
 17900  00353A  D005               	goto	l1100
 17901                           
 17902                           ; BSR set to: 0
 17903  00353C  0E00               	movlw	0
 17904  00353E  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17905  003540  0E01               	movlw	1
 17906  003542  6FB6               	movwf	?_create_chain& (0+255),b
 17907                           
 17908                           ; BSR set to: 0
 17909  003544  0012               	return	
 17910  003546                     l1100:
 17911                           
 17912                           ; BSR set to: 0
 17913                           ;tff.c: 312: if (ncl == scl) return 0;
 17914                           
 17915                           ; BSR set to: 0
 17916  003546  51C0               	movf	create_chain@scl& (0+255),w,b
 17917  003548  19C2               	xorwf	create_chain@ncl& (0+255),w,b
 17918  00354A  E1CE               	bnz	l10155
 17919  00354C  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 17920  00354E  19C3               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 17921  003550  A4D8               	btfss	status,2,c
 17922  003552  D7CA               	goto	l1095
 17923                           
 17924                           ; BSR set to: 0
 17925  003554  0E00               	movlw	0
 17926  003556  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17927  003558  0E00               	movlw	0
 17928  00355A  6FB6               	movwf	?_create_chain& (0+255),b
 17929                           
 17930                           ; BSR set to: 0
 17931  00355C  0012               	return	
 17932  00355E                     l1099:
 17933                           
 17934                           ; BSR set to: 0
 17935                           ;tff.c: 315: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 17936                           
 17937                           ; BSR set to: 0
 17938  00355E  C0C2  F0A0         	movff	create_chain@ncl,put_cluster@clust
 17939  003562  C0C3  F0A1         	movff	create_chain@ncl+1,put_cluster@clust+1
 17940  003566  0EFF               	movlw	255
 17941  003568  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 17942  00356A  69A2               	setf	put_cluster@val& (0+255),b
 17943  00356C  ECC6  F015         	call	_put_cluster	;wreg free
 17944  003570  0900               	iorlw	0
 17945  003572  A4D8               	btfss	status,2,c
 17946  003574  D006               	goto	l1102
 17947  003576  0E00               	movlw	0
 17948  003578  0100               	movlb	0	; () banked
 17949  00357A  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17950  00357C  0E01               	movlw	1
 17951  00357E  6FB6               	movwf	?_create_chain& (0+255),b
 17952                           
 17953                           ; BSR set to: 0
 17954  003580  0012               	return	
 17955  003582                     l1102:
 17956                           
 17957                           ;tff.c: 316: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 17958                           
 17959                           ; BSR set to: 0
 17960  003582  0100               	movlb	0	; () banked
 17961  003584  51B6               	movf	create_chain@clust& (0+255),w,b
 17962  003586  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 17963  003588  B4D8               	btfsc	status,2,c
 17964  00358A  D013               	goto	l1103
 17965                           
 17966                           ; BSR set to: 0
 17967  00358C  C0B6  F0A0         	movff	create_chain@clust,put_cluster@clust
 17968  003590  C0B7  F0A1         	movff	create_chain@clust+1,put_cluster@clust+1
 17969  003594  C0C2  F0A2         	movff	create_chain@ncl,put_cluster@val
 17970  003598  C0C3  F0A3         	movff	create_chain@ncl+1,put_cluster@val+1
 17971  00359C  ECC6  F015         	call	_put_cluster	;wreg free
 17972  0035A0  0900               	iorlw	0
 17973  0035A2  A4D8               	btfss	status,2,c
 17974  0035A4  D006               	goto	l1103
 17975  0035A6  0E00               	movlw	0
 17976  0035A8  0100               	movlb	0	; () banked
 17977  0035AA  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17978  0035AC  0E01               	movlw	1
 17979  0035AE  6FB6               	movwf	?_create_chain& (0+255),b
 17980                           
 17981                           ; BSR set to: 0
 17982  0035B0  0012               	return	
 17983  0035B2                     l1103:
 17984                           
 17985                           ;tff.c: 318: fs->last_clust = ncl;
 17986                           
 17987                           ; BSR set to: 0
 17988  0035B2  0100               	movlb	0	; () banked
 17989  0035B4  EE20 F018          	lfsr	2,24
 17990  0035B8  51BC               	movf	create_chain@fs& (0+255),w,b
 17991  0035BA  26D9               	addwf	fsr2l,f,c
 17992  0035BC  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 17993  0035BE  22DA               	addwfc	fsr2h,f,c
 17994  0035C0  C0C2  FFDE         	movff	create_chain@ncl,postinc2
 17995  0035C4  C0C3  FFDD         	movff	create_chain@ncl+1,postdec2
 17996                           
 17997                           ;tff.c: 319: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 17998  0035C8  EE20 F01A          	lfsr	2,26
 17999  0035CC  51BC               	movf	create_chain@fs& (0+255),w,b
 18000  0035CE  26D9               	addwf	fsr2l,f,c
 18001  0035D0  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 18002  0035D2  22DA               	addwfc	fsr2h,f,c
 18003  0035D4  28DE               	incf	postinc2,w,c
 18004  0035D6  E103               	bnz	u13150
 18005  0035D8  28DE               	incf	postinc2,w,c
 18006  0035DA  B4D8               	btfsc	status,2,c
 18007  0035DC  D009               	goto	l1104
 18008  0035DE                     u13150:
 18009                           
 18010                           ; BSR set to: 0
 18011                           ;tff.c: 320: fs->free_clust--;
 18012  0035DE  EE20 F01A          	lfsr	2,26
 18013  0035E2  51BC               	movf	create_chain@fs& (0+255),w,b
 18014  0035E4  26D9               	addwf	fsr2l,f,c
 18015  0035E6  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 18016  0035E8  22DA               	addwfc	fsr2h,f,c
 18017  0035EA  06DE               	decf	postinc2,f,c
 18018  0035EC  0E00               	movlw	0
 18019  0035EE  5ADD               	subwfb	postdec2,f,c
 18020  0035F0                     l1104:
 18021                           
 18022                           ; BSR set to: 0
 18023                           ;tff.c: 324: }
 18024                           ;tff.c: 326: return ncl;
 18025                           
 18026                           ; BSR set to: 0
 18027  0035F0  C0C2  F0B6         	movff	create_chain@ncl,?_create_chain
 18028  0035F4  C0C3  F0B7         	movff	create_chain@ncl+1,?_create_chain+1
 18029  0035F8  0012               	return	
 18030  0035FA                     __end_of_create_chain:
 18031                           	opt stack 0
 18032                           tosu	equ	0xFFF
 18033                           tosh	equ	0xFFE
 18034                           tosl	equ	0xFFD
 18035                           pclath	equ	0xFFA
 18036                           tblptru	equ	0xFF8
 18037                           tblptrh	equ	0xFF7
 18038                           tblptrl	equ	0xFF6
 18039                           tablat	equ	0xFF5
 18040                           prodh	equ	0xFF4
 18041                           prodl	equ	0xFF3
 18042                           intcon	equ	0xFF2
 18043                           intcon2	equ	0xFF1
 18044                           intcon3	equ	0xFF0
 18045                           indf0	equ	0xFEF
 18046                           postinc0	equ	0xFEE
 18047                           fsr0h	equ	0xFEA
 18048                           fsr0l	equ	0xFE9
 18049                           wreg	equ	0xFE8
 18050                           indf1	equ	0xFE7
 18051                           postinc1	equ	0xFE6
 18052                           postdec1	equ	0xFE5
 18053                           plusw1	equ	0xFE3
 18054                           fsr1h	equ	0xFE2
 18055                           fsr1l	equ	0xFE1
 18056                           indf2	equ	0xFDF
 18057                           postinc2	equ	0xFDE
 18058                           postdec2	equ	0xFDD
 18059                           plusw2	equ	0xFDB
 18060                           fsr2h	equ	0xFDA
 18061                           fsr2l	equ	0xFD9
 18062                           status	equ	0xFD8
 18063                           
 18064 ;; *************** function _put_cluster *****************
 18065 ;; Defined at:
 18066 ;;		line 197 in file "bibliotecas/tff.c"
 18067 ;; Parameters:    Size  Location     Type
 18068 ;;  clust           2   64[BANK0 ] unsigned short 
 18069 ;;  val             2   66[BANK0 ] unsigned short 
 18070 ;; Auto vars:     Size  Location     Type
 18071 ;;  fatsect         4   76[BANK0 ] unsigned long 
 18072 ;;  fs              2   84[BANK0 ] PTR struct _FATFS
 18073 ;;		 -> NULL(0), fs(544), 
 18074 ;;  p               2   82[BANK0 ] PTR unsigned char 
 18075 ;;		 -> fs.win(512), NULL(0), fs(544), 
 18076 ;;  bc              2   80[BANK0 ] unsigned short 
 18077 ;; Return value:  Size  Location     Type
 18078 ;;                  1    wreg      enum E105
 18079 ;; Registers used:
 18080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18081 ;; Tracked objects:
 18082 ;;		On entry : 0/0
 18083 ;;		On exit  : 0/0
 18084 ;;		Unchanged: 0/0
 18085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18086 ;;      Params:         0       4       0       0       0       0       0       0       0
 18087 ;;      Locals:         0      14       0       0       0       0       0       0       0
 18088 ;;      Temps:          0       4       0       0       0       0       0       0       0
 18089 ;;      Totals:         0      22       0       0       0       0       0       0       0
 18090 ;;Total ram usage:       22 bytes
 18091 ;; Hardware stack levels used:    1
 18092 ;; Hardware stack levels required when called:    9
 18093 ;; This function calls:
 18094 ;;		___wmul
 18095 ;;		_move_window
 18096 ;; This function is called by:
 18097 ;;		_remove_chain
 18098 ;;		_create_chain
 18099 ;; This function uses a non-reentrant model
 18100 ;;
 18101                           
 18102                           	psect	text61
 18103  002B8C                     __ptext61:
 18104                           	opt stack 0
 18105  002B8C                     _put_cluster:
 18106                           	opt stack 13
 18107                           
 18108                           ;tff.c: 202: WORD bc;
 18109                           ;tff.c: 203: BYTE *p;
 18110                           ;tff.c: 204: DWORD fatsect;
 18111                           ;tff.c: 205: FATFS *fs = FatFs;
 18112                           
 18113                           ; BSR set to: 0
 18114                           ;incstack = 0
 18115  002B8C  C0FB  F0B4         	movff	_FatFs,put_cluster@fs
 18116  002B90  C0FC  F0B5         	movff	_FatFs+1,put_cluster@fs+1
 18117                           
 18118                           ;tff.c: 208: fatsect = fs->fatbase;
 18119  002B94  0100               	movlb	0	; () banked
 18120  002B96  EE20 F008          	lfsr	2,8
 18121  002B9A  51B4               	movf	put_cluster@fs& (0+255),w,b
 18122  002B9C  26D9               	addwf	fsr2l,f,c
 18123  002B9E  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 18124  002BA0  22DA               	addwfc	fsr2h,f,c
 18125  002BA2  CFDE F0AC          	movff	postinc2,put_cluster@fatsect
 18126  002BA6  CFDE F0AD          	movff	postinc2,put_cluster@fatsect+1
 18127  002BAA  CFDE F0AE          	movff	postinc2,put_cluster@fatsect+2
 18128  002BAE  CFDE F0AF          	movff	postinc2,put_cluster@fatsect+3
 18129                           
 18130                           ;tff.c: 209: switch (fs->fs_type) {
 18131  002BB2  D111               	goto	l1057
 18132  002BB4                     
 18133                           ; BSR set to: 0
 18134                           ;tff.c: 211: bc = (WORD)clust * 3 / 2;
 18135                           
 18136                           ; BSR set to: 0
 18137  002BB4  C0A0  F060         	movff	put_cluster@clust,___wmul@multiplier
 18138  002BB8  C0A1  F061         	movff	put_cluster@clust+1,___wmul@multiplier+1
 18139  002BBC  0E00               	movlw	0
 18140  002BBE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18141  002BC0  0E03               	movlw	3
 18142  002BC2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18143  002BC4  EC3B  F02B         	call	___wmul	;wreg free
 18144  002BC8  90D8               	bcf	status,0,c
 18145  002BCA  0100               	movlb	0	; () banked
 18146  002BCC  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 18147  002BCE  6FA4               	movwf	??_put_cluster& (0+255),b
 18148  002BD0  3160               	rrcf	?___wmul& (0+255),w,b
 18149  002BD2  6FB0               	movwf	put_cluster@bc& (0+255),b
 18150  002BD4  C0A4  F0B1         	movff	??_put_cluster,put_cluster@bc+1
 18151                           
 18152                           ; BSR set to: 0
 18153                           ;tff.c: 212: if (!move_window(fatsect + bc / 512U)) return FALSE;
 18154  002BD8  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 18155  002BDC  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 18156  002BE0  0E09               	movlw	9
 18157  002BE2  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 18158  002BE4                     u12885:
 18159  002BE4  90D8               	bcf	status,0,c
 18160  002BE6  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 18161  002BE8  33A4               	rrcf	??_put_cluster& (0+255),f,b
 18162  002BEA  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 18163  002BEC  D7FB               	goto	u12885
 18164  002BEE  51A4               	movf	??_put_cluster& (0+255),w,b
 18165  002BF0  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 18166  002BF2  6F8B               	movwf	move_window@sector& (0+255),b
 18167  002BF4  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18168  002BF6  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 18169  002BF8  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18170  002BFA  0E00               	movlw	0
 18171  002BFC  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 18172  002BFE  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18173  002C00  0E00               	movlw	0
 18174  002C02  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 18175  002C04  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18176  002C06  ECFD  F01A         	call	_move_window	;wreg free
 18177  002C0A  0900               	iorlw	0
 18178  002C0C  A4D8               	btfss	status,2,c
 18179  002C0E  D002               	goto	l1059
 18180  002C10  0E00               	movlw	0
 18181  002C12  0012               	return	
 18182  002C14                     l1059:
 18183                           
 18184                           ;tff.c: 213: p = &fs->win[bc % 512U];
 18185  002C14  0EFF               	movlw	255
 18186  002C16  0100               	movlb	0	; () banked
 18187  002C18  6FA4               	movwf	??_put_cluster& (0+255),b
 18188  002C1A  0E01               	movlw	1
 18189  002C1C  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 18190  002C1E  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 18191  002C22  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 18192  002C26  51A4               	movf	??_put_cluster& (0+255),w,b
 18193  002C28  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 18194  002C2A  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18195  002C2C  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 18196  002C2E  0E20               	movlw	32
 18197  002C30  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 18198  002C32  0E00               	movlw	0
 18199  002C34  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 18200  002C36  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 18201  002C38  25B4               	addwf	put_cluster@fs& (0+255),w,b
 18202  002C3A  6FB2               	movwf	put_cluster@p& (0+255),b
 18203  002C3C  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 18204  002C3E  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 18205  002C40  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 18206                           
 18207                           ; BSR set to: 0
 18208                           ;tff.c: 214: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 18209  002C42  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 18210  002C44  D004               	goto	l1062
 18211                           
 18212                           ; BSR set to: 0
 18213  002C46  C0A2  F0A8         	movff	put_cluster@val,_put_cluster$2013
 18214  002C4A  6BA9               	clrf	(_put_cluster$2013+1)& (0+255),b
 18215  002C4C  D01A               	goto	l1064
 18216  002C4E                     l1062:
 18217                           
 18218                           ; BSR set to: 0
 18219                           
 18220                           ; BSR set to: 0
 18221  002C4E  51A2               	movf	put_cluster@val& (0+255),w,b
 18222  002C50  6FA4               	movwf	??_put_cluster& (0+255),b
 18223  002C52  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 18224  002C54  3BA4               	swapf	??_put_cluster& (0+255),f,b
 18225  002C56  3BA5               	swapf	(??_put_cluster+1)& (0+255),f,b
 18226  002C58  0EF0               	movlw	240
 18227  002C5A  17A5               	andwf	(??_put_cluster+1)& (0+255),f,b
 18228  002C5C  51A4               	movf	??_put_cluster& (0+255),w,b
 18229  002C5E  0B0F               	andlw	15
 18230  002C60  13A5               	iorwf	(??_put_cluster+1)& (0+255),f,b
 18231  002C62  0EF0               	movlw	240
 18232  002C64  17A4               	andwf	??_put_cluster& (0+255),f,b
 18233  002C66  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 18234  002C6A  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 18235  002C6E  50DF               	movf	indf2,w,c
 18236  002C70  0B0F               	andlw	15
 18237  002C72  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 18238  002C74  6BA7               	clrf	(??_put_cluster+3)& (0+255),b
 18239  002C76  51A4               	movf	??_put_cluster& (0+255),w,b
 18240  002C78  11A6               	iorwf	(??_put_cluster+2)& (0+255),w,b
 18241  002C7A  6FA8               	movwf	_put_cluster$2013& (0+255),b
 18242  002C7C  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18243  002C7E  11A7               	iorwf	(??_put_cluster+3)& (0+255),w,b
 18244  002C80  6FA9               	movwf	(_put_cluster$2013+1)& (0+255),b
 18245  002C82                     l1064:
 18246                           
 18247                           ; BSR set to: 0
 18248                           
 18249                           ; BSR set to: 0
 18250  002C82  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 18251  002C86  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 18252  002C8A  C0A8  FFDF         	movff	_put_cluster$2013,indf2
 18253                           
 18254                           ; BSR set to: 0
 18255                           ;tff.c: 215: bc++;
 18256  002C8E  4BB0               	infsnz	put_cluster@bc& (0+255),f,b
 18257  002C90  2BB1               	incf	(put_cluster@bc+1)& (0+255),f,b
 18258                           
 18259                           ; BSR set to: 0
 18260                           ;tff.c: 216: fs->winflag = 1;
 18261  002C92  EE20 F01F          	lfsr	2,31
 18262  002C96  51B4               	movf	put_cluster@fs& (0+255),w,b
 18263  002C98  26D9               	addwf	fsr2l,f,c
 18264  002C9A  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 18265  002C9C  22DA               	addwfc	fsr2h,f,c
 18266  002C9E  0E01               	movlw	1
 18267  002CA0  6EDF               	movwf	indf2,c
 18268                           
 18269                           ; BSR set to: 0
 18270                           ;tff.c: 217: if (!move_window(fatsect + bc / 512U)) return FALSE;
 18271  002CA2  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 18272  002CA6  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 18273  002CAA  0E09               	movlw	9
 18274  002CAC  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 18275  002CAE                     u12915:
 18276  002CAE  90D8               	bcf	status,0,c
 18277  002CB0  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 18278  002CB2  33A4               	rrcf	??_put_cluster& (0+255),f,b
 18279  002CB4  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 18280  002CB6  D7FB               	goto	u12915
 18281  002CB8  51A4               	movf	??_put_cluster& (0+255),w,b
 18282  002CBA  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 18283  002CBC  6F8B               	movwf	move_window@sector& (0+255),b
 18284  002CBE  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18285  002CC0  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 18286  002CC2  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18287  002CC4  0E00               	movlw	0
 18288  002CC6  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 18289  002CC8  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18290  002CCA  0E00               	movlw	0
 18291  002CCC  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 18292  002CCE  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18293  002CD0  ECFD  F01A         	call	_move_window	;wreg free
 18294  002CD4  0900               	iorlw	0
 18295  002CD6  A4D8               	btfss	status,2,c
 18296  002CD8  D002               	goto	l1065
 18297  002CDA  0E00               	movlw	0
 18298  002CDC  0012               	return	
 18299  002CDE                     l1065:
 18300                           
 18301                           ;tff.c: 218: p = &fs->win[bc % 512U];
 18302  002CDE  0EFF               	movlw	255
 18303  002CE0  0100               	movlb	0	; () banked
 18304  002CE2  6FA4               	movwf	??_put_cluster& (0+255),b
 18305  002CE4  0E01               	movlw	1
 18306  002CE6  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 18307  002CE8  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 18308  002CEC  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 18309  002CF0  51A4               	movf	??_put_cluster& (0+255),w,b
 18310  002CF2  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 18311  002CF4  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18312  002CF6  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 18313  002CF8  0E20               	movlw	32
 18314  002CFA  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 18315  002CFC  0E00               	movlw	0
 18316  002CFE  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 18317  002D00  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 18318  002D02  25B4               	addwf	put_cluster@fs& (0+255),w,b
 18319  002D04  6FB2               	movwf	put_cluster@p& (0+255),b
 18320  002D06  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 18321  002D08  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 18322  002D0A  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 18323                           
 18324                           ; BSR set to: 0
 18325                           ;tff.c: 219: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 18326  002D0C  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 18327  002D0E  D013               	goto	l1067
 18328                           
 18329                           ; BSR set to: 0
 18330  002D10  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 18331  002D14  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 18332  002D18  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 18333  002D1C  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 18334  002D1E  0E0F               	movlw	15
 18335  002D20  17A4               	andwf	??_put_cluster& (0+255),f,b
 18336  002D22  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 18337  002D26  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 18338  002D2A  50DF               	movf	indf2,w,c
 18339  002D2C  0BF0               	andlw	240
 18340  002D2E  11A4               	iorwf	??_put_cluster& (0+255),w,b
 18341  002D30  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 18342  002D32  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 18343  002D34  D00C               	goto	L9
 18344  002D36                     l1067:
 18345                           
 18346                           ; BSR set to: 0
 18347                           
 18348                           ; BSR set to: 0
 18349  002D36  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 18350  002D3A  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 18351  002D3E  0E04               	movlw	4
 18352  002D40  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 18353  002D42                     u12945:
 18354  002D42  90D8               	bcf	status,0,c
 18355  002D44  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 18356  002D46  33A4               	rrcf	??_put_cluster& (0+255),f,b
 18357  002D48  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 18358  002D4A  D7FB               	goto	u12945
 18359  002D4C  51A4               	movf	??_put_cluster& (0+255),w,b
 18360  002D4E                     L9:
 18361  002D4E  6FAA               	movwf	_put_cluster$2014& (0+255),b
 18362  002D50  6BAB               	clrf	(_put_cluster$2014+1)& (0+255),b
 18363                           
 18364                           ; BSR set to: 0
 18365                           
 18366                           ; BSR set to: 0
 18367  002D52  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 18368  002D56  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 18369  002D5A  C0AA  FFDF         	movff	_put_cluster$2014,indf2
 18370                           
 18371                           ;tff.c: 220: break;
 18372  002D5E  D049               	goto	l1070
 18373  002D60                     
 18374                           ; BSR set to: 0
 18375                           ;tff.c: 223: if (!move_window(fatsect + clust / 256)) return FALSE;
 18376                           
 18377                           ; BSR set to: 0
 18378  002D60  C0A0  F0A4         	movff	put_cluster@clust,??_put_cluster
 18379  002D64  C0A1  F0A5         	movff	put_cluster@clust+1,??_put_cluster+1
 18380  002D68  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 18381  002D6C  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 18382  002D6E  51A4               	movf	??_put_cluster& (0+255),w,b
 18383  002D70  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 18384  002D72  6F8B               	movwf	move_window@sector& (0+255),b
 18385  002D74  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18386  002D76  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 18387  002D78  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18388  002D7A  0E00               	movlw	0
 18389  002D7C  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 18390  002D7E  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18391  002D80  0E00               	movlw	0
 18392  002D82  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 18393  002D84  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18394  002D86  ECFD  F01A         	call	_move_window	;wreg free
 18395  002D8A  0900               	iorlw	0
 18396  002D8C  A4D8               	btfss	status,2,c
 18397  002D8E  D002               	goto	l1072
 18398  002D90  0E00               	movlw	0
 18399  002D92  0012               	return	
 18400  002D94                     l1072:
 18401                           
 18402                           ;tff.c: 224: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 18403  002D94  0EFF               	movlw	255
 18404  002D96  0100               	movlb	0	; () banked
 18405  002D98  6FA4               	movwf	??_put_cluster& (0+255),b
 18406  002D9A  0E01               	movlw	1
 18407  002D9C  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 18408  002D9E  C0A0  F0A6         	movff	put_cluster@clust,??_put_cluster+2
 18409  002DA2  C0A1  F0A7         	movff	put_cluster@clust+1,??_put_cluster+3
 18410  002DA6  90D8               	bcf	status,0,c
 18411  002DA8  37A6               	rlcf	(??_put_cluster+2)& (0+255),f,b
 18412  002DAA  37A7               	rlcf	(??_put_cluster+3)& (0+255),f,b
 18413  002DAC  51A4               	movf	??_put_cluster& (0+255),w,b
 18414  002DAE  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 18415  002DB0  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18416  002DB2  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 18417  002DB4  0E20               	movlw	32
 18418  002DB6  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 18419  002DB8  0E00               	movlw	0
 18420  002DBA  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 18421  002DBC  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 18422  002DBE  25B4               	addwf	put_cluster@fs& (0+255),w,b
 18423  002DC0  6ED9               	movwf	fsr2l,c
 18424  002DC2  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 18425  002DC4  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 18426  002DC6  6EDA               	movwf	fsr2h,c
 18427  002DC8  C0A2  FFDE         	movff	put_cluster@val,postinc2
 18428  002DCC  C0A3  FFDD         	movff	put_cluster@val+1,postdec2
 18429                           
 18430                           ;tff.c: 225: break;
 18431  002DD0  D010               	goto	l1070
 18432  002DD2                     
 18433                           ; BSR set to: 0
 18434                           ;tff.c: 233: return FALSE;
 18435                           
 18436                           ; BSR set to: 0
 18437  002DD2  0E00               	movlw	0
 18438                           
 18439                           ; BSR set to: 0
 18440  002DD4  0012               	return	
 18441  002DD6                     l1057:
 18442                           
 18443                           ; BSR set to: 0
 18444                           
 18445                           ; BSR set to: 0
 18446  002DD6  EE20 F01C          	lfsr	2,28
 18447  002DDA  51B4               	movf	put_cluster@fs& (0+255),w,b
 18448  002DDC  26D9               	addwf	fsr2l,f,c
 18449  002DDE  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 18450  002DE0  22DA               	addwfc	fsr2h,f,c
 18451  002DE2  50DF               	movf	indf2,w,c
 18452                           
 18453                           ; Switch size 1, requested type "space"
 18454                           ; Number of cases is 2, Range of values is 1 to 2
 18455                           ; switch strategies available:
 18456                           ; Name         Instructions Cycles
 18457                           ; simple_byte            7     4 (average)
 18458                           ;	Chosen strategy is simple_byte
 18459  002DE4  0A01               	xorlw	1	; case 1
 18460  002DE6  B4D8               	btfsc	status,2,c
 18461  002DE8  D6E5               	goto	l1058
 18462  002DEA  0A03               	xorlw	3	; case 2
 18463  002DEC  B4D8               	btfsc	status,2,c
 18464  002DEE  D7B8               	goto	l1071
 18465  002DF0  D7F0               	goto	l1073
 18466  002DF2                     l1070:
 18467                           
 18468                           ; BSR set to: 0
 18469                           ;tff.c: 235: fs->winflag = 1;
 18470                           
 18471                           ; BSR set to: 0
 18472  002DF2  EE20 F01F          	lfsr	2,31
 18473  002DF6  51B4               	movf	put_cluster@fs& (0+255),w,b
 18474  002DF8  26D9               	addwf	fsr2l,f,c
 18475  002DFA  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 18476  002DFC  22DA               	addwfc	fsr2h,f,c
 18477  002DFE  0E01               	movlw	1
 18478  002E00  6EDF               	movwf	indf2,c
 18479                           
 18480                           ; BSR set to: 0
 18481                           ;tff.c: 236: return TRUE;
 18482  002E02  0E01               	movlw	1
 18483  002E04  0012               	return	
 18484  002E06                     __end_of_put_cluster:
 18485                           	opt stack 0
 18486                           tosu	equ	0xFFF
 18487                           tosh	equ	0xFFE
 18488                           tosl	equ	0xFFD
 18489                           pclath	equ	0xFFA
 18490                           tblptru	equ	0xFF8
 18491                           tblptrh	equ	0xFF7
 18492                           tblptrl	equ	0xFF6
 18493                           tablat	equ	0xFF5
 18494                           prodh	equ	0xFF4
 18495                           prodl	equ	0xFF3
 18496                           intcon	equ	0xFF2
 18497                           intcon2	equ	0xFF1
 18498                           intcon3	equ	0xFF0
 18499                           indf0	equ	0xFEF
 18500                           postinc0	equ	0xFEE
 18501                           fsr0h	equ	0xFEA
 18502                           fsr0l	equ	0xFE9
 18503                           wreg	equ	0xFE8
 18504                           indf1	equ	0xFE7
 18505                           postinc1	equ	0xFE6
 18506                           postdec1	equ	0xFE5
 18507                           plusw1	equ	0xFE3
 18508                           fsr1h	equ	0xFE2
 18509                           fsr1l	equ	0xFE1
 18510                           indf2	equ	0xFDF
 18511                           postinc2	equ	0xFDE
 18512                           postdec2	equ	0xFDD
 18513                           plusw2	equ	0xFDB
 18514                           fsr2h	equ	0xFDA
 18515                           fsr2l	equ	0xFD9
 18516                           status	equ	0xFD8
 18517                           
 18518 ;; *************** function _get_cluster *****************
 18519 ;; Defined at:
 18520 ;;		line 154 in file "bibliotecas/tff.c"
 18521 ;; Parameters:    Size  Location     Type
 18522 ;;  clust           2   64[BANK0 ] unsigned short 
 18523 ;; Auto vars:     Size  Location     Type
 18524 ;;  fatsect         4   75[BANK0 ] unsigned long 
 18525 ;;  fs              2   81[BANK0 ] PTR struct _FATFS
 18526 ;;		 -> NULL(0), fs(544), 
 18527 ;;  bc              2   79[BANK0 ] unsigned short 
 18528 ;;  wc              2   73[BANK0 ] unsigned short 
 18529 ;; Return value:  Size  Location     Type
 18530 ;;                  2   64[BANK0 ] unsigned short 
 18531 ;; Registers used:
 18532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18533 ;; Tracked objects:
 18534 ;;		On entry : 0/0
 18535 ;;		On exit  : 0/0
 18536 ;;		Unchanged: 0/0
 18537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18538 ;;      Params:         0       2       0       0       0       0       0       0       0
 18539 ;;      Locals:         0      10       0       0       0       0       0       0       0
 18540 ;;      Temps:          0       7       0       0       0       0       0       0       0
 18541 ;;      Totals:         0      19       0       0       0       0       0       0       0
 18542 ;;Total ram usage:       19 bytes
 18543 ;; Hardware stack levels used:    1
 18544 ;; Hardware stack levels required when called:    9
 18545 ;; This function calls:
 18546 ;;		___wmul
 18547 ;;		_move_window
 18548 ;; This function is called by:
 18549 ;;		_remove_chain
 18550 ;;		_create_chain
 18551 ;;		_next_dir_entry
 18552 ;;		_f_lseek
 18553 ;;		_f_read
 18554 ;; This function uses a non-reentrant model
 18555 ;;
 18556                           
 18557                           	psect	text62
 18558  00304E                     __ptext62:
 18559                           	opt stack 0
 18560  00304E                     _get_cluster:
 18561                           	opt stack 13
 18562                           
 18563                           ;tff.c: 158: WORD wc, bc;
 18564                           ;tff.c: 159: DWORD fatsect;
 18565                           ;tff.c: 160: FATFS *fs = FatFs;
 18566                           
 18567                           ;incstack = 0
 18568  00304E  C0FB  F0B1         	movff	_FatFs,get_cluster@fs
 18569  003052  C0FC  F0B2         	movff	_FatFs+1,get_cluster@fs+1
 18570                           
 18571                           ;tff.c: 163: if (clust >= 2 && clust < fs->max_clust) {
 18572  003056  0100               	movlb	0	; () banked
 18573  003058  51A1               	movf	(get_cluster@clust+1)& (0+255),w,b
 18574  00305A  E104               	bnz	u12790
 18575  00305C  0E02               	movlw	2
 18576  00305E  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 18577  003060  A0D8               	btfss	status,0,c
 18578  003062  D100               	goto	l1046
 18579  003064                     u12790:
 18580                           
 18581                           ; BSR set to: 0
 18582  003064  EE20 F016          	lfsr	2,22
 18583  003068  51B1               	movf	get_cluster@fs& (0+255),w,b
 18584  00306A  26D9               	addwf	fsr2l,f,c
 18585  00306C  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 18586  00306E  22DA               	addwfc	fsr2h,f,c
 18587  003070  50DE               	movf	postinc2,w,c
 18588  003072  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 18589  003074  50DE               	movf	postinc2,w,c
 18590  003076  59A1               	subwfb	(get_cluster@clust+1)& (0+255),w,b
 18591  003078  B0D8               	btfsc	status,0,c
 18592  00307A  D0F4               	goto	l1046
 18593                           
 18594                           ; BSR set to: 0
 18595                           ;tff.c: 164: fatsect = fs->fatbase;
 18596  00307C  EE20 F008          	lfsr	2,8
 18597  003080  51B1               	movf	get_cluster@fs& (0+255),w,b
 18598  003082  26D9               	addwf	fsr2l,f,c
 18599  003084  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 18600  003086  22DA               	addwfc	fsr2h,f,c
 18601  003088  CFDE F0AB          	movff	postinc2,get_cluster@fatsect
 18602  00308C  CFDE F0AC          	movff	postinc2,get_cluster@fatsect+1
 18603  003090  CFDE F0AD          	movff	postinc2,get_cluster@fatsect+2
 18604  003094  CFDE F0AE          	movff	postinc2,get_cluster@fatsect+3
 18605                           
 18606                           ;tff.c: 165: switch (fs->fs_type) {
 18607  003098  D0D8               	goto	l1043
 18608  00309A                     
 18609                           ; BSR set to: 0
 18610                           ;tff.c: 167: bc = (WORD)clust * 3 / 2;
 18611                           
 18612                           ; BSR set to: 0
 18613  00309A  C0A0  F060         	movff	get_cluster@clust,___wmul@multiplier
 18614  00309E  C0A1  F061         	movff	get_cluster@clust+1,___wmul@multiplier+1
 18615  0030A2  0E00               	movlw	0
 18616  0030A4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18617  0030A6  0E03               	movlw	3
 18618  0030A8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18619  0030AA  EC3B  F02B         	call	___wmul	;wreg free
 18620  0030AE  90D8               	bcf	status,0,c
 18621  0030B0  0100               	movlb	0	; () banked
 18622  0030B2  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 18623  0030B4  6FA2               	movwf	??_get_cluster& (0+255),b
 18624  0030B6  3160               	rrcf	?___wmul& (0+255),w,b
 18625  0030B8  6FAF               	movwf	get_cluster@bc& (0+255),b
 18626  0030BA  C0A2  F0B0         	movff	??_get_cluster,get_cluster@bc+1
 18627                           
 18628                           ; BSR set to: 0
 18629                           ;tff.c: 168: if (!move_window(fatsect + bc / 512U)) break;
 18630  0030BE  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 18631  0030C2  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 18632  0030C6  0E09               	movlw	9
 18633  0030C8  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 18634  0030CA                     u12815:
 18635  0030CA  90D8               	bcf	status,0,c
 18636  0030CC  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 18637  0030CE  33A2               	rrcf	??_get_cluster& (0+255),f,b
 18638  0030D0  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 18639  0030D2  D7FB               	goto	u12815
 18640  0030D4  51A2               	movf	??_get_cluster& (0+255),w,b
 18641  0030D6  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 18642  0030D8  6F8B               	movwf	move_window@sector& (0+255),b
 18643  0030DA  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18644  0030DC  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 18645  0030DE  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18646  0030E0  0E00               	movlw	0
 18647  0030E2  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 18648  0030E4  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18649  0030E6  0E00               	movlw	0
 18650  0030E8  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 18651  0030EA  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18652  0030EC  ECFD  F01A         	call	_move_window	;wreg free
 18653  0030F0  0900               	iorlw	0
 18654  0030F2  B4D8               	btfsc	status,2,c
 18655  0030F4  D0B7               	goto	l1046
 18656                           
 18657                           ;tff.c: 169: wc = fs->win[bc % 512U]; bc++;
 18658  0030F6  0EFF               	movlw	255
 18659  0030F8  0100               	movlb	0	; () banked
 18660  0030FA  6FA2               	movwf	??_get_cluster& (0+255),b
 18661  0030FC  0E01               	movlw	1
 18662  0030FE  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 18663  003100  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 18664  003104  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 18665  003108  51A2               	movf	??_get_cluster& (0+255),w,b
 18666  00310A  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 18667  00310C  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18668  00310E  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 18669  003110  0E20               	movlw	32
 18670  003112  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 18671  003114  0E00               	movlw	0
 18672  003116  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 18673  003118  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 18674  00311A  25B1               	addwf	get_cluster@fs& (0+255),w,b
 18675  00311C  6ED9               	movwf	fsr2l,c
 18676  00311E  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 18677  003120  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 18678  003122  6EDA               	movwf	fsr2h,c
 18679  003124  50DF               	movf	indf2,w,c
 18680  003126  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 18681  003128  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 18682  00312A  6FA9               	movwf	get_cluster@wc& (0+255),b
 18683  00312C  6BAA               	clrf	(get_cluster@wc+1)& (0+255),b
 18684                           
 18685                           ; BSR set to: 0
 18686  00312E  4BAF               	infsnz	get_cluster@bc& (0+255),f,b
 18687  003130  2BB0               	incf	(get_cluster@bc+1)& (0+255),f,b
 18688                           
 18689                           ; BSR set to: 0
 18690                           ;tff.c: 170: if (!move_window(fatsect + bc / 512U)) break;
 18691  003132  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 18692  003136  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 18693  00313A  0E09               	movlw	9
 18694  00313C  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 18695  00313E                     u12835:
 18696  00313E  90D8               	bcf	status,0,c
 18697  003140  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 18698  003142  33A2               	rrcf	??_get_cluster& (0+255),f,b
 18699  003144  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 18700  003146  D7FB               	goto	u12835
 18701  003148  51A2               	movf	??_get_cluster& (0+255),w,b
 18702  00314A  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 18703  00314C  6F8B               	movwf	move_window@sector& (0+255),b
 18704  00314E  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18705  003150  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 18706  003152  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18707  003154  0E00               	movlw	0
 18708  003156  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 18709  003158  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18710  00315A  0E00               	movlw	0
 18711  00315C  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 18712  00315E  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18713  003160  ECFD  F01A         	call	_move_window	;wreg free
 18714  003164  0900               	iorlw	0
 18715  003166  B4D8               	btfsc	status,2,c
 18716  003168  D07D               	goto	l1046
 18717                           
 18718                           ;tff.c: 171: wc |= (WORD)fs->win[bc % 512U] << 8;
 18719  00316A  0EFF               	movlw	255
 18720  00316C  0100               	movlb	0	; () banked
 18721  00316E  6FA2               	movwf	??_get_cluster& (0+255),b
 18722  003170  0E01               	movlw	1
 18723  003172  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 18724  003174  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 18725  003178  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 18726  00317C  51A2               	movf	??_get_cluster& (0+255),w,b
 18727  00317E  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 18728  003180  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18729  003182  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 18730  003184  0E20               	movlw	32
 18731  003186  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 18732  003188  0E00               	movlw	0
 18733  00318A  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 18734  00318C  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 18735  00318E  25B1               	addwf	get_cluster@fs& (0+255),w,b
 18736  003190  6ED9               	movwf	fsr2l,c
 18737  003192  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 18738  003194  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 18739  003196  6EDA               	movwf	fsr2h,c
 18740  003198  50DF               	movf	indf2,w,c
 18741  00319A  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 18742  00319C  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 18743  00319E  6FA8               	movwf	(??_get_cluster+6)& (0+255),b
 18744  0031A0  6BA7               	clrf	(??_get_cluster+5)& (0+255),b
 18745  0031A2  51A7               	movf	(??_get_cluster+5)& (0+255),w,b
 18746  0031A4  13A9               	iorwf	get_cluster@wc& (0+255),f,b
 18747  0031A6  51A8               	movf	(??_get_cluster+6)& (0+255),w,b
 18748  0031A8  13AA               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 18749                           
 18750                           ; BSR set to: 0
 18751                           ;tff.c: 172: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 18752  0031AA  B1A0               	btfsc	get_cluster@clust& (0+255),0,b
 18753  0031AC  D007               	goto	l1049
 18754                           
 18755                           ; BSR set to: 0
 18756  0031AE  0EFF               	movlw	255
 18757  0031B0  15A9               	andwf	get_cluster@wc& (0+255),w,b
 18758  0031B2  6FA0               	movwf	?_get_cluster& (0+255),b
 18759  0031B4  0E0F               	movlw	15
 18760  0031B6  15AA               	andwf	(get_cluster@wc+1)& (0+255),w,b
 18761  0031B8  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 18762  0031BA  0012               	return	
 18763  0031BC                     l1049:
 18764                           
 18765                           ; BSR set to: 0
 18766                           
 18767                           ; BSR set to: 0
 18768  0031BC  C0A9  F0A2         	movff	get_cluster@wc,??_get_cluster
 18769  0031C0  C0AA  F0A3         	movff	get_cluster@wc+1,??_get_cluster+1
 18770  0031C4  0E04               	movlw	4
 18771  0031C6  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 18772  0031C8                     u12865:
 18773  0031C8  90D8               	bcf	status,0,c
 18774  0031CA  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 18775  0031CC  33A2               	rrcf	??_get_cluster& (0+255),f,b
 18776  0031CE  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 18777  0031D0  D7FB               	goto	u12865
 18778  0031D2  C0A2  F0A0         	movff	??_get_cluster,?_get_cluster
 18779  0031D6  C0A3  F0A1         	movff	??_get_cluster+1,?_get_cluster+1
 18780                           
 18781                           ; BSR set to: 0
 18782                           
 18783                           ; BSR set to: 0
 18784  0031DA  0012               	return	
 18785  0031DC                     
 18786                           ; BSR set to: 0
 18787                           ;tff.c: 175: if (!move_window(fatsect + clust / 256)) break;
 18788                           
 18789                           ; BSR set to: 0
 18790  0031DC  C0A0  F0A2         	movff	get_cluster@clust,??_get_cluster
 18791  0031E0  C0A1  F0A3         	movff	get_cluster@clust+1,??_get_cluster+1
 18792  0031E4  C0A3  F0A2         	movff	??_get_cluster+1,??_get_cluster
 18793  0031E8  6BA3               	clrf	(??_get_cluster+1)& (0+255),b
 18794  0031EA  51A2               	movf	??_get_cluster& (0+255),w,b
 18795  0031EC  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 18796  0031EE  6F8B               	movwf	move_window@sector& (0+255),b
 18797  0031F0  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18798  0031F2  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 18799  0031F4  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18800  0031F6  0E00               	movlw	0
 18801  0031F8  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 18802  0031FA  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18803  0031FC  0E00               	movlw	0
 18804  0031FE  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 18805  003200  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18806  003202  ECFD  F01A         	call	_move_window	;wreg free
 18807  003206  0900               	iorlw	0
 18808  003208  B4D8               	btfsc	status,2,c
 18809  00320A  D02C               	goto	l1046
 18810                           
 18811                           ;tff.c: 176: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 18812  00320C  0EFF               	movlw	255
 18813  00320E  0100               	movlb	0	; () banked
 18814  003210  6FA2               	movwf	??_get_cluster& (0+255),b
 18815  003212  0E01               	movlw	1
 18816  003214  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 18817  003216  C0A0  F0A4         	movff	get_cluster@clust,??_get_cluster+2
 18818  00321A  C0A1  F0A5         	movff	get_cluster@clust+1,??_get_cluster+3
 18819  00321E  90D8               	bcf	status,0,c
 18820  003220  37A4               	rlcf	(??_get_cluster+2)& (0+255),f,b
 18821  003222  37A5               	rlcf	(??_get_cluster+3)& (0+255),f,b
 18822  003224  51A2               	movf	??_get_cluster& (0+255),w,b
 18823  003226  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 18824  003228  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18825  00322A  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 18826  00322C  0E20               	movlw	32
 18827  00322E  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 18828  003230  0E00               	movlw	0
 18829  003232  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 18830  003234  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 18831  003236  25B1               	addwf	get_cluster@fs& (0+255),w,b
 18832  003238  6ED9               	movwf	fsr2l,c
 18833  00323A  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 18834  00323C  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 18835  00323E  6EDA               	movwf	fsr2h,c
 18836  003240  CFDE F0A0          	movff	postinc2,?_get_cluster
 18837  003244  CFDD F0A1          	movff	postdec2,?_get_cluster+1
 18838                           
 18839                           ; BSR set to: 0
 18840  003248  0012               	return	
 18841  00324A                     l1043:
 18842                           
 18843                           ; BSR set to: 0
 18844                           
 18845                           ; BSR set to: 0
 18846  00324A  EE20 F01C          	lfsr	2,28
 18847  00324E  51B1               	movf	get_cluster@fs& (0+255),w,b
 18848  003250  26D9               	addwf	fsr2l,f,c
 18849  003252  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 18850  003254  22DA               	addwfc	fsr2h,f,c
 18851  003256  50DF               	movf	indf2,w,c
 18852                           
 18853                           ; Switch size 1, requested type "space"
 18854                           ; Number of cases is 2, Range of values is 1 to 2
 18855                           ; switch strategies available:
 18856                           ; Name         Instructions Cycles
 18857                           ; simple_byte            7     4 (average)
 18858                           ;	Chosen strategy is simple_byte
 18859  003258  0A01               	xorlw	1	; case 1
 18860  00325A  B4D8               	btfsc	status,2,c
 18861  00325C  D71E               	goto	l1044
 18862  00325E  0A03               	xorlw	3	; case 2
 18863  003260  B4D8               	btfsc	status,2,c
 18864  003262  D7BC               	goto	l1053
 18865  003264                     l1046:
 18866                           
 18867                           ;tff.c: 183: }
 18868                           ;tff.c: 185: return 1;
 18869                           
 18870                           ; BSR set to: 0
 18871                           
 18872                           ; BSR set to: 0
 18873  003264  0E00               	movlw	0
 18874  003266  0100               	movlb	0	; () banked
 18875  003268  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 18876  00326A  0E01               	movlw	1
 18877  00326C  6FA0               	movwf	?_get_cluster& (0+255),b
 18878  00326E  0012               	return	
 18879  003270                     __end_of_get_cluster:
 18880                           	opt stack 0
 18881                           tosu	equ	0xFFF
 18882                           tosh	equ	0xFFE
 18883                           tosl	equ	0xFFD
 18884                           pclath	equ	0xFFA
 18885                           tblptru	equ	0xFF8
 18886                           tblptrh	equ	0xFF7
 18887                           tblptrl	equ	0xFF6
 18888                           tablat	equ	0xFF5
 18889                           prodh	equ	0xFF4
 18890                           prodl	equ	0xFF3
 18891                           intcon	equ	0xFF2
 18892                           intcon2	equ	0xFF1
 18893                           intcon3	equ	0xFF0
 18894                           indf0	equ	0xFEF
 18895                           postinc0	equ	0xFEE
 18896                           fsr0h	equ	0xFEA
 18897                           fsr0l	equ	0xFE9
 18898                           wreg	equ	0xFE8
 18899                           indf1	equ	0xFE7
 18900                           postinc1	equ	0xFE6
 18901                           postdec1	equ	0xFE5
 18902                           plusw1	equ	0xFE3
 18903                           fsr1h	equ	0xFE2
 18904                           fsr1l	equ	0xFE1
 18905                           indf2	equ	0xFDF
 18906                           postinc2	equ	0xFDE
 18907                           postdec2	equ	0xFDD
 18908                           plusw2	equ	0xFDB
 18909                           fsr2h	equ	0xFDA
 18910                           fsr2l	equ	0xFD9
 18911                           status	equ	0xFD8
 18912                           
 18913 ;; *************** function ___wmul *****************
 18914 ;; Defined at:
 18915 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 18916 ;; Parameters:    Size  Location     Type
 18917 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18918 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18919 ;; Auto vars:     Size  Location     Type
 18920 ;;  product         2    4[BANK0 ] unsigned int 
 18921 ;; Return value:  Size  Location     Type
 18922 ;;                  2    0[BANK0 ] unsigned int 
 18923 ;; Registers used:
 18924 ;;		wreg, status,2, status,0, prodl, prodh
 18925 ;; Tracked objects:
 18926 ;;		On entry : 0/0
 18927 ;;		On exit  : 0/0
 18928 ;;		Unchanged: 0/0
 18929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18930 ;;      Params:         0       4       0       0       0       0       0       0       0
 18931 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18932 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18933 ;;      Totals:         0       6       0       0       0       0       0       0       0
 18934 ;;Total ram usage:        6 bytes
 18935 ;; Hardware stack levels used:    1
 18936 ;; Hardware stack levels required when called:    3
 18937 ;; This function calls:
 18938 ;;		Nothing
 18939 ;; This function is called by:
 18940 ;;		_get_cluster
 18941 ;;		_put_cluster
 18942 ;;		_fprintf
 18943 ;;		_atoi
 18944 ;; This function uses a non-reentrant model
 18945 ;;
 18946                           
 18947                           	psect	text63
 18948  005676                     __ptext63:
 18949                           	opt stack 0
 18950  005676                     ___wmul:
 18951                           	opt stack 24
 18952                           
 18953                           ; BSR set to: 0
 18954                           ;incstack = 0
 18955  005676  0100               	movlb	0	; () banked
 18956  005678  5160               	movf	___wmul@multiplier& (0+255),w,b
 18957  00567A  0362               	mulwf	___wmul@multiplicand& (0+255),b
 18958  00567C  CFF3 F064          	movff	prodl,___wmul@product
 18959  005680  CFF4 F065          	movff	prodh,___wmul@product+1
 18960  005684  5160               	movf	___wmul@multiplier& (0+255),w,b
 18961  005686  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18962  005688  50F3               	movf	prodl,w,c
 18963  00568A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 18964  00568C  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18965  00568E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 18966  005690  50F3               	movf	prodl,w,c
 18967  005692  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 18968                           
 18969                           ; BSR set to: 0
 18970  005694  C064  F060         	movff	___wmul@product,?___wmul
 18971  005698  C065  F061         	movff	___wmul@product+1,?___wmul+1
 18972  00569C  0012               	return	
 18973  00569E                     __end_of___wmul:
 18974                           	opt stack 0
 18975                           tosu	equ	0xFFF
 18976                           tosh	equ	0xFFE
 18977                           tosl	equ	0xFFD
 18978                           pclath	equ	0xFFA
 18979                           tblptru	equ	0xFF8
 18980                           tblptrh	equ	0xFF7
 18981                           tblptrl	equ	0xFF6
 18982                           tablat	equ	0xFF5
 18983                           prodh	equ	0xFF4
 18984                           prodl	equ	0xFF3
 18985                           intcon	equ	0xFF2
 18986                           intcon2	equ	0xFF1
 18987                           intcon3	equ	0xFF0
 18988                           indf0	equ	0xFEF
 18989                           postinc0	equ	0xFEE
 18990                           fsr0h	equ	0xFEA
 18991                           fsr0l	equ	0xFE9
 18992                           wreg	equ	0xFE8
 18993                           indf1	equ	0xFE7
 18994                           postinc1	equ	0xFE6
 18995                           postdec1	equ	0xFE5
 18996                           plusw1	equ	0xFE3
 18997                           fsr1h	equ	0xFE2
 18998                           fsr1l	equ	0xFE1
 18999                           indf2	equ	0xFDF
 19000                           postinc2	equ	0xFDE
 19001                           postdec2	equ	0xFDD
 19002                           plusw2	equ	0xFDB
 19003                           fsr2h	equ	0xFDA
 19004                           fsr2l	equ	0xFD9
 19005                           status	equ	0xFD8
 19006                           
 19007 ;; *************** function ___lldiv *****************
 19008 ;; Defined at:
 19009 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 19010 ;; Parameters:    Size  Location     Type
 19011 ;;  dividend        4    0[BANK0 ] unsigned long 
 19012 ;;  divisor         4    4[BANK0 ] unsigned long 
 19013 ;; Auto vars:     Size  Location     Type
 19014 ;;  quotient        4    8[BANK0 ] unsigned long 
 19015 ;;  counter         1   12[BANK0 ] unsigned char 
 19016 ;; Return value:  Size  Location     Type
 19017 ;;                  4    0[BANK0 ] unsigned long 
 19018 ;; Registers used:
 19019 ;;		wreg, status,2, status,0
 19020 ;; Tracked objects:
 19021 ;;		On entry : 0/0
 19022 ;;		On exit  : 0/0
 19023 ;;		Unchanged: 0/0
 19024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19025 ;;      Params:         0       8       0       0       0       0       0       0       0
 19026 ;;      Locals:         0       5       0       0       0       0       0       0       0
 19027 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19028 ;;      Totals:         0      13       0       0       0       0       0       0       0
 19029 ;;Total ram usage:       13 bytes
 19030 ;; Hardware stack levels used:    1
 19031 ;; Hardware stack levels required when called:    3
 19032 ;; This function calls:
 19033 ;;		Nothing
 19034 ;; This function is called by:
 19035 ;;		_auto_mount
 19036 ;;		_f_lseek
 19037 ;;		_fprintf
 19038 ;; This function uses a non-reentrant model
 19039 ;;
 19040                           
 19041                           	psect	text64
 19042  004D04                     __ptext64:
 19043                           	opt stack 0
 19044  004D04                     ___lldiv:
 19045                           	opt stack 23
 19046                           
 19047                           ; BSR set to: 0
 19048                           ;incstack = 0
 19049  004D04  0E00               	movlw	0
 19050  004D06  0100               	movlb	0	; () banked
 19051  004D08  6F68               	movwf	___lldiv@quotient& (0+255),b
 19052  004D0A  0E00               	movlw	0
 19053  004D0C  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 19054  004D0E  0E00               	movlw	0
 19055  004D10  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 19056  004D12  0E00               	movlw	0
 19057  004D14  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 19058                           
 19059                           ; BSR set to: 0
 19060  004D16  5164               	movf	___lldiv@divisor& (0+255),w,b
 19061  004D18  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 19062  004D1A  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 19063  004D1C  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 19064  004D1E  B4D8               	btfsc	status,2,c
 19065  004D20  D02A               	goto	l1904
 19066                           
 19067                           ; BSR set to: 0
 19068  004D22  0E01               	movlw	1
 19069  004D24  6F6C               	movwf	___lldiv@counter& (0+255),b
 19070  004D26  D006               	goto	l1899
 19071  004D28                     
 19072                           ; BSR set to: 0
 19073                           
 19074                           ; BSR set to: 0
 19075  004D28  90D8               	bcf	status,0,c
 19076  004D2A  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 19077  004D2C  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 19078  004D2E  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 19079  004D30  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 19080  004D32  2B6C               	incf	___lldiv@counter& (0+255),f,b
 19081  004D34                     l1899:
 19082                           
 19083                           ; BSR set to: 0
 19084                           
 19085                           ; BSR set to: 0
 19086  004D34  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 19087  004D36  D7F8               	goto	l1900
 19088  004D38                     u14290:
 19089                           
 19090                           ; BSR set to: 0
 19091                           
 19092                           ; BSR set to: 0
 19093                           
 19094                           ; BSR set to: 0
 19095  004D38  90D8               	bcf	status,0,c
 19096  004D3A  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 19097  004D3C  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 19098  004D3E  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 19099  004D40  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 19100                           
 19101                           ; BSR set to: 0
 19102  004D42  5164               	movf	___lldiv@divisor& (0+255),w,b
 19103  004D44  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 19104  004D46  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19105  004D48  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 19106  004D4A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19107  004D4C  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 19108  004D4E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19109  004D50  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 19110  004D52  A0D8               	btfss	status,0,c
 19111  004D54  D009               	goto	l1903
 19112                           
 19113                           ; BSR set to: 0
 19114  004D56  5164               	movf	___lldiv@divisor& (0+255),w,b
 19115  004D58  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 19116  004D5A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19117  004D5C  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 19118  004D5E  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19119  004D60  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 19120  004D62  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19121  004D64  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 19122                           
 19123                           ; BSR set to: 0
 19124  004D66  8168               	bsf	___lldiv@quotient& (0+255),0,b
 19125  004D68                     l1903:
 19126                           
 19127                           ; BSR set to: 0
 19128                           
 19129                           ; BSR set to: 0
 19130  004D68  90D8               	bcf	status,0,c
 19131  004D6A  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 19132  004D6C  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 19133  004D6E  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 19134  004D70  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 19135                           
 19136                           ; BSR set to: 0
 19137  004D72  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 19138  004D74  D7E1               	goto	u14290
 19139  004D76                     l1904:
 19140                           
 19141                           ; BSR set to: 0
 19142                           
 19143                           ; BSR set to: 0
 19144  004D76  C068  F060         	movff	___lldiv@quotient,?___lldiv
 19145  004D7A  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 19146  004D7E  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 19147  004D82  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 19148                           
 19149                           ; BSR set to: 0
 19150  004D86  0012               	return		;funcret
 19151  004D88                     __end_of___lldiv:
 19152                           	opt stack 0
 19153                           tosu	equ	0xFFF
 19154                           tosh	equ	0xFFE
 19155                           tosl	equ	0xFFD
 19156                           pclath	equ	0xFFA
 19157                           tblptru	equ	0xFF8
 19158                           tblptrh	equ	0xFF7
 19159                           tblptrl	equ	0xFF6
 19160                           tablat	equ	0xFF5
 19161                           prodh	equ	0xFF4
 19162                           prodl	equ	0xFF3
 19163                           intcon	equ	0xFF2
 19164                           intcon2	equ	0xFF1
 19165                           intcon3	equ	0xFF0
 19166                           indf0	equ	0xFEF
 19167                           postinc0	equ	0xFEE
 19168                           fsr0h	equ	0xFEA
 19169                           fsr0l	equ	0xFE9
 19170                           wreg	equ	0xFE8
 19171                           indf1	equ	0xFE7
 19172                           postinc1	equ	0xFE6
 19173                           postdec1	equ	0xFE5
 19174                           plusw1	equ	0xFE3
 19175                           fsr1h	equ	0xFE2
 19176                           fsr1l	equ	0xFE1
 19177                           indf2	equ	0xFDF
 19178                           postinc2	equ	0xFDE
 19179                           postdec2	equ	0xFDD
 19180                           plusw2	equ	0xFDB
 19181                           fsr2h	equ	0xFDA
 19182                           fsr2l	equ	0xFD9
 19183                           status	equ	0xFD8
 19184                           
 19185 ;; *************** function _f_close *****************
 19186 ;; Defined at:
 19187 ;;		line 1108 in file "bibliotecas/tff.c"
 19188 ;; Parameters:    Size  Location     Type
 19189 ;;  fp              2   75[BANK0 ] PTR struct _FIL
 19190 ;;		 -> fil(28), 
 19191 ;; Auto vars:     Size  Location     Type
 19192 ;;  res             1   77[BANK0 ] enum E155
 19193 ;; Return value:  Size  Location     Type
 19194 ;;                  1    wreg      enum E3978
 19195 ;; Registers used:
 19196 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19197 ;; Tracked objects:
 19198 ;;		On entry : 0/0
 19199 ;;		On exit  : 0/0
 19200 ;;		Unchanged: 0/0
 19201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19202 ;;      Params:         0       2       0       0       0       0       0       0       0
 19203 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19204 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19205 ;;      Totals:         0       3       0       0       0       0       0       0       0
 19206 ;;Total ram usage:        3 bytes
 19207 ;; Hardware stack levels used:    1
 19208 ;; Hardware stack levels required when called:   11
 19209 ;; This function calls:
 19210 ;;		_f_sync
 19211 ;; This function is called by:
 19212 ;;		_escrita_sdcard
 19213 ;;		_sdcard_init
 19214 ;;		_leitura_sdcard
 19215 ;; This function uses a non-reentrant model
 19216 ;;
 19217                           
 19218                           	psect	text65
 19219  0055F4                     __ptext65:
 19220                           	opt stack 0
 19221  0055F4                     _f_close:
 19222                           	opt stack 16
 19223                           
 19224                           ;tff.c: 1112: FRESULT res;
 19225                           ;tff.c: 1116: res = f_sync(fp);
 19226                           
 19227                           ; BSR set to: 0
 19228                           ;incstack = 0
 19229  0055F4  C0AB  F0A2         	movff	f_close@fp,f_sync@fp
 19230  0055F8  C0AC  F0A3         	movff	f_close@fp+1,f_sync@fp+1
 19231  0055FC  EC3D  F01F         	call	_f_sync	;wreg free
 19232  005600  0100               	movlb	0	; () banked
 19233  005602  6FAD               	movwf	f_close@res& (0+255),b
 19234                           
 19235                           ; BSR set to: 0
 19236                           ;tff.c: 1120: if (res == FR_OK) fp->fs = (0);
 19237  005604  51AD               	movf	f_close@res& (0+255),w,b
 19238  005606  A4D8               	btfss	status,2,c
 19239  005608  0012               	return	
 19240                           
 19241                           ; BSR set to: 0
 19242  00560A  EE20 F004          	lfsr	2,4
 19243  00560E  51AB               	movf	f_close@fp& (0+255),w,b
 19244  005610  26D9               	addwf	fsr2l,f,c
 19245  005612  51AC               	movf	(f_close@fp+1)& (0+255),w,b
 19246  005614  22DA               	addwfc	fsr2h,f,c
 19247  005616  0E00               	movlw	0
 19248  005618  6EDE               	movwf	postinc2,c
 19249  00561A  0E00               	movlw	0
 19250  00561C  6EDD               	movwf	postdec2,c
 19251                           
 19252                           ; BSR set to: 0
 19253  00561E  0012               	return	
 19254  005620                     __end_of_f_close:
 19255                           	opt stack 0
 19256                           tosu	equ	0xFFF
 19257                           tosh	equ	0xFFE
 19258                           tosl	equ	0xFFD
 19259                           pclath	equ	0xFFA
 19260                           tblptru	equ	0xFF8
 19261                           tblptrh	equ	0xFF7
 19262                           tblptrl	equ	0xFF6
 19263                           tablat	equ	0xFF5
 19264                           prodh	equ	0xFF4
 19265                           prodl	equ	0xFF3
 19266                           intcon	equ	0xFF2
 19267                           intcon2	equ	0xFF1
 19268                           intcon3	equ	0xFF0
 19269                           indf0	equ	0xFEF
 19270                           postinc0	equ	0xFEE
 19271                           fsr0h	equ	0xFEA
 19272                           fsr0l	equ	0xFE9
 19273                           wreg	equ	0xFE8
 19274                           indf1	equ	0xFE7
 19275                           postinc1	equ	0xFE6
 19276                           postdec1	equ	0xFE5
 19277                           plusw1	equ	0xFE3
 19278                           fsr1h	equ	0xFE2
 19279                           fsr1l	equ	0xFE1
 19280                           indf2	equ	0xFDF
 19281                           postinc2	equ	0xFDE
 19282                           postdec2	equ	0xFDD
 19283                           plusw2	equ	0xFDB
 19284                           fsr2h	equ	0xFDA
 19285                           fsr2l	equ	0xFD9
 19286                           status	equ	0xFD8
 19287                           
 19288 ;; *************** function _f_sync *****************
 19289 ;; Defined at:
 19290 ;;		line 1069 in file "bibliotecas/tff.c"
 19291 ;; Parameters:    Size  Location     Type
 19292 ;;  fp              2   66[BANK0 ] PTR struct _FIL
 19293 ;;		 -> fil(28), 
 19294 ;; Auto vars:     Size  Location     Type
 19295 ;;  tim             4   68[BANK0 ] unsigned long 
 19296 ;;  dir             2   73[BANK0 ] PTR unsigned char 
 19297 ;;		 -> NULL(0), fs(544), 
 19298 ;;  res             1   72[BANK0 ] enum E155
 19299 ;; Return value:  Size  Location     Type
 19300 ;;                  1    wreg      enum E155
 19301 ;; Registers used:
 19302 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19303 ;; Tracked objects:
 19304 ;;		On entry : 0/0
 19305 ;;		On exit  : 0/0
 19306 ;;		Unchanged: 0/0
 19307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19308 ;;      Params:         0       2       0       0       0       0       0       0       0
 19309 ;;      Locals:         0       7       0       0       0       0       0       0       0
 19310 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19311 ;;      Totals:         0       9       0       0       0       0       0       0       0
 19312 ;;Total ram usage:        9 bytes
 19313 ;; Hardware stack levels used:    1
 19314 ;; Hardware stack levels required when called:   10
 19315 ;; This function calls:
 19316 ;;		_get_fattime
 19317 ;;		_move_window
 19318 ;;		_sync
 19319 ;;		_validate
 19320 ;; This function is called by:
 19321 ;;		_f_close
 19322 ;; This function uses a non-reentrant model
 19323 ;;
 19324                           
 19325                           	psect	text66
 19326  003E7A                     __ptext66:
 19327                           	opt stack 0
 19328  003E7A                     _f_sync:
 19329                           	opt stack 16
 19330                           
 19331                           ;tff.c: 1073: FRESULT res;
 19332                           ;tff.c: 1074: DWORD tim;
 19333                           ;tff.c: 1075: BYTE *dir;
 19334                           ;tff.c: 1078: res = validate(fp->fs, fp->id);
 19335                           
 19336                           ; BSR set to: 0
 19337                           ;incstack = 0
 19338  003E7A  0100               	movlb	0	; () banked
 19339  003E7C  EE20 F004          	lfsr	2,4
 19340  003E80  51A2               	movf	f_sync@fp& (0+255),w,b
 19341  003E82  26D9               	addwf	fsr2l,f,c
 19342  003E84  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19343  003E86  22DA               	addwfc	fsr2h,f,c
 19344  003E88  CFDE F067          	movff	postinc2,validate@fs
 19345  003E8C  CFDD F068          	movff	postdec2,validate@fs+1
 19346  003E90  C0A2  FFD9         	movff	f_sync@fp,fsr2l
 19347  003E94  C0A3  FFDA         	movff	f_sync@fp+1,fsr2h
 19348  003E98  CFDE F069          	movff	postinc2,validate@id
 19349  003E9C  CFDD F06A          	movff	postdec2,validate@id+1
 19350  003EA0  EC38  F029         	call	_validate	;wreg free
 19351  003EA4  0100               	movlb	0	; () banked
 19352  003EA6  6FA8               	movwf	f_sync@res& (0+255),b
 19353                           
 19354                           ; BSR set to: 0
 19355                           ;tff.c: 1079: if (res == FR_OK) {
 19356  003EA8  51A8               	movf	f_sync@res& (0+255),w,b
 19357  003EAA  A4D8               	btfss	status,2,c
 19358  003EAC  D079               	goto	l1354
 19359                           
 19360                           ; BSR set to: 0
 19361                           ;tff.c: 1080: if (fp->flag & 0x20) {
 19362  003EAE  EE20 F002          	lfsr	2,2
 19363  003EB2  51A2               	movf	f_sync@fp& (0+255),w,b
 19364  003EB4  26D9               	addwf	fsr2l,f,c
 19365  003EB6  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19366  003EB8  22DA               	addwfc	fsr2h,f,c
 19367  003EBA  AADF               	btfss	indf2,5,c
 19368  003EBC  D071               	goto	l1354
 19369                           
 19370                           ; BSR set to: 0
 19371                           ;tff.c: 1082: if (!move_window(fp->dir_sect))
 19372  003EBE  EE20 F016          	lfsr	2,22
 19373  003EC2  51A2               	movf	f_sync@fp& (0+255),w,b
 19374  003EC4  26D9               	addwf	fsr2l,f,c
 19375  003EC6  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19376  003EC8  22DA               	addwfc	fsr2h,f,c
 19377  003ECA  CFDE F08B          	movff	postinc2,move_window@sector
 19378  003ECE  CFDE F08C          	movff	postinc2,move_window@sector+1
 19379  003ED2  CFDE F08D          	movff	postinc2,move_window@sector+2
 19380  003ED6  CFDE F08E          	movff	postinc2,move_window@sector+3
 19381  003EDA  ECFD  F01A         	call	_move_window	;wreg free
 19382  003EDE  0900               	iorlw	0
 19383  003EE0  A4D8               	btfss	status,2,c
 19384  003EE2  D002               	goto	l1355
 19385                           
 19386                           ;tff.c: 1083: return FR_RW_ERROR;
 19387  003EE4  0E08               	movlw	8
 19388  003EE6  0012               	return	
 19389  003EE8                     l1355:
 19390                           
 19391                           ;tff.c: 1084: dir = fp->dir_ptr;
 19392  003EE8  0100               	movlb	0	; () banked
 19393  003EEA  EE20 F01A          	lfsr	2,26
 19394  003EEE  51A2               	movf	f_sync@fp& (0+255),w,b
 19395  003EF0  26D9               	addwf	fsr2l,f,c
 19396  003EF2  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19397  003EF4  22DA               	addwfc	fsr2h,f,c
 19398  003EF6  CFDE F0A9          	movff	postinc2,f_sync@dir
 19399  003EFA  CFDD F0AA          	movff	postdec2,f_sync@dir+1
 19400                           
 19401                           ;tff.c: 1085: dir[11] |= 0x20;
 19402  003EFE  EE20 F00B          	lfsr	2,11
 19403  003F02  51A9               	movf	f_sync@dir& (0+255),w,b
 19404  003F04  26D9               	addwf	fsr2l,f,c
 19405  003F06  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 19406  003F08  22DA               	addwfc	fsr2h,f,c
 19407  003F0A  0E00               	movlw	0
 19408  003F0C  8ADB               	bsf	plusw2,5,c
 19409                           
 19410                           ; BSR set to: 0
 19411                           ;tff.c: 1086: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 19412  003F0E  EE20 F00A          	lfsr	2,10
 19413  003F12  51A2               	movf	f_sync@fp& (0+255),w,b
 19414  003F14  26D9               	addwf	fsr2l,f,c
 19415  003F16  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19416  003F18  22DA               	addwfc	fsr2h,f,c
 19417  003F1A  EE10 F01C          	lfsr	1,28
 19418  003F1E  51A9               	movf	f_sync@dir& (0+255),w,b
 19419  003F20  26E1               	addwf	fsr1l,f,c
 19420  003F22  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 19421  003F24  22E2               	addwfc	fsr1h,f,c
 19422  003F26  CFDE FFE6          	movff	postinc2,postinc1
 19423  003F2A  CFDE FFE6          	movff	postinc2,postinc1
 19424  003F2E  CFDE FFE6          	movff	postinc2,postinc1
 19425  003F32  CFDE FFE6          	movff	postinc2,postinc1
 19426                           
 19427                           ; BSR set to: 0
 19428                           ;tff.c: 1087: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 19429  003F36  EE20 F00E          	lfsr	2,14
 19430  003F3A  51A2               	movf	f_sync@fp& (0+255),w,b
 19431  003F3C  26D9               	addwf	fsr2l,f,c
 19432  003F3E  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19433  003F40  22DA               	addwfc	fsr2h,f,c
 19434  003F42  EE10 F01A          	lfsr	1,26
 19435  003F46  51A9               	movf	f_sync@dir& (0+255),w,b
 19436  003F48  26E1               	addwf	fsr1l,f,c
 19437  003F4A  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 19438  003F4C  22E2               	addwfc	fsr1h,f,c
 19439  003F4E  CFDE FFE6          	movff	postinc2,postinc1
 19440  003F52  CFDD FFE5          	movff	postdec2,postdec1
 19441                           
 19442                           ; BSR set to: 0
 19443                           ;tff.c: 1091: tim = get_fattime();
 19444  003F56  ECD2  F01F         	call	_get_fattime	;wreg free
 19445  003F5A  C060  F0A4         	movff	?_get_fattime,f_sync@tim
 19446  003F5E  C061  F0A5         	movff	?_get_fattime+1,f_sync@tim+1
 19447  003F62  C062  F0A6         	movff	?_get_fattime+2,f_sync@tim+2
 19448  003F66  C063  F0A7         	movff	?_get_fattime+3,f_sync@tim+3
 19449                           
 19450                           ;tff.c: 1092: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 19451  003F6A  0100               	movlb	0	; () banked
 19452  003F6C  EE20 F016          	lfsr	2,22
 19453  003F70  51A9               	movf	f_sync@dir& (0+255),w,b
 19454  003F72  26D9               	addwf	fsr2l,f,c
 19455  003F74  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 19456  003F76  22DA               	addwfc	fsr2h,f,c
 19457  003F78  C0A4  FFDE         	movff	f_sync@tim,postinc2
 19458  003F7C  C0A5  FFDE         	movff	f_sync@tim+1,postinc2
 19459  003F80  C0A6  FFDE         	movff	f_sync@tim+2,postinc2
 19460  003F84  C0A7  FFDE         	movff	f_sync@tim+3,postinc2
 19461                           
 19462                           ; BSR set to: 0
 19463                           ;tff.c: 1093: fp->flag &= (BYTE)~0x20;
 19464  003F88  EE20 F002          	lfsr	2,2
 19465  003F8C  51A2               	movf	f_sync@fp& (0+255),w,b
 19466  003F8E  26D9               	addwf	fsr2l,f,c
 19467  003F90  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19468  003F92  22DA               	addwfc	fsr2h,f,c
 19469  003F94  0EDF               	movlw	223
 19470  003F96  16DF               	andwf	indf2,f,c
 19471                           
 19472                           ; BSR set to: 0
 19473                           ;tff.c: 1094: res = sync();
 19474  003F98  EC13  F028         	call	_sync	;wreg free
 19475  003F9C  0100               	movlb	0	; () banked
 19476  003F9E  6FA8               	movwf	f_sync@res& (0+255),b
 19477  003FA0                     l1354:
 19478                           
 19479                           ; BSR set to: 0
 19480                           ;tff.c: 1095: }
 19481                           ;tff.c: 1096: }
 19482                           ;tff.c: 1097: return res;
 19483                           
 19484                           ; BSR set to: 0
 19485                           
 19486                           ; BSR set to: 0
 19487  003FA0  51A8               	movf	f_sync@res& (0+255),w,b
 19488  003FA2  0012               	return	
 19489  003FA4                     __end_of_f_sync:
 19490                           	opt stack 0
 19491                           tosu	equ	0xFFF
 19492                           tosh	equ	0xFFE
 19493                           tosl	equ	0xFFD
 19494                           pclath	equ	0xFFA
 19495                           tblptru	equ	0xFF8
 19496                           tblptrh	equ	0xFF7
 19497                           tblptrl	equ	0xFF6
 19498                           tablat	equ	0xFF5
 19499                           prodh	equ	0xFF4
 19500                           prodl	equ	0xFF3
 19501                           intcon	equ	0xFF2
 19502                           intcon2	equ	0xFF1
 19503                           intcon3	equ	0xFF0
 19504                           indf0	equ	0xFEF
 19505                           postinc0	equ	0xFEE
 19506                           fsr0h	equ	0xFEA
 19507                           fsr0l	equ	0xFE9
 19508                           wreg	equ	0xFE8
 19509                           indf1	equ	0xFE7
 19510                           postinc1	equ	0xFE6
 19511                           postdec1	equ	0xFE5
 19512                           plusw1	equ	0xFE3
 19513                           fsr1h	equ	0xFE2
 19514                           fsr1l	equ	0xFE1
 19515                           indf2	equ	0xFDF
 19516                           postinc2	equ	0xFDE
 19517                           postdec2	equ	0xFDD
 19518                           plusw2	equ	0xFDB
 19519                           fsr2h	equ	0xFDA
 19520                           fsr2l	equ	0xFD9
 19521                           status	equ	0xFD8
 19522                           
 19523 ;; *************** function _validate *****************
 19524 ;; Defined at:
 19525 ;;		line 766 in file "bibliotecas/tff.c"
 19526 ;; Parameters:    Size  Location     Type
 19527 ;;  fs              2    7[BANK0 ] PTR const struct _FATFS
 19528 ;;		 -> NULL(0), fs(544), 
 19529 ;;  id              2    9[BANK0 ] unsigned short 
 19530 ;; Auto vars:     Size  Location     Type
 19531 ;;		None
 19532 ;; Return value:  Size  Location     Type
 19533 ;;                  1    wreg      enum E155
 19534 ;; Registers used:
 19535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19536 ;; Tracked objects:
 19537 ;;		On entry : 0/0
 19538 ;;		On exit  : 0/0
 19539 ;;		Unchanged: 0/0
 19540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19541 ;;      Params:         0       4       0       0       0       0       0       0       0
 19542 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19543 ;;      Temps:          0       2       0       0       0       0       0       0       0
 19544 ;;      Totals:         0       6       0       0       0       0       0       0       0
 19545 ;;Total ram usage:        6 bytes
 19546 ;; Hardware stack levels used:    1
 19547 ;; Hardware stack levels required when called:    5
 19548 ;; This function calls:
 19549 ;;		_disk_status
 19550 ;; This function is called by:
 19551 ;;		_f_write
 19552 ;;		_f_sync
 19553 ;;		_f_lseek
 19554 ;;		_f_read
 19555 ;;		_f_readdir
 19556 ;; This function uses a non-reentrant model
 19557 ;;
 19558                           
 19559                           	psect	text67
 19560  005270                     __ptext67:
 19561                           	opt stack 0
 19562  005270                     _validate:
 19563                           	opt stack 18
 19564                           
 19565                           ;tff.c: 771: if (!fs || !fs->fs_type || fs->id != id)
 19566                           
 19567                           ;incstack = 0
 19568  005270  0100               	movlb	0	; () banked
 19569  005272  5167               	movf	validate@fs& (0+255),w,b
 19570  005274  1168               	iorwf	(validate@fs+1)& (0+255),w,b
 19571  005276  B4D8               	btfsc	status,2,c
 19572  005278  D014               	goto	u13190
 19573                           
 19574                           ; BSR set to: 0
 19575  00527A  EE20 F01C          	lfsr	2,28
 19576  00527E  5167               	movf	validate@fs& (0+255),w,b
 19577  005280  26D9               	addwf	fsr2l,f,c
 19578  005282  5168               	movf	(validate@fs+1)& (0+255),w,b
 19579  005284  22DA               	addwfc	fsr2h,f,c
 19580  005286  50DF               	movf	indf2,w,c
 19581  005288  B4D8               	btfsc	status,2,c
 19582  00528A  D00B               	goto	u13190
 19583                           
 19584                           ; BSR set to: 0
 19585  00528C  C067  FFD9         	movff	validate@fs,fsr2l
 19586  005290  C068  FFDA         	movff	validate@fs+1,fsr2h
 19587  005294  5169               	movf	validate@id& (0+255),w,b
 19588  005296  18DE               	xorwf	postinc2,w,c
 19589  005298  E104               	bnz	l10225
 19590  00529A  516A               	movf	(validate@id+1)& (0+255),w,b
 19591  00529C  18DE               	xorwf	postinc2,w,c
 19592  00529E  B4D8               	btfsc	status,2,c
 19593  0052A0  D002               	goto	l1258
 19594  0052A2                     u13190:
 19595  0052A2                     l10225:
 19596                           
 19597                           ; BSR set to: 0
 19598                           ;tff.c: 772: return FR_INVALID_OBJECT;
 19599  0052A2  0E0C               	movlw	12
 19600                           
 19601                           ; BSR set to: 0
 19602  0052A4  0012               	return	
 19603  0052A6                     l1258:
 19604                           
 19605                           ; BSR set to: 0
 19606                           ;tff.c: 773: if (disk_status(0) & 0x01)
 19607                           
 19608                           ; BSR set to: 0
 19609  0052A6  0E00               	movlw	0
 19610  0052A8  EC82  F029         	call	_disk_status
 19611  0052AC  0100               	movlb	0	; () banked
 19612  0052AE  6F6B               	movwf	??_validate& (0+255),b
 19613  0052B0  A16B               	btfss	??_validate& (0+255),0,b
 19614  0052B2  D002               	goto	l1262
 19615                           
 19616                           ; BSR set to: 0
 19617                           ;tff.c: 774: return FR_NOT_READY;
 19618  0052B4  0E01               	movlw	1
 19619                           
 19620                           ; BSR set to: 0
 19621  0052B6  0012               	return	
 19622  0052B8                     l1262:
 19623                           
 19624                           ; BSR set to: 0
 19625                           ;tff.c: 776: return FR_OK;
 19626                           
 19627                           ; BSR set to: 0
 19628  0052B8  0E00               	movlw	0
 19629  0052BA  0012               	return	
 19630  0052BC                     __end_of_validate:
 19631                           	opt stack 0
 19632                           tosu	equ	0xFFF
 19633                           tosh	equ	0xFFE
 19634                           tosl	equ	0xFFD
 19635                           pclath	equ	0xFFA
 19636                           tblptru	equ	0xFF8
 19637                           tblptrh	equ	0xFF7
 19638                           tblptrl	equ	0xFF6
 19639                           tablat	equ	0xFF5
 19640                           prodh	equ	0xFF4
 19641                           prodl	equ	0xFF3
 19642                           intcon	equ	0xFF2
 19643                           intcon2	equ	0xFF1
 19644                           intcon3	equ	0xFF0
 19645                           indf0	equ	0xFEF
 19646                           postinc0	equ	0xFEE
 19647                           fsr0h	equ	0xFEA
 19648                           fsr0l	equ	0xFE9
 19649                           wreg	equ	0xFE8
 19650                           indf1	equ	0xFE7
 19651                           postinc1	equ	0xFE6
 19652                           postdec1	equ	0xFE5
 19653                           plusw1	equ	0xFE3
 19654                           fsr1h	equ	0xFE2
 19655                           fsr1l	equ	0xFE1
 19656                           indf2	equ	0xFDF
 19657                           postinc2	equ	0xFDE
 19658                           postdec2	equ	0xFDD
 19659                           plusw2	equ	0xFDB
 19660                           fsr2h	equ	0xFDA
 19661                           fsr2l	equ	0xFD9
 19662                           status	equ	0xFD8
 19663                           
 19664 ;; *************** function _disk_status *****************
 19665 ;; Defined at:
 19666 ;;		line 27 in file "bibliotecas/diskio.c"
 19667 ;; Parameters:    Size  Location     Type
 19668 ;;  pdrv            1    wreg     unsigned char 
 19669 ;; Auto vars:     Size  Location     Type
 19670 ;;  pdrv            1    5[BANK0 ] unsigned char 
 19671 ;;  result          2    3[BANK0 ] int 
 19672 ;;  stat            1    6[BANK0 ] unsigned char 
 19673 ;; Return value:  Size  Location     Type
 19674 ;;                  1    wreg      unsigned char 
 19675 ;; Registers used:
 19676 ;;		wreg, status,2, status,0, cstack
 19677 ;; Tracked objects:
 19678 ;;		On entry : 0/0
 19679 ;;		On exit  : 0/0
 19680 ;;		Unchanged: 0/0
 19681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19682 ;;      Params:         0       0       0       0       0       0       0       0       0
 19683 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19684 ;;      Temps:          0       1       0       0       0       0       0       0       0
 19685 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19686 ;;Total ram usage:        5 bytes
 19687 ;; Hardware stack levels used:    1
 19688 ;; Hardware stack levels required when called:    4
 19689 ;; This function calls:
 19690 ;;		_sdc_disk_status
 19691 ;; This function is called by:
 19692 ;;		_auto_mount
 19693 ;;		_validate
 19694 ;; This function uses a non-reentrant model
 19695 ;;
 19696                           
 19697                           	psect	text68
 19698  005304                     __ptext68:
 19699                           	opt stack 0
 19700  005304                     _disk_status:
 19701                           	opt stack 18
 19702                           
 19703                           ; BSR set to: 0
 19704                           ;incstack = 0
 19705                           ;disk_status@pdrv stored from wreg
 19706  005304  0100               	movlb	0	; () banked
 19707  005306  6F65               	movwf	disk_status@pdrv& (0+255),b
 19708                           
 19709                           ;diskio.c: 31: DSTATUS stat;
 19710                           ;diskio.c: 32: int result;
 19711                           ;diskio.c: 34: switch (pdrv) {
 19712  005308  D014               	goto	l538
 19713  00530A                     
 19714                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 19715  00530A  0100               	movlb	0	; () banked
 19716  00530C  5165               	movf	disk_status@pdrv& (0+255),w,b
 19717  00530E  EC9E  F02B         	call	_sdc_disk_status
 19718  005312  0100               	movlb	0	; () banked
 19719  005314  6F66               	movwf	disk_status@stat& (0+255),b
 19720                           
 19721                           ; BSR set to: 0
 19722                           ;diskio.c: 39: return stat;
 19723  005316  5166               	movf	disk_status@stat& (0+255),w,b
 19724                           
 19725                           ; BSR set to: 0
 19726  005318  0012               	return	
 19727  00531A                     
 19728                           ; BSR set to: 0
 19729                           ;diskio.c: 42: result = sdc_disk_status(pdrv);
 19730                           
 19731                           ; BSR set to: 0
 19732  00531A  5165               	movf	disk_status@pdrv& (0+255),w,b
 19733  00531C  EC9E  F02B         	call	_sdc_disk_status
 19734  005320  0100               	movlb	0	; () banked
 19735  005322  6F62               	movwf	??_disk_status& (0+255),b
 19736  005324  5162               	movf	??_disk_status& (0+255),w,b
 19737  005326  6F63               	movwf	disk_status@result& (0+255),b
 19738  005328  6B64               	clrf	(disk_status@result+1)& (0+255),b
 19739                           
 19740                           ; BSR set to: 0
 19741                           ;diskio.c: 44: return stat;
 19742  00532A  5166               	movf	disk_status@stat& (0+255),w,b
 19743                           
 19744                           ; BSR set to: 0
 19745  00532C  0012               	return	
 19746  00532E                     
 19747                           ; BSR set to: 0
 19748                           ;diskio.c: 48: return stat;
 19749                           
 19750                           ; BSR set to: 0
 19751  00532E  5166               	movf	disk_status@stat& (0+255),w,b
 19752                           
 19753                           ; BSR set to: 0
 19754  005330  0012               	return	
 19755  005332                     l538:
 19756                           
 19757                           ; BSR set to: 0
 19758  005332  0100               	movlb	0	; () banked
 19759  005334  5165               	movf	disk_status@pdrv& (0+255),w,b
 19760                           
 19761                           ; Switch size 1, requested type "space"
 19762                           ; Number of cases is 3, Range of values is 0 to 2
 19763                           ; switch strategies available:
 19764                           ; Name         Instructions Cycles
 19765                           ; simple_byte           10     6 (average)
 19766                           ;	Chosen strategy is simple_byte
 19767  005336  0A00               	xorlw	0	; case 0
 19768  005338  B4D8               	btfsc	status,2,c
 19769  00533A  D7E7               	goto	l539
 19770  00533C  0A01               	xorlw	1	; case 1
 19771  00533E  B4D8               	btfsc	status,2,c
 19772  005340  D7EC               	goto	l541
 19773  005342  0A03               	xorlw	3	; case 2
 19774  005344  B4D8               	btfsc	status,2,c
 19775  005346  D7F3               	goto	l542
 19776                           
 19777                           ; BSR set to: 0
 19778                           ;diskio.c: 50: return 0x01;
 19779                           
 19780                           ; BSR set to: 0
 19781  005348  0E01               	movlw	1
 19782  00534A  0012               	return	
 19783  00534C                     __end_of_disk_status:
 19784                           	opt stack 0
 19785                           tosu	equ	0xFFF
 19786                           tosh	equ	0xFFE
 19787                           tosl	equ	0xFFD
 19788                           pclath	equ	0xFFA
 19789                           tblptru	equ	0xFF8
 19790                           tblptrh	equ	0xFF7
 19791                           tblptrl	equ	0xFF6
 19792                           tablat	equ	0xFF5
 19793                           prodh	equ	0xFF4
 19794                           prodl	equ	0xFF3
 19795                           intcon	equ	0xFF2
 19796                           intcon2	equ	0xFF1
 19797                           intcon3	equ	0xFF0
 19798                           indf0	equ	0xFEF
 19799                           postinc0	equ	0xFEE
 19800                           fsr0h	equ	0xFEA
 19801                           fsr0l	equ	0xFE9
 19802                           wreg	equ	0xFE8
 19803                           indf1	equ	0xFE7
 19804                           postinc1	equ	0xFE6
 19805                           postdec1	equ	0xFE5
 19806                           plusw1	equ	0xFE3
 19807                           fsr1h	equ	0xFE2
 19808                           fsr1l	equ	0xFE1
 19809                           indf2	equ	0xFDF
 19810                           postinc2	equ	0xFDE
 19811                           postdec2	equ	0xFDD
 19812                           plusw2	equ	0xFDB
 19813                           fsr2h	equ	0xFDA
 19814                           fsr2l	equ	0xFD9
 19815                           status	equ	0xFD8
 19816                           
 19817 ;; *************** function _sdc_disk_status *****************
 19818 ;; Defined at:
 19819 ;;		line 588 in file "bibliotecas/diskio.c"
 19820 ;; Parameters:    Size  Location     Type
 19821 ;;  pdrv            1    wreg     unsigned char 
 19822 ;; Auto vars:     Size  Location     Type
 19823 ;;  pdrv            1    1[BANK0 ] unsigned char 
 19824 ;;  stat            1    0[BANK0 ] unsigned char 
 19825 ;;  cont            1    0        unsigned char 
 19826 ;;  buff            1    0        unsigned char 
 19827 ;; Return value:  Size  Location     Type
 19828 ;;                  1    wreg      unsigned char 
 19829 ;; Registers used:
 19830 ;;		wreg, status,2
 19831 ;; Tracked objects:
 19832 ;;		On entry : 0/0
 19833 ;;		On exit  : 0/0
 19834 ;;		Unchanged: 0/0
 19835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19836 ;;      Params:         0       0       0       0       0       0       0       0       0
 19837 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19838 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19839 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19840 ;;Total ram usage:        2 bytes
 19841 ;; Hardware stack levels used:    1
 19842 ;; Hardware stack levels required when called:    3
 19843 ;; This function calls:
 19844 ;;		Nothing
 19845 ;; This function is called by:
 19846 ;;		_disk_status
 19847 ;; This function uses a non-reentrant model
 19848 ;;
 19849                           
 19850                           	psect	text69
 19851  00573C                     __ptext69:
 19852                           	opt stack 0
 19853  00573C                     _sdc_disk_status:
 19854                           	opt stack 18
 19855                           
 19856                           ; BSR set to: 0
 19857                           ;incstack = 0
 19858                           ;sdc_disk_status@pdrv stored from wreg
 19859  00573C  0100               	movlb	0	; () banked
 19860  00573E  6F61               	movwf	sdc_disk_status@pdrv& (0+255),b
 19861                           
 19862                           ;diskio.c: 590: DSTATUS stat = 0;
 19863  005740  0E00               	movlw	0
 19864  005742  0100               	movlb	0	; () banked
 19865  005744  6F60               	movwf	sdc_disk_status@stat& (0+255),b
 19866                           
 19867                           ; BSR set to: 0
 19868                           ;diskio.c: 591: unsigned char buff, cont;
 19869                           ;diskio.c: 593: if (pdrv != 0) return 0x01;
 19870  005746  5161               	movf	sdc_disk_status@pdrv& (0+255),w,b
 19871  005748  B4D8               	btfsc	status,2,c
 19872  00574A  D002               	goto	l664
 19873                           
 19874                           ; BSR set to: 0
 19875  00574C  0E01               	movlw	1
 19876                           
 19877                           ; BSR set to: 0
 19878  00574E  0012               	return	
 19879  005750                     l664:
 19880                           
 19881                           ; BSR set to: 0
 19882                           ;diskio.c: 595: return FR_OK;
 19883                           
 19884                           ; BSR set to: 0
 19885  005750  0E00               	movlw	0
 19886  005752  0012               	return	
 19887  005754                     __end_of_sdc_disk_status:
 19888                           	opt stack 0
 19889                           tosu	equ	0xFFF
 19890                           tosh	equ	0xFFE
 19891                           tosl	equ	0xFFD
 19892                           pclath	equ	0xFFA
 19893                           tblptru	equ	0xFF8
 19894                           tblptrh	equ	0xFF7
 19895                           tblptrl	equ	0xFF6
 19896                           tablat	equ	0xFF5
 19897                           prodh	equ	0xFF4
 19898                           prodl	equ	0xFF3
 19899                           intcon	equ	0xFF2
 19900                           intcon2	equ	0xFF1
 19901                           intcon3	equ	0xFF0
 19902                           indf0	equ	0xFEF
 19903                           postinc0	equ	0xFEE
 19904                           fsr0h	equ	0xFEA
 19905                           fsr0l	equ	0xFE9
 19906                           wreg	equ	0xFE8
 19907                           indf1	equ	0xFE7
 19908                           postinc1	equ	0xFE6
 19909                           postdec1	equ	0xFE5
 19910                           plusw1	equ	0xFE3
 19911                           fsr1h	equ	0xFE2
 19912                           fsr1l	equ	0xFE1
 19913                           indf2	equ	0xFDF
 19914                           postinc2	equ	0xFDE
 19915                           postdec2	equ	0xFDD
 19916                           plusw2	equ	0xFDB
 19917                           fsr2h	equ	0xFDA
 19918                           fsr2l	equ	0xFD9
 19919                           status	equ	0xFD8
 19920                           
 19921 ;; *************** function _sync *****************
 19922 ;; Defined at:
 19923 ;;		line 118 in file "bibliotecas/tff.c"
 19924 ;; Parameters:    Size  Location     Type
 19925 ;;		None
 19926 ;; Auto vars:     Size  Location     Type
 19927 ;;  fs              2   64[BANK0 ] PTR struct _FATFS
 19928 ;;		 -> NULL(0), fs(544), 
 19929 ;; Return value:  Size  Location     Type
 19930 ;;                  1    wreg      enum E155
 19931 ;; Registers used:
 19932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19933 ;; Tracked objects:
 19934 ;;		On entry : 0/0
 19935 ;;		On exit  : 0/0
 19936 ;;		Unchanged: 0/0
 19937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19938 ;;      Params:         0       0       0       0       0       0       0       0       0
 19939 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19940 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19941 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19942 ;;Total ram usage:        2 bytes
 19943 ;; Hardware stack levels used:    1
 19944 ;; Hardware stack levels required when called:    9
 19945 ;; This function calls:
 19946 ;;		_disk_ioctl
 19947 ;;		_move_window
 19948 ;; This function is called by:
 19949 ;;		_f_sync
 19950 ;; This function uses a non-reentrant model
 19951 ;;
 19952                           
 19953                           	psect	text70
 19954  005026                     __ptext70:
 19955                           	opt stack 0
 19956  005026                     _sync:
 19957                           	opt stack 16
 19958                           
 19959                           ;tff.c: 120: FATFS *fs = FatFs;
 19960                           
 19961                           ; BSR set to: 0
 19962                           ;incstack = 0
 19963  005026  C0FB  F0A0         	movff	_FatFs,sync@fs
 19964  00502A  C0FC  F0A1         	movff	_FatFs+1,sync@fs+1
 19965                           
 19966                           ;tff.c: 123: fs->winflag = 1;
 19967  00502E  0100               	movlb	0	; () banked
 19968  005030  EE20 F01F          	lfsr	2,31
 19969  005034  51A0               	movf	sync@fs& (0+255),w,b
 19970  005036  26D9               	addwf	fsr2l,f,c
 19971  005038  51A1               	movf	(sync@fs+1)& (0+255),w,b
 19972  00503A  22DA               	addwfc	fsr2h,f,c
 19973  00503C  0E01               	movlw	1
 19974  00503E  6EDF               	movwf	indf2,c
 19975                           
 19976                           ; BSR set to: 0
 19977                           ;tff.c: 124: if (!move_window(0)) return FR_RW_ERROR;
 19978  005040  0E00               	movlw	0
 19979  005042  6F8B               	movwf	move_window@sector& (0+255),b
 19980  005044  0E00               	movlw	0
 19981  005046  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 19982  005048  0E00               	movlw	0
 19983  00504A  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 19984  00504C  0E00               	movlw	0
 19985  00504E  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 19986  005050  ECFD  F01A         	call	_move_window	;wreg free
 19987  005054  0900               	iorlw	0
 19988  005056  A4D8               	btfss	status,2,c
 19989  005058  D002               	goto	l1037
 19990  00505A  0E08               	movlw	8
 19991  00505C  0012               	return	
 19992  00505E                     l1037:
 19993                           
 19994                           ;tff.c: 140: if (disk_ioctl(0, 0, (0)) != RES_OK)
 19995  00505E  0E00               	movlw	0
 19996  005060  0100               	movlb	0	; () banked
 19997  005062  6F60               	movwf	disk_ioctl@cmd& (0+255),b
 19998  005064  0E00               	movlw	0
 19999  005066  6F61               	movwf	disk_ioctl@buff& (0+255),b
 20000  005068  0E00               	movlw	0
 20001  00506A  6F62               	movwf	(disk_ioctl@buff+1)& (0+255),b
 20002  00506C  0E00               	movlw	0
 20003  00506E  EC10  F02B         	call	_disk_ioctl
 20004  005072  0900               	iorlw	0
 20005  005074  B4D8               	btfsc	status,2,c
 20006  005076  D002               	goto	l1039
 20007                           
 20008                           ;tff.c: 141: return FR_RW_ERROR;
 20009  005078  0E08               	movlw	8
 20010  00507A  0012               	return	
 20011  00507C                     l1039:
 20012                           
 20013                           ;tff.c: 142: return FR_OK;
 20014  00507C  0E00               	movlw	0
 20015  00507E  0012               	return	
 20016  005080                     __end_of_sync:
 20017                           	opt stack 0
 20018                           tosu	equ	0xFFF
 20019                           tosh	equ	0xFFE
 20020                           tosl	equ	0xFFD
 20021                           pclath	equ	0xFFA
 20022                           tblptru	equ	0xFF8
 20023                           tblptrh	equ	0xFF7
 20024                           tblptrl	equ	0xFF6
 20025                           tablat	equ	0xFF5
 20026                           prodh	equ	0xFF4
 20027                           prodl	equ	0xFF3
 20028                           intcon	equ	0xFF2
 20029                           intcon2	equ	0xFF1
 20030                           intcon3	equ	0xFF0
 20031                           indf0	equ	0xFEF
 20032                           postinc0	equ	0xFEE
 20033                           fsr0h	equ	0xFEA
 20034                           fsr0l	equ	0xFE9
 20035                           wreg	equ	0xFE8
 20036                           indf1	equ	0xFE7
 20037                           postinc1	equ	0xFE6
 20038                           postdec1	equ	0xFE5
 20039                           plusw1	equ	0xFE3
 20040                           fsr1h	equ	0xFE2
 20041                           fsr1l	equ	0xFE1
 20042                           indf2	equ	0xFDF
 20043                           postinc2	equ	0xFDE
 20044                           postdec2	equ	0xFDD
 20045                           plusw2	equ	0xFDB
 20046                           fsr2h	equ	0xFDA
 20047                           fsr2l	equ	0xFD9
 20048                           status	equ	0xFD8
 20049                           
 20050 ;; *************** function _move_window *****************
 20051 ;; Defined at:
 20052 ;;		line 76 in file "bibliotecas/tff.c"
 20053 ;; Parameters:    Size  Location     Type
 20054 ;;  sector          4   43[BANK0 ] unsigned long 
 20055 ;; Auto vars:     Size  Location     Type
 20056 ;;  n               1   57[BANK0 ] unsigned char 
 20057 ;;  wsect           4   58[BANK0 ] unsigned long 
 20058 ;;  fs              2   62[BANK0 ] PTR struct _FATFS
 20059 ;;		 -> NULL(0), fs(544), 
 20060 ;; Return value:  Size  Location     Type
 20061 ;;                  1    wreg      enum E105
 20062 ;; Registers used:
 20063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20064 ;; Tracked objects:
 20065 ;;		On entry : 0/0
 20066 ;;		On exit  : 0/0
 20067 ;;		Unchanged: 0/0
 20068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20069 ;;      Params:         0       4       0       0       0       0       0       0       0
 20070 ;;      Locals:         0       7       0       0       0       0       0       0       0
 20071 ;;      Temps:          0      10       0       0       0       0       0       0       0
 20072 ;;      Totals:         0      21       0       0       0       0       0       0       0
 20073 ;;Total ram usage:       21 bytes
 20074 ;; Hardware stack levels used:    1
 20075 ;; Hardware stack levels required when called:    8
 20076 ;; This function calls:
 20077 ;;		_disk_read
 20078 ;;		_disk_write
 20079 ;; This function is called by:
 20080 ;;		_sync
 20081 ;;		_get_cluster
 20082 ;;		_put_cluster
 20083 ;;		_trace_path
 20084 ;;		_reserve_direntry
 20085 ;;		_f_open
 20086 ;;		_f_write
 20087 ;;		_f_sync
 20088 ;;		_f_read
 20089 ;;		_f_readdir
 20090 ;; This function uses a non-reentrant model
 20091 ;;
 20092                           
 20093                           	psect	text71
 20094  0035FA                     __ptext71:
 20095                           	opt stack 0
 20096  0035FA                     _move_window:
 20097                           	opt stack 15
 20098                           
 20099                           ;tff.c: 80: DWORD wsect;
 20100                           ;tff.c: 81: FATFS *fs = FatFs;
 20101                           
 20102                           ;incstack = 0
 20103  0035FA  C0FB  F09E         	movff	_FatFs,move_window@fs
 20104  0035FE  C0FC  F09F         	movff	_FatFs+1,move_window@fs+1
 20105                           
 20106                           ;tff.c: 84: wsect = fs->winsect;
 20107  003602  0100               	movlb	0	; () banked
 20108  003604  EE20 F004          	lfsr	2,4
 20109  003608  519E               	movf	move_window@fs& (0+255),w,b
 20110  00360A  26D9               	addwf	fsr2l,f,c
 20111  00360C  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20112  00360E  22DA               	addwfc	fsr2h,f,c
 20113  003610  CFDE F09A          	movff	postinc2,move_window@wsect
 20114  003614  CFDE F09B          	movff	postinc2,move_window@wsect+1
 20115  003618  CFDE F09C          	movff	postinc2,move_window@wsect+2
 20116  00361C  CFDE F09D          	movff	postinc2,move_window@wsect+3
 20117                           
 20118                           ; BSR set to: 0
 20119                           ;tff.c: 85: if (wsect != sector) {
 20120  003620  518B               	movf	move_window@sector& (0+255),w,b
 20121  003622  199A               	xorwf	move_window@wsect& (0+255),w,b
 20122  003624  E10A               	bnz	u12670
 20123  003626  518C               	movf	(move_window@sector+1)& (0+255),w,b
 20124  003628  199B               	xorwf	(move_window@wsect+1)& (0+255),w,b
 20125  00362A  E107               	bnz	u12670
 20126  00362C  518D               	movf	(move_window@sector+2)& (0+255),w,b
 20127  00362E  199C               	xorwf	(move_window@wsect+2)& (0+255),w,b
 20128  003630  E104               	bnz	u12670
 20129  003632  518E               	movf	(move_window@sector+3)& (0+255),w,b
 20130  003634  199D               	xorwf	(move_window@wsect+3)& (0+255),w,b
 20131  003636  B4D8               	btfsc	status,2,c
 20132  003638  D0B9               	goto	l1033
 20133  00363A                     u12670:
 20134                           
 20135                           ; BSR set to: 0
 20136                           ;tff.c: 87: BYTE n;
 20137                           ;tff.c: 88: if (fs->winflag) {
 20138  00363A  EE20 F01F          	lfsr	2,31
 20139  00363E  519E               	movf	move_window@fs& (0+255),w,b
 20140  003640  26D9               	addwf	fsr2l,f,c
 20141  003642  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20142  003644  22DA               	addwfc	fsr2h,f,c
 20143  003646  50DF               	movf	indf2,w,c
 20144  003648  B4D8               	btfsc	status,2,c
 20145  00364A  D083               	goto	u12720
 20146                           
 20147                           ; BSR set to: 0
 20148                           ;tff.c: 89: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 20149  00364C  0E20               	movlw	32
 20150  00364E  259E               	addwf	move_window@fs& (0+255),w,b
 20151  003650  6F7F               	movwf	disk_write@buff& (0+255),b
 20152  003652  0E00               	movlw	0
 20153  003654  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 20154  003656  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 20155  003658  C09A  F081         	movff	move_window@wsect,disk_write@sector
 20156  00365C  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 20157  003660  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 20158  003664  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 20159  003668  0E01               	movlw	1
 20160  00366A  6F85               	movwf	disk_write@count& (0+255),b
 20161  00366C  0E00               	movlw	0
 20162  00366E  ECB9  F025         	call	_disk_write
 20163  003672  0900               	iorlw	0
 20164  003674  B4D8               	btfsc	status,2,c
 20165  003676  D002               	goto	l1028
 20166                           
 20167                           ;tff.c: 90: return FALSE;
 20168  003678  0E00               	movlw	0
 20169  00367A  0012               	return	
 20170  00367C                     l1028:
 20171                           
 20172                           ;tff.c: 91: fs->winflag = 0;
 20173  00367C  0100               	movlb	0	; () banked
 20174  00367E  EE20 F01F          	lfsr	2,31
 20175  003682  519E               	movf	move_window@fs& (0+255),w,b
 20176  003684  26D9               	addwf	fsr2l,f,c
 20177  003686  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20178  003688  22DA               	addwfc	fsr2h,f,c
 20179  00368A  0E00               	movlw	0
 20180  00368C  6EDF               	movwf	indf2,c
 20181                           
 20182                           ;tff.c: 92: if (wsect < (fs->fatbase + fs->sects_fat)) {
 20183  00368E  EE20 F008          	lfsr	2,8
 20184  003692  519E               	movf	move_window@fs& (0+255),w,b
 20185  003694  26D9               	addwf	fsr2l,f,c
 20186  003696  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20187  003698  22DA               	addwfc	fsr2h,f,c
 20188  00369A  CFDE F08F          	movff	postinc2,??_move_window
 20189  00369E  CFDE F090          	movff	postinc2,??_move_window+1
 20190  0036A2  CFDE F091          	movff	postinc2,??_move_window+2
 20191  0036A6  CFDE F092          	movff	postinc2,??_move_window+3
 20192  0036AA  EE20 F014          	lfsr	2,20
 20193  0036AE  519E               	movf	move_window@fs& (0+255),w,b
 20194  0036B0  26D9               	addwf	fsr2l,f,c
 20195  0036B2  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20196  0036B4  22DA               	addwfc	fsr2h,f,c
 20197  0036B6  CFDE F093          	movff	postinc2,??_move_window+4
 20198  0036BA  CFDD F094          	movff	postdec2,??_move_window+5
 20199  0036BE  5193               	movf	(??_move_window+4)& (0+255),w,b
 20200  0036C0  258F               	addwf	??_move_window& (0+255),w,b
 20201  0036C2  6F95               	movwf	(??_move_window+6)& (0+255),b
 20202  0036C4  5194               	movf	(??_move_window+5)& (0+255),w,b
 20203  0036C6  2190               	addwfc	(??_move_window+1)& (0+255),w,b
 20204  0036C8  6F96               	movwf	(??_move_window+7)& (0+255),b
 20205  0036CA  0E00               	movlw	0
 20206  0036CC  2191               	addwfc	(??_move_window+2)& (0+255),w,b
 20207  0036CE  6F97               	movwf	(??_move_window+8)& (0+255),b
 20208  0036D0  0E00               	movlw	0
 20209  0036D2  2192               	addwfc	(??_move_window+3)& (0+255),w,b
 20210  0036D4  6F98               	movwf	(??_move_window+9)& (0+255),b
 20211  0036D6  5195               	movf	(??_move_window+6)& (0+255),w,b
 20212  0036D8  5D9A               	subwf	move_window@wsect& (0+255),w,b
 20213  0036DA  5196               	movf	(??_move_window+7)& (0+255),w,b
 20214  0036DC  599B               	subwfb	(move_window@wsect+1)& (0+255),w,b
 20215  0036DE  5197               	movf	(??_move_window+8)& (0+255),w,b
 20216  0036E0  599C               	subwfb	(move_window@wsect+2)& (0+255),w,b
 20217  0036E2  5198               	movf	(??_move_window+9)& (0+255),w,b
 20218  0036E4  599D               	subwfb	(move_window@wsect+3)& (0+255),w,b
 20219  0036E6  B0D8               	btfsc	status,0,c
 20220  0036E8  D034               	goto	u12720
 20221                           
 20222                           ; BSR set to: 0
 20223                           ;tff.c: 93: for (n = fs->n_fats; n >= 2; n--) {
 20224  0036EA  EE20 F01E          	lfsr	2,30
 20225  0036EE  519E               	movf	move_window@fs& (0+255),w,b
 20226  0036F0  26D9               	addwf	fsr2l,f,c
 20227  0036F2  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20228  0036F4  22DA               	addwfc	fsr2h,f,c
 20229  0036F6  50DF               	movf	indf2,w,c
 20230  0036F8  6F99               	movwf	move_window@n& (0+255),b
 20231  0036FA                     l9887:
 20232                           
 20233                           ; BSR set to: 0
 20234  0036FA  0E02               	movlw	2
 20235  0036FC  6199               	cpfslt	move_window@n& (0+255),b
 20236  0036FE  D001               	goto	l1031
 20237  003700  D028               	goto	u12720
 20238  003702                     l1031:
 20239                           
 20240                           ; BSR set to: 0
 20241                           ;tff.c: 94: wsect += fs->sects_fat;
 20242                           
 20243                           ; BSR set to: 0
 20244  003702  EE20 F014          	lfsr	2,20
 20245  003706  519E               	movf	move_window@fs& (0+255),w,b
 20246  003708  26D9               	addwf	fsr2l,f,c
 20247  00370A  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20248  00370C  22DA               	addwfc	fsr2h,f,c
 20249  00370E  CFDE F08F          	movff	postinc2,??_move_window
 20250  003712  CFDD F090          	movff	postdec2,??_move_window+1
 20251  003716  518F               	movf	??_move_window& (0+255),w,b
 20252  003718  279A               	addwf	move_window@wsect& (0+255),f,b
 20253  00371A  5190               	movf	(??_move_window+1)& (0+255),w,b
 20254  00371C  239B               	addwfc	(move_window@wsect+1)& (0+255),f,b
 20255  00371E  0E00               	movlw	0
 20256  003720  239C               	addwfc	(move_window@wsect+2)& (0+255),f,b
 20257  003722  0E00               	movlw	0
 20258  003724  239D               	addwfc	(move_window@wsect+3)& (0+255),f,b
 20259                           
 20260                           ; BSR set to: 0
 20261                           ;tff.c: 95: disk_write(0, fs->win, wsect, 1);
 20262  003726  0E20               	movlw	32
 20263  003728  259E               	addwf	move_window@fs& (0+255),w,b
 20264  00372A  6F7F               	movwf	disk_write@buff& (0+255),b
 20265  00372C  0E00               	movlw	0
 20266  00372E  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 20267  003730  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 20268  003732  C09A  F081         	movff	move_window@wsect,disk_write@sector
 20269  003736  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 20270  00373A  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 20271  00373E  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 20272  003742  0E01               	movlw	1
 20273  003744  6F85               	movwf	disk_write@count& (0+255),b
 20274  003746  0E00               	movlw	0
 20275  003748  ECB9  F025         	call	_disk_write
 20276  00374C  0100               	movlb	0	; () banked
 20277  00374E  0799               	decf	move_window@n& (0+255),f,b
 20278  003750  D7D4               	goto	l9887
 20279  003752                     u12720:
 20280                           
 20281                           ; BSR set to: 0
 20282                           ;tff.c: 96: }
 20283                           ;tff.c: 97: }
 20284                           ;tff.c: 98: }
 20285                           ;tff.c: 100: if (sector) {
 20286                           
 20287                           ; BSR set to: 0
 20288                           
 20289                           ; BSR set to: 0
 20290                           
 20291                           ; BSR set to: 0
 20292  003752  518B               	movf	move_window@sector& (0+255),w,b
 20293  003754  118C               	iorwf	(move_window@sector+1)& (0+255),w,b
 20294  003756  118D               	iorwf	(move_window@sector+2)& (0+255),w,b
 20295  003758  118E               	iorwf	(move_window@sector+3)& (0+255),w,b
 20296  00375A  B4D8               	btfsc	status,2,c
 20297  00375C  D027               	goto	l1033
 20298                           
 20299                           ; BSR set to: 0
 20300                           ;tff.c: 101: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 20301  00375E  0E20               	movlw	32
 20302  003760  259E               	addwf	move_window@fs& (0+255),w,b
 20303  003762  6F7F               	movwf	disk_read@buff& (0+255),b
 20304  003764  0E00               	movlw	0
 20305  003766  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 20306  003768  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 20307  00376A  C08B  F081         	movff	move_window@sector,disk_read@sector
 20308  00376E  C08C  F082         	movff	move_window@sector+1,disk_read@sector+1
 20309  003772  C08D  F083         	movff	move_window@sector+2,disk_read@sector+2
 20310  003776  C08E  F084         	movff	move_window@sector+3,disk_read@sector+3
 20311  00377A  0E01               	movlw	1
 20312  00377C  6F85               	movwf	disk_read@count& (0+255),b
 20313  00377E  0E00               	movlw	0
 20314  003780  ECE5  F024         	call	_disk_read
 20315  003784  0900               	iorlw	0
 20316  003786  B4D8               	btfsc	status,2,c
 20317  003788  D002               	goto	l1034
 20318                           
 20319                           ;tff.c: 102: return FALSE;
 20320  00378A  0E00               	movlw	0
 20321  00378C  0012               	return	
 20322  00378E                     l1034:
 20323                           
 20324                           ;tff.c: 103: fs->winsect = sector;
 20325  00378E  0100               	movlb	0	; () banked
 20326  003790  EE20 F004          	lfsr	2,4
 20327  003794  519E               	movf	move_window@fs& (0+255),w,b
 20328  003796  26D9               	addwf	fsr2l,f,c
 20329  003798  519F               	movf	(move_window@fs+1)& (0+255),w,b
 20330  00379A  22DA               	addwfc	fsr2h,f,c
 20331  00379C  C08B  FFDE         	movff	move_window@sector,postinc2
 20332  0037A0  C08C  FFDE         	movff	move_window@sector+1,postinc2
 20333  0037A4  C08D  FFDE         	movff	move_window@sector+2,postinc2
 20334  0037A8  C08E  FFDE         	movff	move_window@sector+3,postinc2
 20335  0037AC                     l1033:
 20336                           
 20337                           ; BSR set to: 0
 20338                           ;tff.c: 104: }
 20339                           ;tff.c: 105: }
 20340                           ;tff.c: 106: return TRUE;
 20341                           
 20342                           ; BSR set to: 0
 20343                           
 20344                           ; BSR set to: 0
 20345  0037AC  0E01               	movlw	1
 20346  0037AE  0012               	return	
 20347  0037B0                     __end_of_move_window:
 20348                           	opt stack 0
 20349                           tosu	equ	0xFFF
 20350                           tosh	equ	0xFFE
 20351                           tosl	equ	0xFFD
 20352                           pclath	equ	0xFFA
 20353                           tblptru	equ	0xFF8
 20354                           tblptrh	equ	0xFF7
 20355                           tblptrl	equ	0xFF6
 20356                           tablat	equ	0xFF5
 20357                           prodh	equ	0xFF4
 20358                           prodl	equ	0xFF3
 20359                           intcon	equ	0xFF2
 20360                           intcon2	equ	0xFF1
 20361                           intcon3	equ	0xFF0
 20362                           indf0	equ	0xFEF
 20363                           postinc0	equ	0xFEE
 20364                           fsr0h	equ	0xFEA
 20365                           fsr0l	equ	0xFE9
 20366                           wreg	equ	0xFE8
 20367                           indf1	equ	0xFE7
 20368                           postinc1	equ	0xFE6
 20369                           postdec1	equ	0xFE5
 20370                           plusw1	equ	0xFE3
 20371                           fsr1h	equ	0xFE2
 20372                           fsr1l	equ	0xFE1
 20373                           indf2	equ	0xFDF
 20374                           postinc2	equ	0xFDE
 20375                           postdec2	equ	0xFDD
 20376                           plusw2	equ	0xFDB
 20377                           fsr2h	equ	0xFDA
 20378                           fsr2l	equ	0xFD9
 20379                           status	equ	0xFD8
 20380                           
 20381 ;; *************** function _disk_write *****************
 20382 ;; Defined at:
 20383 ;;		line 150 in file "bibliotecas/diskio.c"
 20384 ;; Parameters:    Size  Location     Type
 20385 ;;  pdrv            1    wreg     unsigned char 
 20386 ;;  buff            2   31[BANK0 ] PTR const unsigned char 
 20387 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 20388 ;;  sector          4   33[BANK0 ] unsigned long 
 20389 ;;  count           1   37[BANK0 ] unsigned char 
 20390 ;; Auto vars:     Size  Location     Type
 20391 ;;  pdrv            1   39[BANK0 ] unsigned char 
 20392 ;;  result          2   40[BANK0 ] int 
 20393 ;;  res             1   42[BANK0 ] enum E25
 20394 ;; Return value:  Size  Location     Type
 20395 ;;                  1    wreg      enum E25
 20396 ;; Registers used:
 20397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20398 ;; Tracked objects:
 20399 ;;		On entry : 0/0
 20400 ;;		On exit  : 0/0
 20401 ;;		Unchanged: 0/0
 20402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20403 ;;      Params:         0       7       0       0       0       0       0       0       0
 20404 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20405 ;;      Temps:          0       1       0       0       0       0       0       0       0
 20406 ;;      Totals:         0      12       0       0       0       0       0       0       0
 20407 ;;Total ram usage:       12 bytes
 20408 ;; Hardware stack levels used:    1
 20409 ;; Hardware stack levels required when called:    7
 20410 ;; This function calls:
 20411 ;;		_sdc_disk_write
 20412 ;; This function is called by:
 20413 ;;		_move_window
 20414 ;;		_reserve_direntry
 20415 ;;		_f_write
 20416 ;; This function uses a non-reentrant model
 20417 ;;
 20418                           
 20419                           	psect	text72
 20420  004B72                     __ptext72:
 20421                           	opt stack 0
 20422  004B72                     _disk_write:
 20423                           	opt stack 15
 20424                           
 20425                           ;incstack = 0
 20426                           ;disk_write@pdrv stored from wreg
 20427  004B72  0100               	movlb	0	; () banked
 20428  004B74  6F87               	movwf	disk_write@pdrv& (0+255),b
 20429                           
 20430                           ;diskio.c: 157: DRESULT res;
 20431                           ;diskio.c: 158: int result;
 20432                           ;diskio.c: 160: switch (pdrv) {
 20433  004B76  D034               	goto	l562
 20434  004B78                     
 20435                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 20436  004B78  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 20437  004B7C  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 20438  004B80  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 20439  004B84  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 20440  004B88  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 20441  004B8C  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 20442  004B90  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 20443  004B94  EC38  F019         	call	_sdc_disk_write	;wreg free
 20444  004B98  0100               	movlb	0	; () banked
 20445  004B9A  6F86               	movwf	??_disk_write& (0+255),b
 20446  004B9C  5186               	movf	??_disk_write& (0+255),w,b
 20447  004B9E  6F88               	movwf	disk_write@result& (0+255),b
 20448  004BA0  6B89               	clrf	(disk_write@result+1)& (0+255),b
 20449                           
 20450                           ; BSR set to: 0
 20451                           ;diskio.c: 165: res = result;
 20452  004BA2  C088  F08A         	movff	disk_write@result,disk_write@res
 20453                           
 20454                           ; BSR set to: 0
 20455                           ;diskio.c: 168: return res;
 20456  004BA6  518A               	movf	disk_write@res& (0+255),w,b
 20457                           
 20458                           ; BSR set to: 0
 20459  004BA8  0012               	return	
 20460  004BAA                     
 20461                           ; BSR set to: 0
 20462                           ;diskio.c: 173: result = sdc_disk_write(buff, sector, count);
 20463                           
 20464                           ; BSR set to: 0
 20465  004BAA  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 20466  004BAE  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 20467  004BB2  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 20468  004BB6  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 20469  004BBA  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 20470  004BBE  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 20471  004BC2  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 20472  004BC6  EC38  F019         	call	_sdc_disk_write	;wreg free
 20473  004BCA  0100               	movlb	0	; () banked
 20474  004BCC  6F86               	movwf	??_disk_write& (0+255),b
 20475  004BCE  5186               	movf	??_disk_write& (0+255),w,b
 20476  004BD0  6F88               	movwf	disk_write@result& (0+255),b
 20477  004BD2  6B89               	clrf	(disk_write@result+1)& (0+255),b
 20478                           
 20479                           ; BSR set to: 0
 20480                           ;diskio.c: 174: res = result;
 20481  004BD4  C088  F08A         	movff	disk_write@result,disk_write@res
 20482                           
 20483                           ; BSR set to: 0
 20484                           ;diskio.c: 177: return res;
 20485  004BD8  518A               	movf	disk_write@res& (0+255),w,b
 20486                           
 20487                           ; BSR set to: 0
 20488  004BDA  0012               	return	
 20489  004BDC                     
 20490                           ; BSR set to: 0
 20491                           ;diskio.c: 186: return res;
 20492                           
 20493                           ; BSR set to: 0
 20494  004BDC  518A               	movf	disk_write@res& (0+255),w,b
 20495                           
 20496                           ; BSR set to: 0
 20497  004BDE  0012               	return	
 20498  004BE0                     l562:
 20499                           
 20500                           ; BSR set to: 0
 20501  004BE0  0100               	movlb	0	; () banked
 20502  004BE2  5187               	movf	disk_write@pdrv& (0+255),w,b
 20503                           
 20504                           ; Switch size 1, requested type "space"
 20505                           ; Number of cases is 3, Range of values is 0 to 2
 20506                           ; switch strategies available:
 20507                           ; Name         Instructions Cycles
 20508                           ; simple_byte           10     6 (average)
 20509                           ;	Chosen strategy is simple_byte
 20510  004BE4  0A00               	xorlw	0	; case 0
 20511  004BE6  B4D8               	btfsc	status,2,c
 20512  004BE8  D7C7               	goto	l563
 20513  004BEA  0A01               	xorlw	1	; case 1
 20514  004BEC  B4D8               	btfsc	status,2,c
 20515  004BEE  D7DD               	goto	l565
 20516  004BF0  0A03               	xorlw	3	; case 2
 20517  004BF2  B4D8               	btfsc	status,2,c
 20518  004BF4  D7F3               	goto	l566
 20519                           
 20520                           ; BSR set to: 0
 20521                           ;diskio.c: 189: return RES_PARERR;
 20522                           
 20523                           ; BSR set to: 0
 20524  004BF6  0E04               	movlw	4
 20525  004BF8  0012               	return	
 20526  004BFA                     __end_of_disk_write:
 20527                           	opt stack 0
 20528                           tosu	equ	0xFFF
 20529                           tosh	equ	0xFFE
 20530                           tosl	equ	0xFFD
 20531                           pclath	equ	0xFFA
 20532                           tblptru	equ	0xFF8
 20533                           tblptrh	equ	0xFF7
 20534                           tblptrl	equ	0xFF6
 20535                           tablat	equ	0xFF5
 20536                           prodh	equ	0xFF4
 20537                           prodl	equ	0xFF3
 20538                           intcon	equ	0xFF2
 20539                           intcon2	equ	0xFF1
 20540                           intcon3	equ	0xFF0
 20541                           indf0	equ	0xFEF
 20542                           postinc0	equ	0xFEE
 20543                           fsr0h	equ	0xFEA
 20544                           fsr0l	equ	0xFE9
 20545                           wreg	equ	0xFE8
 20546                           indf1	equ	0xFE7
 20547                           postinc1	equ	0xFE6
 20548                           postdec1	equ	0xFE5
 20549                           plusw1	equ	0xFE3
 20550                           fsr1h	equ	0xFE2
 20551                           fsr1l	equ	0xFE1
 20552                           indf2	equ	0xFDF
 20553                           postinc2	equ	0xFDE
 20554                           postdec2	equ	0xFDD
 20555                           plusw2	equ	0xFDB
 20556                           fsr2h	equ	0xFDA
 20557                           fsr2l	equ	0xFD9
 20558                           status	equ	0xFD8
 20559                           
 20560 ;; *************** function _sdc_disk_write *****************
 20561 ;; Defined at:
 20562 ;;		line 509 in file "bibliotecas/diskio.c"
 20563 ;; Parameters:    Size  Location     Type
 20564 ;;  p_buff          2   12[BANK0 ] PTR const unsigned char 
 20565 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 20566 ;;  sector          4   14[BANK0 ] unsigned long 
 20567 ;;  count           1   18[BANK0 ] unsigned char 
 20568 ;; Auto vars:     Size  Location     Type
 20569 ;;  j               2   28[BANK0 ] int 
 20570 ;;  count1          2   25[BANK0 ] int 
 20571 ;;  i               2   23[BANK0 ] int 
 20572 ;;  buff            1   30[BANK0 ] unsigned char 
 20573 ;;  res             1   27[BANK0 ] enum E25
 20574 ;; Return value:  Size  Location     Type
 20575 ;;                  1    wreg      enum E25
 20576 ;; Registers used:
 20577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20578 ;; Tracked objects:
 20579 ;;		On entry : 0/0
 20580 ;;		On exit  : 0/0
 20581 ;;		Unchanged: 0/0
 20582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20583 ;;      Params:         0       7       0       0       0       0       0       0       0
 20584 ;;      Locals:         0       8       0       0       0       0       0       0       0
 20585 ;;      Temps:          0       4       0       0       0       0       0       0       0
 20586 ;;      Totals:         0      19       0       0       0       0       0       0       0
 20587 ;;Total ram usage:       19 bytes
 20588 ;; Hardware stack levels used:    1
 20589 ;; Hardware stack levels required when called:    6
 20590 ;; This function calls:
 20591 ;;		_command
 20592 ;;		_dummy_clocks
 20593 ;;		_escreve_SPI
 20594 ;;		_leitura_SPI
 20595 ;;		_proceed
 20596 ;;		_response
 20597 ;; This function is called by:
 20598 ;;		_disk_write
 20599 ;; This function uses a non-reentrant model
 20600 ;;
 20601                           
 20602                           	psect	text73
 20603  003270                     __ptext73:
 20604                           	opt stack 0
 20605  003270                     _sdc_disk_write:
 20606                           	opt stack 15
 20607                           
 20608                           ;diskio.c: 511: DRESULT res;
 20609                           ;diskio.c: 512: unsigned char buff;
 20610                           ;diskio.c: 513: int i=0,j, count1 = 0;
 20611                           
 20612                           ; BSR set to: 0
 20613                           ;incstack = 0
 20614  003270  0E00               	movlw	0
 20615  003272  0100               	movlb	0	; () banked
 20616  003274  6F78               	movwf	(sdc_disk_write@i+1)& (0+255),b
 20617  003276  0E00               	movlw	0
 20618  003278  6F77               	movwf	sdc_disk_write@i& (0+255),b
 20619  00327A  0E00               	movlw	0
 20620  00327C  6F7A               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 20621  00327E  0E00               	movlw	0
 20622  003280  6F79               	movwf	sdc_disk_write@count1& (0+255),b
 20623                           
 20624                           ; BSR set to: 0
 20625                           ;diskio.c: 515: if(count>1)
 20626  003282  0E01               	movlw	1
 20627  003284  6572               	cpfsgt	sdc_disk_write@count& (0+255),b
 20628  003286  D06C               	goto	l647
 20629                           
 20630                           ; BSR set to: 0
 20631                           ;diskio.c: 516: {
 20632                           ;diskio.c: 517: LATCbits.LATC7 = 0;
 20633  003288  9E8B               	bcf	3979,7,c	;volatile
 20634                           
 20635                           ;diskio.c: 518: LATBbits.LATB4 = 0;
 20636  00328A  988A               	bcf	3978,4,c	;volatile
 20637                           
 20638                           ; BSR set to: 0
 20639                           ;diskio.c: 519: dummy_clocks(10);
 20640  00328C  0E0A               	movlw	10
 20641  00328E  EC0E  F02A         	call	_dummy_clocks
 20642                           
 20643                           ;diskio.c: 520: command(0X57, count, 0XFF);
 20644  003292  0100               	movlb	0	; () banked
 20645  003294  5172               	movf	sdc_disk_write@count& (0+255),w,b
 20646  003296  6F65               	movwf	command@arg& (0+255),b
 20647  003298  6B66               	clrf	(command@arg+1)& (0+255),b
 20648  00329A  6B67               	clrf	(command@arg+2)& (0+255),b
 20649  00329C  6B68               	clrf	(command@arg+3)& (0+255),b
 20650  00329E  0EFF               	movlw	255
 20651  0032A0  6F69               	movwf	command@CRC& (0+255),b
 20652  0032A2  0E57               	movlw	87
 20653  0032A4  ECDF  F027         	call	_command
 20654                           
 20655                           ;diskio.c: 521: proceed();
 20656  0032A8  ECFD  F02B         	call	_proceed	;wreg free
 20657  0032AC                     
 20658                           ;diskio.c: 523: buff = response();
 20659  0032AC  ECE3  F02B         	call	_response	;wreg free
 20660  0032B0  0100               	movlb	0	; () banked
 20661  0032B2  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 20662                           
 20663                           ; BSR set to: 0
 20664                           ;diskio.c: 524: }while(buff!=0X00);
 20665  0032B4  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 20666  0032B6  A4D8               	btfss	status,2,c
 20667  0032B8  D7F9               	goto	l648
 20668                           
 20669                           ; BSR set to: 0
 20670                           ;diskio.c: 526: dummy_clocks(10);
 20671                           
 20672                           ; BSR set to: 0
 20673  0032BA  0E0A               	movlw	10
 20674  0032BC  EC0E  F02A         	call	_dummy_clocks
 20675                           
 20676                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 20677  0032C0  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 20678  0032C4  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 20679  0032C8  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 20680  0032CC  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 20681  0032D0  0E09               	movlw	9
 20682  0032D2                     u12385:
 20683  0032D2  90D8               	bcf	status,0,c
 20684  0032D4  0100               	movlb	0	; () banked
 20685  0032D6  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 20686  0032D8  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 20687  0032DA  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 20688  0032DC  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 20689  0032DE  2EE8               	decfsz	wreg,f,c
 20690  0032E0  D7F8               	goto	u12385
 20691  0032E2  C073  F065         	movff	??_sdc_disk_write,command@arg
 20692  0032E6  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 20693  0032EA  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 20694  0032EE  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 20695  0032F2  0EFF               	movlw	255
 20696  0032F4  6F69               	movwf	command@CRC& (0+255),b
 20697  0032F6  0E59               	movlw	89
 20698  0032F8  ECDF  F027         	call	_command
 20699                           
 20700                           ;diskio.c: 528: proceed();
 20701  0032FC  ECFD  F02B         	call	_proceed	;wreg free
 20702  003300                     
 20703                           ;diskio.c: 530: buff = response();
 20704  003300  ECE3  F02B         	call	_response	;wreg free
 20705  003304  0100               	movlb	0	; () banked
 20706  003306  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 20707                           
 20708                           ; BSR set to: 0
 20709                           ;diskio.c: 531: }while(buff!=0X00);
 20710  003308  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 20711  00330A  A4D8               	btfss	status,2,c
 20712  00330C  D7F9               	goto	l650
 20713                           
 20714                           ; BSR set to: 0
 20715                           ;diskio.c: 533: dummy_clocks(1);
 20716                           
 20717                           ; BSR set to: 0
 20718  00330E  0E01               	movlw	1
 20719  003310  EC0E  F02A         	call	_dummy_clocks
 20720                           
 20721                           ;diskio.c: 534: escreve_SPI(0XFC);
 20722  003314  0EFC               	movlw	252
 20723  003316  ECC0  F02B         	call	_escreve_SPI
 20724                           
 20725                           ;diskio.c: 535: for(j=0;j<512;j++)
 20726  00331A  0E00               	movlw	0
 20727  00331C  0100               	movlb	0	; () banked
 20728  00331E  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 20729  003320  0E00               	movlw	0
 20730  003322  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 20731  003324                     l9647:
 20732                           
 20733                           ; BSR set to: 0
 20734  003324  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 20735  003326  D004               	goto	l652
 20736  003328  0E02               	movlw	2
 20737  00332A  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 20738  00332C  B0D8               	btfsc	status,0,c
 20739  00332E  D00D               	goto	u12410
 20740  003330                     l652:
 20741                           
 20742                           ; BSR set to: 0
 20743                           ;diskio.c: 536: {
 20744                           ;diskio.c: 537: escreve_SPI(*p_buff);
 20745                           
 20746                           ; BSR set to: 0
 20747  003330  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 20748  003334  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 20749  003338  50DF               	movf	indf2,w,c
 20750  00333A  ECC0  F02B         	call	_escreve_SPI
 20751                           
 20752                           ;diskio.c: 538: p_buff++;
 20753  00333E  0100               	movlb	0	; () banked
 20754  003340  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 20755  003342  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 20756                           
 20757                           ; BSR set to: 0
 20758  003344  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 20759  003346  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 20760  003348  D7ED               	goto	l9647
 20761  00334A                     u12410:
 20762                           
 20763                           ; BSR set to: 0
 20764                           ;diskio.c: 539: }
 20765                           ;diskio.c: 540: leitura_SPI();
 20766                           
 20767                           ; BSR set to: 0
 20768  00334A  EC03  F02C         	call	_leitura_SPI	;wreg free
 20769                           
 20770                           ;diskio.c: 541: leitura_SPI();
 20771  00334E  EC03  F02C         	call	_leitura_SPI	;wreg free
 20772                           
 20773                           ;diskio.c: 543: dummy_clocks(1);
 20774  003352  0E01               	movlw	1
 20775  003354  EC0E  F02A         	call	_dummy_clocks
 20776                           
 20777                           ;diskio.c: 544: escreve_SPI(0XFD);
 20778  003358  0EFD               	movlw	253
 20779  00335A  ECC0  F02B         	call	_escreve_SPI
 20780                           
 20781                           ;diskio.c: 546: }
 20782  00335E  D06A               	goto	u12460
 20783  003360                     l647:
 20784                           
 20785                           ; BSR set to: 0
 20786                           ;diskio.c: 547: else
 20787                           ;diskio.c: 548: {
 20788                           ;diskio.c: 549: LATCbits.LATC7 = 0;
 20789  003360  9E8B               	bcf	3979,7,c	;volatile
 20790                           
 20791                           ;diskio.c: 550: LATBbits.LATB4 = 0;
 20792  003362  988A               	bcf	3978,4,c	;volatile
 20793                           
 20794                           ; BSR set to: 0
 20795                           ;diskio.c: 551: dummy_clocks(10);
 20796  003364  0E0A               	movlw	10
 20797  003366  EC0E  F02A         	call	_dummy_clocks
 20798                           
 20799                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 20800  00336A  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 20801  00336E  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 20802  003372  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 20803  003376  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 20804  00337A  0E09               	movlw	9
 20805  00337C                     u12425:
 20806  00337C  90D8               	bcf	status,0,c
 20807  00337E  0100               	movlb	0	; () banked
 20808  003380  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 20809  003382  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 20810  003384  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 20811  003386  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 20812  003388  2EE8               	decfsz	wreg,f,c
 20813  00338A  D7F8               	goto	u12425
 20814  00338C  C073  F065         	movff	??_sdc_disk_write,command@arg
 20815  003390  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 20816  003394  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 20817  003398  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 20818  00339C  0E00               	movlw	0
 20819  00339E  6F69               	movwf	command@CRC& (0+255),b
 20820  0033A0  0E58               	movlw	88
 20821  0033A2  ECDF  F027         	call	_command
 20822                           
 20823                           ;diskio.c: 553: proceed();
 20824  0033A6  ECFD  F02B         	call	_proceed	;wreg free
 20825  0033AA                     
 20826                           ;diskio.c: 555: buff = response();
 20827  0033AA  ECE3  F02B         	call	_response	;wreg free
 20828  0033AE  0100               	movlb	0	; () banked
 20829  0033B0  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 20830                           
 20831                           ; BSR set to: 0
 20832                           ;diskio.c: 556: }while(buff!=0X00);
 20833  0033B2  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 20834  0033B4  A4D8               	btfss	status,2,c
 20835  0033B6  D7F9               	goto	l655
 20836                           
 20837                           ; BSR set to: 0
 20838                           ;diskio.c: 558: LATBbits.LATB4 = 0;
 20839  0033B8  988A               	bcf	3978,4,c	;volatile
 20840                           
 20841                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 20842  0033BA  9E8B               	bcf	3979,7,c	;volatile
 20843                           
 20844                           ; BSR set to: 0
 20845                           ;diskio.c: 560: dummy_clocks(1);
 20846  0033BC  0E01               	movlw	1
 20847  0033BE  EC0E  F02A         	call	_dummy_clocks
 20848                           
 20849                           ;diskio.c: 561: escreve_SPI(0XFE);
 20850  0033C2  0EFE               	movlw	254
 20851  0033C4  ECC0  F02B         	call	_escreve_SPI
 20852                           
 20853                           ;diskio.c: 562: for(j=0;j<512;j++)
 20854  0033C8  0E00               	movlw	0
 20855  0033CA  0100               	movlb	0	; () banked
 20856  0033CC  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 20857  0033CE  0E00               	movlw	0
 20858  0033D0  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 20859  0033D2                     l9679:
 20860                           
 20861                           ; BSR set to: 0
 20862  0033D2  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 20863  0033D4  D004               	goto	l657
 20864  0033D6  0E02               	movlw	2
 20865  0033D8  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 20866  0033DA  B0D8               	btfsc	status,0,c
 20867  0033DC  D00D               	goto	u12450
 20868  0033DE                     l657:
 20869                           
 20870                           ; BSR set to: 0
 20871                           ;diskio.c: 563: {
 20872                           ;diskio.c: 564: escreve_SPI(*p_buff);
 20873                           
 20874                           ; BSR set to: 0
 20875  0033DE  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 20876  0033E2  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 20877  0033E6  50DF               	movf	indf2,w,c
 20878  0033E8  ECC0  F02B         	call	_escreve_SPI
 20879                           
 20880                           ;diskio.c: 565: p_buff++;
 20881  0033EC  0100               	movlb	0	; () banked
 20882  0033EE  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 20883  0033F0  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 20884                           
 20885                           ; BSR set to: 0
 20886  0033F2  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 20887  0033F4  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 20888  0033F6  D7ED               	goto	l9679
 20889  0033F8                     u12450:
 20890                           
 20891                           ; BSR set to: 0
 20892                           ;diskio.c: 566: }
 20893                           ;diskio.c: 567: leitura_SPI();
 20894                           
 20895                           ; BSR set to: 0
 20896  0033F8  EC03  F02C         	call	_leitura_SPI	;wreg free
 20897                           
 20898                           ;diskio.c: 568: leitura_SPI();
 20899  0033FC  EC03  F02C         	call	_leitura_SPI	;wreg free
 20900                           
 20901                           ;diskio.c: 570: dummy_clocks(10);
 20902  003400  0E0A               	movlw	10
 20903  003402  EC0E  F02A         	call	_dummy_clocks
 20904                           
 20905                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 20906  003406  0E00               	movlw	0
 20907  003408  0100               	movlb	0	; () banked
 20908  00340A  6F65               	movwf	command@arg& (0+255),b
 20909  00340C  0E00               	movlw	0
 20910  00340E  6F66               	movwf	(command@arg+1)& (0+255),b
 20911  003410  0E00               	movlw	0
 20912  003412  6F67               	movwf	(command@arg+2)& (0+255),b
 20913  003414  0E00               	movlw	0
 20914  003416  6F68               	movwf	(command@arg+3)& (0+255),b
 20915  003418  0E00               	movlw	0
 20916  00341A  6F69               	movwf	command@CRC& (0+255),b
 20917  00341C  0E4D               	movlw	77
 20918  00341E  ECDF  F027         	call	_command
 20919                           
 20920                           ;diskio.c: 572: proceed();
 20921  003422  ECFD  F02B         	call	_proceed	;wreg free
 20922  003426                     
 20923                           ;diskio.c: 574: buff = response();
 20924  003426  ECE3  F02B         	call	_response	;wreg free
 20925  00342A  0100               	movlb	0	; () banked
 20926  00342C  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 20927                           
 20928                           ; BSR set to: 0
 20929                           ;diskio.c: 575: }while(buff!=0X00 );
 20930  00342E  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 20931  003430  A4D8               	btfss	status,2,c
 20932  003432  D7F9               	goto	l659
 20933  003434                     u12460:
 20934                           
 20935                           ;diskio.c: 576: }
 20936                           ;diskio.c: 577: return res;
 20937                           
 20938                           ; BSR set to: 0
 20939                           
 20940                           ; BSR set to: 0
 20941  003434  0100               	movlb	0	; () banked
 20942  003436  517B               	movf	sdc_disk_write@res& (0+255),w,b
 20943  003438  0012               	return	
 20944  00343A                     __end_of_sdc_disk_write:
 20945                           	opt stack 0
 20946                           tosu	equ	0xFFF
 20947                           tosh	equ	0xFFE
 20948                           tosl	equ	0xFFD
 20949                           pclath	equ	0xFFA
 20950                           tblptru	equ	0xFF8
 20951                           tblptrh	equ	0xFF7
 20952                           tblptrl	equ	0xFF6
 20953                           tablat	equ	0xFF5
 20954                           prodh	equ	0xFF4
 20955                           prodl	equ	0xFF3
 20956                           intcon	equ	0xFF2
 20957                           intcon2	equ	0xFF1
 20958                           intcon3	equ	0xFF0
 20959                           indf0	equ	0xFEF
 20960                           postinc0	equ	0xFEE
 20961                           fsr0h	equ	0xFEA
 20962                           fsr0l	equ	0xFE9
 20963                           wreg	equ	0xFE8
 20964                           indf1	equ	0xFE7
 20965                           postinc1	equ	0xFE6
 20966                           postdec1	equ	0xFE5
 20967                           plusw1	equ	0xFE3
 20968                           fsr1h	equ	0xFE2
 20969                           fsr1l	equ	0xFE1
 20970                           indf2	equ	0xFDF
 20971                           postinc2	equ	0xFDE
 20972                           postdec2	equ	0xFDD
 20973                           plusw2	equ	0xFDB
 20974                           fsr2h	equ	0xFDA
 20975                           fsr2l	equ	0xFD9
 20976                           status	equ	0xFD8
 20977                           
 20978 ;; *************** function _disk_read *****************
 20979 ;; Defined at:
 20980 ;;		line 97 in file "bibliotecas/diskio.c"
 20981 ;; Parameters:    Size  Location     Type
 20982 ;;  pdrv            1    wreg     unsigned char 
 20983 ;;  buff            2   31[BANK0 ] PTR unsigned char 
 20984 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 20985 ;;  sector          4   33[BANK0 ] unsigned long 
 20986 ;;  count           1   37[BANK0 ] unsigned char 
 20987 ;; Auto vars:     Size  Location     Type
 20988 ;;  pdrv            1   39[BANK0 ] unsigned char 
 20989 ;;  result          2   40[BANK0 ] int 
 20990 ;;  res             1   42[BANK0 ] enum E25
 20991 ;; Return value:  Size  Location     Type
 20992 ;;                  1    wreg      enum E25
 20993 ;; Registers used:
 20994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20995 ;; Tracked objects:
 20996 ;;		On entry : 0/0
 20997 ;;		On exit  : 0/0
 20998 ;;		Unchanged: 0/0
 20999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21000 ;;      Params:         0       7       0       0       0       0       0       0       0
 21001 ;;      Locals:         0       4       0       0       0       0       0       0       0
 21002 ;;      Temps:          0       1       0       0       0       0       0       0       0
 21003 ;;      Totals:         0      12       0       0       0       0       0       0       0
 21004 ;;Total ram usage:       12 bytes
 21005 ;; Hardware stack levels used:    1
 21006 ;; Hardware stack levels required when called:    7
 21007 ;; This function calls:
 21008 ;;		_sdc_disk_read
 21009 ;; This function is called by:
 21010 ;;		_move_window
 21011 ;;		_check_fs
 21012 ;;		_f_read
 21013 ;; This function uses a non-reentrant model
 21014 ;;
 21015                           
 21016                           	psect	text74
 21017  0049CA                     __ptext74:
 21018                           	opt stack 0
 21019  0049CA                     _disk_read:
 21020                           	opt stack 15
 21021                           
 21022                           ; BSR set to: 0
 21023                           ;incstack = 0
 21024                           ;disk_read@pdrv stored from wreg
 21025  0049CA  0100               	movlb	0	; () banked
 21026  0049CC  6F87               	movwf	disk_read@pdrv& (0+255),b
 21027                           
 21028                           ;diskio.c: 104: DRESULT res;
 21029                           ;diskio.c: 105: int result;
 21030                           ;diskio.c: 107: switch (pdrv) {
 21031  0049CE  D038               	goto	l554
 21032  0049D0                     
 21033                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 21034  0049D0  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 21035  0049D4  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 21036  0049D8  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 21037  0049DC  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 21038  0049E0  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 21039  0049E4  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 21040  0049E8  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 21041  0049EC  EC01  F01E         	call	_sdc_disk_read	;wreg free
 21042  0049F0  0100               	movlb	0	; () banked
 21043  0049F2  6F86               	movwf	??_disk_read& (0+255),b
 21044  0049F4  5186               	movf	??_disk_read& (0+255),w,b
 21045  0049F6  6F88               	movwf	disk_read@result& (0+255),b
 21046  0049F8  6B89               	clrf	(disk_read@result+1)& (0+255),b
 21047                           
 21048                           ; BSR set to: 0
 21049                           ;diskio.c: 115: res = result;
 21050  0049FA  C088  F08A         	movff	disk_read@result,disk_read@res
 21051                           
 21052                           ; BSR set to: 0
 21053                           ;diskio.c: 117: return res;
 21054  0049FE  518A               	movf	disk_read@res& (0+255),w,b
 21055                           
 21056                           ; BSR set to: 0
 21057  004A00  0012               	return	
 21058  004A02                     
 21059                           ; BSR set to: 0
 21060                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 21061                           
 21062                           ; BSR set to: 0
 21063  004A02  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 21064  004A06  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 21065  004A0A  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 21066  004A0E  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 21067  004A12  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 21068  004A16  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 21069  004A1A  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 21070  004A1E  EC01  F01E         	call	_sdc_disk_read	;wreg free
 21071  004A22  0100               	movlb	0	; () banked
 21072  004A24  6F86               	movwf	??_disk_read& (0+255),b
 21073  004A26  5186               	movf	??_disk_read& (0+255),w,b
 21074  004A28  6F88               	movwf	disk_read@result& (0+255),b
 21075  004A2A  6B89               	clrf	(disk_read@result+1)& (0+255),b
 21076                           
 21077                           ; BSR set to: 0
 21078                           ;diskio.c: 126: res = result;
 21079  004A2C  C088  F08A         	movff	disk_read@result,disk_read@res
 21080                           
 21081                           ; BSR set to: 0
 21082                           ;diskio.c: 128: buff = data_buff;
 21083  004A30  C0FD  F07F         	movff	_data_buff,disk_read@buff
 21084  004A34  C0FE  F080         	movff	_data_buff+1,disk_read@buff+1
 21085                           
 21086                           ; BSR set to: 0
 21087                           ;diskio.c: 129: return res;
 21088  004A38  518A               	movf	disk_read@res& (0+255),w,b
 21089                           
 21090                           ; BSR set to: 0
 21091  004A3A  0012               	return	
 21092  004A3C                     
 21093                           ; BSR set to: 0
 21094                           ;diskio.c: 138: return res;
 21095                           
 21096                           ; BSR set to: 0
 21097  004A3C  518A               	movf	disk_read@res& (0+255),w,b
 21098                           
 21099                           ; BSR set to: 0
 21100  004A3E  0012               	return	
 21101  004A40                     l554:
 21102                           
 21103                           ; BSR set to: 0
 21104  004A40  0100               	movlb	0	; () banked
 21105  004A42  5187               	movf	disk_read@pdrv& (0+255),w,b
 21106                           
 21107                           ; Switch size 1, requested type "space"
 21108                           ; Number of cases is 3, Range of values is 0 to 2
 21109                           ; switch strategies available:
 21110                           ; Name         Instructions Cycles
 21111                           ; simple_byte           10     6 (average)
 21112                           ;	Chosen strategy is simple_byte
 21113  004A44  0A00               	xorlw	0	; case 0
 21114  004A46  B4D8               	btfsc	status,2,c
 21115  004A48  D7C3               	goto	l555
 21116  004A4A  0A01               	xorlw	1	; case 1
 21117  004A4C  B4D8               	btfsc	status,2,c
 21118  004A4E  D7D9               	goto	l557
 21119  004A50  0A03               	xorlw	3	; case 2
 21120  004A52  B4D8               	btfsc	status,2,c
 21121  004A54  D7F3               	goto	l558
 21122                           
 21123                           ; BSR set to: 0
 21124                           ;diskio.c: 141: return RES_PARERR;
 21125                           
 21126                           ; BSR set to: 0
 21127  004A56  0E04               	movlw	4
 21128  004A58  0012               	return	
 21129  004A5A                     __end_of_disk_read:
 21130                           	opt stack 0
 21131                           tosu	equ	0xFFF
 21132                           tosh	equ	0xFFE
 21133                           tosl	equ	0xFFD
 21134                           pclath	equ	0xFFA
 21135                           tblptru	equ	0xFF8
 21136                           tblptrh	equ	0xFF7
 21137                           tblptrl	equ	0xFF6
 21138                           tablat	equ	0xFF5
 21139                           prodh	equ	0xFF4
 21140                           prodl	equ	0xFF3
 21141                           intcon	equ	0xFF2
 21142                           intcon2	equ	0xFF1
 21143                           intcon3	equ	0xFF0
 21144                           indf0	equ	0xFEF
 21145                           postinc0	equ	0xFEE
 21146                           fsr0h	equ	0xFEA
 21147                           fsr0l	equ	0xFE9
 21148                           wreg	equ	0xFE8
 21149                           indf1	equ	0xFE7
 21150                           postinc1	equ	0xFE6
 21151                           postdec1	equ	0xFE5
 21152                           plusw1	equ	0xFE3
 21153                           fsr1h	equ	0xFE2
 21154                           fsr1l	equ	0xFE1
 21155                           indf2	equ	0xFDF
 21156                           postinc2	equ	0xFDE
 21157                           postdec2	equ	0xFDD
 21158                           plusw2	equ	0xFDB
 21159                           fsr2h	equ	0xFDA
 21160                           fsr2l	equ	0xFD9
 21161                           status	equ	0xFD8
 21162                           
 21163 ;; *************** function _sdc_disk_read *****************
 21164 ;; Defined at:
 21165 ;;		line 439 in file "bibliotecas/diskio.c"
 21166 ;; Parameters:    Size  Location     Type
 21167 ;;  p_buff          2   12[BANK0 ] PTR unsigned char 
 21168 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 21169 ;;  sector          4   14[BANK0 ] unsigned long 
 21170 ;;  count           1   18[BANK0 ] unsigned char 
 21171 ;; Auto vars:     Size  Location     Type
 21172 ;;  start_add       4   24[BANK0 ] unsigned long 
 21173 ;;  length          2   28[BANK0 ] int 
 21174 ;;  count1          2    0        int 
 21175 ;;  i               2    0        int 
 21176 ;;  buff            1   30[BANK0 ] unsigned char 
 21177 ;;  ptr             1   23[BANK0 ] unsigned char 
 21178 ;;  res             1    0        enum E25
 21179 ;; Return value:  Size  Location     Type
 21180 ;;                  1    wreg      enum E25
 21181 ;; Registers used:
 21182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21183 ;; Tracked objects:
 21184 ;;		On entry : 0/0
 21185 ;;		On exit  : 0/0
 21186 ;;		Unchanged: 0/0
 21187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21188 ;;      Params:         0       7       0       0       0       0       0       0       0
 21189 ;;      Locals:         0       8       0       0       0       0       0       0       0
 21190 ;;      Temps:          0       4       0       0       0       0       0       0       0
 21191 ;;      Totals:         0      19       0       0       0       0       0       0       0
 21192 ;;Total ram usage:       19 bytes
 21193 ;; Hardware stack levels used:    1
 21194 ;; Hardware stack levels required when called:    6
 21195 ;; This function calls:
 21196 ;;		_command
 21197 ;;		_dummy_clocks
 21198 ;;		_proceed
 21199 ;;		_response
 21200 ;; This function is called by:
 21201 ;;		_disk_read
 21202 ;; This function uses a non-reentrant model
 21203 ;;
 21204                           
 21205                           	psect	text75
 21206  003C02                     __ptext75:
 21207                           	opt stack 0
 21208  003C02                     _sdc_disk_read:
 21209                           	opt stack 15
 21210                           
 21211                           ;diskio.c: 446: DRESULT res;
 21212                           ;diskio.c: 447: unsigned char ptr=0X00, buff;
 21213                           
 21214                           ; BSR set to: 0
 21215                           ;incstack = 0
 21216  003C02  0E00               	movlw	0
 21217  003C04  0100               	movlb	0	; () banked
 21218  003C06  6F77               	movwf	sdc_disk_read@ptr& (0+255),b
 21219                           
 21220                           ; BSR set to: 0
 21221                           ;diskio.c: 448: unsigned long int start_add;
 21222                           ;diskio.c: 449: int length,i, count1;
 21223                           ;diskio.c: 450: dummy_clocks(10);
 21224  003C08  0E0A               	movlw	10
 21225  003C0A  EC0E  F02A         	call	_dummy_clocks
 21226                           
 21227                           ;diskio.c: 452: start_add = sector*512;
 21228  003C0E  C06E  F073         	movff	sdc_disk_read@sector,??_sdc_disk_read
 21229  003C12  C06F  F074         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 21230  003C16  C070  F075         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 21231  003C1A  C071  F076         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 21232  003C1E  0E09               	movlw	9
 21233  003C20                     u12295:
 21234  003C20  90D8               	bcf	status,0,c
 21235  003C22  0100               	movlb	0	; () banked
 21236  003C24  3773               	rlcf	??_sdc_disk_read& (0+255),f,b
 21237  003C26  3774               	rlcf	(??_sdc_disk_read+1)& (0+255),f,b
 21238  003C28  3775               	rlcf	(??_sdc_disk_read+2)& (0+255),f,b
 21239  003C2A  3776               	rlcf	(??_sdc_disk_read+3)& (0+255),f,b
 21240  003C2C  2EE8               	decfsz	wreg,f,c
 21241  003C2E  D7F8               	goto	u12295
 21242  003C30  C073  F078         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 21243  003C34  C074  F079         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 21244  003C38  C075  F07A         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 21245  003C3C  C076  F07B         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 21246                           
 21247                           ; BSR set to: 0
 21248                           ;diskio.c: 455: if(sector != 1)
 21249  003C40  056E               	decf	sdc_disk_read@sector& (0+255),w,b
 21250  003C42  116F               	iorwf	(sdc_disk_read@sector+1)& (0+255),w,b
 21251  003C44  1170               	iorwf	(sdc_disk_read@sector+2)& (0+255),w,b
 21252  003C46  1171               	iorwf	(sdc_disk_read@sector+3)& (0+255),w,b
 21253  003C48  B4D8               	btfsc	status,2,c
 21254  003C4A  D01D               	goto	l630
 21255                           
 21256                           ; BSR set to: 0
 21257                           ;diskio.c: 456: {
 21258                           ;diskio.c: 457: dummy_clocks(10);
 21259  003C4C  0E0A               	movlw	10
 21260  003C4E  EC0E  F02A         	call	_dummy_clocks
 21261                           
 21262                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 21263  003C52  C078  F065         	movff	sdc_disk_read@start_add,command@arg
 21264  003C56  C079  F066         	movff	sdc_disk_read@start_add+1,command@arg+1
 21265  003C5A  C07A  F067         	movff	sdc_disk_read@start_add+2,command@arg+2
 21266  003C5E  C07B  F068         	movff	sdc_disk_read@start_add+3,command@arg+3
 21267  003C62  0E00               	movlw	0
 21268  003C64  0100               	movlb	0	; () banked
 21269  003C66  6F69               	movwf	command@CRC& (0+255),b
 21270  003C68  0E52               	movlw	82
 21271  003C6A  ECDF  F027         	call	_command
 21272                           
 21273                           ;diskio.c: 459: proceed();
 21274  003C6E  ECFD  F02B         	call	_proceed	;wreg free
 21275  003C72                     
 21276                           ;diskio.c: 461: buff = response();
 21277  003C72  ECE3  F02B         	call	_response	;wreg free
 21278  003C76  0100               	movlb	0	; () banked
 21279  003C78  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 21280                           
 21281                           ; BSR set to: 0
 21282                           ;diskio.c: 462: }while(buff!=0X00);
 21283  003C7A  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 21284  003C7C  A4D8               	btfss	status,2,c
 21285  003C7E  D7F9               	goto	l631
 21286                           
 21287                           ; BSR set to: 0
 21288                           ;diskio.c: 463: proceed();
 21289                           
 21290                           ; BSR set to: 0
 21291  003C80  ECFD  F02B         	call	_proceed	;wreg free
 21292                           
 21293                           ;diskio.c: 464: }
 21294  003C84  D021               	goto	l636
 21295  003C86                     l630:
 21296                           
 21297                           ;diskio.c: 465: else
 21298                           ;diskio.c: 466: {
 21299                           ;diskio.c: 467: dummy_clocks(10);
 21300  003C86  0E0A               	movlw	10
 21301  003C88  EC0E  F02A         	call	_dummy_clocks
 21302                           
 21303                           ;diskio.c: 468: command(0X51,sector ,0X00);
 21304  003C8C  C06E  F065         	movff	sdc_disk_read@sector,command@arg
 21305  003C90  C06F  F066         	movff	sdc_disk_read@sector+1,command@arg+1
 21306  003C94  C070  F067         	movff	sdc_disk_read@sector+2,command@arg+2
 21307  003C98  C071  F068         	movff	sdc_disk_read@sector+3,command@arg+3
 21308  003C9C  0E00               	movlw	0
 21309  003C9E  0100               	movlb	0	; () banked
 21310  003CA0  6F69               	movwf	command@CRC& (0+255),b
 21311  003CA2  0E51               	movlw	81
 21312  003CA4  ECDF  F027         	call	_command
 21313                           
 21314                           ;diskio.c: 469: proceed();
 21315  003CA8  ECFD  F02B         	call	_proceed	;wreg free
 21316  003CAC                     
 21317                           ;diskio.c: 471: buff = response();
 21318  003CAC  ECE3  F02B         	call	_response	;wreg free
 21319  003CB0  0100               	movlb	0	; () banked
 21320  003CB2  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 21321                           
 21322                           ; BSR set to: 0
 21323                           ;diskio.c: 472: }while(buff!=0X00);
 21324  003CB4  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 21325  003CB6  A4D8               	btfss	status,2,c
 21326  003CB8  D7F9               	goto	l634
 21327                           
 21328                           ; BSR set to: 0
 21329                           ;diskio.c: 473: proceed();
 21330                           
 21331                           ; BSR set to: 0
 21332  003CBA  ECFD  F02B         	call	_proceed	;wreg free
 21333                           
 21334                           ;diskio.c: 474: }
 21335                           ;diskio.c: 478: while(buff!=0xFE)
 21336  003CBE  D004               	goto	l636
 21337  003CC0                     
 21338                           ;diskio.c: 479: {
 21339                           ;diskio.c: 480: buff = response();
 21340  003CC0  ECE3  F02B         	call	_response	;wreg free
 21341  003CC4  0100               	movlb	0	; () banked
 21342  003CC6  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 21343  003CC8                     l636:
 21344                           
 21345                           ; BSR set to: 0
 21346  003CC8  0EFE               	movlw	254
 21347  003CCA  0100               	movlb	0	; () banked
 21348  003CCC  197E               	xorwf	sdc_disk_read@buff& (0+255),w,b
 21349  003CCE  A4D8               	btfss	status,2,c
 21350  003CD0  D7F7               	goto	l637
 21351                           
 21352                           ; BSR set to: 0
 21353                           ;diskio.c: 481: }
 21354                           ;diskio.c: 483: length = 0;
 21355                           
 21356                           ; BSR set to: 0
 21357  003CD2  0E00               	movlw	0
 21358  003CD4  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 21359  003CD6  0E00               	movlw	0
 21360  003CD8  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 21361                           
 21362                           ;diskio.c: 484: while ( length < 512 )
 21363  003CDA  D00C               	goto	l639
 21364  003CDC                     
 21365                           ; BSR set to: 0
 21366                           ;diskio.c: 485: {
 21367                           ;diskio.c: 486: p_buff[length] = response();
 21368                           
 21369                           ; BSR set to: 0
 21370  003CDC  517C               	movf	sdc_disk_read@length& (0+255),w,b
 21371  003CDE  256C               	addwf	sdc_disk_read@p_buff& (0+255),w,b
 21372  003CE0  6ED9               	movwf	fsr2l,c
 21373  003CE2  517D               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 21374  003CE4  216D               	addwfc	(sdc_disk_read@p_buff+1)& (0+255),w,b
 21375  003CE6  6EDA               	movwf	fsr2h,c
 21376  003CE8  ECE3  F02B         	call	_response	;wreg free
 21377  003CEC  6EDF               	movwf	indf2,c
 21378                           
 21379                           ;diskio.c: 487: length++;
 21380  003CEE  0100               	movlb	0	; () banked
 21381  003CF0  4B7C               	infsnz	sdc_disk_read@length& (0+255),f,b
 21382  003CF2  2B7D               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 21383  003CF4                     l639:
 21384                           
 21385                           ; BSR set to: 0
 21386                           
 21387                           ; BSR set to: 0
 21388  003CF4  BF7D               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 21389  003CF6  D7F2               	goto	l640
 21390  003CF8  0E02               	movlw	2
 21391  003CFA  5D7D               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 21392  003CFC  A0D8               	btfss	status,0,c
 21393  003CFE  D7EE               	goto	l640
 21394                           
 21395                           ; BSR set to: 0
 21396                           ;diskio.c: 488: }
 21397                           ;diskio.c: 490: length = 0;
 21398                           
 21399                           ; BSR set to: 0
 21400  003D00  0E00               	movlw	0
 21401  003D02  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 21402  003D04  0E00               	movlw	0
 21403  003D06  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 21404                           
 21405                           ; BSR set to: 0
 21406                           ;diskio.c: 491: dummy_clocks(10);
 21407  003D08  0E0A               	movlw	10
 21408  003D0A  EC0E  F02A         	call	_dummy_clocks
 21409                           
 21410                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 21411  003D0E  0E00               	movlw	0
 21412  003D10  0100               	movlb	0	; () banked
 21413  003D12  6F65               	movwf	command@arg& (0+255),b
 21414  003D14  0E00               	movlw	0
 21415  003D16  6F66               	movwf	(command@arg+1)& (0+255),b
 21416  003D18  0E00               	movlw	0
 21417  003D1A  6F67               	movwf	(command@arg+2)& (0+255),b
 21418  003D1C  0E00               	movlw	0
 21419  003D1E  6F68               	movwf	(command@arg+3)& (0+255),b
 21420  003D20  0E00               	movlw	0
 21421  003D22  6F69               	movwf	command@CRC& (0+255),b
 21422  003D24  0E4C               	movlw	76
 21423  003D26  ECDF  F027         	call	_command
 21424                           
 21425                           ;diskio.c: 494: proceed();
 21426  003D2A  ECFD  F02B         	call	_proceed	;wreg free
 21427  003D2E                     
 21428                           ;diskio.c: 496: buff = response();
 21429  003D2E  ECE3  F02B         	call	_response	;wreg free
 21430  003D32  0100               	movlb	0	; () banked
 21431  003D34  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 21432                           
 21433                           ; BSR set to: 0
 21434                           ;diskio.c: 497: }while(buff!=0xFF);
 21435  003D36  297E               	incf	sdc_disk_read@buff& (0+255),w,b
 21436  003D38  A4D8               	btfss	status,2,c
 21437  003D3A  D7F9               	goto	l642
 21438                           
 21439                           ; BSR set to: 0
 21440                           ;diskio.c: 499: length = 0;
 21441                           
 21442                           ; BSR set to: 0
 21443  003D3C  0E00               	movlw	0
 21444  003D3E  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 21445  003D40  0E00               	movlw	0
 21446  003D42  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 21447                           
 21448                           ; BSR set to: 0
 21449                           ;diskio.c: 500: return RES_OK;
 21450  003D44  0E00               	movlw	0
 21451  003D46  0012               	return	
 21452  003D48                     __end_of_sdc_disk_read:
 21453                           	opt stack 0
 21454                           tosu	equ	0xFFF
 21455                           tosh	equ	0xFFE
 21456                           tosl	equ	0xFFD
 21457                           pclath	equ	0xFFA
 21458                           tblptru	equ	0xFF8
 21459                           tblptrh	equ	0xFF7
 21460                           tblptrl	equ	0xFF6
 21461                           tablat	equ	0xFF5
 21462                           prodh	equ	0xFF4
 21463                           prodl	equ	0xFF3
 21464                           intcon	equ	0xFF2
 21465                           intcon2	equ	0xFF1
 21466                           intcon3	equ	0xFF0
 21467                           indf0	equ	0xFEF
 21468                           postinc0	equ	0xFEE
 21469                           fsr0h	equ	0xFEA
 21470                           fsr0l	equ	0xFE9
 21471                           wreg	equ	0xFE8
 21472                           indf1	equ	0xFE7
 21473                           postinc1	equ	0xFE6
 21474                           postdec1	equ	0xFE5
 21475                           plusw1	equ	0xFE3
 21476                           fsr1h	equ	0xFE2
 21477                           fsr1l	equ	0xFE1
 21478                           indf2	equ	0xFDF
 21479                           postinc2	equ	0xFDE
 21480                           postdec2	equ	0xFDD
 21481                           plusw2	equ	0xFDB
 21482                           fsr2h	equ	0xFDA
 21483                           fsr2l	equ	0xFD9
 21484                           status	equ	0xFD8
 21485                           
 21486 ;; *************** function _response *****************
 21487 ;; Defined at:
 21488 ;;		line 59 in file "bibliotecas/SDCard.c"
 21489 ;; Parameters:    Size  Location     Type
 21490 ;;		None
 21491 ;; Auto vars:     Size  Location     Type
 21492 ;;  buff            1    0[BANK0 ] unsigned char 
 21493 ;; Return value:  Size  Location     Type
 21494 ;;                  1    wreg      unsigned char 
 21495 ;; Registers used:
 21496 ;;		wreg, status,2, cstack
 21497 ;; Tracked objects:
 21498 ;;		On entry : 0/0
 21499 ;;		On exit  : 0/0
 21500 ;;		Unchanged: 0/0
 21501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21502 ;;      Params:         0       0       0       0       0       0       0       0       0
 21503 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21504 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21505 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21506 ;;Total ram usage:        1 bytes
 21507 ;; Hardware stack levels used:    1
 21508 ;; Hardware stack levels required when called:    4
 21509 ;; This function calls:
 21510 ;;		_leitura_SPI
 21511 ;; This function is called by:
 21512 ;;		_sdc_reset
 21513 ;;		_sdc_disk_initialize
 21514 ;;		_sdc_disk_read
 21515 ;;		_sdc_disk_write
 21516 ;; This function uses a non-reentrant model
 21517 ;;
 21518                           
 21519                           	psect	text76
 21520  0057C6                     __ptext76:
 21521                           	opt stack 0
 21522  0057C6                     _response:
 21523                           	opt stack 16
 21524                           
 21525                           ;SDCard.c: 61: unsigned char buff;
 21526                           ;SDCard.c: 62: LATBbits.LATB4 = 0;
 21527                           
 21528                           ; BSR set to: 0
 21529                           ;incstack = 0
 21530  0057C6  988A               	bcf	3978,4,c	;volatile
 21531                           
 21532                           ;SDCard.c: 63: buff= leitura_SPI();
 21533  0057C8  EC03  F02C         	call	_leitura_SPI	;wreg free
 21534  0057CC  0100               	movlb	0	; () banked
 21535  0057CE  6F60               	movwf	response@buff& (0+255),b
 21536                           
 21537                           ; BSR set to: 0
 21538                           ;SDCard.c: 64: return buff;
 21539  0057D0  5160               	movf	response@buff& (0+255),w,b
 21540  0057D2  0012               	return	
 21541  0057D4                     __end_of_response:
 21542                           	opt stack 0
 21543                           tosu	equ	0xFFF
 21544                           tosh	equ	0xFFE
 21545                           tosl	equ	0xFFD
 21546                           pclath	equ	0xFFA
 21547                           tblptru	equ	0xFF8
 21548                           tblptrh	equ	0xFF7
 21549                           tblptrl	equ	0xFF6
 21550                           tablat	equ	0xFF5
 21551                           prodh	equ	0xFF4
 21552                           prodl	equ	0xFF3
 21553                           intcon	equ	0xFF2
 21554                           intcon2	equ	0xFF1
 21555                           intcon3	equ	0xFF0
 21556                           indf0	equ	0xFEF
 21557                           postinc0	equ	0xFEE
 21558                           fsr0h	equ	0xFEA
 21559                           fsr0l	equ	0xFE9
 21560                           wreg	equ	0xFE8
 21561                           indf1	equ	0xFE7
 21562                           postinc1	equ	0xFE6
 21563                           postdec1	equ	0xFE5
 21564                           plusw1	equ	0xFE3
 21565                           fsr1h	equ	0xFE2
 21566                           fsr1l	equ	0xFE1
 21567                           indf2	equ	0xFDF
 21568                           postinc2	equ	0xFDE
 21569                           postdec2	equ	0xFDD
 21570                           plusw2	equ	0xFDB
 21571                           fsr2h	equ	0xFDA
 21572                           fsr2l	equ	0xFD9
 21573                           status	equ	0xFD8
 21574                           
 21575 ;; *************** function _proceed *****************
 21576 ;; Defined at:
 21577 ;;		line 92 in file "bibliotecas/SDCard.c"
 21578 ;; Parameters:    Size  Location     Type
 21579 ;;		None
 21580 ;; Auto vars:     Size  Location     Type
 21581 ;;		None
 21582 ;; Return value:  Size  Location     Type
 21583 ;;                  1    wreg      void 
 21584 ;; Registers used:
 21585 ;;		wreg, cstack
 21586 ;; Tracked objects:
 21587 ;;		On entry : 0/0
 21588 ;;		On exit  : 0/0
 21589 ;;		Unchanged: 0/0
 21590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21591 ;;      Params:         0       0       0       0       0       0       0       0       0
 21592 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21593 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21594 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21595 ;;Total ram usage:        0 bytes
 21596 ;; Hardware stack levels used:    1
 21597 ;; Hardware stack levels required when called:    4
 21598 ;; This function calls:
 21599 ;;		_escreve_SPI
 21600 ;; This function is called by:
 21601 ;;		_sdc_reset
 21602 ;;		_sdc_disk_initialize
 21603 ;;		_sdc_disk_read
 21604 ;;		_sdc_disk_write
 21605 ;;		_sdcard_init
 21606 ;; This function uses a non-reentrant model
 21607 ;;
 21608                           
 21609                           	psect	text77
 21610  0057FA                     __ptext77:
 21611                           	opt stack 0
 21612  0057FA                     _proceed:
 21613                           	opt stack 16
 21614                           
 21615                           ;SDCard.c: 94: LATBbits.LATB4 = 0;
 21616                           
 21617                           ; BSR set to: 0
 21618                           ;incstack = 0
 21619  0057FA  988A               	bcf	3978,4,c	;volatile
 21620                           
 21621                           ;SDCard.c: 95: escreve_SPI(0xFF);
 21622  0057FC  0EFF               	movlw	255
 21623  0057FE  ECC0  F02B         	call	_escreve_SPI
 21624                           
 21625                           ;SDCard.c: 96: LATBbits.LATB4 = 1;
 21626  005802  888A               	bsf	3978,4,c	;volatile
 21627  005804  0012               	return		;funcret
 21628  005806                     __end_of_proceed:
 21629                           	opt stack 0
 21630                           tosu	equ	0xFFF
 21631                           tosh	equ	0xFFE
 21632                           tosl	equ	0xFFD
 21633                           pclath	equ	0xFFA
 21634                           tblptru	equ	0xFF8
 21635                           tblptrh	equ	0xFF7
 21636                           tblptrl	equ	0xFF6
 21637                           tablat	equ	0xFF5
 21638                           prodh	equ	0xFF4
 21639                           prodl	equ	0xFF3
 21640                           intcon	equ	0xFF2
 21641                           intcon2	equ	0xFF1
 21642                           intcon3	equ	0xFF0
 21643                           indf0	equ	0xFEF
 21644                           postinc0	equ	0xFEE
 21645                           fsr0h	equ	0xFEA
 21646                           fsr0l	equ	0xFE9
 21647                           wreg	equ	0xFE8
 21648                           indf1	equ	0xFE7
 21649                           postinc1	equ	0xFE6
 21650                           postdec1	equ	0xFE5
 21651                           plusw1	equ	0xFE3
 21652                           fsr1h	equ	0xFE2
 21653                           fsr1l	equ	0xFE1
 21654                           indf2	equ	0xFDF
 21655                           postinc2	equ	0xFDE
 21656                           postdec2	equ	0xFDD
 21657                           plusw2	equ	0xFDB
 21658                           fsr2h	equ	0xFDA
 21659                           fsr2l	equ	0xFD9
 21660                           status	equ	0xFD8
 21661                           
 21662 ;; *************** function _command *****************
 21663 ;; Defined at:
 21664 ;;		line 125 in file "bibliotecas/SDCard.c"
 21665 ;; Parameters:    Size  Location     Type
 21666 ;;  CMD             1    wreg     unsigned char 
 21667 ;;  arg             4    5[BANK0 ] unsigned long 
 21668 ;;  CRC             1    9[BANK0 ] unsigned char 
 21669 ;; Auto vars:     Size  Location     Type
 21670 ;;  CMD             1   10[BANK0 ] unsigned char 
 21671 ;;  argument        1   11[BANK0 ] unsigned char 
 21672 ;; Return value:  Size  Location     Type
 21673 ;;                  1    wreg      void 
 21674 ;; Registers used:
 21675 ;;		wreg, status,2, status,0, cstack
 21676 ;; Tracked objects:
 21677 ;;		On entry : 0/0
 21678 ;;		On exit  : 0/0
 21679 ;;		Unchanged: 0/0
 21680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21681 ;;      Params:         0       5       0       0       0       0       0       0       0
 21682 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21683 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21684 ;;      Totals:         0       7       0       0       0       0       0       0       0
 21685 ;;Total ram usage:        7 bytes
 21686 ;; Hardware stack levels used:    1
 21687 ;; Hardware stack levels required when called:    5
 21688 ;; This function calls:
 21689 ;;		_dummy_clocks
 21690 ;;		_escreve_SPI
 21691 ;;		_wait_ready
 21692 ;; This function is called by:
 21693 ;;		_sdc_reset
 21694 ;;		_sdc_disk_initialize
 21695 ;;		_sdc_disk_read
 21696 ;;		_sdc_disk_write
 21697 ;; This function uses a non-reentrant model
 21698 ;;
 21699                           
 21700                           	psect	text78
 21701  004FBE                     __ptext78:
 21702                           	opt stack 0
 21703  004FBE                     _command:
 21704                           	opt stack 15
 21705                           
 21706                           ;incstack = 0
 21707                           ;command@CMD stored from wreg
 21708  004FBE  0100               	movlb	0	; () banked
 21709  004FC0  6F6A               	movwf	command@CMD& (0+255),b
 21710                           
 21711                           ;SDCard.c: 127: unsigned char argument;
 21712                           ;SDCard.c: 129: if (wait_ready() != 0xFF)
 21713  004FC2  ECAE  F02A         	call	_wait_ready	;wreg free
 21714  004FC6  0AFF               	xorlw	255
 21715  004FC8  A4D8               	btfss	status,2,c
 21716  004FCA  D004               	goto	l425
 21717  004FCC  D008               	goto	u12280
 21718  004FCE                     
 21719                           ;SDCard.c: 132: {
 21720                           ;SDCard.c: 133: dummy_clocks(10);
 21721  004FCE  0E0A               	movlw	10
 21722  004FD0  EC0E  F02A         	call	_dummy_clocks
 21723  004FD4                     l425:
 21724  004FD4  ECAE  F02A         	call	_wait_ready	;wreg free
 21725  004FD8  0AFF               	xorlw	255
 21726  004FDA  A4D8               	btfss	status,2,c
 21727  004FDC  D7F8               	goto	l426
 21728  004FDE                     u12280:
 21729                           
 21730                           ;SDCard.c: 134: }
 21731                           ;SDCard.c: 135: }
 21732                           ;SDCard.c: 136: escreve_SPI(0xFF);
 21733  004FDE  0EFF               	movlw	255
 21734  004FE0  ECC0  F02B         	call	_escreve_SPI
 21735                           
 21736                           ;SDCard.c: 137: escreve_SPI(CMD);
 21737  004FE4  0100               	movlb	0	; () banked
 21738  004FE6  516A               	movf	command@CMD& (0+255),w,b
 21739  004FE8  ECC0  F02B         	call	_escreve_SPI
 21740                           
 21741                           ;SDCard.c: 138: argument = arg>>24;
 21742  004FEC  C068  F06B         	movff	command@arg+3,command@argument
 21743                           
 21744                           ;SDCard.c: 139: escreve_SPI(argument);
 21745  004FF0  0100               	movlb	0	; () banked
 21746  004FF2  516B               	movf	command@argument& (0+255),w,b
 21747  004FF4  ECC0  F02B         	call	_escreve_SPI
 21748                           
 21749                           ;SDCard.c: 140: argument = arg>>16;
 21750  004FF8  C067  F06B         	movff	command@arg+2,command@argument
 21751                           
 21752                           ;SDCard.c: 141: escreve_SPI(argument);
 21753  004FFC  0100               	movlb	0	; () banked
 21754  004FFE  516B               	movf	command@argument& (0+255),w,b
 21755  005000  ECC0  F02B         	call	_escreve_SPI
 21756                           
 21757                           ;SDCard.c: 142: argument = arg>>8;
 21758  005004  C066  F06B         	movff	command@arg+1,command@argument
 21759                           
 21760                           ;SDCard.c: 143: escreve_SPI(argument);
 21761  005008  0100               	movlb	0	; () banked
 21762  00500A  516B               	movf	command@argument& (0+255),w,b
 21763  00500C  ECC0  F02B         	call	_escreve_SPI
 21764                           
 21765                           ;SDCard.c: 144: argument = arg;
 21766  005010  C065  F06B         	movff	command@arg,command@argument
 21767                           
 21768                           ;SDCard.c: 145: escreve_SPI(argument);
 21769  005014  0100               	movlb	0	; () banked
 21770  005016  516B               	movf	command@argument& (0+255),w,b
 21771  005018  ECC0  F02B         	call	_escreve_SPI
 21772                           
 21773                           ;SDCard.c: 146: escreve_SPI(CRC);
 21774  00501C  0100               	movlb	0	; () banked
 21775  00501E  5169               	movf	command@CRC& (0+255),w,b
 21776  005020  ECC0  F02B         	call	_escreve_SPI
 21777  005024  0012               	return		;funcret
 21778  005026                     __end_of_command:
 21779                           	opt stack 0
 21780                           tosu	equ	0xFFF
 21781                           tosh	equ	0xFFE
 21782                           tosl	equ	0xFFD
 21783                           pclath	equ	0xFFA
 21784                           tblptru	equ	0xFF8
 21785                           tblptrh	equ	0xFF7
 21786                           tblptrl	equ	0xFF6
 21787                           tablat	equ	0xFF5
 21788                           prodh	equ	0xFF4
 21789                           prodl	equ	0xFF3
 21790                           intcon	equ	0xFF2
 21791                           intcon2	equ	0xFF1
 21792                           intcon3	equ	0xFF0
 21793                           indf0	equ	0xFEF
 21794                           postinc0	equ	0xFEE
 21795                           fsr0h	equ	0xFEA
 21796                           fsr0l	equ	0xFE9
 21797                           wreg	equ	0xFE8
 21798                           indf1	equ	0xFE7
 21799                           postinc1	equ	0xFE6
 21800                           postdec1	equ	0xFE5
 21801                           plusw1	equ	0xFE3
 21802                           fsr1h	equ	0xFE2
 21803                           fsr1l	equ	0xFE1
 21804                           indf2	equ	0xFDF
 21805                           postinc2	equ	0xFDE
 21806                           postdec2	equ	0xFDD
 21807                           plusw2	equ	0xFDB
 21808                           fsr2h	equ	0xFDA
 21809                           fsr2l	equ	0xFD9
 21810                           status	equ	0xFD8
 21811                           
 21812 ;; *************** function _wait_ready *****************
 21813 ;; Defined at:
 21814 ;;		line 105 in file "bibliotecas/SDCard.c"
 21815 ;; Parameters:    Size  Location     Type
 21816 ;;		None
 21817 ;; Auto vars:     Size  Location     Type
 21818 ;;  msg            10    0        unsigned char [10]
 21819 ;;  timeout         4    0[BANK0 ] unsigned long 
 21820 ;;  res             1    4[BANK0 ] unsigned char 
 21821 ;; Return value:  Size  Location     Type
 21822 ;;                  1    wreg      unsigned char 
 21823 ;; Registers used:
 21824 ;;		wreg, status,2, status,0, cstack
 21825 ;; Tracked objects:
 21826 ;;		On entry : 0/0
 21827 ;;		On exit  : 0/0
 21828 ;;		Unchanged: 0/0
 21829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21830 ;;      Params:         0       0       0       0       0       0       0       0       0
 21831 ;;      Locals:         0       5       0       0       0       0       0       0       0
 21832 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21833 ;;      Totals:         0       5       0       0       0       0       0       0       0
 21834 ;;Total ram usage:        5 bytes
 21835 ;; Hardware stack levels used:    1
 21836 ;; Hardware stack levels required when called:    4
 21837 ;; This function calls:
 21838 ;;		_leitura_SPI
 21839 ;; This function is called by:
 21840 ;;		_command
 21841 ;; This function uses a non-reentrant model
 21842 ;;
 21843                           
 21844                           	psect	text79
 21845  00555C                     __ptext79:
 21846                           	opt stack 0
 21847  00555C                     _wait_ready:
 21848                           	opt stack 15
 21849                           
 21850                           ;SDCard.c: 107: BYTE res;
 21851                           ;SDCard.c: 108: DWORD timeout = 0x7FFF;
 21852                           
 21853                           ;incstack = 0
 21854  00555C  0EFF               	movlw	255
 21855  00555E  0100               	movlb	0	; () banked
 21856  005560  6F60               	movwf	wait_ready@timeout& (0+255),b
 21857  005562  0E7F               	movlw	127
 21858  005564  6F61               	movwf	(wait_ready@timeout+1)& (0+255),b
 21859  005566  0E00               	movlw	0
 21860  005568  6F62               	movwf	(wait_ready@timeout+2)& (0+255),b
 21861  00556A  0E00               	movlw	0
 21862  00556C  6F63               	movwf	(wait_ready@timeout+3)& (0+255),b
 21863  00556E                     
 21864                           ; BSR set to: 0
 21865                           ;SDCard.c: 112: res = leitura_SPI();
 21866                           
 21867                           ; BSR set to: 0
 21868  00556E  EC03  F02C         	call	_leitura_SPI	;wreg free
 21869  005572  0100               	movlb	0	; () banked
 21870  005574  6F64               	movwf	wait_ready@res& (0+255),b
 21871                           
 21872                           ; BSR set to: 0
 21873                           ;SDCard.c: 113: while ((res != 0xFF) && (--timeout));
 21874  005576  2964               	incf	wait_ready@res& (0+255),w,b
 21875  005578  B4D8               	btfsc	status,2,c
 21876  00557A  D00B               	goto	u12260
 21877                           
 21878                           ; BSR set to: 0
 21879  00557C  0760               	decf	wait_ready@timeout& (0+255),f,b
 21880  00557E  0E00               	movlw	0
 21881  005580  5B61               	subwfb	(wait_ready@timeout+1)& (0+255),f,b
 21882  005582  5B62               	subwfb	(wait_ready@timeout+2)& (0+255),f,b
 21883  005584  5B63               	subwfb	(wait_ready@timeout+3)& (0+255),f,b
 21884  005586  5160               	movf	wait_ready@timeout& (0+255),w,b
 21885  005588  1161               	iorwf	(wait_ready@timeout+1)& (0+255),w,b
 21886  00558A  1162               	iorwf	(wait_ready@timeout+2)& (0+255),w,b
 21887  00558C  1163               	iorwf	(wait_ready@timeout+3)& (0+255),w,b
 21888  00558E  A4D8               	btfss	status,2,c
 21889  005590  D7EE               	goto	l417
 21890  005592                     u12260:
 21891                           
 21892                           ; BSR set to: 0
 21893                           ;SDCard.c: 115: return res;
 21894                           
 21895                           ; BSR set to: 0
 21896                           
 21897                           ; BSR set to: 0
 21898  005592  5164               	movf	wait_ready@res& (0+255),w,b
 21899  005594  0012               	return	
 21900  005596                     __end_of_wait_ready:
 21901                           	opt stack 0
 21902                           tosu	equ	0xFFF
 21903                           tosh	equ	0xFFE
 21904                           tosl	equ	0xFFD
 21905                           pclath	equ	0xFFA
 21906                           tblptru	equ	0xFF8
 21907                           tblptrh	equ	0xFF7
 21908                           tblptrl	equ	0xFF6
 21909                           tablat	equ	0xFF5
 21910                           prodh	equ	0xFF4
 21911                           prodl	equ	0xFF3
 21912                           intcon	equ	0xFF2
 21913                           intcon2	equ	0xFF1
 21914                           intcon3	equ	0xFF0
 21915                           indf0	equ	0xFEF
 21916                           postinc0	equ	0xFEE
 21917                           fsr0h	equ	0xFEA
 21918                           fsr0l	equ	0xFE9
 21919                           wreg	equ	0xFE8
 21920                           indf1	equ	0xFE7
 21921                           postinc1	equ	0xFE6
 21922                           postdec1	equ	0xFE5
 21923                           plusw1	equ	0xFE3
 21924                           fsr1h	equ	0xFE2
 21925                           fsr1l	equ	0xFE1
 21926                           indf2	equ	0xFDF
 21927                           postinc2	equ	0xFDE
 21928                           postdec2	equ	0xFDD
 21929                           plusw2	equ	0xFDB
 21930                           fsr2h	equ	0xFDA
 21931                           fsr2l	equ	0xFD9
 21932                           status	equ	0xFD8
 21933                           
 21934 ;; *************** function _escreve_SPI *****************
 21935 ;; Defined at:
 21936 ;;		line 98 in file "bibliotecas/SPI.c"
 21937 ;; Parameters:    Size  Location     Type
 21938 ;;  dado            1    wreg     unsigned char 
 21939 ;; Auto vars:     Size  Location     Type
 21940 ;;  dado            1    1[BANK0 ] unsigned char 
 21941 ;;  TempVar         1    0[BANK0 ] unsigned char 
 21942 ;; Return value:  Size  Location     Type
 21943 ;;                  1    wreg      void 
 21944 ;; Registers used:
 21945 ;;		wreg
 21946 ;; Tracked objects:
 21947 ;;		On entry : 0/0
 21948 ;;		On exit  : 0/0
 21949 ;;		Unchanged: 0/0
 21950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21951 ;;      Params:         0       0       0       0       0       0       0       0       0
 21952 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21953 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21954 ;;      Totals:         0       2       0       0       0       0       0       0       0
 21955 ;;Total ram usage:        2 bytes
 21956 ;; Hardware stack levels used:    1
 21957 ;; Hardware stack levels required when called:    3
 21958 ;; This function calls:
 21959 ;;		Nothing
 21960 ;; This function is called by:
 21961 ;;		_proceed
 21962 ;;		_command
 21963 ;;		_sdc_disk_write
 21964 ;; This function uses a non-reentrant model
 21965 ;;
 21966                           
 21967                           	psect	text80
 21968  005780                     __ptext80:
 21969                           	opt stack 0
 21970  005780                     _escreve_SPI:
 21971                           	opt stack 16
 21972                           
 21973                           ; BSR set to: 0
 21974                           ;incstack = 0
 21975                           ;escreve_SPI@dado stored from wreg
 21976  005780  0100               	movlb	0	; () banked
 21977  005782  6F61               	movwf	escreve_SPI@dado& (0+255),b
 21978                           
 21979                           ;SPI.c: 100: unsigned char TempVar;
 21980                           ;SPI.c: 101: TempVar = SSPBUF;
 21981  005784  CFC9 F060          	movff	4041,escreve_SPI@TempVar	;volatile
 21982                           
 21983                           ;SPI.c: 102: PIR1bits.SSPIF = 0;
 21984  005788  969E               	bcf	3998,3,c	;volatile
 21985                           
 21986                           ;SPI.c: 104: SSPBUF = dado;
 21987  00578A  C061  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 21988  00578E  B69E               	btfsc	3998,3,c	;volatile
 21989  005790  0012               	return	
 21990  005792  D7FD               	goto	l501
 21991  005794                     __end_of_escreve_SPI:
 21992                           	opt stack 0
 21993                           tosu	equ	0xFFF
 21994                           tosh	equ	0xFFE
 21995                           tosl	equ	0xFFD
 21996                           pclath	equ	0xFFA
 21997                           tblptru	equ	0xFF8
 21998                           tblptrh	equ	0xFF7
 21999                           tblptrl	equ	0xFF6
 22000                           tablat	equ	0xFF5
 22001                           prodh	equ	0xFF4
 22002                           prodl	equ	0xFF3
 22003                           intcon	equ	0xFF2
 22004                           intcon2	equ	0xFF1
 22005                           intcon3	equ	0xFF0
 22006                           indf0	equ	0xFEF
 22007                           postinc0	equ	0xFEE
 22008                           fsr0h	equ	0xFEA
 22009                           fsr0l	equ	0xFE9
 22010                           wreg	equ	0xFE8
 22011                           indf1	equ	0xFE7
 22012                           postinc1	equ	0xFE6
 22013                           postdec1	equ	0xFE5
 22014                           plusw1	equ	0xFE3
 22015                           fsr1h	equ	0xFE2
 22016                           fsr1l	equ	0xFE1
 22017                           indf2	equ	0xFDF
 22018                           postinc2	equ	0xFDE
 22019                           postdec2	equ	0xFDD
 22020                           plusw2	equ	0xFDB
 22021                           fsr2h	equ	0xFDA
 22022                           fsr2l	equ	0xFD9
 22023                           status	equ	0xFD8
 22024                           
 22025 ;; *************** function _dummy_clocks *****************
 22026 ;; Defined at:
 22027 ;;		line 74 in file "bibliotecas/SDCard.c"
 22028 ;; Parameters:    Size  Location     Type
 22029 ;;  n               1    wreg     unsigned char 
 22030 ;; Auto vars:     Size  Location     Type
 22031 ;;  n               1    2[BANK0 ] unsigned char 
 22032 ;;  i               2    3[BANK0 ] unsigned int 
 22033 ;; Return value:  Size  Location     Type
 22034 ;;                  1    wreg      void 
 22035 ;; Registers used:
 22036 ;;		wreg, status,2, status,0, cstack
 22037 ;; Tracked objects:
 22038 ;;		On entry : 0/0
 22039 ;;		On exit  : 0/0
 22040 ;;		Unchanged: 0/0
 22041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22042 ;;      Params:         0       0       0       0       0       0       0       0       0
 22043 ;;      Locals:         0       3       0       0       0       0       0       0       0
 22044 ;;      Temps:          0       2       0       0       0       0       0       0       0
 22045 ;;      Totals:         0       5       0       0       0       0       0       0       0
 22046 ;;Total ram usage:        5 bytes
 22047 ;; Hardware stack levels used:    1
 22048 ;; Hardware stack levels required when called:    4
 22049 ;; This function calls:
 22050 ;;		_leitura_SPI
 22051 ;; This function is called by:
 22052 ;;		_command
 22053 ;;		_sdc_disk_initialize
 22054 ;;		_sdc_disk_read
 22055 ;;		_sdc_disk_write
 22056 ;; This function uses a non-reentrant model
 22057 ;;
 22058                           
 22059                           	psect	text81
 22060  00541C                     __ptext81:
 22061                           	opt stack 0
 22062  00541C                     _dummy_clocks:
 22063                           	opt stack 16
 22064                           
 22065                           ;incstack = 0
 22066                           ;dummy_clocks@n stored from wreg
 22067  00541C  0100               	movlb	0	; () banked
 22068  00541E  6F62               	movwf	dummy_clocks@n& (0+255),b
 22069                           
 22070                           ;SDCard.c: 76: unsigned int i;
 22071                           ;SDCard.c: 77: _delay((unsigned long)((1)*(48000000/4000.0)));
 22072  005420  0E10               	movlw	16
 22073  005422  0100               	movlb	0	; () banked
 22074  005424  6F60               	movwf	??_dummy_clocks& (0+255),b
 22075  005426  0E94               	movlw	148
 22076  005428                     u17687:
 22077  005428  2EE8               	decfsz	wreg,f,c
 22078  00542A  D7FE               	bra	u17687
 22079  00542C  2F60               	decfsz	??_dummy_clocks& (0+255),f,b
 22080  00542E  D7FC               	bra	u17687
 22081  005430  F000               	nop	
 22082                           
 22083                           ;SDCard.c: 78: for(i=0;i<n;i++)
 22084  005432  0E00               	movlw	0
 22085  005434  0100               	movlb	0	; () banked
 22086  005436  6F64               	movwf	(dummy_clocks@i+1)& (0+255),b
 22087  005438  0E00               	movlw	0
 22088  00543A  6F63               	movwf	dummy_clocks@i& (0+255),b
 22089  00543C  D007               	goto	l408
 22090  00543E                     l409:
 22091                           
 22092                           ; BSR set to: 0
 22093                           ;SDCard.c: 79: {
 22094                           ;SDCard.c: 80: LATBbits.LATB4 = 1;
 22095  00543E  888A               	bsf	3978,4,c	;volatile
 22096                           
 22097                           ; BSR set to: 0
 22098                           ;SDCard.c: 81: leitura_SPI();
 22099  005440  EC03  F02C         	call	_leitura_SPI	;wreg free
 22100                           
 22101                           ;SDCard.c: 82: LATBbits.LATB4 = 0;
 22102  005444  988A               	bcf	3978,4,c	;volatile
 22103  005446  0100               	movlb	0	; () banked
 22104  005448  4B63               	infsnz	dummy_clocks@i& (0+255),f,b
 22105  00544A  2B64               	incf	(dummy_clocks@i+1)& (0+255),f,b
 22106  00544C                     l408:
 22107                           
 22108                           ; BSR set to: 0
 22109                           
 22110                           ; BSR set to: 0
 22111  00544C  5162               	movf	dummy_clocks@n& (0+255),w,b
 22112  00544E  6F60               	movwf	??_dummy_clocks& (0+255),b
 22113  005450  6B61               	clrf	(??_dummy_clocks+1)& (0+255),b
 22114  005452  5160               	movf	??_dummy_clocks& (0+255),w,b
 22115  005454  5D63               	subwf	dummy_clocks@i& (0+255),w,b
 22116  005456  5161               	movf	(??_dummy_clocks+1)& (0+255),w,b
 22117  005458  5964               	subwfb	(dummy_clocks@i+1)& (0+255),w,b
 22118  00545A  B0D8               	btfsc	status,0,c
 22119  00545C  0012               	return	
 22120  00545E  D7EF               	goto	l409
 22121  005460                     __end_of_dummy_clocks:
 22122                           	opt stack 0
 22123                           tosu	equ	0xFFF
 22124                           tosh	equ	0xFFE
 22125                           tosl	equ	0xFFD
 22126                           pclath	equ	0xFFA
 22127                           tblptru	equ	0xFF8
 22128                           tblptrh	equ	0xFF7
 22129                           tblptrl	equ	0xFF6
 22130                           tablat	equ	0xFF5
 22131                           prodh	equ	0xFF4
 22132                           prodl	equ	0xFF3
 22133                           intcon	equ	0xFF2
 22134                           intcon2	equ	0xFF1
 22135                           intcon3	equ	0xFF0
 22136                           indf0	equ	0xFEF
 22137                           postinc0	equ	0xFEE
 22138                           fsr0h	equ	0xFEA
 22139                           fsr0l	equ	0xFE9
 22140                           wreg	equ	0xFE8
 22141                           indf1	equ	0xFE7
 22142                           postinc1	equ	0xFE6
 22143                           postdec1	equ	0xFE5
 22144                           plusw1	equ	0xFE3
 22145                           fsr1h	equ	0xFE2
 22146                           fsr1l	equ	0xFE1
 22147                           indf2	equ	0xFDF
 22148                           postinc2	equ	0xFDE
 22149                           postdec2	equ	0xFDD
 22150                           plusw2	equ	0xFDB
 22151                           fsr2h	equ	0xFDA
 22152                           fsr2l	equ	0xFD9
 22153                           status	equ	0xFD8
 22154                           
 22155 ;; *************** function _leitura_SPI *****************
 22156 ;; Defined at:
 22157 ;;		line 83 in file "bibliotecas/SPI.c"
 22158 ;; Parameters:    Size  Location     Type
 22159 ;;		None
 22160 ;; Auto vars:     Size  Location     Type
 22161 ;;		None
 22162 ;; Return value:  Size  Location     Type
 22163 ;;                  1    wreg      unsigned char 
 22164 ;; Registers used:
 22165 ;;		wreg, status,2
 22166 ;; Tracked objects:
 22167 ;;		On entry : 0/0
 22168 ;;		On exit  : 0/0
 22169 ;;		Unchanged: 0/0
 22170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22171 ;;      Params:         0       0       0       0       0       0       0       0       0
 22172 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22173 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22174 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22175 ;;Total ram usage:        0 bytes
 22176 ;; Hardware stack levels used:    1
 22177 ;; Hardware stack levels required when called:    3
 22178 ;; This function calls:
 22179 ;;		Nothing
 22180 ;; This function is called by:
 22181 ;;		_response
 22182 ;;		_dummy_clocks
 22183 ;;		_wait_ready
 22184 ;;		_sdc_disk_write
 22185 ;; This function uses a non-reentrant model
 22186 ;;
 22187                           
 22188                           	psect	text82
 22189  005806                     __ptext82:
 22190                           	opt stack 0
 22191  005806                     _leitura_SPI:
 22192                           	opt stack 16
 22193                           
 22194                           ;SPI.c: 85: SSPBUF = 0xFF;
 22195                           
 22196                           ; BSR set to: 0
 22197                           ;incstack = 0
 22198  005806  68C9               	setf	4041,c	;volatile
 22199                           
 22200                           ;SPI.c: 86: SSPSTATbits.BF = 0;
 22201  005808  90C7               	bcf	4039,0,c	;volatile
 22202  00580A  A0C7               	btfss	4039,0,c	;volatile
 22203  00580C  D7FE               	goto	l495
 22204                           
 22205                           ;SPI.c: 88: return (SSPBUF);
 22206  00580E  50C9               	movf	4041,w,c	;volatile
 22207  005810  0012               	return	
 22208  005812                     __end_of_leitura_SPI:
 22209                           	opt stack 0
 22210                           tosu	equ	0xFFF
 22211                           tosh	equ	0xFFE
 22212                           tosl	equ	0xFFD
 22213                           pclath	equ	0xFFA
 22214                           tblptru	equ	0xFF8
 22215                           tblptrh	equ	0xFF7
 22216                           tblptrl	equ	0xFF6
 22217                           tablat	equ	0xFF5
 22218                           prodh	equ	0xFF4
 22219                           prodl	equ	0xFF3
 22220                           intcon	equ	0xFF2
 22221                           intcon2	equ	0xFF1
 22222                           intcon3	equ	0xFF0
 22223                           indf0	equ	0xFEF
 22224                           postinc0	equ	0xFEE
 22225                           fsr0h	equ	0xFEA
 22226                           fsr0l	equ	0xFE9
 22227                           wreg	equ	0xFE8
 22228                           indf1	equ	0xFE7
 22229                           postinc1	equ	0xFE6
 22230                           postdec1	equ	0xFE5
 22231                           plusw1	equ	0xFE3
 22232                           fsr1h	equ	0xFE2
 22233                           fsr1l	equ	0xFE1
 22234                           indf2	equ	0xFDF
 22235                           postinc2	equ	0xFDE
 22236                           postdec2	equ	0xFDD
 22237                           plusw2	equ	0xFDB
 22238                           fsr2h	equ	0xFDA
 22239                           fsr2l	equ	0xFD9
 22240                           status	equ	0xFD8
 22241                           
 22242 ;; *************** function _disk_ioctl *****************
 22243 ;; Defined at:
 22244 ;;		line 198 in file "bibliotecas/diskio.c"
 22245 ;; Parameters:    Size  Location     Type
 22246 ;;  pdrv            1    wreg     unsigned char 
 22247 ;;  cmd             1    0[BANK0 ] unsigned char 
 22248 ;;  buff            2    1[BANK0 ] PTR void 
 22249 ;;		 -> NULL(0), 
 22250 ;; Auto vars:     Size  Location     Type
 22251 ;;  pdrv            1    3[BANK0 ] unsigned char 
 22252 ;;  result          2    0        int 
 22253 ;;  res             1    4[BANK0 ] enum E25
 22254 ;; Return value:  Size  Location     Type
 22255 ;;                  1    wreg      enum E25
 22256 ;; Registers used:
 22257 ;;		wreg, status,2, status,0
 22258 ;; Tracked objects:
 22259 ;;		On entry : 0/0
 22260 ;;		On exit  : 0/0
 22261 ;;		Unchanged: 0/0
 22262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22263 ;;      Params:         0       3       0       0       0       0       0       0       0
 22264 ;;      Locals:         0       2       0       0       0       0       0       0       0
 22265 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22266 ;;      Totals:         0       5       0       0       0       0       0       0       0
 22267 ;;Total ram usage:        5 bytes
 22268 ;; Hardware stack levels used:    1
 22269 ;; Hardware stack levels required when called:    3
 22270 ;; This function calls:
 22271 ;;		Nothing
 22272 ;; This function is called by:
 22273 ;;		_sync
 22274 ;; This function uses a non-reentrant model
 22275 ;;
 22276                           
 22277                           	psect	text83
 22278  005620                     __ptext83:
 22279                           	opt stack 0
 22280  005620                     _disk_ioctl:
 22281                           	opt stack 21
 22282                           
 22283                           ;incstack = 0
 22284                           ;disk_ioctl@pdrv stored from wreg
 22285  005620  0100               	movlb	0	; () banked
 22286  005622  6F63               	movwf	disk_ioctl@pdrv& (0+255),b
 22287                           
 22288                           ;diskio.c: 204: DRESULT res;
 22289                           ;diskio.c: 205: int result;
 22290                           ;diskio.c: 207: switch (pdrv) {
 22291  005624  D006               	goto	l570
 22292  005626                     l571:
 22293                           
 22294                           ; BSR set to: 0
 22295                           ;diskio.c: 212: return res;
 22296  005626  5164               	movf	disk_ioctl@res& (0+255),w,b
 22297  005628  0012               	return	
 22298  00562A                     l573:
 22299                           
 22300                           ; BSR set to: 0
 22301                           ;diskio.c: 218: return res;
 22302  00562A  5164               	movf	disk_ioctl@res& (0+255),w,b
 22303  00562C  0012               	return	
 22304  00562E                     l574:
 22305                           
 22306                           ; BSR set to: 0
 22307                           ;diskio.c: 224: return res;
 22308  00562E  5164               	movf	disk_ioctl@res& (0+255),w,b
 22309  005630  0012               	return	
 22310  005632                     l570:
 22311                           
 22312                           ; BSR set to: 0
 22313  005632  0100               	movlb	0	; () banked
 22314  005634  5163               	movf	disk_ioctl@pdrv& (0+255),w,b
 22315                           
 22316                           ; Switch size 1, requested type "space"
 22317                           ; Number of cases is 3, Range of values is 0 to 2
 22318                           ; switch strategies available:
 22319                           ; Name         Instructions Cycles
 22320                           ; simple_byte           10     6 (average)
 22321                           ;	Chosen strategy is simple_byte
 22322  005636  0A00               	xorlw	0	; case 0
 22323  005638  B4D8               	btfsc	status,2,c
 22324  00563A  D7F5               	goto	l571
 22325  00563C  0A01               	xorlw	1	; case 1
 22326  00563E  B4D8               	btfsc	status,2,c
 22327  005640  D7F4               	goto	l573
 22328  005642  0A03               	xorlw	3	; case 2
 22329  005644  B4D8               	btfsc	status,2,c
 22330  005646  D7F3               	goto	l574
 22331                           
 22332                           ; BSR set to: 0
 22333                           ;diskio.c: 227: return RES_PARERR;
 22334                           
 22335                           ; BSR set to: 0
 22336  005648  0E04               	movlw	4
 22337  00564A  0012               	return	
 22338  00564C                     __end_of_disk_ioctl:
 22339                           	opt stack 0
 22340                           tosu	equ	0xFFF
 22341                           tosh	equ	0xFFE
 22342                           tosl	equ	0xFFD
 22343                           pclath	equ	0xFFA
 22344                           tblptru	equ	0xFF8
 22345                           tblptrh	equ	0xFF7
 22346                           tblptrl	equ	0xFF6
 22347                           tablat	equ	0xFF5
 22348                           prodh	equ	0xFF4
 22349                           prodl	equ	0xFF3
 22350                           intcon	equ	0xFF2
 22351                           intcon2	equ	0xFF1
 22352                           intcon3	equ	0xFF0
 22353                           indf0	equ	0xFEF
 22354                           postinc0	equ	0xFEE
 22355                           fsr0h	equ	0xFEA
 22356                           fsr0l	equ	0xFE9
 22357                           wreg	equ	0xFE8
 22358                           indf1	equ	0xFE7
 22359                           postinc1	equ	0xFE6
 22360                           postdec1	equ	0xFE5
 22361                           plusw1	equ	0xFE3
 22362                           fsr1h	equ	0xFE2
 22363                           fsr1l	equ	0xFE1
 22364                           indf2	equ	0xFDF
 22365                           postinc2	equ	0xFDE
 22366                           postdec2	equ	0xFDD
 22367                           plusw2	equ	0xFDB
 22368                           fsr2h	equ	0xFDA
 22369                           fsr2l	equ	0xFD9
 22370                           status	equ	0xFD8
 22371                           
 22372 ;; *************** function _get_fattime *****************
 22373 ;; Defined at:
 22374 ;;		line 809 in file "bibliotecas/tff.c"
 22375 ;; Parameters:    Size  Location     Type
 22376 ;;		None
 22377 ;; Auto vars:     Size  Location     Type
 22378 ;;  f_time          9   42[BANK0 ] struct .
 22379 ;; Return value:  Size  Location     Type
 22380 ;;                  4    0[BANK0 ] unsigned long 
 22381 ;; Registers used:
 22382 ;;		wreg, status,2, status,0
 22383 ;; Tracked objects:
 22384 ;;		On entry : 0/0
 22385 ;;		On exit  : 0/0
 22386 ;;		Unchanged: 0/0
 22387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22388 ;;      Params:         0       4       0       0       0       0       0       0       0
 22389 ;;      Locals:         0       9       0       0       0       0       0       0       0
 22390 ;;      Temps:          0      38       0       0       0       0       0       0       0
 22391 ;;      Totals:         0      51       0       0       0       0       0       0       0
 22392 ;;Total ram usage:       51 bytes
 22393 ;; Hardware stack levels used:    1
 22394 ;; Hardware stack levels required when called:    3
 22395 ;; This function calls:
 22396 ;;		Nothing
 22397 ;; This function is called by:
 22398 ;;		_f_open
 22399 ;;		_f_sync
 22400 ;; This function uses a non-reentrant model
 22401 ;;
 22402                           
 22403                           	psect	text84
 22404  003FA4                     __ptext84:
 22405                           	opt stack 0
 22406  003FA4                     _get_fattime:
 22407                           	opt stack 23
 22408                           
 22409                           ;tff.c: 811: fat_time f_time;
 22410                           ;tff.c: 813: return (DWORD)(f_time.ano ) << 25 |
 22411                           ;tff.c: 814: (DWORD)(f_time.mes) << 21 |
 22412                           ;tff.c: 815: (DWORD)(f_time.mes) << 16 |
 22413                           ;tff.c: 816: (DWORD)(f_time.hora) << 11 |
 22414                           ;tff.c: 817: (DWORD)(f_time.min) << 5 |
 22415                           ;tff.c: 818: (DWORD)(f_time.seg) >> 1;
 22416                           
 22417                           ; BSR set to: 0
 22418                           ;incstack = 0
 22419  003FA4  90D8               	bcf	status,0,c
 22420  003FA6  0100               	movlb	0	; () banked
 22421  003FA8  318F               	rrcf	(get_fattime@f_time+5)& (0+255),w,b
 22422  003FAA  6F65               	movwf	(??_get_fattime+1)& (0+255),b
 22423  003FAC  318E               	rrcf	(get_fattime@f_time+4)& (0+255),w,b
 22424  003FAE  6F64               	movwf	??_get_fattime& (0+255),b
 22425  003FB0  518C               	movf	(get_fattime@f_time+2)& (0+255),w,b
 22426  003FB2  6F66               	movwf	(??_get_fattime+2)& (0+255),b
 22427  003FB4  518D               	movf	(get_fattime@f_time+3)& (0+255),w,b
 22428  003FB6  6F67               	movwf	(??_get_fattime+3)& (0+255),b
 22429  003FB8  6B68               	clrf	(??_get_fattime+4)& (0+255),b
 22430  003FBA  6B69               	clrf	(??_get_fattime+5)& (0+255),b
 22431  003FBC  0E05               	movlw	5
 22432  003FBE                     u14165:
 22433  003FBE  90D8               	bcf	status,0,c
 22434  003FC0  3766               	rlcf	(??_get_fattime+2)& (0+255),f,b
 22435  003FC2  3767               	rlcf	(??_get_fattime+3)& (0+255),f,b
 22436  003FC4  3768               	rlcf	(??_get_fattime+4)& (0+255),f,b
 22437  003FC6  3769               	rlcf	(??_get_fattime+5)& (0+255),f,b
 22438  003FC8  2EE8               	decfsz	wreg,f,c
 22439  003FCA  D7F9               	goto	u14165
 22440  003FCC  518A               	movf	get_fattime@f_time& (0+255),w,b
 22441  003FCE  6F6A               	movwf	(??_get_fattime+6)& (0+255),b
 22442  003FD0  518B               	movf	(get_fattime@f_time+1)& (0+255),w,b
 22443  003FD2  6F6B               	movwf	(??_get_fattime+7)& (0+255),b
 22444  003FD4  6B6C               	clrf	(??_get_fattime+8)& (0+255),b
 22445  003FD6  6B6D               	clrf	(??_get_fattime+9)& (0+255),b
 22446  003FD8  0E0B               	movlw	11
 22447  003FDA                     u14175:
 22448  003FDA  90D8               	bcf	status,0,c
 22449  003FDC  376A               	rlcf	(??_get_fattime+6)& (0+255),f,b
 22450  003FDE  376B               	rlcf	(??_get_fattime+7)& (0+255),f,b
 22451  003FE0  376C               	rlcf	(??_get_fattime+8)& (0+255),f,b
 22452  003FE2  376D               	rlcf	(??_get_fattime+9)& (0+255),f,b
 22453  003FE4  2EE8               	decfsz	wreg,f,c
 22454  003FE6  D7F9               	goto	u14175
 22455  003FE8  C091  F06E         	movff	get_fattime@f_time+7,??_get_fattime+10
 22456  003FEC  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 22457  003FEE  6B70               	clrf	(??_get_fattime+12)& (0+255),b
 22458  003FF0  6B71               	clrf	(??_get_fattime+13)& (0+255),b
 22459  003FF2  C06F  F071         	movff	??_get_fattime+11,??_get_fattime+13
 22460  003FF6  C06E  F070         	movff	??_get_fattime+10,??_get_fattime+12
 22461  003FFA  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 22462  003FFC  6B6E               	clrf	(??_get_fattime+10)& (0+255),b
 22463  003FFE  C091  F072         	movff	get_fattime@f_time+7,??_get_fattime+14
 22464  004002  6B73               	clrf	(??_get_fattime+15)& (0+255),b
 22465  004004  6B74               	clrf	(??_get_fattime+16)& (0+255),b
 22466  004006  6B75               	clrf	(??_get_fattime+17)& (0+255),b
 22467  004008  0E15               	movlw	21
 22468  00400A                     u14185:
 22469  00400A  90D8               	bcf	status,0,c
 22470  00400C  3772               	rlcf	(??_get_fattime+14)& (0+255),f,b
 22471  00400E  3773               	rlcf	(??_get_fattime+15)& (0+255),f,b
 22472  004010  3774               	rlcf	(??_get_fattime+16)& (0+255),f,b
 22473  004012  3775               	rlcf	(??_get_fattime+17)& (0+255),f,b
 22474  004014  2EE8               	decfsz	wreg,f,c
 22475  004016  D7F9               	goto	u14185
 22476  004018  C092  F076         	movff	get_fattime@f_time+8,??_get_fattime+18
 22477  00401C  6B77               	clrf	(??_get_fattime+19)& (0+255),b
 22478  00401E  6B78               	clrf	(??_get_fattime+20)& (0+255),b
 22479  004020  6B79               	clrf	(??_get_fattime+21)& (0+255),b
 22480  004022  0E19               	movlw	25
 22481  004024                     u14195:
 22482  004024  90D8               	bcf	status,0,c
 22483  004026  3776               	rlcf	(??_get_fattime+18)& (0+255),f,b
 22484  004028  3777               	rlcf	(??_get_fattime+19)& (0+255),f,b
 22485  00402A  3778               	rlcf	(??_get_fattime+20)& (0+255),f,b
 22486  00402C  3779               	rlcf	(??_get_fattime+21)& (0+255),f,b
 22487  00402E  2EE8               	decfsz	wreg,f,c
 22488  004030  D7F9               	goto	u14195
 22489  004032  5172               	movf	(??_get_fattime+14)& (0+255),w,b
 22490  004034  1176               	iorwf	(??_get_fattime+18)& (0+255),w,b
 22491  004036  6F7A               	movwf	(??_get_fattime+22)& (0+255),b
 22492  004038  5173               	movf	(??_get_fattime+15)& (0+255),w,b
 22493  00403A  1177               	iorwf	(??_get_fattime+19)& (0+255),w,b
 22494  00403C  6F7B               	movwf	(??_get_fattime+23)& (0+255),b
 22495  00403E  5174               	movf	(??_get_fattime+16)& (0+255),w,b
 22496  004040  1178               	iorwf	(??_get_fattime+20)& (0+255),w,b
 22497  004042  6F7C               	movwf	(??_get_fattime+24)& (0+255),b
 22498  004044  5175               	movf	(??_get_fattime+17)& (0+255),w,b
 22499  004046  1179               	iorwf	(??_get_fattime+21)& (0+255),w,b
 22500  004048  6F7D               	movwf	(??_get_fattime+25)& (0+255),b
 22501  00404A  516E               	movf	(??_get_fattime+10)& (0+255),w,b
 22502  00404C  117A               	iorwf	(??_get_fattime+22)& (0+255),w,b
 22503  00404E  6F7E               	movwf	(??_get_fattime+26)& (0+255),b
 22504  004050  516F               	movf	(??_get_fattime+11)& (0+255),w,b
 22505  004052  117B               	iorwf	(??_get_fattime+23)& (0+255),w,b
 22506  004054  6F7F               	movwf	(??_get_fattime+27)& (0+255),b
 22507  004056  5170               	movf	(??_get_fattime+12)& (0+255),w,b
 22508  004058  117C               	iorwf	(??_get_fattime+24)& (0+255),w,b
 22509  00405A  6F80               	movwf	(??_get_fattime+28)& (0+255),b
 22510  00405C  5171               	movf	(??_get_fattime+13)& (0+255),w,b
 22511  00405E  117D               	iorwf	(??_get_fattime+25)& (0+255),w,b
 22512  004060  6F81               	movwf	(??_get_fattime+29)& (0+255),b
 22513  004062  516A               	movf	(??_get_fattime+6)& (0+255),w,b
 22514  004064  117E               	iorwf	(??_get_fattime+26)& (0+255),w,b
 22515  004066  6F82               	movwf	(??_get_fattime+30)& (0+255),b
 22516  004068  516B               	movf	(??_get_fattime+7)& (0+255),w,b
 22517  00406A  117F               	iorwf	(??_get_fattime+27)& (0+255),w,b
 22518  00406C  6F83               	movwf	(??_get_fattime+31)& (0+255),b
 22519  00406E  516C               	movf	(??_get_fattime+8)& (0+255),w,b
 22520  004070  1180               	iorwf	(??_get_fattime+28)& (0+255),w,b
 22521  004072  6F84               	movwf	(??_get_fattime+32)& (0+255),b
 22522  004074  516D               	movf	(??_get_fattime+9)& (0+255),w,b
 22523  004076  1181               	iorwf	(??_get_fattime+29)& (0+255),w,b
 22524  004078  6F85               	movwf	(??_get_fattime+33)& (0+255),b
 22525  00407A  5166               	movf	(??_get_fattime+2)& (0+255),w,b
 22526  00407C  1182               	iorwf	(??_get_fattime+30)& (0+255),w,b
 22527  00407E  6F86               	movwf	(??_get_fattime+34)& (0+255),b
 22528  004080  5167               	movf	(??_get_fattime+3)& (0+255),w,b
 22529  004082  1183               	iorwf	(??_get_fattime+31)& (0+255),w,b
 22530  004084  6F87               	movwf	(??_get_fattime+35)& (0+255),b
 22531  004086  5168               	movf	(??_get_fattime+4)& (0+255),w,b
 22532  004088  1184               	iorwf	(??_get_fattime+32)& (0+255),w,b
 22533  00408A  6F88               	movwf	(??_get_fattime+36)& (0+255),b
 22534  00408C  5169               	movf	(??_get_fattime+5)& (0+255),w,b
 22535  00408E  1185               	iorwf	(??_get_fattime+33)& (0+255),w,b
 22536  004090  6F89               	movwf	(??_get_fattime+37)& (0+255),b
 22537  004092  5164               	movf	??_get_fattime& (0+255),w,b
 22538  004094  1186               	iorwf	(??_get_fattime+34)& (0+255),w,b
 22539  004096  6F60               	movwf	?_get_fattime& (0+255),b
 22540  004098  5165               	movf	(??_get_fattime+1)& (0+255),w,b
 22541  00409A  1187               	iorwf	(??_get_fattime+35)& (0+255),w,b
 22542  00409C  6F61               	movwf	(?_get_fattime+1)& (0+255),b
 22543  00409E  0E00               	movlw	0
 22544  0040A0  1188               	iorwf	(??_get_fattime+36)& (0+255),w,b
 22545  0040A2  6F62               	movwf	(?_get_fattime+2)& (0+255),b
 22546  0040A4  0E00               	movlw	0
 22547  0040A6  1189               	iorwf	(??_get_fattime+37)& (0+255),w,b
 22548  0040A8  6F63               	movwf	(?_get_fattime+3)& (0+255),b
 22549  0040AA  0012               	return	
 22550  0040AC                     __end_of_get_fattime:
 22551                           	opt stack 0
 22552                           tosu	equ	0xFFF
 22553                           tosh	equ	0xFFE
 22554                           tosl	equ	0xFFD
 22555                           pclath	equ	0xFFA
 22556                           tblptru	equ	0xFF8
 22557                           tblptrh	equ	0xFF7
 22558                           tblptrl	equ	0xFF6
 22559                           tablat	equ	0xFF5
 22560                           prodh	equ	0xFF4
 22561                           prodl	equ	0xFF3
 22562                           intcon	equ	0xFF2
 22563                           intcon2	equ	0xFF1
 22564                           intcon3	equ	0xFF0
 22565                           indf0	equ	0xFEF
 22566                           postinc0	equ	0xFEE
 22567                           fsr0h	equ	0xFEA
 22568                           fsr0l	equ	0xFE9
 22569                           wreg	equ	0xFE8
 22570                           indf1	equ	0xFE7
 22571                           postinc1	equ	0xFE6
 22572                           postdec1	equ	0xFE5
 22573                           plusw1	equ	0xFE3
 22574                           fsr1h	equ	0xFE2
 22575                           fsr1l	equ	0xFE1
 22576                           indf2	equ	0xFDF
 22577                           postinc2	equ	0xFDE
 22578                           postdec2	equ	0xFDD
 22579                           plusw2	equ	0xFDB
 22580                           fsr2h	equ	0xFDA
 22581                           fsr2l	equ	0xFD9
 22582                           status	equ	0xFD8
 22583                           
 22584 ;; *************** function _desliga_uart *****************
 22585 ;; Defined at:
 22586 ;;		line 219 in file "bibliotecas/uart.c"
 22587 ;; Parameters:    Size  Location     Type
 22588 ;;		None
 22589 ;; Auto vars:     Size  Location     Type
 22590 ;;		None
 22591 ;; Return value:  Size  Location     Type
 22592 ;;                  1    wreg      void 
 22593 ;; Registers used:
 22594 ;;		wreg, status,2
 22595 ;; Tracked objects:
 22596 ;;		On entry : 0/0
 22597 ;;		On exit  : 0/0
 22598 ;;		Unchanged: 0/0
 22599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22600 ;;      Params:         0       0       0       0       0       0       0       0       0
 22601 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22602 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22603 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22604 ;;Total ram usage:        0 bytes
 22605 ;; Hardware stack levels used:    1
 22606 ;; Hardware stack levels required when called:    3
 22607 ;; This function calls:
 22608 ;;		Nothing
 22609 ;; This function is called by:
 22610 ;;		_escrita_sdcard
 22611 ;;		_sdcard_init
 22612 ;;		_leitura_sdcard
 22613 ;; This function uses a non-reentrant model
 22614 ;;
 22615                           
 22616                           	psect	text85
 22617  0057D4                     __ptext85:
 22618                           	opt stack 0
 22619  0057D4                     _desliga_uart:
 22620                           	opt stack 24
 22621                           
 22622                           ;uart.c: 221: TRISCbits.RC6 = 1;
 22623                           
 22624                           ; BSR set to: 0
 22625                           ;incstack = 0
 22626  0057D4  8C94               	bsf	3988,6,c	;volatile
 22627                           
 22628                           ;uart.c: 222: TRISCbits.RC7 = 1;
 22629  0057D6  8E94               	bsf	3988,7,c	;volatile
 22630                           
 22631                           ;uart.c: 225: TXSTA = 0x00;
 22632  0057D8  0E00               	movlw	0
 22633  0057DA  6EAC               	movwf	4012,c	;volatile
 22634                           
 22635                           ;uart.c: 227: RCSTA = 0x00;
 22636  0057DC  0E00               	movlw	0
 22637  0057DE  6EAB               	movwf	4011,c	;volatile
 22638  0057E0  0012               	return		;funcret
 22639  0057E2                     __end_of_desliga_uart:
 22640                           	opt stack 0
 22641                           tosu	equ	0xFFF
 22642                           tosh	equ	0xFFE
 22643                           tosl	equ	0xFFD
 22644                           pclath	equ	0xFFA
 22645                           tblptru	equ	0xFF8
 22646                           tblptrh	equ	0xFF7
 22647                           tblptrl	equ	0xFF6
 22648                           tablat	equ	0xFF5
 22649                           prodh	equ	0xFF4
 22650                           prodl	equ	0xFF3
 22651                           intcon	equ	0xFF2
 22652                           intcon2	equ	0xFF1
 22653                           intcon3	equ	0xFF0
 22654                           indf0	equ	0xFEF
 22655                           postinc0	equ	0xFEE
 22656                           fsr0h	equ	0xFEA
 22657                           fsr0l	equ	0xFE9
 22658                           wreg	equ	0xFE8
 22659                           indf1	equ	0xFE7
 22660                           postinc1	equ	0xFE6
 22661                           postdec1	equ	0xFE5
 22662                           plusw1	equ	0xFE3
 22663                           fsr1h	equ	0xFE2
 22664                           fsr1l	equ	0xFE1
 22665                           indf2	equ	0xFDF
 22666                           postinc2	equ	0xFDE
 22667                           postdec2	equ	0xFDD
 22668                           plusw2	equ	0xFDB
 22669                           fsr2h	equ	0xFDA
 22670                           fsr2l	equ	0xFD9
 22671                           status	equ	0xFD8
 22672                           
 22673 ;; *************** function _desliga_SPI *****************
 22674 ;; Defined at:
 22675 ;;		line 69 in file "bibliotecas/SPI.c"
 22676 ;; Parameters:    Size  Location     Type
 22677 ;;		None
 22678 ;; Auto vars:     Size  Location     Type
 22679 ;;		None
 22680 ;; Return value:  Size  Location     Type
 22681 ;;                  1    wreg      void 
 22682 ;; Registers used:
 22683 ;;		wreg, status,2
 22684 ;; Tracked objects:
 22685 ;;		On entry : 0/0
 22686 ;;		On exit  : 0/0
 22687 ;;		Unchanged: 0/0
 22688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22689 ;;      Params:         0       0       0       0       0       0       0       0       0
 22690 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22691 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22692 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22693 ;;Total ram usage:        0 bytes
 22694 ;; Hardware stack levels used:    1
 22695 ;; Hardware stack levels required when called:    3
 22696 ;; This function calls:
 22697 ;;		Nothing
 22698 ;; This function is called by:
 22699 ;;		_escrita_sdcard
 22700 ;;		_leitura_sdcard
 22701 ;; This function uses a non-reentrant model
 22702 ;;
 22703                           
 22704                           	psect	text86
 22705  005812                     __ptext86:
 22706                           	opt stack 0
 22707  005812                     _desliga_SPI:
 22708                           	opt stack 24
 22709                           
 22710                           ;SPI.c: 71: SSPSTAT = 0x00;
 22711                           
 22712                           ;incstack = 0
 22713  005812  0E00               	movlw	0
 22714  005814  6EC7               	movwf	4039,c	;volatile
 22715                           
 22716                           ;SPI.c: 72: SSPCON1 = 0x00;
 22717  005816  0E00               	movlw	0
 22718  005818  6EC6               	movwf	4038,c	;volatile
 22719                           
 22720                           ;SPI.c: 73: SSPCON1bits.SSPEN = 0;
 22721  00581A  9AC6               	bcf	4038,5,c	;volatile
 22722  00581C  0012               	return		;funcret
 22723  00581E                     __end_of_desliga_SPI:
 22724                           	opt stack 0
 22725                           tosu	equ	0xFFF
 22726                           tosh	equ	0xFFE
 22727                           tosl	equ	0xFFD
 22728                           pclath	equ	0xFFA
 22729                           tblptru	equ	0xFF8
 22730                           tblptrh	equ	0xFF7
 22731                           tblptrl	equ	0xFF6
 22732                           tablat	equ	0xFF5
 22733                           prodh	equ	0xFF4
 22734                           prodl	equ	0xFF3
 22735                           intcon	equ	0xFF2
 22736                           intcon2	equ	0xFF1
 22737                           intcon3	equ	0xFF0
 22738                           indf0	equ	0xFEF
 22739                           postinc0	equ	0xFEE
 22740                           fsr0h	equ	0xFEA
 22741                           fsr0l	equ	0xFE9
 22742                           wreg	equ	0xFE8
 22743                           indf1	equ	0xFE7
 22744                           postinc1	equ	0xFE6
 22745                           postdec1	equ	0xFE5
 22746                           plusw1	equ	0xFE3
 22747                           fsr1h	equ	0xFE2
 22748                           fsr1l	equ	0xFE1
 22749                           indf2	equ	0xFDF
 22750                           postinc2	equ	0xFDE
 22751                           postdec2	equ	0xFDD
 22752                           plusw2	equ	0xFDB
 22753                           fsr2h	equ	0xFDA
 22754                           fsr2l	equ	0xFD9
 22755                           status	equ	0xFD8
 22756                           
 22757 ;; *************** function _dados_gps_to_sd *****************
 22758 ;; Defined at:
 22759 ;;		line 643 in file "bibliotecas/GPS.c"
 22760 ;; Parameters:    Size  Location     Type
 22761 ;;		None
 22762 ;; Auto vars:     Size  Location     Type
 22763 ;;		None
 22764 ;; Return value:  Size  Location     Type
 22765 ;;                  1    wreg      void 
 22766 ;; Registers used:
 22767 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22768 ;; Tracked objects:
 22769 ;;		On entry : 0/0
 22770 ;;		On exit  : 0/0
 22771 ;;		Unchanged: 0/0
 22772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22773 ;;      Params:         0       0       0       0       0       0       0       0       0
 22774 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22775 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22776 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22777 ;;Total ram usage:        0 bytes
 22778 ;; Hardware stack levels used:    1
 22779 ;; Hardware stack levels required when called:    5
 22780 ;; This function calls:
 22781 ;;		_monta_sd
 22782 ;; This function is called by:
 22783 ;;		_main
 22784 ;; This function uses a non-reentrant model
 22785 ;;
 22786                           
 22787                           	psect	text87
 22788  005460                     __ptext87:
 22789                           	opt stack 0
 22790  005460                     _dados_gps_to_sd:
 22791                           	opt stack 25
 22792                           
 22793                           ;GPS.c: 645: monta_sd(0, rawTime);
 22794                           
 22795                           ;incstack = 0
 22796  005460  0EF2               	movlw	low _rawTime
 22797  005462  0100               	movlb	0	; () banked
 22798  005464  6F66               	movwf	monta_sd@dado& (0+255),b
 22799  005466  0E02               	movlw	high _rawTime
 22800  005468  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 22801  00546A  0E00               	movlw	0
 22802  00546C  EC56  F020         	call	_monta_sd
 22803                           
 22804                           ;GPS.c: 646: monta_sd(1, rawDate);
 22805  005470  0EBF               	movlw	low _rawDate
 22806  005472  0100               	movlb	0	; () banked
 22807  005474  6F66               	movwf	monta_sd@dado& (0+255),b
 22808  005476  0E01               	movlw	high _rawDate
 22809  005478  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 22810  00547A  0E01               	movlw	1
 22811  00547C  EC56  F020         	call	_monta_sd
 22812                           
 22813                           ;GPS.c: 647: monta_sd(2, rawLatitude);
 22814  005480  0EE5               	movlw	low _rawLatitude
 22815  005482  0100               	movlb	0	; () banked
 22816  005484  6F66               	movwf	monta_sd@dado& (0+255),b
 22817  005486  0E02               	movlw	high _rawLatitude
 22818  005488  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 22819  00548A  0E02               	movlw	2
 22820  00548C  EC56  F020         	call	_monta_sd
 22821                           
 22822                           ;GPS.c: 648: monta_sd(3, rawLongitude);
 22823  005490  0ED8               	movlw	low _rawLongitude
 22824  005492  0100               	movlb	0	; () banked
 22825  005494  6F66               	movwf	monta_sd@dado& (0+255),b
 22826  005496  0E02               	movlw	high _rawLongitude
 22827  005498  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 22828  00549A  0E03               	movlw	3
 22829  00549C  EC56  F020         	call	_monta_sd
 22830  0054A0  0012               	return	
 22831  0054A2                     __end_of_dados_gps_to_sd:
 22832                           	opt stack 0
 22833                           tosu	equ	0xFFF
 22834                           tosh	equ	0xFFE
 22835                           tosl	equ	0xFFD
 22836                           pclath	equ	0xFFA
 22837                           tblptru	equ	0xFF8
 22838                           tblptrh	equ	0xFF7
 22839                           tblptrl	equ	0xFF6
 22840                           tablat	equ	0xFF5
 22841                           prodh	equ	0xFF4
 22842                           prodl	equ	0xFF3
 22843                           intcon	equ	0xFF2
 22844                           intcon2	equ	0xFF1
 22845                           intcon3	equ	0xFF0
 22846                           indf0	equ	0xFEF
 22847                           postinc0	equ	0xFEE
 22848                           fsr0h	equ	0xFEA
 22849                           fsr0l	equ	0xFE9
 22850                           wreg	equ	0xFE8
 22851                           indf1	equ	0xFE7
 22852                           postinc1	equ	0xFE6
 22853                           postdec1	equ	0xFE5
 22854                           plusw1	equ	0xFE3
 22855                           fsr1h	equ	0xFE2
 22856                           fsr1l	equ	0xFE1
 22857                           indf2	equ	0xFDF
 22858                           postinc2	equ	0xFDE
 22859                           postdec2	equ	0xFDD
 22860                           plusw2	equ	0xFDB
 22861                           fsr2h	equ	0xFDA
 22862                           fsr2l	equ	0xFD9
 22863                           status	equ	0xFD8
 22864                           
 22865 ;; *************** function _monta_sd *****************
 22866 ;; Defined at:
 22867 ;;		line 286 in file "bibliotecas/SDCard.c"
 22868 ;; Parameters:    Size  Location     Type
 22869 ;;  index           1    wreg     unsigned char 
 22870 ;;  dado            2    6[BANK0 ] PTR unsigned char 
 22871 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 22872 ;; Auto vars:     Size  Location     Type
 22873 ;;  index           1    8[BANK0 ] unsigned char 
 22874 ;;  i               1   10[BANK0 ] unsigned char 
 22875 ;;  size            1    9[BANK0 ] unsigned char 
 22876 ;; Return value:  Size  Location     Type
 22877 ;;                  1    wreg      void 
 22878 ;; Registers used:
 22879 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22880 ;; Tracked objects:
 22881 ;;		On entry : 0/0
 22882 ;;		On exit  : 0/0
 22883 ;;		Unchanged: 0/0
 22884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22885 ;;      Params:         0       2       0       0       0       0       0       0       0
 22886 ;;      Locals:         0       3       0       0       0       0       0       0       0
 22887 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22888 ;;      Totals:         0       5       0       0       0       0       0       0       0
 22889 ;;Total ram usage:        5 bytes
 22890 ;; Hardware stack levels used:    1
 22891 ;; Hardware stack levels required when called:    4
 22892 ;; This function calls:
 22893 ;;		_strlen
 22894 ;; This function is called by:
 22895 ;;		_dados_gps_to_sd
 22896 ;; This function uses a non-reentrant model
 22897 ;;
 22898                           
 22899                           	psect	text88
 22900  0040AC                     __ptext88:
 22901                           	opt stack 0
 22902  0040AC                     _monta_sd:
 22903                           	opt stack 25
 22904                           
 22905                           ;incstack = 0
 22906                           ;monta_sd@index stored from wreg
 22907  0040AC  0100               	movlb	0	; () banked
 22908  0040AE  6F68               	movwf	monta_sd@index& (0+255),b
 22909                           
 22910                           ;SDCard.c: 288: unsigned char i, size;
 22911                           ;SDCard.c: 289: size = strlen(dado);
 22912  0040B0  C066  F060         	movff	monta_sd@dado,strlen@s
 22913  0040B4  C067  F061         	movff	monta_sd@dado+1,strlen@s+1
 22914  0040B8  EC71  F02A         	call	_strlen	;wreg free
 22915  0040BC  0100               	movlb	0	; () banked
 22916  0040BE  5160               	movf	?_strlen& (0+255),w,b
 22917  0040C0  6F69               	movwf	monta_sd@size& (0+255),b
 22918                           
 22919                           ;SDCard.c: 290: switch(index)
 22920  0040C2  D061               	goto	l449
 22921  0040C4                     
 22922                           ; BSR set to: 0
 22923                           ;SDCard.c: 293: for(i=0; i<6;i++)
 22924                           
 22925                           ; BSR set to: 0
 22926  0040C4  0E00               	movlw	0
 22927  0040C6  6F6A               	movwf	monta_sd@i& (0+255),b
 22928  0040C8                     l12285:
 22929                           
 22930                           ; BSR set to: 0
 22931  0040C8  0E05               	movlw	5
 22932  0040CA  656A               	cpfsgt	monta_sd@i& (0+255),b
 22933  0040CC  D001               	goto	l451
 22934  0040CE  0012               	return	
 22935  0040D0                     l451:
 22936                           
 22937                           ; BSR set to: 0
 22938                           ;SDCard.c: 294: {
 22939                           ;SDCard.c: 295: string_dado.hora[i] = *dado;
 22940                           
 22941                           ; BSR set to: 0
 22942  0040D0  C066  FFD9         	movff	monta_sd@dado,fsr2l
 22943  0040D4  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 22944  0040D8  516A               	movf	monta_sd@i& (0+255),w,b
 22945  0040DA  0D01               	mullw	1
 22946  0040DC  0E90               	movlw	low _string_dado
 22947  0040DE  24F3               	addwf	prodl,w,c
 22948  0040E0  6EE1               	movwf	fsr1l,c
 22949  0040E2  0E02               	movlw	high _string_dado
 22950  0040E4  20F4               	addwfc	prodh,w,c
 22951  0040E6  6EE2               	movwf	fsr1h,c
 22952  0040E8  CFDF FFE7          	movff	indf2,indf1
 22953                           
 22954                           ; BSR set to: 0
 22955                           ;SDCard.c: 296: dado++;
 22956  0040EC  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 22957  0040EE  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 22958                           
 22959                           ; BSR set to: 0
 22960  0040F0  2B6A               	incf	monta_sd@i& (0+255),f,b
 22961  0040F2  D7EA               	goto	l12285
 22962  0040F4                     
 22963                           ; BSR set to: 0
 22964                           ;SDCard.c: 315: for(i=0; i<13;i++)
 22965                           
 22966                           ; BSR set to: 0
 22967  0040F4  0E00               	movlw	0
 22968  0040F6  6F6A               	movwf	monta_sd@i& (0+255),b
 22969  0040F8                     l12299:
 22970                           
 22971                           ; BSR set to: 0
 22972  0040F8  0E0C               	movlw	12
 22973  0040FA  656A               	cpfsgt	monta_sd@i& (0+255),b
 22974  0040FC  D001               	goto	l456
 22975  0040FE  0012               	return	
 22976  004100                     l456:
 22977                           
 22978                           ; BSR set to: 0
 22979                           ;SDCard.c: 316: {
 22980                           ;SDCard.c: 317: string_dado.lt[i] = *dado;
 22981                           
 22982                           ; BSR set to: 0
 22983  004100  C066  FFD9         	movff	monta_sd@dado,fsr2l
 22984  004104  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 22985  004108  516A               	movf	monta_sd@i& (0+255),w,b
 22986  00410A  0D01               	mullw	1
 22987  00410C  0E9B               	movlw	low (_string_dado+11)
 22988  00410E  24F3               	addwf	prodl,w,c
 22989  004110  6EE1               	movwf	fsr1l,c
 22990  004112  0E02               	movlw	high (_string_dado+11)
 22991  004114  20F4               	addwfc	prodh,w,c
 22992  004116  6EE2               	movwf	fsr1h,c
 22993  004118  CFDF FFE7          	movff	indf2,indf1
 22994                           
 22995                           ; BSR set to: 0
 22996                           ;SDCard.c: 318: dado++;
 22997  00411C  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 22998  00411E  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 22999                           
 23000                           ; BSR set to: 0
 23001  004120  2B6A               	incf	monta_sd@i& (0+255),f,b
 23002  004122  D7EA               	goto	l12299
 23003  004124                     
 23004                           ; BSR set to: 0
 23005                           ;SDCard.c: 324: for(i=0; i<13;i++)
 23006                           
 23007                           ; BSR set to: 0
 23008  004124  0E00               	movlw	0
 23009  004126  6F6A               	movwf	monta_sd@i& (0+255),b
 23010  004128                     l12313:
 23011                           
 23012                           ; BSR set to: 0
 23013  004128  0E0C               	movlw	12
 23014  00412A  656A               	cpfsgt	monta_sd@i& (0+255),b
 23015  00412C  D001               	goto	l459
 23016  00412E  0012               	return	
 23017  004130                     l459:
 23018                           
 23019                           ; BSR set to: 0
 23020                           ;SDCard.c: 325: {
 23021                           ;SDCard.c: 326: string_dado.lo[i] = *dado;
 23022                           
 23023                           ; BSR set to: 0
 23024  004130  C066  FFD9         	movff	monta_sd@dado,fsr2l
 23025  004134  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 23026  004138  516A               	movf	monta_sd@i& (0+255),w,b
 23027  00413A  0D01               	mullw	1
 23028  00413C  0EA8               	movlw	low (_string_dado+24)
 23029  00413E  24F3               	addwf	prodl,w,c
 23030  004140  6EE1               	movwf	fsr1l,c
 23031  004142  0E02               	movlw	high (_string_dado+24)
 23032  004144  20F4               	addwfc	prodh,w,c
 23033  004146  6EE2               	movwf	fsr1h,c
 23034  004148  CFDF FFE7          	movff	indf2,indf1
 23035                           
 23036                           ; BSR set to: 0
 23037                           ;SDCard.c: 327: dado++;
 23038  00414C  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 23039  00414E  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 23040                           
 23041                           ; BSR set to: 0
 23042  004150  2B6A               	incf	monta_sd@i& (0+255),f,b
 23043  004152  D7EA               	goto	l12313
 23044  004154                     
 23045                           ; BSR set to: 0
 23046                           ;SDCard.c: 333: for(i=0; i<size;i++)
 23047                           
 23048                           ; BSR set to: 0
 23049  004154  0E00               	movlw	0
 23050  004156  6F6A               	movwf	monta_sd@i& (0+255),b
 23051  004158  D011               	goto	l462
 23052  00415A                     
 23053                           ; BSR set to: 0
 23054                           ;SDCard.c: 334: {
 23055                           ;SDCard.c: 335: string_dado.lo[i] = *dado;
 23056                           
 23057                           ; BSR set to: 0
 23058  00415A  C066  FFD9         	movff	monta_sd@dado,fsr2l
 23059  00415E  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 23060  004162  516A               	movf	monta_sd@i& (0+255),w,b
 23061  004164  0D01               	mullw	1
 23062  004166  0EA8               	movlw	low (_string_dado+24)
 23063  004168  24F3               	addwf	prodl,w,c
 23064  00416A  6EE1               	movwf	fsr1l,c
 23065  00416C  0E02               	movlw	high (_string_dado+24)
 23066  00416E  20F4               	addwfc	prodh,w,c
 23067  004170  6EE2               	movwf	fsr1h,c
 23068  004172  CFDF FFE7          	movff	indf2,indf1
 23069                           
 23070                           ; BSR set to: 0
 23071                           ;SDCard.c: 336: dado++;
 23072  004176  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 23073  004178  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 23074                           
 23075                           ; BSR set to: 0
 23076  00417A  2B6A               	incf	monta_sd@i& (0+255),f,b
 23077  00417C                     l462:
 23078                           
 23079                           ; BSR set to: 0
 23080                           
 23081                           ; BSR set to: 0
 23082  00417C  5169               	movf	monta_sd@size& (0+255),w,b
 23083  00417E  5D6A               	subwf	monta_sd@i& (0+255),w,b
 23084  004180  B0D8               	btfsc	status,0,c
 23085  004182  0012               	return	
 23086  004184  D7EA               	goto	l463
 23087  004186                     l449:
 23088                           
 23089                           ; BSR set to: 0
 23090                           
 23091                           ; BSR set to: 0
 23092  004186  5168               	movf	monta_sd@index& (0+255),w,b
 23093                           
 23094                           ; Switch size 1, requested type "space"
 23095                           ; Number of cases is 5, Range of values is 0 to 4
 23096                           ; switch strategies available:
 23097                           ; Name         Instructions Cycles
 23098                           ; simple_byte           16     9 (average)
 23099                           ;	Chosen strategy is simple_byte
 23100  004188  0A00               	xorlw	0	; case 0
 23101  00418A  B4D8               	btfsc	status,2,c
 23102  00418C  D79B               	goto	l450
 23103  00418E  0A01               	xorlw	1	; case 1
 23104  004190  B4D8               	btfsc	status,2,c
 23105  004192  0012               	return	
 23106  004194  0A03               	xorlw	3	; case 2
 23107  004196  B4D8               	btfsc	status,2,c
 23108  004198  D7AD               	goto	l455
 23109  00419A  0A01               	xorlw	1	; case 3
 23110  00419C  B4D8               	btfsc	status,2,c
 23111  00419E  D7C2               	goto	l458
 23112  0041A0  0A07               	xorlw	7	; case 4
 23113  0041A2  A4D8               	btfss	status,2,c
 23114  0041A4  0012               	return	
 23115  0041A6  D7D6               	goto	l461
 23116  0041A8                     __end_of_monta_sd:
 23117                           	opt stack 0
 23118                           tosu	equ	0xFFF
 23119                           tosh	equ	0xFFE
 23120                           tosl	equ	0xFFD
 23121                           pclath	equ	0xFFA
 23122                           tblptru	equ	0xFF8
 23123                           tblptrh	equ	0xFF7
 23124                           tblptrl	equ	0xFF6
 23125                           tablat	equ	0xFF5
 23126                           prodh	equ	0xFF4
 23127                           prodl	equ	0xFF3
 23128                           intcon	equ	0xFF2
 23129                           intcon2	equ	0xFF1
 23130                           intcon3	equ	0xFF0
 23131                           indf0	equ	0xFEF
 23132                           postinc0	equ	0xFEE
 23133                           fsr0h	equ	0xFEA
 23134                           fsr0l	equ	0xFE9
 23135                           wreg	equ	0xFE8
 23136                           indf1	equ	0xFE7
 23137                           postinc1	equ	0xFE6
 23138                           postdec1	equ	0xFE5
 23139                           plusw1	equ	0xFE3
 23140                           fsr1h	equ	0xFE2
 23141                           fsr1l	equ	0xFE1
 23142                           indf2	equ	0xFDF
 23143                           postinc2	equ	0xFDE
 23144                           postdec2	equ	0xFDD
 23145                           plusw2	equ	0xFDB
 23146                           fsr2h	equ	0xFDA
 23147                           fsr2l	equ	0xFD9
 23148                           status	equ	0xFD8
 23149                           
 23150 ;; *************** function _strlen *****************
 23151 ;; Defined at:
 23152 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 23153 ;; Parameters:    Size  Location     Type
 23154 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 23155 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 23156 ;; Auto vars:     Size  Location     Type
 23157 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 23158 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 23159 ;; Return value:  Size  Location     Type
 23160 ;;                  2    0[BANK0 ] unsigned int 
 23161 ;; Registers used:
 23162 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23163 ;; Tracked objects:
 23164 ;;		On entry : 0/0
 23165 ;;		On exit  : 0/0
 23166 ;;		Unchanged: 0/0
 23167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23168 ;;      Params:         0       2       0       0       0       0       0       0       0
 23169 ;;      Locals:         0       2       0       0       0       0       0       0       0
 23170 ;;      Temps:          0       2       0       0       0       0       0       0       0
 23171 ;;      Totals:         0       6       0       0       0       0       0       0       0
 23172 ;;Total ram usage:        6 bytes
 23173 ;; Hardware stack levels used:    1
 23174 ;; Hardware stack levels required when called:    3
 23175 ;; This function calls:
 23176 ;;		Nothing
 23177 ;; This function is called by:
 23178 ;;		_monta_sd
 23179 ;; This function uses a non-reentrant model
 23180 ;;
 23181                           
 23182                           	psect	text89
 23183  0054E2                     __ptext89:
 23184                           	opt stack 0
 23185  0054E2                     _strlen:
 23186                           	opt stack 25
 23187                           
 23188                           ; BSR set to: 0
 23189                           ;incstack = 0
 23190  0054E2  C060  F064         	movff	strlen@s,strlen@cp
 23191  0054E6  C061  F065         	movff	strlen@s+1,strlen@cp+1
 23192  0054EA  D003               	goto	l2123
 23193  0054EC  0100               	movlb	0	; () banked
 23194  0054EE  4B64               	infsnz	strlen@cp& (0+255),f,b
 23195  0054F0  2B65               	incf	(strlen@cp+1)& (0+255),f,b
 23196  0054F2                     l2123:
 23197                           
 23198                           ; BSR set to: 0
 23199  0054F2  C064  FFD9         	movff	strlen@cp,fsr2l
 23200  0054F6  C065  FFDA         	movff	strlen@cp+1,fsr2h
 23201  0054FA  50DF               	movf	indf2,w,c
 23202  0054FC  A4D8               	btfss	status,2,c
 23203  0054FE  D7F6               	goto	l2124
 23204  005500  C060  F062         	movff	strlen@s,??_strlen
 23205  005504  C061  F063         	movff	strlen@s+1,??_strlen+1
 23206  005508  0100               	movlb	0	; () banked
 23207  00550A  1F62               	comf	??_strlen& (0+255),f,b
 23208  00550C  1F63               	comf	(??_strlen+1)& (0+255),f,b
 23209  00550E  4B62               	infsnz	??_strlen& (0+255),f,b
 23210  005510  2B63               	incf	(??_strlen+1)& (0+255),f,b
 23211  005512  5164               	movf	strlen@cp& (0+255),w,b
 23212  005514  2562               	addwf	??_strlen& (0+255),w,b
 23213  005516  6F60               	movwf	?_strlen& (0+255),b
 23214  005518  5165               	movf	(strlen@cp+1)& (0+255),w,b
 23215  00551A  2163               	addwfc	(??_strlen+1)& (0+255),w,b
 23216  00551C  6F61               	movwf	(?_strlen+1)& (0+255),b
 23217  00551E  0012               	return	
 23218  005520                     __end_of_strlen:
 23219                           	opt stack 0
 23220                           tosu	equ	0xFFF
 23221                           tosh	equ	0xFFE
 23222                           tosl	equ	0xFFD
 23223                           pclath	equ	0xFFA
 23224                           tblptru	equ	0xFF8
 23225                           tblptrh	equ	0xFF7
 23226                           tblptrl	equ	0xFF6
 23227                           tablat	equ	0xFF5
 23228                           prodh	equ	0xFF4
 23229                           prodl	equ	0xFF3
 23230                           intcon	equ	0xFF2
 23231                           intcon2	equ	0xFF1
 23232                           intcon3	equ	0xFF0
 23233                           indf0	equ	0xFEF
 23234                           postinc0	equ	0xFEE
 23235                           fsr0h	equ	0xFEA
 23236                           fsr0l	equ	0xFE9
 23237                           wreg	equ	0xFE8
 23238                           indf1	equ	0xFE7
 23239                           postinc1	equ	0xFE6
 23240                           postdec1	equ	0xFE5
 23241                           plusw1	equ	0xFE3
 23242                           fsr1h	equ	0xFE2
 23243                           fsr1l	equ	0xFE1
 23244                           indf2	equ	0xFDF
 23245                           postinc2	equ	0xFDE
 23246                           postdec2	equ	0xFDD
 23247                           plusw2	equ	0xFDB
 23248                           fsr2h	equ	0xFDA
 23249                           fsr2l	equ	0xFD9
 23250                           status	equ	0xFD8
 23251                           
 23252 ;; *************** function _isr *****************
 23253 ;; Defined at:
 23254 ;;		line 102 in file "main.c"
 23255 ;; Parameters:    Size  Location     Type
 23256 ;;		None
 23257 ;; Auto vars:     Size  Location     Type
 23258 ;;  cont            1   33[COMRAM] unsigned char 
 23259 ;; Return value:  Size  Location     Type
 23260 ;;                  1    wreg      void 
 23261 ;; Registers used:
 23262 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23263 ;; Tracked objects:
 23264 ;;		On entry : 0/0
 23265 ;;		On exit  : 0/0
 23266 ;;		Unchanged: 0/0
 23267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23268 ;;      Params:         0       0       0       0       0       0       0       0       0
 23269 ;;      Locals:         1       0       0       0       0       0       0       0       0
 23270 ;;      Temps:         20       0       0       0       0       0       0       0       0
 23271 ;;      Totals:        21       0       0       0       0       0       0       0       0
 23272 ;;Total ram usage:       21 bytes
 23273 ;; Hardware stack levels used:    1
 23274 ;; Hardware stack levels required when called:    2
 23275 ;; This function calls:
 23276 ;;		_GPSRead
 23277 ;;		_recebe_dado_uart
 23278 ;;		i2_write_timer_zero
 23279 ;; This function is called by:
 23280 ;;		Interrupt level 2
 23281 ;; This function uses a non-reentrant model
 23282 ;;
 23283                           
 23284                           	psect	intcode
 23285  000008                     __pintcode:
 23286                           	opt stack 0
 23287  000008                     _isr:
 23288                           	opt stack 13
 23289                           
 23290                           ; BSR set to: 0
 23291                           ;incstack = 0
 23292  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 23293  00000A  ED53  F01D         	call	int_func,f	;refresh shadow registers
 23294                           tosu	equ	0xFFF
 23295                           tosh	equ	0xFFE
 23296                           tosl	equ	0xFFD
 23297                           pclath	equ	0xFFA
 23298                           tblptru	equ	0xFF8
 23299                           tblptrh	equ	0xFF7
 23300                           tblptrl	equ	0xFF6
 23301                           tablat	equ	0xFF5
 23302                           prodh	equ	0xFF4
 23303                           prodl	equ	0xFF3
 23304                           intcon	equ	0xFF2
 23305                           intcon2	equ	0xFF1
 23306                           intcon3	equ	0xFF0
 23307                           indf0	equ	0xFEF
 23308                           postinc0	equ	0xFEE
 23309                           fsr0h	equ	0xFEA
 23310                           fsr0l	equ	0xFE9
 23311                           wreg	equ	0xFE8
 23312                           indf1	equ	0xFE7
 23313                           postinc1	equ	0xFE6
 23314                           postdec1	equ	0xFE5
 23315                           plusw1	equ	0xFE3
 23316                           fsr1h	equ	0xFE2
 23317                           fsr1l	equ	0xFE1
 23318                           indf2	equ	0xFDF
 23319                           postinc2	equ	0xFDE
 23320                           postdec2	equ	0xFDD
 23321                           plusw2	equ	0xFDB
 23322                           fsr2h	equ	0xFDA
 23323                           fsr2l	equ	0xFD9
 23324                           status	equ	0xFD8
 23325                           
 23326                           	psect	intcode_body
 23327  003AA6                     __pintcode_body:
 23328                           	opt stack 13
 23329  003AA6                     int_func:
 23330                           	opt stack 13
 23331  003AA6  0006               	pop		; remove dummy address from shadow register refresh
 23332  003AA8  CFFA F010          	movff	pclath,??_isr+2
 23333  003AAC  CFFB F011          	movff	pclatu,??_isr+3
 23334  003AB0  CFE9 F012          	movff	fsr0l,??_isr+4
 23335  003AB4  CFEA F013          	movff	fsr0h,??_isr+5
 23336  003AB8  CFE1 F014          	movff	fsr1l,??_isr+6
 23337  003ABC  CFE2 F015          	movff	fsr1h,??_isr+7
 23338  003AC0  CFD9 F016          	movff	fsr2l,??_isr+8
 23339  003AC4  CFDA F017          	movff	fsr2h,??_isr+9
 23340  003AC8  CFF3 F018          	movff	prodl,??_isr+10
 23341  003ACC  CFF4 F019          	movff	prodh,??_isr+11
 23342  003AD0  CFF6 F01A          	movff	tblptrl,??_isr+12
 23343  003AD4  CFF7 F01B          	movff	tblptrh,??_isr+13
 23344  003AD8  CFF8 F01C          	movff	tblptru,??_isr+14
 23345  003ADC  CFF5 F01D          	movff	tablat,??_isr+15
 23346  003AE0  C045  F01E         	movff	btemp,??_isr+16
 23347  003AE4  C046  F01F         	movff	btemp+1,??_isr+17
 23348  003AE8  C047  F020         	movff	btemp+2,??_isr+18
 23349  003AEC  C048  F021         	movff	btemp+3,??_isr+19
 23350                           
 23351                           ;main.c: 104: unsigned char cont;
 23352                           ;main.c: 107: if (PIE1bits.RCIE && PIR1bits.RCIF)
 23353  003AF0  BA9D               	btfsc	3997,5,c	;volatile
 23354  003AF2  AA9E               	btfss	3998,5,c	;volatile
 23355  003AF4  D014               	goto	i2l95
 23356                           
 23357                           ;main.c: 108: {
 23358                           ;main.c: 109: PIR1bits.RCIF = 0;
 23359  003AF6  9A9E               	bcf	3998,5,c	;volatile
 23360                           
 23361                           ;main.c: 110: data_uart_recebe = recebe_dado_uart();
 23362  003AF8  ECD3  F02B         	call	_recebe_dado_uart	;wreg free
 23363  003AFC  6E40               	movwf	_data_uart_recebe,c
 23364                           
 23365                           ;main.c: 111: GPSRead(data_uart_recebe);
 23366  003AFE  5040               	movf	_data_uart_recebe,w,c
 23367  003B00  ECBE  F011         	call	_GPSRead
 23368                           
 23369                           ;main.c: 112: PORTBbits.RB2 = !PORTBbits.RB2;
 23370  003B04  B481               	btfsc	3969,2,c	;volatile
 23371  003B06  D003               	goto	i2u1178_40
 23372  003B08  6A0E               	clrf	??_isr& (0+255),c
 23373  003B0A  2A0E               	incf	??_isr& (0+255),f,c
 23374  003B0C  D001               	goto	i2u1179_48
 23375  003B0E                     i2u1178_40:
 23376  003B0E  6A0E               	clrf	??_isr& (0+255),c
 23377  003B10                     i2u1179_48:
 23378  003B10  460E               	rlncf	??_isr,f,c
 23379  003B12  460E               	rlncf	??_isr,f,c
 23380  003B14  5081               	movf	3969,w,c	;volatile
 23381  003B16  180E               	xorwf	??_isr,w,c
 23382  003B18  0BFB               	andlw	-5
 23383  003B1A  180E               	xorwf	??_isr,w,c
 23384  003B1C  6E81               	movwf	3969,c	;volatile
 23385  003B1E                     i2l95:
 23386                           
 23387                           ;main.c: 113: }
 23388                           ;main.c: 116: unsigned char cont;
 23389                           ;main.c: 118: if (TMR0IF && T0IF)
 23390  003B1E  B4F2               	btfsc	intcon,2,c	;volatile
 23391  003B20  A4F2               	btfss	intcon,2,c	;volatile
 23392  003B22  D045               	goto	i2l96
 23393                           
 23394                           ;main.c: 119: {
 23395                           ;main.c: 120: INTCONbits.TMR0IF = 0;
 23396  003B24  94F2               	bcf	intcon,2,c	;volatile
 23397                           
 23398                           ;main.c: 121: sinaliza_int_timer = 1;
 23399  003B26  0E01               	movlw	1
 23400  003B28  0100               	movlb	0	; () banked
 23401  003B2A  6FFF               	movwf	_sinaliza_int_timer& (0+255),b
 23402                           
 23403                           ;main.c: 123: for(cont= 0; cont<4;cont++)
 23404  003B2C  0E00               	movlw	0
 23405  003B2E  6E22               	movwf	isr@cont,c
 23406  003B30                     i2l9183:
 23407                           
 23408                           ; BSR set to: 0
 23409  003B30  0E03               	movlw	3
 23410  003B32  6422               	cpfsgt	isr@cont,c
 23411  003B34  D001               	goto	i2l97
 23412  003B36  D019               	goto	i2u1184_40
 23413  003B38                     i2l97:
 23414                           
 23415                           ;main.c: 124: {
 23416                           ;main.c: 125: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 23417                           
 23418                           ; BSR set to: 0
 23419  003B38  5022               	movf	isr@cont,w,c
 23420  003B3A  0D02               	mullw	2
 23421  003B3C  0E23               	movlw	low _tempo_tarefa
 23422  003B3E  24F3               	addwf	prodl,w,c
 23423  003B40  6ED9               	movwf	fsr2l,c
 23424  003B42  0E00               	movlw	high _tempo_tarefa
 23425  003B44  20F4               	addwfc	prodh,w,c
 23426  003B46  6EDA               	movwf	fsr2h,c
 23427  003B48  50DE               	movf	postinc2,w,c
 23428  003B4A  10DE               	iorwf	postinc2,w,c
 23429  003B4C  B4D8               	btfsc	status,2,c
 23430  003B4E  D00B               	goto	i2l99
 23431  003B50  5022               	movf	isr@cont,w,c
 23432  003B52  0D02               	mullw	2
 23433  003B54  0E23               	movlw	low _tempo_tarefa
 23434  003B56  24F3               	addwf	prodl,w,c
 23435  003B58  6ED9               	movwf	fsr2l,c
 23436  003B5A  0E00               	movlw	high _tempo_tarefa
 23437  003B5C  20F4               	addwfc	prodh,w,c
 23438  003B5E  6EDA               	movwf	fsr2h,c
 23439  003B60  06DE               	decf	postinc2,f,c
 23440  003B62  0E00               	movlw	0
 23441  003B64  5ADD               	subwfb	postdec2,f,c
 23442  003B66                     i2l99:
 23443  003B66  2A22               	incf	isr@cont,f,c
 23444  003B68  D7E3               	goto	i2l9183
 23445  003B6A                     i2u1184_40:
 23446                           
 23447                           ;main.c: 127: }
 23448                           ;main.c: 128: if(time_sd > 0) time_sd--;
 23449  003B6A  5031               	movf	_time_sd,w,c
 23450  003B6C  1032               	iorwf	_time_sd+1,w,c
 23451  003B6E  B4D8               	btfsc	status,2,c
 23452  003B70  D003               	goto	i2l100
 23453  003B72  0631               	decf	_time_sd,f,c
 23454  003B74  A0D8               	btfss	status,0,c
 23455  003B76  0632               	decf	_time_sd+1,f,c
 23456  003B78                     i2l100:
 23457                           
 23458                           ;main.c: 129: if(time_atualizacao > 0) time_atualizacao--;
 23459  003B78  502F               	movf	_time_atualizacao,w,c
 23460  003B7A  1030               	iorwf	_time_atualizacao+1,w,c
 23461  003B7C  B4D8               	btfsc	status,2,c
 23462  003B7E  D003               	goto	i2l101
 23463  003B80  062F               	decf	_time_atualizacao,f,c
 23464  003B82  A0D8               	btfss	status,0,c
 23465  003B84  0630               	decf	_time_atualizacao+1,f,c
 23466  003B86                     i2l101:
 23467                           
 23468                           ;main.c: 130: if(tarefa_em_execucao == 1)
 23469  003B86  043F               	decf	_tarefa_em_execucao,w,c	;volatile
 23470  003B88  A4D8               	btfss	status,2,c
 23471  003B8A  D00B               	goto	i2l103
 23472                           
 23473                           ;main.c: 131: {
 23474                           ;main.c: 132: timeout_tarefa--;
 23475  003B8C  0633               	decf	_timeout_tarefa,f,c
 23476  003B8E  A0D8               	btfss	status,0,c
 23477  003B90  0634               	decf	_timeout_tarefa+1,f,c
 23478                           
 23479                           ;main.c: 133: if(!timeout_tarefa)
 23480  003B92  5033               	movf	_timeout_tarefa,w,c
 23481  003B94  1034               	iorwf	_timeout_tarefa+1,w,c
 23482  003B96  A4D8               	btfss	status,2,c
 23483  003B98  D004               	goto	i2l103
 23484                           
 23485                           ;main.c: 134: {
 23486                           ;main.c: 136: PCLATH = 0;
 23487  003B9A  0E00               	movlw	0
 23488  003B9C  6EFA               	movwf	pclath,c	;volatile
 23489                           
 23490                           ;main.c: 137: PCL = 0;
 23491  003B9E  0E00               	movlw	0
 23492  003BA0  6EF9               	movwf	pcl,c	;volatile
 23493  003BA2                     i2l103:
 23494                           
 23495                           ;main.c: 138: }
 23496                           ;main.c: 139: }
 23497                           ;main.c: 143: write_timer_zero(0x45);
 23498  003BA2  0E00               	movlw	0
 23499  003BA4  6E02               	movwf	i2write_timer_zero@timer0+1,c
 23500  003BA6  0E45               	movlw	69
 23501  003BA8  6E01               	movwf	i2write_timer_zero@timer0,c
 23502  003BAA  EC14  F02C         	call	i2_write_timer_zero	;wreg free
 23503  003BAE                     i2l96:
 23504                           
 23505                           ;main.c: 144: }
 23506                           ;main.c: 146: if (INT0IF && INT0IE)
 23507  003BAE  B2F2               	btfsc	intcon,1,c	;volatile
 23508  003BB0  A8F2               	btfss	intcon,4,c	;volatile
 23509  003BB2  D001               	goto	i2l104
 23510                           
 23511                           ;main.c: 147: {
 23512                           ;main.c: 148: INT0IF = 0;
 23513  003BB4  92F2               	bcf	intcon,1,c	;volatile
 23514  003BB6                     i2l104:
 23515  003BB6  C021  F048         	movff	??_isr+19,btemp+3
 23516  003BBA  C020  F047         	movff	??_isr+18,btemp+2
 23517  003BBE  C01F  F046         	movff	??_isr+17,btemp+1
 23518  003BC2  C01E  F045         	movff	??_isr+16,btemp
 23519  003BC6  C01D  FFF5         	movff	??_isr+15,tablat
 23520  003BCA  C01C  FFF8         	movff	??_isr+14,tblptru
 23521  003BCE  C01B  FFF7         	movff	??_isr+13,tblptrh
 23522  003BD2  C01A  FFF6         	movff	??_isr+12,tblptrl
 23523  003BD6  C019  FFF4         	movff	??_isr+11,prodh
 23524  003BDA  C018  FFF3         	movff	??_isr+10,prodl
 23525  003BDE  C017  FFDA         	movff	??_isr+9,fsr2h
 23526  003BE2  C016  FFD9         	movff	??_isr+8,fsr2l
 23527  003BE6  C015  FFE2         	movff	??_isr+7,fsr1h
 23528  003BEA  C014  FFE1         	movff	??_isr+6,fsr1l
 23529  003BEE  C013  FFEA         	movff	??_isr+5,fsr0h
 23530  003BF2  C012  FFE9         	movff	??_isr+4,fsr0l
 23531  003BF6  C011  FFFB         	movff	??_isr+3,pclatu
 23532  003BFA  C010  FFFA         	movff	??_isr+2,pclath
 23533  003BFE  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 23534  003C00  0011               	retfie		f
 23535  003C02                     __end_of_isr:
 23536                           	opt stack 0
 23537                           tosu	equ	0xFFF
 23538                           tosh	equ	0xFFE
 23539                           tosl	equ	0xFFD
 23540                           pclatu	equ	0xFFB
 23541                           pclath	equ	0xFFA
 23542                           pcl	equ	0xFF9
 23543                           tblptru	equ	0xFF8
 23544                           tblptrh	equ	0xFF7
 23545                           tblptrl	equ	0xFF6
 23546                           tablat	equ	0xFF5
 23547                           prodh	equ	0xFF4
 23548                           prodl	equ	0xFF3
 23549                           intcon	equ	0xFF2
 23550                           intcon2	equ	0xFF1
 23551                           intcon3	equ	0xFF0
 23552                           indf0	equ	0xFEF
 23553                           postinc0	equ	0xFEE
 23554                           fsr0h	equ	0xFEA
 23555                           fsr0l	equ	0xFE9
 23556                           wreg	equ	0xFE8
 23557                           indf1	equ	0xFE7
 23558                           postinc1	equ	0xFE6
 23559                           postdec1	equ	0xFE5
 23560                           plusw1	equ	0xFE3
 23561                           fsr1h	equ	0xFE2
 23562                           fsr1l	equ	0xFE1
 23563                           indf2	equ	0xFDF
 23564                           postinc2	equ	0xFDE
 23565                           postdec2	equ	0xFDD
 23566                           plusw2	equ	0xFDB
 23567                           fsr2h	equ	0xFDA
 23568                           fsr2l	equ	0xFD9
 23569                           status	equ	0xFD8
 23570                           
 23571 ;; *************** function i2_write_timer_zero *****************
 23572 ;; Defined at:
 23573 ;;		line 138 in file "bibliotecas/hardware.c"
 23574 ;; Parameters:    Size  Location     Type
 23575 ;;  timer0          2    0[COMRAM] unsigned int 
 23576 ;; Auto vars:     Size  Location     Type
 23577 ;;		None
 23578 ;; Return value:  Size  Location     Type
 23579 ;;                  1    wreg      void 
 23580 ;; Registers used:
 23581 ;;		None
 23582 ;; Tracked objects:
 23583 ;;		On entry : 0/0
 23584 ;;		On exit  : 0/0
 23585 ;;		Unchanged: 0/0
 23586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23587 ;;      Params:         2       0       0       0       0       0       0       0       0
 23588 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23589 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23590 ;;      Totals:         2       0       0       0       0       0       0       0       0
 23591 ;;Total ram usage:        2 bytes
 23592 ;; Hardware stack levels used:    1
 23593 ;; This function calls:
 23594 ;;		Nothing
 23595 ;; This function is called by:
 23596 ;;		_isr
 23597 ;; This function uses a non-reentrant model
 23598 ;;
 23599                           
 23600                           	psect	text91
 23601  005828                     __ptext91:
 23602                           	opt stack 0
 23603  005828                     i2_write_timer_zero:
 23604                           	opt stack 14
 23605                           
 23606                           ;hardware.c: 146: TMR0 = timer0;
 23607                           
 23608                           ;incstack = 0
 23609  005828  C001  FFD6         	movff	i2write_timer_zero@timer0,4054	;volatile
 23610  00582C  C002  FFD7         	movff	i2write_timer_zero@timer0+1,4055	;volatile
 23611  005830  0012               	return		;funcret
 23612  005832                     __end_ofi2_write_timer_zero:
 23613                           	opt stack 0
 23614                           tosu	equ	0xFFF
 23615                           tosh	equ	0xFFE
 23616                           tosl	equ	0xFFD
 23617                           pclatu	equ	0xFFB
 23618                           pclath	equ	0xFFA
 23619                           pcl	equ	0xFF9
 23620                           tblptru	equ	0xFF8
 23621                           tblptrh	equ	0xFF7
 23622                           tblptrl	equ	0xFF6
 23623                           tablat	equ	0xFF5
 23624                           prodh	equ	0xFF4
 23625                           prodl	equ	0xFF3
 23626                           intcon	equ	0xFF2
 23627                           intcon2	equ	0xFF1
 23628                           intcon3	equ	0xFF0
 23629                           indf0	equ	0xFEF
 23630                           postinc0	equ	0xFEE
 23631                           fsr0h	equ	0xFEA
 23632                           fsr0l	equ	0xFE9
 23633                           wreg	equ	0xFE8
 23634                           indf1	equ	0xFE7
 23635                           postinc1	equ	0xFE6
 23636                           postdec1	equ	0xFE5
 23637                           plusw1	equ	0xFE3
 23638                           fsr1h	equ	0xFE2
 23639                           fsr1l	equ	0xFE1
 23640                           indf2	equ	0xFDF
 23641                           postinc2	equ	0xFDE
 23642                           postdec2	equ	0xFDD
 23643                           plusw2	equ	0xFDB
 23644                           fsr2h	equ	0xFDA
 23645                           fsr2l	equ	0xFD9
 23646                           status	equ	0xFD8
 23647                           
 23648 ;; *************** function _recebe_dado_uart *****************
 23649 ;; Defined at:
 23650 ;;		line 138 in file "bibliotecas/uart.c"
 23651 ;; Parameters:    Size  Location     Type
 23652 ;;		None
 23653 ;; Auto vars:     Size  Location     Type
 23654 ;;		None
 23655 ;; Return value:  Size  Location     Type
 23656 ;;                  1    wreg      unsigned char 
 23657 ;; Registers used:
 23658 ;;		wreg, status,2
 23659 ;; Tracked objects:
 23660 ;;		On entry : 0/0
 23661 ;;		On exit  : 0/0
 23662 ;;		Unchanged: 0/0
 23663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23664 ;;      Params:         0       0       0       0       0       0       0       0       0
 23665 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23666 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23667 ;;      Totals:         0       0       0       0       0       0       0       0       0
 23668 ;;Total ram usage:        0 bytes
 23669 ;; Hardware stack levels used:    1
 23670 ;; This function calls:
 23671 ;;		Nothing
 23672 ;; This function is called by:
 23673 ;;		_isr
 23674 ;;		_recebe_string_uart
 23675 ;; This function uses a non-reentrant model
 23676 ;;
 23677                           
 23678                           	psect	text92
 23679  0057A6                     __ptext92:
 23680                           	opt stack 0
 23681  0057A6                     _recebe_dado_uart:
 23682                           	opt stack 14
 23683                           
 23684                           ;uart.c: 140: while(RCIF==0);
 23685                           
 23686                           ;incstack = 0
 23687  0057A6  AA9E               	btfss	3998,5,c	;volatile
 23688  0057A8  D7FE               	goto	_recebe_dado_uart
 23689                           
 23690                           ;uart.c: 141: if(RCSTAbits.OERR)
 23691  0057AA  A2AB               	btfss	4011,1,c	;volatile
 23692  0057AC  D003               	goto	i2l977
 23693                           
 23694                           ;uart.c: 142: {
 23695                           ;uart.c: 143: CREN = 0;
 23696  0057AE  98AB               	bcf	4011,4,c	;volatile
 23697                           
 23698                           ;uart.c: 144: __nop();
 23699  0057B0  F000               	nop	
 23700                           
 23701                           ;uart.c: 145: CREN=1;
 23702  0057B2  88AB               	bsf	4011,4,c	;volatile
 23703  0057B4                     i2l977:
 23704                           
 23705                           ;uart.c: 146: }
 23706                           ;uart.c: 147: return(RCREG);
 23707  0057B4  50AE               	movf	4014,w,c	;volatile
 23708  0057B6  0012               	return	
 23709  0057B8                     __end_of_recebe_dado_uart:
 23710                           	opt stack 0
 23711                           tosu	equ	0xFFF
 23712                           tosh	equ	0xFFE
 23713                           tosl	equ	0xFFD
 23714                           pclatu	equ	0xFFB
 23715                           pclath	equ	0xFFA
 23716                           pcl	equ	0xFF9
 23717                           tblptru	equ	0xFF8
 23718                           tblptrh	equ	0xFF7
 23719                           tblptrl	equ	0xFF6
 23720                           tablat	equ	0xFF5
 23721                           prodh	equ	0xFF4
 23722                           prodl	equ	0xFF3
 23723                           intcon	equ	0xFF2
 23724                           intcon2	equ	0xFF1
 23725                           intcon3	equ	0xFF0
 23726                           indf0	equ	0xFEF
 23727                           postinc0	equ	0xFEE
 23728                           fsr0h	equ	0xFEA
 23729                           fsr0l	equ	0xFE9
 23730                           wreg	equ	0xFE8
 23731                           indf1	equ	0xFE7
 23732                           postinc1	equ	0xFE6
 23733                           postdec1	equ	0xFE5
 23734                           plusw1	equ	0xFE3
 23735                           fsr1h	equ	0xFE2
 23736                           fsr1l	equ	0xFE1
 23737                           indf2	equ	0xFDF
 23738                           postinc2	equ	0xFDE
 23739                           postdec2	equ	0xFDD
 23740                           plusw2	equ	0xFDB
 23741                           fsr2h	equ	0xFDA
 23742                           fsr2l	equ	0xFD9
 23743                           status	equ	0xFD8
 23744                           
 23745 ;; *************** function _GPSRead *****************
 23746 ;; Defined at:
 23747 ;;		line 468 in file "bibliotecas/GPS.c"
 23748 ;; Parameters:    Size  Location     Type
 23749 ;;  buff            1    wreg     unsigned char 
 23750 ;; Auto vars:     Size  Location     Type
 23751 ;;  buff            1   11[COMRAM] unsigned char 
 23752 ;;  c               1   12[COMRAM] unsigned char 
 23753 ;; Return value:  Size  Location     Type
 23754 ;;                  2    8[None  ] int 
 23755 ;; Registers used:
 23756 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23757 ;; Tracked objects:
 23758 ;;		On entry : 0/0
 23759 ;;		On exit  : 0/0
 23760 ;;		Unchanged: 0/0
 23761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23762 ;;      Params:         0       0       0       0       0       0       0       0       0
 23763 ;;      Locals:         2       0       0       0       0       0       0       0       0
 23764 ;;      Temps:          2       0       0       0       0       0       0       0       0
 23765 ;;      Totals:         4       0       0       0       0       0       0       0       0
 23766 ;;Total ram usage:        4 bytes
 23767 ;; Hardware stack levels used:    1
 23768 ;; Hardware stack levels required when called:    1
 23769 ;; This function calls:
 23770 ;;		_strcmp
 23771 ;;		_stringcpy
 23772 ;; This function is called by:
 23773 ;;		_isr
 23774 ;; This function uses a non-reentrant model
 23775 ;;
 23776                           
 23777                           	psect	text93
 23778  00237C                     __ptext93:
 23779                           	opt stack 0
 23780  00237C                     _GPSRead:
 23781                           	opt stack 13
 23782                           
 23783                           ;incstack = 0
 23784                           ;GPSRead@buff stored from wreg
 23785  00237C  6E0C               	movwf	GPSRead@buff,c
 23786                           
 23787                           ;GPS.c: 470: uint8_t c = buff;
 23788  00237E  C00C  F00D         	movff	GPSRead@buff,GPSRead@c
 23789                           
 23790                           ;GPS.c: 472: switch(c) {
 23791  002382  D156               	goto	i2l313
 23792  002384                     
 23793                           ;GPS.c: 474: if(SentenceType == 1)
 23794  002384  043B               	decf	_SentenceType,w,c
 23795  002386  A4D8               	btfss	status,2,c
 23796  002388  D004               	goto	i2l315
 23797                           
 23798                           ;GPS.c: 475: GPRMC_ok = 1;
 23799  00238A  0E00               	movlw	0
 23800  00238C  6E2E               	movwf	_GPRMC_ok+1,c
 23801  00238E  0E01               	movlw	1
 23802  002390  6E2D               	movwf	_GPRMC_ok,c
 23803  002392                     i2l315:
 23804                           
 23805                           ;GPS.c: 476: if(SentenceType == 2)
 23806  002392  0E02               	movlw	2
 23807  002394  183B               	xorwf	_SentenceType,w,c
 23808  002396  A4D8               	btfss	status,2,c
 23809  002398  D004               	goto	i2l316
 23810                           
 23811                           ;GPS.c: 477: GPGGA_ok = 1;
 23812  00239A  0E00               	movlw	0
 23813  00239C  6E2C               	movwf	_GPGGA_ok+1,c
 23814  00239E  0E01               	movlw	1
 23815  0023A0  6E2B               	movwf	_GPGGA_ok,c
 23816  0023A2                     i2l316:
 23817                           
 23818                           ;GPS.c: 478: if(GPRMC_ok && GPGGA_ok) {
 23819  0023A2  502D               	movf	_GPRMC_ok,w,c
 23820  0023A4  102E               	iorwf	_GPRMC_ok+1,w,c
 23821  0023A6  B4D8               	btfsc	status,2,c
 23822  0023A8  0012               	return	
 23823  0023AA  502B               	movf	_GPGGA_ok,w,c
 23824  0023AC  102C               	iorwf	_GPGGA_ok+1,w,c
 23825  0023AE  B4D8               	btfsc	status,2,c
 23826  0023B0  0012               	return	
 23827                           
 23828                           ;GPS.c: 479: GPRMC_ok = GPGGA_ok = 0;
 23829  0023B2  0E00               	movlw	0
 23830  0023B4  6E2C               	movwf	_GPGGA_ok+1,c
 23831  0023B6  0E00               	movlw	0
 23832  0023B8  6E2B               	movwf	_GPGGA_ok,c
 23833  0023BA  C02B  F02D         	movff	_GPGGA_ok,_GPRMC_ok
 23834  0023BE  C02C  F02E         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 23835                           
 23836                           ;GPS.c: 481: }
 23837                           ;GPS.c: 482: break;
 23838                           
 23839                           ;GPS.c: 480: return 1;
 23840                           ;	Return value of _GPSRead is never used
 23841  0023C2  0012               	return	
 23842  0023C4                     
 23843                           ;GPS.c: 485: Term = char_number = 0;
 23844  0023C4  0E00               	movlw	0
 23845  0023C6  6E3C               	movwf	_char_number,c
 23846  0023C8  C03C  F03A         	movff	_char_number,_Term
 23847                           
 23848                           ;GPS.c: 486: break;
 23849  0023CC  0012               	return	
 23850  0023CE                     
 23851                           ;GPS.c: 489: buffer[char_number] = '\0';
 23852  0023CE  503C               	movf	_char_number,w,c
 23853  0023D0  0D01               	mullw	1
 23854  0023D2  0EAC               	movlw	low _buffer
 23855  0023D4  24F3               	addwf	prodl,w,c
 23856  0023D6  6ED9               	movwf	fsr2l,c
 23857  0023D8  0E01               	movlw	high _buffer
 23858  0023DA  20F4               	addwfc	prodh,w,c
 23859  0023DC  6EDA               	movwf	fsr2h,c
 23860  0023DE  0E00               	movlw	0
 23861  0023E0  6EDF               	movwf	indf2,c
 23862                           
 23863                           ;GPS.c: 490: if(Term == 0) {
 23864  0023E2  503A               	movf	_Term,w,c
 23865  0023E4  A4D8               	btfss	status,2,c
 23866  0023E6  D030               	goto	i2l326
 23867                           
 23868                           ;GPS.c: 491: stringcpy(buffer, sentence, 0);
 23869  0023E8  0EAC               	movlw	low _buffer
 23870  0023EA  6E01               	movwf	stringcpy@str1,c
 23871  0023EC  0E01               	movlw	high _buffer
 23872  0023EE  6E02               	movwf	stringcpy@str1+1,c
 23873  0023F0  0ED2               	movlw	low _sentence
 23874  0023F2  6E03               	movwf	stringcpy@str2,c
 23875  0023F4  0E01               	movlw	high _sentence
 23876  0023F6  6E04               	movwf	stringcpy@str2+1,c
 23877  0023F8  0E00               	movlw	0
 23878  0023FA  6E06               	movwf	stringcpy@dir+1,c
 23879  0023FC  0E00               	movlw	0
 23880  0023FE  6E05               	movwf	stringcpy@dir,c
 23881  002400  ECEB  F028         	call	_stringcpy	;wreg free
 23882                           
 23883                           ;GPS.c: 492: if(strcmp(sentence, "GPRMC") == 0)
 23884  002404  0ED2               	movlw	low _sentence
 23885  002406  6E01               	movwf	strcmp@s1,c
 23886  002408  0E01               	movlw	high _sentence
 23887  00240A  6E02               	movwf	strcmp@s1+1,c
 23888  00240C  0E5E               	movlw	low STR_13
 23889  00240E  6E03               	movwf	strcmp@s2,c
 23890  002410  0E62               	movlw	high STR_13
 23891  002412  6E04               	movwf	strcmp@s2+1,c
 23892  002414  ECA6  F029         	call	_strcmp	;wreg free
 23893  002418  5001               	movf	?_strcmp,w,c
 23894  00241A  1002               	iorwf	?_strcmp+1,w,c
 23895  00241C  A4D8               	btfss	status,2,c
 23896  00241E  D002               	goto	i2l323
 23897                           
 23898                           ;GPS.c: 493: SentenceType = 1;
 23899  002420  0E01               	movlw	1
 23900  002422  D011               	goto	L11
 23901  002424                     i2l323:
 23902                           
 23903                           ;GPS.c: 494: else if(strcmp(sentence, "GPGGA") == 0)
 23904  002424  0ED2               	movlw	low _sentence
 23905  002426  6E01               	movwf	strcmp@s1,c
 23906  002428  0E01               	movlw	high _sentence
 23907  00242A  6E02               	movwf	strcmp@s1+1,c
 23908  00242C  0E58               	movlw	low STR_14
 23909  00242E  6E03               	movwf	strcmp@s2,c
 23910  002430  0E62               	movlw	high STR_14
 23911  002432  6E04               	movwf	strcmp@s2+1,c
 23912  002434  ECA6  F029         	call	_strcmp	;wreg free
 23913  002438  5001               	movf	?_strcmp,w,c
 23914  00243A  1002               	iorwf	?_strcmp+1,w,c
 23915  00243C  A4D8               	btfss	status,2,c
 23916  00243E  D002               	goto	i2l325
 23917                           
 23918                           ;GPS.c: 495: SentenceType = 2;
 23919  002440  0E02               	movlw	2
 23920  002442  D001               	goto	L11
 23921  002444                     i2l325:
 23922                           
 23923                           ;GPS.c: 496: else
 23924                           ;GPS.c: 497: SentenceType = 3;
 23925  002444  0E03               	movlw	3
 23926  002446                     L11:
 23927  002446  6E3B               	movwf	_SentenceType,c
 23928  002448                     i2l326:
 23929                           
 23930                           ;GPS.c: 498: }
 23931                           ;GPS.c: 501: if(Term == 1 && SentenceType == 1) {
 23932  002448  043A               	decf	_Term,w,c
 23933  00244A  A4D8               	btfss	status,2,c
 23934  00244C  D011               	goto	i2l327
 23935  00244E  043B               	decf	_SentenceType,w,c
 23936  002450  A4D8               	btfss	status,2,c
 23937  002452  D00E               	goto	i2l327
 23938                           
 23939                           ;GPS.c: 502: stringcpy(buffer, rawTime, 0);
 23940  002454  0EAC               	movlw	low _buffer
 23941  002456  6E01               	movwf	stringcpy@str1,c
 23942  002458  0E01               	movlw	high _buffer
 23943  00245A  6E02               	movwf	stringcpy@str1+1,c
 23944  00245C  0EF2               	movlw	low _rawTime
 23945  00245E  6E03               	movwf	stringcpy@str2,c
 23946  002460  0E02               	movlw	high _rawTime
 23947  002462  6E04               	movwf	stringcpy@str2+1,c
 23948  002464  0E00               	movlw	0
 23949  002466  6E06               	movwf	stringcpy@dir+1,c
 23950  002468  0E00               	movlw	0
 23951  00246A  6E05               	movwf	stringcpy@dir,c
 23952  00246C  ECEB  F028         	call	_stringcpy	;wreg free
 23953  002470                     i2l327:
 23954                           
 23955                           ;GPS.c: 503: }
 23956                           ;GPS.c: 506: if((Term == 3) && (SentenceType == 1)) {
 23957  002470  0E03               	movlw	3
 23958  002472  183A               	xorwf	_Term,w,c
 23959  002474  A4D8               	btfss	status,2,c
 23960  002476  D011               	goto	i2l328
 23961  002478  043B               	decf	_SentenceType,w,c
 23962  00247A  A4D8               	btfss	status,2,c
 23963  00247C  D00E               	goto	i2l328
 23964                           
 23965                           ;GPS.c: 507: stringcpy(buffer, rawLatitude, 1);
 23966  00247E  0EAC               	movlw	low _buffer
 23967  002480  6E01               	movwf	stringcpy@str1,c
 23968  002482  0E01               	movlw	high _buffer
 23969  002484  6E02               	movwf	stringcpy@str1+1,c
 23970  002486  0EE5               	movlw	low _rawLatitude
 23971  002488  6E03               	movwf	stringcpy@str2,c
 23972  00248A  0E02               	movlw	high _rawLatitude
 23973  00248C  6E04               	movwf	stringcpy@str2+1,c
 23974  00248E  0E00               	movlw	0
 23975  002490  6E06               	movwf	stringcpy@dir+1,c
 23976  002492  0E01               	movlw	1
 23977  002494  6E05               	movwf	stringcpy@dir,c
 23978  002496  ECEB  F028         	call	_stringcpy	;wreg free
 23979  00249A                     i2l328:
 23980                           
 23981                           ;GPS.c: 508: }
 23982                           ;GPS.c: 510: if((Term == 4) && (SentenceType == 1)) {
 23983  00249A  0E04               	movlw	4
 23984  00249C  183A               	xorwf	_Term,w,c
 23985  00249E  A4D8               	btfss	status,2,c
 23986  0024A0  D00D               	goto	i2l331
 23987  0024A2  043B               	decf	_SentenceType,w,c
 23988  0024A4  A4D8               	btfss	status,2,c
 23989  0024A6  D00A               	goto	i2l331
 23990                           
 23991                           ;GPS.c: 511: if(buffer[0] == 'N')
 23992  0024A8  0E4E               	movlw	78
 23993  0024AA  0101               	movlb	1	; () banked
 23994  0024AC  19AC               	xorwf	_buffer& (0+255),w,b
 23995  0024AE  A4D8               	btfss	status,2,c
 23996  0024B0  D002               	goto	i2l330
 23997                           
 23998                           ; BSR set to: 1
 23999                           ;GPS.c: 512: rawLatitude[0] = '0';
 24000  0024B2  0E30               	movlw	48
 24001  0024B4  D001               	goto	L12
 24002  0024B6                     i2l330:
 24003                           
 24004                           ;GPS.c: 513: else
 24005                           ;GPS.c: 514: rawLatitude[0] = '-';
 24006                           
 24007                           ; BSR set to: 2
 24008  0024B6  0E2D               	movlw	45
 24009  0024B8                     L12:
 24010  0024B8  0102               	movlb	2	; () banked
 24011  0024BA  6FE5               	movwf	_rawLatitude& (0+255),b
 24012  0024BC                     i2l331:
 24013                           
 24014                           ;GPS.c: 515: }
 24015                           ;GPS.c: 518: if((Term == 5) && (SentenceType == 1)) {
 24016                           
 24017                           ; BSR set to: 2
 24018                           
 24019                           ; BSR set to: 2
 24020  0024BC  0E05               	movlw	5
 24021  0024BE  183A               	xorwf	_Term,w,c
 24022  0024C0  A4D8               	btfss	status,2,c
 24023  0024C2  D011               	goto	i2l332
 24024  0024C4  043B               	decf	_SentenceType,w,c
 24025  0024C6  A4D8               	btfss	status,2,c
 24026  0024C8  D00E               	goto	i2l332
 24027                           
 24028                           ;GPS.c: 519: stringcpy(buffer, rawLongitude, 1);
 24029  0024CA  0EAC               	movlw	low _buffer
 24030  0024CC  6E01               	movwf	stringcpy@str1,c
 24031  0024CE  0E01               	movlw	high _buffer
 24032  0024D0  6E02               	movwf	stringcpy@str1+1,c
 24033  0024D2  0ED8               	movlw	low _rawLongitude
 24034  0024D4  6E03               	movwf	stringcpy@str2,c
 24035  0024D6  0E02               	movlw	high _rawLongitude
 24036  0024D8  6E04               	movwf	stringcpy@str2+1,c
 24037  0024DA  0E00               	movlw	0
 24038  0024DC  6E06               	movwf	stringcpy@dir+1,c
 24039  0024DE  0E01               	movlw	1
 24040  0024E0  6E05               	movwf	stringcpy@dir,c
 24041  0024E2  ECEB  F028         	call	_stringcpy	;wreg free
 24042  0024E6                     i2l332:
 24043                           
 24044                           ;GPS.c: 520: }
 24045                           ;GPS.c: 522: if((Term == 6) && (SentenceType == 1)) {
 24046  0024E6  0E06               	movlw	6
 24047  0024E8  183A               	xorwf	_Term,w,c
 24048  0024EA  A4D8               	btfss	status,2,c
 24049  0024EC  D00D               	goto	i2l335
 24050  0024EE  043B               	decf	_SentenceType,w,c
 24051  0024F0  A4D8               	btfss	status,2,c
 24052  0024F2  D00A               	goto	i2l335
 24053                           
 24054                           ;GPS.c: 523: if(buffer[0] == 'E')
 24055  0024F4  0E45               	movlw	69
 24056  0024F6  0101               	movlb	1	; () banked
 24057  0024F8  19AC               	xorwf	_buffer& (0+255),w,b
 24058  0024FA  A4D8               	btfss	status,2,c
 24059  0024FC  D002               	goto	i2l334
 24060                           
 24061                           ; BSR set to: 1
 24062                           ;GPS.c: 524: rawLongitude[0] = '0';
 24063  0024FE  0E30               	movlw	48
 24064  002500  D001               	goto	L13
 24065  002502                     i2l334:
 24066                           
 24067                           ;GPS.c: 525: else
 24068                           ;GPS.c: 526: rawLongitude[0] = '-';
 24069                           
 24070                           ; BSR set to: 2
 24071  002502  0E2D               	movlw	45
 24072  002504                     L13:
 24073  002504  0102               	movlb	2	; () banked
 24074  002506  6FD8               	movwf	_rawLongitude& (0+255),b
 24075  002508                     i2l335:
 24076                           
 24077                           ;GPS.c: 527: }
 24078                           ;GPS.c: 530: if((Term == 7) && (SentenceType == 1)) {
 24079                           
 24080                           ; BSR set to: 2
 24081                           
 24082                           ; BSR set to: 2
 24083  002508  0E07               	movlw	7
 24084  00250A  183A               	xorwf	_Term,w,c
 24085  00250C  A4D8               	btfss	status,2,c
 24086  00250E  D011               	goto	i2l336
 24087  002510  043B               	decf	_SentenceType,w,c
 24088  002512  A4D8               	btfss	status,2,c
 24089  002514  D00E               	goto	i2l336
 24090                           
 24091                           ;GPS.c: 531: stringcpy(buffer, rawSpeed, 0);
 24092  002516  0EAC               	movlw	low _buffer
 24093  002518  6E01               	movwf	stringcpy@str1,c
 24094  00251A  0E01               	movlw	high _buffer
 24095  00251C  6E02               	movwf	stringcpy@str1+1,c
 24096  00251E  0ECC               	movlw	low _rawSpeed
 24097  002520  6E03               	movwf	stringcpy@str2,c
 24098  002522  0E01               	movlw	high _rawSpeed
 24099  002524  6E04               	movwf	stringcpy@str2+1,c
 24100  002526  0E00               	movlw	0
 24101  002528  6E06               	movwf	stringcpy@dir+1,c
 24102  00252A  0E00               	movlw	0
 24103  00252C  6E05               	movwf	stringcpy@dir,c
 24104  00252E  ECEB  F028         	call	_stringcpy	;wreg free
 24105  002532                     i2l336:
 24106                           
 24107                           ;GPS.c: 532: }
 24108                           ;GPS.c: 535: if((Term == 8) && (SentenceType == 1)) {
 24109  002532  0E08               	movlw	8
 24110  002534  183A               	xorwf	_Term,w,c
 24111  002536  A4D8               	btfss	status,2,c
 24112  002538  D011               	goto	i2l337
 24113  00253A  043B               	decf	_SentenceType,w,c
 24114  00253C  A4D8               	btfss	status,2,c
 24115  00253E  D00E               	goto	i2l337
 24116                           
 24117                           ;GPS.c: 536: stringcpy(buffer, rawCourse, 0);
 24118  002540  0EAC               	movlw	low _buffer
 24119  002542  6E01               	movwf	stringcpy@str1,c
 24120  002544  0E01               	movlw	high _buffer
 24121  002546  6E02               	movwf	stringcpy@str1+1,c
 24122  002548  0EC6               	movlw	low _rawCourse
 24123  00254A  6E03               	movwf	stringcpy@str2,c
 24124  00254C  0E01               	movlw	high _rawCourse
 24125  00254E  6E04               	movwf	stringcpy@str2+1,c
 24126  002550  0E00               	movlw	0
 24127  002552  6E06               	movwf	stringcpy@dir+1,c
 24128  002554  0E00               	movlw	0
 24129  002556  6E05               	movwf	stringcpy@dir,c
 24130  002558  ECEB  F028         	call	_stringcpy	;wreg free
 24131  00255C                     i2l337:
 24132                           
 24133                           ;GPS.c: 537: }
 24134                           ;GPS.c: 540: if(Term == 9 && SentenceType == 1) {
 24135  00255C  0E09               	movlw	9
 24136  00255E  183A               	xorwf	_Term,w,c
 24137  002560  A4D8               	btfss	status,2,c
 24138  002562  D011               	goto	i2l338
 24139  002564  043B               	decf	_SentenceType,w,c
 24140  002566  A4D8               	btfss	status,2,c
 24141  002568  D00E               	goto	i2l338
 24142                           
 24143                           ;GPS.c: 541: stringcpy(buffer, rawDate, 0);
 24144  00256A  0EAC               	movlw	low _buffer
 24145  00256C  6E01               	movwf	stringcpy@str1,c
 24146  00256E  0E01               	movlw	high _buffer
 24147  002570  6E02               	movwf	stringcpy@str1+1,c
 24148  002572  0EBF               	movlw	low _rawDate
 24149  002574  6E03               	movwf	stringcpy@str2,c
 24150  002576  0E01               	movlw	high _rawDate
 24151  002578  6E04               	movwf	stringcpy@str2+1,c
 24152  00257A  0E00               	movlw	0
 24153  00257C  6E06               	movwf	stringcpy@dir+1,c
 24154  00257E  0E00               	movlw	0
 24155  002580  6E05               	movwf	stringcpy@dir,c
 24156  002582  ECEB  F028         	call	_stringcpy	;wreg free
 24157  002586                     i2l338:
 24158                           
 24159                           ;GPS.c: 542: }
 24160                           ;GPS.c: 545: if((Term == 7) && (SentenceType == 2)) {
 24161  002586  0E07               	movlw	7
 24162  002588  183A               	xorwf	_Term,w,c
 24163  00258A  A4D8               	btfss	status,2,c
 24164  00258C  D012               	goto	i2l339
 24165  00258E  0E02               	movlw	2
 24166  002590  183B               	xorwf	_SentenceType,w,c
 24167  002592  A4D8               	btfss	status,2,c
 24168  002594  D00E               	goto	i2l339
 24169                           
 24170                           ;GPS.c: 546: stringcpy(buffer, rawSatellites, 0);
 24171  002596  0EAC               	movlw	low _buffer
 24172  002598  6E01               	movwf	stringcpy@str1,c
 24173  00259A  0E01               	movlw	high _buffer
 24174  00259C  6E02               	movwf	stringcpy@str1+1,c
 24175  00259E  0E41               	movlw	low _rawSatellites
 24176  0025A0  6E03               	movwf	stringcpy@str2,c
 24177  0025A2  0E00               	movlw	high _rawSatellites
 24178  0025A4  6E04               	movwf	stringcpy@str2+1,c
 24179  0025A6  0E00               	movlw	0
 24180  0025A8  6E06               	movwf	stringcpy@dir+1,c
 24181  0025AA  0E00               	movlw	0
 24182  0025AC  6E05               	movwf	stringcpy@dir,c
 24183  0025AE  ECEB  F028         	call	_stringcpy	;wreg free
 24184  0025B2                     i2l339:
 24185                           
 24186                           ;GPS.c: 547: }
 24187                           ;GPS.c: 550: if((Term == 9) && (SentenceType == 2)) {
 24188  0025B2  0E09               	movlw	9
 24189  0025B4  183A               	xorwf	_Term,w,c
 24190  0025B6  A4D8               	btfss	status,2,c
 24191  0025B8  D012               	goto	i2l340
 24192  0025BA  0E02               	movlw	2
 24193  0025BC  183B               	xorwf	_SentenceType,w,c
 24194  0025BE  A4D8               	btfss	status,2,c
 24195  0025C0  D00E               	goto	i2l340
 24196                           
 24197                           ;GPS.c: 551: stringcpy(buffer, rawAltitude, 0);
 24198  0025C2  0EAC               	movlw	low _buffer
 24199  0025C4  6E01               	movwf	stringcpy@str1,c
 24200  0025C6  0E01               	movlw	high _buffer
 24201  0025C8  6E02               	movwf	stringcpy@str1+1,c
 24202  0025CA  0EB8               	movlw	low _rawAltitude
 24203  0025CC  6E03               	movwf	stringcpy@str2,c
 24204  0025CE  0E01               	movlw	high _rawAltitude
 24205  0025D0  6E04               	movwf	stringcpy@str2+1,c
 24206  0025D2  0E00               	movlw	0
 24207  0025D4  6E06               	movwf	stringcpy@dir+1,c
 24208  0025D6  0E00               	movlw	0
 24209  0025D8  6E05               	movwf	stringcpy@dir,c
 24210  0025DA  ECEB  F028         	call	_stringcpy	;wreg free
 24211  0025DE                     i2l340:
 24212                           
 24213                           ;GPS.c: 552: }
 24214                           ;GPS.c: 555: if((Term == 6) && (SentenceType == 2)) {
 24215  0025DE  0E06               	movlw	6
 24216  0025E0  183A               	xorwf	_Term,w,c
 24217  0025E2  A4D8               	btfss	status,2,c
 24218  0025E4  D015               	goto	i2l341
 24219  0025E6  0E02               	movlw	2
 24220  0025E8  183B               	xorwf	_SentenceType,w,c
 24221  0025EA  A4D8               	btfss	status,2,c
 24222  0025EC  D011               	goto	i2l341
 24223                           
 24224                           ;GPS.c: 556: stringcpy(buffer, rawFix,0);
 24225  0025EE  0EAC               	movlw	low _buffer
 24226  0025F0  6E01               	movwf	stringcpy@str1,c
 24227  0025F2  0E01               	movlw	high _buffer
 24228  0025F4  6E02               	movwf	stringcpy@str1+1,c
 24229  0025F6  5039               	movf	_rawFix,w,c
 24230  0025F8  6E0A               	movwf	??_GPSRead& (0+255),c
 24231  0025FA  6A0B               	clrf	(??_GPSRead+1)& (0+255),c
 24232  0025FC  C00A  F003         	movff	??_GPSRead,stringcpy@str2
 24233  002600  C00B  F004         	movff	??_GPSRead+1,stringcpy@str2+1
 24234  002604  0E00               	movlw	0
 24235  002606  6E06               	movwf	stringcpy@dir+1,c
 24236  002608  0E00               	movlw	0
 24237  00260A  6E05               	movwf	stringcpy@dir,c
 24238  00260C  ECEB  F028         	call	_stringcpy	;wreg free
 24239  002610                     i2l341:
 24240                           
 24241                           ;GPS.c: 558: }
 24242                           ;GPS.c: 559: Term++;
 24243  002610  2A3A               	incf	_Term,f,c
 24244                           
 24245                           ;GPS.c: 560: char_number = 0;
 24246  002612  0E00               	movlw	0
 24247  002614  6E3C               	movwf	_char_number,c
 24248                           
 24249                           ;GPS.c: 561: break;
 24250  002616  0012               	return	
 24251  002618                     
 24252                           ;GPS.c: 564: buffer[char_number++] = c;
 24253  002618  503C               	movf	_char_number,w,c
 24254  00261A  0D01               	mullw	1
 24255  00261C  0EAC               	movlw	low _buffer
 24256  00261E  24F3               	addwf	prodl,w,c
 24257  002620  6ED9               	movwf	fsr2l,c
 24258  002622  0E01               	movlw	high _buffer
 24259  002624  20F4               	addwfc	prodh,w,c
 24260  002626  6EDA               	movwf	fsr2h,c
 24261  002628  C00D  FFDF         	movff	GPSRead@c,indf2
 24262  00262C  2A3C               	incf	_char_number,f,c
 24263                           
 24264                           ;GPS.c: 566: }
 24265                           
 24266                           ;GPS.c: 565: break;
 24267  00262E  0012               	return	
 24268  002630                     i2l313:
 24269  002630  500D               	movf	GPSRead@c,w,c
 24270                           
 24271                           ; Switch size 1, requested type "space"
 24272                           ; Number of cases is 3, Range of values is 13 to 44
 24273                           ; switch strategies available:
 24274                           ; Name         Instructions Cycles
 24275                           ; simple_byte           10     6 (average)
 24276                           ;	Chosen strategy is simple_byte
 24277  002632  0A0D               	xorlw	13	; case 13
 24278  002634  B4D8               	btfsc	status,2,c
 24279  002636  D6A6               	goto	i2l314
 24280  002638  0A29               	xorlw	41	; case 36
 24281  00263A  B4D8               	btfsc	status,2,c
 24282  00263C  D6C3               	goto	i2l320
 24283  00263E  0A08               	xorlw	8	; case 44
 24284  002640  B4D8               	btfsc	status,2,c
 24285  002642  D6C5               	goto	i2l321
 24286  002644  D7E9               	goto	i2l342
 24287  002646                     __end_of_GPSRead:
 24288                           	opt stack 0
 24289                           tosu	equ	0xFFF
 24290                           tosh	equ	0xFFE
 24291                           tosl	equ	0xFFD
 24292                           pclatu	equ	0xFFB
 24293                           pclath	equ	0xFFA
 24294                           pcl	equ	0xFF9
 24295                           tblptru	equ	0xFF8
 24296                           tblptrh	equ	0xFF7
 24297                           tblptrl	equ	0xFF6
 24298                           tablat	equ	0xFF5
 24299                           prodh	equ	0xFF4
 24300                           prodl	equ	0xFF3
 24301                           intcon	equ	0xFF2
 24302                           intcon2	equ	0xFF1
 24303                           intcon3	equ	0xFF0
 24304                           indf0	equ	0xFEF
 24305                           postinc0	equ	0xFEE
 24306                           fsr0h	equ	0xFEA
 24307                           fsr0l	equ	0xFE9
 24308                           wreg	equ	0xFE8
 24309                           indf1	equ	0xFE7
 24310                           postinc1	equ	0xFE6
 24311                           postdec1	equ	0xFE5
 24312                           plusw1	equ	0xFE3
 24313                           fsr1h	equ	0xFE2
 24314                           fsr1l	equ	0xFE1
 24315                           indf2	equ	0xFDF
 24316                           postinc2	equ	0xFDE
 24317                           postdec2	equ	0xFDD
 24318                           plusw2	equ	0xFDB
 24319                           fsr2h	equ	0xFDA
 24320                           fsr2l	equ	0xFD9
 24321                           status	equ	0xFD8
 24322                           
 24323 ;; *************** function _stringcpy *****************
 24324 ;; Defined at:
 24325 ;;		line 459 in file "bibliotecas/GPS.c"
 24326 ;; Parameters:    Size  Location     Type
 24327 ;;  str1            2    0[COMRAM] PTR unsigned char 
 24328 ;;		 -> buffer(12), 
 24329 ;;  str2            2    2[COMRAM] PTR unsigned char 
 24330 ;;		 -> rawAltitude(7), rawSatellites(3), rawDate(7), rawCourse(6), 
 24331 ;;		 -> rawSpeed(6), rawLongitude(13), rawLatitude(13), rawTime(11), 
 24332 ;;		 -> sentence(6), RAM(2047), 
 24333 ;;  dir             2    4[COMRAM] int 
 24334 ;; Auto vars:     Size  Location     Type
 24335 ;;  chr             1    8[COMRAM] unsigned char 
 24336 ;; Return value:  Size  Location     Type
 24337 ;;                  1    wreg      void 
 24338 ;; Registers used:
 24339 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24340 ;; Tracked objects:
 24341 ;;		On entry : 0/0
 24342 ;;		On exit  : 0/0
 24343 ;;		Unchanged: 0/0
 24344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24345 ;;      Params:         6       0       0       0       0       0       0       0       0
 24346 ;;      Locals:         1       0       0       0       0       0       0       0       0
 24347 ;;      Temps:          2       0       0       0       0       0       0       0       0
 24348 ;;      Totals:         9       0       0       0       0       0       0       0       0
 24349 ;;Total ram usage:        9 bytes
 24350 ;; Hardware stack levels used:    1
 24351 ;; This function calls:
 24352 ;;		Nothing
 24353 ;; This function is called by:
 24354 ;;		_GPSRead
 24355 ;; This function uses a non-reentrant model
 24356 ;;
 24357                           
 24358                           	psect	text94
 24359  0051D6                     __ptext94:
 24360                           	opt stack 0
 24361  0051D6                     _stringcpy:
 24362                           	opt stack 13
 24363                           
 24364                           ;GPS.c: 461: uint8_t chr = 0;
 24365                           
 24366                           ;incstack = 0
 24367  0051D6  0E00               	movlw	0
 24368  0051D8  6E09               	movwf	stringcpy@chr,c
 24369  0051DA                     
 24370                           ;GPS.c: 464: str2[chr + dir] = str1[chr];
 24371  0051DA  5009               	movf	stringcpy@chr,w,c
 24372  0051DC  0D01               	mullw	1
 24373  0051DE  50F3               	movf	prodl,w,c
 24374  0051E0  2401               	addwf	stringcpy@str1,w,c
 24375  0051E2  6ED9               	movwf	fsr2l,c
 24376  0051E4  50F4               	movf	prodh,w,c
 24377  0051E6  2002               	addwfc	stringcpy@str1+1,w,c
 24378  0051E8  6EDA               	movwf	fsr2h,c
 24379  0051EA  5009               	movf	stringcpy@chr,w,c
 24380  0051EC  2405               	addwf	stringcpy@dir,w,c
 24381  0051EE  6E07               	movwf	??_stringcpy& (0+255),c
 24382  0051F0  0E00               	movlw	0
 24383  0051F2  2006               	addwfc	stringcpy@dir+1,w,c
 24384  0051F4  6E08               	movwf	(??_stringcpy+1)& (0+255),c
 24385  0051F6  5007               	movf	??_stringcpy,w,c
 24386  0051F8  2403               	addwf	stringcpy@str2,w,c
 24387  0051FA  6EE1               	movwf	fsr1l,c
 24388  0051FC  5008               	movf	??_stringcpy+1,w,c
 24389  0051FE  2004               	addwfc	stringcpy@str2+1,w,c
 24390  005200  6EE2               	movwf	fsr1h,c
 24391  005202  CFDF FFE7          	movff	indf2,indf1
 24392                           
 24393                           ;GPS.c: 465: } while(str1[chr++] != '\0');
 24394  005206  2A09               	incf	stringcpy@chr,f,c
 24395  005208  0409               	decf	stringcpy@chr,w,c
 24396  00520A  6E07               	movwf	??_stringcpy& (0+255),c
 24397  00520C  5007               	movf	??_stringcpy,w,c
 24398  00520E  0D01               	mullw	1
 24399  005210  50F3               	movf	prodl,w,c
 24400  005212  2401               	addwf	stringcpy@str1,w,c
 24401  005214  6ED9               	movwf	fsr2l,c
 24402  005216  50F4               	movf	prodh,w,c
 24403  005218  2002               	addwfc	stringcpy@str1+1,w,c
 24404  00521A  6EDA               	movwf	fsr2h,c
 24405  00521C  50DF               	movf	indf2,w,c
 24406  00521E  B4D8               	btfsc	status,2,c
 24407  005220  0012               	return	
 24408  005222  D7DB               	goto	i2l308
 24409  005224                     __end_of_stringcpy:
 24410                           	opt stack 0
 24411                           tosu	equ	0xFFF
 24412                           tosh	equ	0xFFE
 24413                           tosl	equ	0xFFD
 24414                           pclatu	equ	0xFFB
 24415                           pclath	equ	0xFFA
 24416                           pcl	equ	0xFF9
 24417                           tblptru	equ	0xFF8
 24418                           tblptrh	equ	0xFF7
 24419                           tblptrl	equ	0xFF6
 24420                           tablat	equ	0xFF5
 24421                           prodh	equ	0xFF4
 24422                           prodl	equ	0xFF3
 24423                           intcon	equ	0xFF2
 24424                           intcon2	equ	0xFF1
 24425                           intcon3	equ	0xFF0
 24426                           indf0	equ	0xFEF
 24427                           postinc0	equ	0xFEE
 24428                           fsr0h	equ	0xFEA
 24429                           fsr0l	equ	0xFE9
 24430                           wreg	equ	0xFE8
 24431                           indf1	equ	0xFE7
 24432                           postinc1	equ	0xFE6
 24433                           postdec1	equ	0xFE5
 24434                           plusw1	equ	0xFE3
 24435                           fsr1h	equ	0xFE2
 24436                           fsr1l	equ	0xFE1
 24437                           indf2	equ	0xFDF
 24438                           postinc2	equ	0xFDE
 24439                           postdec2	equ	0xFDD
 24440                           plusw2	equ	0xFDB
 24441                           fsr2h	equ	0xFDA
 24442                           fsr2l	equ	0xFD9
 24443                           status	equ	0xFD8
 24444                           
 24445 ;; *************** function _strcmp *****************
 24446 ;; Defined at:
 24447 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
 24448 ;; Parameters:    Size  Location     Type
 24449 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 24450 ;;		 -> sentence(6), 
 24451 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 24452 ;;		 -> STR_14(6), STR_13(6), 
 24453 ;; Auto vars:     Size  Location     Type
 24454 ;;  r               1    5[COMRAM] char 
 24455 ;; Return value:  Size  Location     Type
 24456 ;;                  2    0[COMRAM] int 
 24457 ;; Registers used:
 24458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 24459 ;; Tracked objects:
 24460 ;;		On entry : 0/0
 24461 ;;		On exit  : 0/0
 24462 ;;		Unchanged: 0/0
 24463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24464 ;;      Params:         4       0       0       0       0       0       0       0       0
 24465 ;;      Locals:         1       0       0       0       0       0       0       0       0
 24466 ;;      Temps:          1       0       0       0       0       0       0       0       0
 24467 ;;      Totals:         6       0       0       0       0       0       0       0       0
 24468 ;;Total ram usage:        6 bytes
 24469 ;; Hardware stack levels used:    1
 24470 ;; This function calls:
 24471 ;;		Nothing
 24472 ;; This function is called by:
 24473 ;;		_GPSRead
 24474 ;; This function uses a non-reentrant model
 24475 ;;
 24476                           
 24477                           	psect	text95
 24478  00534C                     __ptext95:
 24479                           	opt stack 0
 24480  00534C                     _strcmp:
 24481                           	opt stack 13
 24482                           
 24483                           ;incstack = 0
 24484  00534C  D004               	goto	i2l2115
 24485  00534E  4A01               	infsnz	strcmp@s1,f,c
 24486  005350  2A02               	incf	strcmp@s1+1,f,c
 24487  005352  4A03               	infsnz	strcmp@s2,f,c
 24488  005354  2A04               	incf	strcmp@s2+1,f,c
 24489  005356                     i2l2115:
 24490  005356  C001  FFD9         	movff	strcmp@s1,fsr2l
 24491  00535A  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 24492  00535E  50DF               	movf	indf2,w,c
 24493  005360  6E05               	movwf	??_strcmp& (0+255),c
 24494  005362  C003  FFF6         	movff	strcmp@s2,tblptrl
 24495  005366  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 24496  00536A                     	if	0	;tblptru may be non-zero
 24497  00536A                     	endif
 24498  00536A                     	if	0	;tblptru may be non-zero
 24499  00536A                     	endif
 24500  00536A  0008               	tblrd		*
 24501  00536C  50F5               	movf	tablat,w,c
 24502  00536E  0800               	sublw	0
 24503  005370  2405               	addwf	??_strcmp,w,c
 24504  005372  6E06               	movwf	strcmp@r,c
 24505  005374  5006               	movf	strcmp@r,w,c
 24506  005376  A4D8               	btfss	status,2,c
 24507  005378  D007               	goto	i2u1107_40
 24508  00537A  C001  FFD9         	movff	strcmp@s1,fsr2l
 24509  00537E  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 24510  005382  50DF               	movf	indf2,w,c
 24511  005384  A4D8               	btfss	status,2,c
 24512  005386  D7E3               	goto	i2l2116
 24513  005388                     i2u1107_40:
 24514  005388  5006               	movf	strcmp@r,w,c
 24515  00538A  6E01               	movwf	?_strcmp,c
 24516  00538C  6A02               	clrf	?_strcmp+1,c
 24517  00538E  BE01               	btfsc	?_strcmp,7,c
 24518  005390  0602               	decf	?_strcmp+1,f,c
 24519  005392  0012               	return	
 24520  005394                     __end_of_strcmp:
 24521                           	opt stack 0
 24522                           tosu	equ	0xFFF
 24523                           tosh	equ	0xFFE
 24524                           tosl	equ	0xFFD
 24525                           pclatu	equ	0xFFB
 24526                           pclath	equ	0xFFA
 24527                           pcl	equ	0xFF9
 24528                           tblptru	equ	0xFF8
 24529                           tblptrh	equ	0xFF7
 24530                           tblptrl	equ	0xFF6
 24531                           tablat	equ	0xFF5
 24532                           prodh	equ	0xFF4
 24533                           prodl	equ	0xFF3
 24534                           intcon	equ	0xFF2
 24535                           intcon2	equ	0xFF1
 24536                           intcon3	equ	0xFF0
 24537                           indf0	equ	0xFEF
 24538                           postinc0	equ	0xFEE
 24539                           fsr0h	equ	0xFEA
 24540                           fsr0l	equ	0xFE9
 24541                           wreg	equ	0xFE8
 24542                           indf1	equ	0xFE7
 24543                           postinc1	equ	0xFE6
 24544                           postdec1	equ	0xFE5
 24545                           plusw1	equ	0xFE3
 24546                           fsr1h	equ	0xFE2
 24547                           fsr1l	equ	0xFE1
 24548                           indf2	equ	0xFDF
 24549                           postinc2	equ	0xFDE
 24550                           postdec2	equ	0xFDD
 24551                           plusw2	equ	0xFDB
 24552                           fsr2h	equ	0xFDA
 24553                           fsr2l	equ	0xFD9
 24554                           status	equ	0xFD8
 24555                           tosu	equ	0xFFF
 24556                           tosh	equ	0xFFE
 24557                           tosl	equ	0xFFD
 24558                           pclatu	equ	0xFFB
 24559                           pclath	equ	0xFFA
 24560                           pcl	equ	0xFF9
 24561                           tblptru	equ	0xFF8
 24562                           tblptrh	equ	0xFF7
 24563                           tblptrl	equ	0xFF6
 24564                           tablat	equ	0xFF5
 24565                           prodh	equ	0xFF4
 24566                           prodl	equ	0xFF3
 24567                           intcon	equ	0xFF2
 24568                           intcon2	equ	0xFF1
 24569                           intcon3	equ	0xFF0
 24570                           indf0	equ	0xFEF
 24571                           postinc0	equ	0xFEE
 24572                           fsr0h	equ	0xFEA
 24573                           fsr0l	equ	0xFE9
 24574                           wreg	equ	0xFE8
 24575                           indf1	equ	0xFE7
 24576                           postinc1	equ	0xFE6
 24577                           postdec1	equ	0xFE5
 24578                           plusw1	equ	0xFE3
 24579                           fsr1h	equ	0xFE2
 24580                           fsr1l	equ	0xFE1
 24581                           indf2	equ	0xFDF
 24582                           postinc2	equ	0xFDE
 24583                           postdec2	equ	0xFDD
 24584                           plusw2	equ	0xFDB
 24585                           fsr2h	equ	0xFDA
 24586                           fsr2l	equ	0xFD9
 24587                           status	equ	0xFD8
 24588                           
 24589                           	psect	text96
 24590  000000                     __ptext96:
 24591                           	opt stack 0
 24592                           tosu	equ	0xFFF
 24593                           tosh	equ	0xFFE
 24594                           tosl	equ	0xFFD
 24595                           pclatu	equ	0xFFB
 24596                           pclath	equ	0xFFA
 24597                           pcl	equ	0xFF9
 24598                           tblptru	equ	0xFF8
 24599                           tblptrh	equ	0xFF7
 24600                           tblptrl	equ	0xFF6
 24601                           tablat	equ	0xFF5
 24602                           prodh	equ	0xFF4
 24603                           prodl	equ	0xFF3
 24604                           intcon	equ	0xFF2
 24605                           intcon2	equ	0xFF1
 24606                           intcon3	equ	0xFF0
 24607                           indf0	equ	0xFEF
 24608                           postinc0	equ	0xFEE
 24609                           fsr0h	equ	0xFEA
 24610                           fsr0l	equ	0xFE9
 24611                           wreg	equ	0xFE8
 24612                           indf1	equ	0xFE7
 24613                           postinc1	equ	0xFE6
 24614                           postdec1	equ	0xFE5
 24615                           plusw1	equ	0xFE3
 24616                           fsr1h	equ	0xFE2
 24617                           fsr1l	equ	0xFE1
 24618                           indf2	equ	0xFDF
 24619                           postinc2	equ	0xFDE
 24620                           postdec2	equ	0xFDD
 24621                           plusw2	equ	0xFDB
 24622                           fsr2h	equ	0xFDA
 24623                           fsr2l	equ	0xFD9
 24624                           status	equ	0xFD8
 24625                           
 24626                           	psect	rparam
 24627  0000                     tosu	equ	0xFFF
 24628                           tosh	equ	0xFFE
 24629                           tosl	equ	0xFFD
 24630                           pclatu	equ	0xFFB
 24631                           pclath	equ	0xFFA
 24632                           pcl	equ	0xFF9
 24633                           tblptru	equ	0xFF8
 24634                           tblptrh	equ	0xFF7
 24635                           tblptrl	equ	0xFF6
 24636                           tablat	equ	0xFF5
 24637                           prodh	equ	0xFF4
 24638                           prodl	equ	0xFF3
 24639                           intcon	equ	0xFF2
 24640                           intcon2	equ	0xFF1
 24641                           intcon3	equ	0xFF0
 24642                           indf0	equ	0xFEF
 24643                           postinc0	equ	0xFEE
 24644                           fsr0h	equ	0xFEA
 24645                           fsr0l	equ	0xFE9
 24646                           wreg	equ	0xFE8
 24647                           indf1	equ	0xFE7
 24648                           postinc1	equ	0xFE6
 24649                           postdec1	equ	0xFE5
 24650                           plusw1	equ	0xFE3
 24651                           fsr1h	equ	0xFE2
 24652                           fsr1l	equ	0xFE1
 24653                           indf2	equ	0xFDF
 24654                           postinc2	equ	0xFDE
 24655                           postdec2	equ	0xFDD
 24656                           plusw2	equ	0xFDB
 24657                           fsr2h	equ	0xFDA
 24658                           fsr2l	equ	0xFD9
 24659                           status	equ	0xFD8
 24660                           
 24661                           	psect	temp
 24662  000045                     btemp:
 24663                           	opt stack 0
 24664  000045                     	ds	1
 24665  0000                     int$flags	set	btemp
 24666  0000                     wtemp6	set	btemp+1
 24667                           tosu	equ	0xFFF
 24668                           tosh	equ	0xFFE
 24669                           tosl	equ	0xFFD
 24670                           pclatu	equ	0xFFB
 24671                           pclath	equ	0xFFA
 24672                           pcl	equ	0xFF9
 24673                           tblptru	equ	0xFF8
 24674                           tblptrh	equ	0xFF7
 24675                           tblptrl	equ	0xFF6
 24676                           tablat	equ	0xFF5
 24677                           prodh	equ	0xFF4
 24678                           prodl	equ	0xFF3
 24679                           intcon	equ	0xFF2
 24680                           intcon2	equ	0xFF1
 24681                           intcon3	equ	0xFF0
 24682                           indf0	equ	0xFEF
 24683                           postinc0	equ	0xFEE
 24684                           fsr0h	equ	0xFEA
 24685                           fsr0l	equ	0xFE9
 24686                           wreg	equ	0xFE8
 24687                           indf1	equ	0xFE7
 24688                           postinc1	equ	0xFE6
 24689                           postdec1	equ	0xFE5
 24690                           plusw1	equ	0xFE3
 24691                           fsr1h	equ	0xFE2
 24692                           fsr1l	equ	0xFE1
 24693                           indf2	equ	0xFDF
 24694                           postinc2	equ	0xFDE
 24695                           postdec2	equ	0xFDD
 24696                           plusw2	equ	0xFDB
 24697                           fsr2h	equ	0xFDA
 24698                           fsr2l	equ	0xFD9
 24699                           status	equ	0xFD8


Data Sizes:
    Strings     370
    Constant    34
    Data        145
    BSS         912
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     34      68
    BANK0           160    150     160
    BANK1           256     37     253
    BANK2           256      0     253
    BANK3           256    129     129
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3445	PTR FTN()void  size(2) Largest target is 1
		 -> troca_de_tela(), verifica_fence_externo(), disparo_gravacao(), verifica_dados_operacionais(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK2[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK2[11]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_14(CODE[6]), STR_13(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK1[6]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), STR_33(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 128
		 -> poligono_ext.point_long_min(BANK1[6]), poligono_ext.fence_long_min(BANK1[6]), poligono_ext.point_lat_min(BANK1[6]), poligono_ext.fence_lat_min(BANK1[6]), 
		 -> poligono_ext.fence_lat_deg(BANK1[6]), poligono_ext.point_lat_deg(BANK1[6]), poligono_ext.fence_long_deg(BANK1[6]), poligono_ext.point_long_deg(BANK1[6]), 
		 -> poligono_ext(BANK1[128]), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 35
		 -> STR_21(CODE[35]), 

    fprintf@arp	PTR void [1] size(2) Largest target is 2
		 -> ?_fprintf(BANK1[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 52
		 -> fprintf@s(BANK3[16]), STR_26(CODE[16]), STR_25(CODE[27]), STR_24(CODE[17]), 
		 -> STR_23(CODE[16]), STR_22(CODE[16]), string_dado(BANK2[52]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_27(CODE[13]), filename(BANK2[15]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_27(CODE[13]), filename(BANK2[15]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_open@dir(BANK1[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    trace_path@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK1[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_27(CODE[13]), filename(BANK2[15]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    S1862_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 2047
		 -> escreve_inteiro_lcd@texto(BANK0[7]), STR_31(CODE[11]), STR_30(CODE[10]), STR_29(CODE[16]), 
		 -> STR_28(CODE[11]), STR_20(CODE[9]), STR_19(CODE[10]), STR_18(CODE[10]), 
		 -> STR_17(CODE[14]), STR_16(CODE[21]), STR_15(CODE[15]), STR_12(CODE[8]), 
		 -> STR_11(CODE[17]), STR_10(CODE[8]), STR_9(CODE[16]), STR_8(CODE[9]), 
		 -> STR_7(CODE[6]), STR_6(CODE[4]), STR_5(CODE[9]), RAM(DATA[2047]), 
		 -> STR_4(CODE[4]), STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[14]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK2[11]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK2[20]), 

    S590_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S590_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK1[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 2047
		 -> rawAltitude(BANK1[7]), rawSatellites(COMRAM[3]), rawDate(BANK1[7]), rawCourse(BANK1[6]), 
		 -> rawSpeed(BANK1[6]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK2[11]), 
		 -> sentence(BANK1[6]), RAM(DATA[2047]), 

    sp__Longitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK2[13]), 

    verifica_fence_externo@point_buff_gps_long	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK2[13]), 

    sp__Latitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK2[13]), 

    verifica_fence_externo@point_buff_gps_lat	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK2[13]), 

    p_tarefas	PTR FTN()void [4] size(2) Largest target is 1
		 -> troca_de_tela(), verifica_fence_externo(), disparo_gravacao(), verifica_dados_operacionais(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _main->_escalonador
    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _verifica_fence_externo->_escreve_inteiro_lcd
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _atoi->___wmul
    _troca_de_tela->_posicao_cursor_lcd
    _escreve_cmd_lcd->_delay
    _escrita_sdcard->_fprintf
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _fprintf->_fputs
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_trace_path
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _clust2sect->___lmul
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_wait_ready
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_escalonador
    _escrita_sdcard->_f_open

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _escalonador->_verifica_fence_externo
    _escrita_sdcard->_fprintf

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  453575
                    _dados_gps_to_sd
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    6643
                                              6 BANK0     36    36      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                              3 BANK0      1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     176
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     176
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  443848
                                            149 BANK0      1     1      0
                                             35 BANK1      2     2      0
                   _disparo_gravacao *
                      _troca_de_tela *
        _verifica_dados_operacionais *
             _verifica_fence_externo *
 ---------------------------------------------------------------------------------
 (2) _verifica_fence_externo                             139   139      0   19271
                                             33 BANK0      6     6      0
                                              0 BANK3    129   129      0
                           _Latitude
                          _Longitude
                               _atoi
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                  9     7      2    7295
                                             24 BANK0      9     7      2
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 8     2      6    3936
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     3      6    3163
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4    1132
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4    1321
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    2545
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _Longitude                                            2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Latitude                                             2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _verifica_dados_operacionais                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _troca_de_tela                                        2     2      0    6563
                                              6 BANK0      2     2      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                                _fix
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _fix                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _disparo_gravacao                                     0     0      0  417791
                     _escrita_sdcard
 ---------------------------------------------------------------------------------
 (3) _escrita_sdcard                                       2     2      0  417791
                        _desliga_SPI
                       _desliga_uart
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                     _inicializa_SPI
                    _inicializa_uart
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             14 BANK0     14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _fprintf                                             57    37     20  128922
                                            147 BANK0      2     2      0
                                              0 BANK1     20     0     20
                                              0 BANK3     35    35      0
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (5) _fputs                                                7     3      4   62151
                                            140 BANK0      7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                7     3      4   61658
                                            133 BANK0      7     3      4
                            _f_write
 ---------------------------------------------------------------------------------
 (7) _f_write                                             33    25      8   60846
                                            100 BANK0     33    25      8
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     412
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (4) _f_open                                              44    39      5  201766
                                            119 BANK0      9     4      5
                                              0 BANK1     35    35      0
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (5) _trace_path                                          23    15      8   39428
                                             96 BANK0     23    15      8
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _make_dirfile                                        13     9      4    2753
                                              8 BANK0     13     9      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _reserve_direntry                                    18    14      4   77161
                                            100 BANK0     18    14      4
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _next_dir_entry                                      13    11      2   18753
                                             83 BANK0     13    11      2
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (8) _clust2sect                                          11     7      4    1487
                                             12 BANK0     11     7      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _remove_chain                                         8     6      2   33533
                                             86 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (8) _memcpy                                              11     5      6    1018
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (5) _auto_mount                                          40    37      3   32123
                                             51 BANK0     40    37      3
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (7) _memset                                               8     2      6    1217
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (6) _disk_initialize                                      4     4      0   20396
                                             32 BANK0      2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (7) _sdc_disk_initialize                                 13    13      0   20266
                                             19 BANK0     13    13      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (8) _sdc_reset                                           20    20      0    9699
                                             12 BANK0      7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    3207
                                              3 BANK0      3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2879
                                              3 BANK0      2     0      2
              _escreve_caractere_lcd
                                _fix (ARG)
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _check_fs                                             8     4      4    6655
                                             43 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (6) _memcmp                                               9     3      6     701
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     516
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) _f_mount                                              3     1      2     394
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _f_lseek                                             29    23      6   55200
                                            100 BANK0     29    23      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (8) _create_chain                                        14    12      2   34596
                                             86 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (9) _put_cluster                                         22    18      4   16723
                                             64 BANK0     22    18      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (9) _get_cluster                                         19    17      2   16432
                                             64 BANK0     19    17      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1392
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     901
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _f_close                                              3     1      2   30391
                                             75 BANK0      3     1      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (5) _f_sync                                               9     7      2   30018
                                             66 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (8) _validate                                             6     2      4    1250
                                              7 BANK0      6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (9) _disk_status                                          5     5      0     226
                                              2 BANK0      5     5      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_status                                     4     4      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _sync                                                 2     2      0   14169
                                             64 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (8) _move_window                                         21    17      4   13831
                                             43 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (9) _disk_write                                          12     5      7    6078
                                             31 BANK0     12     5      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_write                                     19    12      7    4614
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (9) _disk_read                                           12     5      7    5647
                                             31 BANK0     12     5      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_read                                      24    17      7    4450
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (11) _response                                            1     1      0      34
                                              0 BANK0      1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (11) _proceed                                             0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (11) _command                                             7     2      5    3403
                                              5 BANK0      7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (12) _wait_ready                                         15    15      0      99
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _escreve_SPI                                         2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _dummy_clocks                                        5     5      0      68
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _disk_ioctl                                           7     4      3     304
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (5) _get_fattime                                         51    47      4     201
                                              0 BANK0     51    47      4
 ---------------------------------------------------------------------------------
 (4) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dados_gps_to_sd                                      0     0      0    1177
                           _monta_sd
 ---------------------------------------------------------------------------------
 (2) _monta_sd                                             5     3      2    1177
                                              6 BANK0      5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     220
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                21    21      0    3035
                                             13 COMRAM    21    21      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (17) i2_write_timer_zero                                  2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _GPSRead                                             4     4      0    2897
                                              9 COMRAM     4     4      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (18) _stringcpy                                           9     3      6    2435
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (18) _strcmp                                              6     2      4     395
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dados_gps_to_sd
     _monta_sd
       _strlen
   _escalonador
     _disparo_gravacao *
       _escrita_sdcard
         _desliga_SPI
         _desliga_uart
         _f_close
           _f_sync
             _get_fattime
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _sync
               _disk_ioctl
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _f_lseek
           ___lldiv
           _create_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _validate
             _disk_status
               _sdc_disk_status
         _f_mount
         _f_open
           _auto_mount
             ___lldiv
             ___lmul
             _check_fs
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcmp
             _disk_initialize
               _sdc_disk_initialize
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                   _fix (ARG)
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
                 _sdc_reset
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                     _fix (ARG)
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _disk_status
               _sdc_disk_status
             _memset
           _get_fattime
           _memcpy
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _remove_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _reserve_direntry
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
           _trace_path
             _clust2sect
               ___lmul
             _make_dirfile
               _memset
             _memcmp
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
         _fprintf
           ___lldiv
           ___llmod
           ___wmul
           _fputc
             _f_write
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcpy
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
           _fputs
             _fputc
               _f_write
                 _clust2sect
                   ___lmul
                 _create_chain
                   _get_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                   _put_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcpy
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                 _validate
                   _disk_status
                     _sdc_disk_status
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
     _troca_de_tela *
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
         _fix (ARG)
       _fix
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
     _verifica_dados_operacionais *
     _verifica_fence_externo *
       _Latitude
       _Longitude
       _atoi
         ___wmul
         _isdigit
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
         _fix (ARG)
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
           _fix (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
       _fix (ARG)
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     81      81      11       50.4%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FD       9       98.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     25      FD       7       98.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     96      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     22      44       1       72.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     35F      20        0.0%
DATA                 0      0     57F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 19 16:39:41 2022

                        next_dir_entry@idx 00BE                   __end_of_mensagem_inicial 4C80  
                      next_dir_entry@clust 00BC                                _SSPSTATbits 000FC7  
                         ??_init_interrupt 0060               __size_of_escreve_inteiro_lcd 0040  
                                       _fs 0381                        ___wmul@multiplicand 0062  
                              _put_cluster 2B8C                           disk_write@sector 0081  
                             ?_escalonador 0001                             create_chain@fs 00BC  
                         disk_write@result 0088                           ?_inicializa_uart 0001  
                                      l111 462A                                        l200 07C6  
                                      l120 55EE                                        l201 07F4  
                                      l113 46BC                                        l210 083E  
                                      l203 082C                                        l220 086E  
                                      l221 089C                                        l141 03D2  
                                      l142 008A                                        l223 08D4  
                                      l151 0182                                        l143 0098  
                   __size_of_troca_de_tela 0248                                        l119 55DE  
                                      l209 08DA                                        l170 0414  
                                      l219 08E6                                        l163 0786  
                                      l251 2E26                                        l180 0548  
                                      l172 0464                                        l164 03EC  
                                      l156 019E                                        l148 00B4  
                                      l260 2FA0                                        l252 2E6A  
                                      l501 578E                                        l165 03F8  
                                      l157 01AA                                        l149 00C0  
                                      l253 2F52                                        l190 0796  
                                      l182 0598                                        l174 051A  
                                      l246 2E6E                                        l175 052C  
                                      l167 0516                                        l159 03D0  
                                      l263 2F70                                        l408 544C  
                                      l184 064E                                        l264 2F9C  
                                      l409 543E                                        l417 556E  
                                      l425 4FD4                                        l185 0784  
                                      l177 064A                                        l265 2FFA  
                                      l450 40C4                                        l426 4FCE  
                                      l266 2FF6                                        l258 2ECC  
                                      l451 40D0                                        l611 2230  
                                      l603 21A4                                        l259 2F4E  
                                      l620 22FE                                        l700 48D8  
                                      l268 3048                                        l461 4154  
                                      l541 531A                                        l621 2328  
                                      l701 48DA                                        l189 0832  
                                      l462 417C                                        l630 3C86  
                                      l542 532E                                        l614 2270  
                                      l550 553E                                        l702 48F0  
                                      l463 415A                                        l455 40F4  
                                      l631 3C72                                        l615 229A  
                                      l439 440A                                        l703 48F2  
                                      l456 4100                                        l640 3CDC  
                                      l720 4EA8                                        l704 48FA  
                                      l449 4186                                        l721 4EAA  
                                      l625 236A                                        l705 48FC  
                                      l458 4124                                        l570 5632  
                                      l642 3D2E                                        l634 3CAC  
                                      l554 4A40                                        l650 3300  
                                      l562 4BE0                                        l538 5332  
                                      l722 4EC0                                        l546 5542  
                                      l706 4904                                        l459 4130  
                                      l571 5626                                        l555 49D0  
                                      l563 4B78                                        l539 530A  
                                      l723 4EC2                                        l547 5526  
                                      l707 4906                                        l636 3CC8  
                                      l652 3330                                        l724 4ECA  
                                      l716 4E94                                        l740 4DD6  
                                      l708 490E                                        l573 562A  
                                      l637 3CC0                                        l557 4A02  
                                      l565 4BAA                                        l725 4ECC  
                                      l717 4E96                                        l733 4E00  
                                      l549 5532                                        l709 4910  
                                      l574 562E                                        l558 4A3C  
                                      l566 4BDC                                        l750 4E30  
                                      l726 4ED4                                        l718 4E9E  
                                      l734 4DDE                                        l495 580A  
                                      l639 3CF4                                        l655 33AA  
                                      l647 3360                                        l751 4E38  
                                      l727 4ED6                                        l719 4EA0  
                                      l735 4D9A                                        l583 475A  
                                      l591 20B2                                        l648 32AC  
                                      l664 5750                                        l760 4E70  
                                      l752 4E3A                                        l728 4EDE  
                                      l736 4DFA                                        l657 33DE  
                                      l753 4E50                                        l745 4E1A  
                                      l729 4EE0                                        l737 4DA6  
                                      l754 4E52                                        l746 4E1C  
                                      l738 4DB6                                        l578 46DA  
                                      l659 3426                                        l755 4E5A  
                                      l747 4E24                                        l739 4DC6  
                                      l579 46F8                                        l595 2240  
                                      l684 565A                                        l756 4E5C  
                                      l748 4E26                                        l596 20E6  
                                      l588 2090                                        l757 4E64  
                                      l749 4E2E                                        l597 20F0  
                                      l589 20A6                                        l686 566A  
                                      l758 4E66                                        l598 211A  
                                      l694 48BA                                        l759 4E6E  
                                      l951 3E60                                        l695 48BC  
                                      l696 48C4                                        l697 48C6  
                                      l778 51AE                                        l698 48CE  
                                      l779 5184                                        l699 48D0  
                                      _PCL 000FF9                                        _PR2 000FCB  
                                      _fil 0190                           ??_init_oscilador 0060  
                                      _fix 583A                                        _isr 0008  
                             disk_read@res 008A                                        prod 000FF3  
                           ??_create_chain 00B8                                        tosl 000FFD  
                                      wreg 000FE8       verifica_fence_externo@point_dif_long 037C  
                __size_of_write_timer_zero 000A                            create_chain@mcl 00BA  
                          create_chain@ncl 00C2                            create_chain@scl 00C0  
                  ??_escreve_frase_ram_lcd 0065                                       l1100 3546  
                                     l1102 3582                                       l1031 3702  
                                     l1103 35B2                                       l1104 35F0  
                                     l1112 3838                                       l1033 37AC  
                                     l1201 283C                                       l1034 378E  
                                     l1210 298C                                       l1043 324A  
                                     l1107 446A                                       l1211 29A0  
                                     l1028 367C                                       l1044 309A  
                                     l1116 3920                                       l1212 29CC  
                                     l1140 39D8                                       l1204 2862  
                                     l1037 505E                                       l1053 31DC  
                                     l1117 38E2                                       l1221 2AA8  
                                     l1205 2876                                       l1046 3264  
                                     l1070 2DF2                                       l1062 2C4E  
                                     l1230 4B20                                       l1214 2A38  
                                     l1039 507C                                       l1071 2D60  
                                     l1072 2D94                                       l1064 2C82  
                                     l1232 4B40                                       l1240 0FA0  
                                     l1080 45C0                                       l1224 2B56  
                                     l1144 3AA2                                       l1049 31BC  
                                     l1057 2DD6                                       l1073 2DD2  
                                     l1065 2CDE                                       l1233 4B6E  
                                     l1081 45EA                                       l1225 2B16  
                                     l1209 2964                                       l1058 2BB4  
                                     l1226 2B46                                       l1218 2A82  
                                     l1330 0A18                                       l2123 54F2  
                                     l1067 2D36                                       l1059 2C14  
                                     l1091 34E0                                       l1243 0FD0  
                                     l1171 3A48                                       l1139 3968  
                                     l1331 0D14                                       l2124 54EC  
                                     l1092 34C2                                       l1252 10E8  
                                     l1244 0FCC                                       l1236 0F28  
                                     l1076 45F2                                       l1180 3A7E  
                                     l1164 3A16                                       l1156 3A06  
                                     l1332 0B4E                                       l1253 1224  
                                     l1245 0FFE                                       l1237 0F22  
                                     l1077 4580                                       l1341 0EFC  
                                     l1333 0AD4                                       l1262 52B8  
                                     l1094 34D8                                       l1254 1316  
                                     l1246 100A                                       l1078 45A2  
                                     l1182 3A80                                       l1174 3A60  
                                     l1166 3A1E                                       l1350 0EEA  
                                     l1342 0C96                                       l1422 5124  
                                     l1095 34E8                                       l1087 3496  
                                     l1255 132C                                       l1239 0F7A  
                                     l1167 3A26                                       l1191 276E  
                                     l1343 0C3E                                       l1335 0AF4  
                                     l1248 107E                                       l1176 3A62  
                                     l1168 3A2E                                       l1192 27D4  
                                     l1097 3516                                       l1265 5234  
                                     l1249 10A0                                       l1281 1DA8  
                                     l1329 0E8E                                       l1345 0E54  
                                     l1441 19BA                                       l1258 52A6  
                                     l1354 3FA0                                       l1370 16DC  
                                     l1522 5092                                       l1194 27C8  
                                     l1186 271E                                       l1282 1DD0  
                                     l1274 1CDA                                       l1346 0D06  
                                     l1450 1A7A                                       l1442 196C  
                                     l1434 18F0                                       l1355 3EE8  
                                     l1099 355E                                       l1267 524C  
                                     l1523 50A6                                       l1291 1F0A  
                                     l1419 50EC                                       l1427 4AB6  
                                     l1451 1A86                                       l1372 18BA  
                                     l1268 526C                                       l1292 1F26  
                                     l1276 1EFE                                       l1428 4A66  
                                     l1452 1A92                                       l1197 281A  
                                     l1189 2742                                       l1285 1E9E  
                                     l1277 1D9E                                       l1349 0DD6  
                                     l1429 4AAE                                       l1461 1B22  
                                     l1437 193E                                       l1374 17C0  
                                     l1366 14D2                                       l1198 2848  
                                     l1286 1E6E                                       l1278 1D26  
                                     l1462 1B3A                                       l1454 1AB8  
                                     l1446 19E6                                       l1383 1854  
                                     l1375 16FA                                       l1295 1F42  
                                     l1279 1D4A                                       l1439 1C8E  
                                     l1471 1C26                                       l1463 1B6E  
                                     l1447 1A20                                       l1376 173A  
                                     l1368 168E                                       l1448 1A6A  
                                     l1369 16F0                                       l1457 1ADE  
                                     l1570 429E                                       l1379 174E  
                                     l1467 1BEA                                       l1571 42B6  
                                     l1900 4D28                                       l1468 1C44  
                                     l1469 1C18                                       l1573 42E4  
                                     l1910 4F6A                                       l1574 42D8  
                                     l1903 4D68                                       l1904 4D76  
                                     l1913 4F9E                                       l1577 4318  
                                     l1681 41F2                                       l1914 4FAC  
                                     l1578 4326                                       l1579 433C  
                                     l1684 4242                                       l1909 4F76  
                                     l1685 4204                                       l1678 41B0  
                                     l1687 4276                                       l1679 41AA  
                                     l1871 4510                                       l1952 514E  
                                     l1872 4552                                       l1953 5146  
                                     l1865 53BA                                       l1962 53F0  
                                     ?_fix 0001                                       l1859 56DC  
                                     l1963 53E8                                       l1956 516E  
                                     l1957 5178                                       l1869 44D4  
                                     l1990 55A0                                       l1966 5408  
                                     l1983 52F0                                       l1967 5412  
                                     l1976 47EC                                       l1984 52CE  
                                     l1977 4766                                       l1978 47E4  
                                     l1899 4D34                                       l1989 55B2  
                                     ?_isr 0001                                       l9647 3324  
                    _escreve_caractere_lcd 4E06                                       l9771 5652  
                                     l9679 33D2                                       STR_1 61EF  
                                     STR_2 626F                                       l9777 5662  
                                     STR_3 626A                                       STR_4 6278  
                                     STR_5 6247                                       STR_6 6278  
                                     STR_7 6264                                       STR_8 6247  
                                     l9887 36FA                                       STR_9 61C2  
                           timer_dois@flag 0036                                       _BRGH 007D62  
                          __end_of_GPSRead 2646                                       _T0IF 007F92  
                                     _CREN 007D5C                               ?_escreve_SPI 0001  
                                     _LATB 000F8A                                       _PIE1 000F9D  
                                     _RCIF 007CF5                                       i2l95 3B1E  
                                     i2l96 3BAE                                       i2l97 3B38  
                                     i2l99 3B66                                       _TMR0 000FD6  
                                     _TMR2 000FCC                                       _SPEN 007D5F  
                                     _TRMT 007D61                                       _TXEN 007D65  
                                     _SYNC 007D64                               trace_path@dj 00C0  
                             trace_path@fn 00C2                               trace_path@ds 00D4  
                             trace_path@fs 00D0                              ?_make_dirfile 0068  
                                     _Term 003A                                       _dado 0035  
                                     _flag 00F6                                       _atoi 41A8  
                                     _main 55C6                                       _fsid 00F9  
                                     _itoa 5394                                       fsr0h 000FEA  
                                     fsr1h 000FE2                                       indf0 000FEF  
                                     fsr2h 000FDA                                       fsr0l 000FE9  
                                     indf1 000FE7                                       indf2 000FDF  
                                     fsr1l 000FE1                                       fsr2l 000FD9  
                                     btemp 0045                                       _utoa 44CC  
                                     _sync 5026                              disk_ioctl@cmd 0060  
                            disk_read@buff 007F                              disk_ioctl@res 0064  
                            disk_read@pdrv 0087                                       prodh 000FF4  
                                     prodl 000FF3                                       start 000E  
                  ?_verifica_fence_externo 0001                  sdc_disk_initialize@buff_i 007B  
                             ___param_bank 000000                  sdc_disk_initialize@count1 0077  
                sdc_disk_initialize@count2 007D                                _string_dado 0290  
                                    ??_fix 0060                                      ??_isr 000E  
                  __size_of_escrita_sdcard 00C8           __size_of_configura_baudrate_uart 0132  
                                    l10117 471A                                      l10151 34C2  
                                    l10225 52A2                                      l10241 52CE  
                                    l10155 34E8                                      l10329 21D4  
                                    l12009 0524                                      l10435 4766  
                                    l10427 55A0                                      l12027 0590  
                                    l11175 109C                                      l12127 089C  
                                    l12313 4128                                      l11257 4AAE  
                                    l10299 213C                                      l12087 07F4  
                                    l11563 18F0                                      l11811 423E  
                                    l12285 40C8                                      l11655 1AF8  
                                    l12375 4622                                      l12299 40F8  
                                    l11595 19A6                                      l11931 01A2  
                                    l11915 017A                                      l11881 0090  
                                    l11971 03F0                                      l11897 00B8  
                                    l11989 045C                            __end_of___aldiv 434E  
                                    ?_atoi 0066                                      ?_main 0001  
                                    ?_itoa 0070                                      STR_10 6250  
                                    STR_11 6171                                      STR_12 6250  
                                    STR_20 623E                                      STR_13 625E  
                                    STR_21 610D                                      STR_14 6258  
                                    STR_30 6220                                      STR_22 61A2  
                                    STR_31 620A                                      STR_15 61D2  
                                    STR_23 61B2                                      STR_32 627C  
                                    STR_24 6160                                      STR_16 614B  
                                    STR_33 6274                                      STR_17 61E1  
                                    STR_25 6130                                      STR_18 6234  
                                    STR_26 6192                                      STR_19 622A  
                                    STR_27 61FD                                      STR_28 6215  
                                    STR_29 6182                               ?_leitura_SPI 0001  
                          __end_of___lldiv 4D88                                      ?_utoa 0067  
                                    ?_sync 0001                                      _T0CON 000FD5  
                                    u13030 3480                                      u13040 348C  
                          __end_of___llmod 4FBE                                      u12410 334A  
                                    u12260 5592                                      u13150 35DE  
                                    u12280 4FDE                                      u13320 21D4  
                                    u13240 20C2                                      _T2CON 000FCA  
                                    u12425 337C                                      u12450 33F8  
                                    u13250 20D2                                      u15010 4AD6  
                                    u12460 3434                                      u14140 4B3C  
                                    u13340 21E0                                      u13261 20DC  
                                    u13190 52A2                                      u13430 2340  
                                    u12295 3C20                                      u12720 3752  
                                    u13440 2378                                      u13280 213C  
                                    u14320 5152                                      u12385 32D2  
                                    u15017 4ACC                                      u16001 001C  
                                    u12490 5672                                      u14250 42E8  
                                    u16011 002E                                      u13460 4794  
                                    u15220 1E6A                                      u13700 0E96  
                                    u16100 0172                                      u14165 3FBE  
                                    u14405 3DEA                                      u16021 0040  
                                    u12670 363A                                      u13390 22C4  
                                    u15070 4F7A                                      u14350 53F4  
                                    u16110 0176                                      u14175 3FDA  
                                    u12815 30CA                                      u13615 0B9C  
                                    u14415 3E34                                      u16031 0052  
                                    u13480 47BC                                      u12760 51A4  
                                    u13800 38DE                                      u14185 400A  
                                    u14290 4D38                                      u12770 51CE  
                                    u14450 45D8                                      u13810 39A0  
                                    u16210 0266                                      u14195 4024  
                                    u12835 313E                                      u12915 2CAE  
                                    u13467 478A                                      u14460 4600  
                                    u15260 1F22                                      u16140 0190  
                                    u16060 00A6                                      u14525 278E  
                                    u12790 3064                                      u15430 175C  
                                    u14470 4618                                      u14710 2AA4  
                                    u13830 39B2                                      u15190 1DCC  
                                    u16310 0520                                      u13487 47B2  
                                    u12767 519A                                      u13655 0C82  
                                    u14375 3D5A                                      u14480 2704  
                                    u15520 193C                                      u16400 0654  
                                    u12865 31C8                                      u12945 2D42  
                                    u12777 51C4                                      u13817 3996  
                                    u14385 3DA6                                      u15450 17D4  
                                    u16250 0406                                      u15355 1546  
                                    u15460 181A                                      u14740 0F48  
                                    u14660 2A24                                      u15700 1BCA  
                                    u16420 0662                                      u16340 053A  
                                    u16180 0254                                      u17140 4C08  
                                    u12885 2BE4                                      u14645 29EC  
                                    u12990 471A                                      u13790 38BA  
                                    u15550 19C8                                      u16190 0258  
                                    u17150 4C20                                      u13775 3844  
                                    u14487 26FA                                      u14760 0F6E  
                                    u16600 0852                                      u16520 07DA  
                                    u17128 467A                                      u15465 1810  
                                    u17129 468E                                      u14930 1312  
                                    u14690 2A7E                                      u16450 07AE  
                                    u14747 0F3E                                      u14940 1328  
                                    u15900 4934                                      u16620 0868  
                                    u16540 07F0                                      u14925 123C  
                                    u15750 1C66                                      u15590 1A60  
                                    u14767 0F64                                      u15761 1C9E  
                                    u14890 109C                                      u16730 08B6  
                                    u16570 080E                                      u14955 13B0  
                                    u16820 2E10                                      u14990 4A86  
                                    u16750 08CE                                      u16590 0826  
                                    u16830 2E16                                      u16920 2F60  
                                    u17617 4C6A                                      u16770 08EE  
                                    u16690 0886                            __end_of___lwdiv 5182  
                                    u15971 54AC                                      u17627 482C  
                                    u16780 0920                                      u14997 4A7C  
                                    u17637 4848                                      u16790 0946  
                                    u16870 2E78                                      u17647 4864  
                                    u16880 2E80                                      u17657 205C  
                                    u17667 21F0                                      u16788 0924  
                                    u17677 22A2                                      u16798 094A  
                                    u17687 5428                                      i2l100 3B78  
                                    i2l101 3B86                                      i2l103 3BA2  
                                    i2l104 3BB6                            __end_of___lwmod 541C  
                                    i2l320 23C4                                      i2l313 2630  
                                    i2l321 23CE                                      i2l330 24B6  
                                    i2l314 2384                                      i2l331 24BC  
                                    i2l323 2424                                      i2l315 2392  
                                    i2l308 51DA                                      i2l340 25DE  
                                    i2l332 24E6                                      i2l316 23A2  
                                    i2l341 2610                                      i2l325 2444  
                                    i2l342 2618                                      i2l334 2502  
                                    i2l326 2448                                      i2l335 2508  
                                    i2l327 2470                                      i2l336 2532  
                                    i2l328 249A                                      i2l337 255C  
                                    i2l338 2586                                      i2l339 25B2  
                                    i2l977 57B4                                      _RCREG 000FAE  
                                    _RCSTA 000FAB                                      _TMR0H 000FD7  
                                    _TMR0L 000FD6                                      _SPBRG 000FAF  
                                    _TRISA 000F92                                      _TRISB 000F93  
                                    _TRISC 000F94                                      _TRISD 000F95  
                                    _TRISE 000F96                            __end_of_f_close 5620  
                                    _TXREG 000FAD                              trace_path@dir 00C6  
                                    _TXSTA 000FAC                                      _FatFs 00FB  
                          __end_of_f_lseek 18CC                        ___lmul@multiplicand 0064  
               __size_of_config_timer_dois 000E                            __end_of_f_mount 5270  
                          __end_of_f_write 0F10                 __size_of_config_timer_zero 001C  
                            get_cluster@bc 00AF                              get_cluster@fs 00B1  
                            get_cluster@wc 00A9                            __end_of_command 5026  
                                    _delay 564C                            clust2sect@clust 006C  
                          __end_of_fprintf 1CA0                                      _fputc 50D8  
                                    _fputs 4A5A                            __end_of_isdigit 56E4  
                 __size_of_escreve_cmd_lcd 0094                                      atoi@a 006B  
                                    atoi@s 0066                             ??_make_dirfile 006C  
                           disk_ioctl@buff 0061                                      pclath 000FFA  
                           disk_read@count 0085                                      tablat 000FF5  
                           disk_ioctl@pdrv 0063                           ?_dados_gps_to_sd 0001  
                          __end_of_proceed 5806                                      plusw1 000FE3  
                                    plusw2 000FDB                                      utoa@c 006F  
                                    utoa@v 006D                                      status 000FD8  
                            _troca_de_tela 2E06                                      wtemp6 0046  
                            disk_write@res 008A             __end_of_verifica_fence_externo 0956  
                          __initialization 4C80                        disk_initialize@pdrv 0080  
                      disk_initialize@stat 0081                               __end_of_atoi 4280  
                             __end_of_main 55F4                               clust2sect@fs 0075  
                             __end_of_itoa 53D8                               __end_of_utoa 4576  
                             __end_of_sync 5080                         _inicializa_tarefas 4EEE  
                          escalonador@cont 00F5                           __end_of_Latitude 57FA  
                      reserve_direntry@dir 00C6                          create_chain@clust 00B6  
                              auto_mount@p 00B1                          create_chain@cstat 00BE  
 verifica_fence_externo@point_buff_gps_lat 0373                              sdc_reset@buff 0072  
                                   ??_atoi 0068                                     ??_main 00F6  
                                   ??_itoa 0076                                     ??_utoa 006D  
                                   ??_sync 00A0                              __activetblptr 000002  
                      ?_inicializa_tarefas 0001                       __end_of_desliga_uart 57E2  
                                ??_GPSRead 000A                             _next_dir_entry 37B0  
                     __size_of_desliga_SPI 000C                          get_fattime@f_time 008A  
                         ??_sdc_disk_write 0073                                     ?_delay 0001  
                   ?_escreve_caractere_lcd 0001                                     _ADCON1 000FC1  
                                   ?_fputc 00E5                           ___llmod@dividend 0060  
                                   ?_fputs 00EC                         auto_mount@bootsect 00A9  
                                   _INT0IE 007F94                                     _INT0IF 007F91  
                            ?_dummy_clocks 0001                                     i2l2115 5356  
                                   i2l2116 534E                                     _PCLATH 000FFA  
                                   _INTCON 000FF2                                     i2l9183 3B30  
                  __size_of_inicializa_SPI 0020                             ?_troca_de_tela 0001  
                                   _TMR0IF 007F92                                     _TMR2IF 007CF1  
                       auto_mount@maxclust 00A5                   __end_of_recebe_dado_uart 57B8  
                                   _SPPCFG 000F63                                     _SPPCON 000F65  
                                   _SSPBUF 000FC9                   __size_of_sdc_disk_status 0018  
                         __end_of_check_fs 4B72                       ??_inicializa_tarefas 0060  
                        ?_disparo_gravacao 0001                             trace_path@dptr 00D5  
                           trace_path@path 00C4                     reserve_direntry@sector 00CA  
                 __size_of_disk_initialize 003C                 __end_of_posicao_cursor_lcd 4E06  
                       ??_disparo_gravacao 00F5                             auto_mount@path 0093  
                             ?_move_window 008B                       __end_of_create_chain 35FA  
                             _dado_arquivo 02C4                     __size_of_init_hardware 0016  
                           auto_mount@stat 00B4                       __size_of_get_fattime 0108  
                             put_cluster@p 00B2               ?_verifica_dados_operacionais 0001  
                     __size_of_get_cluster 0222                                     ___lmul 5080  
                                ??___aldiv 0068                       __size_of_disk_status 0048  
                                   ___wmul 5676                         __size_of_Longitude 000C  
                                ??___lldiv 0068                                     _f_open 1CA0  
                                ??___llmod 0068                                  ??___lwdiv 0064  
                                   _f_sync 3E7A                                  ??___lwmod 0064  
                                   _buffer 01AC                                     _estado 0037  
                                   _memcmp 4764                                     _memcpy 52BC  
                         __end_of_init_lcd 48A6                                     _memset 5596  
                                ??_f_close 00AD                                     _rawFix 0039  
                                   clear_0 4CBA                                     clear_1 4CCC  
                                   clear_2 4CD8                                     clear_3 4CE4  
                                   clear_4 4CF0                                  ??_f_lseek 00CA  
                                ??_f_mount 0062                   configura_baudrate_uart@x 007A  
                                ??_f_write 00CC                                     _strcmp 534C  
                      _sdc_disk_initialize 2036                                  ??_command 006A  
                              GPSRead@buff 000C                                     _strlen 54E2  
                         put_cluster@clust 00A0                                     fputc@c 00E9  
                       get_cluster@fatsect 00AB                           __end_of_monta_sd 41A8  
                                   itoa@cp 0076                   __end_of_reserve_direntry 2B8C  
                         __end_of_validate 52BC                     __end_of_next_dir_entry 3938  
                                ??_fprintf 00F3                               __pdataCOMRAM 0044  
                                   fputs@n 00F1                                  ??_isdigit 0060  
                     __size_of_escalonador 00A4                           __end_of_response 57D4  
                             __mediumconst 60EA                            disk_read@sector 0081  
                          disk_read@result 0088                                     tblptrh 000FF7  
                                   tblptrl 000FF6                                     tblptru 000FF8  
                                ??_proceed 0062                           _write_timer_zero 581E  
                                   sync@fs 00A0                  escreve_caractere_lcd@data 0062  
                           ??_dummy_clocks 0060                        _escreve_inteiro_lcd 54A2  
                          sdc_disk_write@i 0077                            sdc_disk_write@j 007C  
                               __accesstop 0060                    __end_of__initialization 4CF6  
                     ?_sdc_disk_initialize 0001                             disk_write@buff 007F  
                           disk_write@pdrv 0087                       __size_of_escreve_SPI 0014  
                            ___rparam_used 000001                          ??_escreve_cmd_lcd 0062  
                           __pcstackCOMRAM 0001                __end_of_endereco_cursor_lcd 4EEE  
                             __pidataBANK2 493A                          ?_mensagem_inicial 0001  
                  _configura_baudrate_uart 3D48                              __end_of_delay 5676  
                           _escrita_sdcard 434E                              __end_of_fputc 512E  
                            __end_of_fputs 4AE6                       ?_escreve_inteiro_lcd 0078  
            ??_verifica_dados_operacionais 0060                         ??_mensagem_inicial 0066  
                     __end_of_make_dirfile 3AA6                               ?_put_cluster 00A0  
                        reserve_direntry@c 00D1                          reserve_direntry@n 00CE  
                       _tarefa_em_execucao 003F                 __end_ofi2_write_timer_zero 5832  
                          ?_next_dir_entry 00B3                     __size_of_sdc_disk_read 0146  
          configura_baudrate_uart@baudrate 006E                       reserve_direntry@dptr 00CF  
                     __size_of_leitura_SPI 000C                              _init_hardware 5754  
                             auto_mount@fs 00B9                         __size_of_disk_read 0090  
                                  ??_delay 0060                             sdc_reset@count 0070  
    verifica_fence_externo@fence_diff_long 0300                                    ??_fputc 00E9  
                                  ??_fputs 00F0                            ??_troca_de_tela 0066  
                        __end_of_Longitude 57EE               mensagem_inicial@msg_linha_um 0068  
                               __pbssBANK0 00F6                                 __pbssBANK1 0100  
                               __pbssBANK2 0290             __size_of_escreve_frase_ram_lcd 0054  
            __end_of_escreve_frase_ram_lcd 51D6                      ??_sdc_disk_initialize 0073  
                                ?_Latitude 0060                  escreve_inteiro_uart@F3958 0273  
                   __end_of_escrita_sdcard 4416                         __size_of_sdc_reset 00A4  
                       troca_de_tela@state 003E                                    ?___lmul 0060  
                        ??_sdc_disk_status 0060                              make_dirfile@a 0072  
                            make_dirfile@b 0070                              make_dirfile@c 0074  
                            make_dirfile@n 0073                              make_dirfile@t 0071  
                                  ?___wmul 0060                      mensagem_inicial@F4363 60FC  
                    mensagem_inicial@F4365 60EB                      ??_escreve_inteiro_lcd 007A  
                                  ?_f_open 00D7                                    ?_f_sync 00A2  
                        ??_disk_initialize 0080                      __size_of_desliga_uart 000E  
                                  ?_memcmp 0060                                    ?_memcpy 0060  
                                  ?_memset 0060                             ___lmul@product 0068  
       verifica_fence_externo@temp_var_deg 0377                                    ?_strcmp 0001  
                                  ?_strlen 0060                                    _INTCON2 000FF1  
                                  _INTCON3 000FF0                             ?_init_hardware 0001  
                                ?_check_fs 008B                                 _disk_ioctl 5620  
                                  _GPSRead 237C                                 _disk_write 4B72  
                           remove_chain@fs 00BC       __size_of_verifica_dados_operacionais 0002  
                                  _SSPCON1 000FC6                   __size_of_inicializa_uart 0024  
                                  _SSPSTAT 000FC7                                 _clust2sect 4416  
                           _inicializa_SPI 56E4                            trace_path@clust 00D2  
                               ??_Latitude 0062                              ?_remove_chain 00B6  
                    __size_of_create_chain 01C0                                  ?_init_lcd 0001  
                       __size_of_stringcpy 004E                              _sdc_disk_read 3C02  
                             _desliga_uart 57D4                                 _auto_mount 0F10  
                                  __Hparam 0000                  ??_configura_baudrate_uart 0072  
                                  __Lparam 0000                                  ?_monta_sd 0066  
                                ?_validate 0067                            ?_escrita_sdcard 0001  
                        __end_of_disk_read 4A5A                              put_cluster@bc 00B0  
                                ?_response 0001                              put_cluster@fs 00B4  
                                  ___aldiv 4280                                 f_close@res 00AD  
                          __size_of___lmul 0058                                    ___lldiv 4D04  
                          __size_of___wmul 0028                                    ___llmod 4F56  
                     __size_of_move_window 01B6                                 check_fs@fs 0091  
                                  ___lwdiv 512E                                    ___lwmod 53D8  
                          __size_of_f_open 0396                            __size_of_f_sync 012A  
                     __end_of_dummy_clocks 5460                                    _f_close 55F4  
                                  __pcinit 4C80                            __size_of_memcmp 00A4  
                          __size_of_memcpy 0048                            __size_of_memset 0030  
                                  _f_lseek 1442                                 _init_ports 5704  
                                  __ramtop 0800                                    _f_mount 5224  
                                  __ptext0 55C6                                    __ptext1 4BFA  
                                  __ptext2 4808                                    __ptext3 5754  
                                  __ptext4 5704                                    __ptext5 5832  
                                  __ptext6 5794                                    __ptext7 5720  
                                  __ptext8 581E                                    __ptext9 57B8  
                                  _f_write 0956                                    _command 4FBE  
                                _T0CONbits 000FD5                        auto_mount@totalsect 00AD  
                          __size_of_strcmp 0048                            __size_of_strlen 003E  
              endereco_cursor_lcd@endereco 0062                                    _fprintf 18CC  
                             __size_of_fix 0004                                    _rawDate 01BF  
                                  _isdigit 56C2                               __size_of_isr 3BFA  
                  ??_escreve_caractere_lcd 0062                                 ??_check_fs 008F  
                                  _rawTime 02F2                           ___aldiv@dividend 0060  
                             stringcpy@chr 0009                               stringcpy@dir 0005  
                                  _time_sd 0031                               _create_chain 343A  
                                  _proceed 57FA                    __size_of_init_interrupt 0012  
                        __end_of_sdc_reset 4764                     __end_of_inicializa_SPI 5704  
                               f_lseek@ofs 00C6                             __pintcode_body 3AA6  
                               f_lseek@res 00D6                       end_of_initialization 4CF6  
                               f_open@mode 00DB                                 f_open@path 00D9  
                           ??_remove_chain 00B8                                    isr@cont 0022  
                                  memcmp@n 0064                                    memcpy@d 0067  
                                  memcpy@n 0064                                    memcpy@s 0069  
                  __size_of_init_oscilador 0008                                    fputc@bw 00EA  
                                  itoa@buf 0070                                    memset@c 0062  
                                  itoa@val 0072                                    memset@n 0064  
                                  memset@p 0066                       sdc_disk_initialize@i 0074  
                            __Lmediumconst 60EA                                 ??_init_lcd 0063  
                                  int_func 3AA6                          ?_recebe_dado_uart 0001  
                          disk_status@pdrv 0065                                  i2u1107_40 5388  
                          disk_status@stat 0066                             ?_sdc_disk_read 006C  
                                i2u1184_40 3B6A                                  i2u1178_40 3B0E  
                                i2u1179_48 3B10                     write_timer_zero@timer0 0060  
                          ___lldiv@divisor 0064                              _rawSatellites 0041  
                               f_mount@drv 0062                         ??_recebe_dado_uart 0001  
                         sdc_disk_read@ptr 0077                            ___lldiv@counter 006C  
                               ??_monta_sd 0068                verifica_fence_externo@F4370 0230  
              verifica_fence_externo@F4373 0200                verifica_fence_externo@F4386 0268  
              verifica_fence_externo@F4388 025C                                 ??_validate 006B  
                    __size_of_make_dirfile 016E                   __size_of_dados_gps_to_sd 0042  
                               ??_response 0060                                  _RCSTAbits 000FAB  
                 __end_of_write_timer_zero 5828                           ___aldiv@quotient 006A  
                                  postdec1 000FE5                                    postdec2 000FDD  
                                  postinc0 000FEE                                    postinc1 000FE6  
                                  postinc2 000FDE                                    utoa@buf 0067  
                                  utoa@val 0069                                 _wait_ready 555C  
                                  strcmp@r 0006                                    strlen@s 0060  
                                _PORTBbits 000F81                  __size_of_disparo_gravacao 0016  
                                _PORTDbits 000F83                                  _PORTEbits 000F84  
                          ??_init_hardware 0062                verifica_fence_externo@count 037E  
                               _trace_path 2646                         _posicao_cursor_lcd 4D88  
                        __end_of_stringcpy 5224                verifica_fence_externo@point 037F  
                            ??_desliga_SPI 0060                       __size_of_put_cluster 027A  
          __end_of_configura_baudrate_uart 3E7A                                ?_disk_ioctl 0060  
                        ?_reserve_direntry 00C4                                 f_write@btw 00C8  
                               f_write@res 00D8                                  _TRISBbits 000F93  
                              ?_disk_write 007F                                  _TRISCbits 000F94  
                                _TRISDbits 000F95                           next_dir_entry@dj 00B3  
                          _escreve_cmd_lcd 48A6                         ??_reserve_direntry 00C8  
                      ?_posicao_cursor_lcd 0063                            ?_inicializa_SPI 0001  
                          disk_write@count 0085                                ?_clust2sect 006C  
                         _put_cluster$2013 00A8                           _put_cluster$2014 00AA  
                               command@CMD 006A                                 command@CRC 0069  
                               command@arg 0065                               _make_dirfile 3938  
                            ??_get_fattime 0064                          ??_inicializa_uart 007C  
              __size_of_inicializa_tarefas 0068                              ??_get_cluster 00A2  
                            ??_disk_status 0062                                ?_auto_mount 0093  
                        _make_dirfile$2123 006E                            command@argument 006B  
                     ??_posicao_cursor_lcd 0064                             __end_of___lmul 50D8  
                         ??_next_dir_entry 00B5                             __end_of___wmul 569E  
                           __end_of_f_open 2036                              __pidataCOMRAM 5840  
                            ??_escalonador 01FB                                ?_init_ports 0001  
                           __end_of_f_sync 3FA4                             __end_of_memcmp 4808  
                           __end_of_memcpy 5304                             __end_of_memset 55C6  
                           __end_of_strcmp 5394                             __end_of_strlen 5520  
                         _time_atualizacao 002F                        start_initialization 4C80  
                              __end_of_fix 583E                                __end_of_isr 3C02  
                __size_of_mensagem_inicial 0086                         reserve_direntry@dj 00C4  
                       reserve_direntry@fs 00D4                        __end_of_desliga_SPI 581E  
                            ??_escreve_SPI 0060                   ??_verifica_fence_externo 0081  
                          _sdc_disk_status 573C                            ??_sdc_disk_read 0073  
                        auto_mount@fatsize 00B5                         i2_write_timer_zero 5828  
                          ___llmod@divisor 0064                                  _Longitude 57E2  
                          _disk_initialize 5520                            ___llmod@counter 0068  
                        __size_of_Latitude 000C                      reserve_direntry@clust 00D2  
                  __size_of_sdc_disk_write 01CA                           _data_uart_recebe 0040  
                        wait_ready@timeout 0060                      __size_of_dummy_clocks 0044  
                            auto_mount@fmt 00B3                        __size_of_disk_ioctl 002C  
                      ?i2_write_timer_zero 0001                        __size_of_disk_write 0088  
                                 ??___lmul 0068                                 fprintf@fil 01D8  
                               fprintf@arp 031C                                   ??___wmul 0064  
                               fprintf@res 0310                                 fprintf@val 0318  
                               fprintf@str 01DA                        __end_of_get_fattime 40AC  
                                 ??_f_open 00DC                                   ??_f_sync 00A4  
                              ?_wait_ready 0001                                __pdataBANK2 0200  
                      __end_of_get_cluster 3270                                   ??_memcmp 0066  
                      __end_of_disk_status 534C                                   ??_memcpy 0066  
                      __size_of_clust2sect 00B6                                   ??_memset 0066  
                   sdc_disk_read@start_add 0078                       __end_of_remove_chain 461C  
                        ??_dados_gps_to_sd 006B                    sdc_disk_initialize@buff 007F  
                            ??_leitura_SPI 0060                    __end_of_escreve_cmd_lcd 493A  
                                 ??_strcmp 0005                                   ??_strlen 0062  
                  sdc_disk_initialize@stat 0076                                ?_trace_path 00C0  
             __size_of_endereco_cursor_lcd 0070                               _fprintf$2611 0312  
                              __pbssBIGRAM 0381                              monta_sd@index 0068  
                              __pbssCOMRAM 0023                            _trace_path$2170 00CC  
                          _trace_path$2172 00CE                                   ?_GPSRead 0001  
                            __pcstackBANK0 0060                              __pcstackBANK1 01D8  
                            __pcstackBANK3 0300                             _init_interrupt 5794  
                      __size_of_auto_mount 0532                       ??i2_write_timer_zero 0003  
                      __end_of_escalonador 46C0                __end_of_sdc_disk_initialize 237C  
                        __size_of_check_fs 008C                               _isdigit$2949 0061  
                             check_fs@sect 008B                                _char_number 003C  
                               sdc_reset@i 006C                               _dummy_clocks 541C  
                           _init_oscilador 5832                      __end_of_troca_de_tela 304E  
                                 GPSRead@c 000D                           ??_escrita_sdcard 00F5  
                      __size_of_init_ports 001C                                 ?_Longitude 0060  
                    _escreve_frase_ram_lcd 5182                                  _data_buff 00FD  
                                _data_hoje 0038                __end_of_escreve_inteiro_lcd 54E2  
                      __end_of_escreve_SPI 5794                          __size_of_init_lcd 009E  
                         ___lwdiv@dividend 0060                          delay@contador_int 0061  
                        delay@contador_ext 0060        __end_of_verifica_dados_operacionais 5840  
              _verifica_dados_operacionais 583E                                  __pintcode 0008  
                            __pmediumconst 60EA        verifica_fence_externo@temp_buff_lat 0368  
                                 ?___aldiv 0060                          __size_of_monta_sd 00FC  
                                 ?___lldiv 0060                                   ?___llmod 0060  
                        __size_of_validate 004C                                   ?___lwdiv 0060  
                                 ?___lwmod 0060                          __size_of_response 000E  
                                 ?_f_close 00AB                                  _disk_read 49CA  
                       _sinaliza_int_timer 00FF                                   ?_f_lseek 00C4  
                                 ?_f_mount 0060                           _disparo_gravacao 576A  
                                 ?_f_write 00C4                                   ?_command 0065  
                   __end_of_init_interrupt 57A6                                   ?_fprintf 01D8  
                                 ?_isdigit 0001                                _desliga_SPI 5812  
                      sdc_disk_read@p_buff 006C                    troca_de_tela@last_state 003D  
                      sdc_disk_read@length 007C                        sdc_disk_read@sector 006E  
                  __end_of_sdc_disk_status 5754             __size_of_escreve_caractere_lcd 0078  
            __end_of_escreve_caractere_lcd 4E7E                                   ?_proceed 0001  
                                f_close@fp 00AB                        __end_of_leitura_SPI 5812  
                         ___lwdiv@quotient 0065                             __size_of_delay 002A  
                  __end_of_disk_initialize 555C                     __end_of_init_oscilador 583A  
                           __size_of_fputc 0056                             __size_of_fputs 008C  
                      make_dirfile@dirname 006A                                 validate@id 0069  
                               validate@fs 0067                                  _p_tarefas 0108  
                                _rawCourse 01C6            __size_of_verifica_fence_externo 0944  
                         make_dirfile@path 0068                                   _GPGGA_ok 002B  
                                _sdc_reset 46C0                        __size_of_wait_ready 003A  
                          ___aldiv@divisor 0064                            ___aldiv@counter 0068  
                           ___wmul@product 0064                                   _LATBbits 000F8A  
                                f_lseek@fp 00C4        verifica_fence_externo@point_dif_lat 037B  
                                 _LATCbits 000F8B                                   _GPRMC_ok 002D  
                                f_open@dir 01EB                                  f_open@res 01EA  
                                 _PIE1bits 000F9D                                _get_fattime 3FA4  
                             _rawLongitude 02D8                        __size_of_trace_path 02AC  
                              _get_cluster 304E                                _disk_status 5304  
                            ??_move_window 008F                                  f_mount@fs 0060  
                                 _PIR1bits 000F9E                              move_window@fs 009E  
                        ?_write_timer_zero 0060                            remove_chain@nxt 00BA  
                                f_sync@dir 00A9                                  f_sync@res 00A8  
                                f_sync@tim 00A4                   posicao_cursor_lcd@coluna 0063  
                               ?_disk_read 007F                         ??_write_timer_zero 0062  
                                f_write@cc 00DF                 posicao_cursor_lcd@endereco 0065  
                                f_write@bw 00CA                                  f_write@fp 00C4  
                __size_of_recebe_dado_uart 0012                                _escalonador 461C  
                        ___wmul@multiplier 0060                           ?_escreve_cmd_lcd 0001  
              escreve_frase_ram_lcd@buffer 0063                           ??_inicializa_SPI 0060  
                          ?_init_interrupt 0001                               ??_disk_ioctl 0063  
                             ??_disk_write 0086                               f_lseek@clust 00DF  
                          _inicializa_uart 569E                               f_lseek@csize 00DB  
                             f_lseek@ifptr 00D7                                  _stringcpy 51D6  
                         __size_of_GPSRead 02CA                           _mensagem_inicial 4BFA  
                          ?_init_oscilador 0001                               ??_clust2sect 0070  
                        ___lmul@multiplier 0060                                  copy_data0 4C94  
                              _escreve_SPI 5780                                 ?_sdc_reset 0001  
                      sdc_reset@count_nosd 006E                                   _Latitude 57EE  
                 ?_configura_baudrate_uart 006E                     ?_escreve_frase_ram_lcd 0063  
                              ??_Longitude 0062                           auto_mount@chk_wp 0095  
                        move_window@sector 008B                             _sdc_disk_write 3270  
                __size_of_reserve_direntry 029A                   escreve_inteiro_lcd@F3966 027A  
                             ??_auto_mount 0096                                   __Hrparam 0000  
                                memcpy@tmp 0066                                   __Lrparam 0000  
                                fprintf@cc 031E                         __end_of_disk_ioctl 564C  
                    __size_of_remove_chain 00A6                             put_cluster@val 00A2  
                         get_cluster@clust 00A0                         __end_of_disk_write 4BFA  
                  verifica_fence_externo@i 0380                    verifica_fence_externo@j 037D  
                             _SentenceType 003B                           __size_of___aldiv 00CE  
                   sdc_disk_initialize@ocr 007C                               monta_sd@dado 0066  
                   _verifica_fence_externo 0012                           __size_of___lldiv 0084  
                         __size_of___llmod 0068                              ??_put_cluster 00A4  
                         __size_of___lwdiv 0054                               monta_sd@size 0069  
                         __size_of___lwmod 0044                               ??_init_ports 0060  
                      __end_of_move_window 37B0                         __end_of_clust2sect 44CC  
                 escreve_inteiro_lcd@valor 0078                           __size_of_f_close 002C  
                 escreve_inteiro_lcd@texto 007A                           __size_of_f_lseek 048A  
                         __size_of_f_mount 004C                                _leitura_SPI 5806  
                         __size_of_f_write 05BA                          disk_status@result 0063  
                         __size_of_command 0068                      __end_of_init_hardware 576A  
                                 _check_fs 4AE6                           __size_of_fprintf 03D4  
                         __size_of_isdigit 0022                            ___lwdiv@divisor 0062  
                         ?_sdc_disk_status 0001                                 ?_stringcpy 0001  
                          ___lwdiv@counter 0064                         __end_of_auto_mount 1442  
                                 __ptext10 4EEE                                   __ptext11 461C  
                                 __ptext20 512E                                   __ptext12 2E06  
                                 __ptext21 41A8                                   __ptext13 576A  
                                 __ptext30 4280                                   __ptext22 56C2  
                                 __ptext14 583E                                   __ptext31 56E4  
                                 __ptext23 57E2                                   __ptext15 0012  
                                 __ptext40 28F2                                   __ptext32 18CC  
                                 __ptext24 57EE                                   __ptext16 54A2  
                                 __ptext41 37B0                                   __ptext33 4A5A  
                                 __ptext25 583A                                   __ptext17 5394  
                                 __ptext50 4D88                                   __ptext42 4416  
                                 __ptext34 50D8                                   __ptext26 48A6  
                                 __ptext18 44CC                                   __ptext51 4E7E  
                                 __ptext43 4576                                   __ptext35 0956  
                                 __ptext27 434E                                   __ptext19 53D8  
                                 __ptext60 343A                                   __ptext52 5182  
                                 __ptext44 52BC                                   __ptext36 4F56  
                                 __ptext28 569E                                   __ptext61 2B8C  
                                 __ptext53 4E06                                   __ptext45 0F10  
                                 __ptext37 1CA0                                   __ptext29 3D48  
                                 __ptext70 5026                                   __ptext62 304E  
                                 __ptext54 564C                                   __ptext46 5596  
                                 __ptext38 2646                                   __ptext71 35FA  
                                 __ptext63 5676                                   __ptext55 4AE6  
                                 __ptext47 5520                                   __ptext39 3938  
                                 __ptext80 5780                                   __ptext72 4B72  
                                 __ptext64 4D04                                   __ptext56 4764  
                                 __ptext48 2036                                   __ptext81 541C  
                                 __ptext73 3270                                   __ptext65 55F4  
                                 __ptext57 5080                                   __ptext49 46C0  
                                 __ptext82 5806                                   __ptext74 49CA  
                                 __ptext66 3E7A                                   __ptext58 5224  
                                 __ptext91 5828                                   __ptext83 5620  
                                 __ptext75 3C02                                   __ptext67 5270  
                                 __ptext59 1442                                   __ptext92 57A6  
                                 __ptext84 3FA4                                   __ptext76 57C6  
                                 __ptext68 5304                                   __ptext93 237C  
                                 __ptext85 57D4                                   __ptext77 57FA  
                                 __ptext69 573C                                   __ptext94 51D6  
                                 __ptext86 5812                                   __ptext78 4FBE  
                                 __ptext95 534C                                   __ptext87 5460  
                                 __ptext79 555C                                   __ptext96 0000  
                                 __ptext88 40AC                                   __ptext89 54E2  
                         __size_of_proceed 000C                                   _filename 0281  
                              _rawAltitude 01B8                           ?_disk_initialize 0001  
                           _timeout_tarefa 0033                         sdc_disk_read@count 0072  
               __end_of_inicializa_tarefas 4F56                   i2write_timer_zero@timer0 0001  
                   __end_of_sdc_disk_write 343A                                  monta_sd@i 006A  
                              _rawLatitude 02E5                                   _init_lcd 4808  
                            __size_of_atoi 00D8                              __size_of_main 002E  
                             _remove_chain 4576                              __size_of_itoa 0044  
                            __size_of_utoa 00AA                              __size_of_sync 005A  
     verifica_fence_externo@fence_diff_lat 0330                        _endereco_cursor_lcd 4E7E  
                       __end_of_init_ports 5720                                   _rawSpeed 01CC  
                            dummy_clocks@i 0063                                   f_open@dj 01ED  
                            dummy_clocks@n 0062                                   f_open@fn 01D8  
                                 f_open@fp 00D7                                   f_open@dw 01E6  
                                 f_open@rs 01E4                            _dados_gps_to_sd 5460  
                                 _monta_sd 40AC                                   _validate 5270  
                                 _sentence 01D2                               move_window@n 0099  
                            stringcpy@str1 0001                              stringcpy@str2 0003  
                                 _response 57C6                                   f_sync@fp 00A2  
              __size_of_posicao_cursor_lcd 007E                                   int$flags 0045  
                  posicao_cursor_lcd@linha 0064                                   atoi@sign 006A  
                             ??_wait_ready 0060                                ??_disk_read 0086  
                  __end_of_inicializa_uart 56C2                               ??_trace_path 00C8  
                     ?_endereco_cursor_lcd 0001                         put_cluster@fatsect 00AC  
                               _INTCONbits 000FF2  verifica_fence_externo@point_buff_gps_long 0375  
                                 memcmp@s1 0060                                   memcmp@s2 0062  
                         move_window@wsect 009A                                   memcpy@d1 0060  
                                 memcpy@s1 0062                        __end_of_put_cluster 2E06  
                                 fprintf@c 0322                                   fprintf@f 0316  
                                 fprintf@i 0320                                   fprintf@r 0317  
                                 fprintf@s 0300                                   fprintf@w 0314  
                                 fputc@chr 00E5                                   itoa@base 0074  
                                 fputc@fil 00E7                                   isdigit@c 0062  
                                 memset@p1 0060                          _config_timer_dois 57B8  
                             _tempo_backup 0100                                   fputs@fil 00EE  
                                 fputs@str 00EC                          _config_timer_zero 5720  
                             _poligono_ext 0110                              wait_ready@res 0064  
                                 intlevel2 0000                         ?_config_timer_dois 0001  
                 mensagem_inicial@msg_dois 0079                                ??_sdc_reset 006C  
                       ?_config_timer_zero 0001                               _tempo_tarefa 0023  
                          ?_sdc_disk_write 006C                           ___lwmod@dividend 0060  
                       __end_of_wait_ready 5596                   __end_of_disparo_gravacao 5780  
                         ___lldiv@dividend 0060                          sdc_disk_read@buff 007E  
                    __end_of_sdc_disk_read 3D48                        sdc_disk_status@pdrv 0061  
                      sdc_disk_status@stat 0060                              ?_desliga_uart 0001  
                      ??_config_timer_dois 0060                                 _OSCCONbits 000FD3  
                       __end_of_trace_path 28F2                        ??_config_timer_zero 0062  
                              _move_window 35FA       verifica_fence_externo@temp_buff_long 035C  
                     sdc_disk_write@count1 0079                       sdc_disk_write@p_buff 006C  
                         _recebe_dado_uart 57A6                                   utoa@base 006B  
                     sdc_disk_write@sector 006E                      ??_endereco_cursor_lcd 0062  
                             response@buff 0060                                   strcmp@s1 0001  
                                 strcmp@s2 0003                               ?_desliga_SPI 0001  
                         ___lldiv@quotient 0068                            ___lwmod@divisor 0062  
                                 strlen@cp 0064                            ___lwmod@counter 0064  
                        remove_chain@clust 00B6                  __end_of_config_timer_dois 57C6  
                             ___aldiv@sign 0069                              ?_create_chain 00B6  
                __end_of_config_timer_zero 573C                                ??_stringcpy 0007  
              __size_ofi2_write_timer_zero 000A                                _SSPCON1bits 000FC6  
                  __size_of_next_dir_entry 0188                     escreve_cmd_lcd@comando 0062  
                       escreve_SPI@TempVar 0060                        sdc_disk_write@count 0072  
            sdc_disk_initialize@crc_number 0079                    __end_of_dados_gps_to_sd 54A2  
                       sdc_disk_write@buff 007E               __size_of_sdc_disk_initialize 0346  
                             f_write@clust 00E1                             ??_desliga_uart 0060  
                       leitura_sdcard@size 0044                               f_write@wbuff 00D9  
                             ?_get_fattime 0060                           _reserve_direntry 28F2  
                              f_write@buff 00C6                          sdc_disk_write@res 007B  
                             ?_get_cluster 00A0                                f_write@sect 00DB  
                              f_write@wcnt 00E3                               ?_disk_status 0001  
            __end_ofmensagem_inicial@F4363 610D              __end_ofmensagem_inicial@F4365 60FC  
                          escreve_SPI@dado 0061  
