

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 12 14:33:47 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   110                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   111                           	psect	text87,global,reloc=2,class=CODE,delta=1
   112                           	psect	text88,global,reloc=2,class=CODE,delta=1
   113                           	psect	text89,global,reloc=2,class=CODE,delta=1
   114                           	psect	text90,global,reloc=2,class=CODE,delta=1
   115                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   117                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.45
   122                           ; Generated 16/11/2017 GMT
   123                           ; 
   124                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F4550 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataBANK0
   157  005CAA                     __pidataBANK0:
   158                           	opt stack 0
   159                           
   160                           ;initializer for leitura_sdcard@size
   161  005CAA  58                 	db	88
   162                           
   163                           	psect	idataBANK1
   164  005C9E                     __pidataBANK1:
   165                           	opt stack 0
   166                           
   167                           ;initializer for escreve_inteiro_lcd@F3966
   168  005C9E  30                 	db	48
   169  005C9F  30                 	db	48
   170  005CA0  30                 	db	48
   171  005CA1  30                 	db	48
   172  005CA2  30                 	db	48
   173  005CA3  30                 	db	48
   174  005CA4  00                 	db	0
   175                           
   176                           	psect	idataBANK2
   177  005A7C                     __pidataBANK2:
   178                           	opt stack 0
   179                           
   180                           ;initializer for verifica_fence_externo@F4364
   181  005A7C  2D                 	db	45
   182  005A7D  34                 	db	52
   183  005A7E  36                 	db	54
   184  005A7F  2E                 	db	46
   185  005A80  35                 	db	53
   186  005A81  35                 	db	53
   187  005A82  30                 	db	48
   188  005A83  37                 	db	55
   189  005A84  38                 	db	56
   190  005A85  30                 	db	48
   191  005A86  36                 	db	54
   192                           
   193                           ;initializer for verifica_fence_externo@F4362
   194  005A87  2D                 	db	45
   195  005A88  32                 	db	50
   196  005A89  33                 	db	51
   197  005A8A  2E                 	db	46
   198  005A8B  36                 	db	54
   199  005A8C  35                 	db	53
   200  005A8D  38                 	db	56
   201  005A8E  30                 	db	48
   202  005A8F  30                 	db	48
   203  005A90  37                 	db	55
   204  005A91  00                 	db	0
   205                           
   206                           ;initializer for escreve_inteiro_uart@F3958
   207  005A92  30                 	db	48
   208  005A93  30                 	db	48
   209  005A94  30                 	db	48
   210  005A95  30                 	db	48
   211  005A96  30                 	db	48
   212  005A97  30                 	db	48
   213  005A98  00                 	db	0
   214                           
   215                           ;initializer for _filename
   216  005A99  74                 	db	116
   217  005A9A  65                 	db	101
   218  005A9B  73                 	db	115
   219  005A9C  74                 	db	116
   220  005A9D  65                 	db	101
   221  005A9E  31                 	db	49
   222  005A9F  2E                 	db	46
   223  005AA0  74                 	db	116
   224  005AA1  78                 	db	120
   225  005AA2  74                 	db	116
   226  005AA3  00                 	db	0
   227  005AA4  00                 	db	0
   228  005AA5  00                 	db	0
   229  005AA6  00                 	db	0
   230  005AA7  00                 	db	0
   231                           
   232                           	psect	smallconst
   233  000800                     __psmallconst:
   234                           	opt stack 0
   235  000800  00                 	db	0
   236  000801                     mensagem_inicial@F4348:
   237                           	opt stack 0
   238  000801  54                 	db	84
   239  000802  43                 	db	67
   240  000803  43                 	db	67
   241  000804  2D                 	db	45
   242  000805  2D                 	db	45
   243  000806  54                 	db	84
   244  000807  45                 	db	69
   245  000808  4C                 	db	76
   246  000809  45                 	db	69
   247  00080A  4D                 	db	77
   248  00080B  54                 	db	84
   249  00080C  52                 	db	82
   250  00080D  49                 	db	73
   251  00080E  41                 	db	65
   252  00080F  00                 	db	0
   253  000810  00                 	db	0
   254  000811  00                 	db	0
   255  000812                     __end_ofmensagem_inicial@F4348:
   256                           	opt stack 0
   257  000812                     mensagem_inicial@F4346:
   258                           	opt stack 0
   259  000812  46                 	db	70
   260  000813  41                 	db	65
   261  000814  54                 	db	84
   262  000815  45                 	db	69
   263  000816  43                 	db	67
   264  000817  20                 	db	32
   265  000818  53                 	db	83
   266  000819  54                 	db	84
   267  00081A  20                 	db	32
   268  00081B  41                 	db	65
   269  00081C  4E                 	db	78
   270  00081D  44                 	db	68
   271  00081E  52                 	db	82
   272  00081F  45                 	db	69
   273  000820  00                 	db	0
   274  000821  00                 	db	0
   275  000822  00                 	db	0
   276  000823                     __end_ofmensagem_inicial@F4346:
   277                           	opt stack 0
   278  0000                     _RCSTA	set	4011
   279  0000                     _TXSTA	set	4012
   280  0000                     _RCREG	set	4014
   281  0000                     _RCSTAbits	set	4011
   282  0000                     _TXREG	set	4013
   283  0000                     _SPBRG	set	4015
   284  0000                     _PR2	set	4043
   285  0000                     _TMR2	set	4044
   286  0000                     _T2CON	set	4042
   287  0000                     _OSCCONbits	set	4051
   288  0000                     _TRISE	set	3990
   289  0000                     _TRISC	set	3988
   290  0000                     _TRISA	set	3986
   291  0000                     _TRISD	set	3989
   292  0000                     _LATB	set	3978
   293  0000                     _TRISB	set	3987
   294  0000                     _ADCON1	set	4033
   295  0000                     _TMR0L	set	4054
   296  0000                     _TMR0H	set	4055
   297  0000                     _PIE1	set	3997
   298  0000                     _INTCON3	set	4080
   299  0000                     _INTCON2	set	4081
   300  0000                     _INTCON	set	4082
   301  0000                     _SPPCFG	set	3939
   302  0000                     _SPPCON	set	3941
   303  0000                     _T0CON	set	4053
   304  0000                     _PORTDbits	set	3971
   305  0000                     _TRISDbits	set	3989
   306  0000                     _LATCbits	set	3979
   307  0000                     _SSPBUF	set	4041
   308  0000                     _SSPCON1bits	set	4038
   309  0000                     _SSPSTATbits	set	4039
   310  0000                     _SSPCON1	set	4038
   311  0000                     _SSPSTAT	set	4039
   312  0000                     _TRISCbits	set	3988
   313  0000                     _TRISBbits	set	3987
   314  0000                     _LATBbits	set	3978
   315  0000                     _T0CONbits	set	4053
   316  0000                     _PCL	set	4089
   317  0000                     _PCLATH	set	4090
   318  0000                     _INTCONbits	set	4082
   319  0000                     _PORTBbits	set	3969
   320  0000                     _PIR1bits	set	3998
   321  0000                     _PIE1bits	set	3997
   322  0000                     _RCIF	set	31989
   323  0000                     _TRMT	set	32097
   324  0000                     _TXEN	set	32101
   325  0000                     _CREN	set	32092
   326  0000                     _SPEN	set	32095
   327  0000                     _SYNC	set	32100
   328  0000                     _BRGH	set	32098
   329  0000                     _TMR2IF	set	31985
   330  0000                     _INT0IE	set	32660
   331  0000                     _INT0IF	set	32657
   332  0000                     _T0IF	set	32658
   333  0000                     _TMR0IF	set	32658
   334  000823  6F                 	db	111	;'o'
   335  000824  20                 	db	32
   336  000825  53                 	db	83	;'S'
   337  000826  69                 	db	105	;'i'
   338  000827  73                 	db	115	;'s'
   339  000828  74                 	db	116	;'t'
   340  000829  65                 	db	101	;'e'
   341  00082A  6D                 	db	109	;'m'
   342  00082B  61                 	db	97	;'a'
   343  00082C  20                 	db	32
   344  00082D  64                 	db	100	;'d'
   345  00082E  65                 	db	101	;'e'
   346  00082F  20                 	db	32
   347  000830  61                 	db	97	;'a'
   348  000831  72                 	db	114	;'r'
   349  000832  71                 	db	113	;'q'
   350  000833  75                 	db	117	;'u'
   351  000834  69                 	db	105	;'i'
   352  000835  76                 	db	118	;'v'
   353  000836  6F                 	db	111	;'o'
   354  000837  00                 	db	0
   355  000838                     STR_12:
   356  000838  49                 	db	73	;'I'
   357  000839  6E                 	db	110	;'n'
   358  00083A  73                 	db	115	;'s'
   359  00083B  69                 	db	105	;'i'
   360  00083C  72                 	db	114	;'r'
   361  00083D  61                 	db	97	;'a'
   362  00083E  20                 	db	32
   363  00083F  6F                 	db	111	;'o'
   364  000840  20                 	db	32
   365  000841  43                 	db	67	;'C'
   366  000842  61                 	db	97	;'a'
   367  000843  72                 	db	114	;'r'
   368  000844  74                 	db	116	;'t'
   369  000845  61                 	db	97	;'a'
   370  000846  6F                 	db	111	;'o'
   371  000847  00                 	db	0
   372  000848  45                 	db	69	;'E'
   373  000849  72                 	db	114	;'r'
   374  00084A  72                 	db	114	;'r'
   375  00084B  6F                 	db	111	;'o'
   376  00084C  20                 	db	32
   377  00084D  61                 	db	97	;'a'
   378  00084E  6F                 	db	111	;'o'
   379  00084F  20                 	db	32
   380  000850  6D                 	db	109	;'m'
   381  000851  6F                 	db	111	;'o'
   382  000852  6E                 	db	110	;'n'
   383  000853  74                 	db	116	;'t'
   384  000854  61                 	db	97	;'a'
   385  000855  72                 	db	114	;'r'
   386  000856  00                 	db	0
   387  000857  45                 	db	69	;'E'
   388  000858  72                 	db	114	;'r'
   389  000859  72                 	db	114	;'r'
   390  00085A  6F                 	db	111	;'o'
   391  00085B  20                 	db	32
   392  00085C  61                 	db	97	;'a'
   393  00085D  6F                 	db	111	;'o'
   394  00085E  20                 	db	32
   395  00085F  63                 	db	99	;'c'
   396  000860  72                 	db	114	;'r'
   397  000861  69                 	db	105	;'i'
   398  000862  61                 	db	97	;'a'
   399  000863  72                 	db	114	;'r'
   400  000864  00                 	db	0
   401  000865                     STR_10:
   402  000865  65                 	db	101	;'e'
   403  000866  78                 	db	120	;'x'
   404  000867  74                 	db	116	;'t'
   405  000868  66                 	db	102	;'f'
   406  000869  65                 	db	101	;'e'
   407  00086A  6E                 	db	110	;'n'
   408  00086B  63                 	db	99	;'c'
   409  00086C  65                 	db	101	;'e'
   410  00086D  2E                 	db	46
   411  00086E  74                 	db	116	;'t'
   412  00086F  78                 	db	120	;'x'
   413  000870  74                 	db	116	;'t'
   414  000871  00                 	db	0
   415  000872                     STR_14:
   416  000872  4D                 	db	77	;'M'
   417  000873  4D                 	db	77	;'M'
   418  000874  43                 	db	67	;'C'
   419  000875  20                 	db	32
   420  000876  56                 	db	86	;'V'
   421  000877  65                 	db	101	;'e'
   422  000878  72                 	db	114	;'r'
   423  000879  2E                 	db	46
   424  00087A  20                 	db	32
   425  00087B  33                 	db	51	;'3'
   426  00087C  00                 	db	0
   427  00087D                     STR_11:
   428  00087D  53                 	db	83	;'S'
   429  00087E  65                 	db	101	;'e'
   430  00087F  6D                 	db	109	;'m'
   431  000880  20                 	db	32
   432  000881  43                 	db	67	;'C'
   433  000882  61                 	db	97	;'a'
   434  000883  72                 	db	114	;'r'
   435  000884  74                 	db	116	;'t'
   436  000885  61                 	db	97	;'a'
   437  000886  6F                 	db	111	;'o'
   438  000887  00                 	db	0
   439  000888                     STR_9:
   440  000888  0A                 	db	10
   441  000889  25                 	db	37
   442  00088A  73                 	db	115	;'s'
   443  00088B  20                 	db	32
   444  00088C  3B                 	db	59	;';'
   445  00088D  20                 	db	32
   446  00088E  25                 	db	37
   447  00088F  73                 	db	115	;'s'
   448  000890  20                 	db	32
   449  000891  3B                 	db	59	;';'
   450  000892  00                 	db	0
   451  000893                     STR_13:
   452  000893  53                 	db	83	;'S'
   453  000894  44                 	db	68	;'D'
   454  000895  20                 	db	32
   455  000896  56                 	db	86	;'V'
   456  000897  45                 	db	69	;'E'
   457  000898  52                 	db	82	;'R'
   458  000899  2E                 	db	46
   459  00089A  20                 	db	32
   460  00089B  31                 	db	49	;'1'
   461  00089C  00                 	db	0
   462  00089D  56                 	db	86	;'V'
   463  00089E  65                 	db	101	;'e'
   464  00089F  72                 	db	114	;'r'
   465  0008A0  69                 	db	105	;'i'
   466  0008A1  66                 	db	102	;'f'
   467  0008A2  69                 	db	105	;'i'
   468  0008A3  71                 	db	113	;'q'
   469  0008A4  75                 	db	117	;'u'
   470  0008A5  65                 	db	101	;'e'
   471  0008A6  00                 	db	0
   472  0008A7  6F                 	db	111	;'o'
   473  0008A8  20                 	db	32
   474  0008A9  61                 	db	97	;'a'
   475  0008AA  72                 	db	114	;'r'
   476  0008AB  71                 	db	113	;'q'
   477  0008AC  75                 	db	117	;'u'
   478  0008AD  69                 	db	105	;'i'
   479  0008AE  76                 	db	118	;'v'
   480  0008AF  6F                 	db	111	;'o'
   481  0008B0  00                 	db	0
   482  0008B1  6F                 	db	111	;'o'
   483  0008B2  20                 	db	32
   484  0008B3  63                 	db	99	;'c'
   485  0008B4  61                 	db	97	;'a'
   486  0008B5  72                 	db	114	;'r'
   487  0008B6  74                 	db	116	;'t'
   488  0008B7  61                 	db	97	;'a'
   489  0008B8  6F                 	db	111	;'o'
   490  0008B9  00                 	db	0
   491  0008BA                     STR_2:
   492  0008BA  47                 	db	71	;'G'
   493  0008BB  50                 	db	80	;'P'
   494  0008BC  47                 	db	71	;'G'
   495  0008BD  47                 	db	71	;'G'
   496  0008BE  41                 	db	65	;'A'
   497  0008BF  00                 	db	0
   498  0008C0                     STR_1:
   499  0008C0  47                 	db	71	;'G'
   500  0008C1  50                 	db	80	;'P'
   501  0008C2  52                 	db	82	;'R'
   502  0008C3  4D                 	db	77	;'M'
   503  0008C4  43                 	db	67	;'C'
   504  0008C5  00                 	db	0
   505  0008C6                     STR_16:
   506  0008C6  46                 	db	70	;'F'
   507  0008C7  41                 	db	65	;'A'
   508  0008C8  54                 	db	84	;'T'
   509  0008C9  00                 	db	0
   510  0008CA  0D                 	db	13
   511  0008CB  0A                 	db	10
   512  0008CC  00                 	db	0
   513  0008CD  00                 	db	0	; dummy byte at the end
   514  0000                     
   515                           ; #config settings
   516                           
   517                           	psect	cinit
   518  0048FC                     __pcinit:
   519                           	opt stack 0
   520  0048FC                     start_initialization:
   521                           	opt stack 0
   522  0048FC                     __initialization:
   523                           	opt stack 0
   524                           
   525                           ; Initialize objects allocated to BANK2 (44 bytes)
   526                           ; load TBLPTR registers with __pidataBANK2
   527  0048FC  0E7C               	movlw	low __pidataBANK2
   528  0048FE  6EF6               	movwf	tblptrl,c
   529  004900  0E5A               	movlw	high __pidataBANK2
   530  004902  6EF7               	movwf	tblptrh,c
   531  004904  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   532  004906  6EF8               	movwf	tblptru,c
   533  004908  EE02  F065         	lfsr	0,__pdataBANK2
   534  00490C  EE10 F02C          	lfsr	1,44
   535  004910                     copy_data0:
   536  004910  0009               	tblrd		*+
   537  004912  CFF5 FFEE          	movff	tablat,postinc0
   538  004916  50E5               	movf	postdec1,w,c
   539  004918  50E1               	movf	fsr1l,w,c
   540  00491A  E1FA               	bnz	copy_data0
   541                           
   542                           ; Initialize objects allocated to BANK1 (7 bytes)
   543                           ; load TBLPTR registers with __pidataBANK1
   544  00491C  0E9E               	movlw	low __pidataBANK1
   545  00491E  6EF6               	movwf	tblptrl,c
   546  004920  0E5C               	movlw	high __pidataBANK1
   547  004922  6EF7               	movwf	tblptrh,c
   548  004924  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   549  004926  6EF8               	movwf	tblptru,c
   550  004928  EE01  F085         	lfsr	0,__pdataBANK1
   551  00492C  EE10 F007          	lfsr	1,7
   552  004930                     copy_data1:
   553  004930  0009               	tblrd		*+
   554  004932  CFF5 FFEE          	movff	tablat,postinc0
   555  004936  50E5               	movf	postdec1,w,c
   556  004938  50E1               	movf	fsr1l,w,c
   557  00493A  E1FA               	bnz	copy_data1
   558                           
   559                           ; Initialize objects allocated to BANK0 (1 bytes)
   560                           ; load TBLPTR registers with __pidataBANK0
   561  00493C  0EAA               	movlw	low __pidataBANK0
   562  00493E  6EF6               	movwf	tblptrl,c
   563  004940  0E5C               	movlw	high __pidataBANK0
   564  004942  6EF7               	movwf	tblptrh,c
   565  004944  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   566  004946  6EF8               	movwf	tblptru,c
   567  004948  0009               	tblrd		*+	;fetch initializer
   568  00494A  CFF5 F0FF          	movff	tablat,__pdataBANK0
   569                           
   570                           ; Clear objects allocated to BIGRAM (544 bytes)
   571  00494E  EE04  F082         	lfsr	0,__pbssBIGRAM
   572  004952  EE12 F020          	lfsr	1,544
   573  004956                     clear_0:
   574  004956  6AEE               	clrf	postinc0,c
   575  004958  50E5               	movf	postdec1,w,c
   576  00495A  50E1               	movf	fsr1l,w,c
   577  00495C  E1FC               	bnz	clear_0
   578  00495E  50E2               	movf	fsr1h,w,c
   579  004960  E1FA               	bnz	clear_0
   580                           
   581                           ; Clear objects allocated to BANK3 (198 bytes)
   582  004962  EE03  F000         	lfsr	0,__pbssBANK3
   583  004966  0EC6               	movlw	198
   584  004968                     clear_1:
   585  004968  6AEE               	clrf	postinc0,c
   586  00496A  06E8               	decf	wreg,f,c
   587  00496C  E1FD               	bnz	clear_1
   588                           
   589                           ; Clear objects allocated to BANK2 (101 bytes)
   590  00496E  EE02  F000         	lfsr	0,__pbssBANK2
   591  004972  0E65               	movlw	101
   592  004974                     clear_2:
   593  004974  6AEE               	clrf	postinc0,c
   594  004976  06E8               	decf	wreg,f,c
   595  004978  E1FD               	bnz	clear_2
   596                           
   597                           ; Clear objects allocated to BANK1 (78 bytes)
   598  00497A  EE01  F000         	lfsr	0,__pbssBANK1
   599  00497E  0E4E               	movlw	78
   600  004980                     clear_3:
   601  004980  6AEE               	clrf	postinc0,c
   602  004982  06E8               	decf	wreg,f,c
   603  004984  E1FD               	bnz	clear_3
   604                           
   605                           ; Clear objects allocated to BANK0 (11 bytes)
   606  004986  EE00  F0F4         	lfsr	0,__pbssBANK0
   607  00498A  0E0B               	movlw	11
   608  00498C                     clear_4:
   609  00498C  6AEE               	clrf	postinc0,c
   610  00498E  06E8               	decf	wreg,f,c
   611  004990  E1FD               	bnz	clear_4
   612                           
   613                           ; Clear objects allocated to COMRAM (27 bytes)
   614  004992  EE00  F024         	lfsr	0,__pbssCOMRAM
   615  004996  0E1B               	movlw	27
   616  004998                     clear_5:
   617  004998  6AEE               	clrf	postinc0,c
   618  00499A  06E8               	decf	wreg,f,c
   619  00499C  E1FD               	bnz	clear_5
   620  00499E                     end_of_initialization:
   621                           	opt stack 0
   622  00499E                     __end_of__initialization:
   623                           	opt stack 0
   624  00499E  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   625  0049A0  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   626  0049A2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   627  0049A4  6EF8               	movwf	tblptru,c
   628  0049A6  0100               	movlb	0
   629  0049A8  EF10  F02D         	goto	_main	;jump to C main() function
   630                           tblptru	equ	0xFF8
   631                           tblptrh	equ	0xFF7
   632                           tblptrl	equ	0xFF6
   633                           tablat	equ	0xFF5
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           postdec1	equ	0xFE5
   637                           fsr1h	equ	0xFE2
   638                           fsr1l	equ	0xFE1
   639                           
   640                           	psect	bssCOMRAM
   641  000024                     __pbssCOMRAM:
   642                           	opt stack 0
   643  000024                     _tempo_tarefa:
   644                           	opt stack 0
   645  000024                     	ds	6
   646  00002A                     _data_buff:
   647                           	opt stack 0
   648  00002A                     	ds	2
   649  00002C                     _GPGGA_ok:
   650                           	opt stack 0
   651  00002C                     	ds	2
   652  00002E                     _GPRMC_ok:
   653                           	opt stack 0
   654  00002E                     	ds	2
   655  000030                     _timeout_tarefa:
   656                           	opt stack 0
   657  000030                     	ds	2
   658  000032                     _dado:
   659                           	opt stack 0
   660  000032                     	ds	1
   661  000033                     timer_dois@flag:
   662                           	opt stack 0
   663  000033                     	ds	1
   664  000034                     _estado:
   665                           	opt stack 0
   666  000034                     	ds	1
   667  000035                     _data_hoje:
   668                           	opt stack 0
   669  000035                     	ds	1
   670  000036                     _Term:
   671                           	opt stack 0
   672  000036                     	ds	1
   673  000037                     _SentenceType:
   674                           	opt stack 0
   675  000037                     	ds	1
   676  000038                     _char_number:
   677                           	opt stack 0
   678  000038                     	ds	1
   679  000039                     _metros:
   680                           	opt stack 0
   681  000039                     	ds	1
   682  00003A                     _tarefa_em_execucao:
   683                           	opt stack 0
   684  00003A                     	ds	1
   685  00003B                     _data_uart_recebe:
   686                           	opt stack 0
   687  00003B                     	ds	1
   688  00003C                     _rawSatellites:
   689                           	opt stack 0
   690  00003C                     	ds	3
   691                           tblptru	equ	0xFF8
   692                           tblptrh	equ	0xFF7
   693                           tblptrl	equ	0xFF6
   694                           tablat	equ	0xFF5
   695                           postinc0	equ	0xFEE
   696                           wreg	equ	0xFE8
   697                           postdec1	equ	0xFE5
   698                           fsr1h	equ	0xFE2
   699                           fsr1l	equ	0xFE1
   700                           
   701                           	psect	bssBANK0
   702  0000F4                     __pbssBANK0:
   703                           	opt stack 0
   704  0000F4                     _p_tarefas:
   705                           	opt stack 0
   706  0000F4                     	ds	6
   707  0000FA                     _fsid:
   708                           	opt stack 0
   709  0000FA                     	ds	2
   710  0000FC                     _FatFs:
   711                           	opt stack 0
   712  0000FC                     	ds	2
   713  0000FE                     _sinaliza_int_timer:
   714                           	opt stack 0
   715  0000FE                     	ds	1
   716                           tblptru	equ	0xFF8
   717                           tblptrh	equ	0xFF7
   718                           tblptrl	equ	0xFF6
   719                           tablat	equ	0xFF5
   720                           postinc0	equ	0xFEE
   721                           wreg	equ	0xFE8
   722                           postdec1	equ	0xFE5
   723                           fsr1h	equ	0xFE2
   724                           fsr1l	equ	0xFE1
   725                           
   726                           	psect	dataBANK0
   727  0000FF                     __pdataBANK0:
   728                           	opt stack 0
   729  0000FF                     leitura_sdcard@size:
   730                           	opt stack 0
   731  0000FF                     	ds	1
   732                           tblptru	equ	0xFF8
   733                           tblptrh	equ	0xFF7
   734                           tblptrl	equ	0xFF6
   735                           tablat	equ	0xFF5
   736                           postinc0	equ	0xFEE
   737                           wreg	equ	0xFE8
   738                           postdec1	equ	0xFE5
   739                           fsr1h	equ	0xFE2
   740                           fsr1l	equ	0xFE1
   741                           
   742                           	psect	bssBANK1
   743  000100                     __pbssBANK1:
   744                           	opt stack 0
   745  000100                     _tempo_backup:
   746                           	opt stack 0
   747  000100                     	ds	6
   748  000106                     _fil:
   749                           	opt stack 0
   750  000106                     	ds	28
   751  000122                     _buffer:
   752                           	opt stack 0
   753  000122                     	ds	12
   754  00012E                     _rawAltitude:
   755                           	opt stack 0
   756  00012E                     	ds	7
   757  000135                     _rawDate:
   758                           	opt stack 0
   759  000135                     	ds	7
   760  00013C                     _rawCourse:
   761                           	opt stack 0
   762  00013C                     	ds	6
   763  000142                     _rawSpeed:
   764                           	opt stack 0
   765  000142                     	ds	6
   766  000148                     _sentence:
   767                           	opt stack 0
   768  000148                     	ds	6
   769                           tblptru	equ	0xFF8
   770                           tblptrh	equ	0xFF7
   771                           tblptrl	equ	0xFF6
   772                           tablat	equ	0xFF5
   773                           postinc0	equ	0xFEE
   774                           wreg	equ	0xFE8
   775                           postdec1	equ	0xFE5
   776                           fsr1h	equ	0xFE2
   777                           fsr1l	equ	0xFE1
   778                           
   779                           	psect	dataBANK1
   780  000185                     __pdataBANK1:
   781                           	opt stack 0
   782  000185                     escreve_inteiro_lcd@F3966:
   783                           	opt stack 0
   784  000185                     	ds	7
   785                           tblptru	equ	0xFF8
   786                           tblptrh	equ	0xFF7
   787                           tblptrl	equ	0xFF6
   788                           tablat	equ	0xFF5
   789                           postinc0	equ	0xFEE
   790                           wreg	equ	0xFE8
   791                           postdec1	equ	0xFE5
   792                           fsr1h	equ	0xFE2
   793                           fsr1l	equ	0xFE1
   794                           
   795                           	psect	bssBANK2
   796  000200                     __pbssBANK2:
   797                           	opt stack 0
   798  000200                     _string_dado:
   799                           	opt stack 0
   800  000200                     	ds	44
   801  00022C                     _dado_arquivo:
   802                           	opt stack 0
   803  00022C                     	ds	20
   804  000240                     _rawLongitude:
   805                           	opt stack 0
   806  000240                     	ds	13
   807  00024D                     _rawLatitude:
   808                           	opt stack 0
   809  00024D                     	ds	13
   810  00025A                     _rawTime:
   811                           	opt stack 0
   812  00025A                     	ds	11
   813                           tblptru	equ	0xFF8
   814                           tblptrh	equ	0xFF7
   815                           tblptrl	equ	0xFF6
   816                           tablat	equ	0xFF5
   817                           postinc0	equ	0xFEE
   818                           wreg	equ	0xFE8
   819                           postdec1	equ	0xFE5
   820                           fsr1h	equ	0xFE2
   821                           fsr1l	equ	0xFE1
   822                           
   823                           	psect	dataBANK2
   824  000265                     __pdataBANK2:
   825                           	opt stack 0
   826  000265                     verifica_fence_externo@F4364:
   827                           	opt stack 0
   828  000265                     	ds	11
   829  000270                     verifica_fence_externo@F4362:
   830                           	opt stack 0
   831  000270                     	ds	11
   832  00027B                     escreve_inteiro_uart@F3958:
   833                           	opt stack 0
   834  00027B                     	ds	7
   835  000282                     _filename:
   836                           	opt stack 0
   837  000282                     	ds	15
   838                           tblptru	equ	0xFF8
   839                           tblptrh	equ	0xFF7
   840                           tblptrl	equ	0xFF6
   841                           tablat	equ	0xFF5
   842                           postinc0	equ	0xFEE
   843                           wreg	equ	0xFE8
   844                           postdec1	equ	0xFE5
   845                           fsr1h	equ	0xFE2
   846                           fsr1l	equ	0xFE1
   847                           
   848                           	psect	bssBANK3
   849  000300                     __pbssBANK3:
   850                           	opt stack 0
   851  000300                     _poligono_ext:
   852                           	opt stack 0
   853  000300                     	ds	198
   854                           tblptru	equ	0xFF8
   855                           tblptrh	equ	0xFF7
   856                           tblptrl	equ	0xFF6
   857                           tablat	equ	0xFF5
   858                           postinc0	equ	0xFEE
   859                           wreg	equ	0xFE8
   860                           postdec1	equ	0xFE5
   861                           fsr1h	equ	0xFE2
   862                           fsr1l	equ	0xFE1
   863                           
   864                           	psect	bssBIGRAM
   865  000482                     __pbssBIGRAM:
   866                           	opt stack 0
   867  000482                     _fs:
   868                           	opt stack 0
   869  000482                     	ds	544
   870                           tblptru	equ	0xFF8
   871                           tblptrh	equ	0xFF7
   872                           tblptrl	equ	0xFF6
   873                           tablat	equ	0xFF5
   874                           postinc0	equ	0xFEE
   875                           wreg	equ	0xFE8
   876                           postdec1	equ	0xFE5
   877                           fsr1h	equ	0xFE2
   878                           fsr1l	equ	0xFE1
   879                           
   880                           	psect	cstackBANK4
   881  000400                     __pcstackBANK4:
   882                           	opt stack 0
   883  000400                     verifica_fence_externo@caractere_gps:
   884                           	opt stack 0
   885                           
   886                           ; 100 bytes @ 0x0
   887  000400                     	ds	100
   888  000464                     verifica_fence_externo@temp_buff_lat:
   889                           	opt stack 0
   890                           
   891                           ; 11 bytes @ 0x64
   892  000464                     	ds	11
   893  00046F                     verifica_fence_externo@temp_buff_long:
   894                           	opt stack 0
   895                           
   896                           ; 11 bytes @ 0x6F
   897  00046F                     	ds	11
   898  00047A                     verifica_fence_externo@point_buff:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x7A
   902  00047A                     	ds	2
   903  00047C                     verifica_fence_externo@size:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x7C
   907  00047C                     	ds	1
   908  00047D                     verifica_fence_externo@point:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x7D
   912  00047D                     	ds	1
   913  00047E                     verifica_fence_externo@count_index:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x7E
   917  00047E                     	ds	1
   918  00047F                     verifica_fence_externo@j:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x7F
   922  00047F                     	ds	1
   923  000480                     verifica_fence_externo@count:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x80
   927  000480                     	ds	1
   928  000481                     verifica_fence_externo@i:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x81
   932  000481                     	ds	1
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           postinc0	equ	0xFEE
   938                           wreg	equ	0xFE8
   939                           postdec1	equ	0xFE5
   940                           fsr1h	equ	0xFE2
   941                           fsr1l	equ	0xFE1
   942                           
   943                           	psect	cstackBANK1
   944  00014E                     __pcstackBANK1:
   945                           	opt stack 0
   946  00014E                     ?_fprintf:
   947                           	opt stack 0
   948  00014E                     fprintf@fil:
   949                           	opt stack 0
   950  00014E                     f_open@fn:
   951                           	opt stack 0
   952                           
   953                           ; 12 bytes @ 0x0
   954  00014E                     	ds	2
   955  000150                     fprintf@str:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x2
   959  000150                     	ds	6
   960  000156                     fprintf@s:
   961                           	opt stack 0
   962                           
   963                           ; 16 bytes @ 0x8
   964  000156                     	ds	4
   965  00015A                     f_open@rs:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0xC
   969  00015A                     	ds	2
   970  00015C                     f_open@dw:
   971                           	opt stack 0
   972                           
   973                           ; 4 bytes @ 0xE
   974  00015C                     	ds	4
   975  000160                     f_open@res:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x12
   979  000160                     	ds	1
   980  000161                     f_open@dir:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x13
   984  000161                     	ds	2
   985  000163                     f_open@dj:
   986                           	opt stack 0
   987                           
   988                           ; 14 bytes @ 0x15
   989  000163                     	ds	3
   990  000166                     fprintf@res:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x18
   994  000166                     	ds	2
   995  000168                     _fprintf$2484:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x1A
   999  000168                     	ds	2
  1000  00016A                     fprintf@w:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x1C
  1004  00016A                     	ds	2
  1005  00016C                     fprintf@f:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0x1E
  1009  00016C                     	ds	1
  1010  00016D                     fprintf@r:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x1F
  1014  00016D                     	ds	1
  1015  00016E                     fprintf@val:
  1016                           	opt stack 0
  1017                           
  1018                           ; 4 bytes @ 0x20
  1019  00016E                     	ds	4
  1020  000172                     fprintf@arp:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x24
  1024  000172                     	ds	2
  1025  000174                     fprintf@cc:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x26
  1029  000174                     	ds	2
  1030  000176                     fprintf@i:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x28
  1034  000176                     	ds	2
  1035  000178                     fprintf@c:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x2A
  1039  000178                     	ds	1
  1040  000179                     escrita_sdcard@point1:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x2B
  1044  000179                     	ds	2
  1045  00017B                     escrita_sdcard@point2:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x2D
  1049  00017B                     	ds	2
  1050  00017D                     ??_verifica_fence_externo:
  1051                           
  1052                           ; 1 bytes @ 0x2F
  1053  00017D                     	ds	5
  1054  000182                     
  1055                           ; 1 bytes @ 0x34
  1056  000182                     	ds	2
  1057  000184                     escalonador@cont:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x36
  1061  000184                     	ds	1
  1062                           tblptru	equ	0xFF8
  1063                           tblptrh	equ	0xFF7
  1064                           tblptrl	equ	0xFF6
  1065                           tablat	equ	0xFF5
  1066                           postinc0	equ	0xFEE
  1067                           wreg	equ	0xFE8
  1068                           postdec1	equ	0xFE5
  1069                           fsr1h	equ	0xFE2
  1070                           fsr1l	equ	0xFE1
  1071                           
  1072                           	psect	cstackBANK0
  1073  000060                     __pcstackBANK0:
  1074                           	opt stack 0
  1075  000060                     ??_init_lcd:
  1076  000060                     ??_strlen:
  1077  000060                     ?_memcmp:
  1078                           	opt stack 0
  1079  000060                     ?___wmul:
  1080                           	opt stack 0
  1081  000060                     ?___lwdiv:
  1082                           	opt stack 0
  1083  000060                     ?___lwmod:
  1084                           	opt stack 0
  1085  000060                     ?_get_fattime:
  1086                           	opt stack 0
  1087  000060                     ?___lmul:
  1088                           	opt stack 0
  1089  000060                     ?___aldiv:
  1090                           	opt stack 0
  1091  000060                     ?___lldiv:
  1092                           	opt stack 0
  1093  000060                     ?___llmod:
  1094                           	opt stack 0
  1095  000060                     dummy_clocks@n:
  1096                           	opt stack 0
  1097  000060                     disk_ioctl@pdrv:
  1098                           	opt stack 0
  1099  000060                     posicao_cursor_lcd@coluna:
  1100                           	opt stack 0
  1101  000060                     disk_status@result:
  1102                           	opt stack 0
  1103  000060                     escreve_frase_ram_lcd@buffer:
  1104                           	opt stack 0
  1105  000060                     write_timer_zero@timer:
  1106                           	opt stack 0
  1107  000060                     ___wmul@multiplier:
  1108                           	opt stack 0
  1109  000060                     ___lwdiv@dividend:
  1110                           	opt stack 0
  1111  000060                     ___lwmod@dividend:
  1112                           	opt stack 0
  1113  000060                     memcmp@s1:
  1114                           	opt stack 0
  1115  000060                     memcpy@d1:
  1116                           	opt stack 0
  1117  000060                     memset@p1:
  1118                           	opt stack 0
  1119  000060                     wait_ready@timeout:
  1120                           	opt stack 0
  1121  000060                     ___lmul@multiplier:
  1122                           	opt stack 0
  1123  000060                     ___aldiv@dividend:
  1124                           	opt stack 0
  1125  000060                     ___lldiv@dividend:
  1126                           	opt stack 0
  1127  000060                     ___llmod@dividend:
  1128                           	opt stack 0
  1129                           
  1130                           ; 4 bytes @ 0x0
  1131  000060                     	ds	1
  1132  000061                     disk_ioctl@res:
  1133                           	opt stack 0
  1134  000061                     posicao_cursor_lcd@linha:
  1135                           	opt stack 0
  1136  000061                     dummy_clocks@i:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0x1
  1140  000061                     	ds	1
  1141  000062                     disk_status@pdrv:
  1142                           	opt stack 0
  1143  000062                     posicao_cursor_lcd@endereco:
  1144                           	opt stack 0
  1145  000062                     ___wmul@multiplicand:
  1146                           	opt stack 0
  1147  000062                     ___lwdiv@divisor:
  1148                           	opt stack 0
  1149  000062                     ___lwmod@divisor:
  1150                           	opt stack 0
  1151  000062                     memcmp@s2:
  1152                           	opt stack 0
  1153  000062                     memcpy@s1:
  1154                           	opt stack 0
  1155  000062                     memset@c:
  1156                           	opt stack 0
  1157  000062                     strlen@cp:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x2
  1161  000062                     	ds	1
  1162  000063                     ??_mensagem_inicial:
  1163  000063                     disk_status@stat:
  1164                           	opt stack 0
  1165                           
  1166                           ; 1 bytes @ 0x3
  1167  000063                     	ds	1
  1168  000064                     ??_get_fattime:
  1169  000064                     wait_ready@res:
  1170                           	opt stack 0
  1171  000064                     monta_sd@dado:
  1172                           	opt stack 0
  1173  000064                     validate@fs:
  1174                           	opt stack 0
  1175  000064                     utoa@buf:
  1176                           	opt stack 0
  1177  000064                     memcmp@n:
  1178                           	opt stack 0
  1179  000064                     memcpy@n:
  1180                           	opt stack 0
  1181  000064                     memset@n:
  1182                           	opt stack 0
  1183  000064                     ___lmul@multiplicand:
  1184                           	opt stack 0
  1185  000064                     ___aldiv@divisor:
  1186                           	opt stack 0
  1187  000064                     ___lldiv@divisor:
  1188                           	opt stack 0
  1189  000064                     ___llmod@divisor:
  1190                           	opt stack 0
  1191                           
  1192                           ; 4 bytes @ 0x4
  1193  000064                     	ds	1
  1194  000065                     command@arg:
  1195                           	opt stack 0
  1196  000065                     mensagem_inicial@msg_linha_um:
  1197                           	opt stack 0
  1198                           
  1199                           ; 17 bytes @ 0x5
  1200  000065                     	ds	1
  1201  000066                     monta_sd@index:
  1202                           	opt stack 0
  1203  000066                     memcpy@tmp:
  1204                           	opt stack 0
  1205  000066                     make_dirfile@path:
  1206                           	opt stack 0
  1207  000066                     validate@id:
  1208                           	opt stack 0
  1209  000066                     utoa@val:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x6
  1213  000066                     	ds	1
  1214  000067                     monta_sd@size:
  1215                           	opt stack 0
  1216  000067                     memcpy@d:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x7
  1220  000067                     	ds	1
  1221  000068                     ??_validate:
  1222  000068                     monta_sd@i:
  1223                           	opt stack 0
  1224  000068                     ___aldiv@counter:
  1225                           	opt stack 0
  1226  000068                     make_dirfile@dirname:
  1227                           	opt stack 0
  1228  000068                     utoa@base:
  1229                           	opt stack 0
  1230  000068                     ___lmul@product:
  1231                           	opt stack 0
  1232  000068                     ___lldiv@quotient:
  1233                           	opt stack 0
  1234                           
  1235                           ; 4 bytes @ 0x8
  1236  000068                     	ds	1
  1237  000069                     command@CRC:
  1238                           	opt stack 0
  1239  000069                     ___aldiv@sign:
  1240                           	opt stack 0
  1241  000069                     memcpy@s:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x9
  1245  000069                     	ds	1
  1246  00006A                     ??_make_dirfile:
  1247  00006A                     command@CMD:
  1248                           	opt stack 0
  1249  00006A                     utoa@v:
  1250                           	opt stack 0
  1251  00006A                     ___aldiv@quotient:
  1252                           	opt stack 0
  1253                           
  1254                           ; 4 bytes @ 0xA
  1255  00006A                     	ds	1
  1256  00006B                     command@argument:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0xB
  1260  00006B                     	ds	1
  1261  00006C                     ?_clust2sect:
  1262                           	opt stack 0
  1263  00006C                     utoa@c:
  1264                           	opt stack 0
  1265  00006C                     ___lldiv@counter:
  1266                           	opt stack 0
  1267  00006C                     sdc_reset@i:
  1268                           	opt stack 0
  1269  00006C                     sdc_disk_read@p_buff:
  1270                           	opt stack 0
  1271  00006C                     sdc_disk_write@p_buff:
  1272                           	opt stack 0
  1273  00006C                     clust2sect@clust:
  1274                           	opt stack 0
  1275  00006C                     _make_dirfile$1996:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0xC
  1279  00006C                     	ds	1
  1280  00006D                     itoa@buf:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0xD
  1284  00006D                     	ds	1
  1285  00006E                     make_dirfile@b:
  1286                           	opt stack 0
  1287  00006E                     sdc_reset@count_nosd:
  1288                           	opt stack 0
  1289  00006E                     sdc_disk_read@sector:
  1290                           	opt stack 0
  1291  00006E                     sdc_disk_write@sector:
  1292                           	opt stack 0
  1293  00006E                     configura_baudrate_uart@baudrate:
  1294                           	opt stack 0
  1295                           
  1296                           ; 4 bytes @ 0xE
  1297  00006E                     	ds	1
  1298  00006F                     make_dirfile@t:
  1299                           	opt stack 0
  1300  00006F                     itoa@val:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0xF
  1304  00006F                     	ds	1
  1305  000070                     ??_clust2sect:
  1306  000070                     make_dirfile@a:
  1307                           	opt stack 0
  1308  000070                     sdc_reset@count:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x10
  1312  000070                     	ds	1
  1313  000071                     make_dirfile@n:
  1314                           	opt stack 0
  1315  000071                     itoa@base:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x11
  1319  000071                     	ds	1
  1320  000072                     ??_configura_baudrate_uart:
  1321  000072                     sdc_reset@buff:
  1322                           	opt stack 0
  1323  000072                     sdc_disk_read@count:
  1324                           	opt stack 0
  1325  000072                     sdc_disk_write@count:
  1326                           	opt stack 0
  1327  000072                     make_dirfile@c:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x12
  1331  000072                     	ds	1
  1332  000073                     ??_sdc_disk_initialize:
  1333  000073                     ??_sdc_disk_read:
  1334  000073                     ??_sdc_disk_write:
  1335  000073                     itoa@cp:
  1336                           	opt stack 0
  1337                           
  1338                           ; 2 bytes @ 0x13
  1339  000073                     	ds	1
  1340  000074                     sdc_disk_initialize@i:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x14
  1344  000074                     	ds	1
  1345  000075                     escreve_inteiro_lcd@valor:
  1346                           	opt stack 0
  1347                           
  1348                           ; 2 bytes @ 0x15
  1349  000075                     	ds	1
  1350  000076                     sdc_disk_initialize@stat:
  1351                           	opt stack 0
  1352  000076                     mensagem_inicial@msg_dois:
  1353                           	opt stack 0
  1354                           
  1355                           ; 17 bytes @ 0x16
  1356  000076                     	ds	1
  1357  000077                     sdc_disk_read@ptr:
  1358                           	opt stack 0
  1359  000077                     sdc_disk_initialize@count1:
  1360                           	opt stack 0
  1361  000077                     sdc_disk_write@i:
  1362                           	opt stack 0
  1363  000077                     escreve_inteiro_lcd@texto:
  1364                           	opt stack 0
  1365                           
  1366                           ; 7 bytes @ 0x17
  1367  000077                     	ds	1
  1368  000078                     sdc_disk_read@start_add:
  1369                           	opt stack 0
  1370                           
  1371                           ; 4 bytes @ 0x18
  1372  000078                     	ds	1
  1373  000079                     sdc_disk_initialize@crc_number:
  1374                           	opt stack 0
  1375  000079                     sdc_disk_write@count1:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x19
  1379  000079                     	ds	2
  1380  00007B                     sdc_disk_initialize@buff_i:
  1381                           	opt stack 0
  1382  00007B                     sdc_disk_write@res:
  1383                           	opt stack 0
  1384                           
  1385                           ; 1 bytes @ 0x1B
  1386  00007B                     	ds	1
  1387  00007C                     sdc_disk_initialize@ocr:
  1388                           	opt stack 0
  1389  00007C                     sdc_disk_read@length:
  1390                           	opt stack 0
  1391  00007C                     sdc_disk_write@j:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x1C
  1395  00007C                     	ds	1
  1396  00007D                     sdc_disk_initialize@count2:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x1D
  1400  00007D                     	ds	1
  1401  00007E                     sdc_disk_read@buff:
  1402                           	opt stack 0
  1403  00007E                     sdc_disk_write@buff:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x1E
  1407  00007E                     	ds	1
  1408  00007F                     sdc_disk_initialize@buff:
  1409                           	opt stack 0
  1410  00007F                     disk_read@buff:
  1411                           	opt stack 0
  1412  00007F                     disk_write@buff:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x1F
  1416  00007F                     	ds	1
  1417  000080                     disk_initialize@pdrv:
  1418                           	opt stack 0
  1419                           
  1420                           ; 1 bytes @ 0x20
  1421  000080                     	ds	1
  1422  000081                     disk_initialize@stat:
  1423                           	opt stack 0
  1424  000081                     disk_read@sector:
  1425                           	opt stack 0
  1426  000081                     disk_write@sector:
  1427                           	opt stack 0
  1428                           
  1429                           ; 4 bytes @ 0x21
  1430  000081                     	ds	4
  1431  000085                     disk_read@count:
  1432                           	opt stack 0
  1433  000085                     disk_write@count:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x25
  1437  000085                     	ds	1
  1438  000086                     disk_read@pdrv:
  1439                           	opt stack 0
  1440  000086                     disk_write@pdrv:
  1441                           	opt stack 0
  1442                           
  1443                           ; 1 bytes @ 0x26
  1444  000086                     	ds	1
  1445  000087                     disk_read@result:
  1446                           	opt stack 0
  1447  000087                     disk_write@result:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x27
  1451  000087                     	ds	2
  1452  000089                     disk_read@res:
  1453                           	opt stack 0
  1454  000089                     disk_write@res:
  1455                           	opt stack 0
  1456                           
  1457                           ; 1 bytes @ 0x29
  1458  000089                     	ds	1
  1459  00008A                     move_window@sector:
  1460                           	opt stack 0
  1461  00008A                     check_fs@sect:
  1462                           	opt stack 0
  1463  00008A                     get_fattime@f_time:
  1464                           	opt stack 0
  1465                           
  1466                           ; 9 bytes @ 0x2A
  1467  00008A                     	ds	4
  1468  00008E                     ??_move_window:
  1469  00008E                     
  1470                           ; 1 bytes @ 0x2E
  1471  00008E                     	ds	2
  1472  000090                     check_fs@fs:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x30
  1476  000090                     	ds	2
  1477  000092                     auto_mount@path:
  1478                           	opt stack 0
  1479                           
  1480                           ; 2 bytes @ 0x32
  1481  000092                     	ds	2
  1482  000094                     auto_mount@chk_wp:
  1483                           	opt stack 0
  1484                           
  1485                           ; 1 bytes @ 0x34
  1486  000094                     	ds	1
  1487  000095                     ??_auto_mount:
  1488                           
  1489                           ; 1 bytes @ 0x35
  1490  000095                     	ds	3
  1491  000098                     move_window@n:
  1492                           	opt stack 0
  1493                           
  1494                           ; 1 bytes @ 0x38
  1495  000098                     	ds	1
  1496  000099                     move_window@wsect:
  1497                           	opt stack 0
  1498                           
  1499                           ; 4 bytes @ 0x39
  1500  000099                     	ds	4
  1501  00009D                     move_window@fs:
  1502                           	opt stack 0
  1503                           
  1504                           ; 2 bytes @ 0x3D
  1505  00009D                     	ds	2
  1506  00009F                     ?_get_cluster:
  1507                           	opt stack 0
  1508  00009F                     sync@fs:
  1509                           	opt stack 0
  1510  00009F                     get_cluster@clust:
  1511                           	opt stack 0
  1512  00009F                     put_cluster@clust:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x3F
  1516  00009F                     	ds	2
  1517  0000A1                     ??_get_cluster:
  1518  0000A1                     put_cluster@val:
  1519                           	opt stack 0
  1520  0000A1                     f_sync@fp:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x41
  1524  0000A1                     	ds	2
  1525  0000A3                     ??_put_cluster:
  1526  0000A3                     f_sync@tim:
  1527                           	opt stack 0
  1528                           
  1529                           ; 4 bytes @ 0x43
  1530  0000A3                     	ds	1
  1531  0000A4                     auto_mount@maxclust:
  1532                           	opt stack 0
  1533                           
  1534                           ; 4 bytes @ 0x44
  1535  0000A4                     	ds	3
  1536  0000A7                     f_sync@res:
  1537                           	opt stack 0
  1538  0000A7                     _put_cluster$1886:
  1539                           	opt stack 0
  1540                           
  1541                           ; 2 bytes @ 0x47
  1542  0000A7                     	ds	1
  1543  0000A8                     get_cluster@wc:
  1544                           	opt stack 0
  1545  0000A8                     f_sync@dir:
  1546                           	opt stack 0
  1547  0000A8                     auto_mount@bootsect:
  1548                           	opt stack 0
  1549                           
  1550                           ; 4 bytes @ 0x48
  1551  0000A8                     	ds	1
  1552  0000A9                     _put_cluster$1887:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x49
  1556  0000A9                     	ds	1
  1557  0000AA                     f_close@fp:
  1558                           	opt stack 0
  1559  0000AA                     get_cluster@fatsect:
  1560                           	opt stack 0
  1561                           
  1562                           ; 4 bytes @ 0x4A
  1563  0000AA                     	ds	1
  1564  0000AB                     put_cluster@fatsect:
  1565                           	opt stack 0
  1566                           
  1567                           ; 4 bytes @ 0x4B
  1568  0000AB                     	ds	1
  1569  0000AC                     f_close@res:
  1570                           	opt stack 0
  1571  0000AC                     auto_mount@totalsect:
  1572                           	opt stack 0
  1573                           
  1574                           ; 4 bytes @ 0x4C
  1575  0000AC                     	ds	2
  1576  0000AE                     get_cluster@bc:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x4E
  1580  0000AE                     	ds	1
  1581  0000AF                     put_cluster@bc:
  1582                           	opt stack 0
  1583                           
  1584                           ; 2 bytes @ 0x4F
  1585  0000AF                     	ds	1
  1586  0000B0                     get_cluster@fs:
  1587                           	opt stack 0
  1588  0000B0                     auto_mount@p:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x50
  1592  0000B0                     	ds	1
  1593  0000B1                     put_cluster@p:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x51
  1597  0000B1                     	ds	1
  1598  0000B2                     auto_mount@fmt:
  1599                           	opt stack 0
  1600  0000B2                     next_dir_entry@dj:
  1601                           	opt stack 0
  1602  0000B2                     f_read@fp:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0x52
  1606  0000B2                     	ds	1
  1607  0000B3                     auto_mount@stat:
  1608                           	opt stack 0
  1609  0000B3                     put_cluster@fs:
  1610                           	opt stack 0
  1611                           
  1612                           ; 2 bytes @ 0x53
  1613  0000B3                     	ds	1
  1614  0000B4                     ??_next_dir_entry:
  1615  0000B4                     f_read@buff:
  1616                           	opt stack 0
  1617  0000B4                     auto_mount@fatsize:
  1618                           	opt stack 0
  1619                           
  1620                           ; 4 bytes @ 0x54
  1621  0000B4                     	ds	1
  1622  0000B5                     ?_create_chain:
  1623                           	opt stack 0
  1624  0000B5                     remove_chain@clust:
  1625                           	opt stack 0
  1626  0000B5                     create_chain@clust:
  1627                           	opt stack 0
  1628                           
  1629                           ; 2 bytes @ 0x55
  1630  0000B5                     	ds	1
  1631  0000B6                     f_read@btr:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x56
  1635  0000B6                     	ds	1
  1636  0000B7                     
  1637                           ; 1 bytes @ 0x57
  1638  0000B7                     	ds	1
  1639  0000B8                     auto_mount@fs:
  1640                           	opt stack 0
  1641  0000B8                     f_read@br:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x58
  1645  0000B8                     	ds	1
  1646  0000B9                     remove_chain@nxt:
  1647                           	opt stack 0
  1648  0000B9                     create_chain@mcl:
  1649                           	opt stack 0
  1650                           
  1651                           ; 2 bytes @ 0x59
  1652  0000B9                     	ds	1
  1653  0000BA                     ??_f_read:
  1654                           
  1655                           ; 1 bytes @ 0x5A
  1656  0000BA                     	ds	1
  1657  0000BB                     remove_chain@fs:
  1658                           	opt stack 0
  1659  0000BB                     create_chain@fs:
  1660                           	opt stack 0
  1661  0000BB                     next_dir_entry@clust:
  1662                           	opt stack 0
  1663                           
  1664                           ; 2 bytes @ 0x5B
  1665  0000BB                     	ds	2
  1666  0000BD                     create_chain@cstat:
  1667                           	opt stack 0
  1668  0000BD                     next_dir_entry@idx:
  1669                           	opt stack 0
  1670                           
  1671                           ; 2 bytes @ 0x5D
  1672  0000BD                     	ds	2
  1673  0000BF                     create_chain@scl:
  1674                           	opt stack 0
  1675  0000BF                     trace_path@dj:
  1676                           	opt stack 0
  1677                           
  1678                           ; 2 bytes @ 0x5F
  1679  0000BF                     	ds	2
  1680  0000C1                     create_chain@ncl:
  1681                           	opt stack 0
  1682  0000C1                     trace_path@fn:
  1683                           	opt stack 0
  1684                           
  1685                           ; 2 bytes @ 0x61
  1686  0000C1                     	ds	1
  1687  0000C2                     f_read@res:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x62
  1691  0000C2                     	ds	1
  1692  0000C3                     trace_path@path:
  1693                           	opt stack 0
  1694  0000C3                     reserve_direntry@dj:
  1695                           	opt stack 0
  1696  0000C3                     f_write@fp:
  1697                           	opt stack 0
  1698  0000C3                     f_lseek@fp:
  1699                           	opt stack 0
  1700  0000C3                     f_read@remain:
  1701                           	opt stack 0
  1702                           
  1703                           ; 4 bytes @ 0x63
  1704  0000C3                     	ds	2
  1705  0000C5                     trace_path@dir:
  1706                           	opt stack 0
  1707  0000C5                     reserve_direntry@dir:
  1708                           	opt stack 0
  1709  0000C5                     f_write@buff:
  1710                           	opt stack 0
  1711  0000C5                     f_lseek@ofs:
  1712                           	opt stack 0
  1713                           
  1714                           ; 4 bytes @ 0x65
  1715  0000C5                     	ds	2
  1716  0000C7                     ??_trace_path:
  1717  0000C7                     ??_reserve_direntry:
  1718  0000C7                     f_write@btw:
  1719                           	opt stack 0
  1720  0000C7                     f_read@sect:
  1721                           	opt stack 0
  1722                           
  1723                           ; 4 bytes @ 0x67
  1724  0000C7                     	ds	2
  1725  0000C9                     ??_f_lseek:
  1726  0000C9                     f_write@bw:
  1727                           	opt stack 0
  1728  0000C9                     reserve_direntry@sector:
  1729                           	opt stack 0
  1730                           
  1731                           ; 4 bytes @ 0x69
  1732  0000C9                     	ds	2
  1733  0000CB                     ??_f_write:
  1734  0000CB                     _trace_path$2043:
  1735                           	opt stack 0
  1736  0000CB                     f_read@rbuff:
  1737                           	opt stack 0
  1738                           
  1739                           ; 2 bytes @ 0x6B
  1740  0000CB                     	ds	2
  1741  0000CD                     reserve_direntry@n:
  1742                           	opt stack 0
  1743  0000CD                     _trace_path$2045:
  1744                           	opt stack 0
  1745  0000CD                     f_read@clust:
  1746                           	opt stack 0
  1747                           
  1748                           ; 2 bytes @ 0x6D
  1749  0000CD                     	ds	1
  1750  0000CE                     reserve_direntry@dptr:
  1751                           	opt stack 0
  1752                           
  1753                           ; 2 bytes @ 0x6E
  1754  0000CE                     	ds	1
  1755  0000CF                     trace_path@fs:
  1756                           	opt stack 0
  1757  0000CF                     f_read@cc:
  1758                           	opt stack 0
  1759                           
  1760                           ; 2 bytes @ 0x6F
  1761  0000CF                     	ds	1
  1762  0000D0                     reserve_direntry@c:
  1763                           	opt stack 0
  1764                           
  1765                           ; 1 bytes @ 0x70
  1766  0000D0                     	ds	1
  1767  0000D1                     trace_path@clust:
  1768                           	opt stack 0
  1769  0000D1                     reserve_direntry@clust:
  1770                           	opt stack 0
  1771  0000D1                     f_read@rcnt:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x71
  1775  0000D1                     	ds	2
  1776  0000D3                     trace_path@ds:
  1777                           	opt stack 0
  1778  0000D3                     reserve_direntry@fs:
  1779                           	opt stack 0
  1780                           
  1781                           ; 2 bytes @ 0x73
  1782  0000D3                     	ds	1
  1783  0000D4                     trace_path@dptr:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x74
  1787  0000D4                     	ds	1
  1788  0000D5                     f_lseek@res:
  1789                           	opt stack 0
  1790                           
  1791                           ; 1 bytes @ 0x75
  1792  0000D5                     	ds	1
  1793  0000D6                     f_open@fp:
  1794                           	opt stack 0
  1795  0000D6                     f_lseek@ifptr:
  1796                           	opt stack 0
  1797                           
  1798                           ; 4 bytes @ 0x76
  1799  0000D6                     	ds	1
  1800  0000D7                     f_write@res:
  1801                           	opt stack 0
  1802                           
  1803                           ; 1 bytes @ 0x77
  1804  0000D7                     	ds	1
  1805  0000D8                     f_open@path:
  1806                           	opt stack 0
  1807  0000D8                     f_write@wbuff:
  1808                           	opt stack 0
  1809                           
  1810                           ; 2 bytes @ 0x78
  1811  0000D8                     	ds	2
  1812  0000DA                     f_open@mode:
  1813                           	opt stack 0
  1814  0000DA                     f_write@sect:
  1815                           	opt stack 0
  1816  0000DA                     f_lseek@csize:
  1817                           	opt stack 0
  1818                           
  1819                           ; 4 bytes @ 0x7A
  1820  0000DA                     	ds	1
  1821  0000DB                     ??_f_open:
  1822                           
  1823                           ; 1 bytes @ 0x7B
  1824  0000DB                     	ds	3
  1825  0000DE                     f_write@cc:
  1826                           	opt stack 0
  1827  0000DE                     f_lseek@clust:
  1828                           	opt stack 0
  1829                           
  1830                           ; 2 bytes @ 0x7E
  1831  0000DE                     	ds	1
  1832  0000DF                     ?_leitura_sdcard:
  1833                           	opt stack 0
  1834                           
  1835                           ; 2 bytes @ 0x7F
  1836  0000DF                     	ds	1
  1837  0000E0                     f_write@clust:
  1838                           	opt stack 0
  1839                           
  1840                           ; 2 bytes @ 0x80
  1841  0000E0                     	ds	1
  1842  0000E1                     leitura_sdcard@offset:
  1843                           	opt stack 0
  1844                           
  1845                           ; 2 bytes @ 0x81
  1846  0000E1                     	ds	1
  1847  0000E2                     f_write@wcnt:
  1848                           	opt stack 0
  1849                           
  1850                           ; 2 bytes @ 0x82
  1851  0000E2                     	ds	1
  1852  0000E3                     leitura_sdcard@br:
  1853                           	opt stack 0
  1854                           
  1855                           ; 2 bytes @ 0x83
  1856  0000E3                     	ds	1
  1857  0000E4                     ?_fputc:
  1858                           	opt stack 0
  1859  0000E4                     fputc@chr:
  1860                           	opt stack 0
  1861                           
  1862                           ; 2 bytes @ 0x84
  1863  0000E4                     	ds	2
  1864  0000E6                     fputc@fil:
  1865                           	opt stack 0
  1866                           
  1867                           ; 2 bytes @ 0x86
  1868  0000E6                     	ds	2
  1869  0000E8                     fputc@c:
  1870                           	opt stack 0
  1871                           
  1872                           ; 1 bytes @ 0x88
  1873  0000E8                     	ds	1
  1874  0000E9                     fputc@bw:
  1875                           	opt stack 0
  1876                           
  1877                           ; 2 bytes @ 0x89
  1878  0000E9                     	ds	2
  1879  0000EB                     ?_fputs:
  1880                           	opt stack 0
  1881  0000EB                     fputs@str:
  1882                           	opt stack 0
  1883                           
  1884                           ; 2 bytes @ 0x8B
  1885  0000EB                     	ds	2
  1886  0000ED                     fputs@fil:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x8D
  1890  0000ED                     	ds	2
  1891  0000EF                     ??_fputs:
  1892                           
  1893                           ; 1 bytes @ 0x8F
  1894  0000EF                     	ds	1
  1895  0000F0                     fputs@n:
  1896                           	opt stack 0
  1897                           
  1898                           ; 2 bytes @ 0x90
  1899  0000F0                     	ds	2
  1900  0000F2                     ??_fprintf:
  1901                           
  1902                           ; 1 bytes @ 0x92
  1903  0000F2                     	ds	2
  1904                           tblptru	equ	0xFF8
  1905                           tblptrh	equ	0xFF7
  1906                           tblptrl	equ	0xFF6
  1907                           tablat	equ	0xFF5
  1908                           postinc0	equ	0xFEE
  1909                           wreg	equ	0xFE8
  1910                           postdec1	equ	0xFE5
  1911                           fsr1h	equ	0xFE2
  1912                           fsr1l	equ	0xFE1
  1913                           
  1914                           	psect	cstackCOMRAM
  1915  000001                     __pcstackCOMRAM:
  1916                           	opt stack 0
  1917  000001                     ?_strcmp:
  1918                           	opt stack 0
  1919  000001                     stringcpy@str1:
  1920                           	opt stack 0
  1921  000001                     strcmp@s1:
  1922                           	opt stack 0
  1923  000001                     i2write_timer_zero@timer0:
  1924                           	opt stack 0
  1925                           
  1926                           ; 2 bytes @ 0x0
  1927  000001                     	ds	2
  1928  000003                     stringcpy@str2:
  1929                           	opt stack 0
  1930  000003                     strcmp@s2:
  1931                           	opt stack 0
  1932  000003                     i2write_timer_zero@timer:
  1933                           	opt stack 0
  1934                           
  1935                           ; 2 bytes @ 0x2
  1936  000003                     	ds	2
  1937  000005                     ??_strcmp:
  1938  000005                     stringcpy@dir:
  1939                           	opt stack 0
  1940                           
  1941                           ; 2 bytes @ 0x4
  1942  000005                     	ds	1
  1943  000006                     strcmp@r:
  1944                           	opt stack 0
  1945                           
  1946                           ; 1 bytes @ 0x5
  1947  000006                     	ds	1
  1948  000007                     ??_stringcpy:
  1949                           
  1950                           ; 1 bytes @ 0x6
  1951  000007                     	ds	2
  1952  000009                     stringcpy@chr:
  1953                           	opt stack 0
  1954                           
  1955                           ; 1 bytes @ 0x8
  1956  000009                     	ds	1
  1957  00000A                     GPSRead@buff:
  1958                           	opt stack 0
  1959                           
  1960                           ; 1 bytes @ 0x9
  1961  00000A                     	ds	1
  1962  00000B                     GPSRead@c:
  1963                           	opt stack 0
  1964                           
  1965                           ; 1 bytes @ 0xA
  1966  00000B                     	ds	1
  1967  00000C                     ??_isr:
  1968                           
  1969                           ; 1 bytes @ 0xB
  1970  00000C                     	ds	20
  1971  000020                     isr@cont:
  1972                           	opt stack 0
  1973                           
  1974                           ; 1 bytes @ 0x1F
  1975  000020                     	ds	1
  1976  000021                     ??_memcmp:
  1977  000021                     ??_dummy_clocks:
  1978  000021                     ?_strlen:
  1979                           	opt stack 0
  1980  000021                     response@buff:
  1981                           	opt stack 0
  1982  000021                     escreve_SPI@TempVar:
  1983                           	opt stack 0
  1984  000021                     disk_ioctl@cmd:
  1985                           	opt stack 0
  1986  000021                     sdc_disk_status@stat:
  1987                           	opt stack 0
  1988  000021                     delay@contador_ext:
  1989                           	opt stack 0
  1990  000021                     ___llmod@counter:
  1991                           	opt stack 0
  1992  000021                     ___lwdiv@counter:
  1993                           	opt stack 0
  1994  000021                     ___lwmod@counter:
  1995                           	opt stack 0
  1996  000021                     write_timer_zero@timer0:
  1997                           	opt stack 0
  1998  000021                     configura_baudrate_uart@x:
  1999                           	opt stack 0
  2000  000021                     clust2sect@fs:
  2001                           	opt stack 0
  2002  000021                     f_mount@fs:
  2003                           	opt stack 0
  2004  000021                     ___wmul@product:
  2005                           	opt stack 0
  2006  000021                     memset@p:
  2007                           	opt stack 0
  2008  000021                     strlen@s:
  2009                           	opt stack 0
  2010                           
  2011                           ; 2 bytes @ 0x20
  2012  000021                     	ds	1
  2013  000022                     escreve_SPI@dado:
  2014                           	opt stack 0
  2015  000022                     sdc_disk_status@pdrv:
  2016                           	opt stack 0
  2017  000022                     delay@contador_int:
  2018                           	opt stack 0
  2019  000022                     disk_ioctl@buff:
  2020                           	opt stack 0
  2021  000022                     ___lwdiv@quotient:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0x21
  2025  000022                     	ds	1
  2026  000023                     ??_disk_status:
  2027  000023                     ??_disk_read:
  2028  000023                     ??_disk_write:
  2029  000023                     escreve_cmd_lcd@comando:
  2030                           	opt stack 0
  2031  000023                     endereco_cursor_lcd@endereco:
  2032                           	opt stack 0
  2033  000023                     escreve_caractere_lcd@data:
  2034                           	opt stack 0
  2035  000023                     f_mount@drv:
  2036                           	opt stack 0
  2037                           
  2038                           ; 1 bytes @ 0x22
  2039  000023                     	ds	1
  2040  000024                     tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           postinc0	equ	0xFEE
  2045                           wreg	equ	0xFE8
  2046                           postdec1	equ	0xFE5
  2047                           fsr1h	equ	0xFE2
  2048                           fsr1l	equ	0xFE1
  2049                           
  2050                           ; 1 bytes @ 0x23
  2051 ;;
  2052 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2053 ;;
  2054 ;; *************** function _main *****************
  2055 ;; Defined at:
  2056 ;;		line 206 in file "main.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;		None
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;		None
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2070 ;;      Params:         0       0       0       0       0       0       0       0       0
  2071 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2073 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2074 ;;Total ram usage:        0 bytes
  2075 ;; Hardware stack levels required when called:   18
  2076 ;; This function calls:
  2077 ;;		_dados_gps_to_sd
  2078 ;;		_escalonador
  2079 ;;		_inicializa_tarefas
  2080 ;;		_inicializa_uart
  2081 ;;		_init_hardware
  2082 ;;		_init_lcd
  2083 ;;		_mensagem_inicial
  2084 ;; This function is called by:
  2085 ;;		Startup code after reset
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           	psect	text0
  2090  005A20                     __ptext0:
  2091                           	opt stack 0
  2092  005A20                     _main:
  2093                           	opt stack 13
  2094                           
  2095                           ;main.c: 208: init_hardware();
  2096                           
  2097                           ;incstack = 0
  2098  005A20  ECE3  F02D         	call	_init_hardware	;wreg free
  2099                           
  2100                           ;main.c: 209: T0CONbits.TMR0ON = 0;
  2101  005A24  9ED5               	bcf	4053,7,c	;volatile
  2102                           
  2103                           ;main.c: 210: init_lcd();
  2104  005A26  EC73  F026         	call	_init_lcd	;wreg free
  2105                           
  2106                           ;main.c: 211: mensagem_inicial();
  2107  005A2A  EC6A  F028         	call	_mensagem_inicial	;wreg free
  2108                           
  2109                           ;main.c: 212: inicializa_tarefas();
  2110  005A2E  EC09  F02B         	call	_inicializa_tarefas	;wreg free
  2111                           
  2112                           ;main.c: 213: inicializa_uart();
  2113  005A32  EC94  F02D         	call	_inicializa_uart	;wreg free
  2114                           
  2115                           ;main.c: 214: T0CONbits.TMR0ON = 1;
  2116  005A36  8ED5               	bsf	4053,7,c	;volatile
  2117  005A38                     
  2118                           ;main.c: 216: {
  2119                           ;main.c: 218: if ((sinaliza_int_timer == 1) && (3))
  2120  005A38  0100               	movlb	0	; () banked
  2121  005A3A  05FE               	decf	_sinaliza_int_timer& (0+255),w,b
  2122  005A3C  A4D8               	btfss	status,2,c
  2123  005A3E  D004               	goto	l104
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;main.c: 219: {
  2127                           ;main.c: 220: sinaliza_int_timer = 0;
  2128  005A40  0E00               	movlw	0
  2129  005A42  6FFE               	movwf	_sinaliza_int_timer& (0+255),b
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;main.c: 221: escalonador();
  2133  005A44  EC7E  F025         	call	_escalonador	;wreg free
  2134  005A48                     l104:
  2135                           
  2136                           ;main.c: 222: }
  2137                           ;main.c: 223: dados_gps_to_sd();
  2138  005A48  EC75  F02C         	call	_dados_gps_to_sd	;wreg free
  2139  005A4C  D7F5               	goto	l103
  2140  005A4E                     __end_of_main:
  2141                           	opt stack 0
  2142                           tblptru	equ	0xFF8
  2143                           tblptrh	equ	0xFF7
  2144                           tblptrl	equ	0xFF6
  2145                           tablat	equ	0xFF5
  2146                           postinc0	equ	0xFEE
  2147                           wreg	equ	0xFE8
  2148                           postdec1	equ	0xFE5
  2149                           fsr1h	equ	0xFE2
  2150                           fsr1l	equ	0xFE1
  2151                           status	equ	0xFD8
  2152                           
  2153 ;; *************** function _mensagem_inicial *****************
  2154 ;; Defined at:
  2155 ;;		line 233 in file "main.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;		None
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;  msg_dois       17   22[BANK0 ] const unsigned char [17]
  2160 ;;  msg_linha_um   17    5[BANK0 ] const unsigned char [17]
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  1    wreg      void 
  2163 ;; Registers used:
  2164 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2170 ;;      Params:         0       0       0       0       0       0       0       0       0
  2171 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2172 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2173 ;;      Totals:         0      36       0       0       0       0       0       0       0
  2174 ;;Total ram usage:       36 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; Hardware stack levels required when called:    6
  2177 ;; This function calls:
  2178 ;;		_escreve_cmd_lcd
  2179 ;;		_escreve_frase_ram_lcd
  2180 ;;		_posicao_cursor_lcd
  2181 ;; This function is called by:
  2182 ;;		_main
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           	psect	text1
  2187  0050D4                     __ptext1:
  2188                           	opt stack 0
  2189  0050D4                     _mensagem_inicial:
  2190                           	opt stack 24
  2191                           
  2192                           ;main.c: 235: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  2193                           
  2194                           ;incstack = 0
  2195  0050D4  0E12               	movlw	low mensagem_inicial@F4346
  2196  0050D6  6EF6               	movwf	tblptrl,c
  2197  0050D8                     	if	1	;There is more than 1 active tblptr byte
  2198  0050D8  0E08               	movlw	high mensagem_inicial@F4346
  2199  0050DA  6EF7               	movwf	tblptrh,c
  2200  0050DC                     	endif
  2201  0050DC                     	if	0	;There are less than 3 active tblptr bytes
  2202  0050DC                     	endif
  2203  0050DC  EE20  F065         	lfsr	2,mensagem_inicial@msg_linha_um
  2204  0050E0  0E10               	movlw	16
  2205  0050E2                     u14360:
  2206  0050E2  0009               	tblrd		*+
  2207  0050E4  CFF5 FFDE          	movff	tablat,postinc2
  2208  0050E8  06E8               	decf	wreg,f,c
  2209  0050EA  E2FB               	bc	u14360
  2210                           
  2211                           ;main.c: 236: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  2212  0050EC  0E01               	movlw	low mensagem_inicial@F4348
  2213  0050EE  6EF6               	movwf	tblptrl,c
  2214  0050F0                     	if	1	;There is more than 1 active tblptr byte
  2215  0050F0  0E08               	movlw	high mensagem_inicial@F4348
  2216  0050F2  6EF7               	movwf	tblptrh,c
  2217  0050F4                     	endif
  2218  0050F4                     	if	0	;There are less than 3 active tblptr bytes
  2219  0050F4                     	endif
  2220  0050F4  EE20  F076         	lfsr	2,mensagem_inicial@msg_dois
  2221  0050F8  0E10               	movlw	16
  2222  0050FA                     u14370:
  2223  0050FA  0009               	tblrd		*+
  2224  0050FC  CFF5 FFDE          	movff	tablat,postinc2
  2225  005100  06E8               	decf	wreg,f,c
  2226  005102  E2FB               	bc	u14370
  2227                           
  2228                           ;main.c: 238: posicao_cursor_lcd(1,0);
  2229  005104  0E00               	movlw	0
  2230  005106  0100               	movlb	0	; () banked
  2231  005108  6F60               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2232  00510A  0E01               	movlw	1
  2233  00510C  ECEF  F028         	call	_posicao_cursor_lcd
  2234                           
  2235                           ;main.c: 239: escreve_frase_ram_lcd(msg_linha_um);
  2236  005110  0E65               	movlw	low mensagem_inicial@msg_linha_um
  2237  005112  0100               	movlb	0	; () banked
  2238  005114  6F60               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2239  005116  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2240  005118  6F61               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2241  00511A  ECDF  F02A         	call	_escreve_frase_ram_lcd	;wreg free
  2242                           
  2243                           ;main.c: 241: posicao_cursor_lcd(2,0);
  2244  00511E  0E00               	movlw	0
  2245  005120  0100               	movlb	0	; () banked
  2246  005122  6F60               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2247  005124  0E02               	movlw	2
  2248  005126  ECEF  F028         	call	_posicao_cursor_lcd
  2249                           
  2250                           ;main.c: 242: escreve_frase_ram_lcd(msg_dois);
  2251  00512A  0E76               	movlw	low mensagem_inicial@msg_dois
  2252  00512C  0100               	movlb	0	; () banked
  2253  00512E  6F60               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2254  005130  0E00               	movlw	high mensagem_inicial@msg_dois
  2255  005132  6F61               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2256  005134  ECDF  F02A         	call	_escreve_frase_ram_lcd	;wreg free
  2257                           
  2258                           ;main.c: 243: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2259  005138  0E3D               	movlw	61
  2260  00513A  0100               	movlb	0	; () banked
  2261  00513C  6F64               	movwf	(??_mensagem_inicial+1)& (0+255),b
  2262  00513E  0EE1               	movlw	225
  2263  005140  6F63               	movwf	??_mensagem_inicial& (0+255),b
  2264  005142  0E3F               	movlw	63
  2265  005144                     u14787:
  2266  005144  2EE8               	decfsz	wreg,f,c
  2267  005146  D7FE               	bra	u14787
  2268  005148  2F63               	decfsz	??_mensagem_inicial& (0+255),f,b
  2269  00514A  D7FC               	bra	u14787
  2270  00514C  2F64               	decfsz	(??_mensagem_inicial+1)& (0+255),f,b
  2271  00514E  D7FA               	bra	u14787
  2272  005150  D000               	nop2	
  2273                           
  2274                           ;main.c: 244: escreve_cmd_lcd(0b00000001);
  2275  005152  0E01               	movlw	1
  2276  005154  EC9B  F027         	call	_escreve_cmd_lcd
  2277  005158  0012               	return		;funcret
  2278  00515A                     __end_of_mensagem_inicial:
  2279                           	opt stack 0
  2280                           tblptru	equ	0xFF8
  2281                           tblptrh	equ	0xFF7
  2282                           tblptrl	equ	0xFF6
  2283                           tablat	equ	0xFF5
  2284                           postinc0	equ	0xFEE
  2285                           wreg	equ	0xFE8
  2286                           postdec1	equ	0xFE5
  2287                           fsr1h	equ	0xFE2
  2288                           fsr1l	equ	0xFE1
  2289                           postinc2	equ	0xFDE
  2290                           status	equ	0xFD8
  2291                           
  2292 ;; *************** function _init_lcd *****************
  2293 ;; Defined at:
  2294 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;		None
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;		None
  2299 ;; Return value:  Size  Location     Type
  2300 ;;                  1    wreg      void 
  2301 ;; Registers used:
  2302 ;;		wreg, status,2, status,0, cstack
  2303 ;; Tracked objects:
  2304 ;;		On entry : 0/0
  2305 ;;		On exit  : 0/0
  2306 ;;		Unchanged: 0/0
  2307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2308 ;;      Params:         0       0       0       0       0       0       0       0       0
  2309 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2310 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2311 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2312 ;;Total ram usage:        1 bytes
  2313 ;; Hardware stack levels used:    1
  2314 ;; Hardware stack levels required when called:    5
  2315 ;; This function calls:
  2316 ;;		_delay
  2317 ;;		_escreve_cmd_lcd
  2318 ;; This function is called by:
  2319 ;;		_main
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text2
  2324  004CE6                     __ptext2:
  2325                           	opt stack 0
  2326  004CE6                     _init_lcd:
  2327                           	opt stack 25
  2328                           
  2329                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2330                           
  2331                           ;incstack = 0
  2332  004CE6  9495               	bcf	3989,2,c	;volatile
  2333                           
  2334                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2335  004CE8  9295               	bcf	3989,1,c	;volatile
  2336                           
  2337                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2338  004CEA  9095               	bcf	3989,0,c	;volatile
  2339                           
  2340                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2341  004CEC  9895               	bcf	3989,4,c	;volatile
  2342                           
  2343                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2344  004CEE  9A95               	bcf	3989,5,c	;volatile
  2345                           
  2346                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2347  004CF0  9C95               	bcf	3989,6,c	;volatile
  2348                           
  2349                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2350  004CF2  9E95               	bcf	3989,7,c	;volatile
  2351                           
  2352                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2353  004CF4  9483               	bcf	3971,2,c	;volatile
  2354                           
  2355                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2356  004CF6  9283               	bcf	3971,1,c	;volatile
  2357                           
  2358                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2359  004CF8  9083               	bcf	3971,0,c	;volatile
  2360                           
  2361                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2362  004CFA  9E83               	bcf	3971,7,c	;volatile
  2363                           
  2364                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2365  004CFC  9C83               	bcf	3971,6,c	;volatile
  2366                           
  2367                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2368  004CFE  8A83               	bsf	3971,5,c	;volatile
  2369                           
  2370                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2371  004D00  8883               	bsf	3971,4,c	;volatile
  2372                           
  2373                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2374  004D02  0EEA               	movlw	234
  2375  004D04  0100               	movlb	0	; () banked
  2376  004D06  6F60               	movwf	??_init_lcd& (0+255),b
  2377  004D08  0EC3               	movlw	195
  2378  004D0A                     u14797:
  2379  004D0A  2EE8               	decfsz	wreg,f,c
  2380  004D0C  D7FE               	bra	u14797
  2381  004D0E  2F60               	decfsz	??_init_lcd& (0+255),f,b
  2382  004D10  D7FC               	bra	u14797
  2383                           
  2384                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2385  004D12  8083               	bsf	3971,0,c	;volatile
  2386                           
  2387                           ;display_lcd.c: 108: delay();
  2388  004D14  ECA6  F02D         	call	_delay	;wreg free
  2389                           
  2390                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2391  004D18  9083               	bcf	3971,0,c	;volatile
  2392                           
  2393                           ;display_lcd.c: 110: delay();
  2394  004D1A  ECA6  F02D         	call	_delay	;wreg free
  2395                           
  2396                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2397  004D1E  0E4E               	movlw	78
  2398  004D20  0100               	movlb	0	; () banked
  2399  004D22  6F60               	movwf	??_init_lcd& (0+255),b
  2400  004D24  0EEB               	movlw	235
  2401  004D26                     u14807:
  2402  004D26  2EE8               	decfsz	wreg,f,c
  2403  004D28  D7FE               	bra	u14807
  2404  004D2A  2F60               	decfsz	??_init_lcd& (0+255),f,b
  2405  004D2C  D7FC               	bra	u14807
  2406                           
  2407                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2408  004D2E  8083               	bsf	3971,0,c	;volatile
  2409                           
  2410                           ;display_lcd.c: 119: delay();
  2411  004D30  ECA6  F02D         	call	_delay	;wreg free
  2412                           
  2413                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2414  004D34  9083               	bcf	3971,0,c	;volatile
  2415                           
  2416                           ;display_lcd.c: 121: delay();
  2417  004D36  ECA6  F02D         	call	_delay	;wreg free
  2418                           
  2419                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2420  004D3A  0E4E               	movlw	78
  2421  004D3C  0100               	movlb	0	; () banked
  2422  004D3E  6F60               	movwf	??_init_lcd& (0+255),b
  2423  004D40  0EEB               	movlw	235
  2424  004D42                     u14817:
  2425  004D42  2EE8               	decfsz	wreg,f,c
  2426  004D44  D7FE               	bra	u14817
  2427  004D46  2F60               	decfsz	??_init_lcd& (0+255),f,b
  2428  004D48  D7FC               	bra	u14817
  2429                           
  2430                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2431  004D4A  8083               	bsf	3971,0,c	;volatile
  2432                           
  2433                           ;display_lcd.c: 130: delay();
  2434  004D4C  ECA6  F02D         	call	_delay	;wreg free
  2435                           
  2436                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2437  004D50  9083               	bcf	3971,0,c	;volatile
  2438                           
  2439                           ;display_lcd.c: 132: delay();
  2440  004D52  ECA6  F02D         	call	_delay	;wreg free
  2441                           
  2442                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2443  004D56  9E83               	bcf	3971,7,c	;volatile
  2444                           
  2445                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2446  004D58  9C83               	bcf	3971,6,c	;volatile
  2447                           
  2448                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2449  004D5A  8A83               	bsf	3971,5,c	;volatile
  2450                           
  2451                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2452  004D5C  9883               	bcf	3971,4,c	;volatile
  2453                           
  2454                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2455  004D5E  8083               	bsf	3971,0,c	;volatile
  2456                           
  2457                           ;display_lcd.c: 143: delay();
  2458  004D60  ECA6  F02D         	call	_delay	;wreg free
  2459                           
  2460                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2461  004D64  9083               	bcf	3971,0,c	;volatile
  2462                           
  2463                           ;display_lcd.c: 145: delay();
  2464  004D66  ECA6  F02D         	call	_delay	;wreg free
  2465                           
  2466                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2467  004D6A  0E28               	movlw	40
  2468  004D6C  EC9B  F027         	call	_escreve_cmd_lcd
  2469                           
  2470                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2471  004D70  0E06               	movlw	6
  2472  004D72  EC9B  F027         	call	_escreve_cmd_lcd
  2473                           
  2474                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2475  004D76  0E0E               	movlw	14
  2476  004D78  EC9B  F027         	call	_escreve_cmd_lcd
  2477                           
  2478                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2479  004D7C  0E01               	movlw	1
  2480  004D7E  EC9B  F027         	call	_escreve_cmd_lcd
  2481  004D82  0012               	return		;funcret
  2482  004D84                     __end_of_init_lcd:
  2483                           	opt stack 0
  2484                           tblptru	equ	0xFF8
  2485                           tblptrh	equ	0xFF7
  2486                           tblptrl	equ	0xFF6
  2487                           tablat	equ	0xFF5
  2488                           postinc0	equ	0xFEE
  2489                           wreg	equ	0xFE8
  2490                           postdec1	equ	0xFE5
  2491                           fsr1h	equ	0xFE2
  2492                           fsr1l	equ	0xFE1
  2493                           postinc2	equ	0xFDE
  2494                           status	equ	0xFD8
  2495                           
  2496 ;; *************** function _init_hardware *****************
  2497 ;; Defined at:
  2498 ;;		line 55 in file "bibliotecas/hardware.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;		None
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;		None
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  1    wreg      void 
  2505 ;; Registers used:
  2506 ;;		wreg, status,2, cstack
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2512 ;;      Params:         0       0       0       0       0       0       0       0       0
  2513 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2514 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2515 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2516 ;;Total ram usage:        0 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    5
  2519 ;; This function calls:
  2520 ;;		_config_timer_dois
  2521 ;;		_config_timer_zero
  2522 ;;		_init_interrupt
  2523 ;;		_init_oscilador
  2524 ;;		_init_ports
  2525 ;; This function is called by:
  2526 ;;		_main
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text3
  2531  005BC6                     __ptext3:
  2532                           	opt stack 0
  2533  005BC6                     _init_hardware:
  2534                           	opt stack 25
  2535                           
  2536                           ;hardware.c: 58: init_oscilador();
  2537                           
  2538                           ;incstack = 0
  2539  005BC6  EC4B  F02E         	call	_init_oscilador	;wreg free
  2540                           
  2541                           ;hardware.c: 61: init_ports();
  2542  005BCA  ECC8  F02D         	call	_init_ports	;wreg free
  2543                           
  2544                           ;hardware.c: 64: config_timer_zero();
  2545  005BCE  ECD6  F02D         	call	_config_timer_zero	;wreg free
  2546                           
  2547                           ;hardware.c: 67: config_timer_dois();
  2548  005BD2  EC25  F02E         	call	_config_timer_dois	;wreg free
  2549                           
  2550                           ;hardware.c: 70: init_interrupt();
  2551  005BD6  ECF8  F02D         	call	_init_interrupt	;wreg free
  2552  005BDA  0012               	return		;funcret
  2553  005BDC                     __end_of_init_hardware:
  2554                           	opt stack 0
  2555                           tblptru	equ	0xFF8
  2556                           tblptrh	equ	0xFF7
  2557                           tblptrl	equ	0xFF6
  2558                           tablat	equ	0xFF5
  2559                           postinc0	equ	0xFEE
  2560                           wreg	equ	0xFE8
  2561                           postdec1	equ	0xFE5
  2562                           fsr1h	equ	0xFE2
  2563                           fsr1l	equ	0xFE1
  2564                           postinc2	equ	0xFDE
  2565                           status	equ	0xFD8
  2566                           
  2567 ;; *************** function _init_ports *****************
  2568 ;; Defined at:
  2569 ;;		line 154 in file "bibliotecas/hardware.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;		None
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;		None
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      void 
  2576 ;; Registers used:
  2577 ;;		wreg, status,2
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2583 ;;      Params:         0       0       0       0       0       0       0       0       0
  2584 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2585 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2586 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2587 ;;Total ram usage:        0 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    3
  2590 ;; This function calls:
  2591 ;;		Nothing
  2592 ;; This function is called by:
  2593 ;;		_init_hardware
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text4
  2598  005B90                     __ptext4:
  2599                           	opt stack 0
  2600  005B90                     _init_ports:
  2601                           	opt stack 26
  2602                           
  2603                           ;hardware.c: 156: ADCON1 = 0X0F;
  2604                           
  2605                           ;incstack = 0
  2606  005B90  0E0F               	movlw	15
  2607  005B92  6EC1               	movwf	4033,c	;volatile
  2608                           
  2609                           ;hardware.c: 157: TRISB = 0b00100001;
  2610  005B94  0E21               	movlw	33
  2611  005B96  6E93               	movwf	3987,c	;volatile
  2612                           
  2613                           ;hardware.c: 158: LATB = 0xFF;
  2614  005B98  688A               	setf	3978,c	;volatile
  2615                           
  2616                           ;hardware.c: 159: TRISD = 0x00;
  2617  005B9A  0E00               	movlw	0
  2618  005B9C  6E95               	movwf	3989,c	;volatile
  2619                           
  2620                           ;hardware.c: 160: TRISA = 0b00000111;
  2621  005B9E  0E07               	movlw	7
  2622  005BA0  6E92               	movwf	3986,c	;volatile
  2623                           
  2624                           ;hardware.c: 161: TRISC = 0x01111111;
  2625  005BA2  0E11               	movlw	17
  2626  005BA4  6E94               	movwf	3988,c	;volatile
  2627                           
  2628                           ;hardware.c: 162: TRISE = 0b00000011;
  2629  005BA6  0E03               	movlw	3
  2630  005BA8  6E96               	movwf	3990,c	;volatile
  2631  005BAA  0012               	return		;funcret
  2632  005BAC                     __end_of_init_ports:
  2633                           	opt stack 0
  2634                           tblptru	equ	0xFF8
  2635                           tblptrh	equ	0xFF7
  2636                           tblptrl	equ	0xFF6
  2637                           tablat	equ	0xFF5
  2638                           postinc0	equ	0xFEE
  2639                           wreg	equ	0xFE8
  2640                           postdec1	equ	0xFE5
  2641                           fsr1h	equ	0xFE2
  2642                           fsr1l	equ	0xFE1
  2643                           postinc2	equ	0xFDE
  2644                           status	equ	0xFD8
  2645                           
  2646 ;; *************** function _init_oscilador *****************
  2647 ;; Defined at:
  2648 ;;		line 172 in file "bibliotecas/hardware.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;		None
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;		None
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  1    wreg      void 
  2655 ;; Registers used:
  2656 ;;		None
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2662 ;;      Params:         0       0       0       0       0       0       0       0       0
  2663 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2664 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2665 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2666 ;;Total ram usage:        0 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    3
  2669 ;; This function calls:
  2670 ;;		Nothing
  2671 ;; This function is called by:
  2672 ;;		_init_hardware
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676                           	psect	text5
  2677  005C96                     __ptext5:
  2678                           	opt stack 0
  2679  005C96                     _init_oscilador:
  2680                           	opt stack 26
  2681                           
  2682                           ;hardware.c: 175: OSCCONbits.IRCF0 = 1;
  2683                           
  2684                           ;incstack = 0
  2685  005C96  88D3               	bsf	4051,4,c	;volatile
  2686                           
  2687                           ;hardware.c: 176: OSCCONbits.IRCF1 = 1;
  2688  005C98  8AD3               	bsf	4051,5,c	;volatile
  2689                           
  2690                           ;hardware.c: 177: OSCCONbits.IRCF2 = 1;
  2691  005C9A  8CD3               	bsf	4051,6,c	;volatile
  2692  005C9C  0012               	return		;funcret
  2693  005C9E                     __end_of_init_oscilador:
  2694                           	opt stack 0
  2695                           tblptru	equ	0xFF8
  2696                           tblptrh	equ	0xFF7
  2697                           tblptrl	equ	0xFF6
  2698                           tablat	equ	0xFF5
  2699                           postinc0	equ	0xFEE
  2700                           wreg	equ	0xFE8
  2701                           postdec1	equ	0xFE5
  2702                           fsr1h	equ	0xFE2
  2703                           fsr1l	equ	0xFE1
  2704                           postinc2	equ	0xFDE
  2705                           status	equ	0xFD8
  2706                           
  2707 ;; *************** function _init_interrupt *****************
  2708 ;; Defined at:
  2709 ;;		line 98 in file "bibliotecas/hardware.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;		None
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;		None
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  1    wreg      void 
  2716 ;; Registers used:
  2717 ;;		wreg, status,2
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2723 ;;      Params:         0       0       0       0       0       0       0       0       0
  2724 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2725 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2726 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2727 ;;Total ram usage:        0 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; Hardware stack levels required when called:    3
  2730 ;; This function calls:
  2731 ;;		Nothing
  2732 ;; This function is called by:
  2733 ;;		_init_hardware
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           	psect	text6
  2738  005BF0                     __ptext6:
  2739                           	opt stack 0
  2740  005BF0                     _init_interrupt:
  2741                           	opt stack 26
  2742                           
  2743                           ;hardware.c: 100: INTCON = 0b10110000;
  2744                           
  2745                           ;incstack = 0
  2746  005BF0  0EB0               	movlw	176
  2747  005BF2  6EF2               	movwf	intcon,c	;volatile
  2748                           
  2749                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2750  005BF4  0E00               	movlw	0
  2751  005BF6  6EF1               	movwf	intcon2,c	;volatile
  2752                           
  2753                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2754  005BF8  0E00               	movlw	0
  2755  005BFA  6EF0               	movwf	intcon3,c	;volatile
  2756                           
  2757                           ;hardware.c: 104: PIE1 = 0b00101000;
  2758  005BFC  0E28               	movlw	40
  2759  005BFE  6E9D               	movwf	3997,c	;volatile
  2760  005C00  0012               	return		;funcret
  2761  005C02                     __end_of_init_interrupt:
  2762                           	opt stack 0
  2763                           tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           tblptrl	equ	0xFF6
  2766                           tablat	equ	0xFF5
  2767                           intcon	equ	0xFF2
  2768                           intcon2	equ	0xFF1
  2769                           intcon3	equ	0xFF0
  2770                           postinc0	equ	0xFEE
  2771                           wreg	equ	0xFE8
  2772                           postdec1	equ	0xFE5
  2773                           fsr1h	equ	0xFE2
  2774                           fsr1l	equ	0xFE1
  2775                           postinc2	equ	0xFDE
  2776                           status	equ	0xFD8
  2777                           
  2778 ;; *************** function _config_timer_zero *****************
  2779 ;; Defined at:
  2780 ;;		line 83 in file "bibliotecas/hardware.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;		None
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;		None
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  1    wreg      void 
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2794 ;;      Params:         0       0       0       0       0       0       0       0       0
  2795 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2797 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2798 ;;Total ram usage:        0 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    4
  2801 ;; This function calls:
  2802 ;;		_write_timer_zero
  2803 ;; This function is called by:
  2804 ;;		_init_hardware
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text7
  2809  005BAC                     __ptext7:
  2810                           	opt stack 0
  2811  005BAC                     _config_timer_zero:
  2812                           	opt stack 25
  2813                           
  2814                           ;hardware.c: 85: T0CON = 0b11000011;
  2815                           
  2816                           ;incstack = 0
  2817  005BAC  0EC3               	movlw	195
  2818  005BAE  6ED5               	movwf	4053,c	;volatile
  2819                           
  2820                           ;hardware.c: 86: SPPCON = 0b00000000;
  2821  005BB0  0E00               	movlw	0
  2822  005BB2  6E65               	movwf	3941,c	;volatile
  2823                           
  2824                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2825  005BB4  0E00               	movlw	0
  2826  005BB6  6E63               	movwf	3939,c	;volatile
  2827                           
  2828                           ;hardware.c: 88: write_timer_zero(0x0083);
  2829  005BB8  0E00               	movlw	0
  2830  005BBA  6E22               	movwf	write_timer_zero@timer0+1,c
  2831  005BBC  0E83               	movlw	131
  2832  005BBE  6E21               	movwf	write_timer_zero@timer0,c
  2833  005BC0  EC01  F02E         	call	_write_timer_zero	;wreg free
  2834  005BC4  0012               	return		;funcret
  2835  005BC6                     __end_of_config_timer_zero:
  2836                           	opt stack 0
  2837                           tblptru	equ	0xFF8
  2838                           tblptrh	equ	0xFF7
  2839                           tblptrl	equ	0xFF6
  2840                           tablat	equ	0xFF5
  2841                           intcon	equ	0xFF2
  2842                           intcon2	equ	0xFF1
  2843                           intcon3	equ	0xFF0
  2844                           postinc0	equ	0xFEE
  2845                           wreg	equ	0xFE8
  2846                           postdec1	equ	0xFE5
  2847                           fsr1h	equ	0xFE2
  2848                           fsr1l	equ	0xFE1
  2849                           postinc2	equ	0xFDE
  2850                           status	equ	0xFD8
  2851                           
  2852 ;; *************** function _write_timer_zero *****************
  2853 ;; Defined at:
  2854 ;;		line 138 in file "bibliotecas/hardware.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;  timer0          2   32[COMRAM] unsigned int 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  timer           2    0[BANK0 ] struct Timers
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      void 
  2861 ;; Registers used:
  2862 ;;		None
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2868 ;;      Params:         2       0       0       0       0       0       0       0       0
  2869 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2870 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2871 ;;      Totals:         2       2       0       0       0       0       0       0       0
  2872 ;;Total ram usage:        4 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; Hardware stack levels required when called:    3
  2875 ;; This function calls:
  2876 ;;		Nothing
  2877 ;; This function is called by:
  2878 ;;		_config_timer_zero
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text8
  2883  005C02                     __ptext8:
  2884                           	opt stack 0
  2885  005C02                     _write_timer_zero:
  2886                           	opt stack 25
  2887                           
  2888                           ;hardware.c: 140: union Timers timer;
  2889                           ;hardware.c: 142: timer.lt = timer0;
  2890                           
  2891                           ;incstack = 0
  2892  005C02  C021  F060         	movff	write_timer_zero@timer0,write_timer_zero@timer
  2893  005C06  C022  F061         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  2894                           
  2895                           ;hardware.c: 144: TMR0H = timer.bt[1];
  2896  005C0A  C061  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  2897                           
  2898                           ;hardware.c: 145: TMR0L = timer.bt[0];
  2899  005C0E  C060  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  2900  005C12  0012               	return		;funcret
  2901  005C14                     __end_of_write_timer_zero:
  2902                           	opt stack 0
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           intcon	equ	0xFF2
  2908                           intcon2	equ	0xFF1
  2909                           intcon3	equ	0xFF0
  2910                           postinc0	equ	0xFEE
  2911                           wreg	equ	0xFE8
  2912                           postdec1	equ	0xFE5
  2913                           fsr1h	equ	0xFE2
  2914                           fsr1l	equ	0xFE1
  2915                           postinc2	equ	0xFDE
  2916                           status	equ	0xFD8
  2917                           
  2918 ;; *************** function _config_timer_dois *****************
  2919 ;; Defined at:
  2920 ;;		line 201 in file "bibliotecas/hardware.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;		None
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;		None
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  1    wreg      void 
  2927 ;; Registers used:
  2928 ;;		wreg, status,2
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2934 ;;      Params:         0       0       0       0       0       0       0       0       0
  2935 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2936 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2937 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2938 ;;Total ram usage:        0 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    3
  2941 ;; This function calls:
  2942 ;;		Nothing
  2943 ;; This function is called by:
  2944 ;;		_init_hardware
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           	psect	text9
  2949  005C4A                     __ptext9:
  2950                           	opt stack 0
  2951  005C4A                     _config_timer_dois:
  2952                           	opt stack 26
  2953                           
  2954                           ;hardware.c: 203: T2CON = 0b00000100;
  2955                           
  2956                           ;incstack = 0
  2957  005C4A  0E04               	movlw	4
  2958  005C4C  6ECA               	movwf	4042,c	;volatile
  2959                           
  2960                           ;hardware.c: 204: TMR2 = 0;
  2961  005C4E  0E00               	movlw	0
  2962  005C50  6ECC               	movwf	4044,c	;volatile
  2963                           
  2964                           ;hardware.c: 205: PR2 = 0x01;
  2965  005C52  0E01               	movlw	1
  2966  005C54  6ECB               	movwf	4043,c	;volatile
  2967  005C56  0012               	return		;funcret
  2968  005C58                     __end_of_config_timer_dois:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           intcon	equ	0xFF2
  2975                           intcon2	equ	0xFF1
  2976                           intcon3	equ	0xFF0
  2977                           postinc0	equ	0xFEE
  2978                           wreg	equ	0xFE8
  2979                           postdec1	equ	0xFE5
  2980                           fsr1h	equ	0xFE2
  2981                           fsr1l	equ	0xFE1
  2982                           postinc2	equ	0xFDE
  2983                           status	equ	0xFD8
  2984                           
  2985 ;; *************** function _inicializa_tarefas *****************
  2986 ;; Defined at:
  2987 ;;		line 153 in file "main.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;		None
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;		None
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, status,2, status,0
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3001 ;;      Params:         0       0       0       0       0       0       0       0       0
  3002 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3003 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3004 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3005 ;;Total ram usage:        0 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; Hardware stack levels required when called:    3
  3008 ;; This function calls:
  3009 ;;		Nothing
  3010 ;; This function is called by:
  3011 ;;		_main
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           	psect	text10
  3016  005612                     __ptext10:
  3017                           	opt stack 0
  3018  005612                     _inicializa_tarefas:
  3019                           	opt stack 27
  3020                           
  3021                           ;main.c: 156: p_tarefas[0] = verifica_dados_operacionais;
  3022                           
  3023                           ;incstack = 0
  3024  005612  0EA8               	movlw	low _verifica_dados_operacionais
  3025  005614  0100               	movlb	0	; () banked
  3026  005616  6FF4               	movwf	_p_tarefas& (0+255),b
  3027  005618  0E5C               	movlw	high _verifica_dados_operacionais
  3028  00561A  6FF5               	movwf	(_p_tarefas+1)& (0+255),b
  3029                           
  3030                           ;main.c: 157: p_tarefas[1] = incrementa_metros;
  3031  00561C  0EA6               	movlw	low _incrementa_metros
  3032  00561E  6FF6               	movwf	(_p_tarefas+2)& (0+255),b
  3033  005620  0E5C               	movlw	high _incrementa_metros
  3034  005622  6FF7               	movwf	(_p_tarefas+3)& (0+255),b
  3035                           
  3036                           ;main.c: 158: p_tarefas[2] = verifica_fence_externo;
  3037  005624  0E10               	movlw	low _verifica_fence_externo
  3038  005626  6FF8               	movwf	(_p_tarefas+4)& (0+255),b
  3039  005628  0E1D               	movlw	high _verifica_fence_externo
  3040  00562A  6FF9               	movwf	(_p_tarefas+5)& (0+255),b
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;main.c: 163: tempo_backup[0] = 5000;
  3044  00562C  0E13               	movlw	19
  3045  00562E  0101               	movlb	1	; () banked
  3046  005630  6F01               	movwf	(_tempo_backup+1)& (0+255),b
  3047  005632  0E88               	movlw	136
  3048  005634  6F00               	movwf	_tempo_backup& (0+255),b
  3049                           
  3050                           ; BSR set to: 1
  3051                           ;main.c: 164: tempo_backup[1] = 1000;
  3052  005636  0E03               	movlw	3
  3053  005638  6F03               	movwf	(_tempo_backup+3)& (0+255),b
  3054  00563A  0EE8               	movlw	232
  3055  00563C  6F02               	movwf	(_tempo_backup+2)& (0+255),b
  3056                           
  3057                           ; BSR set to: 1
  3058                           ;main.c: 165: tempo_backup[2] = 10000;
  3059  00563E  0E27               	movlw	39
  3060  005640  6F05               	movwf	(_tempo_backup+5)& (0+255),b
  3061  005642  0E10               	movlw	16
  3062  005644  6F04               	movwf	(_tempo_backup+4)& (0+255),b
  3063                           
  3064                           ; BSR set to: 1
  3065                           ;main.c: 169: tempo_tarefa[0] = 5000;
  3066  005646  0E13               	movlw	19
  3067  005648  6E25               	movwf	_tempo_tarefa+1,c
  3068  00564A  0E88               	movlw	136
  3069  00564C  6E24               	movwf	_tempo_tarefa,c
  3070                           
  3071                           ; BSR set to: 1
  3072                           ;main.c: 170: tempo_tarefa[1] = 1000;
  3073  00564E  0E03               	movlw	3
  3074  005650  6E27               	movwf	_tempo_tarefa+3,c
  3075  005652  0EE8               	movlw	232
  3076  005654  6E26               	movwf	_tempo_tarefa+2,c
  3077                           
  3078                           ; BSR set to: 1
  3079                           ;main.c: 171: tempo_tarefa[2] = 10000;
  3080  005656  0E27               	movlw	39
  3081  005658  6E29               	movwf	_tempo_tarefa+5,c
  3082  00565A  0E10               	movlw	16
  3083  00565C  6E28               	movwf	_tempo_tarefa+4,c
  3084                           
  3085                           ; BSR set to: 1
  3086                           ;main.c: 174: tarefa_em_execucao = 0;
  3087  00565E  0E00               	movlw	0
  3088  005660  6E3A               	movwf	_tarefa_em_execucao,c	;volatile
  3089                           
  3090                           ; BSR set to: 1
  3091  005662  0012               	return		;funcret
  3092  005664                     __end_of_inicializa_tarefas:
  3093                           	opt stack 0
  3094                           tblptru	equ	0xFF8
  3095                           tblptrh	equ	0xFF7
  3096                           tblptrl	equ	0xFF6
  3097                           tablat	equ	0xFF5
  3098                           intcon	equ	0xFF2
  3099                           intcon2	equ	0xFF1
  3100                           intcon3	equ	0xFF0
  3101                           postinc0	equ	0xFEE
  3102                           wreg	equ	0xFE8
  3103                           postdec1	equ	0xFE5
  3104                           fsr1h	equ	0xFE2
  3105                           fsr1l	equ	0xFE1
  3106                           postinc2	equ	0xFDE
  3107                           status	equ	0xFD8
  3108                           
  3109 ;; *************** function _escalonador *****************
  3110 ;; Defined at:
  3111 ;;		line 185 in file "main.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;		None
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  cont            1   54[BANK1 ] unsigned char 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3125 ;;      Params:         0       0       0       0       0       0       0       0       0
  3126 ;;      Locals:         0       0       1       0       0       0       0       0       0
  3127 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3128 ;;      Totals:         0       0       3       0       0       0       0       0       0
  3129 ;;Total ram usage:        3 bytes
  3130 ;; Hardware stack levels used:    1
  3131 ;; Hardware stack levels required when called:   17
  3132 ;; This function calls:
  3133 ;;		_incrementa_metros
  3134 ;;		_verifica_dados_operacionais
  3135 ;;		_verifica_fence_externo
  3136 ;; This function is called by:
  3137 ;;		_main
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text11
  3142  004AFC                     __ptext11:
  3143                           	opt stack 0
  3144  004AFC                     _escalonador:
  3145                           	opt stack 13
  3146                           
  3147                           ;main.c: 187: unsigned char cont;
  3148                           ;main.c: 188: for(cont = 0; cont<3;cont++)
  3149                           
  3150                           ; BSR set to: 1
  3151                           ;incstack = 0
  3152  004AFC  0E00               	movlw	0
  3153  004AFE  0101               	movlb	1	; () banked
  3154  004B00  6F84               	movwf	escalonador@cont& (0+255),b
  3155  004B02                     l11285:
  3156                           
  3157                           ; BSR set to: 1
  3158  004B02  0E02               	movlw	2
  3159  004B04  6584               	cpfsgt	escalonador@cont& (0+255),b
  3160  004B06  D001               	goto	l95
  3161  004B08  0012               	return	
  3162  004B0A                     l95:
  3163                           
  3164                           ; BSR set to: 1
  3165                           ;main.c: 189: {
  3166                           ;main.c: 190: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3167                           
  3168                           ; BSR set to: 1
  3169  004B0A  5184               	movf	escalonador@cont& (0+255),w,b
  3170  004B0C  0D02               	mullw	2
  3171  004B0E  0EF4               	movlw	low _p_tarefas
  3172  004B10  24F3               	addwf	prodl,w,c
  3173  004B12  6ED9               	movwf	fsr2l,c
  3174  004B14  0E00               	movlw	high _p_tarefas
  3175  004B16  20F4               	addwfc	prodh,w,c
  3176  004B18  6EDA               	movwf	fsr2h,c
  3177  004B1A  50DE               	movf	postinc2,w,c
  3178  004B1C  10DE               	iorwf	postinc2,w,c
  3179  004B1E  B4D8               	btfsc	status,2,c
  3180  004B20  D03D               	goto	l97
  3181                           
  3182                           ; BSR set to: 1
  3183  004B22  5184               	movf	escalonador@cont& (0+255),w,b
  3184  004B24  0D02               	mullw	2
  3185  004B26  0E24               	movlw	low _tempo_tarefa
  3186  004B28  24F3               	addwf	prodl,w,c
  3187  004B2A  6ED9               	movwf	fsr2l,c
  3188  004B2C  0E00               	movlw	high _tempo_tarefa
  3189  004B2E  20F4               	addwfc	prodh,w,c
  3190  004B30  6EDA               	movwf	fsr2h,c
  3191  004B32  50DE               	movf	postinc2,w,c
  3192  004B34  10DE               	iorwf	postinc2,w,c
  3193  004B36  A4D8               	btfss	status,2,c
  3194  004B38  D031               	goto	l97
  3195                           
  3196                           ; BSR set to: 1
  3197                           ;main.c: 191: {
  3198                           ;main.c: 192: tarefa_em_execucao = 1;
  3199  004B3A  0E01               	movlw	1
  3200  004B3C  6E3A               	movwf	_tarefa_em_execucao,c	;volatile
  3201                           
  3202                           ;main.c: 193: timeout_tarefa = 60000;
  3203  004B3E  0EEA               	movlw	234
  3204  004B40  6E31               	movwf	_timeout_tarefa+1,c
  3205  004B42  0E60               	movlw	96
  3206  004B44  6E30               	movwf	_timeout_tarefa,c
  3207                           
  3208                           ; BSR set to: 1
  3209                           ;main.c: 194: p_tarefas[cont]();
  3210  004B46  5184               	movf	escalonador@cont& (0+255),w,b
  3211  004B48  0D02               	mullw	2
  3212  004B4A  0EF4               	movlw	low _p_tarefas
  3213  004B4C  24F3               	addwf	prodl,w,c
  3214  004B4E  6ED9               	movwf	fsr2l,c
  3215  004B50  0E00               	movlw	high _p_tarefas
  3216  004B52  20F4               	addwfc	prodh,w,c
  3217  004B54  6EDA               	movwf	fsr2h,c
  3218  004B56  D801               	call	u14348
  3219  004B58  D00A               	goto	u14349
  3220  004B5A                     u14348:
  3221  004B5A  0005               	push	
  3222  004B5C  6EFA               	movwf	pclath,c
  3223  004B5E  50DE               	movf	postinc2,w,c
  3224  004B60  6EFD               	movwf	tosl,c
  3225  004B62  50DE               	movf	postinc2,w,c
  3226  004B64  6EFE               	movwf	tosh,c
  3227  004B66  50F8               	movf	tblptru,w,c
  3228  004B68  6EFF               	movwf	tosu,c
  3229  004B6A  50FA               	movf	pclath,w,c
  3230  004B6C  0012               	return		;indir
  3231  004B6E                     u14349:
  3232                           
  3233                           ;main.c: 195: tarefa_em_execucao = 0;
  3234  004B6E  0E00               	movlw	0
  3235  004B70  6E3A               	movwf	_tarefa_em_execucao,c	;volatile
  3236                           
  3237                           ;main.c: 196: tempo_tarefa[cont] = tempo_backup[cont];
  3238  004B72  0101               	movlb	1	; () banked
  3239  004B74  5184               	movf	escalonador@cont& (0+255),w,b
  3240  004B76  0D02               	mullw	2
  3241  004B78  0E00               	movlw	low _tempo_backup
  3242  004B7A  24F3               	addwf	prodl,w,c
  3243  004B7C  6ED9               	movwf	fsr2l,c
  3244  004B7E  0E01               	movlw	high _tempo_backup
  3245  004B80  20F4               	addwfc	prodh,w,c
  3246  004B82  6EDA               	movwf	fsr2h,c
  3247  004B84  5184               	movf	escalonador@cont& (0+255),w,b
  3248  004B86  0D02               	mullw	2
  3249  004B88  0E24               	movlw	low _tempo_tarefa
  3250  004B8A  24F3               	addwf	prodl,w,c
  3251  004B8C  6EE1               	movwf	fsr1l,c
  3252  004B8E  0E00               	movlw	high _tempo_tarefa
  3253  004B90  20F4               	addwfc	prodh,w,c
  3254  004B92  6EE2               	movwf	fsr1h,c
  3255  004B94  CFDE FFE6          	movff	postinc2,postinc1
  3256  004B98  CFDD FFE5          	movff	postdec2,postdec1
  3257  004B9C                     l97:
  3258                           
  3259                           ; BSR set to: 1
  3260                           
  3261                           ; BSR set to: 1
  3262  004B9C  2B84               	incf	escalonador@cont& (0+255),f,b
  3263  004B9E  D7B1               	goto	l11285
  3264  004BA0                     __end_of_escalonador:
  3265                           	opt stack 0
  3266                           tosu	equ	0xFFF
  3267                           tosh	equ	0xFFE
  3268                           tosl	equ	0xFFD
  3269                           pclath	equ	0xFFA
  3270                           tblptru	equ	0xFF8
  3271                           tblptrh	equ	0xFF7
  3272                           tblptrl	equ	0xFF6
  3273                           tablat	equ	0xFF5
  3274                           prodh	equ	0xFF4
  3275                           prodl	equ	0xFF3
  3276                           intcon	equ	0xFF2
  3277                           intcon2	equ	0xFF1
  3278                           intcon3	equ	0xFF0
  3279                           postinc0	equ	0xFEE
  3280                           wreg	equ	0xFE8
  3281                           postinc1	equ	0xFE6
  3282                           postdec1	equ	0xFE5
  3283                           fsr1h	equ	0xFE2
  3284                           fsr1l	equ	0xFE1
  3285                           postinc2	equ	0xFDE
  3286                           postdec2	equ	0xFDD
  3287                           fsr2h	equ	0xFDA
  3288                           fsr2l	equ	0xFD9
  3289                           status	equ	0xFD8
  3290                           
  3291 ;; *************** function _incrementa_metros *****************
  3292 ;; Defined at:
  3293 ;;		line 492 in file "main.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;		None
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;		None
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		None
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3307 ;;      Params:         0       0       0       0       0       0       0       0       0
  3308 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3309 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3310 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3311 ;;Total ram usage:        0 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    3
  3314 ;; This function calls:
  3315 ;;		Nothing
  3316 ;; This function is called by:
  3317 ;;		_inicializa_tarefas
  3318 ;;		_escalonador
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           	psect	text12
  3323  005CA6                     __ptext12:
  3324                           	opt stack 0
  3325  005CA6                     _incrementa_metros:
  3326                           	opt stack 26
  3327                           
  3328                           ; BSR set to: 1
  3329                           ;incstack = 0
  3330  005CA6  0012               	return		;funcret
  3331  005CA8                     __end_of_incrementa_metros:
  3332                           	opt stack 0
  3333                           tosu	equ	0xFFF
  3334                           tosh	equ	0xFFE
  3335                           tosl	equ	0xFFD
  3336                           pclath	equ	0xFFA
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           prodh	equ	0xFF4
  3342                           prodl	equ	0xFF3
  3343                           intcon	equ	0xFF2
  3344                           intcon2	equ	0xFF1
  3345                           intcon3	equ	0xFF0
  3346                           postinc0	equ	0xFEE
  3347                           wreg	equ	0xFE8
  3348                           postinc1	equ	0xFE6
  3349                           postdec1	equ	0xFE5
  3350                           fsr1h	equ	0xFE2
  3351                           fsr1l	equ	0xFE1
  3352                           postinc2	equ	0xFDE
  3353                           postdec2	equ	0xFDD
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _verifica_dados_operacionais *****************
  3359 ;; Defined at:
  3360 ;;		line 477 in file "main.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;		None
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;		None
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      void 
  3367 ;; Registers used:
  3368 ;;		None
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3374 ;;      Params:         0       0       0       0       0       0       0       0       0
  3375 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3376 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3377 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3378 ;;Total ram usage:        0 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    3
  3381 ;; This function calls:
  3382 ;;		Nothing
  3383 ;; This function is called by:
  3384 ;;		_inicializa_tarefas
  3385 ;;		_escalonador
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           	psect	text13
  3390  005CA8                     __ptext13:
  3391                           	opt stack 0
  3392  005CA8                     _verifica_dados_operacionais:
  3393                           	opt stack 26
  3394                           
  3395                           ;incstack = 0
  3396  005CA8  0012               	return		;funcret
  3397  005CAA                     __end_of_verifica_dados_operacionais:
  3398                           	opt stack 0
  3399                           tosu	equ	0xFFF
  3400                           tosh	equ	0xFFE
  3401                           tosl	equ	0xFFD
  3402                           pclath	equ	0xFFA
  3403                           tblptru	equ	0xFF8
  3404                           tblptrh	equ	0xFF7
  3405                           tblptrl	equ	0xFF6
  3406                           tablat	equ	0xFF5
  3407                           prodh	equ	0xFF4
  3408                           prodl	equ	0xFF3
  3409                           intcon	equ	0xFF2
  3410                           intcon2	equ	0xFF1
  3411                           intcon3	equ	0xFF0
  3412                           postinc0	equ	0xFEE
  3413                           wreg	equ	0xFE8
  3414                           postinc1	equ	0xFE6
  3415                           postdec1	equ	0xFE5
  3416                           fsr1h	equ	0xFE2
  3417                           fsr1l	equ	0xFE1
  3418                           postinc2	equ	0xFDE
  3419                           postdec2	equ	0xFDD
  3420                           fsr2h	equ	0xFDA
  3421                           fsr2l	equ	0xFD9
  3422                           status	equ	0xFD8
  3423                           
  3424 ;; *************** function _verifica_fence_externo *****************
  3425 ;; Defined at:
  3426 ;;		line 256 in file "main.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;		None
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;  caractere_gp  100    0[BANK4 ] unsigned char [100]
  3431 ;;  temp_buff_lo   11  111[BANK4 ] unsigned char [11]
  3432 ;;  temp_buff_la   11  100[BANK4 ] unsigned char [11]
  3433 ;;  point_buff_g    3    0        PTR unsigned char 
  3434 ;;  point_buff_g    3    0        PTR unsigned char 
  3435 ;;  point_buff      2  122[BANK4 ] PTR unsigned char 
  3436 ;;		 -> dado_arquivo(20), 
  3437 ;;  i               1  129[BANK4 ] unsigned char 
  3438 ;;  count           1  128[BANK4 ] unsigned char 
  3439 ;;  j               1  127[BANK4 ] unsigned char 
  3440 ;;  count_index     1  126[BANK4 ] unsigned char 
  3441 ;;  point           1  125[BANK4 ] unsigned char 
  3442 ;;  size            1  124[BANK4 ] unsigned char 
  3443 ;; Return value:  Size  Location     Type
  3444 ;;                  1    wreg      void 
  3445 ;; Registers used:
  3446 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3447 ;; Tracked objects:
  3448 ;;		On entry : 0/0
  3449 ;;		On exit  : 0/0
  3450 ;;		Unchanged: 0/0
  3451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3452 ;;      Params:         0       0       0       0       0       0       0       0       0
  3453 ;;      Locals:         0       0       0       0       0     130       0       0       0
  3454 ;;      Temps:          0       0       5       0       0       0       0       0       0
  3455 ;;      Totals:         0       0       5       0       0     130       0       0       0
  3456 ;;Total ram usage:      135 bytes
  3457 ;; Hardware stack levels used:    1
  3458 ;; Hardware stack levels required when called:   16
  3459 ;; This function calls:
  3460 ;;		_escreve_cmd_lcd
  3461 ;;		_escreve_frase_ram_lcd
  3462 ;;		_escreve_inteiro_lcd
  3463 ;;		_escrita_sdcard
  3464 ;;		_leitura_sdcard
  3465 ;;		_posicao_cursor_lcd
  3466 ;; This function is called by:
  3467 ;;		_inicializa_tarefas
  3468 ;;		_escalonador
  3469 ;; This function uses a non-reentrant model
  3470 ;;
  3471                           
  3472                           	psect	text14
  3473  001D10                     __ptext14:
  3474                           	opt stack 0
  3475  001D10                     _verifica_fence_externo:
  3476                           	opt stack 13
  3477                           
  3478                           ;main.c: 259: unsigned char *point_buff, i, j, count, count_index;
  3479                           ;main.c: 260: unsigned char *point_buff_gps_lat, *point_buff_gps_long;
  3480                           ;main.c: 261: unsigned char point, caractere_gps[100], size;
  3481                           ;main.c: 262: unsigned char temp_buff_lat[11] = "-23.658007", temp_buff_long[11] = "-46.
      +                          5507806";
  3482                           
  3483                           ;incstack = 0
  3484  001D10  EE22  F070         	lfsr	2,verifica_fence_externo@F4362
  3485  001D14  EE14  F064         	lfsr	1,verifica_fence_externo@temp_buff_lat
  3486  001D18  0E0A               	movlw	10
  3487  001D1A                     u14081:
  3488  001D1A  CFDB FFE3          	movff	plusw2,plusw1
  3489  001D1E  06E8               	decf	wreg,f,c
  3490  001D20  E2FC               	bc	u14081
  3491  001D22  EE22  F065         	lfsr	2,verifica_fence_externo@F4364
  3492  001D26  EE14  F06F         	lfsr	1,verifica_fence_externo@temp_buff_long
  3493  001D2A  0E0A               	movlw	10
  3494  001D2C                     u14091:
  3495  001D2C  CFDB FFE3          	movff	plusw2,plusw1
  3496  001D30  06E8               	decf	wreg,f,c
  3497  001D32  E2FC               	bc	u14091
  3498                           
  3499                           ;main.c: 263: count = 0;
  3500  001D34  0E00               	movlw	0
  3501  001D36  0104               	movlb	4	; () banked
  3502  001D38  6F80               	movwf	verifica_fence_externo@count& (0+255),b
  3503                           
  3504                           ; BSR set to: 4
  3505                           ;main.c: 264: point = 0;
  3506  001D3A  0E00               	movlw	0
  3507  001D3C  6F7D               	movwf	verifica_fence_externo@point& (0+255),b
  3508                           
  3509                           ; BSR set to: 4
  3510                           ;main.c: 265: j= 0;
  3511  001D3E  0E00               	movlw	0
  3512  001D40  6F7F               	movwf	verifica_fence_externo@j& (0+255),b
  3513                           
  3514                           ; BSR set to: 4
  3515                           ;main.c: 266: point_buff = leitura_sdcard(0);
  3516  001D42  0E00               	movlw	0
  3517  001D44  ECE1  F027         	call	_leitura_sdcard
  3518  001D48  C0DF  F47A         	movff	?_leitura_sdcard,verifica_fence_externo@point_buff
  3519  001D4C  C0E0  F47B         	movff	?_leitura_sdcard+1,verifica_fence_externo@point_buff+1
  3520                           
  3521                           ;main.c: 271: size = 88;
  3522  001D50  0E58               	movlw	88
  3523  001D52  0104               	movlb	4	; () banked
  3524  001D54  6F7C               	movwf	verifica_fence_externo@size& (0+255),b
  3525                           
  3526                           ; BSR set to: 4
  3527                           ;main.c: 272: for(i= 0; i<size; i++)
  3528  001D56  0E00               	movlw	0
  3529  001D58  6F81               	movwf	verifica_fence_externo@i& (0+255),b
  3530  001D5A  D011               	goto	l121
  3531  001D5C                     
  3532                           ; BSR set to: 4
  3533                           ;main.c: 273: {
  3534                           ;main.c: 274: caractere_gps[i] = *point_buff;
  3535                           
  3536                           ; BSR set to: 4
  3537  001D5C  C47A  FFD9         	movff	verifica_fence_externo@point_buff,fsr2l
  3538  001D60  C47B  FFDA         	movff	verifica_fence_externo@point_buff+1,fsr2h
  3539  001D64  5181               	movf	verifica_fence_externo@i& (0+255),w,b
  3540  001D66  0D01               	mullw	1
  3541  001D68  0E00               	movlw	low verifica_fence_externo@caractere_gps
  3542  001D6A  24F3               	addwf	prodl,w,c
  3543  001D6C  6EE1               	movwf	fsr1l,c
  3544  001D6E  0E04               	movlw	high verifica_fence_externo@caractere_gps
  3545  001D70  20F4               	addwfc	prodh,w,c
  3546  001D72  6EE2               	movwf	fsr1h,c
  3547  001D74  CFDF FFE7          	movff	indf2,indf1
  3548                           
  3549                           ; BSR set to: 4
  3550                           ;main.c: 275: point_buff++;
  3551  001D78  4B7A               	infsnz	verifica_fence_externo@point_buff& (0+255),f,b
  3552  001D7A  2B7B               	incf	(verifica_fence_externo@point_buff+1)& (0+255),f,b
  3553                           
  3554                           ; BSR set to: 4
  3555  001D7C  2B81               	incf	verifica_fence_externo@i& (0+255),f,b
  3556  001D7E                     l121:
  3557                           
  3558                           ; BSR set to: 4
  3559                           
  3560                           ; BSR set to: 4
  3561  001D7E  517C               	movf	verifica_fence_externo@size& (0+255),w,b
  3562  001D80  5D81               	subwf	verifica_fence_externo@i& (0+255),w,b
  3563  001D82  A0D8               	btfss	status,0,c
  3564  001D84  D7EB               	goto	l122
  3565                           
  3566                           ; BSR set to: 4
  3567                           ;main.c: 276: }
  3568                           ;main.c: 279: posicao_cursor_lcd(1,0);
  3569                           
  3570                           ; BSR set to: 4
  3571  001D86  0E00               	movlw	0
  3572  001D88  0100               	movlb	0	; () banked
  3573  001D8A  6F60               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3574  001D8C  0E01               	movlw	1
  3575  001D8E  ECEF  F028         	call	_posicao_cursor_lcd
  3576                           
  3577                           ;main.c: 280: escreve_inteiro_lcd(size);
  3578  001D92  C47C  F075         	movff	verifica_fence_externo@size,escreve_inteiro_lcd@valor
  3579  001D96  0100               	movlb	0	; () banked
  3580  001D98  6B76               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3581  001D9A  EC96  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3582                           
  3583                           ;main.c: 281: _delay((unsigned long)((1000)*(48000000/4000.0)));
  3584  001D9E  0E3D               	movlw	61
  3585  001DA0  0101               	movlb	1	; () banked
  3586  001DA2  6F7E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  3587  001DA4  0EE1               	movlw	225
  3588  001DA6  6F7D               	movwf	??_verifica_fence_externo& (0+255),b
  3589  001DA8  0E3F               	movlw	63
  3590  001DAA                     u14827:
  3591  001DAA  2EE8               	decfsz	wreg,f,c
  3592  001DAC  D7FE               	bra	u14827
  3593  001DAE  2F7D               	decfsz	??_verifica_fence_externo& (0+255),f,b
  3594  001DB0  D7FC               	bra	u14827
  3595  001DB2  2F7E               	decfsz	(??_verifica_fence_externo+1)& (0+255),f,b
  3596  001DB4  D7FA               	bra	u14827
  3597  001DB6  D000               	nop2	
  3598                           
  3599                           ;main.c: 296: for(i=j; i<(j+22); i++)
  3600  001DB8  C47F  F481         	movff	verifica_fence_externo@j,verifica_fence_externo@i
  3601  001DBC  D167               	goto	l124
  3602  001DBE                     
  3603                           ;main.c: 297: {
  3604                           ;main.c: 298: if(i<=(j+(22/2)))
  3605  001DBE  0104               	movlb	4	; () banked
  3606  001DC0  5181               	movf	verifica_fence_externo@i& (0+255),w,b
  3607  001DC2  0101               	movlb	1	; () banked
  3608  001DC4  6F7D               	movwf	??_verifica_fence_externo& (0+255),b
  3609  001DC6  6B7E               	clrf	(??_verifica_fence_externo+1)& (0+255),b
  3610  001DC8  0104               	movlb	4	; () banked
  3611  001DCA  517F               	movf	verifica_fence_externo@j& (0+255),w,b
  3612  001DCC  0101               	movlb	1	; () banked
  3613  001DCE  6F7F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  3614  001DD0  6B80               	clrf	(??_verifica_fence_externo+3)& (0+255),b
  3615  001DD2  0E0B               	movlw	11
  3616  001DD4  277F               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  3617  001DD6  0E00               	movlw	0
  3618  001DD8  2380               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  3619  001DDA  517D               	movf	??_verifica_fence_externo& (0+255),w,b
  3620  001DDC  5D7F               	subwf	(??_verifica_fence_externo+2)& (0+255),w,b
  3621  001DDE  5180               	movf	(??_verifica_fence_externo+3)& (0+255),w,b
  3622  001DE0  0A80               	xorlw	128
  3623  001DE2  6F81               	movwf	(??_verifica_fence_externo+4)& (0+255),b
  3624  001DE4  517E               	movf	(??_verifica_fence_externo+1)& (0+255),w,b
  3625  001DE6  0A80               	xorlw	128
  3626  001DE8  5981               	subwfb	(??_verifica_fence_externo+4)& (0+255),w,b
  3627  001DEA  A0D8               	btfss	status,0,c
  3628  001DEC  D09A               	goto	l127
  3629                           
  3630                           ; BSR set to: 1
  3631                           ;main.c: 299: {
  3632                           ;main.c: 300: if(caractere_gps[i] != temp_buff_long[count])
  3633  001DEE  0104               	movlb	4	; () banked
  3634  001DF0  5180               	movf	verifica_fence_externo@count& (0+255),w,b
  3635  001DF2  0D01               	mullw	1
  3636  001DF4  0E6F               	movlw	low verifica_fence_externo@temp_buff_long
  3637  001DF6  24F3               	addwf	prodl,w,c
  3638  001DF8  6ED9               	movwf	fsr2l,c
  3639  001DFA  0E04               	movlw	high verifica_fence_externo@temp_buff_long
  3640  001DFC  20F4               	addwfc	prodh,w,c
  3641  001DFE  6EDA               	movwf	fsr2h,c
  3642  001E00  5181               	movf	verifica_fence_externo@i& (0+255),w,b
  3643  001E02  0D01               	mullw	1
  3644  001E04  0E00               	movlw	low verifica_fence_externo@caractere_gps
  3645  001E06  24F3               	addwf	prodl,w,c
  3646  001E08  6EE1               	movwf	fsr1l,c
  3647  001E0A  0E04               	movlw	high verifica_fence_externo@caractere_gps
  3648  001E0C  20F4               	addwfc	prodh,w,c
  3649  001E0E  6EE2               	movwf	fsr1h,c
  3650  001E10  50DE               	movf	postinc2,w,c
  3651  001E12  18E6               	xorwf	postinc1,w,c
  3652  001E14  B4D8               	btfsc	status,2,c
  3653  001E16  D085               	goto	l127
  3654                           
  3655                           ; BSR set to: 4
  3656                           ;main.c: 301: {
  3657                           ;main.c: 302: for(count_index = 0; count<11; count_index++)
  3658  001E18  0E00               	movlw	0
  3659  001E1A  6F7E               	movwf	verifica_fence_externo@count_index& (0+255),b
  3660  001E1C                     l11109:
  3661                           
  3662                           ; BSR set to: 4
  3663  001E1C  0E0A               	movlw	10
  3664  001E1E  6580               	cpfsgt	verifica_fence_externo@count& (0+255),b
  3665  001E20  D001               	goto	l128
  3666  001E22  D07D               	goto	u14140
  3667  001E24                     l128:
  3668                           
  3669                           ; BSR set to: 4
  3670                           ;main.c: 303: {
  3671                           ;main.c: 304: poligono_ext[point].fence_diff_long[count_index] = caractere_gps[i];
  3672                           
  3673                           ; BSR set to: 4
  3674  001E24  5181               	movf	verifica_fence_externo@i& (0+255),w,b
  3675  001E26  0D01               	mullw	1
  3676  001E28  0E00               	movlw	low verifica_fence_externo@caractere_gps
  3677  001E2A  24F3               	addwf	prodl,w,c
  3678  001E2C  6ED9               	movwf	fsr2l,c
  3679  001E2E  0E04               	movlw	high verifica_fence_externo@caractere_gps
  3680  001E30  20F4               	addwfc	prodh,w,c
  3681  001E32  6EDA               	movwf	fsr2h,c
  3682  001E34  517E               	movf	verifica_fence_externo@count_index& (0+255),w,b
  3683  001E36  0D01               	mullw	1
  3684  001E38  0E21               	movlw	33
  3685  001E3A  26F3               	addwf	prodl,f,c
  3686  001E3C  0E00               	movlw	0
  3687  001E3E  22F4               	addwfc	prodh,f,c
  3688  001E40  0E00               	movlw	low _poligono_ext
  3689  001E42  0101               	movlb	1	; () banked
  3690  001E44  6F7D               	movwf	??_verifica_fence_externo& (0+255),b
  3691  001E46  0E03               	movlw	high _poligono_ext
  3692  001E48  6F7E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  3693  001E4A  50F3               	movf	prodl,w,c
  3694  001E4C  277D               	addwf	??_verifica_fence_externo& (0+255),f,b
  3695  001E4E  50F4               	movf	prodh,w,c
  3696  001E50  237E               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  3697  001E52  0104               	movlb	4	; () banked
  3698  001E54  517D               	movf	verifica_fence_externo@point& (0+255),w,b
  3699  001E56  0D42               	mullw	66
  3700  001E58  50F3               	movf	prodl,w,c
  3701  001E5A  0101               	movlb	1	; () banked
  3702  001E5C  257D               	addwf	??_verifica_fence_externo& (0+255),w,b
  3703  001E5E  6EE1               	movwf	fsr1l,c
  3704  001E60  50F4               	movf	prodh,w,c
  3705  001E62  217E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  3706  001E64  6EE2               	movwf	fsr1h,c
  3707  001E66  CFDF FFE7          	movff	indf2,indf1
  3708                           
  3709                           ;main.c: 305: poligono_ext[point].point_diff_long[count_index] = temp_buff_long[count];
  3710  001E6A  0104               	movlb	4	; () banked
  3711  001E6C  5180               	movf	verifica_fence_externo@count& (0+255),w,b
  3712  001E6E  0D01               	mullw	1
  3713  001E70  0E6F               	movlw	low verifica_fence_externo@temp_buff_long
  3714  001E72  24F3               	addwf	prodl,w,c
  3715  001E74  6ED9               	movwf	fsr2l,c
  3716  001E76  0E04               	movlw	high verifica_fence_externo@temp_buff_long
  3717  001E78  20F4               	addwfc	prodh,w,c
  3718  001E7A  6EDA               	movwf	fsr2h,c
  3719  001E7C  517E               	movf	verifica_fence_externo@count_index& (0+255),w,b
  3720  001E7E  0D01               	mullw	1
  3721  001E80  0E37               	movlw	55
  3722  001E82  26F3               	addwf	prodl,f,c
  3723  001E84  0E00               	movlw	0
  3724  001E86  22F4               	addwfc	prodh,f,c
  3725  001E88  0E00               	movlw	low _poligono_ext
  3726  001E8A  0101               	movlb	1	; () banked
  3727  001E8C  6F7D               	movwf	??_verifica_fence_externo& (0+255),b
  3728  001E8E  0E03               	movlw	high _poligono_ext
  3729  001E90  6F7E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  3730  001E92  50F3               	movf	prodl,w,c
  3731  001E94  277D               	addwf	??_verifica_fence_externo& (0+255),f,b
  3732  001E96  50F4               	movf	prodh,w,c
  3733  001E98  237E               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  3734  001E9A  0104               	movlb	4	; () banked
  3735  001E9C  517D               	movf	verifica_fence_externo@point& (0+255),w,b
  3736  001E9E  0D42               	mullw	66
  3737  001EA0  50F3               	movf	prodl,w,c
  3738  001EA2  0101               	movlb	1	; () banked
  3739  001EA4  257D               	addwf	??_verifica_fence_externo& (0+255),w,b
  3740  001EA6  6EE1               	movwf	fsr1l,c
  3741  001EA8  50F4               	movf	prodh,w,c
  3742  001EAA  217E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  3743  001EAC  6EE2               	movwf	fsr1h,c
  3744  001EAE  CFDF FFE7          	movff	indf2,indf1
  3745                           
  3746                           ; BSR set to: 1
  3747                           ;main.c: 306: posicao_cursor_lcd(1,0);
  3748  001EB2  0E00               	movlw	0
  3749  001EB4  0100               	movlb	0	; () banked
  3750  001EB6  6F60               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3751  001EB8  0E01               	movlw	1
  3752  001EBA  ECEF  F028         	call	_posicao_cursor_lcd
  3753                           
  3754                           ;main.c: 307: escreve_inteiro_lcd(i);
  3755  001EBE  C481  F075         	movff	verifica_fence_externo@i,escreve_inteiro_lcd@valor
  3756  001EC2  0100               	movlb	0	; () banked
  3757  001EC4  6B76               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3758  001EC6  EC96  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3759                           
  3760                           ;main.c: 308: posicao_cursor_lcd(2,0);
  3761  001ECA  0E00               	movlw	0
  3762  001ECC  0100               	movlb	0	; () banked
  3763  001ECE  6F60               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3764  001ED0  0E02               	movlw	2
  3765  001ED2  ECEF  F028         	call	_posicao_cursor_lcd
  3766                           
  3767                           ;main.c: 309: escreve_inteiro_lcd(count);
  3768  001ED6  C480  F075         	movff	verifica_fence_externo@count,escreve_inteiro_lcd@valor
  3769  001EDA  0100               	movlb	0	; () banked
  3770  001EDC  6B76               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3771  001EDE  EC96  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3772                           
  3773                           ;main.c: 310: posicao_cursor_lcd(2,14);
  3774  001EE2  0E0E               	movlw	14
  3775  001EE4  0100               	movlb	0	; () banked
  3776  001EE6  6F60               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3777  001EE8  0E02               	movlw	2
  3778  001EEA  ECEF  F028         	call	_posicao_cursor_lcd
  3779                           
  3780                           ;main.c: 311: escreve_inteiro_lcd(count_index);
  3781  001EEE  C47E  F075         	movff	verifica_fence_externo@count_index,escreve_inteiro_lcd@valor
  3782  001EF2  0100               	movlb	0	; () banked
  3783  001EF4  6B76               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3784  001EF6  EC96  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3785                           
  3786                           ;main.c: 312: _delay((unsigned long)((1000)*(48000000/4000.0)));
  3787  001EFA  0E3D               	movlw	61
  3788  001EFC  0101               	movlb	1	; () banked
  3789  001EFE  6F7E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  3790  001F00  0EE1               	movlw	225
  3791  001F02  6F7D               	movwf	??_verifica_fence_externo& (0+255),b
  3792  001F04  0E3F               	movlw	63
  3793  001F06                     u14837:
  3794  001F06  2EE8               	decfsz	wreg,f,c
  3795  001F08  D7FE               	bra	u14837
  3796  001F0A  2F7D               	decfsz	??_verifica_fence_externo& (0+255),f,b
  3797  001F0C  D7FC               	bra	u14837
  3798  001F0E  2F7E               	decfsz	(??_verifica_fence_externo+1)& (0+255),f,b
  3799  001F10  D7FA               	bra	u14837
  3800  001F12  D000               	nop2	
  3801                           
  3802                           ;main.c: 313: i++;
  3803  001F14  0104               	movlb	4	; () banked
  3804  001F16  2B81               	incf	verifica_fence_externo@i& (0+255),f,b
  3805                           
  3806                           ; BSR set to: 4
  3807                           ;main.c: 314: count++;
  3808  001F18  2B80               	incf	verifica_fence_externo@count& (0+255),f,b
  3809                           
  3810                           ; BSR set to: 4
  3811  001F1A  2B7E               	incf	verifica_fence_externo@count_index& (0+255),f,b
  3812  001F1C  D77F               	goto	l11109
  3813  001F1E                     u14140:
  3814                           
  3815                           ; BSR set to: 4
  3816                           ;main.c: 316: }
  3817                           ;main.c: 317: count = 0;
  3818                           
  3819                           ; BSR set to: 4
  3820  001F1E  0E00               	movlw	0
  3821  001F20  6F80               	movwf	verifica_fence_externo@count& (0+255),b
  3822  001F22                     l127:
  3823                           
  3824                           ;main.c: 318: }
  3825                           ;main.c: 319: }
  3826                           ;main.c: 324: if(i>(j+(22/2)))
  3827                           
  3828                           ; BSR set to: 4
  3829                           
  3830                           ; BSR set to: 4
  3831  001F22  0104               	movlb	4	; () banked
  3832  001F24  5181               	movf	verifica_fence_externo@i& (0+255),w,b
  3833  001F26  0101               	movlb	1	; () banked
  3834  001F28  6F7D               	movwf	??_verifica_fence_externo& (0+255),b
  3835  001F2A  6B7E               	clrf	(??_verifica_fence_externo+1)& (0+255),b
  3836  001F2C  0104               	movlb	4	; () banked
  3837  001F2E  517F               	movf	verifica_fence_externo@j& (0+255),w,b
  3838  001F30  0101               	movlb	1	; () banked
  3839  001F32  6F7F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  3840  001F34  6B80               	clrf	(??_verifica_fence_externo+3)& (0+255),b
  3841  001F36  0E0B               	movlw	11
  3842  001F38  277F               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  3843  001F3A  0E00               	movlw	0
  3844  001F3C  2380               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  3845  001F3E  517D               	movf	??_verifica_fence_externo& (0+255),w,b
  3846  001F40  5D7F               	subwf	(??_verifica_fence_externo+2)& (0+255),w,b
  3847  001F42  5180               	movf	(??_verifica_fence_externo+3)& (0+255),w,b
  3848  001F44  0A80               	xorlw	128
  3849  001F46  6F81               	movwf	(??_verifica_fence_externo+4)& (0+255),b
  3850  001F48  517E               	movf	(??_verifica_fence_externo+1)& (0+255),w,b
  3851  001F4A  0A80               	xorlw	128
  3852  001F4C  5981               	subwfb	(??_verifica_fence_externo+4)& (0+255),w,b
  3853  001F4E  B0D8               	btfsc	status,0,c
  3854  001F50  D069               	goto	l130
  3855                           
  3856                           ; BSR set to: 1
  3857                           ;main.c: 325: {
  3858                           ;main.c: 326: if(caractere_gps[i] != temp_buff_lat[count])
  3859  001F52  0104               	movlb	4	; () banked
  3860  001F54  5180               	movf	verifica_fence_externo@count& (0+255),w,b
  3861  001F56  0D01               	mullw	1
  3862  001F58  0E64               	movlw	low verifica_fence_externo@temp_buff_lat
  3863  001F5A  24F3               	addwf	prodl,w,c
  3864  001F5C  6ED9               	movwf	fsr2l,c
  3865  001F5E  0E04               	movlw	high verifica_fence_externo@temp_buff_lat
  3866  001F60  20F4               	addwfc	prodh,w,c
  3867  001F62  6EDA               	movwf	fsr2h,c
  3868  001F64  5181               	movf	verifica_fence_externo@i& (0+255),w,b
  3869  001F66  0D01               	mullw	1
  3870  001F68  0E00               	movlw	low verifica_fence_externo@caractere_gps
  3871  001F6A  24F3               	addwf	prodl,w,c
  3872  001F6C  6EE1               	movwf	fsr1l,c
  3873  001F6E  0E04               	movlw	high verifica_fence_externo@caractere_gps
  3874  001F70  20F4               	addwfc	prodh,w,c
  3875  001F72  6EE2               	movwf	fsr1h,c
  3876  001F74  50DE               	movf	postinc2,w,c
  3877  001F76  18E6               	xorwf	postinc1,w,c
  3878  001F78  B4D8               	btfsc	status,2,c
  3879  001F7A  D052               	goto	u14180
  3880                           
  3881                           ; BSR set to: 4
  3882                           ;main.c: 327: {
  3883                           ;main.c: 329: for(count_index = 0; count<11; count_index++)
  3884  001F7C  0E00               	movlw	0
  3885  001F7E  6F7E               	movwf	verifica_fence_externo@count_index& (0+255),b
  3886  001F80                     l11145:
  3887                           
  3888                           ; BSR set to: 4
  3889  001F80  0E0A               	movlw	10
  3890  001F82  6580               	cpfsgt	verifica_fence_externo@count& (0+255),b
  3891  001F84  D001               	goto	l132
  3892  001F86  D04C               	goto	u14180
  3893  001F88                     l132:
  3894                           
  3895                           ; BSR set to: 4
  3896                           ;main.c: 330: {
  3897                           ;main.c: 331: poligono_ext[point].fence_diff_lat[count_index] = caractere_gps[i];
  3898                           
  3899                           ; BSR set to: 4
  3900  001F88  5181               	movf	verifica_fence_externo@i& (0+255),w,b
  3901  001F8A  0D01               	mullw	1
  3902  001F8C  0E00               	movlw	low verifica_fence_externo@caractere_gps
  3903  001F8E  24F3               	addwf	prodl,w,c
  3904  001F90  6ED9               	movwf	fsr2l,c
  3905  001F92  0E04               	movlw	high verifica_fence_externo@caractere_gps
  3906  001F94  20F4               	addwfc	prodh,w,c
  3907  001F96  6EDA               	movwf	fsr2h,c
  3908  001F98  517E               	movf	verifica_fence_externo@count_index& (0+255),w,b
  3909  001F9A  0D01               	mullw	1
  3910  001F9C  0E16               	movlw	22
  3911  001F9E  26F3               	addwf	prodl,f,c
  3912  001FA0  0E00               	movlw	0
  3913  001FA2  22F4               	addwfc	prodh,f,c
  3914  001FA4  0E00               	movlw	low _poligono_ext
  3915  001FA6  0101               	movlb	1	; () banked
  3916  001FA8  6F7D               	movwf	??_verifica_fence_externo& (0+255),b
  3917  001FAA  0E03               	movlw	high _poligono_ext
  3918  001FAC  6F7E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  3919  001FAE  50F3               	movf	prodl,w,c
  3920  001FB0  277D               	addwf	??_verifica_fence_externo& (0+255),f,b
  3921  001FB2  50F4               	movf	prodh,w,c
  3922  001FB4  237E               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  3923  001FB6  0104               	movlb	4	; () banked
  3924  001FB8  517D               	movf	verifica_fence_externo@point& (0+255),w,b
  3925  001FBA  0D42               	mullw	66
  3926  001FBC  50F3               	movf	prodl,w,c
  3927  001FBE  0101               	movlb	1	; () banked
  3928  001FC0  257D               	addwf	??_verifica_fence_externo& (0+255),w,b
  3929  001FC2  6EE1               	movwf	fsr1l,c
  3930  001FC4  50F4               	movf	prodh,w,c
  3931  001FC6  217E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  3932  001FC8  6EE2               	movwf	fsr1h,c
  3933  001FCA  CFDF FFE7          	movff	indf2,indf1
  3934                           
  3935                           ;main.c: 332: poligono_ext[point].point_diff_lat[count_index] = temp_buff_lat[count];
  3936  001FCE  0104               	movlb	4	; () banked
  3937  001FD0  5180               	movf	verifica_fence_externo@count& (0+255),w,b
  3938  001FD2  0D01               	mullw	1
  3939  001FD4  0E64               	movlw	low verifica_fence_externo@temp_buff_lat
  3940  001FD6  24F3               	addwf	prodl,w,c
  3941  001FD8  6ED9               	movwf	fsr2l,c
  3942  001FDA  0E04               	movlw	high verifica_fence_externo@temp_buff_lat
  3943  001FDC  20F4               	addwfc	prodh,w,c
  3944  001FDE  6EDA               	movwf	fsr2h,c
  3945  001FE0  517E               	movf	verifica_fence_externo@count_index& (0+255),w,b
  3946  001FE2  0D01               	mullw	1
  3947  001FE4  0E2C               	movlw	44
  3948  001FE6  26F3               	addwf	prodl,f,c
  3949  001FE8  0E00               	movlw	0
  3950  001FEA  22F4               	addwfc	prodh,f,c
  3951  001FEC  0E00               	movlw	low _poligono_ext
  3952  001FEE  0101               	movlb	1	; () banked
  3953  001FF0  6F7D               	movwf	??_verifica_fence_externo& (0+255),b
  3954  001FF2  0E03               	movlw	high _poligono_ext
  3955  001FF4  6F7E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  3956  001FF6  50F3               	movf	prodl,w,c
  3957  001FF8  277D               	addwf	??_verifica_fence_externo& (0+255),f,b
  3958  001FFA  50F4               	movf	prodh,w,c
  3959  001FFC  237E               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  3960  001FFE  0104               	movlb	4	; () banked
  3961  002000  517D               	movf	verifica_fence_externo@point& (0+255),w,b
  3962  002002  0D42               	mullw	66
  3963  002004  50F3               	movf	prodl,w,c
  3964  002006  0101               	movlb	1	; () banked
  3965  002008  257D               	addwf	??_verifica_fence_externo& (0+255),w,b
  3966  00200A  6EE1               	movwf	fsr1l,c
  3967  00200C  50F4               	movf	prodh,w,c
  3968  00200E  217E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  3969  002010  6EE2               	movwf	fsr1h,c
  3970  002012  CFDF FFE7          	movff	indf2,indf1
  3971                           
  3972                           ; BSR set to: 1
  3973                           ;main.c: 340: i++;
  3974  002016  0104               	movlb	4	; () banked
  3975  002018  2B81               	incf	verifica_fence_externo@i& (0+255),f,b
  3976                           
  3977                           ; BSR set to: 4
  3978                           ;main.c: 341: count++;
  3979  00201A  2B80               	incf	verifica_fence_externo@count& (0+255),f,b
  3980                           
  3981                           ; BSR set to: 4
  3982  00201C  2B7E               	incf	verifica_fence_externo@count_index& (0+255),f,b
  3983  00201E  D7B0               	goto	l11145
  3984  002020                     u14180:
  3985                           
  3986                           ; BSR set to: 4
  3987                           ;main.c: 342: }
  3988                           ;main.c: 344: }
  3989                           ;main.c: 345: count = 0;
  3990                           
  3991                           ; BSR set to: 4
  3992                           
  3993                           ; BSR set to: 4
  3994  002020  0E00               	movlw	0
  3995  002022  6F80               	movwf	verifica_fence_externo@count& (0+255),b
  3996  002024                     l130:
  3997                           
  3998                           ;main.c: 346: }
  3999                           ;main.c: 347: count++;
  4000                           
  4001                           ; BSR set to: 4
  4002  002024  0104               	movlb	4	; () banked
  4003  002026  2B80               	incf	verifica_fence_externo@count& (0+255),f,b
  4004                           
  4005                           ; BSR set to: 4
  4006                           ;main.c: 351: if(i==(j+22))
  4007  002028  5181               	movf	verifica_fence_externo@i& (0+255),w,b
  4008  00202A  0101               	movlb	1	; () banked
  4009  00202C  6F7D               	movwf	??_verifica_fence_externo& (0+255),b
  4010  00202E  6B7E               	clrf	(??_verifica_fence_externo+1)& (0+255),b
  4011  002030  0104               	movlb	4	; () banked
  4012  002032  517F               	movf	verifica_fence_externo@j& (0+255),w,b
  4013  002034  0101               	movlb	1	; () banked
  4014  002036  6F7F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4015  002038  6B80               	clrf	(??_verifica_fence_externo+3)& (0+255),b
  4016  00203A  0E16               	movlw	22
  4017  00203C  277F               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  4018  00203E  0E00               	movlw	0
  4019  002040  2380               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  4020  002042  517D               	movf	??_verifica_fence_externo& (0+255),w,b
  4021  002044  197F               	xorwf	(??_verifica_fence_externo+2)& (0+255),w,b
  4022  002046  E10A               	bnz	l11167
  4023  002048  517E               	movf	(??_verifica_fence_externo+1)& (0+255),w,b
  4024  00204A  1980               	xorwf	(??_verifica_fence_externo+3)& (0+255),w,b
  4025  00204C  A4D8               	btfss	status,2,c
  4026  00204E  D006               	goto	l134
  4027                           
  4028                           ; BSR set to: 1
  4029                           ;main.c: 352: {
  4030                           ;main.c: 353: j = j + 22;
  4031  002050  0104               	movlb	4	; () banked
  4032  002052  517F               	movf	verifica_fence_externo@j& (0+255),w,b
  4033  002054  0F16               	addlw	22
  4034  002056  6F7F               	movwf	verifica_fence_externo@j& (0+255),b
  4035                           
  4036                           ;main.c: 354: point = point + 1;
  4037  002058  297D               	incf	verifica_fence_externo@point& (0+255),w,b
  4038  00205A  6F7D               	movwf	verifica_fence_externo@point& (0+255),b
  4039  00205C                     l134:
  4040  00205C                     l11167:
  4041                           
  4042                           ;main.c: 355: }
  4043                           ;main.c: 357: escreve_cmd_lcd(0b00000001);
  4044  00205C  0E01               	movlw	1
  4045  00205E  EC9B  F027         	call	_escreve_cmd_lcd
  4046                           
  4047                           ;main.c: 358: posicao_cursor_lcd(1,5);
  4048  002062  0E05               	movlw	5
  4049  002064  0100               	movlb	0	; () banked
  4050  002066  6F60               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4051  002068  0E01               	movlw	1
  4052  00206A  ECEF  F028         	call	_posicao_cursor_lcd
  4053                           
  4054                           ;main.c: 359: escreve_inteiro_lcd(j);
  4055  00206E  C47F  F075         	movff	verifica_fence_externo@j,escreve_inteiro_lcd@valor
  4056  002072  0100               	movlb	0	; () banked
  4057  002074  6B76               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  4058  002076  EC96  F02C         	call	_escreve_inteiro_lcd	;wreg free
  4059                           
  4060                           ;main.c: 360: if(i==size)
  4061  00207A  0104               	movlb	4	; () banked
  4062  00207C  517C               	movf	verifica_fence_externo@size& (0+255),w,b
  4063  00207E  1981               	xorwf	verifica_fence_externo@i& (0+255),w,b
  4064  002080  A4D8               	btfss	status,2,c
  4065  002082  D003               	goto	l135
  4066                           
  4067                           ; BSR set to: 4
  4068                           ;main.c: 361: {
  4069                           ;main.c: 362: i = (j+22);
  4070  002084  517F               	movf	verifica_fence_externo@j& (0+255),w,b
  4071  002086  0F16               	addlw	22
  4072  002088  6F81               	movwf	verifica_fence_externo@i& (0+255),b
  4073  00208A                     l135:
  4074                           
  4075                           ; BSR set to: 4
  4076                           
  4077                           ; BSR set to: 4
  4078  00208A  2B81               	incf	verifica_fence_externo@i& (0+255),f,b
  4079  00208C                     l124:
  4080                           
  4081                           ; BSR set to: 4
  4082  00208C  0104               	movlb	4	; () banked
  4083  00208E  517F               	movf	verifica_fence_externo@j& (0+255),w,b
  4084  002090  0101               	movlb	1	; () banked
  4085  002092  6F7D               	movwf	??_verifica_fence_externo& (0+255),b
  4086  002094  6B7E               	clrf	(??_verifica_fence_externo+1)& (0+255),b
  4087  002096  0E16               	movlw	22
  4088  002098  277D               	addwf	??_verifica_fence_externo& (0+255),f,b
  4089  00209A  0E00               	movlw	0
  4090  00209C  237E               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4091  00209E  0104               	movlb	4	; () banked
  4092  0020A0  5181               	movf	verifica_fence_externo@i& (0+255),w,b
  4093  0020A2  0101               	movlb	1	; () banked
  4094  0020A4  6F7F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4095  0020A6  6B80               	clrf	(??_verifica_fence_externo+3)& (0+255),b
  4096  0020A8  517D               	movf	??_verifica_fence_externo& (0+255),w,b
  4097  0020AA  5D7F               	subwf	(??_verifica_fence_externo+2)& (0+255),w,b
  4098  0020AC  5180               	movf	(??_verifica_fence_externo+3)& (0+255),w,b
  4099  0020AE  0A80               	xorlw	128
  4100  0020B0  6F81               	movwf	(??_verifica_fence_externo+4)& (0+255),b
  4101  0020B2  517E               	movf	(??_verifica_fence_externo+1)& (0+255),w,b
  4102  0020B4  0A80               	xorlw	128
  4103  0020B6  5981               	subwfb	(??_verifica_fence_externo+4)& (0+255),w,b
  4104  0020B8  A0D8               	btfss	status,0,c
  4105  0020BA  D681               	goto	l125
  4106                           
  4107                           ; BSR set to: 1
  4108                           ;main.c: 363: }
  4109                           ;main.c: 364: }
  4110                           ;main.c: 366: escreve_cmd_lcd(0b00000001);
  4111                           
  4112                           ; BSR set to: 1
  4113  0020BC  0E01               	movlw	1
  4114  0020BE  EC9B  F027         	call	_escreve_cmd_lcd
  4115                           
  4116                           ;main.c: 367: posicao_cursor_lcd(1,5);
  4117  0020C2  0E05               	movlw	5
  4118  0020C4  0100               	movlb	0	; () banked
  4119  0020C6  6F60               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4120  0020C8  0E01               	movlw	1
  4121  0020CA  ECEF  F028         	call	_posicao_cursor_lcd
  4122                           
  4123                           ;main.c: 368: escreve_frase_ram_lcd(poligono_ext[1].point_diff_long);
  4124  0020CE  0E79               	movlw	low (_poligono_ext+121)
  4125  0020D0  0100               	movlb	0	; () banked
  4126  0020D2  6F60               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  4127  0020D4  0E03               	movlw	high (_poligono_ext+121)
  4128  0020D6  6F61               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4129  0020D8  ECDF  F02A         	call	_escreve_frase_ram_lcd	;wreg free
  4130                           
  4131                           ;main.c: 369: posicao_cursor_lcd(2,5);
  4132  0020DC  0E05               	movlw	5
  4133  0020DE  0100               	movlb	0	; () banked
  4134  0020E0  6F60               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4135  0020E2  0E02               	movlw	2
  4136  0020E4  ECEF  F028         	call	_posicao_cursor_lcd
  4137                           
  4138                           ;main.c: 370: escreve_frase_ram_lcd(poligono_ext[1].fence_diff_long);
  4139  0020E8  0E63               	movlw	low (_poligono_ext+99)
  4140  0020EA  0100               	movlb	0	; () banked
  4141  0020EC  6F60               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  4142  0020EE  0E03               	movlw	high (_poligono_ext+99)
  4143  0020F0  6F61               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4144  0020F2  ECDF  F02A         	call	_escreve_frase_ram_lcd	;wreg free
  4145                           
  4146                           ;main.c: 372: escrita_sdcard(poligono_ext[1].point_diff_lat, poligono_ext[1].fence_diff_
      +                          lat);
  4147  0020F6  0E6E               	movlw	low (_poligono_ext+110)
  4148  0020F8  0101               	movlb	1	; () banked
  4149  0020FA  6F79               	movwf	escrita_sdcard@point1& (0+255),b
  4150  0020FC  0E03               	movlw	high (_poligono_ext+110)
  4151  0020FE  6F7A               	movwf	(escrita_sdcard@point1+1)& (0+255),b
  4152  002100  0E58               	movlw	low (_poligono_ext+88)
  4153  002102  6F7B               	movwf	escrita_sdcard@point2& (0+255),b
  4154  002104  0E03               	movlw	high (_poligono_ext+88)
  4155  002106  6F7C               	movwf	(escrita_sdcard@point2+1)& (0+255),b
  4156  002108  ECC2  F026         	call	_escrita_sdcard	;wreg free
  4157  00210C  0012               	return		;funcret
  4158  00210E                     __end_of_verifica_fence_externo:
  4159                           	opt stack 0
  4160                           tosu	equ	0xFFF
  4161                           tosh	equ	0xFFE
  4162                           tosl	equ	0xFFD
  4163                           pclath	equ	0xFFA
  4164                           tblptru	equ	0xFF8
  4165                           tblptrh	equ	0xFF7
  4166                           tblptrl	equ	0xFF6
  4167                           tablat	equ	0xFF5
  4168                           prodh	equ	0xFF4
  4169                           prodl	equ	0xFF3
  4170                           intcon	equ	0xFF2
  4171                           intcon2	equ	0xFF1
  4172                           intcon3	equ	0xFF0
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           indf1	equ	0xFE7
  4176                           postinc1	equ	0xFE6
  4177                           postdec1	equ	0xFE5
  4178                           plusw1	equ	0xFE3
  4179                           fsr1h	equ	0xFE2
  4180                           fsr1l	equ	0xFE1
  4181                           indf2	equ	0xFDF
  4182                           postinc2	equ	0xFDE
  4183                           postdec2	equ	0xFDD
  4184                           plusw2	equ	0xFDB
  4185                           fsr2h	equ	0xFDA
  4186                           fsr2l	equ	0xFD9
  4187                           status	equ	0xFD8
  4188                           
  4189 ;; *************** function _leitura_sdcard *****************
  4190 ;; Defined at:
  4191 ;;		line 246 in file "bibliotecas/SDCard.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;  num_spot        1    wreg     unsigned char 
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;  num_spot        1    0[COMRAM] unsigned char 
  4196 ;;  br              2  131[BANK0 ] unsigned short 
  4197 ;;  offset          2  129[BANK0 ] unsigned int 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  2  127[BANK0 ] PTR unsigned char 
  4200 ;; Registers used:
  4201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4207 ;;      Params:         0       2       0       0       0       0       0       0       0
  4208 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4209 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4210 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4211 ;;Total ram usage:        6 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:   13
  4214 ;; This function calls:
  4215 ;;		_desliga_SPI
  4216 ;;		_desliga_uart
  4217 ;;		_f_close
  4218 ;;		_f_mount
  4219 ;;		_f_open
  4220 ;;		_f_read
  4221 ;;		_inicializa_SPI
  4222 ;;		_inicializa_uart
  4223 ;; This function is called by:
  4224 ;;		_verifica_fence_externo
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text15
  4229  004FC2                     __ptext15:
  4230                           	opt stack 0
  4231  004FC2                     _leitura_sdcard:
  4232                           	opt stack 15
  4233                           
  4234                           ;SDCard.c: 249: static unsigned char size = 88;
  4235                           ;SDCard.c: 250: WORD br;
  4236                           ;SDCard.c: 251: unsigned int offset = 0;
  4237                           
  4238                           ;incstack = 0
  4239  004FC2  0E00               	movlw	0
  4240  004FC4  0100               	movlb	0	; () banked
  4241  004FC6  6FE2               	movwf	(leitura_sdcard@offset+1)& (0+255),b
  4242  004FC8  0E00               	movlw	0
  4243  004FCA  6FE1               	movwf	leitura_sdcard@offset& (0+255),b
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;SDCard.c: 254: PORTBbits.RB3 = 0;
  4247  004FCC  9681               	bcf	3969,3,c	;volatile
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;SDCard.c: 255: desliga_uart();
  4251  004FCE  EC2C  F02E         	call	_desliga_uart	;wreg free
  4252                           
  4253                           ;SDCard.c: 256: inicializa_SPI();
  4254  004FD2  ECB8  F02D         	call	_inicializa_SPI	;wreg free
  4255                           
  4256                           ;SDCard.c: 257: f_mount(0,&fs);
  4257  004FD6  0E82               	movlw	low _fs
  4258  004FD8  6E21               	movwf	f_mount@fs,c
  4259  004FDA  0E04               	movlw	high _fs
  4260  004FDC  6E22               	movwf	f_mount@fs+1,c
  4261  004FDE  0E00               	movlw	0
  4262  004FE0  EC7F  F02B         	call	_f_mount
  4263                           
  4264                           ;SDCard.c: 259: if (f_open(&fil, "extfence.txt", 0x01 ) == FR_OK)
  4265  004FE4  0E06               	movlw	low _fil
  4266  004FE6  0100               	movlb	0	; () banked
  4267  004FE8  6FD6               	movwf	f_open@fp& (0+255),b
  4268  004FEA  0E01               	movlw	high _fil
  4269  004FEC  6FD7               	movwf	(f_open@fp+1)& (0+255),b
  4270  004FEE  0E65               	movlw	low STR_10
  4271  004FF0  6FD8               	movwf	f_open@path& (0+255),b
  4272  004FF2  0E08               	movlw	high STR_10
  4273  004FF4  6FD9               	movwf	(f_open@path+1)& (0+255),b
  4274  004FF6  0E01               	movlw	1
  4275  004FF8  6FDA               	movwf	f_open@mode& (0+255),b
  4276  004FFA  EC69  F012         	call	_f_open	;wreg free
  4277  004FFE  0900               	iorlw	0
  4278  005000  A4D8               	btfss	status,2,c
  4279  005002  D019               	goto	l316
  4280                           
  4281                           ;SDCard.c: 260: {
  4282                           ;SDCard.c: 263: f_read(&fil, dado_arquivo, size, &br);
  4283  005004  0E06               	movlw	low _fil
  4284  005006  0100               	movlb	0	; () banked
  4285  005008  6FB2               	movwf	f_read@fp& (0+255),b
  4286  00500A  0E01               	movlw	high _fil
  4287  00500C  6FB3               	movwf	(f_read@fp+1)& (0+255),b
  4288  00500E  0E2C               	movlw	low _dado_arquivo
  4289  005010  6FB4               	movwf	f_read@buff& (0+255),b
  4290  005012  0E02               	movlw	high _dado_arquivo
  4291  005014  6FB5               	movwf	(f_read@buff+1)& (0+255),b
  4292  005016  C0FF  F0B6         	movff	leitura_sdcard@size,f_read@btr
  4293  00501A  6BB7               	clrf	(f_read@btr+1)& (0+255),b
  4294  00501C  0EE3               	movlw	low leitura_sdcard@br
  4295  00501E  6FB8               	movwf	f_read@br& (0+255),b
  4296  005020  0E00               	movlw	high leitura_sdcard@br
  4297  005022  6FB9               	movwf	(f_read@br+1)& (0+255),b
  4298  005024  ECDD  F009         	call	_f_read	;wreg free
  4299                           
  4300                           ;SDCard.c: 265: f_close(&fil);
  4301  005028  0E06               	movlw	low _fil
  4302  00502A  0100               	movlb	0	; () banked
  4303  00502C  6FAA               	movwf	f_close@fp& (0+255),b
  4304  00502E  0E01               	movlw	high _fil
  4305  005030  6FAB               	movwf	(f_close@fp+1)& (0+255),b
  4306  005032  EC54  F02D         	call	_f_close	;wreg free
  4307  005036                     l316:
  4308                           
  4309                           ;SDCard.c: 266: }
  4310                           ;SDCard.c: 267: PORTBbits.RB3 = 1;
  4311  005036  8681               	bsf	3969,3,c	;volatile
  4312                           
  4313                           ;SDCard.c: 268: desliga_SPI();
  4314  005038  EC45  F02E         	call	_desliga_SPI	;wreg free
  4315                           
  4316                           ;SDCard.c: 269: inicializa_uart();
  4317  00503C  EC94  F02D         	call	_inicializa_uart	;wreg free
  4318                           
  4319                           ;SDCard.c: 271: return (dado_arquivo);
  4320  005040  0E2C               	movlw	low _dado_arquivo
  4321  005042  0100               	movlb	0	; () banked
  4322  005044  6FDF               	movwf	?_leitura_sdcard& (0+255),b
  4323  005046  0E02               	movlw	high _dado_arquivo
  4324  005048  6FE0               	movwf	(?_leitura_sdcard+1)& (0+255),b
  4325  00504A  0012               	return	
  4326  00504C                     __end_of_leitura_sdcard:
  4327                           	opt stack 0
  4328                           tosu	equ	0xFFF
  4329                           tosh	equ	0xFFE
  4330                           tosl	equ	0xFFD
  4331                           pclath	equ	0xFFA
  4332                           tblptru	equ	0xFF8
  4333                           tblptrh	equ	0xFF7
  4334                           tblptrl	equ	0xFF6
  4335                           tablat	equ	0xFF5
  4336                           prodh	equ	0xFF4
  4337                           prodl	equ	0xFF3
  4338                           intcon	equ	0xFF2
  4339                           intcon2	equ	0xFF1
  4340                           intcon3	equ	0xFF0
  4341                           postinc0	equ	0xFEE
  4342                           wreg	equ	0xFE8
  4343                           indf1	equ	0xFE7
  4344                           postinc1	equ	0xFE6
  4345                           postdec1	equ	0xFE5
  4346                           plusw1	equ	0xFE3
  4347                           fsr1h	equ	0xFE2
  4348                           fsr1l	equ	0xFE1
  4349                           indf2	equ	0xFDF
  4350                           postinc2	equ	0xFDE
  4351                           postdec2	equ	0xFDD
  4352                           plusw2	equ	0xFDB
  4353                           fsr2h	equ	0xFDA
  4354                           fsr2l	equ	0xFD9
  4355                           status	equ	0xFD8
  4356                           
  4357 ;; *************** function _f_read *****************
  4358 ;; Defined at:
  4359 ;;		line 924 in file "bibliotecas/tff.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;  fp              2   82[BANK0 ] PTR struct _FIL
  4362 ;;		 -> fil(28), 
  4363 ;;  buff            2   84[BANK0 ] PTR void 
  4364 ;;		 -> dado_arquivo(20), 
  4365 ;;  btr             2   86[BANK0 ] unsigned int 
  4366 ;;  br              2   88[BANK0 ] PTR unsigned int 
  4367 ;;		 -> fgets@rc(2), leitura_sdcard@br(2), 
  4368 ;; Auto vars:     Size  Location     Type
  4369 ;;  sect            4  103[BANK0 ] unsigned long 
  4370 ;;  remain          4   99[BANK0 ] unsigned long 
  4371 ;;  rcnt            2  113[BANK0 ] unsigned int 
  4372 ;;  cc              2  111[BANK0 ] unsigned int 
  4373 ;;  clust           2  109[BANK0 ] unsigned short 
  4374 ;;  rbuff           2  107[BANK0 ] PTR unsigned char 
  4375 ;;		 -> dado_arquivo(20), 
  4376 ;;  res             1   98[BANK0 ] enum E155
  4377 ;; Return value:  Size  Location     Type
  4378 ;;                  1    wreg      enum E3975
  4379 ;; Registers used:
  4380 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/0
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4386 ;;      Params:         0       8       0       0       0       0       0       0       0
  4387 ;;      Locals:         0      17       0       0       0       0       0       0       0
  4388 ;;      Temps:          0       8       0       0       0       0       0       0       0
  4389 ;;      Totals:         0      33       0       0       0       0       0       0       0
  4390 ;;Total ram usage:       33 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; Hardware stack levels required when called:   10
  4393 ;; This function calls:
  4394 ;;		_clust2sect
  4395 ;;		_disk_read
  4396 ;;		_get_cluster
  4397 ;;		_memcpy
  4398 ;;		_move_window
  4399 ;;		_validate
  4400 ;; This function is called by:
  4401 ;;		_leitura_sdcard
  4402 ;;		_fgets
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text16
  4407  0013BA                     __ptext16:
  4408                           	opt stack 0
  4409  0013BA                     _f_read:
  4410                           	opt stack 17
  4411                           
  4412                           ;tff.c: 931: FRESULT res;
  4413                           ;tff.c: 932: DWORD sect, remain;
  4414                           ;tff.c: 933: UINT rcnt, cc;
  4415                           ;tff.c: 934: CLUST clust;
  4416                           ;tff.c: 935: BYTE *rbuff = buff;
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;incstack = 0
  4420  0013BA  C0B4  F0CB         	movff	f_read@buff,f_read@rbuff
  4421  0013BE  C0B5  F0CC         	movff	f_read@buff+1,f_read@rbuff+1
  4422                           
  4423                           ;tff.c: 938: *br = 0;
  4424  0013C2  C0B8  FFD9         	movff	f_read@br,fsr2l
  4425  0013C6  C0B9  FFDA         	movff	f_read@br+1,fsr2h
  4426  0013CA  0E00               	movlw	0
  4427  0013CC  6EDE               	movwf	postinc2,c
  4428  0013CE  0E00               	movlw	0
  4429  0013D0  6EDD               	movwf	postdec2,c
  4430                           
  4431                           ;tff.c: 939: res = validate(fp->fs, fp->id);
  4432  0013D2  0100               	movlb	0	; () banked
  4433  0013D4  EE20 F004          	lfsr	2,4
  4434  0013D8  51B2               	movf	f_read@fp& (0+255),w,b
  4435  0013DA  26D9               	addwf	fsr2l,f,c
  4436  0013DC  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4437  0013DE  22DA               	addwfc	fsr2h,f,c
  4438  0013E0  CFDE F064          	movff	postinc2,validate@fs
  4439  0013E4  CFDD F065          	movff	postdec2,validate@fs+1
  4440  0013E8  C0B2  FFD9         	movff	f_read@fp,fsr2l
  4441  0013EC  C0B3  FFDA         	movff	f_read@fp+1,fsr2h
  4442  0013F0  CFDE F066          	movff	postinc2,validate@id
  4443  0013F4  CFDD F067          	movff	postdec2,validate@id+1
  4444  0013F8  EC59  F02B         	call	_validate	;wreg free
  4445  0013FC  0100               	movlb	0	; () banked
  4446  0013FE  6FC2               	movwf	f_read@res& (0+255),b
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;tff.c: 940: if (res != FR_OK) return res;
  4450  001400  51C2               	movf	f_read@res& (0+255),w,b
  4451  001402  A4D8               	btfss	status,2,c
  4452  001404  0012               	return	
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;tff.c: 941: if (fp->flag & 0x80) return FR_RW_ERROR;
  4456                           
  4457                           ; BSR set to: 0
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;	Return value of _f_read is never used
  4461  001406  EE20 F002          	lfsr	2,2
  4462  00140A  51B2               	movf	f_read@fp& (0+255),w,b
  4463  00140C  26D9               	addwf	fsr2l,f,c
  4464  00140E  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4465  001410  22DA               	addwfc	fsr2h,f,c
  4466  001412  BEDF               	btfsc	indf2,7,c
  4467  001414  0012               	return	
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;tff.c: 942: if (!(fp->flag & 0x01)) return FR_DENIED;
  4471                           
  4472                           ; BSR set to: 0
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;	Return value of _f_read is never used
  4476  001416  EE20 F002          	lfsr	2,2
  4477  00141A  51B2               	movf	f_read@fp& (0+255),w,b
  4478  00141C  26D9               	addwf	fsr2l,f,c
  4479  00141E  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4480  001420  22DA               	addwfc	fsr2h,f,c
  4481  001422  A0DF               	btfss	indf2,0,c
  4482  001424  0012               	return	
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;tff.c: 943: remain = fp->fsize - fp->fptr;
  4486                           
  4487                           ; BSR set to: 0
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;	Return value of _f_read is never used
  4491  001426  EE20 F00A          	lfsr	2,10
  4492  00142A  51B2               	movf	f_read@fp& (0+255),w,b
  4493  00142C  26D9               	addwf	fsr2l,f,c
  4494  00142E  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4495  001430  22DA               	addwfc	fsr2h,f,c
  4496  001432  CFDE F0BA          	movff	postinc2,??_f_read
  4497  001436  CFDE F0BB          	movff	postinc2,??_f_read+1
  4498  00143A  CFDE F0BC          	movff	postinc2,??_f_read+2
  4499  00143E  CFDE F0BD          	movff	postinc2,??_f_read+3
  4500  001442  EE20 F006          	lfsr	2,6
  4501  001446  51B2               	movf	f_read@fp& (0+255),w,b
  4502  001448  26D9               	addwf	fsr2l,f,c
  4503  00144A  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4504  00144C  22DA               	addwfc	fsr2h,f,c
  4505  00144E  CFDE F0BE          	movff	postinc2,??_f_read+4
  4506  001452  CFDE F0BF          	movff	postinc2,??_f_read+5
  4507  001456  CFDE F0C0          	movff	postinc2,??_f_read+6
  4508  00145A  CFDE F0C1          	movff	postinc2,??_f_read+7
  4509  00145E  1FBE               	comf	(??_f_read+4)& (0+255),f,b
  4510  001460  1FBF               	comf	(??_f_read+5)& (0+255),f,b
  4511  001462  1FC0               	comf	(??_f_read+6)& (0+255),f,b
  4512  001464  1FC1               	comf	(??_f_read+7)& (0+255),f,b
  4513  001466  2BBE               	incf	(??_f_read+4)& (0+255),f,b
  4514  001468  0E00               	movlw	0
  4515  00146A  23BF               	addwfc	(??_f_read+5)& (0+255),f,b
  4516  00146C  23C0               	addwfc	(??_f_read+6)& (0+255),f,b
  4517  00146E  23C1               	addwfc	(??_f_read+7)& (0+255),f,b
  4518  001470  51BA               	movf	??_f_read& (0+255),w,b
  4519  001472  25BE               	addwf	(??_f_read+4)& (0+255),w,b
  4520  001474  6FC3               	movwf	f_read@remain& (0+255),b
  4521  001476  51BB               	movf	(??_f_read+1)& (0+255),w,b
  4522  001478  21BF               	addwfc	(??_f_read+5)& (0+255),w,b
  4523  00147A  6FC4               	movwf	(f_read@remain+1)& (0+255),b
  4524  00147C  51BC               	movf	(??_f_read+2)& (0+255),w,b
  4525  00147E  21C0               	addwfc	(??_f_read+6)& (0+255),w,b
  4526  001480  6FC5               	movwf	(f_read@remain+2)& (0+255),b
  4527  001482  51BD               	movf	(??_f_read+3)& (0+255),w,b
  4528  001484  21C1               	addwfc	(??_f_read+7)& (0+255),w,b
  4529  001486  6FC6               	movwf	(f_read@remain+3)& (0+255),b
  4530                           
  4531                           ; BSR set to: 0
  4532                           ;tff.c: 944: if (btr > remain) btr = (UINT)remain;
  4533  001488  51B6               	movf	f_read@btr& (0+255),w,b
  4534  00148A  6FBA               	movwf	??_f_read& (0+255),b
  4535  00148C  51B7               	movf	(f_read@btr+1)& (0+255),w,b
  4536  00148E  6FBB               	movwf	(??_f_read+1)& (0+255),b
  4537  001490  6BBC               	clrf	(??_f_read+2)& (0+255),b
  4538  001492  6BBD               	clrf	(??_f_read+3)& (0+255),b
  4539  001494  51BA               	movf	??_f_read& (0+255),w,b
  4540  001496  5DC3               	subwf	f_read@remain& (0+255),w,b
  4541  001498  51BB               	movf	(??_f_read+1)& (0+255),w,b
  4542  00149A  59C4               	subwfb	(f_read@remain+1)& (0+255),w,b
  4543  00149C  51BC               	movf	(??_f_read+2)& (0+255),w,b
  4544  00149E  59C5               	subwfb	(f_read@remain+2)& (0+255),w,b
  4545  0014A0  51BD               	movf	(??_f_read+3)& (0+255),w,b
  4546  0014A2  59C6               	subwfb	(f_read@remain+3)& (0+255),w,b
  4547  0014A4  B0D8               	btfsc	status,0,c
  4548  0014A6  D1E0               	goto	l1175
  4549                           
  4550                           ; BSR set to: 0
  4551  0014A8  C0C3  F0B6         	movff	f_read@remain,f_read@btr
  4552  0014AC  C0C4  F0B7         	movff	f_read@remain+1,f_read@btr+1
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;tff.c: 946: for ( ; btr;
  4556                           ;tff.c: 947: rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  4557  0014B0  D1DB               	goto	l1175
  4558  0014B2                     
  4559                           ; BSR set to: 0
  4560                           ;tff.c: 948: if ((fp->fptr % 512U) == 0) {
  4561                           
  4562                           ; BSR set to: 0
  4563  0014B2  EE20 F006          	lfsr	2,6
  4564  0014B6  51B2               	movf	f_read@fp& (0+255),w,b
  4565  0014B8  26D9               	addwf	fsr2l,f,c
  4566  0014BA  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4567  0014BC  22DA               	addwfc	fsr2h,f,c
  4568  0014BE  0EFF               	movlw	255
  4569  0014C0  14DE               	andwf	postinc2,w,c
  4570  0014C2  6FBA               	movwf	??_f_read& (0+255),b
  4571  0014C4  0E01               	movlw	1
  4572  0014C6  14DE               	andwf	postinc2,w,c
  4573  0014C8  6FBB               	movwf	(??_f_read+1)& (0+255),b
  4574  0014CA  0E00               	movlw	0
  4575  0014CC  14DE               	andwf	postinc2,w,c
  4576  0014CE  6FBC               	movwf	(??_f_read+2)& (0+255),b
  4577  0014D0  0E00               	movlw	0
  4578  0014D2  14DE               	andwf	postinc2,w,c
  4579  0014D4  6FBD               	movwf	(??_f_read+3)& (0+255),b
  4580  0014D6  51BA               	movf	??_f_read& (0+255),w,b
  4581  0014D8  11BB               	iorwf	(??_f_read+1)& (0+255),w,b
  4582  0014DA  11BC               	iorwf	(??_f_read+2)& (0+255),w,b
  4583  0014DC  11BD               	iorwf	(??_f_read+3)& (0+255),w,b
  4584  0014DE  A4D8               	btfss	status,2,c
  4585  0014E0  D114               	goto	l1177
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;tff.c: 949: if (fp->csect >= fp->fs->csize) {
  4589  0014E2  EE20 F004          	lfsr	2,4
  4590  0014E6  51B2               	movf	f_read@fp& (0+255),w,b
  4591  0014E8  26D9               	addwf	fsr2l,f,c
  4592  0014EA  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4593  0014EC  22DA               	addwfc	fsr2h,f,c
  4594  0014EE  EE10 F01D          	lfsr	1,29
  4595  0014F2  50DE               	movf	postinc2,w,c
  4596  0014F4  26E1               	addwf	fsr1l,f,c
  4597  0014F6  50DD               	movf	postdec2,w,c
  4598  0014F8  22E2               	addwfc	fsr1h,f,c
  4599  0014FA  EE20 F003          	lfsr	2,3
  4600  0014FE  51B2               	movf	f_read@fp& (0+255),w,b
  4601  001500  26D9               	addwf	fsr2l,f,c
  4602  001502  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4603  001504  22DA               	addwfc	fsr2h,f,c
  4604  001506  50E6               	movf	postinc1,w,c
  4605  001508  5CDE               	subwf	postinc2,w,c
  4606  00150A  A0D8               	btfss	status,0,c
  4607  00150C  D053               	goto	l1178
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;tff.c: 950: clust = (fp->fptr == 0) ?
  4611                           ;tff.c: 951: fp->org_clust : get_cluster(fp->curr_clust);
  4612  00150E  EE20 F006          	lfsr	2,6
  4613  001512  51B2               	movf	f_read@fp& (0+255),w,b
  4614  001514  26D9               	addwf	fsr2l,f,c
  4615  001516  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4616  001518  22DA               	addwfc	fsr2h,f,c
  4617  00151A  50DE               	movf	postinc2,w,c
  4618  00151C  10DE               	iorwf	postinc2,w,c
  4619  00151E  10DE               	iorwf	postinc2,w,c
  4620  001520  10DE               	iorwf	postinc2,w,c
  4621  001522  B4D8               	btfsc	status,2,c
  4622  001524  D011               	goto	l1180
  4623                           
  4624                           ; BSR set to: 0
  4625  001526  EE20 F010          	lfsr	2,16
  4626  00152A  51B2               	movf	f_read@fp& (0+255),w,b
  4627  00152C  26D9               	addwf	fsr2l,f,c
  4628  00152E  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4629  001530  22DA               	addwfc	fsr2h,f,c
  4630  001532  CFDE F09F          	movff	postinc2,get_cluster@clust
  4631  001536  CFDD F0A0          	movff	postdec2,get_cluster@clust+1
  4632  00153A  EC03  F01B         	call	_get_cluster	;wreg free
  4633  00153E  C09F  F0CD         	movff	?_get_cluster,f_read@clust
  4634  001542  C0A0  F0CE         	movff	?_get_cluster+1,f_read@clust+1
  4635  001546  D00B               	goto	l1182
  4636  001548                     l1180:
  4637  001548  0100               	movlb	0	; () banked
  4638  00154A  EE20 F00E          	lfsr	2,14
  4639  00154E  51B2               	movf	f_read@fp& (0+255),w,b
  4640  001550  26D9               	addwf	fsr2l,f,c
  4641  001552  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4642  001554  22DA               	addwfc	fsr2h,f,c
  4643  001556  CFDE F0CD          	movff	postinc2,f_read@clust
  4644  00155A  CFDD F0CE          	movff	postdec2,f_read@clust+1
  4645  00155E                     l1182:
  4646                           
  4647                           ;tff.c: 952: if (clust < 2 || clust >= fp->fs->max_clust) goto fr_error;
  4648                           
  4649                           ; BSR set to: 0
  4650  00155E  0100               	movlb	0	; () banked
  4651  001560  51CE               	movf	(f_read@clust+1)& (0+255),w,b
  4652  001562  E104               	bnz	u13820
  4653  001564  0E02               	movlw	2
  4654  001566  5DCD               	subwf	f_read@clust& (0+255),w,b
  4655  001568  A0D8               	btfss	status,0,c
  4656  00156A  D183               	goto	l1186
  4657  00156C                     u13820:
  4658                           
  4659                           ; BSR set to: 0
  4660  00156C  EE20 F004          	lfsr	2,4
  4661  001570  51B2               	movf	f_read@fp& (0+255),w,b
  4662  001572  26D9               	addwf	fsr2l,f,c
  4663  001574  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4664  001576  22DA               	addwfc	fsr2h,f,c
  4665  001578  EE10 F016          	lfsr	1,22
  4666  00157C  50DE               	movf	postinc2,w,c
  4667  00157E  26E1               	addwf	fsr1l,f,c
  4668  001580  50DD               	movf	postdec2,w,c
  4669  001582  22E2               	addwfc	fsr1h,f,c
  4670  001584  50E6               	movf	postinc1,w,c
  4671  001586  5DCD               	subwf	f_read@clust& (0+255),w,b
  4672  001588  50E6               	movf	postinc1,w,c
  4673  00158A  59CE               	subwfb	(f_read@clust+1)& (0+255),w,b
  4674  00158C  B0D8               	btfsc	status,0,c
  4675  00158E  D171               	goto	l1186
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;tff.c: 953: fp->curr_clust = clust;
  4679                           
  4680                           ; BSR set to: 0
  4681                           
  4682                           ; BSR set to: 0
  4683  001590  EE20 F010          	lfsr	2,16
  4684  001594  51B2               	movf	f_read@fp& (0+255),w,b
  4685  001596  26D9               	addwf	fsr2l,f,c
  4686  001598  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4687  00159A  22DA               	addwfc	fsr2h,f,c
  4688  00159C  C0CD  FFDE         	movff	f_read@clust,postinc2
  4689  0015A0  C0CE  FFDD         	movff	f_read@clust+1,postdec2
  4690                           
  4691                           ;tff.c: 954: fp->csect = 0;
  4692  0015A4  EE20 F003          	lfsr	2,3
  4693  0015A8  51B2               	movf	f_read@fp& (0+255),w,b
  4694  0015AA  26D9               	addwf	fsr2l,f,c
  4695  0015AC  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4696  0015AE  22DA               	addwfc	fsr2h,f,c
  4697  0015B0  0E00               	movlw	0
  4698  0015B2  6EDF               	movwf	indf2,c
  4699  0015B4                     l1178:
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;tff.c: 955: }
  4703                           ;tff.c: 956: sect = clust2sect(fp->curr_clust) + fp->csect;
  4704                           
  4705                           ; BSR set to: 0
  4706  0015B4  EE20 F010          	lfsr	2,16
  4707  0015B8  51B2               	movf	f_read@fp& (0+255),w,b
  4708  0015BA  26D9               	addwf	fsr2l,f,c
  4709  0015BC  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4710  0015BE  22DA               	addwfc	fsr2h,f,c
  4711  0015C0  CFDE F06C          	movff	postinc2,clust2sect@clust
  4712  0015C4  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  4713  0015C8  EC23  F024         	call	_clust2sect	;wreg free
  4714  0015CC  0100               	movlb	0	; () banked
  4715  0015CE  EE20 F003          	lfsr	2,3
  4716  0015D2  51B2               	movf	f_read@fp& (0+255),w,b
  4717  0015D4  26D9               	addwf	fsr2l,f,c
  4718  0015D6  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4719  0015D8  22DA               	addwfc	fsr2h,f,c
  4720  0015DA  50DF               	movf	indf2,w,c
  4721  0015DC  6FBA               	movwf	??_f_read& (0+255),b
  4722  0015DE  51BA               	movf	??_f_read& (0+255),w,b
  4723  0015E0  256C               	addwf	?_clust2sect& (0+255),w,b
  4724  0015E2  6FC7               	movwf	f_read@sect& (0+255),b
  4725  0015E4  0E00               	movlw	0
  4726  0015E6  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  4727  0015E8  6FC8               	movwf	(f_read@sect+1)& (0+255),b
  4728  0015EA  0E00               	movlw	0
  4729  0015EC  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  4730  0015EE  6FC9               	movwf	(f_read@sect+2)& (0+255),b
  4731  0015F0  0E00               	movlw	0
  4732  0015F2  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  4733  0015F4  6FCA               	movwf	(f_read@sect+3)& (0+255),b
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;tff.c: 957: cc = btr / 512U;
  4737  0015F6  C0B6  F0BA         	movff	f_read@btr,??_f_read
  4738  0015FA  C0B7  F0BB         	movff	f_read@btr+1,??_f_read+1
  4739  0015FE  0E09               	movlw	9
  4740  001600  6FBC               	movwf	(??_f_read+2)& (0+255),b
  4741  001602                     u13845:
  4742  001602  90D8               	bcf	status,0,c
  4743  001604  33BB               	rrcf	(??_f_read+1)& (0+255),f,b
  4744  001606  33BA               	rrcf	??_f_read& (0+255),f,b
  4745  001608  2FBC               	decfsz	(??_f_read+2)& (0+255),f,b
  4746  00160A  D7FB               	goto	u13845
  4747  00160C  C0BA  F0CF         	movff	??_f_read,f_read@cc
  4748  001610  C0BB  F0D0         	movff	??_f_read+1,f_read@cc+1
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;tff.c: 958: if (cc) {
  4752  001614  51CF               	movf	f_read@cc& (0+255),w,b
  4753  001616  11D0               	iorwf	(f_read@cc+1)& (0+255),w,b
  4754  001618  B4D8               	btfsc	status,2,c
  4755  00161A  D070               	goto	l1187
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;tff.c: 959: if (fp->csect + cc > fp->fs->csize)
  4759  00161C  EE20 F003          	lfsr	2,3
  4760  001620  51B2               	movf	f_read@fp& (0+255),w,b
  4761  001622  26D9               	addwf	fsr2l,f,c
  4762  001624  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4763  001626  22DA               	addwfc	fsr2h,f,c
  4764  001628  50DF               	movf	indf2,w,c
  4765  00162A  6FBA               	movwf	??_f_read& (0+255),b
  4766  00162C  51BA               	movf	??_f_read& (0+255),w,b
  4767  00162E  25CF               	addwf	f_read@cc& (0+255),w,b
  4768  001630  6FBB               	movwf	(??_f_read+1)& (0+255),b
  4769  001632  0E00               	movlw	0
  4770  001634  21D0               	addwfc	(f_read@cc+1)& (0+255),w,b
  4771  001636  6FBC               	movwf	(??_f_read+2)& (0+255),b
  4772  001638  EE20 F004          	lfsr	2,4
  4773  00163C  51B2               	movf	f_read@fp& (0+255),w,b
  4774  00163E  26D9               	addwf	fsr2l,f,c
  4775  001640  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4776  001642  22DA               	addwfc	fsr2h,f,c
  4777  001644  EE10 F01D          	lfsr	1,29
  4778  001648  50DE               	movf	postinc2,w,c
  4779  00164A  26E1               	addwf	fsr1l,f,c
  4780  00164C  50DD               	movf	postdec2,w,c
  4781  00164E  22E2               	addwfc	fsr1h,f,c
  4782  001650  50E7               	movf	indf1,w,c
  4783  001652  6FBD               	movwf	(??_f_read+3)& (0+255),b
  4784  001654  6BBE               	clrf	(??_f_read+4)& (0+255),b
  4785  001656  51BB               	movf	(??_f_read+1)& (0+255),w,b
  4786  001658  5DBD               	subwf	(??_f_read+3)& (0+255),w,b
  4787  00165A  51BC               	movf	(??_f_read+2)& (0+255),w,b
  4788  00165C  59BE               	subwfb	(??_f_read+4)& (0+255),w,b
  4789  00165E  B0D8               	btfsc	status,0,c
  4790  001660  D021               	goto	l1188
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;tff.c: 960: cc = fp->fs->csize - fp->csect;
  4794  001662  EE20 F003          	lfsr	2,3
  4795  001666  51B2               	movf	f_read@fp& (0+255),w,b
  4796  001668  26D9               	addwf	fsr2l,f,c
  4797  00166A  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4798  00166C  22DA               	addwfc	fsr2h,f,c
  4799  00166E  50DF               	movf	indf2,w,c
  4800  001670  6FBA               	movwf	??_f_read& (0+255),b
  4801  001672  6BBB               	clrf	(??_f_read+1)& (0+255),b
  4802  001674  1FBA               	comf	??_f_read& (0+255),f,b
  4803  001676  1FBB               	comf	(??_f_read+1)& (0+255),f,b
  4804  001678  4BBA               	infsnz	??_f_read& (0+255),f,b
  4805  00167A  2BBB               	incf	(??_f_read+1)& (0+255),f,b
  4806  00167C  EE20 F004          	lfsr	2,4
  4807  001680  51B2               	movf	f_read@fp& (0+255),w,b
  4808  001682  26D9               	addwf	fsr2l,f,c
  4809  001684  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4810  001686  22DA               	addwfc	fsr2h,f,c
  4811  001688  EE10 F01D          	lfsr	1,29
  4812  00168C  50DE               	movf	postinc2,w,c
  4813  00168E  26E1               	addwf	fsr1l,f,c
  4814  001690  50DD               	movf	postdec2,w,c
  4815  001692  22E2               	addwfc	fsr1h,f,c
  4816  001694  50E7               	movf	indf1,w,c
  4817  001696  6FBC               	movwf	(??_f_read+2)& (0+255),b
  4818  001698  51BC               	movf	(??_f_read+2)& (0+255),w,b
  4819  00169A  25BA               	addwf	??_f_read& (0+255),w,b
  4820  00169C  6FCF               	movwf	f_read@cc& (0+255),b
  4821  00169E  0E00               	movlw	0
  4822  0016A0  21BB               	addwfc	(??_f_read+1)& (0+255),w,b
  4823  0016A2  6FD0               	movwf	(f_read@cc+1)& (0+255),b
  4824  0016A4                     l1188:
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;tff.c: 961: if (disk_read(0, rbuff, sect, (BYTE)cc) != RES_OK)
  4828                           
  4829                           ; BSR set to: 0
  4830  0016A4  C0CB  F07F         	movff	f_read@rbuff,disk_read@buff
  4831  0016A8  C0CC  F080         	movff	f_read@rbuff+1,disk_read@buff+1
  4832  0016AC  C0C7  F081         	movff	f_read@sect,disk_read@sector
  4833  0016B0  C0C8  F082         	movff	f_read@sect+1,disk_read@sector+1
  4834  0016B4  C0C9  F083         	movff	f_read@sect+2,disk_read@sector+2
  4835  0016B8  C0CA  F084         	movff	f_read@sect+3,disk_read@sector+3
  4836  0016BC  C0CF  F085         	movff	f_read@cc,disk_read@count
  4837  0016C0  0E00               	movlw	0
  4838  0016C2  EC0D  F027         	call	_disk_read
  4839  0016C6  0900               	iorlw	0
  4840  0016C8  A4D8               	btfss	status,2,c
  4841  0016CA  D0D3               	goto	l1186
  4842                           
  4843                           ;tff.c: 963: fp->csect += (BYTE)cc;
  4844                           
  4845                           ;tff.c: 962: goto fr_error;
  4846  0016CC  0100               	movlb	0	; () banked
  4847  0016CE  EE20 F003          	lfsr	2,3
  4848  0016D2  51B2               	movf	f_read@fp& (0+255),w,b
  4849  0016D4  26D9               	addwf	fsr2l,f,c
  4850  0016D6  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4851  0016D8  22DA               	addwfc	fsr2h,f,c
  4852  0016DA  51CF               	movf	f_read@cc& (0+255),w,b
  4853  0016DC  26DF               	addwf	indf2,f,c
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;tff.c: 964: rcnt = 512U * cc;
  4857  0016DE  C0CF  F0BA         	movff	f_read@cc,??_f_read
  4858  0016E2  C0D0  F0BB         	movff	f_read@cc+1,??_f_read+1
  4859  0016E6  0E09               	movlw	9
  4860  0016E8                     u13885:
  4861  0016E8  90D8               	bcf	status,0,c
  4862  0016EA  37BA               	rlcf	??_f_read& (0+255),f,b
  4863  0016EC  37BB               	rlcf	(??_f_read+1)& (0+255),f,b
  4864  0016EE  2EE8               	decfsz	wreg,f,c
  4865  0016F0  D7FB               	goto	u13885
  4866  0016F2  C0BA  F0D1         	movff	??_f_read,f_read@rcnt
  4867  0016F6  C0BB  F0D2         	movff	??_f_read+1,f_read@rcnt+1
  4868                           
  4869                           ;tff.c: 965: continue;
  4870  0016FA  D098               	goto	l1190
  4871  0016FC                     l1187:
  4872                           
  4873                           ; BSR set to: 0
  4874                           ;tff.c: 966: }
  4875                           ;tff.c: 967: fp->csect++;
  4876                           
  4877                           ; BSR set to: 0
  4878  0016FC  EE20 F003          	lfsr	2,3
  4879  001700  51B2               	movf	f_read@fp& (0+255),w,b
  4880  001702  26D9               	addwf	fsr2l,f,c
  4881  001704  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4882  001706  22DA               	addwfc	fsr2h,f,c
  4883  001708  2ADF               	incf	indf2,f,c
  4884  00170A                     l1177:
  4885                           
  4886                           ; BSR set to: 0
  4887                           ;tff.c: 968: }
  4888                           ;tff.c: 969: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  4889                           
  4890                           ; BSR set to: 0
  4891  00170A  EE20 F010          	lfsr	2,16
  4892  00170E  51B2               	movf	f_read@fp& (0+255),w,b
  4893  001710  26D9               	addwf	fsr2l,f,c
  4894  001712  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4895  001714  22DA               	addwfc	fsr2h,f,c
  4896  001716  CFDE F06C          	movff	postinc2,clust2sect@clust
  4897  00171A  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  4898  00171E  EC23  F024         	call	_clust2sect	;wreg free
  4899  001722  0100               	movlb	0	; () banked
  4900  001724  EE20 F003          	lfsr	2,3
  4901  001728  51B2               	movf	f_read@fp& (0+255),w,b
  4902  00172A  26D9               	addwf	fsr2l,f,c
  4903  00172C  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4904  00172E  22DA               	addwfc	fsr2h,f,c
  4905  001730  50DF               	movf	indf2,w,c
  4906  001732  6FBA               	movwf	??_f_read& (0+255),b
  4907  001734  51BA               	movf	??_f_read& (0+255),w,b
  4908  001736  256C               	addwf	?_clust2sect& (0+255),w,b
  4909  001738  6FBB               	movwf	(??_f_read+1)& (0+255),b
  4910  00173A  0E00               	movlw	0
  4911  00173C  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  4912  00173E  6FBC               	movwf	(??_f_read+2)& (0+255),b
  4913  001740  0E00               	movlw	0
  4914  001742  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  4915  001744  6FBD               	movwf	(??_f_read+3)& (0+255),b
  4916  001746  0E00               	movlw	0
  4917  001748  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  4918  00174A  6FBE               	movwf	(??_f_read+4)& (0+255),b
  4919  00174C  0EFF               	movlw	255
  4920  00174E  25BB               	addwf	(??_f_read+1)& (0+255),w,b
  4921  001750  6FC7               	movwf	f_read@sect& (0+255),b
  4922  001752  0EFF               	movlw	255
  4923  001754  21BC               	addwfc	(??_f_read+2)& (0+255),w,b
  4924  001756  6FC8               	movwf	(f_read@sect+1)& (0+255),b
  4925  001758  0EFF               	movlw	255
  4926  00175A  21BD               	addwfc	(??_f_read+3)& (0+255),w,b
  4927  00175C  6FC9               	movwf	(f_read@sect+2)& (0+255),b
  4928  00175E  0EFF               	movlw	255
  4929  001760  21BE               	addwfc	(??_f_read+4)& (0+255),w,b
  4930  001762  6FCA               	movwf	(f_read@sect+3)& (0+255),b
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;tff.c: 970: if (!move_window(sect)) goto fr_error;
  4934  001764  C0C7  F08A         	movff	f_read@sect,move_window@sector
  4935  001768  C0C8  F08B         	movff	f_read@sect+1,move_window@sector+1
  4936  00176C  C0C9  F08C         	movff	f_read@sect+2,move_window@sector+2
  4937  001770  C0CA  F08D         	movff	f_read@sect+3,move_window@sector+3
  4938  001774  ECD9  F01D         	call	_move_window	;wreg free
  4939  001778  0900               	iorlw	0
  4940  00177A  B4D8               	btfsc	status,2,c
  4941  00177C  D07A               	goto	l1186
  4942                           
  4943                           ;tff.c: 971: rcnt = 512U - (fp->fptr % 512U);
  4944  00177E  0EFF               	movlw	255
  4945  001780  0100               	movlb	0	; () banked
  4946  001782  6FBA               	movwf	??_f_read& (0+255),b
  4947  001784  0E01               	movlw	1
  4948  001786  6FBB               	movwf	(??_f_read+1)& (0+255),b
  4949  001788  EE20 F006          	lfsr	2,6
  4950  00178C  51B2               	movf	f_read@fp& (0+255),w,b
  4951  00178E  26D9               	addwf	fsr2l,f,c
  4952  001790  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4953  001792  22DA               	addwfc	fsr2h,f,c
  4954  001794  CFDE F0BC          	movff	postinc2,??_f_read+2
  4955  001798  CFDD F0BD          	movff	postdec2,??_f_read+3
  4956  00179C  51BA               	movf	??_f_read& (0+255),w,b
  4957  00179E  17BC               	andwf	(??_f_read+2)& (0+255),f,b
  4958  0017A0  51BB               	movf	(??_f_read+1)& (0+255),w,b
  4959  0017A2  17BD               	andwf	(??_f_read+3)& (0+255),f,b
  4960  0017A4  1FBC               	comf	(??_f_read+2)& (0+255),f,b
  4961  0017A6  1FBD               	comf	(??_f_read+3)& (0+255),f,b
  4962  0017A8  4BBC               	infsnz	(??_f_read+2)& (0+255),f,b
  4963  0017AA  2BBD               	incf	(??_f_read+3)& (0+255),f,b
  4964  0017AC  0E00               	movlw	0
  4965  0017AE  25BC               	addwf	(??_f_read+2)& (0+255),w,b
  4966  0017B0  6FD1               	movwf	f_read@rcnt& (0+255),b
  4967  0017B2  0E02               	movlw	2
  4968  0017B4  21BD               	addwfc	(??_f_read+3)& (0+255),w,b
  4969  0017B6  6FD2               	movwf	(f_read@rcnt+1)& (0+255),b
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;tff.c: 972: if (rcnt > btr) rcnt = btr;
  4973  0017B8  51D1               	movf	f_read@rcnt& (0+255),w,b
  4974  0017BA  5DB6               	subwf	f_read@btr& (0+255),w,b
  4975  0017BC  51D2               	movf	(f_read@rcnt+1)& (0+255),w,b
  4976  0017BE  59B7               	subwfb	(f_read@btr+1)& (0+255),w,b
  4977  0017C0  B0D8               	btfsc	status,0,c
  4978  0017C2  D004               	goto	l1192
  4979                           
  4980                           ; BSR set to: 0
  4981  0017C4  C0B6  F0D1         	movff	f_read@btr,f_read@rcnt
  4982  0017C8  C0B7  F0D2         	movff	f_read@btr+1,f_read@rcnt+1
  4983  0017CC                     l1192:
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;tff.c: 973: memcpy(rbuff, &fp->fs->win[fp->fptr % 512U], rcnt);
  4987                           
  4988                           ; BSR set to: 0
  4989  0017CC  C0CB  F060         	movff	f_read@rbuff,memcpy@d1
  4990  0017D0  C0CC  F061         	movff	f_read@rbuff+1,memcpy@d1+1
  4991  0017D4  0EFF               	movlw	255
  4992  0017D6  6FBA               	movwf	??_f_read& (0+255),b
  4993  0017D8  0E01               	movlw	1
  4994  0017DA  6FBB               	movwf	(??_f_read+1)& (0+255),b
  4995  0017DC  EE20 F006          	lfsr	2,6
  4996  0017E0  51B2               	movf	f_read@fp& (0+255),w,b
  4997  0017E2  26D9               	addwf	fsr2l,f,c
  4998  0017E4  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  4999  0017E6  22DA               	addwfc	fsr2h,f,c
  5000  0017E8  CFDE F0BC          	movff	postinc2,??_f_read+2
  5001  0017EC  CFDD F0BD          	movff	postdec2,??_f_read+3
  5002  0017F0  51BA               	movf	??_f_read& (0+255),w,b
  5003  0017F2  17BC               	andwf	(??_f_read+2)& (0+255),f,b
  5004  0017F4  51BB               	movf	(??_f_read+1)& (0+255),w,b
  5005  0017F6  17BD               	andwf	(??_f_read+3)& (0+255),f,b
  5006  0017F8  0E20               	movlw	32
  5007  0017FA  27BC               	addwf	(??_f_read+2)& (0+255),f,b
  5008  0017FC  0E00               	movlw	0
  5009  0017FE  23BD               	addwfc	(??_f_read+3)& (0+255),f,b
  5010  001800  EE20 F004          	lfsr	2,4
  5011  001804  51B2               	movf	f_read@fp& (0+255),w,b
  5012  001806  26D9               	addwf	fsr2l,f,c
  5013  001808  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  5014  00180A  22DA               	addwfc	fsr2h,f,c
  5015  00180C  CFDE F0BE          	movff	postinc2,??_f_read+4
  5016  001810  CFDD F0BF          	movff	postdec2,??_f_read+5
  5017  001814  51BC               	movf	(??_f_read+2)& (0+255),w,b
  5018  001816  25BE               	addwf	(??_f_read+4)& (0+255),w,b
  5019  001818  6F62               	movwf	memcpy@s1& (0+255),b
  5020  00181A  51BD               	movf	(??_f_read+3)& (0+255),w,b
  5021  00181C  21BF               	addwfc	(??_f_read+5)& (0+255),w,b
  5022  00181E  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  5023  001820  C0D1  F064         	movff	f_read@rcnt,memcpy@n
  5024  001824  C0D2  F065         	movff	f_read@rcnt+1,memcpy@n+1
  5025  001828  ECA4  F02B         	call	_memcpy	;wreg free
  5026  00182C                     l1190:
  5027  00182C  0100               	movlb	0	; () banked
  5028  00182E  51D1               	movf	f_read@rcnt& (0+255),w,b
  5029  001830  27CB               	addwf	f_read@rbuff& (0+255),f,b
  5030  001832  51D2               	movf	(f_read@rcnt+1)& (0+255),w,b
  5031  001834  23CC               	addwfc	(f_read@rbuff+1)& (0+255),f,b
  5032                           
  5033                           ; BSR set to: 0
  5034  001836  EE20 F006          	lfsr	2,6
  5035  00183A  51B2               	movf	f_read@fp& (0+255),w,b
  5036  00183C  26D9               	addwf	fsr2l,f,c
  5037  00183E  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  5038  001840  22DA               	addwfc	fsr2h,f,c
  5039  001842  51D1               	movf	f_read@rcnt& (0+255),w,b
  5040  001844  26DE               	addwf	postinc2,f,c
  5041  001846  51D2               	movf	(f_read@rcnt+1)& (0+255),w,b
  5042  001848  22DE               	addwfc	postinc2,f,c
  5043  00184A  0E00               	movlw	0
  5044  00184C  22DE               	addwfc	postinc2,f,c
  5045  00184E  22DE               	addwfc	postinc2,f,c
  5046                           
  5047                           ; BSR set to: 0
  5048  001850  C0B8  FFD9         	movff	f_read@br,fsr2l
  5049  001854  C0B9  FFDA         	movff	f_read@br+1,fsr2h
  5050  001858  51D1               	movf	f_read@rcnt& (0+255),w,b
  5051  00185A  26DE               	addwf	postinc2,f,c
  5052  00185C  51D2               	movf	(f_read@rcnt+1)& (0+255),w,b
  5053  00185E  22DD               	addwfc	postdec2,f,c
  5054                           
  5055                           ; BSR set to: 0
  5056  001860  51D1               	movf	f_read@rcnt& (0+255),w,b
  5057  001862  5FB6               	subwf	f_read@btr& (0+255),f,b
  5058  001864  51D2               	movf	(f_read@rcnt+1)& (0+255),w,b
  5059  001866  5BB7               	subwfb	(f_read@btr+1)& (0+255),f,b
  5060  001868                     l1175:
  5061                           
  5062                           ; BSR set to: 0
  5063                           
  5064                           ; BSR set to: 0
  5065  001868  51B6               	movf	f_read@btr& (0+255),w,b
  5066  00186A  11B7               	iorwf	(f_read@btr+1)& (0+255),w,b
  5067  00186C  B4D8               	btfsc	status,2,c
  5068  00186E  0012               	return	
  5069  001870  D620               	goto	l1176
  5070  001872                     l1186:
  5071                           
  5072                           ;tff.c: 979: fp->flag |= 0x80;
  5073                           
  5074                           ; BSR set to: 0
  5075  001872  0100               	movlb	0	; () banked
  5076  001874  EE20 F002          	lfsr	2,2
  5077  001878  51B2               	movf	f_read@fp& (0+255),w,b
  5078  00187A  26D9               	addwf	fsr2l,f,c
  5079  00187C  51B3               	movf	(f_read@fp+1)& (0+255),w,b
  5080  00187E  22DA               	addwfc	fsr2h,f,c
  5081  001880  0E00               	movlw	0
  5082  001882  8EDB               	bsf	plusw2,7,c
  5083  001884  0012               	return	
  5084  001886                     __end_of_f_read:
  5085                           	opt stack 0
  5086                           tosu	equ	0xFFF
  5087                           tosh	equ	0xFFE
  5088                           tosl	equ	0xFFD
  5089                           pclath	equ	0xFFA
  5090                           tblptru	equ	0xFF8
  5091                           tblptrh	equ	0xFF7
  5092                           tblptrl	equ	0xFF6
  5093                           tablat	equ	0xFF5
  5094                           prodh	equ	0xFF4
  5095                           prodl	equ	0xFF3
  5096                           intcon	equ	0xFF2
  5097                           intcon2	equ	0xFF1
  5098                           intcon3	equ	0xFF0
  5099                           postinc0	equ	0xFEE
  5100                           wreg	equ	0xFE8
  5101                           indf1	equ	0xFE7
  5102                           postinc1	equ	0xFE6
  5103                           postdec1	equ	0xFE5
  5104                           plusw1	equ	0xFE3
  5105                           fsr1h	equ	0xFE2
  5106                           fsr1l	equ	0xFE1
  5107                           indf2	equ	0xFDF
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           plusw2	equ	0xFDB
  5111                           fsr2h	equ	0xFDA
  5112                           fsr2l	equ	0xFD9
  5113                           status	equ	0xFD8
  5114                           
  5115 ;; *************** function _escrita_sdcard *****************
  5116 ;; Defined at:
  5117 ;;		line 206 in file "bibliotecas/SDCard.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;  point1          2   43[BANK1 ] PTR unsigned char 
  5120 ;;		 -> poligono_ext(198), 
  5121 ;;  point2          2   45[BANK1 ] PTR unsigned char 
  5122 ;;		 -> poligono_ext(198), 
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;  bw              2    0        unsigned short 
  5125 ;; Return value:  Size  Location     Type
  5126 ;;                  1    wreg      void 
  5127 ;; Registers used:
  5128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 0/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5134 ;;      Params:         0       0       4       0       0       0       0       0       0
  5135 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5136 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5137 ;;      Totals:         0       0       4       0       0       0       0       0       0
  5138 ;;Total ram usage:        4 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; Hardware stack levels required when called:   15
  5141 ;; This function calls:
  5142 ;;		_desliga_SPI
  5143 ;;		_desliga_uart
  5144 ;;		_f_close
  5145 ;;		_f_lseek
  5146 ;;		_f_mount
  5147 ;;		_f_open
  5148 ;;		_fprintf
  5149 ;;		_inicializa_SPI
  5150 ;;		_inicializa_uart
  5151 ;; This function is called by:
  5152 ;;		_verifica_fence_externo
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           	psect	text17
  5157  004D84                     __ptext17:
  5158                           	opt stack 0
  5159  004D84                     _escrita_sdcard:
  5160                           	opt stack 13
  5161                           
  5162                           ;SDCard.c: 208: WORD bw;
  5163                           ;SDCard.c: 209: PORTBbits.RB3 = 0;
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;incstack = 0
  5167  004D84  9681               	bcf	3969,3,c	;volatile
  5168                           
  5169                           ;SDCard.c: 210: desliga_uart();
  5170  004D86  EC2C  F02E         	call	_desliga_uart	;wreg free
  5171                           
  5172                           ;SDCard.c: 211: inicializa_SPI();
  5173  004D8A  ECB8  F02D         	call	_inicializa_SPI	;wreg free
  5174                           
  5175                           ;SDCard.c: 212: f_mount(0,&fs);
  5176  004D8E  0E82               	movlw	low _fs
  5177  004D90  6E21               	movwf	f_mount@fs,c
  5178  004D92  0E04               	movlw	high _fs
  5179  004D94  6E22               	movwf	f_mount@fs+1,c
  5180  004D96  0E00               	movlw	0
  5181  004D98  EC7F  F02B         	call	_f_mount
  5182                           
  5183                           ;SDCard.c: 216: if (f_open(&fil, filename, 0x10 | 0x02 ) == FR_OK)
  5184  004D9C  0E06               	movlw	low _fil
  5185  004D9E  0100               	movlb	0	; () banked
  5186  004DA0  6FD6               	movwf	f_open@fp& (0+255),b
  5187  004DA2  0E01               	movlw	high _fil
  5188  004DA4  6FD7               	movwf	(f_open@fp+1)& (0+255),b
  5189  004DA6  0E82               	movlw	low _filename
  5190  004DA8  6FD8               	movwf	f_open@path& (0+255),b
  5191  004DAA  0E02               	movlw	high _filename
  5192  004DAC  6FD9               	movwf	(f_open@path+1)& (0+255),b
  5193  004DAE  0E12               	movlw	18
  5194  004DB0  6FDA               	movwf	f_open@mode& (0+255),b
  5195  004DB2  EC69  F012         	call	_f_open	;wreg free
  5196  004DB6  0900               	iorlw	0
  5197  004DB8  A4D8               	btfss	status,2,c
  5198  004DBA  D029               	goto	l310
  5199                           
  5200                           ;SDCard.c: 217: {
  5201                           ;SDCard.c: 219: f_lseek(&fil, ((&fil)->fsize));
  5202  004DBC  0E06               	movlw	low _fil
  5203  004DBE  0100               	movlb	0	; () banked
  5204  004DC0  6FC3               	movwf	f_lseek@fp& (0+255),b
  5205  004DC2  0E01               	movlw	high _fil
  5206  004DC4  6FC4               	movwf	(f_lseek@fp+1)& (0+255),b
  5207  004DC6  C110  F0C5         	movff	_fil+10,f_lseek@ofs
  5208  004DCA  C111  F0C6         	movff	_fil+11,f_lseek@ofs+1
  5209  004DCE  C112  F0C7         	movff	_fil+12,f_lseek@ofs+2
  5210  004DD2  C113  F0C8         	movff	_fil+13,f_lseek@ofs+3
  5211  004DD6  EC43  F00C         	call	_f_lseek	;wreg free
  5212                           
  5213                           ;SDCard.c: 225: fprintf(&fil, "\n%s ; %s ;", point1, point2);
  5214  004DDA  0E06               	movlw	low _fil
  5215  004DDC  0101               	movlb	1	; () banked
  5216  004DDE  6F4E               	movwf	fprintf@fil& (0+255),b
  5217  004DE0  0E01               	movlw	high _fil
  5218  004DE2  6F4F               	movwf	(fprintf@fil+1)& (0+255),b
  5219  004DE4  0E88               	movlw	low STR_9
  5220  004DE6  6F50               	movwf	fprintf@str& (0+255),b
  5221  004DE8  0E08               	movlw	high STR_9
  5222  004DEA  6F51               	movwf	(fprintf@str+1)& (0+255),b
  5223  004DEC  C179  F152         	movff	escrita_sdcard@point1,?_fprintf+4
  5224  004DF0  C17A  F153         	movff	escrita_sdcard@point1+1,?_fprintf+5
  5225  004DF4  C17B  F154         	movff	escrita_sdcard@point2,?_fprintf+6
  5226  004DF8  C17C  F155         	movff	escrita_sdcard@point2+1,?_fprintf+7
  5227  004DFC  EC87  F010         	call	_fprintf	;wreg free
  5228                           
  5229                           ;SDCard.c: 228: f_close(&fil);
  5230  004E00  0E06               	movlw	low _fil
  5231  004E02  0100               	movlb	0	; () banked
  5232  004E04  6FAA               	movwf	f_close@fp& (0+255),b
  5233  004E06  0E01               	movlw	high _fil
  5234  004E08  6FAB               	movwf	(f_close@fp+1)& (0+255),b
  5235  004E0A  EC54  F02D         	call	_f_close	;wreg free
  5236  004E0E                     l310:
  5237                           
  5238                           ;SDCard.c: 229: }
  5239                           ;SDCard.c: 231: PORTBbits.RB3 = 1;
  5240  004E0E  8681               	bsf	3969,3,c	;volatile
  5241                           
  5242                           ;SDCard.c: 232: desliga_SPI();
  5243  004E10  EC45  F02E         	call	_desliga_SPI	;wreg free
  5244                           
  5245                           ;SDCard.c: 233: inicializa_uart();
  5246  004E14  EC94  F02D         	call	_inicializa_uart	;wreg free
  5247  004E18  0012               	return	
  5248  004E1A                     __end_of_escrita_sdcard:
  5249                           	opt stack 0
  5250                           tosu	equ	0xFFF
  5251                           tosh	equ	0xFFE
  5252                           tosl	equ	0xFFD
  5253                           pclath	equ	0xFFA
  5254                           tblptru	equ	0xFF8
  5255                           tblptrh	equ	0xFF7
  5256                           tblptrl	equ	0xFF6
  5257                           tablat	equ	0xFF5
  5258                           prodh	equ	0xFF4
  5259                           prodl	equ	0xFF3
  5260                           intcon	equ	0xFF2
  5261                           intcon2	equ	0xFF1
  5262                           intcon3	equ	0xFF0
  5263                           postinc0	equ	0xFEE
  5264                           wreg	equ	0xFE8
  5265                           indf1	equ	0xFE7
  5266                           postinc1	equ	0xFE6
  5267                           postdec1	equ	0xFE5
  5268                           plusw1	equ	0xFE3
  5269                           fsr1h	equ	0xFE2
  5270                           fsr1l	equ	0xFE1
  5271                           indf2	equ	0xFDF
  5272                           postinc2	equ	0xFDE
  5273                           postdec2	equ	0xFDD
  5274                           plusw2	equ	0xFDB
  5275                           fsr2h	equ	0xFDA
  5276                           fsr2l	equ	0xFD9
  5277                           status	equ	0xFD8
  5278                           
  5279 ;; *************** function _inicializa_uart *****************
  5280 ;; Defined at:
  5281 ;;		line 206 in file "bibliotecas/uart.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;		None
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;		None
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  1    wreg      void 
  5288 ;; Registers used:
  5289 ;;		wreg, status,2, status,0, cstack
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5295 ;;      Params:         0       0       0       0       0       0       0       0       0
  5296 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5297 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5298 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5299 ;;Total ram usage:        0 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:    5
  5302 ;; This function calls:
  5303 ;;		_configura_baudrate_uart
  5304 ;; This function is called by:
  5305 ;;		_main
  5306 ;;		_escrita_sdcard
  5307 ;;		_leitura_sdcard
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           	psect	text18
  5312  005B28                     __ptext18:
  5313                           	opt stack 0
  5314  005B28                     _inicializa_uart:
  5315                           	opt stack 25
  5316                           
  5317                           ;uart.c: 208: TRISCbits.RC6 = 0;
  5318                           
  5319                           ;incstack = 0
  5320  005B28  9C94               	bcf	3988,6,c	;volatile
  5321                           
  5322                           ;uart.c: 209: TRISCbits.RC7 = 0;
  5323  005B2A  9E94               	bcf	3988,7,c	;volatile
  5324                           
  5325                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  5326  005B2C  0E80               	movlw	128
  5327  005B2E  0100               	movlb	0	; () banked
  5328  005B30  6F6E               	movwf	configura_baudrate_uart@baudrate& (0+255),b
  5329  005B32  0E25               	movlw	37
  5330  005B34  6F6F               	movwf	(configura_baudrate_uart@baudrate+1)& (0+255),b
  5331  005B36  0E00               	movlw	0
  5332  005B38  6F70               	movwf	(configura_baudrate_uart@baudrate+2)& (0+255),b
  5333  005B3A  0E00               	movlw	0
  5334  005B3C  6F71               	movwf	(configura_baudrate_uart@baudrate+3)& (0+255),b
  5335  005B3E  EC0B  F022         	call	_configura_baudrate_uart	;wreg free
  5336                           
  5337                           ;uart.c: 213: TXSTA = 0x20;
  5338  005B42  0E20               	movlw	32
  5339  005B44  6EAC               	movwf	4012,c	;volatile
  5340                           
  5341                           ;uart.c: 214: RCSTA = 0x90;
  5342  005B46  0E90               	movlw	144
  5343  005B48  6EAB               	movwf	4011,c	;volatile
  5344  005B4A  0012               	return		;funcret
  5345  005B4C                     __end_of_inicializa_uart:
  5346                           	opt stack 0
  5347                           tosu	equ	0xFFF
  5348                           tosh	equ	0xFFE
  5349                           tosl	equ	0xFFD
  5350                           pclath	equ	0xFFA
  5351                           tblptru	equ	0xFF8
  5352                           tblptrh	equ	0xFF7
  5353                           tblptrl	equ	0xFF6
  5354                           tablat	equ	0xFF5
  5355                           prodh	equ	0xFF4
  5356                           prodl	equ	0xFF3
  5357                           intcon	equ	0xFF2
  5358                           intcon2	equ	0xFF1
  5359                           intcon3	equ	0xFF0
  5360                           postinc0	equ	0xFEE
  5361                           wreg	equ	0xFE8
  5362                           indf1	equ	0xFE7
  5363                           postinc1	equ	0xFE6
  5364                           postdec1	equ	0xFE5
  5365                           plusw1	equ	0xFE3
  5366                           fsr1h	equ	0xFE2
  5367                           fsr1l	equ	0xFE1
  5368                           indf2	equ	0xFDF
  5369                           postinc2	equ	0xFDE
  5370                           postdec2	equ	0xFDD
  5371                           plusw2	equ	0xFDB
  5372                           fsr2h	equ	0xFDA
  5373                           fsr2l	equ	0xFD9
  5374                           status	equ	0xFD8
  5375                           
  5376 ;; *************** function _configura_baudrate_uart *****************
  5377 ;; Defined at:
  5378 ;;		line 50 in file "bibliotecas/uart.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;  baudrate        4   14[BANK0 ] const long 
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  x               2   32[COMRAM] unsigned int 
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  1    wreg      unsigned char 
  5385 ;; Registers used:
  5386 ;;		wreg, status,2, status,0, cstack
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5392 ;;      Params:         0       4       0       0       0       0       0       0       0
  5393 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5394 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5395 ;;      Totals:         2      12       0       0       0       0       0       0       0
  5396 ;;Total ram usage:       14 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    4
  5399 ;; This function calls:
  5400 ;;		___aldiv
  5401 ;; This function is called by:
  5402 ;;		_inicializa_uart
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           	psect	text19
  5407  004416                     __ptext19:
  5408                           	opt stack 0
  5409  004416                     _configura_baudrate_uart:
  5410                           	opt stack 25
  5411                           
  5412                           ;uart.c: 52: unsigned int x;
  5413                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  5414                           
  5415                           ;incstack = 0
  5416  004416  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  5417  00441A  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  5418  00441E  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  5419  004422  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  5420  004426  0E06               	movlw	6
  5421  004428                     u12375:
  5422  004428  90D8               	bcf	status,0,c
  5423  00442A  0100               	movlb	0	; () banked
  5424  00442C  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  5425  00442E  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5426  004430  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5427  004432  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5428  004434  2EE8               	decfsz	wreg,f,c
  5429  004436  D7F8               	goto	u12375
  5430  004438  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  5431  00443A  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5432  00443C  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5433  00443E  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5434  004440  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  5435  004442  0E00               	movlw	0
  5436  004444  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  5437  004446  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  5438  004448  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  5439  00444A  0E00               	movlw	0
  5440  00444C  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  5441  00444E  6F60               	movwf	___aldiv@dividend& (0+255),b
  5442  004450  0E6C               	movlw	108
  5443  004452  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  5444  004454  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  5445  004456  0EDC               	movlw	220
  5446  004458  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  5447  00445A  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  5448  00445C  0E02               	movlw	2
  5449  00445E  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  5450  004460  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  5451  004462  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  5452  004466  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  5453  00446A  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  5454  00446E  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  5455  004472  0E06               	movlw	6
  5456  004474                     u12385:
  5457  004474  90D8               	bcf	status,0,c
  5458  004476  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  5459  004478  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  5460  00447A  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  5461  00447C  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  5462  00447E  2EE8               	decfsz	wreg,f,c
  5463  004480  D7F9               	goto	u12385
  5464  004482  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  5465  004486  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  5466  00448A  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  5467  00448E  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  5468  004492  ECBC  F023         	call	___aldiv	;wreg free
  5469  004496  C060  F021         	movff	?___aldiv,configura_baudrate_uart@x
  5470  00449A  C061  F022         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  5471                           
  5472                           ;uart.c: 55: if(x > 255)
  5473  00449E  0422               	decf	configura_baudrate_uart@x+1,w,c
  5474  0044A0  A0D8               	btfss	status,0,c
  5475  0044A2  D045               	goto	l823
  5476                           
  5477                           ;uart.c: 56: {
  5478                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  5479  0044A4  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  5480  0044A8  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  5481  0044AC  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  5482  0044B0  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  5483  0044B4  0E04               	movlw	4
  5484  0044B6                     u12405:
  5485  0044B6  90D8               	bcf	status,0,c
  5486  0044B8  0100               	movlb	0	; () banked
  5487  0044BA  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  5488  0044BC  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5489  0044BE  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5490  0044C0  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5491  0044C2  2EE8               	decfsz	wreg,f,c
  5492  0044C4  D7F8               	goto	u12405
  5493  0044C6  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  5494  0044C8  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5495  0044CA  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5496  0044CC  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5497  0044CE  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  5498  0044D0  0E00               	movlw	0
  5499  0044D2  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  5500  0044D4  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  5501  0044D6  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  5502  0044D8  0E00               	movlw	0
  5503  0044DA  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  5504  0044DC  6F60               	movwf	___aldiv@dividend& (0+255),b
  5505  0044DE  0E6C               	movlw	108
  5506  0044E0  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  5507  0044E2  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  5508  0044E4  0EDC               	movlw	220
  5509  0044E6  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  5510  0044E8  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  5511  0044EA  0E02               	movlw	2
  5512  0044EC  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  5513  0044EE  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  5514  0044F0  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  5515  0044F4  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  5516  0044F8  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  5517  0044FC  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  5518  004500  0E04               	movlw	4
  5519  004502                     u12415:
  5520  004502  90D8               	bcf	status,0,c
  5521  004504  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  5522  004506  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  5523  004508  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  5524  00450A  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  5525  00450C  2EE8               	decfsz	wreg,f,c
  5526  00450E  D7F9               	goto	u12415
  5527  004510  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  5528  004514  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  5529  004518  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  5530  00451C  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  5531  004520  ECBC  F023         	call	___aldiv	;wreg free
  5532  004524  C060  F021         	movff	?___aldiv,configura_baudrate_uart@x
  5533  004528  C061  F022         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  5534                           
  5535                           ;uart.c: 58: BRGH = 1;
  5536  00452C  84AC               	bsf	4012,2,c	;volatile
  5537  00452E                     l823:
  5538                           
  5539                           ;uart.c: 59: }
  5540                           ;uart.c: 60: if(x < 256)
  5541  00452E  0422               	decf	configura_baudrate_uart@x+1,w,c
  5542  004530  B0D8               	btfsc	status,0,c
  5543  004532  0012               	return	
  5544                           
  5545                           ;uart.c: 61: {
  5546                           ;uart.c: 62: SPBRG = x;
  5547  004534  C021  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  5548                           
  5549                           ;uart.c: 63: SYNC = 0;
  5550  004538  98AC               	bcf	4012,4,c	;volatile
  5551                           
  5552                           ;uart.c: 64: SPEN = 1;
  5553  00453A  8EAB               	bsf	4011,7,c	;volatile
  5554                           
  5555                           ;uart.c: 65: TRISCbits.RC7 = 1;
  5556  00453C  8E94               	bsf	3988,7,c	;volatile
  5557                           
  5558                           ;uart.c: 66: TRISCbits.RC6 = 0;
  5559  00453E  9C94               	bcf	3988,6,c	;volatile
  5560                           
  5561                           ;uart.c: 67: CREN = 1;
  5562  004540  88AB               	bsf	4011,4,c	;volatile
  5563                           
  5564                           ;uart.c: 68: TXEN = 1;
  5565  004542  8AAC               	bsf	4012,5,c	;volatile
  5566                           
  5567                           ;uart.c: 70: return (1);
  5568                           ;	Return value of _configura_baudrate_uart is never used
  5569  004544  0012               	return	
  5570  004546                     __end_of_configura_baudrate_uart:
  5571                           	opt stack 0
  5572                           tosu	equ	0xFFF
  5573                           tosh	equ	0xFFE
  5574                           tosl	equ	0xFFD
  5575                           pclath	equ	0xFFA
  5576                           tblptru	equ	0xFF8
  5577                           tblptrh	equ	0xFF7
  5578                           tblptrl	equ	0xFF6
  5579                           tablat	equ	0xFF5
  5580                           prodh	equ	0xFF4
  5581                           prodl	equ	0xFF3
  5582                           intcon	equ	0xFF2
  5583                           intcon2	equ	0xFF1
  5584                           intcon3	equ	0xFF0
  5585                           postinc0	equ	0xFEE
  5586                           wreg	equ	0xFE8
  5587                           indf1	equ	0xFE7
  5588                           postinc1	equ	0xFE6
  5589                           postdec1	equ	0xFE5
  5590                           plusw1	equ	0xFE3
  5591                           fsr1h	equ	0xFE2
  5592                           fsr1l	equ	0xFE1
  5593                           indf2	equ	0xFDF
  5594                           postinc2	equ	0xFDE
  5595                           postdec2	equ	0xFDD
  5596                           plusw2	equ	0xFDB
  5597                           fsr2h	equ	0xFDA
  5598                           fsr2l	equ	0xFD9
  5599                           status	equ	0xFD8
  5600                           
  5601 ;; *************** function ___aldiv *****************
  5602 ;; Defined at:
  5603 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;  dividend        4    0[BANK0 ] long 
  5606 ;;  divisor         4    4[BANK0 ] long 
  5607 ;; Auto vars:     Size  Location     Type
  5608 ;;  quotient        4   10[BANK0 ] long 
  5609 ;;  sign            1    9[BANK0 ] unsigned char 
  5610 ;;  counter         1    8[BANK0 ] unsigned char 
  5611 ;; Return value:  Size  Location     Type
  5612 ;;                  4    0[BANK0 ] long 
  5613 ;; Registers used:
  5614 ;;		wreg, status,2, status,0
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5620 ;;      Params:         0       8       0       0       0       0       0       0       0
  5621 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5623 ;;      Totals:         0      14       0       0       0       0       0       0       0
  5624 ;;Total ram usage:       14 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    3
  5627 ;; This function calls:
  5628 ;;		Nothing
  5629 ;; This function is called by:
  5630 ;;		_configura_baudrate_uart
  5631 ;; This function uses a non-reentrant model
  5632 ;;
  5633                           
  5634                           	psect	text20
  5635  004778                     __ptext20:
  5636                           	opt stack 0
  5637  004778                     ___aldiv:
  5638                           	opt stack 25
  5639                           
  5640                           ;incstack = 0
  5641  004778  0E00               	movlw	0
  5642  00477A  0100               	movlb	0	; () banked
  5643  00477C  6F69               	movwf	___aldiv@sign& (0+255),b
  5644                           
  5645                           ; BSR set to: 0
  5646  00477E  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  5647  004780  D00A               	goto	l1442
  5648                           
  5649                           ; BSR set to: 0
  5650  004782  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  5651  004784  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  5652  004786  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  5653  004788  6D64               	negf	___aldiv@divisor& (0+255),b
  5654  00478A  0E00               	movlw	0
  5655  00478C  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  5656  00478E  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  5657  004790  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  5658                           
  5659                           ; BSR set to: 0
  5660  004792  0E01               	movlw	1
  5661  004794  6F69               	movwf	___aldiv@sign& (0+255),b
  5662  004796                     l1442:
  5663                           
  5664                           ; BSR set to: 0
  5665                           
  5666                           ; BSR set to: 0
  5667  004796  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  5668  004798  D00A               	goto	l1443
  5669                           
  5670                           ; BSR set to: 0
  5671  00479A  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  5672  00479C  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  5673  00479E  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  5674  0047A0  6D60               	negf	___aldiv@dividend& (0+255),b
  5675  0047A2  0E00               	movlw	0
  5676  0047A4  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  5677  0047A6  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  5678  0047A8  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  5679                           
  5680                           ; BSR set to: 0
  5681  0047AA  0E01               	movlw	1
  5682  0047AC  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  5683  0047AE                     l1443:
  5684                           
  5685                           ; BSR set to: 0
  5686                           
  5687                           ; BSR set to: 0
  5688  0047AE  0E00               	movlw	0
  5689  0047B0  6F6A               	movwf	___aldiv@quotient& (0+255),b
  5690  0047B2  0E00               	movlw	0
  5691  0047B4  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  5692  0047B6  0E00               	movlw	0
  5693  0047B8  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  5694  0047BA  0E00               	movlw	0
  5695  0047BC  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  5696                           
  5697                           ; BSR set to: 0
  5698  0047BE  5164               	movf	___aldiv@divisor& (0+255),w,b
  5699  0047C0  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  5700  0047C2  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  5701  0047C4  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  5702  0047C6  B4D8               	btfsc	status,2,c
  5703  0047C8  D02A               	goto	l1450
  5704                           
  5705                           ; BSR set to: 0
  5706  0047CA  0E01               	movlw	1
  5707  0047CC  6F68               	movwf	___aldiv@counter& (0+255),b
  5708  0047CE  D006               	goto	l1445
  5709  0047D0                     
  5710                           ; BSR set to: 0
  5711                           
  5712                           ; BSR set to: 0
  5713  0047D0  90D8               	bcf	status,0,c
  5714  0047D2  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  5715  0047D4  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  5716  0047D6  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  5717  0047D8  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  5718  0047DA  2B68               	incf	___aldiv@counter& (0+255),f,b
  5719  0047DC                     l1445:
  5720                           
  5721                           ; BSR set to: 0
  5722                           
  5723                           ; BSR set to: 0
  5724  0047DC  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  5725  0047DE  D7F8               	goto	l1446
  5726  0047E0                     u12250:
  5727                           
  5728                           ; BSR set to: 0
  5729                           
  5730                           ; BSR set to: 0
  5731                           
  5732                           ; BSR set to: 0
  5733  0047E0  90D8               	bcf	status,0,c
  5734  0047E2  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  5735  0047E4  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  5736  0047E6  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  5737  0047E8  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  5738                           
  5739                           ; BSR set to: 0
  5740  0047EA  5164               	movf	___aldiv@divisor& (0+255),w,b
  5741  0047EC  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  5742  0047EE  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  5743  0047F0  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  5744  0047F2  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  5745  0047F4  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  5746  0047F6  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  5747  0047F8  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  5748  0047FA  A0D8               	btfss	status,0,c
  5749  0047FC  D009               	goto	l1449
  5750                           
  5751                           ; BSR set to: 0
  5752  0047FE  5164               	movf	___aldiv@divisor& (0+255),w,b
  5753  004800  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  5754  004802  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  5755  004804  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  5756  004806  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  5757  004808  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  5758  00480A  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  5759  00480C  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  5760                           
  5761                           ; BSR set to: 0
  5762  00480E  816A               	bsf	___aldiv@quotient& (0+255),0,b
  5763  004810                     l1449:
  5764                           
  5765                           ; BSR set to: 0
  5766                           
  5767                           ; BSR set to: 0
  5768  004810  90D8               	bcf	status,0,c
  5769  004812  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  5770  004814  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  5771  004816  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  5772  004818  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  5773                           
  5774                           ; BSR set to: 0
  5775  00481A  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  5776  00481C  D7E1               	goto	u12250
  5777  00481E                     l1450:
  5778                           
  5779                           ; BSR set to: 0
  5780                           
  5781                           ; BSR set to: 0
  5782                           
  5783                           ; BSR set to: 0
  5784  00481E  5169               	movf	___aldiv@sign& (0+255),w,b
  5785  004820  B4D8               	btfsc	status,2,c
  5786  004822  D008               	goto	l1451
  5787                           
  5788                           ; BSR set to: 0
  5789  004824  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  5790  004826  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  5791  004828  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  5792  00482A  6D6A               	negf	___aldiv@quotient& (0+255),b
  5793  00482C  0E00               	movlw	0
  5794  00482E  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  5795  004830  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  5796  004832  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  5797  004834                     l1451:
  5798                           
  5799                           ; BSR set to: 0
  5800                           
  5801                           ; BSR set to: 0
  5802  004834  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  5803  004838  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  5804  00483C  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  5805  004840  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  5806  004844  0012               	return	
  5807  004846                     __end_of___aldiv:
  5808                           	opt stack 0
  5809                           tosu	equ	0xFFF
  5810                           tosh	equ	0xFFE
  5811                           tosl	equ	0xFFD
  5812                           pclath	equ	0xFFA
  5813                           tblptru	equ	0xFF8
  5814                           tblptrh	equ	0xFF7
  5815                           tblptrl	equ	0xFF6
  5816                           tablat	equ	0xFF5
  5817                           prodh	equ	0xFF4
  5818                           prodl	equ	0xFF3
  5819                           intcon	equ	0xFF2
  5820                           intcon2	equ	0xFF1
  5821                           intcon3	equ	0xFF0
  5822                           postinc0	equ	0xFEE
  5823                           wreg	equ	0xFE8
  5824                           indf1	equ	0xFE7
  5825                           postinc1	equ	0xFE6
  5826                           postdec1	equ	0xFE5
  5827                           plusw1	equ	0xFE3
  5828                           fsr1h	equ	0xFE2
  5829                           fsr1l	equ	0xFE1
  5830                           indf2	equ	0xFDF
  5831                           postinc2	equ	0xFDE
  5832                           postdec2	equ	0xFDD
  5833                           plusw2	equ	0xFDB
  5834                           fsr2h	equ	0xFDA
  5835                           fsr2l	equ	0xFD9
  5836                           status	equ	0xFD8
  5837                           
  5838 ;; *************** function _inicializa_SPI *****************
  5839 ;; Defined at:
  5840 ;;		line 49 in file "bibliotecas/SPI.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;		None
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;		None
  5845 ;; Return value:  Size  Location     Type
  5846 ;;                  1    wreg      void 
  5847 ;; Registers used:
  5848 ;;		wreg, status,2, status,0
  5849 ;; Tracked objects:
  5850 ;;		On entry : 0/0
  5851 ;;		On exit  : 0/0
  5852 ;;		Unchanged: 0/0
  5853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5854 ;;      Params:         0       0       0       0       0       0       0       0       0
  5855 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5856 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5857 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5858 ;;Total ram usage:        0 bytes
  5859 ;; Hardware stack levels used:    1
  5860 ;; Hardware stack levels required when called:    3
  5861 ;; This function calls:
  5862 ;;		Nothing
  5863 ;; This function is called by:
  5864 ;;		_escrita_sdcard
  5865 ;;		_leitura_sdcard
  5866 ;;		_sdcard_init
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870                           	psect	text21
  5871  005B70                     __ptext21:
  5872                           	opt stack 0
  5873  005B70                     _inicializa_SPI:
  5874                           	opt stack 24
  5875                           
  5876                           ;SPI.c: 51: TRISBbits.RB1 = 0;
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;incstack = 0
  5880  005B70  9293               	bcf	3987,1,c	;volatile
  5881                           
  5882                           ;SPI.c: 52: TRISBbits.RB4 = 0;
  5883  005B72  9893               	bcf	3987,4,c	;volatile
  5884                           
  5885                           ;SPI.c: 53: TRISBbits.RB0 = 1;
  5886  005B74  8093               	bsf	3987,0,c	;volatile
  5887                           
  5888                           ;SPI.c: 54: TRISCbits.RC7 = 0;
  5889  005B76  9E94               	bcf	3988,7,c	;volatile
  5890                           
  5891                           ;SPI.c: 56: LATBbits.LATB4 = 1;
  5892  005B78  888A               	bsf	3978,4,c	;volatile
  5893                           
  5894                           ;SPI.c: 57: SSPSTAT &= 0x3F;
  5895  005B7A  0E3F               	movlw	63
  5896  005B7C  16C7               	andwf	4039,f,c	;volatile
  5897                           
  5898                           ;SPI.c: 58: SSPCON1 = 0x00;
  5899  005B7E  0E00               	movlw	0
  5900  005B80  6EC6               	movwf	4038,c	;volatile
  5901                           
  5902                           ;SPI.c: 60: SSPSTATbits.SMP = 0;
  5903  005B82  9EC7               	bcf	4039,7,c	;volatile
  5904                           
  5905                           ;SPI.c: 61: SSPSTATbits.CKE = 1;
  5906  005B84  8CC7               	bsf	4039,6,c	;volatile
  5907                           
  5908                           ;SPI.c: 62: SSPCON1bits.CKP = 0;
  5909  005B86  98C6               	bcf	4038,4,c	;volatile
  5910                           
  5911                           ;SPI.c: 64: SSPCON1 = 0b00000011;
  5912  005B88  0E03               	movlw	3
  5913  005B8A  6EC6               	movwf	4038,c	;volatile
  5914                           
  5915                           ;SPI.c: 66: SSPCON1bits.SSPEN = 1;
  5916  005B8C  8AC6               	bsf	4038,5,c	;volatile
  5917  005B8E  0012               	return		;funcret
  5918  005B90                     __end_of_inicializa_SPI:
  5919                           	opt stack 0
  5920                           tosu	equ	0xFFF
  5921                           tosh	equ	0xFFE
  5922                           tosl	equ	0xFFD
  5923                           pclath	equ	0xFFA
  5924                           tblptru	equ	0xFF8
  5925                           tblptrh	equ	0xFF7
  5926                           tblptrl	equ	0xFF6
  5927                           tablat	equ	0xFF5
  5928                           prodh	equ	0xFF4
  5929                           prodl	equ	0xFF3
  5930                           intcon	equ	0xFF2
  5931                           intcon2	equ	0xFF1
  5932                           intcon3	equ	0xFF0
  5933                           postinc0	equ	0xFEE
  5934                           wreg	equ	0xFE8
  5935                           indf1	equ	0xFE7
  5936                           postinc1	equ	0xFE6
  5937                           postdec1	equ	0xFE5
  5938                           plusw1	equ	0xFE3
  5939                           fsr1h	equ	0xFE2
  5940                           fsr1l	equ	0xFE1
  5941                           indf2	equ	0xFDF
  5942                           postinc2	equ	0xFDE
  5943                           postdec2	equ	0xFDD
  5944                           plusw2	equ	0xFDB
  5945                           fsr2h	equ	0xFDA
  5946                           fsr2l	equ	0xFD9
  5947                           status	equ	0xFD8
  5948                           
  5949 ;; *************** function _fprintf *****************
  5950 ;; Defined at:
  5951 ;;		line 1808 in file "bibliotecas/tff.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  fil             2    0[BANK1 ] PTR struct _FIL
  5954 ;;		 -> fil(28), 
  5955 ;;  str             2    2[BANK1 ] PTR const unsigned char 
  5956 ;;		 -> STR_9(11), 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;  s              16    8[BANK1 ] unsigned char [16]
  5959 ;;  val             4   32[BANK1 ] unsigned long 
  5960 ;;  i               2   40[BANK1 ] int 
  5961 ;;  cc              2   38[BANK1 ] int 
  5962 ;;  arp             2   36[BANK1 ] PTR void [1]
  5963 ;;		 -> ?_fprintf(2), 
  5964 ;;  w               2   28[BANK1 ] int 
  5965 ;;  res             2   24[BANK1 ] int 
  5966 ;;  c               1   42[BANK1 ] unsigned char 
  5967 ;;  r               1   31[BANK1 ] unsigned char 
  5968 ;;  f               1   30[BANK1 ] unsigned char 
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  2    0[BANK1 ] int 
  5971 ;; Registers used:
  5972 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5978 ;;      Params:         0       0       8       0       0       0       0       0       0
  5979 ;;      Locals:         0       0      35       0       0       0       0       0       0
  5980 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5981 ;;      Totals:         0       2      43       0       0       0       0       0       0
  5982 ;;Total ram usage:       45 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:   14
  5985 ;; This function calls:
  5986 ;;		___lldiv
  5987 ;;		___llmod
  5988 ;;		___wmul
  5989 ;;		_fputc
  5990 ;;		_fputs
  5991 ;; This function is called by:
  5992 ;;		_escrita_sdcard
  5993 ;; This function uses a non-reentrant model
  5994 ;;
  5995                           
  5996                           	psect	text22
  5997  00210E                     __ptext22:
  5998                           	opt stack 0
  5999  00210E                     _fprintf:
  6000                           	opt stack 13
  6001                           
  6002                           ;tff.c: 1814: va_list arp;
  6003                           ;tff.c: 1815: UCHAR c, f, r;
  6004                           ;tff.c: 1816: ULONG val;
  6005                           ;tff.c: 1817: char s[16];
  6006                           ;tff.c: 1818: int i, w, res, cc;
  6007                           ;tff.c: 1821: *arp = __va_start();
  6008                           
  6009                           ;incstack = 0
  6010  00210E  0E52               	movlw	low (?_fprintf+4)
  6011  002110  0101               	movlb	1	; () banked
  6012  002112  6F72               	movwf	fprintf@arp& (0+255),b
  6013  002114  0E01               	movlw	high (?_fprintf+4)
  6014  002116  6F73               	movwf	(fprintf@arp+1)& (0+255),b
  6015                           
  6016                           ; BSR set to: 1
  6017                           ;tff.c: 1823: for (cc = res = 0; cc != -1; res += cc) {
  6018  002118  0E00               	movlw	0
  6019  00211A  6F67               	movwf	(fprintf@res+1)& (0+255),b
  6020  00211C  0E00               	movlw	0
  6021  00211E  6F66               	movwf	fprintf@res& (0+255),b
  6022  002120  C166  F174         	movff	fprintf@res,fprintf@cc
  6023  002124  C167  F175         	movff	fprintf@res+1,fprintf@cc+1
  6024                           
  6025                           ; BSR set to: 1
  6026  002128  2974               	incf	fprintf@cc& (0+255),w,b
  6027  00212A  E103               	bnz	l10711
  6028  00212C  2975               	incf	(fprintf@cc+1)& (0+255),w,b
  6029  00212E  B4D8               	btfsc	status,2,c
  6030  002130  0012               	return	
  6031  002132                     l10711:
  6032                           
  6033                           ; BSR set to: 1
  6034                           ;tff.c: 1824: c = *str++;
  6035  002132  C150  FFF6         	movff	fprintf@str,tblptrl
  6036  002136  C151  FFF7         	movff	fprintf@str+1,tblptrh
  6037  00213A                     	if	0	;tblptru may be non-zero
  6038  00213A                     	endif
  6039  00213A                     	if	0	;tblptru may be non-zero
  6040  00213A                     	endif
  6041  00213A  0008               	tblrd		*
  6042  00213C  CFF5 F178          	movff	tablat,fprintf@c
  6043                           
  6044                           ; BSR set to: 1
  6045  002140  4B50               	infsnz	fprintf@str& (0+255),f,b
  6046  002142  2B51               	incf	(fprintf@str+1)& (0+255),f,b
  6047                           
  6048                           ; BSR set to: 1
  6049                           ;tff.c: 1825: if (c == 0) break;
  6050  002144  5178               	movf	fprintf@c& (0+255),w,b
  6051  002146  B4D8               	btfsc	status,2,c
  6052  002148  0012               	return	
  6053                           
  6054                           ; BSR set to: 1
  6055                           ;tff.c: 1826: if (c != '%') {
  6056                           
  6057                           ; BSR set to: 1
  6058                           
  6059                           ; BSR set to: 1
  6060  00214A  0E25               	movlw	37
  6061  00214C  1978               	xorwf	fprintf@c& (0+255),w,b
  6062  00214E  B4D8               	btfsc	status,2,c
  6063  002150  D015               	goto	l1309
  6064                           
  6065                           ; BSR set to: 1
  6066                           ;tff.c: 1827: cc = fputc(c, fil);
  6067  002152  C178  F0E4         	movff	fprintf@c,fputc@chr
  6068  002156  0100               	movlb	0	; () banked
  6069  002158  6BE5               	clrf	(fputc@chr+1)& (0+255),b
  6070  00215A  C14E  F0E6         	movff	fprintf@fil,fputc@fil
  6071  00215E  C14F  F0E7         	movff	fprintf@fil+1,fputc@fil+1
  6072  002162  EC8A  F02A         	call	_fputc	;wreg free
  6073  002166  C0E4  F174         	movff	?_fputc,fprintf@cc
  6074  00216A  C0E5  F175         	movff	?_fputc+1,fprintf@cc+1
  6075                           
  6076                           ;tff.c: 1828: if (cc != -1) cc = 1;
  6077  00216E  0101               	movlb	1	; () banked
  6078  002170  2974               	incf	fprintf@cc& (0+255),w,b
  6079  002172  E103               	bnz	u13500
  6080  002174  2975               	incf	(fprintf@cc+1)& (0+255),w,b
  6081  002176  B4D8               	btfsc	status,2,c
  6082  002178  D1A3               	goto	l1311
  6083  00217A                     u13500:
  6084  00217A  D08B               	goto	u13570
  6085  00217C                     l1309:
  6086                           
  6087                           ; BSR set to: 1
  6088                           ;tff.c: 1830: }
  6089                           ;tff.c: 1831: w = f = 0;
  6090                           
  6091                           ; BSR set to: 1
  6092  00217C  0E00               	movlw	0
  6093  00217E  6F6C               	movwf	fprintf@f& (0+255),b
  6094  002180  C16C  F16A         	movff	fprintf@f,fprintf@w
  6095  002184  6B6B               	clrf	(fprintf@w+1)& (0+255),b
  6096                           
  6097                           ; BSR set to: 1
  6098                           ;tff.c: 1832: c = *str++;
  6099  002186  C150  FFF6         	movff	fprintf@str,tblptrl
  6100  00218A  C151  FFF7         	movff	fprintf@str+1,tblptrh
  6101  00218E                     	if	0	;tblptru may be non-zero
  6102  00218E                     	endif
  6103  00218E                     	if	0	;tblptru may be non-zero
  6104  00218E                     	endif
  6105  00218E  0008               	tblrd		*
  6106  002190  CFF5 F178          	movff	tablat,fprintf@c
  6107                           
  6108                           ; BSR set to: 1
  6109  002194  4B50               	infsnz	fprintf@str& (0+255),f,b
  6110  002196  2B51               	incf	(fprintf@str+1)& (0+255),f,b
  6111                           
  6112                           ; BSR set to: 1
  6113                           ;tff.c: 1833: if (c == '0') {
  6114  002198  0E30               	movlw	48
  6115  00219A  1978               	xorwf	fprintf@c& (0+255),w,b
  6116  00219C  A4D8               	btfss	status,2,c
  6117  00219E  D029               	goto	l1313
  6118                           
  6119                           ; BSR set to: 1
  6120                           ;tff.c: 1834: f = 1; c = *str++;
  6121  0021A0  0E01               	movlw	1
  6122  0021A2  6F6C               	movwf	fprintf@f& (0+255),b
  6123  0021A4  D01D               	goto	l10743
  6124  0021A6                     
  6125                           ; BSR set to: 1
  6126                           ;tff.c: 1837: w = w * 10 + (c - '0');
  6127                           
  6128                           ; BSR set to: 1
  6129  0021A6  C16A  F060         	movff	fprintf@w,___wmul@multiplier
  6130  0021AA  C16B  F061         	movff	fprintf@w+1,___wmul@multiplier+1
  6131  0021AE  0E00               	movlw	0
  6132  0021B0  0100               	movlb	0	; () banked
  6133  0021B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6134  0021B4  0E0A               	movlw	10
  6135  0021B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6136  0021B8  EC80  F02D         	call	___wmul	;wreg free
  6137  0021BC  0101               	movlb	1	; () banked
  6138  0021BE  5178               	movf	fprintf@c& (0+255),w,b
  6139  0021C0  0100               	movlb	0	; () banked
  6140  0021C2  6FF2               	movwf	??_fprintf& (0+255),b
  6141  0021C4  6BF3               	clrf	(??_fprintf+1)& (0+255),b
  6142  0021C6  5160               	movf	?___wmul& (0+255),w,b
  6143  0021C8  27F2               	addwf	??_fprintf& (0+255),f,b
  6144  0021CA  5161               	movf	(?___wmul+1)& (0+255),w,b
  6145  0021CC  23F3               	addwfc	(??_fprintf+1)& (0+255),f,b
  6146  0021CE  0ED0               	movlw	208
  6147  0021D0  25F2               	addwf	??_fprintf& (0+255),w,b
  6148  0021D2  0101               	movlb	1	; () banked
  6149  0021D4  6F6A               	movwf	fprintf@w& (0+255),b
  6150  0021D6  0EFF               	movlw	255
  6151  0021D8  0100               	movlb	0	; () banked
  6152  0021DA  21F3               	addwfc	(??_fprintf+1)& (0+255),w,b
  6153  0021DC  0101               	movlb	1	; () banked
  6154  0021DE  6F6B               	movwf	(fprintf@w+1)& (0+255),b
  6155  0021E0                     l10743:
  6156                           
  6157                           ; BSR set to: 1
  6158                           ;tff.c: 1838: c = *str++;
  6159  0021E0  C150  FFF6         	movff	fprintf@str,tblptrl
  6160  0021E4  C151  FFF7         	movff	fprintf@str+1,tblptrh
  6161  0021E8                     	if	0	;tblptru may be non-zero
  6162  0021E8                     	endif
  6163  0021E8                     	if	0	;tblptru may be non-zero
  6164  0021E8                     	endif
  6165  0021E8  0008               	tblrd		*
  6166  0021EA  CFF5 F178          	movff	tablat,fprintf@c
  6167                           
  6168                           ; BSR set to: 1
  6169  0021EE  4B50               	infsnz	fprintf@str& (0+255),f,b
  6170  0021F0  2B51               	incf	(fprintf@str+1)& (0+255),f,b
  6171  0021F2                     l1313:
  6172                           
  6173                           ; BSR set to: 1
  6174                           
  6175                           ; BSR set to: 1
  6176  0021F2  0E2F               	movlw	47
  6177  0021F4  6578               	cpfsgt	fprintf@c& (0+255),b
  6178  0021F6  D003               	goto	u13530
  6179                           
  6180                           ; BSR set to: 1
  6181  0021F8  0E39               	movlw	57
  6182  0021FA  6578               	cpfsgt	fprintf@c& (0+255),b
  6183  0021FC  D7D4               	goto	l1314
  6184  0021FE                     u13530:
  6185                           
  6186                           ; BSR set to: 1
  6187                           ;tff.c: 1839: }
  6188                           ;tff.c: 1840: if (c == 'l') {
  6189                           
  6190                           ; BSR set to: 1
  6191                           
  6192                           ; BSR set to: 1
  6193  0021FE  0E6C               	movlw	108
  6194  002200  1978               	xorwf	fprintf@c& (0+255),w,b
  6195  002202  A4D8               	btfss	status,2,c
  6196  002204  D00A               	goto	l1318
  6197                           
  6198                           ; BSR set to: 1
  6199                           ;tff.c: 1841: f |= 2; c = *str++;
  6200  002206  836C               	bsf	fprintf@f& (0+255),1,b
  6201                           
  6202                           ; BSR set to: 1
  6203  002208  C150  FFF6         	movff	fprintf@str,tblptrl
  6204  00220C  C151  FFF7         	movff	fprintf@str+1,tblptrh
  6205  002210                     	if	0	;tblptru may be non-zero
  6206  002210                     	endif
  6207  002210                     	if	0	;tblptru may be non-zero
  6208  002210                     	endif
  6209  002210  0008               	tblrd		*
  6210  002212  CFF5 F178          	movff	tablat,fprintf@c
  6211                           
  6212                           ; BSR set to: 1
  6213  002216  4B50               	infsnz	fprintf@str& (0+255),f,b
  6214  002218  2B51               	incf	(fprintf@str+1)& (0+255),f,b
  6215  00221A                     l1318:
  6216                           
  6217                           ; BSR set to: 1
  6218                           ;tff.c: 1842: }
  6219                           ;tff.c: 1843: if (c == 's') {
  6220                           
  6221                           ; BSR set to: 1
  6222  00221A  0E73               	movlw	115
  6223  00221C  1978               	xorwf	fprintf@c& (0+255),w,b
  6224  00221E  A4D8               	btfss	status,2,c
  6225  002220  D018               	goto	l1319
  6226                           
  6227                           ; BSR set to: 1
  6228                           ;tff.c: 1844: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  6229  002222  C172  FFD9         	movff	fprintf@arp,fsr2l
  6230  002226  C173  FFDA         	movff	fprintf@arp+1,fsr2h
  6231  00222A  CFDE F0EB          	movff	postinc2,fputs@str
  6232  00222E  CFDD F0EC          	movff	postdec2,fputs@str+1
  6233  002232  C14E  F0ED         	movff	fprintf@fil,fputs@fil
  6234  002236  C14F  F0EE         	movff	fprintf@fil+1,fputs@fil+1
  6235  00223A  EC04  F02A         	call	_fputs	;wreg free
  6236  00223E  C0EB  F174         	movff	?_fputs,fprintf@cc
  6237  002242  C0EC  F175         	movff	?_fputs+1,fprintf@cc+1
  6238  002246  0E02               	movlw	2
  6239  002248  0101               	movlb	1	; () banked
  6240  00224A  2772               	addwf	fprintf@arp& (0+255),f,b
  6241  00224C  0E00               	movlw	0
  6242  00224E  2373               	addwfc	(fprintf@arp+1)& (0+255),f,b
  6243                           
  6244                           ;tff.c: 1845: continue;
  6245  002250  D137               	goto	l1311
  6246  002252                     l1319:
  6247                           
  6248                           ; BSR set to: 1
  6249                           ;tff.c: 1846: }
  6250                           ;tff.c: 1847: if (c == 'c') {
  6251                           
  6252                           ; BSR set to: 1
  6253  002252  0E63               	movlw	99
  6254  002254  1978               	xorwf	fprintf@c& (0+255),w,b
  6255  002256  A4D8               	btfss	status,2,c
  6256  002258  D021               	goto	l1320
  6257                           
  6258                           ; BSR set to: 1
  6259                           ;tff.c: 1848: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  6260  00225A  C172  FFD9         	movff	fprintf@arp,fsr2l
  6261  00225E  C173  FFDA         	movff	fprintf@arp+1,fsr2h
  6262  002262  50DF               	movf	indf2,w,c
  6263  002264  0100               	movlb	0	; () banked
  6264  002266  6FF2               	movwf	??_fprintf& (0+255),b
  6265  002268  51F2               	movf	??_fprintf& (0+255),w,b
  6266  00226A  6FE4               	movwf	fputc@chr& (0+255),b
  6267  00226C  6BE5               	clrf	(fputc@chr+1)& (0+255),b
  6268  00226E  C14E  F0E6         	movff	fprintf@fil,fputc@fil
  6269  002272  C14F  F0E7         	movff	fprintf@fil+1,fputc@fil+1
  6270  002276  EC8A  F02A         	call	_fputc	;wreg free
  6271  00227A  C0E4  F174         	movff	?_fputc,fprintf@cc
  6272  00227E  C0E5  F175         	movff	?_fputc+1,fprintf@cc+1
  6273  002282  0E02               	movlw	2
  6274  002284  0101               	movlb	1	; () banked
  6275  002286  2772               	addwf	fprintf@arp& (0+255),f,b
  6276  002288  0E00               	movlw	0
  6277  00228A  2373               	addwfc	(fprintf@arp+1)& (0+255),f,b
  6278                           
  6279                           ; BSR set to: 1
  6280                           ;tff.c: 1849: if (cc != -1) cc = 1;
  6281  00228C  2974               	incf	fprintf@cc& (0+255),w,b
  6282  00228E  E101               	bnz	u13570
  6283  002290  D771               	goto	L1
  6284  002292                     u13570:
  6285                           
  6286                           ; BSR set to: 1
  6287  002292  0E00               	movlw	0
  6288  002294  6F75               	movwf	(fprintf@cc+1)& (0+255),b
  6289  002296  0E01               	movlw	1
  6290  002298  6F74               	movwf	fprintf@cc& (0+255),b
  6291                           
  6292                           ; BSR set to: 1
  6293                           ;tff.c: 1850: continue;
  6294  00229A  D112               	goto	l1311
  6295  00229C                     l1320:
  6296                           
  6297                           ; BSR set to: 1
  6298                           ;tff.c: 1851: }
  6299                           ;tff.c: 1852: r = 0;
  6300                           
  6301                           ; BSR set to: 1
  6302  00229C  0E00               	movlw	0
  6303  00229E  6F6D               	movwf	fprintf@r& (0+255),b
  6304                           
  6305                           ; BSR set to: 1
  6306                           ;tff.c: 1853: if (c == 'd') r = 10;
  6307  0022A0  0E64               	movlw	100
  6308  0022A2  1978               	xorwf	fprintf@c& (0+255),w,b
  6309  0022A4  A4D8               	btfss	status,2,c
  6310  0022A6  D002               	goto	l1322
  6311                           
  6312                           ; BSR set to: 1
  6313  0022A8  0E0A               	movlw	10
  6314  0022AA  6F6D               	movwf	fprintf@r& (0+255),b
  6315  0022AC                     l1322:
  6316                           
  6317                           ; BSR set to: 1
  6318                           ;tff.c: 1854: if (c == 'u') r = 10;
  6319                           
  6320                           ; BSR set to: 1
  6321  0022AC  0E75               	movlw	117
  6322  0022AE  1978               	xorwf	fprintf@c& (0+255),w,b
  6323  0022B0  A4D8               	btfss	status,2,c
  6324  0022B2  D002               	goto	l1323
  6325                           
  6326                           ; BSR set to: 1
  6327  0022B4  0E0A               	movlw	10
  6328  0022B6  6F6D               	movwf	fprintf@r& (0+255),b
  6329  0022B8                     l1323:
  6330                           
  6331                           ; BSR set to: 1
  6332                           ;tff.c: 1855: if (c == 'X') r = 16;
  6333                           
  6334                           ; BSR set to: 1
  6335  0022B8  0E58               	movlw	88
  6336  0022BA  1978               	xorwf	fprintf@c& (0+255),w,b
  6337  0022BC  A4D8               	btfss	status,2,c
  6338  0022BE  D002               	goto	l1324
  6339                           
  6340                           ; BSR set to: 1
  6341  0022C0  0E10               	movlw	16
  6342  0022C2  6F6D               	movwf	fprintf@r& (0+255),b
  6343  0022C4                     l1324:
  6344                           
  6345                           ; BSR set to: 1
  6346                           ;tff.c: 1856: if (r == 0) break;
  6347  0022C4  516D               	movf	fprintf@r& (0+255),w,b
  6348  0022C6  B4D8               	btfsc	status,2,c
  6349  0022C8  0012               	return	
  6350                           
  6351                           ; BSR set to: 1
  6352                           ;tff.c: 1857: if (f & 2) {
  6353                           
  6354                           ; BSR set to: 1
  6355  0022CA  A36C               	btfss	fprintf@f& (0+255),1,b
  6356  0022CC  D00E               	goto	l1326
  6357                           
  6358                           ; BSR set to: 1
  6359                           ;tff.c: 1858: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  6360  0022CE  C172  FFD9         	movff	fprintf@arp,fsr2l
  6361  0022D2  C173  FFDA         	movff	fprintf@arp+1,fsr2h
  6362  0022D6  CFDE F16E          	movff	postinc2,fprintf@val
  6363  0022DA  CFDE F16F          	movff	postinc2,fprintf@val+1
  6364  0022DE  CFDE F170          	movff	postinc2,fprintf@val+2
  6365  0022E2  CFDE F171          	movff	postinc2,fprintf@val+3
  6366                           
  6367                           ; BSR set to: 1
  6368  0022E6  0E04               	movlw	4
  6369  0022E8  D021               	goto	L5
  6370  0022EA                     l1326:
  6371                           
  6372                           ; BSR set to: 1
  6373                           ;tff.c: 1860: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  6374                           
  6375                           ; BSR set to: 1
  6376  0022EA  0E64               	movlw	100
  6377  0022EC  1978               	xorwf	fprintf@c& (0+255),w,b
  6378  0022EE  B4D8               	btfsc	status,2,c
  6379  0022F0  D00F               	goto	l1329
  6380                           
  6381                           ; BSR set to: 1
  6382  0022F2  C172  FFD9         	movff	fprintf@arp,fsr2l
  6383  0022F6  C173  FFDA         	movff	fprintf@arp+1,fsr2h
  6384  0022FA  CFDE F0F2          	movff	postinc2,??_fprintf
  6385  0022FE  CFDD F0F3          	movff	postdec2,??_fprintf+1
  6386  002302  C0F2  F16E         	movff	??_fprintf,fprintf@val
  6387  002306  C0F3  F16F         	movff	??_fprintf+1,fprintf@val+1
  6388  00230A  6B70               	clrf	(fprintf@val+2)& (0+255),b
  6389  00230C  6B71               	clrf	(fprintf@val+3)& (0+255),b
  6390  00230E  D00D               	goto	l10803
  6391  002310                     l1329:
  6392                           
  6393                           ; BSR set to: 1
  6394                           
  6395                           ; BSR set to: 1
  6396  002310  C172  FFD9         	movff	fprintf@arp,fsr2l
  6397  002314  C173  FFDA         	movff	fprintf@arp+1,fsr2h
  6398  002318  CFDE F16E          	movff	postinc2,fprintf@val
  6399  00231C  CFDD F16F          	movff	postdec2,fprintf@val+1
  6400  002320  0E00               	movlw	0
  6401  002322  BF6F               	btfsc	(fprintf@val+1)& (0+255),7,b
  6402  002324  0EFF               	movlw	-1
  6403  002326  6F70               	movwf	(fprintf@val+2)& (0+255),b
  6404  002328  6F71               	movwf	(fprintf@val+3)& (0+255),b
  6405  00232A                     l10803:
  6406                           
  6407                           ; BSR set to: 1
  6408  00232A  0E02               	movlw	2
  6409  00232C                     L5:
  6410  00232C  2772               	addwf	fprintf@arp& (0+255),f,b
  6411  00232E  0E00               	movlw	0
  6412  002330  2373               	addwfc	(fprintf@arp+1)& (0+255),f,b
  6413                           
  6414                           ; BSR set to: 1
  6415                           ;tff.c: 1861: }
  6416                           ;tff.c: 1863: if (c == 'd') {
  6417                           
  6418                           ; BSR set to: 1
  6419                           
  6420                           ; BSR set to: 1
  6421  002332  0E64               	movlw	100
  6422  002334  1978               	xorwf	fprintf@c& (0+255),w,b
  6423  002336  A4D8               	btfss	status,2,c
  6424  002338  D00D               	goto	l1333
  6425                           
  6426                           ; BSR set to: 1
  6427                           ;tff.c: 1864: if (val >= 0x80000000) {
  6428  00233A  0E80               	movlw	128
  6429  00233C  5D71               	subwf	(fprintf@val+3)& (0+255),w,b
  6430  00233E  A0D8               	btfss	status,0,c
  6431  002340  D009               	goto	l1333
  6432                           
  6433                           ; BSR set to: 1
  6434                           ;tff.c: 1865: val = 0 - val;
  6435  002342  1F71               	comf	(fprintf@val+3)& (0+255),f,b
  6436  002344  1F70               	comf	(fprintf@val+2)& (0+255),f,b
  6437  002346  1F6F               	comf	(fprintf@val+1)& (0+255),f,b
  6438  002348  6D6E               	negf	fprintf@val& (0+255),b
  6439  00234A  0E00               	movlw	0
  6440  00234C  236F               	addwfc	(fprintf@val+1)& (0+255),f,b
  6441  00234E  2370               	addwfc	(fprintf@val+2)& (0+255),f,b
  6442  002350  2371               	addwfc	(fprintf@val+3)& (0+255),f,b
  6443                           
  6444                           ;tff.c: 1866: f |= 4;
  6445  002352  856C               	bsf	fprintf@f& (0+255),2,b
  6446  002354                     l1333:
  6447                           
  6448                           ; BSR set to: 1
  6449                           ;tff.c: 1867: }
  6450                           ;tff.c: 1868: }
  6451                           ;tff.c: 1869: i = sizeof(s) - 1; s[i] = 0;
  6452                           
  6453                           ; BSR set to: 1
  6454                           
  6455                           ; BSR set to: 1
  6456  002354  0E00               	movlw	0
  6457  002356  6F77               	movwf	(fprintf@i+1)& (0+255),b
  6458  002358  0E0F               	movlw	15
  6459  00235A  6F76               	movwf	fprintf@i& (0+255),b
  6460                           
  6461                           ; BSR set to: 1
  6462  00235C  0E56               	movlw	low fprintf@s
  6463  00235E  2576               	addwf	fprintf@i& (0+255),w,b
  6464  002360  6ED9               	movwf	fsr2l,c
  6465  002362  0E01               	movlw	high fprintf@s
  6466  002364  2177               	addwfc	(fprintf@i+1)& (0+255),w,b
  6467  002366  6EDA               	movwf	fsr2h,c
  6468  002368  0E00               	movlw	0
  6469  00236A  6EDF               	movwf	indf2,c
  6470  00236C                     
  6471                           ; BSR set to: 1
  6472                           ;tff.c: 1871: c = (UCHAR)(val % r + '0');
  6473                           
  6474                           ; BSR set to: 1
  6475  00236C  C16E  F060         	movff	fprintf@val,___llmod@dividend
  6476  002370  C16F  F061         	movff	fprintf@val+1,___llmod@dividend+1
  6477  002374  C170  F062         	movff	fprintf@val+2,___llmod@dividend+2
  6478  002378  C171  F063         	movff	fprintf@val+3,___llmod@dividend+3
  6479  00237C  516D               	movf	fprintf@r& (0+255),w,b
  6480  00237E  0100               	movlb	0	; () banked
  6481  002380  6F64               	movwf	___llmod@divisor& (0+255),b
  6482  002382  6B65               	clrf	(___llmod@divisor+1)& (0+255),b
  6483  002384  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
  6484  002386  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
  6485  002388  EC9C  F029         	call	___llmod	;wreg free
  6486  00238C  0100               	movlb	0	; () banked
  6487  00238E  5160               	movf	?___llmod& (0+255),w,b
  6488  002390  0F30               	addlw	48
  6489  002392  0101               	movlb	1	; () banked
  6490  002394  6F78               	movwf	fprintf@c& (0+255),b
  6491                           
  6492                           ; BSR set to: 1
  6493                           ;tff.c: 1872: if (c > '9') c += 7;
  6494  002396  0E39               	movlw	57
  6495  002398  6578               	cpfsgt	fprintf@c& (0+255),b
  6496  00239A  D002               	goto	l1335
  6497                           
  6498                           ; BSR set to: 1
  6499  00239C  0E07               	movlw	7
  6500  00239E  2778               	addwf	fprintf@c& (0+255),f,b
  6501  0023A0                     l1335:
  6502                           
  6503                           ; BSR set to: 1
  6504                           ;tff.c: 1873: s[--i] = c;
  6505                           
  6506                           ; BSR set to: 1
  6507  0023A0  0776               	decf	fprintf@i& (0+255),f,b
  6508  0023A2  A0D8               	btfss	status,0,c
  6509  0023A4  0777               	decf	(fprintf@i+1)& (0+255),f,b
  6510  0023A6  0E56               	movlw	low fprintf@s
  6511  0023A8  2576               	addwf	fprintf@i& (0+255),w,b
  6512  0023AA  6ED9               	movwf	fsr2l,c
  6513  0023AC  0E01               	movlw	high fprintf@s
  6514  0023AE  2177               	addwfc	(fprintf@i+1)& (0+255),w,b
  6515  0023B0  6EDA               	movwf	fsr2h,c
  6516  0023B2  C178  FFDF         	movff	fprintf@c,indf2
  6517                           
  6518                           ; BSR set to: 1
  6519                           ;tff.c: 1874: val /= r;
  6520  0023B6  C16E  F060         	movff	fprintf@val,___lldiv@dividend
  6521  0023BA  C16F  F061         	movff	fprintf@val+1,___lldiv@dividend+1
  6522  0023BE  C170  F062         	movff	fprintf@val+2,___lldiv@dividend+2
  6523  0023C2  C171  F063         	movff	fprintf@val+3,___lldiv@dividend+3
  6524  0023C6  516D               	movf	fprintf@r& (0+255),w,b
  6525  0023C8  0100               	movlb	0	; () banked
  6526  0023CA  6F64               	movwf	___lldiv@divisor& (0+255),b
  6527  0023CC  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
  6528  0023CE  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
  6529  0023D0  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
  6530  0023D2  ECAD  F028         	call	___lldiv	;wreg free
  6531  0023D6  C060  F16E         	movff	?___lldiv,fprintf@val
  6532  0023DA  C061  F16F         	movff	?___lldiv+1,fprintf@val+1
  6533  0023DE  C062  F170         	movff	?___lldiv+2,fprintf@val+2
  6534  0023E2  C063  F171         	movff	?___lldiv+3,fprintf@val+3
  6535                           
  6536                           ;tff.c: 1875: } while (i && val);
  6537  0023E6  0101               	movlb	1	; () banked
  6538  0023E8  5176               	movf	fprintf@i& (0+255),w,b
  6539  0023EA  1177               	iorwf	(fprintf@i+1)& (0+255),w,b
  6540  0023EC  B4D8               	btfsc	status,2,c
  6541  0023EE  D006               	goto	u13680
  6542                           
  6543                           ; BSR set to: 1
  6544  0023F0  516E               	movf	fprintf@val& (0+255),w,b
  6545  0023F2  116F               	iorwf	(fprintf@val+1)& (0+255),w,b
  6546  0023F4  1170               	iorwf	(fprintf@val+2)& (0+255),w,b
  6547  0023F6  1171               	iorwf	(fprintf@val+3)& (0+255),w,b
  6548  0023F8  A4D8               	btfss	status,2,c
  6549  0023FA  D7B8               	goto	l1334
  6550  0023FC                     u13680:
  6551                           
  6552                           ; BSR set to: 1
  6553                           ;tff.c: 1876: if (i && (f & 4)) s[--i] = '-';
  6554                           
  6555                           ; BSR set to: 1
  6556                           
  6557                           ; BSR set to: 1
  6558  0023FC  5176               	movf	fprintf@i& (0+255),w,b
  6559  0023FE  1177               	iorwf	(fprintf@i+1)& (0+255),w,b
  6560  002400  A4D8               	btfss	status,2,c
  6561                           
  6562                           ; BSR set to: 1
  6563  002402  A56C               	btfss	fprintf@f& (0+255),2,b
  6564  002404  D00B               	goto	l1339
  6565                           
  6566                           ; BSR set to: 1
  6567  002406  0776               	decf	fprintf@i& (0+255),f,b
  6568  002408  A0D8               	btfss	status,0,c
  6569  00240A  0777               	decf	(fprintf@i+1)& (0+255),f,b
  6570  00240C  0E56               	movlw	low fprintf@s
  6571  00240E  2576               	addwf	fprintf@i& (0+255),w,b
  6572  002410  6ED9               	movwf	fsr2l,c
  6573  002412  0E01               	movlw	high fprintf@s
  6574  002414  2177               	addwfc	(fprintf@i+1)& (0+255),w,b
  6575  002416  6EDA               	movwf	fsr2h,c
  6576  002418  0E2D               	movlw	45
  6577  00241A  6EDF               	movwf	indf2,c
  6578  00241C                     l1339:
  6579                           
  6580                           ; BSR set to: 1
  6581                           ;tff.c: 1877: w = sizeof(s) - 1 - w;
  6582                           
  6583                           ; BSR set to: 1
  6584  00241C  0E01               	movlw	1
  6585  00241E  256A               	addwf	fprintf@w& (0+255),w,b
  6586  002420  0100               	movlb	0	; () banked
  6587  002422  6FF2               	movwf	??_fprintf& (0+255),b
  6588  002424  0E00               	movlw	0
  6589  002426  0101               	movlb	1	; () banked
  6590  002428  216B               	addwfc	(fprintf@w+1)& (0+255),w,b
  6591  00242A  0100               	movlb	0	; () banked
  6592  00242C  6FF3               	movwf	(??_fprintf+1)& (0+255),b
  6593  00242E  1FF2               	comf	??_fprintf& (0+255),f,b
  6594  002430  1FF3               	comf	(??_fprintf+1)& (0+255),f,b
  6595  002432  4BF2               	infsnz	??_fprintf& (0+255),f,b
  6596  002434  2BF3               	incf	(??_fprintf+1)& (0+255),f,b
  6597  002436  0E10               	movlw	16
  6598  002438  25F2               	addwf	??_fprintf& (0+255),w,b
  6599  00243A  0101               	movlb	1	; () banked
  6600  00243C  6F6A               	movwf	fprintf@w& (0+255),b
  6601  00243E  0E00               	movlw	0
  6602  002440  0100               	movlb	0	; () banked
  6603  002442  21F3               	addwfc	(??_fprintf+1)& (0+255),w,b
  6604  002444  0101               	movlb	1	; () banked
  6605  002446  6F6B               	movwf	(fprintf@w+1)& (0+255),b
  6606                           
  6607                           ;tff.c: 1878: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
  6608  002448  D016               	goto	l1340
  6609  00244A                     l1341:
  6610                           
  6611                           ; BSR set to: 0
  6612  00244A  0101               	movlb	1	; () banked
  6613  00244C  B16C               	btfsc	fprintf@f& (0+255),0,b
  6614  00244E  D004               	goto	l1343
  6615                           
  6616                           ; BSR set to: 1
  6617  002450  0E00               	movlw	0
  6618  002452  6F69               	movwf	(_fprintf$2484+1)& (0+255),b
  6619  002454  0E20               	movlw	32
  6620  002456  D003               	goto	L3
  6621  002458                     l1343:
  6622                           
  6623                           ; BSR set to: 1
  6624                           
  6625                           ; BSR set to: 1
  6626  002458  0E00               	movlw	0
  6627  00245A  6F69               	movwf	(_fprintf$2484+1)& (0+255),b
  6628  00245C  0E30               	movlw	48
  6629  00245E                     L3:
  6630  00245E  6F68               	movwf	_fprintf$2484& (0+255),b
  6631                           
  6632                           ; BSR set to: 1
  6633                           
  6634                           ; BSR set to: 1
  6635  002460  0776               	decf	fprintf@i& (0+255),f,b
  6636  002462  A0D8               	btfss	status,0,c
  6637  002464  0777               	decf	(fprintf@i+1)& (0+255),f,b
  6638  002466  0E56               	movlw	low fprintf@s
  6639  002468  2576               	addwf	fprintf@i& (0+255),w,b
  6640  00246A  6ED9               	movwf	fsr2l,c
  6641  00246C  0E01               	movlw	high fprintf@s
  6642  00246E  2177               	addwfc	(fprintf@i+1)& (0+255),w,b
  6643  002470  6EDA               	movwf	fsr2h,c
  6644  002472  C168  FFDF         	movff	_fprintf$2484,indf2
  6645  002476                     l1340:
  6646                           
  6647                           ; BSR set to: 1
  6648                           
  6649                           ; BSR set to: 1
  6650  002476  5176               	movf	fprintf@i& (0+255),w,b
  6651  002478  1177               	iorwf	(fprintf@i+1)& (0+255),w,b
  6652  00247A  B4D8               	btfsc	status,2,c
  6653  00247C  D00D               	goto	u13730
  6654                           
  6655                           ; BSR set to: 1
  6656  00247E  5176               	movf	fprintf@i& (0+255),w,b
  6657  002480  5D6A               	subwf	fprintf@w& (0+255),w,b
  6658  002482  516B               	movf	(fprintf@w+1)& (0+255),w,b
  6659  002484  0A80               	xorlw	128
  6660  002486  0100               	movlb	0	; () banked
  6661  002488  6FF2               	movwf	??_fprintf& (0+255),b
  6662  00248A  0101               	movlb	1	; () banked
  6663  00248C  5177               	movf	(fprintf@i+1)& (0+255),w,b
  6664  00248E  0A80               	xorlw	128
  6665  002490  0100               	movlb	0	; () banked
  6666  002492  59F2               	subwfb	??_fprintf& (0+255),w,b
  6667  002494  A0D8               	btfss	status,0,c
  6668  002496  D7D9               	goto	l1341
  6669  002498                     u13730:
  6670                           
  6671                           ;tff.c: 1879: cc = fputs(&s[i], fil);
  6672                           
  6673                           ; BSR set to: 0
  6674                           
  6675                           ; BSR set to: 0
  6676  002498  0E56               	movlw	low fprintf@s
  6677  00249A  0101               	movlb	1	; () banked
  6678  00249C  2576               	addwf	fprintf@i& (0+255),w,b
  6679  00249E  0100               	movlb	0	; () banked
  6680  0024A0  6FEB               	movwf	fputs@str& (0+255),b
  6681  0024A2  0E01               	movlw	high fprintf@s
  6682  0024A4  0101               	movlb	1	; () banked
  6683  0024A6  2177               	addwfc	(fprintf@i+1)& (0+255),w,b
  6684  0024A8  0100               	movlb	0	; () banked
  6685  0024AA  6FEC               	movwf	(fputs@str+1)& (0+255),b
  6686  0024AC  C14E  F0ED         	movff	fprintf@fil,fputs@fil
  6687  0024B0  C14F  F0EE         	movff	fprintf@fil+1,fputs@fil+1
  6688  0024B4  EC04  F02A         	call	_fputs	;wreg free
  6689  0024B8  C0EB  F174         	movff	?_fputs,fprintf@cc
  6690  0024BC  C0EC  F175         	movff	?_fputs+1,fprintf@cc+1
  6691  0024C0                     l1311:
  6692  0024C0  0101               	movlb	1	; () banked
  6693  0024C2  5174               	movf	fprintf@cc& (0+255),w,b
  6694  0024C4  2766               	addwf	fprintf@res& (0+255),f,b
  6695  0024C6  5175               	movf	(fprintf@cc+1)& (0+255),w,b
  6696  0024C8  2367               	addwfc	(fprintf@res+1)& (0+255),f,b
  6697                           
  6698                           ; BSR set to: 1
  6699  0024CA  2974               	incf	fprintf@cc& (0+255),w,b
  6700  0024CC  E101               	bnz	u13741
  6701  0024CE  D62E               	goto	L4
  6702  0024D0                     u13741:
  6703  0024D0  D630               	goto	l1306
  6704  0024D2                     __end_of_fprintf:
  6705                           	opt stack 0
  6706                           tosu	equ	0xFFF
  6707                           tosh	equ	0xFFE
  6708                           tosl	equ	0xFFD
  6709                           pclath	equ	0xFFA
  6710                           tblptru	equ	0xFF8
  6711                           tblptrh	equ	0xFF7
  6712                           tblptrl	equ	0xFF6
  6713                           tablat	equ	0xFF5
  6714                           prodh	equ	0xFF4
  6715                           prodl	equ	0xFF3
  6716                           intcon	equ	0xFF2
  6717                           intcon2	equ	0xFF1
  6718                           intcon3	equ	0xFF0
  6719                           postinc0	equ	0xFEE
  6720                           wreg	equ	0xFE8
  6721                           indf1	equ	0xFE7
  6722                           postinc1	equ	0xFE6
  6723                           postdec1	equ	0xFE5
  6724                           plusw1	equ	0xFE3
  6725                           fsr1h	equ	0xFE2
  6726                           fsr1l	equ	0xFE1
  6727                           indf2	equ	0xFDF
  6728                           postinc2	equ	0xFDE
  6729                           postdec2	equ	0xFDD
  6730                           plusw2	equ	0xFDB
  6731                           fsr2h	equ	0xFDA
  6732                           fsr2l	equ	0xFD9
  6733                           status	equ	0xFD8
  6734                           
  6735 ;; *************** function _fputs *****************
  6736 ;; Defined at:
  6737 ;;		line 1788 in file "bibliotecas/tff.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;  str             2  139[BANK0 ] PTR const unsigned char 
  6740 ;;		 -> fprintf@s(16), poligono_ext(198), 
  6741 ;;  fil             2  141[BANK0 ] PTR struct _FIL
  6742 ;;		 -> fil(28), 
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;  n               2  144[BANK0 ] int 
  6745 ;; Return value:  Size  Location     Type
  6746 ;;                  2  139[BANK0 ] int 
  6747 ;; Registers used:
  6748 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/0
  6751 ;;		On exit  : 0/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6754 ;;      Params:         0       4       0       0       0       0       0       0       0
  6755 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6756 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6757 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6758 ;;Total ram usage:        7 bytes
  6759 ;; Hardware stack levels used:    1
  6760 ;; Hardware stack levels required when called:   13
  6761 ;; This function calls:
  6762 ;;		_fputc
  6763 ;; This function is called by:
  6764 ;;		_fprintf
  6765 ;; This function uses a non-reentrant model
  6766 ;;
  6767                           
  6768                           	psect	text23
  6769  005408                     __ptext23:
  6770                           	opt stack 0
  6771  005408                     _fputs:
  6772                           	opt stack 13
  6773                           
  6774                           ;tff.c: 1793: int n;
  6775                           ;tff.c: 1796: for (n = 0; *str; str++, n++) {
  6776                           
  6777                           ; BSR set to: 1
  6778                           ;incstack = 0
  6779  005408  0E00               	movlw	0
  6780  00540A  0100               	movlb	0	; () banked
  6781  00540C  6FF1               	movwf	(fputs@n+1)& (0+255),b
  6782  00540E  0E00               	movlw	0
  6783  005410  6FF0               	movwf	fputs@n& (0+255),b
  6784  005412  D01C               	goto	l1299
  6785  005414                     
  6786                           ; BSR set to: 0
  6787                           ;tff.c: 1797: if (fputc(*str, fil) == -1) return -1;
  6788                           
  6789                           ; BSR set to: 0
  6790  005414  C0EB  FFD9         	movff	fputs@str,fsr2l
  6791  005418  C0EC  FFDA         	movff	fputs@str+1,fsr2h
  6792  00541C  50DF               	movf	indf2,w,c
  6793  00541E  6FEF               	movwf	??_fputs& (0+255),b
  6794  005420  51EF               	movf	??_fputs& (0+255),w,b
  6795  005422  6FE4               	movwf	fputc@chr& (0+255),b
  6796  005424  6BE5               	clrf	(fputc@chr+1)& (0+255),b
  6797  005426  C0ED  F0E6         	movff	fputs@fil,fputc@fil
  6798  00542A  C0EE  F0E7         	movff	fputs@fil+1,fputc@fil+1
  6799  00542E  EC8A  F02A         	call	_fputc	;wreg free
  6800  005432  0100               	movlb	0	; () banked
  6801  005434  29E4               	incf	?_fputc& (0+255),w,b
  6802  005436  E106               	bnz	l10405
  6803  005438  29E5               	incf	(?_fputc+1)& (0+255),w,b
  6804  00543A  A4D8               	btfss	status,2,c
  6805  00543C  D003               	goto	l1301
  6806                           
  6807                           ; BSR set to: 0
  6808  00543E  69EB               	setf	?_fputs& (0+255),b
  6809  005440  69EC               	setf	(?_fputs+1)& (0+255),b
  6810  005442  0012               	return	
  6811  005444                     l1301:
  6812  005444                     l10405:
  6813                           
  6814                           ; BSR set to: 0
  6815  005444  4BEB               	infsnz	fputs@str& (0+255),f,b
  6816  005446  2BEC               	incf	(fputs@str+1)& (0+255),f,b
  6817  005448  4BF0               	infsnz	fputs@n& (0+255),f,b
  6818  00544A  2BF1               	incf	(fputs@n+1)& (0+255),f,b
  6819  00544C                     l1299:
  6820                           
  6821                           ; BSR set to: 0
  6822                           
  6823                           ; BSR set to: 0
  6824  00544C  C0EB  FFD9         	movff	fputs@str,fsr2l
  6825  005450  C0EC  FFDA         	movff	fputs@str+1,fsr2h
  6826  005454  50DF               	movf	indf2,w,c
  6827  005456  A4D8               	btfss	status,2,c
  6828  005458  D7DD               	goto	l1300
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;tff.c: 1798: }
  6832                           ;tff.c: 1799: return n;
  6833  00545A  C0F0  F0EB         	movff	fputs@n,?_fputs
  6834  00545E  C0F1  F0EC         	movff	fputs@n+1,?_fputs+1
  6835                           
  6836                           ; BSR set to: 0
  6837  005462  0012               	return		;funcret
  6838  005464                     __end_of_fputs:
  6839                           	opt stack 0
  6840                           tosu	equ	0xFFF
  6841                           tosh	equ	0xFFE
  6842                           tosl	equ	0xFFD
  6843                           pclath	equ	0xFFA
  6844                           tblptru	equ	0xFF8
  6845                           tblptrh	equ	0xFF7
  6846                           tblptrl	equ	0xFF6
  6847                           tablat	equ	0xFF5
  6848                           prodh	equ	0xFF4
  6849                           prodl	equ	0xFF3
  6850                           intcon	equ	0xFF2
  6851                           intcon2	equ	0xFF1
  6852                           intcon3	equ	0xFF0
  6853                           postinc0	equ	0xFEE
  6854                           wreg	equ	0xFE8
  6855                           indf1	equ	0xFE7
  6856                           postinc1	equ	0xFE6
  6857                           postdec1	equ	0xFE5
  6858                           plusw1	equ	0xFE3
  6859                           fsr1h	equ	0xFE2
  6860                           fsr1l	equ	0xFE1
  6861                           indf2	equ	0xFDF
  6862                           postinc2	equ	0xFDE
  6863                           postdec2	equ	0xFDD
  6864                           plusw2	equ	0xFDB
  6865                           fsr2h	equ	0xFDA
  6866                           fsr2l	equ	0xFD9
  6867                           status	equ	0xFD8
  6868                           
  6869 ;; *************** function _fputc *****************
  6870 ;; Defined at:
  6871 ;;		line 1761 in file "bibliotecas/tff.c"
  6872 ;; Parameters:    Size  Location     Type
  6873 ;;  chr             2  132[BANK0 ] int 
  6874 ;;  fil             2  134[BANK0 ] PTR struct _FIL
  6875 ;;		 -> fil(28), 
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;  bw              2  137[BANK0 ] unsigned int 
  6878 ;;  c               1  136[BANK0 ] unsigned char 
  6879 ;; Return value:  Size  Location     Type
  6880 ;;                  2  132[BANK0 ] int 
  6881 ;; Registers used:
  6882 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6888 ;;      Params:         0       4       0       0       0       0       0       0       0
  6889 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6890 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6891 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6892 ;;Total ram usage:        7 bytes
  6893 ;; Hardware stack levels used:    1
  6894 ;; Hardware stack levels required when called:   12
  6895 ;; This function calls:
  6896 ;;		_f_write
  6897 ;; This function is called by:
  6898 ;;		_fputs
  6899 ;;		_fprintf
  6900 ;; This function uses a non-reentrant model
  6901 ;;
  6902                           
  6903                           	psect	text24
  6904  005514                     __ptext24:
  6905                           	opt stack 0
  6906  005514                     _fputc:
  6907                           	opt stack 13
  6908                           
  6909                           ;tff.c: 1766: UINT bw;
  6910                           ;tff.c: 1767: char c;
  6911                           ;tff.c: 1773: if (!fil) {
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;incstack = 0
  6915  005514  0100               	movlb	0	; () banked
  6916  005516  51E6               	movf	fputc@fil& (0+255),w,b
  6917  005518  11E7               	iorwf	(fputc@fil+1)& (0+255),w,b
  6918  00551A  A4D8               	btfss	status,2,c
  6919  00551C  D005               	goto	l1291
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;tff.c: 1775: return chr;
  6923  00551E  C0E4  F0E4         	movff	fputc@chr,?_fputc
  6924  005522  C0E5  F0E5         	movff	fputc@chr+1,?_fputc+1
  6925  005526  0012               	return	
  6926  005528                     l1291:
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;tff.c: 1776: }
  6930                           ;tff.c: 1777: c = (char)chr;
  6931  005528  C0E4  F0E8         	movff	fputc@chr,fputc@c
  6932                           
  6933                           ; BSR set to: 0
  6934                           ;tff.c: 1778: f_write(fil, &c, 1, &bw);
  6935  00552C  C0E6  F0C3         	movff	fputc@fil,f_write@fp
  6936  005530  C0E7  F0C4         	movff	fputc@fil+1,f_write@fp+1
  6937  005534  0EE8               	movlw	low fputc@c
  6938  005536  6FC5               	movwf	f_write@buff& (0+255),b
  6939  005538  0E00               	movlw	high fputc@c
  6940  00553A  6FC6               	movwf	(f_write@buff+1)& (0+255),b
  6941  00553C  0E00               	movlw	0
  6942  00553E  6FC8               	movwf	(f_write@btw+1)& (0+255),b
  6943  005540  0E01               	movlw	1
  6944  005542  6FC7               	movwf	f_write@btw& (0+255),b
  6945  005544  0EE9               	movlw	low fputc@bw
  6946  005546  6FC9               	movwf	f_write@bw& (0+255),b
  6947  005548  0E00               	movlw	high fputc@bw
  6948  00554A  6FCA               	movwf	(f_write@bw+1)& (0+255),b
  6949  00554C  EC67  F004         	call	_f_write	;wreg free
  6950                           
  6951                           ;tff.c: 1779: return bw ? chr : -1;
  6952  005550  0100               	movlb	0	; () banked
  6953  005552  51E9               	movf	fputc@bw& (0+255),w,b
  6954  005554  11EA               	iorwf	(fputc@bw+1)& (0+255),w,b
  6955  005556  A4D8               	btfss	status,2,c
  6956  005558  D003               	goto	l1294
  6957                           
  6958                           ; BSR set to: 0
  6959  00555A  69E4               	setf	?_fputc& (0+255),b
  6960  00555C  69E5               	setf	(?_fputc+1)& (0+255),b
  6961  00555E  0012               	return	
  6962  005560                     l1294:
  6963                           
  6964                           ; BSR set to: 0
  6965  005560  C0E4  F0E4         	movff	fputc@chr,?_fputc
  6966  005564  C0E5  F0E5         	movff	fputc@chr+1,?_fputc+1
  6967  005568  0012               	return	
  6968  00556A                     __end_of_fputc:
  6969                           	opt stack 0
  6970                           tosu	equ	0xFFF
  6971                           tosh	equ	0xFFE
  6972                           tosl	equ	0xFFD
  6973                           pclath	equ	0xFFA
  6974                           tblptru	equ	0xFF8
  6975                           tblptrh	equ	0xFF7
  6976                           tblptrl	equ	0xFF6
  6977                           tablat	equ	0xFF5
  6978                           prodh	equ	0xFF4
  6979                           prodl	equ	0xFF3
  6980                           intcon	equ	0xFF2
  6981                           intcon2	equ	0xFF1
  6982                           intcon3	equ	0xFF0
  6983                           postinc0	equ	0xFEE
  6984                           wreg	equ	0xFE8
  6985                           indf1	equ	0xFE7
  6986                           postinc1	equ	0xFE6
  6987                           postdec1	equ	0xFE5
  6988                           plusw1	equ	0xFE3
  6989                           fsr1h	equ	0xFE2
  6990                           fsr1l	equ	0xFE1
  6991                           indf2	equ	0xFDF
  6992                           postinc2	equ	0xFDE
  6993                           postdec2	equ	0xFDD
  6994                           plusw2	equ	0xFDB
  6995                           fsr2h	equ	0xFDA
  6996                           fsr2l	equ	0xFD9
  6997                           status	equ	0xFD8
  6998                           
  6999 ;; *************** function _f_write *****************
  7000 ;; Defined at:
  7001 ;;		line 991 in file "bibliotecas/tff.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;  fp              2   99[BANK0 ] PTR struct _FIL
  7004 ;;		 -> fil(28), 
  7005 ;;  buff            2  101[BANK0 ] PTR const void 
  7006 ;;		 -> fputc@c(1), 
  7007 ;;  btw             2  103[BANK0 ] unsigned int 
  7008 ;;  bw              2  105[BANK0 ] PTR unsigned int 
  7009 ;;		 -> fputc@bw(2), 
  7010 ;; Auto vars:     Size  Location     Type
  7011 ;;  sect            4  122[BANK0 ] unsigned long 
  7012 ;;  wcnt            2  130[BANK0 ] unsigned int 
  7013 ;;  clust           2  128[BANK0 ] unsigned short 
  7014 ;;  cc              2  126[BANK0 ] unsigned int 
  7015 ;;  wbuff           2  120[BANK0 ] PTR const unsigned char 
  7016 ;;		 -> fputc@c(1), 
  7017 ;;  res             1  119[BANK0 ] enum E155
  7018 ;; Return value:  Size  Location     Type
  7019 ;;                  1    wreg      enum E155
  7020 ;; Registers used:
  7021 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7027 ;;      Params:         0       8       0       0       0       0       0       0       0
  7028 ;;      Locals:         0      13       0       0       0       0       0       0       0
  7029 ;;      Temps:          0      12       0       0       0       0       0       0       0
  7030 ;;      Totals:         0      33       0       0       0       0       0       0       0
  7031 ;;Total ram usage:       33 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:   11
  7034 ;; This function calls:
  7035 ;;		_clust2sect
  7036 ;;		_create_chain
  7037 ;;		_disk_write
  7038 ;;		_memcpy
  7039 ;;		_move_window
  7040 ;;		_validate
  7041 ;; This function is called by:
  7042 ;;		_fputc
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           	psect	text25
  7047  0008CE                     __ptext25:
  7048                           	opt stack 0
  7049  0008CE                     _f_write:
  7050                           	opt stack 13
  7051                           
  7052                           ;tff.c: 998: FRESULT res;
  7053                           ;tff.c: 999: DWORD sect;
  7054                           ;tff.c: 1000: UINT wcnt, cc;
  7055                           ;tff.c: 1001: CLUST clust;
  7056                           ;tff.c: 1002: const BYTE *wbuff = buff;
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;incstack = 0
  7060  0008CE  C0C5  F0D8         	movff	f_write@buff,f_write@wbuff
  7061  0008D2  C0C6  F0D9         	movff	f_write@buff+1,f_write@wbuff+1
  7062                           
  7063                           ;tff.c: 1005: *bw = 0;
  7064  0008D6  C0C9  FFD9         	movff	f_write@bw,fsr2l
  7065  0008DA  C0CA  FFDA         	movff	f_write@bw+1,fsr2h
  7066  0008DE  0E00               	movlw	0
  7067  0008E0  6EDE               	movwf	postinc2,c
  7068  0008E2  0E00               	movlw	0
  7069  0008E4  6EDD               	movwf	postdec2,c
  7070                           
  7071                           ;tff.c: 1006: res = validate(fp->fs, fp->id);
  7072  0008E6  0100               	movlb	0	; () banked
  7073  0008E8  EE20 F004          	lfsr	2,4
  7074  0008EC  51C3               	movf	f_write@fp& (0+255),w,b
  7075  0008EE  26D9               	addwf	fsr2l,f,c
  7076  0008F0  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7077  0008F2  22DA               	addwfc	fsr2h,f,c
  7078  0008F4  CFDE F064          	movff	postinc2,validate@fs
  7079  0008F8  CFDD F065          	movff	postdec2,validate@fs+1
  7080  0008FC  C0C3  FFD9         	movff	f_write@fp,fsr2l
  7081  000900  C0C4  FFDA         	movff	f_write@fp+1,fsr2h
  7082  000904  CFDE F066          	movff	postinc2,validate@id
  7083  000908  CFDD F067          	movff	postdec2,validate@id+1
  7084  00090C  EC59  F02B         	call	_validate	;wreg free
  7085  000910  0100               	movlb	0	; () banked
  7086  000912  6FD7               	movwf	f_write@res& (0+255),b
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;tff.c: 1007: if (res != FR_OK) return res;
  7090  000914  51D7               	movf	f_write@res& (0+255),w,b
  7091  000916  A4D8               	btfss	status,2,c
  7092  000918  0012               	return	
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;tff.c: 1008: if (fp->flag & 0x80) return FR_RW_ERROR;
  7096                           
  7097                           ; BSR set to: 0
  7098                           
  7099                           ; BSR set to: 0
  7100                           ;	Return value of _f_write is never used
  7101  00091A  EE20 F002          	lfsr	2,2
  7102  00091E  51C3               	movf	f_write@fp& (0+255),w,b
  7103  000920  26D9               	addwf	fsr2l,f,c
  7104  000922  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7105  000924  22DA               	addwfc	fsr2h,f,c
  7106  000926  BEDF               	btfsc	indf2,7,c
  7107  000928  0012               	return	
  7108                           
  7109                           ; BSR set to: 0
  7110                           ;tff.c: 1009: if (!(fp->flag & 0x02)) return FR_DENIED;
  7111                           
  7112                           ; BSR set to: 0
  7113                           
  7114                           ; BSR set to: 0
  7115                           ;	Return value of _f_write is never used
  7116  00092A  EE20 F002          	lfsr	2,2
  7117  00092E  51C3               	movf	f_write@fp& (0+255),w,b
  7118  000930  26D9               	addwf	fsr2l,f,c
  7119  000932  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7120  000934  22DA               	addwfc	fsr2h,f,c
  7121  000936  A2DF               	btfss	indf2,1,c
  7122  000938  0012               	return	
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;tff.c: 1010: if (fp->fsize + btw < fp->fsize) return FR_OK;
  7126                           
  7127                           ; BSR set to: 0
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;	Return value of _f_write is never used
  7131  00093A  EE20 F00A          	lfsr	2,10
  7132  00093E  51C3               	movf	f_write@fp& (0+255),w,b
  7133  000940  26D9               	addwf	fsr2l,f,c
  7134  000942  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7135  000944  22DA               	addwfc	fsr2h,f,c
  7136  000946  EE10 F00A          	lfsr	1,10
  7137  00094A  51C3               	movf	f_write@fp& (0+255),w,b
  7138  00094C  26E1               	addwf	fsr1l,f,c
  7139  00094E  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7140  000950  22E2               	addwfc	fsr1h,f,c
  7141  000952  CFE6 F0CF          	movff	postinc1,??_f_write+4
  7142  000956  CFE6 F0D0          	movff	postinc1,??_f_write+5
  7143  00095A  CFE6 F0D1          	movff	postinc1,??_f_write+6
  7144  00095E  CFE6 F0D2          	movff	postinc1,??_f_write+7
  7145  000962  51C7               	movf	f_write@btw& (0+255),w,b
  7146  000964  25CF               	addwf	(??_f_write+4)& (0+255),w,b
  7147  000966  6FD3               	movwf	(??_f_write+8)& (0+255),b
  7148  000968  51C8               	movf	(f_write@btw+1)& (0+255),w,b
  7149  00096A  21D0               	addwfc	(??_f_write+5)& (0+255),w,b
  7150  00096C  6FD4               	movwf	(??_f_write+9)& (0+255),b
  7151  00096E  0E00               	movlw	0
  7152  000970  21D1               	addwfc	(??_f_write+6)& (0+255),w,b
  7153  000972  6FD5               	movwf	(??_f_write+10)& (0+255),b
  7154  000974  0E00               	movlw	0
  7155  000976  21D2               	addwfc	(??_f_write+7)& (0+255),w,b
  7156  000978  6FD6               	movwf	(??_f_write+11)& (0+255),b
  7157  00097A  50DE               	movf	postinc2,w,c
  7158  00097C  5DD3               	subwf	(??_f_write+8)& (0+255),w,b
  7159  00097E  50DE               	movf	postinc2,w,c
  7160  000980  59D4               	subwfb	(??_f_write+9)& (0+255),w,b
  7161  000982  50DE               	movf	postinc2,w,c
  7162  000984  59D5               	subwfb	(??_f_write+10)& (0+255),w,b
  7163  000986  50DE               	movf	postinc2,w,c
  7164  000988  59D6               	subwfb	(??_f_write+11)& (0+255),w,b
  7165  00098A  A0D8               	btfss	status,0,c
  7166  00098C  0012               	return	
  7167  00098E  D23B               	goto	l1201
  7168  000990                     
  7169                           ; BSR set to: 0
  7170                           ;tff.c: 1014: if ((fp->fptr % 512U) == 0) {
  7171                           
  7172                           ; BSR set to: 0
  7173  000990  EE20 F006          	lfsr	2,6
  7174  000994  51C3               	movf	f_write@fp& (0+255),w,b
  7175  000996  26D9               	addwf	fsr2l,f,c
  7176  000998  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7177  00099A  22DA               	addwfc	fsr2h,f,c
  7178  00099C  0EFF               	movlw	255
  7179  00099E  14DE               	andwf	postinc2,w,c
  7180  0009A0  6FCB               	movwf	??_f_write& (0+255),b
  7181  0009A2  0E01               	movlw	1
  7182  0009A4  14DE               	andwf	postinc2,w,c
  7183  0009A6  6FCC               	movwf	(??_f_write+1)& (0+255),b
  7184  0009A8  0E00               	movlw	0
  7185  0009AA  14DE               	andwf	postinc2,w,c
  7186  0009AC  6FCD               	movwf	(??_f_write+2)& (0+255),b
  7187  0009AE  0E00               	movlw	0
  7188  0009B0  14DE               	andwf	postinc2,w,c
  7189  0009B2  6FCE               	movwf	(??_f_write+3)& (0+255),b
  7190  0009B4  51CB               	movf	??_f_write& (0+255),w,b
  7191  0009B6  11CC               	iorwf	(??_f_write+1)& (0+255),w,b
  7192  0009B8  11CD               	iorwf	(??_f_write+2)& (0+255),w,b
  7193  0009BA  11CE               	iorwf	(??_f_write+3)& (0+255),w,b
  7194  0009BC  A4D8               	btfss	status,2,c
  7195  0009BE  D166               	goto	l1203
  7196                           
  7197                           ; BSR set to: 0
  7198                           ;tff.c: 1015: if (fp->csect >= fp->fs->csize) {
  7199  0009C0  EE20 F004          	lfsr	2,4
  7200  0009C4  51C3               	movf	f_write@fp& (0+255),w,b
  7201  0009C6  26D9               	addwf	fsr2l,f,c
  7202  0009C8  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7203  0009CA  22DA               	addwfc	fsr2h,f,c
  7204  0009CC  EE10 F01D          	lfsr	1,29
  7205  0009D0  50DE               	movf	postinc2,w,c
  7206  0009D2  26E1               	addwf	fsr1l,f,c
  7207  0009D4  50DD               	movf	postdec2,w,c
  7208  0009D6  22E2               	addwfc	fsr1h,f,c
  7209  0009D8  EE20 F003          	lfsr	2,3
  7210  0009DC  51C3               	movf	f_write@fp& (0+255),w,b
  7211  0009DE  26D9               	addwf	fsr2l,f,c
  7212  0009E0  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7213  0009E2  22DA               	addwfc	fsr2h,f,c
  7214  0009E4  50E6               	movf	postinc1,w,c
  7215  0009E6  5CDE               	subwf	postinc2,w,c
  7216  0009E8  A0D8               	btfss	status,0,c
  7217  0009EA  D06D               	goto	l1204
  7218                           
  7219                           ; BSR set to: 0
  7220                           ;tff.c: 1016: if (fp->fptr == 0) {
  7221  0009EC  EE20 F006          	lfsr	2,6
  7222  0009F0  51C3               	movf	f_write@fp& (0+255),w,b
  7223  0009F2  26D9               	addwf	fsr2l,f,c
  7224  0009F4  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7225  0009F6  22DA               	addwfc	fsr2h,f,c
  7226  0009F8  50DE               	movf	postinc2,w,c
  7227  0009FA  10DE               	iorwf	postinc2,w,c
  7228  0009FC  10DE               	iorwf	postinc2,w,c
  7229  0009FE  10DE               	iorwf	postinc2,w,c
  7230  000A00  A4D8               	btfss	status,2,c
  7231  000A02  D024               	goto	l1205
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;tff.c: 1017: clust = fp->org_clust;
  7235  000A04  EE20 F00E          	lfsr	2,14
  7236  000A08  51C3               	movf	f_write@fp& (0+255),w,b
  7237  000A0A  26D9               	addwf	fsr2l,f,c
  7238  000A0C  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7239  000A0E  22DA               	addwfc	fsr2h,f,c
  7240  000A10  CFDE F0E0          	movff	postinc2,f_write@clust
  7241  000A14  CFDD F0E1          	movff	postdec2,f_write@clust+1
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;tff.c: 1018: if (clust == 0)
  7245  000A18  51E0               	movf	f_write@clust& (0+255),w,b
  7246  000A1A  11E1               	iorwf	(f_write@clust+1)& (0+255),w,b
  7247  000A1C  A4D8               	btfss	status,2,c
  7248  000A1E  D026               	goto	l1207
  7249                           
  7250                           ; BSR set to: 0
  7251                           ;tff.c: 1019: fp->org_clust = clust = create_chain(0);
  7252  000A20  0E00               	movlw	0
  7253  000A22  6FB6               	movwf	(create_chain@clust+1)& (0+255),b
  7254  000A24  0E00               	movlw	0
  7255  000A26  6FB5               	movwf	create_chain@clust& (0+255),b
  7256  000A28  ECF9  F01C         	call	_create_chain	;wreg free
  7257  000A2C  C0B5  F0E0         	movff	?_create_chain,f_write@clust
  7258  000A30  C0B6  F0E1         	movff	?_create_chain+1,f_write@clust+1
  7259  000A34  0100               	movlb	0	; () banked
  7260  000A36  EE20 F00E          	lfsr	2,14
  7261  000A3A  51C3               	movf	f_write@fp& (0+255),w,b
  7262  000A3C  26D9               	addwf	fsr2l,f,c
  7263  000A3E  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7264  000A40  22DA               	addwfc	fsr2h,f,c
  7265  000A42  C0E0  FFDE         	movff	f_write@clust,postinc2
  7266  000A46  C0E1  FFDD         	movff	f_write@clust+1,postdec2
  7267                           
  7268                           ; BSR set to: 0
  7269                           ;tff.c: 1020: } else {
  7270  000A4A  D010               	goto	l1207
  7271  000A4C                     l1205:
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;tff.c: 1021: clust = create_chain(fp->curr_clust);
  7275                           
  7276                           ; BSR set to: 0
  7277  000A4C  EE20 F010          	lfsr	2,16
  7278  000A50  51C3               	movf	f_write@fp& (0+255),w,b
  7279  000A52  26D9               	addwf	fsr2l,f,c
  7280  000A54  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7281  000A56  22DA               	addwfc	fsr2h,f,c
  7282  000A58  CFDE F0B5          	movff	postinc2,create_chain@clust
  7283  000A5C  CFDD F0B6          	movff	postdec2,create_chain@clust+1
  7284  000A60  ECF9  F01C         	call	_create_chain	;wreg free
  7285  000A64  C0B5  F0E0         	movff	?_create_chain,f_write@clust
  7286  000A68  C0B6  F0E1         	movff	?_create_chain+1,f_write@clust+1
  7287  000A6C                     l1207:
  7288                           
  7289                           ;tff.c: 1022: }
  7290                           ;tff.c: 1023: if (clust == 0) break;
  7291  000A6C  0100               	movlb	0	; () banked
  7292  000A6E  51E0               	movf	f_write@clust& (0+255),w,b
  7293  000A70  11E1               	iorwf	(f_write@clust+1)& (0+255),w,b
  7294  000A72  B4D8               	btfsc	status,2,c
  7295  000A74  D1CC               	goto	u11700
  7296                           
  7297                           ; BSR set to: 0
  7298                           ;tff.c: 1024: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
  7299                           
  7300                           ; BSR set to: 0
  7301                           
  7302                           ; BSR set to: 0
  7303  000A76  05E0               	decf	f_write@clust& (0+255),w,b
  7304  000A78  11E1               	iorwf	(f_write@clust+1)& (0+255),w,b
  7305  000A7A  B4D8               	btfsc	status,2,c
  7306  000A7C  D1FB               	goto	l1213
  7307                           
  7308                           ; BSR set to: 0
  7309  000A7E  EE20 F004          	lfsr	2,4
  7310  000A82  51C3               	movf	f_write@fp& (0+255),w,b
  7311  000A84  26D9               	addwf	fsr2l,f,c
  7312  000A86  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7313  000A88  22DA               	addwfc	fsr2h,f,c
  7314  000A8A  EE10 F016          	lfsr	1,22
  7315  000A8E  50DE               	movf	postinc2,w,c
  7316  000A90  26E1               	addwf	fsr1l,f,c
  7317  000A92  50DD               	movf	postdec2,w,c
  7318  000A94  22E2               	addwfc	fsr1h,f,c
  7319  000A96  50E6               	movf	postinc1,w,c
  7320  000A98  5DE0               	subwf	f_write@clust& (0+255),w,b
  7321  000A9A  50E6               	movf	postinc1,w,c
  7322  000A9C  59E1               	subwfb	(f_write@clust+1)& (0+255),w,b
  7323  000A9E  B0D8               	btfsc	status,0,c
  7324  000AA0  D1E9               	goto	l1213
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;tff.c: 1025: fp->curr_clust = clust;
  7328                           
  7329                           ; BSR set to: 0
  7330                           
  7331                           ; BSR set to: 0
  7332  000AA2  EE20 F010          	lfsr	2,16
  7333  000AA6  51C3               	movf	f_write@fp& (0+255),w,b
  7334  000AA8  26D9               	addwf	fsr2l,f,c
  7335  000AAA  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7336  000AAC  22DA               	addwfc	fsr2h,f,c
  7337  000AAE  C0E0  FFDE         	movff	f_write@clust,postinc2
  7338  000AB2  C0E1  FFDD         	movff	f_write@clust+1,postdec2
  7339                           
  7340                           ;tff.c: 1026: fp->csect = 0;
  7341  000AB6  EE20 F003          	lfsr	2,3
  7342  000ABA  51C3               	movf	f_write@fp& (0+255),w,b
  7343  000ABC  26D9               	addwf	fsr2l,f,c
  7344  000ABE  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7345  000AC0  22DA               	addwfc	fsr2h,f,c
  7346  000AC2  0E00               	movlw	0
  7347  000AC4  6EDF               	movwf	indf2,c
  7348  000AC6                     l1204:
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;tff.c: 1027: }
  7352                           ;tff.c: 1028: sect = clust2sect(fp->curr_clust) + fp->csect;
  7353                           
  7354                           ; BSR set to: 0
  7355  000AC6  EE20 F010          	lfsr	2,16
  7356  000ACA  51C3               	movf	f_write@fp& (0+255),w,b
  7357  000ACC  26D9               	addwf	fsr2l,f,c
  7358  000ACE  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7359  000AD0  22DA               	addwfc	fsr2h,f,c
  7360  000AD2  CFDE F06C          	movff	postinc2,clust2sect@clust
  7361  000AD6  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  7362  000ADA  EC23  F024         	call	_clust2sect	;wreg free
  7363  000ADE  0100               	movlb	0	; () banked
  7364  000AE0  EE20 F003          	lfsr	2,3
  7365  000AE4  51C3               	movf	f_write@fp& (0+255),w,b
  7366  000AE6  26D9               	addwf	fsr2l,f,c
  7367  000AE8  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7368  000AEA  22DA               	addwfc	fsr2h,f,c
  7369  000AEC  50DF               	movf	indf2,w,c
  7370  000AEE  6FCB               	movwf	??_f_write& (0+255),b
  7371  000AF0  51CB               	movf	??_f_write& (0+255),w,b
  7372  000AF2  256C               	addwf	?_clust2sect& (0+255),w,b
  7373  000AF4  6FDA               	movwf	f_write@sect& (0+255),b
  7374  000AF6  0E00               	movlw	0
  7375  000AF8  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  7376  000AFA  6FDB               	movwf	(f_write@sect+1)& (0+255),b
  7377  000AFC  0E00               	movlw	0
  7378  000AFE  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  7379  000B00  6FDC               	movwf	(f_write@sect+2)& (0+255),b
  7380  000B02  0E00               	movlw	0
  7381  000B04  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  7382  000B06  6FDD               	movwf	(f_write@sect+3)& (0+255),b
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;tff.c: 1029: cc = btw / 512U;
  7386  000B08  C0C7  F0CB         	movff	f_write@btw,??_f_write
  7387  000B0C  C0C8  F0CC         	movff	f_write@btw+1,??_f_write+1
  7388  000B10  0E09               	movlw	9
  7389  000B12  6FCD               	movwf	(??_f_write+2)& (0+255),b
  7390  000B14                     u11615:
  7391  000B14  90D8               	bcf	status,0,c
  7392  000B16  33CC               	rrcf	(??_f_write+1)& (0+255),f,b
  7393  000B18  33CB               	rrcf	??_f_write& (0+255),f,b
  7394  000B1A  2FCD               	decfsz	(??_f_write+2)& (0+255),f,b
  7395  000B1C  D7FB               	goto	u11615
  7396  000B1E  C0CB  F0DE         	movff	??_f_write,f_write@cc
  7397  000B22  C0CC  F0DF         	movff	??_f_write+1,f_write@cc+1
  7398                           
  7399                           ; BSR set to: 0
  7400                           ;tff.c: 1030: if (cc) {
  7401  000B26  51DE               	movf	f_write@cc& (0+255),w,b
  7402  000B28  11DF               	iorwf	(f_write@cc+1)& (0+255),w,b
  7403  000B2A  B4D8               	btfsc	status,2,c
  7404  000B2C  D070               	goto	l1214
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;tff.c: 1031: if (fp->csect + cc > fp->fs->csize)
  7408  000B2E  EE20 F003          	lfsr	2,3
  7409  000B32  51C3               	movf	f_write@fp& (0+255),w,b
  7410  000B34  26D9               	addwf	fsr2l,f,c
  7411  000B36  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7412  000B38  22DA               	addwfc	fsr2h,f,c
  7413  000B3A  50DF               	movf	indf2,w,c
  7414  000B3C  6FCB               	movwf	??_f_write& (0+255),b
  7415  000B3E  51CB               	movf	??_f_write& (0+255),w,b
  7416  000B40  25DE               	addwf	f_write@cc& (0+255),w,b
  7417  000B42  6FCC               	movwf	(??_f_write+1)& (0+255),b
  7418  000B44  0E00               	movlw	0
  7419  000B46  21DF               	addwfc	(f_write@cc+1)& (0+255),w,b
  7420  000B48  6FCD               	movwf	(??_f_write+2)& (0+255),b
  7421  000B4A  EE20 F004          	lfsr	2,4
  7422  000B4E  51C3               	movf	f_write@fp& (0+255),w,b
  7423  000B50  26D9               	addwf	fsr2l,f,c
  7424  000B52  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7425  000B54  22DA               	addwfc	fsr2h,f,c
  7426  000B56  EE10 F01D          	lfsr	1,29
  7427  000B5A  50DE               	movf	postinc2,w,c
  7428  000B5C  26E1               	addwf	fsr1l,f,c
  7429  000B5E  50DD               	movf	postdec2,w,c
  7430  000B60  22E2               	addwfc	fsr1h,f,c
  7431  000B62  50E7               	movf	indf1,w,c
  7432  000B64  6FCE               	movwf	(??_f_write+3)& (0+255),b
  7433  000B66  6BCF               	clrf	(??_f_write+4)& (0+255),b
  7434  000B68  51CC               	movf	(??_f_write+1)& (0+255),w,b
  7435  000B6A  5DCE               	subwf	(??_f_write+3)& (0+255),w,b
  7436  000B6C  51CD               	movf	(??_f_write+2)& (0+255),w,b
  7437  000B6E  59CF               	subwfb	(??_f_write+4)& (0+255),w,b
  7438  000B70  B0D8               	btfsc	status,0,c
  7439  000B72  D021               	goto	l1215
  7440                           
  7441                           ; BSR set to: 0
  7442                           ;tff.c: 1032: cc = fp->fs->csize - fp->csect;
  7443  000B74  EE20 F003          	lfsr	2,3
  7444  000B78  51C3               	movf	f_write@fp& (0+255),w,b
  7445  000B7A  26D9               	addwf	fsr2l,f,c
  7446  000B7C  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7447  000B7E  22DA               	addwfc	fsr2h,f,c
  7448  000B80  50DF               	movf	indf2,w,c
  7449  000B82  6FCB               	movwf	??_f_write& (0+255),b
  7450  000B84  6BCC               	clrf	(??_f_write+1)& (0+255),b
  7451  000B86  1FCB               	comf	??_f_write& (0+255),f,b
  7452  000B88  1FCC               	comf	(??_f_write+1)& (0+255),f,b
  7453  000B8A  4BCB               	infsnz	??_f_write& (0+255),f,b
  7454  000B8C  2BCC               	incf	(??_f_write+1)& (0+255),f,b
  7455  000B8E  EE20 F004          	lfsr	2,4
  7456  000B92  51C3               	movf	f_write@fp& (0+255),w,b
  7457  000B94  26D9               	addwf	fsr2l,f,c
  7458  000B96  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7459  000B98  22DA               	addwfc	fsr2h,f,c
  7460  000B9A  EE10 F01D          	lfsr	1,29
  7461  000B9E  50DE               	movf	postinc2,w,c
  7462  000BA0  26E1               	addwf	fsr1l,f,c
  7463  000BA2  50DD               	movf	postdec2,w,c
  7464  000BA4  22E2               	addwfc	fsr1h,f,c
  7465  000BA6  50E7               	movf	indf1,w,c
  7466  000BA8  6FCD               	movwf	(??_f_write+2)& (0+255),b
  7467  000BAA  51CD               	movf	(??_f_write+2)& (0+255),w,b
  7468  000BAC  25CB               	addwf	??_f_write& (0+255),w,b
  7469  000BAE  6FDE               	movwf	f_write@cc& (0+255),b
  7470  000BB0  0E00               	movlw	0
  7471  000BB2  21CC               	addwfc	(??_f_write+1)& (0+255),w,b
  7472  000BB4  6FDF               	movwf	(f_write@cc+1)& (0+255),b
  7473  000BB6                     l1215:
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;tff.c: 1033: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
  7477                           
  7478                           ; BSR set to: 0
  7479  000BB6  C0D8  F07F         	movff	f_write@wbuff,disk_write@buff
  7480  000BBA  C0D9  F080         	movff	f_write@wbuff+1,disk_write@buff+1
  7481  000BBE  C0DA  F081         	movff	f_write@sect,disk_write@sector
  7482  000BC2  C0DB  F082         	movff	f_write@sect+1,disk_write@sector+1
  7483  000BC6  C0DC  F083         	movff	f_write@sect+2,disk_write@sector+2
  7484  000BCA  C0DD  F084         	movff	f_write@sect+3,disk_write@sector+3
  7485  000BCE  C0DE  F085         	movff	f_write@cc,disk_write@count
  7486  000BD2  0E00               	movlw	0
  7487  000BD4  EC26  F028         	call	_disk_write
  7488  000BD8  0900               	iorlw	0
  7489  000BDA  A4D8               	btfss	status,2,c
  7490  000BDC  D14B               	goto	l1213
  7491                           
  7492                           ;tff.c: 1035: fp->csect += (BYTE)cc;
  7493                           
  7494                           ;tff.c: 1034: goto fw_error;
  7495  000BDE  0100               	movlb	0	; () banked
  7496  000BE0  EE20 F003          	lfsr	2,3
  7497  000BE4  51C3               	movf	f_write@fp& (0+255),w,b
  7498  000BE6  26D9               	addwf	fsr2l,f,c
  7499  000BE8  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7500  000BEA  22DA               	addwfc	fsr2h,f,c
  7501  000BEC  51DE               	movf	f_write@cc& (0+255),w,b
  7502  000BEE  26DF               	addwf	indf2,f,c
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;tff.c: 1036: wcnt = 512U * cc;
  7506  000BF0  C0DE  F0CB         	movff	f_write@cc,??_f_write
  7507  000BF4  C0DF  F0CC         	movff	f_write@cc+1,??_f_write+1
  7508  000BF8  0E09               	movlw	9
  7509  000BFA                     u11655:
  7510  000BFA  90D8               	bcf	status,0,c
  7511  000BFC  37CB               	rlcf	??_f_write& (0+255),f,b
  7512  000BFE  37CC               	rlcf	(??_f_write+1)& (0+255),f,b
  7513  000C00  2EE8               	decfsz	wreg,f,c
  7514  000C02  D7FB               	goto	u11655
  7515  000C04  C0CB  F0E2         	movff	??_f_write,f_write@wcnt
  7516  000C08  C0CC  F0E3         	movff	??_f_write+1,f_write@wcnt+1
  7517                           
  7518                           ;tff.c: 1037: continue;
  7519  000C0C  D0DF               	goto	l1217
  7520  000C0E                     l1214:
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;tff.c: 1038: }
  7524                           ;tff.c: 1039: if (fp->fptr >= fp->fsize) {
  7525                           
  7526                           ; BSR set to: 0
  7527  000C0E  EE20 F00A          	lfsr	2,10
  7528  000C12  51C3               	movf	f_write@fp& (0+255),w,b
  7529  000C14  26D9               	addwf	fsr2l,f,c
  7530  000C16  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7531  000C18  22DA               	addwfc	fsr2h,f,c
  7532  000C1A  EE10 F006          	lfsr	1,6
  7533  000C1E  51C3               	movf	f_write@fp& (0+255),w,b
  7534  000C20  26E1               	addwf	fsr1l,f,c
  7535  000C22  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7536  000C24  22E2               	addwfc	fsr1h,f,c
  7537  000C26  50DE               	movf	postinc2,w,c
  7538  000C28  5CE6               	subwf	postinc1,w,c
  7539  000C2A  50DE               	movf	postinc2,w,c
  7540  000C2C  58E6               	subwfb	postinc1,w,c
  7541  000C2E  50DE               	movf	postinc2,w,c
  7542  000C30  58E6               	subwfb	postinc1,w,c
  7543  000C32  50DE               	movf	postinc2,w,c
  7544  000C34  58E6               	subwfb	postinc1,w,c
  7545  000C36  A0D8               	btfss	status,0,c
  7546  000C38  D022               	goto	l1218
  7547                           
  7548                           ; BSR set to: 0
  7549                           ;tff.c: 1040: if (!move_window(0)) goto fw_error;
  7550  000C3A  0E00               	movlw	0
  7551  000C3C  6F8A               	movwf	move_window@sector& (0+255),b
  7552  000C3E  0E00               	movlw	0
  7553  000C40  6F8B               	movwf	(move_window@sector+1)& (0+255),b
  7554  000C42  0E00               	movlw	0
  7555  000C44  6F8C               	movwf	(move_window@sector+2)& (0+255),b
  7556  000C46  0E00               	movlw	0
  7557  000C48  6F8D               	movwf	(move_window@sector+3)& (0+255),b
  7558  000C4A  ECD9  F01D         	call	_move_window	;wreg free
  7559  000C4E  0900               	iorlw	0
  7560  000C50  B4D8               	btfsc	status,2,c
  7561  000C52  D110               	goto	l1213
  7562                           
  7563                           ;tff.c: 1041: fp->fs->winsect = sect;
  7564  000C54  0100               	movlb	0	; () banked
  7565  000C56  EE20 F004          	lfsr	2,4
  7566  000C5A  51C3               	movf	f_write@fp& (0+255),w,b
  7567  000C5C  26D9               	addwf	fsr2l,f,c
  7568  000C5E  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7569  000C60  22DA               	addwfc	fsr2h,f,c
  7570  000C62  EE10 F004          	lfsr	1,4
  7571  000C66  50DE               	movf	postinc2,w,c
  7572  000C68  26E1               	addwf	fsr1l,f,c
  7573  000C6A  50DD               	movf	postdec2,w,c
  7574  000C6C  22E2               	addwfc	fsr1h,f,c
  7575  000C6E  C0DA  FFE6         	movff	f_write@sect,postinc1
  7576  000C72  C0DB  FFE6         	movff	f_write@sect+1,postinc1
  7577  000C76  C0DC  FFE6         	movff	f_write@sect+2,postinc1
  7578  000C7A  C0DD  FFE6         	movff	f_write@sect+3,postinc1
  7579  000C7E                     l1218:
  7580                           
  7581                           ; BSR set to: 0
  7582                           ;tff.c: 1042: }
  7583                           ;tff.c: 1043: fp->csect++;
  7584                           
  7585                           ; BSR set to: 0
  7586  000C7E  EE20 F003          	lfsr	2,3
  7587  000C82  51C3               	movf	f_write@fp& (0+255),w,b
  7588  000C84  26D9               	addwf	fsr2l,f,c
  7589  000C86  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7590  000C88  22DA               	addwfc	fsr2h,f,c
  7591  000C8A  2ADF               	incf	indf2,f,c
  7592  000C8C                     l1203:
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;tff.c: 1044: }
  7596                           ;tff.c: 1045: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  7597                           
  7598                           ; BSR set to: 0
  7599  000C8C  EE20 F010          	lfsr	2,16
  7600  000C90  51C3               	movf	f_write@fp& (0+255),w,b
  7601  000C92  26D9               	addwf	fsr2l,f,c
  7602  000C94  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7603  000C96  22DA               	addwfc	fsr2h,f,c
  7604  000C98  CFDE F06C          	movff	postinc2,clust2sect@clust
  7605  000C9C  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  7606  000CA0  EC23  F024         	call	_clust2sect	;wreg free
  7607  000CA4  0100               	movlb	0	; () banked
  7608  000CA6  EE20 F003          	lfsr	2,3
  7609  000CAA  51C3               	movf	f_write@fp& (0+255),w,b
  7610  000CAC  26D9               	addwf	fsr2l,f,c
  7611  000CAE  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7612  000CB0  22DA               	addwfc	fsr2h,f,c
  7613  000CB2  50DF               	movf	indf2,w,c
  7614  000CB4  6FCB               	movwf	??_f_write& (0+255),b
  7615  000CB6  51CB               	movf	??_f_write& (0+255),w,b
  7616  000CB8  256C               	addwf	?_clust2sect& (0+255),w,b
  7617  000CBA  6FCC               	movwf	(??_f_write+1)& (0+255),b
  7618  000CBC  0E00               	movlw	0
  7619  000CBE  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  7620  000CC0  6FCD               	movwf	(??_f_write+2)& (0+255),b
  7621  000CC2  0E00               	movlw	0
  7622  000CC4  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  7623  000CC6  6FCE               	movwf	(??_f_write+3)& (0+255),b
  7624  000CC8  0E00               	movlw	0
  7625  000CCA  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  7626  000CCC  6FCF               	movwf	(??_f_write+4)& (0+255),b
  7627  000CCE  0EFF               	movlw	255
  7628  000CD0  25CC               	addwf	(??_f_write+1)& (0+255),w,b
  7629  000CD2  6FDA               	movwf	f_write@sect& (0+255),b
  7630  000CD4  0EFF               	movlw	255
  7631  000CD6  21CD               	addwfc	(??_f_write+2)& (0+255),w,b
  7632  000CD8  6FDB               	movwf	(f_write@sect+1)& (0+255),b
  7633  000CDA  0EFF               	movlw	255
  7634  000CDC  21CE               	addwfc	(??_f_write+3)& (0+255),w,b
  7635  000CDE  6FDC               	movwf	(f_write@sect+2)& (0+255),b
  7636  000CE0  0EFF               	movlw	255
  7637  000CE2  21CF               	addwfc	(??_f_write+4)& (0+255),w,b
  7638  000CE4  6FDD               	movwf	(f_write@sect+3)& (0+255),b
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;tff.c: 1046: if (!move_window(sect)) goto fw_error;
  7642  000CE6  C0DA  F08A         	movff	f_write@sect,move_window@sector
  7643  000CEA  C0DB  F08B         	movff	f_write@sect+1,move_window@sector+1
  7644  000CEE  C0DC  F08C         	movff	f_write@sect+2,move_window@sector+2
  7645  000CF2  C0DD  F08D         	movff	f_write@sect+3,move_window@sector+3
  7646  000CF6  ECD9  F01D         	call	_move_window	;wreg free
  7647  000CFA  0900               	iorlw	0
  7648  000CFC  B4D8               	btfsc	status,2,c
  7649  000CFE  D0BA               	goto	l1213
  7650                           
  7651                           ;tff.c: 1047: wcnt = 512U - (fp->fptr % 512U);
  7652  000D00  0EFF               	movlw	255
  7653  000D02  0100               	movlb	0	; () banked
  7654  000D04  6FCB               	movwf	??_f_write& (0+255),b
  7655  000D06  0E01               	movlw	1
  7656  000D08  6FCC               	movwf	(??_f_write+1)& (0+255),b
  7657  000D0A  EE20 F006          	lfsr	2,6
  7658  000D0E  51C3               	movf	f_write@fp& (0+255),w,b
  7659  000D10  26D9               	addwf	fsr2l,f,c
  7660  000D12  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7661  000D14  22DA               	addwfc	fsr2h,f,c
  7662  000D16  CFDE F0CD          	movff	postinc2,??_f_write+2
  7663  000D1A  CFDD F0CE          	movff	postdec2,??_f_write+3
  7664  000D1E  51CB               	movf	??_f_write& (0+255),w,b
  7665  000D20  17CD               	andwf	(??_f_write+2)& (0+255),f,b
  7666  000D22  51CC               	movf	(??_f_write+1)& (0+255),w,b
  7667  000D24  17CE               	andwf	(??_f_write+3)& (0+255),f,b
  7668  000D26  1FCD               	comf	(??_f_write+2)& (0+255),f,b
  7669  000D28  1FCE               	comf	(??_f_write+3)& (0+255),f,b
  7670  000D2A  4BCD               	infsnz	(??_f_write+2)& (0+255),f,b
  7671  000D2C  2BCE               	incf	(??_f_write+3)& (0+255),f,b
  7672  000D2E  0E00               	movlw	0
  7673  000D30  25CD               	addwf	(??_f_write+2)& (0+255),w,b
  7674  000D32  6FE2               	movwf	f_write@wcnt& (0+255),b
  7675  000D34  0E02               	movlw	2
  7676  000D36  21CE               	addwfc	(??_f_write+3)& (0+255),w,b
  7677  000D38  6FE3               	movwf	(f_write@wcnt+1)& (0+255),b
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;tff.c: 1048: if (wcnt > btw) wcnt = btw;
  7681  000D3A  51E2               	movf	f_write@wcnt& (0+255),w,b
  7682  000D3C  5DC7               	subwf	f_write@btw& (0+255),w,b
  7683  000D3E  51E3               	movf	(f_write@wcnt+1)& (0+255),w,b
  7684  000D40  59C8               	subwfb	(f_write@btw+1)& (0+255),w,b
  7685  000D42  B0D8               	btfsc	status,0,c
  7686  000D44  D004               	goto	l1221
  7687                           
  7688                           ; BSR set to: 0
  7689  000D46  C0C7  F0E2         	movff	f_write@btw,f_write@wcnt
  7690  000D4A  C0C8  F0E3         	movff	f_write@btw+1,f_write@wcnt+1
  7691  000D4E                     l1221:
  7692                           
  7693                           ; BSR set to: 0
  7694                           ;tff.c: 1049: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
  7695                           
  7696                           ; BSR set to: 0
  7697  000D4E  0EFF               	movlw	255
  7698  000D50  6FCB               	movwf	??_f_write& (0+255),b
  7699  000D52  0E01               	movlw	1
  7700  000D54  6FCC               	movwf	(??_f_write+1)& (0+255),b
  7701  000D56  EE20 F006          	lfsr	2,6
  7702  000D5A  51C3               	movf	f_write@fp& (0+255),w,b
  7703  000D5C  26D9               	addwf	fsr2l,f,c
  7704  000D5E  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7705  000D60  22DA               	addwfc	fsr2h,f,c
  7706  000D62  CFDE F0CD          	movff	postinc2,??_f_write+2
  7707  000D66  CFDD F0CE          	movff	postdec2,??_f_write+3
  7708  000D6A  51CB               	movf	??_f_write& (0+255),w,b
  7709  000D6C  17CD               	andwf	(??_f_write+2)& (0+255),f,b
  7710  000D6E  51CC               	movf	(??_f_write+1)& (0+255),w,b
  7711  000D70  17CE               	andwf	(??_f_write+3)& (0+255),f,b
  7712  000D72  0E20               	movlw	32
  7713  000D74  27CD               	addwf	(??_f_write+2)& (0+255),f,b
  7714  000D76  0E00               	movlw	0
  7715  000D78  23CE               	addwfc	(??_f_write+3)& (0+255),f,b
  7716  000D7A  EE20 F004          	lfsr	2,4
  7717  000D7E  51C3               	movf	f_write@fp& (0+255),w,b
  7718  000D80  26D9               	addwf	fsr2l,f,c
  7719  000D82  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7720  000D84  22DA               	addwfc	fsr2h,f,c
  7721  000D86  CFDE F0CF          	movff	postinc2,??_f_write+4
  7722  000D8A  CFDD F0D0          	movff	postdec2,??_f_write+5
  7723  000D8E  51CD               	movf	(??_f_write+2)& (0+255),w,b
  7724  000D90  25CF               	addwf	(??_f_write+4)& (0+255),w,b
  7725  000D92  6F60               	movwf	memcpy@d1& (0+255),b
  7726  000D94  51CE               	movf	(??_f_write+3)& (0+255),w,b
  7727  000D96  21D0               	addwfc	(??_f_write+5)& (0+255),w,b
  7728  000D98  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  7729  000D9A  C0D8  F062         	movff	f_write@wbuff,memcpy@s1
  7730  000D9E  C0D9  F063         	movff	f_write@wbuff+1,memcpy@s1+1
  7731  000DA2  C0E2  F064         	movff	f_write@wcnt,memcpy@n
  7732  000DA6  C0E3  F065         	movff	f_write@wcnt+1,memcpy@n+1
  7733  000DAA  ECA4  F02B         	call	_memcpy	;wreg free
  7734                           
  7735                           ;tff.c: 1050: fp->fs->winflag = 1;
  7736  000DAE  0100               	movlb	0	; () banked
  7737  000DB0  EE20 F004          	lfsr	2,4
  7738  000DB4  51C3               	movf	f_write@fp& (0+255),w,b
  7739  000DB6  26D9               	addwf	fsr2l,f,c
  7740  000DB8  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7741  000DBA  22DA               	addwfc	fsr2h,f,c
  7742  000DBC  EE10 F01F          	lfsr	1,31
  7743  000DC0  50DE               	movf	postinc2,w,c
  7744  000DC2  26E1               	addwf	fsr1l,f,c
  7745  000DC4  50DD               	movf	postdec2,w,c
  7746  000DC6  22E2               	addwfc	fsr1h,f,c
  7747  000DC8  0E01               	movlw	1
  7748  000DCA  6EE7               	movwf	indf1,c
  7749  000DCC                     l1217:
  7750                           
  7751                           ; BSR set to: 0
  7752                           
  7753                           ; BSR set to: 0
  7754  000DCC  51E2               	movf	f_write@wcnt& (0+255),w,b
  7755  000DCE  27D8               	addwf	f_write@wbuff& (0+255),f,b
  7756  000DD0  51E3               	movf	(f_write@wcnt+1)& (0+255),w,b
  7757  000DD2  23D9               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  7758                           
  7759                           ; BSR set to: 0
  7760  000DD4  EE20 F006          	lfsr	2,6
  7761  000DD8  51C3               	movf	f_write@fp& (0+255),w,b
  7762  000DDA  26D9               	addwf	fsr2l,f,c
  7763  000DDC  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7764  000DDE  22DA               	addwfc	fsr2h,f,c
  7765  000DE0  51E2               	movf	f_write@wcnt& (0+255),w,b
  7766  000DE2  26DE               	addwf	postinc2,f,c
  7767  000DE4  51E3               	movf	(f_write@wcnt+1)& (0+255),w,b
  7768  000DE6  22DE               	addwfc	postinc2,f,c
  7769  000DE8  0E00               	movlw	0
  7770  000DEA  22DE               	addwfc	postinc2,f,c
  7771  000DEC  22DE               	addwfc	postinc2,f,c
  7772                           
  7773                           ; BSR set to: 0
  7774  000DEE  C0C9  FFD9         	movff	f_write@bw,fsr2l
  7775  000DF2  C0CA  FFDA         	movff	f_write@bw+1,fsr2h
  7776  000DF6  51E2               	movf	f_write@wcnt& (0+255),w,b
  7777  000DF8  26DE               	addwf	postinc2,f,c
  7778  000DFA  51E3               	movf	(f_write@wcnt+1)& (0+255),w,b
  7779  000DFC  22DD               	addwfc	postdec2,f,c
  7780                           
  7781                           ; BSR set to: 0
  7782  000DFE  51E2               	movf	f_write@wcnt& (0+255),w,b
  7783  000E00  5FC7               	subwf	f_write@btw& (0+255),f,b
  7784  000E02  51E3               	movf	(f_write@wcnt+1)& (0+255),w,b
  7785  000E04  5BC8               	subwfb	(f_write@btw+1)& (0+255),f,b
  7786  000E06                     l1201:
  7787                           
  7788                           ; BSR set to: 0
  7789                           
  7790                           ; BSR set to: 0
  7791  000E06  51C7               	movf	f_write@btw& (0+255),w,b
  7792  000E08  11C8               	iorwf	(f_write@btw+1)& (0+255),w,b
  7793  000E0A  A4D8               	btfss	status,2,c
  7794  000E0C  D5C1               	goto	l1202
  7795  000E0E                     u11700:
  7796                           
  7797                           ; BSR set to: 0
  7798                           ;tff.c: 1051: }
  7799                           ;tff.c: 1053: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  7800                           
  7801                           ; BSR set to: 0
  7802  000E0E  EE20 F006          	lfsr	2,6
  7803  000E12  51C3               	movf	f_write@fp& (0+255),w,b
  7804  000E14  26D9               	addwf	fsr2l,f,c
  7805  000E16  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7806  000E18  22DA               	addwfc	fsr2h,f,c
  7807  000E1A  EE10 F00A          	lfsr	1,10
  7808  000E1E  51C3               	movf	f_write@fp& (0+255),w,b
  7809  000E20  26E1               	addwf	fsr1l,f,c
  7810  000E22  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7811  000E24  22E2               	addwfc	fsr1h,f,c
  7812  000E26  50DE               	movf	postinc2,w,c
  7813  000E28  5CE6               	subwf	postinc1,w,c
  7814  000E2A  50DE               	movf	postinc2,w,c
  7815  000E2C  58E6               	subwfb	postinc1,w,c
  7816  000E2E  50DE               	movf	postinc2,w,c
  7817  000E30  58E6               	subwfb	postinc1,w,c
  7818  000E32  50DE               	movf	postinc2,w,c
  7819  000E34  58E6               	subwfb	postinc1,w,c
  7820  000E36  B0D8               	btfsc	status,0,c
  7821  000E38  D014               	goto	l1222
  7822                           
  7823                           ; BSR set to: 0
  7824  000E3A  EE20 F006          	lfsr	2,6
  7825  000E3E  51C3               	movf	f_write@fp& (0+255),w,b
  7826  000E40  26D9               	addwf	fsr2l,f,c
  7827  000E42  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7828  000E44  22DA               	addwfc	fsr2h,f,c
  7829  000E46  EE10 F00A          	lfsr	1,10
  7830  000E4A  51C3               	movf	f_write@fp& (0+255),w,b
  7831  000E4C  26E1               	addwf	fsr1l,f,c
  7832  000E4E  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7833  000E50  22E2               	addwfc	fsr1h,f,c
  7834  000E52  CFDE FFE6          	movff	postinc2,postinc1
  7835  000E56  CFDE FFE6          	movff	postinc2,postinc1
  7836  000E5A  CFDE FFE6          	movff	postinc2,postinc1
  7837  000E5E  CFDE FFE6          	movff	postinc2,postinc1
  7838  000E62                     l1222:
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;tff.c: 1054: fp->flag |= 0x20;
  7842                           
  7843                           ; BSR set to: 0
  7844  000E62  EE20 F002          	lfsr	2,2
  7845  000E66  51C3               	movf	f_write@fp& (0+255),w,b
  7846  000E68  26D9               	addwf	fsr2l,f,c
  7847  000E6A  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7848  000E6C  22DA               	addwfc	fsr2h,f,c
  7849  000E6E  0E00               	movlw	0
  7850  000E70  8ADB               	bsf	plusw2,5,c
  7851                           
  7852                           ; BSR set to: 0
  7853                           ;tff.c: 1055: return res;
  7854                           ;	Return value of _f_write is never used
  7855  000E72  0012               	return	
  7856  000E74                     l1213:
  7857                           
  7858                           ;tff.c: 1058: fp->flag |= 0x80;
  7859                           
  7860                           ; BSR set to: 0
  7861  000E74  0100               	movlb	0	; () banked
  7862  000E76  EE20 F002          	lfsr	2,2
  7863  000E7A  51C3               	movf	f_write@fp& (0+255),w,b
  7864  000E7C  26D9               	addwf	fsr2l,f,c
  7865  000E7E  51C4               	movf	(f_write@fp+1)& (0+255),w,b
  7866  000E80  22DA               	addwfc	fsr2h,f,c
  7867  000E82  0E00               	movlw	0
  7868  000E84  8EDB               	bsf	plusw2,7,c
  7869  000E86  0012               	return	
  7870  000E88                     __end_of_f_write:
  7871                           	opt stack 0
  7872                           tosu	equ	0xFFF
  7873                           tosh	equ	0xFFE
  7874                           tosl	equ	0xFFD
  7875                           pclath	equ	0xFFA
  7876                           tblptru	equ	0xFF8
  7877                           tblptrh	equ	0xFF7
  7878                           tblptrl	equ	0xFF6
  7879                           tablat	equ	0xFF5
  7880                           prodh	equ	0xFF4
  7881                           prodl	equ	0xFF3
  7882                           intcon	equ	0xFF2
  7883                           intcon2	equ	0xFF1
  7884                           intcon3	equ	0xFF0
  7885                           postinc0	equ	0xFEE
  7886                           wreg	equ	0xFE8
  7887                           indf1	equ	0xFE7
  7888                           postinc1	equ	0xFE6
  7889                           postdec1	equ	0xFE5
  7890                           plusw1	equ	0xFE3
  7891                           fsr1h	equ	0xFE2
  7892                           fsr1l	equ	0xFE1
  7893                           indf2	equ	0xFDF
  7894                           postinc2	equ	0xFDE
  7895                           postdec2	equ	0xFDD
  7896                           plusw2	equ	0xFDB
  7897                           fsr2h	equ	0xFDA
  7898                           fsr2l	equ	0xFD9
  7899                           status	equ	0xFD8
  7900                           
  7901 ;; *************** function ___llmod *****************
  7902 ;; Defined at:
  7903 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;  dividend        4    0[BANK0 ] unsigned long 
  7906 ;;  divisor         4    4[BANK0 ] unsigned long 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;  counter         1   32[COMRAM] unsigned char 
  7909 ;; Return value:  Size  Location     Type
  7910 ;;                  4    0[BANK0 ] unsigned long 
  7911 ;; Registers used:
  7912 ;;		wreg, status,2, status,0
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7918 ;;      Params:         0       8       0       0       0       0       0       0       0
  7919 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7920 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7921 ;;      Totals:         1       8       0       0       0       0       0       0       0
  7922 ;;Total ram usage:        9 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; Hardware stack levels required when called:    3
  7925 ;; This function calls:
  7926 ;;		Nothing
  7927 ;; This function is called by:
  7928 ;;		_fprintf
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           	psect	text26
  7933  005338                     __ptext26:
  7934                           	opt stack 0
  7935  005338                     ___llmod:
  7936                           	opt stack 23
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;incstack = 0
  7940  005338  0100               	movlb	0	; () banked
  7941  00533A  5164               	movf	___llmod@divisor& (0+255),w,b
  7942  00533C  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  7943  00533E  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  7944  005340  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  7945  005342  B4D8               	btfsc	status,2,c
  7946  005344  D024               	goto	l1766
  7947                           
  7948                           ; BSR set to: 0
  7949  005346  0E01               	movlw	1
  7950  005348  6E21               	movwf	___llmod@counter,c
  7951  00534A  D006               	goto	l1761
  7952  00534C                     
  7953                           ; BSR set to: 0
  7954                           
  7955                           ; BSR set to: 0
  7956  00534C  90D8               	bcf	status,0,c
  7957  00534E  3764               	rlcf	___llmod@divisor& (0+255),f,b
  7958  005350  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  7959  005352  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  7960  005354  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  7961  005356  2A21               	incf	___llmod@counter,f,c
  7962  005358                     l1761:
  7963                           
  7964                           ; BSR set to: 0
  7965                           
  7966                           ; BSR set to: 0
  7967  005358  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  7968  00535A  D7F8               	goto	l1762
  7969  00535C                     u13050:
  7970                           
  7971                           ; BSR set to: 0
  7972                           
  7973                           ; BSR set to: 0
  7974                           
  7975                           ; BSR set to: 0
  7976  00535C  5164               	movf	___llmod@divisor& (0+255),w,b
  7977  00535E  5D60               	subwf	___llmod@dividend& (0+255),w,b
  7978  005360  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  7979  005362  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  7980  005364  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  7981  005366  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  7982  005368  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  7983  00536A  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  7984  00536C  A0D8               	btfss	status,0,c
  7985  00536E  D008               	goto	l1765
  7986                           
  7987                           ; BSR set to: 0
  7988  005370  5164               	movf	___llmod@divisor& (0+255),w,b
  7989  005372  5F60               	subwf	___llmod@dividend& (0+255),f,b
  7990  005374  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  7991  005376  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  7992  005378  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  7993  00537A  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  7994  00537C  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  7995  00537E  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  7996  005380                     l1765:
  7997                           
  7998                           ; BSR set to: 0
  7999                           
  8000                           ; BSR set to: 0
  8001  005380  90D8               	bcf	status,0,c
  8002  005382  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  8003  005384  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  8004  005386  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  8005  005388  3364               	rrcf	___llmod@divisor& (0+255),f,b
  8006                           
  8007                           ; BSR set to: 0
  8008  00538A  2E21               	decfsz	___llmod@counter,f,c
  8009  00538C  D7E7               	goto	u13050
  8010  00538E                     l1766:
  8011                           
  8012                           ; BSR set to: 0
  8013                           
  8014                           ; BSR set to: 0
  8015  00538E  C060  F060         	movff	___llmod@dividend,?___llmod
  8016  005392  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  8017  005396  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  8018  00539A  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  8019                           
  8020                           ; BSR set to: 0
  8021  00539E  0012               	return		;funcret
  8022  0053A0                     __end_of___llmod:
  8023                           	opt stack 0
  8024                           tosu	equ	0xFFF
  8025                           tosh	equ	0xFFE
  8026                           tosl	equ	0xFFD
  8027                           pclath	equ	0xFFA
  8028                           tblptru	equ	0xFF8
  8029                           tblptrh	equ	0xFF7
  8030                           tblptrl	equ	0xFF6
  8031                           tablat	equ	0xFF5
  8032                           prodh	equ	0xFF4
  8033                           prodl	equ	0xFF3
  8034                           intcon	equ	0xFF2
  8035                           intcon2	equ	0xFF1
  8036                           intcon3	equ	0xFF0
  8037                           postinc0	equ	0xFEE
  8038                           wreg	equ	0xFE8
  8039                           indf1	equ	0xFE7
  8040                           postinc1	equ	0xFE6
  8041                           postdec1	equ	0xFE5
  8042                           plusw1	equ	0xFE3
  8043                           fsr1h	equ	0xFE2
  8044                           fsr1l	equ	0xFE1
  8045                           indf2	equ	0xFDF
  8046                           postinc2	equ	0xFDE
  8047                           postdec2	equ	0xFDD
  8048                           plusw2	equ	0xFDB
  8049                           fsr2h	equ	0xFDA
  8050                           fsr2l	equ	0xFD9
  8051                           status	equ	0xFD8
  8052                           
  8053 ;; *************** function _f_open *****************
  8054 ;; Defined at:
  8055 ;;		line 825 in file "bibliotecas/tff.c"
  8056 ;; Parameters:    Size  Location     Type
  8057 ;;  fp              2  118[BANK0 ] PTR struct _FIL
  8058 ;;		 -> fil(28), 
  8059 ;;  path            2  120[BANK0 ] PTR const unsigned char 
  8060 ;;		 -> STR_10(13), filename(15), 
  8061 ;;  mode            1  122[BANK0 ] unsigned char 
  8062 ;; Auto vars:     Size  Location     Type
  8063 ;;  dw              4   14[BANK1 ] unsigned long 
  8064 ;;  rs              2   12[BANK1 ] unsigned short 
  8065 ;;  dj             14   21[BANK1 ] struct _DIR_E
  8066 ;;  fn             12    0[BANK1 ] unsigned char [12]
  8067 ;;  dir             2   19[BANK1 ] PTR unsigned char 
  8068 ;;		 -> NULL(0), fs(544), 
  8069 ;;  res             1   18[BANK1 ] enum E155
  8070 ;; Return value:  Size  Location     Type
  8071 ;;                  1    wreg      enum E3975
  8072 ;; Registers used:
  8073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8074 ;; Tracked objects:
  8075 ;;		On entry : 0/0
  8076 ;;		On exit  : 0/0
  8077 ;;		Unchanged: 0/0
  8078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8079 ;;      Params:         0       5       0       0       0       0       0       0       0
  8080 ;;      Locals:         0       0      35       0       0       0       0       0       0
  8081 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8082 ;;      Totals:         0       9      35       0       0       0       0       0       0
  8083 ;;Total ram usage:       44 bytes
  8084 ;; Hardware stack levels used:    1
  8085 ;; Hardware stack levels required when called:   12
  8086 ;; This function calls:
  8087 ;;		_auto_mount
  8088 ;;		_get_fattime
  8089 ;;		_memcpy
  8090 ;;		_memset
  8091 ;;		_move_window
  8092 ;;		_remove_chain
  8093 ;;		_reserve_direntry
  8094 ;;		_trace_path
  8095 ;; This function is called by:
  8096 ;;		_escrita_sdcard
  8097 ;;		_leitura_sdcard
  8098 ;;		_sdcard_init
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           	psect	text27
  8103  0024D2                     __ptext27:
  8104                           	opt stack 0
  8105  0024D2                     _f_open:
  8106                           	opt stack 15
  8107                           
  8108                           ;tff.c: 831: FRESULT res;
  8109                           ;tff.c: 832: DIR_E dj;
  8110                           ;tff.c: 833: BYTE *dir;
  8111                           ;tff.c: 834: char fn[8+3+1];
  8112                           ;tff.c: 837: fp->fs = (0);
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;incstack = 0
  8116  0024D2  0100               	movlb	0	; () banked
  8117  0024D4  EE20 F004          	lfsr	2,4
  8118  0024D8  51D6               	movf	f_open@fp& (0+255),w,b
  8119  0024DA  26D9               	addwf	fsr2l,f,c
  8120  0024DC  51D7               	movf	(f_open@fp+1)& (0+255),w,b
  8121  0024DE  22DA               	addwfc	fsr2h,f,c
  8122  0024E0  0E00               	movlw	0
  8123  0024E2  6EDE               	movwf	postinc2,c
  8124  0024E4  0E00               	movlw	0
  8125  0024E6  6EDD               	movwf	postdec2,c
  8126                           
  8127                           ; BSR set to: 0
  8128                           ;tff.c: 839: mode &= (0x01|0x02|0x08|0x10|0x04);
  8129  0024E8  0E1F               	movlw	31
  8130  0024EA  17DA               	andwf	f_open@mode& (0+255),f,b
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;tff.c: 840: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
  8134  0024EC  0ED8               	movlw	low f_open@path
  8135  0024EE  6F92               	movwf	auto_mount@path& (0+255),b
  8136  0024F0  0E00               	movlw	high f_open@path
  8137  0024F2  6F93               	movwf	(auto_mount@path+1)& (0+255),b
  8138  0024F4  51DA               	movf	f_open@mode& (0+255),w,b
  8139  0024F6  0B1E               	andlw	30
  8140  0024F8  6F94               	movwf	auto_mount@chk_wp& (0+255),b
  8141  0024FA  EC44  F007         	call	_auto_mount	;wreg free
  8142  0024FE  0101               	movlb	1	; () banked
  8143  002500  6F60               	movwf	f_open@res& (0+255),b
  8144                           
  8145                           ; BSR set to: 1
  8146                           ;tff.c: 845: if (res != FR_OK) return res;
  8147  002502  5160               	movf	f_open@res& (0+255),w,b
  8148  002504  B4D8               	btfsc	status,2,c
  8149  002506  D002               	goto	l1146
  8150                           
  8151                           ; BSR set to: 1
  8152  002508  5160               	movf	f_open@res& (0+255),w,b
  8153                           
  8154                           ; BSR set to: 1
  8155  00250A  0012               	return	
  8156  00250C                     l1146:
  8157                           
  8158                           ; BSR set to: 1
  8159                           ;tff.c: 846: res = trace_path(&dj, fn, path, &dir);
  8160                           
  8161                           ; BSR set to: 1
  8162  00250C  0E63               	movlw	low f_open@dj
  8163  00250E  0100               	movlb	0	; () banked
  8164  002510  6FBF               	movwf	trace_path@dj& (0+255),b
  8165  002512  0E01               	movlw	high f_open@dj
  8166  002514  6FC0               	movwf	(trace_path@dj+1)& (0+255),b
  8167  002516  0E4E               	movlw	low f_open@fn
  8168  002518  6FC1               	movwf	trace_path@fn& (0+255),b
  8169  00251A  0E01               	movlw	high f_open@fn
  8170  00251C  6FC2               	movwf	(trace_path@fn+1)& (0+255),b
  8171  00251E  C0D8  F0C3         	movff	f_open@path,trace_path@path
  8172  002522  C0D9  F0C4         	movff	f_open@path+1,trace_path@path+1
  8173  002526  0E61               	movlw	low f_open@dir
  8174  002528  6FC5               	movwf	trace_path@dir& (0+255),b
  8175  00252A  0E01               	movlw	high f_open@dir
  8176  00252C  6FC6               	movwf	(trace_path@dir+1)& (0+255),b
  8177  00252E  ECD7  F015         	call	_trace_path	;wreg free
  8178  002532  0101               	movlb	1	; () banked
  8179  002534  6F60               	movwf	f_open@res& (0+255),b
  8180                           
  8181                           ; BSR set to: 1
  8182                           ;tff.c: 850: if (mode & (0x08|0x10|0x04)) {
  8183  002536  C0DA  F0DB         	movff	f_open@mode,??_f_open
  8184  00253A  0E1C               	movlw	28
  8185  00253C  0100               	movlb	0	; () banked
  8186  00253E  17DB               	andwf	??_f_open& (0+255),f,b
  8187  002540  B4D8               	btfsc	status,2,c
  8188  002542  D0F6               	goto	l1148
  8189                           
  8190                           ; BSR set to: 0
  8191                           ;tff.c: 851: CLUST rs;
  8192                           ;tff.c: 852: DWORD dw;
  8193                           ;tff.c: 853: if (res != FR_OK) {
  8194  002544  0101               	movlb	1	; () banked
  8195  002546  5160               	movf	f_open@res& (0+255),w,b
  8196  002548  B4D8               	btfsc	status,2,c
  8197  00254A  D042               	goto	l1149
  8198                           
  8199                           ; BSR set to: 1
  8200                           ;tff.c: 854: if (res != FR_NO_FILE) return res;
  8201  00254C  0E02               	movlw	2
  8202  00254E  1960               	xorwf	f_open@res& (0+255),w,b
  8203  002550  B4D8               	btfsc	status,2,c
  8204  002552  D002               	goto	l1150
  8205                           
  8206                           ; BSR set to: 1
  8207  002554  5160               	movf	f_open@res& (0+255),w,b
  8208                           
  8209                           ; BSR set to: 1
  8210  002556  0012               	return	
  8211  002558                     l1150:
  8212                           
  8213                           ; BSR set to: 1
  8214                           ;tff.c: 855: res = reserve_direntry(&dj, &dir);
  8215                           
  8216                           ; BSR set to: 1
  8217  002558  0E63               	movlw	low f_open@dj
  8218  00255A  0100               	movlb	0	; () banked
  8219  00255C  6FC3               	movwf	reserve_direntry@dj& (0+255),b
  8220  00255E  0E01               	movlw	high f_open@dj
  8221  002560  6FC4               	movwf	(reserve_direntry@dj+1)& (0+255),b
  8222  002562  0E61               	movlw	low f_open@dir
  8223  002564  6FC5               	movwf	reserve_direntry@dir& (0+255),b
  8224  002566  0E01               	movlw	high f_open@dir
  8225  002568  6FC6               	movwf	(reserve_direntry@dir+1)& (0+255),b
  8226  00256A  EC2D  F017         	call	_reserve_direntry	;wreg free
  8227  00256E  0101               	movlb	1	; () banked
  8228  002570  6F60               	movwf	f_open@res& (0+255),b
  8229                           
  8230                           ; BSR set to: 1
  8231                           ;tff.c: 856: if (res != FR_OK) return res;
  8232  002572  5160               	movf	f_open@res& (0+255),w,b
  8233  002574  B4D8               	btfsc	status,2,c
  8234  002576  D002               	goto	l1151
  8235                           
  8236                           ; BSR set to: 1
  8237  002578  5160               	movf	f_open@res& (0+255),w,b
  8238                           
  8239                           ; BSR set to: 1
  8240  00257A  0012               	return	
  8241  00257C                     l1151:
  8242                           
  8243                           ; BSR set to: 1
  8244                           ;tff.c: 857: memset(dir, 0, 32);
  8245                           
  8246                           ; BSR set to: 1
  8247  00257C  C161  F060         	movff	f_open@dir,memset@p1
  8248  002580  C162  F061         	movff	f_open@dir+1,memset@p1+1
  8249  002584  0E00               	movlw	0
  8250  002586  0100               	movlb	0	; () banked
  8251  002588  6F63               	movwf	(memset@c+1)& (0+255),b
  8252  00258A  0E00               	movlw	0
  8253  00258C  6F62               	movwf	memset@c& (0+255),b
  8254  00258E  0E00               	movlw	0
  8255  002590  6F65               	movwf	(memset@n+1)& (0+255),b
  8256  002592  0E20               	movlw	32
  8257  002594  6F64               	movwf	memset@n& (0+255),b
  8258  002596  EC27  F02D         	call	_memset	;wreg free
  8259                           
  8260                           ;tff.c: 858: memcpy(&dir[0], fn, 8+3);
  8261  00259A  C161  F060         	movff	f_open@dir,memcpy@d1
  8262  00259E  C162  F061         	movff	f_open@dir+1,memcpy@d1+1
  8263  0025A2  0E4E               	movlw	low f_open@fn
  8264  0025A4  0100               	movlb	0	; () banked
  8265  0025A6  6F62               	movwf	memcpy@s1& (0+255),b
  8266  0025A8  0E01               	movlw	high f_open@fn
  8267  0025AA  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  8268  0025AC  0E00               	movlw	0
  8269  0025AE  6F65               	movwf	(memcpy@n+1)& (0+255),b
  8270  0025B0  0E0B               	movlw	11
  8271  0025B2  6F64               	movwf	memcpy@n& (0+255),b
  8272  0025B4  ECA4  F02B         	call	_memcpy	;wreg free
  8273                           
  8274                           ;tff.c: 859: dir[12] = fn[11];
  8275  0025B8  0101               	movlb	1	; () banked
  8276  0025BA  EE20 F00C          	lfsr	2,12
  8277  0025BE  5161               	movf	f_open@dir& (0+255),w,b
  8278  0025C0  26D9               	addwf	fsr2l,f,c
  8279  0025C2  5162               	movf	(f_open@dir+1)& (0+255),w,b
  8280  0025C4  22DA               	addwfc	fsr2h,f,c
  8281  0025C6  C159  FFDF         	movff	f_open@fn+11,indf2
  8282                           
  8283                           ; BSR set to: 1
  8284                           ;tff.c: 860: mode |= 0x08;
  8285  0025CA  0100               	movlb	0	; () banked
  8286  0025CC  87DA               	bsf	f_open@mode& (0+255),3,b
  8287                           
  8288                           ;tff.c: 861: }
  8289  0025CE  D080               	goto	l1157
  8290  0025D0                     l1149:
  8291                           
  8292                           ; BSR set to: 1
  8293                           ;tff.c: 862: else {
  8294                           ;tff.c: 863: if (mode & 0x04)
  8295  0025D0  0100               	movlb	0	; () banked
  8296  0025D2  A5DA               	btfss	f_open@mode& (0+255),2,b
  8297  0025D4  D002               	goto	l1153
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;tff.c: 864: return FR_EXIST;
  8301  0025D6  0E07               	movlw	7
  8302                           
  8303                           ; BSR set to: 0
  8304  0025D8  0012               	return	
  8305  0025DA                     l1153:
  8306                           
  8307                           ; BSR set to: 0
  8308                           ;tff.c: 865: if (!dir || (dir[11] & (0x01|0x10)))
  8309                           
  8310                           ; BSR set to: 0
  8311  0025DA  0101               	movlb	1	; () banked
  8312  0025DC  5161               	movf	f_open@dir& (0+255),w,b
  8313  0025DE  1162               	iorwf	(f_open@dir+1)& (0+255),w,b
  8314  0025E0  B4D8               	btfsc	status,2,c
  8315  0025E2  D00D               	goto	u13170
  8316                           
  8317                           ; BSR set to: 1
  8318  0025E4  EE20 F00B          	lfsr	2,11
  8319  0025E8  5161               	movf	f_open@dir& (0+255),w,b
  8320  0025EA  26D9               	addwf	fsr2l,f,c
  8321  0025EC  5162               	movf	(f_open@dir+1)& (0+255),w,b
  8322  0025EE  22DA               	addwfc	fsr2h,f,c
  8323  0025F0  50DF               	movf	indf2,w,c
  8324  0025F2  0100               	movlb	0	; () banked
  8325  0025F4  6FDB               	movwf	??_f_open& (0+255),b
  8326  0025F6  0E11               	movlw	17
  8327  0025F8  17DB               	andwf	??_f_open& (0+255),f,b
  8328  0025FA  B4D8               	btfsc	status,2,c
  8329  0025FC  D002               	goto	l1154
  8330  0025FE                     u13170:
  8331                           
  8332                           ;tff.c: 866: return FR_DENIED;
  8333                           
  8334                           ; BSR set to: 0
  8335  0025FE  0E06               	movlw	6
  8336  002600  0012               	return	
  8337  002602                     l1154:
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;tff.c: 867: if (mode & 0x08) {
  8341  002602  A7DA               	btfss	f_open@mode& (0+255),3,b
  8342  002604  D065               	goto	l1157
  8343                           
  8344                           ; BSR set to: 0
  8345                           ;tff.c: 872: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  8346  002606  0101               	movlb	1	; () banked
  8347  002608  EE20 F01A          	lfsr	2,26
  8348  00260C  5161               	movf	f_open@dir& (0+255),w,b
  8349  00260E  26D9               	addwf	fsr2l,f,c
  8350  002610  5162               	movf	(f_open@dir+1)& (0+255),w,b
  8351  002612  22DA               	addwfc	fsr2h,f,c
  8352  002614  CFDE F15A          	movff	postinc2,f_open@rs
  8353  002618  CFDD F15B          	movff	postdec2,f_open@rs+1
  8354                           
  8355                           ;tff.c: 874: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
  8356  00261C  EE20 F01A          	lfsr	2,26
  8357  002620  5161               	movf	f_open@dir& (0+255),w,b
  8358  002622  26D9               	addwf	fsr2l,f,c
  8359  002624  5162               	movf	(f_open@dir+1)& (0+255),w,b
  8360  002626  22DA               	addwfc	fsr2h,f,c
  8361  002628  0E00               	movlw	0
  8362  00262A  6EDE               	movwf	postinc2,c
  8363  00262C  0E00               	movlw	0
  8364  00262E  6EDD               	movwf	postdec2,c
  8365                           
  8366                           ;tff.c: 875: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
  8367  002630  EE20 F01C          	lfsr	2,28
  8368  002634  5161               	movf	f_open@dir& (0+255),w,b
  8369  002636  26D9               	addwf	fsr2l,f,c
  8370  002638  5162               	movf	(f_open@dir+1)& (0+255),w,b
  8371  00263A  22DA               	addwfc	fsr2h,f,c
  8372  00263C  6ADE               	clrf	postinc2,c
  8373  00263E  6ADE               	clrf	postinc2,c
  8374  002640  6ADE               	clrf	postinc2,c
  8375  002642  6ADD               	clrf	postdec2,c
  8376                           
  8377                           ;tff.c: 876: dj.fs->winflag = 1;
  8378  002644  EE20 F01F          	lfsr	2,31
  8379  002648  5167               	movf	(f_open@dj+4)& (0+255),w,b
  8380  00264A  26D9               	addwf	fsr2l,f,c
  8381  00264C  5168               	movf	(f_open@dj+5)& (0+255),w,b
  8382  00264E  22DA               	addwfc	fsr2h,f,c
  8383  002650  0E01               	movlw	1
  8384  002652  6EDF               	movwf	indf2,c
  8385                           
  8386                           ;tff.c: 877: dw = dj.fs->winsect;
  8387  002654  EE20 F004          	lfsr	2,4
  8388  002658  5167               	movf	(f_open@dj+4)& (0+255),w,b
  8389  00265A  26D9               	addwf	fsr2l,f,c
  8390  00265C  5168               	movf	(f_open@dj+5)& (0+255),w,b
  8391  00265E  22DA               	addwfc	fsr2h,f,c
  8392  002660  CFDE F15C          	movff	postinc2,f_open@dw
  8393  002664  CFDE F15D          	movff	postinc2,f_open@dw+1
  8394  002668  CFDE F15E          	movff	postinc2,f_open@dw+2
  8395  00266C  CFDE F15F          	movff	postinc2,f_open@dw+3
  8396                           
  8397                           ; BSR set to: 1
  8398                           ;tff.c: 878: if (!remove_chain(rs) || !move_window(dw))
  8399  002670  C15A  F0B5         	movff	f_open@rs,remove_chain@clust
  8400  002674  C15B  F0B6         	movff	f_open@rs+1,remove_chain@clust+1
  8401  002678  EC2B  F025         	call	_remove_chain	;wreg free
  8402  00267C  0900               	iorlw	0
  8403  00267E  B4D8               	btfsc	status,2,c
  8404  002680  D00D               	goto	u13200
  8405  002682  C15C  F08A         	movff	f_open@dw,move_window@sector
  8406  002686  C15D  F08B         	movff	f_open@dw+1,move_window@sector+1
  8407  00268A  C15E  F08C         	movff	f_open@dw+2,move_window@sector+2
  8408  00268E  C15F  F08D         	movff	f_open@dw+3,move_window@sector+3
  8409  002692  ECD9  F01D         	call	_move_window	;wreg free
  8410  002696  0900               	iorlw	0
  8411  002698  A4D8               	btfss	status,2,c
  8412  00269A  D002               	goto	l1158
  8413  00269C                     u13200:
  8414                           
  8415                           ;tff.c: 879: return FR_RW_ERROR;
  8416  00269C  0E08               	movlw	8
  8417  00269E  0012               	return	
  8418  0026A0                     l1158:
  8419                           
  8420                           ;tff.c: 880: dj.fs->last_clust = rs - 1;
  8421  0026A0  0EFF               	movlw	255
  8422  0026A2  0100               	movlb	0	; () banked
  8423  0026A4  6FDB               	movwf	??_f_open& (0+255),b
  8424  0026A6  0EFF               	movlw	255
  8425  0026A8  6FDC               	movwf	(??_f_open+1)& (0+255),b
  8426  0026AA  C15A  F0DD         	movff	f_open@rs,??_f_open+2
  8427  0026AE  C15B  F0DE         	movff	f_open@rs+1,??_f_open+3
  8428  0026B2  51DB               	movf	??_f_open& (0+255),w,b
  8429  0026B4  27DD               	addwf	(??_f_open+2)& (0+255),f,b
  8430  0026B6  51DC               	movf	(??_f_open+1)& (0+255),w,b
  8431  0026B8  23DE               	addwfc	(??_f_open+3)& (0+255),f,b
  8432  0026BA  0101               	movlb	1	; () banked
  8433  0026BC  EE20 F018          	lfsr	2,24
  8434  0026C0  5167               	movf	(f_open@dj+4)& (0+255),w,b
  8435  0026C2  26D9               	addwf	fsr2l,f,c
  8436  0026C4  5168               	movf	(f_open@dj+5)& (0+255),w,b
  8437  0026C6  22DA               	addwfc	fsr2h,f,c
  8438  0026C8  C0DD  FFDE         	movff	??_f_open+2,postinc2
  8439  0026CC  C0DE  FFDD         	movff	??_f_open+3,postdec2
  8440  0026D0                     l1157:
  8441                           
  8442                           ;tff.c: 881: }
  8443                           ;tff.c: 882: }
  8444                           ;tff.c: 883: if (mode & 0x08) {
  8445                           
  8446                           ; BSR set to: 1
  8447                           
  8448                           ; BSR set to: 1
  8449  0026D0  0100               	movlb	0	; () banked
  8450  0026D2  A7DA               	btfss	f_open@mode& (0+255),3,b
  8451  0026D4  D04F               	goto	l1167
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;tff.c: 884: dir[11] = 0;
  8455  0026D6  0101               	movlb	1	; () banked
  8456  0026D8  EE20 F00B          	lfsr	2,11
  8457  0026DC  5161               	movf	f_open@dir& (0+255),w,b
  8458  0026DE  26D9               	addwf	fsr2l,f,c
  8459  0026E0  5162               	movf	(f_open@dir+1)& (0+255),w,b
  8460  0026E2  22DA               	addwfc	fsr2h,f,c
  8461  0026E4  0E00               	movlw	0
  8462  0026E6  6EDF               	movwf	indf2,c
  8463                           
  8464                           ; BSR set to: 1
  8465                           ;tff.c: 885: dw = get_fattime();
  8466  0026E8  EC38  F023         	call	_get_fattime	;wreg free
  8467  0026EC  C060  F15C         	movff	?_get_fattime,f_open@dw
  8468  0026F0  C061  F15D         	movff	?_get_fattime+1,f_open@dw+1
  8469  0026F4  C062  F15E         	movff	?_get_fattime+2,f_open@dw+2
  8470  0026F8  C063  F15F         	movff	?_get_fattime+3,f_open@dw+3
  8471                           
  8472                           ;tff.c: 886: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
  8473  0026FC  0101               	movlb	1	; () banked
  8474  0026FE  EE20 F00E          	lfsr	2,14
  8475  002702  5161               	movf	f_open@dir& (0+255),w,b
  8476  002704  26D9               	addwf	fsr2l,f,c
  8477  002706  5162               	movf	(f_open@dir+1)& (0+255),w,b
  8478  002708  22DA               	addwfc	fsr2h,f,c
  8479  00270A  C15C  FFDE         	movff	f_open@dw,postinc2
  8480  00270E  C15D  FFDE         	movff	f_open@dw+1,postinc2
  8481  002712  C15E  FFDE         	movff	f_open@dw+2,postinc2
  8482  002716  C15F  FFDE         	movff	f_open@dw+3,postinc2
  8483                           
  8484                           ; BSR set to: 1
  8485                           ;tff.c: 887: dj.fs->winflag = 1;
  8486  00271A  EE20 F01F          	lfsr	2,31
  8487  00271E  5167               	movf	(f_open@dj+4)& (0+255),w,b
  8488  002720  26D9               	addwf	fsr2l,f,c
  8489  002722  5168               	movf	(f_open@dj+5)& (0+255),w,b
  8490  002724  22DA               	addwfc	fsr2h,f,c
  8491  002726  0E01               	movlw	1
  8492  002728  6EDF               	movwf	indf2,c
  8493                           
  8494                           ; BSR set to: 1
  8495                           ;tff.c: 888: mode |= 0x20;
  8496  00272A  0100               	movlb	0	; () banked
  8497  00272C  8BDA               	bsf	f_open@mode& (0+255),5,b
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;tff.c: 889: }
  8501                           ;tff.c: 890: }
  8502  00272E  D022               	goto	l1167
  8503  002730                     l1148:
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;tff.c: 892: else {
  8507                           ;tff.c: 894: if (res != FR_OK) return res;
  8508                           
  8509                           ; BSR set to: 0
  8510  002730  0101               	movlb	1	; () banked
  8511  002732  5160               	movf	f_open@res& (0+255),w,b
  8512  002734  B4D8               	btfsc	status,2,c
  8513  002736  D002               	goto	l1163
  8514                           
  8515                           ; BSR set to: 1
  8516  002738  5160               	movf	f_open@res& (0+255),w,b
  8517                           
  8518                           ; BSR set to: 1
  8519  00273A  0012               	return	
  8520  00273C                     l1163:
  8521                           
  8522                           ; BSR set to: 1
  8523                           ;tff.c: 895: if (!dir || (dir[11] & 0x10))
  8524                           
  8525                           ; BSR set to: 1
  8526  00273C  5161               	movf	f_open@dir& (0+255),w,b
  8527  00273E  1162               	iorwf	(f_open@dir+1)& (0+255),w,b
  8528  002740  B4D8               	btfsc	status,2,c
  8529  002742  D008               	goto	u13240
  8530                           
  8531                           ; BSR set to: 1
  8532  002744  EE20 F00B          	lfsr	2,11
  8533  002748  5161               	movf	f_open@dir& (0+255),w,b
  8534  00274A  26D9               	addwf	fsr2l,f,c
  8535  00274C  5162               	movf	(f_open@dir+1)& (0+255),w,b
  8536  00274E  22DA               	addwfc	fsr2h,f,c
  8537  002750  A8DF               	btfss	indf2,4,c
  8538  002752  D002               	goto	l1164
  8539  002754                     u13240:
  8540                           
  8541                           ; BSR set to: 1
  8542                           ;tff.c: 896: return FR_NO_FILE;
  8543                           
  8544                           ; BSR set to: 1
  8545  002754  0E02               	movlw	2
  8546                           
  8547                           ; BSR set to: 1
  8548  002756  0012               	return	
  8549  002758                     l1164:
  8550                           
  8551                           ; BSR set to: 1
  8552                           ;tff.c: 898: if ((mode & 0x02) && (dir[11] & 0x01))
  8553  002758  0100               	movlb	0	; () banked
  8554  00275A  A3DA               	btfss	f_open@mode& (0+255),1,b
  8555  00275C  D00B               	goto	l1167
  8556                           
  8557                           ; BSR set to: 0
  8558  00275E  0101               	movlb	1	; () banked
  8559  002760  EE20 F00B          	lfsr	2,11
  8560  002764  5161               	movf	f_open@dir& (0+255),w,b
  8561  002766  26D9               	addwf	fsr2l,f,c
  8562  002768  5162               	movf	(f_open@dir+1)& (0+255),w,b
  8563  00276A  22DA               	addwfc	fsr2h,f,c
  8564  00276C  A0DF               	btfss	indf2,0,c
  8565  00276E  D002               	goto	l1167
  8566                           
  8567                           ; BSR set to: 1
  8568                           ;tff.c: 899: return FR_DENIED;
  8569  002770  0E06               	movlw	6
  8570                           
  8571                           ; BSR set to: 1
  8572  002772  0012               	return	
  8573  002774                     l1167:
  8574                           
  8575                           ;tff.c: 900: }
  8576                           ;tff.c: 901: fp->dir_sect = dj.fs->winsect;
  8577                           
  8578                           ; BSR set to: 1
  8579                           
  8580                           ; BSR set to: 1
  8581  002774  0101               	movlb	1	; () banked
  8582  002776  EE20 F004          	lfsr	2,4
  8583  00277A  5167               	movf	(f_open@dj+4)& (0+255),w,b
  8584  00277C  26D9               	addwf	fsr2l,f,c
  8585  00277E  5168               	movf	(f_open@dj+5)& (0+255),w,b
  8586  002780  22DA               	addwfc	fsr2h,f,c
  8587  002782  0100               	movlb	0	; () banked
  8588  002784  EE10 F016          	lfsr	1,22
  8589  002788  51D6               	movf	f_open@fp& (0+255),w,b
  8590  00278A  26E1               	addwf	fsr1l,f,c
  8591  00278C  51D7               	movf	(f_open@fp+1)& (0+255),w,b
  8592  00278E  22E2               	addwfc	fsr1h,f,c
  8593  002790  CFDE FFE6          	movff	postinc2,postinc1
  8594  002794  CFDE FFE6          	movff	postinc2,postinc1
  8595  002798  CFDE FFE6          	movff	postinc2,postinc1
  8596  00279C  CFDE FFE6          	movff	postinc2,postinc1
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;tff.c: 902: fp->dir_ptr = dir;
  8600  0027A0  EE20 F01A          	lfsr	2,26
  8601  0027A4  51D6               	movf	f_open@fp& (0+255),w,b
  8602  0027A6  26D9               	addwf	fsr2l,f,c
  8603  0027A8  51D7               	movf	(f_open@fp+1)& (0+255),w,b
  8604  0027AA  22DA               	addwfc	fsr2h,f,c
  8605  0027AC  C161  FFDE         	movff	f_open@dir,postinc2
  8606  0027B0  C162  FFDD         	movff	f_open@dir+1,postdec2
  8607                           
  8608                           ; BSR set to: 0
  8609                           ;tff.c: 904: fp->flag = mode;
  8610  0027B4  EE20 F002          	lfsr	2,2
  8611  0027B8  51D6               	movf	f_open@fp& (0+255),w,b
  8612  0027BA  26D9               	addwf	fsr2l,f,c
  8613  0027BC  51D7               	movf	(f_open@fp+1)& (0+255),w,b
  8614  0027BE  22DA               	addwfc	fsr2h,f,c
  8615  0027C0  C0DA  FFDF         	movff	f_open@mode,indf2
  8616                           
  8617                           ;tff.c: 905: fp->org_clust =
  8618                           ;tff.c: 909: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  8619  0027C4  0101               	movlb	1	; () banked
  8620  0027C6  EE20 F01A          	lfsr	2,26
  8621  0027CA  5161               	movf	f_open@dir& (0+255),w,b
  8622  0027CC  26D9               	addwf	fsr2l,f,c
  8623  0027CE  5162               	movf	(f_open@dir+1)& (0+255),w,b
  8624  0027D0  22DA               	addwfc	fsr2h,f,c
  8625  0027D2  0100               	movlb	0	; () banked
  8626  0027D4  EE10 F00E          	lfsr	1,14
  8627  0027D8  51D6               	movf	f_open@fp& (0+255),w,b
  8628  0027DA  26E1               	addwf	fsr1l,f,c
  8629  0027DC  51D7               	movf	(f_open@fp+1)& (0+255),w,b
  8630  0027DE  22E2               	addwfc	fsr1h,f,c
  8631  0027E0  CFDE FFE6          	movff	postinc2,postinc1
  8632  0027E4  CFDD FFE5          	movff	postdec2,postdec1
  8633                           
  8634                           ;tff.c: 910: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
  8635  0027E8  0101               	movlb	1	; () banked
  8636  0027EA  EE20 F01C          	lfsr	2,28
  8637  0027EE  5161               	movf	f_open@dir& (0+255),w,b
  8638  0027F0  26D9               	addwf	fsr2l,f,c
  8639  0027F2  5162               	movf	(f_open@dir+1)& (0+255),w,b
  8640  0027F4  22DA               	addwfc	fsr2h,f,c
  8641  0027F6  0100               	movlb	0	; () banked
  8642  0027F8  EE10 F00A          	lfsr	1,10
  8643  0027FC  51D6               	movf	f_open@fp& (0+255),w,b
  8644  0027FE  26E1               	addwf	fsr1l,f,c
  8645  002800  51D7               	movf	(f_open@fp+1)& (0+255),w,b
  8646  002802  22E2               	addwfc	fsr1h,f,c
  8647  002804  CFDE FFE6          	movff	postinc2,postinc1
  8648  002808  CFDE FFE6          	movff	postinc2,postinc1
  8649  00280C  CFDE FFE6          	movff	postinc2,postinc1
  8650  002810  CFDE FFE6          	movff	postinc2,postinc1
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;tff.c: 911: fp->fptr = 0; fp->csect = 255;
  8654  002814  EE20 F006          	lfsr	2,6
  8655  002818  51D6               	movf	f_open@fp& (0+255),w,b
  8656  00281A  26D9               	addwf	fsr2l,f,c
  8657  00281C  51D7               	movf	(f_open@fp+1)& (0+255),w,b
  8658  00281E  22DA               	addwfc	fsr2h,f,c
  8659  002820  6ADE               	clrf	postinc2,c
  8660  002822  6ADE               	clrf	postinc2,c
  8661  002824  6ADE               	clrf	postinc2,c
  8662  002826  6ADD               	clrf	postdec2,c
  8663                           
  8664                           ; BSR set to: 0
  8665  002828  EE20 F003          	lfsr	2,3
  8666  00282C  51D6               	movf	f_open@fp& (0+255),w,b
  8667  00282E  26D9               	addwf	fsr2l,f,c
  8668  002830  51D7               	movf	(f_open@fp+1)& (0+255),w,b
  8669  002832  22DA               	addwfc	fsr2h,f,c
  8670  002834  0EFF               	movlw	255
  8671  002836  6EDF               	movwf	indf2,c
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;tff.c: 912: fp->fs = dj.fs; fp->id = dj.fs->id;
  8675  002838  EE20 F004          	lfsr	2,4
  8676  00283C  51D6               	movf	f_open@fp& (0+255),w,b
  8677  00283E  26D9               	addwf	fsr2l,f,c
  8678  002840  51D7               	movf	(f_open@fp+1)& (0+255),w,b
  8679  002842  22DA               	addwfc	fsr2h,f,c
  8680  002844  C167  FFDE         	movff	f_open@dj+4,postinc2
  8681  002848  C168  FFDD         	movff	f_open@dj+5,postdec2
  8682                           
  8683                           ; BSR set to: 0
  8684  00284C  C167  FFD9         	movff	f_open@dj+4,fsr2l
  8685  002850  C168  FFDA         	movff	f_open@dj+5,fsr2h
  8686  002854  C0D6  FFE1         	movff	f_open@fp,fsr1l
  8687  002858  C0D7  FFE2         	movff	f_open@fp+1,fsr1h
  8688  00285C  CFDE FFE6          	movff	postinc2,postinc1
  8689  002860  CFDD FFE5          	movff	postdec2,postdec1
  8690                           
  8691                           ; BSR set to: 0
  8692                           ;tff.c: 914: return FR_OK;
  8693  002864  0E00               	movlw	0
  8694  002866  0012               	return	
  8695  002868                     __end_of_f_open:
  8696                           	opt stack 0
  8697                           tosu	equ	0xFFF
  8698                           tosh	equ	0xFFE
  8699                           tosl	equ	0xFFD
  8700                           pclath	equ	0xFFA
  8701                           tblptru	equ	0xFF8
  8702                           tblptrh	equ	0xFF7
  8703                           tblptrl	equ	0xFF6
  8704                           tablat	equ	0xFF5
  8705                           prodh	equ	0xFF4
  8706                           prodl	equ	0xFF3
  8707                           intcon	equ	0xFF2
  8708                           intcon2	equ	0xFF1
  8709                           intcon3	equ	0xFF0
  8710                           postinc0	equ	0xFEE
  8711                           wreg	equ	0xFE8
  8712                           indf1	equ	0xFE7
  8713                           postinc1	equ	0xFE6
  8714                           postdec1	equ	0xFE5
  8715                           plusw1	equ	0xFE3
  8716                           fsr1h	equ	0xFE2
  8717                           fsr1l	equ	0xFE1
  8718                           indf2	equ	0xFDF
  8719                           postinc2	equ	0xFDE
  8720                           postdec2	equ	0xFDD
  8721                           plusw2	equ	0xFDB
  8722                           fsr2h	equ	0xFDA
  8723                           fsr2l	equ	0xFD9
  8724                           status	equ	0xFD8
  8725                           
  8726 ;; *************** function _trace_path *****************
  8727 ;; Defined at:
  8728 ;;		line 501 in file "bibliotecas/tff.c"
  8729 ;; Parameters:    Size  Location     Type
  8730 ;;  dj              2   95[BANK0 ] PTR struct _DIR_E
  8731 ;;		 -> f_open@dj(14), 
  8732 ;;  fn              2   97[BANK0 ] PTR unsigned char 
  8733 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  8734 ;;  path            2   99[BANK0 ] PTR const unsigned char 
  8735 ;;		 -> STR_10(13), filename(15), 
  8736 ;;  dir             2  101[BANK0 ] PTR PTR unsigned char 
  8737 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;  dptr            2  116[BANK0 ] PTR unsigned char 
  8740 ;;		 -> fs.win(512), NULL(0), fs(544), 
  8741 ;;  clust           2  113[BANK0 ] unsigned short 
  8742 ;;  fs              2  111[BANK0 ] PTR struct _FATFS
  8743 ;;		 -> NULL(0), fs(544), 
  8744 ;;  ds              1  115[BANK0 ] unsigned char 
  8745 ;; Return value:  Size  Location     Type
  8746 ;;                  1    wreg      enum E155
  8747 ;; Registers used:
  8748 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8749 ;; Tracked objects:
  8750 ;;		On entry : 0/0
  8751 ;;		On exit  : 0/0
  8752 ;;		Unchanged: 0/0
  8753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8754 ;;      Params:         0       8       0       0       0       0       0       0       0
  8755 ;;      Locals:         0      11       0       0       0       0       0       0       0
  8756 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8757 ;;      Totals:         0      23       0       0       0       0       0       0       0
  8758 ;;Total ram usage:       23 bytes
  8759 ;; Hardware stack levels used:    1
  8760 ;; Hardware stack levels required when called:   11
  8761 ;; This function calls:
  8762 ;;		_clust2sect
  8763 ;;		_make_dirfile
  8764 ;;		_memcmp
  8765 ;;		_move_window
  8766 ;;		_next_dir_entry
  8767 ;; This function is called by:
  8768 ;;		_f_open
  8769 ;;		_f_opendir
  8770 ;; This function uses a non-reentrant model
  8771 ;;
  8772                           
  8773                           	psect	text28
  8774  002BAE                     __ptext28:
  8775                           	opt stack 0
  8776  002BAE                     _trace_path:
  8777                           	opt stack 15
  8778                           
  8779                           ;tff.c: 508: CLUST clust;
  8780                           ;tff.c: 509: char ds;
  8781                           ;tff.c: 510: BYTE *dptr = (0);
  8782                           
  8783                           ;incstack = 0
  8784  002BAE  0E00               	movlw	0
  8785  002BB0  0100               	movlb	0	; () banked
  8786  002BB2  6FD4               	movwf	trace_path@dptr& (0+255),b
  8787  002BB4  0E00               	movlw	0
  8788  002BB6  6FD5               	movwf	(trace_path@dptr+1)& (0+255),b
  8789                           
  8790                           ;tff.c: 511: FATFS *fs = FatFs;
  8791  002BB8  C0FC  F0CF         	movff	_FatFs,trace_path@fs
  8792  002BBC  C0FD  F0D0         	movff	_FatFs+1,trace_path@fs+1
  8793                           
  8794                           ; BSR set to: 0
  8795                           ;tff.c: 514: dj->fs = fs;
  8796  002BC0  EE20 F004          	lfsr	2,4
  8797  002BC4  51BF               	movf	trace_path@dj& (0+255),w,b
  8798  002BC6  26D9               	addwf	fsr2l,f,c
  8799  002BC8  51C0               	movf	(trace_path@dj+1)& (0+255),w,b
  8800  002BCA  22DA               	addwfc	fsr2h,f,c
  8801  002BCC  C0CF  FFDE         	movff	trace_path@fs,postinc2
  8802  002BD0  C0D0  FFDD         	movff	trace_path@fs+1,postdec2
  8803                           
  8804                           ; BSR set to: 0
  8805                           ;tff.c: 515: clust = fs->dirbase;
  8806  002BD4  EE20 F00C          	lfsr	2,12
  8807  002BD8  51CF               	movf	trace_path@fs& (0+255),w,b
  8808  002BDA  26D9               	addwf	fsr2l,f,c
  8809  002BDC  51D0               	movf	(trace_path@fs+1)& (0+255),w,b
  8810  002BDE  22DA               	addwfc	fsr2h,f,c
  8811  002BE0  CFDE F0D1          	movff	postinc2,trace_path@clust
  8812  002BE4  CFDD F0D2          	movff	postdec2,trace_path@clust+1
  8813                           
  8814                           ; BSR set to: 0
  8815                           ;tff.c: 522: {
  8816                           ;tff.c: 523: dj->clust = dj->sclust = 0;
  8817  002BE8  EE20 F006          	lfsr	2,6
  8818  002BEC  51BF               	movf	trace_path@dj& (0+255),w,b
  8819  002BEE  26D9               	addwf	fsr2l,f,c
  8820  002BF0  51C0               	movf	(trace_path@dj+1)& (0+255),w,b
  8821  002BF2  22DA               	addwfc	fsr2h,f,c
  8822  002BF4  0E00               	movlw	0
  8823  002BF6  6EDE               	movwf	postinc2,c
  8824  002BF8  0E00               	movlw	0
  8825  002BFA  6EDD               	movwf	postdec2,c
  8826  002BFC  EE10 F008          	lfsr	1,8
  8827  002C00  51BF               	movf	trace_path@dj& (0+255),w,b
  8828  002C02  26E1               	addwf	fsr1l,f,c
  8829  002C04  51C0               	movf	(trace_path@dj+1)& (0+255),w,b
  8830  002C06  22E2               	addwfc	fsr1h,f,c
  8831  002C08  CFDE FFE6          	movff	postinc2,postinc1
  8832  002C0C  CFDD FFE5          	movff	postdec2,postdec1
  8833                           
  8834                           ; BSR set to: 0
  8835                           ;tff.c: 524: dj->sect = clust;
  8836  002C10  51D1               	movf	trace_path@clust& (0+255),w,b
  8837  002C12  6FC7               	movwf	??_trace_path& (0+255),b
  8838  002C14  51D2               	movf	(trace_path@clust+1)& (0+255),w,b
  8839  002C16  6FC8               	movwf	(??_trace_path+1)& (0+255),b
  8840  002C18  6BC9               	clrf	(??_trace_path+2)& (0+255),b
  8841  002C1A  6BCA               	clrf	(??_trace_path+3)& (0+255),b
  8842  002C1C  EE20 F00A          	lfsr	2,10
  8843  002C20  51BF               	movf	trace_path@dj& (0+255),w,b
  8844  002C22  26D9               	addwf	fsr2l,f,c
  8845  002C24  51C0               	movf	(trace_path@dj+1)& (0+255),w,b
  8846  002C26  22DA               	addwfc	fsr2h,f,c
  8847  002C28  C0C7  FFDE         	movff	??_trace_path,postinc2
  8848  002C2C  C0C8  FFDE         	movff	??_trace_path+1,postinc2
  8849  002C30  C0C9  FFDE         	movff	??_trace_path+2,postinc2
  8850  002C34  C0CA  FFDE         	movff	??_trace_path+3,postinc2
  8851                           
  8852                           ; BSR set to: 0
  8853                           ;tff.c: 525: }
  8854                           ;tff.c: 526: dj->index = 0;
  8855  002C38  EE20 F002          	lfsr	2,2
  8856  002C3C  51BF               	movf	trace_path@dj& (0+255),w,b
  8857  002C3E  26D9               	addwf	fsr2l,f,c
  8858  002C40  51C0               	movf	(trace_path@dj+1)& (0+255),w,b
  8859  002C42  22DA               	addwfc	fsr2h,f,c
  8860  002C44  0E00               	movlw	0
  8861  002C46  6EDE               	movwf	postinc2,c
  8862  002C48  0E00               	movlw	0
  8863  002C4A  6EDD               	movwf	postdec2,c
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;tff.c: 528: if (*path == '\0') {
  8867  002C4C  C0C3  FFF6         	movff	trace_path@path,tblptrl
  8868  002C50  C0C4  FFF7         	movff	trace_path@path+1,tblptrh
  8869  002C54  6AF8               	clrf	tblptru,c
  8870  002C56  0E07               	movlw	(high __ramtop+-1)
  8871  002C58  64F7               	cpfsgt	tblptrh,c
  8872  002C5A  D003               	bra	u12487
  8873  002C5C  0008               	tblrd		*
  8874  002C5E  50F5               	movf	tablat,w,c
  8875  002C60  D005               	bra	u12480
  8876  002C62                     u12487:
  8877  002C62  CFF6 FFE9          	movff	tblptrl,fsr0l
  8878  002C66  CFF7 FFEA          	movff	tblptrh,fsr0h
  8879  002C6A  50EF               	movf	indf0,w,c
  8880  002C6C                     u12480:
  8881  002C6C  0900               	iorlw	0
  8882  002C6E  A4D8               	btfss	status,2,c
  8883  002C70  D00A               	goto	l1058
  8884                           
  8885                           ;tff.c: 529: *dir = (0); return FR_OK;
  8886  002C72  C0C5  FFD9         	movff	trace_path@dir,fsr2l
  8887  002C76  C0C6  FFDA         	movff	trace_path@dir+1,fsr2h
  8888  002C7A  0E00               	movlw	0
  8889  002C7C  6EDE               	movwf	postinc2,c
  8890  002C7E  0E00               	movlw	0
  8891  002C80  6EDD               	movwf	postdec2,c
  8892  002C82  0E00               	movlw	0
  8893  002C84  0012               	return	
  8894  002C86                     l1058:
  8895                           
  8896                           ;tff.c: 533: ds = make_dirfile(&path, fn);
  8897                           
  8898                           ;tff.c: 530: }
  8899                           ;tff.c: 532: for (;;) {
  8900  002C86  0EC3               	movlw	low trace_path@path
  8901  002C88  0100               	movlb	0	; () banked
  8902  002C8A  6F66               	movwf	make_dirfile@path& (0+255),b
  8903  002C8C  0E00               	movlw	high trace_path@path
  8904  002C8E  6F67               	movwf	(make_dirfile@path+1)& (0+255),b
  8905  002C90  C0C1  F068         	movff	trace_path@fn,make_dirfile@dirname
  8906  002C94  C0C2  F069         	movff	trace_path@fn+1,make_dirfile@dirname+1
  8907  002C98  EC78  F01F         	call	_make_dirfile	;wreg free
  8908  002C9C  0100               	movlb	0	; () banked
  8909  002C9E  6FD3               	movwf	trace_path@ds& (0+255),b
  8910                           
  8911                           ; BSR set to: 0
  8912                           ;tff.c: 534: if (ds == 1) return FR_INVALID_NAME;
  8913  002CA0  05D3               	decf	trace_path@ds& (0+255),w,b
  8914  002CA2  A4D8               	btfss	status,2,c
  8915  002CA4  D002               	goto	l1061
  8916                           
  8917                           ; BSR set to: 0
  8918  002CA6  0E04               	movlw	4
  8919                           
  8920                           ; BSR set to: 0
  8921  002CA8  0012               	return	
  8922  002CAA                     l1061:
  8923                           
  8924                           ;tff.c: 536: if (!move_window(dj->sect)) return FR_RW_ERROR;
  8925                           
  8926                           ; BSR set to: 0
  8927                           
  8928                           ;tff.c: 535: for (;;) {
  8929                           
  8930                           ; BSR set to: 0
  8931  002CAA  0100               	movlb	0	; () banked
  8932  002CAC  EE20 F00A          	lfsr	2,10
  8933  002CB0  51BF               	movf	trace_path@dj& (0+255),w,b
  8934  002CB2  26D9               	addwf	fsr2l,f,c
  8935  002CB4  51C0               	movf	(trace_path@dj+1)& (0+255),w,b
  8936  002CB6  22DA               	addwfc	fsr2h,f,c
  8937  002CB8  CFDE F08A          	movff	postinc2,move_window@sector
  8938  002CBC  CFDE F08B          	movff	postinc2,move_window@sector+1
  8939  002CC0  CFDE F08C          	movff	postinc2,move_window@sector+2
  8940  002CC4  CFDE F08D          	movff	postinc2,move_window@sector+3
  8941  002CC8  ECD9  F01D         	call	_move_window	;wreg free
  8942  002CCC  0900               	iorlw	0
  8943  002CCE  A4D8               	btfss	status,2,c
  8944  002CD0  D002               	goto	l1063
  8945  002CD2  0E08               	movlw	8
  8946  002CD4  0012               	return	
  8947  002CD6                     l1063:
  8948                           
  8949                           ;tff.c: 537: dptr = &fs->win[(dj->index & 15) * 32];
  8950  002CD6  0100               	movlb	0	; () banked
  8951  002CD8  EE20 F002          	lfsr	2,2
  8952  002CDC  51BF               	movf	trace_path@dj& (0+255),w,b
  8953  002CDE  26D9               	addwf	fsr2l,f,c
  8954  002CE0  51C0               	movf	(trace_path@dj+1)& (0+255),w,b
  8955  002CE2  22DA               	addwfc	fsr2h,f,c
  8956  002CE4  CFDE F0C7          	movff	postinc2,??_trace_path
  8957  002CE8  CFDD F0C8          	movff	postdec2,??_trace_path+1
  8958  002CEC  0E0F               	movlw	15
  8959  002CEE  17C7               	andwf	??_trace_path& (0+255),f,b
  8960  002CF0  0E00               	movlw	0
  8961  002CF2  17C8               	andwf	(??_trace_path+1)& (0+255),f,b
  8962  002CF4  0E05               	movlw	5
  8963  002CF6                     u12525:
  8964  002CF6  90D8               	bcf	status,0,c
  8965  002CF8  37C7               	rlcf	??_trace_path& (0+255),f,b
  8966  002CFA  37C8               	rlcf	(??_trace_path+1)& (0+255),f,b
  8967  002CFC  2EE8               	decfsz	wreg,f,c
  8968  002CFE  D7FB               	goto	u12525
  8969  002D00  0E20               	movlw	32
  8970  002D02  27C7               	addwf	??_trace_path& (0+255),f,b
  8971  002D04  0E00               	movlw	0
  8972  002D06  23C8               	addwfc	(??_trace_path+1)& (0+255),f,b
  8973  002D08  51C7               	movf	??_trace_path& (0+255),w,b
  8974  002D0A  25CF               	addwf	trace_path@fs& (0+255),w,b
  8975  002D0C  6FD4               	movwf	trace_path@dptr& (0+255),b
  8976  002D0E  51C8               	movf	(??_trace_path+1)& (0+255),w,b
  8977  002D10  21D0               	addwfc	(trace_path@fs+1)& (0+255),w,b
  8978  002D12  6FD5               	movwf	(trace_path@dptr+1)& (0+255),b
  8979                           
  8980                           ; BSR set to: 0
  8981                           ;tff.c: 538: if (dptr[0] == 0)
  8982  002D14  C0D4  FFD9         	movff	trace_path@dptr,fsr2l
  8983  002D18  C0D5  FFDA         	movff	trace_path@dptr+1,fsr2h
  8984  002D1C  50DF               	movf	indf2,w,c
  8985  002D1E  A4D8               	btfss	status,2,c
  8986  002D20  D00D               	goto	l1064
  8987                           
  8988                           ; BSR set to: 0
  8989                           ;tff.c: 539: return !ds ? FR_NO_FILE : FR_NO_PATH;
  8990  002D22  51D3               	movf	trace_path@ds& (0+255),w,b
  8991  002D24  B4D8               	btfsc	status,2,c
  8992  002D26  D004               	goto	l1066
  8993                           
  8994                           ; BSR set to: 0
  8995  002D28  0E00               	movlw	0
  8996  002D2A  6FCC               	movwf	(_trace_path$2043+1)& (0+255),b
  8997  002D2C  0E03               	movlw	3
  8998  002D2E  D003               	goto	L6
  8999  002D30                     l1066:
  9000                           
  9001                           ; BSR set to: 0
  9002                           
  9003                           ; BSR set to: 0
  9004  002D30  0E00               	movlw	0
  9005  002D32  6FCC               	movwf	(_trace_path$2043+1)& (0+255),b
  9006  002D34  0E02               	movlw	2
  9007  002D36                     L6:
  9008  002D36  6FCB               	movwf	_trace_path$2043& (0+255),b
  9009                           
  9010                           ; BSR set to: 0
  9011  002D38  51CB               	movf	_trace_path$2043& (0+255),w,b
  9012                           
  9013                           ; BSR set to: 0
  9014  002D3A  0012               	return	
  9015  002D3C                     l1064:
  9016                           
  9017                           ; BSR set to: 0
  9018                           ;tff.c: 540: if (dptr[0] != 0xE5
  9019                           ;tff.c: 541: && !(dptr[11] & 0x08)
  9020                           ;tff.c: 542: && !memcmp(&dptr[0], fn, 8+3) ) break;
  9021                           
  9022                           ; BSR set to: 0
  9023  002D3C  C0D4  FFD9         	movff	trace_path@dptr,fsr2l
  9024  002D40  C0D5  FFDA         	movff	trace_path@dptr+1,fsr2h
  9025  002D44  0EE5               	movlw	229
  9026  002D46  18DE               	xorwf	postinc2,w,c
  9027  002D48  B4D8               	btfsc	status,2,c
  9028  002D4A  D01B               	goto	l1069
  9029                           
  9030                           ; BSR set to: 0
  9031  002D4C  EE20 F00B          	lfsr	2,11
  9032  002D50  51D4               	movf	trace_path@dptr& (0+255),w,b
  9033  002D52  26D9               	addwf	fsr2l,f,c
  9034  002D54  51D5               	movf	(trace_path@dptr+1)& (0+255),w,b
  9035  002D56  22DA               	addwfc	fsr2h,f,c
  9036  002D58  B6DF               	btfsc	indf2,3,c
  9037  002D5A  D013               	goto	l1069
  9038                           
  9039                           ; BSR set to: 0
  9040  002D5C  C0D4  F060         	movff	trace_path@dptr,memcmp@s1
  9041  002D60  C0D5  F061         	movff	trace_path@dptr+1,memcmp@s1+1
  9042  002D64  C0C1  F062         	movff	trace_path@fn,memcmp@s2
  9043  002D68  C0C2  F063         	movff	trace_path@fn+1,memcmp@s2+1
  9044  002D6C  0E00               	movlw	0
  9045  002D6E  6F65               	movwf	(memcmp@n+1)& (0+255),b
  9046  002D70  0E0B               	movlw	11
  9047  002D72  6F64               	movwf	memcmp@n& (0+255),b
  9048  002D74  EC22  F026         	call	_memcmp	;wreg free
  9049  002D78  0100               	movlb	0	; () banked
  9050  002D7A  5160               	movf	?_memcmp& (0+255),w,b
  9051  002D7C  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
  9052  002D7E  B4D8               	btfsc	status,2,c
  9053  002D80  D017               	goto	l1070
  9054  002D82                     l1069:
  9055                           
  9056                           ; BSR set to: 0
  9057                           ;tff.c: 543: if (!next_dir_entry(dj))
  9058                           
  9059                           ; BSR set to: 0
  9060  002D82  C0BF  F0B2         	movff	trace_path@dj,next_dir_entry@dj
  9061  002D86  C0C0  F0B3         	movff	trace_path@dj+1,next_dir_entry@dj+1
  9062  002D8A  ECB4  F01E         	call	_next_dir_entry	;wreg free
  9063  002D8E  0900               	iorlw	0
  9064  002D90  A4D8               	btfss	status,2,c
  9065  002D92  D78B               	goto	l1061
  9066                           
  9067                           ;tff.c: 544: return !ds ? FR_NO_FILE : FR_NO_PATH;
  9068  002D94  0100               	movlb	0	; () banked
  9069  002D96  51D3               	movf	trace_path@ds& (0+255),w,b
  9070  002D98  B4D8               	btfsc	status,2,c
  9071  002D9A  D004               	goto	l1073
  9072                           
  9073                           ; BSR set to: 0
  9074  002D9C  0E00               	movlw	0
  9075  002D9E  6FCE               	movwf	(_trace_path$2045+1)& (0+255),b
  9076  002DA0  0E03               	movlw	3
  9077  002DA2  D003               	goto	L7
  9078  002DA4                     l1073:
  9079                           
  9080                           ; BSR set to: 0
  9081                           
  9082                           ; BSR set to: 0
  9083  002DA4  0E00               	movlw	0
  9084  002DA6  6FCE               	movwf	(_trace_path$2045+1)& (0+255),b
  9085  002DA8  0E02               	movlw	2
  9086  002DAA                     L7:
  9087  002DAA  6FCD               	movwf	_trace_path$2045& (0+255),b
  9088                           
  9089                           ; BSR set to: 0
  9090  002DAC  51CD               	movf	_trace_path$2045& (0+255),w,b
  9091                           
  9092                           ; BSR set to: 0
  9093  002DAE  0012               	return	
  9094  002DB0                     l1070:
  9095                           
  9096                           ; BSR set to: 0
  9097                           ;tff.c: 546: if (!ds) { *dir = dptr; return FR_OK; }
  9098                           
  9099                           ; BSR set to: 0
  9100  002DB0  51D3               	movf	trace_path@ds& (0+255),w,b
  9101  002DB2  A4D8               	btfss	status,2,c
  9102  002DB4  D00A               	goto	l1076
  9103                           
  9104                           ; BSR set to: 0
  9105  002DB6  C0C5  FFD9         	movff	trace_path@dir,fsr2l
  9106  002DBA  C0C6  FFDA         	movff	trace_path@dir+1,fsr2h
  9107  002DBE  C0D4  FFDE         	movff	trace_path@dptr,postinc2
  9108  002DC2  C0D5  FFDD         	movff	trace_path@dptr+1,postdec2
  9109                           
  9110                           ; BSR set to: 0
  9111  002DC6  0E00               	movlw	0
  9112                           
  9113                           ; BSR set to: 0
  9114  002DC8  0012               	return	
  9115  002DCA                     l1076:
  9116                           
  9117                           ; BSR set to: 0
  9118                           ;tff.c: 547: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
  9119                           
  9120                           ; BSR set to: 0
  9121  002DCA  EE20 F00B          	lfsr	2,11
  9122  002DCE  51D4               	movf	trace_path@dptr& (0+255),w,b
  9123  002DD0  26D9               	addwf	fsr2l,f,c
  9124  002DD2  51D5               	movf	(trace_path@dptr+1)& (0+255),w,b
  9125  002DD4  22DA               	addwfc	fsr2h,f,c
  9126  002DD6  B8DF               	btfsc	indf2,4,c
  9127  002DD8  D002               	goto	l1077
  9128                           
  9129                           ; BSR set to: 0
  9130  002DDA  0E03               	movlw	3
  9131                           
  9132                           ; BSR set to: 0
  9133  002DDC  0012               	return	
  9134  002DDE                     l1077:
  9135                           
  9136                           ; BSR set to: 0
  9137                           ;tff.c: 548: clust =
  9138                           ;tff.c: 552: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
  9139                           
  9140                           ; BSR set to: 0
  9141  002DDE  EE20 F01A          	lfsr	2,26
  9142  002DE2  51D4               	movf	trace_path@dptr& (0+255),w,b
  9143  002DE4  26D9               	addwf	fsr2l,f,c
  9144  002DE6  51D5               	movf	(trace_path@dptr+1)& (0+255),w,b
  9145  002DE8  22DA               	addwfc	fsr2h,f,c
  9146  002DEA  CFDE F0D1          	movff	postinc2,trace_path@clust
  9147  002DEE  CFDD F0D2          	movff	postdec2,trace_path@clust+1
  9148                           
  9149                           ; BSR set to: 0
  9150                           ;tff.c: 553: dj->clust = dj->sclust = clust;
  9151  002DF2  EE20 F006          	lfsr	2,6
  9152  002DF6  51BF               	movf	trace_path@dj& (0+255),w,b
  9153  002DF8  26D9               	addwf	fsr2l,f,c
  9154  002DFA  51C0               	movf	(trace_path@dj+1)& (0+255),w,b
  9155  002DFC  22DA               	addwfc	fsr2h,f,c
  9156  002DFE  C0D1  FFDE         	movff	trace_path@clust,postinc2
  9157  002E02  C0D2  FFDD         	movff	trace_path@clust+1,postdec2
  9158  002E06  EE10 F008          	lfsr	1,8
  9159  002E0A  51BF               	movf	trace_path@dj& (0+255),w,b
  9160  002E0C  26E1               	addwf	fsr1l,f,c
  9161  002E0E  51C0               	movf	(trace_path@dj+1)& (0+255),w,b
  9162  002E10  22E2               	addwfc	fsr1h,f,c
  9163  002E12  CFDE FFE6          	movff	postinc2,postinc1
  9164  002E16  CFDD FFE5          	movff	postdec2,postdec1
  9165                           
  9166                           ; BSR set to: 0
  9167                           ;tff.c: 554: dj->sect = clust2sect(clust);
  9168  002E1A  C0D1  F06C         	movff	trace_path@clust,clust2sect@clust
  9169  002E1E  C0D2  F06D         	movff	trace_path@clust+1,clust2sect@clust+1
  9170  002E22  EC23  F024         	call	_clust2sect	;wreg free
  9171  002E26  0100               	movlb	0	; () banked
  9172  002E28  EE20 F00A          	lfsr	2,10
  9173  002E2C  51BF               	movf	trace_path@dj& (0+255),w,b
  9174  002E2E  26D9               	addwf	fsr2l,f,c
  9175  002E30  51C0               	movf	(trace_path@dj+1)& (0+255),w,b
  9176  002E32  22DA               	addwfc	fsr2h,f,c
  9177  002E34  C06C  FFDE         	movff	?_clust2sect,postinc2
  9178  002E38  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  9179  002E3C  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  9180  002E40  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;tff.c: 555: dj->index = 2;
  9184  002E44  EE20 F002          	lfsr	2,2
  9185  002E48  51BF               	movf	trace_path@dj& (0+255),w,b
  9186  002E4A  26D9               	addwf	fsr2l,f,c
  9187  002E4C  51C0               	movf	(trace_path@dj+1)& (0+255),w,b
  9188  002E4E  22DA               	addwfc	fsr2h,f,c
  9189  002E50  0E02               	movlw	2
  9190  002E52  6EDE               	movwf	postinc2,c
  9191  002E54  0E00               	movlw	0
  9192  002E56  6EDD               	movwf	postdec2,c
  9193                           
  9194                           ;tff.c: 556: }
  9195  002E58  D716               	goto	l1058
  9196  002E5A                     __end_of_trace_path:
  9197                           	opt stack 0
  9198                           tosu	equ	0xFFF
  9199                           tosh	equ	0xFFE
  9200                           tosl	equ	0xFFD
  9201                           pclath	equ	0xFFA
  9202                           tblptru	equ	0xFF8
  9203                           tblptrh	equ	0xFF7
  9204                           tblptrl	equ	0xFF6
  9205                           tablat	equ	0xFF5
  9206                           prodh	equ	0xFF4
  9207                           prodl	equ	0xFF3
  9208                           intcon	equ	0xFF2
  9209                           intcon2	equ	0xFF1
  9210                           intcon3	equ	0xFF0
  9211                           indf0	equ	0xFEF
  9212                           postinc0	equ	0xFEE
  9213                           fsr0h	equ	0xFEA
  9214                           fsr0l	equ	0xFE9
  9215                           wreg	equ	0xFE8
  9216                           indf1	equ	0xFE7
  9217                           postinc1	equ	0xFE6
  9218                           postdec1	equ	0xFE5
  9219                           plusw1	equ	0xFE3
  9220                           fsr1h	equ	0xFE2
  9221                           fsr1l	equ	0xFE1
  9222                           indf2	equ	0xFDF
  9223                           postinc2	equ	0xFDE
  9224                           postdec2	equ	0xFDD
  9225                           plusw2	equ	0xFDB
  9226                           fsr2h	equ	0xFDA
  9227                           fsr2l	equ	0xFD9
  9228                           status	equ	0xFD8
  9229                           
  9230 ;; *************** function _make_dirfile *****************
  9231 ;; Defined at:
  9232 ;;		line 438 in file "bibliotecas/tff.c"
  9233 ;; Parameters:    Size  Location     Type
  9234 ;;  path            2    6[BANK0 ] PTR PTR const unsigned c
  9235 ;;		 -> trace_path@path(2), 
  9236 ;;  dirname         2    8[BANK0 ] PTR unsigned char 
  9237 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  9238 ;; Auto vars:     Size  Location     Type
  9239 ;;  c               1   18[BANK0 ] unsigned char 
  9240 ;;  n               1   17[BANK0 ] unsigned char 
  9241 ;;  a               1   16[BANK0 ] unsigned char 
  9242 ;;  t               1   15[BANK0 ] unsigned char 
  9243 ;;  b               1   14[BANK0 ] unsigned char 
  9244 ;; Return value:  Size  Location     Type
  9245 ;;                  1    wreg      unsigned char 
  9246 ;; Registers used:
  9247 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9248 ;; Tracked objects:
  9249 ;;		On entry : 0/0
  9250 ;;		On exit  : 0/0
  9251 ;;		Unchanged: 0/0
  9252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9253 ;;      Params:         0       4       0       0       0       0       0       0       0
  9254 ;;      Locals:         0       7       0       0       0       0       0       0       0
  9255 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9256 ;;      Totals:         0      13       0       0       0       0       0       0       0
  9257 ;;Total ram usage:       13 bytes
  9258 ;; Hardware stack levels used:    1
  9259 ;; Hardware stack levels required when called:    4
  9260 ;; This function calls:
  9261 ;;		_memset
  9262 ;; This function is called by:
  9263 ;;		_trace_path
  9264 ;; This function uses a non-reentrant model
  9265 ;;
  9266                           
  9267                           	psect	text29
  9268  003EF0                     __ptext29:
  9269                           	opt stack 0
  9270  003EF0                     _make_dirfile:
  9271                           	opt stack 21
  9272                           
  9273                           ;tff.c: 443: BYTE n, t, c, a, b;
  9274                           ;tff.c: 446: memset(dirname, ' ', 8+3);
  9275                           
  9276                           ;incstack = 0
  9277  003EF0  C068  F060         	movff	make_dirfile@dirname,memset@p1
  9278  003EF4  C069  F061         	movff	make_dirfile@dirname+1,memset@p1+1
  9279  003EF8  0E00               	movlw	0
  9280  003EFA  0100               	movlb	0	; () banked
  9281  003EFC  6F63               	movwf	(memset@c+1)& (0+255),b
  9282  003EFE  0E20               	movlw	32
  9283  003F00  6F62               	movwf	memset@c& (0+255),b
  9284  003F02  0E00               	movlw	0
  9285  003F04  6F65               	movwf	(memset@n+1)& (0+255),b
  9286  003F06  0E0B               	movlw	11
  9287  003F08  6F64               	movwf	memset@n& (0+255),b
  9288  003F0A  EC27  F02D         	call	_memset	;wreg free
  9289                           
  9290                           ;tff.c: 447: a = 0; b = 0x18;
  9291  003F0E  0E00               	movlw	0
  9292  003F10  0100               	movlb	0	; () banked
  9293  003F12  6F70               	movwf	make_dirfile@a& (0+255),b
  9294                           
  9295                           ; BSR set to: 0
  9296  003F14  0E18               	movlw	24
  9297  003F16  6F6E               	movwf	make_dirfile@b& (0+255),b
  9298                           
  9299                           ; BSR set to: 0
  9300                           ;tff.c: 448: n = 0; t = 8;
  9301  003F18  0E00               	movlw	0
  9302  003F1A  6F71               	movwf	make_dirfile@n& (0+255),b
  9303                           
  9304                           ; BSR set to: 0
  9305  003F1C  0E08               	movlw	8
  9306  003F1E  6F6F               	movwf	make_dirfile@t& (0+255),b
  9307  003F20                     
  9308                           ; BSR set to: 0
  9309                           ;tff.c: 450: c = *(*path)++;
  9310                           
  9311                           ; BSR set to: 0
  9312  003F20  C066  FFD9         	movff	make_dirfile@path,fsr2l
  9313  003F24  C067  FFDA         	movff	make_dirfile@path+1,fsr2h
  9314  003F28  CFDF F06A          	movff	indf2,??_make_dirfile
  9315  003F2C  0E01               	movlw	1
  9316  003F2E  26DE               	addwf	postinc2,f,c
  9317  003F30  CFDF F06B          	movff	indf2,??_make_dirfile+1
  9318  003F34  0E00               	movlw	0
  9319  003F36  22DD               	addwfc	postdec2,f,c
  9320  003F38  C06A  FFF6         	movff	??_make_dirfile,tblptrl
  9321  003F3C  C06B  FFF7         	movff	??_make_dirfile+1,tblptrh
  9322  003F40  6AF8               	clrf	tblptru,c
  9323  003F42  0E07               	movlw	(high __ramtop+-1)
  9324  003F44  64F7               	cpfsgt	tblptrh,c
  9325  003F46  D003               	bra	u11817
  9326  003F48  0008               	tblrd		*
  9327  003F4A  50F5               	movf	tablat,w,c
  9328  003F4C  D005               	bra	u11810
  9329  003F4E                     u11817:
  9330  003F4E  CFF6 FFE9          	movff	tblptrl,fsr0l
  9331  003F52  CFF7 FFEA          	movff	tblptrh,fsr0h
  9332  003F56  50EF               	movf	indf0,w,c
  9333  003F58                     u11810:
  9334  003F58  0100               	movlb	0	; () banked
  9335  003F5A  6F72               	movwf	make_dirfile@c& (0+255),b
  9336                           
  9337                           ; BSR set to: 0
  9338                           ;tff.c: 451: if (c == '\0' || c == '/') {
  9339  003F5C  5172               	movf	make_dirfile@c& (0+255),w,b
  9340  003F5E  B4D8               	btfsc	status,2,c
  9341  003F60  D004               	goto	u11830
  9342                           
  9343                           ; BSR set to: 0
  9344  003F62  0E2F               	movlw	47
  9345  003F64  1972               	xorwf	make_dirfile@c& (0+255),w,b
  9346  003F66  A4D8               	btfss	status,2,c
  9347  003F68  D013               	goto	l1012
  9348  003F6A                     u11830:
  9349                           
  9350                           ; BSR set to: 0
  9351                           ;tff.c: 452: if (n == 0) break;
  9352                           
  9353                           ; BSR set to: 0
  9354  003F6A  5171               	movf	make_dirfile@n& (0+255),w,b
  9355  003F6C  B4D8               	btfsc	status,2,c
  9356  003F6E  D075               	goto	l1016
  9357                           
  9358                           ; BSR set to: 0
  9359                           
  9360                           ; BSR set to: 0
  9361                           
  9362                           ; BSR set to: 0
  9363                           
  9364                           ; BSR set to: 0
  9365                           ;tff.c: 453: dirname[11] = 1 ? (a & b) : 0;
  9366                           
  9367                           ; BSR set to: 0
  9368  003F70  5170               	movf	make_dirfile@a& (0+255),w,b
  9369  003F72  156E               	andwf	make_dirfile@b& (0+255),w,b
  9370  003F74  6F6A               	movwf	??_make_dirfile& (0+255),b
  9371  003F76  516A               	movf	??_make_dirfile& (0+255),w,b
  9372  003F78  6F6C               	movwf	_make_dirfile$1996& (0+255),b
  9373  003F7A  6B6D               	clrf	(_make_dirfile$1996+1)& (0+255),b
  9374                           
  9375                           ; BSR set to: 0
  9376                           
  9377                           ; BSR set to: 0
  9378  003F7C  EE20 F00B          	lfsr	2,11
  9379  003F80  5168               	movf	make_dirfile@dirname& (0+255),w,b
  9380  003F82  26D9               	addwf	fsr2l,f,c
  9381  003F84  5169               	movf	(make_dirfile@dirname+1)& (0+255),w,b
  9382  003F86  22DA               	addwfc	fsr2h,f,c
  9383  003F88  C06C  FFDF         	movff	_make_dirfile$1996,indf2
  9384                           
  9385                           ; BSR set to: 0
  9386                           ;tff.c: 454: return c;
  9387  003F8C  5172               	movf	make_dirfile@c& (0+255),w,b
  9388                           
  9389                           ; BSR set to: 0
  9390  003F8E  0012               	return	
  9391  003F90                     l1012:
  9392                           
  9393                           ; BSR set to: 0
  9394                           ;tff.c: 455: }
  9395                           ;tff.c: 456: if (c <= ' ' || c == 0x7F) break;
  9396                           
  9397                           ; BSR set to: 0
  9398  003F90  0E20               	movlw	32
  9399  003F92  6572               	cpfsgt	make_dirfile@c& (0+255),b
  9400  003F94  D062               	goto	l1016
  9401                           
  9402                           ; BSR set to: 0
  9403  003F96  0E7F               	movlw	127
  9404  003F98  1972               	xorwf	make_dirfile@c& (0+255),w,b
  9405  003F9A  B4D8               	btfsc	status,2,c
  9406  003F9C  D05E               	goto	l1016
  9407                           
  9408                           ; BSR set to: 0
  9409                           ;tff.c: 457: if (c == '.') {
  9410                           
  9411                           ; BSR set to: 0
  9412                           
  9413                           ; BSR set to: 0
  9414  003F9E  0E2E               	movlw	46
  9415  003FA0  1972               	xorwf	make_dirfile@c& (0+255),w,b
  9416  003FA2  A4D8               	btfss	status,2,c
  9417  003FA4  D00C               	goto	l1028
  9418                           
  9419                           ; BSR set to: 0
  9420                           ;tff.c: 458: if (!(a & 1) && n >= 1 && n <= 8) {
  9421  003FA6  B170               	btfsc	make_dirfile@a& (0+255),0,b
  9422  003FA8  D058               	goto	l1016
  9423                           
  9424                           ; BSR set to: 0
  9425  003FAA  5171               	movf	make_dirfile@n& (0+255),w,b
  9426  003FAC  B4D8               	btfsc	status,2,c
  9427  003FAE  D055               	goto	l1016
  9428                           
  9429                           ; BSR set to: 0
  9430  003FB0  0E09               	movlw	9
  9431  003FB2  6171               	cpfslt	make_dirfile@n& (0+255),b
  9432  003FB4  D052               	goto	l1016
  9433                           
  9434                           ; BSR set to: 0
  9435                           ;tff.c: 459: n = 8; t = 11; continue;
  9436  003FB6  0E08               	movlw	8
  9437  003FB8  6F71               	movwf	make_dirfile@n& (0+255),b
  9438  003FBA  0E0B               	movlw	11
  9439  003FBC  D7B0               	goto	L8
  9440  003FBE                     l1028:
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;tff.c: 469: }
  9444                           ;tff.c: 470: if (c == '"') break;
  9445                           
  9446                           ; BSR set to: 0
  9447  003FBE  0E22               	movlw	34
  9448  003FC0  1972               	xorwf	make_dirfile@c& (0+255),w,b
  9449  003FC2  B4D8               	btfsc	status,2,c
  9450  003FC4  D04A               	goto	l1016
  9451                           
  9452                           ; BSR set to: 0
  9453                           ;tff.c: 471: if (c <= ')') goto md_l1;
  9454                           
  9455                           ; BSR set to: 0
  9456                           
  9457                           ; BSR set to: 0
  9458  003FC6  0E2A               	movlw	42
  9459  003FC8  6172               	cpfslt	make_dirfile@c& (0+255),b
  9460  003FCA  D001               	goto	l1036
  9461  003FCC  D035               	goto	l1054
  9462  003FCE                     l1036:
  9463                           
  9464                           ; BSR set to: 0
  9465                           ;tff.c: 472: if (c <= ',') break;
  9466                           
  9467                           ; BSR set to: 0
  9468  003FCE  0E2D               	movlw	45
  9469  003FD0  6172               	cpfslt	make_dirfile@c& (0+255),b
  9470  003FD2  D001               	goto	l1038
  9471  003FD4  D042               	goto	l1016
  9472  003FD6                     l1038:
  9473                           
  9474                           ; BSR set to: 0
  9475                           ;tff.c: 473: if (c <= '9') goto md_l1;
  9476                           
  9477                           ; BSR set to: 0
  9478  003FD6  0E3A               	movlw	58
  9479  003FD8  6172               	cpfslt	make_dirfile@c& (0+255),b
  9480  003FDA  D001               	goto	l1039
  9481  003FDC  D02D               	goto	l1054
  9482  003FDE                     l1039:
  9483                           
  9484                           ; BSR set to: 0
  9485                           ;tff.c: 474: if (c <= '?') break;
  9486                           
  9487                           ; BSR set to: 0
  9488  003FDE  0E40               	movlw	64
  9489  003FE0  6172               	cpfslt	make_dirfile@c& (0+255),b
  9490  003FE2  D001               	goto	l1040
  9491  003FE4  D03A               	goto	l1016
  9492  003FE6                     l1040:
  9493                           
  9494                           ; BSR set to: 0
  9495                           ;tff.c: 475: if (!(a & 1)) {
  9496  003FE6  B170               	btfsc	make_dirfile@a& (0+255),0,b
  9497  003FE8  D027               	goto	l1054
  9498                           
  9499                           ; BSR set to: 0
  9500                           ;tff.c: 476: if (c == '|') break;
  9501  003FEA  0E7C               	movlw	124
  9502  003FEC  1972               	xorwf	make_dirfile@c& (0+255),w,b
  9503  003FEE  B4D8               	btfsc	status,2,c
  9504  003FF0  D034               	goto	l1016
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;tff.c: 477: if (c >= '[' && c <= ']') break;
  9508                           
  9509                           ; BSR set to: 0
  9510                           
  9511                           ; BSR set to: 0
  9512  003FF2  0E5A               	movlw	90
  9513  003FF4  6572               	cpfsgt	make_dirfile@c& (0+255),b
  9514  003FF6  D004               	goto	l1043
  9515                           
  9516                           ; BSR set to: 0
  9517  003FF8  0E5E               	movlw	94
  9518  003FFA  6172               	cpfslt	make_dirfile@c& (0+255),b
  9519  003FFC  D001               	goto	l1043
  9520  003FFE  D02D               	goto	l1016
  9521  004000                     l1043:
  9522                           
  9523                           ; BSR set to: 0
  9524                           
  9525                           ; BSR set to: 0
  9526  004000  0E40               	movlw	64
  9527  004002  6572               	cpfsgt	make_dirfile@c& (0+255),b
  9528  004004  D00A               	goto	l1048
  9529                           
  9530                           ; BSR set to: 0
  9531  004006  0E5B               	movlw	91
  9532  004008  6172               	cpfslt	make_dirfile@c& (0+255),b
  9533  00400A  D007               	goto	l1048
  9534                           
  9535                           ; BSR set to: 0
  9536                           ;tff.c: 479: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
  9537  00400C  0E08               	movlw	8
  9538  00400E  196F               	xorwf	make_dirfile@t& (0+255),w,b
  9539  004010  A4D8               	btfss	status,2,c
  9540  004012  D002               	goto	l1046
  9541                           
  9542                           ; BSR set to: 0
  9543  004014  976E               	bcf	make_dirfile@b& (0+255),3,b
  9544  004016  D001               	goto	l1048
  9545  004018                     l1046:
  9546                           
  9547                           ; BSR set to: 0
  9548                           
  9549                           ; BSR set to: 0
  9550  004018  996E               	bcf	make_dirfile@b& (0+255),4,b
  9551  00401A                     l1048:
  9552                           
  9553                           ; BSR set to: 0
  9554                           ;tff.c: 480: if (c >= 'a' && c <= 'z') {
  9555                           
  9556                           ; BSR set to: 0
  9557                           
  9558                           ; BSR set to: 0
  9559  00401A  0E60               	movlw	96
  9560  00401C  6572               	cpfsgt	make_dirfile@c& (0+255),b
  9561  00401E  D00C               	goto	l1054
  9562                           
  9563                           ; BSR set to: 0
  9564  004020  0E7B               	movlw	123
  9565  004022  6172               	cpfslt	make_dirfile@c& (0+255),b
  9566  004024  D009               	goto	l1054
  9567                           
  9568                           ; BSR set to: 0
  9569                           ;tff.c: 482: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
  9570  004026  0E20               	movlw	32
  9571  004028  5F72               	subwf	make_dirfile@c& (0+255),f,b
  9572  00402A  0E08               	movlw	8
  9573  00402C  196F               	xorwf	make_dirfile@t& (0+255),w,b
  9574  00402E  A4D8               	btfss	status,2,c
  9575  004030  D002               	goto	l1052
  9576                           
  9577                           ; BSR set to: 0
  9578  004032  8770               	bsf	make_dirfile@a& (0+255),3,b
  9579  004034  D001               	goto	l1054
  9580  004036                     l1052:
  9581                           
  9582                           ; BSR set to: 0
  9583                           
  9584                           ; BSR set to: 0
  9585  004036  8970               	bsf	make_dirfile@a& (0+255),4,b
  9586  004038                     l1054:
  9587                           
  9588                           ; BSR set to: 0
  9589                           ;tff.c: 486: a &= 0xFE;
  9590                           
  9591                           ; BSR set to: 0
  9592                           ;tff.c: 483: }
  9593                           ;tff.c: 484: }
  9594                           ;tff.c: 485: md_l1:
  9595                           
  9596                           ; BSR set to: 0
  9597                           
  9598                           ; BSR set to: 0
  9599                           
  9600                           ; BSR set to: 0
  9601  004038  9170               	bcf	make_dirfile@a& (0+255),0,b
  9602                           
  9603                           ; BSR set to: 0
  9604                           ;tff.c: 488: if (n >= t) break;
  9605                           
  9606                           ; BSR set to: 0
  9607                           
  9608                           ;tff.c: 487: md_l2:
  9609  00403A  516F               	movf	make_dirfile@t& (0+255),w,b
  9610  00403C  5D71               	subwf	make_dirfile@n& (0+255),w,b
  9611  00403E  B0D8               	btfsc	status,0,c
  9612  004040  D00C               	goto	l1016
  9613                           
  9614                           ; BSR set to: 0
  9615                           ;tff.c: 489: dirname[n++] = c;
  9616                           
  9617                           ; BSR set to: 0
  9618                           
  9619                           ; BSR set to: 0
  9620  004042  5171               	movf	make_dirfile@n& (0+255),w,b
  9621  004044  0D01               	mullw	1
  9622  004046  50F3               	movf	prodl,w,c
  9623  004048  2568               	addwf	make_dirfile@dirname& (0+255),w,b
  9624  00404A  6ED9               	movwf	fsr2l,c
  9625  00404C  50F4               	movf	prodh,w,c
  9626  00404E  2169               	addwfc	(make_dirfile@dirname+1)& (0+255),w,b
  9627  004050  6EDA               	movwf	fsr2h,c
  9628  004052  C072  FFDF         	movff	make_dirfile@c,indf2
  9629                           
  9630                           ; BSR set to: 0
  9631  004056  2B71               	incf	make_dirfile@n& (0+255),f,b
  9632                           
  9633                           ; BSR set to: 0
  9634                           ;tff.c: 490: }
  9635  004058  D763               	goto	l1011
  9636  00405A                     l1016:
  9637                           
  9638                           ; BSR set to: 0
  9639                           ;tff.c: 491: return 1;
  9640                           
  9641                           ; BSR set to: 0
  9642  00405A  0E01               	movlw	1
  9643  00405C  0012               	return	
  9644  00405E                     __end_of_make_dirfile:
  9645                           	opt stack 0
  9646                           tosu	equ	0xFFF
  9647                           tosh	equ	0xFFE
  9648                           tosl	equ	0xFFD
  9649                           pclath	equ	0xFFA
  9650                           tblptru	equ	0xFF8
  9651                           tblptrh	equ	0xFF7
  9652                           tblptrl	equ	0xFF6
  9653                           tablat	equ	0xFF5
  9654                           prodh	equ	0xFF4
  9655                           prodl	equ	0xFF3
  9656                           intcon	equ	0xFF2
  9657                           intcon2	equ	0xFF1
  9658                           intcon3	equ	0xFF0
  9659                           indf0	equ	0xFEF
  9660                           postinc0	equ	0xFEE
  9661                           fsr0h	equ	0xFEA
  9662                           fsr0l	equ	0xFE9
  9663                           wreg	equ	0xFE8
  9664                           indf1	equ	0xFE7
  9665                           postinc1	equ	0xFE6
  9666                           postdec1	equ	0xFE5
  9667                           plusw1	equ	0xFE3
  9668                           fsr1h	equ	0xFE2
  9669                           fsr1l	equ	0xFE1
  9670                           indf2	equ	0xFDF
  9671                           postinc2	equ	0xFDE
  9672                           postdec2	equ	0xFDD
  9673                           plusw2	equ	0xFDB
  9674                           fsr2h	equ	0xFDA
  9675                           fsr2l	equ	0xFD9
  9676                           status	equ	0xFD8
  9677                           
  9678 ;; *************** function _reserve_direntry *****************
  9679 ;; Defined at:
  9680 ;;		line 567 in file "bibliotecas/tff.c"
  9681 ;; Parameters:    Size  Location     Type
  9682 ;;  dj              2   99[BANK0 ] PTR struct _DIR_E
  9683 ;;		 -> f_open@dj(14), 
  9684 ;;  dir             2  101[BANK0 ] PTR PTR unsigned char 
  9685 ;;		 -> f_open@dir(2), 
  9686 ;; Auto vars:     Size  Location     Type
  9687 ;;  sector          4  105[BANK0 ] unsigned long 
  9688 ;;  fs              2  115[BANK0 ] PTR struct _FATFS
  9689 ;;		 -> NULL(0), fs(544), 
  9690 ;;  clust           2  113[BANK0 ] unsigned short 
  9691 ;;  dptr            2  110[BANK0 ] PTR unsigned char 
  9692 ;;		 -> fs.win(512), NULL(0), fs(544), 
  9693 ;;  c               1  112[BANK0 ] unsigned char 
  9694 ;;  n               1  109[BANK0 ] unsigned char 
  9695 ;; Return value:  Size  Location     Type
  9696 ;;                  1    wreg      enum E155
  9697 ;; Registers used:
  9698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9704 ;;      Params:         0       4       0       0       0       0       0       0       0
  9705 ;;      Locals:         0      12       0       0       0       0       0       0       0
  9706 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9707 ;;      Totals:         0      18       0       0       0       0       0       0       0
  9708 ;;Total ram usage:       18 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; Hardware stack levels required when called:   11
  9711 ;; This function calls:
  9712 ;;		_clust2sect
  9713 ;;		_create_chain
  9714 ;;		_disk_write
  9715 ;;		_memset
  9716 ;;		_move_window
  9717 ;;		_next_dir_entry
  9718 ;; This function is called by:
  9719 ;;		_f_open
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text30
  9724  002E5A                     __ptext30:
  9725                           	opt stack 0
  9726  002E5A                     _reserve_direntry:
  9727                           	opt stack 15
  9728                           
  9729                           ;tff.c: 572: CLUST clust;
  9730                           ;tff.c: 573: DWORD sector;
  9731                           ;tff.c: 574: BYTE c, n, *dptr;
  9732                           ;tff.c: 575: FATFS *fs = dj->fs;
  9733                           
  9734                           ; BSR set to: 0
  9735                           ;incstack = 0
  9736  002E5A  0100               	movlb	0	; () banked
  9737  002E5C  EE20 F004          	lfsr	2,4
  9738  002E60  51C3               	movf	reserve_direntry@dj& (0+255),w,b
  9739  002E62  26D9               	addwf	fsr2l,f,c
  9740  002E64  51C4               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9741  002E66  22DA               	addwfc	fsr2h,f,c
  9742  002E68  CFDE F0D3          	movff	postinc2,reserve_direntry@fs
  9743  002E6C  CFDD F0D4          	movff	postdec2,reserve_direntry@fs+1
  9744                           
  9745                           ;tff.c: 579: clust = dj->sclust;
  9746  002E70  EE20 F006          	lfsr	2,6
  9747  002E74  51C3               	movf	reserve_direntry@dj& (0+255),w,b
  9748  002E76  26D9               	addwf	fsr2l,f,c
  9749  002E78  51C4               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9750  002E7A  22DA               	addwfc	fsr2h,f,c
  9751  002E7C  CFDE F0D1          	movff	postinc2,reserve_direntry@clust
  9752  002E80  CFDD F0D2          	movff	postdec2,reserve_direntry@clust+1
  9753                           
  9754                           ; BSR set to: 0
  9755                           ;tff.c: 580: if (clust != 0) {
  9756  002E84  51D1               	movf	reserve_direntry@clust& (0+255),w,b
  9757  002E86  11D2               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9758  002E88  B4D8               	btfsc	status,2,c
  9759  002E8A  D020               	goto	l1081
  9760                           
  9761                           ; BSR set to: 0
  9762                           ;tff.c: 581: dj->clust = clust;
  9763  002E8C  EE20 F008          	lfsr	2,8
  9764  002E90  51C3               	movf	reserve_direntry@dj& (0+255),w,b
  9765  002E92  26D9               	addwf	fsr2l,f,c
  9766  002E94  51C4               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9767  002E96  22DA               	addwfc	fsr2h,f,c
  9768  002E98  C0D1  FFDE         	movff	reserve_direntry@clust,postinc2
  9769  002E9C  C0D2  FFDD         	movff	reserve_direntry@clust+1,postdec2
  9770                           
  9771                           ; BSR set to: 0
  9772                           ;tff.c: 582: dj->sect = clust2sect(clust);
  9773  002EA0  C0D1  F06C         	movff	reserve_direntry@clust,clust2sect@clust
  9774  002EA4  C0D2  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
  9775  002EA8  EC23  F024         	call	_clust2sect	;wreg free
  9776  002EAC  0100               	movlb	0	; () banked
  9777  002EAE  EE20 F00A          	lfsr	2,10
  9778  002EB2  51C3               	movf	reserve_direntry@dj& (0+255),w,b
  9779  002EB4  26D9               	addwf	fsr2l,f,c
  9780  002EB6  51C4               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9781  002EB8  22DA               	addwfc	fsr2h,f,c
  9782  002EBA  C06C  FFDE         	movff	?_clust2sect,postinc2
  9783  002EBE  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  9784  002EC2  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  9785  002EC6  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  9786                           
  9787                           ;tff.c: 583: } else {
  9788  002ECA  D014               	goto	l1082
  9789  002ECC                     l1081:
  9790                           
  9791                           ; BSR set to: 0
  9792                           ;tff.c: 584: dj->sect = fs->dirbase;
  9793                           
  9794                           ; BSR set to: 0
  9795  002ECC  EE20 F00C          	lfsr	2,12
  9796  002ED0  51D3               	movf	reserve_direntry@fs& (0+255),w,b
  9797  002ED2  26D9               	addwf	fsr2l,f,c
  9798  002ED4  51D4               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  9799  002ED6  22DA               	addwfc	fsr2h,f,c
  9800  002ED8  EE10 F00A          	lfsr	1,10
  9801  002EDC  51C3               	movf	reserve_direntry@dj& (0+255),w,b
  9802  002EDE  26E1               	addwf	fsr1l,f,c
  9803  002EE0  51C4               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9804  002EE2  22E2               	addwfc	fsr1h,f,c
  9805  002EE4  CFDE FFE6          	movff	postinc2,postinc1
  9806  002EE8  CFDE FFE6          	movff	postinc2,postinc1
  9807  002EEC  CFDE FFE6          	movff	postinc2,postinc1
  9808  002EF0  CFDE FFE6          	movff	postinc2,postinc1
  9809  002EF4                     l1082:
  9810                           
  9811                           ; BSR set to: 0
  9812                           ;tff.c: 585: }
  9813                           ;tff.c: 586: dj->index = 0;
  9814                           
  9815                           ; BSR set to: 0
  9816  002EF4  EE20 F002          	lfsr	2,2
  9817  002EF8  51C3               	movf	reserve_direntry@dj& (0+255),w,b
  9818  002EFA  26D9               	addwf	fsr2l,f,c
  9819  002EFC  51C4               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9820  002EFE  22DA               	addwfc	fsr2h,f,c
  9821  002F00  0E00               	movlw	0
  9822  002F02  6EDE               	movwf	postinc2,c
  9823  002F04  0E00               	movlw	0
  9824  002F06  6EDD               	movwf	postdec2,c
  9825  002F08                     
  9826                           ;tff.c: 589: if (!move_window(dj->sect)) return FR_RW_ERROR;
  9827                           
  9828                           ; BSR set to: 0
  9829  002F08  0100               	movlb	0	; () banked
  9830  002F0A  EE20 F00A          	lfsr	2,10
  9831  002F0E  51C3               	movf	reserve_direntry@dj& (0+255),w,b
  9832  002F10  26D9               	addwf	fsr2l,f,c
  9833  002F12  51C4               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9834  002F14  22DA               	addwfc	fsr2h,f,c
  9835  002F16  CFDE F08A          	movff	postinc2,move_window@sector
  9836  002F1A  CFDE F08B          	movff	postinc2,move_window@sector+1
  9837  002F1E  CFDE F08C          	movff	postinc2,move_window@sector+2
  9838  002F22  CFDE F08D          	movff	postinc2,move_window@sector+3
  9839  002F26  ECD9  F01D         	call	_move_window	;wreg free
  9840  002F2A  0900               	iorlw	0
  9841  002F2C  A4D8               	btfss	status,2,c
  9842  002F2E  D002               	goto	l1084
  9843  002F30  0E08               	movlw	8
  9844  002F32  0012               	return	
  9845  002F34                     l1084:
  9846                           
  9847                           ;tff.c: 590: dptr = &fs->win[(dj->index & 15) * 32];
  9848  002F34  0100               	movlb	0	; () banked
  9849  002F36  EE20 F002          	lfsr	2,2
  9850  002F3A  51C3               	movf	reserve_direntry@dj& (0+255),w,b
  9851  002F3C  26D9               	addwf	fsr2l,f,c
  9852  002F3E  51C4               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9853  002F40  22DA               	addwfc	fsr2h,f,c
  9854  002F42  CFDE F0C7          	movff	postinc2,??_reserve_direntry
  9855  002F46  CFDD F0C8          	movff	postdec2,??_reserve_direntry+1
  9856  002F4A  0E0F               	movlw	15
  9857  002F4C  17C7               	andwf	??_reserve_direntry& (0+255),f,b
  9858  002F4E  0E00               	movlw	0
  9859  002F50  17C8               	andwf	(??_reserve_direntry+1)& (0+255),f,b
  9860  002F52  0E05               	movlw	5
  9861  002F54                     u12645:
  9862  002F54  90D8               	bcf	status,0,c
  9863  002F56  37C7               	rlcf	??_reserve_direntry& (0+255),f,b
  9864  002F58  37C8               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
  9865  002F5A  2EE8               	decfsz	wreg,f,c
  9866  002F5C  D7FB               	goto	u12645
  9867  002F5E  0E20               	movlw	32
  9868  002F60  27C7               	addwf	??_reserve_direntry& (0+255),f,b
  9869  002F62  0E00               	movlw	0
  9870  002F64  23C8               	addwfc	(??_reserve_direntry+1)& (0+255),f,b
  9871  002F66  51C7               	movf	??_reserve_direntry& (0+255),w,b
  9872  002F68  25D3               	addwf	reserve_direntry@fs& (0+255),w,b
  9873  002F6A  6FCE               	movwf	reserve_direntry@dptr& (0+255),b
  9874  002F6C  51C8               	movf	(??_reserve_direntry+1)& (0+255),w,b
  9875  002F6E  21D4               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  9876  002F70  6FCF               	movwf	(reserve_direntry@dptr+1)& (0+255),b
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;tff.c: 591: c = dptr[0];
  9880  002F72  C0CE  FFD9         	movff	reserve_direntry@dptr,fsr2l
  9881  002F76  C0CF  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
  9882  002F7A  50DF               	movf	indf2,w,c
  9883  002F7C  6FD0               	movwf	reserve_direntry@c& (0+255),b
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;tff.c: 592: if (c == 0 || c == 0xE5) {
  9887  002F7E  51D0               	movf	reserve_direntry@c& (0+255),w,b
  9888  002F80  B4D8               	btfsc	status,2,c
  9889  002F82  D004               	goto	u12660
  9890                           
  9891                           ; BSR set to: 0
  9892  002F84  0EE5               	movlw	229
  9893  002F86  19D0               	xorwf	reserve_direntry@c& (0+255),w,b
  9894  002F88  A4D8               	btfss	status,2,c
  9895  002F8A  D00A               	goto	l1086
  9896  002F8C                     u12660:
  9897                           
  9898                           ; BSR set to: 0
  9899                           ;tff.c: 593: *dir = dptr; return FR_OK;
  9900                           
  9901                           ; BSR set to: 0
  9902  002F8C  C0C5  FFD9         	movff	reserve_direntry@dir,fsr2l
  9903  002F90  C0C6  FFDA         	movff	reserve_direntry@dir+1,fsr2h
  9904  002F94  C0CE  FFDE         	movff	reserve_direntry@dptr,postinc2
  9905  002F98  C0CF  FFDD         	movff	reserve_direntry@dptr+1,postdec2
  9906                           
  9907                           ; BSR set to: 0
  9908  002F9C  0E00               	movlw	0
  9909                           
  9910                           ; BSR set to: 0
  9911  002F9E  0012               	return	
  9912  002FA0                     l1086:
  9913                           
  9914                           ; BSR set to: 0
  9915                           ;tff.c: 594: }
  9916                           ;tff.c: 595: } while (next_dir_entry(dj));
  9917                           
  9918                           ; BSR set to: 0
  9919  002FA0  C0C3  F0B2         	movff	reserve_direntry@dj,next_dir_entry@dj
  9920  002FA4  C0C4  F0B3         	movff	reserve_direntry@dj+1,next_dir_entry@dj+1
  9921  002FA8  ECB4  F01E         	call	_next_dir_entry	;wreg free
  9922  002FAC  0900               	iorlw	0
  9923  002FAE  A4D8               	btfss	status,2,c
  9924  002FB0  D7AB               	goto	l1083
  9925                           
  9926                           ;tff.c: 599: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
  9927  002FB2  0100               	movlb	0	; () banked
  9928  002FB4  51D1               	movf	reserve_direntry@clust& (0+255),w,b
  9929  002FB6  11D2               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9930  002FB8  B4D8               	btfsc	status,2,c
  9931  002FBA  D015               	goto	u12690
  9932                           
  9933                           ; BSR set to: 0
  9934  002FBC  EE20 F008          	lfsr	2,8
  9935  002FC0  51C3               	movf	reserve_direntry@dj& (0+255),w,b
  9936  002FC2  26D9               	addwf	fsr2l,f,c
  9937  002FC4  51C4               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9938  002FC6  22DA               	addwfc	fsr2h,f,c
  9939  002FC8  CFDE F0B5          	movff	postinc2,create_chain@clust
  9940  002FCC  CFDD F0B6          	movff	postdec2,create_chain@clust+1
  9941  002FD0  ECF9  F01C         	call	_create_chain	;wreg free
  9942  002FD4  C0B5  F0D1         	movff	?_create_chain,reserve_direntry@clust
  9943  002FD8  C0B6  F0D2         	movff	?_create_chain+1,reserve_direntry@clust+1
  9944  002FDC  0100               	movlb	0	; () banked
  9945  002FDE  51D1               	movf	reserve_direntry@clust& (0+255),w,b
  9946  002FE0  11D2               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9947  002FE2  A4D8               	btfss	status,2,c
  9948  002FE4  D002               	goto	l1090
  9949  002FE6                     u12690:
  9950                           
  9951                           ; BSR set to: 0
  9952                           
  9953                           ; BSR set to: 0
  9954  002FE6  0E06               	movlw	6
  9955                           
  9956                           ; BSR set to: 0
  9957  002FE8  0012               	return	
  9958  002FEA                     l1090:
  9959                           
  9960                           ; BSR set to: 0
  9961                           ;tff.c: 600: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
  9962                           
  9963                           ; BSR set to: 0
  9964  002FEA  05D1               	decf	reserve_direntry@clust& (0+255),w,b
  9965  002FEC  11D2               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9966  002FEE  B4D8               	btfsc	status,2,c
  9967  002FF0  D00D               	goto	u12710
  9968                           
  9969                           ; BSR set to: 0
  9970  002FF2  0E00               	movlw	0
  9971  002FF4  6F8A               	movwf	move_window@sector& (0+255),b
  9972  002FF6  0E00               	movlw	0
  9973  002FF8  6F8B               	movwf	(move_window@sector+1)& (0+255),b
  9974  002FFA  0E00               	movlw	0
  9975  002FFC  6F8C               	movwf	(move_window@sector+2)& (0+255),b
  9976  002FFE  0E00               	movlw	0
  9977  003000  6F8D               	movwf	(move_window@sector+3)& (0+255),b
  9978  003002  ECD9  F01D         	call	_move_window	;wreg free
  9979  003006  0900               	iorlw	0
  9980  003008  A4D8               	btfss	status,2,c
  9981  00300A  D002               	goto	l1093
  9982  00300C                     u12710:
  9983  00300C  0E08               	movlw	8
  9984  00300E  0012               	return	
  9985  003010                     l1093:
  9986                           
  9987                           ;tff.c: 602: fs->winsect = sector = clust2sect(clust);
  9988  003010  C0D1  F06C         	movff	reserve_direntry@clust,clust2sect@clust
  9989  003014  C0D2  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
  9990  003018  EC23  F024         	call	_clust2sect	;wreg free
  9991  00301C  C06C  F0C9         	movff	?_clust2sect,reserve_direntry@sector
  9992  003020  C06D  F0CA         	movff	?_clust2sect+1,reserve_direntry@sector+1
  9993  003024  C06E  F0CB         	movff	?_clust2sect+2,reserve_direntry@sector+2
  9994  003028  C06F  F0CC         	movff	?_clust2sect+3,reserve_direntry@sector+3
  9995  00302C  0100               	movlb	0	; () banked
  9996  00302E  EE20 F004          	lfsr	2,4
  9997  003032  51D3               	movf	reserve_direntry@fs& (0+255),w,b
  9998  003034  26D9               	addwf	fsr2l,f,c
  9999  003036  51D4               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10000  003038  22DA               	addwfc	fsr2h,f,c
 10001  00303A  C0C9  FFDE         	movff	reserve_direntry@sector,postinc2
 10002  00303E  C0CA  FFDE         	movff	reserve_direntry@sector+1,postinc2
 10003  003042  C0CB  FFDE         	movff	reserve_direntry@sector+2,postinc2
 10004  003046  C0CC  FFDE         	movff	reserve_direntry@sector+3,postinc2
 10005                           
 10006                           ;tff.c: 603: memset(fs->win, 0, 512U);
 10007  00304A  0E20               	movlw	32
 10008  00304C  25D3               	addwf	reserve_direntry@fs& (0+255),w,b
 10009  00304E  6F60               	movwf	memset@p1& (0+255),b
 10010  003050  0E00               	movlw	0
 10011  003052  21D4               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 10012  003054  6F61               	movwf	(memset@p1+1)& (0+255),b
 10013  003056  0E00               	movlw	0
 10014  003058  6F63               	movwf	(memset@c+1)& (0+255),b
 10015  00305A  0E00               	movlw	0
 10016  00305C  6F62               	movwf	memset@c& (0+255),b
 10017  00305E  0E02               	movlw	2
 10018  003060  6F65               	movwf	(memset@n+1)& (0+255),b
 10019  003062  0E00               	movlw	0
 10020  003064  6F64               	movwf	memset@n& (0+255),b
 10021  003066  EC27  F02D         	call	_memset	;wreg free
 10022                           
 10023                           ;tff.c: 604: for (n = fs->csize; n; n--) {
 10024  00306A  0100               	movlb	0	; () banked
 10025  00306C  EE20 F01D          	lfsr	2,29
 10026  003070  51D3               	movf	reserve_direntry@fs& (0+255),w,b
 10027  003072  26D9               	addwf	fsr2l,f,c
 10028  003074  51D4               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10029  003076  22DA               	addwfc	fsr2h,f,c
 10030  003078  50DF               	movf	indf2,w,c
 10031  00307A  6FCD               	movwf	reserve_direntry@n& (0+255),b
 10032  00307C  D020               	goto	l1096
 10033  00307E                     
 10034                           ; BSR set to: 0
 10035                           ;tff.c: 605: if (disk_write(0, fs->win, sector, 1) != RES_OK)
 10036                           
 10037                           ; BSR set to: 0
 10038  00307E  0E20               	movlw	32
 10039  003080  25D3               	addwf	reserve_direntry@fs& (0+255),w,b
 10040  003082  6F7F               	movwf	disk_write@buff& (0+255),b
 10041  003084  0E00               	movlw	0
 10042  003086  21D4               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 10043  003088  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 10044  00308A  C0C9  F081         	movff	reserve_direntry@sector,disk_write@sector
 10045  00308E  C0CA  F082         	movff	reserve_direntry@sector+1,disk_write@sector+1
 10046  003092  C0CB  F083         	movff	reserve_direntry@sector+2,disk_write@sector+2
 10047  003096  C0CC  F084         	movff	reserve_direntry@sector+3,disk_write@sector+3
 10048  00309A  0E01               	movlw	1
 10049  00309C  6F85               	movwf	disk_write@count& (0+255),b
 10050  00309E  0E00               	movlw	0
 10051  0030A0  EC26  F028         	call	_disk_write
 10052  0030A4  0900               	iorlw	0
 10053  0030A6  B4D8               	btfsc	status,2,c
 10054  0030A8  D002               	goto	l1098
 10055                           
 10056                           ;tff.c: 606: return FR_RW_ERROR;
 10057  0030AA  0E08               	movlw	8
 10058  0030AC  0012               	return	
 10059  0030AE                     l1098:
 10060                           
 10061                           ;tff.c: 607: sector++;
 10062  0030AE  0E01               	movlw	1
 10063  0030B0  0100               	movlb	0	; () banked
 10064  0030B2  27C9               	addwf	reserve_direntry@sector& (0+255),f,b
 10065  0030B4  0E00               	movlw	0
 10066  0030B6  23CA               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
 10067  0030B8  23CB               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
 10068  0030BA  23CC               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
 10069                           
 10070                           ; BSR set to: 0
 10071  0030BC  07CD               	decf	reserve_direntry@n& (0+255),f,b
 10072  0030BE                     l1096:
 10073                           
 10074                           ; BSR set to: 0
 10075                           
 10076                           ; BSR set to: 0
 10077  0030BE  51CD               	movf	reserve_direntry@n& (0+255),w,b
 10078  0030C0  A4D8               	btfss	status,2,c
 10079  0030C2  D7DD               	goto	l1097
 10080                           
 10081                           ; BSR set to: 0
 10082                           ;tff.c: 608: }
 10083                           ;tff.c: 609: fs->winflag = 1;
 10084                           
 10085                           ; BSR set to: 0
 10086  0030C4  EE20 F01F          	lfsr	2,31
 10087  0030C8  51D3               	movf	reserve_direntry@fs& (0+255),w,b
 10088  0030CA  26D9               	addwf	fsr2l,f,c
 10089  0030CC  51D4               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10090  0030CE  22DA               	addwfc	fsr2h,f,c
 10091  0030D0  0E01               	movlw	1
 10092  0030D2  6EDF               	movwf	indf2,c
 10093                           
 10094                           ;tff.c: 610: *dir = fs->win;
 10095  0030D4  0E20               	movlw	32
 10096  0030D6  25D3               	addwf	reserve_direntry@fs& (0+255),w,b
 10097  0030D8  6FC7               	movwf	??_reserve_direntry& (0+255),b
 10098  0030DA  0E00               	movlw	0
 10099  0030DC  21D4               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 10100  0030DE  6FC8               	movwf	(??_reserve_direntry+1)& (0+255),b
 10101  0030E0  C0C5  FFD9         	movff	reserve_direntry@dir,fsr2l
 10102  0030E4  C0C6  FFDA         	movff	reserve_direntry@dir+1,fsr2h
 10103  0030E8  C0C7  FFDE         	movff	??_reserve_direntry,postinc2
 10104  0030EC  C0C8  FFDD         	movff	??_reserve_direntry+1,postdec2
 10105                           
 10106                           ; BSR set to: 0
 10107                           ;tff.c: 611: return FR_OK;
 10108  0030F0  0E00               	movlw	0
 10109  0030F2  0012               	return	
 10110  0030F4                     __end_of_reserve_direntry:
 10111                           	opt stack 0
 10112                           tosu	equ	0xFFF
 10113                           tosh	equ	0xFFE
 10114                           tosl	equ	0xFFD
 10115                           pclath	equ	0xFFA
 10116                           tblptru	equ	0xFF8
 10117                           tblptrh	equ	0xFF7
 10118                           tblptrl	equ	0xFF6
 10119                           tablat	equ	0xFF5
 10120                           prodh	equ	0xFF4
 10121                           prodl	equ	0xFF3
 10122                           intcon	equ	0xFF2
 10123                           intcon2	equ	0xFF1
 10124                           intcon3	equ	0xFF0
 10125                           indf0	equ	0xFEF
 10126                           postinc0	equ	0xFEE
 10127                           fsr0h	equ	0xFEA
 10128                           fsr0l	equ	0xFE9
 10129                           wreg	equ	0xFE8
 10130                           indf1	equ	0xFE7
 10131                           postinc1	equ	0xFE6
 10132                           postdec1	equ	0xFE5
 10133                           plusw1	equ	0xFE3
 10134                           fsr1h	equ	0xFE2
 10135                           fsr1l	equ	0xFE1
 10136                           indf2	equ	0xFDF
 10137                           postinc2	equ	0xFDE
 10138                           postdec2	equ	0xFDD
 10139                           plusw2	equ	0xFDB
 10140                           fsr2h	equ	0xFDA
 10141                           fsr2l	equ	0xFD9
 10142                           status	equ	0xFD8
 10143                           
 10144 ;; *************** function _next_dir_entry *****************
 10145 ;; Defined at:
 10146 ;;		line 358 in file "bibliotecas/tff.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;  dj              2   82[BANK0 ] PTR struct _DIR_E
 10149 ;;		 -> f_open@dj(14), 
 10150 ;; Auto vars:     Size  Location     Type
 10151 ;;  idx             2   93[BANK0 ] unsigned short 
 10152 ;;  clust           2   91[BANK0 ] unsigned short 
 10153 ;; Return value:  Size  Location     Type
 10154 ;;                  1    wreg      enum E105
 10155 ;; Registers used:
 10156 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10157 ;; Tracked objects:
 10158 ;;		On entry : 0/0
 10159 ;;		On exit  : 0/0
 10160 ;;		Unchanged: 0/0
 10161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10162 ;;      Params:         0       2       0       0       0       0       0       0       0
 10163 ;;      Locals:         0       4       0       0       0       0       0       0       0
 10164 ;;      Temps:          0       7       0       0       0       0       0       0       0
 10165 ;;      Totals:         0      13       0       0       0       0       0       0       0
 10166 ;;Total ram usage:       13 bytes
 10167 ;; Hardware stack levels used:    1
 10168 ;; Hardware stack levels required when called:   10
 10169 ;; This function calls:
 10170 ;;		_clust2sect
 10171 ;;		_get_cluster
 10172 ;; This function is called by:
 10173 ;;		_trace_path
 10174 ;;		_reserve_direntry
 10175 ;;		_f_readdir
 10176 ;; This function uses a non-reentrant model
 10177 ;;
 10178                           
 10179                           	psect	text31
 10180  003D68                     __ptext31:
 10181                           	opt stack 0
 10182  003D68                     _next_dir_entry:
 10183                           	opt stack 15
 10184                           
 10185                           ;tff.c: 362: CLUST clust;
 10186                           ;tff.c: 363: WORD idx;
 10187                           ;tff.c: 366: idx = dj->index + 1;
 10188                           
 10189                           ;incstack = 0
 10190  003D68  0100               	movlb	0	; () banked
 10191  003D6A  EE20 F002          	lfsr	2,2
 10192  003D6E  51B2               	movf	next_dir_entry@dj& (0+255),w,b
 10193  003D70  26D9               	addwf	fsr2l,f,c
 10194  003D72  51B3               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10195  003D74  22DA               	addwfc	fsr2h,f,c
 10196  003D76  CFDE F0B4          	movff	postinc2,??_next_dir_entry
 10197  003D7A  CFDD F0B5          	movff	postdec2,??_next_dir_entry+1
 10198  003D7E  0E01               	movlw	1
 10199  003D80  25B4               	addwf	??_next_dir_entry& (0+255),w,b
 10200  003D82  6FBD               	movwf	next_dir_entry@idx& (0+255),b
 10201  003D84  0E00               	movlw	0
 10202  003D86  21B5               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
 10203  003D88  6FBE               	movwf	(next_dir_entry@idx+1)& (0+255),b
 10204                           
 10205                           ; BSR set to: 0
 10206                           ;tff.c: 367: if ((idx & 15) == 0) {
 10207  003D8A  0E0F               	movlw	15
 10208  003D8C  15BD               	andwf	next_dir_entry@idx& (0+255),w,b
 10209  003D8E  6FB4               	movwf	??_next_dir_entry& (0+255),b
 10210  003D90  0E00               	movlw	0
 10211  003D92  15BE               	andwf	(next_dir_entry@idx+1)& (0+255),w,b
 10212  003D94  6FB5               	movwf	(??_next_dir_entry+1)& (0+255),b
 10213  003D96  51B4               	movf	??_next_dir_entry& (0+255),w,b
 10214  003D98  11B5               	iorwf	(??_next_dir_entry+1)& (0+255),w,b
 10215  003D9A  A4D8               	btfss	status,2,c
 10216  003D9C  D09D               	goto	l988
 10217                           
 10218                           ; BSR set to: 0
 10219                           ;tff.c: 368: dj->sect++;
 10220  003D9E  EE20 F00A          	lfsr	2,10
 10221  003DA2  51B2               	movf	next_dir_entry@dj& (0+255),w,b
 10222  003DA4  26D9               	addwf	fsr2l,f,c
 10223  003DA6  51B3               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10224  003DA8  22DA               	addwfc	fsr2h,f,c
 10225  003DAA  2ADE               	incf	postinc2,f,c
 10226  003DAC  0E00               	movlw	0
 10227  003DAE  22DE               	addwfc	postinc2,f,c
 10228  003DB0  22DE               	addwfc	postinc2,f,c
 10229  003DB2  22DE               	addwfc	postinc2,f,c
 10230                           
 10231                           ;tff.c: 369: if (dj->clust == 0) {
 10232  003DB4  EE20 F008          	lfsr	2,8
 10233  003DB8  51B2               	movf	next_dir_entry@dj& (0+255),w,b
 10234  003DBA  26D9               	addwf	fsr2l,f,c
 10235  003DBC  51B3               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10236  003DBE  22DA               	addwfc	fsr2h,f,c
 10237  003DC0  50DE               	movf	postinc2,w,c
 10238  003DC2  10DE               	iorwf	postinc2,w,c
 10239  003DC4  A4D8               	btfss	status,2,c
 10240  003DC6  D014               	goto	l984
 10241                           
 10242                           ; BSR set to: 0
 10243                           ;tff.c: 370: if (idx >= dj->fs->n_rootdir) return FALSE;
 10244  003DC8  EE20 F004          	lfsr	2,4
 10245  003DCC  51B2               	movf	next_dir_entry@dj& (0+255),w,b
 10246  003DCE  26D9               	addwf	fsr2l,f,c
 10247  003DD0  51B3               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10248  003DD2  22DA               	addwfc	fsr2h,f,c
 10249  003DD4  EE10 F002          	lfsr	1,2
 10250  003DD8  50DE               	movf	postinc2,w,c
 10251  003DDA  26E1               	addwf	fsr1l,f,c
 10252  003DDC  50DD               	movf	postdec2,w,c
 10253  003DDE  22E2               	addwfc	fsr1h,f,c
 10254  003DE0  50E6               	movf	postinc1,w,c
 10255  003DE2  5DBD               	subwf	next_dir_entry@idx& (0+255),w,b
 10256  003DE4  50E6               	movf	postinc1,w,c
 10257  003DE6  59BE               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
 10258  003DE8  A0D8               	btfss	status,0,c
 10259  003DEA  D076               	goto	l988
 10260                           
 10261                           ; BSR set to: 0
 10262  003DEC  0E00               	movlw	0
 10263                           
 10264                           ; BSR set to: 0
 10265  003DEE  0012               	return	
 10266  003DF0                     l984:
 10267                           
 10268                           ; BSR set to: 0
 10269                           ;tff.c: 372: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
 10270                           
 10271                           ; BSR set to: 0
 10272  003DF0  C0BD  F0B4         	movff	next_dir_entry@idx,??_next_dir_entry
 10273  003DF4  C0BE  F0B5         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
 10274  003DF8  0E04               	movlw	4
 10275  003DFA  6FB6               	movwf	(??_next_dir_entry+2)& (0+255),b
 10276  003DFC                     u11775:
 10277  003DFC  90D8               	bcf	status,0,c
 10278  003DFE  33B5               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
 10279  003E00  33B4               	rrcf	??_next_dir_entry& (0+255),f,b
 10280  003E02  2FB6               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
 10281  003E04  D7FB               	goto	u11775
 10282  003E06  0EFF               	movlw	255
 10283  003E08  6FB7               	movwf	(??_next_dir_entry+3)& (0+255),b
 10284  003E0A  0EFF               	movlw	255
 10285  003E0C  6FB8               	movwf	(??_next_dir_entry+4)& (0+255),b
 10286  003E0E  EE20 F004          	lfsr	2,4
 10287  003E12  51B2               	movf	next_dir_entry@dj& (0+255),w,b
 10288  003E14  26D9               	addwf	fsr2l,f,c
 10289  003E16  51B3               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10290  003E18  22DA               	addwfc	fsr2h,f,c
 10291  003E1A  EE10 F01D          	lfsr	1,29
 10292  003E1E  50DE               	movf	postinc2,w,c
 10293  003E20  26E1               	addwf	fsr1l,f,c
 10294  003E22  50DD               	movf	postdec2,w,c
 10295  003E24  22E2               	addwfc	fsr1h,f,c
 10296  003E26  50E7               	movf	indf1,w,c
 10297  003E28  6FB9               	movwf	(??_next_dir_entry+5)& (0+255),b
 10298  003E2A  6BBA               	clrf	(??_next_dir_entry+6)& (0+255),b
 10299  003E2C  51B7               	movf	(??_next_dir_entry+3)& (0+255),w,b
 10300  003E2E  27B9               	addwf	(??_next_dir_entry+5)& (0+255),f,b
 10301  003E30  51B8               	movf	(??_next_dir_entry+4)& (0+255),w,b
 10302  003E32  23BA               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
 10303  003E34  51B4               	movf	??_next_dir_entry& (0+255),w,b
 10304  003E36  17B9               	andwf	(??_next_dir_entry+5)& (0+255),f,b
 10305  003E38  51B5               	movf	(??_next_dir_entry+1)& (0+255),w,b
 10306  003E3A  17BA               	andwf	(??_next_dir_entry+6)& (0+255),f,b
 10307  003E3C  51B9               	movf	(??_next_dir_entry+5)& (0+255),w,b
 10308  003E3E  11BA               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
 10309  003E40  A4D8               	btfss	status,2,c
 10310  003E42  D04A               	goto	l988
 10311                           
 10312                           ; BSR set to: 0
 10313                           ;tff.c: 373: clust = get_cluster(dj->clust);
 10314  003E44  EE20 F008          	lfsr	2,8
 10315  003E48  51B2               	movf	next_dir_entry@dj& (0+255),w,b
 10316  003E4A  26D9               	addwf	fsr2l,f,c
 10317  003E4C  51B3               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10318  003E4E  22DA               	addwfc	fsr2h,f,c
 10319  003E50  CFDE F09F          	movff	postinc2,get_cluster@clust
 10320  003E54  CFDD F0A0          	movff	postdec2,get_cluster@clust+1
 10321  003E58  EC03  F01B         	call	_get_cluster	;wreg free
 10322  003E5C  C09F  F0BB         	movff	?_get_cluster,next_dir_entry@clust
 10323  003E60  C0A0  F0BC         	movff	?_get_cluster+1,next_dir_entry@clust+1
 10324                           
 10325                           ;tff.c: 374: if (clust < 2 || clust >= dj->fs->max_clust)
 10326  003E64  0100               	movlb	0	; () banked
 10327  003E66  51BC               	movf	(next_dir_entry@clust+1)& (0+255),w,b
 10328  003E68  E104               	bnz	u11790
 10329  003E6A  0E02               	movlw	2
 10330  003E6C  5DBB               	subwf	next_dir_entry@clust& (0+255),w,b
 10331  003E6E  A0D8               	btfss	status,0,c
 10332  003E70  D012               	goto	u11800
 10333  003E72                     u11790:
 10334                           
 10335                           ; BSR set to: 0
 10336  003E72  EE20 F004          	lfsr	2,4
 10337  003E76  51B2               	movf	next_dir_entry@dj& (0+255),w,b
 10338  003E78  26D9               	addwf	fsr2l,f,c
 10339  003E7A  51B3               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10340  003E7C  22DA               	addwfc	fsr2h,f,c
 10341  003E7E  EE10 F016          	lfsr	1,22
 10342  003E82  50DE               	movf	postinc2,w,c
 10343  003E84  26E1               	addwf	fsr1l,f,c
 10344  003E86  50DD               	movf	postdec2,w,c
 10345  003E88  22E2               	addwfc	fsr1h,f,c
 10346  003E8A  50E6               	movf	postinc1,w,c
 10347  003E8C  5DBB               	subwf	next_dir_entry@clust& (0+255),w,b
 10348  003E8E  50E6               	movf	postinc1,w,c
 10349  003E90  59BC               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
 10350  003E92  A0D8               	btfss	status,0,c
 10351  003E94  D002               	goto	l989
 10352  003E96                     u11800:
 10353                           
 10354                           ; BSR set to: 0
 10355                           ;tff.c: 375: return FALSE;
 10356                           
 10357                           ; BSR set to: 0
 10358  003E96  0E00               	movlw	0
 10359                           
 10360                           ; BSR set to: 0
 10361  003E98  0012               	return	
 10362  003E9A                     l989:
 10363                           
 10364                           ; BSR set to: 0
 10365                           ;tff.c: 376: dj->clust = clust;
 10366                           
 10367                           ; BSR set to: 0
 10368  003E9A  EE20 F008          	lfsr	2,8
 10369  003E9E  51B2               	movf	next_dir_entry@dj& (0+255),w,b
 10370  003EA0  26D9               	addwf	fsr2l,f,c
 10371  003EA2  51B3               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10372  003EA4  22DA               	addwfc	fsr2h,f,c
 10373  003EA6  C0BB  FFDE         	movff	next_dir_entry@clust,postinc2
 10374  003EAA  C0BC  FFDD         	movff	next_dir_entry@clust+1,postdec2
 10375                           
 10376                           ; BSR set to: 0
 10377                           ;tff.c: 377: dj->sect = clust2sect(clust);
 10378  003EAE  C0BB  F06C         	movff	next_dir_entry@clust,clust2sect@clust
 10379  003EB2  C0BC  F06D         	movff	next_dir_entry@clust+1,clust2sect@clust+1
 10380  003EB6  EC23  F024         	call	_clust2sect	;wreg free
 10381  003EBA  0100               	movlb	0	; () banked
 10382  003EBC  EE20 F00A          	lfsr	2,10
 10383  003EC0  51B2               	movf	next_dir_entry@dj& (0+255),w,b
 10384  003EC2  26D9               	addwf	fsr2l,f,c
 10385  003EC4  51B3               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10386  003EC6  22DA               	addwfc	fsr2h,f,c
 10387  003EC8  C06C  FFDE         	movff	?_clust2sect,postinc2
 10388  003ECC  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 10389  003ED0  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 10390  003ED4  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 10391  003ED8                     l988:
 10392                           
 10393                           ; BSR set to: 0
 10394                           ;tff.c: 378: }
 10395                           ;tff.c: 379: }
 10396                           ;tff.c: 380: }
 10397                           ;tff.c: 381: dj->index = idx;
 10398                           
 10399                           ; BSR set to: 0
 10400                           
 10401                           ; BSR set to: 0
 10402                           
 10403                           ; BSR set to: 0
 10404  003ED8  EE20 F002          	lfsr	2,2
 10405  003EDC  51B2               	movf	next_dir_entry@dj& (0+255),w,b
 10406  003EDE  26D9               	addwf	fsr2l,f,c
 10407  003EE0  51B3               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10408  003EE2  22DA               	addwfc	fsr2h,f,c
 10409  003EE4  C0BD  FFDE         	movff	next_dir_entry@idx,postinc2
 10410  003EE8  C0BE  FFDD         	movff	next_dir_entry@idx+1,postdec2
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;tff.c: 382: return TRUE;
 10414  003EEC  0E01               	movlw	1
 10415  003EEE  0012               	return	
 10416  003EF0                     __end_of_next_dir_entry:
 10417                           	opt stack 0
 10418                           tosu	equ	0xFFF
 10419                           tosh	equ	0xFFE
 10420                           tosl	equ	0xFFD
 10421                           pclath	equ	0xFFA
 10422                           tblptru	equ	0xFF8
 10423                           tblptrh	equ	0xFF7
 10424                           tblptrl	equ	0xFF6
 10425                           tablat	equ	0xFF5
 10426                           prodh	equ	0xFF4
 10427                           prodl	equ	0xFF3
 10428                           intcon	equ	0xFF2
 10429                           intcon2	equ	0xFF1
 10430                           intcon3	equ	0xFF0
 10431                           indf0	equ	0xFEF
 10432                           postinc0	equ	0xFEE
 10433                           fsr0h	equ	0xFEA
 10434                           fsr0l	equ	0xFE9
 10435                           wreg	equ	0xFE8
 10436                           indf1	equ	0xFE7
 10437                           postinc1	equ	0xFE6
 10438                           postdec1	equ	0xFE5
 10439                           plusw1	equ	0xFE3
 10440                           fsr1h	equ	0xFE2
 10441                           fsr1l	equ	0xFE1
 10442                           indf2	equ	0xFDF
 10443                           postinc2	equ	0xFDE
 10444                           postdec2	equ	0xFDD
 10445                           plusw2	equ	0xFDB
 10446                           fsr2h	equ	0xFDA
 10447                           fsr2l	equ	0xFD9
 10448                           status	equ	0xFD8
 10449                           
 10450 ;; *************** function _clust2sect *****************
 10451 ;; Defined at:
 10452 ;;		line 338 in file "bibliotecas/tff.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;  clust           2   12[BANK0 ] unsigned short 
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;  fs              2   32[COMRAM] PTR struct _FATFS
 10457 ;;		 -> NULL(0), fs(544), 
 10458 ;; Return value:  Size  Location     Type
 10459 ;;                  4   12[BANK0 ] unsigned long 
 10460 ;; Registers used:
 10461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10462 ;; Tracked objects:
 10463 ;;		On entry : 0/0
 10464 ;;		On exit  : 0/0
 10465 ;;		Unchanged: 0/0
 10466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10467 ;;      Params:         0       4       0       0       0       0       0       0       0
 10468 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10469 ;;      Temps:          0       5       0       0       0       0       0       0       0
 10470 ;;      Totals:         2       9       0       0       0       0       0       0       0
 10471 ;;Total ram usage:       11 bytes
 10472 ;; Hardware stack levels used:    1
 10473 ;; Hardware stack levels required when called:    4
 10474 ;; This function calls:
 10475 ;;		___lmul
 10476 ;; This function is called by:
 10477 ;;		_next_dir_entry
 10478 ;;		_trace_path
 10479 ;;		_reserve_direntry
 10480 ;;		_f_read
 10481 ;;		_f_write
 10482 ;;		_f_opendir
 10483 ;; This function uses a non-reentrant model
 10484 ;;
 10485                           
 10486                           	psect	text32
 10487  004846                     __ptext32:
 10488                           	opt stack 0
 10489  004846                     _clust2sect:
 10490                           	opt stack 22
 10491                           
 10492                           ;tff.c: 342: FATFS *fs = FatFs;
 10493                           
 10494                           ; BSR set to: 0
 10495                           ;incstack = 0
 10496  004846  C0FC  F021         	movff	_FatFs,clust2sect@fs
 10497  00484A  C0FD  F022         	movff	_FatFs+1,clust2sect@fs+1
 10498                           
 10499                           ;tff.c: 345: clust -= 2;
 10500  00484E  0E02               	movlw	2
 10501  004850  0100               	movlb	0	; () banked
 10502  004852  5F6C               	subwf	clust2sect@clust& (0+255),f,b
 10503  004854  0E00               	movlw	0
 10504  004856  5B6D               	subwfb	(clust2sect@clust+1)& (0+255),f,b
 10505                           
 10506                           ; BSR set to: 0
 10507                           ;tff.c: 346: if (clust >= (fs->max_clust - 2)) return 0;
 10508  004858  0EFE               	movlw	254
 10509  00485A  6F70               	movwf	??_clust2sect& (0+255),b
 10510  00485C  0EFF               	movlw	255
 10511  00485E  6F71               	movwf	(??_clust2sect+1)& (0+255),b
 10512  004860  EE20 F016          	lfsr	2,22
 10513  004864  5021               	movf	clust2sect@fs,w,c
 10514  004866  26D9               	addwf	fsr2l,f,c
 10515  004868  5022               	movf	clust2sect@fs+1,w,c
 10516  00486A  22DA               	addwfc	fsr2h,f,c
 10517  00486C  CFDE F072          	movff	postinc2,??_clust2sect+2
 10518  004870  CFDD F073          	movff	postdec2,??_clust2sect+3
 10519  004874  5170               	movf	??_clust2sect& (0+255),w,b
 10520  004876  2772               	addwf	(??_clust2sect+2)& (0+255),f,b
 10521  004878  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 10522  00487A  2373               	addwfc	(??_clust2sect+3)& (0+255),f,b
 10523  00487C  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 10524  00487E  5D6C               	subwf	clust2sect@clust& (0+255),w,b
 10525  004880  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 10526  004882  596D               	subwfb	(clust2sect@clust+1)& (0+255),w,b
 10527  004884  A0D8               	btfss	status,0,c
 10528  004886  D009               	goto	l979
 10529                           
 10530                           ; BSR set to: 0
 10531  004888  0E00               	movlw	0
 10532  00488A  6F6C               	movwf	?_clust2sect& (0+255),b
 10533  00488C  0E00               	movlw	0
 10534  00488E  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 10535  004890  0E00               	movlw	0
 10536  004892  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 10537  004894  0E00               	movlw	0
 10538  004896  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 10539                           
 10540                           ; BSR set to: 0
 10541  004898  0012               	return	
 10542  00489A                     l979:
 10543                           
 10544                           ; BSR set to: 0
 10545                           ;tff.c: 347: return (DWORD)clust * fs->csize + fs->database;
 10546                           
 10547                           ; BSR set to: 0
 10548  00489A  EE20 F010          	lfsr	2,16
 10549  00489E  5021               	movf	clust2sect@fs,w,c
 10550  0048A0  26D9               	addwf	fsr2l,f,c
 10551  0048A2  5022               	movf	clust2sect@fs+1,w,c
 10552  0048A4  22DA               	addwfc	fsr2h,f,c
 10553  0048A6  CFDE F070          	movff	postinc2,??_clust2sect
 10554  0048AA  CFDE F071          	movff	postinc2,??_clust2sect+1
 10555  0048AE  CFDE F072          	movff	postinc2,??_clust2sect+2
 10556  0048B2  CFDE F073          	movff	postinc2,??_clust2sect+3
 10557  0048B6  C06C  F060         	movff	clust2sect@clust,___lmul@multiplier
 10558  0048BA  C06D  F061         	movff	clust2sect@clust+1,___lmul@multiplier+1
 10559  0048BE  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
 10560  0048C0  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
 10561  0048C2  EE20 F01D          	lfsr	2,29
 10562  0048C6  5021               	movf	clust2sect@fs,w,c
 10563  0048C8  26D9               	addwf	fsr2l,f,c
 10564  0048CA  5022               	movf	clust2sect@fs+1,w,c
 10565  0048CC  22DA               	addwfc	fsr2h,f,c
 10566  0048CE  50DF               	movf	indf2,w,c
 10567  0048D0  6F74               	movwf	(??_clust2sect+4)& (0+255),b
 10568  0048D2  5174               	movf	(??_clust2sect+4)& (0+255),w,b
 10569  0048D4  6F64               	movwf	___lmul@multiplicand& (0+255),b
 10570  0048D6  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 10571  0048D8  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 10572  0048DA  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 10573  0048DC  EC32  F02A         	call	___lmul	;wreg free
 10574  0048E0  0100               	movlb	0	; () banked
 10575  0048E2  5170               	movf	??_clust2sect& (0+255),w,b
 10576  0048E4  2560               	addwf	?___lmul& (0+255),w,b
 10577  0048E6  6F6C               	movwf	?_clust2sect& (0+255),b
 10578  0048E8  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 10579  0048EA  2161               	addwfc	(?___lmul+1)& (0+255),w,b
 10580  0048EC  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 10581  0048EE  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 10582  0048F0  2162               	addwfc	(?___lmul+2)& (0+255),w,b
 10583  0048F2  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 10584  0048F4  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 10585  0048F6  2163               	addwfc	(?___lmul+3)& (0+255),w,b
 10586  0048F8  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 10587  0048FA  0012               	return	
 10588  0048FC                     __end_of_clust2sect:
 10589                           	opt stack 0
 10590                           tosu	equ	0xFFF
 10591                           tosh	equ	0xFFE
 10592                           tosl	equ	0xFFD
 10593                           pclath	equ	0xFFA
 10594                           tblptru	equ	0xFF8
 10595                           tblptrh	equ	0xFF7
 10596                           tblptrl	equ	0xFF6
 10597                           tablat	equ	0xFF5
 10598                           prodh	equ	0xFF4
 10599                           prodl	equ	0xFF3
 10600                           intcon	equ	0xFF2
 10601                           intcon2	equ	0xFF1
 10602                           intcon3	equ	0xFF0
 10603                           indf0	equ	0xFEF
 10604                           postinc0	equ	0xFEE
 10605                           fsr0h	equ	0xFEA
 10606                           fsr0l	equ	0xFE9
 10607                           wreg	equ	0xFE8
 10608                           indf1	equ	0xFE7
 10609                           postinc1	equ	0xFE6
 10610                           postdec1	equ	0xFE5
 10611                           plusw1	equ	0xFE3
 10612                           fsr1h	equ	0xFE2
 10613                           fsr1l	equ	0xFE1
 10614                           indf2	equ	0xFDF
 10615                           postinc2	equ	0xFDE
 10616                           postdec2	equ	0xFDD
 10617                           plusw2	equ	0xFDB
 10618                           fsr2h	equ	0xFDA
 10619                           fsr2l	equ	0xFD9
 10620                           status	equ	0xFD8
 10621                           
 10622 ;; *************** function _remove_chain *****************
 10623 ;; Defined at:
 10624 ;;		line 249 in file "bibliotecas/tff.c"
 10625 ;; Parameters:    Size  Location     Type
 10626 ;;  clust           2   85[BANK0 ] unsigned short 
 10627 ;; Auto vars:     Size  Location     Type
 10628 ;;  fs              2   91[BANK0 ] PTR struct _FATFS
 10629 ;;		 -> NULL(0), fs(544), 
 10630 ;;  nxt             2   89[BANK0 ] unsigned short 
 10631 ;; Return value:  Size  Location     Type
 10632 ;;                  1    wreg      enum E105
 10633 ;; Registers used:
 10634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10635 ;; Tracked objects:
 10636 ;;		On entry : 0/0
 10637 ;;		On exit  : 0/0
 10638 ;;		Unchanged: 0/0
 10639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10640 ;;      Params:         0       2       0       0       0       0       0       0       0
 10641 ;;      Locals:         0       4       0       0       0       0       0       0       0
 10642 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10643 ;;      Totals:         0       8       0       0       0       0       0       0       0
 10644 ;;Total ram usage:        8 bytes
 10645 ;; Hardware stack levels used:    1
 10646 ;; Hardware stack levels required when called:   10
 10647 ;; This function calls:
 10648 ;;		_get_cluster
 10649 ;;		_put_cluster
 10650 ;; This function is called by:
 10651 ;;		_f_open
 10652 ;; This function uses a non-reentrant model
 10653 ;;
 10654                           
 10655                           	psect	text33
 10656  004A56                     __ptext33:
 10657                           	opt stack 0
 10658  004A56                     _remove_chain:
 10659                           	opt stack 16
 10660                           
 10661                           ;tff.c: 253: CLUST nxt;
 10662                           ;tff.c: 254: FATFS *fs = FatFs;
 10663                           
 10664                           ; BSR set to: 0
 10665                           ;incstack = 0
 10666  004A56  C0FC  F0BB         	movff	_FatFs,remove_chain@fs
 10667  004A5A  C0FD  F0BC         	movff	_FatFs+1,remove_chain@fs+1
 10668                           
 10669                           ;tff.c: 257: while (clust >= 2 && clust < fs->max_clust) {
 10670  004A5E  D039               	goto	l948
 10671  004A60                     
 10672                           ;tff.c: 258: nxt = get_cluster(clust);
 10673  004A60  C0B5  F09F         	movff	remove_chain@clust,get_cluster@clust
 10674  004A64  C0B6  F0A0         	movff	remove_chain@clust+1,get_cluster@clust+1
 10675  004A68  EC03  F01B         	call	_get_cluster	;wreg free
 10676  004A6C  C09F  F0B9         	movff	?_get_cluster,remove_chain@nxt
 10677  004A70  C0A0  F0BA         	movff	?_get_cluster+1,remove_chain@nxt+1
 10678                           
 10679                           ;tff.c: 259: if (nxt == 1) return FALSE;
 10680  004A74  0100               	movlb	0	; () banked
 10681  004A76  05B9               	decf	remove_chain@nxt& (0+255),w,b
 10682  004A78  11BA               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 10683  004A7A  A4D8               	btfss	status,2,c
 10684  004A7C  D002               	goto	l950
 10685                           
 10686                           ; BSR set to: 0
 10687  004A7E  0E00               	movlw	0
 10688                           
 10689                           ; BSR set to: 0
 10690  004A80  0012               	return	
 10691  004A82                     l950:
 10692                           
 10693                           ; BSR set to: 0
 10694                           ;tff.c: 260: if (!put_cluster(clust, 0)) return FALSE;
 10695                           
 10696                           ; BSR set to: 0
 10697  004A82  C0B5  F09F         	movff	remove_chain@clust,put_cluster@clust
 10698  004A86  C0B6  F0A0         	movff	remove_chain@clust+1,put_cluster@clust+1
 10699  004A8A  0E00               	movlw	0
 10700  004A8C  6FA2               	movwf	(put_cluster@val+1)& (0+255),b
 10701  004A8E  0E00               	movlw	0
 10702  004A90  6FA1               	movwf	put_cluster@val& (0+255),b
 10703  004A92  ECC6  F019         	call	_put_cluster	;wreg free
 10704  004A96  0900               	iorlw	0
 10705  004A98  A4D8               	btfss	status,2,c
 10706  004A9A  D002               	goto	l952
 10707  004A9C  0E00               	movlw	0
 10708  004A9E  0012               	return	
 10709  004AA0                     l952:
 10710                           
 10711                           ;tff.c: 261: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 10712  004AA0  0100               	movlb	0	; () banked
 10713  004AA2  EE20 F01A          	lfsr	2,26
 10714  004AA6  51BB               	movf	remove_chain@fs& (0+255),w,b
 10715  004AA8  26D9               	addwf	fsr2l,f,c
 10716  004AAA  51BC               	movf	(remove_chain@fs+1)& (0+255),w,b
 10717  004AAC  22DA               	addwfc	fsr2h,f,c
 10718  004AAE  28DE               	incf	postinc2,w,c
 10719  004AB0  E103               	bnz	u12450
 10720  004AB2  28DE               	incf	postinc2,w,c
 10721  004AB4  B4D8               	btfsc	status,2,c
 10722  004AB6  D009               	goto	l953
 10723  004AB8                     u12450:
 10724                           
 10725                           ; BSR set to: 0
 10726                           ;tff.c: 262: fs->free_clust++;
 10727  004AB8  EE20 F01A          	lfsr	2,26
 10728  004ABC  51BB               	movf	remove_chain@fs& (0+255),w,b
 10729  004ABE  26D9               	addwf	fsr2l,f,c
 10730  004AC0  51BC               	movf	(remove_chain@fs+1)& (0+255),w,b
 10731  004AC2  22DA               	addwfc	fsr2h,f,c
 10732  004AC4  2ADE               	incf	postinc2,f,c
 10733  004AC6  0E00               	movlw	0
 10734  004AC8  22DD               	addwfc	postdec2,f,c
 10735  004ACA                     l953:
 10736                           
 10737                           ; BSR set to: 0
 10738                           ;tff.c: 266: }
 10739                           ;tff.c: 267: clust = nxt;
 10740                           
 10741                           ; BSR set to: 0
 10742  004ACA  C0B9  F0B5         	movff	remove_chain@nxt,remove_chain@clust
 10743  004ACE  C0BA  F0B6         	movff	remove_chain@nxt+1,remove_chain@clust+1
 10744  004AD2                     l948:
 10745                           
 10746                           ; BSR set to: 0
 10747  004AD2  0100               	movlb	0	; () banked
 10748  004AD4  51B6               	movf	(remove_chain@clust+1)& (0+255),w,b
 10749  004AD6  E104               	bnz	u12460
 10750  004AD8  0E02               	movlw	2
 10751  004ADA  5DB5               	subwf	remove_chain@clust& (0+255),w,b
 10752  004ADC  A0D8               	btfss	status,0,c
 10753  004ADE  D00C               	goto	u12470
 10754  004AE0                     u12460:
 10755                           
 10756                           ; BSR set to: 0
 10757  004AE0  EE20 F016          	lfsr	2,22
 10758  004AE4  51BB               	movf	remove_chain@fs& (0+255),w,b
 10759  004AE6  26D9               	addwf	fsr2l,f,c
 10760  004AE8  51BC               	movf	(remove_chain@fs+1)& (0+255),w,b
 10761  004AEA  22DA               	addwfc	fsr2h,f,c
 10762  004AEC  50DE               	movf	postinc2,w,c
 10763  004AEE  5DB5               	subwf	remove_chain@clust& (0+255),w,b
 10764  004AF0  50DE               	movf	postinc2,w,c
 10765  004AF2  59B6               	subwfb	(remove_chain@clust+1)& (0+255),w,b
 10766  004AF4  A0D8               	btfss	status,0,c
 10767  004AF6  D7B4               	goto	l949
 10768  004AF8                     u12470:
 10769                           
 10770                           ; BSR set to: 0
 10771                           ;tff.c: 268: }
 10772                           ;tff.c: 269: return TRUE;
 10773                           
 10774                           ; BSR set to: 0
 10775                           
 10776                           ; BSR set to: 0
 10777  004AF8  0E01               	movlw	1
 10778  004AFA  0012               	return	
 10779  004AFC                     __end_of_remove_chain:
 10780                           	opt stack 0
 10781                           tosu	equ	0xFFF
 10782                           tosh	equ	0xFFE
 10783                           tosl	equ	0xFFD
 10784                           pclath	equ	0xFFA
 10785                           tblptru	equ	0xFF8
 10786                           tblptrh	equ	0xFF7
 10787                           tblptrl	equ	0xFF6
 10788                           tablat	equ	0xFF5
 10789                           prodh	equ	0xFF4
 10790                           prodl	equ	0xFF3
 10791                           intcon	equ	0xFF2
 10792                           intcon2	equ	0xFF1
 10793                           intcon3	equ	0xFF0
 10794                           indf0	equ	0xFEF
 10795                           postinc0	equ	0xFEE
 10796                           fsr0h	equ	0xFEA
 10797                           fsr0l	equ	0xFE9
 10798                           wreg	equ	0xFE8
 10799                           indf1	equ	0xFE7
 10800                           postinc1	equ	0xFE6
 10801                           postdec1	equ	0xFE5
 10802                           plusw1	equ	0xFE3
 10803                           fsr1h	equ	0xFE2
 10804                           fsr1l	equ	0xFE1
 10805                           indf2	equ	0xFDF
 10806                           postinc2	equ	0xFDE
 10807                           postdec2	equ	0xFDD
 10808                           plusw2	equ	0xFDB
 10809                           fsr2h	equ	0xFDA
 10810                           fsr2l	equ	0xFD9
 10811                           status	equ	0xFD8
 10812                           
 10813 ;; *************** function _memcpy *****************
 10814 ;; Defined at:
 10815 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
 10816 ;; Parameters:    Size  Location     Type
 10817 ;;  d1              2    0[BANK0 ] PTR void 
 10818 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 10819 ;;  s1              2    2[BANK0 ] PTR const void 
 10820 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 10821 ;;		 -> fs(544), 
 10822 ;;  n               2    4[BANK0 ] unsigned int 
 10823 ;; Auto vars:     Size  Location     Type
 10824 ;;  s               2    9[BANK0 ] PTR const unsigned char 
 10825 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 10826 ;;		 -> fs(544), 
 10827 ;;  d               2    7[BANK0 ] PTR unsigned char 
 10828 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 10829 ;;  tmp             1    6[BANK0 ] unsigned char 
 10830 ;; Return value:  Size  Location     Type
 10831 ;;                  2    0[BANK0 ] PTR void 
 10832 ;; Registers used:
 10833 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10834 ;; Tracked objects:
 10835 ;;		On entry : 0/0
 10836 ;;		On exit  : 0/0
 10837 ;;		Unchanged: 0/0
 10838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10839 ;;      Params:         0       6       0       0       0       0       0       0       0
 10840 ;;      Locals:         0       5       0       0       0       0       0       0       0
 10841 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10842 ;;      Totals:         0      11       0       0       0       0       0       0       0
 10843 ;;Total ram usage:       11 bytes
 10844 ;; Hardware stack levels used:    1
 10845 ;; Hardware stack levels required when called:    3
 10846 ;; This function calls:
 10847 ;;		Nothing
 10848 ;; This function is called by:
 10849 ;;		_f_open
 10850 ;;		_f_read
 10851 ;;		_f_write
 10852 ;; This function uses a non-reentrant model
 10853 ;;
 10854                           
 10855                           	psect	text34
 10856  005748                     __ptext34:
 10857                           	opt stack 0
 10858  005748                     _memcpy:
 10859                           	opt stack 23
 10860                           
 10861                           ;incstack = 0
 10862  005748  C062  F069         	movff	memcpy@s1,memcpy@s
 10863  00574C  C063  F06A         	movff	memcpy@s1+1,memcpy@s+1
 10864  005750  C060  F067         	movff	memcpy@d1,memcpy@d
 10865  005754  C061  F068         	movff	memcpy@d1+1,memcpy@d+1
 10866  005758  D011               	goto	l1835
 10867  00575A                     l9389:
 10868  00575A  C069  FFD9         	movff	memcpy@s,fsr2l
 10869  00575E  C06A  FFDA         	movff	memcpy@s+1,fsr2h
 10870  005762  50DF               	movf	indf2,w,c
 10871  005764  0100               	movlb	0	; () banked
 10872  005766  6F66               	movwf	memcpy@tmp& (0+255),b
 10873                           
 10874                           ; BSR set to: 0
 10875  005768  4B69               	infsnz	memcpy@s& (0+255),f,b
 10876  00576A  2B6A               	incf	(memcpy@s+1)& (0+255),f,b
 10877                           
 10878                           ; BSR set to: 0
 10879  00576C  C067  FFD9         	movff	memcpy@d,fsr2l
 10880  005770  C068  FFDA         	movff	memcpy@d+1,fsr2h
 10881  005774  C066  FFDF         	movff	memcpy@tmp,indf2
 10882                           
 10883                           ; BSR set to: 0
 10884  005778  4B67               	infsnz	memcpy@d& (0+255),f,b
 10885  00577A  2B68               	incf	(memcpy@d+1)& (0+255),f,b
 10886  00577C                     l1835:
 10887                           
 10888                           ; BSR set to: 0
 10889  00577C  0100               	movlb	0	; () banked
 10890  00577E  0764               	decf	memcpy@n& (0+255),f,b
 10891  005780  A0D8               	btfss	status,0,c
 10892  005782  0765               	decf	(memcpy@n+1)& (0+255),f,b
 10893  005784  2964               	incf	memcpy@n& (0+255),w,b
 10894  005786  E1E9               	bnz	l9389
 10895  005788  2965               	incf	(memcpy@n+1)& (0+255),w,b
 10896  00578A  B4D8               	btfsc	status,2,c
 10897  00578C  0012               	return	
 10898  00578E  D7E5               	goto	l1836
 10899  005790                     __end_of_memcpy:
 10900                           	opt stack 0
 10901                           tosu	equ	0xFFF
 10902                           tosh	equ	0xFFE
 10903                           tosl	equ	0xFFD
 10904                           pclath	equ	0xFFA
 10905                           tblptru	equ	0xFF8
 10906                           tblptrh	equ	0xFF7
 10907                           tblptrl	equ	0xFF6
 10908                           tablat	equ	0xFF5
 10909                           prodh	equ	0xFF4
 10910                           prodl	equ	0xFF3
 10911                           intcon	equ	0xFF2
 10912                           intcon2	equ	0xFF1
 10913                           intcon3	equ	0xFF0
 10914                           indf0	equ	0xFEF
 10915                           postinc0	equ	0xFEE
 10916                           fsr0h	equ	0xFEA
 10917                           fsr0l	equ	0xFE9
 10918                           wreg	equ	0xFE8
 10919                           indf1	equ	0xFE7
 10920                           postinc1	equ	0xFE6
 10921                           postdec1	equ	0xFE5
 10922                           plusw1	equ	0xFE3
 10923                           fsr1h	equ	0xFE2
 10924                           fsr1l	equ	0xFE1
 10925                           indf2	equ	0xFDF
 10926                           postinc2	equ	0xFDE
 10927                           postdec2	equ	0xFDD
 10928                           plusw2	equ	0xFDB
 10929                           fsr2h	equ	0xFDA
 10930                           fsr2l	equ	0xFD9
 10931                           status	equ	0xFD8
 10932                           
 10933 ;; *************** function _auto_mount *****************
 10934 ;; Defined at:
 10935 ;;		line 651 in file "bibliotecas/tff.c"
 10936 ;; Parameters:    Size  Location     Type
 10937 ;;  path            2   50[BANK0 ] PTR PTR const unsigned c
 10938 ;;		 -> f_opendir@path(2), f_open@path(2), 
 10939 ;;  chk_wp          1   52[BANK0 ] unsigned char 
 10940 ;; Auto vars:     Size  Location     Type
 10941 ;;  fatsize         4   84[BANK0 ] unsigned long 
 10942 ;;  totalsect       4   76[BANK0 ] unsigned long 
 10943 ;;  bootsect        4   72[BANK0 ] unsigned long 
 10944 ;;  maxclust        4   68[BANK0 ] unsigned long 
 10945 ;;  fs              2   88[BANK0 ] PTR struct _FATFS
 10946 ;;		 -> NULL(0), fs(544), 
 10947 ;;  p               2   80[BANK0 ] PTR const unsigned char 
 10948 ;;		 -> STR_10(13), filename(15), 
 10949 ;;  stat            1   83[BANK0 ] unsigned char 
 10950 ;;  fmt             1   82[BANK0 ] unsigned char 
 10951 ;; Return value:  Size  Location     Type
 10952 ;;                  1    wreg      enum E155
 10953 ;; Registers used:
 10954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10955 ;; Tracked objects:
 10956 ;;		On entry : 0/0
 10957 ;;		On exit  : 0/0
 10958 ;;		Unchanged: 0/0
 10959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10960 ;;      Params:         0       3       0       0       0       0       0       0       0
 10961 ;;      Locals:         0      22       0       0       0       0       0       0       0
 10962 ;;      Temps:          0      15       0       0       0       0       0       0       0
 10963 ;;      Totals:         0      40       0       0       0       0       0       0       0
 10964 ;;Total ram usage:       40 bytes
 10965 ;; Hardware stack levels used:    1
 10966 ;; Hardware stack levels required when called:    9
 10967 ;; This function calls:
 10968 ;;		___lldiv
 10969 ;;		___lmul
 10970 ;;		_check_fs
 10971 ;;		_disk_initialize
 10972 ;;		_disk_status
 10973 ;;		_memset
 10974 ;; This function is called by:
 10975 ;;		_f_open
 10976 ;;		_f_opendir
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980                           	psect	text35
 10981  000E88                     __ptext35:
 10982                           	opt stack 0
 10983  000E88                     _auto_mount:
 10984                           	opt stack 17
 10985                           
 10986                           ;tff.c: 656: BYTE fmt;
 10987                           ;tff.c: 657: DSTATUS stat;
 10988                           ;tff.c: 658: DWORD bootsect, fatsize, totalsect, maxclust;
 10989                           ;tff.c: 659: const char *p = *path;
 10990                           
 10991                           ; BSR set to: 0
 10992                           ;incstack = 0
 10993  000E88  C092  FFD9         	movff	auto_mount@path,fsr2l
 10994  000E8C  C093  FFDA         	movff	auto_mount@path+1,fsr2h
 10995  000E90  CFDE F0B0          	movff	postinc2,auto_mount@p
 10996  000E94  CFDD F0B1          	movff	postdec2,auto_mount@p+1
 10997                           
 10998                           ;tff.c: 660: FATFS *fs;
 10999                           ;tff.c: 663: while (*p == ' ') p++;
 11000  000E98  D003               	goto	l1108
 11001  000E9A  0100               	movlb	0	; () banked
 11002  000E9C  4BB0               	infsnz	auto_mount@p& (0+255),f,b
 11003  000E9E  2BB1               	incf	(auto_mount@p+1)& (0+255),f,b
 11004  000EA0                     l1108:
 11005                           
 11006                           ; BSR set to: 0
 11007  000EA0  C0B0  FFF6         	movff	auto_mount@p,tblptrl
 11008  000EA4  C0B1  FFF7         	movff	auto_mount@p+1,tblptrh
 11009  000EA8  6AF8               	clrf	tblptru,c
 11010  000EAA  0E07               	movlw	(high __ramtop+-1)
 11011  000EAC  64F7               	cpfsgt	tblptrh,c
 11012  000EAE  D003               	bra	u12747
 11013  000EB0  0008               	tblrd		*
 11014  000EB2  50F5               	movf	tablat,w,c
 11015  000EB4  D005               	bra	u12740
 11016  000EB6                     u12747:
 11017  000EB6  CFF6 FFE9          	movff	tblptrl,fsr0l
 11018  000EBA  CFF7 FFEA          	movff	tblptrh,fsr0h
 11019  000EBE  50EF               	movf	indf0,w,c
 11020  000EC0                     u12740:
 11021  000EC0  0A20               	xorlw	32
 11022  000EC2  B4D8               	btfsc	status,2,c
 11023  000EC4  D7EA               	goto	l1109
 11024                           
 11025                           ;tff.c: 664: if (*p == '/') p++;
 11026  000EC6  C0B0  FFF6         	movff	auto_mount@p,tblptrl
 11027  000ECA  C0B1  FFF7         	movff	auto_mount@p+1,tblptrh
 11028  000ECE  6AF8               	clrf	tblptru,c
 11029  000ED0  0E07               	movlw	(high __ramtop+-1)
 11030  000ED2  64F7               	cpfsgt	tblptrh,c
 11031  000ED4  D003               	bra	u12767
 11032  000ED6  0008               	tblrd		*
 11033  000ED8  50F5               	movf	tablat,w,c
 11034  000EDA  D005               	bra	u12760
 11035  000EDC                     u12767:
 11036  000EDC  CFF6 FFE9          	movff	tblptrl,fsr0l
 11037  000EE0  CFF7 FFEA          	movff	tblptrh,fsr0h
 11038  000EE4  50EF               	movf	indf0,w,c
 11039  000EE6                     u12760:
 11040  000EE6  0A2F               	xorlw	47
 11041  000EE8  A4D8               	btfss	status,2,c
 11042  000EEA  D003               	goto	l1111
 11043  000EEC  0100               	movlb	0	; () banked
 11044  000EEE  4BB0               	infsnz	auto_mount@p& (0+255),f,b
 11045  000EF0  2BB1               	incf	(auto_mount@p+1)& (0+255),f,b
 11046  000EF2                     l1111:
 11047                           
 11048                           ;tff.c: 665: *path = p;
 11049                           
 11050                           ; BSR set to: 0
 11051  000EF2  C092  FFD9         	movff	auto_mount@path,fsr2l
 11052  000EF6  C093  FFDA         	movff	auto_mount@path+1,fsr2h
 11053  000EFA  C0B0  FFDE         	movff	auto_mount@p,postinc2
 11054  000EFE  C0B1  FFDD         	movff	auto_mount@p+1,postdec2
 11055                           
 11056                           ;tff.c: 668: fs = FatFs;
 11057  000F02  C0FC  F0B8         	movff	_FatFs,auto_mount@fs
 11058  000F06  C0FD  F0B9         	movff	_FatFs+1,auto_mount@fs+1
 11059                           
 11060                           ;tff.c: 669: if (!fs) return FR_NOT_ENABLED;
 11061  000F0A  0100               	movlb	0	; () banked
 11062  000F0C  51B8               	movf	auto_mount@fs& (0+255),w,b
 11063  000F0E  11B9               	iorwf	(auto_mount@fs+1)& (0+255),w,b
 11064  000F10  A4D8               	btfss	status,2,c
 11065  000F12  D002               	goto	l1112
 11066                           
 11067                           ; BSR set to: 0
 11068  000F14  0E0A               	movlw	10
 11069                           
 11070                           ; BSR set to: 0
 11071  000F16  0012               	return	
 11072  000F18                     l1112:
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;tff.c: 671: if (fs->fs_type) {
 11076                           
 11077                           ; BSR set to: 0
 11078  000F18  EE20 F01C          	lfsr	2,28
 11079  000F1C  51B8               	movf	auto_mount@fs& (0+255),w,b
 11080  000F1E  26D9               	addwf	fsr2l,f,c
 11081  000F20  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11082  000F22  22DA               	addwfc	fsr2h,f,c
 11083  000F24  50DF               	movf	indf2,w,c
 11084  000F26  B4D8               	btfsc	status,2,c
 11085  000F28  D00F               	goto	l1115
 11086                           
 11087                           ; BSR set to: 0
 11088                           ;tff.c: 672: stat = disk_status(0);
 11089  000F2A  0E00               	movlw	0
 11090  000F2C  ECC8  F02B         	call	_disk_status
 11091  000F30  0100               	movlb	0	; () banked
 11092  000F32  6FB3               	movwf	auto_mount@stat& (0+255),b
 11093                           
 11094                           ; BSR set to: 0
 11095                           ;tff.c: 673: if (!(stat & 0x01)) {
 11096  000F34  B1B3               	btfsc	auto_mount@stat& (0+255),0,b
 11097  000F36  D008               	goto	l1115
 11098                           
 11099                           ; BSR set to: 0
 11100                           ;tff.c: 675: if (chk_wp && (stat & 0x04))
 11101  000F38  5194               	movf	auto_mount@chk_wp& (0+255),w,b
 11102  000F3A  A4D8               	btfss	status,2,c
 11103                           
 11104                           ; BSR set to: 0
 11105  000F3C  A5B3               	btfss	auto_mount@stat& (0+255),2,b
 11106  000F3E  D002               	goto	l1116
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;tff.c: 676: return FR_WRITE_PROTECTED;
 11110  000F40  0E09               	movlw	9
 11111                           
 11112                           ; BSR set to: 0
 11113  000F42  0012               	return	
 11114  000F44                     l1116:
 11115                           
 11116                           ; BSR set to: 0
 11117                           ;tff.c: 678: return FR_OK;
 11118                           
 11119                           ; BSR set to: 0
 11120  000F44  0E00               	movlw	0
 11121                           
 11122                           ; BSR set to: 0
 11123  000F46  0012               	return	
 11124  000F48                     l1115:
 11125                           
 11126                           ; BSR set to: 0
 11127                           ;tff.c: 679: }
 11128                           ;tff.c: 680: }
 11129                           ;tff.c: 684: memset(fs, 0, sizeof(FATFS));
 11130                           
 11131                           ; BSR set to: 0
 11132                           
 11133                           ; BSR set to: 0
 11134  000F48  C0B8  F060         	movff	auto_mount@fs,memset@p1
 11135  000F4C  C0B9  F061         	movff	auto_mount@fs+1,memset@p1+1
 11136  000F50  0E00               	movlw	0
 11137  000F52  6F63               	movwf	(memset@c+1)& (0+255),b
 11138  000F54  0E00               	movlw	0
 11139  000F56  6F62               	movwf	memset@c& (0+255),b
 11140  000F58  0E02               	movlw	2
 11141  000F5A  6F65               	movwf	(memset@n+1)& (0+255),b
 11142  000F5C  0E20               	movlw	32
 11143  000F5E  6F64               	movwf	memset@n& (0+255),b
 11144  000F60  EC27  F02D         	call	_memset	;wreg free
 11145                           
 11146                           ;tff.c: 685: stat = disk_initialize(0);
 11147  000F64  0E00               	movlw	0
 11148  000F66  ECD5  F02C         	call	_disk_initialize
 11149  000F6A  0100               	movlb	0	; () banked
 11150  000F6C  6FB3               	movwf	auto_mount@stat& (0+255),b
 11151                           
 11152                           ; BSR set to: 0
 11153                           ;tff.c: 686: if (stat & 0x01)
 11154  000F6E  A1B3               	btfss	auto_mount@stat& (0+255),0,b
 11155  000F70  D002               	goto	l1117
 11156                           
 11157                           ; BSR set to: 0
 11158                           ;tff.c: 687: return FR_NOT_READY;
 11159  000F72  0E01               	movlw	1
 11160                           
 11161                           ; BSR set to: 0
 11162  000F74  0012               	return	
 11163  000F76                     l1117:
 11164                           
 11165                           ; BSR set to: 0
 11166                           ;tff.c: 689: if (chk_wp && (stat & 0x04))
 11167                           
 11168                           ; BSR set to: 0
 11169  000F76  5194               	movf	auto_mount@chk_wp& (0+255),w,b
 11170  000F78  A4D8               	btfss	status,2,c
 11171                           
 11172                           ; BSR set to: 0
 11173  000F7A  A5B3               	btfss	auto_mount@stat& (0+255),2,b
 11174  000F7C  D002               	goto	l1118
 11175                           
 11176                           ; BSR set to: 0
 11177                           ;tff.c: 690: return FR_WRITE_PROTECTED;
 11178  000F7E  0E09               	movlw	9
 11179                           
 11180                           ; BSR set to: 0
 11181  000F80  0012               	return	
 11182  000F82                     l1118:
 11183                           
 11184                           ; BSR set to: 0
 11185                           ;tff.c: 694: fmt = check_fs(bootsect = 0);
 11186                           
 11187                           ; BSR set to: 0
 11188  000F82  0E00               	movlw	0
 11189  000F84  6FA8               	movwf	auto_mount@bootsect& (0+255),b
 11190  000F86  0E00               	movlw	0
 11191  000F88  6FA9               	movwf	(auto_mount@bootsect+1)& (0+255),b
 11192  000F8A  0E00               	movlw	0
 11193  000F8C  6FAA               	movwf	(auto_mount@bootsect+2)& (0+255),b
 11194  000F8E  0E00               	movlw	0
 11195  000F90  6FAB               	movwf	(auto_mount@bootsect+3)& (0+255),b
 11196  000F92  C0A8  F08A         	movff	auto_mount@bootsect,check_fs@sect
 11197  000F96  C0A9  F08B         	movff	auto_mount@bootsect+1,check_fs@sect+1
 11198  000F9A  C0AA  F08C         	movff	auto_mount@bootsect+2,check_fs@sect+2
 11199  000F9E  C0AB  F08D         	movff	auto_mount@bootsect+3,check_fs@sect+3
 11200  000FA2  EC55  F027         	call	_check_fs	;wreg free
 11201  000FA6  0100               	movlb	0	; () banked
 11202  000FA8  6FB2               	movwf	auto_mount@fmt& (0+255),b
 11203                           
 11204                           ; BSR set to: 0
 11205                           ;tff.c: 696: if (fmt == 1) {
 11206  000FAA  05B2               	decf	auto_mount@fmt& (0+255),w,b
 11207  000FAC  A4D8               	btfss	status,2,c
 11208  000FAE  D023               	goto	l1120
 11209                           
 11210                           ; BSR set to: 0
 11211                           ;tff.c: 698: if (fs->win[446+4]) {
 11212  000FB0  EE21 F0E2          	lfsr	2,482
 11213  000FB4  51B8               	movf	auto_mount@fs& (0+255),w,b
 11214  000FB6  26D9               	addwf	fsr2l,f,c
 11215  000FB8  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11216  000FBA  22DA               	addwfc	fsr2h,f,c
 11217  000FBC  50DF               	movf	indf2,w,c
 11218  000FBE  B4D8               	btfsc	status,2,c
 11219  000FC0  D01A               	goto	l1120
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;tff.c: 699: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 11223  000FC2  EE21 F0E6          	lfsr	2,486
 11224  000FC6  51B8               	movf	auto_mount@fs& (0+255),w,b
 11225  000FC8  26D9               	addwf	fsr2l,f,c
 11226  000FCA  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11227  000FCC  22DA               	addwfc	fsr2h,f,c
 11228  000FCE  CFDE F0A8          	movff	postinc2,auto_mount@bootsect
 11229  000FD2  CFDE F0A9          	movff	postinc2,auto_mount@bootsect+1
 11230  000FD6  CFDE F0AA          	movff	postinc2,auto_mount@bootsect+2
 11231  000FDA  CFDE F0AB          	movff	postinc2,auto_mount@bootsect+3
 11232                           
 11233                           ; BSR set to: 0
 11234                           ;tff.c: 700: fmt = check_fs(bootsect);
 11235  000FDE  C0A8  F08A         	movff	auto_mount@bootsect,check_fs@sect
 11236  000FE2  C0A9  F08B         	movff	auto_mount@bootsect+1,check_fs@sect+1
 11237  000FE6  C0AA  F08C         	movff	auto_mount@bootsect+2,check_fs@sect+2
 11238  000FEA  C0AB  F08D         	movff	auto_mount@bootsect+3,check_fs@sect+3
 11239  000FEE  EC55  F027         	call	_check_fs	;wreg free
 11240  000FF2  0100               	movlb	0	; () banked
 11241  000FF4  6FB2               	movwf	auto_mount@fmt& (0+255),b
 11242  000FF6                     l1120:
 11243                           
 11244                           ; BSR set to: 0
 11245                           ;tff.c: 701: }
 11246                           ;tff.c: 702: }
 11247                           ;tff.c: 703: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])) != 512U)
 11248                           
 11249                           ; BSR set to: 0
 11250                           
 11251                           ; BSR set to: 0
 11252  000FF6  51B2               	movf	auto_mount@fmt& (0+255),w,b
 11253  000FF8  A4D8               	btfss	status,2,c
 11254  000FFA  D00C               	goto	u12890
 11255                           
 11256                           ; BSR set to: 0
 11257  000FFC  EE20 F02B          	lfsr	2,43
 11258  001000  51B8               	movf	auto_mount@fs& (0+255),w,b
 11259  001002  26D9               	addwf	fsr2l,f,c
 11260  001004  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11261  001006  22DA               	addwfc	fsr2h,f,c
 11262  001008  50DE               	movf	postinc2,w,c
 11263  00100A  E104               	bnz	l10323
 11264  00100C  0E02               	movlw	2
 11265  00100E  18DE               	xorwf	postinc2,w,c
 11266  001010  B4D8               	btfsc	status,2,c
 11267  001012  D002               	goto	l1121
 11268  001014                     u12890:
 11269  001014                     l10323:
 11270                           
 11271                           ; BSR set to: 0
 11272                           ;tff.c: 704: return FR_NO_FILESYSTEM;
 11273  001014  0E0B               	movlw	11
 11274                           
 11275                           ; BSR set to: 0
 11276  001016  0012               	return	
 11277  001018                     l1121:
 11278                           
 11279                           ; BSR set to: 0
 11280                           ;tff.c: 707: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 11281                           
 11282                           ; BSR set to: 0
 11283  001018  EE20 F036          	lfsr	2,54
 11284  00101C  51B8               	movf	auto_mount@fs& (0+255),w,b
 11285  00101E  26D9               	addwf	fsr2l,f,c
 11286  001020  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11287  001022  22DA               	addwfc	fsr2h,f,c
 11288  001024  CFDE F095          	movff	postinc2,??_auto_mount
 11289  001028  CFDD F096          	movff	postdec2,??_auto_mount+1
 11290  00102C  C095  F0B4         	movff	??_auto_mount,auto_mount@fatsize
 11291  001030  C096  F0B5         	movff	??_auto_mount+1,auto_mount@fatsize+1
 11292  001034  6BB6               	clrf	(auto_mount@fatsize+2)& (0+255),b
 11293  001036  6BB7               	clrf	(auto_mount@fatsize+3)& (0+255),b
 11294                           
 11295                           ; BSR set to: 0
 11296                           ;tff.c: 708: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 11297  001038  51B4               	movf	auto_mount@fatsize& (0+255),w,b
 11298  00103A  11B5               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 11299  00103C  11B6               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 11300  00103E  11B7               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 11301  001040  A4D8               	btfss	status,2,c
 11302  001042  D00E               	goto	l1124
 11303                           
 11304                           ; BSR set to: 0
 11305  001044  EE20 F044          	lfsr	2,68
 11306  001048  51B8               	movf	auto_mount@fs& (0+255),w,b
 11307  00104A  26D9               	addwf	fsr2l,f,c
 11308  00104C  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11309  00104E  22DA               	addwfc	fsr2h,f,c
 11310  001050  CFDE F0B4          	movff	postinc2,auto_mount@fatsize
 11311  001054  CFDE F0B5          	movff	postinc2,auto_mount@fatsize+1
 11312  001058  CFDE F0B6          	movff	postinc2,auto_mount@fatsize+2
 11313  00105C  CFDE F0B7          	movff	postinc2,auto_mount@fatsize+3
 11314  001060                     l1124:
 11315                           
 11316                           ; BSR set to: 0
 11317                           ;tff.c: 709: fs->sects_fat = (CLUST)fatsize;
 11318  001060  EE20 F014          	lfsr	2,20
 11319  001064  51B8               	movf	auto_mount@fs& (0+255),w,b
 11320  001066  26D9               	addwf	fsr2l,f,c
 11321  001068  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11322  00106A  22DA               	addwfc	fsr2h,f,c
 11323  00106C  C0B4  FFDE         	movff	auto_mount@fatsize,postinc2
 11324  001070  C0B5  FFDD         	movff	auto_mount@fatsize+1,postdec2
 11325                           
 11326                           ; BSR set to: 0
 11327                           ;tff.c: 710: fs->n_fats = fs->win[16];
 11328  001074  EE20 F030          	lfsr	2,48
 11329  001078  51B8               	movf	auto_mount@fs& (0+255),w,b
 11330  00107A  26D9               	addwf	fsr2l,f,c
 11331  00107C  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11332  00107E  22DA               	addwfc	fsr2h,f,c
 11333  001080  EE10 F01E          	lfsr	1,30
 11334  001084  51B8               	movf	auto_mount@fs& (0+255),w,b
 11335  001086  26E1               	addwf	fsr1l,f,c
 11336  001088  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11337  00108A  22E2               	addwfc	fsr1h,f,c
 11338  00108C  CFDF FFE7          	movff	indf2,indf1
 11339                           
 11340                           ; BSR set to: 0
 11341                           ;tff.c: 711: fatsize *= fs->n_fats;
 11342  001090  C0B4  F060         	movff	auto_mount@fatsize,___lmul@multiplier
 11343  001094  C0B5  F061         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 11344  001098  C0B6  F062         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 11345  00109C  C0B7  F063         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 11346  0010A0  EE20 F01E          	lfsr	2,30
 11347  0010A4  51B8               	movf	auto_mount@fs& (0+255),w,b
 11348  0010A6  26D9               	addwf	fsr2l,f,c
 11349  0010A8  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11350  0010AA  22DA               	addwfc	fsr2h,f,c
 11351  0010AC  50DF               	movf	indf2,w,c
 11352  0010AE  6F95               	movwf	??_auto_mount& (0+255),b
 11353  0010B0  5195               	movf	??_auto_mount& (0+255),w,b
 11354  0010B2  6F64               	movwf	___lmul@multiplicand& (0+255),b
 11355  0010B4  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 11356  0010B6  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 11357  0010B8  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 11358  0010BA  EC32  F02A         	call	___lmul	;wreg free
 11359  0010BE  C060  F0B4         	movff	?___lmul,auto_mount@fatsize
 11360  0010C2  C061  F0B5         	movff	?___lmul+1,auto_mount@fatsize+1
 11361  0010C6  C062  F0B6         	movff	?___lmul+2,auto_mount@fatsize+2
 11362  0010CA  C063  F0B7         	movff	?___lmul+3,auto_mount@fatsize+3
 11363                           
 11364                           ;tff.c: 712: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 11365  0010CE  0100               	movlb	0	; () banked
 11366  0010D0  EE20 F02E          	lfsr	2,46
 11367  0010D4  51B8               	movf	auto_mount@fs& (0+255),w,b
 11368  0010D6  26D9               	addwf	fsr2l,f,c
 11369  0010D8  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11370  0010DA  22DA               	addwfc	fsr2h,f,c
 11371  0010DC  CFDE F095          	movff	postinc2,??_auto_mount
 11372  0010E0  CFDD F096          	movff	postdec2,??_auto_mount+1
 11373  0010E4  5195               	movf	??_auto_mount& (0+255),w,b
 11374  0010E6  25A8               	addwf	auto_mount@bootsect& (0+255),w,b
 11375  0010E8  6F97               	movwf	(??_auto_mount+2)& (0+255),b
 11376  0010EA  5196               	movf	(??_auto_mount+1)& (0+255),w,b
 11377  0010EC  21A9               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 11378  0010EE  6F98               	movwf	(??_auto_mount+3)& (0+255),b
 11379  0010F0  0E00               	movlw	0
 11380  0010F2  21AA               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 11381  0010F4  6F99               	movwf	(??_auto_mount+4)& (0+255),b
 11382  0010F6  0E00               	movlw	0
 11383  0010F8  21AB               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 11384  0010FA  6F9A               	movwf	(??_auto_mount+5)& (0+255),b
 11385  0010FC  EE20 F008          	lfsr	2,8
 11386  001100  51B8               	movf	auto_mount@fs& (0+255),w,b
 11387  001102  26D9               	addwf	fsr2l,f,c
 11388  001104  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11389  001106  22DA               	addwfc	fsr2h,f,c
 11390  001108  C097  FFDE         	movff	??_auto_mount+2,postinc2
 11391  00110C  C098  FFDE         	movff	??_auto_mount+3,postinc2
 11392  001110  C099  FFDE         	movff	??_auto_mount+4,postinc2
 11393  001114  C09A  FFDE         	movff	??_auto_mount+5,postinc2
 11394                           
 11395                           ; BSR set to: 0
 11396                           ;tff.c: 713: fs->csize = fs->win[13];
 11397  001118  EE20 F02D          	lfsr	2,45
 11398  00111C  51B8               	movf	auto_mount@fs& (0+255),w,b
 11399  00111E  26D9               	addwf	fsr2l,f,c
 11400  001120  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11401  001122  22DA               	addwfc	fsr2h,f,c
 11402  001124  EE10 F01D          	lfsr	1,29
 11403  001128  51B8               	movf	auto_mount@fs& (0+255),w,b
 11404  00112A  26E1               	addwf	fsr1l,f,c
 11405  00112C  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11406  00112E  22E2               	addwfc	fsr1h,f,c
 11407  001130  CFDF FFE7          	movff	indf2,indf1
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;tff.c: 714: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 11411  001134  EE20 F031          	lfsr	2,49
 11412  001138  51B8               	movf	auto_mount@fs& (0+255),w,b
 11413  00113A  26D9               	addwf	fsr2l,f,c
 11414  00113C  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11415  00113E  22DA               	addwfc	fsr2h,f,c
 11416  001140  EE10 F002          	lfsr	1,2
 11417  001144  51B8               	movf	auto_mount@fs& (0+255),w,b
 11418  001146  26E1               	addwf	fsr1l,f,c
 11419  001148  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11420  00114A  22E2               	addwfc	fsr1h,f,c
 11421  00114C  CFDE FFE6          	movff	postinc2,postinc1
 11422  001150  CFDD FFE5          	movff	postdec2,postdec1
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;tff.c: 715: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 11426  001154  EE20 F033          	lfsr	2,51
 11427  001158  51B8               	movf	auto_mount@fs& (0+255),w,b
 11428  00115A  26D9               	addwf	fsr2l,f,c
 11429  00115C  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11430  00115E  22DA               	addwfc	fsr2h,f,c
 11431  001160  CFDE F095          	movff	postinc2,??_auto_mount
 11432  001164  CFDD F096          	movff	postdec2,??_auto_mount+1
 11433  001168  C095  F0AC         	movff	??_auto_mount,auto_mount@totalsect
 11434  00116C  C096  F0AD         	movff	??_auto_mount+1,auto_mount@totalsect+1
 11435  001170  6BAE               	clrf	(auto_mount@totalsect+2)& (0+255),b
 11436  001172  6BAF               	clrf	(auto_mount@totalsect+3)& (0+255),b
 11437                           
 11438                           ; BSR set to: 0
 11439                           ;tff.c: 716: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 11440  001174  51AC               	movf	auto_mount@totalsect& (0+255),w,b
 11441  001176  11AD               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 11442  001178  11AE               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 11443  00117A  11AF               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 11444  00117C  A4D8               	btfss	status,2,c
 11445  00117E  D00E               	goto	l1125
 11446                           
 11447                           ; BSR set to: 0
 11448  001180  EE20 F040          	lfsr	2,64
 11449  001184  51B8               	movf	auto_mount@fs& (0+255),w,b
 11450  001186  26D9               	addwf	fsr2l,f,c
 11451  001188  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11452  00118A  22DA               	addwfc	fsr2h,f,c
 11453  00118C  CFDE F0AC          	movff	postinc2,auto_mount@totalsect
 11454  001190  CFDE F0AD          	movff	postinc2,auto_mount@totalsect+1
 11455  001194  CFDE F0AE          	movff	postinc2,auto_mount@totalsect+2
 11456  001198  CFDE F0AF          	movff	postinc2,auto_mount@totalsect+3
 11457  00119C                     l1125:
 11458                           
 11459                           ; BSR set to: 0
 11460                           ;tff.c: 717: fs->max_clust = maxclust = (totalsect
 11461                           ;tff.c: 718: - (WORD)(*(WORD*)(BYTE*)(&fs->win[14])) - fatsize - fs->n_rootdir / 16
 11462                           ;tff.c: 719: ) / fs->csize + 2;
 11463                           
 11464                           ; BSR set to: 0
 11465  00119C  EE20 F002          	lfsr	2,2
 11466  0011A0  51B8               	movf	auto_mount@fs& (0+255),w,b
 11467  0011A2  26D9               	addwf	fsr2l,f,c
 11468  0011A4  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11469  0011A6  22DA               	addwfc	fsr2h,f,c
 11470  0011A8  CFDE F095          	movff	postinc2,??_auto_mount
 11471  0011AC  CFDD F096          	movff	postdec2,??_auto_mount+1
 11472  0011B0  0E04               	movlw	4
 11473  0011B2  6F97               	movwf	(??_auto_mount+2)& (0+255),b
 11474  0011B4                     u12925:
 11475  0011B4  90D8               	bcf	status,0,c
 11476  0011B6  3396               	rrcf	(??_auto_mount+1)& (0+255),f,b
 11477  0011B8  3395               	rrcf	??_auto_mount& (0+255),f,b
 11478  0011BA  2F97               	decfsz	(??_auto_mount+2)& (0+255),f,b
 11479  0011BC  D7FB               	goto	u12925
 11480  0011BE  EE20 F02E          	lfsr	2,46
 11481  0011C2  51B8               	movf	auto_mount@fs& (0+255),w,b
 11482  0011C4  26D9               	addwf	fsr2l,f,c
 11483  0011C6  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11484  0011C8  22DA               	addwfc	fsr2h,f,c
 11485  0011CA  CFDE F098          	movff	postinc2,??_auto_mount+3
 11486  0011CE  CFDD F099          	movff	postdec2,??_auto_mount+4
 11487  0011D2  5198               	movf	(??_auto_mount+3)& (0+255),w,b
 11488  0011D4  2595               	addwf	??_auto_mount& (0+255),w,b
 11489  0011D6  6F9A               	movwf	(??_auto_mount+5)& (0+255),b
 11490  0011D8  5199               	movf	(??_auto_mount+4)& (0+255),w,b
 11491  0011DA  2196               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11492  0011DC  6F9B               	movwf	(??_auto_mount+6)& (0+255),b
 11493  0011DE  6B9C               	clrf	(??_auto_mount+7)& (0+255),b
 11494  0011E0  B0D8               	btfsc	status,0,c
 11495  0011E2  2B9C               	incf	(??_auto_mount+7)& (0+255),f,b
 11496  0011E4  6B9D               	clrf	(??_auto_mount+8)& (0+255),b
 11497  0011E6  51B4               	movf	auto_mount@fatsize& (0+255),w,b
 11498  0011E8  259A               	addwf	(??_auto_mount+5)& (0+255),w,b
 11499  0011EA  6F9E               	movwf	(??_auto_mount+9)& (0+255),b
 11500  0011EC  51B5               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11501  0011EE  219B               	addwfc	(??_auto_mount+6)& (0+255),w,b
 11502  0011F0  6F9F               	movwf	(??_auto_mount+10)& (0+255),b
 11503  0011F2  51B6               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11504  0011F4  219C               	addwfc	(??_auto_mount+7)& (0+255),w,b
 11505  0011F6  6FA0               	movwf	(??_auto_mount+11)& (0+255),b
 11506  0011F8  51B7               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11507  0011FA  219D               	addwfc	(??_auto_mount+8)& (0+255),w,b
 11508  0011FC  6FA1               	movwf	(??_auto_mount+12)& (0+255),b
 11509  0011FE  1F9E               	comf	(??_auto_mount+9)& (0+255),f,b
 11510  001200  1F9F               	comf	(??_auto_mount+10)& (0+255),f,b
 11511  001202  1FA0               	comf	(??_auto_mount+11)& (0+255),f,b
 11512  001204  1FA1               	comf	(??_auto_mount+12)& (0+255),f,b
 11513  001206  2B9E               	incf	(??_auto_mount+9)& (0+255),f,b
 11514  001208  0E00               	movlw	0
 11515  00120A  239F               	addwfc	(??_auto_mount+10)& (0+255),f,b
 11516  00120C  23A0               	addwfc	(??_auto_mount+11)& (0+255),f,b
 11517  00120E  23A1               	addwfc	(??_auto_mount+12)& (0+255),f,b
 11518  001210  51AC               	movf	auto_mount@totalsect& (0+255),w,b
 11519  001212  259E               	addwf	(??_auto_mount+9)& (0+255),w,b
 11520  001214  6F60               	movwf	___lldiv@dividend& (0+255),b
 11521  001216  51AD               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 11522  001218  219F               	addwfc	(??_auto_mount+10)& (0+255),w,b
 11523  00121A  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 11524  00121C  51AE               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 11525  00121E  21A0               	addwfc	(??_auto_mount+11)& (0+255),w,b
 11526  001220  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 11527  001222  51AF               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 11528  001224  21A1               	addwfc	(??_auto_mount+12)& (0+255),w,b
 11529  001226  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 11530  001228  EE20 F01D          	lfsr	2,29
 11531  00122C  51B8               	movf	auto_mount@fs& (0+255),w,b
 11532  00122E  26D9               	addwf	fsr2l,f,c
 11533  001230  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11534  001232  22DA               	addwfc	fsr2h,f,c
 11535  001234  50DF               	movf	indf2,w,c
 11536  001236  6FA2               	movwf	(??_auto_mount+13)& (0+255),b
 11537  001238  51A2               	movf	(??_auto_mount+13)& (0+255),w,b
 11538  00123A  6F64               	movwf	___lldiv@divisor& (0+255),b
 11539  00123C  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 11540  00123E  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 11541  001240  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 11542  001242  ECAD  F028         	call	___lldiv	;wreg free
 11543  001246  0E02               	movlw	2
 11544  001248  0100               	movlb	0	; () banked
 11545  00124A  2560               	addwf	?___lldiv& (0+255),w,b
 11546  00124C  6FA4               	movwf	auto_mount@maxclust& (0+255),b
 11547  00124E  0E00               	movlw	0
 11548  001250  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 11549  001252  6FA5               	movwf	(auto_mount@maxclust+1)& (0+255),b
 11550  001254  0E00               	movlw	0
 11551  001256  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
 11552  001258  6FA6               	movwf	(auto_mount@maxclust+2)& (0+255),b
 11553  00125A  0E00               	movlw	0
 11554  00125C  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
 11555  00125E  6FA7               	movwf	(auto_mount@maxclust+3)& (0+255),b
 11556  001260  EE20 F016          	lfsr	2,22
 11557  001264  51B8               	movf	auto_mount@fs& (0+255),w,b
 11558  001266  26D9               	addwf	fsr2l,f,c
 11559  001268  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11560  00126A  22DA               	addwfc	fsr2h,f,c
 11561  00126C  C0A4  FFDE         	movff	auto_mount@maxclust,postinc2
 11562  001270  C0A5  FFDD         	movff	auto_mount@maxclust+1,postdec2
 11563                           
 11564                           ; BSR set to: 0
 11565                           ;tff.c: 721: fmt = 1;
 11566  001274  0E01               	movlw	1
 11567  001276  6FB2               	movwf	auto_mount@fmt& (0+255),b
 11568                           
 11569                           ; BSR set to: 0
 11570                           ;tff.c: 722: if (maxclust >= 0xFF7) fmt = 2;
 11571  001278  51A7               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 11572  00127A  11A6               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 11573  00127C  E106               	bnz	u12930
 11574  00127E  0EF7               	movlw	247
 11575  001280  5DA4               	subwf	auto_mount@maxclust& (0+255),w,b
 11576  001282  0E0F               	movlw	15
 11577  001284  59A5               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 11578  001286  A0D8               	btfss	status,0,c
 11579  001288  D002               	goto	l1126
 11580  00128A                     u12930:
 11581                           
 11582                           ; BSR set to: 0
 11583  00128A  0E02               	movlw	2
 11584  00128C  6FB2               	movwf	auto_mount@fmt& (0+255),b
 11585  00128E                     l1126:
 11586                           
 11587                           ; BSR set to: 0
 11588                           ;tff.c: 723: if (maxclust >= 0xFFF7)
 11589                           
 11590                           ; BSR set to: 0
 11591  00128E  51A7               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 11592  001290  11A6               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 11593  001292  E106               	bnz	u12940
 11594  001294  0EF7               	movlw	247
 11595  001296  5DA4               	subwf	auto_mount@maxclust& (0+255),w,b
 11596  001298  0EFF               	movlw	255
 11597  00129A  59A5               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 11598  00129C  A0D8               	btfss	status,0,c
 11599  00129E  D002               	goto	l1127
 11600  0012A0                     u12940:
 11601                           
 11602                           ; BSR set to: 0
 11603                           ;tff.c: 725: return FR_NO_FILESYSTEM;
 11604  0012A0  0E0B               	movlw	11
 11605                           
 11606                           ; BSR set to: 0
 11607  0012A2  0012               	return	
 11608  0012A4                     l1127:
 11609                           
 11610                           ; BSR set to: 0
 11611                           ;tff.c: 732: fs->dirbase = fs->fatbase + fatsize;
 11612                           
 11613                           ; BSR set to: 0
 11614  0012A4  EE20 F008          	lfsr	2,8
 11615  0012A8  51B8               	movf	auto_mount@fs& (0+255),w,b
 11616  0012AA  26D9               	addwf	fsr2l,f,c
 11617  0012AC  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11618  0012AE  22DA               	addwfc	fsr2h,f,c
 11619  0012B0  CFDE F095          	movff	postinc2,??_auto_mount
 11620  0012B4  CFDE F096          	movff	postinc2,??_auto_mount+1
 11621  0012B8  CFDE F097          	movff	postinc2,??_auto_mount+2
 11622  0012BC  CFDE F098          	movff	postinc2,??_auto_mount+3
 11623  0012C0  51B4               	movf	auto_mount@fatsize& (0+255),w,b
 11624  0012C2  2595               	addwf	??_auto_mount& (0+255),w,b
 11625  0012C4  6F99               	movwf	(??_auto_mount+4)& (0+255),b
 11626  0012C6  51B5               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11627  0012C8  2196               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11628  0012CA  6F9A               	movwf	(??_auto_mount+5)& (0+255),b
 11629  0012CC  51B6               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11630  0012CE  2197               	addwfc	(??_auto_mount+2)& (0+255),w,b
 11631  0012D0  6F9B               	movwf	(??_auto_mount+6)& (0+255),b
 11632  0012D2  51B7               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11633  0012D4  2198               	addwfc	(??_auto_mount+3)& (0+255),w,b
 11634  0012D6  6F9C               	movwf	(??_auto_mount+7)& (0+255),b
 11635  0012D8  EE20 F00C          	lfsr	2,12
 11636  0012DC  51B8               	movf	auto_mount@fs& (0+255),w,b
 11637  0012DE  26D9               	addwf	fsr2l,f,c
 11638  0012E0  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11639  0012E2  22DA               	addwfc	fsr2h,f,c
 11640  0012E4  C099  FFDE         	movff	??_auto_mount+4,postinc2
 11641  0012E8  C09A  FFDE         	movff	??_auto_mount+5,postinc2
 11642  0012EC  C09B  FFDE         	movff	??_auto_mount+6,postinc2
 11643  0012F0  C09C  FFDE         	movff	??_auto_mount+7,postinc2
 11644                           
 11645                           ;tff.c: 733: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 11646  0012F4  EE20 F008          	lfsr	2,8
 11647  0012F8  51B8               	movf	auto_mount@fs& (0+255),w,b
 11648  0012FA  26D9               	addwf	fsr2l,f,c
 11649  0012FC  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11650  0012FE  22DA               	addwfc	fsr2h,f,c
 11651  001300  CFDE F095          	movff	postinc2,??_auto_mount
 11652  001304  CFDE F096          	movff	postinc2,??_auto_mount+1
 11653  001308  CFDE F097          	movff	postinc2,??_auto_mount+2
 11654  00130C  CFDE F098          	movff	postinc2,??_auto_mount+3
 11655  001310  EE20 F002          	lfsr	2,2
 11656  001314  51B8               	movf	auto_mount@fs& (0+255),w,b
 11657  001316  26D9               	addwf	fsr2l,f,c
 11658  001318  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11659  00131A  22DA               	addwfc	fsr2h,f,c
 11660  00131C  CFDE F099          	movff	postinc2,??_auto_mount+4
 11661  001320  CFDD F09A          	movff	postdec2,??_auto_mount+5
 11662  001324  0E04               	movlw	4
 11663  001326  6F9B               	movwf	(??_auto_mount+6)& (0+255),b
 11664  001328                     u12955:
 11665  001328  90D8               	bcf	status,0,c
 11666  00132A  339A               	rrcf	(??_auto_mount+5)& (0+255),f,b
 11667  00132C  3399               	rrcf	(??_auto_mount+4)& (0+255),f,b
 11668  00132E  2F9B               	decfsz	(??_auto_mount+6)& (0+255),f,b
 11669  001330  D7FB               	goto	u12955
 11670  001332  5199               	movf	(??_auto_mount+4)& (0+255),w,b
 11671  001334  2595               	addwf	??_auto_mount& (0+255),w,b
 11672  001336  6F9C               	movwf	(??_auto_mount+7)& (0+255),b
 11673  001338  519A               	movf	(??_auto_mount+5)& (0+255),w,b
 11674  00133A  2196               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11675  00133C  6F9D               	movwf	(??_auto_mount+8)& (0+255),b
 11676  00133E  0E00               	movlw	0
 11677  001340  2197               	addwfc	(??_auto_mount+2)& (0+255),w,b
 11678  001342  6F9E               	movwf	(??_auto_mount+9)& (0+255),b
 11679  001344  0E00               	movlw	0
 11680  001346  2198               	addwfc	(??_auto_mount+3)& (0+255),w,b
 11681  001348  6F9F               	movwf	(??_auto_mount+10)& (0+255),b
 11682  00134A  51B4               	movf	auto_mount@fatsize& (0+255),w,b
 11683  00134C  259C               	addwf	(??_auto_mount+7)& (0+255),w,b
 11684  00134E  6FA0               	movwf	(??_auto_mount+11)& (0+255),b
 11685  001350  51B5               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11686  001352  219D               	addwfc	(??_auto_mount+8)& (0+255),w,b
 11687  001354  6FA1               	movwf	(??_auto_mount+12)& (0+255),b
 11688  001356  51B6               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11689  001358  219E               	addwfc	(??_auto_mount+9)& (0+255),w,b
 11690  00135A  6FA2               	movwf	(??_auto_mount+13)& (0+255),b
 11691  00135C  51B7               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11692  00135E  219F               	addwfc	(??_auto_mount+10)& (0+255),w,b
 11693  001360  6FA3               	movwf	(??_auto_mount+14)& (0+255),b
 11694  001362  EE20 F010          	lfsr	2,16
 11695  001366  51B8               	movf	auto_mount@fs& (0+255),w,b
 11696  001368  26D9               	addwf	fsr2l,f,c
 11697  00136A  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11698  00136C  22DA               	addwfc	fsr2h,f,c
 11699  00136E  C0A0  FFDE         	movff	??_auto_mount+11,postinc2
 11700  001372  C0A1  FFDE         	movff	??_auto_mount+12,postinc2
 11701  001376  C0A2  FFDE         	movff	??_auto_mount+13,postinc2
 11702  00137A  C0A3  FFDE         	movff	??_auto_mount+14,postinc2
 11703                           
 11704                           ;tff.c: 737: fs->free_clust = (CLUST)0xFFFFFFFF;
 11705  00137E  EE20 F01A          	lfsr	2,26
 11706  001382  51B8               	movf	auto_mount@fs& (0+255),w,b
 11707  001384  26D9               	addwf	fsr2l,f,c
 11708  001386  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11709  001388  22DA               	addwfc	fsr2h,f,c
 11710  00138A  0EFF               	movlw	255
 11711  00138C  6EDE               	movwf	postinc2,c
 11712  00138E  0EFF               	movlw	255
 11713  001390  6EDD               	movwf	postdec2,c
 11714                           
 11715                           ;tff.c: 753: fs->fs_type = fmt;
 11716  001392  EE20 F01C          	lfsr	2,28
 11717  001396  51B8               	movf	auto_mount@fs& (0+255),w,b
 11718  001398  26D9               	addwf	fsr2l,f,c
 11719  00139A  51B9               	movf	(auto_mount@fs+1)& (0+255),w,b
 11720  00139C  22DA               	addwfc	fsr2h,f,c
 11721  00139E  C0B2  FFDF         	movff	auto_mount@fmt,indf2
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;tff.c: 754: fs->id = ++fsid;
 11725  0013A2  4BFA               	infsnz	_fsid& (0+255),f,b
 11726  0013A4  2BFB               	incf	(_fsid+1)& (0+255),f,b
 11727  0013A6  C0B8  FFD9         	movff	auto_mount@fs,fsr2l
 11728  0013AA  C0B9  FFDA         	movff	auto_mount@fs+1,fsr2h
 11729  0013AE  C0FA  FFDE         	movff	_fsid,postinc2
 11730  0013B2  C0FB  FFDD         	movff	_fsid+1,postdec2
 11731                           
 11732                           ;tff.c: 755: return FR_OK;
 11733  0013B6  0E00               	movlw	0
 11734  0013B8  0012               	return	
 11735  0013BA                     __end_of_auto_mount:
 11736                           	opt stack 0
 11737                           tosu	equ	0xFFF
 11738                           tosh	equ	0xFFE
 11739                           tosl	equ	0xFFD
 11740                           pclath	equ	0xFFA
 11741                           tblptru	equ	0xFF8
 11742                           tblptrh	equ	0xFF7
 11743                           tblptrl	equ	0xFF6
 11744                           tablat	equ	0xFF5
 11745                           prodh	equ	0xFF4
 11746                           prodl	equ	0xFF3
 11747                           intcon	equ	0xFF2
 11748                           intcon2	equ	0xFF1
 11749                           intcon3	equ	0xFF0
 11750                           indf0	equ	0xFEF
 11751                           postinc0	equ	0xFEE
 11752                           fsr0h	equ	0xFEA
 11753                           fsr0l	equ	0xFE9
 11754                           wreg	equ	0xFE8
 11755                           indf1	equ	0xFE7
 11756                           postinc1	equ	0xFE6
 11757                           postdec1	equ	0xFE5
 11758                           plusw1	equ	0xFE3
 11759                           fsr1h	equ	0xFE2
 11760                           fsr1l	equ	0xFE1
 11761                           indf2	equ	0xFDF
 11762                           postinc2	equ	0xFDE
 11763                           postdec2	equ	0xFDD
 11764                           plusw2	equ	0xFDB
 11765                           fsr2h	equ	0xFDA
 11766                           fsr2l	equ	0xFD9
 11767                           status	equ	0xFD8
 11768                           
 11769 ;; *************** function _memset *****************
 11770 ;; Defined at:
 11771 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 11772 ;; Parameters:    Size  Location     Type
 11773 ;;  p1              2    0[BANK0 ] PTR void 
 11774 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 11775 ;;  c               2    2[BANK0 ] int 
 11776 ;;  n               2    4[BANK0 ] unsigned int 
 11777 ;; Auto vars:     Size  Location     Type
 11778 ;;  p               2   32[COMRAM] PTR unsigned char 
 11779 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 11780 ;; Return value:  Size  Location     Type
 11781 ;;                  2    0[BANK0 ] PTR void 
 11782 ;; Registers used:
 11783 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11784 ;; Tracked objects:
 11785 ;;		On entry : 0/0
 11786 ;;		On exit  : 0/0
 11787 ;;		Unchanged: 0/0
 11788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11789 ;;      Params:         0       6       0       0       0       0       0       0       0
 11790 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11791 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11792 ;;      Totals:         2       6       0       0       0       0       0       0       0
 11793 ;;Total ram usage:        8 bytes
 11794 ;; Hardware stack levels used:    1
 11795 ;; Hardware stack levels required when called:    3
 11796 ;; This function calls:
 11797 ;;		Nothing
 11798 ;; This function is called by:
 11799 ;;		_make_dirfile
 11800 ;;		_reserve_direntry
 11801 ;;		_auto_mount
 11802 ;;		_f_open
 11803 ;; This function uses a non-reentrant model
 11804 ;;
 11805                           
 11806                           	psect	text36
 11807  005A4E                     __ptext36:
 11808                           	opt stack 0
 11809  005A4E                     _memset:
 11810                           	opt stack 21
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;incstack = 0
 11814  005A4E  C060  F021         	movff	memset@p1,memset@p
 11815  005A52  C061  F022         	movff	memset@p1+1,memset@p+1
 11816  005A56  D008               	goto	l1841
 11817  005A58                     l9575:
 11818  005A58  C021  FFD9         	movff	memset@p,fsr2l
 11819  005A5C  C022  FFDA         	movff	memset@p+1,fsr2h
 11820  005A60  C062  FFDF         	movff	memset@c,indf2
 11821  005A64  4A21               	infsnz	memset@p,f,c
 11822  005A66  2A22               	incf	memset@p+1,f,c
 11823  005A68                     l1841:
 11824  005A68  0100               	movlb	0	; () banked
 11825  005A6A  0764               	decf	memset@n& (0+255),f,b
 11826  005A6C  A0D8               	btfss	status,0,c
 11827  005A6E  0765               	decf	(memset@n+1)& (0+255),f,b
 11828  005A70  2964               	incf	memset@n& (0+255),w,b
 11829  005A72  E1F2               	bnz	l9575
 11830  005A74  2965               	incf	(memset@n+1)& (0+255),w,b
 11831  005A76  B4D8               	btfsc	status,2,c
 11832  005A78  0012               	return	
 11833  005A7A  D7EE               	goto	l1842
 11834  005A7C                     __end_of_memset:
 11835                           	opt stack 0
 11836                           tosu	equ	0xFFF
 11837                           tosh	equ	0xFFE
 11838                           tosl	equ	0xFFD
 11839                           pclath	equ	0xFFA
 11840                           tblptru	equ	0xFF8
 11841                           tblptrh	equ	0xFF7
 11842                           tblptrl	equ	0xFF6
 11843                           tablat	equ	0xFF5
 11844                           prodh	equ	0xFF4
 11845                           prodl	equ	0xFF3
 11846                           intcon	equ	0xFF2
 11847                           intcon2	equ	0xFF1
 11848                           intcon3	equ	0xFF0
 11849                           indf0	equ	0xFEF
 11850                           postinc0	equ	0xFEE
 11851                           fsr0h	equ	0xFEA
 11852                           fsr0l	equ	0xFE9
 11853                           wreg	equ	0xFE8
 11854                           indf1	equ	0xFE7
 11855                           postinc1	equ	0xFE6
 11856                           postdec1	equ	0xFE5
 11857                           plusw1	equ	0xFE3
 11858                           fsr1h	equ	0xFE2
 11859                           fsr1l	equ	0xFE1
 11860                           indf2	equ	0xFDF
 11861                           postinc2	equ	0xFDE
 11862                           postdec2	equ	0xFDD
 11863                           plusw2	equ	0xFDB
 11864                           fsr2h	equ	0xFDA
 11865                           fsr2l	equ	0xFD9
 11866                           status	equ	0xFD8
 11867                           
 11868 ;; *************** function _disk_initialize *****************
 11869 ;; Defined at:
 11870 ;;		line 59 in file "bibliotecas/diskio.c"
 11871 ;; Parameters:    Size  Location     Type
 11872 ;;  pdrv            1    wreg     unsigned char 
 11873 ;; Auto vars:     Size  Location     Type
 11874 ;;  pdrv            1   32[BANK0 ] unsigned char 
 11875 ;;  result          2    0        int 
 11876 ;;  stat            1   33[BANK0 ] unsigned char 
 11877 ;; Return value:  Size  Location     Type
 11878 ;;                  1    wreg      unsigned char 
 11879 ;; Registers used:
 11880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11881 ;; Tracked objects:
 11882 ;;		On entry : 0/0
 11883 ;;		On exit  : 0/0
 11884 ;;		Unchanged: 0/0
 11885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11886 ;;      Params:         0       0       0       0       0       0       0       0       0
 11887 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11888 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11889 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11890 ;;Total ram usage:        2 bytes
 11891 ;; Hardware stack levels used:    1
 11892 ;; Hardware stack levels required when called:    8
 11893 ;; This function calls:
 11894 ;;		_sdc_disk_initialize
 11895 ;; This function is called by:
 11896 ;;		_auto_mount
 11897 ;; This function uses a non-reentrant model
 11898 ;;
 11899                           
 11900                           	psect	text37
 11901  0059AA                     __ptext37:
 11902                           	opt stack 0
 11903  0059AA                     _disk_initialize:
 11904                           	opt stack 17
 11905                           
 11906                           ; BSR set to: 0
 11907                           ;incstack = 0
 11908                           ;disk_initialize@pdrv stored from wreg
 11909  0059AA  0100               	movlb	0	; () banked
 11910  0059AC  6F80               	movwf	disk_initialize@pdrv& (0+255),b
 11911                           
 11912                           ;diskio.c: 63: DSTATUS stat;
 11913                           ;diskio.c: 64: int result;
 11914                           ;diskio.c: 66: switch (pdrv) {
 11915  0059AE  D00E               	goto	l420
 11916  0059B0                     
 11917                           ;diskio.c: 68: stat = sdc_disk_initialize();
 11918  0059B0  EC34  F014         	call	_sdc_disk_initialize	;wreg free
 11919  0059B4  0100               	movlb	0	; () banked
 11920  0059B6  6F81               	movwf	disk_initialize@stat& (0+255),b
 11921                           
 11922                           ; BSR set to: 0
 11923                           ;diskio.c: 72: return stat;
 11924  0059B8  5181               	movf	disk_initialize@stat& (0+255),w,b
 11925                           
 11926                           ; BSR set to: 0
 11927  0059BA  0012               	return	
 11928  0059BC                     
 11929                           ; BSR set to: 0
 11930                           ;diskio.c: 75: stat = sdc_disk_initialize();
 11931                           
 11932                           ; BSR set to: 0
 11933  0059BC  EC34  F014         	call	_sdc_disk_initialize	;wreg free
 11934  0059C0  0100               	movlb	0	; () banked
 11935  0059C2  6F81               	movwf	disk_initialize@stat& (0+255),b
 11936                           
 11937                           ; BSR set to: 0
 11938                           ;diskio.c: 79: return stat;
 11939  0059C4  5181               	movf	disk_initialize@stat& (0+255),w,b
 11940                           
 11941                           ; BSR set to: 0
 11942  0059C6  0012               	return	
 11943  0059C8                     
 11944                           ; BSR set to: 0
 11945                           ;diskio.c: 86: return stat;
 11946                           
 11947                           ; BSR set to: 0
 11948  0059C8  5181               	movf	disk_initialize@stat& (0+255),w,b
 11949                           
 11950                           ; BSR set to: 0
 11951  0059CA  0012               	return	
 11952  0059CC                     l420:
 11953                           
 11954                           ; BSR set to: 0
 11955  0059CC  0100               	movlb	0	; () banked
 11956  0059CE  5180               	movf	disk_initialize@pdrv& (0+255),w,b
 11957                           
 11958                           ; Switch size 1, requested type "space"
 11959                           ; Number of cases is 3, Range of values is 0 to 2
 11960                           ; switch strategies available:
 11961                           ; Name         Instructions Cycles
 11962                           ; simple_byte           10     6 (average)
 11963                           ;	Chosen strategy is simple_byte
 11964  0059D0  0A00               	xorlw	0	; case 0
 11965  0059D2  B4D8               	btfsc	status,2,c
 11966  0059D4  D7ED               	goto	l421
 11967  0059D6  0A01               	xorlw	1	; case 1
 11968  0059D8  B4D8               	btfsc	status,2,c
 11969  0059DA  D7F0               	goto	l423
 11970  0059DC  0A03               	xorlw	3	; case 2
 11971  0059DE  B4D8               	btfsc	status,2,c
 11972  0059E0  D7F3               	goto	l424
 11973                           
 11974                           ; BSR set to: 0
 11975                           ;diskio.c: 88: return 0x01;
 11976                           
 11977                           ; BSR set to: 0
 11978  0059E2  0E01               	movlw	1
 11979  0059E4  0012               	return	
 11980  0059E6                     __end_of_disk_initialize:
 11981                           	opt stack 0
 11982                           tosu	equ	0xFFF
 11983                           tosh	equ	0xFFE
 11984                           tosl	equ	0xFFD
 11985                           pclath	equ	0xFFA
 11986                           tblptru	equ	0xFF8
 11987                           tblptrh	equ	0xFF7
 11988                           tblptrl	equ	0xFF6
 11989                           tablat	equ	0xFF5
 11990                           prodh	equ	0xFF4
 11991                           prodl	equ	0xFF3
 11992                           intcon	equ	0xFF2
 11993                           intcon2	equ	0xFF1
 11994                           intcon3	equ	0xFF0
 11995                           indf0	equ	0xFEF
 11996                           postinc0	equ	0xFEE
 11997                           fsr0h	equ	0xFEA
 11998                           fsr0l	equ	0xFE9
 11999                           wreg	equ	0xFE8
 12000                           indf1	equ	0xFE7
 12001                           postinc1	equ	0xFE6
 12002                           postdec1	equ	0xFE5
 12003                           plusw1	equ	0xFE3
 12004                           fsr1h	equ	0xFE2
 12005                           fsr1l	equ	0xFE1
 12006                           indf2	equ	0xFDF
 12007                           postinc2	equ	0xFDE
 12008                           postdec2	equ	0xFDD
 12009                           plusw2	equ	0xFDB
 12010                           fsr2h	equ	0xFDA
 12011                           fsr2l	equ	0xFD9
 12012                           status	equ	0xFD8
 12013                           
 12014 ;; *************** function _sdc_disk_initialize *****************
 12015 ;; Defined at:
 12016 ;;		line 275 in file "bibliotecas/diskio.c"
 12017 ;; Parameters:    Size  Location     Type
 12018 ;;		None
 12019 ;; Auto vars:     Size  Location     Type
 12020 ;;  count2          2   29[BANK0 ] int 
 12021 ;;  crc_number      2   25[BANK0 ] int 
 12022 ;;  count1          2   23[BANK0 ] int 
 12023 ;;  i               2   20[BANK0 ] int 
 12024 ;;  buff            1   31[BANK0 ] unsigned char 
 12025 ;;  ocr             1   28[BANK0 ] unsigned char 
 12026 ;;  buff_i          1   27[BANK0 ] unsigned char 
 12027 ;;  stat            1   22[BANK0 ] unsigned char 
 12028 ;; Return value:  Size  Location     Type
 12029 ;;                  1    wreg      unsigned char 
 12030 ;; Registers used:
 12031 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12032 ;; Tracked objects:
 12033 ;;		On entry : 0/0
 12034 ;;		On exit  : 0/0
 12035 ;;		Unchanged: 0/0
 12036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12037 ;;      Params:         0       0       0       0       0       0       0       0       0
 12038 ;;      Locals:         0      12       0       0       0       0       0       0       0
 12039 ;;      Temps:          0       1       0       0       0       0       0       0       0
 12040 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12041 ;;Total ram usage:       13 bytes
 12042 ;; Hardware stack levels used:    1
 12043 ;; Hardware stack levels required when called:    7
 12044 ;; This function calls:
 12045 ;;		_command
 12046 ;;		_dummy_clocks
 12047 ;;		_escreve_frase_ram_lcd
 12048 ;;		_posicao_cursor_lcd
 12049 ;;		_proceed
 12050 ;;		_response
 12051 ;;		_sdc_reset
 12052 ;; This function is called by:
 12053 ;;		_disk_initialize
 12054 ;; This function uses a non-reentrant model
 12055 ;;
 12056                           
 12057                           	psect	text38
 12058  002868                     __ptext38:
 12059                           	opt stack 0
 12060  002868                     _sdc_disk_initialize:
 12061                           	opt stack 17
 12062                           
 12063                           ;diskio.c: 277: BYTE ocr;
 12064                           ;diskio.c: 278: DSTATUS stat;
 12065                           ;diskio.c: 279: int i = 0, count1 = 0, count2 = 0;
 12066                           
 12067                           ; BSR set to: 0
 12068                           ;incstack = 0
 12069  002868  0E00               	movlw	0
 12070  00286A  0100               	movlb	0	; () banked
 12071  00286C  6F75               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
 12072  00286E  0E00               	movlw	0
 12073  002870  6F74               	movwf	sdc_disk_initialize@i& (0+255),b
 12074  002872  0E00               	movlw	0
 12075  002874  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 12076  002876  0E00               	movlw	0
 12077  002878  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 12078  00287A  0E00               	movlw	0
 12079  00287C  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12080  00287E  0E00               	movlw	0
 12081  002880  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12082                           
 12083                           ;diskio.c: 280: BYTE buff = 0;
 12084  002882  0E00               	movlw	0
 12085  002884  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12086                           
 12087                           ; BSR set to: 0
 12088                           ;diskio.c: 281: BYTE buff_i;
 12089                           ;diskio.c: 282: int crc_number;
 12090                           ;diskio.c: 283: _delay((unsigned long)((1)*(48000000/4000.0)));
 12091  002886  0E10               	movlw	16
 12092  002888  0100               	movlb	0	; () banked
 12093  00288A  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 12094  00288C  0E94               	movlw	148
 12095  00288E                     u14847:
 12096  00288E  2EE8               	decfsz	wreg,f,c
 12097  002890  D7FE               	bra	u14847
 12098  002892  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 12099  002894  D7FC               	bra	u14847
 12100  002896  F000               	nop	
 12101                           
 12102                           ;diskio.c: 284: dummy_clocks(100);
 12103  002898  0E64               	movlw	100
 12104  00289A  EC54  F02C         	call	_dummy_clocks
 12105                           
 12106                           ;diskio.c: 287: sdc_reset();
 12107  00289E  ECD0  F025         	call	_sdc_reset	;wreg free
 12108                           
 12109                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 12110  0028A2  0EAA               	movlw	170
 12111  0028A4  0100               	movlb	0	; () banked
 12112  0028A6  6F65               	movwf	command@arg& (0+255),b
 12113  0028A8  0E01               	movlw	1
 12114  0028AA  6F66               	movwf	(command@arg+1)& (0+255),b
 12115  0028AC  0E00               	movlw	0
 12116  0028AE  6F67               	movwf	(command@arg+2)& (0+255),b
 12117  0028B0  0E00               	movlw	0
 12118  0028B2  6F68               	movwf	(command@arg+3)& (0+255),b
 12119  0028B4  0E87               	movlw	135
 12120  0028B6  6F69               	movwf	command@CRC& (0+255),b
 12121  0028B8  0E48               	movlw	72
 12122  0028BA  ECD0  F029         	call	_command
 12123                           
 12124                           ;diskio.c: 289: proceed();
 12125  0028BE  EC39  F02E         	call	_proceed	;wreg free
 12126  0028C2                     
 12127                           ;diskio.c: 291: buff_i = response();
 12128  0028C2  EC33  F02E         	call	_response	;wreg free
 12129  0028C6  0100               	movlb	0	; () banked
 12130  0028C8  6F7B               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;diskio.c: 292: if(buff_i == 1)
 12134  0028CA  057B               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 12135  0028CC  A4D8               	btfss	status,2,c
 12136  0028CE  D004               	goto	l463
 12137                           
 12138                           ; BSR set to: 0
 12139                           ;diskio.c: 293: {
 12140                           ;diskio.c: 294: crc_number = buff_i<<8;
 12141  0028D0  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 12142  0028D2  6F7A               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 12143  0028D4  6B79               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 12144                           
 12145                           ;diskio.c: 295: }
 12146  0028D6  D006               	goto	l465
 12147  0028D8                     l463:
 12148                           
 12149                           ; BSR set to: 0
 12150                           ;diskio.c: 296: else if(buff_i==0xAA)
 12151                           
 12152                           ; BSR set to: 0
 12153  0028D8  0EAA               	movlw	170
 12154  0028DA  197B               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 12155  0028DC  A4D8               	btfss	status,2,c
 12156  0028DE  D002               	goto	l465
 12157                           
 12158                           ; BSR set to: 0
 12159                           ;diskio.c: 297: {
 12160                           ;diskio.c: 298: crc_number |= buff_i;
 12161  0028E0  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 12162  0028E2  1379               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 12163  0028E4                     l465:
 12164                           
 12165                           ; BSR set to: 0
 12166                           ;diskio.c: 299: }
 12167                           ;diskio.c: 300: count1++;
 12168                           
 12169                           ; BSR set to: 0
 12170                           
 12171                           ; BSR set to: 0
 12172  0028E4  4B77               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 12173  0028E6  2B78               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 12174                           
 12175                           ; BSR set to: 0
 12176                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 12177  0028E8  0EAA               	movlw	170
 12178  0028EA  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 12179  0028EC  E103               	bnz	u11240
 12180  0028EE  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 12181  0028F0  B4D8               	btfsc	status,2,c
 12182  0028F2  D008               	goto	u11250
 12183  0028F4                     u11240:
 12184                           
 12185                           ; BSR set to: 0
 12186  0028F4  BF78               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 12187  0028F6  D7E5               	goto	l462
 12188  0028F8  0EE8               	movlw	232
 12189  0028FA  5D77               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 12190  0028FC  0E03               	movlw	3
 12191  0028FE  5978               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 12192  002900  A0D8               	btfss	status,0,c
 12193  002902  D7DF               	goto	l462
 12194  002904                     u11250:
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;diskio.c: 306: if (crc_number == 0x1AA)
 12198                           
 12199                           ; BSR set to: 0
 12200                           
 12201                           ; BSR set to: 0
 12202  002904  0EAA               	movlw	170
 12203  002906  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 12204  002908  E102               	bnz	u11261
 12205  00290A  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 12206  00290C  A4D8               	btfss	status,2,c
 12207  00290E                     u11261:
 12208  00290E  D0B1               	goto	l469
 12209                           
 12210                           ; BSR set to: 0
 12211                           ;diskio.c: 307: {
 12212                           ;diskio.c: 308: count1 = 0;
 12213  002910  0E00               	movlw	0
 12214  002912  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 12215  002914  0E00               	movlw	0
 12216  002916  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 12217  002918                     l470:
 12218                           
 12219                           ; BSR set to: 0
 12220                           ;diskio.c: 310: count2 = 0;
 12221  002918  0E00               	movlw	0
 12222  00291A  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12223  00291C  0E00               	movlw	0
 12224  00291E  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;diskio.c: 311: buff = 0XFF;
 12228  002920  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12229  002922                     
 12230                           ; BSR set to: 0
 12231                           ;diskio.c: 319: dummy_clocks(10);
 12232                           
 12233                           ; BSR set to: 0
 12234  002922  0E0A               	movlw	10
 12235  002924  EC54  F02C         	call	_dummy_clocks
 12236                           
 12237                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 12238  002928  0E00               	movlw	0
 12239  00292A  0100               	movlb	0	; () banked
 12240  00292C  6F65               	movwf	command@arg& (0+255),b
 12241  00292E  0E00               	movlw	0
 12242  002930  6F66               	movwf	(command@arg+1)& (0+255),b
 12243  002932  0E00               	movlw	0
 12244  002934  6F67               	movwf	(command@arg+2)& (0+255),b
 12245  002936  0E00               	movlw	0
 12246  002938  6F68               	movwf	(command@arg+3)& (0+255),b
 12247  00293A  0E00               	movlw	0
 12248  00293C  6F69               	movwf	command@CRC& (0+255),b
 12249  00293E  0E77               	movlw	119
 12250  002940  ECD0  F029         	call	_command
 12251                           
 12252                           ;diskio.c: 321: buff = 0XFF;
 12253  002944  0100               	movlb	0	; () banked
 12254  002946  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12255                           
 12256                           ; BSR set to: 0
 12257                           ;diskio.c: 323: proceed();
 12258  002948  EC39  F02E         	call	_proceed	;wreg free
 12259  00294C                     
 12260                           ;diskio.c: 325: buff = response();
 12261  00294C  EC33  F02E         	call	_response	;wreg free
 12262  002950  0100               	movlb	0	; () banked
 12263  002952  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12264                           
 12265                           ; BSR set to: 0
 12266                           ;diskio.c: 326: count2++;
 12267  002954  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12268  002956  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12269                           
 12270                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 12271  002958  057F               	decf	sdc_disk_initialize@buff& (0+255),w,b
 12272  00295A  B4D8               	btfsc	status,2,c
 12273  00295C  D008               	goto	u11280
 12274                           
 12275                           ; BSR set to: 0
 12276  00295E  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12277  002960  D7F5               	goto	l472
 12278  002962  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12279  002964  E104               	bnz	l9447
 12280  002966  0E0A               	movlw	10
 12281  002968  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12282  00296A  A0D8               	btfss	status,0,c
 12283  00296C  D7EF               	goto	l472
 12284  00296E                     u11280:
 12285  00296E                     l9447:
 12286                           
 12287                           ; BSR set to: 0
 12288                           ;diskio.c: 328: count2 = 0;
 12289  00296E  0E00               	movlw	0
 12290  002970  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12291  002972  0E00               	movlw	0
 12292  002974  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12293                           
 12294                           ; BSR set to: 0
 12295                           ;diskio.c: 332: dummy_clocks(10);
 12296  002976  0E0A               	movlw	10
 12297  002978  EC54  F02C         	call	_dummy_clocks
 12298                           
 12299                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 12300  00297C  0E00               	movlw	0
 12301  00297E  0100               	movlb	0	; () banked
 12302  002980  6F65               	movwf	command@arg& (0+255),b
 12303  002982  0E00               	movlw	0
 12304  002984  6F66               	movwf	(command@arg+1)& (0+255),b
 12305  002986  0E00               	movlw	0
 12306  002988  6F67               	movwf	(command@arg+2)& (0+255),b
 12307  00298A  0E40               	movlw	64
 12308  00298C  6F68               	movwf	(command@arg+3)& (0+255),b
 12309  00298E  0E00               	movlw	0
 12310  002990  6F69               	movwf	command@CRC& (0+255),b
 12311  002992  0E69               	movlw	105
 12312  002994  ECD0  F029         	call	_command
 12313                           
 12314                           ;diskio.c: 334: proceed();
 12315  002998  EC39  F02E         	call	_proceed	;wreg free
 12316                           
 12317                           ;diskio.c: 335: buff = response();
 12318  00299C  EC33  F02E         	call	_response	;wreg free
 12319  0029A0  0100               	movlb	0	; () banked
 12320  0029A2  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12321                           
 12322                           ; BSR set to: 0
 12323                           ;diskio.c: 336: count2++;
 12324  0029A4  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12325  0029A6  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12326                           
 12327                           ; BSR set to: 0
 12328                           ;diskio.c: 337: }while(buff!=0X00);
 12329  0029A8  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12330  0029AA  A4D8               	btfss	status,2,c
 12331  0029AC  D7BA               	goto	l471
 12332                           
 12333                           ; BSR set to: 0
 12334                           ;diskio.c: 339: buff = 0xFF;
 12335  0029AE  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12336                           
 12337                           ; BSR set to: 0
 12338                           ;diskio.c: 342: dummy_clocks(10);
 12339  0029B0  0E0A               	movlw	10
 12340  0029B2  EC54  F02C         	call	_dummy_clocks
 12341                           
 12342                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 12343  0029B6  0E00               	movlw	0
 12344  0029B8  0100               	movlb	0	; () banked
 12345  0029BA  6F65               	movwf	command@arg& (0+255),b
 12346  0029BC  0E00               	movlw	0
 12347  0029BE  6F66               	movwf	(command@arg+1)& (0+255),b
 12348  0029C0  0E00               	movlw	0
 12349  0029C2  6F67               	movwf	(command@arg+2)& (0+255),b
 12350  0029C4  0E00               	movlw	0
 12351  0029C6  6F68               	movwf	(command@arg+3)& (0+255),b
 12352  0029C8  0EFF               	movlw	255
 12353  0029CA  6F69               	movwf	command@CRC& (0+255),b
 12354  0029CC  0E7A               	movlw	122
 12355  0029CE  ECD0  F029         	call	_command
 12356                           
 12357                           ;diskio.c: 344: proceed();
 12358  0029D2  EC39  F02E         	call	_proceed	;wreg free
 12359  0029D6                     
 12360                           ;diskio.c: 346: buff = response();
 12361  0029D6  EC33  F02E         	call	_response	;wreg free
 12362  0029DA  0100               	movlb	0	; () banked
 12363  0029DC  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12364                           
 12365                           ; BSR set to: 0
 12366                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 12367  0029DE  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12368  0029E0  257F               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 12369  0029E2  0B80               	andlw	128
 12370  0029E4  6F7C               	movwf	sdc_disk_initialize@ocr& (0+255),b
 12371                           
 12372                           ; BSR set to: 0
 12373                           ;diskio.c: 348: count2++;
 12374  0029E6  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12375  0029E8  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12376                           
 12377                           ; BSR set to: 0
 12378                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 12379  0029EA  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12380  0029EC  B4D8               	btfsc	status,2,c
 12381  0029EE  D00B               	goto	u11320
 12382                           
 12383                           ; BSR set to: 0
 12384  0029F0  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 12385  0029F2  B4D8               	btfsc	status,2,c
 12386  0029F4  D008               	goto	u11320
 12387                           
 12388                           ; BSR set to: 0
 12389  0029F6  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12390  0029F8  D7EE               	goto	l477
 12391  0029FA  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12392  0029FC  E104               	bnz	l9477
 12393  0029FE  0E0A               	movlw	10
 12394  002A00  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12395  002A02  A0D8               	btfss	status,0,c
 12396  002A04  D7E8               	goto	l477
 12397  002A06                     u11320:
 12398  002A06                     l9477:
 12399                           
 12400                           ; BSR set to: 0
 12401                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 12402  002A06  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12403  002A08  B4D8               	btfsc	status,2,c
 12404  002A0A  D003               	goto	u11340
 12405                           
 12406                           ; BSR set to: 0
 12407  002A0C  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 12408  002A0E  A4D8               	btfss	status,2,c
 12409  002A10  D783               	goto	l470
 12410  002A12                     u11340:
 12411                           
 12412                           ; BSR set to: 0
 12413                           ;diskio.c: 353: count1 = 0;
 12414                           
 12415                           ; BSR set to: 0
 12416                           
 12417                           ; BSR set to: 0
 12418  002A12  0E00               	movlw	0
 12419  002A14  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 12420  002A16  0E00               	movlw	0
 12421  002A18  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 12422                           
 12423                           ; BSR set to: 0
 12424                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 12425  002A1A  0E10               	movlw	16
 12426  002A1C  0100               	movlb	0	; () banked
 12427  002A1E  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 12428  002A20  0E94               	movlw	148
 12429  002A22                     u14857:
 12430  002A22  2EE8               	decfsz	wreg,f,c
 12431  002A24  D7FE               	bra	u14857
 12432  002A26  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 12433  002A28  D7FC               	bra	u14857
 12434  002A2A  F000               	nop	
 12435                           
 12436                           ;diskio.c: 356: stat = 0X00;
 12437  002A2C  0E00               	movlw	0
 12438  002A2E  0100               	movlb	0	; () banked
 12439  002A30  6F76               	movwf	sdc_disk_initialize@stat& (0+255),b
 12440                           
 12441                           ; BSR set to: 0
 12442                           ;diskio.c: 358: if(!ocr)
 12443  002A32  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12444  002A34  A4D8               	btfss	status,2,c
 12445  002A36  D0B9               	goto	u11440
 12446                           
 12447                           ; BSR set to: 0
 12448                           ;diskio.c: 359: {
 12449                           ;diskio.c: 361: dummy_clocks(10);
 12450  002A38  0E0A               	movlw	10
 12451  002A3A  EC54  F02C         	call	_dummy_clocks
 12452                           
 12453                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 12454  002A3E  0E00               	movlw	0
 12455  002A40  0100               	movlb	0	; () banked
 12456  002A42  6F65               	movwf	command@arg& (0+255),b
 12457  002A44  0E02               	movlw	2
 12458  002A46  6F66               	movwf	(command@arg+1)& (0+255),b
 12459  002A48  0E00               	movlw	0
 12460  002A4A  6F67               	movwf	(command@arg+2)& (0+255),b
 12461  002A4C  0E00               	movlw	0
 12462  002A4E  6F68               	movwf	(command@arg+3)& (0+255),b
 12463  002A50  0EFF               	movlw	255
 12464  002A52  6F69               	movwf	command@CRC& (0+255),b
 12465  002A54  0E50               	movlw	80
 12466  002A56  ECD0  F029         	call	_command
 12467                           
 12468                           ;diskio.c: 363: proceed();
 12469  002A5A  EC39  F02E         	call	_proceed	;wreg free
 12470                           
 12471                           ;diskio.c: 365: buff = 0xFF;
 12472  002A5E  0100               	movlb	0	; () banked
 12473  002A60  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12474  002A62                     
 12475                           ; BSR set to: 0
 12476                           ;diskio.c: 367: buff = response();
 12477                           
 12478                           ; BSR set to: 0
 12479  002A62  EC33  F02E         	call	_response	;wreg free
 12480  002A66  0100               	movlb	0	; () banked
 12481  002A68  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12482                           
 12483                           ; BSR set to: 0
 12484                           ;diskio.c: 368: }while(buff!=0X00);
 12485  002A6A  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12486  002A6C  B4D8               	btfsc	status,2,c
 12487  002A6E  D09D               	goto	u11440
 12488  002A70  D7F8               	goto	l485
 12489  002A72                     l469:
 12490                           
 12491                           ; BSR set to: 0
 12492                           ;diskio.c: 373: else
 12493                           ;diskio.c: 374: {
 12494                           ;diskio.c: 376: count2 = 0;
 12495                           
 12496                           ; BSR set to: 0
 12497  002A72  0E00               	movlw	0
 12498  002A74  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12499  002A76  0E00               	movlw	0
 12500  002A78  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12501                           
 12502                           ; BSR set to: 0
 12503                           ;diskio.c: 377: buff = 0XFF;
 12504  002A7A  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12505                           
 12506                           ; BSR set to: 0
 12507                           ;diskio.c: 378: dummy_clocks(1);
 12508  002A7C  0E01               	movlw	1
 12509  002A7E  EC54  F02C         	call	_dummy_clocks
 12510                           
 12511                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 12512  002A82  0E00               	movlw	0
 12513  002A84  0100               	movlb	0	; () banked
 12514  002A86  6F65               	movwf	command@arg& (0+255),b
 12515  002A88  0E00               	movlw	0
 12516  002A8A  6F66               	movwf	(command@arg+1)& (0+255),b
 12517  002A8C  0E00               	movlw	0
 12518  002A8E  6F67               	movwf	(command@arg+2)& (0+255),b
 12519  002A90  0E00               	movlw	0
 12520  002A92  6F68               	movwf	(command@arg+3)& (0+255),b
 12521  002A94  0EFF               	movlw	255
 12522  002A96  6F69               	movwf	command@CRC& (0+255),b
 12523  002A98  0E69               	movlw	105
 12524  002A9A  ECD0  F029         	call	_command
 12525                           
 12526                           ;diskio.c: 380: proceed();
 12527  002A9E  EC39  F02E         	call	_proceed	;wreg free
 12528  002AA2                     
 12529                           ;diskio.c: 382: buff = response();
 12530  002AA2  EC33  F02E         	call	_response	;wreg free
 12531  002AA6  0100               	movlb	0	; () banked
 12532  002AA8  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12533                           
 12534                           ; BSR set to: 0
 12535                           ;diskio.c: 383: count2++;
 12536  002AAA  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12537  002AAC  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12538                           
 12539                           ; BSR set to: 0
 12540                           ;diskio.c: 384: if(buff==0x00)
 12541  002AAE  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12542  002AB0  A4D8               	btfss	status,2,c
 12543  002AB2  D00C               	goto	l489
 12544                           
 12545                           ; BSR set to: 0
 12546                           ;diskio.c: 385: {
 12547                           ;diskio.c: 386: posicao_cursor_lcd(1,0);
 12548  002AB4  0E00               	movlw	0
 12549  002AB6  6F60               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12550  002AB8  0E01               	movlw	1
 12551  002ABA  ECEF  F028         	call	_posicao_cursor_lcd
 12552                           
 12553                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 12554  002ABE  0E93               	movlw	low STR_13
 12555  002AC0  0100               	movlb	0	; () banked
 12556  002AC2  6F60               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12557  002AC4  0E08               	movlw	high STR_13
 12558  002AC6  6F61               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12559  002AC8  ECDF  F02A         	call	_escreve_frase_ram_lcd	;wreg free
 12560  002ACC                     l489:
 12561                           
 12562                           ;diskio.c: 388: }
 12563                           ;diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 12564  002ACC  0E10               	movlw	16
 12565  002ACE  0100               	movlb	0	; () banked
 12566  002AD0  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 12567  002AD2  0E94               	movlw	148
 12568  002AD4                     u14867:
 12569  002AD4  2EE8               	decfsz	wreg,f,c
 12570  002AD6  D7FE               	bra	u14867
 12571  002AD8  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 12572  002ADA  D7FC               	bra	u14867
 12573  002ADC  F000               	nop	
 12574                           
 12575                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 12576  002ADE  0100               	movlb	0	; () banked
 12577  002AE0  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12578  002AE2  B4D8               	btfsc	status,2,c
 12579  002AE4  D008               	goto	u11390
 12580                           
 12581                           ; BSR set to: 0
 12582  002AE6  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12583  002AE8  D7DC               	goto	l488
 12584  002AEA  0E10               	movlw	16
 12585  002AEC  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12586  002AEE  0E27               	movlw	39
 12587  002AF0  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12588  002AF2  A0D8               	btfss	status,0,c
 12589  002AF4  D7D6               	goto	l488
 12590  002AF6                     u11390:
 12591                           
 12592                           ; BSR set to: 0
 12593                           ;diskio.c: 392: buff = 0xFF;
 12594                           
 12595                           ; BSR set to: 0
 12596  002AF6  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12597                           
 12598                           ; BSR set to: 0
 12599                           ;diskio.c: 393: if(count2==10)
 12600  002AF8  0E0A               	movlw	10
 12601  002AFA  197D               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 12602  002AFC  117E               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12603  002AFE  A4D8               	btfss	status,2,c
 12604  002B00  D038               	goto	u11430
 12605                           
 12606                           ; BSR set to: 0
 12607                           ;diskio.c: 394: {
 12608                           ;diskio.c: 395: count2 = 0;
 12609  002B02  0E00               	movlw	0
 12610  002B04  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12611  002B06  0E00               	movlw	0
 12612  002B08  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12613                           
 12614                           ; BSR set to: 0
 12615                           ;diskio.c: 396: dummy_clocks(10);
 12616  002B0A  0E0A               	movlw	10
 12617  002B0C  EC54  F02C         	call	_dummy_clocks
 12618                           
 12619                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 12620  002B10  0E00               	movlw	0
 12621  002B12  0100               	movlb	0	; () banked
 12622  002B14  6F65               	movwf	command@arg& (0+255),b
 12623  002B16  0E00               	movlw	0
 12624  002B18  6F66               	movwf	(command@arg+1)& (0+255),b
 12625  002B1A  0E00               	movlw	0
 12626  002B1C  6F67               	movwf	(command@arg+2)& (0+255),b
 12627  002B1E  0E00               	movlw	0
 12628  002B20  6F68               	movwf	(command@arg+3)& (0+255),b
 12629  002B22  0EFF               	movlw	255
 12630  002B24  6F69               	movwf	command@CRC& (0+255),b
 12631  002B26  0E41               	movlw	65
 12632  002B28  ECD0  F029         	call	_command
 12633                           
 12634                           ;diskio.c: 398: proceed();
 12635  002B2C  EC39  F02E         	call	_proceed	;wreg free
 12636  002B30                     
 12637                           ;diskio.c: 400: buff = response();
 12638  002B30  EC33  F02E         	call	_response	;wreg free
 12639  002B34  0100               	movlb	0	; () banked
 12640  002B36  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;diskio.c: 401: count2++;
 12644  002B38  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12645  002B3A  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12646                           
 12647                           ; BSR set to: 0
 12648                           ;diskio.c: 402: if(buff==0x00)
 12649  002B3C  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12650  002B3E  A4D8               	btfss	status,2,c
 12651  002B40  D00C               	goto	l495
 12652                           
 12653                           ; BSR set to: 0
 12654                           ;diskio.c: 403: {
 12655                           ;diskio.c: 404: posicao_cursor_lcd(1,0);
 12656  002B42  0E00               	movlw	0
 12657  002B44  6F60               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12658  002B46  0E01               	movlw	1
 12659  002B48  ECEF  F028         	call	_posicao_cursor_lcd
 12660                           
 12661                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 12662  002B4C  0E72               	movlw	low STR_14
 12663  002B4E  0100               	movlb	0	; () banked
 12664  002B50  6F60               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12665  002B52  0E08               	movlw	high STR_14
 12666  002B54  6F61               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12667  002B56  ECDF  F02A         	call	_escreve_frase_ram_lcd	;wreg free
 12668  002B5A                     l495:
 12669                           
 12670                           ;diskio.c: 406: }
 12671                           ;diskio.c: 408: }while(buff!=0X00 && count2<10000);
 12672  002B5A  0100               	movlb	0	; () banked
 12673  002B5C  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12674  002B5E  B4D8               	btfsc	status,2,c
 12675  002B60  D008               	goto	u11430
 12676                           
 12677                           ; BSR set to: 0
 12678  002B62  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12679  002B64  D7E5               	goto	l494
 12680  002B66  0E10               	movlw	16
 12681  002B68  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12682  002B6A  0E27               	movlw	39
 12683  002B6C  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12684  002B6E  A0D8               	btfss	status,0,c
 12685  002B70  D7DF               	goto	l494
 12686  002B72                     u11430:
 12687                           
 12688                           ; BSR set to: 0
 12689                           ;diskio.c: 409: }
 12690                           ;diskio.c: 412: dummy_clocks(10);
 12691                           
 12692                           ; BSR set to: 0
 12693                           
 12694                           ; BSR set to: 0
 12695                           
 12696                           ; BSR set to: 0
 12697  002B72  0E0A               	movlw	10
 12698  002B74  EC54  F02C         	call	_dummy_clocks
 12699                           
 12700                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 12701  002B78  0E00               	movlw	0
 12702  002B7A  0100               	movlb	0	; () banked
 12703  002B7C  6F65               	movwf	command@arg& (0+255),b
 12704  002B7E  0E02               	movlw	2
 12705  002B80  6F66               	movwf	(command@arg+1)& (0+255),b
 12706  002B82  0E00               	movlw	0
 12707  002B84  6F67               	movwf	(command@arg+2)& (0+255),b
 12708  002B86  0E00               	movlw	0
 12709  002B88  6F68               	movwf	(command@arg+3)& (0+255),b
 12710  002B8A  0EFF               	movlw	255
 12711  002B8C  6F69               	movwf	command@CRC& (0+255),b
 12712  002B8E  0E50               	movlw	80
 12713  002B90  ECD0  F029         	call	_command
 12714                           
 12715                           ;diskio.c: 414: proceed();
 12716  002B94  EC39  F02E         	call	_proceed	;wreg free
 12717                           
 12718                           ;diskio.c: 416: buff = 0xFF;
 12719  002B98  0100               	movlb	0	; () banked
 12720  002B9A  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12721  002B9C                     
 12722                           ; BSR set to: 0
 12723                           ;diskio.c: 418: buff = response();
 12724                           
 12725                           ; BSR set to: 0
 12726  002B9C  EC33  F02E         	call	_response	;wreg free
 12727  002BA0  0100               	movlb	0	; () banked
 12728  002BA2  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12729                           
 12730                           ; BSR set to: 0
 12731                           ;diskio.c: 419: }while(buff!=0X00);
 12732  002BA4  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12733  002BA6  A4D8               	btfss	status,2,c
 12734  002BA8  D7F9               	goto	l499
 12735  002BAA                     u11440:
 12736                           
 12737                           ; BSR set to: 0
 12738                           ;diskio.c: 421: }
 12739                           ;diskio.c: 425: return stat;
 12740                           
 12741                           ; BSR set to: 0
 12742                           
 12743                           ; BSR set to: 0
 12744  002BAA  5176               	movf	sdc_disk_initialize@stat& (0+255),w,b
 12745  002BAC  0012               	return	
 12746  002BAE                     __end_of_sdc_disk_initialize:
 12747                           	opt stack 0
 12748                           tosu	equ	0xFFF
 12749                           tosh	equ	0xFFE
 12750                           tosl	equ	0xFFD
 12751                           pclath	equ	0xFFA
 12752                           tblptru	equ	0xFF8
 12753                           tblptrh	equ	0xFF7
 12754                           tblptrl	equ	0xFF6
 12755                           tablat	equ	0xFF5
 12756                           prodh	equ	0xFF4
 12757                           prodl	equ	0xFF3
 12758                           intcon	equ	0xFF2
 12759                           intcon2	equ	0xFF1
 12760                           intcon3	equ	0xFF0
 12761                           indf0	equ	0xFEF
 12762                           postinc0	equ	0xFEE
 12763                           fsr0h	equ	0xFEA
 12764                           fsr0l	equ	0xFE9
 12765                           wreg	equ	0xFE8
 12766                           indf1	equ	0xFE7
 12767                           postinc1	equ	0xFE6
 12768                           postdec1	equ	0xFE5
 12769                           plusw1	equ	0xFE3
 12770                           fsr1h	equ	0xFE2
 12771                           fsr1l	equ	0xFE1
 12772                           indf2	equ	0xFDF
 12773                           postinc2	equ	0xFDE
 12774                           postdec2	equ	0xFDD
 12775                           plusw2	equ	0xFDB
 12776                           fsr2h	equ	0xFDA
 12777                           fsr2l	equ	0xFD9
 12778                           status	equ	0xFD8
 12779                           
 12780 ;; *************** function _sdc_reset *****************
 12781 ;; Defined at:
 12782 ;;		line 238 in file "bibliotecas/diskio.c"
 12783 ;; Parameters:    Size  Location     Type
 12784 ;;		None
 12785 ;; Auto vars:     Size  Location     Type
 12786 ;;  teste          10    0        unsigned char [10]
 12787 ;;  count           2   16[BANK0 ] int 
 12788 ;;  count_nosd      2   14[BANK0 ] int 
 12789 ;;  i               2   12[BANK0 ] int 
 12790 ;;  receive         2    0        unsigned int 
 12791 ;;  buff            1   18[BANK0 ] unsigned char 
 12792 ;;  stat            1    0        unsigned char 
 12793 ;; Return value:  Size  Location     Type
 12794 ;;                  1    wreg      void 
 12795 ;; Registers used:
 12796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12797 ;; Tracked objects:
 12798 ;;		On entry : 0/0
 12799 ;;		On exit  : 0/0
 12800 ;;		Unchanged: 0/0
 12801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12802 ;;      Params:         0       0       0       0       0       0       0       0       0
 12803 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12804 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12805 ;;      Totals:         0       7       0       0       0       0       0       0       0
 12806 ;;Total ram usage:        7 bytes
 12807 ;; Hardware stack levels used:    1
 12808 ;; Hardware stack levels required when called:    6
 12809 ;; This function calls:
 12810 ;;		_command
 12811 ;;		_escreve_frase_ram_lcd
 12812 ;;		_posicao_cursor_lcd
 12813 ;;		_proceed
 12814 ;;		_response
 12815 ;; This function is called by:
 12816 ;;		_sdc_disk_initialize
 12817 ;; This function uses a non-reentrant model
 12818 ;;
 12819                           
 12820                           	psect	text39
 12821  004BA0                     __ptext39:
 12822                           	opt stack 0
 12823  004BA0                     _sdc_reset:
 12824                           	opt stack 17
 12825                           
 12826                           ;diskio.c: 240: int i = 0, count = 0, count_nosd = 0;
 12827                           
 12828                           ; BSR set to: 0
 12829                           ;incstack = 0
 12830  004BA0  0E00               	movlw	0
 12831  004BA2  0100               	movlb	0	; () banked
 12832  004BA4  6F6D               	movwf	(sdc_reset@i+1)& (0+255),b
 12833  004BA6  0E00               	movlw	0
 12834  004BA8  6F6C               	movwf	sdc_reset@i& (0+255),b
 12835  004BAA  0E00               	movlw	0
 12836  004BAC  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 12837  004BAE  0E00               	movlw	0
 12838  004BB0  6F70               	movwf	sdc_reset@count& (0+255),b
 12839  004BB2  0E00               	movlw	0
 12840  004BB4  6F6F               	movwf	(sdc_reset@count_nosd+1)& (0+255),b
 12841  004BB6  0E00               	movlw	0
 12842  004BB8  6F6E               	movwf	sdc_reset@count_nosd& (0+255),b
 12843  004BBA                     
 12844                           ; BSR set to: 0
 12845                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 12846                           
 12847                           ; BSR set to: 0
 12848  004BBA  0E00               	movlw	0
 12849  004BBC  6F65               	movwf	command@arg& (0+255),b
 12850  004BBE  0E00               	movlw	0
 12851  004BC0  6F66               	movwf	(command@arg+1)& (0+255),b
 12852  004BC2  0E00               	movlw	0
 12853  004BC4  6F67               	movwf	(command@arg+2)& (0+255),b
 12854  004BC6  0E00               	movlw	0
 12855  004BC8  6F68               	movwf	(command@arg+3)& (0+255),b
 12856  004BCA  0E95               	movlw	149
 12857  004BCC  6F69               	movwf	command@CRC& (0+255),b
 12858  004BCE  0E40               	movlw	64
 12859  004BD0  ECD0  F029         	call	_command
 12860                           
 12861                           ;diskio.c: 249: proceed();
 12862  004BD4  EC39  F02E         	call	_proceed	;wreg free
 12863  004BD8                     
 12864                           ;diskio.c: 251: buff = response();
 12865  004BD8  EC33  F02E         	call	_response	;wreg free
 12866  004BDC  0100               	movlb	0	; () banked
 12867  004BDE  6F72               	movwf	sdc_reset@buff& (0+255),b
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;diskio.c: 252: count++;
 12871  004BE0  4B70               	infsnz	sdc_reset@count& (0+255),f,b
 12872  004BE2  2B71               	incf	(sdc_reset@count+1)& (0+255),f,b
 12873                           
 12874                           ; BSR set to: 0
 12875                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 12876  004BE4  0572               	decf	sdc_reset@buff& (0+255),w,b
 12877  004BE6  B4D8               	btfsc	status,2,c
 12878  004BE8  D008               	goto	u10990
 12879                           
 12880                           ; BSR set to: 0
 12881  004BEA  BF71               	btfsc	(sdc_reset@count+1)& (0+255),7,b
 12882  004BEC  D7F5               	goto	l453
 12883  004BEE  5171               	movf	(sdc_reset@count+1)& (0+255),w,b
 12884  004BF0  E104               	bnz	l9265
 12885  004BF2  0E0A               	movlw	10
 12886  004BF4  5D70               	subwf	sdc_reset@count& (0+255),w,b
 12887  004BF6  A0D8               	btfss	status,0,c
 12888  004BF8  D7EF               	goto	l453
 12889  004BFA                     u10990:
 12890  004BFA                     l9265:
 12891                           
 12892                           ; BSR set to: 0
 12893                           ;diskio.c: 254: count = 0;
 12894  004BFA  0E00               	movlw	0
 12895  004BFC  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 12896  004BFE  0E00               	movlw	0
 12897  004C00  6F70               	movwf	sdc_reset@count& (0+255),b
 12898                           
 12899                           ; BSR set to: 0
 12900                           ;diskio.c: 255: if(buff != 0x01)
 12901  004C02  0572               	decf	sdc_reset@buff& (0+255),w,b
 12902  004C04  B4D8               	btfsc	status,2,c
 12903  004C06  D019               	goto	l457
 12904                           
 12905                           ; BSR set to: 0
 12906                           ;diskio.c: 256: {
 12907                           ;diskio.c: 257: posicao_cursor_lcd(1,0);
 12908  004C08  0E00               	movlw	0
 12909  004C0A  6F60               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12910  004C0C  0E01               	movlw	1
 12911  004C0E  ECEF  F028         	call	_posicao_cursor_lcd
 12912                           
 12913                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 12914  004C12  0E7D               	movlw	low STR_11
 12915  004C14  0100               	movlb	0	; () banked
 12916  004C16  6F60               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12917  004C18  0E08               	movlw	high STR_11
 12918  004C1A  6F61               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12919  004C1C  ECDF  F02A         	call	_escreve_frase_ram_lcd	;wreg free
 12920                           
 12921                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 12922  004C20  0E00               	movlw	0
 12923  004C22  0100               	movlb	0	; () banked
 12924  004C24  6F60               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12925  004C26  0E02               	movlw	2
 12926  004C28  ECEF  F028         	call	_posicao_cursor_lcd
 12927                           
 12928                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 12929  004C2C  0E38               	movlw	low STR_12
 12930  004C2E  0100               	movlb	0	; () banked
 12931  004C30  6F60               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12932  004C32  0E08               	movlw	high STR_12
 12933  004C34  6F61               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12934  004C36  ECDF  F02A         	call	_escreve_frase_ram_lcd	;wreg free
 12935  004C3A                     l457:
 12936                           
 12937                           ;diskio.c: 261: }
 12938                           ;diskio.c: 263: }while(buff!=0X01);
 12939  004C3A  0100               	movlb	0	; () banked
 12940  004C3C  0572               	decf	sdc_reset@buff& (0+255),w,b
 12941  004C3E  B4D8               	btfsc	status,2,c
 12942  004C40  0012               	return	
 12943  004C42  D7BB               	goto	l452
 12944  004C44                     __end_of_sdc_reset:
 12945                           	opt stack 0
 12946                           tosu	equ	0xFFF
 12947                           tosh	equ	0xFFE
 12948                           tosl	equ	0xFFD
 12949                           pclath	equ	0xFFA
 12950                           tblptru	equ	0xFF8
 12951                           tblptrh	equ	0xFF7
 12952                           tblptrl	equ	0xFF6
 12953                           tablat	equ	0xFF5
 12954                           prodh	equ	0xFF4
 12955                           prodl	equ	0xFF3
 12956                           intcon	equ	0xFF2
 12957                           intcon2	equ	0xFF1
 12958                           intcon3	equ	0xFF0
 12959                           indf0	equ	0xFEF
 12960                           postinc0	equ	0xFEE
 12961                           fsr0h	equ	0xFEA
 12962                           fsr0l	equ	0xFE9
 12963                           wreg	equ	0xFE8
 12964                           indf1	equ	0xFE7
 12965                           postinc1	equ	0xFE6
 12966                           postdec1	equ	0xFE5
 12967                           plusw1	equ	0xFE3
 12968                           fsr1h	equ	0xFE2
 12969                           fsr1l	equ	0xFE1
 12970                           indf2	equ	0xFDF
 12971                           postinc2	equ	0xFDE
 12972                           postdec2	equ	0xFDD
 12973                           plusw2	equ	0xFDB
 12974                           fsr2h	equ	0xFDA
 12975                           fsr2l	equ	0xFD9
 12976                           status	equ	0xFD8
 12977                           
 12978 ;; *************** function _posicao_cursor_lcd *****************
 12979 ;; Defined at:
 12980 ;;		line 271 in file "bibliotecas/display_lcd.c"
 12981 ;; Parameters:    Size  Location     Type
 12982 ;;  linha           1    wreg     unsigned char 
 12983 ;;  coluna          1    0[BANK0 ] unsigned char 
 12984 ;; Auto vars:     Size  Location     Type
 12985 ;;  linha           1    1[BANK0 ] unsigned char 
 12986 ;;  endereco        1    2[BANK0 ] unsigned char 
 12987 ;; Return value:  Size  Location     Type
 12988 ;;                  1    wreg      void 
 12989 ;; Registers used:
 12990 ;;		wreg, status,2, status,0, cstack
 12991 ;; Tracked objects:
 12992 ;;		On entry : 0/0
 12993 ;;		On exit  : 0/0
 12994 ;;		Unchanged: 0/0
 12995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12996 ;;      Params:         0       1       0       0       0       0       0       0       0
 12997 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12998 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12999 ;;      Totals:         0       3       0       0       0       0       0       0       0
 13000 ;;Total ram usage:        3 bytes
 13001 ;; Hardware stack levels used:    1
 13002 ;; Hardware stack levels required when called:    5
 13003 ;; This function calls:
 13004 ;;		_endereco_cursor_lcd
 13005 ;; This function is called by:
 13006 ;;		_mensagem_inicial
 13007 ;;		_verifica_fence_externo
 13008 ;;		_sdc_reset
 13009 ;;		_sdc_disk_initialize
 13010 ;;		_sdcard_init
 13011 ;; This function uses a non-reentrant model
 13012 ;;
 13013                           
 13014                           	psect	text40
 13015  0051DE                     __ptext40:
 13016                           	opt stack 0
 13017  0051DE                     _posicao_cursor_lcd:
 13018                           	opt stack 24
 13019                           
 13020                           ; BSR set to: 0
 13021                           ;incstack = 0
 13022                           ;posicao_cursor_lcd@linha stored from wreg
 13023  0051DE  0100               	movlb	0	; () banked
 13024  0051E0  6F61               	movwf	posicao_cursor_lcd@linha& (0+255),b
 13025                           
 13026                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 13027  0051E2  0E00               	movlw	0
 13028  0051E4  0100               	movlb	0	; () banked
 13029  0051E6  6F62               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 13030                           
 13031                           ; BSR set to: 0
 13032                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 13033  0051E8  0E11               	movlw	17
 13034  0051EA  6160               	cpfslt	posicao_cursor_lcd@coluna& (0+255),b
 13035  0051EC  D034               	goto	l607
 13036  0051EE  D022               	goto	l608
 13037  0051F0                     l609:
 13038                           
 13039                           ; BSR set to: 0
 13040                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 13041  0051F0  C060  F062         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 13042                           
 13043                           ; BSR set to: 0
 13044                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 13045  0051F4  5162               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 13046  0051F6  EC67  F029         	call	_endereco_cursor_lcd
 13047                           
 13048                           ;display_lcd.c: 284: break;
 13049  0051FA  D02A               	goto	l610
 13050  0051FC                     
 13051                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 13052  0051FC  0100               	movlb	0	; () banked
 13053  0051FE  5160               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 13054  005200  0F40               	addlw	64
 13055  005202  6F62               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 13056                           
 13057                           ; BSR set to: 0
 13058                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 13059  005204  5162               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 13060  005206  EC67  F029         	call	_endereco_cursor_lcd
 13061                           
 13062                           ;display_lcd.c: 289: break;
 13063  00520A  D022               	goto	l610
 13064  00520C                     
 13065                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 13066  00520C  0100               	movlb	0	; () banked
 13067  00520E  5160               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 13068  005210  0F14               	addlw	20
 13069  005212  6F62               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 13070                           
 13071                           ; BSR set to: 0
 13072                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 13073  005214  5162               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 13074  005216  EC67  F029         	call	_endereco_cursor_lcd
 13075                           
 13076                           ;display_lcd.c: 294: break;
 13077  00521A  D01A               	goto	l610
 13078  00521C                     
 13079                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 13080  00521C  0100               	movlb	0	; () banked
 13081  00521E  5160               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 13082  005220  0F54               	addlw	84
 13083  005222  6F62               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 13084                           
 13085                           ; BSR set to: 0
 13086                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 13087  005224  5162               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 13088  005226  EC67  F029         	call	_endereco_cursor_lcd
 13089                           
 13090                           ;display_lcd.c: 299: break;
 13091  00522A  D012               	goto	l610
 13092  00522C                     
 13093                           ;display_lcd.c: 302: endereco = 0x00U;
 13094  00522C  0E00               	movlw	0
 13095  00522E  0100               	movlb	0	; () banked
 13096  005230  6F62               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 13097                           
 13098                           ; BSR set to: 0
 13099                           ;display_lcd.c: 304: }
 13100                           
 13101                           ;display_lcd.c: 303: break;
 13102  005232  D00E               	goto	l610
 13103  005234                     l608:
 13104                           
 13105                           ; BSR set to: 0
 13106                           
 13107                           ; BSR set to: 0
 13108  005234  5161               	movf	posicao_cursor_lcd@linha& (0+255),w,b
 13109                           
 13110                           ; Switch size 1, requested type "space"
 13111                           ; Number of cases is 4, Range of values is 1 to 4
 13112                           ; switch strategies available:
 13113                           ; Name         Instructions Cycles
 13114                           ; simple_byte           13     7 (average)
 13115                           ;	Chosen strategy is simple_byte
 13116  005236  0A01               	xorlw	1	; case 1
 13117  005238  B4D8               	btfsc	status,2,c
 13118  00523A  D7DA               	goto	l609
 13119  00523C  0A03               	xorlw	3	; case 2
 13120  00523E  B4D8               	btfsc	status,2,c
 13121  005240  D7DD               	goto	l611
 13122  005242  0A01               	xorlw	1	; case 3
 13123  005244  B4D8               	btfsc	status,2,c
 13124  005246  D7E2               	goto	l612
 13125  005248  0A07               	xorlw	7	; case 4
 13126  00524A  B4D8               	btfsc	status,2,c
 13127  00524C  D7E7               	goto	l613
 13128  00524E  D7EE               	goto	l614
 13129  005250                     l610:
 13130                           
 13131                           ;display_lcd.c: 306: coluna++;
 13132                           
 13133                           ; BSR set to: 0
 13134  005250  0100               	movlb	0	; () banked
 13135  005252  2B60               	incf	posicao_cursor_lcd@coluna& (0+255),f,b
 13136                           
 13137                           ;display_lcd.c: 307: }
 13138  005254  0012               	return	
 13139  005256                     l607:
 13140                           
 13141                           ; BSR set to: 0
 13142                           ;display_lcd.c: 308: else
 13143                           ;display_lcd.c: 309: {
 13144                           ;display_lcd.c: 310: endereco = 0x00U;
 13145                           
 13146                           ; BSR set to: 0
 13147  005256  0E00               	movlw	0
 13148  005258  6F62               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 13149  00525A  0012               	return	
 13150  00525C                     __end_of_posicao_cursor_lcd:
 13151                           	opt stack 0
 13152                           tosu	equ	0xFFF
 13153                           tosh	equ	0xFFE
 13154                           tosl	equ	0xFFD
 13155                           pclath	equ	0xFFA
 13156                           tblptru	equ	0xFF8
 13157                           tblptrh	equ	0xFF7
 13158                           tblptrl	equ	0xFF6
 13159                           tablat	equ	0xFF5
 13160                           prodh	equ	0xFF4
 13161                           prodl	equ	0xFF3
 13162                           intcon	equ	0xFF2
 13163                           intcon2	equ	0xFF1
 13164                           intcon3	equ	0xFF0
 13165                           indf0	equ	0xFEF
 13166                           postinc0	equ	0xFEE
 13167                           fsr0h	equ	0xFEA
 13168                           fsr0l	equ	0xFE9
 13169                           wreg	equ	0xFE8
 13170                           indf1	equ	0xFE7
 13171                           postinc1	equ	0xFE6
 13172                           postdec1	equ	0xFE5
 13173                           plusw1	equ	0xFE3
 13174                           fsr1h	equ	0xFE2
 13175                           fsr1l	equ	0xFE1
 13176                           indf2	equ	0xFDF
 13177                           postinc2	equ	0xFDE
 13178                           postdec2	equ	0xFDD
 13179                           plusw2	equ	0xFDB
 13180                           fsr2h	equ	0xFDA
 13181                           fsr2l	equ	0xFD9
 13182                           status	equ	0xFD8
 13183                           
 13184 ;; *************** function _endereco_cursor_lcd *****************
 13185 ;; Defined at:
 13186 ;;		line 218 in file "bibliotecas/display_lcd.c"
 13187 ;; Parameters:    Size  Location     Type
 13188 ;;  endereco        1    wreg     unsigned char 
 13189 ;; Auto vars:     Size  Location     Type
 13190 ;;  endereco        1   34[COMRAM] unsigned char 
 13191 ;; Return value:  Size  Location     Type
 13192 ;;                  1    wreg      void 
 13193 ;; Registers used:
 13194 ;;		wreg, status,2, status,0, cstack
 13195 ;; Tracked objects:
 13196 ;;		On entry : 0/0
 13197 ;;		On exit  : 0/0
 13198 ;;		Unchanged: 0/0
 13199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13200 ;;      Params:         0       0       0       0       0       0       0       0       0
 13201 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13202 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13203 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13204 ;;Total ram usage:        1 bytes
 13205 ;; Hardware stack levels used:    1
 13206 ;; Hardware stack levels required when called:    4
 13207 ;; This function calls:
 13208 ;;		_delay
 13209 ;; This function is called by:
 13210 ;;		_posicao_cursor_lcd
 13211 ;;		_cria_caractere_lcd
 13212 ;; This function uses a non-reentrant model
 13213 ;;
 13214                           
 13215                           	psect	text41
 13216  0052CE                     __ptext41:
 13217                           	opt stack 0
 13218  0052CE                     _endereco_cursor_lcd:
 13219                           	opt stack 24
 13220                           
 13221                           ; BSR set to: 0
 13222                           ;incstack = 0
 13223                           ;endereco_cursor_lcd@endereco stored from wreg
 13224  0052CE  6E23               	movwf	endereco_cursor_lcd@endereco,c
 13225                           
 13226                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 13227  0052D0  9483               	bcf	3971,2,c	;volatile
 13228                           
 13229                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 13230  0052D2  9283               	bcf	3971,1,c	;volatile
 13231                           
 13232                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 13233  0052D4  9083               	bcf	3971,0,c	;volatile
 13234                           
 13235                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 13236  0052D6  8E83               	bsf	3971,7,c	;volatile
 13237                           
 13238                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 13239  0052D8  A823               	btfss	endereco_cursor_lcd@endereco,4,c
 13240  0052DA  D002               	goto	l590
 13241  0052DC  8883               	bsf	3971,4,c	;volatile
 13242  0052DE  D001               	goto	l591
 13243  0052E0                     l590:
 13244                           
 13245                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 13246  0052E0  9883               	bcf	3971,4,c	;volatile
 13247  0052E2                     l591:
 13248                           
 13249                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 13250  0052E2  AA23               	btfss	endereco_cursor_lcd@endereco,5,c
 13251  0052E4  D002               	goto	l592
 13252  0052E6  8A83               	bsf	3971,5,c	;volatile
 13253  0052E8  D001               	goto	l593
 13254  0052EA                     l592:
 13255                           
 13256                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 13257  0052EA  9A83               	bcf	3971,5,c	;volatile
 13258  0052EC                     l593:
 13259                           
 13260                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 13261  0052EC  AC23               	btfss	endereco_cursor_lcd@endereco,6,c
 13262  0052EE  D002               	goto	l594
 13263  0052F0  8C83               	bsf	3971,6,c	;volatile
 13264  0052F2  D001               	goto	l595
 13265  0052F4                     l594:
 13266                           
 13267                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 13268  0052F4  9C83               	bcf	3971,6,c	;volatile
 13269  0052F6                     l595:
 13270                           
 13271                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 13272  0052F6  8083               	bsf	3971,0,c	;volatile
 13273                           
 13274                           ;display_lcd.c: 236: delay();
 13275  0052F8  ECA6  F02D         	call	_delay	;wreg free
 13276                           
 13277                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 13278  0052FC  9083               	bcf	3971,0,c	;volatile
 13279                           
 13280                           ;display_lcd.c: 238: delay();
 13281  0052FE  ECA6  F02D         	call	_delay	;wreg free
 13282                           
 13283                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 13284  005302  A023               	btfss	endereco_cursor_lcd@endereco,0,c
 13285  005304  D002               	goto	l596
 13286  005306  8883               	bsf	3971,4,c	;volatile
 13287  005308  D001               	goto	l597
 13288  00530A                     l596:
 13289                           
 13290                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 13291  00530A  9883               	bcf	3971,4,c	;volatile
 13292  00530C                     l597:
 13293                           
 13294                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 13295  00530C  A223               	btfss	endereco_cursor_lcd@endereco,1,c
 13296  00530E  D002               	goto	l598
 13297  005310  8A83               	bsf	3971,5,c	;volatile
 13298  005312  D001               	goto	l599
 13299  005314                     l598:
 13300                           
 13301                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 13302  005314  9A83               	bcf	3971,5,c	;volatile
 13303  005316                     l599:
 13304                           
 13305                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 13306  005316  A423               	btfss	endereco_cursor_lcd@endereco,2,c
 13307  005318  D002               	goto	l600
 13308  00531A  8C83               	bsf	3971,6,c	;volatile
 13309  00531C  D001               	goto	l601
 13310  00531E                     l600:
 13311                           
 13312                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 13313  00531E  9C83               	bcf	3971,6,c	;volatile
 13314  005320                     l601:
 13315                           
 13316                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 13317  005320  A623               	btfss	endereco_cursor_lcd@endereco,3,c
 13318  005322  D002               	goto	l602
 13319  005324  8E83               	bsf	3971,7,c	;volatile
 13320  005326  D001               	goto	l603
 13321  005328                     l602:
 13322                           
 13323                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 13324  005328  9E83               	bcf	3971,7,c	;volatile
 13325  00532A                     l603:
 13326                           
 13327                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 13328  00532A  8083               	bsf	3971,0,c	;volatile
 13329                           
 13330                           ;display_lcd.c: 252: delay();
 13331  00532C  ECA6  F02D         	call	_delay	;wreg free
 13332                           
 13333                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 13334  005330  9083               	bcf	3971,0,c	;volatile
 13335                           
 13336                           ;display_lcd.c: 254: delay();
 13337  005332  ECA6  F02D         	call	_delay	;wreg free
 13338  005336  0012               	return		;funcret
 13339  005338                     __end_of_endereco_cursor_lcd:
 13340                           	opt stack 0
 13341                           tosu	equ	0xFFF
 13342                           tosh	equ	0xFFE
 13343                           tosl	equ	0xFFD
 13344                           pclath	equ	0xFFA
 13345                           tblptru	equ	0xFF8
 13346                           tblptrh	equ	0xFF7
 13347                           tblptrl	equ	0xFF6
 13348                           tablat	equ	0xFF5
 13349                           prodh	equ	0xFF4
 13350                           prodl	equ	0xFF3
 13351                           intcon	equ	0xFF2
 13352                           intcon2	equ	0xFF1
 13353                           intcon3	equ	0xFF0
 13354                           indf0	equ	0xFEF
 13355                           postinc0	equ	0xFEE
 13356                           fsr0h	equ	0xFEA
 13357                           fsr0l	equ	0xFE9
 13358                           wreg	equ	0xFE8
 13359                           indf1	equ	0xFE7
 13360                           postinc1	equ	0xFE6
 13361                           postdec1	equ	0xFE5
 13362                           plusw1	equ	0xFE3
 13363                           fsr1h	equ	0xFE2
 13364                           fsr1l	equ	0xFE1
 13365                           indf2	equ	0xFDF
 13366                           postinc2	equ	0xFDE
 13367                           postdec2	equ	0xFDD
 13368                           plusw2	equ	0xFDB
 13369                           fsr2h	equ	0xFDA
 13370                           fsr2l	equ	0xFD9
 13371                           status	equ	0xFD8
 13372                           
 13373 ;; *************** function _check_fs *****************
 13374 ;; Defined at:
 13375 ;;		line 623 in file "bibliotecas/tff.c"
 13376 ;; Parameters:    Size  Location     Type
 13377 ;;  sect            4   42[BANK0 ] unsigned long 
 13378 ;; Auto vars:     Size  Location     Type
 13379 ;;  fs              2   48[BANK0 ] PTR struct _FATFS
 13380 ;;		 -> NULL(0), fs(544), 
 13381 ;; Return value:  Size  Location     Type
 13382 ;;                  1    wreg      unsigned char 
 13383 ;; Registers used:
 13384 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13385 ;; Tracked objects:
 13386 ;;		On entry : 0/0
 13387 ;;		On exit  : 0/0
 13388 ;;		Unchanged: 0/0
 13389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13390 ;;      Params:         0       4       0       0       0       0       0       0       0
 13391 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13392 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13393 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13394 ;;Total ram usage:        8 bytes
 13395 ;; Hardware stack levels used:    1
 13396 ;; Hardware stack levels required when called:    8
 13397 ;; This function calls:
 13398 ;;		_disk_read
 13399 ;;		_memcmp
 13400 ;; This function is called by:
 13401 ;;		_auto_mount
 13402 ;; This function uses a non-reentrant model
 13403 ;;
 13404                           
 13405                           	psect	text42
 13406  004EAA                     __ptext42:
 13407                           	opt stack 0
 13408  004EAA                     _check_fs:
 13409                           	opt stack 17
 13410                           
 13411                           ;tff.c: 627: FATFS *fs = FatFs;
 13412                           
 13413                           ;incstack = 0
 13414  004EAA  C0FC  F090         	movff	_FatFs,check_fs@fs
 13415  004EAE  C0FD  F091         	movff	_FatFs+1,check_fs@fs+1
 13416                           
 13417                           ;tff.c: 629: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 13418  004EB2  0E20               	movlw	32
 13419  004EB4  0100               	movlb	0	; () banked
 13420  004EB6  2590               	addwf	check_fs@fs& (0+255),w,b
 13421  004EB8  6F7F               	movwf	disk_read@buff& (0+255),b
 13422  004EBA  0E00               	movlw	0
 13423  004EBC  2191               	addwfc	(check_fs@fs+1)& (0+255),w,b
 13424  004EBE  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 13425  004EC0  C08A  F081         	movff	check_fs@sect,disk_read@sector
 13426  004EC4  C08B  F082         	movff	check_fs@sect+1,disk_read@sector+1
 13427  004EC8  C08C  F083         	movff	check_fs@sect+2,disk_read@sector+2
 13428  004ECC  C08D  F084         	movff	check_fs@sect+3,disk_read@sector+3
 13429  004ED0  0E01               	movlw	1
 13430  004ED2  6F85               	movwf	disk_read@count& (0+255),b
 13431  004ED4  0E00               	movlw	0
 13432  004ED6  EC0D  F027         	call	_disk_read
 13433  004EDA  0900               	iorlw	0
 13434  004EDC  B4D8               	btfsc	status,2,c
 13435  004EDE  D002               	goto	l1102
 13436                           
 13437                           ;tff.c: 630: return 2;
 13438  004EE0  0E02               	movlw	2
 13439  004EE2  0012               	return	
 13440  004EE4                     l1102:
 13441                           
 13442                           ;tff.c: 631: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 13443  004EE4  0100               	movlb	0	; () banked
 13444  004EE6  EE22 F01E          	lfsr	2,542
 13445  004EEA  5190               	movf	check_fs@fs& (0+255),w,b
 13446  004EEC  26D9               	addwf	fsr2l,f,c
 13447  004EEE  5191               	movf	(check_fs@fs+1)& (0+255),w,b
 13448  004EF0  22DA               	addwfc	fsr2h,f,c
 13449  004EF2  0E55               	movlw	85
 13450  004EF4  18DE               	xorwf	postinc2,w,c
 13451  004EF6  E104               	bnz	u12140
 13452  004EF8  0EAA               	movlw	170
 13453  004EFA  18DE               	xorwf	postinc2,w,c
 13454  004EFC  B4D8               	btfsc	status,2,c
 13455  004EFE  D002               	goto	l1104
 13456  004F00                     u12140:
 13457                           
 13458                           ; BSR set to: 0
 13459                           ;tff.c: 632: return 2;
 13460  004F00  0E02               	movlw	2
 13461                           
 13462                           ; BSR set to: 0
 13463  004F02  0012               	return	
 13464  004F04                     l1104:
 13465                           
 13466                           ; BSR set to: 0
 13467                           ;tff.c: 634: if (!memcmp(&fs->win[54], "FAT", 3))
 13468                           
 13469                           ; BSR set to: 0
 13470  004F04  0E56               	movlw	86
 13471  004F06  2590               	addwf	check_fs@fs& (0+255),w,b
 13472  004F08  6F60               	movwf	memcmp@s1& (0+255),b
 13473  004F0A  0E00               	movlw	0
 13474  004F0C  2191               	addwfc	(check_fs@fs+1)& (0+255),w,b
 13475  004F0E  6F61               	movwf	(memcmp@s1+1)& (0+255),b
 13476  004F10  0EC6               	movlw	low STR_16
 13477  004F12  6F62               	movwf	memcmp@s2& (0+255),b
 13478  004F14  0E08               	movlw	high STR_16
 13479  004F16  6F63               	movwf	(memcmp@s2+1)& (0+255),b
 13480  004F18  0E00               	movlw	0
 13481  004F1A  6F65               	movwf	(memcmp@n+1)& (0+255),b
 13482  004F1C  0E03               	movlw	3
 13483  004F1E  6F64               	movwf	memcmp@n& (0+255),b
 13484  004F20  EC22  F026         	call	_memcmp	;wreg free
 13485  004F24  0100               	movlb	0	; () banked
 13486  004F26  5160               	movf	?_memcmp& (0+255),w,b
 13487  004F28  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 13488  004F2A  A4D8               	btfss	status,2,c
 13489  004F2C  D002               	goto	l1105
 13490                           
 13491                           ; BSR set to: 0
 13492                           ;tff.c: 635: return 0;
 13493  004F2E  0E00               	movlw	0
 13494                           
 13495                           ; BSR set to: 0
 13496  004F30  0012               	return	
 13497  004F32                     l1105:
 13498                           
 13499                           ; BSR set to: 0
 13500                           ;tff.c: 640: return 1;
 13501                           
 13502                           ; BSR set to: 0
 13503  004F32  0E01               	movlw	1
 13504  004F34  0012               	return	
 13505  004F36                     __end_of_check_fs:
 13506                           	opt stack 0
 13507                           tosu	equ	0xFFF
 13508                           tosh	equ	0xFFE
 13509                           tosl	equ	0xFFD
 13510                           pclath	equ	0xFFA
 13511                           tblptru	equ	0xFF8
 13512                           tblptrh	equ	0xFF7
 13513                           tblptrl	equ	0xFF6
 13514                           tablat	equ	0xFF5
 13515                           prodh	equ	0xFF4
 13516                           prodl	equ	0xFF3
 13517                           intcon	equ	0xFF2
 13518                           intcon2	equ	0xFF1
 13519                           intcon3	equ	0xFF0
 13520                           indf0	equ	0xFEF
 13521                           postinc0	equ	0xFEE
 13522                           fsr0h	equ	0xFEA
 13523                           fsr0l	equ	0xFE9
 13524                           wreg	equ	0xFE8
 13525                           indf1	equ	0xFE7
 13526                           postinc1	equ	0xFE6
 13527                           postdec1	equ	0xFE5
 13528                           plusw1	equ	0xFE3
 13529                           fsr1h	equ	0xFE2
 13530                           fsr1l	equ	0xFE1
 13531                           indf2	equ	0xFDF
 13532                           postinc2	equ	0xFDE
 13533                           postdec2	equ	0xFDD
 13534                           plusw2	equ	0xFDB
 13535                           fsr2h	equ	0xFDA
 13536                           fsr2l	equ	0xFD9
 13537                           status	equ	0xFD8
 13538                           
 13539 ;; *************** function _memcmp *****************
 13540 ;; Defined at:
 13541 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
 13542 ;; Parameters:    Size  Location     Type
 13543 ;;  s1              2    0[BANK0 ] PTR const void 
 13544 ;;		 -> fs.win(512), NULL(0), fs(544), 
 13545 ;;  s2              2    2[BANK0 ] PTR const void 
 13546 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_16(4), 
 13547 ;;  n               2    4[BANK0 ] unsigned int 
 13548 ;; Auto vars:     Size  Location     Type
 13549 ;;		None
 13550 ;; Return value:  Size  Location     Type
 13551 ;;                  2    0[BANK0 ] int 
 13552 ;; Registers used:
 13553 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 13554 ;; Tracked objects:
 13555 ;;		On entry : 0/0
 13556 ;;		On exit  : 0/0
 13557 ;;		Unchanged: 0/0
 13558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13559 ;;      Params:         0       6       0       0       0       0       0       0       0
 13560 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13561 ;;      Temps:          3       0       0       0       0       0       0       0       0
 13562 ;;      Totals:         3       6       0       0       0       0       0       0       0
 13563 ;;Total ram usage:        9 bytes
 13564 ;; Hardware stack levels used:    1
 13565 ;; Hardware stack levels required when called:    3
 13566 ;; This function calls:
 13567 ;;		Nothing
 13568 ;; This function is called by:
 13569 ;;		_trace_path
 13570 ;;		_check_fs
 13571 ;; This function uses a non-reentrant model
 13572 ;;
 13573                           
 13574                           	psect	text43
 13575  004C44                     __ptext43:
 13576                           	opt stack 0
 13577  004C44                     _memcmp:
 13578                           	opt stack 22
 13579                           
 13580                           ;incstack = 0
 13581  004C44  D042               	goto	l1828
 13582  004C46                     l9583:
 13583  004C46  C060  FFD9         	movff	memcmp@s1,fsr2l
 13584  004C4A  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 13585  004C4E  50DF               	movf	indf2,w,c
 13586  004C50  6E21               	movwf	??_memcmp& (0+255),c
 13587  004C52  C062  FFF6         	movff	memcmp@s2,tblptrl
 13588  004C56  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 13589  004C5A  6AF8               	clrf	tblptru,c
 13590  004C5C  0E07               	movlw	(high __ramtop+-1)
 13591  004C5E  64F7               	cpfsgt	tblptrh,c
 13592  004C60  D003               	bra	u11467
 13593  004C62  0008               	tblrd		*
 13594  004C64  50F5               	movf	tablat,w,c
 13595  004C66  D005               	bra	u11460
 13596  004C68                     u11467:
 13597  004C68  CFF6 FFE9          	movff	tblptrl,fsr0l
 13598  004C6C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13599  004C70  50EF               	movf	indf0,w,c
 13600  004C72                     u11460:
 13601  004C72  1821               	xorwf	??_memcmp,w,c
 13602  004C74  B4D8               	btfsc	status,2,c
 13603  004C76  D024               	goto	l1830
 13604  004C78  C062  FFF6         	movff	memcmp@s2,tblptrl
 13605  004C7C  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 13606  004C80  6AF8               	clrf	tblptru,c
 13607  004C82  0E07               	movlw	(high __ramtop+-1)
 13608  004C84  64F7               	cpfsgt	tblptrh,c
 13609  004C86  D003               	bra	u11487
 13610  004C88  0008               	tblrd		*
 13611  004C8A  50F5               	movf	tablat,w,c
 13612  004C8C  D005               	bra	u11480
 13613  004C8E                     u11487:
 13614  004C8E  CFF6 FFE9          	movff	tblptrl,fsr0l
 13615  004C92  CFF7 FFEA          	movff	tblptrh,fsr0h
 13616  004C96  50EF               	movf	indf0,w,c
 13617  004C98                     u11480:
 13618  004C98  6E21               	movwf	??_memcmp& (0+255),c
 13619  004C9A  6A22               	clrf	(??_memcmp+1)& (0+255),c
 13620  004C9C  1E21               	comf	??_memcmp,f,c
 13621  004C9E  1E22               	comf	??_memcmp+1,f,c
 13622  004CA0  4A21               	infsnz	??_memcmp,f,c
 13623  004CA2  2A22               	incf	??_memcmp+1,f,c
 13624  004CA4  C060  FFD9         	movff	memcmp@s1,fsr2l
 13625  004CA8  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 13626  004CAC  50DF               	movf	indf2,w,c
 13627  004CAE  6E23               	movwf	(??_memcmp+2)& (0+255),c
 13628  004CB0  5023               	movf	??_memcmp+2,w,c
 13629  004CB2  2421               	addwf	??_memcmp,w,c
 13630  004CB4  0100               	movlb	0	; () banked
 13631  004CB6  6F60               	movwf	?_memcmp& (0+255),b
 13632  004CB8  0E00               	movlw	0
 13633  004CBA  2022               	addwfc	??_memcmp+1,w,c
 13634  004CBC  6F61               	movwf	(?_memcmp+1)& (0+255),b
 13635                           
 13636                           ; BSR set to: 0
 13637  004CBE  0012               	return	
 13638  004CC0                     l1830:
 13639                           
 13640                           ; BSR set to: 0
 13641  004CC0  0100               	movlb	0	; () banked
 13642  004CC2  4B60               	infsnz	memcmp@s1& (0+255),f,b
 13643  004CC4  2B61               	incf	(memcmp@s1+1)& (0+255),f,b
 13644  004CC6  4B62               	infsnz	memcmp@s2& (0+255),f,b
 13645  004CC8  2B63               	incf	(memcmp@s2+1)& (0+255),f,b
 13646  004CCA                     l1828:
 13647                           
 13648                           ; BSR set to: 0
 13649  004CCA  0100               	movlb	0	; () banked
 13650  004CCC  0764               	decf	memcmp@n& (0+255),f,b
 13651  004CCE  A0D8               	btfss	status,0,c
 13652  004CD0  0765               	decf	(memcmp@n+1)& (0+255),f,b
 13653  004CD2  2964               	incf	memcmp@n& (0+255),w,b
 13654  004CD4  E1B8               	bnz	l9583
 13655  004CD6  2965               	incf	(memcmp@n+1)& (0+255),w,b
 13656  004CD8  A4D8               	btfss	status,2,c
 13657  004CDA  D7B5               	goto	l1829
 13658                           
 13659                           ; BSR set to: 0
 13660                           
 13661                           ; BSR set to: 0
 13662  004CDC  0E00               	movlw	0
 13663  004CDE  6F61               	movwf	(?_memcmp+1)& (0+255),b
 13664  004CE0  0E00               	movlw	0
 13665  004CE2  6F60               	movwf	?_memcmp& (0+255),b
 13666  004CE4  0012               	return	
 13667  004CE6                     __end_of_memcmp:
 13668                           	opt stack 0
 13669                           tosu	equ	0xFFF
 13670                           tosh	equ	0xFFE
 13671                           tosl	equ	0xFFD
 13672                           pclath	equ	0xFFA
 13673                           tblptru	equ	0xFF8
 13674                           tblptrh	equ	0xFF7
 13675                           tblptrl	equ	0xFF6
 13676                           tablat	equ	0xFF5
 13677                           prodh	equ	0xFF4
 13678                           prodl	equ	0xFF3
 13679                           intcon	equ	0xFF2
 13680                           intcon2	equ	0xFF1
 13681                           intcon3	equ	0xFF0
 13682                           indf0	equ	0xFEF
 13683                           postinc0	equ	0xFEE
 13684                           fsr0h	equ	0xFEA
 13685                           fsr0l	equ	0xFE9
 13686                           wreg	equ	0xFE8
 13687                           indf1	equ	0xFE7
 13688                           postinc1	equ	0xFE6
 13689                           postdec1	equ	0xFE5
 13690                           plusw1	equ	0xFE3
 13691                           fsr1h	equ	0xFE2
 13692                           fsr1l	equ	0xFE1
 13693                           indf2	equ	0xFDF
 13694                           postinc2	equ	0xFDE
 13695                           postdec2	equ	0xFDD
 13696                           plusw2	equ	0xFDB
 13697                           fsr2h	equ	0xFDA
 13698                           fsr2l	equ	0xFD9
 13699                           status	equ	0xFD8
 13700                           
 13701 ;; *************** function ___lmul *****************
 13702 ;; Defined at:
 13703 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13704 ;; Parameters:    Size  Location     Type
 13705 ;;  multiplier      4    0[BANK0 ] unsigned long 
 13706 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 13707 ;; Auto vars:     Size  Location     Type
 13708 ;;  product         4    8[BANK0 ] unsigned long 
 13709 ;; Return value:  Size  Location     Type
 13710 ;;                  4    0[BANK0 ] unsigned long 
 13711 ;; Registers used:
 13712 ;;		wreg, status,2, status,0
 13713 ;; Tracked objects:
 13714 ;;		On entry : 0/0
 13715 ;;		On exit  : 0/0
 13716 ;;		Unchanged: 0/0
 13717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13718 ;;      Params:         0       8       0       0       0       0       0       0       0
 13719 ;;      Locals:         0       4       0       0       0       0       0       0       0
 13720 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13721 ;;      Totals:         0      12       0       0       0       0       0       0       0
 13722 ;;Total ram usage:       12 bytes
 13723 ;; Hardware stack levels used:    1
 13724 ;; Hardware stack levels required when called:    3
 13725 ;; This function calls:
 13726 ;;		Nothing
 13727 ;; This function is called by:
 13728 ;;		_clust2sect
 13729 ;;		_auto_mount
 13730 ;; This function uses a non-reentrant model
 13731 ;;
 13732                           
 13733                           	psect	text44
 13734  005464                     __ptext44:
 13735                           	opt stack 0
 13736  005464                     ___lmul:
 13737                           	opt stack 22
 13738                           
 13739                           ; BSR set to: 0
 13740                           ;incstack = 0
 13741  005464  0E00               	movlw	0
 13742  005466  0100               	movlb	0	; () banked
 13743  005468  6F68               	movwf	___lmul@product& (0+255),b
 13744  00546A  0E00               	movlw	0
 13745  00546C  6F69               	movwf	(___lmul@product+1)& (0+255),b
 13746  00546E  0E00               	movlw	0
 13747  005470  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 13748  005472  0E00               	movlw	0
 13749  005474  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 13750  005476                     
 13751                           ; BSR set to: 0
 13752                           
 13753                           ; BSR set to: 0
 13754  005476  A160               	btfss	___lmul@multiplier& (0+255),0,b
 13755  005478  D008               	goto	l1395
 13756                           
 13757                           ; BSR set to: 0
 13758  00547A  5164               	movf	___lmul@multiplicand& (0+255),w,b
 13759  00547C  2768               	addwf	___lmul@product& (0+255),f,b
 13760  00547E  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 13761  005480  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 13762  005482  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 13763  005484  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 13764  005486  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 13765  005488  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 13766  00548A                     l1395:
 13767                           
 13768                           ; BSR set to: 0
 13769                           
 13770                           ; BSR set to: 0
 13771  00548A  90D8               	bcf	status,0,c
 13772  00548C  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 13773  00548E  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 13774  005490  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 13775  005492  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 13776                           
 13777                           ; BSR set to: 0
 13778  005494  90D8               	bcf	status,0,c
 13779  005496  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 13780  005498  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 13781  00549A  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 13782  00549C  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 13783  00549E  5160               	movf	___lmul@multiplier& (0+255),w,b
 13784  0054A0  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 13785  0054A2  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 13786  0054A4  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 13787  0054A6  A4D8               	btfss	status,2,c
 13788  0054A8  D7E6               	goto	l1394
 13789                           
 13790                           ; BSR set to: 0
 13791  0054AA  C068  F060         	movff	___lmul@product,?___lmul
 13792  0054AE  C069  F061         	movff	___lmul@product+1,?___lmul+1
 13793  0054B2  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 13794  0054B6  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 13795                           
 13796                           ; BSR set to: 0
 13797  0054BA  0012               	return		;funcret
 13798  0054BC                     __end_of___lmul:
 13799                           	opt stack 0
 13800                           tosu	equ	0xFFF
 13801                           tosh	equ	0xFFE
 13802                           tosl	equ	0xFFD
 13803                           pclath	equ	0xFFA
 13804                           tblptru	equ	0xFF8
 13805                           tblptrh	equ	0xFF7
 13806                           tblptrl	equ	0xFF6
 13807                           tablat	equ	0xFF5
 13808                           prodh	equ	0xFF4
 13809                           prodl	equ	0xFF3
 13810                           intcon	equ	0xFF2
 13811                           intcon2	equ	0xFF1
 13812                           intcon3	equ	0xFF0
 13813                           indf0	equ	0xFEF
 13814                           postinc0	equ	0xFEE
 13815                           fsr0h	equ	0xFEA
 13816                           fsr0l	equ	0xFE9
 13817                           wreg	equ	0xFE8
 13818                           indf1	equ	0xFE7
 13819                           postinc1	equ	0xFE6
 13820                           postdec1	equ	0xFE5
 13821                           plusw1	equ	0xFE3
 13822                           fsr1h	equ	0xFE2
 13823                           fsr1l	equ	0xFE1
 13824                           indf2	equ	0xFDF
 13825                           postinc2	equ	0xFDE
 13826                           postdec2	equ	0xFDD
 13827                           plusw2	equ	0xFDB
 13828                           fsr2h	equ	0xFDA
 13829                           fsr2l	equ	0xFD9
 13830                           status	equ	0xFD8
 13831                           
 13832 ;; *************** function _f_mount *****************
 13833 ;; Defined at:
 13834 ;;		line 793 in file "bibliotecas/tff.c"
 13835 ;; Parameters:    Size  Location     Type
 13836 ;;  drv             1    wreg     unsigned char 
 13837 ;;  fs              2   32[COMRAM] PTR struct _FATFS
 13838 ;;		 -> fs(544), 
 13839 ;; Auto vars:     Size  Location     Type
 13840 ;;  drv             1   34[COMRAM] unsigned char 
 13841 ;; Return value:  Size  Location     Type
 13842 ;;                  1    wreg      enum E3975
 13843 ;; Registers used:
 13844 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13845 ;; Tracked objects:
 13846 ;;		On entry : 0/0
 13847 ;;		On exit  : 0/0
 13848 ;;		Unchanged: 0/0
 13849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13850 ;;      Params:         2       0       0       0       0       0       0       0       0
 13851 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13852 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13853 ;;      Totals:         3       0       0       0       0       0       0       0       0
 13854 ;;Total ram usage:        3 bytes
 13855 ;; Hardware stack levels used:    1
 13856 ;; Hardware stack levels required when called:    3
 13857 ;; This function calls:
 13858 ;;		Nothing
 13859 ;; This function is called by:
 13860 ;;		_escrita_sdcard
 13861 ;;		_leitura_sdcard
 13862 ;;		_sdcard_init
 13863 ;; This function uses a non-reentrant model
 13864 ;;
 13865                           
 13866                           	psect	text45
 13867  0056FE                     __ptext45:
 13868                           	opt stack 0
 13869  0056FE                     _f_mount:
 13870                           	opt stack 24
 13871                           
 13872                           ; BSR set to: 0
 13873                           ;incstack = 0
 13874                           ;f_mount@drv stored from wreg
 13875  0056FE  6E23               	movwf	f_mount@drv,c
 13876                           
 13877                           ;tff.c: 798: if (drv) return FR_INVALID_DRIVE;
 13878  005700  5023               	movf	f_mount@drv,w,c
 13879  005702  B4D8               	btfsc	status,2,c
 13880  005704  D002               	goto	l1137
 13881  005706  0E05               	movlw	5
 13882  005708  0012               	return	
 13883  00570A                     l1137:
 13884                           
 13885                           ;tff.c: 800: if (FatFs) FatFs->fs_type = 0;
 13886  00570A  0100               	movlb	0	; () banked
 13887  00570C  51FC               	movf	_FatFs& (0+255),w,b
 13888  00570E  11FD               	iorwf	(_FatFs+1)& (0+255),w,b
 13889  005710  B4D8               	btfsc	status,2,c
 13890  005712  D008               	goto	l1139
 13891                           
 13892                           ; BSR set to: 0
 13893  005714  EE20 F01C          	lfsr	2,28
 13894  005718  51FC               	movf	_FatFs& (0+255),w,b
 13895  00571A  26D9               	addwf	fsr2l,f,c
 13896  00571C  51FD               	movf	(_FatFs+1)& (0+255),w,b
 13897  00571E  22DA               	addwfc	fsr2h,f,c
 13898  005720  0E00               	movlw	0
 13899  005722  6EDF               	movwf	indf2,c
 13900  005724                     l1139:
 13901                           
 13902                           ; BSR set to: 0
 13903                           ;tff.c: 802: FatFs = fs;
 13904                           
 13905                           ; BSR set to: 0
 13906  005724  C021  F0FC         	movff	f_mount@fs,_FatFs
 13907  005728  C022  F0FD         	movff	f_mount@fs+1,_FatFs+1
 13908                           
 13909                           ; BSR set to: 0
 13910                           ;tff.c: 803: if (fs) fs->fs_type = 0;
 13911  00572C  5021               	movf	f_mount@fs,w,c
 13912  00572E  1022               	iorwf	f_mount@fs+1,w,c
 13913  005730  B4D8               	btfsc	status,2,c
 13914  005732  D008               	goto	l1140
 13915                           
 13916                           ; BSR set to: 0
 13917  005734  EE20 F01C          	lfsr	2,28
 13918  005738  5021               	movf	f_mount@fs,w,c
 13919  00573A  26D9               	addwf	fsr2l,f,c
 13920  00573C  5022               	movf	f_mount@fs+1,w,c
 13921  00573E  22DA               	addwfc	fsr2h,f,c
 13922  005740  0E00               	movlw	0
 13923  005742  6EDF               	movwf	indf2,c
 13924  005744                     l1140:
 13925                           
 13926                           ; BSR set to: 0
 13927                           ;tff.c: 805: return FR_OK;
 13928                           
 13929                           ; BSR set to: 0
 13930  005744  0E00               	movlw	0
 13931  005746  0012               	return	
 13932  005748                     __end_of_f_mount:
 13933                           	opt stack 0
 13934                           tosu	equ	0xFFF
 13935                           tosh	equ	0xFFE
 13936                           tosl	equ	0xFFD
 13937                           pclath	equ	0xFFA
 13938                           tblptru	equ	0xFF8
 13939                           tblptrh	equ	0xFF7
 13940                           tblptrl	equ	0xFF6
 13941                           tablat	equ	0xFF5
 13942                           prodh	equ	0xFF4
 13943                           prodl	equ	0xFF3
 13944                           intcon	equ	0xFF2
 13945                           intcon2	equ	0xFF1
 13946                           intcon3	equ	0xFF0
 13947                           indf0	equ	0xFEF
 13948                           postinc0	equ	0xFEE
 13949                           fsr0h	equ	0xFEA
 13950                           fsr0l	equ	0xFE9
 13951                           wreg	equ	0xFE8
 13952                           indf1	equ	0xFE7
 13953                           postinc1	equ	0xFE6
 13954                           postdec1	equ	0xFE5
 13955                           plusw1	equ	0xFE3
 13956                           fsr1h	equ	0xFE2
 13957                           fsr1l	equ	0xFE1
 13958                           indf2	equ	0xFDF
 13959                           postinc2	equ	0xFDE
 13960                           postdec2	equ	0xFDD
 13961                           plusw2	equ	0xFDB
 13962                           fsr2h	equ	0xFDA
 13963                           fsr2l	equ	0xFD9
 13964                           status	equ	0xFD8
 13965                           
 13966 ;; *************** function _f_lseek *****************
 13967 ;; Defined at:
 13968 ;;		line 1132 in file "bibliotecas/tff.c"
 13969 ;; Parameters:    Size  Location     Type
 13970 ;;  fp              2   99[BANK0 ] PTR struct _FIL
 13971 ;;		 -> fil(28), 
 13972 ;;  ofs             4  101[BANK0 ] unsigned long 
 13973 ;; Auto vars:     Size  Location     Type
 13974 ;;  csize           4  122[BANK0 ] unsigned long 
 13975 ;;  ifptr           4  118[BANK0 ] unsigned long 
 13976 ;;  clust           2  126[BANK0 ] unsigned short 
 13977 ;;  res             1  117[BANK0 ] enum E155
 13978 ;; Return value:  Size  Location     Type
 13979 ;;                  1    wreg      enum E3975
 13980 ;; Registers used:
 13981 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13982 ;; Tracked objects:
 13983 ;;		On entry : 0/0
 13984 ;;		On exit  : 0/0
 13985 ;;		Unchanged: 0/0
 13986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13987 ;;      Params:         0       6       0       0       0       0       0       0       0
 13988 ;;      Locals:         0      11       0       0       0       0       0       0       0
 13989 ;;      Temps:          0      12       0       0       0       0       0       0       0
 13990 ;;      Totals:         0      29       0       0       0       0       0       0       0
 13991 ;;Total ram usage:       29 bytes
 13992 ;; Hardware stack levels used:    1
 13993 ;; Hardware stack levels required when called:   11
 13994 ;; This function calls:
 13995 ;;		___lldiv
 13996 ;;		_create_chain
 13997 ;;		_get_cluster
 13998 ;;		_validate
 13999 ;; This function is called by:
 14000 ;;		_escrita_sdcard
 14001 ;; This function uses a non-reentrant model
 14002 ;;
 14003                           
 14004                           	psect	text46
 14005  001886                     __ptext46:
 14006                           	opt stack 0
 14007  001886                     _f_lseek:
 14008                           	opt stack 16
 14009                           
 14010                           ;tff.c: 1137: FRESULT res;
 14011                           ;tff.c: 1138: CLUST clust;
 14012                           ;tff.c: 1139: DWORD csize, ifptr;
 14013                           ;tff.c: 1142: res = validate(fp->fs, fp->id);
 14014                           
 14015                           ;incstack = 0
 14016  001886  0100               	movlb	0	; () banked
 14017  001888  EE20 F004          	lfsr	2,4
 14018  00188C  51C3               	movf	f_lseek@fp& (0+255),w,b
 14019  00188E  26D9               	addwf	fsr2l,f,c
 14020  001890  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14021  001892  22DA               	addwfc	fsr2h,f,c
 14022  001894  CFDE F064          	movff	postinc2,validate@fs
 14023  001898  CFDD F065          	movff	postdec2,validate@fs+1
 14024  00189C  C0C3  FFD9         	movff	f_lseek@fp,fsr2l
 14025  0018A0  C0C4  FFDA         	movff	f_lseek@fp+1,fsr2h
 14026  0018A4  CFDE F066          	movff	postinc2,validate@id
 14027  0018A8  CFDD F067          	movff	postdec2,validate@id+1
 14028  0018AC  EC59  F02B         	call	_validate	;wreg free
 14029  0018B0  0100               	movlb	0	; () banked
 14030  0018B2  6FD5               	movwf	f_lseek@res& (0+255),b
 14031                           
 14032                           ; BSR set to: 0
 14033                           ;tff.c: 1143: if (res != FR_OK) return res;
 14034  0018B4  51D5               	movf	f_lseek@res& (0+255),w,b
 14035  0018B6  A4D8               	btfss	status,2,c
 14036  0018B8  0012               	return	
 14037                           
 14038                           ; BSR set to: 0
 14039                           ;tff.c: 1144: if (fp->flag & 0x80) return FR_RW_ERROR;
 14040                           
 14041                           ; BSR set to: 0
 14042                           
 14043                           ; BSR set to: 0
 14044                           ;	Return value of _f_lseek is never used
 14045  0018BA  EE20 F002          	lfsr	2,2
 14046  0018BE  51C3               	movf	f_lseek@fp& (0+255),w,b
 14047  0018C0  26D9               	addwf	fsr2l,f,c
 14048  0018C2  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14049  0018C4  22DA               	addwfc	fsr2h,f,c
 14050  0018C6  BEDF               	btfsc	indf2,7,c
 14051  0018C8  0012               	return	
 14052                           
 14053                           ; BSR set to: 0
 14054                           ;tff.c: 1145: if (ofs > fp->fsize
 14055                           ;tff.c: 1147: && !(fp->flag & 0x02)
 14056                           ;tff.c: 1149: ) ofs = fp->fsize;
 14057                           
 14058                           ; BSR set to: 0
 14059                           
 14060                           ; BSR set to: 0
 14061                           ;	Return value of _f_lseek is never used
 14062  0018CA  EE20 F00A          	lfsr	2,10
 14063  0018CE  51C3               	movf	f_lseek@fp& (0+255),w,b
 14064  0018D0  26D9               	addwf	fsr2l,f,c
 14065  0018D2  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14066  0018D4  22DA               	addwfc	fsr2h,f,c
 14067  0018D6  51C5               	movf	f_lseek@ofs& (0+255),w,b
 14068  0018D8  5CDE               	subwf	postinc2,w,c
 14069  0018DA  51C6               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14070  0018DC  58DE               	subwfb	postinc2,w,c
 14071  0018DE  51C7               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14072  0018E0  58DE               	subwfb	postinc2,w,c
 14073  0018E2  51C8               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14074  0018E4  58DE               	subwfb	postinc2,w,c
 14075  0018E6  B0D8               	btfsc	status,0,c
 14076  0018E8  D016               	goto	l1238
 14077                           
 14078                           ; BSR set to: 0
 14079  0018EA  EE20 F002          	lfsr	2,2
 14080  0018EE  51C3               	movf	f_lseek@fp& (0+255),w,b
 14081  0018F0  26D9               	addwf	fsr2l,f,c
 14082  0018F2  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14083  0018F4  22DA               	addwfc	fsr2h,f,c
 14084  0018F6  B2DF               	btfsc	indf2,1,c
 14085  0018F8  D00E               	goto	l1238
 14086                           
 14087                           ; BSR set to: 0
 14088  0018FA  EE20 F00A          	lfsr	2,10
 14089  0018FE  51C3               	movf	f_lseek@fp& (0+255),w,b
 14090  001900  26D9               	addwf	fsr2l,f,c
 14091  001902  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14092  001904  22DA               	addwfc	fsr2h,f,c
 14093  001906  CFDE F0C5          	movff	postinc2,f_lseek@ofs
 14094  00190A  CFDE F0C6          	movff	postinc2,f_lseek@ofs+1
 14095  00190E  CFDE F0C7          	movff	postinc2,f_lseek@ofs+2
 14096  001912  CFDE F0C8          	movff	postinc2,f_lseek@ofs+3
 14097  001916                     l1238:
 14098                           
 14099                           ; BSR set to: 0
 14100                           ;tff.c: 1151: ifptr = fp->fptr;
 14101  001916  EE20 F006          	lfsr	2,6
 14102  00191A  51C3               	movf	f_lseek@fp& (0+255),w,b
 14103  00191C  26D9               	addwf	fsr2l,f,c
 14104  00191E  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14105  001920  22DA               	addwfc	fsr2h,f,c
 14106  001922  CFDE F0D6          	movff	postinc2,f_lseek@ifptr
 14107  001926  CFDE F0D7          	movff	postinc2,f_lseek@ifptr+1
 14108  00192A  CFDE F0D8          	movff	postinc2,f_lseek@ifptr+2
 14109  00192E  CFDE F0D9          	movff	postinc2,f_lseek@ifptr+3
 14110                           
 14111                           ;tff.c: 1152: fp->fptr = 0; fp->csect = 255;
 14112  001932  EE20 F006          	lfsr	2,6
 14113  001936  51C3               	movf	f_lseek@fp& (0+255),w,b
 14114  001938  26D9               	addwf	fsr2l,f,c
 14115  00193A  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14116  00193C  22DA               	addwfc	fsr2h,f,c
 14117  00193E  6ADE               	clrf	postinc2,c
 14118  001940  6ADE               	clrf	postinc2,c
 14119  001942  6ADE               	clrf	postinc2,c
 14120  001944  6ADD               	clrf	postdec2,c
 14121  001946  EE20 F003          	lfsr	2,3
 14122  00194A  51C3               	movf	f_lseek@fp& (0+255),w,b
 14123  00194C  26D9               	addwf	fsr2l,f,c
 14124  00194E  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14125  001950  22DA               	addwfc	fsr2h,f,c
 14126  001952  0EFF               	movlw	255
 14127  001954  6EDF               	movwf	indf2,c
 14128                           
 14129                           ; BSR set to: 0
 14130                           ;tff.c: 1153: if (ofs > 0) {
 14131  001956  51C5               	movf	f_lseek@ofs& (0+255),w,b
 14132  001958  11C6               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 14133  00195A  11C7               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 14134  00195C  11C8               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 14135  00195E  B4D8               	btfsc	status,2,c
 14136  001960  D19B               	goto	l1255
 14137                           
 14138                           ; BSR set to: 0
 14139                           ;tff.c: 1154: csize = (DWORD)fp->fs->csize * 512U;
 14140  001962  EE20 F004          	lfsr	2,4
 14141  001966  51C3               	movf	f_lseek@fp& (0+255),w,b
 14142  001968  26D9               	addwf	fsr2l,f,c
 14143  00196A  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14144  00196C  22DA               	addwfc	fsr2h,f,c
 14145  00196E  EE10 F01D          	lfsr	1,29
 14146  001972  50DE               	movf	postinc2,w,c
 14147  001974  26E1               	addwf	fsr1l,f,c
 14148  001976  50DD               	movf	postdec2,w,c
 14149  001978  22E2               	addwfc	fsr1h,f,c
 14150  00197A  50E7               	movf	indf1,w,c
 14151  00197C  6FC9               	movwf	??_f_lseek& (0+255),b
 14152  00197E  C0C9  F0CA         	movff	??_f_lseek,??_f_lseek+1
 14153  001982  6BCB               	clrf	(??_f_lseek+2)& (0+255),b
 14154  001984  6BCC               	clrf	(??_f_lseek+3)& (0+255),b
 14155  001986  6BCD               	clrf	(??_f_lseek+4)& (0+255),b
 14156  001988  0E09               	movlw	9
 14157  00198A                     u13335:
 14158  00198A  90D8               	bcf	status,0,c
 14159  00198C  37CA               	rlcf	(??_f_lseek+1)& (0+255),f,b
 14160  00198E  37CB               	rlcf	(??_f_lseek+2)& (0+255),f,b
 14161  001990  37CC               	rlcf	(??_f_lseek+3)& (0+255),f,b
 14162  001992  37CD               	rlcf	(??_f_lseek+4)& (0+255),f,b
 14163  001994  2EE8               	decfsz	wreg,f,c
 14164  001996  D7F9               	goto	u13335
 14165  001998  C0CA  F0DA         	movff	??_f_lseek+1,f_lseek@csize
 14166  00199C  C0CB  F0DB         	movff	??_f_lseek+2,f_lseek@csize+1
 14167  0019A0  C0CC  F0DC         	movff	??_f_lseek+3,f_lseek@csize+2
 14168  0019A4  C0CD  F0DD         	movff	??_f_lseek+4,f_lseek@csize+3
 14169                           
 14170                           ; BSR set to: 0
 14171                           ;tff.c: 1155: if (ifptr > 0 &&
 14172                           ;tff.c: 1156: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 14173  0019A8  51D6               	movf	f_lseek@ifptr& (0+255),w,b
 14174  0019AA  11D7               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 14175  0019AC  11D8               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 14176  0019AE  11D9               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 14177  0019B0  B4D8               	btfsc	status,2,c
 14178  0019B2  D08F               	goto	l1240
 14179                           
 14180                           ; BSR set to: 0
 14181  0019B4  0EFF               	movlw	255
 14182  0019B6  25C5               	addwf	f_lseek@ofs& (0+255),w,b
 14183  0019B8  6F60               	movwf	___lldiv@dividend& (0+255),b
 14184  0019BA  0EFF               	movlw	255
 14185  0019BC  21C6               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 14186  0019BE  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 14187  0019C0  0EFF               	movlw	255
 14188  0019C2  21C7               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 14189  0019C4  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 14190  0019C6  0EFF               	movlw	255
 14191  0019C8  21C8               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 14192  0019CA  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 14193  0019CC  C0DA  F064         	movff	f_lseek@csize,___lldiv@divisor
 14194  0019D0  C0DB  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14195  0019D4  C0DC  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14196  0019D8  C0DD  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14197  0019DC  ECAD  F028         	call	___lldiv	;wreg free
 14198  0019E0  C060  F0C9         	movff	?___lldiv,??_f_lseek
 14199  0019E4  C061  F0CA         	movff	?___lldiv+1,??_f_lseek+1
 14200  0019E8  C062  F0CB         	movff	?___lldiv+2,??_f_lseek+2
 14201  0019EC  C063  F0CC         	movff	?___lldiv+3,??_f_lseek+3
 14202  0019F0  0EFF               	movlw	255
 14203  0019F2  0100               	movlb	0	; () banked
 14204  0019F4  25D6               	addwf	f_lseek@ifptr& (0+255),w,b
 14205  0019F6  6F60               	movwf	___lldiv@dividend& (0+255),b
 14206  0019F8  0EFF               	movlw	255
 14207  0019FA  21D7               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14208  0019FC  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 14209  0019FE  0EFF               	movlw	255
 14210  001A00  21D8               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14211  001A02  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 14212  001A04  0EFF               	movlw	255
 14213  001A06  21D9               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14214  001A08  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 14215  001A0A  C0DA  F064         	movff	f_lseek@csize,___lldiv@divisor
 14216  001A0E  C0DB  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14217  001A12  C0DC  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14218  001A16  C0DD  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14219  001A1A  ECAD  F028         	call	___lldiv	;wreg free
 14220  001A1E  0100               	movlb	0	; () banked
 14221  001A20  5160               	movf	?___lldiv& (0+255),w,b
 14222  001A22  5DC9               	subwf	??_f_lseek& (0+255),w,b
 14223  001A24  5161               	movf	(?___lldiv+1)& (0+255),w,b
 14224  001A26  59CA               	subwfb	(??_f_lseek+1)& (0+255),w,b
 14225  001A28  5162               	movf	(?___lldiv+2)& (0+255),w,b
 14226  001A2A  59CB               	subwfb	(??_f_lseek+2)& (0+255),w,b
 14227  001A2C  5163               	movf	(?___lldiv+3)& (0+255),w,b
 14228  001A2E  59CC               	subwfb	(??_f_lseek+3)& (0+255),w,b
 14229  001A30  A0D8               	btfss	status,0,c
 14230  001A32  D04F               	goto	l1240
 14231                           
 14232                           ; BSR set to: 0
 14233                           ;tff.c: 1157: fp->fptr = (ifptr - 1) & ~(csize - 1);
 14234  001A34  0EFF               	movlw	255
 14235  001A36  25DA               	addwf	f_lseek@csize& (0+255),w,b
 14236  001A38  6FC9               	movwf	??_f_lseek& (0+255),b
 14237  001A3A  0EFF               	movlw	255
 14238  001A3C  21DB               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 14239  001A3E  6FCA               	movwf	(??_f_lseek+1)& (0+255),b
 14240  001A40  0EFF               	movlw	255
 14241  001A42  21DC               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 14242  001A44  6FCB               	movwf	(??_f_lseek+2)& (0+255),b
 14243  001A46  0EFF               	movlw	255
 14244  001A48  21DD               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 14245  001A4A  6FCC               	movwf	(??_f_lseek+3)& (0+255),b
 14246  001A4C  1FC9               	comf	??_f_lseek& (0+255),f,b
 14247  001A4E  1FCA               	comf	(??_f_lseek+1)& (0+255),f,b
 14248  001A50  1FCB               	comf	(??_f_lseek+2)& (0+255),f,b
 14249  001A52  1FCC               	comf	(??_f_lseek+3)& (0+255),f,b
 14250  001A54  0EFF               	movlw	255
 14251  001A56  25D6               	addwf	f_lseek@ifptr& (0+255),w,b
 14252  001A58  6FCD               	movwf	(??_f_lseek+4)& (0+255),b
 14253  001A5A  0EFF               	movlw	255
 14254  001A5C  21D7               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14255  001A5E  6FCE               	movwf	(??_f_lseek+5)& (0+255),b
 14256  001A60  0EFF               	movlw	255
 14257  001A62  21D8               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14258  001A64  6FCF               	movwf	(??_f_lseek+6)& (0+255),b
 14259  001A66  0EFF               	movlw	255
 14260  001A68  21D9               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14261  001A6A  6FD0               	movwf	(??_f_lseek+7)& (0+255),b
 14262  001A6C  51C9               	movf	??_f_lseek& (0+255),w,b
 14263  001A6E  15CD               	andwf	(??_f_lseek+4)& (0+255),w,b
 14264  001A70  6FD1               	movwf	(??_f_lseek+8)& (0+255),b
 14265  001A72  51CA               	movf	(??_f_lseek+1)& (0+255),w,b
 14266  001A74  15CE               	andwf	(??_f_lseek+5)& (0+255),w,b
 14267  001A76  6FD2               	movwf	(??_f_lseek+9)& (0+255),b
 14268  001A78  51CB               	movf	(??_f_lseek+2)& (0+255),w,b
 14269  001A7A  15CF               	andwf	(??_f_lseek+6)& (0+255),w,b
 14270  001A7C  6FD3               	movwf	(??_f_lseek+10)& (0+255),b
 14271  001A7E  51CC               	movf	(??_f_lseek+3)& (0+255),w,b
 14272  001A80  15D0               	andwf	(??_f_lseek+7)& (0+255),w,b
 14273  001A82  6FD4               	movwf	(??_f_lseek+11)& (0+255),b
 14274  001A84  EE20 F006          	lfsr	2,6
 14275  001A88  51C3               	movf	f_lseek@fp& (0+255),w,b
 14276  001A8A  26D9               	addwf	fsr2l,f,c
 14277  001A8C  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14278  001A8E  22DA               	addwfc	fsr2h,f,c
 14279  001A90  C0D1  FFDE         	movff	??_f_lseek+8,postinc2
 14280  001A94  C0D2  FFDE         	movff	??_f_lseek+9,postinc2
 14281  001A98  C0D3  FFDE         	movff	??_f_lseek+10,postinc2
 14282  001A9C  C0D4  FFDE         	movff	??_f_lseek+11,postinc2
 14283                           
 14284                           ;tff.c: 1158: ofs -= fp->fptr;
 14285  001AA0  EE20 F006          	lfsr	2,6
 14286  001AA4  51C3               	movf	f_lseek@fp& (0+255),w,b
 14287  001AA6  26D9               	addwf	fsr2l,f,c
 14288  001AA8  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14289  001AAA  22DA               	addwfc	fsr2h,f,c
 14290  001AAC  50DE               	movf	postinc2,w,c
 14291  001AAE  5FC5               	subwf	f_lseek@ofs& (0+255),f,b
 14292  001AB0  50DE               	movf	postinc2,w,c
 14293  001AB2  5BC6               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 14294  001AB4  50DE               	movf	postinc2,w,c
 14295  001AB6  5BC7               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 14296  001AB8  50DD               	movf	postdec2,w,c
 14297  001ABA  5BC8               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 14298                           
 14299                           ;tff.c: 1159: clust = fp->curr_clust;
 14300  001ABC  EE20 F010          	lfsr	2,16
 14301  001AC0  51C3               	movf	f_lseek@fp& (0+255),w,b
 14302  001AC2  26D9               	addwf	fsr2l,f,c
 14303  001AC4  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14304  001AC6  22DA               	addwfc	fsr2h,f,c
 14305  001AC8  CFDE F0DE          	movff	postinc2,f_lseek@clust
 14306  001ACC  CFDD F0DF          	movff	postdec2,f_lseek@clust+1
 14307                           
 14308                           ;tff.c: 1160: } else {
 14309  001AD0  D031               	goto	l1241
 14310  001AD2                     l1240:
 14311                           
 14312                           ; BSR set to: 0
 14313                           ;tff.c: 1161: clust = fp->org_clust;
 14314                           
 14315                           ; BSR set to: 0
 14316  001AD2  EE20 F00E          	lfsr	2,14
 14317  001AD6  51C3               	movf	f_lseek@fp& (0+255),w,b
 14318  001AD8  26D9               	addwf	fsr2l,f,c
 14319  001ADA  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14320  001ADC  22DA               	addwfc	fsr2h,f,c
 14321  001ADE  CFDE F0DE          	movff	postinc2,f_lseek@clust
 14322  001AE2  CFDD F0DF          	movff	postdec2,f_lseek@clust+1
 14323                           
 14324                           ; BSR set to: 0
 14325                           ;tff.c: 1163: if (clust == 0) {
 14326  001AE6  51DE               	movf	f_lseek@clust& (0+255),w,b
 14327  001AE8  11DF               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14328  001AEA  A4D8               	btfss	status,2,c
 14329  001AEC  D019               	goto	l1242
 14330                           
 14331                           ; BSR set to: 0
 14332                           ;tff.c: 1164: clust = create_chain(0);
 14333  001AEE  0E00               	movlw	0
 14334  001AF0  6FB6               	movwf	(create_chain@clust+1)& (0+255),b
 14335  001AF2  0E00               	movlw	0
 14336  001AF4  6FB5               	movwf	create_chain@clust& (0+255),b
 14337  001AF6  ECF9  F01C         	call	_create_chain	;wreg free
 14338  001AFA  C0B5  F0DE         	movff	?_create_chain,f_lseek@clust
 14339  001AFE  C0B6  F0DF         	movff	?_create_chain+1,f_lseek@clust+1
 14340                           
 14341                           ;tff.c: 1165: if (clust == 1) goto fk_error;
 14342  001B02  0100               	movlb	0	; () banked
 14343  001B04  05DE               	decf	f_lseek@clust& (0+255),w,b
 14344  001B06  11DF               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14345  001B08  B4D8               	btfsc	status,2,c
 14346  001B0A  D0F9               	goto	l1244
 14347                           
 14348                           ; BSR set to: 0
 14349                           ;tff.c: 1166: fp->org_clust = clust;
 14350                           
 14351                           ; BSR set to: 0
 14352                           
 14353                           ; BSR set to: 0
 14354  001B0C  EE20 F00E          	lfsr	2,14
 14355  001B10  51C3               	movf	f_lseek@fp& (0+255),w,b
 14356  001B12  26D9               	addwf	fsr2l,f,c
 14357  001B14  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14358  001B16  22DA               	addwfc	fsr2h,f,c
 14359  001B18  C0DE  FFDE         	movff	f_lseek@clust,postinc2
 14360  001B1C  C0DF  FFDD         	movff	f_lseek@clust+1,postdec2
 14361  001B20                     l1242:
 14362                           
 14363                           ; BSR set to: 0
 14364                           ;tff.c: 1167: }
 14365                           ;tff.c: 1169: fp->curr_clust = clust;
 14366  001B20  EE20 F010          	lfsr	2,16
 14367  001B24  51C3               	movf	f_lseek@fp& (0+255),w,b
 14368  001B26  26D9               	addwf	fsr2l,f,c
 14369  001B28  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14370  001B2A  22DA               	addwfc	fsr2h,f,c
 14371  001B2C  C0DE  FFDE         	movff	f_lseek@clust,postinc2
 14372  001B30  C0DF  FFDD         	movff	f_lseek@clust+1,postdec2
 14373  001B34                     l1241:
 14374                           
 14375                           ; BSR set to: 0
 14376                           ;tff.c: 1170: }
 14377                           ;tff.c: 1171: if (clust != 0) {
 14378                           
 14379                           ; BSR set to: 0
 14380  001B34  51DE               	movf	f_lseek@clust& (0+255),w,b
 14381  001B36  11DF               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14382  001B38  A4D8               	btfss	status,2,c
 14383  001B3A  D064               	goto	l1246
 14384  001B3C  D0AD               	goto	l1255
 14385  001B3E                     
 14386                           ; BSR set to: 0
 14387                           ;tff.c: 1174: if (fp->flag & 0x02) {
 14388                           
 14389                           ; BSR set to: 0
 14390  001B3E  EE20 F002          	lfsr	2,2
 14391  001B42  51C3               	movf	f_lseek@fp& (0+255),w,b
 14392  001B44  26D9               	addwf	fsr2l,f,c
 14393  001B46  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14394  001B48  22DA               	addwfc	fsr2h,f,c
 14395  001B4A  A2DF               	btfss	indf2,1,c
 14396  001B4C  D018               	goto	l1248
 14397                           
 14398                           ; BSR set to: 0
 14399                           ;tff.c: 1175: clust = create_chain(clust);
 14400  001B4E  C0DE  F0B5         	movff	f_lseek@clust,create_chain@clust
 14401  001B52  C0DF  F0B6         	movff	f_lseek@clust+1,create_chain@clust+1
 14402  001B56  ECF9  F01C         	call	_create_chain	;wreg free
 14403  001B5A  C0B5  F0DE         	movff	?_create_chain,f_lseek@clust
 14404  001B5E  C0B6  F0DF         	movff	?_create_chain+1,f_lseek@clust+1
 14405                           
 14406                           ;tff.c: 1176: if (clust == 0) {
 14407  001B62  0100               	movlb	0	; () banked
 14408  001B64  51DE               	movf	f_lseek@clust& (0+255),w,b
 14409  001B66  11DF               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14410  001B68  A4D8               	btfss	status,2,c
 14411  001B6A  D013               	goto	l1251
 14412                           
 14413                           ; BSR set to: 0
 14414                           ;tff.c: 1177: ofs = csize; break;
 14415  001B6C  C0DA  F0C5         	movff	f_lseek@csize,f_lseek@ofs
 14416  001B70  C0DB  F0C6         	movff	f_lseek@csize+1,f_lseek@ofs+1
 14417  001B74  C0DC  F0C7         	movff	f_lseek@csize+2,f_lseek@ofs+2
 14418  001B78  C0DD  F0C8         	movff	f_lseek@csize+3,f_lseek@ofs+3
 14419  001B7C  D04D               	goto	u13430
 14420  001B7E                     l1248:
 14421                           
 14422                           ; BSR set to: 0
 14423                           ;tff.c: 1181: clust = get_cluster(clust);
 14424                           
 14425                           ; BSR set to: 0
 14426  001B7E  C0DE  F09F         	movff	f_lseek@clust,get_cluster@clust
 14427  001B82  C0DF  F0A0         	movff	f_lseek@clust+1,get_cluster@clust+1
 14428  001B86  EC03  F01B         	call	_get_cluster	;wreg free
 14429  001B8A  C09F  F0DE         	movff	?_get_cluster,f_lseek@clust
 14430  001B8E  C0A0  F0DF         	movff	?_get_cluster+1,f_lseek@clust+1
 14431  001B92                     l1251:
 14432                           
 14433                           ;tff.c: 1182: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 14434  001B92  0100               	movlb	0	; () banked
 14435  001B94  51DF               	movf	(f_lseek@clust+1)& (0+255),w,b
 14436  001B96  E104               	bnz	u13410
 14437  001B98  0E02               	movlw	2
 14438  001B9A  5DDE               	subwf	f_lseek@clust& (0+255),w,b
 14439  001B9C  A0D8               	btfss	status,0,c
 14440  001B9E  D0AF               	goto	l1244
 14441  001BA0                     u13410:
 14442                           
 14443                           ; BSR set to: 0
 14444  001BA0  EE20 F004          	lfsr	2,4
 14445  001BA4  51C3               	movf	f_lseek@fp& (0+255),w,b
 14446  001BA6  26D9               	addwf	fsr2l,f,c
 14447  001BA8  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14448  001BAA  22DA               	addwfc	fsr2h,f,c
 14449  001BAC  EE10 F016          	lfsr	1,22
 14450  001BB0  50DE               	movf	postinc2,w,c
 14451  001BB2  26E1               	addwf	fsr1l,f,c
 14452  001BB4  50DD               	movf	postdec2,w,c
 14453  001BB6  22E2               	addwfc	fsr1h,f,c
 14454  001BB8  50E6               	movf	postinc1,w,c
 14455  001BBA  5DDE               	subwf	f_lseek@clust& (0+255),w,b
 14456  001BBC  50E6               	movf	postinc1,w,c
 14457  001BBE  59DF               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 14458  001BC0  B0D8               	btfsc	status,0,c
 14459  001BC2  D09D               	goto	l1244
 14460                           
 14461                           ; BSR set to: 0
 14462                           ;tff.c: 1183: fp->curr_clust = clust;
 14463                           
 14464                           ; BSR set to: 0
 14465                           
 14466                           ; BSR set to: 0
 14467  001BC4  EE20 F010          	lfsr	2,16
 14468  001BC8  51C3               	movf	f_lseek@fp& (0+255),w,b
 14469  001BCA  26D9               	addwf	fsr2l,f,c
 14470  001BCC  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14471  001BCE  22DA               	addwfc	fsr2h,f,c
 14472  001BD0  C0DE  FFDE         	movff	f_lseek@clust,postinc2
 14473  001BD4  C0DF  FFDD         	movff	f_lseek@clust+1,postdec2
 14474                           
 14475                           ;tff.c: 1184: fp->fptr += csize;
 14476  001BD8  EE20 F006          	lfsr	2,6
 14477  001BDC  51C3               	movf	f_lseek@fp& (0+255),w,b
 14478  001BDE  26D9               	addwf	fsr2l,f,c
 14479  001BE0  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14480  001BE2  22DA               	addwfc	fsr2h,f,c
 14481  001BE4  51DA               	movf	f_lseek@csize& (0+255),w,b
 14482  001BE6  26DE               	addwf	postinc2,f,c
 14483  001BE8  51DB               	movf	(f_lseek@csize+1)& (0+255),w,b
 14484  001BEA  22DE               	addwfc	postinc2,f,c
 14485  001BEC  51DC               	movf	(f_lseek@csize+2)& (0+255),w,b
 14486  001BEE  22DE               	addwfc	postinc2,f,c
 14487  001BF0  51DD               	movf	(f_lseek@csize+3)& (0+255),w,b
 14488  001BF2  22DE               	addwfc	postinc2,f,c
 14489                           
 14490                           ; BSR set to: 0
 14491                           ;tff.c: 1185: ofs -= csize;
 14492  001BF4  51DA               	movf	f_lseek@csize& (0+255),w,b
 14493  001BF6  5FC5               	subwf	f_lseek@ofs& (0+255),f,b
 14494  001BF8  51DB               	movf	(f_lseek@csize+1)& (0+255),w,b
 14495  001BFA  5BC6               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 14496  001BFC  51DC               	movf	(f_lseek@csize+2)& (0+255),w,b
 14497  001BFE  5BC7               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 14498  001C00  51DD               	movf	(f_lseek@csize+3)& (0+255),w,b
 14499  001C02  5BC8               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 14500  001C04                     l1246:
 14501                           
 14502                           ; BSR set to: 0
 14503                           
 14504                           ; BSR set to: 0
 14505  001C04  51C5               	movf	f_lseek@ofs& (0+255),w,b
 14506  001C06  5DDA               	subwf	f_lseek@csize& (0+255),w,b
 14507  001C08  51C6               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14508  001C0A  59DB               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 14509  001C0C  51C7               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14510  001C0E  59DC               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 14511  001C10  51C8               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14512  001C12  59DD               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 14513  001C14  A0D8               	btfss	status,0,c
 14514  001C16  D793               	goto	l1247
 14515  001C18                     u13430:
 14516                           
 14517                           ; BSR set to: 0
 14518                           ;tff.c: 1186: }
 14519                           ;tff.c: 1187: fp->fptr += ofs;
 14520                           
 14521                           ; BSR set to: 0
 14522  001C18  EE20 F006          	lfsr	2,6
 14523  001C1C  51C3               	movf	f_lseek@fp& (0+255),w,b
 14524  001C1E  26D9               	addwf	fsr2l,f,c
 14525  001C20  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14526  001C22  22DA               	addwfc	fsr2h,f,c
 14527  001C24  51C5               	movf	f_lseek@ofs& (0+255),w,b
 14528  001C26  26DE               	addwf	postinc2,f,c
 14529  001C28  51C6               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14530  001C2A  22DE               	addwfc	postinc2,f,c
 14531  001C2C  51C7               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14532  001C2E  22DE               	addwfc	postinc2,f,c
 14533  001C30  51C8               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14534  001C32  22DE               	addwfc	postinc2,f,c
 14535                           
 14536                           ;tff.c: 1188: fp->csect = (BYTE)(ofs / 512U);
 14537  001C34  EE20 F003          	lfsr	2,3
 14538  001C38  51C3               	movf	f_lseek@fp& (0+255),w,b
 14539  001C3A  26D9               	addwf	fsr2l,f,c
 14540  001C3C  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14541  001C3E  22DA               	addwfc	fsr2h,f,c
 14542  001C40  C0C5  F0C9         	movff	f_lseek@ofs,??_f_lseek
 14543  001C44  C0C6  F0CA         	movff	f_lseek@ofs+1,??_f_lseek+1
 14544  001C48  C0C7  F0CB         	movff	f_lseek@ofs+2,??_f_lseek+2
 14545  001C4C  C0C8  F0CC         	movff	f_lseek@ofs+3,??_f_lseek+3
 14546  001C50  0E0A               	movlw	10
 14547  001C52  D005               	goto	u13440
 14548  001C54                     u13445:
 14549  001C54  90D8               	bcf	status,0,c
 14550  001C56  33CC               	rrcf	(??_f_lseek+3)& (0+255),f,b
 14551  001C58  33CB               	rrcf	(??_f_lseek+2)& (0+255),f,b
 14552  001C5A  33CA               	rrcf	(??_f_lseek+1)& (0+255),f,b
 14553  001C5C  33C9               	rrcf	??_f_lseek& (0+255),f,b
 14554  001C5E                     u13440:
 14555  001C5E  2EE8               	decfsz	wreg,f,c
 14556  001C60  D7F9               	goto	u13445
 14557  001C62  51C9               	movf	??_f_lseek& (0+255),w,b
 14558  001C64  6EDF               	movwf	indf2,c
 14559                           
 14560                           ; BSR set to: 0
 14561                           ;tff.c: 1189: if (ofs % 512U) fp->csect++;
 14562  001C66  0EFF               	movlw	255
 14563  001C68  15C5               	andwf	f_lseek@ofs& (0+255),w,b
 14564  001C6A  6FC9               	movwf	??_f_lseek& (0+255),b
 14565  001C6C  0E01               	movlw	1
 14566  001C6E  15C6               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 14567  001C70  6FCA               	movwf	(??_f_lseek+1)& (0+255),b
 14568  001C72  0E00               	movlw	0
 14569  001C74  15C7               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 14570  001C76  6FCB               	movwf	(??_f_lseek+2)& (0+255),b
 14571  001C78  0E00               	movlw	0
 14572  001C7A  15C8               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 14573  001C7C  6FCC               	movwf	(??_f_lseek+3)& (0+255),b
 14574  001C7E  51C9               	movf	??_f_lseek& (0+255),w,b
 14575  001C80  11CA               	iorwf	(??_f_lseek+1)& (0+255),w,b
 14576  001C82  11CB               	iorwf	(??_f_lseek+2)& (0+255),w,b
 14577  001C84  11CC               	iorwf	(??_f_lseek+3)& (0+255),w,b
 14578  001C86  B4D8               	btfsc	status,2,c
 14579  001C88  D007               	goto	l1255
 14580                           
 14581                           ; BSR set to: 0
 14582  001C8A  EE20 F003          	lfsr	2,3
 14583  001C8E  51C3               	movf	f_lseek@fp& (0+255),w,b
 14584  001C90  26D9               	addwf	fsr2l,f,c
 14585  001C92  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14586  001C94  22DA               	addwfc	fsr2h,f,c
 14587  001C96  2ADF               	incf	indf2,f,c
 14588  001C98                     l1255:
 14589                           
 14590                           ; BSR set to: 0
 14591                           ;tff.c: 1190: }
 14592                           ;tff.c: 1191: }
 14593                           ;tff.c: 1194: if (fp->fptr > fp->fsize) {
 14594                           
 14595                           ; BSR set to: 0
 14596                           
 14597                           ; BSR set to: 0
 14598                           
 14599                           ; BSR set to: 0
 14600  001C98  EE20 F006          	lfsr	2,6
 14601  001C9C  51C3               	movf	f_lseek@fp& (0+255),w,b
 14602  001C9E  26D9               	addwf	fsr2l,f,c
 14603  001CA0  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14604  001CA2  22DA               	addwfc	fsr2h,f,c
 14605  001CA4  EE10 F00A          	lfsr	1,10
 14606  001CA8  51C3               	movf	f_lseek@fp& (0+255),w,b
 14607  001CAA  26E1               	addwf	fsr1l,f,c
 14608  001CAC  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14609  001CAE  22E2               	addwfc	fsr1h,f,c
 14610  001CB0  50DE               	movf	postinc2,w,c
 14611  001CB2  5CE6               	subwf	postinc1,w,c
 14612  001CB4  50DE               	movf	postinc2,w,c
 14613  001CB6  58E6               	subwfb	postinc1,w,c
 14614  001CB8  50DE               	movf	postinc2,w,c
 14615  001CBA  58E6               	subwfb	postinc1,w,c
 14616  001CBC  50DE               	movf	postinc2,w,c
 14617  001CBE  58E6               	subwfb	postinc1,w,c
 14618  001CC0  B0D8               	btfsc	status,0,c
 14619  001CC2  0012               	return	
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;tff.c: 1195: fp->fsize = fp->fptr;
 14623  001CC4  EE20 F006          	lfsr	2,6
 14624  001CC8  51C3               	movf	f_lseek@fp& (0+255),w,b
 14625  001CCA  26D9               	addwf	fsr2l,f,c
 14626  001CCC  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14627  001CCE  22DA               	addwfc	fsr2h,f,c
 14628  001CD0  EE10 F00A          	lfsr	1,10
 14629  001CD4  51C3               	movf	f_lseek@fp& (0+255),w,b
 14630  001CD6  26E1               	addwf	fsr1l,f,c
 14631  001CD8  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14632  001CDA  22E2               	addwfc	fsr1h,f,c
 14633  001CDC  CFDE FFE6          	movff	postinc2,postinc1
 14634  001CE0  CFDE FFE6          	movff	postinc2,postinc1
 14635  001CE4  CFDE FFE6          	movff	postinc2,postinc1
 14636  001CE8  CFDE FFE6          	movff	postinc2,postinc1
 14637                           
 14638                           ; BSR set to: 0
 14639                           ;tff.c: 1196: fp->flag |= 0x20;
 14640  001CEC  EE20 F002          	lfsr	2,2
 14641  001CF0  51C3               	movf	f_lseek@fp& (0+255),w,b
 14642  001CF2  26D9               	addwf	fsr2l,f,c
 14643  001CF4  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14644  001CF6  22DA               	addwfc	fsr2h,f,c
 14645  001CF8  0E00               	movlw	0
 14646  001CFA  8ADB               	bsf	plusw2,5,c
 14647                           
 14648                           ; BSR set to: 0
 14649                           ;tff.c: 1197: }
 14650                           ;tff.c: 1200: return FR_OK;
 14651                           ;	Return value of _f_lseek is never used
 14652                           
 14653                           ; BSR set to: 0
 14654  001CFC  0012               	return	
 14655  001CFE                     l1244:
 14656                           
 14657                           ; BSR set to: 0
 14658                           ;tff.c: 1203: fp->flag |= 0x80;
 14659                           
 14660                           ; BSR set to: 0
 14661  001CFE  EE20 F002          	lfsr	2,2
 14662  001D02  51C3               	movf	f_lseek@fp& (0+255),w,b
 14663  001D04  26D9               	addwf	fsr2l,f,c
 14664  001D06  51C4               	movf	(f_lseek@fp+1)& (0+255),w,b
 14665  001D08  22DA               	addwfc	fsr2h,f,c
 14666  001D0A  0E00               	movlw	0
 14667  001D0C  8EDB               	bsf	plusw2,7,c
 14668  001D0E  0012               	return	
 14669  001D10                     __end_of_f_lseek:
 14670                           	opt stack 0
 14671                           tosu	equ	0xFFF
 14672                           tosh	equ	0xFFE
 14673                           tosl	equ	0xFFD
 14674                           pclath	equ	0xFFA
 14675                           tblptru	equ	0xFF8
 14676                           tblptrh	equ	0xFF7
 14677                           tblptrl	equ	0xFF6
 14678                           tablat	equ	0xFF5
 14679                           prodh	equ	0xFF4
 14680                           prodl	equ	0xFF3
 14681                           intcon	equ	0xFF2
 14682                           intcon2	equ	0xFF1
 14683                           intcon3	equ	0xFF0
 14684                           indf0	equ	0xFEF
 14685                           postinc0	equ	0xFEE
 14686                           fsr0h	equ	0xFEA
 14687                           fsr0l	equ	0xFE9
 14688                           wreg	equ	0xFE8
 14689                           indf1	equ	0xFE7
 14690                           postinc1	equ	0xFE6
 14691                           postdec1	equ	0xFE5
 14692                           plusw1	equ	0xFE3
 14693                           fsr1h	equ	0xFE2
 14694                           fsr1l	equ	0xFE1
 14695                           indf2	equ	0xFDF
 14696                           postinc2	equ	0xFDE
 14697                           postdec2	equ	0xFDD
 14698                           plusw2	equ	0xFDB
 14699                           fsr2h	equ	0xFDA
 14700                           fsr2l	equ	0xFD9
 14701                           status	equ	0xFD8
 14702                           
 14703 ;; *************** function _create_chain *****************
 14704 ;; Defined at:
 14705 ;;		line 282 in file "bibliotecas/tff.c"
 14706 ;; Parameters:    Size  Location     Type
 14707 ;;  clust           2   85[BANK0 ] unsigned short 
 14708 ;; Auto vars:     Size  Location     Type
 14709 ;;  ncl             2   97[BANK0 ] unsigned short 
 14710 ;;  scl             2   95[BANK0 ] unsigned short 
 14711 ;;  cstat           2   93[BANK0 ] unsigned short 
 14712 ;;  fs              2   91[BANK0 ] PTR struct _FATFS
 14713 ;;		 -> NULL(0), fs(544), 
 14714 ;;  mcl             2   89[BANK0 ] unsigned short 
 14715 ;; Return value:  Size  Location     Type
 14716 ;;                  2   85[BANK0 ] unsigned short 
 14717 ;; Registers used:
 14718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14719 ;; Tracked objects:
 14720 ;;		On entry : 0/0
 14721 ;;		On exit  : 0/0
 14722 ;;		Unchanged: 0/0
 14723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14724 ;;      Params:         0       2       0       0       0       0       0       0       0
 14725 ;;      Locals:         0      10       0       0       0       0       0       0       0
 14726 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14727 ;;      Totals:         0      14       0       0       0       0       0       0       0
 14728 ;;Total ram usage:       14 bytes
 14729 ;; Hardware stack levels used:    1
 14730 ;; Hardware stack levels required when called:   10
 14731 ;; This function calls:
 14732 ;;		_get_cluster
 14733 ;;		_put_cluster
 14734 ;; This function is called by:
 14735 ;;		_reserve_direntry
 14736 ;;		_f_write
 14737 ;;		_f_lseek
 14738 ;; This function uses a non-reentrant model
 14739 ;;
 14740                           
 14741                           	psect	text47
 14742  0039F2                     __ptext47:
 14743                           	opt stack 0
 14744  0039F2                     _create_chain:
 14745                           	opt stack 15
 14746                           
 14747                           ;tff.c: 286: CLUST cstat, ncl, scl, mcl;
 14748                           ;tff.c: 287: FATFS *fs = FatFs;
 14749                           
 14750                           ; BSR set to: 0
 14751                           ;incstack = 0
 14752  0039F2  C0FC  F0BB         	movff	_FatFs,create_chain@fs
 14753  0039F6  C0FD  F0BC         	movff	_FatFs+1,create_chain@fs+1
 14754                           
 14755                           ;tff.c: 290: mcl = fs->max_clust;
 14756  0039FA  0100               	movlb	0	; () banked
 14757  0039FC  EE20 F016          	lfsr	2,22
 14758  003A00  51BB               	movf	create_chain@fs& (0+255),w,b
 14759  003A02  26D9               	addwf	fsr2l,f,c
 14760  003A04  51BC               	movf	(create_chain@fs+1)& (0+255),w,b
 14761  003A06  22DA               	addwfc	fsr2h,f,c
 14762  003A08  CFDE F0B9          	movff	postinc2,create_chain@mcl
 14763  003A0C  CFDD F0BA          	movff	postdec2,create_chain@mcl+1
 14764                           
 14765                           ; BSR set to: 0
 14766                           ;tff.c: 291: if (clust == 0) {
 14767  003A10  51B5               	movf	create_chain@clust& (0+255),w,b
 14768  003A12  11B6               	iorwf	(create_chain@clust+1)& (0+255),w,b
 14769  003A14  A4D8               	btfss	status,2,c
 14770  003A16  D01B               	goto	l959
 14771                           
 14772                           ; BSR set to: 0
 14773                           ;tff.c: 292: scl = fs->last_clust;
 14774  003A18  EE20 F018          	lfsr	2,24
 14775  003A1C  51BB               	movf	create_chain@fs& (0+255),w,b
 14776  003A1E  26D9               	addwf	fsr2l,f,c
 14777  003A20  51BC               	movf	(create_chain@fs+1)& (0+255),w,b
 14778  003A22  22DA               	addwfc	fsr2h,f,c
 14779  003A24  CFDE F0BF          	movff	postinc2,create_chain@scl
 14780  003A28  CFDD F0C0          	movff	postdec2,create_chain@scl+1
 14781                           
 14782                           ; BSR set to: 0
 14783                           ;tff.c: 293: if (scl < 2 || scl >= mcl) scl = 1;
 14784  003A2C  51C0               	movf	(create_chain@scl+1)& (0+255),w,b
 14785  003A2E  E104               	bnz	u11030
 14786  003A30  0E02               	movlw	2
 14787  003A32  5DBF               	subwf	create_chain@scl& (0+255),w,b
 14788  003A34  A0D8               	btfss	status,0,c
 14789  003A36  D006               	goto	u11040
 14790  003A38                     u11030:
 14791                           
 14792                           ; BSR set to: 0
 14793  003A38  51B9               	movf	create_chain@mcl& (0+255),w,b
 14794  003A3A  5DBF               	subwf	create_chain@scl& (0+255),w,b
 14795  003A3C  51BA               	movf	(create_chain@mcl+1)& (0+255),w,b
 14796  003A3E  59C0               	subwfb	(create_chain@scl+1)& (0+255),w,b
 14797  003A40  A0D8               	btfss	status,0,c
 14798  003A42  D02A               	goto	l963
 14799  003A44                     u11040:
 14800                           
 14801                           ; BSR set to: 0
 14802                           
 14803                           ; BSR set to: 0
 14804  003A44  0E00               	movlw	0
 14805  003A46  6FC0               	movwf	(create_chain@scl+1)& (0+255),b
 14806  003A48  0E01               	movlw	1
 14807  003A4A  6FBF               	movwf	create_chain@scl& (0+255),b
 14808                           
 14809                           ; BSR set to: 0
 14810                           ;tff.c: 294: }
 14811  003A4C  D025               	goto	l963
 14812  003A4E                     l959:
 14813                           
 14814                           ; BSR set to: 0
 14815                           ;tff.c: 295: else {
 14816                           ;tff.c: 296: cstat = get_cluster(clust);
 14817                           
 14818                           ; BSR set to: 0
 14819  003A4E  C0B5  F09F         	movff	create_chain@clust,get_cluster@clust
 14820  003A52  C0B6  F0A0         	movff	create_chain@clust+1,get_cluster@clust+1
 14821  003A56  EC03  F01B         	call	_get_cluster	;wreg free
 14822  003A5A  C09F  F0BD         	movff	?_get_cluster,create_chain@cstat
 14823  003A5E  C0A0  F0BE         	movff	?_get_cluster+1,create_chain@cstat+1
 14824                           
 14825                           ;tff.c: 297: if (cstat < 2) return 1;
 14826  003A62  0100               	movlb	0	; () banked
 14827  003A64  51BE               	movf	(create_chain@cstat+1)& (0+255),w,b
 14828  003A66  E109               	bnz	l9299
 14829  003A68  0E02               	movlw	2
 14830  003A6A  5DBD               	subwf	create_chain@cstat& (0+255),w,b
 14831  003A6C  B0D8               	btfsc	status,0,c
 14832  003A6E  D005               	goto	l964
 14833                           
 14834                           ; BSR set to: 0
 14835  003A70  0E00               	movlw	0
 14836  003A72  6FB6               	movwf	(?_create_chain+1)& (0+255),b
 14837  003A74  0E01               	movlw	1
 14838  003A76  6FB5               	movwf	?_create_chain& (0+255),b
 14839                           
 14840                           ; BSR set to: 0
 14841  003A78  0012               	return	
 14842  003A7A                     l964:
 14843  003A7A                     l9299:
 14844                           
 14845                           ; BSR set to: 0
 14846                           ;tff.c: 298: if (cstat < mcl) return cstat;
 14847  003A7A  51B9               	movf	create_chain@mcl& (0+255),w,b
 14848  003A7C  5DBD               	subwf	create_chain@cstat& (0+255),w,b
 14849  003A7E  51BA               	movf	(create_chain@mcl+1)& (0+255),w,b
 14850  003A80  59BE               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 14851  003A82  B0D8               	btfsc	status,0,c
 14852  003A84  D005               	goto	l966
 14853                           
 14854                           ; BSR set to: 0
 14855  003A86  C0BD  F0B5         	movff	create_chain@cstat,?_create_chain
 14856  003A8A  C0BE  F0B6         	movff	create_chain@cstat+1,?_create_chain+1
 14857  003A8E  0012               	return	
 14858  003A90                     l966:
 14859                           
 14860                           ; BSR set to: 0
 14861                           ;tff.c: 299: scl = clust;
 14862  003A90  C0B5  F0BF         	movff	create_chain@clust,create_chain@scl
 14863  003A94  C0B6  F0C0         	movff	create_chain@clust+1,create_chain@scl+1
 14864  003A98                     l963:
 14865                           
 14866                           ; BSR set to: 0
 14867                           ;tff.c: 300: }
 14868                           ;tff.c: 302: ncl = scl;
 14869  003A98  C0BF  F0C1         	movff	create_chain@scl,create_chain@ncl
 14870  003A9C  C0C0  F0C2         	movff	create_chain@scl+1,create_chain@ncl+1
 14871  003AA0                     l9303:
 14872                           
 14873                           ; BSR set to: 0
 14874                           ;tff.c: 304: ncl++;
 14875  003AA0  4BC1               	infsnz	create_chain@ncl& (0+255),f,b
 14876  003AA2  2BC2               	incf	(create_chain@ncl+1)& (0+255),f,b
 14877                           
 14878                           ; BSR set to: 0
 14879                           ;tff.c: 305: if (ncl >= mcl) {
 14880  003AA4  51B9               	movf	create_chain@mcl& (0+255),w,b
 14881  003AA6  5DC1               	subwf	create_chain@ncl& (0+255),w,b
 14882  003AA8  51BA               	movf	(create_chain@mcl+1)& (0+255),w,b
 14883  003AAA  59C2               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 14884  003AAC  A0D8               	btfss	status,0,c
 14885  003AAE  D00F               	goto	l969
 14886                           
 14887                           ; BSR set to: 0
 14888                           ;tff.c: 306: ncl = 2;
 14889  003AB0  0E00               	movlw	0
 14890  003AB2  6FC2               	movwf	(create_chain@ncl+1)& (0+255),b
 14891  003AB4  0E02               	movlw	2
 14892  003AB6  6FC1               	movwf	create_chain@ncl& (0+255),b
 14893                           
 14894                           ; BSR set to: 0
 14895                           ;tff.c: 307: if (ncl > scl) return 0;
 14896  003AB8  51C1               	movf	create_chain@ncl& (0+255),w,b
 14897  003ABA  5DBF               	subwf	create_chain@scl& (0+255),w,b
 14898  003ABC  51C2               	movf	(create_chain@ncl+1)& (0+255),w,b
 14899  003ABE  59C0               	subwfb	(create_chain@scl+1)& (0+255),w,b
 14900  003AC0  B0D8               	btfsc	status,0,c
 14901  003AC2  D005               	goto	l969
 14902                           
 14903                           ; BSR set to: 0
 14904  003AC4  0E00               	movlw	0
 14905  003AC6  6FB6               	movwf	(?_create_chain+1)& (0+255),b
 14906  003AC8  0E00               	movlw	0
 14907  003ACA  6FB5               	movwf	?_create_chain& (0+255),b
 14908                           
 14909                           ; BSR set to: 0
 14910  003ACC  0012               	return	
 14911  003ACE                     l969:
 14912                           
 14913                           ; BSR set to: 0
 14914                           ;tff.c: 308: }
 14915                           ;tff.c: 309: cstat = get_cluster(ncl);
 14916                           
 14917                           ; BSR set to: 0
 14918                           
 14919                           ; BSR set to: 0
 14920  003ACE  C0C1  F09F         	movff	create_chain@ncl,get_cluster@clust
 14921  003AD2  C0C2  F0A0         	movff	create_chain@ncl+1,get_cluster@clust+1
 14922  003AD6  EC03  F01B         	call	_get_cluster	;wreg free
 14923  003ADA  C09F  F0BD         	movff	?_get_cluster,create_chain@cstat
 14924  003ADE  C0A0  F0BE         	movff	?_get_cluster+1,create_chain@cstat+1
 14925                           
 14926                           ;tff.c: 310: if (cstat == 0) break;
 14927  003AE2  0100               	movlb	0	; () banked
 14928  003AE4  51BD               	movf	create_chain@cstat& (0+255),w,b
 14929  003AE6  11BE               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 14930  003AE8  B4D8               	btfsc	status,2,c
 14931  003AEA  D015               	goto	l971
 14932                           
 14933                           ; BSR set to: 0
 14934                           ;tff.c: 311: if (cstat == 1) return 1;
 14935                           
 14936                           ; BSR set to: 0
 14937                           
 14938                           ; BSR set to: 0
 14939  003AEC  05BD               	decf	create_chain@cstat& (0+255),w,b
 14940  003AEE  11BE               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 14941  003AF0  A4D8               	btfss	status,2,c
 14942  003AF2  D005               	goto	l972
 14943                           
 14944                           ; BSR set to: 0
 14945  003AF4  0E00               	movlw	0
 14946  003AF6  6FB6               	movwf	(?_create_chain+1)& (0+255),b
 14947  003AF8  0E01               	movlw	1
 14948  003AFA  6FB5               	movwf	?_create_chain& (0+255),b
 14949                           
 14950                           ; BSR set to: 0
 14951  003AFC  0012               	return	
 14952  003AFE                     l972:
 14953                           
 14954                           ; BSR set to: 0
 14955                           ;tff.c: 312: if (ncl == scl) return 0;
 14956                           
 14957                           ; BSR set to: 0
 14958  003AFE  51BF               	movf	create_chain@scl& (0+255),w,b
 14959  003B00  19C1               	xorwf	create_chain@ncl& (0+255),w,b
 14960  003B02  E1CE               	bnz	l9303
 14961  003B04  51C0               	movf	(create_chain@scl+1)& (0+255),w,b
 14962  003B06  19C2               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 14963  003B08  A4D8               	btfss	status,2,c
 14964  003B0A  D7CA               	goto	l967
 14965                           
 14966                           ; BSR set to: 0
 14967  003B0C  0E00               	movlw	0
 14968  003B0E  6FB6               	movwf	(?_create_chain+1)& (0+255),b
 14969  003B10  0E00               	movlw	0
 14970  003B12  6FB5               	movwf	?_create_chain& (0+255),b
 14971                           
 14972                           ; BSR set to: 0
 14973  003B14  0012               	return	
 14974  003B16                     l971:
 14975                           
 14976                           ; BSR set to: 0
 14977                           ;tff.c: 315: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 14978                           
 14979                           ; BSR set to: 0
 14980  003B16  C0C1  F09F         	movff	create_chain@ncl,put_cluster@clust
 14981  003B1A  C0C2  F0A0         	movff	create_chain@ncl+1,put_cluster@clust+1
 14982  003B1E  0EFF               	movlw	255
 14983  003B20  6FA2               	movwf	(put_cluster@val+1)& (0+255),b
 14984  003B22  69A1               	setf	put_cluster@val& (0+255),b
 14985  003B24  ECC6  F019         	call	_put_cluster	;wreg free
 14986  003B28  0900               	iorlw	0
 14987  003B2A  A4D8               	btfss	status,2,c
 14988  003B2C  D006               	goto	l974
 14989  003B2E  0E00               	movlw	0
 14990  003B30  0100               	movlb	0	; () banked
 14991  003B32  6FB6               	movwf	(?_create_chain+1)& (0+255),b
 14992  003B34  0E01               	movlw	1
 14993  003B36  6FB5               	movwf	?_create_chain& (0+255),b
 14994                           
 14995                           ; BSR set to: 0
 14996  003B38  0012               	return	
 14997  003B3A                     l974:
 14998                           
 14999                           ;tff.c: 316: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 15000                           
 15001                           ; BSR set to: 0
 15002  003B3A  0100               	movlb	0	; () banked
 15003  003B3C  51B5               	movf	create_chain@clust& (0+255),w,b
 15004  003B3E  11B6               	iorwf	(create_chain@clust+1)& (0+255),w,b
 15005  003B40  B4D8               	btfsc	status,2,c
 15006  003B42  D013               	goto	l975
 15007                           
 15008                           ; BSR set to: 0
 15009  003B44  C0B5  F09F         	movff	create_chain@clust,put_cluster@clust
 15010  003B48  C0B6  F0A0         	movff	create_chain@clust+1,put_cluster@clust+1
 15011  003B4C  C0C1  F0A1         	movff	create_chain@ncl,put_cluster@val
 15012  003B50  C0C2  F0A2         	movff	create_chain@ncl+1,put_cluster@val+1
 15013  003B54  ECC6  F019         	call	_put_cluster	;wreg free
 15014  003B58  0900               	iorlw	0
 15015  003B5A  A4D8               	btfss	status,2,c
 15016  003B5C  D006               	goto	l975
 15017  003B5E  0E00               	movlw	0
 15018  003B60  0100               	movlb	0	; () banked
 15019  003B62  6FB6               	movwf	(?_create_chain+1)& (0+255),b
 15020  003B64  0E01               	movlw	1
 15021  003B66  6FB5               	movwf	?_create_chain& (0+255),b
 15022                           
 15023                           ; BSR set to: 0
 15024  003B68  0012               	return	
 15025  003B6A                     l975:
 15026                           
 15027                           ;tff.c: 318: fs->last_clust = ncl;
 15028                           
 15029                           ; BSR set to: 0
 15030  003B6A  0100               	movlb	0	; () banked
 15031  003B6C  EE20 F018          	lfsr	2,24
 15032  003B70  51BB               	movf	create_chain@fs& (0+255),w,b
 15033  003B72  26D9               	addwf	fsr2l,f,c
 15034  003B74  51BC               	movf	(create_chain@fs+1)& (0+255),w,b
 15035  003B76  22DA               	addwfc	fsr2h,f,c
 15036  003B78  C0C1  FFDE         	movff	create_chain@ncl,postinc2
 15037  003B7C  C0C2  FFDD         	movff	create_chain@ncl+1,postdec2
 15038                           
 15039                           ;tff.c: 319: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 15040  003B80  EE20 F01A          	lfsr	2,26
 15041  003B84  51BB               	movf	create_chain@fs& (0+255),w,b
 15042  003B86  26D9               	addwf	fsr2l,f,c
 15043  003B88  51BC               	movf	(create_chain@fs+1)& (0+255),w,b
 15044  003B8A  22DA               	addwfc	fsr2h,f,c
 15045  003B8C  28DE               	incf	postinc2,w,c
 15046  003B8E  E103               	bnz	u11150
 15047  003B90  28DE               	incf	postinc2,w,c
 15048  003B92  B4D8               	btfsc	status,2,c
 15049  003B94  D009               	goto	l976
 15050  003B96                     u11150:
 15051                           
 15052                           ; BSR set to: 0
 15053                           ;tff.c: 320: fs->free_clust--;
 15054  003B96  EE20 F01A          	lfsr	2,26
 15055  003B9A  51BB               	movf	create_chain@fs& (0+255),w,b
 15056  003B9C  26D9               	addwf	fsr2l,f,c
 15057  003B9E  51BC               	movf	(create_chain@fs+1)& (0+255),w,b
 15058  003BA0  22DA               	addwfc	fsr2h,f,c
 15059  003BA2  06DE               	decf	postinc2,f,c
 15060  003BA4  0E00               	movlw	0
 15061  003BA6  5ADD               	subwfb	postdec2,f,c
 15062  003BA8                     l976:
 15063                           
 15064                           ; BSR set to: 0
 15065                           ;tff.c: 324: }
 15066                           ;tff.c: 326: return ncl;
 15067                           
 15068                           ; BSR set to: 0
 15069  003BA8  C0C1  F0B5         	movff	create_chain@ncl,?_create_chain
 15070  003BAC  C0C2  F0B6         	movff	create_chain@ncl+1,?_create_chain+1
 15071  003BB0  0012               	return	
 15072  003BB2                     __end_of_create_chain:
 15073                           	opt stack 0
 15074                           tosu	equ	0xFFF
 15075                           tosh	equ	0xFFE
 15076                           tosl	equ	0xFFD
 15077                           pclath	equ	0xFFA
 15078                           tblptru	equ	0xFF8
 15079                           tblptrh	equ	0xFF7
 15080                           tblptrl	equ	0xFF6
 15081                           tablat	equ	0xFF5
 15082                           prodh	equ	0xFF4
 15083                           prodl	equ	0xFF3
 15084                           intcon	equ	0xFF2
 15085                           intcon2	equ	0xFF1
 15086                           intcon3	equ	0xFF0
 15087                           indf0	equ	0xFEF
 15088                           postinc0	equ	0xFEE
 15089                           fsr0h	equ	0xFEA
 15090                           fsr0l	equ	0xFE9
 15091                           wreg	equ	0xFE8
 15092                           indf1	equ	0xFE7
 15093                           postinc1	equ	0xFE6
 15094                           postdec1	equ	0xFE5
 15095                           plusw1	equ	0xFE3
 15096                           fsr1h	equ	0xFE2
 15097                           fsr1l	equ	0xFE1
 15098                           indf2	equ	0xFDF
 15099                           postinc2	equ	0xFDE
 15100                           postdec2	equ	0xFDD
 15101                           plusw2	equ	0xFDB
 15102                           fsr2h	equ	0xFDA
 15103                           fsr2l	equ	0xFD9
 15104                           status	equ	0xFD8
 15105                           
 15106 ;; *************** function _put_cluster *****************
 15107 ;; Defined at:
 15108 ;;		line 197 in file "bibliotecas/tff.c"
 15109 ;; Parameters:    Size  Location     Type
 15110 ;;  clust           2   63[BANK0 ] unsigned short 
 15111 ;;  val             2   65[BANK0 ] unsigned short 
 15112 ;; Auto vars:     Size  Location     Type
 15113 ;;  fatsect         4   75[BANK0 ] unsigned long 
 15114 ;;  fs              2   83[BANK0 ] PTR struct _FATFS
 15115 ;;		 -> NULL(0), fs(544), 
 15116 ;;  p               2   81[BANK0 ] PTR unsigned char 
 15117 ;;		 -> fs.win(512), NULL(0), fs(544), 
 15118 ;;  bc              2   79[BANK0 ] unsigned short 
 15119 ;; Return value:  Size  Location     Type
 15120 ;;                  1    wreg      enum E105
 15121 ;; Registers used:
 15122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15123 ;; Tracked objects:
 15124 ;;		On entry : 0/0
 15125 ;;		On exit  : 0/0
 15126 ;;		Unchanged: 0/0
 15127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15128 ;;      Params:         0       4       0       0       0       0       0       0       0
 15129 ;;      Locals:         0      14       0       0       0       0       0       0       0
 15130 ;;      Temps:          0       4       0       0       0       0       0       0       0
 15131 ;;      Totals:         0      22       0       0       0       0       0       0       0
 15132 ;;Total ram usage:       22 bytes
 15133 ;; Hardware stack levels used:    1
 15134 ;; Hardware stack levels required when called:    9
 15135 ;; This function calls:
 15136 ;;		___wmul
 15137 ;;		_move_window
 15138 ;; This function is called by:
 15139 ;;		_remove_chain
 15140 ;;		_create_chain
 15141 ;; This function uses a non-reentrant model
 15142 ;;
 15143                           
 15144                           	psect	text48
 15145  00338C                     __ptext48:
 15146                           	opt stack 0
 15147  00338C                     _put_cluster:
 15148                           	opt stack 15
 15149                           
 15150                           ;tff.c: 202: WORD bc;
 15151                           ;tff.c: 203: BYTE *p;
 15152                           ;tff.c: 204: DWORD fatsect;
 15153                           ;tff.c: 205: FATFS *fs = FatFs;
 15154                           
 15155                           ; BSR set to: 0
 15156                           ;incstack = 0
 15157  00338C  C0FC  F0B3         	movff	_FatFs,put_cluster@fs
 15158  003390  C0FD  F0B4         	movff	_FatFs+1,put_cluster@fs+1
 15159                           
 15160                           ;tff.c: 208: fatsect = fs->fatbase;
 15161  003394  0100               	movlb	0	; () banked
 15162  003396  EE20 F008          	lfsr	2,8
 15163  00339A  51B3               	movf	put_cluster@fs& (0+255),w,b
 15164  00339C  26D9               	addwf	fsr2l,f,c
 15165  00339E  51B4               	movf	(put_cluster@fs+1)& (0+255),w,b
 15166  0033A0  22DA               	addwfc	fsr2h,f,c
 15167  0033A2  CFDE F0AB          	movff	postinc2,put_cluster@fatsect
 15168  0033A6  CFDE F0AC          	movff	postinc2,put_cluster@fatsect+1
 15169  0033AA  CFDE F0AD          	movff	postinc2,put_cluster@fatsect+2
 15170  0033AE  CFDE F0AE          	movff	postinc2,put_cluster@fatsect+3
 15171                           
 15172                           ;tff.c: 209: switch (fs->fs_type) {
 15173  0033B2  D111               	goto	l929
 15174  0033B4                     
 15175                           ; BSR set to: 0
 15176                           ;tff.c: 211: bc = (WORD)clust * 3 / 2;
 15177                           
 15178                           ; BSR set to: 0
 15179  0033B4  C09F  F060         	movff	put_cluster@clust,___wmul@multiplier
 15180  0033B8  C0A0  F061         	movff	put_cluster@clust+1,___wmul@multiplier+1
 15181  0033BC  0E00               	movlw	0
 15182  0033BE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15183  0033C0  0E03               	movlw	3
 15184  0033C2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15185  0033C4  EC80  F02D         	call	___wmul	;wreg free
 15186  0033C8  90D8               	bcf	status,0,c
 15187  0033CA  0100               	movlb	0	; () banked
 15188  0033CC  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 15189  0033CE  6FA3               	movwf	??_put_cluster& (0+255),b
 15190  0033D0  3160               	rrcf	?___wmul& (0+255),w,b
 15191  0033D2  6FAF               	movwf	put_cluster@bc& (0+255),b
 15192  0033D4  C0A3  F0B0         	movff	??_put_cluster,put_cluster@bc+1
 15193                           
 15194                           ; BSR set to: 0
 15195                           ;tff.c: 212: if (!move_window(fatsect + bc / 512U)) return FALSE;
 15196  0033D8  C0AF  F0A3         	movff	put_cluster@bc,??_put_cluster
 15197  0033DC  C0B0  F0A4         	movff	put_cluster@bc+1,??_put_cluster+1
 15198  0033E0  0E09               	movlw	9
 15199  0033E2  6FA5               	movwf	(??_put_cluster+2)& (0+255),b
 15200  0033E4                     u10885:
 15201  0033E4  90D8               	bcf	status,0,c
 15202  0033E6  33A4               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15203  0033E8  33A3               	rrcf	??_put_cluster& (0+255),f,b
 15204  0033EA  2FA5               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15205  0033EC  D7FB               	goto	u10885
 15206  0033EE  51A3               	movf	??_put_cluster& (0+255),w,b
 15207  0033F0  25AB               	addwf	put_cluster@fatsect& (0+255),w,b
 15208  0033F2  6F8A               	movwf	move_window@sector& (0+255),b
 15209  0033F4  51A4               	movf	(??_put_cluster+1)& (0+255),w,b
 15210  0033F6  21AC               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15211  0033F8  6F8B               	movwf	(move_window@sector+1)& (0+255),b
 15212  0033FA  0E00               	movlw	0
 15213  0033FC  21AD               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15214  0033FE  6F8C               	movwf	(move_window@sector+2)& (0+255),b
 15215  003400  0E00               	movlw	0
 15216  003402  21AE               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15217  003404  6F8D               	movwf	(move_window@sector+3)& (0+255),b
 15218  003406  ECD9  F01D         	call	_move_window	;wreg free
 15219  00340A  0900               	iorlw	0
 15220  00340C  A4D8               	btfss	status,2,c
 15221  00340E  D002               	goto	l931
 15222  003410  0E00               	movlw	0
 15223  003412  0012               	return	
 15224  003414                     l931:
 15225                           
 15226                           ;tff.c: 213: p = &fs->win[bc % 512U];
 15227  003414  0EFF               	movlw	255
 15228  003416  0100               	movlb	0	; () banked
 15229  003418  6FA3               	movwf	??_put_cluster& (0+255),b
 15230  00341A  0E01               	movlw	1
 15231  00341C  6FA4               	movwf	(??_put_cluster+1)& (0+255),b
 15232  00341E  C0AF  F0A5         	movff	put_cluster@bc,??_put_cluster+2
 15233  003422  C0B0  F0A6         	movff	put_cluster@bc+1,??_put_cluster+3
 15234  003426  51A3               	movf	??_put_cluster& (0+255),w,b
 15235  003428  17A5               	andwf	(??_put_cluster+2)& (0+255),f,b
 15236  00342A  51A4               	movf	(??_put_cluster+1)& (0+255),w,b
 15237  00342C  17A6               	andwf	(??_put_cluster+3)& (0+255),f,b
 15238  00342E  0E20               	movlw	32
 15239  003430  27A5               	addwf	(??_put_cluster+2)& (0+255),f,b
 15240  003432  0E00               	movlw	0
 15241  003434  23A6               	addwfc	(??_put_cluster+3)& (0+255),f,b
 15242  003436  51A5               	movf	(??_put_cluster+2)& (0+255),w,b
 15243  003438  25B3               	addwf	put_cluster@fs& (0+255),w,b
 15244  00343A  6FB1               	movwf	put_cluster@p& (0+255),b
 15245  00343C  51A6               	movf	(??_put_cluster+3)& (0+255),w,b
 15246  00343E  21B4               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 15247  003440  6FB2               	movwf	(put_cluster@p+1)& (0+255),b
 15248                           
 15249                           ; BSR set to: 0
 15250                           ;tff.c: 214: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 15251  003442  B19F               	btfsc	put_cluster@clust& (0+255),0,b
 15252  003444  D004               	goto	l934
 15253                           
 15254                           ; BSR set to: 0
 15255  003446  C0A1  F0A7         	movff	put_cluster@val,_put_cluster$1886
 15256  00344A  6BA8               	clrf	(_put_cluster$1886+1)& (0+255),b
 15257  00344C  D01A               	goto	l936
 15258  00344E                     l934:
 15259                           
 15260                           ; BSR set to: 0
 15261                           
 15262                           ; BSR set to: 0
 15263  00344E  51A1               	movf	put_cluster@val& (0+255),w,b
 15264  003450  6FA3               	movwf	??_put_cluster& (0+255),b
 15265  003452  6BA4               	clrf	(??_put_cluster+1)& (0+255),b
 15266  003454  3BA3               	swapf	??_put_cluster& (0+255),f,b
 15267  003456  3BA4               	swapf	(??_put_cluster+1)& (0+255),f,b
 15268  003458  0EF0               	movlw	240
 15269  00345A  17A4               	andwf	(??_put_cluster+1)& (0+255),f,b
 15270  00345C  51A3               	movf	??_put_cluster& (0+255),w,b
 15271  00345E  0B0F               	andlw	15
 15272  003460  13A4               	iorwf	(??_put_cluster+1)& (0+255),f,b
 15273  003462  0EF0               	movlw	240
 15274  003464  17A3               	andwf	??_put_cluster& (0+255),f,b
 15275  003466  C0B1  FFD9         	movff	put_cluster@p,fsr2l
 15276  00346A  C0B2  FFDA         	movff	put_cluster@p+1,fsr2h
 15277  00346E  50DF               	movf	indf2,w,c
 15278  003470  0B0F               	andlw	15
 15279  003472  6FA5               	movwf	(??_put_cluster+2)& (0+255),b
 15280  003474  6BA6               	clrf	(??_put_cluster+3)& (0+255),b
 15281  003476  51A3               	movf	??_put_cluster& (0+255),w,b
 15282  003478  11A5               	iorwf	(??_put_cluster+2)& (0+255),w,b
 15283  00347A  6FA7               	movwf	_put_cluster$1886& (0+255),b
 15284  00347C  51A4               	movf	(??_put_cluster+1)& (0+255),w,b
 15285  00347E  11A6               	iorwf	(??_put_cluster+3)& (0+255),w,b
 15286  003480  6FA8               	movwf	(_put_cluster$1886+1)& (0+255),b
 15287  003482                     l936:
 15288                           
 15289                           ; BSR set to: 0
 15290                           
 15291                           ; BSR set to: 0
 15292  003482  C0B1  FFD9         	movff	put_cluster@p,fsr2l
 15293  003486  C0B2  FFDA         	movff	put_cluster@p+1,fsr2h
 15294  00348A  C0A7  FFDF         	movff	_put_cluster$1886,indf2
 15295                           
 15296                           ; BSR set to: 0
 15297                           ;tff.c: 215: bc++;
 15298  00348E  4BAF               	infsnz	put_cluster@bc& (0+255),f,b
 15299  003490  2BB0               	incf	(put_cluster@bc+1)& (0+255),f,b
 15300                           
 15301                           ; BSR set to: 0
 15302                           ;tff.c: 216: fs->winflag = 1;
 15303  003492  EE20 F01F          	lfsr	2,31
 15304  003496  51B3               	movf	put_cluster@fs& (0+255),w,b
 15305  003498  26D9               	addwf	fsr2l,f,c
 15306  00349A  51B4               	movf	(put_cluster@fs+1)& (0+255),w,b
 15307  00349C  22DA               	addwfc	fsr2h,f,c
 15308  00349E  0E01               	movlw	1
 15309  0034A0  6EDF               	movwf	indf2,c
 15310                           
 15311                           ; BSR set to: 0
 15312                           ;tff.c: 217: if (!move_window(fatsect + bc / 512U)) return FALSE;
 15313  0034A2  C0AF  F0A3         	movff	put_cluster@bc,??_put_cluster
 15314  0034A6  C0B0  F0A4         	movff	put_cluster@bc+1,??_put_cluster+1
 15315  0034AA  0E09               	movlw	9
 15316  0034AC  6FA5               	movwf	(??_put_cluster+2)& (0+255),b
 15317  0034AE                     u10915:
 15318  0034AE  90D8               	bcf	status,0,c
 15319  0034B0  33A4               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15320  0034B2  33A3               	rrcf	??_put_cluster& (0+255),f,b
 15321  0034B4  2FA5               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15322  0034B6  D7FB               	goto	u10915
 15323  0034B8  51A3               	movf	??_put_cluster& (0+255),w,b
 15324  0034BA  25AB               	addwf	put_cluster@fatsect& (0+255),w,b
 15325  0034BC  6F8A               	movwf	move_window@sector& (0+255),b
 15326  0034BE  51A4               	movf	(??_put_cluster+1)& (0+255),w,b
 15327  0034C0  21AC               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15328  0034C2  6F8B               	movwf	(move_window@sector+1)& (0+255),b
 15329  0034C4  0E00               	movlw	0
 15330  0034C6  21AD               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15331  0034C8  6F8C               	movwf	(move_window@sector+2)& (0+255),b
 15332  0034CA  0E00               	movlw	0
 15333  0034CC  21AE               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15334  0034CE  6F8D               	movwf	(move_window@sector+3)& (0+255),b
 15335  0034D0  ECD9  F01D         	call	_move_window	;wreg free
 15336  0034D4  0900               	iorlw	0
 15337  0034D6  A4D8               	btfss	status,2,c
 15338  0034D8  D002               	goto	l937
 15339  0034DA  0E00               	movlw	0
 15340  0034DC  0012               	return	
 15341  0034DE                     l937:
 15342                           
 15343                           ;tff.c: 218: p = &fs->win[bc % 512U];
 15344  0034DE  0EFF               	movlw	255
 15345  0034E0  0100               	movlb	0	; () banked
 15346  0034E2  6FA3               	movwf	??_put_cluster& (0+255),b
 15347  0034E4  0E01               	movlw	1
 15348  0034E6  6FA4               	movwf	(??_put_cluster+1)& (0+255),b
 15349  0034E8  C0AF  F0A5         	movff	put_cluster@bc,??_put_cluster+2
 15350  0034EC  C0B0  F0A6         	movff	put_cluster@bc+1,??_put_cluster+3
 15351  0034F0  51A3               	movf	??_put_cluster& (0+255),w,b
 15352  0034F2  17A5               	andwf	(??_put_cluster+2)& (0+255),f,b
 15353  0034F4  51A4               	movf	(??_put_cluster+1)& (0+255),w,b
 15354  0034F6  17A6               	andwf	(??_put_cluster+3)& (0+255),f,b
 15355  0034F8  0E20               	movlw	32
 15356  0034FA  27A5               	addwf	(??_put_cluster+2)& (0+255),f,b
 15357  0034FC  0E00               	movlw	0
 15358  0034FE  23A6               	addwfc	(??_put_cluster+3)& (0+255),f,b
 15359  003500  51A5               	movf	(??_put_cluster+2)& (0+255),w,b
 15360  003502  25B3               	addwf	put_cluster@fs& (0+255),w,b
 15361  003504  6FB1               	movwf	put_cluster@p& (0+255),b
 15362  003506  51A6               	movf	(??_put_cluster+3)& (0+255),w,b
 15363  003508  21B4               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 15364  00350A  6FB2               	movwf	(put_cluster@p+1)& (0+255),b
 15365                           
 15366                           ; BSR set to: 0
 15367                           ;tff.c: 219: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 15368  00350C  B19F               	btfsc	put_cluster@clust& (0+255),0,b
 15369  00350E  D013               	goto	l939
 15370                           
 15371                           ; BSR set to: 0
 15372  003510  C0A1  F0A3         	movff	put_cluster@val,??_put_cluster
 15373  003514  C0A2  F0A4         	movff	put_cluster@val+1,??_put_cluster+1
 15374  003518  C0A4  F0A3         	movff	??_put_cluster+1,??_put_cluster
 15375  00351C  6BA4               	clrf	(??_put_cluster+1)& (0+255),b
 15376  00351E  0E0F               	movlw	15
 15377  003520  17A3               	andwf	??_put_cluster& (0+255),f,b
 15378  003522  C0B1  FFD9         	movff	put_cluster@p,fsr2l
 15379  003526  C0B2  FFDA         	movff	put_cluster@p+1,fsr2h
 15380  00352A  50DF               	movf	indf2,w,c
 15381  00352C  0BF0               	andlw	240
 15382  00352E  11A3               	iorwf	??_put_cluster& (0+255),w,b
 15383  003530  6FA5               	movwf	(??_put_cluster+2)& (0+255),b
 15384  003532  51A5               	movf	(??_put_cluster+2)& (0+255),w,b
 15385  003534  D00C               	goto	L9
 15386  003536                     l939:
 15387                           
 15388                           ; BSR set to: 0
 15389                           
 15390                           ; BSR set to: 0
 15391  003536  C0A1  F0A3         	movff	put_cluster@val,??_put_cluster
 15392  00353A  C0A2  F0A4         	movff	put_cluster@val+1,??_put_cluster+1
 15393  00353E  0E04               	movlw	4
 15394  003540  6FA5               	movwf	(??_put_cluster+2)& (0+255),b
 15395  003542                     u10945:
 15396  003542  90D8               	bcf	status,0,c
 15397  003544  33A4               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15398  003546  33A3               	rrcf	??_put_cluster& (0+255),f,b
 15399  003548  2FA5               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15400  00354A  D7FB               	goto	u10945
 15401  00354C  51A3               	movf	??_put_cluster& (0+255),w,b
 15402  00354E                     L9:
 15403  00354E  6FA9               	movwf	_put_cluster$1887& (0+255),b
 15404  003550  6BAA               	clrf	(_put_cluster$1887+1)& (0+255),b
 15405                           
 15406                           ; BSR set to: 0
 15407                           
 15408                           ; BSR set to: 0
 15409  003552  C0B1  FFD9         	movff	put_cluster@p,fsr2l
 15410  003556  C0B2  FFDA         	movff	put_cluster@p+1,fsr2h
 15411  00355A  C0A9  FFDF         	movff	_put_cluster$1887,indf2
 15412                           
 15413                           ;tff.c: 220: break;
 15414  00355E  D049               	goto	l942
 15415  003560                     
 15416                           ; BSR set to: 0
 15417                           ;tff.c: 223: if (!move_window(fatsect + clust / 256)) return FALSE;
 15418                           
 15419                           ; BSR set to: 0
 15420  003560  C09F  F0A3         	movff	put_cluster@clust,??_put_cluster
 15421  003564  C0A0  F0A4         	movff	put_cluster@clust+1,??_put_cluster+1
 15422  003568  C0A4  F0A3         	movff	??_put_cluster+1,??_put_cluster
 15423  00356C  6BA4               	clrf	(??_put_cluster+1)& (0+255),b
 15424  00356E  51A3               	movf	??_put_cluster& (0+255),w,b
 15425  003570  25AB               	addwf	put_cluster@fatsect& (0+255),w,b
 15426  003572  6F8A               	movwf	move_window@sector& (0+255),b
 15427  003574  51A4               	movf	(??_put_cluster+1)& (0+255),w,b
 15428  003576  21AC               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15429  003578  6F8B               	movwf	(move_window@sector+1)& (0+255),b
 15430  00357A  0E00               	movlw	0
 15431  00357C  21AD               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15432  00357E  6F8C               	movwf	(move_window@sector+2)& (0+255),b
 15433  003580  0E00               	movlw	0
 15434  003582  21AE               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15435  003584  6F8D               	movwf	(move_window@sector+3)& (0+255),b
 15436  003586  ECD9  F01D         	call	_move_window	;wreg free
 15437  00358A  0900               	iorlw	0
 15438  00358C  A4D8               	btfss	status,2,c
 15439  00358E  D002               	goto	l944
 15440  003590  0E00               	movlw	0
 15441  003592  0012               	return	
 15442  003594                     l944:
 15443                           
 15444                           ;tff.c: 224: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 15445  003594  0EFF               	movlw	255
 15446  003596  0100               	movlb	0	; () banked
 15447  003598  6FA3               	movwf	??_put_cluster& (0+255),b
 15448  00359A  0E01               	movlw	1
 15449  00359C  6FA4               	movwf	(??_put_cluster+1)& (0+255),b
 15450  00359E  C09F  F0A5         	movff	put_cluster@clust,??_put_cluster+2
 15451  0035A2  C0A0  F0A6         	movff	put_cluster@clust+1,??_put_cluster+3
 15452  0035A6  90D8               	bcf	status,0,c
 15453  0035A8  37A5               	rlcf	(??_put_cluster+2)& (0+255),f,b
 15454  0035AA  37A6               	rlcf	(??_put_cluster+3)& (0+255),f,b
 15455  0035AC  51A3               	movf	??_put_cluster& (0+255),w,b
 15456  0035AE  17A5               	andwf	(??_put_cluster+2)& (0+255),f,b
 15457  0035B0  51A4               	movf	(??_put_cluster+1)& (0+255),w,b
 15458  0035B2  17A6               	andwf	(??_put_cluster+3)& (0+255),f,b
 15459  0035B4  0E20               	movlw	32
 15460  0035B6  27A5               	addwf	(??_put_cluster+2)& (0+255),f,b
 15461  0035B8  0E00               	movlw	0
 15462  0035BA  23A6               	addwfc	(??_put_cluster+3)& (0+255),f,b
 15463  0035BC  51A5               	movf	(??_put_cluster+2)& (0+255),w,b
 15464  0035BE  25B3               	addwf	put_cluster@fs& (0+255),w,b
 15465  0035C0  6ED9               	movwf	fsr2l,c
 15466  0035C2  51A6               	movf	(??_put_cluster+3)& (0+255),w,b
 15467  0035C4  21B4               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 15468  0035C6  6EDA               	movwf	fsr2h,c
 15469  0035C8  C0A1  FFDE         	movff	put_cluster@val,postinc2
 15470  0035CC  C0A2  FFDD         	movff	put_cluster@val+1,postdec2
 15471                           
 15472                           ;tff.c: 225: break;
 15473  0035D0  D010               	goto	l942
 15474  0035D2                     
 15475                           ; BSR set to: 0
 15476                           ;tff.c: 233: return FALSE;
 15477                           
 15478                           ; BSR set to: 0
 15479  0035D2  0E00               	movlw	0
 15480                           
 15481                           ; BSR set to: 0
 15482  0035D4  0012               	return	
 15483  0035D6                     l929:
 15484                           
 15485                           ; BSR set to: 0
 15486                           
 15487                           ; BSR set to: 0
 15488  0035D6  EE20 F01C          	lfsr	2,28
 15489  0035DA  51B3               	movf	put_cluster@fs& (0+255),w,b
 15490  0035DC  26D9               	addwf	fsr2l,f,c
 15491  0035DE  51B4               	movf	(put_cluster@fs+1)& (0+255),w,b
 15492  0035E0  22DA               	addwfc	fsr2h,f,c
 15493  0035E2  50DF               	movf	indf2,w,c
 15494                           
 15495                           ; Switch size 1, requested type "space"
 15496                           ; Number of cases is 2, Range of values is 1 to 2
 15497                           ; switch strategies available:
 15498                           ; Name         Instructions Cycles
 15499                           ; simple_byte            7     4 (average)
 15500                           ;	Chosen strategy is simple_byte
 15501  0035E4  0A01               	xorlw	1	; case 1
 15502  0035E6  B4D8               	btfsc	status,2,c
 15503  0035E8  D6E5               	goto	l930
 15504  0035EA  0A03               	xorlw	3	; case 2
 15505  0035EC  B4D8               	btfsc	status,2,c
 15506  0035EE  D7B8               	goto	l943
 15507  0035F0  D7F0               	goto	l945
 15508  0035F2                     l942:
 15509                           
 15510                           ; BSR set to: 0
 15511                           ;tff.c: 235: fs->winflag = 1;
 15512                           
 15513                           ; BSR set to: 0
 15514  0035F2  EE20 F01F          	lfsr	2,31
 15515  0035F6  51B3               	movf	put_cluster@fs& (0+255),w,b
 15516  0035F8  26D9               	addwf	fsr2l,f,c
 15517  0035FA  51B4               	movf	(put_cluster@fs+1)& (0+255),w,b
 15518  0035FC  22DA               	addwfc	fsr2h,f,c
 15519  0035FE  0E01               	movlw	1
 15520  003600  6EDF               	movwf	indf2,c
 15521                           
 15522                           ; BSR set to: 0
 15523                           ;tff.c: 236: return TRUE;
 15524  003602  0E01               	movlw	1
 15525  003604  0012               	return	
 15526  003606                     __end_of_put_cluster:
 15527                           	opt stack 0
 15528                           tosu	equ	0xFFF
 15529                           tosh	equ	0xFFE
 15530                           tosl	equ	0xFFD
 15531                           pclath	equ	0xFFA
 15532                           tblptru	equ	0xFF8
 15533                           tblptrh	equ	0xFF7
 15534                           tblptrl	equ	0xFF6
 15535                           tablat	equ	0xFF5
 15536                           prodh	equ	0xFF4
 15537                           prodl	equ	0xFF3
 15538                           intcon	equ	0xFF2
 15539                           intcon2	equ	0xFF1
 15540                           intcon3	equ	0xFF0
 15541                           indf0	equ	0xFEF
 15542                           postinc0	equ	0xFEE
 15543                           fsr0h	equ	0xFEA
 15544                           fsr0l	equ	0xFE9
 15545                           wreg	equ	0xFE8
 15546                           indf1	equ	0xFE7
 15547                           postinc1	equ	0xFE6
 15548                           postdec1	equ	0xFE5
 15549                           plusw1	equ	0xFE3
 15550                           fsr1h	equ	0xFE2
 15551                           fsr1l	equ	0xFE1
 15552                           indf2	equ	0xFDF
 15553                           postinc2	equ	0xFDE
 15554                           postdec2	equ	0xFDD
 15555                           plusw2	equ	0xFDB
 15556                           fsr2h	equ	0xFDA
 15557                           fsr2l	equ	0xFD9
 15558                           status	equ	0xFD8
 15559                           
 15560 ;; *************** function _get_cluster *****************
 15561 ;; Defined at:
 15562 ;;		line 154 in file "bibliotecas/tff.c"
 15563 ;; Parameters:    Size  Location     Type
 15564 ;;  clust           2   63[BANK0 ] unsigned short 
 15565 ;; Auto vars:     Size  Location     Type
 15566 ;;  fatsect         4   74[BANK0 ] unsigned long 
 15567 ;;  fs              2   80[BANK0 ] PTR struct _FATFS
 15568 ;;		 -> NULL(0), fs(544), 
 15569 ;;  bc              2   78[BANK0 ] unsigned short 
 15570 ;;  wc              2   72[BANK0 ] unsigned short 
 15571 ;; Return value:  Size  Location     Type
 15572 ;;                  2   63[BANK0 ] unsigned short 
 15573 ;; Registers used:
 15574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15575 ;; Tracked objects:
 15576 ;;		On entry : 0/0
 15577 ;;		On exit  : 0/0
 15578 ;;		Unchanged: 0/0
 15579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15580 ;;      Params:         0       2       0       0       0       0       0       0       0
 15581 ;;      Locals:         0      10       0       0       0       0       0       0       0
 15582 ;;      Temps:          0       7       0       0       0       0       0       0       0
 15583 ;;      Totals:         0      19       0       0       0       0       0       0       0
 15584 ;;Total ram usage:       19 bytes
 15585 ;; Hardware stack levels used:    1
 15586 ;; Hardware stack levels required when called:    9
 15587 ;; This function calls:
 15588 ;;		___wmul
 15589 ;;		_move_window
 15590 ;; This function is called by:
 15591 ;;		_remove_chain
 15592 ;;		_create_chain
 15593 ;;		_next_dir_entry
 15594 ;;		_f_read
 15595 ;;		_f_lseek
 15596 ;; This function uses a non-reentrant model
 15597 ;;
 15598                           
 15599                           	psect	text49
 15600  003606                     __ptext49:
 15601                           	opt stack 0
 15602  003606                     _get_cluster:
 15603                           	opt stack 17
 15604                           
 15605                           ;tff.c: 158: WORD wc, bc;
 15606                           ;tff.c: 159: DWORD fatsect;
 15607                           ;tff.c: 160: FATFS *fs = FatFs;
 15608                           
 15609                           ;incstack = 0
 15610  003606  C0FC  F0B0         	movff	_FatFs,get_cluster@fs
 15611  00360A  C0FD  F0B1         	movff	_FatFs+1,get_cluster@fs+1
 15612                           
 15613                           ;tff.c: 163: if (clust >= 2 && clust < fs->max_clust) {
 15614  00360E  0100               	movlb	0	; () banked
 15615  003610  51A0               	movf	(get_cluster@clust+1)& (0+255),w,b
 15616  003612  E104               	bnz	u10790
 15617  003614  0E02               	movlw	2
 15618  003616  5D9F               	subwf	get_cluster@clust& (0+255),w,b
 15619  003618  A0D8               	btfss	status,0,c
 15620  00361A  D100               	goto	l918
 15621  00361C                     u10790:
 15622                           
 15623                           ; BSR set to: 0
 15624  00361C  EE20 F016          	lfsr	2,22
 15625  003620  51B0               	movf	get_cluster@fs& (0+255),w,b
 15626  003622  26D9               	addwf	fsr2l,f,c
 15627  003624  51B1               	movf	(get_cluster@fs+1)& (0+255),w,b
 15628  003626  22DA               	addwfc	fsr2h,f,c
 15629  003628  50DE               	movf	postinc2,w,c
 15630  00362A  5D9F               	subwf	get_cluster@clust& (0+255),w,b
 15631  00362C  50DE               	movf	postinc2,w,c
 15632  00362E  59A0               	subwfb	(get_cluster@clust+1)& (0+255),w,b
 15633  003630  B0D8               	btfsc	status,0,c
 15634  003632  D0F4               	goto	l918
 15635                           
 15636                           ; BSR set to: 0
 15637                           ;tff.c: 164: fatsect = fs->fatbase;
 15638  003634  EE20 F008          	lfsr	2,8
 15639  003638  51B0               	movf	get_cluster@fs& (0+255),w,b
 15640  00363A  26D9               	addwf	fsr2l,f,c
 15641  00363C  51B1               	movf	(get_cluster@fs+1)& (0+255),w,b
 15642  00363E  22DA               	addwfc	fsr2h,f,c
 15643  003640  CFDE F0AA          	movff	postinc2,get_cluster@fatsect
 15644  003644  CFDE F0AB          	movff	postinc2,get_cluster@fatsect+1
 15645  003648  CFDE F0AC          	movff	postinc2,get_cluster@fatsect+2
 15646  00364C  CFDE F0AD          	movff	postinc2,get_cluster@fatsect+3
 15647                           
 15648                           ;tff.c: 165: switch (fs->fs_type) {
 15649  003650  D0D8               	goto	l915
 15650  003652                     
 15651                           ; BSR set to: 0
 15652                           ;tff.c: 167: bc = (WORD)clust * 3 / 2;
 15653                           
 15654                           ; BSR set to: 0
 15655  003652  C09F  F060         	movff	get_cluster@clust,___wmul@multiplier
 15656  003656  C0A0  F061         	movff	get_cluster@clust+1,___wmul@multiplier+1
 15657  00365A  0E00               	movlw	0
 15658  00365C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15659  00365E  0E03               	movlw	3
 15660  003660  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15661  003662  EC80  F02D         	call	___wmul	;wreg free
 15662  003666  90D8               	bcf	status,0,c
 15663  003668  0100               	movlb	0	; () banked
 15664  00366A  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 15665  00366C  6FA1               	movwf	??_get_cluster& (0+255),b
 15666  00366E  3160               	rrcf	?___wmul& (0+255),w,b
 15667  003670  6FAE               	movwf	get_cluster@bc& (0+255),b
 15668  003672  C0A1  F0AF         	movff	??_get_cluster,get_cluster@bc+1
 15669                           
 15670                           ; BSR set to: 0
 15671                           ;tff.c: 168: if (!move_window(fatsect + bc / 512U)) break;
 15672  003676  C0AE  F0A1         	movff	get_cluster@bc,??_get_cluster
 15673  00367A  C0AF  F0A2         	movff	get_cluster@bc+1,??_get_cluster+1
 15674  00367E  0E09               	movlw	9
 15675  003680  6FA3               	movwf	(??_get_cluster+2)& (0+255),b
 15676  003682                     u10815:
 15677  003682  90D8               	bcf	status,0,c
 15678  003684  33A2               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15679  003686  33A1               	rrcf	??_get_cluster& (0+255),f,b
 15680  003688  2FA3               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15681  00368A  D7FB               	goto	u10815
 15682  00368C  51A1               	movf	??_get_cluster& (0+255),w,b
 15683  00368E  25AA               	addwf	get_cluster@fatsect& (0+255),w,b
 15684  003690  6F8A               	movwf	move_window@sector& (0+255),b
 15685  003692  51A2               	movf	(??_get_cluster+1)& (0+255),w,b
 15686  003694  21AB               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15687  003696  6F8B               	movwf	(move_window@sector+1)& (0+255),b
 15688  003698  0E00               	movlw	0
 15689  00369A  21AC               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15690  00369C  6F8C               	movwf	(move_window@sector+2)& (0+255),b
 15691  00369E  0E00               	movlw	0
 15692  0036A0  21AD               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15693  0036A2  6F8D               	movwf	(move_window@sector+3)& (0+255),b
 15694  0036A4  ECD9  F01D         	call	_move_window	;wreg free
 15695  0036A8  0900               	iorlw	0
 15696  0036AA  B4D8               	btfsc	status,2,c
 15697  0036AC  D0B7               	goto	l918
 15698                           
 15699                           ;tff.c: 169: wc = fs->win[bc % 512U]; bc++;
 15700  0036AE  0EFF               	movlw	255
 15701  0036B0  0100               	movlb	0	; () banked
 15702  0036B2  6FA1               	movwf	??_get_cluster& (0+255),b
 15703  0036B4  0E01               	movlw	1
 15704  0036B6  6FA2               	movwf	(??_get_cluster+1)& (0+255),b
 15705  0036B8  C0AE  F0A3         	movff	get_cluster@bc,??_get_cluster+2
 15706  0036BC  C0AF  F0A4         	movff	get_cluster@bc+1,??_get_cluster+3
 15707  0036C0  51A1               	movf	??_get_cluster& (0+255),w,b
 15708  0036C2  17A3               	andwf	(??_get_cluster+2)& (0+255),f,b
 15709  0036C4  51A2               	movf	(??_get_cluster+1)& (0+255),w,b
 15710  0036C6  17A4               	andwf	(??_get_cluster+3)& (0+255),f,b
 15711  0036C8  0E20               	movlw	32
 15712  0036CA  27A3               	addwf	(??_get_cluster+2)& (0+255),f,b
 15713  0036CC  0E00               	movlw	0
 15714  0036CE  23A4               	addwfc	(??_get_cluster+3)& (0+255),f,b
 15715  0036D0  51A3               	movf	(??_get_cluster+2)& (0+255),w,b
 15716  0036D2  25B0               	addwf	get_cluster@fs& (0+255),w,b
 15717  0036D4  6ED9               	movwf	fsr2l,c
 15718  0036D6  51A4               	movf	(??_get_cluster+3)& (0+255),w,b
 15719  0036D8  21B1               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 15720  0036DA  6EDA               	movwf	fsr2h,c
 15721  0036DC  50DF               	movf	indf2,w,c
 15722  0036DE  6FA5               	movwf	(??_get_cluster+4)& (0+255),b
 15723  0036E0  51A5               	movf	(??_get_cluster+4)& (0+255),w,b
 15724  0036E2  6FA8               	movwf	get_cluster@wc& (0+255),b
 15725  0036E4  6BA9               	clrf	(get_cluster@wc+1)& (0+255),b
 15726                           
 15727                           ; BSR set to: 0
 15728  0036E6  4BAE               	infsnz	get_cluster@bc& (0+255),f,b
 15729  0036E8  2BAF               	incf	(get_cluster@bc+1)& (0+255),f,b
 15730                           
 15731                           ; BSR set to: 0
 15732                           ;tff.c: 170: if (!move_window(fatsect + bc / 512U)) break;
 15733  0036EA  C0AE  F0A1         	movff	get_cluster@bc,??_get_cluster
 15734  0036EE  C0AF  F0A2         	movff	get_cluster@bc+1,??_get_cluster+1
 15735  0036F2  0E09               	movlw	9
 15736  0036F4  6FA3               	movwf	(??_get_cluster+2)& (0+255),b
 15737  0036F6                     u10835:
 15738  0036F6  90D8               	bcf	status,0,c
 15739  0036F8  33A2               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15740  0036FA  33A1               	rrcf	??_get_cluster& (0+255),f,b
 15741  0036FC  2FA3               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15742  0036FE  D7FB               	goto	u10835
 15743  003700  51A1               	movf	??_get_cluster& (0+255),w,b
 15744  003702  25AA               	addwf	get_cluster@fatsect& (0+255),w,b
 15745  003704  6F8A               	movwf	move_window@sector& (0+255),b
 15746  003706  51A2               	movf	(??_get_cluster+1)& (0+255),w,b
 15747  003708  21AB               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15748  00370A  6F8B               	movwf	(move_window@sector+1)& (0+255),b
 15749  00370C  0E00               	movlw	0
 15750  00370E  21AC               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15751  003710  6F8C               	movwf	(move_window@sector+2)& (0+255),b
 15752  003712  0E00               	movlw	0
 15753  003714  21AD               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15754  003716  6F8D               	movwf	(move_window@sector+3)& (0+255),b
 15755  003718  ECD9  F01D         	call	_move_window	;wreg free
 15756  00371C  0900               	iorlw	0
 15757  00371E  B4D8               	btfsc	status,2,c
 15758  003720  D07D               	goto	l918
 15759                           
 15760                           ;tff.c: 171: wc |= (WORD)fs->win[bc % 512U] << 8;
 15761  003722  0EFF               	movlw	255
 15762  003724  0100               	movlb	0	; () banked
 15763  003726  6FA1               	movwf	??_get_cluster& (0+255),b
 15764  003728  0E01               	movlw	1
 15765  00372A  6FA2               	movwf	(??_get_cluster+1)& (0+255),b
 15766  00372C  C0AE  F0A3         	movff	get_cluster@bc,??_get_cluster+2
 15767  003730  C0AF  F0A4         	movff	get_cluster@bc+1,??_get_cluster+3
 15768  003734  51A1               	movf	??_get_cluster& (0+255),w,b
 15769  003736  17A3               	andwf	(??_get_cluster+2)& (0+255),f,b
 15770  003738  51A2               	movf	(??_get_cluster+1)& (0+255),w,b
 15771  00373A  17A4               	andwf	(??_get_cluster+3)& (0+255),f,b
 15772  00373C  0E20               	movlw	32
 15773  00373E  27A3               	addwf	(??_get_cluster+2)& (0+255),f,b
 15774  003740  0E00               	movlw	0
 15775  003742  23A4               	addwfc	(??_get_cluster+3)& (0+255),f,b
 15776  003744  51A3               	movf	(??_get_cluster+2)& (0+255),w,b
 15777  003746  25B0               	addwf	get_cluster@fs& (0+255),w,b
 15778  003748  6ED9               	movwf	fsr2l,c
 15779  00374A  51A4               	movf	(??_get_cluster+3)& (0+255),w,b
 15780  00374C  21B1               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 15781  00374E  6EDA               	movwf	fsr2h,c
 15782  003750  50DF               	movf	indf2,w,c
 15783  003752  6FA5               	movwf	(??_get_cluster+4)& (0+255),b
 15784  003754  51A5               	movf	(??_get_cluster+4)& (0+255),w,b
 15785  003756  6FA7               	movwf	(??_get_cluster+6)& (0+255),b
 15786  003758  6BA6               	clrf	(??_get_cluster+5)& (0+255),b
 15787  00375A  51A6               	movf	(??_get_cluster+5)& (0+255),w,b
 15788  00375C  13A8               	iorwf	get_cluster@wc& (0+255),f,b
 15789  00375E  51A7               	movf	(??_get_cluster+6)& (0+255),w,b
 15790  003760  13A9               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 15791                           
 15792                           ; BSR set to: 0
 15793                           ;tff.c: 172: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 15794  003762  B19F               	btfsc	get_cluster@clust& (0+255),0,b
 15795  003764  D007               	goto	l921
 15796                           
 15797                           ; BSR set to: 0
 15798  003766  0EFF               	movlw	255
 15799  003768  15A8               	andwf	get_cluster@wc& (0+255),w,b
 15800  00376A  6F9F               	movwf	?_get_cluster& (0+255),b
 15801  00376C  0E0F               	movlw	15
 15802  00376E  15A9               	andwf	(get_cluster@wc+1)& (0+255),w,b
 15803  003770  6FA0               	movwf	(?_get_cluster+1)& (0+255),b
 15804  003772  0012               	return	
 15805  003774                     l921:
 15806                           
 15807                           ; BSR set to: 0
 15808                           
 15809                           ; BSR set to: 0
 15810  003774  C0A8  F0A1         	movff	get_cluster@wc,??_get_cluster
 15811  003778  C0A9  F0A2         	movff	get_cluster@wc+1,??_get_cluster+1
 15812  00377C  0E04               	movlw	4
 15813  00377E  6FA3               	movwf	(??_get_cluster+2)& (0+255),b
 15814  003780                     u10865:
 15815  003780  90D8               	bcf	status,0,c
 15816  003782  33A2               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15817  003784  33A1               	rrcf	??_get_cluster& (0+255),f,b
 15818  003786  2FA3               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15819  003788  D7FB               	goto	u10865
 15820  00378A  C0A1  F09F         	movff	??_get_cluster,?_get_cluster
 15821  00378E  C0A2  F0A0         	movff	??_get_cluster+1,?_get_cluster+1
 15822                           
 15823                           ; BSR set to: 0
 15824                           
 15825                           ; BSR set to: 0
 15826  003792  0012               	return	
 15827  003794                     
 15828                           ; BSR set to: 0
 15829                           ;tff.c: 175: if (!move_window(fatsect + clust / 256)) break;
 15830                           
 15831                           ; BSR set to: 0
 15832  003794  C09F  F0A1         	movff	get_cluster@clust,??_get_cluster
 15833  003798  C0A0  F0A2         	movff	get_cluster@clust+1,??_get_cluster+1
 15834  00379C  C0A2  F0A1         	movff	??_get_cluster+1,??_get_cluster
 15835  0037A0  6BA2               	clrf	(??_get_cluster+1)& (0+255),b
 15836  0037A2  51A1               	movf	??_get_cluster& (0+255),w,b
 15837  0037A4  25AA               	addwf	get_cluster@fatsect& (0+255),w,b
 15838  0037A6  6F8A               	movwf	move_window@sector& (0+255),b
 15839  0037A8  51A2               	movf	(??_get_cluster+1)& (0+255),w,b
 15840  0037AA  21AB               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15841  0037AC  6F8B               	movwf	(move_window@sector+1)& (0+255),b
 15842  0037AE  0E00               	movlw	0
 15843  0037B0  21AC               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15844  0037B2  6F8C               	movwf	(move_window@sector+2)& (0+255),b
 15845  0037B4  0E00               	movlw	0
 15846  0037B6  21AD               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15847  0037B8  6F8D               	movwf	(move_window@sector+3)& (0+255),b
 15848  0037BA  ECD9  F01D         	call	_move_window	;wreg free
 15849  0037BE  0900               	iorlw	0
 15850  0037C0  B4D8               	btfsc	status,2,c
 15851  0037C2  D02C               	goto	l918
 15852                           
 15853                           ;tff.c: 176: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 15854  0037C4  0EFF               	movlw	255
 15855  0037C6  0100               	movlb	0	; () banked
 15856  0037C8  6FA1               	movwf	??_get_cluster& (0+255),b
 15857  0037CA  0E01               	movlw	1
 15858  0037CC  6FA2               	movwf	(??_get_cluster+1)& (0+255),b
 15859  0037CE  C09F  F0A3         	movff	get_cluster@clust,??_get_cluster+2
 15860  0037D2  C0A0  F0A4         	movff	get_cluster@clust+1,??_get_cluster+3
 15861  0037D6  90D8               	bcf	status,0,c
 15862  0037D8  37A3               	rlcf	(??_get_cluster+2)& (0+255),f,b
 15863  0037DA  37A4               	rlcf	(??_get_cluster+3)& (0+255),f,b
 15864  0037DC  51A1               	movf	??_get_cluster& (0+255),w,b
 15865  0037DE  17A3               	andwf	(??_get_cluster+2)& (0+255),f,b
 15866  0037E0  51A2               	movf	(??_get_cluster+1)& (0+255),w,b
 15867  0037E2  17A4               	andwf	(??_get_cluster+3)& (0+255),f,b
 15868  0037E4  0E20               	movlw	32
 15869  0037E6  27A3               	addwf	(??_get_cluster+2)& (0+255),f,b
 15870  0037E8  0E00               	movlw	0
 15871  0037EA  23A4               	addwfc	(??_get_cluster+3)& (0+255),f,b
 15872  0037EC  51A3               	movf	(??_get_cluster+2)& (0+255),w,b
 15873  0037EE  25B0               	addwf	get_cluster@fs& (0+255),w,b
 15874  0037F0  6ED9               	movwf	fsr2l,c
 15875  0037F2  51A4               	movf	(??_get_cluster+3)& (0+255),w,b
 15876  0037F4  21B1               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 15877  0037F6  6EDA               	movwf	fsr2h,c
 15878  0037F8  CFDE F09F          	movff	postinc2,?_get_cluster
 15879  0037FC  CFDD F0A0          	movff	postdec2,?_get_cluster+1
 15880                           
 15881                           ; BSR set to: 0
 15882  003800  0012               	return	
 15883  003802                     l915:
 15884                           
 15885                           ; BSR set to: 0
 15886                           
 15887                           ; BSR set to: 0
 15888  003802  EE20 F01C          	lfsr	2,28
 15889  003806  51B0               	movf	get_cluster@fs& (0+255),w,b
 15890  003808  26D9               	addwf	fsr2l,f,c
 15891  00380A  51B1               	movf	(get_cluster@fs+1)& (0+255),w,b
 15892  00380C  22DA               	addwfc	fsr2h,f,c
 15893  00380E  50DF               	movf	indf2,w,c
 15894                           
 15895                           ; Switch size 1, requested type "space"
 15896                           ; Number of cases is 2, Range of values is 1 to 2
 15897                           ; switch strategies available:
 15898                           ; Name         Instructions Cycles
 15899                           ; simple_byte            7     4 (average)
 15900                           ;	Chosen strategy is simple_byte
 15901  003810  0A01               	xorlw	1	; case 1
 15902  003812  B4D8               	btfsc	status,2,c
 15903  003814  D71E               	goto	l916
 15904  003816  0A03               	xorlw	3	; case 2
 15905  003818  B4D8               	btfsc	status,2,c
 15906  00381A  D7BC               	goto	l925
 15907  00381C                     l918:
 15908                           
 15909                           ;tff.c: 183: }
 15910                           ;tff.c: 185: return 1;
 15911                           
 15912                           ; BSR set to: 0
 15913                           
 15914                           ; BSR set to: 0
 15915  00381C  0E00               	movlw	0
 15916  00381E  0100               	movlb	0	; () banked
 15917  003820  6FA0               	movwf	(?_get_cluster+1)& (0+255),b
 15918  003822  0E01               	movlw	1
 15919  003824  6F9F               	movwf	?_get_cluster& (0+255),b
 15920  003826  0012               	return	
 15921  003828                     __end_of_get_cluster:
 15922                           	opt stack 0
 15923                           tosu	equ	0xFFF
 15924                           tosh	equ	0xFFE
 15925                           tosl	equ	0xFFD
 15926                           pclath	equ	0xFFA
 15927                           tblptru	equ	0xFF8
 15928                           tblptrh	equ	0xFF7
 15929                           tblptrl	equ	0xFF6
 15930                           tablat	equ	0xFF5
 15931                           prodh	equ	0xFF4
 15932                           prodl	equ	0xFF3
 15933                           intcon	equ	0xFF2
 15934                           intcon2	equ	0xFF1
 15935                           intcon3	equ	0xFF0
 15936                           indf0	equ	0xFEF
 15937                           postinc0	equ	0xFEE
 15938                           fsr0h	equ	0xFEA
 15939                           fsr0l	equ	0xFE9
 15940                           wreg	equ	0xFE8
 15941                           indf1	equ	0xFE7
 15942                           postinc1	equ	0xFE6
 15943                           postdec1	equ	0xFE5
 15944                           plusw1	equ	0xFE3
 15945                           fsr1h	equ	0xFE2
 15946                           fsr1l	equ	0xFE1
 15947                           indf2	equ	0xFDF
 15948                           postinc2	equ	0xFDE
 15949                           postdec2	equ	0xFDD
 15950                           plusw2	equ	0xFDB
 15951                           fsr2h	equ	0xFDA
 15952                           fsr2l	equ	0xFD9
 15953                           status	equ	0xFD8
 15954                           
 15955 ;; *************** function ___wmul *****************
 15956 ;; Defined at:
 15957 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 15958 ;; Parameters:    Size  Location     Type
 15959 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15960 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15961 ;; Auto vars:     Size  Location     Type
 15962 ;;  product         2   32[COMRAM] unsigned int 
 15963 ;; Return value:  Size  Location     Type
 15964 ;;                  2    0[BANK0 ] unsigned int 
 15965 ;; Registers used:
 15966 ;;		wreg, status,2, status,0, prodl, prodh
 15967 ;; Tracked objects:
 15968 ;;		On entry : 0/0
 15969 ;;		On exit  : 0/0
 15970 ;;		Unchanged: 0/0
 15971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15972 ;;      Params:         0       4       0       0       0       0       0       0       0
 15973 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15974 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15975 ;;      Totals:         2       4       0       0       0       0       0       0       0
 15976 ;;Total ram usage:        6 bytes
 15977 ;; Hardware stack levels used:    1
 15978 ;; Hardware stack levels required when called:    3
 15979 ;; This function calls:
 15980 ;;		Nothing
 15981 ;; This function is called by:
 15982 ;;		_get_cluster
 15983 ;;		_put_cluster
 15984 ;;		_fprintf
 15985 ;; This function uses a non-reentrant model
 15986 ;;
 15987                           
 15988                           	psect	text50
 15989  005B00                     __ptext50:
 15990                           	opt stack 0
 15991  005B00                     ___wmul:
 15992                           	opt stack 22
 15993                           
 15994                           ; BSR set to: 0
 15995                           ;incstack = 0
 15996  005B00  0100               	movlb	0	; () banked
 15997  005B02  5160               	movf	___wmul@multiplier& (0+255),w,b
 15998  005B04  0362               	mulwf	___wmul@multiplicand& (0+255),b
 15999  005B06  CFF3 F021          	movff	prodl,___wmul@product
 16000  005B0A  CFF4 F022          	movff	prodh,___wmul@product+1
 16001  005B0E  5160               	movf	___wmul@multiplier& (0+255),w,b
 16002  005B10  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16003  005B12  50F3               	movf	prodl,w,c
 16004  005B14  2622               	addwf	___wmul@product+1,f,c
 16005  005B16  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16006  005B18  0362               	mulwf	___wmul@multiplicand& (0+255),b
 16007  005B1A  50F3               	movf	prodl,w,c
 16008  005B1C  2622               	addwf	___wmul@product+1,f,c
 16009                           
 16010                           ; BSR set to: 0
 16011  005B1E  C021  F060         	movff	___wmul@product,?___wmul
 16012  005B22  C022  F061         	movff	___wmul@product+1,?___wmul+1
 16013  005B26  0012               	return	
 16014  005B28                     __end_of___wmul:
 16015                           	opt stack 0
 16016                           tosu	equ	0xFFF
 16017                           tosh	equ	0xFFE
 16018                           tosl	equ	0xFFD
 16019                           pclath	equ	0xFFA
 16020                           tblptru	equ	0xFF8
 16021                           tblptrh	equ	0xFF7
 16022                           tblptrl	equ	0xFF6
 16023                           tablat	equ	0xFF5
 16024                           prodh	equ	0xFF4
 16025                           prodl	equ	0xFF3
 16026                           intcon	equ	0xFF2
 16027                           intcon2	equ	0xFF1
 16028                           intcon3	equ	0xFF0
 16029                           indf0	equ	0xFEF
 16030                           postinc0	equ	0xFEE
 16031                           fsr0h	equ	0xFEA
 16032                           fsr0l	equ	0xFE9
 16033                           wreg	equ	0xFE8
 16034                           indf1	equ	0xFE7
 16035                           postinc1	equ	0xFE6
 16036                           postdec1	equ	0xFE5
 16037                           plusw1	equ	0xFE3
 16038                           fsr1h	equ	0xFE2
 16039                           fsr1l	equ	0xFE1
 16040                           indf2	equ	0xFDF
 16041                           postinc2	equ	0xFDE
 16042                           postdec2	equ	0xFDD
 16043                           plusw2	equ	0xFDB
 16044                           fsr2h	equ	0xFDA
 16045                           fsr2l	equ	0xFD9
 16046                           status	equ	0xFD8
 16047                           
 16048 ;; *************** function ___lldiv *****************
 16049 ;; Defined at:
 16050 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 16051 ;; Parameters:    Size  Location     Type
 16052 ;;  dividend        4    0[BANK0 ] unsigned long 
 16053 ;;  divisor         4    4[BANK0 ] unsigned long 
 16054 ;; Auto vars:     Size  Location     Type
 16055 ;;  quotient        4    8[BANK0 ] unsigned long 
 16056 ;;  counter         1   12[BANK0 ] unsigned char 
 16057 ;; Return value:  Size  Location     Type
 16058 ;;                  4    0[BANK0 ] unsigned long 
 16059 ;; Registers used:
 16060 ;;		wreg, status,2, status,0
 16061 ;; Tracked objects:
 16062 ;;		On entry : 0/0
 16063 ;;		On exit  : 0/0
 16064 ;;		Unchanged: 0/0
 16065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16066 ;;      Params:         0       8       0       0       0       0       0       0       0
 16067 ;;      Locals:         0       5       0       0       0       0       0       0       0
 16068 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16069 ;;      Totals:         0      13       0       0       0       0       0       0       0
 16070 ;;Total ram usage:       13 bytes
 16071 ;; Hardware stack levels used:    1
 16072 ;; Hardware stack levels required when called:    3
 16073 ;; This function calls:
 16074 ;;		Nothing
 16075 ;; This function is called by:
 16076 ;;		_auto_mount
 16077 ;;		_f_lseek
 16078 ;;		_fprintf
 16079 ;; This function uses a non-reentrant model
 16080 ;;
 16081                           
 16082                           	psect	text51
 16083  00515A                     __ptext51:
 16084                           	opt stack 0
 16085  00515A                     ___lldiv:
 16086                           	opt stack 22
 16087                           
 16088                           ; BSR set to: 0
 16089                           ;incstack = 0
 16090  00515A  0E00               	movlw	0
 16091  00515C  0100               	movlb	0	; () banked
 16092  00515E  6F68               	movwf	___lldiv@quotient& (0+255),b
 16093  005160  0E00               	movlw	0
 16094  005162  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 16095  005164  0E00               	movlw	0
 16096  005166  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 16097  005168  0E00               	movlw	0
 16098  00516A  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 16099                           
 16100                           ; BSR set to: 0
 16101  00516C  5164               	movf	___lldiv@divisor& (0+255),w,b
 16102  00516E  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 16103  005170  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 16104  005172  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 16105  005174  B4D8               	btfsc	status,2,c
 16106  005176  D02A               	goto	l1756
 16107                           
 16108                           ; BSR set to: 0
 16109  005178  0E01               	movlw	1
 16110  00517A  6F6C               	movwf	___lldiv@counter& (0+255),b
 16111  00517C  D006               	goto	l1751
 16112  00517E                     
 16113                           ; BSR set to: 0
 16114                           
 16115                           ; BSR set to: 0
 16116  00517E  90D8               	bcf	status,0,c
 16117  005180  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 16118  005182  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 16119  005184  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 16120  005186  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 16121  005188  2B6C               	incf	___lldiv@counter& (0+255),f,b
 16122  00518A                     l1751:
 16123                           
 16124                           ; BSR set to: 0
 16125                           
 16126                           ; BSR set to: 0
 16127  00518A  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 16128  00518C  D7F8               	goto	l1752
 16129  00518E                     u12290:
 16130                           
 16131                           ; BSR set to: 0
 16132                           
 16133                           ; BSR set to: 0
 16134                           
 16135                           ; BSR set to: 0
 16136  00518E  90D8               	bcf	status,0,c
 16137  005190  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 16138  005192  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 16139  005194  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 16140  005196  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 16141                           
 16142                           ; BSR set to: 0
 16143  005198  5164               	movf	___lldiv@divisor& (0+255),w,b
 16144  00519A  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 16145  00519C  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16146  00519E  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 16147  0051A0  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16148  0051A2  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 16149  0051A4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16150  0051A6  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 16151  0051A8  A0D8               	btfss	status,0,c
 16152  0051AA  D009               	goto	l1755
 16153                           
 16154                           ; BSR set to: 0
 16155  0051AC  5164               	movf	___lldiv@divisor& (0+255),w,b
 16156  0051AE  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 16157  0051B0  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16158  0051B2  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 16159  0051B4  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16160  0051B6  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 16161  0051B8  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16162  0051BA  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 16163                           
 16164                           ; BSR set to: 0
 16165  0051BC  8168               	bsf	___lldiv@quotient& (0+255),0,b
 16166  0051BE                     l1755:
 16167                           
 16168                           ; BSR set to: 0
 16169                           
 16170                           ; BSR set to: 0
 16171  0051BE  90D8               	bcf	status,0,c
 16172  0051C0  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 16173  0051C2  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 16174  0051C4  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 16175  0051C6  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 16176                           
 16177                           ; BSR set to: 0
 16178  0051C8  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 16179  0051CA  D7E1               	goto	u12290
 16180  0051CC                     l1756:
 16181                           
 16182                           ; BSR set to: 0
 16183                           
 16184                           ; BSR set to: 0
 16185  0051CC  C068  F060         	movff	___lldiv@quotient,?___lldiv
 16186  0051D0  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 16187  0051D4  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 16188  0051D8  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 16189                           
 16190                           ; BSR set to: 0
 16191  0051DC  0012               	return		;funcret
 16192  0051DE                     __end_of___lldiv:
 16193                           	opt stack 0
 16194                           tosu	equ	0xFFF
 16195                           tosh	equ	0xFFE
 16196                           tosl	equ	0xFFD
 16197                           pclath	equ	0xFFA
 16198                           tblptru	equ	0xFF8
 16199                           tblptrh	equ	0xFF7
 16200                           tblptrl	equ	0xFF6
 16201                           tablat	equ	0xFF5
 16202                           prodh	equ	0xFF4
 16203                           prodl	equ	0xFF3
 16204                           intcon	equ	0xFF2
 16205                           intcon2	equ	0xFF1
 16206                           intcon3	equ	0xFF0
 16207                           indf0	equ	0xFEF
 16208                           postinc0	equ	0xFEE
 16209                           fsr0h	equ	0xFEA
 16210                           fsr0l	equ	0xFE9
 16211                           wreg	equ	0xFE8
 16212                           indf1	equ	0xFE7
 16213                           postinc1	equ	0xFE6
 16214                           postdec1	equ	0xFE5
 16215                           plusw1	equ	0xFE3
 16216                           fsr1h	equ	0xFE2
 16217                           fsr1l	equ	0xFE1
 16218                           indf2	equ	0xFDF
 16219                           postinc2	equ	0xFDE
 16220                           postdec2	equ	0xFDD
 16221                           plusw2	equ	0xFDB
 16222                           fsr2h	equ	0xFDA
 16223                           fsr2l	equ	0xFD9
 16224                           status	equ	0xFD8
 16225                           
 16226 ;; *************** function _f_close *****************
 16227 ;; Defined at:
 16228 ;;		line 1108 in file "bibliotecas/tff.c"
 16229 ;; Parameters:    Size  Location     Type
 16230 ;;  fp              2   74[BANK0 ] PTR struct _FIL
 16231 ;;		 -> fil(28), 
 16232 ;; Auto vars:     Size  Location     Type
 16233 ;;  res             1   76[BANK0 ] enum E155
 16234 ;; Return value:  Size  Location     Type
 16235 ;;                  1    wreg      enum E3975
 16236 ;; Registers used:
 16237 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16238 ;; Tracked objects:
 16239 ;;		On entry : 0/0
 16240 ;;		On exit  : 0/0
 16241 ;;		Unchanged: 0/0
 16242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16243 ;;      Params:         0       2       0       0       0       0       0       0       0
 16244 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16245 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16246 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16247 ;;Total ram usage:        3 bytes
 16248 ;; Hardware stack levels used:    1
 16249 ;; Hardware stack levels required when called:   11
 16250 ;; This function calls:
 16251 ;;		_f_sync
 16252 ;; This function is called by:
 16253 ;;		_escrita_sdcard
 16254 ;;		_leitura_sdcard
 16255 ;;		_sdcard_init
 16256 ;; This function uses a non-reentrant model
 16257 ;;
 16258                           
 16259                           	psect	text52
 16260  005AA8                     __ptext52:
 16261                           	opt stack 0
 16262  005AA8                     _f_close:
 16263                           	opt stack 16
 16264                           
 16265                           ;tff.c: 1112: FRESULT res;
 16266                           ;tff.c: 1116: res = f_sync(fp);
 16267                           
 16268                           ; BSR set to: 0
 16269                           ;incstack = 0
 16270  005AA8  C0AA  F0A1         	movff	f_close@fp,f_sync@fp
 16271  005AAC  C0AB  F0A2         	movff	f_close@fp+1,f_sync@fp+1
 16272  005AB0  ECA3  F022         	call	_f_sync	;wreg free
 16273  005AB4  0100               	movlb	0	; () banked
 16274  005AB6  6FAC               	movwf	f_close@res& (0+255),b
 16275                           
 16276                           ; BSR set to: 0
 16277                           ;tff.c: 1120: if (res == FR_OK) fp->fs = (0);
 16278  005AB8  51AC               	movf	f_close@res& (0+255),w,b
 16279  005ABA  A4D8               	btfss	status,2,c
 16280  005ABC  0012               	return	
 16281                           
 16282                           ; BSR set to: 0
 16283  005ABE  EE20 F004          	lfsr	2,4
 16284  005AC2  51AA               	movf	f_close@fp& (0+255),w,b
 16285  005AC4  26D9               	addwf	fsr2l,f,c
 16286  005AC6  51AB               	movf	(f_close@fp+1)& (0+255),w,b
 16287  005AC8  22DA               	addwfc	fsr2h,f,c
 16288  005ACA  0E00               	movlw	0
 16289  005ACC  6EDE               	movwf	postinc2,c
 16290  005ACE  0E00               	movlw	0
 16291  005AD0  6EDD               	movwf	postdec2,c
 16292                           
 16293                           ; BSR set to: 0
 16294  005AD2  0012               	return	
 16295  005AD4                     __end_of_f_close:
 16296                           	opt stack 0
 16297                           tosu	equ	0xFFF
 16298                           tosh	equ	0xFFE
 16299                           tosl	equ	0xFFD
 16300                           pclath	equ	0xFFA
 16301                           tblptru	equ	0xFF8
 16302                           tblptrh	equ	0xFF7
 16303                           tblptrl	equ	0xFF6
 16304                           tablat	equ	0xFF5
 16305                           prodh	equ	0xFF4
 16306                           prodl	equ	0xFF3
 16307                           intcon	equ	0xFF2
 16308                           intcon2	equ	0xFF1
 16309                           intcon3	equ	0xFF0
 16310                           indf0	equ	0xFEF
 16311                           postinc0	equ	0xFEE
 16312                           fsr0h	equ	0xFEA
 16313                           fsr0l	equ	0xFE9
 16314                           wreg	equ	0xFE8
 16315                           indf1	equ	0xFE7
 16316                           postinc1	equ	0xFE6
 16317                           postdec1	equ	0xFE5
 16318                           plusw1	equ	0xFE3
 16319                           fsr1h	equ	0xFE2
 16320                           fsr1l	equ	0xFE1
 16321                           indf2	equ	0xFDF
 16322                           postinc2	equ	0xFDE
 16323                           postdec2	equ	0xFDD
 16324                           plusw2	equ	0xFDB
 16325                           fsr2h	equ	0xFDA
 16326                           fsr2l	equ	0xFD9
 16327                           status	equ	0xFD8
 16328                           
 16329 ;; *************** function _f_sync *****************
 16330 ;; Defined at:
 16331 ;;		line 1069 in file "bibliotecas/tff.c"
 16332 ;; Parameters:    Size  Location     Type
 16333 ;;  fp              2   65[BANK0 ] PTR struct _FIL
 16334 ;;		 -> fil(28), 
 16335 ;; Auto vars:     Size  Location     Type
 16336 ;;  tim             4   67[BANK0 ] unsigned long 
 16337 ;;  dir             2   72[BANK0 ] PTR unsigned char 
 16338 ;;		 -> NULL(0), fs(544), 
 16339 ;;  res             1   71[BANK0 ] enum E155
 16340 ;; Return value:  Size  Location     Type
 16341 ;;                  1    wreg      enum E155
 16342 ;; Registers used:
 16343 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16344 ;; Tracked objects:
 16345 ;;		On entry : 0/0
 16346 ;;		On exit  : 0/0
 16347 ;;		Unchanged: 0/0
 16348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16349 ;;      Params:         0       2       0       0       0       0       0       0       0
 16350 ;;      Locals:         0       7       0       0       0       0       0       0       0
 16351 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16352 ;;      Totals:         0       9       0       0       0       0       0       0       0
 16353 ;;Total ram usage:        9 bytes
 16354 ;; Hardware stack levels used:    1
 16355 ;; Hardware stack levels required when called:   10
 16356 ;; This function calls:
 16357 ;;		_get_fattime
 16358 ;;		_move_window
 16359 ;;		_sync
 16360 ;;		_validate
 16361 ;; This function is called by:
 16362 ;;		_f_close
 16363 ;; This function uses a non-reentrant model
 16364 ;;
 16365                           
 16366                           	psect	text53
 16367  004546                     __ptext53:
 16368                           	opt stack 0
 16369  004546                     _f_sync:
 16370                           	opt stack 16
 16371                           
 16372                           ;tff.c: 1073: FRESULT res;
 16373                           ;tff.c: 1074: DWORD tim;
 16374                           ;tff.c: 1075: BYTE *dir;
 16375                           ;tff.c: 1078: res = validate(fp->fs, fp->id);
 16376                           
 16377                           ; BSR set to: 0
 16378                           ;incstack = 0
 16379  004546  0100               	movlb	0	; () banked
 16380  004548  EE20 F004          	lfsr	2,4
 16381  00454C  51A1               	movf	f_sync@fp& (0+255),w,b
 16382  00454E  26D9               	addwf	fsr2l,f,c
 16383  004550  51A2               	movf	(f_sync@fp+1)& (0+255),w,b
 16384  004552  22DA               	addwfc	fsr2h,f,c
 16385  004554  CFDE F064          	movff	postinc2,validate@fs
 16386  004558  CFDD F065          	movff	postdec2,validate@fs+1
 16387  00455C  C0A1  FFD9         	movff	f_sync@fp,fsr2l
 16388  004560  C0A2  FFDA         	movff	f_sync@fp+1,fsr2h
 16389  004564  CFDE F066          	movff	postinc2,validate@id
 16390  004568  CFDD F067          	movff	postdec2,validate@id+1
 16391  00456C  EC59  F02B         	call	_validate	;wreg free
 16392  004570  0100               	movlb	0	; () banked
 16393  004572  6FA7               	movwf	f_sync@res& (0+255),b
 16394                           
 16395                           ; BSR set to: 0
 16396                           ;tff.c: 1079: if (res == FR_OK) {
 16397  004574  51A7               	movf	f_sync@res& (0+255),w,b
 16398  004576  A4D8               	btfss	status,2,c
 16399  004578  D079               	goto	l1226
 16400                           
 16401                           ; BSR set to: 0
 16402                           ;tff.c: 1080: if (fp->flag & 0x20) {
 16403  00457A  EE20 F002          	lfsr	2,2
 16404  00457E  51A1               	movf	f_sync@fp& (0+255),w,b
 16405  004580  26D9               	addwf	fsr2l,f,c
 16406  004582  51A2               	movf	(f_sync@fp+1)& (0+255),w,b
 16407  004584  22DA               	addwfc	fsr2h,f,c
 16408  004586  AADF               	btfss	indf2,5,c
 16409  004588  D071               	goto	l1226
 16410                           
 16411                           ; BSR set to: 0
 16412                           ;tff.c: 1082: if (!move_window(fp->dir_sect))
 16413  00458A  EE20 F016          	lfsr	2,22
 16414  00458E  51A1               	movf	f_sync@fp& (0+255),w,b
 16415  004590  26D9               	addwf	fsr2l,f,c
 16416  004592  51A2               	movf	(f_sync@fp+1)& (0+255),w,b
 16417  004594  22DA               	addwfc	fsr2h,f,c
 16418  004596  CFDE F08A          	movff	postinc2,move_window@sector
 16419  00459A  CFDE F08B          	movff	postinc2,move_window@sector+1
 16420  00459E  CFDE F08C          	movff	postinc2,move_window@sector+2
 16421  0045A2  CFDE F08D          	movff	postinc2,move_window@sector+3
 16422  0045A6  ECD9  F01D         	call	_move_window	;wreg free
 16423  0045AA  0900               	iorlw	0
 16424  0045AC  A4D8               	btfss	status,2,c
 16425  0045AE  D002               	goto	l1227
 16426                           
 16427                           ;tff.c: 1083: return FR_RW_ERROR;
 16428  0045B0  0E08               	movlw	8
 16429  0045B2  0012               	return	
 16430  0045B4                     l1227:
 16431                           
 16432                           ;tff.c: 1084: dir = fp->dir_ptr;
 16433  0045B4  0100               	movlb	0	; () banked
 16434  0045B6  EE20 F01A          	lfsr	2,26
 16435  0045BA  51A1               	movf	f_sync@fp& (0+255),w,b
 16436  0045BC  26D9               	addwf	fsr2l,f,c
 16437  0045BE  51A2               	movf	(f_sync@fp+1)& (0+255),w,b
 16438  0045C0  22DA               	addwfc	fsr2h,f,c
 16439  0045C2  CFDE F0A8          	movff	postinc2,f_sync@dir
 16440  0045C6  CFDD F0A9          	movff	postdec2,f_sync@dir+1
 16441                           
 16442                           ;tff.c: 1085: dir[11] |= 0x20;
 16443  0045CA  EE20 F00B          	lfsr	2,11
 16444  0045CE  51A8               	movf	f_sync@dir& (0+255),w,b
 16445  0045D0  26D9               	addwf	fsr2l,f,c
 16446  0045D2  51A9               	movf	(f_sync@dir+1)& (0+255),w,b
 16447  0045D4  22DA               	addwfc	fsr2h,f,c
 16448  0045D6  0E00               	movlw	0
 16449  0045D8  8ADB               	bsf	plusw2,5,c
 16450                           
 16451                           ; BSR set to: 0
 16452                           ;tff.c: 1086: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 16453  0045DA  EE20 F00A          	lfsr	2,10
 16454  0045DE  51A1               	movf	f_sync@fp& (0+255),w,b
 16455  0045E0  26D9               	addwf	fsr2l,f,c
 16456  0045E2  51A2               	movf	(f_sync@fp+1)& (0+255),w,b
 16457  0045E4  22DA               	addwfc	fsr2h,f,c
 16458  0045E6  EE10 F01C          	lfsr	1,28
 16459  0045EA  51A8               	movf	f_sync@dir& (0+255),w,b
 16460  0045EC  26E1               	addwf	fsr1l,f,c
 16461  0045EE  51A9               	movf	(f_sync@dir+1)& (0+255),w,b
 16462  0045F0  22E2               	addwfc	fsr1h,f,c
 16463  0045F2  CFDE FFE6          	movff	postinc2,postinc1
 16464  0045F6  CFDE FFE6          	movff	postinc2,postinc1
 16465  0045FA  CFDE FFE6          	movff	postinc2,postinc1
 16466  0045FE  CFDE FFE6          	movff	postinc2,postinc1
 16467                           
 16468                           ; BSR set to: 0
 16469                           ;tff.c: 1087: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 16470  004602  EE20 F00E          	lfsr	2,14
 16471  004606  51A1               	movf	f_sync@fp& (0+255),w,b
 16472  004608  26D9               	addwf	fsr2l,f,c
 16473  00460A  51A2               	movf	(f_sync@fp+1)& (0+255),w,b
 16474  00460C  22DA               	addwfc	fsr2h,f,c
 16475  00460E  EE10 F01A          	lfsr	1,26
 16476  004612  51A8               	movf	f_sync@dir& (0+255),w,b
 16477  004614  26E1               	addwf	fsr1l,f,c
 16478  004616  51A9               	movf	(f_sync@dir+1)& (0+255),w,b
 16479  004618  22E2               	addwfc	fsr1h,f,c
 16480  00461A  CFDE FFE6          	movff	postinc2,postinc1
 16481  00461E  CFDD FFE5          	movff	postdec2,postdec1
 16482                           
 16483                           ; BSR set to: 0
 16484                           ;tff.c: 1091: tim = get_fattime();
 16485  004622  EC38  F023         	call	_get_fattime	;wreg free
 16486  004626  C060  F0A3         	movff	?_get_fattime,f_sync@tim
 16487  00462A  C061  F0A4         	movff	?_get_fattime+1,f_sync@tim+1
 16488  00462E  C062  F0A5         	movff	?_get_fattime+2,f_sync@tim+2
 16489  004632  C063  F0A6         	movff	?_get_fattime+3,f_sync@tim+3
 16490                           
 16491                           ;tff.c: 1092: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 16492  004636  0100               	movlb	0	; () banked
 16493  004638  EE20 F016          	lfsr	2,22
 16494  00463C  51A8               	movf	f_sync@dir& (0+255),w,b
 16495  00463E  26D9               	addwf	fsr2l,f,c
 16496  004640  51A9               	movf	(f_sync@dir+1)& (0+255),w,b
 16497  004642  22DA               	addwfc	fsr2h,f,c
 16498  004644  C0A3  FFDE         	movff	f_sync@tim,postinc2
 16499  004648  C0A4  FFDE         	movff	f_sync@tim+1,postinc2
 16500  00464C  C0A5  FFDE         	movff	f_sync@tim+2,postinc2
 16501  004650  C0A6  FFDE         	movff	f_sync@tim+3,postinc2
 16502                           
 16503                           ; BSR set to: 0
 16504                           ;tff.c: 1093: fp->flag &= (BYTE)~0x20;
 16505  004654  EE20 F002          	lfsr	2,2
 16506  004658  51A1               	movf	f_sync@fp& (0+255),w,b
 16507  00465A  26D9               	addwf	fsr2l,f,c
 16508  00465C  51A2               	movf	(f_sync@fp+1)& (0+255),w,b
 16509  00465E  22DA               	addwfc	fsr2h,f,c
 16510  004660  0EDF               	movlw	223
 16511  004662  16DF               	andwf	indf2,f,c
 16512                           
 16513                           ; BSR set to: 0
 16514                           ;tff.c: 1094: res = sync();
 16515  004664  EC5E  F02A         	call	_sync	;wreg free
 16516  004668  0100               	movlb	0	; () banked
 16517  00466A  6FA7               	movwf	f_sync@res& (0+255),b
 16518  00466C                     l1226:
 16519                           
 16520                           ; BSR set to: 0
 16521                           ;tff.c: 1095: }
 16522                           ;tff.c: 1096: }
 16523                           ;tff.c: 1097: return res;
 16524                           
 16525                           ; BSR set to: 0
 16526                           
 16527                           ; BSR set to: 0
 16528  00466C  51A7               	movf	f_sync@res& (0+255),w,b
 16529  00466E  0012               	return	
 16530  004670                     __end_of_f_sync:
 16531                           	opt stack 0
 16532                           tosu	equ	0xFFF
 16533                           tosh	equ	0xFFE
 16534                           tosl	equ	0xFFD
 16535                           pclath	equ	0xFFA
 16536                           tblptru	equ	0xFF8
 16537                           tblptrh	equ	0xFF7
 16538                           tblptrl	equ	0xFF6
 16539                           tablat	equ	0xFF5
 16540                           prodh	equ	0xFF4
 16541                           prodl	equ	0xFF3
 16542                           intcon	equ	0xFF2
 16543                           intcon2	equ	0xFF1
 16544                           intcon3	equ	0xFF0
 16545                           indf0	equ	0xFEF
 16546                           postinc0	equ	0xFEE
 16547                           fsr0h	equ	0xFEA
 16548                           fsr0l	equ	0xFE9
 16549                           wreg	equ	0xFE8
 16550                           indf1	equ	0xFE7
 16551                           postinc1	equ	0xFE6
 16552                           postdec1	equ	0xFE5
 16553                           plusw1	equ	0xFE3
 16554                           fsr1h	equ	0xFE2
 16555                           fsr1l	equ	0xFE1
 16556                           indf2	equ	0xFDF
 16557                           postinc2	equ	0xFDE
 16558                           postdec2	equ	0xFDD
 16559                           plusw2	equ	0xFDB
 16560                           fsr2h	equ	0xFDA
 16561                           fsr2l	equ	0xFD9
 16562                           status	equ	0xFD8
 16563                           
 16564 ;; *************** function _validate *****************
 16565 ;; Defined at:
 16566 ;;		line 766 in file "bibliotecas/tff.c"
 16567 ;; Parameters:    Size  Location     Type
 16568 ;;  fs              2    4[BANK0 ] PTR const struct _FATFS
 16569 ;;		 -> NULL(0), fs(544), 
 16570 ;;  id              2    6[BANK0 ] unsigned short 
 16571 ;; Auto vars:     Size  Location     Type
 16572 ;;		None
 16573 ;; Return value:  Size  Location     Type
 16574 ;;                  1    wreg      enum E155
 16575 ;; Registers used:
 16576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16577 ;; Tracked objects:
 16578 ;;		On entry : 0/0
 16579 ;;		On exit  : 0/0
 16580 ;;		Unchanged: 0/0
 16581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16582 ;;      Params:         0       4       0       0       0       0       0       0       0
 16583 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16584 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16585 ;;      Totals:         0       6       0       0       0       0       0       0       0
 16586 ;;Total ram usage:        6 bytes
 16587 ;; Hardware stack levels used:    1
 16588 ;; Hardware stack levels required when called:    5
 16589 ;; This function calls:
 16590 ;;		_disk_status
 16591 ;; This function is called by:
 16592 ;;		_f_read
 16593 ;;		_f_write
 16594 ;;		_f_sync
 16595 ;;		_f_lseek
 16596 ;;		_f_readdir
 16597 ;; This function uses a non-reentrant model
 16598 ;;
 16599                           
 16600                           	psect	text54
 16601  0056B2                     __ptext54:
 16602                           	opt stack 0
 16603  0056B2                     _validate:
 16604                           	opt stack 21
 16605                           
 16606                           ;tff.c: 771: if (!fs || !fs->fs_type || fs->id != id)
 16607                           
 16608                           ;incstack = 0
 16609  0056B2  0100               	movlb	0	; () banked
 16610  0056B4  5164               	movf	validate@fs& (0+255),w,b
 16611  0056B6  1165               	iorwf	(validate@fs+1)& (0+255),w,b
 16612  0056B8  B4D8               	btfsc	status,2,c
 16613  0056BA  D014               	goto	u11190
 16614                           
 16615                           ; BSR set to: 0
 16616  0056BC  EE20 F01C          	lfsr	2,28
 16617  0056C0  5164               	movf	validate@fs& (0+255),w,b
 16618  0056C2  26D9               	addwf	fsr2l,f,c
 16619  0056C4  5165               	movf	(validate@fs+1)& (0+255),w,b
 16620  0056C6  22DA               	addwfc	fsr2h,f,c
 16621  0056C8  50DF               	movf	indf2,w,c
 16622  0056CA  B4D8               	btfsc	status,2,c
 16623  0056CC  D00B               	goto	u11190
 16624                           
 16625                           ; BSR set to: 0
 16626  0056CE  C064  FFD9         	movff	validate@fs,fsr2l
 16627  0056D2  C065  FFDA         	movff	validate@fs+1,fsr2h
 16628  0056D6  5166               	movf	validate@id& (0+255),w,b
 16629  0056D8  18DE               	xorwf	postinc2,w,c
 16630  0056DA  E104               	bnz	l9373
 16631  0056DC  5167               	movf	(validate@id+1)& (0+255),w,b
 16632  0056DE  18DE               	xorwf	postinc2,w,c
 16633  0056E0  B4D8               	btfsc	status,2,c
 16634  0056E2  D002               	goto	l1130
 16635  0056E4                     u11190:
 16636  0056E4                     l9373:
 16637                           
 16638                           ; BSR set to: 0
 16639                           ;tff.c: 772: return FR_INVALID_OBJECT;
 16640  0056E4  0E0C               	movlw	12
 16641                           
 16642                           ; BSR set to: 0
 16643  0056E6  0012               	return	
 16644  0056E8                     l1130:
 16645                           
 16646                           ; BSR set to: 0
 16647                           ;tff.c: 773: if (disk_status(0) & 0x01)
 16648                           
 16649                           ; BSR set to: 0
 16650  0056E8  0E00               	movlw	0
 16651  0056EA  ECC8  F02B         	call	_disk_status
 16652  0056EE  0100               	movlb	0	; () banked
 16653  0056F0  6F68               	movwf	??_validate& (0+255),b
 16654  0056F2  A168               	btfss	??_validate& (0+255),0,b
 16655  0056F4  D002               	goto	l1134
 16656                           
 16657                           ; BSR set to: 0
 16658                           ;tff.c: 774: return FR_NOT_READY;
 16659  0056F6  0E01               	movlw	1
 16660                           
 16661                           ; BSR set to: 0
 16662  0056F8  0012               	return	
 16663  0056FA                     l1134:
 16664                           
 16665                           ; BSR set to: 0
 16666                           ;tff.c: 776: return FR_OK;
 16667                           
 16668                           ; BSR set to: 0
 16669  0056FA  0E00               	movlw	0
 16670  0056FC  0012               	return	
 16671  0056FE                     __end_of_validate:
 16672                           	opt stack 0
 16673                           tosu	equ	0xFFF
 16674                           tosh	equ	0xFFE
 16675                           tosl	equ	0xFFD
 16676                           pclath	equ	0xFFA
 16677                           tblptru	equ	0xFF8
 16678                           tblptrh	equ	0xFF7
 16679                           tblptrl	equ	0xFF6
 16680                           tablat	equ	0xFF5
 16681                           prodh	equ	0xFF4
 16682                           prodl	equ	0xFF3
 16683                           intcon	equ	0xFF2
 16684                           intcon2	equ	0xFF1
 16685                           intcon3	equ	0xFF0
 16686                           indf0	equ	0xFEF
 16687                           postinc0	equ	0xFEE
 16688                           fsr0h	equ	0xFEA
 16689                           fsr0l	equ	0xFE9
 16690                           wreg	equ	0xFE8
 16691                           indf1	equ	0xFE7
 16692                           postinc1	equ	0xFE6
 16693                           postdec1	equ	0xFE5
 16694                           plusw1	equ	0xFE3
 16695                           fsr1h	equ	0xFE2
 16696                           fsr1l	equ	0xFE1
 16697                           indf2	equ	0xFDF
 16698                           postinc2	equ	0xFDE
 16699                           postdec2	equ	0xFDD
 16700                           plusw2	equ	0xFDB
 16701                           fsr2h	equ	0xFDA
 16702                           fsr2l	equ	0xFD9
 16703                           status	equ	0xFD8
 16704                           
 16705 ;; *************** function _disk_status *****************
 16706 ;; Defined at:
 16707 ;;		line 27 in file "bibliotecas/diskio.c"
 16708 ;; Parameters:    Size  Location     Type
 16709 ;;  pdrv            1    wreg     unsigned char 
 16710 ;; Auto vars:     Size  Location     Type
 16711 ;;  pdrv            1    2[BANK0 ] unsigned char 
 16712 ;;  result          2    0[BANK0 ] int 
 16713 ;;  stat            1    3[BANK0 ] unsigned char 
 16714 ;; Return value:  Size  Location     Type
 16715 ;;                  1    wreg      unsigned char 
 16716 ;; Registers used:
 16717 ;;		wreg, status,2, status,0, cstack
 16718 ;; Tracked objects:
 16719 ;;		On entry : 0/0
 16720 ;;		On exit  : 0/0
 16721 ;;		Unchanged: 0/0
 16722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16723 ;;      Params:         0       0       0       0       0       0       0       0       0
 16724 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16725 ;;      Temps:          1       0       0       0       0       0       0       0       0
 16726 ;;      Totals:         1       4       0       0       0       0       0       0       0
 16727 ;;Total ram usage:        5 bytes
 16728 ;; Hardware stack levels used:    1
 16729 ;; Hardware stack levels required when called:    4
 16730 ;; This function calls:
 16731 ;;		_sdc_disk_status
 16732 ;; This function is called by:
 16733 ;;		_auto_mount
 16734 ;;		_validate
 16735 ;; This function uses a non-reentrant model
 16736 ;;
 16737                           
 16738                           	psect	text55
 16739  005790                     __ptext55:
 16740                           	opt stack 0
 16741  005790                     _disk_status:
 16742                           	opt stack 21
 16743                           
 16744                           ; BSR set to: 0
 16745                           ;incstack = 0
 16746                           ;disk_status@pdrv stored from wreg
 16747  005790  0100               	movlb	0	; () banked
 16748  005792  6F62               	movwf	disk_status@pdrv& (0+255),b
 16749                           
 16750                           ;diskio.c: 31: DSTATUS stat;
 16751                           ;diskio.c: 32: int result;
 16752                           ;diskio.c: 34: switch (pdrv) {
 16753  005794  D014               	goto	l412
 16754  005796                     
 16755                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 16756  005796  0100               	movlb	0	; () banked
 16757  005798  5162               	movf	disk_status@pdrv& (0+255),w,b
 16758  00579A  ECEE  F02D         	call	_sdc_disk_status
 16759  00579E  0100               	movlb	0	; () banked
 16760  0057A0  6F63               	movwf	disk_status@stat& (0+255),b
 16761                           
 16762                           ; BSR set to: 0
 16763                           ;diskio.c: 39: return stat;
 16764  0057A2  5163               	movf	disk_status@stat& (0+255),w,b
 16765                           
 16766                           ; BSR set to: 0
 16767  0057A4  0012               	return	
 16768  0057A6                     
 16769                           ; BSR set to: 0
 16770                           ;diskio.c: 42: result = sdc_disk_status(pdrv);
 16771                           
 16772                           ; BSR set to: 0
 16773  0057A6  5162               	movf	disk_status@pdrv& (0+255),w,b
 16774  0057A8  ECEE  F02D         	call	_sdc_disk_status
 16775  0057AC  6E23               	movwf	??_disk_status& (0+255),c
 16776  0057AE  5023               	movf	??_disk_status,w,c
 16777  0057B0  0100               	movlb	0	; () banked
 16778  0057B2  6F60               	movwf	disk_status@result& (0+255),b
 16779  0057B4  6B61               	clrf	(disk_status@result+1)& (0+255),b
 16780                           
 16781                           ; BSR set to: 0
 16782                           ;diskio.c: 44: return stat;
 16783  0057B6  5163               	movf	disk_status@stat& (0+255),w,b
 16784                           
 16785                           ; BSR set to: 0
 16786  0057B8  0012               	return	
 16787  0057BA                     
 16788                           ; BSR set to: 0
 16789                           ;diskio.c: 48: return stat;
 16790                           
 16791                           ; BSR set to: 0
 16792  0057BA  5163               	movf	disk_status@stat& (0+255),w,b
 16793                           
 16794                           ; BSR set to: 0
 16795  0057BC  0012               	return	
 16796  0057BE                     l412:
 16797                           
 16798                           ; BSR set to: 0
 16799  0057BE  0100               	movlb	0	; () banked
 16800  0057C0  5162               	movf	disk_status@pdrv& (0+255),w,b
 16801                           
 16802                           ; Switch size 1, requested type "space"
 16803                           ; Number of cases is 3, Range of values is 0 to 2
 16804                           ; switch strategies available:
 16805                           ; Name         Instructions Cycles
 16806                           ; simple_byte           10     6 (average)
 16807                           ;	Chosen strategy is simple_byte
 16808  0057C2  0A00               	xorlw	0	; case 0
 16809  0057C4  B4D8               	btfsc	status,2,c
 16810  0057C6  D7E7               	goto	l413
 16811  0057C8  0A01               	xorlw	1	; case 1
 16812  0057CA  B4D8               	btfsc	status,2,c
 16813  0057CC  D7EC               	goto	l415
 16814  0057CE  0A03               	xorlw	3	; case 2
 16815  0057D0  B4D8               	btfsc	status,2,c
 16816  0057D2  D7F3               	goto	l416
 16817                           
 16818                           ; BSR set to: 0
 16819                           ;diskio.c: 50: return 0x01;
 16820                           
 16821                           ; BSR set to: 0
 16822  0057D4  0E01               	movlw	1
 16823  0057D6  0012               	return	
 16824  0057D8                     __end_of_disk_status:
 16825                           	opt stack 0
 16826                           tosu	equ	0xFFF
 16827                           tosh	equ	0xFFE
 16828                           tosl	equ	0xFFD
 16829                           pclath	equ	0xFFA
 16830                           tblptru	equ	0xFF8
 16831                           tblptrh	equ	0xFF7
 16832                           tblptrl	equ	0xFF6
 16833                           tablat	equ	0xFF5
 16834                           prodh	equ	0xFF4
 16835                           prodl	equ	0xFF3
 16836                           intcon	equ	0xFF2
 16837                           intcon2	equ	0xFF1
 16838                           intcon3	equ	0xFF0
 16839                           indf0	equ	0xFEF
 16840                           postinc0	equ	0xFEE
 16841                           fsr0h	equ	0xFEA
 16842                           fsr0l	equ	0xFE9
 16843                           wreg	equ	0xFE8
 16844                           indf1	equ	0xFE7
 16845                           postinc1	equ	0xFE6
 16846                           postdec1	equ	0xFE5
 16847                           plusw1	equ	0xFE3
 16848                           fsr1h	equ	0xFE2
 16849                           fsr1l	equ	0xFE1
 16850                           indf2	equ	0xFDF
 16851                           postinc2	equ	0xFDE
 16852                           postdec2	equ	0xFDD
 16853                           plusw2	equ	0xFDB
 16854                           fsr2h	equ	0xFDA
 16855                           fsr2l	equ	0xFD9
 16856                           status	equ	0xFD8
 16857                           
 16858 ;; *************** function _sdc_disk_status *****************
 16859 ;; Defined at:
 16860 ;;		line 588 in file "bibliotecas/diskio.c"
 16861 ;; Parameters:    Size  Location     Type
 16862 ;;  pdrv            1    wreg     unsigned char 
 16863 ;; Auto vars:     Size  Location     Type
 16864 ;;  pdrv            1   33[COMRAM] unsigned char 
 16865 ;;  stat            1   32[COMRAM] unsigned char 
 16866 ;;  cont            1    0        unsigned char 
 16867 ;;  buff            1    0        unsigned char 
 16868 ;; Return value:  Size  Location     Type
 16869 ;;                  1    wreg      unsigned char 
 16870 ;; Registers used:
 16871 ;;		wreg, status,2
 16872 ;; Tracked objects:
 16873 ;;		On entry : 0/0
 16874 ;;		On exit  : 0/0
 16875 ;;		Unchanged: 0/0
 16876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16877 ;;      Params:         0       0       0       0       0       0       0       0       0
 16878 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16879 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16880 ;;      Totals:         2       0       0       0       0       0       0       0       0
 16881 ;;Total ram usage:        2 bytes
 16882 ;; Hardware stack levels used:    1
 16883 ;; Hardware stack levels required when called:    3
 16884 ;; This function calls:
 16885 ;;		Nothing
 16886 ;; This function is called by:
 16887 ;;		_disk_status
 16888 ;; This function uses a non-reentrant model
 16889 ;;
 16890                           
 16891                           	psect	text56
 16892  005BDC                     __ptext56:
 16893                           	opt stack 0
 16894  005BDC                     _sdc_disk_status:
 16895                           	opt stack 21
 16896                           
 16897                           ; BSR set to: 0
 16898                           ;incstack = 0
 16899                           ;sdc_disk_status@pdrv stored from wreg
 16900  005BDC  6E22               	movwf	sdc_disk_status@pdrv,c
 16901                           
 16902                           ;diskio.c: 590: DSTATUS stat = 0;
 16903  005BDE  0E00               	movlw	0
 16904  005BE0  6E21               	movwf	sdc_disk_status@stat,c
 16905                           
 16906                           ;diskio.c: 591: unsigned char buff, cont;
 16907                           ;diskio.c: 593: if (pdrv != 0) return 0x01;
 16908  005BE2  5022               	movf	sdc_disk_status@pdrv,w,c
 16909  005BE4  B4D8               	btfsc	status,2,c
 16910  005BE6  D002               	goto	l538
 16911  005BE8  0E01               	movlw	1
 16912  005BEA  0012               	return	
 16913  005BEC                     l538:
 16914                           
 16915                           ;diskio.c: 595: return FR_OK;
 16916  005BEC  0E00               	movlw	0
 16917  005BEE  0012               	return	
 16918  005BF0                     __end_of_sdc_disk_status:
 16919                           	opt stack 0
 16920                           tosu	equ	0xFFF
 16921                           tosh	equ	0xFFE
 16922                           tosl	equ	0xFFD
 16923                           pclath	equ	0xFFA
 16924                           tblptru	equ	0xFF8
 16925                           tblptrh	equ	0xFF7
 16926                           tblptrl	equ	0xFF6
 16927                           tablat	equ	0xFF5
 16928                           prodh	equ	0xFF4
 16929                           prodl	equ	0xFF3
 16930                           intcon	equ	0xFF2
 16931                           intcon2	equ	0xFF1
 16932                           intcon3	equ	0xFF0
 16933                           indf0	equ	0xFEF
 16934                           postinc0	equ	0xFEE
 16935                           fsr0h	equ	0xFEA
 16936                           fsr0l	equ	0xFE9
 16937                           wreg	equ	0xFE8
 16938                           indf1	equ	0xFE7
 16939                           postinc1	equ	0xFE6
 16940                           postdec1	equ	0xFE5
 16941                           plusw1	equ	0xFE3
 16942                           fsr1h	equ	0xFE2
 16943                           fsr1l	equ	0xFE1
 16944                           indf2	equ	0xFDF
 16945                           postinc2	equ	0xFDE
 16946                           postdec2	equ	0xFDD
 16947                           plusw2	equ	0xFDB
 16948                           fsr2h	equ	0xFDA
 16949                           fsr2l	equ	0xFD9
 16950                           status	equ	0xFD8
 16951                           
 16952 ;; *************** function _sync *****************
 16953 ;; Defined at:
 16954 ;;		line 118 in file "bibliotecas/tff.c"
 16955 ;; Parameters:    Size  Location     Type
 16956 ;;		None
 16957 ;; Auto vars:     Size  Location     Type
 16958 ;;  fs              2   63[BANK0 ] PTR struct _FATFS
 16959 ;;		 -> NULL(0), fs(544), 
 16960 ;; Return value:  Size  Location     Type
 16961 ;;                  1    wreg      enum E155
 16962 ;; Registers used:
 16963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16964 ;; Tracked objects:
 16965 ;;		On entry : 0/0
 16966 ;;		On exit  : 0/0
 16967 ;;		Unchanged: 0/0
 16968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16969 ;;      Params:         0       0       0       0       0       0       0       0       0
 16970 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16971 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16972 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16973 ;;Total ram usage:        2 bytes
 16974 ;; Hardware stack levels used:    1
 16975 ;; Hardware stack levels required when called:    9
 16976 ;; This function calls:
 16977 ;;		_disk_ioctl
 16978 ;;		_move_window
 16979 ;; This function is called by:
 16980 ;;		_f_sync
 16981 ;; This function uses a non-reentrant model
 16982 ;;
 16983                           
 16984                           	psect	text57
 16985  0054BC                     __ptext57:
 16986                           	opt stack 0
 16987  0054BC                     _sync:
 16988                           	opt stack 16
 16989                           
 16990                           ;tff.c: 120: FATFS *fs = FatFs;
 16991                           
 16992                           ;incstack = 0
 16993  0054BC  C0FC  F09F         	movff	_FatFs,sync@fs
 16994  0054C0  C0FD  F0A0         	movff	_FatFs+1,sync@fs+1
 16995                           
 16996                           ;tff.c: 123: fs->winflag = 1;
 16997  0054C4  0100               	movlb	0	; () banked
 16998  0054C6  EE20 F01F          	lfsr	2,31
 16999  0054CA  519F               	movf	sync@fs& (0+255),w,b
 17000  0054CC  26D9               	addwf	fsr2l,f,c
 17001  0054CE  51A0               	movf	(sync@fs+1)& (0+255),w,b
 17002  0054D0  22DA               	addwfc	fsr2h,f,c
 17003  0054D2  0E01               	movlw	1
 17004  0054D4  6EDF               	movwf	indf2,c
 17005                           
 17006                           ; BSR set to: 0
 17007                           ;tff.c: 124: if (!move_window(0)) return FR_RW_ERROR;
 17008  0054D6  0E00               	movlw	0
 17009  0054D8  6F8A               	movwf	move_window@sector& (0+255),b
 17010  0054DA  0E00               	movlw	0
 17011  0054DC  6F8B               	movwf	(move_window@sector+1)& (0+255),b
 17012  0054DE  0E00               	movlw	0
 17013  0054E0  6F8C               	movwf	(move_window@sector+2)& (0+255),b
 17014  0054E2  0E00               	movlw	0
 17015  0054E4  6F8D               	movwf	(move_window@sector+3)& (0+255),b
 17016  0054E6  ECD9  F01D         	call	_move_window	;wreg free
 17017  0054EA  0900               	iorlw	0
 17018  0054EC  A4D8               	btfss	status,2,c
 17019  0054EE  D002               	goto	l909
 17020  0054F0  0E08               	movlw	8
 17021  0054F2  0012               	return	
 17022  0054F4                     l909:
 17023                           
 17024                           ;tff.c: 140: if (disk_ioctl(0, 0, (0)) != RES_OK)
 17025  0054F4  0E00               	movlw	0
 17026  0054F6  6E21               	movwf	disk_ioctl@cmd,c
 17027  0054F8  0E00               	movlw	0
 17028  0054FA  6E22               	movwf	disk_ioctl@buff,c
 17029  0054FC  0E00               	movlw	0
 17030  0054FE  6E23               	movwf	disk_ioctl@buff+1,c
 17031  005500  0E00               	movlw	0
 17032  005502  EC6A  F02D         	call	_disk_ioctl
 17033  005506  0900               	iorlw	0
 17034  005508  B4D8               	btfsc	status,2,c
 17035  00550A  D002               	goto	l911
 17036                           
 17037                           ;tff.c: 141: return FR_RW_ERROR;
 17038  00550C  0E08               	movlw	8
 17039  00550E  0012               	return	
 17040  005510                     l911:
 17041                           
 17042                           ;tff.c: 142: return FR_OK;
 17043  005510  0E00               	movlw	0
 17044  005512  0012               	return	
 17045  005514                     __end_of_sync:
 17046                           	opt stack 0
 17047                           tosu	equ	0xFFF
 17048                           tosh	equ	0xFFE
 17049                           tosl	equ	0xFFD
 17050                           pclath	equ	0xFFA
 17051                           tblptru	equ	0xFF8
 17052                           tblptrh	equ	0xFF7
 17053                           tblptrl	equ	0xFF6
 17054                           tablat	equ	0xFF5
 17055                           prodh	equ	0xFF4
 17056                           prodl	equ	0xFF3
 17057                           intcon	equ	0xFF2
 17058                           intcon2	equ	0xFF1
 17059                           intcon3	equ	0xFF0
 17060                           indf0	equ	0xFEF
 17061                           postinc0	equ	0xFEE
 17062                           fsr0h	equ	0xFEA
 17063                           fsr0l	equ	0xFE9
 17064                           wreg	equ	0xFE8
 17065                           indf1	equ	0xFE7
 17066                           postinc1	equ	0xFE6
 17067                           postdec1	equ	0xFE5
 17068                           plusw1	equ	0xFE3
 17069                           fsr1h	equ	0xFE2
 17070                           fsr1l	equ	0xFE1
 17071                           indf2	equ	0xFDF
 17072                           postinc2	equ	0xFDE
 17073                           postdec2	equ	0xFDD
 17074                           plusw2	equ	0xFDB
 17075                           fsr2h	equ	0xFDA
 17076                           fsr2l	equ	0xFD9
 17077                           status	equ	0xFD8
 17078                           
 17079 ;; *************** function _move_window *****************
 17080 ;; Defined at:
 17081 ;;		line 76 in file "bibliotecas/tff.c"
 17082 ;; Parameters:    Size  Location     Type
 17083 ;;  sector          4   42[BANK0 ] unsigned long 
 17084 ;; Auto vars:     Size  Location     Type
 17085 ;;  n               1   56[BANK0 ] unsigned char 
 17086 ;;  wsect           4   57[BANK0 ] unsigned long 
 17087 ;;  fs              2   61[BANK0 ] PTR struct _FATFS
 17088 ;;		 -> NULL(0), fs(544), 
 17089 ;; Return value:  Size  Location     Type
 17090 ;;                  1    wreg      enum E105
 17091 ;; Registers used:
 17092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17093 ;; Tracked objects:
 17094 ;;		On entry : 0/0
 17095 ;;		On exit  : 0/0
 17096 ;;		Unchanged: 0/0
 17097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17098 ;;      Params:         0       4       0       0       0       0       0       0       0
 17099 ;;      Locals:         0       7       0       0       0       0       0       0       0
 17100 ;;      Temps:          0      10       0       0       0       0       0       0       0
 17101 ;;      Totals:         0      21       0       0       0       0       0       0       0
 17102 ;;Total ram usage:       21 bytes
 17103 ;; Hardware stack levels used:    1
 17104 ;; Hardware stack levels required when called:    8
 17105 ;; This function calls:
 17106 ;;		_disk_read
 17107 ;;		_disk_write
 17108 ;; This function is called by:
 17109 ;;		_sync
 17110 ;;		_get_cluster
 17111 ;;		_put_cluster
 17112 ;;		_trace_path
 17113 ;;		_reserve_direntry
 17114 ;;		_f_open
 17115 ;;		_f_read
 17116 ;;		_f_write
 17117 ;;		_f_sync
 17118 ;;		_f_readdir
 17119 ;; This function uses a non-reentrant model
 17120 ;;
 17121                           
 17122                           	psect	text58
 17123  003BB2                     __ptext58:
 17124                           	opt stack 0
 17125  003BB2                     _move_window:
 17126                           	opt stack 18
 17127                           
 17128                           ;tff.c: 80: DWORD wsect;
 17129                           ;tff.c: 81: FATFS *fs = FatFs;
 17130                           
 17131                           ;incstack = 0
 17132  003BB2  C0FC  F09D         	movff	_FatFs,move_window@fs
 17133  003BB6  C0FD  F09E         	movff	_FatFs+1,move_window@fs+1
 17134                           
 17135                           ;tff.c: 84: wsect = fs->winsect;
 17136  003BBA  0100               	movlb	0	; () banked
 17137  003BBC  EE20 F004          	lfsr	2,4
 17138  003BC0  519D               	movf	move_window@fs& (0+255),w,b
 17139  003BC2  26D9               	addwf	fsr2l,f,c
 17140  003BC4  519E               	movf	(move_window@fs+1)& (0+255),w,b
 17141  003BC6  22DA               	addwfc	fsr2h,f,c
 17142  003BC8  CFDE F099          	movff	postinc2,move_window@wsect
 17143  003BCC  CFDE F09A          	movff	postinc2,move_window@wsect+1
 17144  003BD0  CFDE F09B          	movff	postinc2,move_window@wsect+2
 17145  003BD4  CFDE F09C          	movff	postinc2,move_window@wsect+3
 17146                           
 17147                           ; BSR set to: 0
 17148                           ;tff.c: 85: if (wsect != sector) {
 17149  003BD8  518A               	movf	move_window@sector& (0+255),w,b
 17150  003BDA  1999               	xorwf	move_window@wsect& (0+255),w,b
 17151  003BDC  E10A               	bnz	u10670
 17152  003BDE  518B               	movf	(move_window@sector+1)& (0+255),w,b
 17153  003BE0  199A               	xorwf	(move_window@wsect+1)& (0+255),w,b
 17154  003BE2  E107               	bnz	u10670
 17155  003BE4  518C               	movf	(move_window@sector+2)& (0+255),w,b
 17156  003BE6  199B               	xorwf	(move_window@wsect+2)& (0+255),w,b
 17157  003BE8  E104               	bnz	u10670
 17158  003BEA  518D               	movf	(move_window@sector+3)& (0+255),w,b
 17159  003BEC  199C               	xorwf	(move_window@wsect+3)& (0+255),w,b
 17160  003BEE  B4D8               	btfsc	status,2,c
 17161  003BF0  D0B9               	goto	l905
 17162  003BF2                     u10670:
 17163                           
 17164                           ; BSR set to: 0
 17165                           ;tff.c: 87: BYTE n;
 17166                           ;tff.c: 88: if (fs->winflag) {
 17167  003BF2  EE20 F01F          	lfsr	2,31
 17168  003BF6  519D               	movf	move_window@fs& (0+255),w,b
 17169  003BF8  26D9               	addwf	fsr2l,f,c
 17170  003BFA  519E               	movf	(move_window@fs+1)& (0+255),w,b
 17171  003BFC  22DA               	addwfc	fsr2h,f,c
 17172  003BFE  50DF               	movf	indf2,w,c
 17173  003C00  B4D8               	btfsc	status,2,c
 17174  003C02  D083               	goto	u10720
 17175                           
 17176                           ; BSR set to: 0
 17177                           ;tff.c: 89: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 17178  003C04  0E20               	movlw	32
 17179  003C06  259D               	addwf	move_window@fs& (0+255),w,b
 17180  003C08  6F7F               	movwf	disk_write@buff& (0+255),b
 17181  003C0A  0E00               	movlw	0
 17182  003C0C  219E               	addwfc	(move_window@fs+1)& (0+255),w,b
 17183  003C0E  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 17184  003C10  C099  F081         	movff	move_window@wsect,disk_write@sector
 17185  003C14  C09A  F082         	movff	move_window@wsect+1,disk_write@sector+1
 17186  003C18  C09B  F083         	movff	move_window@wsect+2,disk_write@sector+2
 17187  003C1C  C09C  F084         	movff	move_window@wsect+3,disk_write@sector+3
 17188  003C20  0E01               	movlw	1
 17189  003C22  6F85               	movwf	disk_write@count& (0+255),b
 17190  003C24  0E00               	movlw	0
 17191  003C26  EC26  F028         	call	_disk_write
 17192  003C2A  0900               	iorlw	0
 17193  003C2C  B4D8               	btfsc	status,2,c
 17194  003C2E  D002               	goto	l900
 17195                           
 17196                           ;tff.c: 90: return FALSE;
 17197  003C30  0E00               	movlw	0
 17198  003C32  0012               	return	
 17199  003C34                     l900:
 17200                           
 17201                           ;tff.c: 91: fs->winflag = 0;
 17202  003C34  0100               	movlb	0	; () banked
 17203  003C36  EE20 F01F          	lfsr	2,31
 17204  003C3A  519D               	movf	move_window@fs& (0+255),w,b
 17205  003C3C  26D9               	addwf	fsr2l,f,c
 17206  003C3E  519E               	movf	(move_window@fs+1)& (0+255),w,b
 17207  003C40  22DA               	addwfc	fsr2h,f,c
 17208  003C42  0E00               	movlw	0
 17209  003C44  6EDF               	movwf	indf2,c
 17210                           
 17211                           ;tff.c: 92: if (wsect < (fs->fatbase + fs->sects_fat)) {
 17212  003C46  EE20 F008          	lfsr	2,8
 17213  003C4A  519D               	movf	move_window@fs& (0+255),w,b
 17214  003C4C  26D9               	addwf	fsr2l,f,c
 17215  003C4E  519E               	movf	(move_window@fs+1)& (0+255),w,b
 17216  003C50  22DA               	addwfc	fsr2h,f,c
 17217  003C52  CFDE F08E          	movff	postinc2,??_move_window
 17218  003C56  CFDE F08F          	movff	postinc2,??_move_window+1
 17219  003C5A  CFDE F090          	movff	postinc2,??_move_window+2
 17220  003C5E  CFDE F091          	movff	postinc2,??_move_window+3
 17221  003C62  EE20 F014          	lfsr	2,20
 17222  003C66  519D               	movf	move_window@fs& (0+255),w,b
 17223  003C68  26D9               	addwf	fsr2l,f,c
 17224  003C6A  519E               	movf	(move_window@fs+1)& (0+255),w,b
 17225  003C6C  22DA               	addwfc	fsr2h,f,c
 17226  003C6E  CFDE F092          	movff	postinc2,??_move_window+4
 17227  003C72  CFDD F093          	movff	postdec2,??_move_window+5
 17228  003C76  5192               	movf	(??_move_window+4)& (0+255),w,b
 17229  003C78  258E               	addwf	??_move_window& (0+255),w,b
 17230  003C7A  6F94               	movwf	(??_move_window+6)& (0+255),b
 17231  003C7C  5193               	movf	(??_move_window+5)& (0+255),w,b
 17232  003C7E  218F               	addwfc	(??_move_window+1)& (0+255),w,b
 17233  003C80  6F95               	movwf	(??_move_window+7)& (0+255),b
 17234  003C82  0E00               	movlw	0
 17235  003C84  2190               	addwfc	(??_move_window+2)& (0+255),w,b
 17236  003C86  6F96               	movwf	(??_move_window+8)& (0+255),b
 17237  003C88  0E00               	movlw	0
 17238  003C8A  2191               	addwfc	(??_move_window+3)& (0+255),w,b
 17239  003C8C  6F97               	movwf	(??_move_window+9)& (0+255),b
 17240  003C8E  5194               	movf	(??_move_window+6)& (0+255),w,b
 17241  003C90  5D99               	subwf	move_window@wsect& (0+255),w,b
 17242  003C92  5195               	movf	(??_move_window+7)& (0+255),w,b
 17243  003C94  599A               	subwfb	(move_window@wsect+1)& (0+255),w,b
 17244  003C96  5196               	movf	(??_move_window+8)& (0+255),w,b
 17245  003C98  599B               	subwfb	(move_window@wsect+2)& (0+255),w,b
 17246  003C9A  5197               	movf	(??_move_window+9)& (0+255),w,b
 17247  003C9C  599C               	subwfb	(move_window@wsect+3)& (0+255),w,b
 17248  003C9E  B0D8               	btfsc	status,0,c
 17249  003CA0  D034               	goto	u10720
 17250                           
 17251                           ; BSR set to: 0
 17252                           ;tff.c: 93: for (n = fs->n_fats; n >= 2; n--) {
 17253  003CA2  EE20 F01E          	lfsr	2,30
 17254  003CA6  519D               	movf	move_window@fs& (0+255),w,b
 17255  003CA8  26D9               	addwf	fsr2l,f,c
 17256  003CAA  519E               	movf	(move_window@fs+1)& (0+255),w,b
 17257  003CAC  22DA               	addwfc	fsr2h,f,c
 17258  003CAE  50DF               	movf	indf2,w,c
 17259  003CB0  6F98               	movwf	move_window@n& (0+255),b
 17260  003CB2                     l9035:
 17261                           
 17262                           ; BSR set to: 0
 17263  003CB2  0E02               	movlw	2
 17264  003CB4  6198               	cpfslt	move_window@n& (0+255),b
 17265  003CB6  D001               	goto	l903
 17266  003CB8  D028               	goto	u10720
 17267  003CBA                     l903:
 17268                           
 17269                           ; BSR set to: 0
 17270                           ;tff.c: 94: wsect += fs->sects_fat;
 17271                           
 17272                           ; BSR set to: 0
 17273  003CBA  EE20 F014          	lfsr	2,20
 17274  003CBE  519D               	movf	move_window@fs& (0+255),w,b
 17275  003CC0  26D9               	addwf	fsr2l,f,c
 17276  003CC2  519E               	movf	(move_window@fs+1)& (0+255),w,b
 17277  003CC4  22DA               	addwfc	fsr2h,f,c
 17278  003CC6  CFDE F08E          	movff	postinc2,??_move_window
 17279  003CCA  CFDD F08F          	movff	postdec2,??_move_window+1
 17280  003CCE  518E               	movf	??_move_window& (0+255),w,b
 17281  003CD0  2799               	addwf	move_window@wsect& (0+255),f,b
 17282  003CD2  518F               	movf	(??_move_window+1)& (0+255),w,b
 17283  003CD4  239A               	addwfc	(move_window@wsect+1)& (0+255),f,b
 17284  003CD6  0E00               	movlw	0
 17285  003CD8  239B               	addwfc	(move_window@wsect+2)& (0+255),f,b
 17286  003CDA  0E00               	movlw	0
 17287  003CDC  239C               	addwfc	(move_window@wsect+3)& (0+255),f,b
 17288                           
 17289                           ; BSR set to: 0
 17290                           ;tff.c: 95: disk_write(0, fs->win, wsect, 1);
 17291  003CDE  0E20               	movlw	32
 17292  003CE0  259D               	addwf	move_window@fs& (0+255),w,b
 17293  003CE2  6F7F               	movwf	disk_write@buff& (0+255),b
 17294  003CE4  0E00               	movlw	0
 17295  003CE6  219E               	addwfc	(move_window@fs+1)& (0+255),w,b
 17296  003CE8  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 17297  003CEA  C099  F081         	movff	move_window@wsect,disk_write@sector
 17298  003CEE  C09A  F082         	movff	move_window@wsect+1,disk_write@sector+1
 17299  003CF2  C09B  F083         	movff	move_window@wsect+2,disk_write@sector+2
 17300  003CF6  C09C  F084         	movff	move_window@wsect+3,disk_write@sector+3
 17301  003CFA  0E01               	movlw	1
 17302  003CFC  6F85               	movwf	disk_write@count& (0+255),b
 17303  003CFE  0E00               	movlw	0
 17304  003D00  EC26  F028         	call	_disk_write
 17305  003D04  0100               	movlb	0	; () banked
 17306  003D06  0798               	decf	move_window@n& (0+255),f,b
 17307  003D08  D7D4               	goto	l9035
 17308  003D0A                     u10720:
 17309                           
 17310                           ; BSR set to: 0
 17311                           ;tff.c: 96: }
 17312                           ;tff.c: 97: }
 17313                           ;tff.c: 98: }
 17314                           ;tff.c: 100: if (sector) {
 17315                           
 17316                           ; BSR set to: 0
 17317                           
 17318                           ; BSR set to: 0
 17319                           
 17320                           ; BSR set to: 0
 17321  003D0A  518A               	movf	move_window@sector& (0+255),w,b
 17322  003D0C  118B               	iorwf	(move_window@sector+1)& (0+255),w,b
 17323  003D0E  118C               	iorwf	(move_window@sector+2)& (0+255),w,b
 17324  003D10  118D               	iorwf	(move_window@sector+3)& (0+255),w,b
 17325  003D12  B4D8               	btfsc	status,2,c
 17326  003D14  D027               	goto	l905
 17327                           
 17328                           ; BSR set to: 0
 17329                           ;tff.c: 101: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 17330  003D16  0E20               	movlw	32
 17331  003D18  259D               	addwf	move_window@fs& (0+255),w,b
 17332  003D1A  6F7F               	movwf	disk_read@buff& (0+255),b
 17333  003D1C  0E00               	movlw	0
 17334  003D1E  219E               	addwfc	(move_window@fs+1)& (0+255),w,b
 17335  003D20  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 17336  003D22  C08A  F081         	movff	move_window@sector,disk_read@sector
 17337  003D26  C08B  F082         	movff	move_window@sector+1,disk_read@sector+1
 17338  003D2A  C08C  F083         	movff	move_window@sector+2,disk_read@sector+2
 17339  003D2E  C08D  F084         	movff	move_window@sector+3,disk_read@sector+3
 17340  003D32  0E01               	movlw	1
 17341  003D34  6F85               	movwf	disk_read@count& (0+255),b
 17342  003D36  0E00               	movlw	0
 17343  003D38  EC0D  F027         	call	_disk_read
 17344  003D3C  0900               	iorlw	0
 17345  003D3E  B4D8               	btfsc	status,2,c
 17346  003D40  D002               	goto	l906
 17347                           
 17348                           ;tff.c: 102: return FALSE;
 17349  003D42  0E00               	movlw	0
 17350  003D44  0012               	return	
 17351  003D46                     l906:
 17352                           
 17353                           ;tff.c: 103: fs->winsect = sector;
 17354  003D46  0100               	movlb	0	; () banked
 17355  003D48  EE20 F004          	lfsr	2,4
 17356  003D4C  519D               	movf	move_window@fs& (0+255),w,b
 17357  003D4E  26D9               	addwf	fsr2l,f,c
 17358  003D50  519E               	movf	(move_window@fs+1)& (0+255),w,b
 17359  003D52  22DA               	addwfc	fsr2h,f,c
 17360  003D54  C08A  FFDE         	movff	move_window@sector,postinc2
 17361  003D58  C08B  FFDE         	movff	move_window@sector+1,postinc2
 17362  003D5C  C08C  FFDE         	movff	move_window@sector+2,postinc2
 17363  003D60  C08D  FFDE         	movff	move_window@sector+3,postinc2
 17364  003D64                     l905:
 17365                           
 17366                           ; BSR set to: 0
 17367                           ;tff.c: 104: }
 17368                           ;tff.c: 105: }
 17369                           ;tff.c: 106: return TRUE;
 17370                           
 17371                           ; BSR set to: 0
 17372                           
 17373                           ; BSR set to: 0
 17374  003D64  0E01               	movlw	1
 17375  003D66  0012               	return	
 17376  003D68                     __end_of_move_window:
 17377                           	opt stack 0
 17378                           tosu	equ	0xFFF
 17379                           tosh	equ	0xFFE
 17380                           tosl	equ	0xFFD
 17381                           pclath	equ	0xFFA
 17382                           tblptru	equ	0xFF8
 17383                           tblptrh	equ	0xFF7
 17384                           tblptrl	equ	0xFF6
 17385                           tablat	equ	0xFF5
 17386                           prodh	equ	0xFF4
 17387                           prodl	equ	0xFF3
 17388                           intcon	equ	0xFF2
 17389                           intcon2	equ	0xFF1
 17390                           intcon3	equ	0xFF0
 17391                           indf0	equ	0xFEF
 17392                           postinc0	equ	0xFEE
 17393                           fsr0h	equ	0xFEA
 17394                           fsr0l	equ	0xFE9
 17395                           wreg	equ	0xFE8
 17396                           indf1	equ	0xFE7
 17397                           postinc1	equ	0xFE6
 17398                           postdec1	equ	0xFE5
 17399                           plusw1	equ	0xFE3
 17400                           fsr1h	equ	0xFE2
 17401                           fsr1l	equ	0xFE1
 17402                           indf2	equ	0xFDF
 17403                           postinc2	equ	0xFDE
 17404                           postdec2	equ	0xFDD
 17405                           plusw2	equ	0xFDB
 17406                           fsr2h	equ	0xFDA
 17407                           fsr2l	equ	0xFD9
 17408                           status	equ	0xFD8
 17409                           
 17410 ;; *************** function _disk_write *****************
 17411 ;; Defined at:
 17412 ;;		line 150 in file "bibliotecas/diskio.c"
 17413 ;; Parameters:    Size  Location     Type
 17414 ;;  pdrv            1    wreg     unsigned char 
 17415 ;;  buff            2   31[BANK0 ] PTR const unsigned char 
 17416 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 17417 ;;  sector          4   33[BANK0 ] unsigned long 
 17418 ;;  count           1   37[BANK0 ] unsigned char 
 17419 ;; Auto vars:     Size  Location     Type
 17420 ;;  pdrv            1   38[BANK0 ] unsigned char 
 17421 ;;  result          2   39[BANK0 ] int 
 17422 ;;  res             1   41[BANK0 ] enum E25
 17423 ;; Return value:  Size  Location     Type
 17424 ;;                  1    wreg      enum E25
 17425 ;; Registers used:
 17426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17427 ;; Tracked objects:
 17428 ;;		On entry : 0/0
 17429 ;;		On exit  : 0/0
 17430 ;;		Unchanged: 0/0
 17431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17432 ;;      Params:         0       7       0       0       0       0       0       0       0
 17433 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17434 ;;      Temps:          1       0       0       0       0       0       0       0       0
 17435 ;;      Totals:         1      11       0       0       0       0       0       0       0
 17436 ;;Total ram usage:       12 bytes
 17437 ;; Hardware stack levels used:    1
 17438 ;; Hardware stack levels required when called:    7
 17439 ;; This function calls:
 17440 ;;		_sdc_disk_write
 17441 ;; This function is called by:
 17442 ;;		_move_window
 17443 ;;		_reserve_direntry
 17444 ;;		_f_write
 17445 ;; This function uses a non-reentrant model
 17446 ;;
 17447                           
 17448                           	psect	text59
 17449  00504C                     __ptext59:
 17450                           	opt stack 0
 17451  00504C                     _disk_write:
 17452                           	opt stack 18
 17453                           
 17454                           ;incstack = 0
 17455                           ;disk_write@pdrv stored from wreg
 17456  00504C  0100               	movlb	0	; () banked
 17457  00504E  6F86               	movwf	disk_write@pdrv& (0+255),b
 17458                           
 17459                           ;diskio.c: 157: DRESULT res;
 17460                           ;diskio.c: 158: int result;
 17461                           ;diskio.c: 160: switch (pdrv) {
 17462  005050  D034               	goto	l436
 17463  005052                     
 17464                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 17465  005052  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 17466  005056  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 17467  00505A  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 17468  00505E  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 17469  005062  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 17470  005066  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 17471  00506A  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 17472  00506E  EC14  F01C         	call	_sdc_disk_write	;wreg free
 17473  005072  6E23               	movwf	??_disk_write& (0+255),c
 17474  005074  5023               	movf	??_disk_write,w,c
 17475  005076  0100               	movlb	0	; () banked
 17476  005078  6F87               	movwf	disk_write@result& (0+255),b
 17477  00507A  6B88               	clrf	(disk_write@result+1)& (0+255),b
 17478                           
 17479                           ; BSR set to: 0
 17480                           ;diskio.c: 165: res = result;
 17481  00507C  C087  F089         	movff	disk_write@result,disk_write@res
 17482                           
 17483                           ; BSR set to: 0
 17484                           ;diskio.c: 168: return res;
 17485  005080  5189               	movf	disk_write@res& (0+255),w,b
 17486                           
 17487                           ; BSR set to: 0
 17488  005082  0012               	return	
 17489  005084                     
 17490                           ; BSR set to: 0
 17491                           ;diskio.c: 173: result = sdc_disk_write(buff, sector, count);
 17492                           
 17493                           ; BSR set to: 0
 17494  005084  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 17495  005088  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 17496  00508C  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 17497  005090  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 17498  005094  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 17499  005098  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 17500  00509C  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 17501  0050A0  EC14  F01C         	call	_sdc_disk_write	;wreg free
 17502  0050A4  6E23               	movwf	??_disk_write& (0+255),c
 17503  0050A6  5023               	movf	??_disk_write,w,c
 17504  0050A8  0100               	movlb	0	; () banked
 17505  0050AA  6F87               	movwf	disk_write@result& (0+255),b
 17506  0050AC  6B88               	clrf	(disk_write@result+1)& (0+255),b
 17507                           
 17508                           ; BSR set to: 0
 17509                           ;diskio.c: 174: res = result;
 17510  0050AE  C087  F089         	movff	disk_write@result,disk_write@res
 17511                           
 17512                           ; BSR set to: 0
 17513                           ;diskio.c: 177: return res;
 17514  0050B2  5189               	movf	disk_write@res& (0+255),w,b
 17515                           
 17516                           ; BSR set to: 0
 17517  0050B4  0012               	return	
 17518  0050B6                     
 17519                           ; BSR set to: 0
 17520                           ;diskio.c: 186: return res;
 17521                           
 17522                           ; BSR set to: 0
 17523  0050B6  5189               	movf	disk_write@res& (0+255),w,b
 17524                           
 17525                           ; BSR set to: 0
 17526  0050B8  0012               	return	
 17527  0050BA                     l436:
 17528                           
 17529                           ; BSR set to: 0
 17530  0050BA  0100               	movlb	0	; () banked
 17531  0050BC  5186               	movf	disk_write@pdrv& (0+255),w,b
 17532                           
 17533                           ; Switch size 1, requested type "space"
 17534                           ; Number of cases is 3, Range of values is 0 to 2
 17535                           ; switch strategies available:
 17536                           ; Name         Instructions Cycles
 17537                           ; simple_byte           10     6 (average)
 17538                           ;	Chosen strategy is simple_byte
 17539  0050BE  0A00               	xorlw	0	; case 0
 17540  0050C0  B4D8               	btfsc	status,2,c
 17541  0050C2  D7C7               	goto	l437
 17542  0050C4  0A01               	xorlw	1	; case 1
 17543  0050C6  B4D8               	btfsc	status,2,c
 17544  0050C8  D7DD               	goto	l439
 17545  0050CA  0A03               	xorlw	3	; case 2
 17546  0050CC  B4D8               	btfsc	status,2,c
 17547  0050CE  D7F3               	goto	l440
 17548                           
 17549                           ; BSR set to: 0
 17550                           ;diskio.c: 189: return RES_PARERR;
 17551                           
 17552                           ; BSR set to: 0
 17553  0050D0  0E04               	movlw	4
 17554  0050D2  0012               	return	
 17555  0050D4                     __end_of_disk_write:
 17556                           	opt stack 0
 17557                           tosu	equ	0xFFF
 17558                           tosh	equ	0xFFE
 17559                           tosl	equ	0xFFD
 17560                           pclath	equ	0xFFA
 17561                           tblptru	equ	0xFF8
 17562                           tblptrh	equ	0xFF7
 17563                           tblptrl	equ	0xFF6
 17564                           tablat	equ	0xFF5
 17565                           prodh	equ	0xFF4
 17566                           prodl	equ	0xFF3
 17567                           intcon	equ	0xFF2
 17568                           intcon2	equ	0xFF1
 17569                           intcon3	equ	0xFF0
 17570                           indf0	equ	0xFEF
 17571                           postinc0	equ	0xFEE
 17572                           fsr0h	equ	0xFEA
 17573                           fsr0l	equ	0xFE9
 17574                           wreg	equ	0xFE8
 17575                           indf1	equ	0xFE7
 17576                           postinc1	equ	0xFE6
 17577                           postdec1	equ	0xFE5
 17578                           plusw1	equ	0xFE3
 17579                           fsr1h	equ	0xFE2
 17580                           fsr1l	equ	0xFE1
 17581                           indf2	equ	0xFDF
 17582                           postinc2	equ	0xFDE
 17583                           postdec2	equ	0xFDD
 17584                           plusw2	equ	0xFDB
 17585                           fsr2h	equ	0xFDA
 17586                           fsr2l	equ	0xFD9
 17587                           status	equ	0xFD8
 17588                           
 17589 ;; *************** function _sdc_disk_write *****************
 17590 ;; Defined at:
 17591 ;;		line 509 in file "bibliotecas/diskio.c"
 17592 ;; Parameters:    Size  Location     Type
 17593 ;;  p_buff          2   12[BANK0 ] PTR const unsigned char 
 17594 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 17595 ;;  sector          4   14[BANK0 ] unsigned long 
 17596 ;;  count           1   18[BANK0 ] unsigned char 
 17597 ;; Auto vars:     Size  Location     Type
 17598 ;;  j               2   28[BANK0 ] int 
 17599 ;;  count1          2   25[BANK0 ] int 
 17600 ;;  i               2   23[BANK0 ] int 
 17601 ;;  buff            1   30[BANK0 ] unsigned char 
 17602 ;;  res             1   27[BANK0 ] enum E25
 17603 ;; Return value:  Size  Location     Type
 17604 ;;                  1    wreg      enum E25
 17605 ;; Registers used:
 17606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17607 ;; Tracked objects:
 17608 ;;		On entry : 0/0
 17609 ;;		On exit  : 0/0
 17610 ;;		Unchanged: 0/0
 17611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17612 ;;      Params:         0       7       0       0       0       0       0       0       0
 17613 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17614 ;;      Temps:          0       4       0       0       0       0       0       0       0
 17615 ;;      Totals:         0      19       0       0       0       0       0       0       0
 17616 ;;Total ram usage:       19 bytes
 17617 ;; Hardware stack levels used:    1
 17618 ;; Hardware stack levels required when called:    6
 17619 ;; This function calls:
 17620 ;;		_command
 17621 ;;		_dummy_clocks
 17622 ;;		_escreve_SPI
 17623 ;;		_leitura_SPI
 17624 ;;		_proceed
 17625 ;;		_response
 17626 ;; This function is called by:
 17627 ;;		_disk_write
 17628 ;; This function uses a non-reentrant model
 17629 ;;
 17630                           
 17631                           	psect	text60
 17632  003828                     __ptext60:
 17633                           	opt stack 0
 17634  003828                     _sdc_disk_write:
 17635                           	opt stack 18
 17636                           
 17637                           ;diskio.c: 511: DRESULT res;
 17638                           ;diskio.c: 512: unsigned char buff;
 17639                           ;diskio.c: 513: int i=0,j, count1 = 0;
 17640                           
 17641                           ; BSR set to: 0
 17642                           ;incstack = 0
 17643  003828  0E00               	movlw	0
 17644  00382A  0100               	movlb	0	; () banked
 17645  00382C  6F78               	movwf	(sdc_disk_write@i+1)& (0+255),b
 17646  00382E  0E00               	movlw	0
 17647  003830  6F77               	movwf	sdc_disk_write@i& (0+255),b
 17648  003832  0E00               	movlw	0
 17649  003834  6F7A               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 17650  003836  0E00               	movlw	0
 17651  003838  6F79               	movwf	sdc_disk_write@count1& (0+255),b
 17652                           
 17653                           ; BSR set to: 0
 17654                           ;diskio.c: 515: if(count>1)
 17655  00383A  0E01               	movlw	1
 17656  00383C  6572               	cpfsgt	sdc_disk_write@count& (0+255),b
 17657  00383E  D06C               	goto	l521
 17658                           
 17659                           ; BSR set to: 0
 17660                           ;diskio.c: 516: {
 17661                           ;diskio.c: 517: LATCbits.LATC7 = 0;
 17662  003840  9E8B               	bcf	3979,7,c	;volatile
 17663                           
 17664                           ;diskio.c: 518: LATBbits.LATB4 = 0;
 17665  003842  988A               	bcf	3978,4,c	;volatile
 17666                           
 17667                           ; BSR set to: 0
 17668                           ;diskio.c: 519: dummy_clocks(10);
 17669  003844  0E0A               	movlw	10
 17670  003846  EC54  F02C         	call	_dummy_clocks
 17671                           
 17672                           ;diskio.c: 520: command(0X57, count, 0XFF);
 17673  00384A  0100               	movlb	0	; () banked
 17674  00384C  5172               	movf	sdc_disk_write@count& (0+255),w,b
 17675  00384E  6F65               	movwf	command@arg& (0+255),b
 17676  003850  6B66               	clrf	(command@arg+1)& (0+255),b
 17677  003852  6B67               	clrf	(command@arg+2)& (0+255),b
 17678  003854  6B68               	clrf	(command@arg+3)& (0+255),b
 17679  003856  0EFF               	movlw	255
 17680  003858  6F69               	movwf	command@CRC& (0+255),b
 17681  00385A  0E57               	movlw	87
 17682  00385C  ECD0  F029         	call	_command
 17683                           
 17684                           ;diskio.c: 521: proceed();
 17685  003860  EC39  F02E         	call	_proceed	;wreg free
 17686  003864                     
 17687                           ;diskio.c: 523: buff = response();
 17688  003864  EC33  F02E         	call	_response	;wreg free
 17689  003868  0100               	movlb	0	; () banked
 17690  00386A  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 17691                           
 17692                           ; BSR set to: 0
 17693                           ;diskio.c: 524: }while(buff!=0X00);
 17694  00386C  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 17695  00386E  A4D8               	btfss	status,2,c
 17696  003870  D7F9               	goto	l522
 17697                           
 17698                           ; BSR set to: 0
 17699                           ;diskio.c: 526: dummy_clocks(10);
 17700                           
 17701                           ; BSR set to: 0
 17702  003872  0E0A               	movlw	10
 17703  003874  EC54  F02C         	call	_dummy_clocks
 17704                           
 17705                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 17706  003878  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 17707  00387C  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 17708  003880  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 17709  003884  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 17710  003888  0E09               	movlw	9
 17711  00388A                     u10385:
 17712  00388A  90D8               	bcf	status,0,c
 17713  00388C  0100               	movlb	0	; () banked
 17714  00388E  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 17715  003890  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 17716  003892  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 17717  003894  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 17718  003896  2EE8               	decfsz	wreg,f,c
 17719  003898  D7F8               	goto	u10385
 17720  00389A  C073  F065         	movff	??_sdc_disk_write,command@arg
 17721  00389E  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 17722  0038A2  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 17723  0038A6  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 17724  0038AA  0EFF               	movlw	255
 17725  0038AC  6F69               	movwf	command@CRC& (0+255),b
 17726  0038AE  0E59               	movlw	89
 17727  0038B0  ECD0  F029         	call	_command
 17728                           
 17729                           ;diskio.c: 528: proceed();
 17730  0038B4  EC39  F02E         	call	_proceed	;wreg free
 17731  0038B8                     
 17732                           ;diskio.c: 530: buff = response();
 17733  0038B8  EC33  F02E         	call	_response	;wreg free
 17734  0038BC  0100               	movlb	0	; () banked
 17735  0038BE  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 17736                           
 17737                           ; BSR set to: 0
 17738                           ;diskio.c: 531: }while(buff!=0X00);
 17739  0038C0  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 17740  0038C2  A4D8               	btfss	status,2,c
 17741  0038C4  D7F9               	goto	l524
 17742                           
 17743                           ; BSR set to: 0
 17744                           ;diskio.c: 533: dummy_clocks(1);
 17745                           
 17746                           ; BSR set to: 0
 17747  0038C6  0E01               	movlw	1
 17748  0038C8  EC54  F02C         	call	_dummy_clocks
 17749                           
 17750                           ;diskio.c: 534: escreve_SPI(0XFC);
 17751  0038CC  0EFC               	movlw	252
 17752  0038CE  EC0A  F02E         	call	_escreve_SPI
 17753                           
 17754                           ;diskio.c: 535: for(j=0;j<512;j++)
 17755  0038D2  0E00               	movlw	0
 17756  0038D4  0100               	movlb	0	; () banked
 17757  0038D6  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 17758  0038D8  0E00               	movlw	0
 17759  0038DA  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 17760  0038DC                     l8795:
 17761                           
 17762                           ; BSR set to: 0
 17763  0038DC  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 17764  0038DE  D004               	goto	l526
 17765  0038E0  0E02               	movlw	2
 17766  0038E2  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 17767  0038E4  B0D8               	btfsc	status,0,c
 17768  0038E6  D00D               	goto	u10410
 17769  0038E8                     l526:
 17770                           
 17771                           ; BSR set to: 0
 17772                           ;diskio.c: 536: {
 17773                           ;diskio.c: 537: escreve_SPI(*p_buff);
 17774                           
 17775                           ; BSR set to: 0
 17776  0038E8  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 17777  0038EC  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 17778  0038F0  50DF               	movf	indf2,w,c
 17779  0038F2  EC0A  F02E         	call	_escreve_SPI
 17780                           
 17781                           ;diskio.c: 538: p_buff++;
 17782  0038F6  0100               	movlb	0	; () banked
 17783  0038F8  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 17784  0038FA  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 17785                           
 17786                           ; BSR set to: 0
 17787  0038FC  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 17788  0038FE  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 17789  003900  D7ED               	goto	l8795
 17790  003902                     u10410:
 17791                           
 17792                           ; BSR set to: 0
 17793                           ;diskio.c: 539: }
 17794                           ;diskio.c: 540: leitura_SPI();
 17795                           
 17796                           ; BSR set to: 0
 17797  003902  EC3F  F02E         	call	_leitura_SPI	;wreg free
 17798                           
 17799                           ;diskio.c: 541: leitura_SPI();
 17800  003906  EC3F  F02E         	call	_leitura_SPI	;wreg free
 17801                           
 17802                           ;diskio.c: 543: dummy_clocks(1);
 17803  00390A  0E01               	movlw	1
 17804  00390C  EC54  F02C         	call	_dummy_clocks
 17805                           
 17806                           ;diskio.c: 544: escreve_SPI(0XFD);
 17807  003910  0EFD               	movlw	253
 17808  003912  EC0A  F02E         	call	_escreve_SPI
 17809                           
 17810                           ;diskio.c: 546: }
 17811  003916  D06A               	goto	u10460
 17812  003918                     l521:
 17813                           
 17814                           ; BSR set to: 0
 17815                           ;diskio.c: 547: else
 17816                           ;diskio.c: 548: {
 17817                           ;diskio.c: 549: LATCbits.LATC7 = 0;
 17818  003918  9E8B               	bcf	3979,7,c	;volatile
 17819                           
 17820                           ;diskio.c: 550: LATBbits.LATB4 = 0;
 17821  00391A  988A               	bcf	3978,4,c	;volatile
 17822                           
 17823                           ; BSR set to: 0
 17824                           ;diskio.c: 551: dummy_clocks(10);
 17825  00391C  0E0A               	movlw	10
 17826  00391E  EC54  F02C         	call	_dummy_clocks
 17827                           
 17828                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 17829  003922  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 17830  003926  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 17831  00392A  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 17832  00392E  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 17833  003932  0E09               	movlw	9
 17834  003934                     u10425:
 17835  003934  90D8               	bcf	status,0,c
 17836  003936  0100               	movlb	0	; () banked
 17837  003938  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 17838  00393A  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 17839  00393C  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 17840  00393E  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 17841  003940  2EE8               	decfsz	wreg,f,c
 17842  003942  D7F8               	goto	u10425
 17843  003944  C073  F065         	movff	??_sdc_disk_write,command@arg
 17844  003948  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 17845  00394C  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 17846  003950  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 17847  003954  0E00               	movlw	0
 17848  003956  6F69               	movwf	command@CRC& (0+255),b
 17849  003958  0E58               	movlw	88
 17850  00395A  ECD0  F029         	call	_command
 17851                           
 17852                           ;diskio.c: 553: proceed();
 17853  00395E  EC39  F02E         	call	_proceed	;wreg free
 17854  003962                     
 17855                           ;diskio.c: 555: buff = response();
 17856  003962  EC33  F02E         	call	_response	;wreg free
 17857  003966  0100               	movlb	0	; () banked
 17858  003968  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 17859                           
 17860                           ; BSR set to: 0
 17861                           ;diskio.c: 556: }while(buff!=0X00);
 17862  00396A  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 17863  00396C  A4D8               	btfss	status,2,c
 17864  00396E  D7F9               	goto	l529
 17865                           
 17866                           ; BSR set to: 0
 17867                           ;diskio.c: 558: LATBbits.LATB4 = 0;
 17868  003970  988A               	bcf	3978,4,c	;volatile
 17869                           
 17870                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 17871  003972  9E8B               	bcf	3979,7,c	;volatile
 17872                           
 17873                           ; BSR set to: 0
 17874                           ;diskio.c: 560: dummy_clocks(1);
 17875  003974  0E01               	movlw	1
 17876  003976  EC54  F02C         	call	_dummy_clocks
 17877                           
 17878                           ;diskio.c: 561: escreve_SPI(0XFE);
 17879  00397A  0EFE               	movlw	254
 17880  00397C  EC0A  F02E         	call	_escreve_SPI
 17881                           
 17882                           ;diskio.c: 562: for(j=0;j<512;j++)
 17883  003980  0E00               	movlw	0
 17884  003982  0100               	movlb	0	; () banked
 17885  003984  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 17886  003986  0E00               	movlw	0
 17887  003988  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 17888  00398A                     l8827:
 17889                           
 17890                           ; BSR set to: 0
 17891  00398A  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 17892  00398C  D004               	goto	l531
 17893  00398E  0E02               	movlw	2
 17894  003990  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 17895  003992  B0D8               	btfsc	status,0,c
 17896  003994  D00D               	goto	u10450
 17897  003996                     l531:
 17898                           
 17899                           ; BSR set to: 0
 17900                           ;diskio.c: 563: {
 17901                           ;diskio.c: 564: escreve_SPI(*p_buff);
 17902                           
 17903                           ; BSR set to: 0
 17904  003996  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 17905  00399A  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 17906  00399E  50DF               	movf	indf2,w,c
 17907  0039A0  EC0A  F02E         	call	_escreve_SPI
 17908                           
 17909                           ;diskio.c: 565: p_buff++;
 17910  0039A4  0100               	movlb	0	; () banked
 17911  0039A6  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 17912  0039A8  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 17913                           
 17914                           ; BSR set to: 0
 17915  0039AA  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 17916  0039AC  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 17917  0039AE  D7ED               	goto	l8827
 17918  0039B0                     u10450:
 17919                           
 17920                           ; BSR set to: 0
 17921                           ;diskio.c: 566: }
 17922                           ;diskio.c: 567: leitura_SPI();
 17923                           
 17924                           ; BSR set to: 0
 17925  0039B0  EC3F  F02E         	call	_leitura_SPI	;wreg free
 17926                           
 17927                           ;diskio.c: 568: leitura_SPI();
 17928  0039B4  EC3F  F02E         	call	_leitura_SPI	;wreg free
 17929                           
 17930                           ;diskio.c: 570: dummy_clocks(10);
 17931  0039B8  0E0A               	movlw	10
 17932  0039BA  EC54  F02C         	call	_dummy_clocks
 17933                           
 17934                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 17935  0039BE  0E00               	movlw	0
 17936  0039C0  0100               	movlb	0	; () banked
 17937  0039C2  6F65               	movwf	command@arg& (0+255),b
 17938  0039C4  0E00               	movlw	0
 17939  0039C6  6F66               	movwf	(command@arg+1)& (0+255),b
 17940  0039C8  0E00               	movlw	0
 17941  0039CA  6F67               	movwf	(command@arg+2)& (0+255),b
 17942  0039CC  0E00               	movlw	0
 17943  0039CE  6F68               	movwf	(command@arg+3)& (0+255),b
 17944  0039D0  0E00               	movlw	0
 17945  0039D2  6F69               	movwf	command@CRC& (0+255),b
 17946  0039D4  0E4D               	movlw	77
 17947  0039D6  ECD0  F029         	call	_command
 17948                           
 17949                           ;diskio.c: 572: proceed();
 17950  0039DA  EC39  F02E         	call	_proceed	;wreg free
 17951  0039DE                     
 17952                           ;diskio.c: 574: buff = response();
 17953  0039DE  EC33  F02E         	call	_response	;wreg free
 17954  0039E2  0100               	movlb	0	; () banked
 17955  0039E4  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 17956                           
 17957                           ; BSR set to: 0
 17958                           ;diskio.c: 575: }while(buff!=0X00 );
 17959  0039E6  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 17960  0039E8  A4D8               	btfss	status,2,c
 17961  0039EA  D7F9               	goto	l533
 17962  0039EC                     u10460:
 17963                           
 17964                           ;diskio.c: 576: }
 17965                           ;diskio.c: 577: return res;
 17966                           
 17967                           ; BSR set to: 0
 17968                           
 17969                           ; BSR set to: 0
 17970  0039EC  0100               	movlb	0	; () banked
 17971  0039EE  517B               	movf	sdc_disk_write@res& (0+255),w,b
 17972  0039F0  0012               	return	
 17973  0039F2                     __end_of_sdc_disk_write:
 17974                           	opt stack 0
 17975                           tosu	equ	0xFFF
 17976                           tosh	equ	0xFFE
 17977                           tosl	equ	0xFFD
 17978                           pclath	equ	0xFFA
 17979                           tblptru	equ	0xFF8
 17980                           tblptrh	equ	0xFF7
 17981                           tblptrl	equ	0xFF6
 17982                           tablat	equ	0xFF5
 17983                           prodh	equ	0xFF4
 17984                           prodl	equ	0xFF3
 17985                           intcon	equ	0xFF2
 17986                           intcon2	equ	0xFF1
 17987                           intcon3	equ	0xFF0
 17988                           indf0	equ	0xFEF
 17989                           postinc0	equ	0xFEE
 17990                           fsr0h	equ	0xFEA
 17991                           fsr0l	equ	0xFE9
 17992                           wreg	equ	0xFE8
 17993                           indf1	equ	0xFE7
 17994                           postinc1	equ	0xFE6
 17995                           postdec1	equ	0xFE5
 17996                           plusw1	equ	0xFE3
 17997                           fsr1h	equ	0xFE2
 17998                           fsr1l	equ	0xFE1
 17999                           indf2	equ	0xFDF
 18000                           postinc2	equ	0xFDE
 18001                           postdec2	equ	0xFDD
 18002                           plusw2	equ	0xFDB
 18003                           fsr2h	equ	0xFDA
 18004                           fsr2l	equ	0xFD9
 18005                           status	equ	0xFD8
 18006                           
 18007 ;; *************** function _disk_read *****************
 18008 ;; Defined at:
 18009 ;;		line 97 in file "bibliotecas/diskio.c"
 18010 ;; Parameters:    Size  Location     Type
 18011 ;;  pdrv            1    wreg     unsigned char 
 18012 ;;  buff            2   31[BANK0 ] PTR unsigned char 
 18013 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 18014 ;;  sector          4   33[BANK0 ] unsigned long 
 18015 ;;  count           1   37[BANK0 ] unsigned char 
 18016 ;; Auto vars:     Size  Location     Type
 18017 ;;  pdrv            1   38[BANK0 ] unsigned char 
 18018 ;;  result          2   39[BANK0 ] int 
 18019 ;;  res             1   41[BANK0 ] enum E25
 18020 ;; Return value:  Size  Location     Type
 18021 ;;                  1    wreg      enum E25
 18022 ;; Registers used:
 18023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18024 ;; Tracked objects:
 18025 ;;		On entry : 0/0
 18026 ;;		On exit  : 0/0
 18027 ;;		Unchanged: 0/0
 18028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18029 ;;      Params:         0       7       0       0       0       0       0       0       0
 18030 ;;      Locals:         0       4       0       0       0       0       0       0       0
 18031 ;;      Temps:          1       0       0       0       0       0       0       0       0
 18032 ;;      Totals:         1      11       0       0       0       0       0       0       0
 18033 ;;Total ram usage:       12 bytes
 18034 ;; Hardware stack levels used:    1
 18035 ;; Hardware stack levels required when called:    7
 18036 ;; This function calls:
 18037 ;;		_sdc_disk_read
 18038 ;; This function is called by:
 18039 ;;		_move_window
 18040 ;;		_check_fs
 18041 ;;		_f_read
 18042 ;; This function uses a non-reentrant model
 18043 ;;
 18044                           
 18045                           	psect	text61
 18046  004E1A                     __ptext61:
 18047                           	opt stack 0
 18048  004E1A                     _disk_read:
 18049                           	opt stack 18
 18050                           
 18051                           ; BSR set to: 0
 18052                           ;incstack = 0
 18053                           ;disk_read@pdrv stored from wreg
 18054  004E1A  0100               	movlb	0	; () banked
 18055  004E1C  6F86               	movwf	disk_read@pdrv& (0+255),b
 18056                           
 18057                           ;diskio.c: 104: DRESULT res;
 18058                           ;diskio.c: 105: int result;
 18059                           ;diskio.c: 107: switch (pdrv) {
 18060  004E1E  D038               	goto	l428
 18061  004E20                     
 18062                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 18063  004E20  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 18064  004E24  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 18065  004E28  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 18066  004E2C  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 18067  004E30  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 18068  004E34  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 18069  004E38  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 18070  004E3C  EC2F  F020         	call	_sdc_disk_read	;wreg free
 18071  004E40  6E23               	movwf	??_disk_read& (0+255),c
 18072  004E42  5023               	movf	??_disk_read,w,c
 18073  004E44  0100               	movlb	0	; () banked
 18074  004E46  6F87               	movwf	disk_read@result& (0+255),b
 18075  004E48  6B88               	clrf	(disk_read@result+1)& (0+255),b
 18076                           
 18077                           ; BSR set to: 0
 18078                           ;diskio.c: 115: res = result;
 18079  004E4A  C087  F089         	movff	disk_read@result,disk_read@res
 18080                           
 18081                           ; BSR set to: 0
 18082                           ;diskio.c: 117: return res;
 18083  004E4E  5189               	movf	disk_read@res& (0+255),w,b
 18084                           
 18085                           ; BSR set to: 0
 18086  004E50  0012               	return	
 18087  004E52                     
 18088                           ; BSR set to: 0
 18089                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 18090                           
 18091                           ; BSR set to: 0
 18092  004E52  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 18093  004E56  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 18094  004E5A  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 18095  004E5E  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 18096  004E62  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 18097  004E66  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 18098  004E6A  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 18099  004E6E  EC2F  F020         	call	_sdc_disk_read	;wreg free
 18100  004E72  6E23               	movwf	??_disk_read& (0+255),c
 18101  004E74  5023               	movf	??_disk_read,w,c
 18102  004E76  0100               	movlb	0	; () banked
 18103  004E78  6F87               	movwf	disk_read@result& (0+255),b
 18104  004E7A  6B88               	clrf	(disk_read@result+1)& (0+255),b
 18105                           
 18106                           ; BSR set to: 0
 18107                           ;diskio.c: 126: res = result;
 18108  004E7C  C087  F089         	movff	disk_read@result,disk_read@res
 18109                           
 18110                           ; BSR set to: 0
 18111                           ;diskio.c: 128: buff = data_buff;
 18112  004E80  C02A  F07F         	movff	_data_buff,disk_read@buff
 18113  004E84  C02B  F080         	movff	_data_buff+1,disk_read@buff+1
 18114                           
 18115                           ; BSR set to: 0
 18116                           ;diskio.c: 129: return res;
 18117  004E88  5189               	movf	disk_read@res& (0+255),w,b
 18118                           
 18119                           ; BSR set to: 0
 18120  004E8A  0012               	return	
 18121  004E8C                     
 18122                           ; BSR set to: 0
 18123                           ;diskio.c: 138: return res;
 18124                           
 18125                           ; BSR set to: 0
 18126  004E8C  5189               	movf	disk_read@res& (0+255),w,b
 18127                           
 18128                           ; BSR set to: 0
 18129  004E8E  0012               	return	
 18130  004E90                     l428:
 18131                           
 18132                           ; BSR set to: 0
 18133  004E90  0100               	movlb	0	; () banked
 18134  004E92  5186               	movf	disk_read@pdrv& (0+255),w,b
 18135                           
 18136                           ; Switch size 1, requested type "space"
 18137                           ; Number of cases is 3, Range of values is 0 to 2
 18138                           ; switch strategies available:
 18139                           ; Name         Instructions Cycles
 18140                           ; simple_byte           10     6 (average)
 18141                           ;	Chosen strategy is simple_byte
 18142  004E94  0A00               	xorlw	0	; case 0
 18143  004E96  B4D8               	btfsc	status,2,c
 18144  004E98  D7C3               	goto	l429
 18145  004E9A  0A01               	xorlw	1	; case 1
 18146  004E9C  B4D8               	btfsc	status,2,c
 18147  004E9E  D7D9               	goto	l431
 18148  004EA0  0A03               	xorlw	3	; case 2
 18149  004EA2  B4D8               	btfsc	status,2,c
 18150  004EA4  D7F3               	goto	l432
 18151                           
 18152                           ; BSR set to: 0
 18153                           ;diskio.c: 141: return RES_PARERR;
 18154                           
 18155                           ; BSR set to: 0
 18156  004EA6  0E04               	movlw	4
 18157  004EA8  0012               	return	
 18158  004EAA                     __end_of_disk_read:
 18159                           	opt stack 0
 18160                           tosu	equ	0xFFF
 18161                           tosh	equ	0xFFE
 18162                           tosl	equ	0xFFD
 18163                           pclath	equ	0xFFA
 18164                           tblptru	equ	0xFF8
 18165                           tblptrh	equ	0xFF7
 18166                           tblptrl	equ	0xFF6
 18167                           tablat	equ	0xFF5
 18168                           prodh	equ	0xFF4
 18169                           prodl	equ	0xFF3
 18170                           intcon	equ	0xFF2
 18171                           intcon2	equ	0xFF1
 18172                           intcon3	equ	0xFF0
 18173                           indf0	equ	0xFEF
 18174                           postinc0	equ	0xFEE
 18175                           fsr0h	equ	0xFEA
 18176                           fsr0l	equ	0xFE9
 18177                           wreg	equ	0xFE8
 18178                           indf1	equ	0xFE7
 18179                           postinc1	equ	0xFE6
 18180                           postdec1	equ	0xFE5
 18181                           plusw1	equ	0xFE3
 18182                           fsr1h	equ	0xFE2
 18183                           fsr1l	equ	0xFE1
 18184                           indf2	equ	0xFDF
 18185                           postinc2	equ	0xFDE
 18186                           postdec2	equ	0xFDD
 18187                           plusw2	equ	0xFDB
 18188                           fsr2h	equ	0xFDA
 18189                           fsr2l	equ	0xFD9
 18190                           status	equ	0xFD8
 18191                           
 18192 ;; *************** function _sdc_disk_read *****************
 18193 ;; Defined at:
 18194 ;;		line 439 in file "bibliotecas/diskio.c"
 18195 ;; Parameters:    Size  Location     Type
 18196 ;;  p_buff          2   12[BANK0 ] PTR unsigned char 
 18197 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 18198 ;;  sector          4   14[BANK0 ] unsigned long 
 18199 ;;  count           1   18[BANK0 ] unsigned char 
 18200 ;; Auto vars:     Size  Location     Type
 18201 ;;  start_add       4   24[BANK0 ] unsigned long 
 18202 ;;  length          2   28[BANK0 ] int 
 18203 ;;  count1          2    0        int 
 18204 ;;  i               2    0        int 
 18205 ;;  buff            1   30[BANK0 ] unsigned char 
 18206 ;;  ptr             1   23[BANK0 ] unsigned char 
 18207 ;;  res             1    0        enum E25
 18208 ;; Return value:  Size  Location     Type
 18209 ;;                  1    wreg      enum E25
 18210 ;; Registers used:
 18211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18212 ;; Tracked objects:
 18213 ;;		On entry : 0/0
 18214 ;;		On exit  : 0/0
 18215 ;;		Unchanged: 0/0
 18216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18217 ;;      Params:         0       7       0       0       0       0       0       0       0
 18218 ;;      Locals:         0       8       0       0       0       0       0       0       0
 18219 ;;      Temps:          0       4       0       0       0       0       0       0       0
 18220 ;;      Totals:         0      19       0       0       0       0       0       0       0
 18221 ;;Total ram usage:       19 bytes
 18222 ;; Hardware stack levels used:    1
 18223 ;; Hardware stack levels required when called:    6
 18224 ;; This function calls:
 18225 ;;		_command
 18226 ;;		_dummy_clocks
 18227 ;;		_proceed
 18228 ;;		_response
 18229 ;; This function is called by:
 18230 ;;		_disk_read
 18231 ;; This function uses a non-reentrant model
 18232 ;;
 18233                           
 18234                           	psect	text62
 18235  00405E                     __ptext62:
 18236                           	opt stack 0
 18237  00405E                     _sdc_disk_read:
 18238                           	opt stack 18
 18239                           
 18240                           ;diskio.c: 446: DRESULT res;
 18241                           ;diskio.c: 447: unsigned char ptr=0X00, buff;
 18242                           
 18243                           ; BSR set to: 0
 18244                           ;incstack = 0
 18245  00405E  0E00               	movlw	0
 18246  004060  0100               	movlb	0	; () banked
 18247  004062  6F77               	movwf	sdc_disk_read@ptr& (0+255),b
 18248                           
 18249                           ; BSR set to: 0
 18250                           ;diskio.c: 448: unsigned long int start_add;
 18251                           ;diskio.c: 449: int length,i, count1;
 18252                           ;diskio.c: 450: dummy_clocks(10);
 18253  004064  0E0A               	movlw	10
 18254  004066  EC54  F02C         	call	_dummy_clocks
 18255                           
 18256                           ;diskio.c: 452: start_add = sector*512;
 18257  00406A  C06E  F073         	movff	sdc_disk_read@sector,??_sdc_disk_read
 18258  00406E  C06F  F074         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 18259  004072  C070  F075         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 18260  004076  C071  F076         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 18261  00407A  0E09               	movlw	9
 18262  00407C                     u10295:
 18263  00407C  90D8               	bcf	status,0,c
 18264  00407E  0100               	movlb	0	; () banked
 18265  004080  3773               	rlcf	??_sdc_disk_read& (0+255),f,b
 18266  004082  3774               	rlcf	(??_sdc_disk_read+1)& (0+255),f,b
 18267  004084  3775               	rlcf	(??_sdc_disk_read+2)& (0+255),f,b
 18268  004086  3776               	rlcf	(??_sdc_disk_read+3)& (0+255),f,b
 18269  004088  2EE8               	decfsz	wreg,f,c
 18270  00408A  D7F8               	goto	u10295
 18271  00408C  C073  F078         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 18272  004090  C074  F079         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 18273  004094  C075  F07A         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 18274  004098  C076  F07B         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 18275                           
 18276                           ; BSR set to: 0
 18277                           ;diskio.c: 455: if(sector != 1)
 18278  00409C  056E               	decf	sdc_disk_read@sector& (0+255),w,b
 18279  00409E  116F               	iorwf	(sdc_disk_read@sector+1)& (0+255),w,b
 18280  0040A0  1170               	iorwf	(sdc_disk_read@sector+2)& (0+255),w,b
 18281  0040A2  1171               	iorwf	(sdc_disk_read@sector+3)& (0+255),w,b
 18282  0040A4  B4D8               	btfsc	status,2,c
 18283  0040A6  D01D               	goto	l504
 18284                           
 18285                           ; BSR set to: 0
 18286                           ;diskio.c: 456: {
 18287                           ;diskio.c: 457: dummy_clocks(10);
 18288  0040A8  0E0A               	movlw	10
 18289  0040AA  EC54  F02C         	call	_dummy_clocks
 18290                           
 18291                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 18292  0040AE  C078  F065         	movff	sdc_disk_read@start_add,command@arg
 18293  0040B2  C079  F066         	movff	sdc_disk_read@start_add+1,command@arg+1
 18294  0040B6  C07A  F067         	movff	sdc_disk_read@start_add+2,command@arg+2
 18295  0040BA  C07B  F068         	movff	sdc_disk_read@start_add+3,command@arg+3
 18296  0040BE  0E00               	movlw	0
 18297  0040C0  0100               	movlb	0	; () banked
 18298  0040C2  6F69               	movwf	command@CRC& (0+255),b
 18299  0040C4  0E52               	movlw	82
 18300  0040C6  ECD0  F029         	call	_command
 18301                           
 18302                           ;diskio.c: 459: proceed();
 18303  0040CA  EC39  F02E         	call	_proceed	;wreg free
 18304  0040CE                     
 18305                           ;diskio.c: 461: buff = response();
 18306  0040CE  EC33  F02E         	call	_response	;wreg free
 18307  0040D2  0100               	movlb	0	; () banked
 18308  0040D4  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18309                           
 18310                           ; BSR set to: 0
 18311                           ;diskio.c: 462: }while(buff!=0X00);
 18312  0040D6  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 18313  0040D8  A4D8               	btfss	status,2,c
 18314  0040DA  D7F9               	goto	l505
 18315                           
 18316                           ; BSR set to: 0
 18317                           ;diskio.c: 463: proceed();
 18318                           
 18319                           ; BSR set to: 0
 18320  0040DC  EC39  F02E         	call	_proceed	;wreg free
 18321                           
 18322                           ;diskio.c: 464: }
 18323  0040E0  D021               	goto	l510
 18324  0040E2                     l504:
 18325                           
 18326                           ;diskio.c: 465: else
 18327                           ;diskio.c: 466: {
 18328                           ;diskio.c: 467: dummy_clocks(10);
 18329  0040E2  0E0A               	movlw	10
 18330  0040E4  EC54  F02C         	call	_dummy_clocks
 18331                           
 18332                           ;diskio.c: 468: command(0X51,sector ,0X00);
 18333  0040E8  C06E  F065         	movff	sdc_disk_read@sector,command@arg
 18334  0040EC  C06F  F066         	movff	sdc_disk_read@sector+1,command@arg+1
 18335  0040F0  C070  F067         	movff	sdc_disk_read@sector+2,command@arg+2
 18336  0040F4  C071  F068         	movff	sdc_disk_read@sector+3,command@arg+3
 18337  0040F8  0E00               	movlw	0
 18338  0040FA  0100               	movlb	0	; () banked
 18339  0040FC  6F69               	movwf	command@CRC& (0+255),b
 18340  0040FE  0E51               	movlw	81
 18341  004100  ECD0  F029         	call	_command
 18342                           
 18343                           ;diskio.c: 469: proceed();
 18344  004104  EC39  F02E         	call	_proceed	;wreg free
 18345  004108                     
 18346                           ;diskio.c: 471: buff = response();
 18347  004108  EC33  F02E         	call	_response	;wreg free
 18348  00410C  0100               	movlb	0	; () banked
 18349  00410E  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18350                           
 18351                           ; BSR set to: 0
 18352                           ;diskio.c: 472: }while(buff!=0X00);
 18353  004110  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 18354  004112  A4D8               	btfss	status,2,c
 18355  004114  D7F9               	goto	l508
 18356                           
 18357                           ; BSR set to: 0
 18358                           ;diskio.c: 473: proceed();
 18359                           
 18360                           ; BSR set to: 0
 18361  004116  EC39  F02E         	call	_proceed	;wreg free
 18362                           
 18363                           ;diskio.c: 474: }
 18364                           ;diskio.c: 478: while(buff!=0xFE)
 18365  00411A  D004               	goto	l510
 18366  00411C                     
 18367                           ;diskio.c: 479: {
 18368                           ;diskio.c: 480: buff = response();
 18369  00411C  EC33  F02E         	call	_response	;wreg free
 18370  004120  0100               	movlb	0	; () banked
 18371  004122  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18372  004124                     l510:
 18373                           
 18374                           ; BSR set to: 0
 18375  004124  0EFE               	movlw	254
 18376  004126  0100               	movlb	0	; () banked
 18377  004128  197E               	xorwf	sdc_disk_read@buff& (0+255),w,b
 18378  00412A  A4D8               	btfss	status,2,c
 18379  00412C  D7F7               	goto	l511
 18380                           
 18381                           ; BSR set to: 0
 18382                           ;diskio.c: 481: }
 18383                           ;diskio.c: 483: length = 0;
 18384                           
 18385                           ; BSR set to: 0
 18386  00412E  0E00               	movlw	0
 18387  004130  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18388  004132  0E00               	movlw	0
 18389  004134  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 18390                           
 18391                           ;diskio.c: 484: while ( length < 512 )
 18392  004136  D00C               	goto	l513
 18393  004138                     
 18394                           ; BSR set to: 0
 18395                           ;diskio.c: 485: {
 18396                           ;diskio.c: 486: p_buff[length] = response();
 18397                           
 18398                           ; BSR set to: 0
 18399  004138  517C               	movf	sdc_disk_read@length& (0+255),w,b
 18400  00413A  256C               	addwf	sdc_disk_read@p_buff& (0+255),w,b
 18401  00413C  6ED9               	movwf	fsr2l,c
 18402  00413E  517D               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 18403  004140  216D               	addwfc	(sdc_disk_read@p_buff+1)& (0+255),w,b
 18404  004142  6EDA               	movwf	fsr2h,c
 18405  004144  EC33  F02E         	call	_response	;wreg free
 18406  004148  6EDF               	movwf	indf2,c
 18407                           
 18408                           ;diskio.c: 487: length++;
 18409  00414A  0100               	movlb	0	; () banked
 18410  00414C  4B7C               	infsnz	sdc_disk_read@length& (0+255),f,b
 18411  00414E  2B7D               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 18412  004150                     l513:
 18413                           
 18414                           ; BSR set to: 0
 18415                           
 18416                           ; BSR set to: 0
 18417  004150  BF7D               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 18418  004152  D7F2               	goto	l514
 18419  004154  0E02               	movlw	2
 18420  004156  5D7D               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 18421  004158  A0D8               	btfss	status,0,c
 18422  00415A  D7EE               	goto	l514
 18423                           
 18424                           ; BSR set to: 0
 18425                           ;diskio.c: 488: }
 18426                           ;diskio.c: 490: length = 0;
 18427                           
 18428                           ; BSR set to: 0
 18429  00415C  0E00               	movlw	0
 18430  00415E  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18431  004160  0E00               	movlw	0
 18432  004162  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 18433                           
 18434                           ; BSR set to: 0
 18435                           ;diskio.c: 491: dummy_clocks(10);
 18436  004164  0E0A               	movlw	10
 18437  004166  EC54  F02C         	call	_dummy_clocks
 18438                           
 18439                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 18440  00416A  0E00               	movlw	0
 18441  00416C  0100               	movlb	0	; () banked
 18442  00416E  6F65               	movwf	command@arg& (0+255),b
 18443  004170  0E00               	movlw	0
 18444  004172  6F66               	movwf	(command@arg+1)& (0+255),b
 18445  004174  0E00               	movlw	0
 18446  004176  6F67               	movwf	(command@arg+2)& (0+255),b
 18447  004178  0E00               	movlw	0
 18448  00417A  6F68               	movwf	(command@arg+3)& (0+255),b
 18449  00417C  0E00               	movlw	0
 18450  00417E  6F69               	movwf	command@CRC& (0+255),b
 18451  004180  0E4C               	movlw	76
 18452  004182  ECD0  F029         	call	_command
 18453                           
 18454                           ;diskio.c: 494: proceed();
 18455  004186  EC39  F02E         	call	_proceed	;wreg free
 18456  00418A                     
 18457                           ;diskio.c: 496: buff = response();
 18458  00418A  EC33  F02E         	call	_response	;wreg free
 18459  00418E  0100               	movlb	0	; () banked
 18460  004190  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18461                           
 18462                           ; BSR set to: 0
 18463                           ;diskio.c: 497: }while(buff!=0xFF);
 18464  004192  297E               	incf	sdc_disk_read@buff& (0+255),w,b
 18465  004194  A4D8               	btfss	status,2,c
 18466  004196  D7F9               	goto	l516
 18467                           
 18468                           ; BSR set to: 0
 18469                           ;diskio.c: 499: length = 0;
 18470                           
 18471                           ; BSR set to: 0
 18472  004198  0E00               	movlw	0
 18473  00419A  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18474  00419C  0E00               	movlw	0
 18475  00419E  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 18476                           
 18477                           ; BSR set to: 0
 18478                           ;diskio.c: 500: return RES_OK;
 18479  0041A0  0E00               	movlw	0
 18480  0041A2  0012               	return	
 18481  0041A4                     __end_of_sdc_disk_read:
 18482                           	opt stack 0
 18483                           tosu	equ	0xFFF
 18484                           tosh	equ	0xFFE
 18485                           tosl	equ	0xFFD
 18486                           pclath	equ	0xFFA
 18487                           tblptru	equ	0xFF8
 18488                           tblptrh	equ	0xFF7
 18489                           tblptrl	equ	0xFF6
 18490                           tablat	equ	0xFF5
 18491                           prodh	equ	0xFF4
 18492                           prodl	equ	0xFF3
 18493                           intcon	equ	0xFF2
 18494                           intcon2	equ	0xFF1
 18495                           intcon3	equ	0xFF0
 18496                           indf0	equ	0xFEF
 18497                           postinc0	equ	0xFEE
 18498                           fsr0h	equ	0xFEA
 18499                           fsr0l	equ	0xFE9
 18500                           wreg	equ	0xFE8
 18501                           indf1	equ	0xFE7
 18502                           postinc1	equ	0xFE6
 18503                           postdec1	equ	0xFE5
 18504                           plusw1	equ	0xFE3
 18505                           fsr1h	equ	0xFE2
 18506                           fsr1l	equ	0xFE1
 18507                           indf2	equ	0xFDF
 18508                           postinc2	equ	0xFDE
 18509                           postdec2	equ	0xFDD
 18510                           plusw2	equ	0xFDB
 18511                           fsr2h	equ	0xFDA
 18512                           fsr2l	equ	0xFD9
 18513                           status	equ	0xFD8
 18514                           
 18515 ;; *************** function _response *****************
 18516 ;; Defined at:
 18517 ;;		line 59 in file "bibliotecas/SDCard.c"
 18518 ;; Parameters:    Size  Location     Type
 18519 ;;		None
 18520 ;; Auto vars:     Size  Location     Type
 18521 ;;  buff            1   32[COMRAM] unsigned char 
 18522 ;; Return value:  Size  Location     Type
 18523 ;;                  1    wreg      unsigned char 
 18524 ;; Registers used:
 18525 ;;		wreg, status,2, cstack
 18526 ;; Tracked objects:
 18527 ;;		On entry : 0/0
 18528 ;;		On exit  : 0/0
 18529 ;;		Unchanged: 0/0
 18530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18531 ;;      Params:         0       0       0       0       0       0       0       0       0
 18532 ;;      Locals:         1       0       0       0       0       0       0       0       0
 18533 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18534 ;;      Totals:         1       0       0       0       0       0       0       0       0
 18535 ;;Total ram usage:        1 bytes
 18536 ;; Hardware stack levels used:    1
 18537 ;; Hardware stack levels required when called:    4
 18538 ;; This function calls:
 18539 ;;		_leitura_SPI
 18540 ;; This function is called by:
 18541 ;;		_sdc_reset
 18542 ;;		_sdc_disk_initialize
 18543 ;;		_sdc_disk_read
 18544 ;;		_sdc_disk_write
 18545 ;; This function uses a non-reentrant model
 18546 ;;
 18547                           
 18548                           	psect	text63
 18549  005C66                     __ptext63:
 18550                           	opt stack 0
 18551  005C66                     _response:
 18552                           	opt stack 19
 18553                           
 18554                           ;SDCard.c: 61: unsigned char buff;
 18555                           ;SDCard.c: 62: LATBbits.LATB4 = 0;
 18556                           
 18557                           ; BSR set to: 0
 18558                           ;incstack = 0
 18559  005C66  988A               	bcf	3978,4,c	;volatile
 18560                           
 18561                           ;SDCard.c: 63: buff= leitura_SPI();
 18562  005C68  EC3F  F02E         	call	_leitura_SPI	;wreg free
 18563  005C6C  6E21               	movwf	response@buff,c
 18564                           
 18565                           ;SDCard.c: 64: return buff;
 18566  005C6E  5021               	movf	response@buff,w,c
 18567  005C70  0012               	return	
 18568  005C72                     __end_of_response:
 18569                           	opt stack 0
 18570                           tosu	equ	0xFFF
 18571                           tosh	equ	0xFFE
 18572                           tosl	equ	0xFFD
 18573                           pclath	equ	0xFFA
 18574                           tblptru	equ	0xFF8
 18575                           tblptrh	equ	0xFF7
 18576                           tblptrl	equ	0xFF6
 18577                           tablat	equ	0xFF5
 18578                           prodh	equ	0xFF4
 18579                           prodl	equ	0xFF3
 18580                           intcon	equ	0xFF2
 18581                           intcon2	equ	0xFF1
 18582                           intcon3	equ	0xFF0
 18583                           indf0	equ	0xFEF
 18584                           postinc0	equ	0xFEE
 18585                           fsr0h	equ	0xFEA
 18586                           fsr0l	equ	0xFE9
 18587                           wreg	equ	0xFE8
 18588                           indf1	equ	0xFE7
 18589                           postinc1	equ	0xFE6
 18590                           postdec1	equ	0xFE5
 18591                           plusw1	equ	0xFE3
 18592                           fsr1h	equ	0xFE2
 18593                           fsr1l	equ	0xFE1
 18594                           indf2	equ	0xFDF
 18595                           postinc2	equ	0xFDE
 18596                           postdec2	equ	0xFDD
 18597                           plusw2	equ	0xFDB
 18598                           fsr2h	equ	0xFDA
 18599                           fsr2l	equ	0xFD9
 18600                           status	equ	0xFD8
 18601                           
 18602 ;; *************** function _proceed *****************
 18603 ;; Defined at:
 18604 ;;		line 92 in file "bibliotecas/SDCard.c"
 18605 ;; Parameters:    Size  Location     Type
 18606 ;;		None
 18607 ;; Auto vars:     Size  Location     Type
 18608 ;;		None
 18609 ;; Return value:  Size  Location     Type
 18610 ;;                  1    wreg      void 
 18611 ;; Registers used:
 18612 ;;		wreg, cstack
 18613 ;; Tracked objects:
 18614 ;;		On entry : 0/0
 18615 ;;		On exit  : 0/0
 18616 ;;		Unchanged: 0/0
 18617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18618 ;;      Params:         0       0       0       0       0       0       0       0       0
 18619 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18620 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18621 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18622 ;;Total ram usage:        0 bytes
 18623 ;; Hardware stack levels used:    1
 18624 ;; Hardware stack levels required when called:    4
 18625 ;; This function calls:
 18626 ;;		_escreve_SPI
 18627 ;; This function is called by:
 18628 ;;		_sdc_reset
 18629 ;;		_sdc_disk_initialize
 18630 ;;		_sdc_disk_read
 18631 ;;		_sdc_disk_write
 18632 ;;		_sdcard_init
 18633 ;; This function uses a non-reentrant model
 18634 ;;
 18635                           
 18636                           	psect	text64
 18637  005C72                     __ptext64:
 18638                           	opt stack 0
 18639  005C72                     _proceed:
 18640                           	opt stack 19
 18641                           
 18642                           ;SDCard.c: 94: LATBbits.LATB4 = 0;
 18643                           
 18644                           ;incstack = 0
 18645  005C72  988A               	bcf	3978,4,c	;volatile
 18646                           
 18647                           ;SDCard.c: 95: escreve_SPI(0xFF);
 18648  005C74  0EFF               	movlw	255
 18649  005C76  EC0A  F02E         	call	_escreve_SPI
 18650                           
 18651                           ;SDCard.c: 96: LATBbits.LATB4 = 1;
 18652  005C7A  888A               	bsf	3978,4,c	;volatile
 18653  005C7C  0012               	return		;funcret
 18654  005C7E                     __end_of_proceed:
 18655                           	opt stack 0
 18656                           tosu	equ	0xFFF
 18657                           tosh	equ	0xFFE
 18658                           tosl	equ	0xFFD
 18659                           pclath	equ	0xFFA
 18660                           tblptru	equ	0xFF8
 18661                           tblptrh	equ	0xFF7
 18662                           tblptrl	equ	0xFF6
 18663                           tablat	equ	0xFF5
 18664                           prodh	equ	0xFF4
 18665                           prodl	equ	0xFF3
 18666                           intcon	equ	0xFF2
 18667                           intcon2	equ	0xFF1
 18668                           intcon3	equ	0xFF0
 18669                           indf0	equ	0xFEF
 18670                           postinc0	equ	0xFEE
 18671                           fsr0h	equ	0xFEA
 18672                           fsr0l	equ	0xFE9
 18673                           wreg	equ	0xFE8
 18674                           indf1	equ	0xFE7
 18675                           postinc1	equ	0xFE6
 18676                           postdec1	equ	0xFE5
 18677                           plusw1	equ	0xFE3
 18678                           fsr1h	equ	0xFE2
 18679                           fsr1l	equ	0xFE1
 18680                           indf2	equ	0xFDF
 18681                           postinc2	equ	0xFDE
 18682                           postdec2	equ	0xFDD
 18683                           plusw2	equ	0xFDB
 18684                           fsr2h	equ	0xFDA
 18685                           fsr2l	equ	0xFD9
 18686                           status	equ	0xFD8
 18687                           
 18688 ;; *************** function _command *****************
 18689 ;; Defined at:
 18690 ;;		line 125 in file "bibliotecas/SDCard.c"
 18691 ;; Parameters:    Size  Location     Type
 18692 ;;  CMD             1    wreg     unsigned char 
 18693 ;;  arg             4    5[BANK0 ] unsigned long 
 18694 ;;  CRC             1    9[BANK0 ] unsigned char 
 18695 ;; Auto vars:     Size  Location     Type
 18696 ;;  CMD             1   10[BANK0 ] unsigned char 
 18697 ;;  argument        1   11[BANK0 ] unsigned char 
 18698 ;; Return value:  Size  Location     Type
 18699 ;;                  1    wreg      void 
 18700 ;; Registers used:
 18701 ;;		wreg, status,2, status,0, cstack
 18702 ;; Tracked objects:
 18703 ;;		On entry : 0/0
 18704 ;;		On exit  : 0/0
 18705 ;;		Unchanged: 0/0
 18706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18707 ;;      Params:         0       5       0       0       0       0       0       0       0
 18708 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18709 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18710 ;;      Totals:         0       7       0       0       0       0       0       0       0
 18711 ;;Total ram usage:        7 bytes
 18712 ;; Hardware stack levels used:    1
 18713 ;; Hardware stack levels required when called:    5
 18714 ;; This function calls:
 18715 ;;		_dummy_clocks
 18716 ;;		_escreve_SPI
 18717 ;;		_wait_ready
 18718 ;; This function is called by:
 18719 ;;		_sdc_reset
 18720 ;;		_sdc_disk_initialize
 18721 ;;		_sdc_disk_read
 18722 ;;		_sdc_disk_write
 18723 ;; This function uses a non-reentrant model
 18724 ;;
 18725                           
 18726                           	psect	text65
 18727  0053A0                     __ptext65:
 18728                           	opt stack 0
 18729  0053A0                     _command:
 18730                           	opt stack 18
 18731                           
 18732                           ;incstack = 0
 18733                           ;command@CMD stored from wreg
 18734  0053A0  0100               	movlb	0	; () banked
 18735  0053A2  6F6A               	movwf	command@CMD& (0+255),b
 18736                           
 18737                           ;SDCard.c: 127: unsigned char argument;
 18738                           ;SDCard.c: 129: if (wait_ready() != 0xFF)
 18739  0053A4  ECF3  F02C         	call	_wait_ready	;wreg free
 18740  0053A8  0AFF               	xorlw	255
 18741  0053AA  A4D8               	btfss	status,2,c
 18742  0053AC  D004               	goto	l296
 18743  0053AE  D008               	goto	u10280
 18744  0053B0                     
 18745                           ;SDCard.c: 132: {
 18746                           ;SDCard.c: 133: dummy_clocks(10);
 18747  0053B0  0E0A               	movlw	10
 18748  0053B2  EC54  F02C         	call	_dummy_clocks
 18749  0053B6                     l296:
 18750  0053B6  ECF3  F02C         	call	_wait_ready	;wreg free
 18751  0053BA  0AFF               	xorlw	255
 18752  0053BC  A4D8               	btfss	status,2,c
 18753  0053BE  D7F8               	goto	l297
 18754  0053C0                     u10280:
 18755                           
 18756                           ;SDCard.c: 134: }
 18757                           ;SDCard.c: 135: }
 18758                           ;SDCard.c: 136: escreve_SPI(0xFF);
 18759  0053C0  0EFF               	movlw	255
 18760  0053C2  EC0A  F02E         	call	_escreve_SPI
 18761                           
 18762                           ;SDCard.c: 137: escreve_SPI(CMD);
 18763  0053C6  0100               	movlb	0	; () banked
 18764  0053C8  516A               	movf	command@CMD& (0+255),w,b
 18765  0053CA  EC0A  F02E         	call	_escreve_SPI
 18766                           
 18767                           ;SDCard.c: 138: argument = arg>>24;
 18768  0053CE  C068  F06B         	movff	command@arg+3,command@argument
 18769                           
 18770                           ;SDCard.c: 139: escreve_SPI(argument);
 18771  0053D2  0100               	movlb	0	; () banked
 18772  0053D4  516B               	movf	command@argument& (0+255),w,b
 18773  0053D6  EC0A  F02E         	call	_escreve_SPI
 18774                           
 18775                           ;SDCard.c: 140: argument = arg>>16;
 18776  0053DA  C067  F06B         	movff	command@arg+2,command@argument
 18777                           
 18778                           ;SDCard.c: 141: escreve_SPI(argument);
 18779  0053DE  0100               	movlb	0	; () banked
 18780  0053E0  516B               	movf	command@argument& (0+255),w,b
 18781  0053E2  EC0A  F02E         	call	_escreve_SPI
 18782                           
 18783                           ;SDCard.c: 142: argument = arg>>8;
 18784  0053E6  C066  F06B         	movff	command@arg+1,command@argument
 18785                           
 18786                           ;SDCard.c: 143: escreve_SPI(argument);
 18787  0053EA  0100               	movlb	0	; () banked
 18788  0053EC  516B               	movf	command@argument& (0+255),w,b
 18789  0053EE  EC0A  F02E         	call	_escreve_SPI
 18790                           
 18791                           ;SDCard.c: 144: argument = arg;
 18792  0053F2  C065  F06B         	movff	command@arg,command@argument
 18793                           
 18794                           ;SDCard.c: 145: escreve_SPI(argument);
 18795  0053F6  0100               	movlb	0	; () banked
 18796  0053F8  516B               	movf	command@argument& (0+255),w,b
 18797  0053FA  EC0A  F02E         	call	_escreve_SPI
 18798                           
 18799                           ;SDCard.c: 146: escreve_SPI(CRC);
 18800  0053FE  0100               	movlb	0	; () banked
 18801  005400  5169               	movf	command@CRC& (0+255),w,b
 18802  005402  EC0A  F02E         	call	_escreve_SPI
 18803  005406  0012               	return		;funcret
 18804  005408                     __end_of_command:
 18805                           	opt stack 0
 18806                           tosu	equ	0xFFF
 18807                           tosh	equ	0xFFE
 18808                           tosl	equ	0xFFD
 18809                           pclath	equ	0xFFA
 18810                           tblptru	equ	0xFF8
 18811                           tblptrh	equ	0xFF7
 18812                           tblptrl	equ	0xFF6
 18813                           tablat	equ	0xFF5
 18814                           prodh	equ	0xFF4
 18815                           prodl	equ	0xFF3
 18816                           intcon	equ	0xFF2
 18817                           intcon2	equ	0xFF1
 18818                           intcon3	equ	0xFF0
 18819                           indf0	equ	0xFEF
 18820                           postinc0	equ	0xFEE
 18821                           fsr0h	equ	0xFEA
 18822                           fsr0l	equ	0xFE9
 18823                           wreg	equ	0xFE8
 18824                           indf1	equ	0xFE7
 18825                           postinc1	equ	0xFE6
 18826                           postdec1	equ	0xFE5
 18827                           plusw1	equ	0xFE3
 18828                           fsr1h	equ	0xFE2
 18829                           fsr1l	equ	0xFE1
 18830                           indf2	equ	0xFDF
 18831                           postinc2	equ	0xFDE
 18832                           postdec2	equ	0xFDD
 18833                           plusw2	equ	0xFDB
 18834                           fsr2h	equ	0xFDA
 18835                           fsr2l	equ	0xFD9
 18836                           status	equ	0xFD8
 18837                           
 18838 ;; *************** function _wait_ready *****************
 18839 ;; Defined at:
 18840 ;;		line 105 in file "bibliotecas/SDCard.c"
 18841 ;; Parameters:    Size  Location     Type
 18842 ;;		None
 18843 ;; Auto vars:     Size  Location     Type
 18844 ;;  msg            10    0        unsigned char [10]
 18845 ;;  timeout         4    0[BANK0 ] unsigned long 
 18846 ;;  res             1    4[BANK0 ] unsigned char 
 18847 ;; Return value:  Size  Location     Type
 18848 ;;                  1    wreg      unsigned char 
 18849 ;; Registers used:
 18850 ;;		wreg, status,2, status,0, cstack
 18851 ;; Tracked objects:
 18852 ;;		On entry : 0/0
 18853 ;;		On exit  : 0/0
 18854 ;;		Unchanged: 0/0
 18855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18856 ;;      Params:         0       0       0       0       0       0       0       0       0
 18857 ;;      Locals:         0       5       0       0       0       0       0       0       0
 18858 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18859 ;;      Totals:         0       5       0       0       0       0       0       0       0
 18860 ;;Total ram usage:        5 bytes
 18861 ;; Hardware stack levels used:    1
 18862 ;; Hardware stack levels required when called:    4
 18863 ;; This function calls:
 18864 ;;		_leitura_SPI
 18865 ;; This function is called by:
 18866 ;;		_command
 18867 ;; This function uses a non-reentrant model
 18868 ;;
 18869                           
 18870                           	psect	text66
 18871  0059E6                     __ptext66:
 18872                           	opt stack 0
 18873  0059E6                     _wait_ready:
 18874                           	opt stack 18
 18875                           
 18876                           ;SDCard.c: 107: BYTE res;
 18877                           ;SDCard.c: 108: DWORD timeout = 0x7FFF;
 18878                           
 18879                           ;incstack = 0
 18880  0059E6  0EFF               	movlw	255
 18881  0059E8  0100               	movlb	0	; () banked
 18882  0059EA  6F60               	movwf	wait_ready@timeout& (0+255),b
 18883  0059EC  0E7F               	movlw	127
 18884  0059EE  6F61               	movwf	(wait_ready@timeout+1)& (0+255),b
 18885  0059F0  0E00               	movlw	0
 18886  0059F2  6F62               	movwf	(wait_ready@timeout+2)& (0+255),b
 18887  0059F4  0E00               	movlw	0
 18888  0059F6  6F63               	movwf	(wait_ready@timeout+3)& (0+255),b
 18889  0059F8                     
 18890                           ; BSR set to: 0
 18891                           ;SDCard.c: 112: res = leitura_SPI();
 18892                           
 18893                           ; BSR set to: 0
 18894  0059F8  EC3F  F02E         	call	_leitura_SPI	;wreg free
 18895  0059FC  0100               	movlb	0	; () banked
 18896  0059FE  6F64               	movwf	wait_ready@res& (0+255),b
 18897                           
 18898                           ; BSR set to: 0
 18899                           ;SDCard.c: 113: while ((res != 0xFF) && (--timeout));
 18900  005A00  2964               	incf	wait_ready@res& (0+255),w,b
 18901  005A02  B4D8               	btfsc	status,2,c
 18902  005A04  D00B               	goto	u10260
 18903                           
 18904                           ; BSR set to: 0
 18905  005A06  0760               	decf	wait_ready@timeout& (0+255),f,b
 18906  005A08  0E00               	movlw	0
 18907  005A0A  5B61               	subwfb	(wait_ready@timeout+1)& (0+255),f,b
 18908  005A0C  5B62               	subwfb	(wait_ready@timeout+2)& (0+255),f,b
 18909  005A0E  5B63               	subwfb	(wait_ready@timeout+3)& (0+255),f,b
 18910  005A10  5160               	movf	wait_ready@timeout& (0+255),w,b
 18911  005A12  1161               	iorwf	(wait_ready@timeout+1)& (0+255),w,b
 18912  005A14  1162               	iorwf	(wait_ready@timeout+2)& (0+255),w,b
 18913  005A16  1163               	iorwf	(wait_ready@timeout+3)& (0+255),w,b
 18914  005A18  A4D8               	btfss	status,2,c
 18915  005A1A  D7EE               	goto	l288
 18916  005A1C                     u10260:
 18917                           
 18918                           ; BSR set to: 0
 18919                           ;SDCard.c: 115: return res;
 18920                           
 18921                           ; BSR set to: 0
 18922                           
 18923                           ; BSR set to: 0
 18924  005A1C  5164               	movf	wait_ready@res& (0+255),w,b
 18925  005A1E  0012               	return	
 18926  005A20                     __end_of_wait_ready:
 18927                           	opt stack 0
 18928                           tosu	equ	0xFFF
 18929                           tosh	equ	0xFFE
 18930                           tosl	equ	0xFFD
 18931                           pclath	equ	0xFFA
 18932                           tblptru	equ	0xFF8
 18933                           tblptrh	equ	0xFF7
 18934                           tblptrl	equ	0xFF6
 18935                           tablat	equ	0xFF5
 18936                           prodh	equ	0xFF4
 18937                           prodl	equ	0xFF3
 18938                           intcon	equ	0xFF2
 18939                           intcon2	equ	0xFF1
 18940                           intcon3	equ	0xFF0
 18941                           indf0	equ	0xFEF
 18942                           postinc0	equ	0xFEE
 18943                           fsr0h	equ	0xFEA
 18944                           fsr0l	equ	0xFE9
 18945                           wreg	equ	0xFE8
 18946                           indf1	equ	0xFE7
 18947                           postinc1	equ	0xFE6
 18948                           postdec1	equ	0xFE5
 18949                           plusw1	equ	0xFE3
 18950                           fsr1h	equ	0xFE2
 18951                           fsr1l	equ	0xFE1
 18952                           indf2	equ	0xFDF
 18953                           postinc2	equ	0xFDE
 18954                           postdec2	equ	0xFDD
 18955                           plusw2	equ	0xFDB
 18956                           fsr2h	equ	0xFDA
 18957                           fsr2l	equ	0xFD9
 18958                           status	equ	0xFD8
 18959                           
 18960 ;; *************** function _escreve_SPI *****************
 18961 ;; Defined at:
 18962 ;;		line 98 in file "bibliotecas/SPI.c"
 18963 ;; Parameters:    Size  Location     Type
 18964 ;;  dado            1    wreg     unsigned char 
 18965 ;; Auto vars:     Size  Location     Type
 18966 ;;  dado            1   33[COMRAM] unsigned char 
 18967 ;;  TempVar         1   32[COMRAM] unsigned char 
 18968 ;; Return value:  Size  Location     Type
 18969 ;;                  1    wreg      void 
 18970 ;; Registers used:
 18971 ;;		wreg
 18972 ;; Tracked objects:
 18973 ;;		On entry : 0/0
 18974 ;;		On exit  : 0/0
 18975 ;;		Unchanged: 0/0
 18976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18977 ;;      Params:         0       0       0       0       0       0       0       0       0
 18978 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18979 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18980 ;;      Totals:         2       0       0       0       0       0       0       0       0
 18981 ;;Total ram usage:        2 bytes
 18982 ;; Hardware stack levels used:    1
 18983 ;; Hardware stack levels required when called:    3
 18984 ;; This function calls:
 18985 ;;		Nothing
 18986 ;; This function is called by:
 18987 ;;		_proceed
 18988 ;;		_command
 18989 ;;		_sdc_disk_write
 18990 ;; This function uses a non-reentrant model
 18991 ;;
 18992                           
 18993                           	psect	text67
 18994  005C14                     __ptext67:
 18995                           	opt stack 0
 18996  005C14                     _escreve_SPI:
 18997                           	opt stack 19
 18998                           
 18999                           ; BSR set to: 0
 19000                           ;incstack = 0
 19001                           ;escreve_SPI@dado stored from wreg
 19002  005C14  6E22               	movwf	escreve_SPI@dado,c
 19003                           
 19004                           ;SPI.c: 100: unsigned char TempVar;
 19005                           ;SPI.c: 101: TempVar = SSPBUF;
 19006  005C16  CFC9 F021          	movff	4041,escreve_SPI@TempVar	;volatile
 19007                           
 19008                           ;SPI.c: 102: PIR1bits.SSPIF = 0;
 19009  005C1A  969E               	bcf	3998,3,c	;volatile
 19010                           
 19011                           ;SPI.c: 104: SSPBUF = dado;
 19012  005C1C  C022  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 19013  005C20  B69E               	btfsc	3998,3,c	;volatile
 19014  005C22  0012               	return	
 19015  005C24  D7FD               	goto	l375
 19016  005C26                     __end_of_escreve_SPI:
 19017                           	opt stack 0
 19018                           tosu	equ	0xFFF
 19019                           tosh	equ	0xFFE
 19020                           tosl	equ	0xFFD
 19021                           pclath	equ	0xFFA
 19022                           tblptru	equ	0xFF8
 19023                           tblptrh	equ	0xFF7
 19024                           tblptrl	equ	0xFF6
 19025                           tablat	equ	0xFF5
 19026                           prodh	equ	0xFF4
 19027                           prodl	equ	0xFF3
 19028                           intcon	equ	0xFF2
 19029                           intcon2	equ	0xFF1
 19030                           intcon3	equ	0xFF0
 19031                           indf0	equ	0xFEF
 19032                           postinc0	equ	0xFEE
 19033                           fsr0h	equ	0xFEA
 19034                           fsr0l	equ	0xFE9
 19035                           wreg	equ	0xFE8
 19036                           indf1	equ	0xFE7
 19037                           postinc1	equ	0xFE6
 19038                           postdec1	equ	0xFE5
 19039                           plusw1	equ	0xFE3
 19040                           fsr1h	equ	0xFE2
 19041                           fsr1l	equ	0xFE1
 19042                           indf2	equ	0xFDF
 19043                           postinc2	equ	0xFDE
 19044                           postdec2	equ	0xFDD
 19045                           plusw2	equ	0xFDB
 19046                           fsr2h	equ	0xFDA
 19047                           fsr2l	equ	0xFD9
 19048                           status	equ	0xFD8
 19049                           
 19050 ;; *************** function _dummy_clocks *****************
 19051 ;; Defined at:
 19052 ;;		line 74 in file "bibliotecas/SDCard.c"
 19053 ;; Parameters:    Size  Location     Type
 19054 ;;  n               1    wreg     unsigned char 
 19055 ;; Auto vars:     Size  Location     Type
 19056 ;;  n               1    0[BANK0 ] unsigned char 
 19057 ;;  i               2    1[BANK0 ] unsigned int 
 19058 ;; Return value:  Size  Location     Type
 19059 ;;                  1    wreg      void 
 19060 ;; Registers used:
 19061 ;;		wreg, status,2, status,0, cstack
 19062 ;; Tracked objects:
 19063 ;;		On entry : 0/0
 19064 ;;		On exit  : 0/0
 19065 ;;		Unchanged: 0/0
 19066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19067 ;;      Params:         0       0       0       0       0       0       0       0       0
 19068 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19069 ;;      Temps:          2       0       0       0       0       0       0       0       0
 19070 ;;      Totals:         2       3       0       0       0       0       0       0       0
 19071 ;;Total ram usage:        5 bytes
 19072 ;; Hardware stack levels used:    1
 19073 ;; Hardware stack levels required when called:    4
 19074 ;; This function calls:
 19075 ;;		_leitura_SPI
 19076 ;; This function is called by:
 19077 ;;		_command
 19078 ;;		_sdc_disk_initialize
 19079 ;;		_sdc_disk_read
 19080 ;;		_sdc_disk_write
 19081 ;; This function uses a non-reentrant model
 19082 ;;
 19083                           
 19084                           	psect	text68
 19085  0058A8                     __ptext68:
 19086                           	opt stack 0
 19087  0058A8                     _dummy_clocks:
 19088                           	opt stack 19
 19089                           
 19090                           ;incstack = 0
 19091                           ;dummy_clocks@n stored from wreg
 19092  0058A8  0100               	movlb	0	; () banked
 19093  0058AA  6F60               	movwf	dummy_clocks@n& (0+255),b
 19094                           
 19095                           ;SDCard.c: 76: unsigned int i;
 19096                           ;SDCard.c: 77: _delay((unsigned long)((1)*(48000000/4000.0)));
 19097  0058AC  0E10               	movlw	16
 19098  0058AE  6E21               	movwf	??_dummy_clocks& (0+255),c
 19099  0058B0  0E94               	movlw	148
 19100  0058B2                     u14877:
 19101  0058B2  2EE8               	decfsz	wreg,f,c
 19102  0058B4  D7FE               	bra	u14877
 19103  0058B6  2E21               	decfsz	??_dummy_clocks& (0+255),f,c
 19104  0058B8  D7FC               	bra	u14877
 19105  0058BA  D000               	nop2	
 19106                           
 19107                           ;SDCard.c: 78: for(i=0;i<n;i++)
 19108  0058BC  0E00               	movlw	0
 19109  0058BE  0100               	movlb	0	; () banked
 19110  0058C0  6F62               	movwf	(dummy_clocks@i+1)& (0+255),b
 19111  0058C2  0E00               	movlw	0
 19112  0058C4  6F61               	movwf	dummy_clocks@i& (0+255),b
 19113  0058C6  D007               	goto	l279
 19114  0058C8                     l280:
 19115                           
 19116                           ; BSR set to: 0
 19117                           ;SDCard.c: 79: {
 19118                           ;SDCard.c: 80: LATBbits.LATB4 = 1;
 19119  0058C8  888A               	bsf	3978,4,c	;volatile
 19120                           
 19121                           ; BSR set to: 0
 19122                           ;SDCard.c: 81: leitura_SPI();
 19123  0058CA  EC3F  F02E         	call	_leitura_SPI	;wreg free
 19124                           
 19125                           ;SDCard.c: 82: LATBbits.LATB4 = 0;
 19126  0058CE  988A               	bcf	3978,4,c	;volatile
 19127  0058D0  0100               	movlb	0	; () banked
 19128  0058D2  4B61               	infsnz	dummy_clocks@i& (0+255),f,b
 19129  0058D4  2B62               	incf	(dummy_clocks@i+1)& (0+255),f,b
 19130  0058D6                     l279:
 19131                           
 19132                           ; BSR set to: 0
 19133                           
 19134                           ; BSR set to: 0
 19135  0058D6  5160               	movf	dummy_clocks@n& (0+255),w,b
 19136  0058D8  6E21               	movwf	??_dummy_clocks& (0+255),c
 19137  0058DA  6A22               	clrf	(??_dummy_clocks+1)& (0+255),c
 19138  0058DC  5021               	movf	??_dummy_clocks,w,c
 19139  0058DE  5D61               	subwf	dummy_clocks@i& (0+255),w,b
 19140  0058E0  5022               	movf	??_dummy_clocks+1,w,c
 19141  0058E2  5962               	subwfb	(dummy_clocks@i+1)& (0+255),w,b
 19142  0058E4  B0D8               	btfsc	status,0,c
 19143  0058E6  0012               	return	
 19144  0058E8  D7EF               	goto	l280
 19145  0058EA                     __end_of_dummy_clocks:
 19146                           	opt stack 0
 19147                           tosu	equ	0xFFF
 19148                           tosh	equ	0xFFE
 19149                           tosl	equ	0xFFD
 19150                           pclath	equ	0xFFA
 19151                           tblptru	equ	0xFF8
 19152                           tblptrh	equ	0xFF7
 19153                           tblptrl	equ	0xFF6
 19154                           tablat	equ	0xFF5
 19155                           prodh	equ	0xFF4
 19156                           prodl	equ	0xFF3
 19157                           intcon	equ	0xFF2
 19158                           intcon2	equ	0xFF1
 19159                           intcon3	equ	0xFF0
 19160                           indf0	equ	0xFEF
 19161                           postinc0	equ	0xFEE
 19162                           fsr0h	equ	0xFEA
 19163                           fsr0l	equ	0xFE9
 19164                           wreg	equ	0xFE8
 19165                           indf1	equ	0xFE7
 19166                           postinc1	equ	0xFE6
 19167                           postdec1	equ	0xFE5
 19168                           plusw1	equ	0xFE3
 19169                           fsr1h	equ	0xFE2
 19170                           fsr1l	equ	0xFE1
 19171                           indf2	equ	0xFDF
 19172                           postinc2	equ	0xFDE
 19173                           postdec2	equ	0xFDD
 19174                           plusw2	equ	0xFDB
 19175                           fsr2h	equ	0xFDA
 19176                           fsr2l	equ	0xFD9
 19177                           status	equ	0xFD8
 19178                           
 19179 ;; *************** function _leitura_SPI *****************
 19180 ;; Defined at:
 19181 ;;		line 83 in file "bibliotecas/SPI.c"
 19182 ;; Parameters:    Size  Location     Type
 19183 ;;		None
 19184 ;; Auto vars:     Size  Location     Type
 19185 ;;		None
 19186 ;; Return value:  Size  Location     Type
 19187 ;;                  1    wreg      unsigned char 
 19188 ;; Registers used:
 19189 ;;		wreg, status,2
 19190 ;; Tracked objects:
 19191 ;;		On entry : 0/0
 19192 ;;		On exit  : 0/0
 19193 ;;		Unchanged: 0/0
 19194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19195 ;;      Params:         0       0       0       0       0       0       0       0       0
 19196 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19197 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19198 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19199 ;;Total ram usage:        0 bytes
 19200 ;; Hardware stack levels used:    1
 19201 ;; Hardware stack levels required when called:    3
 19202 ;; This function calls:
 19203 ;;		Nothing
 19204 ;; This function is called by:
 19205 ;;		_response
 19206 ;;		_dummy_clocks
 19207 ;;		_wait_ready
 19208 ;;		_sdc_disk_write
 19209 ;; This function uses a non-reentrant model
 19210 ;;
 19211                           
 19212                           	psect	text69
 19213  005C7E                     __ptext69:
 19214                           	opt stack 0
 19215  005C7E                     _leitura_SPI:
 19216                           	opt stack 19
 19217                           
 19218                           ;SPI.c: 85: SSPBUF = 0xFF;
 19219                           
 19220                           ; BSR set to: 0
 19221                           ;incstack = 0
 19222  005C7E  68C9               	setf	4041,c	;volatile
 19223                           
 19224                           ;SPI.c: 86: SSPSTATbits.BF = 0;
 19225  005C80  90C7               	bcf	4039,0,c	;volatile
 19226  005C82  A0C7               	btfss	4039,0,c	;volatile
 19227  005C84  D7FE               	goto	l369
 19228                           
 19229                           ;SPI.c: 88: return (SSPBUF);
 19230  005C86  50C9               	movf	4041,w,c	;volatile
 19231  005C88  0012               	return	
 19232  005C8A                     __end_of_leitura_SPI:
 19233                           	opt stack 0
 19234                           tosu	equ	0xFFF
 19235                           tosh	equ	0xFFE
 19236                           tosl	equ	0xFFD
 19237                           pclath	equ	0xFFA
 19238                           tblptru	equ	0xFF8
 19239                           tblptrh	equ	0xFF7
 19240                           tblptrl	equ	0xFF6
 19241                           tablat	equ	0xFF5
 19242                           prodh	equ	0xFF4
 19243                           prodl	equ	0xFF3
 19244                           intcon	equ	0xFF2
 19245                           intcon2	equ	0xFF1
 19246                           intcon3	equ	0xFF0
 19247                           indf0	equ	0xFEF
 19248                           postinc0	equ	0xFEE
 19249                           fsr0h	equ	0xFEA
 19250                           fsr0l	equ	0xFE9
 19251                           wreg	equ	0xFE8
 19252                           indf1	equ	0xFE7
 19253                           postinc1	equ	0xFE6
 19254                           postdec1	equ	0xFE5
 19255                           plusw1	equ	0xFE3
 19256                           fsr1h	equ	0xFE2
 19257                           fsr1l	equ	0xFE1
 19258                           indf2	equ	0xFDF
 19259                           postinc2	equ	0xFDE
 19260                           postdec2	equ	0xFDD
 19261                           plusw2	equ	0xFDB
 19262                           fsr2h	equ	0xFDA
 19263                           fsr2l	equ	0xFD9
 19264                           status	equ	0xFD8
 19265                           
 19266 ;; *************** function _disk_ioctl *****************
 19267 ;; Defined at:
 19268 ;;		line 198 in file "bibliotecas/diskio.c"
 19269 ;; Parameters:    Size  Location     Type
 19270 ;;  pdrv            1    wreg     unsigned char 
 19271 ;;  cmd             1   32[COMRAM] unsigned char 
 19272 ;;  buff            2   33[COMRAM] PTR void 
 19273 ;;		 -> NULL(0), 
 19274 ;; Auto vars:     Size  Location     Type
 19275 ;;  pdrv            1    0[BANK0 ] unsigned char 
 19276 ;;  result          2    0        int 
 19277 ;;  res             1    1[BANK0 ] enum E25
 19278 ;; Return value:  Size  Location     Type
 19279 ;;                  1    wreg      enum E25
 19280 ;; Registers used:
 19281 ;;		wreg, status,2, status,0
 19282 ;; Tracked objects:
 19283 ;;		On entry : 0/0
 19284 ;;		On exit  : 0/0
 19285 ;;		Unchanged: 0/0
 19286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19287 ;;      Params:         3       0       0       0       0       0       0       0       0
 19288 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19289 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19290 ;;      Totals:         3       2       0       0       0       0       0       0       0
 19291 ;;Total ram usage:        5 bytes
 19292 ;; Hardware stack levels used:    1
 19293 ;; Hardware stack levels required when called:    3
 19294 ;; This function calls:
 19295 ;;		Nothing
 19296 ;; This function is called by:
 19297 ;;		_sync
 19298 ;; This function uses a non-reentrant model
 19299 ;;
 19300                           
 19301                           	psect	text70
 19302  005AD4                     __ptext70:
 19303                           	opt stack 0
 19304  005AD4                     _disk_ioctl:
 19305                           	opt stack 21
 19306                           
 19307                           ;incstack = 0
 19308                           ;disk_ioctl@pdrv stored from wreg
 19309  005AD4  0100               	movlb	0	; () banked
 19310  005AD6  6F60               	movwf	disk_ioctl@pdrv& (0+255),b
 19311                           
 19312                           ;diskio.c: 204: DRESULT res;
 19313                           ;diskio.c: 205: int result;
 19314                           ;diskio.c: 207: switch (pdrv) {
 19315  005AD8  D006               	goto	l444
 19316  005ADA                     l445:
 19317                           
 19318                           ; BSR set to: 0
 19319                           ;diskio.c: 212: return res;
 19320  005ADA  5161               	movf	disk_ioctl@res& (0+255),w,b
 19321  005ADC  0012               	return	
 19322  005ADE                     l447:
 19323                           
 19324                           ; BSR set to: 0
 19325                           ;diskio.c: 218: return res;
 19326  005ADE  5161               	movf	disk_ioctl@res& (0+255),w,b
 19327  005AE0  0012               	return	
 19328  005AE2                     l448:
 19329                           
 19330                           ; BSR set to: 0
 19331                           ;diskio.c: 224: return res;
 19332  005AE2  5161               	movf	disk_ioctl@res& (0+255),w,b
 19333  005AE4  0012               	return	
 19334  005AE6                     l444:
 19335                           
 19336                           ; BSR set to: 0
 19337  005AE6  0100               	movlb	0	; () banked
 19338  005AE8  5160               	movf	disk_ioctl@pdrv& (0+255),w,b
 19339                           
 19340                           ; Switch size 1, requested type "space"
 19341                           ; Number of cases is 3, Range of values is 0 to 2
 19342                           ; switch strategies available:
 19343                           ; Name         Instructions Cycles
 19344                           ; simple_byte           10     6 (average)
 19345                           ;	Chosen strategy is simple_byte
 19346  005AEA  0A00               	xorlw	0	; case 0
 19347  005AEC  B4D8               	btfsc	status,2,c
 19348  005AEE  D7F5               	goto	l445
 19349  005AF0  0A01               	xorlw	1	; case 1
 19350  005AF2  B4D8               	btfsc	status,2,c
 19351  005AF4  D7F4               	goto	l447
 19352  005AF6  0A03               	xorlw	3	; case 2
 19353  005AF8  B4D8               	btfsc	status,2,c
 19354  005AFA  D7F3               	goto	l448
 19355                           
 19356                           ; BSR set to: 0
 19357                           ;diskio.c: 227: return RES_PARERR;
 19358                           
 19359                           ; BSR set to: 0
 19360  005AFC  0E04               	movlw	4
 19361  005AFE  0012               	return	
 19362  005B00                     __end_of_disk_ioctl:
 19363                           	opt stack 0
 19364                           tosu	equ	0xFFF
 19365                           tosh	equ	0xFFE
 19366                           tosl	equ	0xFFD
 19367                           pclath	equ	0xFFA
 19368                           tblptru	equ	0xFF8
 19369                           tblptrh	equ	0xFF7
 19370                           tblptrl	equ	0xFF6
 19371                           tablat	equ	0xFF5
 19372                           prodh	equ	0xFF4
 19373                           prodl	equ	0xFF3
 19374                           intcon	equ	0xFF2
 19375                           intcon2	equ	0xFF1
 19376                           intcon3	equ	0xFF0
 19377                           indf0	equ	0xFEF
 19378                           postinc0	equ	0xFEE
 19379                           fsr0h	equ	0xFEA
 19380                           fsr0l	equ	0xFE9
 19381                           wreg	equ	0xFE8
 19382                           indf1	equ	0xFE7
 19383                           postinc1	equ	0xFE6
 19384                           postdec1	equ	0xFE5
 19385                           plusw1	equ	0xFE3
 19386                           fsr1h	equ	0xFE2
 19387                           fsr1l	equ	0xFE1
 19388                           indf2	equ	0xFDF
 19389                           postinc2	equ	0xFDE
 19390                           postdec2	equ	0xFDD
 19391                           plusw2	equ	0xFDB
 19392                           fsr2h	equ	0xFDA
 19393                           fsr2l	equ	0xFD9
 19394                           status	equ	0xFD8
 19395                           
 19396 ;; *************** function _get_fattime *****************
 19397 ;; Defined at:
 19398 ;;		line 809 in file "bibliotecas/tff.c"
 19399 ;; Parameters:    Size  Location     Type
 19400 ;;		None
 19401 ;; Auto vars:     Size  Location     Type
 19402 ;;  f_time          9   42[BANK0 ] struct .
 19403 ;; Return value:  Size  Location     Type
 19404 ;;                  4    0[BANK0 ] unsigned long 
 19405 ;; Registers used:
 19406 ;;		wreg, status,2, status,0
 19407 ;; Tracked objects:
 19408 ;;		On entry : 0/0
 19409 ;;		On exit  : 0/0
 19410 ;;		Unchanged: 0/0
 19411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19412 ;;      Params:         0       4       0       0       0       0       0       0       0
 19413 ;;      Locals:         0       9       0       0       0       0       0       0       0
 19414 ;;      Temps:          0      38       0       0       0       0       0       0       0
 19415 ;;      Totals:         0      51       0       0       0       0       0       0       0
 19416 ;;Total ram usage:       51 bytes
 19417 ;; Hardware stack levels used:    1
 19418 ;; Hardware stack levels required when called:    3
 19419 ;; This function calls:
 19420 ;;		Nothing
 19421 ;; This function is called by:
 19422 ;;		_f_open
 19423 ;;		_f_sync
 19424 ;; This function uses a non-reentrant model
 19425 ;;
 19426                           
 19427                           	psect	text71
 19428  004670                     __ptext71:
 19429                           	opt stack 0
 19430  004670                     _get_fattime:
 19431                           	opt stack 23
 19432                           
 19433                           ;tff.c: 811: fat_time f_time;
 19434                           ;tff.c: 813: return (DWORD)(f_time.ano ) << 25 |
 19435                           ;tff.c: 814: (DWORD)(f_time.mes) << 21 |
 19436                           ;tff.c: 815: (DWORD)(f_time.mes) << 16 |
 19437                           ;tff.c: 816: (DWORD)(f_time.hora) << 11 |
 19438                           ;tff.c: 817: (DWORD)(f_time.min) << 5 |
 19439                           ;tff.c: 818: (DWORD)(f_time.seg) >> 1;
 19440                           
 19441                           ; BSR set to: 0
 19442                           ;incstack = 0
 19443  004670  90D8               	bcf	status,0,c
 19444  004672  0100               	movlb	0	; () banked
 19445  004674  318F               	rrcf	(get_fattime@f_time+5)& (0+255),w,b
 19446  004676  6F65               	movwf	(??_get_fattime+1)& (0+255),b
 19447  004678  318E               	rrcf	(get_fattime@f_time+4)& (0+255),w,b
 19448  00467A  6F64               	movwf	??_get_fattime& (0+255),b
 19449  00467C  518C               	movf	(get_fattime@f_time+2)& (0+255),w,b
 19450  00467E  6F66               	movwf	(??_get_fattime+2)& (0+255),b
 19451  004680  518D               	movf	(get_fattime@f_time+3)& (0+255),w,b
 19452  004682  6F67               	movwf	(??_get_fattime+3)& (0+255),b
 19453  004684  6B68               	clrf	(??_get_fattime+4)& (0+255),b
 19454  004686  6B69               	clrf	(??_get_fattime+5)& (0+255),b
 19455  004688  0E05               	movlw	5
 19456  00468A                     u12165:
 19457  00468A  90D8               	bcf	status,0,c
 19458  00468C  3766               	rlcf	(??_get_fattime+2)& (0+255),f,b
 19459  00468E  3767               	rlcf	(??_get_fattime+3)& (0+255),f,b
 19460  004690  3768               	rlcf	(??_get_fattime+4)& (0+255),f,b
 19461  004692  3769               	rlcf	(??_get_fattime+5)& (0+255),f,b
 19462  004694  2EE8               	decfsz	wreg,f,c
 19463  004696  D7F9               	goto	u12165
 19464  004698  518A               	movf	get_fattime@f_time& (0+255),w,b
 19465  00469A  6F6A               	movwf	(??_get_fattime+6)& (0+255),b
 19466  00469C  518B               	movf	(get_fattime@f_time+1)& (0+255),w,b
 19467  00469E  6F6B               	movwf	(??_get_fattime+7)& (0+255),b
 19468  0046A0  6B6C               	clrf	(??_get_fattime+8)& (0+255),b
 19469  0046A2  6B6D               	clrf	(??_get_fattime+9)& (0+255),b
 19470  0046A4  0E0B               	movlw	11
 19471  0046A6                     u12175:
 19472  0046A6  90D8               	bcf	status,0,c
 19473  0046A8  376A               	rlcf	(??_get_fattime+6)& (0+255),f,b
 19474  0046AA  376B               	rlcf	(??_get_fattime+7)& (0+255),f,b
 19475  0046AC  376C               	rlcf	(??_get_fattime+8)& (0+255),f,b
 19476  0046AE  376D               	rlcf	(??_get_fattime+9)& (0+255),f,b
 19477  0046B0  2EE8               	decfsz	wreg,f,c
 19478  0046B2  D7F9               	goto	u12175
 19479  0046B4  C091  F06E         	movff	get_fattime@f_time+7,??_get_fattime+10
 19480  0046B8  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 19481  0046BA  6B70               	clrf	(??_get_fattime+12)& (0+255),b
 19482  0046BC  6B71               	clrf	(??_get_fattime+13)& (0+255),b
 19483  0046BE  C06F  F071         	movff	??_get_fattime+11,??_get_fattime+13
 19484  0046C2  C06E  F070         	movff	??_get_fattime+10,??_get_fattime+12
 19485  0046C6  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 19486  0046C8  6B6E               	clrf	(??_get_fattime+10)& (0+255),b
 19487  0046CA  C091  F072         	movff	get_fattime@f_time+7,??_get_fattime+14
 19488  0046CE  6B73               	clrf	(??_get_fattime+15)& (0+255),b
 19489  0046D0  6B74               	clrf	(??_get_fattime+16)& (0+255),b
 19490  0046D2  6B75               	clrf	(??_get_fattime+17)& (0+255),b
 19491  0046D4  0E15               	movlw	21
 19492  0046D6                     u12185:
 19493  0046D6  90D8               	bcf	status,0,c
 19494  0046D8  3772               	rlcf	(??_get_fattime+14)& (0+255),f,b
 19495  0046DA  3773               	rlcf	(??_get_fattime+15)& (0+255),f,b
 19496  0046DC  3774               	rlcf	(??_get_fattime+16)& (0+255),f,b
 19497  0046DE  3775               	rlcf	(??_get_fattime+17)& (0+255),f,b
 19498  0046E0  2EE8               	decfsz	wreg,f,c
 19499  0046E2  D7F9               	goto	u12185
 19500  0046E4  C092  F076         	movff	get_fattime@f_time+8,??_get_fattime+18
 19501  0046E8  6B77               	clrf	(??_get_fattime+19)& (0+255),b
 19502  0046EA  6B78               	clrf	(??_get_fattime+20)& (0+255),b
 19503  0046EC  6B79               	clrf	(??_get_fattime+21)& (0+255),b
 19504  0046EE  0E19               	movlw	25
 19505  0046F0                     u12195:
 19506  0046F0  90D8               	bcf	status,0,c
 19507  0046F2  3776               	rlcf	(??_get_fattime+18)& (0+255),f,b
 19508  0046F4  3777               	rlcf	(??_get_fattime+19)& (0+255),f,b
 19509  0046F6  3778               	rlcf	(??_get_fattime+20)& (0+255),f,b
 19510  0046F8  3779               	rlcf	(??_get_fattime+21)& (0+255),f,b
 19511  0046FA  2EE8               	decfsz	wreg,f,c
 19512  0046FC  D7F9               	goto	u12195
 19513  0046FE  5172               	movf	(??_get_fattime+14)& (0+255),w,b
 19514  004700  1176               	iorwf	(??_get_fattime+18)& (0+255),w,b
 19515  004702  6F7A               	movwf	(??_get_fattime+22)& (0+255),b
 19516  004704  5173               	movf	(??_get_fattime+15)& (0+255),w,b
 19517  004706  1177               	iorwf	(??_get_fattime+19)& (0+255),w,b
 19518  004708  6F7B               	movwf	(??_get_fattime+23)& (0+255),b
 19519  00470A  5174               	movf	(??_get_fattime+16)& (0+255),w,b
 19520  00470C  1178               	iorwf	(??_get_fattime+20)& (0+255),w,b
 19521  00470E  6F7C               	movwf	(??_get_fattime+24)& (0+255),b
 19522  004710  5175               	movf	(??_get_fattime+17)& (0+255),w,b
 19523  004712  1179               	iorwf	(??_get_fattime+21)& (0+255),w,b
 19524  004714  6F7D               	movwf	(??_get_fattime+25)& (0+255),b
 19525  004716  516E               	movf	(??_get_fattime+10)& (0+255),w,b
 19526  004718  117A               	iorwf	(??_get_fattime+22)& (0+255),w,b
 19527  00471A  6F7E               	movwf	(??_get_fattime+26)& (0+255),b
 19528  00471C  516F               	movf	(??_get_fattime+11)& (0+255),w,b
 19529  00471E  117B               	iorwf	(??_get_fattime+23)& (0+255),w,b
 19530  004720  6F7F               	movwf	(??_get_fattime+27)& (0+255),b
 19531  004722  5170               	movf	(??_get_fattime+12)& (0+255),w,b
 19532  004724  117C               	iorwf	(??_get_fattime+24)& (0+255),w,b
 19533  004726  6F80               	movwf	(??_get_fattime+28)& (0+255),b
 19534  004728  5171               	movf	(??_get_fattime+13)& (0+255),w,b
 19535  00472A  117D               	iorwf	(??_get_fattime+25)& (0+255),w,b
 19536  00472C  6F81               	movwf	(??_get_fattime+29)& (0+255),b
 19537  00472E  516A               	movf	(??_get_fattime+6)& (0+255),w,b
 19538  004730  117E               	iorwf	(??_get_fattime+26)& (0+255),w,b
 19539  004732  6F82               	movwf	(??_get_fattime+30)& (0+255),b
 19540  004734  516B               	movf	(??_get_fattime+7)& (0+255),w,b
 19541  004736  117F               	iorwf	(??_get_fattime+27)& (0+255),w,b
 19542  004738  6F83               	movwf	(??_get_fattime+31)& (0+255),b
 19543  00473A  516C               	movf	(??_get_fattime+8)& (0+255),w,b
 19544  00473C  1180               	iorwf	(??_get_fattime+28)& (0+255),w,b
 19545  00473E  6F84               	movwf	(??_get_fattime+32)& (0+255),b
 19546  004740  516D               	movf	(??_get_fattime+9)& (0+255),w,b
 19547  004742  1181               	iorwf	(??_get_fattime+29)& (0+255),w,b
 19548  004744  6F85               	movwf	(??_get_fattime+33)& (0+255),b
 19549  004746  5166               	movf	(??_get_fattime+2)& (0+255),w,b
 19550  004748  1182               	iorwf	(??_get_fattime+30)& (0+255),w,b
 19551  00474A  6F86               	movwf	(??_get_fattime+34)& (0+255),b
 19552  00474C  5167               	movf	(??_get_fattime+3)& (0+255),w,b
 19553  00474E  1183               	iorwf	(??_get_fattime+31)& (0+255),w,b
 19554  004750  6F87               	movwf	(??_get_fattime+35)& (0+255),b
 19555  004752  5168               	movf	(??_get_fattime+4)& (0+255),w,b
 19556  004754  1184               	iorwf	(??_get_fattime+32)& (0+255),w,b
 19557  004756  6F88               	movwf	(??_get_fattime+36)& (0+255),b
 19558  004758  5169               	movf	(??_get_fattime+5)& (0+255),w,b
 19559  00475A  1185               	iorwf	(??_get_fattime+33)& (0+255),w,b
 19560  00475C  6F89               	movwf	(??_get_fattime+37)& (0+255),b
 19561  00475E  5164               	movf	??_get_fattime& (0+255),w,b
 19562  004760  1186               	iorwf	(??_get_fattime+34)& (0+255),w,b
 19563  004762  6F60               	movwf	?_get_fattime& (0+255),b
 19564  004764  5165               	movf	(??_get_fattime+1)& (0+255),w,b
 19565  004766  1187               	iorwf	(??_get_fattime+35)& (0+255),w,b
 19566  004768  6F61               	movwf	(?_get_fattime+1)& (0+255),b
 19567  00476A  0E00               	movlw	0
 19568  00476C  1188               	iorwf	(??_get_fattime+36)& (0+255),w,b
 19569  00476E  6F62               	movwf	(?_get_fattime+2)& (0+255),b
 19570  004770  0E00               	movlw	0
 19571  004772  1189               	iorwf	(??_get_fattime+37)& (0+255),w,b
 19572  004774  6F63               	movwf	(?_get_fattime+3)& (0+255),b
 19573  004776  0012               	return	
 19574  004778                     __end_of_get_fattime:
 19575                           	opt stack 0
 19576                           tosu	equ	0xFFF
 19577                           tosh	equ	0xFFE
 19578                           tosl	equ	0xFFD
 19579                           pclath	equ	0xFFA
 19580                           tblptru	equ	0xFF8
 19581                           tblptrh	equ	0xFF7
 19582                           tblptrl	equ	0xFF6
 19583                           tablat	equ	0xFF5
 19584                           prodh	equ	0xFF4
 19585                           prodl	equ	0xFF3
 19586                           intcon	equ	0xFF2
 19587                           intcon2	equ	0xFF1
 19588                           intcon3	equ	0xFF0
 19589                           indf0	equ	0xFEF
 19590                           postinc0	equ	0xFEE
 19591                           fsr0h	equ	0xFEA
 19592                           fsr0l	equ	0xFE9
 19593                           wreg	equ	0xFE8
 19594                           indf1	equ	0xFE7
 19595                           postinc1	equ	0xFE6
 19596                           postdec1	equ	0xFE5
 19597                           plusw1	equ	0xFE3
 19598                           fsr1h	equ	0xFE2
 19599                           fsr1l	equ	0xFE1
 19600                           indf2	equ	0xFDF
 19601                           postinc2	equ	0xFDE
 19602                           postdec2	equ	0xFDD
 19603                           plusw2	equ	0xFDB
 19604                           fsr2h	equ	0xFDA
 19605                           fsr2l	equ	0xFD9
 19606                           status	equ	0xFD8
 19607                           
 19608 ;; *************** function _desliga_uart *****************
 19609 ;; Defined at:
 19610 ;;		line 219 in file "bibliotecas/uart.c"
 19611 ;; Parameters:    Size  Location     Type
 19612 ;;		None
 19613 ;; Auto vars:     Size  Location     Type
 19614 ;;		None
 19615 ;; Return value:  Size  Location     Type
 19616 ;;                  1    wreg      void 
 19617 ;; Registers used:
 19618 ;;		wreg, status,2
 19619 ;; Tracked objects:
 19620 ;;		On entry : 0/0
 19621 ;;		On exit  : 0/0
 19622 ;;		Unchanged: 0/0
 19623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19624 ;;      Params:         0       0       0       0       0       0       0       0       0
 19625 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19626 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19627 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19628 ;;Total ram usage:        0 bytes
 19629 ;; Hardware stack levels used:    1
 19630 ;; Hardware stack levels required when called:    3
 19631 ;; This function calls:
 19632 ;;		Nothing
 19633 ;; This function is called by:
 19634 ;;		_escrita_sdcard
 19635 ;;		_leitura_sdcard
 19636 ;;		_sdcard_init
 19637 ;; This function uses a non-reentrant model
 19638 ;;
 19639                           
 19640                           	psect	text72
 19641  005C58                     __ptext72:
 19642                           	opt stack 0
 19643  005C58                     _desliga_uart:
 19644                           	opt stack 24
 19645                           
 19646                           ;uart.c: 221: TRISCbits.RC6 = 1;
 19647                           
 19648                           ; BSR set to: 0
 19649                           ;incstack = 0
 19650  005C58  8C94               	bsf	3988,6,c	;volatile
 19651                           
 19652                           ;uart.c: 222: TRISCbits.RC7 = 1;
 19653  005C5A  8E94               	bsf	3988,7,c	;volatile
 19654                           
 19655                           ;uart.c: 225: TXSTA = 0x00;
 19656  005C5C  0E00               	movlw	0
 19657  005C5E  6EAC               	movwf	4012,c	;volatile
 19658                           
 19659                           ;uart.c: 227: RCSTA = 0x00;
 19660  005C60  0E00               	movlw	0
 19661  005C62  6EAB               	movwf	4011,c	;volatile
 19662  005C64  0012               	return		;funcret
 19663  005C66                     __end_of_desliga_uart:
 19664                           	opt stack 0
 19665                           tosu	equ	0xFFF
 19666                           tosh	equ	0xFFE
 19667                           tosl	equ	0xFFD
 19668                           pclath	equ	0xFFA
 19669                           tblptru	equ	0xFF8
 19670                           tblptrh	equ	0xFF7
 19671                           tblptrl	equ	0xFF6
 19672                           tablat	equ	0xFF5
 19673                           prodh	equ	0xFF4
 19674                           prodl	equ	0xFF3
 19675                           intcon	equ	0xFF2
 19676                           intcon2	equ	0xFF1
 19677                           intcon3	equ	0xFF0
 19678                           indf0	equ	0xFEF
 19679                           postinc0	equ	0xFEE
 19680                           fsr0h	equ	0xFEA
 19681                           fsr0l	equ	0xFE9
 19682                           wreg	equ	0xFE8
 19683                           indf1	equ	0xFE7
 19684                           postinc1	equ	0xFE6
 19685                           postdec1	equ	0xFE5
 19686                           plusw1	equ	0xFE3
 19687                           fsr1h	equ	0xFE2
 19688                           fsr1l	equ	0xFE1
 19689                           indf2	equ	0xFDF
 19690                           postinc2	equ	0xFDE
 19691                           postdec2	equ	0xFDD
 19692                           plusw2	equ	0xFDB
 19693                           fsr2h	equ	0xFDA
 19694                           fsr2l	equ	0xFD9
 19695                           status	equ	0xFD8
 19696                           
 19697 ;; *************** function _desliga_SPI *****************
 19698 ;; Defined at:
 19699 ;;		line 69 in file "bibliotecas/SPI.c"
 19700 ;; Parameters:    Size  Location     Type
 19701 ;;		None
 19702 ;; Auto vars:     Size  Location     Type
 19703 ;;		None
 19704 ;; Return value:  Size  Location     Type
 19705 ;;                  1    wreg      void 
 19706 ;; Registers used:
 19707 ;;		wreg, status,2
 19708 ;; Tracked objects:
 19709 ;;		On entry : 0/0
 19710 ;;		On exit  : 0/0
 19711 ;;		Unchanged: 0/0
 19712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19713 ;;      Params:         0       0       0       0       0       0       0       0       0
 19714 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19715 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19716 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19717 ;;Total ram usage:        0 bytes
 19718 ;; Hardware stack levels used:    1
 19719 ;; Hardware stack levels required when called:    3
 19720 ;; This function calls:
 19721 ;;		Nothing
 19722 ;; This function is called by:
 19723 ;;		_escrita_sdcard
 19724 ;;		_leitura_sdcard
 19725 ;; This function uses a non-reentrant model
 19726 ;;
 19727                           
 19728                           	psect	text73
 19729  005C8A                     __ptext73:
 19730                           	opt stack 0
 19731  005C8A                     _desliga_SPI:
 19732                           	opt stack 24
 19733                           
 19734                           ;SPI.c: 71: SSPSTAT = 0x00;
 19735                           
 19736                           ;incstack = 0
 19737  005C8A  0E00               	movlw	0
 19738  005C8C  6EC7               	movwf	4039,c	;volatile
 19739                           
 19740                           ;SPI.c: 72: SSPCON1 = 0x00;
 19741  005C8E  0E00               	movlw	0
 19742  005C90  6EC6               	movwf	4038,c	;volatile
 19743                           
 19744                           ;SPI.c: 73: SSPCON1bits.SSPEN = 0;
 19745  005C92  9AC6               	bcf	4038,5,c	;volatile
 19746  005C94  0012               	return		;funcret
 19747  005C96                     __end_of_desliga_SPI:
 19748                           	opt stack 0
 19749                           tosu	equ	0xFFF
 19750                           tosh	equ	0xFFE
 19751                           tosl	equ	0xFFD
 19752                           pclath	equ	0xFFA
 19753                           tblptru	equ	0xFF8
 19754                           tblptrh	equ	0xFF7
 19755                           tblptrl	equ	0xFF6
 19756                           tablat	equ	0xFF5
 19757                           prodh	equ	0xFF4
 19758                           prodl	equ	0xFF3
 19759                           intcon	equ	0xFF2
 19760                           intcon2	equ	0xFF1
 19761                           intcon3	equ	0xFF0
 19762                           indf0	equ	0xFEF
 19763                           postinc0	equ	0xFEE
 19764                           fsr0h	equ	0xFEA
 19765                           fsr0l	equ	0xFE9
 19766                           wreg	equ	0xFE8
 19767                           indf1	equ	0xFE7
 19768                           postinc1	equ	0xFE6
 19769                           postdec1	equ	0xFE5
 19770                           plusw1	equ	0xFE3
 19771                           fsr1h	equ	0xFE2
 19772                           fsr1l	equ	0xFE1
 19773                           indf2	equ	0xFDF
 19774                           postinc2	equ	0xFDE
 19775                           postdec2	equ	0xFDD
 19776                           plusw2	equ	0xFDB
 19777                           fsr2h	equ	0xFDA
 19778                           fsr2l	equ	0xFD9
 19779                           status	equ	0xFD8
 19780                           
 19781 ;; *************** function _escreve_inteiro_lcd *****************
 19782 ;; Defined at:
 19783 ;;		line 376 in file "bibliotecas/display_lcd.c"
 19784 ;; Parameters:    Size  Location     Type
 19785 ;;  valor           2   21[BANK0 ] int 
 19786 ;; Auto vars:     Size  Location     Type
 19787 ;;  texto           7   23[BANK0 ] unsigned char [7]
 19788 ;; Return value:  Size  Location     Type
 19789 ;;                  1    wreg      void 
 19790 ;; Registers used:
 19791 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19792 ;; Tracked objects:
 19793 ;;		On entry : 0/0
 19794 ;;		On exit  : 0/0
 19795 ;;		Unchanged: 0/0
 19796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19797 ;;      Params:         0       2       0       0       0       0       0       0       0
 19798 ;;      Locals:         0       7       0       0       0       0       0       0       0
 19799 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19800 ;;      Totals:         0       9       0       0       0       0       0       0       0
 19801 ;;Total ram usage:        9 bytes
 19802 ;; Hardware stack levels used:    1
 19803 ;; Hardware stack levels required when called:    6
 19804 ;; This function calls:
 19805 ;;		_escreve_frase_ram_lcd
 19806 ;;		_itoa
 19807 ;; This function is called by:
 19808 ;;		_verifica_fence_externo
 19809 ;;		_escreve_float_lcd
 19810 ;; This function uses a non-reentrant model
 19811 ;;
 19812                           
 19813                           	psect	text74
 19814  00592C                     __ptext74:
 19815                           	opt stack 0
 19816  00592C                     _escreve_inteiro_lcd:
 19817                           	opt stack 22
 19818                           
 19819                           ;display_lcd.c: 378: char texto[7] = "000000";
 19820                           
 19821                           ;incstack = 0
 19822  00592C  EE21  F085         	lfsr	2,escreve_inteiro_lcd@F3966
 19823  005930  EE10  F077         	lfsr	1,escreve_inteiro_lcd@texto
 19824  005934  0E06               	movlw	6
 19825  005936                     u14051:
 19826  005936  CFDB FFE3          	movff	plusw2,plusw1
 19827  00593A  06E8               	decf	wreg,f,c
 19828  00593C  E2FC               	bc	u14051
 19829                           
 19830                           ;display_lcd.c: 379: itoa(texto,valor, 10);
 19831  00593E  0E77               	movlw	low escreve_inteiro_lcd@texto
 19832  005940  0100               	movlb	0	; () banked
 19833  005942  6F6D               	movwf	itoa@buf& (0+255),b
 19834  005944  0E00               	movlw	high escreve_inteiro_lcd@texto
 19835  005946  6F6E               	movwf	(itoa@buf+1)& (0+255),b
 19836  005948  C075  F06F         	movff	escreve_inteiro_lcd@valor,itoa@val
 19837  00594C  C076  F070         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
 19838  005950  0E00               	movlw	0
 19839  005952  6F72               	movwf	(itoa@base+1)& (0+255),b
 19840  005954  0E0A               	movlw	10
 19841  005956  6F71               	movwf	itoa@base& (0+255),b
 19842  005958  EC10  F02C         	call	_itoa	;wreg free
 19843                           
 19844                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
 19845  00595C  0E77               	movlw	low escreve_inteiro_lcd@texto
 19846  00595E  0100               	movlb	0	; () banked
 19847  005960  6F60               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 19848  005962  0E00               	movlw	high escreve_inteiro_lcd@texto
 19849  005964  6F61               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 19850  005966  ECDF  F02A         	call	_escreve_frase_ram_lcd	;wreg free
 19851  00596A  0012               	return		;funcret
 19852  00596C                     __end_of_escreve_inteiro_lcd:
 19853                           	opt stack 0
 19854                           tosu	equ	0xFFF
 19855                           tosh	equ	0xFFE
 19856                           tosl	equ	0xFFD
 19857                           pclath	equ	0xFFA
 19858                           tblptru	equ	0xFF8
 19859                           tblptrh	equ	0xFF7
 19860                           tblptrl	equ	0xFF6
 19861                           tablat	equ	0xFF5
 19862                           prodh	equ	0xFF4
 19863                           prodl	equ	0xFF3
 19864                           intcon	equ	0xFF2
 19865                           intcon2	equ	0xFF1
 19866                           intcon3	equ	0xFF0
 19867                           indf0	equ	0xFEF
 19868                           postinc0	equ	0xFEE
 19869                           fsr0h	equ	0xFEA
 19870                           fsr0l	equ	0xFE9
 19871                           wreg	equ	0xFE8
 19872                           indf1	equ	0xFE7
 19873                           postinc1	equ	0xFE6
 19874                           postdec1	equ	0xFE5
 19875                           plusw1	equ	0xFE3
 19876                           fsr1h	equ	0xFE2
 19877                           fsr1l	equ	0xFE1
 19878                           indf2	equ	0xFDF
 19879                           postinc2	equ	0xFDE
 19880                           postdec2	equ	0xFDD
 19881                           plusw2	equ	0xFDB
 19882                           fsr2h	equ	0xFDA
 19883                           fsr2l	equ	0xFD9
 19884                           status	equ	0xFD8
 19885                           
 19886 ;; *************** function _itoa *****************
 19887 ;; Defined at:
 19888 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 19889 ;; Parameters:    Size  Location     Type
 19890 ;;  buf             2   13[BANK0 ] PTR unsigned char 
 19891 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 19892 ;;  val             2   15[BANK0 ] int 
 19893 ;;  base            2   17[BANK0 ] int 
 19894 ;; Auto vars:     Size  Location     Type
 19895 ;;  cp              2   19[BANK0 ] PTR unsigned char 
 19896 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 19897 ;; Return value:  Size  Location     Type
 19898 ;;                  2   13[BANK0 ] PTR unsigned char 
 19899 ;; Registers used:
 19900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19901 ;; Tracked objects:
 19902 ;;		On entry : 0/0
 19903 ;;		On exit  : 0/0
 19904 ;;		Unchanged: 0/0
 19905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19906 ;;      Params:         0       6       0       0       0       0       0       0       0
 19907 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19908 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19909 ;;      Totals:         0       8       0       0       0       0       0       0       0
 19910 ;;Total ram usage:        8 bytes
 19911 ;; Hardware stack levels used:    1
 19912 ;; Hardware stack levels required when called:    5
 19913 ;; This function calls:
 19914 ;;		_utoa
 19915 ;; This function is called by:
 19916 ;;		_escreve_inteiro_lcd
 19917 ;;		_escreve_inteiro_uart
 19918 ;; This function uses a non-reentrant model
 19919 ;;
 19920                           
 19921                           	psect	text75
 19922  005820                     __ptext75:
 19923                           	opt stack 0
 19924  005820                     _itoa:
 19925                           	opt stack 22
 19926                           
 19927                           ;incstack = 0
 19928  005820  C06D  F073         	movff	itoa@buf,itoa@cp
 19929  005824  C06E  F074         	movff	itoa@buf+1,itoa@cp+1
 19930  005828  0100               	movlb	0	; () banked
 19931  00582A  AF70               	btfss	(itoa@val+1)& (0+255),7,b
 19932  00582C  D00C               	goto	l1717
 19933                           
 19934                           ; BSR set to: 0
 19935  00582E  C06D  FFD9         	movff	itoa@buf,fsr2l
 19936  005832  C06E  FFDA         	movff	itoa@buf+1,fsr2h
 19937  005836  0E2D               	movlw	45
 19938  005838  6EDF               	movwf	indf2,c
 19939                           
 19940                           ; BSR set to: 0
 19941  00583A  4B6D               	infsnz	itoa@buf& (0+255),f,b
 19942  00583C  2B6E               	incf	(itoa@buf+1)& (0+255),f,b
 19943                           
 19944                           ; BSR set to: 0
 19945  00583E  6D6F               	negf	itoa@val& (0+255),b
 19946  005840  1F70               	comf	(itoa@val+1)& (0+255),f,b
 19947  005842  B0D8               	btfsc	status,0,c
 19948  005844  2B70               	incf	(itoa@val+1)& (0+255),f,b
 19949  005846                     l1717:
 19950                           
 19951                           ; BSR set to: 0
 19952                           
 19953                           ; BSR set to: 0
 19954  005846  C06D  F064         	movff	itoa@buf,utoa@buf
 19955  00584A  C06E  F065         	movff	itoa@buf+1,utoa@buf+1
 19956  00584E  C06F  F066         	movff	itoa@val,utoa@val
 19957  005852  C070  F067         	movff	itoa@val+1,utoa@val+1
 19958  005856  C071  F068         	movff	itoa@base,utoa@base
 19959  00585A  C072  F069         	movff	itoa@base+1,utoa@base+1
 19960  00585E  ECD6  F024         	call	_utoa	;wreg free
 19961  005862  0012               	return	
 19962  005864                     __end_of_itoa:
 19963                           	opt stack 0
 19964                           tosu	equ	0xFFF
 19965                           tosh	equ	0xFFE
 19966                           tosl	equ	0xFFD
 19967                           pclath	equ	0xFFA
 19968                           tblptru	equ	0xFF8
 19969                           tblptrh	equ	0xFF7
 19970                           tblptrl	equ	0xFF6
 19971                           tablat	equ	0xFF5
 19972                           prodh	equ	0xFF4
 19973                           prodl	equ	0xFF3
 19974                           intcon	equ	0xFF2
 19975                           intcon2	equ	0xFF1
 19976                           intcon3	equ	0xFF0
 19977                           indf0	equ	0xFEF
 19978                           postinc0	equ	0xFEE
 19979                           fsr0h	equ	0xFEA
 19980                           fsr0l	equ	0xFE9
 19981                           wreg	equ	0xFE8
 19982                           indf1	equ	0xFE7
 19983                           postinc1	equ	0xFE6
 19984                           postdec1	equ	0xFE5
 19985                           plusw1	equ	0xFE3
 19986                           fsr1h	equ	0xFE2
 19987                           fsr1l	equ	0xFE1
 19988                           indf2	equ	0xFDF
 19989                           postinc2	equ	0xFDE
 19990                           postdec2	equ	0xFDD
 19991                           plusw2	equ	0xFDB
 19992                           fsr2h	equ	0xFDA
 19993                           fsr2l	equ	0xFD9
 19994                           status	equ	0xFD8
 19995                           
 19996 ;; *************** function _utoa *****************
 19997 ;; Defined at:
 19998 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 19999 ;; Parameters:    Size  Location     Type
 20000 ;;  buf             2    4[BANK0 ] PTR unsigned char 
 20001 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 20002 ;;  val             2    6[BANK0 ] unsigned int 
 20003 ;;  base            2    8[BANK0 ] int 
 20004 ;; Auto vars:     Size  Location     Type
 20005 ;;  v               2   10[BANK0 ] unsigned int 
 20006 ;;  c               1   12[BANK0 ] unsigned char 
 20007 ;; Return value:  Size  Location     Type
 20008 ;;                  2    4[BANK0 ] PTR unsigned char 
 20009 ;; Registers used:
 20010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20011 ;; Tracked objects:
 20012 ;;		On entry : 0/0
 20013 ;;		On exit  : 0/0
 20014 ;;		Unchanged: 0/0
 20015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20016 ;;      Params:         0       6       0       0       0       0       0       0       0
 20017 ;;      Locals:         0       3       0       0       0       0       0       0       0
 20018 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20019 ;;      Totals:         0       9       0       0       0       0       0       0       0
 20020 ;;Total ram usage:        9 bytes
 20021 ;; Hardware stack levels used:    1
 20022 ;; Hardware stack levels required when called:    4
 20023 ;; This function calls:
 20024 ;;		___lwdiv
 20025 ;;		___lwmod
 20026 ;; This function is called by:
 20027 ;;		_itoa
 20028 ;; This function uses a non-reentrant model
 20029 ;;
 20030                           
 20031                           	psect	text76
 20032  0049AC                     __ptext76:
 20033                           	opt stack 0
 20034  0049AC                     _utoa:
 20035                           	opt stack 22
 20036                           
 20037                           ;incstack = 0
 20038  0049AC  C066  F06A         	movff	utoa@val,utoa@v
 20039  0049B0  C067  F06B         	movff	utoa@val+1,utoa@v+1
 20040  0049B4  C06A  F060         	movff	utoa@v,___lwdiv@dividend
 20041  0049B8  C06B  F061         	movff	utoa@v+1,___lwdiv@dividend+1
 20042  0049BC  C068  F062         	movff	utoa@base,___lwdiv@divisor
 20043  0049C0  C069  F063         	movff	utoa@base+1,___lwdiv@divisor+1
 20044  0049C4  ECB5  F02A         	call	___lwdiv	;wreg free
 20045  0049C8  C060  F06A         	movff	?___lwdiv,utoa@v
 20046  0049CC  C061  F06B         	movff	?___lwdiv+1,utoa@v+1
 20047  0049D0  0100               	movlb	0	; () banked
 20048  0049D2  4B64               	infsnz	utoa@buf& (0+255),f,b
 20049  0049D4  2B65               	incf	(utoa@buf+1)& (0+255),f,b
 20050                           
 20051                           ; BSR set to: 0
 20052  0049D6  516A               	movf	utoa@v& (0+255),w,b
 20053  0049D8  116B               	iorwf	(utoa@v+1)& (0+255),w,b
 20054  0049DA  A4D8               	btfss	status,2,c
 20055  0049DC  D7EB               	goto	l1721
 20056                           
 20057                           ; BSR set to: 0
 20058                           
 20059                           ; BSR set to: 0
 20060  0049DE  C064  FFD9         	movff	utoa@buf,fsr2l
 20061  0049E2  C065  FFDA         	movff	utoa@buf+1,fsr2h
 20062  0049E6  0E00               	movlw	0
 20063  0049E8  6EDF               	movwf	indf2,c
 20064                           
 20065                           ; BSR set to: 0
 20066  0049EA  0764               	decf	utoa@buf& (0+255),f,b
 20067  0049EC  A0D8               	btfss	status,0,c
 20068  0049EE  0765               	decf	(utoa@buf+1)& (0+255),f,b
 20069  0049F0                     
 20070                           ; BSR set to: 0
 20071                           
 20072                           ; BSR set to: 0
 20073  0049F0  C066  F060         	movff	utoa@val,___lwmod@dividend
 20074  0049F4  C067  F061         	movff	utoa@val+1,___lwmod@dividend+1
 20075  0049F8  C068  F062         	movff	utoa@base,___lwmod@divisor
 20076  0049FC  C069  F063         	movff	utoa@base+1,___lwmod@divisor+1
 20077  004A00  EC32  F02C         	call	___lwmod	;wreg free
 20078  004A04  0100               	movlb	0	; () banked
 20079  004A06  5160               	movf	?___lwmod& (0+255),w,b
 20080  004A08  6F6C               	movwf	utoa@c& (0+255),b
 20081                           
 20082                           ; BSR set to: 0
 20083  004A0A  C066  F060         	movff	utoa@val,___lwdiv@dividend
 20084  004A0E  C067  F061         	movff	utoa@val+1,___lwdiv@dividend+1
 20085  004A12  C068  F062         	movff	utoa@base,___lwdiv@divisor
 20086  004A16  C069  F063         	movff	utoa@base+1,___lwdiv@divisor+1
 20087  004A1A  ECB5  F02A         	call	___lwdiv	;wreg free
 20088  004A1E  C060  F066         	movff	?___lwdiv,utoa@val
 20089  004A22  C061  F067         	movff	?___lwdiv+1,utoa@val+1
 20090  004A26  0E09               	movlw	9
 20091  004A28  0100               	movlb	0	; () banked
 20092  004A2A  656C               	cpfsgt	utoa@c& (0+255),b
 20093  004A2C  D002               	goto	l1724
 20094                           
 20095                           ; BSR set to: 0
 20096  004A2E  0E07               	movlw	7
 20097  004A30  276C               	addwf	utoa@c& (0+255),f,b
 20098  004A32                     l1724:
 20099                           
 20100                           ; BSR set to: 0
 20101  004A32  0E30               	movlw	48
 20102  004A34  276C               	addwf	utoa@c& (0+255),f,b
 20103                           
 20104                           ; BSR set to: 0
 20105  004A36  C064  FFD9         	movff	utoa@buf,fsr2l
 20106  004A3A  C065  FFDA         	movff	utoa@buf+1,fsr2h
 20107  004A3E  C06C  FFDF         	movff	utoa@c,indf2
 20108                           
 20109                           ; BSR set to: 0
 20110  004A42  0764               	decf	utoa@buf& (0+255),f,b
 20111  004A44  A0D8               	btfss	status,0,c
 20112  004A46  0765               	decf	(utoa@buf+1)& (0+255),f,b
 20113                           
 20114                           ; BSR set to: 0
 20115  004A48  5166               	movf	utoa@val& (0+255),w,b
 20116  004A4A  1167               	iorwf	(utoa@val+1)& (0+255),w,b
 20117  004A4C  A4D8               	btfss	status,2,c
 20118  004A4E  D7D0               	goto	l1723
 20119                           
 20120                           ; BSR set to: 0
 20121                           ;	Return value of _utoa is never used
 20122                           
 20123                           ; BSR set to: 0
 20124  004A50  4B64               	infsnz	utoa@buf& (0+255),f,b
 20125  004A52  2B65               	incf	(utoa@buf+1)& (0+255),f,b
 20126  004A54  0012               	return	
 20127  004A56                     __end_of_utoa:
 20128                           	opt stack 0
 20129                           tosu	equ	0xFFF
 20130                           tosh	equ	0xFFE
 20131                           tosl	equ	0xFFD
 20132                           pclath	equ	0xFFA
 20133                           tblptru	equ	0xFF8
 20134                           tblptrh	equ	0xFF7
 20135                           tblptrl	equ	0xFF6
 20136                           tablat	equ	0xFF5
 20137                           prodh	equ	0xFF4
 20138                           prodl	equ	0xFF3
 20139                           intcon	equ	0xFF2
 20140                           intcon2	equ	0xFF1
 20141                           intcon3	equ	0xFF0
 20142                           indf0	equ	0xFEF
 20143                           postinc0	equ	0xFEE
 20144                           fsr0h	equ	0xFEA
 20145                           fsr0l	equ	0xFE9
 20146                           wreg	equ	0xFE8
 20147                           indf1	equ	0xFE7
 20148                           postinc1	equ	0xFE6
 20149                           postdec1	equ	0xFE5
 20150                           plusw1	equ	0xFE3
 20151                           fsr1h	equ	0xFE2
 20152                           fsr1l	equ	0xFE1
 20153                           indf2	equ	0xFDF
 20154                           postinc2	equ	0xFDE
 20155                           postdec2	equ	0xFDD
 20156                           plusw2	equ	0xFDB
 20157                           fsr2h	equ	0xFDA
 20158                           fsr2l	equ	0xFD9
 20159                           status	equ	0xFD8
 20160                           
 20161 ;; *************** function ___lwmod *****************
 20162 ;; Defined at:
 20163 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 20164 ;; Parameters:    Size  Location     Type
 20165 ;;  dividend        2    0[BANK0 ] unsigned int 
 20166 ;;  divisor         2    2[BANK0 ] unsigned int 
 20167 ;; Auto vars:     Size  Location     Type
 20168 ;;  counter         1   32[COMRAM] unsigned char 
 20169 ;; Return value:  Size  Location     Type
 20170 ;;                  2    0[BANK0 ] unsigned int 
 20171 ;; Registers used:
 20172 ;;		wreg, status,2, status,0
 20173 ;; Tracked objects:
 20174 ;;		On entry : 0/0
 20175 ;;		On exit  : 0/0
 20176 ;;		Unchanged: 0/0
 20177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20178 ;;      Params:         0       4       0       0       0       0       0       0       0
 20179 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20180 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20181 ;;      Totals:         1       4       0       0       0       0       0       0       0
 20182 ;;Total ram usage:        5 bytes
 20183 ;; Hardware stack levels used:    1
 20184 ;; Hardware stack levels required when called:    3
 20185 ;; This function calls:
 20186 ;;		Nothing
 20187 ;; This function is called by:
 20188 ;;		_utoa
 20189 ;;		_converte_inteiro_matriz
 20190 ;; This function uses a non-reentrant model
 20191 ;;
 20192                           
 20193                           	psect	text77
 20194  005864                     __ptext77:
 20195                           	opt stack 0
 20196  005864                     ___lwmod:
 20197                           	opt stack 22
 20198                           
 20199                           ; BSR set to: 0
 20200                           ;incstack = 0
 20201  005864  0100               	movlb	0	; () banked
 20202  005866  5162               	movf	___lwmod@divisor& (0+255),w,b
 20203  005868  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 20204  00586A  B4D8               	btfsc	status,2,c
 20205  00586C  D018               	goto	l1819
 20206                           
 20207                           ; BSR set to: 0
 20208  00586E  0E01               	movlw	1
 20209  005870  6E21               	movwf	___lwmod@counter,c
 20210  005872  D004               	goto	l1814
 20211  005874                     
 20212                           ; BSR set to: 0
 20213                           
 20214                           ; BSR set to: 0
 20215  005874  90D8               	bcf	status,0,c
 20216  005876  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 20217  005878  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 20218  00587A  2A21               	incf	___lwmod@counter,f,c
 20219  00587C                     l1814:
 20220                           
 20221                           ; BSR set to: 0
 20222                           
 20223                           ; BSR set to: 0
 20224  00587C  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 20225  00587E  D7FA               	goto	l1815
 20226  005880                     u12350:
 20227                           
 20228                           ; BSR set to: 0
 20229                           
 20230                           ; BSR set to: 0
 20231                           
 20232                           ; BSR set to: 0
 20233  005880  5162               	movf	___lwmod@divisor& (0+255),w,b
 20234  005882  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 20235  005884  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 20236  005886  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 20237  005888  A0D8               	btfss	status,0,c
 20238  00588A  D004               	goto	l1818
 20239                           
 20240                           ; BSR set to: 0
 20241  00588C  5162               	movf	___lwmod@divisor& (0+255),w,b
 20242  00588E  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 20243  005890  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 20244  005892  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 20245  005894                     l1818:
 20246                           
 20247                           ; BSR set to: 0
 20248                           
 20249                           ; BSR set to: 0
 20250  005894  90D8               	bcf	status,0,c
 20251  005896  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 20252  005898  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 20253                           
 20254                           ; BSR set to: 0
 20255  00589A  2E21               	decfsz	___lwmod@counter,f,c
 20256  00589C  D7F1               	goto	u12350
 20257  00589E                     l1819:
 20258                           
 20259                           ; BSR set to: 0
 20260                           
 20261                           ; BSR set to: 0
 20262  00589E  C060  F060         	movff	___lwmod@dividend,?___lwmod
 20263  0058A2  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 20264                           
 20265                           ; BSR set to: 0
 20266  0058A6  0012               	return		;funcret
 20267  0058A8                     __end_of___lwmod:
 20268                           	opt stack 0
 20269                           tosu	equ	0xFFF
 20270                           tosh	equ	0xFFE
 20271                           tosl	equ	0xFFD
 20272                           pclath	equ	0xFFA
 20273                           tblptru	equ	0xFF8
 20274                           tblptrh	equ	0xFF7
 20275                           tblptrl	equ	0xFF6
 20276                           tablat	equ	0xFF5
 20277                           prodh	equ	0xFF4
 20278                           prodl	equ	0xFF3
 20279                           intcon	equ	0xFF2
 20280                           intcon2	equ	0xFF1
 20281                           intcon3	equ	0xFF0
 20282                           indf0	equ	0xFEF
 20283                           postinc0	equ	0xFEE
 20284                           fsr0h	equ	0xFEA
 20285                           fsr0l	equ	0xFE9
 20286                           wreg	equ	0xFE8
 20287                           indf1	equ	0xFE7
 20288                           postinc1	equ	0xFE6
 20289                           postdec1	equ	0xFE5
 20290                           plusw1	equ	0xFE3
 20291                           fsr1h	equ	0xFE2
 20292                           fsr1l	equ	0xFE1
 20293                           indf2	equ	0xFDF
 20294                           postinc2	equ	0xFDE
 20295                           postdec2	equ	0xFDD
 20296                           plusw2	equ	0xFDB
 20297                           fsr2h	equ	0xFDA
 20298                           fsr2l	equ	0xFD9
 20299                           status	equ	0xFD8
 20300                           
 20301 ;; *************** function ___lwdiv *****************
 20302 ;; Defined at:
 20303 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 20304 ;; Parameters:    Size  Location     Type
 20305 ;;  dividend        2    0[BANK0 ] unsigned int 
 20306 ;;  divisor         2    2[BANK0 ] unsigned int 
 20307 ;; Auto vars:     Size  Location     Type
 20308 ;;  quotient        2   33[COMRAM] unsigned int 
 20309 ;;  counter         1   32[COMRAM] unsigned char 
 20310 ;; Return value:  Size  Location     Type
 20311 ;;                  2    0[BANK0 ] unsigned int 
 20312 ;; Registers used:
 20313 ;;		wreg, status,2, status,0
 20314 ;; Tracked objects:
 20315 ;;		On entry : 0/0
 20316 ;;		On exit  : 0/0
 20317 ;;		Unchanged: 0/0
 20318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20319 ;;      Params:         0       4       0       0       0       0       0       0       0
 20320 ;;      Locals:         3       0       0       0       0       0       0       0       0
 20321 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20322 ;;      Totals:         3       4       0       0       0       0       0       0       0
 20323 ;;Total ram usage:        7 bytes
 20324 ;; Hardware stack levels used:    1
 20325 ;; Hardware stack levels required when called:    3
 20326 ;; This function calls:
 20327 ;;		Nothing
 20328 ;; This function is called by:
 20329 ;;		_utoa
 20330 ;;		_converte_inteiro_matriz
 20331 ;; This function uses a non-reentrant model
 20332 ;;
 20333                           
 20334                           	psect	text78
 20335  00556A                     __ptext78:
 20336                           	opt stack 0
 20337  00556A                     ___lwdiv:
 20338                           	opt stack 22
 20339                           
 20340                           ; BSR set to: 0
 20341                           ;incstack = 0
 20342  00556A  0E00               	movlw	0
 20343  00556C  6E23               	movwf	___lwdiv@quotient+1,c
 20344  00556E  0E00               	movlw	0
 20345  005570  6E22               	movwf	___lwdiv@quotient,c
 20346  005572  0100               	movlb	0	; () banked
 20347  005574  5162               	movf	___lwdiv@divisor& (0+255),w,b
 20348  005576  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 20349  005578  B4D8               	btfsc	status,2,c
 20350  00557A  D01C               	goto	l1809
 20351                           
 20352                           ; BSR set to: 0
 20353  00557C  0E01               	movlw	1
 20354  00557E  6E21               	movwf	___lwdiv@counter,c
 20355  005580  D004               	goto	l1804
 20356  005582                     
 20357                           ; BSR set to: 0
 20358                           
 20359                           ; BSR set to: 0
 20360  005582  90D8               	bcf	status,0,c
 20361  005584  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 20362  005586  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 20363  005588  2A21               	incf	___lwdiv@counter,f,c
 20364  00558A                     l1804:
 20365                           
 20366                           ; BSR set to: 0
 20367                           
 20368                           ; BSR set to: 0
 20369  00558A  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 20370  00558C  D7FA               	goto	l1805
 20371  00558E                     u12320:
 20372                           
 20373                           ; BSR set to: 0
 20374                           
 20375                           ; BSR set to: 0
 20376                           
 20377                           ; BSR set to: 0
 20378  00558E  90D8               	bcf	status,0,c
 20379  005590  3622               	rlcf	___lwdiv@quotient,f,c
 20380  005592  3623               	rlcf	___lwdiv@quotient+1,f,c
 20381                           
 20382                           ; BSR set to: 0
 20383  005594  5162               	movf	___lwdiv@divisor& (0+255),w,b
 20384  005596  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 20385  005598  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 20386  00559A  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 20387  00559C  A0D8               	btfss	status,0,c
 20388  00559E  D005               	goto	l1808
 20389                           
 20390                           ; BSR set to: 0
 20391  0055A0  5162               	movf	___lwdiv@divisor& (0+255),w,b
 20392  0055A2  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 20393  0055A4  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 20394  0055A6  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 20395                           
 20396                           ; BSR set to: 0
 20397  0055A8  8022               	bsf	___lwdiv@quotient,0,c
 20398  0055AA                     l1808:
 20399                           
 20400                           ; BSR set to: 0
 20401                           
 20402                           ; BSR set to: 0
 20403  0055AA  90D8               	bcf	status,0,c
 20404  0055AC  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 20405  0055AE  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 20406                           
 20407                           ; BSR set to: 0
 20408  0055B0  2E21               	decfsz	___lwdiv@counter,f,c
 20409  0055B2  D7ED               	goto	u12320
 20410  0055B4                     l1809:
 20411                           
 20412                           ; BSR set to: 0
 20413                           
 20414                           ; BSR set to: 0
 20415  0055B4  C022  F060         	movff	___lwdiv@quotient,?___lwdiv
 20416  0055B8  C023  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 20417                           
 20418                           ; BSR set to: 0
 20419  0055BC  0012               	return		;funcret
 20420  0055BE                     __end_of___lwdiv:
 20421                           	opt stack 0
 20422                           tosu	equ	0xFFF
 20423                           tosh	equ	0xFFE
 20424                           tosl	equ	0xFFD
 20425                           pclath	equ	0xFFA
 20426                           tblptru	equ	0xFF8
 20427                           tblptrh	equ	0xFF7
 20428                           tblptrl	equ	0xFF6
 20429                           tablat	equ	0xFF5
 20430                           prodh	equ	0xFF4
 20431                           prodl	equ	0xFF3
 20432                           intcon	equ	0xFF2
 20433                           intcon2	equ	0xFF1
 20434                           intcon3	equ	0xFF0
 20435                           indf0	equ	0xFEF
 20436                           postinc0	equ	0xFEE
 20437                           fsr0h	equ	0xFEA
 20438                           fsr0l	equ	0xFE9
 20439                           wreg	equ	0xFE8
 20440                           indf1	equ	0xFE7
 20441                           postinc1	equ	0xFE6
 20442                           postdec1	equ	0xFE5
 20443                           plusw1	equ	0xFE3
 20444                           fsr1h	equ	0xFE2
 20445                           fsr1l	equ	0xFE1
 20446                           indf2	equ	0xFDF
 20447                           postinc2	equ	0xFDE
 20448                           postdec2	equ	0xFDD
 20449                           plusw2	equ	0xFDB
 20450                           fsr2h	equ	0xFDA
 20451                           fsr2l	equ	0xFD9
 20452                           status	equ	0xFD8
 20453                           
 20454 ;; *************** function _escreve_frase_ram_lcd *****************
 20455 ;; Defined at:
 20456 ;;		line 445 in file "bibliotecas/display_lcd.c"
 20457 ;; Parameters:    Size  Location     Type
 20458 ;;  buffer          2    0[BANK0 ] PTR unsigned char 
 20459 ;;		 -> escreve_inteiro_lcd@texto(7), STR_14(11), STR_13(10), STR_12(16), 
 20460 ;;		 -> STR_11(11), STR_8(9), STR_7(10), STR_6(10), 
 20461 ;;		 -> STR_5(14), STR_4(21), STR_3(15), poligono_ext(198), 
 20462 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 20463 ;; Auto vars:     Size  Location     Type
 20464 ;;		None
 20465 ;; Return value:  Size  Location     Type
 20466 ;;                  1    wreg      void 
 20467 ;; Registers used:
 20468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20469 ;; Tracked objects:
 20470 ;;		On entry : 0/0
 20471 ;;		On exit  : 0/0
 20472 ;;		Unchanged: 0/0
 20473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20474 ;;      Params:         0       2       0       0       0       0       0       0       0
 20475 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20476 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20477 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20478 ;;Total ram usage:        2 bytes
 20479 ;; Hardware stack levels used:    1
 20480 ;; Hardware stack levels required when called:    5
 20481 ;; This function calls:
 20482 ;;		_escreve_caractere_lcd
 20483 ;; This function is called by:
 20484 ;;		_mensagem_inicial
 20485 ;;		_verifica_fence_externo
 20486 ;;		_sdc_reset
 20487 ;;		_sdc_disk_initialize
 20488 ;;		_escreve_inteiro_lcd
 20489 ;;		_sdcard_init
 20490 ;; This function uses a non-reentrant model
 20491 ;;
 20492                           
 20493                           	psect	text79
 20494  0055BE                     __ptext79:
 20495                           	opt stack 0
 20496  0055BE                     _escreve_frase_ram_lcd:
 20497                           	opt stack 24
 20498                           
 20499                           ;display_lcd.c: 447: while(*buffer)
 20500                           
 20501                           ; BSR set to: 0
 20502                           ;incstack = 0
 20503  0055BE  D015               	goto	l652
 20504  0055C0                     
 20505                           ;display_lcd.c: 448: {
 20506                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 20507  0055C0  C060  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 20508  0055C4  C061  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 20509  0055C8  6AF8               	clrf	tblptru,c
 20510  0055CA  0E07               	movlw	(high __ramtop+-1)
 20511  0055CC  64F7               	cpfsgt	tblptrh,c
 20512  0055CE  D003               	bra	u10767
 20513  0055D0  0008               	tblrd		*
 20514  0055D2  50F5               	movf	tablat,w,c
 20515  0055D4  D005               	bra	u10760
 20516  0055D6                     u10767:
 20517  0055D6  CFF6 FFE9          	movff	tblptrl,fsr0l
 20518  0055DA  CFF7 FFEA          	movff	tblptrh,fsr0h
 20519  0055DE  50EF               	movf	indf0,w,c
 20520  0055E0                     u10760:
 20521  0055E0  EC2E  F029         	call	_escreve_caractere_lcd
 20522                           
 20523                           ;display_lcd.c: 450: buffer++;
 20524  0055E4  0100               	movlb	0	; () banked
 20525  0055E6  4B60               	infsnz	escreve_frase_ram_lcd@buffer& (0+255),f,b
 20526  0055E8  2B61               	incf	(escreve_frase_ram_lcd@buffer+1)& (0+255),f,b
 20527  0055EA                     l652:
 20528                           
 20529                           ; BSR set to: 0
 20530  0055EA  C060  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 20531  0055EE  C061  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 20532  0055F2  6AF8               	clrf	tblptru,c
 20533  0055F4  0E07               	movlw	(high __ramtop+-1)
 20534  0055F6  64F7               	cpfsgt	tblptrh,c
 20535  0055F8  D003               	bra	u10777
 20536  0055FA  0008               	tblrd		*
 20537  0055FC  50F5               	movf	tablat,w,c
 20538  0055FE  D005               	bra	u10770
 20539  005600                     u10777:
 20540  005600  CFF6 FFE9          	movff	tblptrl,fsr0l
 20541  005604  CFF7 FFEA          	movff	tblptrh,fsr0h
 20542  005608  50EF               	movf	indf0,w,c
 20543  00560A                     u10770:
 20544  00560A  0900               	iorlw	0
 20545  00560C  B4D8               	btfsc	status,2,c
 20546  00560E  0012               	return	
 20547  005610  D7D7               	goto	l653
 20548  005612                     __end_of_escreve_frase_ram_lcd:
 20549                           	opt stack 0
 20550                           tosu	equ	0xFFF
 20551                           tosh	equ	0xFFE
 20552                           tosl	equ	0xFFD
 20553                           pclath	equ	0xFFA
 20554                           tblptru	equ	0xFF8
 20555                           tblptrh	equ	0xFF7
 20556                           tblptrl	equ	0xFF6
 20557                           tablat	equ	0xFF5
 20558                           prodh	equ	0xFF4
 20559                           prodl	equ	0xFF3
 20560                           intcon	equ	0xFF2
 20561                           intcon2	equ	0xFF1
 20562                           intcon3	equ	0xFF0
 20563                           indf0	equ	0xFEF
 20564                           postinc0	equ	0xFEE
 20565                           fsr0h	equ	0xFEA
 20566                           fsr0l	equ	0xFE9
 20567                           wreg	equ	0xFE8
 20568                           indf1	equ	0xFE7
 20569                           postinc1	equ	0xFE6
 20570                           postdec1	equ	0xFE5
 20571                           plusw1	equ	0xFE3
 20572                           fsr1h	equ	0xFE2
 20573                           fsr1l	equ	0xFE1
 20574                           indf2	equ	0xFDF
 20575                           postinc2	equ	0xFDE
 20576                           postdec2	equ	0xFDD
 20577                           plusw2	equ	0xFDB
 20578                           fsr2h	equ	0xFDA
 20579                           fsr2l	equ	0xFD9
 20580                           status	equ	0xFD8
 20581                           
 20582 ;; *************** function _escreve_caractere_lcd *****************
 20583 ;; Defined at:
 20584 ;;		line 323 in file "bibliotecas/display_lcd.c"
 20585 ;; Parameters:    Size  Location     Type
 20586 ;;  data            1    wreg     unsigned char 
 20587 ;; Auto vars:     Size  Location     Type
 20588 ;;  data            1   34[COMRAM] unsigned char 
 20589 ;; Return value:  Size  Location     Type
 20590 ;;                  1    wreg      void 
 20591 ;; Registers used:
 20592 ;;		wreg, status,2, status,0, cstack
 20593 ;; Tracked objects:
 20594 ;;		On entry : 0/0
 20595 ;;		On exit  : 0/0
 20596 ;;		Unchanged: 0/0
 20597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20598 ;;      Params:         0       0       0       0       0       0       0       0       0
 20599 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20600 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20601 ;;      Totals:         1       0       0       0       0       0       0       0       0
 20602 ;;Total ram usage:        1 bytes
 20603 ;; Hardware stack levels used:    1
 20604 ;; Hardware stack levels required when called:    4
 20605 ;; This function calls:
 20606 ;;		_delay
 20607 ;; This function is called by:
 20608 ;;		_escreve_frase_ram_lcd
 20609 ;;		_escreve_float_lcd
 20610 ;;		_escreve_frase_lcd
 20611 ;;		_cria_caractere_lcd
 20612 ;; This function uses a non-reentrant model
 20613 ;;
 20614                           
 20615                           	psect	text80
 20616  00525C                     __ptext80:
 20617                           	opt stack 0
 20618  00525C                     _escreve_caractere_lcd:
 20619                           	opt stack 24
 20620                           
 20621                           ;incstack = 0
 20622                           ;escreve_caractere_lcd@data stored from wreg
 20623  00525C  6E23               	movwf	escreve_caractere_lcd@data,c
 20624                           
 20625                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 20626  00525E  9483               	bcf	3971,2,c	;volatile
 20627                           
 20628                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 20629  005260  8283               	bsf	3971,1,c	;volatile
 20630                           
 20631                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 20632  005262  9083               	bcf	3971,0,c	;volatile
 20633                           
 20634                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 20635  005264  A823               	btfss	escreve_caractere_lcd@data,4,c
 20636  005266  D002               	goto	l619
 20637  005268  8883               	bsf	3971,4,c	;volatile
 20638  00526A  D001               	goto	l620
 20639  00526C                     l619:
 20640                           
 20641                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 20642  00526C  9883               	bcf	3971,4,c	;volatile
 20643  00526E                     l620:
 20644                           
 20645                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 20646  00526E  AA23               	btfss	escreve_caractere_lcd@data,5,c
 20647  005270  D002               	goto	l621
 20648  005272  8A83               	bsf	3971,5,c	;volatile
 20649  005274  D001               	goto	l622
 20650  005276                     l621:
 20651                           
 20652                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 20653  005276  9A83               	bcf	3971,5,c	;volatile
 20654  005278                     l622:
 20655                           
 20656                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 20657  005278  AC23               	btfss	escreve_caractere_lcd@data,6,c
 20658  00527A  D002               	goto	l623
 20659  00527C  8C83               	bsf	3971,6,c	;volatile
 20660  00527E  D001               	goto	l624
 20661  005280                     l623:
 20662                           
 20663                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 20664  005280  9C83               	bcf	3971,6,c	;volatile
 20665  005282                     l624:
 20666                           
 20667                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 20668  005282  AE23               	btfss	escreve_caractere_lcd@data,7,c
 20669  005284  D002               	goto	l625
 20670  005286  8E83               	bsf	3971,7,c	;volatile
 20671  005288  D001               	goto	l626
 20672  00528A                     l625:
 20673                           
 20674                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 20675  00528A  9E83               	bcf	3971,7,c	;volatile
 20676  00528C                     l626:
 20677                           
 20678                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 20679  00528C  8083               	bsf	3971,0,c	;volatile
 20680                           
 20681                           ;display_lcd.c: 342: delay();
 20682  00528E  ECA6  F02D         	call	_delay	;wreg free
 20683                           
 20684                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 20685  005292  9083               	bcf	3971,0,c	;volatile
 20686                           
 20687                           ;display_lcd.c: 344: delay();
 20688  005294  ECA6  F02D         	call	_delay	;wreg free
 20689                           
 20690                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 20691  005298  A023               	btfss	escreve_caractere_lcd@data,0,c
 20692  00529A  D002               	goto	l627
 20693  00529C  8883               	bsf	3971,4,c	;volatile
 20694  00529E  D001               	goto	l628
 20695  0052A0                     l627:
 20696                           
 20697                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 20698  0052A0  9883               	bcf	3971,4,c	;volatile
 20699  0052A2                     l628:
 20700                           
 20701                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 20702  0052A2  A223               	btfss	escreve_caractere_lcd@data,1,c
 20703  0052A4  D002               	goto	l629
 20704  0052A6  8A83               	bsf	3971,5,c	;volatile
 20705  0052A8  D001               	goto	l630
 20706  0052AA                     l629:
 20707                           
 20708                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 20709  0052AA  9A83               	bcf	3971,5,c	;volatile
 20710  0052AC                     l630:
 20711                           
 20712                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 20713  0052AC  A423               	btfss	escreve_caractere_lcd@data,2,c
 20714  0052AE  D002               	goto	l631
 20715  0052B0  8C83               	bsf	3971,6,c	;volatile
 20716  0052B2  D001               	goto	l632
 20717  0052B4                     l631:
 20718                           
 20719                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 20720  0052B4  9C83               	bcf	3971,6,c	;volatile
 20721  0052B6                     l632:
 20722                           
 20723                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 20724  0052B6  A623               	btfss	escreve_caractere_lcd@data,3,c
 20725  0052B8  D002               	goto	l633
 20726  0052BA  8E83               	bsf	3971,7,c	;volatile
 20727  0052BC  D001               	goto	l634
 20728  0052BE                     l633:
 20729                           
 20730                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 20731  0052BE  9E83               	bcf	3971,7,c	;volatile
 20732  0052C0                     l634:
 20733                           
 20734                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 20735  0052C0  8083               	bsf	3971,0,c	;volatile
 20736                           
 20737                           ;display_lcd.c: 359: delay();
 20738  0052C2  ECA6  F02D         	call	_delay	;wreg free
 20739                           
 20740                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 20741  0052C6  9083               	bcf	3971,0,c	;volatile
 20742                           
 20743                           ;display_lcd.c: 361: delay();
 20744  0052C8  ECA6  F02D         	call	_delay	;wreg free
 20745  0052CC  0012               	return		;funcret
 20746  0052CE                     __end_of_escreve_caractere_lcd:
 20747                           	opt stack 0
 20748                           tosu	equ	0xFFF
 20749                           tosh	equ	0xFFE
 20750                           tosl	equ	0xFFD
 20751                           pclath	equ	0xFFA
 20752                           tblptru	equ	0xFF8
 20753                           tblptrh	equ	0xFF7
 20754                           tblptrl	equ	0xFF6
 20755                           tablat	equ	0xFF5
 20756                           prodh	equ	0xFF4
 20757                           prodl	equ	0xFF3
 20758                           intcon	equ	0xFF2
 20759                           intcon2	equ	0xFF1
 20760                           intcon3	equ	0xFF0
 20761                           indf0	equ	0xFEF
 20762                           postinc0	equ	0xFEE
 20763                           fsr0h	equ	0xFEA
 20764                           fsr0l	equ	0xFE9
 20765                           wreg	equ	0xFE8
 20766                           indf1	equ	0xFE7
 20767                           postinc1	equ	0xFE6
 20768                           postdec1	equ	0xFE5
 20769                           plusw1	equ	0xFE3
 20770                           fsr1h	equ	0xFE2
 20771                           fsr1l	equ	0xFE1
 20772                           indf2	equ	0xFDF
 20773                           postinc2	equ	0xFDE
 20774                           postdec2	equ	0xFDD
 20775                           plusw2	equ	0xFDB
 20776                           fsr2h	equ	0xFDA
 20777                           fsr2l	equ	0xFD9
 20778                           status	equ	0xFD8
 20779                           
 20780 ;; *************** function _escreve_cmd_lcd *****************
 20781 ;; Defined at:
 20782 ;;		line 162 in file "bibliotecas/display_lcd.c"
 20783 ;; Parameters:    Size  Location     Type
 20784 ;;  comando         1    wreg     unsigned char 
 20785 ;; Auto vars:     Size  Location     Type
 20786 ;;  comando         1   34[COMRAM] unsigned char 
 20787 ;; Return value:  Size  Location     Type
 20788 ;;                  1    wreg      void 
 20789 ;; Registers used:
 20790 ;;		wreg, status,2, status,0, cstack
 20791 ;; Tracked objects:
 20792 ;;		On entry : 0/0
 20793 ;;		On exit  : 0/0
 20794 ;;		Unchanged: 0/0
 20795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20796 ;;      Params:         0       0       0       0       0       0       0       0       0
 20797 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20798 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20799 ;;      Totals:         1       0       0       0       0       0       0       0       0
 20800 ;;Total ram usage:        1 bytes
 20801 ;; Hardware stack levels used:    1
 20802 ;; Hardware stack levels required when called:    4
 20803 ;; This function calls:
 20804 ;;		_delay
 20805 ;; This function is called by:
 20806 ;;		_mensagem_inicial
 20807 ;;		_verifica_fence_externo
 20808 ;;		_init_lcd
 20809 ;;		_cria_caractere_lcd
 20810 ;; This function uses a non-reentrant model
 20811 ;;
 20812                           
 20813                           	psect	text81
 20814  004F36                     __ptext81:
 20815                           	opt stack 0
 20816  004F36                     _escreve_cmd_lcd:
 20817                           	opt stack 25
 20818                           
 20819                           ;incstack = 0
 20820                           ;escreve_cmd_lcd@comando stored from wreg
 20821  004F36  6E23               	movwf	escreve_cmd_lcd@comando,c
 20822                           
 20823                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
 20824  004F38  9483               	bcf	3971,2,c	;volatile
 20825                           
 20826                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
 20827  004F3A  9283               	bcf	3971,1,c	;volatile
 20828                           
 20829                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
 20830  004F3C  9083               	bcf	3971,0,c	;volatile
 20831                           
 20832                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
 20833  004F3E  A823               	btfss	escreve_cmd_lcd@comando,4,c
 20834  004F40  D002               	goto	l568
 20835  004F42  8883               	bsf	3971,4,c	;volatile
 20836  004F44  D001               	goto	l569
 20837  004F46                     l568:
 20838                           
 20839                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
 20840  004F46  9883               	bcf	3971,4,c	;volatile
 20841  004F48                     l569:
 20842                           
 20843                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
 20844  004F48  AA23               	btfss	escreve_cmd_lcd@comando,5,c
 20845  004F4A  D002               	goto	l570
 20846  004F4C  8A83               	bsf	3971,5,c	;volatile
 20847  004F4E  D001               	goto	l571
 20848  004F50                     l570:
 20849                           
 20850                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
 20851  004F50  9A83               	bcf	3971,5,c	;volatile
 20852  004F52                     l571:
 20853                           
 20854                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
 20855  004F52  AC23               	btfss	escreve_cmd_lcd@comando,6,c
 20856  004F54  D002               	goto	l572
 20857  004F56  8C83               	bsf	3971,6,c	;volatile
 20858  004F58  D001               	goto	l573
 20859  004F5A                     l572:
 20860                           
 20861                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
 20862  004F5A  9C83               	bcf	3971,6,c	;volatile
 20863  004F5C                     l573:
 20864                           
 20865                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
 20866  004F5C  AE23               	btfss	escreve_cmd_lcd@comando,7,c
 20867  004F5E  D002               	goto	l574
 20868  004F60  8E83               	bsf	3971,7,c	;volatile
 20869  004F62  D001               	goto	l575
 20870  004F64                     l574:
 20871                           
 20872                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
 20873  004F64  9E83               	bcf	3971,7,c	;volatile
 20874  004F66                     l575:
 20875                           
 20876                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
 20877  004F66  8083               	bsf	3971,0,c	;volatile
 20878                           
 20879                           ;display_lcd.c: 181: delay();
 20880  004F68  ECA6  F02D         	call	_delay	;wreg free
 20881                           
 20882                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
 20883  004F6C  9083               	bcf	3971,0,c	;volatile
 20884                           
 20885                           ;display_lcd.c: 183: delay();
 20886  004F6E  ECA6  F02D         	call	_delay	;wreg free
 20887                           
 20888                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
 20889  004F72  A023               	btfss	escreve_cmd_lcd@comando,0,c
 20890  004F74  D002               	goto	l576
 20891  004F76  8883               	bsf	3971,4,c	;volatile
 20892  004F78  D001               	goto	l577
 20893  004F7A                     l576:
 20894                           
 20895                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
 20896  004F7A  9883               	bcf	3971,4,c	;volatile
 20897  004F7C                     l577:
 20898                           
 20899                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
 20900  004F7C  A223               	btfss	escreve_cmd_lcd@comando,1,c
 20901  004F7E  D002               	goto	l578
 20902  004F80  8A83               	bsf	3971,5,c	;volatile
 20903  004F82  D001               	goto	l579
 20904  004F84                     l578:
 20905                           
 20906                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
 20907  004F84  9A83               	bcf	3971,5,c	;volatile
 20908  004F86                     l579:
 20909                           
 20910                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
 20911  004F86  A423               	btfss	escreve_cmd_lcd@comando,2,c
 20912  004F88  D002               	goto	l580
 20913  004F8A  8C83               	bsf	3971,6,c	;volatile
 20914  004F8C  D001               	goto	l581
 20915  004F8E                     l580:
 20916                           
 20917                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
 20918  004F8E  9C83               	bcf	3971,6,c	;volatile
 20919  004F90                     l581:
 20920                           
 20921                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
 20922  004F90  A623               	btfss	escreve_cmd_lcd@comando,3,c
 20923  004F92  D002               	goto	l582
 20924  004F94  8E83               	bsf	3971,7,c	;volatile
 20925  004F96  D001               	goto	l583
 20926  004F98                     l582:
 20927                           
 20928                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
 20929  004F98  9E83               	bcf	3971,7,c	;volatile
 20930  004F9A                     l583:
 20931                           
 20932                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
 20933  004F9A  8083               	bsf	3971,0,c	;volatile
 20934                           
 20935                           ;display_lcd.c: 197: delay();
 20936  004F9C  ECA6  F02D         	call	_delay	;wreg free
 20937                           
 20938                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
 20939  004FA0  9083               	bcf	3971,0,c	;volatile
 20940                           
 20941                           ;display_lcd.c: 199: delay();
 20942  004FA2  ECA6  F02D         	call	_delay	;wreg free
 20943                           
 20944                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
 20945  004FA6  0423               	decf	escreve_cmd_lcd@comando,w,c
 20946  004FA8  B4D8               	btfsc	status,2,c
 20947  004FAA  D008               	goto	u14030
 20948  004FAC  0E02               	movlw	2
 20949  004FAE  1823               	xorwf	escreve_cmd_lcd@comando,w,c
 20950  004FB0  B4D8               	btfsc	status,2,c
 20951  004FB2  D004               	goto	u14030
 20952  004FB4  0E03               	movlw	3
 20953  004FB6  1823               	xorwf	escreve_cmd_lcd@comando,w,c
 20954  004FB8  A4D8               	btfss	status,2,c
 20955  004FBA  0012               	return	
 20956  004FBC                     u14030:
 20957                           
 20958                           ;display_lcd.c: 205: { delay(); }
 20959  004FBC  ECA6  F02D         	call	_delay	;wreg free
 20960  004FC0  0012               	return	
 20961  004FC2                     __end_of_escreve_cmd_lcd:
 20962                           	opt stack 0
 20963                           tosu	equ	0xFFF
 20964                           tosh	equ	0xFFE
 20965                           tosl	equ	0xFFD
 20966                           pclath	equ	0xFFA
 20967                           tblptru	equ	0xFF8
 20968                           tblptrh	equ	0xFF7
 20969                           tblptrl	equ	0xFF6
 20970                           tablat	equ	0xFF5
 20971                           prodh	equ	0xFF4
 20972                           prodl	equ	0xFF3
 20973                           intcon	equ	0xFF2
 20974                           intcon2	equ	0xFF1
 20975                           intcon3	equ	0xFF0
 20976                           indf0	equ	0xFEF
 20977                           postinc0	equ	0xFEE
 20978                           fsr0h	equ	0xFEA
 20979                           fsr0l	equ	0xFE9
 20980                           wreg	equ	0xFE8
 20981                           indf1	equ	0xFE7
 20982                           postinc1	equ	0xFE6
 20983                           postdec1	equ	0xFE5
 20984                           plusw1	equ	0xFE3
 20985                           fsr1h	equ	0xFE2
 20986                           fsr1l	equ	0xFE1
 20987                           indf2	equ	0xFDF
 20988                           postinc2	equ	0xFDE
 20989                           postdec2	equ	0xFDD
 20990                           plusw2	equ	0xFDB
 20991                           fsr2h	equ	0xFDA
 20992                           fsr2l	equ	0xFD9
 20993                           status	equ	0xFD8
 20994                           
 20995 ;; *************** function _delay *****************
 20996 ;; Defined at:
 20997 ;;		line 45 in file "bibliotecas/display_lcd.c"
 20998 ;; Parameters:    Size  Location     Type
 20999 ;;		None
 21000 ;; Auto vars:     Size  Location     Type
 21001 ;;  contador_int    1   33[COMRAM] unsigned char 
 21002 ;;  contador_ext    1   32[COMRAM] unsigned char 
 21003 ;; Return value:  Size  Location     Type
 21004 ;;                  1    wreg      void 
 21005 ;; Registers used:
 21006 ;;		wreg, status,2, status,0
 21007 ;; Tracked objects:
 21008 ;;		On entry : 0/0
 21009 ;;		On exit  : 0/0
 21010 ;;		Unchanged: 0/0
 21011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21012 ;;      Params:         0       0       0       0       0       0       0       0       0
 21013 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21014 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21015 ;;      Totals:         2       0       0       0       0       0       0       0       0
 21016 ;;Total ram usage:        2 bytes
 21017 ;; Hardware stack levels used:    1
 21018 ;; Hardware stack levels required when called:    3
 21019 ;; This function calls:
 21020 ;;		Nothing
 21021 ;; This function is called by:
 21022 ;;		_init_lcd
 21023 ;;		_escreve_cmd_lcd
 21024 ;;		_endereco_cursor_lcd
 21025 ;;		_escreve_caractere_lcd
 21026 ;; This function uses a non-reentrant model
 21027 ;;
 21028                           
 21029                           	psect	text82
 21030  005B4C                     __ptext82:
 21031                           	opt stack 0
 21032  005B4C                     _delay:
 21033                           	opt stack 24
 21034                           
 21035                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 21036                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 21037                           
 21038                           ;incstack = 0
 21039  005B4C  0E00               	movlw	0
 21040  005B4E  6E21               	movwf	delay@contador_ext,c
 21041  005B50                     l8919:
 21042  005B50  0E63               	movlw	99
 21043  005B52  6421               	cpfsgt	delay@contador_ext,c
 21044  005B54  D001               	goto	l558
 21045  005B56  0012               	return	
 21046  005B58                     l558:
 21047                           
 21048                           ;display_lcd.c: 50: {
 21049                           ;display_lcd.c: 51: __nop();
 21050  005B58  F000               	nop	
 21051                           
 21052                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 21053  005B5A  0E00               	movlw	0
 21054  005B5C  6E22               	movwf	delay@contador_int,c
 21055  005B5E                     l8925:
 21056  005B5E  0E31               	movlw	49
 21057  005B60  6422               	cpfsgt	delay@contador_int,c
 21058  005B62  D001               	goto	l560
 21059  005B64  D003               	goto	u10490
 21060  005B66                     l560:
 21061                           
 21062                           ;display_lcd.c: 53: {
 21063                           ;display_lcd.c: 54: __nop();
 21064  005B66  F000               	nop	
 21065  005B68  2A22               	incf	delay@contador_int,f,c
 21066  005B6A  D7F9               	goto	l8925
 21067  005B6C                     u10490:
 21068  005B6C  2A21               	incf	delay@contador_ext,f,c
 21069  005B6E  D7F0               	goto	l8919
 21070  005B70                     __end_of_delay:
 21071                           	opt stack 0
 21072                           tosu	equ	0xFFF
 21073                           tosh	equ	0xFFE
 21074                           tosl	equ	0xFFD
 21075                           pclath	equ	0xFFA
 21076                           tblptru	equ	0xFF8
 21077                           tblptrh	equ	0xFF7
 21078                           tblptrl	equ	0xFF6
 21079                           tablat	equ	0xFF5
 21080                           prodh	equ	0xFF4
 21081                           prodl	equ	0xFF3
 21082                           intcon	equ	0xFF2
 21083                           intcon2	equ	0xFF1
 21084                           intcon3	equ	0xFF0
 21085                           indf0	equ	0xFEF
 21086                           postinc0	equ	0xFEE
 21087                           fsr0h	equ	0xFEA
 21088                           fsr0l	equ	0xFE9
 21089                           wreg	equ	0xFE8
 21090                           indf1	equ	0xFE7
 21091                           postinc1	equ	0xFE6
 21092                           postdec1	equ	0xFE5
 21093                           plusw1	equ	0xFE3
 21094                           fsr1h	equ	0xFE2
 21095                           fsr1l	equ	0xFE1
 21096                           indf2	equ	0xFDF
 21097                           postinc2	equ	0xFDE
 21098                           postdec2	equ	0xFDD
 21099                           plusw2	equ	0xFDB
 21100                           fsr2h	equ	0xFDA
 21101                           fsr2l	equ	0xFD9
 21102                           status	equ	0xFD8
 21103                           
 21104 ;; *************** function _dados_gps_to_sd *****************
 21105 ;; Defined at:
 21106 ;;		line 632 in file "bibliotecas/GPS.c"
 21107 ;; Parameters:    Size  Location     Type
 21108 ;;		None
 21109 ;; Auto vars:     Size  Location     Type
 21110 ;;		None
 21111 ;; Return value:  Size  Location     Type
 21112 ;;                  1    wreg      void 
 21113 ;; Registers used:
 21114 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21115 ;; Tracked objects:
 21116 ;;		On entry : 0/0
 21117 ;;		On exit  : 0/0
 21118 ;;		Unchanged: 0/0
 21119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21120 ;;      Params:         0       0       0       0       0       0       0       0       0
 21121 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21122 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21123 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21124 ;;Total ram usage:        0 bytes
 21125 ;; Hardware stack levels used:    1
 21126 ;; Hardware stack levels required when called:    5
 21127 ;; This function calls:
 21128 ;;		_monta_sd
 21129 ;; This function is called by:
 21130 ;;		_main
 21131 ;; This function uses a non-reentrant model
 21132 ;;
 21133                           
 21134                           	psect	text83
 21135  0058EA                     __ptext83:
 21136                           	opt stack 0
 21137  0058EA                     _dados_gps_to_sd:
 21138                           	opt stack 25
 21139                           
 21140                           ;GPS.c: 634: monta_sd(0, rawTime);
 21141                           
 21142                           ;incstack = 0
 21143  0058EA  0E5A               	movlw	low _rawTime
 21144  0058EC  0100               	movlb	0	; () banked
 21145  0058EE  6F64               	movwf	monta_sd@dado& (0+255),b
 21146  0058F0  0E02               	movlw	high _rawTime
 21147  0058F2  6F65               	movwf	(monta_sd@dado+1)& (0+255),b
 21148  0058F4  0E00               	movlw	0
 21149  0058F6  EC72  F021         	call	_monta_sd
 21150                           
 21151                           ;GPS.c: 635: monta_sd(1, rawDate);
 21152  0058FA  0E35               	movlw	low _rawDate
 21153  0058FC  0100               	movlb	0	; () banked
 21154  0058FE  6F64               	movwf	monta_sd@dado& (0+255),b
 21155  005900  0E01               	movlw	high _rawDate
 21156  005902  6F65               	movwf	(monta_sd@dado+1)& (0+255),b
 21157  005904  0E01               	movlw	1
 21158  005906  EC72  F021         	call	_monta_sd
 21159                           
 21160                           ;GPS.c: 636: monta_sd(2, rawLatitude);
 21161  00590A  0E4D               	movlw	low _rawLatitude
 21162  00590C  0100               	movlb	0	; () banked
 21163  00590E  6F64               	movwf	monta_sd@dado& (0+255),b
 21164  005910  0E02               	movlw	high _rawLatitude
 21165  005912  6F65               	movwf	(monta_sd@dado+1)& (0+255),b
 21166  005914  0E02               	movlw	2
 21167  005916  EC72  F021         	call	_monta_sd
 21168                           
 21169                           ;GPS.c: 637: monta_sd(3, rawLongitude);
 21170  00591A  0E40               	movlw	low _rawLongitude
 21171  00591C  0100               	movlb	0	; () banked
 21172  00591E  6F64               	movwf	monta_sd@dado& (0+255),b
 21173  005920  0E02               	movlw	high _rawLongitude
 21174  005922  6F65               	movwf	(monta_sd@dado+1)& (0+255),b
 21175  005924  0E03               	movlw	3
 21176  005926  EC72  F021         	call	_monta_sd
 21177  00592A  0012               	return	
 21178  00592C                     __end_of_dados_gps_to_sd:
 21179                           	opt stack 0
 21180                           tosu	equ	0xFFF
 21181                           tosh	equ	0xFFE
 21182                           tosl	equ	0xFFD
 21183                           pclath	equ	0xFFA
 21184                           tblptru	equ	0xFF8
 21185                           tblptrh	equ	0xFF7
 21186                           tblptrl	equ	0xFF6
 21187                           tablat	equ	0xFF5
 21188                           prodh	equ	0xFF4
 21189                           prodl	equ	0xFF3
 21190                           intcon	equ	0xFF2
 21191                           intcon2	equ	0xFF1
 21192                           intcon3	equ	0xFF0
 21193                           indf0	equ	0xFEF
 21194                           postinc0	equ	0xFEE
 21195                           fsr0h	equ	0xFEA
 21196                           fsr0l	equ	0xFE9
 21197                           wreg	equ	0xFE8
 21198                           indf1	equ	0xFE7
 21199                           postinc1	equ	0xFE6
 21200                           postdec1	equ	0xFE5
 21201                           plusw1	equ	0xFE3
 21202                           fsr1h	equ	0xFE2
 21203                           fsr1l	equ	0xFE1
 21204                           indf2	equ	0xFDF
 21205                           postinc2	equ	0xFDE
 21206                           postdec2	equ	0xFDD
 21207                           plusw2	equ	0xFDB
 21208                           fsr2h	equ	0xFDA
 21209                           fsr2l	equ	0xFD9
 21210                           status	equ	0xFD8
 21211                           
 21212 ;; *************** function _monta_sd *****************
 21213 ;; Defined at:
 21214 ;;		line 287 in file "bibliotecas/SDCard.c"
 21215 ;; Parameters:    Size  Location     Type
 21216 ;;  index           1    wreg     unsigned char 
 21217 ;;  dado            2    4[BANK0 ] PTR unsigned char 
 21218 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 21219 ;; Auto vars:     Size  Location     Type
 21220 ;;  index           1    6[BANK0 ] unsigned char 
 21221 ;;  i               1    8[BANK0 ] unsigned char 
 21222 ;;  size            1    7[BANK0 ] unsigned char 
 21223 ;; Return value:  Size  Location     Type
 21224 ;;                  1    wreg      void 
 21225 ;; Registers used:
 21226 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21227 ;; Tracked objects:
 21228 ;;		On entry : 0/0
 21229 ;;		On exit  : 0/0
 21230 ;;		Unchanged: 0/0
 21231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21232 ;;      Params:         0       2       0       0       0       0       0       0       0
 21233 ;;      Locals:         0       3       0       0       0       0       0       0       0
 21234 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21235 ;;      Totals:         0       5       0       0       0       0       0       0       0
 21236 ;;Total ram usage:        5 bytes
 21237 ;; Hardware stack levels used:    1
 21238 ;; Hardware stack levels required when called:    4
 21239 ;; This function calls:
 21240 ;;		_strlen
 21241 ;; This function is called by:
 21242 ;;		_dados_gps_to_sd
 21243 ;; This function uses a non-reentrant model
 21244 ;;
 21245                           
 21246                           	psect	text84
 21247  0042E4                     __ptext84:
 21248                           	opt stack 0
 21249  0042E4                     _monta_sd:
 21250                           	opt stack 25
 21251                           
 21252                           ;incstack = 0
 21253                           ;monta_sd@index stored from wreg
 21254  0042E4  0100               	movlb	0	; () banked
 21255  0042E6  6F66               	movwf	monta_sd@index& (0+255),b
 21256                           
 21257                           ;SDCard.c: 289: unsigned char i, size;
 21258                           ;SDCard.c: 290: size = strlen(dado);
 21259  0042E8  C064  F021         	movff	monta_sd@dado,strlen@s
 21260  0042EC  C065  F022         	movff	monta_sd@dado+1,strlen@s+1
 21261  0042F0  ECB6  F02C         	call	_strlen	;wreg free
 21262  0042F4  5021               	movf	?_strlen,w,c
 21263  0042F6  0100               	movlb	0	; () banked
 21264  0042F8  6F67               	movwf	monta_sd@size& (0+255),b
 21265                           
 21266                           ;SDCard.c: 291: switch(index)
 21267  0042FA  D07C               	goto	l320
 21268  0042FC                     
 21269                           ; BSR set to: 0
 21270                           ;SDCard.c: 294: for(i=0; i<6;i++)
 21271                           
 21272                           ; BSR set to: 0
 21273  0042FC  0E00               	movlw	0
 21274  0042FE  6F68               	movwf	monta_sd@i& (0+255),b
 21275  004300                     l11193:
 21276                           
 21277                           ; BSR set to: 0
 21278  004300  0E05               	movlw	5
 21279  004302  6568               	cpfsgt	monta_sd@i& (0+255),b
 21280  004304  D001               	goto	l322
 21281  004306  0012               	return	
 21282  004308                     l322:
 21283                           
 21284                           ; BSR set to: 0
 21285                           ;SDCard.c: 295: {
 21286                           ;SDCard.c: 296: string_dado.hora[i] = *dado;
 21287                           
 21288                           ; BSR set to: 0
 21289  004308  C064  FFD9         	movff	monta_sd@dado,fsr2l
 21290  00430C  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
 21291  004310  5168               	movf	monta_sd@i& (0+255),w,b
 21292  004312  0D01               	mullw	1
 21293  004314  0E07               	movlw	low (_string_dado+7)
 21294  004316  24F3               	addwf	prodl,w,c
 21295  004318  6EE1               	movwf	fsr1l,c
 21296  00431A  0E02               	movlw	high (_string_dado+7)
 21297  00431C  20F4               	addwfc	prodh,w,c
 21298  00431E  6EE2               	movwf	fsr1h,c
 21299  004320  CFDF FFE7          	movff	indf2,indf1
 21300                           
 21301                           ; BSR set to: 0
 21302                           ;SDCard.c: 297: dado++;
 21303  004324  4B64               	infsnz	monta_sd@dado& (0+255),f,b
 21304  004326  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
 21305                           
 21306                           ; BSR set to: 0
 21307  004328  2B68               	incf	monta_sd@i& (0+255),f,b
 21308  00432A  D7EA               	goto	l11193
 21309  00432C                     
 21310                           ; BSR set to: 0
 21311                           ;SDCard.c: 302: for(i=0; i<6;i++)
 21312                           
 21313                           ; BSR set to: 0
 21314  00432C  0E00               	movlw	0
 21315  00432E  6F68               	movwf	monta_sd@i& (0+255),b
 21316  004330                     l11207:
 21317                           
 21318                           ; BSR set to: 0
 21319  004330  0E05               	movlw	5
 21320  004332  6568               	cpfsgt	monta_sd@i& (0+255),b
 21321  004334  D001               	goto	l326
 21322  004336  D012               	goto	u14250
 21323  004338                     l326:
 21324                           
 21325                           ; BSR set to: 0
 21326                           ;SDCard.c: 303: {
 21327                           ;SDCard.c: 304: string_dado.data[i] = *dado;
 21328                           
 21329                           ; BSR set to: 0
 21330  004338  C064  FFD9         	movff	monta_sd@dado,fsr2l
 21331  00433C  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
 21332  004340  5168               	movf	monta_sd@i& (0+255),w,b
 21333  004342  0D01               	mullw	1
 21334  004344  0E00               	movlw	low _string_dado
 21335  004346  24F3               	addwf	prodl,w,c
 21336  004348  6EE1               	movwf	fsr1l,c
 21337  00434A  0E02               	movlw	high _string_dado
 21338  00434C  20F4               	addwfc	prodh,w,c
 21339  00434E  6EE2               	movwf	fsr1h,c
 21340  004350  CFDF FFE7          	movff	indf2,indf1
 21341                           
 21342                           ; BSR set to: 0
 21343                           ;SDCard.c: 305: dado++;
 21344  004354  4B64               	infsnz	monta_sd@dado& (0+255),f,b
 21345  004356  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
 21346                           
 21347                           ; BSR set to: 0
 21348  004358  2B68               	incf	monta_sd@i& (0+255),f,b
 21349  00435A  D7EA               	goto	l11207
 21350  00435C                     u14250:
 21351                           
 21352                           ; BSR set to: 0
 21353                           ;SDCard.c: 308: {
 21354                           ;SDCard.c: 309: data_hoje = 1;
 21355                           
 21356                           ; BSR set to: 0
 21357                           
 21358                           ;SDCard.c: 306: }
 21359                           ;SDCard.c: 307: if(string_dado.data)
 21360  00435C  0E01               	movlw	1
 21361  00435E  6E35               	movwf	_data_hoje,c
 21362                           
 21363                           ; BSR set to: 0
 21364                           ;SDCard.c: 312: }
 21365                           ;SDCard.c: 313: break;
 21366  004360  0012               	return	
 21367  004362                     
 21368                           ; BSR set to: 0
 21369                           ;SDCard.c: 316: for(i=0; i<13;i++)
 21370                           
 21371                           ; BSR set to: 0
 21372  004362  0E00               	movlw	0
 21373  004364  6F68               	movwf	monta_sd@i& (0+255),b
 21374  004366                     l11223:
 21375                           
 21376                           ; BSR set to: 0
 21377  004366  0E0C               	movlw	12
 21378  004368  6568               	cpfsgt	monta_sd@i& (0+255),b
 21379  00436A  D001               	goto	l330
 21380  00436C  0012               	return	
 21381  00436E                     l330:
 21382                           
 21383                           ; BSR set to: 0
 21384                           ;SDCard.c: 317: {
 21385                           ;SDCard.c: 318: string_dado.LAT[i] = *dado;
 21386                           
 21387                           ; BSR set to: 0
 21388  00436E  C064  FFD9         	movff	monta_sd@dado,fsr2l
 21389  004372  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
 21390  004376  5168               	movf	monta_sd@i& (0+255),w,b
 21391  004378  0D01               	mullw	1
 21392  00437A  0E12               	movlw	low (_string_dado+18)
 21393  00437C  24F3               	addwf	prodl,w,c
 21394  00437E  6EE1               	movwf	fsr1l,c
 21395  004380  0E02               	movlw	high (_string_dado+18)
 21396  004382  20F4               	addwfc	prodh,w,c
 21397  004384  6EE2               	movwf	fsr1h,c
 21398  004386  CFDF FFE7          	movff	indf2,indf1
 21399                           
 21400                           ; BSR set to: 0
 21401                           ;SDCard.c: 319: dado++;
 21402  00438A  4B64               	infsnz	monta_sd@dado& (0+255),f,b
 21403  00438C  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
 21404                           
 21405                           ; BSR set to: 0
 21406  00438E  2B68               	incf	monta_sd@i& (0+255),f,b
 21407  004390  D7EA               	goto	l11223
 21408  004392                     
 21409                           ; BSR set to: 0
 21410                           ;SDCard.c: 325: for(i=0; i<13;i++)
 21411                           
 21412                           ; BSR set to: 0
 21413  004392  0E00               	movlw	0
 21414  004394  6F68               	movwf	monta_sd@i& (0+255),b
 21415  004396                     l11237:
 21416                           
 21417                           ; BSR set to: 0
 21418  004396  0E0C               	movlw	12
 21419  004398  6568               	cpfsgt	monta_sd@i& (0+255),b
 21420  00439A  D001               	goto	l333
 21421  00439C  0012               	return	
 21422  00439E                     l333:
 21423                           
 21424                           ; BSR set to: 0
 21425                           ;SDCard.c: 326: {
 21426                           ;SDCard.c: 327: string_dado.LONG[i] = *dado;
 21427                           
 21428                           ; BSR set to: 0
 21429  00439E  C064  FFD9         	movff	monta_sd@dado,fsr2l
 21430  0043A2  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
 21431  0043A6  5168               	movf	monta_sd@i& (0+255),w,b
 21432  0043A8  0D01               	mullw	1
 21433  0043AA  0E1F               	movlw	low (_string_dado+31)
 21434  0043AC  24F3               	addwf	prodl,w,c
 21435  0043AE  6EE1               	movwf	fsr1l,c
 21436  0043B0  0E02               	movlw	high (_string_dado+31)
 21437  0043B2  20F4               	addwfc	prodh,w,c
 21438  0043B4  6EE2               	movwf	fsr1h,c
 21439  0043B6  CFDF FFE7          	movff	indf2,indf1
 21440                           
 21441                           ; BSR set to: 0
 21442                           ;SDCard.c: 328: dado++;
 21443  0043BA  4B64               	infsnz	monta_sd@dado& (0+255),f,b
 21444  0043BC  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
 21445                           
 21446                           ; BSR set to: 0
 21447  0043BE  2B68               	incf	monta_sd@i& (0+255),f,b
 21448  0043C0  D7EA               	goto	l11237
 21449  0043C2                     
 21450                           ; BSR set to: 0
 21451                           ;SDCard.c: 334: for(i=0; i<size;i++)
 21452                           
 21453                           ; BSR set to: 0
 21454  0043C2  0E00               	movlw	0
 21455  0043C4  6F68               	movwf	monta_sd@i& (0+255),b
 21456  0043C6  D011               	goto	l336
 21457  0043C8                     
 21458                           ; BSR set to: 0
 21459                           ;SDCard.c: 335: {
 21460                           ;SDCard.c: 336: string_dado.LONG[i] = *dado;
 21461                           
 21462                           ; BSR set to: 0
 21463  0043C8  C064  FFD9         	movff	monta_sd@dado,fsr2l
 21464  0043CC  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
 21465  0043D0  5168               	movf	monta_sd@i& (0+255),w,b
 21466  0043D2  0D01               	mullw	1
 21467  0043D4  0E1F               	movlw	low (_string_dado+31)
 21468  0043D6  24F3               	addwf	prodl,w,c
 21469  0043D8  6EE1               	movwf	fsr1l,c
 21470  0043DA  0E02               	movlw	high (_string_dado+31)
 21471  0043DC  20F4               	addwfc	prodh,w,c
 21472  0043DE  6EE2               	movwf	fsr1h,c
 21473  0043E0  CFDF FFE7          	movff	indf2,indf1
 21474                           
 21475                           ; BSR set to: 0
 21476                           ;SDCard.c: 337: dado++;
 21477  0043E4  4B64               	infsnz	monta_sd@dado& (0+255),f,b
 21478  0043E6  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
 21479                           
 21480                           ; BSR set to: 0
 21481  0043E8  2B68               	incf	monta_sd@i& (0+255),f,b
 21482  0043EA                     l336:
 21483                           
 21484                           ; BSR set to: 0
 21485                           
 21486                           ; BSR set to: 0
 21487  0043EA  5167               	movf	monta_sd@size& (0+255),w,b
 21488  0043EC  5D68               	subwf	monta_sd@i& (0+255),w,b
 21489  0043EE  B0D8               	btfsc	status,0,c
 21490  0043F0  0012               	return	
 21491  0043F2  D7EA               	goto	l337
 21492  0043F4                     l320:
 21493                           
 21494                           ; BSR set to: 0
 21495                           
 21496                           ; BSR set to: 0
 21497  0043F4  5166               	movf	monta_sd@index& (0+255),w,b
 21498                           
 21499                           ; Switch size 1, requested type "space"
 21500                           ; Number of cases is 5, Range of values is 0 to 4
 21501                           ; switch strategies available:
 21502                           ; Name         Instructions Cycles
 21503                           ; simple_byte           16     9 (average)
 21504                           ;	Chosen strategy is simple_byte
 21505  0043F6  0A00               	xorlw	0	; case 0
 21506  0043F8  B4D8               	btfsc	status,2,c
 21507  0043FA  D780               	goto	l321
 21508  0043FC  0A01               	xorlw	1	; case 1
 21509  0043FE  B4D8               	btfsc	status,2,c
 21510  004400  D795               	goto	l325
 21511  004402  0A03               	xorlw	3	; case 2
 21512  004404  B4D8               	btfsc	status,2,c
 21513  004406  D7AD               	goto	l329
 21514  004408  0A01               	xorlw	1	; case 3
 21515  00440A  B4D8               	btfsc	status,2,c
 21516  00440C  D7C2               	goto	l332
 21517  00440E  0A07               	xorlw	7	; case 4
 21518  004410  A4D8               	btfss	status,2,c
 21519  004412  0012               	return	
 21520  004414  D7D6               	goto	l335
 21521  004416                     __end_of_monta_sd:
 21522                           	opt stack 0
 21523                           tosu	equ	0xFFF
 21524                           tosh	equ	0xFFE
 21525                           tosl	equ	0xFFD
 21526                           pclath	equ	0xFFA
 21527                           tblptru	equ	0xFF8
 21528                           tblptrh	equ	0xFF7
 21529                           tblptrl	equ	0xFF6
 21530                           tablat	equ	0xFF5
 21531                           prodh	equ	0xFF4
 21532                           prodl	equ	0xFF3
 21533                           intcon	equ	0xFF2
 21534                           intcon2	equ	0xFF1
 21535                           intcon3	equ	0xFF0
 21536                           indf0	equ	0xFEF
 21537                           postinc0	equ	0xFEE
 21538                           fsr0h	equ	0xFEA
 21539                           fsr0l	equ	0xFE9
 21540                           wreg	equ	0xFE8
 21541                           indf1	equ	0xFE7
 21542                           postinc1	equ	0xFE6
 21543                           postdec1	equ	0xFE5
 21544                           plusw1	equ	0xFE3
 21545                           fsr1h	equ	0xFE2
 21546                           fsr1l	equ	0xFE1
 21547                           indf2	equ	0xFDF
 21548                           postinc2	equ	0xFDE
 21549                           postdec2	equ	0xFDD
 21550                           plusw2	equ	0xFDB
 21551                           fsr2h	equ	0xFDA
 21552                           fsr2l	equ	0xFD9
 21553                           status	equ	0xFD8
 21554                           
 21555 ;; *************** function _strlen *****************
 21556 ;; Defined at:
 21557 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 21558 ;; Parameters:    Size  Location     Type
 21559 ;;  s               2   32[COMRAM] PTR const unsigned char 
 21560 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 21561 ;; Auto vars:     Size  Location     Type
 21562 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 21563 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 21564 ;; Return value:  Size  Location     Type
 21565 ;;                  2   32[COMRAM] unsigned int 
 21566 ;; Registers used:
 21567 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21568 ;; Tracked objects:
 21569 ;;		On entry : 0/0
 21570 ;;		On exit  : 0/0
 21571 ;;		Unchanged: 0/0
 21572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21573 ;;      Params:         2       0       0       0       0       0       0       0       0
 21574 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21575 ;;      Temps:          0       2       0       0       0       0       0       0       0
 21576 ;;      Totals:         2       4       0       0       0       0       0       0       0
 21577 ;;Total ram usage:        6 bytes
 21578 ;; Hardware stack levels used:    1
 21579 ;; Hardware stack levels required when called:    3
 21580 ;; This function calls:
 21581 ;;		Nothing
 21582 ;; This function is called by:
 21583 ;;		_monta_sd
 21584 ;; This function uses a non-reentrant model
 21585 ;;
 21586                           
 21587                           	psect	text85
 21588  00596C                     __ptext85:
 21589                           	opt stack 0
 21590  00596C                     _strlen:
 21591                           	opt stack 25
 21592                           
 21593                           ; BSR set to: 0
 21594                           ;incstack = 0
 21595  00596C  C021  F062         	movff	strlen@s,strlen@cp
 21596  005970  C022  F063         	movff	strlen@s+1,strlen@cp+1
 21597  005974  D003               	goto	l1975
 21598  005976  0100               	movlb	0	; () banked
 21599  005978  4B62               	infsnz	strlen@cp& (0+255),f,b
 21600  00597A  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 21601  00597C                     l1975:
 21602                           
 21603                           ; BSR set to: 0
 21604  00597C  C062  FFD9         	movff	strlen@cp,fsr2l
 21605  005980  C063  FFDA         	movff	strlen@cp+1,fsr2h
 21606  005984  50DF               	movf	indf2,w,c
 21607  005986  A4D8               	btfss	status,2,c
 21608  005988  D7F6               	goto	l1976
 21609  00598A  C021  F060         	movff	strlen@s,??_strlen
 21610  00598E  C022  F061         	movff	strlen@s+1,??_strlen+1
 21611  005992  0100               	movlb	0	; () banked
 21612  005994  1F60               	comf	??_strlen& (0+255),f,b
 21613  005996  1F61               	comf	(??_strlen+1)& (0+255),f,b
 21614  005998  4B60               	infsnz	??_strlen& (0+255),f,b
 21615  00599A  2B61               	incf	(??_strlen+1)& (0+255),f,b
 21616  00599C  5162               	movf	strlen@cp& (0+255),w,b
 21617  00599E  2560               	addwf	??_strlen& (0+255),w,b
 21618  0059A0  6E21               	movwf	?_strlen,c
 21619  0059A2  5163               	movf	(strlen@cp+1)& (0+255),w,b
 21620  0059A4  2161               	addwfc	(??_strlen+1)& (0+255),w,b
 21621  0059A6  6E22               	movwf	?_strlen+1,c
 21622  0059A8  0012               	return	
 21623  0059AA                     __end_of_strlen:
 21624                           	opt stack 0
 21625                           tosu	equ	0xFFF
 21626                           tosh	equ	0xFFE
 21627                           tosl	equ	0xFFD
 21628                           pclath	equ	0xFFA
 21629                           tblptru	equ	0xFF8
 21630                           tblptrh	equ	0xFF7
 21631                           tblptrl	equ	0xFF6
 21632                           tablat	equ	0xFF5
 21633                           prodh	equ	0xFF4
 21634                           prodl	equ	0xFF3
 21635                           intcon	equ	0xFF2
 21636                           intcon2	equ	0xFF1
 21637                           intcon3	equ	0xFF0
 21638                           indf0	equ	0xFEF
 21639                           postinc0	equ	0xFEE
 21640                           fsr0h	equ	0xFEA
 21641                           fsr0l	equ	0xFE9
 21642                           wreg	equ	0xFE8
 21643                           indf1	equ	0xFE7
 21644                           postinc1	equ	0xFE6
 21645                           postdec1	equ	0xFE5
 21646                           plusw1	equ	0xFE3
 21647                           fsr1h	equ	0xFE2
 21648                           fsr1l	equ	0xFE1
 21649                           indf2	equ	0xFDF
 21650                           postinc2	equ	0xFDE
 21651                           postdec2	equ	0xFDD
 21652                           plusw2	equ	0xFDB
 21653                           fsr2h	equ	0xFDA
 21654                           fsr2l	equ	0xFD9
 21655                           status	equ	0xFD8
 21656                           
 21657 ;; *************** function _isr *****************
 21658 ;; Defined at:
 21659 ;;		line 95 in file "main.c"
 21660 ;; Parameters:    Size  Location     Type
 21661 ;;		None
 21662 ;; Auto vars:     Size  Location     Type
 21663 ;;  cont            1   31[COMRAM] unsigned char 
 21664 ;; Return value:  Size  Location     Type
 21665 ;;                  1    wreg      void 
 21666 ;; Registers used:
 21667 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21668 ;; Tracked objects:
 21669 ;;		On entry : 0/0
 21670 ;;		On exit  : 0/0
 21671 ;;		Unchanged: 0/0
 21672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21673 ;;      Params:         0       0       0       0       0       0       0       0       0
 21674 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21675 ;;      Temps:         20       0       0       0       0       0       0       0       0
 21676 ;;      Totals:        21       0       0       0       0       0       0       0       0
 21677 ;;Total ram usage:       21 bytes
 21678 ;; Hardware stack levels used:    1
 21679 ;; Hardware stack levels required when called:    2
 21680 ;; This function calls:
 21681 ;;		_GPSRead
 21682 ;;		_recebe_dado_uart
 21683 ;;		i2_write_timer_zero
 21684 ;; This function is called by:
 21685 ;;		Interrupt level 2
 21686 ;; This function uses a non-reentrant model
 21687 ;;
 21688                           
 21689                           	psect	intcode
 21690  000008                     __pintcode:
 21691                           	opt stack 0
 21692  000008                     _isr:
 21693                           	opt stack 13
 21694                           
 21695                           ; BSR set to: 0
 21696                           ;incstack = 0
 21697  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21698  00000A  EDD2  F020         	call	int_func,f	;refresh shadow registers
 21699                           tosu	equ	0xFFF
 21700                           tosh	equ	0xFFE
 21701                           tosl	equ	0xFFD
 21702                           pclath	equ	0xFFA
 21703                           tblptru	equ	0xFF8
 21704                           tblptrh	equ	0xFF7
 21705                           tblptrl	equ	0xFF6
 21706                           tablat	equ	0xFF5
 21707                           prodh	equ	0xFF4
 21708                           prodl	equ	0xFF3
 21709                           intcon	equ	0xFF2
 21710                           intcon2	equ	0xFF1
 21711                           intcon3	equ	0xFF0
 21712                           indf0	equ	0xFEF
 21713                           postinc0	equ	0xFEE
 21714                           fsr0h	equ	0xFEA
 21715                           fsr0l	equ	0xFE9
 21716                           wreg	equ	0xFE8
 21717                           indf1	equ	0xFE7
 21718                           postinc1	equ	0xFE6
 21719                           postdec1	equ	0xFE5
 21720                           plusw1	equ	0xFE3
 21721                           fsr1h	equ	0xFE2
 21722                           fsr1l	equ	0xFE1
 21723                           indf2	equ	0xFDF
 21724                           postinc2	equ	0xFDE
 21725                           postdec2	equ	0xFDD
 21726                           plusw2	equ	0xFDB
 21727                           fsr2h	equ	0xFDA
 21728                           fsr2l	equ	0xFD9
 21729                           status	equ	0xFD8
 21730                           
 21731                           	psect	intcode_body
 21732  0041A4                     __pintcode_body:
 21733                           	opt stack 13
 21734  0041A4                     int_func:
 21735                           	opt stack 13
 21736  0041A4  0006               	pop		; remove dummy address from shadow register refresh
 21737  0041A6  CFFA F00E          	movff	pclath,??_isr+2
 21738  0041AA  CFFB F00F          	movff	pclatu,??_isr+3
 21739  0041AE  CFE9 F010          	movff	fsr0l,??_isr+4
 21740  0041B2  CFEA F011          	movff	fsr0h,??_isr+5
 21741  0041B6  CFE1 F012          	movff	fsr1l,??_isr+6
 21742  0041BA  CFE2 F013          	movff	fsr1h,??_isr+7
 21743  0041BE  CFD9 F014          	movff	fsr2l,??_isr+8
 21744  0041C2  CFDA F015          	movff	fsr2h,??_isr+9
 21745  0041C6  CFF3 F016          	movff	prodl,??_isr+10
 21746  0041CA  CFF4 F017          	movff	prodh,??_isr+11
 21747  0041CE  CFF6 F018          	movff	tblptrl,??_isr+12
 21748  0041D2  CFF7 F019          	movff	tblptrh,??_isr+13
 21749  0041D6  CFF8 F01A          	movff	tblptru,??_isr+14
 21750  0041DA  CFF5 F01B          	movff	tablat,??_isr+15
 21751  0041DE  C03F  F01C         	movff	btemp,??_isr+16
 21752  0041E2  C040  F01D         	movff	btemp+1,??_isr+17
 21753  0041E6  C041  F01E         	movff	btemp+2,??_isr+18
 21754  0041EA  C042  F01F         	movff	btemp+3,??_isr+19
 21755                           
 21756                           ;main.c: 97: unsigned char cont;
 21757                           ;main.c: 100: if (PIE1bits.RCIE && PIR1bits.RCIF)
 21758  0041EE  BA9D               	btfsc	3997,5,c	;volatile
 21759  0041F0  AA9E               	btfss	3998,5,c	;volatile
 21760  0041F2  D014               	goto	i2l81
 21761                           
 21762                           ;main.c: 101: {
 21763                           ;main.c: 102: PIR1bits.RCIF = 0;
 21764  0041F4  9A9E               	bcf	3998,5,c	;volatile
 21765                           
 21766                           ;main.c: 103: data_uart_recebe = recebe_dado_uart();
 21767  0041F6  EC1C  F02E         	call	_recebe_dado_uart	;wreg free
 21768  0041FA  6E3B               	movwf	_data_uart_recebe,c
 21769                           
 21770                           ;main.c: 104: GPSRead(data_uart_recebe);
 21771  0041FC  503B               	movf	_data_uart_recebe,w,c
 21772  0041FE  EC7A  F018         	call	_GPSRead
 21773                           
 21774                           ;main.c: 105: PORTBbits.RB2 = !PORTBbits.RB2;
 21775  004202  B481               	btfsc	3969,2,c	;volatile
 21776  004204  D003               	goto	i2u1440_40
 21777  004206  6A0C               	clrf	??_isr& (0+255),c
 21778  004208  2A0C               	incf	??_isr& (0+255),f,c
 21779  00420A  D001               	goto	i2u1441_48
 21780  00420C                     i2u1440_40:
 21781  00420C  6A0C               	clrf	??_isr& (0+255),c
 21782  00420E                     i2u1441_48:
 21783  00420E  460C               	rlncf	??_isr,f,c
 21784  004210  460C               	rlncf	??_isr,f,c
 21785  004212  5081               	movf	3969,w,c	;volatile
 21786  004214  180C               	xorwf	??_isr,w,c
 21787  004216  0BFB               	andlw	-5
 21788  004218  180C               	xorwf	??_isr,w,c
 21789  00421A  6E81               	movwf	3969,c	;volatile
 21790  00421C                     i2l81:
 21791                           
 21792                           ;main.c: 106: }
 21793                           ;main.c: 109: unsigned char cont;
 21794                           ;main.c: 111: if (TMR0IF && T0IF)
 21795  00421C  B4F2               	btfsc	intcon,2,c	;volatile
 21796  00421E  A4F2               	btfss	intcon,2,c	;volatile
 21797  004220  D037               	goto	i2l82
 21798                           
 21799                           ;main.c: 112: {
 21800                           ;main.c: 113: INTCONbits.TMR0IF = 0;
 21801  004222  94F2               	bcf	intcon,2,c	;volatile
 21802                           
 21803                           ;main.c: 114: sinaliza_int_timer = 1;
 21804  004224  0E01               	movlw	1
 21805  004226  0100               	movlb	0	; () banked
 21806  004228  6FFE               	movwf	_sinaliza_int_timer& (0+255),b
 21807                           
 21808                           ;main.c: 116: for(cont= 0; cont<3;cont++)
 21809  00422A  0E00               	movlw	0
 21810  00422C  6E20               	movwf	isr@cont,c
 21811  00422E                     i2l11407:
 21812                           
 21813                           ; BSR set to: 0
 21814  00422E  0E02               	movlw	2
 21815  004230  6420               	cpfsgt	isr@cont,c
 21816  004232  D001               	goto	i2l83
 21817  004234  D019               	goto	i2u1446_40
 21818  004236                     i2l83:
 21819                           
 21820                           ;main.c: 117: {
 21821                           ;main.c: 118: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 21822                           
 21823                           ; BSR set to: 0
 21824  004236  5020               	movf	isr@cont,w,c
 21825  004238  0D02               	mullw	2
 21826  00423A  0E24               	movlw	low _tempo_tarefa
 21827  00423C  24F3               	addwf	prodl,w,c
 21828  00423E  6ED9               	movwf	fsr2l,c
 21829  004240  0E00               	movlw	high _tempo_tarefa
 21830  004242  20F4               	addwfc	prodh,w,c
 21831  004244  6EDA               	movwf	fsr2h,c
 21832  004246  50DE               	movf	postinc2,w,c
 21833  004248  10DE               	iorwf	postinc2,w,c
 21834  00424A  B4D8               	btfsc	status,2,c
 21835  00424C  D00B               	goto	i2l85
 21836  00424E  5020               	movf	isr@cont,w,c
 21837  004250  0D02               	mullw	2
 21838  004252  0E24               	movlw	low _tempo_tarefa
 21839  004254  24F3               	addwf	prodl,w,c
 21840  004256  6ED9               	movwf	fsr2l,c
 21841  004258  0E00               	movlw	high _tempo_tarefa
 21842  00425A  20F4               	addwfc	prodh,w,c
 21843  00425C  6EDA               	movwf	fsr2h,c
 21844  00425E  06DE               	decf	postinc2,f,c
 21845  004260  0E00               	movlw	0
 21846  004262  5ADD               	subwfb	postdec2,f,c
 21847  004264                     i2l85:
 21848  004264  2A20               	incf	isr@cont,f,c
 21849  004266  D7E3               	goto	i2l11407
 21850  004268                     i2u1446_40:
 21851                           
 21852                           ;main.c: 119: }
 21853                           ;main.c: 121: if(tarefa_em_execucao == 1)
 21854  004268  043A               	decf	_tarefa_em_execucao,w,c	;volatile
 21855  00426A  A4D8               	btfss	status,2,c
 21856  00426C  D00B               	goto	i2l87
 21857                           
 21858                           ;main.c: 122: {
 21859                           ;main.c: 123: timeout_tarefa--;
 21860  00426E  0630               	decf	_timeout_tarefa,f,c
 21861  004270  A0D8               	btfss	status,0,c
 21862  004272  0631               	decf	_timeout_tarefa+1,f,c
 21863                           
 21864                           ;main.c: 124: if(!timeout_tarefa)
 21865  004274  5030               	movf	_timeout_tarefa,w,c
 21866  004276  1031               	iorwf	_timeout_tarefa+1,w,c
 21867  004278  A4D8               	btfss	status,2,c
 21868  00427A  D004               	goto	i2l87
 21869                           
 21870                           ;main.c: 125: {
 21871                           ;main.c: 127: PCLATH = 0;
 21872  00427C  0E00               	movlw	0
 21873  00427E  6EFA               	movwf	pclath,c	;volatile
 21874                           
 21875                           ;main.c: 128: PCL = 0;
 21876  004280  0E00               	movlw	0
 21877  004282  6EF9               	movwf	pcl,c	;volatile
 21878  004284                     i2l87:
 21879                           
 21880                           ;main.c: 129: }
 21881                           ;main.c: 130: }
 21882                           ;main.c: 133: write_timer_zero(0x0083);
 21883  004284  0E00               	movlw	0
 21884  004286  6E02               	movwf	i2write_timer_zero@timer0+1,c
 21885  004288  0E83               	movlw	131
 21886  00428A  6E01               	movwf	i2write_timer_zero@timer0,c
 21887  00428C  EC13  F02E         	call	i2_write_timer_zero	;wreg free
 21888  004290                     i2l82:
 21889                           
 21890                           ;main.c: 135: }
 21891                           ;main.c: 137: if (INT0IF && INT0IE)
 21892  004290  B2F2               	btfsc	intcon,1,c	;volatile
 21893  004292  A8F2               	btfss	intcon,4,c	;volatile
 21894  004294  D001               	goto	i2l88
 21895                           
 21896                           ;main.c: 138: {
 21897                           ;main.c: 139: INT0IF = 0;
 21898  004296  92F2               	bcf	intcon,1,c	;volatile
 21899  004298                     i2l88:
 21900  004298  C01F  F042         	movff	??_isr+19,btemp+3
 21901  00429C  C01E  F041         	movff	??_isr+18,btemp+2
 21902  0042A0  C01D  F040         	movff	??_isr+17,btemp+1
 21903  0042A4  C01C  F03F         	movff	??_isr+16,btemp
 21904  0042A8  C01B  FFF5         	movff	??_isr+15,tablat
 21905  0042AC  C01A  FFF8         	movff	??_isr+14,tblptru
 21906  0042B0  C019  FFF7         	movff	??_isr+13,tblptrh
 21907  0042B4  C018  FFF6         	movff	??_isr+12,tblptrl
 21908  0042B8  C017  FFF4         	movff	??_isr+11,prodh
 21909  0042BC  C016  FFF3         	movff	??_isr+10,prodl
 21910  0042C0  C015  FFDA         	movff	??_isr+9,fsr2h
 21911  0042C4  C014  FFD9         	movff	??_isr+8,fsr2l
 21912  0042C8  C013  FFE2         	movff	??_isr+7,fsr1h
 21913  0042CC  C012  FFE1         	movff	??_isr+6,fsr1l
 21914  0042D0  C011  FFEA         	movff	??_isr+5,fsr0h
 21915  0042D4  C010  FFE9         	movff	??_isr+4,fsr0l
 21916  0042D8  C00F  FFFB         	movff	??_isr+3,pclatu
 21917  0042DC  C00E  FFFA         	movff	??_isr+2,pclath
 21918  0042E0  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21919  0042E2  0011               	retfie		f
 21920  0042E4                     __end_of_isr:
 21921                           	opt stack 0
 21922                           tosu	equ	0xFFF
 21923                           tosh	equ	0xFFE
 21924                           tosl	equ	0xFFD
 21925                           pclatu	equ	0xFFB
 21926                           pclath	equ	0xFFA
 21927                           pcl	equ	0xFF9
 21928                           tblptru	equ	0xFF8
 21929                           tblptrh	equ	0xFF7
 21930                           tblptrl	equ	0xFF6
 21931                           tablat	equ	0xFF5
 21932                           prodh	equ	0xFF4
 21933                           prodl	equ	0xFF3
 21934                           intcon	equ	0xFF2
 21935                           intcon2	equ	0xFF1
 21936                           intcon3	equ	0xFF0
 21937                           indf0	equ	0xFEF
 21938                           postinc0	equ	0xFEE
 21939                           fsr0h	equ	0xFEA
 21940                           fsr0l	equ	0xFE9
 21941                           wreg	equ	0xFE8
 21942                           indf1	equ	0xFE7
 21943                           postinc1	equ	0xFE6
 21944                           postdec1	equ	0xFE5
 21945                           plusw1	equ	0xFE3
 21946                           fsr1h	equ	0xFE2
 21947                           fsr1l	equ	0xFE1
 21948                           indf2	equ	0xFDF
 21949                           postinc2	equ	0xFDE
 21950                           postdec2	equ	0xFDD
 21951                           plusw2	equ	0xFDB
 21952                           fsr2h	equ	0xFDA
 21953                           fsr2l	equ	0xFD9
 21954                           status	equ	0xFD8
 21955                           
 21956 ;; *************** function i2_write_timer_zero *****************
 21957 ;; Defined at:
 21958 ;;		line 138 in file "bibliotecas/hardware.c"
 21959 ;; Parameters:    Size  Location     Type
 21960 ;;  timer0          2    0[COMRAM] unsigned int 
 21961 ;; Auto vars:     Size  Location     Type
 21962 ;;  write_timer_    2    2[COMRAM] struct Timers
 21963 ;; Return value:  Size  Location     Type
 21964 ;;                  1    wreg      void 
 21965 ;; Registers used:
 21966 ;;		None
 21967 ;; Tracked objects:
 21968 ;;		On entry : 0/0
 21969 ;;		On exit  : 0/0
 21970 ;;		Unchanged: 0/0
 21971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21972 ;;      Params:         2       0       0       0       0       0       0       0       0
 21973 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21974 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21975 ;;      Totals:         4       0       0       0       0       0       0       0       0
 21976 ;;Total ram usage:        4 bytes
 21977 ;; Hardware stack levels used:    1
 21978 ;; This function calls:
 21979 ;;		Nothing
 21980 ;; This function is called by:
 21981 ;;		_isr
 21982 ;; This function uses a non-reentrant model
 21983 ;;
 21984                           
 21985                           	psect	text87
 21986  005C26                     __ptext87:
 21987                           	opt stack 0
 21988  005C26                     i2_write_timer_zero:
 21989                           	opt stack 14
 21990                           
 21991                           ;hardware.c: 140: union Timers timer;
 21992                           ;hardware.c: 142: timer.lt = timer0;
 21993                           
 21994                           ;incstack = 0
 21995  005C26  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 21996  005C2A  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 21997                           
 21998                           ;hardware.c: 144: TMR0H = timer.bt[1];
 21999  005C2E  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 22000                           
 22001                           ;hardware.c: 145: TMR0L = timer.bt[0];
 22002  005C32  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 22003  005C36  0012               	return		;funcret
 22004  005C38                     __end_ofi2_write_timer_zero:
 22005                           	opt stack 0
 22006                           tosu	equ	0xFFF
 22007                           tosh	equ	0xFFE
 22008                           tosl	equ	0xFFD
 22009                           pclatu	equ	0xFFB
 22010                           pclath	equ	0xFFA
 22011                           pcl	equ	0xFF9
 22012                           tblptru	equ	0xFF8
 22013                           tblptrh	equ	0xFF7
 22014                           tblptrl	equ	0xFF6
 22015                           tablat	equ	0xFF5
 22016                           prodh	equ	0xFF4
 22017                           prodl	equ	0xFF3
 22018                           intcon	equ	0xFF2
 22019                           intcon2	equ	0xFF1
 22020                           intcon3	equ	0xFF0
 22021                           indf0	equ	0xFEF
 22022                           postinc0	equ	0xFEE
 22023                           fsr0h	equ	0xFEA
 22024                           fsr0l	equ	0xFE9
 22025                           wreg	equ	0xFE8
 22026                           indf1	equ	0xFE7
 22027                           postinc1	equ	0xFE6
 22028                           postdec1	equ	0xFE5
 22029                           plusw1	equ	0xFE3
 22030                           fsr1h	equ	0xFE2
 22031                           fsr1l	equ	0xFE1
 22032                           indf2	equ	0xFDF
 22033                           postinc2	equ	0xFDE
 22034                           postdec2	equ	0xFDD
 22035                           plusw2	equ	0xFDB
 22036                           fsr2h	equ	0xFDA
 22037                           fsr2l	equ	0xFD9
 22038                           status	equ	0xFD8
 22039                           
 22040 ;; *************** function _recebe_dado_uart *****************
 22041 ;; Defined at:
 22042 ;;		line 138 in file "bibliotecas/uart.c"
 22043 ;; Parameters:    Size  Location     Type
 22044 ;;		None
 22045 ;; Auto vars:     Size  Location     Type
 22046 ;;		None
 22047 ;; Return value:  Size  Location     Type
 22048 ;;                  1    wreg      unsigned char 
 22049 ;; Registers used:
 22050 ;;		wreg, status,2
 22051 ;; Tracked objects:
 22052 ;;		On entry : 0/0
 22053 ;;		On exit  : 0/0
 22054 ;;		Unchanged: 0/0
 22055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22056 ;;      Params:         0       0       0       0       0       0       0       0       0
 22057 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22058 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22059 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22060 ;;Total ram usage:        0 bytes
 22061 ;; Hardware stack levels used:    1
 22062 ;; This function calls:
 22063 ;;		Nothing
 22064 ;; This function is called by:
 22065 ;;		_isr
 22066 ;;		_recebe_string_uart
 22067 ;; This function uses a non-reentrant model
 22068 ;;
 22069                           
 22070                           	psect	text88
 22071  005C38                     __ptext88:
 22072                           	opt stack 0
 22073  005C38                     _recebe_dado_uart:
 22074                           	opt stack 14
 22075                           
 22076                           ;uart.c: 140: while(RCIF==0);
 22077                           
 22078                           ;incstack = 0
 22079  005C38  AA9E               	btfss	3998,5,c	;volatile
 22080  005C3A  D7FE               	goto	_recebe_dado_uart
 22081                           
 22082                           ;uart.c: 141: if(RCSTAbits.OERR)
 22083  005C3C  A2AB               	btfss	4011,1,c	;volatile
 22084  005C3E  D003               	goto	i2l849
 22085                           
 22086                           ;uart.c: 142: {
 22087                           ;uart.c: 143: CREN = 0;
 22088  005C40  98AB               	bcf	4011,4,c	;volatile
 22089                           
 22090                           ;uart.c: 144: __nop();
 22091  005C42  F000               	nop	
 22092                           
 22093                           ;uart.c: 145: CREN=1;
 22094  005C44  88AB               	bsf	4011,4,c	;volatile
 22095  005C46                     i2l849:
 22096                           
 22097                           ;uart.c: 146: }
 22098                           ;uart.c: 147: return(RCREG);
 22099  005C46  50AE               	movf	4014,w,c	;volatile
 22100  005C48  0012               	return	
 22101  005C4A                     __end_of_recebe_dado_uart:
 22102                           	opt stack 0
 22103                           tosu	equ	0xFFF
 22104                           tosh	equ	0xFFE
 22105                           tosl	equ	0xFFD
 22106                           pclatu	equ	0xFFB
 22107                           pclath	equ	0xFFA
 22108                           pcl	equ	0xFF9
 22109                           tblptru	equ	0xFF8
 22110                           tblptrh	equ	0xFF7
 22111                           tblptrl	equ	0xFF6
 22112                           tablat	equ	0xFF5
 22113                           prodh	equ	0xFF4
 22114                           prodl	equ	0xFF3
 22115                           intcon	equ	0xFF2
 22116                           intcon2	equ	0xFF1
 22117                           intcon3	equ	0xFF0
 22118                           indf0	equ	0xFEF
 22119                           postinc0	equ	0xFEE
 22120                           fsr0h	equ	0xFEA
 22121                           fsr0l	equ	0xFE9
 22122                           wreg	equ	0xFE8
 22123                           indf1	equ	0xFE7
 22124                           postinc1	equ	0xFE6
 22125                           postdec1	equ	0xFE5
 22126                           plusw1	equ	0xFE3
 22127                           fsr1h	equ	0xFE2
 22128                           fsr1l	equ	0xFE1
 22129                           indf2	equ	0xFDF
 22130                           postinc2	equ	0xFDE
 22131                           postdec2	equ	0xFDD
 22132                           plusw2	equ	0xFDB
 22133                           fsr2h	equ	0xFDA
 22134                           fsr2l	equ	0xFD9
 22135                           status	equ	0xFD8
 22136                           
 22137 ;; *************** function _GPSRead *****************
 22138 ;; Defined at:
 22139 ;;		line 468 in file "bibliotecas/GPS.c"
 22140 ;; Parameters:    Size  Location     Type
 22141 ;;  buff            1    wreg     unsigned char 
 22142 ;; Auto vars:     Size  Location     Type
 22143 ;;  buff            1    9[COMRAM] unsigned char 
 22144 ;;  c               1   10[COMRAM] unsigned char 
 22145 ;; Return value:  Size  Location     Type
 22146 ;;                  2    8[None  ] int 
 22147 ;; Registers used:
 22148 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22149 ;; Tracked objects:
 22150 ;;		On entry : 0/0
 22151 ;;		On exit  : 0/0
 22152 ;;		Unchanged: 0/0
 22153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22154 ;;      Params:         0       0       0       0       0       0       0       0       0
 22155 ;;      Locals:         2       0       0       0       0       0       0       0       0
 22156 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22157 ;;      Totals:         2       0       0       0       0       0       0       0       0
 22158 ;;Total ram usage:        2 bytes
 22159 ;; Hardware stack levels used:    1
 22160 ;; Hardware stack levels required when called:    1
 22161 ;; This function calls:
 22162 ;;		_strcmp
 22163 ;;		_stringcpy
 22164 ;; This function is called by:
 22165 ;;		_isr
 22166 ;; This function uses a non-reentrant model
 22167 ;;
 22168                           
 22169                           	psect	text89
 22170  0030F4                     __ptext89:
 22171                           	opt stack 0
 22172  0030F4                     _GPSRead:
 22173                           	opt stack 13
 22174                           
 22175                           ;incstack = 0
 22176                           ;GPSRead@buff stored from wreg
 22177  0030F4  6E0A               	movwf	GPSRead@buff,c
 22178                           
 22179                           ;GPS.c: 470: uint8_t c = buff;
 22180  0030F6  C00A  F00B         	movff	GPSRead@buff,GPSRead@c
 22181                           
 22182                           ;GPS.c: 472: switch(c) {
 22183  0030FA  D13D               	goto	i2l188
 22184  0030FC                     
 22185                           ;GPS.c: 474: if(SentenceType == 1)
 22186  0030FC  0437               	decf	_SentenceType,w,c
 22187  0030FE  A4D8               	btfss	status,2,c
 22188  003100  D004               	goto	i2l190
 22189                           
 22190                           ;GPS.c: 475: GPRMC_ok = 1;
 22191  003102  0E00               	movlw	0
 22192  003104  6E2F               	movwf	_GPRMC_ok+1,c
 22193  003106  0E01               	movlw	1
 22194  003108  6E2E               	movwf	_GPRMC_ok,c
 22195  00310A                     i2l190:
 22196                           
 22197                           ;GPS.c: 476: if(SentenceType == 2)
 22198  00310A  0E02               	movlw	2
 22199  00310C  1837               	xorwf	_SentenceType,w,c
 22200  00310E  A4D8               	btfss	status,2,c
 22201  003110  D004               	goto	i2l191
 22202                           
 22203                           ;GPS.c: 477: GPGGA_ok = 1;
 22204  003112  0E00               	movlw	0
 22205  003114  6E2D               	movwf	_GPGGA_ok+1,c
 22206  003116  0E01               	movlw	1
 22207  003118  6E2C               	movwf	_GPGGA_ok,c
 22208  00311A                     i2l191:
 22209                           
 22210                           ;GPS.c: 478: if(GPRMC_ok && GPGGA_ok) {
 22211  00311A  502E               	movf	_GPRMC_ok,w,c
 22212  00311C  102F               	iorwf	_GPRMC_ok+1,w,c
 22213  00311E  B4D8               	btfsc	status,2,c
 22214  003120  0012               	return	
 22215  003122  502C               	movf	_GPGGA_ok,w,c
 22216  003124  102D               	iorwf	_GPGGA_ok+1,w,c
 22217  003126  B4D8               	btfsc	status,2,c
 22218  003128  0012               	return	
 22219                           
 22220                           ;GPS.c: 479: GPRMC_ok = GPGGA_ok = 0;
 22221  00312A  0E00               	movlw	0
 22222  00312C  6E2D               	movwf	_GPGGA_ok+1,c
 22223  00312E  0E00               	movlw	0
 22224  003130  6E2C               	movwf	_GPGGA_ok,c
 22225  003132  C02C  F02E         	movff	_GPGGA_ok,_GPRMC_ok
 22226  003136  C02D  F02F         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 22227                           
 22228                           ;GPS.c: 481: }
 22229                           ;GPS.c: 482: break;
 22230                           
 22231                           ;GPS.c: 480: return 1;
 22232                           ;	Return value of _GPSRead is never used
 22233  00313A  0012               	return	
 22234  00313C                     
 22235                           ;GPS.c: 485: Term = char_number = 0;
 22236  00313C  0E00               	movlw	0
 22237  00313E  6E38               	movwf	_char_number,c
 22238  003140  C038  F036         	movff	_char_number,_Term
 22239                           
 22240                           ;GPS.c: 486: break;
 22241  003144  0012               	return	
 22242  003146                     
 22243                           ;GPS.c: 489: buffer[char_number] = '\0';
 22244  003146  5038               	movf	_char_number,w,c
 22245  003148  0D01               	mullw	1
 22246  00314A  0E22               	movlw	low _buffer
 22247  00314C  24F3               	addwf	prodl,w,c
 22248  00314E  6ED9               	movwf	fsr2l,c
 22249  003150  0E01               	movlw	high _buffer
 22250  003152  20F4               	addwfc	prodh,w,c
 22251  003154  6EDA               	movwf	fsr2h,c
 22252  003156  0E00               	movlw	0
 22253  003158  6EDF               	movwf	indf2,c
 22254                           
 22255                           ;GPS.c: 490: if(Term == 0) {
 22256  00315A  5036               	movf	_Term,w,c
 22257  00315C  A4D8               	btfss	status,2,c
 22258  00315E  D030               	goto	i2l201
 22259                           
 22260                           ;GPS.c: 491: stringcpy(buffer, sentence, 0);
 22261  003160  0E22               	movlw	low _buffer
 22262  003162  6E01               	movwf	stringcpy@str1,c
 22263  003164  0E01               	movlw	high _buffer
 22264  003166  6E02               	movwf	stringcpy@str1+1,c
 22265  003168  0E48               	movlw	low _sentence
 22266  00316A  6E03               	movwf	stringcpy@str2,c
 22267  00316C  0E01               	movlw	high _sentence
 22268  00316E  6E04               	movwf	stringcpy@str2+1,c
 22269  003170  0E00               	movlw	0
 22270  003172  6E06               	movwf	stringcpy@dir+1,c
 22271  003174  0E00               	movlw	0
 22272  003176  6E05               	movwf	stringcpy@dir,c
 22273  003178  EC32  F02B         	call	_stringcpy	;wreg free
 22274                           
 22275                           ;GPS.c: 492: if(strcmp(sentence, "GPRMC") == 0)
 22276  00317C  0E48               	movlw	low _sentence
 22277  00317E  6E01               	movwf	strcmp@s1,c
 22278  003180  0E01               	movlw	high _sentence
 22279  003182  6E02               	movwf	strcmp@s1+1,c
 22280  003184  0EC0               	movlw	low STR_1
 22281  003186  6E03               	movwf	strcmp@s2,c
 22282  003188  0E08               	movlw	high STR_1
 22283  00318A  6E04               	movwf	strcmp@s2+1,c
 22284  00318C  ECEC  F02B         	call	_strcmp	;wreg free
 22285  003190  5001               	movf	?_strcmp,w,c
 22286  003192  1002               	iorwf	?_strcmp+1,w,c
 22287  003194  A4D8               	btfss	status,2,c
 22288  003196  D002               	goto	i2l198
 22289                           
 22290                           ;GPS.c: 493: SentenceType = 1;
 22291  003198  0E01               	movlw	1
 22292  00319A  D011               	goto	L11
 22293  00319C                     i2l198:
 22294                           
 22295                           ;GPS.c: 494: else if(strcmp(sentence, "GPGGA") == 0)
 22296  00319C  0E48               	movlw	low _sentence
 22297  00319E  6E01               	movwf	strcmp@s1,c
 22298  0031A0  0E01               	movlw	high _sentence
 22299  0031A2  6E02               	movwf	strcmp@s1+1,c
 22300  0031A4  0EBA               	movlw	low STR_2
 22301  0031A6  6E03               	movwf	strcmp@s2,c
 22302  0031A8  0E08               	movlw	high STR_2
 22303  0031AA  6E04               	movwf	strcmp@s2+1,c
 22304  0031AC  ECEC  F02B         	call	_strcmp	;wreg free
 22305  0031B0  5001               	movf	?_strcmp,w,c
 22306  0031B2  1002               	iorwf	?_strcmp+1,w,c
 22307  0031B4  A4D8               	btfss	status,2,c
 22308  0031B6  D002               	goto	i2l200
 22309                           
 22310                           ;GPS.c: 495: SentenceType = 2;
 22311  0031B8  0E02               	movlw	2
 22312  0031BA  D001               	goto	L11
 22313  0031BC                     i2l200:
 22314                           
 22315                           ;GPS.c: 496: else
 22316                           ;GPS.c: 497: SentenceType = 3;
 22317  0031BC  0E03               	movlw	3
 22318  0031BE                     L11:
 22319  0031BE  6E37               	movwf	_SentenceType,c
 22320  0031C0                     i2l201:
 22321                           
 22322                           ;GPS.c: 498: }
 22323                           ;GPS.c: 501: if(Term == 1 && SentenceType == 1) {
 22324  0031C0  0436               	decf	_Term,w,c
 22325  0031C2  A4D8               	btfss	status,2,c
 22326  0031C4  D011               	goto	i2l202
 22327  0031C6  0437               	decf	_SentenceType,w,c
 22328  0031C8  A4D8               	btfss	status,2,c
 22329  0031CA  D00E               	goto	i2l202
 22330                           
 22331                           ;GPS.c: 502: stringcpy(buffer, rawTime, 0);
 22332  0031CC  0E22               	movlw	low _buffer
 22333  0031CE  6E01               	movwf	stringcpy@str1,c
 22334  0031D0  0E01               	movlw	high _buffer
 22335  0031D2  6E02               	movwf	stringcpy@str1+1,c
 22336  0031D4  0E5A               	movlw	low _rawTime
 22337  0031D6  6E03               	movwf	stringcpy@str2,c
 22338  0031D8  0E02               	movlw	high _rawTime
 22339  0031DA  6E04               	movwf	stringcpy@str2+1,c
 22340  0031DC  0E00               	movlw	0
 22341  0031DE  6E06               	movwf	stringcpy@dir+1,c
 22342  0031E0  0E00               	movlw	0
 22343  0031E2  6E05               	movwf	stringcpy@dir,c
 22344  0031E4  EC32  F02B         	call	_stringcpy	;wreg free
 22345  0031E8                     i2l202:
 22346                           
 22347                           ;GPS.c: 503: }
 22348                           ;GPS.c: 506: if((Term == 3) && (SentenceType == 1)) {
 22349  0031E8  0E03               	movlw	3
 22350  0031EA  1836               	xorwf	_Term,w,c
 22351  0031EC  A4D8               	btfss	status,2,c
 22352  0031EE  D011               	goto	i2l203
 22353  0031F0  0437               	decf	_SentenceType,w,c
 22354  0031F2  A4D8               	btfss	status,2,c
 22355  0031F4  D00E               	goto	i2l203
 22356                           
 22357                           ;GPS.c: 507: stringcpy(buffer, rawLatitude, 1);
 22358  0031F6  0E22               	movlw	low _buffer
 22359  0031F8  6E01               	movwf	stringcpy@str1,c
 22360  0031FA  0E01               	movlw	high _buffer
 22361  0031FC  6E02               	movwf	stringcpy@str1+1,c
 22362  0031FE  0E4D               	movlw	low _rawLatitude
 22363  003200  6E03               	movwf	stringcpy@str2,c
 22364  003202  0E02               	movlw	high _rawLatitude
 22365  003204  6E04               	movwf	stringcpy@str2+1,c
 22366  003206  0E00               	movlw	0
 22367  003208  6E06               	movwf	stringcpy@dir+1,c
 22368  00320A  0E01               	movlw	1
 22369  00320C  6E05               	movwf	stringcpy@dir,c
 22370  00320E  EC32  F02B         	call	_stringcpy	;wreg free
 22371  003212                     i2l203:
 22372                           
 22373                           ;GPS.c: 508: }
 22374                           ;GPS.c: 510: if((Term == 4) && (SentenceType == 1)) {
 22375  003212  0E04               	movlw	4
 22376  003214  1836               	xorwf	_Term,w,c
 22377  003216  A4D8               	btfss	status,2,c
 22378  003218  D00D               	goto	i2l206
 22379  00321A  0437               	decf	_SentenceType,w,c
 22380  00321C  A4D8               	btfss	status,2,c
 22381  00321E  D00A               	goto	i2l206
 22382                           
 22383                           ;GPS.c: 511: if(buffer[0] == 'N')
 22384  003220  0E4E               	movlw	78
 22385  003222  0101               	movlb	1	; () banked
 22386  003224  1922               	xorwf	_buffer& (0+255),w,b
 22387  003226  A4D8               	btfss	status,2,c
 22388  003228  D002               	goto	i2l205
 22389                           
 22390                           ; BSR set to: 1
 22391                           ;GPS.c: 512: rawLatitude[0] = '0';
 22392  00322A  0E30               	movlw	48
 22393  00322C  D001               	goto	L12
 22394  00322E                     i2l205:
 22395                           
 22396                           ;GPS.c: 513: else
 22397                           ;GPS.c: 514: rawLatitude[0] = '-';
 22398                           
 22399                           ; BSR set to: 2
 22400  00322E  0E2D               	movlw	45
 22401  003230                     L12:
 22402  003230  0102               	movlb	2	; () banked
 22403  003232  6F4D               	movwf	_rawLatitude& (0+255),b
 22404  003234                     i2l206:
 22405                           
 22406                           ;GPS.c: 515: }
 22407                           ;GPS.c: 518: if((Term == 5) && (SentenceType == 1)) {
 22408                           
 22409                           ; BSR set to: 2
 22410                           
 22411                           ; BSR set to: 2
 22412  003234  0E05               	movlw	5
 22413  003236  1836               	xorwf	_Term,w,c
 22414  003238  A4D8               	btfss	status,2,c
 22415  00323A  D011               	goto	i2l207
 22416  00323C  0437               	decf	_SentenceType,w,c
 22417  00323E  A4D8               	btfss	status,2,c
 22418  003240  D00E               	goto	i2l207
 22419                           
 22420                           ;GPS.c: 519: stringcpy(buffer, rawLongitude, 1);
 22421  003242  0E22               	movlw	low _buffer
 22422  003244  6E01               	movwf	stringcpy@str1,c
 22423  003246  0E01               	movlw	high _buffer
 22424  003248  6E02               	movwf	stringcpy@str1+1,c
 22425  00324A  0E40               	movlw	low _rawLongitude
 22426  00324C  6E03               	movwf	stringcpy@str2,c
 22427  00324E  0E02               	movlw	high _rawLongitude
 22428  003250  6E04               	movwf	stringcpy@str2+1,c
 22429  003252  0E00               	movlw	0
 22430  003254  6E06               	movwf	stringcpy@dir+1,c
 22431  003256  0E01               	movlw	1
 22432  003258  6E05               	movwf	stringcpy@dir,c
 22433  00325A  EC32  F02B         	call	_stringcpy	;wreg free
 22434  00325E                     i2l207:
 22435                           
 22436                           ;GPS.c: 520: }
 22437                           ;GPS.c: 522: if((Term == 6) && (SentenceType == 1)) {
 22438  00325E  0E06               	movlw	6
 22439  003260  1836               	xorwf	_Term,w,c
 22440  003262  A4D8               	btfss	status,2,c
 22441  003264  D00D               	goto	i2l210
 22442  003266  0437               	decf	_SentenceType,w,c
 22443  003268  A4D8               	btfss	status,2,c
 22444  00326A  D00A               	goto	i2l210
 22445                           
 22446                           ;GPS.c: 523: if(buffer[0] == 'E')
 22447  00326C  0E45               	movlw	69
 22448  00326E  0101               	movlb	1	; () banked
 22449  003270  1922               	xorwf	_buffer& (0+255),w,b
 22450  003272  A4D8               	btfss	status,2,c
 22451  003274  D002               	goto	i2l209
 22452                           
 22453                           ; BSR set to: 1
 22454                           ;GPS.c: 524: rawLongitude[0] = '0';
 22455  003276  0E30               	movlw	48
 22456  003278  D001               	goto	L13
 22457  00327A                     i2l209:
 22458                           
 22459                           ;GPS.c: 525: else
 22460                           ;GPS.c: 526: rawLongitude[0] = '-';
 22461                           
 22462                           ; BSR set to: 2
 22463  00327A  0E2D               	movlw	45
 22464  00327C                     L13:
 22465  00327C  0102               	movlb	2	; () banked
 22466  00327E  6F40               	movwf	_rawLongitude& (0+255),b
 22467  003280                     i2l210:
 22468                           
 22469                           ;GPS.c: 527: }
 22470                           ;GPS.c: 530: if((Term == 7) && (SentenceType == 1)) {
 22471                           
 22472                           ; BSR set to: 2
 22473                           
 22474                           ; BSR set to: 2
 22475  003280  0E07               	movlw	7
 22476  003282  1836               	xorwf	_Term,w,c
 22477  003284  A4D8               	btfss	status,2,c
 22478  003286  D011               	goto	i2l211
 22479  003288  0437               	decf	_SentenceType,w,c
 22480  00328A  A4D8               	btfss	status,2,c
 22481  00328C  D00E               	goto	i2l211
 22482                           
 22483                           ;GPS.c: 531: stringcpy(buffer, rawSpeed, 0);
 22484  00328E  0E22               	movlw	low _buffer
 22485  003290  6E01               	movwf	stringcpy@str1,c
 22486  003292  0E01               	movlw	high _buffer
 22487  003294  6E02               	movwf	stringcpy@str1+1,c
 22488  003296  0E42               	movlw	low _rawSpeed
 22489  003298  6E03               	movwf	stringcpy@str2,c
 22490  00329A  0E01               	movlw	high _rawSpeed
 22491  00329C  6E04               	movwf	stringcpy@str2+1,c
 22492  00329E  0E00               	movlw	0
 22493  0032A0  6E06               	movwf	stringcpy@dir+1,c
 22494  0032A2  0E00               	movlw	0
 22495  0032A4  6E05               	movwf	stringcpy@dir,c
 22496  0032A6  EC32  F02B         	call	_stringcpy	;wreg free
 22497  0032AA                     i2l211:
 22498                           
 22499                           ;GPS.c: 532: }
 22500                           ;GPS.c: 535: if((Term == 8) && (SentenceType == 1)) {
 22501  0032AA  0E08               	movlw	8
 22502  0032AC  1836               	xorwf	_Term,w,c
 22503  0032AE  A4D8               	btfss	status,2,c
 22504  0032B0  D011               	goto	i2l212
 22505  0032B2  0437               	decf	_SentenceType,w,c
 22506  0032B4  A4D8               	btfss	status,2,c
 22507  0032B6  D00E               	goto	i2l212
 22508                           
 22509                           ;GPS.c: 536: stringcpy(buffer, rawCourse, 0);
 22510  0032B8  0E22               	movlw	low _buffer
 22511  0032BA  6E01               	movwf	stringcpy@str1,c
 22512  0032BC  0E01               	movlw	high _buffer
 22513  0032BE  6E02               	movwf	stringcpy@str1+1,c
 22514  0032C0  0E3C               	movlw	low _rawCourse
 22515  0032C2  6E03               	movwf	stringcpy@str2,c
 22516  0032C4  0E01               	movlw	high _rawCourse
 22517  0032C6  6E04               	movwf	stringcpy@str2+1,c
 22518  0032C8  0E00               	movlw	0
 22519  0032CA  6E06               	movwf	stringcpy@dir+1,c
 22520  0032CC  0E00               	movlw	0
 22521  0032CE  6E05               	movwf	stringcpy@dir,c
 22522  0032D0  EC32  F02B         	call	_stringcpy	;wreg free
 22523  0032D4                     i2l212:
 22524                           
 22525                           ;GPS.c: 537: }
 22526                           ;GPS.c: 540: if(Term == 9 && SentenceType == 1) {
 22527  0032D4  0E09               	movlw	9
 22528  0032D6  1836               	xorwf	_Term,w,c
 22529  0032D8  A4D8               	btfss	status,2,c
 22530  0032DA  D011               	goto	i2l213
 22531  0032DC  0437               	decf	_SentenceType,w,c
 22532  0032DE  A4D8               	btfss	status,2,c
 22533  0032E0  D00E               	goto	i2l213
 22534                           
 22535                           ;GPS.c: 541: stringcpy(buffer, rawDate, 0);
 22536  0032E2  0E22               	movlw	low _buffer
 22537  0032E4  6E01               	movwf	stringcpy@str1,c
 22538  0032E6  0E01               	movlw	high _buffer
 22539  0032E8  6E02               	movwf	stringcpy@str1+1,c
 22540  0032EA  0E35               	movlw	low _rawDate
 22541  0032EC  6E03               	movwf	stringcpy@str2,c
 22542  0032EE  0E01               	movlw	high _rawDate
 22543  0032F0  6E04               	movwf	stringcpy@str2+1,c
 22544  0032F2  0E00               	movlw	0
 22545  0032F4  6E06               	movwf	stringcpy@dir+1,c
 22546  0032F6  0E00               	movlw	0
 22547  0032F8  6E05               	movwf	stringcpy@dir,c
 22548  0032FA  EC32  F02B         	call	_stringcpy	;wreg free
 22549  0032FE                     i2l213:
 22550                           
 22551                           ;GPS.c: 542: }
 22552                           ;GPS.c: 545: if((Term == 7) && (SentenceType == 2)) {
 22553  0032FE  0E07               	movlw	7
 22554  003300  1836               	xorwf	_Term,w,c
 22555  003302  A4D8               	btfss	status,2,c
 22556  003304  D012               	goto	i2l214
 22557  003306  0E02               	movlw	2
 22558  003308  1837               	xorwf	_SentenceType,w,c
 22559  00330A  A4D8               	btfss	status,2,c
 22560  00330C  D00E               	goto	i2l214
 22561                           
 22562                           ;GPS.c: 546: stringcpy(buffer, rawSatellites, 0);
 22563  00330E  0E22               	movlw	low _buffer
 22564  003310  6E01               	movwf	stringcpy@str1,c
 22565  003312  0E01               	movlw	high _buffer
 22566  003314  6E02               	movwf	stringcpy@str1+1,c
 22567  003316  0E3C               	movlw	low _rawSatellites
 22568  003318  6E03               	movwf	stringcpy@str2,c
 22569  00331A  0E00               	movlw	high _rawSatellites
 22570  00331C  6E04               	movwf	stringcpy@str2+1,c
 22571  00331E  0E00               	movlw	0
 22572  003320  6E06               	movwf	stringcpy@dir+1,c
 22573  003322  0E00               	movlw	0
 22574  003324  6E05               	movwf	stringcpy@dir,c
 22575  003326  EC32  F02B         	call	_stringcpy	;wreg free
 22576  00332A                     i2l214:
 22577                           
 22578                           ;GPS.c: 547: }
 22579                           ;GPS.c: 550: if((Term == 9) && (SentenceType == 2)) {
 22580  00332A  0E09               	movlw	9
 22581  00332C  1836               	xorwf	_Term,w,c
 22582  00332E  A4D8               	btfss	status,2,c
 22583  003330  D012               	goto	i2l215
 22584  003332  0E02               	movlw	2
 22585  003334  1837               	xorwf	_SentenceType,w,c
 22586  003336  A4D8               	btfss	status,2,c
 22587  003338  D00E               	goto	i2l215
 22588                           
 22589                           ;GPS.c: 551: stringcpy(buffer, rawAltitude, 0);
 22590  00333A  0E22               	movlw	low _buffer
 22591  00333C  6E01               	movwf	stringcpy@str1,c
 22592  00333E  0E01               	movlw	high _buffer
 22593  003340  6E02               	movwf	stringcpy@str1+1,c
 22594  003342  0E2E               	movlw	low _rawAltitude
 22595  003344  6E03               	movwf	stringcpy@str2,c
 22596  003346  0E01               	movlw	high _rawAltitude
 22597  003348  6E04               	movwf	stringcpy@str2+1,c
 22598  00334A  0E00               	movlw	0
 22599  00334C  6E06               	movwf	stringcpy@dir+1,c
 22600  00334E  0E00               	movlw	0
 22601  003350  6E05               	movwf	stringcpy@dir,c
 22602  003352  EC32  F02B         	call	_stringcpy	;wreg free
 22603  003356                     i2l215:
 22604                           
 22605                           ;GPS.c: 552: }
 22606                           ;GPS.c: 553: Term++;
 22607  003356  2A36               	incf	_Term,f,c
 22608                           
 22609                           ;GPS.c: 554: char_number = 0;
 22610  003358  0E00               	movlw	0
 22611  00335A  6E38               	movwf	_char_number,c
 22612                           
 22613                           ;GPS.c: 555: break;
 22614  00335C  0012               	return	
 22615  00335E                     
 22616                           ;GPS.c: 558: buffer[char_number++] = c;
 22617  00335E  5038               	movf	_char_number,w,c
 22618  003360  0D01               	mullw	1
 22619  003362  0E22               	movlw	low _buffer
 22620  003364  24F3               	addwf	prodl,w,c
 22621  003366  6ED9               	movwf	fsr2l,c
 22622  003368  0E01               	movlw	high _buffer
 22623  00336A  20F4               	addwfc	prodh,w,c
 22624  00336C  6EDA               	movwf	fsr2h,c
 22625  00336E  C00B  FFDF         	movff	GPSRead@c,indf2
 22626  003372  2A38               	incf	_char_number,f,c
 22627                           
 22628                           ;GPS.c: 560: }
 22629                           
 22630                           ;GPS.c: 559: break;
 22631  003374  0012               	return	
 22632  003376                     i2l188:
 22633  003376  500B               	movf	GPSRead@c,w,c
 22634                           
 22635                           ; Switch size 1, requested type "space"
 22636                           ; Number of cases is 3, Range of values is 13 to 44
 22637                           ; switch strategies available:
 22638                           ; Name         Instructions Cycles
 22639                           ; simple_byte           10     6 (average)
 22640                           ;	Chosen strategy is simple_byte
 22641  003378  0A0D               	xorlw	13	; case 13
 22642  00337A  B4D8               	btfsc	status,2,c
 22643  00337C  D6BF               	goto	i2l189
 22644  00337E  0A29               	xorlw	41	; case 36
 22645  003380  B4D8               	btfsc	status,2,c
 22646  003382  D6DC               	goto	i2l195
 22647  003384  0A08               	xorlw	8	; case 44
 22648  003386  B4D8               	btfsc	status,2,c
 22649  003388  D6DE               	goto	i2l196
 22650  00338A  D7E9               	goto	i2l216
 22651  00338C                     __end_of_GPSRead:
 22652                           	opt stack 0
 22653                           tosu	equ	0xFFF
 22654                           tosh	equ	0xFFE
 22655                           tosl	equ	0xFFD
 22656                           pclatu	equ	0xFFB
 22657                           pclath	equ	0xFFA
 22658                           pcl	equ	0xFF9
 22659                           tblptru	equ	0xFF8
 22660                           tblptrh	equ	0xFF7
 22661                           tblptrl	equ	0xFF6
 22662                           tablat	equ	0xFF5
 22663                           prodh	equ	0xFF4
 22664                           prodl	equ	0xFF3
 22665                           intcon	equ	0xFF2
 22666                           intcon2	equ	0xFF1
 22667                           intcon3	equ	0xFF0
 22668                           indf0	equ	0xFEF
 22669                           postinc0	equ	0xFEE
 22670                           fsr0h	equ	0xFEA
 22671                           fsr0l	equ	0xFE9
 22672                           wreg	equ	0xFE8
 22673                           indf1	equ	0xFE7
 22674                           postinc1	equ	0xFE6
 22675                           postdec1	equ	0xFE5
 22676                           plusw1	equ	0xFE3
 22677                           fsr1h	equ	0xFE2
 22678                           fsr1l	equ	0xFE1
 22679                           indf2	equ	0xFDF
 22680                           postinc2	equ	0xFDE
 22681                           postdec2	equ	0xFDD
 22682                           plusw2	equ	0xFDB
 22683                           fsr2h	equ	0xFDA
 22684                           fsr2l	equ	0xFD9
 22685                           status	equ	0xFD8
 22686                           
 22687 ;; *************** function _stringcpy *****************
 22688 ;; Defined at:
 22689 ;;		line 459 in file "bibliotecas/GPS.c"
 22690 ;; Parameters:    Size  Location     Type
 22691 ;;  str1            2    0[COMRAM] PTR unsigned char 
 22692 ;;		 -> buffer(12), 
 22693 ;;  str2            2    2[COMRAM] PTR unsigned char 
 22694 ;;		 -> rawAltitude(7), rawSatellites(3), rawDate(7), rawCourse(6), 
 22695 ;;		 -> rawSpeed(6), rawLongitude(13), rawLatitude(13), rawTime(11), 
 22696 ;;		 -> sentence(6), 
 22697 ;;  dir             2    4[COMRAM] int 
 22698 ;; Auto vars:     Size  Location     Type
 22699 ;;  chr             1    8[COMRAM] unsigned char 
 22700 ;; Return value:  Size  Location     Type
 22701 ;;                  1    wreg      void 
 22702 ;; Registers used:
 22703 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22704 ;; Tracked objects:
 22705 ;;		On entry : 0/0
 22706 ;;		On exit  : 0/0
 22707 ;;		Unchanged: 0/0
 22708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22709 ;;      Params:         6       0       0       0       0       0       0       0       0
 22710 ;;      Locals:         1       0       0       0       0       0       0       0       0
 22711 ;;      Temps:          2       0       0       0       0       0       0       0       0
 22712 ;;      Totals:         9       0       0       0       0       0       0       0       0
 22713 ;;Total ram usage:        9 bytes
 22714 ;; Hardware stack levels used:    1
 22715 ;; This function calls:
 22716 ;;		Nothing
 22717 ;; This function is called by:
 22718 ;;		_GPSRead
 22719 ;; This function uses a non-reentrant model
 22720 ;;
 22721                           
 22722                           	psect	text90
 22723  005664                     __ptext90:
 22724                           	opt stack 0
 22725  005664                     _stringcpy:
 22726                           	opt stack 13
 22727                           
 22728                           ;GPS.c: 461: uint8_t chr = 0;
 22729                           
 22730                           ;incstack = 0
 22731  005664  0E00               	movlw	0
 22732  005666  6E09               	movwf	stringcpy@chr,c
 22733  005668                     
 22734                           ;GPS.c: 464: str2[chr + dir] = str1[chr];
 22735  005668  5009               	movf	stringcpy@chr,w,c
 22736  00566A  0D01               	mullw	1
 22737  00566C  50F3               	movf	prodl,w,c
 22738  00566E  2401               	addwf	stringcpy@str1,w,c
 22739  005670  6ED9               	movwf	fsr2l,c
 22740  005672  50F4               	movf	prodh,w,c
 22741  005674  2002               	addwfc	stringcpy@str1+1,w,c
 22742  005676  6EDA               	movwf	fsr2h,c
 22743  005678  5009               	movf	stringcpy@chr,w,c
 22744  00567A  2405               	addwf	stringcpy@dir,w,c
 22745  00567C  6E07               	movwf	??_stringcpy& (0+255),c
 22746  00567E  0E00               	movlw	0
 22747  005680  2006               	addwfc	stringcpy@dir+1,w,c
 22748  005682  6E08               	movwf	(??_stringcpy+1)& (0+255),c
 22749  005684  5007               	movf	??_stringcpy,w,c
 22750  005686  2403               	addwf	stringcpy@str2,w,c
 22751  005688  6EE1               	movwf	fsr1l,c
 22752  00568A  5008               	movf	??_stringcpy+1,w,c
 22753  00568C  2004               	addwfc	stringcpy@str2+1,w,c
 22754  00568E  6EE2               	movwf	fsr1h,c
 22755  005690  CFDF FFE7          	movff	indf2,indf1
 22756                           
 22757                           ;GPS.c: 465: } while(str1[chr++] != '\0');
 22758  005694  2A09               	incf	stringcpy@chr,f,c
 22759  005696  0409               	decf	stringcpy@chr,w,c
 22760  005698  6E07               	movwf	??_stringcpy& (0+255),c
 22761  00569A  5007               	movf	??_stringcpy,w,c
 22762  00569C  0D01               	mullw	1
 22763  00569E  50F3               	movf	prodl,w,c
 22764  0056A0  2401               	addwf	stringcpy@str1,w,c
 22765  0056A2  6ED9               	movwf	fsr2l,c
 22766  0056A4  50F4               	movf	prodh,w,c
 22767  0056A6  2002               	addwfc	stringcpy@str1+1,w,c
 22768  0056A8  6EDA               	movwf	fsr2h,c
 22769  0056AA  50DF               	movf	indf2,w,c
 22770  0056AC  B4D8               	btfsc	status,2,c
 22771  0056AE  0012               	return	
 22772  0056B0  D7DB               	goto	i2l183
 22773  0056B2                     __end_of_stringcpy:
 22774                           	opt stack 0
 22775                           tosu	equ	0xFFF
 22776                           tosh	equ	0xFFE
 22777                           tosl	equ	0xFFD
 22778                           pclatu	equ	0xFFB
 22779                           pclath	equ	0xFFA
 22780                           pcl	equ	0xFF9
 22781                           tblptru	equ	0xFF8
 22782                           tblptrh	equ	0xFF7
 22783                           tblptrl	equ	0xFF6
 22784                           tablat	equ	0xFF5
 22785                           prodh	equ	0xFF4
 22786                           prodl	equ	0xFF3
 22787                           intcon	equ	0xFF2
 22788                           intcon2	equ	0xFF1
 22789                           intcon3	equ	0xFF0
 22790                           indf0	equ	0xFEF
 22791                           postinc0	equ	0xFEE
 22792                           fsr0h	equ	0xFEA
 22793                           fsr0l	equ	0xFE9
 22794                           wreg	equ	0xFE8
 22795                           indf1	equ	0xFE7
 22796                           postinc1	equ	0xFE6
 22797                           postdec1	equ	0xFE5
 22798                           plusw1	equ	0xFE3
 22799                           fsr1h	equ	0xFE2
 22800                           fsr1l	equ	0xFE1
 22801                           indf2	equ	0xFDF
 22802                           postinc2	equ	0xFDE
 22803                           postdec2	equ	0xFDD
 22804                           plusw2	equ	0xFDB
 22805                           fsr2h	equ	0xFDA
 22806                           fsr2l	equ	0xFD9
 22807                           status	equ	0xFD8
 22808                           
 22809 ;; *************** function _strcmp *****************
 22810 ;; Defined at:
 22811 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
 22812 ;; Parameters:    Size  Location     Type
 22813 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 22814 ;;		 -> sentence(6), 
 22815 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 22816 ;;		 -> STR_2(6), STR_1(6), 
 22817 ;; Auto vars:     Size  Location     Type
 22818 ;;  r               1    5[COMRAM] char 
 22819 ;; Return value:  Size  Location     Type
 22820 ;;                  2    0[COMRAM] int 
 22821 ;; Registers used:
 22822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 22823 ;; Tracked objects:
 22824 ;;		On entry : 0/0
 22825 ;;		On exit  : 0/0
 22826 ;;		Unchanged: 0/0
 22827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22828 ;;      Params:         4       0       0       0       0       0       0       0       0
 22829 ;;      Locals:         1       0       0       0       0       0       0       0       0
 22830 ;;      Temps:          1       0       0       0       0       0       0       0       0
 22831 ;;      Totals:         6       0       0       0       0       0       0       0       0
 22832 ;;Total ram usage:        6 bytes
 22833 ;; Hardware stack levels used:    1
 22834 ;; This function calls:
 22835 ;;		Nothing
 22836 ;; This function is called by:
 22837 ;;		_GPSRead
 22838 ;; This function uses a non-reentrant model
 22839 ;;
 22840                           
 22841                           	psect	text91
 22842  0057D8                     __ptext91:
 22843                           	opt stack 0
 22844  0057D8                     _strcmp:
 22845                           	opt stack 13
 22846                           
 22847                           ;incstack = 0
 22848  0057D8  D004               	goto	i2l1967
 22849  0057DA  4A01               	infsnz	strcmp@s1,f,c
 22850  0057DC  2A02               	incf	strcmp@s1+1,f,c
 22851  0057DE  4A03               	infsnz	strcmp@s2,f,c
 22852  0057E0  2A04               	incf	strcmp@s2+1,f,c
 22853  0057E2                     i2l1967:
 22854  0057E2  C001  FFD9         	movff	strcmp@s1,fsr2l
 22855  0057E6  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 22856  0057EA  50DF               	movf	indf2,w,c
 22857  0057EC  6E05               	movwf	??_strcmp& (0+255),c
 22858  0057EE  C003  FFF6         	movff	strcmp@s2,tblptrl
 22859  0057F2  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 22860  0057F6                     	if	0	;tblptru may be non-zero
 22861  0057F6                     	endif
 22862  0057F6                     	if	0	;tblptru may be non-zero
 22863  0057F6                     	endif
 22864  0057F6  0008               	tblrd		*
 22865  0057F8  50F5               	movf	tablat,w,c
 22866  0057FA  0800               	sublw	0
 22867  0057FC  2405               	addwf	??_strcmp,w,c
 22868  0057FE  6E06               	movwf	strcmp@r,c
 22869  005800  5006               	movf	strcmp@r,w,c
 22870  005802  A4D8               	btfss	status,2,c
 22871  005804  D007               	goto	i2u927_40
 22872  005806  C001  FFD9         	movff	strcmp@s1,fsr2l
 22873  00580A  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 22874  00580E  50DF               	movf	indf2,w,c
 22875  005810  A4D8               	btfss	status,2,c
 22876  005812  D7E3               	goto	i2l1968
 22877  005814                     i2u927_40:
 22878  005814  5006               	movf	strcmp@r,w,c
 22879  005816  6E01               	movwf	?_strcmp,c
 22880  005818  6A02               	clrf	?_strcmp+1,c
 22881  00581A  BE01               	btfsc	?_strcmp,7,c
 22882  00581C  0602               	decf	?_strcmp+1,f,c
 22883  00581E  0012               	return	
 22884  005820                     __end_of_strcmp:
 22885                           	opt stack 0
 22886                           tosu	equ	0xFFF
 22887                           tosh	equ	0xFFE
 22888                           tosl	equ	0xFFD
 22889                           pclatu	equ	0xFFB
 22890                           pclath	equ	0xFFA
 22891                           pcl	equ	0xFF9
 22892                           tblptru	equ	0xFF8
 22893                           tblptrh	equ	0xFF7
 22894                           tblptrl	equ	0xFF6
 22895                           tablat	equ	0xFF5
 22896                           prodh	equ	0xFF4
 22897                           prodl	equ	0xFF3
 22898                           intcon	equ	0xFF2
 22899                           intcon2	equ	0xFF1
 22900                           intcon3	equ	0xFF0
 22901                           indf0	equ	0xFEF
 22902                           postinc0	equ	0xFEE
 22903                           fsr0h	equ	0xFEA
 22904                           fsr0l	equ	0xFE9
 22905                           wreg	equ	0xFE8
 22906                           indf1	equ	0xFE7
 22907                           postinc1	equ	0xFE6
 22908                           postdec1	equ	0xFE5
 22909                           plusw1	equ	0xFE3
 22910                           fsr1h	equ	0xFE2
 22911                           fsr1l	equ	0xFE1
 22912                           indf2	equ	0xFDF
 22913                           postinc2	equ	0xFDE
 22914                           postdec2	equ	0xFDD
 22915                           plusw2	equ	0xFDB
 22916                           fsr2h	equ	0xFDA
 22917                           fsr2l	equ	0xFD9
 22918                           status	equ	0xFD8
 22919                           tosu	equ	0xFFF
 22920                           tosh	equ	0xFFE
 22921                           tosl	equ	0xFFD
 22922                           pclatu	equ	0xFFB
 22923                           pclath	equ	0xFFA
 22924                           pcl	equ	0xFF9
 22925                           tblptru	equ	0xFF8
 22926                           tblptrh	equ	0xFF7
 22927                           tblptrl	equ	0xFF6
 22928                           tablat	equ	0xFF5
 22929                           prodh	equ	0xFF4
 22930                           prodl	equ	0xFF3
 22931                           intcon	equ	0xFF2
 22932                           intcon2	equ	0xFF1
 22933                           intcon3	equ	0xFF0
 22934                           indf0	equ	0xFEF
 22935                           postinc0	equ	0xFEE
 22936                           fsr0h	equ	0xFEA
 22937                           fsr0l	equ	0xFE9
 22938                           wreg	equ	0xFE8
 22939                           indf1	equ	0xFE7
 22940                           postinc1	equ	0xFE6
 22941                           postdec1	equ	0xFE5
 22942                           plusw1	equ	0xFE3
 22943                           fsr1h	equ	0xFE2
 22944                           fsr1l	equ	0xFE1
 22945                           indf2	equ	0xFDF
 22946                           postinc2	equ	0xFDE
 22947                           postdec2	equ	0xFDD
 22948                           plusw2	equ	0xFDB
 22949                           fsr2h	equ	0xFDA
 22950                           fsr2l	equ	0xFD9
 22951                           status	equ	0xFD8
 22952                           
 22953                           	psect	text92
 22954  000000                     __ptext92:
 22955                           	opt stack 0
 22956                           tosu	equ	0xFFF
 22957                           tosh	equ	0xFFE
 22958                           tosl	equ	0xFFD
 22959                           pclatu	equ	0xFFB
 22960                           pclath	equ	0xFFA
 22961                           pcl	equ	0xFF9
 22962                           tblptru	equ	0xFF8
 22963                           tblptrh	equ	0xFF7
 22964                           tblptrl	equ	0xFF6
 22965                           tablat	equ	0xFF5
 22966                           prodh	equ	0xFF4
 22967                           prodl	equ	0xFF3
 22968                           intcon	equ	0xFF2
 22969                           intcon2	equ	0xFF1
 22970                           intcon3	equ	0xFF0
 22971                           indf0	equ	0xFEF
 22972                           postinc0	equ	0xFEE
 22973                           fsr0h	equ	0xFEA
 22974                           fsr0l	equ	0xFE9
 22975                           wreg	equ	0xFE8
 22976                           indf1	equ	0xFE7
 22977                           postinc1	equ	0xFE6
 22978                           postdec1	equ	0xFE5
 22979                           plusw1	equ	0xFE3
 22980                           fsr1h	equ	0xFE2
 22981                           fsr1l	equ	0xFE1
 22982                           indf2	equ	0xFDF
 22983                           postinc2	equ	0xFDE
 22984                           postdec2	equ	0xFDD
 22985                           plusw2	equ	0xFDB
 22986                           fsr2h	equ	0xFDA
 22987                           fsr2l	equ	0xFD9
 22988                           status	equ	0xFD8
 22989                           
 22990                           	psect	rparam
 22991  0000                     tosu	equ	0xFFF
 22992                           tosh	equ	0xFFE
 22993                           tosl	equ	0xFFD
 22994                           pclatu	equ	0xFFB
 22995                           pclath	equ	0xFFA
 22996                           pcl	equ	0xFF9
 22997                           tblptru	equ	0xFF8
 22998                           tblptrh	equ	0xFF7
 22999                           tblptrl	equ	0xFF6
 23000                           tablat	equ	0xFF5
 23001                           prodh	equ	0xFF4
 23002                           prodl	equ	0xFF3
 23003                           intcon	equ	0xFF2
 23004                           intcon2	equ	0xFF1
 23005                           intcon3	equ	0xFF0
 23006                           indf0	equ	0xFEF
 23007                           postinc0	equ	0xFEE
 23008                           fsr0h	equ	0xFEA
 23009                           fsr0l	equ	0xFE9
 23010                           wreg	equ	0xFE8
 23011                           indf1	equ	0xFE7
 23012                           postinc1	equ	0xFE6
 23013                           postdec1	equ	0xFE5
 23014                           plusw1	equ	0xFE3
 23015                           fsr1h	equ	0xFE2
 23016                           fsr1l	equ	0xFE1
 23017                           indf2	equ	0xFDF
 23018                           postinc2	equ	0xFDE
 23019                           postdec2	equ	0xFDD
 23020                           plusw2	equ	0xFDB
 23021                           fsr2h	equ	0xFDA
 23022                           fsr2l	equ	0xFD9
 23023                           status	equ	0xFD8
 23024                           
 23025                           	psect	temp
 23026  00003F                     btemp:
 23027                           	opt stack 0
 23028  00003F                     	ds	1
 23029  0000                     int$flags	set	btemp
 23030  0000                     wtemp6	set	btemp+1
 23031                           tosu	equ	0xFFF
 23032                           tosh	equ	0xFFE
 23033                           tosl	equ	0xFFD
 23034                           pclatu	equ	0xFFB
 23035                           pclath	equ	0xFFA
 23036                           pcl	equ	0xFF9
 23037                           tblptru	equ	0xFF8
 23038                           tblptrh	equ	0xFF7
 23039                           tblptrl	equ	0xFF6
 23040                           tablat	equ	0xFF5
 23041                           prodh	equ	0xFF4
 23042                           prodl	equ	0xFF3
 23043                           intcon	equ	0xFF2
 23044                           intcon2	equ	0xFF1
 23045                           intcon3	equ	0xFF0
 23046                           indf0	equ	0xFEF
 23047                           postinc0	equ	0xFEE
 23048                           fsr0h	equ	0xFEA
 23049                           fsr0l	equ	0xFE9
 23050                           wreg	equ	0xFE8
 23051                           indf1	equ	0xFE7
 23052                           postinc1	equ	0xFE6
 23053                           postdec1	equ	0xFE5
 23054                           plusw1	equ	0xFE3
 23055                           fsr1h	equ	0xFE2
 23056                           fsr1l	equ	0xFE1
 23057                           indf2	equ	0xFDF
 23058                           postinc2	equ	0xFDE
 23059                           postdec2	equ	0xFDD
 23060                           plusw2	equ	0xFDB
 23061                           fsr2h	equ	0xFDA
 23062                           fsr2l	equ	0xFD9
 23063                           status	equ	0xFD8


Data Sizes:
    Strings     170
    Constant    34
    Data        52
    BSS         959
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      62
    BANK0           160    148     160
    BANK1           256     55     140
    BANK2           256      0     145
    BANK3           256      0     198
    BANK4           256    130     130
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3309	PTR FTN()void  size(2) Largest target is 1
		 -> verifica_fence_externo(), incrementa_metros(), verifica_dados_operacionais(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK2[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK2[11]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[6]), STR_1(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK1[6]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), STR_16(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[11]), 

    fprintf@arp	PTR void [1] size(2) Largest target is 2
		 -> ?_fprintf(BANK1[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 198
		 -> fprintf@s(BANK1[16]), poligono_ext(BANK3[198]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_read@br	PTR unsigned int  size(2) Largest target is 2
		 -> fgets@rc(COMRAM[2]), leitura_sdcard@br(BANK0[2]), 

    f_read@buff	PTR void  size(2) Largest target is 20
		 -> dado_arquivo(BANK2[20]), 

    f_read@rbuff	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK2[20]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_10(CODE[13]), filename(BANK2[15]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_10(CODE[13]), filename(BANK2[15]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_open@dir(BANK1[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    trace_path@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK1[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_10(CODE[13]), filename(BANK2[15]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    S1736_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 198
		 -> escreve_inteiro_lcd@texto(BANK0[7]), STR_14(CODE[11]), STR_13(CODE[10]), STR_12(CODE[16]), 
		 -> STR_11(CODE[11]), STR_8(CODE[9]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[14]), STR_4(CODE[21]), STR_3(CODE[15]), poligono_ext(BANK3[198]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK2[11]), 

    escrita_sdcard@point2	PTR unsigned char  size(2) Largest target is 198
		 -> poligono_ext(BANK3[198]), 

    escrita_sdcard@point1	PTR unsigned char  size(2) Largest target is 198
		 -> poligono_ext(BANK3[198]), 

    S472_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S472_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__Longitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK2[13]), 

    sp__Latitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK2[13]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK1[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 13
		 -> rawAltitude(BANK1[7]), rawSatellites(COMRAM[3]), rawDate(BANK1[7]), rawCourse(BANK1[6]), 
		 -> rawSpeed(BANK1[6]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK2[11]), 
		 -> sentence(BANK1[6]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK2[20]), 

    verifica_fence_externo@point_buff	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK2[20]), 

    p_tarefas	PTR FTN()void [3] size(2) Largest target is 1
		 -> verifica_fence_externo(), incrementa_metros(), verifica_dados_operacionais(), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_escreve_cmd_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _verifica_fence_externo->_escreve_cmd_lcd
    _leitura_sdcard->_f_mount
    _f_read->_disk_read
    _escrita_sdcard->_f_mount
    _inicializa_uart->_configura_baudrate_uart
    _f_write->_disk_write
    _trace_path->_memcmp
    _make_dirfile->_memset
    _reserve_direntry->_disk_write
    _auto_mount->_disk_status
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _check_fs->_disk_read
    _check_fs->_memcmp
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _sync->_disk_ioctl
    _move_window->_disk_read
    _move_window->_disk_write
    _sdc_disk_write->_dummy_clocks
    _sdc_disk_write->_escreve_SPI
    _sdc_disk_read->_dummy_clocks
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_escreve_SPI
    _utoa->___lwdiv
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _escreve_cmd_lcd->_delay
    _monta_sd->_strlen

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _mensagem_inicial->_posicao_cursor_lcd
    _config_timer_zero->_write_timer_zero
    _leitura_sdcard->_f_open
    _f_read->_get_cluster
    _escrita_sdcard->_fprintf
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _fprintf->_fputs
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_trace_path
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _clust2sect->___lmul
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _validate->_disk_status
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _command->_wait_ready
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _utoa->___lwmod
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_escalonador
    _escalonador->_verifica_fence_externo
    _verifica_fence_externo->_escrita_sdcard
    _leitura_sdcard->_f_open
    _escrita_sdcard->_fprintf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    _escalonador->_verifica_fence_externo

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  701506
                    _dados_gps_to_sd
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    4753
                                              3 BANK0     36    36      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                              0 BANK0      1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     247
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     247
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     247
                                             32 COMRAM     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  693465
                                             52 BANK1      3     3      0
                  _incrementa_metros *
        _verifica_dados_operacionais *
             _verifica_fence_externo *
 ---------------------------------------------------------------------------------
 (2) _verifica_fence_externo                             141   141      0  693242
                                             47 BANK1      5     5      0
                                              0 BANK4    130   130      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                     _escrita_sdcard
                     _leitura_sdcard
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _leitura_sdcard                                       7     5      2  270171
                                            127 BANK0      6     4      2
                        _desliga_SPI
                       _desliga_uart
                            _f_close
                            _f_mount
                             _f_open
                             _f_read
                     _inicializa_SPI
                    _inicializa_uart
 ---------------------------------------------------------------------------------
 (4) _f_read                                              33    25      8   41976
                                             82 BANK0     33    25      8
                         _clust2sect
                          _disk_read
                        _get_cluster
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (3) _escrita_sdcard                                       6     2      4  410193
                                             43 BANK1      4     0      4
                        _desliga_SPI
                       _desliga_uart
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                     _inicializa_SPI
                    _inicializa_uart
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             32 COMRAM     2     2      0
                                             14 BANK0     12     8      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _fprintf                                             45    37      8  127472
                                            146 BANK0      2     2      0
                                              0 BANK1     43    35      8
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (5) _fputs                                                7     3      4   61571
                                            139 BANK0      7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                7     3      4   61078
                                            132 BANK0      7     3      4
                            _f_write
 ---------------------------------------------------------------------------------
 (7) _f_write                                             33    25      8   60266
                                             99 BANK0     33    25      8
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     412
                                             32 COMRAM     1     1      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) _f_open                                              44    39      5  196246
                                            118 BANK0      9     4      5
                                              0 BANK1     35    35      0
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (5) _trace_path                                          23    15      8   39138
                                             95 BANK0     23    15      8
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _make_dirfile                                        13     9      4    2753
                                              6 BANK0     13     9      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _reserve_direntry                                    18    14      4   76291
                                             99 BANK0     18    14      4
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _next_dir_entry                                      13    11      2   18463
                                             82 BANK0     13    11      2
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (5) _clust2sect                                          11     7      4    1487
                                             32 COMRAM     2     2      0
                                             12 BANK0      9     5      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _remove_chain                                         8     6      2   32953
                                             85 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              11     5      6    1018
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (5) _auto_mount                                          40    37      3   28343
                                             50 BANK0     40    37      3
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (7) _memset                                               8     2      6    1217
                                             32 COMRAM     2     2      0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (6) _disk_initialize                                      4     4      0   16616
                                             32 BANK0      2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (7) _sdc_disk_initialize                                 13    13      0   16486
                                             19 BANK0     13    13      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (8) _sdc_reset                                           20    20      0    7809
                                             12 BANK0      7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    2397
                                              0 BANK0      3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             34 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (6) _check_fs                                             8     4      4    6655
                                             42 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (6) _memcmp                                               9     3      6     701
                                             32 COMRAM     3     3      0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     516
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) _f_mount                                              3     1      2     394
                                             32 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _f_lseek                                             29    23      6   54330
                                             99 BANK0     29    23      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (6) _create_chain                                        14    12      2   34016
                                             85 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (7) _put_cluster                                         22    18      4   16433
                                             63 BANK0     22    18      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _get_cluster                                         19    17      2   16142
                                             63 BANK0     19    17      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1102
                                             32 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     901
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _f_close                                              3     1      2   30391
                                             74 BANK0      3     1      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (5) _f_sync                                               9     7      2   30018
                                             65 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (5) _validate                                             6     2      4    1250
                                              4 BANK0      6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (6) _disk_status                                          5     5      0     226
                                             34 COMRAM     1     1      0
                                              0 BANK0      4     4      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (7) _sdc_disk_status                                      4     4      0      34
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _sync                                                 2     2      0   14169
                                             63 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _move_window                                         21    17      4   13831
                                             42 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (6) _disk_write                                          12     5      7    6078
                                             34 COMRAM     1     1      0
                                             31 BANK0     11     4      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (7) _sdc_disk_write                                      19    12      7    4614
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (6) _disk_read                                           12     5      7    5647
                                             34 COMRAM     1     1      0
                                             31 BANK0     11     4      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (7) _sdc_disk_read                                       24    17      7    4450
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (8) _response                                             1     1      0      34
                                             32 COMRAM     1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (8) _proceed                                              0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (8) _command                                              7     2      5    3403
                                              5 BANK0      7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (9) _wait_ready                                          15    15      0      99
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (9) _escreve_SPI                                          2     2      0      34
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _dummy_clocks                                         5     5      0      68
                                             32 COMRAM     2     2      0
                                              0 BANK0      3     3      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (9) _leitura_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _disk_ioctl                                           7     4      3     304
                                             32 COMRAM     3     0      3
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _get_fattime                                         51    47      4     201
                                              0 BANK0     51    47      4
 ---------------------------------------------------------------------------------
 (4) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                  9     7      2    6485
                                             21 BANK0      9     7      2
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 8     2      6    3936
                                             13 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     3      6    3163
                                              4 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4    1132
                                             32 COMRAM     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4    1321
                                             32 COMRAM     3     3      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    1799
                                              0 BANK0      2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             34 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             34 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _verifica_dados_operacionais                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _incrementa_metros                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dados_gps_to_sd                                      0     0      0    1310
                           _monta_sd
 ---------------------------------------------------------------------------------
 (2) _monta_sd                                             5     3      2    1310
                                              4 BANK0      5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     220
                                             32 COMRAM     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                21    21      0    2930
                                             11 COMRAM    21    21      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (17) i2_write_timer_zero                                  4     2      2     131
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (17) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _GPSRead                                             2     2      0    2669
                                              9 COMRAM     2     2      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (18) _stringcpy                                           9     3      6    2207
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (18) _strcmp                                              6     2      4     395
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dados_gps_to_sd
     _monta_sd
       _strlen
   _escalonador
     _incrementa_metros *
     _verifica_dados_operacionais *
     _verifica_fence_externo *
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _escrita_sdcard
         _desliga_SPI
         _desliga_uart
         _f_close
           _f_sync
             _get_fattime
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _sync
               _disk_ioctl
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _f_lseek
           ___lldiv
           _create_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _validate
             _disk_status
               _sdc_disk_status
         _f_mount
         _f_open
           _auto_mount
             ___lldiv
             ___lmul
             _check_fs
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcmp
             _disk_initialize
               _sdc_disk_initialize
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
                 _sdc_reset
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _disk_status
               _sdc_disk_status
             _memset
           _get_fattime
           _memcpy
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _remove_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _reserve_direntry
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
           _trace_path
             _clust2sect
               ___lmul
             _make_dirfile
               _memset
             _memcmp
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
         _fprintf
           ___lldiv
           ___llmod
           ___wmul
           _fputc
             _f_write
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcpy
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
           _fputs
             _fputc
               _f_write
                 _clust2sect
                   ___lmul
                 _create_chain
                   _get_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                   _put_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcpy
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                 _validate
                   _disk_status
                     _sdc_disk_status
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
       _leitura_sdcard
         _desliga_SPI
         _desliga_uart
         _f_close
           _f_sync
             _get_fattime
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _sync
               _disk_ioctl
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _f_mount
         _f_open
           _auto_mount
             ___lldiv
             ___lmul
             _check_fs
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcmp
             _disk_initialize
               _sdc_disk_initialize
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
                 _sdc_reset
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _disk_status
               _sdc_disk_status
             _memset
           _get_fattime
           _memcpy
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _remove_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _reserve_direntry
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
           _trace_path
             _clust2sect
               ___lmul
             _make_dirfile
               _memset
             _memcmp
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
         _f_read
           _clust2sect
             ___lmul
           _disk_read
             _sdc_disk_read
               _command
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _wait_ready
                   _leitura_SPI
               _dummy_clocks
                 _leitura_SPI
               _proceed
                 _escreve_SPI
               _response
                 _leitura_SPI
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _memcpy
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _validate
             _disk_status
               _sdc_disk_status
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100     82      82      13       50.8%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C6      11       77.3%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      91       9       56.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     37      8C       7       54.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     94      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      3E       1       66.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     343      20        0.0%
DATA                 0      0     563       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 12 14:33:47 2022

                   next_dir_entry@idx 00BD              __end_of_mensagem_inicial 515A  
                 next_dir_entry@clust 00BB                           _SSPSTATbits 000FC7  
                    ??_init_interrupt 0021                                    l95 4B0A  
                                  l97 4B9C          __size_of_escreve_inteiro_lcd 0040  
                                  _fs 0482                   ___wmul@multiplicand 0062  
                         _put_cluster 338C                      disk_write@sector 0081  
                        ?_escalonador 0001                        create_chain@fs 00BB  
                    disk_write@result 0087                      ?_inicializa_uart 0001  
                                 l103 5A38                                   l104 5A48  
                                 l121 1D7E                                   l130 2024  
                                 l122 1D5C                                   l124 208C  
                                 l132 1F88                                   l125 1DBE  
                                 l310 4E0E                                   l134 205C  
                                 l135 208A                                   l127 1F22  
                                 l320 43F4                                   l128 1E24  
                                 l321 42FC                                   l330 436E  
                                 l322 4308                                   l332 4392  
                                 l412 57BE                                   l420 59CC  
                                 l316 5036                                   l333 439E  
                                 l325 432C                                   l413 5796  
                                 l421 59B0                                   l326 4338  
                                 l510 4124                                   l335 43C2  
                                 l511 411C                                   l431 4E52  
                                 l415 57A6                                   l423 59BC  
                                 l336 43EA                                   l280 58C8  
                                 l504 40E2                                   l432 4E8C  
                                 l440 50B6                                   l416 57BA  
                                 l600 531E                                   l424 59C8  
                                 l337 43C8                                   l329 4362  
                                 l513 4150                                   l505 40CE  
                                 l521 3918                                   l601 5320  
                                 l514 4138                                   l522 3864  
                                 l602 5328                                   l610 5250  
                                 l531 3996                                   l603 532A  
                                 l611 51FC                                   l620 526E  
                                 l444 5AE6                                   l516 418A  
                                 l508 4108                                   l428 4E90  
                                 l524 38B8                                   l436 50BA  
                                 l612 520C                                   l452 4BBA  
                                 l621 5276                                   l445 5ADA  
                                 l429 4E20                                   l533 39DE  
                                 l437 5052                                   l613 521C  
                                 l453 4BD8                                   l630 52AC  
                                 l622 5278                                   l526 38E8  
                                 l614 522C                                   l470 2918  
                                 l462 28C2                                   l631 52B4  
                                 l623 5280                                   l447 5ADE  
                                 l279 58D6                                   l375 5C20  
                                 l439 5084                                   l607 5256  
                                 l471 2922                                   l463 28D8  
                                 l560 5B66                                   l632 52B6  
                                 l624 5282                                   l448 5AE2  
                                 l288 59F8                                   l296 53B6  
                                 l608 5234                                   l472 294C  
                                 l633 52BE                                   l625 528A  
                                 l369 5C82                                   l297 53B0  
                                 l529 3962                                   l609 51F0  
                                 l457 4C3A                                   l465 28E4  
                                 l570 4F50                                   l634 52C0  
                                 l626 528C                                   l538 5BEC  
                                 l571 4F52                                   l627 52A0  
                                 l619 526C                                   l580 4F8E  
                                 l572 4F5A                                   l628 52A2  
                                 l652 55EA                                   l900 3C34  
                                 l581 4F90                                   l573 4F5C  
                                 l629 52AA                                   l653 55C0  
                                 l469 2A72                                   l485 2A62  
                                 l477 29D6                                   l558 5B58  
                                 l582 4F98                                   l574 4F64  
                                 l590 52E0                                   l494 2B30  
                                 l583 4F9A                                   l575 4F66  
                                 l903 3CBA                                   l911 5510  
                                 l591 52E2                                   l495 2B5A  
                                 l823 452E                                   l576 4F7A  
                                 l568 4F46                                   l592 52EA  
                                 l488 2AA2                                   l577 4F7C  
                                 l569 4F48                                   l905 3D64  
                                 l921 3774                                   l593 52EC  
                                 l489 2ACC                                   l578 4F84  
                                 l906 3D46                                   l930 33B4  
                                 l594 52F4                                   l579 4F86  
                                 l915 3802                                   l931 3414  
                                 l595 52F6                                   l499 2B9C  
                                 l916 3652                                   l596 530A  
                                 l909 54F4                                   l925 3794  
                                 l597 530C                                   l918 381C  
                                 l942 35F2                                   l934 344E  
                                 l598 5314                                   l950 4A82  
                                 l943 3560                                   l599 5316  
                                 l944 3594                                   l936 3482  
                                 l952 4AA0                                   l929 35D6  
                                 l945 35D2                                   l937 34DE  
                                 l953 4ACA                                   l939 3536  
                                 l971 3B16                                   l963 3A98  
                                 l972 3AFE                                   l964 3A7A  
                                 l948 4AD2                                   l949 4A60  
                                 l974 3B3A                                   l966 3A90  
                                 l975 3B6A                                   l967 3AA0  
                                 l959 3A4E                                   l976 3BA8  
                                 l984 3DF0                                   l969 3ACE  
                                 l979 489A                                   l988 3ED8  
                                 l989 3E9A                                   _PCL 000FF9  
                                 _PR2 000FCB                                   _fil 0106  
                    ??_init_oscilador 0021                                   _isr 0008  
                        disk_read@res 0089                                   prod 000FF3  
                      ??_create_chain 00B7                                   tosl 000FFD  
                                 wreg 000FE8             __size_of_write_timer_zero 0012  
                     create_chain@mcl 00B9                       create_chain@ncl 00C1  
                     create_chain@scl 00BF               ??_escreve_frase_ram_lcd 0024  
                                l1011 3F20                                  l1012 3F90  
                                l1102 4EE4                                  l1111 0EF2  
                                l1104 4F04                                  l1120 0FF6  
                                l1112 0F18                                  l1016 405A  
                                l1040 3FE6                                  l1105 4F32  
                                l1121 1018                                  l1201 0E06  
                                l1130 56E8                                  l1202 0990  
                                l1115 0F48                                  l1043 4000  
                                l1203 0C8C                                  l1140 5744  
                                l1124 1060                                  l1116 0F44  
                                l1108 0EA0                                  l1052 4036  
                                l1036 3FCE                                  l1028 3FBE  
                                l1204 0AC6                                  l1300 5414  
                                l1125 119C                                  l1117 0F76  
                                l1109 0E9A                                  l1061 2CAA  
                                l1213 0E74                                  l1221 0D4E  
                                l1205 0A4C                                  l1301 5444  
                                l1134 56FA                                  l1126 128E  
                                l1118 0F82                                  l1054 4038  
                                l1046 4018                                  l1038 3FD6  
                                l1070 2DB0                                  l1150 2558  
                                l1222 0E62                                  l1214 0C0E  
                                l1127 12A4                                  l1039 3FDE  
                                l1063 2CD6                                  l1151 257C  
                                l1215 0BB6                                  l1207 0A6C  
                                l1311 24C0                                  l1240 1AD2  
                                l1048 401A                                  l1064 2D3C  
                                l1320 229C                                  l1241 1B34  
                                l1137 570A                                  l1081 2ECC  
                                l1073 2DA4                                  l1153 25DA  
                                l1217 0DCC                                  l1313 21F2  
                                l1226 466C                                  l1242 1B20  
                                l1090 2FEA                                  l1082 2EF4  
                                l1066 2D30                                  l1058 2C86  
                                l1154 2602                                  l1146 250C  
                                l1218 0C7E                                  l1322 22AC  
                                l1314 21A6                                  l1306 2132  
                                l1227 45B4                                  l1251 1B92  
                                l1139 5724                                  l1083 2F08  
                                l1163 273C                                  l1323 22B8  
                                l1244 1CFE                                  l1084 2F34  
                                l1076 2DCA                                  l1164 2758  
                                l1148 2730                                  l1340 2476  
                                l1324 22C4                                  l1180 1548  
                                l1093 3010                                  l1077 2DDE  
                                l1069 2D82                                  l1157 26D0  
                                l1149 25D0                                  l1341 244A  
                                l1333 2354                                  l1309 217C  
                                l1246 1C04                                  l1238 1916  
                                l1086 2FA0                                  l1158 26A0  
                                l1334 236C                                  l1326 22EA  
                                l1318 221A                                  l1190 182C  
                                l1182 155E                                  l1255 1C98  
                                l1247 1B3E                                  l1167 2774  
                                l1343 2458                                  l1335 23A0  
                                l1319 2252                                  l1175 1868  
                                l1248 1B7E                                  l1096 30BE  
                                l1192 17CC                                  l1176 14B2  
                                l1097 307E                                  l1329 2310  
                                l1177 170A                                  l1098 30AE  
                                l1450 481E                                  l1442 4796  
                                l1186 1872                                  l1178 15B4  
                                l1291 5528                                  l1339 241C  
                                l1451 4834                                  l1443 47AE  
                                l1187 16FC                                  l1188 16A4  
                                l1445 47DC                                  l1294 5560  
                                l1446 47D0                                  l1721 49B4  
                                l1449 4810                                  l1394 5476  
                                l1723 49F0                                  l1395 548A  
                                l1299 544C                                  l1804 558A  
                                l1724 4A32                                  l1805 5582  
                                l1717 5846                                  l1814 587C  
                                l1830 4CC0                                  l1815 5874  
                                l1751 518A                                  l1808 55AA  
                                l1752 517E                                  l1809 55B4  
                                l1841 5A68                                  l1761 5358  
                                l1818 5894                                  l1842 5A58  
                                l1762 534C                                  l1819 589E  
                                l1755 51BE                                  l1835 577C  
                                l1756 51CC                                  l1828 4CCA  
                                l1836 575A                                  l1829 4C46  
                                l1765 5380                                  l1766 538E  
                                l1975 597C                                  l1976 5976  
                                l9035 3CB2                                  ?_isr 0001  
                                l9303 3AA0                                  l9265 4BFA  
                                l9373 56E4                                  l9447 296E  
                                l8827 398A                                  l9299 3A7A  
                                l8925 5B5E                                  l9477 2A06  
                                l9389 575A                                  l8919 5B50  
                                l9583 4C46                                  l9575 5A58  
               _escreve_caractere_lcd 525C                                  l8795 38DC  
                                STR_1 08C0                                  STR_2 08BA  
                                STR_3 0848                                  STR_4 0823  
                                STR_5 0857                                  STR_6 08A7  
                                STR_7 089D                                  STR_8 08B1  
                                STR_9 0888                        timer_dois@flag 0033  
                                _BRGH 007D62                       __end_of_GPSRead 338C  
                                _T0IF 007F92                                  _CREN 007D5C  
                        ?_escreve_SPI 0001                                  _LATB 000F8A  
                                _PIE1 000F9D                                  _RCIF 007CF5  
                                i2l81 421C                                  i2l82 4290  
                                i2l83 4236                                  i2l85 4264  
                                i2l87 4284                                  i2l88 4298  
                                _TMR2 000FCC                                  _SPEN 007D5F  
                                _TRMT 007D61                                  _TXEN 007D65  
                                _SYNC 007D64                          trace_path@dj 00BF  
                        trace_path@fn 00C1                          trace_path@ds 00D3  
                        trace_path@fs 00CF                         ?_make_dirfile 0066  
                                _Term 0036                                  _dado 0032  
                                _main 5A20                                  _fsid 00FA  
                                _itoa 5820                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  indf0 000FEF  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf1 000FE7                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 003F                                  _utoa 49AC  
                                _sync 54BC                         disk_ioctl@cmd 0021  
                       disk_read@buff 007F                         disk_ioctl@res 0061  
                       disk_read@pdrv 0086                                  prodh 000FF4  
                                prodl 000FF3                                  start 000E  
             ?_verifica_fence_externo 0001             sdc_disk_initialize@buff_i 007B  
                        ___param_bank 000000             sdc_disk_initialize@count1 0077  
           sdc_disk_initialize@count2 007D                           _string_dado 0200  
                               ??_isr 000C               __size_of_escrita_sdcard 0096  
    __size_of_configura_baudrate_uart 0130                                 l10323 1014  
                               l10405 5444                                 l11109 1E1C  
                               l11223 4366                                 l11207 4330  
                               l11145 1F80                                 l11237 4396  
                               l10711 2132                                 l11167 205C  
                               l11193 4300                                 l10803 232A  
                               l11285 4B02                                 l10743 21E0  
                     __end_of___aldiv 4846                                 ?_main 0001  
                               ?_itoa 006D                                 STR_10 0865  
                               STR_11 087D                                 STR_12 0838  
                               STR_13 0893                                 STR_14 0872  
                               STR_15 08CA                                 STR_16 08C6  
                        ?_leitura_SPI 0001                       __end_of___lldiv 51DE  
                               ?_utoa 0064                                 ?_sync 0001  
                               u11030 3A38                                 u11040 3A44  
                               u10410 3902                                 u10260 5A1C  
                               u11150 3B96                                 u10280 53C0  
                               u11320 2A06                                 u11240 28F4  
                               _T0CON 000FD5                                 u10425 3934  
                               u10450 39B0                                 u11250 2904  
                               u10460 39EC                                 u12140 4F00  
                               u11340 2A12                                 u11261 290E  
                               u11190 56E4                                 u11430 2B72  
                               u10295 407C                                 u12320 558E  
                               u10720 3D0A                                 u11440 2BAA  
                               u11280 296E                                 u13200 269C  
                               u10385 388A                       __end_of___llmod 53A0  
                               u10490 5B6C                                 u13050 535C  
                               u12250 47E0                                 u11460 4C72  
                               u11700 0E0E                                 u12165 468A  
                               u12405 44B6                                 u14030 4FBC  
                               u12350 5880                                 u10670 3BF2  
                               u11390 2AF6                                 u12175 46A6  
                               u10815 3682                                 u11615 0B14  
                               u12415 4502                                 u10760 55E0  
                               u11480 4C98                                 u11800 3E96  
                               u13240 2754                                 _T2CON 000FCA  
                               u12185 46D6                                 u10770 560A  
                               u12290 518E                                 u13410 1BA0  
                               u12450 4AB8                                 u11810 3F58  
                               u13170 25FE                                 u14051 5936  
                               u12195 46F0                                 u10835 36F6  
                               u10915 34AE                                 u11467 4C68  
                               u12460 4AE0                                 u13500 217A  
                               u14140 1F1E                                 u12525 2CF6  
                               u10790 361C                                 u13430 1C18  
                               u12470 4AF8                                 u12710 300C  
                               u11830 3F6A                                 u10767 55D6  
                               u13335 198A                                 u11487 4C8E  
                               u11655 0BFA                                 u12375 4428  
                               u13440 1C5E                                 u12480 2C6C  
                               u10777 5600                                 u10865 3780  
                               u10945 3542                                 u11817 3F4E  
                               u12385 4474                                 u14081 1D1A  
                               u14250 435C                                 u13530 21FE  
                               u14091 1D2C                                 u12740 0EC0  
                               u12660 2F8C                                 u14180 2020  
                               u10885 33E4                                 u13445 1C54  
                               u12645 2F54                                 u10990 4BFA  
                               u11790 3E72                                 u11775 3DFC  
                               u12487 2C62                                 u12760 0EE6  
                               u14360 50E2                                 u12930 128A  
                               u12690 2FE6                                 u13730 2498  
                               u13570 2292                                 u14370 50FA  
                               u12747 0EB6                                 u12940 12A0  
                               u13820 156C                                 u14348 4B5A  
                               u12925 11B4                                 u13741 24D0  
                               u14349 4B6E                                 u12767 0EDC  
                               u13680 23FC                                 u12890 1014  
                               u12955 1328                                 u13845 1602  
                               u14807 4D26                                 u14817 4D42  
                               u14827 1DAA                                 u13885 16E8  
                               u14837 1F06                                 u14847 288E  
                               u14857 2A22                                 u14867 2AD4  
                               u14787 5144                                 u14877 58B2  
                               u14797 4D0A                       __end_of___lwdiv 55BE  
                               i2l200 31BC                                 i2l201 31C0  
                     __end_of___lwmod 58A8                                 i2l210 3280  
                               i2l202 31E8                                 i2l211 32AA  
                               i2l203 3212                                 i2l212 32D4  
                               i2l213 32FE                                 i2l205 322E  
                               i2l214 332A                                 i2l206 3234  
                               i2l215 3356                                 i2l207 325E  
                               i2l216 335E                                 i2l209 327A  
                               i2l190 310A                                 i2l183 5668  
                               i2l191 311A                                 i2l195 313C  
                               i2l188 3376                                 i2l196 3146  
                               i2l189 30FC                                 i2l198 319C  
                               i2l849 5C46                                 _RCREG 000FAE  
                               _RCSTA 000FAB                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISA 000F92                                 _TRISB 000F93  
                               _TRISC 000F94                                 _TRISD 000F95  
                               _TRISE 000F96                       __end_of_f_close 5AD4  
                               _TXREG 000FAD                         trace_path@dir 00C5  
                               _TXSTA 000FAC                                 _FatFs 00FC  
                     __end_of_f_lseek 1D10                   ___lmul@multiplicand 0064  
          __size_of_config_timer_dois 000E                       __end_of_f_mount 5748  
                     __end_of_f_write 0E88            __size_of_config_timer_zero 001A  
                       get_cluster@bc 00AE                         get_cluster@fs 00B0  
                       get_cluster@wc 00A8                       __end_of_command 5408  
                               _delay 5B4C                       clust2sect@clust 006C  
                     __end_of_fprintf 24D2                                 _fputc 5514  
                               _fputs 5408              __size_of_escreve_cmd_lcd 008C  
                      ??_make_dirfile 006A                        disk_ioctl@buff 0022  
                               pclath 000FFA                        disk_read@count 0085  
                               tablat 000FF5                        disk_ioctl@pdrv 0060  
                    ?_dados_gps_to_sd 0001                       __end_of_proceed 5C7E  
                               plusw1 000FE3                                 plusw2 000FDB  
                               utoa@c 006C                                 utoa@v 006A  
                               status 000FD8                                 wtemp6 0040  
                       disk_write@res 0089        __end_of_verifica_fence_externo 210E  
                     __initialization 48FC                   disk_initialize@pdrv 0080  
                 disk_initialize@stat 0081                          __end_of_main 5A4E  
                        clust2sect@fs 0021                          __end_of_itoa 5864  
                        __end_of_utoa 4A56                          __end_of_sync 5514  
                  _inicializa_tarefas 5612                       escalonador@cont 0184  
                 reserve_direntry@dir 00C5                     create_chain@clust 00B5  
                         auto_mount@p 00B0                     create_chain@cstat 00BD  
                       sdc_reset@buff 0072                                ??_main 0024  
                              ??_itoa 0024                                ??_utoa 0024  
                              ??_sync 0024                         __activetblptr 000002  
                 ?_inicializa_tarefas 0001                  __end_of_desliga_uart 5C66  
                           ??_GPSRead 000A                        _next_dir_entry 3D68  
                __size_of_desliga_SPI 000C                     get_fattime@f_time 008A  
                    ??_sdc_disk_write 0073                                ?_delay 0001  
              ?_escreve_caractere_lcd 0001                                _ADCON1 000FC1  
                              ?_fputc 00E4                      ___llmod@dividend 0060  
                              ?_fputs 00EB                    auto_mount@bootsect 00A8  
                              _INT0IE 007F94                                _INT0IF 007F91  
                       ?_dummy_clocks 0001                                _PCLATH 000FFA  
                              i2l1967 57E2                                i2l1968 57DA  
                              _INTCON 000FF2               __size_of_inicializa_SPI 0020  
                              _TMR0IF 007F92                                _TMR2IF 007CF1  
                  auto_mount@maxclust 00A4              __end_of_recebe_dado_uart 5C4A  
                              _SPPCFG 000F63                                _SPPCON 000F65  
                              _SSPBUF 000FC9              __size_of_sdc_disk_status 0014  
                    __end_of_check_fs 4F36                  ??_inicializa_tarefas 0021  
                      trace_path@dptr 00D4                        trace_path@path 00C3  
              reserve_direntry@sector 00C9              __size_of_disk_initialize 003C  
          __end_of_posicao_cursor_lcd 525C                        auto_mount@path 0092  
                        ?_move_window 008A                  __end_of_create_chain 3BB2  
                        _dado_arquivo 022C                __size_of_init_hardware 0016  
                      auto_mount@stat 00B3                  __size_of_get_fattime 0108  
                        put_cluster@p 00B1          ?_verifica_dados_operacionais 0001  
                __size_of_get_cluster 0222                                ___lmul 5464  
                           ??___aldiv 0021                  __size_of_disk_status 0048  
                              ___wmul 5B00                                _f_read 13BA  
                           ??___lldiv 0021                                _f_open 24D2  
                           ??___llmod 0021                             ??___lwdiv 0021  
                              _f_sync 4546                             ??___lwmod 0021  
                              _buffer 0122                                _estado 0034  
                              _memcmp 4C44                                _memcpy 5748  
                    __end_of_init_lcd 4D84                                _memset 5A4E  
                           ??_f_close 0024                                clear_0 4956  
                              clear_1 4968                                clear_2 4974  
                              clear_3 4980                                clear_4 498C  
                              clear_5 4998                                _metros 0039  
                           ??_f_lseek 00C9                             ??_f_mount 0023  
   verifica_fence_externo@count_index 047E              configura_baudrate_uart@x 0021  
                           ??_f_write 00CB                                _strcmp 57D8  
                 _sdc_disk_initialize 2868                             ??_command 0023  
                         GPSRead@buff 000A                                _strlen 596C  
                    put_cluster@clust 009F                                fputc@c 00E8  
                  get_cluster@fatsect 00AA                      __end_of_monta_sd 4416  
                              itoa@cp 0073              __end_of_reserve_direntry 30F4  
                    __end_of_validate 56FE                __end_of_next_dir_entry 3EF0  
                           ??_fprintf 00F2                                fputs@n 00F0  
                __size_of_escalonador 00A4                      __end_of_response 5C72  
                        __mediumconst 0000                 write_timer_zero@timer 0060  
                     disk_read@sector 0081                       disk_read@result 0087  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                             ??_proceed 0023  
                    _write_timer_zero 5C02                                sync@fs 009F  
           escreve_caractere_lcd@data 0023                        ??_dummy_clocks 0021  
                 _escreve_inteiro_lcd 592C            verifica_fence_externo@size 047C  
                     sdc_disk_write@i 0077                       sdc_disk_write@j 007C  
                          __accesstop 0060               __end_of__initialization 499E  
                ?_sdc_disk_initialize 0001                        disk_write@buff 007F  
                      disk_write@pdrv 0086                  __size_of_escreve_SPI 0012  
                       ___rparam_used 000001                     ??_escreve_cmd_lcd 0023  
                      __pcstackCOMRAM 0001           __end_of_endereco_cursor_lcd 5338  
                        __pidataBANK0 5CAA                          __pidataBANK1 5C9E  
                        __pidataBANK2 5A7C                     ?_mensagem_inicial 0001  
             _configura_baudrate_uart 4416                         __end_of_delay 5B70  
                      _escrita_sdcard 4D84                         __end_of_fputc 556A  
                       __end_of_fputs 5464                  ?_escreve_inteiro_lcd 0075  
       ??_verifica_dados_operacionais 0021                    ??_mensagem_inicial 0063  
                __end_of_make_dirfile 405E                          ?_put_cluster 009F  
                   reserve_direntry@c 00D0                     reserve_direntry@n 00CD  
                  _tarefa_em_execucao 003A            __end_ofi2_write_timer_zero 5C38  
                     ?_next_dir_entry 00B2                __size_of_sdc_disk_read 0146  
     configura_baudrate_uart@baudrate 006E                  reserve_direntry@dptr 00CE  
                __size_of_leitura_SPI 000C                         _init_hardware 5BC6  
                        auto_mount@fs 00B8                    __size_of_disk_read 0090  
                             ??_delay 0021                        sdc_reset@count 0070  
                             ??_fputc 0024                               ??_fputs 00EF  
        mensagem_inicial@msg_linha_um 0065                            __pbssBANK0 00F4  
                          __pbssBANK1 0100                            __pbssBANK2 0200  
                          __pbssBANK3 0300        __size_of_escreve_frase_ram_lcd 0054  
       __end_of_escreve_frase_ram_lcd 5612                 ??_sdc_disk_initialize 0073  
           escreve_inteiro_uart@F3958 027B                __end_of_escrita_sdcard 4E1A  
                  __size_of_sdc_reset 00A4                               ?___lmul 0060  
                   ??_sdc_disk_status 0021                         make_dirfile@a 0070  
                       make_dirfile@b 006E                         make_dirfile@c 0072  
                       make_dirfile@n 0071                         make_dirfile@t 006F  
                             ?___wmul 0060                 mensagem_inicial@F4346 0812  
               mensagem_inicial@F4348 0801                               ?_f_read 00B2  
               ??_escreve_inteiro_lcd 0024                               ?_f_open 00D6  
                             ?_f_sync 00A1                     ??_disk_initialize 0024  
               __size_of_desliga_uart 000E                               ?_memcmp 0060  
                             ?_memcpy 0060                               ?_memset 0060  
                      ___lmul@product 0068                               ?_strcmp 0001  
                             ?_strlen 0021                               i2l11407 422E  
                             _INTCON2 000FF1                               _INTCON3 000FF0  
                      ?_init_hardware 0001                             ?_check_fs 008A  
                          _disk_ioctl 5AD4                               _GPSRead 30F4  
                          _disk_write 504C                        remove_chain@fs 00BB  
__size_of_verifica_dados_operacionais 0002                               _SSPCON1 000FC6  
            __size_of_inicializa_uart 0024                               _SSPSTAT 000FC7  
                          _clust2sect 4846                        _inicializa_SPI 5B70  
                     trace_path@clust 00D1                         ?_remove_chain 00B5  
               __size_of_create_chain 01C0                             ?_init_lcd 0001  
 verifica_fence_externo@caractere_gps 0400                    __size_of_stringcpy 004E  
                       _sdc_disk_read 405E                          _desliga_uart 5C58  
                          _auto_mount 0E88                               __Hparam 0000  
           ??_configura_baudrate_uart 0072      verifica_fence_externo@point_buff 047A  
                             __Lparam 0000                             ?_monta_sd 0064  
                           ?_validate 0064                       ?_escrita_sdcard 0179  
                   __end_of_disk_read 4EAA                         put_cluster@bc 00AF  
                           ?_response 0001                         put_cluster@fs 00B3  
                             ___aldiv 4778                            f_close@res 00AC  
                     __size_of___lmul 0058               __size_of_leitura_sdcard 008A  
                             ___lldiv 515A                       __size_of___wmul 0028  
                             ___llmod 5338                  __size_of_move_window 01B6  
                          check_fs@fs 0090                               ___lwdiv 556A  
                     __size_of_f_read 04CC                               ___lwmod 5864  
                     __size_of_f_open 0396                          __psmallconst 0800  
                     __size_of_f_sync 012A                  __end_of_dummy_clocks 58EA  
                             _f_close 5AA8                               __pcinit 48FC  
                     __size_of_memcmp 00A2                       __size_of_memcpy 0048  
                     __size_of_memset 002E                               _f_lseek 1886  
                          _init_ports 5B90                               __ramtop 0800  
                             _f_mount 56FE                               __ptext0 5A20  
                             __ptext1 50D4                               __ptext2 4CE6  
                             __ptext3 5BC6                               __ptext4 5B90  
                             __ptext5 5C96                               __ptext6 5BF0  
                             __ptext7 5BAC                               __ptext8 5C02  
                             __ptext9 5C4A                               _f_write 08CE  
                             _command 53A0                             _T0CONbits 000FD5  
                 auto_mount@totalsect 00AC                       __size_of_strcmp 0048  
                     __size_of_strlen 003E               i2write_timer_zero@timer 0003  
         endereco_cursor_lcd@endereco 0023                               _fprintf 210E  
                          f_read@buff 00B4                               _rawDate 0135  
                        __size_of_isr 42DC               ??_escreve_caractere_lcd 0023  
                          f_read@sect 00C7                            f_read@rcnt 00D1  
                          ??_check_fs 008E                               _rawTime 025A  
                    ___aldiv@dividend 0060                          stringcpy@chr 0009  
                        stringcpy@dir 0005                          _create_chain 39F2  
                             _proceed 5C72               __size_of_init_interrupt 0012  
                   __end_of_sdc_reset 4C44                __end_of_inicializa_SPI 5B90  
                          f_lseek@ofs 00C5                        __pintcode_body 41A4  
                          f_lseek@res 00D5                  end_of_initialization 499E  
                          f_open@mode 00DA                            f_open@path 00D8  
                      ??_remove_chain 00B7                               isr@cont 0020  
                             memcmp@n 0064                               memcpy@d 0067  
                             memcpy@n 0064                               memcpy@s 0069  
             __size_of_init_oscilador 0008                               fputc@bw 00E9  
                             itoa@buf 006D                               memset@c 0062  
                             itoa@val 006F                               memset@n 0064  
                             memset@p 0021                  sdc_disk_initialize@i 0074  
                       __Lmediumconst 0000                            ??_init_lcd 0060  
                             int_func 41A4                     ?_recebe_dado_uart 0001  
                     disk_status@pdrv 0062                       disk_status@stat 0063  
                      ?_sdc_disk_read 006C                             i2u1440_40 420C  
                           i2u1441_48 420E                             i2u1446_40 4268  
              write_timer_zero@timer0 0021                       ___lldiv@divisor 0064  
                       _rawSatellites 003C                            f_mount@drv 0023  
                  ??_recebe_dado_uart 0001                      sdc_disk_read@ptr 0077  
                     ___lldiv@counter 006C                            ??_monta_sd 0023  
         verifica_fence_externo@F4362 0270           verifica_fence_externo@F4364 0265  
                          ??_validate 0068                 __size_of_make_dirfile 016E  
            __size_of_dados_gps_to_sd 0042                            ??_response 0021  
                           _RCSTAbits 000FAB              __end_of_write_timer_zero 5C14  
                    ___aldiv@quotient 006A                               postdec1 000FE5  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc1 000FE6                               postinc2 000FDE  
                             utoa@buf 0064                               utoa@val 0066  
                          _wait_ready 59E6                               strcmp@r 0006  
                             strlen@s 0021                             _PORTBbits 000F81  
                           _PORTDbits 000F83                       ??_init_hardware 0023  
         verifica_fence_externo@count 0480                            _trace_path 2BAE  
                  _posicao_cursor_lcd 51DE                     __end_of_stringcpy 56B2  
         verifica_fence_externo@point 047D                         ??_desliga_SPI 0021  
                __size_of_put_cluster 027A       __end_of_configura_baudrate_uart 4546  
                         ?_disk_ioctl 0021                     ?_reserve_direntry 00C3  
                          f_write@btw 00C7                            f_write@res 00D7  
                           _TRISBbits 000F93                           ?_disk_write 007F  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                    next_dir_entry@dj 00B2                       _escreve_cmd_lcd 4F36  
                  ??_reserve_direntry 00C7                   ?_posicao_cursor_lcd 0060  
                     ?_inicializa_SPI 0001                       disk_write@count 0085  
                         ?_clust2sect 006C                     _incrementa_metros 5CA6  
                    _put_cluster$1886 00A7                      _put_cluster$1887 00A9  
                          command@CMD 006A                            command@CRC 0069  
                          command@arg 0065                          _make_dirfile 3EF0  
                  ?_incrementa_metros 0001                         ??_get_fattime 0064  
                   ??_inicializa_uart 0023           __size_of_inicializa_tarefas 0052  
                       ??_get_cluster 00A1                         ??_disk_status 0023  
                         ?_auto_mount 0092                     _make_dirfile$1996 006C  
                 ??_incrementa_metros 0021                       command@argument 006B  
                ??_posicao_cursor_lcd 0024                        __end_of___lmul 54BC  
                    ??_next_dir_entry 00B4                        __end_of___wmul 5B28  
                      __end_of_f_read 1886                        __end_of_f_open 2868  
                       ??_escalonador 0182                           ?_init_ports 0001  
                      __end_of_f_sync 4670                        __end_of_memcmp 4CE6  
                      __end_of_memcpy 5790                        __end_of_memset 5A7C  
                      __end_of_strcmp 5820                        __end_of_strlen 59AA  
                 start_initialization 48FC             __end_of_incrementa_metros 5CA8  
                         __end_of_isr 42E4             __size_of_mensagem_inicial 0086  
                  reserve_direntry@dj 00C3                    reserve_direntry@fs 00D3  
                 __end_of_desliga_SPI 5C96                         ??_escreve_SPI 0021  
            ??_verifica_fence_externo 017D                       _sdc_disk_status 5BDC  
                     ??_sdc_disk_read 0073                     auto_mount@fatsize 00B4  
                  i2_write_timer_zero 5C26                       ___llmod@divisor 0064  
                     _disk_initialize 59AA                       ___llmod@counter 0021  
               reserve_direntry@clust 00D1               __size_of_sdc_disk_write 01CA  
                    _data_uart_recebe 003B                     wait_ready@timeout 0060  
               __size_of_dummy_clocks 0042                         auto_mount@fmt 00B2  
                 __size_of_disk_ioctl 002C                   ?i2_write_timer_zero 0001  
                 __size_of_disk_write 0088                              ??___lmul 0021  
                      _leitura_sdcard 4FC2                            fprintf@fil 014E  
                          fprintf@arp 0172                              ??___wmul 0021  
                          fprintf@res 0166                            fprintf@val 016E  
                          fprintf@str 0150                              ??_f_read 00BA  
                 __end_of_get_fattime 4778                              ??_f_open 00DB  
                            ??_f_sync 0024                           ?_wait_ready 0001  
                         __pdataBANK0 00FF                           __pdataBANK1 0185  
                         __pdataBANK2 0265                   __end_of_get_cluster 3828  
                            ??_memcmp 0021                   __end_of_disk_status 57D8  
                            ??_memcpy 0021                   __size_of_clust2sect 00B6  
                            ??_memset 0021                sdc_disk_read@start_add 0078  
                __end_of_remove_chain 4AFC                     ??_dados_gps_to_sd 0023  
             sdc_disk_initialize@buff 007F                         ??_leitura_SPI 0021  
             __end_of_escreve_cmd_lcd 4FC2                              ??_strcmp 0005  
                            ??_strlen 0060               sdc_disk_initialize@stat 0076  
                         ?_trace_path 00BF          __size_of_endereco_cursor_lcd 006A  
                        _fprintf$2484 0168                           __pbssBIGRAM 0482  
                       monta_sd@index 0066                           __pbssCOMRAM 0024  
                     _trace_path$2043 00CB                       _trace_path$2045 00CD  
                            ?_GPSRead 0001                         __pcstackBANK0 0060  
                       __pcstackBANK1 014E                         __pcstackBANK4 0400  
                      _init_interrupt 5BF0                   __size_of_auto_mount 0532  
                ??i2_write_timer_zero 0003                   __end_of_escalonador 4BA0  
         __end_of_sdc_disk_initialize 2BAE                     __size_of_check_fs 008C  
                        check_fs@sect 008A                           _char_number 0038  
                          sdc_reset@i 006C                          _dummy_clocks 58A8  
                      _init_oscilador 5C96                              GPSRead@c 000B  
                    ??_escrita_sdcard 0024                   __size_of_init_ports 001C  
               _escreve_frase_ram_lcd 55BE                             _data_buff 002A  
                           _data_hoje 0035           __end_of_escreve_inteiro_lcd 596C  
                 __end_of_escreve_SPI 5C26                     __size_of_init_lcd 009E  
              __end_of_leitura_sdcard 504C                      ___lwdiv@dividend 0060  
                   delay@contador_int 0022                     delay@contador_ext 0021  
 __end_of_verifica_dados_operacionais 5CAA           _verifica_dados_operacionais 5CA8  
                           __pintcode 0008   verifica_fence_externo@temp_buff_lat 0464  
                            ?___aldiv 0060                     __size_of_monta_sd 0132  
                            ?___lldiv 0060                              ?___llmod 0060  
                   __size_of_validate 004C                              ?___lwdiv 0060  
                            ?___lwmod 0060                     __size_of_response 000C  
                            ?_f_close 00AA                             _disk_read 4E1A  
                  _sinaliza_int_timer 00FE                              ?_f_lseek 00C3  
                            ?_f_mount 0021                              ?_f_write 00C3  
                            ?_command 0065                           __smallconst 0800  
              __end_of_init_interrupt 5C02                              ?_fprintf 014E  
                         _desliga_SPI 5C8A                   sdc_disk_read@p_buff 006C  
                 sdc_disk_read@length 007C                   sdc_disk_read@sector 006E  
             __end_of_sdc_disk_status 5BF0        __size_of_escreve_caractere_lcd 0072  
          __size_of_incrementa_metros 0002         __end_of_escreve_caractere_lcd 52CE  
                            ?_proceed 0001                             f_close@fp 00AA  
                 __end_of_leitura_SPI 5C8A                      ___lwdiv@quotient 0022  
                      __size_of_delay 0024                  escrita_sdcard@point1 0179  
                escrita_sdcard@point2 017B               __end_of_disk_initialize 59E6  
              __end_of_init_oscilador 5C9E                        __size_of_fputc 0056  
                      __size_of_fputs 005C                   make_dirfile@dirname 0068  
                          validate@id 0066                            validate@fs 0064  
                           _p_tarefas 00F4                          f_read@remain 00C3  
                           _rawCourse 013C                             f_read@btr 00B6  
                           f_read@res 00C2       __size_of_verifica_fence_externo 03FE  
                    make_dirfile@path 0066                              _GPGGA_ok 002C  
                           _sdc_reset 4BA0                   __size_of_wait_ready 003A  
                     ___aldiv@divisor 0064                       ___aldiv@counter 0068  
                      ___wmul@product 0021                              _LATBbits 000F8A  
                           f_lseek@fp 00C3                              _LATCbits 000F8B  
                            _GPRMC_ok 002E                             f_open@dir 0161  
                           f_open@res 0160                              _PIE1bits 000F9D  
                         _get_fattime 4670                          _rawLongitude 0240  
                 __size_of_trace_path 02AC                           _get_cluster 3606  
                         _disk_status 5790                       ?_leitura_sdcard 00DF  
                       ??_move_window 008E                             f_mount@fs 0021  
                            _PIR1bits 000F9E                              i2u927_40 5814  
                       move_window@fs 009D                     ?_write_timer_zero 0021  
                     remove_chain@nxt 00B9                             f_sync@dir 00A8  
                           f_sync@res 00A7                             f_sync@tim 00A3  
            posicao_cursor_lcd@coluna 0060                            ?_disk_read 007F  
                  ??_write_timer_zero 0023                             f_write@cc 00DE  
          posicao_cursor_lcd@endereco 0062                             f_write@bw 00C9  
                           f_write@fp 00C3             __size_of_recebe_dado_uart 0012  
                         _escalonador 4AFC                     ___wmul@multiplier 0060  
                    ?_escreve_cmd_lcd 0001           escreve_frase_ram_lcd@buffer 0060  
                    ??_inicializa_SPI 0021                       ?_init_interrupt 0001  
                        ??_disk_ioctl 0024                          ??_disk_write 0023  
                        f_lseek@clust 00DE                       _inicializa_uart 5B28  
                        f_lseek@csize 00DA                          f_lseek@ifptr 00D6  
                           _stringcpy 5664                      __size_of_GPSRead 0298  
                    _mensagem_inicial 50D4                       ?_init_oscilador 0001  
                        ??_clust2sect 0070                     ___lmul@multiplier 0060  
                           copy_data0 4910                             copy_data1 4930  
                         _escreve_SPI 5C14                            ?_sdc_reset 0001  
                 sdc_reset@count_nosd 006E              ?_configura_baudrate_uart 006E  
              ?_escreve_frase_ram_lcd 0060                      auto_mount@chk_wp 0094  
                   move_window@sector 008A                        _sdc_disk_write 3828  
           __size_of_reserve_direntry 029A              escreve_inteiro_lcd@F3966 0185  
                        ??_auto_mount 0095                              __Hrparam 0000  
                           memcpy@tmp 0066                              __Lrparam 0000  
                           fprintf@cc 0174                    __end_of_disk_ioctl 5B00  
               __size_of_remove_chain 00A6                        put_cluster@val 00A1  
                    get_cluster@clust 009F                    __end_of_disk_write 50D4  
             verifica_fence_externo@i 0481               verifica_fence_externo@j 047F  
                        _SentenceType 0037                      __size_of___aldiv 00CE  
              sdc_disk_initialize@ocr 007C                          monta_sd@dado 0064  
              _verifica_fence_externo 1D10                      __size_of___lldiv 0084  
                    __size_of___llmod 0068                         ??_put_cluster 00A3  
                    __size_of___lwdiv 0054                          monta_sd@size 0067  
                    __size_of___lwmod 0044                          ??_init_ports 0021  
                 __end_of_move_window 3D68                    __end_of_clust2sect 48FC  
            escreve_inteiro_lcd@valor 0075                      __size_of_f_close 002C  
            escreve_inteiro_lcd@texto 0077                      __size_of_f_lseek 048A  
                    __size_of_f_mount 004A                           _leitura_SPI 5C7E  
                    __size_of_f_write 05BA                     disk_status@result 0060  
                    __size_of_command 0068                 __end_of_init_hardware 5BDC  
                            _check_fs 4EAA                leitura_sdcard@num_spot 0001  
                    __size_of_fprintf 03C4                       ___lwdiv@divisor 0062  
                    ?_sdc_disk_status 0001                            ?_stringcpy 0001  
                     ___lwdiv@counter 0021                    __end_of_auto_mount 13BA  
                            __ptext10 5612                              __ptext11 4AFC  
                            __ptext20 4778                              __ptext12 5CA6  
                            __ptext21 5B70                              __ptext13 5CA8  
                            __ptext30 2E5A                              __ptext22 210E  
                            __ptext14 1D10                              __ptext31 3D68  
                            __ptext23 5408                              __ptext15 4FC2  
                            __ptext40 51DE                              __ptext32 4846  
                            __ptext24 5514                              __ptext16 13BA  
                            __ptext41 52CE                              __ptext33 4A56  
                            __ptext25 08CE                              __ptext17 4D84  
                            __ptext50 5B00                              __ptext42 4EAA  
                            __ptext34 5748                              __ptext26 5338  
                            __ptext18 5B28                              __ptext51 515A  
                            __ptext43 4C44                              __ptext35 0E88  
                            __ptext27 24D2                              __ptext19 4416  
                            __ptext60 3828                              __ptext52 5AA8  
                            __ptext44 5464                              __ptext36 5A4E  
                            __ptext28 2BAE                              __ptext61 4E1A  
                            __ptext53 4546                              __ptext45 56FE  
                            __ptext37 59AA                              __ptext29 3EF0  
                            __ptext70 5AD4                              __ptext62 405E  
                            __ptext54 56B2                              __ptext46 1886  
                            __ptext38 2868                              __ptext71 4670  
                            __ptext63 5C66                              __ptext55 5790  
                            __ptext47 39F2                              __ptext39 4BA0  
                            __ptext80 525C                              __ptext72 5C58  
                            __ptext64 5C72                              __ptext56 5BDC  
                            __ptext48 338C                              __ptext81 4F36  
                            __ptext73 5C8A                              __ptext65 53A0  
                            __ptext57 54BC                              __ptext49 3606  
                            __ptext90 5664                              __ptext82 5B4C  
                            __ptext74 592C                              __ptext66 59E6  
                            __ptext58 3BB2                              __ptext91 57D8  
                            __ptext83 58EA                              __ptext75 5820  
                            __ptext67 5C14                              __ptext59 504C  
                            __ptext92 0000                              __ptext84 42E4  
                            __ptext76 49AC                              __ptext68 58A8  
                            __ptext85 596C                              __ptext77 5864  
                            __ptext69 5C7E                              __ptext78 556A  
                            __ptext87 5C26                              __ptext79 55BE  
                            __ptext88 5C38                              __ptext89 30F4  
                    __size_of_proceed 000C                              _filename 0282  
                         _rawAltitude 012E                      ?_disk_initialize 0001  
                      _timeout_tarefa 0030                    sdc_disk_read@count 0072  
          __end_of_inicializa_tarefas 5664              i2write_timer_zero@timer0 0001  
              __end_of_sdc_disk_write 39F2                             monta_sd@i 0068  
                         _rawLatitude 024D                              _init_lcd 4CE6  
                       __size_of_main 002E                          _remove_chain 4A56  
                         f_read@clust 00CD                         __size_of_itoa 0044  
                       __size_of_utoa 00AA                         __size_of_sync 0058  
                         f_read@rbuff 00CB                              f_read@cc 00CF  
                            f_read@br 00B8                              f_read@fp 00B2  
                 _endereco_cursor_lcd 52CE                    __end_of_init_ports 5BAC  
                            _rawSpeed 0142                         dummy_clocks@i 0061  
                            f_open@dj 0163                         dummy_clocks@n 0060  
                            f_open@fn 014E                              f_open@fp 00D6  
                            f_open@dw 015C                              f_open@rs 015A  
                     _dados_gps_to_sd 58EA                              _monta_sd 42E4  
                            _validate 56B2                              _sentence 0148  
                        move_window@n 0098                         stringcpy@str1 0001  
                       stringcpy@str2 0003                              _response 5C66  
                            f_sync@fp 00A1           __size_of_posicao_cursor_lcd 007E  
                            int$flags 003F               posicao_cursor_lcd@linha 0061  
                        ??_wait_ready 0021                           ??_disk_read 0023  
             __end_of_inicializa_uart 5B4C                          ??_trace_path 00C7  
                ?_endereco_cursor_lcd 0001                    put_cluster@fatsect 00AB  
                          _INTCONbits 000FF2                              memcmp@s1 0060  
                            memcmp@s2 0062                      move_window@wsect 0099  
                            memcpy@d1 0060                              memcpy@s1 0062  
                 __end_of_put_cluster 3606                              fprintf@c 0178  
                            fprintf@f 016C                              fprintf@i 0176  
                            fprintf@r 016D                              fprintf@s 0156  
                            fprintf@w 016A                              fputc@chr 00E4  
                            itoa@base 0071                              fputc@fil 00E6  
                            memset@p1 0060                     _config_timer_dois 5C4A  
                        _tempo_backup 0100                              fputs@fil 00ED  
                            fputs@str 00EB                     _config_timer_zero 5BAC  
                        _poligono_ext 0300                         wait_ready@res 0064  
                            intlevel2 0000                    ?_config_timer_dois 0001  
            mensagem_inicial@msg_dois 0076                           ??_sdc_reset 0024  
                  ?_config_timer_zero 0001                          _tempo_tarefa 0024  
                     ?_sdc_disk_write 006C                      ___lwmod@dividend 0060  
                  __end_of_wait_ready 5A20                      ___lldiv@dividend 0060  
                   sdc_disk_read@buff 007E                 __end_of_sdc_disk_read 41A4  
                 sdc_disk_status@pdrv 0022                   sdc_disk_status@stat 0021  
                       ?_desliga_uart 0001                   ??_config_timer_dois 0021  
                          _OSCCONbits 000FD3                    __end_of_trace_path 2E5A  
                 ??_config_timer_zero 0023                           _move_window 3BB2  
verifica_fence_externo@temp_buff_long 046F                  sdc_disk_write@count1 0079  
                sdc_disk_write@p_buff 006C                      _recebe_dado_uart 5C38  
                            utoa@base 0068                  sdc_disk_write@sector 006E  
               ??_endereco_cursor_lcd 0023                  leitura_sdcard@offset 00E1  
                        response@buff 0021                              strcmp@s1 0001  
                            strcmp@s2 0003                          ?_desliga_SPI 0001  
                    ___lldiv@quotient 0068                       ___lwmod@divisor 0062  
                            strlen@cp 0062                       ___lwmod@counter 0021  
                   remove_chain@clust 00B5             __end_of_config_timer_dois 5C58  
                        ___aldiv@sign 0069                         ?_create_chain 00B5  
           __end_of_config_timer_zero 5BC6                           ??_stringcpy 0007  
         __size_ofi2_write_timer_zero 0012                           _SSPCON1bits 000FC6  
             __size_of_next_dir_entry 0188                escreve_cmd_lcd@comando 0023  
                  escreve_SPI@TempVar 0021                   sdc_disk_write@count 0072  
       sdc_disk_initialize@crc_number 0079               __end_of_dados_gps_to_sd 592C  
                    ??_leitura_sdcard 0024                    sdc_disk_write@buff 007E  
        __size_of_sdc_disk_initialize 0346                          f_write@clust 00E0  
                      ??_desliga_uart 0021                    leitura_sdcard@size 00FF  
                        f_write@wbuff 00D8                          ?_get_fattime 0060  
                    _reserve_direntry 2E5A                           f_write@buff 00C5  
                   sdc_disk_write@res 007B                          ?_get_cluster 009F  
                         f_write@sect 00DA                           f_write@wcnt 00E2  
                        ?_disk_status 0001                      leitura_sdcard@br 00E3  
       __end_ofmensagem_inicial@F4346 0823         __end_ofmensagem_inicial@F4348 0812  
                     escreve_SPI@dado 0022  
