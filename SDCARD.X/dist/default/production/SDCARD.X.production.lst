

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Apr 08 20:54:51 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   108                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   117                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   118  0000                     
   119                           ; Version 1.45
   120                           ; Generated 16/11/2017 GMT
   121                           ; 
   122                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   123                           ; All rights reserved.
   124                           ; 
   125                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   126                           ; 
   127                           ; Redistribution and use in source and binary forms, with or without modification, are
   128                           ; permitted provided that the following conditions are met:
   129                           ; 
   130                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   131                           ;        conditions and the following disclaimer.
   132                           ; 
   133                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   134                           ;        of conditions and the following disclaimer in the documentation and/or other
   135                           ;        materials provided with the distribution.
   136                           ; 
   137                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   138                           ;        software without specific prior written permission.
   139                           ; 
   140                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   141                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   142                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   143                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   144                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   145                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   146                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   147                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   148                           ; 
   149                           ; 
   150                           ; Code-generator required, PIC18F4550 Definitions
   151                           ; 
   152                           ; SFR Addresses
   153  0000                     
   154                           	psect	idataCOMRAM
   155  005A0E                     __pidataCOMRAM:
   156                           	opt stack 0
   157                           
   158                           ;initializer for leitura_sdcard@size
   159  005A0E  0A                 	db	10
   160                           
   161                           	psect	idataBANK1
   162  0058D6                     __pidataBANK1:
   163                           	opt stack 0
   164                           
   165                           ;initializer for escreve_inteiro_uart@F3958
   166  0058D6  30                 	db	48
   167  0058D7  30                 	db	48
   168  0058D8  30                 	db	48
   169  0058D9  30                 	db	48
   170  0058DA  30                 	db	48
   171  0058DB  30                 	db	48
   172  0058DC  00                 	db	0
   173                           
   174                           ;initializer for escreve_inteiro_lcd@F3966
   175  0058DD  30                 	db	48
   176  0058DE  30                 	db	48
   177  0058DF  30                 	db	48
   178  0058E0  30                 	db	48
   179  0058E1  30                 	db	48
   180  0058E2  30                 	db	48
   181  0058E3  00                 	db	0
   182                           
   183                           ;initializer for _filename
   184  0058E4  74                 	db	116
   185  0058E5  65                 	db	101
   186  0058E6  73                 	db	115
   187  0058E7  74                 	db	116
   188  0058E8  65                 	db	101
   189  0058E9  2E                 	db	46
   190  0058EA  74                 	db	116
   191  0058EB  78                 	db	120
   192  0058EC  74                 	db	116
   193  0058ED  00                 	db	0
   194  0058EE  00                 	db	0
   195  0058EF  00                 	db	0
   196  0058F0  00                 	db	0
   197  0058F1  00                 	db	0
   198  0058F2  00                 	db	0
   199                           
   200                           	psect	smallconst
   201  000800                     __psmallconst:
   202                           	opt stack 0
   203  000800  00                 	db	0
   204  000801                     mensagem_inicial@F4347:
   205                           	opt stack 0
   206  000801  54                 	db	84
   207  000802  43                 	db	67
   208  000803  43                 	db	67
   209  000804  2D                 	db	45
   210  000805  2D                 	db	45
   211  000806  54                 	db	84
   212  000807  45                 	db	69
   213  000808  4C                 	db	76
   214  000809  45                 	db	69
   215  00080A  4D                 	db	77
   216  00080B  54                 	db	84
   217  00080C  52                 	db	82
   218  00080D  49                 	db	73
   219  00080E  41                 	db	65
   220  00080F  00                 	db	0
   221  000810  00                 	db	0
   222  000811  00                 	db	0
   223  000812                     __end_ofmensagem_inicial@F4347:
   224                           	opt stack 0
   225  000812                     mensagem_inicial@F4345:
   226                           	opt stack 0
   227  000812  46                 	db	70
   228  000813  41                 	db	65
   229  000814  54                 	db	84
   230  000815  45                 	db	69
   231  000816  43                 	db	67
   232  000817  20                 	db	32
   233  000818  53                 	db	83
   234  000819  54                 	db	84
   235  00081A  20                 	db	32
   236  00081B  41                 	db	65
   237  00081C  4E                 	db	78
   238  00081D  44                 	db	68
   239  00081E  52                 	db	82
   240  00081F  45                 	db	69
   241  000820  00                 	db	0
   242  000821  00                 	db	0
   243  000822  00                 	db	0
   244  000823                     __end_ofmensagem_inicial@F4345:
   245                           	opt stack 0
   246  0000                     _RCSTA	set	4011
   247  0000                     _TXSTA	set	4012
   248  0000                     _RCREG	set	4014
   249  0000                     _RCSTAbits	set	4011
   250  0000                     _TXREG	set	4013
   251  0000                     _SPBRG	set	4015
   252  0000                     _PR2	set	4043
   253  0000                     _TMR2	set	4044
   254  0000                     _T2CON	set	4042
   255  0000                     _OSCCONbits	set	4051
   256  0000                     _TRISE	set	3990
   257  0000                     _TRISC	set	3988
   258  0000                     _TRISA	set	3986
   259  0000                     _TRISD	set	3989
   260  0000                     _LATB	set	3978
   261  0000                     _TRISB	set	3987
   262  0000                     _ADCON1	set	4033
   263  0000                     _TMR0L	set	4054
   264  0000                     _TMR0H	set	4055
   265  0000                     _PIE1	set	3997
   266  0000                     _INTCON3	set	4080
   267  0000                     _INTCON2	set	4081
   268  0000                     _INTCON	set	4082
   269  0000                     _SPPCFG	set	3939
   270  0000                     _SPPCON	set	3941
   271  0000                     _T0CON	set	4053
   272  0000                     _PORTDbits	set	3971
   273  0000                     _TRISDbits	set	3989
   274  0000                     _LATCbits	set	3979
   275  0000                     _SSPBUF	set	4041
   276  0000                     _SSPCON1bits	set	4038
   277  0000                     _SSPSTATbits	set	4039
   278  0000                     _SSPCON1	set	4038
   279  0000                     _SSPSTAT	set	4039
   280  0000                     _TRISCbits	set	3988
   281  0000                     _TRISBbits	set	3987
   282  0000                     _LATBbits	set	3978
   283  0000                     _PORTEbits	set	3972
   284  0000                     _T0CONbits	set	4053
   285  0000                     _PCL	set	4089
   286  0000                     _PCLATH	set	4090
   287  0000                     _INTCONbits	set	4082
   288  0000                     _PORTBbits	set	3969
   289  0000                     _PIR1bits	set	3998
   290  0000                     _PIE1bits	set	3997
   291  0000                     _RCIF	set	31989
   292  0000                     _TRMT	set	32097
   293  0000                     _TXEN	set	32101
   294  0000                     _CREN	set	32092
   295  0000                     _SPEN	set	32095
   296  0000                     _SYNC	set	32100
   297  0000                     _BRGH	set	32098
   298  0000                     _TMR2IF	set	31985
   299  0000                     _INT0IE	set	32660
   300  0000                     _INT0IF	set	32657
   301  0000                     _T0IF	set	32658
   302  0000                     _TMR0IF	set	32658
   303  000823                     STR_9:
   304  000823  0A                 	db	10
   305  000824  25                 	db	37
   306  000825  73                 	db	115	;'s'
   307  000826  20                 	db	32
   308  000827  3B                 	db	59	;';'
   309  000828  20                 	db	32
   310  000829  25                 	db	37
   311  00082A  73                 	db	115	;'s'
   312  00082B  20                 	db	32
   313  00082C  3B                 	db	59	;';'
   314  00082D  20                 	db	32
   315  00082E  25                 	db	37
   316  00082F  73                 	db	115	;'s'
   317  000830  20                 	db	32
   318  000831  3B                 	db	59	;';'
   319  000832  20                 	db	32
   320  000833  25                 	db	37
   321  000834  73                 	db	115	;'s'
   322  000835  20                 	db	32
   323  000836  3B                 	db	59	;';'
   324  000837  00                 	db	0
   325  000838  6F                 	db	111	;'o'
   326  000839  20                 	db	32
   327  00083A  53                 	db	83	;'S'
   328  00083B  69                 	db	105	;'i'
   329  00083C  73                 	db	115	;'s'
   330  00083D  74                 	db	116	;'t'
   331  00083E  65                 	db	101	;'e'
   332  00083F  6D                 	db	109	;'m'
   333  000840  61                 	db	97	;'a'
   334  000841  20                 	db	32
   335  000842  64                 	db	100	;'d'
   336  000843  65                 	db	101	;'e'
   337  000844  20                 	db	32
   338  000845  61                 	db	97	;'a'
   339  000846  72                 	db	114	;'r'
   340  000847  71                 	db	113	;'q'
   341  000848  75                 	db	117	;'u'
   342  000849  69                 	db	105	;'i'
   343  00084A  76                 	db	118	;'v'
   344  00084B  6F                 	db	111	;'o'
   345  00084C  00                 	db	0
   346  00084D                     STR_12:
   347  00084D  49                 	db	73	;'I'
   348  00084E  6E                 	db	110	;'n'
   349  00084F  73                 	db	115	;'s'
   350  000850  69                 	db	105	;'i'
   351  000851  72                 	db	114	;'r'
   352  000852  61                 	db	97	;'a'
   353  000853  20                 	db	32
   354  000854  6F                 	db	111	;'o'
   355  000855  20                 	db	32
   356  000856  43                 	db	67	;'C'
   357  000857  61                 	db	97	;'a'
   358  000858  72                 	db	114	;'r'
   359  000859  74                 	db	116	;'t'
   360  00085A  61                 	db	97	;'a'
   361  00085B  6F                 	db	111	;'o'
   362  00085C  00                 	db	0
   363  00085D  45                 	db	69	;'E'
   364  00085E  72                 	db	114	;'r'
   365  00085F  72                 	db	114	;'r'
   366  000860  6F                 	db	111	;'o'
   367  000861  20                 	db	32
   368  000862  61                 	db	97	;'a'
   369  000863  6F                 	db	111	;'o'
   370  000864  20                 	db	32
   371  000865  6D                 	db	109	;'m'
   372  000866  6F                 	db	111	;'o'
   373  000867  6E                 	db	110	;'n'
   374  000868  74                 	db	116	;'t'
   375  000869  61                 	db	97	;'a'
   376  00086A  72                 	db	114	;'r'
   377  00086B  00                 	db	0
   378  00086C  45                 	db	69	;'E'
   379  00086D  72                 	db	114	;'r'
   380  00086E  72                 	db	114	;'r'
   381  00086F  6F                 	db	111	;'o'
   382  000870  20                 	db	32
   383  000871  61                 	db	97	;'a'
   384  000872  6F                 	db	111	;'o'
   385  000873  20                 	db	32
   386  000874  63                 	db	99	;'c'
   387  000875  72                 	db	114	;'r'
   388  000876  69                 	db	105	;'i'
   389  000877  61                 	db	97	;'a'
   390  000878  72                 	db	114	;'r'
   391  000879  00                 	db	0
   392  00087A                     STR_10:
   393  00087A  65                 	db	101	;'e'
   394  00087B  78                 	db	120	;'x'
   395  00087C  74                 	db	116	;'t'
   396  00087D  66                 	db	102	;'f'
   397  00087E  65                 	db	101	;'e'
   398  00087F  6E                 	db	110	;'n'
   399  000880  63                 	db	99	;'c'
   400  000881  65                 	db	101	;'e'
   401  000882  2E                 	db	46
   402  000883  74                 	db	116	;'t'
   403  000884  78                 	db	120	;'x'
   404  000885  74                 	db	116	;'t'
   405  000886  00                 	db	0
   406  000887                     STR_14:
   407  000887  4D                 	db	77	;'M'
   408  000888  4D                 	db	77	;'M'
   409  000889  43                 	db	67	;'C'
   410  00088A  20                 	db	32
   411  00088B  56                 	db	86	;'V'
   412  00088C  65                 	db	101	;'e'
   413  00088D  72                 	db	114	;'r'
   414  00088E  2E                 	db	46
   415  00088F  20                 	db	32
   416  000890  33                 	db	51	;'3'
   417  000891  00                 	db	0
   418  000892                     STR_11:
   419  000892  53                 	db	83	;'S'
   420  000893  65                 	db	101	;'e'
   421  000894  6D                 	db	109	;'m'
   422  000895  20                 	db	32
   423  000896  43                 	db	67	;'C'
   424  000897  61                 	db	97	;'a'
   425  000898  72                 	db	114	;'r'
   426  000899  74                 	db	116	;'t'
   427  00089A  61                 	db	97	;'a'
   428  00089B  6F                 	db	111	;'o'
   429  00089C  00                 	db	0
   430  00089D                     STR_13:
   431  00089D  53                 	db	83	;'S'
   432  00089E  44                 	db	68	;'D'
   433  00089F  20                 	db	32
   434  0008A0  56                 	db	86	;'V'
   435  0008A1  45                 	db	69	;'E'
   436  0008A2  52                 	db	82	;'R'
   437  0008A3  2E                 	db	46
   438  0008A4  20                 	db	32
   439  0008A5  31                 	db	49	;'1'
   440  0008A6  00                 	db	0
   441  0008A7  56                 	db	86	;'V'
   442  0008A8  65                 	db	101	;'e'
   443  0008A9  72                 	db	114	;'r'
   444  0008AA  69                 	db	105	;'i'
   445  0008AB  66                 	db	102	;'f'
   446  0008AC  69                 	db	105	;'i'
   447  0008AD  71                 	db	113	;'q'
   448  0008AE  75                 	db	117	;'u'
   449  0008AF  65                 	db	101	;'e'
   450  0008B0  00                 	db	0
   451  0008B1  6F                 	db	111	;'o'
   452  0008B2  20                 	db	32
   453  0008B3  61                 	db	97	;'a'
   454  0008B4  72                 	db	114	;'r'
   455  0008B5  71                 	db	113	;'q'
   456  0008B6  75                 	db	117	;'u'
   457  0008B7  69                 	db	105	;'i'
   458  0008B8  76                 	db	118	;'v'
   459  0008B9  6F                 	db	111	;'o'
   460  0008BA  00                 	db	0
   461  0008BB  6F                 	db	111	;'o'
   462  0008BC  20                 	db	32
   463  0008BD  63                 	db	99	;'c'
   464  0008BE  61                 	db	97	;'a'
   465  0008BF  72                 	db	114	;'r'
   466  0008C0  74                 	db	116	;'t'
   467  0008C1  61                 	db	97	;'a'
   468  0008C2  6F                 	db	111	;'o'
   469  0008C3  00                 	db	0
   470  0008C4                     STR_2:
   471  0008C4  47                 	db	71	;'G'
   472  0008C5  50                 	db	80	;'P'
   473  0008C6  47                 	db	71	;'G'
   474  0008C7  47                 	db	71	;'G'
   475  0008C8  41                 	db	65	;'A'
   476  0008C9  00                 	db	0
   477  0008CA                     STR_1:
   478  0008CA  47                 	db	71	;'G'
   479  0008CB  50                 	db	80	;'P'
   480  0008CC  52                 	db	82	;'R'
   481  0008CD  4D                 	db	77	;'M'
   482  0008CE  43                 	db	67	;'C'
   483  0008CF  00                 	db	0
   484  0008D0                     STR_16:
   485  0008D0  46                 	db	70	;'F'
   486  0008D1  41                 	db	65	;'A'
   487  0008D2  54                 	db	84	;'T'
   488  0008D3  00                 	db	0
   489  0008D4  0D                 	db	13
   490  0008D5  0A                 	db	10
   491  0008D6  00                 	db	0
   492  0008D7  00                 	db	0	; dummy byte at the end
   493  0000                     
   494                           ; #config settings
   495                           
   496                           	psect	cinit
   497  004DB8                     __pcinit:
   498                           	opt stack 0
   499  004DB8                     start_initialization:
   500                           	opt stack 0
   501  004DB8                     __initialization:
   502                           	opt stack 0
   503                           
   504                           ; Initialize objects allocated to BANK1 (29 bytes)
   505                           ; load TBLPTR registers with __pidataBANK1
   506  004DB8  0ED6               	movlw	low __pidataBANK1
   507  004DBA  6EF6               	movwf	tblptrl,c
   508  004DBC  0E58               	movlw	high __pidataBANK1
   509  004DBE  6EF7               	movwf	tblptrh,c
   510  004DC0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   511  004DC2  6EF8               	movwf	tblptru,c
   512  004DC4  EE01  F0E3         	lfsr	0,__pdataBANK1
   513  004DC8  EE10 F01D          	lfsr	1,29
   514  004DCC                     copy_data0:
   515  004DCC  0009               	tblrd		*+
   516  004DCE  CFF5 FFEE          	movff	tablat,postinc0
   517  004DD2  50E5               	movf	postdec1,w,c
   518  004DD4  50E1               	movf	fsr1l,w,c
   519  004DD6  E1FA               	bnz	copy_data0
   520                           
   521                           ; Initialize objects allocated to COMRAM (1 bytes)
   522                           ; load TBLPTR registers with __pidataCOMRAM
   523  004DD8  0E0E               	movlw	low __pidataCOMRAM
   524  004DDA  6EF6               	movwf	tblptrl,c
   525  004DDC  0E5A               	movlw	high __pidataCOMRAM
   526  004DDE  6EF7               	movwf	tblptrh,c
   527  004DE0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   528  004DE2  6EF8               	movwf	tblptru,c
   529  004DE4  0009               	tblrd		*+	;fetch initializer
   530  004DE6  CFF5 F03E          	movff	tablat,__pdataCOMRAM
   531                           
   532                           ; Clear objects allocated to BIGRAM (544 bytes)
   533  004DEA  EE02  F0C8         	lfsr	0,__pbssBIGRAM
   534  004DEE  EE12 F020          	lfsr	1,544
   535  004DF2                     clear_0:
   536  004DF2  6AEE               	clrf	postinc0,c
   537  004DF4  50E5               	movf	postdec1,w,c
   538  004DF6  50E1               	movf	fsr1l,w,c
   539  004DF8  E1FC               	bnz	clear_0
   540  004DFA  50E2               	movf	fsr1h,w,c
   541  004DFC  E1FA               	bnz	clear_0
   542                           
   543                           ; Clear objects allocated to BANK2 (198 bytes)
   544  004DFE  EE02  F000         	lfsr	0,__pbssBANK2
   545  004E02  0EC6               	movlw	198
   546  004E04                     clear_1:
   547  004E04  6AEE               	clrf	postinc0,c
   548  004E06  06E8               	decf	wreg,f,c
   549  004E08  E1FD               	bnz	clear_1
   550                           
   551                           ; Clear objects allocated to BANK1 (179 bytes)
   552  004E0A  EE01  F000         	lfsr	0,__pbssBANK1
   553  004E0E  0EB3               	movlw	179
   554  004E10                     clear_2:
   555  004E10  6AEE               	clrf	postinc0,c
   556  004E12  06E8               	decf	wreg,f,c
   557  004E14  E1FD               	bnz	clear_2
   558                           
   559                           ; Clear objects allocated to BANK0 (11 bytes)
   560  004E16  EE00  F0F5         	lfsr	0,__pbssBANK0
   561  004E1A  0E0B               	movlw	11
   562  004E1C                     clear_3:
   563  004E1C  6AEE               	clrf	postinc0,c
   564  004E1E  06E8               	decf	wreg,f,c
   565  004E20  E1FD               	bnz	clear_3
   566                           
   567                           ; Clear objects allocated to COMRAM (27 bytes)
   568  004E22  EE00  F023         	lfsr	0,__pbssCOMRAM
   569  004E26  0E1B               	movlw	27
   570  004E28                     clear_4:
   571  004E28  6AEE               	clrf	postinc0,c
   572  004E2A  06E8               	decf	wreg,f,c
   573  004E2C  E1FD               	bnz	clear_4
   574  004E2E                     end_of_initialization:
   575                           	opt stack 0
   576  004E2E                     __end_of__initialization:
   577                           	opt stack 0
   578  004E2E  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   579  004E30  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   580  004E32  0E00               	movlw	low (__Lmediumconst shr (0+16))
   581  004E34  6EF8               	movwf	tblptru,c
   582  004E36  0100               	movlb	0
   583  004E38  EFCB  F02B         	goto	_main	;jump to C main() function
   584                           tblptru	equ	0xFF8
   585                           tblptrh	equ	0xFF7
   586                           tblptrl	equ	0xFF6
   587                           tablat	equ	0xFF5
   588                           postinc0	equ	0xFEE
   589                           wreg	equ	0xFE8
   590                           postdec1	equ	0xFE5
   591                           fsr1h	equ	0xFE2
   592                           fsr1l	equ	0xFE1
   593                           
   594                           	psect	bssCOMRAM
   595  000023                     __pbssCOMRAM:
   596                           	opt stack 0
   597  000023                     _tempo_tarefa:
   598                           	opt stack 0
   599  000023                     	ds	6
   600  000029                     _data_buff:
   601                           	opt stack 0
   602  000029                     	ds	2
   603  00002B                     _GPGGA_ok:
   604                           	opt stack 0
   605  00002B                     	ds	2
   606  00002D                     _GPRMC_ok:
   607                           	opt stack 0
   608  00002D                     	ds	2
   609  00002F                     _timeout_tarefa:
   610                           	opt stack 0
   611  00002F                     	ds	2
   612  000031                     _dado:
   613                           	opt stack 0
   614  000031                     	ds	1
   615  000032                     timer_dois@flag:
   616                           	opt stack 0
   617  000032                     	ds	1
   618  000033                     _estado:
   619                           	opt stack 0
   620  000033                     	ds	1
   621  000034                     _data_hoje:
   622                           	opt stack 0
   623  000034                     	ds	1
   624  000035                     _Term:
   625                           	opt stack 0
   626  000035                     	ds	1
   627  000036                     _SentenceType:
   628                           	opt stack 0
   629  000036                     	ds	1
   630  000037                     _char_number:
   631                           	opt stack 0
   632  000037                     	ds	1
   633  000038                     _metros:
   634                           	opt stack 0
   635  000038                     	ds	1
   636  000039                     _tarefa_em_execucao:
   637                           	opt stack 0
   638  000039                     	ds	1
   639  00003A                     _data_uart_recebe:
   640                           	opt stack 0
   641  00003A                     	ds	1
   642  00003B                     _rawSatellites:
   643                           	opt stack 0
   644  00003B                     	ds	3
   645                           tblptru	equ	0xFF8
   646                           tblptrh	equ	0xFF7
   647                           tblptrl	equ	0xFF6
   648                           tablat	equ	0xFF5
   649                           postinc0	equ	0xFEE
   650                           wreg	equ	0xFE8
   651                           postdec1	equ	0xFE5
   652                           fsr1h	equ	0xFE2
   653                           fsr1l	equ	0xFE1
   654                           
   655                           	psect	dataCOMRAM
   656  00003E                     __pdataCOMRAM:
   657                           	opt stack 0
   658  00003E                     	ds	1
   659                           tblptru	equ	0xFF8
   660                           tblptrh	equ	0xFF7
   661                           tblptrl	equ	0xFF6
   662                           tablat	equ	0xFF5
   663                           postinc0	equ	0xFEE
   664                           wreg	equ	0xFE8
   665                           postdec1	equ	0xFE5
   666                           fsr1h	equ	0xFE2
   667                           fsr1l	equ	0xFE1
   668                           
   669                           	psect	bssBANK0
   670  0000F5                     __pbssBANK0:
   671                           	opt stack 0
   672  0000F5                     _p_tarefas:
   673                           	opt stack 0
   674  0000F5                     	ds	6
   675  0000FB                     _fsid:
   676                           	opt stack 0
   677  0000FB                     	ds	2
   678  0000FD                     _FatFs:
   679                           	opt stack 0
   680  0000FD                     	ds	2
   681  0000FF                     _sinaliza_int_timer:
   682                           	opt stack 0
   683  0000FF                     	ds	1
   684                           tblptru	equ	0xFF8
   685                           tblptrh	equ	0xFF7
   686                           tblptrl	equ	0xFF6
   687                           tablat	equ	0xFF5
   688                           postinc0	equ	0xFEE
   689                           wreg	equ	0xFE8
   690                           postdec1	equ	0xFE5
   691                           fsr1h	equ	0xFE2
   692                           fsr1l	equ	0xFE1
   693                           
   694                           	psect	bssBANK1
   695  000100                     __pbssBANK1:
   696                           	opt stack 0
   697  000100                     _tempo_backup:
   698                           	opt stack 0
   699  000100                     	ds	6
   700  000106                     _string_dado:
   701                           	opt stack 0
   702  000106                     	ds	44
   703  000132                     _fil:
   704                           	opt stack 0
   705  000132                     	ds	28
   706  00014E                     _dado_arquivo:
   707                           	opt stack 0
   708  00014E                     	ds	20
   709  000162                     _rawLongitude:
   710                           	opt stack 0
   711  000162                     	ds	13
   712  00016F                     _rawLatitude:
   713                           	opt stack 0
   714  00016F                     	ds	13
   715  00017C                     _buffer:
   716                           	opt stack 0
   717  00017C                     	ds	12
   718  000188                     _rawTime:
   719                           	opt stack 0
   720  000188                     	ds	11
   721  000193                     _rawAltitude:
   722                           	opt stack 0
   723  000193                     	ds	7
   724  00019A                     _rawDate:
   725                           	opt stack 0
   726  00019A                     	ds	7
   727  0001A1                     _rawCourse:
   728                           	opt stack 0
   729  0001A1                     	ds	6
   730  0001A7                     _rawSpeed:
   731                           	opt stack 0
   732  0001A7                     	ds	6
   733  0001AD                     _sentence:
   734                           	opt stack 0
   735  0001AD                     	ds	6
   736                           tblptru	equ	0xFF8
   737                           tblptrh	equ	0xFF7
   738                           tblptrl	equ	0xFF6
   739                           tablat	equ	0xFF5
   740                           postinc0	equ	0xFEE
   741                           wreg	equ	0xFE8
   742                           postdec1	equ	0xFE5
   743                           fsr1h	equ	0xFE2
   744                           fsr1l	equ	0xFE1
   745                           
   746                           	psect	dataBANK1
   747  0001E3                     __pdataBANK1:
   748                           	opt stack 0
   749  0001E3                     escreve_inteiro_uart@F3958:
   750                           	opt stack 0
   751  0001E3                     	ds	7
   752  0001EA                     escreve_inteiro_lcd@F3966:
   753                           	opt stack 0
   754  0001EA                     	ds	7
   755  0001F1                     _filename:
   756                           	opt stack 0
   757  0001F1                     	ds	15
   758                           tblptru	equ	0xFF8
   759                           tblptrh	equ	0xFF7
   760                           tblptrl	equ	0xFF6
   761                           tablat	equ	0xFF5
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           postdec1	equ	0xFE5
   765                           fsr1h	equ	0xFE2
   766                           fsr1l	equ	0xFE1
   767                           
   768                           	psect	bssBANK2
   769  000200                     __pbssBANK2:
   770                           	opt stack 0
   771  000200                     _poligono_ext:
   772                           	opt stack 0
   773  000200                     	ds	198
   774                           tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           postinc0	equ	0xFEE
   779                           wreg	equ	0xFE8
   780                           postdec1	equ	0xFE5
   781                           fsr1h	equ	0xFE2
   782                           fsr1l	equ	0xFE1
   783                           
   784                           	psect	bssBIGRAM
   785  0002C8                     __pbssBIGRAM:
   786                           	opt stack 0
   787  0002C8                     _fs:
   788                           	opt stack 0
   789  0002C8                     	ds	544
   790                           tblptru	equ	0xFF8
   791                           tblptrh	equ	0xFF7
   792                           tblptrl	equ	0xFF6
   793                           tablat	equ	0xFF5
   794                           postinc0	equ	0xFEE
   795                           wreg	equ	0xFE8
   796                           postdec1	equ	0xFE5
   797                           fsr1h	equ	0xFE2
   798                           fsr1l	equ	0xFE1
   799                           
   800                           	psect	cstackBANK2
   801  0002C6                     __pcstackBANK2:
   802                           	opt stack 0
   803  0002C6                     
   804                           ; 1 bytes @ 0x0
   805  0002C6                     	ds	2
   806                           tblptru	equ	0xFF8
   807                           tblptrh	equ	0xFF7
   808                           tblptrl	equ	0xFF6
   809                           tablat	equ	0xFF5
   810                           postinc0	equ	0xFEE
   811                           wreg	equ	0xFE8
   812                           postdec1	equ	0xFE5
   813                           fsr1h	equ	0xFE2
   814                           fsr1l	equ	0xFE1
   815                           
   816                           	psect	cstackBANK1
   817  0001B3                     __pcstackBANK1:
   818                           	opt stack 0
   819  0001B3                     ?_fprintf:
   820                           	opt stack 0
   821  0001B3                     fprintf@fil:
   822                           	opt stack 0
   823  0001B3                     f_open@fn:
   824                           	opt stack 0
   825                           
   826                           ; 12 bytes @ 0x0
   827  0001B3                     	ds	2
   828  0001B5                     fprintf@str:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x2
   832  0001B5                     	ds	10
   833  0001BF                     f_open@rs:
   834                           	opt stack 0
   835  0001BF                     fprintf@s:
   836                           	opt stack 0
   837                           
   838                           ; 16 bytes @ 0xC
   839  0001BF                     	ds	2
   840  0001C1                     f_open@dw:
   841                           	opt stack 0
   842                           
   843                           ; 4 bytes @ 0xE
   844  0001C1                     	ds	4
   845  0001C5                     f_open@res:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x12
   849  0001C5                     	ds	1
   850  0001C6                     f_open@dir:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x13
   854  0001C6                     	ds	2
   855  0001C8                     f_open@dj:
   856                           	opt stack 0
   857                           
   858                           ; 14 bytes @ 0x15
   859  0001C8                     	ds	7
   860  0001CF                     fprintf@res:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x1C
   864  0001CF                     	ds	2
   865  0001D1                     _fprintf$2542:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x1E
   869  0001D1                     	ds	2
   870  0001D3                     fprintf@w:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x20
   874  0001D3                     	ds	2
   875  0001D5                     fprintf@f:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x22
   879  0001D5                     	ds	1
   880  0001D6                     fprintf@r:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x23
   884  0001D6                     	ds	1
   885  0001D7                     fprintf@val:
   886                           	opt stack 0
   887                           
   888                           ; 4 bytes @ 0x24
   889  0001D7                     	ds	4
   890  0001DB                     fprintf@arp:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x28
   894  0001DB                     	ds	2
   895  0001DD                     fprintf@cc:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x2A
   899  0001DD                     	ds	2
   900  0001DF                     fprintf@i:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x2C
   904  0001DF                     	ds	2
   905  0001E1                     fprintf@c:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x2E
   909  0001E1                     	ds	1
   910  0001E2                     escalonador@cont:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x2F
   914  0001E2                     	ds	1
   915                           tblptru	equ	0xFF8
   916                           tblptrh	equ	0xFF7
   917                           tblptrl	equ	0xFF6
   918                           tablat	equ	0xFF5
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           postdec1	equ	0xFE5
   922                           fsr1h	equ	0xFE2
   923                           fsr1l	equ	0xFE1
   924                           
   925                           	psect	cstackBANK0
   926  000060                     __pcstackBANK0:
   927                           	opt stack 0
   928  000060                     ??_strlen:
   929  000060                     ??_disk_status:
   930  000060                     ?_memcmp:
   931                           	opt stack 0
   932  000060                     ?___wmul:
   933                           	opt stack 0
   934  000060                     ?___lwdiv:
   935                           	opt stack 0
   936  000060                     ?___lwmod:
   937                           	opt stack 0
   938  000060                     ?_get_fattime:
   939                           	opt stack 0
   940  000060                     ?___lmul:
   941                           	opt stack 0
   942  000060                     ?___aldiv:
   943                           	opt stack 0
   944  000060                     ?___lldiv:
   945                           	opt stack 0
   946  000060                     ?___llmod:
   947                           	opt stack 0
   948  000060                     dummy_clocks@n:
   949                           	opt stack 0
   950  000060                     disk_ioctl@cmd:
   951                           	opt stack 0
   952  000060                     escreve_cmd_lcd@comando:
   953                           	opt stack 0
   954  000060                     endereco_cursor_lcd@endereco:
   955                           	opt stack 0
   956  000060                     escreve_caractere_lcd@data:
   957                           	opt stack 0
   958  000060                     f_mount@drv:
   959                           	opt stack 0
   960  000060                     write_timer_zero@timer:
   961                           	opt stack 0
   962  000060                     ___wmul@multiplier:
   963                           	opt stack 0
   964  000060                     ___lwdiv@dividend:
   965                           	opt stack 0
   966  000060                     ___lwmod@dividend:
   967                           	opt stack 0
   968  000060                     memcmp@s1:
   969                           	opt stack 0
   970  000060                     memcpy@d1:
   971                           	opt stack 0
   972  000060                     memset@p1:
   973                           	opt stack 0
   974  000060                     wait_ready@timeout:
   975                           	opt stack 0
   976  000060                     ___lmul@multiplier:
   977                           	opt stack 0
   978  000060                     ___aldiv@dividend:
   979                           	opt stack 0
   980  000060                     ___lldiv@dividend:
   981                           	opt stack 0
   982  000060                     ___llmod@dividend:
   983                           	opt stack 0
   984                           
   985                           ; 4 bytes @ 0x0
   986  000060                     	ds	1
   987  000061                     ??_init_lcd:
   988  000061                     posicao_cursor_lcd@coluna:
   989                           	opt stack 0
   990  000061                     dummy_clocks@i:
   991                           	opt stack 0
   992  000061                     disk_status@result:
   993                           	opt stack 0
   994  000061                     disk_ioctl@buff:
   995                           	opt stack 0
   996  000061                     escreve_frase_ram_lcd@buffer:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x1
  1000  000061                     	ds	1
  1001  000062                     posicao_cursor_lcd@linha:
  1002                           	opt stack 0
  1003  000062                     ___wmul@multiplicand:
  1004                           	opt stack 0
  1005  000062                     ___lwdiv@divisor:
  1006                           	opt stack 0
  1007  000062                     ___lwmod@divisor:
  1008                           	opt stack 0
  1009  000062                     memcmp@s2:
  1010                           	opt stack 0
  1011  000062                     memcpy@s1:
  1012                           	opt stack 0
  1013  000062                     memset@c:
  1014                           	opt stack 0
  1015  000062                     strlen@cp:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x2
  1019  000062                     	ds	1
  1020  000063                     disk_status@pdrv:
  1021                           	opt stack 0
  1022  000063                     posicao_cursor_lcd@endereco:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x3
  1026  000063                     	ds	1
  1027  000064                     ??_mensagem_inicial:
  1028  000064                     ??_get_fattime:
  1029  000064                     wait_ready@res:
  1030                           	opt stack 0
  1031  000064                     disk_status@stat:
  1032                           	opt stack 0
  1033  000064                     ___lwdiv@counter:
  1034                           	opt stack 0
  1035  000064                     monta_sd@dado:
  1036                           	opt stack 0
  1037  000064                     memcmp@n:
  1038                           	opt stack 0
  1039  000064                     memcpy@n:
  1040                           	opt stack 0
  1041  000064                     memset@n:
  1042                           	opt stack 0
  1043  000064                     ___lmul@multiplicand:
  1044                           	opt stack 0
  1045  000064                     ___aldiv@divisor:
  1046                           	opt stack 0
  1047  000064                     ___lldiv@divisor:
  1048                           	opt stack 0
  1049  000064                     ___llmod@divisor:
  1050                           	opt stack 0
  1051                           
  1052                           ; 4 bytes @ 0x4
  1053  000064                     	ds	1
  1054  000065                     validate@fs:
  1055                           	opt stack 0
  1056  000065                     ___lwdiv@quotient:
  1057                           	opt stack 0
  1058  000065                     command@arg:
  1059                           	opt stack 0
  1060                           
  1061                           ; 4 bytes @ 0x5
  1062  000065                     	ds	1
  1063  000066                     ??_memcmp:
  1064  000066                     monta_sd@index:
  1065                           	opt stack 0
  1066  000066                     memcpy@tmp:
  1067                           	opt stack 0
  1068  000066                     make_dirfile@path:
  1069                           	opt stack 0
  1070  000066                     mensagem_inicial@msg_linha_um:
  1071                           	opt stack 0
  1072                           
  1073                           ; 17 bytes @ 0x6
  1074  000066                     	ds	1
  1075  000067                     monta_sd@size:
  1076                           	opt stack 0
  1077  000067                     validate@id:
  1078                           	opt stack 0
  1079  000067                     utoa@buf:
  1080                           	opt stack 0
  1081  000067                     memcpy@d:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x7
  1085  000067                     	ds	1
  1086  000068                     monta_sd@i:
  1087                           	opt stack 0
  1088  000068                     ___aldiv@counter:
  1089                           	opt stack 0
  1090  000068                     make_dirfile@dirname:
  1091                           	opt stack 0
  1092  000068                     ___lmul@product:
  1093                           	opt stack 0
  1094  000068                     ___lldiv@quotient:
  1095                           	opt stack 0
  1096                           
  1097                           ; 4 bytes @ 0x8
  1098  000068                     	ds	1
  1099  000069                     ??_validate:
  1100  000069                     command@CRC:
  1101                           	opt stack 0
  1102  000069                     ___aldiv@sign:
  1103                           	opt stack 0
  1104  000069                     utoa@val:
  1105                           	opt stack 0
  1106  000069                     memcpy@s:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x9
  1110  000069                     	ds	1
  1111  00006A                     ??_make_dirfile:
  1112  00006A                     command@CMD:
  1113                           	opt stack 0
  1114  00006A                     ___aldiv@quotient:
  1115                           	opt stack 0
  1116                           
  1117                           ; 4 bytes @ 0xA
  1118  00006A                     	ds	1
  1119  00006B                     command@argument:
  1120                           	opt stack 0
  1121  00006B                     utoa@base:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0xB
  1125  00006B                     	ds	1
  1126  00006C                     ?_clust2sect:
  1127                           	opt stack 0
  1128  00006C                     ___lldiv@counter:
  1129                           	opt stack 0
  1130  00006C                     sdc_reset@i:
  1131                           	opt stack 0
  1132  00006C                     sdc_disk_read@p_buff:
  1133                           	opt stack 0
  1134  00006C                     sdc_disk_write@p_buff:
  1135                           	opt stack 0
  1136  00006C                     clust2sect@clust:
  1137                           	opt stack 0
  1138  00006C                     _make_dirfile$2056:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0xC
  1142  00006C                     	ds	1
  1143  00006D                     utoa@v:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0xD
  1147  00006D                     	ds	1
  1148  00006E                     make_dirfile@b:
  1149                           	opt stack 0
  1150  00006E                     sdc_reset@count_nosd:
  1151                           	opt stack 0
  1152  00006E                     sdc_disk_read@sector:
  1153                           	opt stack 0
  1154  00006E                     sdc_disk_write@sector:
  1155                           	opt stack 0
  1156  00006E                     configura_baudrate_uart@baudrate:
  1157                           	opt stack 0
  1158                           
  1159                           ; 4 bytes @ 0xE
  1160  00006E                     	ds	1
  1161  00006F                     make_dirfile@t:
  1162                           	opt stack 0
  1163  00006F                     utoa@c:
  1164                           	opt stack 0
  1165                           
  1166                           ; 1 bytes @ 0xF
  1167  00006F                     	ds	1
  1168  000070                     ??_clust2sect:
  1169  000070                     make_dirfile@a:
  1170                           	opt stack 0
  1171  000070                     sdc_reset@count:
  1172                           	opt stack 0
  1173  000070                     itoa@buf:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x10
  1177  000070                     	ds	1
  1178  000071                     make_dirfile@n:
  1179                           	opt stack 0
  1180                           
  1181                           ; 1 bytes @ 0x11
  1182  000071                     	ds	1
  1183  000072                     ??_configura_baudrate_uart:
  1184  000072                     sdc_reset@buff:
  1185                           	opt stack 0
  1186  000072                     sdc_disk_read@count:
  1187                           	opt stack 0
  1188  000072                     sdc_disk_write@count:
  1189                           	opt stack 0
  1190  000072                     make_dirfile@c:
  1191                           	opt stack 0
  1192  000072                     itoa@val:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x12
  1196  000072                     	ds	1
  1197  000073                     ??_sdc_disk_initialize:
  1198  000073                     ??_sdc_disk_read:
  1199  000073                     ??_sdc_disk_write:
  1200                           
  1201                           ; 1 bytes @ 0x13
  1202  000073                     	ds	1
  1203  000074                     sdc_disk_initialize@i:
  1204                           	opt stack 0
  1205  000074                     itoa@base:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x14
  1209  000074                     	ds	2
  1210  000076                     sdc_disk_initialize@stat:
  1211                           	opt stack 0
  1212  000076                     itoa@cp:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x16
  1216  000076                     	ds	1
  1217  000077                     sdc_disk_read@ptr:
  1218                           	opt stack 0
  1219  000077                     sdc_disk_initialize@count1:
  1220                           	opt stack 0
  1221  000077                     sdc_disk_write@i:
  1222                           	opt stack 0
  1223  000077                     mensagem_inicial@msg_dois:
  1224                           	opt stack 0
  1225                           
  1226                           ; 17 bytes @ 0x17
  1227  000077                     	ds	1
  1228  000078                     escreve_inteiro_lcd@valor:
  1229                           	opt stack 0
  1230  000078                     sdc_disk_read@start_add:
  1231                           	opt stack 0
  1232                           
  1233                           ; 4 bytes @ 0x18
  1234  000078                     	ds	1
  1235  000079                     sdc_disk_initialize@crc_number:
  1236                           	opt stack 0
  1237  000079                     sdc_disk_write@count1:
  1238                           	opt stack 0
  1239                           
  1240                           ; 2 bytes @ 0x19
  1241  000079                     	ds	1
  1242  00007A                     escreve_inteiro_lcd@texto:
  1243                           	opt stack 0
  1244                           
  1245                           ; 7 bytes @ 0x1A
  1246  00007A                     	ds	1
  1247  00007B                     sdc_disk_initialize@buff_i:
  1248                           	opt stack 0
  1249  00007B                     sdc_disk_write@res:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x1B
  1253  00007B                     	ds	1
  1254  00007C                     sdc_disk_initialize@ocr:
  1255                           	opt stack 0
  1256  00007C                     sdc_disk_read@length:
  1257                           	opt stack 0
  1258  00007C                     sdc_disk_write@j:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x1C
  1262  00007C                     	ds	1
  1263  00007D                     sdc_disk_initialize@count2:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x1D
  1267  00007D                     	ds	1
  1268  00007E                     sdc_disk_read@buff:
  1269                           	opt stack 0
  1270  00007E                     sdc_disk_write@buff:
  1271                           	opt stack 0
  1272                           
  1273                           ; 1 bytes @ 0x1E
  1274  00007E                     	ds	1
  1275  00007F                     sdc_disk_initialize@buff:
  1276                           	opt stack 0
  1277  00007F                     disk_read@buff:
  1278                           	opt stack 0
  1279  00007F                     disk_write@buff:
  1280                           	opt stack 0
  1281                           
  1282                           ; 2 bytes @ 0x1F
  1283  00007F                     	ds	1
  1284  000080                     disk_initialize@pdrv:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x20
  1288  000080                     	ds	1
  1289  000081                     disk_initialize@stat:
  1290                           	opt stack 0
  1291  000081                     disk_read@sector:
  1292                           	opt stack 0
  1293  000081                     disk_write@sector:
  1294                           	opt stack 0
  1295                           
  1296                           ; 4 bytes @ 0x21
  1297  000081                     	ds	4
  1298  000085                     disk_read@count:
  1299                           	opt stack 0
  1300  000085                     disk_write@count:
  1301                           	opt stack 0
  1302                           
  1303                           ; 1 bytes @ 0x25
  1304  000085                     	ds	1
  1305  000086                     ??_disk_read:
  1306  000086                     ??_disk_write:
  1307                           
  1308                           ; 1 bytes @ 0x26
  1309  000086                     	ds	1
  1310  000087                     disk_read@pdrv:
  1311                           	opt stack 0
  1312  000087                     disk_write@pdrv:
  1313                           	opt stack 0
  1314                           
  1315                           ; 1 bytes @ 0x27
  1316  000087                     	ds	1
  1317  000088                     disk_read@result:
  1318                           	opt stack 0
  1319  000088                     disk_write@result:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x28
  1323  000088                     	ds	2
  1324  00008A                     disk_read@res:
  1325                           	opt stack 0
  1326  00008A                     disk_write@res:
  1327                           	opt stack 0
  1328  00008A                     get_fattime@f_time:
  1329                           	opt stack 0
  1330                           
  1331                           ; 9 bytes @ 0x2A
  1332  00008A                     	ds	1
  1333  00008B                     move_window@sector:
  1334                           	opt stack 0
  1335  00008B                     check_fs@sect:
  1336                           	opt stack 0
  1337                           
  1338                           ; 4 bytes @ 0x2B
  1339  00008B                     	ds	4
  1340  00008F                     ??_move_window:
  1341  00008F                     
  1342                           ; 1 bytes @ 0x2F
  1343  00008F                     	ds	2
  1344  000091                     check_fs@fs:
  1345                           	opt stack 0
  1346                           
  1347                           ; 2 bytes @ 0x31
  1348  000091                     	ds	2
  1349  000093                     auto_mount@path:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x33
  1353  000093                     	ds	2
  1354  000095                     auto_mount@chk_wp:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x35
  1358  000095                     	ds	1
  1359  000096                     ??_auto_mount:
  1360                           
  1361                           ; 1 bytes @ 0x36
  1362  000096                     	ds	3
  1363  000099                     move_window@n:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x39
  1367  000099                     	ds	1
  1368  00009A                     move_window@wsect:
  1369                           	opt stack 0
  1370                           
  1371                           ; 4 bytes @ 0x3A
  1372  00009A                     	ds	4
  1373  00009E                     move_window@fs:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x3E
  1377  00009E                     	ds	2
  1378  0000A0                     ?_get_cluster:
  1379                           	opt stack 0
  1380  0000A0                     sync@fs:
  1381                           	opt stack 0
  1382  0000A0                     get_cluster@clust:
  1383                           	opt stack 0
  1384  0000A0                     put_cluster@clust:
  1385                           	opt stack 0
  1386                           
  1387                           ; 2 bytes @ 0x40
  1388  0000A0                     	ds	2
  1389  0000A2                     ??_get_cluster:
  1390  0000A2                     put_cluster@val:
  1391                           	opt stack 0
  1392  0000A2                     f_sync@fp:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x42
  1396  0000A2                     	ds	2
  1397  0000A4                     ??_put_cluster:
  1398  0000A4                     f_sync@tim:
  1399                           	opt stack 0
  1400                           
  1401                           ; 4 bytes @ 0x44
  1402  0000A4                     	ds	1
  1403  0000A5                     auto_mount@maxclust:
  1404                           	opt stack 0
  1405                           
  1406                           ; 4 bytes @ 0x45
  1407  0000A5                     	ds	3
  1408  0000A8                     f_sync@res:
  1409                           	opt stack 0
  1410  0000A8                     _put_cluster$1946:
  1411                           	opt stack 0
  1412                           
  1413                           ; 2 bytes @ 0x48
  1414  0000A8                     	ds	1
  1415  0000A9                     get_cluster@wc:
  1416                           	opt stack 0
  1417  0000A9                     f_sync@dir:
  1418                           	opt stack 0
  1419  0000A9                     auto_mount@bootsect:
  1420                           	opt stack 0
  1421                           
  1422                           ; 4 bytes @ 0x49
  1423  0000A9                     	ds	1
  1424  0000AA                     _put_cluster$1947:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x4A
  1428  0000AA                     	ds	1
  1429  0000AB                     f_close@fp:
  1430                           	opt stack 0
  1431  0000AB                     get_cluster@fatsect:
  1432                           	opt stack 0
  1433                           
  1434                           ; 4 bytes @ 0x4B
  1435  0000AB                     	ds	1
  1436  0000AC                     put_cluster@fatsect:
  1437                           	opt stack 0
  1438                           
  1439                           ; 4 bytes @ 0x4C
  1440  0000AC                     	ds	1
  1441  0000AD                     f_close@res:
  1442                           	opt stack 0
  1443  0000AD                     auto_mount@totalsect:
  1444                           	opt stack 0
  1445                           
  1446                           ; 4 bytes @ 0x4D
  1447  0000AD                     	ds	2
  1448  0000AF                     get_cluster@bc:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x4F
  1452  0000AF                     	ds	1
  1453  0000B0                     put_cluster@bc:
  1454                           	opt stack 0
  1455                           
  1456                           ; 2 bytes @ 0x50
  1457  0000B0                     	ds	1
  1458  0000B1                     get_cluster@fs:
  1459                           	opt stack 0
  1460  0000B1                     auto_mount@p:
  1461                           	opt stack 0
  1462                           
  1463                           ; 2 bytes @ 0x51
  1464  0000B1                     	ds	1
  1465  0000B2                     put_cluster@p:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x52
  1469  0000B2                     	ds	1
  1470  0000B3                     auto_mount@fmt:
  1471                           	opt stack 0
  1472  0000B3                     next_dir_entry@dj:
  1473                           	opt stack 0
  1474  0000B3                     f_read@fp:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x53
  1478  0000B3                     	ds	1
  1479  0000B4                     auto_mount@stat:
  1480                           	opt stack 0
  1481  0000B4                     put_cluster@fs:
  1482                           	opt stack 0
  1483                           
  1484                           ; 2 bytes @ 0x54
  1485  0000B4                     	ds	1
  1486  0000B5                     ??_next_dir_entry:
  1487  0000B5                     f_read@buff:
  1488                           	opt stack 0
  1489  0000B5                     auto_mount@fatsize:
  1490                           	opt stack 0
  1491                           
  1492                           ; 4 bytes @ 0x55
  1493  0000B5                     	ds	1
  1494  0000B6                     ?_create_chain:
  1495                           	opt stack 0
  1496  0000B6                     remove_chain@clust:
  1497                           	opt stack 0
  1498  0000B6                     create_chain@clust:
  1499                           	opt stack 0
  1500                           
  1501                           ; 2 bytes @ 0x56
  1502  0000B6                     	ds	1
  1503  0000B7                     f_read@btr:
  1504                           	opt stack 0
  1505                           
  1506                           ; 2 bytes @ 0x57
  1507  0000B7                     	ds	1
  1508  0000B8                     
  1509                           ; 1 bytes @ 0x58
  1510  0000B8                     	ds	1
  1511  0000B9                     auto_mount@fs:
  1512                           	opt stack 0
  1513  0000B9                     f_read@br:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x59
  1517  0000B9                     	ds	1
  1518  0000BA                     remove_chain@nxt:
  1519                           	opt stack 0
  1520  0000BA                     create_chain@mcl:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x5A
  1524  0000BA                     	ds	1
  1525  0000BB                     ??_f_read:
  1526                           
  1527                           ; 1 bytes @ 0x5B
  1528  0000BB                     	ds	1
  1529  0000BC                     remove_chain@fs:
  1530                           	opt stack 0
  1531  0000BC                     create_chain@fs:
  1532                           	opt stack 0
  1533  0000BC                     next_dir_entry@clust:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x5C
  1537  0000BC                     	ds	2
  1538  0000BE                     create_chain@cstat:
  1539                           	opt stack 0
  1540  0000BE                     next_dir_entry@idx:
  1541                           	opt stack 0
  1542                           
  1543                           ; 2 bytes @ 0x5E
  1544  0000BE                     	ds	2
  1545  0000C0                     create_chain@scl:
  1546                           	opt stack 0
  1547  0000C0                     trace_path@dj:
  1548                           	opt stack 0
  1549                           
  1550                           ; 2 bytes @ 0x60
  1551  0000C0                     	ds	2
  1552  0000C2                     create_chain@ncl:
  1553                           	opt stack 0
  1554  0000C2                     trace_path@fn:
  1555                           	opt stack 0
  1556                           
  1557                           ; 2 bytes @ 0x62
  1558  0000C2                     	ds	1
  1559  0000C3                     f_read@res:
  1560                           	opt stack 0
  1561                           
  1562                           ; 1 bytes @ 0x63
  1563  0000C3                     	ds	1
  1564  0000C4                     trace_path@path:
  1565                           	opt stack 0
  1566  0000C4                     reserve_direntry@dj:
  1567                           	opt stack 0
  1568  0000C4                     f_write@fp:
  1569                           	opt stack 0
  1570  0000C4                     f_lseek@fp:
  1571                           	opt stack 0
  1572  0000C4                     f_read@remain:
  1573                           	opt stack 0
  1574                           
  1575                           ; 4 bytes @ 0x64
  1576  0000C4                     	ds	2
  1577  0000C6                     trace_path@dir:
  1578                           	opt stack 0
  1579  0000C6                     reserve_direntry@dir:
  1580                           	opt stack 0
  1581  0000C6                     f_write@buff:
  1582                           	opt stack 0
  1583  0000C6                     f_lseek@ofs:
  1584                           	opt stack 0
  1585                           
  1586                           ; 4 bytes @ 0x66
  1587  0000C6                     	ds	2
  1588  0000C8                     ??_trace_path:
  1589  0000C8                     ??_reserve_direntry:
  1590  0000C8                     f_write@btw:
  1591                           	opt stack 0
  1592  0000C8                     f_read@sect:
  1593                           	opt stack 0
  1594                           
  1595                           ; 4 bytes @ 0x68
  1596  0000C8                     	ds	2
  1597  0000CA                     ??_f_lseek:
  1598  0000CA                     f_write@bw:
  1599                           	opt stack 0
  1600  0000CA                     reserve_direntry@sector:
  1601                           	opt stack 0
  1602                           
  1603                           ; 4 bytes @ 0x6A
  1604  0000CA                     	ds	2
  1605  0000CC                     ??_f_write:
  1606  0000CC                     _trace_path$2103:
  1607                           	opt stack 0
  1608  0000CC                     f_read@rbuff:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0x6C
  1612  0000CC                     	ds	2
  1613  0000CE                     reserve_direntry@n:
  1614                           	opt stack 0
  1615  0000CE                     _trace_path$2105:
  1616                           	opt stack 0
  1617  0000CE                     f_read@clust:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x6E
  1621  0000CE                     	ds	1
  1622  0000CF                     reserve_direntry@dptr:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x6F
  1626  0000CF                     	ds	1
  1627  0000D0                     trace_path@fs:
  1628                           	opt stack 0
  1629  0000D0                     f_read@cc:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x70
  1633  0000D0                     	ds	1
  1634  0000D1                     reserve_direntry@c:
  1635                           	opt stack 0
  1636                           
  1637                           ; 1 bytes @ 0x71
  1638  0000D1                     	ds	1
  1639  0000D2                     trace_path@clust:
  1640                           	opt stack 0
  1641  0000D2                     reserve_direntry@clust:
  1642                           	opt stack 0
  1643  0000D2                     f_read@rcnt:
  1644                           	opt stack 0
  1645                           
  1646                           ; 2 bytes @ 0x72
  1647  0000D2                     	ds	2
  1648  0000D4                     trace_path@ds:
  1649                           	opt stack 0
  1650  0000D4                     reserve_direntry@fs:
  1651                           	opt stack 0
  1652  0000D4                     fgets@buff:
  1653                           	opt stack 0
  1654                           
  1655                           ; 2 bytes @ 0x74
  1656  0000D4                     	ds	1
  1657  0000D5                     trace_path@dptr:
  1658                           	opt stack 0
  1659                           
  1660                           ; 2 bytes @ 0x75
  1661  0000D5                     	ds	1
  1662  0000D6                     f_lseek@res:
  1663                           	opt stack 0
  1664  0000D6                     fgets@len:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0x76
  1668  0000D6                     	ds	1
  1669  0000D7                     f_open@fp:
  1670                           	opt stack 0
  1671  0000D7                     f_lseek@ifptr:
  1672                           	opt stack 0
  1673                           
  1674                           ; 4 bytes @ 0x77
  1675  0000D7                     	ds	1
  1676  0000D8                     f_write@res:
  1677                           	opt stack 0
  1678  0000D8                     fgets@fil:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x78
  1682  0000D8                     	ds	1
  1683  0000D9                     f_open@path:
  1684                           	opt stack 0
  1685  0000D9                     f_write@wbuff:
  1686                           	opt stack 0
  1687                           
  1688                           ; 2 bytes @ 0x79
  1689  0000D9                     	ds	1
  1690  0000DA                     ??_fgets:
  1691                           
  1692                           ; 1 bytes @ 0x7A
  1693  0000DA                     	ds	1
  1694  0000DB                     f_open@mode:
  1695                           	opt stack 0
  1696  0000DB                     f_write@sect:
  1697                           	opt stack 0
  1698  0000DB                     f_lseek@csize:
  1699                           	opt stack 0
  1700                           
  1701                           ; 4 bytes @ 0x7B
  1702  0000DB                     	ds	1
  1703  0000DC                     ??_f_open:
  1704                           
  1705                           ; 1 bytes @ 0x7C
  1706  0000DC                     	ds	3
  1707  0000DF                     f_write@cc:
  1708                           	opt stack 0
  1709  0000DF                     f_lseek@clust:
  1710                           	opt stack 0
  1711  0000DF                     fgets@i:
  1712                           	opt stack 0
  1713                           
  1714                           ; 2 bytes @ 0x7F
  1715  0000DF                     	ds	2
  1716  0000E1                     f_write@clust:
  1717                           	opt stack 0
  1718  0000E1                     fgets@rc:
  1719                           	opt stack 0
  1720                           
  1721                           ; 2 bytes @ 0x81
  1722  0000E1                     	ds	2
  1723  0000E3                     f_write@wcnt:
  1724                           	opt stack 0
  1725  0000E3                     fgets@p:
  1726                           	opt stack 0
  1727                           
  1728                           ; 2 bytes @ 0x83
  1729  0000E3                     	ds	2
  1730  0000E5                     ?_leitura_sdcard:
  1731                           	opt stack 0
  1732  0000E5                     ?_fputc:
  1733                           	opt stack 0
  1734  0000E5                     fputc@chr:
  1735                           	opt stack 0
  1736                           
  1737                           ; 2 bytes @ 0x85
  1738  0000E5                     	ds	2
  1739  0000E7                     leitura_sdcard@offset:
  1740                           	opt stack 0
  1741  0000E7                     fputc@fil:
  1742                           	opt stack 0
  1743                           
  1744                           ; 2 bytes @ 0x87
  1745  0000E7                     	ds	2
  1746  0000E9                     verifica_fence_externo@j:
  1747                           	opt stack 0
  1748  0000E9                     fputc@c:
  1749                           	opt stack 0
  1750                           
  1751                           ; 1 bytes @ 0x89
  1752  0000E9                     	ds	1
  1753  0000EA                     verifica_fence_externo@point:
  1754                           	opt stack 0
  1755  0000EA                     fputc@bw:
  1756                           	opt stack 0
  1757                           
  1758                           ; 2 bytes @ 0x8A
  1759  0000EA                     	ds	1
  1760  0000EB                     verifica_fence_externo@caractere_gps:
  1761                           	opt stack 0
  1762                           
  1763                           ; 1 bytes @ 0x8B
  1764  0000EB                     	ds	1
  1765  0000EC                     ?_fputs:
  1766                           	opt stack 0
  1767  0000EC                     verifica_fence_externo@size:
  1768                           	opt stack 0
  1769  0000EC                     fputs@str:
  1770                           	opt stack 0
  1771                           
  1772                           ; 2 bytes @ 0x8C
  1773  0000EC                     	ds	1
  1774  0000ED                     verifica_fence_externo@count:
  1775                           	opt stack 0
  1776                           
  1777                           ; 1 bytes @ 0x8D
  1778  0000ED                     	ds	1
  1779  0000EE                     verifica_fence_externo@point_buff:
  1780                           	opt stack 0
  1781  0000EE                     fputs@fil:
  1782                           	opt stack 0
  1783                           
  1784                           ; 2 bytes @ 0x8E
  1785  0000EE                     	ds	2
  1786  0000F0                     ??_fputs:
  1787  0000F0                     verifica_fence_externo@i:
  1788                           	opt stack 0
  1789                           
  1790                           ; 1 bytes @ 0x90
  1791  0000F0                     	ds	1
  1792  0000F1                     fputs@n:
  1793                           	opt stack 0
  1794                           
  1795                           ; 2 bytes @ 0x91
  1796  0000F1                     	ds	2
  1797  0000F3                     ??_fprintf:
  1798                           
  1799                           ; 1 bytes @ 0x93
  1800  0000F3                     	ds	2
  1801                           tblptru	equ	0xFF8
  1802                           tblptrh	equ	0xFF7
  1803                           tblptrl	equ	0xFF6
  1804                           tablat	equ	0xFF5
  1805                           postinc0	equ	0xFEE
  1806                           wreg	equ	0xFE8
  1807                           postdec1	equ	0xFE5
  1808                           fsr1h	equ	0xFE2
  1809                           fsr1l	equ	0xFE1
  1810                           
  1811                           	psect	cstackCOMRAM
  1812  000001                     __pcstackCOMRAM:
  1813                           	opt stack 0
  1814  000001                     ?_strcmp:
  1815                           	opt stack 0
  1816  000001                     stringcpy@str1:
  1817                           	opt stack 0
  1818  000001                     strcmp@s1:
  1819                           	opt stack 0
  1820  000001                     i2write_timer_zero@timer0:
  1821                           	opt stack 0
  1822                           
  1823                           ; 2 bytes @ 0x0
  1824  000001                     	ds	2
  1825  000003                     stringcpy@str2:
  1826                           	opt stack 0
  1827  000003                     strcmp@s2:
  1828                           	opt stack 0
  1829  000003                     i2write_timer_zero@timer:
  1830                           	opt stack 0
  1831                           
  1832                           ; 2 bytes @ 0x2
  1833  000003                     	ds	2
  1834  000005                     ??_strcmp:
  1835  000005                     stringcpy@dir:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x4
  1839  000005                     	ds	1
  1840  000006                     strcmp@r:
  1841                           	opt stack 0
  1842                           
  1843                           ; 1 bytes @ 0x5
  1844  000006                     	ds	1
  1845  000007                     ??_stringcpy:
  1846                           
  1847                           ; 1 bytes @ 0x6
  1848  000007                     	ds	2
  1849  000009                     stringcpy@chr:
  1850                           	opt stack 0
  1851                           
  1852                           ; 1 bytes @ 0x8
  1853  000009                     	ds	1
  1854  00000A                     GPSRead@buff:
  1855                           	opt stack 0
  1856                           
  1857                           ; 1 bytes @ 0x9
  1858  00000A                     	ds	1
  1859  00000B                     GPSRead@c:
  1860                           	opt stack 0
  1861                           
  1862                           ; 1 bytes @ 0xA
  1863  00000B                     	ds	1
  1864  00000C                     ??_isr:
  1865                           
  1866                           ; 1 bytes @ 0xB
  1867  00000C                     	ds	20
  1868  000020                     isr@cont:
  1869                           	opt stack 0
  1870                           
  1871                           ; 1 bytes @ 0x1F
  1872  000020                     	ds	1
  1873  000021                     ??_dummy_clocks:
  1874  000021                     ?_strlen:
  1875                           	opt stack 0
  1876  000021                     response@buff:
  1877                           	opt stack 0
  1878  000021                     escreve_SPI@TempVar:
  1879                           	opt stack 0
  1880  000021                     disk_ioctl@pdrv:
  1881                           	opt stack 0
  1882  000021                     sdc_disk_status@stat:
  1883                           	opt stack 0
  1884  000021                     delay@contador_ext:
  1885                           	opt stack 0
  1886  000021                     ___llmod@counter:
  1887                           	opt stack 0
  1888  000021                     ___lwmod@counter:
  1889                           	opt stack 0
  1890  000021                     write_timer_zero@timer0:
  1891                           	opt stack 0
  1892  000021                     configura_baudrate_uart@x:
  1893                           	opt stack 0
  1894  000021                     clust2sect@fs:
  1895                           	opt stack 0
  1896  000021                     f_mount@fs:
  1897                           	opt stack 0
  1898  000021                     ___wmul@product:
  1899                           	opt stack 0
  1900  000021                     memset@p:
  1901                           	opt stack 0
  1902  000021                     strlen@s:
  1903                           	opt stack 0
  1904                           
  1905                           ; 2 bytes @ 0x20
  1906  000021                     	ds	1
  1907  000022                     escreve_SPI@dado:
  1908                           	opt stack 0
  1909  000022                     disk_ioctl@res:
  1910                           	opt stack 0
  1911  000022                     sdc_disk_status@pdrv:
  1912                           	opt stack 0
  1913  000022                     delay@contador_int:
  1914                           	opt stack 0
  1915                           
  1916                           ; 1 bytes @ 0x21
  1917  000022                     	ds	1
  1918  000023                     tblptru	equ	0xFF8
  1919                           tblptrh	equ	0xFF7
  1920                           tblptrl	equ	0xFF6
  1921                           tablat	equ	0xFF5
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           postdec1	equ	0xFE5
  1925                           fsr1h	equ	0xFE2
  1926                           fsr1l	equ	0xFE1
  1927                           
  1928                           ; 1 bytes @ 0x22
  1929 ;;
  1930 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1931 ;;
  1932 ;; *************** function _main *****************
  1933 ;; Defined at:
  1934 ;;		line 206 in file "main.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1948 ;;      Params:         0       0       0       0       0       0       0       0       0
  1949 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1950 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1951 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1952 ;;Total ram usage:        0 bytes
  1953 ;; Hardware stack levels required when called:   18
  1954 ;; This function calls:
  1955 ;;		_dados_gps_to_sd
  1956 ;;		_escalonador
  1957 ;;		_inicializa_tarefas
  1958 ;;		_inicializa_uart
  1959 ;;		_init_hardware
  1960 ;;		_init_lcd
  1961 ;;		_mensagem_inicial
  1962 ;; This function is called by:
  1963 ;;		Startup code after reset
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           	psect	text0
  1968  005796                     __ptext0:
  1969                           	opt stack 0
  1970  005796                     _main:
  1971                           	opt stack 13
  1972                           
  1973                           ;main.c: 208: init_hardware();
  1974                           
  1975                           ;incstack = 0
  1976  005796  EC95  F02C         	call	_init_hardware	;wreg free
  1977                           
  1978                           ;main.c: 209: T0CONbits.TMR0ON = 0;
  1979  00579A  9ED5               	bcf	4053,7,c	;volatile
  1980                           
  1981                           ;main.c: 210: init_lcd();
  1982  00579C  ECE4  F024         	call	_init_lcd	;wreg free
  1983                           
  1984                           ;main.c: 211: mensagem_inicial();
  1985  0057A0  EC99  F026         	call	_mensagem_inicial	;wreg free
  1986                           
  1987                           ;main.c: 212: inicializa_tarefas();
  1988  0057A4  ECC3  F029         	call	_inicializa_tarefas	;wreg free
  1989                           
  1990                           ;main.c: 213: inicializa_uart();
  1991  0057A8  EC37  F02C         	call	_inicializa_uart	;wreg free
  1992                           
  1993                           ;main.c: 214: T0CONbits.TMR0ON = 1;
  1994  0057AC  8ED5               	bsf	4053,7,c	;volatile
  1995  0057AE                     
  1996                           ;main.c: 216: {
  1997                           ;main.c: 218: if ((sinaliza_int_timer == 1) && (3))
  1998  0057AE  0100               	movlb	0	; () banked
  1999  0057B0  05FF               	decf	_sinaliza_int_timer& (0+255),w,b
  2000  0057B2  A4D8               	btfss	status,2,c
  2001  0057B4  D004               	goto	l108
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;main.c: 219: {
  2005                           ;main.c: 220: sinaliza_int_timer = 0;
  2006  0057B6  0E00               	movlw	0
  2007  0057B8  6FFF               	movwf	_sinaliza_int_timer& (0+255),b
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;main.c: 221: escalonador();
  2011  0057BA  ECEE  F023         	call	_escalonador	;wreg free
  2012  0057BE                     l108:
  2013                           
  2014                           ;main.c: 222: }
  2015                           ;main.c: 223: dados_gps_to_sd();
  2016  0057BE  EC30  F02B         	call	_dados_gps_to_sd	;wreg free
  2017  0057C2  D7F5               	goto	l107
  2018  0057C4                     __end_of_main:
  2019                           	opt stack 0
  2020                           tblptru	equ	0xFF8
  2021                           tblptrh	equ	0xFF7
  2022                           tblptrl	equ	0xFF6
  2023                           tablat	equ	0xFF5
  2024                           postinc0	equ	0xFEE
  2025                           wreg	equ	0xFE8
  2026                           postdec1	equ	0xFE5
  2027                           fsr1h	equ	0xFE2
  2028                           fsr1l	equ	0xFE1
  2029                           status	equ	0xFD8
  2030                           
  2031 ;; *************** function _mensagem_inicial *****************
  2032 ;; Defined at:
  2033 ;;		line 233 in file "main.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;		None
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  msg_dois       17   23[BANK0 ] const unsigned char [17]
  2038 ;;  msg_linha_um   17    6[BANK0 ] const unsigned char [17]
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  1    wreg      void 
  2041 ;; Registers used:
  2042 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2048 ;;      Params:         0       0       0       0       0       0       0       0       0
  2049 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2050 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2051 ;;      Totals:         0      36       0       0       0       0       0       0       0
  2052 ;;Total ram usage:       36 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; Hardware stack levels required when called:    6
  2055 ;; This function calls:
  2056 ;;		_escreve_cmd_lcd
  2057 ;;		_escreve_frase_ram_lcd
  2058 ;;		_posicao_cursor_lcd
  2059 ;; This function is called by:
  2060 ;;		_main
  2061 ;; This function uses a non-reentrant model
  2062 ;;
  2063                           
  2064                           	psect	text1
  2065  004D32                     __ptext1:
  2066                           	opt stack 0
  2067  004D32                     _mensagem_inicial:
  2068                           	opt stack 24
  2069                           
  2070                           ;main.c: 235: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  2071                           
  2072                           ;incstack = 0
  2073  004D32  0E12               	movlw	low mensagem_inicial@F4345
  2074  004D34  6EF6               	movwf	tblptrl,c
  2075  004D36                     	if	1	;There is more than 1 active tblptr byte
  2076  004D36  0E08               	movlw	high mensagem_inicial@F4345
  2077  004D38  6EF7               	movwf	tblptrh,c
  2078  004D3A                     	endif
  2079  004D3A                     	if	0	;There are less than 3 active tblptr bytes
  2080  004D3A                     	endif
  2081  004D3A  EE20  F066         	lfsr	2,mensagem_inicial@msg_linha_um
  2082  004D3E  0E10               	movlw	16
  2083  004D40                     u14120:
  2084  004D40  0009               	tblrd		*+
  2085  004D42  CFF5 FFDE          	movff	tablat,postinc2
  2086  004D46  06E8               	decf	wreg,f,c
  2087  004D48  E2FB               	bc	u14120
  2088                           
  2089                           ;main.c: 236: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  2090  004D4A  0E01               	movlw	low mensagem_inicial@F4347
  2091  004D4C  6EF6               	movwf	tblptrl,c
  2092  004D4E                     	if	1	;There is more than 1 active tblptr byte
  2093  004D4E  0E08               	movlw	high mensagem_inicial@F4347
  2094  004D50  6EF7               	movwf	tblptrh,c
  2095  004D52                     	endif
  2096  004D52                     	if	0	;There are less than 3 active tblptr bytes
  2097  004D52                     	endif
  2098  004D52  EE20  F077         	lfsr	2,mensagem_inicial@msg_dois
  2099  004D56  0E10               	movlw	16
  2100  004D58                     u14130:
  2101  004D58  0009               	tblrd		*+
  2102  004D5A  CFF5 FFDE          	movff	tablat,postinc2
  2103  004D5E  06E8               	decf	wreg,f,c
  2104  004D60  E2FB               	bc	u14130
  2105                           
  2106                           ;main.c: 238: posicao_cursor_lcd(1,0);
  2107  004D62  0E00               	movlw	0
  2108  004D64  0100               	movlb	0	; () banked
  2109  004D66  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2110  004D68  0E01               	movlw	1
  2111  004D6A  ECA2  F027         	call	_posicao_cursor_lcd
  2112                           
  2113                           ;main.c: 239: escreve_frase_ram_lcd(msg_linha_um);
  2114  004D6E  0E66               	movlw	low mensagem_inicial@msg_linha_um
  2115  004D70  0100               	movlb	0	; () banked
  2116  004D72  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2117  004D74  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2118  004D76  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2119  004D78  EC99  F029         	call	_escreve_frase_ram_lcd	;wreg free
  2120                           
  2121                           ;main.c: 241: posicao_cursor_lcd(2,0);
  2122  004D7C  0E00               	movlw	0
  2123  004D7E  0100               	movlb	0	; () banked
  2124  004D80  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2125  004D82  0E02               	movlw	2
  2126  004D84  ECA2  F027         	call	_posicao_cursor_lcd
  2127                           
  2128                           ;main.c: 242: escreve_frase_ram_lcd(msg_dois);
  2129  004D88  0E77               	movlw	low mensagem_inicial@msg_dois
  2130  004D8A  0100               	movlb	0	; () banked
  2131  004D8C  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2132  004D8E  0E00               	movlw	high mensagem_inicial@msg_dois
  2133  004D90  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2134  004D92  EC99  F029         	call	_escreve_frase_ram_lcd	;wreg free
  2135                           
  2136                           ;main.c: 243: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2137  004D96  0E3D               	movlw	61
  2138  004D98  0100               	movlb	0	; () banked
  2139  004D9A  6F65               	movwf	(??_mensagem_inicial+1)& (0+255),b
  2140  004D9C  0EE1               	movlw	225
  2141  004D9E  6F64               	movwf	??_mensagem_inicial& (0+255),b
  2142  004DA0  0E3F               	movlw	63
  2143  004DA2                     u14517:
  2144  004DA2  2EE8               	decfsz	wreg,f,c
  2145  004DA4  D7FE               	bra	u14517
  2146  004DA6  2F64               	decfsz	??_mensagem_inicial& (0+255),f,b
  2147  004DA8  D7FC               	bra	u14517
  2148  004DAA  2F65               	decfsz	(??_mensagem_inicial+1)& (0+255),f,b
  2149  004DAC  D7FA               	bra	u14517
  2150  004DAE  D000               	nop2	
  2151                           
  2152                           ;main.c: 244: escreve_cmd_lcd(0b00000001);
  2153  004DB0  0E01               	movlw	1
  2154  004DB2  EC33  F025         	call	_escreve_cmd_lcd
  2155  004DB6  0012               	return		;funcret
  2156  004DB8                     __end_of_mensagem_inicial:
  2157                           	opt stack 0
  2158                           tblptru	equ	0xFF8
  2159                           tblptrh	equ	0xFF7
  2160                           tblptrl	equ	0xFF6
  2161                           tablat	equ	0xFF5
  2162                           postinc0	equ	0xFEE
  2163                           wreg	equ	0xFE8
  2164                           postdec1	equ	0xFE5
  2165                           fsr1h	equ	0xFE2
  2166                           fsr1l	equ	0xFE1
  2167                           postinc2	equ	0xFDE
  2168                           status	equ	0xFD8
  2169                           
  2170 ;; *************** function _init_lcd *****************
  2171 ;; Defined at:
  2172 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;		None
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;		None
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  1    wreg      void 
  2179 ;; Registers used:
  2180 ;;		wreg, status,2, status,0, cstack
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2186 ;;      Params:         0       0       0       0       0       0       0       0       0
  2187 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2188 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2189 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2190 ;;Total ram usage:        1 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    5
  2193 ;; This function calls:
  2194 ;;		_delay
  2195 ;;		_escreve_cmd_lcd
  2196 ;; This function is called by:
  2197 ;;		_main
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text2
  2202  0049C8                     __ptext2:
  2203                           	opt stack 0
  2204  0049C8                     _init_lcd:
  2205                           	opt stack 25
  2206                           
  2207                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2208                           
  2209                           ;incstack = 0
  2210  0049C8  9495               	bcf	3989,2,c	;volatile
  2211                           
  2212                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2213  0049CA  9295               	bcf	3989,1,c	;volatile
  2214                           
  2215                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2216  0049CC  9095               	bcf	3989,0,c	;volatile
  2217                           
  2218                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2219  0049CE  9895               	bcf	3989,4,c	;volatile
  2220                           
  2221                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2222  0049D0  9A95               	bcf	3989,5,c	;volatile
  2223                           
  2224                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2225  0049D2  9C95               	bcf	3989,6,c	;volatile
  2226                           
  2227                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2228  0049D4  9E95               	bcf	3989,7,c	;volatile
  2229                           
  2230                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2231  0049D6  9483               	bcf	3971,2,c	;volatile
  2232                           
  2233                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2234  0049D8  9283               	bcf	3971,1,c	;volatile
  2235                           
  2236                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2237  0049DA  9083               	bcf	3971,0,c	;volatile
  2238                           
  2239                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2240  0049DC  9E83               	bcf	3971,7,c	;volatile
  2241                           
  2242                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2243  0049DE  9C83               	bcf	3971,6,c	;volatile
  2244                           
  2245                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2246  0049E0  8A83               	bsf	3971,5,c	;volatile
  2247                           
  2248                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2249  0049E2  8883               	bsf	3971,4,c	;volatile
  2250                           
  2251                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2252  0049E4  0EEA               	movlw	234
  2253  0049E6  0100               	movlb	0	; () banked
  2254  0049E8  6F61               	movwf	??_init_lcd& (0+255),b
  2255  0049EA  0EC3               	movlw	195
  2256  0049EC                     u14527:
  2257  0049EC  2EE8               	decfsz	wreg,f,c
  2258  0049EE  D7FE               	bra	u14527
  2259  0049F0  2F61               	decfsz	??_init_lcd& (0+255),f,b
  2260  0049F2  D7FC               	bra	u14527
  2261                           
  2262                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2263  0049F4  8083               	bsf	3971,0,c	;volatile
  2264                           
  2265                           ;display_lcd.c: 108: delay();
  2266  0049F6  EC49  F02C         	call	_delay	;wreg free
  2267                           
  2268                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2269  0049FA  9083               	bcf	3971,0,c	;volatile
  2270                           
  2271                           ;display_lcd.c: 110: delay();
  2272  0049FC  EC49  F02C         	call	_delay	;wreg free
  2273                           
  2274                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2275  004A00  0E4E               	movlw	78
  2276  004A02  0100               	movlb	0	; () banked
  2277  004A04  6F61               	movwf	??_init_lcd& (0+255),b
  2278  004A06  0EEB               	movlw	235
  2279  004A08                     u14537:
  2280  004A08  2EE8               	decfsz	wreg,f,c
  2281  004A0A  D7FE               	bra	u14537
  2282  004A0C  2F61               	decfsz	??_init_lcd& (0+255),f,b
  2283  004A0E  D7FC               	bra	u14537
  2284                           
  2285                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2286  004A10  8083               	bsf	3971,0,c	;volatile
  2287                           
  2288                           ;display_lcd.c: 119: delay();
  2289  004A12  EC49  F02C         	call	_delay	;wreg free
  2290                           
  2291                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2292  004A16  9083               	bcf	3971,0,c	;volatile
  2293                           
  2294                           ;display_lcd.c: 121: delay();
  2295  004A18  EC49  F02C         	call	_delay	;wreg free
  2296                           
  2297                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2298  004A1C  0E4E               	movlw	78
  2299  004A1E  0100               	movlb	0	; () banked
  2300  004A20  6F61               	movwf	??_init_lcd& (0+255),b
  2301  004A22  0EEB               	movlw	235
  2302  004A24                     u14547:
  2303  004A24  2EE8               	decfsz	wreg,f,c
  2304  004A26  D7FE               	bra	u14547
  2305  004A28  2F61               	decfsz	??_init_lcd& (0+255),f,b
  2306  004A2A  D7FC               	bra	u14547
  2307                           
  2308                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2309  004A2C  8083               	bsf	3971,0,c	;volatile
  2310                           
  2311                           ;display_lcd.c: 130: delay();
  2312  004A2E  EC49  F02C         	call	_delay	;wreg free
  2313                           
  2314                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2315  004A32  9083               	bcf	3971,0,c	;volatile
  2316                           
  2317                           ;display_lcd.c: 132: delay();
  2318  004A34  EC49  F02C         	call	_delay	;wreg free
  2319                           
  2320                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2321  004A38  9E83               	bcf	3971,7,c	;volatile
  2322                           
  2323                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2324  004A3A  9C83               	bcf	3971,6,c	;volatile
  2325                           
  2326                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2327  004A3C  8A83               	bsf	3971,5,c	;volatile
  2328                           
  2329                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2330  004A3E  9883               	bcf	3971,4,c	;volatile
  2331                           
  2332                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2333  004A40  8083               	bsf	3971,0,c	;volatile
  2334                           
  2335                           ;display_lcd.c: 143: delay();
  2336  004A42  EC49  F02C         	call	_delay	;wreg free
  2337                           
  2338                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2339  004A46  9083               	bcf	3971,0,c	;volatile
  2340                           
  2341                           ;display_lcd.c: 145: delay();
  2342  004A48  EC49  F02C         	call	_delay	;wreg free
  2343                           
  2344                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2345  004A4C  0E28               	movlw	40
  2346  004A4E  EC33  F025         	call	_escreve_cmd_lcd
  2347                           
  2348                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2349  004A52  0E06               	movlw	6
  2350  004A54  EC33  F025         	call	_escreve_cmd_lcd
  2351                           
  2352                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2353  004A58  0E0E               	movlw	14
  2354  004A5A  EC33  F025         	call	_escreve_cmd_lcd
  2355                           
  2356                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2357  004A5E  0E01               	movlw	1
  2358  004A60  EC33  F025         	call	_escreve_cmd_lcd
  2359  004A64  0012               	return		;funcret
  2360  004A66                     __end_of_init_lcd:
  2361                           	opt stack 0
  2362                           tblptru	equ	0xFF8
  2363                           tblptrh	equ	0xFF7
  2364                           tblptrl	equ	0xFF6
  2365                           tablat	equ	0xFF5
  2366                           postinc0	equ	0xFEE
  2367                           wreg	equ	0xFE8
  2368                           postdec1	equ	0xFE5
  2369                           fsr1h	equ	0xFE2
  2370                           fsr1l	equ	0xFE1
  2371                           postinc2	equ	0xFDE
  2372                           status	equ	0xFD8
  2373                           
  2374 ;; *************** function _escreve_cmd_lcd *****************
  2375 ;; Defined at:
  2376 ;;		line 162 in file "bibliotecas/display_lcd.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;  comando         1    wreg     unsigned char 
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;  comando         1    0[BANK0 ] unsigned char 
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  1    wreg      void 
  2383 ;; Registers used:
  2384 ;;		wreg, status,2, status,0, cstack
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2390 ;;      Params:         0       0       0       0       0       0       0       0       0
  2391 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2392 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2393 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2394 ;;Total ram usage:        1 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; Hardware stack levels required when called:    4
  2397 ;; This function calls:
  2398 ;;		_delay
  2399 ;; This function is called by:
  2400 ;;		_mensagem_inicial
  2401 ;;		_init_lcd
  2402 ;;		_cria_caractere_lcd
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           	psect	text3
  2407  004A66                     __ptext3:
  2408                           	opt stack 0
  2409  004A66                     _escreve_cmd_lcd:
  2410                           	opt stack 25
  2411                           
  2412                           ;incstack = 0
  2413                           ;escreve_cmd_lcd@comando stored from wreg
  2414  004A66  0100               	movlb	0	; () banked
  2415  004A68  6F60               	movwf	escreve_cmd_lcd@comando& (0+255),b
  2416                           
  2417                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  2418  004A6A  9483               	bcf	3971,2,c	;volatile
  2419                           
  2420                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  2421  004A6C  9283               	bcf	3971,1,c	;volatile
  2422                           
  2423                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  2424  004A6E  9083               	bcf	3971,0,c	;volatile
  2425                           
  2426                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  2427  004A70  0100               	movlb	0	; () banked
  2428  004A72  A960               	btfss	escreve_cmd_lcd@comando& (0+255),4,b
  2429  004A74  D002               	goto	l559
  2430                           
  2431                           ; BSR set to: 0
  2432  004A76  8883               	bsf	3971,4,c	;volatile
  2433  004A78  D001               	goto	l560
  2434  004A7A                     l559:
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  2438  004A7A  9883               	bcf	3971,4,c	;volatile
  2439  004A7C                     l560:
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  2443                           
  2444                           ; BSR set to: 0
  2445  004A7C  AB60               	btfss	escreve_cmd_lcd@comando& (0+255),5,b
  2446  004A7E  D002               	goto	l561
  2447                           
  2448                           ; BSR set to: 0
  2449  004A80  8A83               	bsf	3971,5,c	;volatile
  2450  004A82  D001               	goto	l562
  2451  004A84                     l561:
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  2455  004A84  9A83               	bcf	3971,5,c	;volatile
  2456  004A86                     l562:
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  2460                           
  2461                           ; BSR set to: 0
  2462  004A86  AD60               	btfss	escreve_cmd_lcd@comando& (0+255),6,b
  2463  004A88  D002               	goto	l563
  2464                           
  2465                           ; BSR set to: 0
  2466  004A8A  8C83               	bsf	3971,6,c	;volatile
  2467  004A8C  D001               	goto	l564
  2468  004A8E                     l563:
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  2472  004A8E  9C83               	bcf	3971,6,c	;volatile
  2473  004A90                     l564:
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  2477                           
  2478                           ; BSR set to: 0
  2479  004A90  AF60               	btfss	escreve_cmd_lcd@comando& (0+255),7,b
  2480  004A92  D002               	goto	l565
  2481                           
  2482                           ; BSR set to: 0
  2483  004A94  8E83               	bsf	3971,7,c	;volatile
  2484  004A96  D001               	goto	l566
  2485  004A98                     l565:
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  2489  004A98  9E83               	bcf	3971,7,c	;volatile
  2490  004A9A                     l566:
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  2494  004A9A  8083               	bsf	3971,0,c	;volatile
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;display_lcd.c: 181: delay();
  2498  004A9C  EC49  F02C         	call	_delay	;wreg free
  2499                           
  2500                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  2501  004AA0  9083               	bcf	3971,0,c	;volatile
  2502                           
  2503                           ;display_lcd.c: 183: delay();
  2504  004AA2  EC49  F02C         	call	_delay	;wreg free
  2505                           
  2506                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  2507  004AA6  0100               	movlb	0	; () banked
  2508  004AA8  A160               	btfss	escreve_cmd_lcd@comando& (0+255),0,b
  2509  004AAA  D002               	goto	l567
  2510                           
  2511                           ; BSR set to: 0
  2512  004AAC  8883               	bsf	3971,4,c	;volatile
  2513  004AAE  D001               	goto	l568
  2514  004AB0                     l567:
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  2518  004AB0  9883               	bcf	3971,4,c	;volatile
  2519  004AB2                     l568:
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  2523  004AB2  A360               	btfss	escreve_cmd_lcd@comando& (0+255),1,b
  2524  004AB4  D002               	goto	l569
  2525                           
  2526                           ; BSR set to: 0
  2527  004AB6  8A83               	bsf	3971,5,c	;volatile
  2528  004AB8  D001               	goto	l570
  2529  004ABA                     l569:
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  2533  004ABA  9A83               	bcf	3971,5,c	;volatile
  2534  004ABC                     l570:
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  2538  004ABC  A560               	btfss	escreve_cmd_lcd@comando& (0+255),2,b
  2539  004ABE  D002               	goto	l571
  2540                           
  2541                           ; BSR set to: 0
  2542  004AC0  8C83               	bsf	3971,6,c	;volatile
  2543  004AC2  D001               	goto	l572
  2544  004AC4                     l571:
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  2548  004AC4  9C83               	bcf	3971,6,c	;volatile
  2549  004AC6                     l572:
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  2553  004AC6  A760               	btfss	escreve_cmd_lcd@comando& (0+255),3,b
  2554  004AC8  D002               	goto	l573
  2555                           
  2556                           ; BSR set to: 0
  2557  004ACA  8E83               	bsf	3971,7,c	;volatile
  2558  004ACC  D001               	goto	l574
  2559  004ACE                     l573:
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  2563  004ACE  9E83               	bcf	3971,7,c	;volatile
  2564  004AD0                     l574:
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  2568  004AD0  8083               	bsf	3971,0,c	;volatile
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;display_lcd.c: 197: delay();
  2572  004AD2  EC49  F02C         	call	_delay	;wreg free
  2573                           
  2574                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  2575  004AD6  9083               	bcf	3971,0,c	;volatile
  2576                           
  2577                           ;display_lcd.c: 199: delay();
  2578  004AD8  EC49  F02C         	call	_delay	;wreg free
  2579                           
  2580                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  2581  004ADC  0100               	movlb	0	; () banked
  2582  004ADE  0560               	decf	escreve_cmd_lcd@comando& (0+255),w,b
  2583  004AE0  B4D8               	btfsc	status,2,c
  2584  004AE2  D008               	goto	u13920
  2585                           
  2586                           ; BSR set to: 0
  2587  004AE4  0E02               	movlw	2
  2588  004AE6  1960               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  2589  004AE8  B4D8               	btfsc	status,2,c
  2590  004AEA  D004               	goto	u13920
  2591                           
  2592                           ; BSR set to: 0
  2593  004AEC  0E03               	movlw	3
  2594  004AEE  1960               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  2595  004AF0  A4D8               	btfss	status,2,c
  2596  004AF2  0012               	return	
  2597  004AF4                     u13920:
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;display_lcd.c: 205: { delay(); }
  2601                           
  2602                           ; BSR set to: 0
  2603  004AF4  EC49  F02C         	call	_delay	;wreg free
  2604  004AF8  0012               	return	
  2605  004AFA                     __end_of_escreve_cmd_lcd:
  2606                           	opt stack 0
  2607                           tblptru	equ	0xFF8
  2608                           tblptrh	equ	0xFF7
  2609                           tblptrl	equ	0xFF6
  2610                           tablat	equ	0xFF5
  2611                           postinc0	equ	0xFEE
  2612                           wreg	equ	0xFE8
  2613                           postdec1	equ	0xFE5
  2614                           fsr1h	equ	0xFE2
  2615                           fsr1l	equ	0xFE1
  2616                           postinc2	equ	0xFDE
  2617                           status	equ	0xFD8
  2618                           
  2619 ;; *************** function _init_hardware *****************
  2620 ;; Defined at:
  2621 ;;		line 55 in file "bibliotecas/hardware.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;		None
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;		None
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  1    wreg      void 
  2628 ;; Registers used:
  2629 ;;		wreg, status,2, cstack
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2635 ;;      Params:         0       0       0       0       0       0       0       0       0
  2636 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2637 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2638 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2639 ;;Total ram usage:        0 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; Hardware stack levels required when called:    5
  2642 ;; This function calls:
  2643 ;;		_config_timer_dois
  2644 ;;		_config_timer_zero
  2645 ;;		_init_interrupt
  2646 ;;		_init_oscilador
  2647 ;;		_init_ports
  2648 ;; This function is called by:
  2649 ;;		_main
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text4
  2654  00592A                     __ptext4:
  2655                           	opt stack 0
  2656  00592A                     _init_hardware:
  2657                           	opt stack 25
  2658                           
  2659                           ;hardware.c: 58: init_oscilador();
  2660                           
  2661                           ;incstack = 0
  2662  00592A  EC02  F02D         	call	_init_oscilador	;wreg free
  2663                           
  2664                           ;hardware.c: 61: init_ports();
  2665  00592E  EC7A  F02C         	call	_init_ports	;wreg free
  2666                           
  2667                           ;hardware.c: 64: config_timer_zero();
  2668  005932  EC88  F02C         	call	_config_timer_zero	;wreg free
  2669                           
  2670                           ;hardware.c: 67: config_timer_dois();
  2671  005936  ECD7  F02C         	call	_config_timer_dois	;wreg free
  2672                           
  2673                           ;hardware.c: 70: init_interrupt();
  2674  00593A  ECAA  F02C         	call	_init_interrupt	;wreg free
  2675  00593E  0012               	return		;funcret
  2676  005940                     __end_of_init_hardware:
  2677                           	opt stack 0
  2678                           tblptru	equ	0xFF8
  2679                           tblptrh	equ	0xFF7
  2680                           tblptrl	equ	0xFF6
  2681                           tablat	equ	0xFF5
  2682                           postinc0	equ	0xFEE
  2683                           wreg	equ	0xFE8
  2684                           postdec1	equ	0xFE5
  2685                           fsr1h	equ	0xFE2
  2686                           fsr1l	equ	0xFE1
  2687                           postinc2	equ	0xFDE
  2688                           status	equ	0xFD8
  2689                           
  2690 ;; *************** function _init_ports *****************
  2691 ;; Defined at:
  2692 ;;		line 154 in file "bibliotecas/hardware.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;		None
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;		None
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  1    wreg      void 
  2699 ;; Registers used:
  2700 ;;		wreg, status,2
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2706 ;;      Params:         0       0       0       0       0       0       0       0       0
  2707 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2708 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2709 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2710 ;;Total ram usage:        0 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; Hardware stack levels required when called:    3
  2713 ;; This function calls:
  2714 ;;		Nothing
  2715 ;; This function is called by:
  2716 ;;		_init_hardware
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text5
  2721  0058F4                     __ptext5:
  2722                           	opt stack 0
  2723  0058F4                     _init_ports:
  2724                           	opt stack 26
  2725                           
  2726                           ;hardware.c: 156: ADCON1 = 0X0F;
  2727                           
  2728                           ;incstack = 0
  2729  0058F4  0E0F               	movlw	15
  2730  0058F6  6EC1               	movwf	4033,c	;volatile
  2731                           
  2732                           ;hardware.c: 157: TRISB = 0b00100001;
  2733  0058F8  0E21               	movlw	33
  2734  0058FA  6E93               	movwf	3987,c	;volatile
  2735                           
  2736                           ;hardware.c: 158: LATB = 0xFF;
  2737  0058FC  688A               	setf	3978,c	;volatile
  2738                           
  2739                           ;hardware.c: 159: TRISD = 0x00;
  2740  0058FE  0E00               	movlw	0
  2741  005900  6E95               	movwf	3989,c	;volatile
  2742                           
  2743                           ;hardware.c: 160: TRISA = 0b00000111;
  2744  005902  0E07               	movlw	7
  2745  005904  6E92               	movwf	3986,c	;volatile
  2746                           
  2747                           ;hardware.c: 161: TRISC = 0x01111111;
  2748  005906  0E11               	movlw	17
  2749  005908  6E94               	movwf	3988,c	;volatile
  2750                           
  2751                           ;hardware.c: 162: TRISE = 0b00000011;
  2752  00590A  0E03               	movlw	3
  2753  00590C  6E96               	movwf	3990,c	;volatile
  2754  00590E  0012               	return		;funcret
  2755  005910                     __end_of_init_ports:
  2756                           	opt stack 0
  2757                           tblptru	equ	0xFF8
  2758                           tblptrh	equ	0xFF7
  2759                           tblptrl	equ	0xFF6
  2760                           tablat	equ	0xFF5
  2761                           postinc0	equ	0xFEE
  2762                           wreg	equ	0xFE8
  2763                           postdec1	equ	0xFE5
  2764                           fsr1h	equ	0xFE2
  2765                           fsr1l	equ	0xFE1
  2766                           postinc2	equ	0xFDE
  2767                           status	equ	0xFD8
  2768                           
  2769 ;; *************** function _init_oscilador *****************
  2770 ;; Defined at:
  2771 ;;		line 172 in file "bibliotecas/hardware.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		None
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2785 ;;      Params:         0       0       0       0       0       0       0       0       0
  2786 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2788 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2789 ;;Total ram usage:        0 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    3
  2792 ;; This function calls:
  2793 ;;		Nothing
  2794 ;; This function is called by:
  2795 ;;		_init_hardware
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           	psect	text6
  2800  005A04                     __ptext6:
  2801                           	opt stack 0
  2802  005A04                     _init_oscilador:
  2803                           	opt stack 26
  2804                           
  2805                           ;hardware.c: 175: OSCCONbits.IRCF0 = 1;
  2806                           
  2807                           ;incstack = 0
  2808  005A04  88D3               	bsf	4051,4,c	;volatile
  2809                           
  2810                           ;hardware.c: 176: OSCCONbits.IRCF1 = 1;
  2811  005A06  8AD3               	bsf	4051,5,c	;volatile
  2812                           
  2813                           ;hardware.c: 177: OSCCONbits.IRCF2 = 1;
  2814  005A08  8CD3               	bsf	4051,6,c	;volatile
  2815  005A0A  0012               	return		;funcret
  2816  005A0C                     __end_of_init_oscilador:
  2817                           	opt stack 0
  2818                           tblptru	equ	0xFF8
  2819                           tblptrh	equ	0xFF7
  2820                           tblptrl	equ	0xFF6
  2821                           tablat	equ	0xFF5
  2822                           postinc0	equ	0xFEE
  2823                           wreg	equ	0xFE8
  2824                           postdec1	equ	0xFE5
  2825                           fsr1h	equ	0xFE2
  2826                           fsr1l	equ	0xFE1
  2827                           postinc2	equ	0xFDE
  2828                           status	equ	0xFD8
  2829                           
  2830 ;; *************** function _init_interrupt *****************
  2831 ;; Defined at:
  2832 ;;		line 98 in file "bibliotecas/hardware.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;		None
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;		None
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      void 
  2839 ;; Registers used:
  2840 ;;		wreg, status,2
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2846 ;;      Params:         0       0       0       0       0       0       0       0       0
  2847 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2848 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2849 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2850 ;;Total ram usage:        0 bytes
  2851 ;; Hardware stack levels used:    1
  2852 ;; Hardware stack levels required when called:    3
  2853 ;; This function calls:
  2854 ;;		Nothing
  2855 ;; This function is called by:
  2856 ;;		_init_hardware
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text7
  2861  005954                     __ptext7:
  2862                           	opt stack 0
  2863  005954                     _init_interrupt:
  2864                           	opt stack 26
  2865                           
  2866                           ;hardware.c: 100: INTCON = 0b10110000;
  2867                           
  2868                           ;incstack = 0
  2869  005954  0EB0               	movlw	176
  2870  005956  6EF2               	movwf	intcon,c	;volatile
  2871                           
  2872                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2873  005958  0E00               	movlw	0
  2874  00595A  6EF1               	movwf	intcon2,c	;volatile
  2875                           
  2876                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2877  00595C  0E00               	movlw	0
  2878  00595E  6EF0               	movwf	intcon3,c	;volatile
  2879                           
  2880                           ;hardware.c: 104: PIE1 = 0b00101000;
  2881  005960  0E28               	movlw	40
  2882  005962  6E9D               	movwf	3997,c	;volatile
  2883  005964  0012               	return		;funcret
  2884  005966                     __end_of_init_interrupt:
  2885                           	opt stack 0
  2886                           tblptru	equ	0xFF8
  2887                           tblptrh	equ	0xFF7
  2888                           tblptrl	equ	0xFF6
  2889                           tablat	equ	0xFF5
  2890                           intcon	equ	0xFF2
  2891                           intcon2	equ	0xFF1
  2892                           intcon3	equ	0xFF0
  2893                           postinc0	equ	0xFEE
  2894                           wreg	equ	0xFE8
  2895                           postdec1	equ	0xFE5
  2896                           fsr1h	equ	0xFE2
  2897                           fsr1l	equ	0xFE1
  2898                           postinc2	equ	0xFDE
  2899                           status	equ	0xFD8
  2900                           
  2901 ;; *************** function _config_timer_zero *****************
  2902 ;; Defined at:
  2903 ;;		line 83 in file "bibliotecas/hardware.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;		None
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;		None
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  1    wreg      void 
  2910 ;; Registers used:
  2911 ;;		wreg, status,2, cstack
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2917 ;;      Params:         0       0       0       0       0       0       0       0       0
  2918 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2919 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2920 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2921 ;;Total ram usage:        0 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; Hardware stack levels required when called:    4
  2924 ;; This function calls:
  2925 ;;		_write_timer_zero
  2926 ;; This function is called by:
  2927 ;;		_init_hardware
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text8
  2932  005910                     __ptext8:
  2933                           	opt stack 0
  2934  005910                     _config_timer_zero:
  2935                           	opt stack 25
  2936                           
  2937                           ;hardware.c: 85: T0CON = 0b11000011;
  2938                           
  2939                           ;incstack = 0
  2940  005910  0EC3               	movlw	195
  2941  005912  6ED5               	movwf	4053,c	;volatile
  2942                           
  2943                           ;hardware.c: 86: SPPCON = 0b00000000;
  2944  005914  0E00               	movlw	0
  2945  005916  6E65               	movwf	3941,c	;volatile
  2946                           
  2947                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2948  005918  0E00               	movlw	0
  2949  00591A  6E63               	movwf	3939,c	;volatile
  2950                           
  2951                           ;hardware.c: 88: write_timer_zero(0x0083);
  2952  00591C  0E00               	movlw	0
  2953  00591E  6E22               	movwf	write_timer_zero@timer0+1,c
  2954  005920  0E83               	movlw	131
  2955  005922  6E21               	movwf	write_timer_zero@timer0,c
  2956  005924  ECB3  F02C         	call	_write_timer_zero	;wreg free
  2957  005928  0012               	return		;funcret
  2958  00592A                     __end_of_config_timer_zero:
  2959                           	opt stack 0
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           intcon	equ	0xFF2
  2965                           intcon2	equ	0xFF1
  2966                           intcon3	equ	0xFF0
  2967                           postinc0	equ	0xFEE
  2968                           wreg	equ	0xFE8
  2969                           postdec1	equ	0xFE5
  2970                           fsr1h	equ	0xFE2
  2971                           fsr1l	equ	0xFE1
  2972                           postinc2	equ	0xFDE
  2973                           status	equ	0xFD8
  2974                           
  2975 ;; *************** function _write_timer_zero *****************
  2976 ;; Defined at:
  2977 ;;		line 138 in file "bibliotecas/hardware.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;  timer0          2   32[COMRAM] unsigned int 
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  timer           2    0[BANK0 ] struct Timers
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      void 
  2984 ;; Registers used:
  2985 ;;		None
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2991 ;;      Params:         2       0       0       0       0       0       0       0       0
  2992 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2993 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2994 ;;      Totals:         2       2       0       0       0       0       0       0       0
  2995 ;;Total ram usage:        4 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    3
  2998 ;; This function calls:
  2999 ;;		Nothing
  3000 ;; This function is called by:
  3001 ;;		_config_timer_zero
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           	psect	text9
  3006  005966                     __ptext9:
  3007                           	opt stack 0
  3008  005966                     _write_timer_zero:
  3009                           	opt stack 25
  3010                           
  3011                           ;hardware.c: 140: union Timers timer;
  3012                           ;hardware.c: 142: timer.lt = timer0;
  3013                           
  3014                           ;incstack = 0
  3015  005966  C021  F060         	movff	write_timer_zero@timer0,write_timer_zero@timer
  3016  00596A  C022  F061         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  3017                           
  3018                           ;hardware.c: 144: TMR0H = timer.bt[1];
  3019  00596E  C061  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  3020                           
  3021                           ;hardware.c: 145: TMR0L = timer.bt[0];
  3022  005972  C060  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  3023  005976  0012               	return		;funcret
  3024  005978                     __end_of_write_timer_zero:
  3025                           	opt stack 0
  3026                           tblptru	equ	0xFF8
  3027                           tblptrh	equ	0xFF7
  3028                           tblptrl	equ	0xFF6
  3029                           tablat	equ	0xFF5
  3030                           intcon	equ	0xFF2
  3031                           intcon2	equ	0xFF1
  3032                           intcon3	equ	0xFF0
  3033                           postinc0	equ	0xFEE
  3034                           wreg	equ	0xFE8
  3035                           postdec1	equ	0xFE5
  3036                           fsr1h	equ	0xFE2
  3037                           fsr1l	equ	0xFE1
  3038                           postinc2	equ	0xFDE
  3039                           status	equ	0xFD8
  3040                           
  3041 ;; *************** function _config_timer_dois *****************
  3042 ;; Defined at:
  3043 ;;		line 201 in file "bibliotecas/hardware.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;		None
  3048 ;; Return value:  Size  Location     Type
  3049 ;;                  1    wreg      void 
  3050 ;; Registers used:
  3051 ;;		wreg, status,2
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3057 ;;      Params:         0       0       0       0       0       0       0       0       0
  3058 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3059 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3060 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3061 ;;Total ram usage:        0 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; Hardware stack levels required when called:    3
  3064 ;; This function calls:
  3065 ;;		Nothing
  3066 ;; This function is called by:
  3067 ;;		_init_hardware
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text10
  3072  0059AE                     __ptext10:
  3073                           	opt stack 0
  3074  0059AE                     _config_timer_dois:
  3075                           	opt stack 26
  3076                           
  3077                           ;hardware.c: 203: T2CON = 0b00000100;
  3078                           
  3079                           ;incstack = 0
  3080  0059AE  0E04               	movlw	4
  3081  0059B0  6ECA               	movwf	4042,c	;volatile
  3082                           
  3083                           ;hardware.c: 204: TMR2 = 0;
  3084  0059B2  0E00               	movlw	0
  3085  0059B4  6ECC               	movwf	4044,c	;volatile
  3086                           
  3087                           ;hardware.c: 205: PR2 = 0x01;
  3088  0059B6  0E01               	movlw	1
  3089  0059B8  6ECB               	movwf	4043,c	;volatile
  3090  0059BA  0012               	return		;funcret
  3091  0059BC                     __end_of_config_timer_dois:
  3092                           	opt stack 0
  3093                           tblptru	equ	0xFF8
  3094                           tblptrh	equ	0xFF7
  3095                           tblptrl	equ	0xFF6
  3096                           tablat	equ	0xFF5
  3097                           intcon	equ	0xFF2
  3098                           intcon2	equ	0xFF1
  3099                           intcon3	equ	0xFF0
  3100                           postinc0	equ	0xFEE
  3101                           wreg	equ	0xFE8
  3102                           postdec1	equ	0xFE5
  3103                           fsr1h	equ	0xFE2
  3104                           fsr1l	equ	0xFE1
  3105                           postinc2	equ	0xFDE
  3106                           status	equ	0xFD8
  3107                           
  3108 ;; *************** function _inicializa_tarefas *****************
  3109 ;; Defined at:
  3110 ;;		line 153 in file "main.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;		None
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;		None
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  1    wreg      void 
  3117 ;; Registers used:
  3118 ;;		wreg, status,2, status,0
  3119 ;; Tracked objects:
  3120 ;;		On entry : 0/0
  3121 ;;		On exit  : 0/0
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3124 ;;      Params:         0       0       0       0       0       0       0       0       0
  3125 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3126 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3127 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3128 ;;Total ram usage:        0 bytes
  3129 ;; Hardware stack levels used:    1
  3130 ;; Hardware stack levels required when called:    3
  3131 ;; This function calls:
  3132 ;;		Nothing
  3133 ;; This function is called by:
  3134 ;;		_main
  3135 ;; This function uses a non-reentrant model
  3136 ;;
  3137                           
  3138                           	psect	text11
  3139  005386                     __ptext11:
  3140                           	opt stack 0
  3141  005386                     _inicializa_tarefas:
  3142                           	opt stack 27
  3143                           
  3144                           ;main.c: 156: p_tarefas[0] = verifica_dados_operacionais;
  3145                           
  3146                           ;incstack = 0
  3147  005386  0EFA               	movlw	low _verifica_dados_operacionais
  3148  005388  0100               	movlb	0	; () banked
  3149  00538A  6FF5               	movwf	_p_tarefas& (0+255),b
  3150  00538C  0E59               	movlw	high _verifica_dados_operacionais
  3151  00538E  6FF6               	movwf	(_p_tarefas+1)& (0+255),b
  3152                           
  3153                           ;main.c: 157: p_tarefas[1] = incrementa_metros;
  3154  005390  0E0C               	movlw	low _incrementa_metros
  3155  005392  6FF7               	movwf	(_p_tarefas+2)& (0+255),b
  3156  005394  0E5A               	movlw	high _incrementa_metros
  3157  005396  6FF8               	movwf	(_p_tarefas+3)& (0+255),b
  3158                           
  3159                           ;main.c: 158: p_tarefas[2] = verifica_fence_externo;
  3160  005398  0EDC               	movlw	low _verifica_fence_externo
  3161  00539A  6FF9               	movwf	(_p_tarefas+4)& (0+255),b
  3162  00539C  0E45               	movlw	high _verifica_fence_externo
  3163  00539E  6FFA               	movwf	(_p_tarefas+5)& (0+255),b
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;main.c: 163: tempo_backup[0] = 5000;
  3167  0053A0  0E13               	movlw	19
  3168  0053A2  0101               	movlb	1	; () banked
  3169  0053A4  6F01               	movwf	(_tempo_backup+1)& (0+255),b
  3170  0053A6  0E88               	movlw	136
  3171  0053A8  6F00               	movwf	_tempo_backup& (0+255),b
  3172                           
  3173                           ; BSR set to: 1
  3174                           ;main.c: 164: tempo_backup[1] = 1000;
  3175  0053AA  0E03               	movlw	3
  3176  0053AC  6F03               	movwf	(_tempo_backup+3)& (0+255),b
  3177  0053AE  0EE8               	movlw	232
  3178  0053B0  6F02               	movwf	(_tempo_backup+2)& (0+255),b
  3179                           
  3180                           ; BSR set to: 1
  3181                           ;main.c: 165: tempo_backup[2] = 10000;
  3182  0053B2  0E27               	movlw	39
  3183  0053B4  6F05               	movwf	(_tempo_backup+5)& (0+255),b
  3184  0053B6  0E10               	movlw	16
  3185  0053B8  6F04               	movwf	(_tempo_backup+4)& (0+255),b
  3186                           
  3187                           ; BSR set to: 1
  3188                           ;main.c: 169: tempo_tarefa[0] = 5000;
  3189  0053BA  0E13               	movlw	19
  3190  0053BC  6E24               	movwf	_tempo_tarefa+1,c
  3191  0053BE  0E88               	movlw	136
  3192  0053C0  6E23               	movwf	_tempo_tarefa,c
  3193                           
  3194                           ; BSR set to: 1
  3195                           ;main.c: 170: tempo_tarefa[1] = 1000;
  3196  0053C2  0E03               	movlw	3
  3197  0053C4  6E26               	movwf	_tempo_tarefa+3,c
  3198  0053C6  0EE8               	movlw	232
  3199  0053C8  6E25               	movwf	_tempo_tarefa+2,c
  3200                           
  3201                           ; BSR set to: 1
  3202                           ;main.c: 171: tempo_tarefa[2] = 10000;
  3203  0053CA  0E27               	movlw	39
  3204  0053CC  6E28               	movwf	_tempo_tarefa+5,c
  3205  0053CE  0E10               	movlw	16
  3206  0053D0  6E27               	movwf	_tempo_tarefa+4,c
  3207                           
  3208                           ; BSR set to: 1
  3209                           ;main.c: 174: tarefa_em_execucao = 0;
  3210  0053D2  0E00               	movlw	0
  3211  0053D4  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3212                           
  3213                           ; BSR set to: 1
  3214  0053D6  0012               	return		;funcret
  3215  0053D8                     __end_of_inicializa_tarefas:
  3216                           	opt stack 0
  3217                           tblptru	equ	0xFF8
  3218                           tblptrh	equ	0xFF7
  3219                           tblptrl	equ	0xFF6
  3220                           tablat	equ	0xFF5
  3221                           intcon	equ	0xFF2
  3222                           intcon2	equ	0xFF1
  3223                           intcon3	equ	0xFF0
  3224                           postinc0	equ	0xFEE
  3225                           wreg	equ	0xFE8
  3226                           postdec1	equ	0xFE5
  3227                           fsr1h	equ	0xFE2
  3228                           fsr1l	equ	0xFE1
  3229                           postinc2	equ	0xFDE
  3230                           status	equ	0xFD8
  3231                           
  3232 ;; *************** function _escalonador *****************
  3233 ;; Defined at:
  3234 ;;		line 185 in file "main.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;		None
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  cont            1   47[BANK1 ] unsigned char 
  3239 ;; Return value:  Size  Location     Type
  3240 ;;                  1    wreg      void 
  3241 ;; Registers used:
  3242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3248 ;;      Params:         0       0       0       0       0       0       0       0       0
  3249 ;;      Locals:         0       0       1       0       0       0       0       0       0
  3250 ;;      Temps:          0       0       0       2       0       0       0       0       0
  3251 ;;      Totals:         0       0       1       2       0       0       0       0       0
  3252 ;;Total ram usage:        3 bytes
  3253 ;; Hardware stack levels used:    1
  3254 ;; Hardware stack levels required when called:   17
  3255 ;; This function calls:
  3256 ;;		_incrementa_metros
  3257 ;;		_verifica_dados_operacionais
  3258 ;;		_verifica_fence_externo
  3259 ;; This function is called by:
  3260 ;;		_main
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text12
  3265  0047DC                     __ptext12:
  3266                           	opt stack 0
  3267  0047DC                     _escalonador:
  3268                           	opt stack 13
  3269                           
  3270                           ;main.c: 187: unsigned char cont;
  3271                           ;main.c: 188: for(cont = 0; cont<3;cont++)
  3272                           
  3273                           ; BSR set to: 1
  3274                           ;incstack = 0
  3275  0047DC  0E00               	movlw	0
  3276  0047DE  0101               	movlb	1	; () banked
  3277  0047E0  6FE2               	movwf	escalonador@cont& (0+255),b
  3278  0047E2                     l11112:
  3279                           
  3280                           ; BSR set to: 1
  3281  0047E2  0E02               	movlw	2
  3282  0047E4  65E2               	cpfsgt	escalonador@cont& (0+255),b
  3283  0047E6  D001               	goto	l99
  3284  0047E8  0012               	return	
  3285  0047EA                     l99:
  3286                           
  3287                           ; BSR set to: 1
  3288                           ;main.c: 189: {
  3289                           ;main.c: 190: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3290                           
  3291                           ; BSR set to: 1
  3292  0047EA  51E2               	movf	escalonador@cont& (0+255),w,b
  3293  0047EC  0D02               	mullw	2
  3294  0047EE  0EF5               	movlw	low _p_tarefas
  3295  0047F0  24F3               	addwf	prodl,w,c
  3296  0047F2  6ED9               	movwf	fsr2l,c
  3297  0047F4  0E00               	movlw	high _p_tarefas
  3298  0047F6  20F4               	addwfc	prodh,w,c
  3299  0047F8  6EDA               	movwf	fsr2h,c
  3300  0047FA  50DE               	movf	postinc2,w,c
  3301  0047FC  10DE               	iorwf	postinc2,w,c
  3302  0047FE  B4D8               	btfsc	status,2,c
  3303  004800  D03D               	goto	l101
  3304                           
  3305                           ; BSR set to: 1
  3306  004802  51E2               	movf	escalonador@cont& (0+255),w,b
  3307  004804  0D02               	mullw	2
  3308  004806  0E23               	movlw	low _tempo_tarefa
  3309  004808  24F3               	addwf	prodl,w,c
  3310  00480A  6ED9               	movwf	fsr2l,c
  3311  00480C  0E00               	movlw	high _tempo_tarefa
  3312  00480E  20F4               	addwfc	prodh,w,c
  3313  004810  6EDA               	movwf	fsr2h,c
  3314  004812  50DE               	movf	postinc2,w,c
  3315  004814  10DE               	iorwf	postinc2,w,c
  3316  004816  A4D8               	btfss	status,2,c
  3317  004818  D031               	goto	l101
  3318                           
  3319                           ; BSR set to: 1
  3320                           ;main.c: 191: {
  3321                           ;main.c: 192: tarefa_em_execucao = 1;
  3322  00481A  0E01               	movlw	1
  3323  00481C  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3324                           
  3325                           ;main.c: 193: timeout_tarefa = 60000;
  3326  00481E  0EEA               	movlw	234
  3327  004820  6E30               	movwf	_timeout_tarefa+1,c
  3328  004822  0E60               	movlw	96
  3329  004824  6E2F               	movwf	_timeout_tarefa,c
  3330                           
  3331                           ; BSR set to: 1
  3332                           ;main.c: 194: p_tarefas[cont]();
  3333  004826  51E2               	movf	escalonador@cont& (0+255),w,b
  3334  004828  0D02               	mullw	2
  3335  00482A  0EF5               	movlw	low _p_tarefas
  3336  00482C  24F3               	addwf	prodl,w,c
  3337  00482E  6ED9               	movwf	fsr2l,c
  3338  004830  0E00               	movlw	high _p_tarefas
  3339  004832  20F4               	addwfc	prodh,w,c
  3340  004834  6EDA               	movwf	fsr2h,c
  3341  004836  D801               	call	u14108
  3342  004838  D00A               	goto	u14109
  3343  00483A                     u14108:
  3344  00483A  0005               	push	
  3345  00483C  6EFA               	movwf	pclath,c
  3346  00483E  50DE               	movf	postinc2,w,c
  3347  004840  6EFD               	movwf	tosl,c
  3348  004842  50DE               	movf	postinc2,w,c
  3349  004844  6EFE               	movwf	tosh,c
  3350  004846  50F8               	movf	tblptru,w,c
  3351  004848  6EFF               	movwf	tosu,c
  3352  00484A  50FA               	movf	pclath,w,c
  3353  00484C  0012               	return		;indir
  3354  00484E                     u14109:
  3355                           
  3356                           ;main.c: 195: tarefa_em_execucao = 0;
  3357  00484E  0E00               	movlw	0
  3358  004850  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3359                           
  3360                           ;main.c: 196: tempo_tarefa[cont] = tempo_backup[cont];
  3361  004852  0101               	movlb	1	; () banked
  3362  004854  51E2               	movf	escalonador@cont& (0+255),w,b
  3363  004856  0D02               	mullw	2
  3364  004858  0E00               	movlw	low _tempo_backup
  3365  00485A  24F3               	addwf	prodl,w,c
  3366  00485C  6ED9               	movwf	fsr2l,c
  3367  00485E  0E01               	movlw	high _tempo_backup
  3368  004860  20F4               	addwfc	prodh,w,c
  3369  004862  6EDA               	movwf	fsr2h,c
  3370  004864  51E2               	movf	escalonador@cont& (0+255),w,b
  3371  004866  0D02               	mullw	2
  3372  004868  0E23               	movlw	low _tempo_tarefa
  3373  00486A  24F3               	addwf	prodl,w,c
  3374  00486C  6EE1               	movwf	fsr1l,c
  3375  00486E  0E00               	movlw	high _tempo_tarefa
  3376  004870  20F4               	addwfc	prodh,w,c
  3377  004872  6EE2               	movwf	fsr1h,c
  3378  004874  CFDE FFE6          	movff	postinc2,postinc1
  3379  004878  CFDD FFE5          	movff	postdec2,postdec1
  3380  00487C                     l101:
  3381                           
  3382                           ; BSR set to: 1
  3383                           
  3384                           ; BSR set to: 1
  3385  00487C  2BE2               	incf	escalonador@cont& (0+255),f,b
  3386  00487E  D7B1               	goto	l11112
  3387  004880                     __end_of_escalonador:
  3388                           	opt stack 0
  3389                           tosu	equ	0xFFF
  3390                           tosh	equ	0xFFE
  3391                           tosl	equ	0xFFD
  3392                           pclath	equ	0xFFA
  3393                           tblptru	equ	0xFF8
  3394                           tblptrh	equ	0xFF7
  3395                           tblptrl	equ	0xFF6
  3396                           tablat	equ	0xFF5
  3397                           prodh	equ	0xFF4
  3398                           prodl	equ	0xFF3
  3399                           intcon	equ	0xFF2
  3400                           intcon2	equ	0xFF1
  3401                           intcon3	equ	0xFF0
  3402                           postinc0	equ	0xFEE
  3403                           wreg	equ	0xFE8
  3404                           postinc1	equ	0xFE6
  3405                           postdec1	equ	0xFE5
  3406                           fsr1h	equ	0xFE2
  3407                           fsr1l	equ	0xFE1
  3408                           postinc2	equ	0xFDE
  3409                           postdec2	equ	0xFDD
  3410                           fsr2h	equ	0xFDA
  3411                           fsr2l	equ	0xFD9
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function _incrementa_metros *****************
  3415 ;; Defined at:
  3416 ;;		line 382 in file "main.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;		None
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;		None
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  1    wreg      void 
  3423 ;; Registers used:
  3424 ;;		None
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3430 ;;      Params:         0       0       0       0       0       0       0       0       0
  3431 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3432 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3433 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3434 ;;Total ram usage:        0 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    3
  3437 ;; This function calls:
  3438 ;;		Nothing
  3439 ;; This function is called by:
  3440 ;;		_inicializa_tarefas
  3441 ;;		_escalonador
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text13
  3446  005A0C                     __ptext13:
  3447                           	opt stack 0
  3448  005A0C                     _incrementa_metros:
  3449                           	opt stack 26
  3450                           
  3451                           ; BSR set to: 1
  3452                           ;incstack = 0
  3453  005A0C  0012               	return		;funcret
  3454  005A0E                     __end_of_incrementa_metros:
  3455                           	opt stack 0
  3456                           tosu	equ	0xFFF
  3457                           tosh	equ	0xFFE
  3458                           tosl	equ	0xFFD
  3459                           pclath	equ	0xFFA
  3460                           tblptru	equ	0xFF8
  3461                           tblptrh	equ	0xFF7
  3462                           tblptrl	equ	0xFF6
  3463                           tablat	equ	0xFF5
  3464                           prodh	equ	0xFF4
  3465                           prodl	equ	0xFF3
  3466                           intcon	equ	0xFF2
  3467                           intcon2	equ	0xFF1
  3468                           intcon3	equ	0xFF0
  3469                           postinc0	equ	0xFEE
  3470                           wreg	equ	0xFE8
  3471                           postinc1	equ	0xFE6
  3472                           postdec1	equ	0xFE5
  3473                           fsr1h	equ	0xFE2
  3474                           fsr1l	equ	0xFE1
  3475                           postinc2	equ	0xFDE
  3476                           postdec2	equ	0xFDD
  3477                           fsr2h	equ	0xFDA
  3478                           fsr2l	equ	0xFD9
  3479                           status	equ	0xFD8
  3480                           
  3481 ;; *************** function _verifica_dados_operacionais *****************
  3482 ;; Defined at:
  3483 ;;		line 367 in file "main.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;		None
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;		None
  3488 ;; Return value:  Size  Location     Type
  3489 ;;                  1    wreg      void 
  3490 ;; Registers used:
  3491 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3497 ;;      Params:         0       0       0       0       0       0       0       0       0
  3498 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3499 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3500 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3501 ;;Total ram usage:        0 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:   16
  3504 ;; This function calls:
  3505 ;;		_escrita_sdcard
  3506 ;; This function is called by:
  3507 ;;		_inicializa_tarefas
  3508 ;;		_escalonador
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           	psect	text14
  3513  0059FA                     __ptext14:
  3514                           	opt stack 0
  3515  0059FA                     _verifica_dados_operacionais:
  3516                           	opt stack 13
  3517                           
  3518                           ;main.c: 370: if(!PORTEbits.RE1)
  3519                           
  3520                           ;incstack = 0
  3521  0059FA  B284               	btfsc	3972,1,c	;volatile
  3522  0059FC  0012               	return	
  3523                           
  3524                           ;main.c: 371: {
  3525                           ;main.c: 372: escrita_sdcard();
  3526  0059FE  ECC0  F021         	call	_escrita_sdcard	;wreg free
  3527  005A02  0012               	return	
  3528  005A04                     __end_of_verifica_dados_operacionais:
  3529                           	opt stack 0
  3530                           tosu	equ	0xFFF
  3531                           tosh	equ	0xFFE
  3532                           tosl	equ	0xFFD
  3533                           pclath	equ	0xFFA
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           prodh	equ	0xFF4
  3539                           prodl	equ	0xFF3
  3540                           intcon	equ	0xFF2
  3541                           intcon2	equ	0xFF1
  3542                           intcon3	equ	0xFF0
  3543                           postinc0	equ	0xFEE
  3544                           wreg	equ	0xFE8
  3545                           postinc1	equ	0xFE6
  3546                           postdec1	equ	0xFE5
  3547                           fsr1h	equ	0xFE2
  3548                           fsr1l	equ	0xFE1
  3549                           postinc2	equ	0xFDE
  3550                           postdec2	equ	0xFDD
  3551                           fsr2h	equ	0xFDA
  3552                           fsr2l	equ	0xFD9
  3553                           status	equ	0xFD8
  3554                           
  3555 ;; *************** function _verifica_fence_externo *****************
  3556 ;; Defined at:
  3557 ;;		line 256 in file "main.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;		None
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  temp_buff      10    0        unsigned char [10]
  3562 ;;  point_buff      2  142[BANK0 ] PTR unsigned char 
  3563 ;;		 -> dado_arquivo(20), 
  3564 ;;  i               1  144[BANK0 ] unsigned char 
  3565 ;;  count           1  141[BANK0 ] unsigned char 
  3566 ;;  size            1  140[BANK0 ] unsigned char 
  3567 ;;  caractere_gp    1  139[BANK0 ] unsigned char 
  3568 ;;  point           1  138[BANK0 ] unsigned char 
  3569 ;;  j               1  137[BANK0 ] unsigned char 
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  1    wreg      void 
  3572 ;; Registers used:
  3573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3579 ;;      Params:         0       0       0       0       0       0       0       0       0
  3580 ;;      Locals:         0       8       0       0       0       0       0       0       0
  3581 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3582 ;;      Totals:         0       8       0       0       0       0       0       0       0
  3583 ;;Total ram usage:        8 bytes
  3584 ;; Hardware stack levels used:    1
  3585 ;; Hardware stack levels required when called:   14
  3586 ;; This function calls:
  3587 ;;		_escreve_frase_ram_lcd
  3588 ;;		_escreve_inteiro_lcd
  3589 ;;		_leitura_sdcard
  3590 ;;		_posicao_cursor_lcd
  3591 ;;		_strlen
  3592 ;; This function is called by:
  3593 ;;		_inicializa_tarefas
  3594 ;;		_escalonador
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text15
  3599  0045DC                     __ptext15:
  3600                           	opt stack 0
  3601  0045DC                     _verifica_fence_externo:
  3602                           	opt stack 15
  3603                           
  3604                           ;main.c: 259: unsigned char *point_buff, i, j, count;
  3605                           ;main.c: 260: unsigned char point, caractere_gps, size;
  3606                           ;main.c: 261: unsigned char temp_buff[10];
  3607                           ;main.c: 262: count = 0;
  3608                           
  3609                           ;incstack = 0
  3610  0045DC  0E00               	movlw	0
  3611  0045DE  0100               	movlb	0	; () banked
  3612  0045E0  6FED               	movwf	verifica_fence_externo@count& (0+255),b
  3613                           
  3614                           ;main.c: 263: point = 0;
  3615  0045E2  0E00               	movlw	0
  3616  0045E4  6FEA               	movwf	verifica_fence_externo@point& (0+255),b
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;main.c: 264: point_buff = leitura_sdcard(0);
  3620  0045E6  0E00               	movlw	0
  3621  0045E8  EC1E  F027         	call	_leitura_sdcard
  3622  0045EC  C0E5  F0EE         	movff	?_leitura_sdcard,verifica_fence_externo@point_buff
  3623  0045F0  C0E6  F0EF         	movff	?_leitura_sdcard+1,verifica_fence_externo@point_buff+1
  3624                           
  3625                           ;main.c: 265: size = strlen(point_buff);
  3626  0045F4  C0EE  F021         	movff	verifica_fence_externo@point_buff,strlen@s
  3627  0045F8  C0EF  F022         	movff	verifica_fence_externo@point_buff+1,strlen@s+1
  3628  0045FC  EC71  F02B         	call	_strlen	;wreg free
  3629  004600  5021               	movf	?_strlen,w,c
  3630  004602  0100               	movlb	0	; () banked
  3631  004604  6FEC               	movwf	verifica_fence_externo@size& (0+255),b
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;main.c: 266: size = 22;
  3635  004606  0E16               	movlw	22
  3636  004608  6FEC               	movwf	verifica_fence_externo@size& (0+255),b
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;main.c: 267: j= 0;
  3640  00460A  0E00               	movlw	0
  3641  00460C  6FE9               	movwf	verifica_fence_externo@j& (0+255),b
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;main.c: 270: for(i=22; i<44; i++)
  3645  00460E  0E16               	movlw	22
  3646  004610  6FF0               	movwf	verifica_fence_externo@i& (0+255),b
  3647  004612                     l10984:
  3648                           
  3649                           ; BSR set to: 0
  3650  004612  0E2B               	movlw	43
  3651  004614  65F0               	cpfsgt	verifica_fence_externo@i& (0+255),b
  3652  004616  D001               	goto	l121
  3653  004618  0012               	return	
  3654  00461A                     l121:
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;main.c: 271: {
  3658                           ;main.c: 273: caractere_gps = 'a';
  3659                           
  3660                           ; BSR set to: 0
  3661  00461A  0E61               	movlw	97
  3662  00461C  6FEB               	movwf	verifica_fence_externo@caractere_gps& (0+255),b
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;main.c: 274: if(i<=33)
  3666  00461E  0E22               	movlw	34
  3667  004620  61F0               	cpfslt	verifica_fence_externo@i& (0+255),b
  3668  004622  D02A               	goto	l123
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;main.c: 275: {
  3672                           ;main.c: 276: poligono_ext[0].latitude[i] = point_buff[i];
  3673  004624  51F0               	movf	verifica_fence_externo@i& (0+255),w,b
  3674  004626  0D01               	mullw	1
  3675  004628  50F3               	movf	prodl,w,c
  3676  00462A  25EE               	addwf	verifica_fence_externo@point_buff& (0+255),w,b
  3677  00462C  6ED9               	movwf	fsr2l,c
  3678  00462E  50F4               	movf	prodh,w,c
  3679  004630  21EF               	addwfc	(verifica_fence_externo@point_buff+1)& (0+255),w,b
  3680  004632  6EDA               	movwf	fsr2h,c
  3681  004634  51F0               	movf	verifica_fence_externo@i& (0+255),w,b
  3682  004636  0D01               	mullw	1
  3683  004638  0E00               	movlw	low _poligono_ext
  3684  00463A  24F3               	addwf	prodl,w,c
  3685  00463C  6EE1               	movwf	fsr1l,c
  3686  00463E  0E02               	movlw	high _poligono_ext
  3687  004640  20F4               	addwfc	prodh,w,c
  3688  004642  6EE2               	movwf	fsr1h,c
  3689  004644  CFDF FFE7          	movff	indf2,indf1
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;main.c: 277: posicao_cursor_lcd(2,0);
  3693  004648  0E00               	movlw	0
  3694  00464A  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3695  00464C  0E02               	movlw	2
  3696  00464E  ECA2  F027         	call	_posicao_cursor_lcd
  3697                           
  3698                           ;main.c: 278: escreve_frase_ram_lcd(poligono_ext[0].latitude);
  3699  004652  0E00               	movlw	low _poligono_ext
  3700  004654  0100               	movlb	0	; () banked
  3701  004656  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3702  004658  0E02               	movlw	high _poligono_ext
  3703  00465A  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3704  00465C  EC99  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3705                           
  3706                           ;main.c: 279: posicao_cursor_lcd(1,10);
  3707  004660  0E0A               	movlw	10
  3708  004662  0100               	movlb	0	; () banked
  3709  004664  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3710  004666  0E01               	movlw	1
  3711  004668  ECA2  F027         	call	_posicao_cursor_lcd
  3712                           
  3713                           ;main.c: 280: escreve_inteiro_lcd(size);
  3714  00466C  C0EC  F078         	movff	verifica_fence_externo@size,escreve_inteiro_lcd@valor
  3715  004670  0100               	movlb	0	; () banked
  3716  004672  6B79               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3717  004674  EC51  F02B         	call	_escreve_inteiro_lcd	;wreg free
  3718  004678                     l123:
  3719                           
  3720                           ;main.c: 286: }
  3721                           ;main.c: 298: count++;
  3722  004678  0100               	movlb	0	; () banked
  3723  00467A  2BED               	incf	verifica_fence_externo@count& (0+255),f,b
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;main.c: 300: if(count == 11)
  3727  00467C  0E0B               	movlw	11
  3728  00467E  19ED               	xorwf	verifica_fence_externo@count& (0+255),w,b
  3729  004680  A4D8               	btfss	status,2,c
  3730  004682  D002               	goto	l124
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;main.c: 301: {
  3734                           ;main.c: 302: count = 0;
  3735  004684  0E00               	movlw	0
  3736  004686  6FED               	movwf	verifica_fence_externo@count& (0+255),b
  3737  004688                     l124:
  3738                           
  3739                           ; BSR set to: 0
  3740                           
  3741                           ; BSR set to: 0
  3742  004688  2BF0               	incf	verifica_fence_externo@i& (0+255),f,b
  3743  00468A  D7C3               	goto	l10984
  3744  00468C                     __end_of_verifica_fence_externo:
  3745                           	opt stack 0
  3746                           tosu	equ	0xFFF
  3747                           tosh	equ	0xFFE
  3748                           tosl	equ	0xFFD
  3749                           pclath	equ	0xFFA
  3750                           tblptru	equ	0xFF8
  3751                           tblptrh	equ	0xFF7
  3752                           tblptrl	equ	0xFF6
  3753                           tablat	equ	0xFF5
  3754                           prodh	equ	0xFF4
  3755                           prodl	equ	0xFF3
  3756                           intcon	equ	0xFF2
  3757                           intcon2	equ	0xFF1
  3758                           intcon3	equ	0xFF0
  3759                           postinc0	equ	0xFEE
  3760                           wreg	equ	0xFE8
  3761                           indf1	equ	0xFE7
  3762                           postinc1	equ	0xFE6
  3763                           postdec1	equ	0xFE5
  3764                           fsr1h	equ	0xFE2
  3765                           fsr1l	equ	0xFE1
  3766                           indf2	equ	0xFDF
  3767                           postinc2	equ	0xFDE
  3768                           postdec2	equ	0xFDD
  3769                           fsr2h	equ	0xFDA
  3770                           fsr2l	equ	0xFD9
  3771                           status	equ	0xFD8
  3772                           
  3773 ;; *************** function _leitura_sdcard *****************
  3774 ;; Defined at:
  3775 ;;		line 246 in file "bibliotecas/SDCard.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;  num_spot        1    wreg     unsigned char 
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;  num_spot        1    0[COMRAM] unsigned char 
  3780 ;;  offset          2  135[BANK0 ] unsigned int 
  3781 ;;  br              2    0        unsigned short 
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  2  133[BANK0 ] PTR unsigned char 
  3784 ;; Registers used:
  3785 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3791 ;;      Params:         0       2       0       0       0       0       0       0       0
  3792 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3793 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3794 ;;      Totals:         0       4       0       0       0       0       0       0       0
  3795 ;;Total ram usage:        4 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:   13
  3798 ;; This function calls:
  3799 ;;		_desliga_SPI
  3800 ;;		_desliga_uart
  3801 ;;		_f_close
  3802 ;;		_f_mount
  3803 ;;		_f_open
  3804 ;;		_fgets
  3805 ;;		_inicializa_SPI
  3806 ;;		_inicializa_uart
  3807 ;; This function is called by:
  3808 ;;		_verifica_fence_externo
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           	psect	text16
  3813  004E3C                     __ptext16:
  3814                           	opt stack 0
  3815  004E3C                     _leitura_sdcard:
  3816                           	opt stack 15
  3817                           
  3818                           ;SDCard.c: 249: static unsigned char size = 10;
  3819                           ;SDCard.c: 250: WORD br;
  3820                           ;SDCard.c: 251: unsigned int offset = 0;
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;incstack = 0
  3824  004E3C  0E00               	movlw	0
  3825  004E3E  0100               	movlb	0	; () banked
  3826  004E40  6FE8               	movwf	(leitura_sdcard@offset+1)& (0+255),b
  3827  004E42  0E00               	movlw	0
  3828  004E44  6FE7               	movwf	leitura_sdcard@offset& (0+255),b
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;SDCard.c: 254: PORTBbits.RB3 = 0;
  3832  004E46  9681               	bcf	3969,3,c	;volatile
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;SDCard.c: 255: desliga_uart();
  3836  004E48  ECDE  F02C         	call	_desliga_uart	;wreg free
  3837                           
  3838                           ;SDCard.c: 256: inicializa_SPI();
  3839  004E4C  EC5B  F02C         	call	_inicializa_SPI	;wreg free
  3840                           
  3841                           ;SDCard.c: 257: f_mount(0,&fs);
  3842  004E50  0EC8               	movlw	low _fs
  3843  004E52  6E21               	movwf	f_mount@fs,c
  3844  004E54  0E02               	movlw	high _fs
  3845  004E56  6E22               	movwf	f_mount@fs+1,c
  3846  004E58  0E00               	movlw	0
  3847  004E5A  EC13  F02A         	call	_f_mount
  3848                           
  3849                           ;SDCard.c: 259: if (f_open(&fil, "extfence.txt", 0x01 ) == FR_OK)
  3850  004E5E  0E32               	movlw	low _fil
  3851  004E60  0100               	movlb	0	; () banked
  3852  004E62  6FD7               	movwf	f_open@fp& (0+255),b
  3853  004E64  0E01               	movlw	high _fil
  3854  004E66  6FD8               	movwf	(f_open@fp+1)& (0+255),b
  3855  004E68  0E7A               	movlw	low STR_10
  3856  004E6A  6FD9               	movwf	f_open@path& (0+255),b
  3857  004E6C  0E08               	movlw	high STR_10
  3858  004E6E  6FDA               	movwf	(f_open@path+1)& (0+255),b
  3859  004E70  0E01               	movlw	1
  3860  004E72  6FDB               	movwf	f_open@mode& (0+255),b
  3861  004E74  EC6F  F010         	call	_f_open	;wreg free
  3862  004E78  0900               	iorlw	0
  3863  004E7A  A4D8               	btfss	status,2,c
  3864  004E7C  D016               	goto	l307
  3865                           
  3866                           ;SDCard.c: 260: {
  3867                           ;SDCard.c: 264: fgets(dado_arquivo, 90, &fil );
  3868  004E7E  0E4E               	movlw	low _dado_arquivo
  3869  004E80  0100               	movlb	0	; () banked
  3870  004E82  6FD4               	movwf	fgets@buff& (0+255),b
  3871  004E84  0E01               	movlw	high _dado_arquivo
  3872  004E86  6FD5               	movwf	(fgets@buff+1)& (0+255),b
  3873  004E88  0E00               	movlw	0
  3874  004E8A  6FD7               	movwf	(fgets@len+1)& (0+255),b
  3875  004E8C  0E5A               	movlw	90
  3876  004E8E  6FD6               	movwf	fgets@len& (0+255),b
  3877  004E90  0E32               	movlw	low _fil
  3878  004E92  6FD8               	movwf	fgets@fil& (0+255),b
  3879  004E94  0E01               	movlw	high _fil
  3880  004E96  6FD9               	movwf	(fgets@fil+1)& (0+255),b
  3881  004E98  EC7D  F025         	call	_fgets	;wreg free
  3882                           
  3883                           ;SDCard.c: 266: f_close(&fil);
  3884  004E9C  0E32               	movlw	low _fil
  3885  004E9E  0100               	movlb	0	; () banked
  3886  004EA0  6FAB               	movwf	f_close@fp& (0+255),b
  3887  004EA2  0E01               	movlw	high _fil
  3888  004EA4  6FAC               	movwf	(f_close@fp+1)& (0+255),b
  3889  004EA6  ECF9  F02B         	call	_f_close	;wreg free
  3890  004EAA                     l307:
  3891                           
  3892                           ;SDCard.c: 267: }
  3893                           ;SDCard.c: 268: PORTBbits.RB3 = 1;
  3894  004EAA  8681               	bsf	3969,3,c	;volatile
  3895                           
  3896                           ;SDCard.c: 269: desliga_SPI();
  3897  004EAC  ECF7  F02C         	call	_desliga_SPI	;wreg free
  3898                           
  3899                           ;SDCard.c: 270: inicializa_uart();
  3900  004EB0  EC37  F02C         	call	_inicializa_uart	;wreg free
  3901                           
  3902                           ;SDCard.c: 272: return (dado_arquivo);
  3903  004EB4  0E4E               	movlw	low _dado_arquivo
  3904  004EB6  0100               	movlb	0	; () banked
  3905  004EB8  6FE5               	movwf	?_leitura_sdcard& (0+255),b
  3906  004EBA  0E01               	movlw	high _dado_arquivo
  3907  004EBC  6FE6               	movwf	(?_leitura_sdcard+1)& (0+255),b
  3908  004EBE  0012               	return	
  3909  004EC0                     __end_of_leitura_sdcard:
  3910                           	opt stack 0
  3911                           tosu	equ	0xFFF
  3912                           tosh	equ	0xFFE
  3913                           tosl	equ	0xFFD
  3914                           pclath	equ	0xFFA
  3915                           tblptru	equ	0xFF8
  3916                           tblptrh	equ	0xFF7
  3917                           tblptrl	equ	0xFF6
  3918                           tablat	equ	0xFF5
  3919                           prodh	equ	0xFF4
  3920                           prodl	equ	0xFF3
  3921                           intcon	equ	0xFF2
  3922                           intcon2	equ	0xFF1
  3923                           intcon3	equ	0xFF0
  3924                           postinc0	equ	0xFEE
  3925                           wreg	equ	0xFE8
  3926                           indf1	equ	0xFE7
  3927                           postinc1	equ	0xFE6
  3928                           postdec1	equ	0xFE5
  3929                           fsr1h	equ	0xFE2
  3930                           fsr1l	equ	0xFE1
  3931                           indf2	equ	0xFDF
  3932                           postinc2	equ	0xFDE
  3933                           postdec2	equ	0xFDD
  3934                           fsr2h	equ	0xFDA
  3935                           fsr2l	equ	0xFD9
  3936                           status	equ	0xFD8
  3937                           
  3938 ;; *************** function _fgets *****************
  3939 ;; Defined at:
  3940 ;;		line 1730 in file "bibliotecas/tff.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;  buff            2  116[BANK0 ] PTR unsigned char 
  3943 ;;		 -> dado_arquivo(20), 
  3944 ;;  len             2  118[BANK0 ] int 
  3945 ;;  fil             2  120[BANK0 ] PTR struct _FIL
  3946 ;;		 -> fil(28), 
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;  p               2  131[BANK0 ] PTR unsigned char 
  3949 ;;		 -> dado_arquivo(20), 
  3950 ;;  rc              2  129[BANK0 ] unsigned int 
  3951 ;;  i               2  127[BANK0 ] int 
  3952 ;; Return value:  Size  Location     Type
  3953 ;;                  2  116[BANK0 ] PTR unsigned char 
  3954 ;; Registers used:
  3955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3961 ;;      Params:         0       6       0       0       0       0       0       0       0
  3962 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3963 ;;      Temps:          0       5       0       0       0       0       0       0       0
  3964 ;;      Totals:         0      17       0       0       0       0       0       0       0
  3965 ;;Total ram usage:       17 bytes
  3966 ;; Hardware stack levels used:    1
  3967 ;; Hardware stack levels required when called:   11
  3968 ;; This function calls:
  3969 ;;		_f_read
  3970 ;; This function is called by:
  3971 ;;		_leitura_sdcard
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           	psect	text17
  3976  004AFA                     __ptext17:
  3977                           	opt stack 0
  3978  004AFA                     _fgets:
  3979                           	opt stack 16
  3980                           
  3981                           ;tff.c: 1736: int i = 0;
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;incstack = 0
  3985  004AFA  0E00               	movlw	0
  3986  004AFC  0100               	movlb	0	; () banked
  3987  004AFE  6FE0               	movwf	(fgets@i+1)& (0+255),b
  3988  004B00  0E00               	movlw	0
  3989  004B02  6FDF               	movwf	fgets@i& (0+255),b
  3990                           
  3991                           ; BSR set to: 0
  3992                           ;tff.c: 1737: char *p = buff;
  3993  004B04  C0D4  F0E3         	movff	fgets@buff,fgets@p
  3994  004B08  C0D5  F0E4         	movff	fgets@buff+1,fgets@p+1
  3995                           
  3996                           ;tff.c: 1738: UINT rc;
  3997                           ;tff.c: 1741: while (i < len - 1) {
  3998  004B0C  D023               	goto	l1274
  3999  004B0E                     
  4000                           ; BSR set to: 0
  4001                           ;tff.c: 1742: f_read(fil, p, 1, &rc);
  4002                           
  4003                           ; BSR set to: 0
  4004  004B0E  C0D8  F0B3         	movff	fgets@fil,f_read@fp
  4005  004B12  C0D9  F0B4         	movff	fgets@fil+1,f_read@fp+1
  4006  004B16  C0E3  F0B5         	movff	fgets@p,f_read@buff
  4007  004B1A  C0E4  F0B6         	movff	fgets@p+1,f_read@buff+1
  4008  004B1E  0E00               	movlw	0
  4009  004B20  6FB8               	movwf	(f_read@btr+1)& (0+255),b
  4010  004B22  0E01               	movlw	1
  4011  004B24  6FB7               	movwf	f_read@btr& (0+255),b
  4012  004B26  0EE1               	movlw	low fgets@rc
  4013  004B28  6FB9               	movwf	f_read@br& (0+255),b
  4014  004B2A  0E00               	movlw	high fgets@rc
  4015  004B2C  6FBA               	movwf	(f_read@br+1)& (0+255),b
  4016  004B2E  ECE2  F009         	call	_f_read	;wreg free
  4017                           
  4018                           ;tff.c: 1743: if (rc != 1) break;
  4019  004B32  0100               	movlb	0	; () banked
  4020  004B34  05E1               	decf	fgets@rc& (0+255),w,b
  4021  004B36  11E2               	iorwf	(fgets@rc+1)& (0+255),w,b
  4022  004B38  A4D8               	btfss	status,2,c
  4023  004B3A  D022               	goto	u13780
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;tff.c: 1747: i++;
  4027                           
  4028                           ; BSR set to: 0
  4029                           
  4030                           ; BSR set to: 0
  4031  004B3C  4BDF               	infsnz	fgets@i& (0+255),f,b
  4032  004B3E  2BE0               	incf	(fgets@i+1)& (0+255),f,b
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;tff.c: 1748: if (*p++ == '\n') break;
  4036  004B40  C0E3  FFD9         	movff	fgets@p,fsr2l
  4037  004B44  C0E4  FFDA         	movff	fgets@p+1,fsr2h
  4038  004B48  4BE3               	infsnz	fgets@p& (0+255),f,b
  4039  004B4A  2BE4               	incf	(fgets@p+1)& (0+255),f,b
  4040  004B4C  0E0A               	movlw	10
  4041  004B4E  18DE               	xorwf	postinc2,w,c
  4042  004B50  B4D8               	btfsc	status,2,c
  4043  004B52  D016               	goto	u13780
  4044  004B54                     l1274:
  4045                           
  4046                           ; BSR set to: 0
  4047                           
  4048                           ; BSR set to: 0
  4049                           
  4050                           ; BSR set to: 0
  4051  004B54  0EFF               	movlw	255
  4052  004B56  6FDA               	movwf	??_fgets& (0+255),b
  4053  004B58  0EFF               	movlw	255
  4054  004B5A  6FDB               	movwf	(??_fgets+1)& (0+255),b
  4055  004B5C  C0D6  F0DC         	movff	fgets@len,??_fgets+2
  4056  004B60  C0D7  F0DD         	movff	fgets@len+1,??_fgets+3
  4057  004B64  51DA               	movf	??_fgets& (0+255),w,b
  4058  004B66  27DC               	addwf	(??_fgets+2)& (0+255),f,b
  4059  004B68  51DB               	movf	(??_fgets+1)& (0+255),w,b
  4060  004B6A  23DD               	addwfc	(??_fgets+3)& (0+255),f,b
  4061  004B6C  51DC               	movf	(??_fgets+2)& (0+255),w,b
  4062  004B6E  5DDF               	subwf	fgets@i& (0+255),w,b
  4063  004B70  51E0               	movf	(fgets@i+1)& (0+255),w,b
  4064  004B72  0A80               	xorlw	128
  4065  004B74  6FDE               	movwf	(??_fgets+4)& (0+255),b
  4066  004B76  51DD               	movf	(??_fgets+3)& (0+255),w,b
  4067  004B78  0A80               	xorlw	128
  4068  004B7A  59DE               	subwfb	(??_fgets+4)& (0+255),w,b
  4069  004B7C  A0D8               	btfss	status,0,c
  4070  004B7E  D7C7               	goto	l1271
  4071  004B80                     u13780:
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;tff.c: 1749: }
  4075                           ;tff.c: 1750: *p = 0;
  4076                           
  4077                           ; BSR set to: 0
  4078  004B80  C0E3  FFD9         	movff	fgets@p,fsr2l
  4079  004B84  C0E4  FFDA         	movff	fgets@p+1,fsr2h
  4080  004B88  0E00               	movlw	0
  4081  004B8A  6EDF               	movwf	indf2,c
  4082                           
  4083                           ; BSR set to: 0
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;	Return value of _fgets is never used
  4087                           
  4088                           ; BSR set to: 0
  4089  004B8C  0012               	return	
  4090  004B8E                     __end_of_fgets:
  4091                           	opt stack 0
  4092                           tosu	equ	0xFFF
  4093                           tosh	equ	0xFFE
  4094                           tosl	equ	0xFFD
  4095                           pclath	equ	0xFFA
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           prodh	equ	0xFF4
  4101                           prodl	equ	0xFF3
  4102                           intcon	equ	0xFF2
  4103                           intcon2	equ	0xFF1
  4104                           intcon3	equ	0xFF0
  4105                           postinc0	equ	0xFEE
  4106                           wreg	equ	0xFE8
  4107                           indf1	equ	0xFE7
  4108                           postinc1	equ	0xFE6
  4109                           postdec1	equ	0xFE5
  4110                           fsr1h	equ	0xFE2
  4111                           fsr1l	equ	0xFE1
  4112                           indf2	equ	0xFDF
  4113                           postinc2	equ	0xFDE
  4114                           postdec2	equ	0xFDD
  4115                           fsr2h	equ	0xFDA
  4116                           fsr2l	equ	0xFD9
  4117                           status	equ	0xFD8
  4118                           
  4119 ;; *************** function _f_read *****************
  4120 ;; Defined at:
  4121 ;;		line 924 in file "bibliotecas/tff.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;  fp              2   83[BANK0 ] PTR struct _FIL
  4124 ;;		 -> fil(28), 
  4125 ;;  buff            2   85[BANK0 ] PTR void 
  4126 ;;		 -> dado_arquivo(20), 
  4127 ;;  btr             2   87[BANK0 ] unsigned int 
  4128 ;;  br              2   89[BANK0 ] PTR unsigned int 
  4129 ;;		 -> fgets@rc(2), 
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;  sect            4  104[BANK0 ] unsigned long 
  4132 ;;  remain          4  100[BANK0 ] unsigned long 
  4133 ;;  rcnt            2  114[BANK0 ] unsigned int 
  4134 ;;  cc              2  112[BANK0 ] unsigned int 
  4135 ;;  clust           2  110[BANK0 ] unsigned short 
  4136 ;;  rbuff           2  108[BANK0 ] PTR unsigned char 
  4137 ;;		 -> dado_arquivo(20), 
  4138 ;;  res             1   99[BANK0 ] enum E155
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  1    wreg      enum E155
  4141 ;; Registers used:
  4142 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4148 ;;      Params:         0       8       0       0       0       0       0       0       0
  4149 ;;      Locals:         0      17       0       0       0       0       0       0       0
  4150 ;;      Temps:          0       8       0       0       0       0       0       0       0
  4151 ;;      Totals:         0      33       0       0       0       0       0       0       0
  4152 ;;Total ram usage:       33 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:   10
  4155 ;; This function calls:
  4156 ;;		_clust2sect
  4157 ;;		_disk_read
  4158 ;;		_get_cluster
  4159 ;;		_memcpy
  4160 ;;		_move_window
  4161 ;;		_validate
  4162 ;; This function is called by:
  4163 ;;		_fgets
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text18
  4168  0013C4                     __ptext18:
  4169                           	opt stack 0
  4170  0013C4                     _f_read:
  4171                           	opt stack 16
  4172                           
  4173                           ;tff.c: 931: FRESULT res;
  4174                           ;tff.c: 932: DWORD sect, remain;
  4175                           ;tff.c: 933: UINT rcnt, cc;
  4176                           ;tff.c: 934: CLUST clust;
  4177                           ;tff.c: 935: BYTE *rbuff = buff;
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;incstack = 0
  4181  0013C4  C0B5  F0CC         	movff	f_read@buff,f_read@rbuff
  4182  0013C8  C0B6  F0CD         	movff	f_read@buff+1,f_read@rbuff+1
  4183                           
  4184                           ;tff.c: 938: *br = 0;
  4185  0013CC  C0B9  FFD9         	movff	f_read@br,fsr2l
  4186  0013D0  C0BA  FFDA         	movff	f_read@br+1,fsr2h
  4187  0013D4  0E00               	movlw	0
  4188  0013D6  6EDE               	movwf	postinc2,c
  4189  0013D8  0E00               	movlw	0
  4190  0013DA  6EDD               	movwf	postdec2,c
  4191                           
  4192                           ;tff.c: 939: res = validate(fp->fs, fp->id);
  4193  0013DC  0100               	movlb	0	; () banked
  4194  0013DE  EE20 F004          	lfsr	2,4
  4195  0013E2  51B3               	movf	f_read@fp& (0+255),w,b
  4196  0013E4  26D9               	addwf	fsr2l,f,c
  4197  0013E6  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4198  0013E8  22DA               	addwfc	fsr2h,f,c
  4199  0013EA  CFDE F065          	movff	postinc2,validate@fs
  4200  0013EE  CFDD F066          	movff	postdec2,validate@fs+1
  4201  0013F2  C0B3  FFD9         	movff	f_read@fp,fsr2l
  4202  0013F6  C0B4  FFDA         	movff	f_read@fp+1,fsr2h
  4203  0013FA  CFDE F067          	movff	postinc2,validate@id
  4204  0013FE  CFDD F068          	movff	postdec2,validate@id+1
  4205  001402  EC39  F02A         	call	_validate	;wreg free
  4206  001406  0100               	movlb	0	; () banked
  4207  001408  6FC3               	movwf	f_read@res& (0+255),b
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;tff.c: 940: if (res != FR_OK) return res;
  4211  00140A  51C3               	movf	f_read@res& (0+255),w,b
  4212  00140C  A4D8               	btfss	status,2,c
  4213  00140E  0012               	return	
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;tff.c: 941: if (fp->flag & 0x80) return FR_RW_ERROR;
  4217                           
  4218                           ; BSR set to: 0
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;	Return value of _f_read is never used
  4222  001410  EE20 F002          	lfsr	2,2
  4223  001414  51B3               	movf	f_read@fp& (0+255),w,b
  4224  001416  26D9               	addwf	fsr2l,f,c
  4225  001418  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4226  00141A  22DA               	addwfc	fsr2h,f,c
  4227  00141C  BEDF               	btfsc	indf2,7,c
  4228  00141E  0012               	return	
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;tff.c: 942: if (!(fp->flag & 0x01)) return FR_DENIED;
  4232                           
  4233                           ; BSR set to: 0
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;	Return value of _f_read is never used
  4237  001420  EE20 F002          	lfsr	2,2
  4238  001424  51B3               	movf	f_read@fp& (0+255),w,b
  4239  001426  26D9               	addwf	fsr2l,f,c
  4240  001428  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4241  00142A  22DA               	addwfc	fsr2h,f,c
  4242  00142C  A0DF               	btfss	indf2,0,c
  4243  00142E  0012               	return	
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;tff.c: 943: remain = fp->fsize - fp->fptr;
  4247                           
  4248                           ; BSR set to: 0
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;	Return value of _f_read is never used
  4252  001430  EE20 F00A          	lfsr	2,10
  4253  001434  51B3               	movf	f_read@fp& (0+255),w,b
  4254  001436  26D9               	addwf	fsr2l,f,c
  4255  001438  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4256  00143A  22DA               	addwfc	fsr2h,f,c
  4257  00143C  CFDE F0BB          	movff	postinc2,??_f_read
  4258  001440  CFDE F0BC          	movff	postinc2,??_f_read+1
  4259  001444  CFDE F0BD          	movff	postinc2,??_f_read+2
  4260  001448  CFDE F0BE          	movff	postinc2,??_f_read+3
  4261  00144C  EE20 F006          	lfsr	2,6
  4262  001450  51B3               	movf	f_read@fp& (0+255),w,b
  4263  001452  26D9               	addwf	fsr2l,f,c
  4264  001454  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4265  001456  22DA               	addwfc	fsr2h,f,c
  4266  001458  CFDE F0BF          	movff	postinc2,??_f_read+4
  4267  00145C  CFDE F0C0          	movff	postinc2,??_f_read+5
  4268  001460  CFDE F0C1          	movff	postinc2,??_f_read+6
  4269  001464  CFDE F0C2          	movff	postinc2,??_f_read+7
  4270  001468  1FBF               	comf	(??_f_read+4)& (0+255),f,b
  4271  00146A  1FC0               	comf	(??_f_read+5)& (0+255),f,b
  4272  00146C  1FC1               	comf	(??_f_read+6)& (0+255),f,b
  4273  00146E  1FC2               	comf	(??_f_read+7)& (0+255),f,b
  4274  001470  2BBF               	incf	(??_f_read+4)& (0+255),f,b
  4275  001472  0E00               	movlw	0
  4276  001474  23C0               	addwfc	(??_f_read+5)& (0+255),f,b
  4277  001476  23C1               	addwfc	(??_f_read+6)& (0+255),f,b
  4278  001478  23C2               	addwfc	(??_f_read+7)& (0+255),f,b
  4279  00147A  51BB               	movf	??_f_read& (0+255),w,b
  4280  00147C  25BF               	addwf	(??_f_read+4)& (0+255),w,b
  4281  00147E  6FC4               	movwf	f_read@remain& (0+255),b
  4282  001480  51BC               	movf	(??_f_read+1)& (0+255),w,b
  4283  001482  21C0               	addwfc	(??_f_read+5)& (0+255),w,b
  4284  001484  6FC5               	movwf	(f_read@remain+1)& (0+255),b
  4285  001486  51BD               	movf	(??_f_read+2)& (0+255),w,b
  4286  001488  21C1               	addwfc	(??_f_read+6)& (0+255),w,b
  4287  00148A  6FC6               	movwf	(f_read@remain+2)& (0+255),b
  4288  00148C  51BE               	movf	(??_f_read+3)& (0+255),w,b
  4289  00148E  21C2               	addwfc	(??_f_read+7)& (0+255),w,b
  4290  001490  6FC7               	movwf	(f_read@remain+3)& (0+255),b
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;tff.c: 944: if (btr > remain) btr = (UINT)remain;
  4294  001492  51B7               	movf	f_read@btr& (0+255),w,b
  4295  001494  6FBB               	movwf	??_f_read& (0+255),b
  4296  001496  51B8               	movf	(f_read@btr+1)& (0+255),w,b
  4297  001498  6FBC               	movwf	(??_f_read+1)& (0+255),b
  4298  00149A  6BBD               	clrf	(??_f_read+2)& (0+255),b
  4299  00149C  6BBE               	clrf	(??_f_read+3)& (0+255),b
  4300  00149E  51BB               	movf	??_f_read& (0+255),w,b
  4301  0014A0  5DC4               	subwf	f_read@remain& (0+255),w,b
  4302  0014A2  51BC               	movf	(??_f_read+1)& (0+255),w,b
  4303  0014A4  59C5               	subwfb	(f_read@remain+1)& (0+255),w,b
  4304  0014A6  51BD               	movf	(??_f_read+2)& (0+255),w,b
  4305  0014A8  59C6               	subwfb	(f_read@remain+2)& (0+255),w,b
  4306  0014AA  51BE               	movf	(??_f_read+3)& (0+255),w,b
  4307  0014AC  59C7               	subwfb	(f_read@remain+3)& (0+255),w,b
  4308  0014AE  B0D8               	btfsc	status,0,c
  4309  0014B0  D1E0               	goto	l1166
  4310                           
  4311                           ; BSR set to: 0
  4312  0014B2  C0C4  F0B7         	movff	f_read@remain,f_read@btr
  4313  0014B6  C0C5  F0B8         	movff	f_read@remain+1,f_read@btr+1
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;tff.c: 946: for ( ; btr;
  4317                           ;tff.c: 947: rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  4318  0014BA  D1DB               	goto	l1166
  4319  0014BC                     
  4320                           ; BSR set to: 0
  4321                           ;tff.c: 948: if ((fp->fptr % 512U) == 0) {
  4322                           
  4323                           ; BSR set to: 0
  4324  0014BC  EE20 F006          	lfsr	2,6
  4325  0014C0  51B3               	movf	f_read@fp& (0+255),w,b
  4326  0014C2  26D9               	addwf	fsr2l,f,c
  4327  0014C4  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4328  0014C6  22DA               	addwfc	fsr2h,f,c
  4329  0014C8  0EFF               	movlw	255
  4330  0014CA  14DE               	andwf	postinc2,w,c
  4331  0014CC  6FBB               	movwf	??_f_read& (0+255),b
  4332  0014CE  0E01               	movlw	1
  4333  0014D0  14DE               	andwf	postinc2,w,c
  4334  0014D2  6FBC               	movwf	(??_f_read+1)& (0+255),b
  4335  0014D4  0E00               	movlw	0
  4336  0014D6  14DE               	andwf	postinc2,w,c
  4337  0014D8  6FBD               	movwf	(??_f_read+2)& (0+255),b
  4338  0014DA  0E00               	movlw	0
  4339  0014DC  14DE               	andwf	postinc2,w,c
  4340  0014DE  6FBE               	movwf	(??_f_read+3)& (0+255),b
  4341  0014E0  51BB               	movf	??_f_read& (0+255),w,b
  4342  0014E2  11BC               	iorwf	(??_f_read+1)& (0+255),w,b
  4343  0014E4  11BD               	iorwf	(??_f_read+2)& (0+255),w,b
  4344  0014E6  11BE               	iorwf	(??_f_read+3)& (0+255),w,b
  4345  0014E8  A4D8               	btfss	status,2,c
  4346  0014EA  D114               	goto	l1168
  4347                           
  4348                           ; BSR set to: 0
  4349                           ;tff.c: 949: if (fp->csect >= fp->fs->csize) {
  4350  0014EC  EE20 F004          	lfsr	2,4
  4351  0014F0  51B3               	movf	f_read@fp& (0+255),w,b
  4352  0014F2  26D9               	addwf	fsr2l,f,c
  4353  0014F4  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4354  0014F6  22DA               	addwfc	fsr2h,f,c
  4355  0014F8  EE10 F01D          	lfsr	1,29
  4356  0014FC  50DE               	movf	postinc2,w,c
  4357  0014FE  26E1               	addwf	fsr1l,f,c
  4358  001500  50DD               	movf	postdec2,w,c
  4359  001502  22E2               	addwfc	fsr1h,f,c
  4360  001504  EE20 F003          	lfsr	2,3
  4361  001508  51B3               	movf	f_read@fp& (0+255),w,b
  4362  00150A  26D9               	addwf	fsr2l,f,c
  4363  00150C  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4364  00150E  22DA               	addwfc	fsr2h,f,c
  4365  001510  50E6               	movf	postinc1,w,c
  4366  001512  5CDE               	subwf	postinc2,w,c
  4367  001514  A0D8               	btfss	status,0,c
  4368  001516  D053               	goto	l1169
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;tff.c: 950: clust = (fp->fptr == 0) ?
  4372                           ;tff.c: 951: fp->org_clust : get_cluster(fp->curr_clust);
  4373  001518  EE20 F006          	lfsr	2,6
  4374  00151C  51B3               	movf	f_read@fp& (0+255),w,b
  4375  00151E  26D9               	addwf	fsr2l,f,c
  4376  001520  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4377  001522  22DA               	addwfc	fsr2h,f,c
  4378  001524  50DE               	movf	postinc2,w,c
  4379  001526  10DE               	iorwf	postinc2,w,c
  4380  001528  10DE               	iorwf	postinc2,w,c
  4381  00152A  10DE               	iorwf	postinc2,w,c
  4382  00152C  B4D8               	btfsc	status,2,c
  4383  00152E  D011               	goto	l1171
  4384                           
  4385                           ; BSR set to: 0
  4386  001530  EE20 F010          	lfsr	2,16
  4387  001534  51B3               	movf	f_read@fp& (0+255),w,b
  4388  001536  26D9               	addwf	fsr2l,f,c
  4389  001538  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4390  00153A  22DA               	addwfc	fsr2h,f,c
  4391  00153C  CFDE F0A0          	movff	postinc2,get_cluster@clust
  4392  001540  CFDD F0A1          	movff	postdec2,get_cluster@clust+1
  4393  001544  EC07  F019         	call	_get_cluster	;wreg free
  4394  001548  C0A0  F0CE         	movff	?_get_cluster,f_read@clust
  4395  00154C  C0A1  F0CF         	movff	?_get_cluster+1,f_read@clust+1
  4396  001550  D00B               	goto	l1173
  4397  001552                     l1171:
  4398  001552  0100               	movlb	0	; () banked
  4399  001554  EE20 F00E          	lfsr	2,14
  4400  001558  51B3               	movf	f_read@fp& (0+255),w,b
  4401  00155A  26D9               	addwf	fsr2l,f,c
  4402  00155C  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4403  00155E  22DA               	addwfc	fsr2h,f,c
  4404  001560  CFDE F0CE          	movff	postinc2,f_read@clust
  4405  001564  CFDD F0CF          	movff	postdec2,f_read@clust+1
  4406  001568                     l1173:
  4407                           
  4408                           ;tff.c: 952: if (clust < 2 || clust >= fp->fs->max_clust) goto fr_error;
  4409                           
  4410                           ; BSR set to: 0
  4411  001568  0100               	movlb	0	; () banked
  4412  00156A  51CF               	movf	(f_read@clust+1)& (0+255),w,b
  4413  00156C  E104               	bnz	u12890
  4414  00156E  0E02               	movlw	2
  4415  001570  5DCE               	subwf	f_read@clust& (0+255),w,b
  4416  001572  A0D8               	btfss	status,0,c
  4417  001574  D183               	goto	l1177
  4418  001576                     u12890:
  4419                           
  4420                           ; BSR set to: 0
  4421  001576  EE20 F004          	lfsr	2,4
  4422  00157A  51B3               	movf	f_read@fp& (0+255),w,b
  4423  00157C  26D9               	addwf	fsr2l,f,c
  4424  00157E  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4425  001580  22DA               	addwfc	fsr2h,f,c
  4426  001582  EE10 F016          	lfsr	1,22
  4427  001586  50DE               	movf	postinc2,w,c
  4428  001588  26E1               	addwf	fsr1l,f,c
  4429  00158A  50DD               	movf	postdec2,w,c
  4430  00158C  22E2               	addwfc	fsr1h,f,c
  4431  00158E  50E6               	movf	postinc1,w,c
  4432  001590  5DCE               	subwf	f_read@clust& (0+255),w,b
  4433  001592  50E6               	movf	postinc1,w,c
  4434  001594  59CF               	subwfb	(f_read@clust+1)& (0+255),w,b
  4435  001596  B0D8               	btfsc	status,0,c
  4436  001598  D171               	goto	l1177
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;tff.c: 953: fp->curr_clust = clust;
  4440                           
  4441                           ; BSR set to: 0
  4442                           
  4443                           ; BSR set to: 0
  4444  00159A  EE20 F010          	lfsr	2,16
  4445  00159E  51B3               	movf	f_read@fp& (0+255),w,b
  4446  0015A0  26D9               	addwf	fsr2l,f,c
  4447  0015A2  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4448  0015A4  22DA               	addwfc	fsr2h,f,c
  4449  0015A6  C0CE  FFDE         	movff	f_read@clust,postinc2
  4450  0015AA  C0CF  FFDD         	movff	f_read@clust+1,postdec2
  4451                           
  4452                           ;tff.c: 954: fp->csect = 0;
  4453  0015AE  EE20 F003          	lfsr	2,3
  4454  0015B2  51B3               	movf	f_read@fp& (0+255),w,b
  4455  0015B4  26D9               	addwf	fsr2l,f,c
  4456  0015B6  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4457  0015B8  22DA               	addwfc	fsr2h,f,c
  4458  0015BA  0E00               	movlw	0
  4459  0015BC  6EDF               	movwf	indf2,c
  4460  0015BE                     l1169:
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;tff.c: 955: }
  4464                           ;tff.c: 956: sect = clust2sect(fp->curr_clust) + fp->csect;
  4465                           
  4466                           ; BSR set to: 0
  4467  0015BE  EE20 F010          	lfsr	2,16
  4468  0015C2  51B3               	movf	f_read@fp& (0+255),w,b
  4469  0015C4  26D9               	addwf	fsr2l,f,c
  4470  0015C6  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4471  0015C8  22DA               	addwfc	fsr2h,f,c
  4472  0015CA  CFDE F06C          	movff	postinc2,clust2sect@clust
  4473  0015CE  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  4474  0015D2  EC93  F022         	call	_clust2sect	;wreg free
  4475  0015D6  0100               	movlb	0	; () banked
  4476  0015D8  EE20 F003          	lfsr	2,3
  4477  0015DC  51B3               	movf	f_read@fp& (0+255),w,b
  4478  0015DE  26D9               	addwf	fsr2l,f,c
  4479  0015E0  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4480  0015E2  22DA               	addwfc	fsr2h,f,c
  4481  0015E4  50DF               	movf	indf2,w,c
  4482  0015E6  6FBB               	movwf	??_f_read& (0+255),b
  4483  0015E8  51BB               	movf	??_f_read& (0+255),w,b
  4484  0015EA  256C               	addwf	?_clust2sect& (0+255),w,b
  4485  0015EC  6FC8               	movwf	f_read@sect& (0+255),b
  4486  0015EE  0E00               	movlw	0
  4487  0015F0  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  4488  0015F2  6FC9               	movwf	(f_read@sect+1)& (0+255),b
  4489  0015F4  0E00               	movlw	0
  4490  0015F6  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  4491  0015F8  6FCA               	movwf	(f_read@sect+2)& (0+255),b
  4492  0015FA  0E00               	movlw	0
  4493  0015FC  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  4494  0015FE  6FCB               	movwf	(f_read@sect+3)& (0+255),b
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;tff.c: 957: cc = btr / 512U;
  4498  001600  C0B7  F0BB         	movff	f_read@btr,??_f_read
  4499  001604  C0B8  F0BC         	movff	f_read@btr+1,??_f_read+1
  4500  001608  0E09               	movlw	9
  4501  00160A  6FBD               	movwf	(??_f_read+2)& (0+255),b
  4502  00160C                     u12915:
  4503  00160C  90D8               	bcf	status,0,c
  4504  00160E  33BC               	rrcf	(??_f_read+1)& (0+255),f,b
  4505  001610  33BB               	rrcf	??_f_read& (0+255),f,b
  4506  001612  2FBD               	decfsz	(??_f_read+2)& (0+255),f,b
  4507  001614  D7FB               	goto	u12915
  4508  001616  C0BB  F0D0         	movff	??_f_read,f_read@cc
  4509  00161A  C0BC  F0D1         	movff	??_f_read+1,f_read@cc+1
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;tff.c: 958: if (cc) {
  4513  00161E  51D0               	movf	f_read@cc& (0+255),w,b
  4514  001620  11D1               	iorwf	(f_read@cc+1)& (0+255),w,b
  4515  001622  B4D8               	btfsc	status,2,c
  4516  001624  D070               	goto	l1178
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;tff.c: 959: if (fp->csect + cc > fp->fs->csize)
  4520  001626  EE20 F003          	lfsr	2,3
  4521  00162A  51B3               	movf	f_read@fp& (0+255),w,b
  4522  00162C  26D9               	addwf	fsr2l,f,c
  4523  00162E  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4524  001630  22DA               	addwfc	fsr2h,f,c
  4525  001632  50DF               	movf	indf2,w,c
  4526  001634  6FBB               	movwf	??_f_read& (0+255),b
  4527  001636  51BB               	movf	??_f_read& (0+255),w,b
  4528  001638  25D0               	addwf	f_read@cc& (0+255),w,b
  4529  00163A  6FBC               	movwf	(??_f_read+1)& (0+255),b
  4530  00163C  0E00               	movlw	0
  4531  00163E  21D1               	addwfc	(f_read@cc+1)& (0+255),w,b
  4532  001640  6FBD               	movwf	(??_f_read+2)& (0+255),b
  4533  001642  EE20 F004          	lfsr	2,4
  4534  001646  51B3               	movf	f_read@fp& (0+255),w,b
  4535  001648  26D9               	addwf	fsr2l,f,c
  4536  00164A  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4537  00164C  22DA               	addwfc	fsr2h,f,c
  4538  00164E  EE10 F01D          	lfsr	1,29
  4539  001652  50DE               	movf	postinc2,w,c
  4540  001654  26E1               	addwf	fsr1l,f,c
  4541  001656  50DD               	movf	postdec2,w,c
  4542  001658  22E2               	addwfc	fsr1h,f,c
  4543  00165A  50E7               	movf	indf1,w,c
  4544  00165C  6FBE               	movwf	(??_f_read+3)& (0+255),b
  4545  00165E  6BBF               	clrf	(??_f_read+4)& (0+255),b
  4546  001660  51BC               	movf	(??_f_read+1)& (0+255),w,b
  4547  001662  5DBE               	subwf	(??_f_read+3)& (0+255),w,b
  4548  001664  51BD               	movf	(??_f_read+2)& (0+255),w,b
  4549  001666  59BF               	subwfb	(??_f_read+4)& (0+255),w,b
  4550  001668  B0D8               	btfsc	status,0,c
  4551  00166A  D021               	goto	l1179
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;tff.c: 960: cc = fp->fs->csize - fp->csect;
  4555  00166C  EE20 F003          	lfsr	2,3
  4556  001670  51B3               	movf	f_read@fp& (0+255),w,b
  4557  001672  26D9               	addwf	fsr2l,f,c
  4558  001674  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4559  001676  22DA               	addwfc	fsr2h,f,c
  4560  001678  50DF               	movf	indf2,w,c
  4561  00167A  6FBB               	movwf	??_f_read& (0+255),b
  4562  00167C  6BBC               	clrf	(??_f_read+1)& (0+255),b
  4563  00167E  1FBB               	comf	??_f_read& (0+255),f,b
  4564  001680  1FBC               	comf	(??_f_read+1)& (0+255),f,b
  4565  001682  4BBB               	infsnz	??_f_read& (0+255),f,b
  4566  001684  2BBC               	incf	(??_f_read+1)& (0+255),f,b
  4567  001686  EE20 F004          	lfsr	2,4
  4568  00168A  51B3               	movf	f_read@fp& (0+255),w,b
  4569  00168C  26D9               	addwf	fsr2l,f,c
  4570  00168E  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4571  001690  22DA               	addwfc	fsr2h,f,c
  4572  001692  EE10 F01D          	lfsr	1,29
  4573  001696  50DE               	movf	postinc2,w,c
  4574  001698  26E1               	addwf	fsr1l,f,c
  4575  00169A  50DD               	movf	postdec2,w,c
  4576  00169C  22E2               	addwfc	fsr1h,f,c
  4577  00169E  50E7               	movf	indf1,w,c
  4578  0016A0  6FBD               	movwf	(??_f_read+2)& (0+255),b
  4579  0016A2  51BD               	movf	(??_f_read+2)& (0+255),w,b
  4580  0016A4  25BB               	addwf	??_f_read& (0+255),w,b
  4581  0016A6  6FD0               	movwf	f_read@cc& (0+255),b
  4582  0016A8  0E00               	movlw	0
  4583  0016AA  21BC               	addwfc	(??_f_read+1)& (0+255),w,b
  4584  0016AC  6FD1               	movwf	(f_read@cc+1)& (0+255),b
  4585  0016AE                     l1179:
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;tff.c: 961: if (disk_read(0, rbuff, sect, (BYTE)cc) != RES_OK)
  4589                           
  4590                           ; BSR set to: 0
  4591  0016AE  C0CC  F07F         	movff	f_read@rbuff,disk_read@buff
  4592  0016B2  C0CD  F080         	movff	f_read@rbuff+1,disk_read@buff+1
  4593  0016B6  C0C8  F081         	movff	f_read@sect,disk_read@sector
  4594  0016BA  C0C9  F082         	movff	f_read@sect+1,disk_read@sector+1
  4595  0016BE  C0CA  F083         	movff	f_read@sect+2,disk_read@sector+2
  4596  0016C2  C0CB  F084         	movff	f_read@sect+3,disk_read@sector+3
  4597  0016C6  C0D0  F085         	movff	f_read@cc,disk_read@count
  4598  0016CA  0E00               	movlw	0
  4599  0016CC  ECC7  F025         	call	_disk_read
  4600  0016D0  0900               	iorlw	0
  4601  0016D2  A4D8               	btfss	status,2,c
  4602  0016D4  D0D3               	goto	l1177
  4603                           
  4604                           ;tff.c: 963: fp->csect += (BYTE)cc;
  4605                           
  4606                           ;tff.c: 962: goto fr_error;
  4607  0016D6  0100               	movlb	0	; () banked
  4608  0016D8  EE20 F003          	lfsr	2,3
  4609  0016DC  51B3               	movf	f_read@fp& (0+255),w,b
  4610  0016DE  26D9               	addwf	fsr2l,f,c
  4611  0016E0  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4612  0016E2  22DA               	addwfc	fsr2h,f,c
  4613  0016E4  51D0               	movf	f_read@cc& (0+255),w,b
  4614  0016E6  26DF               	addwf	indf2,f,c
  4615                           
  4616                           ; BSR set to: 0
  4617                           ;tff.c: 964: rcnt = 512U * cc;
  4618  0016E8  C0D0  F0BB         	movff	f_read@cc,??_f_read
  4619  0016EC  C0D1  F0BC         	movff	f_read@cc+1,??_f_read+1
  4620  0016F0  0E09               	movlw	9
  4621  0016F2                     u12955:
  4622  0016F2  90D8               	bcf	status,0,c
  4623  0016F4  37BB               	rlcf	??_f_read& (0+255),f,b
  4624  0016F6  37BC               	rlcf	(??_f_read+1)& (0+255),f,b
  4625  0016F8  2EE8               	decfsz	wreg,f,c
  4626  0016FA  D7FB               	goto	u12955
  4627  0016FC  C0BB  F0D2         	movff	??_f_read,f_read@rcnt
  4628  001700  C0BC  F0D3         	movff	??_f_read+1,f_read@rcnt+1
  4629                           
  4630                           ;tff.c: 965: continue;
  4631  001704  D098               	goto	l1181
  4632  001706                     l1178:
  4633                           
  4634                           ; BSR set to: 0
  4635                           ;tff.c: 966: }
  4636                           ;tff.c: 967: fp->csect++;
  4637                           
  4638                           ; BSR set to: 0
  4639  001706  EE20 F003          	lfsr	2,3
  4640  00170A  51B3               	movf	f_read@fp& (0+255),w,b
  4641  00170C  26D9               	addwf	fsr2l,f,c
  4642  00170E  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4643  001710  22DA               	addwfc	fsr2h,f,c
  4644  001712  2ADF               	incf	indf2,f,c
  4645  001714                     l1168:
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;tff.c: 968: }
  4649                           ;tff.c: 969: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  4650                           
  4651                           ; BSR set to: 0
  4652  001714  EE20 F010          	lfsr	2,16
  4653  001718  51B3               	movf	f_read@fp& (0+255),w,b
  4654  00171A  26D9               	addwf	fsr2l,f,c
  4655  00171C  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4656  00171E  22DA               	addwfc	fsr2h,f,c
  4657  001720  CFDE F06C          	movff	postinc2,clust2sect@clust
  4658  001724  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  4659  001728  EC93  F022         	call	_clust2sect	;wreg free
  4660  00172C  0100               	movlb	0	; () banked
  4661  00172E  EE20 F003          	lfsr	2,3
  4662  001732  51B3               	movf	f_read@fp& (0+255),w,b
  4663  001734  26D9               	addwf	fsr2l,f,c
  4664  001736  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4665  001738  22DA               	addwfc	fsr2h,f,c
  4666  00173A  50DF               	movf	indf2,w,c
  4667  00173C  6FBB               	movwf	??_f_read& (0+255),b
  4668  00173E  51BB               	movf	??_f_read& (0+255),w,b
  4669  001740  256C               	addwf	?_clust2sect& (0+255),w,b
  4670  001742  6FBC               	movwf	(??_f_read+1)& (0+255),b
  4671  001744  0E00               	movlw	0
  4672  001746  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  4673  001748  6FBD               	movwf	(??_f_read+2)& (0+255),b
  4674  00174A  0E00               	movlw	0
  4675  00174C  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  4676  00174E  6FBE               	movwf	(??_f_read+3)& (0+255),b
  4677  001750  0E00               	movlw	0
  4678  001752  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  4679  001754  6FBF               	movwf	(??_f_read+4)& (0+255),b
  4680  001756  0EFF               	movlw	255
  4681  001758  25BC               	addwf	(??_f_read+1)& (0+255),w,b
  4682  00175A  6FC8               	movwf	f_read@sect& (0+255),b
  4683  00175C  0EFF               	movlw	255
  4684  00175E  21BD               	addwfc	(??_f_read+2)& (0+255),w,b
  4685  001760  6FC9               	movwf	(f_read@sect+1)& (0+255),b
  4686  001762  0EFF               	movlw	255
  4687  001764  21BE               	addwfc	(??_f_read+3)& (0+255),w,b
  4688  001766  6FCA               	movwf	(f_read@sect+2)& (0+255),b
  4689  001768  0EFF               	movlw	255
  4690  00176A  21BF               	addwfc	(??_f_read+4)& (0+255),w,b
  4691  00176C  6FCB               	movwf	(f_read@sect+3)& (0+255),b
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;tff.c: 970: if (!move_window(sect)) goto fr_error;
  4695  00176E  C0C8  F08B         	movff	f_read@sect,move_window@sector
  4696  001772  C0C9  F08C         	movff	f_read@sect+1,move_window@sector+1
  4697  001776  C0CA  F08D         	movff	f_read@sect+2,move_window@sector+2
  4698  00177A  C0CB  F08E         	movff	f_read@sect+3,move_window@sector+3
  4699  00177E  ECDD  F01B         	call	_move_window	;wreg free
  4700  001782  0900               	iorlw	0
  4701  001784  B4D8               	btfsc	status,2,c
  4702  001786  D07A               	goto	l1177
  4703                           
  4704                           ;tff.c: 971: rcnt = 512U - (fp->fptr % 512U);
  4705  001788  0EFF               	movlw	255
  4706  00178A  0100               	movlb	0	; () banked
  4707  00178C  6FBB               	movwf	??_f_read& (0+255),b
  4708  00178E  0E01               	movlw	1
  4709  001790  6FBC               	movwf	(??_f_read+1)& (0+255),b
  4710  001792  EE20 F006          	lfsr	2,6
  4711  001796  51B3               	movf	f_read@fp& (0+255),w,b
  4712  001798  26D9               	addwf	fsr2l,f,c
  4713  00179A  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4714  00179C  22DA               	addwfc	fsr2h,f,c
  4715  00179E  CFDE F0BD          	movff	postinc2,??_f_read+2
  4716  0017A2  CFDD F0BE          	movff	postdec2,??_f_read+3
  4717  0017A6  51BB               	movf	??_f_read& (0+255),w,b
  4718  0017A8  17BD               	andwf	(??_f_read+2)& (0+255),f,b
  4719  0017AA  51BC               	movf	(??_f_read+1)& (0+255),w,b
  4720  0017AC  17BE               	andwf	(??_f_read+3)& (0+255),f,b
  4721  0017AE  1FBD               	comf	(??_f_read+2)& (0+255),f,b
  4722  0017B0  1FBE               	comf	(??_f_read+3)& (0+255),f,b
  4723  0017B2  4BBD               	infsnz	(??_f_read+2)& (0+255),f,b
  4724  0017B4  2BBE               	incf	(??_f_read+3)& (0+255),f,b
  4725  0017B6  0E00               	movlw	0
  4726  0017B8  25BD               	addwf	(??_f_read+2)& (0+255),w,b
  4727  0017BA  6FD2               	movwf	f_read@rcnt& (0+255),b
  4728  0017BC  0E02               	movlw	2
  4729  0017BE  21BE               	addwfc	(??_f_read+3)& (0+255),w,b
  4730  0017C0  6FD3               	movwf	(f_read@rcnt+1)& (0+255),b
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;tff.c: 972: if (rcnt > btr) rcnt = btr;
  4734  0017C2  51D2               	movf	f_read@rcnt& (0+255),w,b
  4735  0017C4  5DB7               	subwf	f_read@btr& (0+255),w,b
  4736  0017C6  51D3               	movf	(f_read@rcnt+1)& (0+255),w,b
  4737  0017C8  59B8               	subwfb	(f_read@btr+1)& (0+255),w,b
  4738  0017CA  B0D8               	btfsc	status,0,c
  4739  0017CC  D004               	goto	l1183
  4740                           
  4741                           ; BSR set to: 0
  4742  0017CE  C0B7  F0D2         	movff	f_read@btr,f_read@rcnt
  4743  0017D2  C0B8  F0D3         	movff	f_read@btr+1,f_read@rcnt+1
  4744  0017D6                     l1183:
  4745                           
  4746                           ; BSR set to: 0
  4747                           ;tff.c: 973: memcpy(rbuff, &fp->fs->win[fp->fptr % 512U], rcnt);
  4748                           
  4749                           ; BSR set to: 0
  4750  0017D6  C0CC  F060         	movff	f_read@rbuff,memcpy@d1
  4751  0017DA  C0CD  F061         	movff	f_read@rbuff+1,memcpy@d1+1
  4752  0017DE  0EFF               	movlw	255
  4753  0017E0  6FBB               	movwf	??_f_read& (0+255),b
  4754  0017E2  0E01               	movlw	1
  4755  0017E4  6FBC               	movwf	(??_f_read+1)& (0+255),b
  4756  0017E6  EE20 F006          	lfsr	2,6
  4757  0017EA  51B3               	movf	f_read@fp& (0+255),w,b
  4758  0017EC  26D9               	addwf	fsr2l,f,c
  4759  0017EE  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4760  0017F0  22DA               	addwfc	fsr2h,f,c
  4761  0017F2  CFDE F0BD          	movff	postinc2,??_f_read+2
  4762  0017F6  CFDD F0BE          	movff	postdec2,??_f_read+3
  4763  0017FA  51BB               	movf	??_f_read& (0+255),w,b
  4764  0017FC  17BD               	andwf	(??_f_read+2)& (0+255),f,b
  4765  0017FE  51BC               	movf	(??_f_read+1)& (0+255),w,b
  4766  001800  17BE               	andwf	(??_f_read+3)& (0+255),f,b
  4767  001802  0E20               	movlw	32
  4768  001804  27BD               	addwf	(??_f_read+2)& (0+255),f,b
  4769  001806  0E00               	movlw	0
  4770  001808  23BE               	addwfc	(??_f_read+3)& (0+255),f,b
  4771  00180A  EE20 F004          	lfsr	2,4
  4772  00180E  51B3               	movf	f_read@fp& (0+255),w,b
  4773  001810  26D9               	addwf	fsr2l,f,c
  4774  001812  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4775  001814  22DA               	addwfc	fsr2h,f,c
  4776  001816  CFDE F0BF          	movff	postinc2,??_f_read+4
  4777  00181A  CFDD F0C0          	movff	postdec2,??_f_read+5
  4778  00181E  51BD               	movf	(??_f_read+2)& (0+255),w,b
  4779  001820  25BF               	addwf	(??_f_read+4)& (0+255),w,b
  4780  001822  6F62               	movwf	memcpy@s1& (0+255),b
  4781  001824  51BE               	movf	(??_f_read+3)& (0+255),w,b
  4782  001826  21C0               	addwfc	(??_f_read+5)& (0+255),w,b
  4783  001828  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  4784  00182A  C0D2  F064         	movff	f_read@rcnt,memcpy@n
  4785  00182E  C0D3  F065         	movff	f_read@rcnt+1,memcpy@n+1
  4786  001832  EC5F  F02A         	call	_memcpy	;wreg free
  4787  001836                     l1181:
  4788  001836  0100               	movlb	0	; () banked
  4789  001838  51D2               	movf	f_read@rcnt& (0+255),w,b
  4790  00183A  27CC               	addwf	f_read@rbuff& (0+255),f,b
  4791  00183C  51D3               	movf	(f_read@rcnt+1)& (0+255),w,b
  4792  00183E  23CD               	addwfc	(f_read@rbuff+1)& (0+255),f,b
  4793                           
  4794                           ; BSR set to: 0
  4795  001840  EE20 F006          	lfsr	2,6
  4796  001844  51B3               	movf	f_read@fp& (0+255),w,b
  4797  001846  26D9               	addwf	fsr2l,f,c
  4798  001848  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4799  00184A  22DA               	addwfc	fsr2h,f,c
  4800  00184C  51D2               	movf	f_read@rcnt& (0+255),w,b
  4801  00184E  26DE               	addwf	postinc2,f,c
  4802  001850  51D3               	movf	(f_read@rcnt+1)& (0+255),w,b
  4803  001852  22DE               	addwfc	postinc2,f,c
  4804  001854  0E00               	movlw	0
  4805  001856  22DE               	addwfc	postinc2,f,c
  4806  001858  22DE               	addwfc	postinc2,f,c
  4807                           
  4808                           ; BSR set to: 0
  4809  00185A  C0B9  FFD9         	movff	f_read@br,fsr2l
  4810  00185E  C0BA  FFDA         	movff	f_read@br+1,fsr2h
  4811  001862  51D2               	movf	f_read@rcnt& (0+255),w,b
  4812  001864  26DE               	addwf	postinc2,f,c
  4813  001866  51D3               	movf	(f_read@rcnt+1)& (0+255),w,b
  4814  001868  22DD               	addwfc	postdec2,f,c
  4815                           
  4816                           ; BSR set to: 0
  4817  00186A  51D2               	movf	f_read@rcnt& (0+255),w,b
  4818  00186C  5FB7               	subwf	f_read@btr& (0+255),f,b
  4819  00186E  51D3               	movf	(f_read@rcnt+1)& (0+255),w,b
  4820  001870  5BB8               	subwfb	(f_read@btr+1)& (0+255),f,b
  4821  001872                     l1166:
  4822                           
  4823                           ; BSR set to: 0
  4824                           
  4825                           ; BSR set to: 0
  4826  001872  51B7               	movf	f_read@btr& (0+255),w,b
  4827  001874  11B8               	iorwf	(f_read@btr+1)& (0+255),w,b
  4828  001876  B4D8               	btfsc	status,2,c
  4829  001878  0012               	return	
  4830  00187A  D620               	goto	l1167
  4831  00187C                     l1177:
  4832                           
  4833                           ;tff.c: 979: fp->flag |= 0x80;
  4834                           
  4835                           ; BSR set to: 0
  4836  00187C  0100               	movlb	0	; () banked
  4837  00187E  EE20 F002          	lfsr	2,2
  4838  001882  51B3               	movf	f_read@fp& (0+255),w,b
  4839  001884  26D9               	addwf	fsr2l,f,c
  4840  001886  51B4               	movf	(f_read@fp+1)& (0+255),w,b
  4841  001888  22DA               	addwfc	fsr2h,f,c
  4842  00188A  0E00               	movlw	0
  4843  00188C  8EDB               	bsf	plusw2,7,c
  4844  00188E  0012               	return	
  4845  001890                     __end_of_f_read:
  4846                           	opt stack 0
  4847                           tosu	equ	0xFFF
  4848                           tosh	equ	0xFFE
  4849                           tosl	equ	0xFFD
  4850                           pclath	equ	0xFFA
  4851                           tblptru	equ	0xFF8
  4852                           tblptrh	equ	0xFF7
  4853                           tblptrl	equ	0xFF6
  4854                           tablat	equ	0xFF5
  4855                           prodh	equ	0xFF4
  4856                           prodl	equ	0xFF3
  4857                           intcon	equ	0xFF2
  4858                           intcon2	equ	0xFF1
  4859                           intcon3	equ	0xFF0
  4860                           postinc0	equ	0xFEE
  4861                           wreg	equ	0xFE8
  4862                           indf1	equ	0xFE7
  4863                           postinc1	equ	0xFE6
  4864                           postdec1	equ	0xFE5
  4865                           fsr1h	equ	0xFE2
  4866                           fsr1l	equ	0xFE1
  4867                           indf2	equ	0xFDF
  4868                           postinc2	equ	0xFDE
  4869                           postdec2	equ	0xFDD
  4870                           plusw2	equ	0xFDB
  4871                           fsr2h	equ	0xFDA
  4872                           fsr2l	equ	0xFD9
  4873                           status	equ	0xFD8
  4874                           
  4875 ;; *************** function _escrita_sdcard *****************
  4876 ;; Defined at:
  4877 ;;		line 206 in file "bibliotecas/SDCard.c"
  4878 ;; Parameters:    Size  Location     Type
  4879 ;;		None
  4880 ;; Auto vars:     Size  Location     Type
  4881 ;;  bw              2    0        unsigned short 
  4882 ;; Return value:  Size  Location     Type
  4883 ;;                  1    wreg      void 
  4884 ;; Registers used:
  4885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4886 ;; Tracked objects:
  4887 ;;		On entry : 0/0
  4888 ;;		On exit  : 0/0
  4889 ;;		Unchanged: 0/0
  4890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4891 ;;      Params:         0       0       0       0       0       0       0       0       0
  4892 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4893 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4894 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4895 ;;Total ram usage:        0 bytes
  4896 ;; Hardware stack levels used:    1
  4897 ;; Hardware stack levels required when called:   15
  4898 ;; This function calls:
  4899 ;;		_desliga_SPI
  4900 ;;		_desliga_uart
  4901 ;;		_escreve_frase_ram_lcd
  4902 ;;		_escreve_inteiro_lcd
  4903 ;;		_f_close
  4904 ;;		_f_lseek
  4905 ;;		_f_mount
  4906 ;;		_f_open
  4907 ;;		_fprintf
  4908 ;;		_inicializa_SPI
  4909 ;;		_inicializa_uart
  4910 ;;		_posicao_cursor_lcd
  4911 ;; This function is called by:
  4912 ;;		_verifica_dados_operacionais
  4913 ;; This function uses a non-reentrant model
  4914 ;;
  4915                           
  4916                           	psect	text19
  4917  004380                     __ptext19:
  4918                           	opt stack 0
  4919  004380                     _escrita_sdcard:
  4920                           	opt stack 13
  4921                           
  4922                           ;SDCard.c: 208: WORD bw;
  4923                           ;SDCard.c: 209: PORTBbits.RB3 = 0;
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;incstack = 0
  4927  004380  9681               	bcf	3969,3,c	;volatile
  4928                           
  4929                           ;SDCard.c: 210: desliga_uart();
  4930  004382  ECDE  F02C         	call	_desliga_uart	;wreg free
  4931                           
  4932                           ;SDCard.c: 211: inicializa_SPI();
  4933  004386  EC5B  F02C         	call	_inicializa_SPI	;wreg free
  4934                           
  4935                           ;SDCard.c: 212: f_mount(0,&fs);
  4936  00438A  0EC8               	movlw	low _fs
  4937  00438C  6E21               	movwf	f_mount@fs,c
  4938  00438E  0E02               	movlw	high _fs
  4939  004390  6E22               	movwf	f_mount@fs+1,c
  4940  004392  0E00               	movlw	0
  4941  004394  EC13  F02A         	call	_f_mount
  4942                           
  4943                           ;SDCard.c: 217: if (f_open(&fil, filename, 0x10 | 0x02 ) == FR_OK)
  4944  004398  0E32               	movlw	low _fil
  4945  00439A  0100               	movlb	0	; () banked
  4946  00439C  6FD7               	movwf	f_open@fp& (0+255),b
  4947  00439E  0E01               	movlw	high _fil
  4948  0043A0  6FD8               	movwf	(f_open@fp+1)& (0+255),b
  4949  0043A2  0EF1               	movlw	low _filename
  4950  0043A4  6FD9               	movwf	f_open@path& (0+255),b
  4951  0043A6  0E01               	movlw	high _filename
  4952  0043A8  6FDA               	movwf	(f_open@path+1)& (0+255),b
  4953  0043AA  0E12               	movlw	18
  4954  0043AC  6FDB               	movwf	f_open@mode& (0+255),b
  4955  0043AE  EC6F  F010         	call	_f_open	;wreg free
  4956  0043B2  0900               	iorlw	0
  4957  0043B4  A4D8               	btfss	status,2,c
  4958  0043B6  D04A               	goto	l301
  4959                           
  4960                           ;SDCard.c: 218: {
  4961                           ;SDCard.c: 220: f_lseek(&fil, ((&fil)->fsize));
  4962  0043B8  0E32               	movlw	low _fil
  4963  0043BA  0100               	movlb	0	; () banked
  4964  0043BC  6FC4               	movwf	f_lseek@fp& (0+255),b
  4965  0043BE  0E01               	movlw	high _fil
  4966  0043C0  6FC5               	movwf	(f_lseek@fp+1)& (0+255),b
  4967  0043C2  C13C  F0C6         	movff	_fil+10,f_lseek@ofs
  4968  0043C6  C13D  F0C7         	movff	_fil+11,f_lseek@ofs+1
  4969  0043CA  C13E  F0C8         	movff	_fil+12,f_lseek@ofs+2
  4970  0043CE  C13F  F0C9         	movff	_fil+13,f_lseek@ofs+3
  4971  0043D2  EC48  F00C         	call	_f_lseek	;wreg free
  4972                           
  4973                           ;SDCard.c: 221: posicao_cursor_lcd(2,0);
  4974  0043D6  0E00               	movlw	0
  4975  0043D8  0100               	movlb	0	; () banked
  4976  0043DA  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4977  0043DC  0E02               	movlw	2
  4978  0043DE  ECA2  F027         	call	_posicao_cursor_lcd
  4979                           
  4980                           ;SDCard.c: 222: escreve_inteiro_lcd(((&fil)->fsize));
  4981  0043E2  C13C  F078         	movff	_fil+10,escreve_inteiro_lcd@valor
  4982  0043E6  C13D  F079         	movff	_fil+11,escreve_inteiro_lcd@valor+1
  4983  0043EA  EC51  F02B         	call	_escreve_inteiro_lcd	;wreg free
  4984                           
  4985                           ;SDCard.c: 223: posicao_cursor_lcd(1,0);
  4986  0043EE  0E00               	movlw	0
  4987  0043F0  0100               	movlb	0	; () banked
  4988  0043F2  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4989  0043F4  0E01               	movlw	1
  4990  0043F6  ECA2  F027         	call	_posicao_cursor_lcd
  4991                           
  4992                           ;SDCard.c: 224: escreve_frase_ram_lcd(string_dado.hora);
  4993  0043FA  0E0D               	movlw	low (_string_dado+7)
  4994  0043FC  0100               	movlb	0	; () banked
  4995  0043FE  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  4996  004400  0E01               	movlw	high (_string_dado+7)
  4997  004402  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4998  004404  EC99  F029         	call	_escreve_frase_ram_lcd	;wreg free
  4999                           
  5000                           ;SDCard.c: 225: fprintf(&fil, "\n%s ; %s ; %s ; %s ;", string_dado.hora, string_dado.dat
      +                          a,string_dado.LAT, string_dado.LONG);
  5001  004408  0E32               	movlw	low _fil
  5002  00440A  0101               	movlb	1	; () banked
  5003  00440C  6FB3               	movwf	fprintf@fil& (0+255),b
  5004  00440E  0E01               	movlw	high _fil
  5005  004410  6FB4               	movwf	(fprintf@fil+1)& (0+255),b
  5006  004412  0E23               	movlw	low STR_9
  5007  004414  6FB5               	movwf	fprintf@str& (0+255),b
  5008  004416  0E08               	movlw	high STR_9
  5009  004418  6FB6               	movwf	(fprintf@str+1)& (0+255),b
  5010  00441A  0E0D               	movlw	low (_string_dado+7)
  5011  00441C  6FB7               	movwf	(?_fprintf+4)& (0+255),b
  5012  00441E  0E01               	movlw	high (_string_dado+7)
  5013  004420  6FB8               	movwf	(?_fprintf+5)& (0+255),b
  5014  004422  0E06               	movlw	low _string_dado
  5015  004424  6FB9               	movwf	(?_fprintf+6)& (0+255),b
  5016  004426  0E01               	movlw	high _string_dado
  5017  004428  6FBA               	movwf	(?_fprintf+7)& (0+255),b
  5018  00442A  0E18               	movlw	low (_string_dado+18)
  5019  00442C  6FBB               	movwf	(?_fprintf+8)& (0+255),b
  5020  00442E  0E01               	movlw	high (_string_dado+18)
  5021  004430  6FBC               	movwf	(?_fprintf+9)& (0+255),b
  5022  004432  0E25               	movlw	low (_string_dado+31)
  5023  004434  6FBD               	movwf	(?_fprintf+10)& (0+255),b
  5024  004436  0E01               	movlw	high (_string_dado+31)
  5025  004438  6FBE               	movwf	(?_fprintf+11)& (0+255),b
  5026  00443A  EC8D  F00E         	call	_fprintf	;wreg free
  5027                           
  5028                           ;SDCard.c: 228: f_close(&fil);
  5029  00443E  0E32               	movlw	low _fil
  5030  004440  0100               	movlb	0	; () banked
  5031  004442  6FAB               	movwf	f_close@fp& (0+255),b
  5032  004444  0E01               	movlw	high _fil
  5033  004446  6FAC               	movwf	(f_close@fp+1)& (0+255),b
  5034  004448  ECF9  F02B         	call	_f_close	;wreg free
  5035  00444C                     l301:
  5036                           
  5037                           ;SDCard.c: 229: }
  5038                           ;SDCard.c: 231: PORTBbits.RB3 = 1;
  5039  00444C  8681               	bsf	3969,3,c	;volatile
  5040                           
  5041                           ;SDCard.c: 232: desliga_SPI();
  5042  00444E  ECF7  F02C         	call	_desliga_SPI	;wreg free
  5043                           
  5044                           ;SDCard.c: 233: inicializa_uart();
  5045  004452  EC37  F02C         	call	_inicializa_uart	;wreg free
  5046  004456  0012               	return	
  5047  004458                     __end_of_escrita_sdcard:
  5048                           	opt stack 0
  5049                           tosu	equ	0xFFF
  5050                           tosh	equ	0xFFE
  5051                           tosl	equ	0xFFD
  5052                           pclath	equ	0xFFA
  5053                           tblptru	equ	0xFF8
  5054                           tblptrh	equ	0xFF7
  5055                           tblptrl	equ	0xFF6
  5056                           tablat	equ	0xFF5
  5057                           prodh	equ	0xFF4
  5058                           prodl	equ	0xFF3
  5059                           intcon	equ	0xFF2
  5060                           intcon2	equ	0xFF1
  5061                           intcon3	equ	0xFF0
  5062                           postinc0	equ	0xFEE
  5063                           wreg	equ	0xFE8
  5064                           indf1	equ	0xFE7
  5065                           postinc1	equ	0xFE6
  5066                           postdec1	equ	0xFE5
  5067                           fsr1h	equ	0xFE2
  5068                           fsr1l	equ	0xFE1
  5069                           indf2	equ	0xFDF
  5070                           postinc2	equ	0xFDE
  5071                           postdec2	equ	0xFDD
  5072                           plusw2	equ	0xFDB
  5073                           fsr2h	equ	0xFDA
  5074                           fsr2l	equ	0xFD9
  5075                           status	equ	0xFD8
  5076                           
  5077 ;; *************** function _inicializa_uart *****************
  5078 ;; Defined at:
  5079 ;;		line 206 in file "bibliotecas/uart.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;		None
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;		None
  5084 ;; Return value:  Size  Location     Type
  5085 ;;                  1    wreg      void 
  5086 ;; Registers used:
  5087 ;;		wreg, status,2, status,0, cstack
  5088 ;; Tracked objects:
  5089 ;;		On entry : 0/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5093 ;;      Params:         0       0       0       0       0       0       0       0       0
  5094 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5095 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5096 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5097 ;;Total ram usage:        0 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:    5
  5100 ;; This function calls:
  5101 ;;		_configura_baudrate_uart
  5102 ;; This function is called by:
  5103 ;;		_main
  5104 ;;		_escrita_sdcard
  5105 ;;		_leitura_sdcard
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           	psect	text20
  5110  00586E                     __ptext20:
  5111                           	opt stack 0
  5112  00586E                     _inicializa_uart:
  5113                           	opt stack 25
  5114                           
  5115                           ;uart.c: 208: TRISCbits.RC6 = 0;
  5116                           
  5117                           ;incstack = 0
  5118  00586E  9C94               	bcf	3988,6,c	;volatile
  5119                           
  5120                           ;uart.c: 209: TRISCbits.RC7 = 0;
  5121  005870  9E94               	bcf	3988,7,c	;volatile
  5122                           
  5123                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  5124  005872  0E80               	movlw	128
  5125  005874  0100               	movlb	0	; () banked
  5126  005876  6F6E               	movwf	configura_baudrate_uart@baudrate& (0+255),b
  5127  005878  0E25               	movlw	37
  5128  00587A  6F6F               	movwf	(configura_baudrate_uart@baudrate+1)& (0+255),b
  5129  00587C  0E00               	movlw	0
  5130  00587E  6F70               	movwf	(configura_baudrate_uart@baudrate+2)& (0+255),b
  5131  005880  0E00               	movlw	0
  5132  005882  6F71               	movwf	(configura_baudrate_uart@baudrate+3)& (0+255),b
  5133  005884  EC0F  F020         	call	_configura_baudrate_uart	;wreg free
  5134                           
  5135                           ;uart.c: 213: TXSTA = 0x20;
  5136  005888  0E20               	movlw	32
  5137  00588A  6EAC               	movwf	4012,c	;volatile
  5138                           
  5139                           ;uart.c: 214: RCSTA = 0x90;
  5140  00588C  0E90               	movlw	144
  5141  00588E  6EAB               	movwf	4011,c	;volatile
  5142  005890  0012               	return		;funcret
  5143  005892                     __end_of_inicializa_uart:
  5144                           	opt stack 0
  5145                           tosu	equ	0xFFF
  5146                           tosh	equ	0xFFE
  5147                           tosl	equ	0xFFD
  5148                           pclath	equ	0xFFA
  5149                           tblptru	equ	0xFF8
  5150                           tblptrh	equ	0xFF7
  5151                           tblptrl	equ	0xFF6
  5152                           tablat	equ	0xFF5
  5153                           prodh	equ	0xFF4
  5154                           prodl	equ	0xFF3
  5155                           intcon	equ	0xFF2
  5156                           intcon2	equ	0xFF1
  5157                           intcon3	equ	0xFF0
  5158                           postinc0	equ	0xFEE
  5159                           wreg	equ	0xFE8
  5160                           indf1	equ	0xFE7
  5161                           postinc1	equ	0xFE6
  5162                           postdec1	equ	0xFE5
  5163                           fsr1h	equ	0xFE2
  5164                           fsr1l	equ	0xFE1
  5165                           indf2	equ	0xFDF
  5166                           postinc2	equ	0xFDE
  5167                           postdec2	equ	0xFDD
  5168                           plusw2	equ	0xFDB
  5169                           fsr2h	equ	0xFDA
  5170                           fsr2l	equ	0xFD9
  5171                           status	equ	0xFD8
  5172                           
  5173 ;; *************** function _configura_baudrate_uart *****************
  5174 ;; Defined at:
  5175 ;;		line 50 in file "bibliotecas/uart.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  baudrate        4   14[BANK0 ] const long 
  5178 ;; Auto vars:     Size  Location     Type
  5179 ;;  x               2   32[COMRAM] unsigned int 
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  1    wreg      unsigned char 
  5182 ;; Registers used:
  5183 ;;		wreg, status,2, status,0, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5189 ;;      Params:         0       4       0       0       0       0       0       0       0
  5190 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5191 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5192 ;;      Totals:         2      12       0       0       0       0       0       0       0
  5193 ;;Total ram usage:       14 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    4
  5196 ;; This function calls:
  5197 ;;		___aldiv
  5198 ;; This function is called by:
  5199 ;;		_inicializa_uart
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           	psect	text21
  5204  00401E                     __ptext21:
  5205                           	opt stack 0
  5206  00401E                     _configura_baudrate_uart:
  5207                           	opt stack 25
  5208                           
  5209                           ;uart.c: 52: unsigned int x;
  5210                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  5211                           
  5212                           ;incstack = 0
  5213  00401E  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  5214  004022  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  5215  004026  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  5216  00402A  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  5217  00402E  0E06               	movlw	6
  5218  004030                     u12235:
  5219  004030  90D8               	bcf	status,0,c
  5220  004032  0100               	movlb	0	; () banked
  5221  004034  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  5222  004036  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5223  004038  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5224  00403A  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5225  00403C  2EE8               	decfsz	wreg,f,c
  5226  00403E  D7F8               	goto	u12235
  5227  004040  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  5228  004042  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5229  004044  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5230  004046  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5231  004048  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  5232  00404A  0E00               	movlw	0
  5233  00404C  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  5234  00404E  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  5235  004050  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  5236  004052  0E00               	movlw	0
  5237  004054  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  5238  004056  6F60               	movwf	___aldiv@dividend& (0+255),b
  5239  004058  0E6C               	movlw	108
  5240  00405A  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  5241  00405C  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  5242  00405E  0EDC               	movlw	220
  5243  004060  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  5244  004062  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  5245  004064  0E02               	movlw	2
  5246  004066  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  5247  004068  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  5248  00406A  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  5249  00406E  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  5250  004072  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  5251  004076  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  5252  00407A  0E06               	movlw	6
  5253  00407C                     u12245:
  5254  00407C  90D8               	bcf	status,0,c
  5255  00407E  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  5256  004080  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  5257  004082  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  5258  004084  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  5259  004086  2EE8               	decfsz	wreg,f,c
  5260  004088  D7F9               	goto	u12245
  5261  00408A  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  5262  00408E  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  5263  004092  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  5264  004096  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  5265  00409A  EC2C  F022         	call	___aldiv	;wreg free
  5266  00409E  C060  F021         	movff	?___aldiv,configura_baudrate_uart@x
  5267  0040A2  C061  F022         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  5268                           
  5269                           ;uart.c: 55: if(x > 255)
  5270  0040A6  0422               	decf	configura_baudrate_uart@x+1,w,c
  5271  0040A8  A0D8               	btfss	status,0,c
  5272  0040AA  D045               	goto	l814
  5273                           
  5274                           ;uart.c: 56: {
  5275                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  5276  0040AC  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  5277  0040B0  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  5278  0040B4  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  5279  0040B8  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  5280  0040BC  0E04               	movlw	4
  5281  0040BE                     u12265:
  5282  0040BE  90D8               	bcf	status,0,c
  5283  0040C0  0100               	movlb	0	; () banked
  5284  0040C2  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  5285  0040C4  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5286  0040C6  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5287  0040C8  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5288  0040CA  2EE8               	decfsz	wreg,f,c
  5289  0040CC  D7F8               	goto	u12265
  5290  0040CE  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  5291  0040D0  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5292  0040D2  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5293  0040D4  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5294  0040D6  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  5295  0040D8  0E00               	movlw	0
  5296  0040DA  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  5297  0040DC  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  5298  0040DE  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  5299  0040E0  0E00               	movlw	0
  5300  0040E2  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  5301  0040E4  6F60               	movwf	___aldiv@dividend& (0+255),b
  5302  0040E6  0E6C               	movlw	108
  5303  0040E8  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  5304  0040EA  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  5305  0040EC  0EDC               	movlw	220
  5306  0040EE  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  5307  0040F0  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  5308  0040F2  0E02               	movlw	2
  5309  0040F4  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  5310  0040F6  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  5311  0040F8  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  5312  0040FC  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  5313  004100  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  5314  004104  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  5315  004108  0E04               	movlw	4
  5316  00410A                     u12275:
  5317  00410A  90D8               	bcf	status,0,c
  5318  00410C  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  5319  00410E  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  5320  004110  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  5321  004112  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  5322  004114  2EE8               	decfsz	wreg,f,c
  5323  004116  D7F9               	goto	u12275
  5324  004118  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  5325  00411C  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  5326  004120  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  5327  004124  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  5328  004128  EC2C  F022         	call	___aldiv	;wreg free
  5329  00412C  C060  F021         	movff	?___aldiv,configura_baudrate_uart@x
  5330  004130  C061  F022         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  5331                           
  5332                           ;uart.c: 58: BRGH = 1;
  5333  004134  84AC               	bsf	4012,2,c	;volatile
  5334  004136                     l814:
  5335                           
  5336                           ;uart.c: 59: }
  5337                           ;uart.c: 60: if(x < 256)
  5338  004136  0422               	decf	configura_baudrate_uart@x+1,w,c
  5339  004138  B0D8               	btfsc	status,0,c
  5340  00413A  0012               	return	
  5341                           
  5342                           ;uart.c: 61: {
  5343                           ;uart.c: 62: SPBRG = x;
  5344  00413C  C021  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  5345                           
  5346                           ;uart.c: 63: SYNC = 0;
  5347  004140  98AC               	bcf	4012,4,c	;volatile
  5348                           
  5349                           ;uart.c: 64: SPEN = 1;
  5350  004142  8EAB               	bsf	4011,7,c	;volatile
  5351                           
  5352                           ;uart.c: 65: TRISCbits.RC7 = 1;
  5353  004144  8E94               	bsf	3988,7,c	;volatile
  5354                           
  5355                           ;uart.c: 66: TRISCbits.RC6 = 0;
  5356  004146  9C94               	bcf	3988,6,c	;volatile
  5357                           
  5358                           ;uart.c: 67: CREN = 1;
  5359  004148  88AB               	bsf	4011,4,c	;volatile
  5360                           
  5361                           ;uart.c: 68: TXEN = 1;
  5362  00414A  8AAC               	bsf	4012,5,c	;volatile
  5363                           
  5364                           ;uart.c: 70: return (1);
  5365                           ;	Return value of _configura_baudrate_uart is never used
  5366  00414C  0012               	return	
  5367  00414E                     __end_of_configura_baudrate_uart:
  5368                           	opt stack 0
  5369                           tosu	equ	0xFFF
  5370                           tosh	equ	0xFFE
  5371                           tosl	equ	0xFFD
  5372                           pclath	equ	0xFFA
  5373                           tblptru	equ	0xFF8
  5374                           tblptrh	equ	0xFF7
  5375                           tblptrl	equ	0xFF6
  5376                           tablat	equ	0xFF5
  5377                           prodh	equ	0xFF4
  5378                           prodl	equ	0xFF3
  5379                           intcon	equ	0xFF2
  5380                           intcon2	equ	0xFF1
  5381                           intcon3	equ	0xFF0
  5382                           postinc0	equ	0xFEE
  5383                           wreg	equ	0xFE8
  5384                           indf1	equ	0xFE7
  5385                           postinc1	equ	0xFE6
  5386                           postdec1	equ	0xFE5
  5387                           fsr1h	equ	0xFE2
  5388                           fsr1l	equ	0xFE1
  5389                           indf2	equ	0xFDF
  5390                           postinc2	equ	0xFDE
  5391                           postdec2	equ	0xFDD
  5392                           plusw2	equ	0xFDB
  5393                           fsr2h	equ	0xFDA
  5394                           fsr2l	equ	0xFD9
  5395                           status	equ	0xFD8
  5396                           
  5397 ;; *************** function ___aldiv *****************
  5398 ;; Defined at:
  5399 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;  dividend        4    0[BANK0 ] long 
  5402 ;;  divisor         4    4[BANK0 ] long 
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;  quotient        4   10[BANK0 ] long 
  5405 ;;  sign            1    9[BANK0 ] unsigned char 
  5406 ;;  counter         1    8[BANK0 ] unsigned char 
  5407 ;; Return value:  Size  Location     Type
  5408 ;;                  4    0[BANK0 ] long 
  5409 ;; Registers used:
  5410 ;;		wreg, status,2, status,0
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5416 ;;      Params:         0       8       0       0       0       0       0       0       0
  5417 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5418 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5419 ;;      Totals:         0      14       0       0       0       0       0       0       0
  5420 ;;Total ram usage:       14 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    3
  5423 ;; This function calls:
  5424 ;;		Nothing
  5425 ;; This function is called by:
  5426 ;;		_configura_baudrate_uart
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           	psect	text22
  5431  004458                     __ptext22:
  5432                           	opt stack 0
  5433  004458                     ___aldiv:
  5434                           	opt stack 25
  5435                           
  5436                           ;incstack = 0
  5437  004458  0E00               	movlw	0
  5438  00445A  0100               	movlb	0	; () banked
  5439  00445C  6F69               	movwf	___aldiv@sign& (0+255),b
  5440                           
  5441                           ; BSR set to: 0
  5442  00445E  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  5443  004460  D00A               	goto	l1433
  5444                           
  5445                           ; BSR set to: 0
  5446  004462  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  5447  004464  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  5448  004466  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  5449  004468  6D64               	negf	___aldiv@divisor& (0+255),b
  5450  00446A  0E00               	movlw	0
  5451  00446C  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  5452  00446E  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  5453  004470  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  5454                           
  5455                           ; BSR set to: 0
  5456  004472  0E01               	movlw	1
  5457  004474  6F69               	movwf	___aldiv@sign& (0+255),b
  5458  004476                     l1433:
  5459                           
  5460                           ; BSR set to: 0
  5461                           
  5462                           ; BSR set to: 0
  5463  004476  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  5464  004478  D00A               	goto	l1434
  5465                           
  5466                           ; BSR set to: 0
  5467  00447A  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  5468  00447C  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  5469  00447E  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  5470  004480  6D60               	negf	___aldiv@dividend& (0+255),b
  5471  004482  0E00               	movlw	0
  5472  004484  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  5473  004486  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  5474  004488  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  5475                           
  5476                           ; BSR set to: 0
  5477  00448A  0E01               	movlw	1
  5478  00448C  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  5479  00448E                     l1434:
  5480                           
  5481                           ; BSR set to: 0
  5482                           
  5483                           ; BSR set to: 0
  5484  00448E  0E00               	movlw	0
  5485  004490  6F6A               	movwf	___aldiv@quotient& (0+255),b
  5486  004492  0E00               	movlw	0
  5487  004494  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  5488  004496  0E00               	movlw	0
  5489  004498  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  5490  00449A  0E00               	movlw	0
  5491  00449C  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  5492                           
  5493                           ; BSR set to: 0
  5494  00449E  5164               	movf	___aldiv@divisor& (0+255),w,b
  5495  0044A0  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  5496  0044A2  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  5497  0044A4  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  5498  0044A6  B4D8               	btfsc	status,2,c
  5499  0044A8  D02A               	goto	l1441
  5500                           
  5501                           ; BSR set to: 0
  5502  0044AA  0E01               	movlw	1
  5503  0044AC  6F68               	movwf	___aldiv@counter& (0+255),b
  5504  0044AE  D006               	goto	l1436
  5505  0044B0                     
  5506                           ; BSR set to: 0
  5507                           
  5508                           ; BSR set to: 0
  5509  0044B0  90D8               	bcf	status,0,c
  5510  0044B2  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  5511  0044B4  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  5512  0044B6  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  5513  0044B8  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  5514  0044BA  2B68               	incf	___aldiv@counter& (0+255),f,b
  5515  0044BC                     l1436:
  5516                           
  5517                           ; BSR set to: 0
  5518                           
  5519                           ; BSR set to: 0
  5520  0044BC  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  5521  0044BE  D7F8               	goto	l1437
  5522  0044C0                     u12130:
  5523                           
  5524                           ; BSR set to: 0
  5525                           
  5526                           ; BSR set to: 0
  5527                           
  5528                           ; BSR set to: 0
  5529  0044C0  90D8               	bcf	status,0,c
  5530  0044C2  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  5531  0044C4  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  5532  0044C6  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  5533  0044C8  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  5534                           
  5535                           ; BSR set to: 0
  5536  0044CA  5164               	movf	___aldiv@divisor& (0+255),w,b
  5537  0044CC  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  5538  0044CE  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  5539  0044D0  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  5540  0044D2  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  5541  0044D4  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  5542  0044D6  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  5543  0044D8  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  5544  0044DA  A0D8               	btfss	status,0,c
  5545  0044DC  D009               	goto	l1440
  5546                           
  5547                           ; BSR set to: 0
  5548  0044DE  5164               	movf	___aldiv@divisor& (0+255),w,b
  5549  0044E0  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  5550  0044E2  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  5551  0044E4  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  5552  0044E6  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  5553  0044E8  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  5554  0044EA  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  5555  0044EC  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  5556                           
  5557                           ; BSR set to: 0
  5558  0044EE  816A               	bsf	___aldiv@quotient& (0+255),0,b
  5559  0044F0                     l1440:
  5560                           
  5561                           ; BSR set to: 0
  5562                           
  5563                           ; BSR set to: 0
  5564  0044F0  90D8               	bcf	status,0,c
  5565  0044F2  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  5566  0044F4  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  5567  0044F6  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  5568  0044F8  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  5569                           
  5570                           ; BSR set to: 0
  5571  0044FA  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  5572  0044FC  D7E1               	goto	u12130
  5573  0044FE                     l1441:
  5574                           
  5575                           ; BSR set to: 0
  5576                           
  5577                           ; BSR set to: 0
  5578                           
  5579                           ; BSR set to: 0
  5580  0044FE  5169               	movf	___aldiv@sign& (0+255),w,b
  5581  004500  B4D8               	btfsc	status,2,c
  5582  004502  D008               	goto	l1442
  5583                           
  5584                           ; BSR set to: 0
  5585  004504  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  5586  004506  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  5587  004508  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  5588  00450A  6D6A               	negf	___aldiv@quotient& (0+255),b
  5589  00450C  0E00               	movlw	0
  5590  00450E  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  5591  004510  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  5592  004512  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  5593  004514                     l1442:
  5594                           
  5595                           ; BSR set to: 0
  5596                           
  5597                           ; BSR set to: 0
  5598  004514  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  5599  004518  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  5600  00451C  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  5601  004520  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  5602  004524  0012               	return	
  5603  004526                     __end_of___aldiv:
  5604                           	opt stack 0
  5605                           tosu	equ	0xFFF
  5606                           tosh	equ	0xFFE
  5607                           tosl	equ	0xFFD
  5608                           pclath	equ	0xFFA
  5609                           tblptru	equ	0xFF8
  5610                           tblptrh	equ	0xFF7
  5611                           tblptrl	equ	0xFF6
  5612                           tablat	equ	0xFF5
  5613                           prodh	equ	0xFF4
  5614                           prodl	equ	0xFF3
  5615                           intcon	equ	0xFF2
  5616                           intcon2	equ	0xFF1
  5617                           intcon3	equ	0xFF0
  5618                           postinc0	equ	0xFEE
  5619                           wreg	equ	0xFE8
  5620                           indf1	equ	0xFE7
  5621                           postinc1	equ	0xFE6
  5622                           postdec1	equ	0xFE5
  5623                           fsr1h	equ	0xFE2
  5624                           fsr1l	equ	0xFE1
  5625                           indf2	equ	0xFDF
  5626                           postinc2	equ	0xFDE
  5627                           postdec2	equ	0xFDD
  5628                           plusw2	equ	0xFDB
  5629                           fsr2h	equ	0xFDA
  5630                           fsr2l	equ	0xFD9
  5631                           status	equ	0xFD8
  5632                           
  5633 ;; *************** function _inicializa_SPI *****************
  5634 ;; Defined at:
  5635 ;;		line 49 in file "bibliotecas/SPI.c"
  5636 ;; Parameters:    Size  Location     Type
  5637 ;;		None
  5638 ;; Auto vars:     Size  Location     Type
  5639 ;;		None
  5640 ;; Return value:  Size  Location     Type
  5641 ;;                  1    wreg      void 
  5642 ;; Registers used:
  5643 ;;		wreg, status,2, status,0
  5644 ;; Tracked objects:
  5645 ;;		On entry : 0/0
  5646 ;;		On exit  : 0/0
  5647 ;;		Unchanged: 0/0
  5648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5649 ;;      Params:         0       0       0       0       0       0       0       0       0
  5650 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5651 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5652 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5653 ;;Total ram usage:        0 bytes
  5654 ;; Hardware stack levels used:    1
  5655 ;; Hardware stack levels required when called:    3
  5656 ;; This function calls:
  5657 ;;		Nothing
  5658 ;; This function is called by:
  5659 ;;		_escrita_sdcard
  5660 ;;		_leitura_sdcard
  5661 ;;		_sdcard_init
  5662 ;; This function uses a non-reentrant model
  5663 ;;
  5664                           
  5665                           	psect	text23
  5666  0058B6                     __ptext23:
  5667                           	opt stack 0
  5668  0058B6                     _inicializa_SPI:
  5669                           	opt stack 24
  5670                           
  5671                           ;SPI.c: 51: TRISBbits.RB1 = 0;
  5672                           
  5673                           ; BSR set to: 0
  5674                           ;incstack = 0
  5675  0058B6  9293               	bcf	3987,1,c	;volatile
  5676                           
  5677                           ;SPI.c: 52: TRISBbits.RB4 = 0;
  5678  0058B8  9893               	bcf	3987,4,c	;volatile
  5679                           
  5680                           ;SPI.c: 53: TRISBbits.RB0 = 1;
  5681  0058BA  8093               	bsf	3987,0,c	;volatile
  5682                           
  5683                           ;SPI.c: 54: TRISCbits.RC7 = 0;
  5684  0058BC  9E94               	bcf	3988,7,c	;volatile
  5685                           
  5686                           ;SPI.c: 56: LATBbits.LATB4 = 1;
  5687  0058BE  888A               	bsf	3978,4,c	;volatile
  5688                           
  5689                           ;SPI.c: 57: SSPSTAT &= 0x3F;
  5690  0058C0  0E3F               	movlw	63
  5691  0058C2  16C7               	andwf	4039,f,c	;volatile
  5692                           
  5693                           ;SPI.c: 58: SSPCON1 = 0x00;
  5694  0058C4  0E00               	movlw	0
  5695  0058C6  6EC6               	movwf	4038,c	;volatile
  5696                           
  5697                           ;SPI.c: 60: SSPSTATbits.SMP = 0;
  5698  0058C8  9EC7               	bcf	4039,7,c	;volatile
  5699                           
  5700                           ;SPI.c: 61: SSPSTATbits.CKE = 1;
  5701  0058CA  8CC7               	bsf	4039,6,c	;volatile
  5702                           
  5703                           ;SPI.c: 62: SSPCON1bits.CKP = 0;
  5704  0058CC  98C6               	bcf	4038,4,c	;volatile
  5705                           
  5706                           ;SPI.c: 64: SSPCON1 = 0b00000011;
  5707  0058CE  0E03               	movlw	3
  5708  0058D0  6EC6               	movwf	4038,c	;volatile
  5709                           
  5710                           ;SPI.c: 66: SSPCON1bits.SSPEN = 1;
  5711  0058D2  8AC6               	bsf	4038,5,c	;volatile
  5712  0058D4  0012               	return		;funcret
  5713  0058D6                     __end_of_inicializa_SPI:
  5714                           	opt stack 0
  5715                           tosu	equ	0xFFF
  5716                           tosh	equ	0xFFE
  5717                           tosl	equ	0xFFD
  5718                           pclath	equ	0xFFA
  5719                           tblptru	equ	0xFF8
  5720                           tblptrh	equ	0xFF7
  5721                           tblptrl	equ	0xFF6
  5722                           tablat	equ	0xFF5
  5723                           prodh	equ	0xFF4
  5724                           prodl	equ	0xFF3
  5725                           intcon	equ	0xFF2
  5726                           intcon2	equ	0xFF1
  5727                           intcon3	equ	0xFF0
  5728                           postinc0	equ	0xFEE
  5729                           wreg	equ	0xFE8
  5730                           indf1	equ	0xFE7
  5731                           postinc1	equ	0xFE6
  5732                           postdec1	equ	0xFE5
  5733                           fsr1h	equ	0xFE2
  5734                           fsr1l	equ	0xFE1
  5735                           indf2	equ	0xFDF
  5736                           postinc2	equ	0xFDE
  5737                           postdec2	equ	0xFDD
  5738                           plusw2	equ	0xFDB
  5739                           fsr2h	equ	0xFDA
  5740                           fsr2l	equ	0xFD9
  5741                           status	equ	0xFD8
  5742                           
  5743 ;; *************** function _fprintf *****************
  5744 ;; Defined at:
  5745 ;;		line 1808 in file "bibliotecas/tff.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;  fil             2    0[BANK1 ] PTR struct _FIL
  5748 ;;		 -> fil(28), 
  5749 ;;  str             2    2[BANK1 ] PTR const unsigned char 
  5750 ;;		 -> STR_9(21), 
  5751 ;; Auto vars:     Size  Location     Type
  5752 ;;  s              16   12[BANK1 ] unsigned char [16]
  5753 ;;  val             4   36[BANK1 ] unsigned long 
  5754 ;;  i               2   44[BANK1 ] int 
  5755 ;;  cc              2   42[BANK1 ] int 
  5756 ;;  arp             2   40[BANK1 ] PTR void [1]
  5757 ;;		 -> ?_fprintf(2), 
  5758 ;;  w               2   32[BANK1 ] int 
  5759 ;;  res             2   28[BANK1 ] int 
  5760 ;;  c               1   46[BANK1 ] unsigned char 
  5761 ;;  r               1   35[BANK1 ] unsigned char 
  5762 ;;  f               1   34[BANK1 ] unsigned char 
  5763 ;; Return value:  Size  Location     Type
  5764 ;;                  2    0[BANK1 ] int 
  5765 ;; Registers used:
  5766 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5772 ;;      Params:         0       0      12       0       0       0       0       0       0
  5773 ;;      Locals:         0       0      35       0       0       0       0       0       0
  5774 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5775 ;;      Totals:         0       2      47       0       0       0       0       0       0
  5776 ;;Total ram usage:       49 bytes
  5777 ;; Hardware stack levels used:    1
  5778 ;; Hardware stack levels required when called:   14
  5779 ;; This function calls:
  5780 ;;		___lldiv
  5781 ;;		___llmod
  5782 ;;		___wmul
  5783 ;;		_fputc
  5784 ;;		_fputs
  5785 ;; This function is called by:
  5786 ;;		_escrita_sdcard
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           	psect	text24
  5791  001D1A                     __ptext24:
  5792                           	opt stack 0
  5793  001D1A                     _fprintf:
  5794                           	opt stack 13
  5795                           
  5796                           ;tff.c: 1814: va_list arp;
  5797                           ;tff.c: 1815: UCHAR c, f, r;
  5798                           ;tff.c: 1816: ULONG val;
  5799                           ;tff.c: 1817: char s[16];
  5800                           ;tff.c: 1818: int i, w, res, cc;
  5801                           ;tff.c: 1821: *arp = __va_start();
  5802                           
  5803                           ;incstack = 0
  5804  001D1A  0EB7               	movlw	low (?_fprintf+4)
  5805  001D1C  0101               	movlb	1	; () banked
  5806  001D1E  6FDB               	movwf	fprintf@arp& (0+255),b
  5807  001D20  0E01               	movlw	high (?_fprintf+4)
  5808  001D22  6FDC               	movwf	(fprintf@arp+1)& (0+255),b
  5809                           
  5810                           ; BSR set to: 1
  5811                           ;tff.c: 1823: for (cc = res = 0; cc != -1; res += cc) {
  5812  001D24  0E00               	movlw	0
  5813  001D26  6FD0               	movwf	(fprintf@res+1)& (0+255),b
  5814  001D28  0E00               	movlw	0
  5815  001D2A  6FCF               	movwf	fprintf@res& (0+255),b
  5816  001D2C  C1CF  F1DD         	movff	fprintf@res,fprintf@cc
  5817  001D30  C1D0  F1DE         	movff	fprintf@res+1,fprintf@cc+1
  5818                           
  5819                           ; BSR set to: 1
  5820  001D34  29DD               	incf	fprintf@cc& (0+255),w,b
  5821  001D36  E103               	bnz	l10684
  5822  001D38  29DE               	incf	(fprintf@cc+1)& (0+255),w,b
  5823  001D3A  B4D8               	btfsc	status,2,c
  5824  001D3C  0012               	return	
  5825  001D3E                     l10684:
  5826                           
  5827                           ; BSR set to: 1
  5828                           ;tff.c: 1824: c = *str++;
  5829  001D3E  C1B5  FFF6         	movff	fprintf@str,tblptrl
  5830  001D42  C1B6  FFF7         	movff	fprintf@str+1,tblptrh
  5831  001D46                     	if	0	;tblptru may be non-zero
  5832  001D46                     	endif
  5833  001D46                     	if	0	;tblptru may be non-zero
  5834  001D46                     	endif
  5835  001D46  0008               	tblrd		*
  5836  001D48  CFF5 F1E1          	movff	tablat,fprintf@c
  5837                           
  5838                           ; BSR set to: 1
  5839  001D4C  4BB5               	infsnz	fprintf@str& (0+255),f,b
  5840  001D4E  2BB6               	incf	(fprintf@str+1)& (0+255),f,b
  5841                           
  5842                           ; BSR set to: 1
  5843                           ;tff.c: 1825: if (c == 0) break;
  5844  001D50  51E1               	movf	fprintf@c& (0+255),w,b
  5845  001D52  B4D8               	btfsc	status,2,c
  5846  001D54  0012               	return	
  5847                           
  5848                           ; BSR set to: 1
  5849                           ;tff.c: 1826: if (c != '%') {
  5850                           
  5851                           ; BSR set to: 1
  5852                           
  5853                           ; BSR set to: 1
  5854  001D56  0E25               	movlw	37
  5855  001D58  19E1               	xorwf	fprintf@c& (0+255),w,b
  5856  001D5A  B4D8               	btfsc	status,2,c
  5857  001D5C  D015               	goto	l1300
  5858                           
  5859                           ; BSR set to: 1
  5860                           ;tff.c: 1827: cc = fputc(c, fil);
  5861  001D5E  C1E1  F0E5         	movff	fprintf@c,fputc@chr
  5862  001D62  0100               	movlb	0	; () banked
  5863  001D64  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  5864  001D66  C1B3  F0E7         	movff	fprintf@fil,fputc@fil
  5865  001D6A  C1B4  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  5866  001D6E  EC44  F029         	call	_fputc	;wreg free
  5867  001D72  C0E5  F1DD         	movff	?_fputc,fprintf@cc
  5868  001D76  C0E6  F1DE         	movff	?_fputc+1,fprintf@cc+1
  5869                           
  5870                           ;tff.c: 1828: if (cc != -1) cc = 1;
  5871  001D7A  0101               	movlb	1	; () banked
  5872  001D7C  29DD               	incf	fprintf@cc& (0+255),w,b
  5873  001D7E  E103               	bnz	u13510
  5874  001D80  29DE               	incf	(fprintf@cc+1)& (0+255),w,b
  5875  001D82  B4D8               	btfsc	status,2,c
  5876  001D84  D1A3               	goto	l1302
  5877  001D86                     u13510:
  5878  001D86  D08B               	goto	u13580
  5879  001D88                     l1300:
  5880                           
  5881                           ; BSR set to: 1
  5882                           ;tff.c: 1830: }
  5883                           ;tff.c: 1831: w = f = 0;
  5884                           
  5885                           ; BSR set to: 1
  5886  001D88  0E00               	movlw	0
  5887  001D8A  6FD5               	movwf	fprintf@f& (0+255),b
  5888  001D8C  C1D5  F1D3         	movff	fprintf@f,fprintf@w
  5889  001D90  6BD4               	clrf	(fprintf@w+1)& (0+255),b
  5890                           
  5891                           ; BSR set to: 1
  5892                           ;tff.c: 1832: c = *str++;
  5893  001D92  C1B5  FFF6         	movff	fprintf@str,tblptrl
  5894  001D96  C1B6  FFF7         	movff	fprintf@str+1,tblptrh
  5895  001D9A                     	if	0	;tblptru may be non-zero
  5896  001D9A                     	endif
  5897  001D9A                     	if	0	;tblptru may be non-zero
  5898  001D9A                     	endif
  5899  001D9A  0008               	tblrd		*
  5900  001D9C  CFF5 F1E1          	movff	tablat,fprintf@c
  5901                           
  5902                           ; BSR set to: 1
  5903  001DA0  4BB5               	infsnz	fprintf@str& (0+255),f,b
  5904  001DA2  2BB6               	incf	(fprintf@str+1)& (0+255),f,b
  5905                           
  5906                           ; BSR set to: 1
  5907                           ;tff.c: 1833: if (c == '0') {
  5908  001DA4  0E30               	movlw	48
  5909  001DA6  19E1               	xorwf	fprintf@c& (0+255),w,b
  5910  001DA8  A4D8               	btfss	status,2,c
  5911  001DAA  D029               	goto	l1304
  5912                           
  5913                           ; BSR set to: 1
  5914                           ;tff.c: 1834: f = 1; c = *str++;
  5915  001DAC  0E01               	movlw	1
  5916  001DAE  6FD5               	movwf	fprintf@f& (0+255),b
  5917  001DB0  D01D               	goto	l10716
  5918  001DB2                     
  5919                           ; BSR set to: 1
  5920                           ;tff.c: 1837: w = w * 10 + (c - '0');
  5921                           
  5922                           ; BSR set to: 1
  5923  001DB2  C1D3  F060         	movff	fprintf@w,___wmul@multiplier
  5924  001DB6  C1D4  F061         	movff	fprintf@w+1,___wmul@multiplier+1
  5925  001DBA  0E00               	movlw	0
  5926  001DBC  0100               	movlb	0	; () banked
  5927  001DBE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5928  001DC0  0E0A               	movlw	10
  5929  001DC2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5930  001DC4  EC0F  F02C         	call	___wmul	;wreg free
  5931  001DC8  0101               	movlb	1	; () banked
  5932  001DCA  51E1               	movf	fprintf@c& (0+255),w,b
  5933  001DCC  0100               	movlb	0	; () banked
  5934  001DCE  6FF3               	movwf	??_fprintf& (0+255),b
  5935  001DD0  6BF4               	clrf	(??_fprintf+1)& (0+255),b
  5936  001DD2  5160               	movf	?___wmul& (0+255),w,b
  5937  001DD4  27F3               	addwf	??_fprintf& (0+255),f,b
  5938  001DD6  5161               	movf	(?___wmul+1)& (0+255),w,b
  5939  001DD8  23F4               	addwfc	(??_fprintf+1)& (0+255),f,b
  5940  001DDA  0ED0               	movlw	208
  5941  001DDC  25F3               	addwf	??_fprintf& (0+255),w,b
  5942  001DDE  0101               	movlb	1	; () banked
  5943  001DE0  6FD3               	movwf	fprintf@w& (0+255),b
  5944  001DE2  0EFF               	movlw	255
  5945  001DE4  0100               	movlb	0	; () banked
  5946  001DE6  21F4               	addwfc	(??_fprintf+1)& (0+255),w,b
  5947  001DE8  0101               	movlb	1	; () banked
  5948  001DEA  6FD4               	movwf	(fprintf@w+1)& (0+255),b
  5949  001DEC                     l10716:
  5950                           
  5951                           ; BSR set to: 1
  5952                           ;tff.c: 1838: c = *str++;
  5953  001DEC  C1B5  FFF6         	movff	fprintf@str,tblptrl
  5954  001DF0  C1B6  FFF7         	movff	fprintf@str+1,tblptrh
  5955  001DF4                     	if	0	;tblptru may be non-zero
  5956  001DF4                     	endif
  5957  001DF4                     	if	0	;tblptru may be non-zero
  5958  001DF4                     	endif
  5959  001DF4  0008               	tblrd		*
  5960  001DF6  CFF5 F1E1          	movff	tablat,fprintf@c
  5961                           
  5962                           ; BSR set to: 1
  5963  001DFA  4BB5               	infsnz	fprintf@str& (0+255),f,b
  5964  001DFC  2BB6               	incf	(fprintf@str+1)& (0+255),f,b
  5965  001DFE                     l1304:
  5966                           
  5967                           ; BSR set to: 1
  5968                           
  5969                           ; BSR set to: 1
  5970  001DFE  0E2F               	movlw	47
  5971  001E00  65E1               	cpfsgt	fprintf@c& (0+255),b
  5972  001E02  D003               	goto	u13540
  5973                           
  5974                           ; BSR set to: 1
  5975  001E04  0E39               	movlw	57
  5976  001E06  65E1               	cpfsgt	fprintf@c& (0+255),b
  5977  001E08  D7D4               	goto	l1305
  5978  001E0A                     u13540:
  5979                           
  5980                           ; BSR set to: 1
  5981                           ;tff.c: 1839: }
  5982                           ;tff.c: 1840: if (c == 'l') {
  5983                           
  5984                           ; BSR set to: 1
  5985                           
  5986                           ; BSR set to: 1
  5987  001E0A  0E6C               	movlw	108
  5988  001E0C  19E1               	xorwf	fprintf@c& (0+255),w,b
  5989  001E0E  A4D8               	btfss	status,2,c
  5990  001E10  D00A               	goto	l1309
  5991                           
  5992                           ; BSR set to: 1
  5993                           ;tff.c: 1841: f |= 2; c = *str++;
  5994  001E12  83D5               	bsf	fprintf@f& (0+255),1,b
  5995                           
  5996                           ; BSR set to: 1
  5997  001E14  C1B5  FFF6         	movff	fprintf@str,tblptrl
  5998  001E18  C1B6  FFF7         	movff	fprintf@str+1,tblptrh
  5999  001E1C                     	if	0	;tblptru may be non-zero
  6000  001E1C                     	endif
  6001  001E1C                     	if	0	;tblptru may be non-zero
  6002  001E1C                     	endif
  6003  001E1C  0008               	tblrd		*
  6004  001E1E  CFF5 F1E1          	movff	tablat,fprintf@c
  6005                           
  6006                           ; BSR set to: 1
  6007  001E22  4BB5               	infsnz	fprintf@str& (0+255),f,b
  6008  001E24  2BB6               	incf	(fprintf@str+1)& (0+255),f,b
  6009  001E26                     l1309:
  6010                           
  6011                           ; BSR set to: 1
  6012                           ;tff.c: 1842: }
  6013                           ;tff.c: 1843: if (c == 's') {
  6014                           
  6015                           ; BSR set to: 1
  6016  001E26  0E73               	movlw	115
  6017  001E28  19E1               	xorwf	fprintf@c& (0+255),w,b
  6018  001E2A  A4D8               	btfss	status,2,c
  6019  001E2C  D018               	goto	l1310
  6020                           
  6021                           ; BSR set to: 1
  6022                           ;tff.c: 1844: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  6023  001E2E  C1DB  FFD9         	movff	fprintf@arp,fsr2l
  6024  001E32  C1DC  FFDA         	movff	fprintf@arp+1,fsr2h
  6025  001E36  CFDE F0EC          	movff	postinc2,fputs@str
  6026  001E3A  CFDD F0ED          	movff	postdec2,fputs@str+1
  6027  001E3E  C1B3  F0EE         	movff	fprintf@fil,fputs@fil
  6028  001E42  C1B4  F0EF         	movff	fprintf@fil+1,fputs@fil+1
  6029  001E46  ECBD  F028         	call	_fputs	;wreg free
  6030  001E4A  C0EC  F1DD         	movff	?_fputs,fprintf@cc
  6031  001E4E  C0ED  F1DE         	movff	?_fputs+1,fprintf@cc+1
  6032  001E52  0E02               	movlw	2
  6033  001E54  0101               	movlb	1	; () banked
  6034  001E56  27DB               	addwf	fprintf@arp& (0+255),f,b
  6035  001E58  0E00               	movlw	0
  6036  001E5A  23DC               	addwfc	(fprintf@arp+1)& (0+255),f,b
  6037                           
  6038                           ;tff.c: 1845: continue;
  6039  001E5C  D137               	goto	l1302
  6040  001E5E                     l1310:
  6041                           
  6042                           ; BSR set to: 1
  6043                           ;tff.c: 1846: }
  6044                           ;tff.c: 1847: if (c == 'c') {
  6045                           
  6046                           ; BSR set to: 1
  6047  001E5E  0E63               	movlw	99
  6048  001E60  19E1               	xorwf	fprintf@c& (0+255),w,b
  6049  001E62  A4D8               	btfss	status,2,c
  6050  001E64  D021               	goto	l1311
  6051                           
  6052                           ; BSR set to: 1
  6053                           ;tff.c: 1848: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  6054  001E66  C1DB  FFD9         	movff	fprintf@arp,fsr2l
  6055  001E6A  C1DC  FFDA         	movff	fprintf@arp+1,fsr2h
  6056  001E6E  50DF               	movf	indf2,w,c
  6057  001E70  0100               	movlb	0	; () banked
  6058  001E72  6FF3               	movwf	??_fprintf& (0+255),b
  6059  001E74  51F3               	movf	??_fprintf& (0+255),w,b
  6060  001E76  6FE5               	movwf	fputc@chr& (0+255),b
  6061  001E78  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  6062  001E7A  C1B3  F0E7         	movff	fprintf@fil,fputc@fil
  6063  001E7E  C1B4  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  6064  001E82  EC44  F029         	call	_fputc	;wreg free
  6065  001E86  C0E5  F1DD         	movff	?_fputc,fprintf@cc
  6066  001E8A  C0E6  F1DE         	movff	?_fputc+1,fprintf@cc+1
  6067  001E8E  0E02               	movlw	2
  6068  001E90  0101               	movlb	1	; () banked
  6069  001E92  27DB               	addwf	fprintf@arp& (0+255),f,b
  6070  001E94  0E00               	movlw	0
  6071  001E96  23DC               	addwfc	(fprintf@arp+1)& (0+255),f,b
  6072                           
  6073                           ; BSR set to: 1
  6074                           ;tff.c: 1849: if (cc != -1) cc = 1;
  6075  001E98  29DD               	incf	fprintf@cc& (0+255),w,b
  6076  001E9A  E101               	bnz	u13580
  6077  001E9C  D771               	goto	L1
  6078  001E9E                     u13580:
  6079                           
  6080                           ; BSR set to: 1
  6081  001E9E  0E00               	movlw	0
  6082  001EA0  6FDE               	movwf	(fprintf@cc+1)& (0+255),b
  6083  001EA2  0E01               	movlw	1
  6084  001EA4  6FDD               	movwf	fprintf@cc& (0+255),b
  6085                           
  6086                           ; BSR set to: 1
  6087                           ;tff.c: 1850: continue;
  6088  001EA6  D112               	goto	l1302
  6089  001EA8                     l1311:
  6090                           
  6091                           ; BSR set to: 1
  6092                           ;tff.c: 1851: }
  6093                           ;tff.c: 1852: r = 0;
  6094                           
  6095                           ; BSR set to: 1
  6096  001EA8  0E00               	movlw	0
  6097  001EAA  6FD6               	movwf	fprintf@r& (0+255),b
  6098                           
  6099                           ; BSR set to: 1
  6100                           ;tff.c: 1853: if (c == 'd') r = 10;
  6101  001EAC  0E64               	movlw	100
  6102  001EAE  19E1               	xorwf	fprintf@c& (0+255),w,b
  6103  001EB0  A4D8               	btfss	status,2,c
  6104  001EB2  D002               	goto	l1313
  6105                           
  6106                           ; BSR set to: 1
  6107  001EB4  0E0A               	movlw	10
  6108  001EB6  6FD6               	movwf	fprintf@r& (0+255),b
  6109  001EB8                     l1313:
  6110                           
  6111                           ; BSR set to: 1
  6112                           ;tff.c: 1854: if (c == 'u') r = 10;
  6113                           
  6114                           ; BSR set to: 1
  6115  001EB8  0E75               	movlw	117
  6116  001EBA  19E1               	xorwf	fprintf@c& (0+255),w,b
  6117  001EBC  A4D8               	btfss	status,2,c
  6118  001EBE  D002               	goto	l1314
  6119                           
  6120                           ; BSR set to: 1
  6121  001EC0  0E0A               	movlw	10
  6122  001EC2  6FD6               	movwf	fprintf@r& (0+255),b
  6123  001EC4                     l1314:
  6124                           
  6125                           ; BSR set to: 1
  6126                           ;tff.c: 1855: if (c == 'X') r = 16;
  6127                           
  6128                           ; BSR set to: 1
  6129  001EC4  0E58               	movlw	88
  6130  001EC6  19E1               	xorwf	fprintf@c& (0+255),w,b
  6131  001EC8  A4D8               	btfss	status,2,c
  6132  001ECA  D002               	goto	l1315
  6133                           
  6134                           ; BSR set to: 1
  6135  001ECC  0E10               	movlw	16
  6136  001ECE  6FD6               	movwf	fprintf@r& (0+255),b
  6137  001ED0                     l1315:
  6138                           
  6139                           ; BSR set to: 1
  6140                           ;tff.c: 1856: if (r == 0) break;
  6141  001ED0  51D6               	movf	fprintf@r& (0+255),w,b
  6142  001ED2  B4D8               	btfsc	status,2,c
  6143  001ED4  0012               	return	
  6144                           
  6145                           ; BSR set to: 1
  6146                           ;tff.c: 1857: if (f & 2) {
  6147                           
  6148                           ; BSR set to: 1
  6149  001ED6  A3D5               	btfss	fprintf@f& (0+255),1,b
  6150  001ED8  D00E               	goto	l1317
  6151                           
  6152                           ; BSR set to: 1
  6153                           ;tff.c: 1858: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  6154  001EDA  C1DB  FFD9         	movff	fprintf@arp,fsr2l
  6155  001EDE  C1DC  FFDA         	movff	fprintf@arp+1,fsr2h
  6156  001EE2  CFDE F1D7          	movff	postinc2,fprintf@val
  6157  001EE6  CFDE F1D8          	movff	postinc2,fprintf@val+1
  6158  001EEA  CFDE F1D9          	movff	postinc2,fprintf@val+2
  6159  001EEE  CFDE F1DA          	movff	postinc2,fprintf@val+3
  6160                           
  6161                           ; BSR set to: 1
  6162  001EF2  0E04               	movlw	4
  6163  001EF4  D021               	goto	L5
  6164  001EF6                     l1317:
  6165                           
  6166                           ; BSR set to: 1
  6167                           ;tff.c: 1860: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  6168                           
  6169                           ; BSR set to: 1
  6170  001EF6  0E64               	movlw	100
  6171  001EF8  19E1               	xorwf	fprintf@c& (0+255),w,b
  6172  001EFA  B4D8               	btfsc	status,2,c
  6173  001EFC  D00F               	goto	l1320
  6174                           
  6175                           ; BSR set to: 1
  6176  001EFE  C1DB  FFD9         	movff	fprintf@arp,fsr2l
  6177  001F02  C1DC  FFDA         	movff	fprintf@arp+1,fsr2h
  6178  001F06  CFDE F0F3          	movff	postinc2,??_fprintf
  6179  001F0A  CFDD F0F4          	movff	postdec2,??_fprintf+1
  6180  001F0E  C0F3  F1D7         	movff	??_fprintf,fprintf@val
  6181  001F12  C0F4  F1D8         	movff	??_fprintf+1,fprintf@val+1
  6182  001F16  6BD9               	clrf	(fprintf@val+2)& (0+255),b
  6183  001F18  6BDA               	clrf	(fprintf@val+3)& (0+255),b
  6184  001F1A  D00D               	goto	l10776
  6185  001F1C                     l1320:
  6186                           
  6187                           ; BSR set to: 1
  6188                           
  6189                           ; BSR set to: 1
  6190  001F1C  C1DB  FFD9         	movff	fprintf@arp,fsr2l
  6191  001F20  C1DC  FFDA         	movff	fprintf@arp+1,fsr2h
  6192  001F24  CFDE F1D7          	movff	postinc2,fprintf@val
  6193  001F28  CFDD F1D8          	movff	postdec2,fprintf@val+1
  6194  001F2C  0E00               	movlw	0
  6195  001F2E  BFD8               	btfsc	(fprintf@val+1)& (0+255),7,b
  6196  001F30  0EFF               	movlw	-1
  6197  001F32  6FD9               	movwf	(fprintf@val+2)& (0+255),b
  6198  001F34  6FDA               	movwf	(fprintf@val+3)& (0+255),b
  6199  001F36                     l10776:
  6200                           
  6201                           ; BSR set to: 1
  6202  001F36  0E02               	movlw	2
  6203  001F38                     L5:
  6204  001F38  27DB               	addwf	fprintf@arp& (0+255),f,b
  6205  001F3A  0E00               	movlw	0
  6206  001F3C  23DC               	addwfc	(fprintf@arp+1)& (0+255),f,b
  6207                           
  6208                           ; BSR set to: 1
  6209                           ;tff.c: 1861: }
  6210                           ;tff.c: 1863: if (c == 'd') {
  6211                           
  6212                           ; BSR set to: 1
  6213                           
  6214                           ; BSR set to: 1
  6215  001F3E  0E64               	movlw	100
  6216  001F40  19E1               	xorwf	fprintf@c& (0+255),w,b
  6217  001F42  A4D8               	btfss	status,2,c
  6218  001F44  D00D               	goto	l1324
  6219                           
  6220                           ; BSR set to: 1
  6221                           ;tff.c: 1864: if (val >= 0x80000000) {
  6222  001F46  0E80               	movlw	128
  6223  001F48  5DDA               	subwf	(fprintf@val+3)& (0+255),w,b
  6224  001F4A  A0D8               	btfss	status,0,c
  6225  001F4C  D009               	goto	l1324
  6226                           
  6227                           ; BSR set to: 1
  6228                           ;tff.c: 1865: val = 0 - val;
  6229  001F4E  1FDA               	comf	(fprintf@val+3)& (0+255),f,b
  6230  001F50  1FD9               	comf	(fprintf@val+2)& (0+255),f,b
  6231  001F52  1FD8               	comf	(fprintf@val+1)& (0+255),f,b
  6232  001F54  6DD7               	negf	fprintf@val& (0+255),b
  6233  001F56  0E00               	movlw	0
  6234  001F58  23D8               	addwfc	(fprintf@val+1)& (0+255),f,b
  6235  001F5A  23D9               	addwfc	(fprintf@val+2)& (0+255),f,b
  6236  001F5C  23DA               	addwfc	(fprintf@val+3)& (0+255),f,b
  6237                           
  6238                           ;tff.c: 1866: f |= 4;
  6239  001F5E  85D5               	bsf	fprintf@f& (0+255),2,b
  6240  001F60                     l1324:
  6241                           
  6242                           ; BSR set to: 1
  6243                           ;tff.c: 1867: }
  6244                           ;tff.c: 1868: }
  6245                           ;tff.c: 1869: i = sizeof(s) - 1; s[i] = 0;
  6246                           
  6247                           ; BSR set to: 1
  6248                           
  6249                           ; BSR set to: 1
  6250  001F60  0E00               	movlw	0
  6251  001F62  6FE0               	movwf	(fprintf@i+1)& (0+255),b
  6252  001F64  0E0F               	movlw	15
  6253  001F66  6FDF               	movwf	fprintf@i& (0+255),b
  6254                           
  6255                           ; BSR set to: 1
  6256  001F68  0EBF               	movlw	low fprintf@s
  6257  001F6A  25DF               	addwf	fprintf@i& (0+255),w,b
  6258  001F6C  6ED9               	movwf	fsr2l,c
  6259  001F6E  0E01               	movlw	high fprintf@s
  6260  001F70  21E0               	addwfc	(fprintf@i+1)& (0+255),w,b
  6261  001F72  6EDA               	movwf	fsr2h,c
  6262  001F74  0E00               	movlw	0
  6263  001F76  6EDF               	movwf	indf2,c
  6264  001F78                     
  6265                           ; BSR set to: 1
  6266                           ;tff.c: 1871: c = (UCHAR)(val % r + '0');
  6267                           
  6268                           ; BSR set to: 1
  6269  001F78  C1D7  F060         	movff	fprintf@val,___llmod@dividend
  6270  001F7C  C1D8  F061         	movff	fprintf@val+1,___llmod@dividend+1
  6271  001F80  C1D9  F062         	movff	fprintf@val+2,___llmod@dividend+2
  6272  001F84  C1DA  F063         	movff	fprintf@val+3,___llmod@dividend+3
  6273  001F88  51D6               	movf	fprintf@r& (0+255),w,b
  6274  001F8A  0100               	movlb	0	; () banked
  6275  001F8C  6F64               	movwf	___llmod@divisor& (0+255),b
  6276  001F8E  6B65               	clrf	(___llmod@divisor+1)& (0+255),b
  6277  001F90  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
  6278  001F92  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
  6279  001F94  EC55  F028         	call	___llmod	;wreg free
  6280  001F98  0100               	movlb	0	; () banked
  6281  001F9A  5160               	movf	?___llmod& (0+255),w,b
  6282  001F9C  0F30               	addlw	48
  6283  001F9E  0101               	movlb	1	; () banked
  6284  001FA0  6FE1               	movwf	fprintf@c& (0+255),b
  6285                           
  6286                           ; BSR set to: 1
  6287                           ;tff.c: 1872: if (c > '9') c += 7;
  6288  001FA2  0E39               	movlw	57
  6289  001FA4  65E1               	cpfsgt	fprintf@c& (0+255),b
  6290  001FA6  D002               	goto	l1326
  6291                           
  6292                           ; BSR set to: 1
  6293  001FA8  0E07               	movlw	7
  6294  001FAA  27E1               	addwf	fprintf@c& (0+255),f,b
  6295  001FAC                     l1326:
  6296                           
  6297                           ; BSR set to: 1
  6298                           ;tff.c: 1873: s[--i] = c;
  6299                           
  6300                           ; BSR set to: 1
  6301  001FAC  07DF               	decf	fprintf@i& (0+255),f,b
  6302  001FAE  A0D8               	btfss	status,0,c
  6303  001FB0  07E0               	decf	(fprintf@i+1)& (0+255),f,b
  6304  001FB2  0EBF               	movlw	low fprintf@s
  6305  001FB4  25DF               	addwf	fprintf@i& (0+255),w,b
  6306  001FB6  6ED9               	movwf	fsr2l,c
  6307  001FB8  0E01               	movlw	high fprintf@s
  6308  001FBA  21E0               	addwfc	(fprintf@i+1)& (0+255),w,b
  6309  001FBC  6EDA               	movwf	fsr2h,c
  6310  001FBE  C1E1  FFDF         	movff	fprintf@c,indf2
  6311                           
  6312                           ; BSR set to: 1
  6313                           ;tff.c: 1874: val /= r;
  6314  001FC2  C1D7  F060         	movff	fprintf@val,___lldiv@dividend
  6315  001FC6  C1D8  F061         	movff	fprintf@val+1,___lldiv@dividend+1
  6316  001FCA  C1D9  F062         	movff	fprintf@val+2,___lldiv@dividend+2
  6317  001FCE  C1DA  F063         	movff	fprintf@val+3,___lldiv@dividend+3
  6318  001FD2  51D6               	movf	fprintf@r& (0+255),w,b
  6319  001FD4  0100               	movlb	0	; () banked
  6320  001FD6  6F64               	movwf	___lldiv@divisor& (0+255),b
  6321  001FD8  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
  6322  001FDA  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
  6323  001FDC  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
  6324  001FDE  EC60  F027         	call	___lldiv	;wreg free
  6325  001FE2  C060  F1D7         	movff	?___lldiv,fprintf@val
  6326  001FE6  C061  F1D8         	movff	?___lldiv+1,fprintf@val+1
  6327  001FEA  C062  F1D9         	movff	?___lldiv+2,fprintf@val+2
  6328  001FEE  C063  F1DA         	movff	?___lldiv+3,fprintf@val+3
  6329                           
  6330                           ;tff.c: 1875: } while (i && val);
  6331  001FF2  0101               	movlb	1	; () banked
  6332  001FF4  51DF               	movf	fprintf@i& (0+255),w,b
  6333  001FF6  11E0               	iorwf	(fprintf@i+1)& (0+255),w,b
  6334  001FF8  B4D8               	btfsc	status,2,c
  6335  001FFA  D006               	goto	u13690
  6336                           
  6337                           ; BSR set to: 1
  6338  001FFC  51D7               	movf	fprintf@val& (0+255),w,b
  6339  001FFE  11D8               	iorwf	(fprintf@val+1)& (0+255),w,b
  6340  002000  11D9               	iorwf	(fprintf@val+2)& (0+255),w,b
  6341  002002  11DA               	iorwf	(fprintf@val+3)& (0+255),w,b
  6342  002004  A4D8               	btfss	status,2,c
  6343  002006  D7B8               	goto	l1325
  6344  002008                     u13690:
  6345                           
  6346                           ; BSR set to: 1
  6347                           ;tff.c: 1876: if (i && (f & 4)) s[--i] = '-';
  6348                           
  6349                           ; BSR set to: 1
  6350                           
  6351                           ; BSR set to: 1
  6352  002008  51DF               	movf	fprintf@i& (0+255),w,b
  6353  00200A  11E0               	iorwf	(fprintf@i+1)& (0+255),w,b
  6354  00200C  A4D8               	btfss	status,2,c
  6355                           
  6356                           ; BSR set to: 1
  6357  00200E  A5D5               	btfss	fprintf@f& (0+255),2,b
  6358  002010  D00B               	goto	l1330
  6359                           
  6360                           ; BSR set to: 1
  6361  002012  07DF               	decf	fprintf@i& (0+255),f,b
  6362  002014  A0D8               	btfss	status,0,c
  6363  002016  07E0               	decf	(fprintf@i+1)& (0+255),f,b
  6364  002018  0EBF               	movlw	low fprintf@s
  6365  00201A  25DF               	addwf	fprintf@i& (0+255),w,b
  6366  00201C  6ED9               	movwf	fsr2l,c
  6367  00201E  0E01               	movlw	high fprintf@s
  6368  002020  21E0               	addwfc	(fprintf@i+1)& (0+255),w,b
  6369  002022  6EDA               	movwf	fsr2h,c
  6370  002024  0E2D               	movlw	45
  6371  002026  6EDF               	movwf	indf2,c
  6372  002028                     l1330:
  6373                           
  6374                           ; BSR set to: 1
  6375                           ;tff.c: 1877: w = sizeof(s) - 1 - w;
  6376                           
  6377                           ; BSR set to: 1
  6378  002028  0E01               	movlw	1
  6379  00202A  25D3               	addwf	fprintf@w& (0+255),w,b
  6380  00202C  0100               	movlb	0	; () banked
  6381  00202E  6FF3               	movwf	??_fprintf& (0+255),b
  6382  002030  0E00               	movlw	0
  6383  002032  0101               	movlb	1	; () banked
  6384  002034  21D4               	addwfc	(fprintf@w+1)& (0+255),w,b
  6385  002036  0100               	movlb	0	; () banked
  6386  002038  6FF4               	movwf	(??_fprintf+1)& (0+255),b
  6387  00203A  1FF3               	comf	??_fprintf& (0+255),f,b
  6388  00203C  1FF4               	comf	(??_fprintf+1)& (0+255),f,b
  6389  00203E  4BF3               	infsnz	??_fprintf& (0+255),f,b
  6390  002040  2BF4               	incf	(??_fprintf+1)& (0+255),f,b
  6391  002042  0E10               	movlw	16
  6392  002044  25F3               	addwf	??_fprintf& (0+255),w,b
  6393  002046  0101               	movlb	1	; () banked
  6394  002048  6FD3               	movwf	fprintf@w& (0+255),b
  6395  00204A  0E00               	movlw	0
  6396  00204C  0100               	movlb	0	; () banked
  6397  00204E  21F4               	addwfc	(??_fprintf+1)& (0+255),w,b
  6398  002050  0101               	movlb	1	; () banked
  6399  002052  6FD4               	movwf	(fprintf@w+1)& (0+255),b
  6400                           
  6401                           ;tff.c: 1878: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
  6402  002054  D016               	goto	l1331
  6403  002056                     l1332:
  6404                           
  6405                           ; BSR set to: 0
  6406  002056  0101               	movlb	1	; () banked
  6407  002058  B1D5               	btfsc	fprintf@f& (0+255),0,b
  6408  00205A  D004               	goto	l1334
  6409                           
  6410                           ; BSR set to: 1
  6411  00205C  0E00               	movlw	0
  6412  00205E  6FD2               	movwf	(_fprintf$2542+1)& (0+255),b
  6413  002060  0E20               	movlw	32
  6414  002062  D003               	goto	L3
  6415  002064                     l1334:
  6416                           
  6417                           ; BSR set to: 1
  6418                           
  6419                           ; BSR set to: 1
  6420  002064  0E00               	movlw	0
  6421  002066  6FD2               	movwf	(_fprintf$2542+1)& (0+255),b
  6422  002068  0E30               	movlw	48
  6423  00206A                     L3:
  6424  00206A  6FD1               	movwf	_fprintf$2542& (0+255),b
  6425                           
  6426                           ; BSR set to: 1
  6427                           
  6428                           ; BSR set to: 1
  6429  00206C  07DF               	decf	fprintf@i& (0+255),f,b
  6430  00206E  A0D8               	btfss	status,0,c
  6431  002070  07E0               	decf	(fprintf@i+1)& (0+255),f,b
  6432  002072  0EBF               	movlw	low fprintf@s
  6433  002074  25DF               	addwf	fprintf@i& (0+255),w,b
  6434  002076  6ED9               	movwf	fsr2l,c
  6435  002078  0E01               	movlw	high fprintf@s
  6436  00207A  21E0               	addwfc	(fprintf@i+1)& (0+255),w,b
  6437  00207C  6EDA               	movwf	fsr2h,c
  6438  00207E  C1D1  FFDF         	movff	_fprintf$2542,indf2
  6439  002082                     l1331:
  6440                           
  6441                           ; BSR set to: 1
  6442                           
  6443                           ; BSR set to: 1
  6444  002082  51DF               	movf	fprintf@i& (0+255),w,b
  6445  002084  11E0               	iorwf	(fprintf@i+1)& (0+255),w,b
  6446  002086  B4D8               	btfsc	status,2,c
  6447  002088  D00D               	goto	u13740
  6448                           
  6449                           ; BSR set to: 1
  6450  00208A  51DF               	movf	fprintf@i& (0+255),w,b
  6451  00208C  5DD3               	subwf	fprintf@w& (0+255),w,b
  6452  00208E  51D4               	movf	(fprintf@w+1)& (0+255),w,b
  6453  002090  0A80               	xorlw	128
  6454  002092  0100               	movlb	0	; () banked
  6455  002094  6FF3               	movwf	??_fprintf& (0+255),b
  6456  002096  0101               	movlb	1	; () banked
  6457  002098  51E0               	movf	(fprintf@i+1)& (0+255),w,b
  6458  00209A  0A80               	xorlw	128
  6459  00209C  0100               	movlb	0	; () banked
  6460  00209E  59F3               	subwfb	??_fprintf& (0+255),w,b
  6461  0020A0  A0D8               	btfss	status,0,c
  6462  0020A2  D7D9               	goto	l1332
  6463  0020A4                     u13740:
  6464                           
  6465                           ;tff.c: 1879: cc = fputs(&s[i], fil);
  6466                           
  6467                           ; BSR set to: 0
  6468                           
  6469                           ; BSR set to: 0
  6470  0020A4  0EBF               	movlw	low fprintf@s
  6471  0020A6  0101               	movlb	1	; () banked
  6472  0020A8  25DF               	addwf	fprintf@i& (0+255),w,b
  6473  0020AA  0100               	movlb	0	; () banked
  6474  0020AC  6FEC               	movwf	fputs@str& (0+255),b
  6475  0020AE  0E01               	movlw	high fprintf@s
  6476  0020B0  0101               	movlb	1	; () banked
  6477  0020B2  21E0               	addwfc	(fprintf@i+1)& (0+255),w,b
  6478  0020B4  0100               	movlb	0	; () banked
  6479  0020B6  6FED               	movwf	(fputs@str+1)& (0+255),b
  6480  0020B8  C1B3  F0EE         	movff	fprintf@fil,fputs@fil
  6481  0020BC  C1B4  F0EF         	movff	fprintf@fil+1,fputs@fil+1
  6482  0020C0  ECBD  F028         	call	_fputs	;wreg free
  6483  0020C4  C0EC  F1DD         	movff	?_fputs,fprintf@cc
  6484  0020C8  C0ED  F1DE         	movff	?_fputs+1,fprintf@cc+1
  6485  0020CC                     l1302:
  6486  0020CC  0101               	movlb	1	; () banked
  6487  0020CE  51DD               	movf	fprintf@cc& (0+255),w,b
  6488  0020D0  27CF               	addwf	fprintf@res& (0+255),f,b
  6489  0020D2  51DE               	movf	(fprintf@cc+1)& (0+255),w,b
  6490  0020D4  23D0               	addwfc	(fprintf@res+1)& (0+255),f,b
  6491                           
  6492                           ; BSR set to: 1
  6493  0020D6  29DD               	incf	fprintf@cc& (0+255),w,b
  6494  0020D8  E101               	bnz	u13751
  6495  0020DA  D62E               	goto	L4
  6496  0020DC                     u13751:
  6497  0020DC  D630               	goto	l1297
  6498  0020DE                     __end_of_fprintf:
  6499                           	opt stack 0
  6500                           tosu	equ	0xFFF
  6501                           tosh	equ	0xFFE
  6502                           tosl	equ	0xFFD
  6503                           pclath	equ	0xFFA
  6504                           tblptru	equ	0xFF8
  6505                           tblptrh	equ	0xFF7
  6506                           tblptrl	equ	0xFF6
  6507                           tablat	equ	0xFF5
  6508                           prodh	equ	0xFF4
  6509                           prodl	equ	0xFF3
  6510                           intcon	equ	0xFF2
  6511                           intcon2	equ	0xFF1
  6512                           intcon3	equ	0xFF0
  6513                           postinc0	equ	0xFEE
  6514                           wreg	equ	0xFE8
  6515                           indf1	equ	0xFE7
  6516                           postinc1	equ	0xFE6
  6517                           postdec1	equ	0xFE5
  6518                           fsr1h	equ	0xFE2
  6519                           fsr1l	equ	0xFE1
  6520                           indf2	equ	0xFDF
  6521                           postinc2	equ	0xFDE
  6522                           postdec2	equ	0xFDD
  6523                           plusw2	equ	0xFDB
  6524                           fsr2h	equ	0xFDA
  6525                           fsr2l	equ	0xFD9
  6526                           status	equ	0xFD8
  6527                           
  6528 ;; *************** function _fputs *****************
  6529 ;; Defined at:
  6530 ;;		line 1788 in file "bibliotecas/tff.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;  str             2  140[BANK0 ] PTR const unsigned char 
  6533 ;;		 -> fprintf@s(16), string_dado(44), 
  6534 ;;  fil             2  142[BANK0 ] PTR struct _FIL
  6535 ;;		 -> fil(28), 
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;  n               2  145[BANK0 ] int 
  6538 ;; Return value:  Size  Location     Type
  6539 ;;                  2  140[BANK0 ] int 
  6540 ;; Registers used:
  6541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6547 ;;      Params:         0       4       0       0       0       0       0       0       0
  6548 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6549 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6550 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6551 ;;Total ram usage:        7 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:   13
  6554 ;; This function calls:
  6555 ;;		_fputc
  6556 ;; This function is called by:
  6557 ;;		_fprintf
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           	psect	text25
  6562  00517A                     __ptext25:
  6563                           	opt stack 0
  6564  00517A                     _fputs:
  6565                           	opt stack 13
  6566                           
  6567                           ;tff.c: 1793: int n;
  6568                           ;tff.c: 1796: for (n = 0; *str; str++, n++) {
  6569                           
  6570                           ; BSR set to: 1
  6571                           ;incstack = 0
  6572  00517A  0E00               	movlw	0
  6573  00517C  0100               	movlb	0	; () banked
  6574  00517E  6FF2               	movwf	(fputs@n+1)& (0+255),b
  6575  005180  0E00               	movlw	0
  6576  005182  6FF1               	movwf	fputs@n& (0+255),b
  6577  005184  D01C               	goto	l1290
  6578  005186                     
  6579                           ; BSR set to: 0
  6580                           ;tff.c: 1797: if (fputc(*str, fil) == -1) return -1;
  6581                           
  6582                           ; BSR set to: 0
  6583  005186  C0EC  FFD9         	movff	fputs@str,fsr2l
  6584  00518A  C0ED  FFDA         	movff	fputs@str+1,fsr2h
  6585  00518E  50DF               	movf	indf2,w,c
  6586  005190  6FF0               	movwf	??_fputs& (0+255),b
  6587  005192  51F0               	movf	??_fputs& (0+255),w,b
  6588  005194  6FE5               	movwf	fputc@chr& (0+255),b
  6589  005196  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  6590  005198  C0EE  F0E7         	movff	fputs@fil,fputc@fil
  6591  00519C  C0EF  F0E8         	movff	fputs@fil+1,fputc@fil+1
  6592  0051A0  EC44  F029         	call	_fputc	;wreg free
  6593  0051A4  0100               	movlb	0	; () banked
  6594  0051A6  29E5               	incf	?_fputc& (0+255),w,b
  6595  0051A8  E106               	bnz	l10402
  6596  0051AA  29E6               	incf	(?_fputc+1)& (0+255),w,b
  6597  0051AC  A4D8               	btfss	status,2,c
  6598  0051AE  D003               	goto	l1292
  6599                           
  6600                           ; BSR set to: 0
  6601  0051B0  69EC               	setf	?_fputs& (0+255),b
  6602  0051B2  69ED               	setf	(?_fputs+1)& (0+255),b
  6603  0051B4  0012               	return	
  6604  0051B6                     l1292:
  6605  0051B6                     l10402:
  6606                           
  6607                           ; BSR set to: 0
  6608  0051B6  4BEC               	infsnz	fputs@str& (0+255),f,b
  6609  0051B8  2BED               	incf	(fputs@str+1)& (0+255),f,b
  6610  0051BA  4BF1               	infsnz	fputs@n& (0+255),f,b
  6611  0051BC  2BF2               	incf	(fputs@n+1)& (0+255),f,b
  6612  0051BE                     l1290:
  6613                           
  6614                           ; BSR set to: 0
  6615                           
  6616                           ; BSR set to: 0
  6617  0051BE  C0EC  FFD9         	movff	fputs@str,fsr2l
  6618  0051C2  C0ED  FFDA         	movff	fputs@str+1,fsr2h
  6619  0051C6  50DF               	movf	indf2,w,c
  6620  0051C8  A4D8               	btfss	status,2,c
  6621  0051CA  D7DD               	goto	l1291
  6622                           
  6623                           ; BSR set to: 0
  6624                           ;tff.c: 1798: }
  6625                           ;tff.c: 1799: return n;
  6626  0051CC  C0F1  F0EC         	movff	fputs@n,?_fputs
  6627  0051D0  C0F2  F0ED         	movff	fputs@n+1,?_fputs+1
  6628                           
  6629                           ; BSR set to: 0
  6630  0051D4  0012               	return		;funcret
  6631  0051D6                     __end_of_fputs:
  6632                           	opt stack 0
  6633                           tosu	equ	0xFFF
  6634                           tosh	equ	0xFFE
  6635                           tosl	equ	0xFFD
  6636                           pclath	equ	0xFFA
  6637                           tblptru	equ	0xFF8
  6638                           tblptrh	equ	0xFF7
  6639                           tblptrl	equ	0xFF6
  6640                           tablat	equ	0xFF5
  6641                           prodh	equ	0xFF4
  6642                           prodl	equ	0xFF3
  6643                           intcon	equ	0xFF2
  6644                           intcon2	equ	0xFF1
  6645                           intcon3	equ	0xFF0
  6646                           postinc0	equ	0xFEE
  6647                           wreg	equ	0xFE8
  6648                           indf1	equ	0xFE7
  6649                           postinc1	equ	0xFE6
  6650                           postdec1	equ	0xFE5
  6651                           fsr1h	equ	0xFE2
  6652                           fsr1l	equ	0xFE1
  6653                           indf2	equ	0xFDF
  6654                           postinc2	equ	0xFDE
  6655                           postdec2	equ	0xFDD
  6656                           plusw2	equ	0xFDB
  6657                           fsr2h	equ	0xFDA
  6658                           fsr2l	equ	0xFD9
  6659                           status	equ	0xFD8
  6660                           
  6661 ;; *************** function _fputc *****************
  6662 ;; Defined at:
  6663 ;;		line 1761 in file "bibliotecas/tff.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  chr             2  133[BANK0 ] int 
  6666 ;;  fil             2  135[BANK0 ] PTR struct _FIL
  6667 ;;		 -> fil(28), 
  6668 ;; Auto vars:     Size  Location     Type
  6669 ;;  bw              2  138[BANK0 ] unsigned int 
  6670 ;;  c               1  137[BANK0 ] unsigned char 
  6671 ;; Return value:  Size  Location     Type
  6672 ;;                  2  133[BANK0 ] int 
  6673 ;; Registers used:
  6674 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6675 ;; Tracked objects:
  6676 ;;		On entry : 0/0
  6677 ;;		On exit  : 0/0
  6678 ;;		Unchanged: 0/0
  6679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6680 ;;      Params:         0       4       0       0       0       0       0       0       0
  6681 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6682 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6683 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6684 ;;Total ram usage:        7 bytes
  6685 ;; Hardware stack levels used:    1
  6686 ;; Hardware stack levels required when called:   12
  6687 ;; This function calls:
  6688 ;;		_f_write
  6689 ;; This function is called by:
  6690 ;;		_fputs
  6691 ;;		_fprintf
  6692 ;; This function uses a non-reentrant model
  6693 ;;
  6694                           
  6695                           	psect	text26
  6696  005288                     __ptext26:
  6697                           	opt stack 0
  6698  005288                     _fputc:
  6699                           	opt stack 13
  6700                           
  6701                           ;tff.c: 1766: UINT bw;
  6702                           ;tff.c: 1767: char c;
  6703                           ;tff.c: 1773: if (!fil) {
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;incstack = 0
  6707  005288  0100               	movlb	0	; () banked
  6708  00528A  51E7               	movf	fputc@fil& (0+255),w,b
  6709  00528C  11E8               	iorwf	(fputc@fil+1)& (0+255),w,b
  6710  00528E  A4D8               	btfss	status,2,c
  6711  005290  D005               	goto	l1282
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;tff.c: 1775: return chr;
  6715  005292  C0E5  F0E5         	movff	fputc@chr,?_fputc
  6716  005296  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  6717  00529A  0012               	return	
  6718  00529C                     l1282:
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;tff.c: 1776: }
  6722                           ;tff.c: 1777: c = (char)chr;
  6723  00529C  C0E5  F0E9         	movff	fputc@chr,fputc@c
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;tff.c: 1778: f_write(fil, &c, 1, &bw);
  6727  0052A0  C0E7  F0C4         	movff	fputc@fil,f_write@fp
  6728  0052A4  C0E8  F0C5         	movff	fputc@fil+1,f_write@fp+1
  6729  0052A8  0EE9               	movlw	low fputc@c
  6730  0052AA  6FC6               	movwf	f_write@buff& (0+255),b
  6731  0052AC  0E00               	movlw	high fputc@c
  6732  0052AE  6FC7               	movwf	(f_write@buff+1)& (0+255),b
  6733  0052B0  0E00               	movlw	0
  6734  0052B2  6FC9               	movwf	(f_write@btw+1)& (0+255),b
  6735  0052B4  0E01               	movlw	1
  6736  0052B6  6FC8               	movwf	f_write@btw& (0+255),b
  6737  0052B8  0EEA               	movlw	low fputc@bw
  6738  0052BA  6FCA               	movwf	f_write@bw& (0+255),b
  6739  0052BC  0E00               	movlw	high fputc@bw
  6740  0052BE  6FCB               	movwf	(f_write@bw+1)& (0+255),b
  6741  0052C0  EC6C  F004         	call	_f_write	;wreg free
  6742                           
  6743                           ;tff.c: 1779: return bw ? chr : -1;
  6744  0052C4  0100               	movlb	0	; () banked
  6745  0052C6  51EA               	movf	fputc@bw& (0+255),w,b
  6746  0052C8  11EB               	iorwf	(fputc@bw+1)& (0+255),w,b
  6747  0052CA  A4D8               	btfss	status,2,c
  6748  0052CC  D003               	goto	l1285
  6749                           
  6750                           ; BSR set to: 0
  6751  0052CE  69E5               	setf	?_fputc& (0+255),b
  6752  0052D0  69E6               	setf	(?_fputc+1)& (0+255),b
  6753  0052D2  0012               	return	
  6754  0052D4                     l1285:
  6755                           
  6756                           ; BSR set to: 0
  6757  0052D4  C0E5  F0E5         	movff	fputc@chr,?_fputc
  6758  0052D8  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  6759  0052DC  0012               	return	
  6760  0052DE                     __end_of_fputc:
  6761                           	opt stack 0
  6762                           tosu	equ	0xFFF
  6763                           tosh	equ	0xFFE
  6764                           tosl	equ	0xFFD
  6765                           pclath	equ	0xFFA
  6766                           tblptru	equ	0xFF8
  6767                           tblptrh	equ	0xFF7
  6768                           tblptrl	equ	0xFF6
  6769                           tablat	equ	0xFF5
  6770                           prodh	equ	0xFF4
  6771                           prodl	equ	0xFF3
  6772                           intcon	equ	0xFF2
  6773                           intcon2	equ	0xFF1
  6774                           intcon3	equ	0xFF0
  6775                           postinc0	equ	0xFEE
  6776                           wreg	equ	0xFE8
  6777                           indf1	equ	0xFE7
  6778                           postinc1	equ	0xFE6
  6779                           postdec1	equ	0xFE5
  6780                           fsr1h	equ	0xFE2
  6781                           fsr1l	equ	0xFE1
  6782                           indf2	equ	0xFDF
  6783                           postinc2	equ	0xFDE
  6784                           postdec2	equ	0xFDD
  6785                           plusw2	equ	0xFDB
  6786                           fsr2h	equ	0xFDA
  6787                           fsr2l	equ	0xFD9
  6788                           status	equ	0xFD8
  6789                           
  6790 ;; *************** function _f_write *****************
  6791 ;; Defined at:
  6792 ;;		line 991 in file "bibliotecas/tff.c"
  6793 ;; Parameters:    Size  Location     Type
  6794 ;;  fp              2  100[BANK0 ] PTR struct _FIL
  6795 ;;		 -> fil(28), 
  6796 ;;  buff            2  102[BANK0 ] PTR const void 
  6797 ;;		 -> fputc@c(1), 
  6798 ;;  btw             2  104[BANK0 ] unsigned int 
  6799 ;;  bw              2  106[BANK0 ] PTR unsigned int 
  6800 ;;		 -> fputc@bw(2), 
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;  sect            4  123[BANK0 ] unsigned long 
  6803 ;;  wcnt            2  131[BANK0 ] unsigned int 
  6804 ;;  clust           2  129[BANK0 ] unsigned short 
  6805 ;;  cc              2  127[BANK0 ] unsigned int 
  6806 ;;  wbuff           2  121[BANK0 ] PTR const unsigned char 
  6807 ;;		 -> fputc@c(1), 
  6808 ;;  res             1  120[BANK0 ] enum E155
  6809 ;; Return value:  Size  Location     Type
  6810 ;;                  1    wreg      enum E155
  6811 ;; Registers used:
  6812 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6813 ;; Tracked objects:
  6814 ;;		On entry : 0/0
  6815 ;;		On exit  : 0/0
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6818 ;;      Params:         0       8       0       0       0       0       0       0       0
  6819 ;;      Locals:         0      13       0       0       0       0       0       0       0
  6820 ;;      Temps:          0      12       0       0       0       0       0       0       0
  6821 ;;      Totals:         0      33       0       0       0       0       0       0       0
  6822 ;;Total ram usage:       33 bytes
  6823 ;; Hardware stack levels used:    1
  6824 ;; Hardware stack levels required when called:   11
  6825 ;; This function calls:
  6826 ;;		_clust2sect
  6827 ;;		_create_chain
  6828 ;;		_disk_write
  6829 ;;		_memcpy
  6830 ;;		_move_window
  6831 ;;		_validate
  6832 ;; This function is called by:
  6833 ;;		_fputc
  6834 ;; This function uses a non-reentrant model
  6835 ;;
  6836                           
  6837                           	psect	text27
  6838  0008D8                     __ptext27:
  6839                           	opt stack 0
  6840  0008D8                     _f_write:
  6841                           	opt stack 13
  6842                           
  6843                           ;tff.c: 998: FRESULT res;
  6844                           ;tff.c: 999: DWORD sect;
  6845                           ;tff.c: 1000: UINT wcnt, cc;
  6846                           ;tff.c: 1001: CLUST clust;
  6847                           ;tff.c: 1002: const BYTE *wbuff = buff;
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;incstack = 0
  6851  0008D8  C0C6  F0D9         	movff	f_write@buff,f_write@wbuff
  6852  0008DC  C0C7  F0DA         	movff	f_write@buff+1,f_write@wbuff+1
  6853                           
  6854                           ;tff.c: 1005: *bw = 0;
  6855  0008E0  C0CA  FFD9         	movff	f_write@bw,fsr2l
  6856  0008E4  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  6857  0008E8  0E00               	movlw	0
  6858  0008EA  6EDE               	movwf	postinc2,c
  6859  0008EC  0E00               	movlw	0
  6860  0008EE  6EDD               	movwf	postdec2,c
  6861                           
  6862                           ;tff.c: 1006: res = validate(fp->fs, fp->id);
  6863  0008F0  0100               	movlb	0	; () banked
  6864  0008F2  EE20 F004          	lfsr	2,4
  6865  0008F6  51C4               	movf	f_write@fp& (0+255),w,b
  6866  0008F8  26D9               	addwf	fsr2l,f,c
  6867  0008FA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6868  0008FC  22DA               	addwfc	fsr2h,f,c
  6869  0008FE  CFDE F065          	movff	postinc2,validate@fs
  6870  000902  CFDD F066          	movff	postdec2,validate@fs+1
  6871  000906  C0C4  FFD9         	movff	f_write@fp,fsr2l
  6872  00090A  C0C5  FFDA         	movff	f_write@fp+1,fsr2h
  6873  00090E  CFDE F067          	movff	postinc2,validate@id
  6874  000912  CFDD F068          	movff	postdec2,validate@id+1
  6875  000916  EC39  F02A         	call	_validate	;wreg free
  6876  00091A  0100               	movlb	0	; () banked
  6877  00091C  6FD8               	movwf	f_write@res& (0+255),b
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;tff.c: 1007: if (res != FR_OK) return res;
  6881  00091E  51D8               	movf	f_write@res& (0+255),w,b
  6882  000920  A4D8               	btfss	status,2,c
  6883  000922  0012               	return	
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;tff.c: 1008: if (fp->flag & 0x80) return FR_RW_ERROR;
  6887                           
  6888                           ; BSR set to: 0
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;	Return value of _f_write is never used
  6892  000924  EE20 F002          	lfsr	2,2
  6893  000928  51C4               	movf	f_write@fp& (0+255),w,b
  6894  00092A  26D9               	addwf	fsr2l,f,c
  6895  00092C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6896  00092E  22DA               	addwfc	fsr2h,f,c
  6897  000930  BEDF               	btfsc	indf2,7,c
  6898  000932  0012               	return	
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;tff.c: 1009: if (!(fp->flag & 0x02)) return FR_DENIED;
  6902                           
  6903                           ; BSR set to: 0
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;	Return value of _f_write is never used
  6907  000934  EE20 F002          	lfsr	2,2
  6908  000938  51C4               	movf	f_write@fp& (0+255),w,b
  6909  00093A  26D9               	addwf	fsr2l,f,c
  6910  00093C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6911  00093E  22DA               	addwfc	fsr2h,f,c
  6912  000940  A2DF               	btfss	indf2,1,c
  6913  000942  0012               	return	
  6914                           
  6915                           ; BSR set to: 0
  6916                           ;tff.c: 1010: if (fp->fsize + btw < fp->fsize) return FR_OK;
  6917                           
  6918                           ; BSR set to: 0
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;	Return value of _f_write is never used
  6922  000944  EE20 F00A          	lfsr	2,10
  6923  000948  51C4               	movf	f_write@fp& (0+255),w,b
  6924  00094A  26D9               	addwf	fsr2l,f,c
  6925  00094C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6926  00094E  22DA               	addwfc	fsr2h,f,c
  6927  000950  EE10 F00A          	lfsr	1,10
  6928  000954  51C4               	movf	f_write@fp& (0+255),w,b
  6929  000956  26E1               	addwf	fsr1l,f,c
  6930  000958  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6931  00095A  22E2               	addwfc	fsr1h,f,c
  6932  00095C  CFE6 F0D0          	movff	postinc1,??_f_write+4
  6933  000960  CFE6 F0D1          	movff	postinc1,??_f_write+5
  6934  000964  CFE6 F0D2          	movff	postinc1,??_f_write+6
  6935  000968  CFE6 F0D3          	movff	postinc1,??_f_write+7
  6936  00096C  51C8               	movf	f_write@btw& (0+255),w,b
  6937  00096E  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  6938  000970  6FD4               	movwf	(??_f_write+8)& (0+255),b
  6939  000972  51C9               	movf	(f_write@btw+1)& (0+255),w,b
  6940  000974  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  6941  000976  6FD5               	movwf	(??_f_write+9)& (0+255),b
  6942  000978  0E00               	movlw	0
  6943  00097A  21D2               	addwfc	(??_f_write+6)& (0+255),w,b
  6944  00097C  6FD6               	movwf	(??_f_write+10)& (0+255),b
  6945  00097E  0E00               	movlw	0
  6946  000980  21D3               	addwfc	(??_f_write+7)& (0+255),w,b
  6947  000982  6FD7               	movwf	(??_f_write+11)& (0+255),b
  6948  000984  50DE               	movf	postinc2,w,c
  6949  000986  5DD4               	subwf	(??_f_write+8)& (0+255),w,b
  6950  000988  50DE               	movf	postinc2,w,c
  6951  00098A  59D5               	subwfb	(??_f_write+9)& (0+255),w,b
  6952  00098C  50DE               	movf	postinc2,w,c
  6953  00098E  59D6               	subwfb	(??_f_write+10)& (0+255),w,b
  6954  000990  50DE               	movf	postinc2,w,c
  6955  000992  59D7               	subwfb	(??_f_write+11)& (0+255),w,b
  6956  000994  A0D8               	btfss	status,0,c
  6957  000996  0012               	return	
  6958  000998  D23B               	goto	l1192
  6959  00099A                     
  6960                           ; BSR set to: 0
  6961                           ;tff.c: 1014: if ((fp->fptr % 512U) == 0) {
  6962                           
  6963                           ; BSR set to: 0
  6964  00099A  EE20 F006          	lfsr	2,6
  6965  00099E  51C4               	movf	f_write@fp& (0+255),w,b
  6966  0009A0  26D9               	addwf	fsr2l,f,c
  6967  0009A2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6968  0009A4  22DA               	addwfc	fsr2h,f,c
  6969  0009A6  0EFF               	movlw	255
  6970  0009A8  14DE               	andwf	postinc2,w,c
  6971  0009AA  6FCC               	movwf	??_f_write& (0+255),b
  6972  0009AC  0E01               	movlw	1
  6973  0009AE  14DE               	andwf	postinc2,w,c
  6974  0009B0  6FCD               	movwf	(??_f_write+1)& (0+255),b
  6975  0009B2  0E00               	movlw	0
  6976  0009B4  14DE               	andwf	postinc2,w,c
  6977  0009B6  6FCE               	movwf	(??_f_write+2)& (0+255),b
  6978  0009B8  0E00               	movlw	0
  6979  0009BA  14DE               	andwf	postinc2,w,c
  6980  0009BC  6FCF               	movwf	(??_f_write+3)& (0+255),b
  6981  0009BE  51CC               	movf	??_f_write& (0+255),w,b
  6982  0009C0  11CD               	iorwf	(??_f_write+1)& (0+255),w,b
  6983  0009C2  11CE               	iorwf	(??_f_write+2)& (0+255),w,b
  6984  0009C4  11CF               	iorwf	(??_f_write+3)& (0+255),w,b
  6985  0009C6  A4D8               	btfss	status,2,c
  6986  0009C8  D166               	goto	l1194
  6987                           
  6988                           ; BSR set to: 0
  6989                           ;tff.c: 1015: if (fp->csect >= fp->fs->csize) {
  6990  0009CA  EE20 F004          	lfsr	2,4
  6991  0009CE  51C4               	movf	f_write@fp& (0+255),w,b
  6992  0009D0  26D9               	addwf	fsr2l,f,c
  6993  0009D2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6994  0009D4  22DA               	addwfc	fsr2h,f,c
  6995  0009D6  EE10 F01D          	lfsr	1,29
  6996  0009DA  50DE               	movf	postinc2,w,c
  6997  0009DC  26E1               	addwf	fsr1l,f,c
  6998  0009DE  50DD               	movf	postdec2,w,c
  6999  0009E0  22E2               	addwfc	fsr1h,f,c
  7000  0009E2  EE20 F003          	lfsr	2,3
  7001  0009E6  51C4               	movf	f_write@fp& (0+255),w,b
  7002  0009E8  26D9               	addwf	fsr2l,f,c
  7003  0009EA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7004  0009EC  22DA               	addwfc	fsr2h,f,c
  7005  0009EE  50E6               	movf	postinc1,w,c
  7006  0009F0  5CDE               	subwf	postinc2,w,c
  7007  0009F2  A0D8               	btfss	status,0,c
  7008  0009F4  D06D               	goto	l1195
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;tff.c: 1016: if (fp->fptr == 0) {
  7012  0009F6  EE20 F006          	lfsr	2,6
  7013  0009FA  51C4               	movf	f_write@fp& (0+255),w,b
  7014  0009FC  26D9               	addwf	fsr2l,f,c
  7015  0009FE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7016  000A00  22DA               	addwfc	fsr2h,f,c
  7017  000A02  50DE               	movf	postinc2,w,c
  7018  000A04  10DE               	iorwf	postinc2,w,c
  7019  000A06  10DE               	iorwf	postinc2,w,c
  7020  000A08  10DE               	iorwf	postinc2,w,c
  7021  000A0A  A4D8               	btfss	status,2,c
  7022  000A0C  D024               	goto	l1196
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;tff.c: 1017: clust = fp->org_clust;
  7026  000A0E  EE20 F00E          	lfsr	2,14
  7027  000A12  51C4               	movf	f_write@fp& (0+255),w,b
  7028  000A14  26D9               	addwf	fsr2l,f,c
  7029  000A16  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7030  000A18  22DA               	addwfc	fsr2h,f,c
  7031  000A1A  CFDE F0E1          	movff	postinc2,f_write@clust
  7032  000A1E  CFDD F0E2          	movff	postdec2,f_write@clust+1
  7033                           
  7034                           ; BSR set to: 0
  7035                           ;tff.c: 1018: if (clust == 0)
  7036  000A22  51E1               	movf	f_write@clust& (0+255),w,b
  7037  000A24  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  7038  000A26  A4D8               	btfss	status,2,c
  7039  000A28  D026               	goto	l1198
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;tff.c: 1019: fp->org_clust = clust = create_chain(0);
  7043  000A2A  0E00               	movlw	0
  7044  000A2C  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
  7045  000A2E  0E00               	movlw	0
  7046  000A30  6FB6               	movwf	create_chain@clust& (0+255),b
  7047  000A32  ECFD  F01A         	call	_create_chain	;wreg free
  7048  000A36  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  7049  000A3A  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  7050  000A3E  0100               	movlb	0	; () banked
  7051  000A40  EE20 F00E          	lfsr	2,14
  7052  000A44  51C4               	movf	f_write@fp& (0+255),w,b
  7053  000A46  26D9               	addwf	fsr2l,f,c
  7054  000A48  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7055  000A4A  22DA               	addwfc	fsr2h,f,c
  7056  000A4C  C0E1  FFDE         	movff	f_write@clust,postinc2
  7057  000A50  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;tff.c: 1020: } else {
  7061  000A54  D010               	goto	l1198
  7062  000A56                     l1196:
  7063                           
  7064                           ; BSR set to: 0
  7065                           ;tff.c: 1021: clust = create_chain(fp->curr_clust);
  7066                           
  7067                           ; BSR set to: 0
  7068  000A56  EE20 F010          	lfsr	2,16
  7069  000A5A  51C4               	movf	f_write@fp& (0+255),w,b
  7070  000A5C  26D9               	addwf	fsr2l,f,c
  7071  000A5E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7072  000A60  22DA               	addwfc	fsr2h,f,c
  7073  000A62  CFDE F0B6          	movff	postinc2,create_chain@clust
  7074  000A66  CFDD F0B7          	movff	postdec2,create_chain@clust+1
  7075  000A6A  ECFD  F01A         	call	_create_chain	;wreg free
  7076  000A6E  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  7077  000A72  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  7078  000A76                     l1198:
  7079                           
  7080                           ;tff.c: 1022: }
  7081                           ;tff.c: 1023: if (clust == 0) break;
  7082  000A76  0100               	movlb	0	; () banked
  7083  000A78  51E1               	movf	f_write@clust& (0+255),w,b
  7084  000A7A  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  7085  000A7C  B4D8               	btfsc	status,2,c
  7086  000A7E  D1CC               	goto	u11520
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;tff.c: 1024: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
  7090                           
  7091                           ; BSR set to: 0
  7092                           
  7093                           ; BSR set to: 0
  7094  000A80  05E1               	decf	f_write@clust& (0+255),w,b
  7095  000A82  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  7096  000A84  B4D8               	btfsc	status,2,c
  7097  000A86  D1FB               	goto	l1204
  7098                           
  7099                           ; BSR set to: 0
  7100  000A88  EE20 F004          	lfsr	2,4
  7101  000A8C  51C4               	movf	f_write@fp& (0+255),w,b
  7102  000A8E  26D9               	addwf	fsr2l,f,c
  7103  000A90  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7104  000A92  22DA               	addwfc	fsr2h,f,c
  7105  000A94  EE10 F016          	lfsr	1,22
  7106  000A98  50DE               	movf	postinc2,w,c
  7107  000A9A  26E1               	addwf	fsr1l,f,c
  7108  000A9C  50DD               	movf	postdec2,w,c
  7109  000A9E  22E2               	addwfc	fsr1h,f,c
  7110  000AA0  50E6               	movf	postinc1,w,c
  7111  000AA2  5DE1               	subwf	f_write@clust& (0+255),w,b
  7112  000AA4  50E6               	movf	postinc1,w,c
  7113  000AA6  59E2               	subwfb	(f_write@clust+1)& (0+255),w,b
  7114  000AA8  B0D8               	btfsc	status,0,c
  7115  000AAA  D1E9               	goto	l1204
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;tff.c: 1025: fp->curr_clust = clust;
  7119                           
  7120                           ; BSR set to: 0
  7121                           
  7122                           ; BSR set to: 0
  7123  000AAC  EE20 F010          	lfsr	2,16
  7124  000AB0  51C4               	movf	f_write@fp& (0+255),w,b
  7125  000AB2  26D9               	addwf	fsr2l,f,c
  7126  000AB4  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7127  000AB6  22DA               	addwfc	fsr2h,f,c
  7128  000AB8  C0E1  FFDE         	movff	f_write@clust,postinc2
  7129  000ABC  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  7130                           
  7131                           ;tff.c: 1026: fp->csect = 0;
  7132  000AC0  EE20 F003          	lfsr	2,3
  7133  000AC4  51C4               	movf	f_write@fp& (0+255),w,b
  7134  000AC6  26D9               	addwf	fsr2l,f,c
  7135  000AC8  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7136  000ACA  22DA               	addwfc	fsr2h,f,c
  7137  000ACC  0E00               	movlw	0
  7138  000ACE  6EDF               	movwf	indf2,c
  7139  000AD0                     l1195:
  7140                           
  7141                           ; BSR set to: 0
  7142                           ;tff.c: 1027: }
  7143                           ;tff.c: 1028: sect = clust2sect(fp->curr_clust) + fp->csect;
  7144                           
  7145                           ; BSR set to: 0
  7146  000AD0  EE20 F010          	lfsr	2,16
  7147  000AD4  51C4               	movf	f_write@fp& (0+255),w,b
  7148  000AD6  26D9               	addwf	fsr2l,f,c
  7149  000AD8  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7150  000ADA  22DA               	addwfc	fsr2h,f,c
  7151  000ADC  CFDE F06C          	movff	postinc2,clust2sect@clust
  7152  000AE0  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  7153  000AE4  EC93  F022         	call	_clust2sect	;wreg free
  7154  000AE8  0100               	movlb	0	; () banked
  7155  000AEA  EE20 F003          	lfsr	2,3
  7156  000AEE  51C4               	movf	f_write@fp& (0+255),w,b
  7157  000AF0  26D9               	addwf	fsr2l,f,c
  7158  000AF2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7159  000AF4  22DA               	addwfc	fsr2h,f,c
  7160  000AF6  50DF               	movf	indf2,w,c
  7161  000AF8  6FCC               	movwf	??_f_write& (0+255),b
  7162  000AFA  51CC               	movf	??_f_write& (0+255),w,b
  7163  000AFC  256C               	addwf	?_clust2sect& (0+255),w,b
  7164  000AFE  6FDB               	movwf	f_write@sect& (0+255),b
  7165  000B00  0E00               	movlw	0
  7166  000B02  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  7167  000B04  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  7168  000B06  0E00               	movlw	0
  7169  000B08  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  7170  000B0A  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  7171  000B0C  0E00               	movlw	0
  7172  000B0E  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  7173  000B10  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  7174                           
  7175                           ; BSR set to: 0
  7176                           ;tff.c: 1029: cc = btw / 512U;
  7177  000B12  C0C8  F0CC         	movff	f_write@btw,??_f_write
  7178  000B16  C0C9  F0CD         	movff	f_write@btw+1,??_f_write+1
  7179  000B1A  0E09               	movlw	9
  7180  000B1C  6FCE               	movwf	(??_f_write+2)& (0+255),b
  7181  000B1E                     u11435:
  7182  000B1E  90D8               	bcf	status,0,c
  7183  000B20  33CD               	rrcf	(??_f_write+1)& (0+255),f,b
  7184  000B22  33CC               	rrcf	??_f_write& (0+255),f,b
  7185  000B24  2FCE               	decfsz	(??_f_write+2)& (0+255),f,b
  7186  000B26  D7FB               	goto	u11435
  7187  000B28  C0CC  F0DF         	movff	??_f_write,f_write@cc
  7188  000B2C  C0CD  F0E0         	movff	??_f_write+1,f_write@cc+1
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;tff.c: 1030: if (cc) {
  7192  000B30  51DF               	movf	f_write@cc& (0+255),w,b
  7193  000B32  11E0               	iorwf	(f_write@cc+1)& (0+255),w,b
  7194  000B34  B4D8               	btfsc	status,2,c
  7195  000B36  D070               	goto	l1205
  7196                           
  7197                           ; BSR set to: 0
  7198                           ;tff.c: 1031: if (fp->csect + cc > fp->fs->csize)
  7199  000B38  EE20 F003          	lfsr	2,3
  7200  000B3C  51C4               	movf	f_write@fp& (0+255),w,b
  7201  000B3E  26D9               	addwf	fsr2l,f,c
  7202  000B40  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7203  000B42  22DA               	addwfc	fsr2h,f,c
  7204  000B44  50DF               	movf	indf2,w,c
  7205  000B46  6FCC               	movwf	??_f_write& (0+255),b
  7206  000B48  51CC               	movf	??_f_write& (0+255),w,b
  7207  000B4A  25DF               	addwf	f_write@cc& (0+255),w,b
  7208  000B4C  6FCD               	movwf	(??_f_write+1)& (0+255),b
  7209  000B4E  0E00               	movlw	0
  7210  000B50  21E0               	addwfc	(f_write@cc+1)& (0+255),w,b
  7211  000B52  6FCE               	movwf	(??_f_write+2)& (0+255),b
  7212  000B54  EE20 F004          	lfsr	2,4
  7213  000B58  51C4               	movf	f_write@fp& (0+255),w,b
  7214  000B5A  26D9               	addwf	fsr2l,f,c
  7215  000B5C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7216  000B5E  22DA               	addwfc	fsr2h,f,c
  7217  000B60  EE10 F01D          	lfsr	1,29
  7218  000B64  50DE               	movf	postinc2,w,c
  7219  000B66  26E1               	addwf	fsr1l,f,c
  7220  000B68  50DD               	movf	postdec2,w,c
  7221  000B6A  22E2               	addwfc	fsr1h,f,c
  7222  000B6C  50E7               	movf	indf1,w,c
  7223  000B6E  6FCF               	movwf	(??_f_write+3)& (0+255),b
  7224  000B70  6BD0               	clrf	(??_f_write+4)& (0+255),b
  7225  000B72  51CD               	movf	(??_f_write+1)& (0+255),w,b
  7226  000B74  5DCF               	subwf	(??_f_write+3)& (0+255),w,b
  7227  000B76  51CE               	movf	(??_f_write+2)& (0+255),w,b
  7228  000B78  59D0               	subwfb	(??_f_write+4)& (0+255),w,b
  7229  000B7A  B0D8               	btfsc	status,0,c
  7230  000B7C  D021               	goto	l1206
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;tff.c: 1032: cc = fp->fs->csize - fp->csect;
  7234  000B7E  EE20 F003          	lfsr	2,3
  7235  000B82  51C4               	movf	f_write@fp& (0+255),w,b
  7236  000B84  26D9               	addwf	fsr2l,f,c
  7237  000B86  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7238  000B88  22DA               	addwfc	fsr2h,f,c
  7239  000B8A  50DF               	movf	indf2,w,c
  7240  000B8C  6FCC               	movwf	??_f_write& (0+255),b
  7241  000B8E  6BCD               	clrf	(??_f_write+1)& (0+255),b
  7242  000B90  1FCC               	comf	??_f_write& (0+255),f,b
  7243  000B92  1FCD               	comf	(??_f_write+1)& (0+255),f,b
  7244  000B94  4BCC               	infsnz	??_f_write& (0+255),f,b
  7245  000B96  2BCD               	incf	(??_f_write+1)& (0+255),f,b
  7246  000B98  EE20 F004          	lfsr	2,4
  7247  000B9C  51C4               	movf	f_write@fp& (0+255),w,b
  7248  000B9E  26D9               	addwf	fsr2l,f,c
  7249  000BA0  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7250  000BA2  22DA               	addwfc	fsr2h,f,c
  7251  000BA4  EE10 F01D          	lfsr	1,29
  7252  000BA8  50DE               	movf	postinc2,w,c
  7253  000BAA  26E1               	addwf	fsr1l,f,c
  7254  000BAC  50DD               	movf	postdec2,w,c
  7255  000BAE  22E2               	addwfc	fsr1h,f,c
  7256  000BB0  50E7               	movf	indf1,w,c
  7257  000BB2  6FCE               	movwf	(??_f_write+2)& (0+255),b
  7258  000BB4  51CE               	movf	(??_f_write+2)& (0+255),w,b
  7259  000BB6  25CC               	addwf	??_f_write& (0+255),w,b
  7260  000BB8  6FDF               	movwf	f_write@cc& (0+255),b
  7261  000BBA  0E00               	movlw	0
  7262  000BBC  21CD               	addwfc	(??_f_write+1)& (0+255),w,b
  7263  000BBE  6FE0               	movwf	(f_write@cc+1)& (0+255),b
  7264  000BC0                     l1206:
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;tff.c: 1033: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
  7268                           
  7269                           ; BSR set to: 0
  7270  000BC0  C0D9  F07F         	movff	f_write@wbuff,disk_write@buff
  7271  000BC4  C0DA  F080         	movff	f_write@wbuff+1,disk_write@buff+1
  7272  000BC8  C0DB  F081         	movff	f_write@sect,disk_write@sector
  7273  000BCC  C0DC  F082         	movff	f_write@sect+1,disk_write@sector+1
  7274  000BD0  C0DD  F083         	movff	f_write@sect+2,disk_write@sector+2
  7275  000BD4  C0DE  F084         	movff	f_write@sect+3,disk_write@sector+3
  7276  000BD8  C0DF  F085         	movff	f_write@cc,disk_write@count
  7277  000BDC  0E00               	movlw	0
  7278  000BDE  EC55  F026         	call	_disk_write
  7279  000BE2  0900               	iorlw	0
  7280  000BE4  A4D8               	btfss	status,2,c
  7281  000BE6  D14B               	goto	l1204
  7282                           
  7283                           ;tff.c: 1035: fp->csect += (BYTE)cc;
  7284                           
  7285                           ;tff.c: 1034: goto fw_error;
  7286  000BE8  0100               	movlb	0	; () banked
  7287  000BEA  EE20 F003          	lfsr	2,3
  7288  000BEE  51C4               	movf	f_write@fp& (0+255),w,b
  7289  000BF0  26D9               	addwf	fsr2l,f,c
  7290  000BF2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7291  000BF4  22DA               	addwfc	fsr2h,f,c
  7292  000BF6  51DF               	movf	f_write@cc& (0+255),w,b
  7293  000BF8  26DF               	addwf	indf2,f,c
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;tff.c: 1036: wcnt = 512U * cc;
  7297  000BFA  C0DF  F0CC         	movff	f_write@cc,??_f_write
  7298  000BFE  C0E0  F0CD         	movff	f_write@cc+1,??_f_write+1
  7299  000C02  0E09               	movlw	9
  7300  000C04                     u11475:
  7301  000C04  90D8               	bcf	status,0,c
  7302  000C06  37CC               	rlcf	??_f_write& (0+255),f,b
  7303  000C08  37CD               	rlcf	(??_f_write+1)& (0+255),f,b
  7304  000C0A  2EE8               	decfsz	wreg,f,c
  7305  000C0C  D7FB               	goto	u11475
  7306  000C0E  C0CC  F0E3         	movff	??_f_write,f_write@wcnt
  7307  000C12  C0CD  F0E4         	movff	??_f_write+1,f_write@wcnt+1
  7308                           
  7309                           ;tff.c: 1037: continue;
  7310  000C16  D0DF               	goto	l1208
  7311  000C18                     l1205:
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;tff.c: 1038: }
  7315                           ;tff.c: 1039: if (fp->fptr >= fp->fsize) {
  7316                           
  7317                           ; BSR set to: 0
  7318  000C18  EE20 F00A          	lfsr	2,10
  7319  000C1C  51C4               	movf	f_write@fp& (0+255),w,b
  7320  000C1E  26D9               	addwf	fsr2l,f,c
  7321  000C20  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7322  000C22  22DA               	addwfc	fsr2h,f,c
  7323  000C24  EE10 F006          	lfsr	1,6
  7324  000C28  51C4               	movf	f_write@fp& (0+255),w,b
  7325  000C2A  26E1               	addwf	fsr1l,f,c
  7326  000C2C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7327  000C2E  22E2               	addwfc	fsr1h,f,c
  7328  000C30  50DE               	movf	postinc2,w,c
  7329  000C32  5CE6               	subwf	postinc1,w,c
  7330  000C34  50DE               	movf	postinc2,w,c
  7331  000C36  58E6               	subwfb	postinc1,w,c
  7332  000C38  50DE               	movf	postinc2,w,c
  7333  000C3A  58E6               	subwfb	postinc1,w,c
  7334  000C3C  50DE               	movf	postinc2,w,c
  7335  000C3E  58E6               	subwfb	postinc1,w,c
  7336  000C40  A0D8               	btfss	status,0,c
  7337  000C42  D022               	goto	l1209
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;tff.c: 1040: if (!move_window(0)) goto fw_error;
  7341  000C44  0E00               	movlw	0
  7342  000C46  6F8B               	movwf	move_window@sector& (0+255),b
  7343  000C48  0E00               	movlw	0
  7344  000C4A  6F8C               	movwf	(move_window@sector+1)& (0+255),b
  7345  000C4C  0E00               	movlw	0
  7346  000C4E  6F8D               	movwf	(move_window@sector+2)& (0+255),b
  7347  000C50  0E00               	movlw	0
  7348  000C52  6F8E               	movwf	(move_window@sector+3)& (0+255),b
  7349  000C54  ECDD  F01B         	call	_move_window	;wreg free
  7350  000C58  0900               	iorlw	0
  7351  000C5A  B4D8               	btfsc	status,2,c
  7352  000C5C  D110               	goto	l1204
  7353                           
  7354                           ;tff.c: 1041: fp->fs->winsect = sect;
  7355  000C5E  0100               	movlb	0	; () banked
  7356  000C60  EE20 F004          	lfsr	2,4
  7357  000C64  51C4               	movf	f_write@fp& (0+255),w,b
  7358  000C66  26D9               	addwf	fsr2l,f,c
  7359  000C68  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7360  000C6A  22DA               	addwfc	fsr2h,f,c
  7361  000C6C  EE10 F004          	lfsr	1,4
  7362  000C70  50DE               	movf	postinc2,w,c
  7363  000C72  26E1               	addwf	fsr1l,f,c
  7364  000C74  50DD               	movf	postdec2,w,c
  7365  000C76  22E2               	addwfc	fsr1h,f,c
  7366  000C78  C0DB  FFE6         	movff	f_write@sect,postinc1
  7367  000C7C  C0DC  FFE6         	movff	f_write@sect+1,postinc1
  7368  000C80  C0DD  FFE6         	movff	f_write@sect+2,postinc1
  7369  000C84  C0DE  FFE6         	movff	f_write@sect+3,postinc1
  7370  000C88                     l1209:
  7371                           
  7372                           ; BSR set to: 0
  7373                           ;tff.c: 1042: }
  7374                           ;tff.c: 1043: fp->csect++;
  7375                           
  7376                           ; BSR set to: 0
  7377  000C88  EE20 F003          	lfsr	2,3
  7378  000C8C  51C4               	movf	f_write@fp& (0+255),w,b
  7379  000C8E  26D9               	addwf	fsr2l,f,c
  7380  000C90  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7381  000C92  22DA               	addwfc	fsr2h,f,c
  7382  000C94  2ADF               	incf	indf2,f,c
  7383  000C96                     l1194:
  7384                           
  7385                           ; BSR set to: 0
  7386                           ;tff.c: 1044: }
  7387                           ;tff.c: 1045: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  7388                           
  7389                           ; BSR set to: 0
  7390  000C96  EE20 F010          	lfsr	2,16
  7391  000C9A  51C4               	movf	f_write@fp& (0+255),w,b
  7392  000C9C  26D9               	addwf	fsr2l,f,c
  7393  000C9E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7394  000CA0  22DA               	addwfc	fsr2h,f,c
  7395  000CA2  CFDE F06C          	movff	postinc2,clust2sect@clust
  7396  000CA6  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  7397  000CAA  EC93  F022         	call	_clust2sect	;wreg free
  7398  000CAE  0100               	movlb	0	; () banked
  7399  000CB0  EE20 F003          	lfsr	2,3
  7400  000CB4  51C4               	movf	f_write@fp& (0+255),w,b
  7401  000CB6  26D9               	addwf	fsr2l,f,c
  7402  000CB8  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7403  000CBA  22DA               	addwfc	fsr2h,f,c
  7404  000CBC  50DF               	movf	indf2,w,c
  7405  000CBE  6FCC               	movwf	??_f_write& (0+255),b
  7406  000CC0  51CC               	movf	??_f_write& (0+255),w,b
  7407  000CC2  256C               	addwf	?_clust2sect& (0+255),w,b
  7408  000CC4  6FCD               	movwf	(??_f_write+1)& (0+255),b
  7409  000CC6  0E00               	movlw	0
  7410  000CC8  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  7411  000CCA  6FCE               	movwf	(??_f_write+2)& (0+255),b
  7412  000CCC  0E00               	movlw	0
  7413  000CCE  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  7414  000CD0  6FCF               	movwf	(??_f_write+3)& (0+255),b
  7415  000CD2  0E00               	movlw	0
  7416  000CD4  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  7417  000CD6  6FD0               	movwf	(??_f_write+4)& (0+255),b
  7418  000CD8  0EFF               	movlw	255
  7419  000CDA  25CD               	addwf	(??_f_write+1)& (0+255),w,b
  7420  000CDC  6FDB               	movwf	f_write@sect& (0+255),b
  7421  000CDE  0EFF               	movlw	255
  7422  000CE0  21CE               	addwfc	(??_f_write+2)& (0+255),w,b
  7423  000CE2  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  7424  000CE4  0EFF               	movlw	255
  7425  000CE6  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
  7426  000CE8  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  7427  000CEA  0EFF               	movlw	255
  7428  000CEC  21D0               	addwfc	(??_f_write+4)& (0+255),w,b
  7429  000CEE  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  7430                           
  7431                           ; BSR set to: 0
  7432                           ;tff.c: 1046: if (!move_window(sect)) goto fw_error;
  7433  000CF0  C0DB  F08B         	movff	f_write@sect,move_window@sector
  7434  000CF4  C0DC  F08C         	movff	f_write@sect+1,move_window@sector+1
  7435  000CF8  C0DD  F08D         	movff	f_write@sect+2,move_window@sector+2
  7436  000CFC  C0DE  F08E         	movff	f_write@sect+3,move_window@sector+3
  7437  000D00  ECDD  F01B         	call	_move_window	;wreg free
  7438  000D04  0900               	iorlw	0
  7439  000D06  B4D8               	btfsc	status,2,c
  7440  000D08  D0BA               	goto	l1204
  7441                           
  7442                           ;tff.c: 1047: wcnt = 512U - (fp->fptr % 512U);
  7443  000D0A  0EFF               	movlw	255
  7444  000D0C  0100               	movlb	0	; () banked
  7445  000D0E  6FCC               	movwf	??_f_write& (0+255),b
  7446  000D10  0E01               	movlw	1
  7447  000D12  6FCD               	movwf	(??_f_write+1)& (0+255),b
  7448  000D14  EE20 F006          	lfsr	2,6
  7449  000D18  51C4               	movf	f_write@fp& (0+255),w,b
  7450  000D1A  26D9               	addwf	fsr2l,f,c
  7451  000D1C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7452  000D1E  22DA               	addwfc	fsr2h,f,c
  7453  000D20  CFDE F0CE          	movff	postinc2,??_f_write+2
  7454  000D24  CFDD F0CF          	movff	postdec2,??_f_write+3
  7455  000D28  51CC               	movf	??_f_write& (0+255),w,b
  7456  000D2A  17CE               	andwf	(??_f_write+2)& (0+255),f,b
  7457  000D2C  51CD               	movf	(??_f_write+1)& (0+255),w,b
  7458  000D2E  17CF               	andwf	(??_f_write+3)& (0+255),f,b
  7459  000D30  1FCE               	comf	(??_f_write+2)& (0+255),f,b
  7460  000D32  1FCF               	comf	(??_f_write+3)& (0+255),f,b
  7461  000D34  4BCE               	infsnz	(??_f_write+2)& (0+255),f,b
  7462  000D36  2BCF               	incf	(??_f_write+3)& (0+255),f,b
  7463  000D38  0E00               	movlw	0
  7464  000D3A  25CE               	addwf	(??_f_write+2)& (0+255),w,b
  7465  000D3C  6FE3               	movwf	f_write@wcnt& (0+255),b
  7466  000D3E  0E02               	movlw	2
  7467  000D40  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
  7468  000D42  6FE4               	movwf	(f_write@wcnt+1)& (0+255),b
  7469                           
  7470                           ; BSR set to: 0
  7471                           ;tff.c: 1048: if (wcnt > btw) wcnt = btw;
  7472  000D44  51E3               	movf	f_write@wcnt& (0+255),w,b
  7473  000D46  5DC8               	subwf	f_write@btw& (0+255),w,b
  7474  000D48  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7475  000D4A  59C9               	subwfb	(f_write@btw+1)& (0+255),w,b
  7476  000D4C  B0D8               	btfsc	status,0,c
  7477  000D4E  D004               	goto	l1212
  7478                           
  7479                           ; BSR set to: 0
  7480  000D50  C0C8  F0E3         	movff	f_write@btw,f_write@wcnt
  7481  000D54  C0C9  F0E4         	movff	f_write@btw+1,f_write@wcnt+1
  7482  000D58                     l1212:
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;tff.c: 1049: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
  7486                           
  7487                           ; BSR set to: 0
  7488  000D58  0EFF               	movlw	255
  7489  000D5A  6FCC               	movwf	??_f_write& (0+255),b
  7490  000D5C  0E01               	movlw	1
  7491  000D5E  6FCD               	movwf	(??_f_write+1)& (0+255),b
  7492  000D60  EE20 F006          	lfsr	2,6
  7493  000D64  51C4               	movf	f_write@fp& (0+255),w,b
  7494  000D66  26D9               	addwf	fsr2l,f,c
  7495  000D68  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7496  000D6A  22DA               	addwfc	fsr2h,f,c
  7497  000D6C  CFDE F0CE          	movff	postinc2,??_f_write+2
  7498  000D70  CFDD F0CF          	movff	postdec2,??_f_write+3
  7499  000D74  51CC               	movf	??_f_write& (0+255),w,b
  7500  000D76  17CE               	andwf	(??_f_write+2)& (0+255),f,b
  7501  000D78  51CD               	movf	(??_f_write+1)& (0+255),w,b
  7502  000D7A  17CF               	andwf	(??_f_write+3)& (0+255),f,b
  7503  000D7C  0E20               	movlw	32
  7504  000D7E  27CE               	addwf	(??_f_write+2)& (0+255),f,b
  7505  000D80  0E00               	movlw	0
  7506  000D82  23CF               	addwfc	(??_f_write+3)& (0+255),f,b
  7507  000D84  EE20 F004          	lfsr	2,4
  7508  000D88  51C4               	movf	f_write@fp& (0+255),w,b
  7509  000D8A  26D9               	addwf	fsr2l,f,c
  7510  000D8C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7511  000D8E  22DA               	addwfc	fsr2h,f,c
  7512  000D90  CFDE F0D0          	movff	postinc2,??_f_write+4
  7513  000D94  CFDD F0D1          	movff	postdec2,??_f_write+5
  7514  000D98  51CE               	movf	(??_f_write+2)& (0+255),w,b
  7515  000D9A  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  7516  000D9C  6F60               	movwf	memcpy@d1& (0+255),b
  7517  000D9E  51CF               	movf	(??_f_write+3)& (0+255),w,b
  7518  000DA0  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  7519  000DA2  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  7520  000DA4  C0D9  F062         	movff	f_write@wbuff,memcpy@s1
  7521  000DA8  C0DA  F063         	movff	f_write@wbuff+1,memcpy@s1+1
  7522  000DAC  C0E3  F064         	movff	f_write@wcnt,memcpy@n
  7523  000DB0  C0E4  F065         	movff	f_write@wcnt+1,memcpy@n+1
  7524  000DB4  EC5F  F02A         	call	_memcpy	;wreg free
  7525                           
  7526                           ;tff.c: 1050: fp->fs->winflag = 1;
  7527  000DB8  0100               	movlb	0	; () banked
  7528  000DBA  EE20 F004          	lfsr	2,4
  7529  000DBE  51C4               	movf	f_write@fp& (0+255),w,b
  7530  000DC0  26D9               	addwf	fsr2l,f,c
  7531  000DC2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7532  000DC4  22DA               	addwfc	fsr2h,f,c
  7533  000DC6  EE10 F01F          	lfsr	1,31
  7534  000DCA  50DE               	movf	postinc2,w,c
  7535  000DCC  26E1               	addwf	fsr1l,f,c
  7536  000DCE  50DD               	movf	postdec2,w,c
  7537  000DD0  22E2               	addwfc	fsr1h,f,c
  7538  000DD2  0E01               	movlw	1
  7539  000DD4  6EE7               	movwf	indf1,c
  7540  000DD6                     l1208:
  7541                           
  7542                           ; BSR set to: 0
  7543                           
  7544                           ; BSR set to: 0
  7545  000DD6  51E3               	movf	f_write@wcnt& (0+255),w,b
  7546  000DD8  27D9               	addwf	f_write@wbuff& (0+255),f,b
  7547  000DDA  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7548  000DDC  23DA               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  7549                           
  7550                           ; BSR set to: 0
  7551  000DDE  EE20 F006          	lfsr	2,6
  7552  000DE2  51C4               	movf	f_write@fp& (0+255),w,b
  7553  000DE4  26D9               	addwf	fsr2l,f,c
  7554  000DE6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7555  000DE8  22DA               	addwfc	fsr2h,f,c
  7556  000DEA  51E3               	movf	f_write@wcnt& (0+255),w,b
  7557  000DEC  26DE               	addwf	postinc2,f,c
  7558  000DEE  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7559  000DF0  22DE               	addwfc	postinc2,f,c
  7560  000DF2  0E00               	movlw	0
  7561  000DF4  22DE               	addwfc	postinc2,f,c
  7562  000DF6  22DE               	addwfc	postinc2,f,c
  7563                           
  7564                           ; BSR set to: 0
  7565  000DF8  C0CA  FFD9         	movff	f_write@bw,fsr2l
  7566  000DFC  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  7567  000E00  51E3               	movf	f_write@wcnt& (0+255),w,b
  7568  000E02  26DE               	addwf	postinc2,f,c
  7569  000E04  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7570  000E06  22DD               	addwfc	postdec2,f,c
  7571                           
  7572                           ; BSR set to: 0
  7573  000E08  51E3               	movf	f_write@wcnt& (0+255),w,b
  7574  000E0A  5FC8               	subwf	f_write@btw& (0+255),f,b
  7575  000E0C  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7576  000E0E  5BC9               	subwfb	(f_write@btw+1)& (0+255),f,b
  7577  000E10                     l1192:
  7578                           
  7579                           ; BSR set to: 0
  7580                           
  7581                           ; BSR set to: 0
  7582  000E10  51C8               	movf	f_write@btw& (0+255),w,b
  7583  000E12  11C9               	iorwf	(f_write@btw+1)& (0+255),w,b
  7584  000E14  A4D8               	btfss	status,2,c
  7585  000E16  D5C1               	goto	l1193
  7586  000E18                     u11520:
  7587                           
  7588                           ; BSR set to: 0
  7589                           ;tff.c: 1051: }
  7590                           ;tff.c: 1053: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  7591                           
  7592                           ; BSR set to: 0
  7593  000E18  EE20 F006          	lfsr	2,6
  7594  000E1C  51C4               	movf	f_write@fp& (0+255),w,b
  7595  000E1E  26D9               	addwf	fsr2l,f,c
  7596  000E20  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7597  000E22  22DA               	addwfc	fsr2h,f,c
  7598  000E24  EE10 F00A          	lfsr	1,10
  7599  000E28  51C4               	movf	f_write@fp& (0+255),w,b
  7600  000E2A  26E1               	addwf	fsr1l,f,c
  7601  000E2C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7602  000E2E  22E2               	addwfc	fsr1h,f,c
  7603  000E30  50DE               	movf	postinc2,w,c
  7604  000E32  5CE6               	subwf	postinc1,w,c
  7605  000E34  50DE               	movf	postinc2,w,c
  7606  000E36  58E6               	subwfb	postinc1,w,c
  7607  000E38  50DE               	movf	postinc2,w,c
  7608  000E3A  58E6               	subwfb	postinc1,w,c
  7609  000E3C  50DE               	movf	postinc2,w,c
  7610  000E3E  58E6               	subwfb	postinc1,w,c
  7611  000E40  B0D8               	btfsc	status,0,c
  7612  000E42  D014               	goto	l1213
  7613                           
  7614                           ; BSR set to: 0
  7615  000E44  EE20 F006          	lfsr	2,6
  7616  000E48  51C4               	movf	f_write@fp& (0+255),w,b
  7617  000E4A  26D9               	addwf	fsr2l,f,c
  7618  000E4C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7619  000E4E  22DA               	addwfc	fsr2h,f,c
  7620  000E50  EE10 F00A          	lfsr	1,10
  7621  000E54  51C4               	movf	f_write@fp& (0+255),w,b
  7622  000E56  26E1               	addwf	fsr1l,f,c
  7623  000E58  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7624  000E5A  22E2               	addwfc	fsr1h,f,c
  7625  000E5C  CFDE FFE6          	movff	postinc2,postinc1
  7626  000E60  CFDE FFE6          	movff	postinc2,postinc1
  7627  000E64  CFDE FFE6          	movff	postinc2,postinc1
  7628  000E68  CFDE FFE6          	movff	postinc2,postinc1
  7629  000E6C                     l1213:
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;tff.c: 1054: fp->flag |= 0x20;
  7633                           
  7634                           ; BSR set to: 0
  7635  000E6C  EE20 F002          	lfsr	2,2
  7636  000E70  51C4               	movf	f_write@fp& (0+255),w,b
  7637  000E72  26D9               	addwf	fsr2l,f,c
  7638  000E74  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7639  000E76  22DA               	addwfc	fsr2h,f,c
  7640  000E78  0E00               	movlw	0
  7641  000E7A  8ADB               	bsf	plusw2,5,c
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;tff.c: 1055: return res;
  7645                           ;	Return value of _f_write is never used
  7646  000E7C  0012               	return	
  7647  000E7E                     l1204:
  7648                           
  7649                           ;tff.c: 1058: fp->flag |= 0x80;
  7650                           
  7651                           ; BSR set to: 0
  7652  000E7E  0100               	movlb	0	; () banked
  7653  000E80  EE20 F002          	lfsr	2,2
  7654  000E84  51C4               	movf	f_write@fp& (0+255),w,b
  7655  000E86  26D9               	addwf	fsr2l,f,c
  7656  000E88  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7657  000E8A  22DA               	addwfc	fsr2h,f,c
  7658  000E8C  0E00               	movlw	0
  7659  000E8E  8EDB               	bsf	plusw2,7,c
  7660  000E90  0012               	return	
  7661  000E92                     __end_of_f_write:
  7662                           	opt stack 0
  7663                           tosu	equ	0xFFF
  7664                           tosh	equ	0xFFE
  7665                           tosl	equ	0xFFD
  7666                           pclath	equ	0xFFA
  7667                           tblptru	equ	0xFF8
  7668                           tblptrh	equ	0xFF7
  7669                           tblptrl	equ	0xFF6
  7670                           tablat	equ	0xFF5
  7671                           prodh	equ	0xFF4
  7672                           prodl	equ	0xFF3
  7673                           intcon	equ	0xFF2
  7674                           intcon2	equ	0xFF1
  7675                           intcon3	equ	0xFF0
  7676                           postinc0	equ	0xFEE
  7677                           wreg	equ	0xFE8
  7678                           indf1	equ	0xFE7
  7679                           postinc1	equ	0xFE6
  7680                           postdec1	equ	0xFE5
  7681                           fsr1h	equ	0xFE2
  7682                           fsr1l	equ	0xFE1
  7683                           indf2	equ	0xFDF
  7684                           postinc2	equ	0xFDE
  7685                           postdec2	equ	0xFDD
  7686                           plusw2	equ	0xFDB
  7687                           fsr2h	equ	0xFDA
  7688                           fsr2l	equ	0xFD9
  7689                           status	equ	0xFD8
  7690                           
  7691 ;; *************** function ___llmod *****************
  7692 ;; Defined at:
  7693 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;  dividend        4    0[BANK0 ] unsigned long 
  7696 ;;  divisor         4    4[BANK0 ] unsigned long 
  7697 ;; Auto vars:     Size  Location     Type
  7698 ;;  counter         1   32[COMRAM] unsigned char 
  7699 ;; Return value:  Size  Location     Type
  7700 ;;                  4    0[BANK0 ] unsigned long 
  7701 ;; Registers used:
  7702 ;;		wreg, status,2, status,0
  7703 ;; Tracked objects:
  7704 ;;		On entry : 0/0
  7705 ;;		On exit  : 0/0
  7706 ;;		Unchanged: 0/0
  7707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7708 ;;      Params:         0       8       0       0       0       0       0       0       0
  7709 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7710 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7711 ;;      Totals:         1       8       0       0       0       0       0       0       0
  7712 ;;Total ram usage:        9 bytes
  7713 ;; Hardware stack levels used:    1
  7714 ;; Hardware stack levels required when called:    3
  7715 ;; This function calls:
  7716 ;;		Nothing
  7717 ;; This function is called by:
  7718 ;;		_fprintf
  7719 ;; This function uses a non-reentrant model
  7720 ;;
  7721                           
  7722                           	psect	text28
  7723  0050AA                     __ptext28:
  7724                           	opt stack 0
  7725  0050AA                     ___llmod:
  7726                           	opt stack 23
  7727                           
  7728                           ; BSR set to: 0
  7729                           ;incstack = 0
  7730  0050AA  0100               	movlb	0	; () banked
  7731  0050AC  5164               	movf	___llmod@divisor& (0+255),w,b
  7732  0050AE  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  7733  0050B0  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  7734  0050B2  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  7735  0050B4  B4D8               	btfsc	status,2,c
  7736  0050B6  D024               	goto	l1757
  7737                           
  7738                           ; BSR set to: 0
  7739  0050B8  0E01               	movlw	1
  7740  0050BA  6E21               	movwf	___llmod@counter,c
  7741  0050BC  D006               	goto	l1752
  7742  0050BE                     
  7743                           ; BSR set to: 0
  7744                           
  7745                           ; BSR set to: 0
  7746  0050BE  90D8               	bcf	status,0,c
  7747  0050C0  3764               	rlcf	___llmod@divisor& (0+255),f,b
  7748  0050C2  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  7749  0050C4  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  7750  0050C6  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  7751  0050C8  2A21               	incf	___llmod@counter,f,c
  7752  0050CA                     l1752:
  7753                           
  7754                           ; BSR set to: 0
  7755                           
  7756                           ; BSR set to: 0
  7757  0050CA  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  7758  0050CC  D7F8               	goto	l1753
  7759  0050CE                     u13050:
  7760                           
  7761                           ; BSR set to: 0
  7762                           
  7763                           ; BSR set to: 0
  7764                           
  7765                           ; BSR set to: 0
  7766  0050CE  5164               	movf	___llmod@divisor& (0+255),w,b
  7767  0050D0  5D60               	subwf	___llmod@dividend& (0+255),w,b
  7768  0050D2  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  7769  0050D4  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  7770  0050D6  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  7771  0050D8  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  7772  0050DA  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  7773  0050DC  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  7774  0050DE  A0D8               	btfss	status,0,c
  7775  0050E0  D008               	goto	l1756
  7776                           
  7777                           ; BSR set to: 0
  7778  0050E2  5164               	movf	___llmod@divisor& (0+255),w,b
  7779  0050E4  5F60               	subwf	___llmod@dividend& (0+255),f,b
  7780  0050E6  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  7781  0050E8  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  7782  0050EA  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  7783  0050EC  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  7784  0050EE  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  7785  0050F0  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  7786  0050F2                     l1756:
  7787                           
  7788                           ; BSR set to: 0
  7789                           
  7790                           ; BSR set to: 0
  7791  0050F2  90D8               	bcf	status,0,c
  7792  0050F4  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  7793  0050F6  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  7794  0050F8  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  7795  0050FA  3364               	rrcf	___llmod@divisor& (0+255),f,b
  7796                           
  7797                           ; BSR set to: 0
  7798  0050FC  2E21               	decfsz	___llmod@counter,f,c
  7799  0050FE  D7E7               	goto	u13050
  7800  005100                     l1757:
  7801                           
  7802                           ; BSR set to: 0
  7803                           
  7804                           ; BSR set to: 0
  7805  005100  C060  F060         	movff	___llmod@dividend,?___llmod
  7806  005104  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  7807  005108  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  7808  00510C  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  7809                           
  7810                           ; BSR set to: 0
  7811  005110  0012               	return		;funcret
  7812  005112                     __end_of___llmod:
  7813                           	opt stack 0
  7814                           tosu	equ	0xFFF
  7815                           tosh	equ	0xFFE
  7816                           tosl	equ	0xFFD
  7817                           pclath	equ	0xFFA
  7818                           tblptru	equ	0xFF8
  7819                           tblptrh	equ	0xFF7
  7820                           tblptrl	equ	0xFF6
  7821                           tablat	equ	0xFF5
  7822                           prodh	equ	0xFF4
  7823                           prodl	equ	0xFF3
  7824                           intcon	equ	0xFF2
  7825                           intcon2	equ	0xFF1
  7826                           intcon3	equ	0xFF0
  7827                           postinc0	equ	0xFEE
  7828                           wreg	equ	0xFE8
  7829                           indf1	equ	0xFE7
  7830                           postinc1	equ	0xFE6
  7831                           postdec1	equ	0xFE5
  7832                           fsr1h	equ	0xFE2
  7833                           fsr1l	equ	0xFE1
  7834                           indf2	equ	0xFDF
  7835                           postinc2	equ	0xFDE
  7836                           postdec2	equ	0xFDD
  7837                           plusw2	equ	0xFDB
  7838                           fsr2h	equ	0xFDA
  7839                           fsr2l	equ	0xFD9
  7840                           status	equ	0xFD8
  7841                           
  7842 ;; *************** function _f_open *****************
  7843 ;; Defined at:
  7844 ;;		line 825 in file "bibliotecas/tff.c"
  7845 ;; Parameters:    Size  Location     Type
  7846 ;;  fp              2  119[BANK0 ] PTR struct _FIL
  7847 ;;		 -> fil(28), 
  7848 ;;  path            2  121[BANK0 ] PTR const unsigned char 
  7849 ;;		 -> STR_10(13), filename(15), 
  7850 ;;  mode            1  123[BANK0 ] unsigned char 
  7851 ;; Auto vars:     Size  Location     Type
  7852 ;;  dw              4   14[BANK1 ] unsigned long 
  7853 ;;  rs              2   12[BANK1 ] unsigned short 
  7854 ;;  dj             14   21[BANK1 ] struct _DIR_E
  7855 ;;  fn             12    0[BANK1 ] unsigned char [12]
  7856 ;;  dir             2   19[BANK1 ] PTR unsigned char 
  7857 ;;		 -> NULL(0), fs(544), 
  7858 ;;  res             1   18[BANK1 ] enum E155
  7859 ;; Return value:  Size  Location     Type
  7860 ;;                  1    wreg      enum E3974
  7861 ;; Registers used:
  7862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7863 ;; Tracked objects:
  7864 ;;		On entry : 0/0
  7865 ;;		On exit  : 0/0
  7866 ;;		Unchanged: 0/0
  7867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7868 ;;      Params:         0       5       0       0       0       0       0       0       0
  7869 ;;      Locals:         0       0      35       0       0       0       0       0       0
  7870 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7871 ;;      Totals:         0       9      35       0       0       0       0       0       0
  7872 ;;Total ram usage:       44 bytes
  7873 ;; Hardware stack levels used:    1
  7874 ;; Hardware stack levels required when called:   12
  7875 ;; This function calls:
  7876 ;;		_auto_mount
  7877 ;;		_get_fattime
  7878 ;;		_memcpy
  7879 ;;		_memset
  7880 ;;		_move_window
  7881 ;;		_remove_chain
  7882 ;;		_reserve_direntry
  7883 ;;		_trace_path
  7884 ;; This function is called by:
  7885 ;;		_escrita_sdcard
  7886 ;;		_leitura_sdcard
  7887 ;;		_sdcard_init
  7888 ;; This function uses a non-reentrant model
  7889 ;;
  7890                           
  7891                           	psect	text29
  7892  0020DE                     __ptext29:
  7893                           	opt stack 0
  7894  0020DE                     _f_open:
  7895                           	opt stack 15
  7896                           
  7897                           ;tff.c: 831: FRESULT res;
  7898                           ;tff.c: 832: DIR_E dj;
  7899                           ;tff.c: 833: BYTE *dir;
  7900                           ;tff.c: 834: char fn[8+3+1];
  7901                           ;tff.c: 837: fp->fs = (0);
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;incstack = 0
  7905  0020DE  0100               	movlb	0	; () banked
  7906  0020E0  EE20 F004          	lfsr	2,4
  7907  0020E4  51D7               	movf	f_open@fp& (0+255),w,b
  7908  0020E6  26D9               	addwf	fsr2l,f,c
  7909  0020E8  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  7910  0020EA  22DA               	addwfc	fsr2h,f,c
  7911  0020EC  0E00               	movlw	0
  7912  0020EE  6EDE               	movwf	postinc2,c
  7913  0020F0  0E00               	movlw	0
  7914  0020F2  6EDD               	movwf	postdec2,c
  7915                           
  7916                           ; BSR set to: 0
  7917                           ;tff.c: 839: mode &= (0x01|0x02|0x08|0x10|0x04);
  7918  0020F4  0E1F               	movlw	31
  7919  0020F6  17DB               	andwf	f_open@mode& (0+255),f,b
  7920                           
  7921                           ; BSR set to: 0
  7922                           ;tff.c: 840: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
  7923  0020F8  0ED9               	movlw	low f_open@path
  7924  0020FA  6F93               	movwf	auto_mount@path& (0+255),b
  7925  0020FC  0E00               	movlw	high f_open@path
  7926  0020FE  6F94               	movwf	(auto_mount@path+1)& (0+255),b
  7927  002100  51DB               	movf	f_open@mode& (0+255),w,b
  7928  002102  0B1E               	andlw	30
  7929  002104  6F95               	movwf	auto_mount@chk_wp& (0+255),b
  7930  002106  EC49  F007         	call	_auto_mount	;wreg free
  7931  00210A  0101               	movlb	1	; () banked
  7932  00210C  6FC5               	movwf	f_open@res& (0+255),b
  7933                           
  7934                           ; BSR set to: 1
  7935                           ;tff.c: 845: if (res != FR_OK) return res;
  7936  00210E  51C5               	movf	f_open@res& (0+255),w,b
  7937  002110  B4D8               	btfsc	status,2,c
  7938  002112  D002               	goto	l1137
  7939                           
  7940                           ; BSR set to: 1
  7941  002114  51C5               	movf	f_open@res& (0+255),w,b
  7942                           
  7943                           ; BSR set to: 1
  7944  002116  0012               	return	
  7945  002118                     l1137:
  7946                           
  7947                           ; BSR set to: 1
  7948                           ;tff.c: 846: res = trace_path(&dj, fn, path, &dir);
  7949                           
  7950                           ; BSR set to: 1
  7951  002118  0EC8               	movlw	low f_open@dj
  7952  00211A  0100               	movlb	0	; () banked
  7953  00211C  6FC0               	movwf	trace_path@dj& (0+255),b
  7954  00211E  0E01               	movlw	high f_open@dj
  7955  002120  6FC1               	movwf	(trace_path@dj+1)& (0+255),b
  7956  002122  0EB3               	movlw	low f_open@fn
  7957  002124  6FC2               	movwf	trace_path@fn& (0+255),b
  7958  002126  0E01               	movlw	high f_open@fn
  7959  002128  6FC3               	movwf	(trace_path@fn+1)& (0+255),b
  7960  00212A  C0D9  F0C4         	movff	f_open@path,trace_path@path
  7961  00212E  C0DA  F0C5         	movff	f_open@path+1,trace_path@path+1
  7962  002132  0EC6               	movlw	low f_open@dir
  7963  002134  6FC6               	movwf	trace_path@dir& (0+255),b
  7964  002136  0E01               	movlw	high f_open@dir
  7965  002138  6FC7               	movwf	(trace_path@dir+1)& (0+255),b
  7966  00213A  ECDD  F013         	call	_trace_path	;wreg free
  7967  00213E  0101               	movlb	1	; () banked
  7968  002140  6FC5               	movwf	f_open@res& (0+255),b
  7969                           
  7970                           ; BSR set to: 1
  7971                           ;tff.c: 850: if (mode & (0x08|0x10|0x04)) {
  7972  002142  C0DB  F0DC         	movff	f_open@mode,??_f_open
  7973  002146  0E1C               	movlw	28
  7974  002148  0100               	movlb	0	; () banked
  7975  00214A  17DC               	andwf	??_f_open& (0+255),f,b
  7976  00214C  B4D8               	btfsc	status,2,c
  7977  00214E  D0F6               	goto	l1139
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;tff.c: 851: CLUST rs;
  7981                           ;tff.c: 852: DWORD dw;
  7982                           ;tff.c: 853: if (res != FR_OK) {
  7983  002150  0101               	movlb	1	; () banked
  7984  002152  51C5               	movf	f_open@res& (0+255),w,b
  7985  002154  B4D8               	btfsc	status,2,c
  7986  002156  D042               	goto	l1140
  7987                           
  7988                           ; BSR set to: 1
  7989                           ;tff.c: 854: if (res != FR_NO_FILE) return res;
  7990  002158  0E02               	movlw	2
  7991  00215A  19C5               	xorwf	f_open@res& (0+255),w,b
  7992  00215C  B4D8               	btfsc	status,2,c
  7993  00215E  D002               	goto	l1141
  7994                           
  7995                           ; BSR set to: 1
  7996  002160  51C5               	movf	f_open@res& (0+255),w,b
  7997                           
  7998                           ; BSR set to: 1
  7999  002162  0012               	return	
  8000  002164                     l1141:
  8001                           
  8002                           ; BSR set to: 1
  8003                           ;tff.c: 855: res = reserve_direntry(&dj, &dir);
  8004                           
  8005                           ; BSR set to: 1
  8006  002164  0EC8               	movlw	low f_open@dj
  8007  002166  0100               	movlb	0	; () banked
  8008  002168  6FC4               	movwf	reserve_direntry@dj& (0+255),b
  8009  00216A  0E01               	movlw	high f_open@dj
  8010  00216C  6FC5               	movwf	(reserve_direntry@dj+1)& (0+255),b
  8011  00216E  0EC6               	movlw	low f_open@dir
  8012  002170  6FC6               	movwf	reserve_direntry@dir& (0+255),b
  8013  002172  0E01               	movlw	high f_open@dir
  8014  002174  6FC7               	movwf	(reserve_direntry@dir+1)& (0+255),b
  8015  002176  EC33  F015         	call	_reserve_direntry	;wreg free
  8016  00217A  0101               	movlb	1	; () banked
  8017  00217C  6FC5               	movwf	f_open@res& (0+255),b
  8018                           
  8019                           ; BSR set to: 1
  8020                           ;tff.c: 856: if (res != FR_OK) return res;
  8021  00217E  51C5               	movf	f_open@res& (0+255),w,b
  8022  002180  B4D8               	btfsc	status,2,c
  8023  002182  D002               	goto	l1142
  8024                           
  8025                           ; BSR set to: 1
  8026  002184  51C5               	movf	f_open@res& (0+255),w,b
  8027                           
  8028                           ; BSR set to: 1
  8029  002186  0012               	return	
  8030  002188                     l1142:
  8031                           
  8032                           ; BSR set to: 1
  8033                           ;tff.c: 857: memset(dir, 0, 32);
  8034                           
  8035                           ; BSR set to: 1
  8036  002188  C1C6  F060         	movff	f_open@dir,memset@p1
  8037  00218C  C1C7  F061         	movff	f_open@dir+1,memset@p1+1
  8038  002190  0E00               	movlw	0
  8039  002192  0100               	movlb	0	; () banked
  8040  002194  6F63               	movwf	(memset@c+1)& (0+255),b
  8041  002196  0E00               	movlw	0
  8042  002198  6F62               	movwf	memset@c& (0+255),b
  8043  00219A  0E00               	movlw	0
  8044  00219C  6F65               	movwf	(memset@n+1)& (0+255),b
  8045  00219E  0E20               	movlw	32
  8046  0021A0  6F64               	movwf	memset@n& (0+255),b
  8047  0021A2  ECE2  F02B         	call	_memset	;wreg free
  8048                           
  8049                           ;tff.c: 858: memcpy(&dir[0], fn, 8+3);
  8050  0021A6  C1C6  F060         	movff	f_open@dir,memcpy@d1
  8051  0021AA  C1C7  F061         	movff	f_open@dir+1,memcpy@d1+1
  8052  0021AE  0EB3               	movlw	low f_open@fn
  8053  0021B0  0100               	movlb	0	; () banked
  8054  0021B2  6F62               	movwf	memcpy@s1& (0+255),b
  8055  0021B4  0E01               	movlw	high f_open@fn
  8056  0021B6  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  8057  0021B8  0E00               	movlw	0
  8058  0021BA  6F65               	movwf	(memcpy@n+1)& (0+255),b
  8059  0021BC  0E0B               	movlw	11
  8060  0021BE  6F64               	movwf	memcpy@n& (0+255),b
  8061  0021C0  EC5F  F02A         	call	_memcpy	;wreg free
  8062                           
  8063                           ;tff.c: 859: dir[12] = fn[11];
  8064  0021C4  0101               	movlb	1	; () banked
  8065  0021C6  EE20 F00C          	lfsr	2,12
  8066  0021CA  51C6               	movf	f_open@dir& (0+255),w,b
  8067  0021CC  26D9               	addwf	fsr2l,f,c
  8068  0021CE  51C7               	movf	(f_open@dir+1)& (0+255),w,b
  8069  0021D0  22DA               	addwfc	fsr2h,f,c
  8070  0021D2  C1BE  FFDF         	movff	f_open@fn+11,indf2
  8071                           
  8072                           ; BSR set to: 1
  8073                           ;tff.c: 860: mode |= 0x08;
  8074  0021D6  0100               	movlb	0	; () banked
  8075  0021D8  87DB               	bsf	f_open@mode& (0+255),3,b
  8076                           
  8077                           ;tff.c: 861: }
  8078  0021DA  D080               	goto	l1148
  8079  0021DC                     l1140:
  8080                           
  8081                           ; BSR set to: 1
  8082                           ;tff.c: 862: else {
  8083                           ;tff.c: 863: if (mode & 0x04)
  8084  0021DC  0100               	movlb	0	; () banked
  8085  0021DE  A5DB               	btfss	f_open@mode& (0+255),2,b
  8086  0021E0  D002               	goto	l1144
  8087                           
  8088                           ; BSR set to: 0
  8089                           ;tff.c: 864: return FR_EXIST;
  8090  0021E2  0E07               	movlw	7
  8091                           
  8092                           ; BSR set to: 0
  8093  0021E4  0012               	return	
  8094  0021E6                     l1144:
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;tff.c: 865: if (!dir || (dir[11] & (0x01|0x10)))
  8098                           
  8099                           ; BSR set to: 0
  8100  0021E6  0101               	movlb	1	; () banked
  8101  0021E8  51C6               	movf	f_open@dir& (0+255),w,b
  8102  0021EA  11C7               	iorwf	(f_open@dir+1)& (0+255),w,b
  8103  0021EC  B4D8               	btfsc	status,2,c
  8104  0021EE  D00D               	goto	u13180
  8105                           
  8106                           ; BSR set to: 1
  8107  0021F0  EE20 F00B          	lfsr	2,11
  8108  0021F4  51C6               	movf	f_open@dir& (0+255),w,b
  8109  0021F6  26D9               	addwf	fsr2l,f,c
  8110  0021F8  51C7               	movf	(f_open@dir+1)& (0+255),w,b
  8111  0021FA  22DA               	addwfc	fsr2h,f,c
  8112  0021FC  50DF               	movf	indf2,w,c
  8113  0021FE  0100               	movlb	0	; () banked
  8114  002200  6FDC               	movwf	??_f_open& (0+255),b
  8115  002202  0E11               	movlw	17
  8116  002204  17DC               	andwf	??_f_open& (0+255),f,b
  8117  002206  B4D8               	btfsc	status,2,c
  8118  002208  D002               	goto	l1145
  8119  00220A                     u13180:
  8120                           
  8121                           ;tff.c: 866: return FR_DENIED;
  8122                           
  8123                           ; BSR set to: 0
  8124  00220A  0E06               	movlw	6
  8125  00220C  0012               	return	
  8126  00220E                     l1145:
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;tff.c: 867: if (mode & 0x08) {
  8130  00220E  A7DB               	btfss	f_open@mode& (0+255),3,b
  8131  002210  D065               	goto	l1148
  8132                           
  8133                           ; BSR set to: 0
  8134                           ;tff.c: 872: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  8135  002212  0101               	movlb	1	; () banked
  8136  002214  EE20 F01A          	lfsr	2,26
  8137  002218  51C6               	movf	f_open@dir& (0+255),w,b
  8138  00221A  26D9               	addwf	fsr2l,f,c
  8139  00221C  51C7               	movf	(f_open@dir+1)& (0+255),w,b
  8140  00221E  22DA               	addwfc	fsr2h,f,c
  8141  002220  CFDE F1BF          	movff	postinc2,f_open@rs
  8142  002224  CFDD F1C0          	movff	postdec2,f_open@rs+1
  8143                           
  8144                           ;tff.c: 874: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
  8145  002228  EE20 F01A          	lfsr	2,26
  8146  00222C  51C6               	movf	f_open@dir& (0+255),w,b
  8147  00222E  26D9               	addwf	fsr2l,f,c
  8148  002230  51C7               	movf	(f_open@dir+1)& (0+255),w,b
  8149  002232  22DA               	addwfc	fsr2h,f,c
  8150  002234  0E00               	movlw	0
  8151  002236  6EDE               	movwf	postinc2,c
  8152  002238  0E00               	movlw	0
  8153  00223A  6EDD               	movwf	postdec2,c
  8154                           
  8155                           ;tff.c: 875: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
  8156  00223C  EE20 F01C          	lfsr	2,28
  8157  002240  51C6               	movf	f_open@dir& (0+255),w,b
  8158  002242  26D9               	addwf	fsr2l,f,c
  8159  002244  51C7               	movf	(f_open@dir+1)& (0+255),w,b
  8160  002246  22DA               	addwfc	fsr2h,f,c
  8161  002248  6ADE               	clrf	postinc2,c
  8162  00224A  6ADE               	clrf	postinc2,c
  8163  00224C  6ADE               	clrf	postinc2,c
  8164  00224E  6ADD               	clrf	postdec2,c
  8165                           
  8166                           ;tff.c: 876: dj.fs->winflag = 1;
  8167  002250  EE20 F01F          	lfsr	2,31
  8168  002254  51CC               	movf	(f_open@dj+4)& (0+255),w,b
  8169  002256  26D9               	addwf	fsr2l,f,c
  8170  002258  51CD               	movf	(f_open@dj+5)& (0+255),w,b
  8171  00225A  22DA               	addwfc	fsr2h,f,c
  8172  00225C  0E01               	movlw	1
  8173  00225E  6EDF               	movwf	indf2,c
  8174                           
  8175                           ;tff.c: 877: dw = dj.fs->winsect;
  8176  002260  EE20 F004          	lfsr	2,4
  8177  002264  51CC               	movf	(f_open@dj+4)& (0+255),w,b
  8178  002266  26D9               	addwf	fsr2l,f,c
  8179  002268  51CD               	movf	(f_open@dj+5)& (0+255),w,b
  8180  00226A  22DA               	addwfc	fsr2h,f,c
  8181  00226C  CFDE F1C1          	movff	postinc2,f_open@dw
  8182  002270  CFDE F1C2          	movff	postinc2,f_open@dw+1
  8183  002274  CFDE F1C3          	movff	postinc2,f_open@dw+2
  8184  002278  CFDE F1C4          	movff	postinc2,f_open@dw+3
  8185                           
  8186                           ; BSR set to: 1
  8187                           ;tff.c: 878: if (!remove_chain(rs) || !move_window(dw))
  8188  00227C  C1BF  F0B6         	movff	f_open@rs,remove_chain@clust
  8189  002280  C1C0  F0B7         	movff	f_open@rs+1,remove_chain@clust+1
  8190  002284  EC9B  F023         	call	_remove_chain	;wreg free
  8191  002288  0900               	iorlw	0
  8192  00228A  B4D8               	btfsc	status,2,c
  8193  00228C  D00D               	goto	u13210
  8194  00228E  C1C1  F08B         	movff	f_open@dw,move_window@sector
  8195  002292  C1C2  F08C         	movff	f_open@dw+1,move_window@sector+1
  8196  002296  C1C3  F08D         	movff	f_open@dw+2,move_window@sector+2
  8197  00229A  C1C4  F08E         	movff	f_open@dw+3,move_window@sector+3
  8198  00229E  ECDD  F01B         	call	_move_window	;wreg free
  8199  0022A2  0900               	iorlw	0
  8200  0022A4  A4D8               	btfss	status,2,c
  8201  0022A6  D002               	goto	l1149
  8202  0022A8                     u13210:
  8203                           
  8204                           ;tff.c: 879: return FR_RW_ERROR;
  8205  0022A8  0E08               	movlw	8
  8206  0022AA  0012               	return	
  8207  0022AC                     l1149:
  8208                           
  8209                           ;tff.c: 880: dj.fs->last_clust = rs - 1;
  8210  0022AC  0EFF               	movlw	255
  8211  0022AE  0100               	movlb	0	; () banked
  8212  0022B0  6FDC               	movwf	??_f_open& (0+255),b
  8213  0022B2  0EFF               	movlw	255
  8214  0022B4  6FDD               	movwf	(??_f_open+1)& (0+255),b
  8215  0022B6  C1BF  F0DE         	movff	f_open@rs,??_f_open+2
  8216  0022BA  C1C0  F0DF         	movff	f_open@rs+1,??_f_open+3
  8217  0022BE  51DC               	movf	??_f_open& (0+255),w,b
  8218  0022C0  27DE               	addwf	(??_f_open+2)& (0+255),f,b
  8219  0022C2  51DD               	movf	(??_f_open+1)& (0+255),w,b
  8220  0022C4  23DF               	addwfc	(??_f_open+3)& (0+255),f,b
  8221  0022C6  0101               	movlb	1	; () banked
  8222  0022C8  EE20 F018          	lfsr	2,24
  8223  0022CC  51CC               	movf	(f_open@dj+4)& (0+255),w,b
  8224  0022CE  26D9               	addwf	fsr2l,f,c
  8225  0022D0  51CD               	movf	(f_open@dj+5)& (0+255),w,b
  8226  0022D2  22DA               	addwfc	fsr2h,f,c
  8227  0022D4  C0DE  FFDE         	movff	??_f_open+2,postinc2
  8228  0022D8  C0DF  FFDD         	movff	??_f_open+3,postdec2
  8229  0022DC                     l1148:
  8230                           
  8231                           ;tff.c: 881: }
  8232                           ;tff.c: 882: }
  8233                           ;tff.c: 883: if (mode & 0x08) {
  8234                           
  8235                           ; BSR set to: 1
  8236                           
  8237                           ; BSR set to: 1
  8238  0022DC  0100               	movlb	0	; () banked
  8239  0022DE  A7DB               	btfss	f_open@mode& (0+255),3,b
  8240  0022E0  D04F               	goto	l1158
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;tff.c: 884: dir[11] = 0;
  8244  0022E2  0101               	movlb	1	; () banked
  8245  0022E4  EE20 F00B          	lfsr	2,11
  8246  0022E8  51C6               	movf	f_open@dir& (0+255),w,b
  8247  0022EA  26D9               	addwf	fsr2l,f,c
  8248  0022EC  51C7               	movf	(f_open@dir+1)& (0+255),w,b
  8249  0022EE  22DA               	addwfc	fsr2h,f,c
  8250  0022F0  0E00               	movlw	0
  8251  0022F2  6EDF               	movwf	indf2,c
  8252                           
  8253                           ; BSR set to: 1
  8254                           ;tff.c: 885: dw = get_fattime();
  8255  0022F4  EC3C  F021         	call	_get_fattime	;wreg free
  8256  0022F8  C060  F1C1         	movff	?_get_fattime,f_open@dw
  8257  0022FC  C061  F1C2         	movff	?_get_fattime+1,f_open@dw+1
  8258  002300  C062  F1C3         	movff	?_get_fattime+2,f_open@dw+2
  8259  002304  C063  F1C4         	movff	?_get_fattime+3,f_open@dw+3
  8260                           
  8261                           ;tff.c: 886: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
  8262  002308  0101               	movlb	1	; () banked
  8263  00230A  EE20 F00E          	lfsr	2,14
  8264  00230E  51C6               	movf	f_open@dir& (0+255),w,b
  8265  002310  26D9               	addwf	fsr2l,f,c
  8266  002312  51C7               	movf	(f_open@dir+1)& (0+255),w,b
  8267  002314  22DA               	addwfc	fsr2h,f,c
  8268  002316  C1C1  FFDE         	movff	f_open@dw,postinc2
  8269  00231A  C1C2  FFDE         	movff	f_open@dw+1,postinc2
  8270  00231E  C1C3  FFDE         	movff	f_open@dw+2,postinc2
  8271  002322  C1C4  FFDE         	movff	f_open@dw+3,postinc2
  8272                           
  8273                           ; BSR set to: 1
  8274                           ;tff.c: 887: dj.fs->winflag = 1;
  8275  002326  EE20 F01F          	lfsr	2,31
  8276  00232A  51CC               	movf	(f_open@dj+4)& (0+255),w,b
  8277  00232C  26D9               	addwf	fsr2l,f,c
  8278  00232E  51CD               	movf	(f_open@dj+5)& (0+255),w,b
  8279  002330  22DA               	addwfc	fsr2h,f,c
  8280  002332  0E01               	movlw	1
  8281  002334  6EDF               	movwf	indf2,c
  8282                           
  8283                           ; BSR set to: 1
  8284                           ;tff.c: 888: mode |= 0x20;
  8285  002336  0100               	movlb	0	; () banked
  8286  002338  8BDB               	bsf	f_open@mode& (0+255),5,b
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;tff.c: 889: }
  8290                           ;tff.c: 890: }
  8291  00233A  D022               	goto	l1158
  8292  00233C                     l1139:
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;tff.c: 892: else {
  8296                           ;tff.c: 894: if (res != FR_OK) return res;
  8297                           
  8298                           ; BSR set to: 0
  8299  00233C  0101               	movlb	1	; () banked
  8300  00233E  51C5               	movf	f_open@res& (0+255),w,b
  8301  002340  B4D8               	btfsc	status,2,c
  8302  002342  D002               	goto	l1154
  8303                           
  8304                           ; BSR set to: 1
  8305  002344  51C5               	movf	f_open@res& (0+255),w,b
  8306                           
  8307                           ; BSR set to: 1
  8308  002346  0012               	return	
  8309  002348                     l1154:
  8310                           
  8311                           ; BSR set to: 1
  8312                           ;tff.c: 895: if (!dir || (dir[11] & 0x10))
  8313                           
  8314                           ; BSR set to: 1
  8315  002348  51C6               	movf	f_open@dir& (0+255),w,b
  8316  00234A  11C7               	iorwf	(f_open@dir+1)& (0+255),w,b
  8317  00234C  B4D8               	btfsc	status,2,c
  8318  00234E  D008               	goto	u13250
  8319                           
  8320                           ; BSR set to: 1
  8321  002350  EE20 F00B          	lfsr	2,11
  8322  002354  51C6               	movf	f_open@dir& (0+255),w,b
  8323  002356  26D9               	addwf	fsr2l,f,c
  8324  002358  51C7               	movf	(f_open@dir+1)& (0+255),w,b
  8325  00235A  22DA               	addwfc	fsr2h,f,c
  8326  00235C  A8DF               	btfss	indf2,4,c
  8327  00235E  D002               	goto	l1155
  8328  002360                     u13250:
  8329                           
  8330                           ; BSR set to: 1
  8331                           ;tff.c: 896: return FR_NO_FILE;
  8332                           
  8333                           ; BSR set to: 1
  8334  002360  0E02               	movlw	2
  8335                           
  8336                           ; BSR set to: 1
  8337  002362  0012               	return	
  8338  002364                     l1155:
  8339                           
  8340                           ; BSR set to: 1
  8341                           ;tff.c: 898: if ((mode & 0x02) && (dir[11] & 0x01))
  8342  002364  0100               	movlb	0	; () banked
  8343  002366  A3DB               	btfss	f_open@mode& (0+255),1,b
  8344  002368  D00B               	goto	l1158
  8345                           
  8346                           ; BSR set to: 0
  8347  00236A  0101               	movlb	1	; () banked
  8348  00236C  EE20 F00B          	lfsr	2,11
  8349  002370  51C6               	movf	f_open@dir& (0+255),w,b
  8350  002372  26D9               	addwf	fsr2l,f,c
  8351  002374  51C7               	movf	(f_open@dir+1)& (0+255),w,b
  8352  002376  22DA               	addwfc	fsr2h,f,c
  8353  002378  A0DF               	btfss	indf2,0,c
  8354  00237A  D002               	goto	l1158
  8355                           
  8356                           ; BSR set to: 1
  8357                           ;tff.c: 899: return FR_DENIED;
  8358  00237C  0E06               	movlw	6
  8359                           
  8360                           ; BSR set to: 1
  8361  00237E  0012               	return	
  8362  002380                     l1158:
  8363                           
  8364                           ;tff.c: 900: }
  8365                           ;tff.c: 901: fp->dir_sect = dj.fs->winsect;
  8366                           
  8367                           ; BSR set to: 1
  8368                           
  8369                           ; BSR set to: 1
  8370  002380  0101               	movlb	1	; () banked
  8371  002382  EE20 F004          	lfsr	2,4
  8372  002386  51CC               	movf	(f_open@dj+4)& (0+255),w,b
  8373  002388  26D9               	addwf	fsr2l,f,c
  8374  00238A  51CD               	movf	(f_open@dj+5)& (0+255),w,b
  8375  00238C  22DA               	addwfc	fsr2h,f,c
  8376  00238E  0100               	movlb	0	; () banked
  8377  002390  EE10 F016          	lfsr	1,22
  8378  002394  51D7               	movf	f_open@fp& (0+255),w,b
  8379  002396  26E1               	addwf	fsr1l,f,c
  8380  002398  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8381  00239A  22E2               	addwfc	fsr1h,f,c
  8382  00239C  CFDE FFE6          	movff	postinc2,postinc1
  8383  0023A0  CFDE FFE6          	movff	postinc2,postinc1
  8384  0023A4  CFDE FFE6          	movff	postinc2,postinc1
  8385  0023A8  CFDE FFE6          	movff	postinc2,postinc1
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;tff.c: 902: fp->dir_ptr = dir;
  8389  0023AC  EE20 F01A          	lfsr	2,26
  8390  0023B0  51D7               	movf	f_open@fp& (0+255),w,b
  8391  0023B2  26D9               	addwf	fsr2l,f,c
  8392  0023B4  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8393  0023B6  22DA               	addwfc	fsr2h,f,c
  8394  0023B8  C1C6  FFDE         	movff	f_open@dir,postinc2
  8395  0023BC  C1C7  FFDD         	movff	f_open@dir+1,postdec2
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;tff.c: 904: fp->flag = mode;
  8399  0023C0  EE20 F002          	lfsr	2,2
  8400  0023C4  51D7               	movf	f_open@fp& (0+255),w,b
  8401  0023C6  26D9               	addwf	fsr2l,f,c
  8402  0023C8  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8403  0023CA  22DA               	addwfc	fsr2h,f,c
  8404  0023CC  C0DB  FFDF         	movff	f_open@mode,indf2
  8405                           
  8406                           ;tff.c: 905: fp->org_clust =
  8407                           ;tff.c: 909: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  8408  0023D0  0101               	movlb	1	; () banked
  8409  0023D2  EE20 F01A          	lfsr	2,26
  8410  0023D6  51C6               	movf	f_open@dir& (0+255),w,b
  8411  0023D8  26D9               	addwf	fsr2l,f,c
  8412  0023DA  51C7               	movf	(f_open@dir+1)& (0+255),w,b
  8413  0023DC  22DA               	addwfc	fsr2h,f,c
  8414  0023DE  0100               	movlb	0	; () banked
  8415  0023E0  EE10 F00E          	lfsr	1,14
  8416  0023E4  51D7               	movf	f_open@fp& (0+255),w,b
  8417  0023E6  26E1               	addwf	fsr1l,f,c
  8418  0023E8  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8419  0023EA  22E2               	addwfc	fsr1h,f,c
  8420  0023EC  CFDE FFE6          	movff	postinc2,postinc1
  8421  0023F0  CFDD FFE5          	movff	postdec2,postdec1
  8422                           
  8423                           ;tff.c: 910: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
  8424  0023F4  0101               	movlb	1	; () banked
  8425  0023F6  EE20 F01C          	lfsr	2,28
  8426  0023FA  51C6               	movf	f_open@dir& (0+255),w,b
  8427  0023FC  26D9               	addwf	fsr2l,f,c
  8428  0023FE  51C7               	movf	(f_open@dir+1)& (0+255),w,b
  8429  002400  22DA               	addwfc	fsr2h,f,c
  8430  002402  0100               	movlb	0	; () banked
  8431  002404  EE10 F00A          	lfsr	1,10
  8432  002408  51D7               	movf	f_open@fp& (0+255),w,b
  8433  00240A  26E1               	addwf	fsr1l,f,c
  8434  00240C  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8435  00240E  22E2               	addwfc	fsr1h,f,c
  8436  002410  CFDE FFE6          	movff	postinc2,postinc1
  8437  002414  CFDE FFE6          	movff	postinc2,postinc1
  8438  002418  CFDE FFE6          	movff	postinc2,postinc1
  8439  00241C  CFDE FFE6          	movff	postinc2,postinc1
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;tff.c: 911: fp->fptr = 0; fp->csect = 255;
  8443  002420  EE20 F006          	lfsr	2,6
  8444  002424  51D7               	movf	f_open@fp& (0+255),w,b
  8445  002426  26D9               	addwf	fsr2l,f,c
  8446  002428  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8447  00242A  22DA               	addwfc	fsr2h,f,c
  8448  00242C  6ADE               	clrf	postinc2,c
  8449  00242E  6ADE               	clrf	postinc2,c
  8450  002430  6ADE               	clrf	postinc2,c
  8451  002432  6ADD               	clrf	postdec2,c
  8452                           
  8453                           ; BSR set to: 0
  8454  002434  EE20 F003          	lfsr	2,3
  8455  002438  51D7               	movf	f_open@fp& (0+255),w,b
  8456  00243A  26D9               	addwf	fsr2l,f,c
  8457  00243C  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8458  00243E  22DA               	addwfc	fsr2h,f,c
  8459  002440  0EFF               	movlw	255
  8460  002442  6EDF               	movwf	indf2,c
  8461                           
  8462                           ; BSR set to: 0
  8463                           ;tff.c: 912: fp->fs = dj.fs; fp->id = dj.fs->id;
  8464  002444  EE20 F004          	lfsr	2,4
  8465  002448  51D7               	movf	f_open@fp& (0+255),w,b
  8466  00244A  26D9               	addwf	fsr2l,f,c
  8467  00244C  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8468  00244E  22DA               	addwfc	fsr2h,f,c
  8469  002450  C1CC  FFDE         	movff	f_open@dj+4,postinc2
  8470  002454  C1CD  FFDD         	movff	f_open@dj+5,postdec2
  8471                           
  8472                           ; BSR set to: 0
  8473  002458  C1CC  FFD9         	movff	f_open@dj+4,fsr2l
  8474  00245C  C1CD  FFDA         	movff	f_open@dj+5,fsr2h
  8475  002460  C0D7  FFE1         	movff	f_open@fp,fsr1l
  8476  002464  C0D8  FFE2         	movff	f_open@fp+1,fsr1h
  8477  002468  CFDE FFE6          	movff	postinc2,postinc1
  8478  00246C  CFDD FFE5          	movff	postdec2,postdec1
  8479                           
  8480                           ; BSR set to: 0
  8481                           ;tff.c: 914: return FR_OK;
  8482  002470  0E00               	movlw	0
  8483  002472  0012               	return	
  8484  002474                     __end_of_f_open:
  8485                           	opt stack 0
  8486                           tosu	equ	0xFFF
  8487                           tosh	equ	0xFFE
  8488                           tosl	equ	0xFFD
  8489                           pclath	equ	0xFFA
  8490                           tblptru	equ	0xFF8
  8491                           tblptrh	equ	0xFF7
  8492                           tblptrl	equ	0xFF6
  8493                           tablat	equ	0xFF5
  8494                           prodh	equ	0xFF4
  8495                           prodl	equ	0xFF3
  8496                           intcon	equ	0xFF2
  8497                           intcon2	equ	0xFF1
  8498                           intcon3	equ	0xFF0
  8499                           postinc0	equ	0xFEE
  8500                           wreg	equ	0xFE8
  8501                           indf1	equ	0xFE7
  8502                           postinc1	equ	0xFE6
  8503                           postdec1	equ	0xFE5
  8504                           fsr1h	equ	0xFE2
  8505                           fsr1l	equ	0xFE1
  8506                           indf2	equ	0xFDF
  8507                           postinc2	equ	0xFDE
  8508                           postdec2	equ	0xFDD
  8509                           plusw2	equ	0xFDB
  8510                           fsr2h	equ	0xFDA
  8511                           fsr2l	equ	0xFD9
  8512                           status	equ	0xFD8
  8513                           
  8514 ;; *************** function _trace_path *****************
  8515 ;; Defined at:
  8516 ;;		line 501 in file "bibliotecas/tff.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  dj              2   96[BANK0 ] PTR struct _DIR_E
  8519 ;;		 -> f_open@dj(14), 
  8520 ;;  fn              2   98[BANK0 ] PTR unsigned char 
  8521 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  8522 ;;  path            2  100[BANK0 ] PTR const unsigned char 
  8523 ;;		 -> STR_10(13), filename(15), 
  8524 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
  8525 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;  dptr            2  117[BANK0 ] PTR unsigned char 
  8528 ;;		 -> fs.win(512), NULL(0), fs(544), 
  8529 ;;  clust           2  114[BANK0 ] unsigned short 
  8530 ;;  fs              2  112[BANK0 ] PTR struct _FATFS
  8531 ;;		 -> NULL(0), fs(544), 
  8532 ;;  ds              1  116[BANK0 ] unsigned char 
  8533 ;; Return value:  Size  Location     Type
  8534 ;;                  1    wreg      enum E155
  8535 ;; Registers used:
  8536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8537 ;; Tracked objects:
  8538 ;;		On entry : 0/0
  8539 ;;		On exit  : 0/0
  8540 ;;		Unchanged: 0/0
  8541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8542 ;;      Params:         0       8       0       0       0       0       0       0       0
  8543 ;;      Locals:         0      11       0       0       0       0       0       0       0
  8544 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8545 ;;      Totals:         0      23       0       0       0       0       0       0       0
  8546 ;;Total ram usage:       23 bytes
  8547 ;; Hardware stack levels used:    1
  8548 ;; Hardware stack levels required when called:   11
  8549 ;; This function calls:
  8550 ;;		_clust2sect
  8551 ;;		_make_dirfile
  8552 ;;		_memcmp
  8553 ;;		_move_window
  8554 ;;		_next_dir_entry
  8555 ;; This function is called by:
  8556 ;;		_f_open
  8557 ;;		_f_opendir
  8558 ;; This function uses a non-reentrant model
  8559 ;;
  8560                           
  8561                           	psect	text30
  8562  0027BA                     __ptext30:
  8563                           	opt stack 0
  8564  0027BA                     _trace_path:
  8565                           	opt stack 15
  8566                           
  8567                           ;tff.c: 508: CLUST clust;
  8568                           ;tff.c: 509: char ds;
  8569                           ;tff.c: 510: BYTE *dptr = (0);
  8570                           
  8571                           ;incstack = 0
  8572  0027BA  0E00               	movlw	0
  8573  0027BC  0100               	movlb	0	; () banked
  8574  0027BE  6FD5               	movwf	trace_path@dptr& (0+255),b
  8575  0027C0  0E00               	movlw	0
  8576  0027C2  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
  8577                           
  8578                           ;tff.c: 511: FATFS *fs = FatFs;
  8579  0027C4  C0FD  F0D0         	movff	_FatFs,trace_path@fs
  8580  0027C8  C0FE  F0D1         	movff	_FatFs+1,trace_path@fs+1
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;tff.c: 514: dj->fs = fs;
  8584  0027CC  EE20 F004          	lfsr	2,4
  8585  0027D0  51C0               	movf	trace_path@dj& (0+255),w,b
  8586  0027D2  26D9               	addwf	fsr2l,f,c
  8587  0027D4  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8588  0027D6  22DA               	addwfc	fsr2h,f,c
  8589  0027D8  C0D0  FFDE         	movff	trace_path@fs,postinc2
  8590  0027DC  C0D1  FFDD         	movff	trace_path@fs+1,postdec2
  8591                           
  8592                           ; BSR set to: 0
  8593                           ;tff.c: 515: clust = fs->dirbase;
  8594  0027E0  EE20 F00C          	lfsr	2,12
  8595  0027E4  51D0               	movf	trace_path@fs& (0+255),w,b
  8596  0027E6  26D9               	addwf	fsr2l,f,c
  8597  0027E8  51D1               	movf	(trace_path@fs+1)& (0+255),w,b
  8598  0027EA  22DA               	addwfc	fsr2h,f,c
  8599  0027EC  CFDE F0D2          	movff	postinc2,trace_path@clust
  8600  0027F0  CFDD F0D3          	movff	postdec2,trace_path@clust+1
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;tff.c: 522: {
  8604                           ;tff.c: 523: dj->clust = dj->sclust = 0;
  8605  0027F4  EE20 F006          	lfsr	2,6
  8606  0027F8  51C0               	movf	trace_path@dj& (0+255),w,b
  8607  0027FA  26D9               	addwf	fsr2l,f,c
  8608  0027FC  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8609  0027FE  22DA               	addwfc	fsr2h,f,c
  8610  002800  0E00               	movlw	0
  8611  002802  6EDE               	movwf	postinc2,c
  8612  002804  0E00               	movlw	0
  8613  002806  6EDD               	movwf	postdec2,c
  8614  002808  EE10 F008          	lfsr	1,8
  8615  00280C  51C0               	movf	trace_path@dj& (0+255),w,b
  8616  00280E  26E1               	addwf	fsr1l,f,c
  8617  002810  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8618  002812  22E2               	addwfc	fsr1h,f,c
  8619  002814  CFDE FFE6          	movff	postinc2,postinc1
  8620  002818  CFDD FFE5          	movff	postdec2,postdec1
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;tff.c: 524: dj->sect = clust;
  8624  00281C  51D2               	movf	trace_path@clust& (0+255),w,b
  8625  00281E  6FC8               	movwf	??_trace_path& (0+255),b
  8626  002820  51D3               	movf	(trace_path@clust+1)& (0+255),w,b
  8627  002822  6FC9               	movwf	(??_trace_path+1)& (0+255),b
  8628  002824  6BCA               	clrf	(??_trace_path+2)& (0+255),b
  8629  002826  6BCB               	clrf	(??_trace_path+3)& (0+255),b
  8630  002828  EE20 F00A          	lfsr	2,10
  8631  00282C  51C0               	movf	trace_path@dj& (0+255),w,b
  8632  00282E  26D9               	addwf	fsr2l,f,c
  8633  002830  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8634  002832  22DA               	addwfc	fsr2h,f,c
  8635  002834  C0C8  FFDE         	movff	??_trace_path,postinc2
  8636  002838  C0C9  FFDE         	movff	??_trace_path+1,postinc2
  8637  00283C  C0CA  FFDE         	movff	??_trace_path+2,postinc2
  8638  002840  C0CB  FFDE         	movff	??_trace_path+3,postinc2
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;tff.c: 525: }
  8642                           ;tff.c: 526: dj->index = 0;
  8643  002844  EE20 F002          	lfsr	2,2
  8644  002848  51C0               	movf	trace_path@dj& (0+255),w,b
  8645  00284A  26D9               	addwf	fsr2l,f,c
  8646  00284C  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8647  00284E  22DA               	addwfc	fsr2h,f,c
  8648  002850  0E00               	movlw	0
  8649  002852  6EDE               	movwf	postinc2,c
  8650  002854  0E00               	movlw	0
  8651  002856  6EDD               	movwf	postdec2,c
  8652                           
  8653                           ; BSR set to: 0
  8654                           ;tff.c: 528: if (*path == '\0') {
  8655  002858  C0C4  FFF6         	movff	trace_path@path,tblptrl
  8656  00285C  C0C5  FFF7         	movff	trace_path@path+1,tblptrh
  8657  002860  6AF8               	clrf	tblptru,c
  8658  002862  0E07               	movlw	(high __ramtop+-1)
  8659  002864  64F7               	cpfsgt	tblptrh,c
  8660  002866  D003               	bra	u12347
  8661  002868  0008               	tblrd		*
  8662  00286A  50F5               	movf	tablat,w,c
  8663  00286C  D005               	bra	u12340
  8664  00286E                     u12347:
  8665  00286E  CFF6 FFE9          	movff	tblptrl,fsr0l
  8666  002872  CFF7 FFEA          	movff	tblptrh,fsr0h
  8667  002876  50EF               	movf	indf0,w,c
  8668  002878                     u12340:
  8669  002878  0900               	iorlw	0
  8670  00287A  A4D8               	btfss	status,2,c
  8671  00287C  D00A               	goto	l1049
  8672                           
  8673                           ;tff.c: 529: *dir = (0); return FR_OK;
  8674  00287E  C0C6  FFD9         	movff	trace_path@dir,fsr2l
  8675  002882  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
  8676  002886  0E00               	movlw	0
  8677  002888  6EDE               	movwf	postinc2,c
  8678  00288A  0E00               	movlw	0
  8679  00288C  6EDD               	movwf	postdec2,c
  8680  00288E  0E00               	movlw	0
  8681  002890  0012               	return	
  8682  002892                     l1049:
  8683                           
  8684                           ;tff.c: 533: ds = make_dirfile(&path, fn);
  8685                           
  8686                           ;tff.c: 530: }
  8687                           ;tff.c: 532: for (;;) {
  8688  002892  0EC4               	movlw	low trace_path@path
  8689  002894  0100               	movlb	0	; () banked
  8690  002896  6F66               	movwf	make_dirfile@path& (0+255),b
  8691  002898  0E00               	movlw	high trace_path@path
  8692  00289A  6F67               	movwf	(make_dirfile@path+1)& (0+255),b
  8693  00289C  C0C2  F068         	movff	trace_path@fn,make_dirfile@dirname
  8694  0028A0  C0C3  F069         	movff	trace_path@fn+1,make_dirfile@dirname+1
  8695  0028A4  EC7C  F01D         	call	_make_dirfile	;wreg free
  8696  0028A8  0100               	movlb	0	; () banked
  8697  0028AA  6FD4               	movwf	trace_path@ds& (0+255),b
  8698                           
  8699                           ; BSR set to: 0
  8700                           ;tff.c: 534: if (ds == 1) return FR_INVALID_NAME;
  8701  0028AC  05D4               	decf	trace_path@ds& (0+255),w,b
  8702  0028AE  A4D8               	btfss	status,2,c
  8703  0028B0  D002               	goto	l1052
  8704                           
  8705                           ; BSR set to: 0
  8706  0028B2  0E04               	movlw	4
  8707                           
  8708                           ; BSR set to: 0
  8709  0028B4  0012               	return	
  8710  0028B6                     l1052:
  8711                           
  8712                           ;tff.c: 536: if (!move_window(dj->sect)) return FR_RW_ERROR;
  8713                           
  8714                           ; BSR set to: 0
  8715                           
  8716                           ;tff.c: 535: for (;;) {
  8717                           
  8718                           ; BSR set to: 0
  8719  0028B6  0100               	movlb	0	; () banked
  8720  0028B8  EE20 F00A          	lfsr	2,10
  8721  0028BC  51C0               	movf	trace_path@dj& (0+255),w,b
  8722  0028BE  26D9               	addwf	fsr2l,f,c
  8723  0028C0  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8724  0028C2  22DA               	addwfc	fsr2h,f,c
  8725  0028C4  CFDE F08B          	movff	postinc2,move_window@sector
  8726  0028C8  CFDE F08C          	movff	postinc2,move_window@sector+1
  8727  0028CC  CFDE F08D          	movff	postinc2,move_window@sector+2
  8728  0028D0  CFDE F08E          	movff	postinc2,move_window@sector+3
  8729  0028D4  ECDD  F01B         	call	_move_window	;wreg free
  8730  0028D8  0900               	iorlw	0
  8731  0028DA  A4D8               	btfss	status,2,c
  8732  0028DC  D002               	goto	l1054
  8733  0028DE  0E08               	movlw	8
  8734  0028E0  0012               	return	
  8735  0028E2                     l1054:
  8736                           
  8737                           ;tff.c: 537: dptr = &fs->win[(dj->index & 15) * 32];
  8738  0028E2  0100               	movlb	0	; () banked
  8739  0028E4  EE20 F002          	lfsr	2,2
  8740  0028E8  51C0               	movf	trace_path@dj& (0+255),w,b
  8741  0028EA  26D9               	addwf	fsr2l,f,c
  8742  0028EC  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8743  0028EE  22DA               	addwfc	fsr2h,f,c
  8744  0028F0  CFDE F0C8          	movff	postinc2,??_trace_path
  8745  0028F4  CFDD F0C9          	movff	postdec2,??_trace_path+1
  8746  0028F8  0E0F               	movlw	15
  8747  0028FA  17C8               	andwf	??_trace_path& (0+255),f,b
  8748  0028FC  0E00               	movlw	0
  8749  0028FE  17C9               	andwf	(??_trace_path+1)& (0+255),f,b
  8750  002900  0E05               	movlw	5
  8751  002902                     u12385:
  8752  002902  90D8               	bcf	status,0,c
  8753  002904  37C8               	rlcf	??_trace_path& (0+255),f,b
  8754  002906  37C9               	rlcf	(??_trace_path+1)& (0+255),f,b
  8755  002908  2EE8               	decfsz	wreg,f,c
  8756  00290A  D7FB               	goto	u12385
  8757  00290C  0E20               	movlw	32
  8758  00290E  27C8               	addwf	??_trace_path& (0+255),f,b
  8759  002910  0E00               	movlw	0
  8760  002912  23C9               	addwfc	(??_trace_path+1)& (0+255),f,b
  8761  002914  51C8               	movf	??_trace_path& (0+255),w,b
  8762  002916  25D0               	addwf	trace_path@fs& (0+255),w,b
  8763  002918  6FD5               	movwf	trace_path@dptr& (0+255),b
  8764  00291A  51C9               	movf	(??_trace_path+1)& (0+255),w,b
  8765  00291C  21D1               	addwfc	(trace_path@fs+1)& (0+255),w,b
  8766  00291E  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;tff.c: 538: if (dptr[0] == 0)
  8770  002920  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
  8771  002924  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
  8772  002928  50DF               	movf	indf2,w,c
  8773  00292A  A4D8               	btfss	status,2,c
  8774  00292C  D00D               	goto	l1055
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;tff.c: 539: return !ds ? FR_NO_FILE : FR_NO_PATH;
  8778  00292E  51D4               	movf	trace_path@ds& (0+255),w,b
  8779  002930  B4D8               	btfsc	status,2,c
  8780  002932  D004               	goto	l1057
  8781                           
  8782                           ; BSR set to: 0
  8783  002934  0E00               	movlw	0
  8784  002936  6FCD               	movwf	(_trace_path$2103+1)& (0+255),b
  8785  002938  0E03               	movlw	3
  8786  00293A  D003               	goto	L6
  8787  00293C                     l1057:
  8788                           
  8789                           ; BSR set to: 0
  8790                           
  8791                           ; BSR set to: 0
  8792  00293C  0E00               	movlw	0
  8793  00293E  6FCD               	movwf	(_trace_path$2103+1)& (0+255),b
  8794  002940  0E02               	movlw	2
  8795  002942                     L6:
  8796  002942  6FCC               	movwf	_trace_path$2103& (0+255),b
  8797                           
  8798                           ; BSR set to: 0
  8799  002944  51CC               	movf	_trace_path$2103& (0+255),w,b
  8800                           
  8801                           ; BSR set to: 0
  8802  002946  0012               	return	
  8803  002948                     l1055:
  8804                           
  8805                           ; BSR set to: 0
  8806                           ;tff.c: 540: if (dptr[0] != 0xE5
  8807                           ;tff.c: 541: && !(dptr[11] & 0x08)
  8808                           ;tff.c: 542: && !memcmp(&dptr[0], fn, 8+3) ) break;
  8809                           
  8810                           ; BSR set to: 0
  8811  002948  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
  8812  00294C  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
  8813  002950  0EE5               	movlw	229
  8814  002952  18DE               	xorwf	postinc2,w,c
  8815  002954  B4D8               	btfsc	status,2,c
  8816  002956  D01B               	goto	l1060
  8817                           
  8818                           ; BSR set to: 0
  8819  002958  EE20 F00B          	lfsr	2,11
  8820  00295C  51D5               	movf	trace_path@dptr& (0+255),w,b
  8821  00295E  26D9               	addwf	fsr2l,f,c
  8822  002960  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  8823  002962  22DA               	addwfc	fsr2h,f,c
  8824  002964  B6DF               	btfsc	indf2,3,c
  8825  002966  D013               	goto	l1060
  8826                           
  8827                           ; BSR set to: 0
  8828  002968  C0D5  F060         	movff	trace_path@dptr,memcmp@s1
  8829  00296C  C0D6  F061         	movff	trace_path@dptr+1,memcmp@s1+1
  8830  002970  C0C2  F062         	movff	trace_path@fn,memcmp@s2
  8831  002974  C0C3  F063         	movff	trace_path@fn+1,memcmp@s2+1
  8832  002978  0E00               	movlw	0
  8833  00297A  6F65               	movwf	(memcmp@n+1)& (0+255),b
  8834  00297C  0E0B               	movlw	11
  8835  00297E  6F64               	movwf	memcmp@n& (0+255),b
  8836  002980  EC92  F024         	call	_memcmp	;wreg free
  8837  002984  0100               	movlb	0	; () banked
  8838  002986  5160               	movf	?_memcmp& (0+255),w,b
  8839  002988  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
  8840  00298A  B4D8               	btfsc	status,2,c
  8841  00298C  D017               	goto	l1061
  8842  00298E                     l1060:
  8843                           
  8844                           ; BSR set to: 0
  8845                           ;tff.c: 543: if (!next_dir_entry(dj))
  8846                           
  8847                           ; BSR set to: 0
  8848  00298E  C0C0  F0B3         	movff	trace_path@dj,next_dir_entry@dj
  8849  002992  C0C1  F0B4         	movff	trace_path@dj+1,next_dir_entry@dj+1
  8850  002996  ECB8  F01C         	call	_next_dir_entry	;wreg free
  8851  00299A  0900               	iorlw	0
  8852  00299C  A4D8               	btfss	status,2,c
  8853  00299E  D78B               	goto	l1052
  8854                           
  8855                           ;tff.c: 544: return !ds ? FR_NO_FILE : FR_NO_PATH;
  8856  0029A0  0100               	movlb	0	; () banked
  8857  0029A2  51D4               	movf	trace_path@ds& (0+255),w,b
  8858  0029A4  B4D8               	btfsc	status,2,c
  8859  0029A6  D004               	goto	l1064
  8860                           
  8861                           ; BSR set to: 0
  8862  0029A8  0E00               	movlw	0
  8863  0029AA  6FCF               	movwf	(_trace_path$2105+1)& (0+255),b
  8864  0029AC  0E03               	movlw	3
  8865  0029AE  D003               	goto	L7
  8866  0029B0                     l1064:
  8867                           
  8868                           ; BSR set to: 0
  8869                           
  8870                           ; BSR set to: 0
  8871  0029B0  0E00               	movlw	0
  8872  0029B2  6FCF               	movwf	(_trace_path$2105+1)& (0+255),b
  8873  0029B4  0E02               	movlw	2
  8874  0029B6                     L7:
  8875  0029B6  6FCE               	movwf	_trace_path$2105& (0+255),b
  8876                           
  8877                           ; BSR set to: 0
  8878  0029B8  51CE               	movf	_trace_path$2105& (0+255),w,b
  8879                           
  8880                           ; BSR set to: 0
  8881  0029BA  0012               	return	
  8882  0029BC                     l1061:
  8883                           
  8884                           ; BSR set to: 0
  8885                           ;tff.c: 546: if (!ds) { *dir = dptr; return FR_OK; }
  8886                           
  8887                           ; BSR set to: 0
  8888  0029BC  51D4               	movf	trace_path@ds& (0+255),w,b
  8889  0029BE  A4D8               	btfss	status,2,c
  8890  0029C0  D00A               	goto	l1067
  8891                           
  8892                           ; BSR set to: 0
  8893  0029C2  C0C6  FFD9         	movff	trace_path@dir,fsr2l
  8894  0029C6  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
  8895  0029CA  C0D5  FFDE         	movff	trace_path@dptr,postinc2
  8896  0029CE  C0D6  FFDD         	movff	trace_path@dptr+1,postdec2
  8897                           
  8898                           ; BSR set to: 0
  8899  0029D2  0E00               	movlw	0
  8900                           
  8901                           ; BSR set to: 0
  8902  0029D4  0012               	return	
  8903  0029D6                     l1067:
  8904                           
  8905                           ; BSR set to: 0
  8906                           ;tff.c: 547: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
  8907                           
  8908                           ; BSR set to: 0
  8909  0029D6  EE20 F00B          	lfsr	2,11
  8910  0029DA  51D5               	movf	trace_path@dptr& (0+255),w,b
  8911  0029DC  26D9               	addwf	fsr2l,f,c
  8912  0029DE  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  8913  0029E0  22DA               	addwfc	fsr2h,f,c
  8914  0029E2  B8DF               	btfsc	indf2,4,c
  8915  0029E4  D002               	goto	l1068
  8916                           
  8917                           ; BSR set to: 0
  8918  0029E6  0E03               	movlw	3
  8919                           
  8920                           ; BSR set to: 0
  8921  0029E8  0012               	return	
  8922  0029EA                     l1068:
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;tff.c: 548: clust =
  8926                           ;tff.c: 552: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
  8927                           
  8928                           ; BSR set to: 0
  8929  0029EA  EE20 F01A          	lfsr	2,26
  8930  0029EE  51D5               	movf	trace_path@dptr& (0+255),w,b
  8931  0029F0  26D9               	addwf	fsr2l,f,c
  8932  0029F2  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  8933  0029F4  22DA               	addwfc	fsr2h,f,c
  8934  0029F6  CFDE F0D2          	movff	postinc2,trace_path@clust
  8935  0029FA  CFDD F0D3          	movff	postdec2,trace_path@clust+1
  8936                           
  8937                           ; BSR set to: 0
  8938                           ;tff.c: 553: dj->clust = dj->sclust = clust;
  8939  0029FE  EE20 F006          	lfsr	2,6
  8940  002A02  51C0               	movf	trace_path@dj& (0+255),w,b
  8941  002A04  26D9               	addwf	fsr2l,f,c
  8942  002A06  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8943  002A08  22DA               	addwfc	fsr2h,f,c
  8944  002A0A  C0D2  FFDE         	movff	trace_path@clust,postinc2
  8945  002A0E  C0D3  FFDD         	movff	trace_path@clust+1,postdec2
  8946  002A12  EE10 F008          	lfsr	1,8
  8947  002A16  51C0               	movf	trace_path@dj& (0+255),w,b
  8948  002A18  26E1               	addwf	fsr1l,f,c
  8949  002A1A  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8950  002A1C  22E2               	addwfc	fsr1h,f,c
  8951  002A1E  CFDE FFE6          	movff	postinc2,postinc1
  8952  002A22  CFDD FFE5          	movff	postdec2,postdec1
  8953                           
  8954                           ; BSR set to: 0
  8955                           ;tff.c: 554: dj->sect = clust2sect(clust);
  8956  002A26  C0D2  F06C         	movff	trace_path@clust,clust2sect@clust
  8957  002A2A  C0D3  F06D         	movff	trace_path@clust+1,clust2sect@clust+1
  8958  002A2E  EC93  F022         	call	_clust2sect	;wreg free
  8959  002A32  0100               	movlb	0	; () banked
  8960  002A34  EE20 F00A          	lfsr	2,10
  8961  002A38  51C0               	movf	trace_path@dj& (0+255),w,b
  8962  002A3A  26D9               	addwf	fsr2l,f,c
  8963  002A3C  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8964  002A3E  22DA               	addwfc	fsr2h,f,c
  8965  002A40  C06C  FFDE         	movff	?_clust2sect,postinc2
  8966  002A44  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  8967  002A48  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  8968  002A4C  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  8969                           
  8970                           ; BSR set to: 0
  8971                           ;tff.c: 555: dj->index = 2;
  8972  002A50  EE20 F002          	lfsr	2,2
  8973  002A54  51C0               	movf	trace_path@dj& (0+255),w,b
  8974  002A56  26D9               	addwf	fsr2l,f,c
  8975  002A58  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8976  002A5A  22DA               	addwfc	fsr2h,f,c
  8977  002A5C  0E02               	movlw	2
  8978  002A5E  6EDE               	movwf	postinc2,c
  8979  002A60  0E00               	movlw	0
  8980  002A62  6EDD               	movwf	postdec2,c
  8981                           
  8982                           ;tff.c: 556: }
  8983  002A64  D716               	goto	l1049
  8984  002A66                     __end_of_trace_path:
  8985                           	opt stack 0
  8986                           tosu	equ	0xFFF
  8987                           tosh	equ	0xFFE
  8988                           tosl	equ	0xFFD
  8989                           pclath	equ	0xFFA
  8990                           tblptru	equ	0xFF8
  8991                           tblptrh	equ	0xFF7
  8992                           tblptrl	equ	0xFF6
  8993                           tablat	equ	0xFF5
  8994                           prodh	equ	0xFF4
  8995                           prodl	equ	0xFF3
  8996                           intcon	equ	0xFF2
  8997                           intcon2	equ	0xFF1
  8998                           intcon3	equ	0xFF0
  8999                           indf0	equ	0xFEF
  9000                           postinc0	equ	0xFEE
  9001                           fsr0h	equ	0xFEA
  9002                           fsr0l	equ	0xFE9
  9003                           wreg	equ	0xFE8
  9004                           indf1	equ	0xFE7
  9005                           postinc1	equ	0xFE6
  9006                           postdec1	equ	0xFE5
  9007                           fsr1h	equ	0xFE2
  9008                           fsr1l	equ	0xFE1
  9009                           indf2	equ	0xFDF
  9010                           postinc2	equ	0xFDE
  9011                           postdec2	equ	0xFDD
  9012                           plusw2	equ	0xFDB
  9013                           fsr2h	equ	0xFDA
  9014                           fsr2l	equ	0xFD9
  9015                           status	equ	0xFD8
  9016                           
  9017 ;; *************** function _make_dirfile *****************
  9018 ;; Defined at:
  9019 ;;		line 438 in file "bibliotecas/tff.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  path            2    6[BANK0 ] PTR PTR const unsigned c
  9022 ;;		 -> trace_path@path(2), 
  9023 ;;  dirname         2    8[BANK0 ] PTR unsigned char 
  9024 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;  c               1   18[BANK0 ] unsigned char 
  9027 ;;  n               1   17[BANK0 ] unsigned char 
  9028 ;;  a               1   16[BANK0 ] unsigned char 
  9029 ;;  t               1   15[BANK0 ] unsigned char 
  9030 ;;  b               1   14[BANK0 ] unsigned char 
  9031 ;; Return value:  Size  Location     Type
  9032 ;;                  1    wreg      unsigned char 
  9033 ;; Registers used:
  9034 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9035 ;; Tracked objects:
  9036 ;;		On entry : 0/0
  9037 ;;		On exit  : 0/0
  9038 ;;		Unchanged: 0/0
  9039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9040 ;;      Params:         0       4       0       0       0       0       0       0       0
  9041 ;;      Locals:         0       7       0       0       0       0       0       0       0
  9042 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9043 ;;      Totals:         0      13       0       0       0       0       0       0       0
  9044 ;;Total ram usage:       13 bytes
  9045 ;; Hardware stack levels used:    1
  9046 ;; Hardware stack levels required when called:    4
  9047 ;; This function calls:
  9048 ;;		_memset
  9049 ;; This function is called by:
  9050 ;;		_trace_path
  9051 ;; This function uses a non-reentrant model
  9052 ;;
  9053                           
  9054                           	psect	text31
  9055  003AF8                     __ptext31:
  9056                           	opt stack 0
  9057  003AF8                     _make_dirfile:
  9058                           	opt stack 21
  9059                           
  9060                           ;tff.c: 443: BYTE n, t, c, a, b;
  9061                           ;tff.c: 446: memset(dirname, ' ', 8+3);
  9062                           
  9063                           ;incstack = 0
  9064  003AF8  C068  F060         	movff	make_dirfile@dirname,memset@p1
  9065  003AFC  C069  F061         	movff	make_dirfile@dirname+1,memset@p1+1
  9066  003B00  0E00               	movlw	0
  9067  003B02  0100               	movlb	0	; () banked
  9068  003B04  6F63               	movwf	(memset@c+1)& (0+255),b
  9069  003B06  0E20               	movlw	32
  9070  003B08  6F62               	movwf	memset@c& (0+255),b
  9071  003B0A  0E00               	movlw	0
  9072  003B0C  6F65               	movwf	(memset@n+1)& (0+255),b
  9073  003B0E  0E0B               	movlw	11
  9074  003B10  6F64               	movwf	memset@n& (0+255),b
  9075  003B12  ECE2  F02B         	call	_memset	;wreg free
  9076                           
  9077                           ;tff.c: 447: a = 0; b = 0x18;
  9078  003B16  0E00               	movlw	0
  9079  003B18  0100               	movlb	0	; () banked
  9080  003B1A  6F70               	movwf	make_dirfile@a& (0+255),b
  9081                           
  9082                           ; BSR set to: 0
  9083  003B1C  0E18               	movlw	24
  9084  003B1E  6F6E               	movwf	make_dirfile@b& (0+255),b
  9085                           
  9086                           ; BSR set to: 0
  9087                           ;tff.c: 448: n = 0; t = 8;
  9088  003B20  0E00               	movlw	0
  9089  003B22  6F71               	movwf	make_dirfile@n& (0+255),b
  9090                           
  9091                           ; BSR set to: 0
  9092  003B24  0E08               	movlw	8
  9093  003B26  6F6F               	movwf	make_dirfile@t& (0+255),b
  9094  003B28                     
  9095                           ; BSR set to: 0
  9096                           ;tff.c: 450: c = *(*path)++;
  9097                           
  9098                           ; BSR set to: 0
  9099  003B28  C066  FFD9         	movff	make_dirfile@path,fsr2l
  9100  003B2C  C067  FFDA         	movff	make_dirfile@path+1,fsr2h
  9101  003B30  CFDF F06A          	movff	indf2,??_make_dirfile
  9102  003B34  0E01               	movlw	1
  9103  003B36  26DE               	addwf	postinc2,f,c
  9104  003B38  CFDF F06B          	movff	indf2,??_make_dirfile+1
  9105  003B3C  0E00               	movlw	0
  9106  003B3E  22DD               	addwfc	postdec2,f,c
  9107  003B40  C06A  FFF6         	movff	??_make_dirfile,tblptrl
  9108  003B44  C06B  FFF7         	movff	??_make_dirfile+1,tblptrh
  9109  003B48  6AF8               	clrf	tblptru,c
  9110  003B4A  0E07               	movlw	(high __ramtop+-1)
  9111  003B4C  64F7               	cpfsgt	tblptrh,c
  9112  003B4E  D003               	bra	u11697
  9113  003B50  0008               	tblrd		*
  9114  003B52  50F5               	movf	tablat,w,c
  9115  003B54  D005               	bra	u11690
  9116  003B56                     u11697:
  9117  003B56  CFF6 FFE9          	movff	tblptrl,fsr0l
  9118  003B5A  CFF7 FFEA          	movff	tblptrh,fsr0h
  9119  003B5E  50EF               	movf	indf0,w,c
  9120  003B60                     u11690:
  9121  003B60  0100               	movlb	0	; () banked
  9122  003B62  6F72               	movwf	make_dirfile@c& (0+255),b
  9123                           
  9124                           ; BSR set to: 0
  9125                           ;tff.c: 451: if (c == '\0' || c == '/') {
  9126  003B64  5172               	movf	make_dirfile@c& (0+255),w,b
  9127  003B66  B4D8               	btfsc	status,2,c
  9128  003B68  D004               	goto	u11710
  9129                           
  9130                           ; BSR set to: 0
  9131  003B6A  0E2F               	movlw	47
  9132  003B6C  1972               	xorwf	make_dirfile@c& (0+255),w,b
  9133  003B6E  A4D8               	btfss	status,2,c
  9134  003B70  D013               	goto	l1003
  9135  003B72                     u11710:
  9136                           
  9137                           ; BSR set to: 0
  9138                           ;tff.c: 452: if (n == 0) break;
  9139                           
  9140                           ; BSR set to: 0
  9141  003B72  5171               	movf	make_dirfile@n& (0+255),w,b
  9142  003B74  B4D8               	btfsc	status,2,c
  9143  003B76  D075               	goto	l1007
  9144                           
  9145                           ; BSR set to: 0
  9146                           
  9147                           ; BSR set to: 0
  9148                           
  9149                           ; BSR set to: 0
  9150                           
  9151                           ; BSR set to: 0
  9152                           ;tff.c: 453: dirname[11] = 1 ? (a & b) : 0;
  9153                           
  9154                           ; BSR set to: 0
  9155  003B78  5170               	movf	make_dirfile@a& (0+255),w,b
  9156  003B7A  156E               	andwf	make_dirfile@b& (0+255),w,b
  9157  003B7C  6F6A               	movwf	??_make_dirfile& (0+255),b
  9158  003B7E  516A               	movf	??_make_dirfile& (0+255),w,b
  9159  003B80  6F6C               	movwf	_make_dirfile$2056& (0+255),b
  9160  003B82  6B6D               	clrf	(_make_dirfile$2056+1)& (0+255),b
  9161                           
  9162                           ; BSR set to: 0
  9163                           
  9164                           ; BSR set to: 0
  9165  003B84  EE20 F00B          	lfsr	2,11
  9166  003B88  5168               	movf	make_dirfile@dirname& (0+255),w,b
  9167  003B8A  26D9               	addwf	fsr2l,f,c
  9168  003B8C  5169               	movf	(make_dirfile@dirname+1)& (0+255),w,b
  9169  003B8E  22DA               	addwfc	fsr2h,f,c
  9170  003B90  C06C  FFDF         	movff	_make_dirfile$2056,indf2
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;tff.c: 454: return c;
  9174  003B94  5172               	movf	make_dirfile@c& (0+255),w,b
  9175                           
  9176                           ; BSR set to: 0
  9177  003B96  0012               	return	
  9178  003B98                     l1003:
  9179                           
  9180                           ; BSR set to: 0
  9181                           ;tff.c: 455: }
  9182                           ;tff.c: 456: if (c <= ' ' || c == 0x7F) break;
  9183                           
  9184                           ; BSR set to: 0
  9185  003B98  0E20               	movlw	32
  9186  003B9A  6572               	cpfsgt	make_dirfile@c& (0+255),b
  9187  003B9C  D062               	goto	l1007
  9188                           
  9189                           ; BSR set to: 0
  9190  003B9E  0E7F               	movlw	127
  9191  003BA0  1972               	xorwf	make_dirfile@c& (0+255),w,b
  9192  003BA2  B4D8               	btfsc	status,2,c
  9193  003BA4  D05E               	goto	l1007
  9194                           
  9195                           ; BSR set to: 0
  9196                           ;tff.c: 457: if (c == '.') {
  9197                           
  9198                           ; BSR set to: 0
  9199                           
  9200                           ; BSR set to: 0
  9201  003BA6  0E2E               	movlw	46
  9202  003BA8  1972               	xorwf	make_dirfile@c& (0+255),w,b
  9203  003BAA  A4D8               	btfss	status,2,c
  9204  003BAC  D00C               	goto	l1019
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;tff.c: 458: if (!(a & 1) && n >= 1 && n <= 8) {
  9208  003BAE  B170               	btfsc	make_dirfile@a& (0+255),0,b
  9209  003BB0  D058               	goto	l1007
  9210                           
  9211                           ; BSR set to: 0
  9212  003BB2  5171               	movf	make_dirfile@n& (0+255),w,b
  9213  003BB4  B4D8               	btfsc	status,2,c
  9214  003BB6  D055               	goto	l1007
  9215                           
  9216                           ; BSR set to: 0
  9217  003BB8  0E09               	movlw	9
  9218  003BBA  6171               	cpfslt	make_dirfile@n& (0+255),b
  9219  003BBC  D052               	goto	l1007
  9220                           
  9221                           ; BSR set to: 0
  9222                           ;tff.c: 459: n = 8; t = 11; continue;
  9223  003BBE  0E08               	movlw	8
  9224  003BC0  6F71               	movwf	make_dirfile@n& (0+255),b
  9225  003BC2  0E0B               	movlw	11
  9226  003BC4  D7B0               	goto	L8
  9227  003BC6                     l1019:
  9228                           
  9229                           ; BSR set to: 0
  9230                           ;tff.c: 469: }
  9231                           ;tff.c: 470: if (c == '"') break;
  9232                           
  9233                           ; BSR set to: 0
  9234  003BC6  0E22               	movlw	34
  9235  003BC8  1972               	xorwf	make_dirfile@c& (0+255),w,b
  9236  003BCA  B4D8               	btfsc	status,2,c
  9237  003BCC  D04A               	goto	l1007
  9238                           
  9239                           ; BSR set to: 0
  9240                           ;tff.c: 471: if (c <= ')') goto md_l1;
  9241                           
  9242                           ; BSR set to: 0
  9243                           
  9244                           ; BSR set to: 0
  9245  003BCE  0E2A               	movlw	42
  9246  003BD0  6172               	cpfslt	make_dirfile@c& (0+255),b
  9247  003BD2  D001               	goto	l1027
  9248  003BD4  D035               	goto	l1045
  9249  003BD6                     l1027:
  9250                           
  9251                           ; BSR set to: 0
  9252                           ;tff.c: 472: if (c <= ',') break;
  9253                           
  9254                           ; BSR set to: 0
  9255  003BD6  0E2D               	movlw	45
  9256  003BD8  6172               	cpfslt	make_dirfile@c& (0+255),b
  9257  003BDA  D001               	goto	l1029
  9258  003BDC  D042               	goto	l1007
  9259  003BDE                     l1029:
  9260                           
  9261                           ; BSR set to: 0
  9262                           ;tff.c: 473: if (c <= '9') goto md_l1;
  9263                           
  9264                           ; BSR set to: 0
  9265  003BDE  0E3A               	movlw	58
  9266  003BE0  6172               	cpfslt	make_dirfile@c& (0+255),b
  9267  003BE2  D001               	goto	l1030
  9268  003BE4  D02D               	goto	l1045
  9269  003BE6                     l1030:
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;tff.c: 474: if (c <= '?') break;
  9273                           
  9274                           ; BSR set to: 0
  9275  003BE6  0E40               	movlw	64
  9276  003BE8  6172               	cpfslt	make_dirfile@c& (0+255),b
  9277  003BEA  D001               	goto	l1031
  9278  003BEC  D03A               	goto	l1007
  9279  003BEE                     l1031:
  9280                           
  9281                           ; BSR set to: 0
  9282                           ;tff.c: 475: if (!(a & 1)) {
  9283  003BEE  B170               	btfsc	make_dirfile@a& (0+255),0,b
  9284  003BF0  D027               	goto	l1045
  9285                           
  9286                           ; BSR set to: 0
  9287                           ;tff.c: 476: if (c == '|') break;
  9288  003BF2  0E7C               	movlw	124
  9289  003BF4  1972               	xorwf	make_dirfile@c& (0+255),w,b
  9290  003BF6  B4D8               	btfsc	status,2,c
  9291  003BF8  D034               	goto	l1007
  9292                           
  9293                           ; BSR set to: 0
  9294                           ;tff.c: 477: if (c >= '[' && c <= ']') break;
  9295                           
  9296                           ; BSR set to: 0
  9297                           
  9298                           ; BSR set to: 0
  9299  003BFA  0E5A               	movlw	90
  9300  003BFC  6572               	cpfsgt	make_dirfile@c& (0+255),b
  9301  003BFE  D004               	goto	l1034
  9302                           
  9303                           ; BSR set to: 0
  9304  003C00  0E5E               	movlw	94
  9305  003C02  6172               	cpfslt	make_dirfile@c& (0+255),b
  9306  003C04  D001               	goto	l1034
  9307  003C06  D02D               	goto	l1007
  9308  003C08                     l1034:
  9309                           
  9310                           ; BSR set to: 0
  9311                           
  9312                           ; BSR set to: 0
  9313  003C08  0E40               	movlw	64
  9314  003C0A  6572               	cpfsgt	make_dirfile@c& (0+255),b
  9315  003C0C  D00A               	goto	l1039
  9316                           
  9317                           ; BSR set to: 0
  9318  003C0E  0E5B               	movlw	91
  9319  003C10  6172               	cpfslt	make_dirfile@c& (0+255),b
  9320  003C12  D007               	goto	l1039
  9321                           
  9322                           ; BSR set to: 0
  9323                           ;tff.c: 479: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
  9324  003C14  0E08               	movlw	8
  9325  003C16  196F               	xorwf	make_dirfile@t& (0+255),w,b
  9326  003C18  A4D8               	btfss	status,2,c
  9327  003C1A  D002               	goto	l1037
  9328                           
  9329                           ; BSR set to: 0
  9330  003C1C  976E               	bcf	make_dirfile@b& (0+255),3,b
  9331  003C1E  D001               	goto	l1039
  9332  003C20                     l1037:
  9333                           
  9334                           ; BSR set to: 0
  9335                           
  9336                           ; BSR set to: 0
  9337  003C20  996E               	bcf	make_dirfile@b& (0+255),4,b
  9338  003C22                     l1039:
  9339                           
  9340                           ; BSR set to: 0
  9341                           ;tff.c: 480: if (c >= 'a' && c <= 'z') {
  9342                           
  9343                           ; BSR set to: 0
  9344                           
  9345                           ; BSR set to: 0
  9346  003C22  0E60               	movlw	96
  9347  003C24  6572               	cpfsgt	make_dirfile@c& (0+255),b
  9348  003C26  D00C               	goto	l1045
  9349                           
  9350                           ; BSR set to: 0
  9351  003C28  0E7B               	movlw	123
  9352  003C2A  6172               	cpfslt	make_dirfile@c& (0+255),b
  9353  003C2C  D009               	goto	l1045
  9354                           
  9355                           ; BSR set to: 0
  9356                           ;tff.c: 482: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
  9357  003C2E  0E20               	movlw	32
  9358  003C30  5F72               	subwf	make_dirfile@c& (0+255),f,b
  9359  003C32  0E08               	movlw	8
  9360  003C34  196F               	xorwf	make_dirfile@t& (0+255),w,b
  9361  003C36  A4D8               	btfss	status,2,c
  9362  003C38  D002               	goto	l1043
  9363                           
  9364                           ; BSR set to: 0
  9365  003C3A  8770               	bsf	make_dirfile@a& (0+255),3,b
  9366  003C3C  D001               	goto	l1045
  9367  003C3E                     l1043:
  9368                           
  9369                           ; BSR set to: 0
  9370                           
  9371                           ; BSR set to: 0
  9372  003C3E  8970               	bsf	make_dirfile@a& (0+255),4,b
  9373  003C40                     l1045:
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;tff.c: 486: a &= 0xFE;
  9377                           
  9378                           ; BSR set to: 0
  9379                           ;tff.c: 483: }
  9380                           ;tff.c: 484: }
  9381                           ;tff.c: 485: md_l1:
  9382                           
  9383                           ; BSR set to: 0
  9384                           
  9385                           ; BSR set to: 0
  9386                           
  9387                           ; BSR set to: 0
  9388  003C40  9170               	bcf	make_dirfile@a& (0+255),0,b
  9389                           
  9390                           ; BSR set to: 0
  9391                           ;tff.c: 488: if (n >= t) break;
  9392                           
  9393                           ; BSR set to: 0
  9394                           
  9395                           ;tff.c: 487: md_l2:
  9396  003C42  516F               	movf	make_dirfile@t& (0+255),w,b
  9397  003C44  5D71               	subwf	make_dirfile@n& (0+255),w,b
  9398  003C46  B0D8               	btfsc	status,0,c
  9399  003C48  D00C               	goto	l1007
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;tff.c: 489: dirname[n++] = c;
  9403                           
  9404                           ; BSR set to: 0
  9405                           
  9406                           ; BSR set to: 0
  9407  003C4A  5171               	movf	make_dirfile@n& (0+255),w,b
  9408  003C4C  0D01               	mullw	1
  9409  003C4E  50F3               	movf	prodl,w,c
  9410  003C50  2568               	addwf	make_dirfile@dirname& (0+255),w,b
  9411  003C52  6ED9               	movwf	fsr2l,c
  9412  003C54  50F4               	movf	prodh,w,c
  9413  003C56  2169               	addwfc	(make_dirfile@dirname+1)& (0+255),w,b
  9414  003C58  6EDA               	movwf	fsr2h,c
  9415  003C5A  C072  FFDF         	movff	make_dirfile@c,indf2
  9416                           
  9417                           ; BSR set to: 0
  9418  003C5E  2B71               	incf	make_dirfile@n& (0+255),f,b
  9419                           
  9420                           ; BSR set to: 0
  9421                           ;tff.c: 490: }
  9422  003C60  D763               	goto	l1002
  9423  003C62                     l1007:
  9424                           
  9425                           ; BSR set to: 0
  9426                           ;tff.c: 491: return 1;
  9427                           
  9428                           ; BSR set to: 0
  9429  003C62  0E01               	movlw	1
  9430  003C64  0012               	return	
  9431  003C66                     __end_of_make_dirfile:
  9432                           	opt stack 0
  9433                           tosu	equ	0xFFF
  9434                           tosh	equ	0xFFE
  9435                           tosl	equ	0xFFD
  9436                           pclath	equ	0xFFA
  9437                           tblptru	equ	0xFF8
  9438                           tblptrh	equ	0xFF7
  9439                           tblptrl	equ	0xFF6
  9440                           tablat	equ	0xFF5
  9441                           prodh	equ	0xFF4
  9442                           prodl	equ	0xFF3
  9443                           intcon	equ	0xFF2
  9444                           intcon2	equ	0xFF1
  9445                           intcon3	equ	0xFF0
  9446                           indf0	equ	0xFEF
  9447                           postinc0	equ	0xFEE
  9448                           fsr0h	equ	0xFEA
  9449                           fsr0l	equ	0xFE9
  9450                           wreg	equ	0xFE8
  9451                           indf1	equ	0xFE7
  9452                           postinc1	equ	0xFE6
  9453                           postdec1	equ	0xFE5
  9454                           fsr1h	equ	0xFE2
  9455                           fsr1l	equ	0xFE1
  9456                           indf2	equ	0xFDF
  9457                           postinc2	equ	0xFDE
  9458                           postdec2	equ	0xFDD
  9459                           plusw2	equ	0xFDB
  9460                           fsr2h	equ	0xFDA
  9461                           fsr2l	equ	0xFD9
  9462                           status	equ	0xFD8
  9463                           
  9464 ;; *************** function _reserve_direntry *****************
  9465 ;; Defined at:
  9466 ;;		line 567 in file "bibliotecas/tff.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;  dj              2  100[BANK0 ] PTR struct _DIR_E
  9469 ;;		 -> f_open@dj(14), 
  9470 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
  9471 ;;		 -> f_open@dir(2), 
  9472 ;; Auto vars:     Size  Location     Type
  9473 ;;  sector          4  106[BANK0 ] unsigned long 
  9474 ;;  fs              2  116[BANK0 ] PTR struct _FATFS
  9475 ;;		 -> NULL(0), fs(544), 
  9476 ;;  clust           2  114[BANK0 ] unsigned short 
  9477 ;;  dptr            2  111[BANK0 ] PTR unsigned char 
  9478 ;;		 -> fs.win(512), NULL(0), fs(544), 
  9479 ;;  c               1  113[BANK0 ] unsigned char 
  9480 ;;  n               1  110[BANK0 ] unsigned char 
  9481 ;; Return value:  Size  Location     Type
  9482 ;;                  1    wreg      enum E155
  9483 ;; Registers used:
  9484 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9485 ;; Tracked objects:
  9486 ;;		On entry : 0/0
  9487 ;;		On exit  : 0/0
  9488 ;;		Unchanged: 0/0
  9489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9490 ;;      Params:         0       4       0       0       0       0       0       0       0
  9491 ;;      Locals:         0      12       0       0       0       0       0       0       0
  9492 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9493 ;;      Totals:         0      18       0       0       0       0       0       0       0
  9494 ;;Total ram usage:       18 bytes
  9495 ;; Hardware stack levels used:    1
  9496 ;; Hardware stack levels required when called:   11
  9497 ;; This function calls:
  9498 ;;		_clust2sect
  9499 ;;		_create_chain
  9500 ;;		_disk_write
  9501 ;;		_memset
  9502 ;;		_move_window
  9503 ;;		_next_dir_entry
  9504 ;; This function is called by:
  9505 ;;		_f_open
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           	psect	text32
  9510  002A66                     __ptext32:
  9511                           	opt stack 0
  9512  002A66                     _reserve_direntry:
  9513                           	opt stack 15
  9514                           
  9515                           ;tff.c: 572: CLUST clust;
  9516                           ;tff.c: 573: DWORD sector;
  9517                           ;tff.c: 574: BYTE c, n, *dptr;
  9518                           ;tff.c: 575: FATFS *fs = dj->fs;
  9519                           
  9520                           ; BSR set to: 0
  9521                           ;incstack = 0
  9522  002A66  0100               	movlb	0	; () banked
  9523  002A68  EE20 F004          	lfsr	2,4
  9524  002A6C  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9525  002A6E  26D9               	addwf	fsr2l,f,c
  9526  002A70  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9527  002A72  22DA               	addwfc	fsr2h,f,c
  9528  002A74  CFDE F0D4          	movff	postinc2,reserve_direntry@fs
  9529  002A78  CFDD F0D5          	movff	postdec2,reserve_direntry@fs+1
  9530                           
  9531                           ;tff.c: 579: clust = dj->sclust;
  9532  002A7C  EE20 F006          	lfsr	2,6
  9533  002A80  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9534  002A82  26D9               	addwf	fsr2l,f,c
  9535  002A84  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9536  002A86  22DA               	addwfc	fsr2h,f,c
  9537  002A88  CFDE F0D2          	movff	postinc2,reserve_direntry@clust
  9538  002A8C  CFDD F0D3          	movff	postdec2,reserve_direntry@clust+1
  9539                           
  9540                           ; BSR set to: 0
  9541                           ;tff.c: 580: if (clust != 0) {
  9542  002A90  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  9543  002A92  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9544  002A94  B4D8               	btfsc	status,2,c
  9545  002A96  D020               	goto	l1072
  9546                           
  9547                           ; BSR set to: 0
  9548                           ;tff.c: 581: dj->clust = clust;
  9549  002A98  EE20 F008          	lfsr	2,8
  9550  002A9C  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9551  002A9E  26D9               	addwf	fsr2l,f,c
  9552  002AA0  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9553  002AA2  22DA               	addwfc	fsr2h,f,c
  9554  002AA4  C0D2  FFDE         	movff	reserve_direntry@clust,postinc2
  9555  002AA8  C0D3  FFDD         	movff	reserve_direntry@clust+1,postdec2
  9556                           
  9557                           ; BSR set to: 0
  9558                           ;tff.c: 582: dj->sect = clust2sect(clust);
  9559  002AAC  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
  9560  002AB0  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
  9561  002AB4  EC93  F022         	call	_clust2sect	;wreg free
  9562  002AB8  0100               	movlb	0	; () banked
  9563  002ABA  EE20 F00A          	lfsr	2,10
  9564  002ABE  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9565  002AC0  26D9               	addwf	fsr2l,f,c
  9566  002AC2  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9567  002AC4  22DA               	addwfc	fsr2h,f,c
  9568  002AC6  C06C  FFDE         	movff	?_clust2sect,postinc2
  9569  002ACA  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  9570  002ACE  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  9571  002AD2  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  9572                           
  9573                           ;tff.c: 583: } else {
  9574  002AD6  D014               	goto	l1073
  9575  002AD8                     l1072:
  9576                           
  9577                           ; BSR set to: 0
  9578                           ;tff.c: 584: dj->sect = fs->dirbase;
  9579                           
  9580                           ; BSR set to: 0
  9581  002AD8  EE20 F00C          	lfsr	2,12
  9582  002ADC  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  9583  002ADE  26D9               	addwf	fsr2l,f,c
  9584  002AE0  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  9585  002AE2  22DA               	addwfc	fsr2h,f,c
  9586  002AE4  EE10 F00A          	lfsr	1,10
  9587  002AE8  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9588  002AEA  26E1               	addwf	fsr1l,f,c
  9589  002AEC  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9590  002AEE  22E2               	addwfc	fsr1h,f,c
  9591  002AF0  CFDE FFE6          	movff	postinc2,postinc1
  9592  002AF4  CFDE FFE6          	movff	postinc2,postinc1
  9593  002AF8  CFDE FFE6          	movff	postinc2,postinc1
  9594  002AFC  CFDE FFE6          	movff	postinc2,postinc1
  9595  002B00                     l1073:
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;tff.c: 585: }
  9599                           ;tff.c: 586: dj->index = 0;
  9600                           
  9601                           ; BSR set to: 0
  9602  002B00  EE20 F002          	lfsr	2,2
  9603  002B04  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9604  002B06  26D9               	addwf	fsr2l,f,c
  9605  002B08  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9606  002B0A  22DA               	addwfc	fsr2h,f,c
  9607  002B0C  0E00               	movlw	0
  9608  002B0E  6EDE               	movwf	postinc2,c
  9609  002B10  0E00               	movlw	0
  9610  002B12  6EDD               	movwf	postdec2,c
  9611  002B14                     
  9612                           ;tff.c: 589: if (!move_window(dj->sect)) return FR_RW_ERROR;
  9613                           
  9614                           ; BSR set to: 0
  9615  002B14  0100               	movlb	0	; () banked
  9616  002B16  EE20 F00A          	lfsr	2,10
  9617  002B1A  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9618  002B1C  26D9               	addwf	fsr2l,f,c
  9619  002B1E  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9620  002B20  22DA               	addwfc	fsr2h,f,c
  9621  002B22  CFDE F08B          	movff	postinc2,move_window@sector
  9622  002B26  CFDE F08C          	movff	postinc2,move_window@sector+1
  9623  002B2A  CFDE F08D          	movff	postinc2,move_window@sector+2
  9624  002B2E  CFDE F08E          	movff	postinc2,move_window@sector+3
  9625  002B32  ECDD  F01B         	call	_move_window	;wreg free
  9626  002B36  0900               	iorlw	0
  9627  002B38  A4D8               	btfss	status,2,c
  9628  002B3A  D002               	goto	l1075
  9629  002B3C  0E08               	movlw	8
  9630  002B3E  0012               	return	
  9631  002B40                     l1075:
  9632                           
  9633                           ;tff.c: 590: dptr = &fs->win[(dj->index & 15) * 32];
  9634  002B40  0100               	movlb	0	; () banked
  9635  002B42  EE20 F002          	lfsr	2,2
  9636  002B46  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9637  002B48  26D9               	addwf	fsr2l,f,c
  9638  002B4A  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9639  002B4C  22DA               	addwfc	fsr2h,f,c
  9640  002B4E  CFDE F0C8          	movff	postinc2,??_reserve_direntry
  9641  002B52  CFDD F0C9          	movff	postdec2,??_reserve_direntry+1
  9642  002B56  0E0F               	movlw	15
  9643  002B58  17C8               	andwf	??_reserve_direntry& (0+255),f,b
  9644  002B5A  0E00               	movlw	0
  9645  002B5C  17C9               	andwf	(??_reserve_direntry+1)& (0+255),f,b
  9646  002B5E  0E05               	movlw	5
  9647  002B60                     u12505:
  9648  002B60  90D8               	bcf	status,0,c
  9649  002B62  37C8               	rlcf	??_reserve_direntry& (0+255),f,b
  9650  002B64  37C9               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
  9651  002B66  2EE8               	decfsz	wreg,f,c
  9652  002B68  D7FB               	goto	u12505
  9653  002B6A  0E20               	movlw	32
  9654  002B6C  27C8               	addwf	??_reserve_direntry& (0+255),f,b
  9655  002B6E  0E00               	movlw	0
  9656  002B70  23C9               	addwfc	(??_reserve_direntry+1)& (0+255),f,b
  9657  002B72  51C8               	movf	??_reserve_direntry& (0+255),w,b
  9658  002B74  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  9659  002B76  6FCF               	movwf	reserve_direntry@dptr& (0+255),b
  9660  002B78  51C9               	movf	(??_reserve_direntry+1)& (0+255),w,b
  9661  002B7A  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  9662  002B7C  6FD0               	movwf	(reserve_direntry@dptr+1)& (0+255),b
  9663                           
  9664                           ; BSR set to: 0
  9665                           ;tff.c: 591: c = dptr[0];
  9666  002B7E  C0CF  FFD9         	movff	reserve_direntry@dptr,fsr2l
  9667  002B82  C0D0  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
  9668  002B86  50DF               	movf	indf2,w,c
  9669  002B88  6FD1               	movwf	reserve_direntry@c& (0+255),b
  9670                           
  9671                           ; BSR set to: 0
  9672                           ;tff.c: 592: if (c == 0 || c == 0xE5) {
  9673  002B8A  51D1               	movf	reserve_direntry@c& (0+255),w,b
  9674  002B8C  B4D8               	btfsc	status,2,c
  9675  002B8E  D004               	goto	u12520
  9676                           
  9677                           ; BSR set to: 0
  9678  002B90  0EE5               	movlw	229
  9679  002B92  19D1               	xorwf	reserve_direntry@c& (0+255),w,b
  9680  002B94  A4D8               	btfss	status,2,c
  9681  002B96  D00A               	goto	l1077
  9682  002B98                     u12520:
  9683                           
  9684                           ; BSR set to: 0
  9685                           ;tff.c: 593: *dir = dptr; return FR_OK;
  9686                           
  9687                           ; BSR set to: 0
  9688  002B98  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
  9689  002B9C  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
  9690  002BA0  C0CF  FFDE         	movff	reserve_direntry@dptr,postinc2
  9691  002BA4  C0D0  FFDD         	movff	reserve_direntry@dptr+1,postdec2
  9692                           
  9693                           ; BSR set to: 0
  9694  002BA8  0E00               	movlw	0
  9695                           
  9696                           ; BSR set to: 0
  9697  002BAA  0012               	return	
  9698  002BAC                     l1077:
  9699                           
  9700                           ; BSR set to: 0
  9701                           ;tff.c: 594: }
  9702                           ;tff.c: 595: } while (next_dir_entry(dj));
  9703                           
  9704                           ; BSR set to: 0
  9705  002BAC  C0C4  F0B3         	movff	reserve_direntry@dj,next_dir_entry@dj
  9706  002BB0  C0C5  F0B4         	movff	reserve_direntry@dj+1,next_dir_entry@dj+1
  9707  002BB4  ECB8  F01C         	call	_next_dir_entry	;wreg free
  9708  002BB8  0900               	iorlw	0
  9709  002BBA  A4D8               	btfss	status,2,c
  9710  002BBC  D7AB               	goto	l1074
  9711                           
  9712                           ;tff.c: 599: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
  9713  002BBE  0100               	movlb	0	; () banked
  9714  002BC0  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  9715  002BC2  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9716  002BC4  B4D8               	btfsc	status,2,c
  9717  002BC6  D015               	goto	u12550
  9718                           
  9719                           ; BSR set to: 0
  9720  002BC8  EE20 F008          	lfsr	2,8
  9721  002BCC  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9722  002BCE  26D9               	addwf	fsr2l,f,c
  9723  002BD0  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9724  002BD2  22DA               	addwfc	fsr2h,f,c
  9725  002BD4  CFDE F0B6          	movff	postinc2,create_chain@clust
  9726  002BD8  CFDD F0B7          	movff	postdec2,create_chain@clust+1
  9727  002BDC  ECFD  F01A         	call	_create_chain	;wreg free
  9728  002BE0  C0B6  F0D2         	movff	?_create_chain,reserve_direntry@clust
  9729  002BE4  C0B7  F0D3         	movff	?_create_chain+1,reserve_direntry@clust+1
  9730  002BE8  0100               	movlb	0	; () banked
  9731  002BEA  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  9732  002BEC  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9733  002BEE  A4D8               	btfss	status,2,c
  9734  002BF0  D002               	goto	l1081
  9735  002BF2                     u12550:
  9736                           
  9737                           ; BSR set to: 0
  9738                           
  9739                           ; BSR set to: 0
  9740  002BF2  0E06               	movlw	6
  9741                           
  9742                           ; BSR set to: 0
  9743  002BF4  0012               	return	
  9744  002BF6                     l1081:
  9745                           
  9746                           ; BSR set to: 0
  9747                           ;tff.c: 600: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
  9748                           
  9749                           ; BSR set to: 0
  9750  002BF6  05D2               	decf	reserve_direntry@clust& (0+255),w,b
  9751  002BF8  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9752  002BFA  B4D8               	btfsc	status,2,c
  9753  002BFC  D00D               	goto	u12570
  9754                           
  9755                           ; BSR set to: 0
  9756  002BFE  0E00               	movlw	0
  9757  002C00  6F8B               	movwf	move_window@sector& (0+255),b
  9758  002C02  0E00               	movlw	0
  9759  002C04  6F8C               	movwf	(move_window@sector+1)& (0+255),b
  9760  002C06  0E00               	movlw	0
  9761  002C08  6F8D               	movwf	(move_window@sector+2)& (0+255),b
  9762  002C0A  0E00               	movlw	0
  9763  002C0C  6F8E               	movwf	(move_window@sector+3)& (0+255),b
  9764  002C0E  ECDD  F01B         	call	_move_window	;wreg free
  9765  002C12  0900               	iorlw	0
  9766  002C14  A4D8               	btfss	status,2,c
  9767  002C16  D002               	goto	l1084
  9768  002C18                     u12570:
  9769  002C18  0E08               	movlw	8
  9770  002C1A  0012               	return	
  9771  002C1C                     l1084:
  9772                           
  9773                           ;tff.c: 602: fs->winsect = sector = clust2sect(clust);
  9774  002C1C  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
  9775  002C20  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
  9776  002C24  EC93  F022         	call	_clust2sect	;wreg free
  9777  002C28  C06C  F0CA         	movff	?_clust2sect,reserve_direntry@sector
  9778  002C2C  C06D  F0CB         	movff	?_clust2sect+1,reserve_direntry@sector+1
  9779  002C30  C06E  F0CC         	movff	?_clust2sect+2,reserve_direntry@sector+2
  9780  002C34  C06F  F0CD         	movff	?_clust2sect+3,reserve_direntry@sector+3
  9781  002C38  0100               	movlb	0	; () banked
  9782  002C3A  EE20 F004          	lfsr	2,4
  9783  002C3E  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  9784  002C40  26D9               	addwf	fsr2l,f,c
  9785  002C42  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  9786  002C44  22DA               	addwfc	fsr2h,f,c
  9787  002C46  C0CA  FFDE         	movff	reserve_direntry@sector,postinc2
  9788  002C4A  C0CB  FFDE         	movff	reserve_direntry@sector+1,postinc2
  9789  002C4E  C0CC  FFDE         	movff	reserve_direntry@sector+2,postinc2
  9790  002C52  C0CD  FFDE         	movff	reserve_direntry@sector+3,postinc2
  9791                           
  9792                           ;tff.c: 603: memset(fs->win, 0, 512U);
  9793  002C56  0E20               	movlw	32
  9794  002C58  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  9795  002C5A  6F60               	movwf	memset@p1& (0+255),b
  9796  002C5C  0E00               	movlw	0
  9797  002C5E  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  9798  002C60  6F61               	movwf	(memset@p1+1)& (0+255),b
  9799  002C62  0E00               	movlw	0
  9800  002C64  6F63               	movwf	(memset@c+1)& (0+255),b
  9801  002C66  0E00               	movlw	0
  9802  002C68  6F62               	movwf	memset@c& (0+255),b
  9803  002C6A  0E02               	movlw	2
  9804  002C6C  6F65               	movwf	(memset@n+1)& (0+255),b
  9805  002C6E  0E00               	movlw	0
  9806  002C70  6F64               	movwf	memset@n& (0+255),b
  9807  002C72  ECE2  F02B         	call	_memset	;wreg free
  9808                           
  9809                           ;tff.c: 604: for (n = fs->csize; n; n--) {
  9810  002C76  0100               	movlb	0	; () banked
  9811  002C78  EE20 F01D          	lfsr	2,29
  9812  002C7C  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  9813  002C7E  26D9               	addwf	fsr2l,f,c
  9814  002C80  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  9815  002C82  22DA               	addwfc	fsr2h,f,c
  9816  002C84  50DF               	movf	indf2,w,c
  9817  002C86  6FCE               	movwf	reserve_direntry@n& (0+255),b
  9818  002C88  D020               	goto	l1087
  9819  002C8A                     
  9820                           ; BSR set to: 0
  9821                           ;tff.c: 605: if (disk_write(0, fs->win, sector, 1) != RES_OK)
  9822                           
  9823                           ; BSR set to: 0
  9824  002C8A  0E20               	movlw	32
  9825  002C8C  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  9826  002C8E  6F7F               	movwf	disk_write@buff& (0+255),b
  9827  002C90  0E00               	movlw	0
  9828  002C92  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  9829  002C94  6F80               	movwf	(disk_write@buff+1)& (0+255),b
  9830  002C96  C0CA  F081         	movff	reserve_direntry@sector,disk_write@sector
  9831  002C9A  C0CB  F082         	movff	reserve_direntry@sector+1,disk_write@sector+1
  9832  002C9E  C0CC  F083         	movff	reserve_direntry@sector+2,disk_write@sector+2
  9833  002CA2  C0CD  F084         	movff	reserve_direntry@sector+3,disk_write@sector+3
  9834  002CA6  0E01               	movlw	1
  9835  002CA8  6F85               	movwf	disk_write@count& (0+255),b
  9836  002CAA  0E00               	movlw	0
  9837  002CAC  EC55  F026         	call	_disk_write
  9838  002CB0  0900               	iorlw	0
  9839  002CB2  B4D8               	btfsc	status,2,c
  9840  002CB4  D002               	goto	l1089
  9841                           
  9842                           ;tff.c: 606: return FR_RW_ERROR;
  9843  002CB6  0E08               	movlw	8
  9844  002CB8  0012               	return	
  9845  002CBA                     l1089:
  9846                           
  9847                           ;tff.c: 607: sector++;
  9848  002CBA  0E01               	movlw	1
  9849  002CBC  0100               	movlb	0	; () banked
  9850  002CBE  27CA               	addwf	reserve_direntry@sector& (0+255),f,b
  9851  002CC0  0E00               	movlw	0
  9852  002CC2  23CB               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
  9853  002CC4  23CC               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
  9854  002CC6  23CD               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
  9855                           
  9856                           ; BSR set to: 0
  9857  002CC8  07CE               	decf	reserve_direntry@n& (0+255),f,b
  9858  002CCA                     l1087:
  9859                           
  9860                           ; BSR set to: 0
  9861                           
  9862                           ; BSR set to: 0
  9863  002CCA  51CE               	movf	reserve_direntry@n& (0+255),w,b
  9864  002CCC  A4D8               	btfss	status,2,c
  9865  002CCE  D7DD               	goto	l1088
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;tff.c: 608: }
  9869                           ;tff.c: 609: fs->winflag = 1;
  9870                           
  9871                           ; BSR set to: 0
  9872  002CD0  EE20 F01F          	lfsr	2,31
  9873  002CD4  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  9874  002CD6  26D9               	addwf	fsr2l,f,c
  9875  002CD8  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  9876  002CDA  22DA               	addwfc	fsr2h,f,c
  9877  002CDC  0E01               	movlw	1
  9878  002CDE  6EDF               	movwf	indf2,c
  9879                           
  9880                           ;tff.c: 610: *dir = fs->win;
  9881  002CE0  0E20               	movlw	32
  9882  002CE2  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  9883  002CE4  6FC8               	movwf	??_reserve_direntry& (0+255),b
  9884  002CE6  0E00               	movlw	0
  9885  002CE8  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  9886  002CEA  6FC9               	movwf	(??_reserve_direntry+1)& (0+255),b
  9887  002CEC  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
  9888  002CF0  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
  9889  002CF4  C0C8  FFDE         	movff	??_reserve_direntry,postinc2
  9890  002CF8  C0C9  FFDD         	movff	??_reserve_direntry+1,postdec2
  9891                           
  9892                           ; BSR set to: 0
  9893                           ;tff.c: 611: return FR_OK;
  9894  002CFC  0E00               	movlw	0
  9895  002CFE  0012               	return	
  9896  002D00                     __end_of_reserve_direntry:
  9897                           	opt stack 0
  9898                           tosu	equ	0xFFF
  9899                           tosh	equ	0xFFE
  9900                           tosl	equ	0xFFD
  9901                           pclath	equ	0xFFA
  9902                           tblptru	equ	0xFF8
  9903                           tblptrh	equ	0xFF7
  9904                           tblptrl	equ	0xFF6
  9905                           tablat	equ	0xFF5
  9906                           prodh	equ	0xFF4
  9907                           prodl	equ	0xFF3
  9908                           intcon	equ	0xFF2
  9909                           intcon2	equ	0xFF1
  9910                           intcon3	equ	0xFF0
  9911                           indf0	equ	0xFEF
  9912                           postinc0	equ	0xFEE
  9913                           fsr0h	equ	0xFEA
  9914                           fsr0l	equ	0xFE9
  9915                           wreg	equ	0xFE8
  9916                           indf1	equ	0xFE7
  9917                           postinc1	equ	0xFE6
  9918                           postdec1	equ	0xFE5
  9919                           fsr1h	equ	0xFE2
  9920                           fsr1l	equ	0xFE1
  9921                           indf2	equ	0xFDF
  9922                           postinc2	equ	0xFDE
  9923                           postdec2	equ	0xFDD
  9924                           plusw2	equ	0xFDB
  9925                           fsr2h	equ	0xFDA
  9926                           fsr2l	equ	0xFD9
  9927                           status	equ	0xFD8
  9928                           
  9929 ;; *************** function _next_dir_entry *****************
  9930 ;; Defined at:
  9931 ;;		line 358 in file "bibliotecas/tff.c"
  9932 ;; Parameters:    Size  Location     Type
  9933 ;;  dj              2   83[BANK0 ] PTR struct _DIR_E
  9934 ;;		 -> f_open@dj(14), 
  9935 ;; Auto vars:     Size  Location     Type
  9936 ;;  idx             2   94[BANK0 ] unsigned short 
  9937 ;;  clust           2   92[BANK0 ] unsigned short 
  9938 ;; Return value:  Size  Location     Type
  9939 ;;                  1    wreg      enum E105
  9940 ;; Registers used:
  9941 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9942 ;; Tracked objects:
  9943 ;;		On entry : 0/0
  9944 ;;		On exit  : 0/0
  9945 ;;		Unchanged: 0/0
  9946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9947 ;;      Params:         0       2       0       0       0       0       0       0       0
  9948 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9949 ;;      Temps:          0       7       0       0       0       0       0       0       0
  9950 ;;      Totals:         0      13       0       0       0       0       0       0       0
  9951 ;;Total ram usage:       13 bytes
  9952 ;; Hardware stack levels used:    1
  9953 ;; Hardware stack levels required when called:   10
  9954 ;; This function calls:
  9955 ;;		_clust2sect
  9956 ;;		_get_cluster
  9957 ;; This function is called by:
  9958 ;;		_trace_path
  9959 ;;		_reserve_direntry
  9960 ;;		_f_readdir
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964                           	psect	text33
  9965  003970                     __ptext33:
  9966                           	opt stack 0
  9967  003970                     _next_dir_entry:
  9968                           	opt stack 15
  9969                           
  9970                           ;tff.c: 362: CLUST clust;
  9971                           ;tff.c: 363: WORD idx;
  9972                           ;tff.c: 366: idx = dj->index + 1;
  9973                           
  9974                           ;incstack = 0
  9975  003970  0100               	movlb	0	; () banked
  9976  003972  EE20 F002          	lfsr	2,2
  9977  003976  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9978  003978  26D9               	addwf	fsr2l,f,c
  9979  00397A  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9980  00397C  22DA               	addwfc	fsr2h,f,c
  9981  00397E  CFDE F0B5          	movff	postinc2,??_next_dir_entry
  9982  003982  CFDD F0B6          	movff	postdec2,??_next_dir_entry+1
  9983  003986  0E01               	movlw	1
  9984  003988  25B5               	addwf	??_next_dir_entry& (0+255),w,b
  9985  00398A  6FBE               	movwf	next_dir_entry@idx& (0+255),b
  9986  00398C  0E00               	movlw	0
  9987  00398E  21B6               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
  9988  003990  6FBF               	movwf	(next_dir_entry@idx+1)& (0+255),b
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;tff.c: 367: if ((idx & 15) == 0) {
  9992  003992  0E0F               	movlw	15
  9993  003994  15BE               	andwf	next_dir_entry@idx& (0+255),w,b
  9994  003996  6FB5               	movwf	??_next_dir_entry& (0+255),b
  9995  003998  0E00               	movlw	0
  9996  00399A  15BF               	andwf	(next_dir_entry@idx+1)& (0+255),w,b
  9997  00399C  6FB6               	movwf	(??_next_dir_entry+1)& (0+255),b
  9998  00399E  51B5               	movf	??_next_dir_entry& (0+255),w,b
  9999  0039A0  11B6               	iorwf	(??_next_dir_entry+1)& (0+255),w,b
 10000  0039A2  A4D8               	btfss	status,2,c
 10001  0039A4  D09D               	goto	l979
 10002                           
 10003                           ; BSR set to: 0
 10004                           ;tff.c: 368: dj->sect++;
 10005  0039A6  EE20 F00A          	lfsr	2,10
 10006  0039AA  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10007  0039AC  26D9               	addwf	fsr2l,f,c
 10008  0039AE  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10009  0039B0  22DA               	addwfc	fsr2h,f,c
 10010  0039B2  2ADE               	incf	postinc2,f,c
 10011  0039B4  0E00               	movlw	0
 10012  0039B6  22DE               	addwfc	postinc2,f,c
 10013  0039B8  22DE               	addwfc	postinc2,f,c
 10014  0039BA  22DE               	addwfc	postinc2,f,c
 10015                           
 10016                           ;tff.c: 369: if (dj->clust == 0) {
 10017  0039BC  EE20 F008          	lfsr	2,8
 10018  0039C0  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10019  0039C2  26D9               	addwf	fsr2l,f,c
 10020  0039C4  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10021  0039C6  22DA               	addwfc	fsr2h,f,c
 10022  0039C8  50DE               	movf	postinc2,w,c
 10023  0039CA  10DE               	iorwf	postinc2,w,c
 10024  0039CC  A4D8               	btfss	status,2,c
 10025  0039CE  D014               	goto	l975
 10026                           
 10027                           ; BSR set to: 0
 10028                           ;tff.c: 370: if (idx >= dj->fs->n_rootdir) return FALSE;
 10029  0039D0  EE20 F004          	lfsr	2,4
 10030  0039D4  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10031  0039D6  26D9               	addwf	fsr2l,f,c
 10032  0039D8  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10033  0039DA  22DA               	addwfc	fsr2h,f,c
 10034  0039DC  EE10 F002          	lfsr	1,2
 10035  0039E0  50DE               	movf	postinc2,w,c
 10036  0039E2  26E1               	addwf	fsr1l,f,c
 10037  0039E4  50DD               	movf	postdec2,w,c
 10038  0039E6  22E2               	addwfc	fsr1h,f,c
 10039  0039E8  50E6               	movf	postinc1,w,c
 10040  0039EA  5DBE               	subwf	next_dir_entry@idx& (0+255),w,b
 10041  0039EC  50E6               	movf	postinc1,w,c
 10042  0039EE  59BF               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
 10043  0039F0  A0D8               	btfss	status,0,c
 10044  0039F2  D076               	goto	l979
 10045                           
 10046                           ; BSR set to: 0
 10047  0039F4  0E00               	movlw	0
 10048                           
 10049                           ; BSR set to: 0
 10050  0039F6  0012               	return	
 10051  0039F8                     l975:
 10052                           
 10053                           ; BSR set to: 0
 10054                           ;tff.c: 372: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
 10055                           
 10056                           ; BSR set to: 0
 10057  0039F8  C0BE  F0B5         	movff	next_dir_entry@idx,??_next_dir_entry
 10058  0039FC  C0BF  F0B6         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
 10059  003A00  0E04               	movlw	4
 10060  003A02  6FB7               	movwf	(??_next_dir_entry+2)& (0+255),b
 10061  003A04                     u11655:
 10062  003A04  90D8               	bcf	status,0,c
 10063  003A06  33B6               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
 10064  003A08  33B5               	rrcf	??_next_dir_entry& (0+255),f,b
 10065  003A0A  2FB7               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
 10066  003A0C  D7FB               	goto	u11655
 10067  003A0E  0EFF               	movlw	255
 10068  003A10  6FB8               	movwf	(??_next_dir_entry+3)& (0+255),b
 10069  003A12  0EFF               	movlw	255
 10070  003A14  6FB9               	movwf	(??_next_dir_entry+4)& (0+255),b
 10071  003A16  EE20 F004          	lfsr	2,4
 10072  003A1A  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10073  003A1C  26D9               	addwf	fsr2l,f,c
 10074  003A1E  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10075  003A20  22DA               	addwfc	fsr2h,f,c
 10076  003A22  EE10 F01D          	lfsr	1,29
 10077  003A26  50DE               	movf	postinc2,w,c
 10078  003A28  26E1               	addwf	fsr1l,f,c
 10079  003A2A  50DD               	movf	postdec2,w,c
 10080  003A2C  22E2               	addwfc	fsr1h,f,c
 10081  003A2E  50E7               	movf	indf1,w,c
 10082  003A30  6FBA               	movwf	(??_next_dir_entry+5)& (0+255),b
 10083  003A32  6BBB               	clrf	(??_next_dir_entry+6)& (0+255),b
 10084  003A34  51B8               	movf	(??_next_dir_entry+3)& (0+255),w,b
 10085  003A36  27BA               	addwf	(??_next_dir_entry+5)& (0+255),f,b
 10086  003A38  51B9               	movf	(??_next_dir_entry+4)& (0+255),w,b
 10087  003A3A  23BB               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
 10088  003A3C  51B5               	movf	??_next_dir_entry& (0+255),w,b
 10089  003A3E  17BA               	andwf	(??_next_dir_entry+5)& (0+255),f,b
 10090  003A40  51B6               	movf	(??_next_dir_entry+1)& (0+255),w,b
 10091  003A42  17BB               	andwf	(??_next_dir_entry+6)& (0+255),f,b
 10092  003A44  51BA               	movf	(??_next_dir_entry+5)& (0+255),w,b
 10093  003A46  11BB               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
 10094  003A48  A4D8               	btfss	status,2,c
 10095  003A4A  D04A               	goto	l979
 10096                           
 10097                           ; BSR set to: 0
 10098                           ;tff.c: 373: clust = get_cluster(dj->clust);
 10099  003A4C  EE20 F008          	lfsr	2,8
 10100  003A50  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10101  003A52  26D9               	addwf	fsr2l,f,c
 10102  003A54  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10103  003A56  22DA               	addwfc	fsr2h,f,c
 10104  003A58  CFDE F0A0          	movff	postinc2,get_cluster@clust
 10105  003A5C  CFDD F0A1          	movff	postdec2,get_cluster@clust+1
 10106  003A60  EC07  F019         	call	_get_cluster	;wreg free
 10107  003A64  C0A0  F0BC         	movff	?_get_cluster,next_dir_entry@clust
 10108  003A68  C0A1  F0BD         	movff	?_get_cluster+1,next_dir_entry@clust+1
 10109                           
 10110                           ;tff.c: 374: if (clust < 2 || clust >= dj->fs->max_clust)
 10111  003A6C  0100               	movlb	0	; () banked
 10112  003A6E  51BD               	movf	(next_dir_entry@clust+1)& (0+255),w,b
 10113  003A70  E104               	bnz	u11670
 10114  003A72  0E02               	movlw	2
 10115  003A74  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
 10116  003A76  A0D8               	btfss	status,0,c
 10117  003A78  D012               	goto	u11680
 10118  003A7A                     u11670:
 10119                           
 10120                           ; BSR set to: 0
 10121  003A7A  EE20 F004          	lfsr	2,4
 10122  003A7E  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10123  003A80  26D9               	addwf	fsr2l,f,c
 10124  003A82  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10125  003A84  22DA               	addwfc	fsr2h,f,c
 10126  003A86  EE10 F016          	lfsr	1,22
 10127  003A8A  50DE               	movf	postinc2,w,c
 10128  003A8C  26E1               	addwf	fsr1l,f,c
 10129  003A8E  50DD               	movf	postdec2,w,c
 10130  003A90  22E2               	addwfc	fsr1h,f,c
 10131  003A92  50E6               	movf	postinc1,w,c
 10132  003A94  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
 10133  003A96  50E6               	movf	postinc1,w,c
 10134  003A98  59BD               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
 10135  003A9A  A0D8               	btfss	status,0,c
 10136  003A9C  D002               	goto	l980
 10137  003A9E                     u11680:
 10138                           
 10139                           ; BSR set to: 0
 10140                           ;tff.c: 375: return FALSE;
 10141                           
 10142                           ; BSR set to: 0
 10143  003A9E  0E00               	movlw	0
 10144                           
 10145                           ; BSR set to: 0
 10146  003AA0  0012               	return	
 10147  003AA2                     l980:
 10148                           
 10149                           ; BSR set to: 0
 10150                           ;tff.c: 376: dj->clust = clust;
 10151                           
 10152                           ; BSR set to: 0
 10153  003AA2  EE20 F008          	lfsr	2,8
 10154  003AA6  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10155  003AA8  26D9               	addwf	fsr2l,f,c
 10156  003AAA  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10157  003AAC  22DA               	addwfc	fsr2h,f,c
 10158  003AAE  C0BC  FFDE         	movff	next_dir_entry@clust,postinc2
 10159  003AB2  C0BD  FFDD         	movff	next_dir_entry@clust+1,postdec2
 10160                           
 10161                           ; BSR set to: 0
 10162                           ;tff.c: 377: dj->sect = clust2sect(clust);
 10163  003AB6  C0BC  F06C         	movff	next_dir_entry@clust,clust2sect@clust
 10164  003ABA  C0BD  F06D         	movff	next_dir_entry@clust+1,clust2sect@clust+1
 10165  003ABE  EC93  F022         	call	_clust2sect	;wreg free
 10166  003AC2  0100               	movlb	0	; () banked
 10167  003AC4  EE20 F00A          	lfsr	2,10
 10168  003AC8  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10169  003ACA  26D9               	addwf	fsr2l,f,c
 10170  003ACC  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10171  003ACE  22DA               	addwfc	fsr2h,f,c
 10172  003AD0  C06C  FFDE         	movff	?_clust2sect,postinc2
 10173  003AD4  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 10174  003AD8  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 10175  003ADC  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 10176  003AE0                     l979:
 10177                           
 10178                           ; BSR set to: 0
 10179                           ;tff.c: 378: }
 10180                           ;tff.c: 379: }
 10181                           ;tff.c: 380: }
 10182                           ;tff.c: 381: dj->index = idx;
 10183                           
 10184                           ; BSR set to: 0
 10185                           
 10186                           ; BSR set to: 0
 10187                           
 10188                           ; BSR set to: 0
 10189  003AE0  EE20 F002          	lfsr	2,2
 10190  003AE4  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 10191  003AE6  26D9               	addwf	fsr2l,f,c
 10192  003AE8  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 10193  003AEA  22DA               	addwfc	fsr2h,f,c
 10194  003AEC  C0BE  FFDE         	movff	next_dir_entry@idx,postinc2
 10195  003AF0  C0BF  FFDD         	movff	next_dir_entry@idx+1,postdec2
 10196                           
 10197                           ; BSR set to: 0
 10198                           ;tff.c: 382: return TRUE;
 10199  003AF4  0E01               	movlw	1
 10200  003AF6  0012               	return	
 10201  003AF8                     __end_of_next_dir_entry:
 10202                           	opt stack 0
 10203                           tosu	equ	0xFFF
 10204                           tosh	equ	0xFFE
 10205                           tosl	equ	0xFFD
 10206                           pclath	equ	0xFFA
 10207                           tblptru	equ	0xFF8
 10208                           tblptrh	equ	0xFF7
 10209                           tblptrl	equ	0xFF6
 10210                           tablat	equ	0xFF5
 10211                           prodh	equ	0xFF4
 10212                           prodl	equ	0xFF3
 10213                           intcon	equ	0xFF2
 10214                           intcon2	equ	0xFF1
 10215                           intcon3	equ	0xFF0
 10216                           indf0	equ	0xFEF
 10217                           postinc0	equ	0xFEE
 10218                           fsr0h	equ	0xFEA
 10219                           fsr0l	equ	0xFE9
 10220                           wreg	equ	0xFE8
 10221                           indf1	equ	0xFE7
 10222                           postinc1	equ	0xFE6
 10223                           postdec1	equ	0xFE5
 10224                           fsr1h	equ	0xFE2
 10225                           fsr1l	equ	0xFE1
 10226                           indf2	equ	0xFDF
 10227                           postinc2	equ	0xFDE
 10228                           postdec2	equ	0xFDD
 10229                           plusw2	equ	0xFDB
 10230                           fsr2h	equ	0xFDA
 10231                           fsr2l	equ	0xFD9
 10232                           status	equ	0xFD8
 10233                           
 10234 ;; *************** function _clust2sect *****************
 10235 ;; Defined at:
 10236 ;;		line 338 in file "bibliotecas/tff.c"
 10237 ;; Parameters:    Size  Location     Type
 10238 ;;  clust           2   12[BANK0 ] unsigned short 
 10239 ;; Auto vars:     Size  Location     Type
 10240 ;;  fs              2   32[COMRAM] PTR struct _FATFS
 10241 ;;		 -> NULL(0), fs(544), 
 10242 ;; Return value:  Size  Location     Type
 10243 ;;                  4   12[BANK0 ] unsigned long 
 10244 ;; Registers used:
 10245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10246 ;; Tracked objects:
 10247 ;;		On entry : 0/0
 10248 ;;		On exit  : 0/0
 10249 ;;		Unchanged: 0/0
 10250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10251 ;;      Params:         0       4       0       0       0       0       0       0       0
 10252 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10253 ;;      Temps:          0       5       0       0       0       0       0       0       0
 10254 ;;      Totals:         2       9       0       0       0       0       0       0       0
 10255 ;;Total ram usage:       11 bytes
 10256 ;; Hardware stack levels used:    1
 10257 ;; Hardware stack levels required when called:    4
 10258 ;; This function calls:
 10259 ;;		___lmul
 10260 ;; This function is called by:
 10261 ;;		_next_dir_entry
 10262 ;;		_trace_path
 10263 ;;		_reserve_direntry
 10264 ;;		_f_read
 10265 ;;		_f_write
 10266 ;;		_f_opendir
 10267 ;; This function uses a non-reentrant model
 10268 ;;
 10269                           
 10270                           	psect	text34
 10271  004526                     __ptext34:
 10272                           	opt stack 0
 10273  004526                     _clust2sect:
 10274                           	opt stack 21
 10275                           
 10276                           ;tff.c: 342: FATFS *fs = FatFs;
 10277                           
 10278                           ; BSR set to: 0
 10279                           ;incstack = 0
 10280  004526  C0FD  F021         	movff	_FatFs,clust2sect@fs
 10281  00452A  C0FE  F022         	movff	_FatFs+1,clust2sect@fs+1
 10282                           
 10283                           ;tff.c: 345: clust -= 2;
 10284  00452E  0E02               	movlw	2
 10285  004530  0100               	movlb	0	; () banked
 10286  004532  5F6C               	subwf	clust2sect@clust& (0+255),f,b
 10287  004534  0E00               	movlw	0
 10288  004536  5B6D               	subwfb	(clust2sect@clust+1)& (0+255),f,b
 10289                           
 10290                           ; BSR set to: 0
 10291                           ;tff.c: 346: if (clust >= (fs->max_clust - 2)) return 0;
 10292  004538  0EFE               	movlw	254
 10293  00453A  6F70               	movwf	??_clust2sect& (0+255),b
 10294  00453C  0EFF               	movlw	255
 10295  00453E  6F71               	movwf	(??_clust2sect+1)& (0+255),b
 10296  004540  EE20 F016          	lfsr	2,22
 10297  004544  5021               	movf	clust2sect@fs,w,c
 10298  004546  26D9               	addwf	fsr2l,f,c
 10299  004548  5022               	movf	clust2sect@fs+1,w,c
 10300  00454A  22DA               	addwfc	fsr2h,f,c
 10301  00454C  CFDE F072          	movff	postinc2,??_clust2sect+2
 10302  004550  CFDD F073          	movff	postdec2,??_clust2sect+3
 10303  004554  5170               	movf	??_clust2sect& (0+255),w,b
 10304  004556  2772               	addwf	(??_clust2sect+2)& (0+255),f,b
 10305  004558  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 10306  00455A  2373               	addwfc	(??_clust2sect+3)& (0+255),f,b
 10307  00455C  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 10308  00455E  5D6C               	subwf	clust2sect@clust& (0+255),w,b
 10309  004560  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 10310  004562  596D               	subwfb	(clust2sect@clust+1)& (0+255),w,b
 10311  004564  A0D8               	btfss	status,0,c
 10312  004566  D009               	goto	l970
 10313                           
 10314                           ; BSR set to: 0
 10315  004568  0E00               	movlw	0
 10316  00456A  6F6C               	movwf	?_clust2sect& (0+255),b
 10317  00456C  0E00               	movlw	0
 10318  00456E  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 10319  004570  0E00               	movlw	0
 10320  004572  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 10321  004574  0E00               	movlw	0
 10322  004576  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 10323                           
 10324                           ; BSR set to: 0
 10325  004578  0012               	return	
 10326  00457A                     l970:
 10327                           
 10328                           ; BSR set to: 0
 10329                           ;tff.c: 347: return (DWORD)clust * fs->csize + fs->database;
 10330                           
 10331                           ; BSR set to: 0
 10332  00457A  EE20 F010          	lfsr	2,16
 10333  00457E  5021               	movf	clust2sect@fs,w,c
 10334  004580  26D9               	addwf	fsr2l,f,c
 10335  004582  5022               	movf	clust2sect@fs+1,w,c
 10336  004584  22DA               	addwfc	fsr2h,f,c
 10337  004586  CFDE F070          	movff	postinc2,??_clust2sect
 10338  00458A  CFDE F071          	movff	postinc2,??_clust2sect+1
 10339  00458E  CFDE F072          	movff	postinc2,??_clust2sect+2
 10340  004592  CFDE F073          	movff	postinc2,??_clust2sect+3
 10341  004596  C06C  F060         	movff	clust2sect@clust,___lmul@multiplier
 10342  00459A  C06D  F061         	movff	clust2sect@clust+1,___lmul@multiplier+1
 10343  00459E  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
 10344  0045A0  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
 10345  0045A2  EE20 F01D          	lfsr	2,29
 10346  0045A6  5021               	movf	clust2sect@fs,w,c
 10347  0045A8  26D9               	addwf	fsr2l,f,c
 10348  0045AA  5022               	movf	clust2sect@fs+1,w,c
 10349  0045AC  22DA               	addwfc	fsr2h,f,c
 10350  0045AE  50DF               	movf	indf2,w,c
 10351  0045B0  6F74               	movwf	(??_clust2sect+4)& (0+255),b
 10352  0045B2  5174               	movf	(??_clust2sect+4)& (0+255),w,b
 10353  0045B4  6F64               	movwf	___lmul@multiplicand& (0+255),b
 10354  0045B6  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 10355  0045B8  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 10356  0045BA  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 10357  0045BC  EC18  F029         	call	___lmul	;wreg free
 10358  0045C0  0100               	movlb	0	; () banked
 10359  0045C2  5170               	movf	??_clust2sect& (0+255),w,b
 10360  0045C4  2560               	addwf	?___lmul& (0+255),w,b
 10361  0045C6  6F6C               	movwf	?_clust2sect& (0+255),b
 10362  0045C8  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 10363  0045CA  2161               	addwfc	(?___lmul+1)& (0+255),w,b
 10364  0045CC  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 10365  0045CE  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 10366  0045D0  2162               	addwfc	(?___lmul+2)& (0+255),w,b
 10367  0045D2  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 10368  0045D4  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 10369  0045D6  2163               	addwfc	(?___lmul+3)& (0+255),w,b
 10370  0045D8  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 10371  0045DA  0012               	return	
 10372  0045DC                     __end_of_clust2sect:
 10373                           	opt stack 0
 10374                           tosu	equ	0xFFF
 10375                           tosh	equ	0xFFE
 10376                           tosl	equ	0xFFD
 10377                           pclath	equ	0xFFA
 10378                           tblptru	equ	0xFF8
 10379                           tblptrh	equ	0xFF7
 10380                           tblptrl	equ	0xFF6
 10381                           tablat	equ	0xFF5
 10382                           prodh	equ	0xFF4
 10383                           prodl	equ	0xFF3
 10384                           intcon	equ	0xFF2
 10385                           intcon2	equ	0xFF1
 10386                           intcon3	equ	0xFF0
 10387                           indf0	equ	0xFEF
 10388                           postinc0	equ	0xFEE
 10389                           fsr0h	equ	0xFEA
 10390                           fsr0l	equ	0xFE9
 10391                           wreg	equ	0xFE8
 10392                           indf1	equ	0xFE7
 10393                           postinc1	equ	0xFE6
 10394                           postdec1	equ	0xFE5
 10395                           fsr1h	equ	0xFE2
 10396                           fsr1l	equ	0xFE1
 10397                           indf2	equ	0xFDF
 10398                           postinc2	equ	0xFDE
 10399                           postdec2	equ	0xFDD
 10400                           plusw2	equ	0xFDB
 10401                           fsr2h	equ	0xFDA
 10402                           fsr2l	equ	0xFD9
 10403                           status	equ	0xFD8
 10404                           
 10405 ;; *************** function _remove_chain *****************
 10406 ;; Defined at:
 10407 ;;		line 249 in file "bibliotecas/tff.c"
 10408 ;; Parameters:    Size  Location     Type
 10409 ;;  clust           2   86[BANK0 ] unsigned short 
 10410 ;; Auto vars:     Size  Location     Type
 10411 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 10412 ;;		 -> NULL(0), fs(544), 
 10413 ;;  nxt             2   90[BANK0 ] unsigned short 
 10414 ;; Return value:  Size  Location     Type
 10415 ;;                  1    wreg      enum E105
 10416 ;; Registers used:
 10417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10418 ;; Tracked objects:
 10419 ;;		On entry : 0/0
 10420 ;;		On exit  : 0/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10423 ;;      Params:         0       2       0       0       0       0       0       0       0
 10424 ;;      Locals:         0       4       0       0       0       0       0       0       0
 10425 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10426 ;;      Totals:         0       8       0       0       0       0       0       0       0
 10427 ;;Total ram usage:        8 bytes
 10428 ;; Hardware stack levels used:    1
 10429 ;; Hardware stack levels required when called:   10
 10430 ;; This function calls:
 10431 ;;		_get_cluster
 10432 ;;		_put_cluster
 10433 ;; This function is called by:
 10434 ;;		_f_open
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           	psect	text35
 10439  004736                     __ptext35:
 10440                           	opt stack 0
 10441  004736                     _remove_chain:
 10442                           	opt stack 16
 10443                           
 10444                           ;tff.c: 253: CLUST nxt;
 10445                           ;tff.c: 254: FATFS *fs = FatFs;
 10446                           
 10447                           ; BSR set to: 0
 10448                           ;incstack = 0
 10449  004736  C0FD  F0BC         	movff	_FatFs,remove_chain@fs
 10450  00473A  C0FE  F0BD         	movff	_FatFs+1,remove_chain@fs+1
 10451                           
 10452                           ;tff.c: 257: while (clust >= 2 && clust < fs->max_clust) {
 10453  00473E  D039               	goto	l939
 10454  004740                     
 10455                           ;tff.c: 258: nxt = get_cluster(clust);
 10456  004740  C0B6  F0A0         	movff	remove_chain@clust,get_cluster@clust
 10457  004744  C0B7  F0A1         	movff	remove_chain@clust+1,get_cluster@clust+1
 10458  004748  EC07  F019         	call	_get_cluster	;wreg free
 10459  00474C  C0A0  F0BA         	movff	?_get_cluster,remove_chain@nxt
 10460  004750  C0A1  F0BB         	movff	?_get_cluster+1,remove_chain@nxt+1
 10461                           
 10462                           ;tff.c: 259: if (nxt == 1) return FALSE;
 10463  004754  0100               	movlb	0	; () banked
 10464  004756  05BA               	decf	remove_chain@nxt& (0+255),w,b
 10465  004758  11BB               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 10466  00475A  A4D8               	btfss	status,2,c
 10467  00475C  D002               	goto	l941
 10468                           
 10469                           ; BSR set to: 0
 10470  00475E  0E00               	movlw	0
 10471                           
 10472                           ; BSR set to: 0
 10473  004760  0012               	return	
 10474  004762                     l941:
 10475                           
 10476                           ; BSR set to: 0
 10477                           ;tff.c: 260: if (!put_cluster(clust, 0)) return FALSE;
 10478                           
 10479                           ; BSR set to: 0
 10480  004762  C0B6  F0A0         	movff	remove_chain@clust,put_cluster@clust
 10481  004766  C0B7  F0A1         	movff	remove_chain@clust+1,put_cluster@clust+1
 10482  00476A  0E00               	movlw	0
 10483  00476C  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 10484  00476E  0E00               	movlw	0
 10485  004770  6FA2               	movwf	put_cluster@val& (0+255),b
 10486  004772  ECCA  F017         	call	_put_cluster	;wreg free
 10487  004776  0900               	iorlw	0
 10488  004778  A4D8               	btfss	status,2,c
 10489  00477A  D002               	goto	l943
 10490  00477C  0E00               	movlw	0
 10491  00477E  0012               	return	
 10492  004780                     l943:
 10493                           
 10494                           ;tff.c: 261: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 10495  004780  0100               	movlb	0	; () banked
 10496  004782  EE20 F01A          	lfsr	2,26
 10497  004786  51BC               	movf	remove_chain@fs& (0+255),w,b
 10498  004788  26D9               	addwf	fsr2l,f,c
 10499  00478A  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 10500  00478C  22DA               	addwfc	fsr2h,f,c
 10501  00478E  28DE               	incf	postinc2,w,c
 10502  004790  E103               	bnz	u12310
 10503  004792  28DE               	incf	postinc2,w,c
 10504  004794  B4D8               	btfsc	status,2,c
 10505  004796  D009               	goto	l944
 10506  004798                     u12310:
 10507                           
 10508                           ; BSR set to: 0
 10509                           ;tff.c: 262: fs->free_clust++;
 10510  004798  EE20 F01A          	lfsr	2,26
 10511  00479C  51BC               	movf	remove_chain@fs& (0+255),w,b
 10512  00479E  26D9               	addwf	fsr2l,f,c
 10513  0047A0  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 10514  0047A2  22DA               	addwfc	fsr2h,f,c
 10515  0047A4  2ADE               	incf	postinc2,f,c
 10516  0047A6  0E00               	movlw	0
 10517  0047A8  22DD               	addwfc	postdec2,f,c
 10518  0047AA                     l944:
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;tff.c: 266: }
 10522                           ;tff.c: 267: clust = nxt;
 10523                           
 10524                           ; BSR set to: 0
 10525  0047AA  C0BA  F0B6         	movff	remove_chain@nxt,remove_chain@clust
 10526  0047AE  C0BB  F0B7         	movff	remove_chain@nxt+1,remove_chain@clust+1
 10527  0047B2                     l939:
 10528                           
 10529                           ; BSR set to: 0
 10530  0047B2  0100               	movlb	0	; () banked
 10531  0047B4  51B7               	movf	(remove_chain@clust+1)& (0+255),w,b
 10532  0047B6  E104               	bnz	u12320
 10533  0047B8  0E02               	movlw	2
 10534  0047BA  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 10535  0047BC  A0D8               	btfss	status,0,c
 10536  0047BE  D00C               	goto	u12330
 10537  0047C0                     u12320:
 10538                           
 10539                           ; BSR set to: 0
 10540  0047C0  EE20 F016          	lfsr	2,22
 10541  0047C4  51BC               	movf	remove_chain@fs& (0+255),w,b
 10542  0047C6  26D9               	addwf	fsr2l,f,c
 10543  0047C8  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 10544  0047CA  22DA               	addwfc	fsr2h,f,c
 10545  0047CC  50DE               	movf	postinc2,w,c
 10546  0047CE  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 10547  0047D0  50DE               	movf	postinc2,w,c
 10548  0047D2  59B7               	subwfb	(remove_chain@clust+1)& (0+255),w,b
 10549  0047D4  A0D8               	btfss	status,0,c
 10550  0047D6  D7B4               	goto	l940
 10551  0047D8                     u12330:
 10552                           
 10553                           ; BSR set to: 0
 10554                           ;tff.c: 268: }
 10555                           ;tff.c: 269: return TRUE;
 10556                           
 10557                           ; BSR set to: 0
 10558                           
 10559                           ; BSR set to: 0
 10560  0047D8  0E01               	movlw	1
 10561  0047DA  0012               	return	
 10562  0047DC                     __end_of_remove_chain:
 10563                           	opt stack 0
 10564                           tosu	equ	0xFFF
 10565                           tosh	equ	0xFFE
 10566                           tosl	equ	0xFFD
 10567                           pclath	equ	0xFFA
 10568                           tblptru	equ	0xFF8
 10569                           tblptrh	equ	0xFF7
 10570                           tblptrl	equ	0xFF6
 10571                           tablat	equ	0xFF5
 10572                           prodh	equ	0xFF4
 10573                           prodl	equ	0xFF3
 10574                           intcon	equ	0xFF2
 10575                           intcon2	equ	0xFF1
 10576                           intcon3	equ	0xFF0
 10577                           indf0	equ	0xFEF
 10578                           postinc0	equ	0xFEE
 10579                           fsr0h	equ	0xFEA
 10580                           fsr0l	equ	0xFE9
 10581                           wreg	equ	0xFE8
 10582                           indf1	equ	0xFE7
 10583                           postinc1	equ	0xFE6
 10584                           postdec1	equ	0xFE5
 10585                           fsr1h	equ	0xFE2
 10586                           fsr1l	equ	0xFE1
 10587                           indf2	equ	0xFDF
 10588                           postinc2	equ	0xFDE
 10589                           postdec2	equ	0xFDD
 10590                           plusw2	equ	0xFDB
 10591                           fsr2h	equ	0xFDA
 10592                           fsr2l	equ	0xFD9
 10593                           status	equ	0xFD8
 10594                           
 10595 ;; *************** function _memcpy *****************
 10596 ;; Defined at:
 10597 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
 10598 ;; Parameters:    Size  Location     Type
 10599 ;;  d1              2    0[BANK0 ] PTR void 
 10600 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 10601 ;;  s1              2    2[BANK0 ] PTR const void 
 10602 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 10603 ;;		 -> fs(544), 
 10604 ;;  n               2    4[BANK0 ] unsigned int 
 10605 ;; Auto vars:     Size  Location     Type
 10606 ;;  s               2    9[BANK0 ] PTR const unsigned char 
 10607 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 10608 ;;		 -> fs(544), 
 10609 ;;  d               2    7[BANK0 ] PTR unsigned char 
 10610 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 10611 ;;  tmp             1    6[BANK0 ] unsigned char 
 10612 ;; Return value:  Size  Location     Type
 10613 ;;                  2    0[BANK0 ] PTR void 
 10614 ;; Registers used:
 10615 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10616 ;; Tracked objects:
 10617 ;;		On entry : 0/0
 10618 ;;		On exit  : 0/0
 10619 ;;		Unchanged: 0/0
 10620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10621 ;;      Params:         0       6       0       0       0       0       0       0       0
 10622 ;;      Locals:         0       5       0       0       0       0       0       0       0
 10623 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10624 ;;      Totals:         0      11       0       0       0       0       0       0       0
 10625 ;;Total ram usage:       11 bytes
 10626 ;; Hardware stack levels used:    1
 10627 ;; Hardware stack levels required when called:    3
 10628 ;; This function calls:
 10629 ;;		Nothing
 10630 ;; This function is called by:
 10631 ;;		_f_open
 10632 ;;		_f_read
 10633 ;;		_f_write
 10634 ;; This function uses a non-reentrant model
 10635 ;;
 10636                           
 10637                           	psect	text36
 10638  0054BE                     __ptext36:
 10639                           	opt stack 0
 10640  0054BE                     _memcpy:
 10641                           	opt stack 22
 10642                           
 10643                           ;incstack = 0
 10644  0054BE  C062  F069         	movff	memcpy@s1,memcpy@s
 10645  0054C2  C063  F06A         	movff	memcpy@s1+1,memcpy@s+1
 10646  0054C6  C060  F067         	movff	memcpy@d1,memcpy@d
 10647  0054CA  C061  F068         	movff	memcpy@d1+1,memcpy@d+1
 10648  0054CE  D011               	goto	l1826
 10649  0054D0                     l9256:
 10650  0054D0  C069  FFD9         	movff	memcpy@s,fsr2l
 10651  0054D4  C06A  FFDA         	movff	memcpy@s+1,fsr2h
 10652  0054D8  50DF               	movf	indf2,w,c
 10653  0054DA  0100               	movlb	0	; () banked
 10654  0054DC  6F66               	movwf	memcpy@tmp& (0+255),b
 10655                           
 10656                           ; BSR set to: 0
 10657  0054DE  4B69               	infsnz	memcpy@s& (0+255),f,b
 10658  0054E0  2B6A               	incf	(memcpy@s+1)& (0+255),f,b
 10659                           
 10660                           ; BSR set to: 0
 10661  0054E2  C067  FFD9         	movff	memcpy@d,fsr2l
 10662  0054E6  C068  FFDA         	movff	memcpy@d+1,fsr2h
 10663  0054EA  C066  FFDF         	movff	memcpy@tmp,indf2
 10664                           
 10665                           ; BSR set to: 0
 10666  0054EE  4B67               	infsnz	memcpy@d& (0+255),f,b
 10667  0054F0  2B68               	incf	(memcpy@d+1)& (0+255),f,b
 10668  0054F2                     l1826:
 10669                           
 10670                           ; BSR set to: 0
 10671  0054F2  0100               	movlb	0	; () banked
 10672  0054F4  0764               	decf	memcpy@n& (0+255),f,b
 10673  0054F6  A0D8               	btfss	status,0,c
 10674  0054F8  0765               	decf	(memcpy@n+1)& (0+255),f,b
 10675  0054FA  2964               	incf	memcpy@n& (0+255),w,b
 10676  0054FC  E1E9               	bnz	l9256
 10677  0054FE  2965               	incf	(memcpy@n+1)& (0+255),w,b
 10678  005500  B4D8               	btfsc	status,2,c
 10679  005502  0012               	return	
 10680  005504  D7E5               	goto	l1827
 10681  005506                     __end_of_memcpy:
 10682                           	opt stack 0
 10683                           tosu	equ	0xFFF
 10684                           tosh	equ	0xFFE
 10685                           tosl	equ	0xFFD
 10686                           pclath	equ	0xFFA
 10687                           tblptru	equ	0xFF8
 10688                           tblptrh	equ	0xFF7
 10689                           tblptrl	equ	0xFF6
 10690                           tablat	equ	0xFF5
 10691                           prodh	equ	0xFF4
 10692                           prodl	equ	0xFF3
 10693                           intcon	equ	0xFF2
 10694                           intcon2	equ	0xFF1
 10695                           intcon3	equ	0xFF0
 10696                           indf0	equ	0xFEF
 10697                           postinc0	equ	0xFEE
 10698                           fsr0h	equ	0xFEA
 10699                           fsr0l	equ	0xFE9
 10700                           wreg	equ	0xFE8
 10701                           indf1	equ	0xFE7
 10702                           postinc1	equ	0xFE6
 10703                           postdec1	equ	0xFE5
 10704                           fsr1h	equ	0xFE2
 10705                           fsr1l	equ	0xFE1
 10706                           indf2	equ	0xFDF
 10707                           postinc2	equ	0xFDE
 10708                           postdec2	equ	0xFDD
 10709                           plusw2	equ	0xFDB
 10710                           fsr2h	equ	0xFDA
 10711                           fsr2l	equ	0xFD9
 10712                           status	equ	0xFD8
 10713                           
 10714 ;; *************** function _auto_mount *****************
 10715 ;; Defined at:
 10716 ;;		line 651 in file "bibliotecas/tff.c"
 10717 ;; Parameters:    Size  Location     Type
 10718 ;;  path            2   51[BANK0 ] PTR PTR const unsigned c
 10719 ;;		 -> f_opendir@path(2), f_open@path(2), 
 10720 ;;  chk_wp          1   53[BANK0 ] unsigned char 
 10721 ;; Auto vars:     Size  Location     Type
 10722 ;;  fatsize         4   85[BANK0 ] unsigned long 
 10723 ;;  totalsect       4   77[BANK0 ] unsigned long 
 10724 ;;  bootsect        4   73[BANK0 ] unsigned long 
 10725 ;;  maxclust        4   69[BANK0 ] unsigned long 
 10726 ;;  fs              2   89[BANK0 ] PTR struct _FATFS
 10727 ;;		 -> NULL(0), fs(544), 
 10728 ;;  p               2   81[BANK0 ] PTR const unsigned char 
 10729 ;;		 -> STR_10(13), filename(15), 
 10730 ;;  stat            1   84[BANK0 ] unsigned char 
 10731 ;;  fmt             1   83[BANK0 ] unsigned char 
 10732 ;; Return value:  Size  Location     Type
 10733 ;;                  1    wreg      enum E155
 10734 ;; Registers used:
 10735 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10736 ;; Tracked objects:
 10737 ;;		On entry : 0/0
 10738 ;;		On exit  : 0/0
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10741 ;;      Params:         0       3       0       0       0       0       0       0       0
 10742 ;;      Locals:         0      22       0       0       0       0       0       0       0
 10743 ;;      Temps:          0      15       0       0       0       0       0       0       0
 10744 ;;      Totals:         0      40       0       0       0       0       0       0       0
 10745 ;;Total ram usage:       40 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    9
 10748 ;; This function calls:
 10749 ;;		___lldiv
 10750 ;;		___lmul
 10751 ;;		_check_fs
 10752 ;;		_disk_initialize
 10753 ;;		_disk_status
 10754 ;;		_memset
 10755 ;; This function is called by:
 10756 ;;		_f_open
 10757 ;;		_f_opendir
 10758 ;; This function uses a non-reentrant model
 10759 ;;
 10760                           
 10761                           	psect	text37
 10762  000E92                     __ptext37:
 10763                           	opt stack 0
 10764  000E92                     _auto_mount:
 10765                           	opt stack 17
 10766                           
 10767                           ;tff.c: 656: BYTE fmt;
 10768                           ;tff.c: 657: DSTATUS stat;
 10769                           ;tff.c: 658: DWORD bootsect, fatsize, totalsect, maxclust;
 10770                           ;tff.c: 659: const char *p = *path;
 10771                           
 10772                           ; BSR set to: 0
 10773                           ;incstack = 0
 10774  000E92  C093  FFD9         	movff	auto_mount@path,fsr2l
 10775  000E96  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 10776  000E9A  CFDE F0B1          	movff	postinc2,auto_mount@p
 10777  000E9E  CFDD F0B2          	movff	postdec2,auto_mount@p+1
 10778                           
 10779                           ;tff.c: 660: FATFS *fs;
 10780                           ;tff.c: 663: while (*p == ' ') p++;
 10781  000EA2  D003               	goto	l1099
 10782  000EA4  0100               	movlb	0	; () banked
 10783  000EA6  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 10784  000EA8  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 10785  000EAA                     l1099:
 10786                           
 10787                           ; BSR set to: 0
 10788  000EAA  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 10789  000EAE  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 10790  000EB2  6AF8               	clrf	tblptru,c
 10791  000EB4  0E07               	movlw	(high __ramtop+-1)
 10792  000EB6  64F7               	cpfsgt	tblptrh,c
 10793  000EB8  D003               	bra	u12607
 10794  000EBA  0008               	tblrd		*
 10795  000EBC  50F5               	movf	tablat,w,c
 10796  000EBE  D005               	bra	u12600
 10797  000EC0                     u12607:
 10798  000EC0  CFF6 FFE9          	movff	tblptrl,fsr0l
 10799  000EC4  CFF7 FFEA          	movff	tblptrh,fsr0h
 10800  000EC8  50EF               	movf	indf0,w,c
 10801  000ECA                     u12600:
 10802  000ECA  0A20               	xorlw	32
 10803  000ECC  B4D8               	btfsc	status,2,c
 10804  000ECE  D7EA               	goto	l1100
 10805                           
 10806                           ;tff.c: 664: if (*p == '/') p++;
 10807  000ED0  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 10808  000ED4  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 10809  000ED8  6AF8               	clrf	tblptru,c
 10810  000EDA  0E07               	movlw	(high __ramtop+-1)
 10811  000EDC  64F7               	cpfsgt	tblptrh,c
 10812  000EDE  D003               	bra	u12627
 10813  000EE0  0008               	tblrd		*
 10814  000EE2  50F5               	movf	tablat,w,c
 10815  000EE4  D005               	bra	u12620
 10816  000EE6                     u12627:
 10817  000EE6  CFF6 FFE9          	movff	tblptrl,fsr0l
 10818  000EEA  CFF7 FFEA          	movff	tblptrh,fsr0h
 10819  000EEE  50EF               	movf	indf0,w,c
 10820  000EF0                     u12620:
 10821  000EF0  0A2F               	xorlw	47
 10822  000EF2  A4D8               	btfss	status,2,c
 10823  000EF4  D003               	goto	l1102
 10824  000EF6  0100               	movlb	0	; () banked
 10825  000EF8  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 10826  000EFA  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 10827  000EFC                     l1102:
 10828                           
 10829                           ;tff.c: 665: *path = p;
 10830                           
 10831                           ; BSR set to: 0
 10832  000EFC  C093  FFD9         	movff	auto_mount@path,fsr2l
 10833  000F00  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 10834  000F04  C0B1  FFDE         	movff	auto_mount@p,postinc2
 10835  000F08  C0B2  FFDD         	movff	auto_mount@p+1,postdec2
 10836                           
 10837                           ;tff.c: 668: fs = FatFs;
 10838  000F0C  C0FD  F0B9         	movff	_FatFs,auto_mount@fs
 10839  000F10  C0FE  F0BA         	movff	_FatFs+1,auto_mount@fs+1
 10840                           
 10841                           ;tff.c: 669: if (!fs) return FR_NOT_ENABLED;
 10842  000F14  0100               	movlb	0	; () banked
 10843  000F16  51B9               	movf	auto_mount@fs& (0+255),w,b
 10844  000F18  11BA               	iorwf	(auto_mount@fs+1)& (0+255),w,b
 10845  000F1A  A4D8               	btfss	status,2,c
 10846  000F1C  D002               	goto	l1103
 10847                           
 10848                           ; BSR set to: 0
 10849  000F1E  0E0A               	movlw	10
 10850                           
 10851                           ; BSR set to: 0
 10852  000F20  0012               	return	
 10853  000F22                     l1103:
 10854                           
 10855                           ; BSR set to: 0
 10856                           ;tff.c: 671: if (fs->fs_type) {
 10857                           
 10858                           ; BSR set to: 0
 10859  000F22  EE20 F01C          	lfsr	2,28
 10860  000F26  51B9               	movf	auto_mount@fs& (0+255),w,b
 10861  000F28  26D9               	addwf	fsr2l,f,c
 10862  000F2A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10863  000F2C  22DA               	addwfc	fsr2h,f,c
 10864  000F2E  50DF               	movf	indf2,w,c
 10865  000F30  B4D8               	btfsc	status,2,c
 10866  000F32  D00F               	goto	l1106
 10867                           
 10868                           ; BSR set to: 0
 10869                           ;tff.c: 672: stat = disk_status(0);
 10870  000F34  0E00               	movlw	0
 10871  000F36  EC83  F02A         	call	_disk_status
 10872  000F3A  0100               	movlb	0	; () banked
 10873  000F3C  6FB4               	movwf	auto_mount@stat& (0+255),b
 10874                           
 10875                           ; BSR set to: 0
 10876                           ;tff.c: 673: if (!(stat & 0x01)) {
 10877  000F3E  B1B4               	btfsc	auto_mount@stat& (0+255),0,b
 10878  000F40  D008               	goto	l1106
 10879                           
 10880                           ; BSR set to: 0
 10881                           ;tff.c: 675: if (chk_wp && (stat & 0x04))
 10882  000F42  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 10883  000F44  A4D8               	btfss	status,2,c
 10884                           
 10885                           ; BSR set to: 0
 10886  000F46  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 10887  000F48  D002               	goto	l1107
 10888                           
 10889                           ; BSR set to: 0
 10890                           ;tff.c: 676: return FR_WRITE_PROTECTED;
 10891  000F4A  0E09               	movlw	9
 10892                           
 10893                           ; BSR set to: 0
 10894  000F4C  0012               	return	
 10895  000F4E                     l1107:
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;tff.c: 678: return FR_OK;
 10899                           
 10900                           ; BSR set to: 0
 10901  000F4E  0E00               	movlw	0
 10902                           
 10903                           ; BSR set to: 0
 10904  000F50  0012               	return	
 10905  000F52                     l1106:
 10906                           
 10907                           ; BSR set to: 0
 10908                           ;tff.c: 679: }
 10909                           ;tff.c: 680: }
 10910                           ;tff.c: 684: memset(fs, 0, sizeof(FATFS));
 10911                           
 10912                           ; BSR set to: 0
 10913                           
 10914                           ; BSR set to: 0
 10915  000F52  C0B9  F060         	movff	auto_mount@fs,memset@p1
 10916  000F56  C0BA  F061         	movff	auto_mount@fs+1,memset@p1+1
 10917  000F5A  0E00               	movlw	0
 10918  000F5C  6F63               	movwf	(memset@c+1)& (0+255),b
 10919  000F5E  0E00               	movlw	0
 10920  000F60  6F62               	movwf	memset@c& (0+255),b
 10921  000F62  0E02               	movlw	2
 10922  000F64  6F65               	movwf	(memset@n+1)& (0+255),b
 10923  000F66  0E20               	movlw	32
 10924  000F68  6F64               	movwf	memset@n& (0+255),b
 10925  000F6A  ECE2  F02B         	call	_memset	;wreg free
 10926                           
 10927                           ;tff.c: 685: stat = disk_initialize(0);
 10928  000F6E  0E00               	movlw	0
 10929  000F70  EC90  F02B         	call	_disk_initialize
 10930  000F74  0100               	movlb	0	; () banked
 10931  000F76  6FB4               	movwf	auto_mount@stat& (0+255),b
 10932                           
 10933                           ; BSR set to: 0
 10934                           ;tff.c: 686: if (stat & 0x01)
 10935  000F78  A1B4               	btfss	auto_mount@stat& (0+255),0,b
 10936  000F7A  D002               	goto	l1108
 10937                           
 10938                           ; BSR set to: 0
 10939                           ;tff.c: 687: return FR_NOT_READY;
 10940  000F7C  0E01               	movlw	1
 10941                           
 10942                           ; BSR set to: 0
 10943  000F7E  0012               	return	
 10944  000F80                     l1108:
 10945                           
 10946                           ; BSR set to: 0
 10947                           ;tff.c: 689: if (chk_wp && (stat & 0x04))
 10948                           
 10949                           ; BSR set to: 0
 10950  000F80  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 10951  000F82  A4D8               	btfss	status,2,c
 10952                           
 10953                           ; BSR set to: 0
 10954  000F84  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 10955  000F86  D002               	goto	l1109
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;tff.c: 690: return FR_WRITE_PROTECTED;
 10959  000F88  0E09               	movlw	9
 10960                           
 10961                           ; BSR set to: 0
 10962  000F8A  0012               	return	
 10963  000F8C                     l1109:
 10964                           
 10965                           ; BSR set to: 0
 10966                           ;tff.c: 694: fmt = check_fs(bootsect = 0);
 10967                           
 10968                           ; BSR set to: 0
 10969  000F8C  0E00               	movlw	0
 10970  000F8E  6FA9               	movwf	auto_mount@bootsect& (0+255),b
 10971  000F90  0E00               	movlw	0
 10972  000F92  6FAA               	movwf	(auto_mount@bootsect+1)& (0+255),b
 10973  000F94  0E00               	movlw	0
 10974  000F96  6FAB               	movwf	(auto_mount@bootsect+2)& (0+255),b
 10975  000F98  0E00               	movlw	0
 10976  000F9A  6FAC               	movwf	(auto_mount@bootsect+3)& (0+255),b
 10977  000F9C  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 10978  000FA0  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 10979  000FA4  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 10980  000FA8  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 10981  000FAC  EC0F  F026         	call	_check_fs	;wreg free
 10982  000FB0  0100               	movlb	0	; () banked
 10983  000FB2  6FB3               	movwf	auto_mount@fmt& (0+255),b
 10984                           
 10985                           ; BSR set to: 0
 10986                           ;tff.c: 696: if (fmt == 1) {
 10987  000FB4  05B3               	decf	auto_mount@fmt& (0+255),w,b
 10988  000FB6  A4D8               	btfss	status,2,c
 10989  000FB8  D023               	goto	l1111
 10990                           
 10991                           ; BSR set to: 0
 10992                           ;tff.c: 698: if (fs->win[446+4]) {
 10993  000FBA  EE21 F0E2          	lfsr	2,482
 10994  000FBE  51B9               	movf	auto_mount@fs& (0+255),w,b
 10995  000FC0  26D9               	addwf	fsr2l,f,c
 10996  000FC2  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10997  000FC4  22DA               	addwfc	fsr2h,f,c
 10998  000FC6  50DF               	movf	indf2,w,c
 10999  000FC8  B4D8               	btfsc	status,2,c
 11000  000FCA  D01A               	goto	l1111
 11001                           
 11002                           ; BSR set to: 0
 11003                           ;tff.c: 699: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 11004  000FCC  EE21 F0E6          	lfsr	2,486
 11005  000FD0  51B9               	movf	auto_mount@fs& (0+255),w,b
 11006  000FD2  26D9               	addwf	fsr2l,f,c
 11007  000FD4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11008  000FD6  22DA               	addwfc	fsr2h,f,c
 11009  000FD8  CFDE F0A9          	movff	postinc2,auto_mount@bootsect
 11010  000FDC  CFDE F0AA          	movff	postinc2,auto_mount@bootsect+1
 11011  000FE0  CFDE F0AB          	movff	postinc2,auto_mount@bootsect+2
 11012  000FE4  CFDE F0AC          	movff	postinc2,auto_mount@bootsect+3
 11013                           
 11014                           ; BSR set to: 0
 11015                           ;tff.c: 700: fmt = check_fs(bootsect);
 11016  000FE8  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 11017  000FEC  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 11018  000FF0  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 11019  000FF4  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 11020  000FF8  EC0F  F026         	call	_check_fs	;wreg free
 11021  000FFC  0100               	movlb	0	; () banked
 11022  000FFE  6FB3               	movwf	auto_mount@fmt& (0+255),b
 11023  001000                     l1111:
 11024                           
 11025                           ; BSR set to: 0
 11026                           ;tff.c: 701: }
 11027                           ;tff.c: 702: }
 11028                           ;tff.c: 703: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])) != 512U)
 11029                           
 11030                           ; BSR set to: 0
 11031                           
 11032                           ; BSR set to: 0
 11033  001000  51B3               	movf	auto_mount@fmt& (0+255),w,b
 11034  001002  A4D8               	btfss	status,2,c
 11035  001004  D00C               	goto	u12750
 11036                           
 11037                           ; BSR set to: 0
 11038  001006  EE20 F02B          	lfsr	2,43
 11039  00100A  51B9               	movf	auto_mount@fs& (0+255),w,b
 11040  00100C  26D9               	addwf	fsr2l,f,c
 11041  00100E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11042  001010  22DA               	addwfc	fsr2h,f,c
 11043  001012  50DE               	movf	postinc2,w,c
 11044  001014  E104               	bnz	l10232
 11045  001016  0E02               	movlw	2
 11046  001018  18DE               	xorwf	postinc2,w,c
 11047  00101A  B4D8               	btfsc	status,2,c
 11048  00101C  D002               	goto	l1112
 11049  00101E                     u12750:
 11050  00101E                     l10232:
 11051                           
 11052                           ; BSR set to: 0
 11053                           ;tff.c: 704: return FR_NO_FILESYSTEM;
 11054  00101E  0E0B               	movlw	11
 11055                           
 11056                           ; BSR set to: 0
 11057  001020  0012               	return	
 11058  001022                     l1112:
 11059                           
 11060                           ; BSR set to: 0
 11061                           ;tff.c: 707: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 11062                           
 11063                           ; BSR set to: 0
 11064  001022  EE20 F036          	lfsr	2,54
 11065  001026  51B9               	movf	auto_mount@fs& (0+255),w,b
 11066  001028  26D9               	addwf	fsr2l,f,c
 11067  00102A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11068  00102C  22DA               	addwfc	fsr2h,f,c
 11069  00102E  CFDE F096          	movff	postinc2,??_auto_mount
 11070  001032  CFDD F097          	movff	postdec2,??_auto_mount+1
 11071  001036  C096  F0B5         	movff	??_auto_mount,auto_mount@fatsize
 11072  00103A  C097  F0B6         	movff	??_auto_mount+1,auto_mount@fatsize+1
 11073  00103E  6BB7               	clrf	(auto_mount@fatsize+2)& (0+255),b
 11074  001040  6BB8               	clrf	(auto_mount@fatsize+3)& (0+255),b
 11075                           
 11076                           ; BSR set to: 0
 11077                           ;tff.c: 708: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 11078  001042  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 11079  001044  11B6               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 11080  001046  11B7               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 11081  001048  11B8               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 11082  00104A  A4D8               	btfss	status,2,c
 11083  00104C  D00E               	goto	l1115
 11084                           
 11085                           ; BSR set to: 0
 11086  00104E  EE20 F044          	lfsr	2,68
 11087  001052  51B9               	movf	auto_mount@fs& (0+255),w,b
 11088  001054  26D9               	addwf	fsr2l,f,c
 11089  001056  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11090  001058  22DA               	addwfc	fsr2h,f,c
 11091  00105A  CFDE F0B5          	movff	postinc2,auto_mount@fatsize
 11092  00105E  CFDE F0B6          	movff	postinc2,auto_mount@fatsize+1
 11093  001062  CFDE F0B7          	movff	postinc2,auto_mount@fatsize+2
 11094  001066  CFDE F0B8          	movff	postinc2,auto_mount@fatsize+3
 11095  00106A                     l1115:
 11096                           
 11097                           ; BSR set to: 0
 11098                           ;tff.c: 709: fs->sects_fat = (CLUST)fatsize;
 11099  00106A  EE20 F014          	lfsr	2,20
 11100  00106E  51B9               	movf	auto_mount@fs& (0+255),w,b
 11101  001070  26D9               	addwf	fsr2l,f,c
 11102  001072  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11103  001074  22DA               	addwfc	fsr2h,f,c
 11104  001076  C0B5  FFDE         	movff	auto_mount@fatsize,postinc2
 11105  00107A  C0B6  FFDD         	movff	auto_mount@fatsize+1,postdec2
 11106                           
 11107                           ; BSR set to: 0
 11108                           ;tff.c: 710: fs->n_fats = fs->win[16];
 11109  00107E  EE20 F030          	lfsr	2,48
 11110  001082  51B9               	movf	auto_mount@fs& (0+255),w,b
 11111  001084  26D9               	addwf	fsr2l,f,c
 11112  001086  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11113  001088  22DA               	addwfc	fsr2h,f,c
 11114  00108A  EE10 F01E          	lfsr	1,30
 11115  00108E  51B9               	movf	auto_mount@fs& (0+255),w,b
 11116  001090  26E1               	addwf	fsr1l,f,c
 11117  001092  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11118  001094  22E2               	addwfc	fsr1h,f,c
 11119  001096  CFDF FFE7          	movff	indf2,indf1
 11120                           
 11121                           ; BSR set to: 0
 11122                           ;tff.c: 711: fatsize *= fs->n_fats;
 11123  00109A  C0B5  F060         	movff	auto_mount@fatsize,___lmul@multiplier
 11124  00109E  C0B6  F061         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 11125  0010A2  C0B7  F062         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 11126  0010A6  C0B8  F063         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 11127  0010AA  EE20 F01E          	lfsr	2,30
 11128  0010AE  51B9               	movf	auto_mount@fs& (0+255),w,b
 11129  0010B0  26D9               	addwf	fsr2l,f,c
 11130  0010B2  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11131  0010B4  22DA               	addwfc	fsr2h,f,c
 11132  0010B6  50DF               	movf	indf2,w,c
 11133  0010B8  6F96               	movwf	??_auto_mount& (0+255),b
 11134  0010BA  5196               	movf	??_auto_mount& (0+255),w,b
 11135  0010BC  6F64               	movwf	___lmul@multiplicand& (0+255),b
 11136  0010BE  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 11137  0010C0  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 11138  0010C2  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 11139  0010C4  EC18  F029         	call	___lmul	;wreg free
 11140  0010C8  C060  F0B5         	movff	?___lmul,auto_mount@fatsize
 11141  0010CC  C061  F0B6         	movff	?___lmul+1,auto_mount@fatsize+1
 11142  0010D0  C062  F0B7         	movff	?___lmul+2,auto_mount@fatsize+2
 11143  0010D4  C063  F0B8         	movff	?___lmul+3,auto_mount@fatsize+3
 11144                           
 11145                           ;tff.c: 712: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 11146  0010D8  0100               	movlb	0	; () banked
 11147  0010DA  EE20 F02E          	lfsr	2,46
 11148  0010DE  51B9               	movf	auto_mount@fs& (0+255),w,b
 11149  0010E0  26D9               	addwf	fsr2l,f,c
 11150  0010E2  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11151  0010E4  22DA               	addwfc	fsr2h,f,c
 11152  0010E6  CFDE F096          	movff	postinc2,??_auto_mount
 11153  0010EA  CFDD F097          	movff	postdec2,??_auto_mount+1
 11154  0010EE  5196               	movf	??_auto_mount& (0+255),w,b
 11155  0010F0  25A9               	addwf	auto_mount@bootsect& (0+255),w,b
 11156  0010F2  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 11157  0010F4  5197               	movf	(??_auto_mount+1)& (0+255),w,b
 11158  0010F6  21AA               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 11159  0010F8  6F99               	movwf	(??_auto_mount+3)& (0+255),b
 11160  0010FA  0E00               	movlw	0
 11161  0010FC  21AB               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 11162  0010FE  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 11163  001100  0E00               	movlw	0
 11164  001102  21AC               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 11165  001104  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 11166  001106  EE20 F008          	lfsr	2,8
 11167  00110A  51B9               	movf	auto_mount@fs& (0+255),w,b
 11168  00110C  26D9               	addwf	fsr2l,f,c
 11169  00110E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11170  001110  22DA               	addwfc	fsr2h,f,c
 11171  001112  C098  FFDE         	movff	??_auto_mount+2,postinc2
 11172  001116  C099  FFDE         	movff	??_auto_mount+3,postinc2
 11173  00111A  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 11174  00111E  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 11175                           
 11176                           ; BSR set to: 0
 11177                           ;tff.c: 713: fs->csize = fs->win[13];
 11178  001122  EE20 F02D          	lfsr	2,45
 11179  001126  51B9               	movf	auto_mount@fs& (0+255),w,b
 11180  001128  26D9               	addwf	fsr2l,f,c
 11181  00112A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11182  00112C  22DA               	addwfc	fsr2h,f,c
 11183  00112E  EE10 F01D          	lfsr	1,29
 11184  001132  51B9               	movf	auto_mount@fs& (0+255),w,b
 11185  001134  26E1               	addwf	fsr1l,f,c
 11186  001136  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11187  001138  22E2               	addwfc	fsr1h,f,c
 11188  00113A  CFDF FFE7          	movff	indf2,indf1
 11189                           
 11190                           ; BSR set to: 0
 11191                           ;tff.c: 714: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 11192  00113E  EE20 F031          	lfsr	2,49
 11193  001142  51B9               	movf	auto_mount@fs& (0+255),w,b
 11194  001144  26D9               	addwf	fsr2l,f,c
 11195  001146  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11196  001148  22DA               	addwfc	fsr2h,f,c
 11197  00114A  EE10 F002          	lfsr	1,2
 11198  00114E  51B9               	movf	auto_mount@fs& (0+255),w,b
 11199  001150  26E1               	addwf	fsr1l,f,c
 11200  001152  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11201  001154  22E2               	addwfc	fsr1h,f,c
 11202  001156  CFDE FFE6          	movff	postinc2,postinc1
 11203  00115A  CFDD FFE5          	movff	postdec2,postdec1
 11204                           
 11205                           ; BSR set to: 0
 11206                           ;tff.c: 715: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 11207  00115E  EE20 F033          	lfsr	2,51
 11208  001162  51B9               	movf	auto_mount@fs& (0+255),w,b
 11209  001164  26D9               	addwf	fsr2l,f,c
 11210  001166  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11211  001168  22DA               	addwfc	fsr2h,f,c
 11212  00116A  CFDE F096          	movff	postinc2,??_auto_mount
 11213  00116E  CFDD F097          	movff	postdec2,??_auto_mount+1
 11214  001172  C096  F0AD         	movff	??_auto_mount,auto_mount@totalsect
 11215  001176  C097  F0AE         	movff	??_auto_mount+1,auto_mount@totalsect+1
 11216  00117A  6BAF               	clrf	(auto_mount@totalsect+2)& (0+255),b
 11217  00117C  6BB0               	clrf	(auto_mount@totalsect+3)& (0+255),b
 11218                           
 11219                           ; BSR set to: 0
 11220                           ;tff.c: 716: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 11221  00117E  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 11222  001180  11AE               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 11223  001182  11AF               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 11224  001184  11B0               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 11225  001186  A4D8               	btfss	status,2,c
 11226  001188  D00E               	goto	l1116
 11227                           
 11228                           ; BSR set to: 0
 11229  00118A  EE20 F040          	lfsr	2,64
 11230  00118E  51B9               	movf	auto_mount@fs& (0+255),w,b
 11231  001190  26D9               	addwf	fsr2l,f,c
 11232  001192  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11233  001194  22DA               	addwfc	fsr2h,f,c
 11234  001196  CFDE F0AD          	movff	postinc2,auto_mount@totalsect
 11235  00119A  CFDE F0AE          	movff	postinc2,auto_mount@totalsect+1
 11236  00119E  CFDE F0AF          	movff	postinc2,auto_mount@totalsect+2
 11237  0011A2  CFDE F0B0          	movff	postinc2,auto_mount@totalsect+3
 11238  0011A6                     l1116:
 11239                           
 11240                           ; BSR set to: 0
 11241                           ;tff.c: 717: fs->max_clust = maxclust = (totalsect
 11242                           ;tff.c: 718: - (WORD)(*(WORD*)(BYTE*)(&fs->win[14])) - fatsize - fs->n_rootdir / 16
 11243                           ;tff.c: 719: ) / fs->csize + 2;
 11244                           
 11245                           ; BSR set to: 0
 11246  0011A6  EE20 F002          	lfsr	2,2
 11247  0011AA  51B9               	movf	auto_mount@fs& (0+255),w,b
 11248  0011AC  26D9               	addwf	fsr2l,f,c
 11249  0011AE  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11250  0011B0  22DA               	addwfc	fsr2h,f,c
 11251  0011B2  CFDE F096          	movff	postinc2,??_auto_mount
 11252  0011B6  CFDD F097          	movff	postdec2,??_auto_mount+1
 11253  0011BA  0E04               	movlw	4
 11254  0011BC  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 11255  0011BE                     u12785:
 11256  0011BE  90D8               	bcf	status,0,c
 11257  0011C0  3397               	rrcf	(??_auto_mount+1)& (0+255),f,b
 11258  0011C2  3396               	rrcf	??_auto_mount& (0+255),f,b
 11259  0011C4  2F98               	decfsz	(??_auto_mount+2)& (0+255),f,b
 11260  0011C6  D7FB               	goto	u12785
 11261  0011C8  EE20 F02E          	lfsr	2,46
 11262  0011CC  51B9               	movf	auto_mount@fs& (0+255),w,b
 11263  0011CE  26D9               	addwf	fsr2l,f,c
 11264  0011D0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11265  0011D2  22DA               	addwfc	fsr2h,f,c
 11266  0011D4  CFDE F099          	movff	postinc2,??_auto_mount+3
 11267  0011D8  CFDD F09A          	movff	postdec2,??_auto_mount+4
 11268  0011DC  5199               	movf	(??_auto_mount+3)& (0+255),w,b
 11269  0011DE  2596               	addwf	??_auto_mount& (0+255),w,b
 11270  0011E0  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 11271  0011E2  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 11272  0011E4  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11273  0011E6  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 11274  0011E8  6B9D               	clrf	(??_auto_mount+7)& (0+255),b
 11275  0011EA  B0D8               	btfsc	status,0,c
 11276  0011EC  2B9D               	incf	(??_auto_mount+7)& (0+255),f,b
 11277  0011EE  6B9E               	clrf	(??_auto_mount+8)& (0+255),b
 11278  0011F0  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 11279  0011F2  259B               	addwf	(??_auto_mount+5)& (0+255),w,b
 11280  0011F4  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 11281  0011F6  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11282  0011F8  219C               	addwfc	(??_auto_mount+6)& (0+255),w,b
 11283  0011FA  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 11284  0011FC  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11285  0011FE  219D               	addwfc	(??_auto_mount+7)& (0+255),w,b
 11286  001200  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 11287  001202  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11288  001204  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 11289  001206  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 11290  001208  1F9F               	comf	(??_auto_mount+9)& (0+255),f,b
 11291  00120A  1FA0               	comf	(??_auto_mount+10)& (0+255),f,b
 11292  00120C  1FA1               	comf	(??_auto_mount+11)& (0+255),f,b
 11293  00120E  1FA2               	comf	(??_auto_mount+12)& (0+255),f,b
 11294  001210  2B9F               	incf	(??_auto_mount+9)& (0+255),f,b
 11295  001212  0E00               	movlw	0
 11296  001214  23A0               	addwfc	(??_auto_mount+10)& (0+255),f,b
 11297  001216  23A1               	addwfc	(??_auto_mount+11)& (0+255),f,b
 11298  001218  23A2               	addwfc	(??_auto_mount+12)& (0+255),f,b
 11299  00121A  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 11300  00121C  259F               	addwf	(??_auto_mount+9)& (0+255),w,b
 11301  00121E  6F60               	movwf	___lldiv@dividend& (0+255),b
 11302  001220  51AE               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 11303  001222  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 11304  001224  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 11305  001226  51AF               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 11306  001228  21A1               	addwfc	(??_auto_mount+11)& (0+255),w,b
 11307  00122A  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 11308  00122C  51B0               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 11309  00122E  21A2               	addwfc	(??_auto_mount+12)& (0+255),w,b
 11310  001230  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 11311  001232  EE20 F01D          	lfsr	2,29
 11312  001236  51B9               	movf	auto_mount@fs& (0+255),w,b
 11313  001238  26D9               	addwf	fsr2l,f,c
 11314  00123A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11315  00123C  22DA               	addwfc	fsr2h,f,c
 11316  00123E  50DF               	movf	indf2,w,c
 11317  001240  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 11318  001242  51A3               	movf	(??_auto_mount+13)& (0+255),w,b
 11319  001244  6F64               	movwf	___lldiv@divisor& (0+255),b
 11320  001246  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 11321  001248  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 11322  00124A  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 11323  00124C  EC60  F027         	call	___lldiv	;wreg free
 11324  001250  0E02               	movlw	2
 11325  001252  0100               	movlb	0	; () banked
 11326  001254  2560               	addwf	?___lldiv& (0+255),w,b
 11327  001256  6FA5               	movwf	auto_mount@maxclust& (0+255),b
 11328  001258  0E00               	movlw	0
 11329  00125A  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 11330  00125C  6FA6               	movwf	(auto_mount@maxclust+1)& (0+255),b
 11331  00125E  0E00               	movlw	0
 11332  001260  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
 11333  001262  6FA7               	movwf	(auto_mount@maxclust+2)& (0+255),b
 11334  001264  0E00               	movlw	0
 11335  001266  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
 11336  001268  6FA8               	movwf	(auto_mount@maxclust+3)& (0+255),b
 11337  00126A  EE20 F016          	lfsr	2,22
 11338  00126E  51B9               	movf	auto_mount@fs& (0+255),w,b
 11339  001270  26D9               	addwf	fsr2l,f,c
 11340  001272  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11341  001274  22DA               	addwfc	fsr2h,f,c
 11342  001276  C0A5  FFDE         	movff	auto_mount@maxclust,postinc2
 11343  00127A  C0A6  FFDD         	movff	auto_mount@maxclust+1,postdec2
 11344                           
 11345                           ; BSR set to: 0
 11346                           ;tff.c: 721: fmt = 1;
 11347  00127E  0E01               	movlw	1
 11348  001280  6FB3               	movwf	auto_mount@fmt& (0+255),b
 11349                           
 11350                           ; BSR set to: 0
 11351                           ;tff.c: 722: if (maxclust >= 0xFF7) fmt = 2;
 11352  001282  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 11353  001284  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 11354  001286  E106               	bnz	u12790
 11355  001288  0EF7               	movlw	247
 11356  00128A  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 11357  00128C  0E0F               	movlw	15
 11358  00128E  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 11359  001290  A0D8               	btfss	status,0,c
 11360  001292  D002               	goto	l1117
 11361  001294                     u12790:
 11362                           
 11363                           ; BSR set to: 0
 11364  001294  0E02               	movlw	2
 11365  001296  6FB3               	movwf	auto_mount@fmt& (0+255),b
 11366  001298                     l1117:
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;tff.c: 723: if (maxclust >= 0xFFF7)
 11370                           
 11371                           ; BSR set to: 0
 11372  001298  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 11373  00129A  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 11374  00129C  E106               	bnz	u12800
 11375  00129E  0EF7               	movlw	247
 11376  0012A0  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 11377  0012A2  0EFF               	movlw	255
 11378  0012A4  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 11379  0012A6  A0D8               	btfss	status,0,c
 11380  0012A8  D002               	goto	l1118
 11381  0012AA                     u12800:
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;tff.c: 725: return FR_NO_FILESYSTEM;
 11385  0012AA  0E0B               	movlw	11
 11386                           
 11387                           ; BSR set to: 0
 11388  0012AC  0012               	return	
 11389  0012AE                     l1118:
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;tff.c: 732: fs->dirbase = fs->fatbase + fatsize;
 11393                           
 11394                           ; BSR set to: 0
 11395  0012AE  EE20 F008          	lfsr	2,8
 11396  0012B2  51B9               	movf	auto_mount@fs& (0+255),w,b
 11397  0012B4  26D9               	addwf	fsr2l,f,c
 11398  0012B6  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11399  0012B8  22DA               	addwfc	fsr2h,f,c
 11400  0012BA  CFDE F096          	movff	postinc2,??_auto_mount
 11401  0012BE  CFDE F097          	movff	postinc2,??_auto_mount+1
 11402  0012C2  CFDE F098          	movff	postinc2,??_auto_mount+2
 11403  0012C6  CFDE F099          	movff	postinc2,??_auto_mount+3
 11404  0012CA  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 11405  0012CC  2596               	addwf	??_auto_mount& (0+255),w,b
 11406  0012CE  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 11407  0012D0  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11408  0012D2  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11409  0012D4  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 11410  0012D6  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11411  0012D8  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 11412  0012DA  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 11413  0012DC  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11414  0012DE  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 11415  0012E0  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 11416  0012E2  EE20 F00C          	lfsr	2,12
 11417  0012E6  51B9               	movf	auto_mount@fs& (0+255),w,b
 11418  0012E8  26D9               	addwf	fsr2l,f,c
 11419  0012EA  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11420  0012EC  22DA               	addwfc	fsr2h,f,c
 11421  0012EE  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 11422  0012F2  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 11423  0012F6  C09C  FFDE         	movff	??_auto_mount+6,postinc2
 11424  0012FA  C09D  FFDE         	movff	??_auto_mount+7,postinc2
 11425                           
 11426                           ;tff.c: 733: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 11427  0012FE  EE20 F008          	lfsr	2,8
 11428  001302  51B9               	movf	auto_mount@fs& (0+255),w,b
 11429  001304  26D9               	addwf	fsr2l,f,c
 11430  001306  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11431  001308  22DA               	addwfc	fsr2h,f,c
 11432  00130A  CFDE F096          	movff	postinc2,??_auto_mount
 11433  00130E  CFDE F097          	movff	postinc2,??_auto_mount+1
 11434  001312  CFDE F098          	movff	postinc2,??_auto_mount+2
 11435  001316  CFDE F099          	movff	postinc2,??_auto_mount+3
 11436  00131A  EE20 F002          	lfsr	2,2
 11437  00131E  51B9               	movf	auto_mount@fs& (0+255),w,b
 11438  001320  26D9               	addwf	fsr2l,f,c
 11439  001322  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11440  001324  22DA               	addwfc	fsr2h,f,c
 11441  001326  CFDE F09A          	movff	postinc2,??_auto_mount+4
 11442  00132A  CFDD F09B          	movff	postdec2,??_auto_mount+5
 11443  00132E  0E04               	movlw	4
 11444  001330  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 11445  001332                     u12815:
 11446  001332  90D8               	bcf	status,0,c
 11447  001334  339B               	rrcf	(??_auto_mount+5)& (0+255),f,b
 11448  001336  339A               	rrcf	(??_auto_mount+4)& (0+255),f,b
 11449  001338  2F9C               	decfsz	(??_auto_mount+6)& (0+255),f,b
 11450  00133A  D7FB               	goto	u12815
 11451  00133C  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 11452  00133E  2596               	addwf	??_auto_mount& (0+255),w,b
 11453  001340  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 11454  001342  519B               	movf	(??_auto_mount+5)& (0+255),w,b
 11455  001344  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11456  001346  6F9E               	movwf	(??_auto_mount+8)& (0+255),b
 11457  001348  0E00               	movlw	0
 11458  00134A  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 11459  00134C  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 11460  00134E  0E00               	movlw	0
 11461  001350  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 11462  001352  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 11463  001354  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 11464  001356  259D               	addwf	(??_auto_mount+7)& (0+255),w,b
 11465  001358  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 11466  00135A  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11467  00135C  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 11468  00135E  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 11469  001360  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11470  001362  219F               	addwfc	(??_auto_mount+9)& (0+255),w,b
 11471  001364  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 11472  001366  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11473  001368  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 11474  00136A  6FA4               	movwf	(??_auto_mount+14)& (0+255),b
 11475  00136C  EE20 F010          	lfsr	2,16
 11476  001370  51B9               	movf	auto_mount@fs& (0+255),w,b
 11477  001372  26D9               	addwf	fsr2l,f,c
 11478  001374  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11479  001376  22DA               	addwfc	fsr2h,f,c
 11480  001378  C0A1  FFDE         	movff	??_auto_mount+11,postinc2
 11481  00137C  C0A2  FFDE         	movff	??_auto_mount+12,postinc2
 11482  001380  C0A3  FFDE         	movff	??_auto_mount+13,postinc2
 11483  001384  C0A4  FFDE         	movff	??_auto_mount+14,postinc2
 11484                           
 11485                           ;tff.c: 737: fs->free_clust = (CLUST)0xFFFFFFFF;
 11486  001388  EE20 F01A          	lfsr	2,26
 11487  00138C  51B9               	movf	auto_mount@fs& (0+255),w,b
 11488  00138E  26D9               	addwf	fsr2l,f,c
 11489  001390  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11490  001392  22DA               	addwfc	fsr2h,f,c
 11491  001394  0EFF               	movlw	255
 11492  001396  6EDE               	movwf	postinc2,c
 11493  001398  0EFF               	movlw	255
 11494  00139A  6EDD               	movwf	postdec2,c
 11495                           
 11496                           ;tff.c: 753: fs->fs_type = fmt;
 11497  00139C  EE20 F01C          	lfsr	2,28
 11498  0013A0  51B9               	movf	auto_mount@fs& (0+255),w,b
 11499  0013A2  26D9               	addwf	fsr2l,f,c
 11500  0013A4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11501  0013A6  22DA               	addwfc	fsr2h,f,c
 11502  0013A8  C0B3  FFDF         	movff	auto_mount@fmt,indf2
 11503                           
 11504                           ; BSR set to: 0
 11505                           ;tff.c: 754: fs->id = ++fsid;
 11506  0013AC  4BFB               	infsnz	_fsid& (0+255),f,b
 11507  0013AE  2BFC               	incf	(_fsid+1)& (0+255),f,b
 11508  0013B0  C0B9  FFD9         	movff	auto_mount@fs,fsr2l
 11509  0013B4  C0BA  FFDA         	movff	auto_mount@fs+1,fsr2h
 11510  0013B8  C0FB  FFDE         	movff	_fsid,postinc2
 11511  0013BC  C0FC  FFDD         	movff	_fsid+1,postdec2
 11512                           
 11513                           ;tff.c: 755: return FR_OK;
 11514  0013C0  0E00               	movlw	0
 11515  0013C2  0012               	return	
 11516  0013C4                     __end_of_auto_mount:
 11517                           	opt stack 0
 11518                           tosu	equ	0xFFF
 11519                           tosh	equ	0xFFE
 11520                           tosl	equ	0xFFD
 11521                           pclath	equ	0xFFA
 11522                           tblptru	equ	0xFF8
 11523                           tblptrh	equ	0xFF7
 11524                           tblptrl	equ	0xFF6
 11525                           tablat	equ	0xFF5
 11526                           prodh	equ	0xFF4
 11527                           prodl	equ	0xFF3
 11528                           intcon	equ	0xFF2
 11529                           intcon2	equ	0xFF1
 11530                           intcon3	equ	0xFF0
 11531                           indf0	equ	0xFEF
 11532                           postinc0	equ	0xFEE
 11533                           fsr0h	equ	0xFEA
 11534                           fsr0l	equ	0xFE9
 11535                           wreg	equ	0xFE8
 11536                           indf1	equ	0xFE7
 11537                           postinc1	equ	0xFE6
 11538                           postdec1	equ	0xFE5
 11539                           fsr1h	equ	0xFE2
 11540                           fsr1l	equ	0xFE1
 11541                           indf2	equ	0xFDF
 11542                           postinc2	equ	0xFDE
 11543                           postdec2	equ	0xFDD
 11544                           plusw2	equ	0xFDB
 11545                           fsr2h	equ	0xFDA
 11546                           fsr2l	equ	0xFD9
 11547                           status	equ	0xFD8
 11548                           
 11549 ;; *************** function _memset *****************
 11550 ;; Defined at:
 11551 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 11552 ;; Parameters:    Size  Location     Type
 11553 ;;  p1              2    0[BANK0 ] PTR void 
 11554 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 11555 ;;  c               2    2[BANK0 ] int 
 11556 ;;  n               2    4[BANK0 ] unsigned int 
 11557 ;; Auto vars:     Size  Location     Type
 11558 ;;  p               2   32[COMRAM] PTR unsigned char 
 11559 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 11560 ;; Return value:  Size  Location     Type
 11561 ;;                  2    0[BANK0 ] PTR void 
 11562 ;; Registers used:
 11563 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11564 ;; Tracked objects:
 11565 ;;		On entry : 0/0
 11566 ;;		On exit  : 0/0
 11567 ;;		Unchanged: 0/0
 11568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11569 ;;      Params:         0       6       0       0       0       0       0       0       0
 11570 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11571 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11572 ;;      Totals:         2       6       0       0       0       0       0       0       0
 11573 ;;Total ram usage:        8 bytes
 11574 ;; Hardware stack levels used:    1
 11575 ;; Hardware stack levels required when called:    3
 11576 ;; This function calls:
 11577 ;;		Nothing
 11578 ;; This function is called by:
 11579 ;;		_make_dirfile
 11580 ;;		_reserve_direntry
 11581 ;;		_auto_mount
 11582 ;;		_f_open
 11583 ;; This function uses a non-reentrant model
 11584 ;;
 11585                           
 11586                           	psect	text38
 11587  0057C4                     __ptext38:
 11588                           	opt stack 0
 11589  0057C4                     _memset:
 11590                           	opt stack 21
 11591                           
 11592                           ; BSR set to: 0
 11593                           ;incstack = 0
 11594  0057C4  C060  F021         	movff	memset@p1,memset@p
 11595  0057C8  C061  F022         	movff	memset@p1+1,memset@p+1
 11596  0057CC  D008               	goto	l1832
 11597  0057CE                     l9442:
 11598  0057CE  C021  FFD9         	movff	memset@p,fsr2l
 11599  0057D2  C022  FFDA         	movff	memset@p+1,fsr2h
 11600  0057D6  C062  FFDF         	movff	memset@c,indf2
 11601  0057DA  4A21               	infsnz	memset@p,f,c
 11602  0057DC  2A22               	incf	memset@p+1,f,c
 11603  0057DE                     l1832:
 11604  0057DE  0100               	movlb	0	; () banked
 11605  0057E0  0764               	decf	memset@n& (0+255),f,b
 11606  0057E2  A0D8               	btfss	status,0,c
 11607  0057E4  0765               	decf	(memset@n+1)& (0+255),f,b
 11608  0057E6  2964               	incf	memset@n& (0+255),w,b
 11609  0057E8  E1F2               	bnz	l9442
 11610  0057EA  2965               	incf	(memset@n+1)& (0+255),w,b
 11611  0057EC  B4D8               	btfsc	status,2,c
 11612  0057EE  0012               	return	
 11613  0057F0  D7EE               	goto	l1833
 11614  0057F2                     __end_of_memset:
 11615                           	opt stack 0
 11616                           tosu	equ	0xFFF
 11617                           tosh	equ	0xFFE
 11618                           tosl	equ	0xFFD
 11619                           pclath	equ	0xFFA
 11620                           tblptru	equ	0xFF8
 11621                           tblptrh	equ	0xFF7
 11622                           tblptrl	equ	0xFF6
 11623                           tablat	equ	0xFF5
 11624                           prodh	equ	0xFF4
 11625                           prodl	equ	0xFF3
 11626                           intcon	equ	0xFF2
 11627                           intcon2	equ	0xFF1
 11628                           intcon3	equ	0xFF0
 11629                           indf0	equ	0xFEF
 11630                           postinc0	equ	0xFEE
 11631                           fsr0h	equ	0xFEA
 11632                           fsr0l	equ	0xFE9
 11633                           wreg	equ	0xFE8
 11634                           indf1	equ	0xFE7
 11635                           postinc1	equ	0xFE6
 11636                           postdec1	equ	0xFE5
 11637                           fsr1h	equ	0xFE2
 11638                           fsr1l	equ	0xFE1
 11639                           indf2	equ	0xFDF
 11640                           postinc2	equ	0xFDE
 11641                           postdec2	equ	0xFDD
 11642                           plusw2	equ	0xFDB
 11643                           fsr2h	equ	0xFDA
 11644                           fsr2l	equ	0xFD9
 11645                           status	equ	0xFD8
 11646                           
 11647 ;; *************** function _disk_initialize *****************
 11648 ;; Defined at:
 11649 ;;		line 59 in file "bibliotecas/diskio.c"
 11650 ;; Parameters:    Size  Location     Type
 11651 ;;  pdrv            1    wreg     unsigned char 
 11652 ;; Auto vars:     Size  Location     Type
 11653 ;;  pdrv            1   32[BANK0 ] unsigned char 
 11654 ;;  result          2    0        int 
 11655 ;;  stat            1   33[BANK0 ] unsigned char 
 11656 ;; Return value:  Size  Location     Type
 11657 ;;                  1    wreg      unsigned char 
 11658 ;; Registers used:
 11659 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11660 ;; Tracked objects:
 11661 ;;		On entry : 0/0
 11662 ;;		On exit  : 0/0
 11663 ;;		Unchanged: 0/0
 11664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11665 ;;      Params:         0       0       0       0       0       0       0       0       0
 11666 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11667 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11668 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11669 ;;Total ram usage:        2 bytes
 11670 ;; Hardware stack levels used:    1
 11671 ;; Hardware stack levels required when called:    8
 11672 ;; This function calls:
 11673 ;;		_sdc_disk_initialize
 11674 ;; This function is called by:
 11675 ;;		_auto_mount
 11676 ;; This function uses a non-reentrant model
 11677 ;;
 11678                           
 11679                           	psect	text39
 11680  005720                     __ptext39:
 11681                           	opt stack 0
 11682  005720                     _disk_initialize:
 11683                           	opt stack 17
 11684                           
 11685                           ; BSR set to: 0
 11686                           ;incstack = 0
 11687                           ;disk_initialize@pdrv stored from wreg
 11688  005720  0100               	movlb	0	; () banked
 11689  005722  6F80               	movwf	disk_initialize@pdrv& (0+255),b
 11690                           
 11691                           ;diskio.c: 63: DSTATUS stat;
 11692                           ;diskio.c: 64: int result;
 11693                           ;diskio.c: 66: switch (pdrv) {
 11694  005724  D00E               	goto	l411
 11695  005726                     
 11696                           ;diskio.c: 68: stat = sdc_disk_initialize();
 11697  005726  EC3A  F012         	call	_sdc_disk_initialize	;wreg free
 11698  00572A  0100               	movlb	0	; () banked
 11699  00572C  6F81               	movwf	disk_initialize@stat& (0+255),b
 11700                           
 11701                           ; BSR set to: 0
 11702                           ;diskio.c: 72: return stat;
 11703  00572E  5181               	movf	disk_initialize@stat& (0+255),w,b
 11704                           
 11705                           ; BSR set to: 0
 11706  005730  0012               	return	
 11707  005732                     
 11708                           ; BSR set to: 0
 11709                           ;diskio.c: 75: stat = sdc_disk_initialize();
 11710                           
 11711                           ; BSR set to: 0
 11712  005732  EC3A  F012         	call	_sdc_disk_initialize	;wreg free
 11713  005736  0100               	movlb	0	; () banked
 11714  005738  6F81               	movwf	disk_initialize@stat& (0+255),b
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;diskio.c: 79: return stat;
 11718  00573A  5181               	movf	disk_initialize@stat& (0+255),w,b
 11719                           
 11720                           ; BSR set to: 0
 11721  00573C  0012               	return	
 11722  00573E                     
 11723                           ; BSR set to: 0
 11724                           ;diskio.c: 86: return stat;
 11725                           
 11726                           ; BSR set to: 0
 11727  00573E  5181               	movf	disk_initialize@stat& (0+255),w,b
 11728                           
 11729                           ; BSR set to: 0
 11730  005740  0012               	return	
 11731  005742                     l411:
 11732                           
 11733                           ; BSR set to: 0
 11734  005742  0100               	movlb	0	; () banked
 11735  005744  5180               	movf	disk_initialize@pdrv& (0+255),w,b
 11736                           
 11737                           ; Switch size 1, requested type "space"
 11738                           ; Number of cases is 3, Range of values is 0 to 2
 11739                           ; switch strategies available:
 11740                           ; Name         Instructions Cycles
 11741                           ; simple_byte           10     6 (average)
 11742                           ;	Chosen strategy is simple_byte
 11743  005746  0A00               	xorlw	0	; case 0
 11744  005748  B4D8               	btfsc	status,2,c
 11745  00574A  D7ED               	goto	l412
 11746  00574C  0A01               	xorlw	1	; case 1
 11747  00574E  B4D8               	btfsc	status,2,c
 11748  005750  D7F0               	goto	l414
 11749  005752  0A03               	xorlw	3	; case 2
 11750  005754  B4D8               	btfsc	status,2,c
 11751  005756  D7F3               	goto	l415
 11752                           
 11753                           ; BSR set to: 0
 11754                           ;diskio.c: 88: return 0x01;
 11755                           
 11756                           ; BSR set to: 0
 11757  005758  0E01               	movlw	1
 11758  00575A  0012               	return	
 11759  00575C                     __end_of_disk_initialize:
 11760                           	opt stack 0
 11761                           tosu	equ	0xFFF
 11762                           tosh	equ	0xFFE
 11763                           tosl	equ	0xFFD
 11764                           pclath	equ	0xFFA
 11765                           tblptru	equ	0xFF8
 11766                           tblptrh	equ	0xFF7
 11767                           tblptrl	equ	0xFF6
 11768                           tablat	equ	0xFF5
 11769                           prodh	equ	0xFF4
 11770                           prodl	equ	0xFF3
 11771                           intcon	equ	0xFF2
 11772                           intcon2	equ	0xFF1
 11773                           intcon3	equ	0xFF0
 11774                           indf0	equ	0xFEF
 11775                           postinc0	equ	0xFEE
 11776                           fsr0h	equ	0xFEA
 11777                           fsr0l	equ	0xFE9
 11778                           wreg	equ	0xFE8
 11779                           indf1	equ	0xFE7
 11780                           postinc1	equ	0xFE6
 11781                           postdec1	equ	0xFE5
 11782                           fsr1h	equ	0xFE2
 11783                           fsr1l	equ	0xFE1
 11784                           indf2	equ	0xFDF
 11785                           postinc2	equ	0xFDE
 11786                           postdec2	equ	0xFDD
 11787                           plusw2	equ	0xFDB
 11788                           fsr2h	equ	0xFDA
 11789                           fsr2l	equ	0xFD9
 11790                           status	equ	0xFD8
 11791                           
 11792 ;; *************** function _sdc_disk_initialize *****************
 11793 ;; Defined at:
 11794 ;;		line 275 in file "bibliotecas/diskio.c"
 11795 ;; Parameters:    Size  Location     Type
 11796 ;;		None
 11797 ;; Auto vars:     Size  Location     Type
 11798 ;;  count2          2   29[BANK0 ] int 
 11799 ;;  crc_number      2   25[BANK0 ] int 
 11800 ;;  count1          2   23[BANK0 ] int 
 11801 ;;  i               2   20[BANK0 ] int 
 11802 ;;  buff            1   31[BANK0 ] unsigned char 
 11803 ;;  ocr             1   28[BANK0 ] unsigned char 
 11804 ;;  buff_i          1   27[BANK0 ] unsigned char 
 11805 ;;  stat            1   22[BANK0 ] unsigned char 
 11806 ;; Return value:  Size  Location     Type
 11807 ;;                  1    wreg      unsigned char 
 11808 ;; Registers used:
 11809 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11810 ;; Tracked objects:
 11811 ;;		On entry : 0/0
 11812 ;;		On exit  : 0/0
 11813 ;;		Unchanged: 0/0
 11814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11815 ;;      Params:         0       0       0       0       0       0       0       0       0
 11816 ;;      Locals:         0      12       0       0       0       0       0       0       0
 11817 ;;      Temps:          0       1       0       0       0       0       0       0       0
 11818 ;;      Totals:         0      13       0       0       0       0       0       0       0
 11819 ;;Total ram usage:       13 bytes
 11820 ;; Hardware stack levels used:    1
 11821 ;; Hardware stack levels required when called:    7
 11822 ;; This function calls:
 11823 ;;		_command
 11824 ;;		_dummy_clocks
 11825 ;;		_escreve_frase_ram_lcd
 11826 ;;		_posicao_cursor_lcd
 11827 ;;		_proceed
 11828 ;;		_response
 11829 ;;		_sdc_reset
 11830 ;; This function is called by:
 11831 ;;		_disk_initialize
 11832 ;; This function uses a non-reentrant model
 11833 ;;
 11834                           
 11835                           	psect	text40
 11836  002474                     __ptext40:
 11837                           	opt stack 0
 11838  002474                     _sdc_disk_initialize:
 11839                           	opt stack 17
 11840                           
 11841                           ;diskio.c: 277: BYTE ocr;
 11842                           ;diskio.c: 278: DSTATUS stat;
 11843                           ;diskio.c: 279: int i = 0, count1 = 0, count2 = 0;
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;incstack = 0
 11847  002474  0E00               	movlw	0
 11848  002476  0100               	movlb	0	; () banked
 11849  002478  6F75               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
 11850  00247A  0E00               	movlw	0
 11851  00247C  6F74               	movwf	sdc_disk_initialize@i& (0+255),b
 11852  00247E  0E00               	movlw	0
 11853  002480  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 11854  002482  0E00               	movlw	0
 11855  002484  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 11856  002486  0E00               	movlw	0
 11857  002488  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 11858  00248A  0E00               	movlw	0
 11859  00248C  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 11860                           
 11861                           ;diskio.c: 280: BYTE buff = 0;
 11862  00248E  0E00               	movlw	0
 11863  002490  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 11864                           
 11865                           ; BSR set to: 0
 11866                           ;diskio.c: 281: BYTE buff_i;
 11867                           ;diskio.c: 282: int crc_number;
 11868                           ;diskio.c: 283: _delay((unsigned long)((1)*(48000000/4000.0)));
 11869  002492  0E10               	movlw	16
 11870  002494  0100               	movlb	0	; () banked
 11871  002496  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 11872  002498  0E94               	movlw	148
 11873  00249A                     u14557:
 11874  00249A  2EE8               	decfsz	wreg,f,c
 11875  00249C  D7FE               	bra	u14557
 11876  00249E  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 11877  0024A0  D7FC               	bra	u14557
 11878  0024A2  F000               	nop	
 11879                           
 11880                           ;diskio.c: 284: dummy_clocks(100);
 11881  0024A4  0E64               	movlw	100
 11882  0024A6  EC0F  F02B         	call	_dummy_clocks
 11883                           
 11884                           ;diskio.c: 287: sdc_reset();
 11885  0024AA  EC40  F024         	call	_sdc_reset	;wreg free
 11886                           
 11887                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 11888  0024AE  0EAA               	movlw	170
 11889  0024B0  0100               	movlb	0	; () banked
 11890  0024B2  6F65               	movwf	command@arg& (0+255),b
 11891  0024B4  0E01               	movlw	1
 11892  0024B6  6F66               	movwf	(command@arg+1)& (0+255),b
 11893  0024B8  0E00               	movlw	0
 11894  0024BA  6F67               	movwf	(command@arg+2)& (0+255),b
 11895  0024BC  0E00               	movlw	0
 11896  0024BE  6F68               	movwf	(command@arg+3)& (0+255),b
 11897  0024C0  0E87               	movlw	135
 11898  0024C2  6F69               	movwf	command@CRC& (0+255),b
 11899  0024C4  0E48               	movlw	72
 11900  0024C6  EC89  F028         	call	_command
 11901                           
 11902                           ;diskio.c: 289: proceed();
 11903  0024CA  ECEB  F02C         	call	_proceed	;wreg free
 11904  0024CE                     
 11905                           ;diskio.c: 291: buff_i = response();
 11906  0024CE  ECE5  F02C         	call	_response	;wreg free
 11907  0024D2  0100               	movlb	0	; () banked
 11908  0024D4  6F7B               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 11909                           
 11910                           ; BSR set to: 0
 11911                           ;diskio.c: 292: if(buff_i == 1)
 11912  0024D6  057B               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 11913  0024D8  A4D8               	btfss	status,2,c
 11914  0024DA  D004               	goto	l454
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;diskio.c: 293: {
 11918                           ;diskio.c: 294: crc_number = buff_i<<8;
 11919  0024DC  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 11920  0024DE  6F7A               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 11921  0024E0  6B79               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 11922                           
 11923                           ;diskio.c: 295: }
 11924  0024E2  D006               	goto	l456
 11925  0024E4                     l454:
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;diskio.c: 296: else if(buff_i==0xAA)
 11929                           
 11930                           ; BSR set to: 0
 11931  0024E4  0EAA               	movlw	170
 11932  0024E6  197B               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 11933  0024E8  A4D8               	btfss	status,2,c
 11934  0024EA  D002               	goto	l456
 11935                           
 11936                           ; BSR set to: 0
 11937                           ;diskio.c: 297: {
 11938                           ;diskio.c: 298: crc_number |= buff_i;
 11939  0024EC  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 11940  0024EE  1379               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 11941  0024F0                     l456:
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;diskio.c: 299: }
 11945                           ;diskio.c: 300: count1++;
 11946                           
 11947                           ; BSR set to: 0
 11948                           
 11949                           ; BSR set to: 0
 11950  0024F0  4B77               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 11951  0024F2  2B78               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 11955  0024F4  0EAA               	movlw	170
 11956  0024F6  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 11957  0024F8  E103               	bnz	u11060
 11958  0024FA  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 11959  0024FC  B4D8               	btfsc	status,2,c
 11960  0024FE  D008               	goto	u11070
 11961  002500                     u11060:
 11962                           
 11963                           ; BSR set to: 0
 11964  002500  BF78               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 11965  002502  D7E5               	goto	l453
 11966  002504  0EE8               	movlw	232
 11967  002506  5D77               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 11968  002508  0E03               	movlw	3
 11969  00250A  5978               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 11970  00250C  A0D8               	btfss	status,0,c
 11971  00250E  D7DF               	goto	l453
 11972  002510                     u11070:
 11973                           
 11974                           ; BSR set to: 0
 11975                           ;diskio.c: 306: if (crc_number == 0x1AA)
 11976                           
 11977                           ; BSR set to: 0
 11978                           
 11979                           ; BSR set to: 0
 11980  002510  0EAA               	movlw	170
 11981  002512  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 11982  002514  E102               	bnz	u11081
 11983  002516  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 11984  002518  A4D8               	btfss	status,2,c
 11985  00251A                     u11081:
 11986  00251A  D0B1               	goto	l460
 11987                           
 11988                           ; BSR set to: 0
 11989                           ;diskio.c: 307: {
 11990                           ;diskio.c: 308: count1 = 0;
 11991  00251C  0E00               	movlw	0
 11992  00251E  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 11993  002520  0E00               	movlw	0
 11994  002522  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 11995  002524                     l461:
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;diskio.c: 310: count2 = 0;
 11999  002524  0E00               	movlw	0
 12000  002526  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12001  002528  0E00               	movlw	0
 12002  00252A  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12003                           
 12004                           ; BSR set to: 0
 12005                           ;diskio.c: 311: buff = 0XFF;
 12006  00252C  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12007  00252E                     
 12008                           ; BSR set to: 0
 12009                           ;diskio.c: 319: dummy_clocks(10);
 12010                           
 12011                           ; BSR set to: 0
 12012  00252E  0E0A               	movlw	10
 12013  002530  EC0F  F02B         	call	_dummy_clocks
 12014                           
 12015                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 12016  002534  0E00               	movlw	0
 12017  002536  0100               	movlb	0	; () banked
 12018  002538  6F65               	movwf	command@arg& (0+255),b
 12019  00253A  0E00               	movlw	0
 12020  00253C  6F66               	movwf	(command@arg+1)& (0+255),b
 12021  00253E  0E00               	movlw	0
 12022  002540  6F67               	movwf	(command@arg+2)& (0+255),b
 12023  002542  0E00               	movlw	0
 12024  002544  6F68               	movwf	(command@arg+3)& (0+255),b
 12025  002546  0E00               	movlw	0
 12026  002548  6F69               	movwf	command@CRC& (0+255),b
 12027  00254A  0E77               	movlw	119
 12028  00254C  EC89  F028         	call	_command
 12029                           
 12030                           ;diskio.c: 321: buff = 0XFF;
 12031  002550  0100               	movlb	0	; () banked
 12032  002552  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;diskio.c: 323: proceed();
 12036  002554  ECEB  F02C         	call	_proceed	;wreg free
 12037  002558                     
 12038                           ;diskio.c: 325: buff = response();
 12039  002558  ECE5  F02C         	call	_response	;wreg free
 12040  00255C  0100               	movlb	0	; () banked
 12041  00255E  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;diskio.c: 326: count2++;
 12045  002560  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12046  002562  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12047                           
 12048                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 12049  002564  057F               	decf	sdc_disk_initialize@buff& (0+255),w,b
 12050  002566  B4D8               	btfsc	status,2,c
 12051  002568  D008               	goto	u11100
 12052                           
 12053                           ; BSR set to: 0
 12054  00256A  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12055  00256C  D7F5               	goto	l463
 12056  00256E  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12057  002570  E104               	bnz	l9314
 12058  002572  0E0A               	movlw	10
 12059  002574  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12060  002576  A0D8               	btfss	status,0,c
 12061  002578  D7EF               	goto	l463
 12062  00257A                     u11100:
 12063  00257A                     l9314:
 12064                           
 12065                           ; BSR set to: 0
 12066                           ;diskio.c: 328: count2 = 0;
 12067  00257A  0E00               	movlw	0
 12068  00257C  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12069  00257E  0E00               	movlw	0
 12070  002580  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12071                           
 12072                           ; BSR set to: 0
 12073                           ;diskio.c: 332: dummy_clocks(10);
 12074  002582  0E0A               	movlw	10
 12075  002584  EC0F  F02B         	call	_dummy_clocks
 12076                           
 12077                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 12078  002588  0E00               	movlw	0
 12079  00258A  0100               	movlb	0	; () banked
 12080  00258C  6F65               	movwf	command@arg& (0+255),b
 12081  00258E  0E00               	movlw	0
 12082  002590  6F66               	movwf	(command@arg+1)& (0+255),b
 12083  002592  0E00               	movlw	0
 12084  002594  6F67               	movwf	(command@arg+2)& (0+255),b
 12085  002596  0E40               	movlw	64
 12086  002598  6F68               	movwf	(command@arg+3)& (0+255),b
 12087  00259A  0E00               	movlw	0
 12088  00259C  6F69               	movwf	command@CRC& (0+255),b
 12089  00259E  0E69               	movlw	105
 12090  0025A0  EC89  F028         	call	_command
 12091                           
 12092                           ;diskio.c: 334: proceed();
 12093  0025A4  ECEB  F02C         	call	_proceed	;wreg free
 12094                           
 12095                           ;diskio.c: 335: buff = response();
 12096  0025A8  ECE5  F02C         	call	_response	;wreg free
 12097  0025AC  0100               	movlb	0	; () banked
 12098  0025AE  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12099                           
 12100                           ; BSR set to: 0
 12101                           ;diskio.c: 336: count2++;
 12102  0025B0  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12103  0025B2  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;diskio.c: 337: }while(buff!=0X00);
 12107  0025B4  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12108  0025B6  A4D8               	btfss	status,2,c
 12109  0025B8  D7BA               	goto	l462
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;diskio.c: 339: buff = 0xFF;
 12113  0025BA  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12114                           
 12115                           ; BSR set to: 0
 12116                           ;diskio.c: 342: dummy_clocks(10);
 12117  0025BC  0E0A               	movlw	10
 12118  0025BE  EC0F  F02B         	call	_dummy_clocks
 12119                           
 12120                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 12121  0025C2  0E00               	movlw	0
 12122  0025C4  0100               	movlb	0	; () banked
 12123  0025C6  6F65               	movwf	command@arg& (0+255),b
 12124  0025C8  0E00               	movlw	0
 12125  0025CA  6F66               	movwf	(command@arg+1)& (0+255),b
 12126  0025CC  0E00               	movlw	0
 12127  0025CE  6F67               	movwf	(command@arg+2)& (0+255),b
 12128  0025D0  0E00               	movlw	0
 12129  0025D2  6F68               	movwf	(command@arg+3)& (0+255),b
 12130  0025D4  0EFF               	movlw	255
 12131  0025D6  6F69               	movwf	command@CRC& (0+255),b
 12132  0025D8  0E7A               	movlw	122
 12133  0025DA  EC89  F028         	call	_command
 12134                           
 12135                           ;diskio.c: 344: proceed();
 12136  0025DE  ECEB  F02C         	call	_proceed	;wreg free
 12137  0025E2                     
 12138                           ;diskio.c: 346: buff = response();
 12139  0025E2  ECE5  F02C         	call	_response	;wreg free
 12140  0025E6  0100               	movlb	0	; () banked
 12141  0025E8  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12142                           
 12143                           ; BSR set to: 0
 12144                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 12145  0025EA  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12146  0025EC  257F               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 12147  0025EE  0B80               	andlw	128
 12148  0025F0  6F7C               	movwf	sdc_disk_initialize@ocr& (0+255),b
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;diskio.c: 348: count2++;
 12152  0025F2  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12153  0025F4  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 12157  0025F6  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12158  0025F8  B4D8               	btfsc	status,2,c
 12159  0025FA  D00B               	goto	u11140
 12160                           
 12161                           ; BSR set to: 0
 12162  0025FC  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 12163  0025FE  B4D8               	btfsc	status,2,c
 12164  002600  D008               	goto	u11140
 12165                           
 12166                           ; BSR set to: 0
 12167  002602  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12168  002604  D7EE               	goto	l468
 12169  002606  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12170  002608  E104               	bnz	l9344
 12171  00260A  0E0A               	movlw	10
 12172  00260C  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12173  00260E  A0D8               	btfss	status,0,c
 12174  002610  D7E8               	goto	l468
 12175  002612                     u11140:
 12176  002612                     l9344:
 12177                           
 12178                           ; BSR set to: 0
 12179                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 12180  002612  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12181  002614  B4D8               	btfsc	status,2,c
 12182  002616  D003               	goto	u11160
 12183                           
 12184                           ; BSR set to: 0
 12185  002618  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 12186  00261A  A4D8               	btfss	status,2,c
 12187  00261C  D783               	goto	l461
 12188  00261E                     u11160:
 12189                           
 12190                           ; BSR set to: 0
 12191                           ;diskio.c: 353: count1 = 0;
 12192                           
 12193                           ; BSR set to: 0
 12194                           
 12195                           ; BSR set to: 0
 12196  00261E  0E00               	movlw	0
 12197  002620  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 12198  002622  0E00               	movlw	0
 12199  002624  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 12203  002626  0E10               	movlw	16
 12204  002628  0100               	movlb	0	; () banked
 12205  00262A  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 12206  00262C  0E94               	movlw	148
 12207  00262E                     u14567:
 12208  00262E  2EE8               	decfsz	wreg,f,c
 12209  002630  D7FE               	bra	u14567
 12210  002632  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 12211  002634  D7FC               	bra	u14567
 12212  002636  F000               	nop	
 12213                           
 12214                           ;diskio.c: 356: stat = 0X00;
 12215  002638  0E00               	movlw	0
 12216  00263A  0100               	movlb	0	; () banked
 12217  00263C  6F76               	movwf	sdc_disk_initialize@stat& (0+255),b
 12218                           
 12219                           ; BSR set to: 0
 12220                           ;diskio.c: 358: if(!ocr)
 12221  00263E  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12222  002640  A4D8               	btfss	status,2,c
 12223  002642  D0B9               	goto	u11260
 12224                           
 12225                           ; BSR set to: 0
 12226                           ;diskio.c: 359: {
 12227                           ;diskio.c: 361: dummy_clocks(10);
 12228  002644  0E0A               	movlw	10
 12229  002646  EC0F  F02B         	call	_dummy_clocks
 12230                           
 12231                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 12232  00264A  0E00               	movlw	0
 12233  00264C  0100               	movlb	0	; () banked
 12234  00264E  6F65               	movwf	command@arg& (0+255),b
 12235  002650  0E02               	movlw	2
 12236  002652  6F66               	movwf	(command@arg+1)& (0+255),b
 12237  002654  0E00               	movlw	0
 12238  002656  6F67               	movwf	(command@arg+2)& (0+255),b
 12239  002658  0E00               	movlw	0
 12240  00265A  6F68               	movwf	(command@arg+3)& (0+255),b
 12241  00265C  0EFF               	movlw	255
 12242  00265E  6F69               	movwf	command@CRC& (0+255),b
 12243  002660  0E50               	movlw	80
 12244  002662  EC89  F028         	call	_command
 12245                           
 12246                           ;diskio.c: 363: proceed();
 12247  002666  ECEB  F02C         	call	_proceed	;wreg free
 12248                           
 12249                           ;diskio.c: 365: buff = 0xFF;
 12250  00266A  0100               	movlb	0	; () banked
 12251  00266C  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12252  00266E                     
 12253                           ; BSR set to: 0
 12254                           ;diskio.c: 367: buff = response();
 12255                           
 12256                           ; BSR set to: 0
 12257  00266E  ECE5  F02C         	call	_response	;wreg free
 12258  002672  0100               	movlb	0	; () banked
 12259  002674  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12260                           
 12261                           ; BSR set to: 0
 12262                           ;diskio.c: 368: }while(buff!=0X00);
 12263  002676  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12264  002678  B4D8               	btfsc	status,2,c
 12265  00267A  D09D               	goto	u11260
 12266  00267C  D7F8               	goto	l476
 12267  00267E                     l460:
 12268                           
 12269                           ; BSR set to: 0
 12270                           ;diskio.c: 373: else
 12271                           ;diskio.c: 374: {
 12272                           ;diskio.c: 376: count2 = 0;
 12273                           
 12274                           ; BSR set to: 0
 12275  00267E  0E00               	movlw	0
 12276  002680  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12277  002682  0E00               	movlw	0
 12278  002684  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12279                           
 12280                           ; BSR set to: 0
 12281                           ;diskio.c: 377: buff = 0XFF;
 12282  002686  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12283                           
 12284                           ; BSR set to: 0
 12285                           ;diskio.c: 378: dummy_clocks(1);
 12286  002688  0E01               	movlw	1
 12287  00268A  EC0F  F02B         	call	_dummy_clocks
 12288                           
 12289                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 12290  00268E  0E00               	movlw	0
 12291  002690  0100               	movlb	0	; () banked
 12292  002692  6F65               	movwf	command@arg& (0+255),b
 12293  002694  0E00               	movlw	0
 12294  002696  6F66               	movwf	(command@arg+1)& (0+255),b
 12295  002698  0E00               	movlw	0
 12296  00269A  6F67               	movwf	(command@arg+2)& (0+255),b
 12297  00269C  0E00               	movlw	0
 12298  00269E  6F68               	movwf	(command@arg+3)& (0+255),b
 12299  0026A0  0EFF               	movlw	255
 12300  0026A2  6F69               	movwf	command@CRC& (0+255),b
 12301  0026A4  0E69               	movlw	105
 12302  0026A6  EC89  F028         	call	_command
 12303                           
 12304                           ;diskio.c: 380: proceed();
 12305  0026AA  ECEB  F02C         	call	_proceed	;wreg free
 12306  0026AE                     
 12307                           ;diskio.c: 382: buff = response();
 12308  0026AE  ECE5  F02C         	call	_response	;wreg free
 12309  0026B2  0100               	movlb	0	; () banked
 12310  0026B4  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12311                           
 12312                           ; BSR set to: 0
 12313                           ;diskio.c: 383: count2++;
 12314  0026B6  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12315  0026B8  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12316                           
 12317                           ; BSR set to: 0
 12318                           ;diskio.c: 384: if(buff==0x00)
 12319  0026BA  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12320  0026BC  A4D8               	btfss	status,2,c
 12321  0026BE  D00C               	goto	l480
 12322                           
 12323                           ; BSR set to: 0
 12324                           ;diskio.c: 385: {
 12325                           ;diskio.c: 386: posicao_cursor_lcd(1,0);
 12326  0026C0  0E00               	movlw	0
 12327  0026C2  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12328  0026C4  0E01               	movlw	1
 12329  0026C6  ECA2  F027         	call	_posicao_cursor_lcd
 12330                           
 12331                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 12332  0026CA  0E9D               	movlw	low STR_13
 12333  0026CC  0100               	movlb	0	; () banked
 12334  0026CE  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12335  0026D0  0E08               	movlw	high STR_13
 12336  0026D2  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12337  0026D4  EC99  F029         	call	_escreve_frase_ram_lcd	;wreg free
 12338  0026D8                     l480:
 12339                           
 12340                           ;diskio.c: 388: }
 12341                           ;diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 12342  0026D8  0E10               	movlw	16
 12343  0026DA  0100               	movlb	0	; () banked
 12344  0026DC  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 12345  0026DE  0E94               	movlw	148
 12346  0026E0                     u14577:
 12347  0026E0  2EE8               	decfsz	wreg,f,c
 12348  0026E2  D7FE               	bra	u14577
 12349  0026E4  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 12350  0026E6  D7FC               	bra	u14577
 12351  0026E8  F000               	nop	
 12352                           
 12353                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 12354  0026EA  0100               	movlb	0	; () banked
 12355  0026EC  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12356  0026EE  B4D8               	btfsc	status,2,c
 12357  0026F0  D008               	goto	u11210
 12358                           
 12359                           ; BSR set to: 0
 12360  0026F2  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12361  0026F4  D7DC               	goto	l479
 12362  0026F6  0E10               	movlw	16
 12363  0026F8  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12364  0026FA  0E27               	movlw	39
 12365  0026FC  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12366  0026FE  A0D8               	btfss	status,0,c
 12367  002700  D7D6               	goto	l479
 12368  002702                     u11210:
 12369                           
 12370                           ; BSR set to: 0
 12371                           ;diskio.c: 392: buff = 0xFF;
 12372                           
 12373                           ; BSR set to: 0
 12374  002702  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12375                           
 12376                           ; BSR set to: 0
 12377                           ;diskio.c: 393: if(count2==10)
 12378  002704  0E0A               	movlw	10
 12379  002706  197D               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 12380  002708  117E               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12381  00270A  A4D8               	btfss	status,2,c
 12382  00270C  D038               	goto	u11250
 12383                           
 12384                           ; BSR set to: 0
 12385                           ;diskio.c: 394: {
 12386                           ;diskio.c: 395: count2 = 0;
 12387  00270E  0E00               	movlw	0
 12388  002710  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12389  002712  0E00               	movlw	0
 12390  002714  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12391                           
 12392                           ; BSR set to: 0
 12393                           ;diskio.c: 396: dummy_clocks(10);
 12394  002716  0E0A               	movlw	10
 12395  002718  EC0F  F02B         	call	_dummy_clocks
 12396                           
 12397                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 12398  00271C  0E00               	movlw	0
 12399  00271E  0100               	movlb	0	; () banked
 12400  002720  6F65               	movwf	command@arg& (0+255),b
 12401  002722  0E00               	movlw	0
 12402  002724  6F66               	movwf	(command@arg+1)& (0+255),b
 12403  002726  0E00               	movlw	0
 12404  002728  6F67               	movwf	(command@arg+2)& (0+255),b
 12405  00272A  0E00               	movlw	0
 12406  00272C  6F68               	movwf	(command@arg+3)& (0+255),b
 12407  00272E  0EFF               	movlw	255
 12408  002730  6F69               	movwf	command@CRC& (0+255),b
 12409  002732  0E41               	movlw	65
 12410  002734  EC89  F028         	call	_command
 12411                           
 12412                           ;diskio.c: 398: proceed();
 12413  002738  ECEB  F02C         	call	_proceed	;wreg free
 12414  00273C                     
 12415                           ;diskio.c: 400: buff = response();
 12416  00273C  ECE5  F02C         	call	_response	;wreg free
 12417  002740  0100               	movlb	0	; () banked
 12418  002742  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12419                           
 12420                           ; BSR set to: 0
 12421                           ;diskio.c: 401: count2++;
 12422  002744  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12423  002746  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12424                           
 12425                           ; BSR set to: 0
 12426                           ;diskio.c: 402: if(buff==0x00)
 12427  002748  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12428  00274A  A4D8               	btfss	status,2,c
 12429  00274C  D00C               	goto	l486
 12430                           
 12431                           ; BSR set to: 0
 12432                           ;diskio.c: 403: {
 12433                           ;diskio.c: 404: posicao_cursor_lcd(1,0);
 12434  00274E  0E00               	movlw	0
 12435  002750  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12436  002752  0E01               	movlw	1
 12437  002754  ECA2  F027         	call	_posicao_cursor_lcd
 12438                           
 12439                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 12440  002758  0E87               	movlw	low STR_14
 12441  00275A  0100               	movlb	0	; () banked
 12442  00275C  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12443  00275E  0E08               	movlw	high STR_14
 12444  002760  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12445  002762  EC99  F029         	call	_escreve_frase_ram_lcd	;wreg free
 12446  002766                     l486:
 12447                           
 12448                           ;diskio.c: 406: }
 12449                           ;diskio.c: 408: }while(buff!=0X00 && count2<10000);
 12450  002766  0100               	movlb	0	; () banked
 12451  002768  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12452  00276A  B4D8               	btfsc	status,2,c
 12453  00276C  D008               	goto	u11250
 12454                           
 12455                           ; BSR set to: 0
 12456  00276E  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12457  002770  D7E5               	goto	l485
 12458  002772  0E10               	movlw	16
 12459  002774  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12460  002776  0E27               	movlw	39
 12461  002778  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12462  00277A  A0D8               	btfss	status,0,c
 12463  00277C  D7DF               	goto	l485
 12464  00277E                     u11250:
 12465                           
 12466                           ; BSR set to: 0
 12467                           ;diskio.c: 409: }
 12468                           ;diskio.c: 412: dummy_clocks(10);
 12469                           
 12470                           ; BSR set to: 0
 12471                           
 12472                           ; BSR set to: 0
 12473                           
 12474                           ; BSR set to: 0
 12475  00277E  0E0A               	movlw	10
 12476  002780  EC0F  F02B         	call	_dummy_clocks
 12477                           
 12478                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 12479  002784  0E00               	movlw	0
 12480  002786  0100               	movlb	0	; () banked
 12481  002788  6F65               	movwf	command@arg& (0+255),b
 12482  00278A  0E02               	movlw	2
 12483  00278C  6F66               	movwf	(command@arg+1)& (0+255),b
 12484  00278E  0E00               	movlw	0
 12485  002790  6F67               	movwf	(command@arg+2)& (0+255),b
 12486  002792  0E00               	movlw	0
 12487  002794  6F68               	movwf	(command@arg+3)& (0+255),b
 12488  002796  0EFF               	movlw	255
 12489  002798  6F69               	movwf	command@CRC& (0+255),b
 12490  00279A  0E50               	movlw	80
 12491  00279C  EC89  F028         	call	_command
 12492                           
 12493                           ;diskio.c: 414: proceed();
 12494  0027A0  ECEB  F02C         	call	_proceed	;wreg free
 12495                           
 12496                           ;diskio.c: 416: buff = 0xFF;
 12497  0027A4  0100               	movlb	0	; () banked
 12498  0027A6  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12499  0027A8                     
 12500                           ; BSR set to: 0
 12501                           ;diskio.c: 418: buff = response();
 12502                           
 12503                           ; BSR set to: 0
 12504  0027A8  ECE5  F02C         	call	_response	;wreg free
 12505  0027AC  0100               	movlb	0	; () banked
 12506  0027AE  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12507                           
 12508                           ; BSR set to: 0
 12509                           ;diskio.c: 419: }while(buff!=0X00);
 12510  0027B0  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12511  0027B2  A4D8               	btfss	status,2,c
 12512  0027B4  D7F9               	goto	l490
 12513  0027B6                     u11260:
 12514                           
 12515                           ; BSR set to: 0
 12516                           ;diskio.c: 421: }
 12517                           ;diskio.c: 425: return stat;
 12518                           
 12519                           ; BSR set to: 0
 12520                           
 12521                           ; BSR set to: 0
 12522  0027B6  5176               	movf	sdc_disk_initialize@stat& (0+255),w,b
 12523  0027B8  0012               	return	
 12524  0027BA                     __end_of_sdc_disk_initialize:
 12525                           	opt stack 0
 12526                           tosu	equ	0xFFF
 12527                           tosh	equ	0xFFE
 12528                           tosl	equ	0xFFD
 12529                           pclath	equ	0xFFA
 12530                           tblptru	equ	0xFF8
 12531                           tblptrh	equ	0xFF7
 12532                           tblptrl	equ	0xFF6
 12533                           tablat	equ	0xFF5
 12534                           prodh	equ	0xFF4
 12535                           prodl	equ	0xFF3
 12536                           intcon	equ	0xFF2
 12537                           intcon2	equ	0xFF1
 12538                           intcon3	equ	0xFF0
 12539                           indf0	equ	0xFEF
 12540                           postinc0	equ	0xFEE
 12541                           fsr0h	equ	0xFEA
 12542                           fsr0l	equ	0xFE9
 12543                           wreg	equ	0xFE8
 12544                           indf1	equ	0xFE7
 12545                           postinc1	equ	0xFE6
 12546                           postdec1	equ	0xFE5
 12547                           fsr1h	equ	0xFE2
 12548                           fsr1l	equ	0xFE1
 12549                           indf2	equ	0xFDF
 12550                           postinc2	equ	0xFDE
 12551                           postdec2	equ	0xFDD
 12552                           plusw2	equ	0xFDB
 12553                           fsr2h	equ	0xFDA
 12554                           fsr2l	equ	0xFD9
 12555                           status	equ	0xFD8
 12556                           
 12557 ;; *************** function _sdc_reset *****************
 12558 ;; Defined at:
 12559 ;;		line 238 in file "bibliotecas/diskio.c"
 12560 ;; Parameters:    Size  Location     Type
 12561 ;;		None
 12562 ;; Auto vars:     Size  Location     Type
 12563 ;;  teste          10    0        unsigned char [10]
 12564 ;;  count           2   16[BANK0 ] int 
 12565 ;;  count_nosd      2   14[BANK0 ] int 
 12566 ;;  i               2   12[BANK0 ] int 
 12567 ;;  receive         2    0        unsigned int 
 12568 ;;  buff            1   18[BANK0 ] unsigned char 
 12569 ;;  stat            1    0        unsigned char 
 12570 ;; Return value:  Size  Location     Type
 12571 ;;                  1    wreg      void 
 12572 ;; Registers used:
 12573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12574 ;; Tracked objects:
 12575 ;;		On entry : 0/0
 12576 ;;		On exit  : 0/0
 12577 ;;		Unchanged: 0/0
 12578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12579 ;;      Params:         0       0       0       0       0       0       0       0       0
 12580 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12581 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12582 ;;      Totals:         0       7       0       0       0       0       0       0       0
 12583 ;;Total ram usage:        7 bytes
 12584 ;; Hardware stack levels used:    1
 12585 ;; Hardware stack levels required when called:    6
 12586 ;; This function calls:
 12587 ;;		_command
 12588 ;;		_escreve_frase_ram_lcd
 12589 ;;		_posicao_cursor_lcd
 12590 ;;		_proceed
 12591 ;;		_response
 12592 ;; This function is called by:
 12593 ;;		_sdc_disk_initialize
 12594 ;; This function uses a non-reentrant model
 12595 ;;
 12596                           
 12597                           	psect	text41
 12598  004880                     __ptext41:
 12599                           	opt stack 0
 12600  004880                     _sdc_reset:
 12601                           	opt stack 17
 12602                           
 12603                           ;diskio.c: 240: int i = 0, count = 0, count_nosd = 0;
 12604                           
 12605                           ; BSR set to: 0
 12606                           ;incstack = 0
 12607  004880  0E00               	movlw	0
 12608  004882  0100               	movlb	0	; () banked
 12609  004884  6F6D               	movwf	(sdc_reset@i+1)& (0+255),b
 12610  004886  0E00               	movlw	0
 12611  004888  6F6C               	movwf	sdc_reset@i& (0+255),b
 12612  00488A  0E00               	movlw	0
 12613  00488C  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 12614  00488E  0E00               	movlw	0
 12615  004890  6F70               	movwf	sdc_reset@count& (0+255),b
 12616  004892  0E00               	movlw	0
 12617  004894  6F6F               	movwf	(sdc_reset@count_nosd+1)& (0+255),b
 12618  004896  0E00               	movlw	0
 12619  004898  6F6E               	movwf	sdc_reset@count_nosd& (0+255),b
 12620  00489A                     
 12621                           ; BSR set to: 0
 12622                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 12623                           
 12624                           ; BSR set to: 0
 12625  00489A  0E00               	movlw	0
 12626  00489C  6F65               	movwf	command@arg& (0+255),b
 12627  00489E  0E00               	movlw	0
 12628  0048A0  6F66               	movwf	(command@arg+1)& (0+255),b
 12629  0048A2  0E00               	movlw	0
 12630  0048A4  6F67               	movwf	(command@arg+2)& (0+255),b
 12631  0048A6  0E00               	movlw	0
 12632  0048A8  6F68               	movwf	(command@arg+3)& (0+255),b
 12633  0048AA  0E95               	movlw	149
 12634  0048AC  6F69               	movwf	command@CRC& (0+255),b
 12635  0048AE  0E40               	movlw	64
 12636  0048B0  EC89  F028         	call	_command
 12637                           
 12638                           ;diskio.c: 249: proceed();
 12639  0048B4  ECEB  F02C         	call	_proceed	;wreg free
 12640  0048B8                     
 12641                           ;diskio.c: 251: buff = response();
 12642  0048B8  ECE5  F02C         	call	_response	;wreg free
 12643  0048BC  0100               	movlb	0	; () banked
 12644  0048BE  6F72               	movwf	sdc_reset@buff& (0+255),b
 12645                           
 12646                           ; BSR set to: 0
 12647                           ;diskio.c: 252: count++;
 12648  0048C0  4B70               	infsnz	sdc_reset@count& (0+255),f,b
 12649  0048C2  2B71               	incf	(sdc_reset@count+1)& (0+255),f,b
 12650                           
 12651                           ; BSR set to: 0
 12652                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 12653  0048C4  0572               	decf	sdc_reset@buff& (0+255),w,b
 12654  0048C6  B4D8               	btfsc	status,2,c
 12655  0048C8  D008               	goto	u10810
 12656                           
 12657                           ; BSR set to: 0
 12658  0048CA  BF71               	btfsc	(sdc_reset@count+1)& (0+255),7,b
 12659  0048CC  D7F5               	goto	l444
 12660  0048CE  5171               	movf	(sdc_reset@count+1)& (0+255),w,b
 12661  0048D0  E104               	bnz	l9132
 12662  0048D2  0E0A               	movlw	10
 12663  0048D4  5D70               	subwf	sdc_reset@count& (0+255),w,b
 12664  0048D6  A0D8               	btfss	status,0,c
 12665  0048D8  D7EF               	goto	l444
 12666  0048DA                     u10810:
 12667  0048DA                     l9132:
 12668                           
 12669                           ; BSR set to: 0
 12670                           ;diskio.c: 254: count = 0;
 12671  0048DA  0E00               	movlw	0
 12672  0048DC  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 12673  0048DE  0E00               	movlw	0
 12674  0048E0  6F70               	movwf	sdc_reset@count& (0+255),b
 12675                           
 12676                           ; BSR set to: 0
 12677                           ;diskio.c: 255: if(buff != 0x01)
 12678  0048E2  0572               	decf	sdc_reset@buff& (0+255),w,b
 12679  0048E4  B4D8               	btfsc	status,2,c
 12680  0048E6  D019               	goto	l448
 12681                           
 12682                           ; BSR set to: 0
 12683                           ;diskio.c: 256: {
 12684                           ;diskio.c: 257: posicao_cursor_lcd(1,0);
 12685  0048E8  0E00               	movlw	0
 12686  0048EA  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12687  0048EC  0E01               	movlw	1
 12688  0048EE  ECA2  F027         	call	_posicao_cursor_lcd
 12689                           
 12690                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 12691  0048F2  0E92               	movlw	low STR_11
 12692  0048F4  0100               	movlb	0	; () banked
 12693  0048F6  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12694  0048F8  0E08               	movlw	high STR_11
 12695  0048FA  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12696  0048FC  EC99  F029         	call	_escreve_frase_ram_lcd	;wreg free
 12697                           
 12698                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 12699  004900  0E00               	movlw	0
 12700  004902  0100               	movlb	0	; () banked
 12701  004904  6F61               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12702  004906  0E02               	movlw	2
 12703  004908  ECA2  F027         	call	_posicao_cursor_lcd
 12704                           
 12705                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 12706  00490C  0E4D               	movlw	low STR_12
 12707  00490E  0100               	movlb	0	; () banked
 12708  004910  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12709  004912  0E08               	movlw	high STR_12
 12710  004914  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12711  004916  EC99  F029         	call	_escreve_frase_ram_lcd	;wreg free
 12712  00491A                     l448:
 12713                           
 12714                           ;diskio.c: 261: }
 12715                           ;diskio.c: 263: }while(buff!=0X01);
 12716  00491A  0100               	movlb	0	; () banked
 12717  00491C  0572               	decf	sdc_reset@buff& (0+255),w,b
 12718  00491E  B4D8               	btfsc	status,2,c
 12719  004920  0012               	return	
 12720  004922  D7BB               	goto	l443
 12721  004924                     __end_of_sdc_reset:
 12722                           	opt stack 0
 12723                           tosu	equ	0xFFF
 12724                           tosh	equ	0xFFE
 12725                           tosl	equ	0xFFD
 12726                           pclath	equ	0xFFA
 12727                           tblptru	equ	0xFF8
 12728                           tblptrh	equ	0xFF7
 12729                           tblptrl	equ	0xFF6
 12730                           tablat	equ	0xFF5
 12731                           prodh	equ	0xFF4
 12732                           prodl	equ	0xFF3
 12733                           intcon	equ	0xFF2
 12734                           intcon2	equ	0xFF1
 12735                           intcon3	equ	0xFF0
 12736                           indf0	equ	0xFEF
 12737                           postinc0	equ	0xFEE
 12738                           fsr0h	equ	0xFEA
 12739                           fsr0l	equ	0xFE9
 12740                           wreg	equ	0xFE8
 12741                           indf1	equ	0xFE7
 12742                           postinc1	equ	0xFE6
 12743                           postdec1	equ	0xFE5
 12744                           fsr1h	equ	0xFE2
 12745                           fsr1l	equ	0xFE1
 12746                           indf2	equ	0xFDF
 12747                           postinc2	equ	0xFDE
 12748                           postdec2	equ	0xFDD
 12749                           plusw2	equ	0xFDB
 12750                           fsr2h	equ	0xFDA
 12751                           fsr2l	equ	0xFD9
 12752                           status	equ	0xFD8
 12753                           
 12754 ;; *************** function _posicao_cursor_lcd *****************
 12755 ;; Defined at:
 12756 ;;		line 271 in file "bibliotecas/display_lcd.c"
 12757 ;; Parameters:    Size  Location     Type
 12758 ;;  linha           1    wreg     unsigned char 
 12759 ;;  coluna          1    1[BANK0 ] unsigned char 
 12760 ;; Auto vars:     Size  Location     Type
 12761 ;;  linha           1    2[BANK0 ] unsigned char 
 12762 ;;  endereco        1    3[BANK0 ] unsigned char 
 12763 ;; Return value:  Size  Location     Type
 12764 ;;                  1    wreg      void 
 12765 ;; Registers used:
 12766 ;;		wreg, status,2, status,0, cstack
 12767 ;; Tracked objects:
 12768 ;;		On entry : 0/0
 12769 ;;		On exit  : 0/0
 12770 ;;		Unchanged: 0/0
 12771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12772 ;;      Params:         0       1       0       0       0       0       0       0       0
 12773 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12774 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12775 ;;      Totals:         0       3       0       0       0       0       0       0       0
 12776 ;;Total ram usage:        3 bytes
 12777 ;; Hardware stack levels used:    1
 12778 ;; Hardware stack levels required when called:    5
 12779 ;; This function calls:
 12780 ;;		_endereco_cursor_lcd
 12781 ;; This function is called by:
 12782 ;;		_mensagem_inicial
 12783 ;;		_verifica_fence_externo
 12784 ;;		_escrita_sdcard
 12785 ;;		_sdc_reset
 12786 ;;		_sdc_disk_initialize
 12787 ;;		_sdcard_init
 12788 ;; This function uses a non-reentrant model
 12789 ;;
 12790                           
 12791                           	psect	text42
 12792  004F44                     __ptext42:
 12793                           	opt stack 0
 12794  004F44                     _posicao_cursor_lcd:
 12795                           	opt stack 24
 12796                           
 12797                           ; BSR set to: 0
 12798                           ;incstack = 0
 12799                           ;posicao_cursor_lcd@linha stored from wreg
 12800  004F44  0100               	movlb	0	; () banked
 12801  004F46  6F62               	movwf	posicao_cursor_lcd@linha& (0+255),b
 12802                           
 12803                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 12804  004F48  0E00               	movlw	0
 12805  004F4A  0100               	movlb	0	; () banked
 12806  004F4C  6F63               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 12807                           
 12808                           ; BSR set to: 0
 12809                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 12810  004F4E  0E11               	movlw	17
 12811  004F50  6161               	cpfslt	posicao_cursor_lcd@coluna& (0+255),b
 12812  004F52  D034               	goto	l598
 12813  004F54  D022               	goto	l599
 12814  004F56                     l600:
 12815                           
 12816                           ; BSR set to: 0
 12817                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 12818  004F56  C061  F063         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 12819                           
 12820                           ; BSR set to: 0
 12821                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 12822  004F5A  5163               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 12823  004F5C  EC1D  F028         	call	_endereco_cursor_lcd
 12824                           
 12825                           ;display_lcd.c: 284: break;
 12826  004F60  D02A               	goto	l601
 12827  004F62                     
 12828                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 12829  004F62  0100               	movlb	0	; () banked
 12830  004F64  5161               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 12831  004F66  0F40               	addlw	64
 12832  004F68  6F63               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 12836  004F6A  5163               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 12837  004F6C  EC1D  F028         	call	_endereco_cursor_lcd
 12838                           
 12839                           ;display_lcd.c: 289: break;
 12840  004F70  D022               	goto	l601
 12841  004F72                     
 12842                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 12843  004F72  0100               	movlb	0	; () banked
 12844  004F74  5161               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 12845  004F76  0F14               	addlw	20
 12846  004F78  6F63               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 12847                           
 12848                           ; BSR set to: 0
 12849                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 12850  004F7A  5163               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 12851  004F7C  EC1D  F028         	call	_endereco_cursor_lcd
 12852                           
 12853                           ;display_lcd.c: 294: break;
 12854  004F80  D01A               	goto	l601
 12855  004F82                     
 12856                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 12857  004F82  0100               	movlb	0	; () banked
 12858  004F84  5161               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 12859  004F86  0F54               	addlw	84
 12860  004F88  6F63               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 12861                           
 12862                           ; BSR set to: 0
 12863                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 12864  004F8A  5163               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 12865  004F8C  EC1D  F028         	call	_endereco_cursor_lcd
 12866                           
 12867                           ;display_lcd.c: 299: break;
 12868  004F90  D012               	goto	l601
 12869  004F92                     
 12870                           ;display_lcd.c: 302: endereco = 0x00U;
 12871  004F92  0E00               	movlw	0
 12872  004F94  0100               	movlb	0	; () banked
 12873  004F96  6F63               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;display_lcd.c: 304: }
 12877                           
 12878                           ;display_lcd.c: 303: break;
 12879  004F98  D00E               	goto	l601
 12880  004F9A                     l599:
 12881                           
 12882                           ; BSR set to: 0
 12883                           
 12884                           ; BSR set to: 0
 12885  004F9A  5162               	movf	posicao_cursor_lcd@linha& (0+255),w,b
 12886                           
 12887                           ; Switch size 1, requested type "space"
 12888                           ; Number of cases is 4, Range of values is 1 to 4
 12889                           ; switch strategies available:
 12890                           ; Name         Instructions Cycles
 12891                           ; simple_byte           13     7 (average)
 12892                           ;	Chosen strategy is simple_byte
 12893  004F9C  0A01               	xorlw	1	; case 1
 12894  004F9E  B4D8               	btfsc	status,2,c
 12895  004FA0  D7DA               	goto	l600
 12896  004FA2  0A03               	xorlw	3	; case 2
 12897  004FA4  B4D8               	btfsc	status,2,c
 12898  004FA6  D7DD               	goto	l602
 12899  004FA8  0A01               	xorlw	1	; case 3
 12900  004FAA  B4D8               	btfsc	status,2,c
 12901  004FAC  D7E2               	goto	l603
 12902  004FAE  0A07               	xorlw	7	; case 4
 12903  004FB0  B4D8               	btfsc	status,2,c
 12904  004FB2  D7E7               	goto	l604
 12905  004FB4  D7EE               	goto	l605
 12906  004FB6                     l601:
 12907                           
 12908                           ;display_lcd.c: 306: coluna++;
 12909                           
 12910                           ; BSR set to: 0
 12911  004FB6  0100               	movlb	0	; () banked
 12912  004FB8  2B61               	incf	posicao_cursor_lcd@coluna& (0+255),f,b
 12913                           
 12914                           ;display_lcd.c: 307: }
 12915  004FBA  0012               	return	
 12916  004FBC                     l598:
 12917                           
 12918                           ; BSR set to: 0
 12919                           ;display_lcd.c: 308: else
 12920                           ;display_lcd.c: 309: {
 12921                           ;display_lcd.c: 310: endereco = 0x00U;
 12922                           
 12923                           ; BSR set to: 0
 12924  004FBC  0E00               	movlw	0
 12925  004FBE  6F63               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 12926  004FC0  0012               	return	
 12927  004FC2                     __end_of_posicao_cursor_lcd:
 12928                           	opt stack 0
 12929                           tosu	equ	0xFFF
 12930                           tosh	equ	0xFFE
 12931                           tosl	equ	0xFFD
 12932                           pclath	equ	0xFFA
 12933                           tblptru	equ	0xFF8
 12934                           tblptrh	equ	0xFF7
 12935                           tblptrl	equ	0xFF6
 12936                           tablat	equ	0xFF5
 12937                           prodh	equ	0xFF4
 12938                           prodl	equ	0xFF3
 12939                           intcon	equ	0xFF2
 12940                           intcon2	equ	0xFF1
 12941                           intcon3	equ	0xFF0
 12942                           indf0	equ	0xFEF
 12943                           postinc0	equ	0xFEE
 12944                           fsr0h	equ	0xFEA
 12945                           fsr0l	equ	0xFE9
 12946                           wreg	equ	0xFE8
 12947                           indf1	equ	0xFE7
 12948                           postinc1	equ	0xFE6
 12949                           postdec1	equ	0xFE5
 12950                           fsr1h	equ	0xFE2
 12951                           fsr1l	equ	0xFE1
 12952                           indf2	equ	0xFDF
 12953                           postinc2	equ	0xFDE
 12954                           postdec2	equ	0xFDD
 12955                           plusw2	equ	0xFDB
 12956                           fsr2h	equ	0xFDA
 12957                           fsr2l	equ	0xFD9
 12958                           status	equ	0xFD8
 12959                           
 12960 ;; *************** function _endereco_cursor_lcd *****************
 12961 ;; Defined at:
 12962 ;;		line 218 in file "bibliotecas/display_lcd.c"
 12963 ;; Parameters:    Size  Location     Type
 12964 ;;  endereco        1    wreg     unsigned char 
 12965 ;; Auto vars:     Size  Location     Type
 12966 ;;  endereco        1    0[BANK0 ] unsigned char 
 12967 ;; Return value:  Size  Location     Type
 12968 ;;                  1    wreg      void 
 12969 ;; Registers used:
 12970 ;;		wreg, status,2, status,0, cstack
 12971 ;; Tracked objects:
 12972 ;;		On entry : 0/0
 12973 ;;		On exit  : 0/0
 12974 ;;		Unchanged: 0/0
 12975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12976 ;;      Params:         0       0       0       0       0       0       0       0       0
 12977 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12978 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12979 ;;      Totals:         0       1       0       0       0       0       0       0       0
 12980 ;;Total ram usage:        1 bytes
 12981 ;; Hardware stack levels used:    1
 12982 ;; Hardware stack levels required when called:    4
 12983 ;; This function calls:
 12984 ;;		_delay
 12985 ;; This function is called by:
 12986 ;;		_posicao_cursor_lcd
 12987 ;;		_cria_caractere_lcd
 12988 ;; This function uses a non-reentrant model
 12989 ;;
 12990                           
 12991                           	psect	text43
 12992  00503A                     __ptext43:
 12993                           	opt stack 0
 12994  00503A                     _endereco_cursor_lcd:
 12995                           	opt stack 24
 12996                           
 12997                           ; BSR set to: 0
 12998                           ;incstack = 0
 12999                           ;endereco_cursor_lcd@endereco stored from wreg
 13000  00503A  0100               	movlb	0	; () banked
 13001  00503C  6F60               	movwf	endereco_cursor_lcd@endereco& (0+255),b
 13002                           
 13003                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 13004  00503E  9483               	bcf	3971,2,c	;volatile
 13005                           
 13006                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 13007  005040  9283               	bcf	3971,1,c	;volatile
 13008                           
 13009                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 13010  005042  9083               	bcf	3971,0,c	;volatile
 13011                           
 13012                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 13013  005044  8E83               	bsf	3971,7,c	;volatile
 13014                           
 13015                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 13016  005046  0100               	movlb	0	; () banked
 13017  005048  A960               	btfss	endereco_cursor_lcd@endereco& (0+255),4,b
 13018  00504A  D002               	goto	l581
 13019                           
 13020                           ; BSR set to: 0
 13021  00504C  8883               	bsf	3971,4,c	;volatile
 13022  00504E  D001               	goto	l582
 13023  005050                     l581:
 13024                           
 13025                           ; BSR set to: 0
 13026                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 13027  005050  9883               	bcf	3971,4,c	;volatile
 13028  005052                     l582:
 13029                           
 13030                           ; BSR set to: 0
 13031                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 13032                           
 13033                           ; BSR set to: 0
 13034  005052  AB60               	btfss	endereco_cursor_lcd@endereco& (0+255),5,b
 13035  005054  D002               	goto	l583
 13036                           
 13037                           ; BSR set to: 0
 13038  005056  8A83               	bsf	3971,5,c	;volatile
 13039  005058  D001               	goto	l584
 13040  00505A                     l583:
 13041                           
 13042                           ; BSR set to: 0
 13043                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 13044  00505A  9A83               	bcf	3971,5,c	;volatile
 13045  00505C                     l584:
 13046                           
 13047                           ; BSR set to: 0
 13048                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 13049                           
 13050                           ; BSR set to: 0
 13051  00505C  AD60               	btfss	endereco_cursor_lcd@endereco& (0+255),6,b
 13052  00505E  D002               	goto	l585
 13053                           
 13054                           ; BSR set to: 0
 13055  005060  8C83               	bsf	3971,6,c	;volatile
 13056  005062  D001               	goto	l586
 13057  005064                     l585:
 13058                           
 13059                           ; BSR set to: 0
 13060                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 13061  005064  9C83               	bcf	3971,6,c	;volatile
 13062  005066                     l586:
 13063                           
 13064                           ; BSR set to: 0
 13065                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 13066  005066  8083               	bsf	3971,0,c	;volatile
 13067                           
 13068                           ; BSR set to: 0
 13069                           ;display_lcd.c: 236: delay();
 13070  005068  EC49  F02C         	call	_delay	;wreg free
 13071                           
 13072                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 13073  00506C  9083               	bcf	3971,0,c	;volatile
 13074                           
 13075                           ;display_lcd.c: 238: delay();
 13076  00506E  EC49  F02C         	call	_delay	;wreg free
 13077                           
 13078                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 13079  005072  0100               	movlb	0	; () banked
 13080  005074  A160               	btfss	endereco_cursor_lcd@endereco& (0+255),0,b
 13081  005076  D002               	goto	l587
 13082                           
 13083                           ; BSR set to: 0
 13084  005078  8883               	bsf	3971,4,c	;volatile
 13085  00507A  D001               	goto	l588
 13086  00507C                     l587:
 13087                           
 13088                           ; BSR set to: 0
 13089                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 13090  00507C  9883               	bcf	3971,4,c	;volatile
 13091  00507E                     l588:
 13092                           
 13093                           ; BSR set to: 0
 13094                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 13095  00507E  A360               	btfss	endereco_cursor_lcd@endereco& (0+255),1,b
 13096  005080  D002               	goto	l589
 13097                           
 13098                           ; BSR set to: 0
 13099  005082  8A83               	bsf	3971,5,c	;volatile
 13100  005084  D001               	goto	l590
 13101  005086                     l589:
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 13105  005086  9A83               	bcf	3971,5,c	;volatile
 13106  005088                     l590:
 13107                           
 13108                           ; BSR set to: 0
 13109                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 13110  005088  A560               	btfss	endereco_cursor_lcd@endereco& (0+255),2,b
 13111  00508A  D002               	goto	l591
 13112                           
 13113                           ; BSR set to: 0
 13114  00508C  8C83               	bsf	3971,6,c	;volatile
 13115  00508E  D001               	goto	l592
 13116  005090                     l591:
 13117                           
 13118                           ; BSR set to: 0
 13119                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 13120  005090  9C83               	bcf	3971,6,c	;volatile
 13121  005092                     l592:
 13122                           
 13123                           ; BSR set to: 0
 13124                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 13125  005092  A760               	btfss	endereco_cursor_lcd@endereco& (0+255),3,b
 13126  005094  D002               	goto	l593
 13127                           
 13128                           ; BSR set to: 0
 13129  005096  8E83               	bsf	3971,7,c	;volatile
 13130  005098  D001               	goto	l594
 13131  00509A                     l593:
 13132                           
 13133                           ; BSR set to: 0
 13134                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 13135  00509A  9E83               	bcf	3971,7,c	;volatile
 13136  00509C                     l594:
 13137                           
 13138                           ; BSR set to: 0
 13139                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 13140  00509C  8083               	bsf	3971,0,c	;volatile
 13141                           
 13142                           ; BSR set to: 0
 13143                           ;display_lcd.c: 252: delay();
 13144  00509E  EC49  F02C         	call	_delay	;wreg free
 13145                           
 13146                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 13147  0050A2  9083               	bcf	3971,0,c	;volatile
 13148                           
 13149                           ;display_lcd.c: 254: delay();
 13150  0050A4  EC49  F02C         	call	_delay	;wreg free
 13151  0050A8  0012               	return		;funcret
 13152  0050AA                     __end_of_endereco_cursor_lcd:
 13153                           	opt stack 0
 13154                           tosu	equ	0xFFF
 13155                           tosh	equ	0xFFE
 13156                           tosl	equ	0xFFD
 13157                           pclath	equ	0xFFA
 13158                           tblptru	equ	0xFF8
 13159                           tblptrh	equ	0xFF7
 13160                           tblptrl	equ	0xFF6
 13161                           tablat	equ	0xFF5
 13162                           prodh	equ	0xFF4
 13163                           prodl	equ	0xFF3
 13164                           intcon	equ	0xFF2
 13165                           intcon2	equ	0xFF1
 13166                           intcon3	equ	0xFF0
 13167                           indf0	equ	0xFEF
 13168                           postinc0	equ	0xFEE
 13169                           fsr0h	equ	0xFEA
 13170                           fsr0l	equ	0xFE9
 13171                           wreg	equ	0xFE8
 13172                           indf1	equ	0xFE7
 13173                           postinc1	equ	0xFE6
 13174                           postdec1	equ	0xFE5
 13175                           fsr1h	equ	0xFE2
 13176                           fsr1l	equ	0xFE1
 13177                           indf2	equ	0xFDF
 13178                           postinc2	equ	0xFDE
 13179                           postdec2	equ	0xFDD
 13180                           plusw2	equ	0xFDB
 13181                           fsr2h	equ	0xFDA
 13182                           fsr2l	equ	0xFD9
 13183                           status	equ	0xFD8
 13184                           
 13185 ;; *************** function _check_fs *****************
 13186 ;; Defined at:
 13187 ;;		line 623 in file "bibliotecas/tff.c"
 13188 ;; Parameters:    Size  Location     Type
 13189 ;;  sect            4   43[BANK0 ] unsigned long 
 13190 ;; Auto vars:     Size  Location     Type
 13191 ;;  fs              2   49[BANK0 ] PTR struct _FATFS
 13192 ;;		 -> NULL(0), fs(544), 
 13193 ;; Return value:  Size  Location     Type
 13194 ;;                  1    wreg      unsigned char 
 13195 ;; Registers used:
 13196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13197 ;; Tracked objects:
 13198 ;;		On entry : 0/0
 13199 ;;		On exit  : 0/0
 13200 ;;		Unchanged: 0/0
 13201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13202 ;;      Params:         0       4       0       0       0       0       0       0       0
 13203 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13204 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13205 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13206 ;;Total ram usage:        8 bytes
 13207 ;; Hardware stack levels used:    1
 13208 ;; Hardware stack levels required when called:    8
 13209 ;; This function calls:
 13210 ;;		_disk_read
 13211 ;;		_memcmp
 13212 ;; This function is called by:
 13213 ;;		_auto_mount
 13214 ;; This function uses a non-reentrant model
 13215 ;;
 13216                           
 13217                           	psect	text44
 13218  004C1E                     __ptext44:
 13219                           	opt stack 0
 13220  004C1E                     _check_fs:
 13221                           	opt stack 17
 13222                           
 13223                           ;tff.c: 627: FATFS *fs = FatFs;
 13224                           
 13225                           ;incstack = 0
 13226  004C1E  C0FD  F091         	movff	_FatFs,check_fs@fs
 13227  004C22  C0FE  F092         	movff	_FatFs+1,check_fs@fs+1
 13228                           
 13229                           ;tff.c: 629: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 13230  004C26  0E20               	movlw	32
 13231  004C28  0100               	movlb	0	; () banked
 13232  004C2A  2591               	addwf	check_fs@fs& (0+255),w,b
 13233  004C2C  6F7F               	movwf	disk_read@buff& (0+255),b
 13234  004C2E  0E00               	movlw	0
 13235  004C30  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 13236  004C32  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 13237  004C34  C08B  F081         	movff	check_fs@sect,disk_read@sector
 13238  004C38  C08C  F082         	movff	check_fs@sect+1,disk_read@sector+1
 13239  004C3C  C08D  F083         	movff	check_fs@sect+2,disk_read@sector+2
 13240  004C40  C08E  F084         	movff	check_fs@sect+3,disk_read@sector+3
 13241  004C44  0E01               	movlw	1
 13242  004C46  6F85               	movwf	disk_read@count& (0+255),b
 13243  004C48  0E00               	movlw	0
 13244  004C4A  ECC7  F025         	call	_disk_read
 13245  004C4E  0900               	iorlw	0
 13246  004C50  B4D8               	btfsc	status,2,c
 13247  004C52  D002               	goto	l1093
 13248                           
 13249                           ;tff.c: 630: return 2;
 13250  004C54  0E02               	movlw	2
 13251  004C56  0012               	return	
 13252  004C58                     l1093:
 13253                           
 13254                           ;tff.c: 631: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 13255  004C58  0100               	movlb	0	; () banked
 13256  004C5A  EE22 F01E          	lfsr	2,542
 13257  004C5E  5191               	movf	check_fs@fs& (0+255),w,b
 13258  004C60  26D9               	addwf	fsr2l,f,c
 13259  004C62  5192               	movf	(check_fs@fs+1)& (0+255),w,b
 13260  004C64  22DA               	addwfc	fsr2h,f,c
 13261  004C66  0E55               	movlw	85
 13262  004C68  18DE               	xorwf	postinc2,w,c
 13263  004C6A  E104               	bnz	u12020
 13264  004C6C  0EAA               	movlw	170
 13265  004C6E  18DE               	xorwf	postinc2,w,c
 13266  004C70  B4D8               	btfsc	status,2,c
 13267  004C72  D002               	goto	l1095
 13268  004C74                     u12020:
 13269                           
 13270                           ; BSR set to: 0
 13271                           ;tff.c: 632: return 2;
 13272  004C74  0E02               	movlw	2
 13273                           
 13274                           ; BSR set to: 0
 13275  004C76  0012               	return	
 13276  004C78                     l1095:
 13277                           
 13278                           ; BSR set to: 0
 13279                           ;tff.c: 634: if (!memcmp(&fs->win[54], "FAT", 3))
 13280                           
 13281                           ; BSR set to: 0
 13282  004C78  0E56               	movlw	86
 13283  004C7A  2591               	addwf	check_fs@fs& (0+255),w,b
 13284  004C7C  6F60               	movwf	memcmp@s1& (0+255),b
 13285  004C7E  0E00               	movlw	0
 13286  004C80  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 13287  004C82  6F61               	movwf	(memcmp@s1+1)& (0+255),b
 13288  004C84  0ED0               	movlw	low STR_16
 13289  004C86  6F62               	movwf	memcmp@s2& (0+255),b
 13290  004C88  0E08               	movlw	high STR_16
 13291  004C8A  6F63               	movwf	(memcmp@s2+1)& (0+255),b
 13292  004C8C  0E00               	movlw	0
 13293  004C8E  6F65               	movwf	(memcmp@n+1)& (0+255),b
 13294  004C90  0E03               	movlw	3
 13295  004C92  6F64               	movwf	memcmp@n& (0+255),b
 13296  004C94  EC92  F024         	call	_memcmp	;wreg free
 13297  004C98  0100               	movlb	0	; () banked
 13298  004C9A  5160               	movf	?_memcmp& (0+255),w,b
 13299  004C9C  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 13300  004C9E  A4D8               	btfss	status,2,c
 13301  004CA0  D002               	goto	l1096
 13302                           
 13303                           ; BSR set to: 0
 13304                           ;tff.c: 635: return 0;
 13305  004CA2  0E00               	movlw	0
 13306                           
 13307                           ; BSR set to: 0
 13308  004CA4  0012               	return	
 13309  004CA6                     l1096:
 13310                           
 13311                           ; BSR set to: 0
 13312                           ;tff.c: 640: return 1;
 13313                           
 13314                           ; BSR set to: 0
 13315  004CA6  0E01               	movlw	1
 13316  004CA8  0012               	return	
 13317  004CAA                     __end_of_check_fs:
 13318                           	opt stack 0
 13319                           tosu	equ	0xFFF
 13320                           tosh	equ	0xFFE
 13321                           tosl	equ	0xFFD
 13322                           pclath	equ	0xFFA
 13323                           tblptru	equ	0xFF8
 13324                           tblptrh	equ	0xFF7
 13325                           tblptrl	equ	0xFF6
 13326                           tablat	equ	0xFF5
 13327                           prodh	equ	0xFF4
 13328                           prodl	equ	0xFF3
 13329                           intcon	equ	0xFF2
 13330                           intcon2	equ	0xFF1
 13331                           intcon3	equ	0xFF0
 13332                           indf0	equ	0xFEF
 13333                           postinc0	equ	0xFEE
 13334                           fsr0h	equ	0xFEA
 13335                           fsr0l	equ	0xFE9
 13336                           wreg	equ	0xFE8
 13337                           indf1	equ	0xFE7
 13338                           postinc1	equ	0xFE6
 13339                           postdec1	equ	0xFE5
 13340                           fsr1h	equ	0xFE2
 13341                           fsr1l	equ	0xFE1
 13342                           indf2	equ	0xFDF
 13343                           postinc2	equ	0xFDE
 13344                           postdec2	equ	0xFDD
 13345                           plusw2	equ	0xFDB
 13346                           fsr2h	equ	0xFDA
 13347                           fsr2l	equ	0xFD9
 13348                           status	equ	0xFD8
 13349                           
 13350 ;; *************** function _memcmp *****************
 13351 ;; Defined at:
 13352 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
 13353 ;; Parameters:    Size  Location     Type
 13354 ;;  s1              2    0[BANK0 ] PTR const void 
 13355 ;;		 -> fs.win(512), NULL(0), fs(544), 
 13356 ;;  s2              2    2[BANK0 ] PTR const void 
 13357 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_16(4), 
 13358 ;;  n               2    4[BANK0 ] unsigned int 
 13359 ;; Auto vars:     Size  Location     Type
 13360 ;;		None
 13361 ;; Return value:  Size  Location     Type
 13362 ;;                  2    0[BANK0 ] int 
 13363 ;; Registers used:
 13364 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 13365 ;; Tracked objects:
 13366 ;;		On entry : 0/0
 13367 ;;		On exit  : 0/0
 13368 ;;		Unchanged: 0/0
 13369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13370 ;;      Params:         0       6       0       0       0       0       0       0       0
 13371 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13372 ;;      Temps:          0       3       0       0       0       0       0       0       0
 13373 ;;      Totals:         0       9       0       0       0       0       0       0       0
 13374 ;;Total ram usage:        9 bytes
 13375 ;; Hardware stack levels used:    1
 13376 ;; Hardware stack levels required when called:    3
 13377 ;; This function calls:
 13378 ;;		Nothing
 13379 ;; This function is called by:
 13380 ;;		_trace_path
 13381 ;;		_check_fs
 13382 ;; This function uses a non-reentrant model
 13383 ;;
 13384                           
 13385                           	psect	text45
 13386  004924                     __ptext45:
 13387                           	opt stack 0
 13388  004924                     _memcmp:
 13389                           	opt stack 22
 13390                           
 13391                           ;incstack = 0
 13392  004924  D043               	goto	l1819
 13393  004926                     l9450:
 13394  004926  C060  FFD9         	movff	memcmp@s1,fsr2l
 13395  00492A  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 13396  00492E  50DF               	movf	indf2,w,c
 13397  004930  0100               	movlb	0	; () banked
 13398  004932  6F66               	movwf	??_memcmp& (0+255),b
 13399  004934  C062  FFF6         	movff	memcmp@s2,tblptrl
 13400  004938  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 13401  00493C  6AF8               	clrf	tblptru,c
 13402  00493E  0E07               	movlw	(high __ramtop+-1)
 13403  004940  64F7               	cpfsgt	tblptrh,c
 13404  004942  D003               	bra	u11287
 13405  004944  0008               	tblrd		*
 13406  004946  50F5               	movf	tablat,w,c
 13407  004948  D005               	bra	u11280
 13408  00494A                     u11287:
 13409  00494A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13410  00494E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13411  004952  50EF               	movf	indf0,w,c
 13412  004954                     u11280:
 13413  004954  0100               	movlb	0	; () banked
 13414  004956  1966               	xorwf	??_memcmp& (0+255),w,b
 13415  004958  B4D8               	btfsc	status,2,c
 13416  00495A  D024               	goto	l1821
 13417                           
 13418                           ; BSR set to: 0
 13419  00495C  C062  FFF6         	movff	memcmp@s2,tblptrl
 13420  004960  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 13421  004964  6AF8               	clrf	tblptru,c
 13422  004966  0E07               	movlw	(high __ramtop+-1)
 13423  004968  64F7               	cpfsgt	tblptrh,c
 13424  00496A  D003               	bra	u11307
 13425  00496C  0008               	tblrd		*
 13426  00496E  50F5               	movf	tablat,w,c
 13427  004970  D005               	bra	u11300
 13428  004972                     u11307:
 13429  004972  CFF6 FFE9          	movff	tblptrl,fsr0l
 13430  004976  CFF7 FFEA          	movff	tblptrh,fsr0h
 13431  00497A  50EF               	movf	indf0,w,c
 13432  00497C                     u11300:
 13433  00497C  0100               	movlb	0	; () banked
 13434  00497E  6F66               	movwf	??_memcmp& (0+255),b
 13435  004980  6B67               	clrf	(??_memcmp+1)& (0+255),b
 13436  004982  1F66               	comf	??_memcmp& (0+255),f,b
 13437  004984  1F67               	comf	(??_memcmp+1)& (0+255),f,b
 13438  004986  4B66               	infsnz	??_memcmp& (0+255),f,b
 13439  004988  2B67               	incf	(??_memcmp+1)& (0+255),f,b
 13440  00498A  C060  FFD9         	movff	memcmp@s1,fsr2l
 13441  00498E  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 13442  004992  50DF               	movf	indf2,w,c
 13443  004994  6F68               	movwf	(??_memcmp+2)& (0+255),b
 13444  004996  5168               	movf	(??_memcmp+2)& (0+255),w,b
 13445  004998  2566               	addwf	??_memcmp& (0+255),w,b
 13446  00499A  6F60               	movwf	?_memcmp& (0+255),b
 13447  00499C  0E00               	movlw	0
 13448  00499E  2167               	addwfc	(??_memcmp+1)& (0+255),w,b
 13449  0049A0  6F61               	movwf	(?_memcmp+1)& (0+255),b
 13450                           
 13451                           ; BSR set to: 0
 13452  0049A2  0012               	return	
 13453  0049A4                     l1821:
 13454                           
 13455                           ; BSR set to: 0
 13456                           
 13457                           ; BSR set to: 0
 13458  0049A4  4B60               	infsnz	memcmp@s1& (0+255),f,b
 13459  0049A6  2B61               	incf	(memcmp@s1+1)& (0+255),f,b
 13460  0049A8  4B62               	infsnz	memcmp@s2& (0+255),f,b
 13461  0049AA  2B63               	incf	(memcmp@s2+1)& (0+255),f,b
 13462  0049AC                     l1819:
 13463                           
 13464                           ; BSR set to: 0
 13465  0049AC  0100               	movlb	0	; () banked
 13466  0049AE  0764               	decf	memcmp@n& (0+255),f,b
 13467  0049B0  A0D8               	btfss	status,0,c
 13468  0049B2  0765               	decf	(memcmp@n+1)& (0+255),f,b
 13469  0049B4  2964               	incf	memcmp@n& (0+255),w,b
 13470  0049B6  E1B7               	bnz	l9450
 13471  0049B8  2965               	incf	(memcmp@n+1)& (0+255),w,b
 13472  0049BA  A4D8               	btfss	status,2,c
 13473  0049BC  D7B4               	goto	l1820
 13474                           
 13475                           ; BSR set to: 0
 13476                           
 13477                           ; BSR set to: 0
 13478  0049BE  0E00               	movlw	0
 13479  0049C0  6F61               	movwf	(?_memcmp+1)& (0+255),b
 13480  0049C2  0E00               	movlw	0
 13481  0049C4  6F60               	movwf	?_memcmp& (0+255),b
 13482  0049C6  0012               	return	
 13483  0049C8                     __end_of_memcmp:
 13484                           	opt stack 0
 13485                           tosu	equ	0xFFF
 13486                           tosh	equ	0xFFE
 13487                           tosl	equ	0xFFD
 13488                           pclath	equ	0xFFA
 13489                           tblptru	equ	0xFF8
 13490                           tblptrh	equ	0xFF7
 13491                           tblptrl	equ	0xFF6
 13492                           tablat	equ	0xFF5
 13493                           prodh	equ	0xFF4
 13494                           prodl	equ	0xFF3
 13495                           intcon	equ	0xFF2
 13496                           intcon2	equ	0xFF1
 13497                           intcon3	equ	0xFF0
 13498                           indf0	equ	0xFEF
 13499                           postinc0	equ	0xFEE
 13500                           fsr0h	equ	0xFEA
 13501                           fsr0l	equ	0xFE9
 13502                           wreg	equ	0xFE8
 13503                           indf1	equ	0xFE7
 13504                           postinc1	equ	0xFE6
 13505                           postdec1	equ	0xFE5
 13506                           fsr1h	equ	0xFE2
 13507                           fsr1l	equ	0xFE1
 13508                           indf2	equ	0xFDF
 13509                           postinc2	equ	0xFDE
 13510                           postdec2	equ	0xFDD
 13511                           plusw2	equ	0xFDB
 13512                           fsr2h	equ	0xFDA
 13513                           fsr2l	equ	0xFD9
 13514                           status	equ	0xFD8
 13515                           
 13516 ;; *************** function ___lmul *****************
 13517 ;; Defined at:
 13518 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13519 ;; Parameters:    Size  Location     Type
 13520 ;;  multiplier      4    0[BANK0 ] unsigned long 
 13521 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;  product         4    8[BANK0 ] unsigned long 
 13524 ;; Return value:  Size  Location     Type
 13525 ;;                  4    0[BANK0 ] unsigned long 
 13526 ;; Registers used:
 13527 ;;		wreg, status,2, status,0
 13528 ;; Tracked objects:
 13529 ;;		On entry : 0/0
 13530 ;;		On exit  : 0/0
 13531 ;;		Unchanged: 0/0
 13532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13533 ;;      Params:         0       8       0       0       0       0       0       0       0
 13534 ;;      Locals:         0       4       0       0       0       0       0       0       0
 13535 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13536 ;;      Totals:         0      12       0       0       0       0       0       0       0
 13537 ;;Total ram usage:       12 bytes
 13538 ;; Hardware stack levels used:    1
 13539 ;; Hardware stack levels required when called:    3
 13540 ;; This function calls:
 13541 ;;		Nothing
 13542 ;; This function is called by:
 13543 ;;		_clust2sect
 13544 ;;		_auto_mount
 13545 ;; This function uses a non-reentrant model
 13546 ;;
 13547                           
 13548                           	psect	text46
 13549  005230                     __ptext46:
 13550                           	opt stack 0
 13551  005230                     ___lmul:
 13552                           	opt stack 21
 13553                           
 13554                           ; BSR set to: 0
 13555                           ;incstack = 0
 13556  005230  0E00               	movlw	0
 13557  005232  0100               	movlb	0	; () banked
 13558  005234  6F68               	movwf	___lmul@product& (0+255),b
 13559  005236  0E00               	movlw	0
 13560  005238  6F69               	movwf	(___lmul@product+1)& (0+255),b
 13561  00523A  0E00               	movlw	0
 13562  00523C  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 13563  00523E  0E00               	movlw	0
 13564  005240  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 13565  005242                     
 13566                           ; BSR set to: 0
 13567                           
 13568                           ; BSR set to: 0
 13569  005242  A160               	btfss	___lmul@multiplier& (0+255),0,b
 13570  005244  D008               	goto	l1386
 13571                           
 13572                           ; BSR set to: 0
 13573  005246  5164               	movf	___lmul@multiplicand& (0+255),w,b
 13574  005248  2768               	addwf	___lmul@product& (0+255),f,b
 13575  00524A  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 13576  00524C  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 13577  00524E  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 13578  005250  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 13579  005252  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 13580  005254  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 13581  005256                     l1386:
 13582                           
 13583                           ; BSR set to: 0
 13584                           
 13585                           ; BSR set to: 0
 13586  005256  90D8               	bcf	status,0,c
 13587  005258  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 13588  00525A  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 13589  00525C  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 13590  00525E  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 13591                           
 13592                           ; BSR set to: 0
 13593  005260  90D8               	bcf	status,0,c
 13594  005262  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 13595  005264  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 13596  005266  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 13597  005268  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 13598  00526A  5160               	movf	___lmul@multiplier& (0+255),w,b
 13599  00526C  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 13600  00526E  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 13601  005270  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 13602  005272  A4D8               	btfss	status,2,c
 13603  005274  D7E6               	goto	l1385
 13604                           
 13605                           ; BSR set to: 0
 13606  005276  C068  F060         	movff	___lmul@product,?___lmul
 13607  00527A  C069  F061         	movff	___lmul@product+1,?___lmul+1
 13608  00527E  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 13609  005282  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 13610                           
 13611                           ; BSR set to: 0
 13612  005286  0012               	return		;funcret
 13613  005288                     __end_of___lmul:
 13614                           	opt stack 0
 13615                           tosu	equ	0xFFF
 13616                           tosh	equ	0xFFE
 13617                           tosl	equ	0xFFD
 13618                           pclath	equ	0xFFA
 13619                           tblptru	equ	0xFF8
 13620                           tblptrh	equ	0xFF7
 13621                           tblptrl	equ	0xFF6
 13622                           tablat	equ	0xFF5
 13623                           prodh	equ	0xFF4
 13624                           prodl	equ	0xFF3
 13625                           intcon	equ	0xFF2
 13626                           intcon2	equ	0xFF1
 13627                           intcon3	equ	0xFF0
 13628                           indf0	equ	0xFEF
 13629                           postinc0	equ	0xFEE
 13630                           fsr0h	equ	0xFEA
 13631                           fsr0l	equ	0xFE9
 13632                           wreg	equ	0xFE8
 13633                           indf1	equ	0xFE7
 13634                           postinc1	equ	0xFE6
 13635                           postdec1	equ	0xFE5
 13636                           fsr1h	equ	0xFE2
 13637                           fsr1l	equ	0xFE1
 13638                           indf2	equ	0xFDF
 13639                           postinc2	equ	0xFDE
 13640                           postdec2	equ	0xFDD
 13641                           plusw2	equ	0xFDB
 13642                           fsr2h	equ	0xFDA
 13643                           fsr2l	equ	0xFD9
 13644                           status	equ	0xFD8
 13645                           
 13646 ;; *************** function _f_mount *****************
 13647 ;; Defined at:
 13648 ;;		line 793 in file "bibliotecas/tff.c"
 13649 ;; Parameters:    Size  Location     Type
 13650 ;;  drv             1    wreg     unsigned char 
 13651 ;;  fs              2   32[COMRAM] PTR struct _FATFS
 13652 ;;		 -> fs(544), 
 13653 ;; Auto vars:     Size  Location     Type
 13654 ;;  drv             1    0[BANK0 ] unsigned char 
 13655 ;; Return value:  Size  Location     Type
 13656 ;;                  1    wreg      enum E3974
 13657 ;; Registers used:
 13658 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13659 ;; Tracked objects:
 13660 ;;		On entry : 0/0
 13661 ;;		On exit  : 0/0
 13662 ;;		Unchanged: 0/0
 13663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13664 ;;      Params:         2       0       0       0       0       0       0       0       0
 13665 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13666 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13667 ;;      Totals:         2       1       0       0       0       0       0       0       0
 13668 ;;Total ram usage:        3 bytes
 13669 ;; Hardware stack levels used:    1
 13670 ;; Hardware stack levels required when called:    3
 13671 ;; This function calls:
 13672 ;;		Nothing
 13673 ;; This function is called by:
 13674 ;;		_escrita_sdcard
 13675 ;;		_leitura_sdcard
 13676 ;;		_sdcard_init
 13677 ;; This function uses a non-reentrant model
 13678 ;;
 13679                           
 13680                           	psect	text47
 13681  005426                     __ptext47:
 13682                           	opt stack 0
 13683  005426                     _f_mount:
 13684                           	opt stack 24
 13685                           
 13686                           ; BSR set to: 0
 13687                           ;incstack = 0
 13688                           ;f_mount@drv stored from wreg
 13689  005426  0100               	movlb	0	; () banked
 13690  005428  6F60               	movwf	f_mount@drv& (0+255),b
 13691                           
 13692                           ;tff.c: 798: if (drv) return FR_INVALID_DRIVE;
 13693  00542A  0100               	movlb	0	; () banked
 13694  00542C  5160               	movf	f_mount@drv& (0+255),w,b
 13695  00542E  B4D8               	btfsc	status,2,c
 13696  005430  D002               	goto	l1128
 13697                           
 13698                           ; BSR set to: 0
 13699  005432  0E05               	movlw	5
 13700                           
 13701                           ; BSR set to: 0
 13702  005434  0012               	return	
 13703  005436                     l1128:
 13704                           
 13705                           ; BSR set to: 0
 13706                           ;tff.c: 800: if (FatFs) FatFs->fs_type = 0;
 13707                           
 13708                           ; BSR set to: 0
 13709  005436  51FD               	movf	_FatFs& (0+255),w,b
 13710  005438  11FE               	iorwf	(_FatFs+1)& (0+255),w,b
 13711  00543A  B4D8               	btfsc	status,2,c
 13712  00543C  D008               	goto	l1130
 13713                           
 13714                           ; BSR set to: 0
 13715  00543E  EE20 F01C          	lfsr	2,28
 13716  005442  51FD               	movf	_FatFs& (0+255),w,b
 13717  005444  26D9               	addwf	fsr2l,f,c
 13718  005446  51FE               	movf	(_FatFs+1)& (0+255),w,b
 13719  005448  22DA               	addwfc	fsr2h,f,c
 13720  00544A  0E00               	movlw	0
 13721  00544C  6EDF               	movwf	indf2,c
 13722  00544E                     l1130:
 13723                           
 13724                           ; BSR set to: 0
 13725                           ;tff.c: 802: FatFs = fs;
 13726                           
 13727                           ; BSR set to: 0
 13728  00544E  C021  F0FD         	movff	f_mount@fs,_FatFs
 13729  005452  C022  F0FE         	movff	f_mount@fs+1,_FatFs+1
 13730                           
 13731                           ; BSR set to: 0
 13732                           ;tff.c: 803: if (fs) fs->fs_type = 0;
 13733  005456  5021               	movf	f_mount@fs,w,c
 13734  005458  1022               	iorwf	f_mount@fs+1,w,c
 13735  00545A  B4D8               	btfsc	status,2,c
 13736  00545C  D008               	goto	l1131
 13737                           
 13738                           ; BSR set to: 0
 13739  00545E  EE20 F01C          	lfsr	2,28
 13740  005462  5021               	movf	f_mount@fs,w,c
 13741  005464  26D9               	addwf	fsr2l,f,c
 13742  005466  5022               	movf	f_mount@fs+1,w,c
 13743  005468  22DA               	addwfc	fsr2h,f,c
 13744  00546A  0E00               	movlw	0
 13745  00546C  6EDF               	movwf	indf2,c
 13746  00546E                     l1131:
 13747                           
 13748                           ; BSR set to: 0
 13749                           ;tff.c: 805: return FR_OK;
 13750                           
 13751                           ; BSR set to: 0
 13752  00546E  0E00               	movlw	0
 13753  005470  0012               	return	
 13754  005472                     __end_of_f_mount:
 13755                           	opt stack 0
 13756                           tosu	equ	0xFFF
 13757                           tosh	equ	0xFFE
 13758                           tosl	equ	0xFFD
 13759                           pclath	equ	0xFFA
 13760                           tblptru	equ	0xFF8
 13761                           tblptrh	equ	0xFF7
 13762                           tblptrl	equ	0xFF6
 13763                           tablat	equ	0xFF5
 13764                           prodh	equ	0xFF4
 13765                           prodl	equ	0xFF3
 13766                           intcon	equ	0xFF2
 13767                           intcon2	equ	0xFF1
 13768                           intcon3	equ	0xFF0
 13769                           indf0	equ	0xFEF
 13770                           postinc0	equ	0xFEE
 13771                           fsr0h	equ	0xFEA
 13772                           fsr0l	equ	0xFE9
 13773                           wreg	equ	0xFE8
 13774                           indf1	equ	0xFE7
 13775                           postinc1	equ	0xFE6
 13776                           postdec1	equ	0xFE5
 13777                           fsr1h	equ	0xFE2
 13778                           fsr1l	equ	0xFE1
 13779                           indf2	equ	0xFDF
 13780                           postinc2	equ	0xFDE
 13781                           postdec2	equ	0xFDD
 13782                           plusw2	equ	0xFDB
 13783                           fsr2h	equ	0xFDA
 13784                           fsr2l	equ	0xFD9
 13785                           status	equ	0xFD8
 13786                           
 13787 ;; *************** function _f_lseek *****************
 13788 ;; Defined at:
 13789 ;;		line 1132 in file "bibliotecas/tff.c"
 13790 ;; Parameters:    Size  Location     Type
 13791 ;;  fp              2  100[BANK0 ] PTR struct _FIL
 13792 ;;		 -> fil(28), 
 13793 ;;  ofs             4  102[BANK0 ] unsigned long 
 13794 ;; Auto vars:     Size  Location     Type
 13795 ;;  csize           4  123[BANK0 ] unsigned long 
 13796 ;;  ifptr           4  119[BANK0 ] unsigned long 
 13797 ;;  clust           2  127[BANK0 ] unsigned short 
 13798 ;;  res             1  118[BANK0 ] enum E155
 13799 ;; Return value:  Size  Location     Type
 13800 ;;                  1    wreg      enum E3974
 13801 ;; Registers used:
 13802 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13803 ;; Tracked objects:
 13804 ;;		On entry : 0/0
 13805 ;;		On exit  : 0/0
 13806 ;;		Unchanged: 0/0
 13807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13808 ;;      Params:         0       6       0       0       0       0       0       0       0
 13809 ;;      Locals:         0      11       0       0       0       0       0       0       0
 13810 ;;      Temps:          0      12       0       0       0       0       0       0       0
 13811 ;;      Totals:         0      29       0       0       0       0       0       0       0
 13812 ;;Total ram usage:       29 bytes
 13813 ;; Hardware stack levels used:    1
 13814 ;; Hardware stack levels required when called:   11
 13815 ;; This function calls:
 13816 ;;		___lldiv
 13817 ;;		_create_chain
 13818 ;;		_get_cluster
 13819 ;;		_validate
 13820 ;; This function is called by:
 13821 ;;		_escrita_sdcard
 13822 ;; This function uses a non-reentrant model
 13823 ;;
 13824                           
 13825                           	psect	text48
 13826  001890                     __ptext48:
 13827                           	opt stack 0
 13828  001890                     _f_lseek:
 13829                           	opt stack 16
 13830                           
 13831                           ;tff.c: 1137: FRESULT res;
 13832                           ;tff.c: 1138: CLUST clust;
 13833                           ;tff.c: 1139: DWORD csize, ifptr;
 13834                           ;tff.c: 1142: res = validate(fp->fs, fp->id);
 13835                           
 13836                           ; BSR set to: 0
 13837                           ;incstack = 0
 13838  001890  0100               	movlb	0	; () banked
 13839  001892  EE20 F004          	lfsr	2,4
 13840  001896  51C4               	movf	f_lseek@fp& (0+255),w,b
 13841  001898  26D9               	addwf	fsr2l,f,c
 13842  00189A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13843  00189C  22DA               	addwfc	fsr2h,f,c
 13844  00189E  CFDE F065          	movff	postinc2,validate@fs
 13845  0018A2  CFDD F066          	movff	postdec2,validate@fs+1
 13846  0018A6  C0C4  FFD9         	movff	f_lseek@fp,fsr2l
 13847  0018AA  C0C5  FFDA         	movff	f_lseek@fp+1,fsr2h
 13848  0018AE  CFDE F067          	movff	postinc2,validate@id
 13849  0018B2  CFDD F068          	movff	postdec2,validate@id+1
 13850  0018B6  EC39  F02A         	call	_validate	;wreg free
 13851  0018BA  0100               	movlb	0	; () banked
 13852  0018BC  6FD6               	movwf	f_lseek@res& (0+255),b
 13853                           
 13854                           ; BSR set to: 0
 13855                           ;tff.c: 1143: if (res != FR_OK) return res;
 13856  0018BE  51D6               	movf	f_lseek@res& (0+255),w,b
 13857  0018C0  A4D8               	btfss	status,2,c
 13858  0018C2  0012               	return	
 13859                           
 13860                           ; BSR set to: 0
 13861                           ;tff.c: 1144: if (fp->flag & 0x80) return FR_RW_ERROR;
 13862                           
 13863                           ; BSR set to: 0
 13864                           
 13865                           ; BSR set to: 0
 13866                           ;	Return value of _f_lseek is never used
 13867  0018C4  EE20 F002          	lfsr	2,2
 13868  0018C8  51C4               	movf	f_lseek@fp& (0+255),w,b
 13869  0018CA  26D9               	addwf	fsr2l,f,c
 13870  0018CC  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13871  0018CE  22DA               	addwfc	fsr2h,f,c
 13872  0018D0  BEDF               	btfsc	indf2,7,c
 13873  0018D2  0012               	return	
 13874                           
 13875                           ; BSR set to: 0
 13876                           ;tff.c: 1145: if (ofs > fp->fsize
 13877                           ;tff.c: 1147: && !(fp->flag & 0x02)
 13878                           ;tff.c: 1149: ) ofs = fp->fsize;
 13879                           
 13880                           ; BSR set to: 0
 13881                           
 13882                           ; BSR set to: 0
 13883                           ;	Return value of _f_lseek is never used
 13884  0018D4  EE20 F00A          	lfsr	2,10
 13885  0018D8  51C4               	movf	f_lseek@fp& (0+255),w,b
 13886  0018DA  26D9               	addwf	fsr2l,f,c
 13887  0018DC  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13888  0018DE  22DA               	addwfc	fsr2h,f,c
 13889  0018E0  51C6               	movf	f_lseek@ofs& (0+255),w,b
 13890  0018E2  5CDE               	subwf	postinc2,w,c
 13891  0018E4  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 13892  0018E6  58DE               	subwfb	postinc2,w,c
 13893  0018E8  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 13894  0018EA  58DE               	subwfb	postinc2,w,c
 13895  0018EC  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 13896  0018EE  58DE               	subwfb	postinc2,w,c
 13897  0018F0  B0D8               	btfsc	status,0,c
 13898  0018F2  D016               	goto	l1229
 13899                           
 13900                           ; BSR set to: 0
 13901  0018F4  EE20 F002          	lfsr	2,2
 13902  0018F8  51C4               	movf	f_lseek@fp& (0+255),w,b
 13903  0018FA  26D9               	addwf	fsr2l,f,c
 13904  0018FC  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13905  0018FE  22DA               	addwfc	fsr2h,f,c
 13906  001900  B2DF               	btfsc	indf2,1,c
 13907  001902  D00E               	goto	l1229
 13908                           
 13909                           ; BSR set to: 0
 13910  001904  EE20 F00A          	lfsr	2,10
 13911  001908  51C4               	movf	f_lseek@fp& (0+255),w,b
 13912  00190A  26D9               	addwf	fsr2l,f,c
 13913  00190C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13914  00190E  22DA               	addwfc	fsr2h,f,c
 13915  001910  CFDE F0C6          	movff	postinc2,f_lseek@ofs
 13916  001914  CFDE F0C7          	movff	postinc2,f_lseek@ofs+1
 13917  001918  CFDE F0C8          	movff	postinc2,f_lseek@ofs+2
 13918  00191C  CFDE F0C9          	movff	postinc2,f_lseek@ofs+3
 13919  001920                     l1229:
 13920                           
 13921                           ; BSR set to: 0
 13922                           ;tff.c: 1151: ifptr = fp->fptr;
 13923  001920  EE20 F006          	lfsr	2,6
 13924  001924  51C4               	movf	f_lseek@fp& (0+255),w,b
 13925  001926  26D9               	addwf	fsr2l,f,c
 13926  001928  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13927  00192A  22DA               	addwfc	fsr2h,f,c
 13928  00192C  CFDE F0D7          	movff	postinc2,f_lseek@ifptr
 13929  001930  CFDE F0D8          	movff	postinc2,f_lseek@ifptr+1
 13930  001934  CFDE F0D9          	movff	postinc2,f_lseek@ifptr+2
 13931  001938  CFDE F0DA          	movff	postinc2,f_lseek@ifptr+3
 13932                           
 13933                           ;tff.c: 1152: fp->fptr = 0; fp->csect = 255;
 13934  00193C  EE20 F006          	lfsr	2,6
 13935  001940  51C4               	movf	f_lseek@fp& (0+255),w,b
 13936  001942  26D9               	addwf	fsr2l,f,c
 13937  001944  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13938  001946  22DA               	addwfc	fsr2h,f,c
 13939  001948  6ADE               	clrf	postinc2,c
 13940  00194A  6ADE               	clrf	postinc2,c
 13941  00194C  6ADE               	clrf	postinc2,c
 13942  00194E  6ADD               	clrf	postdec2,c
 13943  001950  EE20 F003          	lfsr	2,3
 13944  001954  51C4               	movf	f_lseek@fp& (0+255),w,b
 13945  001956  26D9               	addwf	fsr2l,f,c
 13946  001958  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13947  00195A  22DA               	addwfc	fsr2h,f,c
 13948  00195C  0EFF               	movlw	255
 13949  00195E  6EDF               	movwf	indf2,c
 13950                           
 13951                           ; BSR set to: 0
 13952                           ;tff.c: 1153: if (ofs > 0) {
 13953  001960  51C6               	movf	f_lseek@ofs& (0+255),w,b
 13954  001962  11C7               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 13955  001964  11C8               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 13956  001966  11C9               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 13957  001968  B4D8               	btfsc	status,2,c
 13958  00196A  D19B               	goto	l1246
 13959                           
 13960                           ; BSR set to: 0
 13961                           ;tff.c: 1154: csize = (DWORD)fp->fs->csize * 512U;
 13962  00196C  EE20 F004          	lfsr	2,4
 13963  001970  51C4               	movf	f_lseek@fp& (0+255),w,b
 13964  001972  26D9               	addwf	fsr2l,f,c
 13965  001974  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 13966  001976  22DA               	addwfc	fsr2h,f,c
 13967  001978  EE10 F01D          	lfsr	1,29
 13968  00197C  50DE               	movf	postinc2,w,c
 13969  00197E  26E1               	addwf	fsr1l,f,c
 13970  001980  50DD               	movf	postdec2,w,c
 13971  001982  22E2               	addwfc	fsr1h,f,c
 13972  001984  50E7               	movf	indf1,w,c
 13973  001986  6FCA               	movwf	??_f_lseek& (0+255),b
 13974  001988  C0CA  F0CB         	movff	??_f_lseek,??_f_lseek+1
 13975  00198C  6BCC               	clrf	(??_f_lseek+2)& (0+255),b
 13976  00198E  6BCD               	clrf	(??_f_lseek+3)& (0+255),b
 13977  001990  6BCE               	clrf	(??_f_lseek+4)& (0+255),b
 13978  001992  0E09               	movlw	9
 13979  001994                     u13345:
 13980  001994  90D8               	bcf	status,0,c
 13981  001996  37CB               	rlcf	(??_f_lseek+1)& (0+255),f,b
 13982  001998  37CC               	rlcf	(??_f_lseek+2)& (0+255),f,b
 13983  00199A  37CD               	rlcf	(??_f_lseek+3)& (0+255),f,b
 13984  00199C  37CE               	rlcf	(??_f_lseek+4)& (0+255),f,b
 13985  00199E  2EE8               	decfsz	wreg,f,c
 13986  0019A0  D7F9               	goto	u13345
 13987  0019A2  C0CB  F0DB         	movff	??_f_lseek+1,f_lseek@csize
 13988  0019A6  C0CC  F0DC         	movff	??_f_lseek+2,f_lseek@csize+1
 13989  0019AA  C0CD  F0DD         	movff	??_f_lseek+3,f_lseek@csize+2
 13990  0019AE  C0CE  F0DE         	movff	??_f_lseek+4,f_lseek@csize+3
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;tff.c: 1155: if (ifptr > 0 &&
 13994                           ;tff.c: 1156: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 13995  0019B2  51D7               	movf	f_lseek@ifptr& (0+255),w,b
 13996  0019B4  11D8               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 13997  0019B6  11D9               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 13998  0019B8  11DA               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 13999  0019BA  B4D8               	btfsc	status,2,c
 14000  0019BC  D08F               	goto	l1231
 14001                           
 14002                           ; BSR set to: 0
 14003  0019BE  0EFF               	movlw	255
 14004  0019C0  25C6               	addwf	f_lseek@ofs& (0+255),w,b
 14005  0019C2  6F60               	movwf	___lldiv@dividend& (0+255),b
 14006  0019C4  0EFF               	movlw	255
 14007  0019C6  21C7               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 14008  0019C8  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 14009  0019CA  0EFF               	movlw	255
 14010  0019CC  21C8               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 14011  0019CE  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 14012  0019D0  0EFF               	movlw	255
 14013  0019D2  21C9               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 14014  0019D4  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 14015  0019D6  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 14016  0019DA  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14017  0019DE  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14018  0019E2  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14019  0019E6  EC60  F027         	call	___lldiv	;wreg free
 14020  0019EA  C060  F0CA         	movff	?___lldiv,??_f_lseek
 14021  0019EE  C061  F0CB         	movff	?___lldiv+1,??_f_lseek+1
 14022  0019F2  C062  F0CC         	movff	?___lldiv+2,??_f_lseek+2
 14023  0019F6  C063  F0CD         	movff	?___lldiv+3,??_f_lseek+3
 14024  0019FA  0EFF               	movlw	255
 14025  0019FC  0100               	movlb	0	; () banked
 14026  0019FE  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 14027  001A00  6F60               	movwf	___lldiv@dividend& (0+255),b
 14028  001A02  0EFF               	movlw	255
 14029  001A04  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14030  001A06  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 14031  001A08  0EFF               	movlw	255
 14032  001A0A  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14033  001A0C  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 14034  001A0E  0EFF               	movlw	255
 14035  001A10  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14036  001A12  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 14037  001A14  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 14038  001A18  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14039  001A1C  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14040  001A20  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14041  001A24  EC60  F027         	call	___lldiv	;wreg free
 14042  001A28  0100               	movlb	0	; () banked
 14043  001A2A  5160               	movf	?___lldiv& (0+255),w,b
 14044  001A2C  5DCA               	subwf	??_f_lseek& (0+255),w,b
 14045  001A2E  5161               	movf	(?___lldiv+1)& (0+255),w,b
 14046  001A30  59CB               	subwfb	(??_f_lseek+1)& (0+255),w,b
 14047  001A32  5162               	movf	(?___lldiv+2)& (0+255),w,b
 14048  001A34  59CC               	subwfb	(??_f_lseek+2)& (0+255),w,b
 14049  001A36  5163               	movf	(?___lldiv+3)& (0+255),w,b
 14050  001A38  59CD               	subwfb	(??_f_lseek+3)& (0+255),w,b
 14051  001A3A  A0D8               	btfss	status,0,c
 14052  001A3C  D04F               	goto	l1231
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;tff.c: 1157: fp->fptr = (ifptr - 1) & ~(csize - 1);
 14056  001A3E  0EFF               	movlw	255
 14057  001A40  25DB               	addwf	f_lseek@csize& (0+255),w,b
 14058  001A42  6FCA               	movwf	??_f_lseek& (0+255),b
 14059  001A44  0EFF               	movlw	255
 14060  001A46  21DC               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 14061  001A48  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 14062  001A4A  0EFF               	movlw	255
 14063  001A4C  21DD               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 14064  001A4E  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 14065  001A50  0EFF               	movlw	255
 14066  001A52  21DE               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 14067  001A54  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 14068  001A56  1FCA               	comf	??_f_lseek& (0+255),f,b
 14069  001A58  1FCB               	comf	(??_f_lseek+1)& (0+255),f,b
 14070  001A5A  1FCC               	comf	(??_f_lseek+2)& (0+255),f,b
 14071  001A5C  1FCD               	comf	(??_f_lseek+3)& (0+255),f,b
 14072  001A5E  0EFF               	movlw	255
 14073  001A60  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 14074  001A62  6FCE               	movwf	(??_f_lseek+4)& (0+255),b
 14075  001A64  0EFF               	movlw	255
 14076  001A66  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14077  001A68  6FCF               	movwf	(??_f_lseek+5)& (0+255),b
 14078  001A6A  0EFF               	movlw	255
 14079  001A6C  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14080  001A6E  6FD0               	movwf	(??_f_lseek+6)& (0+255),b
 14081  001A70  0EFF               	movlw	255
 14082  001A72  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14083  001A74  6FD1               	movwf	(??_f_lseek+7)& (0+255),b
 14084  001A76  51CA               	movf	??_f_lseek& (0+255),w,b
 14085  001A78  15CE               	andwf	(??_f_lseek+4)& (0+255),w,b
 14086  001A7A  6FD2               	movwf	(??_f_lseek+8)& (0+255),b
 14087  001A7C  51CB               	movf	(??_f_lseek+1)& (0+255),w,b
 14088  001A7E  15CF               	andwf	(??_f_lseek+5)& (0+255),w,b
 14089  001A80  6FD3               	movwf	(??_f_lseek+9)& (0+255),b
 14090  001A82  51CC               	movf	(??_f_lseek+2)& (0+255),w,b
 14091  001A84  15D0               	andwf	(??_f_lseek+6)& (0+255),w,b
 14092  001A86  6FD4               	movwf	(??_f_lseek+10)& (0+255),b
 14093  001A88  51CD               	movf	(??_f_lseek+3)& (0+255),w,b
 14094  001A8A  15D1               	andwf	(??_f_lseek+7)& (0+255),w,b
 14095  001A8C  6FD5               	movwf	(??_f_lseek+11)& (0+255),b
 14096  001A8E  EE20 F006          	lfsr	2,6
 14097  001A92  51C4               	movf	f_lseek@fp& (0+255),w,b
 14098  001A94  26D9               	addwf	fsr2l,f,c
 14099  001A96  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14100  001A98  22DA               	addwfc	fsr2h,f,c
 14101  001A9A  C0D2  FFDE         	movff	??_f_lseek+8,postinc2
 14102  001A9E  C0D3  FFDE         	movff	??_f_lseek+9,postinc2
 14103  001AA2  C0D4  FFDE         	movff	??_f_lseek+10,postinc2
 14104  001AA6  C0D5  FFDE         	movff	??_f_lseek+11,postinc2
 14105                           
 14106                           ;tff.c: 1158: ofs -= fp->fptr;
 14107  001AAA  EE20 F006          	lfsr	2,6
 14108  001AAE  51C4               	movf	f_lseek@fp& (0+255),w,b
 14109  001AB0  26D9               	addwf	fsr2l,f,c
 14110  001AB2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14111  001AB4  22DA               	addwfc	fsr2h,f,c
 14112  001AB6  50DE               	movf	postinc2,w,c
 14113  001AB8  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 14114  001ABA  50DE               	movf	postinc2,w,c
 14115  001ABC  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 14116  001ABE  50DE               	movf	postinc2,w,c
 14117  001AC0  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 14118  001AC2  50DD               	movf	postdec2,w,c
 14119  001AC4  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 14120                           
 14121                           ;tff.c: 1159: clust = fp->curr_clust;
 14122  001AC6  EE20 F010          	lfsr	2,16
 14123  001ACA  51C4               	movf	f_lseek@fp& (0+255),w,b
 14124  001ACC  26D9               	addwf	fsr2l,f,c
 14125  001ACE  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14126  001AD0  22DA               	addwfc	fsr2h,f,c
 14127  001AD2  CFDE F0DF          	movff	postinc2,f_lseek@clust
 14128  001AD6  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 14129                           
 14130                           ;tff.c: 1160: } else {
 14131  001ADA  D031               	goto	l1232
 14132  001ADC                     l1231:
 14133                           
 14134                           ; BSR set to: 0
 14135                           ;tff.c: 1161: clust = fp->org_clust;
 14136                           
 14137                           ; BSR set to: 0
 14138  001ADC  EE20 F00E          	lfsr	2,14
 14139  001AE0  51C4               	movf	f_lseek@fp& (0+255),w,b
 14140  001AE2  26D9               	addwf	fsr2l,f,c
 14141  001AE4  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14142  001AE6  22DA               	addwfc	fsr2h,f,c
 14143  001AE8  CFDE F0DF          	movff	postinc2,f_lseek@clust
 14144  001AEC  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 14145                           
 14146                           ; BSR set to: 0
 14147                           ;tff.c: 1163: if (clust == 0) {
 14148  001AF0  51DF               	movf	f_lseek@clust& (0+255),w,b
 14149  001AF2  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14150  001AF4  A4D8               	btfss	status,2,c
 14151  001AF6  D019               	goto	l1233
 14152                           
 14153                           ; BSR set to: 0
 14154                           ;tff.c: 1164: clust = create_chain(0);
 14155  001AF8  0E00               	movlw	0
 14156  001AFA  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
 14157  001AFC  0E00               	movlw	0
 14158  001AFE  6FB6               	movwf	create_chain@clust& (0+255),b
 14159  001B00  ECFD  F01A         	call	_create_chain	;wreg free
 14160  001B04  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 14161  001B08  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 14162                           
 14163                           ;tff.c: 1165: if (clust == 1) goto fk_error;
 14164  001B0C  0100               	movlb	0	; () banked
 14165  001B0E  05DF               	decf	f_lseek@clust& (0+255),w,b
 14166  001B10  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14167  001B12  B4D8               	btfsc	status,2,c
 14168  001B14  D0F9               	goto	l1235
 14169                           
 14170                           ; BSR set to: 0
 14171                           ;tff.c: 1166: fp->org_clust = clust;
 14172                           
 14173                           ; BSR set to: 0
 14174                           
 14175                           ; BSR set to: 0
 14176  001B16  EE20 F00E          	lfsr	2,14
 14177  001B1A  51C4               	movf	f_lseek@fp& (0+255),w,b
 14178  001B1C  26D9               	addwf	fsr2l,f,c
 14179  001B1E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14180  001B20  22DA               	addwfc	fsr2h,f,c
 14181  001B22  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 14182  001B26  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 14183  001B2A                     l1233:
 14184                           
 14185                           ; BSR set to: 0
 14186                           ;tff.c: 1167: }
 14187                           ;tff.c: 1169: fp->curr_clust = clust;
 14188  001B2A  EE20 F010          	lfsr	2,16
 14189  001B2E  51C4               	movf	f_lseek@fp& (0+255),w,b
 14190  001B30  26D9               	addwf	fsr2l,f,c
 14191  001B32  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14192  001B34  22DA               	addwfc	fsr2h,f,c
 14193  001B36  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 14194  001B3A  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 14195  001B3E                     l1232:
 14196                           
 14197                           ; BSR set to: 0
 14198                           ;tff.c: 1170: }
 14199                           ;tff.c: 1171: if (clust != 0) {
 14200                           
 14201                           ; BSR set to: 0
 14202  001B3E  51DF               	movf	f_lseek@clust& (0+255),w,b
 14203  001B40  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14204  001B42  A4D8               	btfss	status,2,c
 14205  001B44  D064               	goto	l1237
 14206  001B46  D0AD               	goto	l1246
 14207  001B48                     
 14208                           ; BSR set to: 0
 14209                           ;tff.c: 1174: if (fp->flag & 0x02) {
 14210                           
 14211                           ; BSR set to: 0
 14212  001B48  EE20 F002          	lfsr	2,2
 14213  001B4C  51C4               	movf	f_lseek@fp& (0+255),w,b
 14214  001B4E  26D9               	addwf	fsr2l,f,c
 14215  001B50  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14216  001B52  22DA               	addwfc	fsr2h,f,c
 14217  001B54  A2DF               	btfss	indf2,1,c
 14218  001B56  D018               	goto	l1239
 14219                           
 14220                           ; BSR set to: 0
 14221                           ;tff.c: 1175: clust = create_chain(clust);
 14222  001B58  C0DF  F0B6         	movff	f_lseek@clust,create_chain@clust
 14223  001B5C  C0E0  F0B7         	movff	f_lseek@clust+1,create_chain@clust+1
 14224  001B60  ECFD  F01A         	call	_create_chain	;wreg free
 14225  001B64  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 14226  001B68  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 14227                           
 14228                           ;tff.c: 1176: if (clust == 0) {
 14229  001B6C  0100               	movlb	0	; () banked
 14230  001B6E  51DF               	movf	f_lseek@clust& (0+255),w,b
 14231  001B70  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14232  001B72  A4D8               	btfss	status,2,c
 14233  001B74  D013               	goto	l1242
 14234                           
 14235                           ; BSR set to: 0
 14236                           ;tff.c: 1177: ofs = csize; break;
 14237  001B76  C0DB  F0C6         	movff	f_lseek@csize,f_lseek@ofs
 14238  001B7A  C0DC  F0C7         	movff	f_lseek@csize+1,f_lseek@ofs+1
 14239  001B7E  C0DD  F0C8         	movff	f_lseek@csize+2,f_lseek@ofs+2
 14240  001B82  C0DE  F0C9         	movff	f_lseek@csize+3,f_lseek@ofs+3
 14241  001B86  D04D               	goto	u13440
 14242  001B88                     l1239:
 14243                           
 14244                           ; BSR set to: 0
 14245                           ;tff.c: 1181: clust = get_cluster(clust);
 14246                           
 14247                           ; BSR set to: 0
 14248  001B88  C0DF  F0A0         	movff	f_lseek@clust,get_cluster@clust
 14249  001B8C  C0E0  F0A1         	movff	f_lseek@clust+1,get_cluster@clust+1
 14250  001B90  EC07  F019         	call	_get_cluster	;wreg free
 14251  001B94  C0A0  F0DF         	movff	?_get_cluster,f_lseek@clust
 14252  001B98  C0A1  F0E0         	movff	?_get_cluster+1,f_lseek@clust+1
 14253  001B9C                     l1242:
 14254                           
 14255                           ;tff.c: 1182: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 14256  001B9C  0100               	movlb	0	; () banked
 14257  001B9E  51E0               	movf	(f_lseek@clust+1)& (0+255),w,b
 14258  001BA0  E104               	bnz	u13420
 14259  001BA2  0E02               	movlw	2
 14260  001BA4  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 14261  001BA6  A0D8               	btfss	status,0,c
 14262  001BA8  D0AF               	goto	l1235
 14263  001BAA                     u13420:
 14264                           
 14265                           ; BSR set to: 0
 14266  001BAA  EE20 F004          	lfsr	2,4
 14267  001BAE  51C4               	movf	f_lseek@fp& (0+255),w,b
 14268  001BB0  26D9               	addwf	fsr2l,f,c
 14269  001BB2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14270  001BB4  22DA               	addwfc	fsr2h,f,c
 14271  001BB6  EE10 F016          	lfsr	1,22
 14272  001BBA  50DE               	movf	postinc2,w,c
 14273  001BBC  26E1               	addwf	fsr1l,f,c
 14274  001BBE  50DD               	movf	postdec2,w,c
 14275  001BC0  22E2               	addwfc	fsr1h,f,c
 14276  001BC2  50E6               	movf	postinc1,w,c
 14277  001BC4  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 14278  001BC6  50E6               	movf	postinc1,w,c
 14279  001BC8  59E0               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 14280  001BCA  B0D8               	btfsc	status,0,c
 14281  001BCC  D09D               	goto	l1235
 14282                           
 14283                           ; BSR set to: 0
 14284                           ;tff.c: 1183: fp->curr_clust = clust;
 14285                           
 14286                           ; BSR set to: 0
 14287                           
 14288                           ; BSR set to: 0
 14289  001BCE  EE20 F010          	lfsr	2,16
 14290  001BD2  51C4               	movf	f_lseek@fp& (0+255),w,b
 14291  001BD4  26D9               	addwf	fsr2l,f,c
 14292  001BD6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14293  001BD8  22DA               	addwfc	fsr2h,f,c
 14294  001BDA  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 14295  001BDE  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 14296                           
 14297                           ;tff.c: 1184: fp->fptr += csize;
 14298  001BE2  EE20 F006          	lfsr	2,6
 14299  001BE6  51C4               	movf	f_lseek@fp& (0+255),w,b
 14300  001BE8  26D9               	addwf	fsr2l,f,c
 14301  001BEA  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14302  001BEC  22DA               	addwfc	fsr2h,f,c
 14303  001BEE  51DB               	movf	f_lseek@csize& (0+255),w,b
 14304  001BF0  26DE               	addwf	postinc2,f,c
 14305  001BF2  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 14306  001BF4  22DE               	addwfc	postinc2,f,c
 14307  001BF6  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 14308  001BF8  22DE               	addwfc	postinc2,f,c
 14309  001BFA  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 14310  001BFC  22DE               	addwfc	postinc2,f,c
 14311                           
 14312                           ; BSR set to: 0
 14313                           ;tff.c: 1185: ofs -= csize;
 14314  001BFE  51DB               	movf	f_lseek@csize& (0+255),w,b
 14315  001C00  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 14316  001C02  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 14317  001C04  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 14318  001C06  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 14319  001C08  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 14320  001C0A  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 14321  001C0C  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 14322  001C0E                     l1237:
 14323                           
 14324                           ; BSR set to: 0
 14325                           
 14326                           ; BSR set to: 0
 14327  001C0E  51C6               	movf	f_lseek@ofs& (0+255),w,b
 14328  001C10  5DDB               	subwf	f_lseek@csize& (0+255),w,b
 14329  001C12  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14330  001C14  59DC               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 14331  001C16  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14332  001C18  59DD               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 14333  001C1A  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14334  001C1C  59DE               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 14335  001C1E  A0D8               	btfss	status,0,c
 14336  001C20  D793               	goto	l1238
 14337  001C22                     u13440:
 14338                           
 14339                           ; BSR set to: 0
 14340                           ;tff.c: 1186: }
 14341                           ;tff.c: 1187: fp->fptr += ofs;
 14342                           
 14343                           ; BSR set to: 0
 14344  001C22  EE20 F006          	lfsr	2,6
 14345  001C26  51C4               	movf	f_lseek@fp& (0+255),w,b
 14346  001C28  26D9               	addwf	fsr2l,f,c
 14347  001C2A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14348  001C2C  22DA               	addwfc	fsr2h,f,c
 14349  001C2E  51C6               	movf	f_lseek@ofs& (0+255),w,b
 14350  001C30  26DE               	addwf	postinc2,f,c
 14351  001C32  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14352  001C34  22DE               	addwfc	postinc2,f,c
 14353  001C36  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14354  001C38  22DE               	addwfc	postinc2,f,c
 14355  001C3A  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14356  001C3C  22DE               	addwfc	postinc2,f,c
 14357                           
 14358                           ;tff.c: 1188: fp->csect = (BYTE)(ofs / 512U);
 14359  001C3E  EE20 F003          	lfsr	2,3
 14360  001C42  51C4               	movf	f_lseek@fp& (0+255),w,b
 14361  001C44  26D9               	addwf	fsr2l,f,c
 14362  001C46  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14363  001C48  22DA               	addwfc	fsr2h,f,c
 14364  001C4A  C0C6  F0CA         	movff	f_lseek@ofs,??_f_lseek
 14365  001C4E  C0C7  F0CB         	movff	f_lseek@ofs+1,??_f_lseek+1
 14366  001C52  C0C8  F0CC         	movff	f_lseek@ofs+2,??_f_lseek+2
 14367  001C56  C0C9  F0CD         	movff	f_lseek@ofs+3,??_f_lseek+3
 14368  001C5A  0E0A               	movlw	10
 14369  001C5C  D005               	goto	u13450
 14370  001C5E                     u13455:
 14371  001C5E  90D8               	bcf	status,0,c
 14372  001C60  33CD               	rrcf	(??_f_lseek+3)& (0+255),f,b
 14373  001C62  33CC               	rrcf	(??_f_lseek+2)& (0+255),f,b
 14374  001C64  33CB               	rrcf	(??_f_lseek+1)& (0+255),f,b
 14375  001C66  33CA               	rrcf	??_f_lseek& (0+255),f,b
 14376  001C68                     u13450:
 14377  001C68  2EE8               	decfsz	wreg,f,c
 14378  001C6A  D7F9               	goto	u13455
 14379  001C6C  51CA               	movf	??_f_lseek& (0+255),w,b
 14380  001C6E  6EDF               	movwf	indf2,c
 14381                           
 14382                           ; BSR set to: 0
 14383                           ;tff.c: 1189: if (ofs % 512U) fp->csect++;
 14384  001C70  0EFF               	movlw	255
 14385  001C72  15C6               	andwf	f_lseek@ofs& (0+255),w,b
 14386  001C74  6FCA               	movwf	??_f_lseek& (0+255),b
 14387  001C76  0E01               	movlw	1
 14388  001C78  15C7               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 14389  001C7A  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 14390  001C7C  0E00               	movlw	0
 14391  001C7E  15C8               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 14392  001C80  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 14393  001C82  0E00               	movlw	0
 14394  001C84  15C9               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 14395  001C86  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 14396  001C88  51CA               	movf	??_f_lseek& (0+255),w,b
 14397  001C8A  11CB               	iorwf	(??_f_lseek+1)& (0+255),w,b
 14398  001C8C  11CC               	iorwf	(??_f_lseek+2)& (0+255),w,b
 14399  001C8E  11CD               	iorwf	(??_f_lseek+3)& (0+255),w,b
 14400  001C90  B4D8               	btfsc	status,2,c
 14401  001C92  D007               	goto	l1246
 14402                           
 14403                           ; BSR set to: 0
 14404  001C94  EE20 F003          	lfsr	2,3
 14405  001C98  51C4               	movf	f_lseek@fp& (0+255),w,b
 14406  001C9A  26D9               	addwf	fsr2l,f,c
 14407  001C9C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14408  001C9E  22DA               	addwfc	fsr2h,f,c
 14409  001CA0  2ADF               	incf	indf2,f,c
 14410  001CA2                     l1246:
 14411                           
 14412                           ; BSR set to: 0
 14413                           ;tff.c: 1190: }
 14414                           ;tff.c: 1191: }
 14415                           ;tff.c: 1194: if (fp->fptr > fp->fsize) {
 14416                           
 14417                           ; BSR set to: 0
 14418                           
 14419                           ; BSR set to: 0
 14420                           
 14421                           ; BSR set to: 0
 14422  001CA2  EE20 F006          	lfsr	2,6
 14423  001CA6  51C4               	movf	f_lseek@fp& (0+255),w,b
 14424  001CA8  26D9               	addwf	fsr2l,f,c
 14425  001CAA  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14426  001CAC  22DA               	addwfc	fsr2h,f,c
 14427  001CAE  EE10 F00A          	lfsr	1,10
 14428  001CB2  51C4               	movf	f_lseek@fp& (0+255),w,b
 14429  001CB4  26E1               	addwf	fsr1l,f,c
 14430  001CB6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14431  001CB8  22E2               	addwfc	fsr1h,f,c
 14432  001CBA  50DE               	movf	postinc2,w,c
 14433  001CBC  5CE6               	subwf	postinc1,w,c
 14434  001CBE  50DE               	movf	postinc2,w,c
 14435  001CC0  58E6               	subwfb	postinc1,w,c
 14436  001CC2  50DE               	movf	postinc2,w,c
 14437  001CC4  58E6               	subwfb	postinc1,w,c
 14438  001CC6  50DE               	movf	postinc2,w,c
 14439  001CC8  58E6               	subwfb	postinc1,w,c
 14440  001CCA  B0D8               	btfsc	status,0,c
 14441  001CCC  0012               	return	
 14442                           
 14443                           ; BSR set to: 0
 14444                           ;tff.c: 1195: fp->fsize = fp->fptr;
 14445  001CCE  EE20 F006          	lfsr	2,6
 14446  001CD2  51C4               	movf	f_lseek@fp& (0+255),w,b
 14447  001CD4  26D9               	addwf	fsr2l,f,c
 14448  001CD6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14449  001CD8  22DA               	addwfc	fsr2h,f,c
 14450  001CDA  EE10 F00A          	lfsr	1,10
 14451  001CDE  51C4               	movf	f_lseek@fp& (0+255),w,b
 14452  001CE0  26E1               	addwf	fsr1l,f,c
 14453  001CE2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14454  001CE4  22E2               	addwfc	fsr1h,f,c
 14455  001CE6  CFDE FFE6          	movff	postinc2,postinc1
 14456  001CEA  CFDE FFE6          	movff	postinc2,postinc1
 14457  001CEE  CFDE FFE6          	movff	postinc2,postinc1
 14458  001CF2  CFDE FFE6          	movff	postinc2,postinc1
 14459                           
 14460                           ; BSR set to: 0
 14461                           ;tff.c: 1196: fp->flag |= 0x20;
 14462  001CF6  EE20 F002          	lfsr	2,2
 14463  001CFA  51C4               	movf	f_lseek@fp& (0+255),w,b
 14464  001CFC  26D9               	addwf	fsr2l,f,c
 14465  001CFE  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14466  001D00  22DA               	addwfc	fsr2h,f,c
 14467  001D02  0E00               	movlw	0
 14468  001D04  8ADB               	bsf	plusw2,5,c
 14469                           
 14470                           ; BSR set to: 0
 14471                           ;tff.c: 1197: }
 14472                           ;tff.c: 1200: return FR_OK;
 14473                           ;	Return value of _f_lseek is never used
 14474                           
 14475                           ; BSR set to: 0
 14476  001D06  0012               	return	
 14477  001D08                     l1235:
 14478                           
 14479                           ; BSR set to: 0
 14480                           ;tff.c: 1203: fp->flag |= 0x80;
 14481                           
 14482                           ; BSR set to: 0
 14483  001D08  EE20 F002          	lfsr	2,2
 14484  001D0C  51C4               	movf	f_lseek@fp& (0+255),w,b
 14485  001D0E  26D9               	addwf	fsr2l,f,c
 14486  001D10  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14487  001D12  22DA               	addwfc	fsr2h,f,c
 14488  001D14  0E00               	movlw	0
 14489  001D16  8EDB               	bsf	plusw2,7,c
 14490  001D18  0012               	return	
 14491  001D1A                     __end_of_f_lseek:
 14492                           	opt stack 0
 14493                           tosu	equ	0xFFF
 14494                           tosh	equ	0xFFE
 14495                           tosl	equ	0xFFD
 14496                           pclath	equ	0xFFA
 14497                           tblptru	equ	0xFF8
 14498                           tblptrh	equ	0xFF7
 14499                           tblptrl	equ	0xFF6
 14500                           tablat	equ	0xFF5
 14501                           prodh	equ	0xFF4
 14502                           prodl	equ	0xFF3
 14503                           intcon	equ	0xFF2
 14504                           intcon2	equ	0xFF1
 14505                           intcon3	equ	0xFF0
 14506                           indf0	equ	0xFEF
 14507                           postinc0	equ	0xFEE
 14508                           fsr0h	equ	0xFEA
 14509                           fsr0l	equ	0xFE9
 14510                           wreg	equ	0xFE8
 14511                           indf1	equ	0xFE7
 14512                           postinc1	equ	0xFE6
 14513                           postdec1	equ	0xFE5
 14514                           fsr1h	equ	0xFE2
 14515                           fsr1l	equ	0xFE1
 14516                           indf2	equ	0xFDF
 14517                           postinc2	equ	0xFDE
 14518                           postdec2	equ	0xFDD
 14519                           plusw2	equ	0xFDB
 14520                           fsr2h	equ	0xFDA
 14521                           fsr2l	equ	0xFD9
 14522                           status	equ	0xFD8
 14523                           
 14524 ;; *************** function _create_chain *****************
 14525 ;; Defined at:
 14526 ;;		line 282 in file "bibliotecas/tff.c"
 14527 ;; Parameters:    Size  Location     Type
 14528 ;;  clust           2   86[BANK0 ] unsigned short 
 14529 ;; Auto vars:     Size  Location     Type
 14530 ;;  ncl             2   98[BANK0 ] unsigned short 
 14531 ;;  scl             2   96[BANK0 ] unsigned short 
 14532 ;;  cstat           2   94[BANK0 ] unsigned short 
 14533 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 14534 ;;		 -> NULL(0), fs(544), 
 14535 ;;  mcl             2   90[BANK0 ] unsigned short 
 14536 ;; Return value:  Size  Location     Type
 14537 ;;                  2   86[BANK0 ] unsigned short 
 14538 ;; Registers used:
 14539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14540 ;; Tracked objects:
 14541 ;;		On entry : 0/0
 14542 ;;		On exit  : 0/0
 14543 ;;		Unchanged: 0/0
 14544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14545 ;;      Params:         0       2       0       0       0       0       0       0       0
 14546 ;;      Locals:         0      10       0       0       0       0       0       0       0
 14547 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14548 ;;      Totals:         0      14       0       0       0       0       0       0       0
 14549 ;;Total ram usage:       14 bytes
 14550 ;; Hardware stack levels used:    1
 14551 ;; Hardware stack levels required when called:   10
 14552 ;; This function calls:
 14553 ;;		_get_cluster
 14554 ;;		_put_cluster
 14555 ;; This function is called by:
 14556 ;;		_reserve_direntry
 14557 ;;		_f_write
 14558 ;;		_f_lseek
 14559 ;; This function uses a non-reentrant model
 14560 ;;
 14561                           
 14562                           	psect	text49
 14563  0035FA                     __ptext49:
 14564                           	opt stack 0
 14565  0035FA                     _create_chain:
 14566                           	opt stack 15
 14567                           
 14568                           ;tff.c: 286: CLUST cstat, ncl, scl, mcl;
 14569                           ;tff.c: 287: FATFS *fs = FatFs;
 14570                           
 14571                           ; BSR set to: 0
 14572                           ;incstack = 0
 14573  0035FA  C0FD  F0BC         	movff	_FatFs,create_chain@fs
 14574  0035FE  C0FE  F0BD         	movff	_FatFs+1,create_chain@fs+1
 14575                           
 14576                           ;tff.c: 290: mcl = fs->max_clust;
 14577  003602  0100               	movlb	0	; () banked
 14578  003604  EE20 F016          	lfsr	2,22
 14579  003608  51BC               	movf	create_chain@fs& (0+255),w,b
 14580  00360A  26D9               	addwf	fsr2l,f,c
 14581  00360C  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 14582  00360E  22DA               	addwfc	fsr2h,f,c
 14583  003610  CFDE F0BA          	movff	postinc2,create_chain@mcl
 14584  003614  CFDD F0BB          	movff	postdec2,create_chain@mcl+1
 14585                           
 14586                           ; BSR set to: 0
 14587                           ;tff.c: 291: if (clust == 0) {
 14588  003618  51B6               	movf	create_chain@clust& (0+255),w,b
 14589  00361A  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 14590  00361C  A4D8               	btfss	status,2,c
 14591  00361E  D01B               	goto	l950
 14592                           
 14593                           ; BSR set to: 0
 14594                           ;tff.c: 292: scl = fs->last_clust;
 14595  003620  EE20 F018          	lfsr	2,24
 14596  003624  51BC               	movf	create_chain@fs& (0+255),w,b
 14597  003626  26D9               	addwf	fsr2l,f,c
 14598  003628  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 14599  00362A  22DA               	addwfc	fsr2h,f,c
 14600  00362C  CFDE F0C0          	movff	postinc2,create_chain@scl
 14601  003630  CFDD F0C1          	movff	postdec2,create_chain@scl+1
 14602                           
 14603                           ; BSR set to: 0
 14604                           ;tff.c: 293: if (scl < 2 || scl >= mcl) scl = 1;
 14605  003634  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 14606  003636  E104               	bnz	u10850
 14607  003638  0E02               	movlw	2
 14608  00363A  5DC0               	subwf	create_chain@scl& (0+255),w,b
 14609  00363C  A0D8               	btfss	status,0,c
 14610  00363E  D006               	goto	u10860
 14611  003640                     u10850:
 14612                           
 14613                           ; BSR set to: 0
 14614  003640  51BA               	movf	create_chain@mcl& (0+255),w,b
 14615  003642  5DC0               	subwf	create_chain@scl& (0+255),w,b
 14616  003644  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 14617  003646  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 14618  003648  A0D8               	btfss	status,0,c
 14619  00364A  D02A               	goto	l954
 14620  00364C                     u10860:
 14621                           
 14622                           ; BSR set to: 0
 14623                           
 14624                           ; BSR set to: 0
 14625  00364C  0E00               	movlw	0
 14626  00364E  6FC1               	movwf	(create_chain@scl+1)& (0+255),b
 14627  003650  0E01               	movlw	1
 14628  003652  6FC0               	movwf	create_chain@scl& (0+255),b
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;tff.c: 294: }
 14632  003654  D025               	goto	l954
 14633  003656                     l950:
 14634                           
 14635                           ; BSR set to: 0
 14636                           ;tff.c: 295: else {
 14637                           ;tff.c: 296: cstat = get_cluster(clust);
 14638                           
 14639                           ; BSR set to: 0
 14640  003656  C0B6  F0A0         	movff	create_chain@clust,get_cluster@clust
 14641  00365A  C0B7  F0A1         	movff	create_chain@clust+1,get_cluster@clust+1
 14642  00365E  EC07  F019         	call	_get_cluster	;wreg free
 14643  003662  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 14644  003666  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 14645                           
 14646                           ;tff.c: 297: if (cstat < 2) return 1;
 14647  00366A  0100               	movlb	0	; () banked
 14648  00366C  51BF               	movf	(create_chain@cstat+1)& (0+255),w,b
 14649  00366E  E109               	bnz	l9166
 14650  003670  0E02               	movlw	2
 14651  003672  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 14652  003674  B0D8               	btfsc	status,0,c
 14653  003676  D005               	goto	l955
 14654                           
 14655                           ; BSR set to: 0
 14656  003678  0E00               	movlw	0
 14657  00367A  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 14658  00367C  0E01               	movlw	1
 14659  00367E  6FB6               	movwf	?_create_chain& (0+255),b
 14660                           
 14661                           ; BSR set to: 0
 14662  003680  0012               	return	
 14663  003682                     l955:
 14664  003682                     l9166:
 14665                           
 14666                           ; BSR set to: 0
 14667                           ;tff.c: 298: if (cstat < mcl) return cstat;
 14668  003682  51BA               	movf	create_chain@mcl& (0+255),w,b
 14669  003684  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 14670  003686  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 14671  003688  59BF               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 14672  00368A  B0D8               	btfsc	status,0,c
 14673  00368C  D005               	goto	l957
 14674                           
 14675                           ; BSR set to: 0
 14676  00368E  C0BE  F0B6         	movff	create_chain@cstat,?_create_chain
 14677  003692  C0BF  F0B7         	movff	create_chain@cstat+1,?_create_chain+1
 14678  003696  0012               	return	
 14679  003698                     l957:
 14680                           
 14681                           ; BSR set to: 0
 14682                           ;tff.c: 299: scl = clust;
 14683  003698  C0B6  F0C0         	movff	create_chain@clust,create_chain@scl
 14684  00369C  C0B7  F0C1         	movff	create_chain@clust+1,create_chain@scl+1
 14685  0036A0                     l954:
 14686                           
 14687                           ; BSR set to: 0
 14688                           ;tff.c: 300: }
 14689                           ;tff.c: 302: ncl = scl;
 14690  0036A0  C0C0  F0C2         	movff	create_chain@scl,create_chain@ncl
 14691  0036A4  C0C1  F0C3         	movff	create_chain@scl+1,create_chain@ncl+1
 14692  0036A8                     l9170:
 14693                           
 14694                           ; BSR set to: 0
 14695                           ;tff.c: 304: ncl++;
 14696  0036A8  4BC2               	infsnz	create_chain@ncl& (0+255),f,b
 14697  0036AA  2BC3               	incf	(create_chain@ncl+1)& (0+255),f,b
 14698                           
 14699                           ; BSR set to: 0
 14700                           ;tff.c: 305: if (ncl >= mcl) {
 14701  0036AC  51BA               	movf	create_chain@mcl& (0+255),w,b
 14702  0036AE  5DC2               	subwf	create_chain@ncl& (0+255),w,b
 14703  0036B0  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 14704  0036B2  59C3               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 14705  0036B4  A0D8               	btfss	status,0,c
 14706  0036B6  D00F               	goto	l960
 14707                           
 14708                           ; BSR set to: 0
 14709                           ;tff.c: 306: ncl = 2;
 14710  0036B8  0E00               	movlw	0
 14711  0036BA  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 14712  0036BC  0E02               	movlw	2
 14713  0036BE  6FC2               	movwf	create_chain@ncl& (0+255),b
 14714                           
 14715                           ; BSR set to: 0
 14716                           ;tff.c: 307: if (ncl > scl) return 0;
 14717  0036C0  51C2               	movf	create_chain@ncl& (0+255),w,b
 14718  0036C2  5DC0               	subwf	create_chain@scl& (0+255),w,b
 14719  0036C4  51C3               	movf	(create_chain@ncl+1)& (0+255),w,b
 14720  0036C6  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 14721  0036C8  B0D8               	btfsc	status,0,c
 14722  0036CA  D005               	goto	l960
 14723                           
 14724                           ; BSR set to: 0
 14725  0036CC  0E00               	movlw	0
 14726  0036CE  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 14727  0036D0  0E00               	movlw	0
 14728  0036D2  6FB6               	movwf	?_create_chain& (0+255),b
 14729                           
 14730                           ; BSR set to: 0
 14731  0036D4  0012               	return	
 14732  0036D6                     l960:
 14733                           
 14734                           ; BSR set to: 0
 14735                           ;tff.c: 308: }
 14736                           ;tff.c: 309: cstat = get_cluster(ncl);
 14737                           
 14738                           ; BSR set to: 0
 14739                           
 14740                           ; BSR set to: 0
 14741  0036D6  C0C2  F0A0         	movff	create_chain@ncl,get_cluster@clust
 14742  0036DA  C0C3  F0A1         	movff	create_chain@ncl+1,get_cluster@clust+1
 14743  0036DE  EC07  F019         	call	_get_cluster	;wreg free
 14744  0036E2  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 14745  0036E6  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 14746                           
 14747                           ;tff.c: 310: if (cstat == 0) break;
 14748  0036EA  0100               	movlb	0	; () banked
 14749  0036EC  51BE               	movf	create_chain@cstat& (0+255),w,b
 14750  0036EE  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 14751  0036F0  B4D8               	btfsc	status,2,c
 14752  0036F2  D015               	goto	l962
 14753                           
 14754                           ; BSR set to: 0
 14755                           ;tff.c: 311: if (cstat == 1) return 1;
 14756                           
 14757                           ; BSR set to: 0
 14758                           
 14759                           ; BSR set to: 0
 14760  0036F4  05BE               	decf	create_chain@cstat& (0+255),w,b
 14761  0036F6  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 14762  0036F8  A4D8               	btfss	status,2,c
 14763  0036FA  D005               	goto	l963
 14764                           
 14765                           ; BSR set to: 0
 14766  0036FC  0E00               	movlw	0
 14767  0036FE  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 14768  003700  0E01               	movlw	1
 14769  003702  6FB6               	movwf	?_create_chain& (0+255),b
 14770                           
 14771                           ; BSR set to: 0
 14772  003704  0012               	return	
 14773  003706                     l963:
 14774                           
 14775                           ; BSR set to: 0
 14776                           ;tff.c: 312: if (ncl == scl) return 0;
 14777                           
 14778                           ; BSR set to: 0
 14779  003706  51C0               	movf	create_chain@scl& (0+255),w,b
 14780  003708  19C2               	xorwf	create_chain@ncl& (0+255),w,b
 14781  00370A  E1CE               	bnz	l9170
 14782  00370C  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 14783  00370E  19C3               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 14784  003710  A4D8               	btfss	status,2,c
 14785  003712  D7CA               	goto	l958
 14786                           
 14787                           ; BSR set to: 0
 14788  003714  0E00               	movlw	0
 14789  003716  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 14790  003718  0E00               	movlw	0
 14791  00371A  6FB6               	movwf	?_create_chain& (0+255),b
 14792                           
 14793                           ; BSR set to: 0
 14794  00371C  0012               	return	
 14795  00371E                     l962:
 14796                           
 14797                           ; BSR set to: 0
 14798                           ;tff.c: 315: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 14799                           
 14800                           ; BSR set to: 0
 14801  00371E  C0C2  F0A0         	movff	create_chain@ncl,put_cluster@clust
 14802  003722  C0C3  F0A1         	movff	create_chain@ncl+1,put_cluster@clust+1
 14803  003726  0EFF               	movlw	255
 14804  003728  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 14805  00372A  69A2               	setf	put_cluster@val& (0+255),b
 14806  00372C  ECCA  F017         	call	_put_cluster	;wreg free
 14807  003730  0900               	iorlw	0
 14808  003732  A4D8               	btfss	status,2,c
 14809  003734  D006               	goto	l965
 14810  003736  0E00               	movlw	0
 14811  003738  0100               	movlb	0	; () banked
 14812  00373A  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 14813  00373C  0E01               	movlw	1
 14814  00373E  6FB6               	movwf	?_create_chain& (0+255),b
 14815                           
 14816                           ; BSR set to: 0
 14817  003740  0012               	return	
 14818  003742                     l965:
 14819                           
 14820                           ;tff.c: 316: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 14821                           
 14822                           ; BSR set to: 0
 14823  003742  0100               	movlb	0	; () banked
 14824  003744  51B6               	movf	create_chain@clust& (0+255),w,b
 14825  003746  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 14826  003748  B4D8               	btfsc	status,2,c
 14827  00374A  D013               	goto	l966
 14828                           
 14829                           ; BSR set to: 0
 14830  00374C  C0B6  F0A0         	movff	create_chain@clust,put_cluster@clust
 14831  003750  C0B7  F0A1         	movff	create_chain@clust+1,put_cluster@clust+1
 14832  003754  C0C2  F0A2         	movff	create_chain@ncl,put_cluster@val
 14833  003758  C0C3  F0A3         	movff	create_chain@ncl+1,put_cluster@val+1
 14834  00375C  ECCA  F017         	call	_put_cluster	;wreg free
 14835  003760  0900               	iorlw	0
 14836  003762  A4D8               	btfss	status,2,c
 14837  003764  D006               	goto	l966
 14838  003766  0E00               	movlw	0
 14839  003768  0100               	movlb	0	; () banked
 14840  00376A  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 14841  00376C  0E01               	movlw	1
 14842  00376E  6FB6               	movwf	?_create_chain& (0+255),b
 14843                           
 14844                           ; BSR set to: 0
 14845  003770  0012               	return	
 14846  003772                     l966:
 14847                           
 14848                           ;tff.c: 318: fs->last_clust = ncl;
 14849                           
 14850                           ; BSR set to: 0
 14851  003772  0100               	movlb	0	; () banked
 14852  003774  EE20 F018          	lfsr	2,24
 14853  003778  51BC               	movf	create_chain@fs& (0+255),w,b
 14854  00377A  26D9               	addwf	fsr2l,f,c
 14855  00377C  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 14856  00377E  22DA               	addwfc	fsr2h,f,c
 14857  003780  C0C2  FFDE         	movff	create_chain@ncl,postinc2
 14858  003784  C0C3  FFDD         	movff	create_chain@ncl+1,postdec2
 14859                           
 14860                           ;tff.c: 319: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 14861  003788  EE20 F01A          	lfsr	2,26
 14862  00378C  51BC               	movf	create_chain@fs& (0+255),w,b
 14863  00378E  26D9               	addwf	fsr2l,f,c
 14864  003790  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 14865  003792  22DA               	addwfc	fsr2h,f,c
 14866  003794  28DE               	incf	postinc2,w,c
 14867  003796  E103               	bnz	u10970
 14868  003798  28DE               	incf	postinc2,w,c
 14869  00379A  B4D8               	btfsc	status,2,c
 14870  00379C  D009               	goto	l967
 14871  00379E                     u10970:
 14872                           
 14873                           ; BSR set to: 0
 14874                           ;tff.c: 320: fs->free_clust--;
 14875  00379E  EE20 F01A          	lfsr	2,26
 14876  0037A2  51BC               	movf	create_chain@fs& (0+255),w,b
 14877  0037A4  26D9               	addwf	fsr2l,f,c
 14878  0037A6  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 14879  0037A8  22DA               	addwfc	fsr2h,f,c
 14880  0037AA  06DE               	decf	postinc2,f,c
 14881  0037AC  0E00               	movlw	0
 14882  0037AE  5ADD               	subwfb	postdec2,f,c
 14883  0037B0                     l967:
 14884                           
 14885                           ; BSR set to: 0
 14886                           ;tff.c: 324: }
 14887                           ;tff.c: 326: return ncl;
 14888                           
 14889                           ; BSR set to: 0
 14890  0037B0  C0C2  F0B6         	movff	create_chain@ncl,?_create_chain
 14891  0037B4  C0C3  F0B7         	movff	create_chain@ncl+1,?_create_chain+1
 14892  0037B8  0012               	return	
 14893  0037BA                     __end_of_create_chain:
 14894                           	opt stack 0
 14895                           tosu	equ	0xFFF
 14896                           tosh	equ	0xFFE
 14897                           tosl	equ	0xFFD
 14898                           pclath	equ	0xFFA
 14899                           tblptru	equ	0xFF8
 14900                           tblptrh	equ	0xFF7
 14901                           tblptrl	equ	0xFF6
 14902                           tablat	equ	0xFF5
 14903                           prodh	equ	0xFF4
 14904                           prodl	equ	0xFF3
 14905                           intcon	equ	0xFF2
 14906                           intcon2	equ	0xFF1
 14907                           intcon3	equ	0xFF0
 14908                           indf0	equ	0xFEF
 14909                           postinc0	equ	0xFEE
 14910                           fsr0h	equ	0xFEA
 14911                           fsr0l	equ	0xFE9
 14912                           wreg	equ	0xFE8
 14913                           indf1	equ	0xFE7
 14914                           postinc1	equ	0xFE6
 14915                           postdec1	equ	0xFE5
 14916                           fsr1h	equ	0xFE2
 14917                           fsr1l	equ	0xFE1
 14918                           indf2	equ	0xFDF
 14919                           postinc2	equ	0xFDE
 14920                           postdec2	equ	0xFDD
 14921                           plusw2	equ	0xFDB
 14922                           fsr2h	equ	0xFDA
 14923                           fsr2l	equ	0xFD9
 14924                           status	equ	0xFD8
 14925                           
 14926 ;; *************** function _put_cluster *****************
 14927 ;; Defined at:
 14928 ;;		line 197 in file "bibliotecas/tff.c"
 14929 ;; Parameters:    Size  Location     Type
 14930 ;;  clust           2   64[BANK0 ] unsigned short 
 14931 ;;  val             2   66[BANK0 ] unsigned short 
 14932 ;; Auto vars:     Size  Location     Type
 14933 ;;  fatsect         4   76[BANK0 ] unsigned long 
 14934 ;;  fs              2   84[BANK0 ] PTR struct _FATFS
 14935 ;;		 -> NULL(0), fs(544), 
 14936 ;;  p               2   82[BANK0 ] PTR unsigned char 
 14937 ;;		 -> fs.win(512), NULL(0), fs(544), 
 14938 ;;  bc              2   80[BANK0 ] unsigned short 
 14939 ;; Return value:  Size  Location     Type
 14940 ;;                  1    wreg      enum E105
 14941 ;; Registers used:
 14942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14943 ;; Tracked objects:
 14944 ;;		On entry : 0/0
 14945 ;;		On exit  : 0/0
 14946 ;;		Unchanged: 0/0
 14947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14948 ;;      Params:         0       4       0       0       0       0       0       0       0
 14949 ;;      Locals:         0      14       0       0       0       0       0       0       0
 14950 ;;      Temps:          0       4       0       0       0       0       0       0       0
 14951 ;;      Totals:         0      22       0       0       0       0       0       0       0
 14952 ;;Total ram usage:       22 bytes
 14953 ;; Hardware stack levels used:    1
 14954 ;; Hardware stack levels required when called:    9
 14955 ;; This function calls:
 14956 ;;		___wmul
 14957 ;;		_move_window
 14958 ;; This function is called by:
 14959 ;;		_remove_chain
 14960 ;;		_create_chain
 14961 ;; This function uses a non-reentrant model
 14962 ;;
 14963                           
 14964                           	psect	text50
 14965  002F94                     __ptext50:
 14966                           	opt stack 0
 14967  002F94                     _put_cluster:
 14968                           	opt stack 15
 14969                           
 14970                           ;tff.c: 202: WORD bc;
 14971                           ;tff.c: 203: BYTE *p;
 14972                           ;tff.c: 204: DWORD fatsect;
 14973                           ;tff.c: 205: FATFS *fs = FatFs;
 14974                           
 14975                           ; BSR set to: 0
 14976                           ;incstack = 0
 14977  002F94  C0FD  F0B4         	movff	_FatFs,put_cluster@fs
 14978  002F98  C0FE  F0B5         	movff	_FatFs+1,put_cluster@fs+1
 14979                           
 14980                           ;tff.c: 208: fatsect = fs->fatbase;
 14981  002F9C  0100               	movlb	0	; () banked
 14982  002F9E  EE20 F008          	lfsr	2,8
 14983  002FA2  51B4               	movf	put_cluster@fs& (0+255),w,b
 14984  002FA4  26D9               	addwf	fsr2l,f,c
 14985  002FA6  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 14986  002FA8  22DA               	addwfc	fsr2h,f,c
 14987  002FAA  CFDE F0AC          	movff	postinc2,put_cluster@fatsect
 14988  002FAE  CFDE F0AD          	movff	postinc2,put_cluster@fatsect+1
 14989  002FB2  CFDE F0AE          	movff	postinc2,put_cluster@fatsect+2
 14990  002FB6  CFDE F0AF          	movff	postinc2,put_cluster@fatsect+3
 14991                           
 14992                           ;tff.c: 209: switch (fs->fs_type) {
 14993  002FBA  D111               	goto	l920
 14994  002FBC                     
 14995                           ; BSR set to: 0
 14996                           ;tff.c: 211: bc = (WORD)clust * 3 / 2;
 14997                           
 14998                           ; BSR set to: 0
 14999  002FBC  C0A0  F060         	movff	put_cluster@clust,___wmul@multiplier
 15000  002FC0  C0A1  F061         	movff	put_cluster@clust+1,___wmul@multiplier+1
 15001  002FC4  0E00               	movlw	0
 15002  002FC6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15003  002FC8  0E03               	movlw	3
 15004  002FCA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15005  002FCC  EC0F  F02C         	call	___wmul	;wreg free
 15006  002FD0  90D8               	bcf	status,0,c
 15007  002FD2  0100               	movlb	0	; () banked
 15008  002FD4  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 15009  002FD6  6FA4               	movwf	??_put_cluster& (0+255),b
 15010  002FD8  3160               	rrcf	?___wmul& (0+255),w,b
 15011  002FDA  6FB0               	movwf	put_cluster@bc& (0+255),b
 15012  002FDC  C0A4  F0B1         	movff	??_put_cluster,put_cluster@bc+1
 15013                           
 15014                           ; BSR set to: 0
 15015                           ;tff.c: 212: if (!move_window(fatsect + bc / 512U)) return FALSE;
 15016  002FE0  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 15017  002FE4  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 15018  002FE8  0E09               	movlw	9
 15019  002FEA  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15020  002FEC                     u10705:
 15021  002FEC  90D8               	bcf	status,0,c
 15022  002FEE  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15023  002FF0  33A4               	rrcf	??_put_cluster& (0+255),f,b
 15024  002FF2  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15025  002FF4  D7FB               	goto	u10705
 15026  002FF6  51A4               	movf	??_put_cluster& (0+255),w,b
 15027  002FF8  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 15028  002FFA  6F8B               	movwf	move_window@sector& (0+255),b
 15029  002FFC  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15030  002FFE  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15031  003000  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15032  003002  0E00               	movlw	0
 15033  003004  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15034  003006  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15035  003008  0E00               	movlw	0
 15036  00300A  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15037  00300C  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15038  00300E  ECDD  F01B         	call	_move_window	;wreg free
 15039  003012  0900               	iorlw	0
 15040  003014  A4D8               	btfss	status,2,c
 15041  003016  D002               	goto	l922
 15042  003018  0E00               	movlw	0
 15043  00301A  0012               	return	
 15044  00301C                     l922:
 15045                           
 15046                           ;tff.c: 213: p = &fs->win[bc % 512U];
 15047  00301C  0EFF               	movlw	255
 15048  00301E  0100               	movlb	0	; () banked
 15049  003020  6FA4               	movwf	??_put_cluster& (0+255),b
 15050  003022  0E01               	movlw	1
 15051  003024  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 15052  003026  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 15053  00302A  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 15054  00302E  51A4               	movf	??_put_cluster& (0+255),w,b
 15055  003030  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 15056  003032  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15057  003034  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 15058  003036  0E20               	movlw	32
 15059  003038  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 15060  00303A  0E00               	movlw	0
 15061  00303C  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 15062  00303E  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 15063  003040  25B4               	addwf	put_cluster@fs& (0+255),w,b
 15064  003042  6FB2               	movwf	put_cluster@p& (0+255),b
 15065  003044  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 15066  003046  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 15067  003048  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;tff.c: 214: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 15071  00304A  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 15072  00304C  D004               	goto	l925
 15073                           
 15074                           ; BSR set to: 0
 15075  00304E  C0A2  F0A8         	movff	put_cluster@val,_put_cluster$1946
 15076  003052  6BA9               	clrf	(_put_cluster$1946+1)& (0+255),b
 15077  003054  D01A               	goto	l927
 15078  003056                     l925:
 15079                           
 15080                           ; BSR set to: 0
 15081                           
 15082                           ; BSR set to: 0
 15083  003056  51A2               	movf	put_cluster@val& (0+255),w,b
 15084  003058  6FA4               	movwf	??_put_cluster& (0+255),b
 15085  00305A  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 15086  00305C  3BA4               	swapf	??_put_cluster& (0+255),f,b
 15087  00305E  3BA5               	swapf	(??_put_cluster+1)& (0+255),f,b
 15088  003060  0EF0               	movlw	240
 15089  003062  17A5               	andwf	(??_put_cluster+1)& (0+255),f,b
 15090  003064  51A4               	movf	??_put_cluster& (0+255),w,b
 15091  003066  0B0F               	andlw	15
 15092  003068  13A5               	iorwf	(??_put_cluster+1)& (0+255),f,b
 15093  00306A  0EF0               	movlw	240
 15094  00306C  17A4               	andwf	??_put_cluster& (0+255),f,b
 15095  00306E  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 15096  003072  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 15097  003076  50DF               	movf	indf2,w,c
 15098  003078  0B0F               	andlw	15
 15099  00307A  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15100  00307C  6BA7               	clrf	(??_put_cluster+3)& (0+255),b
 15101  00307E  51A4               	movf	??_put_cluster& (0+255),w,b
 15102  003080  11A6               	iorwf	(??_put_cluster+2)& (0+255),w,b
 15103  003082  6FA8               	movwf	_put_cluster$1946& (0+255),b
 15104  003084  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15105  003086  11A7               	iorwf	(??_put_cluster+3)& (0+255),w,b
 15106  003088  6FA9               	movwf	(_put_cluster$1946+1)& (0+255),b
 15107  00308A                     l927:
 15108                           
 15109                           ; BSR set to: 0
 15110                           
 15111                           ; BSR set to: 0
 15112  00308A  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 15113  00308E  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 15114  003092  C0A8  FFDF         	movff	_put_cluster$1946,indf2
 15115                           
 15116                           ; BSR set to: 0
 15117                           ;tff.c: 215: bc++;
 15118  003096  4BB0               	infsnz	put_cluster@bc& (0+255),f,b
 15119  003098  2BB1               	incf	(put_cluster@bc+1)& (0+255),f,b
 15120                           
 15121                           ; BSR set to: 0
 15122                           ;tff.c: 216: fs->winflag = 1;
 15123  00309A  EE20 F01F          	lfsr	2,31
 15124  00309E  51B4               	movf	put_cluster@fs& (0+255),w,b
 15125  0030A0  26D9               	addwf	fsr2l,f,c
 15126  0030A2  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 15127  0030A4  22DA               	addwfc	fsr2h,f,c
 15128  0030A6  0E01               	movlw	1
 15129  0030A8  6EDF               	movwf	indf2,c
 15130                           
 15131                           ; BSR set to: 0
 15132                           ;tff.c: 217: if (!move_window(fatsect + bc / 512U)) return FALSE;
 15133  0030AA  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 15134  0030AE  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 15135  0030B2  0E09               	movlw	9
 15136  0030B4  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15137  0030B6                     u10735:
 15138  0030B6  90D8               	bcf	status,0,c
 15139  0030B8  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15140  0030BA  33A4               	rrcf	??_put_cluster& (0+255),f,b
 15141  0030BC  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15142  0030BE  D7FB               	goto	u10735
 15143  0030C0  51A4               	movf	??_put_cluster& (0+255),w,b
 15144  0030C2  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 15145  0030C4  6F8B               	movwf	move_window@sector& (0+255),b
 15146  0030C6  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15147  0030C8  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15148  0030CA  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15149  0030CC  0E00               	movlw	0
 15150  0030CE  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15151  0030D0  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15152  0030D2  0E00               	movlw	0
 15153  0030D4  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15154  0030D6  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15155  0030D8  ECDD  F01B         	call	_move_window	;wreg free
 15156  0030DC  0900               	iorlw	0
 15157  0030DE  A4D8               	btfss	status,2,c
 15158  0030E0  D002               	goto	l928
 15159  0030E2  0E00               	movlw	0
 15160  0030E4  0012               	return	
 15161  0030E6                     l928:
 15162                           
 15163                           ;tff.c: 218: p = &fs->win[bc % 512U];
 15164  0030E6  0EFF               	movlw	255
 15165  0030E8  0100               	movlb	0	; () banked
 15166  0030EA  6FA4               	movwf	??_put_cluster& (0+255),b
 15167  0030EC  0E01               	movlw	1
 15168  0030EE  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 15169  0030F0  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 15170  0030F4  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 15171  0030F8  51A4               	movf	??_put_cluster& (0+255),w,b
 15172  0030FA  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 15173  0030FC  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15174  0030FE  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 15175  003100  0E20               	movlw	32
 15176  003102  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 15177  003104  0E00               	movlw	0
 15178  003106  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 15179  003108  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 15180  00310A  25B4               	addwf	put_cluster@fs& (0+255),w,b
 15181  00310C  6FB2               	movwf	put_cluster@p& (0+255),b
 15182  00310E  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 15183  003110  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 15184  003112  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 15185                           
 15186                           ; BSR set to: 0
 15187                           ;tff.c: 219: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 15188  003114  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 15189  003116  D013               	goto	l930
 15190                           
 15191                           ; BSR set to: 0
 15192  003118  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 15193  00311C  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 15194  003120  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 15195  003124  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 15196  003126  0E0F               	movlw	15
 15197  003128  17A4               	andwf	??_put_cluster& (0+255),f,b
 15198  00312A  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 15199  00312E  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 15200  003132  50DF               	movf	indf2,w,c
 15201  003134  0BF0               	andlw	240
 15202  003136  11A4               	iorwf	??_put_cluster& (0+255),w,b
 15203  003138  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15204  00313A  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 15205  00313C  D00C               	goto	L9
 15206  00313E                     l930:
 15207                           
 15208                           ; BSR set to: 0
 15209                           
 15210                           ; BSR set to: 0
 15211  00313E  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 15212  003142  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 15213  003146  0E04               	movlw	4
 15214  003148  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15215  00314A                     u10765:
 15216  00314A  90D8               	bcf	status,0,c
 15217  00314C  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15218  00314E  33A4               	rrcf	??_put_cluster& (0+255),f,b
 15219  003150  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15220  003152  D7FB               	goto	u10765
 15221  003154  51A4               	movf	??_put_cluster& (0+255),w,b
 15222  003156                     L9:
 15223  003156  6FAA               	movwf	_put_cluster$1947& (0+255),b
 15224  003158  6BAB               	clrf	(_put_cluster$1947+1)& (0+255),b
 15225                           
 15226                           ; BSR set to: 0
 15227                           
 15228                           ; BSR set to: 0
 15229  00315A  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 15230  00315E  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 15231  003162  C0AA  FFDF         	movff	_put_cluster$1947,indf2
 15232                           
 15233                           ;tff.c: 220: break;
 15234  003166  D049               	goto	l933
 15235  003168                     
 15236                           ; BSR set to: 0
 15237                           ;tff.c: 223: if (!move_window(fatsect + clust / 256)) return FALSE;
 15238                           
 15239                           ; BSR set to: 0
 15240  003168  C0A0  F0A4         	movff	put_cluster@clust,??_put_cluster
 15241  00316C  C0A1  F0A5         	movff	put_cluster@clust+1,??_put_cluster+1
 15242  003170  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 15243  003174  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 15244  003176  51A4               	movf	??_put_cluster& (0+255),w,b
 15245  003178  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 15246  00317A  6F8B               	movwf	move_window@sector& (0+255),b
 15247  00317C  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15248  00317E  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15249  003180  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15250  003182  0E00               	movlw	0
 15251  003184  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15252  003186  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15253  003188  0E00               	movlw	0
 15254  00318A  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15255  00318C  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15256  00318E  ECDD  F01B         	call	_move_window	;wreg free
 15257  003192  0900               	iorlw	0
 15258  003194  A4D8               	btfss	status,2,c
 15259  003196  D002               	goto	l935
 15260  003198  0E00               	movlw	0
 15261  00319A  0012               	return	
 15262  00319C                     l935:
 15263                           
 15264                           ;tff.c: 224: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 15265  00319C  0EFF               	movlw	255
 15266  00319E  0100               	movlb	0	; () banked
 15267  0031A0  6FA4               	movwf	??_put_cluster& (0+255),b
 15268  0031A2  0E01               	movlw	1
 15269  0031A4  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 15270  0031A6  C0A0  F0A6         	movff	put_cluster@clust,??_put_cluster+2
 15271  0031AA  C0A1  F0A7         	movff	put_cluster@clust+1,??_put_cluster+3
 15272  0031AE  90D8               	bcf	status,0,c
 15273  0031B0  37A6               	rlcf	(??_put_cluster+2)& (0+255),f,b
 15274  0031B2  37A7               	rlcf	(??_put_cluster+3)& (0+255),f,b
 15275  0031B4  51A4               	movf	??_put_cluster& (0+255),w,b
 15276  0031B6  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 15277  0031B8  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15278  0031BA  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 15279  0031BC  0E20               	movlw	32
 15280  0031BE  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 15281  0031C0  0E00               	movlw	0
 15282  0031C2  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 15283  0031C4  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 15284  0031C6  25B4               	addwf	put_cluster@fs& (0+255),w,b
 15285  0031C8  6ED9               	movwf	fsr2l,c
 15286  0031CA  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 15287  0031CC  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 15288  0031CE  6EDA               	movwf	fsr2h,c
 15289  0031D0  C0A2  FFDE         	movff	put_cluster@val,postinc2
 15290  0031D4  C0A3  FFDD         	movff	put_cluster@val+1,postdec2
 15291                           
 15292                           ;tff.c: 225: break;
 15293  0031D8  D010               	goto	l933
 15294  0031DA                     
 15295                           ; BSR set to: 0
 15296                           ;tff.c: 233: return FALSE;
 15297                           
 15298                           ; BSR set to: 0
 15299  0031DA  0E00               	movlw	0
 15300                           
 15301                           ; BSR set to: 0
 15302  0031DC  0012               	return	
 15303  0031DE                     l920:
 15304                           
 15305                           ; BSR set to: 0
 15306                           
 15307                           ; BSR set to: 0
 15308  0031DE  EE20 F01C          	lfsr	2,28
 15309  0031E2  51B4               	movf	put_cluster@fs& (0+255),w,b
 15310  0031E4  26D9               	addwf	fsr2l,f,c
 15311  0031E6  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 15312  0031E8  22DA               	addwfc	fsr2h,f,c
 15313  0031EA  50DF               	movf	indf2,w,c
 15314                           
 15315                           ; Switch size 1, requested type "space"
 15316                           ; Number of cases is 2, Range of values is 1 to 2
 15317                           ; switch strategies available:
 15318                           ; Name         Instructions Cycles
 15319                           ; simple_byte            7     4 (average)
 15320                           ;	Chosen strategy is simple_byte
 15321  0031EC  0A01               	xorlw	1	; case 1
 15322  0031EE  B4D8               	btfsc	status,2,c
 15323  0031F0  D6E5               	goto	l921
 15324  0031F2  0A03               	xorlw	3	; case 2
 15325  0031F4  B4D8               	btfsc	status,2,c
 15326  0031F6  D7B8               	goto	l934
 15327  0031F8  D7F0               	goto	l936
 15328  0031FA                     l933:
 15329                           
 15330                           ; BSR set to: 0
 15331                           ;tff.c: 235: fs->winflag = 1;
 15332                           
 15333                           ; BSR set to: 0
 15334  0031FA  EE20 F01F          	lfsr	2,31
 15335  0031FE  51B4               	movf	put_cluster@fs& (0+255),w,b
 15336  003200  26D9               	addwf	fsr2l,f,c
 15337  003202  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 15338  003204  22DA               	addwfc	fsr2h,f,c
 15339  003206  0E01               	movlw	1
 15340  003208  6EDF               	movwf	indf2,c
 15341                           
 15342                           ; BSR set to: 0
 15343                           ;tff.c: 236: return TRUE;
 15344  00320A  0E01               	movlw	1
 15345  00320C  0012               	return	
 15346  00320E                     __end_of_put_cluster:
 15347                           	opt stack 0
 15348                           tosu	equ	0xFFF
 15349                           tosh	equ	0xFFE
 15350                           tosl	equ	0xFFD
 15351                           pclath	equ	0xFFA
 15352                           tblptru	equ	0xFF8
 15353                           tblptrh	equ	0xFF7
 15354                           tblptrl	equ	0xFF6
 15355                           tablat	equ	0xFF5
 15356                           prodh	equ	0xFF4
 15357                           prodl	equ	0xFF3
 15358                           intcon	equ	0xFF2
 15359                           intcon2	equ	0xFF1
 15360                           intcon3	equ	0xFF0
 15361                           indf0	equ	0xFEF
 15362                           postinc0	equ	0xFEE
 15363                           fsr0h	equ	0xFEA
 15364                           fsr0l	equ	0xFE9
 15365                           wreg	equ	0xFE8
 15366                           indf1	equ	0xFE7
 15367                           postinc1	equ	0xFE6
 15368                           postdec1	equ	0xFE5
 15369                           fsr1h	equ	0xFE2
 15370                           fsr1l	equ	0xFE1
 15371                           indf2	equ	0xFDF
 15372                           postinc2	equ	0xFDE
 15373                           postdec2	equ	0xFDD
 15374                           plusw2	equ	0xFDB
 15375                           fsr2h	equ	0xFDA
 15376                           fsr2l	equ	0xFD9
 15377                           status	equ	0xFD8
 15378                           
 15379 ;; *************** function _get_cluster *****************
 15380 ;; Defined at:
 15381 ;;		line 154 in file "bibliotecas/tff.c"
 15382 ;; Parameters:    Size  Location     Type
 15383 ;;  clust           2   64[BANK0 ] unsigned short 
 15384 ;; Auto vars:     Size  Location     Type
 15385 ;;  fatsect         4   75[BANK0 ] unsigned long 
 15386 ;;  fs              2   81[BANK0 ] PTR struct _FATFS
 15387 ;;		 -> NULL(0), fs(544), 
 15388 ;;  bc              2   79[BANK0 ] unsigned short 
 15389 ;;  wc              2   73[BANK0 ] unsigned short 
 15390 ;; Return value:  Size  Location     Type
 15391 ;;                  2   64[BANK0 ] unsigned short 
 15392 ;; Registers used:
 15393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15394 ;; Tracked objects:
 15395 ;;		On entry : 0/0
 15396 ;;		On exit  : 0/0
 15397 ;;		Unchanged: 0/0
 15398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15399 ;;      Params:         0       2       0       0       0       0       0       0       0
 15400 ;;      Locals:         0      10       0       0       0       0       0       0       0
 15401 ;;      Temps:          0       7       0       0       0       0       0       0       0
 15402 ;;      Totals:         0      19       0       0       0       0       0       0       0
 15403 ;;Total ram usage:       19 bytes
 15404 ;; Hardware stack levels used:    1
 15405 ;; Hardware stack levels required when called:    9
 15406 ;; This function calls:
 15407 ;;		___wmul
 15408 ;;		_move_window
 15409 ;; This function is called by:
 15410 ;;		_remove_chain
 15411 ;;		_create_chain
 15412 ;;		_next_dir_entry
 15413 ;;		_f_read
 15414 ;;		_f_lseek
 15415 ;; This function uses a non-reentrant model
 15416 ;;
 15417                           
 15418                           	psect	text51
 15419  00320E                     __ptext51:
 15420                           	opt stack 0
 15421  00320E                     _get_cluster:
 15422                           	opt stack 16
 15423                           
 15424                           ;tff.c: 158: WORD wc, bc;
 15425                           ;tff.c: 159: DWORD fatsect;
 15426                           ;tff.c: 160: FATFS *fs = FatFs;
 15427                           
 15428                           ;incstack = 0
 15429  00320E  C0FD  F0B1         	movff	_FatFs,get_cluster@fs
 15430  003212  C0FE  F0B2         	movff	_FatFs+1,get_cluster@fs+1
 15431                           
 15432                           ;tff.c: 163: if (clust >= 2 && clust < fs->max_clust) {
 15433  003216  0100               	movlb	0	; () banked
 15434  003218  51A1               	movf	(get_cluster@clust+1)& (0+255),w,b
 15435  00321A  E104               	bnz	u10610
 15436  00321C  0E02               	movlw	2
 15437  00321E  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 15438  003220  A0D8               	btfss	status,0,c
 15439  003222  D100               	goto	l909
 15440  003224                     u10610:
 15441                           
 15442                           ; BSR set to: 0
 15443  003224  EE20 F016          	lfsr	2,22
 15444  003228  51B1               	movf	get_cluster@fs& (0+255),w,b
 15445  00322A  26D9               	addwf	fsr2l,f,c
 15446  00322C  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 15447  00322E  22DA               	addwfc	fsr2h,f,c
 15448  003230  50DE               	movf	postinc2,w,c
 15449  003232  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 15450  003234  50DE               	movf	postinc2,w,c
 15451  003236  59A1               	subwfb	(get_cluster@clust+1)& (0+255),w,b
 15452  003238  B0D8               	btfsc	status,0,c
 15453  00323A  D0F4               	goto	l909
 15454                           
 15455                           ; BSR set to: 0
 15456                           ;tff.c: 164: fatsect = fs->fatbase;
 15457  00323C  EE20 F008          	lfsr	2,8
 15458  003240  51B1               	movf	get_cluster@fs& (0+255),w,b
 15459  003242  26D9               	addwf	fsr2l,f,c
 15460  003244  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 15461  003246  22DA               	addwfc	fsr2h,f,c
 15462  003248  CFDE F0AB          	movff	postinc2,get_cluster@fatsect
 15463  00324C  CFDE F0AC          	movff	postinc2,get_cluster@fatsect+1
 15464  003250  CFDE F0AD          	movff	postinc2,get_cluster@fatsect+2
 15465  003254  CFDE F0AE          	movff	postinc2,get_cluster@fatsect+3
 15466                           
 15467                           ;tff.c: 165: switch (fs->fs_type) {
 15468  003258  D0D8               	goto	l906
 15469  00325A                     
 15470                           ; BSR set to: 0
 15471                           ;tff.c: 167: bc = (WORD)clust * 3 / 2;
 15472                           
 15473                           ; BSR set to: 0
 15474  00325A  C0A0  F060         	movff	get_cluster@clust,___wmul@multiplier
 15475  00325E  C0A1  F061         	movff	get_cluster@clust+1,___wmul@multiplier+1
 15476  003262  0E00               	movlw	0
 15477  003264  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15478  003266  0E03               	movlw	3
 15479  003268  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15480  00326A  EC0F  F02C         	call	___wmul	;wreg free
 15481  00326E  90D8               	bcf	status,0,c
 15482  003270  0100               	movlb	0	; () banked
 15483  003272  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 15484  003274  6FA2               	movwf	??_get_cluster& (0+255),b
 15485  003276  3160               	rrcf	?___wmul& (0+255),w,b
 15486  003278  6FAF               	movwf	get_cluster@bc& (0+255),b
 15487  00327A  C0A2  F0B0         	movff	??_get_cluster,get_cluster@bc+1
 15488                           
 15489                           ; BSR set to: 0
 15490                           ;tff.c: 168: if (!move_window(fatsect + bc / 512U)) break;
 15491  00327E  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 15492  003282  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 15493  003286  0E09               	movlw	9
 15494  003288  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 15495  00328A                     u10635:
 15496  00328A  90D8               	bcf	status,0,c
 15497  00328C  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15498  00328E  33A2               	rrcf	??_get_cluster& (0+255),f,b
 15499  003290  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15500  003292  D7FB               	goto	u10635
 15501  003294  51A2               	movf	??_get_cluster& (0+255),w,b
 15502  003296  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 15503  003298  6F8B               	movwf	move_window@sector& (0+255),b
 15504  00329A  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 15505  00329C  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15506  00329E  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15507  0032A0  0E00               	movlw	0
 15508  0032A2  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15509  0032A4  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15510  0032A6  0E00               	movlw	0
 15511  0032A8  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15512  0032AA  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15513  0032AC  ECDD  F01B         	call	_move_window	;wreg free
 15514  0032B0  0900               	iorlw	0
 15515  0032B2  B4D8               	btfsc	status,2,c
 15516  0032B4  D0B7               	goto	l909
 15517                           
 15518                           ;tff.c: 169: wc = fs->win[bc % 512U]; bc++;
 15519  0032B6  0EFF               	movlw	255
 15520  0032B8  0100               	movlb	0	; () banked
 15521  0032BA  6FA2               	movwf	??_get_cluster& (0+255),b
 15522  0032BC  0E01               	movlw	1
 15523  0032BE  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 15524  0032C0  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 15525  0032C4  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 15526  0032C8  51A2               	movf	??_get_cluster& (0+255),w,b
 15527  0032CA  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 15528  0032CC  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 15529  0032CE  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 15530  0032D0  0E20               	movlw	32
 15531  0032D2  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 15532  0032D4  0E00               	movlw	0
 15533  0032D6  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 15534  0032D8  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 15535  0032DA  25B1               	addwf	get_cluster@fs& (0+255),w,b
 15536  0032DC  6ED9               	movwf	fsr2l,c
 15537  0032DE  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 15538  0032E0  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 15539  0032E2  6EDA               	movwf	fsr2h,c
 15540  0032E4  50DF               	movf	indf2,w,c
 15541  0032E6  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 15542  0032E8  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 15543  0032EA  6FA9               	movwf	get_cluster@wc& (0+255),b
 15544  0032EC  6BAA               	clrf	(get_cluster@wc+1)& (0+255),b
 15545                           
 15546                           ; BSR set to: 0
 15547  0032EE  4BAF               	infsnz	get_cluster@bc& (0+255),f,b
 15548  0032F0  2BB0               	incf	(get_cluster@bc+1)& (0+255),f,b
 15549                           
 15550                           ; BSR set to: 0
 15551                           ;tff.c: 170: if (!move_window(fatsect + bc / 512U)) break;
 15552  0032F2  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 15553  0032F6  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 15554  0032FA  0E09               	movlw	9
 15555  0032FC  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 15556  0032FE                     u10655:
 15557  0032FE  90D8               	bcf	status,0,c
 15558  003300  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15559  003302  33A2               	rrcf	??_get_cluster& (0+255),f,b
 15560  003304  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15561  003306  D7FB               	goto	u10655
 15562  003308  51A2               	movf	??_get_cluster& (0+255),w,b
 15563  00330A  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 15564  00330C  6F8B               	movwf	move_window@sector& (0+255),b
 15565  00330E  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 15566  003310  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15567  003312  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15568  003314  0E00               	movlw	0
 15569  003316  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15570  003318  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15571  00331A  0E00               	movlw	0
 15572  00331C  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15573  00331E  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15574  003320  ECDD  F01B         	call	_move_window	;wreg free
 15575  003324  0900               	iorlw	0
 15576  003326  B4D8               	btfsc	status,2,c
 15577  003328  D07D               	goto	l909
 15578                           
 15579                           ;tff.c: 171: wc |= (WORD)fs->win[bc % 512U] << 8;
 15580  00332A  0EFF               	movlw	255
 15581  00332C  0100               	movlb	0	; () banked
 15582  00332E  6FA2               	movwf	??_get_cluster& (0+255),b
 15583  003330  0E01               	movlw	1
 15584  003332  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 15585  003334  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 15586  003338  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 15587  00333C  51A2               	movf	??_get_cluster& (0+255),w,b
 15588  00333E  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 15589  003340  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 15590  003342  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 15591  003344  0E20               	movlw	32
 15592  003346  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 15593  003348  0E00               	movlw	0
 15594  00334A  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 15595  00334C  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 15596  00334E  25B1               	addwf	get_cluster@fs& (0+255),w,b
 15597  003350  6ED9               	movwf	fsr2l,c
 15598  003352  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 15599  003354  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 15600  003356  6EDA               	movwf	fsr2h,c
 15601  003358  50DF               	movf	indf2,w,c
 15602  00335A  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 15603  00335C  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 15604  00335E  6FA8               	movwf	(??_get_cluster+6)& (0+255),b
 15605  003360  6BA7               	clrf	(??_get_cluster+5)& (0+255),b
 15606  003362  51A7               	movf	(??_get_cluster+5)& (0+255),w,b
 15607  003364  13A9               	iorwf	get_cluster@wc& (0+255),f,b
 15608  003366  51A8               	movf	(??_get_cluster+6)& (0+255),w,b
 15609  003368  13AA               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 15610                           
 15611                           ; BSR set to: 0
 15612                           ;tff.c: 172: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 15613  00336A  B1A0               	btfsc	get_cluster@clust& (0+255),0,b
 15614  00336C  D007               	goto	l912
 15615                           
 15616                           ; BSR set to: 0
 15617  00336E  0EFF               	movlw	255
 15618  003370  15A9               	andwf	get_cluster@wc& (0+255),w,b
 15619  003372  6FA0               	movwf	?_get_cluster& (0+255),b
 15620  003374  0E0F               	movlw	15
 15621  003376  15AA               	andwf	(get_cluster@wc+1)& (0+255),w,b
 15622  003378  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 15623  00337A  0012               	return	
 15624  00337C                     l912:
 15625                           
 15626                           ; BSR set to: 0
 15627                           
 15628                           ; BSR set to: 0
 15629  00337C  C0A9  F0A2         	movff	get_cluster@wc,??_get_cluster
 15630  003380  C0AA  F0A3         	movff	get_cluster@wc+1,??_get_cluster+1
 15631  003384  0E04               	movlw	4
 15632  003386  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 15633  003388                     u10685:
 15634  003388  90D8               	bcf	status,0,c
 15635  00338A  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15636  00338C  33A2               	rrcf	??_get_cluster& (0+255),f,b
 15637  00338E  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15638  003390  D7FB               	goto	u10685
 15639  003392  C0A2  F0A0         	movff	??_get_cluster,?_get_cluster
 15640  003396  C0A3  F0A1         	movff	??_get_cluster+1,?_get_cluster+1
 15641                           
 15642                           ; BSR set to: 0
 15643                           
 15644                           ; BSR set to: 0
 15645  00339A  0012               	return	
 15646  00339C                     
 15647                           ; BSR set to: 0
 15648                           ;tff.c: 175: if (!move_window(fatsect + clust / 256)) break;
 15649                           
 15650                           ; BSR set to: 0
 15651  00339C  C0A0  F0A2         	movff	get_cluster@clust,??_get_cluster
 15652  0033A0  C0A1  F0A3         	movff	get_cluster@clust+1,??_get_cluster+1
 15653  0033A4  C0A3  F0A2         	movff	??_get_cluster+1,??_get_cluster
 15654  0033A8  6BA3               	clrf	(??_get_cluster+1)& (0+255),b
 15655  0033AA  51A2               	movf	??_get_cluster& (0+255),w,b
 15656  0033AC  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 15657  0033AE  6F8B               	movwf	move_window@sector& (0+255),b
 15658  0033B0  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 15659  0033B2  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15660  0033B4  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15661  0033B6  0E00               	movlw	0
 15662  0033B8  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15663  0033BA  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15664  0033BC  0E00               	movlw	0
 15665  0033BE  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15666  0033C0  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15667  0033C2  ECDD  F01B         	call	_move_window	;wreg free
 15668  0033C6  0900               	iorlw	0
 15669  0033C8  B4D8               	btfsc	status,2,c
 15670  0033CA  D02C               	goto	l909
 15671                           
 15672                           ;tff.c: 176: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 15673  0033CC  0EFF               	movlw	255
 15674  0033CE  0100               	movlb	0	; () banked
 15675  0033D0  6FA2               	movwf	??_get_cluster& (0+255),b
 15676  0033D2  0E01               	movlw	1
 15677  0033D4  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 15678  0033D6  C0A0  F0A4         	movff	get_cluster@clust,??_get_cluster+2
 15679  0033DA  C0A1  F0A5         	movff	get_cluster@clust+1,??_get_cluster+3
 15680  0033DE  90D8               	bcf	status,0,c
 15681  0033E0  37A4               	rlcf	(??_get_cluster+2)& (0+255),f,b
 15682  0033E2  37A5               	rlcf	(??_get_cluster+3)& (0+255),f,b
 15683  0033E4  51A2               	movf	??_get_cluster& (0+255),w,b
 15684  0033E6  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 15685  0033E8  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 15686  0033EA  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 15687  0033EC  0E20               	movlw	32
 15688  0033EE  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 15689  0033F0  0E00               	movlw	0
 15690  0033F2  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 15691  0033F4  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 15692  0033F6  25B1               	addwf	get_cluster@fs& (0+255),w,b
 15693  0033F8  6ED9               	movwf	fsr2l,c
 15694  0033FA  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 15695  0033FC  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 15696  0033FE  6EDA               	movwf	fsr2h,c
 15697  003400  CFDE F0A0          	movff	postinc2,?_get_cluster
 15698  003404  CFDD F0A1          	movff	postdec2,?_get_cluster+1
 15699                           
 15700                           ; BSR set to: 0
 15701  003408  0012               	return	
 15702  00340A                     l906:
 15703                           
 15704                           ; BSR set to: 0
 15705                           
 15706                           ; BSR set to: 0
 15707  00340A  EE20 F01C          	lfsr	2,28
 15708  00340E  51B1               	movf	get_cluster@fs& (0+255),w,b
 15709  003410  26D9               	addwf	fsr2l,f,c
 15710  003412  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 15711  003414  22DA               	addwfc	fsr2h,f,c
 15712  003416  50DF               	movf	indf2,w,c
 15713                           
 15714                           ; Switch size 1, requested type "space"
 15715                           ; Number of cases is 2, Range of values is 1 to 2
 15716                           ; switch strategies available:
 15717                           ; Name         Instructions Cycles
 15718                           ; simple_byte            7     4 (average)
 15719                           ;	Chosen strategy is simple_byte
 15720  003418  0A01               	xorlw	1	; case 1
 15721  00341A  B4D8               	btfsc	status,2,c
 15722  00341C  D71E               	goto	l907
 15723  00341E  0A03               	xorlw	3	; case 2
 15724  003420  B4D8               	btfsc	status,2,c
 15725  003422  D7BC               	goto	l916
 15726  003424                     l909:
 15727                           
 15728                           ;tff.c: 183: }
 15729                           ;tff.c: 185: return 1;
 15730                           
 15731                           ; BSR set to: 0
 15732                           
 15733                           ; BSR set to: 0
 15734  003424  0E00               	movlw	0
 15735  003426  0100               	movlb	0	; () banked
 15736  003428  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 15737  00342A  0E01               	movlw	1
 15738  00342C  6FA0               	movwf	?_get_cluster& (0+255),b
 15739  00342E  0012               	return	
 15740  003430                     __end_of_get_cluster:
 15741                           	opt stack 0
 15742                           tosu	equ	0xFFF
 15743                           tosh	equ	0xFFE
 15744                           tosl	equ	0xFFD
 15745                           pclath	equ	0xFFA
 15746                           tblptru	equ	0xFF8
 15747                           tblptrh	equ	0xFF7
 15748                           tblptrl	equ	0xFF6
 15749                           tablat	equ	0xFF5
 15750                           prodh	equ	0xFF4
 15751                           prodl	equ	0xFF3
 15752                           intcon	equ	0xFF2
 15753                           intcon2	equ	0xFF1
 15754                           intcon3	equ	0xFF0
 15755                           indf0	equ	0xFEF
 15756                           postinc0	equ	0xFEE
 15757                           fsr0h	equ	0xFEA
 15758                           fsr0l	equ	0xFE9
 15759                           wreg	equ	0xFE8
 15760                           indf1	equ	0xFE7
 15761                           postinc1	equ	0xFE6
 15762                           postdec1	equ	0xFE5
 15763                           fsr1h	equ	0xFE2
 15764                           fsr1l	equ	0xFE1
 15765                           indf2	equ	0xFDF
 15766                           postinc2	equ	0xFDE
 15767                           postdec2	equ	0xFDD
 15768                           plusw2	equ	0xFDB
 15769                           fsr2h	equ	0xFDA
 15770                           fsr2l	equ	0xFD9
 15771                           status	equ	0xFD8
 15772                           
 15773 ;; *************** function ___wmul *****************
 15774 ;; Defined at:
 15775 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 15776 ;; Parameters:    Size  Location     Type
 15777 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15778 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15779 ;; Auto vars:     Size  Location     Type
 15780 ;;  product         2   32[COMRAM] unsigned int 
 15781 ;; Return value:  Size  Location     Type
 15782 ;;                  2    0[BANK0 ] unsigned int 
 15783 ;; Registers used:
 15784 ;;		wreg, status,2, status,0, prodl, prodh
 15785 ;; Tracked objects:
 15786 ;;		On entry : 0/0
 15787 ;;		On exit  : 0/0
 15788 ;;		Unchanged: 0/0
 15789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15790 ;;      Params:         0       4       0       0       0       0       0       0       0
 15791 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15792 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15793 ;;      Totals:         2       4       0       0       0       0       0       0       0
 15794 ;;Total ram usage:        6 bytes
 15795 ;; Hardware stack levels used:    1
 15796 ;; Hardware stack levels required when called:    3
 15797 ;; This function calls:
 15798 ;;		Nothing
 15799 ;; This function is called by:
 15800 ;;		_get_cluster
 15801 ;;		_put_cluster
 15802 ;;		_fprintf
 15803 ;; This function uses a non-reentrant model
 15804 ;;
 15805                           
 15806                           	psect	text52
 15807  00581E                     __ptext52:
 15808                           	opt stack 0
 15809  00581E                     ___wmul:
 15810                           	opt stack 21
 15811                           
 15812                           ; BSR set to: 0
 15813                           ;incstack = 0
 15814  00581E  0100               	movlb	0	; () banked
 15815  005820  5160               	movf	___wmul@multiplier& (0+255),w,b
 15816  005822  0362               	mulwf	___wmul@multiplicand& (0+255),b
 15817  005824  CFF3 F021          	movff	prodl,___wmul@product
 15818  005828  CFF4 F022          	movff	prodh,___wmul@product+1
 15819  00582C  5160               	movf	___wmul@multiplier& (0+255),w,b
 15820  00582E  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 15821  005830  50F3               	movf	prodl,w,c
 15822  005832  2622               	addwf	___wmul@product+1,f,c
 15823  005834  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 15824  005836  0362               	mulwf	___wmul@multiplicand& (0+255),b
 15825  005838  50F3               	movf	prodl,w,c
 15826  00583A  2622               	addwf	___wmul@product+1,f,c
 15827                           
 15828                           ; BSR set to: 0
 15829  00583C  C021  F060         	movff	___wmul@product,?___wmul
 15830  005840  C022  F061         	movff	___wmul@product+1,?___wmul+1
 15831  005844  0012               	return	
 15832  005846                     __end_of___wmul:
 15833                           	opt stack 0
 15834                           tosu	equ	0xFFF
 15835                           tosh	equ	0xFFE
 15836                           tosl	equ	0xFFD
 15837                           pclath	equ	0xFFA
 15838                           tblptru	equ	0xFF8
 15839                           tblptrh	equ	0xFF7
 15840                           tblptrl	equ	0xFF6
 15841                           tablat	equ	0xFF5
 15842                           prodh	equ	0xFF4
 15843                           prodl	equ	0xFF3
 15844                           intcon	equ	0xFF2
 15845                           intcon2	equ	0xFF1
 15846                           intcon3	equ	0xFF0
 15847                           indf0	equ	0xFEF
 15848                           postinc0	equ	0xFEE
 15849                           fsr0h	equ	0xFEA
 15850                           fsr0l	equ	0xFE9
 15851                           wreg	equ	0xFE8
 15852                           indf1	equ	0xFE7
 15853                           postinc1	equ	0xFE6
 15854                           postdec1	equ	0xFE5
 15855                           fsr1h	equ	0xFE2
 15856                           fsr1l	equ	0xFE1
 15857                           indf2	equ	0xFDF
 15858                           postinc2	equ	0xFDE
 15859                           postdec2	equ	0xFDD
 15860                           plusw2	equ	0xFDB
 15861                           fsr2h	equ	0xFDA
 15862                           fsr2l	equ	0xFD9
 15863                           status	equ	0xFD8
 15864                           
 15865 ;; *************** function ___lldiv *****************
 15866 ;; Defined at:
 15867 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 15868 ;; Parameters:    Size  Location     Type
 15869 ;;  dividend        4    0[BANK0 ] unsigned long 
 15870 ;;  divisor         4    4[BANK0 ] unsigned long 
 15871 ;; Auto vars:     Size  Location     Type
 15872 ;;  quotient        4    8[BANK0 ] unsigned long 
 15873 ;;  counter         1   12[BANK0 ] unsigned char 
 15874 ;; Return value:  Size  Location     Type
 15875 ;;                  4    0[BANK0 ] unsigned long 
 15876 ;; Registers used:
 15877 ;;		wreg, status,2, status,0
 15878 ;; Tracked objects:
 15879 ;;		On entry : 0/0
 15880 ;;		On exit  : 0/0
 15881 ;;		Unchanged: 0/0
 15882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15883 ;;      Params:         0       8       0       0       0       0       0       0       0
 15884 ;;      Locals:         0       5       0       0       0       0       0       0       0
 15885 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15886 ;;      Totals:         0      13       0       0       0       0       0       0       0
 15887 ;;Total ram usage:       13 bytes
 15888 ;; Hardware stack levels used:    1
 15889 ;; Hardware stack levels required when called:    3
 15890 ;; This function calls:
 15891 ;;		Nothing
 15892 ;; This function is called by:
 15893 ;;		_auto_mount
 15894 ;;		_f_lseek
 15895 ;;		_fprintf
 15896 ;; This function uses a non-reentrant model
 15897 ;;
 15898                           
 15899                           	psect	text53
 15900  004EC0                     __ptext53:
 15901                           	opt stack 0
 15902  004EC0                     ___lldiv:
 15903                           	opt stack 22
 15904                           
 15905                           ; BSR set to: 0
 15906                           ;incstack = 0
 15907  004EC0  0E00               	movlw	0
 15908  004EC2  0100               	movlb	0	; () banked
 15909  004EC4  6F68               	movwf	___lldiv@quotient& (0+255),b
 15910  004EC6  0E00               	movlw	0
 15911  004EC8  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 15912  004ECA  0E00               	movlw	0
 15913  004ECC  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 15914  004ECE  0E00               	movlw	0
 15915  004ED0  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 15916                           
 15917                           ; BSR set to: 0
 15918  004ED2  5164               	movf	___lldiv@divisor& (0+255),w,b
 15919  004ED4  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 15920  004ED6  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 15921  004ED8  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 15922  004EDA  B4D8               	btfsc	status,2,c
 15923  004EDC  D02A               	goto	l1747
 15924                           
 15925                           ; BSR set to: 0
 15926  004EDE  0E01               	movlw	1
 15927  004EE0  6F6C               	movwf	___lldiv@counter& (0+255),b
 15928  004EE2  D006               	goto	l1742
 15929  004EE4                     
 15930                           ; BSR set to: 0
 15931                           
 15932                           ; BSR set to: 0
 15933  004EE4  90D8               	bcf	status,0,c
 15934  004EE6  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 15935  004EE8  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 15936  004EEA  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 15937  004EEC  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 15938  004EEE  2B6C               	incf	___lldiv@counter& (0+255),f,b
 15939  004EF0                     l1742:
 15940                           
 15941                           ; BSR set to: 0
 15942                           
 15943                           ; BSR set to: 0
 15944  004EF0  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 15945  004EF2  D7F8               	goto	l1743
 15946  004EF4                     u12200:
 15947                           
 15948                           ; BSR set to: 0
 15949                           
 15950                           ; BSR set to: 0
 15951                           
 15952                           ; BSR set to: 0
 15953  004EF4  90D8               	bcf	status,0,c
 15954  004EF6  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 15955  004EF8  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 15956  004EFA  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 15957  004EFC  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 15958                           
 15959                           ; BSR set to: 0
 15960  004EFE  5164               	movf	___lldiv@divisor& (0+255),w,b
 15961  004F00  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 15962  004F02  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15963  004F04  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 15964  004F06  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15965  004F08  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 15966  004F0A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15967  004F0C  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 15968  004F0E  A0D8               	btfss	status,0,c
 15969  004F10  D009               	goto	l1746
 15970                           
 15971                           ; BSR set to: 0
 15972  004F12  5164               	movf	___lldiv@divisor& (0+255),w,b
 15973  004F14  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 15974  004F16  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15975  004F18  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 15976  004F1A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15977  004F1C  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 15978  004F1E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15979  004F20  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 15980                           
 15981                           ; BSR set to: 0
 15982  004F22  8168               	bsf	___lldiv@quotient& (0+255),0,b
 15983  004F24                     l1746:
 15984                           
 15985                           ; BSR set to: 0
 15986                           
 15987                           ; BSR set to: 0
 15988  004F24  90D8               	bcf	status,0,c
 15989  004F26  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 15990  004F28  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 15991  004F2A  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 15992  004F2C  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 15993                           
 15994                           ; BSR set to: 0
 15995  004F2E  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 15996  004F30  D7E1               	goto	u12200
 15997  004F32                     l1747:
 15998                           
 15999                           ; BSR set to: 0
 16000                           
 16001                           ; BSR set to: 0
 16002  004F32  C068  F060         	movff	___lldiv@quotient,?___lldiv
 16003  004F36  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 16004  004F3A  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 16005  004F3E  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 16006                           
 16007                           ; BSR set to: 0
 16008  004F42  0012               	return		;funcret
 16009  004F44                     __end_of___lldiv:
 16010                           	opt stack 0
 16011                           tosu	equ	0xFFF
 16012                           tosh	equ	0xFFE
 16013                           tosl	equ	0xFFD
 16014                           pclath	equ	0xFFA
 16015                           tblptru	equ	0xFF8
 16016                           tblptrh	equ	0xFF7
 16017                           tblptrl	equ	0xFF6
 16018                           tablat	equ	0xFF5
 16019                           prodh	equ	0xFF4
 16020                           prodl	equ	0xFF3
 16021                           intcon	equ	0xFF2
 16022                           intcon2	equ	0xFF1
 16023                           intcon3	equ	0xFF0
 16024                           indf0	equ	0xFEF
 16025                           postinc0	equ	0xFEE
 16026                           fsr0h	equ	0xFEA
 16027                           fsr0l	equ	0xFE9
 16028                           wreg	equ	0xFE8
 16029                           indf1	equ	0xFE7
 16030                           postinc1	equ	0xFE6
 16031                           postdec1	equ	0xFE5
 16032                           fsr1h	equ	0xFE2
 16033                           fsr1l	equ	0xFE1
 16034                           indf2	equ	0xFDF
 16035                           postinc2	equ	0xFDE
 16036                           postdec2	equ	0xFDD
 16037                           plusw2	equ	0xFDB
 16038                           fsr2h	equ	0xFDA
 16039                           fsr2l	equ	0xFD9
 16040                           status	equ	0xFD8
 16041                           
 16042 ;; *************** function _f_close *****************
 16043 ;; Defined at:
 16044 ;;		line 1108 in file "bibliotecas/tff.c"
 16045 ;; Parameters:    Size  Location     Type
 16046 ;;  fp              2   75[BANK0 ] PTR struct _FIL
 16047 ;;		 -> fil(28), 
 16048 ;; Auto vars:     Size  Location     Type
 16049 ;;  res             1   77[BANK0 ] enum E155
 16050 ;; Return value:  Size  Location     Type
 16051 ;;                  1    wreg      enum E3974
 16052 ;; Registers used:
 16053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16054 ;; Tracked objects:
 16055 ;;		On entry : 0/0
 16056 ;;		On exit  : 0/0
 16057 ;;		Unchanged: 0/0
 16058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16059 ;;      Params:         0       2       0       0       0       0       0       0       0
 16060 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16061 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16062 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16063 ;;Total ram usage:        3 bytes
 16064 ;; Hardware stack levels used:    1
 16065 ;; Hardware stack levels required when called:   11
 16066 ;; This function calls:
 16067 ;;		_f_sync
 16068 ;; This function is called by:
 16069 ;;		_escrita_sdcard
 16070 ;;		_leitura_sdcard
 16071 ;;		_sdcard_init
 16072 ;; This function uses a non-reentrant model
 16073 ;;
 16074                           
 16075                           	psect	text54
 16076  0057F2                     __ptext54:
 16077                           	opt stack 0
 16078  0057F2                     _f_close:
 16079                           	opt stack 16
 16080                           
 16081                           ;tff.c: 1112: FRESULT res;
 16082                           ;tff.c: 1116: res = f_sync(fp);
 16083                           
 16084                           ; BSR set to: 0
 16085                           ;incstack = 0
 16086  0057F2  C0AB  F0A2         	movff	f_close@fp,f_sync@fp
 16087  0057F6  C0AC  F0A3         	movff	f_close@fp+1,f_sync@fp+1
 16088  0057FA  ECA7  F020         	call	_f_sync	;wreg free
 16089  0057FE  0100               	movlb	0	; () banked
 16090  005800  6FAD               	movwf	f_close@res& (0+255),b
 16091                           
 16092                           ; BSR set to: 0
 16093                           ;tff.c: 1120: if (res == FR_OK) fp->fs = (0);
 16094  005802  51AD               	movf	f_close@res& (0+255),w,b
 16095  005804  A4D8               	btfss	status,2,c
 16096  005806  0012               	return	
 16097                           
 16098                           ; BSR set to: 0
 16099  005808  EE20 F004          	lfsr	2,4
 16100  00580C  51AB               	movf	f_close@fp& (0+255),w,b
 16101  00580E  26D9               	addwf	fsr2l,f,c
 16102  005810  51AC               	movf	(f_close@fp+1)& (0+255),w,b
 16103  005812  22DA               	addwfc	fsr2h,f,c
 16104  005814  0E00               	movlw	0
 16105  005816  6EDE               	movwf	postinc2,c
 16106  005818  0E00               	movlw	0
 16107  00581A  6EDD               	movwf	postdec2,c
 16108                           
 16109                           ; BSR set to: 0
 16110  00581C  0012               	return	
 16111  00581E                     __end_of_f_close:
 16112                           	opt stack 0
 16113                           tosu	equ	0xFFF
 16114                           tosh	equ	0xFFE
 16115                           tosl	equ	0xFFD
 16116                           pclath	equ	0xFFA
 16117                           tblptru	equ	0xFF8
 16118                           tblptrh	equ	0xFF7
 16119                           tblptrl	equ	0xFF6
 16120                           tablat	equ	0xFF5
 16121                           prodh	equ	0xFF4
 16122                           prodl	equ	0xFF3
 16123                           intcon	equ	0xFF2
 16124                           intcon2	equ	0xFF1
 16125                           intcon3	equ	0xFF0
 16126                           indf0	equ	0xFEF
 16127                           postinc0	equ	0xFEE
 16128                           fsr0h	equ	0xFEA
 16129                           fsr0l	equ	0xFE9
 16130                           wreg	equ	0xFE8
 16131                           indf1	equ	0xFE7
 16132                           postinc1	equ	0xFE6
 16133                           postdec1	equ	0xFE5
 16134                           fsr1h	equ	0xFE2
 16135                           fsr1l	equ	0xFE1
 16136                           indf2	equ	0xFDF
 16137                           postinc2	equ	0xFDE
 16138                           postdec2	equ	0xFDD
 16139                           plusw2	equ	0xFDB
 16140                           fsr2h	equ	0xFDA
 16141                           fsr2l	equ	0xFD9
 16142                           status	equ	0xFD8
 16143                           
 16144 ;; *************** function _f_sync *****************
 16145 ;; Defined at:
 16146 ;;		line 1069 in file "bibliotecas/tff.c"
 16147 ;; Parameters:    Size  Location     Type
 16148 ;;  fp              2   66[BANK0 ] PTR struct _FIL
 16149 ;;		 -> fil(28), 
 16150 ;; Auto vars:     Size  Location     Type
 16151 ;;  tim             4   68[BANK0 ] unsigned long 
 16152 ;;  dir             2   73[BANK0 ] PTR unsigned char 
 16153 ;;		 -> NULL(0), fs(544), 
 16154 ;;  res             1   72[BANK0 ] enum E155
 16155 ;; Return value:  Size  Location     Type
 16156 ;;                  1    wreg      enum E155
 16157 ;; Registers used:
 16158 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16159 ;; Tracked objects:
 16160 ;;		On entry : 0/0
 16161 ;;		On exit  : 0/0
 16162 ;;		Unchanged: 0/0
 16163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16164 ;;      Params:         0       2       0       0       0       0       0       0       0
 16165 ;;      Locals:         0       7       0       0       0       0       0       0       0
 16166 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16167 ;;      Totals:         0       9       0       0       0       0       0       0       0
 16168 ;;Total ram usage:        9 bytes
 16169 ;; Hardware stack levels used:    1
 16170 ;; Hardware stack levels required when called:   10
 16171 ;; This function calls:
 16172 ;;		_get_fattime
 16173 ;;		_move_window
 16174 ;;		_sync
 16175 ;;		_validate
 16176 ;; This function is called by:
 16177 ;;		_f_close
 16178 ;; This function uses a non-reentrant model
 16179 ;;
 16180                           
 16181                           	psect	text55
 16182  00414E                     __ptext55:
 16183                           	opt stack 0
 16184  00414E                     _f_sync:
 16185                           	opt stack 16
 16186                           
 16187                           ;tff.c: 1073: FRESULT res;
 16188                           ;tff.c: 1074: DWORD tim;
 16189                           ;tff.c: 1075: BYTE *dir;
 16190                           ;tff.c: 1078: res = validate(fp->fs, fp->id);
 16191                           
 16192                           ; BSR set to: 0
 16193                           ;incstack = 0
 16194  00414E  0100               	movlb	0	; () banked
 16195  004150  EE20 F004          	lfsr	2,4
 16196  004154  51A2               	movf	f_sync@fp& (0+255),w,b
 16197  004156  26D9               	addwf	fsr2l,f,c
 16198  004158  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16199  00415A  22DA               	addwfc	fsr2h,f,c
 16200  00415C  CFDE F065          	movff	postinc2,validate@fs
 16201  004160  CFDD F066          	movff	postdec2,validate@fs+1
 16202  004164  C0A2  FFD9         	movff	f_sync@fp,fsr2l
 16203  004168  C0A3  FFDA         	movff	f_sync@fp+1,fsr2h
 16204  00416C  CFDE F067          	movff	postinc2,validate@id
 16205  004170  CFDD F068          	movff	postdec2,validate@id+1
 16206  004174  EC39  F02A         	call	_validate	;wreg free
 16207  004178  0100               	movlb	0	; () banked
 16208  00417A  6FA8               	movwf	f_sync@res& (0+255),b
 16209                           
 16210                           ; BSR set to: 0
 16211                           ;tff.c: 1079: if (res == FR_OK) {
 16212  00417C  51A8               	movf	f_sync@res& (0+255),w,b
 16213  00417E  A4D8               	btfss	status,2,c
 16214  004180  D079               	goto	l1217
 16215                           
 16216                           ; BSR set to: 0
 16217                           ;tff.c: 1080: if (fp->flag & 0x20) {
 16218  004182  EE20 F002          	lfsr	2,2
 16219  004186  51A2               	movf	f_sync@fp& (0+255),w,b
 16220  004188  26D9               	addwf	fsr2l,f,c
 16221  00418A  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16222  00418C  22DA               	addwfc	fsr2h,f,c
 16223  00418E  AADF               	btfss	indf2,5,c
 16224  004190  D071               	goto	l1217
 16225                           
 16226                           ; BSR set to: 0
 16227                           ;tff.c: 1082: if (!move_window(fp->dir_sect))
 16228  004192  EE20 F016          	lfsr	2,22
 16229  004196  51A2               	movf	f_sync@fp& (0+255),w,b
 16230  004198  26D9               	addwf	fsr2l,f,c
 16231  00419A  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16232  00419C  22DA               	addwfc	fsr2h,f,c
 16233  00419E  CFDE F08B          	movff	postinc2,move_window@sector
 16234  0041A2  CFDE F08C          	movff	postinc2,move_window@sector+1
 16235  0041A6  CFDE F08D          	movff	postinc2,move_window@sector+2
 16236  0041AA  CFDE F08E          	movff	postinc2,move_window@sector+3
 16237  0041AE  ECDD  F01B         	call	_move_window	;wreg free
 16238  0041B2  0900               	iorlw	0
 16239  0041B4  A4D8               	btfss	status,2,c
 16240  0041B6  D002               	goto	l1218
 16241                           
 16242                           ;tff.c: 1083: return FR_RW_ERROR;
 16243  0041B8  0E08               	movlw	8
 16244  0041BA  0012               	return	
 16245  0041BC                     l1218:
 16246                           
 16247                           ;tff.c: 1084: dir = fp->dir_ptr;
 16248  0041BC  0100               	movlb	0	; () banked
 16249  0041BE  EE20 F01A          	lfsr	2,26
 16250  0041C2  51A2               	movf	f_sync@fp& (0+255),w,b
 16251  0041C4  26D9               	addwf	fsr2l,f,c
 16252  0041C6  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16253  0041C8  22DA               	addwfc	fsr2h,f,c
 16254  0041CA  CFDE F0A9          	movff	postinc2,f_sync@dir
 16255  0041CE  CFDD F0AA          	movff	postdec2,f_sync@dir+1
 16256                           
 16257                           ;tff.c: 1085: dir[11] |= 0x20;
 16258  0041D2  EE20 F00B          	lfsr	2,11
 16259  0041D6  51A9               	movf	f_sync@dir& (0+255),w,b
 16260  0041D8  26D9               	addwf	fsr2l,f,c
 16261  0041DA  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 16262  0041DC  22DA               	addwfc	fsr2h,f,c
 16263  0041DE  0E00               	movlw	0
 16264  0041E0  8ADB               	bsf	plusw2,5,c
 16265                           
 16266                           ; BSR set to: 0
 16267                           ;tff.c: 1086: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 16268  0041E2  EE20 F00A          	lfsr	2,10
 16269  0041E6  51A2               	movf	f_sync@fp& (0+255),w,b
 16270  0041E8  26D9               	addwf	fsr2l,f,c
 16271  0041EA  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16272  0041EC  22DA               	addwfc	fsr2h,f,c
 16273  0041EE  EE10 F01C          	lfsr	1,28
 16274  0041F2  51A9               	movf	f_sync@dir& (0+255),w,b
 16275  0041F4  26E1               	addwf	fsr1l,f,c
 16276  0041F6  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 16277  0041F8  22E2               	addwfc	fsr1h,f,c
 16278  0041FA  CFDE FFE6          	movff	postinc2,postinc1
 16279  0041FE  CFDE FFE6          	movff	postinc2,postinc1
 16280  004202  CFDE FFE6          	movff	postinc2,postinc1
 16281  004206  CFDE FFE6          	movff	postinc2,postinc1
 16282                           
 16283                           ; BSR set to: 0
 16284                           ;tff.c: 1087: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 16285  00420A  EE20 F00E          	lfsr	2,14
 16286  00420E  51A2               	movf	f_sync@fp& (0+255),w,b
 16287  004210  26D9               	addwf	fsr2l,f,c
 16288  004212  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16289  004214  22DA               	addwfc	fsr2h,f,c
 16290  004216  EE10 F01A          	lfsr	1,26
 16291  00421A  51A9               	movf	f_sync@dir& (0+255),w,b
 16292  00421C  26E1               	addwf	fsr1l,f,c
 16293  00421E  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 16294  004220  22E2               	addwfc	fsr1h,f,c
 16295  004222  CFDE FFE6          	movff	postinc2,postinc1
 16296  004226  CFDD FFE5          	movff	postdec2,postdec1
 16297                           
 16298                           ; BSR set to: 0
 16299                           ;tff.c: 1091: tim = get_fattime();
 16300  00422A  EC3C  F021         	call	_get_fattime	;wreg free
 16301  00422E  C060  F0A4         	movff	?_get_fattime,f_sync@tim
 16302  004232  C061  F0A5         	movff	?_get_fattime+1,f_sync@tim+1
 16303  004236  C062  F0A6         	movff	?_get_fattime+2,f_sync@tim+2
 16304  00423A  C063  F0A7         	movff	?_get_fattime+3,f_sync@tim+3
 16305                           
 16306                           ;tff.c: 1092: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 16307  00423E  0100               	movlb	0	; () banked
 16308  004240  EE20 F016          	lfsr	2,22
 16309  004244  51A9               	movf	f_sync@dir& (0+255),w,b
 16310  004246  26D9               	addwf	fsr2l,f,c
 16311  004248  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 16312  00424A  22DA               	addwfc	fsr2h,f,c
 16313  00424C  C0A4  FFDE         	movff	f_sync@tim,postinc2
 16314  004250  C0A5  FFDE         	movff	f_sync@tim+1,postinc2
 16315  004254  C0A6  FFDE         	movff	f_sync@tim+2,postinc2
 16316  004258  C0A7  FFDE         	movff	f_sync@tim+3,postinc2
 16317                           
 16318                           ; BSR set to: 0
 16319                           ;tff.c: 1093: fp->flag &= (BYTE)~0x20;
 16320  00425C  EE20 F002          	lfsr	2,2
 16321  004260  51A2               	movf	f_sync@fp& (0+255),w,b
 16322  004262  26D9               	addwf	fsr2l,f,c
 16323  004264  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16324  004266  22DA               	addwfc	fsr2h,f,c
 16325  004268  0EDF               	movlw	223
 16326  00426A  16DF               	andwf	indf2,f,c
 16327                           
 16328                           ; BSR set to: 0
 16329                           ;tff.c: 1094: res = sync();
 16330  00426C  ECEB  F028         	call	_sync	;wreg free
 16331  004270  0100               	movlb	0	; () banked
 16332  004272  6FA8               	movwf	f_sync@res& (0+255),b
 16333  004274                     l1217:
 16334                           
 16335                           ; BSR set to: 0
 16336                           ;tff.c: 1095: }
 16337                           ;tff.c: 1096: }
 16338                           ;tff.c: 1097: return res;
 16339                           
 16340                           ; BSR set to: 0
 16341                           
 16342                           ; BSR set to: 0
 16343  004274  51A8               	movf	f_sync@res& (0+255),w,b
 16344  004276  0012               	return	
 16345  004278                     __end_of_f_sync:
 16346                           	opt stack 0
 16347                           tosu	equ	0xFFF
 16348                           tosh	equ	0xFFE
 16349                           tosl	equ	0xFFD
 16350                           pclath	equ	0xFFA
 16351                           tblptru	equ	0xFF8
 16352                           tblptrh	equ	0xFF7
 16353                           tblptrl	equ	0xFF6
 16354                           tablat	equ	0xFF5
 16355                           prodh	equ	0xFF4
 16356                           prodl	equ	0xFF3
 16357                           intcon	equ	0xFF2
 16358                           intcon2	equ	0xFF1
 16359                           intcon3	equ	0xFF0
 16360                           indf0	equ	0xFEF
 16361                           postinc0	equ	0xFEE
 16362                           fsr0h	equ	0xFEA
 16363                           fsr0l	equ	0xFE9
 16364                           wreg	equ	0xFE8
 16365                           indf1	equ	0xFE7
 16366                           postinc1	equ	0xFE6
 16367                           postdec1	equ	0xFE5
 16368                           fsr1h	equ	0xFE2
 16369                           fsr1l	equ	0xFE1
 16370                           indf2	equ	0xFDF
 16371                           postinc2	equ	0xFDE
 16372                           postdec2	equ	0xFDD
 16373                           plusw2	equ	0xFDB
 16374                           fsr2h	equ	0xFDA
 16375                           fsr2l	equ	0xFD9
 16376                           status	equ	0xFD8
 16377                           
 16378 ;; *************** function _validate *****************
 16379 ;; Defined at:
 16380 ;;		line 766 in file "bibliotecas/tff.c"
 16381 ;; Parameters:    Size  Location     Type
 16382 ;;  fs              2    5[BANK0 ] PTR const struct _FATFS
 16383 ;;		 -> NULL(0), fs(544), 
 16384 ;;  id              2    7[BANK0 ] unsigned short 
 16385 ;; Auto vars:     Size  Location     Type
 16386 ;;		None
 16387 ;; Return value:  Size  Location     Type
 16388 ;;                  1    wreg      enum E155
 16389 ;; Registers used:
 16390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16391 ;; Tracked objects:
 16392 ;;		On entry : 0/0
 16393 ;;		On exit  : 0/0
 16394 ;;		Unchanged: 0/0
 16395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16396 ;;      Params:         0       4       0       0       0       0       0       0       0
 16397 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16398 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16399 ;;      Totals:         0       6       0       0       0       0       0       0       0
 16400 ;;Total ram usage:        6 bytes
 16401 ;; Hardware stack levels used:    1
 16402 ;; Hardware stack levels required when called:    5
 16403 ;; This function calls:
 16404 ;;		_disk_status
 16405 ;; This function is called by:
 16406 ;;		_f_read
 16407 ;;		_f_write
 16408 ;;		_f_sync
 16409 ;;		_f_lseek
 16410 ;;		_f_readdir
 16411 ;; This function uses a non-reentrant model
 16412 ;;
 16413                           
 16414                           	psect	text56
 16415  005472                     __ptext56:
 16416                           	opt stack 0
 16417  005472                     _validate:
 16418                           	opt stack 20
 16419                           
 16420                           ;tff.c: 771: if (!fs || !fs->fs_type || fs->id != id)
 16421                           
 16422                           ;incstack = 0
 16423  005472  0100               	movlb	0	; () banked
 16424  005474  5165               	movf	validate@fs& (0+255),w,b
 16425  005476  1166               	iorwf	(validate@fs+1)& (0+255),w,b
 16426  005478  B4D8               	btfsc	status,2,c
 16427  00547A  D014               	goto	u11010
 16428                           
 16429                           ; BSR set to: 0
 16430  00547C  EE20 F01C          	lfsr	2,28
 16431  005480  5165               	movf	validate@fs& (0+255),w,b
 16432  005482  26D9               	addwf	fsr2l,f,c
 16433  005484  5166               	movf	(validate@fs+1)& (0+255),w,b
 16434  005486  22DA               	addwfc	fsr2h,f,c
 16435  005488  50DF               	movf	indf2,w,c
 16436  00548A  B4D8               	btfsc	status,2,c
 16437  00548C  D00B               	goto	u11010
 16438                           
 16439                           ; BSR set to: 0
 16440  00548E  C065  FFD9         	movff	validate@fs,fsr2l
 16441  005492  C066  FFDA         	movff	validate@fs+1,fsr2h
 16442  005496  5167               	movf	validate@id& (0+255),w,b
 16443  005498  18DE               	xorwf	postinc2,w,c
 16444  00549A  E104               	bnz	l9240
 16445  00549C  5168               	movf	(validate@id+1)& (0+255),w,b
 16446  00549E  18DE               	xorwf	postinc2,w,c
 16447  0054A0  B4D8               	btfsc	status,2,c
 16448  0054A2  D002               	goto	l1121
 16449  0054A4                     u11010:
 16450  0054A4                     l9240:
 16451                           
 16452                           ; BSR set to: 0
 16453                           ;tff.c: 772: return FR_INVALID_OBJECT;
 16454  0054A4  0E0C               	movlw	12
 16455                           
 16456                           ; BSR set to: 0
 16457  0054A6  0012               	return	
 16458  0054A8                     l1121:
 16459                           
 16460                           ; BSR set to: 0
 16461                           ;tff.c: 773: if (disk_status(0) & 0x01)
 16462                           
 16463                           ; BSR set to: 0
 16464  0054A8  0E00               	movlw	0
 16465  0054AA  EC83  F02A         	call	_disk_status
 16466  0054AE  0100               	movlb	0	; () banked
 16467  0054B0  6F69               	movwf	??_validate& (0+255),b
 16468  0054B2  A169               	btfss	??_validate& (0+255),0,b
 16469  0054B4  D002               	goto	l1125
 16470                           
 16471                           ; BSR set to: 0
 16472                           ;tff.c: 774: return FR_NOT_READY;
 16473  0054B6  0E01               	movlw	1
 16474                           
 16475                           ; BSR set to: 0
 16476  0054B8  0012               	return	
 16477  0054BA                     l1125:
 16478                           
 16479                           ; BSR set to: 0
 16480                           ;tff.c: 776: return FR_OK;
 16481                           
 16482                           ; BSR set to: 0
 16483  0054BA  0E00               	movlw	0
 16484  0054BC  0012               	return	
 16485  0054BE                     __end_of_validate:
 16486                           	opt stack 0
 16487                           tosu	equ	0xFFF
 16488                           tosh	equ	0xFFE
 16489                           tosl	equ	0xFFD
 16490                           pclath	equ	0xFFA
 16491                           tblptru	equ	0xFF8
 16492                           tblptrh	equ	0xFF7
 16493                           tblptrl	equ	0xFF6
 16494                           tablat	equ	0xFF5
 16495                           prodh	equ	0xFF4
 16496                           prodl	equ	0xFF3
 16497                           intcon	equ	0xFF2
 16498                           intcon2	equ	0xFF1
 16499                           intcon3	equ	0xFF0
 16500                           indf0	equ	0xFEF
 16501                           postinc0	equ	0xFEE
 16502                           fsr0h	equ	0xFEA
 16503                           fsr0l	equ	0xFE9
 16504                           wreg	equ	0xFE8
 16505                           indf1	equ	0xFE7
 16506                           postinc1	equ	0xFE6
 16507                           postdec1	equ	0xFE5
 16508                           fsr1h	equ	0xFE2
 16509                           fsr1l	equ	0xFE1
 16510                           indf2	equ	0xFDF
 16511                           postinc2	equ	0xFDE
 16512                           postdec2	equ	0xFDD
 16513                           plusw2	equ	0xFDB
 16514                           fsr2h	equ	0xFDA
 16515                           fsr2l	equ	0xFD9
 16516                           status	equ	0xFD8
 16517                           
 16518 ;; *************** function _disk_status *****************
 16519 ;; Defined at:
 16520 ;;		line 27 in file "bibliotecas/diskio.c"
 16521 ;; Parameters:    Size  Location     Type
 16522 ;;  pdrv            1    wreg     unsigned char 
 16523 ;; Auto vars:     Size  Location     Type
 16524 ;;  pdrv            1    3[BANK0 ] unsigned char 
 16525 ;;  result          2    1[BANK0 ] int 
 16526 ;;  stat            1    4[BANK0 ] unsigned char 
 16527 ;; Return value:  Size  Location     Type
 16528 ;;                  1    wreg      unsigned char 
 16529 ;; Registers used:
 16530 ;;		wreg, status,2, status,0, cstack
 16531 ;; Tracked objects:
 16532 ;;		On entry : 0/0
 16533 ;;		On exit  : 0/0
 16534 ;;		Unchanged: 0/0
 16535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16536 ;;      Params:         0       0       0       0       0       0       0       0       0
 16537 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16538 ;;      Temps:          0       1       0       0       0       0       0       0       0
 16539 ;;      Totals:         0       5       0       0       0       0       0       0       0
 16540 ;;Total ram usage:        5 bytes
 16541 ;; Hardware stack levels used:    1
 16542 ;; Hardware stack levels required when called:    4
 16543 ;; This function calls:
 16544 ;;		_sdc_disk_status
 16545 ;; This function is called by:
 16546 ;;		_auto_mount
 16547 ;;		_validate
 16548 ;; This function uses a non-reentrant model
 16549 ;;
 16550                           
 16551                           	psect	text57
 16552  005506                     __ptext57:
 16553                           	opt stack 0
 16554  005506                     _disk_status:
 16555                           	opt stack 20
 16556                           
 16557                           ; BSR set to: 0
 16558                           ;incstack = 0
 16559                           ;disk_status@pdrv stored from wreg
 16560  005506  0100               	movlb	0	; () banked
 16561  005508  6F63               	movwf	disk_status@pdrv& (0+255),b
 16562                           
 16563                           ;diskio.c: 31: DSTATUS stat;
 16564                           ;diskio.c: 32: int result;
 16565                           ;diskio.c: 34: switch (pdrv) {
 16566  00550A  D014               	goto	l403
 16567  00550C                     
 16568                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 16569  00550C  0100               	movlb	0	; () banked
 16570  00550E  5163               	movf	disk_status@pdrv& (0+255),w,b
 16571  005510  ECA0  F02C         	call	_sdc_disk_status
 16572  005514  0100               	movlb	0	; () banked
 16573  005516  6F64               	movwf	disk_status@stat& (0+255),b
 16574                           
 16575                           ; BSR set to: 0
 16576                           ;diskio.c: 39: return stat;
 16577  005518  5164               	movf	disk_status@stat& (0+255),w,b
 16578                           
 16579                           ; BSR set to: 0
 16580  00551A  0012               	return	
 16581  00551C                     
 16582                           ; BSR set to: 0
 16583                           ;diskio.c: 42: result = sdc_disk_status(pdrv);
 16584                           
 16585                           ; BSR set to: 0
 16586  00551C  5163               	movf	disk_status@pdrv& (0+255),w,b
 16587  00551E  ECA0  F02C         	call	_sdc_disk_status
 16588  005522  0100               	movlb	0	; () banked
 16589  005524  6F60               	movwf	??_disk_status& (0+255),b
 16590  005526  5160               	movf	??_disk_status& (0+255),w,b
 16591  005528  6F61               	movwf	disk_status@result& (0+255),b
 16592  00552A  6B62               	clrf	(disk_status@result+1)& (0+255),b
 16593                           
 16594                           ; BSR set to: 0
 16595                           ;diskio.c: 44: return stat;
 16596  00552C  5164               	movf	disk_status@stat& (0+255),w,b
 16597                           
 16598                           ; BSR set to: 0
 16599  00552E  0012               	return	
 16600  005530                     
 16601                           ; BSR set to: 0
 16602                           ;diskio.c: 48: return stat;
 16603                           
 16604                           ; BSR set to: 0
 16605  005530  5164               	movf	disk_status@stat& (0+255),w,b
 16606                           
 16607                           ; BSR set to: 0
 16608  005532  0012               	return	
 16609  005534                     l403:
 16610                           
 16611                           ; BSR set to: 0
 16612  005534  0100               	movlb	0	; () banked
 16613  005536  5163               	movf	disk_status@pdrv& (0+255),w,b
 16614                           
 16615                           ; Switch size 1, requested type "space"
 16616                           ; Number of cases is 3, Range of values is 0 to 2
 16617                           ; switch strategies available:
 16618                           ; Name         Instructions Cycles
 16619                           ; simple_byte           10     6 (average)
 16620                           ;	Chosen strategy is simple_byte
 16621  005538  0A00               	xorlw	0	; case 0
 16622  00553A  B4D8               	btfsc	status,2,c
 16623  00553C  D7E7               	goto	l404
 16624  00553E  0A01               	xorlw	1	; case 1
 16625  005540  B4D8               	btfsc	status,2,c
 16626  005542  D7EC               	goto	l406
 16627  005544  0A03               	xorlw	3	; case 2
 16628  005546  B4D8               	btfsc	status,2,c
 16629  005548  D7F3               	goto	l407
 16630                           
 16631                           ; BSR set to: 0
 16632                           ;diskio.c: 50: return 0x01;
 16633                           
 16634                           ; BSR set to: 0
 16635  00554A  0E01               	movlw	1
 16636  00554C  0012               	return	
 16637  00554E                     __end_of_disk_status:
 16638                           	opt stack 0
 16639                           tosu	equ	0xFFF
 16640                           tosh	equ	0xFFE
 16641                           tosl	equ	0xFFD
 16642                           pclath	equ	0xFFA
 16643                           tblptru	equ	0xFF8
 16644                           tblptrh	equ	0xFF7
 16645                           tblptrl	equ	0xFF6
 16646                           tablat	equ	0xFF5
 16647                           prodh	equ	0xFF4
 16648                           prodl	equ	0xFF3
 16649                           intcon	equ	0xFF2
 16650                           intcon2	equ	0xFF1
 16651                           intcon3	equ	0xFF0
 16652                           indf0	equ	0xFEF
 16653                           postinc0	equ	0xFEE
 16654                           fsr0h	equ	0xFEA
 16655                           fsr0l	equ	0xFE9
 16656                           wreg	equ	0xFE8
 16657                           indf1	equ	0xFE7
 16658                           postinc1	equ	0xFE6
 16659                           postdec1	equ	0xFE5
 16660                           fsr1h	equ	0xFE2
 16661                           fsr1l	equ	0xFE1
 16662                           indf2	equ	0xFDF
 16663                           postinc2	equ	0xFDE
 16664                           postdec2	equ	0xFDD
 16665                           plusw2	equ	0xFDB
 16666                           fsr2h	equ	0xFDA
 16667                           fsr2l	equ	0xFD9
 16668                           status	equ	0xFD8
 16669                           
 16670 ;; *************** function _sdc_disk_status *****************
 16671 ;; Defined at:
 16672 ;;		line 588 in file "bibliotecas/diskio.c"
 16673 ;; Parameters:    Size  Location     Type
 16674 ;;  pdrv            1    wreg     unsigned char 
 16675 ;; Auto vars:     Size  Location     Type
 16676 ;;  pdrv            1   33[COMRAM] unsigned char 
 16677 ;;  stat            1   32[COMRAM] unsigned char 
 16678 ;;  cont            1    0        unsigned char 
 16679 ;;  buff            1    0        unsigned char 
 16680 ;; Return value:  Size  Location     Type
 16681 ;;                  1    wreg      unsigned char 
 16682 ;; Registers used:
 16683 ;;		wreg, status,2
 16684 ;; Tracked objects:
 16685 ;;		On entry : 0/0
 16686 ;;		On exit  : 0/0
 16687 ;;		Unchanged: 0/0
 16688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16689 ;;      Params:         0       0       0       0       0       0       0       0       0
 16690 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16691 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16692 ;;      Totals:         2       0       0       0       0       0       0       0       0
 16693 ;;Total ram usage:        2 bytes
 16694 ;; Hardware stack levels used:    1
 16695 ;; Hardware stack levels required when called:    3
 16696 ;; This function calls:
 16697 ;;		Nothing
 16698 ;; This function is called by:
 16699 ;;		_disk_status
 16700 ;; This function uses a non-reentrant model
 16701 ;;
 16702                           
 16703                           	psect	text58
 16704  005940                     __ptext58:
 16705                           	opt stack 0
 16706  005940                     _sdc_disk_status:
 16707                           	opt stack 20
 16708                           
 16709                           ; BSR set to: 0
 16710                           ;incstack = 0
 16711                           ;sdc_disk_status@pdrv stored from wreg
 16712  005940  6E22               	movwf	sdc_disk_status@pdrv,c
 16713                           
 16714                           ;diskio.c: 590: DSTATUS stat = 0;
 16715  005942  0E00               	movlw	0
 16716  005944  6E21               	movwf	sdc_disk_status@stat,c
 16717                           
 16718                           ;diskio.c: 591: unsigned char buff, cont;
 16719                           ;diskio.c: 593: if (pdrv != 0) return 0x01;
 16720  005946  5022               	movf	sdc_disk_status@pdrv,w,c
 16721  005948  B4D8               	btfsc	status,2,c
 16722  00594A  D002               	goto	l529
 16723  00594C  0E01               	movlw	1
 16724  00594E  0012               	return	
 16725  005950                     l529:
 16726                           
 16727                           ;diskio.c: 595: return FR_OK;
 16728  005950  0E00               	movlw	0
 16729  005952  0012               	return	
 16730  005954                     __end_of_sdc_disk_status:
 16731                           	opt stack 0
 16732                           tosu	equ	0xFFF
 16733                           tosh	equ	0xFFE
 16734                           tosl	equ	0xFFD
 16735                           pclath	equ	0xFFA
 16736                           tblptru	equ	0xFF8
 16737                           tblptrh	equ	0xFF7
 16738                           tblptrl	equ	0xFF6
 16739                           tablat	equ	0xFF5
 16740                           prodh	equ	0xFF4
 16741                           prodl	equ	0xFF3
 16742                           intcon	equ	0xFF2
 16743                           intcon2	equ	0xFF1
 16744                           intcon3	equ	0xFF0
 16745                           indf0	equ	0xFEF
 16746                           postinc0	equ	0xFEE
 16747                           fsr0h	equ	0xFEA
 16748                           fsr0l	equ	0xFE9
 16749                           wreg	equ	0xFE8
 16750                           indf1	equ	0xFE7
 16751                           postinc1	equ	0xFE6
 16752                           postdec1	equ	0xFE5
 16753                           fsr1h	equ	0xFE2
 16754                           fsr1l	equ	0xFE1
 16755                           indf2	equ	0xFDF
 16756                           postinc2	equ	0xFDE
 16757                           postdec2	equ	0xFDD
 16758                           plusw2	equ	0xFDB
 16759                           fsr2h	equ	0xFDA
 16760                           fsr2l	equ	0xFD9
 16761                           status	equ	0xFD8
 16762                           
 16763 ;; *************** function _sync *****************
 16764 ;; Defined at:
 16765 ;;		line 118 in file "bibliotecas/tff.c"
 16766 ;; Parameters:    Size  Location     Type
 16767 ;;		None
 16768 ;; Auto vars:     Size  Location     Type
 16769 ;;  fs              2   64[BANK0 ] PTR struct _FATFS
 16770 ;;		 -> NULL(0), fs(544), 
 16771 ;; Return value:  Size  Location     Type
 16772 ;;                  1    wreg      enum E155
 16773 ;; Registers used:
 16774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16775 ;; Tracked objects:
 16776 ;;		On entry : 0/0
 16777 ;;		On exit  : 0/0
 16778 ;;		Unchanged: 0/0
 16779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16780 ;;      Params:         0       0       0       0       0       0       0       0       0
 16781 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16782 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16783 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16784 ;;Total ram usage:        2 bytes
 16785 ;; Hardware stack levels used:    1
 16786 ;; Hardware stack levels required when called:    9
 16787 ;; This function calls:
 16788 ;;		_disk_ioctl
 16789 ;;		_move_window
 16790 ;; This function is called by:
 16791 ;;		_f_sync
 16792 ;; This function uses a non-reentrant model
 16793 ;;
 16794                           
 16795                           	psect	text59
 16796  0051D6                     __ptext59:
 16797                           	opt stack 0
 16798  0051D6                     _sync:
 16799                           	opt stack 16
 16800                           
 16801                           ;tff.c: 120: FATFS *fs = FatFs;
 16802                           
 16803                           ;incstack = 0
 16804  0051D6  C0FD  F0A0         	movff	_FatFs,sync@fs
 16805  0051DA  C0FE  F0A1         	movff	_FatFs+1,sync@fs+1
 16806                           
 16807                           ;tff.c: 123: fs->winflag = 1;
 16808  0051DE  0100               	movlb	0	; () banked
 16809  0051E0  EE20 F01F          	lfsr	2,31
 16810  0051E4  51A0               	movf	sync@fs& (0+255),w,b
 16811  0051E6  26D9               	addwf	fsr2l,f,c
 16812  0051E8  51A1               	movf	(sync@fs+1)& (0+255),w,b
 16813  0051EA  22DA               	addwfc	fsr2h,f,c
 16814  0051EC  0E01               	movlw	1
 16815  0051EE  6EDF               	movwf	indf2,c
 16816                           
 16817                           ; BSR set to: 0
 16818                           ;tff.c: 124: if (!move_window(0)) return FR_RW_ERROR;
 16819  0051F0  0E00               	movlw	0
 16820  0051F2  6F8B               	movwf	move_window@sector& (0+255),b
 16821  0051F4  0E00               	movlw	0
 16822  0051F6  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 16823  0051F8  0E00               	movlw	0
 16824  0051FA  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 16825  0051FC  0E00               	movlw	0
 16826  0051FE  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 16827  005200  ECDD  F01B         	call	_move_window	;wreg free
 16828  005204  0900               	iorlw	0
 16829  005206  A4D8               	btfss	status,2,c
 16830  005208  D002               	goto	l900
 16831  00520A  0E08               	movlw	8
 16832  00520C  0012               	return	
 16833  00520E                     l900:
 16834                           
 16835                           ;tff.c: 140: if (disk_ioctl(0, 0, (0)) != RES_OK)
 16836  00520E  0E00               	movlw	0
 16837  005210  0100               	movlb	0	; () banked
 16838  005212  6F60               	movwf	disk_ioctl@cmd& (0+255),b
 16839  005214  0E00               	movlw	0
 16840  005216  6F61               	movwf	disk_ioctl@buff& (0+255),b
 16841  005218  0E00               	movlw	0
 16842  00521A  6F62               	movwf	(disk_ioctl@buff+1)& (0+255),b
 16843  00521C  0E00               	movlw	0
 16844  00521E  EC23  F02C         	call	_disk_ioctl
 16845  005222  0900               	iorlw	0
 16846  005224  B4D8               	btfsc	status,2,c
 16847  005226  D002               	goto	l902
 16848                           
 16849                           ;tff.c: 141: return FR_RW_ERROR;
 16850  005228  0E08               	movlw	8
 16851  00522A  0012               	return	
 16852  00522C                     l902:
 16853                           
 16854                           ;tff.c: 142: return FR_OK;
 16855  00522C  0E00               	movlw	0
 16856  00522E  0012               	return	
 16857  005230                     __end_of_sync:
 16858                           	opt stack 0
 16859                           tosu	equ	0xFFF
 16860                           tosh	equ	0xFFE
 16861                           tosl	equ	0xFFD
 16862                           pclath	equ	0xFFA
 16863                           tblptru	equ	0xFF8
 16864                           tblptrh	equ	0xFF7
 16865                           tblptrl	equ	0xFF6
 16866                           tablat	equ	0xFF5
 16867                           prodh	equ	0xFF4
 16868                           prodl	equ	0xFF3
 16869                           intcon	equ	0xFF2
 16870                           intcon2	equ	0xFF1
 16871                           intcon3	equ	0xFF0
 16872                           indf0	equ	0xFEF
 16873                           postinc0	equ	0xFEE
 16874                           fsr0h	equ	0xFEA
 16875                           fsr0l	equ	0xFE9
 16876                           wreg	equ	0xFE8
 16877                           indf1	equ	0xFE7
 16878                           postinc1	equ	0xFE6
 16879                           postdec1	equ	0xFE5
 16880                           fsr1h	equ	0xFE2
 16881                           fsr1l	equ	0xFE1
 16882                           indf2	equ	0xFDF
 16883                           postinc2	equ	0xFDE
 16884                           postdec2	equ	0xFDD
 16885                           plusw2	equ	0xFDB
 16886                           fsr2h	equ	0xFDA
 16887                           fsr2l	equ	0xFD9
 16888                           status	equ	0xFD8
 16889                           
 16890 ;; *************** function _move_window *****************
 16891 ;; Defined at:
 16892 ;;		line 76 in file "bibliotecas/tff.c"
 16893 ;; Parameters:    Size  Location     Type
 16894 ;;  sector          4   43[BANK0 ] unsigned long 
 16895 ;; Auto vars:     Size  Location     Type
 16896 ;;  n               1   57[BANK0 ] unsigned char 
 16897 ;;  wsect           4   58[BANK0 ] unsigned long 
 16898 ;;  fs              2   62[BANK0 ] PTR struct _FATFS
 16899 ;;		 -> NULL(0), fs(544), 
 16900 ;; Return value:  Size  Location     Type
 16901 ;;                  1    wreg      enum E105
 16902 ;; Registers used:
 16903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16904 ;; Tracked objects:
 16905 ;;		On entry : 0/0
 16906 ;;		On exit  : 0/0
 16907 ;;		Unchanged: 0/0
 16908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16909 ;;      Params:         0       4       0       0       0       0       0       0       0
 16910 ;;      Locals:         0       7       0       0       0       0       0       0       0
 16911 ;;      Temps:          0      10       0       0       0       0       0       0       0
 16912 ;;      Totals:         0      21       0       0       0       0       0       0       0
 16913 ;;Total ram usage:       21 bytes
 16914 ;; Hardware stack levels used:    1
 16915 ;; Hardware stack levels required when called:    8
 16916 ;; This function calls:
 16917 ;;		_disk_read
 16918 ;;		_disk_write
 16919 ;; This function is called by:
 16920 ;;		_sync
 16921 ;;		_get_cluster
 16922 ;;		_put_cluster
 16923 ;;		_trace_path
 16924 ;;		_reserve_direntry
 16925 ;;		_f_open
 16926 ;;		_f_read
 16927 ;;		_f_write
 16928 ;;		_f_sync
 16929 ;;		_f_readdir
 16930 ;; This function uses a non-reentrant model
 16931 ;;
 16932                           
 16933                           	psect	text60
 16934  0037BA                     __ptext60:
 16935                           	opt stack 0
 16936  0037BA                     _move_window:
 16937                           	opt stack 17
 16938                           
 16939                           ;tff.c: 80: DWORD wsect;
 16940                           ;tff.c: 81: FATFS *fs = FatFs;
 16941                           
 16942                           ;incstack = 0
 16943  0037BA  C0FD  F09E         	movff	_FatFs,move_window@fs
 16944  0037BE  C0FE  F09F         	movff	_FatFs+1,move_window@fs+1
 16945                           
 16946                           ;tff.c: 84: wsect = fs->winsect;
 16947  0037C2  0100               	movlb	0	; () banked
 16948  0037C4  EE20 F004          	lfsr	2,4
 16949  0037C8  519E               	movf	move_window@fs& (0+255),w,b
 16950  0037CA  26D9               	addwf	fsr2l,f,c
 16951  0037CC  519F               	movf	(move_window@fs+1)& (0+255),w,b
 16952  0037CE  22DA               	addwfc	fsr2h,f,c
 16953  0037D0  CFDE F09A          	movff	postinc2,move_window@wsect
 16954  0037D4  CFDE F09B          	movff	postinc2,move_window@wsect+1
 16955  0037D8  CFDE F09C          	movff	postinc2,move_window@wsect+2
 16956  0037DC  CFDE F09D          	movff	postinc2,move_window@wsect+3
 16957                           
 16958                           ; BSR set to: 0
 16959                           ;tff.c: 85: if (wsect != sector) {
 16960  0037E0  518B               	movf	move_window@sector& (0+255),w,b
 16961  0037E2  199A               	xorwf	move_window@wsect& (0+255),w,b
 16962  0037E4  E10A               	bnz	u10490
 16963  0037E6  518C               	movf	(move_window@sector+1)& (0+255),w,b
 16964  0037E8  199B               	xorwf	(move_window@wsect+1)& (0+255),w,b
 16965  0037EA  E107               	bnz	u10490
 16966  0037EC  518D               	movf	(move_window@sector+2)& (0+255),w,b
 16967  0037EE  199C               	xorwf	(move_window@wsect+2)& (0+255),w,b
 16968  0037F0  E104               	bnz	u10490
 16969  0037F2  518E               	movf	(move_window@sector+3)& (0+255),w,b
 16970  0037F4  199D               	xorwf	(move_window@wsect+3)& (0+255),w,b
 16971  0037F6  B4D8               	btfsc	status,2,c
 16972  0037F8  D0B9               	goto	l896
 16973  0037FA                     u10490:
 16974                           
 16975                           ; BSR set to: 0
 16976                           ;tff.c: 87: BYTE n;
 16977                           ;tff.c: 88: if (fs->winflag) {
 16978  0037FA  EE20 F01F          	lfsr	2,31
 16979  0037FE  519E               	movf	move_window@fs& (0+255),w,b
 16980  003800  26D9               	addwf	fsr2l,f,c
 16981  003802  519F               	movf	(move_window@fs+1)& (0+255),w,b
 16982  003804  22DA               	addwfc	fsr2h,f,c
 16983  003806  50DF               	movf	indf2,w,c
 16984  003808  B4D8               	btfsc	status,2,c
 16985  00380A  D083               	goto	u10540
 16986                           
 16987                           ; BSR set to: 0
 16988                           ;tff.c: 89: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 16989  00380C  0E20               	movlw	32
 16990  00380E  259E               	addwf	move_window@fs& (0+255),w,b
 16991  003810  6F7F               	movwf	disk_write@buff& (0+255),b
 16992  003812  0E00               	movlw	0
 16993  003814  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 16994  003816  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 16995  003818  C09A  F081         	movff	move_window@wsect,disk_write@sector
 16996  00381C  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 16997  003820  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 16998  003824  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 16999  003828  0E01               	movlw	1
 17000  00382A  6F85               	movwf	disk_write@count& (0+255),b
 17001  00382C  0E00               	movlw	0
 17002  00382E  EC55  F026         	call	_disk_write
 17003  003832  0900               	iorlw	0
 17004  003834  B4D8               	btfsc	status,2,c
 17005  003836  D002               	goto	l891
 17006                           
 17007                           ;tff.c: 90: return FALSE;
 17008  003838  0E00               	movlw	0
 17009  00383A  0012               	return	
 17010  00383C                     l891:
 17011                           
 17012                           ;tff.c: 91: fs->winflag = 0;
 17013  00383C  0100               	movlb	0	; () banked
 17014  00383E  EE20 F01F          	lfsr	2,31
 17015  003842  519E               	movf	move_window@fs& (0+255),w,b
 17016  003844  26D9               	addwf	fsr2l,f,c
 17017  003846  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17018  003848  22DA               	addwfc	fsr2h,f,c
 17019  00384A  0E00               	movlw	0
 17020  00384C  6EDF               	movwf	indf2,c
 17021                           
 17022                           ;tff.c: 92: if (wsect < (fs->fatbase + fs->sects_fat)) {
 17023  00384E  EE20 F008          	lfsr	2,8
 17024  003852  519E               	movf	move_window@fs& (0+255),w,b
 17025  003854  26D9               	addwf	fsr2l,f,c
 17026  003856  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17027  003858  22DA               	addwfc	fsr2h,f,c
 17028  00385A  CFDE F08F          	movff	postinc2,??_move_window
 17029  00385E  CFDE F090          	movff	postinc2,??_move_window+1
 17030  003862  CFDE F091          	movff	postinc2,??_move_window+2
 17031  003866  CFDE F092          	movff	postinc2,??_move_window+3
 17032  00386A  EE20 F014          	lfsr	2,20
 17033  00386E  519E               	movf	move_window@fs& (0+255),w,b
 17034  003870  26D9               	addwf	fsr2l,f,c
 17035  003872  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17036  003874  22DA               	addwfc	fsr2h,f,c
 17037  003876  CFDE F093          	movff	postinc2,??_move_window+4
 17038  00387A  CFDD F094          	movff	postdec2,??_move_window+5
 17039  00387E  5193               	movf	(??_move_window+4)& (0+255),w,b
 17040  003880  258F               	addwf	??_move_window& (0+255),w,b
 17041  003882  6F95               	movwf	(??_move_window+6)& (0+255),b
 17042  003884  5194               	movf	(??_move_window+5)& (0+255),w,b
 17043  003886  2190               	addwfc	(??_move_window+1)& (0+255),w,b
 17044  003888  6F96               	movwf	(??_move_window+7)& (0+255),b
 17045  00388A  0E00               	movlw	0
 17046  00388C  2191               	addwfc	(??_move_window+2)& (0+255),w,b
 17047  00388E  6F97               	movwf	(??_move_window+8)& (0+255),b
 17048  003890  0E00               	movlw	0
 17049  003892  2192               	addwfc	(??_move_window+3)& (0+255),w,b
 17050  003894  6F98               	movwf	(??_move_window+9)& (0+255),b
 17051  003896  5195               	movf	(??_move_window+6)& (0+255),w,b
 17052  003898  5D9A               	subwf	move_window@wsect& (0+255),w,b
 17053  00389A  5196               	movf	(??_move_window+7)& (0+255),w,b
 17054  00389C  599B               	subwfb	(move_window@wsect+1)& (0+255),w,b
 17055  00389E  5197               	movf	(??_move_window+8)& (0+255),w,b
 17056  0038A0  599C               	subwfb	(move_window@wsect+2)& (0+255),w,b
 17057  0038A2  5198               	movf	(??_move_window+9)& (0+255),w,b
 17058  0038A4  599D               	subwfb	(move_window@wsect+3)& (0+255),w,b
 17059  0038A6  B0D8               	btfsc	status,0,c
 17060  0038A8  D034               	goto	u10540
 17061                           
 17062                           ; BSR set to: 0
 17063                           ;tff.c: 93: for (n = fs->n_fats; n >= 2; n--) {
 17064  0038AA  EE20 F01E          	lfsr	2,30
 17065  0038AE  519E               	movf	move_window@fs& (0+255),w,b
 17066  0038B0  26D9               	addwf	fsr2l,f,c
 17067  0038B2  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17068  0038B4  22DA               	addwfc	fsr2h,f,c
 17069  0038B6  50DF               	movf	indf2,w,c
 17070  0038B8  6F99               	movwf	move_window@n& (0+255),b
 17071  0038BA                     l8902:
 17072                           
 17073                           ; BSR set to: 0
 17074  0038BA  0E02               	movlw	2
 17075  0038BC  6199               	cpfslt	move_window@n& (0+255),b
 17076  0038BE  D001               	goto	l894
 17077  0038C0  D028               	goto	u10540
 17078  0038C2                     l894:
 17079                           
 17080                           ; BSR set to: 0
 17081                           ;tff.c: 94: wsect += fs->sects_fat;
 17082                           
 17083                           ; BSR set to: 0
 17084  0038C2  EE20 F014          	lfsr	2,20
 17085  0038C6  519E               	movf	move_window@fs& (0+255),w,b
 17086  0038C8  26D9               	addwf	fsr2l,f,c
 17087  0038CA  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17088  0038CC  22DA               	addwfc	fsr2h,f,c
 17089  0038CE  CFDE F08F          	movff	postinc2,??_move_window
 17090  0038D2  CFDD F090          	movff	postdec2,??_move_window+1
 17091  0038D6  518F               	movf	??_move_window& (0+255),w,b
 17092  0038D8  279A               	addwf	move_window@wsect& (0+255),f,b
 17093  0038DA  5190               	movf	(??_move_window+1)& (0+255),w,b
 17094  0038DC  239B               	addwfc	(move_window@wsect+1)& (0+255),f,b
 17095  0038DE  0E00               	movlw	0
 17096  0038E0  239C               	addwfc	(move_window@wsect+2)& (0+255),f,b
 17097  0038E2  0E00               	movlw	0
 17098  0038E4  239D               	addwfc	(move_window@wsect+3)& (0+255),f,b
 17099                           
 17100                           ; BSR set to: 0
 17101                           ;tff.c: 95: disk_write(0, fs->win, wsect, 1);
 17102  0038E6  0E20               	movlw	32
 17103  0038E8  259E               	addwf	move_window@fs& (0+255),w,b
 17104  0038EA  6F7F               	movwf	disk_write@buff& (0+255),b
 17105  0038EC  0E00               	movlw	0
 17106  0038EE  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 17107  0038F0  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 17108  0038F2  C09A  F081         	movff	move_window@wsect,disk_write@sector
 17109  0038F6  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 17110  0038FA  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 17111  0038FE  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 17112  003902  0E01               	movlw	1
 17113  003904  6F85               	movwf	disk_write@count& (0+255),b
 17114  003906  0E00               	movlw	0
 17115  003908  EC55  F026         	call	_disk_write
 17116  00390C  0100               	movlb	0	; () banked
 17117  00390E  0799               	decf	move_window@n& (0+255),f,b
 17118  003910  D7D4               	goto	l8902
 17119  003912                     u10540:
 17120                           
 17121                           ; BSR set to: 0
 17122                           ;tff.c: 96: }
 17123                           ;tff.c: 97: }
 17124                           ;tff.c: 98: }
 17125                           ;tff.c: 100: if (sector) {
 17126                           
 17127                           ; BSR set to: 0
 17128                           
 17129                           ; BSR set to: 0
 17130                           
 17131                           ; BSR set to: 0
 17132  003912  518B               	movf	move_window@sector& (0+255),w,b
 17133  003914  118C               	iorwf	(move_window@sector+1)& (0+255),w,b
 17134  003916  118D               	iorwf	(move_window@sector+2)& (0+255),w,b
 17135  003918  118E               	iorwf	(move_window@sector+3)& (0+255),w,b
 17136  00391A  B4D8               	btfsc	status,2,c
 17137  00391C  D027               	goto	l896
 17138                           
 17139                           ; BSR set to: 0
 17140                           ;tff.c: 101: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 17141  00391E  0E20               	movlw	32
 17142  003920  259E               	addwf	move_window@fs& (0+255),w,b
 17143  003922  6F7F               	movwf	disk_read@buff& (0+255),b
 17144  003924  0E00               	movlw	0
 17145  003926  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 17146  003928  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 17147  00392A  C08B  F081         	movff	move_window@sector,disk_read@sector
 17148  00392E  C08C  F082         	movff	move_window@sector+1,disk_read@sector+1
 17149  003932  C08D  F083         	movff	move_window@sector+2,disk_read@sector+2
 17150  003936  C08E  F084         	movff	move_window@sector+3,disk_read@sector+3
 17151  00393A  0E01               	movlw	1
 17152  00393C  6F85               	movwf	disk_read@count& (0+255),b
 17153  00393E  0E00               	movlw	0
 17154  003940  ECC7  F025         	call	_disk_read
 17155  003944  0900               	iorlw	0
 17156  003946  B4D8               	btfsc	status,2,c
 17157  003948  D002               	goto	l897
 17158                           
 17159                           ;tff.c: 102: return FALSE;
 17160  00394A  0E00               	movlw	0
 17161  00394C  0012               	return	
 17162  00394E                     l897:
 17163                           
 17164                           ;tff.c: 103: fs->winsect = sector;
 17165  00394E  0100               	movlb	0	; () banked
 17166  003950  EE20 F004          	lfsr	2,4
 17167  003954  519E               	movf	move_window@fs& (0+255),w,b
 17168  003956  26D9               	addwf	fsr2l,f,c
 17169  003958  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17170  00395A  22DA               	addwfc	fsr2h,f,c
 17171  00395C  C08B  FFDE         	movff	move_window@sector,postinc2
 17172  003960  C08C  FFDE         	movff	move_window@sector+1,postinc2
 17173  003964  C08D  FFDE         	movff	move_window@sector+2,postinc2
 17174  003968  C08E  FFDE         	movff	move_window@sector+3,postinc2
 17175  00396C                     l896:
 17176                           
 17177                           ; BSR set to: 0
 17178                           ;tff.c: 104: }
 17179                           ;tff.c: 105: }
 17180                           ;tff.c: 106: return TRUE;
 17181                           
 17182                           ; BSR set to: 0
 17183                           
 17184                           ; BSR set to: 0
 17185  00396C  0E01               	movlw	1
 17186  00396E  0012               	return	
 17187  003970                     __end_of_move_window:
 17188                           	opt stack 0
 17189                           tosu	equ	0xFFF
 17190                           tosh	equ	0xFFE
 17191                           tosl	equ	0xFFD
 17192                           pclath	equ	0xFFA
 17193                           tblptru	equ	0xFF8
 17194                           tblptrh	equ	0xFF7
 17195                           tblptrl	equ	0xFF6
 17196                           tablat	equ	0xFF5
 17197                           prodh	equ	0xFF4
 17198                           prodl	equ	0xFF3
 17199                           intcon	equ	0xFF2
 17200                           intcon2	equ	0xFF1
 17201                           intcon3	equ	0xFF0
 17202                           indf0	equ	0xFEF
 17203                           postinc0	equ	0xFEE
 17204                           fsr0h	equ	0xFEA
 17205                           fsr0l	equ	0xFE9
 17206                           wreg	equ	0xFE8
 17207                           indf1	equ	0xFE7
 17208                           postinc1	equ	0xFE6
 17209                           postdec1	equ	0xFE5
 17210                           fsr1h	equ	0xFE2
 17211                           fsr1l	equ	0xFE1
 17212                           indf2	equ	0xFDF
 17213                           postinc2	equ	0xFDE
 17214                           postdec2	equ	0xFDD
 17215                           plusw2	equ	0xFDB
 17216                           fsr2h	equ	0xFDA
 17217                           fsr2l	equ	0xFD9
 17218                           status	equ	0xFD8
 17219                           
 17220 ;; *************** function _disk_write *****************
 17221 ;; Defined at:
 17222 ;;		line 150 in file "bibliotecas/diskio.c"
 17223 ;; Parameters:    Size  Location     Type
 17224 ;;  pdrv            1    wreg     unsigned char 
 17225 ;;  buff            2   31[BANK0 ] PTR const unsigned char 
 17226 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 17227 ;;  sector          4   33[BANK0 ] unsigned long 
 17228 ;;  count           1   37[BANK0 ] unsigned char 
 17229 ;; Auto vars:     Size  Location     Type
 17230 ;;  pdrv            1   39[BANK0 ] unsigned char 
 17231 ;;  result          2   40[BANK0 ] int 
 17232 ;;  res             1   42[BANK0 ] enum E25
 17233 ;; Return value:  Size  Location     Type
 17234 ;;                  1    wreg      enum E25
 17235 ;; Registers used:
 17236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17237 ;; Tracked objects:
 17238 ;;		On entry : 0/0
 17239 ;;		On exit  : 0/0
 17240 ;;		Unchanged: 0/0
 17241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17242 ;;      Params:         0       7       0       0       0       0       0       0       0
 17243 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17244 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17245 ;;      Totals:         0      12       0       0       0       0       0       0       0
 17246 ;;Total ram usage:       12 bytes
 17247 ;; Hardware stack levels used:    1
 17248 ;; Hardware stack levels required when called:    7
 17249 ;; This function calls:
 17250 ;;		_sdc_disk_write
 17251 ;; This function is called by:
 17252 ;;		_move_window
 17253 ;;		_reserve_direntry
 17254 ;;		_f_write
 17255 ;; This function uses a non-reentrant model
 17256 ;;
 17257                           
 17258                           	psect	text61
 17259  004CAA                     __ptext61:
 17260                           	opt stack 0
 17261  004CAA                     _disk_write:
 17262                           	opt stack 17
 17263                           
 17264                           ;incstack = 0
 17265                           ;disk_write@pdrv stored from wreg
 17266  004CAA  0100               	movlb	0	; () banked
 17267  004CAC  6F87               	movwf	disk_write@pdrv& (0+255),b
 17268                           
 17269                           ;diskio.c: 157: DRESULT res;
 17270                           ;diskio.c: 158: int result;
 17271                           ;diskio.c: 160: switch (pdrv) {
 17272  004CAE  D034               	goto	l427
 17273  004CB0                     
 17274                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 17275  004CB0  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 17276  004CB4  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 17277  004CB8  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 17278  004CBC  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 17279  004CC0  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 17280  004CC4  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 17281  004CC8  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 17282  004CCC  EC18  F01A         	call	_sdc_disk_write	;wreg free
 17283  004CD0  0100               	movlb	0	; () banked
 17284  004CD2  6F86               	movwf	??_disk_write& (0+255),b
 17285  004CD4  5186               	movf	??_disk_write& (0+255),w,b
 17286  004CD6  6F88               	movwf	disk_write@result& (0+255),b
 17287  004CD8  6B89               	clrf	(disk_write@result+1)& (0+255),b
 17288                           
 17289                           ; BSR set to: 0
 17290                           ;diskio.c: 165: res = result;
 17291  004CDA  C088  F08A         	movff	disk_write@result,disk_write@res
 17292                           
 17293                           ; BSR set to: 0
 17294                           ;diskio.c: 168: return res;
 17295  004CDE  518A               	movf	disk_write@res& (0+255),w,b
 17296                           
 17297                           ; BSR set to: 0
 17298  004CE0  0012               	return	
 17299  004CE2                     
 17300                           ; BSR set to: 0
 17301                           ;diskio.c: 173: result = sdc_disk_write(buff, sector, count);
 17302                           
 17303                           ; BSR set to: 0
 17304  004CE2  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 17305  004CE6  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 17306  004CEA  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 17307  004CEE  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 17308  004CF2  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 17309  004CF6  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 17310  004CFA  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 17311  004CFE  EC18  F01A         	call	_sdc_disk_write	;wreg free
 17312  004D02  0100               	movlb	0	; () banked
 17313  004D04  6F86               	movwf	??_disk_write& (0+255),b
 17314  004D06  5186               	movf	??_disk_write& (0+255),w,b
 17315  004D08  6F88               	movwf	disk_write@result& (0+255),b
 17316  004D0A  6B89               	clrf	(disk_write@result+1)& (0+255),b
 17317                           
 17318                           ; BSR set to: 0
 17319                           ;diskio.c: 174: res = result;
 17320  004D0C  C088  F08A         	movff	disk_write@result,disk_write@res
 17321                           
 17322                           ; BSR set to: 0
 17323                           ;diskio.c: 177: return res;
 17324  004D10  518A               	movf	disk_write@res& (0+255),w,b
 17325                           
 17326                           ; BSR set to: 0
 17327  004D12  0012               	return	
 17328  004D14                     
 17329                           ; BSR set to: 0
 17330                           ;diskio.c: 186: return res;
 17331                           
 17332                           ; BSR set to: 0
 17333  004D14  518A               	movf	disk_write@res& (0+255),w,b
 17334                           
 17335                           ; BSR set to: 0
 17336  004D16  0012               	return	
 17337  004D18                     l427:
 17338                           
 17339                           ; BSR set to: 0
 17340  004D18  0100               	movlb	0	; () banked
 17341  004D1A  5187               	movf	disk_write@pdrv& (0+255),w,b
 17342                           
 17343                           ; Switch size 1, requested type "space"
 17344                           ; Number of cases is 3, Range of values is 0 to 2
 17345                           ; switch strategies available:
 17346                           ; Name         Instructions Cycles
 17347                           ; simple_byte           10     6 (average)
 17348                           ;	Chosen strategy is simple_byte
 17349  004D1C  0A00               	xorlw	0	; case 0
 17350  004D1E  B4D8               	btfsc	status,2,c
 17351  004D20  D7C7               	goto	l428
 17352  004D22  0A01               	xorlw	1	; case 1
 17353  004D24  B4D8               	btfsc	status,2,c
 17354  004D26  D7DD               	goto	l430
 17355  004D28  0A03               	xorlw	3	; case 2
 17356  004D2A  B4D8               	btfsc	status,2,c
 17357  004D2C  D7F3               	goto	l431
 17358                           
 17359                           ; BSR set to: 0
 17360                           ;diskio.c: 189: return RES_PARERR;
 17361                           
 17362                           ; BSR set to: 0
 17363  004D2E  0E04               	movlw	4
 17364  004D30  0012               	return	
 17365  004D32                     __end_of_disk_write:
 17366                           	opt stack 0
 17367                           tosu	equ	0xFFF
 17368                           tosh	equ	0xFFE
 17369                           tosl	equ	0xFFD
 17370                           pclath	equ	0xFFA
 17371                           tblptru	equ	0xFF8
 17372                           tblptrh	equ	0xFF7
 17373                           tblptrl	equ	0xFF6
 17374                           tablat	equ	0xFF5
 17375                           prodh	equ	0xFF4
 17376                           prodl	equ	0xFF3
 17377                           intcon	equ	0xFF2
 17378                           intcon2	equ	0xFF1
 17379                           intcon3	equ	0xFF0
 17380                           indf0	equ	0xFEF
 17381                           postinc0	equ	0xFEE
 17382                           fsr0h	equ	0xFEA
 17383                           fsr0l	equ	0xFE9
 17384                           wreg	equ	0xFE8
 17385                           indf1	equ	0xFE7
 17386                           postinc1	equ	0xFE6
 17387                           postdec1	equ	0xFE5
 17388                           fsr1h	equ	0xFE2
 17389                           fsr1l	equ	0xFE1
 17390                           indf2	equ	0xFDF
 17391                           postinc2	equ	0xFDE
 17392                           postdec2	equ	0xFDD
 17393                           plusw2	equ	0xFDB
 17394                           fsr2h	equ	0xFDA
 17395                           fsr2l	equ	0xFD9
 17396                           status	equ	0xFD8
 17397                           
 17398 ;; *************** function _sdc_disk_write *****************
 17399 ;; Defined at:
 17400 ;;		line 509 in file "bibliotecas/diskio.c"
 17401 ;; Parameters:    Size  Location     Type
 17402 ;;  p_buff          2   12[BANK0 ] PTR const unsigned char 
 17403 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 17404 ;;  sector          4   14[BANK0 ] unsigned long 
 17405 ;;  count           1   18[BANK0 ] unsigned char 
 17406 ;; Auto vars:     Size  Location     Type
 17407 ;;  j               2   28[BANK0 ] int 
 17408 ;;  count1          2   25[BANK0 ] int 
 17409 ;;  i               2   23[BANK0 ] int 
 17410 ;;  buff            1   30[BANK0 ] unsigned char 
 17411 ;;  res             1   27[BANK0 ] enum E25
 17412 ;; Return value:  Size  Location     Type
 17413 ;;                  1    wreg      enum E25
 17414 ;; Registers used:
 17415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17416 ;; Tracked objects:
 17417 ;;		On entry : 0/0
 17418 ;;		On exit  : 0/0
 17419 ;;		Unchanged: 0/0
 17420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17421 ;;      Params:         0       7       0       0       0       0       0       0       0
 17422 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17423 ;;      Temps:          0       4       0       0       0       0       0       0       0
 17424 ;;      Totals:         0      19       0       0       0       0       0       0       0
 17425 ;;Total ram usage:       19 bytes
 17426 ;; Hardware stack levels used:    1
 17427 ;; Hardware stack levels required when called:    6
 17428 ;; This function calls:
 17429 ;;		_command
 17430 ;;		_dummy_clocks
 17431 ;;		_escreve_SPI
 17432 ;;		_leitura_SPI
 17433 ;;		_proceed
 17434 ;;		_response
 17435 ;; This function is called by:
 17436 ;;		_disk_write
 17437 ;; This function uses a non-reentrant model
 17438 ;;
 17439                           
 17440                           	psect	text62
 17441  003430                     __ptext62:
 17442                           	opt stack 0
 17443  003430                     _sdc_disk_write:
 17444                           	opt stack 17
 17445                           
 17446                           ;diskio.c: 511: DRESULT res;
 17447                           ;diskio.c: 512: unsigned char buff;
 17448                           ;diskio.c: 513: int i=0,j, count1 = 0;
 17449                           
 17450                           ; BSR set to: 0
 17451                           ;incstack = 0
 17452  003430  0E00               	movlw	0
 17453  003432  0100               	movlb	0	; () banked
 17454  003434  6F78               	movwf	(sdc_disk_write@i+1)& (0+255),b
 17455  003436  0E00               	movlw	0
 17456  003438  6F77               	movwf	sdc_disk_write@i& (0+255),b
 17457  00343A  0E00               	movlw	0
 17458  00343C  6F7A               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 17459  00343E  0E00               	movlw	0
 17460  003440  6F79               	movwf	sdc_disk_write@count1& (0+255),b
 17461                           
 17462                           ; BSR set to: 0
 17463                           ;diskio.c: 515: if(count>1)
 17464  003442  0E01               	movlw	1
 17465  003444  6572               	cpfsgt	sdc_disk_write@count& (0+255),b
 17466  003446  D06C               	goto	l512
 17467                           
 17468                           ; BSR set to: 0
 17469                           ;diskio.c: 516: {
 17470                           ;diskio.c: 517: LATCbits.LATC7 = 0;
 17471  003448  9E8B               	bcf	3979,7,c	;volatile
 17472                           
 17473                           ;diskio.c: 518: LATBbits.LATB4 = 0;
 17474  00344A  988A               	bcf	3978,4,c	;volatile
 17475                           
 17476                           ; BSR set to: 0
 17477                           ;diskio.c: 519: dummy_clocks(10);
 17478  00344C  0E0A               	movlw	10
 17479  00344E  EC0F  F02B         	call	_dummy_clocks
 17480                           
 17481                           ;diskio.c: 520: command(0X57, count, 0XFF);
 17482  003452  0100               	movlb	0	; () banked
 17483  003454  5172               	movf	sdc_disk_write@count& (0+255),w,b
 17484  003456  6F65               	movwf	command@arg& (0+255),b
 17485  003458  6B66               	clrf	(command@arg+1)& (0+255),b
 17486  00345A  6B67               	clrf	(command@arg+2)& (0+255),b
 17487  00345C  6B68               	clrf	(command@arg+3)& (0+255),b
 17488  00345E  0EFF               	movlw	255
 17489  003460  6F69               	movwf	command@CRC& (0+255),b
 17490  003462  0E57               	movlw	87
 17491  003464  EC89  F028         	call	_command
 17492                           
 17493                           ;diskio.c: 521: proceed();
 17494  003468  ECEB  F02C         	call	_proceed	;wreg free
 17495  00346C                     
 17496                           ;diskio.c: 523: buff = response();
 17497  00346C  ECE5  F02C         	call	_response	;wreg free
 17498  003470  0100               	movlb	0	; () banked
 17499  003472  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 17500                           
 17501                           ; BSR set to: 0
 17502                           ;diskio.c: 524: }while(buff!=0X00);
 17503  003474  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 17504  003476  A4D8               	btfss	status,2,c
 17505  003478  D7F9               	goto	l513
 17506                           
 17507                           ; BSR set to: 0
 17508                           ;diskio.c: 526: dummy_clocks(10);
 17509                           
 17510                           ; BSR set to: 0
 17511  00347A  0E0A               	movlw	10
 17512  00347C  EC0F  F02B         	call	_dummy_clocks
 17513                           
 17514                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 17515  003480  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 17516  003484  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 17517  003488  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 17518  00348C  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 17519  003490  0E09               	movlw	9
 17520  003492                     u10205:
 17521  003492  90D8               	bcf	status,0,c
 17522  003494  0100               	movlb	0	; () banked
 17523  003496  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 17524  003498  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 17525  00349A  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 17526  00349C  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 17527  00349E  2EE8               	decfsz	wreg,f,c
 17528  0034A0  D7F8               	goto	u10205
 17529  0034A2  C073  F065         	movff	??_sdc_disk_write,command@arg
 17530  0034A6  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 17531  0034AA  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 17532  0034AE  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 17533  0034B2  0EFF               	movlw	255
 17534  0034B4  6F69               	movwf	command@CRC& (0+255),b
 17535  0034B6  0E59               	movlw	89
 17536  0034B8  EC89  F028         	call	_command
 17537                           
 17538                           ;diskio.c: 528: proceed();
 17539  0034BC  ECEB  F02C         	call	_proceed	;wreg free
 17540  0034C0                     
 17541                           ;diskio.c: 530: buff = response();
 17542  0034C0  ECE5  F02C         	call	_response	;wreg free
 17543  0034C4  0100               	movlb	0	; () banked
 17544  0034C6  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 17545                           
 17546                           ; BSR set to: 0
 17547                           ;diskio.c: 531: }while(buff!=0X00);
 17548  0034C8  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 17549  0034CA  A4D8               	btfss	status,2,c
 17550  0034CC  D7F9               	goto	l515
 17551                           
 17552                           ; BSR set to: 0
 17553                           ;diskio.c: 533: dummy_clocks(1);
 17554                           
 17555                           ; BSR set to: 0
 17556  0034CE  0E01               	movlw	1
 17557  0034D0  EC0F  F02B         	call	_dummy_clocks
 17558                           
 17559                           ;diskio.c: 534: escreve_SPI(0XFC);
 17560  0034D4  0EFC               	movlw	252
 17561  0034D6  ECBC  F02C         	call	_escreve_SPI
 17562                           
 17563                           ;diskio.c: 535: for(j=0;j<512;j++)
 17564  0034DA  0E00               	movlw	0
 17565  0034DC  0100               	movlb	0	; () banked
 17566  0034DE  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 17567  0034E0  0E00               	movlw	0
 17568  0034E2  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 17569  0034E4                     l8662:
 17570                           
 17571                           ; BSR set to: 0
 17572  0034E4  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 17573  0034E6  D004               	goto	l517
 17574  0034E8  0E02               	movlw	2
 17575  0034EA  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 17576  0034EC  B0D8               	btfsc	status,0,c
 17577  0034EE  D00D               	goto	u10230
 17578  0034F0                     l517:
 17579                           
 17580                           ; BSR set to: 0
 17581                           ;diskio.c: 536: {
 17582                           ;diskio.c: 537: escreve_SPI(*p_buff);
 17583                           
 17584                           ; BSR set to: 0
 17585  0034F0  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 17586  0034F4  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 17587  0034F8  50DF               	movf	indf2,w,c
 17588  0034FA  ECBC  F02C         	call	_escreve_SPI
 17589                           
 17590                           ;diskio.c: 538: p_buff++;
 17591  0034FE  0100               	movlb	0	; () banked
 17592  003500  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 17593  003502  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 17594                           
 17595                           ; BSR set to: 0
 17596  003504  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 17597  003506  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 17598  003508  D7ED               	goto	l8662
 17599  00350A                     u10230:
 17600                           
 17601                           ; BSR set to: 0
 17602                           ;diskio.c: 539: }
 17603                           ;diskio.c: 540: leitura_SPI();
 17604                           
 17605                           ; BSR set to: 0
 17606  00350A  ECF1  F02C         	call	_leitura_SPI	;wreg free
 17607                           
 17608                           ;diskio.c: 541: leitura_SPI();
 17609  00350E  ECF1  F02C         	call	_leitura_SPI	;wreg free
 17610                           
 17611                           ;diskio.c: 543: dummy_clocks(1);
 17612  003512  0E01               	movlw	1
 17613  003514  EC0F  F02B         	call	_dummy_clocks
 17614                           
 17615                           ;diskio.c: 544: escreve_SPI(0XFD);
 17616  003518  0EFD               	movlw	253
 17617  00351A  ECBC  F02C         	call	_escreve_SPI
 17618                           
 17619                           ;diskio.c: 546: }
 17620  00351E  D06A               	goto	u10280
 17621  003520                     l512:
 17622                           
 17623                           ; BSR set to: 0
 17624                           ;diskio.c: 547: else
 17625                           ;diskio.c: 548: {
 17626                           ;diskio.c: 549: LATCbits.LATC7 = 0;
 17627  003520  9E8B               	bcf	3979,7,c	;volatile
 17628                           
 17629                           ;diskio.c: 550: LATBbits.LATB4 = 0;
 17630  003522  988A               	bcf	3978,4,c	;volatile
 17631                           
 17632                           ; BSR set to: 0
 17633                           ;diskio.c: 551: dummy_clocks(10);
 17634  003524  0E0A               	movlw	10
 17635  003526  EC0F  F02B         	call	_dummy_clocks
 17636                           
 17637                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 17638  00352A  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 17639  00352E  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 17640  003532  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 17641  003536  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 17642  00353A  0E09               	movlw	9
 17643  00353C                     u10245:
 17644  00353C  90D8               	bcf	status,0,c
 17645  00353E  0100               	movlb	0	; () banked
 17646  003540  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 17647  003542  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 17648  003544  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 17649  003546  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 17650  003548  2EE8               	decfsz	wreg,f,c
 17651  00354A  D7F8               	goto	u10245
 17652  00354C  C073  F065         	movff	??_sdc_disk_write,command@arg
 17653  003550  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 17654  003554  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 17655  003558  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 17656  00355C  0E00               	movlw	0
 17657  00355E  6F69               	movwf	command@CRC& (0+255),b
 17658  003560  0E58               	movlw	88
 17659  003562  EC89  F028         	call	_command
 17660                           
 17661                           ;diskio.c: 553: proceed();
 17662  003566  ECEB  F02C         	call	_proceed	;wreg free
 17663  00356A                     
 17664                           ;diskio.c: 555: buff = response();
 17665  00356A  ECE5  F02C         	call	_response	;wreg free
 17666  00356E  0100               	movlb	0	; () banked
 17667  003570  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 17668                           
 17669                           ; BSR set to: 0
 17670                           ;diskio.c: 556: }while(buff!=0X00);
 17671  003572  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 17672  003574  A4D8               	btfss	status,2,c
 17673  003576  D7F9               	goto	l520
 17674                           
 17675                           ; BSR set to: 0
 17676                           ;diskio.c: 558: LATBbits.LATB4 = 0;
 17677  003578  988A               	bcf	3978,4,c	;volatile
 17678                           
 17679                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 17680  00357A  9E8B               	bcf	3979,7,c	;volatile
 17681                           
 17682                           ; BSR set to: 0
 17683                           ;diskio.c: 560: dummy_clocks(1);
 17684  00357C  0E01               	movlw	1
 17685  00357E  EC0F  F02B         	call	_dummy_clocks
 17686                           
 17687                           ;diskio.c: 561: escreve_SPI(0XFE);
 17688  003582  0EFE               	movlw	254
 17689  003584  ECBC  F02C         	call	_escreve_SPI
 17690                           
 17691                           ;diskio.c: 562: for(j=0;j<512;j++)
 17692  003588  0E00               	movlw	0
 17693  00358A  0100               	movlb	0	; () banked
 17694  00358C  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 17695  00358E  0E00               	movlw	0
 17696  003590  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 17697  003592                     l8694:
 17698                           
 17699                           ; BSR set to: 0
 17700  003592  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 17701  003594  D004               	goto	l522
 17702  003596  0E02               	movlw	2
 17703  003598  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 17704  00359A  B0D8               	btfsc	status,0,c
 17705  00359C  D00D               	goto	u10270
 17706  00359E                     l522:
 17707                           
 17708                           ; BSR set to: 0
 17709                           ;diskio.c: 563: {
 17710                           ;diskio.c: 564: escreve_SPI(*p_buff);
 17711                           
 17712                           ; BSR set to: 0
 17713  00359E  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 17714  0035A2  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 17715  0035A6  50DF               	movf	indf2,w,c
 17716  0035A8  ECBC  F02C         	call	_escreve_SPI
 17717                           
 17718                           ;diskio.c: 565: p_buff++;
 17719  0035AC  0100               	movlb	0	; () banked
 17720  0035AE  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 17721  0035B0  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 17722                           
 17723                           ; BSR set to: 0
 17724  0035B2  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 17725  0035B4  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 17726  0035B6  D7ED               	goto	l8694
 17727  0035B8                     u10270:
 17728                           
 17729                           ; BSR set to: 0
 17730                           ;diskio.c: 566: }
 17731                           ;diskio.c: 567: leitura_SPI();
 17732                           
 17733                           ; BSR set to: 0
 17734  0035B8  ECF1  F02C         	call	_leitura_SPI	;wreg free
 17735                           
 17736                           ;diskio.c: 568: leitura_SPI();
 17737  0035BC  ECF1  F02C         	call	_leitura_SPI	;wreg free
 17738                           
 17739                           ;diskio.c: 570: dummy_clocks(10);
 17740  0035C0  0E0A               	movlw	10
 17741  0035C2  EC0F  F02B         	call	_dummy_clocks
 17742                           
 17743                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 17744  0035C6  0E00               	movlw	0
 17745  0035C8  0100               	movlb	0	; () banked
 17746  0035CA  6F65               	movwf	command@arg& (0+255),b
 17747  0035CC  0E00               	movlw	0
 17748  0035CE  6F66               	movwf	(command@arg+1)& (0+255),b
 17749  0035D0  0E00               	movlw	0
 17750  0035D2  6F67               	movwf	(command@arg+2)& (0+255),b
 17751  0035D4  0E00               	movlw	0
 17752  0035D6  6F68               	movwf	(command@arg+3)& (0+255),b
 17753  0035D8  0E00               	movlw	0
 17754  0035DA  6F69               	movwf	command@CRC& (0+255),b
 17755  0035DC  0E4D               	movlw	77
 17756  0035DE  EC89  F028         	call	_command
 17757                           
 17758                           ;diskio.c: 572: proceed();
 17759  0035E2  ECEB  F02C         	call	_proceed	;wreg free
 17760  0035E6                     
 17761                           ;diskio.c: 574: buff = response();
 17762  0035E6  ECE5  F02C         	call	_response	;wreg free
 17763  0035EA  0100               	movlb	0	; () banked
 17764  0035EC  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 17765                           
 17766                           ; BSR set to: 0
 17767                           ;diskio.c: 575: }while(buff!=0X00 );
 17768  0035EE  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 17769  0035F0  A4D8               	btfss	status,2,c
 17770  0035F2  D7F9               	goto	l524
 17771  0035F4                     u10280:
 17772                           
 17773                           ;diskio.c: 576: }
 17774                           ;diskio.c: 577: return res;
 17775                           
 17776                           ; BSR set to: 0
 17777                           
 17778                           ; BSR set to: 0
 17779  0035F4  0100               	movlb	0	; () banked
 17780  0035F6  517B               	movf	sdc_disk_write@res& (0+255),w,b
 17781  0035F8  0012               	return	
 17782  0035FA                     __end_of_sdc_disk_write:
 17783                           	opt stack 0
 17784                           tosu	equ	0xFFF
 17785                           tosh	equ	0xFFE
 17786                           tosl	equ	0xFFD
 17787                           pclath	equ	0xFFA
 17788                           tblptru	equ	0xFF8
 17789                           tblptrh	equ	0xFF7
 17790                           tblptrl	equ	0xFF6
 17791                           tablat	equ	0xFF5
 17792                           prodh	equ	0xFF4
 17793                           prodl	equ	0xFF3
 17794                           intcon	equ	0xFF2
 17795                           intcon2	equ	0xFF1
 17796                           intcon3	equ	0xFF0
 17797                           indf0	equ	0xFEF
 17798                           postinc0	equ	0xFEE
 17799                           fsr0h	equ	0xFEA
 17800                           fsr0l	equ	0xFE9
 17801                           wreg	equ	0xFE8
 17802                           indf1	equ	0xFE7
 17803                           postinc1	equ	0xFE6
 17804                           postdec1	equ	0xFE5
 17805                           fsr1h	equ	0xFE2
 17806                           fsr1l	equ	0xFE1
 17807                           indf2	equ	0xFDF
 17808                           postinc2	equ	0xFDE
 17809                           postdec2	equ	0xFDD
 17810                           plusw2	equ	0xFDB
 17811                           fsr2h	equ	0xFDA
 17812                           fsr2l	equ	0xFD9
 17813                           status	equ	0xFD8
 17814                           
 17815 ;; *************** function _disk_read *****************
 17816 ;; Defined at:
 17817 ;;		line 97 in file "bibliotecas/diskio.c"
 17818 ;; Parameters:    Size  Location     Type
 17819 ;;  pdrv            1    wreg     unsigned char 
 17820 ;;  buff            2   31[BANK0 ] PTR unsigned char 
 17821 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 17822 ;;  sector          4   33[BANK0 ] unsigned long 
 17823 ;;  count           1   37[BANK0 ] unsigned char 
 17824 ;; Auto vars:     Size  Location     Type
 17825 ;;  pdrv            1   39[BANK0 ] unsigned char 
 17826 ;;  result          2   40[BANK0 ] int 
 17827 ;;  res             1   42[BANK0 ] enum E25
 17828 ;; Return value:  Size  Location     Type
 17829 ;;                  1    wreg      enum E25
 17830 ;; Registers used:
 17831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17832 ;; Tracked objects:
 17833 ;;		On entry : 0/0
 17834 ;;		On exit  : 0/0
 17835 ;;		Unchanged: 0/0
 17836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17837 ;;      Params:         0       7       0       0       0       0       0       0       0
 17838 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17839 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17840 ;;      Totals:         0      12       0       0       0       0       0       0       0
 17841 ;;Total ram usage:       12 bytes
 17842 ;; Hardware stack levels used:    1
 17843 ;; Hardware stack levels required when called:    7
 17844 ;; This function calls:
 17845 ;;		_sdc_disk_read
 17846 ;; This function is called by:
 17847 ;;		_move_window
 17848 ;;		_check_fs
 17849 ;;		_f_read
 17850 ;; This function uses a non-reentrant model
 17851 ;;
 17852                           
 17853                           	psect	text63
 17854  004B8E                     __ptext63:
 17855                           	opt stack 0
 17856  004B8E                     _disk_read:
 17857                           	opt stack 17
 17858                           
 17859                           ; BSR set to: 0
 17860                           ;incstack = 0
 17861                           ;disk_read@pdrv stored from wreg
 17862  004B8E  0100               	movlb	0	; () banked
 17863  004B90  6F87               	movwf	disk_read@pdrv& (0+255),b
 17864                           
 17865                           ;diskio.c: 104: DRESULT res;
 17866                           ;diskio.c: 105: int result;
 17867                           ;diskio.c: 107: switch (pdrv) {
 17868  004B92  D038               	goto	l419
 17869  004B94                     
 17870                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 17871  004B94  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 17872  004B98  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 17873  004B9C  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 17874  004BA0  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 17875  004BA4  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 17876  004BA8  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 17877  004BAC  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 17878  004BB0  EC33  F01E         	call	_sdc_disk_read	;wreg free
 17879  004BB4  0100               	movlb	0	; () banked
 17880  004BB6  6F86               	movwf	??_disk_read& (0+255),b
 17881  004BB8  5186               	movf	??_disk_read& (0+255),w,b
 17882  004BBA  6F88               	movwf	disk_read@result& (0+255),b
 17883  004BBC  6B89               	clrf	(disk_read@result+1)& (0+255),b
 17884                           
 17885                           ; BSR set to: 0
 17886                           ;diskio.c: 115: res = result;
 17887  004BBE  C088  F08A         	movff	disk_read@result,disk_read@res
 17888                           
 17889                           ; BSR set to: 0
 17890                           ;diskio.c: 117: return res;
 17891  004BC2  518A               	movf	disk_read@res& (0+255),w,b
 17892                           
 17893                           ; BSR set to: 0
 17894  004BC4  0012               	return	
 17895  004BC6                     
 17896                           ; BSR set to: 0
 17897                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 17898                           
 17899                           ; BSR set to: 0
 17900  004BC6  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 17901  004BCA  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 17902  004BCE  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 17903  004BD2  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 17904  004BD6  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 17905  004BDA  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 17906  004BDE  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 17907  004BE2  EC33  F01E         	call	_sdc_disk_read	;wreg free
 17908  004BE6  0100               	movlb	0	; () banked
 17909  004BE8  6F86               	movwf	??_disk_read& (0+255),b
 17910  004BEA  5186               	movf	??_disk_read& (0+255),w,b
 17911  004BEC  6F88               	movwf	disk_read@result& (0+255),b
 17912  004BEE  6B89               	clrf	(disk_read@result+1)& (0+255),b
 17913                           
 17914                           ; BSR set to: 0
 17915                           ;diskio.c: 126: res = result;
 17916  004BF0  C088  F08A         	movff	disk_read@result,disk_read@res
 17917                           
 17918                           ; BSR set to: 0
 17919                           ;diskio.c: 128: buff = data_buff;
 17920  004BF4  C029  F07F         	movff	_data_buff,disk_read@buff
 17921  004BF8  C02A  F080         	movff	_data_buff+1,disk_read@buff+1
 17922                           
 17923                           ; BSR set to: 0
 17924                           ;diskio.c: 129: return res;
 17925  004BFC  518A               	movf	disk_read@res& (0+255),w,b
 17926                           
 17927                           ; BSR set to: 0
 17928  004BFE  0012               	return	
 17929  004C00                     
 17930                           ; BSR set to: 0
 17931                           ;diskio.c: 138: return res;
 17932                           
 17933                           ; BSR set to: 0
 17934  004C00  518A               	movf	disk_read@res& (0+255),w,b
 17935                           
 17936                           ; BSR set to: 0
 17937  004C02  0012               	return	
 17938  004C04                     l419:
 17939                           
 17940                           ; BSR set to: 0
 17941  004C04  0100               	movlb	0	; () banked
 17942  004C06  5187               	movf	disk_read@pdrv& (0+255),w,b
 17943                           
 17944                           ; Switch size 1, requested type "space"
 17945                           ; Number of cases is 3, Range of values is 0 to 2
 17946                           ; switch strategies available:
 17947                           ; Name         Instructions Cycles
 17948                           ; simple_byte           10     6 (average)
 17949                           ;	Chosen strategy is simple_byte
 17950  004C08  0A00               	xorlw	0	; case 0
 17951  004C0A  B4D8               	btfsc	status,2,c
 17952  004C0C  D7C3               	goto	l420
 17953  004C0E  0A01               	xorlw	1	; case 1
 17954  004C10  B4D8               	btfsc	status,2,c
 17955  004C12  D7D9               	goto	l422
 17956  004C14  0A03               	xorlw	3	; case 2
 17957  004C16  B4D8               	btfsc	status,2,c
 17958  004C18  D7F3               	goto	l423
 17959                           
 17960                           ; BSR set to: 0
 17961                           ;diskio.c: 141: return RES_PARERR;
 17962                           
 17963                           ; BSR set to: 0
 17964  004C1A  0E04               	movlw	4
 17965  004C1C  0012               	return	
 17966  004C1E                     __end_of_disk_read:
 17967                           	opt stack 0
 17968                           tosu	equ	0xFFF
 17969                           tosh	equ	0xFFE
 17970                           tosl	equ	0xFFD
 17971                           pclath	equ	0xFFA
 17972                           tblptru	equ	0xFF8
 17973                           tblptrh	equ	0xFF7
 17974                           tblptrl	equ	0xFF6
 17975                           tablat	equ	0xFF5
 17976                           prodh	equ	0xFF4
 17977                           prodl	equ	0xFF3
 17978                           intcon	equ	0xFF2
 17979                           intcon2	equ	0xFF1
 17980                           intcon3	equ	0xFF0
 17981                           indf0	equ	0xFEF
 17982                           postinc0	equ	0xFEE
 17983                           fsr0h	equ	0xFEA
 17984                           fsr0l	equ	0xFE9
 17985                           wreg	equ	0xFE8
 17986                           indf1	equ	0xFE7
 17987                           postinc1	equ	0xFE6
 17988                           postdec1	equ	0xFE5
 17989                           fsr1h	equ	0xFE2
 17990                           fsr1l	equ	0xFE1
 17991                           indf2	equ	0xFDF
 17992                           postinc2	equ	0xFDE
 17993                           postdec2	equ	0xFDD
 17994                           plusw2	equ	0xFDB
 17995                           fsr2h	equ	0xFDA
 17996                           fsr2l	equ	0xFD9
 17997                           status	equ	0xFD8
 17998                           
 17999 ;; *************** function _sdc_disk_read *****************
 18000 ;; Defined at:
 18001 ;;		line 439 in file "bibliotecas/diskio.c"
 18002 ;; Parameters:    Size  Location     Type
 18003 ;;  p_buff          2   12[BANK0 ] PTR unsigned char 
 18004 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 18005 ;;  sector          4   14[BANK0 ] unsigned long 
 18006 ;;  count           1   18[BANK0 ] unsigned char 
 18007 ;; Auto vars:     Size  Location     Type
 18008 ;;  start_add       4   24[BANK0 ] unsigned long 
 18009 ;;  length          2   28[BANK0 ] int 
 18010 ;;  count1          2    0        int 
 18011 ;;  i               2    0        int 
 18012 ;;  buff            1   30[BANK0 ] unsigned char 
 18013 ;;  ptr             1   23[BANK0 ] unsigned char 
 18014 ;;  res             1    0        enum E25
 18015 ;; Return value:  Size  Location     Type
 18016 ;;                  1    wreg      enum E25
 18017 ;; Registers used:
 18018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18019 ;; Tracked objects:
 18020 ;;		On entry : 0/0
 18021 ;;		On exit  : 0/0
 18022 ;;		Unchanged: 0/0
 18023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18024 ;;      Params:         0       7       0       0       0       0       0       0       0
 18025 ;;      Locals:         0       8       0       0       0       0       0       0       0
 18026 ;;      Temps:          0       4       0       0       0       0       0       0       0
 18027 ;;      Totals:         0      19       0       0       0       0       0       0       0
 18028 ;;Total ram usage:       19 bytes
 18029 ;; Hardware stack levels used:    1
 18030 ;; Hardware stack levels required when called:    6
 18031 ;; This function calls:
 18032 ;;		_command
 18033 ;;		_dummy_clocks
 18034 ;;		_proceed
 18035 ;;		_response
 18036 ;; This function is called by:
 18037 ;;		_disk_read
 18038 ;; This function uses a non-reentrant model
 18039 ;;
 18040                           
 18041                           	psect	text64
 18042  003C66                     __ptext64:
 18043                           	opt stack 0
 18044  003C66                     _sdc_disk_read:
 18045                           	opt stack 17
 18046                           
 18047                           ;diskio.c: 446: DRESULT res;
 18048                           ;diskio.c: 447: unsigned char ptr=0X00, buff;
 18049                           
 18050                           ; BSR set to: 0
 18051                           ;incstack = 0
 18052  003C66  0E00               	movlw	0
 18053  003C68  0100               	movlb	0	; () banked
 18054  003C6A  6F77               	movwf	sdc_disk_read@ptr& (0+255),b
 18055                           
 18056                           ; BSR set to: 0
 18057                           ;diskio.c: 448: unsigned long int start_add;
 18058                           ;diskio.c: 449: int length,i, count1;
 18059                           ;diskio.c: 450: dummy_clocks(10);
 18060  003C6C  0E0A               	movlw	10
 18061  003C6E  EC0F  F02B         	call	_dummy_clocks
 18062                           
 18063                           ;diskio.c: 452: start_add = sector*512;
 18064  003C72  C06E  F073         	movff	sdc_disk_read@sector,??_sdc_disk_read
 18065  003C76  C06F  F074         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 18066  003C7A  C070  F075         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 18067  003C7E  C071  F076         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 18068  003C82  0E09               	movlw	9
 18069  003C84                     u10115:
 18070  003C84  90D8               	bcf	status,0,c
 18071  003C86  0100               	movlb	0	; () banked
 18072  003C88  3773               	rlcf	??_sdc_disk_read& (0+255),f,b
 18073  003C8A  3774               	rlcf	(??_sdc_disk_read+1)& (0+255),f,b
 18074  003C8C  3775               	rlcf	(??_sdc_disk_read+2)& (0+255),f,b
 18075  003C8E  3776               	rlcf	(??_sdc_disk_read+3)& (0+255),f,b
 18076  003C90  2EE8               	decfsz	wreg,f,c
 18077  003C92  D7F8               	goto	u10115
 18078  003C94  C073  F078         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 18079  003C98  C074  F079         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 18080  003C9C  C075  F07A         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 18081  003CA0  C076  F07B         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 18082                           
 18083                           ; BSR set to: 0
 18084                           ;diskio.c: 455: if(sector != 1)
 18085  003CA4  056E               	decf	sdc_disk_read@sector& (0+255),w,b
 18086  003CA6  116F               	iorwf	(sdc_disk_read@sector+1)& (0+255),w,b
 18087  003CA8  1170               	iorwf	(sdc_disk_read@sector+2)& (0+255),w,b
 18088  003CAA  1171               	iorwf	(sdc_disk_read@sector+3)& (0+255),w,b
 18089  003CAC  B4D8               	btfsc	status,2,c
 18090  003CAE  D01D               	goto	l495
 18091                           
 18092                           ; BSR set to: 0
 18093                           ;diskio.c: 456: {
 18094                           ;diskio.c: 457: dummy_clocks(10);
 18095  003CB0  0E0A               	movlw	10
 18096  003CB2  EC0F  F02B         	call	_dummy_clocks
 18097                           
 18098                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 18099  003CB6  C078  F065         	movff	sdc_disk_read@start_add,command@arg
 18100  003CBA  C079  F066         	movff	sdc_disk_read@start_add+1,command@arg+1
 18101  003CBE  C07A  F067         	movff	sdc_disk_read@start_add+2,command@arg+2
 18102  003CC2  C07B  F068         	movff	sdc_disk_read@start_add+3,command@arg+3
 18103  003CC6  0E00               	movlw	0
 18104  003CC8  0100               	movlb	0	; () banked
 18105  003CCA  6F69               	movwf	command@CRC& (0+255),b
 18106  003CCC  0E52               	movlw	82
 18107  003CCE  EC89  F028         	call	_command
 18108                           
 18109                           ;diskio.c: 459: proceed();
 18110  003CD2  ECEB  F02C         	call	_proceed	;wreg free
 18111  003CD6                     
 18112                           ;diskio.c: 461: buff = response();
 18113  003CD6  ECE5  F02C         	call	_response	;wreg free
 18114  003CDA  0100               	movlb	0	; () banked
 18115  003CDC  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18116                           
 18117                           ; BSR set to: 0
 18118                           ;diskio.c: 462: }while(buff!=0X00);
 18119  003CDE  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 18120  003CE0  A4D8               	btfss	status,2,c
 18121  003CE2  D7F9               	goto	l496
 18122                           
 18123                           ; BSR set to: 0
 18124                           ;diskio.c: 463: proceed();
 18125                           
 18126                           ; BSR set to: 0
 18127  003CE4  ECEB  F02C         	call	_proceed	;wreg free
 18128                           
 18129                           ;diskio.c: 464: }
 18130  003CE8  D021               	goto	l501
 18131  003CEA                     l495:
 18132                           
 18133                           ;diskio.c: 465: else
 18134                           ;diskio.c: 466: {
 18135                           ;diskio.c: 467: dummy_clocks(10);
 18136  003CEA  0E0A               	movlw	10
 18137  003CEC  EC0F  F02B         	call	_dummy_clocks
 18138                           
 18139                           ;diskio.c: 468: command(0X51,sector ,0X00);
 18140  003CF0  C06E  F065         	movff	sdc_disk_read@sector,command@arg
 18141  003CF4  C06F  F066         	movff	sdc_disk_read@sector+1,command@arg+1
 18142  003CF8  C070  F067         	movff	sdc_disk_read@sector+2,command@arg+2
 18143  003CFC  C071  F068         	movff	sdc_disk_read@sector+3,command@arg+3
 18144  003D00  0E00               	movlw	0
 18145  003D02  0100               	movlb	0	; () banked
 18146  003D04  6F69               	movwf	command@CRC& (0+255),b
 18147  003D06  0E51               	movlw	81
 18148  003D08  EC89  F028         	call	_command
 18149                           
 18150                           ;diskio.c: 469: proceed();
 18151  003D0C  ECEB  F02C         	call	_proceed	;wreg free
 18152  003D10                     
 18153                           ;diskio.c: 471: buff = response();
 18154  003D10  ECE5  F02C         	call	_response	;wreg free
 18155  003D14  0100               	movlb	0	; () banked
 18156  003D16  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18157                           
 18158                           ; BSR set to: 0
 18159                           ;diskio.c: 472: }while(buff!=0X00);
 18160  003D18  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 18161  003D1A  A4D8               	btfss	status,2,c
 18162  003D1C  D7F9               	goto	l499
 18163                           
 18164                           ; BSR set to: 0
 18165                           ;diskio.c: 473: proceed();
 18166                           
 18167                           ; BSR set to: 0
 18168  003D1E  ECEB  F02C         	call	_proceed	;wreg free
 18169                           
 18170                           ;diskio.c: 474: }
 18171                           ;diskio.c: 478: while(buff!=0xFE)
 18172  003D22  D004               	goto	l501
 18173  003D24                     
 18174                           ;diskio.c: 479: {
 18175                           ;diskio.c: 480: buff = response();
 18176  003D24  ECE5  F02C         	call	_response	;wreg free
 18177  003D28  0100               	movlb	0	; () banked
 18178  003D2A  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18179  003D2C                     l501:
 18180                           
 18181                           ; BSR set to: 0
 18182  003D2C  0EFE               	movlw	254
 18183  003D2E  0100               	movlb	0	; () banked
 18184  003D30  197E               	xorwf	sdc_disk_read@buff& (0+255),w,b
 18185  003D32  A4D8               	btfss	status,2,c
 18186  003D34  D7F7               	goto	l502
 18187                           
 18188                           ; BSR set to: 0
 18189                           ;diskio.c: 481: }
 18190                           ;diskio.c: 483: length = 0;
 18191                           
 18192                           ; BSR set to: 0
 18193  003D36  0E00               	movlw	0
 18194  003D38  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18195  003D3A  0E00               	movlw	0
 18196  003D3C  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 18197                           
 18198                           ;diskio.c: 484: while ( length < 512 )
 18199  003D3E  D00C               	goto	l504
 18200  003D40                     
 18201                           ; BSR set to: 0
 18202                           ;diskio.c: 485: {
 18203                           ;diskio.c: 486: p_buff[length] = response();
 18204                           
 18205                           ; BSR set to: 0
 18206  003D40  517C               	movf	sdc_disk_read@length& (0+255),w,b
 18207  003D42  256C               	addwf	sdc_disk_read@p_buff& (0+255),w,b
 18208  003D44  6ED9               	movwf	fsr2l,c
 18209  003D46  517D               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 18210  003D48  216D               	addwfc	(sdc_disk_read@p_buff+1)& (0+255),w,b
 18211  003D4A  6EDA               	movwf	fsr2h,c
 18212  003D4C  ECE5  F02C         	call	_response	;wreg free
 18213  003D50  6EDF               	movwf	indf2,c
 18214                           
 18215                           ;diskio.c: 487: length++;
 18216  003D52  0100               	movlb	0	; () banked
 18217  003D54  4B7C               	infsnz	sdc_disk_read@length& (0+255),f,b
 18218  003D56  2B7D               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 18219  003D58                     l504:
 18220                           
 18221                           ; BSR set to: 0
 18222                           
 18223                           ; BSR set to: 0
 18224  003D58  BF7D               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 18225  003D5A  D7F2               	goto	l505
 18226  003D5C  0E02               	movlw	2
 18227  003D5E  5D7D               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 18228  003D60  A0D8               	btfss	status,0,c
 18229  003D62  D7EE               	goto	l505
 18230                           
 18231                           ; BSR set to: 0
 18232                           ;diskio.c: 488: }
 18233                           ;diskio.c: 490: length = 0;
 18234                           
 18235                           ; BSR set to: 0
 18236  003D64  0E00               	movlw	0
 18237  003D66  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18238  003D68  0E00               	movlw	0
 18239  003D6A  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 18240                           
 18241                           ; BSR set to: 0
 18242                           ;diskio.c: 491: dummy_clocks(10);
 18243  003D6C  0E0A               	movlw	10
 18244  003D6E  EC0F  F02B         	call	_dummy_clocks
 18245                           
 18246                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 18247  003D72  0E00               	movlw	0
 18248  003D74  0100               	movlb	0	; () banked
 18249  003D76  6F65               	movwf	command@arg& (0+255),b
 18250  003D78  0E00               	movlw	0
 18251  003D7A  6F66               	movwf	(command@arg+1)& (0+255),b
 18252  003D7C  0E00               	movlw	0
 18253  003D7E  6F67               	movwf	(command@arg+2)& (0+255),b
 18254  003D80  0E00               	movlw	0
 18255  003D82  6F68               	movwf	(command@arg+3)& (0+255),b
 18256  003D84  0E00               	movlw	0
 18257  003D86  6F69               	movwf	command@CRC& (0+255),b
 18258  003D88  0E4C               	movlw	76
 18259  003D8A  EC89  F028         	call	_command
 18260                           
 18261                           ;diskio.c: 494: proceed();
 18262  003D8E  ECEB  F02C         	call	_proceed	;wreg free
 18263  003D92                     
 18264                           ;diskio.c: 496: buff = response();
 18265  003D92  ECE5  F02C         	call	_response	;wreg free
 18266  003D96  0100               	movlb	0	; () banked
 18267  003D98  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18268                           
 18269                           ; BSR set to: 0
 18270                           ;diskio.c: 497: }while(buff!=0xFF);
 18271  003D9A  297E               	incf	sdc_disk_read@buff& (0+255),w,b
 18272  003D9C  A4D8               	btfss	status,2,c
 18273  003D9E  D7F9               	goto	l507
 18274                           
 18275                           ; BSR set to: 0
 18276                           ;diskio.c: 499: length = 0;
 18277                           
 18278                           ; BSR set to: 0
 18279  003DA0  0E00               	movlw	0
 18280  003DA2  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18281  003DA4  0E00               	movlw	0
 18282  003DA6  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 18283                           
 18284                           ; BSR set to: 0
 18285                           ;diskio.c: 500: return RES_OK;
 18286  003DA8  0E00               	movlw	0
 18287  003DAA  0012               	return	
 18288  003DAC                     __end_of_sdc_disk_read:
 18289                           	opt stack 0
 18290                           tosu	equ	0xFFF
 18291                           tosh	equ	0xFFE
 18292                           tosl	equ	0xFFD
 18293                           pclath	equ	0xFFA
 18294                           tblptru	equ	0xFF8
 18295                           tblptrh	equ	0xFF7
 18296                           tblptrl	equ	0xFF6
 18297                           tablat	equ	0xFF5
 18298                           prodh	equ	0xFF4
 18299                           prodl	equ	0xFF3
 18300                           intcon	equ	0xFF2
 18301                           intcon2	equ	0xFF1
 18302                           intcon3	equ	0xFF0
 18303                           indf0	equ	0xFEF
 18304                           postinc0	equ	0xFEE
 18305                           fsr0h	equ	0xFEA
 18306                           fsr0l	equ	0xFE9
 18307                           wreg	equ	0xFE8
 18308                           indf1	equ	0xFE7
 18309                           postinc1	equ	0xFE6
 18310                           postdec1	equ	0xFE5
 18311                           fsr1h	equ	0xFE2
 18312                           fsr1l	equ	0xFE1
 18313                           indf2	equ	0xFDF
 18314                           postinc2	equ	0xFDE
 18315                           postdec2	equ	0xFDD
 18316                           plusw2	equ	0xFDB
 18317                           fsr2h	equ	0xFDA
 18318                           fsr2l	equ	0xFD9
 18319                           status	equ	0xFD8
 18320                           
 18321 ;; *************** function _response *****************
 18322 ;; Defined at:
 18323 ;;		line 59 in file "bibliotecas/SDCard.c"
 18324 ;; Parameters:    Size  Location     Type
 18325 ;;		None
 18326 ;; Auto vars:     Size  Location     Type
 18327 ;;  buff            1   32[COMRAM] unsigned char 
 18328 ;; Return value:  Size  Location     Type
 18329 ;;                  1    wreg      unsigned char 
 18330 ;; Registers used:
 18331 ;;		wreg, status,2, cstack
 18332 ;; Tracked objects:
 18333 ;;		On entry : 0/0
 18334 ;;		On exit  : 0/0
 18335 ;;		Unchanged: 0/0
 18336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18337 ;;      Params:         0       0       0       0       0       0       0       0       0
 18338 ;;      Locals:         1       0       0       0       0       0       0       0       0
 18339 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18340 ;;      Totals:         1       0       0       0       0       0       0       0       0
 18341 ;;Total ram usage:        1 bytes
 18342 ;; Hardware stack levels used:    1
 18343 ;; Hardware stack levels required when called:    4
 18344 ;; This function calls:
 18345 ;;		_leitura_SPI
 18346 ;; This function is called by:
 18347 ;;		_sdc_reset
 18348 ;;		_sdc_disk_initialize
 18349 ;;		_sdc_disk_read
 18350 ;;		_sdc_disk_write
 18351 ;; This function uses a non-reentrant model
 18352 ;;
 18353                           
 18354                           	psect	text65
 18355  0059CA                     __ptext65:
 18356                           	opt stack 0
 18357  0059CA                     _response:
 18358                           	opt stack 18
 18359                           
 18360                           ;SDCard.c: 61: unsigned char buff;
 18361                           ;SDCard.c: 62: LATBbits.LATB4 = 0;
 18362                           
 18363                           ; BSR set to: 0
 18364                           ;incstack = 0
 18365  0059CA  988A               	bcf	3978,4,c	;volatile
 18366                           
 18367                           ;SDCard.c: 63: buff= leitura_SPI();
 18368  0059CC  ECF1  F02C         	call	_leitura_SPI	;wreg free
 18369  0059D0  6E21               	movwf	response@buff,c
 18370                           
 18371                           ;SDCard.c: 64: return buff;
 18372  0059D2  5021               	movf	response@buff,w,c
 18373  0059D4  0012               	return	
 18374  0059D6                     __end_of_response:
 18375                           	opt stack 0
 18376                           tosu	equ	0xFFF
 18377                           tosh	equ	0xFFE
 18378                           tosl	equ	0xFFD
 18379                           pclath	equ	0xFFA
 18380                           tblptru	equ	0xFF8
 18381                           tblptrh	equ	0xFF7
 18382                           tblptrl	equ	0xFF6
 18383                           tablat	equ	0xFF5
 18384                           prodh	equ	0xFF4
 18385                           prodl	equ	0xFF3
 18386                           intcon	equ	0xFF2
 18387                           intcon2	equ	0xFF1
 18388                           intcon3	equ	0xFF0
 18389                           indf0	equ	0xFEF
 18390                           postinc0	equ	0xFEE
 18391                           fsr0h	equ	0xFEA
 18392                           fsr0l	equ	0xFE9
 18393                           wreg	equ	0xFE8
 18394                           indf1	equ	0xFE7
 18395                           postinc1	equ	0xFE6
 18396                           postdec1	equ	0xFE5
 18397                           fsr1h	equ	0xFE2
 18398                           fsr1l	equ	0xFE1
 18399                           indf2	equ	0xFDF
 18400                           postinc2	equ	0xFDE
 18401                           postdec2	equ	0xFDD
 18402                           plusw2	equ	0xFDB
 18403                           fsr2h	equ	0xFDA
 18404                           fsr2l	equ	0xFD9
 18405                           status	equ	0xFD8
 18406                           
 18407 ;; *************** function _proceed *****************
 18408 ;; Defined at:
 18409 ;;		line 92 in file "bibliotecas/SDCard.c"
 18410 ;; Parameters:    Size  Location     Type
 18411 ;;		None
 18412 ;; Auto vars:     Size  Location     Type
 18413 ;;		None
 18414 ;; Return value:  Size  Location     Type
 18415 ;;                  1    wreg      void 
 18416 ;; Registers used:
 18417 ;;		wreg, cstack
 18418 ;; Tracked objects:
 18419 ;;		On entry : 0/0
 18420 ;;		On exit  : 0/0
 18421 ;;		Unchanged: 0/0
 18422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18423 ;;      Params:         0       0       0       0       0       0       0       0       0
 18424 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18425 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18426 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18427 ;;Total ram usage:        0 bytes
 18428 ;; Hardware stack levels used:    1
 18429 ;; Hardware stack levels required when called:    4
 18430 ;; This function calls:
 18431 ;;		_escreve_SPI
 18432 ;; This function is called by:
 18433 ;;		_sdc_reset
 18434 ;;		_sdc_disk_initialize
 18435 ;;		_sdc_disk_read
 18436 ;;		_sdc_disk_write
 18437 ;;		_sdcard_init
 18438 ;; This function uses a non-reentrant model
 18439 ;;
 18440                           
 18441                           	psect	text66
 18442  0059D6                     __ptext66:
 18443                           	opt stack 0
 18444  0059D6                     _proceed:
 18445                           	opt stack 18
 18446                           
 18447                           ;SDCard.c: 94: LATBbits.LATB4 = 0;
 18448                           
 18449                           ;incstack = 0
 18450  0059D6  988A               	bcf	3978,4,c	;volatile
 18451                           
 18452                           ;SDCard.c: 95: escreve_SPI(0xFF);
 18453  0059D8  0EFF               	movlw	255
 18454  0059DA  ECBC  F02C         	call	_escreve_SPI
 18455                           
 18456                           ;SDCard.c: 96: LATBbits.LATB4 = 1;
 18457  0059DE  888A               	bsf	3978,4,c	;volatile
 18458  0059E0  0012               	return		;funcret
 18459  0059E2                     __end_of_proceed:
 18460                           	opt stack 0
 18461                           tosu	equ	0xFFF
 18462                           tosh	equ	0xFFE
 18463                           tosl	equ	0xFFD
 18464                           pclath	equ	0xFFA
 18465                           tblptru	equ	0xFF8
 18466                           tblptrh	equ	0xFF7
 18467                           tblptrl	equ	0xFF6
 18468                           tablat	equ	0xFF5
 18469                           prodh	equ	0xFF4
 18470                           prodl	equ	0xFF3
 18471                           intcon	equ	0xFF2
 18472                           intcon2	equ	0xFF1
 18473                           intcon3	equ	0xFF0
 18474                           indf0	equ	0xFEF
 18475                           postinc0	equ	0xFEE
 18476                           fsr0h	equ	0xFEA
 18477                           fsr0l	equ	0xFE9
 18478                           wreg	equ	0xFE8
 18479                           indf1	equ	0xFE7
 18480                           postinc1	equ	0xFE6
 18481                           postdec1	equ	0xFE5
 18482                           fsr1h	equ	0xFE2
 18483                           fsr1l	equ	0xFE1
 18484                           indf2	equ	0xFDF
 18485                           postinc2	equ	0xFDE
 18486                           postdec2	equ	0xFDD
 18487                           plusw2	equ	0xFDB
 18488                           fsr2h	equ	0xFDA
 18489                           fsr2l	equ	0xFD9
 18490                           status	equ	0xFD8
 18491                           
 18492 ;; *************** function _command *****************
 18493 ;; Defined at:
 18494 ;;		line 125 in file "bibliotecas/SDCard.c"
 18495 ;; Parameters:    Size  Location     Type
 18496 ;;  CMD             1    wreg     unsigned char 
 18497 ;;  arg             4    5[BANK0 ] unsigned long 
 18498 ;;  CRC             1    9[BANK0 ] unsigned char 
 18499 ;; Auto vars:     Size  Location     Type
 18500 ;;  CMD             1   10[BANK0 ] unsigned char 
 18501 ;;  argument        1   11[BANK0 ] unsigned char 
 18502 ;; Return value:  Size  Location     Type
 18503 ;;                  1    wreg      void 
 18504 ;; Registers used:
 18505 ;;		wreg, status,2, status,0, cstack
 18506 ;; Tracked objects:
 18507 ;;		On entry : 0/0
 18508 ;;		On exit  : 0/0
 18509 ;;		Unchanged: 0/0
 18510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18511 ;;      Params:         0       5       0       0       0       0       0       0       0
 18512 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18513 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18514 ;;      Totals:         0       7       0       0       0       0       0       0       0
 18515 ;;Total ram usage:        7 bytes
 18516 ;; Hardware stack levels used:    1
 18517 ;; Hardware stack levels required when called:    5
 18518 ;; This function calls:
 18519 ;;		_dummy_clocks
 18520 ;;		_escreve_SPI
 18521 ;;		_wait_ready
 18522 ;; This function is called by:
 18523 ;;		_sdc_reset
 18524 ;;		_sdc_disk_initialize
 18525 ;;		_sdc_disk_read
 18526 ;;		_sdc_disk_write
 18527 ;; This function uses a non-reentrant model
 18528 ;;
 18529                           
 18530                           	psect	text67
 18531  005112                     __ptext67:
 18532                           	opt stack 0
 18533  005112                     _command:
 18534                           	opt stack 17
 18535                           
 18536                           ;incstack = 0
 18537                           ;command@CMD stored from wreg
 18538  005112  0100               	movlb	0	; () banked
 18539  005114  6F6A               	movwf	command@CMD& (0+255),b
 18540                           
 18541                           ;SDCard.c: 127: unsigned char argument;
 18542                           ;SDCard.c: 129: if (wait_ready() != 0xFF)
 18543  005116  ECAE  F02B         	call	_wait_ready	;wreg free
 18544  00511A  0AFF               	xorlw	255
 18545  00511C  A4D8               	btfss	status,2,c
 18546  00511E  D004               	goto	l287
 18547  005120  D008               	goto	u10100
 18548  005122                     
 18549                           ;SDCard.c: 132: {
 18550                           ;SDCard.c: 133: dummy_clocks(10);
 18551  005122  0E0A               	movlw	10
 18552  005124  EC0F  F02B         	call	_dummy_clocks
 18553  005128                     l287:
 18554  005128  ECAE  F02B         	call	_wait_ready	;wreg free
 18555  00512C  0AFF               	xorlw	255
 18556  00512E  A4D8               	btfss	status,2,c
 18557  005130  D7F8               	goto	l288
 18558  005132                     u10100:
 18559                           
 18560                           ;SDCard.c: 134: }
 18561                           ;SDCard.c: 135: }
 18562                           ;SDCard.c: 136: escreve_SPI(0xFF);
 18563  005132  0EFF               	movlw	255
 18564  005134  ECBC  F02C         	call	_escreve_SPI
 18565                           
 18566                           ;SDCard.c: 137: escreve_SPI(CMD);
 18567  005138  0100               	movlb	0	; () banked
 18568  00513A  516A               	movf	command@CMD& (0+255),w,b
 18569  00513C  ECBC  F02C         	call	_escreve_SPI
 18570                           
 18571                           ;SDCard.c: 138: argument = arg>>24;
 18572  005140  C068  F06B         	movff	command@arg+3,command@argument
 18573                           
 18574                           ;SDCard.c: 139: escreve_SPI(argument);
 18575  005144  0100               	movlb	0	; () banked
 18576  005146  516B               	movf	command@argument& (0+255),w,b
 18577  005148  ECBC  F02C         	call	_escreve_SPI
 18578                           
 18579                           ;SDCard.c: 140: argument = arg>>16;
 18580  00514C  C067  F06B         	movff	command@arg+2,command@argument
 18581                           
 18582                           ;SDCard.c: 141: escreve_SPI(argument);
 18583  005150  0100               	movlb	0	; () banked
 18584  005152  516B               	movf	command@argument& (0+255),w,b
 18585  005154  ECBC  F02C         	call	_escreve_SPI
 18586                           
 18587                           ;SDCard.c: 142: argument = arg>>8;
 18588  005158  C066  F06B         	movff	command@arg+1,command@argument
 18589                           
 18590                           ;SDCard.c: 143: escreve_SPI(argument);
 18591  00515C  0100               	movlb	0	; () banked
 18592  00515E  516B               	movf	command@argument& (0+255),w,b
 18593  005160  ECBC  F02C         	call	_escreve_SPI
 18594                           
 18595                           ;SDCard.c: 144: argument = arg;
 18596  005164  C065  F06B         	movff	command@arg,command@argument
 18597                           
 18598                           ;SDCard.c: 145: escreve_SPI(argument);
 18599  005168  0100               	movlb	0	; () banked
 18600  00516A  516B               	movf	command@argument& (0+255),w,b
 18601  00516C  ECBC  F02C         	call	_escreve_SPI
 18602                           
 18603                           ;SDCard.c: 146: escreve_SPI(CRC);
 18604  005170  0100               	movlb	0	; () banked
 18605  005172  5169               	movf	command@CRC& (0+255),w,b
 18606  005174  ECBC  F02C         	call	_escreve_SPI
 18607  005178  0012               	return		;funcret
 18608  00517A                     __end_of_command:
 18609                           	opt stack 0
 18610                           tosu	equ	0xFFF
 18611                           tosh	equ	0xFFE
 18612                           tosl	equ	0xFFD
 18613                           pclath	equ	0xFFA
 18614                           tblptru	equ	0xFF8
 18615                           tblptrh	equ	0xFF7
 18616                           tblptrl	equ	0xFF6
 18617                           tablat	equ	0xFF5
 18618                           prodh	equ	0xFF4
 18619                           prodl	equ	0xFF3
 18620                           intcon	equ	0xFF2
 18621                           intcon2	equ	0xFF1
 18622                           intcon3	equ	0xFF0
 18623                           indf0	equ	0xFEF
 18624                           postinc0	equ	0xFEE
 18625                           fsr0h	equ	0xFEA
 18626                           fsr0l	equ	0xFE9
 18627                           wreg	equ	0xFE8
 18628                           indf1	equ	0xFE7
 18629                           postinc1	equ	0xFE6
 18630                           postdec1	equ	0xFE5
 18631                           fsr1h	equ	0xFE2
 18632                           fsr1l	equ	0xFE1
 18633                           indf2	equ	0xFDF
 18634                           postinc2	equ	0xFDE
 18635                           postdec2	equ	0xFDD
 18636                           plusw2	equ	0xFDB
 18637                           fsr2h	equ	0xFDA
 18638                           fsr2l	equ	0xFD9
 18639                           status	equ	0xFD8
 18640                           
 18641 ;; *************** function _wait_ready *****************
 18642 ;; Defined at:
 18643 ;;		line 105 in file "bibliotecas/SDCard.c"
 18644 ;; Parameters:    Size  Location     Type
 18645 ;;		None
 18646 ;; Auto vars:     Size  Location     Type
 18647 ;;  msg            10    0        unsigned char [10]
 18648 ;;  timeout         4    0[BANK0 ] unsigned long 
 18649 ;;  res             1    4[BANK0 ] unsigned char 
 18650 ;; Return value:  Size  Location     Type
 18651 ;;                  1    wreg      unsigned char 
 18652 ;; Registers used:
 18653 ;;		wreg, status,2, status,0, cstack
 18654 ;; Tracked objects:
 18655 ;;		On entry : 0/0
 18656 ;;		On exit  : 0/0
 18657 ;;		Unchanged: 0/0
 18658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18659 ;;      Params:         0       0       0       0       0       0       0       0       0
 18660 ;;      Locals:         0       5       0       0       0       0       0       0       0
 18661 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18662 ;;      Totals:         0       5       0       0       0       0       0       0       0
 18663 ;;Total ram usage:        5 bytes
 18664 ;; Hardware stack levels used:    1
 18665 ;; Hardware stack levels required when called:    4
 18666 ;; This function calls:
 18667 ;;		_leitura_SPI
 18668 ;; This function is called by:
 18669 ;;		_command
 18670 ;; This function uses a non-reentrant model
 18671 ;;
 18672                           
 18673                           	psect	text68
 18674  00575C                     __ptext68:
 18675                           	opt stack 0
 18676  00575C                     _wait_ready:
 18677                           	opt stack 17
 18678                           
 18679                           ;SDCard.c: 107: BYTE res;
 18680                           ;SDCard.c: 108: DWORD timeout = 0x7FFF;
 18681                           
 18682                           ;incstack = 0
 18683  00575C  0EFF               	movlw	255
 18684  00575E  0100               	movlb	0	; () banked
 18685  005760  6F60               	movwf	wait_ready@timeout& (0+255),b
 18686  005762  0E7F               	movlw	127
 18687  005764  6F61               	movwf	(wait_ready@timeout+1)& (0+255),b
 18688  005766  0E00               	movlw	0
 18689  005768  6F62               	movwf	(wait_ready@timeout+2)& (0+255),b
 18690  00576A  0E00               	movlw	0
 18691  00576C  6F63               	movwf	(wait_ready@timeout+3)& (0+255),b
 18692  00576E                     
 18693                           ; BSR set to: 0
 18694                           ;SDCard.c: 112: res = leitura_SPI();
 18695                           
 18696                           ; BSR set to: 0
 18697  00576E  ECF1  F02C         	call	_leitura_SPI	;wreg free
 18698  005772  0100               	movlb	0	; () banked
 18699  005774  6F64               	movwf	wait_ready@res& (0+255),b
 18700                           
 18701                           ; BSR set to: 0
 18702                           ;SDCard.c: 113: while ((res != 0xFF) && (--timeout));
 18703  005776  2964               	incf	wait_ready@res& (0+255),w,b
 18704  005778  B4D8               	btfsc	status,2,c
 18705  00577A  D00B               	goto	u10080
 18706                           
 18707                           ; BSR set to: 0
 18708  00577C  0760               	decf	wait_ready@timeout& (0+255),f,b
 18709  00577E  0E00               	movlw	0
 18710  005780  5B61               	subwfb	(wait_ready@timeout+1)& (0+255),f,b
 18711  005782  5B62               	subwfb	(wait_ready@timeout+2)& (0+255),f,b
 18712  005784  5B63               	subwfb	(wait_ready@timeout+3)& (0+255),f,b
 18713  005786  5160               	movf	wait_ready@timeout& (0+255),w,b
 18714  005788  1161               	iorwf	(wait_ready@timeout+1)& (0+255),w,b
 18715  00578A  1162               	iorwf	(wait_ready@timeout+2)& (0+255),w,b
 18716  00578C  1163               	iorwf	(wait_ready@timeout+3)& (0+255),w,b
 18717  00578E  A4D8               	btfss	status,2,c
 18718  005790  D7EE               	goto	l279
 18719  005792                     u10080:
 18720                           
 18721                           ; BSR set to: 0
 18722                           ;SDCard.c: 115: return res;
 18723                           
 18724                           ; BSR set to: 0
 18725                           
 18726                           ; BSR set to: 0
 18727  005792  5164               	movf	wait_ready@res& (0+255),w,b
 18728  005794  0012               	return	
 18729  005796                     __end_of_wait_ready:
 18730                           	opt stack 0
 18731                           tosu	equ	0xFFF
 18732                           tosh	equ	0xFFE
 18733                           tosl	equ	0xFFD
 18734                           pclath	equ	0xFFA
 18735                           tblptru	equ	0xFF8
 18736                           tblptrh	equ	0xFF7
 18737                           tblptrl	equ	0xFF6
 18738                           tablat	equ	0xFF5
 18739                           prodh	equ	0xFF4
 18740                           prodl	equ	0xFF3
 18741                           intcon	equ	0xFF2
 18742                           intcon2	equ	0xFF1
 18743                           intcon3	equ	0xFF0
 18744                           indf0	equ	0xFEF
 18745                           postinc0	equ	0xFEE
 18746                           fsr0h	equ	0xFEA
 18747                           fsr0l	equ	0xFE9
 18748                           wreg	equ	0xFE8
 18749                           indf1	equ	0xFE7
 18750                           postinc1	equ	0xFE6
 18751                           postdec1	equ	0xFE5
 18752                           fsr1h	equ	0xFE2
 18753                           fsr1l	equ	0xFE1
 18754                           indf2	equ	0xFDF
 18755                           postinc2	equ	0xFDE
 18756                           postdec2	equ	0xFDD
 18757                           plusw2	equ	0xFDB
 18758                           fsr2h	equ	0xFDA
 18759                           fsr2l	equ	0xFD9
 18760                           status	equ	0xFD8
 18761                           
 18762 ;; *************** function _escreve_SPI *****************
 18763 ;; Defined at:
 18764 ;;		line 98 in file "bibliotecas/SPI.c"
 18765 ;; Parameters:    Size  Location     Type
 18766 ;;  dado            1    wreg     unsigned char 
 18767 ;; Auto vars:     Size  Location     Type
 18768 ;;  dado            1   33[COMRAM] unsigned char 
 18769 ;;  TempVar         1   32[COMRAM] unsigned char 
 18770 ;; Return value:  Size  Location     Type
 18771 ;;                  1    wreg      void 
 18772 ;; Registers used:
 18773 ;;		wreg
 18774 ;; Tracked objects:
 18775 ;;		On entry : 0/0
 18776 ;;		On exit  : 0/0
 18777 ;;		Unchanged: 0/0
 18778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18779 ;;      Params:         0       0       0       0       0       0       0       0       0
 18780 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18781 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18782 ;;      Totals:         2       0       0       0       0       0       0       0       0
 18783 ;;Total ram usage:        2 bytes
 18784 ;; Hardware stack levels used:    1
 18785 ;; Hardware stack levels required when called:    3
 18786 ;; This function calls:
 18787 ;;		Nothing
 18788 ;; This function is called by:
 18789 ;;		_proceed
 18790 ;;		_command
 18791 ;;		_sdc_disk_write
 18792 ;; This function uses a non-reentrant model
 18793 ;;
 18794                           
 18795                           	psect	text69
 18796  005978                     __ptext69:
 18797                           	opt stack 0
 18798  005978                     _escreve_SPI:
 18799                           	opt stack 18
 18800                           
 18801                           ; BSR set to: 0
 18802                           ;incstack = 0
 18803                           ;escreve_SPI@dado stored from wreg
 18804  005978  6E22               	movwf	escreve_SPI@dado,c
 18805                           
 18806                           ;SPI.c: 100: unsigned char TempVar;
 18807                           ;SPI.c: 101: TempVar = SSPBUF;
 18808  00597A  CFC9 F021          	movff	4041,escreve_SPI@TempVar	;volatile
 18809                           
 18810                           ;SPI.c: 102: PIR1bits.SSPIF = 0;
 18811  00597E  969E               	bcf	3998,3,c	;volatile
 18812                           
 18813                           ;SPI.c: 104: SSPBUF = dado;
 18814  005980  C022  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 18815  005984  B69E               	btfsc	3998,3,c	;volatile
 18816  005986  0012               	return	
 18817  005988  D7FD               	goto	l366
 18818  00598A                     __end_of_escreve_SPI:
 18819                           	opt stack 0
 18820                           tosu	equ	0xFFF
 18821                           tosh	equ	0xFFE
 18822                           tosl	equ	0xFFD
 18823                           pclath	equ	0xFFA
 18824                           tblptru	equ	0xFF8
 18825                           tblptrh	equ	0xFF7
 18826                           tblptrl	equ	0xFF6
 18827                           tablat	equ	0xFF5
 18828                           prodh	equ	0xFF4
 18829                           prodl	equ	0xFF3
 18830                           intcon	equ	0xFF2
 18831                           intcon2	equ	0xFF1
 18832                           intcon3	equ	0xFF0
 18833                           indf0	equ	0xFEF
 18834                           postinc0	equ	0xFEE
 18835                           fsr0h	equ	0xFEA
 18836                           fsr0l	equ	0xFE9
 18837                           wreg	equ	0xFE8
 18838                           indf1	equ	0xFE7
 18839                           postinc1	equ	0xFE6
 18840                           postdec1	equ	0xFE5
 18841                           fsr1h	equ	0xFE2
 18842                           fsr1l	equ	0xFE1
 18843                           indf2	equ	0xFDF
 18844                           postinc2	equ	0xFDE
 18845                           postdec2	equ	0xFDD
 18846                           plusw2	equ	0xFDB
 18847                           fsr2h	equ	0xFDA
 18848                           fsr2l	equ	0xFD9
 18849                           status	equ	0xFD8
 18850                           
 18851 ;; *************** function _dummy_clocks *****************
 18852 ;; Defined at:
 18853 ;;		line 74 in file "bibliotecas/SDCard.c"
 18854 ;; Parameters:    Size  Location     Type
 18855 ;;  n               1    wreg     unsigned char 
 18856 ;; Auto vars:     Size  Location     Type
 18857 ;;  n               1    0[BANK0 ] unsigned char 
 18858 ;;  i               2    1[BANK0 ] unsigned int 
 18859 ;; Return value:  Size  Location     Type
 18860 ;;                  1    wreg      void 
 18861 ;; Registers used:
 18862 ;;		wreg, status,2, status,0, cstack
 18863 ;; Tracked objects:
 18864 ;;		On entry : 0/0
 18865 ;;		On exit  : 0/0
 18866 ;;		Unchanged: 0/0
 18867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18868 ;;      Params:         0       0       0       0       0       0       0       0       0
 18869 ;;      Locals:         0       3       0       0       0       0       0       0       0
 18870 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18871 ;;      Totals:         2       3       0       0       0       0       0       0       0
 18872 ;;Total ram usage:        5 bytes
 18873 ;; Hardware stack levels used:    1
 18874 ;; Hardware stack levels required when called:    4
 18875 ;; This function calls:
 18876 ;;		_leitura_SPI
 18877 ;; This function is called by:
 18878 ;;		_command
 18879 ;;		_sdc_disk_initialize
 18880 ;;		_sdc_disk_read
 18881 ;;		_sdc_disk_write
 18882 ;; This function uses a non-reentrant model
 18883 ;;
 18884                           
 18885                           	psect	text70
 18886  00561E                     __ptext70:
 18887                           	opt stack 0
 18888  00561E                     _dummy_clocks:
 18889                           	opt stack 18
 18890                           
 18891                           ;incstack = 0
 18892                           ;dummy_clocks@n stored from wreg
 18893  00561E  0100               	movlb	0	; () banked
 18894  005620  6F60               	movwf	dummy_clocks@n& (0+255),b
 18895                           
 18896                           ;SDCard.c: 76: unsigned int i;
 18897                           ;SDCard.c: 77: _delay((unsigned long)((1)*(48000000/4000.0)));
 18898  005622  0E10               	movlw	16
 18899  005624  6E21               	movwf	??_dummy_clocks& (0+255),c
 18900  005626  0E94               	movlw	148
 18901  005628                     u14587:
 18902  005628  2EE8               	decfsz	wreg,f,c
 18903  00562A  D7FE               	bra	u14587
 18904  00562C  2E21               	decfsz	??_dummy_clocks& (0+255),f,c
 18905  00562E  D7FC               	bra	u14587
 18906  005630  D000               	nop2	
 18907                           
 18908                           ;SDCard.c: 78: for(i=0;i<n;i++)
 18909  005632  0E00               	movlw	0
 18910  005634  0100               	movlb	0	; () banked
 18911  005636  6F62               	movwf	(dummy_clocks@i+1)& (0+255),b
 18912  005638  0E00               	movlw	0
 18913  00563A  6F61               	movwf	dummy_clocks@i& (0+255),b
 18914  00563C  D007               	goto	l270
 18915  00563E                     l271:
 18916                           
 18917                           ; BSR set to: 0
 18918                           ;SDCard.c: 79: {
 18919                           ;SDCard.c: 80: LATBbits.LATB4 = 1;
 18920  00563E  888A               	bsf	3978,4,c	;volatile
 18921                           
 18922                           ; BSR set to: 0
 18923                           ;SDCard.c: 81: leitura_SPI();
 18924  005640  ECF1  F02C         	call	_leitura_SPI	;wreg free
 18925                           
 18926                           ;SDCard.c: 82: LATBbits.LATB4 = 0;
 18927  005644  988A               	bcf	3978,4,c	;volatile
 18928  005646  0100               	movlb	0	; () banked
 18929  005648  4B61               	infsnz	dummy_clocks@i& (0+255),f,b
 18930  00564A  2B62               	incf	(dummy_clocks@i+1)& (0+255),f,b
 18931  00564C                     l270:
 18932                           
 18933                           ; BSR set to: 0
 18934                           
 18935                           ; BSR set to: 0
 18936  00564C  5160               	movf	dummy_clocks@n& (0+255),w,b
 18937  00564E  6E21               	movwf	??_dummy_clocks& (0+255),c
 18938  005650  6A22               	clrf	(??_dummy_clocks+1)& (0+255),c
 18939  005652  5021               	movf	??_dummy_clocks,w,c
 18940  005654  5D61               	subwf	dummy_clocks@i& (0+255),w,b
 18941  005656  5022               	movf	??_dummy_clocks+1,w,c
 18942  005658  5962               	subwfb	(dummy_clocks@i+1)& (0+255),w,b
 18943  00565A  B0D8               	btfsc	status,0,c
 18944  00565C  0012               	return	
 18945  00565E  D7EF               	goto	l271
 18946  005660                     __end_of_dummy_clocks:
 18947                           	opt stack 0
 18948                           tosu	equ	0xFFF
 18949                           tosh	equ	0xFFE
 18950                           tosl	equ	0xFFD
 18951                           pclath	equ	0xFFA
 18952                           tblptru	equ	0xFF8
 18953                           tblptrh	equ	0xFF7
 18954                           tblptrl	equ	0xFF6
 18955                           tablat	equ	0xFF5
 18956                           prodh	equ	0xFF4
 18957                           prodl	equ	0xFF3
 18958                           intcon	equ	0xFF2
 18959                           intcon2	equ	0xFF1
 18960                           intcon3	equ	0xFF0
 18961                           indf0	equ	0xFEF
 18962                           postinc0	equ	0xFEE
 18963                           fsr0h	equ	0xFEA
 18964                           fsr0l	equ	0xFE9
 18965                           wreg	equ	0xFE8
 18966                           indf1	equ	0xFE7
 18967                           postinc1	equ	0xFE6
 18968                           postdec1	equ	0xFE5
 18969                           fsr1h	equ	0xFE2
 18970                           fsr1l	equ	0xFE1
 18971                           indf2	equ	0xFDF
 18972                           postinc2	equ	0xFDE
 18973                           postdec2	equ	0xFDD
 18974                           plusw2	equ	0xFDB
 18975                           fsr2h	equ	0xFDA
 18976                           fsr2l	equ	0xFD9
 18977                           status	equ	0xFD8
 18978                           
 18979 ;; *************** function _leitura_SPI *****************
 18980 ;; Defined at:
 18981 ;;		line 83 in file "bibliotecas/SPI.c"
 18982 ;; Parameters:    Size  Location     Type
 18983 ;;		None
 18984 ;; Auto vars:     Size  Location     Type
 18985 ;;		None
 18986 ;; Return value:  Size  Location     Type
 18987 ;;                  1    wreg      unsigned char 
 18988 ;; Registers used:
 18989 ;;		wreg, status,2
 18990 ;; Tracked objects:
 18991 ;;		On entry : 0/0
 18992 ;;		On exit  : 0/0
 18993 ;;		Unchanged: 0/0
 18994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18995 ;;      Params:         0       0       0       0       0       0       0       0       0
 18996 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18997 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18998 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18999 ;;Total ram usage:        0 bytes
 19000 ;; Hardware stack levels used:    1
 19001 ;; Hardware stack levels required when called:    3
 19002 ;; This function calls:
 19003 ;;		Nothing
 19004 ;; This function is called by:
 19005 ;;		_response
 19006 ;;		_dummy_clocks
 19007 ;;		_wait_ready
 19008 ;;		_sdc_disk_write
 19009 ;; This function uses a non-reentrant model
 19010 ;;
 19011                           
 19012                           	psect	text71
 19013  0059E2                     __ptext71:
 19014                           	opt stack 0
 19015  0059E2                     _leitura_SPI:
 19016                           	opt stack 18
 19017                           
 19018                           ;SPI.c: 85: SSPBUF = 0xFF;
 19019                           
 19020                           ; BSR set to: 0
 19021                           ;incstack = 0
 19022  0059E2  68C9               	setf	4041,c	;volatile
 19023                           
 19024                           ;SPI.c: 86: SSPSTATbits.BF = 0;
 19025  0059E4  90C7               	bcf	4039,0,c	;volatile
 19026  0059E6  A0C7               	btfss	4039,0,c	;volatile
 19027  0059E8  D7FE               	goto	l360
 19028                           
 19029                           ;SPI.c: 88: return (SSPBUF);
 19030  0059EA  50C9               	movf	4041,w,c	;volatile
 19031  0059EC  0012               	return	
 19032  0059EE                     __end_of_leitura_SPI:
 19033                           	opt stack 0
 19034                           tosu	equ	0xFFF
 19035                           tosh	equ	0xFFE
 19036                           tosl	equ	0xFFD
 19037                           pclath	equ	0xFFA
 19038                           tblptru	equ	0xFF8
 19039                           tblptrh	equ	0xFF7
 19040                           tblptrl	equ	0xFF6
 19041                           tablat	equ	0xFF5
 19042                           prodh	equ	0xFF4
 19043                           prodl	equ	0xFF3
 19044                           intcon	equ	0xFF2
 19045                           intcon2	equ	0xFF1
 19046                           intcon3	equ	0xFF0
 19047                           indf0	equ	0xFEF
 19048                           postinc0	equ	0xFEE
 19049                           fsr0h	equ	0xFEA
 19050                           fsr0l	equ	0xFE9
 19051                           wreg	equ	0xFE8
 19052                           indf1	equ	0xFE7
 19053                           postinc1	equ	0xFE6
 19054                           postdec1	equ	0xFE5
 19055                           fsr1h	equ	0xFE2
 19056                           fsr1l	equ	0xFE1
 19057                           indf2	equ	0xFDF
 19058                           postinc2	equ	0xFDE
 19059                           postdec2	equ	0xFDD
 19060                           plusw2	equ	0xFDB
 19061                           fsr2h	equ	0xFDA
 19062                           fsr2l	equ	0xFD9
 19063                           status	equ	0xFD8
 19064                           
 19065 ;; *************** function _disk_ioctl *****************
 19066 ;; Defined at:
 19067 ;;		line 198 in file "bibliotecas/diskio.c"
 19068 ;; Parameters:    Size  Location     Type
 19069 ;;  pdrv            1    wreg     unsigned char 
 19070 ;;  cmd             1    0[BANK0 ] unsigned char 
 19071 ;;  buff            2    1[BANK0 ] PTR void 
 19072 ;;		 -> NULL(0), 
 19073 ;; Auto vars:     Size  Location     Type
 19074 ;;  pdrv            1   32[COMRAM] unsigned char 
 19075 ;;  result          2    0        int 
 19076 ;;  res             1   33[COMRAM] enum E25
 19077 ;; Return value:  Size  Location     Type
 19078 ;;                  1    wreg      enum E25
 19079 ;; Registers used:
 19080 ;;		wreg, status,2, status,0
 19081 ;; Tracked objects:
 19082 ;;		On entry : 0/0
 19083 ;;		On exit  : 0/0
 19084 ;;		Unchanged: 0/0
 19085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19086 ;;      Params:         0       3       0       0       0       0       0       0       0
 19087 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19088 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19089 ;;      Totals:         2       3       0       0       0       0       0       0       0
 19090 ;;Total ram usage:        5 bytes
 19091 ;; Hardware stack levels used:    1
 19092 ;; Hardware stack levels required when called:    3
 19093 ;; This function calls:
 19094 ;;		Nothing
 19095 ;; This function is called by:
 19096 ;;		_sync
 19097 ;; This function uses a non-reentrant model
 19098 ;;
 19099                           
 19100                           	psect	text72
 19101  005846                     __ptext72:
 19102                           	opt stack 0
 19103  005846                     _disk_ioctl:
 19104                           	opt stack 21
 19105                           
 19106                           ;incstack = 0
 19107                           ;disk_ioctl@pdrv stored from wreg
 19108  005846  6E21               	movwf	disk_ioctl@pdrv,c
 19109                           
 19110                           ;diskio.c: 204: DRESULT res;
 19111                           ;diskio.c: 205: int result;
 19112                           ;diskio.c: 207: switch (pdrv) {
 19113  005848  D006               	goto	l435
 19114  00584A                     l436:
 19115                           
 19116                           ;diskio.c: 212: return res;
 19117  00584A  5022               	movf	disk_ioctl@res,w,c
 19118  00584C  0012               	return	
 19119  00584E                     l438:
 19120                           
 19121                           ;diskio.c: 218: return res;
 19122  00584E  5022               	movf	disk_ioctl@res,w,c
 19123  005850  0012               	return	
 19124  005852                     l439:
 19125                           
 19126                           ;diskio.c: 224: return res;
 19127  005852  5022               	movf	disk_ioctl@res,w,c
 19128  005854  0012               	return	
 19129  005856                     l435:
 19130  005856  5021               	movf	disk_ioctl@pdrv,w,c
 19131                           
 19132                           ; Switch size 1, requested type "space"
 19133                           ; Number of cases is 3, Range of values is 0 to 2
 19134                           ; switch strategies available:
 19135                           ; Name         Instructions Cycles
 19136                           ; simple_byte           10     6 (average)
 19137                           ;	Chosen strategy is simple_byte
 19138  005858  0A00               	xorlw	0	; case 0
 19139  00585A  B4D8               	btfsc	status,2,c
 19140  00585C  D7F6               	goto	l436
 19141  00585E  0A01               	xorlw	1	; case 1
 19142  005860  B4D8               	btfsc	status,2,c
 19143  005862  D7F5               	goto	l438
 19144  005864  0A03               	xorlw	3	; case 2
 19145  005866  B4D8               	btfsc	status,2,c
 19146  005868  D7F4               	goto	l439
 19147                           
 19148                           ;diskio.c: 227: return RES_PARERR;
 19149  00586A  0E04               	movlw	4
 19150  00586C  0012               	return	
 19151  00586E                     __end_of_disk_ioctl:
 19152                           	opt stack 0
 19153                           tosu	equ	0xFFF
 19154                           tosh	equ	0xFFE
 19155                           tosl	equ	0xFFD
 19156                           pclath	equ	0xFFA
 19157                           tblptru	equ	0xFF8
 19158                           tblptrh	equ	0xFF7
 19159                           tblptrl	equ	0xFF6
 19160                           tablat	equ	0xFF5
 19161                           prodh	equ	0xFF4
 19162                           prodl	equ	0xFF3
 19163                           intcon	equ	0xFF2
 19164                           intcon2	equ	0xFF1
 19165                           intcon3	equ	0xFF0
 19166                           indf0	equ	0xFEF
 19167                           postinc0	equ	0xFEE
 19168                           fsr0h	equ	0xFEA
 19169                           fsr0l	equ	0xFE9
 19170                           wreg	equ	0xFE8
 19171                           indf1	equ	0xFE7
 19172                           postinc1	equ	0xFE6
 19173                           postdec1	equ	0xFE5
 19174                           fsr1h	equ	0xFE2
 19175                           fsr1l	equ	0xFE1
 19176                           indf2	equ	0xFDF
 19177                           postinc2	equ	0xFDE
 19178                           postdec2	equ	0xFDD
 19179                           plusw2	equ	0xFDB
 19180                           fsr2h	equ	0xFDA
 19181                           fsr2l	equ	0xFD9
 19182                           status	equ	0xFD8
 19183                           
 19184 ;; *************** function _get_fattime *****************
 19185 ;; Defined at:
 19186 ;;		line 809 in file "bibliotecas/tff.c"
 19187 ;; Parameters:    Size  Location     Type
 19188 ;;		None
 19189 ;; Auto vars:     Size  Location     Type
 19190 ;;  f_time          9   42[BANK0 ] struct .
 19191 ;; Return value:  Size  Location     Type
 19192 ;;                  4    0[BANK0 ] unsigned long 
 19193 ;; Registers used:
 19194 ;;		wreg, status,2, status,0
 19195 ;; Tracked objects:
 19196 ;;		On entry : 0/0
 19197 ;;		On exit  : 0/0
 19198 ;;		Unchanged: 0/0
 19199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19200 ;;      Params:         0       4       0       0       0       0       0       0       0
 19201 ;;      Locals:         0       9       0       0       0       0       0       0       0
 19202 ;;      Temps:          0      38       0       0       0       0       0       0       0
 19203 ;;      Totals:         0      51       0       0       0       0       0       0       0
 19204 ;;Total ram usage:       51 bytes
 19205 ;; Hardware stack levels used:    1
 19206 ;; Hardware stack levels required when called:    3
 19207 ;; This function calls:
 19208 ;;		Nothing
 19209 ;; This function is called by:
 19210 ;;		_f_open
 19211 ;;		_f_sync
 19212 ;; This function uses a non-reentrant model
 19213 ;;
 19214                           
 19215                           	psect	text73
 19216  004278                     __ptext73:
 19217                           	opt stack 0
 19218  004278                     _get_fattime:
 19219                           	opt stack 23
 19220                           
 19221                           ;tff.c: 811: fat_time f_time;
 19222                           ;tff.c: 813: return (DWORD)(f_time.ano ) << 25 |
 19223                           ;tff.c: 814: (DWORD)(f_time.mes) << 21 |
 19224                           ;tff.c: 815: (DWORD)(f_time.mes) << 16 |
 19225                           ;tff.c: 816: (DWORD)(f_time.hora) << 11 |
 19226                           ;tff.c: 817: (DWORD)(f_time.min) << 5 |
 19227                           ;tff.c: 818: (DWORD)(f_time.seg) >> 1;
 19228                           
 19229                           ;incstack = 0
 19230  004278  90D8               	bcf	status,0,c
 19231  00427A  0100               	movlb	0	; () banked
 19232  00427C  318F               	rrcf	(get_fattime@f_time+5)& (0+255),w,b
 19233  00427E  6F65               	movwf	(??_get_fattime+1)& (0+255),b
 19234  004280  318E               	rrcf	(get_fattime@f_time+4)& (0+255),w,b
 19235  004282  6F64               	movwf	??_get_fattime& (0+255),b
 19236  004284  518C               	movf	(get_fattime@f_time+2)& (0+255),w,b
 19237  004286  6F66               	movwf	(??_get_fattime+2)& (0+255),b
 19238  004288  518D               	movf	(get_fattime@f_time+3)& (0+255),w,b
 19239  00428A  6F67               	movwf	(??_get_fattime+3)& (0+255),b
 19240  00428C  6B68               	clrf	(??_get_fattime+4)& (0+255),b
 19241  00428E  6B69               	clrf	(??_get_fattime+5)& (0+255),b
 19242  004290  0E05               	movlw	5
 19243  004292                     u12045:
 19244  004292  90D8               	bcf	status,0,c
 19245  004294  3766               	rlcf	(??_get_fattime+2)& (0+255),f,b
 19246  004296  3767               	rlcf	(??_get_fattime+3)& (0+255),f,b
 19247  004298  3768               	rlcf	(??_get_fattime+4)& (0+255),f,b
 19248  00429A  3769               	rlcf	(??_get_fattime+5)& (0+255),f,b
 19249  00429C  2EE8               	decfsz	wreg,f,c
 19250  00429E  D7F9               	goto	u12045
 19251  0042A0  518A               	movf	get_fattime@f_time& (0+255),w,b
 19252  0042A2  6F6A               	movwf	(??_get_fattime+6)& (0+255),b
 19253  0042A4  518B               	movf	(get_fattime@f_time+1)& (0+255),w,b
 19254  0042A6  6F6B               	movwf	(??_get_fattime+7)& (0+255),b
 19255  0042A8  6B6C               	clrf	(??_get_fattime+8)& (0+255),b
 19256  0042AA  6B6D               	clrf	(??_get_fattime+9)& (0+255),b
 19257  0042AC  0E0B               	movlw	11
 19258  0042AE                     u12055:
 19259  0042AE  90D8               	bcf	status,0,c
 19260  0042B0  376A               	rlcf	(??_get_fattime+6)& (0+255),f,b
 19261  0042B2  376B               	rlcf	(??_get_fattime+7)& (0+255),f,b
 19262  0042B4  376C               	rlcf	(??_get_fattime+8)& (0+255),f,b
 19263  0042B6  376D               	rlcf	(??_get_fattime+9)& (0+255),f,b
 19264  0042B8  2EE8               	decfsz	wreg,f,c
 19265  0042BA  D7F9               	goto	u12055
 19266  0042BC  C091  F06E         	movff	get_fattime@f_time+7,??_get_fattime+10
 19267  0042C0  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 19268  0042C2  6B70               	clrf	(??_get_fattime+12)& (0+255),b
 19269  0042C4  6B71               	clrf	(??_get_fattime+13)& (0+255),b
 19270  0042C6  C06F  F071         	movff	??_get_fattime+11,??_get_fattime+13
 19271  0042CA  C06E  F070         	movff	??_get_fattime+10,??_get_fattime+12
 19272  0042CE  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 19273  0042D0  6B6E               	clrf	(??_get_fattime+10)& (0+255),b
 19274  0042D2  C091  F072         	movff	get_fattime@f_time+7,??_get_fattime+14
 19275  0042D6  6B73               	clrf	(??_get_fattime+15)& (0+255),b
 19276  0042D8  6B74               	clrf	(??_get_fattime+16)& (0+255),b
 19277  0042DA  6B75               	clrf	(??_get_fattime+17)& (0+255),b
 19278  0042DC  0E15               	movlw	21
 19279  0042DE                     u12065:
 19280  0042DE  90D8               	bcf	status,0,c
 19281  0042E0  3772               	rlcf	(??_get_fattime+14)& (0+255),f,b
 19282  0042E2  3773               	rlcf	(??_get_fattime+15)& (0+255),f,b
 19283  0042E4  3774               	rlcf	(??_get_fattime+16)& (0+255),f,b
 19284  0042E6  3775               	rlcf	(??_get_fattime+17)& (0+255),f,b
 19285  0042E8  2EE8               	decfsz	wreg,f,c
 19286  0042EA  D7F9               	goto	u12065
 19287  0042EC  C092  F076         	movff	get_fattime@f_time+8,??_get_fattime+18
 19288  0042F0  6B77               	clrf	(??_get_fattime+19)& (0+255),b
 19289  0042F2  6B78               	clrf	(??_get_fattime+20)& (0+255),b
 19290  0042F4  6B79               	clrf	(??_get_fattime+21)& (0+255),b
 19291  0042F6  0E19               	movlw	25
 19292  0042F8                     u12075:
 19293  0042F8  90D8               	bcf	status,0,c
 19294  0042FA  3776               	rlcf	(??_get_fattime+18)& (0+255),f,b
 19295  0042FC  3777               	rlcf	(??_get_fattime+19)& (0+255),f,b
 19296  0042FE  3778               	rlcf	(??_get_fattime+20)& (0+255),f,b
 19297  004300  3779               	rlcf	(??_get_fattime+21)& (0+255),f,b
 19298  004302  2EE8               	decfsz	wreg,f,c
 19299  004304  D7F9               	goto	u12075
 19300  004306  5172               	movf	(??_get_fattime+14)& (0+255),w,b
 19301  004308  1176               	iorwf	(??_get_fattime+18)& (0+255),w,b
 19302  00430A  6F7A               	movwf	(??_get_fattime+22)& (0+255),b
 19303  00430C  5173               	movf	(??_get_fattime+15)& (0+255),w,b
 19304  00430E  1177               	iorwf	(??_get_fattime+19)& (0+255),w,b
 19305  004310  6F7B               	movwf	(??_get_fattime+23)& (0+255),b
 19306  004312  5174               	movf	(??_get_fattime+16)& (0+255),w,b
 19307  004314  1178               	iorwf	(??_get_fattime+20)& (0+255),w,b
 19308  004316  6F7C               	movwf	(??_get_fattime+24)& (0+255),b
 19309  004318  5175               	movf	(??_get_fattime+17)& (0+255),w,b
 19310  00431A  1179               	iorwf	(??_get_fattime+21)& (0+255),w,b
 19311  00431C  6F7D               	movwf	(??_get_fattime+25)& (0+255),b
 19312  00431E  516E               	movf	(??_get_fattime+10)& (0+255),w,b
 19313  004320  117A               	iorwf	(??_get_fattime+22)& (0+255),w,b
 19314  004322  6F7E               	movwf	(??_get_fattime+26)& (0+255),b
 19315  004324  516F               	movf	(??_get_fattime+11)& (0+255),w,b
 19316  004326  117B               	iorwf	(??_get_fattime+23)& (0+255),w,b
 19317  004328  6F7F               	movwf	(??_get_fattime+27)& (0+255),b
 19318  00432A  5170               	movf	(??_get_fattime+12)& (0+255),w,b
 19319  00432C  117C               	iorwf	(??_get_fattime+24)& (0+255),w,b
 19320  00432E  6F80               	movwf	(??_get_fattime+28)& (0+255),b
 19321  004330  5171               	movf	(??_get_fattime+13)& (0+255),w,b
 19322  004332  117D               	iorwf	(??_get_fattime+25)& (0+255),w,b
 19323  004334  6F81               	movwf	(??_get_fattime+29)& (0+255),b
 19324  004336  516A               	movf	(??_get_fattime+6)& (0+255),w,b
 19325  004338  117E               	iorwf	(??_get_fattime+26)& (0+255),w,b
 19326  00433A  6F82               	movwf	(??_get_fattime+30)& (0+255),b
 19327  00433C  516B               	movf	(??_get_fattime+7)& (0+255),w,b
 19328  00433E  117F               	iorwf	(??_get_fattime+27)& (0+255),w,b
 19329  004340  6F83               	movwf	(??_get_fattime+31)& (0+255),b
 19330  004342  516C               	movf	(??_get_fattime+8)& (0+255),w,b
 19331  004344  1180               	iorwf	(??_get_fattime+28)& (0+255),w,b
 19332  004346  6F84               	movwf	(??_get_fattime+32)& (0+255),b
 19333  004348  516D               	movf	(??_get_fattime+9)& (0+255),w,b
 19334  00434A  1181               	iorwf	(??_get_fattime+29)& (0+255),w,b
 19335  00434C  6F85               	movwf	(??_get_fattime+33)& (0+255),b
 19336  00434E  5166               	movf	(??_get_fattime+2)& (0+255),w,b
 19337  004350  1182               	iorwf	(??_get_fattime+30)& (0+255),w,b
 19338  004352  6F86               	movwf	(??_get_fattime+34)& (0+255),b
 19339  004354  5167               	movf	(??_get_fattime+3)& (0+255),w,b
 19340  004356  1183               	iorwf	(??_get_fattime+31)& (0+255),w,b
 19341  004358  6F87               	movwf	(??_get_fattime+35)& (0+255),b
 19342  00435A  5168               	movf	(??_get_fattime+4)& (0+255),w,b
 19343  00435C  1184               	iorwf	(??_get_fattime+32)& (0+255),w,b
 19344  00435E  6F88               	movwf	(??_get_fattime+36)& (0+255),b
 19345  004360  5169               	movf	(??_get_fattime+5)& (0+255),w,b
 19346  004362  1185               	iorwf	(??_get_fattime+33)& (0+255),w,b
 19347  004364  6F89               	movwf	(??_get_fattime+37)& (0+255),b
 19348  004366  5164               	movf	??_get_fattime& (0+255),w,b
 19349  004368  1186               	iorwf	(??_get_fattime+34)& (0+255),w,b
 19350  00436A  6F60               	movwf	?_get_fattime& (0+255),b
 19351  00436C  5165               	movf	(??_get_fattime+1)& (0+255),w,b
 19352  00436E  1187               	iorwf	(??_get_fattime+35)& (0+255),w,b
 19353  004370  6F61               	movwf	(?_get_fattime+1)& (0+255),b
 19354  004372  0E00               	movlw	0
 19355  004374  1188               	iorwf	(??_get_fattime+36)& (0+255),w,b
 19356  004376  6F62               	movwf	(?_get_fattime+2)& (0+255),b
 19357  004378  0E00               	movlw	0
 19358  00437A  1189               	iorwf	(??_get_fattime+37)& (0+255),w,b
 19359  00437C  6F63               	movwf	(?_get_fattime+3)& (0+255),b
 19360  00437E  0012               	return	
 19361  004380                     __end_of_get_fattime:
 19362                           	opt stack 0
 19363                           tosu	equ	0xFFF
 19364                           tosh	equ	0xFFE
 19365                           tosl	equ	0xFFD
 19366                           pclath	equ	0xFFA
 19367                           tblptru	equ	0xFF8
 19368                           tblptrh	equ	0xFF7
 19369                           tblptrl	equ	0xFF6
 19370                           tablat	equ	0xFF5
 19371                           prodh	equ	0xFF4
 19372                           prodl	equ	0xFF3
 19373                           intcon	equ	0xFF2
 19374                           intcon2	equ	0xFF1
 19375                           intcon3	equ	0xFF0
 19376                           indf0	equ	0xFEF
 19377                           postinc0	equ	0xFEE
 19378                           fsr0h	equ	0xFEA
 19379                           fsr0l	equ	0xFE9
 19380                           wreg	equ	0xFE8
 19381                           indf1	equ	0xFE7
 19382                           postinc1	equ	0xFE6
 19383                           postdec1	equ	0xFE5
 19384                           fsr1h	equ	0xFE2
 19385                           fsr1l	equ	0xFE1
 19386                           indf2	equ	0xFDF
 19387                           postinc2	equ	0xFDE
 19388                           postdec2	equ	0xFDD
 19389                           plusw2	equ	0xFDB
 19390                           fsr2h	equ	0xFDA
 19391                           fsr2l	equ	0xFD9
 19392                           status	equ	0xFD8
 19393                           
 19394 ;; *************** function _escreve_inteiro_lcd *****************
 19395 ;; Defined at:
 19396 ;;		line 376 in file "bibliotecas/display_lcd.c"
 19397 ;; Parameters:    Size  Location     Type
 19398 ;;  valor           2   24[BANK0 ] int 
 19399 ;; Auto vars:     Size  Location     Type
 19400 ;;  texto           7   26[BANK0 ] unsigned char [7]
 19401 ;; Return value:  Size  Location     Type
 19402 ;;                  1    wreg      void 
 19403 ;; Registers used:
 19404 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19405 ;; Tracked objects:
 19406 ;;		On entry : 0/0
 19407 ;;		On exit  : 0/0
 19408 ;;		Unchanged: 0/0
 19409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19410 ;;      Params:         0       2       0       0       0       0       0       0       0
 19411 ;;      Locals:         0       7       0       0       0       0       0       0       0
 19412 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19413 ;;      Totals:         0       9       0       0       0       0       0       0       0
 19414 ;;Total ram usage:        9 bytes
 19415 ;; Hardware stack levels used:    1
 19416 ;; Hardware stack levels required when called:    6
 19417 ;; This function calls:
 19418 ;;		_escreve_frase_ram_lcd
 19419 ;;		_itoa
 19420 ;; This function is called by:
 19421 ;;		_verifica_fence_externo
 19422 ;;		_escrita_sdcard
 19423 ;;		_escreve_float_lcd
 19424 ;; This function uses a non-reentrant model
 19425 ;;
 19426                           
 19427                           	psect	text74
 19428  0056A2                     __ptext74:
 19429                           	opt stack 0
 19430  0056A2                     _escreve_inteiro_lcd:
 19431                           	opt stack 22
 19432                           
 19433                           ;display_lcd.c: 378: char texto[7] = "000000";
 19434                           
 19435                           ; BSR set to: 0
 19436                           ;incstack = 0
 19437  0056A2  EE21  F0EA         	lfsr	2,escreve_inteiro_lcd@F3966
 19438  0056A6  EE10  F07A         	lfsr	1,escreve_inteiro_lcd@texto
 19439  0056AA  0E06               	movlw	6
 19440  0056AC                     u13071:
 19441  0056AC  CFDB FFE3          	movff	plusw2,plusw1
 19442  0056B0  06E8               	decf	wreg,f,c
 19443  0056B2  E2FC               	bc	u13071
 19444                           
 19445                           ;display_lcd.c: 379: itoa(texto,valor, 10);
 19446  0056B4  0E7A               	movlw	low escreve_inteiro_lcd@texto
 19447  0056B6  0100               	movlb	0	; () banked
 19448  0056B8  6F70               	movwf	itoa@buf& (0+255),b
 19449  0056BA  0E00               	movlw	high escreve_inteiro_lcd@texto
 19450  0056BC  6F71               	movwf	(itoa@buf+1)& (0+255),b
 19451  0056BE  C078  F072         	movff	escreve_inteiro_lcd@valor,itoa@val
 19452  0056C2  C079  F073         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
 19453  0056C6  0E00               	movlw	0
 19454  0056C8  6F75               	movwf	(itoa@base+1)& (0+255),b
 19455  0056CA  0E0A               	movlw	10
 19456  0056CC  6F74               	movwf	itoa@base& (0+255),b
 19457  0056CE  ECCB  F02A         	call	_itoa	;wreg free
 19458                           
 19459                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
 19460  0056D2  0E7A               	movlw	low escreve_inteiro_lcd@texto
 19461  0056D4  0100               	movlb	0	; () banked
 19462  0056D6  6F61               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 19463  0056D8  0E00               	movlw	high escreve_inteiro_lcd@texto
 19464  0056DA  6F62               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 19465  0056DC  EC99  F029         	call	_escreve_frase_ram_lcd	;wreg free
 19466  0056E0  0012               	return		;funcret
 19467  0056E2                     __end_of_escreve_inteiro_lcd:
 19468                           	opt stack 0
 19469                           tosu	equ	0xFFF
 19470                           tosh	equ	0xFFE
 19471                           tosl	equ	0xFFD
 19472                           pclath	equ	0xFFA
 19473                           tblptru	equ	0xFF8
 19474                           tblptrh	equ	0xFF7
 19475                           tblptrl	equ	0xFF6
 19476                           tablat	equ	0xFF5
 19477                           prodh	equ	0xFF4
 19478                           prodl	equ	0xFF3
 19479                           intcon	equ	0xFF2
 19480                           intcon2	equ	0xFF1
 19481                           intcon3	equ	0xFF0
 19482                           indf0	equ	0xFEF
 19483                           postinc0	equ	0xFEE
 19484                           fsr0h	equ	0xFEA
 19485                           fsr0l	equ	0xFE9
 19486                           wreg	equ	0xFE8
 19487                           indf1	equ	0xFE7
 19488                           postinc1	equ	0xFE6
 19489                           postdec1	equ	0xFE5
 19490                           plusw1	equ	0xFE3
 19491                           fsr1h	equ	0xFE2
 19492                           fsr1l	equ	0xFE1
 19493                           indf2	equ	0xFDF
 19494                           postinc2	equ	0xFDE
 19495                           postdec2	equ	0xFDD
 19496                           plusw2	equ	0xFDB
 19497                           fsr2h	equ	0xFDA
 19498                           fsr2l	equ	0xFD9
 19499                           status	equ	0xFD8
 19500                           
 19501 ;; *************** function _itoa *****************
 19502 ;; Defined at:
 19503 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 19504 ;; Parameters:    Size  Location     Type
 19505 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 19506 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 19507 ;;  val             2   18[BANK0 ] int 
 19508 ;;  base            2   20[BANK0 ] int 
 19509 ;; Auto vars:     Size  Location     Type
 19510 ;;  cp              2   22[BANK0 ] PTR unsigned char 
 19511 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 19512 ;; Return value:  Size  Location     Type
 19513 ;;                  2   16[BANK0 ] PTR unsigned char 
 19514 ;; Registers used:
 19515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19516 ;; Tracked objects:
 19517 ;;		On entry : 0/0
 19518 ;;		On exit  : 0/0
 19519 ;;		Unchanged: 0/0
 19520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19521 ;;      Params:         0       6       0       0       0       0       0       0       0
 19522 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19523 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19524 ;;      Totals:         0       8       0       0       0       0       0       0       0
 19525 ;;Total ram usage:        8 bytes
 19526 ;; Hardware stack levels used:    1
 19527 ;; Hardware stack levels required when called:    5
 19528 ;; This function calls:
 19529 ;;		_utoa
 19530 ;; This function is called by:
 19531 ;;		_escreve_inteiro_lcd
 19532 ;;		_escreve_inteiro_uart
 19533 ;; This function uses a non-reentrant model
 19534 ;;
 19535                           
 19536                           	psect	text75
 19537  005596                     __ptext75:
 19538                           	opt stack 0
 19539  005596                     _itoa:
 19540                           	opt stack 22
 19541                           
 19542                           ;incstack = 0
 19543  005596  C070  F076         	movff	itoa@buf,itoa@cp
 19544  00559A  C071  F077         	movff	itoa@buf+1,itoa@cp+1
 19545  00559E  0100               	movlb	0	; () banked
 19546  0055A0  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 19547  0055A2  D00C               	goto	l1708
 19548                           
 19549                           ; BSR set to: 0
 19550  0055A4  C070  FFD9         	movff	itoa@buf,fsr2l
 19551  0055A8  C071  FFDA         	movff	itoa@buf+1,fsr2h
 19552  0055AC  0E2D               	movlw	45
 19553  0055AE  6EDF               	movwf	indf2,c
 19554                           
 19555                           ; BSR set to: 0
 19556  0055B0  4B70               	infsnz	itoa@buf& (0+255),f,b
 19557  0055B2  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 19558                           
 19559                           ; BSR set to: 0
 19560  0055B4  6D72               	negf	itoa@val& (0+255),b
 19561  0055B6  1F73               	comf	(itoa@val+1)& (0+255),f,b
 19562  0055B8  B0D8               	btfsc	status,0,c
 19563  0055BA  2B73               	incf	(itoa@val+1)& (0+255),f,b
 19564  0055BC                     l1708:
 19565                           
 19566                           ; BSR set to: 0
 19567                           
 19568                           ; BSR set to: 0
 19569  0055BC  C070  F067         	movff	itoa@buf,utoa@buf
 19570  0055C0  C071  F068         	movff	itoa@buf+1,utoa@buf+1
 19571  0055C4  C072  F069         	movff	itoa@val,utoa@val
 19572  0055C8  C073  F06A         	movff	itoa@val+1,utoa@val+1
 19573  0055CC  C074  F06B         	movff	itoa@base,utoa@base
 19574  0055D0  C075  F06C         	movff	itoa@base+1,utoa@base+1
 19575  0055D4  EC46  F023         	call	_utoa	;wreg free
 19576  0055D8  0012               	return	
 19577  0055DA                     __end_of_itoa:
 19578                           	opt stack 0
 19579                           tosu	equ	0xFFF
 19580                           tosh	equ	0xFFE
 19581                           tosl	equ	0xFFD
 19582                           pclath	equ	0xFFA
 19583                           tblptru	equ	0xFF8
 19584                           tblptrh	equ	0xFF7
 19585                           tblptrl	equ	0xFF6
 19586                           tablat	equ	0xFF5
 19587                           prodh	equ	0xFF4
 19588                           prodl	equ	0xFF3
 19589                           intcon	equ	0xFF2
 19590                           intcon2	equ	0xFF1
 19591                           intcon3	equ	0xFF0
 19592                           indf0	equ	0xFEF
 19593                           postinc0	equ	0xFEE
 19594                           fsr0h	equ	0xFEA
 19595                           fsr0l	equ	0xFE9
 19596                           wreg	equ	0xFE8
 19597                           indf1	equ	0xFE7
 19598                           postinc1	equ	0xFE6
 19599                           postdec1	equ	0xFE5
 19600                           plusw1	equ	0xFE3
 19601                           fsr1h	equ	0xFE2
 19602                           fsr1l	equ	0xFE1
 19603                           indf2	equ	0xFDF
 19604                           postinc2	equ	0xFDE
 19605                           postdec2	equ	0xFDD
 19606                           plusw2	equ	0xFDB
 19607                           fsr2h	equ	0xFDA
 19608                           fsr2l	equ	0xFD9
 19609                           status	equ	0xFD8
 19610                           
 19611 ;; *************** function _utoa *****************
 19612 ;; Defined at:
 19613 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 19614 ;; Parameters:    Size  Location     Type
 19615 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 19616 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 19617 ;;  val             2    9[BANK0 ] unsigned int 
 19618 ;;  base            2   11[BANK0 ] int 
 19619 ;; Auto vars:     Size  Location     Type
 19620 ;;  v               2   13[BANK0 ] unsigned int 
 19621 ;;  c               1   15[BANK0 ] unsigned char 
 19622 ;; Return value:  Size  Location     Type
 19623 ;;                  2    7[BANK0 ] PTR unsigned char 
 19624 ;; Registers used:
 19625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19626 ;; Tracked objects:
 19627 ;;		On entry : 0/0
 19628 ;;		On exit  : 0/0
 19629 ;;		Unchanged: 0/0
 19630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19631 ;;      Params:         0       6       0       0       0       0       0       0       0
 19632 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19633 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19634 ;;      Totals:         0       9       0       0       0       0       0       0       0
 19635 ;;Total ram usage:        9 bytes
 19636 ;; Hardware stack levels used:    1
 19637 ;; Hardware stack levels required when called:    4
 19638 ;; This function calls:
 19639 ;;		___lwdiv
 19640 ;;		___lwmod
 19641 ;; This function is called by:
 19642 ;;		_itoa
 19643 ;; This function uses a non-reentrant model
 19644 ;;
 19645                           
 19646                           	psect	text76
 19647  00468C                     __ptext76:
 19648                           	opt stack 0
 19649  00468C                     _utoa:
 19650                           	opt stack 22
 19651                           
 19652                           ;incstack = 0
 19653  00468C  C069  F06D         	movff	utoa@val,utoa@v
 19654  004690  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 19655  004694  C06D  F060         	movff	utoa@v,___lwdiv@dividend
 19656  004698  C06E  F061         	movff	utoa@v+1,___lwdiv@dividend+1
 19657  00469C  C06B  F062         	movff	utoa@base,___lwdiv@divisor
 19658  0046A0  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
 19659  0046A4  EC6F  F029         	call	___lwdiv	;wreg free
 19660  0046A8  C060  F06D         	movff	?___lwdiv,utoa@v
 19661  0046AC  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 19662  0046B0  0100               	movlb	0	; () banked
 19663  0046B2  4B67               	infsnz	utoa@buf& (0+255),f,b
 19664  0046B4  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 19665                           
 19666                           ; BSR set to: 0
 19667  0046B6  516D               	movf	utoa@v& (0+255),w,b
 19668  0046B8  116E               	iorwf	(utoa@v+1)& (0+255),w,b
 19669  0046BA  A4D8               	btfss	status,2,c
 19670  0046BC  D7EB               	goto	l1712
 19671                           
 19672                           ; BSR set to: 0
 19673                           
 19674                           ; BSR set to: 0
 19675  0046BE  C067  FFD9         	movff	utoa@buf,fsr2l
 19676  0046C2  C068  FFDA         	movff	utoa@buf+1,fsr2h
 19677  0046C6  0E00               	movlw	0
 19678  0046C8  6EDF               	movwf	indf2,c
 19679                           
 19680                           ; BSR set to: 0
 19681  0046CA  0767               	decf	utoa@buf& (0+255),f,b
 19682  0046CC  A0D8               	btfss	status,0,c
 19683  0046CE  0768               	decf	(utoa@buf+1)& (0+255),f,b
 19684  0046D0                     
 19685                           ; BSR set to: 0
 19686                           
 19687                           ; BSR set to: 0
 19688  0046D0  C069  F060         	movff	utoa@val,___lwmod@dividend
 19689  0046D4  C06A  F061         	movff	utoa@val+1,___lwmod@dividend+1
 19690  0046D8  C06B  F062         	movff	utoa@base,___lwmod@divisor
 19691  0046DC  C06C  F063         	movff	utoa@base+1,___lwmod@divisor+1
 19692  0046E0  ECED  F02A         	call	___lwmod	;wreg free
 19693  0046E4  0100               	movlb	0	; () banked
 19694  0046E6  5160               	movf	?___lwmod& (0+255),w,b
 19695  0046E8  6F6F               	movwf	utoa@c& (0+255),b
 19696                           
 19697                           ; BSR set to: 0
 19698  0046EA  C069  F060         	movff	utoa@val,___lwdiv@dividend
 19699  0046EE  C06A  F061         	movff	utoa@val+1,___lwdiv@dividend+1
 19700  0046F2  C06B  F062         	movff	utoa@base,___lwdiv@divisor
 19701  0046F6  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
 19702  0046FA  EC6F  F029         	call	___lwdiv	;wreg free
 19703  0046FE  C060  F069         	movff	?___lwdiv,utoa@val
 19704  004702  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 19705  004706  0E09               	movlw	9
 19706  004708  0100               	movlb	0	; () banked
 19707  00470A  656F               	cpfsgt	utoa@c& (0+255),b
 19708  00470C  D002               	goto	l1715
 19709                           
 19710                           ; BSR set to: 0
 19711  00470E  0E07               	movlw	7
 19712  004710  276F               	addwf	utoa@c& (0+255),f,b
 19713  004712                     l1715:
 19714                           
 19715                           ; BSR set to: 0
 19716  004712  0E30               	movlw	48
 19717  004714  276F               	addwf	utoa@c& (0+255),f,b
 19718                           
 19719                           ; BSR set to: 0
 19720  004716  C067  FFD9         	movff	utoa@buf,fsr2l
 19721  00471A  C068  FFDA         	movff	utoa@buf+1,fsr2h
 19722  00471E  C06F  FFDF         	movff	utoa@c,indf2
 19723                           
 19724                           ; BSR set to: 0
 19725  004722  0767               	decf	utoa@buf& (0+255),f,b
 19726  004724  A0D8               	btfss	status,0,c
 19727  004726  0768               	decf	(utoa@buf+1)& (0+255),f,b
 19728                           
 19729                           ; BSR set to: 0
 19730  004728  5169               	movf	utoa@val& (0+255),w,b
 19731  00472A  116A               	iorwf	(utoa@val+1)& (0+255),w,b
 19732  00472C  A4D8               	btfss	status,2,c
 19733  00472E  D7D0               	goto	l1714
 19734                           
 19735                           ; BSR set to: 0
 19736                           ;	Return value of _utoa is never used
 19737                           
 19738                           ; BSR set to: 0
 19739  004730  4B67               	infsnz	utoa@buf& (0+255),f,b
 19740  004732  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 19741  004734  0012               	return	
 19742  004736                     __end_of_utoa:
 19743                           	opt stack 0
 19744                           tosu	equ	0xFFF
 19745                           tosh	equ	0xFFE
 19746                           tosl	equ	0xFFD
 19747                           pclath	equ	0xFFA
 19748                           tblptru	equ	0xFF8
 19749                           tblptrh	equ	0xFF7
 19750                           tblptrl	equ	0xFF6
 19751                           tablat	equ	0xFF5
 19752                           prodh	equ	0xFF4
 19753                           prodl	equ	0xFF3
 19754                           intcon	equ	0xFF2
 19755                           intcon2	equ	0xFF1
 19756                           intcon3	equ	0xFF0
 19757                           indf0	equ	0xFEF
 19758                           postinc0	equ	0xFEE
 19759                           fsr0h	equ	0xFEA
 19760                           fsr0l	equ	0xFE9
 19761                           wreg	equ	0xFE8
 19762                           indf1	equ	0xFE7
 19763                           postinc1	equ	0xFE6
 19764                           postdec1	equ	0xFE5
 19765                           plusw1	equ	0xFE3
 19766                           fsr1h	equ	0xFE2
 19767                           fsr1l	equ	0xFE1
 19768                           indf2	equ	0xFDF
 19769                           postinc2	equ	0xFDE
 19770                           postdec2	equ	0xFDD
 19771                           plusw2	equ	0xFDB
 19772                           fsr2h	equ	0xFDA
 19773                           fsr2l	equ	0xFD9
 19774                           status	equ	0xFD8
 19775                           
 19776 ;; *************** function ___lwmod *****************
 19777 ;; Defined at:
 19778 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 19779 ;; Parameters:    Size  Location     Type
 19780 ;;  dividend        2    0[BANK0 ] unsigned int 
 19781 ;;  divisor         2    2[BANK0 ] unsigned int 
 19782 ;; Auto vars:     Size  Location     Type
 19783 ;;  counter         1   32[COMRAM] unsigned char 
 19784 ;; Return value:  Size  Location     Type
 19785 ;;                  2    0[BANK0 ] unsigned int 
 19786 ;; Registers used:
 19787 ;;		wreg, status,2, status,0
 19788 ;; Tracked objects:
 19789 ;;		On entry : 0/0
 19790 ;;		On exit  : 0/0
 19791 ;;		Unchanged: 0/0
 19792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19793 ;;      Params:         0       4       0       0       0       0       0       0       0
 19794 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19795 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19796 ;;      Totals:         1       4       0       0       0       0       0       0       0
 19797 ;;Total ram usage:        5 bytes
 19798 ;; Hardware stack levels used:    1
 19799 ;; Hardware stack levels required when called:    3
 19800 ;; This function calls:
 19801 ;;		Nothing
 19802 ;; This function is called by:
 19803 ;;		_utoa
 19804 ;;		_converte_inteiro_matriz
 19805 ;; This function uses a non-reentrant model
 19806 ;;
 19807                           
 19808                           	psect	text77
 19809  0055DA                     __ptext77:
 19810                           	opt stack 0
 19811  0055DA                     ___lwmod:
 19812                           	opt stack 22
 19813                           
 19814                           ; BSR set to: 0
 19815                           ;incstack = 0
 19816  0055DA  0100               	movlb	0	; () banked
 19817  0055DC  5162               	movf	___lwmod@divisor& (0+255),w,b
 19818  0055DE  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 19819  0055E0  B4D8               	btfsc	status,2,c
 19820  0055E2  D018               	goto	l1810
 19821                           
 19822                           ; BSR set to: 0
 19823  0055E4  0E01               	movlw	1
 19824  0055E6  6E21               	movwf	___lwmod@counter,c
 19825  0055E8  D004               	goto	l1805
 19826  0055EA                     
 19827                           ; BSR set to: 0
 19828                           
 19829                           ; BSR set to: 0
 19830  0055EA  90D8               	bcf	status,0,c
 19831  0055EC  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 19832  0055EE  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 19833  0055F0  2A21               	incf	___lwmod@counter,f,c
 19834  0055F2                     l1805:
 19835                           
 19836                           ; BSR set to: 0
 19837                           
 19838                           ; BSR set to: 0
 19839  0055F2  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 19840  0055F4  D7FA               	goto	l1806
 19841  0055F6                     u11580:
 19842                           
 19843                           ; BSR set to: 0
 19844                           
 19845                           ; BSR set to: 0
 19846                           
 19847                           ; BSR set to: 0
 19848  0055F6  5162               	movf	___lwmod@divisor& (0+255),w,b
 19849  0055F8  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 19850  0055FA  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19851  0055FC  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 19852  0055FE  A0D8               	btfss	status,0,c
 19853  005600  D004               	goto	l1809
 19854                           
 19855                           ; BSR set to: 0
 19856  005602  5162               	movf	___lwmod@divisor& (0+255),w,b
 19857  005604  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 19858  005606  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19859  005608  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 19860  00560A                     l1809:
 19861                           
 19862                           ; BSR set to: 0
 19863                           
 19864                           ; BSR set to: 0
 19865  00560A  90D8               	bcf	status,0,c
 19866  00560C  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 19867  00560E  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 19868                           
 19869                           ; BSR set to: 0
 19870  005610  2E21               	decfsz	___lwmod@counter,f,c
 19871  005612  D7F1               	goto	u11580
 19872  005614                     l1810:
 19873                           
 19874                           ; BSR set to: 0
 19875                           
 19876                           ; BSR set to: 0
 19877  005614  C060  F060         	movff	___lwmod@dividend,?___lwmod
 19878  005618  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 19879                           
 19880                           ; BSR set to: 0
 19881  00561C  0012               	return		;funcret
 19882  00561E                     __end_of___lwmod:
 19883                           	opt stack 0
 19884                           tosu	equ	0xFFF
 19885                           tosh	equ	0xFFE
 19886                           tosl	equ	0xFFD
 19887                           pclath	equ	0xFFA
 19888                           tblptru	equ	0xFF8
 19889                           tblptrh	equ	0xFF7
 19890                           tblptrl	equ	0xFF6
 19891                           tablat	equ	0xFF5
 19892                           prodh	equ	0xFF4
 19893                           prodl	equ	0xFF3
 19894                           intcon	equ	0xFF2
 19895                           intcon2	equ	0xFF1
 19896                           intcon3	equ	0xFF0
 19897                           indf0	equ	0xFEF
 19898                           postinc0	equ	0xFEE
 19899                           fsr0h	equ	0xFEA
 19900                           fsr0l	equ	0xFE9
 19901                           wreg	equ	0xFE8
 19902                           indf1	equ	0xFE7
 19903                           postinc1	equ	0xFE6
 19904                           postdec1	equ	0xFE5
 19905                           plusw1	equ	0xFE3
 19906                           fsr1h	equ	0xFE2
 19907                           fsr1l	equ	0xFE1
 19908                           indf2	equ	0xFDF
 19909                           postinc2	equ	0xFDE
 19910                           postdec2	equ	0xFDD
 19911                           plusw2	equ	0xFDB
 19912                           fsr2h	equ	0xFDA
 19913                           fsr2l	equ	0xFD9
 19914                           status	equ	0xFD8
 19915                           
 19916 ;; *************** function ___lwdiv *****************
 19917 ;; Defined at:
 19918 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 19919 ;; Parameters:    Size  Location     Type
 19920 ;;  dividend        2    0[BANK0 ] unsigned int 
 19921 ;;  divisor         2    2[BANK0 ] unsigned int 
 19922 ;; Auto vars:     Size  Location     Type
 19923 ;;  quotient        2    5[BANK0 ] unsigned int 
 19924 ;;  counter         1    4[BANK0 ] unsigned char 
 19925 ;; Return value:  Size  Location     Type
 19926 ;;                  2    0[BANK0 ] unsigned int 
 19927 ;; Registers used:
 19928 ;;		wreg, status,2, status,0
 19929 ;; Tracked objects:
 19930 ;;		On entry : 0/0
 19931 ;;		On exit  : 0/0
 19932 ;;		Unchanged: 0/0
 19933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19934 ;;      Params:         0       4       0       0       0       0       0       0       0
 19935 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19936 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19937 ;;      Totals:         0       7       0       0       0       0       0       0       0
 19938 ;;Total ram usage:        7 bytes
 19939 ;; Hardware stack levels used:    1
 19940 ;; Hardware stack levels required when called:    3
 19941 ;; This function calls:
 19942 ;;		Nothing
 19943 ;; This function is called by:
 19944 ;;		_utoa
 19945 ;;		_converte_inteiro_matriz
 19946 ;; This function uses a non-reentrant model
 19947 ;;
 19948                           
 19949                           	psect	text78
 19950  0052DE                     __ptext78:
 19951                           	opt stack 0
 19952  0052DE                     ___lwdiv:
 19953                           	opt stack 22
 19954                           
 19955                           ; BSR set to: 0
 19956                           ;incstack = 0
 19957  0052DE  0E00               	movlw	0
 19958  0052E0  0100               	movlb	0	; () banked
 19959  0052E2  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 19960  0052E4  0E00               	movlw	0
 19961  0052E6  6F65               	movwf	___lwdiv@quotient& (0+255),b
 19962                           
 19963                           ; BSR set to: 0
 19964  0052E8  5162               	movf	___lwdiv@divisor& (0+255),w,b
 19965  0052EA  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 19966  0052EC  B4D8               	btfsc	status,2,c
 19967  0052EE  D01C               	goto	l1800
 19968                           
 19969                           ; BSR set to: 0
 19970  0052F0  0E01               	movlw	1
 19971  0052F2  6F64               	movwf	___lwdiv@counter& (0+255),b
 19972  0052F4  D004               	goto	l1795
 19973  0052F6                     
 19974                           ; BSR set to: 0
 19975                           
 19976                           ; BSR set to: 0
 19977  0052F6  90D8               	bcf	status,0,c
 19978  0052F8  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 19979  0052FA  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 19980  0052FC  2B64               	incf	___lwdiv@counter& (0+255),f,b
 19981  0052FE                     l1795:
 19982                           
 19983                           ; BSR set to: 0
 19984                           
 19985                           ; BSR set to: 0
 19986  0052FE  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 19987  005300  D7FA               	goto	l1796
 19988  005302                     u11550:
 19989                           
 19990                           ; BSR set to: 0
 19991                           
 19992                           ; BSR set to: 0
 19993                           
 19994                           ; BSR set to: 0
 19995  005302  90D8               	bcf	status,0,c
 19996  005304  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 19997  005306  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 19998                           
 19999                           ; BSR set to: 0
 20000  005308  5162               	movf	___lwdiv@divisor& (0+255),w,b
 20001  00530A  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 20002  00530C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 20003  00530E  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 20004  005310  A0D8               	btfss	status,0,c
 20005  005312  D005               	goto	l1799
 20006                           
 20007                           ; BSR set to: 0
 20008  005314  5162               	movf	___lwdiv@divisor& (0+255),w,b
 20009  005316  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 20010  005318  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 20011  00531A  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 20012                           
 20013                           ; BSR set to: 0
 20014  00531C  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 20015  00531E                     l1799:
 20016                           
 20017                           ; BSR set to: 0
 20018                           
 20019                           ; BSR set to: 0
 20020  00531E  90D8               	bcf	status,0,c
 20021  005320  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 20022  005322  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 20023                           
 20024                           ; BSR set to: 0
 20025  005324  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 20026  005326  D7ED               	goto	u11550
 20027  005328                     l1800:
 20028                           
 20029                           ; BSR set to: 0
 20030                           
 20031                           ; BSR set to: 0
 20032  005328  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 20033  00532C  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 20034                           
 20035                           ; BSR set to: 0
 20036  005330  0012               	return		;funcret
 20037  005332                     __end_of___lwdiv:
 20038                           	opt stack 0
 20039                           tosu	equ	0xFFF
 20040                           tosh	equ	0xFFE
 20041                           tosl	equ	0xFFD
 20042                           pclath	equ	0xFFA
 20043                           tblptru	equ	0xFF8
 20044                           tblptrh	equ	0xFF7
 20045                           tblptrl	equ	0xFF6
 20046                           tablat	equ	0xFF5
 20047                           prodh	equ	0xFF4
 20048                           prodl	equ	0xFF3
 20049                           intcon	equ	0xFF2
 20050                           intcon2	equ	0xFF1
 20051                           intcon3	equ	0xFF0
 20052                           indf0	equ	0xFEF
 20053                           postinc0	equ	0xFEE
 20054                           fsr0h	equ	0xFEA
 20055                           fsr0l	equ	0xFE9
 20056                           wreg	equ	0xFE8
 20057                           indf1	equ	0xFE7
 20058                           postinc1	equ	0xFE6
 20059                           postdec1	equ	0xFE5
 20060                           plusw1	equ	0xFE3
 20061                           fsr1h	equ	0xFE2
 20062                           fsr1l	equ	0xFE1
 20063                           indf2	equ	0xFDF
 20064                           postinc2	equ	0xFDE
 20065                           postdec2	equ	0xFDD
 20066                           plusw2	equ	0xFDB
 20067                           fsr2h	equ	0xFDA
 20068                           fsr2l	equ	0xFD9
 20069                           status	equ	0xFD8
 20070                           
 20071 ;; *************** function _escreve_frase_ram_lcd *****************
 20072 ;; Defined at:
 20073 ;;		line 445 in file "bibliotecas/display_lcd.c"
 20074 ;; Parameters:    Size  Location     Type
 20075 ;;  buffer          2    1[BANK0 ] PTR unsigned char 
 20076 ;;		 -> escreve_inteiro_lcd@texto(7), STR_14(11), STR_13(10), STR_12(16), 
 20077 ;;		 -> STR_11(11), string_dado(44), STR_8(9), STR_7(10), 
 20078 ;;		 -> STR_6(10), STR_5(14), STR_4(21), STR_3(15), 
 20079 ;;		 -> poligono_ext(198), mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 20080 ;; Auto vars:     Size  Location     Type
 20081 ;;		None
 20082 ;; Return value:  Size  Location     Type
 20083 ;;                  1    wreg      void 
 20084 ;; Registers used:
 20085 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20086 ;; Tracked objects:
 20087 ;;		On entry : 0/0
 20088 ;;		On exit  : 0/0
 20089 ;;		Unchanged: 0/0
 20090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20091 ;;      Params:         0       2       0       0       0       0       0       0       0
 20092 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20093 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20094 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20095 ;;Total ram usage:        2 bytes
 20096 ;; Hardware stack levels used:    1
 20097 ;; Hardware stack levels required when called:    5
 20098 ;; This function calls:
 20099 ;;		_escreve_caractere_lcd
 20100 ;; This function is called by:
 20101 ;;		_mensagem_inicial
 20102 ;;		_verifica_fence_externo
 20103 ;;		_escrita_sdcard
 20104 ;;		_sdc_reset
 20105 ;;		_sdc_disk_initialize
 20106 ;;		_escreve_inteiro_lcd
 20107 ;;		_sdcard_init
 20108 ;; This function uses a non-reentrant model
 20109 ;;
 20110                           
 20111                           	psect	text79
 20112  005332                     __ptext79:
 20113                           	opt stack 0
 20114  005332                     _escreve_frase_ram_lcd:
 20115                           	opt stack 24
 20116                           
 20117                           ;display_lcd.c: 447: while(*buffer)
 20118                           
 20119                           ; BSR set to: 0
 20120                           ;incstack = 0
 20121  005332  D015               	goto	l643
 20122  005334                     
 20123                           ;display_lcd.c: 448: {
 20124                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 20125  005334  C061  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 20126  005338  C062  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 20127  00533C  6AF8               	clrf	tblptru,c
 20128  00533E  0E07               	movlw	(high __ramtop+-1)
 20129  005340  64F7               	cpfsgt	tblptrh,c
 20130  005342  D003               	bra	u10587
 20131  005344  0008               	tblrd		*
 20132  005346  50F5               	movf	tablat,w,c
 20133  005348  D005               	bra	u10580
 20134  00534A                     u10587:
 20135  00534A  CFF6 FFE9          	movff	tblptrl,fsr0l
 20136  00534E  CFF7 FFEA          	movff	tblptrh,fsr0h
 20137  005352  50EF               	movf	indf0,w,c
 20138  005354                     u10580:
 20139  005354  ECE1  F027         	call	_escreve_caractere_lcd
 20140                           
 20141                           ;display_lcd.c: 450: buffer++;
 20142  005358  0100               	movlb	0	; () banked
 20143  00535A  4B61               	infsnz	escreve_frase_ram_lcd@buffer& (0+255),f,b
 20144  00535C  2B62               	incf	(escreve_frase_ram_lcd@buffer+1)& (0+255),f,b
 20145  00535E                     l643:
 20146                           
 20147                           ; BSR set to: 0
 20148  00535E  C061  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 20149  005362  C062  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 20150  005366  6AF8               	clrf	tblptru,c
 20151  005368  0E07               	movlw	(high __ramtop+-1)
 20152  00536A  64F7               	cpfsgt	tblptrh,c
 20153  00536C  D003               	bra	u10597
 20154  00536E  0008               	tblrd		*
 20155  005370  50F5               	movf	tablat,w,c
 20156  005372  D005               	bra	u10590
 20157  005374                     u10597:
 20158  005374  CFF6 FFE9          	movff	tblptrl,fsr0l
 20159  005378  CFF7 FFEA          	movff	tblptrh,fsr0h
 20160  00537C  50EF               	movf	indf0,w,c
 20161  00537E                     u10590:
 20162  00537E  0900               	iorlw	0
 20163  005380  B4D8               	btfsc	status,2,c
 20164  005382  0012               	return	
 20165  005384  D7D7               	goto	l644
 20166  005386                     __end_of_escreve_frase_ram_lcd:
 20167                           	opt stack 0
 20168                           tosu	equ	0xFFF
 20169                           tosh	equ	0xFFE
 20170                           tosl	equ	0xFFD
 20171                           pclath	equ	0xFFA
 20172                           tblptru	equ	0xFF8
 20173                           tblptrh	equ	0xFF7
 20174                           tblptrl	equ	0xFF6
 20175                           tablat	equ	0xFF5
 20176                           prodh	equ	0xFF4
 20177                           prodl	equ	0xFF3
 20178                           intcon	equ	0xFF2
 20179                           intcon2	equ	0xFF1
 20180                           intcon3	equ	0xFF0
 20181                           indf0	equ	0xFEF
 20182                           postinc0	equ	0xFEE
 20183                           fsr0h	equ	0xFEA
 20184                           fsr0l	equ	0xFE9
 20185                           wreg	equ	0xFE8
 20186                           indf1	equ	0xFE7
 20187                           postinc1	equ	0xFE6
 20188                           postdec1	equ	0xFE5
 20189                           plusw1	equ	0xFE3
 20190                           fsr1h	equ	0xFE2
 20191                           fsr1l	equ	0xFE1
 20192                           indf2	equ	0xFDF
 20193                           postinc2	equ	0xFDE
 20194                           postdec2	equ	0xFDD
 20195                           plusw2	equ	0xFDB
 20196                           fsr2h	equ	0xFDA
 20197                           fsr2l	equ	0xFD9
 20198                           status	equ	0xFD8
 20199                           
 20200 ;; *************** function _escreve_caractere_lcd *****************
 20201 ;; Defined at:
 20202 ;;		line 323 in file "bibliotecas/display_lcd.c"
 20203 ;; Parameters:    Size  Location     Type
 20204 ;;  data            1    wreg     unsigned char 
 20205 ;; Auto vars:     Size  Location     Type
 20206 ;;  data            1    0[BANK0 ] unsigned char 
 20207 ;; Return value:  Size  Location     Type
 20208 ;;                  1    wreg      void 
 20209 ;; Registers used:
 20210 ;;		wreg, status,2, status,0, cstack
 20211 ;; Tracked objects:
 20212 ;;		On entry : 0/0
 20213 ;;		On exit  : 0/0
 20214 ;;		Unchanged: 0/0
 20215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20216 ;;      Params:         0       0       0       0       0       0       0       0       0
 20217 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20218 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20219 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20220 ;;Total ram usage:        1 bytes
 20221 ;; Hardware stack levels used:    1
 20222 ;; Hardware stack levels required when called:    4
 20223 ;; This function calls:
 20224 ;;		_delay
 20225 ;; This function is called by:
 20226 ;;		_escreve_frase_ram_lcd
 20227 ;;		_escreve_float_lcd
 20228 ;;		_escreve_frase_lcd
 20229 ;;		_cria_caractere_lcd
 20230 ;; This function uses a non-reentrant model
 20231 ;;
 20232                           
 20233                           	psect	text80
 20234  004FC2                     __ptext80:
 20235                           	opt stack 0
 20236  004FC2                     _escreve_caractere_lcd:
 20237                           	opt stack 24
 20238                           
 20239                           ;incstack = 0
 20240                           ;escreve_caractere_lcd@data stored from wreg
 20241  004FC2  0100               	movlb	0	; () banked
 20242  004FC4  6F60               	movwf	escreve_caractere_lcd@data& (0+255),b
 20243                           
 20244                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 20245  004FC6  9483               	bcf	3971,2,c	;volatile
 20246                           
 20247                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 20248  004FC8  8283               	bsf	3971,1,c	;volatile
 20249                           
 20250                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 20251  004FCA  9083               	bcf	3971,0,c	;volatile
 20252                           
 20253                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 20254  004FCC  0100               	movlb	0	; () banked
 20255  004FCE  A960               	btfss	escreve_caractere_lcd@data& (0+255),4,b
 20256  004FD0  D002               	goto	l610
 20257                           
 20258                           ; BSR set to: 0
 20259  004FD2  8883               	bsf	3971,4,c	;volatile
 20260  004FD4  D001               	goto	l611
 20261  004FD6                     l610:
 20262                           
 20263                           ; BSR set to: 0
 20264                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 20265  004FD6  9883               	bcf	3971,4,c	;volatile
 20266  004FD8                     l611:
 20267                           
 20268                           ; BSR set to: 0
 20269                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 20270                           
 20271                           ; BSR set to: 0
 20272  004FD8  AB60               	btfss	escreve_caractere_lcd@data& (0+255),5,b
 20273  004FDA  D002               	goto	l612
 20274                           
 20275                           ; BSR set to: 0
 20276  004FDC  8A83               	bsf	3971,5,c	;volatile
 20277  004FDE  D001               	goto	l613
 20278  004FE0                     l612:
 20279                           
 20280                           ; BSR set to: 0
 20281                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 20282  004FE0  9A83               	bcf	3971,5,c	;volatile
 20283  004FE2                     l613:
 20284                           
 20285                           ; BSR set to: 0
 20286                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 20287                           
 20288                           ; BSR set to: 0
 20289  004FE2  AD60               	btfss	escreve_caractere_lcd@data& (0+255),6,b
 20290  004FE4  D002               	goto	l614
 20291                           
 20292                           ; BSR set to: 0
 20293  004FE6  8C83               	bsf	3971,6,c	;volatile
 20294  004FE8  D001               	goto	l615
 20295  004FEA                     l614:
 20296                           
 20297                           ; BSR set to: 0
 20298                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 20299  004FEA  9C83               	bcf	3971,6,c	;volatile
 20300  004FEC                     l615:
 20301                           
 20302                           ; BSR set to: 0
 20303                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 20304                           
 20305                           ; BSR set to: 0
 20306  004FEC  AF60               	btfss	escreve_caractere_lcd@data& (0+255),7,b
 20307  004FEE  D002               	goto	l616
 20308                           
 20309                           ; BSR set to: 0
 20310  004FF0  8E83               	bsf	3971,7,c	;volatile
 20311  004FF2  D001               	goto	l617
 20312  004FF4                     l616:
 20313                           
 20314                           ; BSR set to: 0
 20315                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 20316  004FF4  9E83               	bcf	3971,7,c	;volatile
 20317  004FF6                     l617:
 20318                           
 20319                           ; BSR set to: 0
 20320                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 20321  004FF6  8083               	bsf	3971,0,c	;volatile
 20322                           
 20323                           ; BSR set to: 0
 20324                           ;display_lcd.c: 342: delay();
 20325  004FF8  EC49  F02C         	call	_delay	;wreg free
 20326                           
 20327                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 20328  004FFC  9083               	bcf	3971,0,c	;volatile
 20329                           
 20330                           ;display_lcd.c: 344: delay();
 20331  004FFE  EC49  F02C         	call	_delay	;wreg free
 20332                           
 20333                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 20334  005002  0100               	movlb	0	; () banked
 20335  005004  A160               	btfss	escreve_caractere_lcd@data& (0+255),0,b
 20336  005006  D002               	goto	l618
 20337                           
 20338                           ; BSR set to: 0
 20339  005008  8883               	bsf	3971,4,c	;volatile
 20340  00500A  D001               	goto	l619
 20341  00500C                     l618:
 20342                           
 20343                           ; BSR set to: 0
 20344                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 20345  00500C  9883               	bcf	3971,4,c	;volatile
 20346  00500E                     l619:
 20347                           
 20348                           ; BSR set to: 0
 20349                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 20350  00500E  A360               	btfss	escreve_caractere_lcd@data& (0+255),1,b
 20351  005010  D002               	goto	l620
 20352                           
 20353                           ; BSR set to: 0
 20354  005012  8A83               	bsf	3971,5,c	;volatile
 20355  005014  D001               	goto	l621
 20356  005016                     l620:
 20357                           
 20358                           ; BSR set to: 0
 20359                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 20360  005016  9A83               	bcf	3971,5,c	;volatile
 20361  005018                     l621:
 20362                           
 20363                           ; BSR set to: 0
 20364                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 20365  005018  A560               	btfss	escreve_caractere_lcd@data& (0+255),2,b
 20366  00501A  D002               	goto	l622
 20367                           
 20368                           ; BSR set to: 0
 20369  00501C  8C83               	bsf	3971,6,c	;volatile
 20370  00501E  D001               	goto	l623
 20371  005020                     l622:
 20372                           
 20373                           ; BSR set to: 0
 20374                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 20375  005020  9C83               	bcf	3971,6,c	;volatile
 20376  005022                     l623:
 20377                           
 20378                           ; BSR set to: 0
 20379                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 20380  005022  A760               	btfss	escreve_caractere_lcd@data& (0+255),3,b
 20381  005024  D002               	goto	l624
 20382                           
 20383                           ; BSR set to: 0
 20384  005026  8E83               	bsf	3971,7,c	;volatile
 20385  005028  D001               	goto	l625
 20386  00502A                     l624:
 20387                           
 20388                           ; BSR set to: 0
 20389                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 20390  00502A  9E83               	bcf	3971,7,c	;volatile
 20391  00502C                     l625:
 20392                           
 20393                           ; BSR set to: 0
 20394                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 20395  00502C  8083               	bsf	3971,0,c	;volatile
 20396                           
 20397                           ; BSR set to: 0
 20398                           ;display_lcd.c: 359: delay();
 20399  00502E  EC49  F02C         	call	_delay	;wreg free
 20400                           
 20401                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 20402  005032  9083               	bcf	3971,0,c	;volatile
 20403                           
 20404                           ;display_lcd.c: 361: delay();
 20405  005034  EC49  F02C         	call	_delay	;wreg free
 20406  005038  0012               	return		;funcret
 20407  00503A                     __end_of_escreve_caractere_lcd:
 20408                           	opt stack 0
 20409                           tosu	equ	0xFFF
 20410                           tosh	equ	0xFFE
 20411                           tosl	equ	0xFFD
 20412                           pclath	equ	0xFFA
 20413                           tblptru	equ	0xFF8
 20414                           tblptrh	equ	0xFF7
 20415                           tblptrl	equ	0xFF6
 20416                           tablat	equ	0xFF5
 20417                           prodh	equ	0xFF4
 20418                           prodl	equ	0xFF3
 20419                           intcon	equ	0xFF2
 20420                           intcon2	equ	0xFF1
 20421                           intcon3	equ	0xFF0
 20422                           indf0	equ	0xFEF
 20423                           postinc0	equ	0xFEE
 20424                           fsr0h	equ	0xFEA
 20425                           fsr0l	equ	0xFE9
 20426                           wreg	equ	0xFE8
 20427                           indf1	equ	0xFE7
 20428                           postinc1	equ	0xFE6
 20429                           postdec1	equ	0xFE5
 20430                           plusw1	equ	0xFE3
 20431                           fsr1h	equ	0xFE2
 20432                           fsr1l	equ	0xFE1
 20433                           indf2	equ	0xFDF
 20434                           postinc2	equ	0xFDE
 20435                           postdec2	equ	0xFDD
 20436                           plusw2	equ	0xFDB
 20437                           fsr2h	equ	0xFDA
 20438                           fsr2l	equ	0xFD9
 20439                           status	equ	0xFD8
 20440                           
 20441 ;; *************** function _delay *****************
 20442 ;; Defined at:
 20443 ;;		line 45 in file "bibliotecas/display_lcd.c"
 20444 ;; Parameters:    Size  Location     Type
 20445 ;;		None
 20446 ;; Auto vars:     Size  Location     Type
 20447 ;;  contador_int    1   33[COMRAM] unsigned char 
 20448 ;;  contador_ext    1   32[COMRAM] unsigned char 
 20449 ;; Return value:  Size  Location     Type
 20450 ;;                  1    wreg      void 
 20451 ;; Registers used:
 20452 ;;		wreg, status,2, status,0
 20453 ;; Tracked objects:
 20454 ;;		On entry : 0/0
 20455 ;;		On exit  : 0/0
 20456 ;;		Unchanged: 0/0
 20457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20458 ;;      Params:         0       0       0       0       0       0       0       0       0
 20459 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20460 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20461 ;;      Totals:         2       0       0       0       0       0       0       0       0
 20462 ;;Total ram usage:        2 bytes
 20463 ;; Hardware stack levels used:    1
 20464 ;; Hardware stack levels required when called:    3
 20465 ;; This function calls:
 20466 ;;		Nothing
 20467 ;; This function is called by:
 20468 ;;		_init_lcd
 20469 ;;		_escreve_cmd_lcd
 20470 ;;		_endereco_cursor_lcd
 20471 ;;		_escreve_caractere_lcd
 20472 ;; This function uses a non-reentrant model
 20473 ;;
 20474                           
 20475                           	psect	text81
 20476  005892                     __ptext81:
 20477                           	opt stack 0
 20478  005892                     _delay:
 20479                           	opt stack 24
 20480                           
 20481                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 20482                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 20483                           
 20484                           ;incstack = 0
 20485  005892  0E00               	movlw	0
 20486  005894  6E21               	movwf	delay@contador_ext,c
 20487  005896                     l8786:
 20488  005896  0E63               	movlw	99
 20489  005898  6421               	cpfsgt	delay@contador_ext,c
 20490  00589A  D001               	goto	l549
 20491  00589C  0012               	return	
 20492  00589E                     l549:
 20493                           
 20494                           ;display_lcd.c: 50: {
 20495                           ;display_lcd.c: 51: __nop();
 20496  00589E  F000               	nop	
 20497                           
 20498                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 20499  0058A0  0E00               	movlw	0
 20500  0058A2  6E22               	movwf	delay@contador_int,c
 20501  0058A4                     l8792:
 20502  0058A4  0E31               	movlw	49
 20503  0058A6  6422               	cpfsgt	delay@contador_int,c
 20504  0058A8  D001               	goto	l551
 20505  0058AA  D003               	goto	u10310
 20506  0058AC                     l551:
 20507                           
 20508                           ;display_lcd.c: 53: {
 20509                           ;display_lcd.c: 54: __nop();
 20510  0058AC  F000               	nop	
 20511  0058AE  2A22               	incf	delay@contador_int,f,c
 20512  0058B0  D7F9               	goto	l8792
 20513  0058B2                     u10310:
 20514  0058B2  2A21               	incf	delay@contador_ext,f,c
 20515  0058B4  D7F0               	goto	l8786
 20516  0058B6                     __end_of_delay:
 20517                           	opt stack 0
 20518                           tosu	equ	0xFFF
 20519                           tosh	equ	0xFFE
 20520                           tosl	equ	0xFFD
 20521                           pclath	equ	0xFFA
 20522                           tblptru	equ	0xFF8
 20523                           tblptrh	equ	0xFF7
 20524                           tblptrl	equ	0xFF6
 20525                           tablat	equ	0xFF5
 20526                           prodh	equ	0xFF4
 20527                           prodl	equ	0xFF3
 20528                           intcon	equ	0xFF2
 20529                           intcon2	equ	0xFF1
 20530                           intcon3	equ	0xFF0
 20531                           indf0	equ	0xFEF
 20532                           postinc0	equ	0xFEE
 20533                           fsr0h	equ	0xFEA
 20534                           fsr0l	equ	0xFE9
 20535                           wreg	equ	0xFE8
 20536                           indf1	equ	0xFE7
 20537                           postinc1	equ	0xFE6
 20538                           postdec1	equ	0xFE5
 20539                           plusw1	equ	0xFE3
 20540                           fsr1h	equ	0xFE2
 20541                           fsr1l	equ	0xFE1
 20542                           indf2	equ	0xFDF
 20543                           postinc2	equ	0xFDE
 20544                           postdec2	equ	0xFDD
 20545                           plusw2	equ	0xFDB
 20546                           fsr2h	equ	0xFDA
 20547                           fsr2l	equ	0xFD9
 20548                           status	equ	0xFD8
 20549                           
 20550 ;; *************** function _desliga_uart *****************
 20551 ;; Defined at:
 20552 ;;		line 219 in file "bibliotecas/uart.c"
 20553 ;; Parameters:    Size  Location     Type
 20554 ;;		None
 20555 ;; Auto vars:     Size  Location     Type
 20556 ;;		None
 20557 ;; Return value:  Size  Location     Type
 20558 ;;                  1    wreg      void 
 20559 ;; Registers used:
 20560 ;;		wreg, status,2
 20561 ;; Tracked objects:
 20562 ;;		On entry : 0/0
 20563 ;;		On exit  : 0/0
 20564 ;;		Unchanged: 0/0
 20565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20566 ;;      Params:         0       0       0       0       0       0       0       0       0
 20567 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20568 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20569 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20570 ;;Total ram usage:        0 bytes
 20571 ;; Hardware stack levels used:    1
 20572 ;; Hardware stack levels required when called:    3
 20573 ;; This function calls:
 20574 ;;		Nothing
 20575 ;; This function is called by:
 20576 ;;		_escrita_sdcard
 20577 ;;		_leitura_sdcard
 20578 ;;		_sdcard_init
 20579 ;; This function uses a non-reentrant model
 20580 ;;
 20581                           
 20582                           	psect	text82
 20583  0059BC                     __ptext82:
 20584                           	opt stack 0
 20585  0059BC                     _desliga_uart:
 20586                           	opt stack 24
 20587                           
 20588                           ;uart.c: 221: TRISCbits.RC6 = 1;
 20589                           
 20590                           ;incstack = 0
 20591  0059BC  8C94               	bsf	3988,6,c	;volatile
 20592                           
 20593                           ;uart.c: 222: TRISCbits.RC7 = 1;
 20594  0059BE  8E94               	bsf	3988,7,c	;volatile
 20595                           
 20596                           ;uart.c: 225: TXSTA = 0x00;
 20597  0059C0  0E00               	movlw	0
 20598  0059C2  6EAC               	movwf	4012,c	;volatile
 20599                           
 20600                           ;uart.c: 227: RCSTA = 0x00;
 20601  0059C4  0E00               	movlw	0
 20602  0059C6  6EAB               	movwf	4011,c	;volatile
 20603  0059C8  0012               	return		;funcret
 20604  0059CA                     __end_of_desliga_uart:
 20605                           	opt stack 0
 20606                           tosu	equ	0xFFF
 20607                           tosh	equ	0xFFE
 20608                           tosl	equ	0xFFD
 20609                           pclath	equ	0xFFA
 20610                           tblptru	equ	0xFF8
 20611                           tblptrh	equ	0xFF7
 20612                           tblptrl	equ	0xFF6
 20613                           tablat	equ	0xFF5
 20614                           prodh	equ	0xFF4
 20615                           prodl	equ	0xFF3
 20616                           intcon	equ	0xFF2
 20617                           intcon2	equ	0xFF1
 20618                           intcon3	equ	0xFF0
 20619                           indf0	equ	0xFEF
 20620                           postinc0	equ	0xFEE
 20621                           fsr0h	equ	0xFEA
 20622                           fsr0l	equ	0xFE9
 20623                           wreg	equ	0xFE8
 20624                           indf1	equ	0xFE7
 20625                           postinc1	equ	0xFE6
 20626                           postdec1	equ	0xFE5
 20627                           plusw1	equ	0xFE3
 20628                           fsr1h	equ	0xFE2
 20629                           fsr1l	equ	0xFE1
 20630                           indf2	equ	0xFDF
 20631                           postinc2	equ	0xFDE
 20632                           postdec2	equ	0xFDD
 20633                           plusw2	equ	0xFDB
 20634                           fsr2h	equ	0xFDA
 20635                           fsr2l	equ	0xFD9
 20636                           status	equ	0xFD8
 20637                           
 20638 ;; *************** function _desliga_SPI *****************
 20639 ;; Defined at:
 20640 ;;		line 69 in file "bibliotecas/SPI.c"
 20641 ;; Parameters:    Size  Location     Type
 20642 ;;		None
 20643 ;; Auto vars:     Size  Location     Type
 20644 ;;		None
 20645 ;; Return value:  Size  Location     Type
 20646 ;;                  1    wreg      void 
 20647 ;; Registers used:
 20648 ;;		wreg, status,2
 20649 ;; Tracked objects:
 20650 ;;		On entry : 0/0
 20651 ;;		On exit  : 0/0
 20652 ;;		Unchanged: 0/0
 20653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20654 ;;      Params:         0       0       0       0       0       0       0       0       0
 20655 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20656 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20657 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20658 ;;Total ram usage:        0 bytes
 20659 ;; Hardware stack levels used:    1
 20660 ;; Hardware stack levels required when called:    3
 20661 ;; This function calls:
 20662 ;;		Nothing
 20663 ;; This function is called by:
 20664 ;;		_escrita_sdcard
 20665 ;;		_leitura_sdcard
 20666 ;; This function uses a non-reentrant model
 20667 ;;
 20668                           
 20669                           	psect	text83
 20670  0059EE                     __ptext83:
 20671                           	opt stack 0
 20672  0059EE                     _desliga_SPI:
 20673                           	opt stack 24
 20674                           
 20675                           ;SPI.c: 71: SSPSTAT = 0x00;
 20676                           
 20677                           ;incstack = 0
 20678  0059EE  0E00               	movlw	0
 20679  0059F0  6EC7               	movwf	4039,c	;volatile
 20680                           
 20681                           ;SPI.c: 72: SSPCON1 = 0x00;
 20682  0059F2  0E00               	movlw	0
 20683  0059F4  6EC6               	movwf	4038,c	;volatile
 20684                           
 20685                           ;SPI.c: 73: SSPCON1bits.SSPEN = 0;
 20686  0059F6  9AC6               	bcf	4038,5,c	;volatile
 20687  0059F8  0012               	return		;funcret
 20688  0059FA                     __end_of_desliga_SPI:
 20689                           	opt stack 0
 20690                           tosu	equ	0xFFF
 20691                           tosh	equ	0xFFE
 20692                           tosl	equ	0xFFD
 20693                           pclath	equ	0xFFA
 20694                           tblptru	equ	0xFF8
 20695                           tblptrh	equ	0xFF7
 20696                           tblptrl	equ	0xFF6
 20697                           tablat	equ	0xFF5
 20698                           prodh	equ	0xFF4
 20699                           prodl	equ	0xFF3
 20700                           intcon	equ	0xFF2
 20701                           intcon2	equ	0xFF1
 20702                           intcon3	equ	0xFF0
 20703                           indf0	equ	0xFEF
 20704                           postinc0	equ	0xFEE
 20705                           fsr0h	equ	0xFEA
 20706                           fsr0l	equ	0xFE9
 20707                           wreg	equ	0xFE8
 20708                           indf1	equ	0xFE7
 20709                           postinc1	equ	0xFE6
 20710                           postdec1	equ	0xFE5
 20711                           plusw1	equ	0xFE3
 20712                           fsr1h	equ	0xFE2
 20713                           fsr1l	equ	0xFE1
 20714                           indf2	equ	0xFDF
 20715                           postinc2	equ	0xFDE
 20716                           postdec2	equ	0xFDD
 20717                           plusw2	equ	0xFDB
 20718                           fsr2h	equ	0xFDA
 20719                           fsr2l	equ	0xFD9
 20720                           status	equ	0xFD8
 20721                           
 20722 ;; *************** function _dados_gps_to_sd *****************
 20723 ;; Defined at:
 20724 ;;		line 632 in file "bibliotecas/GPS.c"
 20725 ;; Parameters:    Size  Location     Type
 20726 ;;		None
 20727 ;; Auto vars:     Size  Location     Type
 20728 ;;		None
 20729 ;; Return value:  Size  Location     Type
 20730 ;;                  1    wreg      void 
 20731 ;; Registers used:
 20732 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20733 ;; Tracked objects:
 20734 ;;		On entry : 0/0
 20735 ;;		On exit  : 0/0
 20736 ;;		Unchanged: 0/0
 20737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20738 ;;      Params:         0       0       0       0       0       0       0       0       0
 20739 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20740 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20741 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20742 ;;Total ram usage:        0 bytes
 20743 ;; Hardware stack levels used:    1
 20744 ;; Hardware stack levels required when called:    5
 20745 ;; This function calls:
 20746 ;;		_monta_sd
 20747 ;; This function is called by:
 20748 ;;		_main
 20749 ;; This function uses a non-reentrant model
 20750 ;;
 20751                           
 20752                           	psect	text84
 20753  005660                     __ptext84:
 20754                           	opt stack 0
 20755  005660                     _dados_gps_to_sd:
 20756                           	opt stack 25
 20757                           
 20758                           ;GPS.c: 634: monta_sd(0, rawTime);
 20759                           
 20760                           ;incstack = 0
 20761  005660  0E88               	movlw	low _rawTime
 20762  005662  0100               	movlb	0	; () banked
 20763  005664  6F64               	movwf	monta_sd@dado& (0+255),b
 20764  005666  0E01               	movlw	high _rawTime
 20765  005668  6F65               	movwf	(monta_sd@dado+1)& (0+255),b
 20766  00566A  0E00               	movlw	0
 20767  00566C  EC76  F01F         	call	_monta_sd
 20768                           
 20769                           ;GPS.c: 635: monta_sd(1, rawDate);
 20770  005670  0E9A               	movlw	low _rawDate
 20771  005672  0100               	movlb	0	; () banked
 20772  005674  6F64               	movwf	monta_sd@dado& (0+255),b
 20773  005676  0E01               	movlw	high _rawDate
 20774  005678  6F65               	movwf	(monta_sd@dado+1)& (0+255),b
 20775  00567A  0E01               	movlw	1
 20776  00567C  EC76  F01F         	call	_monta_sd
 20777                           
 20778                           ;GPS.c: 636: monta_sd(2, rawLatitude);
 20779  005680  0E6F               	movlw	low _rawLatitude
 20780  005682  0100               	movlb	0	; () banked
 20781  005684  6F64               	movwf	monta_sd@dado& (0+255),b
 20782  005686  0E01               	movlw	high _rawLatitude
 20783  005688  6F65               	movwf	(monta_sd@dado+1)& (0+255),b
 20784  00568A  0E02               	movlw	2
 20785  00568C  EC76  F01F         	call	_monta_sd
 20786                           
 20787                           ;GPS.c: 637: monta_sd(3, rawLongitude);
 20788  005690  0E62               	movlw	low _rawLongitude
 20789  005692  0100               	movlb	0	; () banked
 20790  005694  6F64               	movwf	monta_sd@dado& (0+255),b
 20791  005696  0E01               	movlw	high _rawLongitude
 20792  005698  6F65               	movwf	(monta_sd@dado+1)& (0+255),b
 20793  00569A  0E03               	movlw	3
 20794  00569C  EC76  F01F         	call	_monta_sd
 20795  0056A0  0012               	return	
 20796  0056A2                     __end_of_dados_gps_to_sd:
 20797                           	opt stack 0
 20798                           tosu	equ	0xFFF
 20799                           tosh	equ	0xFFE
 20800                           tosl	equ	0xFFD
 20801                           pclath	equ	0xFFA
 20802                           tblptru	equ	0xFF8
 20803                           tblptrh	equ	0xFF7
 20804                           tblptrl	equ	0xFF6
 20805                           tablat	equ	0xFF5
 20806                           prodh	equ	0xFF4
 20807                           prodl	equ	0xFF3
 20808                           intcon	equ	0xFF2
 20809                           intcon2	equ	0xFF1
 20810                           intcon3	equ	0xFF0
 20811                           indf0	equ	0xFEF
 20812                           postinc0	equ	0xFEE
 20813                           fsr0h	equ	0xFEA
 20814                           fsr0l	equ	0xFE9
 20815                           wreg	equ	0xFE8
 20816                           indf1	equ	0xFE7
 20817                           postinc1	equ	0xFE6
 20818                           postdec1	equ	0xFE5
 20819                           plusw1	equ	0xFE3
 20820                           fsr1h	equ	0xFE2
 20821                           fsr1l	equ	0xFE1
 20822                           indf2	equ	0xFDF
 20823                           postinc2	equ	0xFDE
 20824                           postdec2	equ	0xFDD
 20825                           plusw2	equ	0xFDB
 20826                           fsr2h	equ	0xFDA
 20827                           fsr2l	equ	0xFD9
 20828                           status	equ	0xFD8
 20829                           
 20830 ;; *************** function _monta_sd *****************
 20831 ;; Defined at:
 20832 ;;		line 288 in file "bibliotecas/SDCard.c"
 20833 ;; Parameters:    Size  Location     Type
 20834 ;;  index           1    wreg     unsigned char 
 20835 ;;  dado            2    4[BANK0 ] PTR unsigned char 
 20836 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 20837 ;; Auto vars:     Size  Location     Type
 20838 ;;  index           1    6[BANK0 ] unsigned char 
 20839 ;;  i               1    8[BANK0 ] unsigned char 
 20840 ;;  size            1    7[BANK0 ] unsigned char 
 20841 ;; Return value:  Size  Location     Type
 20842 ;;                  1    wreg      void 
 20843 ;; Registers used:
 20844 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20845 ;; Tracked objects:
 20846 ;;		On entry : 0/0
 20847 ;;		On exit  : 0/0
 20848 ;;		Unchanged: 0/0
 20849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20850 ;;      Params:         0       2       0       0       0       0       0       0       0
 20851 ;;      Locals:         0       3       0       0       0       0       0       0       0
 20852 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20853 ;;      Totals:         0       5       0       0       0       0       0       0       0
 20854 ;;Total ram usage:        5 bytes
 20855 ;; Hardware stack levels used:    1
 20856 ;; Hardware stack levels required when called:    4
 20857 ;; This function calls:
 20858 ;;		_strlen
 20859 ;; This function is called by:
 20860 ;;		_dados_gps_to_sd
 20861 ;; This function uses a non-reentrant model
 20862 ;;
 20863                           
 20864                           	psect	text85
 20865  003EEC                     __ptext85:
 20866                           	opt stack 0
 20867  003EEC                     _monta_sd:
 20868                           	opt stack 25
 20869                           
 20870                           ;incstack = 0
 20871                           ;monta_sd@index stored from wreg
 20872  003EEC  0100               	movlb	0	; () banked
 20873  003EEE  6F66               	movwf	monta_sd@index& (0+255),b
 20874                           
 20875                           ;SDCard.c: 290: unsigned char i, size;
 20876                           ;SDCard.c: 291: size = strlen(dado);
 20877  003EF0  C064  F021         	movff	monta_sd@dado,strlen@s
 20878  003EF4  C065  F022         	movff	monta_sd@dado+1,strlen@s+1
 20879  003EF8  EC71  F02B         	call	_strlen	;wreg free
 20880  003EFC  5021               	movf	?_strlen,w,c
 20881  003EFE  0100               	movlb	0	; () banked
 20882  003F00  6F67               	movwf	monta_sd@size& (0+255),b
 20883                           
 20884                           ;SDCard.c: 292: switch(index)
 20885  003F02  D07C               	goto	l311
 20886  003F04                     
 20887                           ; BSR set to: 0
 20888                           ;SDCard.c: 295: for(i=0; i<6;i++)
 20889                           
 20890                           ; BSR set to: 0
 20891  003F04  0E00               	movlw	0
 20892  003F06  6F68               	movwf	monta_sd@i& (0+255),b
 20893  003F08                     l11020:
 20894                           
 20895                           ; BSR set to: 0
 20896  003F08  0E05               	movlw	5
 20897  003F0A  6568               	cpfsgt	monta_sd@i& (0+255),b
 20898  003F0C  D001               	goto	l313
 20899  003F0E  0012               	return	
 20900  003F10                     l313:
 20901                           
 20902                           ; BSR set to: 0
 20903                           ;SDCard.c: 296: {
 20904                           ;SDCard.c: 297: string_dado.hora[i] = *dado;
 20905                           
 20906                           ; BSR set to: 0
 20907  003F10  C064  FFD9         	movff	monta_sd@dado,fsr2l
 20908  003F14  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
 20909  003F18  5168               	movf	monta_sd@i& (0+255),w,b
 20910  003F1A  0D01               	mullw	1
 20911  003F1C  0E0D               	movlw	low (_string_dado+7)
 20912  003F1E  24F3               	addwf	prodl,w,c
 20913  003F20  6EE1               	movwf	fsr1l,c
 20914  003F22  0E01               	movlw	high (_string_dado+7)
 20915  003F24  20F4               	addwfc	prodh,w,c
 20916  003F26  6EE2               	movwf	fsr1h,c
 20917  003F28  CFDF FFE7          	movff	indf2,indf1
 20918                           
 20919                           ; BSR set to: 0
 20920                           ;SDCard.c: 298: dado++;
 20921  003F2C  4B64               	infsnz	monta_sd@dado& (0+255),f,b
 20922  003F2E  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
 20923                           
 20924                           ; BSR set to: 0
 20925  003F30  2B68               	incf	monta_sd@i& (0+255),f,b
 20926  003F32  D7EA               	goto	l11020
 20927  003F34                     
 20928                           ; BSR set to: 0
 20929                           ;SDCard.c: 303: for(i=0; i<6;i++)
 20930                           
 20931                           ; BSR set to: 0
 20932  003F34  0E00               	movlw	0
 20933  003F36  6F68               	movwf	monta_sd@i& (0+255),b
 20934  003F38                     l11034:
 20935                           
 20936                           ; BSR set to: 0
 20937  003F38  0E05               	movlw	5
 20938  003F3A  6568               	cpfsgt	monta_sd@i& (0+255),b
 20939  003F3C  D001               	goto	l317
 20940  003F3E  D012               	goto	u14010
 20941  003F40                     l317:
 20942                           
 20943                           ; BSR set to: 0
 20944                           ;SDCard.c: 304: {
 20945                           ;SDCard.c: 305: string_dado.data[i] = *dado;
 20946                           
 20947                           ; BSR set to: 0
 20948  003F40  C064  FFD9         	movff	monta_sd@dado,fsr2l
 20949  003F44  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
 20950  003F48  5168               	movf	monta_sd@i& (0+255),w,b
 20951  003F4A  0D01               	mullw	1
 20952  003F4C  0E06               	movlw	low _string_dado
 20953  003F4E  24F3               	addwf	prodl,w,c
 20954  003F50  6EE1               	movwf	fsr1l,c
 20955  003F52  0E01               	movlw	high _string_dado
 20956  003F54  20F4               	addwfc	prodh,w,c
 20957  003F56  6EE2               	movwf	fsr1h,c
 20958  003F58  CFDF FFE7          	movff	indf2,indf1
 20959                           
 20960                           ; BSR set to: 0
 20961                           ;SDCard.c: 306: dado++;
 20962  003F5C  4B64               	infsnz	monta_sd@dado& (0+255),f,b
 20963  003F5E  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
 20964                           
 20965                           ; BSR set to: 0
 20966  003F60  2B68               	incf	monta_sd@i& (0+255),f,b
 20967  003F62  D7EA               	goto	l11034
 20968  003F64                     u14010:
 20969                           
 20970                           ; BSR set to: 0
 20971                           ;SDCard.c: 309: {
 20972                           ;SDCard.c: 310: data_hoje = 1;
 20973                           
 20974                           ; BSR set to: 0
 20975                           
 20976                           ;SDCard.c: 307: }
 20977                           ;SDCard.c: 308: if(string_dado.data)
 20978  003F64  0E01               	movlw	1
 20979  003F66  6E34               	movwf	_data_hoje,c
 20980                           
 20981                           ; BSR set to: 0
 20982                           ;SDCard.c: 313: }
 20983                           ;SDCard.c: 314: break;
 20984  003F68  0012               	return	
 20985  003F6A                     
 20986                           ; BSR set to: 0
 20987                           ;SDCard.c: 317: for(i=0; i<13;i++)
 20988                           
 20989                           ; BSR set to: 0
 20990  003F6A  0E00               	movlw	0
 20991  003F6C  6F68               	movwf	monta_sd@i& (0+255),b
 20992  003F6E                     l11050:
 20993                           
 20994                           ; BSR set to: 0
 20995  003F6E  0E0C               	movlw	12
 20996  003F70  6568               	cpfsgt	monta_sd@i& (0+255),b
 20997  003F72  D001               	goto	l321
 20998  003F74  0012               	return	
 20999  003F76                     l321:
 21000                           
 21001                           ; BSR set to: 0
 21002                           ;SDCard.c: 318: {
 21003                           ;SDCard.c: 319: string_dado.LAT[i] = *dado;
 21004                           
 21005                           ; BSR set to: 0
 21006  003F76  C064  FFD9         	movff	monta_sd@dado,fsr2l
 21007  003F7A  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
 21008  003F7E  5168               	movf	monta_sd@i& (0+255),w,b
 21009  003F80  0D01               	mullw	1
 21010  003F82  0E18               	movlw	low (_string_dado+18)
 21011  003F84  24F3               	addwf	prodl,w,c
 21012  003F86  6EE1               	movwf	fsr1l,c
 21013  003F88  0E01               	movlw	high (_string_dado+18)
 21014  003F8A  20F4               	addwfc	prodh,w,c
 21015  003F8C  6EE2               	movwf	fsr1h,c
 21016  003F8E  CFDF FFE7          	movff	indf2,indf1
 21017                           
 21018                           ; BSR set to: 0
 21019                           ;SDCard.c: 320: dado++;
 21020  003F92  4B64               	infsnz	monta_sd@dado& (0+255),f,b
 21021  003F94  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
 21022                           
 21023                           ; BSR set to: 0
 21024  003F96  2B68               	incf	monta_sd@i& (0+255),f,b
 21025  003F98  D7EA               	goto	l11050
 21026  003F9A                     
 21027                           ; BSR set to: 0
 21028                           ;SDCard.c: 326: for(i=0; i<13;i++)
 21029                           
 21030                           ; BSR set to: 0
 21031  003F9A  0E00               	movlw	0
 21032  003F9C  6F68               	movwf	monta_sd@i& (0+255),b
 21033  003F9E                     l11064:
 21034                           
 21035                           ; BSR set to: 0
 21036  003F9E  0E0C               	movlw	12
 21037  003FA0  6568               	cpfsgt	monta_sd@i& (0+255),b
 21038  003FA2  D001               	goto	l324
 21039  003FA4  0012               	return	
 21040  003FA6                     l324:
 21041                           
 21042                           ; BSR set to: 0
 21043                           ;SDCard.c: 327: {
 21044                           ;SDCard.c: 328: string_dado.LONG[i] = *dado;
 21045                           
 21046                           ; BSR set to: 0
 21047  003FA6  C064  FFD9         	movff	monta_sd@dado,fsr2l
 21048  003FAA  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
 21049  003FAE  5168               	movf	monta_sd@i& (0+255),w,b
 21050  003FB0  0D01               	mullw	1
 21051  003FB2  0E25               	movlw	low (_string_dado+31)
 21052  003FB4  24F3               	addwf	prodl,w,c
 21053  003FB6  6EE1               	movwf	fsr1l,c
 21054  003FB8  0E01               	movlw	high (_string_dado+31)
 21055  003FBA  20F4               	addwfc	prodh,w,c
 21056  003FBC  6EE2               	movwf	fsr1h,c
 21057  003FBE  CFDF FFE7          	movff	indf2,indf1
 21058                           
 21059                           ; BSR set to: 0
 21060                           ;SDCard.c: 329: dado++;
 21061  003FC2  4B64               	infsnz	monta_sd@dado& (0+255),f,b
 21062  003FC4  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
 21063                           
 21064                           ; BSR set to: 0
 21065  003FC6  2B68               	incf	monta_sd@i& (0+255),f,b
 21066  003FC8  D7EA               	goto	l11064
 21067  003FCA                     
 21068                           ; BSR set to: 0
 21069                           ;SDCard.c: 335: for(i=0; i<size;i++)
 21070                           
 21071                           ; BSR set to: 0
 21072  003FCA  0E00               	movlw	0
 21073  003FCC  6F68               	movwf	monta_sd@i& (0+255),b
 21074  003FCE  D011               	goto	l327
 21075  003FD0                     
 21076                           ; BSR set to: 0
 21077                           ;SDCard.c: 336: {
 21078                           ;SDCard.c: 337: string_dado.LONG[i] = *dado;
 21079                           
 21080                           ; BSR set to: 0
 21081  003FD0  C064  FFD9         	movff	monta_sd@dado,fsr2l
 21082  003FD4  C065  FFDA         	movff	monta_sd@dado+1,fsr2h
 21083  003FD8  5168               	movf	monta_sd@i& (0+255),w,b
 21084  003FDA  0D01               	mullw	1
 21085  003FDC  0E25               	movlw	low (_string_dado+31)
 21086  003FDE  24F3               	addwf	prodl,w,c
 21087  003FE0  6EE1               	movwf	fsr1l,c
 21088  003FE2  0E01               	movlw	high (_string_dado+31)
 21089  003FE4  20F4               	addwfc	prodh,w,c
 21090  003FE6  6EE2               	movwf	fsr1h,c
 21091  003FE8  CFDF FFE7          	movff	indf2,indf1
 21092                           
 21093                           ; BSR set to: 0
 21094                           ;SDCard.c: 338: dado++;
 21095  003FEC  4B64               	infsnz	monta_sd@dado& (0+255),f,b
 21096  003FEE  2B65               	incf	(monta_sd@dado+1)& (0+255),f,b
 21097                           
 21098                           ; BSR set to: 0
 21099  003FF0  2B68               	incf	monta_sd@i& (0+255),f,b
 21100  003FF2                     l327:
 21101                           
 21102                           ; BSR set to: 0
 21103                           
 21104                           ; BSR set to: 0
 21105  003FF2  5167               	movf	monta_sd@size& (0+255),w,b
 21106  003FF4  5D68               	subwf	monta_sd@i& (0+255),w,b
 21107  003FF6  B0D8               	btfsc	status,0,c
 21108  003FF8  0012               	return	
 21109  003FFA  D7EA               	goto	l328
 21110  003FFC                     l311:
 21111                           
 21112                           ; BSR set to: 0
 21113                           
 21114                           ; BSR set to: 0
 21115  003FFC  5166               	movf	monta_sd@index& (0+255),w,b
 21116                           
 21117                           ; Switch size 1, requested type "space"
 21118                           ; Number of cases is 5, Range of values is 0 to 4
 21119                           ; switch strategies available:
 21120                           ; Name         Instructions Cycles
 21121                           ; simple_byte           16     9 (average)
 21122                           ;	Chosen strategy is simple_byte
 21123  003FFE  0A00               	xorlw	0	; case 0
 21124  004000  B4D8               	btfsc	status,2,c
 21125  004002  D780               	goto	l312
 21126  004004  0A01               	xorlw	1	; case 1
 21127  004006  B4D8               	btfsc	status,2,c
 21128  004008  D795               	goto	l316
 21129  00400A  0A03               	xorlw	3	; case 2
 21130  00400C  B4D8               	btfsc	status,2,c
 21131  00400E  D7AD               	goto	l320
 21132  004010  0A01               	xorlw	1	; case 3
 21133  004012  B4D8               	btfsc	status,2,c
 21134  004014  D7C2               	goto	l323
 21135  004016  0A07               	xorlw	7	; case 4
 21136  004018  A4D8               	btfss	status,2,c
 21137  00401A  0012               	return	
 21138  00401C  D7D6               	goto	l326
 21139  00401E                     __end_of_monta_sd:
 21140                           	opt stack 0
 21141                           tosu	equ	0xFFF
 21142                           tosh	equ	0xFFE
 21143                           tosl	equ	0xFFD
 21144                           pclath	equ	0xFFA
 21145                           tblptru	equ	0xFF8
 21146                           tblptrh	equ	0xFF7
 21147                           tblptrl	equ	0xFF6
 21148                           tablat	equ	0xFF5
 21149                           prodh	equ	0xFF4
 21150                           prodl	equ	0xFF3
 21151                           intcon	equ	0xFF2
 21152                           intcon2	equ	0xFF1
 21153                           intcon3	equ	0xFF0
 21154                           indf0	equ	0xFEF
 21155                           postinc0	equ	0xFEE
 21156                           fsr0h	equ	0xFEA
 21157                           fsr0l	equ	0xFE9
 21158                           wreg	equ	0xFE8
 21159                           indf1	equ	0xFE7
 21160                           postinc1	equ	0xFE6
 21161                           postdec1	equ	0xFE5
 21162                           plusw1	equ	0xFE3
 21163                           fsr1h	equ	0xFE2
 21164                           fsr1l	equ	0xFE1
 21165                           indf2	equ	0xFDF
 21166                           postinc2	equ	0xFDE
 21167                           postdec2	equ	0xFDD
 21168                           plusw2	equ	0xFDB
 21169                           fsr2h	equ	0xFDA
 21170                           fsr2l	equ	0xFD9
 21171                           status	equ	0xFD8
 21172                           
 21173 ;; *************** function _strlen *****************
 21174 ;; Defined at:
 21175 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 21176 ;; Parameters:    Size  Location     Type
 21177 ;;  s               2   32[COMRAM] PTR const unsigned char 
 21178 ;;		 -> dado_arquivo(20), rawDate(7), rawLongitude(13), rawLatitude(13), 
 21179 ;;		 -> rawTime(11), 
 21180 ;; Auto vars:     Size  Location     Type
 21181 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 21182 ;;		 -> dado_arquivo(20), rawDate(7), rawLongitude(13), rawLatitude(13), 
 21183 ;;		 -> rawTime(11), 
 21184 ;; Return value:  Size  Location     Type
 21185 ;;                  2   32[COMRAM] unsigned int 
 21186 ;; Registers used:
 21187 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21188 ;; Tracked objects:
 21189 ;;		On entry : 0/0
 21190 ;;		On exit  : 0/0
 21191 ;;		Unchanged: 0/0
 21192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21193 ;;      Params:         2       0       0       0       0       0       0       0       0
 21194 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21195 ;;      Temps:          0       2       0       0       0       0       0       0       0
 21196 ;;      Totals:         2       4       0       0       0       0       0       0       0
 21197 ;;Total ram usage:        6 bytes
 21198 ;; Hardware stack levels used:    1
 21199 ;; Hardware stack levels required when called:    3
 21200 ;; This function calls:
 21201 ;;		Nothing
 21202 ;; This function is called by:
 21203 ;;		_verifica_fence_externo
 21204 ;;		_monta_sd
 21205 ;; This function uses a non-reentrant model
 21206 ;;
 21207                           
 21208                           	psect	text86
 21209  0056E2                     __ptext86:
 21210                           	opt stack 0
 21211  0056E2                     _strlen:
 21212                           	opt stack 25
 21213                           
 21214                           ; BSR set to: 0
 21215                           ;incstack = 0
 21216  0056E2  C021  F062         	movff	strlen@s,strlen@cp
 21217  0056E6  C022  F063         	movff	strlen@s+1,strlen@cp+1
 21218  0056EA  D003               	goto	l1966
 21219  0056EC  0100               	movlb	0	; () banked
 21220  0056EE  4B62               	infsnz	strlen@cp& (0+255),f,b
 21221  0056F0  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 21222  0056F2                     l1966:
 21223                           
 21224                           ; BSR set to: 0
 21225  0056F2  C062  FFD9         	movff	strlen@cp,fsr2l
 21226  0056F6  C063  FFDA         	movff	strlen@cp+1,fsr2h
 21227  0056FA  50DF               	movf	indf2,w,c
 21228  0056FC  A4D8               	btfss	status,2,c
 21229  0056FE  D7F6               	goto	l1967
 21230  005700  C021  F060         	movff	strlen@s,??_strlen
 21231  005704  C022  F061         	movff	strlen@s+1,??_strlen+1
 21232  005708  0100               	movlb	0	; () banked
 21233  00570A  1F60               	comf	??_strlen& (0+255),f,b
 21234  00570C  1F61               	comf	(??_strlen+1)& (0+255),f,b
 21235  00570E  4B60               	infsnz	??_strlen& (0+255),f,b
 21236  005710  2B61               	incf	(??_strlen+1)& (0+255),f,b
 21237  005712  5162               	movf	strlen@cp& (0+255),w,b
 21238  005714  2560               	addwf	??_strlen& (0+255),w,b
 21239  005716  6E21               	movwf	?_strlen,c
 21240  005718  5163               	movf	(strlen@cp+1)& (0+255),w,b
 21241  00571A  2161               	addwfc	(??_strlen+1)& (0+255),w,b
 21242  00571C  6E22               	movwf	?_strlen+1,c
 21243  00571E  0012               	return	
 21244  005720                     __end_of_strlen:
 21245                           	opt stack 0
 21246                           tosu	equ	0xFFF
 21247                           tosh	equ	0xFFE
 21248                           tosl	equ	0xFFD
 21249                           pclath	equ	0xFFA
 21250                           tblptru	equ	0xFF8
 21251                           tblptrh	equ	0xFF7
 21252                           tblptrl	equ	0xFF6
 21253                           tablat	equ	0xFF5
 21254                           prodh	equ	0xFF4
 21255                           prodl	equ	0xFF3
 21256                           intcon	equ	0xFF2
 21257                           intcon2	equ	0xFF1
 21258                           intcon3	equ	0xFF0
 21259                           indf0	equ	0xFEF
 21260                           postinc0	equ	0xFEE
 21261                           fsr0h	equ	0xFEA
 21262                           fsr0l	equ	0xFE9
 21263                           wreg	equ	0xFE8
 21264                           indf1	equ	0xFE7
 21265                           postinc1	equ	0xFE6
 21266                           postdec1	equ	0xFE5
 21267                           plusw1	equ	0xFE3
 21268                           fsr1h	equ	0xFE2
 21269                           fsr1l	equ	0xFE1
 21270                           indf2	equ	0xFDF
 21271                           postinc2	equ	0xFDE
 21272                           postdec2	equ	0xFDD
 21273                           plusw2	equ	0xFDB
 21274                           fsr2h	equ	0xFDA
 21275                           fsr2l	equ	0xFD9
 21276                           status	equ	0xFD8
 21277                           
 21278 ;; *************** function _isr *****************
 21279 ;; Defined at:
 21280 ;;		line 95 in file "main.c"
 21281 ;; Parameters:    Size  Location     Type
 21282 ;;		None
 21283 ;; Auto vars:     Size  Location     Type
 21284 ;;  cont            1   31[COMRAM] unsigned char 
 21285 ;; Return value:  Size  Location     Type
 21286 ;;                  1    wreg      void 
 21287 ;; Registers used:
 21288 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21289 ;; Tracked objects:
 21290 ;;		On entry : 0/0
 21291 ;;		On exit  : 0/0
 21292 ;;		Unchanged: 0/0
 21293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21294 ;;      Params:         0       0       0       0       0       0       0       0       0
 21295 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21296 ;;      Temps:         20       0       0       0       0       0       0       0       0
 21297 ;;      Totals:        21       0       0       0       0       0       0       0       0
 21298 ;;Total ram usage:       21 bytes
 21299 ;; Hardware stack levels used:    1
 21300 ;; Hardware stack levels required when called:    2
 21301 ;; This function calls:
 21302 ;;		_GPSRead
 21303 ;;		_recebe_dado_uart
 21304 ;;		i2_write_timer_zero
 21305 ;; This function is called by:
 21306 ;;		Interrupt level 2
 21307 ;; This function uses a non-reentrant model
 21308 ;;
 21309                           
 21310                           	psect	intcode
 21311  000008                     __pintcode:
 21312                           	opt stack 0
 21313  000008                     _isr:
 21314                           	opt stack 13
 21315                           
 21316                           ; BSR set to: 0
 21317                           ;incstack = 0
 21318  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21319  00000A  EDD6  F01E         	call	int_func,f	;refresh shadow registers
 21320                           tosu	equ	0xFFF
 21321                           tosh	equ	0xFFE
 21322                           tosl	equ	0xFFD
 21323                           pclath	equ	0xFFA
 21324                           tblptru	equ	0xFF8
 21325                           tblptrh	equ	0xFF7
 21326                           tblptrl	equ	0xFF6
 21327                           tablat	equ	0xFF5
 21328                           prodh	equ	0xFF4
 21329                           prodl	equ	0xFF3
 21330                           intcon	equ	0xFF2
 21331                           intcon2	equ	0xFF1
 21332                           intcon3	equ	0xFF0
 21333                           indf0	equ	0xFEF
 21334                           postinc0	equ	0xFEE
 21335                           fsr0h	equ	0xFEA
 21336                           fsr0l	equ	0xFE9
 21337                           wreg	equ	0xFE8
 21338                           indf1	equ	0xFE7
 21339                           postinc1	equ	0xFE6
 21340                           postdec1	equ	0xFE5
 21341                           plusw1	equ	0xFE3
 21342                           fsr1h	equ	0xFE2
 21343                           fsr1l	equ	0xFE1
 21344                           indf2	equ	0xFDF
 21345                           postinc2	equ	0xFDE
 21346                           postdec2	equ	0xFDD
 21347                           plusw2	equ	0xFDB
 21348                           fsr2h	equ	0xFDA
 21349                           fsr2l	equ	0xFD9
 21350                           status	equ	0xFD8
 21351                           
 21352                           	psect	intcode_body
 21353  003DAC                     __pintcode_body:
 21354                           	opt stack 13
 21355  003DAC                     int_func:
 21356                           	opt stack 13
 21357  003DAC  0006               	pop		; remove dummy address from shadow register refresh
 21358  003DAE  CFFA F00E          	movff	pclath,??_isr+2
 21359  003DB2  CFFB F00F          	movff	pclatu,??_isr+3
 21360  003DB6  CFE9 F010          	movff	fsr0l,??_isr+4
 21361  003DBA  CFEA F011          	movff	fsr0h,??_isr+5
 21362  003DBE  CFE1 F012          	movff	fsr1l,??_isr+6
 21363  003DC2  CFE2 F013          	movff	fsr1h,??_isr+7
 21364  003DC6  CFD9 F014          	movff	fsr2l,??_isr+8
 21365  003DCA  CFDA F015          	movff	fsr2h,??_isr+9
 21366  003DCE  CFF3 F016          	movff	prodl,??_isr+10
 21367  003DD2  CFF4 F017          	movff	prodh,??_isr+11
 21368  003DD6  CFF6 F018          	movff	tblptrl,??_isr+12
 21369  003DDA  CFF7 F019          	movff	tblptrh,??_isr+13
 21370  003DDE  CFF8 F01A          	movff	tblptru,??_isr+14
 21371  003DE2  CFF5 F01B          	movff	tablat,??_isr+15
 21372  003DE6  C03F  F01C         	movff	btemp,??_isr+16
 21373  003DEA  C040  F01D         	movff	btemp+1,??_isr+17
 21374  003DEE  C041  F01E         	movff	btemp+2,??_isr+18
 21375  003DF2  C042  F01F         	movff	btemp+3,??_isr+19
 21376                           
 21377                           ;main.c: 97: unsigned char cont;
 21378                           ;main.c: 100: if (PIE1bits.RCIE && PIR1bits.RCIF)
 21379  003DF6  BA9D               	btfsc	3997,5,c	;volatile
 21380  003DF8  AA9E               	btfss	3998,5,c	;volatile
 21381  003DFA  D014               	goto	i2l85
 21382                           
 21383                           ;main.c: 101: {
 21384                           ;main.c: 102: PIR1bits.RCIF = 0;
 21385  003DFC  9A9E               	bcf	3998,5,c	;volatile
 21386                           
 21387                           ;main.c: 103: data_uart_recebe = recebe_dado_uart();
 21388  003DFE  ECCE  F02C         	call	_recebe_dado_uart	;wreg free
 21389  003E02  6E3A               	movwf	_data_uart_recebe,c
 21390                           
 21391                           ;main.c: 104: GPSRead(data_uart_recebe);
 21392  003E04  503A               	movf	_data_uart_recebe,w,c
 21393  003E06  EC80  F016         	call	_GPSRead
 21394                           
 21395                           ;main.c: 105: PORTBbits.RB2 = !PORTBbits.RB2;
 21396  003E0A  B481               	btfsc	3969,2,c	;volatile
 21397  003E0C  D003               	goto	i2u1416_40
 21398  003E0E  6A0C               	clrf	??_isr& (0+255),c
 21399  003E10  2A0C               	incf	??_isr& (0+255),f,c
 21400  003E12  D001               	goto	i2u1417_48
 21401  003E14                     i2u1416_40:
 21402  003E14  6A0C               	clrf	??_isr& (0+255),c
 21403  003E16                     i2u1417_48:
 21404  003E16  460C               	rlncf	??_isr,f,c
 21405  003E18  460C               	rlncf	??_isr,f,c
 21406  003E1A  5081               	movf	3969,w,c	;volatile
 21407  003E1C  180C               	xorwf	??_isr,w,c
 21408  003E1E  0BFB               	andlw	-5
 21409  003E20  180C               	xorwf	??_isr,w,c
 21410  003E22  6E81               	movwf	3969,c	;volatile
 21411  003E24                     i2l85:
 21412                           
 21413                           ;main.c: 106: }
 21414                           ;main.c: 109: unsigned char cont;
 21415                           ;main.c: 111: if (TMR0IF && T0IF)
 21416  003E24  B4F2               	btfsc	intcon,2,c	;volatile
 21417  003E26  A4F2               	btfss	intcon,2,c	;volatile
 21418  003E28  D037               	goto	i2l86
 21419                           
 21420                           ;main.c: 112: {
 21421                           ;main.c: 113: INTCONbits.TMR0IF = 0;
 21422  003E2A  94F2               	bcf	intcon,2,c	;volatile
 21423                           
 21424                           ;main.c: 114: sinaliza_int_timer = 1;
 21425  003E2C  0E01               	movlw	1
 21426  003E2E  0100               	movlb	0	; () banked
 21427  003E30  6FFF               	movwf	_sinaliza_int_timer& (0+255),b
 21428                           
 21429                           ;main.c: 116: for(cont= 0; cont<3;cont++)
 21430  003E32  0E00               	movlw	0
 21431  003E34  6E20               	movwf	isr@cont,c
 21432  003E36                     i2l11234:
 21433                           
 21434                           ; BSR set to: 0
 21435  003E36  0E02               	movlw	2
 21436  003E38  6420               	cpfsgt	isr@cont,c
 21437  003E3A  D001               	goto	i2l87
 21438  003E3C  D019               	goto	i2u1422_40
 21439  003E3E                     i2l87:
 21440                           
 21441                           ;main.c: 117: {
 21442                           ;main.c: 118: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 21443                           
 21444                           ; BSR set to: 0
 21445  003E3E  5020               	movf	isr@cont,w,c
 21446  003E40  0D02               	mullw	2
 21447  003E42  0E23               	movlw	low _tempo_tarefa
 21448  003E44  24F3               	addwf	prodl,w,c
 21449  003E46  6ED9               	movwf	fsr2l,c
 21450  003E48  0E00               	movlw	high _tempo_tarefa
 21451  003E4A  20F4               	addwfc	prodh,w,c
 21452  003E4C  6EDA               	movwf	fsr2h,c
 21453  003E4E  50DE               	movf	postinc2,w,c
 21454  003E50  10DE               	iorwf	postinc2,w,c
 21455  003E52  B4D8               	btfsc	status,2,c
 21456  003E54  D00B               	goto	i2l89
 21457  003E56  5020               	movf	isr@cont,w,c
 21458  003E58  0D02               	mullw	2
 21459  003E5A  0E23               	movlw	low _tempo_tarefa
 21460  003E5C  24F3               	addwf	prodl,w,c
 21461  003E5E  6ED9               	movwf	fsr2l,c
 21462  003E60  0E00               	movlw	high _tempo_tarefa
 21463  003E62  20F4               	addwfc	prodh,w,c
 21464  003E64  6EDA               	movwf	fsr2h,c
 21465  003E66  06DE               	decf	postinc2,f,c
 21466  003E68  0E00               	movlw	0
 21467  003E6A  5ADD               	subwfb	postdec2,f,c
 21468  003E6C                     i2l89:
 21469  003E6C  2A20               	incf	isr@cont,f,c
 21470  003E6E  D7E3               	goto	i2l11234
 21471  003E70                     i2u1422_40:
 21472                           
 21473                           ;main.c: 119: }
 21474                           ;main.c: 121: if(tarefa_em_execucao == 1)
 21475  003E70  0439               	decf	_tarefa_em_execucao,w,c	;volatile
 21476  003E72  A4D8               	btfss	status,2,c
 21477  003E74  D00B               	goto	i2l91
 21478                           
 21479                           ;main.c: 122: {
 21480                           ;main.c: 123: timeout_tarefa--;
 21481  003E76  062F               	decf	_timeout_tarefa,f,c
 21482  003E78  A0D8               	btfss	status,0,c
 21483  003E7A  0630               	decf	_timeout_tarefa+1,f,c
 21484                           
 21485                           ;main.c: 124: if(!timeout_tarefa)
 21486  003E7C  502F               	movf	_timeout_tarefa,w,c
 21487  003E7E  1030               	iorwf	_timeout_tarefa+1,w,c
 21488  003E80  A4D8               	btfss	status,2,c
 21489  003E82  D004               	goto	i2l91
 21490                           
 21491                           ;main.c: 125: {
 21492                           ;main.c: 127: PCLATH = 0;
 21493  003E84  0E00               	movlw	0
 21494  003E86  6EFA               	movwf	pclath,c	;volatile
 21495                           
 21496                           ;main.c: 128: PCL = 0;
 21497  003E88  0E00               	movlw	0
 21498  003E8A  6EF9               	movwf	pcl,c	;volatile
 21499  003E8C                     i2l91:
 21500                           
 21501                           ;main.c: 129: }
 21502                           ;main.c: 130: }
 21503                           ;main.c: 133: write_timer_zero(0x0083);
 21504  003E8C  0E00               	movlw	0
 21505  003E8E  6E02               	movwf	i2write_timer_zero@timer0+1,c
 21506  003E90  0E83               	movlw	131
 21507  003E92  6E01               	movwf	i2write_timer_zero@timer0,c
 21508  003E94  ECC5  F02C         	call	i2_write_timer_zero	;wreg free
 21509  003E98                     i2l86:
 21510                           
 21511                           ;main.c: 135: }
 21512                           ;main.c: 137: if (INT0IF && INT0IE)
 21513  003E98  B2F2               	btfsc	intcon,1,c	;volatile
 21514  003E9A  A8F2               	btfss	intcon,4,c	;volatile
 21515  003E9C  D001               	goto	i2l92
 21516                           
 21517                           ;main.c: 138: {
 21518                           ;main.c: 139: INT0IF = 0;
 21519  003E9E  92F2               	bcf	intcon,1,c	;volatile
 21520  003EA0                     i2l92:
 21521  003EA0  C01F  F042         	movff	??_isr+19,btemp+3
 21522  003EA4  C01E  F041         	movff	??_isr+18,btemp+2
 21523  003EA8  C01D  F040         	movff	??_isr+17,btemp+1
 21524  003EAC  C01C  F03F         	movff	??_isr+16,btemp
 21525  003EB0  C01B  FFF5         	movff	??_isr+15,tablat
 21526  003EB4  C01A  FFF8         	movff	??_isr+14,tblptru
 21527  003EB8  C019  FFF7         	movff	??_isr+13,tblptrh
 21528  003EBC  C018  FFF6         	movff	??_isr+12,tblptrl
 21529  003EC0  C017  FFF4         	movff	??_isr+11,prodh
 21530  003EC4  C016  FFF3         	movff	??_isr+10,prodl
 21531  003EC8  C015  FFDA         	movff	??_isr+9,fsr2h
 21532  003ECC  C014  FFD9         	movff	??_isr+8,fsr2l
 21533  003ED0  C013  FFE2         	movff	??_isr+7,fsr1h
 21534  003ED4  C012  FFE1         	movff	??_isr+6,fsr1l
 21535  003ED8  C011  FFEA         	movff	??_isr+5,fsr0h
 21536  003EDC  C010  FFE9         	movff	??_isr+4,fsr0l
 21537  003EE0  C00F  FFFB         	movff	??_isr+3,pclatu
 21538  003EE4  C00E  FFFA         	movff	??_isr+2,pclath
 21539  003EE8  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21540  003EEA  0011               	retfie		f
 21541  003EEC                     __end_of_isr:
 21542                           	opt stack 0
 21543                           tosu	equ	0xFFF
 21544                           tosh	equ	0xFFE
 21545                           tosl	equ	0xFFD
 21546                           pclatu	equ	0xFFB
 21547                           pclath	equ	0xFFA
 21548                           pcl	equ	0xFF9
 21549                           tblptru	equ	0xFF8
 21550                           tblptrh	equ	0xFF7
 21551                           tblptrl	equ	0xFF6
 21552                           tablat	equ	0xFF5
 21553                           prodh	equ	0xFF4
 21554                           prodl	equ	0xFF3
 21555                           intcon	equ	0xFF2
 21556                           intcon2	equ	0xFF1
 21557                           intcon3	equ	0xFF0
 21558                           indf0	equ	0xFEF
 21559                           postinc0	equ	0xFEE
 21560                           fsr0h	equ	0xFEA
 21561                           fsr0l	equ	0xFE9
 21562                           wreg	equ	0xFE8
 21563                           indf1	equ	0xFE7
 21564                           postinc1	equ	0xFE6
 21565                           postdec1	equ	0xFE5
 21566                           plusw1	equ	0xFE3
 21567                           fsr1h	equ	0xFE2
 21568                           fsr1l	equ	0xFE1
 21569                           indf2	equ	0xFDF
 21570                           postinc2	equ	0xFDE
 21571                           postdec2	equ	0xFDD
 21572                           plusw2	equ	0xFDB
 21573                           fsr2h	equ	0xFDA
 21574                           fsr2l	equ	0xFD9
 21575                           status	equ	0xFD8
 21576                           
 21577 ;; *************** function i2_write_timer_zero *****************
 21578 ;; Defined at:
 21579 ;;		line 138 in file "bibliotecas/hardware.c"
 21580 ;; Parameters:    Size  Location     Type
 21581 ;;  timer0          2    0[COMRAM] unsigned int 
 21582 ;; Auto vars:     Size  Location     Type
 21583 ;;  write_timer_    2    2[COMRAM] struct Timers
 21584 ;; Return value:  Size  Location     Type
 21585 ;;                  1    wreg      void 
 21586 ;; Registers used:
 21587 ;;		None
 21588 ;; Tracked objects:
 21589 ;;		On entry : 0/0
 21590 ;;		On exit  : 0/0
 21591 ;;		Unchanged: 0/0
 21592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21593 ;;      Params:         2       0       0       0       0       0       0       0       0
 21594 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21595 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21596 ;;      Totals:         4       0       0       0       0       0       0       0       0
 21597 ;;Total ram usage:        4 bytes
 21598 ;; Hardware stack levels used:    1
 21599 ;; This function calls:
 21600 ;;		Nothing
 21601 ;; This function is called by:
 21602 ;;		_isr
 21603 ;; This function uses a non-reentrant model
 21604 ;;
 21605                           
 21606                           	psect	text88
 21607  00598A                     __ptext88:
 21608                           	opt stack 0
 21609  00598A                     i2_write_timer_zero:
 21610                           	opt stack 14
 21611                           
 21612                           ;hardware.c: 140: union Timers timer;
 21613                           ;hardware.c: 142: timer.lt = timer0;
 21614                           
 21615                           ;incstack = 0
 21616  00598A  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 21617  00598E  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 21618                           
 21619                           ;hardware.c: 144: TMR0H = timer.bt[1];
 21620  005992  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 21621                           
 21622                           ;hardware.c: 145: TMR0L = timer.bt[0];
 21623  005996  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 21624  00599A  0012               	return		;funcret
 21625  00599C                     __end_ofi2_write_timer_zero:
 21626                           	opt stack 0
 21627                           tosu	equ	0xFFF
 21628                           tosh	equ	0xFFE
 21629                           tosl	equ	0xFFD
 21630                           pclatu	equ	0xFFB
 21631                           pclath	equ	0xFFA
 21632                           pcl	equ	0xFF9
 21633                           tblptru	equ	0xFF8
 21634                           tblptrh	equ	0xFF7
 21635                           tblptrl	equ	0xFF6
 21636                           tablat	equ	0xFF5
 21637                           prodh	equ	0xFF4
 21638                           prodl	equ	0xFF3
 21639                           intcon	equ	0xFF2
 21640                           intcon2	equ	0xFF1
 21641                           intcon3	equ	0xFF0
 21642                           indf0	equ	0xFEF
 21643                           postinc0	equ	0xFEE
 21644                           fsr0h	equ	0xFEA
 21645                           fsr0l	equ	0xFE9
 21646                           wreg	equ	0xFE8
 21647                           indf1	equ	0xFE7
 21648                           postinc1	equ	0xFE6
 21649                           postdec1	equ	0xFE5
 21650                           plusw1	equ	0xFE3
 21651                           fsr1h	equ	0xFE2
 21652                           fsr1l	equ	0xFE1
 21653                           indf2	equ	0xFDF
 21654                           postinc2	equ	0xFDE
 21655                           postdec2	equ	0xFDD
 21656                           plusw2	equ	0xFDB
 21657                           fsr2h	equ	0xFDA
 21658                           fsr2l	equ	0xFD9
 21659                           status	equ	0xFD8
 21660                           
 21661 ;; *************** function _recebe_dado_uart *****************
 21662 ;; Defined at:
 21663 ;;		line 138 in file "bibliotecas/uart.c"
 21664 ;; Parameters:    Size  Location     Type
 21665 ;;		None
 21666 ;; Auto vars:     Size  Location     Type
 21667 ;;		None
 21668 ;; Return value:  Size  Location     Type
 21669 ;;                  1    wreg      unsigned char 
 21670 ;; Registers used:
 21671 ;;		wreg, status,2
 21672 ;; Tracked objects:
 21673 ;;		On entry : 0/0
 21674 ;;		On exit  : 0/0
 21675 ;;		Unchanged: 0/0
 21676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21677 ;;      Params:         0       0       0       0       0       0       0       0       0
 21678 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21679 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21680 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21681 ;;Total ram usage:        0 bytes
 21682 ;; Hardware stack levels used:    1
 21683 ;; This function calls:
 21684 ;;		Nothing
 21685 ;; This function is called by:
 21686 ;;		_isr
 21687 ;;		_recebe_string_uart
 21688 ;; This function uses a non-reentrant model
 21689 ;;
 21690                           
 21691                           	psect	text89
 21692  00599C                     __ptext89:
 21693                           	opt stack 0
 21694  00599C                     _recebe_dado_uart:
 21695                           	opt stack 14
 21696                           
 21697                           ;uart.c: 140: while(RCIF==0);
 21698                           
 21699                           ;incstack = 0
 21700  00599C  AA9E               	btfss	3998,5,c	;volatile
 21701  00599E  D7FE               	goto	_recebe_dado_uart
 21702                           
 21703                           ;uart.c: 141: if(RCSTAbits.OERR)
 21704  0059A0  A2AB               	btfss	4011,1,c	;volatile
 21705  0059A2  D003               	goto	i2l840
 21706                           
 21707                           ;uart.c: 142: {
 21708                           ;uart.c: 143: CREN = 0;
 21709  0059A4  98AB               	bcf	4011,4,c	;volatile
 21710                           
 21711                           ;uart.c: 144: __nop();
 21712  0059A6  F000               	nop	
 21713                           
 21714                           ;uart.c: 145: CREN=1;
 21715  0059A8  88AB               	bsf	4011,4,c	;volatile
 21716  0059AA                     i2l840:
 21717                           
 21718                           ;uart.c: 146: }
 21719                           ;uart.c: 147: return(RCREG);
 21720  0059AA  50AE               	movf	4014,w,c	;volatile
 21721  0059AC  0012               	return	
 21722  0059AE                     __end_of_recebe_dado_uart:
 21723                           	opt stack 0
 21724                           tosu	equ	0xFFF
 21725                           tosh	equ	0xFFE
 21726                           tosl	equ	0xFFD
 21727                           pclatu	equ	0xFFB
 21728                           pclath	equ	0xFFA
 21729                           pcl	equ	0xFF9
 21730                           tblptru	equ	0xFF8
 21731                           tblptrh	equ	0xFF7
 21732                           tblptrl	equ	0xFF6
 21733                           tablat	equ	0xFF5
 21734                           prodh	equ	0xFF4
 21735                           prodl	equ	0xFF3
 21736                           intcon	equ	0xFF2
 21737                           intcon2	equ	0xFF1
 21738                           intcon3	equ	0xFF0
 21739                           indf0	equ	0xFEF
 21740                           postinc0	equ	0xFEE
 21741                           fsr0h	equ	0xFEA
 21742                           fsr0l	equ	0xFE9
 21743                           wreg	equ	0xFE8
 21744                           indf1	equ	0xFE7
 21745                           postinc1	equ	0xFE6
 21746                           postdec1	equ	0xFE5
 21747                           plusw1	equ	0xFE3
 21748                           fsr1h	equ	0xFE2
 21749                           fsr1l	equ	0xFE1
 21750                           indf2	equ	0xFDF
 21751                           postinc2	equ	0xFDE
 21752                           postdec2	equ	0xFDD
 21753                           plusw2	equ	0xFDB
 21754                           fsr2h	equ	0xFDA
 21755                           fsr2l	equ	0xFD9
 21756                           status	equ	0xFD8
 21757                           
 21758 ;; *************** function _GPSRead *****************
 21759 ;; Defined at:
 21760 ;;		line 468 in file "bibliotecas/GPS.c"
 21761 ;; Parameters:    Size  Location     Type
 21762 ;;  buff            1    wreg     unsigned char 
 21763 ;; Auto vars:     Size  Location     Type
 21764 ;;  buff            1    9[COMRAM] unsigned char 
 21765 ;;  c               1   10[COMRAM] unsigned char 
 21766 ;; Return value:  Size  Location     Type
 21767 ;;                  2    8[None  ] int 
 21768 ;; Registers used:
 21769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21770 ;; Tracked objects:
 21771 ;;		On entry : 0/0
 21772 ;;		On exit  : 0/0
 21773 ;;		Unchanged: 0/0
 21774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21775 ;;      Params:         0       0       0       0       0       0       0       0       0
 21776 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21777 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21778 ;;      Totals:         2       0       0       0       0       0       0       0       0
 21779 ;;Total ram usage:        2 bytes
 21780 ;; Hardware stack levels used:    1
 21781 ;; Hardware stack levels required when called:    1
 21782 ;; This function calls:
 21783 ;;		_strcmp
 21784 ;;		_stringcpy
 21785 ;; This function is called by:
 21786 ;;		_isr
 21787 ;; This function uses a non-reentrant model
 21788 ;;
 21789                           
 21790                           	psect	text90
 21791  002D00                     __ptext90:
 21792                           	opt stack 0
 21793  002D00                     _GPSRead:
 21794                           	opt stack 13
 21795                           
 21796                           ;incstack = 0
 21797                           ;GPSRead@buff stored from wreg
 21798  002D00  6E0A               	movwf	GPSRead@buff,c
 21799                           
 21800                           ;GPS.c: 470: uint8_t c = buff;
 21801  002D02  C00A  F00B         	movff	GPSRead@buff,GPSRead@c
 21802                           
 21803                           ;GPS.c: 472: switch(c) {
 21804  002D06  D13B               	goto	i2l177
 21805  002D08                     
 21806                           ;GPS.c: 474: if(SentenceType == 1)
 21807  002D08  0436               	decf	_SentenceType,w,c
 21808  002D0A  A4D8               	btfss	status,2,c
 21809  002D0C  D004               	goto	i2l179
 21810                           
 21811                           ;GPS.c: 475: GPRMC_ok = 1;
 21812  002D0E  0E00               	movlw	0
 21813  002D10  6E2E               	movwf	_GPRMC_ok+1,c
 21814  002D12  0E01               	movlw	1
 21815  002D14  6E2D               	movwf	_GPRMC_ok,c
 21816  002D16                     i2l179:
 21817                           
 21818                           ;GPS.c: 476: if(SentenceType == 2)
 21819  002D16  0E02               	movlw	2
 21820  002D18  1836               	xorwf	_SentenceType,w,c
 21821  002D1A  A4D8               	btfss	status,2,c
 21822  002D1C  D004               	goto	i2l180
 21823                           
 21824                           ;GPS.c: 477: GPGGA_ok = 1;
 21825  002D1E  0E00               	movlw	0
 21826  002D20  6E2C               	movwf	_GPGGA_ok+1,c
 21827  002D22  0E01               	movlw	1
 21828  002D24  6E2B               	movwf	_GPGGA_ok,c
 21829  002D26                     i2l180:
 21830                           
 21831                           ;GPS.c: 478: if(GPRMC_ok && GPGGA_ok) {
 21832  002D26  502D               	movf	_GPRMC_ok,w,c
 21833  002D28  102E               	iorwf	_GPRMC_ok+1,w,c
 21834  002D2A  B4D8               	btfsc	status,2,c
 21835  002D2C  0012               	return	
 21836  002D2E  502B               	movf	_GPGGA_ok,w,c
 21837  002D30  102C               	iorwf	_GPGGA_ok+1,w,c
 21838  002D32  B4D8               	btfsc	status,2,c
 21839  002D34  0012               	return	
 21840                           
 21841                           ;GPS.c: 479: GPRMC_ok = GPGGA_ok = 0;
 21842  002D36  0E00               	movlw	0
 21843  002D38  6E2C               	movwf	_GPGGA_ok+1,c
 21844  002D3A  0E00               	movlw	0
 21845  002D3C  6E2B               	movwf	_GPGGA_ok,c
 21846  002D3E  C02B  F02D         	movff	_GPGGA_ok,_GPRMC_ok
 21847  002D42  C02C  F02E         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 21848                           
 21849                           ;GPS.c: 481: }
 21850                           ;GPS.c: 482: break;
 21851                           
 21852                           ;GPS.c: 480: return 1;
 21853                           ;	Return value of _GPSRead is never used
 21854  002D46  0012               	return	
 21855  002D48                     
 21856                           ;GPS.c: 485: Term = char_number = 0;
 21857  002D48  0E00               	movlw	0
 21858  002D4A  6E37               	movwf	_char_number,c
 21859  002D4C  C037  F035         	movff	_char_number,_Term
 21860                           
 21861                           ;GPS.c: 486: break;
 21862  002D50  0012               	return	
 21863  002D52                     
 21864                           ;GPS.c: 489: buffer[char_number] = '\0';
 21865  002D52  5037               	movf	_char_number,w,c
 21866  002D54  0D01               	mullw	1
 21867  002D56  0E7C               	movlw	low _buffer
 21868  002D58  24F3               	addwf	prodl,w,c
 21869  002D5A  6ED9               	movwf	fsr2l,c
 21870  002D5C  0E01               	movlw	high _buffer
 21871  002D5E  20F4               	addwfc	prodh,w,c
 21872  002D60  6EDA               	movwf	fsr2h,c
 21873  002D62  0E00               	movlw	0
 21874  002D64  6EDF               	movwf	indf2,c
 21875                           
 21876                           ;GPS.c: 490: if(Term == 0) {
 21877  002D66  5035               	movf	_Term,w,c
 21878  002D68  A4D8               	btfss	status,2,c
 21879  002D6A  D030               	goto	i2l190
 21880                           
 21881                           ;GPS.c: 491: stringcpy(buffer, sentence, 0);
 21882  002D6C  0E7C               	movlw	low _buffer
 21883  002D6E  6E01               	movwf	stringcpy@str1,c
 21884  002D70  0E01               	movlw	high _buffer
 21885  002D72  6E02               	movwf	stringcpy@str1+1,c
 21886  002D74  0EAD               	movlw	low _sentence
 21887  002D76  6E03               	movwf	stringcpy@str2,c
 21888  002D78  0E01               	movlw	high _sentence
 21889  002D7A  6E04               	movwf	stringcpy@str2+1,c
 21890  002D7C  0E00               	movlw	0
 21891  002D7E  6E06               	movwf	stringcpy@dir+1,c
 21892  002D80  0E00               	movlw	0
 21893  002D82  6E05               	movwf	stringcpy@dir,c
 21894  002D84  ECEC  F029         	call	_stringcpy	;wreg free
 21895                           
 21896                           ;GPS.c: 492: if(strcmp(sentence, "GPRMC") == 0)
 21897  002D88  0EAD               	movlw	low _sentence
 21898  002D8A  6E01               	movwf	strcmp@s1,c
 21899  002D8C  0E01               	movlw	high _sentence
 21900  002D8E  6E02               	movwf	strcmp@s1+1,c
 21901  002D90  0ECA               	movlw	low STR_1
 21902  002D92  6E03               	movwf	strcmp@s2,c
 21903  002D94  0E08               	movlw	high STR_1
 21904  002D96  6E04               	movwf	strcmp@s2+1,c
 21905  002D98  ECA7  F02A         	call	_strcmp	;wreg free
 21906  002D9C  5001               	movf	?_strcmp,w,c
 21907  002D9E  1002               	iorwf	?_strcmp+1,w,c
 21908  002DA0  A4D8               	btfss	status,2,c
 21909  002DA2  D002               	goto	i2l187
 21910                           
 21911                           ;GPS.c: 493: SentenceType = 1;
 21912  002DA4  0E01               	movlw	1
 21913  002DA6  D011               	goto	L11
 21914  002DA8                     i2l187:
 21915                           
 21916                           ;GPS.c: 494: else if(strcmp(sentence, "GPGGA") == 0)
 21917  002DA8  0EAD               	movlw	low _sentence
 21918  002DAA  6E01               	movwf	strcmp@s1,c
 21919  002DAC  0E01               	movlw	high _sentence
 21920  002DAE  6E02               	movwf	strcmp@s1+1,c
 21921  002DB0  0EC4               	movlw	low STR_2
 21922  002DB2  6E03               	movwf	strcmp@s2,c
 21923  002DB4  0E08               	movlw	high STR_2
 21924  002DB6  6E04               	movwf	strcmp@s2+1,c
 21925  002DB8  ECA7  F02A         	call	_strcmp	;wreg free
 21926  002DBC  5001               	movf	?_strcmp,w,c
 21927  002DBE  1002               	iorwf	?_strcmp+1,w,c
 21928  002DC0  A4D8               	btfss	status,2,c
 21929  002DC2  D002               	goto	i2l189
 21930                           
 21931                           ;GPS.c: 495: SentenceType = 2;
 21932  002DC4  0E02               	movlw	2
 21933  002DC6  D001               	goto	L11
 21934  002DC8                     i2l189:
 21935                           
 21936                           ;GPS.c: 496: else
 21937                           ;GPS.c: 497: SentenceType = 3;
 21938  002DC8  0E03               	movlw	3
 21939  002DCA                     L11:
 21940  002DCA  6E36               	movwf	_SentenceType,c
 21941  002DCC                     i2l190:
 21942                           
 21943                           ;GPS.c: 498: }
 21944                           ;GPS.c: 501: if(Term == 1 && SentenceType == 1) {
 21945  002DCC  0435               	decf	_Term,w,c
 21946  002DCE  A4D8               	btfss	status,2,c
 21947  002DD0  D011               	goto	i2l191
 21948  002DD2  0436               	decf	_SentenceType,w,c
 21949  002DD4  A4D8               	btfss	status,2,c
 21950  002DD6  D00E               	goto	i2l191
 21951                           
 21952                           ;GPS.c: 502: stringcpy(buffer, rawTime, 0);
 21953  002DD8  0E7C               	movlw	low _buffer
 21954  002DDA  6E01               	movwf	stringcpy@str1,c
 21955  002DDC  0E01               	movlw	high _buffer
 21956  002DDE  6E02               	movwf	stringcpy@str1+1,c
 21957  002DE0  0E88               	movlw	low _rawTime
 21958  002DE2  6E03               	movwf	stringcpy@str2,c
 21959  002DE4  0E01               	movlw	high _rawTime
 21960  002DE6  6E04               	movwf	stringcpy@str2+1,c
 21961  002DE8  0E00               	movlw	0
 21962  002DEA  6E06               	movwf	stringcpy@dir+1,c
 21963  002DEC  0E00               	movlw	0
 21964  002DEE  6E05               	movwf	stringcpy@dir,c
 21965  002DF0  ECEC  F029         	call	_stringcpy	;wreg free
 21966  002DF4                     i2l191:
 21967                           
 21968                           ;GPS.c: 503: }
 21969                           ;GPS.c: 506: if((Term == 3) && (SentenceType == 1)) {
 21970  002DF4  0E03               	movlw	3
 21971  002DF6  1835               	xorwf	_Term,w,c
 21972  002DF8  A4D8               	btfss	status,2,c
 21973  002DFA  D011               	goto	i2l192
 21974  002DFC  0436               	decf	_SentenceType,w,c
 21975  002DFE  A4D8               	btfss	status,2,c
 21976  002E00  D00E               	goto	i2l192
 21977                           
 21978                           ;GPS.c: 507: stringcpy(buffer, rawLatitude, 1);
 21979  002E02  0E7C               	movlw	low _buffer
 21980  002E04  6E01               	movwf	stringcpy@str1,c
 21981  002E06  0E01               	movlw	high _buffer
 21982  002E08  6E02               	movwf	stringcpy@str1+1,c
 21983  002E0A  0E6F               	movlw	low _rawLatitude
 21984  002E0C  6E03               	movwf	stringcpy@str2,c
 21985  002E0E  0E01               	movlw	high _rawLatitude
 21986  002E10  6E04               	movwf	stringcpy@str2+1,c
 21987  002E12  0E00               	movlw	0
 21988  002E14  6E06               	movwf	stringcpy@dir+1,c
 21989  002E16  0E01               	movlw	1
 21990  002E18  6E05               	movwf	stringcpy@dir,c
 21991  002E1A  ECEC  F029         	call	_stringcpy	;wreg free
 21992  002E1E                     i2l192:
 21993                           
 21994                           ;GPS.c: 508: }
 21995                           ;GPS.c: 510: if((Term == 4) && (SentenceType == 1)) {
 21996  002E1E  0E04               	movlw	4
 21997  002E20  1835               	xorwf	_Term,w,c
 21998  002E22  A4D8               	btfss	status,2,c
 21999  002E24  D00C               	goto	i2l195
 22000  002E26  0436               	decf	_SentenceType,w,c
 22001  002E28  A4D8               	btfss	status,2,c
 22002  002E2A  D009               	goto	i2l195
 22003                           
 22004                           ;GPS.c: 511: if(buffer[0] == 'N')
 22005  002E2C  0E4E               	movlw	78
 22006  002E2E  0101               	movlb	1	; () banked
 22007  002E30  197C               	xorwf	_buffer& (0+255),w,b
 22008  002E32  A4D8               	btfss	status,2,c
 22009  002E34  D002               	goto	i2l194
 22010                           
 22011                           ; BSR set to: 1
 22012                           ;GPS.c: 512: rawLatitude[0] = '0';
 22013  002E36  0E30               	movlw	48
 22014  002E38  D001               	goto	L12
 22015  002E3A                     i2l194:
 22016                           
 22017                           ; BSR set to: 1
 22018                           ;GPS.c: 513: else
 22019                           ;GPS.c: 514: rawLatitude[0] = '-';
 22020                           
 22021                           ; BSR set to: 1
 22022  002E3A  0E2D               	movlw	45
 22023  002E3C                     L12:
 22024  002E3C  6F6F               	movwf	_rawLatitude& (0+255),b
 22025  002E3E                     i2l195:
 22026                           
 22027                           ;GPS.c: 515: }
 22028                           ;GPS.c: 518: if((Term == 5) && (SentenceType == 1)) {
 22029                           
 22030                           ; BSR set to: 1
 22031                           
 22032                           ; BSR set to: 1
 22033  002E3E  0E05               	movlw	5
 22034  002E40  1835               	xorwf	_Term,w,c
 22035  002E42  A4D8               	btfss	status,2,c
 22036  002E44  D011               	goto	i2l196
 22037  002E46  0436               	decf	_SentenceType,w,c
 22038  002E48  A4D8               	btfss	status,2,c
 22039  002E4A  D00E               	goto	i2l196
 22040                           
 22041                           ;GPS.c: 519: stringcpy(buffer, rawLongitude, 1);
 22042  002E4C  0E7C               	movlw	low _buffer
 22043  002E4E  6E01               	movwf	stringcpy@str1,c
 22044  002E50  0E01               	movlw	high _buffer
 22045  002E52  6E02               	movwf	stringcpy@str1+1,c
 22046  002E54  0E62               	movlw	low _rawLongitude
 22047  002E56  6E03               	movwf	stringcpy@str2,c
 22048  002E58  0E01               	movlw	high _rawLongitude
 22049  002E5A  6E04               	movwf	stringcpy@str2+1,c
 22050  002E5C  0E00               	movlw	0
 22051  002E5E  6E06               	movwf	stringcpy@dir+1,c
 22052  002E60  0E01               	movlw	1
 22053  002E62  6E05               	movwf	stringcpy@dir,c
 22054  002E64  ECEC  F029         	call	_stringcpy	;wreg free
 22055  002E68                     i2l196:
 22056                           
 22057                           ;GPS.c: 520: }
 22058                           ;GPS.c: 522: if((Term == 6) && (SentenceType == 1)) {
 22059  002E68  0E06               	movlw	6
 22060  002E6A  1835               	xorwf	_Term,w,c
 22061  002E6C  A4D8               	btfss	status,2,c
 22062  002E6E  D00C               	goto	i2l199
 22063  002E70  0436               	decf	_SentenceType,w,c
 22064  002E72  A4D8               	btfss	status,2,c
 22065  002E74  D009               	goto	i2l199
 22066                           
 22067                           ;GPS.c: 523: if(buffer[0] == 'E')
 22068  002E76  0E45               	movlw	69
 22069  002E78  0101               	movlb	1	; () banked
 22070  002E7A  197C               	xorwf	_buffer& (0+255),w,b
 22071  002E7C  A4D8               	btfss	status,2,c
 22072  002E7E  D002               	goto	i2l198
 22073                           
 22074                           ; BSR set to: 1
 22075                           ;GPS.c: 524: rawLongitude[0] = '0';
 22076  002E80  0E30               	movlw	48
 22077  002E82  D001               	goto	L13
 22078  002E84                     i2l198:
 22079                           
 22080                           ; BSR set to: 1
 22081                           ;GPS.c: 525: else
 22082                           ;GPS.c: 526: rawLongitude[0] = '-';
 22083                           
 22084                           ; BSR set to: 1
 22085  002E84  0E2D               	movlw	45
 22086  002E86                     L13:
 22087  002E86  6F62               	movwf	_rawLongitude& (0+255),b
 22088  002E88                     i2l199:
 22089                           
 22090                           ;GPS.c: 527: }
 22091                           ;GPS.c: 530: if((Term == 7) && (SentenceType == 1)) {
 22092                           
 22093                           ; BSR set to: 1
 22094                           
 22095                           ; BSR set to: 1
 22096  002E88  0E07               	movlw	7
 22097  002E8A  1835               	xorwf	_Term,w,c
 22098  002E8C  A4D8               	btfss	status,2,c
 22099  002E8E  D011               	goto	i2l200
 22100  002E90  0436               	decf	_SentenceType,w,c
 22101  002E92  A4D8               	btfss	status,2,c
 22102  002E94  D00E               	goto	i2l200
 22103                           
 22104                           ;GPS.c: 531: stringcpy(buffer, rawSpeed, 0);
 22105  002E96  0E7C               	movlw	low _buffer
 22106  002E98  6E01               	movwf	stringcpy@str1,c
 22107  002E9A  0E01               	movlw	high _buffer
 22108  002E9C  6E02               	movwf	stringcpy@str1+1,c
 22109  002E9E  0EA7               	movlw	low _rawSpeed
 22110  002EA0  6E03               	movwf	stringcpy@str2,c
 22111  002EA2  0E01               	movlw	high _rawSpeed
 22112  002EA4  6E04               	movwf	stringcpy@str2+1,c
 22113  002EA6  0E00               	movlw	0
 22114  002EA8  6E06               	movwf	stringcpy@dir+1,c
 22115  002EAA  0E00               	movlw	0
 22116  002EAC  6E05               	movwf	stringcpy@dir,c
 22117  002EAE  ECEC  F029         	call	_stringcpy	;wreg free
 22118  002EB2                     i2l200:
 22119                           
 22120                           ;GPS.c: 532: }
 22121                           ;GPS.c: 535: if((Term == 8) && (SentenceType == 1)) {
 22122  002EB2  0E08               	movlw	8
 22123  002EB4  1835               	xorwf	_Term,w,c
 22124  002EB6  A4D8               	btfss	status,2,c
 22125  002EB8  D011               	goto	i2l201
 22126  002EBA  0436               	decf	_SentenceType,w,c
 22127  002EBC  A4D8               	btfss	status,2,c
 22128  002EBE  D00E               	goto	i2l201
 22129                           
 22130                           ;GPS.c: 536: stringcpy(buffer, rawCourse, 0);
 22131  002EC0  0E7C               	movlw	low _buffer
 22132  002EC2  6E01               	movwf	stringcpy@str1,c
 22133  002EC4  0E01               	movlw	high _buffer
 22134  002EC6  6E02               	movwf	stringcpy@str1+1,c
 22135  002EC8  0EA1               	movlw	low _rawCourse
 22136  002ECA  6E03               	movwf	stringcpy@str2,c
 22137  002ECC  0E01               	movlw	high _rawCourse
 22138  002ECE  6E04               	movwf	stringcpy@str2+1,c
 22139  002ED0  0E00               	movlw	0
 22140  002ED2  6E06               	movwf	stringcpy@dir+1,c
 22141  002ED4  0E00               	movlw	0
 22142  002ED6  6E05               	movwf	stringcpy@dir,c
 22143  002ED8  ECEC  F029         	call	_stringcpy	;wreg free
 22144  002EDC                     i2l201:
 22145                           
 22146                           ;GPS.c: 537: }
 22147                           ;GPS.c: 540: if(Term == 9 && SentenceType == 1) {
 22148  002EDC  0E09               	movlw	9
 22149  002EDE  1835               	xorwf	_Term,w,c
 22150  002EE0  A4D8               	btfss	status,2,c
 22151  002EE2  D011               	goto	i2l202
 22152  002EE4  0436               	decf	_SentenceType,w,c
 22153  002EE6  A4D8               	btfss	status,2,c
 22154  002EE8  D00E               	goto	i2l202
 22155                           
 22156                           ;GPS.c: 541: stringcpy(buffer, rawDate, 0);
 22157  002EEA  0E7C               	movlw	low _buffer
 22158  002EEC  6E01               	movwf	stringcpy@str1,c
 22159  002EEE  0E01               	movlw	high _buffer
 22160  002EF0  6E02               	movwf	stringcpy@str1+1,c
 22161  002EF2  0E9A               	movlw	low _rawDate
 22162  002EF4  6E03               	movwf	stringcpy@str2,c
 22163  002EF6  0E01               	movlw	high _rawDate
 22164  002EF8  6E04               	movwf	stringcpy@str2+1,c
 22165  002EFA  0E00               	movlw	0
 22166  002EFC  6E06               	movwf	stringcpy@dir+1,c
 22167  002EFE  0E00               	movlw	0
 22168  002F00  6E05               	movwf	stringcpy@dir,c
 22169  002F02  ECEC  F029         	call	_stringcpy	;wreg free
 22170  002F06                     i2l202:
 22171                           
 22172                           ;GPS.c: 542: }
 22173                           ;GPS.c: 545: if((Term == 7) && (SentenceType == 2)) {
 22174  002F06  0E07               	movlw	7
 22175  002F08  1835               	xorwf	_Term,w,c
 22176  002F0A  A4D8               	btfss	status,2,c
 22177  002F0C  D012               	goto	i2l203
 22178  002F0E  0E02               	movlw	2
 22179  002F10  1836               	xorwf	_SentenceType,w,c
 22180  002F12  A4D8               	btfss	status,2,c
 22181  002F14  D00E               	goto	i2l203
 22182                           
 22183                           ;GPS.c: 546: stringcpy(buffer, rawSatellites, 0);
 22184  002F16  0E7C               	movlw	low _buffer
 22185  002F18  6E01               	movwf	stringcpy@str1,c
 22186  002F1A  0E01               	movlw	high _buffer
 22187  002F1C  6E02               	movwf	stringcpy@str1+1,c
 22188  002F1E  0E3B               	movlw	low _rawSatellites
 22189  002F20  6E03               	movwf	stringcpy@str2,c
 22190  002F22  0E00               	movlw	high _rawSatellites
 22191  002F24  6E04               	movwf	stringcpy@str2+1,c
 22192  002F26  0E00               	movlw	0
 22193  002F28  6E06               	movwf	stringcpy@dir+1,c
 22194  002F2A  0E00               	movlw	0
 22195  002F2C  6E05               	movwf	stringcpy@dir,c
 22196  002F2E  ECEC  F029         	call	_stringcpy	;wreg free
 22197  002F32                     i2l203:
 22198                           
 22199                           ;GPS.c: 547: }
 22200                           ;GPS.c: 550: if((Term == 9) && (SentenceType == 2)) {
 22201  002F32  0E09               	movlw	9
 22202  002F34  1835               	xorwf	_Term,w,c
 22203  002F36  A4D8               	btfss	status,2,c
 22204  002F38  D012               	goto	i2l204
 22205  002F3A  0E02               	movlw	2
 22206  002F3C  1836               	xorwf	_SentenceType,w,c
 22207  002F3E  A4D8               	btfss	status,2,c
 22208  002F40  D00E               	goto	i2l204
 22209                           
 22210                           ;GPS.c: 551: stringcpy(buffer, rawAltitude, 0);
 22211  002F42  0E7C               	movlw	low _buffer
 22212  002F44  6E01               	movwf	stringcpy@str1,c
 22213  002F46  0E01               	movlw	high _buffer
 22214  002F48  6E02               	movwf	stringcpy@str1+1,c
 22215  002F4A  0E93               	movlw	low _rawAltitude
 22216  002F4C  6E03               	movwf	stringcpy@str2,c
 22217  002F4E  0E01               	movlw	high _rawAltitude
 22218  002F50  6E04               	movwf	stringcpy@str2+1,c
 22219  002F52  0E00               	movlw	0
 22220  002F54  6E06               	movwf	stringcpy@dir+1,c
 22221  002F56  0E00               	movlw	0
 22222  002F58  6E05               	movwf	stringcpy@dir,c
 22223  002F5A  ECEC  F029         	call	_stringcpy	;wreg free
 22224  002F5E                     i2l204:
 22225                           
 22226                           ;GPS.c: 552: }
 22227                           ;GPS.c: 553: Term++;
 22228  002F5E  2A35               	incf	_Term,f,c
 22229                           
 22230                           ;GPS.c: 554: char_number = 0;
 22231  002F60  0E00               	movlw	0
 22232  002F62  6E37               	movwf	_char_number,c
 22233                           
 22234                           ;GPS.c: 555: break;
 22235  002F64  0012               	return	
 22236  002F66                     
 22237                           ;GPS.c: 558: buffer[char_number++] = c;
 22238  002F66  5037               	movf	_char_number,w,c
 22239  002F68  0D01               	mullw	1
 22240  002F6A  0E7C               	movlw	low _buffer
 22241  002F6C  24F3               	addwf	prodl,w,c
 22242  002F6E  6ED9               	movwf	fsr2l,c
 22243  002F70  0E01               	movlw	high _buffer
 22244  002F72  20F4               	addwfc	prodh,w,c
 22245  002F74  6EDA               	movwf	fsr2h,c
 22246  002F76  C00B  FFDF         	movff	GPSRead@c,indf2
 22247  002F7A  2A37               	incf	_char_number,f,c
 22248                           
 22249                           ;GPS.c: 560: }
 22250                           
 22251                           ;GPS.c: 559: break;
 22252  002F7C  0012               	return	
 22253  002F7E                     i2l177:
 22254  002F7E  500B               	movf	GPSRead@c,w,c
 22255                           
 22256                           ; Switch size 1, requested type "space"
 22257                           ; Number of cases is 3, Range of values is 13 to 44
 22258                           ; switch strategies available:
 22259                           ; Name         Instructions Cycles
 22260                           ; simple_byte           10     6 (average)
 22261                           ;	Chosen strategy is simple_byte
 22262  002F80  0A0D               	xorlw	13	; case 13
 22263  002F82  B4D8               	btfsc	status,2,c
 22264  002F84  D6C1               	goto	i2l178
 22265  002F86  0A29               	xorlw	41	; case 36
 22266  002F88  B4D8               	btfsc	status,2,c
 22267  002F8A  D6DE               	goto	i2l184
 22268  002F8C  0A08               	xorlw	8	; case 44
 22269  002F8E  B4D8               	btfsc	status,2,c
 22270  002F90  D6E0               	goto	i2l185
 22271  002F92  D7E9               	goto	i2l205
 22272  002F94                     __end_of_GPSRead:
 22273                           	opt stack 0
 22274                           tosu	equ	0xFFF
 22275                           tosh	equ	0xFFE
 22276                           tosl	equ	0xFFD
 22277                           pclatu	equ	0xFFB
 22278                           pclath	equ	0xFFA
 22279                           pcl	equ	0xFF9
 22280                           tblptru	equ	0xFF8
 22281                           tblptrh	equ	0xFF7
 22282                           tblptrl	equ	0xFF6
 22283                           tablat	equ	0xFF5
 22284                           prodh	equ	0xFF4
 22285                           prodl	equ	0xFF3
 22286                           intcon	equ	0xFF2
 22287                           intcon2	equ	0xFF1
 22288                           intcon3	equ	0xFF0
 22289                           indf0	equ	0xFEF
 22290                           postinc0	equ	0xFEE
 22291                           fsr0h	equ	0xFEA
 22292                           fsr0l	equ	0xFE9
 22293                           wreg	equ	0xFE8
 22294                           indf1	equ	0xFE7
 22295                           postinc1	equ	0xFE6
 22296                           postdec1	equ	0xFE5
 22297                           plusw1	equ	0xFE3
 22298                           fsr1h	equ	0xFE2
 22299                           fsr1l	equ	0xFE1
 22300                           indf2	equ	0xFDF
 22301                           postinc2	equ	0xFDE
 22302                           postdec2	equ	0xFDD
 22303                           plusw2	equ	0xFDB
 22304                           fsr2h	equ	0xFDA
 22305                           fsr2l	equ	0xFD9
 22306                           status	equ	0xFD8
 22307                           
 22308 ;; *************** function _stringcpy *****************
 22309 ;; Defined at:
 22310 ;;		line 459 in file "bibliotecas/GPS.c"
 22311 ;; Parameters:    Size  Location     Type
 22312 ;;  str1            2    0[COMRAM] PTR unsigned char 
 22313 ;;		 -> buffer(12), 
 22314 ;;  str2            2    2[COMRAM] PTR unsigned char 
 22315 ;;		 -> rawAltitude(7), rawSatellites(3), rawDate(7), rawCourse(6), 
 22316 ;;		 -> rawSpeed(6), rawLongitude(13), rawLatitude(13), rawTime(11), 
 22317 ;;		 -> sentence(6), 
 22318 ;;  dir             2    4[COMRAM] int 
 22319 ;; Auto vars:     Size  Location     Type
 22320 ;;  chr             1    8[COMRAM] unsigned char 
 22321 ;; Return value:  Size  Location     Type
 22322 ;;                  1    wreg      void 
 22323 ;; Registers used:
 22324 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22325 ;; Tracked objects:
 22326 ;;		On entry : 0/0
 22327 ;;		On exit  : 0/0
 22328 ;;		Unchanged: 0/0
 22329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22330 ;;      Params:         6       0       0       0       0       0       0       0       0
 22331 ;;      Locals:         1       0       0       0       0       0       0       0       0
 22332 ;;      Temps:          2       0       0       0       0       0       0       0       0
 22333 ;;      Totals:         9       0       0       0       0       0       0       0       0
 22334 ;;Total ram usage:        9 bytes
 22335 ;; Hardware stack levels used:    1
 22336 ;; This function calls:
 22337 ;;		Nothing
 22338 ;; This function is called by:
 22339 ;;		_GPSRead
 22340 ;; This function uses a non-reentrant model
 22341 ;;
 22342                           
 22343                           	psect	text91
 22344  0053D8                     __ptext91:
 22345                           	opt stack 0
 22346  0053D8                     _stringcpy:
 22347                           	opt stack 13
 22348                           
 22349                           ;GPS.c: 461: uint8_t chr = 0;
 22350                           
 22351                           ;incstack = 0
 22352  0053D8  0E00               	movlw	0
 22353  0053DA  6E09               	movwf	stringcpy@chr,c
 22354  0053DC                     
 22355                           ;GPS.c: 464: str2[chr + dir] = str1[chr];
 22356  0053DC  5009               	movf	stringcpy@chr,w,c
 22357  0053DE  0D01               	mullw	1
 22358  0053E0  50F3               	movf	prodl,w,c
 22359  0053E2  2401               	addwf	stringcpy@str1,w,c
 22360  0053E4  6ED9               	movwf	fsr2l,c
 22361  0053E6  50F4               	movf	prodh,w,c
 22362  0053E8  2002               	addwfc	stringcpy@str1+1,w,c
 22363  0053EA  6EDA               	movwf	fsr2h,c
 22364  0053EC  5009               	movf	stringcpy@chr,w,c
 22365  0053EE  2405               	addwf	stringcpy@dir,w,c
 22366  0053F0  6E07               	movwf	??_stringcpy& (0+255),c
 22367  0053F2  0E00               	movlw	0
 22368  0053F4  2006               	addwfc	stringcpy@dir+1,w,c
 22369  0053F6  6E08               	movwf	(??_stringcpy+1)& (0+255),c
 22370  0053F8  5007               	movf	??_stringcpy,w,c
 22371  0053FA  2403               	addwf	stringcpy@str2,w,c
 22372  0053FC  6EE1               	movwf	fsr1l,c
 22373  0053FE  5008               	movf	??_stringcpy+1,w,c
 22374  005400  2004               	addwfc	stringcpy@str2+1,w,c
 22375  005402  6EE2               	movwf	fsr1h,c
 22376  005404  CFDF FFE7          	movff	indf2,indf1
 22377                           
 22378                           ;GPS.c: 465: } while(str1[chr++] != '\0');
 22379  005408  2A09               	incf	stringcpy@chr,f,c
 22380  00540A  0409               	decf	stringcpy@chr,w,c
 22381  00540C  6E07               	movwf	??_stringcpy& (0+255),c
 22382  00540E  5007               	movf	??_stringcpy,w,c
 22383  005410  0D01               	mullw	1
 22384  005412  50F3               	movf	prodl,w,c
 22385  005414  2401               	addwf	stringcpy@str1,w,c
 22386  005416  6ED9               	movwf	fsr2l,c
 22387  005418  50F4               	movf	prodh,w,c
 22388  00541A  2002               	addwfc	stringcpy@str1+1,w,c
 22389  00541C  6EDA               	movwf	fsr2h,c
 22390  00541E  50DF               	movf	indf2,w,c
 22391  005420  B4D8               	btfsc	status,2,c
 22392  005422  0012               	return	
 22393  005424  D7DB               	goto	i2l172
 22394  005426                     __end_of_stringcpy:
 22395                           	opt stack 0
 22396                           tosu	equ	0xFFF
 22397                           tosh	equ	0xFFE
 22398                           tosl	equ	0xFFD
 22399                           pclatu	equ	0xFFB
 22400                           pclath	equ	0xFFA
 22401                           pcl	equ	0xFF9
 22402                           tblptru	equ	0xFF8
 22403                           tblptrh	equ	0xFF7
 22404                           tblptrl	equ	0xFF6
 22405                           tablat	equ	0xFF5
 22406                           prodh	equ	0xFF4
 22407                           prodl	equ	0xFF3
 22408                           intcon	equ	0xFF2
 22409                           intcon2	equ	0xFF1
 22410                           intcon3	equ	0xFF0
 22411                           indf0	equ	0xFEF
 22412                           postinc0	equ	0xFEE
 22413                           fsr0h	equ	0xFEA
 22414                           fsr0l	equ	0xFE9
 22415                           wreg	equ	0xFE8
 22416                           indf1	equ	0xFE7
 22417                           postinc1	equ	0xFE6
 22418                           postdec1	equ	0xFE5
 22419                           plusw1	equ	0xFE3
 22420                           fsr1h	equ	0xFE2
 22421                           fsr1l	equ	0xFE1
 22422                           indf2	equ	0xFDF
 22423                           postinc2	equ	0xFDE
 22424                           postdec2	equ	0xFDD
 22425                           plusw2	equ	0xFDB
 22426                           fsr2h	equ	0xFDA
 22427                           fsr2l	equ	0xFD9
 22428                           status	equ	0xFD8
 22429                           
 22430 ;; *************** function _strcmp *****************
 22431 ;; Defined at:
 22432 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
 22433 ;; Parameters:    Size  Location     Type
 22434 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 22435 ;;		 -> sentence(6), 
 22436 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 22437 ;;		 -> STR_2(6), STR_1(6), 
 22438 ;; Auto vars:     Size  Location     Type
 22439 ;;  r               1    5[COMRAM] char 
 22440 ;; Return value:  Size  Location     Type
 22441 ;;                  2    0[COMRAM] int 
 22442 ;; Registers used:
 22443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 22444 ;; Tracked objects:
 22445 ;;		On entry : 0/0
 22446 ;;		On exit  : 0/0
 22447 ;;		Unchanged: 0/0
 22448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22449 ;;      Params:         4       0       0       0       0       0       0       0       0
 22450 ;;      Locals:         1       0       0       0       0       0       0       0       0
 22451 ;;      Temps:          1       0       0       0       0       0       0       0       0
 22452 ;;      Totals:         6       0       0       0       0       0       0       0       0
 22453 ;;Total ram usage:        6 bytes
 22454 ;; Hardware stack levels used:    1
 22455 ;; This function calls:
 22456 ;;		Nothing
 22457 ;; This function is called by:
 22458 ;;		_GPSRead
 22459 ;; This function uses a non-reentrant model
 22460 ;;
 22461                           
 22462                           	psect	text92
 22463  00554E                     __ptext92:
 22464                           	opt stack 0
 22465  00554E                     _strcmp:
 22466                           	opt stack 13
 22467                           
 22468                           ;incstack = 0
 22469  00554E  D004               	goto	i2l1958
 22470  005550  4A01               	infsnz	strcmp@s1,f,c
 22471  005552  2A02               	incf	strcmp@s1+1,f,c
 22472  005554  4A03               	infsnz	strcmp@s2,f,c
 22473  005556  2A04               	incf	strcmp@s2+1,f,c
 22474  005558                     i2l1958:
 22475  005558  C001  FFD9         	movff	strcmp@s1,fsr2l
 22476  00555C  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 22477  005560  50DF               	movf	indf2,w,c
 22478  005562  6E05               	movwf	??_strcmp& (0+255),c
 22479  005564  C003  FFF6         	movff	strcmp@s2,tblptrl
 22480  005568  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 22481  00556C                     	if	0	;tblptru may be non-zero
 22482  00556C                     	endif
 22483  00556C                     	if	0	;tblptru may be non-zero
 22484  00556C                     	endif
 22485  00556C  0008               	tblrd		*
 22486  00556E  50F5               	movf	tablat,w,c
 22487  005570  0800               	sublw	0
 22488  005572  2405               	addwf	??_strcmp,w,c
 22489  005574  6E06               	movwf	strcmp@r,c
 22490  005576  5006               	movf	strcmp@r,w,c
 22491  005578  A4D8               	btfss	status,2,c
 22492  00557A  D007               	goto	i2u912_40
 22493  00557C  C001  FFD9         	movff	strcmp@s1,fsr2l
 22494  005580  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 22495  005584  50DF               	movf	indf2,w,c
 22496  005586  A4D8               	btfss	status,2,c
 22497  005588  D7E3               	goto	i2l1959
 22498  00558A                     i2u912_40:
 22499  00558A  5006               	movf	strcmp@r,w,c
 22500  00558C  6E01               	movwf	?_strcmp,c
 22501  00558E  6A02               	clrf	?_strcmp+1,c
 22502  005590  BE01               	btfsc	?_strcmp,7,c
 22503  005592  0602               	decf	?_strcmp+1,f,c
 22504  005594  0012               	return	
 22505  005596                     __end_of_strcmp:
 22506                           	opt stack 0
 22507                           tosu	equ	0xFFF
 22508                           tosh	equ	0xFFE
 22509                           tosl	equ	0xFFD
 22510                           pclatu	equ	0xFFB
 22511                           pclath	equ	0xFFA
 22512                           pcl	equ	0xFF9
 22513                           tblptru	equ	0xFF8
 22514                           tblptrh	equ	0xFF7
 22515                           tblptrl	equ	0xFF6
 22516                           tablat	equ	0xFF5
 22517                           prodh	equ	0xFF4
 22518                           prodl	equ	0xFF3
 22519                           intcon	equ	0xFF2
 22520                           intcon2	equ	0xFF1
 22521                           intcon3	equ	0xFF0
 22522                           indf0	equ	0xFEF
 22523                           postinc0	equ	0xFEE
 22524                           fsr0h	equ	0xFEA
 22525                           fsr0l	equ	0xFE9
 22526                           wreg	equ	0xFE8
 22527                           indf1	equ	0xFE7
 22528                           postinc1	equ	0xFE6
 22529                           postdec1	equ	0xFE5
 22530                           plusw1	equ	0xFE3
 22531                           fsr1h	equ	0xFE2
 22532                           fsr1l	equ	0xFE1
 22533                           indf2	equ	0xFDF
 22534                           postinc2	equ	0xFDE
 22535                           postdec2	equ	0xFDD
 22536                           plusw2	equ	0xFDB
 22537                           fsr2h	equ	0xFDA
 22538                           fsr2l	equ	0xFD9
 22539                           status	equ	0xFD8
 22540                           tosu	equ	0xFFF
 22541                           tosh	equ	0xFFE
 22542                           tosl	equ	0xFFD
 22543                           pclatu	equ	0xFFB
 22544                           pclath	equ	0xFFA
 22545                           pcl	equ	0xFF9
 22546                           tblptru	equ	0xFF8
 22547                           tblptrh	equ	0xFF7
 22548                           tblptrl	equ	0xFF6
 22549                           tablat	equ	0xFF5
 22550                           prodh	equ	0xFF4
 22551                           prodl	equ	0xFF3
 22552                           intcon	equ	0xFF2
 22553                           intcon2	equ	0xFF1
 22554                           intcon3	equ	0xFF0
 22555                           indf0	equ	0xFEF
 22556                           postinc0	equ	0xFEE
 22557                           fsr0h	equ	0xFEA
 22558                           fsr0l	equ	0xFE9
 22559                           wreg	equ	0xFE8
 22560                           indf1	equ	0xFE7
 22561                           postinc1	equ	0xFE6
 22562                           postdec1	equ	0xFE5
 22563                           plusw1	equ	0xFE3
 22564                           fsr1h	equ	0xFE2
 22565                           fsr1l	equ	0xFE1
 22566                           indf2	equ	0xFDF
 22567                           postinc2	equ	0xFDE
 22568                           postdec2	equ	0xFDD
 22569                           plusw2	equ	0xFDB
 22570                           fsr2h	equ	0xFDA
 22571                           fsr2l	equ	0xFD9
 22572                           status	equ	0xFD8
 22573                           
 22574                           	psect	text93
 22575  000000                     __ptext93:
 22576                           	opt stack 0
 22577                           tosu	equ	0xFFF
 22578                           tosh	equ	0xFFE
 22579                           tosl	equ	0xFFD
 22580                           pclatu	equ	0xFFB
 22581                           pclath	equ	0xFFA
 22582                           pcl	equ	0xFF9
 22583                           tblptru	equ	0xFF8
 22584                           tblptrh	equ	0xFF7
 22585                           tblptrl	equ	0xFF6
 22586                           tablat	equ	0xFF5
 22587                           prodh	equ	0xFF4
 22588                           prodl	equ	0xFF3
 22589                           intcon	equ	0xFF2
 22590                           intcon2	equ	0xFF1
 22591                           intcon3	equ	0xFF0
 22592                           indf0	equ	0xFEF
 22593                           postinc0	equ	0xFEE
 22594                           fsr0h	equ	0xFEA
 22595                           fsr0l	equ	0xFE9
 22596                           wreg	equ	0xFE8
 22597                           indf1	equ	0xFE7
 22598                           postinc1	equ	0xFE6
 22599                           postdec1	equ	0xFE5
 22600                           plusw1	equ	0xFE3
 22601                           fsr1h	equ	0xFE2
 22602                           fsr1l	equ	0xFE1
 22603                           indf2	equ	0xFDF
 22604                           postinc2	equ	0xFDE
 22605                           postdec2	equ	0xFDD
 22606                           plusw2	equ	0xFDB
 22607                           fsr2h	equ	0xFDA
 22608                           fsr2l	equ	0xFD9
 22609                           status	equ	0xFD8
 22610                           
 22611                           	psect	rparam
 22612  0000                     tosu	equ	0xFFF
 22613                           tosh	equ	0xFFE
 22614                           tosl	equ	0xFFD
 22615                           pclatu	equ	0xFFB
 22616                           pclath	equ	0xFFA
 22617                           pcl	equ	0xFF9
 22618                           tblptru	equ	0xFF8
 22619                           tblptrh	equ	0xFF7
 22620                           tblptrl	equ	0xFF6
 22621                           tablat	equ	0xFF5
 22622                           prodh	equ	0xFF4
 22623                           prodl	equ	0xFF3
 22624                           intcon	equ	0xFF2
 22625                           intcon2	equ	0xFF1
 22626                           intcon3	equ	0xFF0
 22627                           indf0	equ	0xFEF
 22628                           postinc0	equ	0xFEE
 22629                           fsr0h	equ	0xFEA
 22630                           fsr0l	equ	0xFE9
 22631                           wreg	equ	0xFE8
 22632                           indf1	equ	0xFE7
 22633                           postinc1	equ	0xFE6
 22634                           postdec1	equ	0xFE5
 22635                           plusw1	equ	0xFE3
 22636                           fsr1h	equ	0xFE2
 22637                           fsr1l	equ	0xFE1
 22638                           indf2	equ	0xFDF
 22639                           postinc2	equ	0xFDE
 22640                           postdec2	equ	0xFDD
 22641                           plusw2	equ	0xFDB
 22642                           fsr2h	equ	0xFDA
 22643                           fsr2l	equ	0xFD9
 22644                           status	equ	0xFD8
 22645                           
 22646                           	psect	temp
 22647  00003F                     btemp:
 22648                           	opt stack 0
 22649  00003F                     	ds	1
 22650  0000                     int$flags	set	btemp
 22651  0000                     wtemp6	set	btemp+1
 22652                           tosu	equ	0xFFF
 22653                           tosh	equ	0xFFE
 22654                           tosl	equ	0xFFD
 22655                           pclatu	equ	0xFFB
 22656                           pclath	equ	0xFFA
 22657                           pcl	equ	0xFF9
 22658                           tblptru	equ	0xFF8
 22659                           tblptrh	equ	0xFF7
 22660                           tblptrl	equ	0xFF6
 22661                           tablat	equ	0xFF5
 22662                           prodh	equ	0xFF4
 22663                           prodl	equ	0xFF3
 22664                           intcon	equ	0xFF2
 22665                           intcon2	equ	0xFF1
 22666                           intcon3	equ	0xFF0
 22667                           indf0	equ	0xFEF
 22668                           postinc0	equ	0xFEE
 22669                           fsr0h	equ	0xFEA
 22670                           fsr0l	equ	0xFE9
 22671                           wreg	equ	0xFE8
 22672                           indf1	equ	0xFE7
 22673                           postinc1	equ	0xFE6
 22674                           postdec1	equ	0xFE5
 22675                           plusw1	equ	0xFE3
 22676                           fsr1h	equ	0xFE2
 22677                           fsr1l	equ	0xFE1
 22678                           indf2	equ	0xFDF
 22679                           postinc2	equ	0xFDE
 22680                           postdec2	equ	0xFDD
 22681                           plusw2	equ	0xFDB
 22682                           fsr2h	equ	0xFDA
 22683                           fsr2l	equ	0xFD9
 22684                           status	equ	0xFD8


Data Sizes:
    Strings     180
    Constant    34
    Data        30
    BSS         959
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     34      62
    BANK0           160    149     160
    BANK1           256     48     256
    BANK2           256      2     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3375	PTR FTN()void  size(2) Largest target is 1
		 -> verifica_fence_externo(), incrementa_metros(), verifica_dados_operacionais(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), 
		 -> rawTime(BANK1[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), 
		 -> rawTime(BANK1[11]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[6]), STR_1(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK1[6]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), STR_16(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_9(CODE[21]), 

    fprintf@arp	PTR void [1] size(2) Largest target is 2
		 -> ?_fprintf(BANK1[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 44
		 -> fprintf@s(BANK1[16]), string_dado(BANK1[44]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fgets@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fgets@buff	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), 

    fgets@p	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_read@br	PTR unsigned int  size(2) Largest target is 2
		 -> fgets@rc(BANK0[2]), 

    f_read@buff	PTR void  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), 

    f_read@rbuff	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_10(CODE[13]), filename(BANK1[15]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_10(CODE[13]), filename(BANK1[15]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_open@dir(BANK1[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    trace_path@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK1[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_10(CODE[13]), filename(BANK1[15]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    S1796_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 198
		 -> escreve_inteiro_lcd@texto(BANK0[7]), STR_14(CODE[11]), STR_13(CODE[10]), STR_12(CODE[16]), 
		 -> STR_11(CODE[11]), string_dado(BANK1[44]), STR_8(CODE[9]), STR_7(CODE[10]), 
		 -> STR_6(CODE[10]), STR_5(CODE[14]), STR_4(CODE[21]), STR_3(CODE[15]), 
		 -> poligono_ext(BANK2[198]), mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 20
		 -> NULL(NULL[0]), dado_arquivo(BANK1[20]), 

    S538_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S538_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK1[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 13
		 -> rawAltitude(BANK1[7]), rawSatellites(COMRAM[3]), rawDate(BANK1[7]), rawCourse(BANK1[6]), 
		 -> rawSpeed(BANK1[6]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 
		 -> sentence(BANK1[6]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), 

    verifica_fence_externo@point_buff	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), 

    p_tarefas	PTR FTN()void [3] size(2) Largest target is 1
		 -> verifica_fence_externo(), incrementa_metros(), verifica_dados_operacionais(), 


Critical Paths under _main in COMRAM

    _init_lcd->_delay
    _escreve_cmd_lcd->_delay
    _config_timer_zero->_write_timer_zero
    _verifica_fence_externo->_strlen
    _leitura_sdcard->_f_mount
    _f_read->_clust2sect
    _escrita_sdcard->_f_mount
    _inicializa_uart->_configura_baudrate_uart
    _fprintf->___wmul
    _f_write->_clust2sect
    _f_open->_memset
    _trace_path->_clust2sect
    _make_dirfile->_memset
    _reserve_direntry->_clust2sect
    _reserve_direntry->_memset
    _next_dir_entry->_clust2sect
    _auto_mount->_memset
    _sdc_disk_initialize->_dummy_clocks
    _endereco_cursor_lcd->_delay
    _put_cluster->___wmul
    _get_cluster->___wmul
    _disk_status->_sdc_disk_status
    _sync->_disk_ioctl
    _sdc_disk_write->_dummy_clocks
    _sdc_disk_write->_escreve_SPI
    _sdc_disk_read->_dummy_clocks
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_escreve_SPI
    _utoa->___lwmod
    _escreve_caractere_lcd->_delay
    _monta_sd->_strlen

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _verifica_fence_externo->_leitura_sdcard
    _leitura_sdcard->_fgets
    _fgets->_f_read
    _f_read->_get_cluster
    _escrita_sdcard->_fprintf
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _fprintf->_fputs
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_trace_path
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _clust2sect->___lmul
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _validate->_disk_status
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _command->_wait_ready
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_escalonador
    _leitura_sdcard->_f_open
    _escrita_sdcard->_fprintf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_escalonador

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  708235
                    _dados_gps_to_sd
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    4483
                                              4 BANK0     36    36      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                              1 BANK0      1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                              0 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     247
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     247
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     247
                                             32 COMRAM     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  700374
                                             47 BANK1      1     1      0
                                              0 BANK2      2     2      0
                  _incrementa_metros *
        _verifica_dados_operacionais *
             _verifica_fence_externo *
 ---------------------------------------------------------------------------------
 (2) _verifica_fence_externo                              18    18      0  280599
                                            137 BANK0      8     8      0
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                     _leitura_sdcard
                 _posicao_cursor_lcd
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _leitura_sdcard                                       7     5      2  269836
                                            133 BANK0      4     2      2
                        _desliga_SPI
                       _desliga_uart
                            _f_close
                            _f_mount
                             _f_open
                              _fgets
                     _inicializa_SPI
                    _inicializa_uart
 ---------------------------------------------------------------------------------
 (4) _fgets                                               17    11      6   42224
                                            116 BANK0     17    11      6
                             _f_read
 ---------------------------------------------------------------------------------
 (5) _f_read                                              33    25      8   41616
                                             83 BANK0     33    25      8
                         _clust2sect
                          _disk_read
                        _get_cluster
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (2) _verifica_dados_operacionais                          0     0      0  419552
                     _escrita_sdcard
 ---------------------------------------------------------------------------------
 (3) _escrita_sdcard                                       2     2      0  419552
                        _desliga_SPI
                       _desliga_uart
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                     _inicializa_SPI
                    _inicializa_uart
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             32 COMRAM     2     2      0
                                             14 BANK0     12     8      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _fprintf                                             49    37     12  127472
                                            147 BANK0      2     2      0
                                              0 BANK1     47    35     12
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (5) _fputs                                                7     3      4   61571
                                            140 BANK0      7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                7     3      4   61078
                                            133 BANK0      7     3      4
                            _f_write
 ---------------------------------------------------------------------------------
 (7) _f_write                                             33    25      8   60266
                                            100 BANK0     33    25      8
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     412
                                             32 COMRAM     1     1      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) _f_open                                              44    39      5  195706
                                            119 BANK0      9     4      5
                                              0 BANK1     35    35      0
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (5) _trace_path                                          23    15      8   39138
                                             96 BANK0     23    15      8
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _make_dirfile                                        13     9      4    2753
                                              6 BANK0     13     9      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _reserve_direntry                                    18    14      4   76291
                                            100 BANK0     18    14      4
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _next_dir_entry                                      13    11      2   18463
                                             83 BANK0     13    11      2
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (6) _clust2sect                                          11     7      4    1487
                                             32 COMRAM     2     2      0
                                             12 BANK0      9     5      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _remove_chain                                         8     6      2   32953
                                             86 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (6) _memcpy                                              11     5      6    1018
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (5) _auto_mount                                          40    37      3   27803
                                             51 BANK0     40    37      3
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (7) _memset                                               8     2      6    1217
                                             32 COMRAM     2     2      0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (6) _disk_initialize                                      4     4      0   16076
                                             32 BANK0      2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (7) _sdc_disk_initialize                                 13    13      0   15946
                                             19 BANK0     13    13      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (8) _sdc_reset                                           20    20      0    7539
                                             12 BANK0      7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    2127
                                              1 BANK0      3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                              0 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (6) _check_fs                                             8     4      4    6655
                                             43 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (6) _memcmp                                               9     3      6     701
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     516
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) _f_mount                                              3     1      2     394
                                             32 COMRAM     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _f_lseek                                             29    23      6   54330
                                            100 BANK0     29    23      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (6) _create_chain                                        14    12      2   34016
                                             86 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (7) _put_cluster                                         22    18      4   16433
                                             64 BANK0     22    18      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (6) _get_cluster                                         19    17      2   16142
                                             64 BANK0     19    17      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1102
                                             32 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     901
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _f_close                                              3     1      2   30391
                                             75 BANK0      3     1      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (5) _f_sync                                               9     7      2   30018
                                             66 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (6) _validate                                             6     2      4    1250
                                              5 BANK0      6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (7) _disk_status                                          5     5      0     226
                                              0 BANK0      5     5      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (8) _sdc_disk_status                                      4     4      0      34
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _sync                                                 2     2      0   14169
                                             64 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (6) _move_window                                         21    17      4   13831
                                             43 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (7) _disk_write                                          12     5      7    6078
                                             31 BANK0     12     5      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (8) _sdc_disk_write                                      19    12      7    4614
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (7) _disk_read                                           12     5      7    5647
                                             31 BANK0     12     5      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (8) _sdc_disk_read                                       24    17      7    4450
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (9) _response                                             1     1      0      34
                                             32 COMRAM     1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (9) _proceed                                              0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (9) _command                                              7     2      5    3403
                                              5 BANK0      7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (10) _wait_ready                                         15    15      0      99
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (10) _escreve_SPI                                         2     2      0      34
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _dummy_clocks                                         5     5      0      68
                                             32 COMRAM     2     2      0
                                              0 BANK0      3     3      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (10) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _disk_ioctl                                           7     4      3     304
                                             32 COMRAM     2     2      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _get_fattime                                         51    47      4     201
                                              0 BANK0     51    47      4
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                  9     7      2    6215
                                             24 BANK0      9     7      2
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 8     2      6    3936
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     3      6    3163
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4    1132
                                             32 COMRAM     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4    1321
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    1799
                                              1 BANK0      2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                              0 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _incrementa_metros                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dados_gps_to_sd                                      0     0      0    1400
                           _monta_sd
 ---------------------------------------------------------------------------------
 (2) _monta_sd                                             5     3      2    1400
                                              4 BANK0      5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     310
                                             32 COMRAM     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                21    21      0    2930
                                             11 COMRAM    21    21      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (17) i2_write_timer_zero                                  4     2      2     131
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (17) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _GPSRead                                             2     2      0    2669
                                              9 COMRAM     2     2      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (18) _stringcpy                                           9     3      6    2207
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (18) _strcmp                                              6     2      4     395
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dados_gps_to_sd
     _monta_sd
       _strlen
   _escalonador
     _incrementa_metros *
     _verifica_dados_operacionais *
       _escrita_sdcard
         _desliga_SPI
         _desliga_uart
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _escreve_inteiro_lcd
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
         _f_close
           _f_sync
             _get_fattime
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _sync
               _disk_ioctl
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _f_lseek
           ___lldiv
           _create_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _validate
             _disk_status
               _sdc_disk_status
         _f_mount
         _f_open
           _auto_mount
             ___lldiv
             ___lmul
             _check_fs
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcmp
             _disk_initialize
               _sdc_disk_initialize
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
                 _sdc_reset
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _disk_status
               _sdc_disk_status
             _memset
           _get_fattime
           _memcpy
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _remove_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _reserve_direntry
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
           _trace_path
             _clust2sect
               ___lmul
             _make_dirfile
               _memset
             _memcmp
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
         _fprintf
           ___lldiv
           ___llmod
           ___wmul
           _fputc
             _f_write
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcpy
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
           _fputs
             _fputc
               _f_write
                 _clust2sect
                   ___lmul
                 _create_chain
                   _get_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                   _put_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcpy
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                 _validate
                   _disk_status
                     _sdc_disk_status
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
         _posicao_cursor_lcd
           _endereco_cursor_lcd
             _delay
     _verifica_fence_externo *
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _leitura_sdcard
         _desliga_SPI
         _desliga_uart
         _f_close
           _f_sync
             _get_fattime
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _sync
               _disk_ioctl
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _f_mount
         _f_open
           _auto_mount
             ___lldiv
             ___lmul
             _check_fs
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcmp
             _disk_initialize
               _sdc_disk_initialize
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
                 _sdc_reset
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _disk_status
               _sdc_disk_status
             _memset
           _get_fattime
           _memcpy
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _remove_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _reserve_direntry
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
           _trace_path
             _clust2sect
               ___lmul
             _make_dirfile
               _memset
             _memcmp
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
         _fgets
           _f_read
             _clust2sect
               ___lmul
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _memcpy
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _strlen
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      2      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     30     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     95      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     22      3E       1       66.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2A6      20        0.0%
DATA                 0      0     4C6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Apr 08 20:54:51 2022

                   next_dir_entry@idx 00BE              __end_of_mensagem_inicial 4DB8  
                 next_dir_entry@clust 00BC                           _SSPSTATbits 000FC7  
                    ??_init_interrupt 0021                                    l99 47EA  
        __size_of_escreve_inteiro_lcd 0040                                    _fs 02C8  
                 ___wmul@multiplicand 0062                           _put_cluster 2F94  
                    disk_write@sector 0081                          ?_escalonador 0001  
                      create_chain@fs 00BC                      disk_write@result 0088  
                    ?_inicializa_uart 0001                                   l101 487C  
                                 l121 461A                                   l123 4678  
                                 l107 57AE                                   l124 4688  
                                 l108 57BE                                   l301 444C  
                                 l311 3FFC                                   l320 3F6A  
                                 l312 3F04                                   l321 3F76  
                                 l313 3F10                                   l323 3F9A  
                                 l403 5534                                   l411 5742  
                                 l307 4EAA                                   l324 3FA6  
                                 l316 3F34                                   l420 4B94  
                                 l404 550C                                   l412 5726  
                                 l317 3F40                                   l501 3D2C  
                                 l326 3FCA                                   l270 564C  
                                 l502 3D24                                   l422 4BC6  
                                 l430 4CE2                                   l406 551C  
                                 l414 5732                                   l327 3FF2  
                                 l271 563E                                   l423 4C00  
                                 l431 4D14                                   l407 5530  
                                 l415 573E                                   l328 3FD0  
                                 l360 59E6                                   l504 3D58  
                                 l520 356A                                   l512 3520  
                                 l600 4F56                                   l505 3D40  
                                 l513 346C                                   l601 4FB6  
                                 l610 4FD6                                   l522 359E  
                                 l602 4F62                                   l611 4FD8  
                                 l435 5856                                   l507 3D92  
                                 l419 4C04                                   l515 34C0  
                                 l427 4D18                                   l603 4F72  
                                 l443 489A                                   l620 5016  
                                 l612 4FE0                                   l436 584A  
                                 l524 35E6                                   l428 4CB0  
                                 l604 4F82                                   l444 48B8  
                                 l460 267E                                   l621 5018  
                                 l613 4FE2                                   l517 34F0  
                                 l605 4F92                                   l461 2524  
                                 l453 24CE                                   l622 5020  
                                 l614 4FEA                                   l438 584E  
                                 l366 5984                                   l462 252E  
                                 l454 24E4                                   l551 58AC  
                                 l623 5022                                   l615 4FEC  
                                 l439 5852                                   l279 576E  
                                 l287 5128                                   l463 2558  
                                 l624 502A                                   l616 4FF4  
                                 l288 5122                                   l448 491A  
                                 l480 26D8                                   l456 24F0  
                                 l560 4A7C                                   l625 502C  
                                 l617 4FF6                                   l529 5950  
                                 l561 4A84                                   l618 500C  
                                 l490 27A8                                   l570 4ABC  
                                 l562 4A86                                   l619 500E  
                                 l643 535E                                   l571 4AC4  
                                 l563 4A8E                                   l644 5334  
                                 l900 520E                                   l476 266E  
                                 l468 25E2                                   l572 4AC6  
                                 l564 4A90                                   l549 589E  
                                 l581 5050                                   l485 273C  
                                 l573 4ACE                                   l565 4A98  
                                 l902 522C                                   l590 5088  
                                 l582 5052                                   l486 2766  
                                 l814 4136                                   l574 4AD0  
                                 l566 4A9A                                   l495 3CEA  
                                 l591 5090                                   l583 505A  
                                 l479 26AE                                   l567 4AB0  
                                 l559 4A7A                                   l496 3CD6  
                                 l912 337C                                   l920 31DE  
                                 l592 5092                                   l584 505C  
                                 l568 4AB2                                   l921 2FBC  
                                 l593 509A                                   l585 5064  
                                 l569 4ABA                                   l906 340A  
                                 l930 313E                                   l922 301C  
                                 l594 509C                                   l586 5066  
                                 l499 3D10                                   l907 325A  
                                 l587 507C                                   l916 339C  
                                 l588 507E                                   l940 4740  
                                 l909 3424                                   l933 31FA  
                                 l925 3056                                   l589 5086  
                                 l941 4762                                   l934 3168  
                                 l950 3656                                   l598 4FBC  
                                 l935 319C                                   l927 308A  
                                 l599 4F9A                                   l943 4780  
                                 l936 31DA                                   l928 30E6  
                                 l960 36D6                                   l944 47AA  
                                 l962 371E                                   l954 36A0  
                                 l970 457A                                   l891 383C  
                                 l963 3706                                   l955 3682  
                                 l939 47B2                                   l980 3AA2  
                                 l965 3742                                   l957 3698  
                                 l894 38C2                                   l966 3772  
                                 l958 36A8                                   l967 37B0  
                                 l975 39F8                                   l896 396C  
                                 l897 394E                                   l979 3AE0  
                                 _PCL 000FF9                                   _PR2 000FCB  
                                 _fil 0132                      ??_init_oscilador 0021  
                                 _isr 0008                          disk_read@res 008A  
                                 prod 000FF3                        ??_create_chain 00B8  
                                 tosl 000FFD                                   wreg 000FE8  
           __size_of_write_timer_zero 0012                       create_chain@mcl 00BA  
                     create_chain@ncl 00C2                       create_chain@scl 00C0  
             ??_escreve_frase_ram_lcd 0023                                  l1002 3B28  
                                l1003 3B98                                  l1100 0EA4  
                                l1102 0EFC                                  l1030 3BE6  
                                l1111 1000                                  l1103 0F22  
                                l1007 3C62                                  l1031 3BEE  
                                l1112 1022                                  l1121 54A8  
                                l1130 544E                                  l1106 0F52  
                                l1034 3C08                                  l1131 546E  
                                l1115 106A                                  l1107 0F4E  
                                l1043 3C3E                                  l1027 3BD6  
                                l1019 3BC6                                  l1116 11A6  
                                l1108 0F80                                  l1060 298E  
                                l1052 28B6                                  l1140 21DC  
                                l1204 0E7E                                  l1212 0D58  
                                l1300 1D88                                  l1125 54BA  
                                l1117 1298                                  l1109 0F8C  
                                l1045 3C40                                  l1037 3C20  
                                l1029 3BDE                                  l1061 29BC  
                                l1141 2164                                  l1213 0E6C  
                                l1205 0C18                                  l1118 12AE  
                                l1054 28E2                                  l1142 2188  
                                l1206 0BC0                                  l1302 20CC  
                                l1310 1E5E                                  l1231 1ADC  
                                l1039 3C22                                  l1055 2948  
                                l1311 1EA8                                  l1232 1B3E  
                                l1128 5436                                  l1072 2AD8  
                                l1064 29B0                                  l1144 21E6  
                                l1208 0DD6                                  l1320 1F1C  
                                l1304 1DFE                                  l1217 4274  
                                l1233 1B2A                                  l1081 2BF6  
                                l1073 2B00                                  l1057 293C  
                                l1049 2892                                  l1145 220E  
                                l1137 2118                                  l1209 0C88  
                                l1313 1EB8                                  l1305 1DB2  
                                l1218 41BC                                  l1242 1B9C  
                                l1074 2B14                                  l1154 2348  
                                l1330 2028                                  l1314 1EC4  
                                l1235 1D08                                  l1075 2B40  
                                l1067 29D6                                  l1155 2364  
                                l1139 233C                                  l1331 2082  
                                l1315 1ED0                                  l1171 1552  
                                l1084 2C1C                                  l1068 29EA  
                                l1148 22DC                                  l1332 2056  
                                l1324 1F60                                  l1237 1C0E  
                                l1229 1920                                  l1093 4C58  
                                l1077 2BAC                                  l1149 22AC  
                                l1325 1F78                                  l1317 1EF6  
                                l1309 1E26                                  l1181 1836  
                                l1173 1568                                  l1246 1CA2  
                                l1238 1B48                                  l1158 2380  
                                l1334 2064                                  l1326 1FAC  
                                l1166 1872                                  l1239 1B88  
                                l1095 4C78                                  l1087 2CCA  
                                l1183 17D6                                  l1167 14BC  
                                l1271 4B0E                                  l1096 4CA6  
                                l1088 2C8A                                  l1192 0E10  
                                l1440 44F0                                  l1168 1714  
                                l1089 2CBA                                  l1193 099A  
                                l1441 44FE                                  l1433 4476  
                                l1177 187C                                  l1169 15BE  
                                l1194 0C96                                  l1282 529C  
                                l1290 51BE                                  l1442 4514  
                                l1434 448E                                  l1178 1706  
                                l1274 4B54                                  l1099 0EAA  
                                l1195 0AD0                                  l1291 5186  
                                l1179 16AE                                  l1196 0A56  
                                l1292 51B6                                  l1436 44BC  
                                l1285 52D4                                  l1437 44B0  
                                l1198 0A76                                  l1800 5328  
                                l1712 4694                                  l1385 5242  
                                l1297 1D3E                                  l1810 5614  
                                l1714 46D0                                  l1386 5256  
                                l1715 4712                                  l1708 55BC  
                                l1820 4926                                  l1805 55F2  
                                l1821 49A4                                  l1806 55EA  
                                l1742 4EF0                                  l1743 4EE4  
                                l1832 57DE                                  l1752 50CA  
                                l1809 560A                                  l1833 57CE  
                                l1753 50BE                                  l1746 4F24  
                                l1826 54F2                                  l1747 4F32  
                                l1819 49AC                                  l1827 54D0  
                                l1756 50F2                                  l1757 5100  
                                l1795 52FE                                  l1796 52F6  
                                l1966 56F2                                  l1967 56EC  
                                l1799 531E                                  l9132 48DA  
                                ?_isr 0001                                  l9240 54A4  
                                l9170 36A8                                  l9314 257A  
                                l9166 3682                                  l9344 2612  
                                l9256 54D0                                  l9450 4926  
                                l9442 57CE                                  l8662 34E4  
                                l8902 38BA                                  l8694 3592  
                                l8792 58A4                                  l8786 5896  
               _escreve_caractere_lcd 4FC2                                  STR_1 08CA  
                                STR_2 08C4                                  STR_3 085D  
                                STR_4 0838                                  STR_5 086C  
                                STR_6 08B1                                  STR_7 08A7  
                                STR_8 08BB                                  STR_9 0823  
                      timer_dois@flag 0032                                  _BRGH 007D62  
                     __end_of_GPSRead 2F94                                  _T0IF 007F92  
                                _CREN 007D5C                          ?_escreve_SPI 0001  
                                _LATB 000F8A                                  _PIE1 000F9D  
                                _RCIF 007CF5                                  i2l91 3E8C  
                                i2l92 3EA0                                  i2l85 3E24  
                                i2l86 3E98                                  i2l87 3E3E  
                                i2l89 3E6C                                  _TMR2 000FCC  
                                _SPEN 007D5F                                  _TRMT 007D61  
                                _TXEN 007D65                                  _SYNC 007D64  
                        trace_path@dj 00C0                          trace_path@fn 00C2  
                        trace_path@ds 00D4                          trace_path@fs 00D0  
                       ?_make_dirfile 0066                                  _Term 0035  
                                _dado 0031                                  _main 5796  
                                _fsid 00FB                                  _itoa 5596  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                indf0 000FEF                                  fsr2h 000FDA  
                                fsr0l 000FE9                                  indf1 000FE7  
                                indf2 000FDF                                  fsr1l 000FE1  
                                fsr2l 000FD9                                  btemp 003F  
                                _utoa 468C                                  _sync 51D6  
                       disk_ioctl@cmd 0060                         disk_read@buff 007F  
                       disk_ioctl@res 0022                         disk_read@pdrv 0087  
                                prodh 000FF4                                  prodl 000FF3  
                                start 000E               ?_verifica_fence_externo 0001  
           sdc_disk_initialize@buff_i 007B                          ___param_bank 000000  
           sdc_disk_initialize@count1 0077             sdc_disk_initialize@count2 007D  
                         _string_dado 0106                                 ??_isr 000C  
             __size_of_escrita_sdcard 00D8      __size_of_configura_baudrate_uart 0130  
                               l11020 3F08                                 l10232 101E  
                               l11112 47E2                                 l11050 3F6E  
                               l11034 3F38                                 l10402 51B6  
                               l11064 3F9E                                 l10716 1DEC  
                               l10684 1D3E                                 l10776 1F36  
                               l10984 4612                       __end_of___aldiv 4526  
                               ?_main 0001                                 ?_itoa 0070  
                               STR_10 087A                                 STR_11 0892  
                               STR_12 084D                                 STR_13 089D  
                               STR_14 0887                                 STR_15 08D4  
                               STR_16 08D0                          ?_leitura_SPI 0001  
                     __end_of___lldiv 4F44                                 u10100 5132  
                               ?_utoa 0067                                 u11010 54A4  
                               u10115 3C84                                 ?_sync 0001  
                               u11100 257A                                 u10205 3492  
                               u10310 58B2                                 u10230 350A  
                               u10080 5792                                 u11210 2702  
                               u11300 497C                                 u12020 4C74  
                               u11140 2612                                 u11060 2500  
                               u10245 353C                                 u10270 35B8  
                               u11070 2510                                 u10280 35F4  
                               u12200 4EF4                                 u11160 261E  
                               _T0CON 000FD5                                 u11081 251A  
                               u10610 3224                                 u11250 277E  
                               u12130 44C0                                 u11307 4972  
                               u10540 3912                                 u11260 27B6  
                               u12045 4292                                 u12310 4798  
                               u12055 42AE                                 u11280 4954  
                               u12320 47C0                                 u11520 0E18  
                               u12065 42DE                                 u10705 2FEC  
                     __end_of___llmod 5112                                 u14010 3F64  
                               u10490 37FA                                 u10810 48DA  
                               u12330 47D8                                 u13210 22A8  
                               u13050 50CE                                 u12075 42F8  
                               u10635 328A                                 u11435 0B1E  
                               u12235 4030                                 u10580 5354  
                               u12340 2878                                 u12245 407C  
                               u10590 537E                                 u11550 5302  
                               u11710 3B72                                 u13071 56AC  
                               u10655 32FE                                 u10735 30B6  
                               u11287 494A                                 u12600 0ECA  
                               u12520 2B98                                 u14120 4D40  
                               _T2CON 000FCA                                 u12505 2B60  
                               u12265 40BE                                 u10850 3640  
                               u13250 2360                                 u14130 4D58  
                               u10587 534A                                 u12347 286E  
                               u11475 0C04                                 u12275 410A  
                               u11580 55F6                                 u10860 364C  
                               u13420 1BAA                                 u12620 0EF0  
                               u13180 220A                                 u14108 483A  
                               u10597 5374                                 u10685 3388  
                               u10765 314A                                 u14109 484E  
                               u11670 3A7A                                 u12550 2BF2  
                               u13510 1D86                                 u12607 0EC0  
                               u11655 3A04                                 u13440 1C22  
                               u12800 12AA                                 u11680 3A9E  
                               u13345 1994                                 u12385 2902  
                               u10970 379E                                 u13450 1C68  
                               u12570 2C18                                 u11690 3B60  
                               u12627 0EE6                                 u13540 1E0A  
                               u12750 101E                                 u13455 1C5E  
                               u12815 1332                                 u11697 3B56  
                               u12915 160C                                 u13740 20A4  
                               u13580 1E9E                                 u14517 4DA2  
                               u12790 1294                                 u13751 20DC  
                               u14527 49EC                                 u13920 4AF4  
                               u12785 11BE                                 u14537 4A08  
                               u13690 2008                                 u12890 1576  
                               u12955 16F2                                 u14547 4A24  
                               u13780 4B80                                 u14557 249A  
                               u14567 262E                                 u14577 26E0  
                               u14587 5628                       __end_of___lwdiv 5332  
                               i2l200 2EB2                                 i2l201 2EDC  
                     __end_of___lwmod 561E                                 i2l202 2F06  
                               i2l203 2F32                                 i2l204 2F5E  
                               i2l205 2F66                                 i2l172 53DC  
                               i2l180 2D26                                 i2l190 2DCC  
                               i2l191 2DF4                                 i2l192 2E1E  
                               i2l184 2D48                                 i2l177 2F7E  
                               i2l185 2D52                                 i2l194 2E3A  
                               i2l178 2D08                                 i2l195 2E3E  
                               i2l187 2DA8                                 i2l179 2D16  
                               i2l196 2E68                                 i2l189 2DC8  
                               i2l198 2E84                                 i2l199 2E88  
                               i2l840 59AA                                 _RCREG 000FAE  
                               _RCSTA 000FAB                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISA 000F92                                 _TRISB 000F93  
                               _TRISC 000F94                                 _TRISD 000F95  
                               _TRISE 000F96                       __end_of_f_close 581E  
                               _TXREG 000FAD                         trace_path@dir 00C6  
                               _TXSTA 000FAC                                 _FatFs 00FD  
                     __end_of_f_lseek 1D1A                   ___lmul@multiplicand 0064  
          __size_of_config_timer_dois 000E                       __end_of_f_mount 5472  
                     __end_of_f_write 0E92            __size_of_config_timer_zero 001A  
                       get_cluster@bc 00AF                         get_cluster@fs 00B1  
                       get_cluster@wc 00A9                       __end_of_command 517A  
                               _delay 5892                       clust2sect@clust 006C  
                               _fgets 4AFA                       __end_of_fprintf 20DE  
                               _fputc 5288                                 _fputs 517A  
            __size_of_escreve_cmd_lcd 0094                        ??_make_dirfile 006A  
                      disk_ioctl@buff 0061                                 pclath 000FFA  
                      disk_read@count 0085                                 tablat 000FF5  
                      disk_ioctl@pdrv 0021                      ?_dados_gps_to_sd 0001  
                     __end_of_proceed 59E2                                 plusw1 000FE3  
                               plusw2 000FDB                                 utoa@c 006F  
                               utoa@v 006D                                 status 000FD8  
                               wtemp6 0040                         disk_write@res 008A  
      __end_of_verifica_fence_externo 468C                       __initialization 4DB8  
                 disk_initialize@pdrv 0080                   disk_initialize@stat 0081  
                        __end_of_main 57C4                          clust2sect@fs 0021  
                        __end_of_itoa 55DA                          __end_of_utoa 4736  
                        __end_of_sync 5230                    _inicializa_tarefas 5386  
                     escalonador@cont 01E2                   reserve_direntry@dir 00C6  
                   create_chain@clust 00B6                           auto_mount@p 00B1  
                   create_chain@cstat 00BE                         sdc_reset@buff 0072  
                              ??_main 0023                                ??_itoa 0022  
                              ??_utoa 0022                                ??_sync 0023  
                       __activetblptr 000002                   ?_inicializa_tarefas 0001  
                __end_of_desliga_uart 59CA                             ??_GPSRead 000A  
                      _next_dir_entry 3970                  __size_of_desliga_SPI 000C  
                   get_fattime@f_time 008A                      ??_sdc_disk_write 0073  
                              ?_delay 0001                                ?_fgets 00D4  
              ?_escreve_caractere_lcd 0001                                _ADCON1 000FC1  
                              ?_fputc 00E5                      ___llmod@dividend 0060  
                              ?_fputs 00EC                    auto_mount@bootsect 00A9  
                              _INT0IE 007F94                                _INT0IF 007F91  
                       ?_dummy_clocks 0001                                _PCLATH 000FFA  
                              i2l1958 5558                                i2l1959 5550  
                              _INTCON 000FF2               __size_of_inicializa_SPI 0020  
                              _TMR0IF 007F92                                _TMR2IF 007CF1  
                  auto_mount@maxclust 00A5              __end_of_recebe_dado_uart 59AE  
                              _SPPCFG 000F63                                _SPPCON 000F65  
                              _SSPBUF 000FC9              __size_of_sdc_disk_status 0014  
                    __end_of_check_fs 4CAA                  ??_inicializa_tarefas 0021  
                      trace_path@dptr 00D5                        trace_path@path 00C4  
              reserve_direntry@sector 00CA              __size_of_disk_initialize 003C  
          __end_of_posicao_cursor_lcd 4FC2                        auto_mount@path 0093  
                        ?_move_window 008B                  __end_of_create_chain 37BA  
                        _dado_arquivo 014E                __size_of_init_hardware 0016  
                      auto_mount@stat 00B4                  __size_of_get_fattime 0108  
                        put_cluster@p 00B2          ?_verifica_dados_operacionais 0001  
                __size_of_get_cluster 0222                                ___lmul 5230  
                           ??___aldiv 0021                  __size_of_disk_status 0048  
                              ___wmul 581E                                _f_read 13C4  
                           ??___lldiv 0021                                _f_open 20DE  
                           ??___llmod 0021                             ??___lwdiv 0021  
                              _f_sync 414E                             ??___lwmod 0021  
                              _buffer 017C                                _estado 0033  
                              _memcmp 4924                                _memcpy 54BE  
                    __end_of_init_lcd 4A66                                _memset 57C4  
                           ??_f_close 0023                                clear_0 4DF2  
                              clear_1 4E04                                clear_2 4E10  
                              clear_3 4E1C                                clear_4 4E28  
                              _metros 0038                             ??_f_lseek 00CA  
                           ??_f_mount 0023                                fgets@i 00DF  
                              fgets@p 00E3              configura_baudrate_uart@x 0021  
                           ??_f_write 00CC                                _strcmp 554E  
                 _sdc_disk_initialize 2474                             ??_command 0023  
                         GPSRead@buff 000A                                _strlen 56E2  
                    put_cluster@clust 00A0                                fputc@c 00E9  
                  get_cluster@fatsect 00AB                      __end_of_monta_sd 401E  
                              itoa@cp 0076              __end_of_reserve_direntry 2D00  
                    __end_of_validate 54BE                __end_of_next_dir_entry 3AF8  
                           ??_fprintf 00F3                          __pdataCOMRAM 003E  
                              fputs@n 00F1                  __size_of_escalonador 00A4  
                    __end_of_response 59D6                          __mediumconst 0000  
               write_timer_zero@timer 0060                       disk_read@sector 0081  
                     disk_read@result 0088                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                           ??_proceed 0023                      _write_timer_zero 5966  
                              sync@fs 00A0             escreve_caractere_lcd@data 0060  
                      ??_dummy_clocks 0021                   _escreve_inteiro_lcd 56A2  
          verifica_fence_externo@size 00EC                       sdc_disk_write@i 0077  
                     sdc_disk_write@j 007C                            __accesstop 0060  
             __end_of__initialization 4E2E                  ?_sdc_disk_initialize 0001  
                      disk_write@buff 007F                        disk_write@pdrv 0087  
                __size_of_escreve_SPI 0012                         ___rparam_used 000001  
                   ??_escreve_cmd_lcd 0023                        __pcstackCOMRAM 0001  
         __end_of_endereco_cursor_lcd 50AA                          __pidataBANK1 58D6  
                   ?_mensagem_inicial 0001               _configura_baudrate_uart 401E  
                       __end_of_delay 58B6                        _escrita_sdcard 4380  
                       __end_of_fgets 4B8E                         __end_of_fputc 52DE  
                       __end_of_fputs 51D6                  ?_escreve_inteiro_lcd 0078  
       ??_verifica_dados_operacionais 0023                    ??_mensagem_inicial 0064  
                __end_of_make_dirfile 3C66                          ?_put_cluster 00A0  
                   reserve_direntry@c 00D1                     reserve_direntry@n 00CE  
                  _tarefa_em_execucao 0039            __end_ofi2_write_timer_zero 599C  
                     ?_next_dir_entry 00B3                __size_of_sdc_disk_read 0146  
     configura_baudrate_uart@baudrate 006E                  reserve_direntry@dptr 00CF  
                __size_of_leitura_SPI 000C                         _init_hardware 592A  
                        auto_mount@fs 00B9                    __size_of_disk_read 0090  
                             ??_delay 0021                               ??_fgets 00DA  
                      sdc_reset@count 0070                               ??_fputc 0023  
                             ??_fputs 00F0          mensagem_inicial@msg_linha_um 0066  
                          __pbssBANK0 00F5                            __pbssBANK1 0100  
                          __pbssBANK2 0200        __size_of_escreve_frase_ram_lcd 0054  
       __end_of_escreve_frase_ram_lcd 5386                 ??_sdc_disk_initialize 0073  
           escreve_inteiro_uart@F3958 01E3                __end_of_escrita_sdcard 4458  
                  __size_of_sdc_reset 00A4                               ?___lmul 0060  
                   ??_sdc_disk_status 0021                         make_dirfile@a 0070  
                       make_dirfile@b 006E                         make_dirfile@c 0072  
                       make_dirfile@n 0071                         make_dirfile@t 006F  
                             ?___wmul 0060                 mensagem_inicial@F4345 0812  
               mensagem_inicial@F4347 0801                               ?_f_read 00B3  
               ??_escreve_inteiro_lcd 0023                               ?_f_open 00D7  
                             ?_f_sync 00A2                     ??_disk_initialize 0023  
               __size_of_desliga_uart 000E                               ?_memcmp 0060  
                             ?_memcpy 0060                               ?_memset 0060  
                      ___lmul@product 0068                               ?_strcmp 0001  
                             ?_strlen 0021                               i2l11234 3E36  
                             _INTCON2 000FF1                               _INTCON3 000FF0  
                      ?_init_hardware 0001                             ?_check_fs 008B  
                          _disk_ioctl 5846                               _GPSRead 2D00  
                          _disk_write 4CAA                        remove_chain@fs 00BC  
__size_of_verifica_dados_operacionais 000A                               _SSPCON1 000FC6  
            __size_of_inicializa_uart 0024                               _SSPSTAT 000FC7  
                          _clust2sect 4526                        _inicializa_SPI 58B6  
                     trace_path@clust 00D2                         ?_remove_chain 00B6  
               __size_of_create_chain 01C0                             ?_init_lcd 0001  
 verifica_fence_externo@caractere_gps 00EB                    __size_of_stringcpy 004E  
                       _sdc_disk_read 3C66                          _desliga_uart 59BC  
                          _auto_mount 0E92                               __Hparam 0000  
           ??_configura_baudrate_uart 0072      verifica_fence_externo@point_buff 00EE  
                             __Lparam 0000                             ?_monta_sd 0064  
                           ?_validate 0065                       ?_escrita_sdcard 0001  
                   __end_of_disk_read 4C1E                         put_cluster@bc 00B0  
                           ?_response 0001                         put_cluster@fs 00B4  
                             ___aldiv 4458                            f_close@res 00AD  
                     __size_of___lmul 0058               __size_of_leitura_sdcard 0084  
                             ___lldiv 4EC0                       __size_of___wmul 0028  
                             ___llmod 50AA                  __size_of_move_window 01B6  
                          check_fs@fs 0091                               ___lwdiv 52DE  
                     __size_of_f_read 04CC                               ___lwmod 55DA  
                     __size_of_f_open 0396                          __psmallconst 0800  
                     __size_of_f_sync 012A                  __end_of_dummy_clocks 5660  
                             _f_close 57F2                               __pcinit 4DB8  
                     __size_of_memcmp 00A4                       __size_of_memcpy 0048  
                     __size_of_memset 002E                               _f_lseek 1890  
                          _init_ports 58F4                               __ramtop 0800  
                             _f_mount 5426                               __ptext0 5796  
                             __ptext1 4D32                               __ptext2 49C8  
                             __ptext3 4A66                               __ptext4 592A  
                             __ptext5 58F4                               __ptext6 5A04  
                             __ptext7 5954                               __ptext8 5910  
                             __ptext9 5966                               _f_write 08D8  
                             _command 5112                             _T0CONbits 000FD5  
                 auto_mount@totalsect 00AD                       __size_of_strcmp 0048  
                     __size_of_strlen 003E               i2write_timer_zero@timer 0003  
         endereco_cursor_lcd@endereco 0060                               _fprintf 1D1A  
                          f_read@buff 00B5                               _rawDate 019A  
                        __size_of_isr 3EE4               ??_escreve_caractere_lcd 0023  
                          f_read@sect 00C8                            f_read@rcnt 00D2  
                          ??_check_fs 008F                               _rawTime 0188  
                    ___aldiv@dividend 0060                          stringcpy@chr 0009  
                        stringcpy@dir 0005                          _create_chain 35FA  
                             fgets@rc 00E1                               _proceed 59D6  
             __size_of_init_interrupt 0012                     __end_of_sdc_reset 4924  
              __end_of_inicializa_SPI 58D6                            f_lseek@ofs 00C6  
                      __pintcode_body 3DAC                            f_lseek@res 00D6  
                end_of_initialization 4E2E                            f_open@mode 00DB  
                          f_open@path 00D9                        ??_remove_chain 00B8  
                             isr@cont 0020                               memcmp@n 0064  
                             memcpy@d 0067                               memcpy@n 0064  
                             memcpy@s 0069               __size_of_init_oscilador 0008  
                             fputc@bw 00EA                               itoa@buf 0070  
                             memset@c 0062                               itoa@val 0072  
                             memset@n 0064                               memset@p 0021  
                sdc_disk_initialize@i 0074                         __Lmediumconst 0000  
                          ??_init_lcd 0061                               int_func 3DAC  
                   ?_recebe_dado_uart 0001                       disk_status@pdrv 0063  
                     disk_status@stat 0064                        ?_sdc_disk_read 006C  
                           i2u1422_40 3E70                             i2u1416_40 3E14  
                           i2u1417_48 3E16                write_timer_zero@timer0 0021  
                     ___lldiv@divisor 0064                         _rawSatellites 003B  
                          f_mount@drv 0060                    ??_recebe_dado_uart 0001  
                    sdc_disk_read@ptr 0077                       ___lldiv@counter 006C  
                          ??_monta_sd 0023                            ??_validate 0069  
               __size_of_make_dirfile 016E              __size_of_dados_gps_to_sd 0042  
                          ??_response 0021                             _RCSTAbits 000FAB  
            __end_of_write_timer_zero 5978                      ___aldiv@quotient 006A  
                             postdec1 000FE5                               postdec2 000FDD  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE                               utoa@buf 0067  
                             utoa@val 0069                            _wait_ready 575C  
                             strcmp@r 0006                               strlen@s 0021  
                           _PORTBbits 000F81                             _PORTDbits 000F83  
                           _PORTEbits 000F84                       ??_init_hardware 0023  
         verifica_fence_externo@count 00ED                            _trace_path 27BA  
                  _posicao_cursor_lcd 4F44                     __end_of_stringcpy 5426  
         verifica_fence_externo@point 00EA                         ??_desliga_SPI 0021  
                __size_of_put_cluster 027A       __end_of_configura_baudrate_uart 414E  
                         ?_disk_ioctl 0060                     ?_reserve_direntry 00C4  
                          f_write@btw 00C8                            f_write@res 00D8  
                           _TRISBbits 000F93                           ?_disk_write 007F  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                    next_dir_entry@dj 00B3                       _escreve_cmd_lcd 4A66  
                  ??_reserve_direntry 00C8                   ?_posicao_cursor_lcd 0061  
                     ?_inicializa_SPI 0001                       disk_write@count 0085  
                         ?_clust2sect 006C                     _incrementa_metros 5A0C  
                    _put_cluster$1946 00A8                      _put_cluster$1947 00AA  
                          command@CMD 006A                            command@CRC 0069  
                          command@arg 0065                          _make_dirfile 3AF8  
                  ?_incrementa_metros 0001                         ??_get_fattime 0064  
                   ??_inicializa_uart 0023           __size_of_inicializa_tarefas 0052  
                       ??_get_cluster 00A2                         ??_disk_status 0060  
                         ?_auto_mount 0093                     _make_dirfile$2056 006C  
                 ??_incrementa_metros 0021                       command@argument 006B  
                ??_posicao_cursor_lcd 0023                        __end_of___lmul 5288  
                    ??_next_dir_entry 00B5                        __end_of___wmul 5846  
                      __end_of_f_read 1890                        __end_of_f_open 2474  
                       __pidataCOMRAM 5A0E                         ??_escalonador 02C6  
                         ?_init_ports 0001                        __end_of_f_sync 4278  
                      __end_of_memcmp 49C8                        __end_of_memcpy 5506  
                      __end_of_memset 57F2                        __end_of_strcmp 5596  
                      __end_of_strlen 5720                   start_initialization 4DB8  
           __end_of_incrementa_metros 5A0E                           __end_of_isr 3EEC  
           __size_of_mensagem_inicial 0086                    reserve_direntry@dj 00C4  
                  reserve_direntry@fs 00D4                   __end_of_desliga_SPI 59FA  
                       ??_escreve_SPI 0021              ??_verifica_fence_externo 0023  
                     _sdc_disk_status 5940                       ??_sdc_disk_read 0073  
                   auto_mount@fatsize 00B5                    i2_write_timer_zero 598A  
                     ___llmod@divisor 0064                       _disk_initialize 5720  
                     ___llmod@counter 0021                 reserve_direntry@clust 00D2  
             __size_of_sdc_disk_write 01CA                      _data_uart_recebe 003A  
                   wait_ready@timeout 0060                 __size_of_dummy_clocks 0042  
                       auto_mount@fmt 00B3                   __size_of_disk_ioctl 0028  
                 ?i2_write_timer_zero 0001                   __size_of_disk_write 0088  
                            ??___lmul 0021                        _leitura_sdcard 4E3C  
                          fprintf@fil 01B3                            fprintf@arp 01DB  
                            ??___wmul 0021                            fprintf@res 01CF  
                          fprintf@val 01D7                            fprintf@str 01B5  
                            ??_f_read 00BB                   __end_of_get_fattime 4380  
                            ??_f_open 00DC                              ??_f_sync 0023  
                         ?_wait_ready 0001                           __pdataBANK1 01E3  
                 __end_of_get_cluster 3430                              ??_memcmp 0066  
                 __end_of_disk_status 554E                              ??_memcpy 0021  
                 __size_of_clust2sect 00B6                              ??_memset 0021  
              sdc_disk_read@start_add 0078                  __end_of_remove_chain 47DC  
                   ??_dados_gps_to_sd 0023               sdc_disk_initialize@buff 007F  
                       ??_leitura_SPI 0021               __end_of_escreve_cmd_lcd 4AFA  
                            ??_strcmp 0005                              ??_strlen 0060  
             sdc_disk_initialize@stat 0076                           ?_trace_path 00C0  
        __size_of_endereco_cursor_lcd 0070                          _fprintf$2542 01D1  
                         __pbssBIGRAM 02C8                         monta_sd@index 0066  
                         __pbssCOMRAM 0023                       _trace_path$2103 00CC  
                     _trace_path$2105 00CE                              ?_GPSRead 0001  
                       __pcstackBANK0 0060                         __pcstackBANK1 01B3  
                       __pcstackBANK2 02C6                        _init_interrupt 5954  
                 __size_of_auto_mount 0532                  ??i2_write_timer_zero 0003  
                 __end_of_escalonador 4880           __end_of_sdc_disk_initialize 27BA  
                   __size_of_check_fs 008C                          check_fs@sect 008B  
                         _char_number 0037                            sdc_reset@i 006C  
                        _dummy_clocks 561E                        _init_oscilador 5A04  
                            GPSRead@c 000B                      ??_escrita_sdcard 0023  
                 __size_of_init_ports 001C                 _escreve_frase_ram_lcd 5332  
                           _data_buff 0029                             _data_hoje 0034  
         __end_of_escreve_inteiro_lcd 56E2                   __end_of_escreve_SPI 598A  
                   __size_of_init_lcd 009E                __end_of_leitura_sdcard 4EC0  
                    ___lwdiv@dividend 0060                     delay@contador_int 0022  
                   delay@contador_ext 0021   __end_of_verifica_dados_operacionais 5A04  
         _verifica_dados_operacionais 59FA                             __pintcode 0008  
                            ?___aldiv 0060                     __size_of_monta_sd 0132  
                            ?___lldiv 0060                              ?___llmod 0060  
                   __size_of_validate 004C                              ?___lwdiv 0060  
                            ?___lwmod 0060                     __size_of_response 000C  
                            ?_f_close 00AB                             _disk_read 4B8E  
                  _sinaliza_int_timer 00FF                              ?_f_lseek 00C4  
                            ?_f_mount 0021                              ?_f_write 00C4  
                            ?_command 0065                           __smallconst 0800  
              __end_of_init_interrupt 5966                              ?_fprintf 01B3  
                         _desliga_SPI 59EE                   sdc_disk_read@p_buff 006C  
                 sdc_disk_read@length 007C                   sdc_disk_read@sector 006E  
             __end_of_sdc_disk_status 5954        __size_of_escreve_caractere_lcd 0078  
          __size_of_incrementa_metros 0002         __end_of_escreve_caractere_lcd 503A  
                            ?_proceed 0001                             f_close@fp 00AB  
                 __end_of_leitura_SPI 59EE                      ___lwdiv@quotient 0065  
                      __size_of_delay 0024                        __size_of_fgets 0094  
             __end_of_disk_initialize 575C                __end_of_init_oscilador 5A0C  
                      __size_of_fputc 0056                        __size_of_fputs 005C  
                 make_dirfile@dirname 0068                            validate@id 0067  
                          validate@fs 0065                             _p_tarefas 00F5  
                        f_read@remain 00C4                             _rawCourse 01A1  
                           f_read@btr 00B7                             f_read@res 00C3  
     __size_of_verifica_fence_externo 00B0                      make_dirfile@path 0066  
                            _GPGGA_ok 002B                             _sdc_reset 4880  
                 __size_of_wait_ready 003A                       ___aldiv@divisor 0064  
                     ___aldiv@counter 0068                        ___wmul@product 0021  
                            _LATBbits 000F8A                             f_lseek@fp 00C4  
                            _LATCbits 000F8B                              _GPRMC_ok 002D  
                           f_open@dir 01C6                             f_open@res 01C5  
                            _PIE1bits 000F9D                           _get_fattime 4278  
                        _rawLongitude 0162                   __size_of_trace_path 02AC  
                         _get_cluster 320E                           _disk_status 5506  
                     ?_leitura_sdcard 00E5                         ??_move_window 008F  
                           f_mount@fs 0021                              _PIR1bits 000F9E  
                            i2u912_40 558A                         move_window@fs 009E  
                   ?_write_timer_zero 0021                             fgets@buff 00D4  
                     remove_chain@nxt 00BA                             f_sync@dir 00A9  
                           f_sync@res 00A8                             f_sync@tim 00A4  
            posicao_cursor_lcd@coluna 0061                            ?_disk_read 007F  
                  ??_write_timer_zero 0023                             f_write@cc 00DF  
          posicao_cursor_lcd@endereco 0063                             f_write@bw 00CA  
                           f_write@fp 00C4             __size_of_recebe_dado_uart 0012  
                         _escalonador 47DC                     ___wmul@multiplier 0060  
                    ?_escreve_cmd_lcd 0001           escreve_frase_ram_lcd@buffer 0061  
                    ??_inicializa_SPI 0021                       ?_init_interrupt 0001  
                        ??_disk_ioctl 0021                          ??_disk_write 0086  
                        f_lseek@clust 00DF                       _inicializa_uart 586E  
                        f_lseek@csize 00DB                          f_lseek@ifptr 00D7  
                           _stringcpy 53D8                      __size_of_GPSRead 0294  
                    _mensagem_inicial 4D32                       ?_init_oscilador 0001  
                        ??_clust2sect 0070                     ___lmul@multiplier 0060  
                           copy_data0 4DCC                           _escreve_SPI 5978  
                          ?_sdc_reset 0001                   sdc_reset@count_nosd 006E  
            ?_configura_baudrate_uart 006E                ?_escreve_frase_ram_lcd 0061  
                    auto_mount@chk_wp 0095                     move_window@sector 008B  
                      _sdc_disk_write 3430             __size_of_reserve_direntry 029A  
            escreve_inteiro_lcd@F3966 01EA                          ??_auto_mount 0096  
                            __Hrparam 0000                             memcpy@tmp 0066  
                            __Lrparam 0000                             fprintf@cc 01DD  
                  __end_of_disk_ioctl 586E                 __size_of_remove_chain 00A6  
                      put_cluster@val 00A2                      get_cluster@clust 00A0  
                  __end_of_disk_write 4D32               verifica_fence_externo@i 00F0  
             verifica_fence_externo@j 00E9                          _SentenceType 0036  
                    __size_of___aldiv 00CE                sdc_disk_initialize@ocr 007C  
                        monta_sd@dado 0064                _verifica_fence_externo 45DC  
                    __size_of___lldiv 0084                      __size_of___llmod 0068  
                       ??_put_cluster 00A4                      __size_of___lwdiv 0054  
                        monta_sd@size 0067                      __size_of___lwmod 0044  
                        ??_init_ports 0021                   __end_of_move_window 3970  
                  __end_of_clust2sect 45DC              escreve_inteiro_lcd@valor 0078  
                    __size_of_f_close 002C              escreve_inteiro_lcd@texto 007A  
                    __size_of_f_lseek 048A                      __size_of_f_mount 004C  
                         _leitura_SPI 59E2                      __size_of_f_write 05BA  
                   disk_status@result 0061                      __size_of_command 0068  
               __end_of_init_hardware 5940                              _check_fs 4C1E  
              leitura_sdcard@num_spot 0001                      __size_of_fprintf 03C4  
                     ___lwdiv@divisor 0062                      ?_sdc_disk_status 0001  
                          ?_stringcpy 0001                       ___lwdiv@counter 0064  
                  __end_of_auto_mount 13C4                              __ptext10 59AE  
                            __ptext11 5386                              __ptext20 586E  
                            __ptext12 47DC                              __ptext21 401E  
                            __ptext13 5A0C                              __ptext30 27BA  
                            __ptext22 4458                              __ptext14 59FA  
                            __ptext31 3AF8                              __ptext23 58B6  
                            __ptext15 45DC                              __ptext40 2474  
                            __ptext32 2A66                              __ptext24 1D1A  
                            __ptext16 4E3C                              __ptext41 4880  
                            __ptext33 3970                              __ptext25 517A  
                            __ptext17 4AFA                              __ptext50 2F94  
                            __ptext42 4F44                              __ptext34 4526  
                            __ptext26 5288                              __ptext18 13C4  
                            __ptext51 320E                              __ptext43 503A  
                            __ptext35 4736                              __ptext27 08D8  
                            __ptext19 4380                              __ptext60 37BA  
                            __ptext52 581E                              __ptext44 4C1E  
                            __ptext36 54BE                              __ptext28 50AA  
                            __ptext61 4CAA                              __ptext53 4EC0  
                            __ptext45 4924                              __ptext37 0E92  
                            __ptext29 20DE                              __ptext70 561E  
                            __ptext62 3430                              __ptext54 57F2  
                            __ptext46 5230                              __ptext38 57C4  
                            __ptext71 59E2                              __ptext63 4B8E  
                            __ptext55 414E                              __ptext47 5426  
                            __ptext39 5720                              __ptext80 4FC2  
                            __ptext72 5846                              __ptext64 3C66  
                            __ptext56 5472                              __ptext48 1890  
                            __ptext81 5892                              __ptext73 4278  
                            __ptext65 59CA                              __ptext57 5506  
                            __ptext49 35FA                              __ptext90 2D00  
                            __ptext82 59BC                              __ptext74 56A2  
                            __ptext66 59D6                              __ptext58 5940  
                            __ptext91 53D8                              __ptext83 59EE  
                            __ptext75 5596                              __ptext67 5112  
                            __ptext59 51D6                              __ptext92 554E  
                            __ptext84 5660                              __ptext76 468C  
                            __ptext68 575C                              __ptext93 0000  
                            __ptext85 3EEC                              __ptext77 55DA  
                            __ptext69 5978                              __ptext86 56E2  
                            __ptext78 52DE                              __ptext79 5332  
                            __ptext88 598A                              __ptext89 599C  
                    __size_of_proceed 000C                              _filename 01F1  
                         _rawAltitude 0193                      ?_disk_initialize 0001  
                      _timeout_tarefa 002F                    sdc_disk_read@count 0072  
          __end_of_inicializa_tarefas 53D8              i2write_timer_zero@timer0 0001  
              __end_of_sdc_disk_write 35FA                             monta_sd@i 0068  
                         _rawLatitude 016F                              _init_lcd 49C8  
                       __size_of_main 002E                          _remove_chain 4736  
                         f_read@clust 00CE                         __size_of_itoa 0044  
                       __size_of_utoa 00AA                         __size_of_sync 005A  
                         f_read@rbuff 00CC                              f_read@cc 00D0  
                            f_read@br 00B9                              f_read@fp 00B3  
                 _endereco_cursor_lcd 503A                    __end_of_init_ports 5910  
                            _rawSpeed 01A7                         dummy_clocks@i 0061  
                            f_open@dj 01C8                         dummy_clocks@n 0060  
                            f_open@fn 01B3                              f_open@fp 00D7  
                            f_open@dw 01C1                              f_open@rs 01BF  
                     _dados_gps_to_sd 5660                              _monta_sd 3EEC  
                            _validate 5472                              _sentence 01AD  
                        move_window@n 0099                         stringcpy@str1 0001  
                       stringcpy@str2 0003                              _response 59CA  
                            fgets@fil 00D8                              fgets@len 00D6  
                            f_sync@fp 00A2           __size_of_posicao_cursor_lcd 007E  
                            int$flags 003F               posicao_cursor_lcd@linha 0062  
                        ??_wait_ready 0021                           ??_disk_read 0086  
             __end_of_inicializa_uart 5892                          ??_trace_path 00C8  
                ?_endereco_cursor_lcd 0001                    put_cluster@fatsect 00AC  
                          _INTCONbits 000FF2                              memcmp@s1 0060  
                            memcmp@s2 0062                      move_window@wsect 009A  
                            memcpy@d1 0060                              memcpy@s1 0062  
                 __end_of_put_cluster 320E                              fprintf@c 01E1  
                            fprintf@f 01D5                              fprintf@i 01DF  
                            fprintf@r 01D6                              fprintf@s 01BF  
                            fprintf@w 01D3                              fputc@chr 00E5  
                            itoa@base 0074                              fputc@fil 00E7  
                            memset@p1 0060                     _config_timer_dois 59AE  
                        _tempo_backup 0100                              fputs@fil 00EE  
                            fputs@str 00EC                     _config_timer_zero 5910  
                        _poligono_ext 0200                         wait_ready@res 0064  
                            intlevel2 0000                    ?_config_timer_dois 0001  
            mensagem_inicial@msg_dois 0077                           ??_sdc_reset 0023  
                  ?_config_timer_zero 0001                          _tempo_tarefa 0023  
                     ?_sdc_disk_write 006C                      ___lwmod@dividend 0060  
                  __end_of_wait_ready 5796                      ___lldiv@dividend 0060  
                   sdc_disk_read@buff 007E                 __end_of_sdc_disk_read 3DAC  
                 sdc_disk_status@pdrv 0022                   sdc_disk_status@stat 0021  
                       ?_desliga_uart 0001                   ??_config_timer_dois 0021  
                          _OSCCONbits 000FD3                    __end_of_trace_path 2A66  
                 ??_config_timer_zero 0023                           _move_window 37BA  
                sdc_disk_write@count1 0079                  sdc_disk_write@p_buff 006C  
                    _recebe_dado_uart 599C                              utoa@base 006B  
                sdc_disk_write@sector 006E                 ??_endereco_cursor_lcd 0023  
                leitura_sdcard@offset 00E7                          response@buff 0021  
                            strcmp@s1 0001                              strcmp@s2 0003  
                        ?_desliga_SPI 0001                      ___lldiv@quotient 0068  
                     ___lwmod@divisor 0062                              strlen@cp 0062  
                     ___lwmod@counter 0021                     remove_chain@clust 00B6  
           __end_of_config_timer_dois 59BC                          ___aldiv@sign 0069  
                       ?_create_chain 00B6             __end_of_config_timer_zero 592A  
                         ??_stringcpy 0007           __size_ofi2_write_timer_zero 0012  
                         _SSPCON1bits 000FC6               __size_of_next_dir_entry 0188  
              escreve_cmd_lcd@comando 0060                    escreve_SPI@TempVar 0021  
                 sdc_disk_write@count 0072         sdc_disk_initialize@crc_number 0079  
             __end_of_dados_gps_to_sd 56A2                      ??_leitura_sdcard 0023  
                  sdc_disk_write@buff 007E          __size_of_sdc_disk_initialize 0346  
                        f_write@clust 00E1                        ??_desliga_uart 0021  
                  leitura_sdcard@size 003E                          f_write@wbuff 00D9  
                        ?_get_fattime 0060                      _reserve_direntry 2A66  
                         f_write@buff 00C6                     sdc_disk_write@res 007B  
                        ?_get_cluster 00A0                           f_write@sect 00DB  
                         f_write@wcnt 00E3                          ?_disk_status 0001  
       __end_ofmensagem_inicial@F4345 0823         __end_ofmensagem_inicial@F4347 0812  
                     escreve_SPI@dado 0022  
