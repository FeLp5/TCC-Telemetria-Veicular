

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 06 18:26:53 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4550 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  0016DC                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for leitura_sdcard@size
    94  0016DC  14                 	db	20
    95                           
    96                           	psect	idataBANK0
    97  0016B7                     __pidataBANK0:
    98                           	opt stack 0
    99                           
   100                           ;initializer for escreve_inteiro_uart@F3958
   101  0016B7  30                 	db	48
   102  0016B8  30                 	db	48
   103  0016B9  30                 	db	48
   104  0016BA  30                 	db	48
   105  0016BB  30                 	db	48
   106  0016BC  30                 	db	48
   107  0016BD  00                 	db	0
   108                           
   109                           ;initializer for escreve_inteiro_lcd@F3966
   110  0016BE  30                 	db	48
   111  0016BF  30                 	db	48
   112  0016C0  30                 	db	48
   113  0016C1  30                 	db	48
   114  0016C2  30                 	db	48
   115  0016C3  30                 	db	48
   116  0016C4  00                 	db	0
   117                           
   118                           	psect	idataBANK1
   119  0016A8                     __pidataBANK1:
   120                           	opt stack 0
   121                           
   122                           ;initializer for _filename
   123  0016A8  74                 	db	116
   124  0016A9  65                 	db	101
   125  0016AA  73                 	db	115
   126  0016AB  74                 	db	116
   127  0016AC  65                 	db	101
   128  0016AD  2E                 	db	46
   129  0016AE  74                 	db	116
   130  0016AF  78                 	db	120
   131  0016B0  74                 	db	116
   132  0016B1  00                 	db	0
   133  0016B2  00                 	db	0
   134  0016B3  00                 	db	0
   135  0016B4  00                 	db	0
   136  0016B5  00                 	db	0
   137  0016B6  00                 	db	0
   138                           
   139                           	psect	smallconst
   140  000800                     __psmallconst:
   141                           	opt stack 0
   142  000800  00                 	db	0
   143  000801                     mensagem_inicial@F4129:
   144                           	opt stack 0
   145  000801  54                 	db	84
   146  000802  43                 	db	67
   147  000803  43                 	db	67
   148  000804  2D                 	db	45
   149  000805  2D                 	db	45
   150  000806  54                 	db	84
   151  000807  45                 	db	69
   152  000808  4C                 	db	76
   153  000809  45                 	db	69
   154  00080A  4D                 	db	77
   155  00080B  54                 	db	84
   156  00080C  52                 	db	82
   157  00080D  49                 	db	73
   158  00080E  41                 	db	65
   159  00080F  00                 	db	0
   160  000810  00                 	db	0
   161  000811  00                 	db	0
   162  000812                     __end_ofmensagem_inicial@F4129:
   163                           	opt stack 0
   164  000812                     mensagem_inicial@F4127:
   165                           	opt stack 0
   166  000812  46                 	db	70
   167  000813  41                 	db	65
   168  000814  54                 	db	84
   169  000815  45                 	db	69
   170  000816  43                 	db	67
   171  000817  20                 	db	32
   172  000818  53                 	db	83
   173  000819  54                 	db	84
   174  00081A  20                 	db	32
   175  00081B  41                 	db	65
   176  00081C  4E                 	db	78
   177  00081D  44                 	db	68
   178  00081E  52                 	db	82
   179  00081F  45                 	db	69
   180  000820  00                 	db	0
   181  000821  00                 	db	0
   182  000822  00                 	db	0
   183  000823                     __end_ofmensagem_inicial@F4127:
   184                           	opt stack 0
   185  0000                     _RCSTA	set	4011
   186  0000                     _TXSTA	set	4012
   187  0000                     _RCREG	set	4014
   188  0000                     _RCSTAbits	set	4011
   189  0000                     _TXREG	set	4013
   190  0000                     _SPBRG	set	4015
   191  0000                     _PR2	set	4043
   192  0000                     _TMR2	set	4044
   193  0000                     _T2CON	set	4042
   194  0000                     _OSCCONbits	set	4051
   195  0000                     _TRISE	set	3990
   196  0000                     _TRISC	set	3988
   197  0000                     _TRISA	set	3986
   198  0000                     _TRISD	set	3989
   199  0000                     _LATB	set	3978
   200  0000                     _TRISB	set	3987
   201  0000                     _ADCON1	set	4033
   202  0000                     _TMR0L	set	4054
   203  0000                     _TMR0H	set	4055
   204  0000                     _PIE1	set	3997
   205  0000                     _INTCON3	set	4080
   206  0000                     _INTCON2	set	4081
   207  0000                     _INTCON	set	4082
   208  0000                     _SPPCFG	set	3939
   209  0000                     _SPPCON	set	3941
   210  0000                     _T0CON	set	4053
   211  0000                     _PORTDbits	set	3971
   212  0000                     _TRISDbits	set	3989
   213  0000                     _LATCbits	set	3979
   214  0000                     _SSPBUF	set	4041
   215  0000                     _SSPCON1bits	set	4038
   216  0000                     _SSPSTATbits	set	4039
   217  0000                     _SSPCON1	set	4038
   218  0000                     _SSPSTAT	set	4039
   219  0000                     _TRISCbits	set	3988
   220  0000                     _TRISBbits	set	3987
   221  0000                     _LATBbits	set	3978
   222  0000                     _T0CONbits	set	4053
   223  0000                     _PCL	set	4089
   224  0000                     _PCLATH	set	4090
   225  0000                     _INTCONbits	set	4082
   226  0000                     _PORTBbits	set	3969
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PIE1bits	set	3997
   229  0000                     _RCIF	set	31989
   230  0000                     _TRMT	set	32097
   231  0000                     _TXEN	set	32101
   232  0000                     _CREN	set	32092
   233  0000                     _SPEN	set	32095
   234  0000                     _SYNC	set	32100
   235  0000                     _BRGH	set	32098
   236  0000                     _TMR2IF	set	31985
   237  0000                     _INT0IE	set	32660
   238  0000                     _INT0IF	set	32657
   239  0000                     _T0IF	set	32658
   240  0000                     _TMR0IF	set	32658
   241  000823  0A                 	db	10
   242  000824  25                 	db	37
   243  000825  73                 	db	115	;'s'
   244  000826  20                 	db	32
   245  000827  3B                 	db	59	;';'
   246  000828  20                 	db	32
   247  000829  25                 	db	37
   248  00082A  73                 	db	115	;'s'
   249  00082B  20                 	db	32
   250  00082C  3B                 	db	59	;';'
   251  00082D  20                 	db	32
   252  00082E  25                 	db	37
   253  00082F  73                 	db	115	;'s'
   254  000830  20                 	db	32
   255  000831  3B                 	db	59	;';'
   256  000832  20                 	db	32
   257  000833  25                 	db	37
   258  000834  73                 	db	115	;'s'
   259  000835  20                 	db	32
   260  000836  3B                 	db	59	;';'
   261  000837  00                 	db	0
   262  000838  6F                 	db	111	;'o'
   263  000839  20                 	db	32
   264  00083A  53                 	db	83	;'S'
   265  00083B  69                 	db	105	;'i'
   266  00083C  73                 	db	115	;'s'
   267  00083D  74                 	db	116	;'t'
   268  00083E  65                 	db	101	;'e'
   269  00083F  6D                 	db	109	;'m'
   270  000840  61                 	db	97	;'a'
   271  000841  20                 	db	32
   272  000842  64                 	db	100	;'d'
   273  000843  65                 	db	101	;'e'
   274  000844  20                 	db	32
   275  000845  61                 	db	97	;'a'
   276  000846  72                 	db	114	;'r'
   277  000847  71                 	db	113	;'q'
   278  000848  75                 	db	117	;'u'
   279  000849  69                 	db	105	;'i'
   280  00084A  76                 	db	118	;'v'
   281  00084B  6F                 	db	111	;'o'
   282  00084C  00                 	db	0
   283  00084D  49                 	db	73	;'I'
   284  00084E  6E                 	db	110	;'n'
   285  00084F  73                 	db	115	;'s'
   286  000850  69                 	db	105	;'i'
   287  000851  72                 	db	114	;'r'
   288  000852  61                 	db	97	;'a'
   289  000853  20                 	db	32
   290  000854  6F                 	db	111	;'o'
   291  000855  20                 	db	32
   292  000856  43                 	db	67	;'C'
   293  000857  61                 	db	97	;'a'
   294  000858  72                 	db	114	;'r'
   295  000859  74                 	db	116	;'t'
   296  00085A  61                 	db	97	;'a'
   297  00085B  6F                 	db	111	;'o'
   298  00085C  00                 	db	0
   299  00085D  45                 	db	69	;'E'
   300  00085E  72                 	db	114	;'r'
   301  00085F  72                 	db	114	;'r'
   302  000860  6F                 	db	111	;'o'
   303  000861  20                 	db	32
   304  000862  61                 	db	97	;'a'
   305  000863  6F                 	db	111	;'o'
   306  000864  20                 	db	32
   307  000865  6D                 	db	109	;'m'
   308  000866  6F                 	db	111	;'o'
   309  000867  6E                 	db	110	;'n'
   310  000868  74                 	db	116	;'t'
   311  000869  61                 	db	97	;'a'
   312  00086A  72                 	db	114	;'r'
   313  00086B  00                 	db	0
   314  00086C  45                 	db	69	;'E'
   315  00086D  72                 	db	114	;'r'
   316  00086E  72                 	db	114	;'r'
   317  00086F  6F                 	db	111	;'o'
   318  000870  20                 	db	32
   319  000871  61                 	db	97	;'a'
   320  000872  6F                 	db	111	;'o'
   321  000873  20                 	db	32
   322  000874  63                 	db	99	;'c'
   323  000875  72                 	db	114	;'r'
   324  000876  69                 	db	105	;'i'
   325  000877  61                 	db	97	;'a'
   326  000878  72                 	db	114	;'r'
   327  000879  00                 	db	0
   328  00087A  4D                 	db	77	;'M'
   329  00087B  4D                 	db	77	;'M'
   330  00087C  43                 	db	67	;'C'
   331  00087D  20                 	db	32
   332  00087E  56                 	db	86	;'V'
   333  00087F  65                 	db	101	;'e'
   334  000880  72                 	db	114	;'r'
   335  000881  2E                 	db	46
   336  000882  20                 	db	32
   337  000883  33                 	db	51	;'3'
   338  000884  00                 	db	0
   339  000885  53                 	db	83	;'S'
   340  000886  65                 	db	101	;'e'
   341  000887  6D                 	db	109	;'m'
   342  000888  20                 	db	32
   343  000889  43                 	db	67	;'C'
   344  00088A  61                 	db	97	;'a'
   345  00088B  72                 	db	114	;'r'
   346  00088C  74                 	db	116	;'t'
   347  00088D  61                 	db	97	;'a'
   348  00088E  6F                 	db	111	;'o'
   349  00088F  00                 	db	0
   350  000890  53                 	db	83	;'S'
   351  000891  44                 	db	68	;'D'
   352  000892  20                 	db	32
   353  000893  56                 	db	86	;'V'
   354  000894  45                 	db	69	;'E'
   355  000895  52                 	db	82	;'R'
   356  000896  2E                 	db	46
   357  000897  20                 	db	32
   358  000898  31                 	db	49	;'1'
   359  000899  00                 	db	0
   360  00089A  56                 	db	86	;'V'
   361  00089B  65                 	db	101	;'e'
   362  00089C  72                 	db	114	;'r'
   363  00089D  69                 	db	105	;'i'
   364  00089E  66                 	db	102	;'f'
   365  00089F  69                 	db	105	;'i'
   366  0008A0  71                 	db	113	;'q'
   367  0008A1  75                 	db	117	;'u'
   368  0008A2  65                 	db	101	;'e'
   369  0008A3  00                 	db	0
   370  0008A4  6F                 	db	111	;'o'
   371  0008A5  20                 	db	32
   372  0008A6  61                 	db	97	;'a'
   373  0008A7  72                 	db	114	;'r'
   374  0008A8  71                 	db	113	;'q'
   375  0008A9  75                 	db	117	;'u'
   376  0008AA  69                 	db	105	;'i'
   377  0008AB  76                 	db	118	;'v'
   378  0008AC  6F                 	db	111	;'o'
   379  0008AD  00                 	db	0
   380  0008AE  6F                 	db	111	;'o'
   381  0008AF  20                 	db	32
   382  0008B0  63                 	db	99	;'c'
   383  0008B1  61                 	db	97	;'a'
   384  0008B2  72                 	db	114	;'r'
   385  0008B3  74                 	db	116	;'t'
   386  0008B4  61                 	db	97	;'a'
   387  0008B5  6F                 	db	111	;'o'
   388  0008B6  00                 	db	0
   389  0008B7                     STR_2:
   390  0008B7  47                 	db	71	;'G'
   391  0008B8  50                 	db	80	;'P'
   392  0008B9  47                 	db	71	;'G'
   393  0008BA  47                 	db	71	;'G'
   394  0008BB  41                 	db	65	;'A'
   395  0008BC  00                 	db	0
   396  0008BD                     STR_1:
   397  0008BD  47                 	db	71	;'G'
   398  0008BE  50                 	db	80	;'P'
   399  0008BF  52                 	db	82	;'R'
   400  0008C0  4D                 	db	77	;'M'
   401  0008C1  43                 	db	67	;'C'
   402  0008C2  00                 	db	0
   403  0008C3  46                 	db	70	;'F'
   404  0008C4  41                 	db	65	;'A'
   405  0008C5  54                 	db	84	;'T'
   406  0008C6  00                 	db	0
   407  0008C7  0D                 	db	13
   408  0008C8  0A                 	db	10
   409  0008C9  00                 	db	0
   410  0008CA  00                 	db	0	; dummy byte at the end
   411  0000                     
   412                           ; #config settings
   413                           
   414                           	psect	cinit
   415  001074                     __pcinit:
   416                           	opt stack 0
   417  001074                     start_initialization:
   418                           	opt stack 0
   419  001074                     __initialization:
   420                           	opt stack 0
   421                           
   422                           ; Initialize objects allocated to BANK1 (15 bytes)
   423                           ; load TBLPTR registers with __pidataBANK1
   424  001074  0EA8               	movlw	low __pidataBANK1
   425  001076  6EF6               	movwf	tblptrl,c
   426  001078  0E16               	movlw	high __pidataBANK1
   427  00107A  6EF7               	movwf	tblptrh,c
   428  00107C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   429  00107E  6EF8               	movwf	tblptru,c
   430  001080  EE01  F05A         	lfsr	0,__pdataBANK1
   431  001084  EE10 F00F          	lfsr	1,15
   432  001088                     copy_data0:
   433  001088  0009               	tblrd		*+
   434  00108A  CFF5 FFEE          	movff	tablat,postinc0
   435  00108E  50E5               	movf	postdec1,w,c
   436  001090  50E1               	movf	fsr1l,w,c
   437  001092  E1FA               	bnz	copy_data0
   438                           
   439                           ; Initialize objects allocated to BANK0 (14 bytes)
   440                           ; load TBLPTR registers with __pidataBANK0
   441  001094  0EB7               	movlw	low __pidataBANK0
   442  001096  6EF6               	movwf	tblptrl,c
   443  001098  0E16               	movlw	high __pidataBANK0
   444  00109A  6EF7               	movwf	tblptrh,c
   445  00109C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   446  00109E  6EF8               	movwf	tblptru,c
   447  0010A0  EE00  F0EE         	lfsr	0,__pdataBANK0
   448  0010A4  EE10 F00E          	lfsr	1,14
   449  0010A8                     copy_data1:
   450  0010A8  0009               	tblrd		*+
   451  0010AA  CFF5 FFEE          	movff	tablat,postinc0
   452  0010AE  50E5               	movf	postdec1,w,c
   453  0010B0  50E1               	movf	fsr1l,w,c
   454  0010B2  E1FA               	bnz	copy_data1
   455                           
   456                           ; Initialize objects allocated to COMRAM (1 bytes)
   457                           ; load TBLPTR registers with __pidataCOMRAM
   458  0010B4  0EDC               	movlw	low __pidataCOMRAM
   459  0010B6  6EF6               	movwf	tblptrl,c
   460  0010B8  0E16               	movlw	high __pidataCOMRAM
   461  0010BA  6EF7               	movwf	tblptrh,c
   462  0010BC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   463  0010BE  6EF8               	movwf	tblptru,c
   464  0010C0  0009               	tblrd		*+	;fetch initializer
   465  0010C2  CFF5 F041          	movff	tablat,__pdataCOMRAM
   466                           
   467                           ; Clear objects allocated to BIGRAM (544 bytes)
   468  0010C6  EE01  F069         	lfsr	0,__pbssBIGRAM
   469  0010CA  EE12 F020          	lfsr	1,544
   470  0010CE                     clear_0:
   471  0010CE  6AEE               	clrf	postinc0,c
   472  0010D0  50E5               	movf	postdec1,w,c
   473  0010D2  50E1               	movf	fsr1l,w,c
   474  0010D4  E1FC               	bnz	clear_0
   475  0010D6  50E2               	movf	fsr1h,w,c
   476  0010D8  E1FA               	bnz	clear_0
   477                           
   478                           ; Clear objects allocated to BANK1 (90 bytes)
   479  0010DA  EE01  F000         	lfsr	0,__pbssBANK1
   480  0010DE  0E5A               	movlw	90
   481  0010E0                     clear_1:
   482  0010E0  6AEE               	clrf	postinc0,c
   483  0010E2  06E8               	decf	wreg,f,c
   484  0010E4  E1FD               	bnz	clear_1
   485                           
   486                           ; Clear objects allocated to BANK0 (100 bytes)
   487  0010E6  EE00  F060         	lfsr	0,__pbssBANK0
   488  0010EA  0E64               	movlw	100
   489  0010EC                     clear_2:
   490  0010EC  6AEE               	clrf	postinc0,c
   491  0010EE  06E8               	decf	wreg,f,c
   492  0010F0  E1FD               	bnz	clear_2
   493                           
   494                           ; Clear objects allocated to COMRAM (32 bytes)
   495  0010F2  EE00  F001         	lfsr	0,__pbssCOMRAM
   496  0010F6  0E20               	movlw	32
   497  0010F8                     clear_3:
   498  0010F8  6AEE               	clrf	postinc0,c
   499  0010FA  06E8               	decf	wreg,f,c
   500  0010FC  E1FD               	bnz	clear_3
   501  0010FE                     end_of_initialization:
   502                           	opt stack 0
   503  0010FE                     __end_of__initialization:
   504                           	opt stack 0
   505  0010FE  9042               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   506  001100  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   507  001102  0E00               	movlw	low (__Lmediumconst shr (0+16))
   508  001104  6EF8               	movwf	tblptru,c
   509  001106  0100               	movlb	0
   510  001108  EFB8  F00A         	goto	_main	;jump to C main() function
   511                           tblptru	equ	0xFF8
   512                           tblptrh	equ	0xFF7
   513                           tblptrl	equ	0xFF6
   514                           tablat	equ	0xFF5
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           postdec1	equ	0xFE5
   518                           fsr1h	equ	0xFE2
   519                           fsr1l	equ	0xFE1
   520                           
   521                           	psect	bssCOMRAM
   522  000001                     __pbssCOMRAM:
   523                           	opt stack 0
   524  000001                     _tempo_tarefa:
   525                           	opt stack 0
   526  000001                     	ds	4
   527  000005                     _tempo_backup:
   528                           	opt stack 0
   529  000005                     	ds	4
   530  000009                     _fsid:
   531                           	opt stack 0
   532  000009                     	ds	2
   533  00000B                     _FatFs:
   534                           	opt stack 0
   535  00000B                     	ds	2
   536  00000D                     _data_buff:
   537                           	opt stack 0
   538  00000D                     	ds	2
   539  00000F                     _GPGGA_ok:
   540                           	opt stack 0
   541  00000F                     	ds	2
   542  000011                     _GPRMC_ok:
   543                           	opt stack 0
   544  000011                     	ds	2
   545  000013                     _timeout_tarefa:
   546                           	opt stack 0
   547  000013                     	ds	2
   548  000015                     _dado:
   549                           	opt stack 0
   550  000015                     	ds	1
   551  000016                     timer_dois@flag:
   552                           	opt stack 0
   553  000016                     	ds	1
   554  000017                     _estado:
   555                           	opt stack 0
   556  000017                     	ds	1
   557  000018                     _data_hoje:
   558                           	opt stack 0
   559  000018                     	ds	1
   560  000019                     _Term:
   561                           	opt stack 0
   562  000019                     	ds	1
   563  00001A                     _SentenceType:
   564                           	opt stack 0
   565  00001A                     	ds	1
   566  00001B                     _char_number:
   567                           	opt stack 0
   568  00001B                     	ds	1
   569  00001C                     _tarefa_em_execucao:
   570                           	opt stack 0
   571  00001C                     	ds	1
   572  00001D                     _data_uart_recebe:
   573                           	opt stack 0
   574  00001D                     	ds	1
   575  00001E                     _rawSatellites:
   576                           	opt stack 0
   577  00001E                     	ds	3
   578                           tblptru	equ	0xFF8
   579                           tblptrh	equ	0xFF7
   580                           tblptrl	equ	0xFF6
   581                           tablat	equ	0xFF5
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           postdec1	equ	0xFE5
   585                           fsr1h	equ	0xFE2
   586                           fsr1l	equ	0xFE1
   587                           
   588                           	psect	dataCOMRAM
   589  000041                     __pdataCOMRAM:
   590                           	opt stack 0
   591  000041                     leitura_sdcard@size:
   592                           	opt stack 0
   593  000041                     	ds	1
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           postdec1	equ	0xFE5
   601                           fsr1h	equ	0xFE2
   602                           fsr1l	equ	0xFE1
   603                           
   604                           	psect	bssBANK0
   605  000060                     __pbssBANK0:
   606                           	opt stack 0
   607  000060                     _poligono:
   608                           	opt stack 0
   609  000060                     	ds	12
   610  00006C                     _p_tarefas:
   611                           	opt stack 0
   612  00006C                     	ds	4
   613  000070                     _sinaliza_int_timer:
   614                           	opt stack 0
   615  000070                     	ds	1
   616  000071                     _fil:
   617                           	opt stack 0
   618  000071                     	ds	28
   619  00008D                     _buffer:
   620                           	opt stack 0
   621  00008D                     	ds	12
   622  000099                     _rawTime:
   623                           	opt stack 0
   624  000099                     	ds	11
   625  0000A4                     _rawAltitude:
   626                           	opt stack 0
   627  0000A4                     	ds	7
   628  0000AB                     _rawDate:
   629                           	opt stack 0
   630  0000AB                     	ds	7
   631  0000B2                     _rawCourse:
   632                           	opt stack 0
   633  0000B2                     	ds	6
   634  0000B8                     _rawSpeed:
   635                           	opt stack 0
   636  0000B8                     	ds	6
   637  0000BE                     _sentence:
   638                           	opt stack 0
   639  0000BE                     	ds	6
   640                           tblptru	equ	0xFF8
   641                           tblptrh	equ	0xFF7
   642                           tblptrl	equ	0xFF6
   643                           tablat	equ	0xFF5
   644                           postinc0	equ	0xFEE
   645                           wreg	equ	0xFE8
   646                           postdec1	equ	0xFE5
   647                           fsr1h	equ	0xFE2
   648                           fsr1l	equ	0xFE1
   649                           
   650                           	psect	dataBANK0
   651  0000EE                     __pdataBANK0:
   652                           	opt stack 0
   653  0000EE                     escreve_inteiro_uart@F3958:
   654                           	opt stack 0
   655  0000EE                     	ds	7
   656  0000F5                     escreve_inteiro_lcd@F3966:
   657                           	opt stack 0
   658  0000F5                     	ds	7
   659                           tblptru	equ	0xFF8
   660                           tblptrh	equ	0xFF7
   661                           tblptrl	equ	0xFF6
   662                           tablat	equ	0xFF5
   663                           postinc0	equ	0xFEE
   664                           wreg	equ	0xFE8
   665                           postdec1	equ	0xFE5
   666                           fsr1h	equ	0xFE2
   667                           fsr1l	equ	0xFE1
   668                           
   669                           	psect	bssBANK1
   670  000100                     __pbssBANK1:
   671                           	opt stack 0
   672  000100                     _string_dado:
   673                           	opt stack 0
   674  000100                     	ds	44
   675  00012C                     _dado_arquivo:
   676                           	opt stack 0
   677  00012C                     	ds	20
   678  000140                     _rawLongitude:
   679                           	opt stack 0
   680  000140                     	ds	13
   681  00014D                     _rawLatitude:
   682                           	opt stack 0
   683  00014D                     	ds	13
   684                           tblptru	equ	0xFF8
   685                           tblptrh	equ	0xFF7
   686                           tblptrl	equ	0xFF6
   687                           tablat	equ	0xFF5
   688                           postinc0	equ	0xFEE
   689                           wreg	equ	0xFE8
   690                           postdec1	equ	0xFE5
   691                           fsr1h	equ	0xFE2
   692                           fsr1l	equ	0xFE1
   693                           
   694                           	psect	dataBANK1
   695  00015A                     __pdataBANK1:
   696                           	opt stack 0
   697  00015A                     _filename:
   698                           	opt stack 0
   699  00015A                     	ds	15
   700                           tblptru	equ	0xFF8
   701                           tblptrh	equ	0xFF7
   702                           tblptrl	equ	0xFF6
   703                           tablat	equ	0xFF5
   704                           postinc0	equ	0xFEE
   705                           wreg	equ	0xFE8
   706                           postdec1	equ	0xFE5
   707                           fsr1h	equ	0xFE2
   708                           fsr1l	equ	0xFE1
   709                           
   710                           	psect	bssBIGRAM
   711  000169                     __pbssBIGRAM:
   712                           	opt stack 0
   713  000169                     _fs:
   714                           	opt stack 0
   715  000169                     	ds	544
   716                           tblptru	equ	0xFF8
   717                           tblptrh	equ	0xFF7
   718                           tblptrl	equ	0xFF6
   719                           tablat	equ	0xFF5
   720                           postinc0	equ	0xFEE
   721                           wreg	equ	0xFE8
   722                           postdec1	equ	0xFE5
   723                           fsr1h	equ	0xFE2
   724                           fsr1l	equ	0xFE1
   725                           
   726                           	psect	cstackBANK0
   727  0000C4                     __pcstackBANK0:
   728                           	opt stack 0
   729  0000C4                     ?_strlen:
   730                           	opt stack 0
   731  0000C4                     ?___aldiv:
   732                           	opt stack 0
   733  0000C4                     delay@contador_ext:
   734                           	opt stack 0
   735  0000C4                     write_timer_zero@timer0:
   736                           	opt stack 0
   737  0000C4                     strlen@s:
   738                           	opt stack 0
   739  0000C4                     ___aldiv@dividend:
   740                           	opt stack 0
   741                           
   742                           ; 4 bytes @ 0x0
   743  0000C4                     	ds	1
   744  0000C5                     delay@contador_int:
   745                           	opt stack 0
   746                           
   747                           ; 1 bytes @ 0x1
   748  0000C5                     	ds	1
   749  0000C6                     ??_strlen:
   750  0000C6                     escalonador@cont:
   751                           	opt stack 0
   752  0000C6                     escreve_cmd_lcd@comando:
   753                           	opt stack 0
   754  0000C6                     endereco_cursor_lcd@endereco:
   755                           	opt stack 0
   756  0000C6                     escreve_caractere_lcd@data:
   757                           	opt stack 0
   758  0000C6                     write_timer_zero@timer:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x2
   762  0000C6                     	ds	1
   763  0000C7                     ??_init_lcd:
   764  0000C7                     posicao_cursor_lcd@coluna:
   765                           	opt stack 0
   766  0000C7                     escreve_frase_ram_lcd@buffer:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0x3
   770  0000C7                     	ds	1
   771  0000C8                     posicao_cursor_lcd@linha:
   772                           	opt stack 0
   773  0000C8                     strlen@cp:
   774                           	opt stack 0
   775  0000C8                     ___aldiv@divisor:
   776                           	opt stack 0
   777                           
   778                           ; 4 bytes @ 0x4
   779  0000C8                     	ds	1
   780  0000C9                     posicao_cursor_lcd@endereco:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x5
   784  0000C9                     	ds	1
   785  0000CA                     ??_mensagem_inicial:
   786  0000CA                     monta_sd@dado:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x6
   790  0000CA                     	ds	2
   791  0000CC                     monta_sd@index:
   792                           	opt stack 0
   793  0000CC                     ___aldiv@counter:
   794                           	opt stack 0
   795  0000CC                     mensagem_inicial@msg_linha_um:
   796                           	opt stack 0
   797                           
   798                           ; 17 bytes @ 0x8
   799  0000CC                     	ds	1
   800  0000CD                     monta_sd@size:
   801                           	opt stack 0
   802  0000CD                     ___aldiv@sign:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x9
   806  0000CD                     	ds	1
   807  0000CE                     monta_sd@i:
   808                           	opt stack 0
   809  0000CE                     ___aldiv@quotient:
   810                           	opt stack 0
   811                           
   812                           ; 4 bytes @ 0xA
   813  0000CE                     	ds	1
   814  0000CF                     
   815                           ; 1 bytes @ 0xB
   816  0000CF                     	ds	3
   817  0000D2                     configura_baudrate_uart@baudrate:
   818                           	opt stack 0
   819                           
   820                           ; 4 bytes @ 0xE
   821  0000D2                     	ds	4
   822  0000D6                     ??_configura_baudrate_uart:
   823                           
   824                           ; 1 bytes @ 0x12
   825  0000D6                     	ds	7
   826  0000DD                     mensagem_inicial@msg_dois:
   827                           	opt stack 0
   828                           
   829                           ; 17 bytes @ 0x19
   830  0000DD                     	ds	1
   831  0000DE                     configura_baudrate_uart@x:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x1A
   835  0000DE                     	ds	2
   836  0000E0                     
   837                           ; 1 bytes @ 0x1C
   838  0000E0                     	ds	14
   839  0000EE                     tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           postdec1	equ	0xFE5
   846                           fsr1h	equ	0xFE2
   847                           fsr1l	equ	0xFE1
   848                           
   849                           ; 1 bytes @ 0x2A
   850                           
   851                           	psect	cstackCOMRAM
   852  000021                     __pcstackCOMRAM:
   853                           	opt stack 0
   854  000021                     ?_strcmp:
   855                           	opt stack 0
   856  000021                     stringcpy@str1:
   857                           	opt stack 0
   858  000021                     strcmp@s1:
   859                           	opt stack 0
   860  000021                     i2write_timer_zero@timer0:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x0
   864  000021                     	ds	2
   865  000023                     stringcpy@str2:
   866                           	opt stack 0
   867  000023                     strcmp@s2:
   868                           	opt stack 0
   869  000023                     i2write_timer_zero@timer:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0x2
   873  000023                     	ds	2
   874  000025                     ??_strcmp:
   875  000025                     stringcpy@dir:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x4
   879  000025                     	ds	1
   880  000026                     strcmp@r:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x5
   884  000026                     	ds	1
   885  000027                     ??_stringcpy:
   886                           
   887                           ; 1 bytes @ 0x6
   888  000027                     	ds	2
   889  000029                     stringcpy@chr:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x8
   893  000029                     	ds	1
   894  00002A                     GPSRead@buff:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x9
   898  00002A                     	ds	1
   899  00002B                     GPSRead@c:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0xA
   903  00002B                     	ds	1
   904  00002C                     ??_isr:
   905                           
   906                           ; 1 bytes @ 0xB
   907  00002C                     	ds	20
   908  000040                     isr@cont:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x1F
   912  000040                     	ds	1
   913                           tblptru	equ	0xFF8
   914                           tblptrh	equ	0xFF7
   915                           tblptrl	equ	0xFF6
   916                           tablat	equ	0xFF5
   917                           postinc0	equ	0xFEE
   918                           wreg	equ	0xFE8
   919                           postdec1	equ	0xFE5
   920                           fsr1h	equ	0xFE2
   921                           fsr1l	equ	0xFE1
   922                           
   923 ;;
   924 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   925 ;;
   926 ;; *************** function _main *****************
   927 ;; Defined at:
   928 ;;		line 198 in file "main.c"
   929 ;; Parameters:    Size  Location     Type
   930 ;;		None
   931 ;; Auto vars:     Size  Location     Type
   932 ;;		None
   933 ;; Return value:  Size  Location     Type
   934 ;;                  1    wreg      void 
   935 ;; Registers used:
   936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   942 ;;      Params:         0       0       0       0       0       0       0       0       0
   943 ;;      Locals:         0       0       0       0       0       0       0       0       0
   944 ;;      Temps:          0       0       0       0       0       0       0       0       0
   945 ;;      Totals:         0       0       0       0       0       0       0       0       0
   946 ;;Total ram usage:        0 bytes
   947 ;; Hardware stack levels required when called:    7
   948 ;; This function calls:
   949 ;;		_dados_gps_to_sd
   950 ;;		_escalonador
   951 ;;		_inicializa_tarefas
   952 ;;		_inicializa_uart
   953 ;;		_init_hardware
   954 ;;		_init_lcd
   955 ;;		_mensagem_inicial
   956 ;; This function is called by:
   957 ;;		Startup code after reset
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           	psect	text0
   962  001570                     __ptext0:
   963                           	opt stack 0
   964  001570                     _main:
   965                           	opt stack 24
   966                           
   967                           ;main.c: 200: init_hardware();
   968                           
   969                           ;incstack = 0
   970  001570  EC25  F00B         	call	_init_hardware	;wreg free
   971                           
   972                           ;main.c: 201: T0CONbits.TMR0ON = 0;
   973  001574  9ED5               	bcf	4053,7,c	;volatile
   974                           
   975                           ;main.c: 202: init_lcd();
   976  001576  ECEB  F007         	call	_init_lcd	;wreg free
   977                           
   978                           ;main.c: 203: mensagem_inicial();
   979  00157A  ECD0  F008         	call	_mensagem_inicial	;wreg free
   980                           
   981                           ;main.c: 204: inicializa_tarefas();
   982  00157E  ECE4  F00A         	call	_inicializa_tarefas	;wreg free
   983                           
   984                           ;main.c: 205: inicializa_uart();
   985  001582  ECF7  F00A         	call	_inicializa_uart	;wreg free
   986                           
   987                           ;main.c: 206: T0CONbits.TMR0ON = 1;
   988  001586  8ED5               	bsf	4053,7,c	;volatile
   989  001588                     
   990                           ;main.c: 208: {
   991                           ;main.c: 210: if ((sinaliza_int_timer == 1) && (2))
   992  001588  0100               	movlb	0	; () banked
   993  00158A  0570               	decf	_sinaliza_int_timer& (0+255),w,b
   994  00158C  A4D8               	btfss	status,2,c
   995  00158E  D004               	goto	l92
   996                           
   997                           ; BSR set to: 0
   998                           ;main.c: 211: {
   999                           ;main.c: 212: sinaliza_int_timer = 0;
  1000  001590  0E00               	movlw	0
  1001  001592  6F70               	movwf	_sinaliza_int_timer& (0+255),b
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;main.c: 213: escalonador();
  1005  001594  EC52  F009         	call	_escalonador	;wreg free
  1006  001598                     l92:
  1007                           
  1008                           ;main.c: 214: }
  1009                           ;main.c: 215: dados_gps_to_sd();
  1010  001598  EC78  F00A         	call	_dados_gps_to_sd	;wreg free
  1011  00159C  D7F5               	goto	l91
  1012  00159E                     __end_of_main:
  1013                           	opt stack 0
  1014                           tblptru	equ	0xFF8
  1015                           tblptrh	equ	0xFF7
  1016                           tblptrl	equ	0xFF6
  1017                           tablat	equ	0xFF5
  1018                           postinc0	equ	0xFEE
  1019                           wreg	equ	0xFE8
  1020                           postdec1	equ	0xFE5
  1021                           fsr1h	equ	0xFE2
  1022                           fsr1l	equ	0xFE1
  1023                           status	equ	0xFD8
  1024                           
  1025 ;; *************** function _mensagem_inicial *****************
  1026 ;; Defined at:
  1027 ;;		line 225 in file "main.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;		None
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;  msg_dois       17   25[BANK0 ] const unsigned char [17]
  1032 ;;  msg_linha_um   17    8[BANK0 ] const unsigned char [17]
  1033 ;; Return value:  Size  Location     Type
  1034 ;;                  1    wreg      void 
  1035 ;; Registers used:
  1036 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1037 ;; Tracked objects:
  1038 ;;		On entry : 0/0
  1039 ;;		On exit  : 0/0
  1040 ;;		Unchanged: 0/0
  1041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1042 ;;      Params:         0       0       0       0       0       0       0       0       0
  1043 ;;      Locals:         0      34       0       0       0       0       0       0       0
  1044 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1045 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1046 ;;Total ram usage:       36 bytes
  1047 ;; Hardware stack levels used:    1
  1048 ;; Hardware stack levels required when called:    6
  1049 ;; This function calls:
  1050 ;;		_escreve_cmd_lcd
  1051 ;;		_escreve_frase_ram_lcd
  1052 ;;		_posicao_cursor_lcd
  1053 ;; This function is called by:
  1054 ;;		_main
  1055 ;; This function uses a non-reentrant model
  1056 ;;
  1057                           
  1058                           	psect	text1
  1059  0011A0                     __ptext1:
  1060                           	opt stack 0
  1061  0011A0                     _mensagem_inicial:
  1062                           	opt stack 24
  1063                           
  1064                           ;main.c: 227: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  1065                           
  1066                           ;incstack = 0
  1067  0011A0  0E12               	movlw	low mensagem_inicial@F4127
  1068  0011A2  6EF6               	movwf	tblptrl,c
  1069  0011A4                     	if	1	;There is more than 1 active tblptr byte
  1070  0011A4  0E08               	movlw	high mensagem_inicial@F4127
  1071  0011A6  6EF7               	movwf	tblptrh,c
  1072  0011A8                     	endif
  1073  0011A8                     	if	0	;There are less than 3 active tblptr bytes
  1074  0011A8                     	endif
  1075  0011A8  EE20  F0CC         	lfsr	2,mensagem_inicial@msg_linha_um
  1076  0011AC  0E10               	movlw	16
  1077  0011AE                     u10470:
  1078  0011AE  0009               	tblrd		*+
  1079  0011B0  CFF5 FFDE          	movff	tablat,postinc2
  1080  0011B4  06E8               	decf	wreg,f,c
  1081  0011B6  E2FB               	bc	u10470
  1082                           
  1083                           ;main.c: 228: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  1084  0011B8  0E01               	movlw	low mensagem_inicial@F4129
  1085  0011BA  6EF6               	movwf	tblptrl,c
  1086  0011BC                     	if	1	;There is more than 1 active tblptr byte
  1087  0011BC  0E08               	movlw	high mensagem_inicial@F4129
  1088  0011BE  6EF7               	movwf	tblptrh,c
  1089  0011C0                     	endif
  1090  0011C0                     	if	0	;There are less than 3 active tblptr bytes
  1091  0011C0                     	endif
  1092  0011C0  EE20  F0DD         	lfsr	2,mensagem_inicial@msg_dois
  1093  0011C4  0E10               	movlw	16
  1094  0011C6                     u10480:
  1095  0011C6  0009               	tblrd		*+
  1096  0011C8  CFF5 FFDE          	movff	tablat,postinc2
  1097  0011CC  06E8               	decf	wreg,f,c
  1098  0011CE  E2FB               	bc	u10480
  1099                           
  1100                           ;main.c: 230: posicao_cursor_lcd(1,0);
  1101  0011D0  0E00               	movlw	0
  1102  0011D2  0100               	movlb	0	; () banked
  1103  0011D4  6FC7               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  1104  0011D6  0E01               	movlw	1
  1105  0011D8  EC13  F009         	call	_posicao_cursor_lcd
  1106                           
  1107                           ;main.c: 231: escreve_frase_ram_lcd(msg_linha_um);
  1108  0011DC  0ECC               	movlw	low mensagem_inicial@msg_linha_um
  1109  0011DE  0100               	movlb	0	; () banked
  1110  0011E0  6FC7               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  1111  0011E2  0E00               	movlw	high mensagem_inicial@msg_linha_um
  1112  0011E4  6FC8               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  1113  0011E6  EC03  F00A         	call	_escreve_frase_ram_lcd	;wreg free
  1114                           
  1115                           ;main.c: 233: posicao_cursor_lcd(2,0);
  1116  0011EA  0E00               	movlw	0
  1117  0011EC  0100               	movlb	0	; () banked
  1118  0011EE  6FC7               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  1119  0011F0  0E02               	movlw	2
  1120  0011F2  EC13  F009         	call	_posicao_cursor_lcd
  1121                           
  1122                           ;main.c: 234: escreve_frase_ram_lcd(msg_dois);
  1123  0011F6  0EDD               	movlw	low mensagem_inicial@msg_dois
  1124  0011F8  0100               	movlb	0	; () banked
  1125  0011FA  6FC7               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  1126  0011FC  0E00               	movlw	high mensagem_inicial@msg_dois
  1127  0011FE  6FC8               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  1128  001200  EC03  F00A         	call	_escreve_frase_ram_lcd	;wreg free
  1129                           
  1130                           ;main.c: 235: _delay((unsigned long)((1000)*(48000000/4000.0)));
  1131  001204  0E3D               	movlw	61
  1132  001206  0100               	movlb	0	; () banked
  1133  001208  6FCB               	movwf	(??_mensagem_inicial+1)& (0+255),b
  1134  00120A  0EE1               	movlw	225
  1135  00120C  6FCA               	movwf	??_mensagem_inicial& (0+255),b
  1136  00120E  0E3F               	movlw	63
  1137  001210                     u11177:
  1138  001210  2EE8               	decfsz	wreg,f,c
  1139  001212  D7FE               	bra	u11177
  1140  001214  2FCA               	decfsz	??_mensagem_inicial& (0+255),f,b
  1141  001216  D7FC               	bra	u11177
  1142  001218  2FCB               	decfsz	(??_mensagem_inicial+1)& (0+255),f,b
  1143  00121A  D7FA               	bra	u11177
  1144  00121C  D000               	nop2	
  1145                           
  1146                           ;main.c: 236: escreve_cmd_lcd(0b00000001);
  1147  00121E  0E01               	movlw	1
  1148  001220  EC86  F008         	call	_escreve_cmd_lcd
  1149  001224  0012               	return		;funcret
  1150  001226                     __end_of_mensagem_inicial:
  1151                           	opt stack 0
  1152                           tblptru	equ	0xFF8
  1153                           tblptrh	equ	0xFF7
  1154                           tblptrl	equ	0xFF6
  1155                           tablat	equ	0xFF5
  1156                           postinc0	equ	0xFEE
  1157                           wreg	equ	0xFE8
  1158                           postdec1	equ	0xFE5
  1159                           fsr1h	equ	0xFE2
  1160                           fsr1l	equ	0xFE1
  1161                           postinc2	equ	0xFDE
  1162                           status	equ	0xFD8
  1163                           
  1164 ;; *************** function _posicao_cursor_lcd *****************
  1165 ;; Defined at:
  1166 ;;		line 271 in file "bibliotecas/display_lcd.c"
  1167 ;; Parameters:    Size  Location     Type
  1168 ;;  linha           1    wreg     unsigned char 
  1169 ;;  coluna          1    3[BANK0 ] unsigned char 
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;  linha           1    4[BANK0 ] unsigned char 
  1172 ;;  endereco        1    5[BANK0 ] unsigned char 
  1173 ;; Return value:  Size  Location     Type
  1174 ;;                  1    wreg      void 
  1175 ;; Registers used:
  1176 ;;		wreg, status,2, status,0, cstack
  1177 ;; Tracked objects:
  1178 ;;		On entry : 0/0
  1179 ;;		On exit  : 0/0
  1180 ;;		Unchanged: 0/0
  1181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1182 ;;      Params:         0       1       0       0       0       0       0       0       0
  1183 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1184 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1185 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1186 ;;Total ram usage:        3 bytes
  1187 ;; Hardware stack levels used:    1
  1188 ;; Hardware stack levels required when called:    5
  1189 ;; This function calls:
  1190 ;;		_endereco_cursor_lcd
  1191 ;; This function is called by:
  1192 ;;		_mensagem_inicial
  1193 ;;		_sdcard_init
  1194 ;;		_escrita_sdcard
  1195 ;;		_sdc_reset
  1196 ;;		_sdc_disk_initialize
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           	psect	text2
  1201  001226                     __ptext2:
  1202                           	opt stack 0
  1203  001226                     _posicao_cursor_lcd:
  1204                           	opt stack 24
  1205                           
  1206                           ;incstack = 0
  1207                           ;posicao_cursor_lcd@linha stored from wreg
  1208  001226  0100               	movlb	0	; () banked
  1209  001228  6FC8               	movwf	posicao_cursor_lcd@linha& (0+255),b
  1210                           
  1211                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
  1212  00122A  0E00               	movlw	0
  1213  00122C  0100               	movlb	0	; () banked
  1214  00122E  6FC9               	movwf	posicao_cursor_lcd@endereco& (0+255),b
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;display_lcd.c: 275: if(coluna <= 0x10U)
  1218  001230  0E11               	movlw	17
  1219  001232  61C7               	cpfslt	posicao_cursor_lcd@coluna& (0+255),b
  1220  001234  D034               	goto	l568
  1221  001236  D022               	goto	l569
  1222  001238                     l570:
  1223                           
  1224                           ; BSR set to: 0
  1225                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
  1226  001238  C0C7  F0C9         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
  1230  00123C  51C9               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
  1231  00123E  ECCB  F009         	call	_endereco_cursor_lcd
  1232                           
  1233                           ;display_lcd.c: 284: break;
  1234  001242  D02A               	goto	l571
  1235  001244                     
  1236                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
  1237  001244  0100               	movlb	0	; () banked
  1238  001246  51C7               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
  1239  001248  0F40               	addlw	64
  1240  00124A  6FC9               	movwf	posicao_cursor_lcd@endereco& (0+255),b
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
  1244  00124C  51C9               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
  1245  00124E  ECCB  F009         	call	_endereco_cursor_lcd
  1246                           
  1247                           ;display_lcd.c: 289: break;
  1248  001252  D022               	goto	l571
  1249  001254                     
  1250                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
  1251  001254  0100               	movlb	0	; () banked
  1252  001256  51C7               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
  1253  001258  0F14               	addlw	20
  1254  00125A  6FC9               	movwf	posicao_cursor_lcd@endereco& (0+255),b
  1255                           
  1256                           ; BSR set to: 0
  1257                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
  1258  00125C  51C9               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
  1259  00125E  ECCB  F009         	call	_endereco_cursor_lcd
  1260                           
  1261                           ;display_lcd.c: 294: break;
  1262  001262  D01A               	goto	l571
  1263  001264                     
  1264                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
  1265  001264  0100               	movlb	0	; () banked
  1266  001266  51C7               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
  1267  001268  0F54               	addlw	84
  1268  00126A  6FC9               	movwf	posicao_cursor_lcd@endereco& (0+255),b
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
  1272  00126C  51C9               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
  1273  00126E  ECCB  F009         	call	_endereco_cursor_lcd
  1274                           
  1275                           ;display_lcd.c: 299: break;
  1276  001272  D012               	goto	l571
  1277  001274                     
  1278                           ;display_lcd.c: 302: endereco = 0x00U;
  1279  001274  0E00               	movlw	0
  1280  001276  0100               	movlb	0	; () banked
  1281  001278  6FC9               	movwf	posicao_cursor_lcd@endereco& (0+255),b
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;display_lcd.c: 304: }
  1285                           
  1286                           ;display_lcd.c: 303: break;
  1287  00127A  D00E               	goto	l571
  1288  00127C                     l569:
  1289                           
  1290                           ; BSR set to: 0
  1291                           
  1292                           ; BSR set to: 0
  1293  00127C  51C8               	movf	posicao_cursor_lcd@linha& (0+255),w,b
  1294                           
  1295                           ; Switch size 1, requested type "space"
  1296                           ; Number of cases is 4, Range of values is 1 to 4
  1297                           ; switch strategies available:
  1298                           ; Name         Instructions Cycles
  1299                           ; simple_byte           13     7 (average)
  1300                           ;	Chosen strategy is simple_byte
  1301  00127E  0A01               	xorlw	1	; case 1
  1302  001280  B4D8               	btfsc	status,2,c
  1303  001282  D7DA               	goto	l570
  1304  001284  0A03               	xorlw	3	; case 2
  1305  001286  B4D8               	btfsc	status,2,c
  1306  001288  D7DD               	goto	l572
  1307  00128A  0A01               	xorlw	1	; case 3
  1308  00128C  B4D8               	btfsc	status,2,c
  1309  00128E  D7E2               	goto	l573
  1310  001290  0A07               	xorlw	7	; case 4
  1311  001292  B4D8               	btfsc	status,2,c
  1312  001294  D7E7               	goto	l574
  1313  001296  D7EE               	goto	l575
  1314  001298                     l571:
  1315                           
  1316                           ;display_lcd.c: 306: coluna++;
  1317                           
  1318                           ; BSR set to: 0
  1319  001298  0100               	movlb	0	; () banked
  1320  00129A  2BC7               	incf	posicao_cursor_lcd@coluna& (0+255),f,b
  1321                           
  1322                           ;display_lcd.c: 307: }
  1323  00129C  0012               	return	
  1324  00129E                     l568:
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;display_lcd.c: 308: else
  1328                           ;display_lcd.c: 309: {
  1329                           ;display_lcd.c: 310: endereco = 0x00U;
  1330                           
  1331                           ; BSR set to: 0
  1332  00129E  0E00               	movlw	0
  1333  0012A0  6FC9               	movwf	posicao_cursor_lcd@endereco& (0+255),b
  1334  0012A2  0012               	return	
  1335  0012A4                     __end_of_posicao_cursor_lcd:
  1336                           	opt stack 0
  1337                           tblptru	equ	0xFF8
  1338                           tblptrh	equ	0xFF7
  1339                           tblptrl	equ	0xFF6
  1340                           tablat	equ	0xFF5
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           postdec1	equ	0xFE5
  1344                           fsr1h	equ	0xFE2
  1345                           fsr1l	equ	0xFE1
  1346                           postinc2	equ	0xFDE
  1347                           status	equ	0xFD8
  1348                           
  1349 ;; *************** function _endereco_cursor_lcd *****************
  1350 ;; Defined at:
  1351 ;;		line 218 in file "bibliotecas/display_lcd.c"
  1352 ;; Parameters:    Size  Location     Type
  1353 ;;  endereco        1    wreg     unsigned char 
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;  endereco        1    2[BANK0 ] unsigned char 
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  1    wreg      void 
  1358 ;; Registers used:
  1359 ;;		wreg, status,2, status,0, cstack
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1365 ;;      Params:         0       0       0       0       0       0       0       0       0
  1366 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1367 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1368 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1369 ;;Total ram usage:        1 bytes
  1370 ;; Hardware stack levels used:    1
  1371 ;; Hardware stack levels required when called:    4
  1372 ;; This function calls:
  1373 ;;		_delay
  1374 ;; This function is called by:
  1375 ;;		_posicao_cursor_lcd
  1376 ;;		_cria_caractere_lcd
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           	psect	text3
  1381  001396                     __ptext3:
  1382                           	opt stack 0
  1383  001396                     _endereco_cursor_lcd:
  1384                           	opt stack 24
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;incstack = 0
  1388                           ;endereco_cursor_lcd@endereco stored from wreg
  1389  001396  0100               	movlb	0	; () banked
  1390  001398  6FC6               	movwf	endereco_cursor_lcd@endereco& (0+255),b
  1391                           
  1392                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
  1393  00139A  9483               	bcf	3971,2,c	;volatile
  1394                           
  1395                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
  1396  00139C  9283               	bcf	3971,1,c	;volatile
  1397                           
  1398                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
  1399  00139E  9083               	bcf	3971,0,c	;volatile
  1400                           
  1401                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
  1402  0013A0  8E83               	bsf	3971,7,c	;volatile
  1403                           
  1404                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
  1405  0013A2  0100               	movlb	0	; () banked
  1406  0013A4  A9C6               	btfss	endereco_cursor_lcd@endereco& (0+255),4,b
  1407  0013A6  D002               	goto	l551
  1408                           
  1409                           ; BSR set to: 0
  1410  0013A8  8883               	bsf	3971,4,c	;volatile
  1411  0013AA  D001               	goto	l552
  1412  0013AC                     l551:
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
  1416  0013AC  9883               	bcf	3971,4,c	;volatile
  1417  0013AE                     l552:
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
  1421                           
  1422                           ; BSR set to: 0
  1423  0013AE  ABC6               	btfss	endereco_cursor_lcd@endereco& (0+255),5,b
  1424  0013B0  D002               	goto	l553
  1425                           
  1426                           ; BSR set to: 0
  1427  0013B2  8A83               	bsf	3971,5,c	;volatile
  1428  0013B4  D001               	goto	l554
  1429  0013B6                     l553:
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
  1433  0013B6  9A83               	bcf	3971,5,c	;volatile
  1434  0013B8                     l554:
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
  1438                           
  1439                           ; BSR set to: 0
  1440  0013B8  ADC6               	btfss	endereco_cursor_lcd@endereco& (0+255),6,b
  1441  0013BA  D002               	goto	l555
  1442                           
  1443                           ; BSR set to: 0
  1444  0013BC  8C83               	bsf	3971,6,c	;volatile
  1445  0013BE  D001               	goto	l556
  1446  0013C0                     l555:
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
  1450  0013C0  9C83               	bcf	3971,6,c	;volatile
  1451  0013C2                     l556:
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
  1455  0013C2  8083               	bsf	3971,0,c	;volatile
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;display_lcd.c: 236: delay();
  1459  0013C4  ECCF  F00A         	call	_delay	;wreg free
  1460                           
  1461                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
  1462  0013C8  9083               	bcf	3971,0,c	;volatile
  1463                           
  1464                           ;display_lcd.c: 238: delay();
  1465  0013CA  ECCF  F00A         	call	_delay	;wreg free
  1466                           
  1467                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
  1468  0013CE  0100               	movlb	0	; () banked
  1469  0013D0  A1C6               	btfss	endereco_cursor_lcd@endereco& (0+255),0,b
  1470  0013D2  D002               	goto	l557
  1471                           
  1472                           ; BSR set to: 0
  1473  0013D4  8883               	bsf	3971,4,c	;volatile
  1474  0013D6  D001               	goto	l558
  1475  0013D8                     l557:
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
  1479  0013D8  9883               	bcf	3971,4,c	;volatile
  1480  0013DA                     l558:
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
  1484  0013DA  A3C6               	btfss	endereco_cursor_lcd@endereco& (0+255),1,b
  1485  0013DC  D002               	goto	l559
  1486                           
  1487                           ; BSR set to: 0
  1488  0013DE  8A83               	bsf	3971,5,c	;volatile
  1489  0013E0  D001               	goto	l560
  1490  0013E2                     l559:
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
  1494  0013E2  9A83               	bcf	3971,5,c	;volatile
  1495  0013E4                     l560:
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
  1499  0013E4  A5C6               	btfss	endereco_cursor_lcd@endereco& (0+255),2,b
  1500  0013E6  D002               	goto	l561
  1501                           
  1502                           ; BSR set to: 0
  1503  0013E8  8C83               	bsf	3971,6,c	;volatile
  1504  0013EA  D001               	goto	l562
  1505  0013EC                     l561:
  1506                           
  1507                           ; BSR set to: 0
  1508                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
  1509  0013EC  9C83               	bcf	3971,6,c	;volatile
  1510  0013EE                     l562:
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
  1514  0013EE  A7C6               	btfss	endereco_cursor_lcd@endereco& (0+255),3,b
  1515  0013F0  D002               	goto	l563
  1516                           
  1517                           ; BSR set to: 0
  1518  0013F2  8E83               	bsf	3971,7,c	;volatile
  1519  0013F4  D001               	goto	l564
  1520  0013F6                     l563:
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
  1524  0013F6  9E83               	bcf	3971,7,c	;volatile
  1525  0013F8                     l564:
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
  1529  0013F8  8083               	bsf	3971,0,c	;volatile
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;display_lcd.c: 252: delay();
  1533  0013FA  ECCF  F00A         	call	_delay	;wreg free
  1534                           
  1535                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
  1536  0013FE  9083               	bcf	3971,0,c	;volatile
  1537                           
  1538                           ;display_lcd.c: 254: delay();
  1539  001400  ECCF  F00A         	call	_delay	;wreg free
  1540  001404  0012               	return		;funcret
  1541  001406                     __end_of_endereco_cursor_lcd:
  1542                           	opt stack 0
  1543                           tblptru	equ	0xFF8
  1544                           tblptrh	equ	0xFF7
  1545                           tblptrl	equ	0xFF6
  1546                           tablat	equ	0xFF5
  1547                           postinc0	equ	0xFEE
  1548                           wreg	equ	0xFE8
  1549                           postdec1	equ	0xFE5
  1550                           fsr1h	equ	0xFE2
  1551                           fsr1l	equ	0xFE1
  1552                           postinc2	equ	0xFDE
  1553                           status	equ	0xFD8
  1554                           
  1555 ;; *************** function _escreve_frase_ram_lcd *****************
  1556 ;; Defined at:
  1557 ;;		line 445 in file "bibliotecas/display_lcd.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  buffer          2    3[BANK0 ] PTR unsigned char 
  1560 ;;		 -> escreve_inteiro_lcd@texto(7), STR_13(11), STR_12(10), STR_11(16), 
  1561 ;;		 -> STR_10(11), string_dado(44), STR_8(9), STR_7(10), 
  1562 ;;		 -> STR_6(10), STR_5(14), STR_4(21), STR_3(15), 
  1563 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;		None
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  1    wreg      void 
  1568 ;; Registers used:
  1569 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1575 ;;      Params:         0       2       0       0       0       0       0       0       0
  1576 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1577 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1578 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1579 ;;Total ram usage:        2 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; Hardware stack levels required when called:    5
  1582 ;; This function calls:
  1583 ;;		_escreve_caractere_lcd
  1584 ;; This function is called by:
  1585 ;;		_mensagem_inicial
  1586 ;;		_sdcard_init
  1587 ;;		_escrita_sdcard
  1588 ;;		_sdc_reset
  1589 ;;		_sdc_disk_initialize
  1590 ;;		_escreve_inteiro_lcd
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           	psect	text4
  1595  001406                     __ptext4:
  1596                           	opt stack 0
  1597  001406                     _escreve_frase_ram_lcd:
  1598                           	opt stack 24
  1599                           
  1600                           ;display_lcd.c: 447: while(*buffer)
  1601                           
  1602                           ;incstack = 0
  1603  001406  D015               	goto	l613
  1604  001408                     
  1605                           ;display_lcd.c: 448: {
  1606                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
  1607  001408  C0C7  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
  1608  00140C  C0C8  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
  1609  001410  6AF8               	clrf	tblptru,c
  1610  001412  0E07               	movlw	(high __ramtop+-1)
  1611  001414  64F7               	cpfsgt	tblptrh,c
  1612  001416  D003               	bra	u10147
  1613  001418  0008               	tblrd		*
  1614  00141A  50F5               	movf	tablat,w,c
  1615  00141C  D005               	bra	u10140
  1616  00141E                     u10147:
  1617  00141E  CFF6 FFE9          	movff	tblptrl,fsr0l
  1618  001422  CFF7 FFEA          	movff	tblptrh,fsr0h
  1619  001426  50EF               	movf	indf0,w,c
  1620  001428                     u10140:
  1621  001428  EC8F  F009         	call	_escreve_caractere_lcd
  1622                           
  1623                           ;display_lcd.c: 450: buffer++;
  1624  00142C  0100               	movlb	0	; () banked
  1625  00142E  4BC7               	infsnz	escreve_frase_ram_lcd@buffer& (0+255),f,b
  1626  001430  2BC8               	incf	(escreve_frase_ram_lcd@buffer+1)& (0+255),f,b
  1627  001432                     l613:
  1628                           
  1629                           ; BSR set to: 0
  1630  001432  C0C7  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
  1631  001436  C0C8  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
  1632  00143A  6AF8               	clrf	tblptru,c
  1633  00143C  0E07               	movlw	(high __ramtop+-1)
  1634  00143E  64F7               	cpfsgt	tblptrh,c
  1635  001440  D003               	bra	u10157
  1636  001442  0008               	tblrd		*
  1637  001444  50F5               	movf	tablat,w,c
  1638  001446  D005               	bra	u10150
  1639  001448                     u10157:
  1640  001448  CFF6 FFE9          	movff	tblptrl,fsr0l
  1641  00144C  CFF7 FFEA          	movff	tblptrh,fsr0h
  1642  001450  50EF               	movf	indf0,w,c
  1643  001452                     u10150:
  1644  001452  0900               	iorlw	0
  1645  001454  B4D8               	btfsc	status,2,c
  1646  001456  0012               	return	
  1647  001458  D7D7               	goto	l614
  1648  00145A                     __end_of_escreve_frase_ram_lcd:
  1649                           	opt stack 0
  1650                           tblptru	equ	0xFF8
  1651                           tblptrh	equ	0xFF7
  1652                           tblptrl	equ	0xFF6
  1653                           tablat	equ	0xFF5
  1654                           indf0	equ	0xFEF
  1655                           postinc0	equ	0xFEE
  1656                           fsr0h	equ	0xFEA
  1657                           fsr0l	equ	0xFE9
  1658                           wreg	equ	0xFE8
  1659                           postdec1	equ	0xFE5
  1660                           fsr1h	equ	0xFE2
  1661                           fsr1l	equ	0xFE1
  1662                           postinc2	equ	0xFDE
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _escreve_caractere_lcd *****************
  1666 ;; Defined at:
  1667 ;;		line 323 in file "bibliotecas/display_lcd.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  data            1    wreg     unsigned char 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  data            1    2[BANK0 ] unsigned char 
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  1    wreg      void 
  1674 ;; Registers used:
  1675 ;;		wreg, status,2, status,0, cstack
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1681 ;;      Params:         0       0       0       0       0       0       0       0       0
  1682 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1683 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1684 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1685 ;;Total ram usage:        1 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; Hardware stack levels required when called:    4
  1688 ;; This function calls:
  1689 ;;		_delay
  1690 ;; This function is called by:
  1691 ;;		_escreve_frase_ram_lcd
  1692 ;;		_escreve_float_lcd
  1693 ;;		_escreve_frase_lcd
  1694 ;;		_cria_caractere_lcd
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text5
  1699  00131E                     __ptext5:
  1700                           	opt stack 0
  1701  00131E                     _escreve_caractere_lcd:
  1702                           	opt stack 24
  1703                           
  1704                           ;incstack = 0
  1705                           ;escreve_caractere_lcd@data stored from wreg
  1706  00131E  0100               	movlb	0	; () banked
  1707  001320  6FC6               	movwf	escreve_caractere_lcd@data& (0+255),b
  1708                           
  1709                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
  1710  001322  9483               	bcf	3971,2,c	;volatile
  1711                           
  1712                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
  1713  001324  8283               	bsf	3971,1,c	;volatile
  1714                           
  1715                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
  1716  001326  9083               	bcf	3971,0,c	;volatile
  1717                           
  1718                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
  1719  001328  0100               	movlb	0	; () banked
  1720  00132A  A9C6               	btfss	escreve_caractere_lcd@data& (0+255),4,b
  1721  00132C  D002               	goto	l580
  1722                           
  1723                           ; BSR set to: 0
  1724  00132E  8883               	bsf	3971,4,c	;volatile
  1725  001330  D001               	goto	l581
  1726  001332                     l580:
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
  1730  001332  9883               	bcf	3971,4,c	;volatile
  1731  001334                     l581:
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
  1735                           
  1736                           ; BSR set to: 0
  1737  001334  ABC6               	btfss	escreve_caractere_lcd@data& (0+255),5,b
  1738  001336  D002               	goto	l582
  1739                           
  1740                           ; BSR set to: 0
  1741  001338  8A83               	bsf	3971,5,c	;volatile
  1742  00133A  D001               	goto	l583
  1743  00133C                     l582:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
  1747  00133C  9A83               	bcf	3971,5,c	;volatile
  1748  00133E                     l583:
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
  1752                           
  1753                           ; BSR set to: 0
  1754  00133E  ADC6               	btfss	escreve_caractere_lcd@data& (0+255),6,b
  1755  001340  D002               	goto	l584
  1756                           
  1757                           ; BSR set to: 0
  1758  001342  8C83               	bsf	3971,6,c	;volatile
  1759  001344  D001               	goto	l585
  1760  001346                     l584:
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
  1764  001346  9C83               	bcf	3971,6,c	;volatile
  1765  001348                     l585:
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
  1769                           
  1770                           ; BSR set to: 0
  1771  001348  AFC6               	btfss	escreve_caractere_lcd@data& (0+255),7,b
  1772  00134A  D002               	goto	l586
  1773                           
  1774                           ; BSR set to: 0
  1775  00134C  8E83               	bsf	3971,7,c	;volatile
  1776  00134E  D001               	goto	l587
  1777  001350                     l586:
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
  1781  001350  9E83               	bcf	3971,7,c	;volatile
  1782  001352                     l587:
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
  1786  001352  8083               	bsf	3971,0,c	;volatile
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;display_lcd.c: 342: delay();
  1790  001354  ECCF  F00A         	call	_delay	;wreg free
  1791                           
  1792                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
  1793  001358  9083               	bcf	3971,0,c	;volatile
  1794                           
  1795                           ;display_lcd.c: 344: delay();
  1796  00135A  ECCF  F00A         	call	_delay	;wreg free
  1797                           
  1798                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
  1799  00135E  0100               	movlb	0	; () banked
  1800  001360  A1C6               	btfss	escreve_caractere_lcd@data& (0+255),0,b
  1801  001362  D002               	goto	l588
  1802                           
  1803                           ; BSR set to: 0
  1804  001364  8883               	bsf	3971,4,c	;volatile
  1805  001366  D001               	goto	l589
  1806  001368                     l588:
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
  1810  001368  9883               	bcf	3971,4,c	;volatile
  1811  00136A                     l589:
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
  1815  00136A  A3C6               	btfss	escreve_caractere_lcd@data& (0+255),1,b
  1816  00136C  D002               	goto	l590
  1817                           
  1818                           ; BSR set to: 0
  1819  00136E  8A83               	bsf	3971,5,c	;volatile
  1820  001370  D001               	goto	l591
  1821  001372                     l590:
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
  1825  001372  9A83               	bcf	3971,5,c	;volatile
  1826  001374                     l591:
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
  1830  001374  A5C6               	btfss	escreve_caractere_lcd@data& (0+255),2,b
  1831  001376  D002               	goto	l592
  1832                           
  1833                           ; BSR set to: 0
  1834  001378  8C83               	bsf	3971,6,c	;volatile
  1835  00137A  D001               	goto	l593
  1836  00137C                     l592:
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
  1840  00137C  9C83               	bcf	3971,6,c	;volatile
  1841  00137E                     l593:
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
  1845  00137E  A7C6               	btfss	escreve_caractere_lcd@data& (0+255),3,b
  1846  001380  D002               	goto	l594
  1847                           
  1848                           ; BSR set to: 0
  1849  001382  8E83               	bsf	3971,7,c	;volatile
  1850  001384  D001               	goto	l595
  1851  001386                     l594:
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
  1855  001386  9E83               	bcf	3971,7,c	;volatile
  1856  001388                     l595:
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
  1860  001388  8083               	bsf	3971,0,c	;volatile
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;display_lcd.c: 359: delay();
  1864  00138A  ECCF  F00A         	call	_delay	;wreg free
  1865                           
  1866                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
  1867  00138E  9083               	bcf	3971,0,c	;volatile
  1868                           
  1869                           ;display_lcd.c: 361: delay();
  1870  001390  ECCF  F00A         	call	_delay	;wreg free
  1871  001394  0012               	return		;funcret
  1872  001396                     __end_of_escreve_caractere_lcd:
  1873                           	opt stack 0
  1874                           tblptru	equ	0xFF8
  1875                           tblptrh	equ	0xFF7
  1876                           tblptrl	equ	0xFF6
  1877                           tablat	equ	0xFF5
  1878                           indf0	equ	0xFEF
  1879                           postinc0	equ	0xFEE
  1880                           fsr0h	equ	0xFEA
  1881                           fsr0l	equ	0xFE9
  1882                           wreg	equ	0xFE8
  1883                           postdec1	equ	0xFE5
  1884                           fsr1h	equ	0xFE2
  1885                           fsr1l	equ	0xFE1
  1886                           postinc2	equ	0xFDE
  1887                           status	equ	0xFD8
  1888                           
  1889 ;; *************** function _init_lcd *****************
  1890 ;; Defined at:
  1891 ;;		line 71 in file "bibliotecas/display_lcd.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2, status,0, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1905 ;;      Params:         0       0       0       0       0       0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1907 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1908 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1909 ;;Total ram usage:        1 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    5
  1912 ;; This function calls:
  1913 ;;		_delay
  1914 ;;		_escreve_cmd_lcd
  1915 ;; This function is called by:
  1916 ;;		_main
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           	psect	text6
  1921  000FD6                     __ptext6:
  1922                           	opt stack 0
  1923  000FD6                     _init_lcd:
  1924                           	opt stack 25
  1925                           
  1926                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  1927                           
  1928                           ;incstack = 0
  1929  000FD6  9495               	bcf	3989,2,c	;volatile
  1930                           
  1931                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  1932  000FD8  9295               	bcf	3989,1,c	;volatile
  1933                           
  1934                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  1935  000FDA  9095               	bcf	3989,0,c	;volatile
  1936                           
  1937                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  1938  000FDC  9895               	bcf	3989,4,c	;volatile
  1939                           
  1940                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  1941  000FDE  9A95               	bcf	3989,5,c	;volatile
  1942                           
  1943                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  1944  000FE0  9C95               	bcf	3989,6,c	;volatile
  1945                           
  1946                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  1947  000FE2  9E95               	bcf	3989,7,c	;volatile
  1948                           
  1949                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  1950  000FE4  9483               	bcf	3971,2,c	;volatile
  1951                           
  1952                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  1953  000FE6  9283               	bcf	3971,1,c	;volatile
  1954                           
  1955                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  1956  000FE8  9083               	bcf	3971,0,c	;volatile
  1957                           
  1958                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  1959  000FEA  9E83               	bcf	3971,7,c	;volatile
  1960                           
  1961                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  1962  000FEC  9C83               	bcf	3971,6,c	;volatile
  1963                           
  1964                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  1965  000FEE  8A83               	bsf	3971,5,c	;volatile
  1966                           
  1967                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  1968  000FF0  8883               	bsf	3971,4,c	;volatile
  1969                           
  1970                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  1971  000FF2  0EEA               	movlw	234
  1972  000FF4  0100               	movlb	0	; () banked
  1973  000FF6  6FC7               	movwf	??_init_lcd& (0+255),b
  1974  000FF8  0EC3               	movlw	195
  1975  000FFA                     u11187:
  1976  000FFA  2EE8               	decfsz	wreg,f,c
  1977  000FFC  D7FE               	bra	u11187
  1978  000FFE  2FC7               	decfsz	??_init_lcd& (0+255),f,b
  1979  001000  D7FC               	bra	u11187
  1980                           
  1981                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  1982  001002  8083               	bsf	3971,0,c	;volatile
  1983                           
  1984                           ;display_lcd.c: 108: delay();
  1985  001004  ECCF  F00A         	call	_delay	;wreg free
  1986                           
  1987                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  1988  001008  9083               	bcf	3971,0,c	;volatile
  1989                           
  1990                           ;display_lcd.c: 110: delay();
  1991  00100A  ECCF  F00A         	call	_delay	;wreg free
  1992                           
  1993                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  1994  00100E  0E4E               	movlw	78
  1995  001010  0100               	movlb	0	; () banked
  1996  001012  6FC7               	movwf	??_init_lcd& (0+255),b
  1997  001014  0EEB               	movlw	235
  1998  001016                     u11197:
  1999  001016  2EE8               	decfsz	wreg,f,c
  2000  001018  D7FE               	bra	u11197
  2001  00101A  2FC7               	decfsz	??_init_lcd& (0+255),f,b
  2002  00101C  D7FC               	bra	u11197
  2003                           
  2004                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2005  00101E  8083               	bsf	3971,0,c	;volatile
  2006                           
  2007                           ;display_lcd.c: 119: delay();
  2008  001020  ECCF  F00A         	call	_delay	;wreg free
  2009                           
  2010                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2011  001024  9083               	bcf	3971,0,c	;volatile
  2012                           
  2013                           ;display_lcd.c: 121: delay();
  2014  001026  ECCF  F00A         	call	_delay	;wreg free
  2015                           
  2016                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2017  00102A  0E4E               	movlw	78
  2018  00102C  0100               	movlb	0	; () banked
  2019  00102E  6FC7               	movwf	??_init_lcd& (0+255),b
  2020  001030  0EEB               	movlw	235
  2021  001032                     u11207:
  2022  001032  2EE8               	decfsz	wreg,f,c
  2023  001034  D7FE               	bra	u11207
  2024  001036  2FC7               	decfsz	??_init_lcd& (0+255),f,b
  2025  001038  D7FC               	bra	u11207
  2026                           
  2027                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2028  00103A  8083               	bsf	3971,0,c	;volatile
  2029                           
  2030                           ;display_lcd.c: 130: delay();
  2031  00103C  ECCF  F00A         	call	_delay	;wreg free
  2032                           
  2033                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2034  001040  9083               	bcf	3971,0,c	;volatile
  2035                           
  2036                           ;display_lcd.c: 132: delay();
  2037  001042  ECCF  F00A         	call	_delay	;wreg free
  2038                           
  2039                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2040  001046  9E83               	bcf	3971,7,c	;volatile
  2041                           
  2042                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2043  001048  9C83               	bcf	3971,6,c	;volatile
  2044                           
  2045                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2046  00104A  8A83               	bsf	3971,5,c	;volatile
  2047                           
  2048                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2049  00104C  9883               	bcf	3971,4,c	;volatile
  2050                           
  2051                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2052  00104E  8083               	bsf	3971,0,c	;volatile
  2053                           
  2054                           ;display_lcd.c: 143: delay();
  2055  001050  ECCF  F00A         	call	_delay	;wreg free
  2056                           
  2057                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2058  001054  9083               	bcf	3971,0,c	;volatile
  2059                           
  2060                           ;display_lcd.c: 145: delay();
  2061  001056  ECCF  F00A         	call	_delay	;wreg free
  2062                           
  2063                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2064  00105A  0E28               	movlw	40
  2065  00105C  EC86  F008         	call	_escreve_cmd_lcd
  2066                           
  2067                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2068  001060  0E06               	movlw	6
  2069  001062  EC86  F008         	call	_escreve_cmd_lcd
  2070                           
  2071                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2072  001066  0E0E               	movlw	14
  2073  001068  EC86  F008         	call	_escreve_cmd_lcd
  2074                           
  2075                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2076  00106C  0E01               	movlw	1
  2077  00106E  EC86  F008         	call	_escreve_cmd_lcd
  2078  001072  0012               	return		;funcret
  2079  001074                     __end_of_init_lcd:
  2080                           	opt stack 0
  2081                           tblptru	equ	0xFF8
  2082                           tblptrh	equ	0xFF7
  2083                           tblptrl	equ	0xFF6
  2084                           tablat	equ	0xFF5
  2085                           indf0	equ	0xFEF
  2086                           postinc0	equ	0xFEE
  2087                           fsr0h	equ	0xFEA
  2088                           fsr0l	equ	0xFE9
  2089                           wreg	equ	0xFE8
  2090                           postdec1	equ	0xFE5
  2091                           fsr1h	equ	0xFE2
  2092                           fsr1l	equ	0xFE1
  2093                           postinc2	equ	0xFDE
  2094                           status	equ	0xFD8
  2095                           
  2096 ;; *************** function _escreve_cmd_lcd *****************
  2097 ;; Defined at:
  2098 ;;		line 162 in file "bibliotecas/display_lcd.c"
  2099 ;; Parameters:    Size  Location     Type
  2100 ;;  comando         1    wreg     unsigned char 
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;  comando         1    2[BANK0 ] unsigned char 
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      void 
  2105 ;; Registers used:
  2106 ;;		wreg, status,2, status,0, cstack
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2112 ;;      Params:         0       0       0       0       0       0       0       0       0
  2113 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2115 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2116 ;;Total ram usage:        1 bytes
  2117 ;; Hardware stack levels used:    1
  2118 ;; Hardware stack levels required when called:    4
  2119 ;; This function calls:
  2120 ;;		_delay
  2121 ;; This function is called by:
  2122 ;;		_mensagem_inicial
  2123 ;;		_init_lcd
  2124 ;;		_cria_caractere_lcd
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           	psect	text7
  2129  00110C                     __ptext7:
  2130                           	opt stack 0
  2131  00110C                     _escreve_cmd_lcd:
  2132                           	opt stack 25
  2133                           
  2134                           ;incstack = 0
  2135                           ;escreve_cmd_lcd@comando stored from wreg
  2136  00110C  0100               	movlb	0	; () banked
  2137  00110E  6FC6               	movwf	escreve_cmd_lcd@comando& (0+255),b
  2138                           
  2139                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  2140  001110  9483               	bcf	3971,2,c	;volatile
  2141                           
  2142                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  2143  001112  9283               	bcf	3971,1,c	;volatile
  2144                           
  2145                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  2146  001114  9083               	bcf	3971,0,c	;volatile
  2147                           
  2148                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  2149  001116  0100               	movlb	0	; () banked
  2150  001118  A9C6               	btfss	escreve_cmd_lcd@comando& (0+255),4,b
  2151  00111A  D002               	goto	l529
  2152                           
  2153                           ; BSR set to: 0
  2154  00111C  8883               	bsf	3971,4,c	;volatile
  2155  00111E  D001               	goto	l530
  2156  001120                     l529:
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  2160  001120  9883               	bcf	3971,4,c	;volatile
  2161  001122                     l530:
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  2165                           
  2166                           ; BSR set to: 0
  2167  001122  ABC6               	btfss	escreve_cmd_lcd@comando& (0+255),5,b
  2168  001124  D002               	goto	l531
  2169                           
  2170                           ; BSR set to: 0
  2171  001126  8A83               	bsf	3971,5,c	;volatile
  2172  001128  D001               	goto	l532
  2173  00112A                     l531:
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  2177  00112A  9A83               	bcf	3971,5,c	;volatile
  2178  00112C                     l532:
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  2182                           
  2183                           ; BSR set to: 0
  2184  00112C  ADC6               	btfss	escreve_cmd_lcd@comando& (0+255),6,b
  2185  00112E  D002               	goto	l533
  2186                           
  2187                           ; BSR set to: 0
  2188  001130  8C83               	bsf	3971,6,c	;volatile
  2189  001132  D001               	goto	l534
  2190  001134                     l533:
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  2194  001134  9C83               	bcf	3971,6,c	;volatile
  2195  001136                     l534:
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  2199                           
  2200                           ; BSR set to: 0
  2201  001136  AFC6               	btfss	escreve_cmd_lcd@comando& (0+255),7,b
  2202  001138  D002               	goto	l535
  2203                           
  2204                           ; BSR set to: 0
  2205  00113A  8E83               	bsf	3971,7,c	;volatile
  2206  00113C  D001               	goto	l536
  2207  00113E                     l535:
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  2211  00113E  9E83               	bcf	3971,7,c	;volatile
  2212  001140                     l536:
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  2216  001140  8083               	bsf	3971,0,c	;volatile
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;display_lcd.c: 181: delay();
  2220  001142  ECCF  F00A         	call	_delay	;wreg free
  2221                           
  2222                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  2223  001146  9083               	bcf	3971,0,c	;volatile
  2224                           
  2225                           ;display_lcd.c: 183: delay();
  2226  001148  ECCF  F00A         	call	_delay	;wreg free
  2227                           
  2228                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  2229  00114C  0100               	movlb	0	; () banked
  2230  00114E  A1C6               	btfss	escreve_cmd_lcd@comando& (0+255),0,b
  2231  001150  D002               	goto	l537
  2232                           
  2233                           ; BSR set to: 0
  2234  001152  8883               	bsf	3971,4,c	;volatile
  2235  001154  D001               	goto	l538
  2236  001156                     l537:
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  2240  001156  9883               	bcf	3971,4,c	;volatile
  2241  001158                     l538:
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  2245  001158  A3C6               	btfss	escreve_cmd_lcd@comando& (0+255),1,b
  2246  00115A  D002               	goto	l539
  2247                           
  2248                           ; BSR set to: 0
  2249  00115C  8A83               	bsf	3971,5,c	;volatile
  2250  00115E  D001               	goto	l540
  2251  001160                     l539:
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  2255  001160  9A83               	bcf	3971,5,c	;volatile
  2256  001162                     l540:
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  2260  001162  A5C6               	btfss	escreve_cmd_lcd@comando& (0+255),2,b
  2261  001164  D002               	goto	l541
  2262                           
  2263                           ; BSR set to: 0
  2264  001166  8C83               	bsf	3971,6,c	;volatile
  2265  001168  D001               	goto	l542
  2266  00116A                     l541:
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  2270  00116A  9C83               	bcf	3971,6,c	;volatile
  2271  00116C                     l542:
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  2275  00116C  A7C6               	btfss	escreve_cmd_lcd@comando& (0+255),3,b
  2276  00116E  D002               	goto	l543
  2277                           
  2278                           ; BSR set to: 0
  2279  001170  8E83               	bsf	3971,7,c	;volatile
  2280  001172  D001               	goto	l544
  2281  001174                     l543:
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  2285  001174  9E83               	bcf	3971,7,c	;volatile
  2286  001176                     l544:
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  2290  001176  8083               	bsf	3971,0,c	;volatile
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;display_lcd.c: 197: delay();
  2294  001178  ECCF  F00A         	call	_delay	;wreg free
  2295                           
  2296                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  2297  00117C  9083               	bcf	3971,0,c	;volatile
  2298                           
  2299                           ;display_lcd.c: 199: delay();
  2300  00117E  ECCF  F00A         	call	_delay	;wreg free
  2301                           
  2302                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  2303  001182  0100               	movlb	0	; () banked
  2304  001184  05C6               	decf	escreve_cmd_lcd@comando& (0+255),w,b
  2305  001186  B4D8               	btfsc	status,2,c
  2306  001188  D008               	goto	u10270
  2307                           
  2308                           ; BSR set to: 0
  2309  00118A  0E02               	movlw	2
  2310  00118C  19C6               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  2311  00118E  B4D8               	btfsc	status,2,c
  2312  001190  D004               	goto	u10270
  2313                           
  2314                           ; BSR set to: 0
  2315  001192  0E03               	movlw	3
  2316  001194  19C6               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  2317  001196  A4D8               	btfss	status,2,c
  2318  001198  0012               	return	
  2319  00119A                     u10270:
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;display_lcd.c: 205: { delay(); }
  2323                           
  2324                           ; BSR set to: 0
  2325  00119A  ECCF  F00A         	call	_delay	;wreg free
  2326  00119E  0012               	return	
  2327  0011A0                     __end_of_escreve_cmd_lcd:
  2328                           	opt stack 0
  2329                           tblptru	equ	0xFF8
  2330                           tblptrh	equ	0xFF7
  2331                           tblptrl	equ	0xFF6
  2332                           tablat	equ	0xFF5
  2333                           indf0	equ	0xFEF
  2334                           postinc0	equ	0xFEE
  2335                           fsr0h	equ	0xFEA
  2336                           fsr0l	equ	0xFE9
  2337                           wreg	equ	0xFE8
  2338                           postdec1	equ	0xFE5
  2339                           fsr1h	equ	0xFE2
  2340                           fsr1l	equ	0xFE1
  2341                           postinc2	equ	0xFDE
  2342                           status	equ	0xFD8
  2343                           
  2344 ;; *************** function _delay *****************
  2345 ;; Defined at:
  2346 ;;		line 45 in file "bibliotecas/display_lcd.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;		None
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;  contador_int    1    1[BANK0 ] unsigned char 
  2351 ;;  contador_ext    1    0[BANK0 ] unsigned char 
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, status,2, status,0
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2361 ;;      Params:         0       0       0       0       0       0       0       0       0
  2362 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2363 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2364 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2365 ;;Total ram usage:        2 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; Hardware stack levels required when called:    3
  2368 ;; This function calls:
  2369 ;;		Nothing
  2370 ;; This function is called by:
  2371 ;;		_init_lcd
  2372 ;;		_escreve_cmd_lcd
  2373 ;;		_endereco_cursor_lcd
  2374 ;;		_escreve_caractere_lcd
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           	psect	text8
  2379  00159E                     __ptext8:
  2380                           	opt stack 0
  2381  00159E                     _delay:
  2382                           	opt stack 24
  2383                           
  2384                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
  2385                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
  2386                           
  2387                           ;incstack = 0
  2388  00159E  0E00               	movlw	0
  2389  0015A0  0100               	movlb	0	; () banked
  2390  0015A2  6FC4               	movwf	delay@contador_ext& (0+255),b
  2391  0015A4                     l8166:
  2392                           
  2393                           ; BSR set to: 0
  2394  0015A4  0E63               	movlw	99
  2395  0015A6  65C4               	cpfsgt	delay@contador_ext& (0+255),b
  2396  0015A8  D001               	goto	l519
  2397  0015AA  0012               	return	
  2398  0015AC                     l519:
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;display_lcd.c: 50: {
  2402                           ;display_lcd.c: 51: __nop();
  2403  0015AC  F000               	nop	
  2404                           
  2405                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
  2406  0015AE  0E00               	movlw	0
  2407  0015B0  0100               	movlb	0	; () banked
  2408  0015B2  6FC5               	movwf	delay@contador_int& (0+255),b
  2409  0015B4                     l8172:
  2410                           
  2411                           ; BSR set to: 0
  2412  0015B4  0E31               	movlw	49
  2413  0015B6  65C5               	cpfsgt	delay@contador_int& (0+255),b
  2414  0015B8  D001               	goto	l521
  2415  0015BA  D004               	goto	u9660
  2416  0015BC                     l521:
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;display_lcd.c: 53: {
  2420                           ;display_lcd.c: 54: __nop();
  2421  0015BC  F000               	nop	
  2422  0015BE  0100               	movlb	0	; () banked
  2423  0015C0  2BC5               	incf	delay@contador_int& (0+255),f,b
  2424  0015C2  D7F8               	goto	l8172
  2425  0015C4                     u9660:
  2426                           
  2427                           ; BSR set to: 0
  2428                           
  2429                           ; BSR set to: 0
  2430  0015C4  2BC4               	incf	delay@contador_ext& (0+255),f,b
  2431  0015C6  D7EE               	goto	l8166
  2432  0015C8                     __end_of_delay:
  2433                           	opt stack 0
  2434                           tblptru	equ	0xFF8
  2435                           tblptrh	equ	0xFF7
  2436                           tblptrl	equ	0xFF6
  2437                           tablat	equ	0xFF5
  2438                           indf0	equ	0xFEF
  2439                           postinc0	equ	0xFEE
  2440                           fsr0h	equ	0xFEA
  2441                           fsr0l	equ	0xFE9
  2442                           wreg	equ	0xFE8
  2443                           postdec1	equ	0xFE5
  2444                           fsr1h	equ	0xFE2
  2445                           fsr1l	equ	0xFE1
  2446                           postinc2	equ	0xFDE
  2447                           status	equ	0xFD8
  2448                           
  2449 ;; *************** function _init_hardware *****************
  2450 ;; Defined at:
  2451 ;;		line 55 in file "bibliotecas/hardware.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		wreg, status,2, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2465 ;;      Params:         0       0       0       0       0       0       0       0       0
  2466 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2467 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2468 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2469 ;;Total ram usage:        0 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    5
  2472 ;; This function calls:
  2473 ;;		_config_timer_dois
  2474 ;;		_config_timer_zero
  2475 ;;		_init_interrupt
  2476 ;;		_init_oscilador
  2477 ;;		_init_ports
  2478 ;; This function is called by:
  2479 ;;		_main
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           	psect	text9
  2484  00164A                     __ptext9:
  2485                           	opt stack 0
  2486  00164A                     _init_hardware:
  2487                           	opt stack 25
  2488                           
  2489                           ;hardware.c: 58: init_oscilador();
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;incstack = 0
  2493  00164A  EC6A  F00B         	call	_init_oscilador	;wreg free
  2494                           
  2495                           ;hardware.c: 61: init_ports();
  2496  00164E  EC09  F00B         	call	_init_ports	;wreg free
  2497                           
  2498                           ;hardware.c: 64: config_timer_zero();
  2499  001652  EC17  F00B         	call	_config_timer_zero	;wreg free
  2500                           
  2501                           ;hardware.c: 67: config_timer_dois();
  2502  001656  EC63  F00B         	call	_config_timer_dois	;wreg free
  2503                           
  2504                           ;hardware.c: 70: init_interrupt();
  2505  00165A  EC30  F00B         	call	_init_interrupt	;wreg free
  2506  00165E  0012               	return		;funcret
  2507  001660                     __end_of_init_hardware:
  2508                           	opt stack 0
  2509                           tblptru	equ	0xFF8
  2510                           tblptrh	equ	0xFF7
  2511                           tblptrl	equ	0xFF6
  2512                           tablat	equ	0xFF5
  2513                           indf0	equ	0xFEF
  2514                           postinc0	equ	0xFEE
  2515                           fsr0h	equ	0xFEA
  2516                           fsr0l	equ	0xFE9
  2517                           wreg	equ	0xFE8
  2518                           postdec1	equ	0xFE5
  2519                           fsr1h	equ	0xFE2
  2520                           fsr1l	equ	0xFE1
  2521                           postinc2	equ	0xFDE
  2522                           status	equ	0xFD8
  2523                           
  2524 ;; *************** function _init_ports *****************
  2525 ;; Defined at:
  2526 ;;		line 154 in file "bibliotecas/hardware.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;		None
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;		None
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  1    wreg      void 
  2533 ;; Registers used:
  2534 ;;		wreg, status,2
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2540 ;;      Params:         0       0       0       0       0       0       0       0       0
  2541 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2543 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2544 ;;Total ram usage:        0 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    3
  2547 ;; This function calls:
  2548 ;;		Nothing
  2549 ;; This function is called by:
  2550 ;;		_init_hardware
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text10
  2555  001612                     __ptext10:
  2556                           	opt stack 0
  2557  001612                     _init_ports:
  2558                           	opt stack 26
  2559                           
  2560                           ;hardware.c: 156: ADCON1 = 0X0F;
  2561                           
  2562                           ;incstack = 0
  2563  001612  0E0F               	movlw	15
  2564  001614  6EC1               	movwf	4033,c	;volatile
  2565                           
  2566                           ;hardware.c: 157: TRISB = 0b00100001;
  2567  001616  0E21               	movlw	33
  2568  001618  6E93               	movwf	3987,c	;volatile
  2569                           
  2570                           ;hardware.c: 158: LATB = 0xFF;
  2571  00161A  688A               	setf	3978,c	;volatile
  2572                           
  2573                           ;hardware.c: 159: TRISD = 0x00;
  2574  00161C  0E00               	movlw	0
  2575  00161E  6E95               	movwf	3989,c	;volatile
  2576                           
  2577                           ;hardware.c: 160: TRISA = 0b00000111;
  2578  001620  0E07               	movlw	7
  2579  001622  6E92               	movwf	3986,c	;volatile
  2580                           
  2581                           ;hardware.c: 161: TRISC = 0x01111111;
  2582  001624  0E11               	movlw	17
  2583  001626  6E94               	movwf	3988,c	;volatile
  2584                           
  2585                           ;hardware.c: 162: TRISE = 0b00000011;
  2586  001628  0E03               	movlw	3
  2587  00162A  6E96               	movwf	3990,c	;volatile
  2588  00162C  0012               	return		;funcret
  2589  00162E                     __end_of_init_ports:
  2590                           	opt stack 0
  2591                           tblptru	equ	0xFF8
  2592                           tblptrh	equ	0xFF7
  2593                           tblptrl	equ	0xFF6
  2594                           tablat	equ	0xFF5
  2595                           indf0	equ	0xFEF
  2596                           postinc0	equ	0xFEE
  2597                           fsr0h	equ	0xFEA
  2598                           fsr0l	equ	0xFE9
  2599                           wreg	equ	0xFE8
  2600                           postdec1	equ	0xFE5
  2601                           fsr1h	equ	0xFE2
  2602                           fsr1l	equ	0xFE1
  2603                           postinc2	equ	0xFDE
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _init_oscilador *****************
  2607 ;; Defined at:
  2608 ;;		line 172 in file "bibliotecas/hardware.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		None
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2622 ;;      Params:         0       0       0       0       0       0       0       0       0
  2623 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2625 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2626 ;;Total ram usage:        0 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    3
  2629 ;; This function calls:
  2630 ;;		Nothing
  2631 ;; This function is called by:
  2632 ;;		_init_hardware
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text11
  2637  0016D4                     __ptext11:
  2638                           	opt stack 0
  2639  0016D4                     _init_oscilador:
  2640                           	opt stack 26
  2641                           
  2642                           ;hardware.c: 175: OSCCONbits.IRCF0 = 1;
  2643                           
  2644                           ;incstack = 0
  2645  0016D4  88D3               	bsf	4051,4,c	;volatile
  2646                           
  2647                           ;hardware.c: 176: OSCCONbits.IRCF1 = 1;
  2648  0016D6  8AD3               	bsf	4051,5,c	;volatile
  2649                           
  2650                           ;hardware.c: 177: OSCCONbits.IRCF2 = 1;
  2651  0016D8  8CD3               	bsf	4051,6,c	;volatile
  2652  0016DA  0012               	return		;funcret
  2653  0016DC                     __end_of_init_oscilador:
  2654                           	opt stack 0
  2655                           tblptru	equ	0xFF8
  2656                           tblptrh	equ	0xFF7
  2657                           tblptrl	equ	0xFF6
  2658                           tablat	equ	0xFF5
  2659                           indf0	equ	0xFEF
  2660                           postinc0	equ	0xFEE
  2661                           fsr0h	equ	0xFEA
  2662                           fsr0l	equ	0xFE9
  2663                           wreg	equ	0xFE8
  2664                           postdec1	equ	0xFE5
  2665                           fsr1h	equ	0xFE2
  2666                           fsr1l	equ	0xFE1
  2667                           postinc2	equ	0xFDE
  2668                           status	equ	0xFD8
  2669                           
  2670 ;; *************** function _init_interrupt *****************
  2671 ;; Defined at:
  2672 ;;		line 98 in file "bibliotecas/hardware.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;		None
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;		None
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  1    wreg      void 
  2679 ;; Registers used:
  2680 ;;		wreg, status,2
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2686 ;;      Params:         0       0       0       0       0       0       0       0       0
  2687 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2688 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2689 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2690 ;;Total ram usage:        0 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:    3
  2693 ;; This function calls:
  2694 ;;		Nothing
  2695 ;; This function is called by:
  2696 ;;		_init_hardware
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text12
  2701  001660                     __ptext12:
  2702                           	opt stack 0
  2703  001660                     _init_interrupt:
  2704                           	opt stack 26
  2705                           
  2706                           ;hardware.c: 100: INTCON = 0b10110000;
  2707                           
  2708                           ;incstack = 0
  2709  001660  0EB0               	movlw	176
  2710  001662  6EF2               	movwf	intcon,c	;volatile
  2711                           
  2712                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2713  001664  0E00               	movlw	0
  2714  001666  6EF1               	movwf	intcon2,c	;volatile
  2715                           
  2716                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2717  001668  0E00               	movlw	0
  2718  00166A  6EF0               	movwf	intcon3,c	;volatile
  2719                           
  2720                           ;hardware.c: 104: PIE1 = 0b00101000;
  2721  00166C  0E28               	movlw	40
  2722  00166E  6E9D               	movwf	3997,c	;volatile
  2723  001670  0012               	return		;funcret
  2724  001672                     __end_of_init_interrupt:
  2725                           	opt stack 0
  2726                           tblptru	equ	0xFF8
  2727                           tblptrh	equ	0xFF7
  2728                           tblptrl	equ	0xFF6
  2729                           tablat	equ	0xFF5
  2730                           intcon	equ	0xFF2
  2731                           intcon2	equ	0xFF1
  2732                           intcon3	equ	0xFF0
  2733                           indf0	equ	0xFEF
  2734                           postinc0	equ	0xFEE
  2735                           fsr0h	equ	0xFEA
  2736                           fsr0l	equ	0xFE9
  2737                           wreg	equ	0xFE8
  2738                           postdec1	equ	0xFE5
  2739                           fsr1h	equ	0xFE2
  2740                           fsr1l	equ	0xFE1
  2741                           postinc2	equ	0xFDE
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _config_timer_zero *****************
  2745 ;; Defined at:
  2746 ;;		line 83 in file "bibliotecas/hardware.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, status,2, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2760 ;;      Params:         0       0       0       0       0       0       0       0       0
  2761 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2763 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2764 ;;Total ram usage:        0 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    4
  2767 ;; This function calls:
  2768 ;;		_write_timer_zero
  2769 ;; This function is called by:
  2770 ;;		_init_hardware
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           	psect	text13
  2775  00162E                     __ptext13:
  2776                           	opt stack 0
  2777  00162E                     _config_timer_zero:
  2778                           	opt stack 25
  2779                           
  2780                           ;hardware.c: 85: T0CON = 0b11000011;
  2781                           
  2782                           ;incstack = 0
  2783  00162E  0EC3               	movlw	195
  2784  001630  6ED5               	movwf	4053,c	;volatile
  2785                           
  2786                           ;hardware.c: 86: SPPCON = 0b00000000;
  2787  001632  0E00               	movlw	0
  2788  001634  6E65               	movwf	3941,c	;volatile
  2789                           
  2790                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2791  001636  0E00               	movlw	0
  2792  001638  6E63               	movwf	3939,c	;volatile
  2793                           
  2794                           ;hardware.c: 88: write_timer_zero(0x0083);
  2795  00163A  0E00               	movlw	0
  2796  00163C  0100               	movlb	0	; () banked
  2797  00163E  6FC5               	movwf	(write_timer_zero@timer0+1)& (0+255),b
  2798  001640  0E83               	movlw	131
  2799  001642  6FC4               	movwf	write_timer_zero@timer0& (0+255),b
  2800  001644  EC39  F00B         	call	_write_timer_zero	;wreg free
  2801  001648  0012               	return		;funcret
  2802  00164A                     __end_of_config_timer_zero:
  2803                           	opt stack 0
  2804                           tblptru	equ	0xFF8
  2805                           tblptrh	equ	0xFF7
  2806                           tblptrl	equ	0xFF6
  2807                           tablat	equ	0xFF5
  2808                           intcon	equ	0xFF2
  2809                           intcon2	equ	0xFF1
  2810                           intcon3	equ	0xFF0
  2811                           indf0	equ	0xFEF
  2812                           postinc0	equ	0xFEE
  2813                           fsr0h	equ	0xFEA
  2814                           fsr0l	equ	0xFE9
  2815                           wreg	equ	0xFE8
  2816                           postdec1	equ	0xFE5
  2817                           fsr1h	equ	0xFE2
  2818                           fsr1l	equ	0xFE1
  2819                           postinc2	equ	0xFDE
  2820                           status	equ	0xFD8
  2821                           
  2822 ;; *************** function _write_timer_zero *****************
  2823 ;; Defined at:
  2824 ;;		line 138 in file "bibliotecas/hardware.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  timer0          2    0[BANK0 ] unsigned int 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  timer           2    2[BANK0 ] struct Timers
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      void 
  2831 ;; Registers used:
  2832 ;;		None
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2838 ;;      Params:         0       2       0       0       0       0       0       0       0
  2839 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2840 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2841 ;;      Totals:         0       4       0       0       0       0       0       0       0
  2842 ;;Total ram usage:        4 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    3
  2845 ;; This function calls:
  2846 ;;		Nothing
  2847 ;; This function is called by:
  2848 ;;		_config_timer_zero
  2849 ;; This function uses a non-reentrant model
  2850 ;;
  2851                           
  2852                           	psect	text14
  2853  001672                     __ptext14:
  2854                           	opt stack 0
  2855  001672                     _write_timer_zero:
  2856                           	opt stack 25
  2857                           
  2858                           ;hardware.c: 140: union Timers timer;
  2859                           ;hardware.c: 142: timer.lt = timer0;
  2860                           
  2861                           ;incstack = 0
  2862  001672  C0C4  F0C6         	movff	write_timer_zero@timer0,write_timer_zero@timer
  2863  001676  C0C5  F0C7         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  2864                           
  2865                           ;hardware.c: 144: TMR0H = timer.bt[1];
  2866  00167A  C0C7  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  2867                           
  2868                           ;hardware.c: 145: TMR0L = timer.bt[0];
  2869  00167E  C0C6  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  2870  001682  0012               	return		;funcret
  2871  001684                     __end_of_write_timer_zero:
  2872                           	opt stack 0
  2873                           tblptru	equ	0xFF8
  2874                           tblptrh	equ	0xFF7
  2875                           tblptrl	equ	0xFF6
  2876                           tablat	equ	0xFF5
  2877                           intcon	equ	0xFF2
  2878                           intcon2	equ	0xFF1
  2879                           intcon3	equ	0xFF0
  2880                           indf0	equ	0xFEF
  2881                           postinc0	equ	0xFEE
  2882                           fsr0h	equ	0xFEA
  2883                           fsr0l	equ	0xFE9
  2884                           wreg	equ	0xFE8
  2885                           postdec1	equ	0xFE5
  2886                           fsr1h	equ	0xFE2
  2887                           fsr1l	equ	0xFE1
  2888                           postinc2	equ	0xFDE
  2889                           status	equ	0xFD8
  2890                           
  2891 ;; *************** function _config_timer_dois *****************
  2892 ;; Defined at:
  2893 ;;		line 201 in file "bibliotecas/hardware.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;		None
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;		None
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  1    wreg      void 
  2900 ;; Registers used:
  2901 ;;		wreg, status,2
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2907 ;;      Params:         0       0       0       0       0       0       0       0       0
  2908 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2909 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2910 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2911 ;;Total ram usage:        0 bytes
  2912 ;; Hardware stack levels used:    1
  2913 ;; Hardware stack levels required when called:    3
  2914 ;; This function calls:
  2915 ;;		Nothing
  2916 ;; This function is called by:
  2917 ;;		_init_hardware
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921                           	psect	text15
  2922  0016C6                     __ptext15:
  2923                           	opt stack 0
  2924  0016C6                     _config_timer_dois:
  2925                           	opt stack 26
  2926                           
  2927                           ;hardware.c: 203: T2CON = 0b00000100;
  2928                           
  2929                           ;incstack = 0
  2930  0016C6  0E04               	movlw	4
  2931  0016C8  6ECA               	movwf	4042,c	;volatile
  2932                           
  2933                           ;hardware.c: 204: TMR2 = 0;
  2934  0016CA  0E00               	movlw	0
  2935  0016CC  6ECC               	movwf	4044,c	;volatile
  2936                           
  2937                           ;hardware.c: 205: PR2 = 0x01;
  2938  0016CE  0E01               	movlw	1
  2939  0016D0  6ECB               	movwf	4043,c	;volatile
  2940  0016D2  0012               	return		;funcret
  2941  0016D4                     __end_of_config_timer_dois:
  2942                           	opt stack 0
  2943                           tblptru	equ	0xFF8
  2944                           tblptrh	equ	0xFF7
  2945                           tblptrl	equ	0xFF6
  2946                           tablat	equ	0xFF5
  2947                           intcon	equ	0xFF2
  2948                           intcon2	equ	0xFF1
  2949                           intcon3	equ	0xFF0
  2950                           indf0	equ	0xFEF
  2951                           postinc0	equ	0xFEE
  2952                           fsr0h	equ	0xFEA
  2953                           fsr0l	equ	0xFE9
  2954                           wreg	equ	0xFE8
  2955                           postdec1	equ	0xFE5
  2956                           fsr1h	equ	0xFE2
  2957                           fsr1l	equ	0xFE1
  2958                           postinc2	equ	0xFDE
  2959                           status	equ	0xFD8
  2960                           
  2961 ;; *************** function _inicializa_uart *****************
  2962 ;; Defined at:
  2963 ;;		line 206 in file "bibliotecas/uart.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;		None
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;		None
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  1    wreg      void 
  2970 ;; Registers used:
  2971 ;;		wreg, status,2, status,0, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2977 ;;      Params:         0       0       0       0       0       0       0       0       0
  2978 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2979 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2980 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2981 ;;Total ram usage:        0 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    5
  2984 ;; This function calls:
  2985 ;;		_configura_baudrate_uart
  2986 ;; This function is called by:
  2987 ;;		_main
  2988 ;;		_escrita_sdcard
  2989 ;;		_leitura_sdcard
  2990 ;; This function uses a non-reentrant model
  2991 ;;
  2992                           
  2993                           	psect	text16
  2994  0015EE                     __ptext16:
  2995                           	opt stack 0
  2996  0015EE                     _inicializa_uart:
  2997                           	opt stack 25
  2998                           
  2999                           ;uart.c: 208: TRISCbits.RC6 = 0;
  3000                           
  3001                           ;incstack = 0
  3002  0015EE  9C94               	bcf	3988,6,c	;volatile
  3003                           
  3004                           ;uart.c: 209: TRISCbits.RC7 = 0;
  3005  0015F0  9E94               	bcf	3988,7,c	;volatile
  3006                           
  3007                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  3008  0015F2  0E80               	movlw	128
  3009  0015F4  0100               	movlb	0	; () banked
  3010  0015F6  6FD2               	movwf	configura_baudrate_uart@baudrate& (0+255),b
  3011  0015F8  0E25               	movlw	37
  3012  0015FA  6FD3               	movwf	(configura_baudrate_uart@baudrate+1)& (0+255),b
  3013  0015FC  0E00               	movlw	0
  3014  0015FE  6FD4               	movwf	(configura_baudrate_uart@baudrate+2)& (0+255),b
  3015  001600  0E00               	movlw	0
  3016  001602  6FD5               	movwf	(configura_baudrate_uart@baudrate+3)& (0+255),b
  3017  001604  EC52  F006         	call	_configura_baudrate_uart	;wreg free
  3018                           
  3019                           ;uart.c: 213: TXSTA = 0x20;
  3020  001608  0E20               	movlw	32
  3021  00160A  6EAC               	movwf	4012,c	;volatile
  3022                           
  3023                           ;uart.c: 214: RCSTA = 0x90;
  3024  00160C  0E90               	movlw	144
  3025  00160E  6EAB               	movwf	4011,c	;volatile
  3026  001610  0012               	return		;funcret
  3027  001612                     __end_of_inicializa_uart:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           tblptrh	equ	0xFF7
  3031                           tblptrl	equ	0xFF6
  3032                           tablat	equ	0xFF5
  3033                           intcon	equ	0xFF2
  3034                           intcon2	equ	0xFF1
  3035                           intcon3	equ	0xFF0
  3036                           indf0	equ	0xFEF
  3037                           postinc0	equ	0xFEE
  3038                           fsr0h	equ	0xFEA
  3039                           fsr0l	equ	0xFE9
  3040                           wreg	equ	0xFE8
  3041                           postdec1	equ	0xFE5
  3042                           fsr1h	equ	0xFE2
  3043                           fsr1l	equ	0xFE1
  3044                           postinc2	equ	0xFDE
  3045                           status	equ	0xFD8
  3046                           
  3047 ;; *************** function _configura_baudrate_uart *****************
  3048 ;; Defined at:
  3049 ;;		line 50 in file "bibliotecas/uart.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;  baudrate        4   14[BANK0 ] const long 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  x               2   26[BANK0 ] unsigned int 
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      unsigned char 
  3056 ;; Registers used:
  3057 ;;		wreg, status,2, status,0, cstack
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3063 ;;      Params:         0       4       0       0       0       0       0       0       0
  3064 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3065 ;;      Temps:          0       8       0       0       0       0       0       0       0
  3066 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3067 ;;Total ram usage:       14 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    4
  3070 ;; This function calls:
  3071 ;;		___aldiv
  3072 ;; This function is called by:
  3073 ;;		_inicializa_uart
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text17
  3078  000CA4                     __ptext17:
  3079                           	opt stack 0
  3080  000CA4                     _configura_baudrate_uart:
  3081                           	opt stack 25
  3082                           
  3083                           ;uart.c: 52: unsigned int x;
  3084                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  3085                           
  3086                           ;incstack = 0
  3087  000CA4  C0D2  F0D6         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  3088  000CA8  C0D3  F0D7         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  3089  000CAC  C0D4  F0D8         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  3090  000CB0  C0D5  F0D9         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  3091  000CB4  0E06               	movlw	6
  3092  000CB6                     u10375:
  3093  000CB6  90D8               	bcf	status,0,c
  3094  000CB8  0100               	movlb	0	; () banked
  3095  000CBA  37D6               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  3096  000CBC  37D7               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3097  000CBE  37D8               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3098  000CC0  37D9               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3099  000CC2  2EE8               	decfsz	wreg,f,c
  3100  000CC4  D7F8               	goto	u10375
  3101  000CC6  1FD6               	comf	??_configura_baudrate_uart& (0+255),f,b
  3102  000CC8  1FD7               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3103  000CCA  1FD8               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3104  000CCC  1FD9               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3105  000CCE  2BD6               	incf	??_configura_baudrate_uart& (0+255),f,b
  3106  000CD0  0E00               	movlw	0
  3107  000CD2  23D7               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  3108  000CD4  23D8               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  3109  000CD6  23D9               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  3110  000CD8  0E00               	movlw	0
  3111  000CDA  25D6               	addwf	??_configura_baudrate_uart& (0+255),w,b
  3112  000CDC  6FC4               	movwf	___aldiv@dividend& (0+255),b
  3113  000CDE  0E6C               	movlw	108
  3114  000CE0  21D7               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  3115  000CE2  6FC5               	movwf	(___aldiv@dividend+1)& (0+255),b
  3116  000CE4  0EDC               	movlw	220
  3117  000CE6  21D8               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  3118  000CE8  6FC6               	movwf	(___aldiv@dividend+2)& (0+255),b
  3119  000CEA  0E02               	movlw	2
  3120  000CEC  21D9               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  3121  000CEE  6FC7               	movwf	(___aldiv@dividend+3)& (0+255),b
  3122  000CF0  C0D2  F0DA         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  3123  000CF4  C0D3  F0DB         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  3124  000CF8  C0D4  F0DC         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  3125  000CFC  C0D5  F0DD         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  3126  000D00  0E06               	movlw	6
  3127  000D02                     u10385:
  3128  000D02  90D8               	bcf	status,0,c
  3129  000D04  37DA               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  3130  000D06  37DB               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  3131  000D08  37DC               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  3132  000D0A  37DD               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  3133  000D0C  2EE8               	decfsz	wreg,f,c
  3134  000D0E  D7F9               	goto	u10385
  3135  000D10  C0DA  F0C8         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  3136  000D14  C0DB  F0C9         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  3137  000D18  C0DC  F0CA         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  3138  000D1C  C0DD  F0CB         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  3139  000D20  EC84  F007         	call	___aldiv	;wreg free
  3140  000D24  C0C4  F0DE         	movff	?___aldiv,configura_baudrate_uart@x
  3141  000D28  C0C5  F0DF         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  3142                           
  3143                           ;uart.c: 55: if(x > 255)
  3144  000D2C  0100               	movlb	0	; () banked
  3145  000D2E  05DF               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  3146  000D30  A0D8               	btfss	status,0,c
  3147  000D32  D044               	goto	l784
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;uart.c: 56: {
  3151                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  3152  000D34  C0D2  F0D6         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  3153  000D38  C0D3  F0D7         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  3154  000D3C  C0D4  F0D8         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  3155  000D40  C0D5  F0D9         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  3156  000D44  0E04               	movlw	4
  3157  000D46                     u10405:
  3158  000D46  90D8               	bcf	status,0,c
  3159  000D48  37D6               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  3160  000D4A  37D7               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3161  000D4C  37D8               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3162  000D4E  37D9               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3163  000D50  2EE8               	decfsz	wreg,f,c
  3164  000D52  D7F9               	goto	u10405
  3165  000D54  1FD6               	comf	??_configura_baudrate_uart& (0+255),f,b
  3166  000D56  1FD7               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3167  000D58  1FD8               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3168  000D5A  1FD9               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3169  000D5C  2BD6               	incf	??_configura_baudrate_uart& (0+255),f,b
  3170  000D5E  0E00               	movlw	0
  3171  000D60  23D7               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  3172  000D62  23D8               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  3173  000D64  23D9               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  3174  000D66  0E00               	movlw	0
  3175  000D68  25D6               	addwf	??_configura_baudrate_uart& (0+255),w,b
  3176  000D6A  6FC4               	movwf	___aldiv@dividend& (0+255),b
  3177  000D6C  0E6C               	movlw	108
  3178  000D6E  21D7               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  3179  000D70  6FC5               	movwf	(___aldiv@dividend+1)& (0+255),b
  3180  000D72  0EDC               	movlw	220
  3181  000D74  21D8               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  3182  000D76  6FC6               	movwf	(___aldiv@dividend+2)& (0+255),b
  3183  000D78  0E02               	movlw	2
  3184  000D7A  21D9               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  3185  000D7C  6FC7               	movwf	(___aldiv@dividend+3)& (0+255),b
  3186  000D7E  C0D2  F0DA         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  3187  000D82  C0D3  F0DB         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  3188  000D86  C0D4  F0DC         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  3189  000D8A  C0D5  F0DD         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  3190  000D8E  0E04               	movlw	4
  3191  000D90                     u10415:
  3192  000D90  90D8               	bcf	status,0,c
  3193  000D92  37DA               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  3194  000D94  37DB               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  3195  000D96  37DC               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  3196  000D98  37DD               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  3197  000D9A  2EE8               	decfsz	wreg,f,c
  3198  000D9C  D7F9               	goto	u10415
  3199  000D9E  C0DA  F0C8         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  3200  000DA2  C0DB  F0C9         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  3201  000DA6  C0DC  F0CA         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  3202  000DAA  C0DD  F0CB         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  3203  000DAE  EC84  F007         	call	___aldiv	;wreg free
  3204  000DB2  C0C4  F0DE         	movff	?___aldiv,configura_baudrate_uart@x
  3205  000DB6  C0C5  F0DF         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  3206                           
  3207                           ;uart.c: 58: BRGH = 1;
  3208  000DBA  84AC               	bsf	4012,2,c	;volatile
  3209  000DBC                     l784:
  3210                           
  3211                           ;uart.c: 59: }
  3212                           ;uart.c: 60: if(x < 256)
  3213  000DBC  0100               	movlb	0	; () banked
  3214  000DBE  05DF               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  3215  000DC0  B0D8               	btfsc	status,0,c
  3216  000DC2  0012               	return	
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;uart.c: 61: {
  3220                           ;uart.c: 62: SPBRG = x;
  3221  000DC4  C0DE  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  3222                           
  3223                           ;uart.c: 63: SYNC = 0;
  3224  000DC8  98AC               	bcf	4012,4,c	;volatile
  3225                           
  3226                           ;uart.c: 64: SPEN = 1;
  3227  000DCA  8EAB               	bsf	4011,7,c	;volatile
  3228                           
  3229                           ;uart.c: 65: TRISCbits.RC7 = 1;
  3230  000DCC  8E94               	bsf	3988,7,c	;volatile
  3231                           
  3232                           ;uart.c: 66: TRISCbits.RC6 = 0;
  3233  000DCE  9C94               	bcf	3988,6,c	;volatile
  3234                           
  3235                           ;uart.c: 67: CREN = 1;
  3236  000DD0  88AB               	bsf	4011,4,c	;volatile
  3237                           
  3238                           ;uart.c: 68: TXEN = 1;
  3239  000DD2  8AAC               	bsf	4012,5,c	;volatile
  3240                           
  3241                           ;uart.c: 70: return (1);
  3242                           ;	Return value of _configura_baudrate_uart is never used
  3243  000DD4  0012               	return	
  3244  000DD6                     __end_of_configura_baudrate_uart:
  3245                           	opt stack 0
  3246                           tblptru	equ	0xFF8
  3247                           tblptrh	equ	0xFF7
  3248                           tblptrl	equ	0xFF6
  3249                           tablat	equ	0xFF5
  3250                           intcon	equ	0xFF2
  3251                           intcon2	equ	0xFF1
  3252                           intcon3	equ	0xFF0
  3253                           indf0	equ	0xFEF
  3254                           postinc0	equ	0xFEE
  3255                           fsr0h	equ	0xFEA
  3256                           fsr0l	equ	0xFE9
  3257                           wreg	equ	0xFE8
  3258                           postdec1	equ	0xFE5
  3259                           fsr1h	equ	0xFE2
  3260                           fsr1l	equ	0xFE1
  3261                           postinc2	equ	0xFDE
  3262                           status	equ	0xFD8
  3263                           
  3264 ;; *************** function ___aldiv *****************
  3265 ;; Defined at:
  3266 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;  dividend        4    0[BANK0 ] long 
  3269 ;;  divisor         4    4[BANK0 ] long 
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;  quotient        4   10[BANK0 ] long 
  3272 ;;  sign            1    9[BANK0 ] unsigned char 
  3273 ;;  counter         1    8[BANK0 ] unsigned char 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  4    0[BANK0 ] long 
  3276 ;; Registers used:
  3277 ;;		wreg, status,2, status,0
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3283 ;;      Params:         0       8       0       0       0       0       0       0       0
  3284 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3286 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3287 ;;Total ram usage:       14 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    3
  3290 ;; This function calls:
  3291 ;;		Nothing
  3292 ;; This function is called by:
  3293 ;;		_configura_baudrate_uart
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text18
  3298  000F08                     __ptext18:
  3299                           	opt stack 0
  3300  000F08                     ___aldiv:
  3301                           	opt stack 25
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;incstack = 0
  3305  000F08  0E00               	movlw	0
  3306  000F0A  0100               	movlb	0	; () banked
  3307  000F0C  6FCD               	movwf	___aldiv@sign& (0+255),b
  3308                           
  3309                           ; BSR set to: 0
  3310  000F0E  AFCB               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3311  000F10  D00A               	goto	l1403
  3312                           
  3313                           ; BSR set to: 0
  3314  000F12  1FCB               	comf	(___aldiv@divisor+3)& (0+255),f,b
  3315  000F14  1FCA               	comf	(___aldiv@divisor+2)& (0+255),f,b
  3316  000F16  1FC9               	comf	(___aldiv@divisor+1)& (0+255),f,b
  3317  000F18  6DC8               	negf	___aldiv@divisor& (0+255),b
  3318  000F1A  0E00               	movlw	0
  3319  000F1C  23C9               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  3320  000F1E  23CA               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  3321  000F20  23CB               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  3322                           
  3323                           ; BSR set to: 0
  3324  000F22  0E01               	movlw	1
  3325  000F24  6FCD               	movwf	___aldiv@sign& (0+255),b
  3326  000F26                     l1403:
  3327                           
  3328                           ; BSR set to: 0
  3329                           
  3330                           ; BSR set to: 0
  3331  000F26  AFC7               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  3332  000F28  D00A               	goto	l1404
  3333                           
  3334                           ; BSR set to: 0
  3335  000F2A  1FC7               	comf	(___aldiv@dividend+3)& (0+255),f,b
  3336  000F2C  1FC6               	comf	(___aldiv@dividend+2)& (0+255),f,b
  3337  000F2E  1FC5               	comf	(___aldiv@dividend+1)& (0+255),f,b
  3338  000F30  6DC4               	negf	___aldiv@dividend& (0+255),b
  3339  000F32  0E00               	movlw	0
  3340  000F34  23C5               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  3341  000F36  23C6               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  3342  000F38  23C7               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  3343                           
  3344                           ; BSR set to: 0
  3345  000F3A  0E01               	movlw	1
  3346  000F3C  1BCD               	xorwf	___aldiv@sign& (0+255),f,b
  3347  000F3E                     l1404:
  3348                           
  3349                           ; BSR set to: 0
  3350                           
  3351                           ; BSR set to: 0
  3352  000F3E  0E00               	movlw	0
  3353  000F40  6FCE               	movwf	___aldiv@quotient& (0+255),b
  3354  000F42  0E00               	movlw	0
  3355  000F44  6FCF               	movwf	(___aldiv@quotient+1)& (0+255),b
  3356  000F46  0E00               	movlw	0
  3357  000F48  6FD0               	movwf	(___aldiv@quotient+2)& (0+255),b
  3358  000F4A  0E00               	movlw	0
  3359  000F4C  6FD1               	movwf	(___aldiv@quotient+3)& (0+255),b
  3360                           
  3361                           ; BSR set to: 0
  3362  000F4E  51C8               	movf	___aldiv@divisor& (0+255),w,b
  3363  000F50  11C9               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  3364  000F52  11CA               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  3365  000F54  11CB               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  3366  000F56  B4D8               	btfsc	status,2,c
  3367  000F58  D02A               	goto	l1411
  3368                           
  3369                           ; BSR set to: 0
  3370  000F5A  0E01               	movlw	1
  3371  000F5C  6FCC               	movwf	___aldiv@counter& (0+255),b
  3372  000F5E  D006               	goto	l1406
  3373  000F60                     
  3374                           ; BSR set to: 0
  3375                           
  3376                           ; BSR set to: 0
  3377  000F60  90D8               	bcf	status,0,c
  3378  000F62  37C8               	rlcf	___aldiv@divisor& (0+255),f,b
  3379  000F64  37C9               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  3380  000F66  37CA               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  3381  000F68  37CB               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  3382  000F6A  2BCC               	incf	___aldiv@counter& (0+255),f,b
  3383  000F6C                     l1406:
  3384                           
  3385                           ; BSR set to: 0
  3386                           
  3387                           ; BSR set to: 0
  3388  000F6C  AFCB               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3389  000F6E  D7F8               	goto	l1407
  3390  000F70                     u10100:
  3391                           
  3392                           ; BSR set to: 0
  3393                           
  3394                           ; BSR set to: 0
  3395                           
  3396                           ; BSR set to: 0
  3397  000F70  90D8               	bcf	status,0,c
  3398  000F72  37CE               	rlcf	___aldiv@quotient& (0+255),f,b
  3399  000F74  37CF               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3400  000F76  37D0               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3401  000F78  37D1               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3402                           
  3403                           ; BSR set to: 0
  3404  000F7A  51C8               	movf	___aldiv@divisor& (0+255),w,b
  3405  000F7C  5DC4               	subwf	___aldiv@dividend& (0+255),w,b
  3406  000F7E  51C9               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3407  000F80  59C5               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  3408  000F82  51CA               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3409  000F84  59C6               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  3410  000F86  51CB               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3411  000F88  59C7               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  3412  000F8A  A0D8               	btfss	status,0,c
  3413  000F8C  D009               	goto	l1410
  3414                           
  3415                           ; BSR set to: 0
  3416  000F8E  51C8               	movf	___aldiv@divisor& (0+255),w,b
  3417  000F90  5FC4               	subwf	___aldiv@dividend& (0+255),f,b
  3418  000F92  51C9               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3419  000F94  5BC5               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  3420  000F96  51CA               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3421  000F98  5BC6               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  3422  000F9A  51CB               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3423  000F9C  5BC7               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  3424                           
  3425                           ; BSR set to: 0
  3426  000F9E  81CE               	bsf	___aldiv@quotient& (0+255),0,b
  3427  000FA0                     l1410:
  3428                           
  3429                           ; BSR set to: 0
  3430                           
  3431                           ; BSR set to: 0
  3432  000FA0  90D8               	bcf	status,0,c
  3433  000FA2  33CB               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  3434  000FA4  33CA               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  3435  000FA6  33C9               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  3436  000FA8  33C8               	rrcf	___aldiv@divisor& (0+255),f,b
  3437                           
  3438                           ; BSR set to: 0
  3439  000FAA  2FCC               	decfsz	___aldiv@counter& (0+255),f,b
  3440  000FAC  D7E1               	goto	u10100
  3441  000FAE                     l1411:
  3442                           
  3443                           ; BSR set to: 0
  3444                           
  3445                           ; BSR set to: 0
  3446                           
  3447                           ; BSR set to: 0
  3448  000FAE  51CD               	movf	___aldiv@sign& (0+255),w,b
  3449  000FB0  B4D8               	btfsc	status,2,c
  3450  000FB2  D008               	goto	l1412
  3451                           
  3452                           ; BSR set to: 0
  3453  000FB4  1FD1               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3454  000FB6  1FD0               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3455  000FB8  1FCF               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3456  000FBA  6DCE               	negf	___aldiv@quotient& (0+255),b
  3457  000FBC  0E00               	movlw	0
  3458  000FBE  23CF               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3459  000FC0  23D0               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3460  000FC2  23D1               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3461  000FC4                     l1412:
  3462                           
  3463                           ; BSR set to: 0
  3464                           
  3465                           ; BSR set to: 0
  3466  000FC4  C0CE  F0C4         	movff	___aldiv@quotient,?___aldiv
  3467  000FC8  C0CF  F0C5         	movff	___aldiv@quotient+1,?___aldiv+1
  3468  000FCC  C0D0  F0C6         	movff	___aldiv@quotient+2,?___aldiv+2
  3469  000FD0  C0D1  F0C7         	movff	___aldiv@quotient+3,?___aldiv+3
  3470  000FD4  0012               	return	
  3471  000FD6                     __end_of___aldiv:
  3472                           	opt stack 0
  3473                           tblptru	equ	0xFF8
  3474                           tblptrh	equ	0xFF7
  3475                           tblptrl	equ	0xFF6
  3476                           tablat	equ	0xFF5
  3477                           intcon	equ	0xFF2
  3478                           intcon2	equ	0xFF1
  3479                           intcon3	equ	0xFF0
  3480                           indf0	equ	0xFEF
  3481                           postinc0	equ	0xFEE
  3482                           fsr0h	equ	0xFEA
  3483                           fsr0l	equ	0xFE9
  3484                           wreg	equ	0xFE8
  3485                           postdec1	equ	0xFE5
  3486                           fsr1h	equ	0xFE2
  3487                           fsr1l	equ	0xFE1
  3488                           postinc2	equ	0xFDE
  3489                           status	equ	0xFD8
  3490                           
  3491 ;; *************** function _inicializa_tarefas *****************
  3492 ;; Defined at:
  3493 ;;		line 145 in file "main.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;		None
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  1    wreg      void 
  3500 ;; Registers used:
  3501 ;;		wreg, status,2
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3507 ;;      Params:         0       0       0       0       0       0       0       0       0
  3508 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3509 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3510 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3511 ;;Total ram usage:        0 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    3
  3514 ;; This function calls:
  3515 ;;		Nothing
  3516 ;; This function is called by:
  3517 ;;		_main
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	text19
  3522  0015C8                     __ptext19:
  3523                           	opt stack 0
  3524  0015C8                     _inicializa_tarefas:
  3525                           	opt stack 27
  3526                           
  3527                           ;main.c: 155: tempo_backup[0] = 5000;
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;incstack = 0
  3531  0015C8  0E13               	movlw	19
  3532  0015CA  6E06               	movwf	_tempo_backup+1,c
  3533  0015CC  0E88               	movlw	136
  3534  0015CE  6E05               	movwf	_tempo_backup,c
  3535                           
  3536                           ;main.c: 156: tempo_backup[1] = 1000;
  3537  0015D0  0E03               	movlw	3
  3538  0015D2  6E08               	movwf	_tempo_backup+3,c
  3539  0015D4  0EE8               	movlw	232
  3540  0015D6  6E07               	movwf	_tempo_backup+2,c
  3541                           
  3542                           ;main.c: 161: tempo_tarefa[0] = 5000;
  3543  0015D8  0E13               	movlw	19
  3544  0015DA  6E02               	movwf	_tempo_tarefa+1,c
  3545  0015DC  0E88               	movlw	136
  3546  0015DE  6E01               	movwf	_tempo_tarefa,c
  3547                           
  3548                           ;main.c: 162: tempo_tarefa[1] = 1000;
  3549  0015E0  0E03               	movlw	3
  3550  0015E2  6E04               	movwf	_tempo_tarefa+3,c
  3551  0015E4  0EE8               	movlw	232
  3552  0015E6  6E03               	movwf	_tempo_tarefa+2,c
  3553                           
  3554                           ;main.c: 166: tarefa_em_execucao = 0;
  3555  0015E8  0E00               	movlw	0
  3556  0015EA  6E1C               	movwf	_tarefa_em_execucao,c	;volatile
  3557  0015EC  0012               	return		;funcret
  3558  0015EE                     __end_of_inicializa_tarefas:
  3559                           	opt stack 0
  3560                           tblptru	equ	0xFF8
  3561                           tblptrh	equ	0xFF7
  3562                           tblptrl	equ	0xFF6
  3563                           tablat	equ	0xFF5
  3564                           intcon	equ	0xFF2
  3565                           intcon2	equ	0xFF1
  3566                           intcon3	equ	0xFF0
  3567                           indf0	equ	0xFEF
  3568                           postinc0	equ	0xFEE
  3569                           fsr0h	equ	0xFEA
  3570                           fsr0l	equ	0xFE9
  3571                           wreg	equ	0xFE8
  3572                           postdec1	equ	0xFE5
  3573                           fsr1h	equ	0xFE2
  3574                           fsr1l	equ	0xFE1
  3575                           postinc2	equ	0xFDE
  3576                           status	equ	0xFD8
  3577                           
  3578 ;; *************** function _escalonador *****************
  3579 ;; Defined at:
  3580 ;;		line 177 in file "main.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;		None
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;  cont            1    2[BANK0 ] unsigned char 
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3594 ;;      Params:         0       0       0       0       0       0       0       0       0
  3595 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3596 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3597 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3598 ;;Total ram usage:        3 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    3
  3601 ;; This function calls:
  3602 ;;		Nothing
  3603 ;; This function is called by:
  3604 ;;		_main
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text20
  3609  0012A4                     __ptext20:
  3610                           	opt stack 0
  3611  0012A4                     _escalonador:
  3612                           	opt stack 27
  3613                           
  3614                           ;main.c: 179: unsigned char cont;
  3615                           ;main.c: 180: for(cont = 0; cont<2;cont++)
  3616                           
  3617                           ;incstack = 0
  3618  0012A4  0E00               	movlw	0
  3619  0012A6  0100               	movlb	0	; () banked
  3620  0012A8  6FC6               	movwf	escalonador@cont& (0+255),b
  3621  0012AA                     l8684:
  3622                           
  3623                           ; BSR set to: 0
  3624  0012AA  0E01               	movlw	1
  3625  0012AC  65C6               	cpfsgt	escalonador@cont& (0+255),b
  3626  0012AE  D001               	goto	l83
  3627  0012B0  0012               	return	
  3628  0012B2                     l83:
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;main.c: 181: {
  3632                           ;main.c: 182: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3633                           
  3634                           ; BSR set to: 0
  3635  0012B2  51C6               	movf	escalonador@cont& (0+255),w,b
  3636  0012B4  0D02               	mullw	2
  3637  0012B6  0E6C               	movlw	low _p_tarefas
  3638  0012B8  24F3               	addwf	prodl,w,c
  3639  0012BA  6ED9               	movwf	fsr2l,c
  3640  0012BC  0E00               	movlw	high _p_tarefas
  3641  0012BE  20F4               	addwfc	prodh,w,c
  3642  0012C0  6EDA               	movwf	fsr2h,c
  3643  0012C2  50DE               	movf	postinc2,w,c
  3644  0012C4  10DE               	iorwf	postinc2,w,c
  3645  0012C6  B4D8               	btfsc	status,2,c
  3646  0012C8  D028               	goto	l85
  3647                           
  3648                           ; BSR set to: 0
  3649  0012CA  51C6               	movf	escalonador@cont& (0+255),w,b
  3650  0012CC  0D02               	mullw	2
  3651  0012CE  0E01               	movlw	low _tempo_tarefa
  3652  0012D0  24F3               	addwf	prodl,w,c
  3653  0012D2  6ED9               	movwf	fsr2l,c
  3654  0012D4  0E00               	movlw	high _tempo_tarefa
  3655  0012D6  20F4               	addwfc	prodh,w,c
  3656  0012D8  6EDA               	movwf	fsr2h,c
  3657  0012DA  50DE               	movf	postinc2,w,c
  3658  0012DC  10DE               	iorwf	postinc2,w,c
  3659  0012DE  A4D8               	btfss	status,2,c
  3660  0012E0  D01C               	goto	l85
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;main.c: 183: {
  3664                           ;main.c: 184: tarefa_em_execucao = 1;
  3665  0012E2  0E01               	movlw	1
  3666  0012E4  6E1C               	movwf	_tarefa_em_execucao,c	;volatile
  3667                           
  3668                           ;main.c: 186: p_tarefas[cont]();
  3669  0012E6  0EEA               	movlw	234
  3670  0012E8  6E14               	movwf	_timeout_tarefa+1,c
  3671  0012EA  0E60               	movlw	96
  3672  0012EC  6E13               	movwf	_timeout_tarefa,c
  3673                           
  3674                           ;main.c: 187: tarefa_em_execucao = 0;
  3675  0012EE  0E00               	movlw	0
  3676  0012F0  6E1C               	movwf	_tarefa_em_execucao,c	;volatile
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;main.c: 188: tempo_tarefa[cont] = tempo_backup[cont];
  3680  0012F2  51C6               	movf	escalonador@cont& (0+255),w,b
  3681  0012F4  0D02               	mullw	2
  3682  0012F6  0E05               	movlw	low _tempo_backup
  3683  0012F8  24F3               	addwf	prodl,w,c
  3684  0012FA  6ED9               	movwf	fsr2l,c
  3685  0012FC  0E00               	movlw	high _tempo_backup
  3686  0012FE  20F4               	addwfc	prodh,w,c
  3687  001300  6EDA               	movwf	fsr2h,c
  3688  001302  51C6               	movf	escalonador@cont& (0+255),w,b
  3689  001304  0D02               	mullw	2
  3690  001306  0E01               	movlw	low _tempo_tarefa
  3691  001308  24F3               	addwf	prodl,w,c
  3692  00130A  6EE1               	movwf	fsr1l,c
  3693  00130C  0E00               	movlw	high _tempo_tarefa
  3694  00130E  20F4               	addwfc	prodh,w,c
  3695  001310  6EE2               	movwf	fsr1h,c
  3696  001312  CFDE FFE6          	movff	postinc2,postinc1
  3697  001316  CFDD FFE5          	movff	postdec2,postdec1
  3698  00131A                     l85:
  3699                           
  3700                           ; BSR set to: 0
  3701                           
  3702                           ; BSR set to: 0
  3703  00131A  2BC6               	incf	escalonador@cont& (0+255),f,b
  3704  00131C  D7C6               	goto	l8684
  3705  00131E                     __end_of_escalonador:
  3706                           	opt stack 0
  3707                           tblptru	equ	0xFF8
  3708                           tblptrh	equ	0xFF7
  3709                           tblptrl	equ	0xFF6
  3710                           tablat	equ	0xFF5
  3711                           prodh	equ	0xFF4
  3712                           prodl	equ	0xFF3
  3713                           intcon	equ	0xFF2
  3714                           intcon2	equ	0xFF1
  3715                           intcon3	equ	0xFF0
  3716                           indf0	equ	0xFEF
  3717                           postinc0	equ	0xFEE
  3718                           fsr0h	equ	0xFEA
  3719                           fsr0l	equ	0xFE9
  3720                           wreg	equ	0xFE8
  3721                           postinc1	equ	0xFE6
  3722                           postdec1	equ	0xFE5
  3723                           fsr1h	equ	0xFE2
  3724                           fsr1l	equ	0xFE1
  3725                           postinc2	equ	0xFDE
  3726                           postdec2	equ	0xFDD
  3727                           fsr2h	equ	0xFDA
  3728                           fsr2l	equ	0xFD9
  3729                           status	equ	0xFD8
  3730                           
  3731 ;; *************** function _dados_gps_to_sd *****************
  3732 ;; Defined at:
  3733 ;;		line 632 in file "bibliotecas/GPS.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;		None
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;		None
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  1    wreg      void 
  3740 ;; Registers used:
  3741 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3747 ;;      Params:         0       0       0       0       0       0       0       0       0
  3748 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3749 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3750 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3751 ;;Total ram usage:        0 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    5
  3754 ;; This function calls:
  3755 ;;		_monta_sd
  3756 ;; This function is called by:
  3757 ;;		_main
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text21
  3762  0014F0                     __ptext21:
  3763                           	opt stack 0
  3764  0014F0                     _dados_gps_to_sd:
  3765                           	opt stack 25
  3766                           
  3767                           ;GPS.c: 634: monta_sd(0, rawTime);
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;incstack = 0
  3771  0014F0  0E99               	movlw	low _rawTime
  3772  0014F2  0100               	movlb	0	; () banked
  3773  0014F4  6FCA               	movwf	monta_sd@dado& (0+255),b
  3774  0014F6  0E00               	movlw	high _rawTime
  3775  0014F8  6FCB               	movwf	(monta_sd@dado+1)& (0+255),b
  3776  0014FA  0E00               	movlw	0
  3777  0014FC  ECEB  F006         	call	_monta_sd
  3778                           
  3779                           ;GPS.c: 635: monta_sd(1, rawDate);
  3780  001500  0EAB               	movlw	low _rawDate
  3781  001502  0100               	movlb	0	; () banked
  3782  001504  6FCA               	movwf	monta_sd@dado& (0+255),b
  3783  001506  0E00               	movlw	high _rawDate
  3784  001508  6FCB               	movwf	(monta_sd@dado+1)& (0+255),b
  3785  00150A  0E01               	movlw	1
  3786  00150C  ECEB  F006         	call	_monta_sd
  3787                           
  3788                           ;GPS.c: 636: monta_sd(2, rawLatitude);
  3789  001510  0E4D               	movlw	low _rawLatitude
  3790  001512  0100               	movlb	0	; () banked
  3791  001514  6FCA               	movwf	monta_sd@dado& (0+255),b
  3792  001516  0E01               	movlw	high _rawLatitude
  3793  001518  6FCB               	movwf	(monta_sd@dado+1)& (0+255),b
  3794  00151A  0E02               	movlw	2
  3795  00151C  ECEB  F006         	call	_monta_sd
  3796                           
  3797                           ;GPS.c: 637: monta_sd(3, rawLongitude);
  3798  001520  0E40               	movlw	low _rawLongitude
  3799  001522  0100               	movlb	0	; () banked
  3800  001524  6FCA               	movwf	monta_sd@dado& (0+255),b
  3801  001526  0E01               	movlw	high _rawLongitude
  3802  001528  6FCB               	movwf	(monta_sd@dado+1)& (0+255),b
  3803  00152A  0E03               	movlw	3
  3804  00152C  ECEB  F006         	call	_monta_sd
  3805  001530  0012               	return	
  3806  001532                     __end_of_dados_gps_to_sd:
  3807                           	opt stack 0
  3808                           tblptru	equ	0xFF8
  3809                           tblptrh	equ	0xFF7
  3810                           tblptrl	equ	0xFF6
  3811                           tablat	equ	0xFF5
  3812                           prodh	equ	0xFF4
  3813                           prodl	equ	0xFF3
  3814                           intcon	equ	0xFF2
  3815                           intcon2	equ	0xFF1
  3816                           intcon3	equ	0xFF0
  3817                           indf0	equ	0xFEF
  3818                           postinc0	equ	0xFEE
  3819                           fsr0h	equ	0xFEA
  3820                           fsr0l	equ	0xFE9
  3821                           wreg	equ	0xFE8
  3822                           postinc1	equ	0xFE6
  3823                           postdec1	equ	0xFE5
  3824                           fsr1h	equ	0xFE2
  3825                           fsr1l	equ	0xFE1
  3826                           postinc2	equ	0xFDE
  3827                           postdec2	equ	0xFDD
  3828                           fsr2h	equ	0xFDA
  3829                           fsr2l	equ	0xFD9
  3830                           status	equ	0xFD8
  3831                           
  3832 ;; *************** function _monta_sd *****************
  3833 ;; Defined at:
  3834 ;;		line 287 in file "bibliotecas/SDCard.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  index           1    wreg     unsigned char 
  3837 ;;  dado            2    6[BANK0 ] PTR unsigned char 
  3838 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;  index           1    8[BANK0 ] unsigned char 
  3841 ;;  i               1   10[BANK0 ] unsigned char 
  3842 ;;  size            1    9[BANK0 ] unsigned char 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3852 ;;      Params:         0       2       0       0       0       0       0       0       0
  3853 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3855 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3856 ;;Total ram usage:        5 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    4
  3859 ;; This function calls:
  3860 ;;		_strlen
  3861 ;; This function is called by:
  3862 ;;		_dados_gps_to_sd
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           	psect	text22
  3867  000DD6                     __ptext22:
  3868                           	opt stack 0
  3869  000DD6                     _monta_sd:
  3870                           	opt stack 25
  3871                           
  3872                           ;incstack = 0
  3873                           ;monta_sd@index stored from wreg
  3874  000DD6  0100               	movlb	0	; () banked
  3875  000DD8  6FCC               	movwf	monta_sd@index& (0+255),b
  3876                           
  3877                           ;SDCard.c: 289: unsigned char i, size;
  3878                           ;SDCard.c: 290: size = strlen(dado);
  3879  000DDA  C0CA  F0C4         	movff	monta_sd@dado,strlen@s
  3880  000DDE  C0CB  F0C5         	movff	monta_sd@dado+1,strlen@s+1
  3881  000DE2  EC99  F00A         	call	_strlen	;wreg free
  3882  000DE6  0100               	movlb	0	; () banked
  3883  000DE8  51C4               	movf	?_strlen& (0+255),w,b
  3884  000DEA  6FCD               	movwf	monta_sd@size& (0+255),b
  3885                           
  3886                           ;SDCard.c: 291: switch(index)
  3887  000DEC  D07C               	goto	l281
  3888  000DEE                     
  3889                           ; BSR set to: 0
  3890                           ;SDCard.c: 294: for(i=0; i<6;i++)
  3891                           
  3892                           ; BSR set to: 0
  3893  000DEE  0E00               	movlw	0
  3894  000DF0  6FCE               	movwf	monta_sd@i& (0+255),b
  3895  000DF2                     l8558:
  3896                           
  3897                           ; BSR set to: 0
  3898  000DF2  0E05               	movlw	5
  3899  000DF4  65CE               	cpfsgt	monta_sd@i& (0+255),b
  3900  000DF6  D001               	goto	l283
  3901  000DF8  0012               	return	
  3902  000DFA                     l283:
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;SDCard.c: 295: {
  3906                           ;SDCard.c: 296: string_dado.hora[i] = *dado;
  3907                           
  3908                           ; BSR set to: 0
  3909  000DFA  C0CA  FFD9         	movff	monta_sd@dado,fsr2l
  3910  000DFE  C0CB  FFDA         	movff	monta_sd@dado+1,fsr2h
  3911  000E02  51CE               	movf	monta_sd@i& (0+255),w,b
  3912  000E04  0D01               	mullw	1
  3913  000E06  0E07               	movlw	low (_string_dado+7)
  3914  000E08  24F3               	addwf	prodl,w,c
  3915  000E0A  6EE1               	movwf	fsr1l,c
  3916  000E0C  0E01               	movlw	high (_string_dado+7)
  3917  000E0E  20F4               	addwfc	prodh,w,c
  3918  000E10  6EE2               	movwf	fsr1h,c
  3919  000E12  CFDF FFE7          	movff	indf2,indf1
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;SDCard.c: 297: dado++;
  3923  000E16  4BCA               	infsnz	monta_sd@dado& (0+255),f,b
  3924  000E18  2BCB               	incf	(monta_sd@dado+1)& (0+255),f,b
  3925                           
  3926                           ; BSR set to: 0
  3927  000E1A  2BCE               	incf	monta_sd@i& (0+255),f,b
  3928  000E1C  D7EA               	goto	l8558
  3929  000E1E                     
  3930                           ; BSR set to: 0
  3931                           ;SDCard.c: 302: for(i=0; i<6;i++)
  3932                           
  3933                           ; BSR set to: 0
  3934  000E1E  0E00               	movlw	0
  3935  000E20  6FCE               	movwf	monta_sd@i& (0+255),b
  3936  000E22                     l8572:
  3937                           
  3938                           ; BSR set to: 0
  3939  000E22  0E05               	movlw	5
  3940  000E24  65CE               	cpfsgt	monta_sd@i& (0+255),b
  3941  000E26  D001               	goto	l287
  3942  000E28  D012               	goto	u10310
  3943  000E2A                     l287:
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;SDCard.c: 303: {
  3947                           ;SDCard.c: 304: string_dado.data[i] = *dado;
  3948                           
  3949                           ; BSR set to: 0
  3950  000E2A  C0CA  FFD9         	movff	monta_sd@dado,fsr2l
  3951  000E2E  C0CB  FFDA         	movff	monta_sd@dado+1,fsr2h
  3952  000E32  51CE               	movf	monta_sd@i& (0+255),w,b
  3953  000E34  0D01               	mullw	1
  3954  000E36  0E00               	movlw	low _string_dado
  3955  000E38  24F3               	addwf	prodl,w,c
  3956  000E3A  6EE1               	movwf	fsr1l,c
  3957  000E3C  0E01               	movlw	high _string_dado
  3958  000E3E  20F4               	addwfc	prodh,w,c
  3959  000E40  6EE2               	movwf	fsr1h,c
  3960  000E42  CFDF FFE7          	movff	indf2,indf1
  3961                           
  3962                           ; BSR set to: 0
  3963                           ;SDCard.c: 305: dado++;
  3964  000E46  4BCA               	infsnz	monta_sd@dado& (0+255),f,b
  3965  000E48  2BCB               	incf	(monta_sd@dado+1)& (0+255),f,b
  3966                           
  3967                           ; BSR set to: 0
  3968  000E4A  2BCE               	incf	monta_sd@i& (0+255),f,b
  3969  000E4C  D7EA               	goto	l8572
  3970  000E4E                     u10310:
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;SDCard.c: 308: {
  3974                           ;SDCard.c: 309: data_hoje = 1;
  3975                           
  3976                           ; BSR set to: 0
  3977                           
  3978                           ;SDCard.c: 306: }
  3979                           ;SDCard.c: 307: if(string_dado.data)
  3980  000E4E  0E01               	movlw	1
  3981  000E50  6E18               	movwf	_data_hoje,c
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;SDCard.c: 312: }
  3985                           ;SDCard.c: 313: break;
  3986  000E52  0012               	return	
  3987  000E54                     
  3988                           ; BSR set to: 0
  3989                           ;SDCard.c: 316: for(i=0; i<13;i++)
  3990                           
  3991                           ; BSR set to: 0
  3992  000E54  0E00               	movlw	0
  3993  000E56  6FCE               	movwf	monta_sd@i& (0+255),b
  3994  000E58                     l8588:
  3995                           
  3996                           ; BSR set to: 0
  3997  000E58  0E0C               	movlw	12
  3998  000E5A  65CE               	cpfsgt	monta_sd@i& (0+255),b
  3999  000E5C  D001               	goto	l291
  4000  000E5E  0012               	return	
  4001  000E60                     l291:
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;SDCard.c: 317: {
  4005                           ;SDCard.c: 318: string_dado.LAT[i] = *dado;
  4006                           
  4007                           ; BSR set to: 0
  4008  000E60  C0CA  FFD9         	movff	monta_sd@dado,fsr2l
  4009  000E64  C0CB  FFDA         	movff	monta_sd@dado+1,fsr2h
  4010  000E68  51CE               	movf	monta_sd@i& (0+255),w,b
  4011  000E6A  0D01               	mullw	1
  4012  000E6C  0E12               	movlw	low (_string_dado+18)
  4013  000E6E  24F3               	addwf	prodl,w,c
  4014  000E70  6EE1               	movwf	fsr1l,c
  4015  000E72  0E01               	movlw	high (_string_dado+18)
  4016  000E74  20F4               	addwfc	prodh,w,c
  4017  000E76  6EE2               	movwf	fsr1h,c
  4018  000E78  CFDF FFE7          	movff	indf2,indf1
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;SDCard.c: 319: dado++;
  4022  000E7C  4BCA               	infsnz	monta_sd@dado& (0+255),f,b
  4023  000E7E  2BCB               	incf	(monta_sd@dado+1)& (0+255),f,b
  4024                           
  4025                           ; BSR set to: 0
  4026  000E80  2BCE               	incf	monta_sd@i& (0+255),f,b
  4027  000E82  D7EA               	goto	l8588
  4028  000E84                     
  4029                           ; BSR set to: 0
  4030                           ;SDCard.c: 325: for(i=0; i<13;i++)
  4031                           
  4032                           ; BSR set to: 0
  4033  000E84  0E00               	movlw	0
  4034  000E86  6FCE               	movwf	monta_sd@i& (0+255),b
  4035  000E88                     l8602:
  4036                           
  4037                           ; BSR set to: 0
  4038  000E88  0E0C               	movlw	12
  4039  000E8A  65CE               	cpfsgt	monta_sd@i& (0+255),b
  4040  000E8C  D001               	goto	l294
  4041  000E8E  0012               	return	
  4042  000E90                     l294:
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;SDCard.c: 326: {
  4046                           ;SDCard.c: 327: string_dado.LONG[i] = *dado;
  4047                           
  4048                           ; BSR set to: 0
  4049  000E90  C0CA  FFD9         	movff	monta_sd@dado,fsr2l
  4050  000E94  C0CB  FFDA         	movff	monta_sd@dado+1,fsr2h
  4051  000E98  51CE               	movf	monta_sd@i& (0+255),w,b
  4052  000E9A  0D01               	mullw	1
  4053  000E9C  0E1F               	movlw	low (_string_dado+31)
  4054  000E9E  24F3               	addwf	prodl,w,c
  4055  000EA0  6EE1               	movwf	fsr1l,c
  4056  000EA2  0E01               	movlw	high (_string_dado+31)
  4057  000EA4  20F4               	addwfc	prodh,w,c
  4058  000EA6  6EE2               	movwf	fsr1h,c
  4059  000EA8  CFDF FFE7          	movff	indf2,indf1
  4060                           
  4061                           ; BSR set to: 0
  4062                           ;SDCard.c: 328: dado++;
  4063  000EAC  4BCA               	infsnz	monta_sd@dado& (0+255),f,b
  4064  000EAE  2BCB               	incf	(monta_sd@dado+1)& (0+255),f,b
  4065                           
  4066                           ; BSR set to: 0
  4067  000EB0  2BCE               	incf	monta_sd@i& (0+255),f,b
  4068  000EB2  D7EA               	goto	l8602
  4069  000EB4                     
  4070                           ; BSR set to: 0
  4071                           ;SDCard.c: 334: for(i=0; i<size;i++)
  4072                           
  4073                           ; BSR set to: 0
  4074  000EB4  0E00               	movlw	0
  4075  000EB6  6FCE               	movwf	monta_sd@i& (0+255),b
  4076  000EB8  D011               	goto	l297
  4077  000EBA                     
  4078                           ; BSR set to: 0
  4079                           ;SDCard.c: 335: {
  4080                           ;SDCard.c: 336: string_dado.LONG[i] = *dado;
  4081                           
  4082                           ; BSR set to: 0
  4083  000EBA  C0CA  FFD9         	movff	monta_sd@dado,fsr2l
  4084  000EBE  C0CB  FFDA         	movff	monta_sd@dado+1,fsr2h
  4085  000EC2  51CE               	movf	monta_sd@i& (0+255),w,b
  4086  000EC4  0D01               	mullw	1
  4087  000EC6  0E1F               	movlw	low (_string_dado+31)
  4088  000EC8  24F3               	addwf	prodl,w,c
  4089  000ECA  6EE1               	movwf	fsr1l,c
  4090  000ECC  0E01               	movlw	high (_string_dado+31)
  4091  000ECE  20F4               	addwfc	prodh,w,c
  4092  000ED0  6EE2               	movwf	fsr1h,c
  4093  000ED2  CFDF FFE7          	movff	indf2,indf1
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;SDCard.c: 337: dado++;
  4097  000ED6  4BCA               	infsnz	monta_sd@dado& (0+255),f,b
  4098  000ED8  2BCB               	incf	(monta_sd@dado+1)& (0+255),f,b
  4099                           
  4100                           ; BSR set to: 0
  4101  000EDA  2BCE               	incf	monta_sd@i& (0+255),f,b
  4102  000EDC                     l297:
  4103                           
  4104                           ; BSR set to: 0
  4105                           
  4106                           ; BSR set to: 0
  4107  000EDC  51CD               	movf	monta_sd@size& (0+255),w,b
  4108  000EDE  5DCE               	subwf	monta_sd@i& (0+255),w,b
  4109  000EE0  B0D8               	btfsc	status,0,c
  4110  000EE2  0012               	return	
  4111  000EE4  D7EA               	goto	l298
  4112  000EE6                     l281:
  4113                           
  4114                           ; BSR set to: 0
  4115                           
  4116                           ; BSR set to: 0
  4117  000EE6  51CC               	movf	monta_sd@index& (0+255),w,b
  4118                           
  4119                           ; Switch size 1, requested type "space"
  4120                           ; Number of cases is 5, Range of values is 0 to 4
  4121                           ; switch strategies available:
  4122                           ; Name         Instructions Cycles
  4123                           ; simple_byte           16     9 (average)
  4124                           ;	Chosen strategy is simple_byte
  4125  000EE8  0A00               	xorlw	0	; case 0
  4126  000EEA  B4D8               	btfsc	status,2,c
  4127  000EEC  D780               	goto	l282
  4128  000EEE  0A01               	xorlw	1	; case 1
  4129  000EF0  B4D8               	btfsc	status,2,c
  4130  000EF2  D795               	goto	l286
  4131  000EF4  0A03               	xorlw	3	; case 2
  4132  000EF6  B4D8               	btfsc	status,2,c
  4133  000EF8  D7AD               	goto	l290
  4134  000EFA  0A01               	xorlw	1	; case 3
  4135  000EFC  B4D8               	btfsc	status,2,c
  4136  000EFE  D7C2               	goto	l293
  4137  000F00  0A07               	xorlw	7	; case 4
  4138  000F02  A4D8               	btfss	status,2,c
  4139  000F04  0012               	return	
  4140  000F06  D7D6               	goto	l296
  4141  000F08                     __end_of_monta_sd:
  4142                           	opt stack 0
  4143                           tblptru	equ	0xFF8
  4144                           tblptrh	equ	0xFF7
  4145                           tblptrl	equ	0xFF6
  4146                           tablat	equ	0xFF5
  4147                           prodh	equ	0xFF4
  4148                           prodl	equ	0xFF3
  4149                           intcon	equ	0xFF2
  4150                           intcon2	equ	0xFF1
  4151                           intcon3	equ	0xFF0
  4152                           indf0	equ	0xFEF
  4153                           postinc0	equ	0xFEE
  4154                           fsr0h	equ	0xFEA
  4155                           fsr0l	equ	0xFE9
  4156                           wreg	equ	0xFE8
  4157                           indf1	equ	0xFE7
  4158                           postinc1	equ	0xFE6
  4159                           postdec1	equ	0xFE5
  4160                           fsr1h	equ	0xFE2
  4161                           fsr1l	equ	0xFE1
  4162                           indf2	equ	0xFDF
  4163                           postinc2	equ	0xFDE
  4164                           postdec2	equ	0xFDD
  4165                           fsr2h	equ	0xFDA
  4166                           fsr2l	equ	0xFD9
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function _strlen *****************
  4170 ;; Defined at:
  4171 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  4174 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  4177 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
  4178 ;; Return value:  Size  Location     Type
  4179 ;;                  2    0[BANK0 ] unsigned int 
  4180 ;; Registers used:
  4181 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4187 ;;      Params:         0       2       0       0       0       0       0       0       0
  4188 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4189 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4190 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4191 ;;Total ram usage:        6 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:    3
  4194 ;; This function calls:
  4195 ;;		Nothing
  4196 ;; This function is called by:
  4197 ;;		_monta_sd
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text23
  4202  001532                     __ptext23:
  4203                           	opt stack 0
  4204  001532                     _strlen:
  4205                           	opt stack 25
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;incstack = 0
  4209  001532  C0C4  F0C8         	movff	strlen@s,strlen@cp
  4210  001536  C0C5  F0C9         	movff	strlen@s+1,strlen@cp+1
  4211  00153A  D003               	goto	l1936
  4212  00153C  0100               	movlb	0	; () banked
  4213  00153E  4BC8               	infsnz	strlen@cp& (0+255),f,b
  4214  001540  2BC9               	incf	(strlen@cp+1)& (0+255),f,b
  4215  001542                     l1936:
  4216                           
  4217                           ; BSR set to: 0
  4218  001542  C0C8  FFD9         	movff	strlen@cp,fsr2l
  4219  001546  C0C9  FFDA         	movff	strlen@cp+1,fsr2h
  4220  00154A  50DF               	movf	indf2,w,c
  4221  00154C  A4D8               	btfss	status,2,c
  4222  00154E  D7F6               	goto	l1937
  4223  001550  C0C4  F0C6         	movff	strlen@s,??_strlen
  4224  001554  C0C5  F0C7         	movff	strlen@s+1,??_strlen+1
  4225  001558  0100               	movlb	0	; () banked
  4226  00155A  1FC6               	comf	??_strlen& (0+255),f,b
  4227  00155C  1FC7               	comf	(??_strlen+1)& (0+255),f,b
  4228  00155E  4BC6               	infsnz	??_strlen& (0+255),f,b
  4229  001560  2BC7               	incf	(??_strlen+1)& (0+255),f,b
  4230  001562  51C8               	movf	strlen@cp& (0+255),w,b
  4231  001564  25C6               	addwf	??_strlen& (0+255),w,b
  4232  001566  6FC4               	movwf	?_strlen& (0+255),b
  4233  001568  51C9               	movf	(strlen@cp+1)& (0+255),w,b
  4234  00156A  21C7               	addwfc	(??_strlen+1)& (0+255),w,b
  4235  00156C  6FC5               	movwf	(?_strlen+1)& (0+255),b
  4236  00156E  0012               	return	
  4237  001570                     __end_of_strlen:
  4238                           	opt stack 0
  4239                           tblptru	equ	0xFF8
  4240                           tblptrh	equ	0xFF7
  4241                           tblptrl	equ	0xFF6
  4242                           tablat	equ	0xFF5
  4243                           prodh	equ	0xFF4
  4244                           prodl	equ	0xFF3
  4245                           intcon	equ	0xFF2
  4246                           intcon2	equ	0xFF1
  4247                           intcon3	equ	0xFF0
  4248                           indf0	equ	0xFEF
  4249                           postinc0	equ	0xFEE
  4250                           fsr0h	equ	0xFEA
  4251                           fsr0l	equ	0xFE9
  4252                           wreg	equ	0xFE8
  4253                           indf1	equ	0xFE7
  4254                           postinc1	equ	0xFE6
  4255                           postdec1	equ	0xFE5
  4256                           fsr1h	equ	0xFE2
  4257                           fsr1l	equ	0xFE1
  4258                           indf2	equ	0xFDF
  4259                           postinc2	equ	0xFDE
  4260                           postdec2	equ	0xFDD
  4261                           fsr2h	equ	0xFDA
  4262                           fsr2l	equ	0xFD9
  4263                           status	equ	0xFD8
  4264                           
  4265 ;; *************** function _isr *****************
  4266 ;; Defined at:
  4267 ;;		line 87 in file "main.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;		None
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;  cont            1   31[COMRAM] unsigned char 
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      void 
  4274 ;; Registers used:
  4275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4281 ;;      Params:         0       0       0       0       0       0       0       0       0
  4282 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4283 ;;      Temps:         20       0       0       0       0       0       0       0       0
  4284 ;;      Totals:        21       0       0       0       0       0       0       0       0
  4285 ;;Total ram usage:       21 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    2
  4288 ;; This function calls:
  4289 ;;		_GPSRead
  4290 ;;		_recebe_dado_uart
  4291 ;;		i2_write_timer_zero
  4292 ;; This function is called by:
  4293 ;;		Interrupt level 2
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           	psect	intcode
  4298  000008                     __pintcode:
  4299                           	opt stack 0
  4300  000008                     _isr:
  4301                           	opt stack 24
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;incstack = 0
  4305  000008  8242               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4306  00000A  EDB2  F005         	call	int_func,f	;refresh shadow registers
  4307                           tblptru	equ	0xFF8
  4308                           tblptrh	equ	0xFF7
  4309                           tblptrl	equ	0xFF6
  4310                           tablat	equ	0xFF5
  4311                           prodh	equ	0xFF4
  4312                           prodl	equ	0xFF3
  4313                           intcon	equ	0xFF2
  4314                           intcon2	equ	0xFF1
  4315                           intcon3	equ	0xFF0
  4316                           indf0	equ	0xFEF
  4317                           postinc0	equ	0xFEE
  4318                           fsr0h	equ	0xFEA
  4319                           fsr0l	equ	0xFE9
  4320                           wreg	equ	0xFE8
  4321                           indf1	equ	0xFE7
  4322                           postinc1	equ	0xFE6
  4323                           postdec1	equ	0xFE5
  4324                           fsr1h	equ	0xFE2
  4325                           fsr1l	equ	0xFE1
  4326                           indf2	equ	0xFDF
  4327                           postinc2	equ	0xFDE
  4328                           postdec2	equ	0xFDD
  4329                           fsr2h	equ	0xFDA
  4330                           fsr2l	equ	0xFD9
  4331                           status	equ	0xFD8
  4332                           
  4333                           	psect	intcode_body
  4334  000B64                     __pintcode_body:
  4335                           	opt stack 24
  4336  000B64                     int_func:
  4337                           	opt stack 24
  4338  000B64  0006               	pop		; remove dummy address from shadow register refresh
  4339  000B66  CFFA F02E          	movff	pclath,??_isr+2
  4340  000B6A  CFFB F02F          	movff	pclatu,??_isr+3
  4341  000B6E  CFE9 F030          	movff	fsr0l,??_isr+4
  4342  000B72  CFEA F031          	movff	fsr0h,??_isr+5
  4343  000B76  CFE1 F032          	movff	fsr1l,??_isr+6
  4344  000B7A  CFE2 F033          	movff	fsr1h,??_isr+7
  4345  000B7E  CFD9 F034          	movff	fsr2l,??_isr+8
  4346  000B82  CFDA F035          	movff	fsr2h,??_isr+9
  4347  000B86  CFF3 F036          	movff	prodl,??_isr+10
  4348  000B8A  CFF4 F037          	movff	prodh,??_isr+11
  4349  000B8E  CFF6 F038          	movff	tblptrl,??_isr+12
  4350  000B92  CFF7 F039          	movff	tblptrh,??_isr+13
  4351  000B96  CFF8 F03A          	movff	tblptru,??_isr+14
  4352  000B9A  CFF5 F03B          	movff	tablat,??_isr+15
  4353  000B9E  C042  F03C         	movff	btemp,??_isr+16
  4354  000BA2  C043  F03D         	movff	btemp+1,??_isr+17
  4355  000BA6  C044  F03E         	movff	btemp+2,??_isr+18
  4356  000BAA  C045  F03F         	movff	btemp+3,??_isr+19
  4357                           
  4358                           ;main.c: 89: unsigned char cont;
  4359                           ;main.c: 92: if (PIE1bits.RCIE && PIR1bits.RCIF)
  4360  000BAE  BA9D               	btfsc	3997,5,c	;volatile
  4361  000BB0  AA9E               	btfss	3998,5,c	;volatile
  4362  000BB2  D014               	goto	i2l69
  4363                           
  4364                           ;main.c: 93: {
  4365                           ;main.c: 94: PIR1bits.RCIF = 0;
  4366  000BB4  9A9E               	bcf	3998,5,c	;volatile
  4367                           
  4368                           ;main.c: 95: data_uart_recebe = recebe_dado_uart();
  4369  000BB6  EC4B  F00B         	call	_recebe_dado_uart	;wreg free
  4370  000BBA  6E1D               	movwf	_data_uart_recebe,c
  4371                           
  4372                           ;main.c: 96: GPSRead(data_uart_recebe);
  4373  000BBC  501D               	movf	_data_uart_recebe,w,c
  4374  000BBE  EC66  F004         	call	_GPSRead
  4375                           
  4376                           ;main.c: 97: PORTBbits.RB2 = !PORTBbits.RB2;
  4377  000BC2  B481               	btfsc	3969,2,c	;volatile
  4378  000BC4  D003               	goto	i2u1072_40
  4379  000BC6  6A2C               	clrf	??_isr& (0+255),c
  4380  000BC8  2A2C               	incf	??_isr& (0+255),f,c
  4381  000BCA  D001               	goto	i2u1073_48
  4382  000BCC                     i2u1072_40:
  4383  000BCC  6A2C               	clrf	??_isr& (0+255),c
  4384  000BCE                     i2u1073_48:
  4385  000BCE  462C               	rlncf	??_isr,f,c
  4386  000BD0  462C               	rlncf	??_isr,f,c
  4387  000BD2  5081               	movf	3969,w,c	;volatile
  4388  000BD4  182C               	xorwf	??_isr,w,c
  4389  000BD6  0BFB               	andlw	-5
  4390  000BD8  182C               	xorwf	??_isr,w,c
  4391  000BDA  6E81               	movwf	3969,c	;volatile
  4392  000BDC                     i2l69:
  4393                           
  4394                           ;main.c: 98: }
  4395                           ;main.c: 101: unsigned char cont;
  4396                           ;main.c: 103: if (TMR0IF && T0IF)
  4397  000BDC  B4F2               	btfsc	intcon,2,c	;volatile
  4398  000BDE  A4F2               	btfss	intcon,2,c	;volatile
  4399  000BE0  D037               	goto	i2l70
  4400                           
  4401                           ;main.c: 104: {
  4402                           ;main.c: 105: INTCONbits.TMR0IF = 0;
  4403  000BE2  94F2               	bcf	intcon,2,c	;volatile
  4404                           
  4405                           ;main.c: 106: sinaliza_int_timer = 1;
  4406  000BE4  0E01               	movlw	1
  4407  000BE6  0100               	movlb	0	; () banked
  4408  000BE8  6F70               	movwf	_sinaliza_int_timer& (0+255),b
  4409                           
  4410                           ;main.c: 108: for(cont= 0; cont<2;cont++)
  4411  000BEA  0E00               	movlw	0
  4412  000BEC  6E40               	movwf	isr@cont,c
  4413  000BEE                     i2l8932:
  4414                           
  4415                           ; BSR set to: 0
  4416  000BEE  0E01               	movlw	1
  4417  000BF0  6440               	cpfsgt	isr@cont,c
  4418  000BF2  D001               	goto	i2l71
  4419  000BF4  D019               	goto	i2u1078_40
  4420  000BF6                     i2l71:
  4421                           
  4422                           ;main.c: 109: {
  4423                           ;main.c: 110: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
  4424                           
  4425                           ; BSR set to: 0
  4426  000BF6  5040               	movf	isr@cont,w,c
  4427  000BF8  0D02               	mullw	2
  4428  000BFA  0E01               	movlw	low _tempo_tarefa
  4429  000BFC  24F3               	addwf	prodl,w,c
  4430  000BFE  6ED9               	movwf	fsr2l,c
  4431  000C00  0E00               	movlw	high _tempo_tarefa
  4432  000C02  20F4               	addwfc	prodh,w,c
  4433  000C04  6EDA               	movwf	fsr2h,c
  4434  000C06  50DE               	movf	postinc2,w,c
  4435  000C08  10DE               	iorwf	postinc2,w,c
  4436  000C0A  B4D8               	btfsc	status,2,c
  4437  000C0C  D00B               	goto	i2l73
  4438  000C0E  5040               	movf	isr@cont,w,c
  4439  000C10  0D02               	mullw	2
  4440  000C12  0E01               	movlw	low _tempo_tarefa
  4441  000C14  24F3               	addwf	prodl,w,c
  4442  000C16  6ED9               	movwf	fsr2l,c
  4443  000C18  0E00               	movlw	high _tempo_tarefa
  4444  000C1A  20F4               	addwfc	prodh,w,c
  4445  000C1C  6EDA               	movwf	fsr2h,c
  4446  000C1E  06DE               	decf	postinc2,f,c
  4447  000C20  0E00               	movlw	0
  4448  000C22  5ADD               	subwfb	postdec2,f,c
  4449  000C24                     i2l73:
  4450  000C24  2A40               	incf	isr@cont,f,c
  4451  000C26  D7E3               	goto	i2l8932
  4452  000C28                     i2u1078_40:
  4453                           
  4454                           ;main.c: 111: }
  4455                           ;main.c: 113: if(tarefa_em_execucao == 1)
  4456  000C28  041C               	decf	_tarefa_em_execucao,w,c	;volatile
  4457  000C2A  A4D8               	btfss	status,2,c
  4458  000C2C  D00B               	goto	i2l75
  4459                           
  4460                           ;main.c: 114: {
  4461                           ;main.c: 115: timeout_tarefa--;
  4462  000C2E  0613               	decf	_timeout_tarefa,f,c
  4463  000C30  A0D8               	btfss	status,0,c
  4464  000C32  0614               	decf	_timeout_tarefa+1,f,c
  4465                           
  4466                           ;main.c: 116: if(!timeout_tarefa)
  4467  000C34  5013               	movf	_timeout_tarefa,w,c
  4468  000C36  1014               	iorwf	_timeout_tarefa+1,w,c
  4469  000C38  A4D8               	btfss	status,2,c
  4470  000C3A  D004               	goto	i2l75
  4471                           
  4472                           ;main.c: 117: {
  4473                           ;main.c: 119: PCLATH = 0;
  4474  000C3C  0E00               	movlw	0
  4475  000C3E  6EFA               	movwf	pclath,c	;volatile
  4476                           
  4477                           ;main.c: 120: PCL = 0;
  4478  000C40  0E00               	movlw	0
  4479  000C42  6EF9               	movwf	pcl,c	;volatile
  4480  000C44                     i2l75:
  4481                           
  4482                           ;main.c: 121: }
  4483                           ;main.c: 122: }
  4484                           ;main.c: 125: write_timer_zero(0x0083);
  4485  000C44  0E00               	movlw	0
  4486  000C46  6E22               	movwf	i2write_timer_zero@timer0+1,c
  4487  000C48  0E83               	movlw	131
  4488  000C4A  6E21               	movwf	i2write_timer_zero@timer0,c
  4489  000C4C  EC42  F00B         	call	i2_write_timer_zero	;wreg free
  4490  000C50                     i2l70:
  4491                           
  4492                           ;main.c: 127: }
  4493                           ;main.c: 129: if (INT0IF && INT0IE)
  4494  000C50  B2F2               	btfsc	intcon,1,c	;volatile
  4495  000C52  A8F2               	btfss	intcon,4,c	;volatile
  4496  000C54  D001               	goto	i2l76
  4497                           
  4498                           ;main.c: 130: {
  4499                           ;main.c: 131: INT0IF = 0;
  4500  000C56  92F2               	bcf	intcon,1,c	;volatile
  4501  000C58                     i2l76:
  4502  000C58  C03F  F045         	movff	??_isr+19,btemp+3
  4503  000C5C  C03E  F044         	movff	??_isr+18,btemp+2
  4504  000C60  C03D  F043         	movff	??_isr+17,btemp+1
  4505  000C64  C03C  F042         	movff	??_isr+16,btemp
  4506  000C68  C03B  FFF5         	movff	??_isr+15,tablat
  4507  000C6C  C03A  FFF8         	movff	??_isr+14,tblptru
  4508  000C70  C039  FFF7         	movff	??_isr+13,tblptrh
  4509  000C74  C038  FFF6         	movff	??_isr+12,tblptrl
  4510  000C78  C037  FFF4         	movff	??_isr+11,prodh
  4511  000C7C  C036  FFF3         	movff	??_isr+10,prodl
  4512  000C80  C035  FFDA         	movff	??_isr+9,fsr2h
  4513  000C84  C034  FFD9         	movff	??_isr+8,fsr2l
  4514  000C88  C033  FFE2         	movff	??_isr+7,fsr1h
  4515  000C8C  C032  FFE1         	movff	??_isr+6,fsr1l
  4516  000C90  C031  FFEA         	movff	??_isr+5,fsr0h
  4517  000C94  C030  FFE9         	movff	??_isr+4,fsr0l
  4518  000C98  C02F  FFFB         	movff	??_isr+3,pclatu
  4519  000C9C  C02E  FFFA         	movff	??_isr+2,pclath
  4520  000CA0  9242               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4521  000CA2  0011               	retfie		f
  4522  000CA4                     __end_of_isr:
  4523                           	opt stack 0
  4524                           pclatu	equ	0xFFB
  4525                           pclath	equ	0xFFA
  4526                           pcl	equ	0xFF9
  4527                           tblptru	equ	0xFF8
  4528                           tblptrh	equ	0xFF7
  4529                           tblptrl	equ	0xFF6
  4530                           tablat	equ	0xFF5
  4531                           prodh	equ	0xFF4
  4532                           prodl	equ	0xFF3
  4533                           intcon	equ	0xFF2
  4534                           intcon2	equ	0xFF1
  4535                           intcon3	equ	0xFF0
  4536                           indf0	equ	0xFEF
  4537                           postinc0	equ	0xFEE
  4538                           fsr0h	equ	0xFEA
  4539                           fsr0l	equ	0xFE9
  4540                           wreg	equ	0xFE8
  4541                           indf1	equ	0xFE7
  4542                           postinc1	equ	0xFE6
  4543                           postdec1	equ	0xFE5
  4544                           fsr1h	equ	0xFE2
  4545                           fsr1l	equ	0xFE1
  4546                           indf2	equ	0xFDF
  4547                           postinc2	equ	0xFDE
  4548                           postdec2	equ	0xFDD
  4549                           fsr2h	equ	0xFDA
  4550                           fsr2l	equ	0xFD9
  4551                           status	equ	0xFD8
  4552                           
  4553 ;; *************** function i2_write_timer_zero *****************
  4554 ;; Defined at:
  4555 ;;		line 138 in file "bibliotecas/hardware.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  timer0          2    0[COMRAM] unsigned int 
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;  write_timer_    2    2[COMRAM] struct Timers
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  1    wreg      void 
  4562 ;; Registers used:
  4563 ;;		None
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4569 ;;      Params:         2       0       0       0       0       0       0       0       0
  4570 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4571 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4572 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4573 ;;Total ram usage:        4 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; This function calls:
  4576 ;;		Nothing
  4577 ;; This function is called by:
  4578 ;;		_isr
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           	psect	text25
  4583  001684                     __ptext25:
  4584                           	opt stack 0
  4585  001684                     i2_write_timer_zero:
  4586                           	opt stack 25
  4587                           
  4588                           ;hardware.c: 140: union Timers timer;
  4589                           ;hardware.c: 142: timer.lt = timer0;
  4590                           
  4591                           ;incstack = 0
  4592  001684  C021  F023         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
  4593  001688  C022  F024         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
  4594                           
  4595                           ;hardware.c: 144: TMR0H = timer.bt[1];
  4596  00168C  C024  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
  4597                           
  4598                           ;hardware.c: 145: TMR0L = timer.bt[0];
  4599  001690  C023  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
  4600  001694  0012               	return		;funcret
  4601  001696                     __end_ofi2_write_timer_zero:
  4602                           	opt stack 0
  4603                           pclatu	equ	0xFFB
  4604                           pclath	equ	0xFFA
  4605                           pcl	equ	0xFF9
  4606                           tblptru	equ	0xFF8
  4607                           tblptrh	equ	0xFF7
  4608                           tblptrl	equ	0xFF6
  4609                           tablat	equ	0xFF5
  4610                           prodh	equ	0xFF4
  4611                           prodl	equ	0xFF3
  4612                           intcon	equ	0xFF2
  4613                           intcon2	equ	0xFF1
  4614                           intcon3	equ	0xFF0
  4615                           indf0	equ	0xFEF
  4616                           postinc0	equ	0xFEE
  4617                           fsr0h	equ	0xFEA
  4618                           fsr0l	equ	0xFE9
  4619                           wreg	equ	0xFE8
  4620                           indf1	equ	0xFE7
  4621                           postinc1	equ	0xFE6
  4622                           postdec1	equ	0xFE5
  4623                           fsr1h	equ	0xFE2
  4624                           fsr1l	equ	0xFE1
  4625                           indf2	equ	0xFDF
  4626                           postinc2	equ	0xFDE
  4627                           postdec2	equ	0xFDD
  4628                           fsr2h	equ	0xFDA
  4629                           fsr2l	equ	0xFD9
  4630                           status	equ	0xFD8
  4631                           
  4632 ;; *************** function _recebe_dado_uart *****************
  4633 ;; Defined at:
  4634 ;;		line 138 in file "bibliotecas/uart.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;		None
  4637 ;; Auto vars:     Size  Location     Type
  4638 ;;		None
  4639 ;; Return value:  Size  Location     Type
  4640 ;;                  1    wreg      unsigned char 
  4641 ;; Registers used:
  4642 ;;		wreg, status,2
  4643 ;; Tracked objects:
  4644 ;;		On entry : 0/0
  4645 ;;		On exit  : 0/0
  4646 ;;		Unchanged: 0/0
  4647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4648 ;;      Params:         0       0       0       0       0       0       0       0       0
  4649 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4650 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4651 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4652 ;;Total ram usage:        0 bytes
  4653 ;; Hardware stack levels used:    1
  4654 ;; This function calls:
  4655 ;;		Nothing
  4656 ;; This function is called by:
  4657 ;;		_isr
  4658 ;;		_recebe_string_uart
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	text26
  4663  001696                     __ptext26:
  4664                           	opt stack 0
  4665  001696                     _recebe_dado_uart:
  4666                           	opt stack 25
  4667                           
  4668                           ;uart.c: 140: while(RCIF==0);
  4669                           
  4670                           ;incstack = 0
  4671  001696  AA9E               	btfss	3998,5,c	;volatile
  4672  001698  D7FE               	goto	_recebe_dado_uart
  4673                           
  4674                           ;uart.c: 141: if(RCSTAbits.OERR)
  4675  00169A  A2AB               	btfss	4011,1,c	;volatile
  4676  00169C  D003               	goto	i2l810
  4677                           
  4678                           ;uart.c: 142: {
  4679                           ;uart.c: 143: CREN = 0;
  4680  00169E  98AB               	bcf	4011,4,c	;volatile
  4681                           
  4682                           ;uart.c: 144: __nop();
  4683  0016A0  F000               	nop	
  4684                           
  4685                           ;uart.c: 145: CREN=1;
  4686  0016A2  88AB               	bsf	4011,4,c	;volatile
  4687  0016A4                     i2l810:
  4688                           
  4689                           ;uart.c: 146: }
  4690                           ;uart.c: 147: return(RCREG);
  4691  0016A4  50AE               	movf	4014,w,c	;volatile
  4692  0016A6  0012               	return	
  4693  0016A8                     __end_of_recebe_dado_uart:
  4694                           	opt stack 0
  4695                           pclatu	equ	0xFFB
  4696                           pclath	equ	0xFFA
  4697                           pcl	equ	0xFF9
  4698                           tblptru	equ	0xFF8
  4699                           tblptrh	equ	0xFF7
  4700                           tblptrl	equ	0xFF6
  4701                           tablat	equ	0xFF5
  4702                           prodh	equ	0xFF4
  4703                           prodl	equ	0xFF3
  4704                           intcon	equ	0xFF2
  4705                           intcon2	equ	0xFF1
  4706                           intcon3	equ	0xFF0
  4707                           indf0	equ	0xFEF
  4708                           postinc0	equ	0xFEE
  4709                           fsr0h	equ	0xFEA
  4710                           fsr0l	equ	0xFE9
  4711                           wreg	equ	0xFE8
  4712                           indf1	equ	0xFE7
  4713                           postinc1	equ	0xFE6
  4714                           postdec1	equ	0xFE5
  4715                           fsr1h	equ	0xFE2
  4716                           fsr1l	equ	0xFE1
  4717                           indf2	equ	0xFDF
  4718                           postinc2	equ	0xFDE
  4719                           postdec2	equ	0xFDD
  4720                           fsr2h	equ	0xFDA
  4721                           fsr2l	equ	0xFD9
  4722                           status	equ	0xFD8
  4723                           
  4724 ;; *************** function _GPSRead *****************
  4725 ;; Defined at:
  4726 ;;		line 468 in file "bibliotecas/GPS.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;  buff            1    wreg     unsigned char 
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;  buff            1    9[COMRAM] unsigned char 
  4731 ;;  c               1   10[COMRAM] unsigned char 
  4732 ;; Return value:  Size  Location     Type
  4733 ;;                  2    8[None  ] int 
  4734 ;; Registers used:
  4735 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4736 ;; Tracked objects:
  4737 ;;		On entry : 0/0
  4738 ;;		On exit  : 0/0
  4739 ;;		Unchanged: 0/0
  4740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4741 ;;      Params:         0       0       0       0       0       0       0       0       0
  4742 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4743 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4744 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4745 ;;Total ram usage:        2 bytes
  4746 ;; Hardware stack levels used:    1
  4747 ;; Hardware stack levels required when called:    1
  4748 ;; This function calls:
  4749 ;;		_strcmp
  4750 ;;		_stringcpy
  4751 ;; This function is called by:
  4752 ;;		_isr
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           	psect	text27
  4757  0008CC                     __ptext27:
  4758                           	opt stack 0
  4759  0008CC                     _GPSRead:
  4760                           	opt stack 24
  4761                           
  4762                           ;incstack = 0
  4763                           ;GPSRead@buff stored from wreg
  4764  0008CC  6E2A               	movwf	GPSRead@buff,c
  4765                           
  4766                           ;GPS.c: 470: uint8_t c = buff;
  4767  0008CE  C02A  F02B         	movff	GPSRead@buff,GPSRead@c
  4768                           
  4769                           ;GPS.c: 472: switch(c) {
  4770  0008D2  D13D               	goto	i2l147
  4771  0008D4                     
  4772                           ;GPS.c: 474: if(SentenceType == 1)
  4773  0008D4  041A               	decf	_SentenceType,w,c
  4774  0008D6  A4D8               	btfss	status,2,c
  4775  0008D8  D004               	goto	i2l149
  4776                           
  4777                           ;GPS.c: 475: GPRMC_ok = 1;
  4778  0008DA  0E00               	movlw	0
  4779  0008DC  6E12               	movwf	_GPRMC_ok+1,c
  4780  0008DE  0E01               	movlw	1
  4781  0008E0  6E11               	movwf	_GPRMC_ok,c
  4782  0008E2                     i2l149:
  4783                           
  4784                           ;GPS.c: 476: if(SentenceType == 2)
  4785  0008E2  0E02               	movlw	2
  4786  0008E4  181A               	xorwf	_SentenceType,w,c
  4787  0008E6  A4D8               	btfss	status,2,c
  4788  0008E8  D004               	goto	i2l150
  4789                           
  4790                           ;GPS.c: 477: GPGGA_ok = 1;
  4791  0008EA  0E00               	movlw	0
  4792  0008EC  6E10               	movwf	_GPGGA_ok+1,c
  4793  0008EE  0E01               	movlw	1
  4794  0008F0  6E0F               	movwf	_GPGGA_ok,c
  4795  0008F2                     i2l150:
  4796                           
  4797                           ;GPS.c: 478: if(GPRMC_ok && GPGGA_ok) {
  4798  0008F2  5011               	movf	_GPRMC_ok,w,c
  4799  0008F4  1012               	iorwf	_GPRMC_ok+1,w,c
  4800  0008F6  B4D8               	btfsc	status,2,c
  4801  0008F8  0012               	return	
  4802  0008FA  500F               	movf	_GPGGA_ok,w,c
  4803  0008FC  1010               	iorwf	_GPGGA_ok+1,w,c
  4804  0008FE  B4D8               	btfsc	status,2,c
  4805  000900  0012               	return	
  4806                           
  4807                           ;GPS.c: 479: GPRMC_ok = GPGGA_ok = 0;
  4808  000902  0E00               	movlw	0
  4809  000904  6E10               	movwf	_GPGGA_ok+1,c
  4810  000906  0E00               	movlw	0
  4811  000908  6E0F               	movwf	_GPGGA_ok,c
  4812  00090A  C00F  F011         	movff	_GPGGA_ok,_GPRMC_ok
  4813  00090E  C010  F012         	movff	_GPGGA_ok+1,_GPRMC_ok+1
  4814                           
  4815                           ;GPS.c: 481: }
  4816                           ;GPS.c: 482: break;
  4817                           
  4818                           ;GPS.c: 480: return 1;
  4819                           ;	Return value of _GPSRead is never used
  4820  000912  0012               	return	
  4821  000914                     
  4822                           ;GPS.c: 485: Term = char_number = 0;
  4823  000914  0E00               	movlw	0
  4824  000916  6E1B               	movwf	_char_number,c
  4825  000918  C01B  F019         	movff	_char_number,_Term
  4826                           
  4827                           ;GPS.c: 486: break;
  4828  00091C  0012               	return	
  4829  00091E                     
  4830                           ;GPS.c: 489: buffer[char_number] = '\0';
  4831  00091E  501B               	movf	_char_number,w,c
  4832  000920  0D01               	mullw	1
  4833  000922  0E8D               	movlw	low _buffer
  4834  000924  24F3               	addwf	prodl,w,c
  4835  000926  6ED9               	movwf	fsr2l,c
  4836  000928  0E00               	movlw	high _buffer
  4837  00092A  20F4               	addwfc	prodh,w,c
  4838  00092C  6EDA               	movwf	fsr2h,c
  4839  00092E  0E00               	movlw	0
  4840  000930  6EDF               	movwf	indf2,c
  4841                           
  4842                           ;GPS.c: 490: if(Term == 0) {
  4843  000932  5019               	movf	_Term,w,c
  4844  000934  A4D8               	btfss	status,2,c
  4845  000936  D030               	goto	i2l160
  4846                           
  4847                           ;GPS.c: 491: stringcpy(buffer, sentence, 0);
  4848  000938  0E8D               	movlw	low _buffer
  4849  00093A  6E21               	movwf	stringcpy@str1,c
  4850  00093C  0E00               	movlw	high _buffer
  4851  00093E  6E22               	movwf	stringcpy@str1+1,c
  4852  000940  0EBE               	movlw	low _sentence
  4853  000942  6E23               	movwf	stringcpy@str2,c
  4854  000944  0E00               	movlw	high _sentence
  4855  000946  6E24               	movwf	stringcpy@str2+1,c
  4856  000948  0E00               	movlw	0
  4857  00094A  6E26               	movwf	stringcpy@dir+1,c
  4858  00094C  0E00               	movlw	0
  4859  00094E  6E25               	movwf	stringcpy@dir,c
  4860  000950  EC2D  F00A         	call	_stringcpy	;wreg free
  4861                           
  4862                           ;GPS.c: 492: if(strcmp(sentence, "GPRMC") == 0)
  4863  000954  0EBE               	movlw	low _sentence
  4864  000956  6E21               	movwf	strcmp@s1,c
  4865  000958  0E00               	movlw	high _sentence
  4866  00095A  6E22               	movwf	strcmp@s1+1,c
  4867  00095C  0EBD               	movlw	low STR_1
  4868  00095E  6E23               	movwf	strcmp@s2,c
  4869  000960  0E08               	movlw	high STR_1
  4870  000962  6E24               	movwf	strcmp@s2+1,c
  4871  000964  EC54  F00A         	call	_strcmp	;wreg free
  4872  000968  5021               	movf	?_strcmp,w,c
  4873  00096A  1022               	iorwf	?_strcmp+1,w,c
  4874  00096C  A4D8               	btfss	status,2,c
  4875  00096E  D002               	goto	i2l157
  4876                           
  4877                           ;GPS.c: 493: SentenceType = 1;
  4878  000970  0E01               	movlw	1
  4879  000972  D011               	goto	L2
  4880  000974                     i2l157:
  4881                           
  4882                           ;GPS.c: 494: else if(strcmp(sentence, "GPGGA") == 0)
  4883  000974  0EBE               	movlw	low _sentence
  4884  000976  6E21               	movwf	strcmp@s1,c
  4885  000978  0E00               	movlw	high _sentence
  4886  00097A  6E22               	movwf	strcmp@s1+1,c
  4887  00097C  0EB7               	movlw	low STR_2
  4888  00097E  6E23               	movwf	strcmp@s2,c
  4889  000980  0E08               	movlw	high STR_2
  4890  000982  6E24               	movwf	strcmp@s2+1,c
  4891  000984  EC54  F00A         	call	_strcmp	;wreg free
  4892  000988  5021               	movf	?_strcmp,w,c
  4893  00098A  1022               	iorwf	?_strcmp+1,w,c
  4894  00098C  A4D8               	btfss	status,2,c
  4895  00098E  D002               	goto	i2l159
  4896                           
  4897                           ;GPS.c: 495: SentenceType = 2;
  4898  000990  0E02               	movlw	2
  4899  000992  D001               	goto	L2
  4900  000994                     i2l159:
  4901                           
  4902                           ;GPS.c: 496: else
  4903                           ;GPS.c: 497: SentenceType = 3;
  4904  000994  0E03               	movlw	3
  4905  000996                     L2:
  4906  000996  6E1A               	movwf	_SentenceType,c
  4907  000998                     i2l160:
  4908                           
  4909                           ;GPS.c: 498: }
  4910                           ;GPS.c: 501: if(Term == 1 && SentenceType == 1) {
  4911  000998  0419               	decf	_Term,w,c
  4912  00099A  A4D8               	btfss	status,2,c
  4913  00099C  D011               	goto	i2l161
  4914  00099E  041A               	decf	_SentenceType,w,c
  4915  0009A0  A4D8               	btfss	status,2,c
  4916  0009A2  D00E               	goto	i2l161
  4917                           
  4918                           ;GPS.c: 502: stringcpy(buffer, rawTime, 0);
  4919  0009A4  0E8D               	movlw	low _buffer
  4920  0009A6  6E21               	movwf	stringcpy@str1,c
  4921  0009A8  0E00               	movlw	high _buffer
  4922  0009AA  6E22               	movwf	stringcpy@str1+1,c
  4923  0009AC  0E99               	movlw	low _rawTime
  4924  0009AE  6E23               	movwf	stringcpy@str2,c
  4925  0009B0  0E00               	movlw	high _rawTime
  4926  0009B2  6E24               	movwf	stringcpy@str2+1,c
  4927  0009B4  0E00               	movlw	0
  4928  0009B6  6E26               	movwf	stringcpy@dir+1,c
  4929  0009B8  0E00               	movlw	0
  4930  0009BA  6E25               	movwf	stringcpy@dir,c
  4931  0009BC  EC2D  F00A         	call	_stringcpy	;wreg free
  4932  0009C0                     i2l161:
  4933                           
  4934                           ;GPS.c: 503: }
  4935                           ;GPS.c: 506: if((Term == 3) && (SentenceType == 1)) {
  4936  0009C0  0E03               	movlw	3
  4937  0009C2  1819               	xorwf	_Term,w,c
  4938  0009C4  A4D8               	btfss	status,2,c
  4939  0009C6  D011               	goto	i2l162
  4940  0009C8  041A               	decf	_SentenceType,w,c
  4941  0009CA  A4D8               	btfss	status,2,c
  4942  0009CC  D00E               	goto	i2l162
  4943                           
  4944                           ;GPS.c: 507: stringcpy(buffer, rawLatitude, 1);
  4945  0009CE  0E8D               	movlw	low _buffer
  4946  0009D0  6E21               	movwf	stringcpy@str1,c
  4947  0009D2  0E00               	movlw	high _buffer
  4948  0009D4  6E22               	movwf	stringcpy@str1+1,c
  4949  0009D6  0E4D               	movlw	low _rawLatitude
  4950  0009D8  6E23               	movwf	stringcpy@str2,c
  4951  0009DA  0E01               	movlw	high _rawLatitude
  4952  0009DC  6E24               	movwf	stringcpy@str2+1,c
  4953  0009DE  0E00               	movlw	0
  4954  0009E0  6E26               	movwf	stringcpy@dir+1,c
  4955  0009E2  0E01               	movlw	1
  4956  0009E4  6E25               	movwf	stringcpy@dir,c
  4957  0009E6  EC2D  F00A         	call	_stringcpy	;wreg free
  4958  0009EA                     i2l162:
  4959                           
  4960                           ;GPS.c: 508: }
  4961                           ;GPS.c: 510: if((Term == 4) && (SentenceType == 1)) {
  4962  0009EA  0E04               	movlw	4
  4963  0009EC  1819               	xorwf	_Term,w,c
  4964  0009EE  A4D8               	btfss	status,2,c
  4965  0009F0  D00D               	goto	i2l165
  4966  0009F2  041A               	decf	_SentenceType,w,c
  4967  0009F4  A4D8               	btfss	status,2,c
  4968  0009F6  D00A               	goto	i2l165
  4969                           
  4970                           ;GPS.c: 511: if(buffer[0] == 'N')
  4971  0009F8  0E4E               	movlw	78
  4972  0009FA  0100               	movlb	0	; () banked
  4973  0009FC  198D               	xorwf	_buffer& (0+255),w,b
  4974  0009FE  A4D8               	btfss	status,2,c
  4975  000A00  D002               	goto	i2l164
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;GPS.c: 512: rawLatitude[0] = '0';
  4979  000A02  0E30               	movlw	48
  4980  000A04  D001               	goto	L3
  4981  000A06                     i2l164:
  4982                           
  4983                           ;GPS.c: 513: else
  4984                           ;GPS.c: 514: rawLatitude[0] = '-';
  4985                           
  4986                           ; BSR set to: 1
  4987  000A06  0E2D               	movlw	45
  4988  000A08                     L3:
  4989  000A08  0101               	movlb	1	; () banked
  4990  000A0A  6F4D               	movwf	_rawLatitude& (0+255),b
  4991  000A0C                     i2l165:
  4992                           
  4993                           ;GPS.c: 515: }
  4994                           ;GPS.c: 518: if((Term == 5) && (SentenceType == 1)) {
  4995                           
  4996                           ; BSR set to: 1
  4997                           
  4998                           ; BSR set to: 1
  4999  000A0C  0E05               	movlw	5
  5000  000A0E  1819               	xorwf	_Term,w,c
  5001  000A10  A4D8               	btfss	status,2,c
  5002  000A12  D011               	goto	i2l166
  5003  000A14  041A               	decf	_SentenceType,w,c
  5004  000A16  A4D8               	btfss	status,2,c
  5005  000A18  D00E               	goto	i2l166
  5006                           
  5007                           ;GPS.c: 519: stringcpy(buffer, rawLongitude, 1);
  5008  000A1A  0E8D               	movlw	low _buffer
  5009  000A1C  6E21               	movwf	stringcpy@str1,c
  5010  000A1E  0E00               	movlw	high _buffer
  5011  000A20  6E22               	movwf	stringcpy@str1+1,c
  5012  000A22  0E40               	movlw	low _rawLongitude
  5013  000A24  6E23               	movwf	stringcpy@str2,c
  5014  000A26  0E01               	movlw	high _rawLongitude
  5015  000A28  6E24               	movwf	stringcpy@str2+1,c
  5016  000A2A  0E00               	movlw	0
  5017  000A2C  6E26               	movwf	stringcpy@dir+1,c
  5018  000A2E  0E01               	movlw	1
  5019  000A30  6E25               	movwf	stringcpy@dir,c
  5020  000A32  EC2D  F00A         	call	_stringcpy	;wreg free
  5021  000A36                     i2l166:
  5022                           
  5023                           ;GPS.c: 520: }
  5024                           ;GPS.c: 522: if((Term == 6) && (SentenceType == 1)) {
  5025  000A36  0E06               	movlw	6
  5026  000A38  1819               	xorwf	_Term,w,c
  5027  000A3A  A4D8               	btfss	status,2,c
  5028  000A3C  D00D               	goto	i2l169
  5029  000A3E  041A               	decf	_SentenceType,w,c
  5030  000A40  A4D8               	btfss	status,2,c
  5031  000A42  D00A               	goto	i2l169
  5032                           
  5033                           ;GPS.c: 523: if(buffer[0] == 'E')
  5034  000A44  0E45               	movlw	69
  5035  000A46  0100               	movlb	0	; () banked
  5036  000A48  198D               	xorwf	_buffer& (0+255),w,b
  5037  000A4A  A4D8               	btfss	status,2,c
  5038  000A4C  D002               	goto	i2l168
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;GPS.c: 524: rawLongitude[0] = '0';
  5042  000A4E  0E30               	movlw	48
  5043  000A50  D001               	goto	L4
  5044  000A52                     i2l168:
  5045                           
  5046                           ;GPS.c: 525: else
  5047                           ;GPS.c: 526: rawLongitude[0] = '-';
  5048                           
  5049                           ; BSR set to: 1
  5050  000A52  0E2D               	movlw	45
  5051  000A54                     L4:
  5052  000A54  0101               	movlb	1	; () banked
  5053  000A56  6F40               	movwf	_rawLongitude& (0+255),b
  5054  000A58                     i2l169:
  5055                           
  5056                           ;GPS.c: 527: }
  5057                           ;GPS.c: 530: if((Term == 7) && (SentenceType == 1)) {
  5058                           
  5059                           ; BSR set to: 1
  5060                           
  5061                           ; BSR set to: 1
  5062  000A58  0E07               	movlw	7
  5063  000A5A  1819               	xorwf	_Term,w,c
  5064  000A5C  A4D8               	btfss	status,2,c
  5065  000A5E  D011               	goto	i2l170
  5066  000A60  041A               	decf	_SentenceType,w,c
  5067  000A62  A4D8               	btfss	status,2,c
  5068  000A64  D00E               	goto	i2l170
  5069                           
  5070                           ;GPS.c: 531: stringcpy(buffer, rawSpeed, 0);
  5071  000A66  0E8D               	movlw	low _buffer
  5072  000A68  6E21               	movwf	stringcpy@str1,c
  5073  000A6A  0E00               	movlw	high _buffer
  5074  000A6C  6E22               	movwf	stringcpy@str1+1,c
  5075  000A6E  0EB8               	movlw	low _rawSpeed
  5076  000A70  6E23               	movwf	stringcpy@str2,c
  5077  000A72  0E00               	movlw	high _rawSpeed
  5078  000A74  6E24               	movwf	stringcpy@str2+1,c
  5079  000A76  0E00               	movlw	0
  5080  000A78  6E26               	movwf	stringcpy@dir+1,c
  5081  000A7A  0E00               	movlw	0
  5082  000A7C  6E25               	movwf	stringcpy@dir,c
  5083  000A7E  EC2D  F00A         	call	_stringcpy	;wreg free
  5084  000A82                     i2l170:
  5085                           
  5086                           ;GPS.c: 532: }
  5087                           ;GPS.c: 535: if((Term == 8) && (SentenceType == 1)) {
  5088  000A82  0E08               	movlw	8
  5089  000A84  1819               	xorwf	_Term,w,c
  5090  000A86  A4D8               	btfss	status,2,c
  5091  000A88  D011               	goto	i2l171
  5092  000A8A  041A               	decf	_SentenceType,w,c
  5093  000A8C  A4D8               	btfss	status,2,c
  5094  000A8E  D00E               	goto	i2l171
  5095                           
  5096                           ;GPS.c: 536: stringcpy(buffer, rawCourse, 0);
  5097  000A90  0E8D               	movlw	low _buffer
  5098  000A92  6E21               	movwf	stringcpy@str1,c
  5099  000A94  0E00               	movlw	high _buffer
  5100  000A96  6E22               	movwf	stringcpy@str1+1,c
  5101  000A98  0EB2               	movlw	low _rawCourse
  5102  000A9A  6E23               	movwf	stringcpy@str2,c
  5103  000A9C  0E00               	movlw	high _rawCourse
  5104  000A9E  6E24               	movwf	stringcpy@str2+1,c
  5105  000AA0  0E00               	movlw	0
  5106  000AA2  6E26               	movwf	stringcpy@dir+1,c
  5107  000AA4  0E00               	movlw	0
  5108  000AA6  6E25               	movwf	stringcpy@dir,c
  5109  000AA8  EC2D  F00A         	call	_stringcpy	;wreg free
  5110  000AAC                     i2l171:
  5111                           
  5112                           ;GPS.c: 537: }
  5113                           ;GPS.c: 540: if(Term == 9 && SentenceType == 1) {
  5114  000AAC  0E09               	movlw	9
  5115  000AAE  1819               	xorwf	_Term,w,c
  5116  000AB0  A4D8               	btfss	status,2,c
  5117  000AB2  D011               	goto	i2l172
  5118  000AB4  041A               	decf	_SentenceType,w,c
  5119  000AB6  A4D8               	btfss	status,2,c
  5120  000AB8  D00E               	goto	i2l172
  5121                           
  5122                           ;GPS.c: 541: stringcpy(buffer, rawDate, 0);
  5123  000ABA  0E8D               	movlw	low _buffer
  5124  000ABC  6E21               	movwf	stringcpy@str1,c
  5125  000ABE  0E00               	movlw	high _buffer
  5126  000AC0  6E22               	movwf	stringcpy@str1+1,c
  5127  000AC2  0EAB               	movlw	low _rawDate
  5128  000AC4  6E23               	movwf	stringcpy@str2,c
  5129  000AC6  0E00               	movlw	high _rawDate
  5130  000AC8  6E24               	movwf	stringcpy@str2+1,c
  5131  000ACA  0E00               	movlw	0
  5132  000ACC  6E26               	movwf	stringcpy@dir+1,c
  5133  000ACE  0E00               	movlw	0
  5134  000AD0  6E25               	movwf	stringcpy@dir,c
  5135  000AD2  EC2D  F00A         	call	_stringcpy	;wreg free
  5136  000AD6                     i2l172:
  5137                           
  5138                           ;GPS.c: 542: }
  5139                           ;GPS.c: 545: if((Term == 7) && (SentenceType == 2)) {
  5140  000AD6  0E07               	movlw	7
  5141  000AD8  1819               	xorwf	_Term,w,c
  5142  000ADA  A4D8               	btfss	status,2,c
  5143  000ADC  D012               	goto	i2l173
  5144  000ADE  0E02               	movlw	2
  5145  000AE0  181A               	xorwf	_SentenceType,w,c
  5146  000AE2  A4D8               	btfss	status,2,c
  5147  000AE4  D00E               	goto	i2l173
  5148                           
  5149                           ;GPS.c: 546: stringcpy(buffer, rawSatellites, 0);
  5150  000AE6  0E8D               	movlw	low _buffer
  5151  000AE8  6E21               	movwf	stringcpy@str1,c
  5152  000AEA  0E00               	movlw	high _buffer
  5153  000AEC  6E22               	movwf	stringcpy@str1+1,c
  5154  000AEE  0E1E               	movlw	low _rawSatellites
  5155  000AF0  6E23               	movwf	stringcpy@str2,c
  5156  000AF2  0E00               	movlw	high _rawSatellites
  5157  000AF4  6E24               	movwf	stringcpy@str2+1,c
  5158  000AF6  0E00               	movlw	0
  5159  000AF8  6E26               	movwf	stringcpy@dir+1,c
  5160  000AFA  0E00               	movlw	0
  5161  000AFC  6E25               	movwf	stringcpy@dir,c
  5162  000AFE  EC2D  F00A         	call	_stringcpy	;wreg free
  5163  000B02                     i2l173:
  5164                           
  5165                           ;GPS.c: 547: }
  5166                           ;GPS.c: 550: if((Term == 9) && (SentenceType == 2)) {
  5167  000B02  0E09               	movlw	9
  5168  000B04  1819               	xorwf	_Term,w,c
  5169  000B06  A4D8               	btfss	status,2,c
  5170  000B08  D012               	goto	i2l174
  5171  000B0A  0E02               	movlw	2
  5172  000B0C  181A               	xorwf	_SentenceType,w,c
  5173  000B0E  A4D8               	btfss	status,2,c
  5174  000B10  D00E               	goto	i2l174
  5175                           
  5176                           ;GPS.c: 551: stringcpy(buffer, rawAltitude, 0);
  5177  000B12  0E8D               	movlw	low _buffer
  5178  000B14  6E21               	movwf	stringcpy@str1,c
  5179  000B16  0E00               	movlw	high _buffer
  5180  000B18  6E22               	movwf	stringcpy@str1+1,c
  5181  000B1A  0EA4               	movlw	low _rawAltitude
  5182  000B1C  6E23               	movwf	stringcpy@str2,c
  5183  000B1E  0E00               	movlw	high _rawAltitude
  5184  000B20  6E24               	movwf	stringcpy@str2+1,c
  5185  000B22  0E00               	movlw	0
  5186  000B24  6E26               	movwf	stringcpy@dir+1,c
  5187  000B26  0E00               	movlw	0
  5188  000B28  6E25               	movwf	stringcpy@dir,c
  5189  000B2A  EC2D  F00A         	call	_stringcpy	;wreg free
  5190  000B2E                     i2l174:
  5191                           
  5192                           ;GPS.c: 552: }
  5193                           ;GPS.c: 553: Term++;
  5194  000B2E  2A19               	incf	_Term,f,c
  5195                           
  5196                           ;GPS.c: 554: char_number = 0;
  5197  000B30  0E00               	movlw	0
  5198  000B32  6E1B               	movwf	_char_number,c
  5199                           
  5200                           ;GPS.c: 555: break;
  5201  000B34  0012               	return	
  5202  000B36                     
  5203                           ;GPS.c: 558: buffer[char_number++] = c;
  5204  000B36  501B               	movf	_char_number,w,c
  5205  000B38  0D01               	mullw	1
  5206  000B3A  0E8D               	movlw	low _buffer
  5207  000B3C  24F3               	addwf	prodl,w,c
  5208  000B3E  6ED9               	movwf	fsr2l,c
  5209  000B40  0E00               	movlw	high _buffer
  5210  000B42  20F4               	addwfc	prodh,w,c
  5211  000B44  6EDA               	movwf	fsr2h,c
  5212  000B46  C02B  FFDF         	movff	GPSRead@c,indf2
  5213  000B4A  2A1B               	incf	_char_number,f,c
  5214                           
  5215                           ;GPS.c: 560: }
  5216                           
  5217                           ;GPS.c: 559: break;
  5218  000B4C  0012               	return	
  5219  000B4E                     i2l147:
  5220  000B4E  502B               	movf	GPSRead@c,w,c
  5221                           
  5222                           ; Switch size 1, requested type "space"
  5223                           ; Number of cases is 3, Range of values is 13 to 44
  5224                           ; switch strategies available:
  5225                           ; Name         Instructions Cycles
  5226                           ; simple_byte           10     6 (average)
  5227                           ;	Chosen strategy is simple_byte
  5228  000B50  0A0D               	xorlw	13	; case 13
  5229  000B52  B4D8               	btfsc	status,2,c
  5230  000B54  D6BF               	goto	i2l148
  5231  000B56  0A29               	xorlw	41	; case 36
  5232  000B58  B4D8               	btfsc	status,2,c
  5233  000B5A  D6DC               	goto	i2l154
  5234  000B5C  0A08               	xorlw	8	; case 44
  5235  000B5E  B4D8               	btfsc	status,2,c
  5236  000B60  D6DE               	goto	i2l155
  5237  000B62  D7E9               	goto	i2l175
  5238  000B64                     __end_of_GPSRead:
  5239                           	opt stack 0
  5240                           pclatu	equ	0xFFB
  5241                           pclath	equ	0xFFA
  5242                           pcl	equ	0xFF9
  5243                           tblptru	equ	0xFF8
  5244                           tblptrh	equ	0xFF7
  5245                           tblptrl	equ	0xFF6
  5246                           tablat	equ	0xFF5
  5247                           prodh	equ	0xFF4
  5248                           prodl	equ	0xFF3
  5249                           intcon	equ	0xFF2
  5250                           intcon2	equ	0xFF1
  5251                           intcon3	equ	0xFF0
  5252                           indf0	equ	0xFEF
  5253                           postinc0	equ	0xFEE
  5254                           fsr0h	equ	0xFEA
  5255                           fsr0l	equ	0xFE9
  5256                           wreg	equ	0xFE8
  5257                           indf1	equ	0xFE7
  5258                           postinc1	equ	0xFE6
  5259                           postdec1	equ	0xFE5
  5260                           fsr1h	equ	0xFE2
  5261                           fsr1l	equ	0xFE1
  5262                           indf2	equ	0xFDF
  5263                           postinc2	equ	0xFDE
  5264                           postdec2	equ	0xFDD
  5265                           fsr2h	equ	0xFDA
  5266                           fsr2l	equ	0xFD9
  5267                           status	equ	0xFD8
  5268                           
  5269 ;; *************** function _stringcpy *****************
  5270 ;; Defined at:
  5271 ;;		line 459 in file "bibliotecas/GPS.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  str1            2    0[COMRAM] PTR unsigned char 
  5274 ;;		 -> buffer(12), 
  5275 ;;  str2            2    2[COMRAM] PTR unsigned char 
  5276 ;;		 -> rawAltitude(7), rawSatellites(3), rawDate(7), rawCourse(6), 
  5277 ;;		 -> rawSpeed(6), rawLongitude(13), rawLatitude(13), rawTime(11), 
  5278 ;;		 -> sentence(6), 
  5279 ;;  dir             2    4[COMRAM] int 
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;  chr             1    8[COMRAM] unsigned char 
  5282 ;; Return value:  Size  Location     Type
  5283 ;;                  1    wreg      void 
  5284 ;; Registers used:
  5285 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5286 ;; Tracked objects:
  5287 ;;		On entry : 0/0
  5288 ;;		On exit  : 0/0
  5289 ;;		Unchanged: 0/0
  5290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5291 ;;      Params:         6       0       0       0       0       0       0       0       0
  5292 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5293 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5294 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5295 ;;Total ram usage:        9 bytes
  5296 ;; Hardware stack levels used:    1
  5297 ;; This function calls:
  5298 ;;		Nothing
  5299 ;; This function is called by:
  5300 ;;		_GPSRead
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           	psect	text28
  5305  00145A                     __ptext28:
  5306                           	opt stack 0
  5307  00145A                     _stringcpy:
  5308                           	opt stack 24
  5309                           
  5310                           ;GPS.c: 461: uint8_t chr = 0;
  5311                           
  5312                           ;incstack = 0
  5313  00145A  0E00               	movlw	0
  5314  00145C  6E29               	movwf	stringcpy@chr,c
  5315  00145E                     
  5316                           ;GPS.c: 464: str2[chr + dir] = str1[chr];
  5317  00145E  5029               	movf	stringcpy@chr,w,c
  5318  001460  0D01               	mullw	1
  5319  001462  50F3               	movf	prodl,w,c
  5320  001464  2421               	addwf	stringcpy@str1,w,c
  5321  001466  6ED9               	movwf	fsr2l,c
  5322  001468  50F4               	movf	prodh,w,c
  5323  00146A  2022               	addwfc	stringcpy@str1+1,w,c
  5324  00146C  6EDA               	movwf	fsr2h,c
  5325  00146E  5029               	movf	stringcpy@chr,w,c
  5326  001470  2425               	addwf	stringcpy@dir,w,c
  5327  001472  6E27               	movwf	??_stringcpy& (0+255),c
  5328  001474  0E00               	movlw	0
  5329  001476  2026               	addwfc	stringcpy@dir+1,w,c
  5330  001478  6E28               	movwf	(??_stringcpy+1)& (0+255),c
  5331  00147A  5027               	movf	??_stringcpy,w,c
  5332  00147C  2423               	addwf	stringcpy@str2,w,c
  5333  00147E  6EE1               	movwf	fsr1l,c
  5334  001480  5028               	movf	??_stringcpy+1,w,c
  5335  001482  2024               	addwfc	stringcpy@str2+1,w,c
  5336  001484  6EE2               	movwf	fsr1h,c
  5337  001486  CFDF FFE7          	movff	indf2,indf1
  5338                           
  5339                           ;GPS.c: 465: } while(str1[chr++] != '\0');
  5340  00148A  2A29               	incf	stringcpy@chr,f,c
  5341  00148C  0429               	decf	stringcpy@chr,w,c
  5342  00148E  6E27               	movwf	??_stringcpy& (0+255),c
  5343  001490  5027               	movf	??_stringcpy,w,c
  5344  001492  0D01               	mullw	1
  5345  001494  50F3               	movf	prodl,w,c
  5346  001496  2421               	addwf	stringcpy@str1,w,c
  5347  001498  6ED9               	movwf	fsr2l,c
  5348  00149A  50F4               	movf	prodh,w,c
  5349  00149C  2022               	addwfc	stringcpy@str1+1,w,c
  5350  00149E  6EDA               	movwf	fsr2h,c
  5351  0014A0  50DF               	movf	indf2,w,c
  5352  0014A2  B4D8               	btfsc	status,2,c
  5353  0014A4  0012               	return	
  5354  0014A6  D7DB               	goto	i2l142
  5355  0014A8                     __end_of_stringcpy:
  5356                           	opt stack 0
  5357                           pclatu	equ	0xFFB
  5358                           pclath	equ	0xFFA
  5359                           pcl	equ	0xFF9
  5360                           tblptru	equ	0xFF8
  5361                           tblptrh	equ	0xFF7
  5362                           tblptrl	equ	0xFF6
  5363                           tablat	equ	0xFF5
  5364                           prodh	equ	0xFF4
  5365                           prodl	equ	0xFF3
  5366                           intcon	equ	0xFF2
  5367                           intcon2	equ	0xFF1
  5368                           intcon3	equ	0xFF0
  5369                           indf0	equ	0xFEF
  5370                           postinc0	equ	0xFEE
  5371                           fsr0h	equ	0xFEA
  5372                           fsr0l	equ	0xFE9
  5373                           wreg	equ	0xFE8
  5374                           indf1	equ	0xFE7
  5375                           postinc1	equ	0xFE6
  5376                           postdec1	equ	0xFE5
  5377                           fsr1h	equ	0xFE2
  5378                           fsr1l	equ	0xFE1
  5379                           indf2	equ	0xFDF
  5380                           postinc2	equ	0xFDE
  5381                           postdec2	equ	0xFDD
  5382                           fsr2h	equ	0xFDA
  5383                           fsr2l	equ	0xFD9
  5384                           status	equ	0xFD8
  5385                           
  5386 ;; *************** function _strcmp *****************
  5387 ;; Defined at:
  5388 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  5391 ;;		 -> sentence(6), 
  5392 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  5393 ;;		 -> STR_2(6), STR_1(6), 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  r               1    5[COMRAM] char 
  5396 ;; Return value:  Size  Location     Type
  5397 ;;                  2    0[COMRAM] int 
  5398 ;; Registers used:
  5399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5400 ;; Tracked objects:
  5401 ;;		On entry : 0/0
  5402 ;;		On exit  : 0/0
  5403 ;;		Unchanged: 0/0
  5404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5405 ;;      Params:         4       0       0       0       0       0       0       0       0
  5406 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5407 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5408 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5409 ;;Total ram usage:        6 bytes
  5410 ;; Hardware stack levels used:    1
  5411 ;; This function calls:
  5412 ;;		Nothing
  5413 ;; This function is called by:
  5414 ;;		_GPSRead
  5415 ;; This function uses a non-reentrant model
  5416 ;;
  5417                           
  5418                           	psect	text29
  5419  0014A8                     __ptext29:
  5420                           	opt stack 0
  5421  0014A8                     _strcmp:
  5422                           	opt stack 24
  5423                           
  5424                           ;incstack = 0
  5425  0014A8  D004               	goto	i2l1928
  5426  0014AA  4A21               	infsnz	strcmp@s1,f,c
  5427  0014AC  2A22               	incf	strcmp@s1+1,f,c
  5428  0014AE  4A23               	infsnz	strcmp@s2,f,c
  5429  0014B0  2A24               	incf	strcmp@s2+1,f,c
  5430  0014B2                     i2l1928:
  5431  0014B2  C021  FFD9         	movff	strcmp@s1,fsr2l
  5432  0014B6  C022  FFDA         	movff	strcmp@s1+1,fsr2h
  5433  0014BA  50DF               	movf	indf2,w,c
  5434  0014BC  6E25               	movwf	??_strcmp& (0+255),c
  5435  0014BE  C023  FFF6         	movff	strcmp@s2,tblptrl
  5436  0014C2  C024  FFF7         	movff	strcmp@s2+1,tblptrh
  5437  0014C6                     	if	0	;tblptru may be non-zero
  5438  0014C6                     	endif
  5439  0014C6                     	if	0	;tblptru may be non-zero
  5440  0014C6                     	endif
  5441  0014C6  0008               	tblrd		*
  5442  0014C8  50F5               	movf	tablat,w,c
  5443  0014CA  0800               	sublw	0
  5444  0014CC  2425               	addwf	??_strcmp,w,c
  5445  0014CE  6E26               	movwf	strcmp@r,c
  5446  0014D0  5026               	movf	strcmp@r,w,c
  5447  0014D2  A4D8               	btfss	status,2,c
  5448  0014D4  D007               	goto	i2u644_40
  5449  0014D6  C021  FFD9         	movff	strcmp@s1,fsr2l
  5450  0014DA  C022  FFDA         	movff	strcmp@s1+1,fsr2h
  5451  0014DE  50DF               	movf	indf2,w,c
  5452  0014E0  A4D8               	btfss	status,2,c
  5453  0014E2  D7E3               	goto	i2l1929
  5454  0014E4                     i2u644_40:
  5455  0014E4  5026               	movf	strcmp@r,w,c
  5456  0014E6  6E21               	movwf	?_strcmp,c
  5457  0014E8  6A22               	clrf	?_strcmp+1,c
  5458  0014EA  BE21               	btfsc	?_strcmp,7,c
  5459  0014EC  0622               	decf	?_strcmp+1,f,c
  5460  0014EE  0012               	return	
  5461  0014F0                     __end_of_strcmp:
  5462                           	opt stack 0
  5463                           pclatu	equ	0xFFB
  5464                           pclath	equ	0xFFA
  5465                           pcl	equ	0xFF9
  5466                           tblptru	equ	0xFF8
  5467                           tblptrh	equ	0xFF7
  5468                           tblptrl	equ	0xFF6
  5469                           tablat	equ	0xFF5
  5470                           prodh	equ	0xFF4
  5471                           prodl	equ	0xFF3
  5472                           intcon	equ	0xFF2
  5473                           intcon2	equ	0xFF1
  5474                           intcon3	equ	0xFF0
  5475                           indf0	equ	0xFEF
  5476                           postinc0	equ	0xFEE
  5477                           fsr0h	equ	0xFEA
  5478                           fsr0l	equ	0xFE9
  5479                           wreg	equ	0xFE8
  5480                           indf1	equ	0xFE7
  5481                           postinc1	equ	0xFE6
  5482                           postdec1	equ	0xFE5
  5483                           fsr1h	equ	0xFE2
  5484                           fsr1l	equ	0xFE1
  5485                           indf2	equ	0xFDF
  5486                           postinc2	equ	0xFDE
  5487                           postdec2	equ	0xFDD
  5488                           fsr2h	equ	0xFDA
  5489                           fsr2l	equ	0xFD9
  5490                           status	equ	0xFD8
  5491                           pclatu	equ	0xFFB
  5492                           pclath	equ	0xFFA
  5493                           pcl	equ	0xFF9
  5494                           tblptru	equ	0xFF8
  5495                           tblptrh	equ	0xFF7
  5496                           tblptrl	equ	0xFF6
  5497                           tablat	equ	0xFF5
  5498                           prodh	equ	0xFF4
  5499                           prodl	equ	0xFF3
  5500                           intcon	equ	0xFF2
  5501                           intcon2	equ	0xFF1
  5502                           intcon3	equ	0xFF0
  5503                           indf0	equ	0xFEF
  5504                           postinc0	equ	0xFEE
  5505                           fsr0h	equ	0xFEA
  5506                           fsr0l	equ	0xFE9
  5507                           wreg	equ	0xFE8
  5508                           indf1	equ	0xFE7
  5509                           postinc1	equ	0xFE6
  5510                           postdec1	equ	0xFE5
  5511                           fsr1h	equ	0xFE2
  5512                           fsr1l	equ	0xFE1
  5513                           indf2	equ	0xFDF
  5514                           postinc2	equ	0xFDE
  5515                           postdec2	equ	0xFDD
  5516                           fsr2h	equ	0xFDA
  5517                           fsr2l	equ	0xFD9
  5518                           status	equ	0xFD8
  5519                           
  5520                           	psect	rparam
  5521  0000                     pclatu	equ	0xFFB
  5522                           pclath	equ	0xFFA
  5523                           pcl	equ	0xFF9
  5524                           tblptru	equ	0xFF8
  5525                           tblptrh	equ	0xFF7
  5526                           tblptrl	equ	0xFF6
  5527                           tablat	equ	0xFF5
  5528                           prodh	equ	0xFF4
  5529                           prodl	equ	0xFF3
  5530                           intcon	equ	0xFF2
  5531                           intcon2	equ	0xFF1
  5532                           intcon3	equ	0xFF0
  5533                           indf0	equ	0xFEF
  5534                           postinc0	equ	0xFEE
  5535                           fsr0h	equ	0xFEA
  5536                           fsr0l	equ	0xFE9
  5537                           wreg	equ	0xFE8
  5538                           indf1	equ	0xFE7
  5539                           postinc1	equ	0xFE6
  5540                           postdec1	equ	0xFE5
  5541                           fsr1h	equ	0xFE2
  5542                           fsr1l	equ	0xFE1
  5543                           indf2	equ	0xFDF
  5544                           postinc2	equ	0xFDE
  5545                           postdec2	equ	0xFDD
  5546                           fsr2h	equ	0xFDA
  5547                           fsr2l	equ	0xFD9
  5548                           status	equ	0xFD8
  5549                           
  5550                           	psect	temp
  5551  000042                     btemp:
  5552                           	opt stack 0
  5553  000042                     	ds	1
  5554  0000                     int$flags	set	btemp
  5555  0000                     wtemp6	set	btemp+1
  5556                           pclatu	equ	0xFFB
  5557                           pclath	equ	0xFFA
  5558                           pcl	equ	0xFF9
  5559                           tblptru	equ	0xFF8
  5560                           tblptrh	equ	0xFF7
  5561                           tblptrl	equ	0xFF6
  5562                           tablat	equ	0xFF5
  5563                           prodh	equ	0xFF4
  5564                           prodl	equ	0xFF3
  5565                           intcon	equ	0xFF2
  5566                           intcon2	equ	0xFF1
  5567                           intcon3	equ	0xFF0
  5568                           indf0	equ	0xFEF
  5569                           postinc0	equ	0xFEE
  5570                           fsr0h	equ	0xFEA
  5571                           fsr0l	equ	0xFE9
  5572                           wreg	equ	0xFE8
  5573                           indf1	equ	0xFE7
  5574                           postinc1	equ	0xFE6
  5575                           postdec1	equ	0xFE5
  5576                           fsr1h	equ	0xFE2
  5577                           fsr1l	equ	0xFE1
  5578                           indf2	equ	0xFDF
  5579                           postinc2	equ	0xFDE
  5580                           postdec2	equ	0xFDD
  5581                           fsr2h	equ	0xFDA
  5582                           fsr2l	equ	0xFD9
  5583                           status	equ	0xFD8


Data Sizes:
    Strings     167
    Constant    34
    Data        30
    BSS         766
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      65
    BANK0           160     42     156
    BANK1           256      0     105
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK0[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK0[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK0[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK0[11]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[6]), STR_1(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK0[6]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(COMRAM[7]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(COMRAM[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    S1685_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 44
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), STR_13(CODE[11]), STR_12(CODE[10]), STR_11(CODE[16]), 
		 -> STR_10(CODE[11]), string_dado(BANK1[44]), STR_8(CODE[9]), STR_7(CODE[10]), 
		 -> STR_6(CODE[10]), STR_5(CODE[14]), STR_4(CODE[21]), STR_3(CODE[15]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(COMRAM[7]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK0[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK0[11]), 

    S419_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S419_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__Longitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK1[13]), 

    sp__Latitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK1[13]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK0[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 13
		 -> rawAltitude(BANK0[7]), rawSatellites(COMRAM[3]), rawDate(BANK0[7]), rawCourse(BANK0[6]), 
		 -> rawSpeed(BANK0[6]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK0[11]), 
		 -> sentence(BANK0[6]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), 

    S21$longitude	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), 

    poligono.longitude	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), 

    S21$latitude	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), 

    poligono.latitude	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _main->_mensagem_inicial
    _mensagem_inicial->_posicao_cursor_lcd
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _init_lcd->_escreve_cmd_lcd
    _escreve_cmd_lcd->_delay
    _config_timer_zero->_write_timer_zero
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7693
                    _dados_gps_to_sd
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    4213
                                              6 BANK0     36    36      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    1947
                                              3 BANK0      3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    1709
                                              3 BANK0      2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                              3 BANK0      1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     247
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     247
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     247
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             14 BANK0     14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0     192
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _dados_gps_to_sd                                      0     0      0    1310
                           _monta_sd
 ---------------------------------------------------------------------------------
 (2) _monta_sd                                             5     3      2    1310
                                              6 BANK0      5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     220
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 21    21      0    2930
                                             11 COMRAM    21    21      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (6) i2_write_timer_zero                                   4     2      2     131
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _recebe_dado_uart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _GPSRead                                              2     2      0    2669
                                              9 COMRAM     2     2      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (7) _stringcpy                                            9     3      6    2207
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) _strcmp                                               6     2      4     395
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dados_gps_to_sd
     _monta_sd
       _strlen
   _escalonador
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      69       7       41.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2A      9C       5       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      41       1       69.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     146      20        0.0%
DATA                 0      0     366       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 06 18:26:53 2022

        __end_of_mensagem_inicial 1226                       _SSPSTATbits 000FC7  
                ??_init_interrupt 00C4                                l83 12B2  
                              l91 1588                                l92 1598  
                              l85 131A                                _fs 0169  
                    ?_escalonador 0021                  ?_inicializa_uart 0021  
                             l281 0EE6                               l521 15BC  
                             l290 0E54                               l282 0DEE  
                             l530 1122                               l291 0E60  
                             l283 0DFA                               l531 112A  
                             l540 1162                               l532 112C  
                             l293 0E84                               l541 116A  
                             l533 1134                               l613 1432  
                             l294 0E90                               l286 0E1E  
                             l542 116C                               l534 1136  
                             l614 1408                               l287 0E2A  
                             l519 15AC                               l543 1174  
                             l535 113E                               l551 13AC  
                             l296 0EB4                               l544 1176  
                             l536 1140                               l560 13E4  
                             l552 13AE                               l297 0EDC  
                             l537 1156                               l529 1120  
                             l561 13EC                               l553 13B6  
                             l298 0EBA                               l538 1158  
                             l562 13EE                               l554 13B8  
                             l570 1238                               l539 1160  
                             l563 13F6                               l555 13C0  
                             l571 1298                               l580 1332  
                             l564 13F8                               l556 13C2  
                             l572 1244                               l581 1334  
                             l557 13D8                               l573 1254  
                             l590 1372                               l582 133C  
                             l558 13DA                               l574 1264  
                             l591 1374                               l583 133E  
                             l559 13E2                               l575 1274  
                             l592 137C                               l584 1346  
                             l568 129E                               l593 137E  
                             l585 1348                               l569 127C  
                             l594 1386                               l586 1350  
                             l595 1388                               l587 1352  
                             l588 1368                               l589 136A  
                             l784 0DBC                               _PCL 000FF9  
                             _PR2 000FCB                               _fil 0071  
                ??_init_oscilador 00C4                               _isr 0008  
                             prod 000FF3                               wreg 000FE8  
       __size_of_write_timer_zero 0012           ??_escreve_frase_ram_lcd 00C9  
                            l1410 0FA0                              l1411 0FAE  
                            l1403 0F26                              l1412 0FC4  
                            l1404 0F3E                              l1406 0F6C  
                            l1407 0F60                              l1936 1542  
                            l1937 153C                              l8172 15B4  
                            ?_isr 0021                              l8166 15A4  
                            l8602 0E88                              l8572 0E22  
                            l8558 0DF2                              l8588 0E58  
                            l8684 12AA             _escreve_caractere_lcd 131E  
                            STR_1 08BD                              STR_2 08B7  
                            STR_3 085D                              STR_4 0838  
                            STR_5 086C                              STR_6 08A4  
                            STR_7 089A                              STR_8 08AE  
                            STR_9 0823                    timer_dois@flag 0016  
                            _BRGH 007D62                   __end_of_GPSRead 0B64  
                            _T0IF 007F92                              _CREN 007D5C  
                            _LATB 000F8A                              _PIE1 000F9D  
                            _RCIF 007CF5                              i2l70 0C50  
                            i2l71 0BF6                              i2l73 0C24  
                            i2l75 0C44                              i2l76 0C58  
                            i2l69 0BDC                              u9660 15C4  
                            _TMR2 000FCC                              _SPEN 007D5F  
                            _TRMT 007D61                              _TXEN 007D65  
                            _SYNC 007D64                              _Term 0019  
                            _dado 0015                              _main 1570  
                            _fsid 0009                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 0042                              prodh 000FF4  
                            prodl 000FF3                              start 000E  
                    ___param_bank 000000                       _string_dado 0100  
                           ??_isr 002C  __size_of_configura_baudrate_uart 0132  
                 __end_of___aldiv 0FD6                             ?_main 0021  
                           STR_10 0885                             STR_11 084D  
                           STR_12 0890                             STR_13 087A  
                           STR_14 08C7                             STR_15 08C3  
                           u10100 0F70                             u10140 1428  
                           u10310 0E4E                             u10150 1452  
                           u10147 141E                             u10405 0D46  
                           u10157 1448                             u10270 119A  
                           u10415 0D90                             u11207 1032  
                           _T0CON 000FD5                             u10470 11AE  
                           u10375 0CB6                             u10480 11C6  
                           u10385 0D02                             u11177 1210  
                           u11187 0FFA                             u11197 1016  
                           _T2CON 000FCA                             i2l142 145E  
                           i2l150 08F2                             i2l160 0998  
                           i2l161 09C0                             i2l170 0A82  
                           i2l162 09EA                             i2l154 0914  
                           i2l147 0B4E                             i2l171 0AAC  
                           i2l155 091E                             i2l172 0AD6  
                           i2l164 0A06                             i2l148 08D4  
                           i2l173 0B02                             i2l165 0A0C  
                           i2l157 0974                             i2l149 08E2  
                           i2l174 0B2E                             i2l166 0A36  
                           i2l175 0B36                             i2l159 0994  
                           i2l168 0A52                             i2l169 0A58  
                           i2l810 16A4                             _RCREG 000FAE  
                           _RCSTA 000FAB                             _TMR0H 000FD7  
                           _TMR0L 000FD6                             _SPBRG 000FAF  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TXREG 000FAD  
                           _TXSTA 000FAC                             _FatFs 000B  
      __size_of_config_timer_dois 000E        __size_of_config_timer_zero 001C  
                           _delay 159E          __size_of_escreve_cmd_lcd 0094  
                           pclath 000FFA                             tablat 000FF5  
                ?_dados_gps_to_sd 0021                             status 000FD8  
                           wtemp6 0043                   __initialization 1074  
                    __end_of_main 159E                _inicializa_tarefas 15C8  
                 escalonador@cont 00C6                            ??_main 00EE  
                   __activetblptr 000002               ?_inicializa_tarefas 0021  
                       ??_GPSRead 002A                            ?_delay 0021  
          ?_escreve_caractere_lcd 0021                            _ADCON1 000FC1  
                          _INT0IE 007F94                            _INT0IF 007F91  
                          _PCLATH 000FFA                            i2l1928 14B2  
                          i2l1929 14AA                            _INTCON 000FF2  
                          i2l8932 0BEE                            _TMR0IF 007F92  
                          _TMR2IF 007CF1          __end_of_recebe_dado_uart 16A8  
                          _SPPCFG 000F63                            _SPPCON 000F65  
                          _SSPBUF 000FC9              ??_inicializa_tarefas 00C4  
      __end_of_posicao_cursor_lcd 12A4                      _dado_arquivo 012C  
          __size_of_init_hardware 0016                         ??___aldiv 00CC  
                          _buffer 008D                            _estado 0017  
                __end_of_init_lcd 1074                            clear_0 10CE  
                          clear_1 10E0                            clear_2 10EC  
                          clear_3 10F8          configura_baudrate_uart@x 00DE  
                          _strcmp 14A8                       GPSRead@buff 002A  
                          _strlen 1532                  __end_of_monta_sd 0F08  
                    __pdataCOMRAM 0041              __size_of_escalonador 007A  
                    __mediumconst 0000             write_timer_zero@timer 00C6  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                  _write_timer_zero 1672  
       escreve_caractere_lcd@data 00C6                        __accesstop 0060  
         __end_of__initialization 10FE                     ___rparam_used 000001  
               ??_escreve_cmd_lcd 00C6                    __pcstackCOMRAM 0021  
     __end_of_endereco_cursor_lcd 1406                      __pidataBANK0 16B7  
                    __pidataBANK1 16A8                 ?_mensagem_inicial 0021  
         _configura_baudrate_uart 0CA4                     __end_of_delay 15C8  
              ??_mensagem_inicial 00CA                _tarefa_em_execucao 001C  
      __end_ofi2_write_timer_zero 1696   configura_baudrate_uart@baudrate 00D2  
                   _init_hardware 164A                           ??_delay 00C4  
    mensagem_inicial@msg_linha_um 00CC                        __pbssBANK0 0060  
                      __pbssBANK1 0100    __size_of_escreve_frase_ram_lcd 0054  
   __end_of_escreve_frase_ram_lcd 145A         escreve_inteiro_uart@F3958 00EE  
           mensagem_inicial@F4127 0812             mensagem_inicial@F4129 0801  
                         ?_strcmp 0021                           ?_strlen 00C4  
                         _INTCON2 000FF1                           _INTCON3 000FF0  
                  ?_init_hardware 0021                           _GPSRead 08CC  
                         _SSPCON1 000FC6          __size_of_inicializa_uart 0024  
                         _SSPSTAT 000FC7                         ?_init_lcd 0021  
              __size_of_stringcpy 004E                           __Hparam 0000  
       ??_configura_baudrate_uart 00D6                           __Lparam 0000  
                       ?_monta_sd 00CA                           ___aldiv 0F08  
                    __psmallconst 0800                           __pcinit 1074  
                      _init_ports 1612                           __ramtop 0800  
                         __ptext0 1570                           __ptext1 11A0  
                         __ptext2 1226                           __ptext3 1396  
                         __ptext4 1406                           __ptext5 131E  
                         __ptext6 0FD6                           __ptext7 110C  
                         __ptext8 159E                           __ptext9 164A  
                       _T0CONbits 000FD5                   __size_of_strcmp 0048  
                 __size_of_strlen 003E           i2write_timer_zero@timer 0023  
     endereco_cursor_lcd@endereco 00C6                           _rawDate 00AB  
                    __size_of_isr 0C9C           ??_escreve_caractere_lcd 00C6  
                         _rawTime 0099                  ___aldiv@dividend 00C4  
                    stringcpy@chr 0029                      stringcpy@dir 0025  
         __size_of_init_interrupt 0012                    __pintcode_body 0B64  
            end_of_initialization 10FE                           isr@cont 0040  
         __size_of_init_oscilador 0008                     __Lmediumconst 0000  
                      ??_init_lcd 00C7                           int_func 0B64  
               ?_recebe_dado_uart 0021                         i2u1072_40 0BCC  
                       i2u1073_48 0BCE                         i2u1078_40 0C28  
          write_timer_zero@timer0 00C4                     _rawSatellites 001E  
              ??_recebe_dado_uart 0021                        ??_monta_sd 00CC  
        __size_of_dados_gps_to_sd 0042                         _RCSTAbits 000FAB  
        __end_of_write_timer_zero 1684                  ___aldiv@quotient 00CE  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                           strcmp@r 0026  
                         strlen@s 00C4                         _PORTBbits 000F81  
                       _PORTDbits 000F83                   ??_init_hardware 00C8  
              _posicao_cursor_lcd 1226                 __end_of_stringcpy 14A8  
 __end_of_configura_baudrate_uart 0DD6                         _TRISBbits 000F93  
                       _TRISCbits 000F94                         _TRISDbits 000F95  
                 _escreve_cmd_lcd 110C               ?_posicao_cursor_lcd 00C7  
               ??_inicializa_uart 00E0       __size_of_inicializa_tarefas 0026  
            ??_posicao_cursor_lcd 00C8                     __pidataCOMRAM 16DC  
                   ??_escalonador 00C4                       ?_init_ports 0021  
                  __end_of_strcmp 14F0                    __end_of_strlen 1570  
             start_initialization 1074                       __end_of_isr 0CA4  
       __size_of_mensagem_inicial 0086                i2_write_timer_zero 1684  
                _data_uart_recebe 001D               ?i2_write_timer_zero 0021  
                     __pdataBANK0 00EE                       __pdataBANK1 015A  
               ??_dados_gps_to_sd 00CF           __end_of_escreve_cmd_lcd 11A0  
                        ??_strcmp 0025                          ??_strlen 00C6  
    __size_of_endereco_cursor_lcd 0070                       __pbssBIGRAM 0169  
                   monta_sd@index 00CC                       __pbssCOMRAM 0001  
                        ?_GPSRead 0021                     __pcstackBANK0 00C4  
                  _init_interrupt 1660              ??i2_write_timer_zero 0023  
             __end_of_escalonador 131E                       _char_number 001B  
                  _init_oscilador 16D4                          GPSRead@c 002B  
             __size_of_init_ports 001C             _escreve_frase_ram_lcd 1406  
                       _data_buff 000D                         _data_hoje 0018  
               __size_of_init_lcd 009E                 delay@contador_int 00C5  
               delay@contador_ext 00C4                         __pintcode 0008  
                        ?___aldiv 00C4                 __size_of_monta_sd 0132  
              _sinaliza_int_timer 0070                       __smallconst 0800  
          __end_of_init_interrupt 1672    __size_of_escreve_caractere_lcd 0078  
   __end_of_escreve_caractere_lcd 1396                    __size_of_delay 002A  
          __end_of_init_oscilador 16DC                         _p_tarefas 006C  
                       _rawCourse 00B2                          _GPGGA_ok 000F  
                 ___aldiv@divisor 00C8                   ___aldiv@counter 00CC  
                        _LATBbits 000F8A                          _LATCbits 000F8B  
                        _GPRMC_ok 0011                          _PIE1bits 000F9D  
                    _rawLongitude 0140                          _PIR1bits 000F9E  
                        i2u644_40 14E4                 ?_write_timer_zero 00C4  
        posicao_cursor_lcd@coluna 00C7                ??_write_timer_zero 00C6  
      posicao_cursor_lcd@endereco 00C9         __size_of_recebe_dado_uart 0012  
                     _escalonador 12A4                  ?_escreve_cmd_lcd 0021  
     escreve_frase_ram_lcd@buffer 00C7                   ?_init_interrupt 0021  
                 _inicializa_uart 15EE                         _stringcpy 145A  
                __size_of_GPSRead 0298                  _mensagem_inicial 11A0  
                 ?_init_oscilador 0021                         copy_data0 1088  
                       copy_data1 10A8          ?_configura_baudrate_uart 00D2  
          ?_escreve_frase_ram_lcd 00C7          escreve_inteiro_lcd@F3966 00F5  
                        __Hrparam 0000                          __Lrparam 0000  
                    _SentenceType 001A                  __size_of___aldiv 00CE  
                    monta_sd@dado 00CA                      monta_sd@size 00CD  
                    ??_init_ports 00C4             __end_of_init_hardware 1660  
                      ?_stringcpy 0021                          __ptext10 1612  
                        __ptext11 16D4                          __ptext20 12A4  
                        __ptext12 1660                          __ptext21 14F0  
                        __ptext13 162E                          __ptext22 0DD6  
                        __ptext14 1672                          __ptext23 1532  
                        __ptext15 16C6                          __ptext16 15EE  
                        __ptext25 1684                          __ptext17 0CA4  
                        __ptext26 1696                          __ptext18 0F08  
                        __ptext27 08CC                          __ptext19 15C8  
                        __ptext28 145A                          __ptext29 14A8  
                        _filename 015A                       _rawAltitude 00A4  
                  _timeout_tarefa 0013        __end_of_inicializa_tarefas 15EE  
        i2write_timer_zero@timer0 0021                         monta_sd@i 00CE  
                     _rawLatitude 014D                          _init_lcd 0FD6  
                   __size_of_main 002E               _endereco_cursor_lcd 1396  
              __end_of_init_ports 162E                          _rawSpeed 00B8  
                 _dados_gps_to_sd 14F0                          _monta_sd 0DD6  
                        _sentence 00BE                          _poligono 0060  
                   stringcpy@str1 0021                     stringcpy@str2 0023  
     __size_of_posicao_cursor_lcd 007E                          int$flags 0042  
         posicao_cursor_lcd@linha 00C8           __end_of_inicializa_uart 1612  
            ?_endereco_cursor_lcd 0021                        _INTCONbits 000FF2  
               _config_timer_dois 16C6                      _tempo_backup 0005  
               _config_timer_zero 162E                          intlevel2 0000  
              ?_config_timer_dois 0021          mensagem_inicial@msg_dois 00DD  
              ?_config_timer_zero 0021                      _tempo_tarefa 0001  
             ??_config_timer_dois 00C4                        _OSCCONbits 000FD3  
             ??_config_timer_zero 00C8                  _recebe_dado_uart 1696  
           ??_endereco_cursor_lcd 00C6                          strcmp@s1 0021  
                        strcmp@s2 0023                          strlen@cp 00C8  
       __end_of_config_timer_dois 16D4                      ___aldiv@sign 00CD  
       __end_of_config_timer_zero 164A                       ??_stringcpy 0027  
     __size_ofi2_write_timer_zero 0012                       _SSPCON1bits 000FC6  
          escreve_cmd_lcd@comando 00C6           __end_of_dados_gps_to_sd 1532  
              leitura_sdcard@size 0041     __end_ofmensagem_inicial@F4127 0823  
   __end_ofmensagem_inicial@F4129 0812  
