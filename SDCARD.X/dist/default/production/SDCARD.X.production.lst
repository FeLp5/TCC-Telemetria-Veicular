

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Apr 14 11:57:18 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   104                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   113                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   114  0000                     
   115                           ; Version 1.45
   116                           ; Generated 16/11/2017 GMT
   117                           ; 
   118                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC18F4550 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     
   150                           	psect	idataCOMRAM
   151  004D3A                     __pidataCOMRAM:
   152                           	opt stack 0
   153                           
   154                           ;initializer for leitura_sdcard@size
   155  004D3A  58                 	db	88
   156                           
   157                           	psect	idataBANK1
   158  004A52                     __pidataBANK1:
   159                           	opt stack 0
   160                           
   161                           ;initializer for verifica_fence_externo@F4363
   162  004A52  2D                 	db	45
   163  004A53  34                 	db	52
   164  004A54  36                 	db	54
   165  004A55  35                 	db	53
   166  004A56  33                 	db	51
   167  004A57  2E                 	db	46
   168  004A58  31                 	db	49
   169  004A59  36                 	db	54
   170  004A5A  36                 	db	54
   171  004A5B  32                 	db	50
   172  004A5C  32                 	db	50
   173                           
   174                           ;initializer for verifica_fence_externo@F4361
   175  004A5D  2D                 	db	45
   176  004A5E  34                 	db	52
   177  004A5F  36                 	db	54
   178  004A60  35                 	db	53
   179  004A61  33                 	db	51
   180  004A62  2E                 	db	46
   181  004A63  31                 	db	49
   182  004A64  36                 	db	54
   183  004A65  36                 	db	54
   184  004A66  32                 	db	50
   185  004A67  32                 	db	50
   186                           
   187                           ;initializer for escreve_inteiro_uart@F3958
   188  004A68  30                 	db	48
   189  004A69  30                 	db	48
   190  004A6A  30                 	db	48
   191  004A6B  30                 	db	48
   192  004A6C  30                 	db	48
   193  004A6D  30                 	db	48
   194  004A6E  00                 	db	0
   195                           
   196                           ;initializer for escreve_inteiro_lcd@F3966
   197  004A6F  30                 	db	48
   198  004A70  30                 	db	48
   199  004A71  30                 	db	48
   200  004A72  30                 	db	48
   201  004A73  30                 	db	48
   202  004A74  30                 	db	48
   203  004A75  00                 	db	0
   204                           
   205                           ;initializer for _filename
   206  004A76  74                 	db	116
   207  004A77  65                 	db	101
   208  004A78  73                 	db	115
   209  004A79  74                 	db	116
   210  004A7A  65                 	db	101
   211  004A7B  31                 	db	49
   212  004A7C  2E                 	db	46
   213  004A7D  74                 	db	116
   214  004A7E  78                 	db	120
   215  004A7F  74                 	db	116
   216  004A80  00                 	db	0
   217  004A81  00                 	db	0
   218  004A82  00                 	db	0
   219  004A83  00                 	db	0
   220  004A84  00                 	db	0
   221                           
   222                           	psect	mediumconst
   223  00615E                     __pmediumconst:
   224                           	opt stack 0
   225  00615E  00                 	db	0
   226  00615F                     mensagem_inicial@F4349:
   227                           	opt stack 0
   228  00615F  54                 	db	84
   229  006160  43                 	db	67
   230  006161  43                 	db	67
   231  006162  2D                 	db	45
   232  006163  2D                 	db	45
   233  006164  54                 	db	84
   234  006165  45                 	db	69
   235  006166  4C                 	db	76
   236  006167  45                 	db	69
   237  006168  4D                 	db	77
   238  006169  54                 	db	84
   239  00616A  52                 	db	82
   240  00616B  49                 	db	73
   241  00616C  41                 	db	65
   242  00616D  00                 	db	0
   243  00616E  00                 	db	0
   244  00616F  00                 	db	0
   245  006170                     __end_ofmensagem_inicial@F4349:
   246                           	opt stack 0
   247  006170                     mensagem_inicial@F4347:
   248                           	opt stack 0
   249  006170  46                 	db	70
   250  006171  41                 	db	65
   251  006172  54                 	db	84
   252  006173  45                 	db	69
   253  006174  43                 	db	67
   254  006175  20                 	db	32
   255  006176  53                 	db	83
   256  006177  54                 	db	84
   257  006178  20                 	db	32
   258  006179  41                 	db	65
   259  00617A  4E                 	db	78
   260  00617B  44                 	db	68
   261  00617C  52                 	db	82
   262  00617D  45                 	db	69
   263  00617E  00                 	db	0
   264  00617F  00                 	db	0
   265  006180  00                 	db	0
   266  006181                     __end_ofmensagem_inicial@F4347:
   267                           	opt stack 0
   268  0000                     _RCSTA	set	4011
   269  0000                     _TXSTA	set	4012
   270  0000                     _RCREG	set	4014
   271  0000                     _RCSTAbits	set	4011
   272  0000                     _TXREG	set	4013
   273  0000                     _SPBRG	set	4015
   274  0000                     _PR2	set	4043
   275  0000                     _TMR2	set	4044
   276  0000                     _T2CON	set	4042
   277  0000                     _OSCCONbits	set	4051
   278  0000                     _TRISE	set	3990
   279  0000                     _TRISC	set	3988
   280  0000                     _TRISA	set	3986
   281  0000                     _TRISD	set	3989
   282  0000                     _LATB	set	3978
   283  0000                     _TRISB	set	3987
   284  0000                     _ADCON1	set	4033
   285  0000                     _TMR0L	set	4054
   286  0000                     _TMR0H	set	4055
   287  0000                     _PIE1	set	3997
   288  0000                     _INTCON3	set	4080
   289  0000                     _INTCON2	set	4081
   290  0000                     _INTCON	set	4082
   291  0000                     _SPPCFG	set	3939
   292  0000                     _SPPCON	set	3941
   293  0000                     _T0CON	set	4053
   294  0000                     _PORTDbits	set	3971
   295  0000                     _TRISDbits	set	3989
   296  0000                     _LATCbits	set	3979
   297  0000                     _SSPBUF	set	4041
   298  0000                     _SSPCON1bits	set	4038
   299  0000                     _SSPSTATbits	set	4039
   300  0000                     _SSPCON1	set	4038
   301  0000                     _SSPSTAT	set	4039
   302  0000                     _TRISCbits	set	3988
   303  0000                     _TRISBbits	set	3987
   304  0000                     _LATBbits	set	3978
   305  0000                     _T0CONbits	set	4053
   306  0000                     _PCL	set	4089
   307  0000                     _PCLATH	set	4090
   308  0000                     _INTCONbits	set	4082
   309  0000                     _PORTBbits	set	3969
   310  0000                     _PIR1bits	set	3998
   311  0000                     _PIE1bits	set	3997
   312  0000                     _RCIF	set	31989
   313  0000                     _TRMT	set	32097
   314  0000                     _TXEN	set	32101
   315  0000                     _CREN	set	32092
   316  0000                     _SPEN	set	32095
   317  0000                     _SYNC	set	32100
   318  0000                     _BRGH	set	32098
   319  0000                     _TMR2IF	set	31985
   320  0000                     _INT0IE	set	32660
   321  0000                     _INT0IF	set	32657
   322  0000                     _T0IF	set	32658
   323  0000                     _TMR0IF	set	32658
   324  006181                     STR_18:
   325  006181  0A                 	db	10
   326  006182  25                 	db	37
   327  006183  73                 	db	115	;'s'
   328  006184  20                 	db	32
   329  006185  3B                 	db	59	;';'
   330  006186  20                 	db	32
   331  006187  25                 	db	37
   332  006188  73                 	db	115	;'s'
   333  006189  20                 	db	32
   334  00618A  3B                 	db	59	;';'
   335  00618B  20                 	db	32
   336  00618C  25                 	db	37
   337  00618D  73                 	db	115	;'s'
   338  00618E  20                 	db	32
   339  00618F  3B                 	db	59	;';'
   340  006190  20                 	db	32
   341  006191  25                 	db	37
   342  006192  73                 	db	115	;'s'
   343  006193  20                 	db	32
   344  006194  3B                 	db	59	;';'
   345  006195  00                 	db	0
   346  006196  6F                 	db	111	;'o'
   347  006197  20                 	db	32
   348  006198  53                 	db	83	;'S'
   349  006199  69                 	db	105	;'i'
   350  00619A  73                 	db	115	;'s'
   351  00619B  74                 	db	116	;'t'
   352  00619C  65                 	db	101	;'e'
   353  00619D  6D                 	db	109	;'m'
   354  00619E  61                 	db	97	;'a'
   355  00619F  20                 	db	32
   356  0061A0  64                 	db	100	;'d'
   357  0061A1  65                 	db	101	;'e'
   358  0061A2  20                 	db	32
   359  0061A3  61                 	db	97	;'a'
   360  0061A4  72                 	db	114	;'r'
   361  0061A5  71                 	db	113	;'q'
   362  0061A6  75                 	db	117	;'u'
   363  0061A7  69                 	db	105	;'i'
   364  0061A8  76                 	db	118	;'v'
   365  0061A9  6F                 	db	111	;'o'
   366  0061AA  00                 	db	0
   367  0061AB                     STR_21:
   368  0061AB  49                 	db	73	;'I'
   369  0061AC  6E                 	db	110	;'n'
   370  0061AD  73                 	db	115	;'s'
   371  0061AE  69                 	db	105	;'i'
   372  0061AF  72                 	db	114	;'r'
   373  0061B0  61                 	db	97	;'a'
   374  0061B1  20                 	db	32
   375  0061B2  6F                 	db	111	;'o'
   376  0061B3  20                 	db	32
   377  0061B4  43                 	db	67	;'C'
   378  0061B5  61                 	db	97	;'a'
   379  0061B6  72                 	db	114	;'r'
   380  0061B7  74                 	db	116	;'t'
   381  0061B8  61                 	db	97	;'a'
   382  0061B9  6F                 	db	111	;'o'
   383  0061BA  00                 	db	0
   384  0061BB  45                 	db	69	;'E'
   385  0061BC  72                 	db	114	;'r'
   386  0061BD  72                 	db	114	;'r'
   387  0061BE  6F                 	db	111	;'o'
   388  0061BF  20                 	db	32
   389  0061C0  61                 	db	97	;'a'
   390  0061C1  6F                 	db	111	;'o'
   391  0061C2  20                 	db	32
   392  0061C3  6D                 	db	109	;'m'
   393  0061C4  6F                 	db	111	;'o'
   394  0061C5  6E                 	db	110	;'n'
   395  0061C6  74                 	db	116	;'t'
   396  0061C7  61                 	db	97	;'a'
   397  0061C8  72                 	db	114	;'r'
   398  0061C9  00                 	db	0
   399  0061CA  45                 	db	69	;'E'
   400  0061CB  72                 	db	114	;'r'
   401  0061CC  72                 	db	114	;'r'
   402  0061CD  6F                 	db	111	;'o'
   403  0061CE  20                 	db	32
   404  0061CF  61                 	db	97	;'a'
   405  0061D0  6F                 	db	111	;'o'
   406  0061D1  20                 	db	32
   407  0061D2  63                 	db	99	;'c'
   408  0061D3  72                 	db	114	;'r'
   409  0061D4  69                 	db	105	;'i'
   410  0061D5  61                 	db	97	;'a'
   411  0061D6  72                 	db	114	;'r'
   412  0061D7  00                 	db	0
   413  0061D8                     STR_9:
   414  0061D8  52                 	db	82	;'R'
   415  0061D9  45                 	db	69	;'E'
   416  0061DA  47                 	db	71	;'G'
   417  0061DB  49                 	db	73	;'I'
   418  0061DC  41                 	db	65	;'A'
   419  0061DD  4F                 	db	79	;'O'
   420  0061DE  20                 	db	32
   421  0061DF  4E                 	db	78	;'N'
   422  0061E0  45                 	db	69	;'E'
   423  0061E1  47                 	db	71	;'G'
   424  0061E2  41                 	db	65	;'A'
   425  0061E3  44                 	db	68	;'D'
   426  0061E4  41                 	db	65	;'A'
   427  0061E5  00                 	db	0
   428  0061E6  65                 	db	101	;'e'
   429  0061E7  78                 	db	120	;'x'
   430  0061E8  74                 	db	116	;'t'
   431  0061E9  66                 	db	102	;'f'
   432  0061EA  65                 	db	101	;'e'
   433  0061EB  6E                 	db	110	;'n'
   434  0061EC  63                 	db	99	;'c'
   435  0061ED  65                 	db	101	;'e'
   436  0061EE  2E                 	db	46
   437  0061EF  74                 	db	116	;'t'
   438  0061F0  78                 	db	120	;'x'
   439  0061F1  74                 	db	116	;'t'
   440  0061F2  00                 	db	0
   441  0061F3                     STR_7:
   442  0061F3  2D                 	db	45
   443  0061F4  32                 	db	50	;'2'
   444  0061F5  33                 	db	51	;'3'
   445  0061F6  36                 	db	54	;'6'
   446  0061F7  35                 	db	53	;'5'
   447  0061F8  2E                 	db	46
   448  0061F9  39                 	db	57	;'9'
   449  0061FA  39                 	db	57	;'9'
   450  0061FB  37                 	db	55	;'7'
   451  0061FC  33                 	db	51	;'3'
   452  0061FD  31                 	db	49	;'1'
   453  0061FE  00                 	db	0
   454  0061FF                     STR_1:
   455  0061FF  2D                 	db	45
   456  006200  32                 	db	50	;'2'
   457  006201  33                 	db	51	;'3'
   458  006202  36                 	db	54	;'6'
   459  006203  35                 	db	53	;'5'
   460  006204  2E                 	db	46
   461  006205  38                 	db	56	;'8'
   462  006206  34                 	db	52	;'4'
   463  006207  39                 	db	57	;'9'
   464  006208  39                 	db	57	;'9'
   465  006209  31                 	db	49	;'1'
   466  00620A  00                 	db	0
   467  00620B                     STR_2:
   468  00620B  2D                 	db	45
   469  00620C  34                 	db	52	;'4'
   470  00620D  36                 	db	54	;'6'
   471  00620E  35                 	db	53	;'5'
   472  00620F  33                 	db	51	;'3'
   473  006210  2E                 	db	46
   474  006211  31                 	db	49	;'1'
   475  006212  36                 	db	54	;'6'
   476  006213  36                 	db	54	;'6'
   477  006214  32                 	db	50	;'2'
   478  006215  32                 	db	50	;'2'
   479  006216  00                 	db	0
   480  006217                     STR_5:
   481  006217  2D                 	db	45
   482  006218  32                 	db	50	;'2'
   483  006219  33                 	db	51	;'3'
   484  00621A  36                 	db	54	;'6'
   485  00621B  35                 	db	53	;'5'
   486  00621C  2E                 	db	46
   487  00621D  39                 	db	57	;'9'
   488  00621E  39                 	db	57	;'9'
   489  00621F  36                 	db	54	;'6'
   490  006220  38                 	db	56	;'8'
   491  006221  32                 	db	50	;'2'
   492  006222  00                 	db	0
   493  006223                     STR_4:
   494  006223  2D                 	db	45
   495  006224  34                 	db	52	;'4'
   496  006225  36                 	db	54	;'6'
   497  006226  35                 	db	53	;'5'
   498  006227  33                 	db	51	;'3'
   499  006228  2E                 	db	46
   500  006229  30                 	db	48	;'0'
   501  00622A  30                 	db	48	;'0'
   502  00622B  34                 	db	52	;'4'
   503  00622C  37                 	db	55	;'7'
   504  00622D  35                 	db	53	;'5'
   505  00622E  00                 	db	0
   506  00622F                     STR_23:
   507  00622F  4D                 	db	77	;'M'
   508  006230  4D                 	db	77	;'M'
   509  006231  43                 	db	67	;'C'
   510  006232  20                 	db	32
   511  006233  56                 	db	86	;'V'
   512  006234  65                 	db	101	;'e'
   513  006235  72                 	db	114	;'r'
   514  006236  2E                 	db	46
   515  006237  20                 	db	32
   516  006238  33                 	db	51	;'3'
   517  006239  00                 	db	0
   518  00623A                     STR_20:
   519  00623A  53                 	db	83	;'S'
   520  00623B  65                 	db	101	;'e'
   521  00623C  6D                 	db	109	;'m'
   522  00623D  20                 	db	32
   523  00623E  43                 	db	67	;'C'
   524  00623F  61                 	db	97	;'a'
   525  006240  72                 	db	114	;'r'
   526  006241  74                 	db	116	;'t'
   527  006242  61                 	db	97	;'a'
   528  006243  6F                 	db	111	;'o'
   529  006244  00                 	db	0
   530  006245                     STR_22:
   531  006245  53                 	db	83	;'S'
   532  006246  44                 	db	68	;'D'
   533  006247  20                 	db	32
   534  006248  56                 	db	86	;'V'
   535  006249  45                 	db	69	;'E'
   536  00624A  52                 	db	82	;'R'
   537  00624B  2E                 	db	46
   538  00624C  20                 	db	32
   539  00624D  31                 	db	49	;'1'
   540  00624E  00                 	db	0
   541  00624F  56                 	db	86	;'V'
   542  006250  65                 	db	101	;'e'
   543  006251  72                 	db	114	;'r'
   544  006252  69                 	db	105	;'i'
   545  006253  66                 	db	102	;'f'
   546  006254  69                 	db	105	;'i'
   547  006255  71                 	db	113	;'q'
   548  006256  75                 	db	117	;'u'
   549  006257  65                 	db	101	;'e'
   550  006258  00                 	db	0
   551  006259  6F                 	db	111	;'o'
   552  00625A  20                 	db	32
   553  00625B  61                 	db	97	;'a'
   554  00625C  72                 	db	114	;'r'
   555  00625D  71                 	db	113	;'q'
   556  00625E  75                 	db	117	;'u'
   557  00625F  69                 	db	105	;'i'
   558  006260  76                 	db	118	;'v'
   559  006261  6F                 	db	111	;'o'
   560  006262  00                 	db	0
   561  006263  6F                 	db	111	;'o'
   562  006264  20                 	db	32
   563  006265  63                 	db	99	;'c'
   564  006266  61                 	db	97	;'a'
   565  006267  72                 	db	114	;'r'
   566  006268  74                 	db	116	;'t'
   567  006269  61                 	db	97	;'a'
   568  00626A  6F                 	db	111	;'o'
   569  00626B  00                 	db	0
   570  00626C                     STR_11:
   571  00626C  47                 	db	71	;'G'
   572  00626D  50                 	db	80	;'P'
   573  00626E  47                 	db	71	;'G'
   574  00626F  47                 	db	71	;'G'
   575  006270  41                 	db	65	;'A'
   576  006271  00                 	db	0
   577  006272                     STR_10:
   578  006272  47                 	db	71	;'G'
   579  006273  50                 	db	80	;'P'
   580  006274  52                 	db	82	;'R'
   581  006275  4D                 	db	77	;'M'
   582  006276  43                 	db	67	;'C'
   583  006277  00                 	db	0
   584  006278                     STR_25:
   585  006278  46                 	db	70	;'F'
   586  006279  41                 	db	65	;'A'
   587  00627A  54                 	db	84	;'T'
   588  00627B  00                 	db	0
   589  00627C  0D                 	db	13
   590  00627D  0A                 	db	10
   591  00627E  00                 	db	0
   592  00627F  00                 	db	0	; dummy byte at the end
   593  0000                     
   594                           ; #config settings
   595                           
   596                           	psect	cinit
   597  00421A                     __pcinit:
   598                           	opt stack 0
   599  00421A                     start_initialization:
   600                           	opt stack 0
   601  00421A                     __initialization:
   602                           	opt stack 0
   603                           
   604                           ; Initialize objects allocated to BANK1 (51 bytes)
   605                           ; load TBLPTR registers with __pidataBANK1
   606  00421A  0E52               	movlw	low __pidataBANK1
   607  00421C  6EF6               	movwf	tblptrl,c
   608  00421E  0E4A               	movlw	high __pidataBANK1
   609  004220  6EF7               	movwf	tblptrh,c
   610  004222  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   611  004224  6EF8               	movwf	tblptru,c
   612  004226  EE01  F099         	lfsr	0,__pdataBANK1
   613  00422A  EE10 F033          	lfsr	1,51
   614  00422E                     copy_data0:
   615  00422E  0009               	tblrd		*+
   616  004230  CFF5 FFEE          	movff	tablat,postinc0
   617  004234  50E5               	movf	postdec1,w,c
   618  004236  50E1               	movf	fsr1l,w,c
   619  004238  E1FA               	bnz	copy_data0
   620                           
   621                           ; Initialize objects allocated to COMRAM (1 bytes)
   622                           ; load TBLPTR registers with __pidataCOMRAM
   623  00423A  0E3A               	movlw	low __pidataCOMRAM
   624  00423C  6EF6               	movwf	tblptrl,c
   625  00423E  0E4D               	movlw	high __pidataCOMRAM
   626  004240  6EF7               	movwf	tblptrh,c
   627  004242  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   628  004244  6EF8               	movwf	tblptru,c
   629  004246  0009               	tblrd		*+	;fetch initializer
   630  004248  CFF5 F03E          	movff	tablat,__pdataCOMRAM
   631                           
   632                           ; Clear objects allocated to BIGRAM (544 bytes)
   633  00424C  EE03  F023         	lfsr	0,__pbssBIGRAM
   634  004250  EE12 F020          	lfsr	1,544
   635  004254                     clear_0:
   636  004254  6AEE               	clrf	postinc0,c
   637  004256  50E5               	movf	postdec1,w,c
   638  004258  50E1               	movf	fsr1l,w,c
   639  00425A  E1FC               	bnz	clear_0
   640  00425C  50E2               	movf	fsr1h,w,c
   641  00425E  E1FA               	bnz	clear_0
   642                           
   643                           ; Clear objects allocated to BANK2 (228 bytes)
   644  004260  EE02  F000         	lfsr	0,__pbssBANK2
   645  004264  0EE4               	movlw	228
   646  004266                     clear_1:
   647  004266  6AEE               	clrf	postinc0,c
   648  004268  06E8               	decf	wreg,f,c
   649  00426A  E1FD               	bnz	clear_1
   650                           
   651                           ; Clear objects allocated to BANK1 (153 bytes)
   652  00426C  EE01  F000         	lfsr	0,__pbssBANK1
   653  004270  0E99               	movlw	153
   654  004272                     clear_2:
   655  004272  6AEE               	clrf	postinc0,c
   656  004274  06E8               	decf	wreg,f,c
   657  004276  E1FD               	bnz	clear_2
   658                           
   659                           ; Clear objects allocated to BANK0 (21 bytes)
   660  004278  EE00  F0EB         	lfsr	0,__pbssBANK0
   661  00427C  0E15               	movlw	21
   662  00427E                     clear_3:
   663  00427E  6AEE               	clrf	postinc0,c
   664  004280  06E8               	decf	wreg,f,c
   665  004282  E1FD               	bnz	clear_3
   666                           
   667                           ; Clear objects allocated to COMRAM (28 bytes)
   668  004284  EE00  F022         	lfsr	0,__pbssCOMRAM
   669  004288  0E1C               	movlw	28
   670  00428A                     clear_4:
   671  00428A  6AEE               	clrf	postinc0,c
   672  00428C  06E8               	decf	wreg,f,c
   673  00428E  E1FD               	bnz	clear_4
   674  004290                     end_of_initialization:
   675                           	opt stack 0
   676  004290                     __end_of__initialization:
   677                           	opt stack 0
   678  004290  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   679  004292  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   680  004294  0E00               	movlw	low (__Lmediumconst shr (0+16))
   681  004296  6EF8               	movwf	tblptru,c
   682  004298  0100               	movlb	0
   683  00429A  EF5B  F025         	goto	_main	;jump to C main() function
   684                           tblptru	equ	0xFF8
   685                           tblptrh	equ	0xFF7
   686                           tblptrl	equ	0xFF6
   687                           tablat	equ	0xFF5
   688                           postinc0	equ	0xFEE
   689                           wreg	equ	0xFE8
   690                           postdec1	equ	0xFE5
   691                           fsr1h	equ	0xFE2
   692                           fsr1l	equ	0xFE1
   693                           
   694                           	psect	bssCOMRAM
   695  000022                     __pbssCOMRAM:
   696                           	opt stack 0
   697  000022                     _tempo_tarefa:
   698                           	opt stack 0
   699  000022                     	ds	6
   700  000028                     _data_buff:
   701                           	opt stack 0
   702  000028                     	ds	2
   703  00002A                     _GPGGA_ok:
   704                           	opt stack 0
   705  00002A                     	ds	2
   706  00002C                     _GPRMC_ok:
   707                           	opt stack 0
   708  00002C                     	ds	2
   709  00002E                     _time_sd:
   710                           	opt stack 0
   711  00002E                     	ds	2
   712  000030                     _timeout_tarefa:
   713                           	opt stack 0
   714  000030                     	ds	2
   715  000032                     _dado:
   716                           	opt stack 0
   717  000032                     	ds	1
   718  000033                     timer_dois@flag:
   719                           	opt stack 0
   720  000033                     	ds	1
   721  000034                     _estado:
   722                           	opt stack 0
   723  000034                     	ds	1
   724  000035                     _data_hoje:
   725                           	opt stack 0
   726  000035                     	ds	1
   727  000036                     _Term:
   728                           	opt stack 0
   729  000036                     	ds	1
   730  000037                     _SentenceType:
   731                           	opt stack 0
   732  000037                     	ds	1
   733  000038                     _char_number:
   734                           	opt stack 0
   735  000038                     	ds	1
   736  000039                     _tarefa_em_execucao:
   737                           	opt stack 0
   738  000039                     	ds	1
   739  00003A                     _data_uart_recebe:
   740                           	opt stack 0
   741  00003A                     	ds	1
   742  00003B                     _rawSatellites:
   743                           	opt stack 0
   744  00003B                     	ds	3
   745                           tblptru	equ	0xFF8
   746                           tblptrh	equ	0xFF7
   747                           tblptrl	equ	0xFF6
   748                           tablat	equ	0xFF5
   749                           postinc0	equ	0xFEE
   750                           wreg	equ	0xFE8
   751                           postdec1	equ	0xFE5
   752                           fsr1h	equ	0xFE2
   753                           fsr1l	equ	0xFE1
   754                           
   755                           	psect	dataCOMRAM
   756  00003E                     __pdataCOMRAM:
   757                           	opt stack 0
   758  00003E                     leitura_sdcard@size:
   759                           	opt stack 0
   760  00003E                     	ds	1
   761                           tblptru	equ	0xFF8
   762                           tblptrh	equ	0xFF7
   763                           tblptrl	equ	0xFF6
   764                           tablat	equ	0xFF5
   765                           postinc0	equ	0xFEE
   766                           wreg	equ	0xFE8
   767                           postdec1	equ	0xFE5
   768                           fsr1h	equ	0xFE2
   769                           fsr1l	equ	0xFE1
   770                           
   771                           	psect	bssBANK0
   772  0000EB                     __pbssBANK0:
   773                           	opt stack 0
   774  0000EB                     _tempo_backup:
   775                           	opt stack 0
   776  0000EB                     	ds	6
   777  0000F1                     _p_tarefas:
   778                           	opt stack 0
   779  0000F1                     	ds	6
   780  0000F7                     _flag:
   781                           	opt stack 0
   782  0000F7                     	ds	4
   783  0000FB                     _fsid:
   784                           	opt stack 0
   785  0000FB                     	ds	2
   786  0000FD                     _FatFs:
   787                           	opt stack 0
   788  0000FD                     	ds	2
   789  0000FF                     _sinaliza_int_timer:
   790                           	opt stack 0
   791  0000FF                     	ds	1
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           postdec1	equ	0xFE5
   799                           fsr1h	equ	0xFE2
   800                           fsr1l	equ	0xFE1
   801                           
   802                           	psect	bssBANK1
   803  000100                     __pbssBANK1:
   804                           	opt stack 0
   805  000100                     _string_dado:
   806                           	opt stack 0
   807  000100                     	ds	44
   808  00012C                     _fil:
   809                           	opt stack 0
   810  00012C                     	ds	28
   811  000148                     _rawLongitude:
   812                           	opt stack 0
   813  000148                     	ds	13
   814  000155                     _rawLatitude:
   815                           	opt stack 0
   816  000155                     	ds	13
   817  000162                     _buffer:
   818                           	opt stack 0
   819  000162                     	ds	12
   820  00016E                     _rawTime:
   821                           	opt stack 0
   822  00016E                     	ds	11
   823  000179                     _rawAltitude:
   824                           	opt stack 0
   825  000179                     	ds	7
   826  000180                     _rawDate:
   827                           	opt stack 0
   828  000180                     	ds	7
   829  000187                     _rawCourse:
   830                           	opt stack 0
   831  000187                     	ds	6
   832  00018D                     _rawSpeed:
   833                           	opt stack 0
   834  00018D                     	ds	6
   835  000193                     _sentence:
   836                           	opt stack 0
   837  000193                     	ds	6
   838                           tblptru	equ	0xFF8
   839                           tblptrh	equ	0xFF7
   840                           tblptrl	equ	0xFF6
   841                           tablat	equ	0xFF5
   842                           postinc0	equ	0xFEE
   843                           wreg	equ	0xFE8
   844                           postdec1	equ	0xFE5
   845                           fsr1h	equ	0xFE2
   846                           fsr1l	equ	0xFE1
   847                           
   848                           	psect	dataBANK1
   849  000199                     __pdataBANK1:
   850                           	opt stack 0
   851  000199                     verifica_fence_externo@F4363:
   852                           	opt stack 0
   853  000199                     	ds	11
   854  0001A4                     verifica_fence_externo@F4361:
   855                           	opt stack 0
   856  0001A4                     	ds	11
   857  0001AF                     escreve_inteiro_uart@F3958:
   858                           	opt stack 0
   859  0001AF                     	ds	7
   860  0001B6                     escreve_inteiro_lcd@F3966:
   861                           	opt stack 0
   862  0001B6                     	ds	7
   863  0001BD                     _filename:
   864                           	opt stack 0
   865  0001BD                     	ds	15
   866                           tblptru	equ	0xFF8
   867                           tblptrh	equ	0xFF7
   868                           tblptrl	equ	0xFF6
   869                           tablat	equ	0xFF5
   870                           postinc0	equ	0xFEE
   871                           wreg	equ	0xFE8
   872                           postdec1	equ	0xFE5
   873                           fsr1h	equ	0xFE2
   874                           fsr1l	equ	0xFE1
   875                           
   876                           	psect	bssBANK2
   877  000200                     __pbssBANK2:
   878                           	opt stack 0
   879  000200                     _poligono_ext:
   880                           	opt stack 0
   881  000200                     	ds	208
   882  0002D0                     _dado_arquivo:
   883                           	opt stack 0
   884  0002D0                     	ds	20
   885                           tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           postinc0	equ	0xFEE
   890                           wreg	equ	0xFE8
   891                           postdec1	equ	0xFE5
   892                           fsr1h	equ	0xFE2
   893                           fsr1l	equ	0xFE1
   894                           
   895                           	psect	bssBIGRAM
   896  000323                     __pbssBIGRAM:
   897                           	opt stack 0
   898  000323                     _fs:
   899                           	opt stack 0
   900  000323                     	ds	544
   901                           tblptru	equ	0xFF8
   902                           tblptrh	equ	0xFF7
   903                           tblptrl	equ	0xFF6
   904                           tablat	equ	0xFF5
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           postdec1	equ	0xFE5
   908                           fsr1h	equ	0xFE2
   909                           fsr1l	equ	0xFE1
   910                           
   911                           	psect	cstackBANK3
   912  000300                     __pcstackBANK3:
   913                           	opt stack 0
   914  000300                     fprintf@s:
   915                           	opt stack 0
   916                           
   917                           ; 16 bytes @ 0x0
   918  000300                     	ds	16
   919  000310                     fprintf@res:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x10
   923  000310                     	ds	2
   924  000312                     _fprintf$2487:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x12
   928  000312                     	ds	2
   929  000314                     fprintf@w:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x14
   933  000314                     	ds	2
   934  000316                     fprintf@f:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x16
   938  000316                     	ds	1
   939  000317                     fprintf@r:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x17
   943  000317                     	ds	1
   944  000318                     fprintf@val:
   945                           	opt stack 0
   946                           
   947                           ; 4 bytes @ 0x18
   948  000318                     	ds	4
   949  00031C                     fprintf@arp:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x1C
   953  00031C                     	ds	2
   954  00031E                     fprintf@cc:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x1E
   958  00031E                     	ds	2
   959  000320                     fprintf@i:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x20
   963  000320                     	ds	2
   964  000322                     fprintf@c:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x22
   968  000322                     	ds	1
   969                           tblptru	equ	0xFF8
   970                           tblptrh	equ	0xFF7
   971                           tblptrl	equ	0xFF6
   972                           tablat	equ	0xFF5
   973                           postinc0	equ	0xFEE
   974                           wreg	equ	0xFE8
   975                           postdec1	equ	0xFE5
   976                           fsr1h	equ	0xFE2
   977                           fsr1l	equ	0xFE1
   978                           
   979                           	psect	cstackBANK1
   980  0001CC                     __pcstackBANK1:
   981                           	opt stack 0
   982  0001CC                     fputc@c:
   983                           	opt stack 0
   984  0001CC                     f_open@fn:
   985                           	opt stack 0
   986                           
   987                           ; 12 bytes @ 0x0
   988  0001CC                     	ds	1
   989  0001CD                     fputc@bw:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x1
   993  0001CD                     	ds	2
   994  0001CF                     ?_fputs:
   995                           	opt stack 0
   996  0001CF                     fputs@str:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x3
  1000  0001CF                     	ds	2
  1001  0001D1                     fputs@fil:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x5
  1005  0001D1                     	ds	2
  1006  0001D3                     fputs@n:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x7
  1010  0001D3                     	ds	2
  1011  0001D5                     ?_fprintf:
  1012                           	opt stack 0
  1013  0001D5                     fprintf@fil:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x9
  1017  0001D5                     	ds	2
  1018  0001D7                     fprintf@str:
  1019                           	opt stack 0
  1020                           
  1021                           ; 2 bytes @ 0xB
  1022  0001D7                     	ds	1
  1023  0001D8                     f_open@rs:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0xC
  1027  0001D8                     	ds	2
  1028  0001DA                     f_open@dw:
  1029                           	opt stack 0
  1030                           
  1031                           ; 4 bytes @ 0xE
  1032  0001DA                     	ds	4
  1033  0001DE                     f_open@res:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x12
  1037  0001DE                     	ds	1
  1038  0001DF                     f_open@dir:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x13
  1042  0001DF                     	ds	2
  1043  0001E1                     ??_fprintf:
  1044  0001E1                     f_open@dj:
  1045                           	opt stack 0
  1046                           
  1047                           ; 14 bytes @ 0x15
  1048  0001E1                     	ds	14
  1049  0001EF                     
  1050                           ; 1 bytes @ 0x23
  1051  0001EF                     	ds	2
  1052                           tblptru	equ	0xFF8
  1053                           tblptrh	equ	0xFF7
  1054                           tblptrl	equ	0xFF6
  1055                           tablat	equ	0xFF5
  1056                           postinc0	equ	0xFEE
  1057                           wreg	equ	0xFE8
  1058                           postdec1	equ	0xFE5
  1059                           fsr1h	equ	0xFE2
  1060                           fsr1l	equ	0xFE1
  1061                           
  1062                           	psect	cstackBANK0
  1063  000060                     __pcstackBANK0:
  1064                           	opt stack 0
  1065  000060                     ??_dummy_clocks:
  1066  000060                     ?_Latitude:
  1067                           	opt stack 0
  1068  000060                     ?_Longitude:
  1069                           	opt stack 0
  1070  000060                     ?_strlen:
  1071                           	opt stack 0
  1072  000060                     ?_memcmp:
  1073                           	opt stack 0
  1074  000060                     ?___wmul:
  1075                           	opt stack 0
  1076  000060                     ?_get_fattime:
  1077                           	opt stack 0
  1078  000060                     ?___lmul:
  1079                           	opt stack 0
  1080  000060                     ?___aldiv:
  1081                           	opt stack 0
  1082  000060                     ?___lldiv:
  1083                           	opt stack 0
  1084  000060                     ?___llmod:
  1085                           	opt stack 0
  1086  000060                     escreve_SPI@TempVar:
  1087                           	opt stack 0
  1088  000060                     disk_ioctl@cmd:
  1089                           	opt stack 0
  1090  000060                     sdc_disk_status@stat:
  1091                           	opt stack 0
  1092  000060                     delay@contador_ext:
  1093                           	opt stack 0
  1094  000060                     _isdigit$2825:
  1095                           	opt stack 0
  1096  000060                     write_timer_zero@timer0:
  1097                           	opt stack 0
  1098  000060                     f_mount@fs:
  1099                           	opt stack 0
  1100  000060                     ___wmul@multiplier:
  1101                           	opt stack 0
  1102  000060                     memcmp@s1:
  1103                           	opt stack 0
  1104  000060                     memcpy@d1:
  1105                           	opt stack 0
  1106  000060                     memset@p1:
  1107                           	opt stack 0
  1108  000060                     strlen@s:
  1109                           	opt stack 0
  1110  000060                     wait_ready@timeout:
  1111                           	opt stack 0
  1112  000060                     ___lmul@multiplier:
  1113                           	opt stack 0
  1114  000060                     ___aldiv@dividend:
  1115                           	opt stack 0
  1116  000060                     ___lldiv@dividend:
  1117                           	opt stack 0
  1118  000060                     ___llmod@dividend:
  1119                           	opt stack 0
  1120                           
  1121                           ; 4 bytes @ 0x0
  1122  000060                     	ds	1
  1123  000061                     escreve_SPI@dado:
  1124                           	opt stack 0
  1125  000061                     sdc_disk_status@pdrv:
  1126                           	opt stack 0
  1127  000061                     delay@contador_int:
  1128                           	opt stack 0
  1129  000061                     isdigit@c:
  1130                           	opt stack 0
  1131  000061                     disk_ioctl@buff:
  1132                           	opt stack 0
  1133                           
  1134                           ; 2 bytes @ 0x1
  1135  000061                     	ds	1
  1136  000062                     ??_init_lcd:
  1137  000062                     ??_strlen:
  1138  000062                     dummy_clocks@n:
  1139                           	opt stack 0
  1140  000062                     posicao_cursor_lcd@coluna:
  1141                           	opt stack 0
  1142  000062                     disk_status@result:
  1143                           	opt stack 0
  1144  000062                     escreve_frase_ram_lcd@buffer:
  1145                           	opt stack 0
  1146  000062                     write_timer_zero@timer:
  1147                           	opt stack 0
  1148  000062                     ___wmul@multiplicand:
  1149                           	opt stack 0
  1150  000062                     memcmp@s2:
  1151                           	opt stack 0
  1152  000062                     memcpy@s1:
  1153                           	opt stack 0
  1154  000062                     memset@c:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x2
  1158  000062                     	ds	1
  1159  000063                     disk_ioctl@pdrv:
  1160                           	opt stack 0
  1161  000063                     posicao_cursor_lcd@linha:
  1162                           	opt stack 0
  1163  000063                     dummy_clocks@i:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x3
  1167  000063                     	ds	1
  1168  000064                     ??_get_fattime:
  1169  000064                     wait_ready@res:
  1170                           	opt stack 0
  1171  000064                     disk_status@pdrv:
  1172                           	opt stack 0
  1173  000064                     disk_ioctl@res:
  1174                           	opt stack 0
  1175  000064                     posicao_cursor_lcd@endereco:
  1176                           	opt stack 0
  1177  000064                     ___wmul@product:
  1178                           	opt stack 0
  1179  000064                     memcmp@n:
  1180                           	opt stack 0
  1181  000064                     memcpy@n:
  1182                           	opt stack 0
  1183  000064                     memset@n:
  1184                           	opt stack 0
  1185  000064                     strlen@cp:
  1186                           	opt stack 0
  1187  000064                     ___lmul@multiplicand:
  1188                           	opt stack 0
  1189  000064                     ___aldiv@divisor:
  1190                           	opt stack 0
  1191  000064                     ___lldiv@divisor:
  1192                           	opt stack 0
  1193  000064                     ___llmod@divisor:
  1194                           	opt stack 0
  1195                           
  1196                           ; 4 bytes @ 0x4
  1197  000064                     	ds	1
  1198  000065                     ??_mensagem_inicial:
  1199  000065                     disk_status@stat:
  1200                           	opt stack 0
  1201  000065                     command@arg:
  1202                           	opt stack 0
  1203                           
  1204                           ; 4 bytes @ 0x5
  1205  000065                     	ds	1
  1206  000066                     ??_memcmp:
  1207  000066                     ?_atoi:
  1208                           	opt stack 0
  1209  000066                     memcpy@tmp:
  1210                           	opt stack 0
  1211  000066                     monta_sd@dado:
  1212                           	opt stack 0
  1213  000066                     validate@fs:
  1214                           	opt stack 0
  1215  000066                     atoi@s:
  1216                           	opt stack 0
  1217  000066                     memset@p:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x6
  1221  000066                     	ds	1
  1222  000067                     memcpy@d:
  1223                           	opt stack 0
  1224  000067                     mensagem_inicial@msg_linha_um:
  1225                           	opt stack 0
  1226                           
  1227                           ; 17 bytes @ 0x7
  1228  000067                     	ds	1
  1229  000068                     ??_atoi:
  1230  000068                     monta_sd@index:
  1231                           	opt stack 0
  1232  000068                     ___aldiv@counter:
  1233                           	opt stack 0
  1234  000068                     make_dirfile@path:
  1235                           	opt stack 0
  1236  000068                     validate@id:
  1237                           	opt stack 0
  1238  000068                     ___lmul@product:
  1239                           	opt stack 0
  1240  000068                     ___lldiv@quotient:
  1241                           	opt stack 0
  1242                           
  1243                           ; 4 bytes @ 0x8
  1244  000068                     	ds	1
  1245  000069                     command@CRC:
  1246                           	opt stack 0
  1247  000069                     monta_sd@size:
  1248                           	opt stack 0
  1249  000069                     ___aldiv@sign:
  1250                           	opt stack 0
  1251  000069                     memcpy@s:
  1252                           	opt stack 0
  1253                           
  1254                           ; 2 bytes @ 0x9
  1255  000069                     	ds	1
  1256  00006A                     ??_validate:
  1257  00006A                     command@CMD:
  1258                           	opt stack 0
  1259  00006A                     monta_sd@i:
  1260                           	opt stack 0
  1261  00006A                     atoi@sign:
  1262                           	opt stack 0
  1263  00006A                     make_dirfile@dirname:
  1264                           	opt stack 0
  1265  00006A                     ___aldiv@quotient:
  1266                           	opt stack 0
  1267                           
  1268                           ; 4 bytes @ 0xA
  1269  00006A                     	ds	1
  1270  00006B                     command@argument:
  1271                           	opt stack 0
  1272  00006B                     atoi@a:
  1273                           	opt stack 0
  1274                           
  1275                           ; 2 bytes @ 0xB
  1276  00006B                     	ds	1
  1277  00006C                     ??_make_dirfile:
  1278  00006C                     ?_clust2sect:
  1279                           	opt stack 0
  1280  00006C                     ___lldiv@counter:
  1281                           	opt stack 0
  1282  00006C                     sdc_reset@i:
  1283                           	opt stack 0
  1284  00006C                     sdc_disk_read@p_buff:
  1285                           	opt stack 0
  1286  00006C                     sdc_disk_write@p_buff:
  1287                           	opt stack 0
  1288  00006C                     clust2sect@clust:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0xC
  1292  00006C                     	ds	1
  1293  00006D                     ??_verifica_fence_externo:
  1294                           
  1295                           ; 1 bytes @ 0xD
  1296  00006D                     	ds	1
  1297  00006E                     sdc_reset@count_nosd:
  1298                           	opt stack 0
  1299  00006E                     _make_dirfile$1999:
  1300                           	opt stack 0
  1301  00006E                     sdc_disk_read@sector:
  1302                           	opt stack 0
  1303  00006E                     sdc_disk_write@sector:
  1304                           	opt stack 0
  1305  00006E                     configura_baudrate_uart@baudrate:
  1306                           	opt stack 0
  1307                           
  1308                           ; 4 bytes @ 0xE
  1309  00006E                     	ds	2
  1310  000070                     ??_clust2sect:
  1311  000070                     make_dirfile@b:
  1312                           	opt stack 0
  1313  000070                     sdc_reset@count:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x10
  1317  000070                     	ds	1
  1318  000071                     make_dirfile@t:
  1319                           	opt stack 0
  1320                           
  1321                           ; 1 bytes @ 0x11
  1322  000071                     	ds	1
  1323  000072                     ??_configura_baudrate_uart:
  1324  000072                     sdc_reset@buff:
  1325                           	opt stack 0
  1326  000072                     sdc_disk_read@count:
  1327                           	opt stack 0
  1328  000072                     sdc_disk_write@count:
  1329                           	opt stack 0
  1330  000072                     make_dirfile@a:
  1331                           	opt stack 0
  1332                           
  1333                           ; 1 bytes @ 0x12
  1334  000072                     	ds	1
  1335  000073                     ??_sdc_disk_initialize:
  1336  000073                     ??_sdc_disk_read:
  1337  000073                     ??_sdc_disk_write:
  1338  000073                     make_dirfile@n:
  1339                           	opt stack 0
  1340  000073                     verifica_fence_externo@temp_buff_lat:
  1341                           	opt stack 0
  1342                           
  1343                           ; 11 bytes @ 0x13
  1344  000073                     	ds	1
  1345  000074                     make_dirfile@c:
  1346                           	opt stack 0
  1347  000074                     sdc_disk_initialize@i:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x14
  1351  000074                     	ds	1
  1352  000075                     clust2sect@fs:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x15
  1356  000075                     	ds	1
  1357  000076                     sdc_disk_initialize@stat:
  1358                           	opt stack 0
  1359                           
  1360                           ; 1 bytes @ 0x16
  1361  000076                     	ds	1
  1362  000077                     sdc_disk_read@ptr:
  1363                           	opt stack 0
  1364  000077                     sdc_disk_initialize@count1:
  1365                           	opt stack 0
  1366  000077                     sdc_disk_write@i:
  1367                           	opt stack 0
  1368                           
  1369                           ; 2 bytes @ 0x17
  1370  000077                     	ds	1
  1371  000078                     sdc_disk_read@start_add:
  1372                           	opt stack 0
  1373  000078                     mensagem_inicial@msg_dois:
  1374                           	opt stack 0
  1375                           
  1376                           ; 17 bytes @ 0x18
  1377  000078                     	ds	1
  1378  000079                     sdc_disk_initialize@crc_number:
  1379                           	opt stack 0
  1380  000079                     sdc_disk_write@count1:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x19
  1384  000079                     	ds	1
  1385  00007A                     configura_baudrate_uart@x:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x1A
  1389  00007A                     	ds	1
  1390  00007B                     sdc_disk_initialize@buff_i:
  1391                           	opt stack 0
  1392  00007B                     sdc_disk_write@res:
  1393                           	opt stack 0
  1394                           
  1395                           ; 1 bytes @ 0x1B
  1396  00007B                     	ds	1
  1397  00007C                     sdc_disk_initialize@ocr:
  1398                           	opt stack 0
  1399  00007C                     sdc_disk_read@length:
  1400                           	opt stack 0
  1401  00007C                     sdc_disk_write@j:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x1C
  1405  00007C                     	ds	1
  1406  00007D                     sdc_disk_initialize@count2:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x1D
  1410  00007D                     	ds	1
  1411  00007E                     sdc_disk_read@buff:
  1412                           	opt stack 0
  1413  00007E                     sdc_disk_write@buff:
  1414                           	opt stack 0
  1415  00007E                     verifica_fence_externo@temp_buff_long:
  1416                           	opt stack 0
  1417                           
  1418                           ; 11 bytes @ 0x1E
  1419  00007E                     	ds	1
  1420  00007F                     sdc_disk_initialize@buff:
  1421                           	opt stack 0
  1422  00007F                     disk_read@buff:
  1423                           	opt stack 0
  1424  00007F                     disk_write@buff:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x1F
  1428  00007F                     	ds	1
  1429  000080                     disk_initialize@pdrv:
  1430                           	opt stack 0
  1431                           
  1432                           ; 1 bytes @ 0x20
  1433  000080                     	ds	1
  1434  000081                     disk_initialize@stat:
  1435                           	opt stack 0
  1436  000081                     disk_read@sector:
  1437                           	opt stack 0
  1438  000081                     disk_write@sector:
  1439                           	opt stack 0
  1440                           
  1441                           ; 4 bytes @ 0x21
  1442  000081                     	ds	4
  1443  000085                     disk_read@count:
  1444                           	opt stack 0
  1445  000085                     disk_write@count:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x25
  1449  000085                     	ds	1
  1450  000086                     ??_disk_read:
  1451  000086                     ??_disk_write:
  1452                           
  1453                           ; 1 bytes @ 0x26
  1454  000086                     	ds	1
  1455  000087                     disk_read@pdrv:
  1456                           	opt stack 0
  1457  000087                     disk_write@pdrv:
  1458                           	opt stack 0
  1459                           
  1460                           ; 1 bytes @ 0x27
  1461  000087                     	ds	1
  1462  000088                     disk_read@result:
  1463                           	opt stack 0
  1464  000088                     disk_write@result:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x28
  1468  000088                     	ds	1
  1469  000089                     verifica_fence_externo@count:
  1470                           	opt stack 0
  1471                           
  1472                           ; 1 bytes @ 0x29
  1473  000089                     	ds	1
  1474  00008A                     disk_read@res:
  1475                           	opt stack 0
  1476  00008A                     disk_write@res:
  1477                           	opt stack 0
  1478  00008A                     verifica_fence_externo@point_buff_gps_lat:
  1479                           	opt stack 0
  1480  00008A                     get_fattime@f_time:
  1481                           	opt stack 0
  1482                           
  1483                           ; 9 bytes @ 0x2A
  1484  00008A                     	ds	1
  1485  00008B                     move_window@sector:
  1486                           	opt stack 0
  1487  00008B                     check_fs@sect:
  1488                           	opt stack 0
  1489                           
  1490                           ; 4 bytes @ 0x2B
  1491  00008B                     	ds	1
  1492  00008C                     verifica_fence_externo@point_buff_gps_long:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x2C
  1496  00008C                     	ds	2
  1497  00008E                     verifica_fence_externo@j:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x2E
  1501  00008E                     	ds	1
  1502  00008F                     ??_move_window:
  1503  00008F                     verifica_fence_externo@point:
  1504                           	opt stack 0
  1505                           
  1506                           ; 1 bytes @ 0x2F
  1507  00008F                     	ds	1
  1508  000090                     verifica_fence_externo@i:
  1509                           	opt stack 0
  1510                           
  1511                           ; 1 bytes @ 0x30
  1512  000090                     	ds	1
  1513  000091                     check_fs@fs:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x31
  1517  000091                     	ds	2
  1518  000093                     auto_mount@path:
  1519                           	opt stack 0
  1520                           
  1521                           ; 2 bytes @ 0x33
  1522  000093                     	ds	2
  1523  000095                     auto_mount@chk_wp:
  1524                           	opt stack 0
  1525                           
  1526                           ; 1 bytes @ 0x35
  1527  000095                     	ds	1
  1528  000096                     ??_auto_mount:
  1529                           
  1530                           ; 1 bytes @ 0x36
  1531  000096                     	ds	3
  1532  000099                     move_window@n:
  1533                           	opt stack 0
  1534                           
  1535                           ; 1 bytes @ 0x39
  1536  000099                     	ds	1
  1537  00009A                     move_window@wsect:
  1538                           	opt stack 0
  1539                           
  1540                           ; 4 bytes @ 0x3A
  1541  00009A                     	ds	4
  1542  00009E                     move_window@fs:
  1543                           	opt stack 0
  1544                           
  1545                           ; 2 bytes @ 0x3E
  1546  00009E                     	ds	2
  1547  0000A0                     ?_get_cluster:
  1548                           	opt stack 0
  1549  0000A0                     sync@fs:
  1550                           	opt stack 0
  1551  0000A0                     get_cluster@clust:
  1552                           	opt stack 0
  1553  0000A0                     put_cluster@clust:
  1554                           	opt stack 0
  1555                           
  1556                           ; 2 bytes @ 0x40
  1557  0000A0                     	ds	2
  1558  0000A2                     ??_get_cluster:
  1559  0000A2                     put_cluster@val:
  1560                           	opt stack 0
  1561  0000A2                     f_sync@fp:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x42
  1565  0000A2                     	ds	2
  1566  0000A4                     ??_put_cluster:
  1567  0000A4                     f_sync@tim:
  1568                           	opt stack 0
  1569                           
  1570                           ; 4 bytes @ 0x44
  1571  0000A4                     	ds	1
  1572  0000A5                     auto_mount@maxclust:
  1573                           	opt stack 0
  1574                           
  1575                           ; 4 bytes @ 0x45
  1576  0000A5                     	ds	3
  1577  0000A8                     f_sync@res:
  1578                           	opt stack 0
  1579  0000A8                     _put_cluster$1889:
  1580                           	opt stack 0
  1581                           
  1582                           ; 2 bytes @ 0x48
  1583  0000A8                     	ds	1
  1584  0000A9                     get_cluster@wc:
  1585                           	opt stack 0
  1586  0000A9                     f_sync@dir:
  1587                           	opt stack 0
  1588  0000A9                     auto_mount@bootsect:
  1589                           	opt stack 0
  1590                           
  1591                           ; 4 bytes @ 0x49
  1592  0000A9                     	ds	1
  1593  0000AA                     _put_cluster$1890:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x4A
  1597  0000AA                     	ds	1
  1598  0000AB                     f_close@fp:
  1599                           	opt stack 0
  1600  0000AB                     get_cluster@fatsect:
  1601                           	opt stack 0
  1602                           
  1603                           ; 4 bytes @ 0x4B
  1604  0000AB                     	ds	1
  1605  0000AC                     put_cluster@fatsect:
  1606                           	opt stack 0
  1607                           
  1608                           ; 4 bytes @ 0x4C
  1609  0000AC                     	ds	1
  1610  0000AD                     f_close@res:
  1611                           	opt stack 0
  1612  0000AD                     auto_mount@totalsect:
  1613                           	opt stack 0
  1614                           
  1615                           ; 4 bytes @ 0x4D
  1616  0000AD                     	ds	2
  1617  0000AF                     get_cluster@bc:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x4F
  1621  0000AF                     	ds	1
  1622  0000B0                     put_cluster@bc:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x50
  1626  0000B0                     	ds	1
  1627  0000B1                     get_cluster@fs:
  1628                           	opt stack 0
  1629  0000B1                     auto_mount@p:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x51
  1633  0000B1                     	ds	1
  1634  0000B2                     put_cluster@p:
  1635                           	opt stack 0
  1636                           
  1637                           ; 2 bytes @ 0x52
  1638  0000B2                     	ds	1
  1639  0000B3                     auto_mount@fmt:
  1640                           	opt stack 0
  1641  0000B3                     next_dir_entry@dj:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x53
  1645  0000B3                     	ds	1
  1646  0000B4                     auto_mount@stat:
  1647                           	opt stack 0
  1648  0000B4                     put_cluster@fs:
  1649                           	opt stack 0
  1650                           
  1651                           ; 2 bytes @ 0x54
  1652  0000B4                     	ds	1
  1653  0000B5                     ??_next_dir_entry:
  1654  0000B5                     auto_mount@fatsize:
  1655                           	opt stack 0
  1656                           
  1657                           ; 4 bytes @ 0x55
  1658  0000B5                     	ds	1
  1659  0000B6                     ?_create_chain:
  1660                           	opt stack 0
  1661  0000B6                     remove_chain@clust:
  1662                           	opt stack 0
  1663  0000B6                     create_chain@clust:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x56
  1667  0000B6                     	ds	2
  1668  0000B8                     
  1669                           ; 1 bytes @ 0x58
  1670  0000B8                     	ds	1
  1671  0000B9                     auto_mount@fs:
  1672                           	opt stack 0
  1673                           
  1674                           ; 2 bytes @ 0x59
  1675  0000B9                     	ds	1
  1676  0000BA                     remove_chain@nxt:
  1677                           	opt stack 0
  1678  0000BA                     create_chain@mcl:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x5A
  1682  0000BA                     	ds	2
  1683  0000BC                     remove_chain@fs:
  1684                           	opt stack 0
  1685  0000BC                     create_chain@fs:
  1686                           	opt stack 0
  1687  0000BC                     next_dir_entry@clust:
  1688                           	opt stack 0
  1689                           
  1690                           ; 2 bytes @ 0x5C
  1691  0000BC                     	ds	2
  1692  0000BE                     create_chain@cstat:
  1693                           	opt stack 0
  1694  0000BE                     next_dir_entry@idx:
  1695                           	opt stack 0
  1696                           
  1697                           ; 2 bytes @ 0x5E
  1698  0000BE                     	ds	2
  1699  0000C0                     create_chain@scl:
  1700                           	opt stack 0
  1701  0000C0                     trace_path@dj:
  1702                           	opt stack 0
  1703                           
  1704                           ; 2 bytes @ 0x60
  1705  0000C0                     	ds	2
  1706  0000C2                     create_chain@ncl:
  1707                           	opt stack 0
  1708  0000C2                     trace_path@fn:
  1709                           	opt stack 0
  1710                           
  1711                           ; 2 bytes @ 0x62
  1712  0000C2                     	ds	2
  1713  0000C4                     trace_path@path:
  1714                           	opt stack 0
  1715  0000C4                     reserve_direntry@dj:
  1716                           	opt stack 0
  1717  0000C4                     f_write@fp:
  1718                           	opt stack 0
  1719  0000C4                     f_lseek@fp:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0x64
  1723  0000C4                     	ds	2
  1724  0000C6                     trace_path@dir:
  1725                           	opt stack 0
  1726  0000C6                     reserve_direntry@dir:
  1727                           	opt stack 0
  1728  0000C6                     f_write@buff:
  1729                           	opt stack 0
  1730  0000C6                     f_lseek@ofs:
  1731                           	opt stack 0
  1732                           
  1733                           ; 4 bytes @ 0x66
  1734  0000C6                     	ds	2
  1735  0000C8                     ??_trace_path:
  1736  0000C8                     ??_reserve_direntry:
  1737  0000C8                     f_write@btw:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x68
  1741  0000C8                     	ds	2
  1742  0000CA                     ??_f_lseek:
  1743  0000CA                     f_write@bw:
  1744                           	opt stack 0
  1745  0000CA                     reserve_direntry@sector:
  1746                           	opt stack 0
  1747                           
  1748                           ; 4 bytes @ 0x6A
  1749  0000CA                     	ds	2
  1750  0000CC                     ??_f_write:
  1751  0000CC                     _trace_path$2046:
  1752                           	opt stack 0
  1753                           
  1754                           ; 2 bytes @ 0x6C
  1755  0000CC                     	ds	2
  1756  0000CE                     reserve_direntry@n:
  1757                           	opt stack 0
  1758  0000CE                     _trace_path$2048:
  1759                           	opt stack 0
  1760                           
  1761                           ; 2 bytes @ 0x6E
  1762  0000CE                     	ds	1
  1763  0000CF                     reserve_direntry@dptr:
  1764                           	opt stack 0
  1765                           
  1766                           ; 2 bytes @ 0x6F
  1767  0000CF                     	ds	1
  1768  0000D0                     trace_path@fs:
  1769                           	opt stack 0
  1770                           
  1771                           ; 2 bytes @ 0x70
  1772  0000D0                     	ds	1
  1773  0000D1                     reserve_direntry@c:
  1774                           	opt stack 0
  1775                           
  1776                           ; 1 bytes @ 0x71
  1777  0000D1                     	ds	1
  1778  0000D2                     trace_path@clust:
  1779                           	opt stack 0
  1780  0000D2                     reserve_direntry@clust:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x72
  1784  0000D2                     	ds	2
  1785  0000D4                     trace_path@ds:
  1786                           	opt stack 0
  1787  0000D4                     reserve_direntry@fs:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0x74
  1791  0000D4                     	ds	1
  1792  0000D5                     trace_path@dptr:
  1793                           	opt stack 0
  1794                           
  1795                           ; 2 bytes @ 0x75
  1796  0000D5                     	ds	1
  1797  0000D6                     f_lseek@res:
  1798                           	opt stack 0
  1799                           
  1800                           ; 1 bytes @ 0x76
  1801  0000D6                     	ds	1
  1802  0000D7                     f_open@fp:
  1803                           	opt stack 0
  1804  0000D7                     f_lseek@ifptr:
  1805                           	opt stack 0
  1806                           
  1807                           ; 4 bytes @ 0x77
  1808  0000D7                     	ds	1
  1809  0000D8                     f_write@res:
  1810                           	opt stack 0
  1811                           
  1812                           ; 1 bytes @ 0x78
  1813  0000D8                     	ds	1
  1814  0000D9                     f_open@path:
  1815                           	opt stack 0
  1816  0000D9                     f_write@wbuff:
  1817                           	opt stack 0
  1818                           
  1819                           ; 2 bytes @ 0x79
  1820  0000D9                     	ds	2
  1821  0000DB                     f_open@mode:
  1822                           	opt stack 0
  1823  0000DB                     f_write@sect:
  1824                           	opt stack 0
  1825  0000DB                     f_lseek@csize:
  1826                           	opt stack 0
  1827                           
  1828                           ; 4 bytes @ 0x7B
  1829  0000DB                     	ds	1
  1830  0000DC                     ??_f_open:
  1831                           
  1832                           ; 1 bytes @ 0x7C
  1833  0000DC                     	ds	3
  1834  0000DF                     f_write@cc:
  1835                           	opt stack 0
  1836  0000DF                     f_lseek@clust:
  1837                           	opt stack 0
  1838                           
  1839                           ; 2 bytes @ 0x7F
  1840  0000DF                     	ds	2
  1841  0000E1                     f_write@clust:
  1842                           	opt stack 0
  1843                           
  1844                           ; 2 bytes @ 0x81
  1845  0000E1                     	ds	2
  1846  0000E3                     f_write@wcnt:
  1847                           	opt stack 0
  1848                           
  1849                           ; 2 bytes @ 0x83
  1850  0000E3                     	ds	2
  1851  0000E5                     ?_fputc:
  1852                           	opt stack 0
  1853  0000E5                     fputc@chr:
  1854                           	opt stack 0
  1855                           
  1856                           ; 2 bytes @ 0x85
  1857  0000E5                     	ds	2
  1858  0000E7                     fputc@fil:
  1859                           	opt stack 0
  1860                           
  1861                           ; 2 bytes @ 0x87
  1862  0000E7                     	ds	2
  1863  0000E9                     ??_fputs:
  1864                           
  1865                           ; 1 bytes @ 0x89
  1866  0000E9                     	ds	1
  1867  0000EA                     escalonador@cont:
  1868                           	opt stack 0
  1869                           
  1870                           ; 1 bytes @ 0x8A
  1871  0000EA                     	ds	1
  1872                           tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           postdec1	equ	0xFE5
  1879                           fsr1h	equ	0xFE2
  1880                           fsr1l	equ	0xFE1
  1881                           
  1882                           	psect	cstackCOMRAM
  1883  000001                     __pcstackCOMRAM:
  1884                           	opt stack 0
  1885  000001                     ?_strcmp:
  1886                           	opt stack 0
  1887  000001                     stringcpy@str1:
  1888                           	opt stack 0
  1889  000001                     strcmp@s1:
  1890                           	opt stack 0
  1891  000001                     i2write_timer_zero@timer0:
  1892                           	opt stack 0
  1893                           
  1894                           ; 2 bytes @ 0x0
  1895  000001                     	ds	2
  1896  000003                     stringcpy@str2:
  1897                           	opt stack 0
  1898  000003                     strcmp@s2:
  1899                           	opt stack 0
  1900  000003                     i2write_timer_zero@timer:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x2
  1904  000003                     	ds	2
  1905  000005                     ??_strcmp:
  1906  000005                     stringcpy@dir:
  1907                           	opt stack 0
  1908                           
  1909                           ; 2 bytes @ 0x4
  1910  000005                     	ds	1
  1911  000006                     strcmp@r:
  1912                           	opt stack 0
  1913                           
  1914                           ; 1 bytes @ 0x5
  1915  000006                     	ds	1
  1916  000007                     ??_stringcpy:
  1917                           
  1918                           ; 1 bytes @ 0x6
  1919  000007                     	ds	2
  1920  000009                     stringcpy@chr:
  1921                           	opt stack 0
  1922                           
  1923                           ; 1 bytes @ 0x8
  1924  000009                     	ds	1
  1925  00000A                     GPSRead@buff:
  1926                           	opt stack 0
  1927                           
  1928                           ; 1 bytes @ 0x9
  1929  00000A                     	ds	1
  1930  00000B                     GPSRead@c:
  1931                           	opt stack 0
  1932                           
  1933                           ; 1 bytes @ 0xA
  1934  00000B                     	ds	1
  1935  00000C                     ??_isr:
  1936                           
  1937                           ; 1 bytes @ 0xB
  1938  00000C                     	ds	20
  1939  000020                     isr@cont:
  1940                           	opt stack 0
  1941                           
  1942                           ; 1 bytes @ 0x1F
  1943  000020                     	ds	1
  1944  000021                     ??_isdigit:
  1945  000021                     ??_disk_status:
  1946  000021                     response@buff:
  1947                           	opt stack 0
  1948  000021                     escreve_cmd_lcd@comando:
  1949                           	opt stack 0
  1950  000021                     endereco_cursor_lcd@endereco:
  1951                           	opt stack 0
  1952  000021                     escreve_caractere_lcd@data:
  1953                           	opt stack 0
  1954  000021                     f_mount@drv:
  1955                           	opt stack 0
  1956  000021                     ___llmod@counter:
  1957                           	opt stack 0
  1958                           
  1959                           ; 1 bytes @ 0x20
  1960  000021                     	ds	1
  1961  000022                     tblptru	equ	0xFF8
  1962                           tblptrh	equ	0xFF7
  1963                           tblptrl	equ	0xFF6
  1964                           tablat	equ	0xFF5
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           postdec1	equ	0xFE5
  1968                           fsr1h	equ	0xFE2
  1969                           fsr1l	equ	0xFE1
  1970                           
  1971                           ; 1 bytes @ 0x21
  1972 ;;
  1973 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1974 ;;
  1975 ;; *************** function _main *****************
  1976 ;; Defined at:
  1977 ;;		line 214 in file "main.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;		None
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;		None
  1982 ;; Return value:  Size  Location     Type
  1983 ;;                  1    wreg      void 
  1984 ;; Registers used:
  1985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1991 ;;      Params:         0       0       0       0       0       0       0       0       0
  1992 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1993 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1994 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1995 ;;Total ram usage:        0 bytes
  1996 ;; Hardware stack levels required when called:   18
  1997 ;; This function calls:
  1998 ;;		_dados_gps_to_sd
  1999 ;;		_escalonador
  2000 ;;		_inicializa_tarefas
  2001 ;;		_inicializa_uart
  2002 ;;		_init_hardware
  2003 ;;		_init_lcd
  2004 ;;		_mensagem_inicial
  2005 ;; This function is called by:
  2006 ;;		Startup code after reset
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text0
  2011  004AB6                     __ptext0:
  2012                           	opt stack 0
  2013  004AB6                     _main:
  2014                           	opt stack 13
  2015                           
  2016                           ;main.c: 216: init_hardware();
  2017                           
  2018                           ;incstack = 0
  2019  004AB6  EC22  F026         	call	_init_hardware	;wreg free
  2020                           
  2021                           ;main.c: 217: T0CONbits.TMR0ON = 0;
  2022  004ABA  9ED5               	bcf	4053,7,c	;volatile
  2023                           
  2024                           ;main.c: 218: init_lcd();
  2025  004ABC  EC63  F01F         	call	_init_lcd	;wreg free
  2026                           
  2027                           ;main.c: 219: mensagem_inicial();
  2028  004AC0  ECCA  F020         	call	_mensagem_inicial	;wreg free
  2029                           
  2030                           ;main.c: 220: inicializa_tarefas();
  2031  004AC4  EC86  F023         	call	_inicializa_tarefas	;wreg free
  2032                           
  2033                           ;main.c: 221: inicializa_uart();
  2034  004AC8  ECC7  F025         	call	_inicializa_uart	;wreg free
  2035                           
  2036                           ;main.c: 222: T0CONbits.TMR0ON = 1;
  2037  004ACC  8ED5               	bsf	4053,7,c	;volatile
  2038  004ACE                     
  2039                           ;main.c: 224: {
  2040                           ;main.c: 226: if ((sinaliza_int_timer == 1) && (3))
  2041  004ACE  0100               	movlb	0	; () banked
  2042  004AD0  05FF               	decf	_sinaliza_int_timer& (0+255),w,b
  2043  004AD2  A4D8               	btfss	status,2,c
  2044  004AD4  D004               	goto	l109
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;main.c: 227: {
  2048                           ;main.c: 228: sinaliza_int_timer = 0;
  2049  004AD6  0E00               	movlw	0
  2050  004AD8  6FFF               	movwf	_sinaliza_int_timer& (0+255),b
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;main.c: 229: escalonador();
  2054  004ADA  EC6D  F01E         	call	_escalonador	;wreg free
  2055  004ADE                     l109:
  2056                           
  2057                           ;main.c: 230: }
  2058                           ;main.c: 231: dados_gps_to_sd();
  2059  004ADE  ECAE  F024         	call	_dados_gps_to_sd	;wreg free
  2060  004AE2  D7F5               	goto	l108
  2061  004AE4                     __end_of_main:
  2062                           	opt stack 0
  2063                           tblptru	equ	0xFF8
  2064                           tblptrh	equ	0xFF7
  2065                           tblptrl	equ	0xFF6
  2066                           tablat	equ	0xFF5
  2067                           postinc0	equ	0xFEE
  2068                           wreg	equ	0xFE8
  2069                           postdec1	equ	0xFE5
  2070                           fsr1h	equ	0xFE2
  2071                           fsr1l	equ	0xFE1
  2072                           status	equ	0xFD8
  2073                           
  2074 ;; *************** function _mensagem_inicial *****************
  2075 ;; Defined at:
  2076 ;;		line 241 in file "main.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;		None
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  msg_dois       17   24[BANK0 ] const unsigned char [17]
  2081 ;;  msg_linha_um   17    7[BANK0 ] const unsigned char [17]
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2091 ;;      Params:         0       0       0       0       0       0       0       0       0
  2092 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2093 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2094 ;;      Totals:         0      36       0       0       0       0       0       0       0
  2095 ;;Total ram usage:       36 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    6
  2098 ;; This function calls:
  2099 ;;		_escreve_cmd_lcd
  2100 ;;		_escreve_frase_ram_lcd
  2101 ;;		_posicao_cursor_lcd
  2102 ;; This function is called by:
  2103 ;;		_main
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text1
  2108  004194                     __ptext1:
  2109                           	opt stack 0
  2110  004194                     _mensagem_inicial:
  2111                           	opt stack 24
  2112                           
  2113                           ;main.c: 243: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  2114                           
  2115                           ;incstack = 0
  2116  004194  0E70               	movlw	low mensagem_inicial@F4347
  2117  004196  6EF6               	movwf	tblptrl,c
  2118  004198                     	if	1	;There is more than 1 active tblptr byte
  2119  004198  0E61               	movlw	high mensagem_inicial@F4347
  2120  00419A  6EF7               	movwf	tblptrh,c
  2121  00419C                     	endif
  2122  00419C                     	if	0	;There are less than 3 active tblptr bytes
  2123  00419C                     	endif
  2124  00419C  EE20  F067         	lfsr	2,mensagem_inicial@msg_linha_um
  2125  0041A0  0E10               	movlw	16
  2126  0041A2                     u14380:
  2127  0041A2  0009               	tblrd		*+
  2128  0041A4  CFF5 FFDE          	movff	tablat,postinc2
  2129  0041A8  06E8               	decf	wreg,f,c
  2130  0041AA  E2FB               	bc	u14380
  2131                           
  2132                           ;main.c: 244: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  2133  0041AC  0E5F               	movlw	low mensagem_inicial@F4349
  2134  0041AE  6EF6               	movwf	tblptrl,c
  2135  0041B0                     	if	1	;There is more than 1 active tblptr byte
  2136  0041B0  0E61               	movlw	high mensagem_inicial@F4349
  2137  0041B2  6EF7               	movwf	tblptrh,c
  2138  0041B4                     	endif
  2139  0041B4                     	if	0	;There are less than 3 active tblptr bytes
  2140  0041B4                     	endif
  2141  0041B4  EE20  F078         	lfsr	2,mensagem_inicial@msg_dois
  2142  0041B8  0E10               	movlw	16
  2143  0041BA                     u14390:
  2144  0041BA  0009               	tblrd		*+
  2145  0041BC  CFF5 FFDE          	movff	tablat,postinc2
  2146  0041C0  06E8               	decf	wreg,f,c
  2147  0041C2  E2FB               	bc	u14390
  2148                           
  2149                           ;main.c: 246: posicao_cursor_lcd(1,0);
  2150  0041C4  0E00               	movlw	0
  2151  0041C6  0100               	movlb	0	; () banked
  2152  0041C8  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2153  0041CA  0E01               	movlw	1
  2154  0041CC  EC91  F021         	call	_posicao_cursor_lcd
  2155                           
  2156                           ;main.c: 247: escreve_frase_ram_lcd(msg_linha_um);
  2157  0041D0  0E67               	movlw	low mensagem_inicial@msg_linha_um
  2158  0041D2  0100               	movlb	0	; () banked
  2159  0041D4  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2160  0041D6  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2161  0041D8  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2162  0041DA  EC5C  F023         	call	_escreve_frase_ram_lcd	;wreg free
  2163                           
  2164                           ;main.c: 249: posicao_cursor_lcd(2,0);
  2165  0041DE  0E00               	movlw	0
  2166  0041E0  0100               	movlb	0	; () banked
  2167  0041E2  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2168  0041E4  0E02               	movlw	2
  2169  0041E6  EC91  F021         	call	_posicao_cursor_lcd
  2170                           
  2171                           ;main.c: 250: escreve_frase_ram_lcd(msg_dois);
  2172  0041EA  0E78               	movlw	low mensagem_inicial@msg_dois
  2173  0041EC  0100               	movlb	0	; () banked
  2174  0041EE  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2175  0041F0  0E00               	movlw	high mensagem_inicial@msg_dois
  2176  0041F2  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2177  0041F4  EC5C  F023         	call	_escreve_frase_ram_lcd	;wreg free
  2178                           
  2179                           ;main.c: 251: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2180  0041F8  0E3D               	movlw	61
  2181  0041FA  0100               	movlb	0	; () banked
  2182  0041FC  6F66               	movwf	(??_mensagem_inicial+1)& (0+255),b
  2183  0041FE  0EE1               	movlw	225
  2184  004200  6F65               	movwf	??_mensagem_inicial& (0+255),b
  2185  004202  0E3F               	movlw	63
  2186  004204                     u14997:
  2187  004204  2EE8               	decfsz	wreg,f,c
  2188  004206  D7FE               	bra	u14997
  2189  004208  2F65               	decfsz	??_mensagem_inicial& (0+255),f,b
  2190  00420A  D7FC               	bra	u14997
  2191  00420C  2F66               	decfsz	(??_mensagem_inicial+1)& (0+255),f,b
  2192  00420E  D7FA               	bra	u14997
  2193  004210  D000               	nop2	
  2194                           
  2195                           ;main.c: 252: escreve_cmd_lcd(0b00000001);
  2196  004212  0E01               	movlw	1
  2197  004214  ECFA  F01F         	call	_escreve_cmd_lcd
  2198  004218  0012               	return		;funcret
  2199  00421A                     __end_of_mensagem_inicial:
  2200                           	opt stack 0
  2201                           tblptru	equ	0xFF8
  2202                           tblptrh	equ	0xFF7
  2203                           tblptrl	equ	0xFF6
  2204                           tablat	equ	0xFF5
  2205                           postinc0	equ	0xFEE
  2206                           wreg	equ	0xFE8
  2207                           postdec1	equ	0xFE5
  2208                           fsr1h	equ	0xFE2
  2209                           fsr1l	equ	0xFE1
  2210                           postinc2	equ	0xFDE
  2211                           status	equ	0xFD8
  2212                           
  2213 ;; *************** function _init_lcd *****************
  2214 ;; Defined at:
  2215 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;		None
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;		None
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  1    wreg      void 
  2222 ;; Registers used:
  2223 ;;		wreg, status,2, status,0, cstack
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2229 ;;      Params:         0       0       0       0       0       0       0       0       0
  2230 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2231 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2232 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2233 ;;Total ram usage:        1 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; Hardware stack levels required when called:    5
  2236 ;; This function calls:
  2237 ;;		_delay
  2238 ;;		_escreve_cmd_lcd
  2239 ;; This function is called by:
  2240 ;;		_main
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text2
  2245  003EC6                     __ptext2:
  2246                           	opt stack 0
  2247  003EC6                     _init_lcd:
  2248                           	opt stack 25
  2249                           
  2250                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2251                           
  2252                           ;incstack = 0
  2253  003EC6  9495               	bcf	3989,2,c	;volatile
  2254                           
  2255                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2256  003EC8  9295               	bcf	3989,1,c	;volatile
  2257                           
  2258                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2259  003ECA  9095               	bcf	3989,0,c	;volatile
  2260                           
  2261                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2262  003ECC  9895               	bcf	3989,4,c	;volatile
  2263                           
  2264                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2265  003ECE  9A95               	bcf	3989,5,c	;volatile
  2266                           
  2267                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2268  003ED0  9C95               	bcf	3989,6,c	;volatile
  2269                           
  2270                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2271  003ED2  9E95               	bcf	3989,7,c	;volatile
  2272                           
  2273                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2274  003ED4  9483               	bcf	3971,2,c	;volatile
  2275                           
  2276                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2277  003ED6  9283               	bcf	3971,1,c	;volatile
  2278                           
  2279                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2280  003ED8  9083               	bcf	3971,0,c	;volatile
  2281                           
  2282                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2283  003EDA  9E83               	bcf	3971,7,c	;volatile
  2284                           
  2285                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2286  003EDC  9C83               	bcf	3971,6,c	;volatile
  2287                           
  2288                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2289  003EDE  8A83               	bsf	3971,5,c	;volatile
  2290                           
  2291                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2292  003EE0  8883               	bsf	3971,4,c	;volatile
  2293                           
  2294                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2295  003EE2  0EEA               	movlw	234
  2296  003EE4  0100               	movlb	0	; () banked
  2297  003EE6  6F62               	movwf	??_init_lcd& (0+255),b
  2298  003EE8  0EC3               	movlw	195
  2299  003EEA                     u15007:
  2300  003EEA  2EE8               	decfsz	wreg,f,c
  2301  003EEC  D7FE               	bra	u15007
  2302  003EEE  2F62               	decfsz	??_init_lcd& (0+255),f,b
  2303  003EF0  D7FC               	bra	u15007
  2304                           
  2305                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2306  003EF2  8083               	bsf	3971,0,c	;volatile
  2307                           
  2308                           ;display_lcd.c: 108: delay();
  2309  003EF4  EC9E  F025         	call	_delay	;wreg free
  2310                           
  2311                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2312  003EF8  9083               	bcf	3971,0,c	;volatile
  2313                           
  2314                           ;display_lcd.c: 110: delay();
  2315  003EFA  EC9E  F025         	call	_delay	;wreg free
  2316                           
  2317                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2318  003EFE  0E4E               	movlw	78
  2319  003F00  0100               	movlb	0	; () banked
  2320  003F02  6F62               	movwf	??_init_lcd& (0+255),b
  2321  003F04  0EEB               	movlw	235
  2322  003F06                     u15017:
  2323  003F06  2EE8               	decfsz	wreg,f,c
  2324  003F08  D7FE               	bra	u15017
  2325  003F0A  2F62               	decfsz	??_init_lcd& (0+255),f,b
  2326  003F0C  D7FC               	bra	u15017
  2327                           
  2328                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2329  003F0E  8083               	bsf	3971,0,c	;volatile
  2330                           
  2331                           ;display_lcd.c: 119: delay();
  2332  003F10  EC9E  F025         	call	_delay	;wreg free
  2333                           
  2334                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2335  003F14  9083               	bcf	3971,0,c	;volatile
  2336                           
  2337                           ;display_lcd.c: 121: delay();
  2338  003F16  EC9E  F025         	call	_delay	;wreg free
  2339                           
  2340                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2341  003F1A  0E4E               	movlw	78
  2342  003F1C  0100               	movlb	0	; () banked
  2343  003F1E  6F62               	movwf	??_init_lcd& (0+255),b
  2344  003F20  0EEB               	movlw	235
  2345  003F22                     u15027:
  2346  003F22  2EE8               	decfsz	wreg,f,c
  2347  003F24  D7FE               	bra	u15027
  2348  003F26  2F62               	decfsz	??_init_lcd& (0+255),f,b
  2349  003F28  D7FC               	bra	u15027
  2350                           
  2351                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2352  003F2A  8083               	bsf	3971,0,c	;volatile
  2353                           
  2354                           ;display_lcd.c: 130: delay();
  2355  003F2C  EC9E  F025         	call	_delay	;wreg free
  2356                           
  2357                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2358  003F30  9083               	bcf	3971,0,c	;volatile
  2359                           
  2360                           ;display_lcd.c: 132: delay();
  2361  003F32  EC9E  F025         	call	_delay	;wreg free
  2362                           
  2363                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2364  003F36  9E83               	bcf	3971,7,c	;volatile
  2365                           
  2366                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2367  003F38  9C83               	bcf	3971,6,c	;volatile
  2368                           
  2369                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2370  003F3A  8A83               	bsf	3971,5,c	;volatile
  2371                           
  2372                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2373  003F3C  9883               	bcf	3971,4,c	;volatile
  2374                           
  2375                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2376  003F3E  8083               	bsf	3971,0,c	;volatile
  2377                           
  2378                           ;display_lcd.c: 143: delay();
  2379  003F40  EC9E  F025         	call	_delay	;wreg free
  2380                           
  2381                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2382  003F44  9083               	bcf	3971,0,c	;volatile
  2383                           
  2384                           ;display_lcd.c: 145: delay();
  2385  003F46  EC9E  F025         	call	_delay	;wreg free
  2386                           
  2387                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2388  003F4A  0E28               	movlw	40
  2389  003F4C  ECFA  F01F         	call	_escreve_cmd_lcd
  2390                           
  2391                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2392  003F50  0E06               	movlw	6
  2393  003F52  ECFA  F01F         	call	_escreve_cmd_lcd
  2394                           
  2395                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2396  003F56  0E0E               	movlw	14
  2397  003F58  ECFA  F01F         	call	_escreve_cmd_lcd
  2398                           
  2399                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2400  003F5C  0E01               	movlw	1
  2401  003F5E  ECFA  F01F         	call	_escreve_cmd_lcd
  2402  003F62  0012               	return		;funcret
  2403  003F64                     __end_of_init_lcd:
  2404                           	opt stack 0
  2405                           tblptru	equ	0xFF8
  2406                           tblptrh	equ	0xFF7
  2407                           tblptrl	equ	0xFF6
  2408                           tablat	equ	0xFF5
  2409                           postinc0	equ	0xFEE
  2410                           wreg	equ	0xFE8
  2411                           postdec1	equ	0xFE5
  2412                           fsr1h	equ	0xFE2
  2413                           fsr1l	equ	0xFE1
  2414                           postinc2	equ	0xFDE
  2415                           status	equ	0xFD8
  2416                           
  2417 ;; *************** function _escreve_cmd_lcd *****************
  2418 ;; Defined at:
  2419 ;;		line 162 in file "bibliotecas/display_lcd.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;  comando         1    wreg     unsigned char 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  comando         1   32[COMRAM] unsigned char 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg, status,2, status,0, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2433 ;;      Params:         0       0       0       0       0       0       0       0       0
  2434 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2435 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2436 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2437 ;;Total ram usage:        1 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; Hardware stack levels required when called:    4
  2440 ;; This function calls:
  2441 ;;		_delay
  2442 ;; This function is called by:
  2443 ;;		_mensagem_inicial
  2444 ;;		_init_lcd
  2445 ;;		_cria_caractere_lcd
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           	psect	text3
  2450  003FF4                     __ptext3:
  2451                           	opt stack 0
  2452  003FF4                     _escreve_cmd_lcd:
  2453                           	opt stack 25
  2454                           
  2455                           ;incstack = 0
  2456                           ;escreve_cmd_lcd@comando stored from wreg
  2457  003FF4  6E21               	movwf	escreve_cmd_lcd@comando,c
  2458                           
  2459                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  2460  003FF6  9483               	bcf	3971,2,c	;volatile
  2461                           
  2462                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  2463  003FF8  9283               	bcf	3971,1,c	;volatile
  2464                           
  2465                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  2466  003FFA  9083               	bcf	3971,0,c	;volatile
  2467                           
  2468                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  2469  003FFC  A821               	btfss	escreve_cmd_lcd@comando,4,c
  2470  003FFE  D002               	goto	l590
  2471  004000  8883               	bsf	3971,4,c	;volatile
  2472  004002  D001               	goto	l591
  2473  004004                     l590:
  2474                           
  2475                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  2476  004004  9883               	bcf	3971,4,c	;volatile
  2477  004006                     l591:
  2478                           
  2479                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  2480  004006  AA21               	btfss	escreve_cmd_lcd@comando,5,c
  2481  004008  D002               	goto	l592
  2482  00400A  8A83               	bsf	3971,5,c	;volatile
  2483  00400C  D001               	goto	l593
  2484  00400E                     l592:
  2485                           
  2486                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  2487  00400E  9A83               	bcf	3971,5,c	;volatile
  2488  004010                     l593:
  2489                           
  2490                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  2491  004010  AC21               	btfss	escreve_cmd_lcd@comando,6,c
  2492  004012  D002               	goto	l594
  2493  004014  8C83               	bsf	3971,6,c	;volatile
  2494  004016  D001               	goto	l595
  2495  004018                     l594:
  2496                           
  2497                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  2498  004018  9C83               	bcf	3971,6,c	;volatile
  2499  00401A                     l595:
  2500                           
  2501                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  2502  00401A  AE21               	btfss	escreve_cmd_lcd@comando,7,c
  2503  00401C  D002               	goto	l596
  2504  00401E  8E83               	bsf	3971,7,c	;volatile
  2505  004020  D001               	goto	l597
  2506  004022                     l596:
  2507                           
  2508                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  2509  004022  9E83               	bcf	3971,7,c	;volatile
  2510  004024                     l597:
  2511                           
  2512                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  2513  004024  8083               	bsf	3971,0,c	;volatile
  2514                           
  2515                           ;display_lcd.c: 181: delay();
  2516  004026  EC9E  F025         	call	_delay	;wreg free
  2517                           
  2518                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  2519  00402A  9083               	bcf	3971,0,c	;volatile
  2520                           
  2521                           ;display_lcd.c: 183: delay();
  2522  00402C  EC9E  F025         	call	_delay	;wreg free
  2523                           
  2524                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  2525  004030  A021               	btfss	escreve_cmd_lcd@comando,0,c
  2526  004032  D002               	goto	l598
  2527  004034  8883               	bsf	3971,4,c	;volatile
  2528  004036  D001               	goto	l599
  2529  004038                     l598:
  2530                           
  2531                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  2532  004038  9883               	bcf	3971,4,c	;volatile
  2533  00403A                     l599:
  2534                           
  2535                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  2536  00403A  A221               	btfss	escreve_cmd_lcd@comando,1,c
  2537  00403C  D002               	goto	l600
  2538  00403E  8A83               	bsf	3971,5,c	;volatile
  2539  004040  D001               	goto	l601
  2540  004042                     l600:
  2541                           
  2542                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  2543  004042  9A83               	bcf	3971,5,c	;volatile
  2544  004044                     l601:
  2545                           
  2546                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  2547  004044  A421               	btfss	escreve_cmd_lcd@comando,2,c
  2548  004046  D002               	goto	l602
  2549  004048  8C83               	bsf	3971,6,c	;volatile
  2550  00404A  D001               	goto	l603
  2551  00404C                     l602:
  2552                           
  2553                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  2554  00404C  9C83               	bcf	3971,6,c	;volatile
  2555  00404E                     l603:
  2556                           
  2557                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  2558  00404E  A621               	btfss	escreve_cmd_lcd@comando,3,c
  2559  004050  D002               	goto	l604
  2560  004052  8E83               	bsf	3971,7,c	;volatile
  2561  004054  D001               	goto	l605
  2562  004056                     l604:
  2563                           
  2564                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  2565  004056  9E83               	bcf	3971,7,c	;volatile
  2566  004058                     l605:
  2567                           
  2568                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  2569  004058  8083               	bsf	3971,0,c	;volatile
  2570                           
  2571                           ;display_lcd.c: 197: delay();
  2572  00405A  EC9E  F025         	call	_delay	;wreg free
  2573                           
  2574                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  2575  00405E  9083               	bcf	3971,0,c	;volatile
  2576                           
  2577                           ;display_lcd.c: 199: delay();
  2578  004060  EC9E  F025         	call	_delay	;wreg free
  2579                           
  2580                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  2581  004064  0421               	decf	escreve_cmd_lcd@comando,w,c
  2582  004066  B4D8               	btfsc	status,2,c
  2583  004068  D008               	goto	u14040
  2584  00406A  0E02               	movlw	2
  2585  00406C  1821               	xorwf	escreve_cmd_lcd@comando,w,c
  2586  00406E  B4D8               	btfsc	status,2,c
  2587  004070  D004               	goto	u14040
  2588  004072  0E03               	movlw	3
  2589  004074  1821               	xorwf	escreve_cmd_lcd@comando,w,c
  2590  004076  A4D8               	btfss	status,2,c
  2591  004078  0012               	return	
  2592  00407A                     u14040:
  2593                           
  2594                           ;display_lcd.c: 205: { delay(); }
  2595  00407A  EC9E  F025         	call	_delay	;wreg free
  2596  00407E  0012               	return	
  2597  004080                     __end_of_escreve_cmd_lcd:
  2598                           	opt stack 0
  2599                           tblptru	equ	0xFF8
  2600                           tblptrh	equ	0xFF7
  2601                           tblptrl	equ	0xFF6
  2602                           tablat	equ	0xFF5
  2603                           postinc0	equ	0xFEE
  2604                           wreg	equ	0xFE8
  2605                           postdec1	equ	0xFE5
  2606                           fsr1h	equ	0xFE2
  2607                           fsr1l	equ	0xFE1
  2608                           postinc2	equ	0xFDE
  2609                           status	equ	0xFD8
  2610                           
  2611 ;; *************** function _init_hardware *****************
  2612 ;; Defined at:
  2613 ;;		line 55 in file "bibliotecas/hardware.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;		None
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;		None
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  1    wreg      void 
  2620 ;; Registers used:
  2621 ;;		wreg, status,2, cstack
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2627 ;;      Params:         0       0       0       0       0       0       0       0       0
  2628 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2629 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2630 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2631 ;;Total ram usage:        0 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; Hardware stack levels required when called:    5
  2634 ;; This function calls:
  2635 ;;		_config_timer_dois
  2636 ;;		_config_timer_zero
  2637 ;;		_init_interrupt
  2638 ;;		_init_oscilador
  2639 ;;		_init_ports
  2640 ;; This function is called by:
  2641 ;;		_main
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text4
  2646  004C44                     __ptext4:
  2647                           	opt stack 0
  2648  004C44                     _init_hardware:
  2649                           	opt stack 25
  2650                           
  2651                           ;hardware.c: 58: init_oscilador();
  2652                           
  2653                           ;incstack = 0
  2654  004C44  EC98  F026         	call	_init_oscilador	;wreg free
  2655                           
  2656                           ;hardware.c: 61: init_ports();
  2657  004C48  ECFA  F025         	call	_init_ports	;wreg free
  2658                           
  2659                           ;hardware.c: 64: config_timer_zero();
  2660  004C4C  EC08  F026         	call	_config_timer_zero	;wreg free
  2661                           
  2662                           ;hardware.c: 67: config_timer_dois();
  2663  004C50  EC66  F026         	call	_config_timer_dois	;wreg free
  2664                           
  2665                           ;hardware.c: 70: init_interrupt();
  2666  004C54  EC42  F026         	call	_init_interrupt	;wreg free
  2667  004C58  0012               	return		;funcret
  2668  004C5A                     __end_of_init_hardware:
  2669                           	opt stack 0
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           postinc0	equ	0xFEE
  2675                           wreg	equ	0xFE8
  2676                           postdec1	equ	0xFE5
  2677                           fsr1h	equ	0xFE2
  2678                           fsr1l	equ	0xFE1
  2679                           postinc2	equ	0xFDE
  2680                           status	equ	0xFD8
  2681                           
  2682 ;; *************** function _init_ports *****************
  2683 ;; Defined at:
  2684 ;;		line 154 in file "bibliotecas/hardware.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;		None
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;		None
  2689 ;; Return value:  Size  Location     Type
  2690 ;;                  1    wreg      void 
  2691 ;; Registers used:
  2692 ;;		wreg, status,2
  2693 ;; Tracked objects:
  2694 ;;		On entry : 0/0
  2695 ;;		On exit  : 0/0
  2696 ;;		Unchanged: 0/0
  2697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2698 ;;      Params:         0       0       0       0       0       0       0       0       0
  2699 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2700 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2701 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2702 ;;Total ram usage:        0 bytes
  2703 ;; Hardware stack levels used:    1
  2704 ;; Hardware stack levels required when called:    3
  2705 ;; This function calls:
  2706 ;;		Nothing
  2707 ;; This function is called by:
  2708 ;;		_init_hardware
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           	psect	text5
  2713  004BF4                     __ptext5:
  2714                           	opt stack 0
  2715  004BF4                     _init_ports:
  2716                           	opt stack 26
  2717                           
  2718                           ;hardware.c: 156: ADCON1 = 0X0F;
  2719                           
  2720                           ;incstack = 0
  2721  004BF4  0E0F               	movlw	15
  2722  004BF6  6EC1               	movwf	4033,c	;volatile
  2723                           
  2724                           ;hardware.c: 157: TRISB = 0b00100001;
  2725  004BF8  0E21               	movlw	33
  2726  004BFA  6E93               	movwf	3987,c	;volatile
  2727                           
  2728                           ;hardware.c: 158: LATB = 0xFF;
  2729  004BFC  688A               	setf	3978,c	;volatile
  2730                           
  2731                           ;hardware.c: 159: TRISD = 0x00;
  2732  004BFE  0E00               	movlw	0
  2733  004C00  6E95               	movwf	3989,c	;volatile
  2734                           
  2735                           ;hardware.c: 160: TRISA = 0b00000111;
  2736  004C02  0E07               	movlw	7
  2737  004C04  6E92               	movwf	3986,c	;volatile
  2738                           
  2739                           ;hardware.c: 161: TRISC = 0x01111111;
  2740  004C06  0E11               	movlw	17
  2741  004C08  6E94               	movwf	3988,c	;volatile
  2742                           
  2743                           ;hardware.c: 162: TRISE = 0b00000011;
  2744  004C0A  0E03               	movlw	3
  2745  004C0C  6E96               	movwf	3990,c	;volatile
  2746  004C0E  0012               	return		;funcret
  2747  004C10                     __end_of_init_ports:
  2748                           	opt stack 0
  2749                           tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           postinc0	equ	0xFEE
  2754                           wreg	equ	0xFE8
  2755                           postdec1	equ	0xFE5
  2756                           fsr1h	equ	0xFE2
  2757                           fsr1l	equ	0xFE1
  2758                           postinc2	equ	0xFDE
  2759                           status	equ	0xFD8
  2760                           
  2761 ;; *************** function _init_oscilador *****************
  2762 ;; Defined at:
  2763 ;;		line 172 in file "bibliotecas/hardware.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;		None
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		None
  2772 ;; Tracked objects:
  2773 ;;		On entry : 0/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2777 ;;      Params:         0       0       0       0       0       0       0       0       0
  2778 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2779 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2780 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2781 ;;Total ram usage:        0 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    3
  2784 ;; This function calls:
  2785 ;;		Nothing
  2786 ;; This function is called by:
  2787 ;;		_init_hardware
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text6
  2792  004D30                     __ptext6:
  2793                           	opt stack 0
  2794  004D30                     _init_oscilador:
  2795                           	opt stack 26
  2796                           
  2797                           ;hardware.c: 175: OSCCONbits.IRCF0 = 1;
  2798                           
  2799                           ;incstack = 0
  2800  004D30  88D3               	bsf	4051,4,c	;volatile
  2801                           
  2802                           ;hardware.c: 176: OSCCONbits.IRCF1 = 1;
  2803  004D32  8AD3               	bsf	4051,5,c	;volatile
  2804                           
  2805                           ;hardware.c: 177: OSCCONbits.IRCF2 = 1;
  2806  004D34  8CD3               	bsf	4051,6,c	;volatile
  2807  004D36  0012               	return		;funcret
  2808  004D38                     __end_of_init_oscilador:
  2809                           	opt stack 0
  2810                           tblptru	equ	0xFF8
  2811                           tblptrh	equ	0xFF7
  2812                           tblptrl	equ	0xFF6
  2813                           tablat	equ	0xFF5
  2814                           postinc0	equ	0xFEE
  2815                           wreg	equ	0xFE8
  2816                           postdec1	equ	0xFE5
  2817                           fsr1h	equ	0xFE2
  2818                           fsr1l	equ	0xFE1
  2819                           postinc2	equ	0xFDE
  2820                           status	equ	0xFD8
  2821                           
  2822 ;; *************** function _init_interrupt *****************
  2823 ;; Defined at:
  2824 ;;		line 98 in file "bibliotecas/hardware.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;		None
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;		None
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      void 
  2831 ;; Registers used:
  2832 ;;		wreg, status,2
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2838 ;;      Params:         0       0       0       0       0       0       0       0       0
  2839 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2840 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2841 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2842 ;;Total ram usage:        0 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    3
  2845 ;; This function calls:
  2846 ;;		Nothing
  2847 ;; This function is called by:
  2848 ;;		_init_hardware
  2849 ;; This function uses a non-reentrant model
  2850 ;;
  2851                           
  2852                           	psect	text7
  2853  004C84                     __ptext7:
  2854                           	opt stack 0
  2855  004C84                     _init_interrupt:
  2856                           	opt stack 26
  2857                           
  2858                           ;hardware.c: 100: INTCON = 0b10110000;
  2859                           
  2860                           ;incstack = 0
  2861  004C84  0EB0               	movlw	176
  2862  004C86  6EF2               	movwf	intcon,c	;volatile
  2863                           
  2864                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2865  004C88  0E00               	movlw	0
  2866  004C8A  6EF1               	movwf	intcon2,c	;volatile
  2867                           
  2868                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2869  004C8C  0E00               	movlw	0
  2870  004C8E  6EF0               	movwf	intcon3,c	;volatile
  2871                           
  2872                           ;hardware.c: 104: PIE1 = 0b00101000;
  2873  004C90  0E28               	movlw	40
  2874  004C92  6E9D               	movwf	3997,c	;volatile
  2875  004C94  0012               	return		;funcret
  2876  004C96                     __end_of_init_interrupt:
  2877                           	opt stack 0
  2878                           tblptru	equ	0xFF8
  2879                           tblptrh	equ	0xFF7
  2880                           tblptrl	equ	0xFF6
  2881                           tablat	equ	0xFF5
  2882                           intcon	equ	0xFF2
  2883                           intcon2	equ	0xFF1
  2884                           intcon3	equ	0xFF0
  2885                           postinc0	equ	0xFEE
  2886                           wreg	equ	0xFE8
  2887                           postdec1	equ	0xFE5
  2888                           fsr1h	equ	0xFE2
  2889                           fsr1l	equ	0xFE1
  2890                           postinc2	equ	0xFDE
  2891                           status	equ	0xFD8
  2892                           
  2893 ;; *************** function _config_timer_zero *****************
  2894 ;; Defined at:
  2895 ;;		line 83 in file "bibliotecas/hardware.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;		None
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;		None
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, status,2, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2909 ;;      Params:         0       0       0       0       0       0       0       0       0
  2910 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2912 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2913 ;;Total ram usage:        0 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    4
  2916 ;; This function calls:
  2917 ;;		_write_timer_zero
  2918 ;; This function is called by:
  2919 ;;		_init_hardware
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           	psect	text8
  2924  004C10                     __ptext8:
  2925                           	opt stack 0
  2926  004C10                     _config_timer_zero:
  2927                           	opt stack 25
  2928                           
  2929                           ;hardware.c: 85: T0CON = 0b11000011;
  2930                           
  2931                           ;incstack = 0
  2932  004C10  0EC3               	movlw	195
  2933  004C12  6ED5               	movwf	4053,c	;volatile
  2934                           
  2935                           ;hardware.c: 86: SPPCON = 0b00000000;
  2936  004C14  0E00               	movlw	0
  2937  004C16  6E65               	movwf	3941,c	;volatile
  2938                           
  2939                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2940  004C18  0E00               	movlw	0
  2941  004C1A  6E63               	movwf	3939,c	;volatile
  2942                           
  2943                           ;hardware.c: 88: write_timer_zero(0x0083);
  2944  004C1C  0E00               	movlw	0
  2945  004C1E  0100               	movlb	0	; () banked
  2946  004C20  6F61               	movwf	(write_timer_zero@timer0+1)& (0+255),b
  2947  004C22  0E83               	movlw	131
  2948  004C24  6F60               	movwf	write_timer_zero@timer0& (0+255),b
  2949  004C26  EC4B  F026         	call	_write_timer_zero	;wreg free
  2950  004C2A  0012               	return		;funcret
  2951  004C2C                     __end_of_config_timer_zero:
  2952                           	opt stack 0
  2953                           tblptru	equ	0xFF8
  2954                           tblptrh	equ	0xFF7
  2955                           tblptrl	equ	0xFF6
  2956                           tablat	equ	0xFF5
  2957                           intcon	equ	0xFF2
  2958                           intcon2	equ	0xFF1
  2959                           intcon3	equ	0xFF0
  2960                           postinc0	equ	0xFEE
  2961                           wreg	equ	0xFE8
  2962                           postdec1	equ	0xFE5
  2963                           fsr1h	equ	0xFE2
  2964                           fsr1l	equ	0xFE1
  2965                           postinc2	equ	0xFDE
  2966                           status	equ	0xFD8
  2967                           
  2968 ;; *************** function _write_timer_zero *****************
  2969 ;; Defined at:
  2970 ;;		line 138 in file "bibliotecas/hardware.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;  timer0          2    0[BANK0 ] unsigned int 
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;  timer           2    2[BANK0 ] struct Timers
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      void 
  2977 ;; Registers used:
  2978 ;;		None
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2984 ;;      Params:         0       2       0       0       0       0       0       0       0
  2985 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2986 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2987 ;;      Totals:         0       4       0       0       0       0       0       0       0
  2988 ;;Total ram usage:        4 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    3
  2991 ;; This function calls:
  2992 ;;		Nothing
  2993 ;; This function is called by:
  2994 ;;		_config_timer_zero
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text9
  2999  004C96                     __ptext9:
  3000                           	opt stack 0
  3001  004C96                     _write_timer_zero:
  3002                           	opt stack 25
  3003                           
  3004                           ;hardware.c: 140: union Timers timer;
  3005                           ;hardware.c: 142: timer.lt = timer0;
  3006                           
  3007                           ;incstack = 0
  3008  004C96  C060  F062         	movff	write_timer_zero@timer0,write_timer_zero@timer
  3009  004C9A  C061  F063         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  3010                           
  3011                           ;hardware.c: 144: TMR0H = timer.bt[1];
  3012  004C9E  C063  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  3013                           
  3014                           ;hardware.c: 145: TMR0L = timer.bt[0];
  3015  004CA2  C062  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  3016  004CA6  0012               	return		;funcret
  3017  004CA8                     __end_of_write_timer_zero:
  3018                           	opt stack 0
  3019                           tblptru	equ	0xFF8
  3020                           tblptrh	equ	0xFF7
  3021                           tblptrl	equ	0xFF6
  3022                           tablat	equ	0xFF5
  3023                           intcon	equ	0xFF2
  3024                           intcon2	equ	0xFF1
  3025                           intcon3	equ	0xFF0
  3026                           postinc0	equ	0xFEE
  3027                           wreg	equ	0xFE8
  3028                           postdec1	equ	0xFE5
  3029                           fsr1h	equ	0xFE2
  3030                           fsr1l	equ	0xFE1
  3031                           postinc2	equ	0xFDE
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _config_timer_dois *****************
  3035 ;; Defined at:
  3036 ;;		line 201 in file "bibliotecas/hardware.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;		None
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, status,2
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3050 ;;      Params:         0       0       0       0       0       0       0       0       0
  3051 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3053 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3054 ;;Total ram usage:        0 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    3
  3057 ;; This function calls:
  3058 ;;		Nothing
  3059 ;; This function is called by:
  3060 ;;		_init_hardware
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text10
  3065  004CCC                     __ptext10:
  3066                           	opt stack 0
  3067  004CCC                     _config_timer_dois:
  3068                           	opt stack 26
  3069                           
  3070                           ;hardware.c: 203: T2CON = 0b00000100;
  3071                           
  3072                           ;incstack = 0
  3073  004CCC  0E04               	movlw	4
  3074  004CCE  6ECA               	movwf	4042,c	;volatile
  3075                           
  3076                           ;hardware.c: 204: TMR2 = 0;
  3077  004CD0  0E00               	movlw	0
  3078  004CD2  6ECC               	movwf	4044,c	;volatile
  3079                           
  3080                           ;hardware.c: 205: PR2 = 0x01;
  3081  004CD4  0E01               	movlw	1
  3082  004CD6  6ECB               	movwf	4043,c	;volatile
  3083  004CD8  0012               	return		;funcret
  3084  004CDA                     __end_of_config_timer_dois:
  3085                           	opt stack 0
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           intcon	equ	0xFF2
  3091                           intcon2	equ	0xFF1
  3092                           intcon3	equ	0xFF0
  3093                           postinc0	equ	0xFEE
  3094                           wreg	equ	0xFE8
  3095                           postdec1	equ	0xFE5
  3096                           fsr1h	equ	0xFE2
  3097                           fsr1l	equ	0xFE1
  3098                           postinc2	equ	0xFDE
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _inicializa_tarefas *****************
  3102 ;; Defined at:
  3103 ;;		line 161 in file "main.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;		None
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;		None
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      void 
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3117 ;;      Params:         0       0       0       0       0       0       0       0       0
  3118 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3120 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3121 ;;Total ram usage:        0 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    3
  3124 ;; This function calls:
  3125 ;;		Nothing
  3126 ;; This function is called by:
  3127 ;;		_main
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text11
  3132  00470C                     __ptext11:
  3133                           	opt stack 0
  3134  00470C                     _inicializa_tarefas:
  3135                           	opt stack 27
  3136                           
  3137                           ;main.c: 164: p_tarefas[0] = verifica_dados_operacionais;
  3138                           
  3139                           ;incstack = 0
  3140  00470C  0E38               	movlw	low _verifica_dados_operacionais
  3141  00470E  0100               	movlb	0	; () banked
  3142  004710  6FF1               	movwf	_p_tarefas& (0+255),b
  3143  004712  0E4D               	movlw	high _verifica_dados_operacionais
  3144  004714  6FF2               	movwf	(_p_tarefas+1)& (0+255),b
  3145                           
  3146                           ;main.c: 165: p_tarefas[1] = disparo_gravacao;
  3147  004716  0E5A               	movlw	low _disparo_gravacao
  3148  004718  6FF3               	movwf	(_p_tarefas+2)& (0+255),b
  3149  00471A  0E4C               	movlw	high _disparo_gravacao
  3150  00471C  6FF4               	movwf	(_p_tarefas+3)& (0+255),b
  3151                           
  3152                           ;main.c: 166: p_tarefas[2] = verifica_fence_externo;
  3153  00471E  0E42               	movlw	low _verifica_fence_externo
  3154  004720  6FF5               	movwf	(_p_tarefas+4)& (0+255),b
  3155  004722  0E1A               	movlw	high _verifica_fence_externo
  3156  004724  6FF6               	movwf	(_p_tarefas+5)& (0+255),b
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;main.c: 171: tempo_backup[0] = 5000;
  3160  004726  0E13               	movlw	19
  3161  004728  6FEC               	movwf	(_tempo_backup+1)& (0+255),b
  3162  00472A  0E88               	movlw	136
  3163  00472C  6FEB               	movwf	_tempo_backup& (0+255),b
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;main.c: 172: tempo_backup[1] = 1000;
  3167  00472E  0E03               	movlw	3
  3168  004730  6FEE               	movwf	(_tempo_backup+3)& (0+255),b
  3169  004732  0EE8               	movlw	232
  3170  004734  6FED               	movwf	(_tempo_backup+2)& (0+255),b
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;main.c: 173: tempo_backup[2] = 10000;
  3174  004736  0E27               	movlw	39
  3175  004738  6FF0               	movwf	(_tempo_backup+5)& (0+255),b
  3176  00473A  0E10               	movlw	16
  3177  00473C  6FEF               	movwf	(_tempo_backup+4)& (0+255),b
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;main.c: 177: tempo_tarefa[0] = 5000;
  3181  00473E  0E13               	movlw	19
  3182  004740  6E23               	movwf	_tempo_tarefa+1,c
  3183  004742  0E88               	movlw	136
  3184  004744  6E22               	movwf	_tempo_tarefa,c
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 178: tempo_tarefa[1] = 1000;
  3188  004746  0E03               	movlw	3
  3189  004748  6E25               	movwf	_tempo_tarefa+3,c
  3190  00474A  0EE8               	movlw	232
  3191  00474C  6E24               	movwf	_tempo_tarefa+2,c
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;main.c: 179: tempo_tarefa[2] = 10000;
  3195  00474E  0E27               	movlw	39
  3196  004750  6E27               	movwf	_tempo_tarefa+5,c
  3197  004752  0E10               	movlw	16
  3198  004754  6E26               	movwf	_tempo_tarefa+4,c
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;main.c: 182: tarefa_em_execucao = 0;
  3202  004756  0E00               	movlw	0
  3203  004758  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3204                           
  3205                           ; BSR set to: 0
  3206  00475A  0012               	return		;funcret
  3207  00475C                     __end_of_inicializa_tarefas:
  3208                           	opt stack 0
  3209                           tblptru	equ	0xFF8
  3210                           tblptrh	equ	0xFF7
  3211                           tblptrl	equ	0xFF6
  3212                           tablat	equ	0xFF5
  3213                           intcon	equ	0xFF2
  3214                           intcon2	equ	0xFF1
  3215                           intcon3	equ	0xFF0
  3216                           postinc0	equ	0xFEE
  3217                           wreg	equ	0xFE8
  3218                           postdec1	equ	0xFE5
  3219                           fsr1h	equ	0xFE2
  3220                           fsr1l	equ	0xFE1
  3221                           postinc2	equ	0xFDE
  3222                           status	equ	0xFD8
  3223                           
  3224 ;; *************** function _escalonador *****************
  3225 ;; Defined at:
  3226 ;;		line 193 in file "main.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;		None
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;  cont            1  138[BANK0 ] unsigned char 
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  1    wreg      void 
  3233 ;; Registers used:
  3234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3240 ;;      Params:         0       0       0       0       0       0       0       0       0
  3241 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3242 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3243 ;;      Totals:         0       1       2       0       0       0       0       0       0
  3244 ;;Total ram usage:        3 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; Hardware stack levels required when called:   17
  3247 ;; This function calls:
  3248 ;;		_disparo_gravacao
  3249 ;;		_verifica_dados_operacionais
  3250 ;;		_verifica_fence_externo
  3251 ;; This function is called by:
  3252 ;;		_main
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           	psect	text12
  3257  003CDA                     __ptext12:
  3258                           	opt stack 0
  3259  003CDA                     _escalonador:
  3260                           	opt stack 13
  3261                           
  3262                           ;main.c: 195: unsigned char cont;
  3263                           ;main.c: 196: for(cont = 0; cont<3;cont++)
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;incstack = 0
  3267  003CDA  0E00               	movlw	0
  3268  003CDC  0100               	movlb	0	; () banked
  3269  003CDE  6FEA               	movwf	escalonador@cont& (0+255),b
  3270  003CE0                     l11141:
  3271                           
  3272                           ; BSR set to: 0
  3273  003CE0  0E02               	movlw	2
  3274  003CE2  65EA               	cpfsgt	escalonador@cont& (0+255),b
  3275  003CE4  D001               	goto	l100
  3276  003CE6  0012               	return	
  3277  003CE8                     l100:
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;main.c: 197: {
  3281                           ;main.c: 198: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3282                           
  3283                           ; BSR set to: 0
  3284  003CE8  51EA               	movf	escalonador@cont& (0+255),w,b
  3285  003CEA  0D02               	mullw	2
  3286  003CEC  0EF1               	movlw	low _p_tarefas
  3287  003CEE  24F3               	addwf	prodl,w,c
  3288  003CF0  6ED9               	movwf	fsr2l,c
  3289  003CF2  0E00               	movlw	high _p_tarefas
  3290  003CF4  20F4               	addwfc	prodh,w,c
  3291  003CF6  6EDA               	movwf	fsr2h,c
  3292  003CF8  50DE               	movf	postinc2,w,c
  3293  003CFA  10DE               	iorwf	postinc2,w,c
  3294  003CFC  B4D8               	btfsc	status,2,c
  3295  003CFE  D03D               	goto	l102
  3296                           
  3297                           ; BSR set to: 0
  3298  003D00  51EA               	movf	escalonador@cont& (0+255),w,b
  3299  003D02  0D02               	mullw	2
  3300  003D04  0E22               	movlw	low _tempo_tarefa
  3301  003D06  24F3               	addwf	prodl,w,c
  3302  003D08  6ED9               	movwf	fsr2l,c
  3303  003D0A  0E00               	movlw	high _tempo_tarefa
  3304  003D0C  20F4               	addwfc	prodh,w,c
  3305  003D0E  6EDA               	movwf	fsr2h,c
  3306  003D10  50DE               	movf	postinc2,w,c
  3307  003D12  10DE               	iorwf	postinc2,w,c
  3308  003D14  A4D8               	btfss	status,2,c
  3309  003D16  D031               	goto	l102
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;main.c: 199: {
  3313                           ;main.c: 200: tarefa_em_execucao = 1;
  3314  003D18  0E01               	movlw	1
  3315  003D1A  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3316                           
  3317                           ;main.c: 201: timeout_tarefa = 60000;
  3318  003D1C  0EEA               	movlw	234
  3319  003D1E  6E31               	movwf	_timeout_tarefa+1,c
  3320  003D20  0E60               	movlw	96
  3321  003D22  6E30               	movwf	_timeout_tarefa,c
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;main.c: 202: p_tarefas[cont]();
  3325  003D24  51EA               	movf	escalonador@cont& (0+255),w,b
  3326  003D26  0D02               	mullw	2
  3327  003D28  0EF1               	movlw	low _p_tarefas
  3328  003D2A  24F3               	addwf	prodl,w,c
  3329  003D2C  6ED9               	movwf	fsr2l,c
  3330  003D2E  0E00               	movlw	high _p_tarefas
  3331  003D30  20F4               	addwfc	prodh,w,c
  3332  003D32  6EDA               	movwf	fsr2h,c
  3333  003D34  D801               	call	u14368
  3334  003D36  D00A               	goto	u14369
  3335  003D38                     u14368:
  3336  003D38  0005               	push	
  3337  003D3A  6EFA               	movwf	pclath,c
  3338  003D3C  50DE               	movf	postinc2,w,c
  3339  003D3E  6EFD               	movwf	tosl,c
  3340  003D40  50DE               	movf	postinc2,w,c
  3341  003D42  6EFE               	movwf	tosh,c
  3342  003D44  50F8               	movf	tblptru,w,c
  3343  003D46  6EFF               	movwf	tosu,c
  3344  003D48  50FA               	movf	pclath,w,c
  3345  003D4A  0012               	return		;indir
  3346  003D4C                     u14369:
  3347                           
  3348                           ;main.c: 203: tarefa_em_execucao = 0;
  3349  003D4C  0E00               	movlw	0
  3350  003D4E  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3351                           
  3352                           ;main.c: 204: tempo_tarefa[cont] = tempo_backup[cont];
  3353  003D50  0100               	movlb	0	; () banked
  3354  003D52  51EA               	movf	escalonador@cont& (0+255),w,b
  3355  003D54  0D02               	mullw	2
  3356  003D56  0EEB               	movlw	low _tempo_backup
  3357  003D58  24F3               	addwf	prodl,w,c
  3358  003D5A  6ED9               	movwf	fsr2l,c
  3359  003D5C  0E00               	movlw	high _tempo_backup
  3360  003D5E  20F4               	addwfc	prodh,w,c
  3361  003D60  6EDA               	movwf	fsr2h,c
  3362  003D62  51EA               	movf	escalonador@cont& (0+255),w,b
  3363  003D64  0D02               	mullw	2
  3364  003D66  0E22               	movlw	low _tempo_tarefa
  3365  003D68  24F3               	addwf	prodl,w,c
  3366  003D6A  6EE1               	movwf	fsr1l,c
  3367  003D6C  0E00               	movlw	high _tempo_tarefa
  3368  003D6E  20F4               	addwfc	prodh,w,c
  3369  003D70  6EE2               	movwf	fsr1h,c
  3370  003D72  CFDE FFE6          	movff	postinc2,postinc1
  3371  003D76  CFDD FFE5          	movff	postdec2,postdec1
  3372  003D7A                     l102:
  3373                           
  3374                           ; BSR set to: 0
  3375                           
  3376                           ; BSR set to: 0
  3377  003D7A  2BEA               	incf	escalonador@cont& (0+255),f,b
  3378  003D7C  D7B1               	goto	l11141
  3379  003D7E                     __end_of_escalonador:
  3380                           	opt stack 0
  3381                           tosu	equ	0xFFF
  3382                           tosh	equ	0xFFE
  3383                           tosl	equ	0xFFD
  3384                           pclath	equ	0xFFA
  3385                           tblptru	equ	0xFF8
  3386                           tblptrh	equ	0xFF7
  3387                           tblptrl	equ	0xFF6
  3388                           tablat	equ	0xFF5
  3389                           prodh	equ	0xFF4
  3390                           prodl	equ	0xFF3
  3391                           intcon	equ	0xFF2
  3392                           intcon2	equ	0xFF1
  3393                           intcon3	equ	0xFF0
  3394                           postinc0	equ	0xFEE
  3395                           wreg	equ	0xFE8
  3396                           postinc1	equ	0xFE6
  3397                           postdec1	equ	0xFE5
  3398                           fsr1h	equ	0xFE2
  3399                           fsr1l	equ	0xFE1
  3400                           postinc2	equ	0xFDE
  3401                           postdec2	equ	0xFDD
  3402                           fsr2h	equ	0xFDA
  3403                           fsr2l	equ	0xFD9
  3404                           status	equ	0xFD8
  3405                           
  3406 ;; *************** function _disparo_gravacao *****************
  3407 ;; Defined at:
  3408 ;;		line 516 in file "main.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;		None
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      void 
  3415 ;; Registers used:
  3416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3422 ;;      Params:         0       0       0       0       0       0       0       0       0
  3423 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3424 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3425 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3426 ;;Total ram usage:        0 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:   16
  3429 ;; This function calls:
  3430 ;;		_escrita_sdcard
  3431 ;; This function is called by:
  3432 ;;		_inicializa_tarefas
  3433 ;;		_escalonador
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           	psect	text13
  3438  004C5A                     __ptext13:
  3439                           	opt stack 0
  3440  004C5A                     _disparo_gravacao:
  3441                           	opt stack 13
  3442                           
  3443                           ;main.c: 519: if(!time_sd)
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;incstack = 0
  3447  004C5A  502E               	movf	_time_sd,w,c
  3448  004C5C  102F               	iorwf	_time_sd+1,w,c
  3449  004C5E  A4D8               	btfss	status,2,c
  3450  004C60  0012               	return	
  3451                           
  3452                           ;main.c: 520: {
  3453                           ;main.c: 521: escrita_sdcard();
  3454  004C62  ECC6  F01D         	call	_escrita_sdcard	;wreg free
  3455                           
  3456                           ;main.c: 522: time_sd = 30000;
  3457  004C66  0E75               	movlw	117
  3458  004C68  6E2F               	movwf	_time_sd+1,c
  3459  004C6A  0E30               	movlw	48
  3460  004C6C  6E2E               	movwf	_time_sd,c
  3461  004C6E  0012               	return	
  3462  004C70                     __end_of_disparo_gravacao:
  3463                           	opt stack 0
  3464                           tosu	equ	0xFFF
  3465                           tosh	equ	0xFFE
  3466                           tosl	equ	0xFFD
  3467                           pclath	equ	0xFFA
  3468                           tblptru	equ	0xFF8
  3469                           tblptrh	equ	0xFF7
  3470                           tblptrl	equ	0xFF6
  3471                           tablat	equ	0xFF5
  3472                           prodh	equ	0xFF4
  3473                           prodl	equ	0xFF3
  3474                           intcon	equ	0xFF2
  3475                           intcon2	equ	0xFF1
  3476                           intcon3	equ	0xFF0
  3477                           postinc0	equ	0xFEE
  3478                           wreg	equ	0xFE8
  3479                           postinc1	equ	0xFE6
  3480                           postdec1	equ	0xFE5
  3481                           fsr1h	equ	0xFE2
  3482                           fsr1l	equ	0xFE1
  3483                           postinc2	equ	0xFDE
  3484                           postdec2	equ	0xFDD
  3485                           fsr2h	equ	0xFDA
  3486                           fsr2l	equ	0xFD9
  3487                           status	equ	0xFD8
  3488                           
  3489 ;; *************** function _verifica_dados_operacionais *****************
  3490 ;; Defined at:
  3491 ;;		line 501 in file "main.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;		None
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;		None
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  1    wreg      void 
  3498 ;; Registers used:
  3499 ;;		None
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3505 ;;      Params:         0       0       0       0       0       0       0       0       0
  3506 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3507 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3508 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3509 ;;Total ram usage:        0 bytes
  3510 ;; Hardware stack levels used:    1
  3511 ;; Hardware stack levels required when called:    3
  3512 ;; This function calls:
  3513 ;;		Nothing
  3514 ;; This function is called by:
  3515 ;;		_inicializa_tarefas
  3516 ;;		_escalonador
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text14
  3521  004D38                     __ptext14:
  3522                           	opt stack 0
  3523  004D38                     _verifica_dados_operacionais:
  3524                           	opt stack 26
  3525                           
  3526                           ;incstack = 0
  3527  004D38  0012               	return		;funcret
  3528  004D3A                     __end_of_verifica_dados_operacionais:
  3529                           	opt stack 0
  3530                           tosu	equ	0xFFF
  3531                           tosh	equ	0xFFE
  3532                           tosl	equ	0xFFD
  3533                           pclath	equ	0xFFA
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           prodh	equ	0xFF4
  3539                           prodl	equ	0xFF3
  3540                           intcon	equ	0xFF2
  3541                           intcon2	equ	0xFF1
  3542                           intcon3	equ	0xFF0
  3543                           postinc0	equ	0xFEE
  3544                           wreg	equ	0xFE8
  3545                           postinc1	equ	0xFE6
  3546                           postdec1	equ	0xFE5
  3547                           fsr1h	equ	0xFE2
  3548                           fsr1l	equ	0xFE1
  3549                           postinc2	equ	0xFDE
  3550                           postdec2	equ	0xFDD
  3551                           fsr2h	equ	0xFDA
  3552                           fsr2l	equ	0xFD9
  3553                           status	equ	0xFD8
  3554                           
  3555 ;; *************** function _verifica_fence_externo *****************
  3556 ;; Defined at:
  3557 ;;		line 264 in file "main.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;		None
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  temp_buff_lo   11   30[BANK0 ] unsigned char [11]
  3562 ;;  temp_buff_la   11   19[BANK0 ] unsigned char [11]
  3563 ;;  point_buff      3    0        PTR unsigned char 
  3564 ;;  point_buff_g    2   44[BANK0 ] PTR unsigned char 
  3565 ;;		 -> rawLongitude(13), 
  3566 ;;  point_buff_g    2   42[BANK0 ] PTR unsigned char 
  3567 ;;		 -> rawLatitude(13), 
  3568 ;;  i               1   48[BANK0 ] unsigned char 
  3569 ;;  point           1   47[BANK0 ] unsigned char 
  3570 ;;  j               1   46[BANK0 ] unsigned char 
  3571 ;;  count           1   41[BANK0 ] unsigned char 
  3572 ;;  count_index     1    0        unsigned char 
  3573 ;; Return value:  Size  Location     Type
  3574 ;;                  1    wreg      void 
  3575 ;; Registers used:
  3576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3577 ;; Tracked objects:
  3578 ;;		On entry : 0/0
  3579 ;;		On exit  : 0/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3582 ;;      Params:         0       0       0       0       0       0       0       0       0
  3583 ;;      Locals:         0      30       0       0       0       0       0       0       0
  3584 ;;      Temps:          0       6       0       0       0       0       0       0       0
  3585 ;;      Totals:         0      36       0       0       0       0       0       0       0
  3586 ;;Total ram usage:       36 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    6
  3589 ;; This function calls:
  3590 ;;		_Latitude
  3591 ;;		_Longitude
  3592 ;;		_atoi
  3593 ;;		_escreve_frase_ram_lcd
  3594 ;;		_posicao_cursor_lcd
  3595 ;; This function is called by:
  3596 ;;		_inicializa_tarefas
  3597 ;;		_escalonador
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           	psect	text15
  3602  001A42                     __ptext15:
  3603                           	opt stack 0
  3604  001A42                     _verifica_fence_externo:
  3605                           	opt stack 23
  3606                           
  3607                           ;main.c: 266: poligono_ext[0].fence_diff_lat[11] = "-2365.84991";
  3608                           
  3609                           ;incstack = 0
  3610  001A42  0EFF               	movlw	low STR_1
  3611  001A44  0102               	movlb	2	; () banked
  3612  001A46  6F21               	movwf	(_poligono_ext+33)& (0+255),b
  3613                           
  3614                           ;main.c: 267: poligono_ext[0].fence_diff_long[11] = "-4653.16622";
  3615  001A48  0E0B               	movlw	low STR_2
  3616  001A4A  6F2C               	movwf	(_poligono_ext+44)& (0+255),b
  3617                           
  3618                           ;main.c: 268: poligono_ext[1].fence_diff_lat[11] = "-2365.84991";
  3619  001A4C  0EFF               	movlw	low STR_1
  3620  001A4E  6F55               	movwf	(_poligono_ext+85)& (0+255),b
  3621                           
  3622                           ;main.c: 269: poligono_ext[1].fence_diff_long[11] = "-4653.00475";
  3623  001A50  0E23               	movlw	low STR_4
  3624  001A52  6F60               	movwf	(_poligono_ext+96)& (0+255),b
  3625                           
  3626                           ;main.c: 270: poligono_ext[2].fence_diff_lat[11] = "-2365.99682";
  3627  001A54  0E17               	movlw	low STR_5
  3628  001A56  6F89               	movwf	(_poligono_ext+137)& (0+255),b
  3629                           
  3630                           ;main.c: 271: poligono_ext[2].fence_diff_long[11] = "-4653.00475";
  3631  001A58  0E23               	movlw	low STR_4
  3632  001A5A  6F94               	movwf	(_poligono_ext+148)& (0+255),b
  3633                           
  3634                           ;main.c: 272: poligono_ext[3].fence_diff_lat[11] = "-2365.99731";
  3635  001A5C  0EF3               	movlw	low STR_7
  3636  001A5E  6FBD               	movwf	(_poligono_ext+189)& (0+255),b
  3637                           
  3638                           ;main.c: 273: poligono_ext[3].fence_diff_long[11] = "-4653.16622";
  3639  001A60  0E0B               	movlw	low STR_2
  3640  001A62  6FC8               	movwf	(_poligono_ext+200)& (0+255),b
  3641                           
  3642                           ; BSR set to: 2
  3643                           ;main.c: 276: unsigned char *point_buff, i, j, count, count_index;
  3644                           ;main.c: 277: unsigned char *point_buff_gps_lat, *point_buff_gps_long;
  3645                           ;main.c: 278: unsigned char point;
  3646                           ;main.c: 280: unsigned char temp_buff_lat[11] = "-4653.16622";
  3647  001A64  EE21  F0A4         	lfsr	2,verifica_fence_externo@F4361
  3648  001A68  EE10  F073         	lfsr	1,verifica_fence_externo@temp_buff_lat
  3649  001A6C  0E0A               	movlw	10
  3650  001A6E                     u14051:
  3651  001A6E  CFDB FFE3          	movff	plusw2,plusw1
  3652  001A72  06E8               	decf	wreg,f,c
  3653  001A74  E2FC               	bc	u14051
  3654                           
  3655                           ; BSR set to: 2
  3656                           ;main.c: 281: unsigned char temp_buff_long[11] = "-4653.16622";
  3657  001A76  EE21  F099         	lfsr	2,verifica_fence_externo@F4363
  3658  001A7A  EE10  F07E         	lfsr	1,verifica_fence_externo@temp_buff_long
  3659  001A7E  0E0A               	movlw	10
  3660  001A80                     u14061:
  3661  001A80  CFDB FFE3          	movff	plusw2,plusw1
  3662  001A84  06E8               	decf	wreg,f,c
  3663  001A86  E2FC               	bc	u14061
  3664                           
  3665                           ;main.c: 282: count = 0;
  3666  001A88  0E00               	movlw	0
  3667  001A8A  0100               	movlb	0	; () banked
  3668  001A8C  6F89               	movwf	verifica_fence_externo@count& (0+255),b
  3669                           
  3670                           ;main.c: 283: point = 0;
  3671  001A8E  0E00               	movlw	0
  3672  001A90  6F8F               	movwf	verifica_fence_externo@point& (0+255),b
  3673                           
  3674                           ;main.c: 284: j= 0;
  3675  001A92  0E00               	movlw	0
  3676  001A94  6F8E               	movwf	verifica_fence_externo@j& (0+255),b
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;main.c: 287: point_buff_gps_lat = Latitude();
  3680  001A96  EC7A  F026         	call	_Latitude	;wreg free
  3681  001A9A  C060  F08A         	movff	?_Latitude,verifica_fence_externo@point_buff_gps_lat
  3682  001A9E  C061  F08B         	movff	?_Latitude+1,verifica_fence_externo@point_buff_gps_lat+1
  3683                           
  3684                           ;main.c: 288: point_buff_gps_long = Longitude();
  3685  001AA2  EC74  F026         	call	_Longitude	;wreg free
  3686  001AA6  C060  F08C         	movff	?_Longitude,verifica_fence_externo@point_buff_gps_long
  3687  001AAA  C061  F08D         	movff	?_Longitude+1,verifica_fence_externo@point_buff_gps_long+1
  3688                           
  3689                           ;main.c: 290: for(i=0; i<11; i++)
  3690  001AAE  0E00               	movlw	0
  3691  001AB0  0100               	movlb	0	; () banked
  3692  001AB2  6F90               	movwf	verifica_fence_externo@i& (0+255),b
  3693  001AB4                     l10945:
  3694                           
  3695                           ; BSR set to: 0
  3696  001AB4  0E0A               	movlw	10
  3697  001AB6  6590               	cpfsgt	verifica_fence_externo@i& (0+255),b
  3698  001AB8  D001               	goto	l126
  3699  001ABA  D034               	goto	l128
  3700  001ABC                     l126:
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;main.c: 291: {
  3704                           ;main.c: 292: temp_buff_lat[i] = *point_buff_gps_lat;
  3705                           
  3706                           ; BSR set to: 0
  3707  001ABC  C08A  FFD9         	movff	verifica_fence_externo@point_buff_gps_lat,fsr2l
  3708  001AC0  C08B  FFDA         	movff	verifica_fence_externo@point_buff_gps_lat+1,fsr2h
  3709  001AC4  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3710  001AC6  0D01               	mullw	1
  3711  001AC8  0E73               	movlw	low verifica_fence_externo@temp_buff_lat
  3712  001ACA  24F3               	addwf	prodl,w,c
  3713  001ACC  6EE1               	movwf	fsr1l,c
  3714  001ACE  0E00               	movlw	high verifica_fence_externo@temp_buff_lat
  3715  001AD0  20F4               	addwfc	prodh,w,c
  3716  001AD2  6EE2               	movwf	fsr1h,c
  3717  001AD4  CFDF FFE7          	movff	indf2,indf1
  3718                           
  3719                           ;main.c: 293: temp_buff_long[i] = *point_buff_gps_long;
  3720  001AD8  C08C  FFD9         	movff	verifica_fence_externo@point_buff_gps_long,fsr2l
  3721  001ADC  C08D  FFDA         	movff	verifica_fence_externo@point_buff_gps_long+1,fsr2h
  3722  001AE0  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3723  001AE2  0D01               	mullw	1
  3724  001AE4  0E7E               	movlw	low verifica_fence_externo@temp_buff_long
  3725  001AE6  24F3               	addwf	prodl,w,c
  3726  001AE8  6EE1               	movwf	fsr1l,c
  3727  001AEA  0E00               	movlw	high verifica_fence_externo@temp_buff_long
  3728  001AEC  20F4               	addwfc	prodh,w,c
  3729  001AEE  6EE2               	movwf	fsr1h,c
  3730  001AF0  CFDF FFE7          	movff	indf2,indf1
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;main.c: 294: point_buff_gps_lat++;
  3734  001AF4  4B8A               	infsnz	verifica_fence_externo@point_buff_gps_lat& (0+255),f,b
  3735  001AF6  2B8B               	incf	(verifica_fence_externo@point_buff_gps_lat+1)& (0+255),f,b
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;main.c: 295: point_buff_gps_long++;
  3739  001AF8  4B8C               	infsnz	verifica_fence_externo@point_buff_gps_long& (0+255),f,b
  3740  001AFA  2B8D               	incf	(verifica_fence_externo@point_buff_gps_long+1)& (0+255),f,b
  3741                           
  3742                           ; BSR set to: 0
  3743  001AFC  2B90               	incf	verifica_fence_externo@i& (0+255),f,b
  3744  001AFE  D7DA               	goto	l10945
  3745  001B00                     
  3746                           ; BSR set to: 0
  3747                           ;main.c: 300: {
  3748                           ;main.c: 301: for(i=0; i<5; i++)
  3749                           
  3750                           ; BSR set to: 0
  3751  001B00  0E00               	movlw	0
  3752  001B02  6F90               	movwf	verifica_fence_externo@i& (0+255),b
  3753  001B04                     l10961:
  3754                           
  3755                           ; BSR set to: 0
  3756  001B04  0E04               	movlw	4
  3757  001B06  6590               	cpfsgt	verifica_fence_externo@i& (0+255),b
  3758  001B08  D001               	goto	l130
  3759  001B0A  D00B               	goto	u14100
  3760  001B0C                     l130:
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;main.c: 302: {
  3764                           ;main.c: 303: flag[j].point = 1;
  3765                           
  3766                           ; BSR set to: 0
  3767  001B0C  518E               	movf	verifica_fence_externo@j& (0+255),w,b
  3768  001B0E  0D01               	mullw	1
  3769  001B10  0EF7               	movlw	low _flag
  3770  001B12  24F3               	addwf	prodl,w,c
  3771  001B14  6ED9               	movwf	fsr2l,c
  3772  001B16  0E00               	movlw	high _flag
  3773  001B18  20F4               	addwfc	prodh,w,c
  3774  001B1A  6EDA               	movwf	fsr2h,c
  3775  001B1C  80DF               	bsf	indf2,0,c
  3776                           
  3777                           ; BSR set to: 0
  3778  001B1E  2B90               	incf	verifica_fence_externo@i& (0+255),f,b
  3779  001B20  D7F1               	goto	l10961
  3780  001B22                     u14100:
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;main.c: 304: }
  3784                           ;main.c: 305: j++;
  3785                           
  3786                           ; BSR set to: 0
  3787  001B22  2B8E               	incf	verifica_fence_externo@j& (0+255),f,b
  3788  001B24                     l128:
  3789                           
  3790                           ; BSR set to: 0
  3791                           
  3792                           ; BSR set to: 0
  3793  001B24  0E03               	movlw	3
  3794  001B26  658E               	cpfsgt	verifica_fence_externo@j& (0+255),b
  3795  001B28  D7EB               	goto	l129
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;main.c: 306: }
  3799                           ;main.c: 308: point = 0;
  3800                           
  3801                           ; BSR set to: 0
  3802  001B2A  0E00               	movlw	0
  3803  001B2C  6F8F               	movwf	verifica_fence_externo@point& (0+255),b
  3804                           
  3805                           ;main.c: 310: while(point<4)
  3806  001B2E  D0E2               	goto	u14190
  3807  001B30                     
  3808                           ; BSR set to: 0
  3809                           ;main.c: 311: {
  3810                           ;main.c: 312: for(i=6; i<11; i++)
  3811                           
  3812                           ; BSR set to: 0
  3813  001B30  0E06               	movlw	6
  3814  001B32  6F90               	movwf	verifica_fence_externo@i& (0+255),b
  3815  001B34                     l10979:
  3816                           
  3817                           ; BSR set to: 0
  3818  001B34  0E0A               	movlw	10
  3819  001B36  6590               	cpfsgt	verifica_fence_externo@i& (0+255),b
  3820  001B38  D001               	goto	l135
  3821  001B3A  D0DC               	goto	u14190
  3822  001B3C                     l135:
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;main.c: 313: {
  3826                           ;main.c: 314: if(poligono_ext[point].fence_diff_lat[i] != temp_buff_lat[i])
  3827                           
  3828                           ; BSR set to: 0
  3829  001B3C  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3830  001B3E  0D01               	mullw	1
  3831  001B40  0E73               	movlw	low verifica_fence_externo@temp_buff_lat
  3832  001B42  24F3               	addwf	prodl,w,c
  3833  001B44  6ED9               	movwf	fsr2l,c
  3834  001B46  0E00               	movlw	high verifica_fence_externo@temp_buff_lat
  3835  001B48  20F4               	addwfc	prodh,w,c
  3836  001B4A  6EDA               	movwf	fsr2h,c
  3837  001B4C  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3838  001B4E  0D01               	mullw	1
  3839  001B50  0E16               	movlw	22
  3840  001B52  26F3               	addwf	prodl,f,c
  3841  001B54  0E00               	movlw	0
  3842  001B56  22F4               	addwfc	prodh,f,c
  3843  001B58  0E00               	movlw	low _poligono_ext
  3844  001B5A  6F6E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  3845  001B5C  0E02               	movlw	high _poligono_ext
  3846  001B5E  6F6F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  3847  001B60  50F3               	movf	prodl,w,c
  3848  001B62  276E               	addwf	(??_verifica_fence_externo+1)& (0+255),f,b
  3849  001B64  50F4               	movf	prodh,w,c
  3850  001B66  236F               	addwfc	(??_verifica_fence_externo+2)& (0+255),f,b
  3851  001B68  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  3852  001B6A  0D34               	mullw	52
  3853  001B6C  50F3               	movf	prodl,w,c
  3854  001B6E  256E               	addwf	(??_verifica_fence_externo+1)& (0+255),w,b
  3855  001B70  6EE1               	movwf	fsr1l,c
  3856  001B72  50F4               	movf	prodh,w,c
  3857  001B74  216F               	addwfc	(??_verifica_fence_externo+2)& (0+255),w,b
  3858  001B76  6EE2               	movwf	fsr1h,c
  3859  001B78  50DE               	movf	postinc2,w,c
  3860  001B7A  18E6               	xorwf	postinc1,w,c
  3861  001B7C  B4D8               	btfsc	status,2,c
  3862  001B7E  D049               	goto	u14150
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;main.c: 315: {
  3866                           ;main.c: 316: for(j= 0; i < 11; j++)
  3867  001B80  0E00               	movlw	0
  3868  001B82  6F8E               	movwf	verifica_fence_externo@j& (0+255),b
  3869  001B84                     l10987:
  3870                           
  3871                           ; BSR set to: 0
  3872  001B84  0E0A               	movlw	10
  3873  001B86  6590               	cpfsgt	verifica_fence_externo@i& (0+255),b
  3874  001B88  D001               	goto	l138
  3875  001B8A  D043               	goto	u14150
  3876  001B8C                     l138:
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;main.c: 317: {
  3880                           ;main.c: 318: poligono_ext[point].diff_lat = (atoi(poligono_ext[point].fence_diff_lat)) 
      +                          - (atoi(poligono_ext[point].latitude));
  3881                           
  3882                           ; BSR set to: 0
  3883  001B8C  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  3884  001B8E  0D34               	mullw	52
  3885  001B90  0E16               	movlw	22
  3886  001B92  26F3               	addwf	prodl,f,c
  3887  001B94  0E00               	movlw	0
  3888  001B96  22F4               	addwfc	prodh,f,c
  3889  001B98  0E00               	movlw	low _poligono_ext
  3890  001B9A  24F3               	addwf	prodl,w,c
  3891  001B9C  6F66               	movwf	atoi@s& (0+255),b
  3892  001B9E  0E02               	movlw	high _poligono_ext
  3893  001BA0  20F4               	addwfc	prodh,w,c
  3894  001BA2  6F67               	movwf	(atoi@s+1)& (0+255),b
  3895  001BA4  EC98  F01C         	call	_atoi	;wreg free
  3896  001BA8  C066  F06D         	movff	?_atoi,??_verifica_fence_externo
  3897  001BAC  C067  F06E         	movff	?_atoi+1,??_verifica_fence_externo+1
  3898  001BB0  0100               	movlb	0	; () banked
  3899  001BB2  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  3900  001BB4  0D34               	mullw	52
  3901  001BB6  0E00               	movlw	low _poligono_ext
  3902  001BB8  24F3               	addwf	prodl,w,c
  3903  001BBA  6F66               	movwf	atoi@s& (0+255),b
  3904  001BBC  0E02               	movlw	high _poligono_ext
  3905  001BBE  20F4               	addwfc	prodh,w,c
  3906  001BC0  6F67               	movwf	(atoi@s+1)& (0+255),b
  3907  001BC2  EC98  F01C         	call	_atoi	;wreg free
  3908  001BC6  0100               	movlb	0	; () banked
  3909  001BC8  1F66               	comf	?_atoi& (0+255),f,b
  3910  001BCA  1F67               	comf	(?_atoi+1)& (0+255),f,b
  3911  001BCC  4B66               	infsnz	?_atoi& (0+255),f,b
  3912  001BCE  2B67               	incf	(?_atoi+1)& (0+255),f,b
  3913  001BD0  5166               	movf	?_atoi& (0+255),w,b
  3914  001BD2  256D               	addwf	??_verifica_fence_externo& (0+255),w,b
  3915  001BD4  6F6F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  3916  001BD6  5167               	movf	(?_atoi+1)& (0+255),w,b
  3917  001BD8  216E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  3918  001BDA  6F70               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  3919  001BDC  6B71               	clrf	(??_verifica_fence_externo+4)& (0+255),b
  3920  001BDE  BF70               	btfsc	(??_verifica_fence_externo+3)& (0+255),7,b
  3921  001BE0  0771               	decf	(??_verifica_fence_externo+4)& (0+255),f,b
  3922  001BE2  5171               	movf	(??_verifica_fence_externo+4)& (0+255),w,b
  3923  001BE4  6F72               	movwf	(??_verifica_fence_externo+5)& (0+255),b
  3924  001BE6  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  3925  001BE8  0D34               	mullw	52
  3926  001BEA  0E2C               	movlw	44
  3927  001BEC  26F3               	addwf	prodl,f,c
  3928  001BEE  0E00               	movlw	0
  3929  001BF0  22F4               	addwfc	prodh,f,c
  3930  001BF2  0E00               	movlw	low _poligono_ext
  3931  001BF4  24F3               	addwf	prodl,w,c
  3932  001BF6  6ED9               	movwf	fsr2l,c
  3933  001BF8  0E02               	movlw	high _poligono_ext
  3934  001BFA  20F4               	addwfc	prodh,w,c
  3935  001BFC  6EDA               	movwf	fsr2h,c
  3936  001BFE  C06F  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  3937  001C02  C070  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  3938  001C06  C071  FFDE         	movff	??_verifica_fence_externo+4,postinc2
  3939  001C0A  C072  FFDE         	movff	??_verifica_fence_externo+5,postinc2
  3940                           
  3941                           ; BSR set to: 0
  3942  001C0E  2B8E               	incf	verifica_fence_externo@j& (0+255),f,b
  3943  001C10  D7B9               	goto	l10987
  3944  001C12                     u14150:
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;main.c: 319: }
  3948                           ;main.c: 321: }
  3949                           ;main.c: 323: if(poligono_ext[point].fence_diff_long[i] != temp_buff_long[i])
  3950                           
  3951                           ; BSR set to: 0
  3952                           
  3953                           ; BSR set to: 0
  3954  001C12  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3955  001C14  0D01               	mullw	1
  3956  001C16  0E7E               	movlw	low verifica_fence_externo@temp_buff_long
  3957  001C18  24F3               	addwf	prodl,w,c
  3958  001C1A  6ED9               	movwf	fsr2l,c
  3959  001C1C  0E00               	movlw	high verifica_fence_externo@temp_buff_long
  3960  001C1E  20F4               	addwfc	prodh,w,c
  3961  001C20  6EDA               	movwf	fsr2h,c
  3962  001C22  5190               	movf	verifica_fence_externo@i& (0+255),w,b
  3963  001C24  0D01               	mullw	1
  3964  001C26  0E21               	movlw	33
  3965  001C28  26F3               	addwf	prodl,f,c
  3966  001C2A  0E00               	movlw	0
  3967  001C2C  22F4               	addwfc	prodh,f,c
  3968  001C2E  0E00               	movlw	low _poligono_ext
  3969  001C30  6F6E               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  3970  001C32  0E02               	movlw	high _poligono_ext
  3971  001C34  6F6F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  3972  001C36  50F3               	movf	prodl,w,c
  3973  001C38  276E               	addwf	(??_verifica_fence_externo+1)& (0+255),f,b
  3974  001C3A  50F4               	movf	prodh,w,c
  3975  001C3C  236F               	addwfc	(??_verifica_fence_externo+2)& (0+255),f,b
  3976  001C3E  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  3977  001C40  0D34               	mullw	52
  3978  001C42  50F3               	movf	prodl,w,c
  3979  001C44  256E               	addwf	(??_verifica_fence_externo+1)& (0+255),w,b
  3980  001C46  6EE1               	movwf	fsr1l,c
  3981  001C48  50F4               	movf	prodh,w,c
  3982  001C4A  216F               	addwfc	(??_verifica_fence_externo+2)& (0+255),w,b
  3983  001C4C  6EE2               	movwf	fsr1h,c
  3984  001C4E  50DE               	movf	postinc2,w,c
  3985  001C50  18E6               	xorwf	postinc1,w,c
  3986  001C52  B4D8               	btfsc	status,2,c
  3987  001C54  D04D               	goto	u14180
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;main.c: 324: {
  3991                           ;main.c: 325: for(j= 0; i < 11; j++)
  3992  001C56  0E00               	movlw	0
  3993  001C58  6F8E               	movwf	verifica_fence_externo@j& (0+255),b
  3994  001C5A                     l11001:
  3995                           
  3996                           ; BSR set to: 0
  3997  001C5A  0E0A               	movlw	10
  3998  001C5C  6590               	cpfsgt	verifica_fence_externo@i& (0+255),b
  3999  001C5E  D001               	goto	l141
  4000  001C60  D047               	goto	u14180
  4001  001C62                     l141:
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;main.c: 326: {
  4005                           ;main.c: 327: poligono_ext[point].diff_long = (atoi(poligono_ext[point].fence_diff_long)
      +                          ) - (atoi(poligono_ext[point].longitude));
  4006                           
  4007                           ; BSR set to: 0
  4008  001C62  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4009  001C64  0D34               	mullw	52
  4010  001C66  0E21               	movlw	33
  4011  001C68  26F3               	addwf	prodl,f,c
  4012  001C6A  0E00               	movlw	0
  4013  001C6C  22F4               	addwfc	prodh,f,c
  4014  001C6E  0E00               	movlw	low _poligono_ext
  4015  001C70  24F3               	addwf	prodl,w,c
  4016  001C72  6F66               	movwf	atoi@s& (0+255),b
  4017  001C74  0E02               	movlw	high _poligono_ext
  4018  001C76  20F4               	addwfc	prodh,w,c
  4019  001C78  6F67               	movwf	(atoi@s+1)& (0+255),b
  4020  001C7A  EC98  F01C         	call	_atoi	;wreg free
  4021  001C7E  C066  F06D         	movff	?_atoi,??_verifica_fence_externo
  4022  001C82  C067  F06E         	movff	?_atoi+1,??_verifica_fence_externo+1
  4023  001C86  0100               	movlb	0	; () banked
  4024  001C88  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4025  001C8A  0D34               	mullw	52
  4026  001C8C  0E0B               	movlw	11
  4027  001C8E  26F3               	addwf	prodl,f,c
  4028  001C90  0E00               	movlw	0
  4029  001C92  22F4               	addwfc	prodh,f,c
  4030  001C94  0E00               	movlw	low _poligono_ext
  4031  001C96  24F3               	addwf	prodl,w,c
  4032  001C98  6F66               	movwf	atoi@s& (0+255),b
  4033  001C9A  0E02               	movlw	high _poligono_ext
  4034  001C9C  20F4               	addwfc	prodh,w,c
  4035  001C9E  6F67               	movwf	(atoi@s+1)& (0+255),b
  4036  001CA0  EC98  F01C         	call	_atoi	;wreg free
  4037  001CA4  0100               	movlb	0	; () banked
  4038  001CA6  1F66               	comf	?_atoi& (0+255),f,b
  4039  001CA8  1F67               	comf	(?_atoi+1)& (0+255),f,b
  4040  001CAA  4B66               	infsnz	?_atoi& (0+255),f,b
  4041  001CAC  2B67               	incf	(?_atoi+1)& (0+255),f,b
  4042  001CAE  5166               	movf	?_atoi& (0+255),w,b
  4043  001CB0  256D               	addwf	??_verifica_fence_externo& (0+255),w,b
  4044  001CB2  6F6F               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4045  001CB4  5167               	movf	(?_atoi+1)& (0+255),w,b
  4046  001CB6  216E               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4047  001CB8  6F70               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4048  001CBA  6B71               	clrf	(??_verifica_fence_externo+4)& (0+255),b
  4049  001CBC  BF70               	btfsc	(??_verifica_fence_externo+3)& (0+255),7,b
  4050  001CBE  0771               	decf	(??_verifica_fence_externo+4)& (0+255),f,b
  4051  001CC0  5171               	movf	(??_verifica_fence_externo+4)& (0+255),w,b
  4052  001CC2  6F72               	movwf	(??_verifica_fence_externo+5)& (0+255),b
  4053  001CC4  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4054  001CC6  0D34               	mullw	52
  4055  001CC8  0E30               	movlw	48
  4056  001CCA  26F3               	addwf	prodl,f,c
  4057  001CCC  0E00               	movlw	0
  4058  001CCE  22F4               	addwfc	prodh,f,c
  4059  001CD0  0E00               	movlw	low _poligono_ext
  4060  001CD2  24F3               	addwf	prodl,w,c
  4061  001CD4  6ED9               	movwf	fsr2l,c
  4062  001CD6  0E02               	movlw	high _poligono_ext
  4063  001CD8  20F4               	addwfc	prodh,w,c
  4064  001CDA  6EDA               	movwf	fsr2h,c
  4065  001CDC  C06F  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  4066  001CE0  C070  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  4067  001CE4  C071  FFDE         	movff	??_verifica_fence_externo+4,postinc2
  4068  001CE8  C072  FFDE         	movff	??_verifica_fence_externo+5,postinc2
  4069                           
  4070                           ; BSR set to: 0
  4071  001CEC  2B8E               	incf	verifica_fence_externo@j& (0+255),f,b
  4072  001CEE  D7B5               	goto	l11001
  4073  001CF0                     u14180:
  4074                           
  4075                           ; BSR set to: 0
  4076                           
  4077                           ; BSR set to: 0
  4078                           
  4079                           ; BSR set to: 0
  4080  001CF0  2B90               	incf	verifica_fence_externo@i& (0+255),f,b
  4081  001CF2  D720               	goto	l10979
  4082  001CF4                     u14190:
  4083                           
  4084                           ; BSR set to: 0
  4085                           
  4086                           ; BSR set to: 0
  4087                           
  4088                           ; BSR set to: 0
  4089  001CF4  0E03               	movlw	3
  4090  001CF6  658F               	cpfsgt	verifica_fence_externo@point& (0+255),b
  4091  001CF8  D71B               	goto	l134
  4092  001CFA  D002               	goto	l144
  4093  001CFC                     l150:
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;main.c: 361: else
  4097                           ;main.c: 362: {
  4098                           ;main.c: 363: flag[0].point = 0;
  4099  001CFC  91F7               	bcf	_flag& (0+255),0,b
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;main.c: 367: }
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;main.c: 364: }
  4106                           ;main.c: 365: break;
  4107  001CFE  D011               	goto	l152
  4108  001D00                     l144:
  4109                           
  4110                           ; BSR set to: 0
  4111                           
  4112                           ; BSR set to: 0
  4113  001D00  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4114  001D02  0D34               	mullw	52
  4115  001D04  0E0B               	movlw	11
  4116  001D06  26F3               	addwf	prodl,f,c
  4117  001D08  0E00               	movlw	0
  4118  001D0A  22F4               	addwfc	prodh,f,c
  4119  001D0C  0E00               	movlw	low _poligono_ext
  4120  001D0E  24F3               	addwf	prodl,w,c
  4121  001D10  6ED9               	movwf	fsr2l,c
  4122  001D12  0E02               	movlw	high _poligono_ext
  4123  001D14  20F4               	addwfc	prodh,w,c
  4124  001D16  6EDA               	movwf	fsr2h,c
  4125  001D18  50DF               	movf	indf2,w,c
  4126                           
  4127                           ; Switch size 1, requested type "space"
  4128                           ; Number of cases is 1, Range of values is 45 to 45
  4129                           ; switch strategies available:
  4130                           ; Name         Instructions Cycles
  4131                           ; simple_byte            4     3 (average)
  4132                           ;	Chosen strategy is simple_byte
  4133  001D1A  0A2D               	xorlw	45	; case 45
  4134  001D1C  D7EF               	goto	l150
  4135  001D1E                     l158:
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;main.c: 396: else
  4139                           ;main.c: 397: {
  4140                           ;main.c: 398: flag[1].point = 0;
  4141  001D1E  91F8               	bcf	(_flag+1)& (0+255),0,b
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;main.c: 402: }
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;main.c: 399: }
  4148                           ;main.c: 400: break;
  4149  001D20  D00B               	goto	l156
  4150  001D22                     l152:
  4151                           
  4152                           ; BSR set to: 0
  4153                           
  4154                           ; BSR set to: 0
  4155  001D22  518F               	movf	verifica_fence_externo@point& (0+255),w,b
  4156  001D24  0D34               	mullw	52
  4157  001D26  0E00               	movlw	low _poligono_ext
  4158  001D28  24F3               	addwf	prodl,w,c
  4159  001D2A  6ED9               	movwf	fsr2l,c
  4160  001D2C  0E02               	movlw	high _poligono_ext
  4161  001D2E  20F4               	addwfc	prodh,w,c
  4162  001D30  6EDA               	movwf	fsr2h,c
  4163  001D32  50DF               	movf	indf2,w,c
  4164                           
  4165                           ; Switch size 1, requested type "space"
  4166                           ; Number of cases is 1, Range of values is 45 to 45
  4167                           ; switch strategies available:
  4168                           ; Name         Instructions Cycles
  4169                           ; simple_byte            4     3 (average)
  4170                           ;	Chosen strategy is simple_byte
  4171  001D34  0A2D               	xorlw	45	; case 45
  4172  001D36  D7F3               	goto	l158
  4173  001D38                     l156:
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;main.c: 405: if(flag[0].point && flag[1].point)
  4177  001D38  A1F7               	btfss	_flag& (0+255),0,b
  4178  001D3A  0012               	return	
  4179                           
  4180                           ; BSR set to: 0
  4181  001D3C  A1F8               	btfss	(_flag+1)& (0+255),0,b
  4182  001D3E  0012               	return	
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;main.c: 406: {
  4186                           ;main.c: 407: posicao_cursor_lcd(1,0);
  4187  001D40  0E00               	movlw	0
  4188  001D42  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4189  001D44  0E01               	movlw	1
  4190  001D46  EC91  F021         	call	_posicao_cursor_lcd
  4191                           
  4192                           ;main.c: 408: escreve_frase_ram_lcd("REGIAO NEGADA");
  4193  001D4A  0ED8               	movlw	low STR_9
  4194  001D4C  0100               	movlb	0	; () banked
  4195  001D4E  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  4196  001D50  0E61               	movlw	high STR_9
  4197  001D52  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4198  001D54  EC5C  F023         	call	_escreve_frase_ram_lcd	;wreg free
  4199  001D58  0012               	return	
  4200  001D5A                     __end_of_verifica_fence_externo:
  4201                           	opt stack 0
  4202                           tosu	equ	0xFFF
  4203                           tosh	equ	0xFFE
  4204                           tosl	equ	0xFFD
  4205                           pclath	equ	0xFFA
  4206                           tblptru	equ	0xFF8
  4207                           tblptrh	equ	0xFF7
  4208                           tblptrl	equ	0xFF6
  4209                           tablat	equ	0xFF5
  4210                           prodh	equ	0xFF4
  4211                           prodl	equ	0xFF3
  4212                           intcon	equ	0xFF2
  4213                           intcon2	equ	0xFF1
  4214                           intcon3	equ	0xFF0
  4215                           postinc0	equ	0xFEE
  4216                           wreg	equ	0xFE8
  4217                           indf1	equ	0xFE7
  4218                           postinc1	equ	0xFE6
  4219                           postdec1	equ	0xFE5
  4220                           plusw1	equ	0xFE3
  4221                           fsr1h	equ	0xFE2
  4222                           fsr1l	equ	0xFE1
  4223                           indf2	equ	0xFDF
  4224                           postinc2	equ	0xFDE
  4225                           postdec2	equ	0xFDD
  4226                           plusw2	equ	0xFDB
  4227                           fsr2h	equ	0xFDA
  4228                           fsr2l	equ	0xFD9
  4229                           status	equ	0xFD8
  4230                           
  4231 ;; *************** function _atoi *****************
  4232 ;; Defined at:
  4233 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  4236 ;;		 -> poligono_ext.longitude(11), poligono_ext.latitude(11), poligono_ext.fence_diff_long(11), poligono_ext.fence_diff
      +_lat(11), 
  4237 ;;		 -> poligono_ext(208), 
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;  a               2   11[BANK0 ] int 
  4240 ;;  sign            1   10[BANK0 ] unsigned char 
  4241 ;; Return value:  Size  Location     Type
  4242 ;;                  2    6[BANK0 ] int 
  4243 ;; Registers used:
  4244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4245 ;; Tracked objects:
  4246 ;;		On entry : 0/0
  4247 ;;		On exit  : 0/0
  4248 ;;		Unchanged: 0/0
  4249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4250 ;;      Params:         0       2       0       0       0       0       0       0       0
  4251 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4252 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4253 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4254 ;;Total ram usage:        7 bytes
  4255 ;; Hardware stack levels used:    1
  4256 ;; Hardware stack levels required when called:    4
  4257 ;; This function calls:
  4258 ;;		___wmul
  4259 ;;		_isdigit
  4260 ;; This function is called by:
  4261 ;;		_verifica_fence_externo
  4262 ;; This function uses a non-reentrant model
  4263 ;;
  4264                           
  4265                           	psect	text16
  4266  003930                     __ptext16:
  4267                           	opt stack 0
  4268  003930                     _atoi:
  4269                           	opt stack 24
  4270                           
  4271                           ;incstack = 0
  4272  003930  D003               	goto	l1572
  4273  003932  0100               	movlb	0	; () banked
  4274  003934  4B66               	infsnz	atoi@s& (0+255),f,b
  4275  003936  2B67               	incf	(atoi@s+1)& (0+255),f,b
  4276  003938                     l1572:
  4277                           
  4278                           ; BSR set to: 0
  4279  003938  C066  FFD9         	movff	atoi@s,fsr2l
  4280  00393C  C067  FFDA         	movff	atoi@s+1,fsr2h
  4281  003940  0E20               	movlw	32
  4282  003942  18DE               	xorwf	postinc2,w,c
  4283  003944  B4D8               	btfsc	status,2,c
  4284  003946  D7F5               	goto	l1573
  4285  003948  C066  FFD9         	movff	atoi@s,fsr2l
  4286  00394C  C067  FFDA         	movff	atoi@s+1,fsr2h
  4287  003950  0E09               	movlw	9
  4288  003952  18DE               	xorwf	postinc2,w,c
  4289  003954  B4D8               	btfsc	status,2,c
  4290  003956  D7ED               	goto	l1573
  4291  003958  0E00               	movlw	0
  4292  00395A  0100               	movlb	0	; () banked
  4293  00395C  6F6C               	movwf	(atoi@a+1)& (0+255),b
  4294  00395E  0E00               	movlw	0
  4295  003960  6F6B               	movwf	atoi@a& (0+255),b
  4296  003962  0E00               	movlw	0
  4297  003964  6F6A               	movwf	atoi@sign& (0+255),b
  4298                           
  4299                           ; BSR set to: 0
  4300  003966  C066  FFD9         	movff	atoi@s,fsr2l
  4301  00396A  C067  FFDA         	movff	atoi@s+1,fsr2h
  4302  00396E  0E2D               	movlw	45
  4303  003970  18DE               	xorwf	postinc2,w,c
  4304  003972  A4D8               	btfss	status,2,c
  4305  003974  D002               	goto	l1575
  4306                           
  4307                           ; BSR set to: 0
  4308  003976  2B6A               	incf	atoi@sign& (0+255),f,b
  4309  003978  D026               	goto	l10849
  4310  00397A                     l1575:
  4311                           
  4312                           ; BSR set to: 0
  4313                           
  4314                           ; BSR set to: 0
  4315  00397A  C066  FFD9         	movff	atoi@s,fsr2l
  4316  00397E  C067  FFDA         	movff	atoi@s+1,fsr2h
  4317  003982  0E2B               	movlw	43
  4318  003984  18DE               	xorwf	postinc2,w,c
  4319  003986  A4D8               	btfss	status,2,c
  4320  003988  D020               	goto	l1578
  4321  00398A  D01D               	goto	l10849
  4322  00398C                     
  4323                           ; BSR set to: 0
  4324  00398C  C06B  F060         	movff	atoi@a,___wmul@multiplier
  4325  003990  C06C  F061         	movff	atoi@a+1,___wmul@multiplier+1
  4326  003994  0E00               	movlw	0
  4327  003996  0100               	movlb	0	; () banked
  4328  003998  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4329  00399A  0E0A               	movlw	10
  4330  00399C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4331  00399E  ECB3  F025         	call	___wmul	;wreg free
  4332  0039A2  C066  FFD9         	movff	atoi@s,fsr2l
  4333  0039A6  C067  FFDA         	movff	atoi@s+1,fsr2h
  4334  0039AA  50DF               	movf	indf2,w,c
  4335  0039AC  0100               	movlb	0	; () banked
  4336  0039AE  6F68               	movwf	??_atoi& (0+255),b
  4337  0039B0  6B69               	clrf	(??_atoi+1)& (0+255),b
  4338  0039B2  5160               	movf	?___wmul& (0+255),w,b
  4339  0039B4  2768               	addwf	??_atoi& (0+255),f,b
  4340  0039B6  5161               	movf	(?___wmul+1)& (0+255),w,b
  4341  0039B8  2369               	addwfc	(??_atoi+1)& (0+255),f,b
  4342  0039BA  0ED0               	movlw	208
  4343  0039BC  2568               	addwf	??_atoi& (0+255),w,b
  4344  0039BE  6F6B               	movwf	atoi@a& (0+255),b
  4345  0039C0  0EFF               	movlw	255
  4346  0039C2  2169               	addwfc	(??_atoi+1)& (0+255),w,b
  4347  0039C4  6F6C               	movwf	(atoi@a+1)& (0+255),b
  4348  0039C6                     l10849:
  4349                           
  4350                           ; BSR set to: 0
  4351  0039C6  4B66               	infsnz	atoi@s& (0+255),f,b
  4352  0039C8  2B67               	incf	(atoi@s+1)& (0+255),f,b
  4353  0039CA                     l1578:
  4354                           
  4355                           ; BSR set to: 0
  4356                           
  4357                           ; BSR set to: 0
  4358  0039CA  C066  FFD9         	movff	atoi@s,fsr2l
  4359  0039CE  C067  FFDA         	movff	atoi@s+1,fsr2h
  4360  0039D2  50DF               	movf	indf2,w,c
  4361  0039D4  ECD9  F025         	call	_isdigit
  4362  0039D8  B0D8               	btfsc	status,0,c
  4363  0039DA  D7D8               	goto	l1579
  4364  0039DC  0100               	movlb	0	; () banked
  4365  0039DE  516A               	movf	atoi@sign& (0+255),w,b
  4366  0039E0  B4D8               	btfsc	status,2,c
  4367  0039E2  D00D               	goto	l1581
  4368                           
  4369                           ; BSR set to: 0
  4370  0039E4  C06B  F068         	movff	atoi@a,??_atoi
  4371  0039E8  C06C  F069         	movff	atoi@a+1,??_atoi+1
  4372  0039EC  1F68               	comf	??_atoi& (0+255),f,b
  4373  0039EE  1F69               	comf	(??_atoi+1)& (0+255),f,b
  4374  0039F0  4B68               	infsnz	??_atoi& (0+255),f,b
  4375  0039F2  2B69               	incf	(??_atoi+1)& (0+255),f,b
  4376  0039F4  C068  F066         	movff	??_atoi,?_atoi
  4377  0039F8  C069  F067         	movff	??_atoi+1,?_atoi+1
  4378  0039FC  0012               	return	
  4379  0039FE                     l1581:
  4380                           
  4381                           ; BSR set to: 0
  4382  0039FE  C06B  F066         	movff	atoi@a,?_atoi
  4383  003A02  C06C  F067         	movff	atoi@a+1,?_atoi+1
  4384                           
  4385                           ; BSR set to: 0
  4386  003A06  0012               	return		;funcret
  4387  003A08                     __end_of_atoi:
  4388                           	opt stack 0
  4389                           tosu	equ	0xFFF
  4390                           tosh	equ	0xFFE
  4391                           tosl	equ	0xFFD
  4392                           pclath	equ	0xFFA
  4393                           tblptru	equ	0xFF8
  4394                           tblptrh	equ	0xFF7
  4395                           tblptrl	equ	0xFF6
  4396                           tablat	equ	0xFF5
  4397                           prodh	equ	0xFF4
  4398                           prodl	equ	0xFF3
  4399                           intcon	equ	0xFF2
  4400                           intcon2	equ	0xFF1
  4401                           intcon3	equ	0xFF0
  4402                           postinc0	equ	0xFEE
  4403                           wreg	equ	0xFE8
  4404                           indf1	equ	0xFE7
  4405                           postinc1	equ	0xFE6
  4406                           postdec1	equ	0xFE5
  4407                           plusw1	equ	0xFE3
  4408                           fsr1h	equ	0xFE2
  4409                           fsr1l	equ	0xFE1
  4410                           indf2	equ	0xFDF
  4411                           postinc2	equ	0xFDE
  4412                           postdec2	equ	0xFDD
  4413                           plusw2	equ	0xFDB
  4414                           fsr2h	equ	0xFDA
  4415                           fsr2l	equ	0xFD9
  4416                           status	equ	0xFD8
  4417                           
  4418 ;; *************** function _isdigit *****************
  4419 ;; Defined at:
  4420 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;  c               1    wreg     unsigned char 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  c               1    1[BANK0 ] unsigned char 
  4425 ;; Return value:  Size  Location     Type
  4426 ;;		None               void
  4427 ;; Registers used:
  4428 ;;		wreg, status,2, status,0
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4434 ;;      Params:         0       0       0       0       0       0       0       0       0
  4435 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4436 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4437 ;;      Totals:         1       2       0       0       0       0       0       0       0
  4438 ;;Total ram usage:        3 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; Hardware stack levels required when called:    3
  4441 ;; This function calls:
  4442 ;;		Nothing
  4443 ;; This function is called by:
  4444 ;;		_atoi
  4445 ;; This function uses a non-reentrant model
  4446 ;;
  4447                           
  4448                           	psect	text17
  4449  004BB2                     __ptext17:
  4450                           	opt stack 0
  4451  004BB2                     _isdigit:
  4452                           	opt stack 24
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;incstack = 0
  4456                           ;isdigit@c stored from wreg
  4457  004BB2  0100               	movlb	0	; () banked
  4458  004BB4  6F61               	movwf	isdigit@c& (0+255),b
  4459  004BB6  0E00               	movlw	0
  4460  004BB8  0100               	movlb	0	; () banked
  4461  004BBA  6F60               	movwf	_isdigit$2825& (0+255),b
  4462                           
  4463                           ; BSR set to: 0
  4464  004BBC  0E3A               	movlw	58
  4465  004BBE  6161               	cpfslt	isdigit@c& (0+255),b
  4466  004BC0  D005               	goto	l1753
  4467                           
  4468                           ; BSR set to: 0
  4469  004BC2  0E2F               	movlw	47
  4470  004BC4  6561               	cpfsgt	isdigit@c& (0+255),b
  4471  004BC6  D002               	goto	l1753
  4472                           
  4473                           ; BSR set to: 0
  4474  004BC8  0E01               	movlw	1
  4475  004BCA  6F60               	movwf	_isdigit$2825& (0+255),b
  4476  004BCC                     l1753:
  4477                           
  4478                           ; BSR set to: 0
  4479                           
  4480                           ; BSR set to: 0
  4481  004BCC  C060  F021         	movff	_isdigit$2825,??_isdigit
  4482  004BD0  3021               	rrcf	??_isdigit,w,c
  4483  004BD2  0012               	return	
  4484  004BD4                     __end_of_isdigit:
  4485                           	opt stack 0
  4486                           tosu	equ	0xFFF
  4487                           tosh	equ	0xFFE
  4488                           tosl	equ	0xFFD
  4489                           pclath	equ	0xFFA
  4490                           tblptru	equ	0xFF8
  4491                           tblptrh	equ	0xFF7
  4492                           tblptrl	equ	0xFF6
  4493                           tablat	equ	0xFF5
  4494                           prodh	equ	0xFF4
  4495                           prodl	equ	0xFF3
  4496                           intcon	equ	0xFF2
  4497                           intcon2	equ	0xFF1
  4498                           intcon3	equ	0xFF0
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           indf1	equ	0xFE7
  4502                           postinc1	equ	0xFE6
  4503                           postdec1	equ	0xFE5
  4504                           plusw1	equ	0xFE3
  4505                           fsr1h	equ	0xFE2
  4506                           fsr1l	equ	0xFE1
  4507                           indf2	equ	0xFDF
  4508                           postinc2	equ	0xFDE
  4509                           postdec2	equ	0xFDD
  4510                           plusw2	equ	0xFDB
  4511                           fsr2h	equ	0xFDA
  4512                           fsr2l	equ	0xFD9
  4513                           status	equ	0xFD8
  4514                           
  4515 ;; *************** function _Longitude *****************
  4516 ;; Defined at:
  4517 ;;		line 605 in file "bibliotecas/GPS.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;		None
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;		None
  4522 ;; Return value:  Size  Location     Type
  4523 ;;                  2    0[BANK0 ] PTR unsigned char 
  4524 ;; Registers used:
  4525 ;;		wreg, status,2, status,0
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4531 ;;      Params:         0       2       0       0       0       0       0       0       0
  4532 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4533 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4534 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4535 ;;Total ram usage:        2 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; Hardware stack levels required when called:    3
  4538 ;; This function calls:
  4539 ;;		Nothing
  4540 ;; This function is called by:
  4541 ;;		_verifica_fence_externo
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           	psect	text18
  4546  004CE8                     __ptext18:
  4547                           	opt stack 0
  4548  004CE8                     _Longitude:
  4549                           	opt stack 25
  4550                           
  4551                           ;GPS.c: 607: return rawLongitude;
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;incstack = 0
  4555  004CE8  0E48               	movlw	low _rawLongitude
  4556  004CEA  0100               	movlb	0	; () banked
  4557  004CEC  6F60               	movwf	?_Longitude& (0+255),b
  4558  004CEE  0E01               	movlw	high _rawLongitude
  4559  004CF0  6F61               	movwf	(?_Longitude+1)& (0+255),b
  4560  004CF2  0012               	return	
  4561  004CF4                     __end_of_Longitude:
  4562                           	opt stack 0
  4563                           tosu	equ	0xFFF
  4564                           tosh	equ	0xFFE
  4565                           tosl	equ	0xFFD
  4566                           pclath	equ	0xFFA
  4567                           tblptru	equ	0xFF8
  4568                           tblptrh	equ	0xFF7
  4569                           tblptrl	equ	0xFF6
  4570                           tablat	equ	0xFF5
  4571                           prodh	equ	0xFF4
  4572                           prodl	equ	0xFF3
  4573                           intcon	equ	0xFF2
  4574                           intcon2	equ	0xFF1
  4575                           intcon3	equ	0xFF0
  4576                           postinc0	equ	0xFEE
  4577                           wreg	equ	0xFE8
  4578                           indf1	equ	0xFE7
  4579                           postinc1	equ	0xFE6
  4580                           postdec1	equ	0xFE5
  4581                           plusw1	equ	0xFE3
  4582                           fsr1h	equ	0xFE2
  4583                           fsr1l	equ	0xFE1
  4584                           indf2	equ	0xFDF
  4585                           postinc2	equ	0xFDE
  4586                           postdec2	equ	0xFDD
  4587                           plusw2	equ	0xFDB
  4588                           fsr2h	equ	0xFDA
  4589                           fsr2l	equ	0xFD9
  4590                           status	equ	0xFD8
  4591                           
  4592 ;; *************** function _Latitude *****************
  4593 ;; Defined at:
  4594 ;;		line 600 in file "bibliotecas/GPS.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;		None
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;		None
  4599 ;; Return value:  Size  Location     Type
  4600 ;;                  2    0[BANK0 ] PTR unsigned char 
  4601 ;; Registers used:
  4602 ;;		wreg, status,2, status,0
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4608 ;;      Params:         0       2       0       0       0       0       0       0       0
  4609 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4610 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4611 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4612 ;;Total ram usage:        2 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; Hardware stack levels required when called:    3
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_verifica_fence_externo
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	text19
  4623  004CF4                     __ptext19:
  4624                           	opt stack 0
  4625  004CF4                     _Latitude:
  4626                           	opt stack 25
  4627                           
  4628                           ;GPS.c: 602: return rawLatitude;
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;incstack = 0
  4632  004CF4  0E55               	movlw	low _rawLatitude
  4633  004CF6  0100               	movlb	0	; () banked
  4634  004CF8  6F60               	movwf	?_Latitude& (0+255),b
  4635  004CFA  0E01               	movlw	high _rawLatitude
  4636  004CFC  6F61               	movwf	(?_Latitude+1)& (0+255),b
  4637  004CFE  0012               	return	
  4638  004D00                     __end_of_Latitude:
  4639                           	opt stack 0
  4640                           tosu	equ	0xFFF
  4641                           tosh	equ	0xFFE
  4642                           tosl	equ	0xFFD
  4643                           pclath	equ	0xFFA
  4644                           tblptru	equ	0xFF8
  4645                           tblptrh	equ	0xFF7
  4646                           tblptrl	equ	0xFF6
  4647                           tablat	equ	0xFF5
  4648                           prodh	equ	0xFF4
  4649                           prodl	equ	0xFF3
  4650                           intcon	equ	0xFF2
  4651                           intcon2	equ	0xFF1
  4652                           intcon3	equ	0xFF0
  4653                           postinc0	equ	0xFEE
  4654                           wreg	equ	0xFE8
  4655                           indf1	equ	0xFE7
  4656                           postinc1	equ	0xFE6
  4657                           postdec1	equ	0xFE5
  4658                           plusw1	equ	0xFE3
  4659                           fsr1h	equ	0xFE2
  4660                           fsr1l	equ	0xFE1
  4661                           indf2	equ	0xFDF
  4662                           postinc2	equ	0xFDE
  4663                           postdec2	equ	0xFDD
  4664                           plusw2	equ	0xFDB
  4665                           fsr2h	equ	0xFDA
  4666                           fsr2l	equ	0xFD9
  4667                           status	equ	0xFD8
  4668                           
  4669 ;; *************** function _escrita_sdcard *****************
  4670 ;; Defined at:
  4671 ;;		line 206 in file "bibliotecas/SDCard.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;		None
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;  bw              2    0        unsigned short 
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  1    wreg      void 
  4678 ;; Registers used:
  4679 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4685 ;;      Params:         0       0       0       0       0       0       0       0       0
  4686 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4687 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4688 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4689 ;;Total ram usage:        0 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:   15
  4692 ;; This function calls:
  4693 ;;		_desliga_SPI
  4694 ;;		_desliga_uart
  4695 ;;		_f_close
  4696 ;;		_f_lseek
  4697 ;;		_f_mount
  4698 ;;		_f_open
  4699 ;;		_fprintf
  4700 ;;		_inicializa_SPI
  4701 ;;		_inicializa_uart
  4702 ;; This function is called by:
  4703 ;;		_disparo_gravacao
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           	psect	text20
  4708  003B8C                     __ptext20:
  4709                           	opt stack 0
  4710  003B8C                     _escrita_sdcard:
  4711                           	opt stack 13
  4712                           
  4713                           ;SDCard.c: 208: WORD bw;
  4714                           ;SDCard.c: 209: PORTBbits.RB3 = 0;
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;incstack = 0
  4718  003B8C  9681               	bcf	3969,3,c	;volatile
  4719                           
  4720                           ;SDCard.c: 210: desliga_uart();
  4721  003B8E  EC6D  F026         	call	_desliga_uart	;wreg free
  4722                           
  4723                           ;SDCard.c: 211: inicializa_SPI();
  4724  003B92  ECEA  F025         	call	_inicializa_SPI	;wreg free
  4725                           
  4726                           ;SDCard.c: 212: f_mount(0,&fs);
  4727  003B96  0E23               	movlw	low _fs
  4728  003B98  0100               	movlb	0	; () banked
  4729  003B9A  6F60               	movwf	f_mount@fs& (0+255),b
  4730  003B9C  0E03               	movlw	high _fs
  4731  003B9E  6F61               	movwf	(f_mount@fs+1)& (0+255),b
  4732  003BA0  0E00               	movlw	0
  4733  003BA2  ECFB  F023         	call	_f_mount
  4734                           
  4735                           ;SDCard.c: 216: if (f_open(&fil, filename, 0x10 | 0x02 ) == FR_OK)
  4736  003BA6  0E2C               	movlw	low _fil
  4737  003BA8  0100               	movlb	0	; () banked
  4738  003BAA  6FD7               	movwf	f_open@fp& (0+255),b
  4739  003BAC  0E01               	movlw	high _fil
  4740  003BAE  6FD8               	movwf	(f_open@fp+1)& (0+255),b
  4741  003BB0  0EBD               	movlw	low _filename
  4742  003BB2  6FD9               	movwf	f_open@path& (0+255),b
  4743  003BB4  0E01               	movlw	high _filename
  4744  003BB6  6FDA               	movwf	(f_open@path+1)& (0+255),b
  4745  003BB8  0E12               	movlw	18
  4746  003BBA  6FDB               	movwf	f_open@mode& (0+255),b
  4747  003BBC  ECB3  F009         	call	_f_open	;wreg free
  4748  003BC0  0900               	iorlw	0
  4749  003BC2  A4D8               	btfss	status,2,c
  4750  003BC4  D031               	goto	l332
  4751                           
  4752                           ;SDCard.c: 217: {
  4753                           ;SDCard.c: 219: f_lseek(&fil, ((&fil)->fsize));
  4754  003BC6  0E2C               	movlw	low _fil
  4755  003BC8  0100               	movlb	0	; () banked
  4756  003BCA  6FC4               	movwf	f_lseek@fp& (0+255),b
  4757  003BCC  0E01               	movlw	high _fil
  4758  003BCE  6FC5               	movwf	(f_lseek@fp+1)& (0+255),b
  4759  003BD0  C136  F0C6         	movff	_fil+10,f_lseek@ofs
  4760  003BD4  C137  F0C7         	movff	_fil+11,f_lseek@ofs+1
  4761  003BD8  C138  F0C8         	movff	_fil+12,f_lseek@ofs+2
  4762  003BDC  C139  F0C9         	movff	_fil+13,f_lseek@ofs+3
  4763  003BE0  EC7F  F005         	call	_f_lseek	;wreg free
  4764                           
  4765                           ;SDCard.c: 224: fprintf(&fil, "\n%s ; %s ; %s ; %s ;", string_dado.hora, string_dado.dat
      +                          a,string_dado.LAT, string_dado.LONG);
  4766  003BE4  0E2C               	movlw	low _fil
  4767  003BE6  0101               	movlb	1	; () banked
  4768  003BE8  6FD5               	movwf	fprintf@fil& (0+255),b
  4769  003BEA  0E01               	movlw	high _fil
  4770  003BEC  6FD6               	movwf	(fprintf@fil+1)& (0+255),b
  4771  003BEE  0E81               	movlw	low STR_18
  4772  003BF0  6FD7               	movwf	fprintf@str& (0+255),b
  4773  003BF2  0E61               	movlw	high STR_18
  4774  003BF4  6FD8               	movwf	(fprintf@str+1)& (0+255),b
  4775  003BF6  0E07               	movlw	low (_string_dado+7)
  4776  003BF8  6FD9               	movwf	(?_fprintf+4)& (0+255),b
  4777  003BFA  0E01               	movlw	high (_string_dado+7)
  4778  003BFC  6FDA               	movwf	(?_fprintf+5)& (0+255),b
  4779  003BFE  0E00               	movlw	low _string_dado
  4780  003C00  6FDB               	movwf	(?_fprintf+6)& (0+255),b
  4781  003C02  0E01               	movlw	high _string_dado
  4782  003C04  6FDC               	movwf	(?_fprintf+7)& (0+255),b
  4783  003C06  0E12               	movlw	low (_string_dado+18)
  4784  003C08  6FDD               	movwf	(?_fprintf+8)& (0+255),b
  4785  003C0A  0E01               	movlw	high (_string_dado+18)
  4786  003C0C  6FDE               	movwf	(?_fprintf+9)& (0+255),b
  4787  003C0E  0E1F               	movlw	low (_string_dado+31)
  4788  003C10  6FDF               	movwf	(?_fprintf+10)& (0+255),b
  4789  003C12  0E01               	movlw	high (_string_dado+31)
  4790  003C14  6FE0               	movwf	(?_fprintf+11)& (0+255),b
  4791  003C16  ECC4  F007         	call	_fprintf	;wreg free
  4792                           
  4793                           ;SDCard.c: 227: f_close(&fil);
  4794  003C1A  0E2C               	movlw	low _fil
  4795  003C1C  0100               	movlb	0	; () banked
  4796  003C1E  6FAB               	movwf	f_close@fp& (0+255),b
  4797  003C20  0E01               	movlw	high _fil
  4798  003C22  6FAC               	movwf	(f_close@fp+1)& (0+255),b
  4799  003C24  EC72  F025         	call	_f_close	;wreg free
  4800  003C28                     l332:
  4801                           
  4802                           ;SDCard.c: 228: }
  4803                           ;SDCard.c: 230: PORTBbits.RB3 = 1;
  4804  003C28  8681               	bsf	3969,3,c	;volatile
  4805                           
  4806                           ;SDCard.c: 231: desliga_SPI();
  4807  003C2A  EC92  F026         	call	_desliga_SPI	;wreg free
  4808                           
  4809                           ;SDCard.c: 232: inicializa_uart();
  4810  003C2E  ECC7  F025         	call	_inicializa_uart	;wreg free
  4811  003C32  0012               	return	
  4812  003C34                     __end_of_escrita_sdcard:
  4813                           	opt stack 0
  4814                           tosu	equ	0xFFF
  4815                           tosh	equ	0xFFE
  4816                           tosl	equ	0xFFD
  4817                           pclath	equ	0xFFA
  4818                           tblptru	equ	0xFF8
  4819                           tblptrh	equ	0xFF7
  4820                           tblptrl	equ	0xFF6
  4821                           tablat	equ	0xFF5
  4822                           prodh	equ	0xFF4
  4823                           prodl	equ	0xFF3
  4824                           intcon	equ	0xFF2
  4825                           intcon2	equ	0xFF1
  4826                           intcon3	equ	0xFF0
  4827                           postinc0	equ	0xFEE
  4828                           wreg	equ	0xFE8
  4829                           indf1	equ	0xFE7
  4830                           postinc1	equ	0xFE6
  4831                           postdec1	equ	0xFE5
  4832                           plusw1	equ	0xFE3
  4833                           fsr1h	equ	0xFE2
  4834                           fsr1l	equ	0xFE1
  4835                           indf2	equ	0xFDF
  4836                           postinc2	equ	0xFDE
  4837                           postdec2	equ	0xFDD
  4838                           plusw2	equ	0xFDB
  4839                           fsr2h	equ	0xFDA
  4840                           fsr2l	equ	0xFD9
  4841                           status	equ	0xFD8
  4842                           
  4843 ;; *************** function _inicializa_uart *****************
  4844 ;; Defined at:
  4845 ;;		line 206 in file "bibliotecas/uart.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;		None
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;		None
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      void 
  4852 ;; Registers used:
  4853 ;;		wreg, status,2, status,0, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4859 ;;      Params:         0       0       0       0       0       0       0       0       0
  4860 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4861 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4862 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4863 ;;Total ram usage:        0 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    5
  4866 ;; This function calls:
  4867 ;;		_configura_baudrate_uart
  4868 ;; This function is called by:
  4869 ;;		_main
  4870 ;;		_escrita_sdcard
  4871 ;;		_leitura_sdcard
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text21
  4876  004B8E                     __ptext21:
  4877                           	opt stack 0
  4878  004B8E                     _inicializa_uart:
  4879                           	opt stack 25
  4880                           
  4881                           ;uart.c: 208: TRISCbits.RC6 = 0;
  4882                           
  4883                           ;incstack = 0
  4884  004B8E  9C94               	bcf	3988,6,c	;volatile
  4885                           
  4886                           ;uart.c: 209: TRISCbits.RC7 = 0;
  4887  004B90  9E94               	bcf	3988,7,c	;volatile
  4888                           
  4889                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  4890  004B92  0E80               	movlw	128
  4891  004B94  0100               	movlb	0	; () banked
  4892  004B96  6F6E               	movwf	configura_baudrate_uart@baudrate& (0+255),b
  4893  004B98  0E25               	movlw	37
  4894  004B9A  6F6F               	movwf	(configura_baudrate_uart@baudrate+1)& (0+255),b
  4895  004B9C  0E00               	movlw	0
  4896  004B9E  6F70               	movwf	(configura_baudrate_uart@baudrate+2)& (0+255),b
  4897  004BA0  0E00               	movlw	0
  4898  004BA2  6F71               	movwf	(configura_baudrate_uart@baudrate+3)& (0+255),b
  4899  004BA4  EC4D  F01A         	call	_configura_baudrate_uart	;wreg free
  4900                           
  4901                           ;uart.c: 213: TXSTA = 0x20;
  4902  004BA8  0E20               	movlw	32
  4903  004BAA  6EAC               	movwf	4012,c	;volatile
  4904                           
  4905                           ;uart.c: 214: RCSTA = 0x90;
  4906  004BAC  0E90               	movlw	144
  4907  004BAE  6EAB               	movwf	4011,c	;volatile
  4908  004BB0  0012               	return		;funcret
  4909  004BB2                     __end_of_inicializa_uart:
  4910                           	opt stack 0
  4911                           tosu	equ	0xFFF
  4912                           tosh	equ	0xFFE
  4913                           tosl	equ	0xFFD
  4914                           pclath	equ	0xFFA
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           intcon	equ	0xFF2
  4922                           intcon2	equ	0xFF1
  4923                           intcon3	equ	0xFF0
  4924                           postinc0	equ	0xFEE
  4925                           wreg	equ	0xFE8
  4926                           indf1	equ	0xFE7
  4927                           postinc1	equ	0xFE6
  4928                           postdec1	equ	0xFE5
  4929                           plusw1	equ	0xFE3
  4930                           fsr1h	equ	0xFE2
  4931                           fsr1l	equ	0xFE1
  4932                           indf2	equ	0xFDF
  4933                           postinc2	equ	0xFDE
  4934                           postdec2	equ	0xFDD
  4935                           plusw2	equ	0xFDB
  4936                           fsr2h	equ	0xFDA
  4937                           fsr2l	equ	0xFD9
  4938                           status	equ	0xFD8
  4939                           
  4940 ;; *************** function _configura_baudrate_uart *****************
  4941 ;; Defined at:
  4942 ;;		line 50 in file "bibliotecas/uart.c"
  4943 ;; Parameters:    Size  Location     Type
  4944 ;;  baudrate        4   14[BANK0 ] const long 
  4945 ;; Auto vars:     Size  Location     Type
  4946 ;;  x               2   26[BANK0 ] unsigned int 
  4947 ;; Return value:  Size  Location     Type
  4948 ;;                  1    wreg      unsigned char 
  4949 ;; Registers used:
  4950 ;;		wreg, status,2, status,0, cstack
  4951 ;; Tracked objects:
  4952 ;;		On entry : 0/0
  4953 ;;		On exit  : 0/0
  4954 ;;		Unchanged: 0/0
  4955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4956 ;;      Params:         0       4       0       0       0       0       0       0       0
  4957 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4958 ;;      Temps:          0       8       0       0       0       0       0       0       0
  4959 ;;      Totals:         0      14       0       0       0       0       0       0       0
  4960 ;;Total ram usage:       14 bytes
  4961 ;; Hardware stack levels used:    1
  4962 ;; Hardware stack levels required when called:    4
  4963 ;; This function calls:
  4964 ;;		___aldiv
  4965 ;; This function is called by:
  4966 ;;		_inicializa_uart
  4967 ;; This function uses a non-reentrant model
  4968 ;;
  4969                           
  4970                           	psect	text22
  4971  00349A                     __ptext22:
  4972                           	opt stack 0
  4973  00349A                     _configura_baudrate_uart:
  4974                           	opt stack 25
  4975                           
  4976                           ;uart.c: 52: unsigned int x;
  4977                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  4978                           
  4979                           ;incstack = 0
  4980  00349A  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  4981  00349E  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  4982  0034A2  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  4983  0034A6  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  4984  0034AA  0E06               	movlw	6
  4985  0034AC                     u12495:
  4986  0034AC  90D8               	bcf	status,0,c
  4987  0034AE  0100               	movlb	0	; () banked
  4988  0034B0  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  4989  0034B2  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  4990  0034B4  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  4991  0034B6  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  4992  0034B8  2EE8               	decfsz	wreg,f,c
  4993  0034BA  D7F8               	goto	u12495
  4994  0034BC  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  4995  0034BE  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  4996  0034C0  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  4997  0034C2  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  4998  0034C4  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  4999  0034C6  0E00               	movlw	0
  5000  0034C8  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  5001  0034CA  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  5002  0034CC  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  5003  0034CE  0E00               	movlw	0
  5004  0034D0  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  5005  0034D2  6F60               	movwf	___aldiv@dividend& (0+255),b
  5006  0034D4  0E6C               	movlw	108
  5007  0034D6  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  5008  0034D8  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  5009  0034DA  0EDC               	movlw	220
  5010  0034DC  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  5011  0034DE  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  5012  0034E0  0E02               	movlw	2
  5013  0034E2  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  5014  0034E4  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  5015  0034E6  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  5016  0034EA  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  5017  0034EE  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  5018  0034F2  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  5019  0034F6  0E06               	movlw	6
  5020  0034F8                     u12505:
  5021  0034F8  90D8               	bcf	status,0,c
  5022  0034FA  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  5023  0034FC  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  5024  0034FE  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  5025  003500  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  5026  003502  2EE8               	decfsz	wreg,f,c
  5027  003504  D7F9               	goto	u12505
  5028  003506  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  5029  00350A  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  5030  00350E  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  5031  003512  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  5032  003516  EC04  F01D         	call	___aldiv	;wreg free
  5033  00351A  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  5034  00351E  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  5035                           
  5036                           ;uart.c: 55: if(x > 255)
  5037  003522  0100               	movlb	0	; () banked
  5038  003524  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  5039  003526  A0D8               	btfss	status,0,c
  5040  003528  D044               	goto	l845
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;uart.c: 56: {
  5044                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  5045  00352A  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  5046  00352E  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  5047  003532  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  5048  003536  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  5049  00353A  0E04               	movlw	4
  5050  00353C                     u12525:
  5051  00353C  90D8               	bcf	status,0,c
  5052  00353E  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  5053  003540  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5054  003542  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5055  003544  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5056  003546  2EE8               	decfsz	wreg,f,c
  5057  003548  D7F9               	goto	u12525
  5058  00354A  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  5059  00354C  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  5060  00354E  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  5061  003550  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  5062  003552  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  5063  003554  0E00               	movlw	0
  5064  003556  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  5065  003558  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  5066  00355A  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  5067  00355C  0E00               	movlw	0
  5068  00355E  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  5069  003560  6F60               	movwf	___aldiv@dividend& (0+255),b
  5070  003562  0E6C               	movlw	108
  5071  003564  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  5072  003566  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  5073  003568  0EDC               	movlw	220
  5074  00356A  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  5075  00356C  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  5076  00356E  0E02               	movlw	2
  5077  003570  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  5078  003572  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  5079  003574  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  5080  003578  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  5081  00357C  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  5082  003580  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  5083  003584  0E04               	movlw	4
  5084  003586                     u12535:
  5085  003586  90D8               	bcf	status,0,c
  5086  003588  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  5087  00358A  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  5088  00358C  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  5089  00358E  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  5090  003590  2EE8               	decfsz	wreg,f,c
  5091  003592  D7F9               	goto	u12535
  5092  003594  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  5093  003598  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  5094  00359C  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  5095  0035A0  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  5096  0035A4  EC04  F01D         	call	___aldiv	;wreg free
  5097  0035A8  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  5098  0035AC  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  5099                           
  5100                           ;uart.c: 58: BRGH = 1;
  5101  0035B0  84AC               	bsf	4012,2,c	;volatile
  5102  0035B2                     l845:
  5103                           
  5104                           ;uart.c: 59: }
  5105                           ;uart.c: 60: if(x < 256)
  5106  0035B2  0100               	movlb	0	; () banked
  5107  0035B4  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  5108  0035B6  B0D8               	btfsc	status,0,c
  5109  0035B8  0012               	return	
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;uart.c: 61: {
  5113                           ;uart.c: 62: SPBRG = x;
  5114  0035BA  C07A  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  5115                           
  5116                           ;uart.c: 63: SYNC = 0;
  5117  0035BE  98AC               	bcf	4012,4,c	;volatile
  5118                           
  5119                           ;uart.c: 64: SPEN = 1;
  5120  0035C0  8EAB               	bsf	4011,7,c	;volatile
  5121                           
  5122                           ;uart.c: 65: TRISCbits.RC7 = 1;
  5123  0035C2  8E94               	bsf	3988,7,c	;volatile
  5124                           
  5125                           ;uart.c: 66: TRISCbits.RC6 = 0;
  5126  0035C4  9C94               	bcf	3988,6,c	;volatile
  5127                           
  5128                           ;uart.c: 67: CREN = 1;
  5129  0035C6  88AB               	bsf	4011,4,c	;volatile
  5130                           
  5131                           ;uart.c: 68: TXEN = 1;
  5132  0035C8  8AAC               	bsf	4012,5,c	;volatile
  5133                           
  5134                           ;uart.c: 70: return (1);
  5135                           ;	Return value of _configura_baudrate_uart is never used
  5136  0035CA  0012               	return	
  5137  0035CC                     __end_of_configura_baudrate_uart:
  5138                           	opt stack 0
  5139                           tosu	equ	0xFFF
  5140                           tosh	equ	0xFFE
  5141                           tosl	equ	0xFFD
  5142                           pclath	equ	0xFFA
  5143                           tblptru	equ	0xFF8
  5144                           tblptrh	equ	0xFF7
  5145                           tblptrl	equ	0xFF6
  5146                           tablat	equ	0xFF5
  5147                           prodh	equ	0xFF4
  5148                           prodl	equ	0xFF3
  5149                           intcon	equ	0xFF2
  5150                           intcon2	equ	0xFF1
  5151                           intcon3	equ	0xFF0
  5152                           postinc0	equ	0xFEE
  5153                           wreg	equ	0xFE8
  5154                           indf1	equ	0xFE7
  5155                           postinc1	equ	0xFE6
  5156                           postdec1	equ	0xFE5
  5157                           plusw1	equ	0xFE3
  5158                           fsr1h	equ	0xFE2
  5159                           fsr1l	equ	0xFE1
  5160                           indf2	equ	0xFDF
  5161                           postinc2	equ	0xFDE
  5162                           postdec2	equ	0xFDD
  5163                           plusw2	equ	0xFDB
  5164                           fsr2h	equ	0xFDA
  5165                           fsr2l	equ	0xFD9
  5166                           status	equ	0xFD8
  5167                           
  5168 ;; *************** function ___aldiv *****************
  5169 ;; Defined at:
  5170 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;  dividend        4    0[BANK0 ] long 
  5173 ;;  divisor         4    4[BANK0 ] long 
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  quotient        4   10[BANK0 ] long 
  5176 ;;  sign            1    9[BANK0 ] unsigned char 
  5177 ;;  counter         1    8[BANK0 ] unsigned char 
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  4    0[BANK0 ] long 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5187 ;;      Params:         0       8       0       0       0       0       0       0       0
  5188 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5189 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5190 ;;      Totals:         0      14       0       0       0       0       0       0       0
  5191 ;;Total ram usage:       14 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    3
  5194 ;; This function calls:
  5195 ;;		Nothing
  5196 ;; This function is called by:
  5197 ;;		_configura_baudrate_uart
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text23
  5202  003A08                     __ptext23:
  5203                           	opt stack 0
  5204  003A08                     ___aldiv:
  5205                           	opt stack 25
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;incstack = 0
  5209  003A08  0E00               	movlw	0
  5210  003A0A  0100               	movlb	0	; () banked
  5211  003A0C  6F69               	movwf	___aldiv@sign& (0+255),b
  5212                           
  5213                           ; BSR set to: 0
  5214  003A0E  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  5215  003A10  D00A               	goto	l1464
  5216                           
  5217                           ; BSR set to: 0
  5218  003A12  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  5219  003A14  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  5220  003A16  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  5221  003A18  6D64               	negf	___aldiv@divisor& (0+255),b
  5222  003A1A  0E00               	movlw	0
  5223  003A1C  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  5224  003A1E  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  5225  003A20  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  5226                           
  5227                           ; BSR set to: 0
  5228  003A22  0E01               	movlw	1
  5229  003A24  6F69               	movwf	___aldiv@sign& (0+255),b
  5230  003A26                     l1464:
  5231                           
  5232                           ; BSR set to: 0
  5233                           
  5234                           ; BSR set to: 0
  5235  003A26  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  5236  003A28  D00A               	goto	l1465
  5237                           
  5238                           ; BSR set to: 0
  5239  003A2A  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  5240  003A2C  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  5241  003A2E  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  5242  003A30  6D60               	negf	___aldiv@dividend& (0+255),b
  5243  003A32  0E00               	movlw	0
  5244  003A34  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  5245  003A36  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  5246  003A38  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  5247                           
  5248                           ; BSR set to: 0
  5249  003A3A  0E01               	movlw	1
  5250  003A3C  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  5251  003A3E                     l1465:
  5252                           
  5253                           ; BSR set to: 0
  5254                           
  5255                           ; BSR set to: 0
  5256  003A3E  0E00               	movlw	0
  5257  003A40  6F6A               	movwf	___aldiv@quotient& (0+255),b
  5258  003A42  0E00               	movlw	0
  5259  003A44  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  5260  003A46  0E00               	movlw	0
  5261  003A48  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  5262  003A4A  0E00               	movlw	0
  5263  003A4C  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  5264                           
  5265                           ; BSR set to: 0
  5266  003A4E  5164               	movf	___aldiv@divisor& (0+255),w,b
  5267  003A50  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  5268  003A52  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  5269  003A54  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  5270  003A56  B4D8               	btfsc	status,2,c
  5271  003A58  D02A               	goto	l1472
  5272                           
  5273                           ; BSR set to: 0
  5274  003A5A  0E01               	movlw	1
  5275  003A5C  6F68               	movwf	___aldiv@counter& (0+255),b
  5276  003A5E  D006               	goto	l1467
  5277  003A60                     
  5278                           ; BSR set to: 0
  5279                           
  5280                           ; BSR set to: 0
  5281  003A60  90D8               	bcf	status,0,c
  5282  003A62  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  5283  003A64  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  5284  003A66  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  5285  003A68  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  5286  003A6A  2B68               	incf	___aldiv@counter& (0+255),f,b
  5287  003A6C                     l1467:
  5288                           
  5289                           ; BSR set to: 0
  5290                           
  5291                           ; BSR set to: 0
  5292  003A6C  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  5293  003A6E  D7F8               	goto	l1468
  5294  003A70                     u12430:
  5295                           
  5296                           ; BSR set to: 0
  5297                           
  5298                           ; BSR set to: 0
  5299                           
  5300                           ; BSR set to: 0
  5301  003A70  90D8               	bcf	status,0,c
  5302  003A72  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  5303  003A74  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  5304  003A76  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  5305  003A78  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  5306                           
  5307                           ; BSR set to: 0
  5308  003A7A  5164               	movf	___aldiv@divisor& (0+255),w,b
  5309  003A7C  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  5310  003A7E  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  5311  003A80  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  5312  003A82  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  5313  003A84  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  5314  003A86  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  5315  003A88  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  5316  003A8A  A0D8               	btfss	status,0,c
  5317  003A8C  D009               	goto	l1471
  5318                           
  5319                           ; BSR set to: 0
  5320  003A8E  5164               	movf	___aldiv@divisor& (0+255),w,b
  5321  003A90  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  5322  003A92  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  5323  003A94  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  5324  003A96  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  5325  003A98  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  5326  003A9A  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  5327  003A9C  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  5328                           
  5329                           ; BSR set to: 0
  5330  003A9E  816A               	bsf	___aldiv@quotient& (0+255),0,b
  5331  003AA0                     l1471:
  5332                           
  5333                           ; BSR set to: 0
  5334                           
  5335                           ; BSR set to: 0
  5336  003AA0  90D8               	bcf	status,0,c
  5337  003AA2  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  5338  003AA4  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  5339  003AA6  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  5340  003AA8  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  5341                           
  5342                           ; BSR set to: 0
  5343  003AAA  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  5344  003AAC  D7E1               	goto	u12430
  5345  003AAE                     l1472:
  5346                           
  5347                           ; BSR set to: 0
  5348                           
  5349                           ; BSR set to: 0
  5350                           
  5351                           ; BSR set to: 0
  5352  003AAE  5169               	movf	___aldiv@sign& (0+255),w,b
  5353  003AB0  B4D8               	btfsc	status,2,c
  5354  003AB2  D008               	goto	l1473
  5355                           
  5356                           ; BSR set to: 0
  5357  003AB4  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  5358  003AB6  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  5359  003AB8  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  5360  003ABA  6D6A               	negf	___aldiv@quotient& (0+255),b
  5361  003ABC  0E00               	movlw	0
  5362  003ABE  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  5363  003AC0  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  5364  003AC2  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  5365  003AC4                     l1473:
  5366                           
  5367                           ; BSR set to: 0
  5368                           
  5369                           ; BSR set to: 0
  5370  003AC4  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  5371  003AC8  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  5372  003ACC  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  5373  003AD0  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  5374  003AD4  0012               	return	
  5375  003AD6                     __end_of___aldiv:
  5376                           	opt stack 0
  5377                           tosu	equ	0xFFF
  5378                           tosh	equ	0xFFE
  5379                           tosl	equ	0xFFD
  5380                           pclath	equ	0xFFA
  5381                           tblptru	equ	0xFF8
  5382                           tblptrh	equ	0xFF7
  5383                           tblptrl	equ	0xFF6
  5384                           tablat	equ	0xFF5
  5385                           prodh	equ	0xFF4
  5386                           prodl	equ	0xFF3
  5387                           intcon	equ	0xFF2
  5388                           intcon2	equ	0xFF1
  5389                           intcon3	equ	0xFF0
  5390                           postinc0	equ	0xFEE
  5391                           wreg	equ	0xFE8
  5392                           indf1	equ	0xFE7
  5393                           postinc1	equ	0xFE6
  5394                           postdec1	equ	0xFE5
  5395                           plusw1	equ	0xFE3
  5396                           fsr1h	equ	0xFE2
  5397                           fsr1l	equ	0xFE1
  5398                           indf2	equ	0xFDF
  5399                           postinc2	equ	0xFDE
  5400                           postdec2	equ	0xFDD
  5401                           plusw2	equ	0xFDB
  5402                           fsr2h	equ	0xFDA
  5403                           fsr2l	equ	0xFD9
  5404                           status	equ	0xFD8
  5405                           
  5406 ;; *************** function _inicializa_SPI *****************
  5407 ;; Defined at:
  5408 ;;		line 49 in file "bibliotecas/SPI.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;		None
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;		None
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  1    wreg      void 
  5415 ;; Registers used:
  5416 ;;		wreg, status,2, status,0
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5422 ;;      Params:         0       0       0       0       0       0       0       0       0
  5423 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5424 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5425 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5426 ;;Total ram usage:        0 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    3
  5429 ;; This function calls:
  5430 ;;		Nothing
  5431 ;; This function is called by:
  5432 ;;		_escrita_sdcard
  5433 ;;		_sdcard_init
  5434 ;;		_leitura_sdcard
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           	psect	text24
  5439  004BD4                     __ptext24:
  5440                           	opt stack 0
  5441  004BD4                     _inicializa_SPI:
  5442                           	opt stack 24
  5443                           
  5444                           ;SPI.c: 51: TRISBbits.RB1 = 0;
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;incstack = 0
  5448  004BD4  9293               	bcf	3987,1,c	;volatile
  5449                           
  5450                           ;SPI.c: 52: TRISBbits.RB4 = 0;
  5451  004BD6  9893               	bcf	3987,4,c	;volatile
  5452                           
  5453                           ;SPI.c: 53: TRISBbits.RB0 = 1;
  5454  004BD8  8093               	bsf	3987,0,c	;volatile
  5455                           
  5456                           ;SPI.c: 54: TRISCbits.RC7 = 0;
  5457  004BDA  9E94               	bcf	3988,7,c	;volatile
  5458                           
  5459                           ;SPI.c: 56: LATBbits.LATB4 = 1;
  5460  004BDC  888A               	bsf	3978,4,c	;volatile
  5461                           
  5462                           ;SPI.c: 57: SSPSTAT &= 0x3F;
  5463  004BDE  0E3F               	movlw	63
  5464  004BE0  16C7               	andwf	4039,f,c	;volatile
  5465                           
  5466                           ;SPI.c: 58: SSPCON1 = 0x00;
  5467  004BE2  0E00               	movlw	0
  5468  004BE4  6EC6               	movwf	4038,c	;volatile
  5469                           
  5470                           ;SPI.c: 60: SSPSTATbits.SMP = 0;
  5471  004BE6  9EC7               	bcf	4039,7,c	;volatile
  5472                           
  5473                           ;SPI.c: 61: SSPSTATbits.CKE = 1;
  5474  004BE8  8CC7               	bsf	4039,6,c	;volatile
  5475                           
  5476                           ;SPI.c: 62: SSPCON1bits.CKP = 0;
  5477  004BEA  98C6               	bcf	4038,4,c	;volatile
  5478                           
  5479                           ;SPI.c: 64: SSPCON1 = 0b00000011;
  5480  004BEC  0E03               	movlw	3
  5481  004BEE  6EC6               	movwf	4038,c	;volatile
  5482                           
  5483                           ;SPI.c: 66: SSPCON1bits.SSPEN = 1;
  5484  004BF0  8AC6               	bsf	4038,5,c	;volatile
  5485  004BF2  0012               	return		;funcret
  5486  004BF4                     __end_of_inicializa_SPI:
  5487                           	opt stack 0
  5488                           tosu	equ	0xFFF
  5489                           tosh	equ	0xFFE
  5490                           tosl	equ	0xFFD
  5491                           pclath	equ	0xFFA
  5492                           tblptru	equ	0xFF8
  5493                           tblptrh	equ	0xFF7
  5494                           tblptrl	equ	0xFF6
  5495                           tablat	equ	0xFF5
  5496                           prodh	equ	0xFF4
  5497                           prodl	equ	0xFF3
  5498                           intcon	equ	0xFF2
  5499                           intcon2	equ	0xFF1
  5500                           intcon3	equ	0xFF0
  5501                           postinc0	equ	0xFEE
  5502                           wreg	equ	0xFE8
  5503                           indf1	equ	0xFE7
  5504                           postinc1	equ	0xFE6
  5505                           postdec1	equ	0xFE5
  5506                           plusw1	equ	0xFE3
  5507                           fsr1h	equ	0xFE2
  5508                           fsr1l	equ	0xFE1
  5509                           indf2	equ	0xFDF
  5510                           postinc2	equ	0xFDE
  5511                           postdec2	equ	0xFDD
  5512                           plusw2	equ	0xFDB
  5513                           fsr2h	equ	0xFDA
  5514                           fsr2l	equ	0xFD9
  5515                           status	equ	0xFD8
  5516                           
  5517 ;; *************** function _fprintf *****************
  5518 ;; Defined at:
  5519 ;;		line 1808 in file "bibliotecas/tff.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;  fil             2    9[BANK1 ] PTR struct _FIL
  5522 ;;		 -> fil(28), 
  5523 ;;  str             2   11[BANK1 ] PTR const unsigned char 
  5524 ;;		 -> STR_18(21), 
  5525 ;; Auto vars:     Size  Location     Type
  5526 ;;  s              16    0[BANK3 ] unsigned char [16]
  5527 ;;  val             4   24[BANK3 ] unsigned long 
  5528 ;;  i               2   32[BANK3 ] int 
  5529 ;;  cc              2   30[BANK3 ] int 
  5530 ;;  arp             2   28[BANK3 ] PTR void [1]
  5531 ;;		 -> ?_fprintf(2), 
  5532 ;;  w               2   20[BANK3 ] int 
  5533 ;;  res             2   16[BANK3 ] int 
  5534 ;;  c               1   34[BANK3 ] unsigned char 
  5535 ;;  r               1   23[BANK3 ] unsigned char 
  5536 ;;  f               1   22[BANK3 ] unsigned char 
  5537 ;; Return value:  Size  Location     Type
  5538 ;;                  2    9[BANK1 ] int 
  5539 ;; Registers used:
  5540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5546 ;;      Params:         0       0      12       0       0       0       0       0       0
  5547 ;;      Locals:         0       0       0       0      35       0       0       0       0
  5548 ;;      Temps:          0       0       2       0       0       0       0       0       0
  5549 ;;      Totals:         0       0      14       0      35       0       0       0       0
  5550 ;;Total ram usage:       49 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:   14
  5553 ;; This function calls:
  5554 ;;		___lldiv
  5555 ;;		___llmod
  5556 ;;		___wmul
  5557 ;;		_fputc
  5558 ;;		_fputs
  5559 ;; This function is called by:
  5560 ;;		_escrita_sdcard
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564                           	psect	text25
  5565  000F88                     __ptext25:
  5566                           	opt stack 0
  5567  000F88                     _fprintf:
  5568                           	opt stack 13
  5569                           
  5570                           ;tff.c: 1814: va_list arp;
  5571                           ;tff.c: 1815: UCHAR c, f, r;
  5572                           ;tff.c: 1816: ULONG val;
  5573                           ;tff.c: 1817: char s[16];
  5574                           ;tff.c: 1818: int i, w, res, cc;
  5575                           ;tff.c: 1821: *arp = __va_start();
  5576                           
  5577                           ;incstack = 0
  5578  000F88  0ED9               	movlw	low (?_fprintf+4)
  5579  000F8A  0103               	movlb	3	; () banked
  5580  000F8C  6F1C               	movwf	fprintf@arp& (0+255),b
  5581  000F8E  0E01               	movlw	high (?_fprintf+4)
  5582  000F90  6F1D               	movwf	(fprintf@arp+1)& (0+255),b
  5583                           
  5584                           ; BSR set to: 3
  5585                           ;tff.c: 1823: for (cc = res = 0; cc != -1; res += cc) {
  5586  000F92  0E00               	movlw	0
  5587  000F94  6F11               	movwf	(fprintf@res+1)& (0+255),b
  5588  000F96  0E00               	movlw	0
  5589  000F98  6F10               	movwf	fprintf@res& (0+255),b
  5590  000F9A  C310  F31E         	movff	fprintf@res,fprintf@cc
  5591  000F9E  C311  F31F         	movff	fprintf@res+1,fprintf@cc+1
  5592                           
  5593                           ; BSR set to: 3
  5594  000FA2  291E               	incf	fprintf@cc& (0+255),w,b
  5595  000FA4  E103               	bnz	l10661
  5596  000FA6  291F               	incf	(fprintf@cc+1)& (0+255),w,b
  5597  000FA8  B4D8               	btfsc	status,2,c
  5598  000FAA  0012               	return	
  5599  000FAC                     l10661:
  5600                           
  5601                           ; BSR set to: 3
  5602                           ;tff.c: 1824: c = *str++;
  5603  000FAC  C1D7  FFF6         	movff	fprintf@str,tblptrl
  5604  000FB0  C1D8  FFF7         	movff	fprintf@str+1,tblptrh
  5605  000FB4                     	if	0	;tblptru may be non-zero
  5606  000FB4                     	endif
  5607  000FB4                     	if	0	;tblptru may be non-zero
  5608  000FB4                     	endif
  5609  000FB4  0008               	tblrd		*
  5610  000FB6  CFF5 F322          	movff	tablat,fprintf@c
  5611                           
  5612                           ; BSR set to: 3
  5613  000FBA  0101               	movlb	1	; () banked
  5614  000FBC  4BD7               	infsnz	fprintf@str& (0+255),f,b
  5615  000FBE  2BD8               	incf	(fprintf@str+1)& (0+255),f,b
  5616                           
  5617                           ; BSR set to: 1
  5618                           ;tff.c: 1825: if (c == 0) break;
  5619  000FC0  0103               	movlb	3	; () banked
  5620  000FC2  5122               	movf	fprintf@c& (0+255),w,b
  5621  000FC4  B4D8               	btfsc	status,2,c
  5622  000FC6  0012               	return	
  5623                           
  5624                           ; BSR set to: 3
  5625                           ;tff.c: 1826: if (c != '%') {
  5626                           
  5627                           ; BSR set to: 3
  5628                           
  5629                           ; BSR set to: 3
  5630  000FC8  0E25               	movlw	37
  5631  000FCA  1922               	xorwf	fprintf@c& (0+255),w,b
  5632  000FCC  B4D8               	btfsc	status,2,c
  5633  000FCE  D015               	goto	l1331
  5634                           
  5635                           ; BSR set to: 3
  5636                           ;tff.c: 1827: cc = fputc(c, fil);
  5637  000FD0  C322  F0E5         	movff	fprintf@c,fputc@chr
  5638  000FD4  0100               	movlb	0	; () banked
  5639  000FD6  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  5640  000FD8  C1D5  F0E7         	movff	fprintf@fil,fputc@fil
  5641  000FDC  C1D6  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  5642  000FE0  EC04  F023         	call	_fputc	;wreg free
  5643  000FE4  C0E5  F31E         	movff	?_fputc,fprintf@cc
  5644  000FE8  C0E6  F31F         	movff	?_fputc+1,fprintf@cc+1
  5645                           
  5646                           ;tff.c: 1828: if (cc != -1) cc = 1;
  5647  000FEC  0103               	movlb	3	; () banked
  5648  000FEE  291E               	incf	fprintf@cc& (0+255),w,b
  5649  000FF0  E103               	bnz	u13590
  5650  000FF2  291F               	incf	(fprintf@cc+1)& (0+255),w,b
  5651  000FF4  B4D8               	btfsc	status,2,c
  5652  000FF6  D1AE               	goto	l1333
  5653  000FF8                     u13590:
  5654  000FF8  D096               	goto	u13660
  5655  000FFA                     l1331:
  5656                           
  5657                           ; BSR set to: 3
  5658                           ;tff.c: 1830: }
  5659                           ;tff.c: 1831: w = f = 0;
  5660                           
  5661                           ; BSR set to: 3
  5662  000FFA  0E00               	movlw	0
  5663  000FFC  6F16               	movwf	fprintf@f& (0+255),b
  5664  000FFE  C316  F314         	movff	fprintf@f,fprintf@w
  5665  001002  6B15               	clrf	(fprintf@w+1)& (0+255),b
  5666                           
  5667                           ; BSR set to: 3
  5668                           ;tff.c: 1832: c = *str++;
  5669  001004  C1D7  FFF6         	movff	fprintf@str,tblptrl
  5670  001008  C1D8  FFF7         	movff	fprintf@str+1,tblptrh
  5671  00100C                     	if	0	;tblptru may be non-zero
  5672  00100C                     	endif
  5673  00100C                     	if	0	;tblptru may be non-zero
  5674  00100C                     	endif
  5675  00100C  0008               	tblrd		*
  5676  00100E  CFF5 F322          	movff	tablat,fprintf@c
  5677                           
  5678                           ; BSR set to: 3
  5679  001012  0101               	movlb	1	; () banked
  5680  001014  4BD7               	infsnz	fprintf@str& (0+255),f,b
  5681  001016  2BD8               	incf	(fprintf@str+1)& (0+255),f,b
  5682                           
  5683                           ; BSR set to: 1
  5684                           ;tff.c: 1833: if (c == '0') {
  5685  001018  0E30               	movlw	48
  5686  00101A  0103               	movlb	3	; () banked
  5687  00101C  1922               	xorwf	fprintf@c& (0+255),w,b
  5688  00101E  A4D8               	btfss	status,2,c
  5689  001020  D02E               	goto	l1335
  5690                           
  5691                           ; BSR set to: 3
  5692                           ;tff.c: 1834: f = 1; c = *str++;
  5693  001022  0E01               	movlw	1
  5694  001024  6F16               	movwf	fprintf@f& (0+255),b
  5695  001026  D021               	goto	l10693
  5696  001028                     
  5697                           ;tff.c: 1837: w = w * 10 + (c - '0');
  5698                           
  5699                           ; BSR set to: 1
  5700  001028  C314  F060         	movff	fprintf@w,___wmul@multiplier
  5701  00102C  C315  F061         	movff	fprintf@w+1,___wmul@multiplier+1
  5702  001030  0E00               	movlw	0
  5703  001032  0100               	movlb	0	; () banked
  5704  001034  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5705  001036  0E0A               	movlw	10
  5706  001038  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5707  00103A  ECB3  F025         	call	___wmul	;wreg free
  5708  00103E  0103               	movlb	3	; () banked
  5709  001040  5122               	movf	fprintf@c& (0+255),w,b
  5710  001042  0101               	movlb	1	; () banked
  5711  001044  6FE1               	movwf	??_fprintf& (0+255),b
  5712  001046  6BE2               	clrf	(??_fprintf+1)& (0+255),b
  5713  001048  0100               	movlb	0	; () banked
  5714  00104A  5160               	movf	?___wmul& (0+255),w,b
  5715  00104C  0101               	movlb	1	; () banked
  5716  00104E  27E1               	addwf	??_fprintf& (0+255),f,b
  5717  001050  0100               	movlb	0	; () banked
  5718  001052  5161               	movf	(?___wmul+1)& (0+255),w,b
  5719  001054  0101               	movlb	1	; () banked
  5720  001056  23E2               	addwfc	(??_fprintf+1)& (0+255),f,b
  5721  001058  0ED0               	movlw	208
  5722  00105A  25E1               	addwf	??_fprintf& (0+255),w,b
  5723  00105C  0103               	movlb	3	; () banked
  5724  00105E  6F14               	movwf	fprintf@w& (0+255),b
  5725  001060  0EFF               	movlw	255
  5726  001062  0101               	movlb	1	; () banked
  5727  001064  21E2               	addwfc	(??_fprintf+1)& (0+255),w,b
  5728  001066  0103               	movlb	3	; () banked
  5729  001068  6F15               	movwf	(fprintf@w+1)& (0+255),b
  5730  00106A                     l10693:
  5731                           
  5732                           ; BSR set to: 3
  5733                           ;tff.c: 1838: c = *str++;
  5734  00106A  C1D7  FFF6         	movff	fprintf@str,tblptrl
  5735  00106E  C1D8  FFF7         	movff	fprintf@str+1,tblptrh
  5736  001072                     	if	0	;tblptru may be non-zero
  5737  001072                     	endif
  5738  001072                     	if	0	;tblptru may be non-zero
  5739  001072                     	endif
  5740  001072  0008               	tblrd		*
  5741  001074  CFF5 F322          	movff	tablat,fprintf@c
  5742                           
  5743                           ; BSR set to: 3
  5744  001078  0101               	movlb	1	; () banked
  5745  00107A  4BD7               	infsnz	fprintf@str& (0+255),f,b
  5746  00107C  2BD8               	incf	(fprintf@str+1)& (0+255),f,b
  5747  00107E                     l1335:
  5748                           
  5749                           ; BSR set to: 1
  5750  00107E  0E2F               	movlw	47
  5751  001080  0103               	movlb	3	; () banked
  5752  001082  6522               	cpfsgt	fprintf@c& (0+255),b
  5753  001084  D003               	goto	u13620
  5754                           
  5755                           ; BSR set to: 3
  5756  001086  0E39               	movlw	57
  5757  001088  6522               	cpfsgt	fprintf@c& (0+255),b
  5758  00108A  D7CE               	goto	l1336
  5759  00108C                     u13620:
  5760                           
  5761                           ; BSR set to: 3
  5762                           ;tff.c: 1839: }
  5763                           ;tff.c: 1840: if (c == 'l') {
  5764                           
  5765                           ; BSR set to: 3
  5766                           
  5767                           ; BSR set to: 3
  5768  00108C  0E6C               	movlw	108
  5769  00108E  1922               	xorwf	fprintf@c& (0+255),w,b
  5770  001090  A4D8               	btfss	status,2,c
  5771  001092  D00B               	goto	l1340
  5772                           
  5773                           ; BSR set to: 3
  5774                           ;tff.c: 1841: f |= 2; c = *str++;
  5775  001094  8316               	bsf	fprintf@f& (0+255),1,b
  5776                           
  5777                           ; BSR set to: 3
  5778  001096  C1D7  FFF6         	movff	fprintf@str,tblptrl
  5779  00109A  C1D8  FFF7         	movff	fprintf@str+1,tblptrh
  5780  00109E                     	if	0	;tblptru may be non-zero
  5781  00109E                     	endif
  5782  00109E                     	if	0	;tblptru may be non-zero
  5783  00109E                     	endif
  5784  00109E  0008               	tblrd		*
  5785  0010A0  CFF5 F322          	movff	tablat,fprintf@c
  5786                           
  5787                           ; BSR set to: 3
  5788  0010A4  0101               	movlb	1	; () banked
  5789  0010A6  4BD7               	infsnz	fprintf@str& (0+255),f,b
  5790  0010A8  2BD8               	incf	(fprintf@str+1)& (0+255),f,b
  5791  0010AA                     l1340:
  5792                           
  5793                           ;tff.c: 1842: }
  5794                           ;tff.c: 1843: if (c == 's') {
  5795                           
  5796                           ; BSR set to: 1
  5797  0010AA  0E73               	movlw	115
  5798  0010AC  0103               	movlb	3	; () banked
  5799  0010AE  1922               	xorwf	fprintf@c& (0+255),w,b
  5800  0010B0  A4D8               	btfss	status,2,c
  5801  0010B2  D018               	goto	l1341
  5802                           
  5803                           ; BSR set to: 3
  5804                           ;tff.c: 1844: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  5805  0010B4  C31C  FFD9         	movff	fprintf@arp,fsr2l
  5806  0010B8  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  5807  0010BC  CFDE F1CF          	movff	postinc2,fputs@str
  5808  0010C0  CFDD F1D0          	movff	postdec2,fputs@str+1
  5809  0010C4  C1D5  F1D1         	movff	fprintf@fil,fputs@fil
  5810  0010C8  C1D6  F1D2         	movff	fprintf@fil+1,fputs@fil+1
  5811  0010CC  ECA6  F022         	call	_fputs	;wreg free
  5812  0010D0  C1CF  F31E         	movff	?_fputs,fprintf@cc
  5813  0010D4  C1D0  F31F         	movff	?_fputs+1,fprintf@cc+1
  5814  0010D8  0E02               	movlw	2
  5815  0010DA  0103               	movlb	3	; () banked
  5816  0010DC  271C               	addwf	fprintf@arp& (0+255),f,b
  5817  0010DE  0E00               	movlw	0
  5818  0010E0  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  5819                           
  5820                           ;tff.c: 1845: continue;
  5821  0010E2  D138               	goto	l1333
  5822  0010E4                     l1341:
  5823                           
  5824                           ; BSR set to: 3
  5825                           ;tff.c: 1846: }
  5826                           ;tff.c: 1847: if (c == 'c') {
  5827                           
  5828                           ; BSR set to: 3
  5829  0010E4  0E63               	movlw	99
  5830  0010E6  1922               	xorwf	fprintf@c& (0+255),w,b
  5831  0010E8  A4D8               	btfss	status,2,c
  5832  0010EA  D022               	goto	l1342
  5833                           
  5834                           ; BSR set to: 3
  5835                           ;tff.c: 1848: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  5836  0010EC  C31C  FFD9         	movff	fprintf@arp,fsr2l
  5837  0010F0  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  5838  0010F4  50DF               	movf	indf2,w,c
  5839  0010F6  0101               	movlb	1	; () banked
  5840  0010F8  6FE1               	movwf	??_fprintf& (0+255),b
  5841  0010FA  51E1               	movf	??_fprintf& (0+255),w,b
  5842  0010FC  0100               	movlb	0	; () banked
  5843  0010FE  6FE5               	movwf	fputc@chr& (0+255),b
  5844  001100  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  5845  001102  C1D5  F0E7         	movff	fprintf@fil,fputc@fil
  5846  001106  C1D6  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  5847  00110A  EC04  F023         	call	_fputc	;wreg free
  5848  00110E  C0E5  F31E         	movff	?_fputc,fprintf@cc
  5849  001112  C0E6  F31F         	movff	?_fputc+1,fprintf@cc+1
  5850  001116  0E02               	movlw	2
  5851  001118  0103               	movlb	3	; () banked
  5852  00111A  271C               	addwf	fprintf@arp& (0+255),f,b
  5853  00111C  0E00               	movlw	0
  5854  00111E  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  5855                           
  5856                           ; BSR set to: 3
  5857                           ;tff.c: 1849: if (cc != -1) cc = 1;
  5858  001120  291E               	incf	fprintf@cc& (0+255),w,b
  5859  001122  E101               	bnz	u13660
  5860  001124  D766               	goto	L1
  5861  001126                     u13660:
  5862                           
  5863                           ; BSR set to: 3
  5864  001126  0E00               	movlw	0
  5865  001128  6F1F               	movwf	(fprintf@cc+1)& (0+255),b
  5866  00112A  0E01               	movlw	1
  5867  00112C  6F1E               	movwf	fprintf@cc& (0+255),b
  5868                           
  5869                           ; BSR set to: 3
  5870                           ;tff.c: 1850: continue;
  5871  00112E  D112               	goto	l1333
  5872  001130                     l1342:
  5873                           
  5874                           ; BSR set to: 3
  5875                           ;tff.c: 1851: }
  5876                           ;tff.c: 1852: r = 0;
  5877                           
  5878                           ; BSR set to: 3
  5879  001130  0E00               	movlw	0
  5880  001132  6F17               	movwf	fprintf@r& (0+255),b
  5881                           
  5882                           ; BSR set to: 3
  5883                           ;tff.c: 1853: if (c == 'd') r = 10;
  5884  001134  0E64               	movlw	100
  5885  001136  1922               	xorwf	fprintf@c& (0+255),w,b
  5886  001138  A4D8               	btfss	status,2,c
  5887  00113A  D002               	goto	l1344
  5888                           
  5889                           ; BSR set to: 3
  5890  00113C  0E0A               	movlw	10
  5891  00113E  6F17               	movwf	fprintf@r& (0+255),b
  5892  001140                     l1344:
  5893                           
  5894                           ; BSR set to: 3
  5895                           ;tff.c: 1854: if (c == 'u') r = 10;
  5896                           
  5897                           ; BSR set to: 3
  5898  001140  0E75               	movlw	117
  5899  001142  1922               	xorwf	fprintf@c& (0+255),w,b
  5900  001144  A4D8               	btfss	status,2,c
  5901  001146  D002               	goto	l1345
  5902                           
  5903                           ; BSR set to: 3
  5904  001148  0E0A               	movlw	10
  5905  00114A  6F17               	movwf	fprintf@r& (0+255),b
  5906  00114C                     l1345:
  5907                           
  5908                           ; BSR set to: 3
  5909                           ;tff.c: 1855: if (c == 'X') r = 16;
  5910                           
  5911                           ; BSR set to: 3
  5912  00114C  0E58               	movlw	88
  5913  00114E  1922               	xorwf	fprintf@c& (0+255),w,b
  5914  001150  A4D8               	btfss	status,2,c
  5915  001152  D002               	goto	l1346
  5916                           
  5917                           ; BSR set to: 3
  5918  001154  0E10               	movlw	16
  5919  001156  6F17               	movwf	fprintf@r& (0+255),b
  5920  001158                     l1346:
  5921                           
  5922                           ; BSR set to: 3
  5923                           ;tff.c: 1856: if (r == 0) break;
  5924  001158  5117               	movf	fprintf@r& (0+255),w,b
  5925  00115A  B4D8               	btfsc	status,2,c
  5926  00115C  0012               	return	
  5927                           
  5928                           ; BSR set to: 3
  5929                           ;tff.c: 1857: if (f & 2) {
  5930                           
  5931                           ; BSR set to: 3
  5932  00115E  A316               	btfss	fprintf@f& (0+255),1,b
  5933  001160  D00E               	goto	l1348
  5934                           
  5935                           ; BSR set to: 3
  5936                           ;tff.c: 1858: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  5937  001162  C31C  FFD9         	movff	fprintf@arp,fsr2l
  5938  001166  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  5939  00116A  CFDE F318          	movff	postinc2,fprintf@val
  5940  00116E  CFDE F319          	movff	postinc2,fprintf@val+1
  5941  001172  CFDE F31A          	movff	postinc2,fprintf@val+2
  5942  001176  CFDE F31B          	movff	postinc2,fprintf@val+3
  5943                           
  5944                           ; BSR set to: 3
  5945  00117A  0E04               	movlw	4
  5946  00117C  D021               	goto	L5
  5947  00117E                     l1348:
  5948                           
  5949                           ; BSR set to: 3
  5950                           ;tff.c: 1860: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  5951                           
  5952                           ; BSR set to: 3
  5953  00117E  0E64               	movlw	100
  5954  001180  1922               	xorwf	fprintf@c& (0+255),w,b
  5955  001182  B4D8               	btfsc	status,2,c
  5956  001184  D00F               	goto	l1351
  5957                           
  5958                           ; BSR set to: 3
  5959  001186  C31C  FFD9         	movff	fprintf@arp,fsr2l
  5960  00118A  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  5961  00118E  CFDE F1E1          	movff	postinc2,??_fprintf
  5962  001192  CFDD F1E2          	movff	postdec2,??_fprintf+1
  5963  001196  C1E1  F318         	movff	??_fprintf,fprintf@val
  5964  00119A  C1E2  F319         	movff	??_fprintf+1,fprintf@val+1
  5965  00119E  6B1A               	clrf	(fprintf@val+2)& (0+255),b
  5966  0011A0  6B1B               	clrf	(fprintf@val+3)& (0+255),b
  5967  0011A2  D00D               	goto	l10753
  5968  0011A4                     l1351:
  5969                           
  5970                           ; BSR set to: 3
  5971                           
  5972                           ; BSR set to: 3
  5973  0011A4  C31C  FFD9         	movff	fprintf@arp,fsr2l
  5974  0011A8  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  5975  0011AC  CFDE F318          	movff	postinc2,fprintf@val
  5976  0011B0  CFDD F319          	movff	postdec2,fprintf@val+1
  5977  0011B4  0E00               	movlw	0
  5978  0011B6  BF19               	btfsc	(fprintf@val+1)& (0+255),7,b
  5979  0011B8  0EFF               	movlw	-1
  5980  0011BA  6F1A               	movwf	(fprintf@val+2)& (0+255),b
  5981  0011BC  6F1B               	movwf	(fprintf@val+3)& (0+255),b
  5982  0011BE                     l10753:
  5983                           
  5984                           ; BSR set to: 3
  5985  0011BE  0E02               	movlw	2
  5986  0011C0                     L5:
  5987  0011C0  271C               	addwf	fprintf@arp& (0+255),f,b
  5988  0011C2  0E00               	movlw	0
  5989  0011C4  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  5990                           
  5991                           ; BSR set to: 3
  5992                           ;tff.c: 1861: }
  5993                           ;tff.c: 1863: if (c == 'd') {
  5994                           
  5995                           ; BSR set to: 3
  5996                           
  5997                           ; BSR set to: 3
  5998  0011C6  0E64               	movlw	100
  5999  0011C8  1922               	xorwf	fprintf@c& (0+255),w,b
  6000  0011CA  A4D8               	btfss	status,2,c
  6001  0011CC  D00D               	goto	l1355
  6002                           
  6003                           ; BSR set to: 3
  6004                           ;tff.c: 1864: if (val >= 0x80000000) {
  6005  0011CE  0E80               	movlw	128
  6006  0011D0  5D1B               	subwf	(fprintf@val+3)& (0+255),w,b
  6007  0011D2  A0D8               	btfss	status,0,c
  6008  0011D4  D009               	goto	l1355
  6009                           
  6010                           ; BSR set to: 3
  6011                           ;tff.c: 1865: val = 0 - val;
  6012  0011D6  1F1B               	comf	(fprintf@val+3)& (0+255),f,b
  6013  0011D8  1F1A               	comf	(fprintf@val+2)& (0+255),f,b
  6014  0011DA  1F19               	comf	(fprintf@val+1)& (0+255),f,b
  6015  0011DC  6D18               	negf	fprintf@val& (0+255),b
  6016  0011DE  0E00               	movlw	0
  6017  0011E0  2319               	addwfc	(fprintf@val+1)& (0+255),f,b
  6018  0011E2  231A               	addwfc	(fprintf@val+2)& (0+255),f,b
  6019  0011E4  231B               	addwfc	(fprintf@val+3)& (0+255),f,b
  6020                           
  6021                           ;tff.c: 1866: f |= 4;
  6022  0011E6  8516               	bsf	fprintf@f& (0+255),2,b
  6023  0011E8                     l1355:
  6024                           
  6025                           ; BSR set to: 3
  6026                           ;tff.c: 1867: }
  6027                           ;tff.c: 1868: }
  6028                           ;tff.c: 1869: i = sizeof(s) - 1; s[i] = 0;
  6029                           
  6030                           ; BSR set to: 3
  6031                           
  6032                           ; BSR set to: 3
  6033  0011E8  0E00               	movlw	0
  6034  0011EA  6F21               	movwf	(fprintf@i+1)& (0+255),b
  6035  0011EC  0E0F               	movlw	15
  6036  0011EE  6F20               	movwf	fprintf@i& (0+255),b
  6037                           
  6038                           ; BSR set to: 3
  6039  0011F0  0E00               	movlw	low fprintf@s
  6040  0011F2  2520               	addwf	fprintf@i& (0+255),w,b
  6041  0011F4  6ED9               	movwf	fsr2l,c
  6042  0011F6  0E03               	movlw	high fprintf@s
  6043  0011F8  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  6044  0011FA  6EDA               	movwf	fsr2h,c
  6045  0011FC  0E00               	movlw	0
  6046  0011FE  6EDF               	movwf	indf2,c
  6047  001200                     
  6048                           ; BSR set to: 3
  6049                           ;tff.c: 1871: c = (UCHAR)(val % r + '0');
  6050                           
  6051                           ; BSR set to: 3
  6052  001200  C318  F060         	movff	fprintf@val,___llmod@dividend
  6053  001204  C319  F061         	movff	fprintf@val+1,___llmod@dividend+1
  6054  001208  C31A  F062         	movff	fprintf@val+2,___llmod@dividend+2
  6055  00120C  C31B  F063         	movff	fprintf@val+3,___llmod@dividend+3
  6056  001210  5117               	movf	fprintf@r& (0+255),w,b
  6057  001212  0100               	movlb	0	; () banked
  6058  001214  6F64               	movwf	___llmod@divisor& (0+255),b
  6059  001216  6B65               	clrf	(___llmod@divisor+1)& (0+255),b
  6060  001218  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
  6061  00121A  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
  6062  00121C  EC3E  F022         	call	___llmod	;wreg free
  6063  001220  0100               	movlb	0	; () banked
  6064  001222  5160               	movf	?___llmod& (0+255),w,b
  6065  001224  0F30               	addlw	48
  6066  001226  0103               	movlb	3	; () banked
  6067  001228  6F22               	movwf	fprintf@c& (0+255),b
  6068                           
  6069                           ; BSR set to: 3
  6070                           ;tff.c: 1872: if (c > '9') c += 7;
  6071  00122A  0E39               	movlw	57
  6072  00122C  6522               	cpfsgt	fprintf@c& (0+255),b
  6073  00122E  D002               	goto	l1357
  6074                           
  6075                           ; BSR set to: 3
  6076  001230  0E07               	movlw	7
  6077  001232  2722               	addwf	fprintf@c& (0+255),f,b
  6078  001234                     l1357:
  6079                           
  6080                           ; BSR set to: 3
  6081                           ;tff.c: 1873: s[--i] = c;
  6082                           
  6083                           ; BSR set to: 3
  6084  001234  0720               	decf	fprintf@i& (0+255),f,b
  6085  001236  A0D8               	btfss	status,0,c
  6086  001238  0721               	decf	(fprintf@i+1)& (0+255),f,b
  6087  00123A  0E00               	movlw	low fprintf@s
  6088  00123C  2520               	addwf	fprintf@i& (0+255),w,b
  6089  00123E  6ED9               	movwf	fsr2l,c
  6090  001240  0E03               	movlw	high fprintf@s
  6091  001242  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  6092  001244  6EDA               	movwf	fsr2h,c
  6093  001246  C322  FFDF         	movff	fprintf@c,indf2
  6094                           
  6095                           ; BSR set to: 3
  6096                           ;tff.c: 1874: val /= r;
  6097  00124A  C318  F060         	movff	fprintf@val,___lldiv@dividend
  6098  00124E  C319  F061         	movff	fprintf@val+1,___lldiv@dividend+1
  6099  001252  C31A  F062         	movff	fprintf@val+2,___lldiv@dividend+2
  6100  001256  C31B  F063         	movff	fprintf@val+3,___lldiv@dividend+3
  6101  00125A  5117               	movf	fprintf@r& (0+255),w,b
  6102  00125C  0100               	movlb	0	; () banked
  6103  00125E  6F64               	movwf	___lldiv@divisor& (0+255),b
  6104  001260  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
  6105  001262  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
  6106  001264  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
  6107  001266  EC4F  F021         	call	___lldiv	;wreg free
  6108  00126A  C060  F318         	movff	?___lldiv,fprintf@val
  6109  00126E  C061  F319         	movff	?___lldiv+1,fprintf@val+1
  6110  001272  C062  F31A         	movff	?___lldiv+2,fprintf@val+2
  6111  001276  C063  F31B         	movff	?___lldiv+3,fprintf@val+3
  6112                           
  6113                           ;tff.c: 1875: } while (i && val);
  6114  00127A  0103               	movlb	3	; () banked
  6115  00127C  5120               	movf	fprintf@i& (0+255),w,b
  6116  00127E  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  6117  001280  B4D8               	btfsc	status,2,c
  6118  001282  D006               	goto	u13770
  6119                           
  6120                           ; BSR set to: 3
  6121  001284  5118               	movf	fprintf@val& (0+255),w,b
  6122  001286  1119               	iorwf	(fprintf@val+1)& (0+255),w,b
  6123  001288  111A               	iorwf	(fprintf@val+2)& (0+255),w,b
  6124  00128A  111B               	iorwf	(fprintf@val+3)& (0+255),w,b
  6125  00128C  A4D8               	btfss	status,2,c
  6126  00128E  D7B8               	goto	l1356
  6127  001290                     u13770:
  6128                           
  6129                           ; BSR set to: 3
  6130                           ;tff.c: 1876: if (i && (f & 4)) s[--i] = '-';
  6131                           
  6132                           ; BSR set to: 3
  6133                           
  6134                           ; BSR set to: 3
  6135  001290  5120               	movf	fprintf@i& (0+255),w,b
  6136  001292  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  6137  001294  A4D8               	btfss	status,2,c
  6138                           
  6139                           ; BSR set to: 3
  6140  001296  A516               	btfss	fprintf@f& (0+255),2,b
  6141  001298  D00B               	goto	l1361
  6142                           
  6143                           ; BSR set to: 3
  6144  00129A  0720               	decf	fprintf@i& (0+255),f,b
  6145  00129C  A0D8               	btfss	status,0,c
  6146  00129E  0721               	decf	(fprintf@i+1)& (0+255),f,b
  6147  0012A0  0E00               	movlw	low fprintf@s
  6148  0012A2  2520               	addwf	fprintf@i& (0+255),w,b
  6149  0012A4  6ED9               	movwf	fsr2l,c
  6150  0012A6  0E03               	movlw	high fprintf@s
  6151  0012A8  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  6152  0012AA  6EDA               	movwf	fsr2h,c
  6153  0012AC  0E2D               	movlw	45
  6154  0012AE  6EDF               	movwf	indf2,c
  6155  0012B0                     l1361:
  6156                           
  6157                           ; BSR set to: 3
  6158                           ;tff.c: 1877: w = sizeof(s) - 1 - w;
  6159                           
  6160                           ; BSR set to: 3
  6161  0012B0  0E01               	movlw	1
  6162  0012B2  2514               	addwf	fprintf@w& (0+255),w,b
  6163  0012B4  0101               	movlb	1	; () banked
  6164  0012B6  6FE1               	movwf	??_fprintf& (0+255),b
  6165  0012B8  0E00               	movlw	0
  6166  0012BA  0103               	movlb	3	; () banked
  6167  0012BC  2115               	addwfc	(fprintf@w+1)& (0+255),w,b
  6168  0012BE  0101               	movlb	1	; () banked
  6169  0012C0  6FE2               	movwf	(??_fprintf+1)& (0+255),b
  6170  0012C2  1FE1               	comf	??_fprintf& (0+255),f,b
  6171  0012C4  1FE2               	comf	(??_fprintf+1)& (0+255),f,b
  6172  0012C6  4BE1               	infsnz	??_fprintf& (0+255),f,b
  6173  0012C8  2BE2               	incf	(??_fprintf+1)& (0+255),f,b
  6174  0012CA  0E10               	movlw	16
  6175  0012CC  25E1               	addwf	??_fprintf& (0+255),w,b
  6176  0012CE  0103               	movlb	3	; () banked
  6177  0012D0  6F14               	movwf	fprintf@w& (0+255),b
  6178  0012D2  0E00               	movlw	0
  6179  0012D4  0101               	movlb	1	; () banked
  6180  0012D6  21E2               	addwfc	(??_fprintf+1)& (0+255),w,b
  6181  0012D8  0103               	movlb	3	; () banked
  6182  0012DA  6F15               	movwf	(fprintf@w+1)& (0+255),b
  6183                           
  6184                           ;tff.c: 1878: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
  6185  0012DC  D016               	goto	l1362
  6186  0012DE                     l1363:
  6187                           
  6188                           ; BSR set to: 1
  6189  0012DE  0103               	movlb	3	; () banked
  6190  0012E0  B116               	btfsc	fprintf@f& (0+255),0,b
  6191  0012E2  D004               	goto	l1365
  6192                           
  6193                           ; BSR set to: 3
  6194  0012E4  0E00               	movlw	0
  6195  0012E6  6F13               	movwf	(_fprintf$2487+1)& (0+255),b
  6196  0012E8  0E20               	movlw	32
  6197  0012EA  D003               	goto	L3
  6198  0012EC                     l1365:
  6199                           
  6200                           ; BSR set to: 3
  6201                           
  6202                           ; BSR set to: 3
  6203  0012EC  0E00               	movlw	0
  6204  0012EE  6F13               	movwf	(_fprintf$2487+1)& (0+255),b
  6205  0012F0  0E30               	movlw	48
  6206  0012F2                     L3:
  6207  0012F2  6F12               	movwf	_fprintf$2487& (0+255),b
  6208                           
  6209                           ; BSR set to: 3
  6210                           
  6211                           ; BSR set to: 3
  6212  0012F4  0720               	decf	fprintf@i& (0+255),f,b
  6213  0012F6  A0D8               	btfss	status,0,c
  6214  0012F8  0721               	decf	(fprintf@i+1)& (0+255),f,b
  6215  0012FA  0E00               	movlw	low fprintf@s
  6216  0012FC  2520               	addwf	fprintf@i& (0+255),w,b
  6217  0012FE  6ED9               	movwf	fsr2l,c
  6218  001300  0E03               	movlw	high fprintf@s
  6219  001302  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  6220  001304  6EDA               	movwf	fsr2h,c
  6221  001306  C312  FFDF         	movff	_fprintf$2487,indf2
  6222  00130A                     l1362:
  6223                           
  6224                           ; BSR set to: 3
  6225                           
  6226                           ; BSR set to: 3
  6227  00130A  5120               	movf	fprintf@i& (0+255),w,b
  6228  00130C  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  6229  00130E  B4D8               	btfsc	status,2,c
  6230  001310  D00D               	goto	u13820
  6231                           
  6232                           ; BSR set to: 3
  6233  001312  5120               	movf	fprintf@i& (0+255),w,b
  6234  001314  5D14               	subwf	fprintf@w& (0+255),w,b
  6235  001316  5115               	movf	(fprintf@w+1)& (0+255),w,b
  6236  001318  0A80               	xorlw	128
  6237  00131A  0101               	movlb	1	; () banked
  6238  00131C  6FE1               	movwf	??_fprintf& (0+255),b
  6239  00131E  0103               	movlb	3	; () banked
  6240  001320  5121               	movf	(fprintf@i+1)& (0+255),w,b
  6241  001322  0A80               	xorlw	128
  6242  001324  0101               	movlb	1	; () banked
  6243  001326  59E1               	subwfb	??_fprintf& (0+255),w,b
  6244  001328  A0D8               	btfss	status,0,c
  6245  00132A  D7D9               	goto	l1363
  6246  00132C                     u13820:
  6247                           
  6248                           ;tff.c: 1879: cc = fputs(&s[i], fil);
  6249                           
  6250                           ; BSR set to: 1
  6251                           
  6252                           ; BSR set to: 1
  6253  00132C  0E00               	movlw	low fprintf@s
  6254  00132E  0103               	movlb	3	; () banked
  6255  001330  2520               	addwf	fprintf@i& (0+255),w,b
  6256  001332  0101               	movlb	1	; () banked
  6257  001334  6FCF               	movwf	fputs@str& (0+255),b
  6258  001336  0E03               	movlw	high fprintf@s
  6259  001338  0103               	movlb	3	; () banked
  6260  00133A  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  6261  00133C  0101               	movlb	1	; () banked
  6262  00133E  6FD0               	movwf	(fputs@str+1)& (0+255),b
  6263  001340  C1D5  F1D1         	movff	fprintf@fil,fputs@fil
  6264  001344  C1D6  F1D2         	movff	fprintf@fil+1,fputs@fil+1
  6265  001348  ECA6  F022         	call	_fputs	;wreg free
  6266  00134C  C1CF  F31E         	movff	?_fputs,fprintf@cc
  6267  001350  C1D0  F31F         	movff	?_fputs+1,fprintf@cc+1
  6268  001354                     l1333:
  6269  001354  0103               	movlb	3	; () banked
  6270  001356  511E               	movf	fprintf@cc& (0+255),w,b
  6271  001358  2710               	addwf	fprintf@res& (0+255),f,b
  6272  00135A  511F               	movf	(fprintf@cc+1)& (0+255),w,b
  6273  00135C  2311               	addwfc	(fprintf@res+1)& (0+255),f,b
  6274                           
  6275                           ; BSR set to: 3
  6276  00135E  291E               	incf	fprintf@cc& (0+255),w,b
  6277  001360  E101               	bnz	u13831
  6278  001362  D621               	goto	L4
  6279  001364                     u13831:
  6280  001364  D623               	goto	l1328
  6281  001366                     __end_of_fprintf:
  6282                           	opt stack 0
  6283                           tosu	equ	0xFFF
  6284                           tosh	equ	0xFFE
  6285                           tosl	equ	0xFFD
  6286                           pclath	equ	0xFFA
  6287                           tblptru	equ	0xFF8
  6288                           tblptrh	equ	0xFF7
  6289                           tblptrl	equ	0xFF6
  6290                           tablat	equ	0xFF5
  6291                           prodh	equ	0xFF4
  6292                           prodl	equ	0xFF3
  6293                           intcon	equ	0xFF2
  6294                           intcon2	equ	0xFF1
  6295                           intcon3	equ	0xFF0
  6296                           postinc0	equ	0xFEE
  6297                           wreg	equ	0xFE8
  6298                           indf1	equ	0xFE7
  6299                           postinc1	equ	0xFE6
  6300                           postdec1	equ	0xFE5
  6301                           plusw1	equ	0xFE3
  6302                           fsr1h	equ	0xFE2
  6303                           fsr1l	equ	0xFE1
  6304                           indf2	equ	0xFDF
  6305                           postinc2	equ	0xFDE
  6306                           postdec2	equ	0xFDD
  6307                           plusw2	equ	0xFDB
  6308                           fsr2h	equ	0xFDA
  6309                           fsr2l	equ	0xFD9
  6310                           status	equ	0xFD8
  6311                           
  6312 ;; *************** function _fputs *****************
  6313 ;; Defined at:
  6314 ;;		line 1788 in file "bibliotecas/tff.c"
  6315 ;; Parameters:    Size  Location     Type
  6316 ;;  str             2    3[BANK1 ] PTR const unsigned char 
  6317 ;;		 -> fprintf@s(16), string_dado(44), 
  6318 ;;  fil             2    5[BANK1 ] PTR struct _FIL
  6319 ;;		 -> fil(28), 
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;  n               2    7[BANK1 ] int 
  6322 ;; Return value:  Size  Location     Type
  6323 ;;                  2    3[BANK1 ] int 
  6324 ;; Registers used:
  6325 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6326 ;; Tracked objects:
  6327 ;;		On entry : 0/0
  6328 ;;		On exit  : 0/0
  6329 ;;		Unchanged: 0/0
  6330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6331 ;;      Params:         0       0       4       0       0       0       0       0       0
  6332 ;;      Locals:         0       0       2       0       0       0       0       0       0
  6333 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6334 ;;      Totals:         0       1       6       0       0       0       0       0       0
  6335 ;;Total ram usage:        7 bytes
  6336 ;; Hardware stack levels used:    1
  6337 ;; Hardware stack levels required when called:   13
  6338 ;; This function calls:
  6339 ;;		_fputc
  6340 ;; This function is called by:
  6341 ;;		_fprintf
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           	psect	text26
  6346  00454C                     __ptext26:
  6347                           	opt stack 0
  6348  00454C                     _fputs:
  6349                           	opt stack 13
  6350                           
  6351                           ;tff.c: 1793: int n;
  6352                           ;tff.c: 1796: for (n = 0; *str; str++, n++) {
  6353                           
  6354                           ; BSR set to: 3
  6355                           ;incstack = 0
  6356  00454C  0E00               	movlw	0
  6357  00454E  0101               	movlb	1	; () banked
  6358  004550  6FD4               	movwf	(fputs@n+1)& (0+255),b
  6359  004552  0E00               	movlw	0
  6360  004554  6FD3               	movwf	fputs@n& (0+255),b
  6361  004556  D01F               	goto	l1321
  6362  004558                     
  6363                           ; BSR set to: 1
  6364                           ;tff.c: 1797: if (fputc(*str, fil) == -1) return -1;
  6365                           
  6366                           ; BSR set to: 1
  6367  004558  C1CF  FFD9         	movff	fputs@str,fsr2l
  6368  00455C  C1D0  FFDA         	movff	fputs@str+1,fsr2h
  6369  004560  50DF               	movf	indf2,w,c
  6370  004562  0100               	movlb	0	; () banked
  6371  004564  6FE9               	movwf	??_fputs& (0+255),b
  6372  004566  51E9               	movf	??_fputs& (0+255),w,b
  6373  004568  6FE5               	movwf	fputc@chr& (0+255),b
  6374  00456A  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  6375  00456C  C1D1  F0E7         	movff	fputs@fil,fputc@fil
  6376  004570  C1D2  F0E8         	movff	fputs@fil+1,fputc@fil+1
  6377  004574  EC04  F023         	call	_fputc	;wreg free
  6378  004578  0100               	movlb	0	; () banked
  6379  00457A  29E5               	incf	?_fputc& (0+255),w,b
  6380  00457C  E107               	bnz	l10405
  6381  00457E  29E6               	incf	(?_fputc+1)& (0+255),w,b
  6382  004580  A4D8               	btfss	status,2,c
  6383  004582  D004               	goto	l1323
  6384                           
  6385                           ; BSR set to: 0
  6386  004584  0101               	movlb	1	; () banked
  6387  004586  69CF               	setf	?_fputs& (0+255),b
  6388  004588  69D0               	setf	(?_fputs+1)& (0+255),b
  6389  00458A  0012               	return	
  6390  00458C                     l1323:
  6391  00458C                     l10405:
  6392  00458C  0101               	movlb	1	; () banked
  6393  00458E  4BCF               	infsnz	fputs@str& (0+255),f,b
  6394  004590  2BD0               	incf	(fputs@str+1)& (0+255),f,b
  6395  004592  4BD3               	infsnz	fputs@n& (0+255),f,b
  6396  004594  2BD4               	incf	(fputs@n+1)& (0+255),f,b
  6397  004596                     l1321:
  6398                           
  6399                           ; BSR set to: 1
  6400                           
  6401                           ; BSR set to: 1
  6402  004596  C1CF  FFD9         	movff	fputs@str,fsr2l
  6403  00459A  C1D0  FFDA         	movff	fputs@str+1,fsr2h
  6404  00459E  50DF               	movf	indf2,w,c
  6405  0045A0  A4D8               	btfss	status,2,c
  6406  0045A2  D7DA               	goto	l1322
  6407                           
  6408                           ; BSR set to: 1
  6409                           ;tff.c: 1798: }
  6410                           ;tff.c: 1799: return n;
  6411  0045A4  C1D3  F1CF         	movff	fputs@n,?_fputs
  6412  0045A8  C1D4  F1D0         	movff	fputs@n+1,?_fputs+1
  6413                           
  6414                           ; BSR set to: 1
  6415  0045AC  0012               	return		;funcret
  6416  0045AE                     __end_of_fputs:
  6417                           	opt stack 0
  6418                           tosu	equ	0xFFF
  6419                           tosh	equ	0xFFE
  6420                           tosl	equ	0xFFD
  6421                           pclath	equ	0xFFA
  6422                           tblptru	equ	0xFF8
  6423                           tblptrh	equ	0xFF7
  6424                           tblptrl	equ	0xFF6
  6425                           tablat	equ	0xFF5
  6426                           prodh	equ	0xFF4
  6427                           prodl	equ	0xFF3
  6428                           intcon	equ	0xFF2
  6429                           intcon2	equ	0xFF1
  6430                           intcon3	equ	0xFF0
  6431                           postinc0	equ	0xFEE
  6432                           wreg	equ	0xFE8
  6433                           indf1	equ	0xFE7
  6434                           postinc1	equ	0xFE6
  6435                           postdec1	equ	0xFE5
  6436                           plusw1	equ	0xFE3
  6437                           fsr1h	equ	0xFE2
  6438                           fsr1l	equ	0xFE1
  6439                           indf2	equ	0xFDF
  6440                           postinc2	equ	0xFDE
  6441                           postdec2	equ	0xFDD
  6442                           plusw2	equ	0xFDB
  6443                           fsr2h	equ	0xFDA
  6444                           fsr2l	equ	0xFD9
  6445                           status	equ	0xFD8
  6446                           
  6447 ;; *************** function _fputc *****************
  6448 ;; Defined at:
  6449 ;;		line 1761 in file "bibliotecas/tff.c"
  6450 ;; Parameters:    Size  Location     Type
  6451 ;;  chr             2  133[BANK0 ] int 
  6452 ;;  fil             2  135[BANK0 ] PTR struct _FIL
  6453 ;;		 -> fil(28), 
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;  bw              2    1[BANK1 ] unsigned int 
  6456 ;;  c               1    0[BANK1 ] unsigned char 
  6457 ;; Return value:  Size  Location     Type
  6458 ;;                  2  133[BANK0 ] int 
  6459 ;; Registers used:
  6460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/0
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6466 ;;      Params:         0       4       0       0       0       0       0       0       0
  6467 ;;      Locals:         0       0       3       0       0       0       0       0       0
  6468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6469 ;;      Totals:         0       4       3       0       0       0       0       0       0
  6470 ;;Total ram usage:        7 bytes
  6471 ;; Hardware stack levels used:    1
  6472 ;; Hardware stack levels required when called:   12
  6473 ;; This function calls:
  6474 ;;		_f_write
  6475 ;; This function is called by:
  6476 ;;		_fputs
  6477 ;;		_fprintf
  6478 ;; This function uses a non-reentrant model
  6479 ;;
  6480                           
  6481                           	psect	text27
  6482  004608                     __ptext27:
  6483                           	opt stack 0
  6484  004608                     _fputc:
  6485                           	opt stack 13
  6486                           
  6487                           ;tff.c: 1766: UINT bw;
  6488                           ;tff.c: 1767: char c;
  6489                           ;tff.c: 1773: if (!fil) {
  6490                           
  6491                           ; BSR set to: 1
  6492                           ;incstack = 0
  6493  004608  0100               	movlb	0	; () banked
  6494  00460A  51E7               	movf	fputc@fil& (0+255),w,b
  6495  00460C  11E8               	iorwf	(fputc@fil+1)& (0+255),w,b
  6496  00460E  A4D8               	btfss	status,2,c
  6497  004610  D005               	goto	l1313
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;tff.c: 1775: return chr;
  6501  004612  C0E5  F0E5         	movff	fputc@chr,?_fputc
  6502  004616  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  6503  00461A  0012               	return	
  6504  00461C                     l1313:
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;tff.c: 1776: }
  6508                           ;tff.c: 1777: c = (char)chr;
  6509  00461C  C0E5  F1CC         	movff	fputc@chr,fputc@c
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;tff.c: 1778: f_write(fil, &c, 1, &bw);
  6513  004620  C0E7  F0C4         	movff	fputc@fil,f_write@fp
  6514  004624  C0E8  F0C5         	movff	fputc@fil+1,f_write@fp+1
  6515  004628  0ECC               	movlw	low fputc@c
  6516  00462A  6FC6               	movwf	f_write@buff& (0+255),b
  6517  00462C  0E01               	movlw	high fputc@c
  6518  00462E  6FC7               	movwf	(f_write@buff+1)& (0+255),b
  6519  004630  0E00               	movlw	0
  6520  004632  6FC9               	movwf	(f_write@btw+1)& (0+255),b
  6521  004634  0E01               	movlw	1
  6522  004636  6FC8               	movwf	f_write@btw& (0+255),b
  6523  004638  0ECD               	movlw	low fputc@bw
  6524  00463A  6FCA               	movwf	f_write@bw& (0+255),b
  6525  00463C  0E01               	movlw	high fputc@bw
  6526  00463E  6FCB               	movwf	(f_write@bw+1)& (0+255),b
  6527  004640  EC09  F000         	call	_f_write	;wreg free
  6528                           
  6529                           ;tff.c: 1779: return bw ? chr : -1;
  6530  004644  0101               	movlb	1	; () banked
  6531  004646  51CD               	movf	fputc@bw& (0+255),w,b
  6532  004648  11CE               	iorwf	(fputc@bw+1)& (0+255),w,b
  6533  00464A  A4D8               	btfss	status,2,c
  6534  00464C  D004               	goto	l1316
  6535                           
  6536                           ; BSR set to: 1
  6537  00464E  0100               	movlb	0	; () banked
  6538  004650  69E5               	setf	?_fputc& (0+255),b
  6539  004652  69E6               	setf	(?_fputc+1)& (0+255),b
  6540  004654  0012               	return	
  6541  004656                     l1316:
  6542                           
  6543                           ; BSR set to: 1
  6544  004656  C0E5  F0E5         	movff	fputc@chr,?_fputc
  6545  00465A  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  6546  00465E  0012               	return	
  6547  004660                     __end_of_fputc:
  6548                           	opt stack 0
  6549                           tosu	equ	0xFFF
  6550                           tosh	equ	0xFFE
  6551                           tosl	equ	0xFFD
  6552                           pclath	equ	0xFFA
  6553                           tblptru	equ	0xFF8
  6554                           tblptrh	equ	0xFF7
  6555                           tblptrl	equ	0xFF6
  6556                           tablat	equ	0xFF5
  6557                           prodh	equ	0xFF4
  6558                           prodl	equ	0xFF3
  6559                           intcon	equ	0xFF2
  6560                           intcon2	equ	0xFF1
  6561                           intcon3	equ	0xFF0
  6562                           postinc0	equ	0xFEE
  6563                           wreg	equ	0xFE8
  6564                           indf1	equ	0xFE7
  6565                           postinc1	equ	0xFE6
  6566                           postdec1	equ	0xFE5
  6567                           plusw1	equ	0xFE3
  6568                           fsr1h	equ	0xFE2
  6569                           fsr1l	equ	0xFE1
  6570                           indf2	equ	0xFDF
  6571                           postinc2	equ	0xFDE
  6572                           postdec2	equ	0xFDD
  6573                           plusw2	equ	0xFDB
  6574                           fsr2h	equ	0xFDA
  6575                           fsr2l	equ	0xFD9
  6576                           status	equ	0xFD8
  6577                           
  6578 ;; *************** function _f_write *****************
  6579 ;; Defined at:
  6580 ;;		line 991 in file "bibliotecas/tff.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;  fp              2  100[BANK0 ] PTR struct _FIL
  6583 ;;		 -> fil(28), 
  6584 ;;  buff            2  102[BANK0 ] PTR const void 
  6585 ;;		 -> fputc@c(1), 
  6586 ;;  btw             2  104[BANK0 ] unsigned int 
  6587 ;;  bw              2  106[BANK0 ] PTR unsigned int 
  6588 ;;		 -> fputc@bw(2), 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  sect            4  123[BANK0 ] unsigned long 
  6591 ;;  wcnt            2  131[BANK0 ] unsigned int 
  6592 ;;  clust           2  129[BANK0 ] unsigned short 
  6593 ;;  cc              2  127[BANK0 ] unsigned int 
  6594 ;;  wbuff           2  121[BANK0 ] PTR const unsigned char 
  6595 ;;		 -> fputc@c(1), 
  6596 ;;  res             1  120[BANK0 ] enum E155
  6597 ;; Return value:  Size  Location     Type
  6598 ;;                  1    wreg      enum E155
  6599 ;; Registers used:
  6600 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6601 ;; Tracked objects:
  6602 ;;		On entry : 0/0
  6603 ;;		On exit  : 0/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6606 ;;      Params:         0       8       0       0       0       0       0       0       0
  6607 ;;      Locals:         0      13       0       0       0       0       0       0       0
  6608 ;;      Temps:          0      12       0       0       0       0       0       0       0
  6609 ;;      Totals:         0      33       0       0       0       0       0       0       0
  6610 ;;Total ram usage:       33 bytes
  6611 ;; Hardware stack levels used:    1
  6612 ;; Hardware stack levels required when called:   11
  6613 ;; This function calls:
  6614 ;;		_clust2sect
  6615 ;;		_create_chain
  6616 ;;		_disk_write
  6617 ;;		_memcpy
  6618 ;;		_move_window
  6619 ;;		_validate
  6620 ;; This function is called by:
  6621 ;;		_fputc
  6622 ;; This function uses a non-reentrant model
  6623 ;;
  6624                           
  6625                           	psect	text28
  6626  000012                     __ptext28:
  6627                           	opt stack 0
  6628  000012                     _f_write:
  6629                           	opt stack 13
  6630                           
  6631                           ;tff.c: 998: FRESULT res;
  6632                           ;tff.c: 999: DWORD sect;
  6633                           ;tff.c: 1000: UINT wcnt, cc;
  6634                           ;tff.c: 1001: CLUST clust;
  6635                           ;tff.c: 1002: const BYTE *wbuff = buff;
  6636                           
  6637                           ;incstack = 0
  6638  000012  C0C6  F0D9         	movff	f_write@buff,f_write@wbuff
  6639  000016  C0C7  F0DA         	movff	f_write@buff+1,f_write@wbuff+1
  6640                           
  6641                           ;tff.c: 1005: *bw = 0;
  6642  00001A  C0CA  FFD9         	movff	f_write@bw,fsr2l
  6643  00001E  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  6644  000022  0E00               	movlw	0
  6645  000024  6EDE               	movwf	postinc2,c
  6646  000026  0E00               	movlw	0
  6647  000028  6EDD               	movwf	postdec2,c
  6648                           
  6649                           ;tff.c: 1006: res = validate(fp->fs, fp->id);
  6650  00002A  0100               	movlb	0	; () banked
  6651  00002C  EE20 F004          	lfsr	2,4
  6652  000030  51C4               	movf	f_write@fp& (0+255),w,b
  6653  000032  26D9               	addwf	fsr2l,f,c
  6654  000034  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6655  000036  22DA               	addwfc	fsr2h,f,c
  6656  000038  CFDE F066          	movff	postinc2,validate@fs
  6657  00003C  CFDD F067          	movff	postdec2,validate@fs+1
  6658  000040  C0C4  FFD9         	movff	f_write@fp,fsr2l
  6659  000044  C0C5  FFDA         	movff	f_write@fp+1,fsr2h
  6660  000048  CFDE F068          	movff	postinc2,validate@id
  6661  00004C  CFDD F069          	movff	postdec2,validate@id+1
  6662  000050  ECD5  F023         	call	_validate	;wreg free
  6663  000054  0100               	movlb	0	; () banked
  6664  000056  6FD8               	movwf	f_write@res& (0+255),b
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;tff.c: 1007: if (res != FR_OK) return res;
  6668  000058  51D8               	movf	f_write@res& (0+255),w,b
  6669  00005A  A4D8               	btfss	status,2,c
  6670  00005C  0012               	return	
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;tff.c: 1008: if (fp->flag & 0x80) return FR_RW_ERROR;
  6674                           
  6675                           ; BSR set to: 0
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;	Return value of _f_write is never used
  6679  00005E  EE20 F002          	lfsr	2,2
  6680  000062  51C4               	movf	f_write@fp& (0+255),w,b
  6681  000064  26D9               	addwf	fsr2l,f,c
  6682  000066  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6683  000068  22DA               	addwfc	fsr2h,f,c
  6684  00006A  BEDF               	btfsc	indf2,7,c
  6685  00006C  0012               	return	
  6686                           
  6687                           ; BSR set to: 0
  6688                           ;tff.c: 1009: if (!(fp->flag & 0x02)) return FR_DENIED;
  6689                           
  6690                           ; BSR set to: 0
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;	Return value of _f_write is never used
  6694  00006E  EE20 F002          	lfsr	2,2
  6695  000072  51C4               	movf	f_write@fp& (0+255),w,b
  6696  000074  26D9               	addwf	fsr2l,f,c
  6697  000076  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6698  000078  22DA               	addwfc	fsr2h,f,c
  6699  00007A  A2DF               	btfss	indf2,1,c
  6700  00007C  0012               	return	
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;tff.c: 1010: if (fp->fsize + btw < fp->fsize) return FR_OK;
  6704                           
  6705                           ; BSR set to: 0
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;	Return value of _f_write is never used
  6709  00007E  EE20 F00A          	lfsr	2,10
  6710  000082  51C4               	movf	f_write@fp& (0+255),w,b
  6711  000084  26D9               	addwf	fsr2l,f,c
  6712  000086  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6713  000088  22DA               	addwfc	fsr2h,f,c
  6714  00008A  EE10 F00A          	lfsr	1,10
  6715  00008E  51C4               	movf	f_write@fp& (0+255),w,b
  6716  000090  26E1               	addwf	fsr1l,f,c
  6717  000092  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6718  000094  22E2               	addwfc	fsr1h,f,c
  6719  000096  CFE6 F0D0          	movff	postinc1,??_f_write+4
  6720  00009A  CFE6 F0D1          	movff	postinc1,??_f_write+5
  6721  00009E  CFE6 F0D2          	movff	postinc1,??_f_write+6
  6722  0000A2  CFE6 F0D3          	movff	postinc1,??_f_write+7
  6723  0000A6  51C8               	movf	f_write@btw& (0+255),w,b
  6724  0000A8  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  6725  0000AA  6FD4               	movwf	(??_f_write+8)& (0+255),b
  6726  0000AC  51C9               	movf	(f_write@btw+1)& (0+255),w,b
  6727  0000AE  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  6728  0000B0  6FD5               	movwf	(??_f_write+9)& (0+255),b
  6729  0000B2  0E00               	movlw	0
  6730  0000B4  21D2               	addwfc	(??_f_write+6)& (0+255),w,b
  6731  0000B6  6FD6               	movwf	(??_f_write+10)& (0+255),b
  6732  0000B8  0E00               	movlw	0
  6733  0000BA  21D3               	addwfc	(??_f_write+7)& (0+255),w,b
  6734  0000BC  6FD7               	movwf	(??_f_write+11)& (0+255),b
  6735  0000BE  50DE               	movf	postinc2,w,c
  6736  0000C0  5DD4               	subwf	(??_f_write+8)& (0+255),w,b
  6737  0000C2  50DE               	movf	postinc2,w,c
  6738  0000C4  59D5               	subwfb	(??_f_write+9)& (0+255),w,b
  6739  0000C6  50DE               	movf	postinc2,w,c
  6740  0000C8  59D6               	subwfb	(??_f_write+10)& (0+255),w,b
  6741  0000CA  50DE               	movf	postinc2,w,c
  6742  0000CC  59D7               	subwfb	(??_f_write+11)& (0+255),w,b
  6743  0000CE  A0D8               	btfss	status,0,c
  6744  0000D0  0012               	return	
  6745  0000D2  D23B               	goto	l1223
  6746  0000D4                     
  6747                           ; BSR set to: 0
  6748                           ;tff.c: 1014: if ((fp->fptr % 512U) == 0) {
  6749                           
  6750                           ; BSR set to: 0
  6751  0000D4  EE20 F006          	lfsr	2,6
  6752  0000D8  51C4               	movf	f_write@fp& (0+255),w,b
  6753  0000DA  26D9               	addwf	fsr2l,f,c
  6754  0000DC  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6755  0000DE  22DA               	addwfc	fsr2h,f,c
  6756  0000E0  0EFF               	movlw	255
  6757  0000E2  14DE               	andwf	postinc2,w,c
  6758  0000E4  6FCC               	movwf	??_f_write& (0+255),b
  6759  0000E6  0E01               	movlw	1
  6760  0000E8  14DE               	andwf	postinc2,w,c
  6761  0000EA  6FCD               	movwf	(??_f_write+1)& (0+255),b
  6762  0000EC  0E00               	movlw	0
  6763  0000EE  14DE               	andwf	postinc2,w,c
  6764  0000F0  6FCE               	movwf	(??_f_write+2)& (0+255),b
  6765  0000F2  0E00               	movlw	0
  6766  0000F4  14DE               	andwf	postinc2,w,c
  6767  0000F6  6FCF               	movwf	(??_f_write+3)& (0+255),b
  6768  0000F8  51CC               	movf	??_f_write& (0+255),w,b
  6769  0000FA  11CD               	iorwf	(??_f_write+1)& (0+255),w,b
  6770  0000FC  11CE               	iorwf	(??_f_write+2)& (0+255),w,b
  6771  0000FE  11CF               	iorwf	(??_f_write+3)& (0+255),w,b
  6772  000100  A4D8               	btfss	status,2,c
  6773  000102  D166               	goto	l1225
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;tff.c: 1015: if (fp->csect >= fp->fs->csize) {
  6777  000104  EE20 F004          	lfsr	2,4
  6778  000108  51C4               	movf	f_write@fp& (0+255),w,b
  6779  00010A  26D9               	addwf	fsr2l,f,c
  6780  00010C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6781  00010E  22DA               	addwfc	fsr2h,f,c
  6782  000110  EE10 F01D          	lfsr	1,29
  6783  000114  50DE               	movf	postinc2,w,c
  6784  000116  26E1               	addwf	fsr1l,f,c
  6785  000118  50DD               	movf	postdec2,w,c
  6786  00011A  22E2               	addwfc	fsr1h,f,c
  6787  00011C  EE20 F003          	lfsr	2,3
  6788  000120  51C4               	movf	f_write@fp& (0+255),w,b
  6789  000122  26D9               	addwf	fsr2l,f,c
  6790  000124  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6791  000126  22DA               	addwfc	fsr2h,f,c
  6792  000128  50E6               	movf	postinc1,w,c
  6793  00012A  5CDE               	subwf	postinc2,w,c
  6794  00012C  A0D8               	btfss	status,0,c
  6795  00012E  D06D               	goto	l1226
  6796                           
  6797                           ; BSR set to: 0
  6798                           ;tff.c: 1016: if (fp->fptr == 0) {
  6799  000130  EE20 F006          	lfsr	2,6
  6800  000134  51C4               	movf	f_write@fp& (0+255),w,b
  6801  000136  26D9               	addwf	fsr2l,f,c
  6802  000138  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6803  00013A  22DA               	addwfc	fsr2h,f,c
  6804  00013C  50DE               	movf	postinc2,w,c
  6805  00013E  10DE               	iorwf	postinc2,w,c
  6806  000140  10DE               	iorwf	postinc2,w,c
  6807  000142  10DE               	iorwf	postinc2,w,c
  6808  000144  A4D8               	btfss	status,2,c
  6809  000146  D024               	goto	l1227
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;tff.c: 1017: clust = fp->org_clust;
  6813  000148  EE20 F00E          	lfsr	2,14
  6814  00014C  51C4               	movf	f_write@fp& (0+255),w,b
  6815  00014E  26D9               	addwf	fsr2l,f,c
  6816  000150  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6817  000152  22DA               	addwfc	fsr2h,f,c
  6818  000154  CFDE F0E1          	movff	postinc2,f_write@clust
  6819  000158  CFDD F0E2          	movff	postdec2,f_write@clust+1
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;tff.c: 1018: if (clust == 0)
  6823  00015C  51E1               	movf	f_write@clust& (0+255),w,b
  6824  00015E  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  6825  000160  A4D8               	btfss	status,2,c
  6826  000162  D026               	goto	l1229
  6827                           
  6828                           ; BSR set to: 0
  6829                           ;tff.c: 1019: fp->org_clust = clust = create_chain(0);
  6830  000164  0E00               	movlw	0
  6831  000166  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
  6832  000168  0E00               	movlw	0
  6833  00016A  6FB6               	movwf	create_chain@clust& (0+255),b
  6834  00016C  ECCD  F015         	call	_create_chain	;wreg free
  6835  000170  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  6836  000174  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  6837  000178  0100               	movlb	0	; () banked
  6838  00017A  EE20 F00E          	lfsr	2,14
  6839  00017E  51C4               	movf	f_write@fp& (0+255),w,b
  6840  000180  26D9               	addwf	fsr2l,f,c
  6841  000182  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6842  000184  22DA               	addwfc	fsr2h,f,c
  6843  000186  C0E1  FFDE         	movff	f_write@clust,postinc2
  6844  00018A  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;tff.c: 1020: } else {
  6848  00018E  D010               	goto	l1229
  6849  000190                     l1227:
  6850                           
  6851                           ; BSR set to: 0
  6852                           ;tff.c: 1021: clust = create_chain(fp->curr_clust);
  6853                           
  6854                           ; BSR set to: 0
  6855  000190  EE20 F010          	lfsr	2,16
  6856  000194  51C4               	movf	f_write@fp& (0+255),w,b
  6857  000196  26D9               	addwf	fsr2l,f,c
  6858  000198  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6859  00019A  22DA               	addwfc	fsr2h,f,c
  6860  00019C  CFDE F0B6          	movff	postinc2,create_chain@clust
  6861  0001A0  CFDD F0B7          	movff	postdec2,create_chain@clust+1
  6862  0001A4  ECCD  F015         	call	_create_chain	;wreg free
  6863  0001A8  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  6864  0001AC  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  6865  0001B0                     l1229:
  6866                           
  6867                           ;tff.c: 1022: }
  6868                           ;tff.c: 1023: if (clust == 0) break;
  6869  0001B0  0100               	movlb	0	; () banked
  6870  0001B2  51E1               	movf	f_write@clust& (0+255),w,b
  6871  0001B4  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  6872  0001B6  B4D8               	btfsc	status,2,c
  6873  0001B8  D1CC               	goto	u11880
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;tff.c: 1024: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
  6877                           
  6878                           ; BSR set to: 0
  6879                           
  6880                           ; BSR set to: 0
  6881  0001BA  05E1               	decf	f_write@clust& (0+255),w,b
  6882  0001BC  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  6883  0001BE  B4D8               	btfsc	status,2,c
  6884  0001C0  D1FB               	goto	l1235
  6885                           
  6886                           ; BSR set to: 0
  6887  0001C2  EE20 F004          	lfsr	2,4
  6888  0001C6  51C4               	movf	f_write@fp& (0+255),w,b
  6889  0001C8  26D9               	addwf	fsr2l,f,c
  6890  0001CA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6891  0001CC  22DA               	addwfc	fsr2h,f,c
  6892  0001CE  EE10 F016          	lfsr	1,22
  6893  0001D2  50DE               	movf	postinc2,w,c
  6894  0001D4  26E1               	addwf	fsr1l,f,c
  6895  0001D6  50DD               	movf	postdec2,w,c
  6896  0001D8  22E2               	addwfc	fsr1h,f,c
  6897  0001DA  50E6               	movf	postinc1,w,c
  6898  0001DC  5DE1               	subwf	f_write@clust& (0+255),w,b
  6899  0001DE  50E6               	movf	postinc1,w,c
  6900  0001E0  59E2               	subwfb	(f_write@clust+1)& (0+255),w,b
  6901  0001E2  B0D8               	btfsc	status,0,c
  6902  0001E4  D1E9               	goto	l1235
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;tff.c: 1025: fp->curr_clust = clust;
  6906                           
  6907                           ; BSR set to: 0
  6908                           
  6909                           ; BSR set to: 0
  6910  0001E6  EE20 F010          	lfsr	2,16
  6911  0001EA  51C4               	movf	f_write@fp& (0+255),w,b
  6912  0001EC  26D9               	addwf	fsr2l,f,c
  6913  0001EE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6914  0001F0  22DA               	addwfc	fsr2h,f,c
  6915  0001F2  C0E1  FFDE         	movff	f_write@clust,postinc2
  6916  0001F6  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  6917                           
  6918                           ;tff.c: 1026: fp->csect = 0;
  6919  0001FA  EE20 F003          	lfsr	2,3
  6920  0001FE  51C4               	movf	f_write@fp& (0+255),w,b
  6921  000200  26D9               	addwf	fsr2l,f,c
  6922  000202  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6923  000204  22DA               	addwfc	fsr2h,f,c
  6924  000206  0E00               	movlw	0
  6925  000208  6EDF               	movwf	indf2,c
  6926  00020A                     l1226:
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;tff.c: 1027: }
  6930                           ;tff.c: 1028: sect = clust2sect(fp->curr_clust) + fp->csect;
  6931                           
  6932                           ; BSR set to: 0
  6933  00020A  EE20 F010          	lfsr	2,16
  6934  00020E  51C4               	movf	f_write@fp& (0+255),w,b
  6935  000210  26D9               	addwf	fsr2l,f,c
  6936  000212  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6937  000214  22DA               	addwfc	fsr2h,f,c
  6938  000216  CFDE F06C          	movff	postinc2,clust2sect@clust
  6939  00021A  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  6940  00021E  EC6B  F01D         	call	_clust2sect	;wreg free
  6941  000222  0100               	movlb	0	; () banked
  6942  000224  EE20 F003          	lfsr	2,3
  6943  000228  51C4               	movf	f_write@fp& (0+255),w,b
  6944  00022A  26D9               	addwf	fsr2l,f,c
  6945  00022C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6946  00022E  22DA               	addwfc	fsr2h,f,c
  6947  000230  50DF               	movf	indf2,w,c
  6948  000232  6FCC               	movwf	??_f_write& (0+255),b
  6949  000234  51CC               	movf	??_f_write& (0+255),w,b
  6950  000236  256C               	addwf	?_clust2sect& (0+255),w,b
  6951  000238  6FDB               	movwf	f_write@sect& (0+255),b
  6952  00023A  0E00               	movlw	0
  6953  00023C  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  6954  00023E  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  6955  000240  0E00               	movlw	0
  6956  000242  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  6957  000244  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  6958  000246  0E00               	movlw	0
  6959  000248  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  6960  00024A  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;tff.c: 1029: cc = btw / 512U;
  6964  00024C  C0C8  F0CC         	movff	f_write@btw,??_f_write
  6965  000250  C0C9  F0CD         	movff	f_write@btw+1,??_f_write+1
  6966  000254  0E09               	movlw	9
  6967  000256  6FCE               	movwf	(??_f_write+2)& (0+255),b
  6968  000258                     u11795:
  6969  000258  90D8               	bcf	status,0,c
  6970  00025A  33CD               	rrcf	(??_f_write+1)& (0+255),f,b
  6971  00025C  33CC               	rrcf	??_f_write& (0+255),f,b
  6972  00025E  2FCE               	decfsz	(??_f_write+2)& (0+255),f,b
  6973  000260  D7FB               	goto	u11795
  6974  000262  C0CC  F0DF         	movff	??_f_write,f_write@cc
  6975  000266  C0CD  F0E0         	movff	??_f_write+1,f_write@cc+1
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;tff.c: 1030: if (cc) {
  6979  00026A  51DF               	movf	f_write@cc& (0+255),w,b
  6980  00026C  11E0               	iorwf	(f_write@cc+1)& (0+255),w,b
  6981  00026E  B4D8               	btfsc	status,2,c
  6982  000270  D070               	goto	l1236
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;tff.c: 1031: if (fp->csect + cc > fp->fs->csize)
  6986  000272  EE20 F003          	lfsr	2,3
  6987  000276  51C4               	movf	f_write@fp& (0+255),w,b
  6988  000278  26D9               	addwf	fsr2l,f,c
  6989  00027A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  6990  00027C  22DA               	addwfc	fsr2h,f,c
  6991  00027E  50DF               	movf	indf2,w,c
  6992  000280  6FCC               	movwf	??_f_write& (0+255),b
  6993  000282  51CC               	movf	??_f_write& (0+255),w,b
  6994  000284  25DF               	addwf	f_write@cc& (0+255),w,b
  6995  000286  6FCD               	movwf	(??_f_write+1)& (0+255),b
  6996  000288  0E00               	movlw	0
  6997  00028A  21E0               	addwfc	(f_write@cc+1)& (0+255),w,b
  6998  00028C  6FCE               	movwf	(??_f_write+2)& (0+255),b
  6999  00028E  EE20 F004          	lfsr	2,4
  7000  000292  51C4               	movf	f_write@fp& (0+255),w,b
  7001  000294  26D9               	addwf	fsr2l,f,c
  7002  000296  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7003  000298  22DA               	addwfc	fsr2h,f,c
  7004  00029A  EE10 F01D          	lfsr	1,29
  7005  00029E  50DE               	movf	postinc2,w,c
  7006  0002A0  26E1               	addwf	fsr1l,f,c
  7007  0002A2  50DD               	movf	postdec2,w,c
  7008  0002A4  22E2               	addwfc	fsr1h,f,c
  7009  0002A6  50E7               	movf	indf1,w,c
  7010  0002A8  6FCF               	movwf	(??_f_write+3)& (0+255),b
  7011  0002AA  6BD0               	clrf	(??_f_write+4)& (0+255),b
  7012  0002AC  51CD               	movf	(??_f_write+1)& (0+255),w,b
  7013  0002AE  5DCF               	subwf	(??_f_write+3)& (0+255),w,b
  7014  0002B0  51CE               	movf	(??_f_write+2)& (0+255),w,b
  7015  0002B2  59D0               	subwfb	(??_f_write+4)& (0+255),w,b
  7016  0002B4  B0D8               	btfsc	status,0,c
  7017  0002B6  D021               	goto	l1237
  7018                           
  7019                           ; BSR set to: 0
  7020                           ;tff.c: 1032: cc = fp->fs->csize - fp->csect;
  7021  0002B8  EE20 F003          	lfsr	2,3
  7022  0002BC  51C4               	movf	f_write@fp& (0+255),w,b
  7023  0002BE  26D9               	addwf	fsr2l,f,c
  7024  0002C0  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7025  0002C2  22DA               	addwfc	fsr2h,f,c
  7026  0002C4  50DF               	movf	indf2,w,c
  7027  0002C6  6FCC               	movwf	??_f_write& (0+255),b
  7028  0002C8  6BCD               	clrf	(??_f_write+1)& (0+255),b
  7029  0002CA  1FCC               	comf	??_f_write& (0+255),f,b
  7030  0002CC  1FCD               	comf	(??_f_write+1)& (0+255),f,b
  7031  0002CE  4BCC               	infsnz	??_f_write& (0+255),f,b
  7032  0002D0  2BCD               	incf	(??_f_write+1)& (0+255),f,b
  7033  0002D2  EE20 F004          	lfsr	2,4
  7034  0002D6  51C4               	movf	f_write@fp& (0+255),w,b
  7035  0002D8  26D9               	addwf	fsr2l,f,c
  7036  0002DA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7037  0002DC  22DA               	addwfc	fsr2h,f,c
  7038  0002DE  EE10 F01D          	lfsr	1,29
  7039  0002E2  50DE               	movf	postinc2,w,c
  7040  0002E4  26E1               	addwf	fsr1l,f,c
  7041  0002E6  50DD               	movf	postdec2,w,c
  7042  0002E8  22E2               	addwfc	fsr1h,f,c
  7043  0002EA  50E7               	movf	indf1,w,c
  7044  0002EC  6FCE               	movwf	(??_f_write+2)& (0+255),b
  7045  0002EE  51CE               	movf	(??_f_write+2)& (0+255),w,b
  7046  0002F0  25CC               	addwf	??_f_write& (0+255),w,b
  7047  0002F2  6FDF               	movwf	f_write@cc& (0+255),b
  7048  0002F4  0E00               	movlw	0
  7049  0002F6  21CD               	addwfc	(??_f_write+1)& (0+255),w,b
  7050  0002F8  6FE0               	movwf	(f_write@cc+1)& (0+255),b
  7051  0002FA                     l1237:
  7052                           
  7053                           ; BSR set to: 0
  7054                           ;tff.c: 1033: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
  7055                           
  7056                           ; BSR set to: 0
  7057  0002FA  C0D9  F07F         	movff	f_write@wbuff,disk_write@buff
  7058  0002FE  C0DA  F080         	movff	f_write@wbuff+1,disk_write@buff+1
  7059  000302  C0DB  F081         	movff	f_write@sect,disk_write@sector
  7060  000306  C0DC  F082         	movff	f_write@sect+1,disk_write@sector+1
  7061  00030A  C0DD  F083         	movff	f_write@sect+2,disk_write@sector+2
  7062  00030E  C0DE  F084         	movff	f_write@sect+3,disk_write@sector+3
  7063  000312  C0DF  F085         	movff	f_write@cc,disk_write@count
  7064  000316  0E00               	movlw	0
  7065  000318  EC86  F020         	call	_disk_write
  7066  00031C  0900               	iorlw	0
  7067  00031E  A4D8               	btfss	status,2,c
  7068  000320  D14B               	goto	l1235
  7069                           
  7070                           ;tff.c: 1035: fp->csect += (BYTE)cc;
  7071                           
  7072                           ;tff.c: 1034: goto fw_error;
  7073  000322  0100               	movlb	0	; () banked
  7074  000324  EE20 F003          	lfsr	2,3
  7075  000328  51C4               	movf	f_write@fp& (0+255),w,b
  7076  00032A  26D9               	addwf	fsr2l,f,c
  7077  00032C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7078  00032E  22DA               	addwfc	fsr2h,f,c
  7079  000330  51DF               	movf	f_write@cc& (0+255),w,b
  7080  000332  26DF               	addwf	indf2,f,c
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;tff.c: 1036: wcnt = 512U * cc;
  7084  000334  C0DF  F0CC         	movff	f_write@cc,??_f_write
  7085  000338  C0E0  F0CD         	movff	f_write@cc+1,??_f_write+1
  7086  00033C  0E09               	movlw	9
  7087  00033E                     u11835:
  7088  00033E  90D8               	bcf	status,0,c
  7089  000340  37CC               	rlcf	??_f_write& (0+255),f,b
  7090  000342  37CD               	rlcf	(??_f_write+1)& (0+255),f,b
  7091  000344  2EE8               	decfsz	wreg,f,c
  7092  000346  D7FB               	goto	u11835
  7093  000348  C0CC  F0E3         	movff	??_f_write,f_write@wcnt
  7094  00034C  C0CD  F0E4         	movff	??_f_write+1,f_write@wcnt+1
  7095                           
  7096                           ;tff.c: 1037: continue;
  7097  000350  D0DF               	goto	l1239
  7098  000352                     l1236:
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;tff.c: 1038: }
  7102                           ;tff.c: 1039: if (fp->fptr >= fp->fsize) {
  7103                           
  7104                           ; BSR set to: 0
  7105  000352  EE20 F00A          	lfsr	2,10
  7106  000356  51C4               	movf	f_write@fp& (0+255),w,b
  7107  000358  26D9               	addwf	fsr2l,f,c
  7108  00035A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7109  00035C  22DA               	addwfc	fsr2h,f,c
  7110  00035E  EE10 F006          	lfsr	1,6
  7111  000362  51C4               	movf	f_write@fp& (0+255),w,b
  7112  000364  26E1               	addwf	fsr1l,f,c
  7113  000366  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7114  000368  22E2               	addwfc	fsr1h,f,c
  7115  00036A  50DE               	movf	postinc2,w,c
  7116  00036C  5CE6               	subwf	postinc1,w,c
  7117  00036E  50DE               	movf	postinc2,w,c
  7118  000370  58E6               	subwfb	postinc1,w,c
  7119  000372  50DE               	movf	postinc2,w,c
  7120  000374  58E6               	subwfb	postinc1,w,c
  7121  000376  50DE               	movf	postinc2,w,c
  7122  000378  58E6               	subwfb	postinc1,w,c
  7123  00037A  A0D8               	btfss	status,0,c
  7124  00037C  D022               	goto	l1240
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;tff.c: 1040: if (!move_window(0)) goto fw_error;
  7128  00037E  0E00               	movlw	0
  7129  000380  6F8B               	movwf	move_window@sector& (0+255),b
  7130  000382  0E00               	movlw	0
  7131  000384  6F8C               	movwf	(move_window@sector+1)& (0+255),b
  7132  000386  0E00               	movlw	0
  7133  000388  6F8D               	movwf	(move_window@sector+2)& (0+255),b
  7134  00038A  0E00               	movlw	0
  7135  00038C  6F8E               	movwf	(move_window@sector+3)& (0+255),b
  7136  00038E  ECAD  F016         	call	_move_window	;wreg free
  7137  000392  0900               	iorlw	0
  7138  000394  B4D8               	btfsc	status,2,c
  7139  000396  D110               	goto	l1235
  7140                           
  7141                           ;tff.c: 1041: fp->fs->winsect = sect;
  7142  000398  0100               	movlb	0	; () banked
  7143  00039A  EE20 F004          	lfsr	2,4
  7144  00039E  51C4               	movf	f_write@fp& (0+255),w,b
  7145  0003A0  26D9               	addwf	fsr2l,f,c
  7146  0003A2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7147  0003A4  22DA               	addwfc	fsr2h,f,c
  7148  0003A6  EE10 F004          	lfsr	1,4
  7149  0003AA  50DE               	movf	postinc2,w,c
  7150  0003AC  26E1               	addwf	fsr1l,f,c
  7151  0003AE  50DD               	movf	postdec2,w,c
  7152  0003B0  22E2               	addwfc	fsr1h,f,c
  7153  0003B2  C0DB  FFE6         	movff	f_write@sect,postinc1
  7154  0003B6  C0DC  FFE6         	movff	f_write@sect+1,postinc1
  7155  0003BA  C0DD  FFE6         	movff	f_write@sect+2,postinc1
  7156  0003BE  C0DE  FFE6         	movff	f_write@sect+3,postinc1
  7157  0003C2                     l1240:
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;tff.c: 1042: }
  7161                           ;tff.c: 1043: fp->csect++;
  7162                           
  7163                           ; BSR set to: 0
  7164  0003C2  EE20 F003          	lfsr	2,3
  7165  0003C6  51C4               	movf	f_write@fp& (0+255),w,b
  7166  0003C8  26D9               	addwf	fsr2l,f,c
  7167  0003CA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7168  0003CC  22DA               	addwfc	fsr2h,f,c
  7169  0003CE  2ADF               	incf	indf2,f,c
  7170  0003D0                     l1225:
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;tff.c: 1044: }
  7174                           ;tff.c: 1045: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  7175                           
  7176                           ; BSR set to: 0
  7177  0003D0  EE20 F010          	lfsr	2,16
  7178  0003D4  51C4               	movf	f_write@fp& (0+255),w,b
  7179  0003D6  26D9               	addwf	fsr2l,f,c
  7180  0003D8  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7181  0003DA  22DA               	addwfc	fsr2h,f,c
  7182  0003DC  CFDE F06C          	movff	postinc2,clust2sect@clust
  7183  0003E0  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  7184  0003E4  EC6B  F01D         	call	_clust2sect	;wreg free
  7185  0003E8  0100               	movlb	0	; () banked
  7186  0003EA  EE20 F003          	lfsr	2,3
  7187  0003EE  51C4               	movf	f_write@fp& (0+255),w,b
  7188  0003F0  26D9               	addwf	fsr2l,f,c
  7189  0003F2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7190  0003F4  22DA               	addwfc	fsr2h,f,c
  7191  0003F6  50DF               	movf	indf2,w,c
  7192  0003F8  6FCC               	movwf	??_f_write& (0+255),b
  7193  0003FA  51CC               	movf	??_f_write& (0+255),w,b
  7194  0003FC  256C               	addwf	?_clust2sect& (0+255),w,b
  7195  0003FE  6FCD               	movwf	(??_f_write+1)& (0+255),b
  7196  000400  0E00               	movlw	0
  7197  000402  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  7198  000404  6FCE               	movwf	(??_f_write+2)& (0+255),b
  7199  000406  0E00               	movlw	0
  7200  000408  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  7201  00040A  6FCF               	movwf	(??_f_write+3)& (0+255),b
  7202  00040C  0E00               	movlw	0
  7203  00040E  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  7204  000410  6FD0               	movwf	(??_f_write+4)& (0+255),b
  7205  000412  0EFF               	movlw	255
  7206  000414  25CD               	addwf	(??_f_write+1)& (0+255),w,b
  7207  000416  6FDB               	movwf	f_write@sect& (0+255),b
  7208  000418  0EFF               	movlw	255
  7209  00041A  21CE               	addwfc	(??_f_write+2)& (0+255),w,b
  7210  00041C  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  7211  00041E  0EFF               	movlw	255
  7212  000420  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
  7213  000422  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  7214  000424  0EFF               	movlw	255
  7215  000426  21D0               	addwfc	(??_f_write+4)& (0+255),w,b
  7216  000428  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;tff.c: 1046: if (!move_window(sect)) goto fw_error;
  7220  00042A  C0DB  F08B         	movff	f_write@sect,move_window@sector
  7221  00042E  C0DC  F08C         	movff	f_write@sect+1,move_window@sector+1
  7222  000432  C0DD  F08D         	movff	f_write@sect+2,move_window@sector+2
  7223  000436  C0DE  F08E         	movff	f_write@sect+3,move_window@sector+3
  7224  00043A  ECAD  F016         	call	_move_window	;wreg free
  7225  00043E  0900               	iorlw	0
  7226  000440  B4D8               	btfsc	status,2,c
  7227  000442  D0BA               	goto	l1235
  7228                           
  7229                           ;tff.c: 1047: wcnt = 512U - (fp->fptr % 512U);
  7230  000444  0EFF               	movlw	255
  7231  000446  0100               	movlb	0	; () banked
  7232  000448  6FCC               	movwf	??_f_write& (0+255),b
  7233  00044A  0E01               	movlw	1
  7234  00044C  6FCD               	movwf	(??_f_write+1)& (0+255),b
  7235  00044E  EE20 F006          	lfsr	2,6
  7236  000452  51C4               	movf	f_write@fp& (0+255),w,b
  7237  000454  26D9               	addwf	fsr2l,f,c
  7238  000456  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7239  000458  22DA               	addwfc	fsr2h,f,c
  7240  00045A  CFDE F0CE          	movff	postinc2,??_f_write+2
  7241  00045E  CFDD F0CF          	movff	postdec2,??_f_write+3
  7242  000462  51CC               	movf	??_f_write& (0+255),w,b
  7243  000464  17CE               	andwf	(??_f_write+2)& (0+255),f,b
  7244  000466  51CD               	movf	(??_f_write+1)& (0+255),w,b
  7245  000468  17CF               	andwf	(??_f_write+3)& (0+255),f,b
  7246  00046A  1FCE               	comf	(??_f_write+2)& (0+255),f,b
  7247  00046C  1FCF               	comf	(??_f_write+3)& (0+255),f,b
  7248  00046E  4BCE               	infsnz	(??_f_write+2)& (0+255),f,b
  7249  000470  2BCF               	incf	(??_f_write+3)& (0+255),f,b
  7250  000472  0E00               	movlw	0
  7251  000474  25CE               	addwf	(??_f_write+2)& (0+255),w,b
  7252  000476  6FE3               	movwf	f_write@wcnt& (0+255),b
  7253  000478  0E02               	movlw	2
  7254  00047A  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
  7255  00047C  6FE4               	movwf	(f_write@wcnt+1)& (0+255),b
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;tff.c: 1048: if (wcnt > btw) wcnt = btw;
  7259  00047E  51E3               	movf	f_write@wcnt& (0+255),w,b
  7260  000480  5DC8               	subwf	f_write@btw& (0+255),w,b
  7261  000482  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7262  000484  59C9               	subwfb	(f_write@btw+1)& (0+255),w,b
  7263  000486  B0D8               	btfsc	status,0,c
  7264  000488  D004               	goto	l1243
  7265                           
  7266                           ; BSR set to: 0
  7267  00048A  C0C8  F0E3         	movff	f_write@btw,f_write@wcnt
  7268  00048E  C0C9  F0E4         	movff	f_write@btw+1,f_write@wcnt+1
  7269  000492                     l1243:
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;tff.c: 1049: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
  7273                           
  7274                           ; BSR set to: 0
  7275  000492  0EFF               	movlw	255
  7276  000494  6FCC               	movwf	??_f_write& (0+255),b
  7277  000496  0E01               	movlw	1
  7278  000498  6FCD               	movwf	(??_f_write+1)& (0+255),b
  7279  00049A  EE20 F006          	lfsr	2,6
  7280  00049E  51C4               	movf	f_write@fp& (0+255),w,b
  7281  0004A0  26D9               	addwf	fsr2l,f,c
  7282  0004A2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7283  0004A4  22DA               	addwfc	fsr2h,f,c
  7284  0004A6  CFDE F0CE          	movff	postinc2,??_f_write+2
  7285  0004AA  CFDD F0CF          	movff	postdec2,??_f_write+3
  7286  0004AE  51CC               	movf	??_f_write& (0+255),w,b
  7287  0004B0  17CE               	andwf	(??_f_write+2)& (0+255),f,b
  7288  0004B2  51CD               	movf	(??_f_write+1)& (0+255),w,b
  7289  0004B4  17CF               	andwf	(??_f_write+3)& (0+255),f,b
  7290  0004B6  0E20               	movlw	32
  7291  0004B8  27CE               	addwf	(??_f_write+2)& (0+255),f,b
  7292  0004BA  0E00               	movlw	0
  7293  0004BC  23CF               	addwfc	(??_f_write+3)& (0+255),f,b
  7294  0004BE  EE20 F004          	lfsr	2,4
  7295  0004C2  51C4               	movf	f_write@fp& (0+255),w,b
  7296  0004C4  26D9               	addwf	fsr2l,f,c
  7297  0004C6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7298  0004C8  22DA               	addwfc	fsr2h,f,c
  7299  0004CA  CFDE F0D0          	movff	postinc2,??_f_write+4
  7300  0004CE  CFDD F0D1          	movff	postdec2,??_f_write+5
  7301  0004D2  51CE               	movf	(??_f_write+2)& (0+255),w,b
  7302  0004D4  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  7303  0004D6  6F60               	movwf	memcpy@d1& (0+255),b
  7304  0004D8  51CF               	movf	(??_f_write+3)& (0+255),w,b
  7305  0004DA  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  7306  0004DC  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  7307  0004DE  C0D9  F062         	movff	f_write@wbuff,memcpy@s1
  7308  0004E2  C0DA  F063         	movff	f_write@wbuff+1,memcpy@s1+1
  7309  0004E6  C0E3  F064         	movff	f_write@wcnt,memcpy@n
  7310  0004EA  C0E4  F065         	movff	f_write@wcnt+1,memcpy@n+1
  7311  0004EE  EC20  F024         	call	_memcpy	;wreg free
  7312                           
  7313                           ;tff.c: 1050: fp->fs->winflag = 1;
  7314  0004F2  0100               	movlb	0	; () banked
  7315  0004F4  EE20 F004          	lfsr	2,4
  7316  0004F8  51C4               	movf	f_write@fp& (0+255),w,b
  7317  0004FA  26D9               	addwf	fsr2l,f,c
  7318  0004FC  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7319  0004FE  22DA               	addwfc	fsr2h,f,c
  7320  000500  EE10 F01F          	lfsr	1,31
  7321  000504  50DE               	movf	postinc2,w,c
  7322  000506  26E1               	addwf	fsr1l,f,c
  7323  000508  50DD               	movf	postdec2,w,c
  7324  00050A  22E2               	addwfc	fsr1h,f,c
  7325  00050C  0E01               	movlw	1
  7326  00050E  6EE7               	movwf	indf1,c
  7327  000510                     l1239:
  7328                           
  7329                           ; BSR set to: 0
  7330                           
  7331                           ; BSR set to: 0
  7332  000510  51E3               	movf	f_write@wcnt& (0+255),w,b
  7333  000512  27D9               	addwf	f_write@wbuff& (0+255),f,b
  7334  000514  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7335  000516  23DA               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  7336                           
  7337                           ; BSR set to: 0
  7338  000518  EE20 F006          	lfsr	2,6
  7339  00051C  51C4               	movf	f_write@fp& (0+255),w,b
  7340  00051E  26D9               	addwf	fsr2l,f,c
  7341  000520  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7342  000522  22DA               	addwfc	fsr2h,f,c
  7343  000524  51E3               	movf	f_write@wcnt& (0+255),w,b
  7344  000526  26DE               	addwf	postinc2,f,c
  7345  000528  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7346  00052A  22DE               	addwfc	postinc2,f,c
  7347  00052C  0E00               	movlw	0
  7348  00052E  22DE               	addwfc	postinc2,f,c
  7349  000530  22DE               	addwfc	postinc2,f,c
  7350                           
  7351                           ; BSR set to: 0
  7352  000532  C0CA  FFD9         	movff	f_write@bw,fsr2l
  7353  000536  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  7354  00053A  51E3               	movf	f_write@wcnt& (0+255),w,b
  7355  00053C  26DE               	addwf	postinc2,f,c
  7356  00053E  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7357  000540  22DD               	addwfc	postdec2,f,c
  7358                           
  7359                           ; BSR set to: 0
  7360  000542  51E3               	movf	f_write@wcnt& (0+255),w,b
  7361  000544  5FC8               	subwf	f_write@btw& (0+255),f,b
  7362  000546  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  7363  000548  5BC9               	subwfb	(f_write@btw+1)& (0+255),f,b
  7364  00054A                     l1223:
  7365                           
  7366                           ; BSR set to: 0
  7367                           
  7368                           ; BSR set to: 0
  7369  00054A  51C8               	movf	f_write@btw& (0+255),w,b
  7370  00054C  11C9               	iorwf	(f_write@btw+1)& (0+255),w,b
  7371  00054E  A4D8               	btfss	status,2,c
  7372  000550  D5C1               	goto	l1224
  7373  000552                     u11880:
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;tff.c: 1051: }
  7377                           ;tff.c: 1053: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  7378                           
  7379                           ; BSR set to: 0
  7380  000552  EE20 F006          	lfsr	2,6
  7381  000556  51C4               	movf	f_write@fp& (0+255),w,b
  7382  000558  26D9               	addwf	fsr2l,f,c
  7383  00055A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7384  00055C  22DA               	addwfc	fsr2h,f,c
  7385  00055E  EE10 F00A          	lfsr	1,10
  7386  000562  51C4               	movf	f_write@fp& (0+255),w,b
  7387  000564  26E1               	addwf	fsr1l,f,c
  7388  000566  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7389  000568  22E2               	addwfc	fsr1h,f,c
  7390  00056A  50DE               	movf	postinc2,w,c
  7391  00056C  5CE6               	subwf	postinc1,w,c
  7392  00056E  50DE               	movf	postinc2,w,c
  7393  000570  58E6               	subwfb	postinc1,w,c
  7394  000572  50DE               	movf	postinc2,w,c
  7395  000574  58E6               	subwfb	postinc1,w,c
  7396  000576  50DE               	movf	postinc2,w,c
  7397  000578  58E6               	subwfb	postinc1,w,c
  7398  00057A  B0D8               	btfsc	status,0,c
  7399  00057C  D014               	goto	l1244
  7400                           
  7401                           ; BSR set to: 0
  7402  00057E  EE20 F006          	lfsr	2,6
  7403  000582  51C4               	movf	f_write@fp& (0+255),w,b
  7404  000584  26D9               	addwf	fsr2l,f,c
  7405  000586  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7406  000588  22DA               	addwfc	fsr2h,f,c
  7407  00058A  EE10 F00A          	lfsr	1,10
  7408  00058E  51C4               	movf	f_write@fp& (0+255),w,b
  7409  000590  26E1               	addwf	fsr1l,f,c
  7410  000592  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7411  000594  22E2               	addwfc	fsr1h,f,c
  7412  000596  CFDE FFE6          	movff	postinc2,postinc1
  7413  00059A  CFDE FFE6          	movff	postinc2,postinc1
  7414  00059E  CFDE FFE6          	movff	postinc2,postinc1
  7415  0005A2  CFDE FFE6          	movff	postinc2,postinc1
  7416  0005A6                     l1244:
  7417                           
  7418                           ; BSR set to: 0
  7419                           ;tff.c: 1054: fp->flag |= 0x20;
  7420                           
  7421                           ; BSR set to: 0
  7422  0005A6  EE20 F002          	lfsr	2,2
  7423  0005AA  51C4               	movf	f_write@fp& (0+255),w,b
  7424  0005AC  26D9               	addwf	fsr2l,f,c
  7425  0005AE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7426  0005B0  22DA               	addwfc	fsr2h,f,c
  7427  0005B2  0E00               	movlw	0
  7428  0005B4  8ADB               	bsf	plusw2,5,c
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;tff.c: 1055: return res;
  7432                           ;	Return value of _f_write is never used
  7433  0005B6  0012               	return	
  7434  0005B8                     l1235:
  7435                           
  7436                           ;tff.c: 1058: fp->flag |= 0x80;
  7437                           
  7438                           ; BSR set to: 0
  7439  0005B8  0100               	movlb	0	; () banked
  7440  0005BA  EE20 F002          	lfsr	2,2
  7441  0005BE  51C4               	movf	f_write@fp& (0+255),w,b
  7442  0005C0  26D9               	addwf	fsr2l,f,c
  7443  0005C2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  7444  0005C4  22DA               	addwfc	fsr2h,f,c
  7445  0005C6  0E00               	movlw	0
  7446  0005C8  8EDB               	bsf	plusw2,7,c
  7447  0005CA  0012               	return	
  7448  0005CC                     __end_of_f_write:
  7449                           	opt stack 0
  7450                           tosu	equ	0xFFF
  7451                           tosh	equ	0xFFE
  7452                           tosl	equ	0xFFD
  7453                           pclath	equ	0xFFA
  7454                           tblptru	equ	0xFF8
  7455                           tblptrh	equ	0xFF7
  7456                           tblptrl	equ	0xFF6
  7457                           tablat	equ	0xFF5
  7458                           prodh	equ	0xFF4
  7459                           prodl	equ	0xFF3
  7460                           intcon	equ	0xFF2
  7461                           intcon2	equ	0xFF1
  7462                           intcon3	equ	0xFF0
  7463                           postinc0	equ	0xFEE
  7464                           wreg	equ	0xFE8
  7465                           indf1	equ	0xFE7
  7466                           postinc1	equ	0xFE6
  7467                           postdec1	equ	0xFE5
  7468                           plusw1	equ	0xFE3
  7469                           fsr1h	equ	0xFE2
  7470                           fsr1l	equ	0xFE1
  7471                           indf2	equ	0xFDF
  7472                           postinc2	equ	0xFDE
  7473                           postdec2	equ	0xFDD
  7474                           plusw2	equ	0xFDB
  7475                           fsr2h	equ	0xFDA
  7476                           fsr2l	equ	0xFD9
  7477                           status	equ	0xFD8
  7478                           
  7479 ;; *************** function ___llmod *****************
  7480 ;; Defined at:
  7481 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  7482 ;; Parameters:    Size  Location     Type
  7483 ;;  dividend        4    0[BANK0 ] unsigned long 
  7484 ;;  divisor         4    4[BANK0 ] unsigned long 
  7485 ;; Auto vars:     Size  Location     Type
  7486 ;;  counter         1   32[COMRAM] unsigned char 
  7487 ;; Return value:  Size  Location     Type
  7488 ;;                  4    0[BANK0 ] unsigned long 
  7489 ;; Registers used:
  7490 ;;		wreg, status,2, status,0
  7491 ;; Tracked objects:
  7492 ;;		On entry : 0/0
  7493 ;;		On exit  : 0/0
  7494 ;;		Unchanged: 0/0
  7495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7496 ;;      Params:         0       8       0       0       0       0       0       0       0
  7497 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7498 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7499 ;;      Totals:         1       8       0       0       0       0       0       0       0
  7500 ;;Total ram usage:        9 bytes
  7501 ;; Hardware stack levels used:    1
  7502 ;; Hardware stack levels required when called:    3
  7503 ;; This function calls:
  7504 ;;		Nothing
  7505 ;; This function is called by:
  7506 ;;		_fprintf
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           	psect	text29
  7511  00447C                     __ptext29:
  7512                           	opt stack 0
  7513  00447C                     ___llmod:
  7514                           	opt stack 23
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;incstack = 0
  7518  00447C  0100               	movlb	0	; () banked
  7519  00447E  5164               	movf	___llmod@divisor& (0+255),w,b
  7520  004480  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  7521  004482  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  7522  004484  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  7523  004486  B4D8               	btfsc	status,2,c
  7524  004488  D024               	goto	l1808
  7525                           
  7526                           ; BSR set to: 0
  7527  00448A  0E01               	movlw	1
  7528  00448C  6E21               	movwf	___llmod@counter,c
  7529  00448E  D006               	goto	l1803
  7530  004490                     
  7531                           ; BSR set to: 0
  7532                           
  7533                           ; BSR set to: 0
  7534  004490  90D8               	bcf	status,0,c
  7535  004492  3764               	rlcf	___llmod@divisor& (0+255),f,b
  7536  004494  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  7537  004496  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  7538  004498  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  7539  00449A  2A21               	incf	___llmod@counter,f,c
  7540  00449C                     l1803:
  7541                           
  7542                           ; BSR set to: 0
  7543                           
  7544                           ; BSR set to: 0
  7545  00449C  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  7546  00449E  D7F8               	goto	l1804
  7547  0044A0                     u13140:
  7548                           
  7549                           ; BSR set to: 0
  7550                           
  7551                           ; BSR set to: 0
  7552                           
  7553                           ; BSR set to: 0
  7554  0044A0  5164               	movf	___llmod@divisor& (0+255),w,b
  7555  0044A2  5D60               	subwf	___llmod@dividend& (0+255),w,b
  7556  0044A4  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  7557  0044A6  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  7558  0044A8  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  7559  0044AA  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  7560  0044AC  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  7561  0044AE  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  7562  0044B0  A0D8               	btfss	status,0,c
  7563  0044B2  D008               	goto	l1807
  7564                           
  7565                           ; BSR set to: 0
  7566  0044B4  5164               	movf	___llmod@divisor& (0+255),w,b
  7567  0044B6  5F60               	subwf	___llmod@dividend& (0+255),f,b
  7568  0044B8  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  7569  0044BA  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  7570  0044BC  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  7571  0044BE  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  7572  0044C0  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  7573  0044C2  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  7574  0044C4                     l1807:
  7575                           
  7576                           ; BSR set to: 0
  7577                           
  7578                           ; BSR set to: 0
  7579  0044C4  90D8               	bcf	status,0,c
  7580  0044C6  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  7581  0044C8  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  7582  0044CA  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  7583  0044CC  3364               	rrcf	___llmod@divisor& (0+255),f,b
  7584                           
  7585                           ; BSR set to: 0
  7586  0044CE  2E21               	decfsz	___llmod@counter,f,c
  7587  0044D0  D7E7               	goto	u13140
  7588  0044D2                     l1808:
  7589                           
  7590                           ; BSR set to: 0
  7591                           
  7592                           ; BSR set to: 0
  7593  0044D2  C060  F060         	movff	___llmod@dividend,?___llmod
  7594  0044D6  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  7595  0044DA  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  7596  0044DE  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  7597                           
  7598                           ; BSR set to: 0
  7599  0044E2  0012               	return		;funcret
  7600  0044E4                     __end_of___llmod:
  7601                           	opt stack 0
  7602                           tosu	equ	0xFFF
  7603                           tosh	equ	0xFFE
  7604                           tosl	equ	0xFFD
  7605                           pclath	equ	0xFFA
  7606                           tblptru	equ	0xFF8
  7607                           tblptrh	equ	0xFF7
  7608                           tblptrl	equ	0xFF6
  7609                           tablat	equ	0xFF5
  7610                           prodh	equ	0xFF4
  7611                           prodl	equ	0xFF3
  7612                           intcon	equ	0xFF2
  7613                           intcon2	equ	0xFF1
  7614                           intcon3	equ	0xFF0
  7615                           postinc0	equ	0xFEE
  7616                           wreg	equ	0xFE8
  7617                           indf1	equ	0xFE7
  7618                           postinc1	equ	0xFE6
  7619                           postdec1	equ	0xFE5
  7620                           plusw1	equ	0xFE3
  7621                           fsr1h	equ	0xFE2
  7622                           fsr1l	equ	0xFE1
  7623                           indf2	equ	0xFDF
  7624                           postinc2	equ	0xFDE
  7625                           postdec2	equ	0xFDD
  7626                           plusw2	equ	0xFDB
  7627                           fsr2h	equ	0xFDA
  7628                           fsr2l	equ	0xFD9
  7629                           status	equ	0xFD8
  7630                           
  7631 ;; *************** function _f_open *****************
  7632 ;; Defined at:
  7633 ;;		line 825 in file "bibliotecas/tff.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;  fp              2  119[BANK0 ] PTR struct _FIL
  7636 ;;		 -> fil(28), 
  7637 ;;  path            2  121[BANK0 ] PTR const unsigned char 
  7638 ;;		 -> STR_19(13), filename(15), 
  7639 ;;  mode            1  123[BANK0 ] unsigned char 
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;  dw              4   14[BANK1 ] unsigned long 
  7642 ;;  rs              2   12[BANK1 ] unsigned short 
  7643 ;;  dj             14   21[BANK1 ] struct _DIR_E
  7644 ;;  fn             12    0[BANK1 ] unsigned char [12]
  7645 ;;  dir             2   19[BANK1 ] PTR unsigned char 
  7646 ;;		 -> NULL(0), fs(544), 
  7647 ;;  res             1   18[BANK1 ] enum E155
  7648 ;; Return value:  Size  Location     Type
  7649 ;;                  1    wreg      enum E3974
  7650 ;; Registers used:
  7651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7657 ;;      Params:         0       5       0       0       0       0       0       0       0
  7658 ;;      Locals:         0       0      35       0       0       0       0       0       0
  7659 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7660 ;;      Totals:         0       9      35       0       0       0       0       0       0
  7661 ;;Total ram usage:       44 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; Hardware stack levels required when called:   12
  7664 ;; This function calls:
  7665 ;;		_auto_mount
  7666 ;;		_get_fattime
  7667 ;;		_memcpy
  7668 ;;		_memset
  7669 ;;		_move_window
  7670 ;;		_remove_chain
  7671 ;;		_reserve_direntry
  7672 ;;		_trace_path
  7673 ;; This function is called by:
  7674 ;;		_escrita_sdcard
  7675 ;;		_sdcard_init
  7676 ;;		_leitura_sdcard
  7677 ;; This function uses a non-reentrant model
  7678 ;;
  7679                           
  7680                           	psect	text30
  7681  001366                     __ptext30:
  7682                           	opt stack 0
  7683  001366                     _f_open:
  7684                           	opt stack 15
  7685                           
  7686                           ;tff.c: 831: FRESULT res;
  7687                           ;tff.c: 832: DIR_E dj;
  7688                           ;tff.c: 833: BYTE *dir;
  7689                           ;tff.c: 834: char fn[8+3+1];
  7690                           ;tff.c: 837: fp->fs = (0);
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;incstack = 0
  7694  001366  0100               	movlb	0	; () banked
  7695  001368  EE20 F004          	lfsr	2,4
  7696  00136C  51D7               	movf	f_open@fp& (0+255),w,b
  7697  00136E  26D9               	addwf	fsr2l,f,c
  7698  001370  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  7699  001372  22DA               	addwfc	fsr2h,f,c
  7700  001374  0E00               	movlw	0
  7701  001376  6EDE               	movwf	postinc2,c
  7702  001378  0E00               	movlw	0
  7703  00137A  6EDD               	movwf	postdec2,c
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;tff.c: 839: mode &= (0x01|0x02|0x08|0x10|0x04);
  7707  00137C  0E1F               	movlw	31
  7708  00137E  17DB               	andwf	f_open@mode& (0+255),f,b
  7709                           
  7710                           ; BSR set to: 0
  7711                           ;tff.c: 840: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
  7712  001380  0ED9               	movlw	low f_open@path
  7713  001382  6F93               	movwf	auto_mount@path& (0+255),b
  7714  001384  0E00               	movlw	high f_open@path
  7715  001386  6F94               	movwf	(auto_mount@path+1)& (0+255),b
  7716  001388  51DB               	movf	f_open@mode& (0+255),w,b
  7717  00138A  0B1E               	andlw	30
  7718  00138C  6F95               	movwf	auto_mount@chk_wp& (0+255),b
  7719  00138E  ECE6  F002         	call	_auto_mount	;wreg free
  7720  001392  0101               	movlb	1	; () banked
  7721  001394  6FDE               	movwf	f_open@res& (0+255),b
  7722                           
  7723                           ; BSR set to: 1
  7724                           ;tff.c: 845: if (res != FR_OK) return res;
  7725  001396  51DE               	movf	f_open@res& (0+255),w,b
  7726  001398  B4D8               	btfsc	status,2,c
  7727  00139A  D002               	goto	l1168
  7728                           
  7729                           ; BSR set to: 1
  7730  00139C  51DE               	movf	f_open@res& (0+255),w,b
  7731                           
  7732                           ; BSR set to: 1
  7733  00139E  0012               	return	
  7734  0013A0                     l1168:
  7735                           
  7736                           ; BSR set to: 1
  7737                           ;tff.c: 846: res = trace_path(&dj, fn, path, &dir);
  7738                           
  7739                           ; BSR set to: 1
  7740  0013A0  0EE1               	movlw	low f_open@dj
  7741  0013A2  0100               	movlb	0	; () banked
  7742  0013A4  6FC0               	movwf	trace_path@dj& (0+255),b
  7743  0013A6  0E01               	movlw	high f_open@dj
  7744  0013A8  6FC1               	movwf	(trace_path@dj+1)& (0+255),b
  7745  0013AA  0ECC               	movlw	low f_open@fn
  7746  0013AC  6FC2               	movwf	trace_path@fn& (0+255),b
  7747  0013AE  0E01               	movlw	high f_open@fn
  7748  0013B0  6FC3               	movwf	(trace_path@fn+1)& (0+255),b
  7749  0013B2  C0D9  F0C4         	movff	f_open@path,trace_path@path
  7750  0013B6  C0DA  F0C5         	movff	f_open@path+1,trace_path@path+1
  7751  0013BA  0EDF               	movlw	low f_open@dir
  7752  0013BC  6FC6               	movwf	trace_path@dir& (0+255),b
  7753  0013BE  0E01               	movlw	high f_open@dir
  7754  0013C0  6FC7               	movwf	(trace_path@dir+1)& (0+255),b
  7755  0013C2  ECAD  F00E         	call	_trace_path	;wreg free
  7756  0013C6  0101               	movlb	1	; () banked
  7757  0013C8  6FDE               	movwf	f_open@res& (0+255),b
  7758                           
  7759                           ; BSR set to: 1
  7760                           ;tff.c: 850: if (mode & (0x08|0x10|0x04)) {
  7761  0013CA  C0DB  F0DC         	movff	f_open@mode,??_f_open
  7762  0013CE  0E1C               	movlw	28
  7763  0013D0  0100               	movlb	0	; () banked
  7764  0013D2  17DC               	andwf	??_f_open& (0+255),f,b
  7765  0013D4  B4D8               	btfsc	status,2,c
  7766  0013D6  D0F6               	goto	l1170
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;tff.c: 851: CLUST rs;
  7770                           ;tff.c: 852: DWORD dw;
  7771                           ;tff.c: 853: if (res != FR_OK) {
  7772  0013D8  0101               	movlb	1	; () banked
  7773  0013DA  51DE               	movf	f_open@res& (0+255),w,b
  7774  0013DC  B4D8               	btfsc	status,2,c
  7775  0013DE  D042               	goto	l1171
  7776                           
  7777                           ; BSR set to: 1
  7778                           ;tff.c: 854: if (res != FR_NO_FILE) return res;
  7779  0013E0  0E02               	movlw	2
  7780  0013E2  19DE               	xorwf	f_open@res& (0+255),w,b
  7781  0013E4  B4D8               	btfsc	status,2,c
  7782  0013E6  D002               	goto	l1172
  7783                           
  7784                           ; BSR set to: 1
  7785  0013E8  51DE               	movf	f_open@res& (0+255),w,b
  7786                           
  7787                           ; BSR set to: 1
  7788  0013EA  0012               	return	
  7789  0013EC                     l1172:
  7790                           
  7791                           ; BSR set to: 1
  7792                           ;tff.c: 855: res = reserve_direntry(&dj, &dir);
  7793                           
  7794                           ; BSR set to: 1
  7795  0013EC  0EE1               	movlw	low f_open@dj
  7796  0013EE  0100               	movlb	0	; () banked
  7797  0013F0  6FC4               	movwf	reserve_direntry@dj& (0+255),b
  7798  0013F2  0E01               	movlw	high f_open@dj
  7799  0013F4  6FC5               	movwf	(reserve_direntry@dj+1)& (0+255),b
  7800  0013F6  0EDF               	movlw	low f_open@dir
  7801  0013F8  6FC6               	movwf	reserve_direntry@dir& (0+255),b
  7802  0013FA  0E01               	movlw	high f_open@dir
  7803  0013FC  6FC7               	movwf	(reserve_direntry@dir+1)& (0+255),b
  7804  0013FE  EC03  F010         	call	_reserve_direntry	;wreg free
  7805  001402  0101               	movlb	1	; () banked
  7806  001404  6FDE               	movwf	f_open@res& (0+255),b
  7807                           
  7808                           ; BSR set to: 1
  7809                           ;tff.c: 856: if (res != FR_OK) return res;
  7810  001406  51DE               	movf	f_open@res& (0+255),w,b
  7811  001408  B4D8               	btfsc	status,2,c
  7812  00140A  D002               	goto	l1173
  7813                           
  7814                           ; BSR set to: 1
  7815  00140C  51DE               	movf	f_open@res& (0+255),w,b
  7816                           
  7817                           ; BSR set to: 1
  7818  00140E  0012               	return	
  7819  001410                     l1173:
  7820                           
  7821                           ; BSR set to: 1
  7822                           ;tff.c: 857: memset(dir, 0, 32);
  7823                           
  7824                           ; BSR set to: 1
  7825  001410  C1DF  F060         	movff	f_open@dir,memset@p1
  7826  001414  C1E0  F061         	movff	f_open@dir+1,memset@p1+1
  7827  001418  0E00               	movlw	0
  7828  00141A  0100               	movlb	0	; () banked
  7829  00141C  6F63               	movwf	(memset@c+1)& (0+255),b
  7830  00141E  0E00               	movlw	0
  7831  001420  6F62               	movwf	memset@c& (0+255),b
  7832  001422  0E00               	movlw	0
  7833  001424  6F65               	movwf	(memset@n+1)& (0+255),b
  7834  001426  0E20               	movlw	32
  7835  001428  6F64               	movwf	memset@n& (0+255),b
  7836  00142A  EC43  F025         	call	_memset	;wreg free
  7837                           
  7838                           ;tff.c: 858: memcpy(&dir[0], fn, 8+3);
  7839  00142E  C1DF  F060         	movff	f_open@dir,memcpy@d1
  7840  001432  C1E0  F061         	movff	f_open@dir+1,memcpy@d1+1
  7841  001436  0ECC               	movlw	low f_open@fn
  7842  001438  0100               	movlb	0	; () banked
  7843  00143A  6F62               	movwf	memcpy@s1& (0+255),b
  7844  00143C  0E01               	movlw	high f_open@fn
  7845  00143E  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  7846  001440  0E00               	movlw	0
  7847  001442  6F65               	movwf	(memcpy@n+1)& (0+255),b
  7848  001444  0E0B               	movlw	11
  7849  001446  6F64               	movwf	memcpy@n& (0+255),b
  7850  001448  EC20  F024         	call	_memcpy	;wreg free
  7851                           
  7852                           ;tff.c: 859: dir[12] = fn[11];
  7853  00144C  0101               	movlb	1	; () banked
  7854  00144E  EE20 F00C          	lfsr	2,12
  7855  001452  51DF               	movf	f_open@dir& (0+255),w,b
  7856  001454  26D9               	addwf	fsr2l,f,c
  7857  001456  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  7858  001458  22DA               	addwfc	fsr2h,f,c
  7859  00145A  C1D7  FFDF         	movff	f_open@fn+11,indf2
  7860                           
  7861                           ; BSR set to: 1
  7862                           ;tff.c: 860: mode |= 0x08;
  7863  00145E  0100               	movlb	0	; () banked
  7864  001460  87DB               	bsf	f_open@mode& (0+255),3,b
  7865                           
  7866                           ;tff.c: 861: }
  7867  001462  D080               	goto	l1179
  7868  001464                     l1171:
  7869                           
  7870                           ; BSR set to: 1
  7871                           ;tff.c: 862: else {
  7872                           ;tff.c: 863: if (mode & 0x04)
  7873  001464  0100               	movlb	0	; () banked
  7874  001466  A5DB               	btfss	f_open@mode& (0+255),2,b
  7875  001468  D002               	goto	l1175
  7876                           
  7877                           ; BSR set to: 0
  7878                           ;tff.c: 864: return FR_EXIST;
  7879  00146A  0E07               	movlw	7
  7880                           
  7881                           ; BSR set to: 0
  7882  00146C  0012               	return	
  7883  00146E                     l1175:
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;tff.c: 865: if (!dir || (dir[11] & (0x01|0x10)))
  7887                           
  7888                           ; BSR set to: 0
  7889  00146E  0101               	movlb	1	; () banked
  7890  001470  51DF               	movf	f_open@dir& (0+255),w,b
  7891  001472  11E0               	iorwf	(f_open@dir+1)& (0+255),w,b
  7892  001474  B4D8               	btfsc	status,2,c
  7893  001476  D00D               	goto	u13260
  7894                           
  7895                           ; BSR set to: 1
  7896  001478  EE20 F00B          	lfsr	2,11
  7897  00147C  51DF               	movf	f_open@dir& (0+255),w,b
  7898  00147E  26D9               	addwf	fsr2l,f,c
  7899  001480  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  7900  001482  22DA               	addwfc	fsr2h,f,c
  7901  001484  50DF               	movf	indf2,w,c
  7902  001486  0100               	movlb	0	; () banked
  7903  001488  6FDC               	movwf	??_f_open& (0+255),b
  7904  00148A  0E11               	movlw	17
  7905  00148C  17DC               	andwf	??_f_open& (0+255),f,b
  7906  00148E  B4D8               	btfsc	status,2,c
  7907  001490  D002               	goto	l1176
  7908  001492                     u13260:
  7909                           
  7910                           ;tff.c: 866: return FR_DENIED;
  7911                           
  7912                           ; BSR set to: 0
  7913  001492  0E06               	movlw	6
  7914  001494  0012               	return	
  7915  001496                     l1176:
  7916                           
  7917                           ; BSR set to: 0
  7918                           ;tff.c: 867: if (mode & 0x08) {
  7919  001496  A7DB               	btfss	f_open@mode& (0+255),3,b
  7920  001498  D065               	goto	l1179
  7921                           
  7922                           ; BSR set to: 0
  7923                           ;tff.c: 872: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  7924  00149A  0101               	movlb	1	; () banked
  7925  00149C  EE20 F01A          	lfsr	2,26
  7926  0014A0  51DF               	movf	f_open@dir& (0+255),w,b
  7927  0014A2  26D9               	addwf	fsr2l,f,c
  7928  0014A4  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  7929  0014A6  22DA               	addwfc	fsr2h,f,c
  7930  0014A8  CFDE F1D8          	movff	postinc2,f_open@rs
  7931  0014AC  CFDD F1D9          	movff	postdec2,f_open@rs+1
  7932                           
  7933                           ;tff.c: 874: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
  7934  0014B0  EE20 F01A          	lfsr	2,26
  7935  0014B4  51DF               	movf	f_open@dir& (0+255),w,b
  7936  0014B6  26D9               	addwf	fsr2l,f,c
  7937  0014B8  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  7938  0014BA  22DA               	addwfc	fsr2h,f,c
  7939  0014BC  0E00               	movlw	0
  7940  0014BE  6EDE               	movwf	postinc2,c
  7941  0014C0  0E00               	movlw	0
  7942  0014C2  6EDD               	movwf	postdec2,c
  7943                           
  7944                           ;tff.c: 875: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
  7945  0014C4  EE20 F01C          	lfsr	2,28
  7946  0014C8  51DF               	movf	f_open@dir& (0+255),w,b
  7947  0014CA  26D9               	addwf	fsr2l,f,c
  7948  0014CC  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  7949  0014CE  22DA               	addwfc	fsr2h,f,c
  7950  0014D0  6ADE               	clrf	postinc2,c
  7951  0014D2  6ADE               	clrf	postinc2,c
  7952  0014D4  6ADE               	clrf	postinc2,c
  7953  0014D6  6ADD               	clrf	postdec2,c
  7954                           
  7955                           ;tff.c: 876: dj.fs->winflag = 1;
  7956  0014D8  EE20 F01F          	lfsr	2,31
  7957  0014DC  51E5               	movf	(f_open@dj+4)& (0+255),w,b
  7958  0014DE  26D9               	addwf	fsr2l,f,c
  7959  0014E0  51E6               	movf	(f_open@dj+5)& (0+255),w,b
  7960  0014E2  22DA               	addwfc	fsr2h,f,c
  7961  0014E4  0E01               	movlw	1
  7962  0014E6  6EDF               	movwf	indf2,c
  7963                           
  7964                           ;tff.c: 877: dw = dj.fs->winsect;
  7965  0014E8  EE20 F004          	lfsr	2,4
  7966  0014EC  51E5               	movf	(f_open@dj+4)& (0+255),w,b
  7967  0014EE  26D9               	addwf	fsr2l,f,c
  7968  0014F0  51E6               	movf	(f_open@dj+5)& (0+255),w,b
  7969  0014F2  22DA               	addwfc	fsr2h,f,c
  7970  0014F4  CFDE F1DA          	movff	postinc2,f_open@dw
  7971  0014F8  CFDE F1DB          	movff	postinc2,f_open@dw+1
  7972  0014FC  CFDE F1DC          	movff	postinc2,f_open@dw+2
  7973  001500  CFDE F1DD          	movff	postinc2,f_open@dw+3
  7974                           
  7975                           ; BSR set to: 1
  7976                           ;tff.c: 878: if (!remove_chain(rs) || !move_window(dw))
  7977  001504  C1D8  F0B6         	movff	f_open@rs,remove_chain@clust
  7978  001508  C1D9  F0B7         	movff	f_open@rs+1,remove_chain@clust+1
  7979  00150C  EC1A  F01E         	call	_remove_chain	;wreg free
  7980  001510  0900               	iorlw	0
  7981  001512  B4D8               	btfsc	status,2,c
  7982  001514  D00D               	goto	u13290
  7983  001516  C1DA  F08B         	movff	f_open@dw,move_window@sector
  7984  00151A  C1DB  F08C         	movff	f_open@dw+1,move_window@sector+1
  7985  00151E  C1DC  F08D         	movff	f_open@dw+2,move_window@sector+2
  7986  001522  C1DD  F08E         	movff	f_open@dw+3,move_window@sector+3
  7987  001526  ECAD  F016         	call	_move_window	;wreg free
  7988  00152A  0900               	iorlw	0
  7989  00152C  A4D8               	btfss	status,2,c
  7990  00152E  D002               	goto	l1180
  7991  001530                     u13290:
  7992                           
  7993                           ;tff.c: 879: return FR_RW_ERROR;
  7994  001530  0E08               	movlw	8
  7995  001532  0012               	return	
  7996  001534                     l1180:
  7997                           
  7998                           ;tff.c: 880: dj.fs->last_clust = rs - 1;
  7999  001534  0EFF               	movlw	255
  8000  001536  0100               	movlb	0	; () banked
  8001  001538  6FDC               	movwf	??_f_open& (0+255),b
  8002  00153A  0EFF               	movlw	255
  8003  00153C  6FDD               	movwf	(??_f_open+1)& (0+255),b
  8004  00153E  C1D8  F0DE         	movff	f_open@rs,??_f_open+2
  8005  001542  C1D9  F0DF         	movff	f_open@rs+1,??_f_open+3
  8006  001546  51DC               	movf	??_f_open& (0+255),w,b
  8007  001548  27DE               	addwf	(??_f_open+2)& (0+255),f,b
  8008  00154A  51DD               	movf	(??_f_open+1)& (0+255),w,b
  8009  00154C  23DF               	addwfc	(??_f_open+3)& (0+255),f,b
  8010  00154E  0101               	movlb	1	; () banked
  8011  001550  EE20 F018          	lfsr	2,24
  8012  001554  51E5               	movf	(f_open@dj+4)& (0+255),w,b
  8013  001556  26D9               	addwf	fsr2l,f,c
  8014  001558  51E6               	movf	(f_open@dj+5)& (0+255),w,b
  8015  00155A  22DA               	addwfc	fsr2h,f,c
  8016  00155C  C0DE  FFDE         	movff	??_f_open+2,postinc2
  8017  001560  C0DF  FFDD         	movff	??_f_open+3,postdec2
  8018  001564                     l1179:
  8019                           
  8020                           ;tff.c: 881: }
  8021                           ;tff.c: 882: }
  8022                           ;tff.c: 883: if (mode & 0x08) {
  8023                           
  8024                           ; BSR set to: 1
  8025                           
  8026                           ; BSR set to: 1
  8027  001564  0100               	movlb	0	; () banked
  8028  001566  A7DB               	btfss	f_open@mode& (0+255),3,b
  8029  001568  D04F               	goto	l1189
  8030                           
  8031                           ; BSR set to: 0
  8032                           ;tff.c: 884: dir[11] = 0;
  8033  00156A  0101               	movlb	1	; () banked
  8034  00156C  EE20 F00B          	lfsr	2,11
  8035  001570  51DF               	movf	f_open@dir& (0+255),w,b
  8036  001572  26D9               	addwf	fsr2l,f,c
  8037  001574  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8038  001576  22DA               	addwfc	fsr2h,f,c
  8039  001578  0E00               	movlw	0
  8040  00157A  6EDF               	movwf	indf2,c
  8041                           
  8042                           ; BSR set to: 1
  8043                           ;tff.c: 885: dw = get_fattime();
  8044  00157C  EC14  F01C         	call	_get_fattime	;wreg free
  8045  001580  C060  F1DA         	movff	?_get_fattime,f_open@dw
  8046  001584  C061  F1DB         	movff	?_get_fattime+1,f_open@dw+1
  8047  001588  C062  F1DC         	movff	?_get_fattime+2,f_open@dw+2
  8048  00158C  C063  F1DD         	movff	?_get_fattime+3,f_open@dw+3
  8049                           
  8050                           ;tff.c: 886: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
  8051  001590  0101               	movlb	1	; () banked
  8052  001592  EE20 F00E          	lfsr	2,14
  8053  001596  51DF               	movf	f_open@dir& (0+255),w,b
  8054  001598  26D9               	addwf	fsr2l,f,c
  8055  00159A  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8056  00159C  22DA               	addwfc	fsr2h,f,c
  8057  00159E  C1DA  FFDE         	movff	f_open@dw,postinc2
  8058  0015A2  C1DB  FFDE         	movff	f_open@dw+1,postinc2
  8059  0015A6  C1DC  FFDE         	movff	f_open@dw+2,postinc2
  8060  0015AA  C1DD  FFDE         	movff	f_open@dw+3,postinc2
  8061                           
  8062                           ; BSR set to: 1
  8063                           ;tff.c: 887: dj.fs->winflag = 1;
  8064  0015AE  EE20 F01F          	lfsr	2,31
  8065  0015B2  51E5               	movf	(f_open@dj+4)& (0+255),w,b
  8066  0015B4  26D9               	addwf	fsr2l,f,c
  8067  0015B6  51E6               	movf	(f_open@dj+5)& (0+255),w,b
  8068  0015B8  22DA               	addwfc	fsr2h,f,c
  8069  0015BA  0E01               	movlw	1
  8070  0015BC  6EDF               	movwf	indf2,c
  8071                           
  8072                           ; BSR set to: 1
  8073                           ;tff.c: 888: mode |= 0x20;
  8074  0015BE  0100               	movlb	0	; () banked
  8075  0015C0  8BDB               	bsf	f_open@mode& (0+255),5,b
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;tff.c: 889: }
  8079                           ;tff.c: 890: }
  8080  0015C2  D022               	goto	l1189
  8081  0015C4                     l1170:
  8082                           
  8083                           ; BSR set to: 0
  8084                           ;tff.c: 892: else {
  8085                           ;tff.c: 894: if (res != FR_OK) return res;
  8086                           
  8087                           ; BSR set to: 0
  8088  0015C4  0101               	movlb	1	; () banked
  8089  0015C6  51DE               	movf	f_open@res& (0+255),w,b
  8090  0015C8  B4D8               	btfsc	status,2,c
  8091  0015CA  D002               	goto	l1185
  8092                           
  8093                           ; BSR set to: 1
  8094  0015CC  51DE               	movf	f_open@res& (0+255),w,b
  8095                           
  8096                           ; BSR set to: 1
  8097  0015CE  0012               	return	
  8098  0015D0                     l1185:
  8099                           
  8100                           ; BSR set to: 1
  8101                           ;tff.c: 895: if (!dir || (dir[11] & 0x10))
  8102                           
  8103                           ; BSR set to: 1
  8104  0015D0  51DF               	movf	f_open@dir& (0+255),w,b
  8105  0015D2  11E0               	iorwf	(f_open@dir+1)& (0+255),w,b
  8106  0015D4  B4D8               	btfsc	status,2,c
  8107  0015D6  D008               	goto	u13330
  8108                           
  8109                           ; BSR set to: 1
  8110  0015D8  EE20 F00B          	lfsr	2,11
  8111  0015DC  51DF               	movf	f_open@dir& (0+255),w,b
  8112  0015DE  26D9               	addwf	fsr2l,f,c
  8113  0015E0  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8114  0015E2  22DA               	addwfc	fsr2h,f,c
  8115  0015E4  A8DF               	btfss	indf2,4,c
  8116  0015E6  D002               	goto	l1186
  8117  0015E8                     u13330:
  8118                           
  8119                           ; BSR set to: 1
  8120                           ;tff.c: 896: return FR_NO_FILE;
  8121                           
  8122                           ; BSR set to: 1
  8123  0015E8  0E02               	movlw	2
  8124                           
  8125                           ; BSR set to: 1
  8126  0015EA  0012               	return	
  8127  0015EC                     l1186:
  8128                           
  8129                           ; BSR set to: 1
  8130                           ;tff.c: 898: if ((mode & 0x02) && (dir[11] & 0x01))
  8131  0015EC  0100               	movlb	0	; () banked
  8132  0015EE  A3DB               	btfss	f_open@mode& (0+255),1,b
  8133  0015F0  D00B               	goto	l1189
  8134                           
  8135                           ; BSR set to: 0
  8136  0015F2  0101               	movlb	1	; () banked
  8137  0015F4  EE20 F00B          	lfsr	2,11
  8138  0015F8  51DF               	movf	f_open@dir& (0+255),w,b
  8139  0015FA  26D9               	addwf	fsr2l,f,c
  8140  0015FC  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8141  0015FE  22DA               	addwfc	fsr2h,f,c
  8142  001600  A0DF               	btfss	indf2,0,c
  8143  001602  D002               	goto	l1189
  8144                           
  8145                           ; BSR set to: 1
  8146                           ;tff.c: 899: return FR_DENIED;
  8147  001604  0E06               	movlw	6
  8148                           
  8149                           ; BSR set to: 1
  8150  001606  0012               	return	
  8151  001608                     l1189:
  8152                           
  8153                           ;tff.c: 900: }
  8154                           ;tff.c: 901: fp->dir_sect = dj.fs->winsect;
  8155                           
  8156                           ; BSR set to: 1
  8157                           
  8158                           ; BSR set to: 1
  8159  001608  0101               	movlb	1	; () banked
  8160  00160A  EE20 F004          	lfsr	2,4
  8161  00160E  51E5               	movf	(f_open@dj+4)& (0+255),w,b
  8162  001610  26D9               	addwf	fsr2l,f,c
  8163  001612  51E6               	movf	(f_open@dj+5)& (0+255),w,b
  8164  001614  22DA               	addwfc	fsr2h,f,c
  8165  001616  0100               	movlb	0	; () banked
  8166  001618  EE10 F016          	lfsr	1,22
  8167  00161C  51D7               	movf	f_open@fp& (0+255),w,b
  8168  00161E  26E1               	addwf	fsr1l,f,c
  8169  001620  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8170  001622  22E2               	addwfc	fsr1h,f,c
  8171  001624  CFDE FFE6          	movff	postinc2,postinc1
  8172  001628  CFDE FFE6          	movff	postinc2,postinc1
  8173  00162C  CFDE FFE6          	movff	postinc2,postinc1
  8174  001630  CFDE FFE6          	movff	postinc2,postinc1
  8175                           
  8176                           ; BSR set to: 0
  8177                           ;tff.c: 902: fp->dir_ptr = dir;
  8178  001634  EE20 F01A          	lfsr	2,26
  8179  001638  51D7               	movf	f_open@fp& (0+255),w,b
  8180  00163A  26D9               	addwf	fsr2l,f,c
  8181  00163C  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8182  00163E  22DA               	addwfc	fsr2h,f,c
  8183  001640  C1DF  FFDE         	movff	f_open@dir,postinc2
  8184  001644  C1E0  FFDD         	movff	f_open@dir+1,postdec2
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;tff.c: 904: fp->flag = mode;
  8188  001648  EE20 F002          	lfsr	2,2
  8189  00164C  51D7               	movf	f_open@fp& (0+255),w,b
  8190  00164E  26D9               	addwf	fsr2l,f,c
  8191  001650  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8192  001652  22DA               	addwfc	fsr2h,f,c
  8193  001654  C0DB  FFDF         	movff	f_open@mode,indf2
  8194                           
  8195                           ;tff.c: 905: fp->org_clust =
  8196                           ;tff.c: 909: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  8197  001658  0101               	movlb	1	; () banked
  8198  00165A  EE20 F01A          	lfsr	2,26
  8199  00165E  51DF               	movf	f_open@dir& (0+255),w,b
  8200  001660  26D9               	addwf	fsr2l,f,c
  8201  001662  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8202  001664  22DA               	addwfc	fsr2h,f,c
  8203  001666  0100               	movlb	0	; () banked
  8204  001668  EE10 F00E          	lfsr	1,14
  8205  00166C  51D7               	movf	f_open@fp& (0+255),w,b
  8206  00166E  26E1               	addwf	fsr1l,f,c
  8207  001670  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8208  001672  22E2               	addwfc	fsr1h,f,c
  8209  001674  CFDE FFE6          	movff	postinc2,postinc1
  8210  001678  CFDD FFE5          	movff	postdec2,postdec1
  8211                           
  8212                           ;tff.c: 910: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
  8213  00167C  0101               	movlb	1	; () banked
  8214  00167E  EE20 F01C          	lfsr	2,28
  8215  001682  51DF               	movf	f_open@dir& (0+255),w,b
  8216  001684  26D9               	addwf	fsr2l,f,c
  8217  001686  51E0               	movf	(f_open@dir+1)& (0+255),w,b
  8218  001688  22DA               	addwfc	fsr2h,f,c
  8219  00168A  0100               	movlb	0	; () banked
  8220  00168C  EE10 F00A          	lfsr	1,10
  8221  001690  51D7               	movf	f_open@fp& (0+255),w,b
  8222  001692  26E1               	addwf	fsr1l,f,c
  8223  001694  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8224  001696  22E2               	addwfc	fsr1h,f,c
  8225  001698  CFDE FFE6          	movff	postinc2,postinc1
  8226  00169C  CFDE FFE6          	movff	postinc2,postinc1
  8227  0016A0  CFDE FFE6          	movff	postinc2,postinc1
  8228  0016A4  CFDE FFE6          	movff	postinc2,postinc1
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;tff.c: 911: fp->fptr = 0; fp->csect = 255;
  8232  0016A8  EE20 F006          	lfsr	2,6
  8233  0016AC  51D7               	movf	f_open@fp& (0+255),w,b
  8234  0016AE  26D9               	addwf	fsr2l,f,c
  8235  0016B0  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8236  0016B2  22DA               	addwfc	fsr2h,f,c
  8237  0016B4  6ADE               	clrf	postinc2,c
  8238  0016B6  6ADE               	clrf	postinc2,c
  8239  0016B8  6ADE               	clrf	postinc2,c
  8240  0016BA  6ADD               	clrf	postdec2,c
  8241                           
  8242                           ; BSR set to: 0
  8243  0016BC  EE20 F003          	lfsr	2,3
  8244  0016C0  51D7               	movf	f_open@fp& (0+255),w,b
  8245  0016C2  26D9               	addwf	fsr2l,f,c
  8246  0016C4  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8247  0016C6  22DA               	addwfc	fsr2h,f,c
  8248  0016C8  0EFF               	movlw	255
  8249  0016CA  6EDF               	movwf	indf2,c
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;tff.c: 912: fp->fs = dj.fs; fp->id = dj.fs->id;
  8253  0016CC  EE20 F004          	lfsr	2,4
  8254  0016D0  51D7               	movf	f_open@fp& (0+255),w,b
  8255  0016D2  26D9               	addwf	fsr2l,f,c
  8256  0016D4  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  8257  0016D6  22DA               	addwfc	fsr2h,f,c
  8258  0016D8  C1E5  FFDE         	movff	f_open@dj+4,postinc2
  8259  0016DC  C1E6  FFDD         	movff	f_open@dj+5,postdec2
  8260                           
  8261                           ; BSR set to: 0
  8262  0016E0  C1E5  FFD9         	movff	f_open@dj+4,fsr2l
  8263  0016E4  C1E6  FFDA         	movff	f_open@dj+5,fsr2h
  8264  0016E8  C0D7  FFE1         	movff	f_open@fp,fsr1l
  8265  0016EC  C0D8  FFE2         	movff	f_open@fp+1,fsr1h
  8266  0016F0  CFDE FFE6          	movff	postinc2,postinc1
  8267  0016F4  CFDD FFE5          	movff	postdec2,postdec1
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;tff.c: 914: return FR_OK;
  8271  0016F8  0E00               	movlw	0
  8272  0016FA  0012               	return	
  8273  0016FC                     __end_of_f_open:
  8274                           	opt stack 0
  8275                           tosu	equ	0xFFF
  8276                           tosh	equ	0xFFE
  8277                           tosl	equ	0xFFD
  8278                           pclath	equ	0xFFA
  8279                           tblptru	equ	0xFF8
  8280                           tblptrh	equ	0xFF7
  8281                           tblptrl	equ	0xFF6
  8282                           tablat	equ	0xFF5
  8283                           prodh	equ	0xFF4
  8284                           prodl	equ	0xFF3
  8285                           intcon	equ	0xFF2
  8286                           intcon2	equ	0xFF1
  8287                           intcon3	equ	0xFF0
  8288                           postinc0	equ	0xFEE
  8289                           wreg	equ	0xFE8
  8290                           indf1	equ	0xFE7
  8291                           postinc1	equ	0xFE6
  8292                           postdec1	equ	0xFE5
  8293                           plusw1	equ	0xFE3
  8294                           fsr1h	equ	0xFE2
  8295                           fsr1l	equ	0xFE1
  8296                           indf2	equ	0xFDF
  8297                           postinc2	equ	0xFDE
  8298                           postdec2	equ	0xFDD
  8299                           plusw2	equ	0xFDB
  8300                           fsr2h	equ	0xFDA
  8301                           fsr2l	equ	0xFD9
  8302                           status	equ	0xFD8
  8303                           
  8304 ;; *************** function _trace_path *****************
  8305 ;; Defined at:
  8306 ;;		line 501 in file "bibliotecas/tff.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;  dj              2   96[BANK0 ] PTR struct _DIR_E
  8309 ;;		 -> f_open@dj(14), 
  8310 ;;  fn              2   98[BANK0 ] PTR unsigned char 
  8311 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  8312 ;;  path            2  100[BANK0 ] PTR const unsigned char 
  8313 ;;		 -> STR_19(13), filename(15), 
  8314 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
  8315 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;  dptr            2  117[BANK0 ] PTR unsigned char 
  8318 ;;		 -> fs.win(512), NULL(0), fs(544), 
  8319 ;;  clust           2  114[BANK0 ] unsigned short 
  8320 ;;  fs              2  112[BANK0 ] PTR struct _FATFS
  8321 ;;		 -> NULL(0), fs(544), 
  8322 ;;  ds              1  116[BANK0 ] unsigned char 
  8323 ;; Return value:  Size  Location     Type
  8324 ;;                  1    wreg      enum E155
  8325 ;; Registers used:
  8326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8327 ;; Tracked objects:
  8328 ;;		On entry : 0/0
  8329 ;;		On exit  : 0/0
  8330 ;;		Unchanged: 0/0
  8331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8332 ;;      Params:         0       8       0       0       0       0       0       0       0
  8333 ;;      Locals:         0      11       0       0       0       0       0       0       0
  8334 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8335 ;;      Totals:         0      23       0       0       0       0       0       0       0
  8336 ;;Total ram usage:       23 bytes
  8337 ;; Hardware stack levels used:    1
  8338 ;; Hardware stack levels required when called:   11
  8339 ;; This function calls:
  8340 ;;		_clust2sect
  8341 ;;		_make_dirfile
  8342 ;;		_memcmp
  8343 ;;		_move_window
  8344 ;;		_next_dir_entry
  8345 ;; This function is called by:
  8346 ;;		_f_open
  8347 ;;		_f_opendir
  8348 ;; This function uses a non-reentrant model
  8349 ;;
  8350                           
  8351                           	psect	text31
  8352  001D5A                     __ptext31:
  8353                           	opt stack 0
  8354  001D5A                     _trace_path:
  8355                           	opt stack 15
  8356                           
  8357                           ;tff.c: 508: CLUST clust;
  8358                           ;tff.c: 509: char ds;
  8359                           ;tff.c: 510: BYTE *dptr = (0);
  8360                           
  8361                           ;incstack = 0
  8362  001D5A  0E00               	movlw	0
  8363  001D5C  0100               	movlb	0	; () banked
  8364  001D5E  6FD5               	movwf	trace_path@dptr& (0+255),b
  8365  001D60  0E00               	movlw	0
  8366  001D62  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
  8367                           
  8368                           ;tff.c: 511: FATFS *fs = FatFs;
  8369  001D64  C0FD  F0D0         	movff	_FatFs,trace_path@fs
  8370  001D68  C0FE  F0D1         	movff	_FatFs+1,trace_path@fs+1
  8371                           
  8372                           ; BSR set to: 0
  8373                           ;tff.c: 514: dj->fs = fs;
  8374  001D6C  EE20 F004          	lfsr	2,4
  8375  001D70  51C0               	movf	trace_path@dj& (0+255),w,b
  8376  001D72  26D9               	addwf	fsr2l,f,c
  8377  001D74  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8378  001D76  22DA               	addwfc	fsr2h,f,c
  8379  001D78  C0D0  FFDE         	movff	trace_path@fs,postinc2
  8380  001D7C  C0D1  FFDD         	movff	trace_path@fs+1,postdec2
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;tff.c: 515: clust = fs->dirbase;
  8384  001D80  EE20 F00C          	lfsr	2,12
  8385  001D84  51D0               	movf	trace_path@fs& (0+255),w,b
  8386  001D86  26D9               	addwf	fsr2l,f,c
  8387  001D88  51D1               	movf	(trace_path@fs+1)& (0+255),w,b
  8388  001D8A  22DA               	addwfc	fsr2h,f,c
  8389  001D8C  CFDE F0D2          	movff	postinc2,trace_path@clust
  8390  001D90  CFDD F0D3          	movff	postdec2,trace_path@clust+1
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;tff.c: 522: {
  8394                           ;tff.c: 523: dj->clust = dj->sclust = 0;
  8395  001D94  EE20 F006          	lfsr	2,6
  8396  001D98  51C0               	movf	trace_path@dj& (0+255),w,b
  8397  001D9A  26D9               	addwf	fsr2l,f,c
  8398  001D9C  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8399  001D9E  22DA               	addwfc	fsr2h,f,c
  8400  001DA0  0E00               	movlw	0
  8401  001DA2  6EDE               	movwf	postinc2,c
  8402  001DA4  0E00               	movlw	0
  8403  001DA6  6EDD               	movwf	postdec2,c
  8404  001DA8  EE10 F008          	lfsr	1,8
  8405  001DAC  51C0               	movf	trace_path@dj& (0+255),w,b
  8406  001DAE  26E1               	addwf	fsr1l,f,c
  8407  001DB0  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8408  001DB2  22E2               	addwfc	fsr1h,f,c
  8409  001DB4  CFDE FFE6          	movff	postinc2,postinc1
  8410  001DB8  CFDD FFE5          	movff	postdec2,postdec1
  8411                           
  8412                           ; BSR set to: 0
  8413                           ;tff.c: 524: dj->sect = clust;
  8414  001DBC  51D2               	movf	trace_path@clust& (0+255),w,b
  8415  001DBE  6FC8               	movwf	??_trace_path& (0+255),b
  8416  001DC0  51D3               	movf	(trace_path@clust+1)& (0+255),w,b
  8417  001DC2  6FC9               	movwf	(??_trace_path+1)& (0+255),b
  8418  001DC4  6BCA               	clrf	(??_trace_path+2)& (0+255),b
  8419  001DC6  6BCB               	clrf	(??_trace_path+3)& (0+255),b
  8420  001DC8  EE20 F00A          	lfsr	2,10
  8421  001DCC  51C0               	movf	trace_path@dj& (0+255),w,b
  8422  001DCE  26D9               	addwf	fsr2l,f,c
  8423  001DD0  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8424  001DD2  22DA               	addwfc	fsr2h,f,c
  8425  001DD4  C0C8  FFDE         	movff	??_trace_path,postinc2
  8426  001DD8  C0C9  FFDE         	movff	??_trace_path+1,postinc2
  8427  001DDC  C0CA  FFDE         	movff	??_trace_path+2,postinc2
  8428  001DE0  C0CB  FFDE         	movff	??_trace_path+3,postinc2
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;tff.c: 525: }
  8432                           ;tff.c: 526: dj->index = 0;
  8433  001DE4  EE20 F002          	lfsr	2,2
  8434  001DE8  51C0               	movf	trace_path@dj& (0+255),w,b
  8435  001DEA  26D9               	addwf	fsr2l,f,c
  8436  001DEC  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8437  001DEE  22DA               	addwfc	fsr2h,f,c
  8438  001DF0  0E00               	movlw	0
  8439  001DF2  6EDE               	movwf	postinc2,c
  8440  001DF4  0E00               	movlw	0
  8441  001DF6  6EDD               	movwf	postdec2,c
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;tff.c: 528: if (*path == '\0') {
  8445  001DF8  C0C4  FFF6         	movff	trace_path@path,tblptrl
  8446  001DFC  C0C5  FFF7         	movff	trace_path@path+1,tblptrh
  8447  001E00  6AF8               	clrf	tblptru,c
  8448  001E02  0E07               	movlw	(high __ramtop+-1)
  8449  001E04  64F7               	cpfsgt	tblptrh,c
  8450  001E06  D003               	bra	u12607
  8451  001E08  0008               	tblrd		*
  8452  001E0A  50F5               	movf	tablat,w,c
  8453  001E0C  D005               	bra	u12600
  8454  001E0E                     u12607:
  8455  001E0E  CFF6 FFE9          	movff	tblptrl,fsr0l
  8456  001E12  CFF7 FFEA          	movff	tblptrh,fsr0h
  8457  001E16  50EF               	movf	indf0,w,c
  8458  001E18                     u12600:
  8459  001E18  0900               	iorlw	0
  8460  001E1A  A4D8               	btfss	status,2,c
  8461  001E1C  D00A               	goto	l1080
  8462                           
  8463                           ;tff.c: 529: *dir = (0); return FR_OK;
  8464  001E1E  C0C6  FFD9         	movff	trace_path@dir,fsr2l
  8465  001E22  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
  8466  001E26  0E00               	movlw	0
  8467  001E28  6EDE               	movwf	postinc2,c
  8468  001E2A  0E00               	movlw	0
  8469  001E2C  6EDD               	movwf	postdec2,c
  8470  001E2E  0E00               	movlw	0
  8471  001E30  0012               	return	
  8472  001E32                     l1080:
  8473                           
  8474                           ;tff.c: 533: ds = make_dirfile(&path, fn);
  8475                           
  8476                           ;tff.c: 530: }
  8477                           ;tff.c: 532: for (;;) {
  8478  001E32  0EC4               	movlw	low trace_path@path
  8479  001E34  0100               	movlb	0	; () banked
  8480  001E36  6F68               	movwf	make_dirfile@path& (0+255),b
  8481  001E38  0E00               	movlw	high trace_path@path
  8482  001E3A  6F69               	movwf	(make_dirfile@path+1)& (0+255),b
  8483  001E3C  C0C2  F06A         	movff	trace_path@fn,make_dirfile@dirname
  8484  001E40  C0C3  F06B         	movff	trace_path@fn+1,make_dirfile@dirname+1
  8485  001E44  EC4C  F018         	call	_make_dirfile	;wreg free
  8486  001E48  0100               	movlb	0	; () banked
  8487  001E4A  6FD4               	movwf	trace_path@ds& (0+255),b
  8488                           
  8489                           ; BSR set to: 0
  8490                           ;tff.c: 534: if (ds == 1) return FR_INVALID_NAME;
  8491  001E4C  05D4               	decf	trace_path@ds& (0+255),w,b
  8492  001E4E  A4D8               	btfss	status,2,c
  8493  001E50  D002               	goto	l1083
  8494                           
  8495                           ; BSR set to: 0
  8496  001E52  0E04               	movlw	4
  8497                           
  8498                           ; BSR set to: 0
  8499  001E54  0012               	return	
  8500  001E56                     l1083:
  8501                           
  8502                           ;tff.c: 536: if (!move_window(dj->sect)) return FR_RW_ERROR;
  8503                           
  8504                           ; BSR set to: 0
  8505                           
  8506                           ;tff.c: 535: for (;;) {
  8507                           
  8508                           ; BSR set to: 0
  8509  001E56  0100               	movlb	0	; () banked
  8510  001E58  EE20 F00A          	lfsr	2,10
  8511  001E5C  51C0               	movf	trace_path@dj& (0+255),w,b
  8512  001E5E  26D9               	addwf	fsr2l,f,c
  8513  001E60  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8514  001E62  22DA               	addwfc	fsr2h,f,c
  8515  001E64  CFDE F08B          	movff	postinc2,move_window@sector
  8516  001E68  CFDE F08C          	movff	postinc2,move_window@sector+1
  8517  001E6C  CFDE F08D          	movff	postinc2,move_window@sector+2
  8518  001E70  CFDE F08E          	movff	postinc2,move_window@sector+3
  8519  001E74  ECAD  F016         	call	_move_window	;wreg free
  8520  001E78  0900               	iorlw	0
  8521  001E7A  A4D8               	btfss	status,2,c
  8522  001E7C  D002               	goto	l1085
  8523  001E7E  0E08               	movlw	8
  8524  001E80  0012               	return	
  8525  001E82                     l1085:
  8526                           
  8527                           ;tff.c: 537: dptr = &fs->win[(dj->index & 15) * 32];
  8528  001E82  0100               	movlb	0	; () banked
  8529  001E84  EE20 F002          	lfsr	2,2
  8530  001E88  51C0               	movf	trace_path@dj& (0+255),w,b
  8531  001E8A  26D9               	addwf	fsr2l,f,c
  8532  001E8C  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8533  001E8E  22DA               	addwfc	fsr2h,f,c
  8534  001E90  CFDE F0C8          	movff	postinc2,??_trace_path
  8535  001E94  CFDD F0C9          	movff	postdec2,??_trace_path+1
  8536  001E98  0E0F               	movlw	15
  8537  001E9A  17C8               	andwf	??_trace_path& (0+255),f,b
  8538  001E9C  0E00               	movlw	0
  8539  001E9E  17C9               	andwf	(??_trace_path+1)& (0+255),f,b
  8540  001EA0  0E05               	movlw	5
  8541  001EA2                     u12645:
  8542  001EA2  90D8               	bcf	status,0,c
  8543  001EA4  37C8               	rlcf	??_trace_path& (0+255),f,b
  8544  001EA6  37C9               	rlcf	(??_trace_path+1)& (0+255),f,b
  8545  001EA8  2EE8               	decfsz	wreg,f,c
  8546  001EAA  D7FB               	goto	u12645
  8547  001EAC  0E20               	movlw	32
  8548  001EAE  27C8               	addwf	??_trace_path& (0+255),f,b
  8549  001EB0  0E00               	movlw	0
  8550  001EB2  23C9               	addwfc	(??_trace_path+1)& (0+255),f,b
  8551  001EB4  51C8               	movf	??_trace_path& (0+255),w,b
  8552  001EB6  25D0               	addwf	trace_path@fs& (0+255),w,b
  8553  001EB8  6FD5               	movwf	trace_path@dptr& (0+255),b
  8554  001EBA  51C9               	movf	(??_trace_path+1)& (0+255),w,b
  8555  001EBC  21D1               	addwfc	(trace_path@fs+1)& (0+255),w,b
  8556  001EBE  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;tff.c: 538: if (dptr[0] == 0)
  8560  001EC0  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
  8561  001EC4  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
  8562  001EC8  50DF               	movf	indf2,w,c
  8563  001ECA  A4D8               	btfss	status,2,c
  8564  001ECC  D00D               	goto	l1086
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;tff.c: 539: return !ds ? FR_NO_FILE : FR_NO_PATH;
  8568  001ECE  51D4               	movf	trace_path@ds& (0+255),w,b
  8569  001ED0  B4D8               	btfsc	status,2,c
  8570  001ED2  D004               	goto	l1088
  8571                           
  8572                           ; BSR set to: 0
  8573  001ED4  0E00               	movlw	0
  8574  001ED6  6FCD               	movwf	(_trace_path$2046+1)& (0+255),b
  8575  001ED8  0E03               	movlw	3
  8576  001EDA  D003               	goto	L6
  8577  001EDC                     l1088:
  8578                           
  8579                           ; BSR set to: 0
  8580                           
  8581                           ; BSR set to: 0
  8582  001EDC  0E00               	movlw	0
  8583  001EDE  6FCD               	movwf	(_trace_path$2046+1)& (0+255),b
  8584  001EE0  0E02               	movlw	2
  8585  001EE2                     L6:
  8586  001EE2  6FCC               	movwf	_trace_path$2046& (0+255),b
  8587                           
  8588                           ; BSR set to: 0
  8589  001EE4  51CC               	movf	_trace_path$2046& (0+255),w,b
  8590                           
  8591                           ; BSR set to: 0
  8592  001EE6  0012               	return	
  8593  001EE8                     l1086:
  8594                           
  8595                           ; BSR set to: 0
  8596                           ;tff.c: 540: if (dptr[0] != 0xE5
  8597                           ;tff.c: 541: && !(dptr[11] & 0x08)
  8598                           ;tff.c: 542: && !memcmp(&dptr[0], fn, 8+3) ) break;
  8599                           
  8600                           ; BSR set to: 0
  8601  001EE8  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
  8602  001EEC  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
  8603  001EF0  0EE5               	movlw	229
  8604  001EF2  18DE               	xorwf	postinc2,w,c
  8605  001EF4  B4D8               	btfsc	status,2,c
  8606  001EF6  D01B               	goto	l1091
  8607                           
  8608                           ; BSR set to: 0
  8609  001EF8  EE20 F00B          	lfsr	2,11
  8610  001EFC  51D5               	movf	trace_path@dptr& (0+255),w,b
  8611  001EFE  26D9               	addwf	fsr2l,f,c
  8612  001F00  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  8613  001F02  22DA               	addwfc	fsr2h,f,c
  8614  001F04  B6DF               	btfsc	indf2,3,c
  8615  001F06  D013               	goto	l1091
  8616                           
  8617                           ; BSR set to: 0
  8618  001F08  C0D5  F060         	movff	trace_path@dptr,memcmp@s1
  8619  001F0C  C0D6  F061         	movff	trace_path@dptr+1,memcmp@s1+1
  8620  001F10  C0C2  F062         	movff	trace_path@fn,memcmp@s2
  8621  001F14  C0C3  F063         	movff	trace_path@fn+1,memcmp@s2+1
  8622  001F18  0E00               	movlw	0
  8623  001F1A  6F65               	movwf	(memcmp@n+1)& (0+255),b
  8624  001F1C  0E0B               	movlw	11
  8625  001F1E  6F64               	movwf	memcmp@n& (0+255),b
  8626  001F20  EC11  F01F         	call	_memcmp	;wreg free
  8627  001F24  0100               	movlb	0	; () banked
  8628  001F26  5160               	movf	?_memcmp& (0+255),w,b
  8629  001F28  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
  8630  001F2A  B4D8               	btfsc	status,2,c
  8631  001F2C  D017               	goto	l1092
  8632  001F2E                     l1091:
  8633                           
  8634                           ; BSR set to: 0
  8635                           ;tff.c: 543: if (!next_dir_entry(dj))
  8636                           
  8637                           ; BSR set to: 0
  8638  001F2E  C0C0  F0B3         	movff	trace_path@dj,next_dir_entry@dj
  8639  001F32  C0C1  F0B4         	movff	trace_path@dj+1,next_dir_entry@dj+1
  8640  001F36  EC88  F017         	call	_next_dir_entry	;wreg free
  8641  001F3A  0900               	iorlw	0
  8642  001F3C  A4D8               	btfss	status,2,c
  8643  001F3E  D78B               	goto	l1083
  8644                           
  8645                           ;tff.c: 544: return !ds ? FR_NO_FILE : FR_NO_PATH;
  8646  001F40  0100               	movlb	0	; () banked
  8647  001F42  51D4               	movf	trace_path@ds& (0+255),w,b
  8648  001F44  B4D8               	btfsc	status,2,c
  8649  001F46  D004               	goto	l1095
  8650                           
  8651                           ; BSR set to: 0
  8652  001F48  0E00               	movlw	0
  8653  001F4A  6FCF               	movwf	(_trace_path$2048+1)& (0+255),b
  8654  001F4C  0E03               	movlw	3
  8655  001F4E  D003               	goto	L7
  8656  001F50                     l1095:
  8657                           
  8658                           ; BSR set to: 0
  8659                           
  8660                           ; BSR set to: 0
  8661  001F50  0E00               	movlw	0
  8662  001F52  6FCF               	movwf	(_trace_path$2048+1)& (0+255),b
  8663  001F54  0E02               	movlw	2
  8664  001F56                     L7:
  8665  001F56  6FCE               	movwf	_trace_path$2048& (0+255),b
  8666                           
  8667                           ; BSR set to: 0
  8668  001F58  51CE               	movf	_trace_path$2048& (0+255),w,b
  8669                           
  8670                           ; BSR set to: 0
  8671  001F5A  0012               	return	
  8672  001F5C                     l1092:
  8673                           
  8674                           ; BSR set to: 0
  8675                           ;tff.c: 546: if (!ds) { *dir = dptr; return FR_OK; }
  8676                           
  8677                           ; BSR set to: 0
  8678  001F5C  51D4               	movf	trace_path@ds& (0+255),w,b
  8679  001F5E  A4D8               	btfss	status,2,c
  8680  001F60  D00A               	goto	l1098
  8681                           
  8682                           ; BSR set to: 0
  8683  001F62  C0C6  FFD9         	movff	trace_path@dir,fsr2l
  8684  001F66  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
  8685  001F6A  C0D5  FFDE         	movff	trace_path@dptr,postinc2
  8686  001F6E  C0D6  FFDD         	movff	trace_path@dptr+1,postdec2
  8687                           
  8688                           ; BSR set to: 0
  8689  001F72  0E00               	movlw	0
  8690                           
  8691                           ; BSR set to: 0
  8692  001F74  0012               	return	
  8693  001F76                     l1098:
  8694                           
  8695                           ; BSR set to: 0
  8696                           ;tff.c: 547: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
  8697                           
  8698                           ; BSR set to: 0
  8699  001F76  EE20 F00B          	lfsr	2,11
  8700  001F7A  51D5               	movf	trace_path@dptr& (0+255),w,b
  8701  001F7C  26D9               	addwf	fsr2l,f,c
  8702  001F7E  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  8703  001F80  22DA               	addwfc	fsr2h,f,c
  8704  001F82  B8DF               	btfsc	indf2,4,c
  8705  001F84  D002               	goto	l1099
  8706                           
  8707                           ; BSR set to: 0
  8708  001F86  0E03               	movlw	3
  8709                           
  8710                           ; BSR set to: 0
  8711  001F88  0012               	return	
  8712  001F8A                     l1099:
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;tff.c: 548: clust =
  8716                           ;tff.c: 552: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
  8717                           
  8718                           ; BSR set to: 0
  8719  001F8A  EE20 F01A          	lfsr	2,26
  8720  001F8E  51D5               	movf	trace_path@dptr& (0+255),w,b
  8721  001F90  26D9               	addwf	fsr2l,f,c
  8722  001F92  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  8723  001F94  22DA               	addwfc	fsr2h,f,c
  8724  001F96  CFDE F0D2          	movff	postinc2,trace_path@clust
  8725  001F9A  CFDD F0D3          	movff	postdec2,trace_path@clust+1
  8726                           
  8727                           ; BSR set to: 0
  8728                           ;tff.c: 553: dj->clust = dj->sclust = clust;
  8729  001F9E  EE20 F006          	lfsr	2,6
  8730  001FA2  51C0               	movf	trace_path@dj& (0+255),w,b
  8731  001FA4  26D9               	addwf	fsr2l,f,c
  8732  001FA6  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8733  001FA8  22DA               	addwfc	fsr2h,f,c
  8734  001FAA  C0D2  FFDE         	movff	trace_path@clust,postinc2
  8735  001FAE  C0D3  FFDD         	movff	trace_path@clust+1,postdec2
  8736  001FB2  EE10 F008          	lfsr	1,8
  8737  001FB6  51C0               	movf	trace_path@dj& (0+255),w,b
  8738  001FB8  26E1               	addwf	fsr1l,f,c
  8739  001FBA  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8740  001FBC  22E2               	addwfc	fsr1h,f,c
  8741  001FBE  CFDE FFE6          	movff	postinc2,postinc1
  8742  001FC2  CFDD FFE5          	movff	postdec2,postdec1
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;tff.c: 554: dj->sect = clust2sect(clust);
  8746  001FC6  C0D2  F06C         	movff	trace_path@clust,clust2sect@clust
  8747  001FCA  C0D3  F06D         	movff	trace_path@clust+1,clust2sect@clust+1
  8748  001FCE  EC6B  F01D         	call	_clust2sect	;wreg free
  8749  001FD2  0100               	movlb	0	; () banked
  8750  001FD4  EE20 F00A          	lfsr	2,10
  8751  001FD8  51C0               	movf	trace_path@dj& (0+255),w,b
  8752  001FDA  26D9               	addwf	fsr2l,f,c
  8753  001FDC  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8754  001FDE  22DA               	addwfc	fsr2h,f,c
  8755  001FE0  C06C  FFDE         	movff	?_clust2sect,postinc2
  8756  001FE4  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  8757  001FE8  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  8758  001FEC  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;tff.c: 555: dj->index = 2;
  8762  001FF0  EE20 F002          	lfsr	2,2
  8763  001FF4  51C0               	movf	trace_path@dj& (0+255),w,b
  8764  001FF6  26D9               	addwf	fsr2l,f,c
  8765  001FF8  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  8766  001FFA  22DA               	addwfc	fsr2h,f,c
  8767  001FFC  0E02               	movlw	2
  8768  001FFE  6EDE               	movwf	postinc2,c
  8769  002000  0E00               	movlw	0
  8770  002002  6EDD               	movwf	postdec2,c
  8771                           
  8772                           ;tff.c: 556: }
  8773  002004  D716               	goto	l1080
  8774  002006                     __end_of_trace_path:
  8775                           	opt stack 0
  8776                           tosu	equ	0xFFF
  8777                           tosh	equ	0xFFE
  8778                           tosl	equ	0xFFD
  8779                           pclath	equ	0xFFA
  8780                           tblptru	equ	0xFF8
  8781                           tblptrh	equ	0xFF7
  8782                           tblptrl	equ	0xFF6
  8783                           tablat	equ	0xFF5
  8784                           prodh	equ	0xFF4
  8785                           prodl	equ	0xFF3
  8786                           intcon	equ	0xFF2
  8787                           intcon2	equ	0xFF1
  8788                           intcon3	equ	0xFF0
  8789                           indf0	equ	0xFEF
  8790                           postinc0	equ	0xFEE
  8791                           fsr0h	equ	0xFEA
  8792                           fsr0l	equ	0xFE9
  8793                           wreg	equ	0xFE8
  8794                           indf1	equ	0xFE7
  8795                           postinc1	equ	0xFE6
  8796                           postdec1	equ	0xFE5
  8797                           plusw1	equ	0xFE3
  8798                           fsr1h	equ	0xFE2
  8799                           fsr1l	equ	0xFE1
  8800                           indf2	equ	0xFDF
  8801                           postinc2	equ	0xFDE
  8802                           postdec2	equ	0xFDD
  8803                           plusw2	equ	0xFDB
  8804                           fsr2h	equ	0xFDA
  8805                           fsr2l	equ	0xFD9
  8806                           status	equ	0xFD8
  8807                           
  8808 ;; *************** function _make_dirfile *****************
  8809 ;; Defined at:
  8810 ;;		line 438 in file "bibliotecas/tff.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;  path            2    8[BANK0 ] PTR PTR const unsigned c
  8813 ;;		 -> trace_path@path(2), 
  8814 ;;  dirname         2   10[BANK0 ] PTR unsigned char 
  8815 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  8816 ;; Auto vars:     Size  Location     Type
  8817 ;;  c               1   20[BANK0 ] unsigned char 
  8818 ;;  n               1   19[BANK0 ] unsigned char 
  8819 ;;  a               1   18[BANK0 ] unsigned char 
  8820 ;;  t               1   17[BANK0 ] unsigned char 
  8821 ;;  b               1   16[BANK0 ] unsigned char 
  8822 ;; Return value:  Size  Location     Type
  8823 ;;                  1    wreg      unsigned char 
  8824 ;; Registers used:
  8825 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8826 ;; Tracked objects:
  8827 ;;		On entry : 0/0
  8828 ;;		On exit  : 0/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8831 ;;      Params:         0       4       0       0       0       0       0       0       0
  8832 ;;      Locals:         0       7       0       0       0       0       0       0       0
  8833 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8834 ;;      Totals:         0      13       0       0       0       0       0       0       0
  8835 ;;Total ram usage:       13 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    4
  8838 ;; This function calls:
  8839 ;;		_memset
  8840 ;; This function is called by:
  8841 ;;		_trace_path
  8842 ;; This function uses a non-reentrant model
  8843 ;;
  8844                           
  8845                           	psect	text32
  8846  003098                     __ptext32:
  8847                           	opt stack 0
  8848  003098                     _make_dirfile:
  8849                           	opt stack 21
  8850                           
  8851                           ;tff.c: 443: BYTE n, t, c, a, b;
  8852                           ;tff.c: 446: memset(dirname, ' ', 8+3);
  8853                           
  8854                           ;incstack = 0
  8855  003098  C06A  F060         	movff	make_dirfile@dirname,memset@p1
  8856  00309C  C06B  F061         	movff	make_dirfile@dirname+1,memset@p1+1
  8857  0030A0  0E00               	movlw	0
  8858  0030A2  0100               	movlb	0	; () banked
  8859  0030A4  6F63               	movwf	(memset@c+1)& (0+255),b
  8860  0030A6  0E20               	movlw	32
  8861  0030A8  6F62               	movwf	memset@c& (0+255),b
  8862  0030AA  0E00               	movlw	0
  8863  0030AC  6F65               	movwf	(memset@n+1)& (0+255),b
  8864  0030AE  0E0B               	movlw	11
  8865  0030B0  6F64               	movwf	memset@n& (0+255),b
  8866  0030B2  EC43  F025         	call	_memset	;wreg free
  8867                           
  8868                           ;tff.c: 447: a = 0; b = 0x18;
  8869  0030B6  0E00               	movlw	0
  8870  0030B8  0100               	movlb	0	; () banked
  8871  0030BA  6F72               	movwf	make_dirfile@a& (0+255),b
  8872                           
  8873                           ; BSR set to: 0
  8874  0030BC  0E18               	movlw	24
  8875  0030BE  6F70               	movwf	make_dirfile@b& (0+255),b
  8876                           
  8877                           ; BSR set to: 0
  8878                           ;tff.c: 448: n = 0; t = 8;
  8879  0030C0  0E00               	movlw	0
  8880  0030C2  6F73               	movwf	make_dirfile@n& (0+255),b
  8881                           
  8882                           ; BSR set to: 0
  8883  0030C4  0E08               	movlw	8
  8884  0030C6  6F71               	movwf	make_dirfile@t& (0+255),b
  8885  0030C8                     
  8886                           ; BSR set to: 0
  8887                           ;tff.c: 450: c = *(*path)++;
  8888                           
  8889                           ; BSR set to: 0
  8890  0030C8  C068  FFD9         	movff	make_dirfile@path,fsr2l
  8891  0030CC  C069  FFDA         	movff	make_dirfile@path+1,fsr2h
  8892  0030D0  CFDF F06C          	movff	indf2,??_make_dirfile
  8893  0030D4  0E01               	movlw	1
  8894  0030D6  26DE               	addwf	postinc2,f,c
  8895  0030D8  CFDF F06D          	movff	indf2,??_make_dirfile+1
  8896  0030DC  0E00               	movlw	0
  8897  0030DE  22DD               	addwfc	postdec2,f,c
  8898  0030E0  C06C  FFF6         	movff	??_make_dirfile,tblptrl
  8899  0030E4  C06D  FFF7         	movff	??_make_dirfile+1,tblptrh
  8900  0030E8  6AF8               	clrf	tblptru,c
  8901  0030EA  0E07               	movlw	(high __ramtop+-1)
  8902  0030EC  64F7               	cpfsgt	tblptrh,c
  8903  0030EE  D003               	bra	u11997
  8904  0030F0  0008               	tblrd		*
  8905  0030F2  50F5               	movf	tablat,w,c
  8906  0030F4  D005               	bra	u11990
  8907  0030F6                     u11997:
  8908  0030F6  CFF6 FFE9          	movff	tblptrl,fsr0l
  8909  0030FA  CFF7 FFEA          	movff	tblptrh,fsr0h
  8910  0030FE  50EF               	movf	indf0,w,c
  8911  003100                     u11990:
  8912  003100  0100               	movlb	0	; () banked
  8913  003102  6F74               	movwf	make_dirfile@c& (0+255),b
  8914                           
  8915                           ; BSR set to: 0
  8916                           ;tff.c: 451: if (c == '\0' || c == '/') {
  8917  003104  5174               	movf	make_dirfile@c& (0+255),w,b
  8918  003106  B4D8               	btfsc	status,2,c
  8919  003108  D004               	goto	u12010
  8920                           
  8921                           ; BSR set to: 0
  8922  00310A  0E2F               	movlw	47
  8923  00310C  1974               	xorwf	make_dirfile@c& (0+255),w,b
  8924  00310E  A4D8               	btfss	status,2,c
  8925  003110  D013               	goto	l1034
  8926  003112                     u12010:
  8927                           
  8928                           ; BSR set to: 0
  8929                           ;tff.c: 452: if (n == 0) break;
  8930                           
  8931                           ; BSR set to: 0
  8932  003112  5173               	movf	make_dirfile@n& (0+255),w,b
  8933  003114  B4D8               	btfsc	status,2,c
  8934  003116  D075               	goto	l1038
  8935                           
  8936                           ; BSR set to: 0
  8937                           
  8938                           ; BSR set to: 0
  8939                           
  8940                           ; BSR set to: 0
  8941                           
  8942                           ; BSR set to: 0
  8943                           ;tff.c: 453: dirname[11] = 1 ? (a & b) : 0;
  8944                           
  8945                           ; BSR set to: 0
  8946  003118  5172               	movf	make_dirfile@a& (0+255),w,b
  8947  00311A  1570               	andwf	make_dirfile@b& (0+255),w,b
  8948  00311C  6F6C               	movwf	??_make_dirfile& (0+255),b
  8949  00311E  516C               	movf	??_make_dirfile& (0+255),w,b
  8950  003120  6F6E               	movwf	_make_dirfile$1999& (0+255),b
  8951  003122  6B6F               	clrf	(_make_dirfile$1999+1)& (0+255),b
  8952                           
  8953                           ; BSR set to: 0
  8954                           
  8955                           ; BSR set to: 0
  8956  003124  EE20 F00B          	lfsr	2,11
  8957  003128  516A               	movf	make_dirfile@dirname& (0+255),w,b
  8958  00312A  26D9               	addwf	fsr2l,f,c
  8959  00312C  516B               	movf	(make_dirfile@dirname+1)& (0+255),w,b
  8960  00312E  22DA               	addwfc	fsr2h,f,c
  8961  003130  C06E  FFDF         	movff	_make_dirfile$1999,indf2
  8962                           
  8963                           ; BSR set to: 0
  8964                           ;tff.c: 454: return c;
  8965  003134  5174               	movf	make_dirfile@c& (0+255),w,b
  8966                           
  8967                           ; BSR set to: 0
  8968  003136  0012               	return	
  8969  003138                     l1034:
  8970                           
  8971                           ; BSR set to: 0
  8972                           ;tff.c: 455: }
  8973                           ;tff.c: 456: if (c <= ' ' || c == 0x7F) break;
  8974                           
  8975                           ; BSR set to: 0
  8976  003138  0E20               	movlw	32
  8977  00313A  6574               	cpfsgt	make_dirfile@c& (0+255),b
  8978  00313C  D062               	goto	l1038
  8979                           
  8980                           ; BSR set to: 0
  8981  00313E  0E7F               	movlw	127
  8982  003140  1974               	xorwf	make_dirfile@c& (0+255),w,b
  8983  003142  B4D8               	btfsc	status,2,c
  8984  003144  D05E               	goto	l1038
  8985                           
  8986                           ; BSR set to: 0
  8987                           ;tff.c: 457: if (c == '.') {
  8988                           
  8989                           ; BSR set to: 0
  8990                           
  8991                           ; BSR set to: 0
  8992  003146  0E2E               	movlw	46
  8993  003148  1974               	xorwf	make_dirfile@c& (0+255),w,b
  8994  00314A  A4D8               	btfss	status,2,c
  8995  00314C  D00C               	goto	l1050
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;tff.c: 458: if (!(a & 1) && n >= 1 && n <= 8) {
  8999  00314E  B172               	btfsc	make_dirfile@a& (0+255),0,b
  9000  003150  D058               	goto	l1038
  9001                           
  9002                           ; BSR set to: 0
  9003  003152  5173               	movf	make_dirfile@n& (0+255),w,b
  9004  003154  B4D8               	btfsc	status,2,c
  9005  003156  D055               	goto	l1038
  9006                           
  9007                           ; BSR set to: 0
  9008  003158  0E09               	movlw	9
  9009  00315A  6173               	cpfslt	make_dirfile@n& (0+255),b
  9010  00315C  D052               	goto	l1038
  9011                           
  9012                           ; BSR set to: 0
  9013                           ;tff.c: 459: n = 8; t = 11; continue;
  9014  00315E  0E08               	movlw	8
  9015  003160  6F73               	movwf	make_dirfile@n& (0+255),b
  9016  003162  0E0B               	movlw	11
  9017  003164  D7B0               	goto	L8
  9018  003166                     l1050:
  9019                           
  9020                           ; BSR set to: 0
  9021                           ;tff.c: 469: }
  9022                           ;tff.c: 470: if (c == '"') break;
  9023                           
  9024                           ; BSR set to: 0
  9025  003166  0E22               	movlw	34
  9026  003168  1974               	xorwf	make_dirfile@c& (0+255),w,b
  9027  00316A  B4D8               	btfsc	status,2,c
  9028  00316C  D04A               	goto	l1038
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;tff.c: 471: if (c <= ')') goto md_l1;
  9032                           
  9033                           ; BSR set to: 0
  9034                           
  9035                           ; BSR set to: 0
  9036  00316E  0E2A               	movlw	42
  9037  003170  6174               	cpfslt	make_dirfile@c& (0+255),b
  9038  003172  D001               	goto	l1058
  9039  003174  D035               	goto	l1076
  9040  003176                     l1058:
  9041                           
  9042                           ; BSR set to: 0
  9043                           ;tff.c: 472: if (c <= ',') break;
  9044                           
  9045                           ; BSR set to: 0
  9046  003176  0E2D               	movlw	45
  9047  003178  6174               	cpfslt	make_dirfile@c& (0+255),b
  9048  00317A  D001               	goto	l1060
  9049  00317C  D042               	goto	l1038
  9050  00317E                     l1060:
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;tff.c: 473: if (c <= '9') goto md_l1;
  9054                           
  9055                           ; BSR set to: 0
  9056  00317E  0E3A               	movlw	58
  9057  003180  6174               	cpfslt	make_dirfile@c& (0+255),b
  9058  003182  D001               	goto	l1061
  9059  003184  D02D               	goto	l1076
  9060  003186                     l1061:
  9061                           
  9062                           ; BSR set to: 0
  9063                           ;tff.c: 474: if (c <= '?') break;
  9064                           
  9065                           ; BSR set to: 0
  9066  003186  0E40               	movlw	64
  9067  003188  6174               	cpfslt	make_dirfile@c& (0+255),b
  9068  00318A  D001               	goto	l1062
  9069  00318C  D03A               	goto	l1038
  9070  00318E                     l1062:
  9071                           
  9072                           ; BSR set to: 0
  9073                           ;tff.c: 475: if (!(a & 1)) {
  9074  00318E  B172               	btfsc	make_dirfile@a& (0+255),0,b
  9075  003190  D027               	goto	l1076
  9076                           
  9077                           ; BSR set to: 0
  9078                           ;tff.c: 476: if (c == '|') break;
  9079  003192  0E7C               	movlw	124
  9080  003194  1974               	xorwf	make_dirfile@c& (0+255),w,b
  9081  003196  B4D8               	btfsc	status,2,c
  9082  003198  D034               	goto	l1038
  9083                           
  9084                           ; BSR set to: 0
  9085                           ;tff.c: 477: if (c >= '[' && c <= ']') break;
  9086                           
  9087                           ; BSR set to: 0
  9088                           
  9089                           ; BSR set to: 0
  9090  00319A  0E5A               	movlw	90
  9091  00319C  6574               	cpfsgt	make_dirfile@c& (0+255),b
  9092  00319E  D004               	goto	l1065
  9093                           
  9094                           ; BSR set to: 0
  9095  0031A0  0E5E               	movlw	94
  9096  0031A2  6174               	cpfslt	make_dirfile@c& (0+255),b
  9097  0031A4  D001               	goto	l1065
  9098  0031A6  D02D               	goto	l1038
  9099  0031A8                     l1065:
  9100                           
  9101                           ; BSR set to: 0
  9102                           
  9103                           ; BSR set to: 0
  9104  0031A8  0E40               	movlw	64
  9105  0031AA  6574               	cpfsgt	make_dirfile@c& (0+255),b
  9106  0031AC  D00A               	goto	l1070
  9107                           
  9108                           ; BSR set to: 0
  9109  0031AE  0E5B               	movlw	91
  9110  0031B0  6174               	cpfslt	make_dirfile@c& (0+255),b
  9111  0031B2  D007               	goto	l1070
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;tff.c: 479: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
  9115  0031B4  0E08               	movlw	8
  9116  0031B6  1971               	xorwf	make_dirfile@t& (0+255),w,b
  9117  0031B8  A4D8               	btfss	status,2,c
  9118  0031BA  D002               	goto	l1068
  9119                           
  9120                           ; BSR set to: 0
  9121  0031BC  9770               	bcf	make_dirfile@b& (0+255),3,b
  9122  0031BE  D001               	goto	l1070
  9123  0031C0                     l1068:
  9124                           
  9125                           ; BSR set to: 0
  9126                           
  9127                           ; BSR set to: 0
  9128  0031C0  9970               	bcf	make_dirfile@b& (0+255),4,b
  9129  0031C2                     l1070:
  9130                           
  9131                           ; BSR set to: 0
  9132                           ;tff.c: 480: if (c >= 'a' && c <= 'z') {
  9133                           
  9134                           ; BSR set to: 0
  9135                           
  9136                           ; BSR set to: 0
  9137  0031C2  0E60               	movlw	96
  9138  0031C4  6574               	cpfsgt	make_dirfile@c& (0+255),b
  9139  0031C6  D00C               	goto	l1076
  9140                           
  9141                           ; BSR set to: 0
  9142  0031C8  0E7B               	movlw	123
  9143  0031CA  6174               	cpfslt	make_dirfile@c& (0+255),b
  9144  0031CC  D009               	goto	l1076
  9145                           
  9146                           ; BSR set to: 0
  9147                           ;tff.c: 482: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
  9148  0031CE  0E20               	movlw	32
  9149  0031D0  5F74               	subwf	make_dirfile@c& (0+255),f,b
  9150  0031D2  0E08               	movlw	8
  9151  0031D4  1971               	xorwf	make_dirfile@t& (0+255),w,b
  9152  0031D6  A4D8               	btfss	status,2,c
  9153  0031D8  D002               	goto	l1074
  9154                           
  9155                           ; BSR set to: 0
  9156  0031DA  8772               	bsf	make_dirfile@a& (0+255),3,b
  9157  0031DC  D001               	goto	l1076
  9158  0031DE                     l1074:
  9159                           
  9160                           ; BSR set to: 0
  9161                           
  9162                           ; BSR set to: 0
  9163  0031DE  8972               	bsf	make_dirfile@a& (0+255),4,b
  9164  0031E0                     l1076:
  9165                           
  9166                           ; BSR set to: 0
  9167                           ;tff.c: 486: a &= 0xFE;
  9168                           
  9169                           ; BSR set to: 0
  9170                           ;tff.c: 483: }
  9171                           ;tff.c: 484: }
  9172                           ;tff.c: 485: md_l1:
  9173                           
  9174                           ; BSR set to: 0
  9175                           
  9176                           ; BSR set to: 0
  9177                           
  9178                           ; BSR set to: 0
  9179  0031E0  9172               	bcf	make_dirfile@a& (0+255),0,b
  9180                           
  9181                           ; BSR set to: 0
  9182                           ;tff.c: 488: if (n >= t) break;
  9183                           
  9184                           ; BSR set to: 0
  9185                           
  9186                           ;tff.c: 487: md_l2:
  9187  0031E2  5171               	movf	make_dirfile@t& (0+255),w,b
  9188  0031E4  5D73               	subwf	make_dirfile@n& (0+255),w,b
  9189  0031E6  B0D8               	btfsc	status,0,c
  9190  0031E8  D00C               	goto	l1038
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;tff.c: 489: dirname[n++] = c;
  9194                           
  9195                           ; BSR set to: 0
  9196                           
  9197                           ; BSR set to: 0
  9198  0031EA  5173               	movf	make_dirfile@n& (0+255),w,b
  9199  0031EC  0D01               	mullw	1
  9200  0031EE  50F3               	movf	prodl,w,c
  9201  0031F0  256A               	addwf	make_dirfile@dirname& (0+255),w,b
  9202  0031F2  6ED9               	movwf	fsr2l,c
  9203  0031F4  50F4               	movf	prodh,w,c
  9204  0031F6  216B               	addwfc	(make_dirfile@dirname+1)& (0+255),w,b
  9205  0031F8  6EDA               	movwf	fsr2h,c
  9206  0031FA  C074  FFDF         	movff	make_dirfile@c,indf2
  9207                           
  9208                           ; BSR set to: 0
  9209  0031FE  2B73               	incf	make_dirfile@n& (0+255),f,b
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;tff.c: 490: }
  9213  003200  D763               	goto	l1033
  9214  003202                     l1038:
  9215                           
  9216                           ; BSR set to: 0
  9217                           ;tff.c: 491: return 1;
  9218                           
  9219                           ; BSR set to: 0
  9220  003202  0E01               	movlw	1
  9221  003204  0012               	return	
  9222  003206                     __end_of_make_dirfile:
  9223                           	opt stack 0
  9224                           tosu	equ	0xFFF
  9225                           tosh	equ	0xFFE
  9226                           tosl	equ	0xFFD
  9227                           pclath	equ	0xFFA
  9228                           tblptru	equ	0xFF8
  9229                           tblptrh	equ	0xFF7
  9230                           tblptrl	equ	0xFF6
  9231                           tablat	equ	0xFF5
  9232                           prodh	equ	0xFF4
  9233                           prodl	equ	0xFF3
  9234                           intcon	equ	0xFF2
  9235                           intcon2	equ	0xFF1
  9236                           intcon3	equ	0xFF0
  9237                           indf0	equ	0xFEF
  9238                           postinc0	equ	0xFEE
  9239                           fsr0h	equ	0xFEA
  9240                           fsr0l	equ	0xFE9
  9241                           wreg	equ	0xFE8
  9242                           indf1	equ	0xFE7
  9243                           postinc1	equ	0xFE6
  9244                           postdec1	equ	0xFE5
  9245                           plusw1	equ	0xFE3
  9246                           fsr1h	equ	0xFE2
  9247                           fsr1l	equ	0xFE1
  9248                           indf2	equ	0xFDF
  9249                           postinc2	equ	0xFDE
  9250                           postdec2	equ	0xFDD
  9251                           plusw2	equ	0xFDB
  9252                           fsr2h	equ	0xFDA
  9253                           fsr2l	equ	0xFD9
  9254                           status	equ	0xFD8
  9255                           
  9256 ;; *************** function _reserve_direntry *****************
  9257 ;; Defined at:
  9258 ;;		line 567 in file "bibliotecas/tff.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;  dj              2  100[BANK0 ] PTR struct _DIR_E
  9261 ;;		 -> f_open@dj(14), 
  9262 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
  9263 ;;		 -> f_open@dir(2), 
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;  sector          4  106[BANK0 ] unsigned long 
  9266 ;;  fs              2  116[BANK0 ] PTR struct _FATFS
  9267 ;;		 -> NULL(0), fs(544), 
  9268 ;;  clust           2  114[BANK0 ] unsigned short 
  9269 ;;  dptr            2  111[BANK0 ] PTR unsigned char 
  9270 ;;		 -> fs.win(512), NULL(0), fs(544), 
  9271 ;;  c               1  113[BANK0 ] unsigned char 
  9272 ;;  n               1  110[BANK0 ] unsigned char 
  9273 ;; Return value:  Size  Location     Type
  9274 ;;                  1    wreg      enum E155
  9275 ;; Registers used:
  9276 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9277 ;; Tracked objects:
  9278 ;;		On entry : 0/0
  9279 ;;		On exit  : 0/0
  9280 ;;		Unchanged: 0/0
  9281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9282 ;;      Params:         0       4       0       0       0       0       0       0       0
  9283 ;;      Locals:         0      12       0       0       0       0       0       0       0
  9284 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9285 ;;      Totals:         0      18       0       0       0       0       0       0       0
  9286 ;;Total ram usage:       18 bytes
  9287 ;; Hardware stack levels used:    1
  9288 ;; Hardware stack levels required when called:   11
  9289 ;; This function calls:
  9290 ;;		_clust2sect
  9291 ;;		_create_chain
  9292 ;;		_disk_write
  9293 ;;		_memset
  9294 ;;		_move_window
  9295 ;;		_next_dir_entry
  9296 ;; This function is called by:
  9297 ;;		_f_open
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           	psect	text33
  9302  002006                     __ptext33:
  9303                           	opt stack 0
  9304  002006                     _reserve_direntry:
  9305                           	opt stack 15
  9306                           
  9307                           ;tff.c: 572: CLUST clust;
  9308                           ;tff.c: 573: DWORD sector;
  9309                           ;tff.c: 574: BYTE c, n, *dptr;
  9310                           ;tff.c: 575: FATFS *fs = dj->fs;
  9311                           
  9312                           ; BSR set to: 0
  9313                           ;incstack = 0
  9314  002006  0100               	movlb	0	; () banked
  9315  002008  EE20 F004          	lfsr	2,4
  9316  00200C  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9317  00200E  26D9               	addwf	fsr2l,f,c
  9318  002010  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9319  002012  22DA               	addwfc	fsr2h,f,c
  9320  002014  CFDE F0D4          	movff	postinc2,reserve_direntry@fs
  9321  002018  CFDD F0D5          	movff	postdec2,reserve_direntry@fs+1
  9322                           
  9323                           ;tff.c: 579: clust = dj->sclust;
  9324  00201C  EE20 F006          	lfsr	2,6
  9325  002020  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9326  002022  26D9               	addwf	fsr2l,f,c
  9327  002024  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9328  002026  22DA               	addwfc	fsr2h,f,c
  9329  002028  CFDE F0D2          	movff	postinc2,reserve_direntry@clust
  9330  00202C  CFDD F0D3          	movff	postdec2,reserve_direntry@clust+1
  9331                           
  9332                           ; BSR set to: 0
  9333                           ;tff.c: 580: if (clust != 0) {
  9334  002030  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  9335  002032  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9336  002034  B4D8               	btfsc	status,2,c
  9337  002036  D020               	goto	l1103
  9338                           
  9339                           ; BSR set to: 0
  9340                           ;tff.c: 581: dj->clust = clust;
  9341  002038  EE20 F008          	lfsr	2,8
  9342  00203C  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9343  00203E  26D9               	addwf	fsr2l,f,c
  9344  002040  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9345  002042  22DA               	addwfc	fsr2h,f,c
  9346  002044  C0D2  FFDE         	movff	reserve_direntry@clust,postinc2
  9347  002048  C0D3  FFDD         	movff	reserve_direntry@clust+1,postdec2
  9348                           
  9349                           ; BSR set to: 0
  9350                           ;tff.c: 582: dj->sect = clust2sect(clust);
  9351  00204C  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
  9352  002050  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
  9353  002054  EC6B  F01D         	call	_clust2sect	;wreg free
  9354  002058  0100               	movlb	0	; () banked
  9355  00205A  EE20 F00A          	lfsr	2,10
  9356  00205E  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9357  002060  26D9               	addwf	fsr2l,f,c
  9358  002062  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9359  002064  22DA               	addwfc	fsr2h,f,c
  9360  002066  C06C  FFDE         	movff	?_clust2sect,postinc2
  9361  00206A  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  9362  00206E  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  9363  002072  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  9364                           
  9365                           ;tff.c: 583: } else {
  9366  002076  D014               	goto	l1104
  9367  002078                     l1103:
  9368                           
  9369                           ; BSR set to: 0
  9370                           ;tff.c: 584: dj->sect = fs->dirbase;
  9371                           
  9372                           ; BSR set to: 0
  9373  002078  EE20 F00C          	lfsr	2,12
  9374  00207C  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  9375  00207E  26D9               	addwf	fsr2l,f,c
  9376  002080  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  9377  002082  22DA               	addwfc	fsr2h,f,c
  9378  002084  EE10 F00A          	lfsr	1,10
  9379  002088  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9380  00208A  26E1               	addwf	fsr1l,f,c
  9381  00208C  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9382  00208E  22E2               	addwfc	fsr1h,f,c
  9383  002090  CFDE FFE6          	movff	postinc2,postinc1
  9384  002094  CFDE FFE6          	movff	postinc2,postinc1
  9385  002098  CFDE FFE6          	movff	postinc2,postinc1
  9386  00209C  CFDE FFE6          	movff	postinc2,postinc1
  9387  0020A0                     l1104:
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;tff.c: 585: }
  9391                           ;tff.c: 586: dj->index = 0;
  9392                           
  9393                           ; BSR set to: 0
  9394  0020A0  EE20 F002          	lfsr	2,2
  9395  0020A4  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9396  0020A6  26D9               	addwf	fsr2l,f,c
  9397  0020A8  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9398  0020AA  22DA               	addwfc	fsr2h,f,c
  9399  0020AC  0E00               	movlw	0
  9400  0020AE  6EDE               	movwf	postinc2,c
  9401  0020B0  0E00               	movlw	0
  9402  0020B2  6EDD               	movwf	postdec2,c
  9403  0020B4                     
  9404                           ;tff.c: 589: if (!move_window(dj->sect)) return FR_RW_ERROR;
  9405                           
  9406                           ; BSR set to: 0
  9407  0020B4  0100               	movlb	0	; () banked
  9408  0020B6  EE20 F00A          	lfsr	2,10
  9409  0020BA  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9410  0020BC  26D9               	addwf	fsr2l,f,c
  9411  0020BE  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9412  0020C0  22DA               	addwfc	fsr2h,f,c
  9413  0020C2  CFDE F08B          	movff	postinc2,move_window@sector
  9414  0020C6  CFDE F08C          	movff	postinc2,move_window@sector+1
  9415  0020CA  CFDE F08D          	movff	postinc2,move_window@sector+2
  9416  0020CE  CFDE F08E          	movff	postinc2,move_window@sector+3
  9417  0020D2  ECAD  F016         	call	_move_window	;wreg free
  9418  0020D6  0900               	iorlw	0
  9419  0020D8  A4D8               	btfss	status,2,c
  9420  0020DA  D002               	goto	l1106
  9421  0020DC  0E08               	movlw	8
  9422  0020DE  0012               	return	
  9423  0020E0                     l1106:
  9424                           
  9425                           ;tff.c: 590: dptr = &fs->win[(dj->index & 15) * 32];
  9426  0020E0  0100               	movlb	0	; () banked
  9427  0020E2  EE20 F002          	lfsr	2,2
  9428  0020E6  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9429  0020E8  26D9               	addwf	fsr2l,f,c
  9430  0020EA  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9431  0020EC  22DA               	addwfc	fsr2h,f,c
  9432  0020EE  CFDE F0C8          	movff	postinc2,??_reserve_direntry
  9433  0020F2  CFDD F0C9          	movff	postdec2,??_reserve_direntry+1
  9434  0020F6  0E0F               	movlw	15
  9435  0020F8  17C8               	andwf	??_reserve_direntry& (0+255),f,b
  9436  0020FA  0E00               	movlw	0
  9437  0020FC  17C9               	andwf	(??_reserve_direntry+1)& (0+255),f,b
  9438  0020FE  0E05               	movlw	5
  9439  002100                     u12765:
  9440  002100  90D8               	bcf	status,0,c
  9441  002102  37C8               	rlcf	??_reserve_direntry& (0+255),f,b
  9442  002104  37C9               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
  9443  002106  2EE8               	decfsz	wreg,f,c
  9444  002108  D7FB               	goto	u12765
  9445  00210A  0E20               	movlw	32
  9446  00210C  27C8               	addwf	??_reserve_direntry& (0+255),f,b
  9447  00210E  0E00               	movlw	0
  9448  002110  23C9               	addwfc	(??_reserve_direntry+1)& (0+255),f,b
  9449  002112  51C8               	movf	??_reserve_direntry& (0+255),w,b
  9450  002114  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  9451  002116  6FCF               	movwf	reserve_direntry@dptr& (0+255),b
  9452  002118  51C9               	movf	(??_reserve_direntry+1)& (0+255),w,b
  9453  00211A  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  9454  00211C  6FD0               	movwf	(reserve_direntry@dptr+1)& (0+255),b
  9455                           
  9456                           ; BSR set to: 0
  9457                           ;tff.c: 591: c = dptr[0];
  9458  00211E  C0CF  FFD9         	movff	reserve_direntry@dptr,fsr2l
  9459  002122  C0D0  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
  9460  002126  50DF               	movf	indf2,w,c
  9461  002128  6FD1               	movwf	reserve_direntry@c& (0+255),b
  9462                           
  9463                           ; BSR set to: 0
  9464                           ;tff.c: 592: if (c == 0 || c == 0xE5) {
  9465  00212A  51D1               	movf	reserve_direntry@c& (0+255),w,b
  9466  00212C  B4D8               	btfsc	status,2,c
  9467  00212E  D004               	goto	u12780
  9468                           
  9469                           ; BSR set to: 0
  9470  002130  0EE5               	movlw	229
  9471  002132  19D1               	xorwf	reserve_direntry@c& (0+255),w,b
  9472  002134  A4D8               	btfss	status,2,c
  9473  002136  D00A               	goto	l1108
  9474  002138                     u12780:
  9475                           
  9476                           ; BSR set to: 0
  9477                           ;tff.c: 593: *dir = dptr; return FR_OK;
  9478                           
  9479                           ; BSR set to: 0
  9480  002138  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
  9481  00213C  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
  9482  002140  C0CF  FFDE         	movff	reserve_direntry@dptr,postinc2
  9483  002144  C0D0  FFDD         	movff	reserve_direntry@dptr+1,postdec2
  9484                           
  9485                           ; BSR set to: 0
  9486  002148  0E00               	movlw	0
  9487                           
  9488                           ; BSR set to: 0
  9489  00214A  0012               	return	
  9490  00214C                     l1108:
  9491                           
  9492                           ; BSR set to: 0
  9493                           ;tff.c: 594: }
  9494                           ;tff.c: 595: } while (next_dir_entry(dj));
  9495                           
  9496                           ; BSR set to: 0
  9497  00214C  C0C4  F0B3         	movff	reserve_direntry@dj,next_dir_entry@dj
  9498  002150  C0C5  F0B4         	movff	reserve_direntry@dj+1,next_dir_entry@dj+1
  9499  002154  EC88  F017         	call	_next_dir_entry	;wreg free
  9500  002158  0900               	iorlw	0
  9501  00215A  A4D8               	btfss	status,2,c
  9502  00215C  D7AB               	goto	l1105
  9503                           
  9504                           ;tff.c: 599: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
  9505  00215E  0100               	movlb	0	; () banked
  9506  002160  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  9507  002162  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9508  002164  B4D8               	btfsc	status,2,c
  9509  002166  D015               	goto	u12810
  9510                           
  9511                           ; BSR set to: 0
  9512  002168  EE20 F008          	lfsr	2,8
  9513  00216C  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  9514  00216E  26D9               	addwf	fsr2l,f,c
  9515  002170  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  9516  002172  22DA               	addwfc	fsr2h,f,c
  9517  002174  CFDE F0B6          	movff	postinc2,create_chain@clust
  9518  002178  CFDD F0B7          	movff	postdec2,create_chain@clust+1
  9519  00217C  ECCD  F015         	call	_create_chain	;wreg free
  9520  002180  C0B6  F0D2         	movff	?_create_chain,reserve_direntry@clust
  9521  002184  C0B7  F0D3         	movff	?_create_chain+1,reserve_direntry@clust+1
  9522  002188  0100               	movlb	0	; () banked
  9523  00218A  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  9524  00218C  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9525  00218E  A4D8               	btfss	status,2,c
  9526  002190  D002               	goto	l1112
  9527  002192                     u12810:
  9528                           
  9529                           ; BSR set to: 0
  9530                           
  9531                           ; BSR set to: 0
  9532  002192  0E06               	movlw	6
  9533                           
  9534                           ; BSR set to: 0
  9535  002194  0012               	return	
  9536  002196                     l1112:
  9537                           
  9538                           ; BSR set to: 0
  9539                           ;tff.c: 600: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
  9540                           
  9541                           ; BSR set to: 0
  9542  002196  05D2               	decf	reserve_direntry@clust& (0+255),w,b
  9543  002198  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  9544  00219A  B4D8               	btfsc	status,2,c
  9545  00219C  D00D               	goto	u12830
  9546                           
  9547                           ; BSR set to: 0
  9548  00219E  0E00               	movlw	0
  9549  0021A0  6F8B               	movwf	move_window@sector& (0+255),b
  9550  0021A2  0E00               	movlw	0
  9551  0021A4  6F8C               	movwf	(move_window@sector+1)& (0+255),b
  9552  0021A6  0E00               	movlw	0
  9553  0021A8  6F8D               	movwf	(move_window@sector+2)& (0+255),b
  9554  0021AA  0E00               	movlw	0
  9555  0021AC  6F8E               	movwf	(move_window@sector+3)& (0+255),b
  9556  0021AE  ECAD  F016         	call	_move_window	;wreg free
  9557  0021B2  0900               	iorlw	0
  9558  0021B4  A4D8               	btfss	status,2,c
  9559  0021B6  D002               	goto	l1115
  9560  0021B8                     u12830:
  9561  0021B8  0E08               	movlw	8
  9562  0021BA  0012               	return	
  9563  0021BC                     l1115:
  9564                           
  9565                           ;tff.c: 602: fs->winsect = sector = clust2sect(clust);
  9566  0021BC  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
  9567  0021C0  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
  9568  0021C4  EC6B  F01D         	call	_clust2sect	;wreg free
  9569  0021C8  C06C  F0CA         	movff	?_clust2sect,reserve_direntry@sector
  9570  0021CC  C06D  F0CB         	movff	?_clust2sect+1,reserve_direntry@sector+1
  9571  0021D0  C06E  F0CC         	movff	?_clust2sect+2,reserve_direntry@sector+2
  9572  0021D4  C06F  F0CD         	movff	?_clust2sect+3,reserve_direntry@sector+3
  9573  0021D8  0100               	movlb	0	; () banked
  9574  0021DA  EE20 F004          	lfsr	2,4
  9575  0021DE  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  9576  0021E0  26D9               	addwf	fsr2l,f,c
  9577  0021E2  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  9578  0021E4  22DA               	addwfc	fsr2h,f,c
  9579  0021E6  C0CA  FFDE         	movff	reserve_direntry@sector,postinc2
  9580  0021EA  C0CB  FFDE         	movff	reserve_direntry@sector+1,postinc2
  9581  0021EE  C0CC  FFDE         	movff	reserve_direntry@sector+2,postinc2
  9582  0021F2  C0CD  FFDE         	movff	reserve_direntry@sector+3,postinc2
  9583                           
  9584                           ;tff.c: 603: memset(fs->win, 0, 512U);
  9585  0021F6  0E20               	movlw	32
  9586  0021F8  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  9587  0021FA  6F60               	movwf	memset@p1& (0+255),b
  9588  0021FC  0E00               	movlw	0
  9589  0021FE  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  9590  002200  6F61               	movwf	(memset@p1+1)& (0+255),b
  9591  002202  0E00               	movlw	0
  9592  002204  6F63               	movwf	(memset@c+1)& (0+255),b
  9593  002206  0E00               	movlw	0
  9594  002208  6F62               	movwf	memset@c& (0+255),b
  9595  00220A  0E02               	movlw	2
  9596  00220C  6F65               	movwf	(memset@n+1)& (0+255),b
  9597  00220E  0E00               	movlw	0
  9598  002210  6F64               	movwf	memset@n& (0+255),b
  9599  002212  EC43  F025         	call	_memset	;wreg free
  9600                           
  9601                           ;tff.c: 604: for (n = fs->csize; n; n--) {
  9602  002216  0100               	movlb	0	; () banked
  9603  002218  EE20 F01D          	lfsr	2,29
  9604  00221C  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  9605  00221E  26D9               	addwf	fsr2l,f,c
  9606  002220  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  9607  002222  22DA               	addwfc	fsr2h,f,c
  9608  002224  50DF               	movf	indf2,w,c
  9609  002226  6FCE               	movwf	reserve_direntry@n& (0+255),b
  9610  002228  D020               	goto	l1118
  9611  00222A                     
  9612                           ; BSR set to: 0
  9613                           ;tff.c: 605: if (disk_write(0, fs->win, sector, 1) != RES_OK)
  9614                           
  9615                           ; BSR set to: 0
  9616  00222A  0E20               	movlw	32
  9617  00222C  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  9618  00222E  6F7F               	movwf	disk_write@buff& (0+255),b
  9619  002230  0E00               	movlw	0
  9620  002232  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  9621  002234  6F80               	movwf	(disk_write@buff+1)& (0+255),b
  9622  002236  C0CA  F081         	movff	reserve_direntry@sector,disk_write@sector
  9623  00223A  C0CB  F082         	movff	reserve_direntry@sector+1,disk_write@sector+1
  9624  00223E  C0CC  F083         	movff	reserve_direntry@sector+2,disk_write@sector+2
  9625  002242  C0CD  F084         	movff	reserve_direntry@sector+3,disk_write@sector+3
  9626  002246  0E01               	movlw	1
  9627  002248  6F85               	movwf	disk_write@count& (0+255),b
  9628  00224A  0E00               	movlw	0
  9629  00224C  EC86  F020         	call	_disk_write
  9630  002250  0900               	iorlw	0
  9631  002252  B4D8               	btfsc	status,2,c
  9632  002254  D002               	goto	l1120
  9633                           
  9634                           ;tff.c: 606: return FR_RW_ERROR;
  9635  002256  0E08               	movlw	8
  9636  002258  0012               	return	
  9637  00225A                     l1120:
  9638                           
  9639                           ;tff.c: 607: sector++;
  9640  00225A  0E01               	movlw	1
  9641  00225C  0100               	movlb	0	; () banked
  9642  00225E  27CA               	addwf	reserve_direntry@sector& (0+255),f,b
  9643  002260  0E00               	movlw	0
  9644  002262  23CB               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
  9645  002264  23CC               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
  9646  002266  23CD               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
  9647                           
  9648                           ; BSR set to: 0
  9649  002268  07CE               	decf	reserve_direntry@n& (0+255),f,b
  9650  00226A                     l1118:
  9651                           
  9652                           ; BSR set to: 0
  9653                           
  9654                           ; BSR set to: 0
  9655  00226A  51CE               	movf	reserve_direntry@n& (0+255),w,b
  9656  00226C  A4D8               	btfss	status,2,c
  9657  00226E  D7DD               	goto	l1119
  9658                           
  9659                           ; BSR set to: 0
  9660                           ;tff.c: 608: }
  9661                           ;tff.c: 609: fs->winflag = 1;
  9662                           
  9663                           ; BSR set to: 0
  9664  002270  EE20 F01F          	lfsr	2,31
  9665  002274  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  9666  002276  26D9               	addwf	fsr2l,f,c
  9667  002278  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  9668  00227A  22DA               	addwfc	fsr2h,f,c
  9669  00227C  0E01               	movlw	1
  9670  00227E  6EDF               	movwf	indf2,c
  9671                           
  9672                           ;tff.c: 610: *dir = fs->win;
  9673  002280  0E20               	movlw	32
  9674  002282  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  9675  002284  6FC8               	movwf	??_reserve_direntry& (0+255),b
  9676  002286  0E00               	movlw	0
  9677  002288  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  9678  00228A  6FC9               	movwf	(??_reserve_direntry+1)& (0+255),b
  9679  00228C  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
  9680  002290  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
  9681  002294  C0C8  FFDE         	movff	??_reserve_direntry,postinc2
  9682  002298  C0C9  FFDD         	movff	??_reserve_direntry+1,postdec2
  9683                           
  9684                           ; BSR set to: 0
  9685                           ;tff.c: 611: return FR_OK;
  9686  00229C  0E00               	movlw	0
  9687  00229E  0012               	return	
  9688  0022A0                     __end_of_reserve_direntry:
  9689                           	opt stack 0
  9690                           tosu	equ	0xFFF
  9691                           tosh	equ	0xFFE
  9692                           tosl	equ	0xFFD
  9693                           pclath	equ	0xFFA
  9694                           tblptru	equ	0xFF8
  9695                           tblptrh	equ	0xFF7
  9696                           tblptrl	equ	0xFF6
  9697                           tablat	equ	0xFF5
  9698                           prodh	equ	0xFF4
  9699                           prodl	equ	0xFF3
  9700                           intcon	equ	0xFF2
  9701                           intcon2	equ	0xFF1
  9702                           intcon3	equ	0xFF0
  9703                           indf0	equ	0xFEF
  9704                           postinc0	equ	0xFEE
  9705                           fsr0h	equ	0xFEA
  9706                           fsr0l	equ	0xFE9
  9707                           wreg	equ	0xFE8
  9708                           indf1	equ	0xFE7
  9709                           postinc1	equ	0xFE6
  9710                           postdec1	equ	0xFE5
  9711                           plusw1	equ	0xFE3
  9712                           fsr1h	equ	0xFE2
  9713                           fsr1l	equ	0xFE1
  9714                           indf2	equ	0xFDF
  9715                           postinc2	equ	0xFDE
  9716                           postdec2	equ	0xFDD
  9717                           plusw2	equ	0xFDB
  9718                           fsr2h	equ	0xFDA
  9719                           fsr2l	equ	0xFD9
  9720                           status	equ	0xFD8
  9721                           
  9722 ;; *************** function _next_dir_entry *****************
  9723 ;; Defined at:
  9724 ;;		line 358 in file "bibliotecas/tff.c"
  9725 ;; Parameters:    Size  Location     Type
  9726 ;;  dj              2   83[BANK0 ] PTR struct _DIR_E
  9727 ;;		 -> f_open@dj(14), 
  9728 ;; Auto vars:     Size  Location     Type
  9729 ;;  idx             2   94[BANK0 ] unsigned short 
  9730 ;;  clust           2   92[BANK0 ] unsigned short 
  9731 ;; Return value:  Size  Location     Type
  9732 ;;                  1    wreg      enum E105
  9733 ;; Registers used:
  9734 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9735 ;; Tracked objects:
  9736 ;;		On entry : 0/0
  9737 ;;		On exit  : 0/0
  9738 ;;		Unchanged: 0/0
  9739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9740 ;;      Params:         0       2       0       0       0       0       0       0       0
  9741 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9742 ;;      Temps:          0       7       0       0       0       0       0       0       0
  9743 ;;      Totals:         0      13       0       0       0       0       0       0       0
  9744 ;;Total ram usage:       13 bytes
  9745 ;; Hardware stack levels used:    1
  9746 ;; Hardware stack levels required when called:   10
  9747 ;; This function calls:
  9748 ;;		_clust2sect
  9749 ;;		_get_cluster
  9750 ;; This function is called by:
  9751 ;;		_trace_path
  9752 ;;		_reserve_direntry
  9753 ;;		_f_readdir
  9754 ;; This function uses a non-reentrant model
  9755 ;;
  9756                           
  9757                           	psect	text34
  9758  002F10                     __ptext34:
  9759                           	opt stack 0
  9760  002F10                     _next_dir_entry:
  9761                           	opt stack 15
  9762                           
  9763                           ;tff.c: 362: CLUST clust;
  9764                           ;tff.c: 363: WORD idx;
  9765                           ;tff.c: 366: idx = dj->index + 1;
  9766                           
  9767                           ;incstack = 0
  9768  002F10  0100               	movlb	0	; () banked
  9769  002F12  EE20 F002          	lfsr	2,2
  9770  002F16  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9771  002F18  26D9               	addwf	fsr2l,f,c
  9772  002F1A  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9773  002F1C  22DA               	addwfc	fsr2h,f,c
  9774  002F1E  CFDE F0B5          	movff	postinc2,??_next_dir_entry
  9775  002F22  CFDD F0B6          	movff	postdec2,??_next_dir_entry+1
  9776  002F26  0E01               	movlw	1
  9777  002F28  25B5               	addwf	??_next_dir_entry& (0+255),w,b
  9778  002F2A  6FBE               	movwf	next_dir_entry@idx& (0+255),b
  9779  002F2C  0E00               	movlw	0
  9780  002F2E  21B6               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
  9781  002F30  6FBF               	movwf	(next_dir_entry@idx+1)& (0+255),b
  9782                           
  9783                           ; BSR set to: 0
  9784                           ;tff.c: 367: if ((idx & 15) == 0) {
  9785  002F32  0E0F               	movlw	15
  9786  002F34  15BE               	andwf	next_dir_entry@idx& (0+255),w,b
  9787  002F36  6FB5               	movwf	??_next_dir_entry& (0+255),b
  9788  002F38  0E00               	movlw	0
  9789  002F3A  15BF               	andwf	(next_dir_entry@idx+1)& (0+255),w,b
  9790  002F3C  6FB6               	movwf	(??_next_dir_entry+1)& (0+255),b
  9791  002F3E  51B5               	movf	??_next_dir_entry& (0+255),w,b
  9792  002F40  11B6               	iorwf	(??_next_dir_entry+1)& (0+255),w,b
  9793  002F42  A4D8               	btfss	status,2,c
  9794  002F44  D09D               	goto	l1010
  9795                           
  9796                           ; BSR set to: 0
  9797                           ;tff.c: 368: dj->sect++;
  9798  002F46  EE20 F00A          	lfsr	2,10
  9799  002F4A  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9800  002F4C  26D9               	addwf	fsr2l,f,c
  9801  002F4E  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9802  002F50  22DA               	addwfc	fsr2h,f,c
  9803  002F52  2ADE               	incf	postinc2,f,c
  9804  002F54  0E00               	movlw	0
  9805  002F56  22DE               	addwfc	postinc2,f,c
  9806  002F58  22DE               	addwfc	postinc2,f,c
  9807  002F5A  22DE               	addwfc	postinc2,f,c
  9808                           
  9809                           ;tff.c: 369: if (dj->clust == 0) {
  9810  002F5C  EE20 F008          	lfsr	2,8
  9811  002F60  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9812  002F62  26D9               	addwf	fsr2l,f,c
  9813  002F64  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9814  002F66  22DA               	addwfc	fsr2h,f,c
  9815  002F68  50DE               	movf	postinc2,w,c
  9816  002F6A  10DE               	iorwf	postinc2,w,c
  9817  002F6C  A4D8               	btfss	status,2,c
  9818  002F6E  D014               	goto	l1006
  9819                           
  9820                           ; BSR set to: 0
  9821                           ;tff.c: 370: if (idx >= dj->fs->n_rootdir) return FALSE;
  9822  002F70  EE20 F004          	lfsr	2,4
  9823  002F74  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9824  002F76  26D9               	addwf	fsr2l,f,c
  9825  002F78  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9826  002F7A  22DA               	addwfc	fsr2h,f,c
  9827  002F7C  EE10 F002          	lfsr	1,2
  9828  002F80  50DE               	movf	postinc2,w,c
  9829  002F82  26E1               	addwf	fsr1l,f,c
  9830  002F84  50DD               	movf	postdec2,w,c
  9831  002F86  22E2               	addwfc	fsr1h,f,c
  9832  002F88  50E6               	movf	postinc1,w,c
  9833  002F8A  5DBE               	subwf	next_dir_entry@idx& (0+255),w,b
  9834  002F8C  50E6               	movf	postinc1,w,c
  9835  002F8E  59BF               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
  9836  002F90  A0D8               	btfss	status,0,c
  9837  002F92  D076               	goto	l1010
  9838                           
  9839                           ; BSR set to: 0
  9840  002F94  0E00               	movlw	0
  9841                           
  9842                           ; BSR set to: 0
  9843  002F96  0012               	return	
  9844  002F98                     l1006:
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;tff.c: 372: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
  9848                           
  9849                           ; BSR set to: 0
  9850  002F98  C0BE  F0B5         	movff	next_dir_entry@idx,??_next_dir_entry
  9851  002F9C  C0BF  F0B6         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
  9852  002FA0  0E04               	movlw	4
  9853  002FA2  6FB7               	movwf	(??_next_dir_entry+2)& (0+255),b
  9854  002FA4                     u11955:
  9855  002FA4  90D8               	bcf	status,0,c
  9856  002FA6  33B6               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
  9857  002FA8  33B5               	rrcf	??_next_dir_entry& (0+255),f,b
  9858  002FAA  2FB7               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
  9859  002FAC  D7FB               	goto	u11955
  9860  002FAE  0EFF               	movlw	255
  9861  002FB0  6FB8               	movwf	(??_next_dir_entry+3)& (0+255),b
  9862  002FB2  0EFF               	movlw	255
  9863  002FB4  6FB9               	movwf	(??_next_dir_entry+4)& (0+255),b
  9864  002FB6  EE20 F004          	lfsr	2,4
  9865  002FBA  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9866  002FBC  26D9               	addwf	fsr2l,f,c
  9867  002FBE  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9868  002FC0  22DA               	addwfc	fsr2h,f,c
  9869  002FC2  EE10 F01D          	lfsr	1,29
  9870  002FC6  50DE               	movf	postinc2,w,c
  9871  002FC8  26E1               	addwf	fsr1l,f,c
  9872  002FCA  50DD               	movf	postdec2,w,c
  9873  002FCC  22E2               	addwfc	fsr1h,f,c
  9874  002FCE  50E7               	movf	indf1,w,c
  9875  002FD0  6FBA               	movwf	(??_next_dir_entry+5)& (0+255),b
  9876  002FD2  6BBB               	clrf	(??_next_dir_entry+6)& (0+255),b
  9877  002FD4  51B8               	movf	(??_next_dir_entry+3)& (0+255),w,b
  9878  002FD6  27BA               	addwf	(??_next_dir_entry+5)& (0+255),f,b
  9879  002FD8  51B9               	movf	(??_next_dir_entry+4)& (0+255),w,b
  9880  002FDA  23BB               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
  9881  002FDC  51B5               	movf	??_next_dir_entry& (0+255),w,b
  9882  002FDE  17BA               	andwf	(??_next_dir_entry+5)& (0+255),f,b
  9883  002FE0  51B6               	movf	(??_next_dir_entry+1)& (0+255),w,b
  9884  002FE2  17BB               	andwf	(??_next_dir_entry+6)& (0+255),f,b
  9885  002FE4  51BA               	movf	(??_next_dir_entry+5)& (0+255),w,b
  9886  002FE6  11BB               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
  9887  002FE8  A4D8               	btfss	status,2,c
  9888  002FEA  D04A               	goto	l1010
  9889                           
  9890                           ; BSR set to: 0
  9891                           ;tff.c: 373: clust = get_cluster(dj->clust);
  9892  002FEC  EE20 F008          	lfsr	2,8
  9893  002FF0  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9894  002FF2  26D9               	addwf	fsr2l,f,c
  9895  002FF4  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9896  002FF6  22DA               	addwfc	fsr2h,f,c
  9897  002FF8  CFDE F0A0          	movff	postinc2,get_cluster@clust
  9898  002FFC  CFDD F0A1          	movff	postdec2,get_cluster@clust+1
  9899  003000  ECD7  F013         	call	_get_cluster	;wreg free
  9900  003004  C0A0  F0BC         	movff	?_get_cluster,next_dir_entry@clust
  9901  003008  C0A1  F0BD         	movff	?_get_cluster+1,next_dir_entry@clust+1
  9902                           
  9903                           ;tff.c: 374: if (clust < 2 || clust >= dj->fs->max_clust)
  9904  00300C  0100               	movlb	0	; () banked
  9905  00300E  51BD               	movf	(next_dir_entry@clust+1)& (0+255),w,b
  9906  003010  E104               	bnz	u11970
  9907  003012  0E02               	movlw	2
  9908  003014  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
  9909  003016  A0D8               	btfss	status,0,c
  9910  003018  D012               	goto	u11980
  9911  00301A                     u11970:
  9912                           
  9913                           ; BSR set to: 0
  9914  00301A  EE20 F004          	lfsr	2,4
  9915  00301E  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9916  003020  26D9               	addwf	fsr2l,f,c
  9917  003022  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9918  003024  22DA               	addwfc	fsr2h,f,c
  9919  003026  EE10 F016          	lfsr	1,22
  9920  00302A  50DE               	movf	postinc2,w,c
  9921  00302C  26E1               	addwf	fsr1l,f,c
  9922  00302E  50DD               	movf	postdec2,w,c
  9923  003030  22E2               	addwfc	fsr1h,f,c
  9924  003032  50E6               	movf	postinc1,w,c
  9925  003034  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
  9926  003036  50E6               	movf	postinc1,w,c
  9927  003038  59BD               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
  9928  00303A  A0D8               	btfss	status,0,c
  9929  00303C  D002               	goto	l1011
  9930  00303E                     u11980:
  9931                           
  9932                           ; BSR set to: 0
  9933                           ;tff.c: 375: return FALSE;
  9934                           
  9935                           ; BSR set to: 0
  9936  00303E  0E00               	movlw	0
  9937                           
  9938                           ; BSR set to: 0
  9939  003040  0012               	return	
  9940  003042                     l1011:
  9941                           
  9942                           ; BSR set to: 0
  9943                           ;tff.c: 376: dj->clust = clust;
  9944                           
  9945                           ; BSR set to: 0
  9946  003042  EE20 F008          	lfsr	2,8
  9947  003046  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9948  003048  26D9               	addwf	fsr2l,f,c
  9949  00304A  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9950  00304C  22DA               	addwfc	fsr2h,f,c
  9951  00304E  C0BC  FFDE         	movff	next_dir_entry@clust,postinc2
  9952  003052  C0BD  FFDD         	movff	next_dir_entry@clust+1,postdec2
  9953                           
  9954                           ; BSR set to: 0
  9955                           ;tff.c: 377: dj->sect = clust2sect(clust);
  9956  003056  C0BC  F06C         	movff	next_dir_entry@clust,clust2sect@clust
  9957  00305A  C0BD  F06D         	movff	next_dir_entry@clust+1,clust2sect@clust+1
  9958  00305E  EC6B  F01D         	call	_clust2sect	;wreg free
  9959  003062  0100               	movlb	0	; () banked
  9960  003064  EE20 F00A          	lfsr	2,10
  9961  003068  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9962  00306A  26D9               	addwf	fsr2l,f,c
  9963  00306C  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9964  00306E  22DA               	addwfc	fsr2h,f,c
  9965  003070  C06C  FFDE         	movff	?_clust2sect,postinc2
  9966  003074  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  9967  003078  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  9968  00307C  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  9969  003080                     l1010:
  9970                           
  9971                           ; BSR set to: 0
  9972                           ;tff.c: 378: }
  9973                           ;tff.c: 379: }
  9974                           ;tff.c: 380: }
  9975                           ;tff.c: 381: dj->index = idx;
  9976                           
  9977                           ; BSR set to: 0
  9978                           
  9979                           ; BSR set to: 0
  9980                           
  9981                           ; BSR set to: 0
  9982  003080  EE20 F002          	lfsr	2,2
  9983  003084  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  9984  003086  26D9               	addwf	fsr2l,f,c
  9985  003088  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  9986  00308A  22DA               	addwfc	fsr2h,f,c
  9987  00308C  C0BE  FFDE         	movff	next_dir_entry@idx,postinc2
  9988  003090  C0BF  FFDD         	movff	next_dir_entry@idx+1,postdec2
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;tff.c: 382: return TRUE;
  9992  003094  0E01               	movlw	1
  9993  003096  0012               	return	
  9994  003098                     __end_of_next_dir_entry:
  9995                           	opt stack 0
  9996                           tosu	equ	0xFFF
  9997                           tosh	equ	0xFFE
  9998                           tosl	equ	0xFFD
  9999                           pclath	equ	0xFFA
 10000                           tblptru	equ	0xFF8
 10001                           tblptrh	equ	0xFF7
 10002                           tblptrl	equ	0xFF6
 10003                           tablat	equ	0xFF5
 10004                           prodh	equ	0xFF4
 10005                           prodl	equ	0xFF3
 10006                           intcon	equ	0xFF2
 10007                           intcon2	equ	0xFF1
 10008                           intcon3	equ	0xFF0
 10009                           indf0	equ	0xFEF
 10010                           postinc0	equ	0xFEE
 10011                           fsr0h	equ	0xFEA
 10012                           fsr0l	equ	0xFE9
 10013                           wreg	equ	0xFE8
 10014                           indf1	equ	0xFE7
 10015                           postinc1	equ	0xFE6
 10016                           postdec1	equ	0xFE5
 10017                           plusw1	equ	0xFE3
 10018                           fsr1h	equ	0xFE2
 10019                           fsr1l	equ	0xFE1
 10020                           indf2	equ	0xFDF
 10021                           postinc2	equ	0xFDE
 10022                           postdec2	equ	0xFDD
 10023                           plusw2	equ	0xFDB
 10024                           fsr2h	equ	0xFDA
 10025                           fsr2l	equ	0xFD9
 10026                           status	equ	0xFD8
 10027                           
 10028 ;; *************** function _clust2sect *****************
 10029 ;; Defined at:
 10030 ;;		line 338 in file "bibliotecas/tff.c"
 10031 ;; Parameters:    Size  Location     Type
 10032 ;;  clust           2   12[BANK0 ] unsigned short 
 10033 ;; Auto vars:     Size  Location     Type
 10034 ;;  fs              2   21[BANK0 ] PTR struct _FATFS
 10035 ;;		 -> NULL(0), fs(544), 
 10036 ;; Return value:  Size  Location     Type
 10037 ;;                  4   12[BANK0 ] unsigned long 
 10038 ;; Registers used:
 10039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10040 ;; Tracked objects:
 10041 ;;		On entry : 0/0
 10042 ;;		On exit  : 0/0
 10043 ;;		Unchanged: 0/0
 10044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10045 ;;      Params:         0       4       0       0       0       0       0       0       0
 10046 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10047 ;;      Temps:          0       5       0       0       0       0       0       0       0
 10048 ;;      Totals:         0      11       0       0       0       0       0       0       0
 10049 ;;Total ram usage:       11 bytes
 10050 ;; Hardware stack levels used:    1
 10051 ;; Hardware stack levels required when called:    4
 10052 ;; This function calls:
 10053 ;;		___lmul
 10054 ;; This function is called by:
 10055 ;;		_next_dir_entry
 10056 ;;		_trace_path
 10057 ;;		_reserve_direntry
 10058 ;;		_f_write
 10059 ;;		_f_read
 10060 ;;		_f_opendir
 10061 ;; This function uses a non-reentrant model
 10062 ;;
 10063                           
 10064                           	psect	text35
 10065  003AD6                     __ptext35:
 10066                           	opt stack 0
 10067  003AD6                     _clust2sect:
 10068                           	opt stack 19
 10069                           
 10070                           ;tff.c: 342: FATFS *fs = FatFs;
 10071                           
 10072                           ; BSR set to: 0
 10073                           ;incstack = 0
 10074  003AD6  C0FD  F075         	movff	_FatFs,clust2sect@fs
 10075  003ADA  C0FE  F076         	movff	_FatFs+1,clust2sect@fs+1
 10076                           
 10077                           ;tff.c: 345: clust -= 2;
 10078  003ADE  0E02               	movlw	2
 10079  003AE0  0100               	movlb	0	; () banked
 10080  003AE2  5F6C               	subwf	clust2sect@clust& (0+255),f,b
 10081  003AE4  0E00               	movlw	0
 10082  003AE6  5B6D               	subwfb	(clust2sect@clust+1)& (0+255),f,b
 10083                           
 10084                           ; BSR set to: 0
 10085                           ;tff.c: 346: if (clust >= (fs->max_clust - 2)) return 0;
 10086  003AE8  0EFE               	movlw	254
 10087  003AEA  6F70               	movwf	??_clust2sect& (0+255),b
 10088  003AEC  0EFF               	movlw	255
 10089  003AEE  6F71               	movwf	(??_clust2sect+1)& (0+255),b
 10090  003AF0  EE20 F016          	lfsr	2,22
 10091  003AF4  5175               	movf	clust2sect@fs& (0+255),w,b
 10092  003AF6  26D9               	addwf	fsr2l,f,c
 10093  003AF8  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 10094  003AFA  22DA               	addwfc	fsr2h,f,c
 10095  003AFC  CFDE F072          	movff	postinc2,??_clust2sect+2
 10096  003B00  CFDD F073          	movff	postdec2,??_clust2sect+3
 10097  003B04  5170               	movf	??_clust2sect& (0+255),w,b
 10098  003B06  2772               	addwf	(??_clust2sect+2)& (0+255),f,b
 10099  003B08  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 10100  003B0A  2373               	addwfc	(??_clust2sect+3)& (0+255),f,b
 10101  003B0C  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 10102  003B0E  5D6C               	subwf	clust2sect@clust& (0+255),w,b
 10103  003B10  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 10104  003B12  596D               	subwfb	(clust2sect@clust+1)& (0+255),w,b
 10105  003B14  A0D8               	btfss	status,0,c
 10106  003B16  D009               	goto	l1001
 10107                           
 10108                           ; BSR set to: 0
 10109  003B18  0E00               	movlw	0
 10110  003B1A  6F6C               	movwf	?_clust2sect& (0+255),b
 10111  003B1C  0E00               	movlw	0
 10112  003B1E  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 10113  003B20  0E00               	movlw	0
 10114  003B22  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 10115  003B24  0E00               	movlw	0
 10116  003B26  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 10117                           
 10118                           ; BSR set to: 0
 10119  003B28  0012               	return	
 10120  003B2A                     l1001:
 10121                           
 10122                           ; BSR set to: 0
 10123                           ;tff.c: 347: return (DWORD)clust * fs->csize + fs->database;
 10124                           
 10125                           ; BSR set to: 0
 10126  003B2A  EE20 F010          	lfsr	2,16
 10127  003B2E  5175               	movf	clust2sect@fs& (0+255),w,b
 10128  003B30  26D9               	addwf	fsr2l,f,c
 10129  003B32  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 10130  003B34  22DA               	addwfc	fsr2h,f,c
 10131  003B36  CFDE F070          	movff	postinc2,??_clust2sect
 10132  003B3A  CFDE F071          	movff	postinc2,??_clust2sect+1
 10133  003B3E  CFDE F072          	movff	postinc2,??_clust2sect+2
 10134  003B42  CFDE F073          	movff	postinc2,??_clust2sect+3
 10135  003B46  C06C  F060         	movff	clust2sect@clust,___lmul@multiplier
 10136  003B4A  C06D  F061         	movff	clust2sect@clust+1,___lmul@multiplier+1
 10137  003B4E  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
 10138  003B50  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
 10139  003B52  EE20 F01D          	lfsr	2,29
 10140  003B56  5175               	movf	clust2sect@fs& (0+255),w,b
 10141  003B58  26D9               	addwf	fsr2l,f,c
 10142  003B5A  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 10143  003B5C  22DA               	addwfc	fsr2h,f,c
 10144  003B5E  50DF               	movf	indf2,w,c
 10145  003B60  6F74               	movwf	(??_clust2sect+4)& (0+255),b
 10146  003B62  5174               	movf	(??_clust2sect+4)& (0+255),w,b
 10147  003B64  6F64               	movwf	___lmul@multiplicand& (0+255),b
 10148  003B66  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 10149  003B68  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 10150  003B6A  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 10151  003B6C  EC30  F023         	call	___lmul	;wreg free
 10152  003B70  0100               	movlb	0	; () banked
 10153  003B72  5170               	movf	??_clust2sect& (0+255),w,b
 10154  003B74  2560               	addwf	?___lmul& (0+255),w,b
 10155  003B76  6F6C               	movwf	?_clust2sect& (0+255),b
 10156  003B78  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 10157  003B7A  2161               	addwfc	(?___lmul+1)& (0+255),w,b
 10158  003B7C  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 10159  003B7E  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 10160  003B80  2162               	addwfc	(?___lmul+2)& (0+255),w,b
 10161  003B82  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 10162  003B84  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 10163  003B86  2163               	addwfc	(?___lmul+3)& (0+255),w,b
 10164  003B88  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 10165  003B8A  0012               	return	
 10166  003B8C                     __end_of_clust2sect:
 10167                           	opt stack 0
 10168                           tosu	equ	0xFFF
 10169                           tosh	equ	0xFFE
 10170                           tosl	equ	0xFFD
 10171                           pclath	equ	0xFFA
 10172                           tblptru	equ	0xFF8
 10173                           tblptrh	equ	0xFF7
 10174                           tblptrl	equ	0xFF6
 10175                           tablat	equ	0xFF5
 10176                           prodh	equ	0xFF4
 10177                           prodl	equ	0xFF3
 10178                           intcon	equ	0xFF2
 10179                           intcon2	equ	0xFF1
 10180                           intcon3	equ	0xFF0
 10181                           indf0	equ	0xFEF
 10182                           postinc0	equ	0xFEE
 10183                           fsr0h	equ	0xFEA
 10184                           fsr0l	equ	0xFE9
 10185                           wreg	equ	0xFE8
 10186                           indf1	equ	0xFE7
 10187                           postinc1	equ	0xFE6
 10188                           postdec1	equ	0xFE5
 10189                           plusw1	equ	0xFE3
 10190                           fsr1h	equ	0xFE2
 10191                           fsr1l	equ	0xFE1
 10192                           indf2	equ	0xFDF
 10193                           postinc2	equ	0xFDE
 10194                           postdec2	equ	0xFDD
 10195                           plusw2	equ	0xFDB
 10196                           fsr2h	equ	0xFDA
 10197                           fsr2l	equ	0xFD9
 10198                           status	equ	0xFD8
 10199                           
 10200 ;; *************** function _remove_chain *****************
 10201 ;; Defined at:
 10202 ;;		line 249 in file "bibliotecas/tff.c"
 10203 ;; Parameters:    Size  Location     Type
 10204 ;;  clust           2   86[BANK0 ] unsigned short 
 10205 ;; Auto vars:     Size  Location     Type
 10206 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 10207 ;;		 -> NULL(0), fs(544), 
 10208 ;;  nxt             2   90[BANK0 ] unsigned short 
 10209 ;; Return value:  Size  Location     Type
 10210 ;;                  1    wreg      enum E105
 10211 ;; Registers used:
 10212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10213 ;; Tracked objects:
 10214 ;;		On entry : 0/0
 10215 ;;		On exit  : 0/0
 10216 ;;		Unchanged: 0/0
 10217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10218 ;;      Params:         0       2       0       0       0       0       0       0       0
 10219 ;;      Locals:         0       4       0       0       0       0       0       0       0
 10220 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10221 ;;      Totals:         0       8       0       0       0       0       0       0       0
 10222 ;;Total ram usage:        8 bytes
 10223 ;; Hardware stack levels used:    1
 10224 ;; Hardware stack levels required when called:   10
 10225 ;; This function calls:
 10226 ;;		_get_cluster
 10227 ;;		_put_cluster
 10228 ;; This function is called by:
 10229 ;;		_f_open
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           	psect	text36
 10234  003C34                     __ptext36:
 10235                           	opt stack 0
 10236  003C34                     _remove_chain:
 10237                           	opt stack 16
 10238                           
 10239                           ;tff.c: 253: CLUST nxt;
 10240                           ;tff.c: 254: FATFS *fs = FatFs;
 10241                           
 10242                           ; BSR set to: 0
 10243                           ;incstack = 0
 10244  003C34  C0FD  F0BC         	movff	_FatFs,remove_chain@fs
 10245  003C38  C0FE  F0BD         	movff	_FatFs+1,remove_chain@fs+1
 10246                           
 10247                           ;tff.c: 257: while (clust >= 2 && clust < fs->max_clust) {
 10248  003C3C  D039               	goto	l970
 10249  003C3E                     
 10250                           ;tff.c: 258: nxt = get_cluster(clust);
 10251  003C3E  C0B6  F0A0         	movff	remove_chain@clust,get_cluster@clust
 10252  003C42  C0B7  F0A1         	movff	remove_chain@clust+1,get_cluster@clust+1
 10253  003C46  ECD7  F013         	call	_get_cluster	;wreg free
 10254  003C4A  C0A0  F0BA         	movff	?_get_cluster,remove_chain@nxt
 10255  003C4E  C0A1  F0BB         	movff	?_get_cluster+1,remove_chain@nxt+1
 10256                           
 10257                           ;tff.c: 259: if (nxt == 1) return FALSE;
 10258  003C52  0100               	movlb	0	; () banked
 10259  003C54  05BA               	decf	remove_chain@nxt& (0+255),w,b
 10260  003C56  11BB               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 10261  003C58  A4D8               	btfss	status,2,c
 10262  003C5A  D002               	goto	l972
 10263                           
 10264                           ; BSR set to: 0
 10265  003C5C  0E00               	movlw	0
 10266                           
 10267                           ; BSR set to: 0
 10268  003C5E  0012               	return	
 10269  003C60                     l972:
 10270                           
 10271                           ; BSR set to: 0
 10272                           ;tff.c: 260: if (!put_cluster(clust, 0)) return FALSE;
 10273                           
 10274                           ; BSR set to: 0
 10275  003C60  C0B6  F0A0         	movff	remove_chain@clust,put_cluster@clust
 10276  003C64  C0B7  F0A1         	movff	remove_chain@clust+1,put_cluster@clust+1
 10277  003C68  0E00               	movlw	0
 10278  003C6A  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 10279  003C6C  0E00               	movlw	0
 10280  003C6E  6FA2               	movwf	put_cluster@val& (0+255),b
 10281  003C70  EC9A  F012         	call	_put_cluster	;wreg free
 10282  003C74  0900               	iorlw	0
 10283  003C76  A4D8               	btfss	status,2,c
 10284  003C78  D002               	goto	l974
 10285  003C7A  0E00               	movlw	0
 10286  003C7C  0012               	return	
 10287  003C7E                     l974:
 10288                           
 10289                           ;tff.c: 261: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 10290  003C7E  0100               	movlb	0	; () banked
 10291  003C80  EE20 F01A          	lfsr	2,26
 10292  003C84  51BC               	movf	remove_chain@fs& (0+255),w,b
 10293  003C86  26D9               	addwf	fsr2l,f,c
 10294  003C88  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 10295  003C8A  22DA               	addwfc	fsr2h,f,c
 10296  003C8C  28DE               	incf	postinc2,w,c
 10297  003C8E  E103               	bnz	u12570
 10298  003C90  28DE               	incf	postinc2,w,c
 10299  003C92  B4D8               	btfsc	status,2,c
 10300  003C94  D009               	goto	l975
 10301  003C96                     u12570:
 10302                           
 10303                           ; BSR set to: 0
 10304                           ;tff.c: 262: fs->free_clust++;
 10305  003C96  EE20 F01A          	lfsr	2,26
 10306  003C9A  51BC               	movf	remove_chain@fs& (0+255),w,b
 10307  003C9C  26D9               	addwf	fsr2l,f,c
 10308  003C9E  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 10309  003CA0  22DA               	addwfc	fsr2h,f,c
 10310  003CA2  2ADE               	incf	postinc2,f,c
 10311  003CA4  0E00               	movlw	0
 10312  003CA6  22DD               	addwfc	postdec2,f,c
 10313  003CA8                     l975:
 10314                           
 10315                           ; BSR set to: 0
 10316                           ;tff.c: 266: }
 10317                           ;tff.c: 267: clust = nxt;
 10318                           
 10319                           ; BSR set to: 0
 10320  003CA8  C0BA  F0B6         	movff	remove_chain@nxt,remove_chain@clust
 10321  003CAC  C0BB  F0B7         	movff	remove_chain@nxt+1,remove_chain@clust+1
 10322  003CB0                     l970:
 10323                           
 10324                           ; BSR set to: 0
 10325  003CB0  0100               	movlb	0	; () banked
 10326  003CB2  51B7               	movf	(remove_chain@clust+1)& (0+255),w,b
 10327  003CB4  E104               	bnz	u12580
 10328  003CB6  0E02               	movlw	2
 10329  003CB8  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 10330  003CBA  A0D8               	btfss	status,0,c
 10331  003CBC  D00C               	goto	u12590
 10332  003CBE                     u12580:
 10333                           
 10334                           ; BSR set to: 0
 10335  003CBE  EE20 F016          	lfsr	2,22
 10336  003CC2  51BC               	movf	remove_chain@fs& (0+255),w,b
 10337  003CC4  26D9               	addwf	fsr2l,f,c
 10338  003CC6  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 10339  003CC8  22DA               	addwfc	fsr2h,f,c
 10340  003CCA  50DE               	movf	postinc2,w,c
 10341  003CCC  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 10342  003CCE  50DE               	movf	postinc2,w,c
 10343  003CD0  59B7               	subwfb	(remove_chain@clust+1)& (0+255),w,b
 10344  003CD2  A0D8               	btfss	status,0,c
 10345  003CD4  D7B4               	goto	l971
 10346  003CD6                     u12590:
 10347                           
 10348                           ; BSR set to: 0
 10349                           ;tff.c: 268: }
 10350                           ;tff.c: 269: return TRUE;
 10351                           
 10352                           ; BSR set to: 0
 10353                           
 10354                           ; BSR set to: 0
 10355  003CD6  0E01               	movlw	1
 10356  003CD8  0012               	return	
 10357  003CDA                     __end_of_remove_chain:
 10358                           	opt stack 0
 10359                           tosu	equ	0xFFF
 10360                           tosh	equ	0xFFE
 10361                           tosl	equ	0xFFD
 10362                           pclath	equ	0xFFA
 10363                           tblptru	equ	0xFF8
 10364                           tblptrh	equ	0xFF7
 10365                           tblptrl	equ	0xFF6
 10366                           tablat	equ	0xFF5
 10367                           prodh	equ	0xFF4
 10368                           prodl	equ	0xFF3
 10369                           intcon	equ	0xFF2
 10370                           intcon2	equ	0xFF1
 10371                           intcon3	equ	0xFF0
 10372                           indf0	equ	0xFEF
 10373                           postinc0	equ	0xFEE
 10374                           fsr0h	equ	0xFEA
 10375                           fsr0l	equ	0xFE9
 10376                           wreg	equ	0xFE8
 10377                           indf1	equ	0xFE7
 10378                           postinc1	equ	0xFE6
 10379                           postdec1	equ	0xFE5
 10380                           plusw1	equ	0xFE3
 10381                           fsr1h	equ	0xFE2
 10382                           fsr1l	equ	0xFE1
 10383                           indf2	equ	0xFDF
 10384                           postinc2	equ	0xFDE
 10385                           postdec2	equ	0xFDD
 10386                           plusw2	equ	0xFDB
 10387                           fsr2h	equ	0xFDA
 10388                           fsr2l	equ	0xFD9
 10389                           status	equ	0xFD8
 10390                           
 10391 ;; *************** function _memcpy *****************
 10392 ;; Defined at:
 10393 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
 10394 ;; Parameters:    Size  Location     Type
 10395 ;;  d1              2    0[BANK0 ] PTR void 
 10396 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 10397 ;;  s1              2    2[BANK0 ] PTR const void 
 10398 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 10399 ;;		 -> fs(544), 
 10400 ;;  n               2    4[BANK0 ] unsigned int 
 10401 ;; Auto vars:     Size  Location     Type
 10402 ;;  s               2    9[BANK0 ] PTR const unsigned char 
 10403 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 10404 ;;		 -> fs(544), 
 10405 ;;  d               2    7[BANK0 ] PTR unsigned char 
 10406 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 10407 ;;  tmp             1    6[BANK0 ] unsigned char 
 10408 ;; Return value:  Size  Location     Type
 10409 ;;                  2    0[BANK0 ] PTR void 
 10410 ;; Registers used:
 10411 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10412 ;; Tracked objects:
 10413 ;;		On entry : 0/0
 10414 ;;		On exit  : 0/0
 10415 ;;		Unchanged: 0/0
 10416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10417 ;;      Params:         0       6       0       0       0       0       0       0       0
 10418 ;;      Locals:         0       5       0       0       0       0       0       0       0
 10419 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10420 ;;      Totals:         0      11       0       0       0       0       0       0       0
 10421 ;;Total ram usage:       11 bytes
 10422 ;; Hardware stack levels used:    1
 10423 ;; Hardware stack levels required when called:    3
 10424 ;; This function calls:
 10425 ;;		Nothing
 10426 ;; This function is called by:
 10427 ;;		_f_open
 10428 ;;		_f_write
 10429 ;;		_f_read
 10430 ;; This function uses a non-reentrant model
 10431 ;;
 10432                           
 10433                           	psect	text37
 10434  004840                     __ptext37:
 10435                           	opt stack 0
 10436  004840                     _memcpy:
 10437                           	opt stack 20
 10438                           
 10439                           ;incstack = 0
 10440  004840  C062  F069         	movff	memcpy@s1,memcpy@s
 10441  004844  C063  F06A         	movff	memcpy@s1+1,memcpy@s+1
 10442  004848  C060  F067         	movff	memcpy@d1,memcpy@d
 10443  00484C  C061  F068         	movff	memcpy@d1+1,memcpy@d+1
 10444  004850  D011               	goto	l1877
 10445  004852                     l9427:
 10446  004852  C069  FFD9         	movff	memcpy@s,fsr2l
 10447  004856  C06A  FFDA         	movff	memcpy@s+1,fsr2h
 10448  00485A  50DF               	movf	indf2,w,c
 10449  00485C  0100               	movlb	0	; () banked
 10450  00485E  6F66               	movwf	memcpy@tmp& (0+255),b
 10451                           
 10452                           ; BSR set to: 0
 10453  004860  4B69               	infsnz	memcpy@s& (0+255),f,b
 10454  004862  2B6A               	incf	(memcpy@s+1)& (0+255),f,b
 10455                           
 10456                           ; BSR set to: 0
 10457  004864  C067  FFD9         	movff	memcpy@d,fsr2l
 10458  004868  C068  FFDA         	movff	memcpy@d+1,fsr2h
 10459  00486C  C066  FFDF         	movff	memcpy@tmp,indf2
 10460                           
 10461                           ; BSR set to: 0
 10462  004870  4B67               	infsnz	memcpy@d& (0+255),f,b
 10463  004872  2B68               	incf	(memcpy@d+1)& (0+255),f,b
 10464  004874                     l1877:
 10465                           
 10466                           ; BSR set to: 0
 10467  004874  0100               	movlb	0	; () banked
 10468  004876  0764               	decf	memcpy@n& (0+255),f,b
 10469  004878  A0D8               	btfss	status,0,c
 10470  00487A  0765               	decf	(memcpy@n+1)& (0+255),f,b
 10471  00487C  2964               	incf	memcpy@n& (0+255),w,b
 10472  00487E  E1E9               	bnz	l9427
 10473  004880  2965               	incf	(memcpy@n+1)& (0+255),w,b
 10474  004882  B4D8               	btfsc	status,2,c
 10475  004884  0012               	return	
 10476  004886  D7E5               	goto	l1878
 10477  004888                     __end_of_memcpy:
 10478                           	opt stack 0
 10479                           tosu	equ	0xFFF
 10480                           tosh	equ	0xFFE
 10481                           tosl	equ	0xFFD
 10482                           pclath	equ	0xFFA
 10483                           tblptru	equ	0xFF8
 10484                           tblptrh	equ	0xFF7
 10485                           tblptrl	equ	0xFF6
 10486                           tablat	equ	0xFF5
 10487                           prodh	equ	0xFF4
 10488                           prodl	equ	0xFF3
 10489                           intcon	equ	0xFF2
 10490                           intcon2	equ	0xFF1
 10491                           intcon3	equ	0xFF0
 10492                           indf0	equ	0xFEF
 10493                           postinc0	equ	0xFEE
 10494                           fsr0h	equ	0xFEA
 10495                           fsr0l	equ	0xFE9
 10496                           wreg	equ	0xFE8
 10497                           indf1	equ	0xFE7
 10498                           postinc1	equ	0xFE6
 10499                           postdec1	equ	0xFE5
 10500                           plusw1	equ	0xFE3
 10501                           fsr1h	equ	0xFE2
 10502                           fsr1l	equ	0xFE1
 10503                           indf2	equ	0xFDF
 10504                           postinc2	equ	0xFDE
 10505                           postdec2	equ	0xFDD
 10506                           plusw2	equ	0xFDB
 10507                           fsr2h	equ	0xFDA
 10508                           fsr2l	equ	0xFD9
 10509                           status	equ	0xFD8
 10510                           
 10511 ;; *************** function _auto_mount *****************
 10512 ;; Defined at:
 10513 ;;		line 651 in file "bibliotecas/tff.c"
 10514 ;; Parameters:    Size  Location     Type
 10515 ;;  path            2   51[BANK0 ] PTR PTR const unsigned c
 10516 ;;		 -> f_opendir@path(2), f_open@path(2), 
 10517 ;;  chk_wp          1   53[BANK0 ] unsigned char 
 10518 ;; Auto vars:     Size  Location     Type
 10519 ;;  fatsize         4   85[BANK0 ] unsigned long 
 10520 ;;  totalsect       4   77[BANK0 ] unsigned long 
 10521 ;;  bootsect        4   73[BANK0 ] unsigned long 
 10522 ;;  maxclust        4   69[BANK0 ] unsigned long 
 10523 ;;  fs              2   89[BANK0 ] PTR struct _FATFS
 10524 ;;		 -> NULL(0), fs(544), 
 10525 ;;  p               2   81[BANK0 ] PTR const unsigned char 
 10526 ;;		 -> STR_19(13), filename(15), 
 10527 ;;  stat            1   84[BANK0 ] unsigned char 
 10528 ;;  fmt             1   83[BANK0 ] unsigned char 
 10529 ;; Return value:  Size  Location     Type
 10530 ;;                  1    wreg      enum E155
 10531 ;; Registers used:
 10532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10533 ;; Tracked objects:
 10534 ;;		On entry : 0/0
 10535 ;;		On exit  : 0/0
 10536 ;;		Unchanged: 0/0
 10537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10538 ;;      Params:         0       3       0       0       0       0       0       0       0
 10539 ;;      Locals:         0      22       0       0       0       0       0       0       0
 10540 ;;      Temps:          0      15       0       0       0       0       0       0       0
 10541 ;;      Totals:         0      40       0       0       0       0       0       0       0
 10542 ;;Total ram usage:       40 bytes
 10543 ;; Hardware stack levels used:    1
 10544 ;; Hardware stack levels required when called:    9
 10545 ;; This function calls:
 10546 ;;		___lldiv
 10547 ;;		___lmul
 10548 ;;		_check_fs
 10549 ;;		_disk_initialize
 10550 ;;		_disk_status
 10551 ;;		_memset
 10552 ;; This function is called by:
 10553 ;;		_f_open
 10554 ;;		_f_opendir
 10555 ;; This function uses a non-reentrant model
 10556 ;;
 10557                           
 10558                           	psect	text38
 10559  0005CC                     __ptext38:
 10560                           	opt stack 0
 10561  0005CC                     _auto_mount:
 10562                           	opt stack 17
 10563                           
 10564                           ;tff.c: 656: BYTE fmt;
 10565                           ;tff.c: 657: DSTATUS stat;
 10566                           ;tff.c: 658: DWORD bootsect, fatsize, totalsect, maxclust;
 10567                           ;tff.c: 659: const char *p = *path;
 10568                           
 10569                           ; BSR set to: 0
 10570                           ;incstack = 0
 10571  0005CC  C093  FFD9         	movff	auto_mount@path,fsr2l
 10572  0005D0  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 10573  0005D4  CFDE F0B1          	movff	postinc2,auto_mount@p
 10574  0005D8  CFDD F0B2          	movff	postdec2,auto_mount@p+1
 10575                           
 10576                           ;tff.c: 660: FATFS *fs;
 10577                           ;tff.c: 663: while (*p == ' ') p++;
 10578  0005DC  D003               	goto	l1130
 10579  0005DE  0100               	movlb	0	; () banked
 10580  0005E0  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 10581  0005E2  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 10582  0005E4                     l1130:
 10583                           
 10584                           ; BSR set to: 0
 10585  0005E4  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 10586  0005E8  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 10587  0005EC  6AF8               	clrf	tblptru,c
 10588  0005EE  0E07               	movlw	(high __ramtop+-1)
 10589  0005F0  64F7               	cpfsgt	tblptrh,c
 10590  0005F2  D003               	bra	u12867
 10591  0005F4  0008               	tblrd		*
 10592  0005F6  50F5               	movf	tablat,w,c
 10593  0005F8  D005               	bra	u12860
 10594  0005FA                     u12867:
 10595  0005FA  CFF6 FFE9          	movff	tblptrl,fsr0l
 10596  0005FE  CFF7 FFEA          	movff	tblptrh,fsr0h
 10597  000602  50EF               	movf	indf0,w,c
 10598  000604                     u12860:
 10599  000604  0A20               	xorlw	32
 10600  000606  B4D8               	btfsc	status,2,c
 10601  000608  D7EA               	goto	l1131
 10602                           
 10603                           ;tff.c: 664: if (*p == '/') p++;
 10604  00060A  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 10605  00060E  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 10606  000612  6AF8               	clrf	tblptru,c
 10607  000614  0E07               	movlw	(high __ramtop+-1)
 10608  000616  64F7               	cpfsgt	tblptrh,c
 10609  000618  D003               	bra	u12887
 10610  00061A  0008               	tblrd		*
 10611  00061C  50F5               	movf	tablat,w,c
 10612  00061E  D005               	bra	u12880
 10613  000620                     u12887:
 10614  000620  CFF6 FFE9          	movff	tblptrl,fsr0l
 10615  000624  CFF7 FFEA          	movff	tblptrh,fsr0h
 10616  000628  50EF               	movf	indf0,w,c
 10617  00062A                     u12880:
 10618  00062A  0A2F               	xorlw	47
 10619  00062C  A4D8               	btfss	status,2,c
 10620  00062E  D003               	goto	l1133
 10621  000630  0100               	movlb	0	; () banked
 10622  000632  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 10623  000634  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 10624  000636                     l1133:
 10625                           
 10626                           ;tff.c: 665: *path = p;
 10627                           
 10628                           ; BSR set to: 0
 10629  000636  C093  FFD9         	movff	auto_mount@path,fsr2l
 10630  00063A  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 10631  00063E  C0B1  FFDE         	movff	auto_mount@p,postinc2
 10632  000642  C0B2  FFDD         	movff	auto_mount@p+1,postdec2
 10633                           
 10634                           ;tff.c: 668: fs = FatFs;
 10635  000646  C0FD  F0B9         	movff	_FatFs,auto_mount@fs
 10636  00064A  C0FE  F0BA         	movff	_FatFs+1,auto_mount@fs+1
 10637                           
 10638                           ;tff.c: 669: if (!fs) return FR_NOT_ENABLED;
 10639  00064E  0100               	movlb	0	; () banked
 10640  000650  51B9               	movf	auto_mount@fs& (0+255),w,b
 10641  000652  11BA               	iorwf	(auto_mount@fs+1)& (0+255),w,b
 10642  000654  A4D8               	btfss	status,2,c
 10643  000656  D002               	goto	l1134
 10644                           
 10645                           ; BSR set to: 0
 10646  000658  0E0A               	movlw	10
 10647                           
 10648                           ; BSR set to: 0
 10649  00065A  0012               	return	
 10650  00065C                     l1134:
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;tff.c: 671: if (fs->fs_type) {
 10654                           
 10655                           ; BSR set to: 0
 10656  00065C  EE20 F01C          	lfsr	2,28
 10657  000660  51B9               	movf	auto_mount@fs& (0+255),w,b
 10658  000662  26D9               	addwf	fsr2l,f,c
 10659  000664  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10660  000666  22DA               	addwfc	fsr2h,f,c
 10661  000668  50DF               	movf	indf2,w,c
 10662  00066A  B4D8               	btfsc	status,2,c
 10663  00066C  D00F               	goto	l1137
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;tff.c: 672: stat = disk_status(0);
 10667  00066E  0E00               	movlw	0
 10668  000670  EC44  F024         	call	_disk_status
 10669  000674  0100               	movlb	0	; () banked
 10670  000676  6FB4               	movwf	auto_mount@stat& (0+255),b
 10671                           
 10672                           ; BSR set to: 0
 10673                           ;tff.c: 673: if (!(stat & 0x01)) {
 10674  000678  B1B4               	btfsc	auto_mount@stat& (0+255),0,b
 10675  00067A  D008               	goto	l1137
 10676                           
 10677                           ; BSR set to: 0
 10678                           ;tff.c: 675: if (chk_wp && (stat & 0x04))
 10679  00067C  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 10680  00067E  A4D8               	btfss	status,2,c
 10681                           
 10682                           ; BSR set to: 0
 10683  000680  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 10684  000682  D002               	goto	l1138
 10685                           
 10686                           ; BSR set to: 0
 10687                           ;tff.c: 676: return FR_WRITE_PROTECTED;
 10688  000684  0E09               	movlw	9
 10689                           
 10690                           ; BSR set to: 0
 10691  000686  0012               	return	
 10692  000688                     l1138:
 10693                           
 10694                           ; BSR set to: 0
 10695                           ;tff.c: 678: return FR_OK;
 10696                           
 10697                           ; BSR set to: 0
 10698  000688  0E00               	movlw	0
 10699                           
 10700                           ; BSR set to: 0
 10701  00068A  0012               	return	
 10702  00068C                     l1137:
 10703                           
 10704                           ; BSR set to: 0
 10705                           ;tff.c: 679: }
 10706                           ;tff.c: 680: }
 10707                           ;tff.c: 684: memset(fs, 0, sizeof(FATFS));
 10708                           
 10709                           ; BSR set to: 0
 10710                           
 10711                           ; BSR set to: 0
 10712  00068C  C0B9  F060         	movff	auto_mount@fs,memset@p1
 10713  000690  C0BA  F061         	movff	auto_mount@fs+1,memset@p1+1
 10714  000694  0E00               	movlw	0
 10715  000696  6F63               	movwf	(memset@c+1)& (0+255),b
 10716  000698  0E00               	movlw	0
 10717  00069A  6F62               	movwf	memset@c& (0+255),b
 10718  00069C  0E02               	movlw	2
 10719  00069E  6F65               	movwf	(memset@n+1)& (0+255),b
 10720  0006A0  0E20               	movlw	32
 10721  0006A2  6F64               	movwf	memset@n& (0+255),b
 10722  0006A4  EC43  F025         	call	_memset	;wreg free
 10723                           
 10724                           ;tff.c: 685: stat = disk_initialize(0);
 10725  0006A8  0E00               	movlw	0
 10726  0006AA  ECEE  F024         	call	_disk_initialize
 10727  0006AE  0100               	movlb	0	; () banked
 10728  0006B0  6FB4               	movwf	auto_mount@stat& (0+255),b
 10729                           
 10730                           ; BSR set to: 0
 10731                           ;tff.c: 686: if (stat & 0x01)
 10732  0006B2  A1B4               	btfss	auto_mount@stat& (0+255),0,b
 10733  0006B4  D002               	goto	l1139
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;tff.c: 687: return FR_NOT_READY;
 10737  0006B6  0E01               	movlw	1
 10738                           
 10739                           ; BSR set to: 0
 10740  0006B8  0012               	return	
 10741  0006BA                     l1139:
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;tff.c: 689: if (chk_wp && (stat & 0x04))
 10745                           
 10746                           ; BSR set to: 0
 10747  0006BA  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 10748  0006BC  A4D8               	btfss	status,2,c
 10749                           
 10750                           ; BSR set to: 0
 10751  0006BE  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 10752  0006C0  D002               	goto	l1140
 10753                           
 10754                           ; BSR set to: 0
 10755                           ;tff.c: 690: return FR_WRITE_PROTECTED;
 10756  0006C2  0E09               	movlw	9
 10757                           
 10758                           ; BSR set to: 0
 10759  0006C4  0012               	return	
 10760  0006C6                     l1140:
 10761                           
 10762                           ; BSR set to: 0
 10763                           ;tff.c: 694: fmt = check_fs(bootsect = 0);
 10764                           
 10765                           ; BSR set to: 0
 10766  0006C6  0E00               	movlw	0
 10767  0006C8  6FA9               	movwf	auto_mount@bootsect& (0+255),b
 10768  0006CA  0E00               	movlw	0
 10769  0006CC  6FAA               	movwf	(auto_mount@bootsect+1)& (0+255),b
 10770  0006CE  0E00               	movlw	0
 10771  0006D0  6FAB               	movwf	(auto_mount@bootsect+2)& (0+255),b
 10772  0006D2  0E00               	movlw	0
 10773  0006D4  6FAC               	movwf	(auto_mount@bootsect+3)& (0+255),b
 10774  0006D6  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 10775  0006DA  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 10776  0006DE  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 10777  0006E2  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 10778  0006E6  EC40  F020         	call	_check_fs	;wreg free
 10779  0006EA  0100               	movlb	0	; () banked
 10780  0006EC  6FB3               	movwf	auto_mount@fmt& (0+255),b
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;tff.c: 696: if (fmt == 1) {
 10784  0006EE  05B3               	decf	auto_mount@fmt& (0+255),w,b
 10785  0006F0  A4D8               	btfss	status,2,c
 10786  0006F2  D023               	goto	l1142
 10787                           
 10788                           ; BSR set to: 0
 10789                           ;tff.c: 698: if (fs->win[446+4]) {
 10790  0006F4  EE21 F0E2          	lfsr	2,482
 10791  0006F8  51B9               	movf	auto_mount@fs& (0+255),w,b
 10792  0006FA  26D9               	addwf	fsr2l,f,c
 10793  0006FC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10794  0006FE  22DA               	addwfc	fsr2h,f,c
 10795  000700  50DF               	movf	indf2,w,c
 10796  000702  B4D8               	btfsc	status,2,c
 10797  000704  D01A               	goto	l1142
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;tff.c: 699: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 10801  000706  EE21 F0E6          	lfsr	2,486
 10802  00070A  51B9               	movf	auto_mount@fs& (0+255),w,b
 10803  00070C  26D9               	addwf	fsr2l,f,c
 10804  00070E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10805  000710  22DA               	addwfc	fsr2h,f,c
 10806  000712  CFDE F0A9          	movff	postinc2,auto_mount@bootsect
 10807  000716  CFDE F0AA          	movff	postinc2,auto_mount@bootsect+1
 10808  00071A  CFDE F0AB          	movff	postinc2,auto_mount@bootsect+2
 10809  00071E  CFDE F0AC          	movff	postinc2,auto_mount@bootsect+3
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;tff.c: 700: fmt = check_fs(bootsect);
 10813  000722  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 10814  000726  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 10815  00072A  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 10816  00072E  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 10817  000732  EC40  F020         	call	_check_fs	;wreg free
 10818  000736  0100               	movlb	0	; () banked
 10819  000738  6FB3               	movwf	auto_mount@fmt& (0+255),b
 10820  00073A                     l1142:
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;tff.c: 701: }
 10824                           ;tff.c: 702: }
 10825                           ;tff.c: 703: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])) != 512U)
 10826                           
 10827                           ; BSR set to: 0
 10828                           
 10829                           ; BSR set to: 0
 10830  00073A  51B3               	movf	auto_mount@fmt& (0+255),w,b
 10831  00073C  A4D8               	btfss	status,2,c
 10832  00073E  D00C               	goto	u13010
 10833                           
 10834                           ; BSR set to: 0
 10835  000740  EE20 F02B          	lfsr	2,43
 10836  000744  51B9               	movf	auto_mount@fs& (0+255),w,b
 10837  000746  26D9               	addwf	fsr2l,f,c
 10838  000748  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10839  00074A  22DA               	addwfc	fsr2h,f,c
 10840  00074C  50DE               	movf	postinc2,w,c
 10841  00074E  E104               	bnz	l10323
 10842  000750  0E02               	movlw	2
 10843  000752  18DE               	xorwf	postinc2,w,c
 10844  000754  B4D8               	btfsc	status,2,c
 10845  000756  D002               	goto	l1143
 10846  000758                     u13010:
 10847  000758                     l10323:
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;tff.c: 704: return FR_NO_FILESYSTEM;
 10851  000758  0E0B               	movlw	11
 10852                           
 10853                           ; BSR set to: 0
 10854  00075A  0012               	return	
 10855  00075C                     l1143:
 10856                           
 10857                           ; BSR set to: 0
 10858                           ;tff.c: 707: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 10859                           
 10860                           ; BSR set to: 0
 10861  00075C  EE20 F036          	lfsr	2,54
 10862  000760  51B9               	movf	auto_mount@fs& (0+255),w,b
 10863  000762  26D9               	addwf	fsr2l,f,c
 10864  000764  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10865  000766  22DA               	addwfc	fsr2h,f,c
 10866  000768  CFDE F096          	movff	postinc2,??_auto_mount
 10867  00076C  CFDD F097          	movff	postdec2,??_auto_mount+1
 10868  000770  C096  F0B5         	movff	??_auto_mount,auto_mount@fatsize
 10869  000774  C097  F0B6         	movff	??_auto_mount+1,auto_mount@fatsize+1
 10870  000778  6BB7               	clrf	(auto_mount@fatsize+2)& (0+255),b
 10871  00077A  6BB8               	clrf	(auto_mount@fatsize+3)& (0+255),b
 10872                           
 10873                           ; BSR set to: 0
 10874                           ;tff.c: 708: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 10875  00077C  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 10876  00077E  11B6               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 10877  000780  11B7               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 10878  000782  11B8               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 10879  000784  A4D8               	btfss	status,2,c
 10880  000786  D00E               	goto	l1146
 10881                           
 10882                           ; BSR set to: 0
 10883  000788  EE20 F044          	lfsr	2,68
 10884  00078C  51B9               	movf	auto_mount@fs& (0+255),w,b
 10885  00078E  26D9               	addwf	fsr2l,f,c
 10886  000790  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10887  000792  22DA               	addwfc	fsr2h,f,c
 10888  000794  CFDE F0B5          	movff	postinc2,auto_mount@fatsize
 10889  000798  CFDE F0B6          	movff	postinc2,auto_mount@fatsize+1
 10890  00079C  CFDE F0B7          	movff	postinc2,auto_mount@fatsize+2
 10891  0007A0  CFDE F0B8          	movff	postinc2,auto_mount@fatsize+3
 10892  0007A4                     l1146:
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;tff.c: 709: fs->sects_fat = (CLUST)fatsize;
 10896  0007A4  EE20 F014          	lfsr	2,20
 10897  0007A8  51B9               	movf	auto_mount@fs& (0+255),w,b
 10898  0007AA  26D9               	addwf	fsr2l,f,c
 10899  0007AC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10900  0007AE  22DA               	addwfc	fsr2h,f,c
 10901  0007B0  C0B5  FFDE         	movff	auto_mount@fatsize,postinc2
 10902  0007B4  C0B6  FFDD         	movff	auto_mount@fatsize+1,postdec2
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;tff.c: 710: fs->n_fats = fs->win[16];
 10906  0007B8  EE20 F030          	lfsr	2,48
 10907  0007BC  51B9               	movf	auto_mount@fs& (0+255),w,b
 10908  0007BE  26D9               	addwf	fsr2l,f,c
 10909  0007C0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10910  0007C2  22DA               	addwfc	fsr2h,f,c
 10911  0007C4  EE10 F01E          	lfsr	1,30
 10912  0007C8  51B9               	movf	auto_mount@fs& (0+255),w,b
 10913  0007CA  26E1               	addwf	fsr1l,f,c
 10914  0007CC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10915  0007CE  22E2               	addwfc	fsr1h,f,c
 10916  0007D0  CFDF FFE7          	movff	indf2,indf1
 10917                           
 10918                           ; BSR set to: 0
 10919                           ;tff.c: 711: fatsize *= fs->n_fats;
 10920  0007D4  C0B5  F060         	movff	auto_mount@fatsize,___lmul@multiplier
 10921  0007D8  C0B6  F061         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 10922  0007DC  C0B7  F062         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 10923  0007E0  C0B8  F063         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 10924  0007E4  EE20 F01E          	lfsr	2,30
 10925  0007E8  51B9               	movf	auto_mount@fs& (0+255),w,b
 10926  0007EA  26D9               	addwf	fsr2l,f,c
 10927  0007EC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10928  0007EE  22DA               	addwfc	fsr2h,f,c
 10929  0007F0  50DF               	movf	indf2,w,c
 10930  0007F2  6F96               	movwf	??_auto_mount& (0+255),b
 10931  0007F4  5196               	movf	??_auto_mount& (0+255),w,b
 10932  0007F6  6F64               	movwf	___lmul@multiplicand& (0+255),b
 10933  0007F8  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 10934  0007FA  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 10935  0007FC  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 10936  0007FE  EC30  F023         	call	___lmul	;wreg free
 10937  000802  C060  F0B5         	movff	?___lmul,auto_mount@fatsize
 10938  000806  C061  F0B6         	movff	?___lmul+1,auto_mount@fatsize+1
 10939  00080A  C062  F0B7         	movff	?___lmul+2,auto_mount@fatsize+2
 10940  00080E  C063  F0B8         	movff	?___lmul+3,auto_mount@fatsize+3
 10941                           
 10942                           ;tff.c: 712: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 10943  000812  0100               	movlb	0	; () banked
 10944  000814  EE20 F02E          	lfsr	2,46
 10945  000818  51B9               	movf	auto_mount@fs& (0+255),w,b
 10946  00081A  26D9               	addwf	fsr2l,f,c
 10947  00081C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10948  00081E  22DA               	addwfc	fsr2h,f,c
 10949  000820  CFDE F096          	movff	postinc2,??_auto_mount
 10950  000824  CFDD F097          	movff	postdec2,??_auto_mount+1
 10951  000828  5196               	movf	??_auto_mount& (0+255),w,b
 10952  00082A  25A9               	addwf	auto_mount@bootsect& (0+255),w,b
 10953  00082C  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 10954  00082E  5197               	movf	(??_auto_mount+1)& (0+255),w,b
 10955  000830  21AA               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 10956  000832  6F99               	movwf	(??_auto_mount+3)& (0+255),b
 10957  000834  0E00               	movlw	0
 10958  000836  21AB               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 10959  000838  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 10960  00083A  0E00               	movlw	0
 10961  00083C  21AC               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 10962  00083E  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 10963  000840  EE20 F008          	lfsr	2,8
 10964  000844  51B9               	movf	auto_mount@fs& (0+255),w,b
 10965  000846  26D9               	addwf	fsr2l,f,c
 10966  000848  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10967  00084A  22DA               	addwfc	fsr2h,f,c
 10968  00084C  C098  FFDE         	movff	??_auto_mount+2,postinc2
 10969  000850  C099  FFDE         	movff	??_auto_mount+3,postinc2
 10970  000854  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 10971  000858  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;tff.c: 713: fs->csize = fs->win[13];
 10975  00085C  EE20 F02D          	lfsr	2,45
 10976  000860  51B9               	movf	auto_mount@fs& (0+255),w,b
 10977  000862  26D9               	addwf	fsr2l,f,c
 10978  000864  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10979  000866  22DA               	addwfc	fsr2h,f,c
 10980  000868  EE10 F01D          	lfsr	1,29
 10981  00086C  51B9               	movf	auto_mount@fs& (0+255),w,b
 10982  00086E  26E1               	addwf	fsr1l,f,c
 10983  000870  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10984  000872  22E2               	addwfc	fsr1h,f,c
 10985  000874  CFDF FFE7          	movff	indf2,indf1
 10986                           
 10987                           ; BSR set to: 0
 10988                           ;tff.c: 714: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 10989  000878  EE20 F031          	lfsr	2,49
 10990  00087C  51B9               	movf	auto_mount@fs& (0+255),w,b
 10991  00087E  26D9               	addwf	fsr2l,f,c
 10992  000880  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10993  000882  22DA               	addwfc	fsr2h,f,c
 10994  000884  EE10 F002          	lfsr	1,2
 10995  000888  51B9               	movf	auto_mount@fs& (0+255),w,b
 10996  00088A  26E1               	addwf	fsr1l,f,c
 10997  00088C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 10998  00088E  22E2               	addwfc	fsr1h,f,c
 10999  000890  CFDE FFE6          	movff	postinc2,postinc1
 11000  000894  CFDD FFE5          	movff	postdec2,postdec1
 11001                           
 11002                           ; BSR set to: 0
 11003                           ;tff.c: 715: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 11004  000898  EE20 F033          	lfsr	2,51
 11005  00089C  51B9               	movf	auto_mount@fs& (0+255),w,b
 11006  00089E  26D9               	addwf	fsr2l,f,c
 11007  0008A0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11008  0008A2  22DA               	addwfc	fsr2h,f,c
 11009  0008A4  CFDE F096          	movff	postinc2,??_auto_mount
 11010  0008A8  CFDD F097          	movff	postdec2,??_auto_mount+1
 11011  0008AC  C096  F0AD         	movff	??_auto_mount,auto_mount@totalsect
 11012  0008B0  C097  F0AE         	movff	??_auto_mount+1,auto_mount@totalsect+1
 11013  0008B4  6BAF               	clrf	(auto_mount@totalsect+2)& (0+255),b
 11014  0008B6  6BB0               	clrf	(auto_mount@totalsect+3)& (0+255),b
 11015                           
 11016                           ; BSR set to: 0
 11017                           ;tff.c: 716: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 11018  0008B8  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 11019  0008BA  11AE               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 11020  0008BC  11AF               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 11021  0008BE  11B0               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 11022  0008C0  A4D8               	btfss	status,2,c
 11023  0008C2  D00E               	goto	l1147
 11024                           
 11025                           ; BSR set to: 0
 11026  0008C4  EE20 F040          	lfsr	2,64
 11027  0008C8  51B9               	movf	auto_mount@fs& (0+255),w,b
 11028  0008CA  26D9               	addwf	fsr2l,f,c
 11029  0008CC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11030  0008CE  22DA               	addwfc	fsr2h,f,c
 11031  0008D0  CFDE F0AD          	movff	postinc2,auto_mount@totalsect
 11032  0008D4  CFDE F0AE          	movff	postinc2,auto_mount@totalsect+1
 11033  0008D8  CFDE F0AF          	movff	postinc2,auto_mount@totalsect+2
 11034  0008DC  CFDE F0B0          	movff	postinc2,auto_mount@totalsect+3
 11035  0008E0                     l1147:
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;tff.c: 717: fs->max_clust = maxclust = (totalsect
 11039                           ;tff.c: 718: - (WORD)(*(WORD*)(BYTE*)(&fs->win[14])) - fatsize - fs->n_rootdir / 16
 11040                           ;tff.c: 719: ) / fs->csize + 2;
 11041                           
 11042                           ; BSR set to: 0
 11043  0008E0  EE20 F002          	lfsr	2,2
 11044  0008E4  51B9               	movf	auto_mount@fs& (0+255),w,b
 11045  0008E6  26D9               	addwf	fsr2l,f,c
 11046  0008E8  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11047  0008EA  22DA               	addwfc	fsr2h,f,c
 11048  0008EC  CFDE F096          	movff	postinc2,??_auto_mount
 11049  0008F0  CFDD F097          	movff	postdec2,??_auto_mount+1
 11050  0008F4  0E04               	movlw	4
 11051  0008F6  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 11052  0008F8                     u13045:
 11053  0008F8  90D8               	bcf	status,0,c
 11054  0008FA  3397               	rrcf	(??_auto_mount+1)& (0+255),f,b
 11055  0008FC  3396               	rrcf	??_auto_mount& (0+255),f,b
 11056  0008FE  2F98               	decfsz	(??_auto_mount+2)& (0+255),f,b
 11057  000900  D7FB               	goto	u13045
 11058  000902  EE20 F02E          	lfsr	2,46
 11059  000906  51B9               	movf	auto_mount@fs& (0+255),w,b
 11060  000908  26D9               	addwf	fsr2l,f,c
 11061  00090A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11062  00090C  22DA               	addwfc	fsr2h,f,c
 11063  00090E  CFDE F099          	movff	postinc2,??_auto_mount+3
 11064  000912  CFDD F09A          	movff	postdec2,??_auto_mount+4
 11065  000916  5199               	movf	(??_auto_mount+3)& (0+255),w,b
 11066  000918  2596               	addwf	??_auto_mount& (0+255),w,b
 11067  00091A  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 11068  00091C  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 11069  00091E  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11070  000920  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 11071  000922  6B9D               	clrf	(??_auto_mount+7)& (0+255),b
 11072  000924  B0D8               	btfsc	status,0,c
 11073  000926  2B9D               	incf	(??_auto_mount+7)& (0+255),f,b
 11074  000928  6B9E               	clrf	(??_auto_mount+8)& (0+255),b
 11075  00092A  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 11076  00092C  259B               	addwf	(??_auto_mount+5)& (0+255),w,b
 11077  00092E  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 11078  000930  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11079  000932  219C               	addwfc	(??_auto_mount+6)& (0+255),w,b
 11080  000934  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 11081  000936  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11082  000938  219D               	addwfc	(??_auto_mount+7)& (0+255),w,b
 11083  00093A  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 11084  00093C  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11085  00093E  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 11086  000940  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 11087  000942  1F9F               	comf	(??_auto_mount+9)& (0+255),f,b
 11088  000944  1FA0               	comf	(??_auto_mount+10)& (0+255),f,b
 11089  000946  1FA1               	comf	(??_auto_mount+11)& (0+255),f,b
 11090  000948  1FA2               	comf	(??_auto_mount+12)& (0+255),f,b
 11091  00094A  2B9F               	incf	(??_auto_mount+9)& (0+255),f,b
 11092  00094C  0E00               	movlw	0
 11093  00094E  23A0               	addwfc	(??_auto_mount+10)& (0+255),f,b
 11094  000950  23A1               	addwfc	(??_auto_mount+11)& (0+255),f,b
 11095  000952  23A2               	addwfc	(??_auto_mount+12)& (0+255),f,b
 11096  000954  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 11097  000956  259F               	addwf	(??_auto_mount+9)& (0+255),w,b
 11098  000958  6F60               	movwf	___lldiv@dividend& (0+255),b
 11099  00095A  51AE               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 11100  00095C  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 11101  00095E  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 11102  000960  51AF               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 11103  000962  21A1               	addwfc	(??_auto_mount+11)& (0+255),w,b
 11104  000964  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 11105  000966  51B0               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 11106  000968  21A2               	addwfc	(??_auto_mount+12)& (0+255),w,b
 11107  00096A  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 11108  00096C  EE20 F01D          	lfsr	2,29
 11109  000970  51B9               	movf	auto_mount@fs& (0+255),w,b
 11110  000972  26D9               	addwf	fsr2l,f,c
 11111  000974  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11112  000976  22DA               	addwfc	fsr2h,f,c
 11113  000978  50DF               	movf	indf2,w,c
 11114  00097A  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 11115  00097C  51A3               	movf	(??_auto_mount+13)& (0+255),w,b
 11116  00097E  6F64               	movwf	___lldiv@divisor& (0+255),b
 11117  000980  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 11118  000982  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 11119  000984  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 11120  000986  EC4F  F021         	call	___lldiv	;wreg free
 11121  00098A  0E02               	movlw	2
 11122  00098C  0100               	movlb	0	; () banked
 11123  00098E  2560               	addwf	?___lldiv& (0+255),w,b
 11124  000990  6FA5               	movwf	auto_mount@maxclust& (0+255),b
 11125  000992  0E00               	movlw	0
 11126  000994  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 11127  000996  6FA6               	movwf	(auto_mount@maxclust+1)& (0+255),b
 11128  000998  0E00               	movlw	0
 11129  00099A  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
 11130  00099C  6FA7               	movwf	(auto_mount@maxclust+2)& (0+255),b
 11131  00099E  0E00               	movlw	0
 11132  0009A0  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
 11133  0009A2  6FA8               	movwf	(auto_mount@maxclust+3)& (0+255),b
 11134  0009A4  EE20 F016          	lfsr	2,22
 11135  0009A8  51B9               	movf	auto_mount@fs& (0+255),w,b
 11136  0009AA  26D9               	addwf	fsr2l,f,c
 11137  0009AC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11138  0009AE  22DA               	addwfc	fsr2h,f,c
 11139  0009B0  C0A5  FFDE         	movff	auto_mount@maxclust,postinc2
 11140  0009B4  C0A6  FFDD         	movff	auto_mount@maxclust+1,postdec2
 11141                           
 11142                           ; BSR set to: 0
 11143                           ;tff.c: 721: fmt = 1;
 11144  0009B8  0E01               	movlw	1
 11145  0009BA  6FB3               	movwf	auto_mount@fmt& (0+255),b
 11146                           
 11147                           ; BSR set to: 0
 11148                           ;tff.c: 722: if (maxclust >= 0xFF7) fmt = 2;
 11149  0009BC  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 11150  0009BE  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 11151  0009C0  E106               	bnz	u13050
 11152  0009C2  0EF7               	movlw	247
 11153  0009C4  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 11154  0009C6  0E0F               	movlw	15
 11155  0009C8  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 11156  0009CA  A0D8               	btfss	status,0,c
 11157  0009CC  D002               	goto	l1148
 11158  0009CE                     u13050:
 11159                           
 11160                           ; BSR set to: 0
 11161  0009CE  0E02               	movlw	2
 11162  0009D0  6FB3               	movwf	auto_mount@fmt& (0+255),b
 11163  0009D2                     l1148:
 11164                           
 11165                           ; BSR set to: 0
 11166                           ;tff.c: 723: if (maxclust >= 0xFFF7)
 11167                           
 11168                           ; BSR set to: 0
 11169  0009D2  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 11170  0009D4  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 11171  0009D6  E106               	bnz	u13060
 11172  0009D8  0EF7               	movlw	247
 11173  0009DA  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 11174  0009DC  0EFF               	movlw	255
 11175  0009DE  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 11176  0009E0  A0D8               	btfss	status,0,c
 11177  0009E2  D002               	goto	l1149
 11178  0009E4                     u13060:
 11179                           
 11180                           ; BSR set to: 0
 11181                           ;tff.c: 725: return FR_NO_FILESYSTEM;
 11182  0009E4  0E0B               	movlw	11
 11183                           
 11184                           ; BSR set to: 0
 11185  0009E6  0012               	return	
 11186  0009E8                     l1149:
 11187                           
 11188                           ; BSR set to: 0
 11189                           ;tff.c: 732: fs->dirbase = fs->fatbase + fatsize;
 11190                           
 11191                           ; BSR set to: 0
 11192  0009E8  EE20 F008          	lfsr	2,8
 11193  0009EC  51B9               	movf	auto_mount@fs& (0+255),w,b
 11194  0009EE  26D9               	addwf	fsr2l,f,c
 11195  0009F0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11196  0009F2  22DA               	addwfc	fsr2h,f,c
 11197  0009F4  CFDE F096          	movff	postinc2,??_auto_mount
 11198  0009F8  CFDE F097          	movff	postinc2,??_auto_mount+1
 11199  0009FC  CFDE F098          	movff	postinc2,??_auto_mount+2
 11200  000A00  CFDE F099          	movff	postinc2,??_auto_mount+3
 11201  000A04  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 11202  000A06  2596               	addwf	??_auto_mount& (0+255),w,b
 11203  000A08  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 11204  000A0A  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11205  000A0C  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11206  000A0E  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 11207  000A10  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11208  000A12  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 11209  000A14  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 11210  000A16  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11211  000A18  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 11212  000A1A  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 11213  000A1C  EE20 F00C          	lfsr	2,12
 11214  000A20  51B9               	movf	auto_mount@fs& (0+255),w,b
 11215  000A22  26D9               	addwf	fsr2l,f,c
 11216  000A24  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11217  000A26  22DA               	addwfc	fsr2h,f,c
 11218  000A28  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 11219  000A2C  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 11220  000A30  C09C  FFDE         	movff	??_auto_mount+6,postinc2
 11221  000A34  C09D  FFDE         	movff	??_auto_mount+7,postinc2
 11222                           
 11223                           ;tff.c: 733: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 11224  000A38  EE20 F008          	lfsr	2,8
 11225  000A3C  51B9               	movf	auto_mount@fs& (0+255),w,b
 11226  000A3E  26D9               	addwf	fsr2l,f,c
 11227  000A40  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11228  000A42  22DA               	addwfc	fsr2h,f,c
 11229  000A44  CFDE F096          	movff	postinc2,??_auto_mount
 11230  000A48  CFDE F097          	movff	postinc2,??_auto_mount+1
 11231  000A4C  CFDE F098          	movff	postinc2,??_auto_mount+2
 11232  000A50  CFDE F099          	movff	postinc2,??_auto_mount+3
 11233  000A54  EE20 F002          	lfsr	2,2
 11234  000A58  51B9               	movf	auto_mount@fs& (0+255),w,b
 11235  000A5A  26D9               	addwf	fsr2l,f,c
 11236  000A5C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11237  000A5E  22DA               	addwfc	fsr2h,f,c
 11238  000A60  CFDE F09A          	movff	postinc2,??_auto_mount+4
 11239  000A64  CFDD F09B          	movff	postdec2,??_auto_mount+5
 11240  000A68  0E04               	movlw	4
 11241  000A6A  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 11242  000A6C                     u13075:
 11243  000A6C  90D8               	bcf	status,0,c
 11244  000A6E  339B               	rrcf	(??_auto_mount+5)& (0+255),f,b
 11245  000A70  339A               	rrcf	(??_auto_mount+4)& (0+255),f,b
 11246  000A72  2F9C               	decfsz	(??_auto_mount+6)& (0+255),f,b
 11247  000A74  D7FB               	goto	u13075
 11248  000A76  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 11249  000A78  2596               	addwf	??_auto_mount& (0+255),w,b
 11250  000A7A  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 11251  000A7C  519B               	movf	(??_auto_mount+5)& (0+255),w,b
 11252  000A7E  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11253  000A80  6F9E               	movwf	(??_auto_mount+8)& (0+255),b
 11254  000A82  0E00               	movlw	0
 11255  000A84  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 11256  000A86  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 11257  000A88  0E00               	movlw	0
 11258  000A8A  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 11259  000A8C  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 11260  000A8E  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 11261  000A90  259D               	addwf	(??_auto_mount+7)& (0+255),w,b
 11262  000A92  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 11263  000A94  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11264  000A96  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 11265  000A98  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 11266  000A9A  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11267  000A9C  219F               	addwfc	(??_auto_mount+9)& (0+255),w,b
 11268  000A9E  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 11269  000AA0  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11270  000AA2  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 11271  000AA4  6FA4               	movwf	(??_auto_mount+14)& (0+255),b
 11272  000AA6  EE20 F010          	lfsr	2,16
 11273  000AAA  51B9               	movf	auto_mount@fs& (0+255),w,b
 11274  000AAC  26D9               	addwf	fsr2l,f,c
 11275  000AAE  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11276  000AB0  22DA               	addwfc	fsr2h,f,c
 11277  000AB2  C0A1  FFDE         	movff	??_auto_mount+11,postinc2
 11278  000AB6  C0A2  FFDE         	movff	??_auto_mount+12,postinc2
 11279  000ABA  C0A3  FFDE         	movff	??_auto_mount+13,postinc2
 11280  000ABE  C0A4  FFDE         	movff	??_auto_mount+14,postinc2
 11281                           
 11282                           ;tff.c: 737: fs->free_clust = (CLUST)0xFFFFFFFF;
 11283  000AC2  EE20 F01A          	lfsr	2,26
 11284  000AC6  51B9               	movf	auto_mount@fs& (0+255),w,b
 11285  000AC8  26D9               	addwf	fsr2l,f,c
 11286  000ACA  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11287  000ACC  22DA               	addwfc	fsr2h,f,c
 11288  000ACE  0EFF               	movlw	255
 11289  000AD0  6EDE               	movwf	postinc2,c
 11290  000AD2  0EFF               	movlw	255
 11291  000AD4  6EDD               	movwf	postdec2,c
 11292                           
 11293                           ;tff.c: 753: fs->fs_type = fmt;
 11294  000AD6  EE20 F01C          	lfsr	2,28
 11295  000ADA  51B9               	movf	auto_mount@fs& (0+255),w,b
 11296  000ADC  26D9               	addwf	fsr2l,f,c
 11297  000ADE  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 11298  000AE0  22DA               	addwfc	fsr2h,f,c
 11299  000AE2  C0B3  FFDF         	movff	auto_mount@fmt,indf2
 11300                           
 11301                           ; BSR set to: 0
 11302                           ;tff.c: 754: fs->id = ++fsid;
 11303  000AE6  4BFB               	infsnz	_fsid& (0+255),f,b
 11304  000AE8  2BFC               	incf	(_fsid+1)& (0+255),f,b
 11305  000AEA  C0B9  FFD9         	movff	auto_mount@fs,fsr2l
 11306  000AEE  C0BA  FFDA         	movff	auto_mount@fs+1,fsr2h
 11307  000AF2  C0FB  FFDE         	movff	_fsid,postinc2
 11308  000AF6  C0FC  FFDD         	movff	_fsid+1,postdec2
 11309                           
 11310                           ;tff.c: 755: return FR_OK;
 11311  000AFA  0E00               	movlw	0
 11312  000AFC  0012               	return	
 11313  000AFE                     __end_of_auto_mount:
 11314                           	opt stack 0
 11315                           tosu	equ	0xFFF
 11316                           tosh	equ	0xFFE
 11317                           tosl	equ	0xFFD
 11318                           pclath	equ	0xFFA
 11319                           tblptru	equ	0xFF8
 11320                           tblptrh	equ	0xFF7
 11321                           tblptrl	equ	0xFF6
 11322                           tablat	equ	0xFF5
 11323                           prodh	equ	0xFF4
 11324                           prodl	equ	0xFF3
 11325                           intcon	equ	0xFF2
 11326                           intcon2	equ	0xFF1
 11327                           intcon3	equ	0xFF0
 11328                           indf0	equ	0xFEF
 11329                           postinc0	equ	0xFEE
 11330                           fsr0h	equ	0xFEA
 11331                           fsr0l	equ	0xFE9
 11332                           wreg	equ	0xFE8
 11333                           indf1	equ	0xFE7
 11334                           postinc1	equ	0xFE6
 11335                           postdec1	equ	0xFE5
 11336                           plusw1	equ	0xFE3
 11337                           fsr1h	equ	0xFE2
 11338                           fsr1l	equ	0xFE1
 11339                           indf2	equ	0xFDF
 11340                           postinc2	equ	0xFDE
 11341                           postdec2	equ	0xFDD
 11342                           plusw2	equ	0xFDB
 11343                           fsr2h	equ	0xFDA
 11344                           fsr2l	equ	0xFD9
 11345                           status	equ	0xFD8
 11346                           
 11347 ;; *************** function _memset *****************
 11348 ;; Defined at:
 11349 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 11350 ;; Parameters:    Size  Location     Type
 11351 ;;  p1              2    0[BANK0 ] PTR void 
 11352 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 11353 ;;  c               2    2[BANK0 ] int 
 11354 ;;  n               2    4[BANK0 ] unsigned int 
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;  p               2    6[BANK0 ] PTR unsigned char 
 11357 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 11358 ;; Return value:  Size  Location     Type
 11359 ;;                  2    0[BANK0 ] PTR void 
 11360 ;; Registers used:
 11361 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11362 ;; Tracked objects:
 11363 ;;		On entry : 0/0
 11364 ;;		On exit  : 0/0
 11365 ;;		Unchanged: 0/0
 11366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11367 ;;      Params:         0       6       0       0       0       0       0       0       0
 11368 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11369 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11370 ;;      Totals:         0       8       0       0       0       0       0       0       0
 11371 ;;Total ram usage:        8 bytes
 11372 ;; Hardware stack levels used:    1
 11373 ;; Hardware stack levels required when called:    3
 11374 ;; This function calls:
 11375 ;;		Nothing
 11376 ;; This function is called by:
 11377 ;;		_make_dirfile
 11378 ;;		_reserve_direntry
 11379 ;;		_auto_mount
 11380 ;;		_f_open
 11381 ;; This function uses a non-reentrant model
 11382 ;;
 11383                           
 11384                           	psect	text39
 11385  004A86                     __ptext39:
 11386                           	opt stack 0
 11387  004A86                     _memset:
 11388                           	opt stack 21
 11389                           
 11390                           ; BSR set to: 0
 11391                           ;incstack = 0
 11392  004A86  C060  F066         	movff	memset@p1,memset@p
 11393  004A8A  C061  F067         	movff	memset@p1+1,memset@p+1
 11394  004A8E  D009               	goto	l1883
 11395  004A90                     l9613:
 11396  004A90  C066  FFD9         	movff	memset@p,fsr2l
 11397  004A94  C067  FFDA         	movff	memset@p+1,fsr2h
 11398  004A98  C062  FFDF         	movff	memset@c,indf2
 11399  004A9C  0100               	movlb	0	; () banked
 11400  004A9E  4B66               	infsnz	memset@p& (0+255),f,b
 11401  004AA0  2B67               	incf	(memset@p+1)& (0+255),f,b
 11402  004AA2                     l1883:
 11403                           
 11404                           ; BSR set to: 0
 11405  004AA2  0100               	movlb	0	; () banked
 11406  004AA4  0764               	decf	memset@n& (0+255),f,b
 11407  004AA6  A0D8               	btfss	status,0,c
 11408  004AA8  0765               	decf	(memset@n+1)& (0+255),f,b
 11409  004AAA  2964               	incf	memset@n& (0+255),w,b
 11410  004AAC  E1F1               	bnz	l9613
 11411  004AAE  2965               	incf	(memset@n+1)& (0+255),w,b
 11412  004AB0  B4D8               	btfsc	status,2,c
 11413  004AB2  0012               	return	
 11414  004AB4  D7ED               	goto	l1884
 11415  004AB6                     __end_of_memset:
 11416                           	opt stack 0
 11417                           tosu	equ	0xFFF
 11418                           tosh	equ	0xFFE
 11419                           tosl	equ	0xFFD
 11420                           pclath	equ	0xFFA
 11421                           tblptru	equ	0xFF8
 11422                           tblptrh	equ	0xFF7
 11423                           tblptrl	equ	0xFF6
 11424                           tablat	equ	0xFF5
 11425                           prodh	equ	0xFF4
 11426                           prodl	equ	0xFF3
 11427                           intcon	equ	0xFF2
 11428                           intcon2	equ	0xFF1
 11429                           intcon3	equ	0xFF0
 11430                           indf0	equ	0xFEF
 11431                           postinc0	equ	0xFEE
 11432                           fsr0h	equ	0xFEA
 11433                           fsr0l	equ	0xFE9
 11434                           wreg	equ	0xFE8
 11435                           indf1	equ	0xFE7
 11436                           postinc1	equ	0xFE6
 11437                           postdec1	equ	0xFE5
 11438                           plusw1	equ	0xFE3
 11439                           fsr1h	equ	0xFE2
 11440                           fsr1l	equ	0xFE1
 11441                           indf2	equ	0xFDF
 11442                           postinc2	equ	0xFDE
 11443                           postdec2	equ	0xFDD
 11444                           plusw2	equ	0xFDB
 11445                           fsr2h	equ	0xFDA
 11446                           fsr2l	equ	0xFD9
 11447                           status	equ	0xFD8
 11448                           
 11449 ;; *************** function _disk_initialize *****************
 11450 ;; Defined at:
 11451 ;;		line 59 in file "bibliotecas/diskio.c"
 11452 ;; Parameters:    Size  Location     Type
 11453 ;;  pdrv            1    wreg     unsigned char 
 11454 ;; Auto vars:     Size  Location     Type
 11455 ;;  pdrv            1   32[BANK0 ] unsigned char 
 11456 ;;  result          2    0        int 
 11457 ;;  stat            1   33[BANK0 ] unsigned char 
 11458 ;; Return value:  Size  Location     Type
 11459 ;;                  1    wreg      unsigned char 
 11460 ;; Registers used:
 11461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11462 ;; Tracked objects:
 11463 ;;		On entry : 0/0
 11464 ;;		On exit  : 0/0
 11465 ;;		Unchanged: 0/0
 11466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11467 ;;      Params:         0       0       0       0       0       0       0       0       0
 11468 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11469 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11470 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11471 ;;Total ram usage:        2 bytes
 11472 ;; Hardware stack levels used:    1
 11473 ;; Hardware stack levels required when called:    8
 11474 ;; This function calls:
 11475 ;;		_sdc_disk_initialize
 11476 ;; This function is called by:
 11477 ;;		_auto_mount
 11478 ;; This function uses a non-reentrant model
 11479 ;;
 11480                           
 11481                           	psect	text40
 11482  0049DC                     __ptext40:
 11483                           	opt stack 0
 11484  0049DC                     _disk_initialize:
 11485                           	opt stack 17
 11486                           
 11487                           ; BSR set to: 0
 11488                           ;incstack = 0
 11489                           ;disk_initialize@pdrv stored from wreg
 11490  0049DC  0100               	movlb	0	; () banked
 11491  0049DE  6F80               	movwf	disk_initialize@pdrv& (0+255),b
 11492                           
 11493                           ;diskio.c: 63: DSTATUS stat;
 11494                           ;diskio.c: 64: int result;
 11495                           ;diskio.c: 66: switch (pdrv) {
 11496  0049E0  D00E               	goto	l442
 11497  0049E2                     
 11498                           ;diskio.c: 68: stat = sdc_disk_initialize();
 11499  0049E2  EC7E  F00B         	call	_sdc_disk_initialize	;wreg free
 11500  0049E6  0100               	movlb	0	; () banked
 11501  0049E8  6F81               	movwf	disk_initialize@stat& (0+255),b
 11502                           
 11503                           ; BSR set to: 0
 11504                           ;diskio.c: 72: return stat;
 11505  0049EA  5181               	movf	disk_initialize@stat& (0+255),w,b
 11506                           
 11507                           ; BSR set to: 0
 11508  0049EC  0012               	return	
 11509  0049EE                     
 11510                           ; BSR set to: 0
 11511                           ;diskio.c: 75: stat = sdc_disk_initialize();
 11512                           
 11513                           ; BSR set to: 0
 11514  0049EE  EC7E  F00B         	call	_sdc_disk_initialize	;wreg free
 11515  0049F2  0100               	movlb	0	; () banked
 11516  0049F4  6F81               	movwf	disk_initialize@stat& (0+255),b
 11517                           
 11518                           ; BSR set to: 0
 11519                           ;diskio.c: 79: return stat;
 11520  0049F6  5181               	movf	disk_initialize@stat& (0+255),w,b
 11521                           
 11522                           ; BSR set to: 0
 11523  0049F8  0012               	return	
 11524  0049FA                     
 11525                           ; BSR set to: 0
 11526                           ;diskio.c: 86: return stat;
 11527                           
 11528                           ; BSR set to: 0
 11529  0049FA  5181               	movf	disk_initialize@stat& (0+255),w,b
 11530                           
 11531                           ; BSR set to: 0
 11532  0049FC  0012               	return	
 11533  0049FE                     l442:
 11534                           
 11535                           ; BSR set to: 0
 11536  0049FE  0100               	movlb	0	; () banked
 11537  004A00  5180               	movf	disk_initialize@pdrv& (0+255),w,b
 11538                           
 11539                           ; Switch size 1, requested type "space"
 11540                           ; Number of cases is 3, Range of values is 0 to 2
 11541                           ; switch strategies available:
 11542                           ; Name         Instructions Cycles
 11543                           ; simple_byte           10     6 (average)
 11544                           ;	Chosen strategy is simple_byte
 11545  004A02  0A00               	xorlw	0	; case 0
 11546  004A04  B4D8               	btfsc	status,2,c
 11547  004A06  D7ED               	goto	l443
 11548  004A08  0A01               	xorlw	1	; case 1
 11549  004A0A  B4D8               	btfsc	status,2,c
 11550  004A0C  D7F0               	goto	l445
 11551  004A0E  0A03               	xorlw	3	; case 2
 11552  004A10  B4D8               	btfsc	status,2,c
 11553  004A12  D7F3               	goto	l446
 11554                           
 11555                           ; BSR set to: 0
 11556                           ;diskio.c: 88: return 0x01;
 11557                           
 11558                           ; BSR set to: 0
 11559  004A14  0E01               	movlw	1
 11560  004A16  0012               	return	
 11561  004A18                     __end_of_disk_initialize:
 11562                           	opt stack 0
 11563                           tosu	equ	0xFFF
 11564                           tosh	equ	0xFFE
 11565                           tosl	equ	0xFFD
 11566                           pclath	equ	0xFFA
 11567                           tblptru	equ	0xFF8
 11568                           tblptrh	equ	0xFF7
 11569                           tblptrl	equ	0xFF6
 11570                           tablat	equ	0xFF5
 11571                           prodh	equ	0xFF4
 11572                           prodl	equ	0xFF3
 11573                           intcon	equ	0xFF2
 11574                           intcon2	equ	0xFF1
 11575                           intcon3	equ	0xFF0
 11576                           indf0	equ	0xFEF
 11577                           postinc0	equ	0xFEE
 11578                           fsr0h	equ	0xFEA
 11579                           fsr0l	equ	0xFE9
 11580                           wreg	equ	0xFE8
 11581                           indf1	equ	0xFE7
 11582                           postinc1	equ	0xFE6
 11583                           postdec1	equ	0xFE5
 11584                           plusw1	equ	0xFE3
 11585                           fsr1h	equ	0xFE2
 11586                           fsr1l	equ	0xFE1
 11587                           indf2	equ	0xFDF
 11588                           postinc2	equ	0xFDE
 11589                           postdec2	equ	0xFDD
 11590                           plusw2	equ	0xFDB
 11591                           fsr2h	equ	0xFDA
 11592                           fsr2l	equ	0xFD9
 11593                           status	equ	0xFD8
 11594                           
 11595 ;; *************** function _sdc_disk_initialize *****************
 11596 ;; Defined at:
 11597 ;;		line 275 in file "bibliotecas/diskio.c"
 11598 ;; Parameters:    Size  Location     Type
 11599 ;;		None
 11600 ;; Auto vars:     Size  Location     Type
 11601 ;;  count2          2   29[BANK0 ] int 
 11602 ;;  crc_number      2   25[BANK0 ] int 
 11603 ;;  count1          2   23[BANK0 ] int 
 11604 ;;  i               2   20[BANK0 ] int 
 11605 ;;  buff            1   31[BANK0 ] unsigned char 
 11606 ;;  ocr             1   28[BANK0 ] unsigned char 
 11607 ;;  buff_i          1   27[BANK0 ] unsigned char 
 11608 ;;  stat            1   22[BANK0 ] unsigned char 
 11609 ;; Return value:  Size  Location     Type
 11610 ;;                  1    wreg      unsigned char 
 11611 ;; Registers used:
 11612 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11613 ;; Tracked objects:
 11614 ;;		On entry : 0/0
 11615 ;;		On exit  : 0/0
 11616 ;;		Unchanged: 0/0
 11617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11618 ;;      Params:         0       0       0       0       0       0       0       0       0
 11619 ;;      Locals:         0      12       0       0       0       0       0       0       0
 11620 ;;      Temps:          0       1       0       0       0       0       0       0       0
 11621 ;;      Totals:         0      13       0       0       0       0       0       0       0
 11622 ;;Total ram usage:       13 bytes
 11623 ;; Hardware stack levels used:    1
 11624 ;; Hardware stack levels required when called:    7
 11625 ;; This function calls:
 11626 ;;		_command
 11627 ;;		_dummy_clocks
 11628 ;;		_escreve_frase_ram_lcd
 11629 ;;		_posicao_cursor_lcd
 11630 ;;		_proceed
 11631 ;;		_response
 11632 ;;		_sdc_reset
 11633 ;; This function is called by:
 11634 ;;		_disk_initialize
 11635 ;; This function uses a non-reentrant model
 11636 ;;
 11637                           
 11638                           	psect	text41
 11639  0016FC                     __ptext41:
 11640                           	opt stack 0
 11641  0016FC                     _sdc_disk_initialize:
 11642                           	opt stack 17
 11643                           
 11644                           ;diskio.c: 277: BYTE ocr;
 11645                           ;diskio.c: 278: DSTATUS stat;
 11646                           ;diskio.c: 279: int i = 0, count1 = 0, count2 = 0;
 11647                           
 11648                           ; BSR set to: 0
 11649                           ;incstack = 0
 11650  0016FC  0E00               	movlw	0
 11651  0016FE  0100               	movlb	0	; () banked
 11652  001700  6F75               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
 11653  001702  0E00               	movlw	0
 11654  001704  6F74               	movwf	sdc_disk_initialize@i& (0+255),b
 11655  001706  0E00               	movlw	0
 11656  001708  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 11657  00170A  0E00               	movlw	0
 11658  00170C  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 11659  00170E  0E00               	movlw	0
 11660  001710  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 11661  001712  0E00               	movlw	0
 11662  001714  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 11663                           
 11664                           ;diskio.c: 280: BYTE buff = 0;
 11665  001716  0E00               	movlw	0
 11666  001718  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;diskio.c: 281: BYTE buff_i;
 11670                           ;diskio.c: 282: int crc_number;
 11671                           ;diskio.c: 283: _delay((unsigned long)((1)*(48000000/4000.0)));
 11672  00171A  0E10               	movlw	16
 11673  00171C  0100               	movlb	0	; () banked
 11674  00171E  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 11675  001720  0E94               	movlw	148
 11676  001722                     u15037:
 11677  001722  2EE8               	decfsz	wreg,f,c
 11678  001724  D7FE               	bra	u15037
 11679  001726  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 11680  001728  D7FC               	bra	u15037
 11681  00172A  F000               	nop	
 11682                           
 11683                           ;diskio.c: 284: dummy_clocks(100);
 11684  00172C  0E64               	movlw	100
 11685  00172E  EC8C  F024         	call	_dummy_clocks
 11686                           
 11687                           ;diskio.c: 287: sdc_reset();
 11688  001732  ECBF  F01E         	call	_sdc_reset	;wreg free
 11689                           
 11690                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 11691  001736  0EAA               	movlw	170
 11692  001738  0100               	movlb	0	; () banked
 11693  00173A  6F65               	movwf	command@arg& (0+255),b
 11694  00173C  0E01               	movlw	1
 11695  00173E  6F66               	movwf	(command@arg+1)& (0+255),b
 11696  001740  0E00               	movlw	0
 11697  001742  6F67               	movwf	(command@arg+2)& (0+255),b
 11698  001744  0E00               	movlw	0
 11699  001746  6F68               	movwf	(command@arg+3)& (0+255),b
 11700  001748  0E87               	movlw	135
 11701  00174A  6F69               	movwf	command@CRC& (0+255),b
 11702  00174C  0E48               	movlw	72
 11703  00174E  EC72  F022         	call	_command
 11704                           
 11705                           ;diskio.c: 289: proceed();
 11706  001752  EC86  F026         	call	_proceed	;wreg free
 11707  001756                     
 11708                           ;diskio.c: 291: buff_i = response();
 11709  001756  EC80  F026         	call	_response	;wreg free
 11710  00175A  0100               	movlb	0	; () banked
 11711  00175C  6F7B               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 11712                           
 11713                           ; BSR set to: 0
 11714                           ;diskio.c: 292: if(buff_i == 1)
 11715  00175E  057B               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 11716  001760  A4D8               	btfss	status,2,c
 11717  001762  D004               	goto	l485
 11718                           
 11719                           ; BSR set to: 0
 11720                           ;diskio.c: 293: {
 11721                           ;diskio.c: 294: crc_number = buff_i<<8;
 11722  001764  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 11723  001766  6F7A               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 11724  001768  6B79               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 11725                           
 11726                           ;diskio.c: 295: }
 11727  00176A  D006               	goto	l487
 11728  00176C                     l485:
 11729                           
 11730                           ; BSR set to: 0
 11731                           ;diskio.c: 296: else if(buff_i==0xAA)
 11732                           
 11733                           ; BSR set to: 0
 11734  00176C  0EAA               	movlw	170
 11735  00176E  197B               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 11736  001770  A4D8               	btfss	status,2,c
 11737  001772  D002               	goto	l487
 11738                           
 11739                           ; BSR set to: 0
 11740                           ;diskio.c: 297: {
 11741                           ;diskio.c: 298: crc_number |= buff_i;
 11742  001774  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 11743  001776  1379               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 11744  001778                     l487:
 11745                           
 11746                           ; BSR set to: 0
 11747                           ;diskio.c: 299: }
 11748                           ;diskio.c: 300: count1++;
 11749                           
 11750                           ; BSR set to: 0
 11751                           
 11752                           ; BSR set to: 0
 11753  001778  4B77               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 11754  00177A  2B78               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 11755                           
 11756                           ; BSR set to: 0
 11757                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 11758  00177C  0EAA               	movlw	170
 11759  00177E  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 11760  001780  E103               	bnz	u11420
 11761  001782  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 11762  001784  B4D8               	btfsc	status,2,c
 11763  001786  D008               	goto	u11430
 11764  001788                     u11420:
 11765                           
 11766                           ; BSR set to: 0
 11767  001788  BF78               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 11768  00178A  D7E5               	goto	l484
 11769  00178C  0EE8               	movlw	232
 11770  00178E  5D77               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 11771  001790  0E03               	movlw	3
 11772  001792  5978               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 11773  001794  A0D8               	btfss	status,0,c
 11774  001796  D7DF               	goto	l484
 11775  001798                     u11430:
 11776                           
 11777                           ; BSR set to: 0
 11778                           ;diskio.c: 306: if (crc_number == 0x1AA)
 11779                           
 11780                           ; BSR set to: 0
 11781                           
 11782                           ; BSR set to: 0
 11783  001798  0EAA               	movlw	170
 11784  00179A  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 11785  00179C  E102               	bnz	u11441
 11786  00179E  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 11787  0017A0  A4D8               	btfss	status,2,c
 11788  0017A2                     u11441:
 11789  0017A2  D0B1               	goto	l491
 11790                           
 11791                           ; BSR set to: 0
 11792                           ;diskio.c: 307: {
 11793                           ;diskio.c: 308: count1 = 0;
 11794  0017A4  0E00               	movlw	0
 11795  0017A6  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 11796  0017A8  0E00               	movlw	0
 11797  0017AA  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 11798  0017AC                     l492:
 11799                           
 11800                           ; BSR set to: 0
 11801                           ;diskio.c: 310: count2 = 0;
 11802  0017AC  0E00               	movlw	0
 11803  0017AE  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 11804  0017B0  0E00               	movlw	0
 11805  0017B2  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 11806                           
 11807                           ; BSR set to: 0
 11808                           ;diskio.c: 311: buff = 0XFF;
 11809  0017B4  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 11810  0017B6                     
 11811                           ; BSR set to: 0
 11812                           ;diskio.c: 319: dummy_clocks(10);
 11813                           
 11814                           ; BSR set to: 0
 11815  0017B6  0E0A               	movlw	10
 11816  0017B8  EC8C  F024         	call	_dummy_clocks
 11817                           
 11818                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 11819  0017BC  0E00               	movlw	0
 11820  0017BE  0100               	movlb	0	; () banked
 11821  0017C0  6F65               	movwf	command@arg& (0+255),b
 11822  0017C2  0E00               	movlw	0
 11823  0017C4  6F66               	movwf	(command@arg+1)& (0+255),b
 11824  0017C6  0E00               	movlw	0
 11825  0017C8  6F67               	movwf	(command@arg+2)& (0+255),b
 11826  0017CA  0E00               	movlw	0
 11827  0017CC  6F68               	movwf	(command@arg+3)& (0+255),b
 11828  0017CE  0E00               	movlw	0
 11829  0017D0  6F69               	movwf	command@CRC& (0+255),b
 11830  0017D2  0E77               	movlw	119
 11831  0017D4  EC72  F022         	call	_command
 11832                           
 11833                           ;diskio.c: 321: buff = 0XFF;
 11834  0017D8  0100               	movlb	0	; () banked
 11835  0017DA  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 11836                           
 11837                           ; BSR set to: 0
 11838                           ;diskio.c: 323: proceed();
 11839  0017DC  EC86  F026         	call	_proceed	;wreg free
 11840  0017E0                     
 11841                           ;diskio.c: 325: buff = response();
 11842  0017E0  EC80  F026         	call	_response	;wreg free
 11843  0017E4  0100               	movlb	0	; () banked
 11844  0017E6  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 11845                           
 11846                           ; BSR set to: 0
 11847                           ;diskio.c: 326: count2++;
 11848  0017E8  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 11849  0017EA  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 11850                           
 11851                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 11852  0017EC  057F               	decf	sdc_disk_initialize@buff& (0+255),w,b
 11853  0017EE  B4D8               	btfsc	status,2,c
 11854  0017F0  D008               	goto	u11460
 11855                           
 11856                           ; BSR set to: 0
 11857  0017F2  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 11858  0017F4  D7F5               	goto	l494
 11859  0017F6  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 11860  0017F8  E104               	bnz	l9485
 11861  0017FA  0E0A               	movlw	10
 11862  0017FC  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 11863  0017FE  A0D8               	btfss	status,0,c
 11864  001800  D7EF               	goto	l494
 11865  001802                     u11460:
 11866  001802                     l9485:
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;diskio.c: 328: count2 = 0;
 11870  001802  0E00               	movlw	0
 11871  001804  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 11872  001806  0E00               	movlw	0
 11873  001808  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 11874                           
 11875                           ; BSR set to: 0
 11876                           ;diskio.c: 332: dummy_clocks(10);
 11877  00180A  0E0A               	movlw	10
 11878  00180C  EC8C  F024         	call	_dummy_clocks
 11879                           
 11880                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 11881  001810  0E00               	movlw	0
 11882  001812  0100               	movlb	0	; () banked
 11883  001814  6F65               	movwf	command@arg& (0+255),b
 11884  001816  0E00               	movlw	0
 11885  001818  6F66               	movwf	(command@arg+1)& (0+255),b
 11886  00181A  0E00               	movlw	0
 11887  00181C  6F67               	movwf	(command@arg+2)& (0+255),b
 11888  00181E  0E40               	movlw	64
 11889  001820  6F68               	movwf	(command@arg+3)& (0+255),b
 11890  001822  0E00               	movlw	0
 11891  001824  6F69               	movwf	command@CRC& (0+255),b
 11892  001826  0E69               	movlw	105
 11893  001828  EC72  F022         	call	_command
 11894                           
 11895                           ;diskio.c: 334: proceed();
 11896  00182C  EC86  F026         	call	_proceed	;wreg free
 11897                           
 11898                           ;diskio.c: 335: buff = response();
 11899  001830  EC80  F026         	call	_response	;wreg free
 11900  001834  0100               	movlb	0	; () banked
 11901  001836  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 11902                           
 11903                           ; BSR set to: 0
 11904                           ;diskio.c: 336: count2++;
 11905  001838  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 11906  00183A  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 11907                           
 11908                           ; BSR set to: 0
 11909                           ;diskio.c: 337: }while(buff!=0X00);
 11910  00183C  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 11911  00183E  A4D8               	btfss	status,2,c
 11912  001840  D7BA               	goto	l493
 11913                           
 11914                           ; BSR set to: 0
 11915                           ;diskio.c: 339: buff = 0xFF;
 11916  001842  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 11917                           
 11918                           ; BSR set to: 0
 11919                           ;diskio.c: 342: dummy_clocks(10);
 11920  001844  0E0A               	movlw	10
 11921  001846  EC8C  F024         	call	_dummy_clocks
 11922                           
 11923                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 11924  00184A  0E00               	movlw	0
 11925  00184C  0100               	movlb	0	; () banked
 11926  00184E  6F65               	movwf	command@arg& (0+255),b
 11927  001850  0E00               	movlw	0
 11928  001852  6F66               	movwf	(command@arg+1)& (0+255),b
 11929  001854  0E00               	movlw	0
 11930  001856  6F67               	movwf	(command@arg+2)& (0+255),b
 11931  001858  0E00               	movlw	0
 11932  00185A  6F68               	movwf	(command@arg+3)& (0+255),b
 11933  00185C  0EFF               	movlw	255
 11934  00185E  6F69               	movwf	command@CRC& (0+255),b
 11935  001860  0E7A               	movlw	122
 11936  001862  EC72  F022         	call	_command
 11937                           
 11938                           ;diskio.c: 344: proceed();
 11939  001866  EC86  F026         	call	_proceed	;wreg free
 11940  00186A                     
 11941                           ;diskio.c: 346: buff = response();
 11942  00186A  EC80  F026         	call	_response	;wreg free
 11943  00186E  0100               	movlb	0	; () banked
 11944  001870  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 11945                           
 11946                           ; BSR set to: 0
 11947                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 11948  001872  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 11949  001874  257F               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 11950  001876  0B80               	andlw	128
 11951  001878  6F7C               	movwf	sdc_disk_initialize@ocr& (0+255),b
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;diskio.c: 348: count2++;
 11955  00187A  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 11956  00187C  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 11957                           
 11958                           ; BSR set to: 0
 11959                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 11960  00187E  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 11961  001880  B4D8               	btfsc	status,2,c
 11962  001882  D00B               	goto	u11500
 11963                           
 11964                           ; BSR set to: 0
 11965  001884  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 11966  001886  B4D8               	btfsc	status,2,c
 11967  001888  D008               	goto	u11500
 11968                           
 11969                           ; BSR set to: 0
 11970  00188A  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 11971  00188C  D7EE               	goto	l499
 11972  00188E  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 11973  001890  E104               	bnz	l9515
 11974  001892  0E0A               	movlw	10
 11975  001894  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 11976  001896  A0D8               	btfss	status,0,c
 11977  001898  D7E8               	goto	l499
 11978  00189A                     u11500:
 11979  00189A                     l9515:
 11980                           
 11981                           ; BSR set to: 0
 11982                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 11983  00189A  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 11984  00189C  B4D8               	btfsc	status,2,c
 11985  00189E  D003               	goto	u11520
 11986                           
 11987                           ; BSR set to: 0
 11988  0018A0  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 11989  0018A2  A4D8               	btfss	status,2,c
 11990  0018A4  D783               	goto	l492
 11991  0018A6                     u11520:
 11992                           
 11993                           ; BSR set to: 0
 11994                           ;diskio.c: 353: count1 = 0;
 11995                           
 11996                           ; BSR set to: 0
 11997                           
 11998                           ; BSR set to: 0
 11999  0018A6  0E00               	movlw	0
 12000  0018A8  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 12001  0018AA  0E00               	movlw	0
 12002  0018AC  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 12003                           
 12004                           ; BSR set to: 0
 12005                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 12006  0018AE  0E10               	movlw	16
 12007  0018B0  0100               	movlb	0	; () banked
 12008  0018B2  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 12009  0018B4  0E94               	movlw	148
 12010  0018B6                     u15047:
 12011  0018B6  2EE8               	decfsz	wreg,f,c
 12012  0018B8  D7FE               	bra	u15047
 12013  0018BA  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 12014  0018BC  D7FC               	bra	u15047
 12015  0018BE  F000               	nop	
 12016                           
 12017                           ;diskio.c: 356: stat = 0X00;
 12018  0018C0  0E00               	movlw	0
 12019  0018C2  0100               	movlb	0	; () banked
 12020  0018C4  6F76               	movwf	sdc_disk_initialize@stat& (0+255),b
 12021                           
 12022                           ; BSR set to: 0
 12023                           ;diskio.c: 358: if(!ocr)
 12024  0018C6  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12025  0018C8  A4D8               	btfss	status,2,c
 12026  0018CA  D0B9               	goto	u11620
 12027                           
 12028                           ; BSR set to: 0
 12029                           ;diskio.c: 359: {
 12030                           ;diskio.c: 361: dummy_clocks(10);
 12031  0018CC  0E0A               	movlw	10
 12032  0018CE  EC8C  F024         	call	_dummy_clocks
 12033                           
 12034                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 12035  0018D2  0E00               	movlw	0
 12036  0018D4  0100               	movlb	0	; () banked
 12037  0018D6  6F65               	movwf	command@arg& (0+255),b
 12038  0018D8  0E02               	movlw	2
 12039  0018DA  6F66               	movwf	(command@arg+1)& (0+255),b
 12040  0018DC  0E00               	movlw	0
 12041  0018DE  6F67               	movwf	(command@arg+2)& (0+255),b
 12042  0018E0  0E00               	movlw	0
 12043  0018E2  6F68               	movwf	(command@arg+3)& (0+255),b
 12044  0018E4  0EFF               	movlw	255
 12045  0018E6  6F69               	movwf	command@CRC& (0+255),b
 12046  0018E8  0E50               	movlw	80
 12047  0018EA  EC72  F022         	call	_command
 12048                           
 12049                           ;diskio.c: 363: proceed();
 12050  0018EE  EC86  F026         	call	_proceed	;wreg free
 12051                           
 12052                           ;diskio.c: 365: buff = 0xFF;
 12053  0018F2  0100               	movlb	0	; () banked
 12054  0018F4  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12055  0018F6                     
 12056                           ; BSR set to: 0
 12057                           ;diskio.c: 367: buff = response();
 12058                           
 12059                           ; BSR set to: 0
 12060  0018F6  EC80  F026         	call	_response	;wreg free
 12061  0018FA  0100               	movlb	0	; () banked
 12062  0018FC  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12063                           
 12064                           ; BSR set to: 0
 12065                           ;diskio.c: 368: }while(buff!=0X00);
 12066  0018FE  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12067  001900  B4D8               	btfsc	status,2,c
 12068  001902  D09D               	goto	u11620
 12069  001904  D7F8               	goto	l507
 12070  001906                     l491:
 12071                           
 12072                           ; BSR set to: 0
 12073                           ;diskio.c: 373: else
 12074                           ;diskio.c: 374: {
 12075                           ;diskio.c: 376: count2 = 0;
 12076                           
 12077                           ; BSR set to: 0
 12078  001906  0E00               	movlw	0
 12079  001908  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12080  00190A  0E00               	movlw	0
 12081  00190C  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12082                           
 12083                           ; BSR set to: 0
 12084                           ;diskio.c: 377: buff = 0XFF;
 12085  00190E  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12086                           
 12087                           ; BSR set to: 0
 12088                           ;diskio.c: 378: dummy_clocks(1);
 12089  001910  0E01               	movlw	1
 12090  001912  EC8C  F024         	call	_dummy_clocks
 12091                           
 12092                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 12093  001916  0E00               	movlw	0
 12094  001918  0100               	movlb	0	; () banked
 12095  00191A  6F65               	movwf	command@arg& (0+255),b
 12096  00191C  0E00               	movlw	0
 12097  00191E  6F66               	movwf	(command@arg+1)& (0+255),b
 12098  001920  0E00               	movlw	0
 12099  001922  6F67               	movwf	(command@arg+2)& (0+255),b
 12100  001924  0E00               	movlw	0
 12101  001926  6F68               	movwf	(command@arg+3)& (0+255),b
 12102  001928  0EFF               	movlw	255
 12103  00192A  6F69               	movwf	command@CRC& (0+255),b
 12104  00192C  0E69               	movlw	105
 12105  00192E  EC72  F022         	call	_command
 12106                           
 12107                           ;diskio.c: 380: proceed();
 12108  001932  EC86  F026         	call	_proceed	;wreg free
 12109  001936                     
 12110                           ;diskio.c: 382: buff = response();
 12111  001936  EC80  F026         	call	_response	;wreg free
 12112  00193A  0100               	movlb	0	; () banked
 12113  00193C  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12114                           
 12115                           ; BSR set to: 0
 12116                           ;diskio.c: 383: count2++;
 12117  00193E  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12118  001940  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12119                           
 12120                           ; BSR set to: 0
 12121                           ;diskio.c: 384: if(buff==0x00)
 12122  001942  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12123  001944  A4D8               	btfss	status,2,c
 12124  001946  D00C               	goto	l511
 12125                           
 12126                           ; BSR set to: 0
 12127                           ;diskio.c: 385: {
 12128                           ;diskio.c: 386: posicao_cursor_lcd(1,0);
 12129  001948  0E00               	movlw	0
 12130  00194A  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12131  00194C  0E01               	movlw	1
 12132  00194E  EC91  F021         	call	_posicao_cursor_lcd
 12133                           
 12134                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 12135  001952  0E45               	movlw	low STR_22
 12136  001954  0100               	movlb	0	; () banked
 12137  001956  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12138  001958  0E62               	movlw	high STR_22
 12139  00195A  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12140  00195C  EC5C  F023         	call	_escreve_frase_ram_lcd	;wreg free
 12141  001960                     l511:
 12142                           
 12143                           ;diskio.c: 388: }
 12144                           ;diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 12145  001960  0E10               	movlw	16
 12146  001962  0100               	movlb	0	; () banked
 12147  001964  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 12148  001966  0E94               	movlw	148
 12149  001968                     u15057:
 12150  001968  2EE8               	decfsz	wreg,f,c
 12151  00196A  D7FE               	bra	u15057
 12152  00196C  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 12153  00196E  D7FC               	bra	u15057
 12154  001970  F000               	nop	
 12155                           
 12156                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 12157  001972  0100               	movlb	0	; () banked
 12158  001974  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12159  001976  B4D8               	btfsc	status,2,c
 12160  001978  D008               	goto	u11570
 12161                           
 12162                           ; BSR set to: 0
 12163  00197A  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12164  00197C  D7DC               	goto	l510
 12165  00197E  0E10               	movlw	16
 12166  001980  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12167  001982  0E27               	movlw	39
 12168  001984  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12169  001986  A0D8               	btfss	status,0,c
 12170  001988  D7D6               	goto	l510
 12171  00198A                     u11570:
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;diskio.c: 392: buff = 0xFF;
 12175                           
 12176                           ; BSR set to: 0
 12177  00198A  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12178                           
 12179                           ; BSR set to: 0
 12180                           ;diskio.c: 393: if(count2==10)
 12181  00198C  0E0A               	movlw	10
 12182  00198E  197D               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 12183  001990  117E               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12184  001992  A4D8               	btfss	status,2,c
 12185  001994  D038               	goto	u11610
 12186                           
 12187                           ; BSR set to: 0
 12188                           ;diskio.c: 394: {
 12189                           ;diskio.c: 395: count2 = 0;
 12190  001996  0E00               	movlw	0
 12191  001998  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12192  00199A  0E00               	movlw	0
 12193  00199C  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 12194                           
 12195                           ; BSR set to: 0
 12196                           ;diskio.c: 396: dummy_clocks(10);
 12197  00199E  0E0A               	movlw	10
 12198  0019A0  EC8C  F024         	call	_dummy_clocks
 12199                           
 12200                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 12201  0019A4  0E00               	movlw	0
 12202  0019A6  0100               	movlb	0	; () banked
 12203  0019A8  6F65               	movwf	command@arg& (0+255),b
 12204  0019AA  0E00               	movlw	0
 12205  0019AC  6F66               	movwf	(command@arg+1)& (0+255),b
 12206  0019AE  0E00               	movlw	0
 12207  0019B0  6F67               	movwf	(command@arg+2)& (0+255),b
 12208  0019B2  0E00               	movlw	0
 12209  0019B4  6F68               	movwf	(command@arg+3)& (0+255),b
 12210  0019B6  0EFF               	movlw	255
 12211  0019B8  6F69               	movwf	command@CRC& (0+255),b
 12212  0019BA  0E41               	movlw	65
 12213  0019BC  EC72  F022         	call	_command
 12214                           
 12215                           ;diskio.c: 398: proceed();
 12216  0019C0  EC86  F026         	call	_proceed	;wreg free
 12217  0019C4                     
 12218                           ;diskio.c: 400: buff = response();
 12219  0019C4  EC80  F026         	call	_response	;wreg free
 12220  0019C8  0100               	movlb	0	; () banked
 12221  0019CA  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12222                           
 12223                           ; BSR set to: 0
 12224                           ;diskio.c: 401: count2++;
 12225  0019CC  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12226  0019CE  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12227                           
 12228                           ; BSR set to: 0
 12229                           ;diskio.c: 402: if(buff==0x00)
 12230  0019D0  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12231  0019D2  A4D8               	btfss	status,2,c
 12232  0019D4  D00C               	goto	l517
 12233                           
 12234                           ; BSR set to: 0
 12235                           ;diskio.c: 403: {
 12236                           ;diskio.c: 404: posicao_cursor_lcd(1,0);
 12237  0019D6  0E00               	movlw	0
 12238  0019D8  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12239  0019DA  0E01               	movlw	1
 12240  0019DC  EC91  F021         	call	_posicao_cursor_lcd
 12241                           
 12242                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 12243  0019E0  0E2F               	movlw	low STR_23
 12244  0019E2  0100               	movlb	0	; () banked
 12245  0019E4  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12246  0019E6  0E62               	movlw	high STR_23
 12247  0019E8  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12248  0019EA  EC5C  F023         	call	_escreve_frase_ram_lcd	;wreg free
 12249  0019EE                     l517:
 12250                           
 12251                           ;diskio.c: 406: }
 12252                           ;diskio.c: 408: }while(buff!=0X00 && count2<10000);
 12253  0019EE  0100               	movlb	0	; () banked
 12254  0019F0  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12255  0019F2  B4D8               	btfsc	status,2,c
 12256  0019F4  D008               	goto	u11610
 12257                           
 12258                           ; BSR set to: 0
 12259  0019F6  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12260  0019F8  D7E5               	goto	l516
 12261  0019FA  0E10               	movlw	16
 12262  0019FC  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12263  0019FE  0E27               	movlw	39
 12264  001A00  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12265  001A02  A0D8               	btfss	status,0,c
 12266  001A04  D7DF               	goto	l516
 12267  001A06                     u11610:
 12268                           
 12269                           ; BSR set to: 0
 12270                           ;diskio.c: 409: }
 12271                           ;diskio.c: 412: dummy_clocks(10);
 12272                           
 12273                           ; BSR set to: 0
 12274                           
 12275                           ; BSR set to: 0
 12276                           
 12277                           ; BSR set to: 0
 12278  001A06  0E0A               	movlw	10
 12279  001A08  EC8C  F024         	call	_dummy_clocks
 12280                           
 12281                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 12282  001A0C  0E00               	movlw	0
 12283  001A0E  0100               	movlb	0	; () banked
 12284  001A10  6F65               	movwf	command@arg& (0+255),b
 12285  001A12  0E02               	movlw	2
 12286  001A14  6F66               	movwf	(command@arg+1)& (0+255),b
 12287  001A16  0E00               	movlw	0
 12288  001A18  6F67               	movwf	(command@arg+2)& (0+255),b
 12289  001A1A  0E00               	movlw	0
 12290  001A1C  6F68               	movwf	(command@arg+3)& (0+255),b
 12291  001A1E  0EFF               	movlw	255
 12292  001A20  6F69               	movwf	command@CRC& (0+255),b
 12293  001A22  0E50               	movlw	80
 12294  001A24  EC72  F022         	call	_command
 12295                           
 12296                           ;diskio.c: 414: proceed();
 12297  001A28  EC86  F026         	call	_proceed	;wreg free
 12298                           
 12299                           ;diskio.c: 416: buff = 0xFF;
 12300  001A2C  0100               	movlb	0	; () banked
 12301  001A2E  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 12302  001A30                     
 12303                           ; BSR set to: 0
 12304                           ;diskio.c: 418: buff = response();
 12305                           
 12306                           ; BSR set to: 0
 12307  001A30  EC80  F026         	call	_response	;wreg free
 12308  001A34  0100               	movlb	0	; () banked
 12309  001A36  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 12310                           
 12311                           ; BSR set to: 0
 12312                           ;diskio.c: 419: }while(buff!=0X00);
 12313  001A38  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12314  001A3A  A4D8               	btfss	status,2,c
 12315  001A3C  D7F9               	goto	l521
 12316  001A3E                     u11620:
 12317                           
 12318                           ; BSR set to: 0
 12319                           ;diskio.c: 421: }
 12320                           ;diskio.c: 425: return stat;
 12321                           
 12322                           ; BSR set to: 0
 12323                           
 12324                           ; BSR set to: 0
 12325  001A3E  5176               	movf	sdc_disk_initialize@stat& (0+255),w,b
 12326  001A40  0012               	return	
 12327  001A42                     __end_of_sdc_disk_initialize:
 12328                           	opt stack 0
 12329                           tosu	equ	0xFFF
 12330                           tosh	equ	0xFFE
 12331                           tosl	equ	0xFFD
 12332                           pclath	equ	0xFFA
 12333                           tblptru	equ	0xFF8
 12334                           tblptrh	equ	0xFF7
 12335                           tblptrl	equ	0xFF6
 12336                           tablat	equ	0xFF5
 12337                           prodh	equ	0xFF4
 12338                           prodl	equ	0xFF3
 12339                           intcon	equ	0xFF2
 12340                           intcon2	equ	0xFF1
 12341                           intcon3	equ	0xFF0
 12342                           indf0	equ	0xFEF
 12343                           postinc0	equ	0xFEE
 12344                           fsr0h	equ	0xFEA
 12345                           fsr0l	equ	0xFE9
 12346                           wreg	equ	0xFE8
 12347                           indf1	equ	0xFE7
 12348                           postinc1	equ	0xFE6
 12349                           postdec1	equ	0xFE5
 12350                           plusw1	equ	0xFE3
 12351                           fsr1h	equ	0xFE2
 12352                           fsr1l	equ	0xFE1
 12353                           indf2	equ	0xFDF
 12354                           postinc2	equ	0xFDE
 12355                           postdec2	equ	0xFDD
 12356                           plusw2	equ	0xFDB
 12357                           fsr2h	equ	0xFDA
 12358                           fsr2l	equ	0xFD9
 12359                           status	equ	0xFD8
 12360                           
 12361 ;; *************** function _sdc_reset *****************
 12362 ;; Defined at:
 12363 ;;		line 238 in file "bibliotecas/diskio.c"
 12364 ;; Parameters:    Size  Location     Type
 12365 ;;		None
 12366 ;; Auto vars:     Size  Location     Type
 12367 ;;  teste          10    0        unsigned char [10]
 12368 ;;  count           2   16[BANK0 ] int 
 12369 ;;  count_nosd      2   14[BANK0 ] int 
 12370 ;;  i               2   12[BANK0 ] int 
 12371 ;;  receive         2    0        unsigned int 
 12372 ;;  buff            1   18[BANK0 ] unsigned char 
 12373 ;;  stat            1    0        unsigned char 
 12374 ;; Return value:  Size  Location     Type
 12375 ;;                  1    wreg      void 
 12376 ;; Registers used:
 12377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12378 ;; Tracked objects:
 12379 ;;		On entry : 0/0
 12380 ;;		On exit  : 0/0
 12381 ;;		Unchanged: 0/0
 12382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12383 ;;      Params:         0       0       0       0       0       0       0       0       0
 12384 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12385 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12386 ;;      Totals:         0       7       0       0       0       0       0       0       0
 12387 ;;Total ram usage:        7 bytes
 12388 ;; Hardware stack levels used:    1
 12389 ;; Hardware stack levels required when called:    6
 12390 ;; This function calls:
 12391 ;;		_command
 12392 ;;		_escreve_frase_ram_lcd
 12393 ;;		_posicao_cursor_lcd
 12394 ;;		_proceed
 12395 ;;		_response
 12396 ;; This function is called by:
 12397 ;;		_sdc_disk_initialize
 12398 ;; This function uses a non-reentrant model
 12399 ;;
 12400                           
 12401                           	psect	text42
 12402  003D7E                     __ptext42:
 12403                           	opt stack 0
 12404  003D7E                     _sdc_reset:
 12405                           	opt stack 17
 12406                           
 12407                           ;diskio.c: 240: int i = 0, count = 0, count_nosd = 0;
 12408                           
 12409                           ; BSR set to: 0
 12410                           ;incstack = 0
 12411  003D7E  0E00               	movlw	0
 12412  003D80  0100               	movlb	0	; () banked
 12413  003D82  6F6D               	movwf	(sdc_reset@i+1)& (0+255),b
 12414  003D84  0E00               	movlw	0
 12415  003D86  6F6C               	movwf	sdc_reset@i& (0+255),b
 12416  003D88  0E00               	movlw	0
 12417  003D8A  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 12418  003D8C  0E00               	movlw	0
 12419  003D8E  6F70               	movwf	sdc_reset@count& (0+255),b
 12420  003D90  0E00               	movlw	0
 12421  003D92  6F6F               	movwf	(sdc_reset@count_nosd+1)& (0+255),b
 12422  003D94  0E00               	movlw	0
 12423  003D96  6F6E               	movwf	sdc_reset@count_nosd& (0+255),b
 12424  003D98                     
 12425                           ; BSR set to: 0
 12426                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 12427                           
 12428                           ; BSR set to: 0
 12429  003D98  0E00               	movlw	0
 12430  003D9A  6F65               	movwf	command@arg& (0+255),b
 12431  003D9C  0E00               	movlw	0
 12432  003D9E  6F66               	movwf	(command@arg+1)& (0+255),b
 12433  003DA0  0E00               	movlw	0
 12434  003DA2  6F67               	movwf	(command@arg+2)& (0+255),b
 12435  003DA4  0E00               	movlw	0
 12436  003DA6  6F68               	movwf	(command@arg+3)& (0+255),b
 12437  003DA8  0E95               	movlw	149
 12438  003DAA  6F69               	movwf	command@CRC& (0+255),b
 12439  003DAC  0E40               	movlw	64
 12440  003DAE  EC72  F022         	call	_command
 12441                           
 12442                           ;diskio.c: 249: proceed();
 12443  003DB2  EC86  F026         	call	_proceed	;wreg free
 12444  003DB6                     
 12445                           ;diskio.c: 251: buff = response();
 12446  003DB6  EC80  F026         	call	_response	;wreg free
 12447  003DBA  0100               	movlb	0	; () banked
 12448  003DBC  6F72               	movwf	sdc_reset@buff& (0+255),b
 12449                           
 12450                           ; BSR set to: 0
 12451                           ;diskio.c: 252: count++;
 12452  003DBE  4B70               	infsnz	sdc_reset@count& (0+255),f,b
 12453  003DC0  2B71               	incf	(sdc_reset@count+1)& (0+255),f,b
 12454                           
 12455                           ; BSR set to: 0
 12456                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 12457  003DC2  0572               	decf	sdc_reset@buff& (0+255),w,b
 12458  003DC4  B4D8               	btfsc	status,2,c
 12459  003DC6  D008               	goto	u11170
 12460                           
 12461                           ; BSR set to: 0
 12462  003DC8  BF71               	btfsc	(sdc_reset@count+1)& (0+255),7,b
 12463  003DCA  D7F5               	goto	l475
 12464  003DCC  5171               	movf	(sdc_reset@count+1)& (0+255),w,b
 12465  003DCE  E104               	bnz	l9303
 12466  003DD0  0E0A               	movlw	10
 12467  003DD2  5D70               	subwf	sdc_reset@count& (0+255),w,b
 12468  003DD4  A0D8               	btfss	status,0,c
 12469  003DD6  D7EF               	goto	l475
 12470  003DD8                     u11170:
 12471  003DD8                     l9303:
 12472                           
 12473                           ; BSR set to: 0
 12474                           ;diskio.c: 254: count = 0;
 12475  003DD8  0E00               	movlw	0
 12476  003DDA  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 12477  003DDC  0E00               	movlw	0
 12478  003DDE  6F70               	movwf	sdc_reset@count& (0+255),b
 12479                           
 12480                           ; BSR set to: 0
 12481                           ;diskio.c: 255: if(buff != 0x01)
 12482  003DE0  0572               	decf	sdc_reset@buff& (0+255),w,b
 12483  003DE2  B4D8               	btfsc	status,2,c
 12484  003DE4  D019               	goto	l479
 12485                           
 12486                           ; BSR set to: 0
 12487                           ;diskio.c: 256: {
 12488                           ;diskio.c: 257: posicao_cursor_lcd(1,0);
 12489  003DE6  0E00               	movlw	0
 12490  003DE8  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12491  003DEA  0E01               	movlw	1
 12492  003DEC  EC91  F021         	call	_posicao_cursor_lcd
 12493                           
 12494                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 12495  003DF0  0E3A               	movlw	low STR_20
 12496  003DF2  0100               	movlb	0	; () banked
 12497  003DF4  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12498  003DF6  0E62               	movlw	high STR_20
 12499  003DF8  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12500  003DFA  EC5C  F023         	call	_escreve_frase_ram_lcd	;wreg free
 12501                           
 12502                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 12503  003DFE  0E00               	movlw	0
 12504  003E00  0100               	movlb	0	; () banked
 12505  003E02  6F62               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 12506  003E04  0E02               	movlw	2
 12507  003E06  EC91  F021         	call	_posicao_cursor_lcd
 12508                           
 12509                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 12510  003E0A  0EAB               	movlw	low STR_21
 12511  003E0C  0100               	movlb	0	; () banked
 12512  003E0E  6F62               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 12513  003E10  0E61               	movlw	high STR_21
 12514  003E12  6F63               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 12515  003E14  EC5C  F023         	call	_escreve_frase_ram_lcd	;wreg free
 12516  003E18                     l479:
 12517                           
 12518                           ;diskio.c: 261: }
 12519                           ;diskio.c: 263: }while(buff!=0X01);
 12520  003E18  0100               	movlb	0	; () banked
 12521  003E1A  0572               	decf	sdc_reset@buff& (0+255),w,b
 12522  003E1C  B4D8               	btfsc	status,2,c
 12523  003E1E  0012               	return	
 12524  003E20  D7BB               	goto	l474
 12525  003E22                     __end_of_sdc_reset:
 12526                           	opt stack 0
 12527                           tosu	equ	0xFFF
 12528                           tosh	equ	0xFFE
 12529                           tosl	equ	0xFFD
 12530                           pclath	equ	0xFFA
 12531                           tblptru	equ	0xFF8
 12532                           tblptrh	equ	0xFF7
 12533                           tblptrl	equ	0xFF6
 12534                           tablat	equ	0xFF5
 12535                           prodh	equ	0xFF4
 12536                           prodl	equ	0xFF3
 12537                           intcon	equ	0xFF2
 12538                           intcon2	equ	0xFF1
 12539                           intcon3	equ	0xFF0
 12540                           indf0	equ	0xFEF
 12541                           postinc0	equ	0xFEE
 12542                           fsr0h	equ	0xFEA
 12543                           fsr0l	equ	0xFE9
 12544                           wreg	equ	0xFE8
 12545                           indf1	equ	0xFE7
 12546                           postinc1	equ	0xFE6
 12547                           postdec1	equ	0xFE5
 12548                           plusw1	equ	0xFE3
 12549                           fsr1h	equ	0xFE2
 12550                           fsr1l	equ	0xFE1
 12551                           indf2	equ	0xFDF
 12552                           postinc2	equ	0xFDE
 12553                           postdec2	equ	0xFDD
 12554                           plusw2	equ	0xFDB
 12555                           fsr2h	equ	0xFDA
 12556                           fsr2l	equ	0xFD9
 12557                           status	equ	0xFD8
 12558                           
 12559 ;; *************** function _posicao_cursor_lcd *****************
 12560 ;; Defined at:
 12561 ;;		line 271 in file "bibliotecas/display_lcd.c"
 12562 ;; Parameters:    Size  Location     Type
 12563 ;;  linha           1    wreg     unsigned char 
 12564 ;;  coluna          1    2[BANK0 ] unsigned char 
 12565 ;; Auto vars:     Size  Location     Type
 12566 ;;  linha           1    3[BANK0 ] unsigned char 
 12567 ;;  endereco        1    4[BANK0 ] unsigned char 
 12568 ;; Return value:  Size  Location     Type
 12569 ;;                  1    wreg      void 
 12570 ;; Registers used:
 12571 ;;		wreg, status,2, status,0, cstack
 12572 ;; Tracked objects:
 12573 ;;		On entry : 0/0
 12574 ;;		On exit  : 0/0
 12575 ;;		Unchanged: 0/0
 12576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12577 ;;      Params:         0       1       0       0       0       0       0       0       0
 12578 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12579 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12580 ;;      Totals:         0       3       0       0       0       0       0       0       0
 12581 ;;Total ram usage:        3 bytes
 12582 ;; Hardware stack levels used:    1
 12583 ;; Hardware stack levels required when called:    5
 12584 ;; This function calls:
 12585 ;;		_endereco_cursor_lcd
 12586 ;; This function is called by:
 12587 ;;		_mensagem_inicial
 12588 ;;		_verifica_fence_externo
 12589 ;;		_sdc_reset
 12590 ;;		_sdc_disk_initialize
 12591 ;;		_sdcard_init
 12592 ;; This function uses a non-reentrant model
 12593 ;;
 12594                           
 12595                           	psect	text43
 12596  004322                     __ptext43:
 12597                           	opt stack 0
 12598  004322                     _posicao_cursor_lcd:
 12599                           	opt stack 24
 12600                           
 12601                           ; BSR set to: 0
 12602                           ;incstack = 0
 12603                           ;posicao_cursor_lcd@linha stored from wreg
 12604  004322  0100               	movlb	0	; () banked
 12605  004324  6F63               	movwf	posicao_cursor_lcd@linha& (0+255),b
 12606                           
 12607                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 12608  004326  0E00               	movlw	0
 12609  004328  0100               	movlb	0	; () banked
 12610  00432A  6F64               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 12611                           
 12612                           ; BSR set to: 0
 12613                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 12614  00432C  0E11               	movlw	17
 12615  00432E  6162               	cpfslt	posicao_cursor_lcd@coluna& (0+255),b
 12616  004330  D034               	goto	l629
 12617  004332  D022               	goto	l630
 12618  004334                     l631:
 12619                           
 12620                           ; BSR set to: 0
 12621                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 12622  004334  C062  F064         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 12623                           
 12624                           ; BSR set to: 0
 12625                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 12626  004338  5164               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 12627  00433A  EC09  F022         	call	_endereco_cursor_lcd
 12628                           
 12629                           ;display_lcd.c: 284: break;
 12630  00433E  D02A               	goto	l632
 12631  004340                     
 12632                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 12633  004340  0100               	movlb	0	; () banked
 12634  004342  5162               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 12635  004344  0F40               	addlw	64
 12636  004346  6F64               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 12637                           
 12638                           ; BSR set to: 0
 12639                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 12640  004348  5164               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 12641  00434A  EC09  F022         	call	_endereco_cursor_lcd
 12642                           
 12643                           ;display_lcd.c: 289: break;
 12644  00434E  D022               	goto	l632
 12645  004350                     
 12646                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 12647  004350  0100               	movlb	0	; () banked
 12648  004352  5162               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 12649  004354  0F14               	addlw	20
 12650  004356  6F64               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 12651                           
 12652                           ; BSR set to: 0
 12653                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 12654  004358  5164               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 12655  00435A  EC09  F022         	call	_endereco_cursor_lcd
 12656                           
 12657                           ;display_lcd.c: 294: break;
 12658  00435E  D01A               	goto	l632
 12659  004360                     
 12660                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 12661  004360  0100               	movlb	0	; () banked
 12662  004362  5162               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 12663  004364  0F54               	addlw	84
 12664  004366  6F64               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 12665                           
 12666                           ; BSR set to: 0
 12667                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 12668  004368  5164               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 12669  00436A  EC09  F022         	call	_endereco_cursor_lcd
 12670                           
 12671                           ;display_lcd.c: 299: break;
 12672  00436E  D012               	goto	l632
 12673  004370                     
 12674                           ;display_lcd.c: 302: endereco = 0x00U;
 12675  004370  0E00               	movlw	0
 12676  004372  0100               	movlb	0	; () banked
 12677  004374  6F64               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 12678                           
 12679                           ; BSR set to: 0
 12680                           ;display_lcd.c: 304: }
 12681                           
 12682                           ;display_lcd.c: 303: break;
 12683  004376  D00E               	goto	l632
 12684  004378                     l630:
 12685                           
 12686                           ; BSR set to: 0
 12687                           
 12688                           ; BSR set to: 0
 12689  004378  5163               	movf	posicao_cursor_lcd@linha& (0+255),w,b
 12690                           
 12691                           ; Switch size 1, requested type "space"
 12692                           ; Number of cases is 4, Range of values is 1 to 4
 12693                           ; switch strategies available:
 12694                           ; Name         Instructions Cycles
 12695                           ; simple_byte           13     7 (average)
 12696                           ;	Chosen strategy is simple_byte
 12697  00437A  0A01               	xorlw	1	; case 1
 12698  00437C  B4D8               	btfsc	status,2,c
 12699  00437E  D7DA               	goto	l631
 12700  004380  0A03               	xorlw	3	; case 2
 12701  004382  B4D8               	btfsc	status,2,c
 12702  004384  D7DD               	goto	l633
 12703  004386  0A01               	xorlw	1	; case 3
 12704  004388  B4D8               	btfsc	status,2,c
 12705  00438A  D7E2               	goto	l634
 12706  00438C  0A07               	xorlw	7	; case 4
 12707  00438E  B4D8               	btfsc	status,2,c
 12708  004390  D7E7               	goto	l635
 12709  004392  D7EE               	goto	l636
 12710  004394                     l632:
 12711                           
 12712                           ;display_lcd.c: 306: coluna++;
 12713                           
 12714                           ; BSR set to: 0
 12715  004394  0100               	movlb	0	; () banked
 12716  004396  2B62               	incf	posicao_cursor_lcd@coluna& (0+255),f,b
 12717                           
 12718                           ;display_lcd.c: 307: }
 12719  004398  0012               	return	
 12720  00439A                     l629:
 12721                           
 12722                           ; BSR set to: 0
 12723                           ;display_lcd.c: 308: else
 12724                           ;display_lcd.c: 309: {
 12725                           ;display_lcd.c: 310: endereco = 0x00U;
 12726                           
 12727                           ; BSR set to: 0
 12728  00439A  0E00               	movlw	0
 12729  00439C  6F64               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 12730  00439E  0012               	return	
 12731  0043A0                     __end_of_posicao_cursor_lcd:
 12732                           	opt stack 0
 12733                           tosu	equ	0xFFF
 12734                           tosh	equ	0xFFE
 12735                           tosl	equ	0xFFD
 12736                           pclath	equ	0xFFA
 12737                           tblptru	equ	0xFF8
 12738                           tblptrh	equ	0xFF7
 12739                           tblptrl	equ	0xFF6
 12740                           tablat	equ	0xFF5
 12741                           prodh	equ	0xFF4
 12742                           prodl	equ	0xFF3
 12743                           intcon	equ	0xFF2
 12744                           intcon2	equ	0xFF1
 12745                           intcon3	equ	0xFF0
 12746                           indf0	equ	0xFEF
 12747                           postinc0	equ	0xFEE
 12748                           fsr0h	equ	0xFEA
 12749                           fsr0l	equ	0xFE9
 12750                           wreg	equ	0xFE8
 12751                           indf1	equ	0xFE7
 12752                           postinc1	equ	0xFE6
 12753                           postdec1	equ	0xFE5
 12754                           plusw1	equ	0xFE3
 12755                           fsr1h	equ	0xFE2
 12756                           fsr1l	equ	0xFE1
 12757                           indf2	equ	0xFDF
 12758                           postinc2	equ	0xFDE
 12759                           postdec2	equ	0xFDD
 12760                           plusw2	equ	0xFDB
 12761                           fsr2h	equ	0xFDA
 12762                           fsr2l	equ	0xFD9
 12763                           status	equ	0xFD8
 12764                           
 12765 ;; *************** function _endereco_cursor_lcd *****************
 12766 ;; Defined at:
 12767 ;;		line 218 in file "bibliotecas/display_lcd.c"
 12768 ;; Parameters:    Size  Location     Type
 12769 ;;  endereco        1    wreg     unsigned char 
 12770 ;; Auto vars:     Size  Location     Type
 12771 ;;  endereco        1   32[COMRAM] unsigned char 
 12772 ;; Return value:  Size  Location     Type
 12773 ;;                  1    wreg      void 
 12774 ;; Registers used:
 12775 ;;		wreg, status,2, status,0, cstack
 12776 ;; Tracked objects:
 12777 ;;		On entry : 0/0
 12778 ;;		On exit  : 0/0
 12779 ;;		Unchanged: 0/0
 12780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12781 ;;      Params:         0       0       0       0       0       0       0       0       0
 12782 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12783 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12784 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12785 ;;Total ram usage:        1 bytes
 12786 ;; Hardware stack levels used:    1
 12787 ;; Hardware stack levels required when called:    4
 12788 ;; This function calls:
 12789 ;;		_delay
 12790 ;; This function is called by:
 12791 ;;		_posicao_cursor_lcd
 12792 ;;		_cria_caractere_lcd
 12793 ;; This function uses a non-reentrant model
 12794 ;;
 12795                           
 12796                           	psect	text44
 12797  004412                     __ptext44:
 12798                           	opt stack 0
 12799  004412                     _endereco_cursor_lcd:
 12800                           	opt stack 24
 12801                           
 12802                           ; BSR set to: 0
 12803                           ;incstack = 0
 12804                           ;endereco_cursor_lcd@endereco stored from wreg
 12805  004412  6E21               	movwf	endereco_cursor_lcd@endereco,c
 12806                           
 12807                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 12808  004414  9483               	bcf	3971,2,c	;volatile
 12809                           
 12810                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 12811  004416  9283               	bcf	3971,1,c	;volatile
 12812                           
 12813                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 12814  004418  9083               	bcf	3971,0,c	;volatile
 12815                           
 12816                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 12817  00441A  8E83               	bsf	3971,7,c	;volatile
 12818                           
 12819                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 12820  00441C  A821               	btfss	endereco_cursor_lcd@endereco,4,c
 12821  00441E  D002               	goto	l612
 12822  004420  8883               	bsf	3971,4,c	;volatile
 12823  004422  D001               	goto	l613
 12824  004424                     l612:
 12825                           
 12826                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 12827  004424  9883               	bcf	3971,4,c	;volatile
 12828  004426                     l613:
 12829                           
 12830                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 12831  004426  AA21               	btfss	endereco_cursor_lcd@endereco,5,c
 12832  004428  D002               	goto	l614
 12833  00442A  8A83               	bsf	3971,5,c	;volatile
 12834  00442C  D001               	goto	l615
 12835  00442E                     l614:
 12836                           
 12837                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 12838  00442E  9A83               	bcf	3971,5,c	;volatile
 12839  004430                     l615:
 12840                           
 12841                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 12842  004430  AC21               	btfss	endereco_cursor_lcd@endereco,6,c
 12843  004432  D002               	goto	l616
 12844  004434  8C83               	bsf	3971,6,c	;volatile
 12845  004436  D001               	goto	l617
 12846  004438                     l616:
 12847                           
 12848                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 12849  004438  9C83               	bcf	3971,6,c	;volatile
 12850  00443A                     l617:
 12851                           
 12852                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 12853  00443A  8083               	bsf	3971,0,c	;volatile
 12854                           
 12855                           ;display_lcd.c: 236: delay();
 12856  00443C  EC9E  F025         	call	_delay	;wreg free
 12857                           
 12858                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 12859  004440  9083               	bcf	3971,0,c	;volatile
 12860                           
 12861                           ;display_lcd.c: 238: delay();
 12862  004442  EC9E  F025         	call	_delay	;wreg free
 12863                           
 12864                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 12865  004446  A021               	btfss	endereco_cursor_lcd@endereco,0,c
 12866  004448  D002               	goto	l618
 12867  00444A  8883               	bsf	3971,4,c	;volatile
 12868  00444C  D001               	goto	l619
 12869  00444E                     l618:
 12870                           
 12871                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 12872  00444E  9883               	bcf	3971,4,c	;volatile
 12873  004450                     l619:
 12874                           
 12875                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 12876  004450  A221               	btfss	endereco_cursor_lcd@endereco,1,c
 12877  004452  D002               	goto	l620
 12878  004454  8A83               	bsf	3971,5,c	;volatile
 12879  004456  D001               	goto	l621
 12880  004458                     l620:
 12881                           
 12882                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 12883  004458  9A83               	bcf	3971,5,c	;volatile
 12884  00445A                     l621:
 12885                           
 12886                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 12887  00445A  A421               	btfss	endereco_cursor_lcd@endereco,2,c
 12888  00445C  D002               	goto	l622
 12889  00445E  8C83               	bsf	3971,6,c	;volatile
 12890  004460  D001               	goto	l623
 12891  004462                     l622:
 12892                           
 12893                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 12894  004462  9C83               	bcf	3971,6,c	;volatile
 12895  004464                     l623:
 12896                           
 12897                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 12898  004464  A621               	btfss	endereco_cursor_lcd@endereco,3,c
 12899  004466  D002               	goto	l624
 12900  004468  8E83               	bsf	3971,7,c	;volatile
 12901  00446A  D001               	goto	l625
 12902  00446C                     l624:
 12903                           
 12904                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 12905  00446C  9E83               	bcf	3971,7,c	;volatile
 12906  00446E                     l625:
 12907                           
 12908                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 12909  00446E  8083               	bsf	3971,0,c	;volatile
 12910                           
 12911                           ;display_lcd.c: 252: delay();
 12912  004470  EC9E  F025         	call	_delay	;wreg free
 12913                           
 12914                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 12915  004474  9083               	bcf	3971,0,c	;volatile
 12916                           
 12917                           ;display_lcd.c: 254: delay();
 12918  004476  EC9E  F025         	call	_delay	;wreg free
 12919  00447A  0012               	return		;funcret
 12920  00447C                     __end_of_endereco_cursor_lcd:
 12921                           	opt stack 0
 12922                           tosu	equ	0xFFF
 12923                           tosh	equ	0xFFE
 12924                           tosl	equ	0xFFD
 12925                           pclath	equ	0xFFA
 12926                           tblptru	equ	0xFF8
 12927                           tblptrh	equ	0xFF7
 12928                           tblptrl	equ	0xFF6
 12929                           tablat	equ	0xFF5
 12930                           prodh	equ	0xFF4
 12931                           prodl	equ	0xFF3
 12932                           intcon	equ	0xFF2
 12933                           intcon2	equ	0xFF1
 12934                           intcon3	equ	0xFF0
 12935                           indf0	equ	0xFEF
 12936                           postinc0	equ	0xFEE
 12937                           fsr0h	equ	0xFEA
 12938                           fsr0l	equ	0xFE9
 12939                           wreg	equ	0xFE8
 12940                           indf1	equ	0xFE7
 12941                           postinc1	equ	0xFE6
 12942                           postdec1	equ	0xFE5
 12943                           plusw1	equ	0xFE3
 12944                           fsr1h	equ	0xFE2
 12945                           fsr1l	equ	0xFE1
 12946                           indf2	equ	0xFDF
 12947                           postinc2	equ	0xFDE
 12948                           postdec2	equ	0xFDD
 12949                           plusw2	equ	0xFDB
 12950                           fsr2h	equ	0xFDA
 12951                           fsr2l	equ	0xFD9
 12952                           status	equ	0xFD8
 12953                           
 12954 ;; *************** function _escreve_frase_ram_lcd *****************
 12955 ;; Defined at:
 12956 ;;		line 445 in file "bibliotecas/display_lcd.c"
 12957 ;; Parameters:    Size  Location     Type
 12958 ;;  buffer          2    2[BANK0 ] PTR unsigned char 
 12959 ;;		 -> escreve_inteiro_lcd@texto(7), STR_23(11), STR_22(10), STR_21(16), 
 12960 ;;		 -> STR_20(11), STR_17(9), STR_16(10), STR_15(10), 
 12961 ;;		 -> STR_14(14), STR_13(21), STR_12(15), STR_9(14), 
 12962 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 12963 ;; Auto vars:     Size  Location     Type
 12964 ;;		None
 12965 ;; Return value:  Size  Location     Type
 12966 ;;                  1    wreg      void 
 12967 ;; Registers used:
 12968 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12969 ;; Tracked objects:
 12970 ;;		On entry : 0/0
 12971 ;;		On exit  : 0/0
 12972 ;;		Unchanged: 0/0
 12973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12974 ;;      Params:         0       2       0       0       0       0       0       0       0
 12975 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12976 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12977 ;;      Totals:         0       2       0       0       0       0       0       0       0
 12978 ;;Total ram usage:        2 bytes
 12979 ;; Hardware stack levels used:    1
 12980 ;; Hardware stack levels required when called:    5
 12981 ;; This function calls:
 12982 ;;		_escreve_caractere_lcd
 12983 ;; This function is called by:
 12984 ;;		_mensagem_inicial
 12985 ;;		_verifica_fence_externo
 12986 ;;		_sdc_reset
 12987 ;;		_sdc_disk_initialize
 12988 ;;		_sdcard_init
 12989 ;;		_escreve_inteiro_lcd
 12990 ;; This function uses a non-reentrant model
 12991 ;;
 12992                           
 12993                           	psect	text45
 12994  0046B8                     __ptext45:
 12995                           	opt stack 0
 12996  0046B8                     _escreve_frase_ram_lcd:
 12997                           	opt stack 24
 12998                           
 12999                           ;display_lcd.c: 447: while(*buffer)
 13000                           
 13001                           ;incstack = 0
 13002  0046B8  D015               	goto	l674
 13003  0046BA                     
 13004                           ;display_lcd.c: 448: {
 13005                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 13006  0046BA  C062  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13007  0046BE  C063  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13008  0046C2  6AF8               	clrf	tblptru,c
 13009  0046C4  0E07               	movlw	(high __ramtop+-1)
 13010  0046C6  64F7               	cpfsgt	tblptrh,c
 13011  0046C8  D003               	bra	u10947
 13012  0046CA  0008               	tblrd		*
 13013  0046CC  50F5               	movf	tablat,w,c
 13014  0046CE  D005               	bra	u10940
 13015  0046D0                     u10947:
 13016  0046D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 13017  0046D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 13018  0046D8  50EF               	movf	indf0,w,c
 13019  0046DA                     u10940:
 13020  0046DA  ECD0  F021         	call	_escreve_caractere_lcd
 13021                           
 13022                           ;display_lcd.c: 450: buffer++;
 13023  0046DE  0100               	movlb	0	; () banked
 13024  0046E0  4B62               	infsnz	escreve_frase_ram_lcd@buffer& (0+255),f,b
 13025  0046E2  2B63               	incf	(escreve_frase_ram_lcd@buffer+1)& (0+255),f,b
 13026  0046E4                     l674:
 13027                           
 13028                           ; BSR set to: 0
 13029  0046E4  C062  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13030  0046E8  C063  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13031  0046EC  6AF8               	clrf	tblptru,c
 13032  0046EE  0E07               	movlw	(high __ramtop+-1)
 13033  0046F0  64F7               	cpfsgt	tblptrh,c
 13034  0046F2  D003               	bra	u10957
 13035  0046F4  0008               	tblrd		*
 13036  0046F6  50F5               	movf	tablat,w,c
 13037  0046F8  D005               	bra	u10950
 13038  0046FA                     u10957:
 13039  0046FA  CFF6 FFE9          	movff	tblptrl,fsr0l
 13040  0046FE  CFF7 FFEA          	movff	tblptrh,fsr0h
 13041  004702  50EF               	movf	indf0,w,c
 13042  004704                     u10950:
 13043  004704  0900               	iorlw	0
 13044  004706  B4D8               	btfsc	status,2,c
 13045  004708  0012               	return	
 13046  00470A  D7D7               	goto	l675
 13047  00470C                     __end_of_escreve_frase_ram_lcd:
 13048                           	opt stack 0
 13049                           tosu	equ	0xFFF
 13050                           tosh	equ	0xFFE
 13051                           tosl	equ	0xFFD
 13052                           pclath	equ	0xFFA
 13053                           tblptru	equ	0xFF8
 13054                           tblptrh	equ	0xFF7
 13055                           tblptrl	equ	0xFF6
 13056                           tablat	equ	0xFF5
 13057                           prodh	equ	0xFF4
 13058                           prodl	equ	0xFF3
 13059                           intcon	equ	0xFF2
 13060                           intcon2	equ	0xFF1
 13061                           intcon3	equ	0xFF0
 13062                           indf0	equ	0xFEF
 13063                           postinc0	equ	0xFEE
 13064                           fsr0h	equ	0xFEA
 13065                           fsr0l	equ	0xFE9
 13066                           wreg	equ	0xFE8
 13067                           indf1	equ	0xFE7
 13068                           postinc1	equ	0xFE6
 13069                           postdec1	equ	0xFE5
 13070                           plusw1	equ	0xFE3
 13071                           fsr1h	equ	0xFE2
 13072                           fsr1l	equ	0xFE1
 13073                           indf2	equ	0xFDF
 13074                           postinc2	equ	0xFDE
 13075                           postdec2	equ	0xFDD
 13076                           plusw2	equ	0xFDB
 13077                           fsr2h	equ	0xFDA
 13078                           fsr2l	equ	0xFD9
 13079                           status	equ	0xFD8
 13080                           
 13081 ;; *************** function _escreve_caractere_lcd *****************
 13082 ;; Defined at:
 13083 ;;		line 323 in file "bibliotecas/display_lcd.c"
 13084 ;; Parameters:    Size  Location     Type
 13085 ;;  data            1    wreg     unsigned char 
 13086 ;; Auto vars:     Size  Location     Type
 13087 ;;  data            1   32[COMRAM] unsigned char 
 13088 ;; Return value:  Size  Location     Type
 13089 ;;                  1    wreg      void 
 13090 ;; Registers used:
 13091 ;;		wreg, status,2, status,0, cstack
 13092 ;; Tracked objects:
 13093 ;;		On entry : 0/0
 13094 ;;		On exit  : 0/0
 13095 ;;		Unchanged: 0/0
 13096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13097 ;;      Params:         0       0       0       0       0       0       0       0       0
 13098 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13099 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13100 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13101 ;;Total ram usage:        1 bytes
 13102 ;; Hardware stack levels used:    1
 13103 ;; Hardware stack levels required when called:    4
 13104 ;; This function calls:
 13105 ;;		_delay
 13106 ;; This function is called by:
 13107 ;;		_escreve_frase_ram_lcd
 13108 ;;		_escreve_float_lcd
 13109 ;;		_escreve_frase_lcd
 13110 ;;		_cria_caractere_lcd
 13111 ;; This function uses a non-reentrant model
 13112 ;;
 13113                           
 13114                           	psect	text46
 13115  0043A0                     __ptext46:
 13116                           	opt stack 0
 13117  0043A0                     _escreve_caractere_lcd:
 13118                           	opt stack 24
 13119                           
 13120                           ;incstack = 0
 13121                           ;escreve_caractere_lcd@data stored from wreg
 13122  0043A0  6E21               	movwf	escreve_caractere_lcd@data,c
 13123                           
 13124                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 13125  0043A2  9483               	bcf	3971,2,c	;volatile
 13126                           
 13127                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 13128  0043A4  8283               	bsf	3971,1,c	;volatile
 13129                           
 13130                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 13131  0043A6  9083               	bcf	3971,0,c	;volatile
 13132                           
 13133                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 13134  0043A8  A821               	btfss	escreve_caractere_lcd@data,4,c
 13135  0043AA  D002               	goto	l641
 13136  0043AC  8883               	bsf	3971,4,c	;volatile
 13137  0043AE  D001               	goto	l642
 13138  0043B0                     l641:
 13139                           
 13140                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 13141  0043B0  9883               	bcf	3971,4,c	;volatile
 13142  0043B2                     l642:
 13143                           
 13144                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 13145  0043B2  AA21               	btfss	escreve_caractere_lcd@data,5,c
 13146  0043B4  D002               	goto	l643
 13147  0043B6  8A83               	bsf	3971,5,c	;volatile
 13148  0043B8  D001               	goto	l644
 13149  0043BA                     l643:
 13150                           
 13151                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 13152  0043BA  9A83               	bcf	3971,5,c	;volatile
 13153  0043BC                     l644:
 13154                           
 13155                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 13156  0043BC  AC21               	btfss	escreve_caractere_lcd@data,6,c
 13157  0043BE  D002               	goto	l645
 13158  0043C0  8C83               	bsf	3971,6,c	;volatile
 13159  0043C2  D001               	goto	l646
 13160  0043C4                     l645:
 13161                           
 13162                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 13163  0043C4  9C83               	bcf	3971,6,c	;volatile
 13164  0043C6                     l646:
 13165                           
 13166                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 13167  0043C6  AE21               	btfss	escreve_caractere_lcd@data,7,c
 13168  0043C8  D002               	goto	l647
 13169  0043CA  8E83               	bsf	3971,7,c	;volatile
 13170  0043CC  D001               	goto	l648
 13171  0043CE                     l647:
 13172                           
 13173                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 13174  0043CE  9E83               	bcf	3971,7,c	;volatile
 13175  0043D0                     l648:
 13176                           
 13177                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 13178  0043D0  8083               	bsf	3971,0,c	;volatile
 13179                           
 13180                           ;display_lcd.c: 342: delay();
 13181  0043D2  EC9E  F025         	call	_delay	;wreg free
 13182                           
 13183                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 13184  0043D6  9083               	bcf	3971,0,c	;volatile
 13185                           
 13186                           ;display_lcd.c: 344: delay();
 13187  0043D8  EC9E  F025         	call	_delay	;wreg free
 13188                           
 13189                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 13190  0043DC  A021               	btfss	escreve_caractere_lcd@data,0,c
 13191  0043DE  D002               	goto	l649
 13192  0043E0  8883               	bsf	3971,4,c	;volatile
 13193  0043E2  D001               	goto	l650
 13194  0043E4                     l649:
 13195                           
 13196                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 13197  0043E4  9883               	bcf	3971,4,c	;volatile
 13198  0043E6                     l650:
 13199                           
 13200                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 13201  0043E6  A221               	btfss	escreve_caractere_lcd@data,1,c
 13202  0043E8  D002               	goto	l651
 13203  0043EA  8A83               	bsf	3971,5,c	;volatile
 13204  0043EC  D001               	goto	l652
 13205  0043EE                     l651:
 13206                           
 13207                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 13208  0043EE  9A83               	bcf	3971,5,c	;volatile
 13209  0043F0                     l652:
 13210                           
 13211                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 13212  0043F0  A421               	btfss	escreve_caractere_lcd@data,2,c
 13213  0043F2  D002               	goto	l653
 13214  0043F4  8C83               	bsf	3971,6,c	;volatile
 13215  0043F6  D001               	goto	l654
 13216  0043F8                     l653:
 13217                           
 13218                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 13219  0043F8  9C83               	bcf	3971,6,c	;volatile
 13220  0043FA                     l654:
 13221                           
 13222                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 13223  0043FA  A621               	btfss	escreve_caractere_lcd@data,3,c
 13224  0043FC  D002               	goto	l655
 13225  0043FE  8E83               	bsf	3971,7,c	;volatile
 13226  004400  D001               	goto	l656
 13227  004402                     l655:
 13228                           
 13229                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 13230  004402  9E83               	bcf	3971,7,c	;volatile
 13231  004404                     l656:
 13232                           
 13233                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 13234  004404  8083               	bsf	3971,0,c	;volatile
 13235                           
 13236                           ;display_lcd.c: 359: delay();
 13237  004406  EC9E  F025         	call	_delay	;wreg free
 13238                           
 13239                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 13240  00440A  9083               	bcf	3971,0,c	;volatile
 13241                           
 13242                           ;display_lcd.c: 361: delay();
 13243  00440C  EC9E  F025         	call	_delay	;wreg free
 13244  004410  0012               	return		;funcret
 13245  004412                     __end_of_escreve_caractere_lcd:
 13246                           	opt stack 0
 13247                           tosu	equ	0xFFF
 13248                           tosh	equ	0xFFE
 13249                           tosl	equ	0xFFD
 13250                           pclath	equ	0xFFA
 13251                           tblptru	equ	0xFF8
 13252                           tblptrh	equ	0xFF7
 13253                           tblptrl	equ	0xFF6
 13254                           tablat	equ	0xFF5
 13255                           prodh	equ	0xFF4
 13256                           prodl	equ	0xFF3
 13257                           intcon	equ	0xFF2
 13258                           intcon2	equ	0xFF1
 13259                           intcon3	equ	0xFF0
 13260                           indf0	equ	0xFEF
 13261                           postinc0	equ	0xFEE
 13262                           fsr0h	equ	0xFEA
 13263                           fsr0l	equ	0xFE9
 13264                           wreg	equ	0xFE8
 13265                           indf1	equ	0xFE7
 13266                           postinc1	equ	0xFE6
 13267                           postdec1	equ	0xFE5
 13268                           plusw1	equ	0xFE3
 13269                           fsr1h	equ	0xFE2
 13270                           fsr1l	equ	0xFE1
 13271                           indf2	equ	0xFDF
 13272                           postinc2	equ	0xFDE
 13273                           postdec2	equ	0xFDD
 13274                           plusw2	equ	0xFDB
 13275                           fsr2h	equ	0xFDA
 13276                           fsr2l	equ	0xFD9
 13277                           status	equ	0xFD8
 13278                           
 13279 ;; *************** function _delay *****************
 13280 ;; Defined at:
 13281 ;;		line 45 in file "bibliotecas/display_lcd.c"
 13282 ;; Parameters:    Size  Location     Type
 13283 ;;		None
 13284 ;; Auto vars:     Size  Location     Type
 13285 ;;  contador_int    1    1[BANK0 ] unsigned char 
 13286 ;;  contador_ext    1    0[BANK0 ] unsigned char 
 13287 ;; Return value:  Size  Location     Type
 13288 ;;                  1    wreg      void 
 13289 ;; Registers used:
 13290 ;;		wreg, status,2, status,0
 13291 ;; Tracked objects:
 13292 ;;		On entry : 0/0
 13293 ;;		On exit  : 0/0
 13294 ;;		Unchanged: 0/0
 13295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13296 ;;      Params:         0       0       0       0       0       0       0       0       0
 13297 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13298 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13299 ;;      Totals:         0       2       0       0       0       0       0       0       0
 13300 ;;Total ram usage:        2 bytes
 13301 ;; Hardware stack levels used:    1
 13302 ;; Hardware stack levels required when called:    3
 13303 ;; This function calls:
 13304 ;;		Nothing
 13305 ;; This function is called by:
 13306 ;;		_init_lcd
 13307 ;;		_escreve_cmd_lcd
 13308 ;;		_endereco_cursor_lcd
 13309 ;;		_escreve_caractere_lcd
 13310 ;; This function uses a non-reentrant model
 13311 ;;
 13312                           
 13313                           	psect	text47
 13314  004B3C                     __ptext47:
 13315                           	opt stack 0
 13316  004B3C                     _delay:
 13317                           	opt stack 24
 13318                           
 13319                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 13320                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 13321                           
 13322                           ;incstack = 0
 13323  004B3C  0E00               	movlw	0
 13324  004B3E  0100               	movlb	0	; () banked
 13325  004B40  6F60               	movwf	delay@contador_ext& (0+255),b
 13326  004B42                     l8957:
 13327                           
 13328                           ; BSR set to: 0
 13329  004B42  0E63               	movlw	99
 13330  004B44  6560               	cpfsgt	delay@contador_ext& (0+255),b
 13331  004B46  D001               	goto	l580
 13332  004B48  0012               	return	
 13333  004B4A                     l580:
 13334                           
 13335                           ; BSR set to: 0
 13336                           ;display_lcd.c: 50: {
 13337                           ;display_lcd.c: 51: __nop();
 13338  004B4A  F000               	nop	
 13339                           
 13340                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 13341  004B4C  0E00               	movlw	0
 13342  004B4E  0100               	movlb	0	; () banked
 13343  004B50  6F61               	movwf	delay@contador_int& (0+255),b
 13344  004B52                     l8963:
 13345                           
 13346                           ; BSR set to: 0
 13347  004B52  0E31               	movlw	49
 13348  004B54  6561               	cpfsgt	delay@contador_int& (0+255),b
 13349  004B56  D001               	goto	l582
 13350  004B58  D004               	goto	u10670
 13351  004B5A                     l582:
 13352                           
 13353                           ; BSR set to: 0
 13354                           ;display_lcd.c: 53: {
 13355                           ;display_lcd.c: 54: __nop();
 13356  004B5A  F000               	nop	
 13357  004B5C  0100               	movlb	0	; () banked
 13358  004B5E  2B61               	incf	delay@contador_int& (0+255),f,b
 13359  004B60  D7F8               	goto	l8963
 13360  004B62                     u10670:
 13361                           
 13362                           ; BSR set to: 0
 13363                           
 13364                           ; BSR set to: 0
 13365  004B62  2B60               	incf	delay@contador_ext& (0+255),f,b
 13366  004B64  D7EE               	goto	l8957
 13367  004B66                     __end_of_delay:
 13368                           	opt stack 0
 13369                           tosu	equ	0xFFF
 13370                           tosh	equ	0xFFE
 13371                           tosl	equ	0xFFD
 13372                           pclath	equ	0xFFA
 13373                           tblptru	equ	0xFF8
 13374                           tblptrh	equ	0xFF7
 13375                           tblptrl	equ	0xFF6
 13376                           tablat	equ	0xFF5
 13377                           prodh	equ	0xFF4
 13378                           prodl	equ	0xFF3
 13379                           intcon	equ	0xFF2
 13380                           intcon2	equ	0xFF1
 13381                           intcon3	equ	0xFF0
 13382                           indf0	equ	0xFEF
 13383                           postinc0	equ	0xFEE
 13384                           fsr0h	equ	0xFEA
 13385                           fsr0l	equ	0xFE9
 13386                           wreg	equ	0xFE8
 13387                           indf1	equ	0xFE7
 13388                           postinc1	equ	0xFE6
 13389                           postdec1	equ	0xFE5
 13390                           plusw1	equ	0xFE3
 13391                           fsr1h	equ	0xFE2
 13392                           fsr1l	equ	0xFE1
 13393                           indf2	equ	0xFDF
 13394                           postinc2	equ	0xFDE
 13395                           postdec2	equ	0xFDD
 13396                           plusw2	equ	0xFDB
 13397                           fsr2h	equ	0xFDA
 13398                           fsr2l	equ	0xFD9
 13399                           status	equ	0xFD8
 13400                           
 13401 ;; *************** function _check_fs *****************
 13402 ;; Defined at:
 13403 ;;		line 623 in file "bibliotecas/tff.c"
 13404 ;; Parameters:    Size  Location     Type
 13405 ;;  sect            4   43[BANK0 ] unsigned long 
 13406 ;; Auto vars:     Size  Location     Type
 13407 ;;  fs              2   49[BANK0 ] PTR struct _FATFS
 13408 ;;		 -> NULL(0), fs(544), 
 13409 ;; Return value:  Size  Location     Type
 13410 ;;                  1    wreg      unsigned char 
 13411 ;; Registers used:
 13412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13413 ;; Tracked objects:
 13414 ;;		On entry : 0/0
 13415 ;;		On exit  : 0/0
 13416 ;;		Unchanged: 0/0
 13417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13418 ;;      Params:         0       4       0       0       0       0       0       0       0
 13419 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13420 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13421 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13422 ;;Total ram usage:        8 bytes
 13423 ;; Hardware stack levels used:    1
 13424 ;; Hardware stack levels required when called:    8
 13425 ;; This function calls:
 13426 ;;		_disk_read
 13427 ;;		_memcmp
 13428 ;; This function is called by:
 13429 ;;		_auto_mount
 13430 ;; This function uses a non-reentrant model
 13431 ;;
 13432                           
 13433                           	psect	text48
 13434  004080                     __ptext48:
 13435                           	opt stack 0
 13436  004080                     _check_fs:
 13437                           	opt stack 17
 13438                           
 13439                           ;tff.c: 627: FATFS *fs = FatFs;
 13440                           
 13441                           ; BSR set to: 0
 13442                           ;incstack = 0
 13443  004080  C0FD  F091         	movff	_FatFs,check_fs@fs
 13444  004084  C0FE  F092         	movff	_FatFs+1,check_fs@fs+1
 13445                           
 13446                           ;tff.c: 629: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 13447  004088  0E20               	movlw	32
 13448  00408A  0100               	movlb	0	; () banked
 13449  00408C  2591               	addwf	check_fs@fs& (0+255),w,b
 13450  00408E  6F7F               	movwf	disk_read@buff& (0+255),b
 13451  004090  0E00               	movlw	0
 13452  004092  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 13453  004094  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 13454  004096  C08B  F081         	movff	check_fs@sect,disk_read@sector
 13455  00409A  C08C  F082         	movff	check_fs@sect+1,disk_read@sector+1
 13456  00409E  C08D  F083         	movff	check_fs@sect+2,disk_read@sector+2
 13457  0040A2  C08E  F084         	movff	check_fs@sect+3,disk_read@sector+3
 13458  0040A6  0E01               	movlw	1
 13459  0040A8  6F85               	movwf	disk_read@count& (0+255),b
 13460  0040AA  0E00               	movlw	0
 13461  0040AC  ECB2  F01F         	call	_disk_read
 13462  0040B0  0900               	iorlw	0
 13463  0040B2  B4D8               	btfsc	status,2,c
 13464  0040B4  D002               	goto	l1124
 13465                           
 13466                           ;tff.c: 630: return 2;
 13467  0040B6  0E02               	movlw	2
 13468  0040B8  0012               	return	
 13469  0040BA                     l1124:
 13470                           
 13471                           ;tff.c: 631: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 13472  0040BA  0100               	movlb	0	; () banked
 13473  0040BC  EE22 F01E          	lfsr	2,542
 13474  0040C0  5191               	movf	check_fs@fs& (0+255),w,b
 13475  0040C2  26D9               	addwf	fsr2l,f,c
 13476  0040C4  5192               	movf	(check_fs@fs+1)& (0+255),w,b
 13477  0040C6  22DA               	addwfc	fsr2h,f,c
 13478  0040C8  0E55               	movlw	85
 13479  0040CA  18DE               	xorwf	postinc2,w,c
 13480  0040CC  E104               	bnz	u12320
 13481  0040CE  0EAA               	movlw	170
 13482  0040D0  18DE               	xorwf	postinc2,w,c
 13483  0040D2  B4D8               	btfsc	status,2,c
 13484  0040D4  D002               	goto	l1126
 13485  0040D6                     u12320:
 13486                           
 13487                           ; BSR set to: 0
 13488                           ;tff.c: 632: return 2;
 13489  0040D6  0E02               	movlw	2
 13490                           
 13491                           ; BSR set to: 0
 13492  0040D8  0012               	return	
 13493  0040DA                     l1126:
 13494                           
 13495                           ; BSR set to: 0
 13496                           ;tff.c: 634: if (!memcmp(&fs->win[54], "FAT", 3))
 13497                           
 13498                           ; BSR set to: 0
 13499  0040DA  0E56               	movlw	86
 13500  0040DC  2591               	addwf	check_fs@fs& (0+255),w,b
 13501  0040DE  6F60               	movwf	memcmp@s1& (0+255),b
 13502  0040E0  0E00               	movlw	0
 13503  0040E2  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 13504  0040E4  6F61               	movwf	(memcmp@s1+1)& (0+255),b
 13505  0040E6  0E78               	movlw	low STR_25
 13506  0040E8  6F62               	movwf	memcmp@s2& (0+255),b
 13507  0040EA  0E62               	movlw	high STR_25
 13508  0040EC  6F63               	movwf	(memcmp@s2+1)& (0+255),b
 13509  0040EE  0E00               	movlw	0
 13510  0040F0  6F65               	movwf	(memcmp@n+1)& (0+255),b
 13511  0040F2  0E03               	movlw	3
 13512  0040F4  6F64               	movwf	memcmp@n& (0+255),b
 13513  0040F6  EC11  F01F         	call	_memcmp	;wreg free
 13514  0040FA  0100               	movlb	0	; () banked
 13515  0040FC  5160               	movf	?_memcmp& (0+255),w,b
 13516  0040FE  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 13517  004100  A4D8               	btfss	status,2,c
 13518  004102  D002               	goto	l1127
 13519                           
 13520                           ; BSR set to: 0
 13521                           ;tff.c: 635: return 0;
 13522  004104  0E00               	movlw	0
 13523                           
 13524                           ; BSR set to: 0
 13525  004106  0012               	return	
 13526  004108                     l1127:
 13527                           
 13528                           ; BSR set to: 0
 13529                           ;tff.c: 640: return 1;
 13530                           
 13531                           ; BSR set to: 0
 13532  004108  0E01               	movlw	1
 13533  00410A  0012               	return	
 13534  00410C                     __end_of_check_fs:
 13535                           	opt stack 0
 13536                           tosu	equ	0xFFF
 13537                           tosh	equ	0xFFE
 13538                           tosl	equ	0xFFD
 13539                           pclath	equ	0xFFA
 13540                           tblptru	equ	0xFF8
 13541                           tblptrh	equ	0xFF7
 13542                           tblptrl	equ	0xFF6
 13543                           tablat	equ	0xFF5
 13544                           prodh	equ	0xFF4
 13545                           prodl	equ	0xFF3
 13546                           intcon	equ	0xFF2
 13547                           intcon2	equ	0xFF1
 13548                           intcon3	equ	0xFF0
 13549                           indf0	equ	0xFEF
 13550                           postinc0	equ	0xFEE
 13551                           fsr0h	equ	0xFEA
 13552                           fsr0l	equ	0xFE9
 13553                           wreg	equ	0xFE8
 13554                           indf1	equ	0xFE7
 13555                           postinc1	equ	0xFE6
 13556                           postdec1	equ	0xFE5
 13557                           plusw1	equ	0xFE3
 13558                           fsr1h	equ	0xFE2
 13559                           fsr1l	equ	0xFE1
 13560                           indf2	equ	0xFDF
 13561                           postinc2	equ	0xFDE
 13562                           postdec2	equ	0xFDD
 13563                           plusw2	equ	0xFDB
 13564                           fsr2h	equ	0xFDA
 13565                           fsr2l	equ	0xFD9
 13566                           status	equ	0xFD8
 13567                           
 13568 ;; *************** function _memcmp *****************
 13569 ;; Defined at:
 13570 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
 13571 ;; Parameters:    Size  Location     Type
 13572 ;;  s1              2    0[BANK0 ] PTR const void 
 13573 ;;		 -> fs.win(512), NULL(0), fs(544), 
 13574 ;;  s2              2    2[BANK0 ] PTR const void 
 13575 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_25(4), 
 13576 ;;  n               2    4[BANK0 ] unsigned int 
 13577 ;; Auto vars:     Size  Location     Type
 13578 ;;		None
 13579 ;; Return value:  Size  Location     Type
 13580 ;;                  2    0[BANK0 ] int 
 13581 ;; Registers used:
 13582 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 13583 ;; Tracked objects:
 13584 ;;		On entry : 0/0
 13585 ;;		On exit  : 0/0
 13586 ;;		Unchanged: 0/0
 13587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13588 ;;      Params:         0       6       0       0       0       0       0       0       0
 13589 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13590 ;;      Temps:          0       3       0       0       0       0       0       0       0
 13591 ;;      Totals:         0       9       0       0       0       0       0       0       0
 13592 ;;Total ram usage:        9 bytes
 13593 ;; Hardware stack levels used:    1
 13594 ;; Hardware stack levels required when called:    3
 13595 ;; This function calls:
 13596 ;;		Nothing
 13597 ;; This function is called by:
 13598 ;;		_trace_path
 13599 ;;		_check_fs
 13600 ;; This function uses a non-reentrant model
 13601 ;;
 13602                           
 13603                           	psect	text49
 13604  003E22                     __ptext49:
 13605                           	opt stack 0
 13606  003E22                     _memcmp:
 13607                           	opt stack 22
 13608                           
 13609                           ;incstack = 0
 13610  003E22  D043               	goto	l1870
 13611  003E24                     l9621:
 13612  003E24  C060  FFD9         	movff	memcmp@s1,fsr2l
 13613  003E28  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 13614  003E2C  50DF               	movf	indf2,w,c
 13615  003E2E  0100               	movlb	0	; () banked
 13616  003E30  6F66               	movwf	??_memcmp& (0+255),b
 13617  003E32  C062  FFF6         	movff	memcmp@s2,tblptrl
 13618  003E36  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 13619  003E3A  6AF8               	clrf	tblptru,c
 13620  003E3C  0E07               	movlw	(high __ramtop+-1)
 13621  003E3E  64F7               	cpfsgt	tblptrh,c
 13622  003E40  D003               	bra	u11647
 13623  003E42  0008               	tblrd		*
 13624  003E44  50F5               	movf	tablat,w,c
 13625  003E46  D005               	bra	u11640
 13626  003E48                     u11647:
 13627  003E48  CFF6 FFE9          	movff	tblptrl,fsr0l
 13628  003E4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13629  003E50  50EF               	movf	indf0,w,c
 13630  003E52                     u11640:
 13631  003E52  0100               	movlb	0	; () banked
 13632  003E54  1966               	xorwf	??_memcmp& (0+255),w,b
 13633  003E56  B4D8               	btfsc	status,2,c
 13634  003E58  D024               	goto	l1872
 13635                           
 13636                           ; BSR set to: 0
 13637  003E5A  C062  FFF6         	movff	memcmp@s2,tblptrl
 13638  003E5E  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 13639  003E62  6AF8               	clrf	tblptru,c
 13640  003E64  0E07               	movlw	(high __ramtop+-1)
 13641  003E66  64F7               	cpfsgt	tblptrh,c
 13642  003E68  D003               	bra	u11667
 13643  003E6A  0008               	tblrd		*
 13644  003E6C  50F5               	movf	tablat,w,c
 13645  003E6E  D005               	bra	u11660
 13646  003E70                     u11667:
 13647  003E70  CFF6 FFE9          	movff	tblptrl,fsr0l
 13648  003E74  CFF7 FFEA          	movff	tblptrh,fsr0h
 13649  003E78  50EF               	movf	indf0,w,c
 13650  003E7A                     u11660:
 13651  003E7A  0100               	movlb	0	; () banked
 13652  003E7C  6F66               	movwf	??_memcmp& (0+255),b
 13653  003E7E  6B67               	clrf	(??_memcmp+1)& (0+255),b
 13654  003E80  1F66               	comf	??_memcmp& (0+255),f,b
 13655  003E82  1F67               	comf	(??_memcmp+1)& (0+255),f,b
 13656  003E84  4B66               	infsnz	??_memcmp& (0+255),f,b
 13657  003E86  2B67               	incf	(??_memcmp+1)& (0+255),f,b
 13658  003E88  C060  FFD9         	movff	memcmp@s1,fsr2l
 13659  003E8C  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 13660  003E90  50DF               	movf	indf2,w,c
 13661  003E92  6F68               	movwf	(??_memcmp+2)& (0+255),b
 13662  003E94  5168               	movf	(??_memcmp+2)& (0+255),w,b
 13663  003E96  2566               	addwf	??_memcmp& (0+255),w,b
 13664  003E98  6F60               	movwf	?_memcmp& (0+255),b
 13665  003E9A  0E00               	movlw	0
 13666  003E9C  2167               	addwfc	(??_memcmp+1)& (0+255),w,b
 13667  003E9E  6F61               	movwf	(?_memcmp+1)& (0+255),b
 13668                           
 13669                           ; BSR set to: 0
 13670  003EA0  0012               	return	
 13671  003EA2                     l1872:
 13672                           
 13673                           ; BSR set to: 0
 13674                           
 13675                           ; BSR set to: 0
 13676  003EA2  4B60               	infsnz	memcmp@s1& (0+255),f,b
 13677  003EA4  2B61               	incf	(memcmp@s1+1)& (0+255),f,b
 13678  003EA6  4B62               	infsnz	memcmp@s2& (0+255),f,b
 13679  003EA8  2B63               	incf	(memcmp@s2+1)& (0+255),f,b
 13680  003EAA                     l1870:
 13681                           
 13682                           ; BSR set to: 0
 13683  003EAA  0100               	movlb	0	; () banked
 13684  003EAC  0764               	decf	memcmp@n& (0+255),f,b
 13685  003EAE  A0D8               	btfss	status,0,c
 13686  003EB0  0765               	decf	(memcmp@n+1)& (0+255),f,b
 13687  003EB2  2964               	incf	memcmp@n& (0+255),w,b
 13688  003EB4  E1B7               	bnz	l9621
 13689  003EB6  2965               	incf	(memcmp@n+1)& (0+255),w,b
 13690  003EB8  A4D8               	btfss	status,2,c
 13691  003EBA  D7B4               	goto	l1871
 13692                           
 13693                           ; BSR set to: 0
 13694                           
 13695                           ; BSR set to: 0
 13696  003EBC  0E00               	movlw	0
 13697  003EBE  6F61               	movwf	(?_memcmp+1)& (0+255),b
 13698  003EC0  0E00               	movlw	0
 13699  003EC2  6F60               	movwf	?_memcmp& (0+255),b
 13700  003EC4  0012               	return	
 13701  003EC6                     __end_of_memcmp:
 13702                           	opt stack 0
 13703                           tosu	equ	0xFFF
 13704                           tosh	equ	0xFFE
 13705                           tosl	equ	0xFFD
 13706                           pclath	equ	0xFFA
 13707                           tblptru	equ	0xFF8
 13708                           tblptrh	equ	0xFF7
 13709                           tblptrl	equ	0xFF6
 13710                           tablat	equ	0xFF5
 13711                           prodh	equ	0xFF4
 13712                           prodl	equ	0xFF3
 13713                           intcon	equ	0xFF2
 13714                           intcon2	equ	0xFF1
 13715                           intcon3	equ	0xFF0
 13716                           indf0	equ	0xFEF
 13717                           postinc0	equ	0xFEE
 13718                           fsr0h	equ	0xFEA
 13719                           fsr0l	equ	0xFE9
 13720                           wreg	equ	0xFE8
 13721                           indf1	equ	0xFE7
 13722                           postinc1	equ	0xFE6
 13723                           postdec1	equ	0xFE5
 13724                           plusw1	equ	0xFE3
 13725                           fsr1h	equ	0xFE2
 13726                           fsr1l	equ	0xFE1
 13727                           indf2	equ	0xFDF
 13728                           postinc2	equ	0xFDE
 13729                           postdec2	equ	0xFDD
 13730                           plusw2	equ	0xFDB
 13731                           fsr2h	equ	0xFDA
 13732                           fsr2l	equ	0xFD9
 13733                           status	equ	0xFD8
 13734                           
 13735 ;; *************** function ___lmul *****************
 13736 ;; Defined at:
 13737 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13738 ;; Parameters:    Size  Location     Type
 13739 ;;  multiplier      4    0[BANK0 ] unsigned long 
 13740 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 13741 ;; Auto vars:     Size  Location     Type
 13742 ;;  product         4    8[BANK0 ] unsigned long 
 13743 ;; Return value:  Size  Location     Type
 13744 ;;                  4    0[BANK0 ] unsigned long 
 13745 ;; Registers used:
 13746 ;;		wreg, status,2, status,0
 13747 ;; Tracked objects:
 13748 ;;		On entry : 0/0
 13749 ;;		On exit  : 0/0
 13750 ;;		Unchanged: 0/0
 13751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13752 ;;      Params:         0       8       0       0       0       0       0       0       0
 13753 ;;      Locals:         0       4       0       0       0       0       0       0       0
 13754 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13755 ;;      Totals:         0      12       0       0       0       0       0       0       0
 13756 ;;Total ram usage:       12 bytes
 13757 ;; Hardware stack levels used:    1
 13758 ;; Hardware stack levels required when called:    3
 13759 ;; This function calls:
 13760 ;;		Nothing
 13761 ;; This function is called by:
 13762 ;;		_clust2sect
 13763 ;;		_auto_mount
 13764 ;; This function uses a non-reentrant model
 13765 ;;
 13766                           
 13767                           	psect	text50
 13768  004660                     __ptext50:
 13769                           	opt stack 0
 13770  004660                     ___lmul:
 13771                           	opt stack 19
 13772                           
 13773                           ; BSR set to: 0
 13774                           ;incstack = 0
 13775  004660  0E00               	movlw	0
 13776  004662  0100               	movlb	0	; () banked
 13777  004664  6F68               	movwf	___lmul@product& (0+255),b
 13778  004666  0E00               	movlw	0
 13779  004668  6F69               	movwf	(___lmul@product+1)& (0+255),b
 13780  00466A  0E00               	movlw	0
 13781  00466C  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 13782  00466E  0E00               	movlw	0
 13783  004670  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 13784  004672                     
 13785                           ; BSR set to: 0
 13786                           
 13787                           ; BSR set to: 0
 13788  004672  A160               	btfss	___lmul@multiplier& (0+255),0,b
 13789  004674  D008               	goto	l1417
 13790                           
 13791                           ; BSR set to: 0
 13792  004676  5164               	movf	___lmul@multiplicand& (0+255),w,b
 13793  004678  2768               	addwf	___lmul@product& (0+255),f,b
 13794  00467A  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 13795  00467C  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 13796  00467E  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 13797  004680  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 13798  004682  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 13799  004684  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 13800  004686                     l1417:
 13801                           
 13802                           ; BSR set to: 0
 13803                           
 13804                           ; BSR set to: 0
 13805  004686  90D8               	bcf	status,0,c
 13806  004688  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 13807  00468A  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 13808  00468C  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 13809  00468E  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 13810                           
 13811                           ; BSR set to: 0
 13812  004690  90D8               	bcf	status,0,c
 13813  004692  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 13814  004694  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 13815  004696  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 13816  004698  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 13817  00469A  5160               	movf	___lmul@multiplier& (0+255),w,b
 13818  00469C  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 13819  00469E  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 13820  0046A0  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 13821  0046A2  A4D8               	btfss	status,2,c
 13822  0046A4  D7E6               	goto	l1416
 13823                           
 13824                           ; BSR set to: 0
 13825  0046A6  C068  F060         	movff	___lmul@product,?___lmul
 13826  0046AA  C069  F061         	movff	___lmul@product+1,?___lmul+1
 13827  0046AE  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 13828  0046B2  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 13829                           
 13830                           ; BSR set to: 0
 13831  0046B6  0012               	return		;funcret
 13832  0046B8                     __end_of___lmul:
 13833                           	opt stack 0
 13834                           tosu	equ	0xFFF
 13835                           tosh	equ	0xFFE
 13836                           tosl	equ	0xFFD
 13837                           pclath	equ	0xFFA
 13838                           tblptru	equ	0xFF8
 13839                           tblptrh	equ	0xFF7
 13840                           tblptrl	equ	0xFF6
 13841                           tablat	equ	0xFF5
 13842                           prodh	equ	0xFF4
 13843                           prodl	equ	0xFF3
 13844                           intcon	equ	0xFF2
 13845                           intcon2	equ	0xFF1
 13846                           intcon3	equ	0xFF0
 13847                           indf0	equ	0xFEF
 13848                           postinc0	equ	0xFEE
 13849                           fsr0h	equ	0xFEA
 13850                           fsr0l	equ	0xFE9
 13851                           wreg	equ	0xFE8
 13852                           indf1	equ	0xFE7
 13853                           postinc1	equ	0xFE6
 13854                           postdec1	equ	0xFE5
 13855                           plusw1	equ	0xFE3
 13856                           fsr1h	equ	0xFE2
 13857                           fsr1l	equ	0xFE1
 13858                           indf2	equ	0xFDF
 13859                           postinc2	equ	0xFDE
 13860                           postdec2	equ	0xFDD
 13861                           plusw2	equ	0xFDB
 13862                           fsr2h	equ	0xFDA
 13863                           fsr2l	equ	0xFD9
 13864                           status	equ	0xFD8
 13865                           
 13866 ;; *************** function _f_mount *****************
 13867 ;; Defined at:
 13868 ;;		line 793 in file "bibliotecas/tff.c"
 13869 ;; Parameters:    Size  Location     Type
 13870 ;;  drv             1    wreg     unsigned char 
 13871 ;;  fs              2    0[BANK0 ] PTR struct _FATFS
 13872 ;;		 -> fs(544), 
 13873 ;; Auto vars:     Size  Location     Type
 13874 ;;  drv             1   32[COMRAM] unsigned char 
 13875 ;; Return value:  Size  Location     Type
 13876 ;;                  1    wreg      enum E3974
 13877 ;; Registers used:
 13878 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13879 ;; Tracked objects:
 13880 ;;		On entry : 0/0
 13881 ;;		On exit  : 0/0
 13882 ;;		Unchanged: 0/0
 13883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13884 ;;      Params:         0       2       0       0       0       0       0       0       0
 13885 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13886 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13887 ;;      Totals:         1       2       0       0       0       0       0       0       0
 13888 ;;Total ram usage:        3 bytes
 13889 ;; Hardware stack levels used:    1
 13890 ;; Hardware stack levels required when called:    3
 13891 ;; This function calls:
 13892 ;;		Nothing
 13893 ;; This function is called by:
 13894 ;;		_escrita_sdcard
 13895 ;;		_sdcard_init
 13896 ;;		_leitura_sdcard
 13897 ;; This function uses a non-reentrant model
 13898 ;;
 13899                           
 13900                           	psect	text51
 13901  0047F6                     __ptext51:
 13902                           	opt stack 0
 13903  0047F6                     _f_mount:
 13904                           	opt stack 24
 13905                           
 13906                           ; BSR set to: 0
 13907                           ;incstack = 0
 13908                           ;f_mount@drv stored from wreg
 13909  0047F6  6E21               	movwf	f_mount@drv,c
 13910                           
 13911                           ;tff.c: 798: if (drv) return FR_INVALID_DRIVE;
 13912  0047F8  5021               	movf	f_mount@drv,w,c
 13913  0047FA  B4D8               	btfsc	status,2,c
 13914  0047FC  D002               	goto	l1159
 13915  0047FE  0E05               	movlw	5
 13916  004800  0012               	return	
 13917  004802                     l1159:
 13918                           
 13919                           ;tff.c: 800: if (FatFs) FatFs->fs_type = 0;
 13920  004802  0100               	movlb	0	; () banked
 13921  004804  51FD               	movf	_FatFs& (0+255),w,b
 13922  004806  11FE               	iorwf	(_FatFs+1)& (0+255),w,b
 13923  004808  B4D8               	btfsc	status,2,c
 13924  00480A  D008               	goto	l1161
 13925                           
 13926                           ; BSR set to: 0
 13927  00480C  EE20 F01C          	lfsr	2,28
 13928  004810  51FD               	movf	_FatFs& (0+255),w,b
 13929  004812  26D9               	addwf	fsr2l,f,c
 13930  004814  51FE               	movf	(_FatFs+1)& (0+255),w,b
 13931  004816  22DA               	addwfc	fsr2h,f,c
 13932  004818  0E00               	movlw	0
 13933  00481A  6EDF               	movwf	indf2,c
 13934  00481C                     l1161:
 13935                           
 13936                           ; BSR set to: 0
 13937                           ;tff.c: 802: FatFs = fs;
 13938                           
 13939                           ; BSR set to: 0
 13940  00481C  C060  F0FD         	movff	f_mount@fs,_FatFs
 13941  004820  C061  F0FE         	movff	f_mount@fs+1,_FatFs+1
 13942                           
 13943                           ; BSR set to: 0
 13944                           ;tff.c: 803: if (fs) fs->fs_type = 0;
 13945  004824  5160               	movf	f_mount@fs& (0+255),w,b
 13946  004826  1161               	iorwf	(f_mount@fs+1)& (0+255),w,b
 13947  004828  B4D8               	btfsc	status,2,c
 13948  00482A  D008               	goto	l1162
 13949                           
 13950                           ; BSR set to: 0
 13951  00482C  EE20 F01C          	lfsr	2,28
 13952  004830  5160               	movf	f_mount@fs& (0+255),w,b
 13953  004832  26D9               	addwf	fsr2l,f,c
 13954  004834  5161               	movf	(f_mount@fs+1)& (0+255),w,b
 13955  004836  22DA               	addwfc	fsr2h,f,c
 13956  004838  0E00               	movlw	0
 13957  00483A  6EDF               	movwf	indf2,c
 13958  00483C                     l1162:
 13959                           
 13960                           ; BSR set to: 0
 13961                           ;tff.c: 805: return FR_OK;
 13962                           
 13963                           ; BSR set to: 0
 13964  00483C  0E00               	movlw	0
 13965  00483E  0012               	return	
 13966  004840                     __end_of_f_mount:
 13967                           	opt stack 0
 13968                           tosu	equ	0xFFF
 13969                           tosh	equ	0xFFE
 13970                           tosl	equ	0xFFD
 13971                           pclath	equ	0xFFA
 13972                           tblptru	equ	0xFF8
 13973                           tblptrh	equ	0xFF7
 13974                           tblptrl	equ	0xFF6
 13975                           tablat	equ	0xFF5
 13976                           prodh	equ	0xFF4
 13977                           prodl	equ	0xFF3
 13978                           intcon	equ	0xFF2
 13979                           intcon2	equ	0xFF1
 13980                           intcon3	equ	0xFF0
 13981                           indf0	equ	0xFEF
 13982                           postinc0	equ	0xFEE
 13983                           fsr0h	equ	0xFEA
 13984                           fsr0l	equ	0xFE9
 13985                           wreg	equ	0xFE8
 13986                           indf1	equ	0xFE7
 13987                           postinc1	equ	0xFE6
 13988                           postdec1	equ	0xFE5
 13989                           plusw1	equ	0xFE3
 13990                           fsr1h	equ	0xFE2
 13991                           fsr1l	equ	0xFE1
 13992                           indf2	equ	0xFDF
 13993                           postinc2	equ	0xFDE
 13994                           postdec2	equ	0xFDD
 13995                           plusw2	equ	0xFDB
 13996                           fsr2h	equ	0xFDA
 13997                           fsr2l	equ	0xFD9
 13998                           status	equ	0xFD8
 13999                           
 14000 ;; *************** function _f_lseek *****************
 14001 ;; Defined at:
 14002 ;;		line 1132 in file "bibliotecas/tff.c"
 14003 ;; Parameters:    Size  Location     Type
 14004 ;;  fp              2  100[BANK0 ] PTR struct _FIL
 14005 ;;		 -> fil(28), 
 14006 ;;  ofs             4  102[BANK0 ] unsigned long 
 14007 ;; Auto vars:     Size  Location     Type
 14008 ;;  csize           4  123[BANK0 ] unsigned long 
 14009 ;;  ifptr           4  119[BANK0 ] unsigned long 
 14010 ;;  clust           2  127[BANK0 ] unsigned short 
 14011 ;;  res             1  118[BANK0 ] enum E155
 14012 ;; Return value:  Size  Location     Type
 14013 ;;                  1    wreg      enum E3974
 14014 ;; Registers used:
 14015 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14016 ;; Tracked objects:
 14017 ;;		On entry : 0/0
 14018 ;;		On exit  : 0/0
 14019 ;;		Unchanged: 0/0
 14020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14021 ;;      Params:         0       6       0       0       0       0       0       0       0
 14022 ;;      Locals:         0      11       0       0       0       0       0       0       0
 14023 ;;      Temps:          0      12       0       0       0       0       0       0       0
 14024 ;;      Totals:         0      29       0       0       0       0       0       0       0
 14025 ;;Total ram usage:       29 bytes
 14026 ;; Hardware stack levels used:    1
 14027 ;; Hardware stack levels required when called:   11
 14028 ;; This function calls:
 14029 ;;		___lldiv
 14030 ;;		_create_chain
 14031 ;;		_get_cluster
 14032 ;;		_validate
 14033 ;; This function is called by:
 14034 ;;		_escrita_sdcard
 14035 ;; This function uses a non-reentrant model
 14036 ;;
 14037                           
 14038                           	psect	text52
 14039  000AFE                     __ptext52:
 14040                           	opt stack 0
 14041  000AFE                     _f_lseek:
 14042                           	opt stack 16
 14043                           
 14044                           ;tff.c: 1137: FRESULT res;
 14045                           ;tff.c: 1138: CLUST clust;
 14046                           ;tff.c: 1139: DWORD csize, ifptr;
 14047                           ;tff.c: 1142: res = validate(fp->fs, fp->id);
 14048                           
 14049                           ;incstack = 0
 14050  000AFE  0100               	movlb	0	; () banked
 14051  000B00  EE20 F004          	lfsr	2,4
 14052  000B04  51C4               	movf	f_lseek@fp& (0+255),w,b
 14053  000B06  26D9               	addwf	fsr2l,f,c
 14054  000B08  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14055  000B0A  22DA               	addwfc	fsr2h,f,c
 14056  000B0C  CFDE F066          	movff	postinc2,validate@fs
 14057  000B10  CFDD F067          	movff	postdec2,validate@fs+1
 14058  000B14  C0C4  FFD9         	movff	f_lseek@fp,fsr2l
 14059  000B18  C0C5  FFDA         	movff	f_lseek@fp+1,fsr2h
 14060  000B1C  CFDE F068          	movff	postinc2,validate@id
 14061  000B20  CFDD F069          	movff	postdec2,validate@id+1
 14062  000B24  ECD5  F023         	call	_validate	;wreg free
 14063  000B28  0100               	movlb	0	; () banked
 14064  000B2A  6FD6               	movwf	f_lseek@res& (0+255),b
 14065                           
 14066                           ; BSR set to: 0
 14067                           ;tff.c: 1143: if (res != FR_OK) return res;
 14068  000B2C  51D6               	movf	f_lseek@res& (0+255),w,b
 14069  000B2E  A4D8               	btfss	status,2,c
 14070  000B30  0012               	return	
 14071                           
 14072                           ; BSR set to: 0
 14073                           ;tff.c: 1144: if (fp->flag & 0x80) return FR_RW_ERROR;
 14074                           
 14075                           ; BSR set to: 0
 14076                           
 14077                           ; BSR set to: 0
 14078                           ;	Return value of _f_lseek is never used
 14079  000B32  EE20 F002          	lfsr	2,2
 14080  000B36  51C4               	movf	f_lseek@fp& (0+255),w,b
 14081  000B38  26D9               	addwf	fsr2l,f,c
 14082  000B3A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14083  000B3C  22DA               	addwfc	fsr2h,f,c
 14084  000B3E  BEDF               	btfsc	indf2,7,c
 14085  000B40  0012               	return	
 14086                           
 14087                           ; BSR set to: 0
 14088                           ;tff.c: 1145: if (ofs > fp->fsize
 14089                           ;tff.c: 1147: && !(fp->flag & 0x02)
 14090                           ;tff.c: 1149: ) ofs = fp->fsize;
 14091                           
 14092                           ; BSR set to: 0
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;	Return value of _f_lseek is never used
 14096  000B42  EE20 F00A          	lfsr	2,10
 14097  000B46  51C4               	movf	f_lseek@fp& (0+255),w,b
 14098  000B48  26D9               	addwf	fsr2l,f,c
 14099  000B4A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14100  000B4C  22DA               	addwfc	fsr2h,f,c
 14101  000B4E  51C6               	movf	f_lseek@ofs& (0+255),w,b
 14102  000B50  5CDE               	subwf	postinc2,w,c
 14103  000B52  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14104  000B54  58DE               	subwfb	postinc2,w,c
 14105  000B56  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14106  000B58  58DE               	subwfb	postinc2,w,c
 14107  000B5A  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14108  000B5C  58DE               	subwfb	postinc2,w,c
 14109  000B5E  B0D8               	btfsc	status,0,c
 14110  000B60  D016               	goto	l1260
 14111                           
 14112                           ; BSR set to: 0
 14113  000B62  EE20 F002          	lfsr	2,2
 14114  000B66  51C4               	movf	f_lseek@fp& (0+255),w,b
 14115  000B68  26D9               	addwf	fsr2l,f,c
 14116  000B6A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14117  000B6C  22DA               	addwfc	fsr2h,f,c
 14118  000B6E  B2DF               	btfsc	indf2,1,c
 14119  000B70  D00E               	goto	l1260
 14120                           
 14121                           ; BSR set to: 0
 14122  000B72  EE20 F00A          	lfsr	2,10
 14123  000B76  51C4               	movf	f_lseek@fp& (0+255),w,b
 14124  000B78  26D9               	addwf	fsr2l,f,c
 14125  000B7A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14126  000B7C  22DA               	addwfc	fsr2h,f,c
 14127  000B7E  CFDE F0C6          	movff	postinc2,f_lseek@ofs
 14128  000B82  CFDE F0C7          	movff	postinc2,f_lseek@ofs+1
 14129  000B86  CFDE F0C8          	movff	postinc2,f_lseek@ofs+2
 14130  000B8A  CFDE F0C9          	movff	postinc2,f_lseek@ofs+3
 14131  000B8E                     l1260:
 14132                           
 14133                           ; BSR set to: 0
 14134                           ;tff.c: 1151: ifptr = fp->fptr;
 14135  000B8E  EE20 F006          	lfsr	2,6
 14136  000B92  51C4               	movf	f_lseek@fp& (0+255),w,b
 14137  000B94  26D9               	addwf	fsr2l,f,c
 14138  000B96  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14139  000B98  22DA               	addwfc	fsr2h,f,c
 14140  000B9A  CFDE F0D7          	movff	postinc2,f_lseek@ifptr
 14141  000B9E  CFDE F0D8          	movff	postinc2,f_lseek@ifptr+1
 14142  000BA2  CFDE F0D9          	movff	postinc2,f_lseek@ifptr+2
 14143  000BA6  CFDE F0DA          	movff	postinc2,f_lseek@ifptr+3
 14144                           
 14145                           ;tff.c: 1152: fp->fptr = 0; fp->csect = 255;
 14146  000BAA  EE20 F006          	lfsr	2,6
 14147  000BAE  51C4               	movf	f_lseek@fp& (0+255),w,b
 14148  000BB0  26D9               	addwf	fsr2l,f,c
 14149  000BB2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14150  000BB4  22DA               	addwfc	fsr2h,f,c
 14151  000BB6  6ADE               	clrf	postinc2,c
 14152  000BB8  6ADE               	clrf	postinc2,c
 14153  000BBA  6ADE               	clrf	postinc2,c
 14154  000BBC  6ADD               	clrf	postdec2,c
 14155  000BBE  EE20 F003          	lfsr	2,3
 14156  000BC2  51C4               	movf	f_lseek@fp& (0+255),w,b
 14157  000BC4  26D9               	addwf	fsr2l,f,c
 14158  000BC6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14159  000BC8  22DA               	addwfc	fsr2h,f,c
 14160  000BCA  0EFF               	movlw	255
 14161  000BCC  6EDF               	movwf	indf2,c
 14162                           
 14163                           ; BSR set to: 0
 14164                           ;tff.c: 1153: if (ofs > 0) {
 14165  000BCE  51C6               	movf	f_lseek@ofs& (0+255),w,b
 14166  000BD0  11C7               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 14167  000BD2  11C8               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 14168  000BD4  11C9               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 14169  000BD6  B4D8               	btfsc	status,2,c
 14170  000BD8  D19B               	goto	l1277
 14171                           
 14172                           ; BSR set to: 0
 14173                           ;tff.c: 1154: csize = (DWORD)fp->fs->csize * 512U;
 14174  000BDA  EE20 F004          	lfsr	2,4
 14175  000BDE  51C4               	movf	f_lseek@fp& (0+255),w,b
 14176  000BE0  26D9               	addwf	fsr2l,f,c
 14177  000BE2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14178  000BE4  22DA               	addwfc	fsr2h,f,c
 14179  000BE6  EE10 F01D          	lfsr	1,29
 14180  000BEA  50DE               	movf	postinc2,w,c
 14181  000BEC  26E1               	addwf	fsr1l,f,c
 14182  000BEE  50DD               	movf	postdec2,w,c
 14183  000BF0  22E2               	addwfc	fsr1h,f,c
 14184  000BF2  50E7               	movf	indf1,w,c
 14185  000BF4  6FCA               	movwf	??_f_lseek& (0+255),b
 14186  000BF6  C0CA  F0CB         	movff	??_f_lseek,??_f_lseek+1
 14187  000BFA  6BCC               	clrf	(??_f_lseek+2)& (0+255),b
 14188  000BFC  6BCD               	clrf	(??_f_lseek+3)& (0+255),b
 14189  000BFE  6BCE               	clrf	(??_f_lseek+4)& (0+255),b
 14190  000C00  0E09               	movlw	9
 14191  000C02                     u13425:
 14192  000C02  90D8               	bcf	status,0,c
 14193  000C04  37CB               	rlcf	(??_f_lseek+1)& (0+255),f,b
 14194  000C06  37CC               	rlcf	(??_f_lseek+2)& (0+255),f,b
 14195  000C08  37CD               	rlcf	(??_f_lseek+3)& (0+255),f,b
 14196  000C0A  37CE               	rlcf	(??_f_lseek+4)& (0+255),f,b
 14197  000C0C  2EE8               	decfsz	wreg,f,c
 14198  000C0E  D7F9               	goto	u13425
 14199  000C10  C0CB  F0DB         	movff	??_f_lseek+1,f_lseek@csize
 14200  000C14  C0CC  F0DC         	movff	??_f_lseek+2,f_lseek@csize+1
 14201  000C18  C0CD  F0DD         	movff	??_f_lseek+3,f_lseek@csize+2
 14202  000C1C  C0CE  F0DE         	movff	??_f_lseek+4,f_lseek@csize+3
 14203                           
 14204                           ; BSR set to: 0
 14205                           ;tff.c: 1155: if (ifptr > 0 &&
 14206                           ;tff.c: 1156: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 14207  000C20  51D7               	movf	f_lseek@ifptr& (0+255),w,b
 14208  000C22  11D8               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 14209  000C24  11D9               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 14210  000C26  11DA               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 14211  000C28  B4D8               	btfsc	status,2,c
 14212  000C2A  D08F               	goto	l1262
 14213                           
 14214                           ; BSR set to: 0
 14215  000C2C  0EFF               	movlw	255
 14216  000C2E  25C6               	addwf	f_lseek@ofs& (0+255),w,b
 14217  000C30  6F60               	movwf	___lldiv@dividend& (0+255),b
 14218  000C32  0EFF               	movlw	255
 14219  000C34  21C7               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 14220  000C36  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 14221  000C38  0EFF               	movlw	255
 14222  000C3A  21C8               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 14223  000C3C  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 14224  000C3E  0EFF               	movlw	255
 14225  000C40  21C9               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 14226  000C42  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 14227  000C44  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 14228  000C48  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14229  000C4C  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14230  000C50  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14231  000C54  EC4F  F021         	call	___lldiv	;wreg free
 14232  000C58  C060  F0CA         	movff	?___lldiv,??_f_lseek
 14233  000C5C  C061  F0CB         	movff	?___lldiv+1,??_f_lseek+1
 14234  000C60  C062  F0CC         	movff	?___lldiv+2,??_f_lseek+2
 14235  000C64  C063  F0CD         	movff	?___lldiv+3,??_f_lseek+3
 14236  000C68  0EFF               	movlw	255
 14237  000C6A  0100               	movlb	0	; () banked
 14238  000C6C  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 14239  000C6E  6F60               	movwf	___lldiv@dividend& (0+255),b
 14240  000C70  0EFF               	movlw	255
 14241  000C72  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14242  000C74  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 14243  000C76  0EFF               	movlw	255
 14244  000C78  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14245  000C7A  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 14246  000C7C  0EFF               	movlw	255
 14247  000C7E  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14248  000C80  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 14249  000C82  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 14250  000C86  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14251  000C8A  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14252  000C8E  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14253  000C92  EC4F  F021         	call	___lldiv	;wreg free
 14254  000C96  0100               	movlb	0	; () banked
 14255  000C98  5160               	movf	?___lldiv& (0+255),w,b
 14256  000C9A  5DCA               	subwf	??_f_lseek& (0+255),w,b
 14257  000C9C  5161               	movf	(?___lldiv+1)& (0+255),w,b
 14258  000C9E  59CB               	subwfb	(??_f_lseek+1)& (0+255),w,b
 14259  000CA0  5162               	movf	(?___lldiv+2)& (0+255),w,b
 14260  000CA2  59CC               	subwfb	(??_f_lseek+2)& (0+255),w,b
 14261  000CA4  5163               	movf	(?___lldiv+3)& (0+255),w,b
 14262  000CA6  59CD               	subwfb	(??_f_lseek+3)& (0+255),w,b
 14263  000CA8  A0D8               	btfss	status,0,c
 14264  000CAA  D04F               	goto	l1262
 14265                           
 14266                           ; BSR set to: 0
 14267                           ;tff.c: 1157: fp->fptr = (ifptr - 1) & ~(csize - 1);
 14268  000CAC  0EFF               	movlw	255
 14269  000CAE  25DB               	addwf	f_lseek@csize& (0+255),w,b
 14270  000CB0  6FCA               	movwf	??_f_lseek& (0+255),b
 14271  000CB2  0EFF               	movlw	255
 14272  000CB4  21DC               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 14273  000CB6  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 14274  000CB8  0EFF               	movlw	255
 14275  000CBA  21DD               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 14276  000CBC  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 14277  000CBE  0EFF               	movlw	255
 14278  000CC0  21DE               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 14279  000CC2  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 14280  000CC4  1FCA               	comf	??_f_lseek& (0+255),f,b
 14281  000CC6  1FCB               	comf	(??_f_lseek+1)& (0+255),f,b
 14282  000CC8  1FCC               	comf	(??_f_lseek+2)& (0+255),f,b
 14283  000CCA  1FCD               	comf	(??_f_lseek+3)& (0+255),f,b
 14284  000CCC  0EFF               	movlw	255
 14285  000CCE  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 14286  000CD0  6FCE               	movwf	(??_f_lseek+4)& (0+255),b
 14287  000CD2  0EFF               	movlw	255
 14288  000CD4  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14289  000CD6  6FCF               	movwf	(??_f_lseek+5)& (0+255),b
 14290  000CD8  0EFF               	movlw	255
 14291  000CDA  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14292  000CDC  6FD0               	movwf	(??_f_lseek+6)& (0+255),b
 14293  000CDE  0EFF               	movlw	255
 14294  000CE0  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14295  000CE2  6FD1               	movwf	(??_f_lseek+7)& (0+255),b
 14296  000CE4  51CA               	movf	??_f_lseek& (0+255),w,b
 14297  000CE6  15CE               	andwf	(??_f_lseek+4)& (0+255),w,b
 14298  000CE8  6FD2               	movwf	(??_f_lseek+8)& (0+255),b
 14299  000CEA  51CB               	movf	(??_f_lseek+1)& (0+255),w,b
 14300  000CEC  15CF               	andwf	(??_f_lseek+5)& (0+255),w,b
 14301  000CEE  6FD3               	movwf	(??_f_lseek+9)& (0+255),b
 14302  000CF0  51CC               	movf	(??_f_lseek+2)& (0+255),w,b
 14303  000CF2  15D0               	andwf	(??_f_lseek+6)& (0+255),w,b
 14304  000CF4  6FD4               	movwf	(??_f_lseek+10)& (0+255),b
 14305  000CF6  51CD               	movf	(??_f_lseek+3)& (0+255),w,b
 14306  000CF8  15D1               	andwf	(??_f_lseek+7)& (0+255),w,b
 14307  000CFA  6FD5               	movwf	(??_f_lseek+11)& (0+255),b
 14308  000CFC  EE20 F006          	lfsr	2,6
 14309  000D00  51C4               	movf	f_lseek@fp& (0+255),w,b
 14310  000D02  26D9               	addwf	fsr2l,f,c
 14311  000D04  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14312  000D06  22DA               	addwfc	fsr2h,f,c
 14313  000D08  C0D2  FFDE         	movff	??_f_lseek+8,postinc2
 14314  000D0C  C0D3  FFDE         	movff	??_f_lseek+9,postinc2
 14315  000D10  C0D4  FFDE         	movff	??_f_lseek+10,postinc2
 14316  000D14  C0D5  FFDE         	movff	??_f_lseek+11,postinc2
 14317                           
 14318                           ;tff.c: 1158: ofs -= fp->fptr;
 14319  000D18  EE20 F006          	lfsr	2,6
 14320  000D1C  51C4               	movf	f_lseek@fp& (0+255),w,b
 14321  000D1E  26D9               	addwf	fsr2l,f,c
 14322  000D20  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14323  000D22  22DA               	addwfc	fsr2h,f,c
 14324  000D24  50DE               	movf	postinc2,w,c
 14325  000D26  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 14326  000D28  50DE               	movf	postinc2,w,c
 14327  000D2A  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 14328  000D2C  50DE               	movf	postinc2,w,c
 14329  000D2E  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 14330  000D30  50DD               	movf	postdec2,w,c
 14331  000D32  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 14332                           
 14333                           ;tff.c: 1159: clust = fp->curr_clust;
 14334  000D34  EE20 F010          	lfsr	2,16
 14335  000D38  51C4               	movf	f_lseek@fp& (0+255),w,b
 14336  000D3A  26D9               	addwf	fsr2l,f,c
 14337  000D3C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14338  000D3E  22DA               	addwfc	fsr2h,f,c
 14339  000D40  CFDE F0DF          	movff	postinc2,f_lseek@clust
 14340  000D44  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 14341                           
 14342                           ;tff.c: 1160: } else {
 14343  000D48  D031               	goto	l1263
 14344  000D4A                     l1262:
 14345                           
 14346                           ; BSR set to: 0
 14347                           ;tff.c: 1161: clust = fp->org_clust;
 14348                           
 14349                           ; BSR set to: 0
 14350  000D4A  EE20 F00E          	lfsr	2,14
 14351  000D4E  51C4               	movf	f_lseek@fp& (0+255),w,b
 14352  000D50  26D9               	addwf	fsr2l,f,c
 14353  000D52  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14354  000D54  22DA               	addwfc	fsr2h,f,c
 14355  000D56  CFDE F0DF          	movff	postinc2,f_lseek@clust
 14356  000D5A  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 14357                           
 14358                           ; BSR set to: 0
 14359                           ;tff.c: 1163: if (clust == 0) {
 14360  000D5E  51DF               	movf	f_lseek@clust& (0+255),w,b
 14361  000D60  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14362  000D62  A4D8               	btfss	status,2,c
 14363  000D64  D019               	goto	l1264
 14364                           
 14365                           ; BSR set to: 0
 14366                           ;tff.c: 1164: clust = create_chain(0);
 14367  000D66  0E00               	movlw	0
 14368  000D68  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
 14369  000D6A  0E00               	movlw	0
 14370  000D6C  6FB6               	movwf	create_chain@clust& (0+255),b
 14371  000D6E  ECCD  F015         	call	_create_chain	;wreg free
 14372  000D72  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 14373  000D76  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 14374                           
 14375                           ;tff.c: 1165: if (clust == 1) goto fk_error;
 14376  000D7A  0100               	movlb	0	; () banked
 14377  000D7C  05DF               	decf	f_lseek@clust& (0+255),w,b
 14378  000D7E  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14379  000D80  B4D8               	btfsc	status,2,c
 14380  000D82  D0F9               	goto	l1266
 14381                           
 14382                           ; BSR set to: 0
 14383                           ;tff.c: 1166: fp->org_clust = clust;
 14384                           
 14385                           ; BSR set to: 0
 14386                           
 14387                           ; BSR set to: 0
 14388  000D84  EE20 F00E          	lfsr	2,14
 14389  000D88  51C4               	movf	f_lseek@fp& (0+255),w,b
 14390  000D8A  26D9               	addwf	fsr2l,f,c
 14391  000D8C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14392  000D8E  22DA               	addwfc	fsr2h,f,c
 14393  000D90  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 14394  000D94  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 14395  000D98                     l1264:
 14396                           
 14397                           ; BSR set to: 0
 14398                           ;tff.c: 1167: }
 14399                           ;tff.c: 1169: fp->curr_clust = clust;
 14400  000D98  EE20 F010          	lfsr	2,16
 14401  000D9C  51C4               	movf	f_lseek@fp& (0+255),w,b
 14402  000D9E  26D9               	addwf	fsr2l,f,c
 14403  000DA0  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14404  000DA2  22DA               	addwfc	fsr2h,f,c
 14405  000DA4  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 14406  000DA8  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 14407  000DAC                     l1263:
 14408                           
 14409                           ; BSR set to: 0
 14410                           ;tff.c: 1170: }
 14411                           ;tff.c: 1171: if (clust != 0) {
 14412                           
 14413                           ; BSR set to: 0
 14414  000DAC  51DF               	movf	f_lseek@clust& (0+255),w,b
 14415  000DAE  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14416  000DB0  A4D8               	btfss	status,2,c
 14417  000DB2  D064               	goto	l1268
 14418  000DB4  D0AD               	goto	l1277
 14419  000DB6                     
 14420                           ; BSR set to: 0
 14421                           ;tff.c: 1174: if (fp->flag & 0x02) {
 14422                           
 14423                           ; BSR set to: 0
 14424  000DB6  EE20 F002          	lfsr	2,2
 14425  000DBA  51C4               	movf	f_lseek@fp& (0+255),w,b
 14426  000DBC  26D9               	addwf	fsr2l,f,c
 14427  000DBE  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14428  000DC0  22DA               	addwfc	fsr2h,f,c
 14429  000DC2  A2DF               	btfss	indf2,1,c
 14430  000DC4  D018               	goto	l1270
 14431                           
 14432                           ; BSR set to: 0
 14433                           ;tff.c: 1175: clust = create_chain(clust);
 14434  000DC6  C0DF  F0B6         	movff	f_lseek@clust,create_chain@clust
 14435  000DCA  C0E0  F0B7         	movff	f_lseek@clust+1,create_chain@clust+1
 14436  000DCE  ECCD  F015         	call	_create_chain	;wreg free
 14437  000DD2  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 14438  000DD6  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 14439                           
 14440                           ;tff.c: 1176: if (clust == 0) {
 14441  000DDA  0100               	movlb	0	; () banked
 14442  000DDC  51DF               	movf	f_lseek@clust& (0+255),w,b
 14443  000DDE  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14444  000DE0  A4D8               	btfss	status,2,c
 14445  000DE2  D013               	goto	l1273
 14446                           
 14447                           ; BSR set to: 0
 14448                           ;tff.c: 1177: ofs = csize; break;
 14449  000DE4  C0DB  F0C6         	movff	f_lseek@csize,f_lseek@ofs
 14450  000DE8  C0DC  F0C7         	movff	f_lseek@csize+1,f_lseek@ofs+1
 14451  000DEC  C0DD  F0C8         	movff	f_lseek@csize+2,f_lseek@ofs+2
 14452  000DF0  C0DE  F0C9         	movff	f_lseek@csize+3,f_lseek@ofs+3
 14453  000DF4  D04D               	goto	u13520
 14454  000DF6                     l1270:
 14455                           
 14456                           ; BSR set to: 0
 14457                           ;tff.c: 1181: clust = get_cluster(clust);
 14458                           
 14459                           ; BSR set to: 0
 14460  000DF6  C0DF  F0A0         	movff	f_lseek@clust,get_cluster@clust
 14461  000DFA  C0E0  F0A1         	movff	f_lseek@clust+1,get_cluster@clust+1
 14462  000DFE  ECD7  F013         	call	_get_cluster	;wreg free
 14463  000E02  C0A0  F0DF         	movff	?_get_cluster,f_lseek@clust
 14464  000E06  C0A1  F0E0         	movff	?_get_cluster+1,f_lseek@clust+1
 14465  000E0A                     l1273:
 14466                           
 14467                           ;tff.c: 1182: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 14468  000E0A  0100               	movlb	0	; () banked
 14469  000E0C  51E0               	movf	(f_lseek@clust+1)& (0+255),w,b
 14470  000E0E  E104               	bnz	u13500
 14471  000E10  0E02               	movlw	2
 14472  000E12  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 14473  000E14  A0D8               	btfss	status,0,c
 14474  000E16  D0AF               	goto	l1266
 14475  000E18                     u13500:
 14476                           
 14477                           ; BSR set to: 0
 14478  000E18  EE20 F004          	lfsr	2,4
 14479  000E1C  51C4               	movf	f_lseek@fp& (0+255),w,b
 14480  000E1E  26D9               	addwf	fsr2l,f,c
 14481  000E20  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14482  000E22  22DA               	addwfc	fsr2h,f,c
 14483  000E24  EE10 F016          	lfsr	1,22
 14484  000E28  50DE               	movf	postinc2,w,c
 14485  000E2A  26E1               	addwf	fsr1l,f,c
 14486  000E2C  50DD               	movf	postdec2,w,c
 14487  000E2E  22E2               	addwfc	fsr1h,f,c
 14488  000E30  50E6               	movf	postinc1,w,c
 14489  000E32  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 14490  000E34  50E6               	movf	postinc1,w,c
 14491  000E36  59E0               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 14492  000E38  B0D8               	btfsc	status,0,c
 14493  000E3A  D09D               	goto	l1266
 14494                           
 14495                           ; BSR set to: 0
 14496                           ;tff.c: 1183: fp->curr_clust = clust;
 14497                           
 14498                           ; BSR set to: 0
 14499                           
 14500                           ; BSR set to: 0
 14501  000E3C  EE20 F010          	lfsr	2,16
 14502  000E40  51C4               	movf	f_lseek@fp& (0+255),w,b
 14503  000E42  26D9               	addwf	fsr2l,f,c
 14504  000E44  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14505  000E46  22DA               	addwfc	fsr2h,f,c
 14506  000E48  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 14507  000E4C  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 14508                           
 14509                           ;tff.c: 1184: fp->fptr += csize;
 14510  000E50  EE20 F006          	lfsr	2,6
 14511  000E54  51C4               	movf	f_lseek@fp& (0+255),w,b
 14512  000E56  26D9               	addwf	fsr2l,f,c
 14513  000E58  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14514  000E5A  22DA               	addwfc	fsr2h,f,c
 14515  000E5C  51DB               	movf	f_lseek@csize& (0+255),w,b
 14516  000E5E  26DE               	addwf	postinc2,f,c
 14517  000E60  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 14518  000E62  22DE               	addwfc	postinc2,f,c
 14519  000E64  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 14520  000E66  22DE               	addwfc	postinc2,f,c
 14521  000E68  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 14522  000E6A  22DE               	addwfc	postinc2,f,c
 14523                           
 14524                           ; BSR set to: 0
 14525                           ;tff.c: 1185: ofs -= csize;
 14526  000E6C  51DB               	movf	f_lseek@csize& (0+255),w,b
 14527  000E6E  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 14528  000E70  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 14529  000E72  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 14530  000E74  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 14531  000E76  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 14532  000E78  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 14533  000E7A  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 14534  000E7C                     l1268:
 14535                           
 14536                           ; BSR set to: 0
 14537                           
 14538                           ; BSR set to: 0
 14539  000E7C  51C6               	movf	f_lseek@ofs& (0+255),w,b
 14540  000E7E  5DDB               	subwf	f_lseek@csize& (0+255),w,b
 14541  000E80  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14542  000E82  59DC               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 14543  000E84  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14544  000E86  59DD               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 14545  000E88  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14546  000E8A  59DE               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 14547  000E8C  A0D8               	btfss	status,0,c
 14548  000E8E  D793               	goto	l1269
 14549  000E90                     u13520:
 14550                           
 14551                           ; BSR set to: 0
 14552                           ;tff.c: 1186: }
 14553                           ;tff.c: 1187: fp->fptr += ofs;
 14554                           
 14555                           ; BSR set to: 0
 14556  000E90  EE20 F006          	lfsr	2,6
 14557  000E94  51C4               	movf	f_lseek@fp& (0+255),w,b
 14558  000E96  26D9               	addwf	fsr2l,f,c
 14559  000E98  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14560  000E9A  22DA               	addwfc	fsr2h,f,c
 14561  000E9C  51C6               	movf	f_lseek@ofs& (0+255),w,b
 14562  000E9E  26DE               	addwf	postinc2,f,c
 14563  000EA0  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14564  000EA2  22DE               	addwfc	postinc2,f,c
 14565  000EA4  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14566  000EA6  22DE               	addwfc	postinc2,f,c
 14567  000EA8  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14568  000EAA  22DE               	addwfc	postinc2,f,c
 14569                           
 14570                           ;tff.c: 1188: fp->csect = (BYTE)(ofs / 512U);
 14571  000EAC  EE20 F003          	lfsr	2,3
 14572  000EB0  51C4               	movf	f_lseek@fp& (0+255),w,b
 14573  000EB2  26D9               	addwf	fsr2l,f,c
 14574  000EB4  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14575  000EB6  22DA               	addwfc	fsr2h,f,c
 14576  000EB8  C0C6  F0CA         	movff	f_lseek@ofs,??_f_lseek
 14577  000EBC  C0C7  F0CB         	movff	f_lseek@ofs+1,??_f_lseek+1
 14578  000EC0  C0C8  F0CC         	movff	f_lseek@ofs+2,??_f_lseek+2
 14579  000EC4  C0C9  F0CD         	movff	f_lseek@ofs+3,??_f_lseek+3
 14580  000EC8  0E0A               	movlw	10
 14581  000ECA  D005               	goto	u13530
 14582  000ECC                     u13535:
 14583  000ECC  90D8               	bcf	status,0,c
 14584  000ECE  33CD               	rrcf	(??_f_lseek+3)& (0+255),f,b
 14585  000ED0  33CC               	rrcf	(??_f_lseek+2)& (0+255),f,b
 14586  000ED2  33CB               	rrcf	(??_f_lseek+1)& (0+255),f,b
 14587  000ED4  33CA               	rrcf	??_f_lseek& (0+255),f,b
 14588  000ED6                     u13530:
 14589  000ED6  2EE8               	decfsz	wreg,f,c
 14590  000ED8  D7F9               	goto	u13535
 14591  000EDA  51CA               	movf	??_f_lseek& (0+255),w,b
 14592  000EDC  6EDF               	movwf	indf2,c
 14593                           
 14594                           ; BSR set to: 0
 14595                           ;tff.c: 1189: if (ofs % 512U) fp->csect++;
 14596  000EDE  0EFF               	movlw	255
 14597  000EE0  15C6               	andwf	f_lseek@ofs& (0+255),w,b
 14598  000EE2  6FCA               	movwf	??_f_lseek& (0+255),b
 14599  000EE4  0E01               	movlw	1
 14600  000EE6  15C7               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 14601  000EE8  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 14602  000EEA  0E00               	movlw	0
 14603  000EEC  15C8               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 14604  000EEE  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 14605  000EF0  0E00               	movlw	0
 14606  000EF2  15C9               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 14607  000EF4  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 14608  000EF6  51CA               	movf	??_f_lseek& (0+255),w,b
 14609  000EF8  11CB               	iorwf	(??_f_lseek+1)& (0+255),w,b
 14610  000EFA  11CC               	iorwf	(??_f_lseek+2)& (0+255),w,b
 14611  000EFC  11CD               	iorwf	(??_f_lseek+3)& (0+255),w,b
 14612  000EFE  B4D8               	btfsc	status,2,c
 14613  000F00  D007               	goto	l1277
 14614                           
 14615                           ; BSR set to: 0
 14616  000F02  EE20 F003          	lfsr	2,3
 14617  000F06  51C4               	movf	f_lseek@fp& (0+255),w,b
 14618  000F08  26D9               	addwf	fsr2l,f,c
 14619  000F0A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14620  000F0C  22DA               	addwfc	fsr2h,f,c
 14621  000F0E  2ADF               	incf	indf2,f,c
 14622  000F10                     l1277:
 14623                           
 14624                           ; BSR set to: 0
 14625                           ;tff.c: 1190: }
 14626                           ;tff.c: 1191: }
 14627                           ;tff.c: 1194: if (fp->fptr > fp->fsize) {
 14628                           
 14629                           ; BSR set to: 0
 14630                           
 14631                           ; BSR set to: 0
 14632                           
 14633                           ; BSR set to: 0
 14634  000F10  EE20 F006          	lfsr	2,6
 14635  000F14  51C4               	movf	f_lseek@fp& (0+255),w,b
 14636  000F16  26D9               	addwf	fsr2l,f,c
 14637  000F18  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14638  000F1A  22DA               	addwfc	fsr2h,f,c
 14639  000F1C  EE10 F00A          	lfsr	1,10
 14640  000F20  51C4               	movf	f_lseek@fp& (0+255),w,b
 14641  000F22  26E1               	addwf	fsr1l,f,c
 14642  000F24  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14643  000F26  22E2               	addwfc	fsr1h,f,c
 14644  000F28  50DE               	movf	postinc2,w,c
 14645  000F2A  5CE6               	subwf	postinc1,w,c
 14646  000F2C  50DE               	movf	postinc2,w,c
 14647  000F2E  58E6               	subwfb	postinc1,w,c
 14648  000F30  50DE               	movf	postinc2,w,c
 14649  000F32  58E6               	subwfb	postinc1,w,c
 14650  000F34  50DE               	movf	postinc2,w,c
 14651  000F36  58E6               	subwfb	postinc1,w,c
 14652  000F38  B0D8               	btfsc	status,0,c
 14653  000F3A  0012               	return	
 14654                           
 14655                           ; BSR set to: 0
 14656                           ;tff.c: 1195: fp->fsize = fp->fptr;
 14657  000F3C  EE20 F006          	lfsr	2,6
 14658  000F40  51C4               	movf	f_lseek@fp& (0+255),w,b
 14659  000F42  26D9               	addwf	fsr2l,f,c
 14660  000F44  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14661  000F46  22DA               	addwfc	fsr2h,f,c
 14662  000F48  EE10 F00A          	lfsr	1,10
 14663  000F4C  51C4               	movf	f_lseek@fp& (0+255),w,b
 14664  000F4E  26E1               	addwf	fsr1l,f,c
 14665  000F50  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14666  000F52  22E2               	addwfc	fsr1h,f,c
 14667  000F54  CFDE FFE6          	movff	postinc2,postinc1
 14668  000F58  CFDE FFE6          	movff	postinc2,postinc1
 14669  000F5C  CFDE FFE6          	movff	postinc2,postinc1
 14670  000F60  CFDE FFE6          	movff	postinc2,postinc1
 14671                           
 14672                           ; BSR set to: 0
 14673                           ;tff.c: 1196: fp->flag |= 0x20;
 14674  000F64  EE20 F002          	lfsr	2,2
 14675  000F68  51C4               	movf	f_lseek@fp& (0+255),w,b
 14676  000F6A  26D9               	addwf	fsr2l,f,c
 14677  000F6C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14678  000F6E  22DA               	addwfc	fsr2h,f,c
 14679  000F70  0E00               	movlw	0
 14680  000F72  8ADB               	bsf	plusw2,5,c
 14681                           
 14682                           ; BSR set to: 0
 14683                           ;tff.c: 1197: }
 14684                           ;tff.c: 1200: return FR_OK;
 14685                           ;	Return value of _f_lseek is never used
 14686                           
 14687                           ; BSR set to: 0
 14688  000F74  0012               	return	
 14689  000F76                     l1266:
 14690                           
 14691                           ; BSR set to: 0
 14692                           ;tff.c: 1203: fp->flag |= 0x80;
 14693                           
 14694                           ; BSR set to: 0
 14695  000F76  EE20 F002          	lfsr	2,2
 14696  000F7A  51C4               	movf	f_lseek@fp& (0+255),w,b
 14697  000F7C  26D9               	addwf	fsr2l,f,c
 14698  000F7E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 14699  000F80  22DA               	addwfc	fsr2h,f,c
 14700  000F82  0E00               	movlw	0
 14701  000F84  8EDB               	bsf	plusw2,7,c
 14702  000F86  0012               	return	
 14703  000F88                     __end_of_f_lseek:
 14704                           	opt stack 0
 14705                           tosu	equ	0xFFF
 14706                           tosh	equ	0xFFE
 14707                           tosl	equ	0xFFD
 14708                           pclath	equ	0xFFA
 14709                           tblptru	equ	0xFF8
 14710                           tblptrh	equ	0xFF7
 14711                           tblptrl	equ	0xFF6
 14712                           tablat	equ	0xFF5
 14713                           prodh	equ	0xFF4
 14714                           prodl	equ	0xFF3
 14715                           intcon	equ	0xFF2
 14716                           intcon2	equ	0xFF1
 14717                           intcon3	equ	0xFF0
 14718                           indf0	equ	0xFEF
 14719                           postinc0	equ	0xFEE
 14720                           fsr0h	equ	0xFEA
 14721                           fsr0l	equ	0xFE9
 14722                           wreg	equ	0xFE8
 14723                           indf1	equ	0xFE7
 14724                           postinc1	equ	0xFE6
 14725                           postdec1	equ	0xFE5
 14726                           plusw1	equ	0xFE3
 14727                           fsr1h	equ	0xFE2
 14728                           fsr1l	equ	0xFE1
 14729                           indf2	equ	0xFDF
 14730                           postinc2	equ	0xFDE
 14731                           postdec2	equ	0xFDD
 14732                           plusw2	equ	0xFDB
 14733                           fsr2h	equ	0xFDA
 14734                           fsr2l	equ	0xFD9
 14735                           status	equ	0xFD8
 14736                           
 14737 ;; *************** function _create_chain *****************
 14738 ;; Defined at:
 14739 ;;		line 282 in file "bibliotecas/tff.c"
 14740 ;; Parameters:    Size  Location     Type
 14741 ;;  clust           2   86[BANK0 ] unsigned short 
 14742 ;; Auto vars:     Size  Location     Type
 14743 ;;  ncl             2   98[BANK0 ] unsigned short 
 14744 ;;  scl             2   96[BANK0 ] unsigned short 
 14745 ;;  cstat           2   94[BANK0 ] unsigned short 
 14746 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 14747 ;;		 -> NULL(0), fs(544), 
 14748 ;;  mcl             2   90[BANK0 ] unsigned short 
 14749 ;; Return value:  Size  Location     Type
 14750 ;;                  2   86[BANK0 ] unsigned short 
 14751 ;; Registers used:
 14752 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14753 ;; Tracked objects:
 14754 ;;		On entry : 0/0
 14755 ;;		On exit  : 0/0
 14756 ;;		Unchanged: 0/0
 14757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14758 ;;      Params:         0       2       0       0       0       0       0       0       0
 14759 ;;      Locals:         0      10       0       0       0       0       0       0       0
 14760 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14761 ;;      Totals:         0      14       0       0       0       0       0       0       0
 14762 ;;Total ram usage:       14 bytes
 14763 ;; Hardware stack levels used:    1
 14764 ;; Hardware stack levels required when called:   10
 14765 ;; This function calls:
 14766 ;;		_get_cluster
 14767 ;;		_put_cluster
 14768 ;; This function is called by:
 14769 ;;		_reserve_direntry
 14770 ;;		_f_write
 14771 ;;		_f_lseek
 14772 ;; This function uses a non-reentrant model
 14773 ;;
 14774                           
 14775                           	psect	text53
 14776  002B9A                     __ptext53:
 14777                           	opt stack 0
 14778  002B9A                     _create_chain:
 14779                           	opt stack 13
 14780                           
 14781                           ;tff.c: 286: CLUST cstat, ncl, scl, mcl;
 14782                           ;tff.c: 287: FATFS *fs = FatFs;
 14783                           
 14784                           ; BSR set to: 0
 14785                           ;incstack = 0
 14786  002B9A  C0FD  F0BC         	movff	_FatFs,create_chain@fs
 14787  002B9E  C0FE  F0BD         	movff	_FatFs+1,create_chain@fs+1
 14788                           
 14789                           ;tff.c: 290: mcl = fs->max_clust;
 14790  002BA2  0100               	movlb	0	; () banked
 14791  002BA4  EE20 F016          	lfsr	2,22
 14792  002BA8  51BC               	movf	create_chain@fs& (0+255),w,b
 14793  002BAA  26D9               	addwf	fsr2l,f,c
 14794  002BAC  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 14795  002BAE  22DA               	addwfc	fsr2h,f,c
 14796  002BB0  CFDE F0BA          	movff	postinc2,create_chain@mcl
 14797  002BB4  CFDD F0BB          	movff	postdec2,create_chain@mcl+1
 14798                           
 14799                           ; BSR set to: 0
 14800                           ;tff.c: 291: if (clust == 0) {
 14801  002BB8  51B6               	movf	create_chain@clust& (0+255),w,b
 14802  002BBA  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 14803  002BBC  A4D8               	btfss	status,2,c
 14804  002BBE  D01B               	goto	l981
 14805                           
 14806                           ; BSR set to: 0
 14807                           ;tff.c: 292: scl = fs->last_clust;
 14808  002BC0  EE20 F018          	lfsr	2,24
 14809  002BC4  51BC               	movf	create_chain@fs& (0+255),w,b
 14810  002BC6  26D9               	addwf	fsr2l,f,c
 14811  002BC8  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 14812  002BCA  22DA               	addwfc	fsr2h,f,c
 14813  002BCC  CFDE F0C0          	movff	postinc2,create_chain@scl
 14814  002BD0  CFDD F0C1          	movff	postdec2,create_chain@scl+1
 14815                           
 14816                           ; BSR set to: 0
 14817                           ;tff.c: 293: if (scl < 2 || scl >= mcl) scl = 1;
 14818  002BD4  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 14819  002BD6  E104               	bnz	u11210
 14820  002BD8  0E02               	movlw	2
 14821  002BDA  5DC0               	subwf	create_chain@scl& (0+255),w,b
 14822  002BDC  A0D8               	btfss	status,0,c
 14823  002BDE  D006               	goto	u11220
 14824  002BE0                     u11210:
 14825                           
 14826                           ; BSR set to: 0
 14827  002BE0  51BA               	movf	create_chain@mcl& (0+255),w,b
 14828  002BE2  5DC0               	subwf	create_chain@scl& (0+255),w,b
 14829  002BE4  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 14830  002BE6  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 14831  002BE8  A0D8               	btfss	status,0,c
 14832  002BEA  D02A               	goto	l985
 14833  002BEC                     u11220:
 14834                           
 14835                           ; BSR set to: 0
 14836                           
 14837                           ; BSR set to: 0
 14838  002BEC  0E00               	movlw	0
 14839  002BEE  6FC1               	movwf	(create_chain@scl+1)& (0+255),b
 14840  002BF0  0E01               	movlw	1
 14841  002BF2  6FC0               	movwf	create_chain@scl& (0+255),b
 14842                           
 14843                           ; BSR set to: 0
 14844                           ;tff.c: 294: }
 14845  002BF4  D025               	goto	l985
 14846  002BF6                     l981:
 14847                           
 14848                           ; BSR set to: 0
 14849                           ;tff.c: 295: else {
 14850                           ;tff.c: 296: cstat = get_cluster(clust);
 14851                           
 14852                           ; BSR set to: 0
 14853  002BF6  C0B6  F0A0         	movff	create_chain@clust,get_cluster@clust
 14854  002BFA  C0B7  F0A1         	movff	create_chain@clust+1,get_cluster@clust+1
 14855  002BFE  ECD7  F013         	call	_get_cluster	;wreg free
 14856  002C02  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 14857  002C06  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 14858                           
 14859                           ;tff.c: 297: if (cstat < 2) return 1;
 14860  002C0A  0100               	movlb	0	; () banked
 14861  002C0C  51BF               	movf	(create_chain@cstat+1)& (0+255),w,b
 14862  002C0E  E109               	bnz	l9337
 14863  002C10  0E02               	movlw	2
 14864  002C12  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 14865  002C14  B0D8               	btfsc	status,0,c
 14866  002C16  D005               	goto	l986
 14867                           
 14868                           ; BSR set to: 0
 14869  002C18  0E00               	movlw	0
 14870  002C1A  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 14871  002C1C  0E01               	movlw	1
 14872  002C1E  6FB6               	movwf	?_create_chain& (0+255),b
 14873                           
 14874                           ; BSR set to: 0
 14875  002C20  0012               	return	
 14876  002C22                     l986:
 14877  002C22                     l9337:
 14878                           
 14879                           ; BSR set to: 0
 14880                           ;tff.c: 298: if (cstat < mcl) return cstat;
 14881  002C22  51BA               	movf	create_chain@mcl& (0+255),w,b
 14882  002C24  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 14883  002C26  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 14884  002C28  59BF               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 14885  002C2A  B0D8               	btfsc	status,0,c
 14886  002C2C  D005               	goto	l988
 14887                           
 14888                           ; BSR set to: 0
 14889  002C2E  C0BE  F0B6         	movff	create_chain@cstat,?_create_chain
 14890  002C32  C0BF  F0B7         	movff	create_chain@cstat+1,?_create_chain+1
 14891  002C36  0012               	return	
 14892  002C38                     l988:
 14893                           
 14894                           ; BSR set to: 0
 14895                           ;tff.c: 299: scl = clust;
 14896  002C38  C0B6  F0C0         	movff	create_chain@clust,create_chain@scl
 14897  002C3C  C0B7  F0C1         	movff	create_chain@clust+1,create_chain@scl+1
 14898  002C40                     l985:
 14899                           
 14900                           ; BSR set to: 0
 14901                           ;tff.c: 300: }
 14902                           ;tff.c: 302: ncl = scl;
 14903  002C40  C0C0  F0C2         	movff	create_chain@scl,create_chain@ncl
 14904  002C44  C0C1  F0C3         	movff	create_chain@scl+1,create_chain@ncl+1
 14905  002C48                     l9341:
 14906                           
 14907                           ; BSR set to: 0
 14908                           ;tff.c: 304: ncl++;
 14909  002C48  4BC2               	infsnz	create_chain@ncl& (0+255),f,b
 14910  002C4A  2BC3               	incf	(create_chain@ncl+1)& (0+255),f,b
 14911                           
 14912                           ; BSR set to: 0
 14913                           ;tff.c: 305: if (ncl >= mcl) {
 14914  002C4C  51BA               	movf	create_chain@mcl& (0+255),w,b
 14915  002C4E  5DC2               	subwf	create_chain@ncl& (0+255),w,b
 14916  002C50  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 14917  002C52  59C3               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 14918  002C54  A0D8               	btfss	status,0,c
 14919  002C56  D00F               	goto	l991
 14920                           
 14921                           ; BSR set to: 0
 14922                           ;tff.c: 306: ncl = 2;
 14923  002C58  0E00               	movlw	0
 14924  002C5A  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 14925  002C5C  0E02               	movlw	2
 14926  002C5E  6FC2               	movwf	create_chain@ncl& (0+255),b
 14927                           
 14928                           ; BSR set to: 0
 14929                           ;tff.c: 307: if (ncl > scl) return 0;
 14930  002C60  51C2               	movf	create_chain@ncl& (0+255),w,b
 14931  002C62  5DC0               	subwf	create_chain@scl& (0+255),w,b
 14932  002C64  51C3               	movf	(create_chain@ncl+1)& (0+255),w,b
 14933  002C66  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 14934  002C68  B0D8               	btfsc	status,0,c
 14935  002C6A  D005               	goto	l991
 14936                           
 14937                           ; BSR set to: 0
 14938  002C6C  0E00               	movlw	0
 14939  002C6E  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 14940  002C70  0E00               	movlw	0
 14941  002C72  6FB6               	movwf	?_create_chain& (0+255),b
 14942                           
 14943                           ; BSR set to: 0
 14944  002C74  0012               	return	
 14945  002C76                     l991:
 14946                           
 14947                           ; BSR set to: 0
 14948                           ;tff.c: 308: }
 14949                           ;tff.c: 309: cstat = get_cluster(ncl);
 14950                           
 14951                           ; BSR set to: 0
 14952                           
 14953                           ; BSR set to: 0
 14954  002C76  C0C2  F0A0         	movff	create_chain@ncl,get_cluster@clust
 14955  002C7A  C0C3  F0A1         	movff	create_chain@ncl+1,get_cluster@clust+1
 14956  002C7E  ECD7  F013         	call	_get_cluster	;wreg free
 14957  002C82  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 14958  002C86  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 14959                           
 14960                           ;tff.c: 310: if (cstat == 0) break;
 14961  002C8A  0100               	movlb	0	; () banked
 14962  002C8C  51BE               	movf	create_chain@cstat& (0+255),w,b
 14963  002C8E  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 14964  002C90  B4D8               	btfsc	status,2,c
 14965  002C92  D015               	goto	l993
 14966                           
 14967                           ; BSR set to: 0
 14968                           ;tff.c: 311: if (cstat == 1) return 1;
 14969                           
 14970                           ; BSR set to: 0
 14971                           
 14972                           ; BSR set to: 0
 14973  002C94  05BE               	decf	create_chain@cstat& (0+255),w,b
 14974  002C96  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 14975  002C98  A4D8               	btfss	status,2,c
 14976  002C9A  D005               	goto	l994
 14977                           
 14978                           ; BSR set to: 0
 14979  002C9C  0E00               	movlw	0
 14980  002C9E  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 14981  002CA0  0E01               	movlw	1
 14982  002CA2  6FB6               	movwf	?_create_chain& (0+255),b
 14983                           
 14984                           ; BSR set to: 0
 14985  002CA4  0012               	return	
 14986  002CA6                     l994:
 14987                           
 14988                           ; BSR set to: 0
 14989                           ;tff.c: 312: if (ncl == scl) return 0;
 14990                           
 14991                           ; BSR set to: 0
 14992  002CA6  51C0               	movf	create_chain@scl& (0+255),w,b
 14993  002CA8  19C2               	xorwf	create_chain@ncl& (0+255),w,b
 14994  002CAA  E1CE               	bnz	l9341
 14995  002CAC  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 14996  002CAE  19C3               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 14997  002CB0  A4D8               	btfss	status,2,c
 14998  002CB2  D7CA               	goto	l989
 14999                           
 15000                           ; BSR set to: 0
 15001  002CB4  0E00               	movlw	0
 15002  002CB6  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 15003  002CB8  0E00               	movlw	0
 15004  002CBA  6FB6               	movwf	?_create_chain& (0+255),b
 15005                           
 15006                           ; BSR set to: 0
 15007  002CBC  0012               	return	
 15008  002CBE                     l993:
 15009                           
 15010                           ; BSR set to: 0
 15011                           ;tff.c: 315: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 15012                           
 15013                           ; BSR set to: 0
 15014  002CBE  C0C2  F0A0         	movff	create_chain@ncl,put_cluster@clust
 15015  002CC2  C0C3  F0A1         	movff	create_chain@ncl+1,put_cluster@clust+1
 15016  002CC6  0EFF               	movlw	255
 15017  002CC8  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 15018  002CCA  69A2               	setf	put_cluster@val& (0+255),b
 15019  002CCC  EC9A  F012         	call	_put_cluster	;wreg free
 15020  002CD0  0900               	iorlw	0
 15021  002CD2  A4D8               	btfss	status,2,c
 15022  002CD4  D006               	goto	l996
 15023  002CD6  0E00               	movlw	0
 15024  002CD8  0100               	movlb	0	; () banked
 15025  002CDA  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 15026  002CDC  0E01               	movlw	1
 15027  002CDE  6FB6               	movwf	?_create_chain& (0+255),b
 15028                           
 15029                           ; BSR set to: 0
 15030  002CE0  0012               	return	
 15031  002CE2                     l996:
 15032                           
 15033                           ;tff.c: 316: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 15034                           
 15035                           ; BSR set to: 0
 15036  002CE2  0100               	movlb	0	; () banked
 15037  002CE4  51B6               	movf	create_chain@clust& (0+255),w,b
 15038  002CE6  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 15039  002CE8  B4D8               	btfsc	status,2,c
 15040  002CEA  D013               	goto	l997
 15041                           
 15042                           ; BSR set to: 0
 15043  002CEC  C0B6  F0A0         	movff	create_chain@clust,put_cluster@clust
 15044  002CF0  C0B7  F0A1         	movff	create_chain@clust+1,put_cluster@clust+1
 15045  002CF4  C0C2  F0A2         	movff	create_chain@ncl,put_cluster@val
 15046  002CF8  C0C3  F0A3         	movff	create_chain@ncl+1,put_cluster@val+1
 15047  002CFC  EC9A  F012         	call	_put_cluster	;wreg free
 15048  002D00  0900               	iorlw	0
 15049  002D02  A4D8               	btfss	status,2,c
 15050  002D04  D006               	goto	l997
 15051  002D06  0E00               	movlw	0
 15052  002D08  0100               	movlb	0	; () banked
 15053  002D0A  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 15054  002D0C  0E01               	movlw	1
 15055  002D0E  6FB6               	movwf	?_create_chain& (0+255),b
 15056                           
 15057                           ; BSR set to: 0
 15058  002D10  0012               	return	
 15059  002D12                     l997:
 15060                           
 15061                           ;tff.c: 318: fs->last_clust = ncl;
 15062                           
 15063                           ; BSR set to: 0
 15064  002D12  0100               	movlb	0	; () banked
 15065  002D14  EE20 F018          	lfsr	2,24
 15066  002D18  51BC               	movf	create_chain@fs& (0+255),w,b
 15067  002D1A  26D9               	addwf	fsr2l,f,c
 15068  002D1C  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 15069  002D1E  22DA               	addwfc	fsr2h,f,c
 15070  002D20  C0C2  FFDE         	movff	create_chain@ncl,postinc2
 15071  002D24  C0C3  FFDD         	movff	create_chain@ncl+1,postdec2
 15072                           
 15073                           ;tff.c: 319: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 15074  002D28  EE20 F01A          	lfsr	2,26
 15075  002D2C  51BC               	movf	create_chain@fs& (0+255),w,b
 15076  002D2E  26D9               	addwf	fsr2l,f,c
 15077  002D30  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 15078  002D32  22DA               	addwfc	fsr2h,f,c
 15079  002D34  28DE               	incf	postinc2,w,c
 15080  002D36  E103               	bnz	u11330
 15081  002D38  28DE               	incf	postinc2,w,c
 15082  002D3A  B4D8               	btfsc	status,2,c
 15083  002D3C  D009               	goto	l998
 15084  002D3E                     u11330:
 15085                           
 15086                           ; BSR set to: 0
 15087                           ;tff.c: 320: fs->free_clust--;
 15088  002D3E  EE20 F01A          	lfsr	2,26
 15089  002D42  51BC               	movf	create_chain@fs& (0+255),w,b
 15090  002D44  26D9               	addwf	fsr2l,f,c
 15091  002D46  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 15092  002D48  22DA               	addwfc	fsr2h,f,c
 15093  002D4A  06DE               	decf	postinc2,f,c
 15094  002D4C  0E00               	movlw	0
 15095  002D4E  5ADD               	subwfb	postdec2,f,c
 15096  002D50                     l998:
 15097                           
 15098                           ; BSR set to: 0
 15099                           ;tff.c: 324: }
 15100                           ;tff.c: 326: return ncl;
 15101                           
 15102                           ; BSR set to: 0
 15103  002D50  C0C2  F0B6         	movff	create_chain@ncl,?_create_chain
 15104  002D54  C0C3  F0B7         	movff	create_chain@ncl+1,?_create_chain+1
 15105  002D58  0012               	return	
 15106  002D5A                     __end_of_create_chain:
 15107                           	opt stack 0
 15108                           tosu	equ	0xFFF
 15109                           tosh	equ	0xFFE
 15110                           tosl	equ	0xFFD
 15111                           pclath	equ	0xFFA
 15112                           tblptru	equ	0xFF8
 15113                           tblptrh	equ	0xFF7
 15114                           tblptrl	equ	0xFF6
 15115                           tablat	equ	0xFF5
 15116                           prodh	equ	0xFF4
 15117                           prodl	equ	0xFF3
 15118                           intcon	equ	0xFF2
 15119                           intcon2	equ	0xFF1
 15120                           intcon3	equ	0xFF0
 15121                           indf0	equ	0xFEF
 15122                           postinc0	equ	0xFEE
 15123                           fsr0h	equ	0xFEA
 15124                           fsr0l	equ	0xFE9
 15125                           wreg	equ	0xFE8
 15126                           indf1	equ	0xFE7
 15127                           postinc1	equ	0xFE6
 15128                           postdec1	equ	0xFE5
 15129                           plusw1	equ	0xFE3
 15130                           fsr1h	equ	0xFE2
 15131                           fsr1l	equ	0xFE1
 15132                           indf2	equ	0xFDF
 15133                           postinc2	equ	0xFDE
 15134                           postdec2	equ	0xFDD
 15135                           plusw2	equ	0xFDB
 15136                           fsr2h	equ	0xFDA
 15137                           fsr2l	equ	0xFD9
 15138                           status	equ	0xFD8
 15139                           
 15140 ;; *************** function _put_cluster *****************
 15141 ;; Defined at:
 15142 ;;		line 197 in file "bibliotecas/tff.c"
 15143 ;; Parameters:    Size  Location     Type
 15144 ;;  clust           2   64[BANK0 ] unsigned short 
 15145 ;;  val             2   66[BANK0 ] unsigned short 
 15146 ;; Auto vars:     Size  Location     Type
 15147 ;;  fatsect         4   76[BANK0 ] unsigned long 
 15148 ;;  fs              2   84[BANK0 ] PTR struct _FATFS
 15149 ;;		 -> NULL(0), fs(544), 
 15150 ;;  p               2   82[BANK0 ] PTR unsigned char 
 15151 ;;		 -> fs.win(512), NULL(0), fs(544), 
 15152 ;;  bc              2   80[BANK0 ] unsigned short 
 15153 ;; Return value:  Size  Location     Type
 15154 ;;                  1    wreg      enum E105
 15155 ;; Registers used:
 15156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15157 ;; Tracked objects:
 15158 ;;		On entry : 0/0
 15159 ;;		On exit  : 0/0
 15160 ;;		Unchanged: 0/0
 15161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15162 ;;      Params:         0       4       0       0       0       0       0       0       0
 15163 ;;      Locals:         0      14       0       0       0       0       0       0       0
 15164 ;;      Temps:          0       4       0       0       0       0       0       0       0
 15165 ;;      Totals:         0      22       0       0       0       0       0       0       0
 15166 ;;Total ram usage:       22 bytes
 15167 ;; Hardware stack levels used:    1
 15168 ;; Hardware stack levels required when called:    9
 15169 ;; This function calls:
 15170 ;;		___wmul
 15171 ;;		_move_window
 15172 ;; This function is called by:
 15173 ;;		_remove_chain
 15174 ;;		_create_chain
 15175 ;; This function uses a non-reentrant model
 15176 ;;
 15177                           
 15178                           	psect	text54
 15179  002534                     __ptext54:
 15180                           	opt stack 0
 15181  002534                     _put_cluster:
 15182                           	opt stack 13
 15183                           
 15184                           ;tff.c: 202: WORD bc;
 15185                           ;tff.c: 203: BYTE *p;
 15186                           ;tff.c: 204: DWORD fatsect;
 15187                           ;tff.c: 205: FATFS *fs = FatFs;
 15188                           
 15189                           ; BSR set to: 0
 15190                           ;incstack = 0
 15191  002534  C0FD  F0B4         	movff	_FatFs,put_cluster@fs
 15192  002538  C0FE  F0B5         	movff	_FatFs+1,put_cluster@fs+1
 15193                           
 15194                           ;tff.c: 208: fatsect = fs->fatbase;
 15195  00253C  0100               	movlb	0	; () banked
 15196  00253E  EE20 F008          	lfsr	2,8
 15197  002542  51B4               	movf	put_cluster@fs& (0+255),w,b
 15198  002544  26D9               	addwf	fsr2l,f,c
 15199  002546  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 15200  002548  22DA               	addwfc	fsr2h,f,c
 15201  00254A  CFDE F0AC          	movff	postinc2,put_cluster@fatsect
 15202  00254E  CFDE F0AD          	movff	postinc2,put_cluster@fatsect+1
 15203  002552  CFDE F0AE          	movff	postinc2,put_cluster@fatsect+2
 15204  002556  CFDE F0AF          	movff	postinc2,put_cluster@fatsect+3
 15205                           
 15206                           ;tff.c: 209: switch (fs->fs_type) {
 15207  00255A  D111               	goto	l951
 15208  00255C                     
 15209                           ; BSR set to: 0
 15210                           ;tff.c: 211: bc = (WORD)clust * 3 / 2;
 15211                           
 15212                           ; BSR set to: 0
 15213  00255C  C0A0  F060         	movff	put_cluster@clust,___wmul@multiplier
 15214  002560  C0A1  F061         	movff	put_cluster@clust+1,___wmul@multiplier+1
 15215  002564  0E00               	movlw	0
 15216  002566  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15217  002568  0E03               	movlw	3
 15218  00256A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15219  00256C  ECB3  F025         	call	___wmul	;wreg free
 15220  002570  90D8               	bcf	status,0,c
 15221  002572  0100               	movlb	0	; () banked
 15222  002574  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 15223  002576  6FA4               	movwf	??_put_cluster& (0+255),b
 15224  002578  3160               	rrcf	?___wmul& (0+255),w,b
 15225  00257A  6FB0               	movwf	put_cluster@bc& (0+255),b
 15226  00257C  C0A4  F0B1         	movff	??_put_cluster,put_cluster@bc+1
 15227                           
 15228                           ; BSR set to: 0
 15229                           ;tff.c: 212: if (!move_window(fatsect + bc / 512U)) return FALSE;
 15230  002580  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 15231  002584  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 15232  002588  0E09               	movlw	9
 15233  00258A  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15234  00258C                     u11065:
 15235  00258C  90D8               	bcf	status,0,c
 15236  00258E  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15237  002590  33A4               	rrcf	??_put_cluster& (0+255),f,b
 15238  002592  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15239  002594  D7FB               	goto	u11065
 15240  002596  51A4               	movf	??_put_cluster& (0+255),w,b
 15241  002598  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 15242  00259A  6F8B               	movwf	move_window@sector& (0+255),b
 15243  00259C  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15244  00259E  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15245  0025A0  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15246  0025A2  0E00               	movlw	0
 15247  0025A4  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15248  0025A6  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15249  0025A8  0E00               	movlw	0
 15250  0025AA  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15251  0025AC  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15252  0025AE  ECAD  F016         	call	_move_window	;wreg free
 15253  0025B2  0900               	iorlw	0
 15254  0025B4  A4D8               	btfss	status,2,c
 15255  0025B6  D002               	goto	l953
 15256  0025B8  0E00               	movlw	0
 15257  0025BA  0012               	return	
 15258  0025BC                     l953:
 15259                           
 15260                           ;tff.c: 213: p = &fs->win[bc % 512U];
 15261  0025BC  0EFF               	movlw	255
 15262  0025BE  0100               	movlb	0	; () banked
 15263  0025C0  6FA4               	movwf	??_put_cluster& (0+255),b
 15264  0025C2  0E01               	movlw	1
 15265  0025C4  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 15266  0025C6  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 15267  0025CA  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 15268  0025CE  51A4               	movf	??_put_cluster& (0+255),w,b
 15269  0025D0  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 15270  0025D2  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15271  0025D4  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 15272  0025D6  0E20               	movlw	32
 15273  0025D8  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 15274  0025DA  0E00               	movlw	0
 15275  0025DC  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 15276  0025DE  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 15277  0025E0  25B4               	addwf	put_cluster@fs& (0+255),w,b
 15278  0025E2  6FB2               	movwf	put_cluster@p& (0+255),b
 15279  0025E4  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 15280  0025E6  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 15281  0025E8  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 15282                           
 15283                           ; BSR set to: 0
 15284                           ;tff.c: 214: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 15285  0025EA  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 15286  0025EC  D004               	goto	l956
 15287                           
 15288                           ; BSR set to: 0
 15289  0025EE  C0A2  F0A8         	movff	put_cluster@val,_put_cluster$1889
 15290  0025F2  6BA9               	clrf	(_put_cluster$1889+1)& (0+255),b
 15291  0025F4  D01A               	goto	l958
 15292  0025F6                     l956:
 15293                           
 15294                           ; BSR set to: 0
 15295                           
 15296                           ; BSR set to: 0
 15297  0025F6  51A2               	movf	put_cluster@val& (0+255),w,b
 15298  0025F8  6FA4               	movwf	??_put_cluster& (0+255),b
 15299  0025FA  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 15300  0025FC  3BA4               	swapf	??_put_cluster& (0+255),f,b
 15301  0025FE  3BA5               	swapf	(??_put_cluster+1)& (0+255),f,b
 15302  002600  0EF0               	movlw	240
 15303  002602  17A5               	andwf	(??_put_cluster+1)& (0+255),f,b
 15304  002604  51A4               	movf	??_put_cluster& (0+255),w,b
 15305  002606  0B0F               	andlw	15
 15306  002608  13A5               	iorwf	(??_put_cluster+1)& (0+255),f,b
 15307  00260A  0EF0               	movlw	240
 15308  00260C  17A4               	andwf	??_put_cluster& (0+255),f,b
 15309  00260E  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 15310  002612  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 15311  002616  50DF               	movf	indf2,w,c
 15312  002618  0B0F               	andlw	15
 15313  00261A  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15314  00261C  6BA7               	clrf	(??_put_cluster+3)& (0+255),b
 15315  00261E  51A4               	movf	??_put_cluster& (0+255),w,b
 15316  002620  11A6               	iorwf	(??_put_cluster+2)& (0+255),w,b
 15317  002622  6FA8               	movwf	_put_cluster$1889& (0+255),b
 15318  002624  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15319  002626  11A7               	iorwf	(??_put_cluster+3)& (0+255),w,b
 15320  002628  6FA9               	movwf	(_put_cluster$1889+1)& (0+255),b
 15321  00262A                     l958:
 15322                           
 15323                           ; BSR set to: 0
 15324                           
 15325                           ; BSR set to: 0
 15326  00262A  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 15327  00262E  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 15328  002632  C0A8  FFDF         	movff	_put_cluster$1889,indf2
 15329                           
 15330                           ; BSR set to: 0
 15331                           ;tff.c: 215: bc++;
 15332  002636  4BB0               	infsnz	put_cluster@bc& (0+255),f,b
 15333  002638  2BB1               	incf	(put_cluster@bc+1)& (0+255),f,b
 15334                           
 15335                           ; BSR set to: 0
 15336                           ;tff.c: 216: fs->winflag = 1;
 15337  00263A  EE20 F01F          	lfsr	2,31
 15338  00263E  51B4               	movf	put_cluster@fs& (0+255),w,b
 15339  002640  26D9               	addwf	fsr2l,f,c
 15340  002642  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 15341  002644  22DA               	addwfc	fsr2h,f,c
 15342  002646  0E01               	movlw	1
 15343  002648  6EDF               	movwf	indf2,c
 15344                           
 15345                           ; BSR set to: 0
 15346                           ;tff.c: 217: if (!move_window(fatsect + bc / 512U)) return FALSE;
 15347  00264A  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 15348  00264E  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 15349  002652  0E09               	movlw	9
 15350  002654  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15351  002656                     u11095:
 15352  002656  90D8               	bcf	status,0,c
 15353  002658  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15354  00265A  33A4               	rrcf	??_put_cluster& (0+255),f,b
 15355  00265C  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15356  00265E  D7FB               	goto	u11095
 15357  002660  51A4               	movf	??_put_cluster& (0+255),w,b
 15358  002662  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 15359  002664  6F8B               	movwf	move_window@sector& (0+255),b
 15360  002666  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15361  002668  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15362  00266A  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15363  00266C  0E00               	movlw	0
 15364  00266E  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15365  002670  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15366  002672  0E00               	movlw	0
 15367  002674  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15368  002676  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15369  002678  ECAD  F016         	call	_move_window	;wreg free
 15370  00267C  0900               	iorlw	0
 15371  00267E  A4D8               	btfss	status,2,c
 15372  002680  D002               	goto	l959
 15373  002682  0E00               	movlw	0
 15374  002684  0012               	return	
 15375  002686                     l959:
 15376                           
 15377                           ;tff.c: 218: p = &fs->win[bc % 512U];
 15378  002686  0EFF               	movlw	255
 15379  002688  0100               	movlb	0	; () banked
 15380  00268A  6FA4               	movwf	??_put_cluster& (0+255),b
 15381  00268C  0E01               	movlw	1
 15382  00268E  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 15383  002690  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 15384  002694  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 15385  002698  51A4               	movf	??_put_cluster& (0+255),w,b
 15386  00269A  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 15387  00269C  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15388  00269E  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 15389  0026A0  0E20               	movlw	32
 15390  0026A2  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 15391  0026A4  0E00               	movlw	0
 15392  0026A6  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 15393  0026A8  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 15394  0026AA  25B4               	addwf	put_cluster@fs& (0+255),w,b
 15395  0026AC  6FB2               	movwf	put_cluster@p& (0+255),b
 15396  0026AE  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 15397  0026B0  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 15398  0026B2  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 15399                           
 15400                           ; BSR set to: 0
 15401                           ;tff.c: 219: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 15402  0026B4  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 15403  0026B6  D013               	goto	l961
 15404                           
 15405                           ; BSR set to: 0
 15406  0026B8  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 15407  0026BC  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 15408  0026C0  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 15409  0026C4  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 15410  0026C6  0E0F               	movlw	15
 15411  0026C8  17A4               	andwf	??_put_cluster& (0+255),f,b
 15412  0026CA  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 15413  0026CE  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 15414  0026D2  50DF               	movf	indf2,w,c
 15415  0026D4  0BF0               	andlw	240
 15416  0026D6  11A4               	iorwf	??_put_cluster& (0+255),w,b
 15417  0026D8  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15418  0026DA  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 15419  0026DC  D00C               	goto	L9
 15420  0026DE                     l961:
 15421                           
 15422                           ; BSR set to: 0
 15423                           
 15424                           ; BSR set to: 0
 15425  0026DE  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 15426  0026E2  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 15427  0026E6  0E04               	movlw	4
 15428  0026E8  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 15429  0026EA                     u11125:
 15430  0026EA  90D8               	bcf	status,0,c
 15431  0026EC  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15432  0026EE  33A4               	rrcf	??_put_cluster& (0+255),f,b
 15433  0026F0  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15434  0026F2  D7FB               	goto	u11125
 15435  0026F4  51A4               	movf	??_put_cluster& (0+255),w,b
 15436  0026F6                     L9:
 15437  0026F6  6FAA               	movwf	_put_cluster$1890& (0+255),b
 15438  0026F8  6BAB               	clrf	(_put_cluster$1890+1)& (0+255),b
 15439                           
 15440                           ; BSR set to: 0
 15441                           
 15442                           ; BSR set to: 0
 15443  0026FA  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 15444  0026FE  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 15445  002702  C0AA  FFDF         	movff	_put_cluster$1890,indf2
 15446                           
 15447                           ;tff.c: 220: break;
 15448  002706  D049               	goto	l964
 15449  002708                     
 15450                           ; BSR set to: 0
 15451                           ;tff.c: 223: if (!move_window(fatsect + clust / 256)) return FALSE;
 15452                           
 15453                           ; BSR set to: 0
 15454  002708  C0A0  F0A4         	movff	put_cluster@clust,??_put_cluster
 15455  00270C  C0A1  F0A5         	movff	put_cluster@clust+1,??_put_cluster+1
 15456  002710  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 15457  002714  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 15458  002716  51A4               	movf	??_put_cluster& (0+255),w,b
 15459  002718  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 15460  00271A  6F8B               	movwf	move_window@sector& (0+255),b
 15461  00271C  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15462  00271E  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15463  002720  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15464  002722  0E00               	movlw	0
 15465  002724  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15466  002726  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15467  002728  0E00               	movlw	0
 15468  00272A  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15469  00272C  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15470  00272E  ECAD  F016         	call	_move_window	;wreg free
 15471  002732  0900               	iorlw	0
 15472  002734  A4D8               	btfss	status,2,c
 15473  002736  D002               	goto	l966
 15474  002738  0E00               	movlw	0
 15475  00273A  0012               	return	
 15476  00273C                     l966:
 15477                           
 15478                           ;tff.c: 224: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 15479  00273C  0EFF               	movlw	255
 15480  00273E  0100               	movlb	0	; () banked
 15481  002740  6FA4               	movwf	??_put_cluster& (0+255),b
 15482  002742  0E01               	movlw	1
 15483  002744  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 15484  002746  C0A0  F0A6         	movff	put_cluster@clust,??_put_cluster+2
 15485  00274A  C0A1  F0A7         	movff	put_cluster@clust+1,??_put_cluster+3
 15486  00274E  90D8               	bcf	status,0,c
 15487  002750  37A6               	rlcf	(??_put_cluster+2)& (0+255),f,b
 15488  002752  37A7               	rlcf	(??_put_cluster+3)& (0+255),f,b
 15489  002754  51A4               	movf	??_put_cluster& (0+255),w,b
 15490  002756  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 15491  002758  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 15492  00275A  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 15493  00275C  0E20               	movlw	32
 15494  00275E  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 15495  002760  0E00               	movlw	0
 15496  002762  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 15497  002764  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 15498  002766  25B4               	addwf	put_cluster@fs& (0+255),w,b
 15499  002768  6ED9               	movwf	fsr2l,c
 15500  00276A  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 15501  00276C  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 15502  00276E  6EDA               	movwf	fsr2h,c
 15503  002770  C0A2  FFDE         	movff	put_cluster@val,postinc2
 15504  002774  C0A3  FFDD         	movff	put_cluster@val+1,postdec2
 15505                           
 15506                           ;tff.c: 225: break;
 15507  002778  D010               	goto	l964
 15508  00277A                     
 15509                           ; BSR set to: 0
 15510                           ;tff.c: 233: return FALSE;
 15511                           
 15512                           ; BSR set to: 0
 15513  00277A  0E00               	movlw	0
 15514                           
 15515                           ; BSR set to: 0
 15516  00277C  0012               	return	
 15517  00277E                     l951:
 15518                           
 15519                           ; BSR set to: 0
 15520                           
 15521                           ; BSR set to: 0
 15522  00277E  EE20 F01C          	lfsr	2,28
 15523  002782  51B4               	movf	put_cluster@fs& (0+255),w,b
 15524  002784  26D9               	addwf	fsr2l,f,c
 15525  002786  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 15526  002788  22DA               	addwfc	fsr2h,f,c
 15527  00278A  50DF               	movf	indf2,w,c
 15528                           
 15529                           ; Switch size 1, requested type "space"
 15530                           ; Number of cases is 2, Range of values is 1 to 2
 15531                           ; switch strategies available:
 15532                           ; Name         Instructions Cycles
 15533                           ; simple_byte            7     4 (average)
 15534                           ;	Chosen strategy is simple_byte
 15535  00278C  0A01               	xorlw	1	; case 1
 15536  00278E  B4D8               	btfsc	status,2,c
 15537  002790  D6E5               	goto	l952
 15538  002792  0A03               	xorlw	3	; case 2
 15539  002794  B4D8               	btfsc	status,2,c
 15540  002796  D7B8               	goto	l965
 15541  002798  D7F0               	goto	l967
 15542  00279A                     l964:
 15543                           
 15544                           ; BSR set to: 0
 15545                           ;tff.c: 235: fs->winflag = 1;
 15546                           
 15547                           ; BSR set to: 0
 15548  00279A  EE20 F01F          	lfsr	2,31
 15549  00279E  51B4               	movf	put_cluster@fs& (0+255),w,b
 15550  0027A0  26D9               	addwf	fsr2l,f,c
 15551  0027A2  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 15552  0027A4  22DA               	addwfc	fsr2h,f,c
 15553  0027A6  0E01               	movlw	1
 15554  0027A8  6EDF               	movwf	indf2,c
 15555                           
 15556                           ; BSR set to: 0
 15557                           ;tff.c: 236: return TRUE;
 15558  0027AA  0E01               	movlw	1
 15559  0027AC  0012               	return	
 15560  0027AE                     __end_of_put_cluster:
 15561                           	opt stack 0
 15562                           tosu	equ	0xFFF
 15563                           tosh	equ	0xFFE
 15564                           tosl	equ	0xFFD
 15565                           pclath	equ	0xFFA
 15566                           tblptru	equ	0xFF8
 15567                           tblptrh	equ	0xFF7
 15568                           tblptrl	equ	0xFF6
 15569                           tablat	equ	0xFF5
 15570                           prodh	equ	0xFF4
 15571                           prodl	equ	0xFF3
 15572                           intcon	equ	0xFF2
 15573                           intcon2	equ	0xFF1
 15574                           intcon3	equ	0xFF0
 15575                           indf0	equ	0xFEF
 15576                           postinc0	equ	0xFEE
 15577                           fsr0h	equ	0xFEA
 15578                           fsr0l	equ	0xFE9
 15579                           wreg	equ	0xFE8
 15580                           indf1	equ	0xFE7
 15581                           postinc1	equ	0xFE6
 15582                           postdec1	equ	0xFE5
 15583                           plusw1	equ	0xFE3
 15584                           fsr1h	equ	0xFE2
 15585                           fsr1l	equ	0xFE1
 15586                           indf2	equ	0xFDF
 15587                           postinc2	equ	0xFDE
 15588                           postdec2	equ	0xFDD
 15589                           plusw2	equ	0xFDB
 15590                           fsr2h	equ	0xFDA
 15591                           fsr2l	equ	0xFD9
 15592                           status	equ	0xFD8
 15593                           
 15594 ;; *************** function _get_cluster *****************
 15595 ;; Defined at:
 15596 ;;		line 154 in file "bibliotecas/tff.c"
 15597 ;; Parameters:    Size  Location     Type
 15598 ;;  clust           2   64[BANK0 ] unsigned short 
 15599 ;; Auto vars:     Size  Location     Type
 15600 ;;  fatsect         4   75[BANK0 ] unsigned long 
 15601 ;;  fs              2   81[BANK0 ] PTR struct _FATFS
 15602 ;;		 -> NULL(0), fs(544), 
 15603 ;;  bc              2   79[BANK0 ] unsigned short 
 15604 ;;  wc              2   73[BANK0 ] unsigned short 
 15605 ;; Return value:  Size  Location     Type
 15606 ;;                  2   64[BANK0 ] unsigned short 
 15607 ;; Registers used:
 15608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15609 ;; Tracked objects:
 15610 ;;		On entry : 0/0
 15611 ;;		On exit  : 0/0
 15612 ;;		Unchanged: 0/0
 15613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15614 ;;      Params:         0       2       0       0       0       0       0       0       0
 15615 ;;      Locals:         0      10       0       0       0       0       0       0       0
 15616 ;;      Temps:          0       7       0       0       0       0       0       0       0
 15617 ;;      Totals:         0      19       0       0       0       0       0       0       0
 15618 ;;Total ram usage:       19 bytes
 15619 ;; Hardware stack levels used:    1
 15620 ;; Hardware stack levels required when called:    9
 15621 ;; This function calls:
 15622 ;;		___wmul
 15623 ;;		_move_window
 15624 ;; This function is called by:
 15625 ;;		_remove_chain
 15626 ;;		_create_chain
 15627 ;;		_next_dir_entry
 15628 ;;		_f_lseek
 15629 ;;		_f_read
 15630 ;; This function uses a non-reentrant model
 15631 ;;
 15632                           
 15633                           	psect	text55
 15634  0027AE                     __ptext55:
 15635                           	opt stack 0
 15636  0027AE                     _get_cluster:
 15637                           	opt stack 13
 15638                           
 15639                           ;tff.c: 158: WORD wc, bc;
 15640                           ;tff.c: 159: DWORD fatsect;
 15641                           ;tff.c: 160: FATFS *fs = FatFs;
 15642                           
 15643                           ;incstack = 0
 15644  0027AE  C0FD  F0B1         	movff	_FatFs,get_cluster@fs
 15645  0027B2  C0FE  F0B2         	movff	_FatFs+1,get_cluster@fs+1
 15646                           
 15647                           ;tff.c: 163: if (clust >= 2 && clust < fs->max_clust) {
 15648  0027B6  0100               	movlb	0	; () banked
 15649  0027B8  51A1               	movf	(get_cluster@clust+1)& (0+255),w,b
 15650  0027BA  E104               	bnz	u10970
 15651  0027BC  0E02               	movlw	2
 15652  0027BE  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 15653  0027C0  A0D8               	btfss	status,0,c
 15654  0027C2  D100               	goto	l940
 15655  0027C4                     u10970:
 15656                           
 15657                           ; BSR set to: 0
 15658  0027C4  EE20 F016          	lfsr	2,22
 15659  0027C8  51B1               	movf	get_cluster@fs& (0+255),w,b
 15660  0027CA  26D9               	addwf	fsr2l,f,c
 15661  0027CC  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 15662  0027CE  22DA               	addwfc	fsr2h,f,c
 15663  0027D0  50DE               	movf	postinc2,w,c
 15664  0027D2  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 15665  0027D4  50DE               	movf	postinc2,w,c
 15666  0027D6  59A1               	subwfb	(get_cluster@clust+1)& (0+255),w,b
 15667  0027D8  B0D8               	btfsc	status,0,c
 15668  0027DA  D0F4               	goto	l940
 15669                           
 15670                           ; BSR set to: 0
 15671                           ;tff.c: 164: fatsect = fs->fatbase;
 15672  0027DC  EE20 F008          	lfsr	2,8
 15673  0027E0  51B1               	movf	get_cluster@fs& (0+255),w,b
 15674  0027E2  26D9               	addwf	fsr2l,f,c
 15675  0027E4  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 15676  0027E6  22DA               	addwfc	fsr2h,f,c
 15677  0027E8  CFDE F0AB          	movff	postinc2,get_cluster@fatsect
 15678  0027EC  CFDE F0AC          	movff	postinc2,get_cluster@fatsect+1
 15679  0027F0  CFDE F0AD          	movff	postinc2,get_cluster@fatsect+2
 15680  0027F4  CFDE F0AE          	movff	postinc2,get_cluster@fatsect+3
 15681                           
 15682                           ;tff.c: 165: switch (fs->fs_type) {
 15683  0027F8  D0D8               	goto	l937
 15684  0027FA                     
 15685                           ; BSR set to: 0
 15686                           ;tff.c: 167: bc = (WORD)clust * 3 / 2;
 15687                           
 15688                           ; BSR set to: 0
 15689  0027FA  C0A0  F060         	movff	get_cluster@clust,___wmul@multiplier
 15690  0027FE  C0A1  F061         	movff	get_cluster@clust+1,___wmul@multiplier+1
 15691  002802  0E00               	movlw	0
 15692  002804  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15693  002806  0E03               	movlw	3
 15694  002808  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15695  00280A  ECB3  F025         	call	___wmul	;wreg free
 15696  00280E  90D8               	bcf	status,0,c
 15697  002810  0100               	movlb	0	; () banked
 15698  002812  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 15699  002814  6FA2               	movwf	??_get_cluster& (0+255),b
 15700  002816  3160               	rrcf	?___wmul& (0+255),w,b
 15701  002818  6FAF               	movwf	get_cluster@bc& (0+255),b
 15702  00281A  C0A2  F0B0         	movff	??_get_cluster,get_cluster@bc+1
 15703                           
 15704                           ; BSR set to: 0
 15705                           ;tff.c: 168: if (!move_window(fatsect + bc / 512U)) break;
 15706  00281E  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 15707  002822  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 15708  002826  0E09               	movlw	9
 15709  002828  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 15710  00282A                     u10995:
 15711  00282A  90D8               	bcf	status,0,c
 15712  00282C  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15713  00282E  33A2               	rrcf	??_get_cluster& (0+255),f,b
 15714  002830  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15715  002832  D7FB               	goto	u10995
 15716  002834  51A2               	movf	??_get_cluster& (0+255),w,b
 15717  002836  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 15718  002838  6F8B               	movwf	move_window@sector& (0+255),b
 15719  00283A  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 15720  00283C  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15721  00283E  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15722  002840  0E00               	movlw	0
 15723  002842  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15724  002844  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15725  002846  0E00               	movlw	0
 15726  002848  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15727  00284A  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15728  00284C  ECAD  F016         	call	_move_window	;wreg free
 15729  002850  0900               	iorlw	0
 15730  002852  B4D8               	btfsc	status,2,c
 15731  002854  D0B7               	goto	l940
 15732                           
 15733                           ;tff.c: 169: wc = fs->win[bc % 512U]; bc++;
 15734  002856  0EFF               	movlw	255
 15735  002858  0100               	movlb	0	; () banked
 15736  00285A  6FA2               	movwf	??_get_cluster& (0+255),b
 15737  00285C  0E01               	movlw	1
 15738  00285E  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 15739  002860  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 15740  002864  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 15741  002868  51A2               	movf	??_get_cluster& (0+255),w,b
 15742  00286A  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 15743  00286C  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 15744  00286E  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 15745  002870  0E20               	movlw	32
 15746  002872  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 15747  002874  0E00               	movlw	0
 15748  002876  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 15749  002878  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 15750  00287A  25B1               	addwf	get_cluster@fs& (0+255),w,b
 15751  00287C  6ED9               	movwf	fsr2l,c
 15752  00287E  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 15753  002880  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 15754  002882  6EDA               	movwf	fsr2h,c
 15755  002884  50DF               	movf	indf2,w,c
 15756  002886  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 15757  002888  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 15758  00288A  6FA9               	movwf	get_cluster@wc& (0+255),b
 15759  00288C  6BAA               	clrf	(get_cluster@wc+1)& (0+255),b
 15760                           
 15761                           ; BSR set to: 0
 15762  00288E  4BAF               	infsnz	get_cluster@bc& (0+255),f,b
 15763  002890  2BB0               	incf	(get_cluster@bc+1)& (0+255),f,b
 15764                           
 15765                           ; BSR set to: 0
 15766                           ;tff.c: 170: if (!move_window(fatsect + bc / 512U)) break;
 15767  002892  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 15768  002896  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 15769  00289A  0E09               	movlw	9
 15770  00289C  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 15771  00289E                     u11015:
 15772  00289E  90D8               	bcf	status,0,c
 15773  0028A0  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15774  0028A2  33A2               	rrcf	??_get_cluster& (0+255),f,b
 15775  0028A4  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15776  0028A6  D7FB               	goto	u11015
 15777  0028A8  51A2               	movf	??_get_cluster& (0+255),w,b
 15778  0028AA  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 15779  0028AC  6F8B               	movwf	move_window@sector& (0+255),b
 15780  0028AE  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 15781  0028B0  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15782  0028B2  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15783  0028B4  0E00               	movlw	0
 15784  0028B6  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15785  0028B8  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15786  0028BA  0E00               	movlw	0
 15787  0028BC  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15788  0028BE  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15789  0028C0  ECAD  F016         	call	_move_window	;wreg free
 15790  0028C4  0900               	iorlw	0
 15791  0028C6  B4D8               	btfsc	status,2,c
 15792  0028C8  D07D               	goto	l940
 15793                           
 15794                           ;tff.c: 171: wc |= (WORD)fs->win[bc % 512U] << 8;
 15795  0028CA  0EFF               	movlw	255
 15796  0028CC  0100               	movlb	0	; () banked
 15797  0028CE  6FA2               	movwf	??_get_cluster& (0+255),b
 15798  0028D0  0E01               	movlw	1
 15799  0028D2  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 15800  0028D4  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 15801  0028D8  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 15802  0028DC  51A2               	movf	??_get_cluster& (0+255),w,b
 15803  0028DE  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 15804  0028E0  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 15805  0028E2  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 15806  0028E4  0E20               	movlw	32
 15807  0028E6  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 15808  0028E8  0E00               	movlw	0
 15809  0028EA  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 15810  0028EC  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 15811  0028EE  25B1               	addwf	get_cluster@fs& (0+255),w,b
 15812  0028F0  6ED9               	movwf	fsr2l,c
 15813  0028F2  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 15814  0028F4  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 15815  0028F6  6EDA               	movwf	fsr2h,c
 15816  0028F8  50DF               	movf	indf2,w,c
 15817  0028FA  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 15818  0028FC  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 15819  0028FE  6FA8               	movwf	(??_get_cluster+6)& (0+255),b
 15820  002900  6BA7               	clrf	(??_get_cluster+5)& (0+255),b
 15821  002902  51A7               	movf	(??_get_cluster+5)& (0+255),w,b
 15822  002904  13A9               	iorwf	get_cluster@wc& (0+255),f,b
 15823  002906  51A8               	movf	(??_get_cluster+6)& (0+255),w,b
 15824  002908  13AA               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 15825                           
 15826                           ; BSR set to: 0
 15827                           ;tff.c: 172: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 15828  00290A  B1A0               	btfsc	get_cluster@clust& (0+255),0,b
 15829  00290C  D007               	goto	l943
 15830                           
 15831                           ; BSR set to: 0
 15832  00290E  0EFF               	movlw	255
 15833  002910  15A9               	andwf	get_cluster@wc& (0+255),w,b
 15834  002912  6FA0               	movwf	?_get_cluster& (0+255),b
 15835  002914  0E0F               	movlw	15
 15836  002916  15AA               	andwf	(get_cluster@wc+1)& (0+255),w,b
 15837  002918  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 15838  00291A  0012               	return	
 15839  00291C                     l943:
 15840                           
 15841                           ; BSR set to: 0
 15842                           
 15843                           ; BSR set to: 0
 15844  00291C  C0A9  F0A2         	movff	get_cluster@wc,??_get_cluster
 15845  002920  C0AA  F0A3         	movff	get_cluster@wc+1,??_get_cluster+1
 15846  002924  0E04               	movlw	4
 15847  002926  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 15848  002928                     u11045:
 15849  002928  90D8               	bcf	status,0,c
 15850  00292A  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15851  00292C  33A2               	rrcf	??_get_cluster& (0+255),f,b
 15852  00292E  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15853  002930  D7FB               	goto	u11045
 15854  002932  C0A2  F0A0         	movff	??_get_cluster,?_get_cluster
 15855  002936  C0A3  F0A1         	movff	??_get_cluster+1,?_get_cluster+1
 15856                           
 15857                           ; BSR set to: 0
 15858                           
 15859                           ; BSR set to: 0
 15860  00293A  0012               	return	
 15861  00293C                     
 15862                           ; BSR set to: 0
 15863                           ;tff.c: 175: if (!move_window(fatsect + clust / 256)) break;
 15864                           
 15865                           ; BSR set to: 0
 15866  00293C  C0A0  F0A2         	movff	get_cluster@clust,??_get_cluster
 15867  002940  C0A1  F0A3         	movff	get_cluster@clust+1,??_get_cluster+1
 15868  002944  C0A3  F0A2         	movff	??_get_cluster+1,??_get_cluster
 15869  002948  6BA3               	clrf	(??_get_cluster+1)& (0+255),b
 15870  00294A  51A2               	movf	??_get_cluster& (0+255),w,b
 15871  00294C  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 15872  00294E  6F8B               	movwf	move_window@sector& (0+255),b
 15873  002950  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 15874  002952  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15875  002954  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15876  002956  0E00               	movlw	0
 15877  002958  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15878  00295A  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15879  00295C  0E00               	movlw	0
 15880  00295E  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15881  002960  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15882  002962  ECAD  F016         	call	_move_window	;wreg free
 15883  002966  0900               	iorlw	0
 15884  002968  B4D8               	btfsc	status,2,c
 15885  00296A  D02C               	goto	l940
 15886                           
 15887                           ;tff.c: 176: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 15888  00296C  0EFF               	movlw	255
 15889  00296E  0100               	movlb	0	; () banked
 15890  002970  6FA2               	movwf	??_get_cluster& (0+255),b
 15891  002972  0E01               	movlw	1
 15892  002974  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 15893  002976  C0A0  F0A4         	movff	get_cluster@clust,??_get_cluster+2
 15894  00297A  C0A1  F0A5         	movff	get_cluster@clust+1,??_get_cluster+3
 15895  00297E  90D8               	bcf	status,0,c
 15896  002980  37A4               	rlcf	(??_get_cluster+2)& (0+255),f,b
 15897  002982  37A5               	rlcf	(??_get_cluster+3)& (0+255),f,b
 15898  002984  51A2               	movf	??_get_cluster& (0+255),w,b
 15899  002986  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 15900  002988  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 15901  00298A  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 15902  00298C  0E20               	movlw	32
 15903  00298E  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 15904  002990  0E00               	movlw	0
 15905  002992  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 15906  002994  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 15907  002996  25B1               	addwf	get_cluster@fs& (0+255),w,b
 15908  002998  6ED9               	movwf	fsr2l,c
 15909  00299A  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 15910  00299C  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 15911  00299E  6EDA               	movwf	fsr2h,c
 15912  0029A0  CFDE F0A0          	movff	postinc2,?_get_cluster
 15913  0029A4  CFDD F0A1          	movff	postdec2,?_get_cluster+1
 15914                           
 15915                           ; BSR set to: 0
 15916  0029A8  0012               	return	
 15917  0029AA                     l937:
 15918                           
 15919                           ; BSR set to: 0
 15920                           
 15921                           ; BSR set to: 0
 15922  0029AA  EE20 F01C          	lfsr	2,28
 15923  0029AE  51B1               	movf	get_cluster@fs& (0+255),w,b
 15924  0029B0  26D9               	addwf	fsr2l,f,c
 15925  0029B2  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 15926  0029B4  22DA               	addwfc	fsr2h,f,c
 15927  0029B6  50DF               	movf	indf2,w,c
 15928                           
 15929                           ; Switch size 1, requested type "space"
 15930                           ; Number of cases is 2, Range of values is 1 to 2
 15931                           ; switch strategies available:
 15932                           ; Name         Instructions Cycles
 15933                           ; simple_byte            7     4 (average)
 15934                           ;	Chosen strategy is simple_byte
 15935  0029B8  0A01               	xorlw	1	; case 1
 15936  0029BA  B4D8               	btfsc	status,2,c
 15937  0029BC  D71E               	goto	l938
 15938  0029BE  0A03               	xorlw	3	; case 2
 15939  0029C0  B4D8               	btfsc	status,2,c
 15940  0029C2  D7BC               	goto	l947
 15941  0029C4                     l940:
 15942                           
 15943                           ;tff.c: 183: }
 15944                           ;tff.c: 185: return 1;
 15945                           
 15946                           ; BSR set to: 0
 15947                           
 15948                           ; BSR set to: 0
 15949  0029C4  0E00               	movlw	0
 15950  0029C6  0100               	movlb	0	; () banked
 15951  0029C8  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 15952  0029CA  0E01               	movlw	1
 15953  0029CC  6FA0               	movwf	?_get_cluster& (0+255),b
 15954  0029CE  0012               	return	
 15955  0029D0                     __end_of_get_cluster:
 15956                           	opt stack 0
 15957                           tosu	equ	0xFFF
 15958                           tosh	equ	0xFFE
 15959                           tosl	equ	0xFFD
 15960                           pclath	equ	0xFFA
 15961                           tblptru	equ	0xFF8
 15962                           tblptrh	equ	0xFF7
 15963                           tblptrl	equ	0xFF6
 15964                           tablat	equ	0xFF5
 15965                           prodh	equ	0xFF4
 15966                           prodl	equ	0xFF3
 15967                           intcon	equ	0xFF2
 15968                           intcon2	equ	0xFF1
 15969                           intcon3	equ	0xFF0
 15970                           indf0	equ	0xFEF
 15971                           postinc0	equ	0xFEE
 15972                           fsr0h	equ	0xFEA
 15973                           fsr0l	equ	0xFE9
 15974                           wreg	equ	0xFE8
 15975                           indf1	equ	0xFE7
 15976                           postinc1	equ	0xFE6
 15977                           postdec1	equ	0xFE5
 15978                           plusw1	equ	0xFE3
 15979                           fsr1h	equ	0xFE2
 15980                           fsr1l	equ	0xFE1
 15981                           indf2	equ	0xFDF
 15982                           postinc2	equ	0xFDE
 15983                           postdec2	equ	0xFDD
 15984                           plusw2	equ	0xFDB
 15985                           fsr2h	equ	0xFDA
 15986                           fsr2l	equ	0xFD9
 15987                           status	equ	0xFD8
 15988                           
 15989 ;; *************** function ___wmul *****************
 15990 ;; Defined at:
 15991 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 15992 ;; Parameters:    Size  Location     Type
 15993 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15994 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15995 ;; Auto vars:     Size  Location     Type
 15996 ;;  product         2    4[BANK0 ] unsigned int 
 15997 ;; Return value:  Size  Location     Type
 15998 ;;                  2    0[BANK0 ] unsigned int 
 15999 ;; Registers used:
 16000 ;;		wreg, status,2, status,0, prodl, prodh
 16001 ;; Tracked objects:
 16002 ;;		On entry : 0/0
 16003 ;;		On exit  : 0/0
 16004 ;;		Unchanged: 0/0
 16005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16006 ;;      Params:         0       4       0       0       0       0       0       0       0
 16007 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16008 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16009 ;;      Totals:         0       6       0       0       0       0       0       0       0
 16010 ;;Total ram usage:        6 bytes
 16011 ;; Hardware stack levels used:    1
 16012 ;; Hardware stack levels required when called:    3
 16013 ;; This function calls:
 16014 ;;		Nothing
 16015 ;; This function is called by:
 16016 ;;		_get_cluster
 16017 ;;		_put_cluster
 16018 ;;		_fprintf
 16019 ;;		_atoi
 16020 ;; This function uses a non-reentrant model
 16021 ;;
 16022                           
 16023                           	psect	text56
 16024  004B66                     __ptext56:
 16025                           	opt stack 0
 16026  004B66                     ___wmul:
 16027                           	opt stack 24
 16028                           
 16029                           ; BSR set to: 0
 16030                           ;incstack = 0
 16031  004B66  0100               	movlb	0	; () banked
 16032  004B68  5160               	movf	___wmul@multiplier& (0+255),w,b
 16033  004B6A  0362               	mulwf	___wmul@multiplicand& (0+255),b
 16034  004B6C  CFF3 F064          	movff	prodl,___wmul@product
 16035  004B70  CFF4 F065          	movff	prodh,___wmul@product+1
 16036  004B74  5160               	movf	___wmul@multiplier& (0+255),w,b
 16037  004B76  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16038  004B78  50F3               	movf	prodl,w,c
 16039  004B7A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 16040  004B7C  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16041  004B7E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 16042  004B80  50F3               	movf	prodl,w,c
 16043  004B82  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 16044                           
 16045                           ; BSR set to: 0
 16046  004B84  C064  F060         	movff	___wmul@product,?___wmul
 16047  004B88  C065  F061         	movff	___wmul@product+1,?___wmul+1
 16048  004B8C  0012               	return	
 16049  004B8E                     __end_of___wmul:
 16050                           	opt stack 0
 16051                           tosu	equ	0xFFF
 16052                           tosh	equ	0xFFE
 16053                           tosl	equ	0xFFD
 16054                           pclath	equ	0xFFA
 16055                           tblptru	equ	0xFF8
 16056                           tblptrh	equ	0xFF7
 16057                           tblptrl	equ	0xFF6
 16058                           tablat	equ	0xFF5
 16059                           prodh	equ	0xFF4
 16060                           prodl	equ	0xFF3
 16061                           intcon	equ	0xFF2
 16062                           intcon2	equ	0xFF1
 16063                           intcon3	equ	0xFF0
 16064                           indf0	equ	0xFEF
 16065                           postinc0	equ	0xFEE
 16066                           fsr0h	equ	0xFEA
 16067                           fsr0l	equ	0xFE9
 16068                           wreg	equ	0xFE8
 16069                           indf1	equ	0xFE7
 16070                           postinc1	equ	0xFE6
 16071                           postdec1	equ	0xFE5
 16072                           plusw1	equ	0xFE3
 16073                           fsr1h	equ	0xFE2
 16074                           fsr1l	equ	0xFE1
 16075                           indf2	equ	0xFDF
 16076                           postinc2	equ	0xFDE
 16077                           postdec2	equ	0xFDD
 16078                           plusw2	equ	0xFDB
 16079                           fsr2h	equ	0xFDA
 16080                           fsr2l	equ	0xFD9
 16081                           status	equ	0xFD8
 16082                           
 16083 ;; *************** function ___lldiv *****************
 16084 ;; Defined at:
 16085 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 16086 ;; Parameters:    Size  Location     Type
 16087 ;;  dividend        4    0[BANK0 ] unsigned long 
 16088 ;;  divisor         4    4[BANK0 ] unsigned long 
 16089 ;; Auto vars:     Size  Location     Type
 16090 ;;  quotient        4    8[BANK0 ] unsigned long 
 16091 ;;  counter         1   12[BANK0 ] unsigned char 
 16092 ;; Return value:  Size  Location     Type
 16093 ;;                  4    0[BANK0 ] unsigned long 
 16094 ;; Registers used:
 16095 ;;		wreg, status,2, status,0
 16096 ;; Tracked objects:
 16097 ;;		On entry : 0/0
 16098 ;;		On exit  : 0/0
 16099 ;;		Unchanged: 0/0
 16100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16101 ;;      Params:         0       8       0       0       0       0       0       0       0
 16102 ;;      Locals:         0       5       0       0       0       0       0       0       0
 16103 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16104 ;;      Totals:         0      13       0       0       0       0       0       0       0
 16105 ;;Total ram usage:       13 bytes
 16106 ;; Hardware stack levels used:    1
 16107 ;; Hardware stack levels required when called:    3
 16108 ;; This function calls:
 16109 ;;		Nothing
 16110 ;; This function is called by:
 16111 ;;		_auto_mount
 16112 ;;		_f_lseek
 16113 ;;		_fprintf
 16114 ;; This function uses a non-reentrant model
 16115 ;;
 16116                           
 16117                           	psect	text57
 16118  00429E                     __ptext57:
 16119                           	opt stack 0
 16120  00429E                     ___lldiv:
 16121                           	opt stack 23
 16122                           
 16123                           ; BSR set to: 0
 16124                           ;incstack = 0
 16125  00429E  0E00               	movlw	0
 16126  0042A0  0100               	movlb	0	; () banked
 16127  0042A2  6F68               	movwf	___lldiv@quotient& (0+255),b
 16128  0042A4  0E00               	movlw	0
 16129  0042A6  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 16130  0042A8  0E00               	movlw	0
 16131  0042AA  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 16132  0042AC  0E00               	movlw	0
 16133  0042AE  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 16134                           
 16135                           ; BSR set to: 0
 16136  0042B0  5164               	movf	___lldiv@divisor& (0+255),w,b
 16137  0042B2  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 16138  0042B4  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 16139  0042B6  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 16140  0042B8  B4D8               	btfsc	status,2,c
 16141  0042BA  D02A               	goto	l1798
 16142                           
 16143                           ; BSR set to: 0
 16144  0042BC  0E01               	movlw	1
 16145  0042BE  6F6C               	movwf	___lldiv@counter& (0+255),b
 16146  0042C0  D006               	goto	l1793
 16147  0042C2                     
 16148                           ; BSR set to: 0
 16149                           
 16150                           ; BSR set to: 0
 16151  0042C2  90D8               	bcf	status,0,c
 16152  0042C4  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 16153  0042C6  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 16154  0042C8  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 16155  0042CA  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 16156  0042CC  2B6C               	incf	___lldiv@counter& (0+255),f,b
 16157  0042CE                     l1793:
 16158                           
 16159                           ; BSR set to: 0
 16160                           
 16161                           ; BSR set to: 0
 16162  0042CE  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 16163  0042D0  D7F8               	goto	l1794
 16164  0042D2                     u12470:
 16165                           
 16166                           ; BSR set to: 0
 16167                           
 16168                           ; BSR set to: 0
 16169                           
 16170                           ; BSR set to: 0
 16171  0042D2  90D8               	bcf	status,0,c
 16172  0042D4  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 16173  0042D6  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 16174  0042D8  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 16175  0042DA  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 16176                           
 16177                           ; BSR set to: 0
 16178  0042DC  5164               	movf	___lldiv@divisor& (0+255),w,b
 16179  0042DE  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 16180  0042E0  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16181  0042E2  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 16182  0042E4  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16183  0042E6  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 16184  0042E8  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16185  0042EA  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 16186  0042EC  A0D8               	btfss	status,0,c
 16187  0042EE  D009               	goto	l1797
 16188                           
 16189                           ; BSR set to: 0
 16190  0042F0  5164               	movf	___lldiv@divisor& (0+255),w,b
 16191  0042F2  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 16192  0042F4  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16193  0042F6  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 16194  0042F8  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16195  0042FA  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 16196  0042FC  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16197  0042FE  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 16198                           
 16199                           ; BSR set to: 0
 16200  004300  8168               	bsf	___lldiv@quotient& (0+255),0,b
 16201  004302                     l1797:
 16202                           
 16203                           ; BSR set to: 0
 16204                           
 16205                           ; BSR set to: 0
 16206  004302  90D8               	bcf	status,0,c
 16207  004304  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 16208  004306  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 16209  004308  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 16210  00430A  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 16211                           
 16212                           ; BSR set to: 0
 16213  00430C  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 16214  00430E  D7E1               	goto	u12470
 16215  004310                     l1798:
 16216                           
 16217                           ; BSR set to: 0
 16218                           
 16219                           ; BSR set to: 0
 16220  004310  C068  F060         	movff	___lldiv@quotient,?___lldiv
 16221  004314  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 16222  004318  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 16223  00431C  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 16224                           
 16225                           ; BSR set to: 0
 16226  004320  0012               	return		;funcret
 16227  004322                     __end_of___lldiv:
 16228                           	opt stack 0
 16229                           tosu	equ	0xFFF
 16230                           tosh	equ	0xFFE
 16231                           tosl	equ	0xFFD
 16232                           pclath	equ	0xFFA
 16233                           tblptru	equ	0xFF8
 16234                           tblptrh	equ	0xFF7
 16235                           tblptrl	equ	0xFF6
 16236                           tablat	equ	0xFF5
 16237                           prodh	equ	0xFF4
 16238                           prodl	equ	0xFF3
 16239                           intcon	equ	0xFF2
 16240                           intcon2	equ	0xFF1
 16241                           intcon3	equ	0xFF0
 16242                           indf0	equ	0xFEF
 16243                           postinc0	equ	0xFEE
 16244                           fsr0h	equ	0xFEA
 16245                           fsr0l	equ	0xFE9
 16246                           wreg	equ	0xFE8
 16247                           indf1	equ	0xFE7
 16248                           postinc1	equ	0xFE6
 16249                           postdec1	equ	0xFE5
 16250                           plusw1	equ	0xFE3
 16251                           fsr1h	equ	0xFE2
 16252                           fsr1l	equ	0xFE1
 16253                           indf2	equ	0xFDF
 16254                           postinc2	equ	0xFDE
 16255                           postdec2	equ	0xFDD
 16256                           plusw2	equ	0xFDB
 16257                           fsr2h	equ	0xFDA
 16258                           fsr2l	equ	0xFD9
 16259                           status	equ	0xFD8
 16260                           
 16261 ;; *************** function _f_close *****************
 16262 ;; Defined at:
 16263 ;;		line 1108 in file "bibliotecas/tff.c"
 16264 ;; Parameters:    Size  Location     Type
 16265 ;;  fp              2   75[BANK0 ] PTR struct _FIL
 16266 ;;		 -> fil(28), 
 16267 ;; Auto vars:     Size  Location     Type
 16268 ;;  res             1   77[BANK0 ] enum E155
 16269 ;; Return value:  Size  Location     Type
 16270 ;;                  1    wreg      enum E3974
 16271 ;; Registers used:
 16272 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16273 ;; Tracked objects:
 16274 ;;		On entry : 0/0
 16275 ;;		On exit  : 0/0
 16276 ;;		Unchanged: 0/0
 16277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16278 ;;      Params:         0       2       0       0       0       0       0       0       0
 16279 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16280 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16281 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16282 ;;Total ram usage:        3 bytes
 16283 ;; Hardware stack levels used:    1
 16284 ;; Hardware stack levels required when called:   11
 16285 ;; This function calls:
 16286 ;;		_f_sync
 16287 ;; This function is called by:
 16288 ;;		_escrita_sdcard
 16289 ;;		_sdcard_init
 16290 ;;		_leitura_sdcard
 16291 ;; This function uses a non-reentrant model
 16292 ;;
 16293                           
 16294                           	psect	text58
 16295  004AE4                     __ptext58:
 16296                           	opt stack 0
 16297  004AE4                     _f_close:
 16298                           	opt stack 16
 16299                           
 16300                           ;tff.c: 1112: FRESULT res;
 16301                           ;tff.c: 1116: res = f_sync(fp);
 16302                           
 16303                           ; BSR set to: 0
 16304                           ;incstack = 0
 16305  004AE4  C0AB  F0A2         	movff	f_close@fp,f_sync@fp
 16306  004AE8  C0AC  F0A3         	movff	f_close@fp+1,f_sync@fp+1
 16307  004AEC  EC7F  F01B         	call	_f_sync	;wreg free
 16308  004AF0  0100               	movlb	0	; () banked
 16309  004AF2  6FAD               	movwf	f_close@res& (0+255),b
 16310                           
 16311                           ; BSR set to: 0
 16312                           ;tff.c: 1120: if (res == FR_OK) fp->fs = (0);
 16313  004AF4  51AD               	movf	f_close@res& (0+255),w,b
 16314  004AF6  A4D8               	btfss	status,2,c
 16315  004AF8  0012               	return	
 16316                           
 16317                           ; BSR set to: 0
 16318  004AFA  EE20 F004          	lfsr	2,4
 16319  004AFE  51AB               	movf	f_close@fp& (0+255),w,b
 16320  004B00  26D9               	addwf	fsr2l,f,c
 16321  004B02  51AC               	movf	(f_close@fp+1)& (0+255),w,b
 16322  004B04  22DA               	addwfc	fsr2h,f,c
 16323  004B06  0E00               	movlw	0
 16324  004B08  6EDE               	movwf	postinc2,c
 16325  004B0A  0E00               	movlw	0
 16326  004B0C  6EDD               	movwf	postdec2,c
 16327                           
 16328                           ; BSR set to: 0
 16329  004B0E  0012               	return	
 16330  004B10                     __end_of_f_close:
 16331                           	opt stack 0
 16332                           tosu	equ	0xFFF
 16333                           tosh	equ	0xFFE
 16334                           tosl	equ	0xFFD
 16335                           pclath	equ	0xFFA
 16336                           tblptru	equ	0xFF8
 16337                           tblptrh	equ	0xFF7
 16338                           tblptrl	equ	0xFF6
 16339                           tablat	equ	0xFF5
 16340                           prodh	equ	0xFF4
 16341                           prodl	equ	0xFF3
 16342                           intcon	equ	0xFF2
 16343                           intcon2	equ	0xFF1
 16344                           intcon3	equ	0xFF0
 16345                           indf0	equ	0xFEF
 16346                           postinc0	equ	0xFEE
 16347                           fsr0h	equ	0xFEA
 16348                           fsr0l	equ	0xFE9
 16349                           wreg	equ	0xFE8
 16350                           indf1	equ	0xFE7
 16351                           postinc1	equ	0xFE6
 16352                           postdec1	equ	0xFE5
 16353                           plusw1	equ	0xFE3
 16354                           fsr1h	equ	0xFE2
 16355                           fsr1l	equ	0xFE1
 16356                           indf2	equ	0xFDF
 16357                           postinc2	equ	0xFDE
 16358                           postdec2	equ	0xFDD
 16359                           plusw2	equ	0xFDB
 16360                           fsr2h	equ	0xFDA
 16361                           fsr2l	equ	0xFD9
 16362                           status	equ	0xFD8
 16363                           
 16364 ;; *************** function _f_sync *****************
 16365 ;; Defined at:
 16366 ;;		line 1069 in file "bibliotecas/tff.c"
 16367 ;; Parameters:    Size  Location     Type
 16368 ;;  fp              2   66[BANK0 ] PTR struct _FIL
 16369 ;;		 -> fil(28), 
 16370 ;; Auto vars:     Size  Location     Type
 16371 ;;  tim             4   68[BANK0 ] unsigned long 
 16372 ;;  dir             2   73[BANK0 ] PTR unsigned char 
 16373 ;;		 -> NULL(0), fs(544), 
 16374 ;;  res             1   72[BANK0 ] enum E155
 16375 ;; Return value:  Size  Location     Type
 16376 ;;                  1    wreg      enum E155
 16377 ;; Registers used:
 16378 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16379 ;; Tracked objects:
 16380 ;;		On entry : 0/0
 16381 ;;		On exit  : 0/0
 16382 ;;		Unchanged: 0/0
 16383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16384 ;;      Params:         0       2       0       0       0       0       0       0       0
 16385 ;;      Locals:         0       7       0       0       0       0       0       0       0
 16386 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16387 ;;      Totals:         0       9       0       0       0       0       0       0       0
 16388 ;;Total ram usage:        9 bytes
 16389 ;; Hardware stack levels used:    1
 16390 ;; Hardware stack levels required when called:   10
 16391 ;; This function calls:
 16392 ;;		_get_fattime
 16393 ;;		_move_window
 16394 ;;		_sync
 16395 ;;		_validate
 16396 ;; This function is called by:
 16397 ;;		_f_close
 16398 ;; This function uses a non-reentrant model
 16399 ;;
 16400                           
 16401                           	psect	text59
 16402  0036FE                     __ptext59:
 16403                           	opt stack 0
 16404  0036FE                     _f_sync:
 16405                           	opt stack 16
 16406                           
 16407                           ;tff.c: 1073: FRESULT res;
 16408                           ;tff.c: 1074: DWORD tim;
 16409                           ;tff.c: 1075: BYTE *dir;
 16410                           ;tff.c: 1078: res = validate(fp->fs, fp->id);
 16411                           
 16412                           ; BSR set to: 0
 16413                           ;incstack = 0
 16414  0036FE  0100               	movlb	0	; () banked
 16415  003700  EE20 F004          	lfsr	2,4
 16416  003704  51A2               	movf	f_sync@fp& (0+255),w,b
 16417  003706  26D9               	addwf	fsr2l,f,c
 16418  003708  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16419  00370A  22DA               	addwfc	fsr2h,f,c
 16420  00370C  CFDE F066          	movff	postinc2,validate@fs
 16421  003710  CFDD F067          	movff	postdec2,validate@fs+1
 16422  003714  C0A2  FFD9         	movff	f_sync@fp,fsr2l
 16423  003718  C0A3  FFDA         	movff	f_sync@fp+1,fsr2h
 16424  00371C  CFDE F068          	movff	postinc2,validate@id
 16425  003720  CFDD F069          	movff	postdec2,validate@id+1
 16426  003724  ECD5  F023         	call	_validate	;wreg free
 16427  003728  0100               	movlb	0	; () banked
 16428  00372A  6FA8               	movwf	f_sync@res& (0+255),b
 16429                           
 16430                           ; BSR set to: 0
 16431                           ;tff.c: 1079: if (res == FR_OK) {
 16432  00372C  51A8               	movf	f_sync@res& (0+255),w,b
 16433  00372E  A4D8               	btfss	status,2,c
 16434  003730  D079               	goto	l1248
 16435                           
 16436                           ; BSR set to: 0
 16437                           ;tff.c: 1080: if (fp->flag & 0x20) {
 16438  003732  EE20 F002          	lfsr	2,2
 16439  003736  51A2               	movf	f_sync@fp& (0+255),w,b
 16440  003738  26D9               	addwf	fsr2l,f,c
 16441  00373A  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16442  00373C  22DA               	addwfc	fsr2h,f,c
 16443  00373E  AADF               	btfss	indf2,5,c
 16444  003740  D071               	goto	l1248
 16445                           
 16446                           ; BSR set to: 0
 16447                           ;tff.c: 1082: if (!move_window(fp->dir_sect))
 16448  003742  EE20 F016          	lfsr	2,22
 16449  003746  51A2               	movf	f_sync@fp& (0+255),w,b
 16450  003748  26D9               	addwf	fsr2l,f,c
 16451  00374A  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16452  00374C  22DA               	addwfc	fsr2h,f,c
 16453  00374E  CFDE F08B          	movff	postinc2,move_window@sector
 16454  003752  CFDE F08C          	movff	postinc2,move_window@sector+1
 16455  003756  CFDE F08D          	movff	postinc2,move_window@sector+2
 16456  00375A  CFDE F08E          	movff	postinc2,move_window@sector+3
 16457  00375E  ECAD  F016         	call	_move_window	;wreg free
 16458  003762  0900               	iorlw	0
 16459  003764  A4D8               	btfss	status,2,c
 16460  003766  D002               	goto	l1249
 16461                           
 16462                           ;tff.c: 1083: return FR_RW_ERROR;
 16463  003768  0E08               	movlw	8
 16464  00376A  0012               	return	
 16465  00376C                     l1249:
 16466                           
 16467                           ;tff.c: 1084: dir = fp->dir_ptr;
 16468  00376C  0100               	movlb	0	; () banked
 16469  00376E  EE20 F01A          	lfsr	2,26
 16470  003772  51A2               	movf	f_sync@fp& (0+255),w,b
 16471  003774  26D9               	addwf	fsr2l,f,c
 16472  003776  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16473  003778  22DA               	addwfc	fsr2h,f,c
 16474  00377A  CFDE F0A9          	movff	postinc2,f_sync@dir
 16475  00377E  CFDD F0AA          	movff	postdec2,f_sync@dir+1
 16476                           
 16477                           ;tff.c: 1085: dir[11] |= 0x20;
 16478  003782  EE20 F00B          	lfsr	2,11
 16479  003786  51A9               	movf	f_sync@dir& (0+255),w,b
 16480  003788  26D9               	addwf	fsr2l,f,c
 16481  00378A  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 16482  00378C  22DA               	addwfc	fsr2h,f,c
 16483  00378E  0E00               	movlw	0
 16484  003790  8ADB               	bsf	plusw2,5,c
 16485                           
 16486                           ; BSR set to: 0
 16487                           ;tff.c: 1086: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 16488  003792  EE20 F00A          	lfsr	2,10
 16489  003796  51A2               	movf	f_sync@fp& (0+255),w,b
 16490  003798  26D9               	addwf	fsr2l,f,c
 16491  00379A  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16492  00379C  22DA               	addwfc	fsr2h,f,c
 16493  00379E  EE10 F01C          	lfsr	1,28
 16494  0037A2  51A9               	movf	f_sync@dir& (0+255),w,b
 16495  0037A4  26E1               	addwf	fsr1l,f,c
 16496  0037A6  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 16497  0037A8  22E2               	addwfc	fsr1h,f,c
 16498  0037AA  CFDE FFE6          	movff	postinc2,postinc1
 16499  0037AE  CFDE FFE6          	movff	postinc2,postinc1
 16500  0037B2  CFDE FFE6          	movff	postinc2,postinc1
 16501  0037B6  CFDE FFE6          	movff	postinc2,postinc1
 16502                           
 16503                           ; BSR set to: 0
 16504                           ;tff.c: 1087: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 16505  0037BA  EE20 F00E          	lfsr	2,14
 16506  0037BE  51A2               	movf	f_sync@fp& (0+255),w,b
 16507  0037C0  26D9               	addwf	fsr2l,f,c
 16508  0037C2  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16509  0037C4  22DA               	addwfc	fsr2h,f,c
 16510  0037C6  EE10 F01A          	lfsr	1,26
 16511  0037CA  51A9               	movf	f_sync@dir& (0+255),w,b
 16512  0037CC  26E1               	addwf	fsr1l,f,c
 16513  0037CE  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 16514  0037D0  22E2               	addwfc	fsr1h,f,c
 16515  0037D2  CFDE FFE6          	movff	postinc2,postinc1
 16516  0037D6  CFDD FFE5          	movff	postdec2,postdec1
 16517                           
 16518                           ; BSR set to: 0
 16519                           ;tff.c: 1091: tim = get_fattime();
 16520  0037DA  EC14  F01C         	call	_get_fattime	;wreg free
 16521  0037DE  C060  F0A4         	movff	?_get_fattime,f_sync@tim
 16522  0037E2  C061  F0A5         	movff	?_get_fattime+1,f_sync@tim+1
 16523  0037E6  C062  F0A6         	movff	?_get_fattime+2,f_sync@tim+2
 16524  0037EA  C063  F0A7         	movff	?_get_fattime+3,f_sync@tim+3
 16525                           
 16526                           ;tff.c: 1092: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 16527  0037EE  0100               	movlb	0	; () banked
 16528  0037F0  EE20 F016          	lfsr	2,22
 16529  0037F4  51A9               	movf	f_sync@dir& (0+255),w,b
 16530  0037F6  26D9               	addwf	fsr2l,f,c
 16531  0037F8  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 16532  0037FA  22DA               	addwfc	fsr2h,f,c
 16533  0037FC  C0A4  FFDE         	movff	f_sync@tim,postinc2
 16534  003800  C0A5  FFDE         	movff	f_sync@tim+1,postinc2
 16535  003804  C0A6  FFDE         	movff	f_sync@tim+2,postinc2
 16536  003808  C0A7  FFDE         	movff	f_sync@tim+3,postinc2
 16537                           
 16538                           ; BSR set to: 0
 16539                           ;tff.c: 1093: fp->flag &= (BYTE)~0x20;
 16540  00380C  EE20 F002          	lfsr	2,2
 16541  003810  51A2               	movf	f_sync@fp& (0+255),w,b
 16542  003812  26D9               	addwf	fsr2l,f,c
 16543  003814  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 16544  003816  22DA               	addwfc	fsr2h,f,c
 16545  003818  0EDF               	movlw	223
 16546  00381A  16DF               	andwf	indf2,f,c
 16547                           
 16548                           ; BSR set to: 0
 16549                           ;tff.c: 1094: res = sync();
 16550  00381C  ECD7  F022         	call	_sync	;wreg free
 16551  003820  0100               	movlb	0	; () banked
 16552  003822  6FA8               	movwf	f_sync@res& (0+255),b
 16553  003824                     l1248:
 16554                           
 16555                           ; BSR set to: 0
 16556                           ;tff.c: 1095: }
 16557                           ;tff.c: 1096: }
 16558                           ;tff.c: 1097: return res;
 16559                           
 16560                           ; BSR set to: 0
 16561                           
 16562                           ; BSR set to: 0
 16563  003824  51A8               	movf	f_sync@res& (0+255),w,b
 16564  003826  0012               	return	
 16565  003828                     __end_of_f_sync:
 16566                           	opt stack 0
 16567                           tosu	equ	0xFFF
 16568                           tosh	equ	0xFFE
 16569                           tosl	equ	0xFFD
 16570                           pclath	equ	0xFFA
 16571                           tblptru	equ	0xFF8
 16572                           tblptrh	equ	0xFF7
 16573                           tblptrl	equ	0xFF6
 16574                           tablat	equ	0xFF5
 16575                           prodh	equ	0xFF4
 16576                           prodl	equ	0xFF3
 16577                           intcon	equ	0xFF2
 16578                           intcon2	equ	0xFF1
 16579                           intcon3	equ	0xFF0
 16580                           indf0	equ	0xFEF
 16581                           postinc0	equ	0xFEE
 16582                           fsr0h	equ	0xFEA
 16583                           fsr0l	equ	0xFE9
 16584                           wreg	equ	0xFE8
 16585                           indf1	equ	0xFE7
 16586                           postinc1	equ	0xFE6
 16587                           postdec1	equ	0xFE5
 16588                           plusw1	equ	0xFE3
 16589                           fsr1h	equ	0xFE2
 16590                           fsr1l	equ	0xFE1
 16591                           indf2	equ	0xFDF
 16592                           postinc2	equ	0xFDE
 16593                           postdec2	equ	0xFDD
 16594                           plusw2	equ	0xFDB
 16595                           fsr2h	equ	0xFDA
 16596                           fsr2l	equ	0xFD9
 16597                           status	equ	0xFD8
 16598                           
 16599 ;; *************** function _validate *****************
 16600 ;; Defined at:
 16601 ;;		line 766 in file "bibliotecas/tff.c"
 16602 ;; Parameters:    Size  Location     Type
 16603 ;;  fs              2    6[BANK0 ] PTR const struct _FATFS
 16604 ;;		 -> NULL(0), fs(544), 
 16605 ;;  id              2    8[BANK0 ] unsigned short 
 16606 ;; Auto vars:     Size  Location     Type
 16607 ;;		None
 16608 ;; Return value:  Size  Location     Type
 16609 ;;                  1    wreg      enum E155
 16610 ;; Registers used:
 16611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16612 ;; Tracked objects:
 16613 ;;		On entry : 0/0
 16614 ;;		On exit  : 0/0
 16615 ;;		Unchanged: 0/0
 16616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16617 ;;      Params:         0       4       0       0       0       0       0       0       0
 16618 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16619 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16620 ;;      Totals:         0       6       0       0       0       0       0       0       0
 16621 ;;Total ram usage:        6 bytes
 16622 ;; Hardware stack levels used:    1
 16623 ;; Hardware stack levels required when called:    5
 16624 ;; This function calls:
 16625 ;;		_disk_status
 16626 ;; This function is called by:
 16627 ;;		_f_write
 16628 ;;		_f_sync
 16629 ;;		_f_lseek
 16630 ;;		_f_read
 16631 ;;		_f_readdir
 16632 ;; This function uses a non-reentrant model
 16633 ;;
 16634                           
 16635                           	psect	text60
 16636  0047AA                     __ptext60:
 16637                           	opt stack 0
 16638  0047AA                     _validate:
 16639                           	opt stack 18
 16640                           
 16641                           ;tff.c: 771: if (!fs || !fs->fs_type || fs->id != id)
 16642                           
 16643                           ;incstack = 0
 16644  0047AA  0100               	movlb	0	; () banked
 16645  0047AC  5166               	movf	validate@fs& (0+255),w,b
 16646  0047AE  1167               	iorwf	(validate@fs+1)& (0+255),w,b
 16647  0047B0  B4D8               	btfsc	status,2,c
 16648  0047B2  D014               	goto	u11370
 16649                           
 16650                           ; BSR set to: 0
 16651  0047B4  EE20 F01C          	lfsr	2,28
 16652  0047B8  5166               	movf	validate@fs& (0+255),w,b
 16653  0047BA  26D9               	addwf	fsr2l,f,c
 16654  0047BC  5167               	movf	(validate@fs+1)& (0+255),w,b
 16655  0047BE  22DA               	addwfc	fsr2h,f,c
 16656  0047C0  50DF               	movf	indf2,w,c
 16657  0047C2  B4D8               	btfsc	status,2,c
 16658  0047C4  D00B               	goto	u11370
 16659                           
 16660                           ; BSR set to: 0
 16661  0047C6  C066  FFD9         	movff	validate@fs,fsr2l
 16662  0047CA  C067  FFDA         	movff	validate@fs+1,fsr2h
 16663  0047CE  5168               	movf	validate@id& (0+255),w,b
 16664  0047D0  18DE               	xorwf	postinc2,w,c
 16665  0047D2  E104               	bnz	l9411
 16666  0047D4  5169               	movf	(validate@id+1)& (0+255),w,b
 16667  0047D6  18DE               	xorwf	postinc2,w,c
 16668  0047D8  B4D8               	btfsc	status,2,c
 16669  0047DA  D002               	goto	l1152
 16670  0047DC                     u11370:
 16671  0047DC                     l9411:
 16672                           
 16673                           ; BSR set to: 0
 16674                           ;tff.c: 772: return FR_INVALID_OBJECT;
 16675  0047DC  0E0C               	movlw	12
 16676                           
 16677                           ; BSR set to: 0
 16678  0047DE  0012               	return	
 16679  0047E0                     l1152:
 16680                           
 16681                           ; BSR set to: 0
 16682                           ;tff.c: 773: if (disk_status(0) & 0x01)
 16683                           
 16684                           ; BSR set to: 0
 16685  0047E0  0E00               	movlw	0
 16686  0047E2  EC44  F024         	call	_disk_status
 16687  0047E6  0100               	movlb	0	; () banked
 16688  0047E8  6F6A               	movwf	??_validate& (0+255),b
 16689  0047EA  A16A               	btfss	??_validate& (0+255),0,b
 16690  0047EC  D002               	goto	l1156
 16691                           
 16692                           ; BSR set to: 0
 16693                           ;tff.c: 774: return FR_NOT_READY;
 16694  0047EE  0E01               	movlw	1
 16695                           
 16696                           ; BSR set to: 0
 16697  0047F0  0012               	return	
 16698  0047F2                     l1156:
 16699                           
 16700                           ; BSR set to: 0
 16701                           ;tff.c: 776: return FR_OK;
 16702                           
 16703                           ; BSR set to: 0
 16704  0047F2  0E00               	movlw	0
 16705  0047F4  0012               	return	
 16706  0047F6                     __end_of_validate:
 16707                           	opt stack 0
 16708                           tosu	equ	0xFFF
 16709                           tosh	equ	0xFFE
 16710                           tosl	equ	0xFFD
 16711                           pclath	equ	0xFFA
 16712                           tblptru	equ	0xFF8
 16713                           tblptrh	equ	0xFF7
 16714                           tblptrl	equ	0xFF6
 16715                           tablat	equ	0xFF5
 16716                           prodh	equ	0xFF4
 16717                           prodl	equ	0xFF3
 16718                           intcon	equ	0xFF2
 16719                           intcon2	equ	0xFF1
 16720                           intcon3	equ	0xFF0
 16721                           indf0	equ	0xFEF
 16722                           postinc0	equ	0xFEE
 16723                           fsr0h	equ	0xFEA
 16724                           fsr0l	equ	0xFE9
 16725                           wreg	equ	0xFE8
 16726                           indf1	equ	0xFE7
 16727                           postinc1	equ	0xFE6
 16728                           postdec1	equ	0xFE5
 16729                           plusw1	equ	0xFE3
 16730                           fsr1h	equ	0xFE2
 16731                           fsr1l	equ	0xFE1
 16732                           indf2	equ	0xFDF
 16733                           postinc2	equ	0xFDE
 16734                           postdec2	equ	0xFDD
 16735                           plusw2	equ	0xFDB
 16736                           fsr2h	equ	0xFDA
 16737                           fsr2l	equ	0xFD9
 16738                           status	equ	0xFD8
 16739                           
 16740 ;; *************** function _disk_status *****************
 16741 ;; Defined at:
 16742 ;;		line 27 in file "bibliotecas/diskio.c"
 16743 ;; Parameters:    Size  Location     Type
 16744 ;;  pdrv            1    wreg     unsigned char 
 16745 ;; Auto vars:     Size  Location     Type
 16746 ;;  pdrv            1    4[BANK0 ] unsigned char 
 16747 ;;  result          2    2[BANK0 ] int 
 16748 ;;  stat            1    5[BANK0 ] unsigned char 
 16749 ;; Return value:  Size  Location     Type
 16750 ;;                  1    wreg      unsigned char 
 16751 ;; Registers used:
 16752 ;;		wreg, status,2, status,0, cstack
 16753 ;; Tracked objects:
 16754 ;;		On entry : 0/0
 16755 ;;		On exit  : 0/0
 16756 ;;		Unchanged: 0/0
 16757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16758 ;;      Params:         0       0       0       0       0       0       0       0       0
 16759 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16760 ;;      Temps:          1       0       0       0       0       0       0       0       0
 16761 ;;      Totals:         1       4       0       0       0       0       0       0       0
 16762 ;;Total ram usage:        5 bytes
 16763 ;; Hardware stack levels used:    1
 16764 ;; Hardware stack levels required when called:    4
 16765 ;; This function calls:
 16766 ;;		_sdc_disk_status
 16767 ;; This function is called by:
 16768 ;;		_auto_mount
 16769 ;;		_validate
 16770 ;; This function uses a non-reentrant model
 16771 ;;
 16772                           
 16773                           	psect	text61
 16774  004888                     __ptext61:
 16775                           	opt stack 0
 16776  004888                     _disk_status:
 16777                           	opt stack 18
 16778                           
 16779                           ; BSR set to: 0
 16780                           ;incstack = 0
 16781                           ;disk_status@pdrv stored from wreg
 16782  004888  0100               	movlb	0	; () banked
 16783  00488A  6F64               	movwf	disk_status@pdrv& (0+255),b
 16784                           
 16785                           ;diskio.c: 31: DSTATUS stat;
 16786                           ;diskio.c: 32: int result;
 16787                           ;diskio.c: 34: switch (pdrv) {
 16788  00488C  D014               	goto	l434
 16789  00488E                     
 16790                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 16791  00488E  0100               	movlb	0	; () banked
 16792  004890  5164               	movf	disk_status@pdrv& (0+255),w,b
 16793  004892  EC16  F026         	call	_sdc_disk_status
 16794  004896  0100               	movlb	0	; () banked
 16795  004898  6F65               	movwf	disk_status@stat& (0+255),b
 16796                           
 16797                           ; BSR set to: 0
 16798                           ;diskio.c: 39: return stat;
 16799  00489A  5165               	movf	disk_status@stat& (0+255),w,b
 16800                           
 16801                           ; BSR set to: 0
 16802  00489C  0012               	return	
 16803  00489E                     
 16804                           ; BSR set to: 0
 16805                           ;diskio.c: 42: result = sdc_disk_status(pdrv);
 16806                           
 16807                           ; BSR set to: 0
 16808  00489E  5164               	movf	disk_status@pdrv& (0+255),w,b
 16809  0048A0  EC16  F026         	call	_sdc_disk_status
 16810  0048A4  6E21               	movwf	??_disk_status& (0+255),c
 16811  0048A6  5021               	movf	??_disk_status,w,c
 16812  0048A8  0100               	movlb	0	; () banked
 16813  0048AA  6F62               	movwf	disk_status@result& (0+255),b
 16814  0048AC  6B63               	clrf	(disk_status@result+1)& (0+255),b
 16815                           
 16816                           ; BSR set to: 0
 16817                           ;diskio.c: 44: return stat;
 16818  0048AE  5165               	movf	disk_status@stat& (0+255),w,b
 16819                           
 16820                           ; BSR set to: 0
 16821  0048B0  0012               	return	
 16822  0048B2                     
 16823                           ; BSR set to: 0
 16824                           ;diskio.c: 48: return stat;
 16825                           
 16826                           ; BSR set to: 0
 16827  0048B2  5165               	movf	disk_status@stat& (0+255),w,b
 16828                           
 16829                           ; BSR set to: 0
 16830  0048B4  0012               	return	
 16831  0048B6                     l434:
 16832                           
 16833                           ; BSR set to: 0
 16834  0048B6  0100               	movlb	0	; () banked
 16835  0048B8  5164               	movf	disk_status@pdrv& (0+255),w,b
 16836                           
 16837                           ; Switch size 1, requested type "space"
 16838                           ; Number of cases is 3, Range of values is 0 to 2
 16839                           ; switch strategies available:
 16840                           ; Name         Instructions Cycles
 16841                           ; simple_byte           10     6 (average)
 16842                           ;	Chosen strategy is simple_byte
 16843  0048BA  0A00               	xorlw	0	; case 0
 16844  0048BC  B4D8               	btfsc	status,2,c
 16845  0048BE  D7E7               	goto	l435
 16846  0048C0  0A01               	xorlw	1	; case 1
 16847  0048C2  B4D8               	btfsc	status,2,c
 16848  0048C4  D7EC               	goto	l437
 16849  0048C6  0A03               	xorlw	3	; case 2
 16850  0048C8  B4D8               	btfsc	status,2,c
 16851  0048CA  D7F3               	goto	l438
 16852                           
 16853                           ; BSR set to: 0
 16854                           ;diskio.c: 50: return 0x01;
 16855                           
 16856                           ; BSR set to: 0
 16857  0048CC  0E01               	movlw	1
 16858  0048CE  0012               	return	
 16859  0048D0                     __end_of_disk_status:
 16860                           	opt stack 0
 16861                           tosu	equ	0xFFF
 16862                           tosh	equ	0xFFE
 16863                           tosl	equ	0xFFD
 16864                           pclath	equ	0xFFA
 16865                           tblptru	equ	0xFF8
 16866                           tblptrh	equ	0xFF7
 16867                           tblptrl	equ	0xFF6
 16868                           tablat	equ	0xFF5
 16869                           prodh	equ	0xFF4
 16870                           prodl	equ	0xFF3
 16871                           intcon	equ	0xFF2
 16872                           intcon2	equ	0xFF1
 16873                           intcon3	equ	0xFF0
 16874                           indf0	equ	0xFEF
 16875                           postinc0	equ	0xFEE
 16876                           fsr0h	equ	0xFEA
 16877                           fsr0l	equ	0xFE9
 16878                           wreg	equ	0xFE8
 16879                           indf1	equ	0xFE7
 16880                           postinc1	equ	0xFE6
 16881                           postdec1	equ	0xFE5
 16882                           plusw1	equ	0xFE3
 16883                           fsr1h	equ	0xFE2
 16884                           fsr1l	equ	0xFE1
 16885                           indf2	equ	0xFDF
 16886                           postinc2	equ	0xFDE
 16887                           postdec2	equ	0xFDD
 16888                           plusw2	equ	0xFDB
 16889                           fsr2h	equ	0xFDA
 16890                           fsr2l	equ	0xFD9
 16891                           status	equ	0xFD8
 16892                           
 16893 ;; *************** function _sdc_disk_status *****************
 16894 ;; Defined at:
 16895 ;;		line 588 in file "bibliotecas/diskio.c"
 16896 ;; Parameters:    Size  Location     Type
 16897 ;;  pdrv            1    wreg     unsigned char 
 16898 ;; Auto vars:     Size  Location     Type
 16899 ;;  pdrv            1    1[BANK0 ] unsigned char 
 16900 ;;  stat            1    0[BANK0 ] unsigned char 
 16901 ;;  cont            1    0        unsigned char 
 16902 ;;  buff            1    0        unsigned char 
 16903 ;; Return value:  Size  Location     Type
 16904 ;;                  1    wreg      unsigned char 
 16905 ;; Registers used:
 16906 ;;		wreg, status,2
 16907 ;; Tracked objects:
 16908 ;;		On entry : 0/0
 16909 ;;		On exit  : 0/0
 16910 ;;		Unchanged: 0/0
 16911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16912 ;;      Params:         0       0       0       0       0       0       0       0       0
 16913 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16914 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16915 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16916 ;;Total ram usage:        2 bytes
 16917 ;; Hardware stack levels used:    1
 16918 ;; Hardware stack levels required when called:    3
 16919 ;; This function calls:
 16920 ;;		Nothing
 16921 ;; This function is called by:
 16922 ;;		_disk_status
 16923 ;; This function uses a non-reentrant model
 16924 ;;
 16925                           
 16926                           	psect	text62
 16927  004C2C                     __ptext62:
 16928                           	opt stack 0
 16929  004C2C                     _sdc_disk_status:
 16930                           	opt stack 18
 16931                           
 16932                           ; BSR set to: 0
 16933                           ;incstack = 0
 16934                           ;sdc_disk_status@pdrv stored from wreg
 16935  004C2C  0100               	movlb	0	; () banked
 16936  004C2E  6F61               	movwf	sdc_disk_status@pdrv& (0+255),b
 16937                           
 16938                           ;diskio.c: 590: DSTATUS stat = 0;
 16939  004C30  0E00               	movlw	0
 16940  004C32  0100               	movlb	0	; () banked
 16941  004C34  6F60               	movwf	sdc_disk_status@stat& (0+255),b
 16942                           
 16943                           ; BSR set to: 0
 16944                           ;diskio.c: 591: unsigned char buff, cont;
 16945                           ;diskio.c: 593: if (pdrv != 0) return 0x01;
 16946  004C36  5161               	movf	sdc_disk_status@pdrv& (0+255),w,b
 16947  004C38  B4D8               	btfsc	status,2,c
 16948  004C3A  D002               	goto	l560
 16949                           
 16950                           ; BSR set to: 0
 16951  004C3C  0E01               	movlw	1
 16952                           
 16953                           ; BSR set to: 0
 16954  004C3E  0012               	return	
 16955  004C40                     l560:
 16956                           
 16957                           ; BSR set to: 0
 16958                           ;diskio.c: 595: return FR_OK;
 16959                           
 16960                           ; BSR set to: 0
 16961  004C40  0E00               	movlw	0
 16962  004C42  0012               	return	
 16963  004C44                     __end_of_sdc_disk_status:
 16964                           	opt stack 0
 16965                           tosu	equ	0xFFF
 16966                           tosh	equ	0xFFE
 16967                           tosl	equ	0xFFD
 16968                           pclath	equ	0xFFA
 16969                           tblptru	equ	0xFF8
 16970                           tblptrh	equ	0xFF7
 16971                           tblptrl	equ	0xFF6
 16972                           tablat	equ	0xFF5
 16973                           prodh	equ	0xFF4
 16974                           prodl	equ	0xFF3
 16975                           intcon	equ	0xFF2
 16976                           intcon2	equ	0xFF1
 16977                           intcon3	equ	0xFF0
 16978                           indf0	equ	0xFEF
 16979                           postinc0	equ	0xFEE
 16980                           fsr0h	equ	0xFEA
 16981                           fsr0l	equ	0xFE9
 16982                           wreg	equ	0xFE8
 16983                           indf1	equ	0xFE7
 16984                           postinc1	equ	0xFE6
 16985                           postdec1	equ	0xFE5
 16986                           plusw1	equ	0xFE3
 16987                           fsr1h	equ	0xFE2
 16988                           fsr1l	equ	0xFE1
 16989                           indf2	equ	0xFDF
 16990                           postinc2	equ	0xFDE
 16991                           postdec2	equ	0xFDD
 16992                           plusw2	equ	0xFDB
 16993                           fsr2h	equ	0xFDA
 16994                           fsr2l	equ	0xFD9
 16995                           status	equ	0xFD8
 16996                           
 16997 ;; *************** function _sync *****************
 16998 ;; Defined at:
 16999 ;;		line 118 in file "bibliotecas/tff.c"
 17000 ;; Parameters:    Size  Location     Type
 17001 ;;		None
 17002 ;; Auto vars:     Size  Location     Type
 17003 ;;  fs              2   64[BANK0 ] PTR struct _FATFS
 17004 ;;		 -> NULL(0), fs(544), 
 17005 ;; Return value:  Size  Location     Type
 17006 ;;                  1    wreg      enum E155
 17007 ;; Registers used:
 17008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17009 ;; Tracked objects:
 17010 ;;		On entry : 0/0
 17011 ;;		On exit  : 0/0
 17012 ;;		Unchanged: 0/0
 17013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17014 ;;      Params:         0       0       0       0       0       0       0       0       0
 17015 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17016 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17017 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17018 ;;Total ram usage:        2 bytes
 17019 ;; Hardware stack levels used:    1
 17020 ;; Hardware stack levels required when called:    9
 17021 ;; This function calls:
 17022 ;;		_disk_ioctl
 17023 ;;		_move_window
 17024 ;; This function is called by:
 17025 ;;		_f_sync
 17026 ;; This function uses a non-reentrant model
 17027 ;;
 17028                           
 17029                           	psect	text63
 17030  0045AE                     __ptext63:
 17031                           	opt stack 0
 17032  0045AE                     _sync:
 17033                           	opt stack 16
 17034                           
 17035                           ;tff.c: 120: FATFS *fs = FatFs;
 17036                           
 17037                           ; BSR set to: 0
 17038                           ;incstack = 0
 17039  0045AE  C0FD  F0A0         	movff	_FatFs,sync@fs
 17040  0045B2  C0FE  F0A1         	movff	_FatFs+1,sync@fs+1
 17041                           
 17042                           ;tff.c: 123: fs->winflag = 1;
 17043  0045B6  0100               	movlb	0	; () banked
 17044  0045B8  EE20 F01F          	lfsr	2,31
 17045  0045BC  51A0               	movf	sync@fs& (0+255),w,b
 17046  0045BE  26D9               	addwf	fsr2l,f,c
 17047  0045C0  51A1               	movf	(sync@fs+1)& (0+255),w,b
 17048  0045C2  22DA               	addwfc	fsr2h,f,c
 17049  0045C4  0E01               	movlw	1
 17050  0045C6  6EDF               	movwf	indf2,c
 17051                           
 17052                           ; BSR set to: 0
 17053                           ;tff.c: 124: if (!move_window(0)) return FR_RW_ERROR;
 17054  0045C8  0E00               	movlw	0
 17055  0045CA  6F8B               	movwf	move_window@sector& (0+255),b
 17056  0045CC  0E00               	movlw	0
 17057  0045CE  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 17058  0045D0  0E00               	movlw	0
 17059  0045D2  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 17060  0045D4  0E00               	movlw	0
 17061  0045D6  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 17062  0045D8  ECAD  F016         	call	_move_window	;wreg free
 17063  0045DC  0900               	iorlw	0
 17064  0045DE  A4D8               	btfss	status,2,c
 17065  0045E0  D002               	goto	l931
 17066  0045E2  0E08               	movlw	8
 17067  0045E4  0012               	return	
 17068  0045E6                     l931:
 17069                           
 17070                           ;tff.c: 140: if (disk_ioctl(0, 0, (0)) != RES_OK)
 17071  0045E6  0E00               	movlw	0
 17072  0045E8  0100               	movlb	0	; () banked
 17073  0045EA  6F60               	movwf	disk_ioctl@cmd& (0+255),b
 17074  0045EC  0E00               	movlw	0
 17075  0045EE  6F61               	movwf	disk_ioctl@buff& (0+255),b
 17076  0045F0  0E00               	movlw	0
 17077  0045F2  6F62               	movwf	(disk_ioctl@buff+1)& (0+255),b
 17078  0045F4  0E00               	movlw	0
 17079  0045F6  EC88  F025         	call	_disk_ioctl
 17080  0045FA  0900               	iorlw	0
 17081  0045FC  B4D8               	btfsc	status,2,c
 17082  0045FE  D002               	goto	l933
 17083                           
 17084                           ;tff.c: 141: return FR_RW_ERROR;
 17085  004600  0E08               	movlw	8
 17086  004602  0012               	return	
 17087  004604                     l933:
 17088                           
 17089                           ;tff.c: 142: return FR_OK;
 17090  004604  0E00               	movlw	0
 17091  004606  0012               	return	
 17092  004608                     __end_of_sync:
 17093                           	opt stack 0
 17094                           tosu	equ	0xFFF
 17095                           tosh	equ	0xFFE
 17096                           tosl	equ	0xFFD
 17097                           pclath	equ	0xFFA
 17098                           tblptru	equ	0xFF8
 17099                           tblptrh	equ	0xFF7
 17100                           tblptrl	equ	0xFF6
 17101                           tablat	equ	0xFF5
 17102                           prodh	equ	0xFF4
 17103                           prodl	equ	0xFF3
 17104                           intcon	equ	0xFF2
 17105                           intcon2	equ	0xFF1
 17106                           intcon3	equ	0xFF0
 17107                           indf0	equ	0xFEF
 17108                           postinc0	equ	0xFEE
 17109                           fsr0h	equ	0xFEA
 17110                           fsr0l	equ	0xFE9
 17111                           wreg	equ	0xFE8
 17112                           indf1	equ	0xFE7
 17113                           postinc1	equ	0xFE6
 17114                           postdec1	equ	0xFE5
 17115                           plusw1	equ	0xFE3
 17116                           fsr1h	equ	0xFE2
 17117                           fsr1l	equ	0xFE1
 17118                           indf2	equ	0xFDF
 17119                           postinc2	equ	0xFDE
 17120                           postdec2	equ	0xFDD
 17121                           plusw2	equ	0xFDB
 17122                           fsr2h	equ	0xFDA
 17123                           fsr2l	equ	0xFD9
 17124                           status	equ	0xFD8
 17125                           
 17126 ;; *************** function _move_window *****************
 17127 ;; Defined at:
 17128 ;;		line 76 in file "bibliotecas/tff.c"
 17129 ;; Parameters:    Size  Location     Type
 17130 ;;  sector          4   43[BANK0 ] unsigned long 
 17131 ;; Auto vars:     Size  Location     Type
 17132 ;;  n               1   57[BANK0 ] unsigned char 
 17133 ;;  wsect           4   58[BANK0 ] unsigned long 
 17134 ;;  fs              2   62[BANK0 ] PTR struct _FATFS
 17135 ;;		 -> NULL(0), fs(544), 
 17136 ;; Return value:  Size  Location     Type
 17137 ;;                  1    wreg      enum E105
 17138 ;; Registers used:
 17139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17140 ;; Tracked objects:
 17141 ;;		On entry : 0/0
 17142 ;;		On exit  : 0/0
 17143 ;;		Unchanged: 0/0
 17144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17145 ;;      Params:         0       4       0       0       0       0       0       0       0
 17146 ;;      Locals:         0       7       0       0       0       0       0       0       0
 17147 ;;      Temps:          0      10       0       0       0       0       0       0       0
 17148 ;;      Totals:         0      21       0       0       0       0       0       0       0
 17149 ;;Total ram usage:       21 bytes
 17150 ;; Hardware stack levels used:    1
 17151 ;; Hardware stack levels required when called:    8
 17152 ;; This function calls:
 17153 ;;		_disk_read
 17154 ;;		_disk_write
 17155 ;; This function is called by:
 17156 ;;		_sync
 17157 ;;		_get_cluster
 17158 ;;		_put_cluster
 17159 ;;		_trace_path
 17160 ;;		_reserve_direntry
 17161 ;;		_f_open
 17162 ;;		_f_write
 17163 ;;		_f_sync
 17164 ;;		_f_read
 17165 ;;		_f_readdir
 17166 ;; This function uses a non-reentrant model
 17167 ;;
 17168                           
 17169                           	psect	text64
 17170  002D5A                     __ptext64:
 17171                           	opt stack 0
 17172  002D5A                     _move_window:
 17173                           	opt stack 15
 17174                           
 17175                           ;tff.c: 80: DWORD wsect;
 17176                           ;tff.c: 81: FATFS *fs = FatFs;
 17177                           
 17178                           ;incstack = 0
 17179  002D5A  C0FD  F09E         	movff	_FatFs,move_window@fs
 17180  002D5E  C0FE  F09F         	movff	_FatFs+1,move_window@fs+1
 17181                           
 17182                           ;tff.c: 84: wsect = fs->winsect;
 17183  002D62  0100               	movlb	0	; () banked
 17184  002D64  EE20 F004          	lfsr	2,4
 17185  002D68  519E               	movf	move_window@fs& (0+255),w,b
 17186  002D6A  26D9               	addwf	fsr2l,f,c
 17187  002D6C  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17188  002D6E  22DA               	addwfc	fsr2h,f,c
 17189  002D70  CFDE F09A          	movff	postinc2,move_window@wsect
 17190  002D74  CFDE F09B          	movff	postinc2,move_window@wsect+1
 17191  002D78  CFDE F09C          	movff	postinc2,move_window@wsect+2
 17192  002D7C  CFDE F09D          	movff	postinc2,move_window@wsect+3
 17193                           
 17194                           ; BSR set to: 0
 17195                           ;tff.c: 85: if (wsect != sector) {
 17196  002D80  518B               	movf	move_window@sector& (0+255),w,b
 17197  002D82  199A               	xorwf	move_window@wsect& (0+255),w,b
 17198  002D84  E10A               	bnz	u10850
 17199  002D86  518C               	movf	(move_window@sector+1)& (0+255),w,b
 17200  002D88  199B               	xorwf	(move_window@wsect+1)& (0+255),w,b
 17201  002D8A  E107               	bnz	u10850
 17202  002D8C  518D               	movf	(move_window@sector+2)& (0+255),w,b
 17203  002D8E  199C               	xorwf	(move_window@wsect+2)& (0+255),w,b
 17204  002D90  E104               	bnz	u10850
 17205  002D92  518E               	movf	(move_window@sector+3)& (0+255),w,b
 17206  002D94  199D               	xorwf	(move_window@wsect+3)& (0+255),w,b
 17207  002D96  B4D8               	btfsc	status,2,c
 17208  002D98  D0B9               	goto	l927
 17209  002D9A                     u10850:
 17210                           
 17211                           ; BSR set to: 0
 17212                           ;tff.c: 87: BYTE n;
 17213                           ;tff.c: 88: if (fs->winflag) {
 17214  002D9A  EE20 F01F          	lfsr	2,31
 17215  002D9E  519E               	movf	move_window@fs& (0+255),w,b
 17216  002DA0  26D9               	addwf	fsr2l,f,c
 17217  002DA2  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17218  002DA4  22DA               	addwfc	fsr2h,f,c
 17219  002DA6  50DF               	movf	indf2,w,c
 17220  002DA8  B4D8               	btfsc	status,2,c
 17221  002DAA  D083               	goto	u10900
 17222                           
 17223                           ; BSR set to: 0
 17224                           ;tff.c: 89: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 17225  002DAC  0E20               	movlw	32
 17226  002DAE  259E               	addwf	move_window@fs& (0+255),w,b
 17227  002DB0  6F7F               	movwf	disk_write@buff& (0+255),b
 17228  002DB2  0E00               	movlw	0
 17229  002DB4  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 17230  002DB6  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 17231  002DB8  C09A  F081         	movff	move_window@wsect,disk_write@sector
 17232  002DBC  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 17233  002DC0  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 17234  002DC4  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 17235  002DC8  0E01               	movlw	1
 17236  002DCA  6F85               	movwf	disk_write@count& (0+255),b
 17237  002DCC  0E00               	movlw	0
 17238  002DCE  EC86  F020         	call	_disk_write
 17239  002DD2  0900               	iorlw	0
 17240  002DD4  B4D8               	btfsc	status,2,c
 17241  002DD6  D002               	goto	l922
 17242                           
 17243                           ;tff.c: 90: return FALSE;
 17244  002DD8  0E00               	movlw	0
 17245  002DDA  0012               	return	
 17246  002DDC                     l922:
 17247                           
 17248                           ;tff.c: 91: fs->winflag = 0;
 17249  002DDC  0100               	movlb	0	; () banked
 17250  002DDE  EE20 F01F          	lfsr	2,31
 17251  002DE2  519E               	movf	move_window@fs& (0+255),w,b
 17252  002DE4  26D9               	addwf	fsr2l,f,c
 17253  002DE6  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17254  002DE8  22DA               	addwfc	fsr2h,f,c
 17255  002DEA  0E00               	movlw	0
 17256  002DEC  6EDF               	movwf	indf2,c
 17257                           
 17258                           ;tff.c: 92: if (wsect < (fs->fatbase + fs->sects_fat)) {
 17259  002DEE  EE20 F008          	lfsr	2,8
 17260  002DF2  519E               	movf	move_window@fs& (0+255),w,b
 17261  002DF4  26D9               	addwf	fsr2l,f,c
 17262  002DF6  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17263  002DF8  22DA               	addwfc	fsr2h,f,c
 17264  002DFA  CFDE F08F          	movff	postinc2,??_move_window
 17265  002DFE  CFDE F090          	movff	postinc2,??_move_window+1
 17266  002E02  CFDE F091          	movff	postinc2,??_move_window+2
 17267  002E06  CFDE F092          	movff	postinc2,??_move_window+3
 17268  002E0A  EE20 F014          	lfsr	2,20
 17269  002E0E  519E               	movf	move_window@fs& (0+255),w,b
 17270  002E10  26D9               	addwf	fsr2l,f,c
 17271  002E12  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17272  002E14  22DA               	addwfc	fsr2h,f,c
 17273  002E16  CFDE F093          	movff	postinc2,??_move_window+4
 17274  002E1A  CFDD F094          	movff	postdec2,??_move_window+5
 17275  002E1E  5193               	movf	(??_move_window+4)& (0+255),w,b
 17276  002E20  258F               	addwf	??_move_window& (0+255),w,b
 17277  002E22  6F95               	movwf	(??_move_window+6)& (0+255),b
 17278  002E24  5194               	movf	(??_move_window+5)& (0+255),w,b
 17279  002E26  2190               	addwfc	(??_move_window+1)& (0+255),w,b
 17280  002E28  6F96               	movwf	(??_move_window+7)& (0+255),b
 17281  002E2A  0E00               	movlw	0
 17282  002E2C  2191               	addwfc	(??_move_window+2)& (0+255),w,b
 17283  002E2E  6F97               	movwf	(??_move_window+8)& (0+255),b
 17284  002E30  0E00               	movlw	0
 17285  002E32  2192               	addwfc	(??_move_window+3)& (0+255),w,b
 17286  002E34  6F98               	movwf	(??_move_window+9)& (0+255),b
 17287  002E36  5195               	movf	(??_move_window+6)& (0+255),w,b
 17288  002E38  5D9A               	subwf	move_window@wsect& (0+255),w,b
 17289  002E3A  5196               	movf	(??_move_window+7)& (0+255),w,b
 17290  002E3C  599B               	subwfb	(move_window@wsect+1)& (0+255),w,b
 17291  002E3E  5197               	movf	(??_move_window+8)& (0+255),w,b
 17292  002E40  599C               	subwfb	(move_window@wsect+2)& (0+255),w,b
 17293  002E42  5198               	movf	(??_move_window+9)& (0+255),w,b
 17294  002E44  599D               	subwfb	(move_window@wsect+3)& (0+255),w,b
 17295  002E46  B0D8               	btfsc	status,0,c
 17296  002E48  D034               	goto	u10900
 17297                           
 17298                           ; BSR set to: 0
 17299                           ;tff.c: 93: for (n = fs->n_fats; n >= 2; n--) {
 17300  002E4A  EE20 F01E          	lfsr	2,30
 17301  002E4E  519E               	movf	move_window@fs& (0+255),w,b
 17302  002E50  26D9               	addwf	fsr2l,f,c
 17303  002E52  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17304  002E54  22DA               	addwfc	fsr2h,f,c
 17305  002E56  50DF               	movf	indf2,w,c
 17306  002E58  6F99               	movwf	move_window@n& (0+255),b
 17307  002E5A                     l9073:
 17308                           
 17309                           ; BSR set to: 0
 17310  002E5A  0E02               	movlw	2
 17311  002E5C  6199               	cpfslt	move_window@n& (0+255),b
 17312  002E5E  D001               	goto	l925
 17313  002E60  D028               	goto	u10900
 17314  002E62                     l925:
 17315                           
 17316                           ; BSR set to: 0
 17317                           ;tff.c: 94: wsect += fs->sects_fat;
 17318                           
 17319                           ; BSR set to: 0
 17320  002E62  EE20 F014          	lfsr	2,20
 17321  002E66  519E               	movf	move_window@fs& (0+255),w,b
 17322  002E68  26D9               	addwf	fsr2l,f,c
 17323  002E6A  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17324  002E6C  22DA               	addwfc	fsr2h,f,c
 17325  002E6E  CFDE F08F          	movff	postinc2,??_move_window
 17326  002E72  CFDD F090          	movff	postdec2,??_move_window+1
 17327  002E76  518F               	movf	??_move_window& (0+255),w,b
 17328  002E78  279A               	addwf	move_window@wsect& (0+255),f,b
 17329  002E7A  5190               	movf	(??_move_window+1)& (0+255),w,b
 17330  002E7C  239B               	addwfc	(move_window@wsect+1)& (0+255),f,b
 17331  002E7E  0E00               	movlw	0
 17332  002E80  239C               	addwfc	(move_window@wsect+2)& (0+255),f,b
 17333  002E82  0E00               	movlw	0
 17334  002E84  239D               	addwfc	(move_window@wsect+3)& (0+255),f,b
 17335                           
 17336                           ; BSR set to: 0
 17337                           ;tff.c: 95: disk_write(0, fs->win, wsect, 1);
 17338  002E86  0E20               	movlw	32
 17339  002E88  259E               	addwf	move_window@fs& (0+255),w,b
 17340  002E8A  6F7F               	movwf	disk_write@buff& (0+255),b
 17341  002E8C  0E00               	movlw	0
 17342  002E8E  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 17343  002E90  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 17344  002E92  C09A  F081         	movff	move_window@wsect,disk_write@sector
 17345  002E96  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 17346  002E9A  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 17347  002E9E  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 17348  002EA2  0E01               	movlw	1
 17349  002EA4  6F85               	movwf	disk_write@count& (0+255),b
 17350  002EA6  0E00               	movlw	0
 17351  002EA8  EC86  F020         	call	_disk_write
 17352  002EAC  0100               	movlb	0	; () banked
 17353  002EAE  0799               	decf	move_window@n& (0+255),f,b
 17354  002EB0  D7D4               	goto	l9073
 17355  002EB2                     u10900:
 17356                           
 17357                           ; BSR set to: 0
 17358                           ;tff.c: 96: }
 17359                           ;tff.c: 97: }
 17360                           ;tff.c: 98: }
 17361                           ;tff.c: 100: if (sector) {
 17362                           
 17363                           ; BSR set to: 0
 17364                           
 17365                           ; BSR set to: 0
 17366                           
 17367                           ; BSR set to: 0
 17368  002EB2  518B               	movf	move_window@sector& (0+255),w,b
 17369  002EB4  118C               	iorwf	(move_window@sector+1)& (0+255),w,b
 17370  002EB6  118D               	iorwf	(move_window@sector+2)& (0+255),w,b
 17371  002EB8  118E               	iorwf	(move_window@sector+3)& (0+255),w,b
 17372  002EBA  B4D8               	btfsc	status,2,c
 17373  002EBC  D027               	goto	l927
 17374                           
 17375                           ; BSR set to: 0
 17376                           ;tff.c: 101: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 17377  002EBE  0E20               	movlw	32
 17378  002EC0  259E               	addwf	move_window@fs& (0+255),w,b
 17379  002EC2  6F7F               	movwf	disk_read@buff& (0+255),b
 17380  002EC4  0E00               	movlw	0
 17381  002EC6  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 17382  002EC8  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 17383  002ECA  C08B  F081         	movff	move_window@sector,disk_read@sector
 17384  002ECE  C08C  F082         	movff	move_window@sector+1,disk_read@sector+1
 17385  002ED2  C08D  F083         	movff	move_window@sector+2,disk_read@sector+2
 17386  002ED6  C08E  F084         	movff	move_window@sector+3,disk_read@sector+3
 17387  002EDA  0E01               	movlw	1
 17388  002EDC  6F85               	movwf	disk_read@count& (0+255),b
 17389  002EDE  0E00               	movlw	0
 17390  002EE0  ECB2  F01F         	call	_disk_read
 17391  002EE4  0900               	iorlw	0
 17392  002EE6  B4D8               	btfsc	status,2,c
 17393  002EE8  D002               	goto	l928
 17394                           
 17395                           ;tff.c: 102: return FALSE;
 17396  002EEA  0E00               	movlw	0
 17397  002EEC  0012               	return	
 17398  002EEE                     l928:
 17399                           
 17400                           ;tff.c: 103: fs->winsect = sector;
 17401  002EEE  0100               	movlb	0	; () banked
 17402  002EF0  EE20 F004          	lfsr	2,4
 17403  002EF4  519E               	movf	move_window@fs& (0+255),w,b
 17404  002EF6  26D9               	addwf	fsr2l,f,c
 17405  002EF8  519F               	movf	(move_window@fs+1)& (0+255),w,b
 17406  002EFA  22DA               	addwfc	fsr2h,f,c
 17407  002EFC  C08B  FFDE         	movff	move_window@sector,postinc2
 17408  002F00  C08C  FFDE         	movff	move_window@sector+1,postinc2
 17409  002F04  C08D  FFDE         	movff	move_window@sector+2,postinc2
 17410  002F08  C08E  FFDE         	movff	move_window@sector+3,postinc2
 17411  002F0C                     l927:
 17412                           
 17413                           ; BSR set to: 0
 17414                           ;tff.c: 104: }
 17415                           ;tff.c: 105: }
 17416                           ;tff.c: 106: return TRUE;
 17417                           
 17418                           ; BSR set to: 0
 17419                           
 17420                           ; BSR set to: 0
 17421  002F0C  0E01               	movlw	1
 17422  002F0E  0012               	return	
 17423  002F10                     __end_of_move_window:
 17424                           	opt stack 0
 17425                           tosu	equ	0xFFF
 17426                           tosh	equ	0xFFE
 17427                           tosl	equ	0xFFD
 17428                           pclath	equ	0xFFA
 17429                           tblptru	equ	0xFF8
 17430                           tblptrh	equ	0xFF7
 17431                           tblptrl	equ	0xFF6
 17432                           tablat	equ	0xFF5
 17433                           prodh	equ	0xFF4
 17434                           prodl	equ	0xFF3
 17435                           intcon	equ	0xFF2
 17436                           intcon2	equ	0xFF1
 17437                           intcon3	equ	0xFF0
 17438                           indf0	equ	0xFEF
 17439                           postinc0	equ	0xFEE
 17440                           fsr0h	equ	0xFEA
 17441                           fsr0l	equ	0xFE9
 17442                           wreg	equ	0xFE8
 17443                           indf1	equ	0xFE7
 17444                           postinc1	equ	0xFE6
 17445                           postdec1	equ	0xFE5
 17446                           plusw1	equ	0xFE3
 17447                           fsr1h	equ	0xFE2
 17448                           fsr1l	equ	0xFE1
 17449                           indf2	equ	0xFDF
 17450                           postinc2	equ	0xFDE
 17451                           postdec2	equ	0xFDD
 17452                           plusw2	equ	0xFDB
 17453                           fsr2h	equ	0xFDA
 17454                           fsr2l	equ	0xFD9
 17455                           status	equ	0xFD8
 17456                           
 17457 ;; *************** function _disk_write *****************
 17458 ;; Defined at:
 17459 ;;		line 150 in file "bibliotecas/diskio.c"
 17460 ;; Parameters:    Size  Location     Type
 17461 ;;  pdrv            1    wreg     unsigned char 
 17462 ;;  buff            2   31[BANK0 ] PTR const unsigned char 
 17463 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 17464 ;;  sector          4   33[BANK0 ] unsigned long 
 17465 ;;  count           1   37[BANK0 ] unsigned char 
 17466 ;; Auto vars:     Size  Location     Type
 17467 ;;  pdrv            1   39[BANK0 ] unsigned char 
 17468 ;;  result          2   40[BANK0 ] int 
 17469 ;;  res             1   42[BANK0 ] enum E25
 17470 ;; Return value:  Size  Location     Type
 17471 ;;                  1    wreg      enum E25
 17472 ;; Registers used:
 17473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17474 ;; Tracked objects:
 17475 ;;		On entry : 0/0
 17476 ;;		On exit  : 0/0
 17477 ;;		Unchanged: 0/0
 17478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17479 ;;      Params:         0       7       0       0       0       0       0       0       0
 17480 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17481 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17482 ;;      Totals:         0      12       0       0       0       0       0       0       0
 17483 ;;Total ram usage:       12 bytes
 17484 ;; Hardware stack levels used:    1
 17485 ;; Hardware stack levels required when called:    7
 17486 ;; This function calls:
 17487 ;;		_sdc_disk_write
 17488 ;; This function is called by:
 17489 ;;		_move_window
 17490 ;;		_reserve_direntry
 17491 ;;		_f_write
 17492 ;; This function uses a non-reentrant model
 17493 ;;
 17494                           
 17495                           	psect	text65
 17496  00410C                     __ptext65:
 17497                           	opt stack 0
 17498  00410C                     _disk_write:
 17499                           	opt stack 15
 17500                           
 17501                           ;incstack = 0
 17502                           ;disk_write@pdrv stored from wreg
 17503  00410C  0100               	movlb	0	; () banked
 17504  00410E  6F87               	movwf	disk_write@pdrv& (0+255),b
 17505                           
 17506                           ;diskio.c: 157: DRESULT res;
 17507                           ;diskio.c: 158: int result;
 17508                           ;diskio.c: 160: switch (pdrv) {
 17509  004110  D034               	goto	l458
 17510  004112                     
 17511                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 17512  004112  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 17513  004116  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 17514  00411A  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 17515  00411E  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 17516  004122  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 17517  004126  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 17518  00412A  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 17519  00412E  ECE8  F014         	call	_sdc_disk_write	;wreg free
 17520  004132  0100               	movlb	0	; () banked
 17521  004134  6F86               	movwf	??_disk_write& (0+255),b
 17522  004136  5186               	movf	??_disk_write& (0+255),w,b
 17523  004138  6F88               	movwf	disk_write@result& (0+255),b
 17524  00413A  6B89               	clrf	(disk_write@result+1)& (0+255),b
 17525                           
 17526                           ; BSR set to: 0
 17527                           ;diskio.c: 165: res = result;
 17528  00413C  C088  F08A         	movff	disk_write@result,disk_write@res
 17529                           
 17530                           ; BSR set to: 0
 17531                           ;diskio.c: 168: return res;
 17532  004140  518A               	movf	disk_write@res& (0+255),w,b
 17533                           
 17534                           ; BSR set to: 0
 17535  004142  0012               	return	
 17536  004144                     
 17537                           ; BSR set to: 0
 17538                           ;diskio.c: 173: result = sdc_disk_write(buff, sector, count);
 17539                           
 17540                           ; BSR set to: 0
 17541  004144  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 17542  004148  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 17543  00414C  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 17544  004150  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 17545  004154  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 17546  004158  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 17547  00415C  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 17548  004160  ECE8  F014         	call	_sdc_disk_write	;wreg free
 17549  004164  0100               	movlb	0	; () banked
 17550  004166  6F86               	movwf	??_disk_write& (0+255),b
 17551  004168  5186               	movf	??_disk_write& (0+255),w,b
 17552  00416A  6F88               	movwf	disk_write@result& (0+255),b
 17553  00416C  6B89               	clrf	(disk_write@result+1)& (0+255),b
 17554                           
 17555                           ; BSR set to: 0
 17556                           ;diskio.c: 174: res = result;
 17557  00416E  C088  F08A         	movff	disk_write@result,disk_write@res
 17558                           
 17559                           ; BSR set to: 0
 17560                           ;diskio.c: 177: return res;
 17561  004172  518A               	movf	disk_write@res& (0+255),w,b
 17562                           
 17563                           ; BSR set to: 0
 17564  004174  0012               	return	
 17565  004176                     
 17566                           ; BSR set to: 0
 17567                           ;diskio.c: 186: return res;
 17568                           
 17569                           ; BSR set to: 0
 17570  004176  518A               	movf	disk_write@res& (0+255),w,b
 17571                           
 17572                           ; BSR set to: 0
 17573  004178  0012               	return	
 17574  00417A                     l458:
 17575                           
 17576                           ; BSR set to: 0
 17577  00417A  0100               	movlb	0	; () banked
 17578  00417C  5187               	movf	disk_write@pdrv& (0+255),w,b
 17579                           
 17580                           ; Switch size 1, requested type "space"
 17581                           ; Number of cases is 3, Range of values is 0 to 2
 17582                           ; switch strategies available:
 17583                           ; Name         Instructions Cycles
 17584                           ; simple_byte           10     6 (average)
 17585                           ;	Chosen strategy is simple_byte
 17586  00417E  0A00               	xorlw	0	; case 0
 17587  004180  B4D8               	btfsc	status,2,c
 17588  004182  D7C7               	goto	l459
 17589  004184  0A01               	xorlw	1	; case 1
 17590  004186  B4D8               	btfsc	status,2,c
 17591  004188  D7DD               	goto	l461
 17592  00418A  0A03               	xorlw	3	; case 2
 17593  00418C  B4D8               	btfsc	status,2,c
 17594  00418E  D7F3               	goto	l462
 17595                           
 17596                           ; BSR set to: 0
 17597                           ;diskio.c: 189: return RES_PARERR;
 17598                           
 17599                           ; BSR set to: 0
 17600  004190  0E04               	movlw	4
 17601  004192  0012               	return	
 17602  004194                     __end_of_disk_write:
 17603                           	opt stack 0
 17604                           tosu	equ	0xFFF
 17605                           tosh	equ	0xFFE
 17606                           tosl	equ	0xFFD
 17607                           pclath	equ	0xFFA
 17608                           tblptru	equ	0xFF8
 17609                           tblptrh	equ	0xFF7
 17610                           tblptrl	equ	0xFF6
 17611                           tablat	equ	0xFF5
 17612                           prodh	equ	0xFF4
 17613                           prodl	equ	0xFF3
 17614                           intcon	equ	0xFF2
 17615                           intcon2	equ	0xFF1
 17616                           intcon3	equ	0xFF0
 17617                           indf0	equ	0xFEF
 17618                           postinc0	equ	0xFEE
 17619                           fsr0h	equ	0xFEA
 17620                           fsr0l	equ	0xFE9
 17621                           wreg	equ	0xFE8
 17622                           indf1	equ	0xFE7
 17623                           postinc1	equ	0xFE6
 17624                           postdec1	equ	0xFE5
 17625                           plusw1	equ	0xFE3
 17626                           fsr1h	equ	0xFE2
 17627                           fsr1l	equ	0xFE1
 17628                           indf2	equ	0xFDF
 17629                           postinc2	equ	0xFDE
 17630                           postdec2	equ	0xFDD
 17631                           plusw2	equ	0xFDB
 17632                           fsr2h	equ	0xFDA
 17633                           fsr2l	equ	0xFD9
 17634                           status	equ	0xFD8
 17635                           
 17636 ;; *************** function _sdc_disk_write *****************
 17637 ;; Defined at:
 17638 ;;		line 509 in file "bibliotecas/diskio.c"
 17639 ;; Parameters:    Size  Location     Type
 17640 ;;  p_buff          2   12[BANK0 ] PTR const unsigned char 
 17641 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 17642 ;;  sector          4   14[BANK0 ] unsigned long 
 17643 ;;  count           1   18[BANK0 ] unsigned char 
 17644 ;; Auto vars:     Size  Location     Type
 17645 ;;  j               2   28[BANK0 ] int 
 17646 ;;  count1          2   25[BANK0 ] int 
 17647 ;;  i               2   23[BANK0 ] int 
 17648 ;;  buff            1   30[BANK0 ] unsigned char 
 17649 ;;  res             1   27[BANK0 ] enum E25
 17650 ;; Return value:  Size  Location     Type
 17651 ;;                  1    wreg      enum E25
 17652 ;; Registers used:
 17653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17654 ;; Tracked objects:
 17655 ;;		On entry : 0/0
 17656 ;;		On exit  : 0/0
 17657 ;;		Unchanged: 0/0
 17658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17659 ;;      Params:         0       7       0       0       0       0       0       0       0
 17660 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17661 ;;      Temps:          0       4       0       0       0       0       0       0       0
 17662 ;;      Totals:         0      19       0       0       0       0       0       0       0
 17663 ;;Total ram usage:       19 bytes
 17664 ;; Hardware stack levels used:    1
 17665 ;; Hardware stack levels required when called:    6
 17666 ;; This function calls:
 17667 ;;		_command
 17668 ;;		_dummy_clocks
 17669 ;;		_escreve_SPI
 17670 ;;		_leitura_SPI
 17671 ;;		_proceed
 17672 ;;		_response
 17673 ;; This function is called by:
 17674 ;;		_disk_write
 17675 ;; This function uses a non-reentrant model
 17676 ;;
 17677                           
 17678                           	psect	text66
 17679  0029D0                     __ptext66:
 17680                           	opt stack 0
 17681  0029D0                     _sdc_disk_write:
 17682                           	opt stack 15
 17683                           
 17684                           ;diskio.c: 511: DRESULT res;
 17685                           ;diskio.c: 512: unsigned char buff;
 17686                           ;diskio.c: 513: int i=0,j, count1 = 0;
 17687                           
 17688                           ; BSR set to: 0
 17689                           ;incstack = 0
 17690  0029D0  0E00               	movlw	0
 17691  0029D2  0100               	movlb	0	; () banked
 17692  0029D4  6F78               	movwf	(sdc_disk_write@i+1)& (0+255),b
 17693  0029D6  0E00               	movlw	0
 17694  0029D8  6F77               	movwf	sdc_disk_write@i& (0+255),b
 17695  0029DA  0E00               	movlw	0
 17696  0029DC  6F7A               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 17697  0029DE  0E00               	movlw	0
 17698  0029E0  6F79               	movwf	sdc_disk_write@count1& (0+255),b
 17699                           
 17700                           ; BSR set to: 0
 17701                           ;diskio.c: 515: if(count>1)
 17702  0029E2  0E01               	movlw	1
 17703  0029E4  6572               	cpfsgt	sdc_disk_write@count& (0+255),b
 17704  0029E6  D06C               	goto	l543
 17705                           
 17706                           ; BSR set to: 0
 17707                           ;diskio.c: 516: {
 17708                           ;diskio.c: 517: LATCbits.LATC7 = 0;
 17709  0029E8  9E8B               	bcf	3979,7,c	;volatile
 17710                           
 17711                           ;diskio.c: 518: LATBbits.LATB4 = 0;
 17712  0029EA  988A               	bcf	3978,4,c	;volatile
 17713                           
 17714                           ; BSR set to: 0
 17715                           ;diskio.c: 519: dummy_clocks(10);
 17716  0029EC  0E0A               	movlw	10
 17717  0029EE  EC8C  F024         	call	_dummy_clocks
 17718                           
 17719                           ;diskio.c: 520: command(0X57, count, 0XFF);
 17720  0029F2  0100               	movlb	0	; () banked
 17721  0029F4  5172               	movf	sdc_disk_write@count& (0+255),w,b
 17722  0029F6  6F65               	movwf	command@arg& (0+255),b
 17723  0029F8  6B66               	clrf	(command@arg+1)& (0+255),b
 17724  0029FA  6B67               	clrf	(command@arg+2)& (0+255),b
 17725  0029FC  6B68               	clrf	(command@arg+3)& (0+255),b
 17726  0029FE  0EFF               	movlw	255
 17727  002A00  6F69               	movwf	command@CRC& (0+255),b
 17728  002A02  0E57               	movlw	87
 17729  002A04  EC72  F022         	call	_command
 17730                           
 17731                           ;diskio.c: 521: proceed();
 17732  002A08  EC86  F026         	call	_proceed	;wreg free
 17733  002A0C                     
 17734                           ;diskio.c: 523: buff = response();
 17735  002A0C  EC80  F026         	call	_response	;wreg free
 17736  002A10  0100               	movlb	0	; () banked
 17737  002A12  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 17738                           
 17739                           ; BSR set to: 0
 17740                           ;diskio.c: 524: }while(buff!=0X00);
 17741  002A14  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 17742  002A16  A4D8               	btfss	status,2,c
 17743  002A18  D7F9               	goto	l544
 17744                           
 17745                           ; BSR set to: 0
 17746                           ;diskio.c: 526: dummy_clocks(10);
 17747                           
 17748                           ; BSR set to: 0
 17749  002A1A  0E0A               	movlw	10
 17750  002A1C  EC8C  F024         	call	_dummy_clocks
 17751                           
 17752                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 17753  002A20  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 17754  002A24  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 17755  002A28  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 17756  002A2C  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 17757  002A30  0E09               	movlw	9
 17758  002A32                     u10565:
 17759  002A32  90D8               	bcf	status,0,c
 17760  002A34  0100               	movlb	0	; () banked
 17761  002A36  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 17762  002A38  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 17763  002A3A  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 17764  002A3C  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 17765  002A3E  2EE8               	decfsz	wreg,f,c
 17766  002A40  D7F8               	goto	u10565
 17767  002A42  C073  F065         	movff	??_sdc_disk_write,command@arg
 17768  002A46  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 17769  002A4A  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 17770  002A4E  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 17771  002A52  0EFF               	movlw	255
 17772  002A54  6F69               	movwf	command@CRC& (0+255),b
 17773  002A56  0E59               	movlw	89
 17774  002A58  EC72  F022         	call	_command
 17775                           
 17776                           ;diskio.c: 528: proceed();
 17777  002A5C  EC86  F026         	call	_proceed	;wreg free
 17778  002A60                     
 17779                           ;diskio.c: 530: buff = response();
 17780  002A60  EC80  F026         	call	_response	;wreg free
 17781  002A64  0100               	movlb	0	; () banked
 17782  002A66  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 17783                           
 17784                           ; BSR set to: 0
 17785                           ;diskio.c: 531: }while(buff!=0X00);
 17786  002A68  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 17787  002A6A  A4D8               	btfss	status,2,c
 17788  002A6C  D7F9               	goto	l546
 17789                           
 17790                           ; BSR set to: 0
 17791                           ;diskio.c: 533: dummy_clocks(1);
 17792                           
 17793                           ; BSR set to: 0
 17794  002A6E  0E01               	movlw	1
 17795  002A70  EC8C  F024         	call	_dummy_clocks
 17796                           
 17797                           ;diskio.c: 534: escreve_SPI(0XFC);
 17798  002A74  0EFC               	movlw	252
 17799  002A76  EC38  F026         	call	_escreve_SPI
 17800                           
 17801                           ;diskio.c: 535: for(j=0;j<512;j++)
 17802  002A7A  0E00               	movlw	0
 17803  002A7C  0100               	movlb	0	; () banked
 17804  002A7E  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 17805  002A80  0E00               	movlw	0
 17806  002A82  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 17807  002A84                     l8833:
 17808                           
 17809                           ; BSR set to: 0
 17810  002A84  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 17811  002A86  D004               	goto	l548
 17812  002A88  0E02               	movlw	2
 17813  002A8A  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 17814  002A8C  B0D8               	btfsc	status,0,c
 17815  002A8E  D00D               	goto	u10590
 17816  002A90                     l548:
 17817                           
 17818                           ; BSR set to: 0
 17819                           ;diskio.c: 536: {
 17820                           ;diskio.c: 537: escreve_SPI(*p_buff);
 17821                           
 17822                           ; BSR set to: 0
 17823  002A90  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 17824  002A94  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 17825  002A98  50DF               	movf	indf2,w,c
 17826  002A9A  EC38  F026         	call	_escreve_SPI
 17827                           
 17828                           ;diskio.c: 538: p_buff++;
 17829  002A9E  0100               	movlb	0	; () banked
 17830  002AA0  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 17831  002AA2  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 17832                           
 17833                           ; BSR set to: 0
 17834  002AA4  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 17835  002AA6  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 17836  002AA8  D7ED               	goto	l8833
 17837  002AAA                     u10590:
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;diskio.c: 539: }
 17841                           ;diskio.c: 540: leitura_SPI();
 17842                           
 17843                           ; BSR set to: 0
 17844  002AAA  EC8C  F026         	call	_leitura_SPI	;wreg free
 17845                           
 17846                           ;diskio.c: 541: leitura_SPI();
 17847  002AAE  EC8C  F026         	call	_leitura_SPI	;wreg free
 17848                           
 17849                           ;diskio.c: 543: dummy_clocks(1);
 17850  002AB2  0E01               	movlw	1
 17851  002AB4  EC8C  F024         	call	_dummy_clocks
 17852                           
 17853                           ;diskio.c: 544: escreve_SPI(0XFD);
 17854  002AB8  0EFD               	movlw	253
 17855  002ABA  EC38  F026         	call	_escreve_SPI
 17856                           
 17857                           ;diskio.c: 546: }
 17858  002ABE  D06A               	goto	u10640
 17859  002AC0                     l543:
 17860                           
 17861                           ; BSR set to: 0
 17862                           ;diskio.c: 547: else
 17863                           ;diskio.c: 548: {
 17864                           ;diskio.c: 549: LATCbits.LATC7 = 0;
 17865  002AC0  9E8B               	bcf	3979,7,c	;volatile
 17866                           
 17867                           ;diskio.c: 550: LATBbits.LATB4 = 0;
 17868  002AC2  988A               	bcf	3978,4,c	;volatile
 17869                           
 17870                           ; BSR set to: 0
 17871                           ;diskio.c: 551: dummy_clocks(10);
 17872  002AC4  0E0A               	movlw	10
 17873  002AC6  EC8C  F024         	call	_dummy_clocks
 17874                           
 17875                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 17876  002ACA  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 17877  002ACE  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 17878  002AD2  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 17879  002AD6  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 17880  002ADA  0E09               	movlw	9
 17881  002ADC                     u10605:
 17882  002ADC  90D8               	bcf	status,0,c
 17883  002ADE  0100               	movlb	0	; () banked
 17884  002AE0  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 17885  002AE2  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 17886  002AE4  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 17887  002AE6  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 17888  002AE8  2EE8               	decfsz	wreg,f,c
 17889  002AEA  D7F8               	goto	u10605
 17890  002AEC  C073  F065         	movff	??_sdc_disk_write,command@arg
 17891  002AF0  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 17892  002AF4  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 17893  002AF8  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 17894  002AFC  0E00               	movlw	0
 17895  002AFE  6F69               	movwf	command@CRC& (0+255),b
 17896  002B00  0E58               	movlw	88
 17897  002B02  EC72  F022         	call	_command
 17898                           
 17899                           ;diskio.c: 553: proceed();
 17900  002B06  EC86  F026         	call	_proceed	;wreg free
 17901  002B0A                     
 17902                           ;diskio.c: 555: buff = response();
 17903  002B0A  EC80  F026         	call	_response	;wreg free
 17904  002B0E  0100               	movlb	0	; () banked
 17905  002B10  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 17906                           
 17907                           ; BSR set to: 0
 17908                           ;diskio.c: 556: }while(buff!=0X00);
 17909  002B12  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 17910  002B14  A4D8               	btfss	status,2,c
 17911  002B16  D7F9               	goto	l551
 17912                           
 17913                           ; BSR set to: 0
 17914                           ;diskio.c: 558: LATBbits.LATB4 = 0;
 17915  002B18  988A               	bcf	3978,4,c	;volatile
 17916                           
 17917                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 17918  002B1A  9E8B               	bcf	3979,7,c	;volatile
 17919                           
 17920                           ; BSR set to: 0
 17921                           ;diskio.c: 560: dummy_clocks(1);
 17922  002B1C  0E01               	movlw	1
 17923  002B1E  EC8C  F024         	call	_dummy_clocks
 17924                           
 17925                           ;diskio.c: 561: escreve_SPI(0XFE);
 17926  002B22  0EFE               	movlw	254
 17927  002B24  EC38  F026         	call	_escreve_SPI
 17928                           
 17929                           ;diskio.c: 562: for(j=0;j<512;j++)
 17930  002B28  0E00               	movlw	0
 17931  002B2A  0100               	movlb	0	; () banked
 17932  002B2C  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 17933  002B2E  0E00               	movlw	0
 17934  002B30  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 17935  002B32                     l8865:
 17936                           
 17937                           ; BSR set to: 0
 17938  002B32  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 17939  002B34  D004               	goto	l553
 17940  002B36  0E02               	movlw	2
 17941  002B38  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 17942  002B3A  B0D8               	btfsc	status,0,c
 17943  002B3C  D00D               	goto	u10630
 17944  002B3E                     l553:
 17945                           
 17946                           ; BSR set to: 0
 17947                           ;diskio.c: 563: {
 17948                           ;diskio.c: 564: escreve_SPI(*p_buff);
 17949                           
 17950                           ; BSR set to: 0
 17951  002B3E  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 17952  002B42  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 17953  002B46  50DF               	movf	indf2,w,c
 17954  002B48  EC38  F026         	call	_escreve_SPI
 17955                           
 17956                           ;diskio.c: 565: p_buff++;
 17957  002B4C  0100               	movlb	0	; () banked
 17958  002B4E  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 17959  002B50  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 17960                           
 17961                           ; BSR set to: 0
 17962  002B52  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 17963  002B54  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 17964  002B56  D7ED               	goto	l8865
 17965  002B58                     u10630:
 17966                           
 17967                           ; BSR set to: 0
 17968                           ;diskio.c: 566: }
 17969                           ;diskio.c: 567: leitura_SPI();
 17970                           
 17971                           ; BSR set to: 0
 17972  002B58  EC8C  F026         	call	_leitura_SPI	;wreg free
 17973                           
 17974                           ;diskio.c: 568: leitura_SPI();
 17975  002B5C  EC8C  F026         	call	_leitura_SPI	;wreg free
 17976                           
 17977                           ;diskio.c: 570: dummy_clocks(10);
 17978  002B60  0E0A               	movlw	10
 17979  002B62  EC8C  F024         	call	_dummy_clocks
 17980                           
 17981                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 17982  002B66  0E00               	movlw	0
 17983  002B68  0100               	movlb	0	; () banked
 17984  002B6A  6F65               	movwf	command@arg& (0+255),b
 17985  002B6C  0E00               	movlw	0
 17986  002B6E  6F66               	movwf	(command@arg+1)& (0+255),b
 17987  002B70  0E00               	movlw	0
 17988  002B72  6F67               	movwf	(command@arg+2)& (0+255),b
 17989  002B74  0E00               	movlw	0
 17990  002B76  6F68               	movwf	(command@arg+3)& (0+255),b
 17991  002B78  0E00               	movlw	0
 17992  002B7A  6F69               	movwf	command@CRC& (0+255),b
 17993  002B7C  0E4D               	movlw	77
 17994  002B7E  EC72  F022         	call	_command
 17995                           
 17996                           ;diskio.c: 572: proceed();
 17997  002B82  EC86  F026         	call	_proceed	;wreg free
 17998  002B86                     
 17999                           ;diskio.c: 574: buff = response();
 18000  002B86  EC80  F026         	call	_response	;wreg free
 18001  002B8A  0100               	movlb	0	; () banked
 18002  002B8C  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 18003                           
 18004                           ; BSR set to: 0
 18005                           ;diskio.c: 575: }while(buff!=0X00 );
 18006  002B8E  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 18007  002B90  A4D8               	btfss	status,2,c
 18008  002B92  D7F9               	goto	l555
 18009  002B94                     u10640:
 18010                           
 18011                           ;diskio.c: 576: }
 18012                           ;diskio.c: 577: return res;
 18013                           
 18014                           ; BSR set to: 0
 18015                           
 18016                           ; BSR set to: 0
 18017  002B94  0100               	movlb	0	; () banked
 18018  002B96  517B               	movf	sdc_disk_write@res& (0+255),w,b
 18019  002B98  0012               	return	
 18020  002B9A                     __end_of_sdc_disk_write:
 18021                           	opt stack 0
 18022                           tosu	equ	0xFFF
 18023                           tosh	equ	0xFFE
 18024                           tosl	equ	0xFFD
 18025                           pclath	equ	0xFFA
 18026                           tblptru	equ	0xFF8
 18027                           tblptrh	equ	0xFF7
 18028                           tblptrl	equ	0xFF6
 18029                           tablat	equ	0xFF5
 18030                           prodh	equ	0xFF4
 18031                           prodl	equ	0xFF3
 18032                           intcon	equ	0xFF2
 18033                           intcon2	equ	0xFF1
 18034                           intcon3	equ	0xFF0
 18035                           indf0	equ	0xFEF
 18036                           postinc0	equ	0xFEE
 18037                           fsr0h	equ	0xFEA
 18038                           fsr0l	equ	0xFE9
 18039                           wreg	equ	0xFE8
 18040                           indf1	equ	0xFE7
 18041                           postinc1	equ	0xFE6
 18042                           postdec1	equ	0xFE5
 18043                           plusw1	equ	0xFE3
 18044                           fsr1h	equ	0xFE2
 18045                           fsr1l	equ	0xFE1
 18046                           indf2	equ	0xFDF
 18047                           postinc2	equ	0xFDE
 18048                           postdec2	equ	0xFDD
 18049                           plusw2	equ	0xFDB
 18050                           fsr2h	equ	0xFDA
 18051                           fsr2l	equ	0xFD9
 18052                           status	equ	0xFD8
 18053                           
 18054 ;; *************** function _disk_read *****************
 18055 ;; Defined at:
 18056 ;;		line 97 in file "bibliotecas/diskio.c"
 18057 ;; Parameters:    Size  Location     Type
 18058 ;;  pdrv            1    wreg     unsigned char 
 18059 ;;  buff            2   31[BANK0 ] PTR unsigned char 
 18060 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 18061 ;;  sector          4   33[BANK0 ] unsigned long 
 18062 ;;  count           1   37[BANK0 ] unsigned char 
 18063 ;; Auto vars:     Size  Location     Type
 18064 ;;  pdrv            1   39[BANK0 ] unsigned char 
 18065 ;;  result          2   40[BANK0 ] int 
 18066 ;;  res             1   42[BANK0 ] enum E25
 18067 ;; Return value:  Size  Location     Type
 18068 ;;                  1    wreg      enum E25
 18069 ;; Registers used:
 18070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18071 ;; Tracked objects:
 18072 ;;		On entry : 0/0
 18073 ;;		On exit  : 0/0
 18074 ;;		Unchanged: 0/0
 18075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18076 ;;      Params:         0       7       0       0       0       0       0       0       0
 18077 ;;      Locals:         0       4       0       0       0       0       0       0       0
 18078 ;;      Temps:          0       1       0       0       0       0       0       0       0
 18079 ;;      Totals:         0      12       0       0       0       0       0       0       0
 18080 ;;Total ram usage:       12 bytes
 18081 ;; Hardware stack levels used:    1
 18082 ;; Hardware stack levels required when called:    7
 18083 ;; This function calls:
 18084 ;;		_sdc_disk_read
 18085 ;; This function is called by:
 18086 ;;		_move_window
 18087 ;;		_check_fs
 18088 ;;		_f_read
 18089 ;; This function uses a non-reentrant model
 18090 ;;
 18091                           
 18092                           	psect	text67
 18093  003F64                     __ptext67:
 18094                           	opt stack 0
 18095  003F64                     _disk_read:
 18096                           	opt stack 15
 18097                           
 18098                           ; BSR set to: 0
 18099                           ;incstack = 0
 18100                           ;disk_read@pdrv stored from wreg
 18101  003F64  0100               	movlb	0	; () banked
 18102  003F66  6F87               	movwf	disk_read@pdrv& (0+255),b
 18103                           
 18104                           ;diskio.c: 104: DRESULT res;
 18105                           ;diskio.c: 105: int result;
 18106                           ;diskio.c: 107: switch (pdrv) {
 18107  003F68  D038               	goto	l450
 18108  003F6A                     
 18109                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 18110  003F6A  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 18111  003F6E  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 18112  003F72  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 18113  003F76  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 18114  003F7A  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 18115  003F7E  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 18116  003F82  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 18117  003F86  ECAA  F019         	call	_sdc_disk_read	;wreg free
 18118  003F8A  0100               	movlb	0	; () banked
 18119  003F8C  6F86               	movwf	??_disk_read& (0+255),b
 18120  003F8E  5186               	movf	??_disk_read& (0+255),w,b
 18121  003F90  6F88               	movwf	disk_read@result& (0+255),b
 18122  003F92  6B89               	clrf	(disk_read@result+1)& (0+255),b
 18123                           
 18124                           ; BSR set to: 0
 18125                           ;diskio.c: 115: res = result;
 18126  003F94  C088  F08A         	movff	disk_read@result,disk_read@res
 18127                           
 18128                           ; BSR set to: 0
 18129                           ;diskio.c: 117: return res;
 18130  003F98  518A               	movf	disk_read@res& (0+255),w,b
 18131                           
 18132                           ; BSR set to: 0
 18133  003F9A  0012               	return	
 18134  003F9C                     
 18135                           ; BSR set to: 0
 18136                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 18137                           
 18138                           ; BSR set to: 0
 18139  003F9C  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 18140  003FA0  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 18141  003FA4  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 18142  003FA8  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 18143  003FAC  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 18144  003FB0  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 18145  003FB4  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 18146  003FB8  ECAA  F019         	call	_sdc_disk_read	;wreg free
 18147  003FBC  0100               	movlb	0	; () banked
 18148  003FBE  6F86               	movwf	??_disk_read& (0+255),b
 18149  003FC0  5186               	movf	??_disk_read& (0+255),w,b
 18150  003FC2  6F88               	movwf	disk_read@result& (0+255),b
 18151  003FC4  6B89               	clrf	(disk_read@result+1)& (0+255),b
 18152                           
 18153                           ; BSR set to: 0
 18154                           ;diskio.c: 126: res = result;
 18155  003FC6  C088  F08A         	movff	disk_read@result,disk_read@res
 18156                           
 18157                           ; BSR set to: 0
 18158                           ;diskio.c: 128: buff = data_buff;
 18159  003FCA  C028  F07F         	movff	_data_buff,disk_read@buff
 18160  003FCE  C029  F080         	movff	_data_buff+1,disk_read@buff+1
 18161                           
 18162                           ; BSR set to: 0
 18163                           ;diskio.c: 129: return res;
 18164  003FD2  518A               	movf	disk_read@res& (0+255),w,b
 18165                           
 18166                           ; BSR set to: 0
 18167  003FD4  0012               	return	
 18168  003FD6                     
 18169                           ; BSR set to: 0
 18170                           ;diskio.c: 138: return res;
 18171                           
 18172                           ; BSR set to: 0
 18173  003FD6  518A               	movf	disk_read@res& (0+255),w,b
 18174                           
 18175                           ; BSR set to: 0
 18176  003FD8  0012               	return	
 18177  003FDA                     l450:
 18178                           
 18179                           ; BSR set to: 0
 18180  003FDA  0100               	movlb	0	; () banked
 18181  003FDC  5187               	movf	disk_read@pdrv& (0+255),w,b
 18182                           
 18183                           ; Switch size 1, requested type "space"
 18184                           ; Number of cases is 3, Range of values is 0 to 2
 18185                           ; switch strategies available:
 18186                           ; Name         Instructions Cycles
 18187                           ; simple_byte           10     6 (average)
 18188                           ;	Chosen strategy is simple_byte
 18189  003FDE  0A00               	xorlw	0	; case 0
 18190  003FE0  B4D8               	btfsc	status,2,c
 18191  003FE2  D7C3               	goto	l451
 18192  003FE4  0A01               	xorlw	1	; case 1
 18193  003FE6  B4D8               	btfsc	status,2,c
 18194  003FE8  D7D9               	goto	l453
 18195  003FEA  0A03               	xorlw	3	; case 2
 18196  003FEC  B4D8               	btfsc	status,2,c
 18197  003FEE  D7F3               	goto	l454
 18198                           
 18199                           ; BSR set to: 0
 18200                           ;diskio.c: 141: return RES_PARERR;
 18201                           
 18202                           ; BSR set to: 0
 18203  003FF0  0E04               	movlw	4
 18204  003FF2  0012               	return	
 18205  003FF4                     __end_of_disk_read:
 18206                           	opt stack 0
 18207                           tosu	equ	0xFFF
 18208                           tosh	equ	0xFFE
 18209                           tosl	equ	0xFFD
 18210                           pclath	equ	0xFFA
 18211                           tblptru	equ	0xFF8
 18212                           tblptrh	equ	0xFF7
 18213                           tblptrl	equ	0xFF6
 18214                           tablat	equ	0xFF5
 18215                           prodh	equ	0xFF4
 18216                           prodl	equ	0xFF3
 18217                           intcon	equ	0xFF2
 18218                           intcon2	equ	0xFF1
 18219                           intcon3	equ	0xFF0
 18220                           indf0	equ	0xFEF
 18221                           postinc0	equ	0xFEE
 18222                           fsr0h	equ	0xFEA
 18223                           fsr0l	equ	0xFE9
 18224                           wreg	equ	0xFE8
 18225                           indf1	equ	0xFE7
 18226                           postinc1	equ	0xFE6
 18227                           postdec1	equ	0xFE5
 18228                           plusw1	equ	0xFE3
 18229                           fsr1h	equ	0xFE2
 18230                           fsr1l	equ	0xFE1
 18231                           indf2	equ	0xFDF
 18232                           postinc2	equ	0xFDE
 18233                           postdec2	equ	0xFDD
 18234                           plusw2	equ	0xFDB
 18235                           fsr2h	equ	0xFDA
 18236                           fsr2l	equ	0xFD9
 18237                           status	equ	0xFD8
 18238                           
 18239 ;; *************** function _sdc_disk_read *****************
 18240 ;; Defined at:
 18241 ;;		line 439 in file "bibliotecas/diskio.c"
 18242 ;; Parameters:    Size  Location     Type
 18243 ;;  p_buff          2   12[BANK0 ] PTR unsigned char 
 18244 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 18245 ;;  sector          4   14[BANK0 ] unsigned long 
 18246 ;;  count           1   18[BANK0 ] unsigned char 
 18247 ;; Auto vars:     Size  Location     Type
 18248 ;;  start_add       4   24[BANK0 ] unsigned long 
 18249 ;;  length          2   28[BANK0 ] int 
 18250 ;;  count1          2    0        int 
 18251 ;;  i               2    0        int 
 18252 ;;  buff            1   30[BANK0 ] unsigned char 
 18253 ;;  ptr             1   23[BANK0 ] unsigned char 
 18254 ;;  res             1    0        enum E25
 18255 ;; Return value:  Size  Location     Type
 18256 ;;                  1    wreg      enum E25
 18257 ;; Registers used:
 18258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18259 ;; Tracked objects:
 18260 ;;		On entry : 0/0
 18261 ;;		On exit  : 0/0
 18262 ;;		Unchanged: 0/0
 18263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18264 ;;      Params:         0       7       0       0       0       0       0       0       0
 18265 ;;      Locals:         0       8       0       0       0       0       0       0       0
 18266 ;;      Temps:          0       4       0       0       0       0       0       0       0
 18267 ;;      Totals:         0      19       0       0       0       0       0       0       0
 18268 ;;Total ram usage:       19 bytes
 18269 ;; Hardware stack levels used:    1
 18270 ;; Hardware stack levels required when called:    6
 18271 ;; This function calls:
 18272 ;;		_command
 18273 ;;		_dummy_clocks
 18274 ;;		_proceed
 18275 ;;		_response
 18276 ;; This function is called by:
 18277 ;;		_disk_read
 18278 ;; This function uses a non-reentrant model
 18279 ;;
 18280                           
 18281                           	psect	text68
 18282  003354                     __ptext68:
 18283                           	opt stack 0
 18284  003354                     _sdc_disk_read:
 18285                           	opt stack 15
 18286                           
 18287                           ;diskio.c: 446: DRESULT res;
 18288                           ;diskio.c: 447: unsigned char ptr=0X00, buff;
 18289                           
 18290                           ; BSR set to: 0
 18291                           ;incstack = 0
 18292  003354  0E00               	movlw	0
 18293  003356  0100               	movlb	0	; () banked
 18294  003358  6F77               	movwf	sdc_disk_read@ptr& (0+255),b
 18295                           
 18296                           ; BSR set to: 0
 18297                           ;diskio.c: 448: unsigned long int start_add;
 18298                           ;diskio.c: 449: int length,i, count1;
 18299                           ;diskio.c: 450: dummy_clocks(10);
 18300  00335A  0E0A               	movlw	10
 18301  00335C  EC8C  F024         	call	_dummy_clocks
 18302                           
 18303                           ;diskio.c: 452: start_add = sector*512;
 18304  003360  C06E  F073         	movff	sdc_disk_read@sector,??_sdc_disk_read
 18305  003364  C06F  F074         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 18306  003368  C070  F075         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 18307  00336C  C071  F076         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 18308  003370  0E09               	movlw	9
 18309  003372                     u10475:
 18310  003372  90D8               	bcf	status,0,c
 18311  003374  0100               	movlb	0	; () banked
 18312  003376  3773               	rlcf	??_sdc_disk_read& (0+255),f,b
 18313  003378  3774               	rlcf	(??_sdc_disk_read+1)& (0+255),f,b
 18314  00337A  3775               	rlcf	(??_sdc_disk_read+2)& (0+255),f,b
 18315  00337C  3776               	rlcf	(??_sdc_disk_read+3)& (0+255),f,b
 18316  00337E  2EE8               	decfsz	wreg,f,c
 18317  003380  D7F8               	goto	u10475
 18318  003382  C073  F078         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 18319  003386  C074  F079         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 18320  00338A  C075  F07A         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 18321  00338E  C076  F07B         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 18322                           
 18323                           ; BSR set to: 0
 18324                           ;diskio.c: 455: if(sector != 1)
 18325  003392  056E               	decf	sdc_disk_read@sector& (0+255),w,b
 18326  003394  116F               	iorwf	(sdc_disk_read@sector+1)& (0+255),w,b
 18327  003396  1170               	iorwf	(sdc_disk_read@sector+2)& (0+255),w,b
 18328  003398  1171               	iorwf	(sdc_disk_read@sector+3)& (0+255),w,b
 18329  00339A  B4D8               	btfsc	status,2,c
 18330  00339C  D01D               	goto	l526
 18331                           
 18332                           ; BSR set to: 0
 18333                           ;diskio.c: 456: {
 18334                           ;diskio.c: 457: dummy_clocks(10);
 18335  00339E  0E0A               	movlw	10
 18336  0033A0  EC8C  F024         	call	_dummy_clocks
 18337                           
 18338                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 18339  0033A4  C078  F065         	movff	sdc_disk_read@start_add,command@arg
 18340  0033A8  C079  F066         	movff	sdc_disk_read@start_add+1,command@arg+1
 18341  0033AC  C07A  F067         	movff	sdc_disk_read@start_add+2,command@arg+2
 18342  0033B0  C07B  F068         	movff	sdc_disk_read@start_add+3,command@arg+3
 18343  0033B4  0E00               	movlw	0
 18344  0033B6  0100               	movlb	0	; () banked
 18345  0033B8  6F69               	movwf	command@CRC& (0+255),b
 18346  0033BA  0E52               	movlw	82
 18347  0033BC  EC72  F022         	call	_command
 18348                           
 18349                           ;diskio.c: 459: proceed();
 18350  0033C0  EC86  F026         	call	_proceed	;wreg free
 18351  0033C4                     
 18352                           ;diskio.c: 461: buff = response();
 18353  0033C4  EC80  F026         	call	_response	;wreg free
 18354  0033C8  0100               	movlb	0	; () banked
 18355  0033CA  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18356                           
 18357                           ; BSR set to: 0
 18358                           ;diskio.c: 462: }while(buff!=0X00);
 18359  0033CC  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 18360  0033CE  A4D8               	btfss	status,2,c
 18361  0033D0  D7F9               	goto	l527
 18362                           
 18363                           ; BSR set to: 0
 18364                           ;diskio.c: 463: proceed();
 18365                           
 18366                           ; BSR set to: 0
 18367  0033D2  EC86  F026         	call	_proceed	;wreg free
 18368                           
 18369                           ;diskio.c: 464: }
 18370  0033D6  D021               	goto	l532
 18371  0033D8                     l526:
 18372                           
 18373                           ;diskio.c: 465: else
 18374                           ;diskio.c: 466: {
 18375                           ;diskio.c: 467: dummy_clocks(10);
 18376  0033D8  0E0A               	movlw	10
 18377  0033DA  EC8C  F024         	call	_dummy_clocks
 18378                           
 18379                           ;diskio.c: 468: command(0X51,sector ,0X00);
 18380  0033DE  C06E  F065         	movff	sdc_disk_read@sector,command@arg
 18381  0033E2  C06F  F066         	movff	sdc_disk_read@sector+1,command@arg+1
 18382  0033E6  C070  F067         	movff	sdc_disk_read@sector+2,command@arg+2
 18383  0033EA  C071  F068         	movff	sdc_disk_read@sector+3,command@arg+3
 18384  0033EE  0E00               	movlw	0
 18385  0033F0  0100               	movlb	0	; () banked
 18386  0033F2  6F69               	movwf	command@CRC& (0+255),b
 18387  0033F4  0E51               	movlw	81
 18388  0033F6  EC72  F022         	call	_command
 18389                           
 18390                           ;diskio.c: 469: proceed();
 18391  0033FA  EC86  F026         	call	_proceed	;wreg free
 18392  0033FE                     
 18393                           ;diskio.c: 471: buff = response();
 18394  0033FE  EC80  F026         	call	_response	;wreg free
 18395  003402  0100               	movlb	0	; () banked
 18396  003404  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18397                           
 18398                           ; BSR set to: 0
 18399                           ;diskio.c: 472: }while(buff!=0X00);
 18400  003406  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 18401  003408  A4D8               	btfss	status,2,c
 18402  00340A  D7F9               	goto	l530
 18403                           
 18404                           ; BSR set to: 0
 18405                           ;diskio.c: 473: proceed();
 18406                           
 18407                           ; BSR set to: 0
 18408  00340C  EC86  F026         	call	_proceed	;wreg free
 18409                           
 18410                           ;diskio.c: 474: }
 18411                           ;diskio.c: 478: while(buff!=0xFE)
 18412  003410  D004               	goto	l532
 18413  003412                     
 18414                           ;diskio.c: 479: {
 18415                           ;diskio.c: 480: buff = response();
 18416  003412  EC80  F026         	call	_response	;wreg free
 18417  003416  0100               	movlb	0	; () banked
 18418  003418  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18419  00341A                     l532:
 18420                           
 18421                           ; BSR set to: 0
 18422  00341A  0EFE               	movlw	254
 18423  00341C  0100               	movlb	0	; () banked
 18424  00341E  197E               	xorwf	sdc_disk_read@buff& (0+255),w,b
 18425  003420  A4D8               	btfss	status,2,c
 18426  003422  D7F7               	goto	l533
 18427                           
 18428                           ; BSR set to: 0
 18429                           ;diskio.c: 481: }
 18430                           ;diskio.c: 483: length = 0;
 18431                           
 18432                           ; BSR set to: 0
 18433  003424  0E00               	movlw	0
 18434  003426  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18435  003428  0E00               	movlw	0
 18436  00342A  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 18437                           
 18438                           ;diskio.c: 484: while ( length < 512 )
 18439  00342C  D00C               	goto	l535
 18440  00342E                     
 18441                           ; BSR set to: 0
 18442                           ;diskio.c: 485: {
 18443                           ;diskio.c: 486: p_buff[length] = response();
 18444                           
 18445                           ; BSR set to: 0
 18446  00342E  517C               	movf	sdc_disk_read@length& (0+255),w,b
 18447  003430  256C               	addwf	sdc_disk_read@p_buff& (0+255),w,b
 18448  003432  6ED9               	movwf	fsr2l,c
 18449  003434  517D               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 18450  003436  216D               	addwfc	(sdc_disk_read@p_buff+1)& (0+255),w,b
 18451  003438  6EDA               	movwf	fsr2h,c
 18452  00343A  EC80  F026         	call	_response	;wreg free
 18453  00343E  6EDF               	movwf	indf2,c
 18454                           
 18455                           ;diskio.c: 487: length++;
 18456  003440  0100               	movlb	0	; () banked
 18457  003442  4B7C               	infsnz	sdc_disk_read@length& (0+255),f,b
 18458  003444  2B7D               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 18459  003446                     l535:
 18460                           
 18461                           ; BSR set to: 0
 18462                           
 18463                           ; BSR set to: 0
 18464  003446  BF7D               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 18465  003448  D7F2               	goto	l536
 18466  00344A  0E02               	movlw	2
 18467  00344C  5D7D               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 18468  00344E  A0D8               	btfss	status,0,c
 18469  003450  D7EE               	goto	l536
 18470                           
 18471                           ; BSR set to: 0
 18472                           ;diskio.c: 488: }
 18473                           ;diskio.c: 490: length = 0;
 18474                           
 18475                           ; BSR set to: 0
 18476  003452  0E00               	movlw	0
 18477  003454  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18478  003456  0E00               	movlw	0
 18479  003458  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 18480                           
 18481                           ; BSR set to: 0
 18482                           ;diskio.c: 491: dummy_clocks(10);
 18483  00345A  0E0A               	movlw	10
 18484  00345C  EC8C  F024         	call	_dummy_clocks
 18485                           
 18486                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 18487  003460  0E00               	movlw	0
 18488  003462  0100               	movlb	0	; () banked
 18489  003464  6F65               	movwf	command@arg& (0+255),b
 18490  003466  0E00               	movlw	0
 18491  003468  6F66               	movwf	(command@arg+1)& (0+255),b
 18492  00346A  0E00               	movlw	0
 18493  00346C  6F67               	movwf	(command@arg+2)& (0+255),b
 18494  00346E  0E00               	movlw	0
 18495  003470  6F68               	movwf	(command@arg+3)& (0+255),b
 18496  003472  0E00               	movlw	0
 18497  003474  6F69               	movwf	command@CRC& (0+255),b
 18498  003476  0E4C               	movlw	76
 18499  003478  EC72  F022         	call	_command
 18500                           
 18501                           ;diskio.c: 494: proceed();
 18502  00347C  EC86  F026         	call	_proceed	;wreg free
 18503  003480                     
 18504                           ;diskio.c: 496: buff = response();
 18505  003480  EC80  F026         	call	_response	;wreg free
 18506  003484  0100               	movlb	0	; () banked
 18507  003486  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 18508                           
 18509                           ; BSR set to: 0
 18510                           ;diskio.c: 497: }while(buff!=0xFF);
 18511  003488  297E               	incf	sdc_disk_read@buff& (0+255),w,b
 18512  00348A  A4D8               	btfss	status,2,c
 18513  00348C  D7F9               	goto	l538
 18514                           
 18515                           ; BSR set to: 0
 18516                           ;diskio.c: 499: length = 0;
 18517                           
 18518                           ; BSR set to: 0
 18519  00348E  0E00               	movlw	0
 18520  003490  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18521  003492  0E00               	movlw	0
 18522  003494  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 18523                           
 18524                           ; BSR set to: 0
 18525                           ;diskio.c: 500: return RES_OK;
 18526  003496  0E00               	movlw	0
 18527  003498  0012               	return	
 18528  00349A                     __end_of_sdc_disk_read:
 18529                           	opt stack 0
 18530                           tosu	equ	0xFFF
 18531                           tosh	equ	0xFFE
 18532                           tosl	equ	0xFFD
 18533                           pclath	equ	0xFFA
 18534                           tblptru	equ	0xFF8
 18535                           tblptrh	equ	0xFF7
 18536                           tblptrl	equ	0xFF6
 18537                           tablat	equ	0xFF5
 18538                           prodh	equ	0xFF4
 18539                           prodl	equ	0xFF3
 18540                           intcon	equ	0xFF2
 18541                           intcon2	equ	0xFF1
 18542                           intcon3	equ	0xFF0
 18543                           indf0	equ	0xFEF
 18544                           postinc0	equ	0xFEE
 18545                           fsr0h	equ	0xFEA
 18546                           fsr0l	equ	0xFE9
 18547                           wreg	equ	0xFE8
 18548                           indf1	equ	0xFE7
 18549                           postinc1	equ	0xFE6
 18550                           postdec1	equ	0xFE5
 18551                           plusw1	equ	0xFE3
 18552                           fsr1h	equ	0xFE2
 18553                           fsr1l	equ	0xFE1
 18554                           indf2	equ	0xFDF
 18555                           postinc2	equ	0xFDE
 18556                           postdec2	equ	0xFDD
 18557                           plusw2	equ	0xFDB
 18558                           fsr2h	equ	0xFDA
 18559                           fsr2l	equ	0xFD9
 18560                           status	equ	0xFD8
 18561                           
 18562 ;; *************** function _response *****************
 18563 ;; Defined at:
 18564 ;;		line 59 in file "bibliotecas/SDCard.c"
 18565 ;; Parameters:    Size  Location     Type
 18566 ;;		None
 18567 ;; Auto vars:     Size  Location     Type
 18568 ;;  buff            1   32[COMRAM] unsigned char 
 18569 ;; Return value:  Size  Location     Type
 18570 ;;                  1    wreg      unsigned char 
 18571 ;; Registers used:
 18572 ;;		wreg, status,2, cstack
 18573 ;; Tracked objects:
 18574 ;;		On entry : 0/0
 18575 ;;		On exit  : 0/0
 18576 ;;		Unchanged: 0/0
 18577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18578 ;;      Params:         0       0       0       0       0       0       0       0       0
 18579 ;;      Locals:         1       0       0       0       0       0       0       0       0
 18580 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18581 ;;      Totals:         1       0       0       0       0       0       0       0       0
 18582 ;;Total ram usage:        1 bytes
 18583 ;; Hardware stack levels used:    1
 18584 ;; Hardware stack levels required when called:    4
 18585 ;; This function calls:
 18586 ;;		_leitura_SPI
 18587 ;; This function is called by:
 18588 ;;		_sdc_reset
 18589 ;;		_sdc_disk_initialize
 18590 ;;		_sdc_disk_read
 18591 ;;		_sdc_disk_write
 18592 ;; This function uses a non-reentrant model
 18593 ;;
 18594                           
 18595                           	psect	text69
 18596  004D00                     __ptext69:
 18597                           	opt stack 0
 18598  004D00                     _response:
 18599                           	opt stack 16
 18600                           
 18601                           ;SDCard.c: 61: unsigned char buff;
 18602                           ;SDCard.c: 62: LATBbits.LATB4 = 0;
 18603                           
 18604                           ; BSR set to: 0
 18605                           ;incstack = 0
 18606  004D00  988A               	bcf	3978,4,c	;volatile
 18607                           
 18608                           ;SDCard.c: 63: buff= leitura_SPI();
 18609  004D02  EC8C  F026         	call	_leitura_SPI	;wreg free
 18610  004D06  6E21               	movwf	response@buff,c
 18611                           
 18612                           ;SDCard.c: 64: return buff;
 18613  004D08  5021               	movf	response@buff,w,c
 18614  004D0A  0012               	return	
 18615  004D0C                     __end_of_response:
 18616                           	opt stack 0
 18617                           tosu	equ	0xFFF
 18618                           tosh	equ	0xFFE
 18619                           tosl	equ	0xFFD
 18620                           pclath	equ	0xFFA
 18621                           tblptru	equ	0xFF8
 18622                           tblptrh	equ	0xFF7
 18623                           tblptrl	equ	0xFF6
 18624                           tablat	equ	0xFF5
 18625                           prodh	equ	0xFF4
 18626                           prodl	equ	0xFF3
 18627                           intcon	equ	0xFF2
 18628                           intcon2	equ	0xFF1
 18629                           intcon3	equ	0xFF0
 18630                           indf0	equ	0xFEF
 18631                           postinc0	equ	0xFEE
 18632                           fsr0h	equ	0xFEA
 18633                           fsr0l	equ	0xFE9
 18634                           wreg	equ	0xFE8
 18635                           indf1	equ	0xFE7
 18636                           postinc1	equ	0xFE6
 18637                           postdec1	equ	0xFE5
 18638                           plusw1	equ	0xFE3
 18639                           fsr1h	equ	0xFE2
 18640                           fsr1l	equ	0xFE1
 18641                           indf2	equ	0xFDF
 18642                           postinc2	equ	0xFDE
 18643                           postdec2	equ	0xFDD
 18644                           plusw2	equ	0xFDB
 18645                           fsr2h	equ	0xFDA
 18646                           fsr2l	equ	0xFD9
 18647                           status	equ	0xFD8
 18648                           
 18649 ;; *************** function _proceed *****************
 18650 ;; Defined at:
 18651 ;;		line 92 in file "bibliotecas/SDCard.c"
 18652 ;; Parameters:    Size  Location     Type
 18653 ;;		None
 18654 ;; Auto vars:     Size  Location     Type
 18655 ;;		None
 18656 ;; Return value:  Size  Location     Type
 18657 ;;                  1    wreg      void 
 18658 ;; Registers used:
 18659 ;;		wreg, cstack
 18660 ;; Tracked objects:
 18661 ;;		On entry : 0/0
 18662 ;;		On exit  : 0/0
 18663 ;;		Unchanged: 0/0
 18664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18665 ;;      Params:         0       0       0       0       0       0       0       0       0
 18666 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18667 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18668 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18669 ;;Total ram usage:        0 bytes
 18670 ;; Hardware stack levels used:    1
 18671 ;; Hardware stack levels required when called:    4
 18672 ;; This function calls:
 18673 ;;		_escreve_SPI
 18674 ;; This function is called by:
 18675 ;;		_sdc_reset
 18676 ;;		_sdc_disk_initialize
 18677 ;;		_sdc_disk_read
 18678 ;;		_sdc_disk_write
 18679 ;;		_sdcard_init
 18680 ;; This function uses a non-reentrant model
 18681 ;;
 18682                           
 18683                           	psect	text70
 18684  004D0C                     __ptext70:
 18685                           	opt stack 0
 18686  004D0C                     _proceed:
 18687                           	opt stack 16
 18688                           
 18689                           ;SDCard.c: 94: LATBbits.LATB4 = 0;
 18690                           
 18691                           ;incstack = 0
 18692  004D0C  988A               	bcf	3978,4,c	;volatile
 18693                           
 18694                           ;SDCard.c: 95: escreve_SPI(0xFF);
 18695  004D0E  0EFF               	movlw	255
 18696  004D10  EC38  F026         	call	_escreve_SPI
 18697                           
 18698                           ;SDCard.c: 96: LATBbits.LATB4 = 1;
 18699  004D14  888A               	bsf	3978,4,c	;volatile
 18700  004D16  0012               	return		;funcret
 18701  004D18                     __end_of_proceed:
 18702                           	opt stack 0
 18703                           tosu	equ	0xFFF
 18704                           tosh	equ	0xFFE
 18705                           tosl	equ	0xFFD
 18706                           pclath	equ	0xFFA
 18707                           tblptru	equ	0xFF8
 18708                           tblptrh	equ	0xFF7
 18709                           tblptrl	equ	0xFF6
 18710                           tablat	equ	0xFF5
 18711                           prodh	equ	0xFF4
 18712                           prodl	equ	0xFF3
 18713                           intcon	equ	0xFF2
 18714                           intcon2	equ	0xFF1
 18715                           intcon3	equ	0xFF0
 18716                           indf0	equ	0xFEF
 18717                           postinc0	equ	0xFEE
 18718                           fsr0h	equ	0xFEA
 18719                           fsr0l	equ	0xFE9
 18720                           wreg	equ	0xFE8
 18721                           indf1	equ	0xFE7
 18722                           postinc1	equ	0xFE6
 18723                           postdec1	equ	0xFE5
 18724                           plusw1	equ	0xFE3
 18725                           fsr1h	equ	0xFE2
 18726                           fsr1l	equ	0xFE1
 18727                           indf2	equ	0xFDF
 18728                           postinc2	equ	0xFDE
 18729                           postdec2	equ	0xFDD
 18730                           plusw2	equ	0xFDB
 18731                           fsr2h	equ	0xFDA
 18732                           fsr2l	equ	0xFD9
 18733                           status	equ	0xFD8
 18734                           
 18735 ;; *************** function _command *****************
 18736 ;; Defined at:
 18737 ;;		line 125 in file "bibliotecas/SDCard.c"
 18738 ;; Parameters:    Size  Location     Type
 18739 ;;  CMD             1    wreg     unsigned char 
 18740 ;;  arg             4    5[BANK0 ] unsigned long 
 18741 ;;  CRC             1    9[BANK0 ] unsigned char 
 18742 ;; Auto vars:     Size  Location     Type
 18743 ;;  CMD             1   10[BANK0 ] unsigned char 
 18744 ;;  argument        1   11[BANK0 ] unsigned char 
 18745 ;; Return value:  Size  Location     Type
 18746 ;;                  1    wreg      void 
 18747 ;; Registers used:
 18748 ;;		wreg, status,2, status,0, cstack
 18749 ;; Tracked objects:
 18750 ;;		On entry : 0/0
 18751 ;;		On exit  : 0/0
 18752 ;;		Unchanged: 0/0
 18753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18754 ;;      Params:         0       5       0       0       0       0       0       0       0
 18755 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18756 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18757 ;;      Totals:         0       7       0       0       0       0       0       0       0
 18758 ;;Total ram usage:        7 bytes
 18759 ;; Hardware stack levels used:    1
 18760 ;; Hardware stack levels required when called:    5
 18761 ;; This function calls:
 18762 ;;		_dummy_clocks
 18763 ;;		_escreve_SPI
 18764 ;;		_wait_ready
 18765 ;; This function is called by:
 18766 ;;		_sdc_reset
 18767 ;;		_sdc_disk_initialize
 18768 ;;		_sdc_disk_read
 18769 ;;		_sdc_disk_write
 18770 ;; This function uses a non-reentrant model
 18771 ;;
 18772                           
 18773                           	psect	text71
 18774  0044E4                     __ptext71:
 18775                           	opt stack 0
 18776  0044E4                     _command:
 18777                           	opt stack 15
 18778                           
 18779                           ;incstack = 0
 18780                           ;command@CMD stored from wreg
 18781  0044E4  0100               	movlb	0	; () banked
 18782  0044E6  6F6A               	movwf	command@CMD& (0+255),b
 18783                           
 18784                           ;SDCard.c: 127: unsigned char argument;
 18785                           ;SDCard.c: 129: if (wait_ready() != 0xFF)
 18786  0044E8  EC0C  F025         	call	_wait_ready	;wreg free
 18787  0044EC  0AFF               	xorlw	255
 18788  0044EE  A4D8               	btfss	status,2,c
 18789  0044F0  D004               	goto	l318
 18790  0044F2  D008               	goto	u10460
 18791  0044F4                     
 18792                           ;SDCard.c: 132: {
 18793                           ;SDCard.c: 133: dummy_clocks(10);
 18794  0044F4  0E0A               	movlw	10
 18795  0044F6  EC8C  F024         	call	_dummy_clocks
 18796  0044FA                     l318:
 18797  0044FA  EC0C  F025         	call	_wait_ready	;wreg free
 18798  0044FE  0AFF               	xorlw	255
 18799  004500  A4D8               	btfss	status,2,c
 18800  004502  D7F8               	goto	l319
 18801  004504                     u10460:
 18802                           
 18803                           ;SDCard.c: 134: }
 18804                           ;SDCard.c: 135: }
 18805                           ;SDCard.c: 136: escreve_SPI(0xFF);
 18806  004504  0EFF               	movlw	255
 18807  004506  EC38  F026         	call	_escreve_SPI
 18808                           
 18809                           ;SDCard.c: 137: escreve_SPI(CMD);
 18810  00450A  0100               	movlb	0	; () banked
 18811  00450C  516A               	movf	command@CMD& (0+255),w,b
 18812  00450E  EC38  F026         	call	_escreve_SPI
 18813                           
 18814                           ;SDCard.c: 138: argument = arg>>24;
 18815  004512  C068  F06B         	movff	command@arg+3,command@argument
 18816                           
 18817                           ;SDCard.c: 139: escreve_SPI(argument);
 18818  004516  0100               	movlb	0	; () banked
 18819  004518  516B               	movf	command@argument& (0+255),w,b
 18820  00451A  EC38  F026         	call	_escreve_SPI
 18821                           
 18822                           ;SDCard.c: 140: argument = arg>>16;
 18823  00451E  C067  F06B         	movff	command@arg+2,command@argument
 18824                           
 18825                           ;SDCard.c: 141: escreve_SPI(argument);
 18826  004522  0100               	movlb	0	; () banked
 18827  004524  516B               	movf	command@argument& (0+255),w,b
 18828  004526  EC38  F026         	call	_escreve_SPI
 18829                           
 18830                           ;SDCard.c: 142: argument = arg>>8;
 18831  00452A  C066  F06B         	movff	command@arg+1,command@argument
 18832                           
 18833                           ;SDCard.c: 143: escreve_SPI(argument);
 18834  00452E  0100               	movlb	0	; () banked
 18835  004530  516B               	movf	command@argument& (0+255),w,b
 18836  004532  EC38  F026         	call	_escreve_SPI
 18837                           
 18838                           ;SDCard.c: 144: argument = arg;
 18839  004536  C065  F06B         	movff	command@arg,command@argument
 18840                           
 18841                           ;SDCard.c: 145: escreve_SPI(argument);
 18842  00453A  0100               	movlb	0	; () banked
 18843  00453C  516B               	movf	command@argument& (0+255),w,b
 18844  00453E  EC38  F026         	call	_escreve_SPI
 18845                           
 18846                           ;SDCard.c: 146: escreve_SPI(CRC);
 18847  004542  0100               	movlb	0	; () banked
 18848  004544  5169               	movf	command@CRC& (0+255),w,b
 18849  004546  EC38  F026         	call	_escreve_SPI
 18850  00454A  0012               	return		;funcret
 18851  00454C                     __end_of_command:
 18852                           	opt stack 0
 18853                           tosu	equ	0xFFF
 18854                           tosh	equ	0xFFE
 18855                           tosl	equ	0xFFD
 18856                           pclath	equ	0xFFA
 18857                           tblptru	equ	0xFF8
 18858                           tblptrh	equ	0xFF7
 18859                           tblptrl	equ	0xFF6
 18860                           tablat	equ	0xFF5
 18861                           prodh	equ	0xFF4
 18862                           prodl	equ	0xFF3
 18863                           intcon	equ	0xFF2
 18864                           intcon2	equ	0xFF1
 18865                           intcon3	equ	0xFF0
 18866                           indf0	equ	0xFEF
 18867                           postinc0	equ	0xFEE
 18868                           fsr0h	equ	0xFEA
 18869                           fsr0l	equ	0xFE9
 18870                           wreg	equ	0xFE8
 18871                           indf1	equ	0xFE7
 18872                           postinc1	equ	0xFE6
 18873                           postdec1	equ	0xFE5
 18874                           plusw1	equ	0xFE3
 18875                           fsr1h	equ	0xFE2
 18876                           fsr1l	equ	0xFE1
 18877                           indf2	equ	0xFDF
 18878                           postinc2	equ	0xFDE
 18879                           postdec2	equ	0xFDD
 18880                           plusw2	equ	0xFDB
 18881                           fsr2h	equ	0xFDA
 18882                           fsr2l	equ	0xFD9
 18883                           status	equ	0xFD8
 18884                           
 18885 ;; *************** function _wait_ready *****************
 18886 ;; Defined at:
 18887 ;;		line 105 in file "bibliotecas/SDCard.c"
 18888 ;; Parameters:    Size  Location     Type
 18889 ;;		None
 18890 ;; Auto vars:     Size  Location     Type
 18891 ;;  msg            10    0        unsigned char [10]
 18892 ;;  timeout         4    0[BANK0 ] unsigned long 
 18893 ;;  res             1    4[BANK0 ] unsigned char 
 18894 ;; Return value:  Size  Location     Type
 18895 ;;                  1    wreg      unsigned char 
 18896 ;; Registers used:
 18897 ;;		wreg, status,2, status,0, cstack
 18898 ;; Tracked objects:
 18899 ;;		On entry : 0/0
 18900 ;;		On exit  : 0/0
 18901 ;;		Unchanged: 0/0
 18902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18903 ;;      Params:         0       0       0       0       0       0       0       0       0
 18904 ;;      Locals:         0       5       0       0       0       0       0       0       0
 18905 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18906 ;;      Totals:         0       5       0       0       0       0       0       0       0
 18907 ;;Total ram usage:        5 bytes
 18908 ;; Hardware stack levels used:    1
 18909 ;; Hardware stack levels required when called:    4
 18910 ;; This function calls:
 18911 ;;		_leitura_SPI
 18912 ;; This function is called by:
 18913 ;;		_command
 18914 ;; This function uses a non-reentrant model
 18915 ;;
 18916                           
 18917                           	psect	text72
 18918  004A18                     __ptext72:
 18919                           	opt stack 0
 18920  004A18                     _wait_ready:
 18921                           	opt stack 15
 18922                           
 18923                           ;SDCard.c: 107: BYTE res;
 18924                           ;SDCard.c: 108: DWORD timeout = 0x7FFF;
 18925                           
 18926                           ;incstack = 0
 18927  004A18  0EFF               	movlw	255
 18928  004A1A  0100               	movlb	0	; () banked
 18929  004A1C  6F60               	movwf	wait_ready@timeout& (0+255),b
 18930  004A1E  0E7F               	movlw	127
 18931  004A20  6F61               	movwf	(wait_ready@timeout+1)& (0+255),b
 18932  004A22  0E00               	movlw	0
 18933  004A24  6F62               	movwf	(wait_ready@timeout+2)& (0+255),b
 18934  004A26  0E00               	movlw	0
 18935  004A28  6F63               	movwf	(wait_ready@timeout+3)& (0+255),b
 18936  004A2A                     
 18937                           ; BSR set to: 0
 18938                           ;SDCard.c: 112: res = leitura_SPI();
 18939                           
 18940                           ; BSR set to: 0
 18941  004A2A  EC8C  F026         	call	_leitura_SPI	;wreg free
 18942  004A2E  0100               	movlb	0	; () banked
 18943  004A30  6F64               	movwf	wait_ready@res& (0+255),b
 18944                           
 18945                           ; BSR set to: 0
 18946                           ;SDCard.c: 113: while ((res != 0xFF) && (--timeout));
 18947  004A32  2964               	incf	wait_ready@res& (0+255),w,b
 18948  004A34  B4D8               	btfsc	status,2,c
 18949  004A36  D00B               	goto	u10440
 18950                           
 18951                           ; BSR set to: 0
 18952  004A38  0760               	decf	wait_ready@timeout& (0+255),f,b
 18953  004A3A  0E00               	movlw	0
 18954  004A3C  5B61               	subwfb	(wait_ready@timeout+1)& (0+255),f,b
 18955  004A3E  5B62               	subwfb	(wait_ready@timeout+2)& (0+255),f,b
 18956  004A40  5B63               	subwfb	(wait_ready@timeout+3)& (0+255),f,b
 18957  004A42  5160               	movf	wait_ready@timeout& (0+255),w,b
 18958  004A44  1161               	iorwf	(wait_ready@timeout+1)& (0+255),w,b
 18959  004A46  1162               	iorwf	(wait_ready@timeout+2)& (0+255),w,b
 18960  004A48  1163               	iorwf	(wait_ready@timeout+3)& (0+255),w,b
 18961  004A4A  A4D8               	btfss	status,2,c
 18962  004A4C  D7EE               	goto	l310
 18963  004A4E                     u10440:
 18964                           
 18965                           ; BSR set to: 0
 18966                           ;SDCard.c: 115: return res;
 18967                           
 18968                           ; BSR set to: 0
 18969                           
 18970                           ; BSR set to: 0
 18971  004A4E  5164               	movf	wait_ready@res& (0+255),w,b
 18972  004A50  0012               	return	
 18973  004A52                     __end_of_wait_ready:
 18974                           	opt stack 0
 18975                           tosu	equ	0xFFF
 18976                           tosh	equ	0xFFE
 18977                           tosl	equ	0xFFD
 18978                           pclath	equ	0xFFA
 18979                           tblptru	equ	0xFF8
 18980                           tblptrh	equ	0xFF7
 18981                           tblptrl	equ	0xFF6
 18982                           tablat	equ	0xFF5
 18983                           prodh	equ	0xFF4
 18984                           prodl	equ	0xFF3
 18985                           intcon	equ	0xFF2
 18986                           intcon2	equ	0xFF1
 18987                           intcon3	equ	0xFF0
 18988                           indf0	equ	0xFEF
 18989                           postinc0	equ	0xFEE
 18990                           fsr0h	equ	0xFEA
 18991                           fsr0l	equ	0xFE9
 18992                           wreg	equ	0xFE8
 18993                           indf1	equ	0xFE7
 18994                           postinc1	equ	0xFE6
 18995                           postdec1	equ	0xFE5
 18996                           plusw1	equ	0xFE3
 18997                           fsr1h	equ	0xFE2
 18998                           fsr1l	equ	0xFE1
 18999                           indf2	equ	0xFDF
 19000                           postinc2	equ	0xFDE
 19001                           postdec2	equ	0xFDD
 19002                           plusw2	equ	0xFDB
 19003                           fsr2h	equ	0xFDA
 19004                           fsr2l	equ	0xFD9
 19005                           status	equ	0xFD8
 19006                           
 19007 ;; *************** function _escreve_SPI *****************
 19008 ;; Defined at:
 19009 ;;		line 98 in file "bibliotecas/SPI.c"
 19010 ;; Parameters:    Size  Location     Type
 19011 ;;  dado            1    wreg     unsigned char 
 19012 ;; Auto vars:     Size  Location     Type
 19013 ;;  dado            1    1[BANK0 ] unsigned char 
 19014 ;;  TempVar         1    0[BANK0 ] unsigned char 
 19015 ;; Return value:  Size  Location     Type
 19016 ;;                  1    wreg      void 
 19017 ;; Registers used:
 19018 ;;		wreg
 19019 ;; Tracked objects:
 19020 ;;		On entry : 0/0
 19021 ;;		On exit  : 0/0
 19022 ;;		Unchanged: 0/0
 19023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19024 ;;      Params:         0       0       0       0       0       0       0       0       0
 19025 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19026 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19027 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19028 ;;Total ram usage:        2 bytes
 19029 ;; Hardware stack levels used:    1
 19030 ;; Hardware stack levels required when called:    3
 19031 ;; This function calls:
 19032 ;;		Nothing
 19033 ;; This function is called by:
 19034 ;;		_proceed
 19035 ;;		_command
 19036 ;;		_sdc_disk_write
 19037 ;; This function uses a non-reentrant model
 19038 ;;
 19039                           
 19040                           	psect	text73
 19041  004C70                     __ptext73:
 19042                           	opt stack 0
 19043  004C70                     _escreve_SPI:
 19044                           	opt stack 16
 19045                           
 19046                           ; BSR set to: 0
 19047                           ;incstack = 0
 19048                           ;escreve_SPI@dado stored from wreg
 19049  004C70  0100               	movlb	0	; () banked
 19050  004C72  6F61               	movwf	escreve_SPI@dado& (0+255),b
 19051                           
 19052                           ;SPI.c: 100: unsigned char TempVar;
 19053                           ;SPI.c: 101: TempVar = SSPBUF;
 19054  004C74  CFC9 F060          	movff	4041,escreve_SPI@TempVar	;volatile
 19055                           
 19056                           ;SPI.c: 102: PIR1bits.SSPIF = 0;
 19057  004C78  969E               	bcf	3998,3,c	;volatile
 19058                           
 19059                           ;SPI.c: 104: SSPBUF = dado;
 19060  004C7A  C061  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 19061  004C7E  B69E               	btfsc	3998,3,c	;volatile
 19062  004C80  0012               	return	
 19063  004C82  D7FD               	goto	l397
 19064  004C84                     __end_of_escreve_SPI:
 19065                           	opt stack 0
 19066                           tosu	equ	0xFFF
 19067                           tosh	equ	0xFFE
 19068                           tosl	equ	0xFFD
 19069                           pclath	equ	0xFFA
 19070                           tblptru	equ	0xFF8
 19071                           tblptrh	equ	0xFF7
 19072                           tblptrl	equ	0xFF6
 19073                           tablat	equ	0xFF5
 19074                           prodh	equ	0xFF4
 19075                           prodl	equ	0xFF3
 19076                           intcon	equ	0xFF2
 19077                           intcon2	equ	0xFF1
 19078                           intcon3	equ	0xFF0
 19079                           indf0	equ	0xFEF
 19080                           postinc0	equ	0xFEE
 19081                           fsr0h	equ	0xFEA
 19082                           fsr0l	equ	0xFE9
 19083                           wreg	equ	0xFE8
 19084                           indf1	equ	0xFE7
 19085                           postinc1	equ	0xFE6
 19086                           postdec1	equ	0xFE5
 19087                           plusw1	equ	0xFE3
 19088                           fsr1h	equ	0xFE2
 19089                           fsr1l	equ	0xFE1
 19090                           indf2	equ	0xFDF
 19091                           postinc2	equ	0xFDE
 19092                           postdec2	equ	0xFDD
 19093                           plusw2	equ	0xFDB
 19094                           fsr2h	equ	0xFDA
 19095                           fsr2l	equ	0xFD9
 19096                           status	equ	0xFD8
 19097                           
 19098 ;; *************** function _dummy_clocks *****************
 19099 ;; Defined at:
 19100 ;;		line 74 in file "bibliotecas/SDCard.c"
 19101 ;; Parameters:    Size  Location     Type
 19102 ;;  n               1    wreg     unsigned char 
 19103 ;; Auto vars:     Size  Location     Type
 19104 ;;  n               1    2[BANK0 ] unsigned char 
 19105 ;;  i               2    3[BANK0 ] unsigned int 
 19106 ;; Return value:  Size  Location     Type
 19107 ;;                  1    wreg      void 
 19108 ;; Registers used:
 19109 ;;		wreg, status,2, status,0, cstack
 19110 ;; Tracked objects:
 19111 ;;		On entry : 0/0
 19112 ;;		On exit  : 0/0
 19113 ;;		Unchanged: 0/0
 19114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19115 ;;      Params:         0       0       0       0       0       0       0       0       0
 19116 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19117 ;;      Temps:          0       2       0       0       0       0       0       0       0
 19118 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19119 ;;Total ram usage:        5 bytes
 19120 ;; Hardware stack levels used:    1
 19121 ;; Hardware stack levels required when called:    4
 19122 ;; This function calls:
 19123 ;;		_leitura_SPI
 19124 ;; This function is called by:
 19125 ;;		_command
 19126 ;;		_sdc_disk_initialize
 19127 ;;		_sdc_disk_read
 19128 ;;		_sdc_disk_write
 19129 ;; This function uses a non-reentrant model
 19130 ;;
 19131                           
 19132                           	psect	text74
 19133  004918                     __ptext74:
 19134                           	opt stack 0
 19135  004918                     _dummy_clocks:
 19136                           	opt stack 16
 19137                           
 19138                           ;incstack = 0
 19139                           ;dummy_clocks@n stored from wreg
 19140  004918  0100               	movlb	0	; () banked
 19141  00491A  6F62               	movwf	dummy_clocks@n& (0+255),b
 19142                           
 19143                           ;SDCard.c: 76: unsigned int i;
 19144                           ;SDCard.c: 77: _delay((unsigned long)((1)*(48000000/4000.0)));
 19145  00491C  0E10               	movlw	16
 19146  00491E  0100               	movlb	0	; () banked
 19147  004920  6F60               	movwf	??_dummy_clocks& (0+255),b
 19148  004922  0E94               	movlw	148
 19149  004924                     u15067:
 19150  004924  2EE8               	decfsz	wreg,f,c
 19151  004926  D7FE               	bra	u15067
 19152  004928  2F60               	decfsz	??_dummy_clocks& (0+255),f,b
 19153  00492A  D7FC               	bra	u15067
 19154  00492C  F000               	nop	
 19155                           
 19156                           ;SDCard.c: 78: for(i=0;i<n;i++)
 19157  00492E  0E00               	movlw	0
 19158  004930  0100               	movlb	0	; () banked
 19159  004932  6F64               	movwf	(dummy_clocks@i+1)& (0+255),b
 19160  004934  0E00               	movlw	0
 19161  004936  6F63               	movwf	dummy_clocks@i& (0+255),b
 19162  004938  D007               	goto	l301
 19163  00493A                     l302:
 19164                           
 19165                           ; BSR set to: 0
 19166                           ;SDCard.c: 79: {
 19167                           ;SDCard.c: 80: LATBbits.LATB4 = 1;
 19168  00493A  888A               	bsf	3978,4,c	;volatile
 19169                           
 19170                           ; BSR set to: 0
 19171                           ;SDCard.c: 81: leitura_SPI();
 19172  00493C  EC8C  F026         	call	_leitura_SPI	;wreg free
 19173                           
 19174                           ;SDCard.c: 82: LATBbits.LATB4 = 0;
 19175  004940  988A               	bcf	3978,4,c	;volatile
 19176  004942  0100               	movlb	0	; () banked
 19177  004944  4B63               	infsnz	dummy_clocks@i& (0+255),f,b
 19178  004946  2B64               	incf	(dummy_clocks@i+1)& (0+255),f,b
 19179  004948                     l301:
 19180                           
 19181                           ; BSR set to: 0
 19182                           
 19183                           ; BSR set to: 0
 19184  004948  5162               	movf	dummy_clocks@n& (0+255),w,b
 19185  00494A  6F60               	movwf	??_dummy_clocks& (0+255),b
 19186  00494C  6B61               	clrf	(??_dummy_clocks+1)& (0+255),b
 19187  00494E  5160               	movf	??_dummy_clocks& (0+255),w,b
 19188  004950  5D63               	subwf	dummy_clocks@i& (0+255),w,b
 19189  004952  5161               	movf	(??_dummy_clocks+1)& (0+255),w,b
 19190  004954  5964               	subwfb	(dummy_clocks@i+1)& (0+255),w,b
 19191  004956  B0D8               	btfsc	status,0,c
 19192  004958  0012               	return	
 19193  00495A  D7EF               	goto	l302
 19194  00495C                     __end_of_dummy_clocks:
 19195                           	opt stack 0
 19196                           tosu	equ	0xFFF
 19197                           tosh	equ	0xFFE
 19198                           tosl	equ	0xFFD
 19199                           pclath	equ	0xFFA
 19200                           tblptru	equ	0xFF8
 19201                           tblptrh	equ	0xFF7
 19202                           tblptrl	equ	0xFF6
 19203                           tablat	equ	0xFF5
 19204                           prodh	equ	0xFF4
 19205                           prodl	equ	0xFF3
 19206                           intcon	equ	0xFF2
 19207                           intcon2	equ	0xFF1
 19208                           intcon3	equ	0xFF0
 19209                           indf0	equ	0xFEF
 19210                           postinc0	equ	0xFEE
 19211                           fsr0h	equ	0xFEA
 19212                           fsr0l	equ	0xFE9
 19213                           wreg	equ	0xFE8
 19214                           indf1	equ	0xFE7
 19215                           postinc1	equ	0xFE6
 19216                           postdec1	equ	0xFE5
 19217                           plusw1	equ	0xFE3
 19218                           fsr1h	equ	0xFE2
 19219                           fsr1l	equ	0xFE1
 19220                           indf2	equ	0xFDF
 19221                           postinc2	equ	0xFDE
 19222                           postdec2	equ	0xFDD
 19223                           plusw2	equ	0xFDB
 19224                           fsr2h	equ	0xFDA
 19225                           fsr2l	equ	0xFD9
 19226                           status	equ	0xFD8
 19227                           
 19228 ;; *************** function _leitura_SPI *****************
 19229 ;; Defined at:
 19230 ;;		line 83 in file "bibliotecas/SPI.c"
 19231 ;; Parameters:    Size  Location     Type
 19232 ;;		None
 19233 ;; Auto vars:     Size  Location     Type
 19234 ;;		None
 19235 ;; Return value:  Size  Location     Type
 19236 ;;                  1    wreg      unsigned char 
 19237 ;; Registers used:
 19238 ;;		wreg, status,2
 19239 ;; Tracked objects:
 19240 ;;		On entry : 0/0
 19241 ;;		On exit  : 0/0
 19242 ;;		Unchanged: 0/0
 19243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19244 ;;      Params:         0       0       0       0       0       0       0       0       0
 19245 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19246 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19247 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19248 ;;Total ram usage:        0 bytes
 19249 ;; Hardware stack levels used:    1
 19250 ;; Hardware stack levels required when called:    3
 19251 ;; This function calls:
 19252 ;;		Nothing
 19253 ;; This function is called by:
 19254 ;;		_response
 19255 ;;		_dummy_clocks
 19256 ;;		_wait_ready
 19257 ;;		_sdc_disk_write
 19258 ;; This function uses a non-reentrant model
 19259 ;;
 19260                           
 19261                           	psect	text75
 19262  004D18                     __ptext75:
 19263                           	opt stack 0
 19264  004D18                     _leitura_SPI:
 19265                           	opt stack 16
 19266                           
 19267                           ;SPI.c: 85: SSPBUF = 0xFF;
 19268                           
 19269                           ; BSR set to: 0
 19270                           ;incstack = 0
 19271  004D18  68C9               	setf	4041,c	;volatile
 19272                           
 19273                           ;SPI.c: 86: SSPSTATbits.BF = 0;
 19274  004D1A  90C7               	bcf	4039,0,c	;volatile
 19275  004D1C  A0C7               	btfss	4039,0,c	;volatile
 19276  004D1E  D7FE               	goto	l391
 19277                           
 19278                           ;SPI.c: 88: return (SSPBUF);
 19279  004D20  50C9               	movf	4041,w,c	;volatile
 19280  004D22  0012               	return	
 19281  004D24                     __end_of_leitura_SPI:
 19282                           	opt stack 0
 19283                           tosu	equ	0xFFF
 19284                           tosh	equ	0xFFE
 19285                           tosl	equ	0xFFD
 19286                           pclath	equ	0xFFA
 19287                           tblptru	equ	0xFF8
 19288                           tblptrh	equ	0xFF7
 19289                           tblptrl	equ	0xFF6
 19290                           tablat	equ	0xFF5
 19291                           prodh	equ	0xFF4
 19292                           prodl	equ	0xFF3
 19293                           intcon	equ	0xFF2
 19294                           intcon2	equ	0xFF1
 19295                           intcon3	equ	0xFF0
 19296                           indf0	equ	0xFEF
 19297                           postinc0	equ	0xFEE
 19298                           fsr0h	equ	0xFEA
 19299                           fsr0l	equ	0xFE9
 19300                           wreg	equ	0xFE8
 19301                           indf1	equ	0xFE7
 19302                           postinc1	equ	0xFE6
 19303                           postdec1	equ	0xFE5
 19304                           plusw1	equ	0xFE3
 19305                           fsr1h	equ	0xFE2
 19306                           fsr1l	equ	0xFE1
 19307                           indf2	equ	0xFDF
 19308                           postinc2	equ	0xFDE
 19309                           postdec2	equ	0xFDD
 19310                           plusw2	equ	0xFDB
 19311                           fsr2h	equ	0xFDA
 19312                           fsr2l	equ	0xFD9
 19313                           status	equ	0xFD8
 19314                           
 19315 ;; *************** function _disk_ioctl *****************
 19316 ;; Defined at:
 19317 ;;		line 198 in file "bibliotecas/diskio.c"
 19318 ;; Parameters:    Size  Location     Type
 19319 ;;  pdrv            1    wreg     unsigned char 
 19320 ;;  cmd             1    0[BANK0 ] unsigned char 
 19321 ;;  buff            2    1[BANK0 ] PTR void 
 19322 ;;		 -> NULL(0), 
 19323 ;; Auto vars:     Size  Location     Type
 19324 ;;  pdrv            1    3[BANK0 ] unsigned char 
 19325 ;;  result          2    0        int 
 19326 ;;  res             1    4[BANK0 ] enum E25
 19327 ;; Return value:  Size  Location     Type
 19328 ;;                  1    wreg      enum E25
 19329 ;; Registers used:
 19330 ;;		wreg, status,2, status,0
 19331 ;; Tracked objects:
 19332 ;;		On entry : 0/0
 19333 ;;		On exit  : 0/0
 19334 ;;		Unchanged: 0/0
 19335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19336 ;;      Params:         0       3       0       0       0       0       0       0       0
 19337 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19338 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19339 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19340 ;;Total ram usage:        5 bytes
 19341 ;; Hardware stack levels used:    1
 19342 ;; Hardware stack levels required when called:    3
 19343 ;; This function calls:
 19344 ;;		Nothing
 19345 ;; This function is called by:
 19346 ;;		_sync
 19347 ;; This function uses a non-reentrant model
 19348 ;;
 19349                           
 19350                           	psect	text76
 19351  004B10                     __ptext76:
 19352                           	opt stack 0
 19353  004B10                     _disk_ioctl:
 19354                           	opt stack 21
 19355                           
 19356                           ;incstack = 0
 19357                           ;disk_ioctl@pdrv stored from wreg
 19358  004B10  0100               	movlb	0	; () banked
 19359  004B12  6F63               	movwf	disk_ioctl@pdrv& (0+255),b
 19360                           
 19361                           ;diskio.c: 204: DRESULT res;
 19362                           ;diskio.c: 205: int result;
 19363                           ;diskio.c: 207: switch (pdrv) {
 19364  004B14  D006               	goto	l466
 19365  004B16                     l467:
 19366                           
 19367                           ; BSR set to: 0
 19368                           ;diskio.c: 212: return res;
 19369  004B16  5164               	movf	disk_ioctl@res& (0+255),w,b
 19370  004B18  0012               	return	
 19371  004B1A                     l469:
 19372                           
 19373                           ; BSR set to: 0
 19374                           ;diskio.c: 218: return res;
 19375  004B1A  5164               	movf	disk_ioctl@res& (0+255),w,b
 19376  004B1C  0012               	return	
 19377  004B1E                     l470:
 19378                           
 19379                           ; BSR set to: 0
 19380                           ;diskio.c: 224: return res;
 19381  004B1E  5164               	movf	disk_ioctl@res& (0+255),w,b
 19382  004B20  0012               	return	
 19383  004B22                     l466:
 19384                           
 19385                           ; BSR set to: 0
 19386  004B22  0100               	movlb	0	; () banked
 19387  004B24  5163               	movf	disk_ioctl@pdrv& (0+255),w,b
 19388                           
 19389                           ; Switch size 1, requested type "space"
 19390                           ; Number of cases is 3, Range of values is 0 to 2
 19391                           ; switch strategies available:
 19392                           ; Name         Instructions Cycles
 19393                           ; simple_byte           10     6 (average)
 19394                           ;	Chosen strategy is simple_byte
 19395  004B26  0A00               	xorlw	0	; case 0
 19396  004B28  B4D8               	btfsc	status,2,c
 19397  004B2A  D7F5               	goto	l467
 19398  004B2C  0A01               	xorlw	1	; case 1
 19399  004B2E  B4D8               	btfsc	status,2,c
 19400  004B30  D7F4               	goto	l469
 19401  004B32  0A03               	xorlw	3	; case 2
 19402  004B34  B4D8               	btfsc	status,2,c
 19403  004B36  D7F3               	goto	l470
 19404                           
 19405                           ; BSR set to: 0
 19406                           ;diskio.c: 227: return RES_PARERR;
 19407                           
 19408                           ; BSR set to: 0
 19409  004B38  0E04               	movlw	4
 19410  004B3A  0012               	return	
 19411  004B3C                     __end_of_disk_ioctl:
 19412                           	opt stack 0
 19413                           tosu	equ	0xFFF
 19414                           tosh	equ	0xFFE
 19415                           tosl	equ	0xFFD
 19416                           pclath	equ	0xFFA
 19417                           tblptru	equ	0xFF8
 19418                           tblptrh	equ	0xFF7
 19419                           tblptrl	equ	0xFF6
 19420                           tablat	equ	0xFF5
 19421                           prodh	equ	0xFF4
 19422                           prodl	equ	0xFF3
 19423                           intcon	equ	0xFF2
 19424                           intcon2	equ	0xFF1
 19425                           intcon3	equ	0xFF0
 19426                           indf0	equ	0xFEF
 19427                           postinc0	equ	0xFEE
 19428                           fsr0h	equ	0xFEA
 19429                           fsr0l	equ	0xFE9
 19430                           wreg	equ	0xFE8
 19431                           indf1	equ	0xFE7
 19432                           postinc1	equ	0xFE6
 19433                           postdec1	equ	0xFE5
 19434                           plusw1	equ	0xFE3
 19435                           fsr1h	equ	0xFE2
 19436                           fsr1l	equ	0xFE1
 19437                           indf2	equ	0xFDF
 19438                           postinc2	equ	0xFDE
 19439                           postdec2	equ	0xFDD
 19440                           plusw2	equ	0xFDB
 19441                           fsr2h	equ	0xFDA
 19442                           fsr2l	equ	0xFD9
 19443                           status	equ	0xFD8
 19444                           
 19445 ;; *************** function _get_fattime *****************
 19446 ;; Defined at:
 19447 ;;		line 809 in file "bibliotecas/tff.c"
 19448 ;; Parameters:    Size  Location     Type
 19449 ;;		None
 19450 ;; Auto vars:     Size  Location     Type
 19451 ;;  f_time          9   42[BANK0 ] struct .
 19452 ;; Return value:  Size  Location     Type
 19453 ;;                  4    0[BANK0 ] unsigned long 
 19454 ;; Registers used:
 19455 ;;		wreg, status,2, status,0
 19456 ;; Tracked objects:
 19457 ;;		On entry : 0/0
 19458 ;;		On exit  : 0/0
 19459 ;;		Unchanged: 0/0
 19460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19461 ;;      Params:         0       4       0       0       0       0       0       0       0
 19462 ;;      Locals:         0       9       0       0       0       0       0       0       0
 19463 ;;      Temps:          0      38       0       0       0       0       0       0       0
 19464 ;;      Totals:         0      51       0       0       0       0       0       0       0
 19465 ;;Total ram usage:       51 bytes
 19466 ;; Hardware stack levels used:    1
 19467 ;; Hardware stack levels required when called:    3
 19468 ;; This function calls:
 19469 ;;		Nothing
 19470 ;; This function is called by:
 19471 ;;		_f_open
 19472 ;;		_f_sync
 19473 ;; This function uses a non-reentrant model
 19474 ;;
 19475                           
 19476                           	psect	text77
 19477  003828                     __ptext77:
 19478                           	opt stack 0
 19479  003828                     _get_fattime:
 19480                           	opt stack 23
 19481                           
 19482                           ;tff.c: 811: fat_time f_time;
 19483                           ;tff.c: 813: return (DWORD)(f_time.ano ) << 25 |
 19484                           ;tff.c: 814: (DWORD)(f_time.mes) << 21 |
 19485                           ;tff.c: 815: (DWORD)(f_time.mes) << 16 |
 19486                           ;tff.c: 816: (DWORD)(f_time.hora) << 11 |
 19487                           ;tff.c: 817: (DWORD)(f_time.min) << 5 |
 19488                           ;tff.c: 818: (DWORD)(f_time.seg) >> 1;
 19489                           
 19490                           ; BSR set to: 0
 19491                           ;incstack = 0
 19492  003828  90D8               	bcf	status,0,c
 19493  00382A  0100               	movlb	0	; () banked
 19494  00382C  318F               	rrcf	(get_fattime@f_time+5)& (0+255),w,b
 19495  00382E  6F65               	movwf	(??_get_fattime+1)& (0+255),b
 19496  003830  318E               	rrcf	(get_fattime@f_time+4)& (0+255),w,b
 19497  003832  6F64               	movwf	??_get_fattime& (0+255),b
 19498  003834  518C               	movf	(get_fattime@f_time+2)& (0+255),w,b
 19499  003836  6F66               	movwf	(??_get_fattime+2)& (0+255),b
 19500  003838  518D               	movf	(get_fattime@f_time+3)& (0+255),w,b
 19501  00383A  6F67               	movwf	(??_get_fattime+3)& (0+255),b
 19502  00383C  6B68               	clrf	(??_get_fattime+4)& (0+255),b
 19503  00383E  6B69               	clrf	(??_get_fattime+5)& (0+255),b
 19504  003840  0E05               	movlw	5
 19505  003842                     u12345:
 19506  003842  90D8               	bcf	status,0,c
 19507  003844  3766               	rlcf	(??_get_fattime+2)& (0+255),f,b
 19508  003846  3767               	rlcf	(??_get_fattime+3)& (0+255),f,b
 19509  003848  3768               	rlcf	(??_get_fattime+4)& (0+255),f,b
 19510  00384A  3769               	rlcf	(??_get_fattime+5)& (0+255),f,b
 19511  00384C  2EE8               	decfsz	wreg,f,c
 19512  00384E  D7F9               	goto	u12345
 19513  003850  518A               	movf	get_fattime@f_time& (0+255),w,b
 19514  003852  6F6A               	movwf	(??_get_fattime+6)& (0+255),b
 19515  003854  518B               	movf	(get_fattime@f_time+1)& (0+255),w,b
 19516  003856  6F6B               	movwf	(??_get_fattime+7)& (0+255),b
 19517  003858  6B6C               	clrf	(??_get_fattime+8)& (0+255),b
 19518  00385A  6B6D               	clrf	(??_get_fattime+9)& (0+255),b
 19519  00385C  0E0B               	movlw	11
 19520  00385E                     u12355:
 19521  00385E  90D8               	bcf	status,0,c
 19522  003860  376A               	rlcf	(??_get_fattime+6)& (0+255),f,b
 19523  003862  376B               	rlcf	(??_get_fattime+7)& (0+255),f,b
 19524  003864  376C               	rlcf	(??_get_fattime+8)& (0+255),f,b
 19525  003866  376D               	rlcf	(??_get_fattime+9)& (0+255),f,b
 19526  003868  2EE8               	decfsz	wreg,f,c
 19527  00386A  D7F9               	goto	u12355
 19528  00386C  C091  F06E         	movff	get_fattime@f_time+7,??_get_fattime+10
 19529  003870  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 19530  003872  6B70               	clrf	(??_get_fattime+12)& (0+255),b
 19531  003874  6B71               	clrf	(??_get_fattime+13)& (0+255),b
 19532  003876  C06F  F071         	movff	??_get_fattime+11,??_get_fattime+13
 19533  00387A  C06E  F070         	movff	??_get_fattime+10,??_get_fattime+12
 19534  00387E  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 19535  003880  6B6E               	clrf	(??_get_fattime+10)& (0+255),b
 19536  003882  C091  F072         	movff	get_fattime@f_time+7,??_get_fattime+14
 19537  003886  6B73               	clrf	(??_get_fattime+15)& (0+255),b
 19538  003888  6B74               	clrf	(??_get_fattime+16)& (0+255),b
 19539  00388A  6B75               	clrf	(??_get_fattime+17)& (0+255),b
 19540  00388C  0E15               	movlw	21
 19541  00388E                     u12365:
 19542  00388E  90D8               	bcf	status,0,c
 19543  003890  3772               	rlcf	(??_get_fattime+14)& (0+255),f,b
 19544  003892  3773               	rlcf	(??_get_fattime+15)& (0+255),f,b
 19545  003894  3774               	rlcf	(??_get_fattime+16)& (0+255),f,b
 19546  003896  3775               	rlcf	(??_get_fattime+17)& (0+255),f,b
 19547  003898  2EE8               	decfsz	wreg,f,c
 19548  00389A  D7F9               	goto	u12365
 19549  00389C  C092  F076         	movff	get_fattime@f_time+8,??_get_fattime+18
 19550  0038A0  6B77               	clrf	(??_get_fattime+19)& (0+255),b
 19551  0038A2  6B78               	clrf	(??_get_fattime+20)& (0+255),b
 19552  0038A4  6B79               	clrf	(??_get_fattime+21)& (0+255),b
 19553  0038A6  0E19               	movlw	25
 19554  0038A8                     u12375:
 19555  0038A8  90D8               	bcf	status,0,c
 19556  0038AA  3776               	rlcf	(??_get_fattime+18)& (0+255),f,b
 19557  0038AC  3777               	rlcf	(??_get_fattime+19)& (0+255),f,b
 19558  0038AE  3778               	rlcf	(??_get_fattime+20)& (0+255),f,b
 19559  0038B0  3779               	rlcf	(??_get_fattime+21)& (0+255),f,b
 19560  0038B2  2EE8               	decfsz	wreg,f,c
 19561  0038B4  D7F9               	goto	u12375
 19562  0038B6  5172               	movf	(??_get_fattime+14)& (0+255),w,b
 19563  0038B8  1176               	iorwf	(??_get_fattime+18)& (0+255),w,b
 19564  0038BA  6F7A               	movwf	(??_get_fattime+22)& (0+255),b
 19565  0038BC  5173               	movf	(??_get_fattime+15)& (0+255),w,b
 19566  0038BE  1177               	iorwf	(??_get_fattime+19)& (0+255),w,b
 19567  0038C0  6F7B               	movwf	(??_get_fattime+23)& (0+255),b
 19568  0038C2  5174               	movf	(??_get_fattime+16)& (0+255),w,b
 19569  0038C4  1178               	iorwf	(??_get_fattime+20)& (0+255),w,b
 19570  0038C6  6F7C               	movwf	(??_get_fattime+24)& (0+255),b
 19571  0038C8  5175               	movf	(??_get_fattime+17)& (0+255),w,b
 19572  0038CA  1179               	iorwf	(??_get_fattime+21)& (0+255),w,b
 19573  0038CC  6F7D               	movwf	(??_get_fattime+25)& (0+255),b
 19574  0038CE  516E               	movf	(??_get_fattime+10)& (0+255),w,b
 19575  0038D0  117A               	iorwf	(??_get_fattime+22)& (0+255),w,b
 19576  0038D2  6F7E               	movwf	(??_get_fattime+26)& (0+255),b
 19577  0038D4  516F               	movf	(??_get_fattime+11)& (0+255),w,b
 19578  0038D6  117B               	iorwf	(??_get_fattime+23)& (0+255),w,b
 19579  0038D8  6F7F               	movwf	(??_get_fattime+27)& (0+255),b
 19580  0038DA  5170               	movf	(??_get_fattime+12)& (0+255),w,b
 19581  0038DC  117C               	iorwf	(??_get_fattime+24)& (0+255),w,b
 19582  0038DE  6F80               	movwf	(??_get_fattime+28)& (0+255),b
 19583  0038E0  5171               	movf	(??_get_fattime+13)& (0+255),w,b
 19584  0038E2  117D               	iorwf	(??_get_fattime+25)& (0+255),w,b
 19585  0038E4  6F81               	movwf	(??_get_fattime+29)& (0+255),b
 19586  0038E6  516A               	movf	(??_get_fattime+6)& (0+255),w,b
 19587  0038E8  117E               	iorwf	(??_get_fattime+26)& (0+255),w,b
 19588  0038EA  6F82               	movwf	(??_get_fattime+30)& (0+255),b
 19589  0038EC  516B               	movf	(??_get_fattime+7)& (0+255),w,b
 19590  0038EE  117F               	iorwf	(??_get_fattime+27)& (0+255),w,b
 19591  0038F0  6F83               	movwf	(??_get_fattime+31)& (0+255),b
 19592  0038F2  516C               	movf	(??_get_fattime+8)& (0+255),w,b
 19593  0038F4  1180               	iorwf	(??_get_fattime+28)& (0+255),w,b
 19594  0038F6  6F84               	movwf	(??_get_fattime+32)& (0+255),b
 19595  0038F8  516D               	movf	(??_get_fattime+9)& (0+255),w,b
 19596  0038FA  1181               	iorwf	(??_get_fattime+29)& (0+255),w,b
 19597  0038FC  6F85               	movwf	(??_get_fattime+33)& (0+255),b
 19598  0038FE  5166               	movf	(??_get_fattime+2)& (0+255),w,b
 19599  003900  1182               	iorwf	(??_get_fattime+30)& (0+255),w,b
 19600  003902  6F86               	movwf	(??_get_fattime+34)& (0+255),b
 19601  003904  5167               	movf	(??_get_fattime+3)& (0+255),w,b
 19602  003906  1183               	iorwf	(??_get_fattime+31)& (0+255),w,b
 19603  003908  6F87               	movwf	(??_get_fattime+35)& (0+255),b
 19604  00390A  5168               	movf	(??_get_fattime+4)& (0+255),w,b
 19605  00390C  1184               	iorwf	(??_get_fattime+32)& (0+255),w,b
 19606  00390E  6F88               	movwf	(??_get_fattime+36)& (0+255),b
 19607  003910  5169               	movf	(??_get_fattime+5)& (0+255),w,b
 19608  003912  1185               	iorwf	(??_get_fattime+33)& (0+255),w,b
 19609  003914  6F89               	movwf	(??_get_fattime+37)& (0+255),b
 19610  003916  5164               	movf	??_get_fattime& (0+255),w,b
 19611  003918  1186               	iorwf	(??_get_fattime+34)& (0+255),w,b
 19612  00391A  6F60               	movwf	?_get_fattime& (0+255),b
 19613  00391C  5165               	movf	(??_get_fattime+1)& (0+255),w,b
 19614  00391E  1187               	iorwf	(??_get_fattime+35)& (0+255),w,b
 19615  003920  6F61               	movwf	(?_get_fattime+1)& (0+255),b
 19616  003922  0E00               	movlw	0
 19617  003924  1188               	iorwf	(??_get_fattime+36)& (0+255),w,b
 19618  003926  6F62               	movwf	(?_get_fattime+2)& (0+255),b
 19619  003928  0E00               	movlw	0
 19620  00392A  1189               	iorwf	(??_get_fattime+37)& (0+255),w,b
 19621  00392C  6F63               	movwf	(?_get_fattime+3)& (0+255),b
 19622  00392E  0012               	return	
 19623  003930                     __end_of_get_fattime:
 19624                           	opt stack 0
 19625                           tosu	equ	0xFFF
 19626                           tosh	equ	0xFFE
 19627                           tosl	equ	0xFFD
 19628                           pclath	equ	0xFFA
 19629                           tblptru	equ	0xFF8
 19630                           tblptrh	equ	0xFF7
 19631                           tblptrl	equ	0xFF6
 19632                           tablat	equ	0xFF5
 19633                           prodh	equ	0xFF4
 19634                           prodl	equ	0xFF3
 19635                           intcon	equ	0xFF2
 19636                           intcon2	equ	0xFF1
 19637                           intcon3	equ	0xFF0
 19638                           indf0	equ	0xFEF
 19639                           postinc0	equ	0xFEE
 19640                           fsr0h	equ	0xFEA
 19641                           fsr0l	equ	0xFE9
 19642                           wreg	equ	0xFE8
 19643                           indf1	equ	0xFE7
 19644                           postinc1	equ	0xFE6
 19645                           postdec1	equ	0xFE5
 19646                           plusw1	equ	0xFE3
 19647                           fsr1h	equ	0xFE2
 19648                           fsr1l	equ	0xFE1
 19649                           indf2	equ	0xFDF
 19650                           postinc2	equ	0xFDE
 19651                           postdec2	equ	0xFDD
 19652                           plusw2	equ	0xFDB
 19653                           fsr2h	equ	0xFDA
 19654                           fsr2l	equ	0xFD9
 19655                           status	equ	0xFD8
 19656                           
 19657 ;; *************** function _desliga_uart *****************
 19658 ;; Defined at:
 19659 ;;		line 219 in file "bibliotecas/uart.c"
 19660 ;; Parameters:    Size  Location     Type
 19661 ;;		None
 19662 ;; Auto vars:     Size  Location     Type
 19663 ;;		None
 19664 ;; Return value:  Size  Location     Type
 19665 ;;                  1    wreg      void 
 19666 ;; Registers used:
 19667 ;;		wreg, status,2
 19668 ;; Tracked objects:
 19669 ;;		On entry : 0/0
 19670 ;;		On exit  : 0/0
 19671 ;;		Unchanged: 0/0
 19672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19673 ;;      Params:         0       0       0       0       0       0       0       0       0
 19674 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19675 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19676 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19677 ;;Total ram usage:        0 bytes
 19678 ;; Hardware stack levels used:    1
 19679 ;; Hardware stack levels required when called:    3
 19680 ;; This function calls:
 19681 ;;		Nothing
 19682 ;; This function is called by:
 19683 ;;		_escrita_sdcard
 19684 ;;		_sdcard_init
 19685 ;;		_leitura_sdcard
 19686 ;; This function uses a non-reentrant model
 19687 ;;
 19688                           
 19689                           	psect	text78
 19690  004CDA                     __ptext78:
 19691                           	opt stack 0
 19692  004CDA                     _desliga_uart:
 19693                           	opt stack 24
 19694                           
 19695                           ;uart.c: 221: TRISCbits.RC6 = 1;
 19696                           
 19697                           ; BSR set to: 0
 19698                           ;incstack = 0
 19699  004CDA  8C94               	bsf	3988,6,c	;volatile
 19700                           
 19701                           ;uart.c: 222: TRISCbits.RC7 = 1;
 19702  004CDC  8E94               	bsf	3988,7,c	;volatile
 19703                           
 19704                           ;uart.c: 225: TXSTA = 0x00;
 19705  004CDE  0E00               	movlw	0
 19706  004CE0  6EAC               	movwf	4012,c	;volatile
 19707                           
 19708                           ;uart.c: 227: RCSTA = 0x00;
 19709  004CE2  0E00               	movlw	0
 19710  004CE4  6EAB               	movwf	4011,c	;volatile
 19711  004CE6  0012               	return		;funcret
 19712  004CE8                     __end_of_desliga_uart:
 19713                           	opt stack 0
 19714                           tosu	equ	0xFFF
 19715                           tosh	equ	0xFFE
 19716                           tosl	equ	0xFFD
 19717                           pclath	equ	0xFFA
 19718                           tblptru	equ	0xFF8
 19719                           tblptrh	equ	0xFF7
 19720                           tblptrl	equ	0xFF6
 19721                           tablat	equ	0xFF5
 19722                           prodh	equ	0xFF4
 19723                           prodl	equ	0xFF3
 19724                           intcon	equ	0xFF2
 19725                           intcon2	equ	0xFF1
 19726                           intcon3	equ	0xFF0
 19727                           indf0	equ	0xFEF
 19728                           postinc0	equ	0xFEE
 19729                           fsr0h	equ	0xFEA
 19730                           fsr0l	equ	0xFE9
 19731                           wreg	equ	0xFE8
 19732                           indf1	equ	0xFE7
 19733                           postinc1	equ	0xFE6
 19734                           postdec1	equ	0xFE5
 19735                           plusw1	equ	0xFE3
 19736                           fsr1h	equ	0xFE2
 19737                           fsr1l	equ	0xFE1
 19738                           indf2	equ	0xFDF
 19739                           postinc2	equ	0xFDE
 19740                           postdec2	equ	0xFDD
 19741                           plusw2	equ	0xFDB
 19742                           fsr2h	equ	0xFDA
 19743                           fsr2l	equ	0xFD9
 19744                           status	equ	0xFD8
 19745                           
 19746 ;; *************** function _desliga_SPI *****************
 19747 ;; Defined at:
 19748 ;;		line 69 in file "bibliotecas/SPI.c"
 19749 ;; Parameters:    Size  Location     Type
 19750 ;;		None
 19751 ;; Auto vars:     Size  Location     Type
 19752 ;;		None
 19753 ;; Return value:  Size  Location     Type
 19754 ;;                  1    wreg      void 
 19755 ;; Registers used:
 19756 ;;		wreg, status,2
 19757 ;; Tracked objects:
 19758 ;;		On entry : 0/0
 19759 ;;		On exit  : 0/0
 19760 ;;		Unchanged: 0/0
 19761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19762 ;;      Params:         0       0       0       0       0       0       0       0       0
 19763 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19764 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19765 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19766 ;;Total ram usage:        0 bytes
 19767 ;; Hardware stack levels used:    1
 19768 ;; Hardware stack levels required when called:    3
 19769 ;; This function calls:
 19770 ;;		Nothing
 19771 ;; This function is called by:
 19772 ;;		_escrita_sdcard
 19773 ;;		_leitura_sdcard
 19774 ;; This function uses a non-reentrant model
 19775 ;;
 19776                           
 19777                           	psect	text79
 19778  004D24                     __ptext79:
 19779                           	opt stack 0
 19780  004D24                     _desliga_SPI:
 19781                           	opt stack 24
 19782                           
 19783                           ;SPI.c: 71: SSPSTAT = 0x00;
 19784                           
 19785                           ;incstack = 0
 19786  004D24  0E00               	movlw	0
 19787  004D26  6EC7               	movwf	4039,c	;volatile
 19788                           
 19789                           ;SPI.c: 72: SSPCON1 = 0x00;
 19790  004D28  0E00               	movlw	0
 19791  004D2A  6EC6               	movwf	4038,c	;volatile
 19792                           
 19793                           ;SPI.c: 73: SSPCON1bits.SSPEN = 0;
 19794  004D2C  9AC6               	bcf	4038,5,c	;volatile
 19795  004D2E  0012               	return		;funcret
 19796  004D30                     __end_of_desliga_SPI:
 19797                           	opt stack 0
 19798                           tosu	equ	0xFFF
 19799                           tosh	equ	0xFFE
 19800                           tosl	equ	0xFFD
 19801                           pclath	equ	0xFFA
 19802                           tblptru	equ	0xFF8
 19803                           tblptrh	equ	0xFF7
 19804                           tblptrl	equ	0xFF6
 19805                           tablat	equ	0xFF5
 19806                           prodh	equ	0xFF4
 19807                           prodl	equ	0xFF3
 19808                           intcon	equ	0xFF2
 19809                           intcon2	equ	0xFF1
 19810                           intcon3	equ	0xFF0
 19811                           indf0	equ	0xFEF
 19812                           postinc0	equ	0xFEE
 19813                           fsr0h	equ	0xFEA
 19814                           fsr0l	equ	0xFE9
 19815                           wreg	equ	0xFE8
 19816                           indf1	equ	0xFE7
 19817                           postinc1	equ	0xFE6
 19818                           postdec1	equ	0xFE5
 19819                           plusw1	equ	0xFE3
 19820                           fsr1h	equ	0xFE2
 19821                           fsr1l	equ	0xFE1
 19822                           indf2	equ	0xFDF
 19823                           postinc2	equ	0xFDE
 19824                           postdec2	equ	0xFDD
 19825                           plusw2	equ	0xFDB
 19826                           fsr2h	equ	0xFDA
 19827                           fsr2l	equ	0xFD9
 19828                           status	equ	0xFD8
 19829                           
 19830 ;; *************** function _dados_gps_to_sd *****************
 19831 ;; Defined at:
 19832 ;;		line 632 in file "bibliotecas/GPS.c"
 19833 ;; Parameters:    Size  Location     Type
 19834 ;;		None
 19835 ;; Auto vars:     Size  Location     Type
 19836 ;;		None
 19837 ;; Return value:  Size  Location     Type
 19838 ;;                  1    wreg      void 
 19839 ;; Registers used:
 19840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19841 ;; Tracked objects:
 19842 ;;		On entry : 0/0
 19843 ;;		On exit  : 0/0
 19844 ;;		Unchanged: 0/0
 19845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19846 ;;      Params:         0       0       0       0       0       0       0       0       0
 19847 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19848 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19849 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19850 ;;Total ram usage:        0 bytes
 19851 ;; Hardware stack levels used:    1
 19852 ;; Hardware stack levels required when called:    5
 19853 ;; This function calls:
 19854 ;;		_monta_sd
 19855 ;; This function is called by:
 19856 ;;		_main
 19857 ;; This function uses a non-reentrant model
 19858 ;;
 19859                           
 19860                           	psect	text80
 19861  00495C                     __ptext80:
 19862                           	opt stack 0
 19863  00495C                     _dados_gps_to_sd:
 19864                           	opt stack 25
 19865                           
 19866                           ;GPS.c: 634: monta_sd(0, rawTime);
 19867                           
 19868                           ;incstack = 0
 19869  00495C  0E6E               	movlw	low _rawTime
 19870  00495E  0100               	movlb	0	; () banked
 19871  004960  6F66               	movwf	monta_sd@dado& (0+255),b
 19872  004962  0E01               	movlw	high _rawTime
 19873  004964  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 19874  004966  0E00               	movlw	0
 19875  004968  ECE6  F01A         	call	_monta_sd
 19876                           
 19877                           ;GPS.c: 635: monta_sd(1, rawDate);
 19878  00496C  0E80               	movlw	low _rawDate
 19879  00496E  0100               	movlb	0	; () banked
 19880  004970  6F66               	movwf	monta_sd@dado& (0+255),b
 19881  004972  0E01               	movlw	high _rawDate
 19882  004974  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 19883  004976  0E01               	movlw	1
 19884  004978  ECE6  F01A         	call	_monta_sd
 19885                           
 19886                           ;GPS.c: 636: monta_sd(2, rawLatitude);
 19887  00497C  0E55               	movlw	low _rawLatitude
 19888  00497E  0100               	movlb	0	; () banked
 19889  004980  6F66               	movwf	monta_sd@dado& (0+255),b
 19890  004982  0E01               	movlw	high _rawLatitude
 19891  004984  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 19892  004986  0E02               	movlw	2
 19893  004988  ECE6  F01A         	call	_monta_sd
 19894                           
 19895                           ;GPS.c: 637: monta_sd(3, rawLongitude);
 19896  00498C  0E48               	movlw	low _rawLongitude
 19897  00498E  0100               	movlb	0	; () banked
 19898  004990  6F66               	movwf	monta_sd@dado& (0+255),b
 19899  004992  0E01               	movlw	high _rawLongitude
 19900  004994  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 19901  004996  0E03               	movlw	3
 19902  004998  ECE6  F01A         	call	_monta_sd
 19903  00499C  0012               	return	
 19904  00499E                     __end_of_dados_gps_to_sd:
 19905                           	opt stack 0
 19906                           tosu	equ	0xFFF
 19907                           tosh	equ	0xFFE
 19908                           tosl	equ	0xFFD
 19909                           pclath	equ	0xFFA
 19910                           tblptru	equ	0xFF8
 19911                           tblptrh	equ	0xFF7
 19912                           tblptrl	equ	0xFF6
 19913                           tablat	equ	0xFF5
 19914                           prodh	equ	0xFF4
 19915                           prodl	equ	0xFF3
 19916                           intcon	equ	0xFF2
 19917                           intcon2	equ	0xFF1
 19918                           intcon3	equ	0xFF0
 19919                           indf0	equ	0xFEF
 19920                           postinc0	equ	0xFEE
 19921                           fsr0h	equ	0xFEA
 19922                           fsr0l	equ	0xFE9
 19923                           wreg	equ	0xFE8
 19924                           indf1	equ	0xFE7
 19925                           postinc1	equ	0xFE6
 19926                           postdec1	equ	0xFE5
 19927                           plusw1	equ	0xFE3
 19928                           fsr1h	equ	0xFE2
 19929                           fsr1l	equ	0xFE1
 19930                           indf2	equ	0xFDF
 19931                           postinc2	equ	0xFDE
 19932                           postdec2	equ	0xFDD
 19933                           plusw2	equ	0xFDB
 19934                           fsr2h	equ	0xFDA
 19935                           fsr2l	equ	0xFD9
 19936                           status	equ	0xFD8
 19937                           
 19938 ;; *************** function _monta_sd *****************
 19939 ;; Defined at:
 19940 ;;		line 286 in file "bibliotecas/SDCard.c"
 19941 ;; Parameters:    Size  Location     Type
 19942 ;;  index           1    wreg     unsigned char 
 19943 ;;  dado            2    6[BANK0 ] PTR unsigned char 
 19944 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 19945 ;; Auto vars:     Size  Location     Type
 19946 ;;  index           1    8[BANK0 ] unsigned char 
 19947 ;;  i               1   10[BANK0 ] unsigned char 
 19948 ;;  size            1    9[BANK0 ] unsigned char 
 19949 ;; Return value:  Size  Location     Type
 19950 ;;                  1    wreg      void 
 19951 ;; Registers used:
 19952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19953 ;; Tracked objects:
 19954 ;;		On entry : 0/0
 19955 ;;		On exit  : 0/0
 19956 ;;		Unchanged: 0/0
 19957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19958 ;;      Params:         0       2       0       0       0       0       0       0       0
 19959 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19960 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19961 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19962 ;;Total ram usage:        5 bytes
 19963 ;; Hardware stack levels used:    1
 19964 ;; Hardware stack levels required when called:    4
 19965 ;; This function calls:
 19966 ;;		_strlen
 19967 ;; This function is called by:
 19968 ;;		_dados_gps_to_sd
 19969 ;; This function uses a non-reentrant model
 19970 ;;
 19971                           
 19972                           	psect	text81
 19973  0035CC                     __ptext81:
 19974                           	opt stack 0
 19975  0035CC                     _monta_sd:
 19976                           	opt stack 25
 19977                           
 19978                           ;incstack = 0
 19979                           ;monta_sd@index stored from wreg
 19980  0035CC  0100               	movlb	0	; () banked
 19981  0035CE  6F68               	movwf	monta_sd@index& (0+255),b
 19982                           
 19983                           ;SDCard.c: 288: unsigned char i, size;
 19984                           ;SDCard.c: 289: size = strlen(dado);
 19985  0035D0  C066  F060         	movff	monta_sd@dado,strlen@s
 19986  0035D4  C067  F061         	movff	monta_sd@dado+1,strlen@s+1
 19987  0035D8  ECCF  F024         	call	_strlen	;wreg free
 19988  0035DC  0100               	movlb	0	; () banked
 19989  0035DE  5160               	movf	?_strlen& (0+255),w,b
 19990  0035E0  6F69               	movwf	monta_sd@size& (0+255),b
 19991                           
 19992                           ;SDCard.c: 290: switch(index)
 19993  0035E2  D07C               	goto	l342
 19994  0035E4                     
 19995                           ; BSR set to: 0
 19996                           ;SDCard.c: 293: for(i=0; i<6;i++)
 19997                           
 19998                           ; BSR set to: 0
 19999  0035E4  0E00               	movlw	0
 20000  0035E6  6F6A               	movwf	monta_sd@i& (0+255),b
 20001  0035E8                     l11049:
 20002                           
 20003                           ; BSR set to: 0
 20004  0035E8  0E05               	movlw	5
 20005  0035EA  656A               	cpfsgt	monta_sd@i& (0+255),b
 20006  0035EC  D001               	goto	l344
 20007  0035EE  0012               	return	
 20008  0035F0                     l344:
 20009                           
 20010                           ; BSR set to: 0
 20011                           ;SDCard.c: 294: {
 20012                           ;SDCard.c: 295: string_dado.hora[i] = *dado;
 20013                           
 20014                           ; BSR set to: 0
 20015  0035F0  C066  FFD9         	movff	monta_sd@dado,fsr2l
 20016  0035F4  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 20017  0035F8  516A               	movf	monta_sd@i& (0+255),w,b
 20018  0035FA  0D01               	mullw	1
 20019  0035FC  0E07               	movlw	low (_string_dado+7)
 20020  0035FE  24F3               	addwf	prodl,w,c
 20021  003600  6EE1               	movwf	fsr1l,c
 20022  003602  0E01               	movlw	high (_string_dado+7)
 20023  003604  20F4               	addwfc	prodh,w,c
 20024  003606  6EE2               	movwf	fsr1h,c
 20025  003608  CFDF FFE7          	movff	indf2,indf1
 20026                           
 20027                           ; BSR set to: 0
 20028                           ;SDCard.c: 296: dado++;
 20029  00360C  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 20030  00360E  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 20031                           
 20032                           ; BSR set to: 0
 20033  003610  2B6A               	incf	monta_sd@i& (0+255),f,b
 20034  003612  D7EA               	goto	l11049
 20035  003614                     
 20036                           ; BSR set to: 0
 20037                           ;SDCard.c: 301: for(i=0; i<6;i++)
 20038                           
 20039                           ; BSR set to: 0
 20040  003614  0E00               	movlw	0
 20041  003616  6F6A               	movwf	monta_sd@i& (0+255),b
 20042  003618                     l11063:
 20043                           
 20044                           ; BSR set to: 0
 20045  003618  0E05               	movlw	5
 20046  00361A  656A               	cpfsgt	monta_sd@i& (0+255),b
 20047  00361C  D001               	goto	l348
 20048  00361E  D012               	goto	u14270
 20049  003620                     l348:
 20050                           
 20051                           ; BSR set to: 0
 20052                           ;SDCard.c: 302: {
 20053                           ;SDCard.c: 303: string_dado.data[i] = *dado;
 20054                           
 20055                           ; BSR set to: 0
 20056  003620  C066  FFD9         	movff	monta_sd@dado,fsr2l
 20057  003624  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 20058  003628  516A               	movf	monta_sd@i& (0+255),w,b
 20059  00362A  0D01               	mullw	1
 20060  00362C  0E00               	movlw	low _string_dado
 20061  00362E  24F3               	addwf	prodl,w,c
 20062  003630  6EE1               	movwf	fsr1l,c
 20063  003632  0E01               	movlw	high _string_dado
 20064  003634  20F4               	addwfc	prodh,w,c
 20065  003636  6EE2               	movwf	fsr1h,c
 20066  003638  CFDF FFE7          	movff	indf2,indf1
 20067                           
 20068                           ; BSR set to: 0
 20069                           ;SDCard.c: 304: dado++;
 20070  00363C  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 20071  00363E  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 20072                           
 20073                           ; BSR set to: 0
 20074  003640  2B6A               	incf	monta_sd@i& (0+255),f,b
 20075  003642  D7EA               	goto	l11063
 20076  003644                     u14270:
 20077                           
 20078                           ; BSR set to: 0
 20079                           ;SDCard.c: 307: {
 20080                           ;SDCard.c: 308: data_hoje = 1;
 20081                           
 20082                           ; BSR set to: 0
 20083                           
 20084                           ;SDCard.c: 305: }
 20085                           ;SDCard.c: 306: if(string_dado.data)
 20086  003644  0E01               	movlw	1
 20087  003646  6E35               	movwf	_data_hoje,c
 20088                           
 20089                           ; BSR set to: 0
 20090                           ;SDCard.c: 311: }
 20091                           ;SDCard.c: 312: break;
 20092  003648  0012               	return	
 20093  00364A                     
 20094                           ; BSR set to: 0
 20095                           ;SDCard.c: 315: for(i=0; i<13;i++)
 20096                           
 20097                           ; BSR set to: 0
 20098  00364A  0E00               	movlw	0
 20099  00364C  6F6A               	movwf	monta_sd@i& (0+255),b
 20100  00364E                     l11079:
 20101                           
 20102                           ; BSR set to: 0
 20103  00364E  0E0C               	movlw	12
 20104  003650  656A               	cpfsgt	monta_sd@i& (0+255),b
 20105  003652  D001               	goto	l352
 20106  003654  0012               	return	
 20107  003656                     l352:
 20108                           
 20109                           ; BSR set to: 0
 20110                           ;SDCard.c: 316: {
 20111                           ;SDCard.c: 317: string_dado.LAT[i] = *dado;
 20112                           
 20113                           ; BSR set to: 0
 20114  003656  C066  FFD9         	movff	monta_sd@dado,fsr2l
 20115  00365A  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 20116  00365E  516A               	movf	monta_sd@i& (0+255),w,b
 20117  003660  0D01               	mullw	1
 20118  003662  0E12               	movlw	low (_string_dado+18)
 20119  003664  24F3               	addwf	prodl,w,c
 20120  003666  6EE1               	movwf	fsr1l,c
 20121  003668  0E01               	movlw	high (_string_dado+18)
 20122  00366A  20F4               	addwfc	prodh,w,c
 20123  00366C  6EE2               	movwf	fsr1h,c
 20124  00366E  CFDF FFE7          	movff	indf2,indf1
 20125                           
 20126                           ; BSR set to: 0
 20127                           ;SDCard.c: 318: dado++;
 20128  003672  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 20129  003674  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 20130                           
 20131                           ; BSR set to: 0
 20132  003676  2B6A               	incf	monta_sd@i& (0+255),f,b
 20133  003678  D7EA               	goto	l11079
 20134  00367A                     
 20135                           ; BSR set to: 0
 20136                           ;SDCard.c: 324: for(i=0; i<13;i++)
 20137                           
 20138                           ; BSR set to: 0
 20139  00367A  0E00               	movlw	0
 20140  00367C  6F6A               	movwf	monta_sd@i& (0+255),b
 20141  00367E                     l11093:
 20142                           
 20143                           ; BSR set to: 0
 20144  00367E  0E0C               	movlw	12
 20145  003680  656A               	cpfsgt	monta_sd@i& (0+255),b
 20146  003682  D001               	goto	l355
 20147  003684  0012               	return	
 20148  003686                     l355:
 20149                           
 20150                           ; BSR set to: 0
 20151                           ;SDCard.c: 325: {
 20152                           ;SDCard.c: 326: string_dado.LONG[i] = *dado;
 20153                           
 20154                           ; BSR set to: 0
 20155  003686  C066  FFD9         	movff	monta_sd@dado,fsr2l
 20156  00368A  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 20157  00368E  516A               	movf	monta_sd@i& (0+255),w,b
 20158  003690  0D01               	mullw	1
 20159  003692  0E1F               	movlw	low (_string_dado+31)
 20160  003694  24F3               	addwf	prodl,w,c
 20161  003696  6EE1               	movwf	fsr1l,c
 20162  003698  0E01               	movlw	high (_string_dado+31)
 20163  00369A  20F4               	addwfc	prodh,w,c
 20164  00369C  6EE2               	movwf	fsr1h,c
 20165  00369E  CFDF FFE7          	movff	indf2,indf1
 20166                           
 20167                           ; BSR set to: 0
 20168                           ;SDCard.c: 327: dado++;
 20169  0036A2  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 20170  0036A4  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 20171                           
 20172                           ; BSR set to: 0
 20173  0036A6  2B6A               	incf	monta_sd@i& (0+255),f,b
 20174  0036A8  D7EA               	goto	l11093
 20175  0036AA                     
 20176                           ; BSR set to: 0
 20177                           ;SDCard.c: 333: for(i=0; i<size;i++)
 20178                           
 20179                           ; BSR set to: 0
 20180  0036AA  0E00               	movlw	0
 20181  0036AC  6F6A               	movwf	monta_sd@i& (0+255),b
 20182  0036AE  D011               	goto	l358
 20183  0036B0                     
 20184                           ; BSR set to: 0
 20185                           ;SDCard.c: 334: {
 20186                           ;SDCard.c: 335: string_dado.LONG[i] = *dado;
 20187                           
 20188                           ; BSR set to: 0
 20189  0036B0  C066  FFD9         	movff	monta_sd@dado,fsr2l
 20190  0036B4  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 20191  0036B8  516A               	movf	monta_sd@i& (0+255),w,b
 20192  0036BA  0D01               	mullw	1
 20193  0036BC  0E1F               	movlw	low (_string_dado+31)
 20194  0036BE  24F3               	addwf	prodl,w,c
 20195  0036C0  6EE1               	movwf	fsr1l,c
 20196  0036C2  0E01               	movlw	high (_string_dado+31)
 20197  0036C4  20F4               	addwfc	prodh,w,c
 20198  0036C6  6EE2               	movwf	fsr1h,c
 20199  0036C8  CFDF FFE7          	movff	indf2,indf1
 20200                           
 20201                           ; BSR set to: 0
 20202                           ;SDCard.c: 336: dado++;
 20203  0036CC  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 20204  0036CE  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 20205                           
 20206                           ; BSR set to: 0
 20207  0036D0  2B6A               	incf	monta_sd@i& (0+255),f,b
 20208  0036D2                     l358:
 20209                           
 20210                           ; BSR set to: 0
 20211                           
 20212                           ; BSR set to: 0
 20213  0036D2  5169               	movf	monta_sd@size& (0+255),w,b
 20214  0036D4  5D6A               	subwf	monta_sd@i& (0+255),w,b
 20215  0036D6  B0D8               	btfsc	status,0,c
 20216  0036D8  0012               	return	
 20217  0036DA  D7EA               	goto	l359
 20218  0036DC                     l342:
 20219                           
 20220                           ; BSR set to: 0
 20221                           
 20222                           ; BSR set to: 0
 20223  0036DC  5168               	movf	monta_sd@index& (0+255),w,b
 20224                           
 20225                           ; Switch size 1, requested type "space"
 20226                           ; Number of cases is 5, Range of values is 0 to 4
 20227                           ; switch strategies available:
 20228                           ; Name         Instructions Cycles
 20229                           ; simple_byte           16     9 (average)
 20230                           ;	Chosen strategy is simple_byte
 20231  0036DE  0A00               	xorlw	0	; case 0
 20232  0036E0  B4D8               	btfsc	status,2,c
 20233  0036E2  D780               	goto	l343
 20234  0036E4  0A01               	xorlw	1	; case 1
 20235  0036E6  B4D8               	btfsc	status,2,c
 20236  0036E8  D795               	goto	l347
 20237  0036EA  0A03               	xorlw	3	; case 2
 20238  0036EC  B4D8               	btfsc	status,2,c
 20239  0036EE  D7AD               	goto	l351
 20240  0036F0  0A01               	xorlw	1	; case 3
 20241  0036F2  B4D8               	btfsc	status,2,c
 20242  0036F4  D7C2               	goto	l354
 20243  0036F6  0A07               	xorlw	7	; case 4
 20244  0036F8  A4D8               	btfss	status,2,c
 20245  0036FA  0012               	return	
 20246  0036FC  D7D6               	goto	l357
 20247  0036FE                     __end_of_monta_sd:
 20248                           	opt stack 0
 20249                           tosu	equ	0xFFF
 20250                           tosh	equ	0xFFE
 20251                           tosl	equ	0xFFD
 20252                           pclath	equ	0xFFA
 20253                           tblptru	equ	0xFF8
 20254                           tblptrh	equ	0xFF7
 20255                           tblptrl	equ	0xFF6
 20256                           tablat	equ	0xFF5
 20257                           prodh	equ	0xFF4
 20258                           prodl	equ	0xFF3
 20259                           intcon	equ	0xFF2
 20260                           intcon2	equ	0xFF1
 20261                           intcon3	equ	0xFF0
 20262                           indf0	equ	0xFEF
 20263                           postinc0	equ	0xFEE
 20264                           fsr0h	equ	0xFEA
 20265                           fsr0l	equ	0xFE9
 20266                           wreg	equ	0xFE8
 20267                           indf1	equ	0xFE7
 20268                           postinc1	equ	0xFE6
 20269                           postdec1	equ	0xFE5
 20270                           plusw1	equ	0xFE3
 20271                           fsr1h	equ	0xFE2
 20272                           fsr1l	equ	0xFE1
 20273                           indf2	equ	0xFDF
 20274                           postinc2	equ	0xFDE
 20275                           postdec2	equ	0xFDD
 20276                           plusw2	equ	0xFDB
 20277                           fsr2h	equ	0xFDA
 20278                           fsr2l	equ	0xFD9
 20279                           status	equ	0xFD8
 20280                           
 20281 ;; *************** function _strlen *****************
 20282 ;; Defined at:
 20283 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 20284 ;; Parameters:    Size  Location     Type
 20285 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20286 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 20287 ;; Auto vars:     Size  Location     Type
 20288 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 20289 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 20290 ;; Return value:  Size  Location     Type
 20291 ;;                  2    0[BANK0 ] unsigned int 
 20292 ;; Registers used:
 20293 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20294 ;; Tracked objects:
 20295 ;;		On entry : 0/0
 20296 ;;		On exit  : 0/0
 20297 ;;		Unchanged: 0/0
 20298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20299 ;;      Params:         0       2       0       0       0       0       0       0       0
 20300 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20301 ;;      Temps:          0       2       0       0       0       0       0       0       0
 20302 ;;      Totals:         0       6       0       0       0       0       0       0       0
 20303 ;;Total ram usage:        6 bytes
 20304 ;; Hardware stack levels used:    1
 20305 ;; Hardware stack levels required when called:    3
 20306 ;; This function calls:
 20307 ;;		Nothing
 20308 ;; This function is called by:
 20309 ;;		_monta_sd
 20310 ;; This function uses a non-reentrant model
 20311 ;;
 20312                           
 20313                           	psect	text82
 20314  00499E                     __ptext82:
 20315                           	opt stack 0
 20316  00499E                     _strlen:
 20317                           	opt stack 25
 20318                           
 20319                           ; BSR set to: 0
 20320                           ;incstack = 0
 20321  00499E  C060  F064         	movff	strlen@s,strlen@cp
 20322  0049A2  C061  F065         	movff	strlen@s+1,strlen@cp+1
 20323  0049A6  D003               	goto	l2017
 20324  0049A8  0100               	movlb	0	; () banked
 20325  0049AA  4B64               	infsnz	strlen@cp& (0+255),f,b
 20326  0049AC  2B65               	incf	(strlen@cp+1)& (0+255),f,b
 20327  0049AE                     l2017:
 20328                           
 20329                           ; BSR set to: 0
 20330  0049AE  C064  FFD9         	movff	strlen@cp,fsr2l
 20331  0049B2  C065  FFDA         	movff	strlen@cp+1,fsr2h
 20332  0049B6  50DF               	movf	indf2,w,c
 20333  0049B8  A4D8               	btfss	status,2,c
 20334  0049BA  D7F6               	goto	l2018
 20335  0049BC  C060  F062         	movff	strlen@s,??_strlen
 20336  0049C0  C061  F063         	movff	strlen@s+1,??_strlen+1
 20337  0049C4  0100               	movlb	0	; () banked
 20338  0049C6  1F62               	comf	??_strlen& (0+255),f,b
 20339  0049C8  1F63               	comf	(??_strlen+1)& (0+255),f,b
 20340  0049CA  4B62               	infsnz	??_strlen& (0+255),f,b
 20341  0049CC  2B63               	incf	(??_strlen+1)& (0+255),f,b
 20342  0049CE  5164               	movf	strlen@cp& (0+255),w,b
 20343  0049D0  2562               	addwf	??_strlen& (0+255),w,b
 20344  0049D2  6F60               	movwf	?_strlen& (0+255),b
 20345  0049D4  5165               	movf	(strlen@cp+1)& (0+255),w,b
 20346  0049D6  2163               	addwfc	(??_strlen+1)& (0+255),w,b
 20347  0049D8  6F61               	movwf	(?_strlen+1)& (0+255),b
 20348  0049DA  0012               	return	
 20349  0049DC                     __end_of_strlen:
 20350                           	opt stack 0
 20351                           tosu	equ	0xFFF
 20352                           tosh	equ	0xFFE
 20353                           tosl	equ	0xFFD
 20354                           pclath	equ	0xFFA
 20355                           tblptru	equ	0xFF8
 20356                           tblptrh	equ	0xFF7
 20357                           tblptrl	equ	0xFF6
 20358                           tablat	equ	0xFF5
 20359                           prodh	equ	0xFF4
 20360                           prodl	equ	0xFF3
 20361                           intcon	equ	0xFF2
 20362                           intcon2	equ	0xFF1
 20363                           intcon3	equ	0xFF0
 20364                           indf0	equ	0xFEF
 20365                           postinc0	equ	0xFEE
 20366                           fsr0h	equ	0xFEA
 20367                           fsr0l	equ	0xFE9
 20368                           wreg	equ	0xFE8
 20369                           indf1	equ	0xFE7
 20370                           postinc1	equ	0xFE6
 20371                           postdec1	equ	0xFE5
 20372                           plusw1	equ	0xFE3
 20373                           fsr1h	equ	0xFE2
 20374                           fsr1l	equ	0xFE1
 20375                           indf2	equ	0xFDF
 20376                           postinc2	equ	0xFDE
 20377                           postdec2	equ	0xFDD
 20378                           plusw2	equ	0xFDB
 20379                           fsr2h	equ	0xFDA
 20380                           fsr2l	equ	0xFD9
 20381                           status	equ	0xFD8
 20382                           
 20383 ;; *************** function _isr *****************
 20384 ;; Defined at:
 20385 ;;		line 102 in file "main.c"
 20386 ;; Parameters:    Size  Location     Type
 20387 ;;		None
 20388 ;; Auto vars:     Size  Location     Type
 20389 ;;  cont            1   31[COMRAM] unsigned char 
 20390 ;; Return value:  Size  Location     Type
 20391 ;;                  1    wreg      void 
 20392 ;; Registers used:
 20393 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20394 ;; Tracked objects:
 20395 ;;		On entry : 0/0
 20396 ;;		On exit  : 0/0
 20397 ;;		Unchanged: 0/0
 20398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20399 ;;      Params:         0       0       0       0       0       0       0       0       0
 20400 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20401 ;;      Temps:         20       0       0       0       0       0       0       0       0
 20402 ;;      Totals:        21       0       0       0       0       0       0       0       0
 20403 ;;Total ram usage:       21 bytes
 20404 ;; Hardware stack levels used:    1
 20405 ;; Hardware stack levels required when called:    2
 20406 ;; This function calls:
 20407 ;;		_GPSRead
 20408 ;;		_recebe_dado_uart
 20409 ;;		i2_write_timer_zero
 20410 ;; This function is called by:
 20411 ;;		Interrupt level 2
 20412 ;; This function uses a non-reentrant model
 20413 ;;
 20414                           
 20415                           	psect	intcode
 20416  000008                     __pintcode:
 20417                           	opt stack 0
 20418  000008                     _isr:
 20419                           	opt stack 13
 20420                           
 20421                           ; BSR set to: 0
 20422                           ;incstack = 0
 20423  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20424  00000A  ED03  F019         	call	int_func,f	;refresh shadow registers
 20425                           tosu	equ	0xFFF
 20426                           tosh	equ	0xFFE
 20427                           tosl	equ	0xFFD
 20428                           pclath	equ	0xFFA
 20429                           tblptru	equ	0xFF8
 20430                           tblptrh	equ	0xFF7
 20431                           tblptrl	equ	0xFF6
 20432                           tablat	equ	0xFF5
 20433                           prodh	equ	0xFF4
 20434                           prodl	equ	0xFF3
 20435                           intcon	equ	0xFF2
 20436                           intcon2	equ	0xFF1
 20437                           intcon3	equ	0xFF0
 20438                           indf0	equ	0xFEF
 20439                           postinc0	equ	0xFEE
 20440                           fsr0h	equ	0xFEA
 20441                           fsr0l	equ	0xFE9
 20442                           wreg	equ	0xFE8
 20443                           indf1	equ	0xFE7
 20444                           postinc1	equ	0xFE6
 20445                           postdec1	equ	0xFE5
 20446                           plusw1	equ	0xFE3
 20447                           fsr1h	equ	0xFE2
 20448                           fsr1l	equ	0xFE1
 20449                           indf2	equ	0xFDF
 20450                           postinc2	equ	0xFDE
 20451                           postdec2	equ	0xFDD
 20452                           plusw2	equ	0xFDB
 20453                           fsr2h	equ	0xFDA
 20454                           fsr2l	equ	0xFD9
 20455                           status	equ	0xFD8
 20456                           
 20457                           	psect	intcode_body
 20458  003206                     __pintcode_body:
 20459                           	opt stack 13
 20460  003206                     int_func:
 20461                           	opt stack 13
 20462  003206  0006               	pop		; remove dummy address from shadow register refresh
 20463  003208  CFFA F00E          	movff	pclath,??_isr+2
 20464  00320C  CFFB F00F          	movff	pclatu,??_isr+3
 20465  003210  CFE9 F010          	movff	fsr0l,??_isr+4
 20466  003214  CFEA F011          	movff	fsr0h,??_isr+5
 20467  003218  CFE1 F012          	movff	fsr1l,??_isr+6
 20468  00321C  CFE2 F013          	movff	fsr1h,??_isr+7
 20469  003220  CFD9 F014          	movff	fsr2l,??_isr+8
 20470  003224  CFDA F015          	movff	fsr2h,??_isr+9
 20471  003228  CFF3 F016          	movff	prodl,??_isr+10
 20472  00322C  CFF4 F017          	movff	prodh,??_isr+11
 20473  003230  CFF6 F018          	movff	tblptrl,??_isr+12
 20474  003234  CFF7 F019          	movff	tblptrh,??_isr+13
 20475  003238  CFF8 F01A          	movff	tblptru,??_isr+14
 20476  00323C  CFF5 F01B          	movff	tablat,??_isr+15
 20477  003240  C03F  F01C         	movff	btemp,??_isr+16
 20478  003244  C040  F01D         	movff	btemp+1,??_isr+17
 20479  003248  C041  F01E         	movff	btemp+2,??_isr+18
 20480  00324C  C042  F01F         	movff	btemp+3,??_isr+19
 20481                           
 20482                           ;main.c: 104: unsigned char cont;
 20483                           ;main.c: 107: if (PIE1bits.RCIE && PIR1bits.RCIF)
 20484  003250  BA9D               	btfsc	3997,5,c	;volatile
 20485  003252  AA9E               	btfss	3998,5,c	;volatile
 20486  003254  D014               	goto	i2l85
 20487                           
 20488                           ;main.c: 108: {
 20489                           ;main.c: 109: PIR1bits.RCIF = 0;
 20490  003256  9A9E               	bcf	3998,5,c	;volatile
 20491                           
 20492                           ;main.c: 110: data_uart_recebe = recebe_dado_uart();
 20493  003258  EC5D  F026         	call	_recebe_dado_uart	;wreg free
 20494  00325C  6E3A               	movwf	_data_uart_recebe,c
 20495                           
 20496                           ;main.c: 111: GPSRead(data_uart_recebe);
 20497  00325E  503A               	movf	_data_uart_recebe,w,c
 20498  003260  EC50  F011         	call	_GPSRead
 20499                           
 20500                           ;main.c: 112: PORTBbits.RB2 = !PORTBbits.RB2;
 20501  003264  B481               	btfsc	3969,2,c	;volatile
 20502  003266  D003               	goto	i2u1460_40
 20503  003268  6A0C               	clrf	??_isr& (0+255),c
 20504  00326A  2A0C               	incf	??_isr& (0+255),f,c
 20505  00326C  D001               	goto	i2u1461_48
 20506  00326E                     i2u1460_40:
 20507  00326E  6A0C               	clrf	??_isr& (0+255),c
 20508  003270                     i2u1461_48:
 20509  003270  460C               	rlncf	??_isr,f,c
 20510  003272  460C               	rlncf	??_isr,f,c
 20511  003274  5081               	movf	3969,w,c	;volatile
 20512  003276  180C               	xorwf	??_isr,w,c
 20513  003278  0BFB               	andlw	-5
 20514  00327A  180C               	xorwf	??_isr,w,c
 20515  00327C  6E81               	movwf	3969,c	;volatile
 20516  00327E                     i2l85:
 20517                           
 20518                           ;main.c: 113: }
 20519                           ;main.c: 116: unsigned char cont;
 20520                           ;main.c: 118: if (TMR0IF && T0IF)
 20521  00327E  B4F2               	btfsc	intcon,2,c	;volatile
 20522  003280  A4F2               	btfss	intcon,2,c	;volatile
 20523  003282  D03E               	goto	i2l86
 20524                           
 20525                           ;main.c: 119: {
 20526                           ;main.c: 120: INTCONbits.TMR0IF = 0;
 20527  003284  94F2               	bcf	intcon,2,c	;volatile
 20528                           
 20529                           ;main.c: 121: sinaliza_int_timer = 1;
 20530  003286  0E01               	movlw	1
 20531  003288  0100               	movlb	0	; () banked
 20532  00328A  6FFF               	movwf	_sinaliza_int_timer& (0+255),b
 20533                           
 20534                           ;main.c: 123: for(cont= 0; cont<3;cont++)
 20535  00328C  0E00               	movlw	0
 20536  00328E  6E20               	movwf	isr@cont,c
 20537  003290                     i2l11357:
 20538                           
 20539                           ; BSR set to: 0
 20540  003290  0E02               	movlw	2
 20541  003292  6420               	cpfsgt	isr@cont,c
 20542  003294  D001               	goto	i2l87
 20543  003296  D020               	goto	i2u1467_40
 20544  003298                     i2l87:
 20545                           
 20546                           ;main.c: 124: {
 20547                           ;main.c: 125: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 20548                           
 20549                           ; BSR set to: 0
 20550  003298  5020               	movf	isr@cont,w,c
 20551  00329A  0D02               	mullw	2
 20552  00329C  0E22               	movlw	low _tempo_tarefa
 20553  00329E  24F3               	addwf	prodl,w,c
 20554  0032A0  6ED9               	movwf	fsr2l,c
 20555  0032A2  0E00               	movlw	high _tempo_tarefa
 20556  0032A4  20F4               	addwfc	prodh,w,c
 20557  0032A6  6EDA               	movwf	fsr2h,c
 20558  0032A8  50DE               	movf	postinc2,w,c
 20559  0032AA  10DE               	iorwf	postinc2,w,c
 20560  0032AC  B4D8               	btfsc	status,2,c
 20561  0032AE  D00B               	goto	i2l89
 20562  0032B0  5020               	movf	isr@cont,w,c
 20563  0032B2  0D02               	mullw	2
 20564  0032B4  0E22               	movlw	low _tempo_tarefa
 20565  0032B6  24F3               	addwf	prodl,w,c
 20566  0032B8  6ED9               	movwf	fsr2l,c
 20567  0032BA  0E00               	movlw	high _tempo_tarefa
 20568  0032BC  20F4               	addwfc	prodh,w,c
 20569  0032BE  6EDA               	movwf	fsr2h,c
 20570  0032C0  06DE               	decf	postinc2,f,c
 20571  0032C2  0E00               	movlw	0
 20572  0032C4  5ADD               	subwfb	postdec2,f,c
 20573  0032C6                     i2l89:
 20574                           
 20575                           ;main.c: 126: if(time_sd > 0) time_sd--;
 20576  0032C6  502E               	movf	_time_sd,w,c
 20577  0032C8  102F               	iorwf	_time_sd+1,w,c
 20578  0032CA  B4D8               	btfsc	status,2,c
 20579  0032CC  D003               	goto	i2l90
 20580  0032CE  062E               	decf	_time_sd,f,c
 20581  0032D0  A0D8               	btfss	status,0,c
 20582  0032D2  062F               	decf	_time_sd+1,f,c
 20583  0032D4                     i2l90:
 20584  0032D4  2A20               	incf	isr@cont,f,c
 20585  0032D6  D7DC               	goto	i2l11357
 20586  0032D8                     i2u1467_40:
 20587                           
 20588                           ;main.c: 127: }
 20589                           ;main.c: 129: if(tarefa_em_execucao == 1)
 20590  0032D8  0439               	decf	_tarefa_em_execucao,w,c	;volatile
 20591  0032DA  A4D8               	btfss	status,2,c
 20592  0032DC  D00B               	goto	i2l92
 20593                           
 20594                           ;main.c: 130: {
 20595                           ;main.c: 131: timeout_tarefa--;
 20596  0032DE  0630               	decf	_timeout_tarefa,f,c
 20597  0032E0  A0D8               	btfss	status,0,c
 20598  0032E2  0631               	decf	_timeout_tarefa+1,f,c
 20599                           
 20600                           ;main.c: 132: if(!timeout_tarefa)
 20601  0032E4  5030               	movf	_timeout_tarefa,w,c
 20602  0032E6  1031               	iorwf	_timeout_tarefa+1,w,c
 20603  0032E8  A4D8               	btfss	status,2,c
 20604  0032EA  D004               	goto	i2l92
 20605                           
 20606                           ;main.c: 133: {
 20607                           ;main.c: 135: PCLATH = 0;
 20608  0032EC  0E00               	movlw	0
 20609  0032EE  6EFA               	movwf	pclath,c	;volatile
 20610                           
 20611                           ;main.c: 136: PCL = 0;
 20612  0032F0  0E00               	movlw	0
 20613  0032F2  6EF9               	movwf	pcl,c	;volatile
 20614  0032F4                     i2l92:
 20615                           
 20616                           ;main.c: 137: }
 20617                           ;main.c: 138: }
 20618                           ;main.c: 141: write_timer_zero(0x0083);
 20619  0032F4  0E00               	movlw	0
 20620  0032F6  6E02               	movwf	i2write_timer_zero@timer0+1,c
 20621  0032F8  0E83               	movlw	131
 20622  0032FA  6E01               	movwf	i2write_timer_zero@timer0,c
 20623  0032FC  EC54  F026         	call	i2_write_timer_zero	;wreg free
 20624  003300                     i2l86:
 20625                           
 20626                           ;main.c: 143: }
 20627                           ;main.c: 145: if (INT0IF && INT0IE)
 20628  003300  B2F2               	btfsc	intcon,1,c	;volatile
 20629  003302  A8F2               	btfss	intcon,4,c	;volatile
 20630  003304  D001               	goto	i2l93
 20631                           
 20632                           ;main.c: 146: {
 20633                           ;main.c: 147: INT0IF = 0;
 20634  003306  92F2               	bcf	intcon,1,c	;volatile
 20635  003308                     i2l93:
 20636  003308  C01F  F042         	movff	??_isr+19,btemp+3
 20637  00330C  C01E  F041         	movff	??_isr+18,btemp+2
 20638  003310  C01D  F040         	movff	??_isr+17,btemp+1
 20639  003314  C01C  F03F         	movff	??_isr+16,btemp
 20640  003318  C01B  FFF5         	movff	??_isr+15,tablat
 20641  00331C  C01A  FFF8         	movff	??_isr+14,tblptru
 20642  003320  C019  FFF7         	movff	??_isr+13,tblptrh
 20643  003324  C018  FFF6         	movff	??_isr+12,tblptrl
 20644  003328  C017  FFF4         	movff	??_isr+11,prodh
 20645  00332C  C016  FFF3         	movff	??_isr+10,prodl
 20646  003330  C015  FFDA         	movff	??_isr+9,fsr2h
 20647  003334  C014  FFD9         	movff	??_isr+8,fsr2l
 20648  003338  C013  FFE2         	movff	??_isr+7,fsr1h
 20649  00333C  C012  FFE1         	movff	??_isr+6,fsr1l
 20650  003340  C011  FFEA         	movff	??_isr+5,fsr0h
 20651  003344  C010  FFE9         	movff	??_isr+4,fsr0l
 20652  003348  C00F  FFFB         	movff	??_isr+3,pclatu
 20653  00334C  C00E  FFFA         	movff	??_isr+2,pclath
 20654  003350  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20655  003352  0011               	retfie		f
 20656  003354                     __end_of_isr:
 20657                           	opt stack 0
 20658                           tosu	equ	0xFFF
 20659                           tosh	equ	0xFFE
 20660                           tosl	equ	0xFFD
 20661                           pclatu	equ	0xFFB
 20662                           pclath	equ	0xFFA
 20663                           pcl	equ	0xFF9
 20664                           tblptru	equ	0xFF8
 20665                           tblptrh	equ	0xFF7
 20666                           tblptrl	equ	0xFF6
 20667                           tablat	equ	0xFF5
 20668                           prodh	equ	0xFF4
 20669                           prodl	equ	0xFF3
 20670                           intcon	equ	0xFF2
 20671                           intcon2	equ	0xFF1
 20672                           intcon3	equ	0xFF0
 20673                           indf0	equ	0xFEF
 20674                           postinc0	equ	0xFEE
 20675                           fsr0h	equ	0xFEA
 20676                           fsr0l	equ	0xFE9
 20677                           wreg	equ	0xFE8
 20678                           indf1	equ	0xFE7
 20679                           postinc1	equ	0xFE6
 20680                           postdec1	equ	0xFE5
 20681                           plusw1	equ	0xFE3
 20682                           fsr1h	equ	0xFE2
 20683                           fsr1l	equ	0xFE1
 20684                           indf2	equ	0xFDF
 20685                           postinc2	equ	0xFDE
 20686                           postdec2	equ	0xFDD
 20687                           plusw2	equ	0xFDB
 20688                           fsr2h	equ	0xFDA
 20689                           fsr2l	equ	0xFD9
 20690                           status	equ	0xFD8
 20691                           
 20692 ;; *************** function i2_write_timer_zero *****************
 20693 ;; Defined at:
 20694 ;;		line 138 in file "bibliotecas/hardware.c"
 20695 ;; Parameters:    Size  Location     Type
 20696 ;;  timer0          2    0[COMRAM] unsigned int 
 20697 ;; Auto vars:     Size  Location     Type
 20698 ;;  write_timer_    2    2[COMRAM] struct Timers
 20699 ;; Return value:  Size  Location     Type
 20700 ;;                  1    wreg      void 
 20701 ;; Registers used:
 20702 ;;		None
 20703 ;; Tracked objects:
 20704 ;;		On entry : 0/0
 20705 ;;		On exit  : 0/0
 20706 ;;		Unchanged: 0/0
 20707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20708 ;;      Params:         2       0       0       0       0       0       0       0       0
 20709 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20710 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20711 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20712 ;;Total ram usage:        4 bytes
 20713 ;; Hardware stack levels used:    1
 20714 ;; This function calls:
 20715 ;;		Nothing
 20716 ;; This function is called by:
 20717 ;;		_isr
 20718 ;; This function uses a non-reentrant model
 20719 ;;
 20720                           
 20721                           	psect	text84
 20722  004CA8                     __ptext84:
 20723                           	opt stack 0
 20724  004CA8                     i2_write_timer_zero:
 20725                           	opt stack 14
 20726                           
 20727                           ;hardware.c: 140: union Timers timer;
 20728                           ;hardware.c: 142: timer.lt = timer0;
 20729                           
 20730                           ;incstack = 0
 20731  004CA8  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 20732  004CAC  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 20733                           
 20734                           ;hardware.c: 144: TMR0H = timer.bt[1];
 20735  004CB0  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 20736                           
 20737                           ;hardware.c: 145: TMR0L = timer.bt[0];
 20738  004CB4  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 20739  004CB8  0012               	return		;funcret
 20740  004CBA                     __end_ofi2_write_timer_zero:
 20741                           	opt stack 0
 20742                           tosu	equ	0xFFF
 20743                           tosh	equ	0xFFE
 20744                           tosl	equ	0xFFD
 20745                           pclatu	equ	0xFFB
 20746                           pclath	equ	0xFFA
 20747                           pcl	equ	0xFF9
 20748                           tblptru	equ	0xFF8
 20749                           tblptrh	equ	0xFF7
 20750                           tblptrl	equ	0xFF6
 20751                           tablat	equ	0xFF5
 20752                           prodh	equ	0xFF4
 20753                           prodl	equ	0xFF3
 20754                           intcon	equ	0xFF2
 20755                           intcon2	equ	0xFF1
 20756                           intcon3	equ	0xFF0
 20757                           indf0	equ	0xFEF
 20758                           postinc0	equ	0xFEE
 20759                           fsr0h	equ	0xFEA
 20760                           fsr0l	equ	0xFE9
 20761                           wreg	equ	0xFE8
 20762                           indf1	equ	0xFE7
 20763                           postinc1	equ	0xFE6
 20764                           postdec1	equ	0xFE5
 20765                           plusw1	equ	0xFE3
 20766                           fsr1h	equ	0xFE2
 20767                           fsr1l	equ	0xFE1
 20768                           indf2	equ	0xFDF
 20769                           postinc2	equ	0xFDE
 20770                           postdec2	equ	0xFDD
 20771                           plusw2	equ	0xFDB
 20772                           fsr2h	equ	0xFDA
 20773                           fsr2l	equ	0xFD9
 20774                           status	equ	0xFD8
 20775                           
 20776 ;; *************** function _recebe_dado_uart *****************
 20777 ;; Defined at:
 20778 ;;		line 138 in file "bibliotecas/uart.c"
 20779 ;; Parameters:    Size  Location     Type
 20780 ;;		None
 20781 ;; Auto vars:     Size  Location     Type
 20782 ;;		None
 20783 ;; Return value:  Size  Location     Type
 20784 ;;                  1    wreg      unsigned char 
 20785 ;; Registers used:
 20786 ;;		wreg, status,2
 20787 ;; Tracked objects:
 20788 ;;		On entry : 0/0
 20789 ;;		On exit  : 0/0
 20790 ;;		Unchanged: 0/0
 20791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20792 ;;      Params:         0       0       0       0       0       0       0       0       0
 20793 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20794 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20795 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20796 ;;Total ram usage:        0 bytes
 20797 ;; Hardware stack levels used:    1
 20798 ;; This function calls:
 20799 ;;		Nothing
 20800 ;; This function is called by:
 20801 ;;		_isr
 20802 ;;		_recebe_string_uart
 20803 ;; This function uses a non-reentrant model
 20804 ;;
 20805                           
 20806                           	psect	text85
 20807  004CBA                     __ptext85:
 20808                           	opt stack 0
 20809  004CBA                     _recebe_dado_uart:
 20810                           	opt stack 14
 20811                           
 20812                           ;uart.c: 140: while(RCIF==0);
 20813                           
 20814                           ;incstack = 0
 20815  004CBA  AA9E               	btfss	3998,5,c	;volatile
 20816  004CBC  D7FE               	goto	_recebe_dado_uart
 20817                           
 20818                           ;uart.c: 141: if(RCSTAbits.OERR)
 20819  004CBE  A2AB               	btfss	4011,1,c	;volatile
 20820  004CC0  D003               	goto	i2l871
 20821                           
 20822                           ;uart.c: 142: {
 20823                           ;uart.c: 143: CREN = 0;
 20824  004CC2  98AB               	bcf	4011,4,c	;volatile
 20825                           
 20826                           ;uart.c: 144: __nop();
 20827  004CC4  F000               	nop	
 20828                           
 20829                           ;uart.c: 145: CREN=1;
 20830  004CC6  88AB               	bsf	4011,4,c	;volatile
 20831  004CC8                     i2l871:
 20832                           
 20833                           ;uart.c: 146: }
 20834                           ;uart.c: 147: return(RCREG);
 20835  004CC8  50AE               	movf	4014,w,c	;volatile
 20836  004CCA  0012               	return	
 20837  004CCC                     __end_of_recebe_dado_uart:
 20838                           	opt stack 0
 20839                           tosu	equ	0xFFF
 20840                           tosh	equ	0xFFE
 20841                           tosl	equ	0xFFD
 20842                           pclatu	equ	0xFFB
 20843                           pclath	equ	0xFFA
 20844                           pcl	equ	0xFF9
 20845                           tblptru	equ	0xFF8
 20846                           tblptrh	equ	0xFF7
 20847                           tblptrl	equ	0xFF6
 20848                           tablat	equ	0xFF5
 20849                           prodh	equ	0xFF4
 20850                           prodl	equ	0xFF3
 20851                           intcon	equ	0xFF2
 20852                           intcon2	equ	0xFF1
 20853                           intcon3	equ	0xFF0
 20854                           indf0	equ	0xFEF
 20855                           postinc0	equ	0xFEE
 20856                           fsr0h	equ	0xFEA
 20857                           fsr0l	equ	0xFE9
 20858                           wreg	equ	0xFE8
 20859                           indf1	equ	0xFE7
 20860                           postinc1	equ	0xFE6
 20861                           postdec1	equ	0xFE5
 20862                           plusw1	equ	0xFE3
 20863                           fsr1h	equ	0xFE2
 20864                           fsr1l	equ	0xFE1
 20865                           indf2	equ	0xFDF
 20866                           postinc2	equ	0xFDE
 20867                           postdec2	equ	0xFDD
 20868                           plusw2	equ	0xFDB
 20869                           fsr2h	equ	0xFDA
 20870                           fsr2l	equ	0xFD9
 20871                           status	equ	0xFD8
 20872                           
 20873 ;; *************** function _GPSRead *****************
 20874 ;; Defined at:
 20875 ;;		line 468 in file "bibliotecas/GPS.c"
 20876 ;; Parameters:    Size  Location     Type
 20877 ;;  buff            1    wreg     unsigned char 
 20878 ;; Auto vars:     Size  Location     Type
 20879 ;;  buff            1    9[COMRAM] unsigned char 
 20880 ;;  c               1   10[COMRAM] unsigned char 
 20881 ;; Return value:  Size  Location     Type
 20882 ;;                  2    8[None  ] int 
 20883 ;; Registers used:
 20884 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20885 ;; Tracked objects:
 20886 ;;		On entry : 0/0
 20887 ;;		On exit  : 0/0
 20888 ;;		Unchanged: 0/0
 20889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20890 ;;      Params:         0       0       0       0       0       0       0       0       0
 20891 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20892 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20893 ;;      Totals:         2       0       0       0       0       0       0       0       0
 20894 ;;Total ram usage:        2 bytes
 20895 ;; Hardware stack levels used:    1
 20896 ;; Hardware stack levels required when called:    1
 20897 ;; This function calls:
 20898 ;;		_strcmp
 20899 ;;		_stringcpy
 20900 ;; This function is called by:
 20901 ;;		_isr
 20902 ;; This function uses a non-reentrant model
 20903 ;;
 20904                           
 20905                           	psect	text86
 20906  0022A0                     __ptext86:
 20907                           	opt stack 0
 20908  0022A0                     _GPSRead:
 20909                           	opt stack 13
 20910                           
 20911                           ;incstack = 0
 20912                           ;GPSRead@buff stored from wreg
 20913  0022A0  6E0A               	movwf	GPSRead@buff,c
 20914                           
 20915                           ;GPS.c: 470: uint8_t c = buff;
 20916  0022A2  C00A  F00B         	movff	GPSRead@buff,GPSRead@c
 20917                           
 20918                           ;GPS.c: 472: switch(c) {
 20919  0022A6  D13B               	goto	i2l210
 20920  0022A8                     
 20921                           ;GPS.c: 474: if(SentenceType == 1)
 20922  0022A8  0437               	decf	_SentenceType,w,c
 20923  0022AA  A4D8               	btfss	status,2,c
 20924  0022AC  D004               	goto	i2l212
 20925                           
 20926                           ;GPS.c: 475: GPRMC_ok = 1;
 20927  0022AE  0E00               	movlw	0
 20928  0022B0  6E2D               	movwf	_GPRMC_ok+1,c
 20929  0022B2  0E01               	movlw	1
 20930  0022B4  6E2C               	movwf	_GPRMC_ok,c
 20931  0022B6                     i2l212:
 20932                           
 20933                           ;GPS.c: 476: if(SentenceType == 2)
 20934  0022B6  0E02               	movlw	2
 20935  0022B8  1837               	xorwf	_SentenceType,w,c
 20936  0022BA  A4D8               	btfss	status,2,c
 20937  0022BC  D004               	goto	i2l213
 20938                           
 20939                           ;GPS.c: 477: GPGGA_ok = 1;
 20940  0022BE  0E00               	movlw	0
 20941  0022C0  6E2B               	movwf	_GPGGA_ok+1,c
 20942  0022C2  0E01               	movlw	1
 20943  0022C4  6E2A               	movwf	_GPGGA_ok,c
 20944  0022C6                     i2l213:
 20945                           
 20946                           ;GPS.c: 478: if(GPRMC_ok && GPGGA_ok) {
 20947  0022C6  502C               	movf	_GPRMC_ok,w,c
 20948  0022C8  102D               	iorwf	_GPRMC_ok+1,w,c
 20949  0022CA  B4D8               	btfsc	status,2,c
 20950  0022CC  0012               	return	
 20951  0022CE  502A               	movf	_GPGGA_ok,w,c
 20952  0022D0  102B               	iorwf	_GPGGA_ok+1,w,c
 20953  0022D2  B4D8               	btfsc	status,2,c
 20954  0022D4  0012               	return	
 20955                           
 20956                           ;GPS.c: 479: GPRMC_ok = GPGGA_ok = 0;
 20957  0022D6  0E00               	movlw	0
 20958  0022D8  6E2B               	movwf	_GPGGA_ok+1,c
 20959  0022DA  0E00               	movlw	0
 20960  0022DC  6E2A               	movwf	_GPGGA_ok,c
 20961  0022DE  C02A  F02C         	movff	_GPGGA_ok,_GPRMC_ok
 20962  0022E2  C02B  F02D         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 20963                           
 20964                           ;GPS.c: 481: }
 20965                           ;GPS.c: 482: break;
 20966                           
 20967                           ;GPS.c: 480: return 1;
 20968                           ;	Return value of _GPSRead is never used
 20969  0022E6  0012               	return	
 20970  0022E8                     
 20971                           ;GPS.c: 485: Term = char_number = 0;
 20972  0022E8  0E00               	movlw	0
 20973  0022EA  6E38               	movwf	_char_number,c
 20974  0022EC  C038  F036         	movff	_char_number,_Term
 20975                           
 20976                           ;GPS.c: 486: break;
 20977  0022F0  0012               	return	
 20978  0022F2                     
 20979                           ;GPS.c: 489: buffer[char_number] = '\0';
 20980  0022F2  5038               	movf	_char_number,w,c
 20981  0022F4  0D01               	mullw	1
 20982  0022F6  0E62               	movlw	low _buffer
 20983  0022F8  24F3               	addwf	prodl,w,c
 20984  0022FA  6ED9               	movwf	fsr2l,c
 20985  0022FC  0E01               	movlw	high _buffer
 20986  0022FE  20F4               	addwfc	prodh,w,c
 20987  002300  6EDA               	movwf	fsr2h,c
 20988  002302  0E00               	movlw	0
 20989  002304  6EDF               	movwf	indf2,c
 20990                           
 20991                           ;GPS.c: 490: if(Term == 0) {
 20992  002306  5036               	movf	_Term,w,c
 20993  002308  A4D8               	btfss	status,2,c
 20994  00230A  D030               	goto	i2l223
 20995                           
 20996                           ;GPS.c: 491: stringcpy(buffer, sentence, 0);
 20997  00230C  0E62               	movlw	low _buffer
 20998  00230E  6E01               	movwf	stringcpy@str1,c
 20999  002310  0E01               	movlw	high _buffer
 21000  002312  6E02               	movwf	stringcpy@str1+1,c
 21001  002314  0E93               	movlw	low _sentence
 21002  002316  6E03               	movwf	stringcpy@str2,c
 21003  002318  0E01               	movlw	high _sentence
 21004  00231A  6E04               	movwf	stringcpy@str2+1,c
 21005  00231C  0E00               	movlw	0
 21006  00231E  6E06               	movwf	stringcpy@dir+1,c
 21007  002320  0E00               	movlw	0
 21008  002322  6E05               	movwf	stringcpy@dir,c
 21009  002324  ECAE  F023         	call	_stringcpy	;wreg free
 21010                           
 21011                           ;GPS.c: 492: if(strcmp(sentence, "GPRMC") == 0)
 21012  002328  0E93               	movlw	low _sentence
 21013  00232A  6E01               	movwf	strcmp@s1,c
 21014  00232C  0E01               	movlw	high _sentence
 21015  00232E  6E02               	movwf	strcmp@s1+1,c
 21016  002330  0E72               	movlw	low STR_10
 21017  002332  6E03               	movwf	strcmp@s2,c
 21018  002334  0E62               	movlw	high STR_10
 21019  002336  6E04               	movwf	strcmp@s2+1,c
 21020  002338  EC68  F024         	call	_strcmp	;wreg free
 21021  00233C  5001               	movf	?_strcmp,w,c
 21022  00233E  1002               	iorwf	?_strcmp+1,w,c
 21023  002340  A4D8               	btfss	status,2,c
 21024  002342  D002               	goto	i2l220
 21025                           
 21026                           ;GPS.c: 493: SentenceType = 1;
 21027  002344  0E01               	movlw	1
 21028  002346  D011               	goto	L11
 21029  002348                     i2l220:
 21030                           
 21031                           ;GPS.c: 494: else if(strcmp(sentence, "GPGGA") == 0)
 21032  002348  0E93               	movlw	low _sentence
 21033  00234A  6E01               	movwf	strcmp@s1,c
 21034  00234C  0E01               	movlw	high _sentence
 21035  00234E  6E02               	movwf	strcmp@s1+1,c
 21036  002350  0E6C               	movlw	low STR_11
 21037  002352  6E03               	movwf	strcmp@s2,c
 21038  002354  0E62               	movlw	high STR_11
 21039  002356  6E04               	movwf	strcmp@s2+1,c
 21040  002358  EC68  F024         	call	_strcmp	;wreg free
 21041  00235C  5001               	movf	?_strcmp,w,c
 21042  00235E  1002               	iorwf	?_strcmp+1,w,c
 21043  002360  A4D8               	btfss	status,2,c
 21044  002362  D002               	goto	i2l222
 21045                           
 21046                           ;GPS.c: 495: SentenceType = 2;
 21047  002364  0E02               	movlw	2
 21048  002366  D001               	goto	L11
 21049  002368                     i2l222:
 21050                           
 21051                           ;GPS.c: 496: else
 21052                           ;GPS.c: 497: SentenceType = 3;
 21053  002368  0E03               	movlw	3
 21054  00236A                     L11:
 21055  00236A  6E37               	movwf	_SentenceType,c
 21056  00236C                     i2l223:
 21057                           
 21058                           ;GPS.c: 498: }
 21059                           ;GPS.c: 501: if(Term == 1 && SentenceType == 1) {
 21060  00236C  0436               	decf	_Term,w,c
 21061  00236E  A4D8               	btfss	status,2,c
 21062  002370  D011               	goto	i2l224
 21063  002372  0437               	decf	_SentenceType,w,c
 21064  002374  A4D8               	btfss	status,2,c
 21065  002376  D00E               	goto	i2l224
 21066                           
 21067                           ;GPS.c: 502: stringcpy(buffer, rawTime, 0);
 21068  002378  0E62               	movlw	low _buffer
 21069  00237A  6E01               	movwf	stringcpy@str1,c
 21070  00237C  0E01               	movlw	high _buffer
 21071  00237E  6E02               	movwf	stringcpy@str1+1,c
 21072  002380  0E6E               	movlw	low _rawTime
 21073  002382  6E03               	movwf	stringcpy@str2,c
 21074  002384  0E01               	movlw	high _rawTime
 21075  002386  6E04               	movwf	stringcpy@str2+1,c
 21076  002388  0E00               	movlw	0
 21077  00238A  6E06               	movwf	stringcpy@dir+1,c
 21078  00238C  0E00               	movlw	0
 21079  00238E  6E05               	movwf	stringcpy@dir,c
 21080  002390  ECAE  F023         	call	_stringcpy	;wreg free
 21081  002394                     i2l224:
 21082                           
 21083                           ;GPS.c: 503: }
 21084                           ;GPS.c: 506: if((Term == 3) && (SentenceType == 1)) {
 21085  002394  0E03               	movlw	3
 21086  002396  1836               	xorwf	_Term,w,c
 21087  002398  A4D8               	btfss	status,2,c
 21088  00239A  D011               	goto	i2l225
 21089  00239C  0437               	decf	_SentenceType,w,c
 21090  00239E  A4D8               	btfss	status,2,c
 21091  0023A0  D00E               	goto	i2l225
 21092                           
 21093                           ;GPS.c: 507: stringcpy(buffer, rawLatitude, 1);
 21094  0023A2  0E62               	movlw	low _buffer
 21095  0023A4  6E01               	movwf	stringcpy@str1,c
 21096  0023A6  0E01               	movlw	high _buffer
 21097  0023A8  6E02               	movwf	stringcpy@str1+1,c
 21098  0023AA  0E55               	movlw	low _rawLatitude
 21099  0023AC  6E03               	movwf	stringcpy@str2,c
 21100  0023AE  0E01               	movlw	high _rawLatitude
 21101  0023B0  6E04               	movwf	stringcpy@str2+1,c
 21102  0023B2  0E00               	movlw	0
 21103  0023B4  6E06               	movwf	stringcpy@dir+1,c
 21104  0023B6  0E01               	movlw	1
 21105  0023B8  6E05               	movwf	stringcpy@dir,c
 21106  0023BA  ECAE  F023         	call	_stringcpy	;wreg free
 21107  0023BE                     i2l225:
 21108                           
 21109                           ;GPS.c: 508: }
 21110                           ;GPS.c: 510: if((Term == 4) && (SentenceType == 1)) {
 21111  0023BE  0E04               	movlw	4
 21112  0023C0  1836               	xorwf	_Term,w,c
 21113  0023C2  A4D8               	btfss	status,2,c
 21114  0023C4  D00C               	goto	i2l228
 21115  0023C6  0437               	decf	_SentenceType,w,c
 21116  0023C8  A4D8               	btfss	status,2,c
 21117  0023CA  D009               	goto	i2l228
 21118                           
 21119                           ;GPS.c: 511: if(buffer[0] == 'N')
 21120  0023CC  0E4E               	movlw	78
 21121  0023CE  0101               	movlb	1	; () banked
 21122  0023D0  1962               	xorwf	_buffer& (0+255),w,b
 21123  0023D2  A4D8               	btfss	status,2,c
 21124  0023D4  D002               	goto	i2l227
 21125                           
 21126                           ; BSR set to: 1
 21127                           ;GPS.c: 512: rawLatitude[0] = '0';
 21128  0023D6  0E30               	movlw	48
 21129  0023D8  D001               	goto	L12
 21130  0023DA                     i2l227:
 21131                           
 21132                           ; BSR set to: 1
 21133                           ;GPS.c: 513: else
 21134                           ;GPS.c: 514: rawLatitude[0] = '-';
 21135                           
 21136                           ; BSR set to: 1
 21137  0023DA  0E2D               	movlw	45
 21138  0023DC                     L12:
 21139  0023DC  6F55               	movwf	_rawLatitude& (0+255),b
 21140  0023DE                     i2l228:
 21141                           
 21142                           ;GPS.c: 515: }
 21143                           ;GPS.c: 518: if((Term == 5) && (SentenceType == 1)) {
 21144                           
 21145                           ; BSR set to: 1
 21146                           
 21147                           ; BSR set to: 1
 21148  0023DE  0E05               	movlw	5
 21149  0023E0  1836               	xorwf	_Term,w,c
 21150  0023E2  A4D8               	btfss	status,2,c
 21151  0023E4  D011               	goto	i2l229
 21152  0023E6  0437               	decf	_SentenceType,w,c
 21153  0023E8  A4D8               	btfss	status,2,c
 21154  0023EA  D00E               	goto	i2l229
 21155                           
 21156                           ;GPS.c: 519: stringcpy(buffer, rawLongitude, 1);
 21157  0023EC  0E62               	movlw	low _buffer
 21158  0023EE  6E01               	movwf	stringcpy@str1,c
 21159  0023F0  0E01               	movlw	high _buffer
 21160  0023F2  6E02               	movwf	stringcpy@str1+1,c
 21161  0023F4  0E48               	movlw	low _rawLongitude
 21162  0023F6  6E03               	movwf	stringcpy@str2,c
 21163  0023F8  0E01               	movlw	high _rawLongitude
 21164  0023FA  6E04               	movwf	stringcpy@str2+1,c
 21165  0023FC  0E00               	movlw	0
 21166  0023FE  6E06               	movwf	stringcpy@dir+1,c
 21167  002400  0E01               	movlw	1
 21168  002402  6E05               	movwf	stringcpy@dir,c
 21169  002404  ECAE  F023         	call	_stringcpy	;wreg free
 21170  002408                     i2l229:
 21171                           
 21172                           ;GPS.c: 520: }
 21173                           ;GPS.c: 522: if((Term == 6) && (SentenceType == 1)) {
 21174  002408  0E06               	movlw	6
 21175  00240A  1836               	xorwf	_Term,w,c
 21176  00240C  A4D8               	btfss	status,2,c
 21177  00240E  D00C               	goto	i2l232
 21178  002410  0437               	decf	_SentenceType,w,c
 21179  002412  A4D8               	btfss	status,2,c
 21180  002414  D009               	goto	i2l232
 21181                           
 21182                           ;GPS.c: 523: if(buffer[0] == 'E')
 21183  002416  0E45               	movlw	69
 21184  002418  0101               	movlb	1	; () banked
 21185  00241A  1962               	xorwf	_buffer& (0+255),w,b
 21186  00241C  A4D8               	btfss	status,2,c
 21187  00241E  D002               	goto	i2l231
 21188                           
 21189                           ; BSR set to: 1
 21190                           ;GPS.c: 524: rawLongitude[0] = '0';
 21191  002420  0E30               	movlw	48
 21192  002422  D001               	goto	L13
 21193  002424                     i2l231:
 21194                           
 21195                           ; BSR set to: 1
 21196                           ;GPS.c: 525: else
 21197                           ;GPS.c: 526: rawLongitude[0] = '-';
 21198                           
 21199                           ; BSR set to: 1
 21200  002424  0E2D               	movlw	45
 21201  002426                     L13:
 21202  002426  6F48               	movwf	_rawLongitude& (0+255),b
 21203  002428                     i2l232:
 21204                           
 21205                           ;GPS.c: 527: }
 21206                           ;GPS.c: 530: if((Term == 7) && (SentenceType == 1)) {
 21207                           
 21208                           ; BSR set to: 1
 21209                           
 21210                           ; BSR set to: 1
 21211  002428  0E07               	movlw	7
 21212  00242A  1836               	xorwf	_Term,w,c
 21213  00242C  A4D8               	btfss	status,2,c
 21214  00242E  D011               	goto	i2l233
 21215  002430  0437               	decf	_SentenceType,w,c
 21216  002432  A4D8               	btfss	status,2,c
 21217  002434  D00E               	goto	i2l233
 21218                           
 21219                           ;GPS.c: 531: stringcpy(buffer, rawSpeed, 0);
 21220  002436  0E62               	movlw	low _buffer
 21221  002438  6E01               	movwf	stringcpy@str1,c
 21222  00243A  0E01               	movlw	high _buffer
 21223  00243C  6E02               	movwf	stringcpy@str1+1,c
 21224  00243E  0E8D               	movlw	low _rawSpeed
 21225  002440  6E03               	movwf	stringcpy@str2,c
 21226  002442  0E01               	movlw	high _rawSpeed
 21227  002444  6E04               	movwf	stringcpy@str2+1,c
 21228  002446  0E00               	movlw	0
 21229  002448  6E06               	movwf	stringcpy@dir+1,c
 21230  00244A  0E00               	movlw	0
 21231  00244C  6E05               	movwf	stringcpy@dir,c
 21232  00244E  ECAE  F023         	call	_stringcpy	;wreg free
 21233  002452                     i2l233:
 21234                           
 21235                           ;GPS.c: 532: }
 21236                           ;GPS.c: 535: if((Term == 8) && (SentenceType == 1)) {
 21237  002452  0E08               	movlw	8
 21238  002454  1836               	xorwf	_Term,w,c
 21239  002456  A4D8               	btfss	status,2,c
 21240  002458  D011               	goto	i2l234
 21241  00245A  0437               	decf	_SentenceType,w,c
 21242  00245C  A4D8               	btfss	status,2,c
 21243  00245E  D00E               	goto	i2l234
 21244                           
 21245                           ;GPS.c: 536: stringcpy(buffer, rawCourse, 0);
 21246  002460  0E62               	movlw	low _buffer
 21247  002462  6E01               	movwf	stringcpy@str1,c
 21248  002464  0E01               	movlw	high _buffer
 21249  002466  6E02               	movwf	stringcpy@str1+1,c
 21250  002468  0E87               	movlw	low _rawCourse
 21251  00246A  6E03               	movwf	stringcpy@str2,c
 21252  00246C  0E01               	movlw	high _rawCourse
 21253  00246E  6E04               	movwf	stringcpy@str2+1,c
 21254  002470  0E00               	movlw	0
 21255  002472  6E06               	movwf	stringcpy@dir+1,c
 21256  002474  0E00               	movlw	0
 21257  002476  6E05               	movwf	stringcpy@dir,c
 21258  002478  ECAE  F023         	call	_stringcpy	;wreg free
 21259  00247C                     i2l234:
 21260                           
 21261                           ;GPS.c: 537: }
 21262                           ;GPS.c: 540: if(Term == 9 && SentenceType == 1) {
 21263  00247C  0E09               	movlw	9
 21264  00247E  1836               	xorwf	_Term,w,c
 21265  002480  A4D8               	btfss	status,2,c
 21266  002482  D011               	goto	i2l235
 21267  002484  0437               	decf	_SentenceType,w,c
 21268  002486  A4D8               	btfss	status,2,c
 21269  002488  D00E               	goto	i2l235
 21270                           
 21271                           ;GPS.c: 541: stringcpy(buffer, rawDate, 0);
 21272  00248A  0E62               	movlw	low _buffer
 21273  00248C  6E01               	movwf	stringcpy@str1,c
 21274  00248E  0E01               	movlw	high _buffer
 21275  002490  6E02               	movwf	stringcpy@str1+1,c
 21276  002492  0E80               	movlw	low _rawDate
 21277  002494  6E03               	movwf	stringcpy@str2,c
 21278  002496  0E01               	movlw	high _rawDate
 21279  002498  6E04               	movwf	stringcpy@str2+1,c
 21280  00249A  0E00               	movlw	0
 21281  00249C  6E06               	movwf	stringcpy@dir+1,c
 21282  00249E  0E00               	movlw	0
 21283  0024A0  6E05               	movwf	stringcpy@dir,c
 21284  0024A2  ECAE  F023         	call	_stringcpy	;wreg free
 21285  0024A6                     i2l235:
 21286                           
 21287                           ;GPS.c: 542: }
 21288                           ;GPS.c: 545: if((Term == 7) && (SentenceType == 2)) {
 21289  0024A6  0E07               	movlw	7
 21290  0024A8  1836               	xorwf	_Term,w,c
 21291  0024AA  A4D8               	btfss	status,2,c
 21292  0024AC  D012               	goto	i2l236
 21293  0024AE  0E02               	movlw	2
 21294  0024B0  1837               	xorwf	_SentenceType,w,c
 21295  0024B2  A4D8               	btfss	status,2,c
 21296  0024B4  D00E               	goto	i2l236
 21297                           
 21298                           ;GPS.c: 546: stringcpy(buffer, rawSatellites, 0);
 21299  0024B6  0E62               	movlw	low _buffer
 21300  0024B8  6E01               	movwf	stringcpy@str1,c
 21301  0024BA  0E01               	movlw	high _buffer
 21302  0024BC  6E02               	movwf	stringcpy@str1+1,c
 21303  0024BE  0E3B               	movlw	low _rawSatellites
 21304  0024C0  6E03               	movwf	stringcpy@str2,c
 21305  0024C2  0E00               	movlw	high _rawSatellites
 21306  0024C4  6E04               	movwf	stringcpy@str2+1,c
 21307  0024C6  0E00               	movlw	0
 21308  0024C8  6E06               	movwf	stringcpy@dir+1,c
 21309  0024CA  0E00               	movlw	0
 21310  0024CC  6E05               	movwf	stringcpy@dir,c
 21311  0024CE  ECAE  F023         	call	_stringcpy	;wreg free
 21312  0024D2                     i2l236:
 21313                           
 21314                           ;GPS.c: 547: }
 21315                           ;GPS.c: 550: if((Term == 9) && (SentenceType == 2)) {
 21316  0024D2  0E09               	movlw	9
 21317  0024D4  1836               	xorwf	_Term,w,c
 21318  0024D6  A4D8               	btfss	status,2,c
 21319  0024D8  D012               	goto	i2l237
 21320  0024DA  0E02               	movlw	2
 21321  0024DC  1837               	xorwf	_SentenceType,w,c
 21322  0024DE  A4D8               	btfss	status,2,c
 21323  0024E0  D00E               	goto	i2l237
 21324                           
 21325                           ;GPS.c: 551: stringcpy(buffer, rawAltitude, 0);
 21326  0024E2  0E62               	movlw	low _buffer
 21327  0024E4  6E01               	movwf	stringcpy@str1,c
 21328  0024E6  0E01               	movlw	high _buffer
 21329  0024E8  6E02               	movwf	stringcpy@str1+1,c
 21330  0024EA  0E79               	movlw	low _rawAltitude
 21331  0024EC  6E03               	movwf	stringcpy@str2,c
 21332  0024EE  0E01               	movlw	high _rawAltitude
 21333  0024F0  6E04               	movwf	stringcpy@str2+1,c
 21334  0024F2  0E00               	movlw	0
 21335  0024F4  6E06               	movwf	stringcpy@dir+1,c
 21336  0024F6  0E00               	movlw	0
 21337  0024F8  6E05               	movwf	stringcpy@dir,c
 21338  0024FA  ECAE  F023         	call	_stringcpy	;wreg free
 21339  0024FE                     i2l237:
 21340                           
 21341                           ;GPS.c: 552: }
 21342                           ;GPS.c: 553: Term++;
 21343  0024FE  2A36               	incf	_Term,f,c
 21344                           
 21345                           ;GPS.c: 554: char_number = 0;
 21346  002500  0E00               	movlw	0
 21347  002502  6E38               	movwf	_char_number,c
 21348                           
 21349                           ;GPS.c: 555: break;
 21350  002504  0012               	return	
 21351  002506                     
 21352                           ;GPS.c: 558: buffer[char_number++] = c;
 21353  002506  5038               	movf	_char_number,w,c
 21354  002508  0D01               	mullw	1
 21355  00250A  0E62               	movlw	low _buffer
 21356  00250C  24F3               	addwf	prodl,w,c
 21357  00250E  6ED9               	movwf	fsr2l,c
 21358  002510  0E01               	movlw	high _buffer
 21359  002512  20F4               	addwfc	prodh,w,c
 21360  002514  6EDA               	movwf	fsr2h,c
 21361  002516  C00B  FFDF         	movff	GPSRead@c,indf2
 21362  00251A  2A38               	incf	_char_number,f,c
 21363                           
 21364                           ;GPS.c: 560: }
 21365                           
 21366                           ;GPS.c: 559: break;
 21367  00251C  0012               	return	
 21368  00251E                     i2l210:
 21369  00251E  500B               	movf	GPSRead@c,w,c
 21370                           
 21371                           ; Switch size 1, requested type "space"
 21372                           ; Number of cases is 3, Range of values is 13 to 44
 21373                           ; switch strategies available:
 21374                           ; Name         Instructions Cycles
 21375                           ; simple_byte           10     6 (average)
 21376                           ;	Chosen strategy is simple_byte
 21377  002520  0A0D               	xorlw	13	; case 13
 21378  002522  B4D8               	btfsc	status,2,c
 21379  002524  D6C1               	goto	i2l211
 21380  002526  0A29               	xorlw	41	; case 36
 21381  002528  B4D8               	btfsc	status,2,c
 21382  00252A  D6DE               	goto	i2l217
 21383  00252C  0A08               	xorlw	8	; case 44
 21384  00252E  B4D8               	btfsc	status,2,c
 21385  002530  D6E0               	goto	i2l218
 21386  002532  D7E9               	goto	i2l238
 21387  002534                     __end_of_GPSRead:
 21388                           	opt stack 0
 21389                           tosu	equ	0xFFF
 21390                           tosh	equ	0xFFE
 21391                           tosl	equ	0xFFD
 21392                           pclatu	equ	0xFFB
 21393                           pclath	equ	0xFFA
 21394                           pcl	equ	0xFF9
 21395                           tblptru	equ	0xFF8
 21396                           tblptrh	equ	0xFF7
 21397                           tblptrl	equ	0xFF6
 21398                           tablat	equ	0xFF5
 21399                           prodh	equ	0xFF4
 21400                           prodl	equ	0xFF3
 21401                           intcon	equ	0xFF2
 21402                           intcon2	equ	0xFF1
 21403                           intcon3	equ	0xFF0
 21404                           indf0	equ	0xFEF
 21405                           postinc0	equ	0xFEE
 21406                           fsr0h	equ	0xFEA
 21407                           fsr0l	equ	0xFE9
 21408                           wreg	equ	0xFE8
 21409                           indf1	equ	0xFE7
 21410                           postinc1	equ	0xFE6
 21411                           postdec1	equ	0xFE5
 21412                           plusw1	equ	0xFE3
 21413                           fsr1h	equ	0xFE2
 21414                           fsr1l	equ	0xFE1
 21415                           indf2	equ	0xFDF
 21416                           postinc2	equ	0xFDE
 21417                           postdec2	equ	0xFDD
 21418                           plusw2	equ	0xFDB
 21419                           fsr2h	equ	0xFDA
 21420                           fsr2l	equ	0xFD9
 21421                           status	equ	0xFD8
 21422                           
 21423 ;; *************** function _stringcpy *****************
 21424 ;; Defined at:
 21425 ;;		line 459 in file "bibliotecas/GPS.c"
 21426 ;; Parameters:    Size  Location     Type
 21427 ;;  str1            2    0[COMRAM] PTR unsigned char 
 21428 ;;		 -> buffer(12), 
 21429 ;;  str2            2    2[COMRAM] PTR unsigned char 
 21430 ;;		 -> rawAltitude(7), rawSatellites(3), rawDate(7), rawCourse(6), 
 21431 ;;		 -> rawSpeed(6), rawLongitude(13), rawLatitude(13), rawTime(11), 
 21432 ;;		 -> sentence(6), 
 21433 ;;  dir             2    4[COMRAM] int 
 21434 ;; Auto vars:     Size  Location     Type
 21435 ;;  chr             1    8[COMRAM] unsigned char 
 21436 ;; Return value:  Size  Location     Type
 21437 ;;                  1    wreg      void 
 21438 ;; Registers used:
 21439 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21440 ;; Tracked objects:
 21441 ;;		On entry : 0/0
 21442 ;;		On exit  : 0/0
 21443 ;;		Unchanged: 0/0
 21444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21445 ;;      Params:         6       0       0       0       0       0       0       0       0
 21446 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21447 ;;      Temps:          2       0       0       0       0       0       0       0       0
 21448 ;;      Totals:         9       0       0       0       0       0       0       0       0
 21449 ;;Total ram usage:        9 bytes
 21450 ;; Hardware stack levels used:    1
 21451 ;; This function calls:
 21452 ;;		Nothing
 21453 ;; This function is called by:
 21454 ;;		_GPSRead
 21455 ;; This function uses a non-reentrant model
 21456 ;;
 21457                           
 21458                           	psect	text87
 21459  00475C                     __ptext87:
 21460                           	opt stack 0
 21461  00475C                     _stringcpy:
 21462                           	opt stack 13
 21463                           
 21464                           ;GPS.c: 461: uint8_t chr = 0;
 21465                           
 21466                           ;incstack = 0
 21467  00475C  0E00               	movlw	0
 21468  00475E  6E09               	movwf	stringcpy@chr,c
 21469  004760                     
 21470                           ;GPS.c: 464: str2[chr + dir] = str1[chr];
 21471  004760  5009               	movf	stringcpy@chr,w,c
 21472  004762  0D01               	mullw	1
 21473  004764  50F3               	movf	prodl,w,c
 21474  004766  2401               	addwf	stringcpy@str1,w,c
 21475  004768  6ED9               	movwf	fsr2l,c
 21476  00476A  50F4               	movf	prodh,w,c
 21477  00476C  2002               	addwfc	stringcpy@str1+1,w,c
 21478  00476E  6EDA               	movwf	fsr2h,c
 21479  004770  5009               	movf	stringcpy@chr,w,c
 21480  004772  2405               	addwf	stringcpy@dir,w,c
 21481  004774  6E07               	movwf	??_stringcpy& (0+255),c
 21482  004776  0E00               	movlw	0
 21483  004778  2006               	addwfc	stringcpy@dir+1,w,c
 21484  00477A  6E08               	movwf	(??_stringcpy+1)& (0+255),c
 21485  00477C  5007               	movf	??_stringcpy,w,c
 21486  00477E  2403               	addwf	stringcpy@str2,w,c
 21487  004780  6EE1               	movwf	fsr1l,c
 21488  004782  5008               	movf	??_stringcpy+1,w,c
 21489  004784  2004               	addwfc	stringcpy@str2+1,w,c
 21490  004786  6EE2               	movwf	fsr1h,c
 21491  004788  CFDF FFE7          	movff	indf2,indf1
 21492                           
 21493                           ;GPS.c: 465: } while(str1[chr++] != '\0');
 21494  00478C  2A09               	incf	stringcpy@chr,f,c
 21495  00478E  0409               	decf	stringcpy@chr,w,c
 21496  004790  6E07               	movwf	??_stringcpy& (0+255),c
 21497  004792  5007               	movf	??_stringcpy,w,c
 21498  004794  0D01               	mullw	1
 21499  004796  50F3               	movf	prodl,w,c
 21500  004798  2401               	addwf	stringcpy@str1,w,c
 21501  00479A  6ED9               	movwf	fsr2l,c
 21502  00479C  50F4               	movf	prodh,w,c
 21503  00479E  2002               	addwfc	stringcpy@str1+1,w,c
 21504  0047A0  6EDA               	movwf	fsr2h,c
 21505  0047A2  50DF               	movf	indf2,w,c
 21506  0047A4  B4D8               	btfsc	status,2,c
 21507  0047A6  0012               	return	
 21508  0047A8  D7DB               	goto	i2l205
 21509  0047AA                     __end_of_stringcpy:
 21510                           	opt stack 0
 21511                           tosu	equ	0xFFF
 21512                           tosh	equ	0xFFE
 21513                           tosl	equ	0xFFD
 21514                           pclatu	equ	0xFFB
 21515                           pclath	equ	0xFFA
 21516                           pcl	equ	0xFF9
 21517                           tblptru	equ	0xFF8
 21518                           tblptrh	equ	0xFF7
 21519                           tblptrl	equ	0xFF6
 21520                           tablat	equ	0xFF5
 21521                           prodh	equ	0xFF4
 21522                           prodl	equ	0xFF3
 21523                           intcon	equ	0xFF2
 21524                           intcon2	equ	0xFF1
 21525                           intcon3	equ	0xFF0
 21526                           indf0	equ	0xFEF
 21527                           postinc0	equ	0xFEE
 21528                           fsr0h	equ	0xFEA
 21529                           fsr0l	equ	0xFE9
 21530                           wreg	equ	0xFE8
 21531                           indf1	equ	0xFE7
 21532                           postinc1	equ	0xFE6
 21533                           postdec1	equ	0xFE5
 21534                           plusw1	equ	0xFE3
 21535                           fsr1h	equ	0xFE2
 21536                           fsr1l	equ	0xFE1
 21537                           indf2	equ	0xFDF
 21538                           postinc2	equ	0xFDE
 21539                           postdec2	equ	0xFDD
 21540                           plusw2	equ	0xFDB
 21541                           fsr2h	equ	0xFDA
 21542                           fsr2l	equ	0xFD9
 21543                           status	equ	0xFD8
 21544                           
 21545 ;; *************** function _strcmp *****************
 21546 ;; Defined at:
 21547 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
 21548 ;; Parameters:    Size  Location     Type
 21549 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 21550 ;;		 -> sentence(6), 
 21551 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 21552 ;;		 -> STR_11(6), STR_10(6), 
 21553 ;; Auto vars:     Size  Location     Type
 21554 ;;  r               1    5[COMRAM] char 
 21555 ;; Return value:  Size  Location     Type
 21556 ;;                  2    0[COMRAM] int 
 21557 ;; Registers used:
 21558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21559 ;; Tracked objects:
 21560 ;;		On entry : 0/0
 21561 ;;		On exit  : 0/0
 21562 ;;		Unchanged: 0/0
 21563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21564 ;;      Params:         4       0       0       0       0       0       0       0       0
 21565 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21566 ;;      Temps:          1       0       0       0       0       0       0       0       0
 21567 ;;      Totals:         6       0       0       0       0       0       0       0       0
 21568 ;;Total ram usage:        6 bytes
 21569 ;; Hardware stack levels used:    1
 21570 ;; This function calls:
 21571 ;;		Nothing
 21572 ;; This function is called by:
 21573 ;;		_GPSRead
 21574 ;; This function uses a non-reentrant model
 21575 ;;
 21576                           
 21577                           	psect	text88
 21578  0048D0                     __ptext88:
 21579                           	opt stack 0
 21580  0048D0                     _strcmp:
 21581                           	opt stack 13
 21582                           
 21583                           ;incstack = 0
 21584  0048D0  D004               	goto	i2l2009
 21585  0048D2  4A01               	infsnz	strcmp@s1,f,c
 21586  0048D4  2A02               	incf	strcmp@s1+1,f,c
 21587  0048D6  4A03               	infsnz	strcmp@s2,f,c
 21588  0048D8  2A04               	incf	strcmp@s2+1,f,c
 21589  0048DA                     i2l2009:
 21590  0048DA  C001  FFD9         	movff	strcmp@s1,fsr2l
 21591  0048DE  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 21592  0048E2  50DF               	movf	indf2,w,c
 21593  0048E4  6E05               	movwf	??_strcmp& (0+255),c
 21594  0048E6  C003  FFF6         	movff	strcmp@s2,tblptrl
 21595  0048EA  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 21596  0048EE                     	if	0	;tblptru may be non-zero
 21597  0048EE                     	endif
 21598  0048EE                     	if	0	;tblptru may be non-zero
 21599  0048EE                     	endif
 21600  0048EE  0008               	tblrd		*
 21601  0048F0  50F5               	movf	tablat,w,c
 21602  0048F2  0800               	sublw	0
 21603  0048F4  2405               	addwf	??_strcmp,w,c
 21604  0048F6  6E06               	movwf	strcmp@r,c
 21605  0048F8  5006               	movf	strcmp@r,w,c
 21606  0048FA  A4D8               	btfss	status,2,c
 21607  0048FC  D007               	goto	i2u915_40
 21608  0048FE  C001  FFD9         	movff	strcmp@s1,fsr2l
 21609  004902  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 21610  004906  50DF               	movf	indf2,w,c
 21611  004908  A4D8               	btfss	status,2,c
 21612  00490A  D7E3               	goto	i2l2010
 21613  00490C                     i2u915_40:
 21614  00490C  5006               	movf	strcmp@r,w,c
 21615  00490E  6E01               	movwf	?_strcmp,c
 21616  004910  6A02               	clrf	?_strcmp+1,c
 21617  004912  BE01               	btfsc	?_strcmp,7,c
 21618  004914  0602               	decf	?_strcmp+1,f,c
 21619  004916  0012               	return	
 21620  004918                     __end_of_strcmp:
 21621                           	opt stack 0
 21622                           tosu	equ	0xFFF
 21623                           tosh	equ	0xFFE
 21624                           tosl	equ	0xFFD
 21625                           pclatu	equ	0xFFB
 21626                           pclath	equ	0xFFA
 21627                           pcl	equ	0xFF9
 21628                           tblptru	equ	0xFF8
 21629                           tblptrh	equ	0xFF7
 21630                           tblptrl	equ	0xFF6
 21631                           tablat	equ	0xFF5
 21632                           prodh	equ	0xFF4
 21633                           prodl	equ	0xFF3
 21634                           intcon	equ	0xFF2
 21635                           intcon2	equ	0xFF1
 21636                           intcon3	equ	0xFF0
 21637                           indf0	equ	0xFEF
 21638                           postinc0	equ	0xFEE
 21639                           fsr0h	equ	0xFEA
 21640                           fsr0l	equ	0xFE9
 21641                           wreg	equ	0xFE8
 21642                           indf1	equ	0xFE7
 21643                           postinc1	equ	0xFE6
 21644                           postdec1	equ	0xFE5
 21645                           plusw1	equ	0xFE3
 21646                           fsr1h	equ	0xFE2
 21647                           fsr1l	equ	0xFE1
 21648                           indf2	equ	0xFDF
 21649                           postinc2	equ	0xFDE
 21650                           postdec2	equ	0xFDD
 21651                           plusw2	equ	0xFDB
 21652                           fsr2h	equ	0xFDA
 21653                           fsr2l	equ	0xFD9
 21654                           status	equ	0xFD8
 21655                           tosu	equ	0xFFF
 21656                           tosh	equ	0xFFE
 21657                           tosl	equ	0xFFD
 21658                           pclatu	equ	0xFFB
 21659                           pclath	equ	0xFFA
 21660                           pcl	equ	0xFF9
 21661                           tblptru	equ	0xFF8
 21662                           tblptrh	equ	0xFF7
 21663                           tblptrl	equ	0xFF6
 21664                           tablat	equ	0xFF5
 21665                           prodh	equ	0xFF4
 21666                           prodl	equ	0xFF3
 21667                           intcon	equ	0xFF2
 21668                           intcon2	equ	0xFF1
 21669                           intcon3	equ	0xFF0
 21670                           indf0	equ	0xFEF
 21671                           postinc0	equ	0xFEE
 21672                           fsr0h	equ	0xFEA
 21673                           fsr0l	equ	0xFE9
 21674                           wreg	equ	0xFE8
 21675                           indf1	equ	0xFE7
 21676                           postinc1	equ	0xFE6
 21677                           postdec1	equ	0xFE5
 21678                           plusw1	equ	0xFE3
 21679                           fsr1h	equ	0xFE2
 21680                           fsr1l	equ	0xFE1
 21681                           indf2	equ	0xFDF
 21682                           postinc2	equ	0xFDE
 21683                           postdec2	equ	0xFDD
 21684                           plusw2	equ	0xFDB
 21685                           fsr2h	equ	0xFDA
 21686                           fsr2l	equ	0xFD9
 21687                           status	equ	0xFD8
 21688                           
 21689                           	psect	text89
 21690  000000                     __ptext89:
 21691                           	opt stack 0
 21692                           tosu	equ	0xFFF
 21693                           tosh	equ	0xFFE
 21694                           tosl	equ	0xFFD
 21695                           pclatu	equ	0xFFB
 21696                           pclath	equ	0xFFA
 21697                           pcl	equ	0xFF9
 21698                           tblptru	equ	0xFF8
 21699                           tblptrh	equ	0xFF7
 21700                           tblptrl	equ	0xFF6
 21701                           tablat	equ	0xFF5
 21702                           prodh	equ	0xFF4
 21703                           prodl	equ	0xFF3
 21704                           intcon	equ	0xFF2
 21705                           intcon2	equ	0xFF1
 21706                           intcon3	equ	0xFF0
 21707                           indf0	equ	0xFEF
 21708                           postinc0	equ	0xFEE
 21709                           fsr0h	equ	0xFEA
 21710                           fsr0l	equ	0xFE9
 21711                           wreg	equ	0xFE8
 21712                           indf1	equ	0xFE7
 21713                           postinc1	equ	0xFE6
 21714                           postdec1	equ	0xFE5
 21715                           plusw1	equ	0xFE3
 21716                           fsr1h	equ	0xFE2
 21717                           fsr1l	equ	0xFE1
 21718                           indf2	equ	0xFDF
 21719                           postinc2	equ	0xFDE
 21720                           postdec2	equ	0xFDD
 21721                           plusw2	equ	0xFDB
 21722                           fsr2h	equ	0xFDA
 21723                           fsr2l	equ	0xFD9
 21724                           status	equ	0xFD8
 21725                           
 21726                           	psect	rparam
 21727  0000                     tosu	equ	0xFFF
 21728                           tosh	equ	0xFFE
 21729                           tosl	equ	0xFFD
 21730                           pclatu	equ	0xFFB
 21731                           pclath	equ	0xFFA
 21732                           pcl	equ	0xFF9
 21733                           tblptru	equ	0xFF8
 21734                           tblptrh	equ	0xFF7
 21735                           tblptrl	equ	0xFF6
 21736                           tablat	equ	0xFF5
 21737                           prodh	equ	0xFF4
 21738                           prodl	equ	0xFF3
 21739                           intcon	equ	0xFF2
 21740                           intcon2	equ	0xFF1
 21741                           intcon3	equ	0xFF0
 21742                           indf0	equ	0xFEF
 21743                           postinc0	equ	0xFEE
 21744                           fsr0h	equ	0xFEA
 21745                           fsr0l	equ	0xFE9
 21746                           wreg	equ	0xFE8
 21747                           indf1	equ	0xFE7
 21748                           postinc1	equ	0xFE6
 21749                           postdec1	equ	0xFE5
 21750                           plusw1	equ	0xFE3
 21751                           fsr1h	equ	0xFE2
 21752                           fsr1l	equ	0xFE1
 21753                           indf2	equ	0xFDF
 21754                           postinc2	equ	0xFDE
 21755                           postdec2	equ	0xFDD
 21756                           plusw2	equ	0xFDB
 21757                           fsr2h	equ	0xFDA
 21758                           fsr2l	equ	0xFD9
 21759                           status	equ	0xFD8
 21760                           
 21761                           	psect	temp
 21762  00003F                     btemp:
 21763                           	opt stack 0
 21764  00003F                     	ds	1
 21765  0000                     int$flags	set	btemp
 21766  0000                     wtemp6	set	btemp+1
 21767                           tosu	equ	0xFFF
 21768                           tosh	equ	0xFFE
 21769                           tosl	equ	0xFFD
 21770                           pclatu	equ	0xFFB
 21771                           pclath	equ	0xFFA
 21772                           pcl	equ	0xFF9
 21773                           tblptru	equ	0xFF8
 21774                           tblptrh	equ	0xFF7
 21775                           tblptrl	equ	0xFF6
 21776                           tablat	equ	0xFF5
 21777                           prodh	equ	0xFF4
 21778                           prodl	equ	0xFF3
 21779                           intcon	equ	0xFF2
 21780                           intcon2	equ	0xFF1
 21781                           intcon3	equ	0xFF0
 21782                           indf0	equ	0xFEF
 21783                           postinc0	equ	0xFEE
 21784                           fsr0h	equ	0xFEA
 21785                           fsr0l	equ	0xFE9
 21786                           wreg	equ	0xFE8
 21787                           indf1	equ	0xFE7
 21788                           postinc1	equ	0xFE6
 21789                           postdec1	equ	0xFE5
 21790                           plusw1	equ	0xFE3
 21791                           fsr1h	equ	0xFE2
 21792                           fsr1l	equ	0xFE1
 21793                           indf2	equ	0xFDF
 21794                           postinc2	equ	0xFDE
 21795                           postdec2	equ	0xFDD
 21796                           plusw2	equ	0xFDB
 21797                           fsr2h	equ	0xFDA
 21798                           fsr2l	equ	0xFD9
 21799                           status	equ	0xFD8


Data Sizes:
    Strings     254
    Constant    34
    Data        52
    BSS         974
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      62
    BANK0           160    139     160
    BANK1           256     37     241
    BANK2           256      0     228
    BANK3           256     35      35
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3323	PTR FTN()void  size(2) Largest target is 1
		 -> verifica_fence_externo(), disparo_gravacao(), verifica_dados_operacionais(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_11(CODE[6]), STR_10(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK1[6]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK1[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK1[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), STR_25(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(COMRAM[7]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 208
		 -> poligono_ext.longitude(BANK2[11]), poligono_ext.latitude(BANK2[11]), poligono_ext.fence_diff_long(BANK2[11]), poligono_ext.fence_diff_lat(BANK2[11]), 
		 -> poligono_ext(BANK2[208]), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_18(CODE[21]), 

    fprintf@arp	PTR void [1] size(2) Largest target is 2
		 -> ?_fprintf(BANK1[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 44
		 -> fprintf@s(BANK3[16]), string_dado(BANK1[44]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> fputc@bw(BANK1[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 1
		 -> fputc@c(BANK1[1]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 1
		 -> fputc@c(BANK1[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_19(CODE[13]), filename(BANK1[15]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_19(CODE[13]), filename(BANK1[15]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_open@dir(BANK1[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    trace_path@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK1[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_19(CODE[13]), filename(BANK1[15]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    S1739_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 21
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), STR_23(CODE[11]), STR_22(CODE[10]), STR_21(CODE[16]), 
		 -> STR_20(CODE[11]), STR_17(CODE[9]), STR_16(CODE[10]), STR_15(CODE[10]), 
		 -> STR_14(CODE[14]), STR_13(CODE[21]), STR_12(CODE[15]), STR_9(CODE[14]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(COMRAM[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK1[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK1[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK2[20]), 

    S473_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S473_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK1[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 13
		 -> rawAltitude(BANK1[7]), rawSatellites(COMRAM[3]), rawDate(BANK1[7]), rawCourse(BANK1[6]), 
		 -> rawSpeed(BANK1[6]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 
		 -> sentence(BANK1[6]), 

    sp__Longitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK1[13]), 

    verifica_fence_externo@point_buff_gps_long	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK1[13]), 

    sp__Latitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK1[13]), 

    verifica_fence_externo@point_buff_gps_lat	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK1[13]), 

    p_tarefas	PTR FTN()void [3] size(2) Largest target is 1
		 -> verifica_fence_externo(), disparo_gravacao(), verifica_dados_operacionais(), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_escreve_cmd_lcd
    _init_lcd->_escreve_cmd_lcd
    _atoi->_isdigit
    _escrita_sdcard->_f_mount
    _fprintf->___llmod
    _auto_mount->_disk_status
    _sdc_disk_initialize->_response
    _sdc_reset->_response
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _validate->_disk_status
    _sdc_disk_write->_response
    _sdc_disk_read->_response

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _main->_escalonador
    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_delay
    _escreve_cmd_lcd->_delay
    _config_timer_zero->_write_timer_zero
    _verifica_fence_externo->_atoi
    _atoi->___wmul
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _fprintf->_fputs
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_trace_path
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _clust2sect->___lmul
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _endereco_cursor_lcd->_delay
    _escreve_caractere_lcd->_delay
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_wait_ready
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_escalonador
    _escrita_sdcard->_f_open
    _fprintf->_fputs
    _fputs->_fputc

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _escrita_sdcard->_fprintf

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  425652
                    _dados_gps_to_sd
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    4123
                                              5 BANK0     36    36      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                              2 BANK0      1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             32 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     247
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     247
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     247
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  418241
                                            138 BANK0      1     1      0
                                             35 BANK1      2     2      0
                   _disparo_gravacao *
        _verifica_dados_operacionais *
             _verifica_fence_externo *
 ---------------------------------------------------------------------------------
 (2) _verifica_fence_externo                              40    40      0    6807
                                             13 BANK0     36    36      0
                           _Latitude
                          _Longitude
                               _atoi
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    2075
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             32 COMRAM     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Longitude                                            2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Latitude                                             2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _verifica_dados_operacionais                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _disparo_gravacao                                     0     0      0  411211
                     _escrita_sdcard
 ---------------------------------------------------------------------------------
 (3) _escrita_sdcard                                       2     2      0  411211
                        _desliga_SPI
                       _desliga_uart
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                     _inicializa_SPI
                    _inicializa_uart
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             14 BANK0     14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _fprintf                                             49    37     12  128372
                                              9 BANK1     14     2     12
                                              0 BANK3     35    35      0
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (5) _fputs                                                7     3      4   61931
                                            137 BANK0      1     1      0
                                              3 BANK1      6     2      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                7     3      4   61438
                                            133 BANK0      4     0      4
                                              0 BANK1      3     3      0
                            _f_write
 ---------------------------------------------------------------------------------
 (7) _f_write                                             33    25      8   60626
                                            100 BANK0     33    25      8
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     412
                                             32 COMRAM     1     1      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) _f_open                                              44    39      5  196066
                                            119 BANK0      9     4      5
                                              0 BANK1     35    35      0
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (5) _trace_path                                          23    15      8   39318
                                             96 BANK0     23    15      8
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _make_dirfile                                        13     9      4    2753
                                              8 BANK0     13     9      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _reserve_direntry                                    18    14      4   76831
                                            100 BANK0     18    14      4
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _next_dir_entry                                      13    11      2   18643
                                             83 BANK0     13    11      2
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (8) _clust2sect                                          11     7      4    1487
                                             12 BANK0     11     7      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _remove_chain                                         8     6      2   33313
                                             86 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (8) _memcpy                                              11     5      6    1018
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (5) _auto_mount                                          40    37      3   27083
                                             51 BANK0     40    37      3
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (7) _memset                                               8     2      6    1217
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (6) _disk_initialize                                      4     4      0   15356
                                             32 BANK0      2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (7) _sdc_disk_initialize                                 13    13      0   15226
                                             19 BANK0     13    13      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (8) _sdc_reset                                           20    20      0    7179
                                             12 BANK0      7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    1857
                                              2 BANK0      3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             32 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    1709
                                              2 BANK0      2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             32 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _check_fs                                             8     4      4    6655
                                             43 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (6) _memcmp                                               9     3      6     701
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     516
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) _f_mount                                              3     1      2     394
                                             32 COMRAM     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _f_lseek                                             29    23      6   54870
                                            100 BANK0     29    23      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (8) _create_chain                                        14    12      2   34376
                                             86 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (9) _put_cluster                                         22    18      4   16613
                                             64 BANK0     22    18      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (9) _get_cluster                                         19    17      2   16322
                                             64 BANK0     19    17      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1282
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     901
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _f_close                                              3     1      2   30391
                                             75 BANK0      3     1      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (5) _f_sync                                               9     7      2   30018
                                             66 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (8) _validate                                             6     2      4    1250
                                              6 BANK0      6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (9) _disk_status                                          5     5      0     226
                                             32 COMRAM     1     1      0
                                              2 BANK0      4     4      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_status                                     4     4      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _sync                                                 2     2      0   14169
                                             64 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (8) _move_window                                         21    17      4   13831
                                             43 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (9) _disk_write                                          12     5      7    6078
                                             31 BANK0     12     5      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_write                                     19    12      7    4614
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (9) _disk_read                                           12     5      7    5647
                                             31 BANK0     12     5      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_read                                      24    17      7    4450
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (11) _response                                            1     1      0      34
                                             32 COMRAM     1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (11) _proceed                                             0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (11) _command                                             7     2      5    3403
                                              5 BANK0      7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (12) _wait_ready                                         15    15      0      99
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _escreve_SPI                                         2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _dummy_clocks                                        5     5      0      68
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _disk_ioctl                                           7     4      3     304
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (5) _get_fattime                                         51    47      4     201
                                              0 BANK0     51    47      4
 ---------------------------------------------------------------------------------
 (4) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dados_gps_to_sd                                      0     0      0    1310
                           _monta_sd
 ---------------------------------------------------------------------------------
 (2) _monta_sd                                             5     3      2    1310
                                              6 BANK0      5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     220
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                21    21      0    2930
                                             11 COMRAM    21    21      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (17) i2_write_timer_zero                                  4     2      2     131
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (17) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _GPSRead                                             2     2      0    2669
                                              9 COMRAM     2     2      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (18) _stringcpy                                           9     3      6    2207
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (18) _strcmp                                              6     2      4     395
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dados_gps_to_sd
     _monta_sd
       _strlen
   _escalonador
     _disparo_gravacao *
       _escrita_sdcard
         _desliga_SPI
         _desliga_uart
         _f_close
           _f_sync
             _get_fattime
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _sync
               _disk_ioctl
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _f_lseek
           ___lldiv
           _create_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _validate
             _disk_status
               _sdc_disk_status
         _f_mount
         _f_open
           _auto_mount
             ___lldiv
             ___lmul
             _check_fs
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcmp
             _disk_initialize
               _sdc_disk_initialize
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
                 _sdc_reset
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _disk_status
               _sdc_disk_status
             _memset
           _get_fattime
           _memcpy
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _remove_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _reserve_direntry
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
           _trace_path
             _clust2sect
               ___lmul
             _make_dirfile
               _memset
             _memcmp
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
         _fprintf
           ___lldiv
           ___llmod
           ___wmul
           _fputc
             _f_write
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcpy
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
           _fputs
             _fputc
               _f_write
                 _clust2sect
                   ___lmul
                 _create_chain
                   _get_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                   _put_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcpy
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                 _validate
                   _disk_status
                     _sdc_disk_status
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
     _verifica_dados_operacionais *
     _verifica_fence_externo *
       _Latitude
       _Longitude
       _atoi
         ___wmul
         _isdigit
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     23      23      11       13.7%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      E4       9       89.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     25      F1       7       94.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8B      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      3E       1       66.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2D6      20        0.0%
DATA                 0      0     4F6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Apr 14 11:57:18 2022

                        next_dir_entry@idx 00BE                   __end_of_mensagem_inicial 421A  
                      next_dir_entry@clust 00BC                                _SSPSTATbits 000FC7  
                         ??_init_interrupt 0021                                         _fs 0323  
                      ___wmul@multiplicand 0062                                _put_cluster 2534  
                         disk_write@sector 0081                               ?_escalonador 0001  
                           create_chain@fs 00BC                           disk_write@result 0088  
                         ?_inicializa_uart 0001                                        l100 3CE8  
                                      l102 3D7A                                        l130 1B0C  
                                      l108 4ACE                                        l301 4948  
                                      l141 1C62                                        l109 4ADE  
                                      l302 493A                                        l310 4A2A  
                                      l150 1CFC                                        l134 1B30  
                                      l126 1ABC                                        l135 1B3C  
                                      l152 1D22                                        l144 1D00  
                                      l128 1B24                                        l129 1B00  
                                      l138 1B8C                                        l332 3C28  
                                      l156 1D38                                        l342 36DC  
                                      l318 44FA                                        l510 1936  
                                      l158 1D1E                                        l351 364A  
                                      l343 35E4                                        l319 44F4  
                                      l511 1960                                        l352 3656  
                                      l344 35F0                                        l600 4042  
                                      l521 1A30                                        l601 4044  
                                      l354 367A                                        l530 33FE  
                                      l450 3FDA                                        l434 48B6  
                                      l442 49FE                                        l602 404C  
                                      l355 3686                                        l347 3614  
                                      l451 3F6A                                        l435 488E  
                                      l507 18F6                                        l443 49E2  
                                      l603 404E                                        l348 3620  
                                      l532 341A                                        l620 4458  
                                      l612 4424                                        l516 19C4  
                                      l604 4056                                        l357 36AA  
                                      l533 3412                                        l453 3F9C  
                                      l461 4144                                        l437 489E  
                                      l621 445A                                        l613 4426  
                                      l517 19EE                                        l445 49EE  
                                      l605 4058                                        l358 36D2  
                                      l470 4B1E                                        l526 33D8  
                                      l454 3FD6                                        l462 4176  
                                      l438 48B2                                        l622 4462  
                                      l614 442E                                        l630 4378  
                                      l446 49FA                                        l359 36B0  
                                      l391 4D1C                                        l535 3446  
                                      l527 33C4                                        l551 2B0A  
                                      l543 2AC0                                        l623 4464  
                                      l615 4430                                        l631 4334  
                                      l536 342E                                        l544 2A0C  
                                      l560 4C40                                        l624 446C  
                                      l616 4438                                        l632 4394  
                                      l553 2B3E                                        l641 43B0  
                                      l625 446E                                        l617 443A  
                                      l633 4340                                        l466 4B22  
                                      l538 3480                                        l546 2A60  
                                      l458 417A                                        l650 43E6  
                                      l642 43B2                                        l618 444E  
                                      l634 4350                                        l474 3D98  
                                      l467 4B16                                        l555 2B86  
                                      l459 4112                                        l651 43EE  
                                      l643 43BA                                        l619 4450  
                                      l635 4360                                        l475 3DB6  
                                      l491 1906                                        l548 2A90  
                                      l580 4B4A                                        l652 43F0  
                                      l644 43BC                                        l636 4370  
                                      l492 17AC                                        l484 1756  
                                      l469 4B1A                                        l397 4C7E  
                                      l653 43F8                                        l645 43C4  
                                      l629 439A                                        l493 17B6  
                                      l485 176C                                        l582 4B5A  
                                      l654 43FA                                        l646 43C6  
                                      l494 17E0                                        l590 4004  
                                      l655 4402                                        l647 43CE  
                                      l479 3E18                                        l487 1778  
                                      l591 4006                                        l656 4404  
                                      l648 43D0                                        l592 400E  
                                      l649 43E4                                        l593 4010  
                                      l922 2DDC                                        l674 46E4  
                                      l594 4018                                        l931 45E6  
                                      l675 46BA                                        l499 186A  
                                      l595 401A                                        l940 29C4  
                                      l596 4022                                        l925 2E62  
                                      l933 4604                                        l845 35B2  
                                      l597 4024                                        l598 4038  
                                      l927 2F0C                                        l943 291C  
                                      l951 277E                                        l599 403A  
                                      l928 2EEE                                        l952 255C  
                                      l937 29AA                                        l961 26DE  
                                      l953 25BC                                        l938 27FA  
                                      l970 3CB0                                        l947 293C  
                                      l971 3C3E                                        l964 279A  
                                      l956 25F6                                        l972 3C60  
                                      l965 2708                                        l981 2BF6  
                                      l966 273C                                        l958 262A  
                                      l974 3C7E                                        l967 277A  
                                      l959 2686                                        l991 2C76  
                                      l975 3CA8                                        l993 2CBE  
                                      l985 2C40                                        l994 2CA6  
                                      l986 2C22                                        l996 2CE2  
                                      l988 2C38                                        l997 2D12  
                                      l989 2C48                                        l998 2D50  
                                      _PCL 000FF9                                        _PR2 000FCB  
                                      _fil 012C                           ??_init_oscilador 0021  
                                      _isr 0008                               disk_read@res 008A  
                                      prod 000FF3                             ??_create_chain 00B8  
                                      tosl 000FFD                                        wreg 000FE8  
                __size_of_write_timer_zero 0012                            create_chain@mcl 00BA  
                          create_chain@ncl 00C2                            create_chain@scl 00C0  
                  ??_escreve_frase_ram_lcd 0022                                       l1001 3B2A  
                                     l1010 3080                                       l1011 3042  
                                     l1006 2F98                                       l1103 2078  
                                     l1120 225A                                       l1112 2196  
                                     l1104 20A0                                       l1105 20B4  
                                     l1033 30C8                                       l1130 05E4  
                                     l1106 20E0                                       l1050 3166  
                                     l1034 3138                                       l1131 05DE  
                                     l1115 21BC                                       l1124 40BA  
                                     l1140 06C6                                       l1108 214C  
                                     l1060 317E                                       l1133 0636  
                                     l1061 3186                                       l1126 40DA  
                                     l1142 073A                                       l1134 065C  
                                     l1118 226A                                       l1038 3202  
                                     l1070 31C2                                       l1062 318E  
                                     l1127 4108                                       l1143 075C  
                                     l1119 222A                                       l1223 054A  
                                     l1152 47E0                                       l1080 1E32  
                                     l1240 03C2                                       l1224 00D4  
                                     l2017 49AE                                       l1161 481C  
                                     l1137 068C                                       l1065 31A8  
                                     l1225 03D0                                       l1313 461C  
                                     l1321 4596                                       l2018 49A8  
                                     l1162 483C                                       l1146 07A4  
                                     l1138 0688                                       l1074 31DE  
                                     l1058 3176                                       l1170 15C4  
                                     l1226 020A                                       l1322 4558  
                                     l1147 08E0                                       l1139 06BA  
                                     l1091 1F2E                                       l1083 1E56  
                                     l1171 1464                                       l1235 05B8  
                                     l1243 0492                                       l1227 0190  
                                     l1323 458C                                       l1331 0FFA  
                                     l1156 47F2                                       l1260 0B8E  
                                     l1148 09D2                                       l1076 31E0  
                                     l1068 31C0                                       l1092 1F5C  
                                     l1180 1534                                       l1172 13EC  
                                     l1244 05A6                                       l1236 0352  
                                     l1316 4656                                       l1340 10AA  
                                     l1149 09E8                                       l1085 1E82  
                                     l1173 1410                                       l1237 02FA  
                                     l1229 01B0                                       l1333 1354  
                                     l1341 10E4                                       l1270 0DF6  
                                     l1262 0D4A                                       l1086 1EE8  
                                     l1342 1130                                       l1263 0DAC  
                                     l1159 4802                                       l1095 1F50  
                                     l1175 146E                                       l1239 0510  
                                     l1351 11A4                                       l1335 107E  
                                     l1248 3824                                       l1264 0D98  
                                     l1416 4672                                       l1088 1EDC  
                                     l1176 1496                                       l1168 13A0  
                                     l1344 1140                                       l1336 1028  
                                     l1328 0FAC                                       l1249 376C  
                                     l1273 0E0A                                       l1417 4686  
                                     l1185 15D0                                       l1361 12B0  
                                     l1345 114C                                       l1266 0F76  
                                     l1098 1F76                                       l1186 15EC  
                                     l1362 130A                                       l1346 1158  
                                     l1099 1F8A                                       l1179 1564  
                                     l1363 12DE                                       l1355 11E8  
                                     l1268 0E7C                                       l1356 1200  
                                     l1348 117E                                       l1277 0F10  
                                     l1269 0DB6                                       l1189 1608  
                                     l1365 12EC                                       l1357 1234  
                                     l1471 3AA0                                       l1472 3AAE  
                                     l1464 3A26                                       l1473 3AC4  
                                     l1465 3A3E                                       l1803 449C  
                                     l1467 3A6C                                       l1804 4490  
                                     l1468 3A60                                       l1572 3938  
                                     l1581 39FE                                       l1573 3932  
                                     l1807 44C4                                       l1575 397A  
                                     l1808 44D2                                       l1753 4BCC  
                                     l1578 39CA                                       l1579 398C  
                                     l1870 3EAA                                       l1871 3E24  
                                     l1872 3EA2                                       l1793 42CE  
                                     l1794 42C2                                       l1883 4AA2  
                                     l1884 4A90                                       l1797 4302  
                                     l1877 4874                                       l1798 4310  
                                     l1878 4852                                       ?_isr 0001  
                                     l9303 3DD8                                       l9073 2E5A  
                                     l9411 47DC                                       l9341 2C48  
                                     l9337 2C22                                       l9515 189A  
                                     l9427 4852                                       l9621 3E24  
                                     l9613 4A90                                       l8833 2A84  
                                     l9485 1802                                       l8865 2B32  
                    _escreve_caractere_lcd 43A0                                       l8963 4B52  
                                     l8957 4B42                                       STR_1 61FF  
                                     STR_2 620B                                       STR_3 61FF  
                                     STR_4 6223                                       STR_5 6217  
                                     STR_6 6223                                       STR_7 61F3  
                                     STR_8 620B                                       STR_9 61D8  
                           timer_dois@flag 0033                                       _BRGH 007D62  
                          __end_of_GPSRead 2534                                       _T0IF 007F92  
                                     _CREN 007D5C                               ?_escreve_SPI 0001  
                                     _LATB 000F8A                                       _PIE1 000F9D  
                                     _RCIF 007CF5                                       i2l90 32D4  
                                     i2l92 32F4                                       i2l93 3308  
                                     i2l85 327E                                       i2l86 3300  
                                     i2l87 3298                                       i2l89 32C6  
                                     _TMR2 000FCC                                       _SPEN 007D5F  
                                     _TRMT 007D61                                       _TXEN 007D65  
                                     _SYNC 007D64                               trace_path@dj 00C0  
                             trace_path@fn 00C2                               trace_path@ds 00D4  
                             trace_path@fs 00D0                              ?_make_dirfile 0068  
                                     _Term 0036                                       _dado 0032  
                                     _flag 00F7                                       _atoi 3930  
                                     _main 4AB6                                       _fsid 00FB  
                                     fsr0h 000FEA                                       fsr1h 000FE2  
                                     indf0 000FEF                                       fsr2h 000FDA  
                                     fsr0l 000FE9                                       indf1 000FE7  
                                     indf2 000FDF                                       fsr1l 000FE1  
                                     fsr2l 000FD9                                       btemp 003F  
                                     _sync 45AE                              disk_ioctl@cmd 0060  
                            disk_read@buff 007F                              disk_ioctl@res 0064  
                            disk_read@pdrv 0087                                       prodh 000FF4  
                                     prodl 000FF3                                       start 000E  
                  ?_verifica_fence_externo 0001                  sdc_disk_initialize@buff_i 007B  
                             ___param_bank 000000                  sdc_disk_initialize@count1 0077  
                sdc_disk_initialize@count2 007D                                _string_dado 0100  
                                    ??_isr 000C                    __size_of_escrita_sdcard 00A8  
         __size_of_configura_baudrate_uart 0132                                      l11001 1C5A  
                                    l10323 0758                                      l10405 458C  
                                    l11141 3CE0                                      l11063 3618  
                                    l11049 35E8                                      l11093 367E  
                                    l11079 364E                                      l10661 0FAC  
                                    l10753 11BE                                      l10693 106A  
                                    l10849 39C6                                      l10961 1B04  
                                    l10945 1AB4                                      l10987 1B84  
                                    l10979 1B34                            __end_of___aldiv 3AD6  
                                    ?_atoi 0066                                      ?_main 0001  
                                    STR_10 6272                                      STR_11 626C  
                                    STR_20 623A                                      STR_12 61BB  
                                    STR_21 61AB                                      STR_13 6196  
                                    STR_22 6245                                      STR_14 61CA  
                                    STR_15 6259                                      STR_23 622F  
                                    STR_24 627C                                      STR_16 624F  
                                    STR_25 6278                                      STR_17 6263  
                                    STR_18 6181                                      STR_19 61E6  
                             ?_leitura_SPI 0001                            __end_of___lldiv 4322  
                                    ?_sync 0001                                      u11015 289E  
                                    u11210 2BE0                                      u12010 3112  
                                    u11220 2BEC                                      u11045 2928  
                                    u11125 26EA                                      u10440 4A4E  
                                    _T0CON 000FD5                                      u11065 258C  
                                    u11330 2D3E                                      u11170 3DD8  
                                    u13010 0758                                      u10460 4504  
                                    u11500 189A                                      u11420 1788  
                                    u10605 2ADC                                      u10630 2B58  
                                    u11430 1798                                      u11095 2656  
                                    u10640 2B94                                      u12320 40D6  
                                    u11520 18A6                                      u11441 17A2  
                          __end_of___llmod 44E4                                      u11370 47DC  
                                    u11610 1A06                                      u13050 09CE  
                                    u10475 3372                                      u10900 2EB2  
                                    u11620 1A3E                                      u11460 1802  
                                    u13060 09E4                                      u13140 44A0  
                                    u14100 1B22                                      u10565 2A32  
                                    u13045 08F8                                      u10590 2AAA  
                                    u10670 4B62                                      u12430 3A70  
                                    u11640 3E52                                      u12600 1E18  
                                    u14040 407A                                      _T2CON 000FCA  
                                    u12345 3842                                      u12505 34F8  
                                    u10850 2D9A                                      u11570 198A  
                                    u13330 15E8                                      u12355 385E  
                                    u13075 0A6C                                      u14051 1A6E  
                                    u13500 0E18                                      u11660 3E7A  
                                    u10940 46DA                                      u13260 1492  
                                    u12365 388E                                      u12525 353C  
                                    u14061 1A80                                      u12470 42D2  
                                    u10950 4704                                      u14150 1C12  
                                    u12375 38A8                                      u11647 3E48  
                                    u12607 1E0E                                      u12535 3586  
                                    u15007 3EEA                                      u13520 0E90  
                                    u13425 0C02                                      u15017 3F06  
                                    u10970 27C4                                      u13530 0ED6  
                                    u12570 3C96                                      u12810 2192  
                                    u13290 1530                                      u11667 3E70  
                                    u10947 46D0                                      u11835 033E  
                                    u15027 3F22                                      u12580 3CBE  
                                    u13620 108C                                      u14180 1CF0  
                                    u10957 46FA                                      u15037 1722  
                                    u12645 1EA2                                      u14270 3644  
                                    u12590 3CD6                                      u12830 21B8  
                                    u14190 1CF4                                      u13535 0ECC  
                                    u15047 18B6                                      u12495 34AC  
                                    u11880 0552                                      u15057 1968  
                                    u11970 301A                                      u15067 4924  
                                    u10995 282A                                      u11955 2FA4  
                                    u11795 0258                                      u12860 0604  
                                    u11980 303E                                      u12780 2138  
                                    u13820 132C                                      u13660 1126  
                                    u14380 41A2                                      u12765 2100  
                                    u11990 3100                                      u13590 0FF8  
                                    u14390 41BA                                      u13831 1364  
                                    u12880 062A                                      u14368 3D38  
                                    u14369 3D4C                                      u13770 1290  
                                    u12867 05FA                                      u11997 30F6  
                                    u12887 0620                                      u14997 4204  
                                    i2l210 251E                                      i2l211 22A8  
                                    i2l220 2348                                      i2l212 22B6  
                                    i2l205 4760                                      i2l213 22C6  
                                    i2l222 2368                                      i2l231 2424  
                                    i2l223 236C                                      i2l232 2428  
                                    i2l224 2394                                      i2l233 2452  
                                    i2l225 23BE                                      i2l217 22E8  
                                    i2l234 247C                                      i2l218 22F2  
                                    i2l235 24A6                                      i2l227 23DA  
                                    i2l236 24D2                                      i2l228 23DE  
                                    i2l237 24FE                                      i2l229 2408  
                                    i2l238 2506                                      i2l871 4CC8  
                                    _RCREG 000FAE                                      _RCSTA 000FAB  
                                    _TMR0H 000FD7                                      _TMR0L 000FD6  
                                    _SPBRG 000FAF                                      _TRISA 000F92  
                                    _TRISB 000F93                                      _TRISC 000F94  
                                    _TRISD 000F95                                      _TRISE 000F96  
                          __end_of_f_close 4B10                                      _TXREG 000FAD  
                            trace_path@dir 00C6                                      _TXSTA 000FAC  
                                    _FatFs 00FD                            __end_of_f_lseek 0F88  
                      ___lmul@multiplicand 0064                 __size_of_config_timer_dois 000E  
                          __end_of_f_mount 4840                            __end_of_f_write 05CC  
               __size_of_config_timer_zero 001C                              get_cluster@bc 00AF  
                            get_cluster@fs 00B1                              get_cluster@wc 00A9  
                          __end_of_command 454C                                      _delay 4B3C  
                          clust2sect@clust 006C                            __end_of_fprintf 1366  
                                    _fputc 4608                                      _fputs 454C  
                          __end_of_isdigit 4BD4                   __size_of_escreve_cmd_lcd 008C  
                                    atoi@a 006B                                      atoi@s 0066  
                           ??_make_dirfile 006C                             disk_ioctl@buff 0061  
                                    pclath 000FFA                             disk_read@count 0085  
                                    tablat 000FF5                             disk_ioctl@pdrv 0063  
                         ?_dados_gps_to_sd 0001                            __end_of_proceed 4D18  
                                    plusw1 000FE3                                      plusw2 000FDB  
                                    status 000FD8                                      wtemp6 0040  
                            disk_write@res 008A             __end_of_verifica_fence_externo 1D5A  
                          __initialization 421A                        disk_initialize@pdrv 0080  
                      disk_initialize@stat 0081                               __end_of_atoi 3A08  
                             __end_of_main 4AE4                               clust2sect@fs 0075  
                             __end_of_sync 4608                         _inicializa_tarefas 470C  
                          escalonador@cont 00EA                           __end_of_Latitude 4D00  
                      reserve_direntry@dir 00C6                          create_chain@clust 00B6  
                              auto_mount@p 00B1                          create_chain@cstat 00BE  
 verifica_fence_externo@point_buff_gps_lat 008A                              sdc_reset@buff 0072  
                                   ??_atoi 0068                                     ??_main 0022  
                                   ??_sync 0022                              __activetblptr 000002  
                      ?_inicializa_tarefas 0001                       __end_of_desliga_uart 4CE8  
                                ??_GPSRead 000A                             _next_dir_entry 2F10  
                     __size_of_desliga_SPI 000C                          get_fattime@f_time 008A  
                         ??_sdc_disk_write 0073                                     ?_delay 0001  
                   ?_escreve_caractere_lcd 0001                                     _ADCON1 000FC1  
                                   ?_fputc 00E5                           ___llmod@dividend 0060  
                                   ?_fputs 01CF                         auto_mount@bootsect 00A9  
                                   _INT0IE 007F94                                     _INT0IF 007F91  
                            ?_dummy_clocks 0001                                     i2l2010 48D2  
                                   i2l2009 48DA                                     _PCLATH 000FFA  
                                   _INTCON 000FF2                    __size_of_inicializa_SPI 0020  
                                   _TMR0IF 007F92                                     _TMR2IF 007CF1  
                       auto_mount@maxclust 00A5                   __end_of_recebe_dado_uart 4CCC  
                                   _SPPCFG 000F63                                     _SPPCON 000F65  
                                   _SSPBUF 000FC9                   __size_of_sdc_disk_status 0018  
                         __end_of_check_fs 410C                       ??_inicializa_tarefas 0021  
                        ?_disparo_gravacao 0001                             trace_path@dptr 00D5  
                           trace_path@path 00C4                     reserve_direntry@sector 00CA  
                 __size_of_disk_initialize 003C                 __end_of_posicao_cursor_lcd 43A0  
                       ??_disparo_gravacao 0022                             auto_mount@path 0093  
                             ?_move_window 008B                       __end_of_create_chain 2D5A  
                             _dado_arquivo 02D0                     __size_of_init_hardware 0016  
                           auto_mount@stat 00B4                       __size_of_get_fattime 0108  
                             put_cluster@p 00B2               ?_verifica_dados_operacionais 0001  
                     __size_of_get_cluster 0222                                     ___lmul 4660  
                                ??___aldiv 0021                       __size_of_disk_status 0048  
                                   ___wmul 4B66                         __size_of_Longitude 000C  
                                ??___lldiv 0021                                     _f_open 1366  
                                ??___llmod 0021                                     _f_sync 36FE  
                                   _buffer 0162                                     _estado 0034  
                                   _memcmp 3E22                                     _memcpy 4840  
                         __end_of_init_lcd 3F64                                     _memset 4A86  
                                ??_f_close 0022                                     clear_0 4254  
                                   clear_1 4266                                     clear_2 4272  
                                   clear_3 427E                                     clear_4 428A  
                                ??_f_lseek 00CA                                  ??_f_mount 0021  
                 configura_baudrate_uart@x 007A                                  ??_f_write 00CC  
                                   _strcmp 48D0                        _sdc_disk_initialize 16FC  
                                ??_command 0021                                GPSRead@buff 000A  
                                   _strlen 499E                           put_cluster@clust 00A0  
                       get_cluster@fatsect 00AB                                     fputc@c 01CC  
                         __end_of_monta_sd 36FE                   __end_of_reserve_direntry 22A0  
                         __end_of_validate 47F6                     __end_of_next_dir_entry 3098  
                                ??_fprintf 01E1                               __pdataCOMRAM 003E  
                                   fputs@n 01D3                                  ??_isdigit 0021  
                     __size_of_escalonador 00A4                           __end_of_response 4D0C  
                             __mediumconst 615E                      write_timer_zero@timer 0062  
                          disk_read@sector 0081                            disk_read@result 0088  
                                   tblptrh 000FF7                                     tblptrl 000FF6  
                                   tblptru 000FF8                                  ??_proceed 0021  
                         _write_timer_zero 4C96                                     sync@fs 00A0  
                escreve_caractere_lcd@data 0021                             ??_dummy_clocks 0060  
                          sdc_disk_write@i 0077                            sdc_disk_write@j 007C  
                               __accesstop 0060                    __end_of__initialization 4290  
                     ?_sdc_disk_initialize 0001                             disk_write@buff 007F  
                           disk_write@pdrv 0087                       __size_of_escreve_SPI 0014  
                            ___rparam_used 000001                          ??_escreve_cmd_lcd 0021  
                           __pcstackCOMRAM 0001                __end_of_endereco_cursor_lcd 447C  
                             __pidataBANK1 4A52                          ?_mensagem_inicial 0001  
                  _configura_baudrate_uart 349A                              __end_of_delay 4B66  
                           _escrita_sdcard 3B8C                              __end_of_fputc 4660  
                            __end_of_fputs 45AE              ??_verifica_dados_operacionais 0021  
                       ??_mensagem_inicial 0065                       __end_of_make_dirfile 3206  
                             ?_put_cluster 00A0                          reserve_direntry@c 00D1  
                        reserve_direntry@n 00CE                         _tarefa_em_execucao 0039  
               __end_ofi2_write_timer_zero 4CBA                            ?_next_dir_entry 00B3  
                   __size_of_sdc_disk_read 0146            configura_baudrate_uart@baudrate 006E  
                     reserve_direntry@dptr 00CF                       __size_of_leitura_SPI 000C  
                            _init_hardware 4C44                               auto_mount@fs 00B9  
                       __size_of_disk_read 0090                                    ??_delay 0021  
                           sdc_reset@count 0070                                    ??_fputc 0022  
                                  ??_fputs 00E9                          __end_of_Longitude 4CF4  
             mensagem_inicial@msg_linha_um 0067                                 __pbssBANK0 00EB  
                               __pbssBANK1 0100                                 __pbssBANK2 0200  
           __size_of_escreve_frase_ram_lcd 0054              __end_of_escreve_frase_ram_lcd 470C  
                    ??_sdc_disk_initialize 0073                                  ?_Latitude 0060  
                escreve_inteiro_uart@F3958 01AF                     __end_of_escrita_sdcard 3C34  
                       __size_of_sdc_reset 00A4                                    ?___lmul 0060  
                        ??_sdc_disk_status 0021                              make_dirfile@a 0072  
                            make_dirfile@b 0070                              make_dirfile@c 0074  
                            make_dirfile@n 0073                              make_dirfile@t 0071  
                                  ?___wmul 0060                      mensagem_inicial@F4347 6170  
                    mensagem_inicial@F4349 615F                                    ?_f_open 00D7  
                                  ?_f_sync 00A2                          ??_disk_initialize 0022  
                    __size_of_desliga_uart 000E                                    ?_memcmp 0060  
                                  ?_memcpy 0060                                    ?_memset 0060  
                           ___lmul@product 0068                                    ?_strcmp 0001  
                                  ?_strlen 0060                                    i2l11357 3290  
                                  _INTCON2 000FF1                                    _INTCON3 000FF0  
                           ?_init_hardware 0001                                  ?_check_fs 008B  
                               _disk_ioctl 4B10                                    _GPSRead 22A0  
                               _disk_write 410C                             remove_chain@fs 00BC  
     __size_of_verifica_dados_operacionais 0002                                    _SSPCON1 000FC6  
                 __size_of_inicializa_uart 0024                                    _SSPSTAT 000FC7  
                               _clust2sect 3AD6                             _inicializa_SPI 4BD4  
                          trace_path@clust 00D2                                 ??_Latitude 0021  
                            ?_remove_chain 00B6                      __size_of_create_chain 01C0  
                                ?_init_lcd 0001                         __size_of_stringcpy 004E  
                            _sdc_disk_read 3354                               _desliga_uart 4CDA  
                               _auto_mount 05CC                                    __Hparam 0000  
                ??_configura_baudrate_uart 0072                                    __Lparam 0000  
                                ?_monta_sd 0066                                  ?_validate 0066  
                          ?_escrita_sdcard 0001                          __end_of_disk_read 3FF4  
                            put_cluster@bc 00B0                                  ?_response 0001  
                            put_cluster@fs 00B4                                    ___aldiv 3A08  
                               f_close@res 00AD                            __size_of___lmul 0058  
                                  ___lldiv 429E                            __size_of___wmul 0028  
                                  ___llmod 447C                       __size_of_move_window 01B6  
                               check_fs@fs 0091                            __size_of_f_open 0396  
                          __size_of_f_sync 012A                       __end_of_dummy_clocks 495C  
                                  _f_close 4AE4                                    __pcinit 421A  
                          __size_of_memcmp 00A4                            __size_of_memcpy 0048  
                          __size_of_memset 0030                                    _f_lseek 0AFE  
                               _init_ports 4BF4                                    __ramtop 0800  
                                  _f_mount 47F6                                    __ptext0 4AB6  
                                  __ptext1 4194                                    __ptext2 3EC6  
                                  __ptext3 3FF4                                    __ptext4 4C44  
                                  __ptext5 4BF4                                    __ptext6 4D30  
                                  __ptext7 4C84                                    __ptext8 4C10  
                                  __ptext9 4C96                                    _f_write 0012  
                                  _command 44E4                                  _T0CONbits 000FD5  
                      auto_mount@totalsect 00AD                            __size_of_strcmp 0048  
                          __size_of_strlen 003E                    i2write_timer_zero@timer 0003  
              endereco_cursor_lcd@endereco 0021                                    _fprintf 0F88  
                                  _rawDate 0180                                    _isdigit 4BB2  
                             __size_of_isr 334C                    ??_escreve_caractere_lcd 0021  
                               ??_check_fs 008F                                    _rawTime 016E  
                         ___aldiv@dividend 0060                               stringcpy@chr 0009  
                             stringcpy@dir 0005                                    _time_sd 002E  
                             _create_chain 2B9A                                    _proceed 4D0C  
                  __size_of_init_interrupt 0012                          __end_of_sdc_reset 3E22  
                   __end_of_inicializa_SPI 4BF4                                 f_lseek@ofs 00C6  
                           __pintcode_body 3206                                 f_lseek@res 00D6  
                     end_of_initialization 4290                                 f_open@mode 00DB  
                               f_open@path 00D9                             ??_remove_chain 00B8  
                                  isr@cont 0020                                    memcmp@n 0064  
                                  memcpy@d 0067                                    memcpy@n 0064  
                                  memcpy@s 0069                    __size_of_init_oscilador 0008  
                                  fputc@bw 01CD                                    memset@c 0062  
                                  memset@n 0064                                    memset@p 0066  
                     sdc_disk_initialize@i 0074                              __Lmediumconst 615E  
                               ??_init_lcd 0062                                    int_func 3206  
                        ?_recebe_dado_uart 0001                            disk_status@pdrv 0064  
                          disk_status@stat 0065                             ?_sdc_disk_read 006C  
                                i2u1460_40 326E                                  i2u1461_48 3270  
                                i2u1467_40 32D8                     write_timer_zero@timer0 0060  
                          ___lldiv@divisor 0064                              _rawSatellites 003B  
                               f_mount@drv 0021                         ??_recebe_dado_uart 0001  
                         sdc_disk_read@ptr 0077                            ___lldiv@counter 006C  
                               ??_monta_sd 0021                verifica_fence_externo@F4361 01A4  
              verifica_fence_externo@F4363 0199                                 ??_validate 006A  
                    __size_of_make_dirfile 016E                   __size_of_dados_gps_to_sd 0042  
                               ??_response 0021                                  _RCSTAbits 000FAB  
                 __end_of_write_timer_zero 4CA8                           ___aldiv@quotient 006A  
                                  postdec1 000FE5                                    postdec2 000FDD  
                                  postinc0 000FEE                                    postinc1 000FE6  
                                  postinc2 000FDE                                 _wait_ready 4A18  
                                  strcmp@r 0006                                    strlen@s 0060  
                                _PORTBbits 000F81                  __size_of_disparo_gravacao 0016  
                                _PORTDbits 000F83                            ??_init_hardware 0021  
              verifica_fence_externo@count 0089                                 _trace_path 1D5A  
                       _posicao_cursor_lcd 4322                          __end_of_stringcpy 47AA  
              verifica_fence_externo@point 008F                              ??_desliga_SPI 0021  
                     __size_of_put_cluster 027A            __end_of_configura_baudrate_uart 35CC  
                              ?_disk_ioctl 0060                          ?_reserve_direntry 00C4  
                               f_write@btw 00C8                                 f_write@res 00D8  
                                _TRISBbits 000F93                                ?_disk_write 007F  
                                _TRISCbits 000F94                                  _TRISDbits 000F95  
                         next_dir_entry@dj 00B3                            _escreve_cmd_lcd 3FF4  
                       ??_reserve_direntry 00C8                        ?_posicao_cursor_lcd 0062  
                          ?_inicializa_SPI 0001                            disk_write@count 0085  
                              ?_clust2sect 006C                           _put_cluster$1890 00AA  
                         _put_cluster$1889 00A8                                 command@CMD 006A  
                               command@CRC 0069                                 command@arg 0065  
                             _make_dirfile 3098                              ??_get_fattime 0064  
                        ??_inicializa_uart 0021                __size_of_inicializa_tarefas 0050  
                            ??_get_cluster 00A2                              ??_disk_status 0021  
                              ?_auto_mount 0093                          _make_dirfile$1999 006E  
                          command@argument 006B                       ??_posicao_cursor_lcd 0022  
                           __end_of___lmul 46B8                           ??_next_dir_entry 00B5  
                           __end_of___wmul 4B8E                             __end_of_f_open 16FC  
                            __pidataCOMRAM 4D3A                              ??_escalonador 01EF  
                              ?_init_ports 0001                             __end_of_f_sync 3828  
                           __end_of_memcmp 3EC6                             __end_of_memcpy 4888  
                           __end_of_memset 4AB6                             __end_of_strcmp 4918  
                           __end_of_strlen 49DC                        start_initialization 421A  
                              __end_of_isr 3354                  __size_of_mensagem_inicial 0086  
                       reserve_direntry@dj 00C4                         reserve_direntry@fs 00D4  
                      __end_of_desliga_SPI 4D30                              ??_escreve_SPI 0021  
                 ??_verifica_fence_externo 006D                            _sdc_disk_status 4C2C  
                          ??_sdc_disk_read 0073                          auto_mount@fatsize 00B5  
                       i2_write_timer_zero 4CA8                            ___llmod@divisor 0064  
                                _Longitude 4CE8                            _disk_initialize 49DC  
                          ___llmod@counter 0021                          __size_of_Latitude 000C  
                    reserve_direntry@clust 00D2                    __size_of_sdc_disk_write 01CA  
                         _data_uart_recebe 003A                          wait_ready@timeout 0060  
                    __size_of_dummy_clocks 0044                              auto_mount@fmt 00B3  
                      __size_of_disk_ioctl 002C                        ?i2_write_timer_zero 0001  
                      __size_of_disk_write 0088                                   ??___lmul 0021  
                               fprintf@fil 01D5                                 fprintf@arp 031C  
                                 ??___wmul 0021                                 fprintf@res 0310  
                               fprintf@val 0318                                 fprintf@str 01D7  
                      __end_of_get_fattime 3930                                   ??_f_open 00DC  
                                 ??_f_sync 0022                                ?_wait_ready 0001  
                              __pdataBANK1 0199                        __end_of_get_cluster 29D0  
                                 ??_memcmp 0066                        __end_of_disk_status 48D0  
                                 ??_memcpy 0021                        __size_of_clust2sect 00B6  
                                 ??_memset 0021                     sdc_disk_read@start_add 0078  
                     __end_of_remove_chain 3CDA                          ??_dados_gps_to_sd 0021  
                  sdc_disk_initialize@buff 007F                              ??_leitura_SPI 0021  
                  __end_of_escreve_cmd_lcd 4080                                   ??_strcmp 0005  
                                 ??_strlen 0062                    sdc_disk_initialize@stat 0076  
                              ?_trace_path 00C0               __size_of_endereco_cursor_lcd 006A  
                             _fprintf$2487 0312                                __pbssBIGRAM 0323  
                            monta_sd@index 0068                                __pbssCOMRAM 0022  
                          _trace_path$2046 00CC                            _trace_path$2048 00CE  
                                 ?_GPSRead 0001                              __pcstackBANK0 0060  
                            __pcstackBANK1 01CC                              __pcstackBANK3 0300  
                           _init_interrupt 4C84                        __size_of_auto_mount 0532  
                     ??i2_write_timer_zero 0003                        __end_of_escalonador 3D7E  
              __end_of_sdc_disk_initialize 1A42                          __size_of_check_fs 008C  
                             _isdigit$2825 0060                               check_fs@sect 008B  
                              _char_number 0038                                 sdc_reset@i 006C  
                             _dummy_clocks 4918                             _init_oscilador 4D30  
                                 GPSRead@c 000B                           ??_escrita_sdcard 0022  
                      __size_of_init_ports 001C                                 ?_Longitude 0060  
                    _escreve_frase_ram_lcd 46B8                                  _data_buff 0028  
                                _data_hoje 0035                        __end_of_escreve_SPI 4C84  
                        __size_of_init_lcd 009E                          delay@contador_int 0061  
                        delay@contador_ext 0060        __end_of_verifica_dados_operacionais 4D3A  
              _verifica_dados_operacionais 4D38                                  __pintcode 0008  
                            __pmediumconst 615E        verifica_fence_externo@temp_buff_lat 0073  
                                 ?___aldiv 0060                          __size_of_monta_sd 0132  
                                 ?___lldiv 0060                                   ?___llmod 0060  
                        __size_of_validate 004C                          __size_of_response 000C  
                                 ?_f_close 00AB                                  _disk_read 3F64  
                       _sinaliza_int_timer 00FF                                   ?_f_lseek 00C4  
                                 ?_f_mount 0060                           _disparo_gravacao 4C5A  
                                 ?_f_write 00C4                                   ?_command 0065  
                   __end_of_init_interrupt 4C96                                   ?_fprintf 01D5  
                                 ?_isdigit 0001                                _desliga_SPI 4D24  
                      sdc_disk_read@p_buff 006C                        sdc_disk_read@length 007C  
                      sdc_disk_read@sector 006E                    __end_of_sdc_disk_status 4C44  
           __size_of_escreve_caractere_lcd 0072              __end_of_escreve_caractere_lcd 4412  
                                 ?_proceed 0001                                  f_close@fp 00AB  
                      __end_of_leitura_SPI 4D24                             __size_of_delay 002A  
                  __end_of_disk_initialize 4A18                     __end_of_init_oscilador 4D38  
                           __size_of_fputc 0058                             __size_of_fputs 0062  
                      make_dirfile@dirname 006A                                 validate@id 0068  
                               validate@fs 0066                                  _p_tarefas 00F1  
                                _rawCourse 0187            __size_of_verifica_fence_externo 0318  
                         make_dirfile@path 0068                                   _GPGGA_ok 002A  
                                _sdc_reset 3D7E                        __size_of_wait_ready 003A  
                          ___aldiv@divisor 0064                            ___aldiv@counter 0068  
                           ___wmul@product 0064                                   _LATBbits 000F8A  
                                f_lseek@fp 00C4                                   _LATCbits 000F8B  
                                 _GPRMC_ok 002C                                  f_open@dir 01DF  
                                f_open@res 01DE                                   _PIE1bits 000F9D  
                              _get_fattime 3828                               _rawLongitude 0148  
                      __size_of_trace_path 02AC                                _get_cluster 27AE  
                              _disk_status 4888                              ??_move_window 008F  
                                f_mount@fs 0060                                   _PIR1bits 000F9E  
                                 i2u915_40 490C                              move_window@fs 009E  
                        ?_write_timer_zero 0060                            remove_chain@nxt 00BA  
                                f_sync@dir 00A9                                  f_sync@res 00A8  
                                f_sync@tim 00A4                   posicao_cursor_lcd@coluna 0062  
                               ?_disk_read 007F                         ??_write_timer_zero 0021  
                                f_write@cc 00DF                 posicao_cursor_lcd@endereco 0064  
                                f_write@bw 00CA                                  f_write@fp 00C4  
                __size_of_recebe_dado_uart 0012                                _escalonador 3CDA  
                        ___wmul@multiplier 0060                           ?_escreve_cmd_lcd 0001  
              escreve_frase_ram_lcd@buffer 0062                           ??_inicializa_SPI 0021  
                          ?_init_interrupt 0001                               ??_disk_ioctl 0021  
                             ??_disk_write 0086                               f_lseek@clust 00DF  
                          _inicializa_uart 4B8E                               f_lseek@csize 00DB  
                             f_lseek@ifptr 00D7                                  _stringcpy 475C  
                         __size_of_GPSRead 0294                           _mensagem_inicial 4194  
                          ?_init_oscilador 0001                               ??_clust2sect 0070  
                        ___lmul@multiplier 0060                                  copy_data0 422E  
                              _escreve_SPI 4C70                                 ?_sdc_reset 0001  
                      sdc_reset@count_nosd 006E                                   _Latitude 4CF4  
                 ?_configura_baudrate_uart 006E                     ?_escreve_frase_ram_lcd 0062  
                              ??_Longitude 0021                           auto_mount@chk_wp 0095  
                        move_window@sector 008B                             _sdc_disk_write 29D0  
                __size_of_reserve_direntry 029A                   escreve_inteiro_lcd@F3966 01B6  
                             ??_auto_mount 0096                                   __Hrparam 0000  
                                memcpy@tmp 0066                                   __Lrparam 0000  
                                fprintf@cc 031E                         __end_of_disk_ioctl 4B3C  
                    __size_of_remove_chain 00A6                             put_cluster@val 00A2  
                         get_cluster@clust 00A0                         __end_of_disk_write 4194  
                  verifica_fence_externo@i 0090                    verifica_fence_externo@j 008E  
                             _SentenceType 0037                           __size_of___aldiv 00CE  
                   sdc_disk_initialize@ocr 007C                               monta_sd@dado 0066  
                   _verifica_fence_externo 1A42                           __size_of___lldiv 0084  
                         __size_of___llmod 0068                              ??_put_cluster 00A4  
                             monta_sd@size 0069                               ??_init_ports 0021  
                      __end_of_move_window 2F10                         __end_of_clust2sect 3B8C  
                         __size_of_f_close 002C                           __size_of_f_lseek 048A  
                         __size_of_f_mount 004A                                _leitura_SPI 4D18  
                         __size_of_f_write 05BA                          disk_status@result 0062  
                         __size_of_command 0068                      __end_of_init_hardware 4C5A  
                                 _check_fs 4080                           __size_of_fprintf 03DE  
                         __size_of_isdigit 0022                           ?_sdc_disk_status 0001  
                               ?_stringcpy 0001                         __end_of_auto_mount 0AFE  
                                 __ptext10 4CCC                                   __ptext11 470C  
                                 __ptext20 3B8C                                   __ptext12 3CDA  
                                 __ptext21 4B8E                                   __ptext13 4C5A  
                                 __ptext30 1366                                   __ptext22 349A  
                                 __ptext14 4D38                                   __ptext31 1D5A  
                                 __ptext23 3A08                                   __ptext15 1A42  
                                 __ptext40 49DC                                   __ptext32 3098  
                                 __ptext24 4BD4                                   __ptext16 3930  
                                 __ptext41 16FC                                   __ptext33 2006  
                                 __ptext25 0F88                                   __ptext17 4BB2  
                                 __ptext50 4660                                   __ptext42 3D7E  
                                 __ptext34 2F10                                   __ptext26 454C  
                                 __ptext18 4CE8                                   __ptext51 47F6  
                                 __ptext43 4322                                   __ptext35 3AD6  
                                 __ptext27 4608                                   __ptext19 4CF4  
                                 __ptext60 47AA                                   __ptext52 0AFE  
                                 __ptext44 4412                                   __ptext36 3C34  
                                 __ptext28 0012                                   __ptext61 4888  
                                 __ptext53 2B9A                                   __ptext45 46B8  
                                 __ptext37 4840                                   __ptext29 447C  
                                 __ptext70 4D0C                                   __ptext62 4C2C  
                                 __ptext54 2534                                   __ptext46 43A0  
                                 __ptext38 05CC                                   __ptext71 44E4  
                                 __ptext63 45AE                                   __ptext55 27AE  
                                 __ptext47 4B3C                                   __ptext39 4A86  
                                 __ptext80 495C                                   __ptext72 4A18  
                                 __ptext64 2D5A                                   __ptext56 4B66  
                                 __ptext48 4080                                   __ptext81 35CC  
                                 __ptext73 4C70                                   __ptext65 410C  
                                 __ptext57 429E                                   __ptext49 3E22  
                                 __ptext82 499E                                   __ptext74 4918  
                                 __ptext66 29D0                                   __ptext58 4AE4  
                                 __ptext75 4D18                                   __ptext67 3F64  
                                 __ptext59 36FE                                   __ptext84 4CA8  
                                 __ptext76 4B10                                   __ptext68 3354  
                                 __ptext85 4CBA                                   __ptext77 3828  
                                 __ptext69 4D00                                   __ptext86 22A0  
                                 __ptext78 4CDA                                   __ptext87 475C  
                                 __ptext79 4D24                                   __ptext88 48D0  
                                 __ptext89 0000                           __size_of_proceed 000C  
                                 _filename 01BD                                _rawAltitude 0179  
                         ?_disk_initialize 0001                             _timeout_tarefa 0030  
                       sdc_disk_read@count 0072                 __end_of_inicializa_tarefas 475C  
                 i2write_timer_zero@timer0 0001                     __end_of_sdc_disk_write 2B9A  
                                monta_sd@i 006A                                _rawLatitude 0155  
                                 _init_lcd 3EC6                              __size_of_atoi 00D8  
                            __size_of_main 002E                               _remove_chain 3C34  
                            __size_of_sync 005A                        _endereco_cursor_lcd 4412  
                       __end_of_init_ports 4C10                                   _rawSpeed 018D  
                            dummy_clocks@i 0063                                   f_open@dj 01E1  
                            dummy_clocks@n 0062                                   f_open@fn 01CC  
                                 f_open@fp 00D7                                   f_open@dw 01DA  
                                 f_open@rs 01D8                            _dados_gps_to_sd 495C  
                                 _monta_sd 35CC                                   _validate 47AA  
                                 _sentence 0193                               move_window@n 0099  
                            stringcpy@str1 0001                              stringcpy@str2 0003  
                                 _response 4D00                                   f_sync@fp 00A2  
              __size_of_posicao_cursor_lcd 007E                                   int$flags 003F  
                  posicao_cursor_lcd@linha 0063                                   atoi@sign 006A  
                             ??_wait_ready 0021                                ??_disk_read 0086  
                  __end_of_inicializa_uart 4BB2                               ??_trace_path 00C8  
                     ?_endereco_cursor_lcd 0001                         put_cluster@fatsect 00AC  
                               _INTCONbits 000FF2  verifica_fence_externo@point_buff_gps_long 008C  
                                 memcmp@s1 0060                                   memcmp@s2 0062  
                         move_window@wsect 009A                                   memcpy@d1 0060  
                                 memcpy@s1 0062                        __end_of_put_cluster 27AE  
                                 fprintf@c 0322                                   fprintf@f 0316  
                                 fprintf@i 0320                                   fprintf@r 0317  
                                 fprintf@s 0300                                   fprintf@w 0314  
                                 fputc@chr 00E5                                   fputc@fil 00E7  
                                 isdigit@c 0061                                   memset@p1 0060  
                        _config_timer_dois 4CCC                               _tempo_backup 00EB  
                                 fputs@fil 01D1                                   fputs@str 01CF  
                        _config_timer_zero 4C10                               _poligono_ext 0200  
                            wait_ready@res 0064                                   intlevel2 0000  
                       ?_config_timer_dois 0001                   mensagem_inicial@msg_dois 0078  
                              ??_sdc_reset 0022                         ?_config_timer_zero 0001  
                             _tempo_tarefa 0022                            ?_sdc_disk_write 006C  
                       __end_of_wait_ready 4A52                   __end_of_disparo_gravacao 4C70  
                         ___lldiv@dividend 0060                          sdc_disk_read@buff 007E  
                    __end_of_sdc_disk_read 349A                        sdc_disk_status@pdrv 0061  
                      sdc_disk_status@stat 0060                              ?_desliga_uart 0001  
                      ??_config_timer_dois 0021                                 _OSCCONbits 000FD3  
                       __end_of_trace_path 2006                        ??_config_timer_zero 0021  
                              _move_window 2D5A       verifica_fence_externo@temp_buff_long 007E  
                     sdc_disk_write@count1 0079                       sdc_disk_write@p_buff 006C  
                         _recebe_dado_uart 4CBA                       sdc_disk_write@sector 006E  
                    ??_endereco_cursor_lcd 0021                               response@buff 0021  
                                 strcmp@s1 0001                                   strcmp@s2 0003  
                             ?_desliga_SPI 0001                           ___lldiv@quotient 0068  
                                 strlen@cp 0064                          remove_chain@clust 00B6  
                __end_of_config_timer_dois 4CDA                               ___aldiv@sign 0069  
                            ?_create_chain 00B6                  __end_of_config_timer_zero 4C2C  
                              ??_stringcpy 0007                __size_ofi2_write_timer_zero 0012  
                              _SSPCON1bits 000FC6                    __size_of_next_dir_entry 0188  
                   escreve_cmd_lcd@comando 0021                         escreve_SPI@TempVar 0060  
                      sdc_disk_write@count 0072              sdc_disk_initialize@crc_number 0079  
                  __end_of_dados_gps_to_sd 499E                         sdc_disk_write@buff 007E  
             __size_of_sdc_disk_initialize 0346                               f_write@clust 00E1  
                           ??_desliga_uart 0021                         leitura_sdcard@size 003E  
                             f_write@wbuff 00D9                               ?_get_fattime 0060  
                         _reserve_direntry 2006                                f_write@buff 00C6  
                        sdc_disk_write@res 007B                               ?_get_cluster 00A0  
                              f_write@sect 00DB                                f_write@wcnt 00E3  
                             ?_disk_status 0001              __end_ofmensagem_inicial@F4347 6181  
            __end_ofmensagem_inicial@F4349 6170                            escreve_SPI@dado 0061  
